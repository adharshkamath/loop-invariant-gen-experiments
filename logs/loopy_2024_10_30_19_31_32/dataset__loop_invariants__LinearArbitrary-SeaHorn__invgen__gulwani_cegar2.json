{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int x,m,n;\n  n = unknown();\n  x = 0;\n  m = 0;\n  while( x < n ) {\n    if(unknown())\n\tm = x;\n\tx++;\n  }\n  if( n > 0 )\n    {\n      {;\n//@ assert( 0<=m);\n}\n\n      {;\n//@ assert(m<n);\n}\n\n    }\n}",
        "success": false,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 1 <= x <= n;\nloop invariant 0 <= m <= n;\nloop invariant m <= x <= n;\nloop invariant m <= n;\nloop invariant m <= x;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant if n > 0 then m < n else m >= n;\nloop invariant if n > 0 then m >= 0 else m <= 0;\nloop invariant if n > 0 then m <= n else m >= n;\nloop invariant if n > 0 then m >= 0 else m <= 0;\nloop invariant if n > 0 then m <= n else m >= n;\nloop invariant if n > 0 then m >= 0 else m <= 0;\nloop invariant if n > 0 then m <= n else m >= n;\nloop invariant if n > 0 then m >= 0 else m <= 0;\nloop invariant if n > 0 then m <= n else m >= n;\nloop invariant if n > 0 then m >= 0 else m <= 0;\nloop invariant if n > 0 then m <= n else m >= n;\nloop invariant if n > 0 then m >= 0 else m <= 0;\nloop invariant if n > 0 then m <= n else m >= n;\nloop invariant if n > 0 then m >= 0 else m <= 0;\nloop invariant if n > 0 then m <= n else m >= n;\nloop invariant if n > 0 then m >= 0 else m <= 0;\nloop invariant if n > 0 then m <= n else m >= n;\nloop invariant if n > 0 then m >= 0 else m <= 0;\nloop invariant if n > 0 then m <= n else m >= n;\nloop invariant if n > 0 then m >= 0 else m <= 0;\nloop invariant if n > 0 then m <= n else m >= n;\nloop invariant if n > 0 then m >= 0 else m <= 0;\nloop invariant if n > 0 then m <= n else m >= n;\nloop invariant if n > 0 then m >= 0 else m <= 0;\nloop invariant if n > 0 then m <= n else m >= n;\nloop invariant if n > 0 then m >= 0 else m <= 0;\nloop invariant if n > 0 then m <= n else m >= n;\nloop invariant if n > 0 then m >= 0 else m <= 0;\nloop invariant if n > 0 then m <= n else m >= n;\nloop invariant if n > 0 then m >= 0 else m <= 0;\nloop invariant if n > 0 then m <= n else m >= n;\nloop invariant if n > 0 then m >= 0 else m <= 0;\nloop invariant if n > 0 then m <= n else m >= n;\nloop invariant if n > 0 then m >= 0 else m <= 0;\nloop invariant if n > 0 then m <= n else m >= n;\nloop invariant if n > 0 then m >= 0 else m <= 0;\nloop invariant if n > 0 then m <= n else m >= n;\nloop invariant if n > 0 then m >= 0 else m <= 0;\nloop invariant if n > 0 then m <= n else m >= n;\nloop invariant if n > 0 then m >= 0 else m <= 0;\nloop invariant if n > 0 then m <= n else m >= n;\nloop invariant if n > 0 then m >= 0 else m <= 0;\nloop invariant if n > 0 then m <= n else m >= n;\nloop invariant if n > 0 then m >= 0 else m <= 0;\nloop invariant if n > 0 then m <= n else m >= n;\nloop invariant if n > 0 then m >= 0 else m <= 0;\nloop invariant if n > 0 then m <= n else m >= n;\nloop invariant if n > 0 then m >= 0 else m <= 0;\nloop invariant if n > 0 then m <= n else m >= n;\nloop invariant if n > 0 then m >= 0 else m <= 0;\nloop invariant if n > 0 then m <= n else m >= n;\nloop invariant if n > 0 then m >= 0 else m <= 0;\nloop invariant if n > 0 then m <= n else m >= n;\n*/\n```",
            "```\n/*@\nloop invariant m >= 0; loop invariant m < n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= m; loop invariant m <= x; loop invariant x < n; loop invariant m < x;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= m <= n;\nloop invariant m <= x;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant m <= n || (n <= 0);\nloop invariant m <= x || n <= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m <= n;\nloop invariant m >= 0;\nloop invariant m <= x;\nloop invariant m <= n;\nloop invariant m <= x ==> m <= n;\nloop invariant m <= n ==> m <= x;\nloop invariant m <= n ==> m <= n;\nloop invariant m <= x ==> m <= n ==> m <= x;\nloop invariant m <= x ==> m <= n ==> m <= n ==> m <= x;\nloop invariant m <= n ==> m <= n ==> m <= x ==> m <= n;\nloop invariant m <= n ==> m <= n ==> m <= x ==> m <= n ==> m <= x;\nloop invariant m <= x ==> m <= n ==> m <= n ==> m <= x ==> m <= n;\nloop invariant m <= x ==> m <= n ==> m <= n ==> m <= x ==> m <= n ==> m <= x;\nloop invariant m <= n ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n;\nloop invariant m <= n ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x;\nloop invariant m <= n ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n;\nloop invariant m <= n ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x;\nloop invariant m <= n ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n;\nloop invariant m <= n ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x;\nloop invariant m <= n ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n;\nloop invariant m <= n ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x;\nloop invariant m <= n ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n;\nloop invariant m <= n ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x;\nloop invariant m <= n ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n;\nloop invariant m <= n ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x;\nloop invariant m <= n ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n;\nloop invariant m <= n ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x;\nloop invariant m <= n ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= m <= x;\nloop invariant if (n > 0) then (0 <= m <= n) else (0 <= m <= n);\nloop invariant m <= x;\nloop invariant if (m >= 0) then (m < n) else (m < n);\nloop invariant if (m >= 1) then (m <= n) else (m <= n);\nloop invariant if (m >= 2) then (m <= n) else (m <= n);\nloop invariant if (m >= 3) then (m <= n) else (m <= n);\nloop invariant if (m >= 4) then (m <= n) else (m <= n);\nloop invariant if (m >= 5) then (m <= n) else (m <= n);\nloop invariant if (m >= 6) then (m <= n) else (m <= n);\nloop invariant if (m >= 7) then (m <= n) else (m <= n);\nloop invariant if (m >= 8) then (m <= n) else (m <= n);\nloop invariant if (m >= 9) then (m <= n) else (m <= n);\nloop invariant if (m >= 10) then (m <= n) else (m <= n);\nloop invariant if (m >= 11) then (m <= n) else (m <= n);\nloop invariant if (m >= 12) then (m <= n) else (m <= n);\nloop invariant if (m >= 13) then (m <= n) else (m <= n);\nloop invariant if (m >= 14) then (m <= n) else (m <= n);\nloop invariant if (m >= 15) then (m <= n) else (m <= n);\nloop invariant if (m >= 16) then (m <= n) else (m <= n);\nloop invariant if (m >= 17) then (m <= n) else (m <= n);\nloop invariant if (m >= 18) then (m <= n) else (m <= n);\nloop invariant if (m >= 19) then (m <= n) else (m <= n);\nloop invariant if (m >= 20) then (m <= n) else (m <= n);\nloop invariant if (m >= 21) then (m <= n) else (m <= n);\nloop invariant if (m >= 22) then (m <= n) else (m <= n);\nloop invariant if (m >= 23) then (m <= n) else (m <= n);\nloop invariant if (m >= 24) then (m <= n) else (m <= n);\nloop invariant if (m >= 25) then (m <= n) else (m <= n);\nloop invariant if (m >= 26) then (m <= n) else (m <= n);\nloop invariant if (m >= 27) then (m <= n) else (m <= n);\nloop invariant if (m >= 28) then (m <= n) else (m <= n);\nloop invariant if (m >= 29) then (m <= n) else (m <= n);\nloop invariant if (m >= 30) then (m <= n) else (m <= n);\nloop invariant if (m >= 31) then (m <= n) else (m <= n);\nloop invariant if (m >= 32) then (m <= n) else (m <= n);\nloop invariant if (m >= 33) then (m <= n) else (m <= n);\nloop invariant if (m >= 34) then (m <= n) else (m <= n);\nloop invariant if (m >= 35) then (m <= n) else (m <= n);\nloop invariant if (m >= 36) then (m <= n) else (m <= n);\nloop invariant if (m >= 37) then (m <= n) else (m <= n);\nloop invariant if (m >= 38) then (m <= n) else (m <= n);\nloop invariant if (m >= 39) then (m <= n) else (m <= n);\nloop invariant if (m >= 40) then (m <= n) else (m <= n);\nloop invariant if (m >= 41) then (m <= n) else (m <= n);\nloop invariant if (m >= 42) then (m <= n) else (m <= n);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= m <= x;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m <= x;\nloop invariant m < n;\nloop invariant m <= m';\nloop invariant 0 <= m' <= n;\nloop invariant x' == x + 1;\nloop invariant m' == m;\nloop invariant x' <= n;\nloop invariant m' <= x';\nloop invariant m' <= m;\nloop invariant m' < n;\nloop invariant m' <= m';\nloop invariant m' < n;\nloop invariant m' <= m;\nloop invariant m' < n;\nloop invariant m' <= m;\nloop invariant m' < n;\nloop invariant m' <= m;\nloop invariant m' < n;\nloop invariant m' <= m;\nloop invariant m' < n;\nloop invariant m' <= m;\nloop invariant m' < n;\nloop invariant m' <= m;\nloop invariant m' < n;\nloop invariant m' <= m;\nloop invariant m' < n;\nloop invariant m' <= m;\nloop invariant m' < n;\nloop invariant m' <= m;\nloop invariant m' < n;\nloop invariant m' <= m;\nloop invariant m' < n;\nloop invariant m' <= m;\nloop invariant m' < n;\nloop invariant m' <= m;\nloop invariant m' < n;\nloop invariant m' <= m;\nloop invariant m' < n;\nloop invariant m' <= m;\nloop invariant m' < n;\nloop invariant m' <= m;\nloop invariant m' < n;\nloop invariant m' <= m;\nloop invariant m' < n;\nloop invariant m' <= m;\nloop invariant m' < n;\nloop invariant m' <= m;\nloop invariant m' < n;\nloop invariant m' <= m;\nloop invariant m' < n;\nloop invariant m' <= m;\nloop invariant m' < n;\nloop invariant m' <= m;\nloop invariant m' < n;\nloop invariant m' <= m;\nloop invariant m' < n;\nloop invariant m' <= m;\nloop invariant m' < n;\nloop invariant m' <= m;\nloop invariant m' < n;\nloop invariant m' <= m;\nloop invariant m' < n;\nloop invariant m' <= m;\nloop invariant m' < n;\nloop invariant m' <= m;\nloop invariant m' < n;\nloop invariant m' <= m;\nloop invariant m' < n;\nloop invariant m' <= m;\nloop invariant m' < n;\nloop invariant m' <= m;\nloop invariant m' < n;\nloop invariant m' <= m;\nloop invariant m' < n;\nloop invariant m' <= m;\nloop invariant m' < n;\nloop invariant m' <= m;\nloop invariant m' < n;\nloop invariant m' <= m;\nloop invariant m' < n;\nloop invariant m' <= m;\nloop invariant m' < n;\nloop invariant m' <= m;\nloop invariant m' < n;\nloop invariant m' <= m;\nloop invariant m' < n;\nloop invariant m' <= m;\nloop invariant m' < n;\nloop invariant m' <= m;\nloop invariant m' < n;\nloop invariant m' <= m;\nloop invariant m' < n;\nloop invariant m' <= m;\nloop invariant m' < n;\nloop invariant m' <= m;\nloop invariant m' < n;\nloop invariant m' <= m;\nloop invariant m' < n;\nloop invariant m' <= m;\nloop invariant m' < n;\nloop invariant m' <= m;\nloop invariant m' < n;\nloop invariant m' <= m;\nloop invariant m' < n;\nloop invariant m' <= m;\nloop invariant m' < n;\nloop invariant m' <= m;\nloop invariant m' < n;\nloop invariant m' <= m;\nloop invariant m' < n;\nloop invariant m' <= m;\nloop invariant m' < n;\nloop invariant m' <= m;\nloop invariant m' < n;\nloop invariant m' <= m;\nloop invariant m' < n;\nloop invariant m' <= m;\nloop invariant m' < n;\nloop invariant m' <= m;\nloop invariant m' < n;\nloop invariant m' <= m;\nloop invariant m' < n;\nloop invariant m' <= m;\nloop invariant m' < n;\nloop invariant m' <= m;\nloop invariant m' < n;\nloop invariant m' <= m;\nloop invariant m' < n;\nloop invariant m' <= m;\nloop invariant m' < n;\nloop invariant m' <= m;\nloop invariant m' < n;\nloop invariant m' <= m;\nloop invariant m' < n;\nloop invariant m' <= m;\nloop invariant m' < n;\nloop invariant m' <= m;\nloop invariant m' < n;\nloop invariant m' <= m;\nloop invariant m' < n;\nloop invariant m' <= m;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= m <= n;\nloop invariant m <= x;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant m <= x;\nloop invariant m < n;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= n;\nloop invariant 0 <= m <= n;\nloop invariant m <= x;\nloop invariant (x < n ==> m <= n);\nloop invariant (m < x ==> m <= n);\nloop invariant (x == n ==> m == n);\nloop invariant (m == n ==> m == n);\nloop invariant (m == x ==> m == n);\nloop invariant (m == 0 ==> m <= n);\nloop invariant (m == 0 ==> x <= n);\nloop invariant (x == 0 ==> m <= n);\nloop invariant (x == 0 ==> m == 0);\nloop invariant (m == 0 ==> x == 0);\nloop invariant (m == 0 ==> x == n);\nloop invariant (m == x ==> m == n);\nloop invariant (m == n ==> m == n);\nloop invariant (m == x ==> m == n);\nloop invariant (m == 0 ==> m <= n);\nloop invariant (m == 0 ==> x <= n);\nloop invariant (x == 0 ==> m <= n);\nloop invariant (x == 0 ==> m == 0);\nloop invariant (m == 0 ==> m <= n);\nloop invariant (m == 0 ==> x <= n);\nloop invariant (x == 0 ==> m <= n);\nloop invariant (x == 0 ==> m == 0);\nloop invariant (m == 0 ==> m <= n);\nloop invariant (m == 0 ==> x <= n);\nloop invariant (x == 0 ==> m <= n);\nloop invariant (x == 0 ==> m == 0);\nloop invariant (m == 0 ==> m <= n);\nloop invariant (m == 0 ==> x <= n);\nloop invariant (x == 0 ==> m <= n);\nloop invariant (x == 0 ==> m == 0);\nloop invariant (m == 0 ==> m <= n);\nloop invariant (m == 0 ==> x <= n);\nloop invariant (x == 0 ==> m <= n);\nloop invariant (x == 0 ==> m == 0);\nloop invariant (m == 0 ==> m <= n);\nloop invariant (m == 0 ==> x <= n);\nloop invariant (x == 0 ==> m <= n);\nloop invariant (x == 0 ==> m == 0);\nloop invariant (m == 0 ==> m <= n);\nloop invariant (m == 0 ==> x <= n);\nloop invariant (x == 0 ==> m <= n);\nloop invariant (x == 0 ==> m == 0);\nloop invariant (m == 0 ==> m <= n);\nloop invariant (m == 0 ==> x <= n);\nloop invariant (x == 0 ==> m <= n);\nloop invariant (x == 0 ==> m == 0);\nloop invariant (m == 0 ==> m <= n);\nloop invariant (m == 0 ==> x <= n);\nloop invariant (x == 0 ==> m <= n);\nloop invariant (x == 0 ==> m == 0);\nloop invariant (m == 0 ==> m <= n);\nloop invariant (m == 0 ==> x <= n);\nloop invariant (x == 0 ==> m <= n);\nloop invariant (x == 0 ==> m == 0);\nloop invariant (m == 0 ==> m <= n);\nloop invariant (m == 0 ==> x <= n);\nloop invariant (x == 0 ==> m <= n);\nloop invariant (x == 0 ==> m == 0);\nloop invariant (m == 0 ==> m <= n);\nloop invariant (m == 0 ==> x <= n);\nloop invariant (x == 0 ==> m <= n);\nloop invariant (x == 0 ==> m == 0);\nloop invariant (m == 0 ==> m <= n);\nloop invariant (m == 0 ==> x <= n);\nloop invariant (x == 0 ==> m <= n);\nloop invariant (x == 0 ==> m == 0);\nloop invariant (m == 0 ==> m <= n);\nloop invariant (m == 0 ==> x <= n);\nloop invariant (x == 0 ==> m <= n);\nloop invariant (x == 0 ==> m == 0);\nloop invariant (m == 0 ==> m <= n);\nloop invariant (m == 0 ==> x <= n);\nloop invariant (x == 0 ==> m <= n);\nloop invariant (x == 0 ==> m == 0);\nloop invariant (m == 0 ==> m <= n);\nloop invariant (m == 0 ==> x <= n);\nloop invariant (x == 0 ==> m <= n);\nloop invariant (x == 0 ==> m == 0);\nloop invariant (m == 0 ==> m <= n);\nloop invariant (m == 0 ==> x <= n);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= m <= n;\nloop invariant (if x < n then m <= x else m >= x);\nloop invariant (if x < n then m >= 0 else m >= n);\nloop invariant (if x < n then m <= n else m <= 0);\nloop invariant (if x < n then m <= x else m >= 0);\nloop invariant (if x < n then m >= 0 else m >= x);\nloop invariant (if x < n then m <= n else m <= x);\nloop invariant (if x < n then m >= x else m >= n);\nloop invariant (if x < n then m <= n else m <= 0);\nloop invariant (if x < n then m >= 0 else m >= x);\nloop invariant (if x < n then m <= n else m <= x);\nloop invariant (if x < n then m >= x else m >= 0);\nloop invariant (if x < n then m <= n else m <= x);\nloop invariant (if x < n then m >= 0 else m >= x);\nloop invariant (if x < n then m <= n else m <= 0);\nloop invariant (if x < n then m >= x else m >= n);\nloop invariant (if x < n then m <= n else m <= x);\nloop invariant (if x < n then m >= 0 else m >= x);\nloop invariant (if x < n then m <= n else m <= x);\nloop invariant (if x < n then m >= 0 else m >= x);\nloop invariant (if x < n then m <= n else m <= x);\nloop invariant (if x < n then m >= 0 else m >= x);\nloop invariant (if x < n then m <= n else m <= x);\nloop invariant (if x < n then m >= 0 else m >= x);\nloop invariant (if x < n then m <= n else m <= x);\nloop invariant (if x < n then m >= 0 else m >= x);\nloop invariant (if x < n then m <= n else m <= x);\nloop invariant (if x < n then m >= 0 else m >= x);\nloop invariant (if x < n then m <= n else m <= x);\nloop invariant (if x < n then m >= 0 else m >= x);\nloop invariant (if x < n then m <= n else m <= x);\nloop invariant (if x < n then m >= 0 else m >= x);\nloop invariant (if x < n then m <= n else m <= x);\nloop invariant (if x < n then m >= 0 else m >= x);\nloop invariant (if x < n then m <= n else m <= x);\nloop invariant (if x < n then m >= 0 else m >= x);\nloop invariant (if x < n then m <= n else m <= x);\nloop invariant (if x < n then m >= 0 else m >= x);\nloop invariant (if x < n then m <= n else m <= x);\nloop invariant (if x < n then m >= 0 else m >= x);\nloop invariant (if x < n then m <= n else m <= x);\nloop invariant (if x < n then m >= 0 else m >= x);\nloop invariant (if x < n then m <= n else m <= x);\nloop invariant (if x < n then m >= 0 else m >= x);\nloop invariant (if x < n then m <= n else m <= x);\nloop invariant (if x < n then m >= 0 else m >= x);\nloop invariant (if x < n then m <= n else m <= x);\nloop invariant (if x < n then m >= 0 else m >= x);\nloop invariant (if x < n then m <= n else m <= x);\nloop invariant (if x < n then m >= 0 else m >= x);\nloop invariant (if x < n then m <= n else m <= x);\nloop invariant (if x < n then m >= 0 else m >= x);\nloop invariant (if x < n then m <= n else m <= x);\nloop invariant (if x < n then m >= 0 else m >= x);\nloop invariant (if x < n then m <= n else m <= x);\nloop invariant (if x < n then m >= 0 else m >= x);\nloop invariant (if x < n then m <= n else m <= x);\nloop invariant (if x < n then m >= 0 else m >= x);\nloop invariant (if x < n then m <= n else m <= x);\nloop invariant (if x < n then m >= 0 else m >= x);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= m <= x;\nloop invariant x < n ==> m <= x;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= m <= x;\nloop invariant x <= n;\nloop invariant m <= x;\nloop invariant m < n;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= n;\nloop invariant 0 <= m <= n;\nloop invariant m <= x <= n;\nloop invariant m <= n;\nloop invariant m <= x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int x,m,n;\n  n = unknown();\n  x = 0;\n  m = 0;\n  /*@\n\n\n\n\nloop invariant i5: m <= x;\n*/\nwhile( x < n ) {\n    if(unknown())\n\tm = x;\n\tx++;\n  }\n  if( n > 0 )\n    {\n      {;\n//@ assert( 0<=m);\n}\n\n      {;\n//@ assert(m<n);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant if n > 0 then m < n else m >= n;\nloop invariant if n > 0 then m >= 0 else m <= 0;\nloop invariant if n > 0 then m <= n else m >= n;\nloop invariant if n > 0 then m >= 0 else m <= 0;\nloop invariant if n > 0 then m <= n else m >= n;\nloop invariant if n > 0 then m >= 0 else m <= 0;\nloop invariant if n > 0 then m <= n else m >= n;\nloop invariant if n > 0 then m >= 0 else m <= 0;\nloop invariant if n > 0 then m <= n else m >= n;\nloop invariant if n > 0 then m >= 0 else m <= 0;\nloop invariant if n > 0 then m <= n else m >= n;\nloop invariant if n > 0 then m >= 0 else m <= 0;\nloop invariant if n > 0 then m <= n else m >= n;\nloop invariant if n > 0 then m >= 0 else m <= 0;\nloop invariant if n > 0 then m <= n else m >= n;\nloop invariant if n > 0 then m >= 0 else m <= 0;\nloop invariant if n > 0 then m <= n else m >= n;\nloop invariant if n > 0 then m >= 0 else m <= 0;\nloop invariant if n > 0 then m <= n else m >= n;\nloop invariant if n > 0 then m >= 0 else m <= 0;\nloop invariant if n > 0 then m <= n else m >= n;\nloop invariant if n > 0 then m >= 0 else m <= 0;\nloop invariant if n > 0 then m <= n else m >= n;\nloop invariant if n > 0 then m >= 0 else m <= 0;\nloop invariant if n > 0 then m <= n else m >= n;\nloop invariant if n > 0 then m >= 0 else m <= 0;\nloop invariant if n > 0 then m <= n else m >= n;\nloop invariant if n > 0 then m >= 0 else m <= 0;\nloop invariant if n > 0 then m <= n else m >= n;\nloop invariant if n > 0 then m >= 0 else m <= 0;\nloop invariant if n > 0 then m <= n else m >= n;\nloop invariant if n > 0 then m >= 0 else m <= 0;\nloop invariant if n > 0 then m <= n else m >= n;\nloop invariant if n > 0 then m >= 0 else m <= 0;\nloop invariant if n > 0 then m <= n else m >= n;\nloop invariant if n > 0 then m >= 0 else m <= 0;\nloop invariant if n > 0 then m <= n else m >= n;\nloop invariant if n > 0 then m >= 0 else m <= 0;\nloop invariant if n > 0 then m <= n else m >= n;\nloop invariant if n > 0 then m >= 0 else m <= 0;\nloop invariant if n > 0 then m <= n else m >= n;\nloop invariant if n > 0 then m >= 0 else m <= 0;\nloop invariant if n > 0 then m <= n else m >= n;\nloop invariant if n > 0 then m >= 0 else m <= 0;\nloop invariant if n > 0 then m <= n else m >= n;\nloop invariant if n > 0 then m >= 0 else m <= 0;\nloop invariant if n > 0 then m <= n else m >= n;\nloop invariant if n > 0 then m >= 0 else m <= 0;\nloop invariant if n > 0 then m <= n else m >= n;\nloop invariant if n > 0 then m >= 0 else m <= 0;\nloop invariant if n > 0 then m <= n else m >= n;\nloop invariant if n > 0 then m >= 0 else m <= 0;\nloop invariant if n > 0 then m <= n else m >= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int x,m,n;\n  n = unknown();\n  x = 0;\n  m = 0;\n  /*@\n\nloop invariant i2: m <= x;\n\n\n\n\n*/\nwhile( x < n ) {\n    if(unknown())\n\tm = x;\n\tx++;\n  }\n  if( n > 0 )\n    {\n      {;\n//@ assert( 0<=m);\n}\n\n      {;\n//@ assert(m<n);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant m >= 0; loop invariant m < n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= m; loop invariant m <= x; loop invariant x < n; loop invariant m < x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int x,m,n;\n  n = unknown();\n  x = 0;\n  m = 0;\n  /*@\nloop invariant i1: m >= 0; loop invariant m < n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= m; loop invariant m <= x; loop invariant x < n; loop invariant m < x;\n*/\nwhile( x < n ) {\n    if(unknown())\n\tm = x;\n\tx++;\n  }\n  if( n > 0 )\n    {\n      {;\n//@ assert( 0<=m);\n}\n\n      {;\n//@ assert(m<n);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= m <= n;\nloop invariant m <= x;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant m <= n || (n <= 0);\nloop invariant m <= x || n <= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int x,m,n;\n  n = unknown();\n  x = 0;\n  m = 0;\n  /*@\n\n\nloop invariant i3: m <= x;\n\nloop invariant i5: m <= n || (n <= 0);\nloop invariant i6: m <= x || n <= 0;\n*/\nwhile( x < n ) {\n    if(unknown())\n\tm = x;\n\tx++;\n  }\n  if( n > 0 )\n    {\n      {;\n//@ assert( 0<=m);\n}\n\n      {;\n//@ assert(m<n);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m <= n;\nloop invariant m >= 0;\nloop invariant m <= x;\nloop invariant m <= n;\nloop invariant m <= x ==> m <= n;\nloop invariant m <= n ==> m <= x;\nloop invariant m <= n ==> m <= n;\nloop invariant m <= x ==> m <= n ==> m <= x;\nloop invariant m <= x ==> m <= n ==> m <= n ==> m <= x;\nloop invariant m <= n ==> m <= n ==> m <= x ==> m <= n;\nloop invariant m <= n ==> m <= n ==> m <= x ==> m <= n ==> m <= x;\nloop invariant m <= x ==> m <= n ==> m <= n ==> m <= x ==> m <= n;\nloop invariant m <= x ==> m <= n ==> m <= n ==> m <= x ==> m <= n ==> m <= x;\nloop invariant m <= n ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n;\nloop invariant m <= n ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x;\nloop invariant m <= n ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n;\nloop invariant m <= n ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x;\nloop invariant m <= n ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n;\nloop invariant m <= n ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x;\nloop invariant m <= n ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n;\nloop invariant m <= n ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x;\nloop invariant m <= n ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n;\nloop invariant m <= n ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x;\nloop invariant m <= n ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n;\nloop invariant m <= n ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x;\nloop invariant m <= n ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n;\nloop invariant m <= n ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x;\nloop invariant m <= n ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int x,m,n;\n  n = unknown();\n  x = 0;\n  m = 0;\n  /*@\n\n\nloop invariant i3: m >= 0;\nloop invariant i4: m <= x;\n\nloop invariant i6: m <= n ==> m <= x;\nloop invariant i7: m <= n ==> m <= n;\nloop invariant i8: m <= x ==> m <= n ==> m <= x;\nloop invariant i9: m <= x ==> m <= n ==> m <= n ==> m <= x;\nloop invariant i10: m <= n ==> m <= n ==> m <= x ==> m <= n;\nloop invariant i11: m <= n ==> m <= n ==> m <= x ==> m <= n ==> m <= x;\nloop invariant i12: m <= x ==> m <= n ==> m <= n ==> m <= x ==> m <= n;\nloop invariant i13: m <= x ==> m <= n ==> m <= n ==> m <= x ==> m <= n ==> m <= x;\nloop invariant i14: m <= n ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n;\nloop invariant i15: m <= n ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x;\nloop invariant i16: m <= n ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n;\nloop invariant i17: m <= n ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x;\nloop invariant i18: m <= n ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n;\nloop invariant i19: m <= n ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x;\nloop invariant i20: m <= n ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n;\nloop invariant i21: m <= n ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x;\nloop invariant i22: m <= n ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n;\nloop invariant i23: m <= n ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x;\nloop invariant i24: m <= n ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n;\nloop invariant i25: m <= n ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x;\nloop invariant i26: m <= n ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n;\nloop invariant i27: m <= n ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x;\nloop invariant i28: m <= n ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n;\n*/\nwhile( x < n ) {\n    if(unknown())\n\tm = x;\n\tx++;\n  }\n  if( n > 0 )\n    {\n      {;\n//@ assert( 0<=m);\n}\n\n      {;\n//@ assert(m<n);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 46,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= m <= x;\nloop invariant if (n > 0) then (0 <= m <= n) else (0 <= m <= n);\nloop invariant m <= x;\nloop invariant if (m >= 0) then (m < n) else (m < n);\nloop invariant if (m >= 1) then (m <= n) else (m <= n);\nloop invariant if (m >= 2) then (m <= n) else (m <= n);\nloop invariant if (m >= 3) then (m <= n) else (m <= n);\nloop invariant if (m >= 4) then (m <= n) else (m <= n);\nloop invariant if (m >= 5) then (m <= n) else (m <= n);\nloop invariant if (m >= 6) then (m <= n) else (m <= n);\nloop invariant if (m >= 7) then (m <= n) else (m <= n);\nloop invariant if (m >= 8) then (m <= n) else (m <= n);\nloop invariant if (m >= 9) then (m <= n) else (m <= n);\nloop invariant if (m >= 10) then (m <= n) else (m <= n);\nloop invariant if (m >= 11) then (m <= n) else (m <= n);\nloop invariant if (m >= 12) then (m <= n) else (m <= n);\nloop invariant if (m >= 13) then (m <= n) else (m <= n);\nloop invariant if (m >= 14) then (m <= n) else (m <= n);\nloop invariant if (m >= 15) then (m <= n) else (m <= n);\nloop invariant if (m >= 16) then (m <= n) else (m <= n);\nloop invariant if (m >= 17) then (m <= n) else (m <= n);\nloop invariant if (m >= 18) then (m <= n) else (m <= n);\nloop invariant if (m >= 19) then (m <= n) else (m <= n);\nloop invariant if (m >= 20) then (m <= n) else (m <= n);\nloop invariant if (m >= 21) then (m <= n) else (m <= n);\nloop invariant if (m >= 22) then (m <= n) else (m <= n);\nloop invariant if (m >= 23) then (m <= n) else (m <= n);\nloop invariant if (m >= 24) then (m <= n) else (m <= n);\nloop invariant if (m >= 25) then (m <= n) else (m <= n);\nloop invariant if (m >= 26) then (m <= n) else (m <= n);\nloop invariant if (m >= 27) then (m <= n) else (m <= n);\nloop invariant if (m >= 28) then (m <= n) else (m <= n);\nloop invariant if (m >= 29) then (m <= n) else (m <= n);\nloop invariant if (m >= 30) then (m <= n) else (m <= n);\nloop invariant if (m >= 31) then (m <= n) else (m <= n);\nloop invariant if (m >= 32) then (m <= n) else (m <= n);\nloop invariant if (m >= 33) then (m <= n) else (m <= n);\nloop invariant if (m >= 34) then (m <= n) else (m <= n);\nloop invariant if (m >= 35) then (m <= n) else (m <= n);\nloop invariant if (m >= 36) then (m <= n) else (m <= n);\nloop invariant if (m >= 37) then (m <= n) else (m <= n);\nloop invariant if (m >= 38) then (m <= n) else (m <= n);\nloop invariant if (m >= 39) then (m <= n) else (m <= n);\nloop invariant if (m >= 40) then (m <= n) else (m <= n);\nloop invariant if (m >= 41) then (m <= n) else (m <= n);\nloop invariant if (m >= 42) then (m <= n) else (m <= n);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int x,m,n;\n  n = unknown();\n  x = 0;\n  m = 0;\n  /*@\n\nloop invariant i2: 0 <= m <= x;\n\nloop invariant i4: m <= x;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile( x < n ) {\n    if(unknown())\n\tm = x;\n\tx++;\n  }\n  if( n > 0 )\n    {\n      {;\n//@ assert( 0<=m);\n}\n\n      {;\n//@ assert(m<n);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= m <= x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int x,m,n;\n  n = unknown();\n  x = 0;\n  m = 0;\n  /*@\n\nloop invariant i2: 0 <= m <= x;\n*/\nwhile( x < n ) {\n    if(unknown())\n\tm = x;\n\tx++;\n  }\n  if( n > 0 )\n    {\n      {;\n//@ assert( 0<=m);\n}\n\n      {;\n//@ assert(m<n);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int x,m,n;\n  n = unknown();\n  x = 0;\n  m = 0;\n  /*@\n\n*/\nwhile( x < n ) {\n    if(unknown())\n\tm = x;\n\tx++;\n  }\n  if( n > 0 )\n    {\n      {;\n//@ assert( 0<=m);\n}\n\n      {;\n//@ assert(m<n);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m <= x;\nloop invariant m < n;\nloop invariant m <= m';\nloop invariant 0 <= m' <= n;\nloop invariant x' == x + 1;\nloop invariant m' == m;\nloop invariant x' <= n;\nloop invariant m' <= x';\nloop invariant m' <= m;\nloop invariant m' < n;\nloop invariant m' <= m';\nloop invariant m' < n;\nloop invariant m' <= m;\nloop invariant m' < n;\nloop invariant m' <= m;\nloop invariant m' < n;\nloop invariant m' <= m;\nloop invariant m' < n;\nloop invariant m' <= m;\nloop invariant m' < n;\nloop invariant m' <= m;\nloop invariant m' < n;\nloop invariant m' <= m;\nloop invariant m' < n;\nloop invariant m' <= m;\nloop invariant m' < n;\nloop invariant m' <= m;\nloop invariant m' < n;\nloop invariant m' <= m;\nloop invariant m' < n;\nloop invariant m' <= m;\nloop invariant m' < n;\nloop invariant m' <= m;\nloop invariant m' < n;\nloop invariant m' <= m;\nloop invariant m' < n;\nloop invariant m' <= m;\nloop invariant m' < n;\nloop invariant m' <= m;\nloop invariant m' < n;\nloop invariant m' <= m;\nloop invariant m' < n;\nloop invariant m' <= m;\nloop invariant m' < n;\nloop invariant m' <= m;\nloop invariant m' < n;\nloop invariant m' <= m;\nloop invariant m' < n;\nloop invariant m' <= m;\nloop invariant m' < n;\nloop invariant m' <= m;\nloop invariant m' < n;\nloop invariant m' <= m;\nloop invariant m' < n;\nloop invariant m' <= m;\nloop invariant m' < n;\nloop invariant m' <= m;\nloop invariant m' < n;\nloop invariant m' <= m;\nloop invariant m' < n;\nloop invariant m' <= m;\nloop invariant m' < n;\nloop invariant m' <= m;\nloop invariant m' < n;\nloop invariant m' <= m;\nloop invariant m' < n;\nloop invariant m' <= m;\nloop invariant m' < n;\nloop invariant m' <= m;\nloop invariant m' < n;\nloop invariant m' <= m;\nloop invariant m' < n;\nloop invariant m' <= m;\nloop invariant m' < n;\nloop invariant m' <= m;\nloop invariant m' < n;\nloop invariant m' <= m;\nloop invariant m' < n;\nloop invariant m' <= m;\nloop invariant m' < n;\nloop invariant m' <= m;\nloop invariant m' < n;\nloop invariant m' <= m;\nloop invariant m' < n;\nloop invariant m' <= m;\nloop invariant m' < n;\nloop invariant m' <= m;\nloop invariant m' < n;\nloop invariant m' <= m;\nloop invariant m' < n;\nloop invariant m' <= m;\nloop invariant m' < n;\nloop invariant m' <= m;\nloop invariant m' < n;\nloop invariant m' <= m;\nloop invariant m' < n;\nloop invariant m' <= m;\nloop invariant m' < n;\nloop invariant m' <= m;\nloop invariant m' < n;\nloop invariant m' <= m;\nloop invariant m' < n;\nloop invariant m' <= m;\nloop invariant m' < n;\nloop invariant m' <= m;\nloop invariant m' < n;\nloop invariant m' <= m;\nloop invariant m' < n;\nloop invariant m' <= m;\nloop invariant m' < n;\nloop invariant m' <= m;\nloop invariant m' < n;\nloop invariant m' <= m;\nloop invariant m' < n;\nloop invariant m' <= m;\nloop invariant m' < n;\nloop invariant m' <= m;\nloop invariant m' < n;\nloop invariant m' <= m;\nloop invariant m' < n;\nloop invariant m' <= m;\nloop invariant m' < n;\nloop invariant m' <= m;\nloop invariant m' < n;\nloop invariant m' <= m;\nloop invariant m' < n;\nloop invariant m' <= m;\nloop invariant m' < n;\nloop invariant m' <= m;\nloop invariant m' < n;\nloop invariant m' <= m;\nloop invariant m' < n;\nloop invariant m' <= m;\nloop invariant m' < n;\nloop invariant m' <= m;\nloop invariant m' < n;\nloop invariant m' <= m;\nloop invariant m' < n;\nloop invariant m' <= m;\nloop invariant m' < n;\nloop invariant m' <= m;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int x,m,n;\n  n = unknown();\n  x = 0;\n  m = 0;\n  /*@\nloop invariant i1: 0 <= x <= n;\nloop invariant i2: m <= x;\nloop invariant i3: m < n;\nloop invariant i4: m <= m';\nloop invariant i5: 0 <= m' <= n;\nloop invariant i6: x' == x + 1;\nloop invariant i7: m' == m;\nloop invariant i8: x' <= n;\nloop invariant i9: m' <= x';\nloop invariant i10: m' <= m;\nloop invariant i11: m' < n;\nloop invariant i12: m' <= m';\n*/\nwhile( x < n ) {\n    if(unknown())\n\tm = x;\n\tx++;\n  }\n  if( n > 0 )\n    {\n      {;\n//@ assert( 0<=m);\n}\n\n      {;\n//@ assert(m<n);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= m <= n;\nloop invariant m <= x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int x,m,n;\n  n = unknown();\n  x = 0;\n  m = 0;\n  /*@\n\n\nloop invariant i3: m <= x;\n*/\nwhile( x < n ) {\n    if(unknown())\n\tm = x;\n\tx++;\n  }\n  if( n > 0 )\n    {\n      {;\n//@ assert( 0<=m);\n}\n\n      {;\n//@ assert(m<n);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant m <= x;\nloop invariant m < n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int x,m,n;\n  n = unknown();\n  x = 0;\n  m = 0;\n  /*@\n\n\nloop invariant i3: x >= 0;\nloop invariant i4: m <= x;\n\n*/\nwhile( x < n ) {\n    if(unknown())\n\tm = x;\n\tx++;\n  }\n  if( n > 0 )\n    {\n      {;\n//@ assert( 0<=m);\n}\n\n      {;\n//@ assert(m<n);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= n;\nloop invariant 0 <= m <= n;\nloop invariant m <= x;\nloop invariant (x < n ==> m <= n);\nloop invariant (m < x ==> m <= n);\nloop invariant (x == n ==> m == n);\nloop invariant (m == n ==> m == n);\nloop invariant (m == x ==> m == n);\nloop invariant (m == 0 ==> m <= n);\nloop invariant (m == 0 ==> x <= n);\nloop invariant (x == 0 ==> m <= n);\nloop invariant (x == 0 ==> m == 0);\nloop invariant (m == 0 ==> x == 0);\nloop invariant (m == 0 ==> x == n);\nloop invariant (m == x ==> m == n);\nloop invariant (m == n ==> m == n);\nloop invariant (m == x ==> m == n);\nloop invariant (m == 0 ==> m <= n);\nloop invariant (m == 0 ==> x <= n);\nloop invariant (x == 0 ==> m <= n);\nloop invariant (x == 0 ==> m == 0);\nloop invariant (m == 0 ==> m <= n);\nloop invariant (m == 0 ==> x <= n);\nloop invariant (x == 0 ==> m <= n);\nloop invariant (x == 0 ==> m == 0);\nloop invariant (m == 0 ==> m <= n);\nloop invariant (m == 0 ==> x <= n);\nloop invariant (x == 0 ==> m <= n);\nloop invariant (x == 0 ==> m == 0);\nloop invariant (m == 0 ==> m <= n);\nloop invariant (m == 0 ==> x <= n);\nloop invariant (x == 0 ==> m <= n);\nloop invariant (x == 0 ==> m == 0);\nloop invariant (m == 0 ==> m <= n);\nloop invariant (m == 0 ==> x <= n);\nloop invariant (x == 0 ==> m <= n);\nloop invariant (x == 0 ==> m == 0);\nloop invariant (m == 0 ==> m <= n);\nloop invariant (m == 0 ==> x <= n);\nloop invariant (x == 0 ==> m <= n);\nloop invariant (x == 0 ==> m == 0);\nloop invariant (m == 0 ==> m <= n);\nloop invariant (m == 0 ==> x <= n);\nloop invariant (x == 0 ==> m <= n);\nloop invariant (x == 0 ==> m == 0);\nloop invariant (m == 0 ==> m <= n);\nloop invariant (m == 0 ==> x <= n);\nloop invariant (x == 0 ==> m <= n);\nloop invariant (x == 0 ==> m == 0);\nloop invariant (m == 0 ==> m <= n);\nloop invariant (m == 0 ==> x <= n);\nloop invariant (x == 0 ==> m <= n);\nloop invariant (x == 0 ==> m == 0);\nloop invariant (m == 0 ==> m <= n);\nloop invariant (m == 0 ==> x <= n);\nloop invariant (x == 0 ==> m <= n);\nloop invariant (x == 0 ==> m == 0);\nloop invariant (m == 0 ==> m <= n);\nloop invariant (m == 0 ==> x <= n);\nloop invariant (x == 0 ==> m <= n);\nloop invariant (x == 0 ==> m == 0);\nloop invariant (m == 0 ==> m <= n);\nloop invariant (m == 0 ==> x <= n);\nloop invariant (x == 0 ==> m <= n);\nloop invariant (x == 0 ==> m == 0);\nloop invariant (m == 0 ==> m <= n);\nloop invariant (m == 0 ==> x <= n);\nloop invariant (x == 0 ==> m <= n);\nloop invariant (x == 0 ==> m == 0);\nloop invariant (m == 0 ==> m <= n);\nloop invariant (m == 0 ==> x <= n);\nloop invariant (x == 0 ==> m <= n);\nloop invariant (x == 0 ==> m == 0);\nloop invariant (m == 0 ==> m <= n);\nloop invariant (m == 0 ==> x <= n);\nloop invariant (x == 0 ==> m <= n);\nloop invariant (x == 0 ==> m == 0);\nloop invariant (m == 0 ==> m <= n);\nloop invariant (m == 0 ==> x <= n);\nloop invariant (x == 0 ==> m <= n);\nloop invariant (x == 0 ==> m == 0);\nloop invariant (m == 0 ==> m <= n);\nloop invariant (m == 0 ==> x <= n);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int x,m,n;\n  n = unknown();\n  x = 0;\n  m = 0;\n  /*@\n\n\nloop invariant i3: m <= x;\nloop invariant i4: (x < n ==> m <= n);\nloop invariant i5: (m < x ==> m <= n);\n\nloop invariant i7: (m == n ==> m == n);\n\n\n\n\n\n\n\n*/\nwhile( x < n ) {\n    if(unknown())\n\tm = x;\n\tx++;\n  }\n  if( n > 0 )\n    {\n      {;\n//@ assert( 0<=m);\n}\n\n      {;\n//@ assert(m<n);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 10,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= m <= n;\nloop invariant (if x < n then m <= x else m >= x);\nloop invariant (if x < n then m >= 0 else m >= n);\nloop invariant (if x < n then m <= n else m <= 0);\nloop invariant (if x < n then m <= x else m >= 0);\nloop invariant (if x < n then m >= 0 else m >= x);\nloop invariant (if x < n then m <= n else m <= x);\nloop invariant (if x < n then m >= x else m >= n);\nloop invariant (if x < n then m <= n else m <= 0);\nloop invariant (if x < n then m >= 0 else m >= x);\nloop invariant (if x < n then m <= n else m <= x);\nloop invariant (if x < n then m >= x else m >= 0);\nloop invariant (if x < n then m <= n else m <= x);\nloop invariant (if x < n then m >= 0 else m >= x);\nloop invariant (if x < n then m <= n else m <= 0);\nloop invariant (if x < n then m >= x else m >= n);\nloop invariant (if x < n then m <= n else m <= x);\nloop invariant (if x < n then m >= 0 else m >= x);\nloop invariant (if x < n then m <= n else m <= x);\nloop invariant (if x < n then m >= 0 else m >= x);\nloop invariant (if x < n then m <= n else m <= x);\nloop invariant (if x < n then m >= 0 else m >= x);\nloop invariant (if x < n then m <= n else m <= x);\nloop invariant (if x < n then m >= 0 else m >= x);\nloop invariant (if x < n then m <= n else m <= x);\nloop invariant (if x < n then m >= 0 else m >= x);\nloop invariant (if x < n then m <= n else m <= x);\nloop invariant (if x < n then m >= 0 else m >= x);\nloop invariant (if x < n then m <= n else m <= x);\nloop invariant (if x < n then m >= 0 else m >= x);\nloop invariant (if x < n then m <= n else m <= x);\nloop invariant (if x < n then m >= 0 else m >= x);\nloop invariant (if x < n then m <= n else m <= x);\nloop invariant (if x < n then m >= 0 else m >= x);\nloop invariant (if x < n then m <= n else m <= x);\nloop invariant (if x < n then m >= 0 else m >= x);\nloop invariant (if x < n then m <= n else m <= x);\nloop invariant (if x < n then m >= 0 else m >= x);\nloop invariant (if x < n then m <= n else m <= x);\nloop invariant (if x < n then m >= 0 else m >= x);\nloop invariant (if x < n then m <= n else m <= x);\nloop invariant (if x < n then m >= 0 else m >= x);\nloop invariant (if x < n then m <= n else m <= x);\nloop invariant (if x < n then m >= 0 else m >= x);\nloop invariant (if x < n then m <= n else m <= x);\nloop invariant (if x < n then m >= 0 else m >= x);\nloop invariant (if x < n then m <= n else m <= x);\nloop invariant (if x < n then m >= 0 else m >= x);\nloop invariant (if x < n then m <= n else m <= x);\nloop invariant (if x < n then m >= 0 else m >= x);\nloop invariant (if x < n then m <= n else m <= x);\nloop invariant (if x < n then m >= 0 else m >= x);\nloop invariant (if x < n then m <= n else m <= x);\nloop invariant (if x < n then m >= 0 else m >= x);\nloop invariant (if x < n then m <= n else m <= x);\nloop invariant (if x < n then m >= 0 else m >= x);\nloop invariant (if x < n then m <= n else m <= x);\nloop invariant (if x < n then m >= 0 else m >= x);\nloop invariant (if x < n then m <= n else m <= x);\nloop invariant (if x < n then m >= 0 else m >= x);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int x,m,n;\n  n = unknown();\n  x = 0;\n  m = 0;\n  /*@\n\n\n\n\n\n\n\n\n\n\n*/\nwhile( x < n ) {\n    if(unknown())\n\tm = x;\n\tx++;\n  }\n  if( n > 0 )\n    {\n      {;\n//@ assert( 0<=m);\n}\n\n      {;\n//@ assert(m<n);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= m <= x;\nloop invariant x < n ==> m <= x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int x,m,n;\n  n = unknown();\n  x = 0;\n  m = 0;\n  /*@\n\nloop invariant i2: 0 <= m <= x;\nloop invariant i3: x < n ==> m <= x;\n*/\nwhile( x < n ) {\n    if(unknown())\n\tm = x;\n\tx++;\n  }\n  if( n > 0 )\n    {\n      {;\n//@ assert( 0<=m);\n}\n\n      {;\n//@ assert(m<n);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= m <= x;\nloop invariant x <= n;\nloop invariant m <= x;\nloop invariant m < n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int x,m,n;\n  n = unknown();\n  x = 0;\n  m = 0;\n  /*@\nloop invariant i1: 0 <= m <= x;\n\nloop invariant i3: m <= x;\n\n*/\nwhile( x < n ) {\n    if(unknown())\n\tm = x;\n\tx++;\n  }\n  if( n > 0 )\n    {\n      {;\n//@ assert( 0<=m);\n}\n\n      {;\n//@ assert(m<n);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "No CSV output dump found from Frama-C",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int x,m,n;\n  n = unknown();\n  x = 0;\n  m = 0;\n  /*@\nloop invariant i1: 1 <= x <= n;\nloop invariant i2: 0 <= m <= n;\nloop invariant i3: m <= x <= n;\nloop invariant i4: m <= n;\nloop invariant i5: m <= x;\nloop invariant i6: 0 <= x <= n;\nloop invariant i7: x <= n;\nloop invariant i8: if n > 0 then m < n else m >= n;\nloop invariant i9: if n > 0 then m >= 0 else m <= 0;\nloop invariant i10: if n > 0 then m <= n else m >= n;\nloop invariant i11: m >= 0; loop invariant m < n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= m; loop invariant m <= x; loop invariant x < n; loop invariant m < x;\nloop invariant i12: m <= n || (n <= 0);\nloop invariant i13: m <= x || n <= 0;\nloop invariant i14: m >= 0;\nloop invariant i15: m <= x ==> m <= n;\nloop invariant i16: m <= n ==> m <= x;\nloop invariant i17: m <= n ==> m <= n;\nloop invariant i18: m <= x ==> m <= n ==> m <= x;\nloop invariant i19: m <= x ==> m <= n ==> m <= n ==> m <= x;\nloop invariant i20: m <= n ==> m <= n ==> m <= x ==> m <= n;\nloop invariant i21: m <= n ==> m <= n ==> m <= x ==> m <= n ==> m <= x;\nloop invariant i22: m <= x ==> m <= n ==> m <= n ==> m <= x ==> m <= n;\nloop invariant i23: m <= x ==> m <= n ==> m <= n ==> m <= x ==> m <= n ==> m <= x;\nloop invariant i24: m <= n ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n;\nloop invariant i25: m <= n ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x;\nloop invariant i26: m <= n ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n;\nloop invariant i27: m <= n ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x;\nloop invariant i28: m <= n ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n;\nloop invariant i29: m <= n ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x;\nloop invariant i30: m <= n ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n;\nloop invariant i31: m <= n ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x;\nloop invariant i32: m <= n ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n;\nloop invariant i33: m <= n ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x;\nloop invariant i34: m <= n ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n;\nloop invariant i35: m <= n ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x;\nloop invariant i36: m <= n ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n;\nloop invariant i37: m <= n ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x;\nloop invariant i38: m <= n ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n;\nloop invariant i39: 0 <= m <= x;\nloop invariant i40: if (n > 0) then (0 <= m <= n) else (0 <= m <= n);\nloop invariant i41: if (m >= 0) then (m < n) else (m < n);\nloop invariant i42: if (m >= 1) then (m <= n) else (m <= n);\nloop invariant i43: if (m >= 2) then (m <= n) else (m <= n);\nloop invariant i44: if (m >= 3) then (m <= n) else (m <= n);\nloop invariant i45: if (m >= 4) then (m <= n) else (m <= n);\nloop invariant i46: if (m >= 5) then (m <= n) else (m <= n);\nloop invariant i47: if (m >= 6) then (m <= n) else (m <= n);\nloop invariant i48: if (m >= 7) then (m <= n) else (m <= n);\nloop invariant i49: if (m >= 8) then (m <= n) else (m <= n);\nloop invariant i50: if (m >= 9) then (m <= n) else (m <= n);\nloop invariant i51: if (m >= 10) then (m <= n) else (m <= n);\nloop invariant i52: if (m >= 11) then (m <= n) else (m <= n);\nloop invariant i53: if (m >= 12) then (m <= n) else (m <= n);\nloop invariant i54: if (m >= 13) then (m <= n) else (m <= n);\nloop invariant i55: if (m >= 14) then (m <= n) else (m <= n);\nloop invariant i56: if (m >= 15) then (m <= n) else (m <= n);\nloop invariant i57: if (m >= 16) then (m <= n) else (m <= n);\nloop invariant i58: if (m >= 17) then (m <= n) else (m <= n);\nloop invariant i59: if (m >= 18) then (m <= n) else (m <= n);\nloop invariant i60: if (m >= 19) then (m <= n) else (m <= n);\nloop invariant i61: if (m >= 20) then (m <= n) else (m <= n);\nloop invariant i62: if (m >= 21) then (m <= n) else (m <= n);\nloop invariant i63: if (m >= 22) then (m <= n) else (m <= n);\nloop invariant i64: if (m >= 23) then (m <= n) else (m <= n);\nloop invariant i65: if (m >= 24) then (m <= n) else (m <= n);\nloop invariant i66: if (m >= 25) then (m <= n) else (m <= n);\nloop invariant i67: if (m >= 26) then (m <= n) else (m <= n);\nloop invariant i68: if (m >= 27) then (m <= n) else (m <= n);\nloop invariant i69: if (m >= 28) then (m <= n) else (m <= n);\nloop invariant i70: if (m >= 29) then (m <= n) else (m <= n);\nloop invariant i71: if (m >= 30) then (m <= n) else (m <= n);\nloop invariant i72: if (m >= 31) then (m <= n) else (m <= n);\nloop invariant i73: if (m >= 32) then (m <= n) else (m <= n);\nloop invariant i74: if (m >= 33) then (m <= n) else (m <= n);\nloop invariant i75: if (m >= 34) then (m <= n) else (m <= n);\nloop invariant i76: if (m >= 35) then (m <= n) else (m <= n);\nloop invariant i77: if (m >= 36) then (m <= n) else (m <= n);\nloop invariant i78: if (m >= 37) then (m <= n) else (m <= n);\nloop invariant i79: if (m >= 38) then (m <= n) else (m <= n);\nloop invariant i80: if (m >= 39) then (m <= n) else (m <= n);\nloop invariant i81: if (m >= 40) then (m <= n) else (m <= n);\nloop invariant i82: if (m >= 41) then (m <= n) else (m <= n);\nloop invariant i83: if (m >= 42) then (m <= n) else (m <= n);\nloop invariant i84: m < n;\nloop invariant i85: m <= m';\nloop invariant i86: 0 <= m' <= n;\nloop invariant i87: x' == x + 1;\nloop invariant i88: m' == m;\nloop invariant i89: x' <= n;\nloop invariant i90: m' <= x';\nloop invariant i91: m' <= m;\nloop invariant i92: m' < n;\nloop invariant i93: m' <= m';\nloop invariant i94: x >= 0;\nloop invariant i95: (x < n ==> m <= n);\nloop invariant i96: (m < x ==> m <= n);\nloop invariant i97: (x == n ==> m == n);\nloop invariant i98: (m == n ==> m == n);\nloop invariant i99: (m == x ==> m == n);\nloop invariant i100: (m == 0 ==> m <= n);\nloop invariant i101: (m == 0 ==> x <= n);\nloop invariant i102: (x == 0 ==> m <= n);\nloop invariant i103: (x == 0 ==> m == 0);\nloop invariant i104: (m == 0 ==> x == 0);\nloop invariant i105: (m == 0 ==> x == n);\nloop invariant i106: (if x < n then m <= x else m >= x);\nloop invariant i107: (if x < n then m >= 0 else m >= n);\nloop invariant i108: (if x < n then m <= n else m <= 0);\nloop invariant i109: (if x < n then m <= x else m >= 0);\nloop invariant i110: (if x < n then m >= 0 else m >= x);\nloop invariant i111: (if x < n then m <= n else m <= x);\nloop invariant i112: (if x < n then m >= x else m >= n);\nloop invariant i113: (if x < n then m >= x else m >= 0);\nloop invariant i114: x < n ==> m <= x;\n*/\nwhile( x < n ) {\n    if(unknown())\n\tm = x;\n\tx++;\n  }\n  if( n > 0 )\n    {\n      {;\n//@ assert( 0<=m);\n}\n\n      {;\n//@ assert(m<n);\n}\n\n    }\n}",
        "combined_annotation_num_solver_calls": 2,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int x,m,n;\n  n = unknown();\n  x = 0;\n  m = 0;\n  /*@\nloop invariant i1: 1 <= x <= n;\nloop invariant i2: 0 <= m <= n;\nloop invariant i3: m <= x <= n;\nloop invariant i4: m <= n;\nloop invariant i5: m <= x;\nloop invariant i6: 0 <= x <= n;\nloop invariant i7: x <= n;\nloop invariant i8: if n > 0 then m < n else m >= n;\nloop invariant i9: if n > 0 then m >= 0 else m <= 0;\nloop invariant i10: if n > 0 then m <= n else m >= n;\nloop invariant i11: m >= 0; loop invariant m < n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= m; loop invariant m <= x; loop invariant x < n; loop invariant m < x;\nloop invariant i12: m <= n || (n <= 0);\nloop invariant i13: m <= x || n <= 0;\nloop invariant i14: m >= 0;\nloop invariant i15: m <= x ==> m <= n;\nloop invariant i16: m <= n ==> m <= x;\nloop invariant i17: m <= n ==> m <= n;\nloop invariant i18: m <= x ==> m <= n ==> m <= x;\nloop invariant i19: m <= x ==> m <= n ==> m <= n ==> m <= x;\nloop invariant i20: m <= n ==> m <= n ==> m <= x ==> m <= n;\nloop invariant i21: m <= n ==> m <= n ==> m <= x ==> m <= n ==> m <= x;\nloop invariant i22: m <= x ==> m <= n ==> m <= n ==> m <= x ==> m <= n;\nloop invariant i23: m <= x ==> m <= n ==> m <= n ==> m <= x ==> m <= n ==> m <= x;\nloop invariant i24: m <= n ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n;\nloop invariant i25: m <= n ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x;\nloop invariant i26: m <= n ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n;\nloop invariant i27: m <= n ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x;\nloop invariant i28: m <= n ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n;\nloop invariant i29: m <= n ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x;\nloop invariant i30: m <= n ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n;\nloop invariant i31: m <= n ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x;\nloop invariant i32: m <= n ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n;\nloop invariant i33: m <= n ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x;\nloop invariant i34: m <= n ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n;\nloop invariant i35: m <= n ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x;\nloop invariant i36: m <= n ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n;\nloop invariant i37: m <= n ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x;\nloop invariant i38: m <= n ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n ==> m <= x ==> m <= n;\nloop invariant i39: 0 <= m <= x;\nloop invariant i40: if (n > 0) then (0 <= m <= n) else (0 <= m <= n);\nloop invariant i41: if (m >= 0) then (m < n) else (m < n);\nloop invariant i42: if (m >= 1) then (m <= n) else (m <= n);\nloop invariant i43: if (m >= 2) then (m <= n) else (m <= n);\nloop invariant i44: if (m >= 3) then (m <= n) else (m <= n);\nloop invariant i45: if (m >= 4) then (m <= n) else (m <= n);\nloop invariant i46: if (m >= 5) then (m <= n) else (m <= n);\nloop invariant i47: if (m >= 6) then (m <= n) else (m <= n);\nloop invariant i48: if (m >= 7) then (m <= n) else (m <= n);\nloop invariant i49: if (m >= 8) then (m <= n) else (m <= n);\nloop invariant i50: if (m >= 9) then (m <= n) else (m <= n);\nloop invariant i51: if (m >= 10) then (m <= n) else (m <= n);\nloop invariant i52: if (m >= 11) then (m <= n) else (m <= n);\nloop invariant i53: if (m >= 12) then (m <= n) else (m <= n);\nloop invariant i54: if (m >= 13) then (m <= n) else (m <= n);\nloop invariant i55: if (m >= 14) then (m <= n) else (m <= n);\nloop invariant i56: if (m >= 15) then (m <= n) else (m <= n);\nloop invariant i57: if (m >= 16) then (m <= n) else (m <= n);\nloop invariant i58: if (m >= 17) then (m <= n) else (m <= n);\nloop invariant i59: if (m >= 18) then (m <= n) else (m <= n);\nloop invariant i60: if (m >= 19) then (m <= n) else (m <= n);\nloop invariant i61: if (m >= 20) then (m <= n) else (m <= n);\nloop invariant i62: if (m >= 21) then (m <= n) else (m <= n);\nloop invariant i63: if (m >= 22) then (m <= n) else (m <= n);\nloop invariant i64: if (m >= 23) then (m <= n) else (m <= n);\nloop invariant i65: if (m >= 24) then (m <= n) else (m <= n);\nloop invariant i66: if (m >= 25) then (m <= n) else (m <= n);\nloop invariant i67: if (m >= 26) then (m <= n) else (m <= n);\nloop invariant i68: if (m >= 27) then (m <= n) else (m <= n);\nloop invariant i69: if (m >= 28) then (m <= n) else (m <= n);\nloop invariant i70: if (m >= 29) then (m <= n) else (m <= n);\nloop invariant i71: if (m >= 30) then (m <= n) else (m <= n);\nloop invariant i72: if (m >= 31) then (m <= n) else (m <= n);\nloop invariant i73: if (m >= 32) then (m <= n) else (m <= n);\nloop invariant i74: if (m >= 33) then (m <= n) else (m <= n);\nloop invariant i75: if (m >= 34) then (m <= n) else (m <= n);\nloop invariant i76: if (m >= 35) then (m <= n) else (m <= n);\nloop invariant i77: if (m >= 36) then (m <= n) else (m <= n);\nloop invariant i78: if (m >= 37) then (m <= n) else (m <= n);\nloop invariant i79: if (m >= 38) then (m <= n) else (m <= n);\nloop invariant i80: if (m >= 39) then (m <= n) else (m <= n);\nloop invariant i81: if (m >= 40) then (m <= n) else (m <= n);\nloop invariant i82: if (m >= 41) then (m <= n) else (m <= n);\nloop invariant i83: if (m >= 42) then (m <= n) else (m <= n);\nloop invariant i84: m < n;\nloop invariant i85: m <= m';\nloop invariant i86: 0 <= m' <= n;\nloop invariant i87: x' == x + 1;\nloop invariant i88: m' == m;\nloop invariant i89: x' <= n;\nloop invariant i90: m' <= x';\nloop invariant i91: m' <= m;\nloop invariant i92: m' < n;\nloop invariant i93: m' <= m';\nloop invariant i94: x >= 0;\nloop invariant i95: (x < n ==> m <= n);\nloop invariant i96: (m < x ==> m <= n);\nloop invariant i97: (x == n ==> m == n);\nloop invariant i98: (m == n ==> m == n);\nloop invariant i99: (m == x ==> m == n);\nloop invariant i100: (m == 0 ==> m <= n);\nloop invariant i101: (m == 0 ==> x <= n);\nloop invariant i102: (x == 0 ==> m <= n);\nloop invariant i103: (x == 0 ==> m == 0);\nloop invariant i104: (m == 0 ==> x == 0);\nloop invariant i105: (m == 0 ==> x == n);\nloop invariant i106: (if x < n then m <= x else m >= x);\nloop invariant i107: (if x < n then m >= 0 else m >= n);\nloop invariant i108: (if x < n then m <= n else m <= 0);\nloop invariant i109: (if x < n then m <= x else m >= 0);\nloop invariant i110: (if x < n then m >= 0 else m >= x);\nloop invariant i111: (if x < n then m <= n else m <= x);\nloop invariant i112: (if x < n then m >= x else m >= n);\nloop invariant i113: (if x < n then m >= x else m >= 0);\nloop invariant i114: x < n ==> m <= x;\n*/\nwhile( x < n ) {\n    if(unknown())\n\tm = x;\n\tx++;\n  }\n  if( n > 0 )\n    {\n      {;\n//@ assert( 0<=m);\n}\n\n      {;\n//@ assert(m<n);\n}\n\n    }\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c"
        ],
        "skipped": [],
        "total": 29,
        "success_count": 26,
        "failure_count": 3,
        "success_rate": 0.896551724137931
    }
}