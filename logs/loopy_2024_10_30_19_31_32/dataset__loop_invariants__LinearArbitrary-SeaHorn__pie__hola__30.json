{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/30.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n\n  int i, c;\n  i = 0;\n  c = 0;\n  while (i < 1000) {\n    c = c + i;\n    i = i + 1;\n  }\n\n  {;\n//@ assert(c>=0);\n}\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= i <= 1000;\nloop invariant c == (i * (i - 1) / 2);\n*/\n```",
            "```\n/*@\nloop invariant i <= 1000;\nloop invariant c >= 0;\nloop invariant c <= i * (i - 1) / 2;\nloop invariant c >= i * (i - 1) / 2 - 1000 * (1000 - i);\nloop invariant c <= i * (i - 1) / 2 + 1000 * (1000 - i);\nloop invariant c >= 0 ==> i >= 0;\nloop invariant c <= i * (i - 1) / 2 ==> i >= 0;\nloop invariant c >= i * (i - 1) / 2 - 1000 * (1000 - i) ==> i >= 0;\nloop invariant c <= i * (i - 1) / 2 + 1000 * (1000 - i) ==> i >= 0;\nloop invariant c >= 0 ==> i <= 1000;\nloop invariant c <= i * (i - 1) / 2 ==> i <= 1000;\nloop invariant c >= i * (i - 1) / 2 - 1000 * (1000 - i) ==> i <= 1000;\nloop invariant c <= i * (i - 1) / 2 + 1000 * (1000 - i) ==> i <= 1000;\nloop invariant i >= 0 ==> i <= 1000;\nloop invariant i <= 1000 ==> i >= 0;\nloop invariant c >= 0 ==> c <= i * (i - 1) / 2;\nloop invariant c <= i * (i - 1) / 2 ==> c >= 0;\nloop invariant c >= 0 ==> c <= i * (i - 1) / 2 - 1000 * (1000 - i);\nloop invariant c <= i * (i - 1) / 2 - 1000 * (1000 - i) ==> c >= 0;\nloop invariant c >= 0 ==> c <= i * (i - 1) / 2 + 1000 * (1000 - i);\nloop invariant c <= i * (i - 1) / 2 + 1000 * (1000 - i) ==> c >= 0;\nloop invariant c >= 0 ==> c >= i * (i - 1) / 2 - 1000 * (1000 - i);\nloop invariant c >= i * (i - 1) / 2 - 1000 * (1000 - i) ==> c >= 0;\nloop invariant c >= 0 ==> c >= i * (i - 1) / 2 + 1000 * (1000 - i);\nloop invariant c >= i * (i - 1) / 2 + 1000 * (1000 - i) ==> c >= 0;\nloop invariant c >= 0 ==> c <= i * (i - 1) / 2;\nloop invariant c <= i * (i - 1) / 2 ==> c >= 0;\nloop invariant c >= 0 ==> c <= i * (i - 1) / 2 - 1000 * (1000 - i);\nloop invariant c <= i * (i - 1) / 2 - 1000 * (1000 - i) ==> c >= 0;\nloop invariant c >= 0 ==> c <= i * (i - 1) / 2 + 1000 * (1000 - i);\nloop invariant c <= i * (i - 1) / 2 + 1000 * (1000 - i) ==> c >= 0;\nloop invariant c >= 0 ==> c >= i * (i - 1) / 2 - 1000 * (1000 - i);\nloop invariant c >= i * (i - 1) / 2 - 1000 * (1000 - i) ==> c >= 0;\nloop invariant c >= 0 ==> c >= i * (i - 1) / 2 + 1000 * (1000 - i);\nloop invariant c >= i * (i - 1) / 2 + 1000 * (1000 - i) ==> c >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 1000;\nloop invariant c >= (i * (i - 1)) / 2;\nloop invariant c >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 1000;\nloop invariant 0 <= c <= (i * (i + 1) / 2);\nloop invariant i >= c / i;\nloop invariant i >= c / (i + 1);\nloop invariant i >= c / (i + 2);\nloop invariant i >= c / (i + 3);\nloop invariant i >= c / (i + 4);\nloop invariant i >= c / (i + 5);\nloop invariant i >= c / (i + 6);\nloop invariant i >= c / (i + 7);\nloop invariant i >= c / (i + 8);\nloop invariant i >= c / (i + 9);\nloop invariant i >= c / (i + 10);\nloop invariant i >= c / (i + 11);\nloop invariant i >= c / (i + 12);\nloop invariant i >= c / (i + 13);\nloop invariant i >= c / (i + 14);\nloop invariant i >= c / (i + 15);\nloop invariant i >= c / (i + 16);\nloop invariant i >= c / (i + 17);\nloop invariant i >= c / (i + 18);\nloop invariant i >= c / (i + 19);\nloop invariant i >= c / (i + 20);\nloop invariant i >= c / (i + 21);\nloop invariant i >= c / (i + 22);\nloop invariant i >= c / (i + 23);\nloop invariant i >= c / (i + 24);\nloop invariant i >= c / (i + 25);\nloop invariant i >= c / (i + 26);\nloop invariant i >= c / (i + 27);\nloop invariant i >= c / (i + 28);\nloop invariant i >= c / (i + 29);\nloop invariant i >= c / (i + 30);\nloop invariant i >= c / (i + 31);\nloop invariant i >= c / (i + 32);\nloop invariant i >= c / (i + 33);\nloop invariant i >= c / (i + 34);\nloop invariant i >= c / (i + 35);\nloop invariant i >= c / (i + 36);\nloop invariant i >= c / (i + 37);\nloop invariant i >= c / (i + 38);\nloop invariant i >= c / (i + 39);\nloop invariant i >= c / (i + 40);\nloop invariant i >= c / (i + 41);\nloop invariant i >= c / (i + 42);\nloop invariant i >= c / (i + 43);\nloop invariant i >= c / (i + 44);\nloop invariant i >= c / (i + 45);\nloop invariant i >= c / (i + 46);\nloop invariant i >= c / (i + 47);\nloop invariant i >= c / (i + 48);\nloop invariant i >= c / (i + 49);\nloop invariant i >= c / (i + 50);\nloop invariant i >= c / (i + 51);\nloop invariant i >= c / (i + 52);\nloop invariant i >= c / (i + 53);\nloop invariant i >= c / (i + 54);\nloop invariant i >= c / (i + 55);\nloop invariant i >= c / (i + 56);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i; loop invariant i <= 1000; loop invariant c >= 0; loop invariant c <= (i * (i - 1) / 2); loop invariant (i * (i - 1) / 2) <= c; loop invariant (c >= (i * (i - 1) / 2) ==> (c == (i * (i - 1) / 2))); loop invariant (i < 1000 ==> (c == (i * (i - 1) / 2))); loop invariant (i >= 1000 ==> (c == (1000 * (1000 - 1) / 2))); loop invariant (i < 1000 ==> (c == (i * (i - 1) / 2)) ==> (i >= 1)); loop invariant (i < 1000 ==> (c == (i * (i - 1) / 2)) ==> (i <= 999)); loop invariant (i >= 1000 ==> (c == (1000 * (1000 - 1) / 2)) ==> (i == 1000)); loop invariant (i >= 1000 ==> (c == (1000 * (1000 - 1) / 2)) ==> (i == 1000)); loop invariant (i >= 1000 ==> (c == (1000 * (1000 - 1) / 2)) ==> (i == 1000)); loop invariant (i >= 1000 ==> (c == (1000 * (1000 - 1) / 2)) ==> (i == 1000)); loop invariant (i >= 1000 ==> (c == (1000 * (1000 - 1) / 2)) ==> (i == 1000)); loop invariant (i >= 1000 ==> (c == (1000 * (1000 - 1) / 2)) ==> (i == 1000)); loop invariant (i >= 1000 ==> (c == (1000 * (1000 - 1) / 2)) ==> (i == 1000)); loop invariant (i >= 1000 ==> (c == (1000 * (1000 - 1) / 2)) ==> (i == 1000)); loop invariant (i >= 1000 ==> (c == (1000 * (1000 - 1) / 2)) ==> (i == 1000)); loop invariant (i >= 1000 ==> (c == (1000 * (1000 - 1) / 2)) ==> (i == 1000)); loop invariant (i >= 1000 ==> (c == (1000 * (1000 - 1) / 2)) ==> (i == 1000)); loop invariant (i >= 1000 ==> (c == (1000 * (1000 - 1) / 2)) ==> (i == 1000)); loop invariant (i >= 1000 ==> (c == (1000 * (1000 - 1) / 2)) ==> (i == 1000)); loop invariant (i >= 1000 ==> (c == (1000 * (1000 - 1) / 2)) ==> (i == 1000)); loop invariant (i >= 1000 ==> (c == (1000 * (1000 - 1) / 2)) ==> (i == 1000)); loop invariant (i >= 1000 ==> (c == (1000 * (1000 - 1) / 2)) ==> (i == 1000)); loop invariant (i >= 1000 ==> (c == (1000 * (1000 - 1) / 2)) ==> (i == 1000)); loop invariant (i >= 1000 ==> (c == (1000 * (1000 - 1) / 2)) ==> (i == 1000));\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= i * (i - 1) / 2;\nloop invariant 0 <= i <= 1000;\nloop invariant c + i <= 1000 * (1000 - 1) / 2;\n*/\n```",
            "```\n/*@\nloop invariant i < 1000;\nloop invariant c >= 0;\nloop invariant c == (i * (i - 1)) / 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 1000;\nloop invariant 0 <= c <= (1000 * (1000 + 1) / 2);\nloop invariant c == (i * (i + 1) / 2);\nloop invariant i == 1000;\nloop invariant c == 500500;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 1000;\nloop invariant c >= 0;\nloop invariant c == (i * (i - 1) / 2);\nloop invariant i >= c / 1000;\nloop invariant c >= (i * (i - 1) / 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 1000;\nloop invariant 0 <= c <= (i * (i + 1) / 2);\nloop invariant i >= 0;\nloop invariant c >= 0;\nloop invariant i <= 1000;\nloop invariant c <= (i * (i + 1) / 2);\nloop invariant i >= 0;\nloop invariant c >= 0;\nloop invariant i <= 1000;\nloop invariant c <= (i * (i + 1) / 2);\nloop invariant i >= 0;\nloop invariant c >= 0;\nloop invariant i <= 1000;\nloop invariant c <= (i * (i + 1) / 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 1000;\nloop invariant c >= 0;\nloop invariant c <= (999 * 1000) / 2;\nloop invariant c >= (i * (i - 1)) / 2;\nloop invariant c <= (i * (i + 1)) / 2;\nloop invariant c >= (i * (i - 1)) / 2 + (i * (i + 1)) / 2;\nloop invariant c <= (i * (i - 1)) / 2 + (i * (i + 1)) / 2;\nloop invariant c >= (i * (i - 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2;\nloop invariant c <= (i * (i - 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2;\nloop invariant c >= (i * (i - 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2;\nloop invariant c <= (i * (i - 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2;\nloop invariant c >= (i * (i - 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2;\nloop invariant c <= (i * (i - 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2;\nloop invariant c >= (i * (i - 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2;\nloop invariant c <= (i * (i - 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2;\nloop invariant c >= (i * (i - 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2;\nloop invariant c <= (i * (i - 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2;\nloop invariant c >= (i * (i - 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 1000;\nloop invariant c >= 0;\nloop invariant c <= (i * (i - 1) / 2);\nloop invariant c == (i * (i - 1) / 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 1000;\nloop invariant 0 <= c <= (i * (i - 1)) / 2;\nloop invariant c == (i * (i - 1)) / 2 ==> (c >= 0);\nloop invariant i == 1000 ==> (c >= 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 1000;\nloop invariant c >= 0;\nloop invariant c <= (1000 * (1000 - 1) / 2);\nloop invariant c <= (i * (i - 1) / 2);\nloop invariant c == i * (i - 1) / 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 1000; loop invariant c >= 0; loop invariant c <= (i * (i + 1) / 2);\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 1000;\nloop invariant c == (i * (i - 1) / 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n\n  int i, c;\n  i = 0;\n  c = 0;\n  /*@\nloop invariant i1: 0 <= i <= 1000;\nloop invariant i2: c == (i * (i - 1) / 2);\n*/\nwhile (i < 1000) {\n    c = c + i;\n    i = i + 1;\n  }\n\n  {;\n//@ assert(c>=0);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant i <= 1000;\nloop invariant c >= 0;\nloop invariant c <= i * (i - 1) / 2;\nloop invariant c >= i * (i - 1) / 2 - 1000 * (1000 - i);\nloop invariant c <= i * (i - 1) / 2 + 1000 * (1000 - i);\nloop invariant c >= 0 ==> i >= 0;\nloop invariant c <= i * (i - 1) / 2 ==> i >= 0;\nloop invariant c >= i * (i - 1) / 2 - 1000 * (1000 - i) ==> i >= 0;\nloop invariant c <= i * (i - 1) / 2 + 1000 * (1000 - i) ==> i >= 0;\nloop invariant c >= 0 ==> i <= 1000;\nloop invariant c <= i * (i - 1) / 2 ==> i <= 1000;\nloop invariant c >= i * (i - 1) / 2 - 1000 * (1000 - i) ==> i <= 1000;\nloop invariant c <= i * (i - 1) / 2 + 1000 * (1000 - i) ==> i <= 1000;\nloop invariant i >= 0 ==> i <= 1000;\nloop invariant i <= 1000 ==> i >= 0;\nloop invariant c >= 0 ==> c <= i * (i - 1) / 2;\nloop invariant c <= i * (i - 1) / 2 ==> c >= 0;\nloop invariant c >= 0 ==> c <= i * (i - 1) / 2 - 1000 * (1000 - i);\nloop invariant c <= i * (i - 1) / 2 - 1000 * (1000 - i) ==> c >= 0;\nloop invariant c >= 0 ==> c <= i * (i - 1) / 2 + 1000 * (1000 - i);\nloop invariant c <= i * (i - 1) / 2 + 1000 * (1000 - i) ==> c >= 0;\nloop invariant c >= 0 ==> c >= i * (i - 1) / 2 - 1000 * (1000 - i);\nloop invariant c >= i * (i - 1) / 2 - 1000 * (1000 - i) ==> c >= 0;\nloop invariant c >= 0 ==> c >= i * (i - 1) / 2 + 1000 * (1000 - i);\nloop invariant c >= i * (i - 1) / 2 + 1000 * (1000 - i) ==> c >= 0;\nloop invariant c >= 0 ==> c <= i * (i - 1) / 2;\nloop invariant c <= i * (i - 1) / 2 ==> c >= 0;\nloop invariant c >= 0 ==> c <= i * (i - 1) / 2 - 1000 * (1000 - i);\nloop invariant c <= i * (i - 1) / 2 - 1000 * (1000 - i) ==> c >= 0;\nloop invariant c >= 0 ==> c <= i * (i - 1) / 2 + 1000 * (1000 - i);\nloop invariant c <= i * (i - 1) / 2 + 1000 * (1000 - i) ==> c >= 0;\nloop invariant c >= 0 ==> c >= i * (i - 1) / 2 - 1000 * (1000 - i);\nloop invariant c >= i * (i - 1) / 2 - 1000 * (1000 - i) ==> c >= 0;\nloop invariant c >= 0 ==> c >= i * (i - 1) / 2 + 1000 * (1000 - i);\nloop invariant c >= i * (i - 1) / 2 + 1000 * (1000 - i) ==> c >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n\n  int i, c;\n  i = 0;\n  c = 0;\n  /*@\nloop invariant i1: i <= 1000;\nloop invariant i2: c >= 0;\nloop invariant i3: c <= i * (i - 1) / 2;\n\nloop invariant i5: c <= i * (i - 1) / 2 + 1000 * (1000 - i);\nloop invariant i6: c >= 0 ==> i >= 0;\nloop invariant i7: c <= i * (i - 1) / 2 ==> i >= 0;\nloop invariant i8: c >= i * (i - 1) / 2 - 1000 * (1000 - i) ==> i >= 0;\nloop invariant i9: c <= i * (i - 1) / 2 + 1000 * (1000 - i) ==> i >= 0;\nloop invariant i10: c >= 0 ==> i <= 1000;\nloop invariant i11: c <= i * (i - 1) / 2 ==> i <= 1000;\nloop invariant i12: c >= i * (i - 1) / 2 - 1000 * (1000 - i) ==> i <= 1000;\nloop invariant i13: c <= i * (i - 1) / 2 + 1000 * (1000 - i) ==> i <= 1000;\nloop invariant i14: i >= 0 ==> i <= 1000;\nloop invariant i15: i <= 1000 ==> i >= 0;\nloop invariant i16: c >= 0 ==> c <= i * (i - 1) / 2;\nloop invariant i17: c <= i * (i - 1) / 2 ==> c >= 0;\n\nloop invariant i19: c <= i * (i - 1) / 2 - 1000 * (1000 - i) ==> c >= 0;\nloop invariant i20: c >= 0 ==> c <= i * (i - 1) / 2 + 1000 * (1000 - i);\nloop invariant i21: c <= i * (i - 1) / 2 + 1000 * (1000 - i) ==> c >= 0;\n\nloop invariant i23: c >= i * (i - 1) / 2 - 1000 * (1000 - i) ==> c >= 0;\n\nloop invariant i25: c >= i * (i - 1) / 2 + 1000 * (1000 - i) ==> c >= 0;\n*/\nwhile (i < 1000) {\n    c = c + i;\n    i = i + 1;\n  }\n\n  {;\n//@ assert(c>=0);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 1000;\nloop invariant c >= (i * (i - 1)) / 2;\nloop invariant c >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n\n  int i, c;\n  i = 0;\n  c = 0;\n  /*@\nloop invariant i1: 0 <= i <= 1000;\nloop invariant i2: c >= (i * (i - 1)) / 2;\nloop invariant i3: c >= 0;\n*/\nwhile (i < 1000) {\n    c = c + i;\n    i = i + 1;\n  }\n\n  {;\n//@ assert(c>=0);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 1000;\nloop invariant 0 <= c <= (i * (i + 1) / 2);\nloop invariant i >= c / i;\nloop invariant i >= c / (i + 1);\nloop invariant i >= c / (i + 2);\nloop invariant i >= c / (i + 3);\nloop invariant i >= c / (i + 4);\nloop invariant i >= c / (i + 5);\nloop invariant i >= c / (i + 6);\nloop invariant i >= c / (i + 7);\nloop invariant i >= c / (i + 8);\nloop invariant i >= c / (i + 9);\nloop invariant i >= c / (i + 10);\nloop invariant i >= c / (i + 11);\nloop invariant i >= c / (i + 12);\nloop invariant i >= c / (i + 13);\nloop invariant i >= c / (i + 14);\nloop invariant i >= c / (i + 15);\nloop invariant i >= c / (i + 16);\nloop invariant i >= c / (i + 17);\nloop invariant i >= c / (i + 18);\nloop invariant i >= c / (i + 19);\nloop invariant i >= c / (i + 20);\nloop invariant i >= c / (i + 21);\nloop invariant i >= c / (i + 22);\nloop invariant i >= c / (i + 23);\nloop invariant i >= c / (i + 24);\nloop invariant i >= c / (i + 25);\nloop invariant i >= c / (i + 26);\nloop invariant i >= c / (i + 27);\nloop invariant i >= c / (i + 28);\nloop invariant i >= c / (i + 29);\nloop invariant i >= c / (i + 30);\nloop invariant i >= c / (i + 31);\nloop invariant i >= c / (i + 32);\nloop invariant i >= c / (i + 33);\nloop invariant i >= c / (i + 34);\nloop invariant i >= c / (i + 35);\nloop invariant i >= c / (i + 36);\nloop invariant i >= c / (i + 37);\nloop invariant i >= c / (i + 38);\nloop invariant i >= c / (i + 39);\nloop invariant i >= c / (i + 40);\nloop invariant i >= c / (i + 41);\nloop invariant i >= c / (i + 42);\nloop invariant i >= c / (i + 43);\nloop invariant i >= c / (i + 44);\nloop invariant i >= c / (i + 45);\nloop invariant i >= c / (i + 46);\nloop invariant i >= c / (i + 47);\nloop invariant i >= c / (i + 48);\nloop invariant i >= c / (i + 49);\nloop invariant i >= c / (i + 50);\nloop invariant i >= c / (i + 51);\nloop invariant i >= c / (i + 52);\nloop invariant i >= c / (i + 53);\nloop invariant i >= c / (i + 54);\nloop invariant i >= c / (i + 55);\nloop invariant i >= c / (i + 56);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n\n  int i, c;\n  i = 0;\n  c = 0;\n  /*@\nloop invariant i1: 0 <= i <= 1000;\nloop invariant i2: 0 <= c <= (i * (i + 1) / 2);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (i < 1000) {\n    c = c + i;\n    i = i + 1;\n  }\n\n  {;\n//@ assert(c>=0);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i; loop invariant i <= 1000; loop invariant c >= 0; loop invariant c <= (i * (i - 1) / 2); loop invariant (i * (i - 1) / 2) <= c; loop invariant (c >= (i * (i - 1) / 2) ==> (c == (i * (i - 1) / 2))); loop invariant (i < 1000 ==> (c == (i * (i - 1) / 2))); loop invariant (i >= 1000 ==> (c == (1000 * (1000 - 1) / 2))); loop invariant (i < 1000 ==> (c == (i * (i - 1) / 2)) ==> (i >= 1)); loop invariant (i < 1000 ==> (c == (i * (i - 1) / 2)) ==> (i <= 999)); loop invariant (i >= 1000 ==> (c == (1000 * (1000 - 1) / 2)) ==> (i == 1000)); loop invariant (i >= 1000 ==> (c == (1000 * (1000 - 1) / 2)) ==> (i == 1000)); loop invariant (i >= 1000 ==> (c == (1000 * (1000 - 1) / 2)) ==> (i == 1000)); loop invariant (i >= 1000 ==> (c == (1000 * (1000 - 1) / 2)) ==> (i == 1000)); loop invariant (i >= 1000 ==> (c == (1000 * (1000 - 1) / 2)) ==> (i == 1000)); loop invariant (i >= 1000 ==> (c == (1000 * (1000 - 1) / 2)) ==> (i == 1000)); loop invariant (i >= 1000 ==> (c == (1000 * (1000 - 1) / 2)) ==> (i == 1000)); loop invariant (i >= 1000 ==> (c == (1000 * (1000 - 1) / 2)) ==> (i == 1000)); loop invariant (i >= 1000 ==> (c == (1000 * (1000 - 1) / 2)) ==> (i == 1000)); loop invariant (i >= 1000 ==> (c == (1000 * (1000 - 1) / 2)) ==> (i == 1000)); loop invariant (i >= 1000 ==> (c == (1000 * (1000 - 1) / 2)) ==> (i == 1000)); loop invariant (i >= 1000 ==> (c == (1000 * (1000 - 1) / 2)) ==> (i == 1000)); loop invariant (i >= 1000 ==> (c == (1000 * (1000 - 1) / 2)) ==> (i == 1000)); loop invariant (i >= 1000 ==> (c == (1000 * (1000 - 1) / 2)) ==> (i == 1000)); loop invariant (i >= 1000 ==> (c == (1000 * (1000 - 1) / 2)) ==> (i == 1000)); loop invariant (i >= 1000 ==> (c == (1000 * (1000 - 1) / 2)) ==> (i == 1000)); loop invariant (i >= 1000 ==> (c == (1000 * (1000 - 1) / 2)) ==> (i == 1000)); loop invariant (i >= 1000 ==> (c == (1000 * (1000 - 1) / 2)) ==> (i == 1000));\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n\n  int i, c;\n  i = 0;\n  c = 0;\n  /*@\nloop invariant i1: 0 <= i; loop invariant i <= 1000; loop invariant c >= 0; loop invariant c <= (i * (i - 1) / 2); loop invariant (i * (i - 1) / 2) <= c; loop invariant (c >= (i * (i - 1) / 2) ==> (c == (i * (i - 1) / 2))); loop invariant (i < 1000 ==> (c == (i * (i - 1) / 2))); loop invariant (i >= 1000 ==> (c == (1000 * (1000 - 1) / 2))); loop invariant (i < 1000 ==> (c == (i * (i - 1) / 2)) ==> (i >= 1)); loop invariant (i < 1000 ==> (c == (i * (i - 1) / 2)) ==> (i <= 999)); loop invariant (i >= 1000 ==> (c == (1000 * (1000 - 1) / 2)) ==> (i == 1000)); loop invariant (i >= 1000 ==> (c == (1000 * (1000 - 1) / 2)) ==> (i == 1000)); loop invariant (i >= 1000 ==> (c == (1000 * (1000 - 1) / 2)) ==> (i == 1000)); loop invariant (i >= 1000 ==> (c == (1000 * (1000 - 1) / 2)) ==> (i == 1000)); loop invariant (i >= 1000 ==> (c == (1000 * (1000 - 1) / 2)) ==> (i == 1000)); loop invariant (i >= 1000 ==> (c == (1000 * (1000 - 1) / 2)) ==> (i == 1000)); loop invariant (i >= 1000 ==> (c == (1000 * (1000 - 1) / 2)) ==> (i == 1000)); loop invariant (i >= 1000 ==> (c == (1000 * (1000 - 1) / 2)) ==> (i == 1000)); loop invariant (i >= 1000 ==> (c == (1000 * (1000 - 1) / 2)) ==> (i == 1000)); loop invariant (i >= 1000 ==> (c == (1000 * (1000 - 1) / 2)) ==> (i == 1000)); loop invariant (i >= 1000 ==> (c == (1000 * (1000 - 1) / 2)) ==> (i == 1000)); loop invariant (i >= 1000 ==> (c == (1000 * (1000 - 1) / 2)) ==> (i == 1000)); loop invariant (i >= 1000 ==> (c == (1000 * (1000 - 1) / 2)) ==> (i == 1000)); loop invariant (i >= 1000 ==> (c == (1000 * (1000 - 1) / 2)) ==> (i == 1000)); loop invariant (i >= 1000 ==> (c == (1000 * (1000 - 1) / 2)) ==> (i == 1000)); loop invariant (i >= 1000 ==> (c == (1000 * (1000 - 1) / 2)) ==> (i == 1000)); loop invariant (i >= 1000 ==> (c == (1000 * (1000 - 1) / 2)) ==> (i == 1000)); loop invariant (i >= 1000 ==> (c == (1000 * (1000 - 1) / 2)) ==> (i == 1000));\n*/\nwhile (i < 1000) {\n    c = c + i;\n    i = i + 1;\n  }\n\n  {;\n//@ assert(c>=0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= i * (i - 1) / 2;\nloop invariant 0 <= i <= 1000;\nloop invariant c + i <= 1000 * (1000 - 1) / 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n\n  int i, c;\n  i = 0;\n  c = 0;\n  /*@\nloop invariant i1: 0 <= c <= i * (i - 1) / 2;\nloop invariant i2: 0 <= i <= 1000;\n\n*/\nwhile (i < 1000) {\n    c = c + i;\n    i = i + 1;\n  }\n\n  {;\n//@ assert(c>=0);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant i < 1000;\nloop invariant c >= 0;\nloop invariant c == (i * (i - 1)) / 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n\n  int i, c;\n  i = 0;\n  c = 0;\n  /*@\n\nloop invariant i2: c >= 0;\nloop invariant i3: c == (i * (i - 1)) / 2;\n*/\nwhile (i < 1000) {\n    c = c + i;\n    i = i + 1;\n  }\n\n  {;\n//@ assert(c>=0);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 1000;\nloop invariant 0 <= c <= (1000 * (1000 + 1) / 2);\nloop invariant c == (i * (i + 1) / 2);\nloop invariant i == 1000;\nloop invariant c == 500500;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n\n  int i, c;\n  i = 0;\n  c = 0;\n  /*@\nloop invariant i1: 0 <= i <= 1000;\n\n\n\n\n*/\nwhile (i < 1000) {\n    c = c + i;\n    i = i + 1;\n  }\n\n  {;\n//@ assert(c>=0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 1000;\nloop invariant c >= 0;\nloop invariant c == (i * (i - 1) / 2);\nloop invariant i >= c / 1000;\nloop invariant c >= (i * (i - 1) / 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n\n  int i, c;\n  i = 0;\n  c = 0;\n  /*@\nloop invariant i1: 0 <= i <= 1000;\nloop invariant i2: c >= 0;\nloop invariant i3: c == (i * (i - 1) / 2);\nloop invariant i4: i >= c / 1000;\nloop invariant i5: c >= (i * (i - 1) / 2);\n*/\nwhile (i < 1000) {\n    c = c + i;\n    i = i + 1;\n  }\n\n  {;\n//@ assert(c>=0);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 1000;\nloop invariant 0 <= c <= (i * (i + 1) / 2);\nloop invariant i >= 0;\nloop invariant c >= 0;\nloop invariant i <= 1000;\nloop invariant c <= (i * (i + 1) / 2);\nloop invariant i >= 0;\nloop invariant c >= 0;\nloop invariant i <= 1000;\nloop invariant c <= (i * (i + 1) / 2);\nloop invariant i >= 0;\nloop invariant c >= 0;\nloop invariant i <= 1000;\nloop invariant c <= (i * (i + 1) / 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n\n  int i, c;\n  i = 0;\n  c = 0;\n  /*@\nloop invariant i1: 0 <= i <= 1000;\nloop invariant i2: 0 <= c <= (i * (i + 1) / 2);\nloop invariant i3: i >= 0;\nloop invariant i4: c >= 0;\nloop invariant i5: i <= 1000;\nloop invariant i6: c <= (i * (i + 1) / 2);\n*/\nwhile (i < 1000) {\n    c = c + i;\n    i = i + 1;\n  }\n\n  {;\n//@ assert(c>=0);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 8,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 1000;\nloop invariant c >= 0;\nloop invariant c <= (999 * 1000) / 2;\nloop invariant c >= (i * (i - 1)) / 2;\nloop invariant c <= (i * (i + 1)) / 2;\nloop invariant c >= (i * (i - 1)) / 2 + (i * (i + 1)) / 2;\nloop invariant c <= (i * (i - 1)) / 2 + (i * (i + 1)) / 2;\nloop invariant c >= (i * (i - 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2;\nloop invariant c <= (i * (i - 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2;\nloop invariant c >= (i * (i - 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2;\nloop invariant c <= (i * (i - 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2;\nloop invariant c >= (i * (i - 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2;\nloop invariant c <= (i * (i - 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2;\nloop invariant c >= (i * (i - 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2;\nloop invariant c <= (i * (i - 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2;\nloop invariant c >= (i * (i - 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2;\nloop invariant c <= (i * (i - 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2;\nloop invariant c >= (i * (i - 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n\n  int i, c;\n  i = 0;\n  c = 0;\n  /*@\nloop invariant i1: 0 <= i <= 1000;\nloop invariant i2: c >= 0;\n\nloop invariant i4: c >= (i * (i - 1)) / 2;\nloop invariant i5: c <= (i * (i + 1)) / 2;\n\nloop invariant i7: c <= (i * (i - 1)) / 2 + (i * (i + 1)) / 2;\n\nloop invariant i9: c <= (i * (i - 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2;\n\nloop invariant i11: c <= (i * (i - 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2;\n\nloop invariant i13: c <= (i * (i - 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2;\n\nloop invariant i15: c <= (i * (i - 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2;\n\nloop invariant i17: c <= (i * (i - 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2;\n\n*/\nwhile (i < 1000) {\n    c = c + i;\n    i = i + 1;\n  }\n\n  {;\n//@ assert(c>=0);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 1000;\nloop invariant c >= 0;\nloop invariant c <= (i * (i - 1) / 2);\nloop invariant c == (i * (i - 1) / 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n\n  int i, c;\n  i = 0;\n  c = 0;\n  /*@\nloop invariant i1: 0 <= i <= 1000;\nloop invariant i2: c >= 0;\nloop invariant i3: c <= (i * (i - 1) / 2);\nloop invariant i4: c == (i * (i - 1) / 2);\n*/\nwhile (i < 1000) {\n    c = c + i;\n    i = i + 1;\n  }\n\n  {;\n//@ assert(c>=0);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 1000;\nloop invariant 0 <= c <= (i * (i - 1)) / 2;\nloop invariant c == (i * (i - 1)) / 2 ==> (c >= 0);\nloop invariant i == 1000 ==> (c >= 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n\n  int i, c;\n  i = 0;\n  c = 0;\n  /*@\nloop invariant i1: 0 <= i <= 1000;\nloop invariant i2: 0 <= c <= (i * (i - 1)) / 2;\nloop invariant i3: c == (i * (i - 1)) / 2 ==> (c >= 0);\nloop invariant i4: i == 1000 ==> (c >= 0);\n*/\nwhile (i < 1000) {\n    c = c + i;\n    i = i + 1;\n  }\n\n  {;\n//@ assert(c>=0);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 1000;\nloop invariant c >= 0;\nloop invariant c <= (1000 * (1000 - 1) / 2);\nloop invariant c <= (i * (i - 1) / 2);\nloop invariant c == i * (i - 1) / 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n\n  int i, c;\n  i = 0;\n  c = 0;\n  /*@\nloop invariant i1: 0 <= i <= 1000;\nloop invariant i2: c >= 0;\nloop invariant i3: c <= (1000 * (1000 - 1) / 2);\nloop invariant i4: c <= (i * (i - 1) / 2);\nloop invariant i5: c == i * (i - 1) / 2;\n*/\nwhile (i < 1000) {\n    c = c + i;\n    i = i + 1;\n  }\n\n  {;\n//@ assert(c>=0);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 1000; loop invariant c >= 0; loop invariant c <= (i * (i + 1) / 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n\n  int i, c;\n  i = 0;\n  c = 0;\n  /*@\nloop invariant i1: 0 <= i <= 1000; loop invariant c >= 0; loop invariant c <= (i * (i + 1) / 2);\n*/\nwhile (i < 1000) {\n    c = c + i;\n    i = i + 1;\n  }\n\n  {;\n//@ assert(c>=0);\n}\n\n}",
                "checker_output_after_prune": true
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "loop invariant 0 <= i <= 1000 is partially proven to be inductive.\nloop invariant c == (i * (i - 1) / 2) is partially proven to be inductive.\nloop invariant i <= 1000 is partially proven to be inductive.\nloop invariant c >= 0 is partially proven to be inductive.\nloop invariant c <= i * (i - 1) / 2 is partially proven to be inductive.\nloop invariant c >= i * (i - 1) / 2 - 1000 * (1000 - i) is partially proven to be inductive.\nloop invariant c <= i * (i - 1) / 2 + 1000 * (1000 - i) is partially proven to be inductive.\nloop invariant c >= 0 ==> i >= 0 is partially proven to be inductive.\nloop invariant c <= i * (i - 1) / 2 ==> i >= 0 is partially proven to be inductive.\nloop invariant c >= i * (i - 1) / 2 - 1000 * (1000 - i) ==> i >= 0 is partially proven to be inductive.\nloop invariant c <= i * (i - 1) / 2 + 1000 * (1000 - i) ==> i >= 0 is partially proven to be inductive.\nloop invariant c >= 0 ==> i <= 1000 is partially proven to be inductive.\nloop invariant c <= i * (i - 1) / 2 ==> i <= 1000 is partially proven to be inductive.\nloop invariant c >= i * (i - 1) / 2 - 1000 * (1000 - i) ==> i <= 1000 is partially proven to be inductive.\nloop invariant c <= i * (i - 1) / 2 + 1000 * (1000 - i) ==> i <= 1000 is partially proven to be inductive.\nloop invariant i >= 0 ==> i <= 1000 is partially proven to be inductive.\nloop invariant i <= 1000 ==> i >= 0 is partially proven to be inductive.\nloop invariant c >= 0 ==> c <= i * (i - 1) / 2 is partially proven to be inductive.\nloop invariant c <= i * (i - 1) / 2 ==> c >= 0 is partially proven to be inductive.\nloop invariant c >= 0 ==> c <= i * (i - 1) / 2 - 1000 * (1000 - i) is preserved but not established.\nloop invariant c <= i * (i - 1) / 2 - 1000 * (1000 - i) ==> c >= 0 is partially proven to be inductive.\nloop invariant c >= 0 ==> c <= i * (i - 1) / 2 + 1000 * (1000 - i) is partially proven to be inductive.\nloop invariant c <= i * (i - 1) / 2 + 1000 * (1000 - i) ==> c >= 0 is partially proven to be inductive.\nloop invariant c >= 0 ==> c >= i * (i - 1) / 2 - 1000 * (1000 - i) is partially proven to be inductive.\nloop invariant c >= i * (i - 1) / 2 - 1000 * (1000 - i) ==> c >= 0 is partially proven to be inductive.\nloop invariant c >= 0 ==> c >= i * (i - 1) / 2 + 1000 * (1000 - i) is partially proven to be inductive.\nloop invariant c >= i * (i - 1) / 2 + 1000 * (1000 - i) ==> c >= 0 is partially proven to be inductive.\nloop invariant c >= (i * (i - 1)) / 2 is partially proven to be inductive.\nloop invariant 0 <= c <= (i * (i + 1) / 2) is partially proven to be inductive.\nloop invariant i >= c / i is partially proven to be inductive.\nloop invariant i >= c / (i + 1) is partially proven to be inductive.\nloop invariant i >= c / (i + 2) is partially proven to be inductive.\nloop invariant i >= c / (i + 3) is partially proven to be inductive.\nloop invariant i >= c / (i + 4) is partially proven to be inductive.\nloop invariant i >= c / (i + 5) is partially proven to be inductive.\nloop invariant i >= c / (i + 6) is partially proven to be inductive.\nloop invariant i >= c / (i + 7) is partially proven to be inductive.\nloop invariant i >= c / (i + 8) is partially proven to be inductive.\nloop invariant i >= c / (i + 9) is partially proven to be inductive.\nloop invariant i >= c / (i + 10) is partially proven to be inductive.\nloop invariant i >= c / (i + 11) is partially proven to be inductive.\nloop invariant i >= c / (i + 12) is partially proven to be inductive.\nloop invariant i >= c / (i + 13) is partially proven to be inductive.\nloop invariant i >= c / (i + 14) is partially proven to be inductive.\nloop invariant i >= c / (i + 15) is partially proven to be inductive.\nloop invariant i >= c / (i + 16) is partially proven to be inductive.\nloop invariant i >= c / (i + 17) is partially proven to be inductive.\nloop invariant i >= c / (i + 18) is partially proven to be inductive.\nloop invariant i >= c / (i + 19) is partially proven to be inductive.\nloop invariant i >= c / (i + 20) is partially proven to be inductive.\nloop invariant i >= c / (i + 21) is partially proven to be inductive.\nloop invariant i >= c / (i + 22) is partially proven to be inductive.\nloop invariant i >= c / (i + 23) is partially proven to be inductive.\nloop invariant i >= c / (i + 24) is partially proven to be inductive.\nloop invariant i >= c / (i + 25) is partially proven to be inductive.\nloop invariant i >= c / (i + 26) is partially proven to be inductive.\nloop invariant i >= c / (i + 27) is partially proven to be inductive.\nloop invariant i >= c / (i + 28) is partially proven to be inductive.\nloop invariant i >= c / (i + 29) is partially proven to be inductive.\nloop invariant i >= c / (i + 30) is partially proven to be inductive.\nloop invariant i >= c / (i + 31) is partially proven to be inductive.\nloop invariant i >= c / (i + 32) is partially proven to be inductive.\nloop invariant i >= c / (i + 33) is partially proven to be inductive.\nloop invariant i >= c / (i + 34) is partially proven to be inductive.\nloop invariant i >= c / (i + 35) is partially proven to be inductive.\nloop invariant i >= c / (i + 36) is partially proven to be inductive.\nloop invariant i >= c / (i + 37) is partially proven to be inductive.\nloop invariant i >= c / (i + 38) is partially proven to be inductive.\nloop invariant i >= c / (i + 39) is partially proven to be inductive.\nloop invariant i >= c / (i + 40) is partially proven to be inductive.\nloop invariant i >= c / (i + 41) is partially proven to be inductive.\nloop invariant i >= c / (i + 42) is partially proven to be inductive.\nloop invariant i >= c / (i + 43) is partially proven to be inductive.\nloop invariant i >= c / (i + 44) is partially proven to be inductive.\nloop invariant i >= c / (i + 45) is partially proven to be inductive.\nloop invariant i >= c / (i + 46) is partially proven to be inductive.\nloop invariant i >= c / (i + 47) is partially proven to be inductive.\nloop invariant i >= c / (i + 48) is partially proven to be inductive.\nloop invariant i >= c / (i + 49) is partially proven to be inductive.\nloop invariant i >= c / (i + 50) is partially proven to be inductive.\nloop invariant i >= c / (i + 51) is partially proven to be inductive.\nloop invariant i >= c / (i + 52) is partially proven to be inductive.\nloop invariant i >= c / (i + 53) is partially proven to be inductive.\nloop invariant i >= c / (i + 54) is partially proven to be inductive.\nloop invariant i >= c / (i + 55) is partially proven to be inductive.\nloop invariant i >= c / (i + 56) is partially proven to be inductive.\nloop invariant 0 <= i; loop invariant i <= 1000; loop invariant c >= 0; loop invariant c <= (i * (i - 1) / 2); loop invariant (i * (i - 1) / 2) <= c; loop invariant (c >= (i * (i - 1) / 2) ==> (c == (i * (i - 1) / 2))); loop invariant (i < 1000 ==> (c == (i * (i - 1) / 2))); loop invariant (i >= 1000 ==> (c == (1000 * (1000 - 1) / 2))); loop invariant (i < 1000 ==> (c == (i * (i - 1) / 2)) ==> (i >= 1)); loop invariant (i < 1000 ==> (c == (i * (i - 1) / 2)) ==> (i <= 999)); loop invariant (i >= 1000 ==> (c == (1000 * (1000 - 1) / 2)) ==> (i == 1000)); loop invariant (i >= 1000 ==> (c == (1000 * (1000 - 1) / 2)) ==> (i == 1000)); loop invariant (i >= 1000 ==> (c == (1000 * (1000 - 1) / 2)) ==> (i == 1000)); loop invariant (i >= 1000 ==> (c == (1000 * (1000 - 1) / 2)) ==> (i == 1000)); loop invariant (i >= 1000 ==> (c == (1000 * (1000 - 1) / 2)) ==> (i == 1000)); loop invariant (i >= 1000 ==> (c == (1000 * (1000 - 1) / 2)) ==> (i == 1000)); loop invariant (i >= 1000 ==> (c == (1000 * (1000 - 1) / 2)) ==> (i == 1000)); loop invariant (i >= 1000 ==> (c == (1000 * (1000 - 1) / 2)) ==> (i == 1000)); loop invariant (i >= 1000 ==> (c == (1000 * (1000 - 1) / 2)) ==> (i == 1000)); loop invariant (i >= 1000 ==> (c == (1000 * (1000 - 1) / 2)) ==> (i == 1000)); loop invariant (i >= 1000 ==> (c == (1000 * (1000 - 1) / 2)) ==> (i == 1000)); loop invariant (i >= 1000 ==> (c == (1000 * (1000 - 1) / 2)) ==> (i == 1000)); loop invariant (i >= 1000 ==> (c == (1000 * (1000 - 1) / 2)) ==> (i == 1000)); loop invariant (i >= 1000 ==> (c == (1000 * (1000 - 1) / 2)) ==> (i == 1000)); loop invariant (i >= 1000 ==> (c == (1000 * (1000 - 1) / 2)) ==> (i == 1000)); loop invariant (i >= 1000 ==> (c == (1000 * (1000 - 1) / 2)) ==> (i == 1000)); loop invariant (i >= 1000 ==> (c == (1000 * (1000 - 1) / 2)) ==> (i == 1000)); loop invariant (i >= 1000 ==> (c == (1000 * (1000 - 1) / 2)) ==> (i == 1000)) is partially proven to be inductive.\nloop invariant 0 <= c <= i * (i - 1) / 2 is partially proven to be inductive.\nloop invariant c + i <= 1000 * (1000 - 1) / 2 is partially proven to be inductive.\nloop invariant i < 1000 is partially proven to be inductive.\nloop invariant c == (i * (i - 1)) / 2 is partially proven to be inductive.\nloop invariant 0 <= c <= (1000 * (1000 + 1) / 2) is partially proven to be inductive.\nloop invariant c == (i * (i + 1) / 2) is partially proven to be inductive.\nloop invariant i == 1000 is partially proven to be inductive.\nloop invariant c == 500500 is partially proven to be inductive.\nloop invariant i >= c / 1000 is partially proven to be inductive.\nloop invariant c >= (i * (i - 1) / 2) is partially proven to be inductive.\nloop invariant i >= 0 is partially proven to be inductive.\nloop invariant c <= (i * (i + 1) / 2) is partially proven to be inductive.\nloop invariant c <= (999 * 1000) / 2 is partially proven to be inductive.\nloop invariant c <= (i * (i + 1)) / 2 is partially proven to be inductive.\nloop invariant c >= (i * (i - 1)) / 2 + (i * (i + 1)) / 2 is partially proven to be inductive.\nloop invariant c <= (i * (i - 1)) / 2 + (i * (i + 1)) / 2 is partially proven to be inductive.\nloop invariant c >= (i * (i - 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 is partially proven to be inductive.\nloop invariant c <= (i * (i - 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 is partially proven to be inductive.\nloop invariant c >= (i * (i - 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 is partially proven to be inductive.\nloop invariant c <= (i * (i - 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 is partially proven to be inductive.\nloop invariant c >= (i * (i - 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 is partially proven to be inductive.\nloop invariant c <= (i * (i - 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 is partially proven to be inductive.\nloop invariant c >= (i * (i - 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 is partially proven to be inductive.\nloop invariant c <= (i * (i - 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 is partially proven to be inductive.\nloop invariant c >= (i * (i - 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 is partially proven to be inductive.\nloop invariant c <= (i * (i - 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 is partially proven to be inductive.\nloop invariant c >= (i * (i - 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 is partially proven to be inductive.\nloop invariant c <= (i * (i - 1) / 2) is partially proven to be inductive.\nloop invariant 0 <= c <= (i * (i - 1)) / 2 is partially proven to be inductive.\nloop invariant c == (i * (i - 1)) / 2 ==> (c >= 0) is partially proven to be inductive.\nloop invariant i == 1000 ==> (c >= 0) is partially proven to be inductive.\nloop invariant c <= (1000 * (1000 - 1) / 2) is partially proven to be inductive.\nloop invariant c == i * (i - 1) / 2 is partially proven to be inductive.\nloop invariant 0 <= i <= 1000; loop invariant c >= 0; loop invariant c <= (i * (i + 1) / 2) is partially proven to be inductive.\nAssertion c >= 0: Partially proven",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n\n  int i, c;\n  i = 0;\n  c = 0;\n  /*@\nloop invariant i1: 0 <= i <= 1000;\nloop invariant i2: c == (i * (i - 1) / 2);\nloop invariant i3: i <= 1000;\nloop invariant i4: c >= 0;\nloop invariant i5: c <= i * (i - 1) / 2;\nloop invariant i6: c >= i * (i - 1) / 2 - 1000 * (1000 - i);\nloop invariant i7: c <= i * (i - 1) / 2 + 1000 * (1000 - i);\nloop invariant i8: c >= 0 ==> i >= 0;\nloop invariant i9: c <= i * (i - 1) / 2 ==> i >= 0;\nloop invariant i10: c >= i * (i - 1) / 2 - 1000 * (1000 - i) ==> i >= 0;\nloop invariant i11: c <= i * (i - 1) / 2 + 1000 * (1000 - i) ==> i >= 0;\nloop invariant i12: c >= 0 ==> i <= 1000;\nloop invariant i13: c <= i * (i - 1) / 2 ==> i <= 1000;\nloop invariant i14: c >= i * (i - 1) / 2 - 1000 * (1000 - i) ==> i <= 1000;\nloop invariant i15: c <= i * (i - 1) / 2 + 1000 * (1000 - i) ==> i <= 1000;\nloop invariant i16: i >= 0 ==> i <= 1000;\nloop invariant i17: i <= 1000 ==> i >= 0;\nloop invariant i18: c >= 0 ==> c <= i * (i - 1) / 2;\nloop invariant i19: c <= i * (i - 1) / 2 ==> c >= 0;\nloop invariant i20: c >= 0 ==> c <= i * (i - 1) / 2 - 1000 * (1000 - i);\nloop invariant i21: c <= i * (i - 1) / 2 - 1000 * (1000 - i) ==> c >= 0;\nloop invariant i22: c >= 0 ==> c <= i * (i - 1) / 2 + 1000 * (1000 - i);\nloop invariant i23: c <= i * (i - 1) / 2 + 1000 * (1000 - i) ==> c >= 0;\nloop invariant i24: c >= 0 ==> c >= i * (i - 1) / 2 - 1000 * (1000 - i);\nloop invariant i25: c >= i * (i - 1) / 2 - 1000 * (1000 - i) ==> c >= 0;\nloop invariant i26: c >= 0 ==> c >= i * (i - 1) / 2 + 1000 * (1000 - i);\nloop invariant i27: c >= i * (i - 1) / 2 + 1000 * (1000 - i) ==> c >= 0;\nloop invariant i28: c >= (i * (i - 1)) / 2;\nloop invariant i29: 0 <= c <= (i * (i + 1) / 2);\nloop invariant i30: i >= c / i;\nloop invariant i31: i >= c / (i + 1);\nloop invariant i32: i >= c / (i + 2);\nloop invariant i33: i >= c / (i + 3);\nloop invariant i34: i >= c / (i + 4);\nloop invariant i35: i >= c / (i + 5);\nloop invariant i36: i >= c / (i + 6);\nloop invariant i37: i >= c / (i + 7);\nloop invariant i38: i >= c / (i + 8);\nloop invariant i39: i >= c / (i + 9);\nloop invariant i40: i >= c / (i + 10);\nloop invariant i41: i >= c / (i + 11);\nloop invariant i42: i >= c / (i + 12);\nloop invariant i43: i >= c / (i + 13);\nloop invariant i44: i >= c / (i + 14);\nloop invariant i45: i >= c / (i + 15);\nloop invariant i46: i >= c / (i + 16);\nloop invariant i47: i >= c / (i + 17);\nloop invariant i48: i >= c / (i + 18);\nloop invariant i49: i >= c / (i + 19);\nloop invariant i50: i >= c / (i + 20);\nloop invariant i51: i >= c / (i + 21);\nloop invariant i52: i >= c / (i + 22);\nloop invariant i53: i >= c / (i + 23);\nloop invariant i54: i >= c / (i + 24);\nloop invariant i55: i >= c / (i + 25);\nloop invariant i56: i >= c / (i + 26);\nloop invariant i57: i >= c / (i + 27);\nloop invariant i58: i >= c / (i + 28);\nloop invariant i59: i >= c / (i + 29);\nloop invariant i60: i >= c / (i + 30);\nloop invariant i61: i >= c / (i + 31);\nloop invariant i62: i >= c / (i + 32);\nloop invariant i63: i >= c / (i + 33);\nloop invariant i64: i >= c / (i + 34);\nloop invariant i65: i >= c / (i + 35);\nloop invariant i66: i >= c / (i + 36);\nloop invariant i67: i >= c / (i + 37);\nloop invariant i68: i >= c / (i + 38);\nloop invariant i69: i >= c / (i + 39);\nloop invariant i70: i >= c / (i + 40);\nloop invariant i71: i >= c / (i + 41);\nloop invariant i72: i >= c / (i + 42);\nloop invariant i73: i >= c / (i + 43);\nloop invariant i74: i >= c / (i + 44);\nloop invariant i75: i >= c / (i + 45);\nloop invariant i76: i >= c / (i + 46);\nloop invariant i77: i >= c / (i + 47);\nloop invariant i78: i >= c / (i + 48);\nloop invariant i79: i >= c / (i + 49);\nloop invariant i80: i >= c / (i + 50);\nloop invariant i81: i >= c / (i + 51);\nloop invariant i82: i >= c / (i + 52);\nloop invariant i83: i >= c / (i + 53);\nloop invariant i84: i >= c / (i + 54);\nloop invariant i85: i >= c / (i + 55);\nloop invariant i86: i >= c / (i + 56);\nloop invariant i87: 0 <= i; loop invariant i <= 1000; loop invariant c >= 0; loop invariant c <= (i * (i - 1) / 2); loop invariant (i * (i - 1) / 2) <= c; loop invariant (c >= (i * (i - 1) / 2) ==> (c == (i * (i - 1) / 2))); loop invariant (i < 1000 ==> (c == (i * (i - 1) / 2))); loop invariant (i >= 1000 ==> (c == (1000 * (1000 - 1) / 2))); loop invariant (i < 1000 ==> (c == (i * (i - 1) / 2)) ==> (i >= 1)); loop invariant (i < 1000 ==> (c == (i * (i - 1) / 2)) ==> (i <= 999)); loop invariant (i >= 1000 ==> (c == (1000 * (1000 - 1) / 2)) ==> (i == 1000)); loop invariant (i >= 1000 ==> (c == (1000 * (1000 - 1) / 2)) ==> (i == 1000)); loop invariant (i >= 1000 ==> (c == (1000 * (1000 - 1) / 2)) ==> (i == 1000)); loop invariant (i >= 1000 ==> (c == (1000 * (1000 - 1) / 2)) ==> (i == 1000)); loop invariant (i >= 1000 ==> (c == (1000 * (1000 - 1) / 2)) ==> (i == 1000)); loop invariant (i >= 1000 ==> (c == (1000 * (1000 - 1) / 2)) ==> (i == 1000)); loop invariant (i >= 1000 ==> (c == (1000 * (1000 - 1) / 2)) ==> (i == 1000)); loop invariant (i >= 1000 ==> (c == (1000 * (1000 - 1) / 2)) ==> (i == 1000)); loop invariant (i >= 1000 ==> (c == (1000 * (1000 - 1) / 2)) ==> (i == 1000)); loop invariant (i >= 1000 ==> (c == (1000 * (1000 - 1) / 2)) ==> (i == 1000)); loop invariant (i >= 1000 ==> (c == (1000 * (1000 - 1) / 2)) ==> (i == 1000)); loop invariant (i >= 1000 ==> (c == (1000 * (1000 - 1) / 2)) ==> (i == 1000)); loop invariant (i >= 1000 ==> (c == (1000 * (1000 - 1) / 2)) ==> (i == 1000)); loop invariant (i >= 1000 ==> (c == (1000 * (1000 - 1) / 2)) ==> (i == 1000)); loop invariant (i >= 1000 ==> (c == (1000 * (1000 - 1) / 2)) ==> (i == 1000)); loop invariant (i >= 1000 ==> (c == (1000 * (1000 - 1) / 2)) ==> (i == 1000)); loop invariant (i >= 1000 ==> (c == (1000 * (1000 - 1) / 2)) ==> (i == 1000)); loop invariant (i >= 1000 ==> (c == (1000 * (1000 - 1) / 2)) ==> (i == 1000));\nloop invariant i88: 0 <= c <= i * (i - 1) / 2;\nloop invariant i89: c + i <= 1000 * (1000 - 1) / 2;\nloop invariant i90: i < 1000;\nloop invariant i91: c == (i * (i - 1)) / 2;\nloop invariant i92: 0 <= c <= (1000 * (1000 + 1) / 2);\nloop invariant i93: c == (i * (i + 1) / 2);\nloop invariant i94: i == 1000;\nloop invariant i95: c == 500500;\nloop invariant i96: i >= c / 1000;\nloop invariant i97: c >= (i * (i - 1) / 2);\nloop invariant i98: i >= 0;\nloop invariant i99: c <= (i * (i + 1) / 2);\nloop invariant i100: c <= (999 * 1000) / 2;\nloop invariant i101: c <= (i * (i + 1)) / 2;\nloop invariant i102: c >= (i * (i - 1)) / 2 + (i * (i + 1)) / 2;\nloop invariant i103: c <= (i * (i - 1)) / 2 + (i * (i + 1)) / 2;\nloop invariant i104: c >= (i * (i - 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2;\nloop invariant i105: c <= (i * (i - 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2;\nloop invariant i106: c >= (i * (i - 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2;\nloop invariant i107: c <= (i * (i - 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2;\nloop invariant i108: c >= (i * (i - 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2;\nloop invariant i109: c <= (i * (i - 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2;\nloop invariant i110: c >= (i * (i - 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2;\nloop invariant i111: c <= (i * (i - 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2;\nloop invariant i112: c >= (i * (i - 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2;\nloop invariant i113: c <= (i * (i - 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2;\nloop invariant i114: c >= (i * (i - 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2;\nloop invariant i115: c <= (i * (i - 1) / 2);\nloop invariant i116: 0 <= c <= (i * (i - 1)) / 2;\nloop invariant i117: c == (i * (i - 1)) / 2 ==> (c >= 0);\nloop invariant i118: i == 1000 ==> (c >= 0);\nloop invariant i119: c <= (1000 * (1000 - 1) / 2);\nloop invariant i120: c == i * (i - 1) / 2;\nloop invariant i121: 0 <= i <= 1000; loop invariant c >= 0; loop invariant c <= (i * (i + 1) / 2);\n*/\nwhile (i < 1000) {\n    c = c + i;\n    i = i + 1;\n  }\n\n  {;\n//@ assert(c>=0);\n}\n\n}",
        "combined_annotation_num_solver_calls": 5,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n\n  int i, c;\n  i = 0;\n  c = 0;\n  /*@\nloop invariant i1: 0 <= i <= 1000;\nloop invariant i2: c == (i * (i - 1) / 2);\nloop invariant i3: i <= 1000;\nloop invariant i4: c >= 0;\nloop invariant i5: c <= i * (i - 1) / 2;\nloop invariant i6: c >= i * (i - 1) / 2 - 1000 * (1000 - i);\nloop invariant i7: c <= i * (i - 1) / 2 + 1000 * (1000 - i);\nloop invariant i8: c >= 0 ==> i >= 0;\nloop invariant i9: c <= i * (i - 1) / 2 ==> i >= 0;\nloop invariant i10: c >= i * (i - 1) / 2 - 1000 * (1000 - i) ==> i >= 0;\nloop invariant i11: c <= i * (i - 1) / 2 + 1000 * (1000 - i) ==> i >= 0;\nloop invariant i12: c >= 0 ==> i <= 1000;\nloop invariant i13: c <= i * (i - 1) / 2 ==> i <= 1000;\nloop invariant i14: c >= i * (i - 1) / 2 - 1000 * (1000 - i) ==> i <= 1000;\nloop invariant i15: c <= i * (i - 1) / 2 + 1000 * (1000 - i) ==> i <= 1000;\nloop invariant i16: i >= 0 ==> i <= 1000;\nloop invariant i17: i <= 1000 ==> i >= 0;\nloop invariant i18: c >= 0 ==> c <= i * (i - 1) / 2;\nloop invariant i19: c <= i * (i - 1) / 2 ==> c >= 0;\n\nloop invariant i21: c <= i * (i - 1) / 2 - 1000 * (1000 - i) ==> c >= 0;\nloop invariant i22: c >= 0 ==> c <= i * (i - 1) / 2 + 1000 * (1000 - i);\nloop invariant i23: c <= i * (i - 1) / 2 + 1000 * (1000 - i) ==> c >= 0;\nloop invariant i24: c >= 0 ==> c >= i * (i - 1) / 2 - 1000 * (1000 - i);\nloop invariant i25: c >= i * (i - 1) / 2 - 1000 * (1000 - i) ==> c >= 0;\n\nloop invariant i27: c >= i * (i - 1) / 2 + 1000 * (1000 - i) ==> c >= 0;\nloop invariant i28: c >= (i * (i - 1)) / 2;\nloop invariant i29: 0 <= c <= (i * (i + 1) / 2);\n\nloop invariant i31: i >= c / (i + 1);\nloop invariant i32: i >= c / (i + 2);\nloop invariant i33: i >= c / (i + 3);\nloop invariant i34: i >= c / (i + 4);\nloop invariant i35: i >= c / (i + 5);\nloop invariant i36: i >= c / (i + 6);\nloop invariant i37: i >= c / (i + 7);\nloop invariant i38: i >= c / (i + 8);\nloop invariant i39: i >= c / (i + 9);\nloop invariant i40: i >= c / (i + 10);\nloop invariant i41: i >= c / (i + 11);\nloop invariant i42: i >= c / (i + 12);\nloop invariant i43: i >= c / (i + 13);\nloop invariant i44: i >= c / (i + 14);\nloop invariant i45: i >= c / (i + 15);\nloop invariant i46: i >= c / (i + 16);\nloop invariant i47: i >= c / (i + 17);\nloop invariant i48: i >= c / (i + 18);\nloop invariant i49: i >= c / (i + 19);\nloop invariant i50: i >= c / (i + 20);\nloop invariant i51: i >= c / (i + 21);\nloop invariant i52: i >= c / (i + 22);\nloop invariant i53: i >= c / (i + 23);\nloop invariant i54: i >= c / (i + 24);\nloop invariant i55: i >= c / (i + 25);\nloop invariant i56: i >= c / (i + 26);\nloop invariant i57: i >= c / (i + 27);\nloop invariant i58: i >= c / (i + 28);\nloop invariant i59: i >= c / (i + 29);\nloop invariant i60: i >= c / (i + 30);\nloop invariant i61: i >= c / (i + 31);\nloop invariant i62: i >= c / (i + 32);\nloop invariant i63: i >= c / (i + 33);\nloop invariant i64: i >= c / (i + 34);\nloop invariant i65: i >= c / (i + 35);\nloop invariant i66: i >= c / (i + 36);\nloop invariant i67: i >= c / (i + 37);\nloop invariant i68: i >= c / (i + 38);\nloop invariant i69: i >= c / (i + 39);\nloop invariant i70: i >= c / (i + 40);\nloop invariant i71: i >= c / (i + 41);\nloop invariant i72: i >= c / (i + 42);\nloop invariant i73: i >= c / (i + 43);\nloop invariant i74: i >= c / (i + 44);\nloop invariant i75: i >= c / (i + 45);\nloop invariant i76: i >= c / (i + 46);\nloop invariant i77: i >= c / (i + 47);\nloop invariant i78: i >= c / (i + 48);\nloop invariant i79: i >= c / (i + 49);\nloop invariant i80: i >= c / (i + 50);\nloop invariant i81: i >= c / (i + 51);\nloop invariant i82: i >= c / (i + 52);\nloop invariant i83: i >= c / (i + 53);\nloop invariant i84: i >= c / (i + 54);\nloop invariant i85: i >= c / (i + 55);\nloop invariant i86: i >= c / (i + 56);\nloop invariant i87: 0 <= i; loop invariant i <= 1000; loop invariant c >= 0; loop invariant c <= (i * (i - 1) / 2); loop invariant (i * (i - 1) / 2) <= c; loop invariant (c >= (i * (i - 1) / 2) ==> (c == (i * (i - 1) / 2))); loop invariant (i < 1000 ==> (c == (i * (i - 1) / 2))); loop invariant (i >= 1000 ==> (c == (1000 * (1000 - 1) / 2))); loop invariant (i < 1000 ==> (c == (i * (i - 1) / 2)) ==> (i >= 1)); loop invariant (i < 1000 ==> (c == (i * (i - 1) / 2)) ==> (i <= 999)); loop invariant (i >= 1000 ==> (c == (1000 * (1000 - 1) / 2)) ==> (i == 1000)); loop invariant (i >= 1000 ==> (c == (1000 * (1000 - 1) / 2)) ==> (i == 1000)); loop invariant (i >= 1000 ==> (c == (1000 * (1000 - 1) / 2)) ==> (i == 1000)); loop invariant (i >= 1000 ==> (c == (1000 * (1000 - 1) / 2)) ==> (i == 1000)); loop invariant (i >= 1000 ==> (c == (1000 * (1000 - 1) / 2)) ==> (i == 1000)); loop invariant (i >= 1000 ==> (c == (1000 * (1000 - 1) / 2)) ==> (i == 1000)); loop invariant (i >= 1000 ==> (c == (1000 * (1000 - 1) / 2)) ==> (i == 1000)); loop invariant (i >= 1000 ==> (c == (1000 * (1000 - 1) / 2)) ==> (i == 1000)); loop invariant (i >= 1000 ==> (c == (1000 * (1000 - 1) / 2)) ==> (i == 1000)); loop invariant (i >= 1000 ==> (c == (1000 * (1000 - 1) / 2)) ==> (i == 1000)); loop invariant (i >= 1000 ==> (c == (1000 * (1000 - 1) / 2)) ==> (i == 1000)); loop invariant (i >= 1000 ==> (c == (1000 * (1000 - 1) / 2)) ==> (i == 1000)); loop invariant (i >= 1000 ==> (c == (1000 * (1000 - 1) / 2)) ==> (i == 1000)); loop invariant (i >= 1000 ==> (c == (1000 * (1000 - 1) / 2)) ==> (i == 1000)); loop invariant (i >= 1000 ==> (c == (1000 * (1000 - 1) / 2)) ==> (i == 1000)); loop invariant (i >= 1000 ==> (c == (1000 * (1000 - 1) / 2)) ==> (i == 1000)); loop invariant (i >= 1000 ==> (c == (1000 * (1000 - 1) / 2)) ==> (i == 1000)); loop invariant (i >= 1000 ==> (c == (1000 * (1000 - 1) / 2)) ==> (i == 1000));\nloop invariant i88: 0 <= c <= i * (i - 1) / 2;\nloop invariant i89: c + i <= 1000 * (1000 - 1) / 2;\nloop invariant i90: i < 1000;\nloop invariant i91: c == (i * (i - 1)) / 2;\nloop invariant i92: 0 <= c <= (1000 * (1000 + 1) / 2);\nloop invariant i93: c == (i * (i + 1) / 2);\nloop invariant i94: i == 1000;\nloop invariant i95: c == 500500;\nloop invariant i96: i >= c / 1000;\nloop invariant i97: c >= (i * (i - 1) / 2);\nloop invariant i98: i >= 0;\nloop invariant i99: c <= (i * (i + 1) / 2);\nloop invariant i100: c <= (999 * 1000) / 2;\nloop invariant i101: c <= (i * (i + 1)) / 2;\nloop invariant i102: c >= (i * (i - 1)) / 2 + (i * (i + 1)) / 2;\nloop invariant i103: c <= (i * (i - 1)) / 2 + (i * (i + 1)) / 2;\nloop invariant i104: c >= (i * (i - 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2;\nloop invariant i105: c <= (i * (i - 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2;\nloop invariant i106: c >= (i * (i - 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2;\nloop invariant i107: c <= (i * (i - 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2;\nloop invariant i108: c >= (i * (i - 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2;\nloop invariant i109: c <= (i * (i - 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2;\nloop invariant i110: c >= (i * (i - 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2;\nloop invariant i111: c <= (i * (i - 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2;\nloop invariant i112: c >= (i * (i - 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2;\nloop invariant i113: c <= (i * (i - 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2;\nloop invariant i114: c >= (i * (i - 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2 + (i * (i + 1)) / 2;\nloop invariant i115: c <= (i * (i - 1) / 2);\nloop invariant i116: 0 <= c <= (i * (i - 1)) / 2;\nloop invariant i117: c == (i * (i - 1)) / 2 ==> (c >= 0);\nloop invariant i118: i == 1000 ==> (c >= 0);\nloop invariant i119: c <= (1000 * (1000 - 1) / 2);\nloop invariant i120: c == i * (i - 1) / 2;\nloop invariant i121: 0 <= i <= 1000; loop invariant c >= 0; loop invariant c <= (i * (i + 1) / 2);\n*/\nwhile (i < 1000) {\n    c = c + i;\n    i = i + 1;\n  }\n\n  {;\n//@ assert(c>=0);\n}\n\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/11.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/15.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/16.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/18.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/20.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/23.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/30.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/split.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/13.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/14.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/19.c"
        ],
        "skipped": [],
        "total": 116,
        "success_count": 98,
        "failure_count": 18,
        "success_rate": 0.8448275862068966
    }
}