{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main()\n{\n  int i,x,y,NONDET,z;\n\n  x=0;\n  z=1;\n  y = unknown_uint();\n\n  assume( y>=0 );\n  i = 0;\n  while (i < 10) {\n    if (NONDET > 0) {\n      x = x;\n    } else {\n      x++;\n    }\n\n    {;\n//@ assert(!( y < 0 ));\n}\n\n    i++;\n  }\n  {;\n//@ assert(!( z<0 ));\n}\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= x <= 9;\nloop invariant 0 <= i <= 10;\nloop invariant 0 <= y <= 100000;\nloop invariant x >= 0;\nloop invariant i >= 0;\nloop invariant y >= 0;\nloop invariant z >= 1;\nloop invariant NONDET >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant 0 <= x <= z;\nloop invariant y >= 0;\nloop invariant z = 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant 0 <= x <= 10;\nloop invariant y >= 0;\nloop invariant z > 0;\nloop invariant i == 0 ==> x == 0;\nloop invariant i == 10 ==> x <= 1;\nloop invariant i == 10 ==> x >= 0;\nloop invariant i == 10 ==> y >= 0;\nloop invariant i == 10 ==> z > 0;\nloop invariant i < 10 ==> x == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant x is non-negative;\nloop invariant z is non-negative;\nloop invariant y is non-negative;\nloop invariant y >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y < 100000;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant 0 <= x <= 10;\nloop invariant 0 <= y <= 10;\nloop invariant i == 0 ==> x == 0;\nloop invariant i == 0 ==> y > 0;\nloop invariant i > 0 ==> x > 0;\nloop invariant i > 0 ==> y > 0;\nloop invariant i > 0 ==> x <= i + x;\nloop invariant i > 0 ==> y <= i + y;\nloop invariant i > 0 ==> x >= i + x;\nloop invariant i > 0 ==> y >= i + y;\nloop invariant i > 0 ==> x >= y;\nloop invariant i > 0 ==> x >= y;\nloop invariant i > 0 ==> i + x >= y;\nloop invariant i > 0 ==> i + y >= x;\nloop invariant i > 0 ==> x >= y;\nloop invariant i > 0 ==> y >= x;\nloop invariant i > 0 ==> x >= i + x;\nloop invariant i > 0 ==> y >= i + y;\nloop invariant i > 0 ==> x >= y;\nloop invariant i > 0 ==> y >= x;\nloop invariant i > 0 ==> i + x >= y;\nloop invariant i > 0 ==> i + y >= x;\nloop invariant i > 0 ==> x >= y;\nloop invariant i > 0 ==> y >= x;\nloop invariant i > 0 ==> i + x >= y;\nloop invariant i > 0 ==> i + y >= x;\nloop invariant i > 0 ==> x >= y;\nloop invariant i > 0 ==> y >= x;\nloop invariant i > 0 ==> i + x >= y;\nloop invariant i > 0 ==> i + y >= x;\nloop invariant i > 0 ==> x >= y;\nloop invariant i > 0 ==> y >= x;\nloop invariant i > 0 ==> i + x >= y;\nloop invariant i > 0 ==> i + y >= x;\nloop invariant i > 0 ==> x >= y;\nloop invariant i > 0 ==> y >= x;\nloop invariant i > 0 ==> i + x >= y;\nloop invariant i > 0 ==> i + y >= x;\nloop invariant i > 0 ==> x >= y;\nloop invariant i > 0 ==> y >= x;\nloop invariant i > 0 ==> i + x >= y;\nloop invariant i > 0 ==> i + y >= x;\nloop invariant i > 0 ==> x >= y;\nloop invariant i > 0 ==> y >= x;\nloop invariant i > 0 ==> i + x >= y;\nloop invariant i > 0 ==> i + y >= x;\nloop invariant i > 0 ==> x >= y;\nloop invariant i > 0 ==> y >= x;\nloop invariant i > 0 ==> i + x >= y;\nloop invariant i > 0 ==> i + y >= x;\nloop invariant i > 0 ==> x >= y;\nloop invariant i > 0 ==> y >= x;\nloop invariant i > 0 ==> i + x >= y;\nloop invariant i > 0 ==> i + y >= x;\nloop invariant i > 0 ==> x >= y;\nloop invariant i > 0 ==> y >= x;\nloop invariant i > 0 ==> i + x >= y;\nloop invariant i > 0 ==> i + y >= x;\nloop invariant i > 0 ==> x >= y;\nloop invariant i > 0 ==> y >= x;\nloop invariant i > 0 ==> i + x >= y;\nloop invariant i > 0 ==> i + y >= x;\nloop invariant i > 0 ==> x >= y;\nloop invariant i > 0 ==> y >= x;\nloop invariant i > 0 ==> i + x >= y;\nloop invariant i > 0 ==> i + y >= x;\nloop invariant i > 0 ==> x >= y;\nloop invariant i > 0 ==> y >= x;\nloop invariant i > 0 ==> i + x >= y;\nloop invariant i > 0 ==> i + y >= x;\nloop invariant i > 0 ==> x >= y;\nloop invariant i > 0 ==> y >= x;\nloop invariant i > 0 ==> i + x >= y;\nloop invariant i > 0 ==> i + y >= x;\nloop invariant i > 0 ==> x >= y;\nloop invariant i > 0 ==> y >= x;\nloop invariant i > 0 ==> i + x >= y;\nloop invariant i > 0 ==> i + y >= x;\nloop invariant i > 0 ==> x >= y;\nloop invariant i > 0 ==> y >= x;\nloop invariant i > 0 ==> i + x >= y;\nloop invariant i > 0 ==> i + y >= x;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant x >= 0;\nloop invariant i >= 0;\nloop invariant i <= 10;\nloop invariant x >= i;\nloop invariant x <= i;\nloop invariant x <= i + 1;\nloop invariant x >= i + 1;\nloop invariant x <= i + 1;\nloop invariant x >= i + 1;\nloop invariant x <= i + 1;\nloop invariant x >= i + 1;\nloop invariant x <= i + 1;\nloop invariant x >= i + 1;\nloop invariant i < 10;\nloop invariant i > 0;\nloop invariant i >= 0;\nloop invariant i <= 10;\nloop invariant x >= 0;\nloop invariant x <= i + 1;\nloop invariant x >= i + 1;\nloop invariant x <= i + 1;\nloop invariant x >= i + 1;\nloop invariant x <= i + 1;\nloop invariant x >= i + 1;\nloop invariant x <= i + 1;\nloop invariant x >= i + 1;\nloop invariant x <= i + 1;\nloop invariant x >= i + 1;\nloop invariant x <= i + 1;\nloop invariant x >= i + 1;\nloop invariant i < 10;\nloop invariant i > 0;\nloop invariant i >= 0;\nloop invariant i <= 10;\nloop invariant x >= 0;\nloop invariant x <= i + 1;\nloop invariant x >= i + 1;\nloop invariant x <= i + 1;\nloop invariant x >= i + 1;\nloop invariant x <= i + 1;\nloop invariant x >= i + 1;\nloop invariant x <= i + 1;\nloop invariant x >= i + 1;\nloop invariant x <= i + 1;\nloop invariant x >= i + 1;\nloop invariant x <= i + 1;\nloop invariant x >= i + 1;\nloop invariant i < 10;\nloop invariant i > 0;\nloop invariant i >= 0;\nloop invariant i <= 10;\nloop invariant x >= 0;\nloop invariant x <= i + 1;\nloop invariant x >= i + 1;\nloop invariant x <= i + 1;\nloop invariant x >= i + 1;\nloop invariant x <= i + 1;\nloop invariant x >= i + 1;\nloop invariant x <= i + 1;\nloop invariant x >= i + 1;\nloop invariant x <= i + 1;\nloop invariant x >= i + 1;\nloop invariant x <= i + 1;\nloop invariant x >= i + 1;\nloop invariant i < 10;\nloop invariant i > 0;\nloop invariant i >= 0;\nloop invariant i <= 10;\nloop invariant x >= 0;\nloop invariant x <= i + 1;\nloop invariant x >= i + 1;\nloop invariant x <= i + 1;\nloop invariant x >= i + 1;\nloop invariant x <= i + 1;\nloop invariant x >= i + 1;\nloop invariant x <= i + 1;\nloop invariant x >= i + 1;\nloop invariant x <= i + 1;\nloop invariant x >= i + 1;\nloop invariant x <= i + 1;\nloop invariant x >= i + 1;\nloop invariant i < 10;\nloop invariant i > 0;\nloop invariant i >= 0;\nloop invariant i <= 10;\nloop invariant x >= 0;\nloop invariant x <= i + 1;\nloop invariant x >= i + 1;\nloop invariant x <= i + 1;\nloop invariant x >= i + 1;\nloop invariant x <= i + 1;\nloop invariant x >= i + 1;\nloop invariant x <= i + 1;\nloop invariant x >= i + 1;\nloop invariant x <= i + 1;\nloop invariant x >= i + 1;\nloop invariant x <= i + 1;\nloop invariant x >= i + 1;\nloop invariant i < 10;\nloop invariant i > 0;\nloop invariant i >= 0;\nloop invariant i <= 10;\nloop invariant x >= 0;\nloop invariant x <= i + 1;\nloop invariant x >= i + 1;\nloop invariant x <= i + 1;\nloop invariant x >= i + 1;\nloop invariant x <= i + 1;\nloop invariant x >= i + 1;\nloop invariant x <= i + 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant 0 <= x <= 10;\nloop invariant 0 <= y <= 10;\nloop invariant z >= 0;\nloop invariant !( y < 0 );\nloop invariant !( z<0 );\nloop invariant !(NONDET > 0) || (x = x);\nloop invariant NONDET <= 0 || (x = x + 1);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000; loop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= 10;\nloop invariant 0 <= x <= i * 10;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant !(y < 0);\nloop invariant !(z < 0);\nloop invariant i >= 0;\nloop invariant i <= 10;\nloop invariant 0 <= x <= i * 10;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant !(y < 0);\nloop invariant !(z < 0);\nloop invariant i >= 0;\nloop invariant i <= 10;\nloop invariant 0 <= x <= i * 10;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant !(y < 0);\nloop invariant !(z < 0);\nloop invariant i >= 0;\nloop invariant i <= 10;\nloop invariant 0 <= x <= i * 10;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant !(y < 0);\nloop invariant !(z < 0);\nloop invariant i >= 0;\nloop invariant i <= 10;\nloop invariant 0 <= x <= i * 10;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant !(y < 0);\nloop invariant !(z < 0);\nloop invariant i >= 0;\nloop invariant i <= 10;\nloop invariant 0 <= x <= i * 10;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant !(y < 0);\nloop invariant !(z < 0);\nloop invariant i >= 0;\nloop invariant i <= 10;\nloop invariant 0 <= x <= i * 10;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant !(y < 0);\nloop invariant !(z < 0);\nloop invariant i >= 0;\nloop invariant i <= 10;\nloop invariant 0 <= x <= i * 10;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant !(y < 0);\nloop invariant !(z < 0);\nloop invariant i >= 0;\nloop invariant i <= 10;\nloop invariant 0 <= x <= i * 10;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant !(y < 0);\nloop invariant !(z < 0);\nloop invariant i >= 0;\nloop invariant i <= 10;\nloop invariant 0 <= x <= i * 10;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant !(y < 0);\nloop invariant !(z < 0);\nloop invariant i >= 0;\nloop invariant i <= 10;\nloop invariant 0 <= x <= i * 10;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant !(y < 0);\nloop invariant !(z < 0);\nloop invariant i >= 0;\nloop invariant i <= 10;\nloop invariant 0 <= x <= i * 10;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant !(y < 0);\nloop invariant !(z < 0);\nloop invariant i >= 0;\nloop invariant i <= 10;\nloop invariant 0 <= x <= i * 10;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant !(y < 0);\nloop invariant !(z < 0);\nloop invariant i >= 0;\nloop invariant i <= 10;\nloop invariant 0 <= x <= i * 10;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant !(y < 0);\nloop invariant !(z < 0);\nloop invariant i >= 0;\nloop invariant i <= 10;\nloop invariant 0 <= x <= i * 10;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant !(y < 0);\nloop invariant !(z < 0);\nloop invariant i >= 0;\nloop invariant i <= 10;\nloop invariant 0 <= x <= i * 10;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant !(y < 0);\nloop invariant !(z < 0);\nloop invariant i >= 0;\nloop invariant i <= 10;\nloop invariant 0 <= x <= i * 10;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant !(y < 0);\nloop invariant !(z < 0);\nloop invariant i >= 0;\nloop invariant i <= 10;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= unknown_uint();\nloop invariant 0 <= x <= unknown_uint();\nloop invariant 0 <= z <= unknown_uint();\nloop invariant 0 <= i <= 10;\nloop invariant i >= 0;\nloop invariant i <= 10;\nloop invariant x >= 0;\nloop invariant x <= unknown_uint();\nloop invariant y >= 0;\nloop invariant y <= unknown_uint();\nloop invariant z >= 0;\nloop invariant z <= unknown_uint();\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant z == 1;\nloop invariant (i >= 0 && i <= 10) ==> (y >= 0);\nloop invariant (i >= 0 && i <= 10) ==> (x >= 0);\nloop invariant (i >= 0 && i <= 10) ==> (z == 1);\nloop invariant (i < 10) ==> (NONDET > 0);\nloop invariant (i < 10) ==> (x == x);\nloop invariant (i < 10) ==> (x >= 0);\nloop invariant (i < 10) ==> (y >= 0);\nloop invariant (i < 10) ==> (z == 1);\nloop invariant (i == 10) ==> (NONDET > 0);\nloop invariant (i == 10) ==> (x == x);\nloop invariant (i == 10) ==> (x >= 0);\nloop invariant (i == 10) ==> (y >= 0);\nloop invariant (i == 10) ==> (z == 1);\nloop invariant (i < 10) ==> (x >= 0);\nloop invariant (i < 10) ==> (y >= 0);\nloop invariant (i < 10) ==> (z == 1);\nloop invariant (i == 10) ==> (x >= 0);\nloop invariant (i == 10) ==> (y >= 0);\nloop invariant (i == 10) ==> (z == 1);\nloop invariant (i < 10) ==> (x >= 0);\nloop invariant (i < 10) ==> (y >= 0);\nloop invariant (i < 10) ==> (z == 1);\nloop invariant (i == 10) ==> (x >= 0);\nloop invariant (i == 10) ==> (y >= 0);\nloop invariant (i == 10) ==> (z == 1);\nloop invariant (i < 10) ==> (x >= 0);\nloop invariant (i < 10) ==> (y >= 0);\nloop invariant (i < 10) ==> (z == 1);\nloop invariant (i == 10) ==> (x >= 0);\nloop invariant (i == 10) ==> (y >= 0);\nloop invariant (i == 10) ==> (z == 1);\nloop invariant (i < 10) ==> (x >= 0);\nloop invariant (i < 10) ==> (y >= 0);\nloop invariant (i < 10) ==> (z == 1);\nloop invariant (i == 10) ==> (x >= 0);\nloop invariant (i == 10) ==> (y >= 0);\nloop invariant (i == 10) ==> (z == 1);\nloop invariant (i < 10) ==> (x >= 0);\nloop invariant (i < 10) ==> (y >= 0);\nloop invariant (i < 10) ==> (z == 1);\nloop invariant (i == 10) ==> (x >= 0);\nloop invariant (i == 10) ==> (y >= 0);\nloop invariant (i == 10) ==> (z == 1);\nloop invariant (i < 10) ==> (x >= 0);\nloop invariant (i < 10) ==> (y >= 0);\nloop invariant (i < 10) ==> (z == 1);\nloop invariant (i == 10) ==> (x >= 0);\nloop invariant (i == 10) ==> (y >= 0);\nloop invariant (i == 10) ==> (z == 1);\nloop invariant (i < 10) ==> (x >= 0);\nloop invariant (i < 10) ==> (y >= 0);\nloop invariant (i < 10) ==> (z == 1);\nloop invariant (i == 10) ==> (x >= 0);\nloop invariant (i == 10) ==> (y >= 0);\nloop invariant (i == 10) ==> (z == 1);\nloop invariant (i < 10) ==> (x >= 0);\nloop invariant (i < 10) ==> (y >= 0);\nloop invariant (i < 10) ==> (z == 1);\nloop invariant (i == 10) ==> (x >= 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant y >= 0;\nloop invariant (x >= 0);\nloop invariant (x <= y);\nloop invariant (z = 1);\nloop invariant (i >= 0);\nloop invariant (i <= 10);\nloop invariant (i < 10 ==> (x == z));\nloop invariant (i == 10 ==> (x > z));\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant 0 <= x <= 10;\nloop invariant 0 <= y <= 100000;\nloop invariant 0 <= NONDET <= 10;\nloop invariant NONDET == 0 ==> x == 0;\nloop invariant NONDET == 1 ==> x == 1;\nloop invariant NONDET == 0 ==> i == 0;\nloop invariant NONDET == 1 ==> i == 1;\nloop invariant NONDET == 0 ==> y == 0;\nloop invariant NONDET == 1 ==> y == 1;\nloop invariant NONDET == 0 ==> z == 1;\nloop invariant NONDET == 1 ==> z == 1;\nloop invariant NONDET == 0 ==> i == 0;\nloop invariant NONDET == 1 ==> i == 1;\nloop invariant NONDET == 0 ==> x == 0;\nloop invariant NONDET == 1 ==> x == 1;\nloop invariant NONDET == 0 ==> y == 0;\nloop invariant NONDET == 1 ==> y == 1;\nloop invariant NONDET == 0 ==> z == 1;\nloop invariant NONDET == 1 ==> z == 1;\nloop invariant NONDET == 0 ==> i == 0;\nloop invariant NONDET == 1 ==> i == 1;\nloop invariant NONDET == 0 ==> x == 0;\nloop invariant NONDET == 1 ==> x == 1;\nloop invariant NONDET == 0 ==> y == 0;\nloop invariant NONDET == 1 ==> y == 1;\nloop invariant NONDET == 0 ==> z == 1;\nloop invariant NONDET == 1 ==> z == 1;\nloop invariant NONDET == 0 ==> i == 0;\nloop invariant NONDET == 1 ==> i == 1;\nloop invariant NONDET == 0 ==> x == 0;\nloop invariant NONDET == 1 ==> x == 1;\nloop invariant NONDET == 0 ==> y == 0;\nloop invariant NONDET == 1 ==> y == 1;\nloop invariant NONDET == 0 ==> z == 1;\nloop invariant NONDET == 1 ==> z == 1;\nloop invariant NONDET == 0 ==> i == 0;\nloop invariant NONDET == 1 ==> i == 1;\nloop invariant NONDET == 0 ==> x == 0;\nloop invariant NONDET == 1 ==> x == 1;\nloop invariant NONDET == 0 ==> y == 0;\nloop invariant NONDET == 1 ==> y == 1;\nloop invariant NONDET == 0 ==> z == 1;\nloop invariant NONDET == 1 ==> z == 1;\nloop invariant NONDET == 0 ==> i == 0;\nloop invariant NONDET == 1 ==> i == 1;\nloop invariant NONDET == 0 ==> x == 0;\nloop invariant NONDET == 1 ==> x == 1;\nloop invariant NONDET == 0 ==> y == 0;\nloop invariant NONDET == 1 ==> y == 1;\nloop invariant NONDET == 0 ==> z == 1;\nloop invariant NONDET == 1 ==> z == 1;\nloop invariant NONDET == 0 ==> i == 0;\nloop invariant NONDET == 1 ==> i == 1;\nloop invariant NONDET == 0 ==> x == 0;\nloop invariant NONDET == 1 ==> x == 1;\nloop invariant NONDET == 0 ==> y == 0;\nloop invariant NONDET == 1 ==> y == 1;\nloop invariant NONDET == 0 ==> z == 1;\nloop invariant NONDET == 1 ==> z == 1;\nloop invariant NONDET == 0 ==> i == 0;\nloop invariant NONDET == 1 ==> i == 1;\nloop invariant NONDET == 0 ==> x == 0;\nloop invariant NONDET == 1 ==> x == 1;\nloop invariant NONDET == 0 ==> y == 0;\nloop invariant NONDET == 1 ==> y == 1;\nloop invariant NONDET == 0 ==> z == 1;\nloop invariant NONDET == 1 ==> z == 1;\nloop invariant NONDET == 0 ==> i == 0;\nloop invariant NONDET == 1 ==> i == 1;\nloop invariant NONDET == 0 ==> x == 0;\nloop invariant NONDET == 1 ==> x == 1;\nloop invariant NONDET == 0 ==> y == 0;\nloop invariant NONDET == 1 ==> y == 1;\nloop invariant NONDET == 0 ==> z == 1;\nloop invariant NONDET == 1 ==> z == 1;\nloop invariant NONDET == 0 ==> i == 0;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 9;\nloop invariant 0 <= i <= 10;\nloop invariant 0 <= y <= 100000;\nloop invariant x >= 0;\nloop invariant i >= 0;\nloop invariant y >= 0;\nloop invariant z >= 1;\nloop invariant NONDET >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main()\n{\n  int i,x,y,NONDET,z;\n\n  x=0;\n  z=1;\n  y = unknown_uint();\n\n  assume( y>=0 );\n  i = 0;\n  /*@\n\nloop invariant i2: 0 <= i <= 10;\n\nloop invariant i4: x >= 0;\nloop invariant i5: i >= 0;\nloop invariant i6: y >= 0;\nloop invariant i7: z >= 1;\n\n*/\nwhile (i < 10) {\n    if (NONDET > 0) {\n      x = x;\n    } else {\n      x++;\n    }\n\n    {;\n//@ assert(!( y < 0 ));\n}\n\n    i++;\n  }\n  {;\n//@ assert(!( z<0 ));\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant 0 <= x <= z;\nloop invariant y >= 0;\nloop invariant z = 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main()\n{\n  int i,x,y,NONDET,z;\n\n  x=0;\n  z=1;\n  y = unknown_uint();\n\n  assume( y>=0 );\n  i = 0;\n  /*@\nloop invariant i1: 0 <= i <= 10;\n\nloop invariant i3: y >= 0;\n\n*/\nwhile (i < 10) {\n    if (NONDET > 0) {\n      x = x;\n    } else {\n      x++;\n    }\n\n    {;\n//@ assert(!( y < 0 ));\n}\n\n    i++;\n  }\n  {;\n//@ assert(!( z<0 ));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant 0 <= x <= 10;\nloop invariant y >= 0;\nloop invariant z > 0;\nloop invariant i == 0 ==> x == 0;\nloop invariant i == 10 ==> x <= 1;\nloop invariant i == 10 ==> x >= 0;\nloop invariant i == 10 ==> y >= 0;\nloop invariant i == 10 ==> z > 0;\nloop invariant i < 10 ==> x == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main()\n{\n  int i,x,y,NONDET,z;\n\n  x=0;\n  z=1;\n  y = unknown_uint();\n\n  assume( y>=0 );\n  i = 0;\n  /*@\nloop invariant i1: 0 <= i <= 10;\n\nloop invariant i3: y >= 0;\nloop invariant i4: z > 0;\nloop invariant i5: i == 0 ==> x == 0;\n\n\nloop invariant i8: i == 10 ==> y >= 0;\nloop invariant i9: i == 10 ==> z > 0;\n\n*/\nwhile (i < 10) {\n    if (NONDET > 0) {\n      x = x;\n    } else {\n      x++;\n    }\n\n    {;\n//@ assert(!( y < 0 ));\n}\n\n    i++;\n  }\n  {;\n//@ assert(!( z<0 ));\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant x is non-negative;\nloop invariant z is non-negative;\nloop invariant y is non-negative;\nloop invariant y >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main()\n{\n  int i,x,y,NONDET,z;\n\n  x=0;\n  z=1;\n  y = unknown_uint();\n\n  assume( y>=0 );\n  i = 0;\n  /*@\nloop invariant i1: 0 <= i <= 10;\n\n\n\nloop invariant i5: y >= 0;\n*/\nwhile (i < 10) {\n    if (NONDET > 0) {\n      x = x;\n    } else {\n      x++;\n    }\n\n    {;\n//@ assert(!( y < 0 ));\n}\n\n    i++;\n  }\n  {;\n//@ assert(!( z<0 ));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y < 100000;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main()\n{\n  int i,x,y,NONDET,z;\n\n  x=0;\n  z=1;\n  y = unknown_uint();\n\n  assume( y>=0 );\n  i = 0;\n  /*@\nloop invariant i1: 0 <= i <= 10;\nloop invariant i2: x >= 0;\nloop invariant i3: y >= 0;\n\n*/\nwhile (i < 10) {\n    if (NONDET > 0) {\n      x = x;\n    } else {\n      x++;\n    }\n\n    {;\n//@ assert(!( y < 0 ));\n}\n\n    i++;\n  }\n  {;\n//@ assert(!( z<0 ));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant 0 <= x <= 10;\nloop invariant 0 <= y <= 10;\nloop invariant i == 0 ==> x == 0;\nloop invariant i == 0 ==> y > 0;\nloop invariant i > 0 ==> x > 0;\nloop invariant i > 0 ==> y > 0;\nloop invariant i > 0 ==> x <= i + x;\nloop invariant i > 0 ==> y <= i + y;\nloop invariant i > 0 ==> x >= i + x;\nloop invariant i > 0 ==> y >= i + y;\nloop invariant i > 0 ==> x >= y;\nloop invariant i > 0 ==> x >= y;\nloop invariant i > 0 ==> i + x >= y;\nloop invariant i > 0 ==> i + y >= x;\nloop invariant i > 0 ==> x >= y;\nloop invariant i > 0 ==> y >= x;\nloop invariant i > 0 ==> x >= i + x;\nloop invariant i > 0 ==> y >= i + y;\nloop invariant i > 0 ==> x >= y;\nloop invariant i > 0 ==> y >= x;\nloop invariant i > 0 ==> i + x >= y;\nloop invariant i > 0 ==> i + y >= x;\nloop invariant i > 0 ==> x >= y;\nloop invariant i > 0 ==> y >= x;\nloop invariant i > 0 ==> i + x >= y;\nloop invariant i > 0 ==> i + y >= x;\nloop invariant i > 0 ==> x >= y;\nloop invariant i > 0 ==> y >= x;\nloop invariant i > 0 ==> i + x >= y;\nloop invariant i > 0 ==> i + y >= x;\nloop invariant i > 0 ==> x >= y;\nloop invariant i > 0 ==> y >= x;\nloop invariant i > 0 ==> i + x >= y;\nloop invariant i > 0 ==> i + y >= x;\nloop invariant i > 0 ==> x >= y;\nloop invariant i > 0 ==> y >= x;\nloop invariant i > 0 ==> i + x >= y;\nloop invariant i > 0 ==> i + y >= x;\nloop invariant i > 0 ==> x >= y;\nloop invariant i > 0 ==> y >= x;\nloop invariant i > 0 ==> i + x >= y;\nloop invariant i > 0 ==> i + y >= x;\nloop invariant i > 0 ==> x >= y;\nloop invariant i > 0 ==> y >= x;\nloop invariant i > 0 ==> i + x >= y;\nloop invariant i > 0 ==> i + y >= x;\nloop invariant i > 0 ==> x >= y;\nloop invariant i > 0 ==> y >= x;\nloop invariant i > 0 ==> i + x >= y;\nloop invariant i > 0 ==> i + y >= x;\nloop invariant i > 0 ==> x >= y;\nloop invariant i > 0 ==> y >= x;\nloop invariant i > 0 ==> i + x >= y;\nloop invariant i > 0 ==> i + y >= x;\nloop invariant i > 0 ==> x >= y;\nloop invariant i > 0 ==> y >= x;\nloop invariant i > 0 ==> i + x >= y;\nloop invariant i > 0 ==> i + y >= x;\nloop invariant i > 0 ==> x >= y;\nloop invariant i > 0 ==> y >= x;\nloop invariant i > 0 ==> i + x >= y;\nloop invariant i > 0 ==> i + y >= x;\nloop invariant i > 0 ==> x >= y;\nloop invariant i > 0 ==> y >= x;\nloop invariant i > 0 ==> i + x >= y;\nloop invariant i > 0 ==> i + y >= x;\nloop invariant i > 0 ==> x >= y;\nloop invariant i > 0 ==> y >= x;\nloop invariant i > 0 ==> i + x >= y;\nloop invariant i > 0 ==> i + y >= x;\nloop invariant i > 0 ==> x >= y;\nloop invariant i > 0 ==> y >= x;\nloop invariant i > 0 ==> i + x >= y;\nloop invariant i > 0 ==> i + y >= x;\nloop invariant i > 0 ==> x >= y;\nloop invariant i > 0 ==> y >= x;\nloop invariant i > 0 ==> i + x >= y;\nloop invariant i > 0 ==> i + y >= x;\nloop invariant i > 0 ==> x >= y;\nloop invariant i > 0 ==> y >= x;\nloop invariant i > 0 ==> i + x >= y;\nloop invariant i > 0 ==> i + y >= x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main()\n{\n  int i,x,y,NONDET,z;\n\n  x=0;\n  z=1;\n  y = unknown_uint();\n\n  assume( y>=0 );\n  i = 0;\n  /*@\nloop invariant i1: 0 <= i <= 10;\n\n\nloop invariant i4: i == 0 ==> x == 0;\n\n\n\nloop invariant i8: i > 0 ==> x <= i + x;\nloop invariant i9: i > 0 ==> y <= i + y;\n\n\n\n\nloop invariant i14: i > 0 ==> i + y >= x;\n\n*/\nwhile (i < 10) {\n    if (NONDET > 0) {\n      x = x;\n    } else {\n      x++;\n    }\n\n    {;\n//@ assert(!( y < 0 ));\n}\n\n    i++;\n  }\n  {;\n//@ assert(!( z<0 ));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant x >= 0;\nloop invariant i >= 0;\nloop invariant i <= 10;\nloop invariant x >= i;\nloop invariant x <= i;\nloop invariant x <= i + 1;\nloop invariant x >= i + 1;\nloop invariant x <= i + 1;\nloop invariant x >= i + 1;\nloop invariant x <= i + 1;\nloop invariant x >= i + 1;\nloop invariant x <= i + 1;\nloop invariant x >= i + 1;\nloop invariant i < 10;\nloop invariant i > 0;\nloop invariant i >= 0;\nloop invariant i <= 10;\nloop invariant x >= 0;\nloop invariant x <= i + 1;\nloop invariant x >= i + 1;\nloop invariant x <= i + 1;\nloop invariant x >= i + 1;\nloop invariant x <= i + 1;\nloop invariant x >= i + 1;\nloop invariant x <= i + 1;\nloop invariant x >= i + 1;\nloop invariant x <= i + 1;\nloop invariant x >= i + 1;\nloop invariant x <= i + 1;\nloop invariant x >= i + 1;\nloop invariant i < 10;\nloop invariant i > 0;\nloop invariant i >= 0;\nloop invariant i <= 10;\nloop invariant x >= 0;\nloop invariant x <= i + 1;\nloop invariant x >= i + 1;\nloop invariant x <= i + 1;\nloop invariant x >= i + 1;\nloop invariant x <= i + 1;\nloop invariant x >= i + 1;\nloop invariant x <= i + 1;\nloop invariant x >= i + 1;\nloop invariant x <= i + 1;\nloop invariant x >= i + 1;\nloop invariant x <= i + 1;\nloop invariant x >= i + 1;\nloop invariant i < 10;\nloop invariant i > 0;\nloop invariant i >= 0;\nloop invariant i <= 10;\nloop invariant x >= 0;\nloop invariant x <= i + 1;\nloop invariant x >= i + 1;\nloop invariant x <= i + 1;\nloop invariant x >= i + 1;\nloop invariant x <= i + 1;\nloop invariant x >= i + 1;\nloop invariant x <= i + 1;\nloop invariant x >= i + 1;\nloop invariant x <= i + 1;\nloop invariant x >= i + 1;\nloop invariant x <= i + 1;\nloop invariant x >= i + 1;\nloop invariant i < 10;\nloop invariant i > 0;\nloop invariant i >= 0;\nloop invariant i <= 10;\nloop invariant x >= 0;\nloop invariant x <= i + 1;\nloop invariant x >= i + 1;\nloop invariant x <= i + 1;\nloop invariant x >= i + 1;\nloop invariant x <= i + 1;\nloop invariant x >= i + 1;\nloop invariant x <= i + 1;\nloop invariant x >= i + 1;\nloop invariant x <= i + 1;\nloop invariant x >= i + 1;\nloop invariant x <= i + 1;\nloop invariant x >= i + 1;\nloop invariant i < 10;\nloop invariant i > 0;\nloop invariant i >= 0;\nloop invariant i <= 10;\nloop invariant x >= 0;\nloop invariant x <= i + 1;\nloop invariant x >= i + 1;\nloop invariant x <= i + 1;\nloop invariant x >= i + 1;\nloop invariant x <= i + 1;\nloop invariant x >= i + 1;\nloop invariant x <= i + 1;\nloop invariant x >= i + 1;\nloop invariant x <= i + 1;\nloop invariant x >= i + 1;\nloop invariant x <= i + 1;\nloop invariant x >= i + 1;\nloop invariant i < 10;\nloop invariant i > 0;\nloop invariant i >= 0;\nloop invariant i <= 10;\nloop invariant x >= 0;\nloop invariant x <= i + 1;\nloop invariant x >= i + 1;\nloop invariant x <= i + 1;\nloop invariant x >= i + 1;\nloop invariant x <= i + 1;\nloop invariant x >= i + 1;\nloop invariant x <= i + 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main()\n{\n  int i,x,y,NONDET,z;\n\n  x=0;\n  z=1;\n  y = unknown_uint();\n\n  assume( y>=0 );\n  i = 0;\n  /*@\nloop invariant i1: 0 <= i <= 10;\nloop invariant i2: x >= 0;\nloop invariant i3: i >= 0;\nloop invariant i4: i <= 10;\n\nloop invariant i6: x <= i;\nloop invariant i7: x <= i + 1;\n\n\n\n*/\nwhile (i < 10) {\n    if (NONDET > 0) {\n      x = x;\n    } else {\n      x++;\n    }\n\n    {;\n//@ assert(!( y < 0 ));\n}\n\n    i++;\n  }\n  {;\n//@ assert(!( z<0 ));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant 0 <= x <= 10;\nloop invariant 0 <= y <= 10;\nloop invariant z >= 0;\nloop invariant !( y < 0 );\nloop invariant !( z<0 );\nloop invariant !(NONDET > 0) || (x = x);\nloop invariant NONDET <= 0 || (x = x + 1);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main()\n{\n  int i,x,y,NONDET,z;\n\n  x=0;\n  z=1;\n  y = unknown_uint();\n\n  assume( y>=0 );\n  i = 0;\n  /*@\nloop invariant i1: 0 <= i <= 10;\n\n\nloop invariant i4: z >= 0;\nloop invariant i5: !( y < 0 );\nloop invariant i6: !( z<0 );\n\n\n*/\nwhile (i < 10) {\n    if (NONDET > 0) {\n      x = x;\n    } else {\n      x++;\n    }\n\n    {;\n//@ assert(!( y < 0 ));\n}\n\n    i++;\n  }\n  {;\n//@ assert(!( z<0 ));\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main()\n{\n  int i,x,y,NONDET,z;\n\n  x=0;\n  z=1;\n  y = unknown_uint();\n\n  assume( y>=0 );\n  i = 0;\n  /*@\n\n\n*/\nwhile (i < 10) {\n    if (NONDET > 0) {\n      x = x;\n    } else {\n      x++;\n    }\n\n    {;\n//@ assert(!( y < 0 ));\n}\n\n    i++;\n  }\n  {;\n//@ assert(!( z<0 ));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000; loop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main()\n{\n  int i,x,y,NONDET,z;\n\n  x=0;\n  z=1;\n  y = unknown_uint();\n\n  assume( y>=0 );\n  i = 0;\n  /*@\n\n*/\nwhile (i < 10) {\n    if (NONDET > 0) {\n      x = x;\n    } else {\n      x++;\n    }\n\n    {;\n//@ assert(!( y < 0 ));\n}\n\n    i++;\n  }\n  {;\n//@ assert(!( z<0 ));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= 10;\nloop invariant 0 <= x <= i * 10;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant !(y < 0);\nloop invariant !(z < 0);\nloop invariant i >= 0;\nloop invariant i <= 10;\nloop invariant 0 <= x <= i * 10;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant !(y < 0);\nloop invariant !(z < 0);\nloop invariant i >= 0;\nloop invariant i <= 10;\nloop invariant 0 <= x <= i * 10;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant !(y < 0);\nloop invariant !(z < 0);\nloop invariant i >= 0;\nloop invariant i <= 10;\nloop invariant 0 <= x <= i * 10;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant !(y < 0);\nloop invariant !(z < 0);\nloop invariant i >= 0;\nloop invariant i <= 10;\nloop invariant 0 <= x <= i * 10;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant !(y < 0);\nloop invariant !(z < 0);\nloop invariant i >= 0;\nloop invariant i <= 10;\nloop invariant 0 <= x <= i * 10;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant !(y < 0);\nloop invariant !(z < 0);\nloop invariant i >= 0;\nloop invariant i <= 10;\nloop invariant 0 <= x <= i * 10;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant !(y < 0);\nloop invariant !(z < 0);\nloop invariant i >= 0;\nloop invariant i <= 10;\nloop invariant 0 <= x <= i * 10;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant !(y < 0);\nloop invariant !(z < 0);\nloop invariant i >= 0;\nloop invariant i <= 10;\nloop invariant 0 <= x <= i * 10;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant !(y < 0);\nloop invariant !(z < 0);\nloop invariant i >= 0;\nloop invariant i <= 10;\nloop invariant 0 <= x <= i * 10;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant !(y < 0);\nloop invariant !(z < 0);\nloop invariant i >= 0;\nloop invariant i <= 10;\nloop invariant 0 <= x <= i * 10;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant !(y < 0);\nloop invariant !(z < 0);\nloop invariant i >= 0;\nloop invariant i <= 10;\nloop invariant 0 <= x <= i * 10;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant !(y < 0);\nloop invariant !(z < 0);\nloop invariant i >= 0;\nloop invariant i <= 10;\nloop invariant 0 <= x <= i * 10;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant !(y < 0);\nloop invariant !(z < 0);\nloop invariant i >= 0;\nloop invariant i <= 10;\nloop invariant 0 <= x <= i * 10;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant !(y < 0);\nloop invariant !(z < 0);\nloop invariant i >= 0;\nloop invariant i <= 10;\nloop invariant 0 <= x <= i * 10;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant !(y < 0);\nloop invariant !(z < 0);\nloop invariant i >= 0;\nloop invariant i <= 10;\nloop invariant 0 <= x <= i * 10;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant !(y < 0);\nloop invariant !(z < 0);\nloop invariant i >= 0;\nloop invariant i <= 10;\nloop invariant 0 <= x <= i * 10;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant !(y < 0);\nloop invariant !(z < 0);\nloop invariant i >= 0;\nloop invariant i <= 10;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main()\n{\n  int i,x,y,NONDET,z;\n\n  x=0;\n  z=1;\n  y = unknown_uint();\n\n  assume( y>=0 );\n  i = 0;\n  /*@\n\nloop invariant i2: 0 <= x <= i * 10;\nloop invariant i3: y >= 0;\nloop invariant i4: z >= 0;\nloop invariant i5: !(y < 0);\nloop invariant i6: !(z < 0);\nloop invariant i7: i >= 0;\nloop invariant i8: i <= 10;\n*/\nwhile (i < 10) {\n    if (NONDET > 0) {\n      x = x;\n    } else {\n      x++;\n    }\n\n    {;\n//@ assert(!( y < 0 ));\n}\n\n    i++;\n  }\n  {;\n//@ assert(!( z<0 ));\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= unknown_uint();\nloop invariant 0 <= x <= unknown_uint();\nloop invariant 0 <= z <= unknown_uint();\nloop invariant 0 <= i <= 10;\nloop invariant i >= 0;\nloop invariant i <= 10;\nloop invariant x >= 0;\nloop invariant x <= unknown_uint();\nloop invariant y >= 0;\nloop invariant y <= unknown_uint();\nloop invariant z >= 0;\nloop invariant z <= unknown_uint();\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main()\n{\n  int i,x,y,NONDET,z;\n\n  x=0;\n  z=1;\n  y = unknown_uint();\n\n  assume( y>=0 );\n  i = 0;\n  /*@\n\n\n\nloop invariant i4: 0 <= i <= 10;\nloop invariant i5: i >= 0;\nloop invariant i6: i <= 10;\nloop invariant i7: x >= 0;\n\nloop invariant i9: y >= 0;\n\nloop invariant i11: z >= 0;\n\n*/\nwhile (i < 10) {\n    if (NONDET > 0) {\n      x = x;\n    } else {\n      x++;\n    }\n\n    {;\n//@ assert(!( y < 0 ));\n}\n\n    i++;\n  }\n  {;\n//@ assert(!( z<0 ));\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant z == 1;\nloop invariant (i >= 0 && i <= 10) ==> (y >= 0);\nloop invariant (i >= 0 && i <= 10) ==> (x >= 0);\nloop invariant (i >= 0 && i <= 10) ==> (z == 1);\nloop invariant (i < 10) ==> (NONDET > 0);\nloop invariant (i < 10) ==> (x == x);\nloop invariant (i < 10) ==> (x >= 0);\nloop invariant (i < 10) ==> (y >= 0);\nloop invariant (i < 10) ==> (z == 1);\nloop invariant (i == 10) ==> (NONDET > 0);\nloop invariant (i == 10) ==> (x == x);\nloop invariant (i == 10) ==> (x >= 0);\nloop invariant (i == 10) ==> (y >= 0);\nloop invariant (i == 10) ==> (z == 1);\nloop invariant (i < 10) ==> (x >= 0);\nloop invariant (i < 10) ==> (y >= 0);\nloop invariant (i < 10) ==> (z == 1);\nloop invariant (i == 10) ==> (x >= 0);\nloop invariant (i == 10) ==> (y >= 0);\nloop invariant (i == 10) ==> (z == 1);\nloop invariant (i < 10) ==> (x >= 0);\nloop invariant (i < 10) ==> (y >= 0);\nloop invariant (i < 10) ==> (z == 1);\nloop invariant (i == 10) ==> (x >= 0);\nloop invariant (i == 10) ==> (y >= 0);\nloop invariant (i == 10) ==> (z == 1);\nloop invariant (i < 10) ==> (x >= 0);\nloop invariant (i < 10) ==> (y >= 0);\nloop invariant (i < 10) ==> (z == 1);\nloop invariant (i == 10) ==> (x >= 0);\nloop invariant (i == 10) ==> (y >= 0);\nloop invariant (i == 10) ==> (z == 1);\nloop invariant (i < 10) ==> (x >= 0);\nloop invariant (i < 10) ==> (y >= 0);\nloop invariant (i < 10) ==> (z == 1);\nloop invariant (i == 10) ==> (x >= 0);\nloop invariant (i == 10) ==> (y >= 0);\nloop invariant (i == 10) ==> (z == 1);\nloop invariant (i < 10) ==> (x >= 0);\nloop invariant (i < 10) ==> (y >= 0);\nloop invariant (i < 10) ==> (z == 1);\nloop invariant (i == 10) ==> (x >= 0);\nloop invariant (i == 10) ==> (y >= 0);\nloop invariant (i == 10) ==> (z == 1);\nloop invariant (i < 10) ==> (x >= 0);\nloop invariant (i < 10) ==> (y >= 0);\nloop invariant (i < 10) ==> (z == 1);\nloop invariant (i == 10) ==> (x >= 0);\nloop invariant (i == 10) ==> (y >= 0);\nloop invariant (i == 10) ==> (z == 1);\nloop invariant (i < 10) ==> (x >= 0);\nloop invariant (i < 10) ==> (y >= 0);\nloop invariant (i < 10) ==> (z == 1);\nloop invariant (i == 10) ==> (x >= 0);\nloop invariant (i == 10) ==> (y >= 0);\nloop invariant (i == 10) ==> (z == 1);\nloop invariant (i < 10) ==> (x >= 0);\nloop invariant (i < 10) ==> (y >= 0);\nloop invariant (i < 10) ==> (z == 1);\nloop invariant (i == 10) ==> (x >= 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main()\n{\n  int i,x,y,NONDET,z;\n\n  x=0;\n  z=1;\n  y = unknown_uint();\n\n  assume( y>=0 );\n  i = 0;\n  /*@\nloop invariant i1: 0 <= i <= 10;\nloop invariant i2: x >= 0;\nloop invariant i3: y >= 0;\nloop invariant i4: z == 1;\nloop invariant i5: (i >= 0 && i <= 10) ==> (y >= 0);\nloop invariant i6: (i >= 0 && i <= 10) ==> (x >= 0);\nloop invariant i7: (i >= 0 && i <= 10) ==> (z == 1);\n\nloop invariant i9: (i < 10) ==> (x == x);\nloop invariant i10: (i < 10) ==> (x >= 0);\nloop invariant i11: (i < 10) ==> (y >= 0);\nloop invariant i12: (i < 10) ==> (z == 1);\n\nloop invariant i14: (i == 10) ==> (x == x);\nloop invariant i15: (i == 10) ==> (x >= 0);\nloop invariant i16: (i == 10) ==> (y >= 0);\nloop invariant i17: (i == 10) ==> (z == 1);\n*/\nwhile (i < 10) {\n    if (NONDET > 0) {\n      x = x;\n    } else {\n      x++;\n    }\n\n    {;\n//@ assert(!( y < 0 ));\n}\n\n    i++;\n  }\n  {;\n//@ assert(!( z<0 ));\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant y >= 0;\nloop invariant (x >= 0);\nloop invariant (x <= y);\nloop invariant (z = 1);\nloop invariant (i >= 0);\nloop invariant (i <= 10);\nloop invariant (i < 10 ==> (x == z));\nloop invariant (i == 10 ==> (x > z));\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main()\n{\n  int i,x,y,NONDET,z;\n\n  x=0;\n  z=1;\n  y = unknown_uint();\n\n  assume( y>=0 );\n  i = 0;\n  /*@\nloop invariant i1: 0 <= i <= 10;\nloop invariant i2: y >= 0;\nloop invariant i3: (x >= 0);\n\n\nloop invariant i6: (i >= 0);\nloop invariant i7: (i <= 10);\n\n\n*/\nwhile (i < 10) {\n    if (NONDET > 0) {\n      x = x;\n    } else {\n      x++;\n    }\n\n    {;\n//@ assert(!( y < 0 ));\n}\n\n    i++;\n  }\n  {;\n//@ assert(!( z<0 ));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant 0 <= x <= 10;\nloop invariant 0 <= y <= 100000;\nloop invariant 0 <= NONDET <= 10;\nloop invariant NONDET == 0 ==> x == 0;\nloop invariant NONDET == 1 ==> x == 1;\nloop invariant NONDET == 0 ==> i == 0;\nloop invariant NONDET == 1 ==> i == 1;\nloop invariant NONDET == 0 ==> y == 0;\nloop invariant NONDET == 1 ==> y == 1;\nloop invariant NONDET == 0 ==> z == 1;\nloop invariant NONDET == 1 ==> z == 1;\nloop invariant NONDET == 0 ==> i == 0;\nloop invariant NONDET == 1 ==> i == 1;\nloop invariant NONDET == 0 ==> x == 0;\nloop invariant NONDET == 1 ==> x == 1;\nloop invariant NONDET == 0 ==> y == 0;\nloop invariant NONDET == 1 ==> y == 1;\nloop invariant NONDET == 0 ==> z == 1;\nloop invariant NONDET == 1 ==> z == 1;\nloop invariant NONDET == 0 ==> i == 0;\nloop invariant NONDET == 1 ==> i == 1;\nloop invariant NONDET == 0 ==> x == 0;\nloop invariant NONDET == 1 ==> x == 1;\nloop invariant NONDET == 0 ==> y == 0;\nloop invariant NONDET == 1 ==> y == 1;\nloop invariant NONDET == 0 ==> z == 1;\nloop invariant NONDET == 1 ==> z == 1;\nloop invariant NONDET == 0 ==> i == 0;\nloop invariant NONDET == 1 ==> i == 1;\nloop invariant NONDET == 0 ==> x == 0;\nloop invariant NONDET == 1 ==> x == 1;\nloop invariant NONDET == 0 ==> y == 0;\nloop invariant NONDET == 1 ==> y == 1;\nloop invariant NONDET == 0 ==> z == 1;\nloop invariant NONDET == 1 ==> z == 1;\nloop invariant NONDET == 0 ==> i == 0;\nloop invariant NONDET == 1 ==> i == 1;\nloop invariant NONDET == 0 ==> x == 0;\nloop invariant NONDET == 1 ==> x == 1;\nloop invariant NONDET == 0 ==> y == 0;\nloop invariant NONDET == 1 ==> y == 1;\nloop invariant NONDET == 0 ==> z == 1;\nloop invariant NONDET == 1 ==> z == 1;\nloop invariant NONDET == 0 ==> i == 0;\nloop invariant NONDET == 1 ==> i == 1;\nloop invariant NONDET == 0 ==> x == 0;\nloop invariant NONDET == 1 ==> x == 1;\nloop invariant NONDET == 0 ==> y == 0;\nloop invariant NONDET == 1 ==> y == 1;\nloop invariant NONDET == 0 ==> z == 1;\nloop invariant NONDET == 1 ==> z == 1;\nloop invariant NONDET == 0 ==> i == 0;\nloop invariant NONDET == 1 ==> i == 1;\nloop invariant NONDET == 0 ==> x == 0;\nloop invariant NONDET == 1 ==> x == 1;\nloop invariant NONDET == 0 ==> y == 0;\nloop invariant NONDET == 1 ==> y == 1;\nloop invariant NONDET == 0 ==> z == 1;\nloop invariant NONDET == 1 ==> z == 1;\nloop invariant NONDET == 0 ==> i == 0;\nloop invariant NONDET == 1 ==> i == 1;\nloop invariant NONDET == 0 ==> x == 0;\nloop invariant NONDET == 1 ==> x == 1;\nloop invariant NONDET == 0 ==> y == 0;\nloop invariant NONDET == 1 ==> y == 1;\nloop invariant NONDET == 0 ==> z == 1;\nloop invariant NONDET == 1 ==> z == 1;\nloop invariant NONDET == 0 ==> i == 0;\nloop invariant NONDET == 1 ==> i == 1;\nloop invariant NONDET == 0 ==> x == 0;\nloop invariant NONDET == 1 ==> x == 1;\nloop invariant NONDET == 0 ==> y == 0;\nloop invariant NONDET == 1 ==> y == 1;\nloop invariant NONDET == 0 ==> z == 1;\nloop invariant NONDET == 1 ==> z == 1;\nloop invariant NONDET == 0 ==> i == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main()\n{\n  int i,x,y,NONDET,z;\n\n  x=0;\n  z=1;\n  y = unknown_uint();\n\n  assume( y>=0 );\n  i = 0;\n  /*@\nloop invariant i1: 0 <= i <= 10;\n\n\n\n\n\n\n\n\n\nloop invariant i11: NONDET == 0 ==> z == 1;\nloop invariant i12: NONDET == 1 ==> z == 1;\n*/\nwhile (i < 10) {\n    if (NONDET > 0) {\n      x = x;\n    } else {\n      x++;\n    }\n\n    {;\n//@ assert(!( y < 0 ));\n}\n\n    i++;\n  }\n  {;\n//@ assert(!( z<0 ));\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 32: Assignment operators not allowed in annotations.",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main()\n{\n  int i,x,y,NONDET,z;\n\n  x=0;\n  z=1;\n  y = unknown_uint();\n\n  assume( y>=0 );\n  i = 0;\n  /*@\nloop invariant i1: 0 <= x <= 9;\nloop invariant i2: 0 <= i <= 10;\nloop invariant i3: 0 <= y <= 100000;\nloop invariant i4: x >= 0;\nloop invariant i5: i >= 0;\nloop invariant i6: y >= 0;\nloop invariant i7: z >= 1;\nloop invariant i8: NONDET >= 0;\nloop invariant i9: 0 <= x <= z;\nloop invariant i10: z = 1;\nloop invariant i11: 0 <= x <= 10;\nloop invariant i12: z > 0;\nloop invariant i13: i == 0 ==> x == 0;\nloop invariant i14: i == 10 ==> x <= 1;\nloop invariant i15: i == 10 ==> x >= 0;\nloop invariant i16: i == 10 ==> y >= 0;\nloop invariant i17: i == 10 ==> z > 0;\nloop invariant i18: i < 10 ==> x == 0;\nloop invariant i19: x is non-negative;\nloop invariant i20: z is non-negative;\nloop invariant i21: y is non-negative;\nloop invariant i22: y < 100000;\nloop invariant i23: 0 <= y <= 10;\nloop invariant i24: i == 0 ==> y > 0;\nloop invariant i25: i > 0 ==> x > 0;\nloop invariant i26: i > 0 ==> y > 0;\nloop invariant i27: i > 0 ==> x <= i + x;\nloop invariant i28: i > 0 ==> y <= i + y;\nloop invariant i29: i > 0 ==> x >= i + x;\nloop invariant i30: i > 0 ==> y >= i + y;\nloop invariant i31: i > 0 ==> x >= y;\nloop invariant i32: i > 0 ==> i + x >= y;\nloop invariant i33: i > 0 ==> i + y >= x;\nloop invariant i34: i > 0 ==> y >= x;\nloop invariant i35: i <= 10;\nloop invariant i36: x >= i;\nloop invariant i37: x <= i;\nloop invariant i38: x <= i + 1;\nloop invariant i39: x >= i + 1;\nloop invariant i40: i < 10;\nloop invariant i41: i > 0;\nloop invariant i42: z >= 0;\nloop invariant i43: !( y < 0 );\nloop invariant i44: !( z<0 );\nloop invariant i45: !(NONDET > 0) || (x = x);\nloop invariant i46: NONDET <= 0 || (x = x + 1);\nloop invariant i47: x >= (1 + (y - 1) * y / 2);\nloop invariant i48: 0 <= y <= 100000; loop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant i49: 1 <= i <= 10;\nloop invariant i50: 0 <= x <= i * 10;\nloop invariant i51: !(y < 0);\nloop invariant i52: !(z < 0);\nloop invariant i53: 0 <= y <= unknown_uint();\nloop invariant i54: 0 <= x <= unknown_uint();\nloop invariant i55: 0 <= z <= unknown_uint();\nloop invariant i56: x <= unknown_uint();\nloop invariant i57: y <= unknown_uint();\nloop invariant i58: z <= unknown_uint();\nloop invariant i59: z == 1;\nloop invariant i60: (i >= 0 && i <= 10) ==> (y >= 0);\nloop invariant i61: (i >= 0 && i <= 10) ==> (x >= 0);\nloop invariant i62: (i >= 0 && i <= 10) ==> (z == 1);\nloop invariant i63: (i < 10) ==> (NONDET > 0);\nloop invariant i64: (i < 10) ==> (x == x);\nloop invariant i65: (i < 10) ==> (x >= 0);\nloop invariant i66: (i < 10) ==> (y >= 0);\nloop invariant i67: (i < 10) ==> (z == 1);\nloop invariant i68: (i == 10) ==> (NONDET > 0);\nloop invariant i69: (i == 10) ==> (x == x);\nloop invariant i70: (i == 10) ==> (x >= 0);\nloop invariant i71: (i == 10) ==> (y >= 0);\nloop invariant i72: (i == 10) ==> (z == 1);\nloop invariant i73: (x >= 0);\nloop invariant i74: (x <= y);\nloop invariant i75: (z = 1);\nloop invariant i76: (i >= 0);\nloop invariant i77: (i <= 10);\nloop invariant i78: (i < 10 ==> (x == z));\nloop invariant i79: (i == 10 ==> (x > z));\nloop invariant i80: 0 <= NONDET <= 10;\nloop invariant i81: NONDET == 0 ==> x == 0;\nloop invariant i82: NONDET == 1 ==> x == 1;\nloop invariant i83: NONDET == 0 ==> i == 0;\nloop invariant i84: NONDET == 1 ==> i == 1;\nloop invariant i85: NONDET == 0 ==> y == 0;\nloop invariant i86: NONDET == 1 ==> y == 1;\nloop invariant i87: NONDET == 0 ==> z == 1;\nloop invariant i88: NONDET == 1 ==> z == 1;\n*/\nwhile (i < 10) {\n    if (NONDET > 0) {\n      x = x;\n    } else {\n      x++;\n    }\n\n    {;\n//@ assert(!( y < 0 ));\n}\n\n    i++;\n  }\n  {;\n//@ assert(!( z<0 ));\n}\n\n}",
        "combined_annotation_num_solver_calls": 26,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main()\n{\n  int i,x,y,NONDET,z;\n\n  x=0;\n  z=1;\n  y = unknown_uint();\n\n  assume( y>=0 );\n  i = 0;\n  /*@\n\nloop invariant i2: 0 <= i <= 10;\n\nloop invariant i4: x >= 0;\nloop invariant i5: i >= 0;\nloop invariant i6: y >= 0;\nloop invariant i7: z >= 1;\n\n\n\nloop invariant i11: 0 <= x <= 10;\nloop invariant i12: z > 0;\nloop invariant i13: i == 0 ==> x == 0;\n\nloop invariant i15: i == 10 ==> x >= 0;\nloop invariant i16: i == 10 ==> y >= 0;\nloop invariant i17: i == 10 ==> z > 0;\n\n\n\n\n\n\n\n\n\nloop invariant i27: i > 0 ==> x <= i + x;\nloop invariant i28: i > 0 ==> y <= i + y;\n\n\n\n\nloop invariant i33: i > 0 ==> i + y >= x;\n\nloop invariant i35: i <= 10;\n\nloop invariant i37: x <= i;\nloop invariant i38: x <= i + 1;\n\n\n\nloop invariant i42: z >= 0;\nloop invariant i43: !( y < 0 );\nloop invariant i44: !( z<0 );\n\n\n\n\n\nloop invariant i50: 0 <= x <= i * 10;\nloop invariant i51: !(y < 0);\nloop invariant i52: !(z < 0);\n\n\n\n\n\n\nloop invariant i59: z == 1;\nloop invariant i60: (i >= 0 && i <= 10) ==> (y >= 0);\nloop invariant i61: (i >= 0 && i <= 10) ==> (x >= 0);\nloop invariant i62: (i >= 0 && i <= 10) ==> (z == 1);\n\nloop invariant i64: (i < 10) ==> (x == x);\nloop invariant i65: (i < 10) ==> (x >= 0);\nloop invariant i66: (i < 10) ==> (y >= 0);\nloop invariant i67: (i < 10) ==> (z == 1);\n\nloop invariant i69: (i == 10) ==> (x == x);\nloop invariant i70: (i == 10) ==> (x >= 0);\nloop invariant i71: (i == 10) ==> (y >= 0);\nloop invariant i72: (i == 10) ==> (z == 1);\nloop invariant i73: (x >= 0);\n\n\nloop invariant i76: (i >= 0);\nloop invariant i77: (i <= 10);\n\n\n\n\n\n\n\n\n\nloop invariant i87: NONDET == 0 ==> z == 1;\nloop invariant i88: NONDET == 1 ==> z == 1;\n*/\nwhile (i < 10) {\n    if (NONDET > 0) {\n      x = x;\n    } else {\n      x++;\n    }\n\n    {;\n//@ assert(!( y < 0 ));\n}\n\n    i++;\n  }\n  {;\n//@ assert(!( z<0 ));\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c"
        ],
        "failure": [],
        "skipped": [],
        "total": 22,
        "success_count": 22,
        "failure_count": 0,
        "success_rate": 1.0
    }
}