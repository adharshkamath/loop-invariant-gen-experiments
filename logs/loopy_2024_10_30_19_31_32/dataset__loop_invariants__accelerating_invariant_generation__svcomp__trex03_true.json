{
    "logs": {
        "file": "../dataset/loop_invariants/accelerating_invariant_generation/svcomp/trex03_true.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  unsigned int x1=unknown_uint(), x2=unknown_uint(), x3=unknown_uint();\n  unsigned int d1=1, d2=1, d3=1;\n  _Bool c1=unknown_bool(), c2=unknown_bool();\n  \n  while(x1>0 && x2>0 && x3>0)\n  {\n    if (c1) x1=x1-d1;\n    else if (c2) x2=x2-d2;\n    else x3=x3-d3;\n    c1=unknown_bool();\n    c2=unknown_bool();\n  }\n\n  {;\n//@ assert(x1==0 || x2==0 || x3==0);\n}\n\n  return 0;\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= x1 <= 2147483647;\nloop invariant 0 <= x2 <= 2147483647;\nloop invariant 0 <= x3 <= 2147483647;\nloop invariant 0 <= d1 <= 2147483647;\nloop invariant 0 <= d2 <= 2147483647;\nloop invariant 0 <= d3 <= 2147483647;\nloop invariant c1 == 0 || c1 == 1;\nloop invariant c2 == 0 || c2 == 1;\nloop invariant (x1 > 0 && x2 > 0 && x3 > 0) ==> (x1 >= d1 && x2 >= d2 && x3 >= d3);\nloop invariant (x1 > 0 && x2 > 0 && x3 > 0) ==> (x1 >= d1 && x2 >= d2 && x3 >= d3);\nloop invariant (x1 > 0 && x2 > 0 && x3 > 0) ==> (x1 >= d1 && x2 >= d2 && x3 >= d3);\nloop invariant (x1 > 0 && x2 > 0 && x3 > 0) ==> (x1 >= d1 && x2 >= d2 && x3 >= d3);\nloop invariant (x1 > 0 && x2 > 0 && x3 > 0) ==> (x1 >= d1 && x2 >= d2 && x3 >= d3);\nloop invariant (x1 > 0 && x2 > 0 && x3 > 0) ==> (x1 >= d1 && x2 >= d2 && x3 >= d3);\nloop invariant (x1 > 0 && x2 > 0 && x3 > 0) ==> (x1 >= d1 && x2 >= d2 && x3 >= d3);\nloop invariant (x1 > 0 && x2 > 0 && x3 > 0) ==> (x1 >= d1 && x2 >= d2 && x3 >= d3);\nloop invariant (x1 > 0 && x2 > 0 && x3 > 0) ==> (x1 >= d1 && x2 >= d2 && x3 >= d3);\nloop invariant (x1 > 0 && x2 > 0 && x3 > 0) ==> (x1 >= d1 && x2 >= d2 && x3 >= d3);\nloop invariant (x1 > 0 && x2 > 0 && x3 > 0) ==> (x1 >= d1 && x2 >= d2 && x3 >= d3);\nloop invariant (x1 > 0 && x2 > 0 && x3 > 0) ==> (x1 >= d1 && x2 >= d2 && x3 >= d3);\nloop invariant (x1 > 0 && x2 > 0 && x3 > 0) ==> (x1 >= d1 && x2 >= d2 && x3 >= d3);\nloop invariant (x1 > 0 && x2 > 0 && x3 > 0) ==> (x1 >= d1 && x2 >= d2 && x3 >= d3);\nloop invariant (x1 > 0 && x2 > 0 && x3 > 0) ==> (x1 >= d1 && x2 >= d2 && x3 >= d3);\nloop invariant (x1 > 0 && x2 > 0 && x3 > 0) ==> (x1 >= d1 && x2 >= d2 && x3 >= d3);\nloop invariant (x1 > 0 && x2 > 0 && x3 > 0) ==> (x1 >= d1 && x2 >= d2 && x3 >= d3);\nloop invariant (x1 > 0 && x2 > 0 && x3 > 0) ==> (x1 >= d1 && x2 >= d2 && x3 >= d3);\nloop invariant (x1 > 0 && x2 > 0 && x3 > 0) ==> (x1 >= d1 && x2 >= d2 && x3 >= d3);\nloop invariant (x1 > 0 && x2 > 0 && x3 > 0) ==> (x1 >= d1 && x2 >= d2 && x3 >= d3);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x1 <= unknown_uint();\nloop invariant 0 <= x2 <= unknown_uint();\nloop invariant 0 <= x3 <= unknown_uint();\nloop invariant d1 > 0;\nloop invariant d2 > 0;\nloop invariant d3 > 0;\nloop invariant c1 || c2;\nloop invariant x1 >= d1 * (unknown_uint() - unknown_uint() + 1) / 2;\nloop invariant x2 >= d2 * (unknown_uint() - unknown_uint() + 1) / 2;\nloop invariant x3 >= d3 * (unknown_uint() - unknown_uint() + 1) / 2;\nloop invariant x1 + x2 + x3 >= unknown_uint();\nloop invariant x1 + x2 + x3 <= (unknown_uint() - unknown_uint() + 1) * 3 / 2;\nloop invariant x1 >= unknown_uint() - d1 * (unknown_uint() - unknown_uint() + 1) / 2;\nloop invariant x2 >= unknown_uint() - d2 * (unknown_uint() - unknown_uint() + 1) / 2;\nloop invariant x3 >= unknown_uint() - d3 * (unknown_uint() - unknown_uint() + 1) / 2;\nloop invariant x1 <= unknown_uint();\nloop invariant x2 <= unknown_uint();\nloop invariant x3 <= unknown_uint();\n*/\n```",
            "```\n/*@\nloop invariant 1 <= d1 <= x1;\nloop invariant 1 <= d2 <= x2;\nloop invariant 1 <= d3 <= x3;\nloop invariant c1 || c2;\nloop invariant x1 >= x2;\nloop invariant x1 >= x3;\nloop invariant x2 >= x3;\n*/\n```",
            "```\n/*@\nloop invariant 0 < x2 <= 100000;\nloop invariant 0 < x1 <= x2;\nloop invariant 0 < x3 <= x2;\nloop invariant 0 <= d1 <= 100000;\nloop invariant 0 <= d2 <= 100000;\nloop invariant 0 <= d3 <= 100000;\nloop invariant c1 || c2;\nloop invariant !(c1 && c2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x1 <= max(x1, 0), 0 <= x2 <= max(x2, 0), 0 <= x3 <= max(x3, 0); loop invariant d1 >= 1, d2 >= 1, d3 >= 1; loop invariant (c1 && x1 >= d1) || (!c1 && x1 <= d1); loop invariant (c2 && x2 >= d2) || (!c2 && x2 <= d2); loop invariant (x1 > 0 && x2 > 0 && x3 > 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x1 <= unknown_uint();\nloop invariant 0 <= x2 <= unknown_uint();\nloop invariant 0 <= x3 <= unknown_uint();\nloop invariant 1 <= d1 <= unknown_uint();\nloop invariant 1 <= d2 <= unknown_uint();\nloop invariant 1 <= d3 <= unknown_uint();\nloop invariant (x1 == 0 || x2 == 0 || x3 == 0) ==> c1 == 0 && c2 == 0;\nloop invariant c1 == 0 ==> x1 == 0;\nloop invariant c2 == 0 ==> x2 == 0;\nloop invariant x1 == 0 ==> c1 == 0;\nloop invariant x2 == 0 ==> c2 == 0;\nloop invariant x1 == 0 || x2 == 0 || x3 == 0 ==> d1 == 1;\nloop invariant x1 == 0 || x2 == 0 || x3 == 0 ==> d2 == 1;\nloop invariant x1 == 0 || x2 == 0 || x3 == 0 ==> d3 == 1;\nloop invariant x1 == 0 || x2 == 0 || x3 == 0 ==> unknown_bool() == 0;\nloop invariant x1 == 0 || x2 == 0 || x3 == 0 ==> unknown_bool() == 1;\nloop invariant x1 == 0 || x2 == 0 || x3 == 0 ==> unknown_bool() == 0 && unknown_bool() == 1;\nloop invariant x1 == 0 || x2 == 0 || x3 == 0 ==> unknown_bool() == 1 && unknown_bool() == 0;\nloop invariant x1 == 0 || x2 == 0 || x3 == 0 ==> unknown_bool() == 1 && unknown_bool() == 1;\nloop invariant x1 == 0 || x2 == 0 || x3 == 0 ==> unknown_bool() == 0 && unknown_bool() == 0;\nloop invariant x1 == 0 || x2 == 0 || x3 == 0 ==> unknown_bool() == 1 && unknown_bool() == 0;\nloop invariant x1 == 0 || x2 == 0 || x3 == 0 ==> unknown_bool() == 0 && unknown_bool() == 1;\nloop invariant x1 == 0 || x2 == 0 || x3 == 0 ==> unknown_bool() == 0 && unknown_bool() == 0;\nloop invariant x1 == 0 || x2 == 0 || x3 == 0 ==> unknown_bool() == 1 && unknown_bool() == 1;\nloop invariant x1 == 0 || x2 == 0 || x3 == 0 ==> unknown_bool() == 0 && unknown_bool() == 0;\nloop invariant x1 == 0 || x2 == 0 || x3 == 0 ==> unknown_bool() == 1 && unknown_bool() == 0;\nloop invariant x1 == 0 || x2 == 0 || x3 == 0 ==> unknown_bool() == 0 && unknown_bool() == 1;\nloop invariant x1 == 0 || x2 == 0 || x3 == 0 ==> unknown_bool() == 0 && unknown_bool() == 0;\nloop invariant x1 == 0 || x2 == 0 || x3 == 0 ==> unknown_bool() == 1 && unknown_bool() == 1;\nloop invariant x1 == 0 || x2 == 0 || x3 == 0 ==> unknown_bool() == 0 && unknown_bool() == 0;\nloop invariant x1 == 0 || x2 == 0 || x3 == 0 ==> unknown_bool() == 1 && unknown_bool() == 0;\nloop invariant x1 == 0 || x2 == 0 || x3 == 0 ==> unknown_bool() == 0 && unknown_bool() == 1;\nloop invariant x1 == 0 || x2 == 0 || x3 == 0 ==> unknown_bool() == 0 && unknown_bool() == 0;\nloop invariant x1 == 0 || x2 == 0 || x3 == 0 ==> unknown_bool() == 1 && unknown_bool() == 1;\nloop invariant x1 == 0 || x2 == 0 || x3 == 0 ==> unknown_bool() == 0 && unknown_bool() == 0;\nloop invariant x1 == 0 || x2 == 0 || x3 == 0 ==> unknown_bool() == 1 && unknown_bool() == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x1 <= y1;\nloop invariant 0 <= x2 <= y2;\nloop invariant 0 <= x3 <= y3;\nloop invariant y1 >= d1;\nloop invariant y2 >= d2;\nloop invariant y3 >= d3;\nloop invariant x1 >= (y1 - d1) * (y1 - 1) / 2;\nloop invariant x2 >= (y2 - d2) * (y2 - 1) / 2;\nloop invariant x3 >= (y3 - d3) * (y3 - 1) / 2;\nloop invariant x1 >= x2 >= x3;\nloop invariant y1 >= y2 >= y3;\nloop invariant y1 >= y2 >= y3;\n*/\n```",
            "```\n/*@\nloop invariant c1 && c2 ==> (x1==0 || x2==0 || x3==0);\nloop invariant x1 >= 0 && x2 >= 0 && x3 >= 0;\nloop invariant d1 >= 1 && d2 >= 1 && d3 >= 1;\nloop invariant c1 || c2 ==> (x1>=0 && x2>=0 && x3>=0);\nloop invariant !(c1 && c2) ==> (x1>=0 && x2>=0 && x3>=0);\nloop invariant !(c1 && c2) ==> (d1>=1 && d2>=1 && d3>=1);\nloop invariant c1 ==> (x1>=0 && x2>=0 && x3>=0);\nloop invariant c1 ==> (d1>=1 && d2>=1 && d3>=1);\nloop invariant !(c1 && c2) ==> (x1>=0 && x2>=0 && x3>=0);\nloop invariant !(c1 && c2) ==> (d1>=1 && d2>=1 && d3>=1);\nloop invariant !(c1 && c2) ==> (x1>=0 && x2>=0 && x3>=0);\nloop invariant !(c1 && c2) ==> (d1>=1 && d2>=1 && d3>=1);\nloop invariant !(c1 && c2) ==> (x1>=0 && x2>=0 && x3>=0);\nloop invariant !(c1 && c2) ==> (d1>=1 && d2>=1 && d3>=1);\nloop invariant !(c1 && c2) ==> (x1>=0 && x2>=0 && x3>=0);\nloop invariant !(c1 && c2) ==> (d1>=1 && d2>=1 && d3>=1);\nloop invariant !(c1 && c2) ==> (x1>=0 && x2>=0 && x3>=0);\nloop invariant !(c1 && c2) ==> (d1>=1 && d2>=1 && d3>=1);\nloop invariant !(c1 && c2) ==> (x1>=0 && x2>=0 && x3>=0);\nloop invariant !(c1 && c2) ==> (d1>=1 && d2>=1 && d3>=1);\nloop invariant !(c1 && c2) ==> (x1>=0 && x2>=0 && x3>=0);\nloop invariant !(c1 && c2) ==> (d1>=1 && d2>=1 && d3>=1);\nloop invariant !(c1 && c2) ==> (x1>=0 && x2>=0 && x3>=0);\nloop invariant !(c1 && c2) ==> (d1>=1 && d2>=1 && d3>=1);\nloop invariant !(c1 && c2) ==> (x1>=0 && x2>=0 && x3>=0);\nloop invariant !(c1 && c2) ==> (d1>=1 && d2>=1 && d3>=1);\nloop invariant !(c1 && c2) ==> (x1>=0 && x2>=0 && x3>=0);\nloop invariant !(c1 && c2) ==> (d1>=1 && d2>=1 && d3>=1);\nloop invariant !(c1 && c2) ==> (x1>=0 && x2>=0 && x3>=0);\nloop invariant !(c1 && c2) ==> (d1>=1 && d2>=1 && d3>=1);\nloop invariant !(c1 && c2) ==> (x1>=0 && x2>=0 && x3>=0);\nloop invariant !(c1 && c2) ==> (d1>=1 && d2>=1 && d3>=1);\nloop invariant !(c1 && c2) ==> (x1>=0 && x2>=0 && x3>=0);\nloop invariant !(c1 && c2) ==> (d1>=1 && d2>=1 && d3>=1);\nloop invariant !(c1 && c2) ==> (x1>=0 && x2>=0 && x3>=0);\nloop invariant !(c1 && c2) ==> (d1>=1 && d2>=1 && d3>=1);\nloop invariant !(c1 && c2) ==> (x1>=0 && x2>=0 && x3>=0);\nloop invariant !(c1 && c2) ==> (d1>=1 && d2>=1 && d3>=1);\nloop invariant !(c1 && c2) ==> (x1>=0 && x2>=0 && x3>=0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= d1 <= x1;\nloop invariant 0 <= d2 <= x2;\nloop invariant 0 <= d3 <= x3;\nloop invariant 0 <= x1 <= 2^32 - 1;\nloop invariant 0 <= x2 <= 2^32 - 1;\nloop invariant 0 <= x3 <= 2^32 - 1;\nloop invariant c1 || c2;\nloop invariant c1 && c1 ==> (x1 >= d1);\nloop invariant c2 && c2 ==> (x2 >= d2);\nloop invariant !(c1 || c2) ==> (x3 >= d3);\nloop invariant c1 && c2 ==> (x1 >= d1 && x2 >= d2);\nloop invariant !(c1 && c2) ==> (x3 >= d3);\nloop invariant c1 ==> (x1 >= d1);\nloop invariant c2 ==> (x2 >= d2);\nloop invariant !(c1 && c2) ==> (x3 >= d3);\nloop invariant c1 && c2 ==> (x1 >= d1 && x2 >= d2);\nloop invariant !(c1 && c2) ==> (x3 >= d3);\nloop invariant c1 && c2 ==> (x1 >= d1 && x2 >= d2);\nloop invariant !(c1 && c2) ==> (x3 >= d3);\nloop invariant c1 && c2 ==> (x1 >= d1 && x2 >= d2);\nloop invariant !(c1 && c2) ==> (x3 >= d3);\nloop invariant c1 && c2 ==> (x1 >= d1 && x2 >= d2);\nloop invariant !(c1 && c2) ==> (x3 >= d3);\nloop invariant c1 && c2 ==> (x1 >= d1 && x2 >= d2);\nloop invariant !(c1 && c2) ==> (x3 >= d3);\nloop invariant c1 && c2 ==> (x1 >= d1 && x2 >= d2);\nloop invariant !(c1 && c2) ==> (x3 >= d3);\nloop invariant c1 && c2 ==> (x1 >= d1 && x2 >= d2);\nloop invariant !(c1 && c2) ==> (x3 >= d3);\nloop invariant c1 && c2 ==> (x1 >= d1 && x2 >= d2);\nloop invariant !(c1 && c2) ==> (x3 >= d3);\nloop invariant c1 && c2 ==> (x1 >= d1 && x2 >= d2);\nloop invariant !(c1 && c2) ==> (x3 >= d3);\nloop invariant c1 && c2 ==> (x1 >= d1 && x2 >= d2);\nloop invariant !(c1 && c2) ==> (x3 >= d3);\nloop invariant c1 && c2 ==> (x1 >= d1 && x2 >= d2);\nloop invariant !(c1 && c2) ==> (x3 >= d3);\nloop invariant c1 && c2 ==> (x1 >= d1 && x2 >= d2);\nloop invariant !(c1 && c2) ==> (x3 >= d3);\nloop invariant c1 && c2 ==> (x1 >= d1 && x2 >= d2);\nloop invariant !(c1 && c2) ==> (x3 >= d3);\nloop invariant c1 && c2 ==> (x1 >= d1 && x2 >= d2);\nloop invariant !(c1 && c2) ==> (x3 >= d3);\nloop invariant c1 && c2 ==> (x1 >= d1 && x2 >= d2);\nloop invariant !(c1 && c2) ==> (x3 >= d3);\nloop invariant c1 && c2 ==> (x1 >= d1 && x2 >= d2);\nloop invariant !(c1 && c2) ==> (x3 >= d3);\nloop invariant c1 && c2 ==> (x1 >= d1 && x2 >= d2);\nloop invariant !(c1 && c2) ==> (x3 >= d3);\nloop invariant c1 && c2 ==> (x1 >= d1 && x2 >= d2);\nloop invariant !(c1 && c2) ==> (x3 >= d3);\nloop invariant c1 && c2 ==> (x1 >= d1 && x2 >= d2);\nloop invariant !(c1 && c2) ==> (x3 >= d3);\nloop invariant c1 && c2 ==> (x1 >= d1 && x2 >= d2);\nloop invariant !(c1 && c2) ==> (x3 >= d3);\nloop invariant c1 && c2 ==> (x1 >= d1 && x2 >= d2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x1 <= unknown_uint();\nloop invariant 0 <= x2 <= unknown_uint();\nloop invariant 0 <= x3 <= unknown_uint();\nloop invariant 0 <= d1 <= unknown_uint();\nloop invariant 0 <= d2 <= unknown_uint();\nloop invariant 0 <= d3 <= unknown_uint();\nloop invariant c1 == unknown_bool();\nloop invariant c2 == unknown_bool();\nloop invariant unknown_uint() == assume(x1 > 0);\nloop invariant unknown_uint() == assume(x2 > 0);\nloop invariant unknown_uint() == assume(x3 > 0);\nloop invariant unknown_uint() == assume(c1 == unknown_bool());\nloop invariant unknown_uint() == assume(c2 == unknown_bool());\n*/\n```",
            "```\n/*@\nloop invariant x1 >= x2;\nloop invariant x1 >= x3;\nloop invariant x2 >= x3;\nloop invariant x1 + x2 + x3 <= 3*max(x1, x2, x3);\nloop invariant x1 <= x1 + x2 + x3;\nloop invariant x2 <= x1 + x2 + x3;\nloop invariant x3 <= x1 + x2 + x3;\nloop invariant x1 <= x1 + x2 + x3;\nloop invariant x2 <= x1 + x2 + x3;\nloop invariant x3 <= x1 + x2 + x3;\nloop invariant x1 <= x1 + x2 + x3;\nloop invariant x2 <= x1 + x2 + x3;\nloop invariant x3 <= x1 + x2 + x3;\nloop invariant x1 <= x1 + x2 + x3;\nloop invariant x2 <= x1 + x2 + x3;\nloop invariant x3 <= x1 + x2 + x3;\nloop invariant x1 <= x1 + x2 + x3;\nloop invariant x2 <= x1 + x2 + x3;\nloop invariant x3 <= x1 + x2 + x3;\nloop invariant x1 <= x1 + x2 + x3;\nloop invariant x2 <= x1 + x2 + x3;\nloop invariant x3 <= x1 + x2 + x3;\nloop invariant x1 <= x1 + x2 + x3;\nloop invariant x2 <= x1 + x2 + x3;\nloop invariant x3 <= x1 + x2 + x3;\nloop invariant x1 <= x1 + x2 + x3;\nloop invariant x2 <= x1 + x2 + x3;\nloop invariant x3 <= x1 + x2 + x3;\nloop invariant x1 <= x1 + x2 + x3;\nloop invariant x2 <= x1 + x2 + x3;\nloop invariant x3 <= x1 + x2 + x3;\nloop invariant x1 <= x1 + x2 + x3;\nloop invariant x2 <= x1 + x2 + x3;\nloop invariant x3 <= x1 + x2 + x3;\nloop invariant x1 <= x1 + x2 + x3;\nloop invariant x2 <= x1 + x2 + x3;\nloop invariant x3 <= x1 + x2 + x3;\nloop invariant x1 <= x1 + x2 + x3;\nloop invariant x2 <= x1 + x2 + x3;\nloop invariant x3 <= x1 + x2 + x3;\nloop invariant x1 <= x1 + x2 + x3;\nloop invariant x2 <= x1 + x2 + x3;\nloop invariant x3 <= x1 + x2 + x3;\nloop invariant x1 <= x1 + x2 + x3;\nloop invariant x2 <= x1 + x2 + x3;\nloop invariant x3 <= x1 + x2 + x3;\nloop invariant x1 <= x1 + x2 + x3;\nloop invariant x2 <= x1 + x2 + x3;\nloop invariant x3 <= x1 + x2 + x3;\nloop invariant x1 <= x1 + x2 + x3;\nloop invariant x2 <= x1 + x2 + x3;\nloop invariant x3 <= x1 + x2 + x3;\nloop invariant x1 <= x1 + x2 + x3;\nloop invariant x2 <= x1 + x2 + x3;\nloop invariant x3 <= x1 + x2 + x3;\nloop invariant x1 <= x1 + x2 + x3;\nloop invariant x2 <= x1 + x2 + x3;\nloop invariant x3 <= x1 + x2 + x3;\nloop invariant x1 <= x1 + x2 + x3;\nloop invariant x2 <= x1 + x2 + x3;\nloop invariant x3 <= x1 + x2 + x3;\nloop invariant x1 <= x1 + x2 + x3;\nloop invariant x2 <= x1 + x2 + x3;\nloop invariant x3 <= x1 + x2 + x3;\nloop invariant x1 <= x1 + x2 + x3;\nloop invariant x2 <= x1 + x2 + x3;\nloop invariant x3 <= x1 + x2 + x3;\nloop invariant x1 <= x1 + x2 + x3;\nloop invariant x2 <= x1 + x2 + x3;\nloop invariant x3 <= x1 + x2 + x3;\nloop invariant x1 <= x1 + x2 + x3;\nloop invariant x2 <= x1 + x2 + x3;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x1 <= 4294967295;\nloop invariant 0 <= x2 <= 4294967295;\nloop invariant 0 <= x3 <= 4294967295;\nloop invariant 0 <= d1 <= 4294967295;\nloop invariant 0 <= d2 <= 4294967295;\nloop invariant 0 <= d3 <= 4294967295;\nloop invariant x1 <= x2;\nloop invariant x1 <= x3;\nloop invariant x2 <= x3;\nloop invariant x1 <= x2 + (x2 - 1) * d2 / 2;\nloop invariant x1 <= x3 + (x3 - 1) * d3 / 2;\nloop invariant x2 <= x3 + (x3 - 1) * d3 / 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x1 <= INT_MAX;\nloop invariant 0 <= x2 <= INT_MAX;\nloop invariant 0 <= x3 <= INT_MAX;\nloop invariant 1 <= d1 <= INT_MAX;\nloop invariant 1 <= d2 <= INT_MAX;\nloop invariant 1 <= d3 <= INT_MAX;\nloop invariant c1 == unknown_bool();\nloop invariant c2 == unknown_bool();\nloop invariant x1 >= x2 ==> x3 >= x2;\nloop invariant x1 >= x3 ==> x2 >= x3;\nloop invariant x1 >= x2 ==> (x3 >= x2 ==> x3 >= x1);\nloop invariant x1 >= x3 ==> (x2 >= x3 ==> x2 >= x1);\nloop invariant (x1 >= x2 && x3 >= x2) ==> (x1 >= x3 && x2 >= x3);\nloop invariant x1 >= x2 ==> (x3 >= x2 ==> x1 >= x3);\nloop invariant x1 >= x3 ==> (x2 >= x3 ==> x1 >= x2);\nloop invariant (x1 >= x2 && x3 >= x2) ==> (x1 >= x3 && x2 >= x3);\nloop invariant x1 >= x2 ==> (x3 >= x2 ==> x1 >= x3);\nloop invariant x1 >= x3 ==> (x2 >= x3 ==> x1 >= x2);\nloop invariant (x1 >= x2 && x3 >= x2) ==> (x1 >= x3 && x2 >= x3);\nloop invariant x1 >= x2 ==> (x3 >= x2 ==> x1 >= x3);\nloop invariant x1 >= x3 ==> (x2 >= x3 ==> x1 >= x2);\nloop invariant (x1 >= x2 && x3 >= x2) ==> (x1 >= x3 && x2 >= x3);\nloop invariant x1 >= x2 ==> (x3 >= x2 ==> x1 >= x3);\nloop invariant x1 >= x3 ==> (x2 >= x3 ==> x1 >= x2);\nloop invariant (x1 >= x2 && x3 >= x2) ==> (x1 >= x3 && x2 >= x3);\nloop invariant x1 >= x2 ==> (x3 >= x2 ==> x1 >= x3);\nloop invariant x1 >= x3 ==> (x2 >= x3 ==> x1 >= x2);\nloop invariant (x1 >= x2 && x3 >= x2) ==> (x1 >= x3 && x2 >= x3);\nloop invariant x1 >= x2 ==> (x3 >= x2 ==> x1 >= x3);\nloop invariant x1 >= x3 ==> (x2 >= x3 ==> x1 >= x2);\nloop invariant (x1 >= x2 && x3 >= x2) ==> (x1 >= x3 && x2 >= x3);\nloop invariant x1 >= x2 ==> (x3 >= x2 ==> x1 >= x3);\nloop invariant x1 >= x3 ==> (x2 >= x3 ==> x1 >= x2);\nloop invariant (x1 >= x2 && x3 >= x2) ==> (x1 >= x3 && x2 >= x3);\nloop invariant x1 >= x2 ==> (x3 >= x2 ==> x1 >= x3);\nloop invariant x1 >= x3 ==> (x2 >= x3 ==> x1 >= x2);\nloop invariant (x1 >= x2 && x3 >= x2) ==> (x1 >= x3 && x2 >= x3);\nloop invariant x1 >= x2 ==> (x3 >= x2 ==> x1 >= x3);\nloop invariant x1 >= x3 ==> (x2 >= x3 ==> x1 >= x2);\nloop invariant (x1 >= x2 && x3 >= x2) ==> (x1 >= x3 && x2 >= x3);\nloop invariant x1 >= x2 ==> (x3 >= x2 ==> x1 >= x3);\nloop invariant x1 >= x3 ==> (x2 >= x3 ==> x1 >= x2);\nloop invariant (x1 >= x2 && x3 >= x2) ==> (x1 >= x3 && x2 >= x3);\nloop invariant x1 >= x2 ==> (x3 >= x2 ==> x1 >= x3);\nloop invariant x1 >= x3 ==> (x2 >= x3 ==> x1 >= x2);\nloop invariant (x1 >= x2 && x3 >= x2) ==> (x1 >= x3 && x2 >= x3);\nloop invariant x1 >= x2 ==> (x3 >= x2 ==> x1 >= x3);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x1 <= 2147483647;\nloop invariant 0 <= x2 <= 2147483647;\nloop invariant 0 <= x3 <= 2147483647;\nloop invariant 0 <= d1 <= 2147483647;\nloop invariant 0 <= d2 <= 2147483647;\nloop invariant 0 <= d3 <= 2147483647;\nloop invariant c1 == 0 || c1 == 1;\nloop invariant c2 == 0 || c2 == 1;\nloop invariant (x1 >= d1 && x1 >= d2 && x1 >= d3 && x2 >= d1 && x2 >= d2 && x2 >= d3 && x3 >= d1 && x3 >= d2 && x3 >= d3) ==> x1 >= x2 && x1 >= x3;\nloop invariant (x1 >= d1 && x1 >= d2 && x1 >= d3 && x2 >= d1 && x2 >= d2 && x2 >= d3 && x3 >= d1 && x3 >= d2 && x3 >= d3) ==> x2 >= x3;\nloop invariant x1 <= 2147483647 - (d1 * (unknown_uint() + 1) * (unknown_uint() + 1) / 2);\nloop invariant x2 <= 2147483647 - (d2 * (unknown_uint() + 1) * (unknown_uint() + 1) / 2);\nloop invariant x3 <= 2147483647 - (d3 * (unknown_uint() + 1) * (unknown_uint() + 1) / 2);\n*/\n```",
            "```\n/*@\nloop invariant x1 > 0 ==> d1 > 0;\nloop invariant x2 > 0 ==> d2 > 0;\nloop invariant x3 > 0 ==> d3 > 0;\nloop invariant x1 == 0 ==> d1 <= 0;\nloop invariant x2 == 0 ==> d2 <= 0;\nloop invariant x3 == 0 ==> d3 <= 0;\nloop invariant x1 == 0 ==> x2 > 0 ==> d1 <= 0 ==> d2 > 0;\nloop invariant x1 == 0 ==> x3 > 0 ==> d1 <= 0 ==> d3 > 0;\nloop invariant x2 == 0 ==> x3 > 0 ==> d2 <= 0 ==> d3 > 0;\nloop invariant x1 > 0 ==> x2 > 0 ==> x3 > 0 ==> d1 > 0 ==> d2 > 0 ==> d3 > 0;\nloop invariant x1 > 0 ==> x2 > 0 ==> x3 > 0 ==> d1 <= 0 ==> d2 <= 0 ==> d3 <= 0;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x1 <= 2147483647;\nloop invariant 0 <= x2 <= 2147483647;\nloop invariant 0 <= x3 <= 2147483647;\nloop invariant 0 <= d1 <= 2147483647;\nloop invariant 0 <= d2 <= 2147483647;\nloop invariant 0 <= d3 <= 2147483647;\nloop invariant c1 == 0 || c1 == 1;\nloop invariant c2 == 0 || c2 == 1;\nloop invariant (x1 > 0 && x2 > 0 && x3 > 0) ==> (x1 >= d1 && x2 >= d2 && x3 >= d3);\nloop invariant (x1 > 0 && x2 > 0 && x3 > 0) ==> (x1 >= d1 && x2 >= d2 && x3 >= d3);\nloop invariant (x1 > 0 && x2 > 0 && x3 > 0) ==> (x1 >= d1 && x2 >= d2 && x3 >= d3);\nloop invariant (x1 > 0 && x2 > 0 && x3 > 0) ==> (x1 >= d1 && x2 >= d2 && x3 >= d3);\nloop invariant (x1 > 0 && x2 > 0 && x3 > 0) ==> (x1 >= d1 && x2 >= d2 && x3 >= d3);\nloop invariant (x1 > 0 && x2 > 0 && x3 > 0) ==> (x1 >= d1 && x2 >= d2 && x3 >= d3);\nloop invariant (x1 > 0 && x2 > 0 && x3 > 0) ==> (x1 >= d1 && x2 >= d2 && x3 >= d3);\nloop invariant (x1 > 0 && x2 > 0 && x3 > 0) ==> (x1 >= d1 && x2 >= d2 && x3 >= d3);\nloop invariant (x1 > 0 && x2 > 0 && x3 > 0) ==> (x1 >= d1 && x2 >= d2 && x3 >= d3);\nloop invariant (x1 > 0 && x2 > 0 && x3 > 0) ==> (x1 >= d1 && x2 >= d2 && x3 >= d3);\nloop invariant (x1 > 0 && x2 > 0 && x3 > 0) ==> (x1 >= d1 && x2 >= d2 && x3 >= d3);\nloop invariant (x1 > 0 && x2 > 0 && x3 > 0) ==> (x1 >= d1 && x2 >= d2 && x3 >= d3);\nloop invariant (x1 > 0 && x2 > 0 && x3 > 0) ==> (x1 >= d1 && x2 >= d2 && x3 >= d3);\nloop invariant (x1 > 0 && x2 > 0 && x3 > 0) ==> (x1 >= d1 && x2 >= d2 && x3 >= d3);\nloop invariant (x1 > 0 && x2 > 0 && x3 > 0) ==> (x1 >= d1 && x2 >= d2 && x3 >= d3);\nloop invariant (x1 > 0 && x2 > 0 && x3 > 0) ==> (x1 >= d1 && x2 >= d2 && x3 >= d3);\nloop invariant (x1 > 0 && x2 > 0 && x3 > 0) ==> (x1 >= d1 && x2 >= d2 && x3 >= d3);\nloop invariant (x1 > 0 && x2 > 0 && x3 > 0) ==> (x1 >= d1 && x2 >= d2 && x3 >= d3);\nloop invariant (x1 > 0 && x2 > 0 && x3 > 0) ==> (x1 >= d1 && x2 >= d2 && x3 >= d3);\nloop invariant (x1 > 0 && x2 > 0 && x3 > 0) ==> (x1 >= d1 && x2 >= d2 && x3 >= d3);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  unsigned int x1=unknown_uint(), x2=unknown_uint(), x3=unknown_uint();\n  unsigned int d1=1, d2=1, d3=1;\n  _Bool c1=unknown_bool(), c2=unknown_bool();\n  \n  /*@\n\n\n\nloop invariant i4: 0 <= d1 <= 2147483647;\nloop invariant i5: 0 <= d2 <= 2147483647;\nloop invariant i6: 0 <= d3 <= 2147483647;\nloop invariant i7: c1 == 0 || c1 == 1;\nloop invariant i8: c2 == 0 || c2 == 1;\n\n*/\nwhile(x1>0 && x2>0 && x3>0)\n  {\n    if (c1) x1=x1-d1;\n    else if (c2) x2=x2-d2;\n    else x3=x3-d3;\n    c1=unknown_bool();\n    c2=unknown_bool();\n  }\n\n  {;\n//@ assert(x1==0 || x2==0 || x3==0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 15,
                "annotations": "```\n/*@\nloop invariant 0 <= x1 <= unknown_uint();\nloop invariant 0 <= x2 <= unknown_uint();\nloop invariant 0 <= x3 <= unknown_uint();\nloop invariant d1 > 0;\nloop invariant d2 > 0;\nloop invariant d3 > 0;\nloop invariant c1 || c2;\nloop invariant x1 >= d1 * (unknown_uint() - unknown_uint() + 1) / 2;\nloop invariant x2 >= d2 * (unknown_uint() - unknown_uint() + 1) / 2;\nloop invariant x3 >= d3 * (unknown_uint() - unknown_uint() + 1) / 2;\nloop invariant x1 + x2 + x3 >= unknown_uint();\nloop invariant x1 + x2 + x3 <= (unknown_uint() - unknown_uint() + 1) * 3 / 2;\nloop invariant x1 >= unknown_uint() - d1 * (unknown_uint() - unknown_uint() + 1) / 2;\nloop invariant x2 >= unknown_uint() - d2 * (unknown_uint() - unknown_uint() + 1) / 2;\nloop invariant x3 >= unknown_uint() - d3 * (unknown_uint() - unknown_uint() + 1) / 2;\nloop invariant x1 <= unknown_uint();\nloop invariant x2 <= unknown_uint();\nloop invariant x3 <= unknown_uint();\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  unsigned int x1=unknown_uint(), x2=unknown_uint(), x3=unknown_uint();\n  unsigned int d1=1, d2=1, d3=1;\n  _Bool c1=unknown_bool(), c2=unknown_bool();\n  \n  /*@\n\n\n\nloop invariant i4: d1 > 0;\nloop invariant i5: d2 > 0;\nloop invariant i6: d3 > 0;\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile(x1>0 && x2>0 && x3>0)\n  {\n    if (c1) x1=x1-d1;\n    else if (c2) x2=x2-d2;\n    else x3=x3-d3;\n    c1=unknown_bool();\n    c2=unknown_bool();\n  }\n\n  {;\n//@ assert(x1==0 || x2==0 || x3==0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 1 <= d1 <= x1;\nloop invariant 1 <= d2 <= x2;\nloop invariant 1 <= d3 <= x3;\nloop invariant c1 || c2;\nloop invariant x1 >= x2;\nloop invariant x1 >= x3;\nloop invariant x2 >= x3;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  unsigned int x1=unknown_uint(), x2=unknown_uint(), x3=unknown_uint();\n  unsigned int d1=1, d2=1, d3=1;\n  _Bool c1=unknown_bool(), c2=unknown_bool();\n  \n  /*@\n\n\n\n\n\n\n\n*/\nwhile(x1>0 && x2>0 && x3>0)\n  {\n    if (c1) x1=x1-d1;\n    else if (c2) x2=x2-d2;\n    else x3=x3-d3;\n    c1=unknown_bool();\n    c2=unknown_bool();\n  }\n\n  {;\n//@ assert(x1==0 || x2==0 || x3==0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 < x2 <= 100000;\nloop invariant 0 < x1 <= x2;\nloop invariant 0 < x3 <= x2;\nloop invariant 0 <= d1 <= 100000;\nloop invariant 0 <= d2 <= 100000;\nloop invariant 0 <= d3 <= 100000;\nloop invariant c1 || c2;\nloop invariant !(c1 && c2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  unsigned int x1=unknown_uint(), x2=unknown_uint(), x3=unknown_uint();\n  unsigned int d1=1, d2=1, d3=1;\n  _Bool c1=unknown_bool(), c2=unknown_bool();\n  \n  /*@\n\n\n\nloop invariant i4: 0 <= d1 <= 100000;\nloop invariant i5: 0 <= d2 <= 100000;\nloop invariant i6: 0 <= d3 <= 100000;\n\n\n*/\nwhile(x1>0 && x2>0 && x3>0)\n  {\n    if (c1) x1=x1-d1;\n    else if (c2) x2=x2-d2;\n    else x3=x3-d3;\n    c1=unknown_bool();\n    c2=unknown_bool();\n  }\n\n  {;\n//@ assert(x1==0 || x2==0 || x3==0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x1 <= max(x1, 0), 0 <= x2 <= max(x2, 0), 0 <= x3 <= max(x3, 0); loop invariant d1 >= 1, d2 >= 1, d3 >= 1; loop invariant (c1 && x1 >= d1) || (!c1 && x1 <= d1); loop invariant (c2 && x2 >= d2) || (!c2 && x2 <= d2); loop invariant (x1 > 0 && x2 > 0 && x3 > 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  unsigned int x1=unknown_uint(), x2=unknown_uint(), x3=unknown_uint();\n  unsigned int d1=1, d2=1, d3=1;\n  _Bool c1=unknown_bool(), c2=unknown_bool();\n  \n  /*@\n\n*/\nwhile(x1>0 && x2>0 && x3>0)\n  {\n    if (c1) x1=x1-d1;\n    else if (c2) x2=x2-d2;\n    else x3=x3-d3;\n    c1=unknown_bool();\n    c2=unknown_bool();\n  }\n\n  {;\n//@ assert(x1==0 || x2==0 || x3==0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 14,
                "annotations": "```\n/*@\nloop invariant 0 <= x1 <= unknown_uint();\nloop invariant 0 <= x2 <= unknown_uint();\nloop invariant 0 <= x3 <= unknown_uint();\nloop invariant 1 <= d1 <= unknown_uint();\nloop invariant 1 <= d2 <= unknown_uint();\nloop invariant 1 <= d3 <= unknown_uint();\nloop invariant (x1 == 0 || x2 == 0 || x3 == 0) ==> c1 == 0 && c2 == 0;\nloop invariant c1 == 0 ==> x1 == 0;\nloop invariant c2 == 0 ==> x2 == 0;\nloop invariant x1 == 0 ==> c1 == 0;\nloop invariant x2 == 0 ==> c2 == 0;\nloop invariant x1 == 0 || x2 == 0 || x3 == 0 ==> d1 == 1;\nloop invariant x1 == 0 || x2 == 0 || x3 == 0 ==> d2 == 1;\nloop invariant x1 == 0 || x2 == 0 || x3 == 0 ==> d3 == 1;\nloop invariant x1 == 0 || x2 == 0 || x3 == 0 ==> unknown_bool() == 0;\nloop invariant x1 == 0 || x2 == 0 || x3 == 0 ==> unknown_bool() == 1;\nloop invariant x1 == 0 || x2 == 0 || x3 == 0 ==> unknown_bool() == 0 && unknown_bool() == 1;\nloop invariant x1 == 0 || x2 == 0 || x3 == 0 ==> unknown_bool() == 1 && unknown_bool() == 0;\nloop invariant x1 == 0 || x2 == 0 || x3 == 0 ==> unknown_bool() == 1 && unknown_bool() == 1;\nloop invariant x1 == 0 || x2 == 0 || x3 == 0 ==> unknown_bool() == 0 && unknown_bool() == 0;\nloop invariant x1 == 0 || x2 == 0 || x3 == 0 ==> unknown_bool() == 1 && unknown_bool() == 0;\nloop invariant x1 == 0 || x2 == 0 || x3 == 0 ==> unknown_bool() == 0 && unknown_bool() == 1;\nloop invariant x1 == 0 || x2 == 0 || x3 == 0 ==> unknown_bool() == 0 && unknown_bool() == 0;\nloop invariant x1 == 0 || x2 == 0 || x3 == 0 ==> unknown_bool() == 1 && unknown_bool() == 1;\nloop invariant x1 == 0 || x2 == 0 || x3 == 0 ==> unknown_bool() == 0 && unknown_bool() == 0;\nloop invariant x1 == 0 || x2 == 0 || x3 == 0 ==> unknown_bool() == 1 && unknown_bool() == 0;\nloop invariant x1 == 0 || x2 == 0 || x3 == 0 ==> unknown_bool() == 0 && unknown_bool() == 1;\nloop invariant x1 == 0 || x2 == 0 || x3 == 0 ==> unknown_bool() == 0 && unknown_bool() == 0;\nloop invariant x1 == 0 || x2 == 0 || x3 == 0 ==> unknown_bool() == 1 && unknown_bool() == 1;\nloop invariant x1 == 0 || x2 == 0 || x3 == 0 ==> unknown_bool() == 0 && unknown_bool() == 0;\nloop invariant x1 == 0 || x2 == 0 || x3 == 0 ==> unknown_bool() == 1 && unknown_bool() == 0;\nloop invariant x1 == 0 || x2 == 0 || x3 == 0 ==> unknown_bool() == 0 && unknown_bool() == 1;\nloop invariant x1 == 0 || x2 == 0 || x3 == 0 ==> unknown_bool() == 0 && unknown_bool() == 0;\nloop invariant x1 == 0 || x2 == 0 || x3 == 0 ==> unknown_bool() == 1 && unknown_bool() == 1;\nloop invariant x1 == 0 || x2 == 0 || x3 == 0 ==> unknown_bool() == 0 && unknown_bool() == 0;\nloop invariant x1 == 0 || x2 == 0 || x3 == 0 ==> unknown_bool() == 1 && unknown_bool() == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  unsigned int x1=unknown_uint(), x2=unknown_uint(), x3=unknown_uint();\n  unsigned int d1=1, d2=1, d3=1;\n  _Bool c1=unknown_bool(), c2=unknown_bool();\n  \n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile(x1>0 && x2>0 && x3>0)\n  {\n    if (c1) x1=x1-d1;\n    else if (c2) x2=x2-d2;\n    else x3=x3-d3;\n    c1=unknown_bool();\n    c2=unknown_bool();\n  }\n\n  {;\n//@ assert(x1==0 || x2==0 || x3==0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 11,
                "annotations": "```\n/*@\nloop invariant 0 <= x1 <= y1;\nloop invariant 0 <= x2 <= y2;\nloop invariant 0 <= x3 <= y3;\nloop invariant y1 >= d1;\nloop invariant y2 >= d2;\nloop invariant y3 >= d3;\nloop invariant x1 >= (y1 - d1) * (y1 - 1) / 2;\nloop invariant x2 >= (y2 - d2) * (y2 - 1) / 2;\nloop invariant x3 >= (y3 - d3) * (y3 - 1) / 2;\nloop invariant x1 >= x2 >= x3;\nloop invariant y1 >= y2 >= y3;\nloop invariant y1 >= y2 >= y3;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  unsigned int x1=unknown_uint(), x2=unknown_uint(), x3=unknown_uint();\n  unsigned int d1=1, d2=1, d3=1;\n  _Bool c1=unknown_bool(), c2=unknown_bool();\n  \n  /*@\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile(x1>0 && x2>0 && x3>0)\n  {\n    if (c1) x1=x1-d1;\n    else if (c2) x2=x2-d2;\n    else x3=x3-d3;\n    c1=unknown_bool();\n    c2=unknown_bool();\n  }\n\n  {;\n//@ assert(x1==0 || x2==0 || x3==0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant c1 && c2 ==> (x1==0 || x2==0 || x3==0);\nloop invariant x1 >= 0 && x2 >= 0 && x3 >= 0;\nloop invariant d1 >= 1 && d2 >= 1 && d3 >= 1;\nloop invariant c1 || c2 ==> (x1>=0 && x2>=0 && x3>=0);\nloop invariant !(c1 && c2) ==> (x1>=0 && x2>=0 && x3>=0);\nloop invariant !(c1 && c2) ==> (d1>=1 && d2>=1 && d3>=1);\nloop invariant c1 ==> (x1>=0 && x2>=0 && x3>=0);\nloop invariant c1 ==> (d1>=1 && d2>=1 && d3>=1);\nloop invariant !(c1 && c2) ==> (x1>=0 && x2>=0 && x3>=0);\nloop invariant !(c1 && c2) ==> (d1>=1 && d2>=1 && d3>=1);\nloop invariant !(c1 && c2) ==> (x1>=0 && x2>=0 && x3>=0);\nloop invariant !(c1 && c2) ==> (d1>=1 && d2>=1 && d3>=1);\nloop invariant !(c1 && c2) ==> (x1>=0 && x2>=0 && x3>=0);\nloop invariant !(c1 && c2) ==> (d1>=1 && d2>=1 && d3>=1);\nloop invariant !(c1 && c2) ==> (x1>=0 && x2>=0 && x3>=0);\nloop invariant !(c1 && c2) ==> (d1>=1 && d2>=1 && d3>=1);\nloop invariant !(c1 && c2) ==> (x1>=0 && x2>=0 && x3>=0);\nloop invariant !(c1 && c2) ==> (d1>=1 && d2>=1 && d3>=1);\nloop invariant !(c1 && c2) ==> (x1>=0 && x2>=0 && x3>=0);\nloop invariant !(c1 && c2) ==> (d1>=1 && d2>=1 && d3>=1);\nloop invariant !(c1 && c2) ==> (x1>=0 && x2>=0 && x3>=0);\nloop invariant !(c1 && c2) ==> (d1>=1 && d2>=1 && d3>=1);\nloop invariant !(c1 && c2) ==> (x1>=0 && x2>=0 && x3>=0);\nloop invariant !(c1 && c2) ==> (d1>=1 && d2>=1 && d3>=1);\nloop invariant !(c1 && c2) ==> (x1>=0 && x2>=0 && x3>=0);\nloop invariant !(c1 && c2) ==> (d1>=1 && d2>=1 && d3>=1);\nloop invariant !(c1 && c2) ==> (x1>=0 && x2>=0 && x3>=0);\nloop invariant !(c1 && c2) ==> (d1>=1 && d2>=1 && d3>=1);\nloop invariant !(c1 && c2) ==> (x1>=0 && x2>=0 && x3>=0);\nloop invariant !(c1 && c2) ==> (d1>=1 && d2>=1 && d3>=1);\nloop invariant !(c1 && c2) ==> (x1>=0 && x2>=0 && x3>=0);\nloop invariant !(c1 && c2) ==> (d1>=1 && d2>=1 && d3>=1);\nloop invariant !(c1 && c2) ==> (x1>=0 && x2>=0 && x3>=0);\nloop invariant !(c1 && c2) ==> (d1>=1 && d2>=1 && d3>=1);\nloop invariant !(c1 && c2) ==> (x1>=0 && x2>=0 && x3>=0);\nloop invariant !(c1 && c2) ==> (d1>=1 && d2>=1 && d3>=1);\nloop invariant !(c1 && c2) ==> (x1>=0 && x2>=0 && x3>=0);\nloop invariant !(c1 && c2) ==> (d1>=1 && d2>=1 && d3>=1);\nloop invariant !(c1 && c2) ==> (x1>=0 && x2>=0 && x3>=0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  unsigned int x1=unknown_uint(), x2=unknown_uint(), x3=unknown_uint();\n  unsigned int d1=1, d2=1, d3=1;\n  _Bool c1=unknown_bool(), c2=unknown_bool();\n  \n  /*@\n\nloop invariant i2: x1 >= 0 && x2 >= 0 && x3 >= 0;\nloop invariant i3: d1 >= 1 && d2 >= 1 && d3 >= 1;\nloop invariant i4: c1 || c2 ==> (x1>=0 && x2>=0 && x3>=0);\nloop invariant i5: !(c1 && c2) ==> (x1>=0 && x2>=0 && x3>=0);\nloop invariant i6: !(c1 && c2) ==> (d1>=1 && d2>=1 && d3>=1);\nloop invariant i7: c1 ==> (x1>=0 && x2>=0 && x3>=0);\nloop invariant i8: c1 ==> (d1>=1 && d2>=1 && d3>=1);\n*/\nwhile(x1>0 && x2>0 && x3>0)\n  {\n    if (c1) x1=x1-d1;\n    else if (c2) x2=x2-d2;\n    else x3=x3-d3;\n    c1=unknown_bool();\n    c2=unknown_bool();\n  }\n\n  {;\n//@ assert(x1==0 || x2==0 || x3==0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= d1 <= x1;\nloop invariant 0 <= d2 <= x2;\nloop invariant 0 <= d3 <= x3;\nloop invariant 0 <= x1 <= 2^32 - 1;\nloop invariant 0 <= x2 <= 2^32 - 1;\nloop invariant 0 <= x3 <= 2^32 - 1;\nloop invariant c1 || c2;\nloop invariant c1 && c1 ==> (x1 >= d1);\nloop invariant c2 && c2 ==> (x2 >= d2);\nloop invariant !(c1 || c2) ==> (x3 >= d3);\nloop invariant c1 && c2 ==> (x1 >= d1 && x2 >= d2);\nloop invariant !(c1 && c2) ==> (x3 >= d3);\nloop invariant c1 ==> (x1 >= d1);\nloop invariant c2 ==> (x2 >= d2);\nloop invariant !(c1 && c2) ==> (x3 >= d3);\nloop invariant c1 && c2 ==> (x1 >= d1 && x2 >= d2);\nloop invariant !(c1 && c2) ==> (x3 >= d3);\nloop invariant c1 && c2 ==> (x1 >= d1 && x2 >= d2);\nloop invariant !(c1 && c2) ==> (x3 >= d3);\nloop invariant c1 && c2 ==> (x1 >= d1 && x2 >= d2);\nloop invariant !(c1 && c2) ==> (x3 >= d3);\nloop invariant c1 && c2 ==> (x1 >= d1 && x2 >= d2);\nloop invariant !(c1 && c2) ==> (x3 >= d3);\nloop invariant c1 && c2 ==> (x1 >= d1 && x2 >= d2);\nloop invariant !(c1 && c2) ==> (x3 >= d3);\nloop invariant c1 && c2 ==> (x1 >= d1 && x2 >= d2);\nloop invariant !(c1 && c2) ==> (x3 >= d3);\nloop invariant c1 && c2 ==> (x1 >= d1 && x2 >= d2);\nloop invariant !(c1 && c2) ==> (x3 >= d3);\nloop invariant c1 && c2 ==> (x1 >= d1 && x2 >= d2);\nloop invariant !(c1 && c2) ==> (x3 >= d3);\nloop invariant c1 && c2 ==> (x1 >= d1 && x2 >= d2);\nloop invariant !(c1 && c2) ==> (x3 >= d3);\nloop invariant c1 && c2 ==> (x1 >= d1 && x2 >= d2);\nloop invariant !(c1 && c2) ==> (x3 >= d3);\nloop invariant c1 && c2 ==> (x1 >= d1 && x2 >= d2);\nloop invariant !(c1 && c2) ==> (x3 >= d3);\nloop invariant c1 && c2 ==> (x1 >= d1 && x2 >= d2);\nloop invariant !(c1 && c2) ==> (x3 >= d3);\nloop invariant c1 && c2 ==> (x1 >= d1 && x2 >= d2);\nloop invariant !(c1 && c2) ==> (x3 >= d3);\nloop invariant c1 && c2 ==> (x1 >= d1 && x2 >= d2);\nloop invariant !(c1 && c2) ==> (x3 >= d3);\nloop invariant c1 && c2 ==> (x1 >= d1 && x2 >= d2);\nloop invariant !(c1 && c2) ==> (x3 >= d3);\nloop invariant c1 && c2 ==> (x1 >= d1 && x2 >= d2);\nloop invariant !(c1 && c2) ==> (x3 >= d3);\nloop invariant c1 && c2 ==> (x1 >= d1 && x2 >= d2);\nloop invariant !(c1 && c2) ==> (x3 >= d3);\nloop invariant c1 && c2 ==> (x1 >= d1 && x2 >= d2);\nloop invariant !(c1 && c2) ==> (x3 >= d3);\nloop invariant c1 && c2 ==> (x1 >= d1 && x2 >= d2);\nloop invariant !(c1 && c2) ==> (x3 >= d3);\nloop invariant c1 && c2 ==> (x1 >= d1 && x2 >= d2);\nloop invariant !(c1 && c2) ==> (x3 >= d3);\nloop invariant c1 && c2 ==> (x1 >= d1 && x2 >= d2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  unsigned int x1=unknown_uint(), x2=unknown_uint(), x3=unknown_uint();\n  unsigned int d1=1, d2=1, d3=1;\n  _Bool c1=unknown_bool(), c2=unknown_bool();\n  \n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile(x1>0 && x2>0 && x3>0)\n  {\n    if (c1) x1=x1-d1;\n    else if (c2) x2=x2-d2;\n    else x3=x3-d3;\n    c1=unknown_bool();\n    c2=unknown_bool();\n  }\n\n  {;\n//@ assert(x1==0 || x2==0 || x3==0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 13,
                "annotations": "```\n/*@\nloop invariant 0 <= x1 <= unknown_uint();\nloop invariant 0 <= x2 <= unknown_uint();\nloop invariant 0 <= x3 <= unknown_uint();\nloop invariant 0 <= d1 <= unknown_uint();\nloop invariant 0 <= d2 <= unknown_uint();\nloop invariant 0 <= d3 <= unknown_uint();\nloop invariant c1 == unknown_bool();\nloop invariant c2 == unknown_bool();\nloop invariant unknown_uint() == assume(x1 > 0);\nloop invariant unknown_uint() == assume(x2 > 0);\nloop invariant unknown_uint() == assume(x3 > 0);\nloop invariant unknown_uint() == assume(c1 == unknown_bool());\nloop invariant unknown_uint() == assume(c2 == unknown_bool());\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  unsigned int x1=unknown_uint(), x2=unknown_uint(), x3=unknown_uint();\n  unsigned int d1=1, d2=1, d3=1;\n  _Bool c1=unknown_bool(), c2=unknown_bool();\n  \n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile(x1>0 && x2>0 && x3>0)\n  {\n    if (c1) x1=x1-d1;\n    else if (c2) x2=x2-d2;\n    else x3=x3-d3;\n    c1=unknown_bool();\n    c2=unknown_bool();\n  }\n\n  {;\n//@ assert(x1==0 || x2==0 || x3==0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant x1 >= x2;\nloop invariant x1 >= x3;\nloop invariant x2 >= x3;\nloop invariant x1 + x2 + x3 <= 3*max(x1, x2, x3);\nloop invariant x1 <= x1 + x2 + x3;\nloop invariant x2 <= x1 + x2 + x3;\nloop invariant x3 <= x1 + x2 + x3;\nloop invariant x1 <= x1 + x2 + x3;\nloop invariant x2 <= x1 + x2 + x3;\nloop invariant x3 <= x1 + x2 + x3;\nloop invariant x1 <= x1 + x2 + x3;\nloop invariant x2 <= x1 + x2 + x3;\nloop invariant x3 <= x1 + x2 + x3;\nloop invariant x1 <= x1 + x2 + x3;\nloop invariant x2 <= x1 + x2 + x3;\nloop invariant x3 <= x1 + x2 + x3;\nloop invariant x1 <= x1 + x2 + x3;\nloop invariant x2 <= x1 + x2 + x3;\nloop invariant x3 <= x1 + x2 + x3;\nloop invariant x1 <= x1 + x2 + x3;\nloop invariant x2 <= x1 + x2 + x3;\nloop invariant x3 <= x1 + x2 + x3;\nloop invariant x1 <= x1 + x2 + x3;\nloop invariant x2 <= x1 + x2 + x3;\nloop invariant x3 <= x1 + x2 + x3;\nloop invariant x1 <= x1 + x2 + x3;\nloop invariant x2 <= x1 + x2 + x3;\nloop invariant x3 <= x1 + x2 + x3;\nloop invariant x1 <= x1 + x2 + x3;\nloop invariant x2 <= x1 + x2 + x3;\nloop invariant x3 <= x1 + x2 + x3;\nloop invariant x1 <= x1 + x2 + x3;\nloop invariant x2 <= x1 + x2 + x3;\nloop invariant x3 <= x1 + x2 + x3;\nloop invariant x1 <= x1 + x2 + x3;\nloop invariant x2 <= x1 + x2 + x3;\nloop invariant x3 <= x1 + x2 + x3;\nloop invariant x1 <= x1 + x2 + x3;\nloop invariant x2 <= x1 + x2 + x3;\nloop invariant x3 <= x1 + x2 + x3;\nloop invariant x1 <= x1 + x2 + x3;\nloop invariant x2 <= x1 + x2 + x3;\nloop invariant x3 <= x1 + x2 + x3;\nloop invariant x1 <= x1 + x2 + x3;\nloop invariant x2 <= x1 + x2 + x3;\nloop invariant x3 <= x1 + x2 + x3;\nloop invariant x1 <= x1 + x2 + x3;\nloop invariant x2 <= x1 + x2 + x3;\nloop invariant x3 <= x1 + x2 + x3;\nloop invariant x1 <= x1 + x2 + x3;\nloop invariant x2 <= x1 + x2 + x3;\nloop invariant x3 <= x1 + x2 + x3;\nloop invariant x1 <= x1 + x2 + x3;\nloop invariant x2 <= x1 + x2 + x3;\nloop invariant x3 <= x1 + x2 + x3;\nloop invariant x1 <= x1 + x2 + x3;\nloop invariant x2 <= x1 + x2 + x3;\nloop invariant x3 <= x1 + x2 + x3;\nloop invariant x1 <= x1 + x2 + x3;\nloop invariant x2 <= x1 + x2 + x3;\nloop invariant x3 <= x1 + x2 + x3;\nloop invariant x1 <= x1 + x2 + x3;\nloop invariant x2 <= x1 + x2 + x3;\nloop invariant x3 <= x1 + x2 + x3;\nloop invariant x1 <= x1 + x2 + x3;\nloop invariant x2 <= x1 + x2 + x3;\nloop invariant x3 <= x1 + x2 + x3;\nloop invariant x1 <= x1 + x2 + x3;\nloop invariant x2 <= x1 + x2 + x3;\nloop invariant x3 <= x1 + x2 + x3;\nloop invariant x1 <= x1 + x2 + x3;\nloop invariant x2 <= x1 + x2 + x3;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  unsigned int x1=unknown_uint(), x2=unknown_uint(), x3=unknown_uint();\n  unsigned int d1=1, d2=1, d3=1;\n  _Bool c1=unknown_bool(), c2=unknown_bool();\n  \n  /*@\n\n\n\n\nloop invariant i5: x1 <= x1 + x2 + x3;\nloop invariant i6: x2 <= x1 + x2 + x3;\nloop invariant i7: x3 <= x1 + x2 + x3;\n*/\nwhile(x1>0 && x2>0 && x3>0)\n  {\n    if (c1) x1=x1-d1;\n    else if (c2) x2=x2-d2;\n    else x3=x3-d3;\n    c1=unknown_bool();\n    c2=unknown_bool();\n  }\n\n  {;\n//@ assert(x1==0 || x2==0 || x3==0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x1 <= 4294967295;\nloop invariant 0 <= x2 <= 4294967295;\nloop invariant 0 <= x3 <= 4294967295;\nloop invariant 0 <= d1 <= 4294967295;\nloop invariant 0 <= d2 <= 4294967295;\nloop invariant 0 <= d3 <= 4294967295;\nloop invariant x1 <= x2;\nloop invariant x1 <= x3;\nloop invariant x2 <= x3;\nloop invariant x1 <= x2 + (x2 - 1) * d2 / 2;\nloop invariant x1 <= x3 + (x3 - 1) * d3 / 2;\nloop invariant x2 <= x3 + (x3 - 1) * d3 / 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  unsigned int x1=unknown_uint(), x2=unknown_uint(), x3=unknown_uint();\n  unsigned int d1=1, d2=1, d3=1;\n  _Bool c1=unknown_bool(), c2=unknown_bool();\n  \n  /*@\nloop invariant i1: 0 <= x1 <= 4294967295;\nloop invariant i2: 0 <= x2 <= 4294967295;\nloop invariant i3: 0 <= x3 <= 4294967295;\nloop invariant i4: 0 <= d1 <= 4294967295;\nloop invariant i5: 0 <= d2 <= 4294967295;\nloop invariant i6: 0 <= d3 <= 4294967295;\n\n\n\n\n\n\n*/\nwhile(x1>0 && x2>0 && x3>0)\n  {\n    if (c1) x1=x1-d1;\n    else if (c2) x2=x2-d2;\n    else x3=x3-d3;\n    c1=unknown_bool();\n    c2=unknown_bool();\n  }\n\n  {;\n//@ assert(x1==0 || x2==0 || x3==0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x1 <= INT_MAX;\nloop invariant 0 <= x2 <= INT_MAX;\nloop invariant 0 <= x3 <= INT_MAX;\nloop invariant 1 <= d1 <= INT_MAX;\nloop invariant 1 <= d2 <= INT_MAX;\nloop invariant 1 <= d3 <= INT_MAX;\nloop invariant c1 == unknown_bool();\nloop invariant c2 == unknown_bool();\nloop invariant x1 >= x2 ==> x3 >= x2;\nloop invariant x1 >= x3 ==> x2 >= x3;\nloop invariant x1 >= x2 ==> (x3 >= x2 ==> x3 >= x1);\nloop invariant x1 >= x3 ==> (x2 >= x3 ==> x2 >= x1);\nloop invariant (x1 >= x2 && x3 >= x2) ==> (x1 >= x3 && x2 >= x3);\nloop invariant x1 >= x2 ==> (x3 >= x2 ==> x1 >= x3);\nloop invariant x1 >= x3 ==> (x2 >= x3 ==> x1 >= x2);\nloop invariant (x1 >= x2 && x3 >= x2) ==> (x1 >= x3 && x2 >= x3);\nloop invariant x1 >= x2 ==> (x3 >= x2 ==> x1 >= x3);\nloop invariant x1 >= x3 ==> (x2 >= x3 ==> x1 >= x2);\nloop invariant (x1 >= x2 && x3 >= x2) ==> (x1 >= x3 && x2 >= x3);\nloop invariant x1 >= x2 ==> (x3 >= x2 ==> x1 >= x3);\nloop invariant x1 >= x3 ==> (x2 >= x3 ==> x1 >= x2);\nloop invariant (x1 >= x2 && x3 >= x2) ==> (x1 >= x3 && x2 >= x3);\nloop invariant x1 >= x2 ==> (x3 >= x2 ==> x1 >= x3);\nloop invariant x1 >= x3 ==> (x2 >= x3 ==> x1 >= x2);\nloop invariant (x1 >= x2 && x3 >= x2) ==> (x1 >= x3 && x2 >= x3);\nloop invariant x1 >= x2 ==> (x3 >= x2 ==> x1 >= x3);\nloop invariant x1 >= x3 ==> (x2 >= x3 ==> x1 >= x2);\nloop invariant (x1 >= x2 && x3 >= x2) ==> (x1 >= x3 && x2 >= x3);\nloop invariant x1 >= x2 ==> (x3 >= x2 ==> x1 >= x3);\nloop invariant x1 >= x3 ==> (x2 >= x3 ==> x1 >= x2);\nloop invariant (x1 >= x2 && x3 >= x2) ==> (x1 >= x3 && x2 >= x3);\nloop invariant x1 >= x2 ==> (x3 >= x2 ==> x1 >= x3);\nloop invariant x1 >= x3 ==> (x2 >= x3 ==> x1 >= x2);\nloop invariant (x1 >= x2 && x3 >= x2) ==> (x1 >= x3 && x2 >= x3);\nloop invariant x1 >= x2 ==> (x3 >= x2 ==> x1 >= x3);\nloop invariant x1 >= x3 ==> (x2 >= x3 ==> x1 >= x2);\nloop invariant (x1 >= x2 && x3 >= x2) ==> (x1 >= x3 && x2 >= x3);\nloop invariant x1 >= x2 ==> (x3 >= x2 ==> x1 >= x3);\nloop invariant x1 >= x3 ==> (x2 >= x3 ==> x1 >= x2);\nloop invariant (x1 >= x2 && x3 >= x2) ==> (x1 >= x3 && x2 >= x3);\nloop invariant x1 >= x2 ==> (x3 >= x2 ==> x1 >= x3);\nloop invariant x1 >= x3 ==> (x2 >= x3 ==> x1 >= x2);\nloop invariant (x1 >= x2 && x3 >= x2) ==> (x1 >= x3 && x2 >= x3);\nloop invariant x1 >= x2 ==> (x3 >= x2 ==> x1 >= x3);\nloop invariant x1 >= x3 ==> (x2 >= x3 ==> x1 >= x2);\nloop invariant (x1 >= x2 && x3 >= x2) ==> (x1 >= x3 && x2 >= x3);\nloop invariant x1 >= x2 ==> (x3 >= x2 ==> x1 >= x3);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  unsigned int x1=unknown_uint(), x2=unknown_uint(), x3=unknown_uint();\n  unsigned int d1=1, d2=1, d3=1;\n  _Bool c1=unknown_bool(), c2=unknown_bool();\n  \n  /*@\n\n\n\nloop invariant i4: 1 <= d1 <= INT_MAX;\nloop invariant i5: 1 <= d2 <= INT_MAX;\nloop invariant i6: 1 <= d3 <= INT_MAX;\n\n\n\n\n\n\n\n\n\n*/\nwhile(x1>0 && x2>0 && x3>0)\n  {\n    if (c1) x1=x1-d1;\n    else if (c2) x2=x2-d2;\n    else x3=x3-d3;\n    c1=unknown_bool();\n    c2=unknown_bool();\n  }\n\n  {;\n//@ assert(x1==0 || x2==0 || x3==0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x1 <= 2147483647;\nloop invariant 0 <= x2 <= 2147483647;\nloop invariant 0 <= x3 <= 2147483647;\nloop invariant 0 <= d1 <= 2147483647;\nloop invariant 0 <= d2 <= 2147483647;\nloop invariant 0 <= d3 <= 2147483647;\nloop invariant c1 == 0 || c1 == 1;\nloop invariant c2 == 0 || c2 == 1;\nloop invariant (x1 >= d1 && x1 >= d2 && x1 >= d3 && x2 >= d1 && x2 >= d2 && x2 >= d3 && x3 >= d1 && x3 >= d2 && x3 >= d3) ==> x1 >= x2 && x1 >= x3;\nloop invariant (x1 >= d1 && x1 >= d2 && x1 >= d3 && x2 >= d1 && x2 >= d2 && x2 >= d3 && x3 >= d1 && x3 >= d2 && x3 >= d3) ==> x2 >= x3;\nloop invariant x1 <= 2147483647 - (d1 * (unknown_uint() + 1) * (unknown_uint() + 1) / 2);\nloop invariant x2 <= 2147483647 - (d2 * (unknown_uint() + 1) * (unknown_uint() + 1) / 2);\nloop invariant x3 <= 2147483647 - (d3 * (unknown_uint() + 1) * (unknown_uint() + 1) / 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  unsigned int x1=unknown_uint(), x2=unknown_uint(), x3=unknown_uint();\n  unsigned int d1=1, d2=1, d3=1;\n  _Bool c1=unknown_bool(), c2=unknown_bool();\n  \n  /*@\n\n\n\nloop invariant i4: 0 <= d1 <= 2147483647;\nloop invariant i5: 0 <= d2 <= 2147483647;\nloop invariant i6: 0 <= d3 <= 2147483647;\nloop invariant i7: c1 == 0 || c1 == 1;\nloop invariant i8: c2 == 0 || c2 == 1;\n\n\n\n\n\n*/\nwhile(x1>0 && x2>0 && x3>0)\n  {\n    if (c1) x1=x1-d1;\n    else if (c2) x2=x2-d2;\n    else x3=x3-d3;\n    c1=unknown_bool();\n    c2=unknown_bool();\n  }\n\n  {;\n//@ assert(x1==0 || x2==0 || x3==0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant x1 > 0 ==> d1 > 0;\nloop invariant x2 > 0 ==> d2 > 0;\nloop invariant x3 > 0 ==> d3 > 0;\nloop invariant x1 == 0 ==> d1 <= 0;\nloop invariant x2 == 0 ==> d2 <= 0;\nloop invariant x3 == 0 ==> d3 <= 0;\nloop invariant x1 == 0 ==> x2 > 0 ==> d1 <= 0 ==> d2 > 0;\nloop invariant x1 == 0 ==> x3 > 0 ==> d1 <= 0 ==> d3 > 0;\nloop invariant x2 == 0 ==> x3 > 0 ==> d2 <= 0 ==> d3 > 0;\nloop invariant x1 > 0 ==> x2 > 0 ==> x3 > 0 ==> d1 > 0 ==> d2 > 0 ==> d3 > 0;\nloop invariant x1 > 0 ==> x2 > 0 ==> x3 > 0 ==> d1 <= 0 ==> d2 <= 0 ==> d3 <= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  unsigned int x1=unknown_uint(), x2=unknown_uint(), x3=unknown_uint();\n  unsigned int d1=1, d2=1, d3=1;\n  _Bool c1=unknown_bool(), c2=unknown_bool();\n  \n  /*@\nloop invariant i1: x1 > 0 ==> d1 > 0;\nloop invariant i2: x2 > 0 ==> d2 > 0;\nloop invariant i3: x3 > 0 ==> d3 > 0;\n\n\n\nloop invariant i7: x1 == 0 ==> x2 > 0 ==> d1 <= 0 ==> d2 > 0;\nloop invariant i8: x1 == 0 ==> x3 > 0 ==> d1 <= 0 ==> d3 > 0;\nloop invariant i9: x2 == 0 ==> x3 > 0 ==> d2 <= 0 ==> d3 > 0;\nloop invariant i10: x1 > 0 ==> x2 > 0 ==> x3 > 0 ==> d1 > 0 ==> d2 > 0 ==> d3 > 0;\nloop invariant i11: x1 > 0 ==> x2 > 0 ==> x3 > 0 ==> d1 <= 0 ==> d2 <= 0 ==> d3 <= 0;\n*/\nwhile(x1>0 && x2>0 && x3>0)\n  {\n    if (c1) x1=x1-d1;\n    else if (c2) x2=x2-d2;\n    else x3=x3-d3;\n    c1=unknown_bool();\n    c2=unknown_bool();\n  }\n\n  {;\n//@ assert(x1==0 || x2==0 || x3==0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 27: unexpected token ')'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  unsigned int x1=unknown_uint(), x2=unknown_uint(), x3=unknown_uint();\n  unsigned int d1=1, d2=1, d3=1;\n  _Bool c1=unknown_bool(), c2=unknown_bool();\n  \n  /*@\nloop invariant i1: 0 <= x1 <= 2147483647;\nloop invariant i2: 0 <= x2 <= 2147483647;\nloop invariant i3: 0 <= x3 <= 2147483647;\nloop invariant i4: 0 <= d1 <= 2147483647;\nloop invariant i5: 0 <= d2 <= 2147483647;\nloop invariant i6: 0 <= d3 <= 2147483647;\nloop invariant i7: c1 == 0 || c1 == 1;\nloop invariant i8: c2 == 0 || c2 == 1;\nloop invariant i9: (x1 > 0 && x2 > 0 && x3 > 0) ==> (x1 >= d1 && x2 >= d2 && x3 >= d3);\nloop invariant i10: 0 <= x1 <= unknown_uint();\nloop invariant i11: 0 <= x2 <= unknown_uint();\nloop invariant i12: 0 <= x3 <= unknown_uint();\nloop invariant i13: d1 > 0;\nloop invariant i14: d2 > 0;\nloop invariant i15: d3 > 0;\nloop invariant i16: c1 || c2;\nloop invariant i17: x1 >= d1 * (unknown_uint() - unknown_uint() + 1) / 2;\nloop invariant i18: x2 >= d2 * (unknown_uint() - unknown_uint() + 1) / 2;\nloop invariant i19: x3 >= d3 * (unknown_uint() - unknown_uint() + 1) / 2;\nloop invariant i20: x1 + x2 + x3 >= unknown_uint();\nloop invariant i21: x1 + x2 + x3 <= (unknown_uint() - unknown_uint() + 1) * 3 / 2;\nloop invariant i22: x1 >= unknown_uint() - d1 * (unknown_uint() - unknown_uint() + 1) / 2;\nloop invariant i23: x2 >= unknown_uint() - d2 * (unknown_uint() - unknown_uint() + 1) / 2;\nloop invariant i24: x3 >= unknown_uint() - d3 * (unknown_uint() - unknown_uint() + 1) / 2;\nloop invariant i25: x1 <= unknown_uint();\nloop invariant i26: x2 <= unknown_uint();\nloop invariant i27: x3 <= unknown_uint();\nloop invariant i28: 1 <= d1 <= x1;\nloop invariant i29: 1 <= d2 <= x2;\nloop invariant i30: 1 <= d3 <= x3;\nloop invariant i31: x1 >= x2;\nloop invariant i32: x1 >= x3;\nloop invariant i33: x2 >= x3;\nloop invariant i34: 0 < x2 <= 100000;\nloop invariant i35: 0 < x1 <= x2;\nloop invariant i36: 0 < x3 <= x2;\nloop invariant i37: 0 <= d1 <= 100000;\nloop invariant i38: 0 <= d2 <= 100000;\nloop invariant i39: 0 <= d3 <= 100000;\nloop invariant i40: !(c1 && c2);\nloop invariant i41: 0 <= x1 <= max(x1, 0), 0 <= x2 <= max(x2, 0), 0 <= x3 <= max(x3, 0); loop invariant d1 >= 1, d2 >= 1, d3 >= 1; loop invariant (c1 && x1 >= d1) || (!c1 && x1 <= d1); loop invariant (c2 && x2 >= d2) || (!c2 && x2 <= d2); loop invariant (x1 > 0 && x2 > 0 && x3 > 0);\nloop invariant i42: 1 <= d1 <= unknown_uint();\nloop invariant i43: 1 <= d2 <= unknown_uint();\nloop invariant i44: 1 <= d3 <= unknown_uint();\nloop invariant i45: (x1 == 0 || x2 == 0 || x3 == 0) ==> c1 == 0 && c2 == 0;\nloop invariant i46: c1 == 0 ==> x1 == 0;\nloop invariant i47: c2 == 0 ==> x2 == 0;\nloop invariant i48: x1 == 0 ==> c1 == 0;\nloop invariant i49: x2 == 0 ==> c2 == 0;\nloop invariant i50: x1 == 0 || x2 == 0 || x3 == 0 ==> d1 == 1;\nloop invariant i51: x1 == 0 || x2 == 0 || x3 == 0 ==> d2 == 1;\nloop invariant i52: x1 == 0 || x2 == 0 || x3 == 0 ==> d3 == 1;\nloop invariant i53: x1 == 0 || x2 == 0 || x3 == 0 ==> unknown_bool() == 0;\nloop invariant i54: x1 == 0 || x2 == 0 || x3 == 0 ==> unknown_bool() == 1;\nloop invariant i55: x1 == 0 || x2 == 0 || x3 == 0 ==> unknown_bool() == 0 && unknown_bool() == 1;\nloop invariant i56: x1 == 0 || x2 == 0 || x3 == 0 ==> unknown_bool() == 1 && unknown_bool() == 0;\nloop invariant i57: x1 == 0 || x2 == 0 || x3 == 0 ==> unknown_bool() == 1 && unknown_bool() == 1;\nloop invariant i58: x1 == 0 || x2 == 0 || x3 == 0 ==> unknown_bool() == 0 && unknown_bool() == 0;\nloop invariant i59: 0 <= x1 <= y1;\nloop invariant i60: 0 <= x2 <= y2;\nloop invariant i61: 0 <= x3 <= y3;\nloop invariant i62: y1 >= d1;\nloop invariant i63: y2 >= d2;\nloop invariant i64: y3 >= d3;\nloop invariant i65: x1 >= (y1 - d1) * (y1 - 1) / 2;\nloop invariant i66: x2 >= (y2 - d2) * (y2 - 1) / 2;\nloop invariant i67: x3 >= (y3 - d3) * (y3 - 1) / 2;\nloop invariant i68: x1 >= x2 >= x3;\nloop invariant i69: y1 >= y2 >= y3;\nloop invariant i70: c1 && c2 ==> (x1==0 || x2==0 || x3==0);\nloop invariant i71: x1 >= 0 && x2 >= 0 && x3 >= 0;\nloop invariant i72: d1 >= 1 && d2 >= 1 && d3 >= 1;\nloop invariant i73: c1 || c2 ==> (x1>=0 && x2>=0 && x3>=0);\nloop invariant i74: !(c1 && c2) ==> (x1>=0 && x2>=0 && x3>=0);\nloop invariant i75: !(c1 && c2) ==> (d1>=1 && d2>=1 && d3>=1);\nloop invariant i76: c1 ==> (x1>=0 && x2>=0 && x3>=0);\nloop invariant i77: c1 ==> (d1>=1 && d2>=1 && d3>=1);\nloop invariant i78: 0 <= d1 <= x1;\nloop invariant i79: 0 <= d2 <= x2;\nloop invariant i80: 0 <= d3 <= x3;\nloop invariant i81: 0 <= x1 <= 2^32 - 1;\nloop invariant i82: 0 <= x2 <= 2^32 - 1;\nloop invariant i83: 0 <= x3 <= 2^32 - 1;\nloop invariant i84: c1 && c1 ==> (x1 >= d1);\nloop invariant i85: c2 && c2 ==> (x2 >= d2);\nloop invariant i86: !(c1 || c2) ==> (x3 >= d3);\nloop invariant i87: c1 && c2 ==> (x1 >= d1 && x2 >= d2);\nloop invariant i88: !(c1 && c2) ==> (x3 >= d3);\nloop invariant i89: c1 ==> (x1 >= d1);\nloop invariant i90: c2 ==> (x2 >= d2);\nloop invariant i91: 0 <= d1 <= unknown_uint();\nloop invariant i92: 0 <= d2 <= unknown_uint();\nloop invariant i93: 0 <= d3 <= unknown_uint();\nloop invariant i94: c1 == unknown_bool();\nloop invariant i95: c2 == unknown_bool();\nloop invariant i96: unknown_uint() == assume(x1 > 0);\nloop invariant i97: unknown_uint() == assume(x2 > 0);\nloop invariant i98: unknown_uint() == assume(x3 > 0);\nloop invariant i99: unknown_uint() == assume(c1 == unknown_bool());\nloop invariant i100: unknown_uint() == assume(c2 == unknown_bool());\nloop invariant i101: x1 + x2 + x3 <= 3*max(x1, x2, x3);\nloop invariant i102: x1 <= x1 + x2 + x3;\nloop invariant i103: x2 <= x1 + x2 + x3;\nloop invariant i104: x3 <= x1 + x2 + x3;\nloop invariant i105: 0 <= x1 <= 4294967295;\nloop invariant i106: 0 <= x2 <= 4294967295;\nloop invariant i107: 0 <= x3 <= 4294967295;\nloop invariant i108: 0 <= d1 <= 4294967295;\nloop invariant i109: 0 <= d2 <= 4294967295;\nloop invariant i110: 0 <= d3 <= 4294967295;\nloop invariant i111: x1 <= x2;\nloop invariant i112: x1 <= x3;\nloop invariant i113: x2 <= x3;\nloop invariant i114: x1 <= x2 + (x2 - 1) * d2 / 2;\nloop invariant i115: x1 <= x3 + (x3 - 1) * d3 / 2;\nloop invariant i116: x2 <= x3 + (x3 - 1) * d3 / 2;\nloop invariant i117: 0 <= x1 <= INT_MAX;\nloop invariant i118: 0 <= x2 <= INT_MAX;\nloop invariant i119: 0 <= x3 <= INT_MAX;\nloop invariant i120: 1 <= d1 <= INT_MAX;\nloop invariant i121: 1 <= d2 <= INT_MAX;\nloop invariant i122: 1 <= d3 <= INT_MAX;\nloop invariant i123: x1 >= x2 ==> x3 >= x2;\nloop invariant i124: x1 >= x3 ==> x2 >= x3;\nloop invariant i125: x1 >= x2 ==> (x3 >= x2 ==> x3 >= x1);\nloop invariant i126: x1 >= x3 ==> (x2 >= x3 ==> x2 >= x1);\nloop invariant i127: (x1 >= x2 && x3 >= x2) ==> (x1 >= x3 && x2 >= x3);\nloop invariant i128: x1 >= x2 ==> (x3 >= x2 ==> x1 >= x3);\nloop invariant i129: x1 >= x3 ==> (x2 >= x3 ==> x1 >= x2);\nloop invariant i130: (x1 >= d1 && x1 >= d2 && x1 >= d3 && x2 >= d1 && x2 >= d2 && x2 >= d3 && x3 >= d1 && x3 >= d2 && x3 >= d3) ==> x1 >= x2 && x1 >= x3;\nloop invariant i131: (x1 >= d1 && x1 >= d2 && x1 >= d3 && x2 >= d1 && x2 >= d2 && x2 >= d3 && x3 >= d1 && x3 >= d2 && x3 >= d3) ==> x2 >= x3;\nloop invariant i132: x1 <= 2147483647 - (d1 * (unknown_uint() + 1) * (unknown_uint() + 1) / 2);\nloop invariant i133: x2 <= 2147483647 - (d2 * (unknown_uint() + 1) * (unknown_uint() + 1) / 2);\nloop invariant i134: x3 <= 2147483647 - (d3 * (unknown_uint() + 1) * (unknown_uint() + 1) / 2);\nloop invariant i135: x1 > 0 ==> d1 > 0;\nloop invariant i136: x2 > 0 ==> d2 > 0;\nloop invariant i137: x3 > 0 ==> d3 > 0;\nloop invariant i138: x1 == 0 ==> d1 <= 0;\nloop invariant i139: x2 == 0 ==> d2 <= 0;\nloop invariant i140: x3 == 0 ==> d3 <= 0;\nloop invariant i141: x1 == 0 ==> x2 > 0 ==> d1 <= 0 ==> d2 > 0;\nloop invariant i142: x1 == 0 ==> x3 > 0 ==> d1 <= 0 ==> d3 > 0;\nloop invariant i143: x2 == 0 ==> x3 > 0 ==> d2 <= 0 ==> d3 > 0;\nloop invariant i144: x1 > 0 ==> x2 > 0 ==> x3 > 0 ==> d1 > 0 ==> d2 > 0 ==> d3 > 0;\nloop invariant i145: x1 > 0 ==> x2 > 0 ==> x3 > 0 ==> d1 <= 0 ==> d2 <= 0 ==> d3 <= 0;\n*/\nwhile(x1>0 && x2>0 && x3>0)\n  {\n    if (c1) x1=x1-d1;\n    else if (c2) x2=x2-d2;\n    else x3=x3-d3;\n    c1=unknown_bool();\n    c2=unknown_bool();\n  }\n\n  {;\n//@ assert(x1==0 || x2==0 || x3==0);\n}\n\n  return 0;\n}",
        "combined_annotation_num_solver_calls": 57,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  unsigned int x1=unknown_uint(), x2=unknown_uint(), x3=unknown_uint();\n  unsigned int d1=1, d2=1, d3=1;\n  _Bool c1=unknown_bool(), c2=unknown_bool();\n  \n  /*@\n\n\n\nloop invariant i4: 0 <= d1 <= 2147483647;\nloop invariant i5: 0 <= d2 <= 2147483647;\nloop invariant i6: 0 <= d3 <= 2147483647;\nloop invariant i7: c1 == 0 || c1 == 1;\nloop invariant i8: c2 == 0 || c2 == 1;\n\n\n\n\nloop invariant i13: d1 > 0;\nloop invariant i14: d2 > 0;\nloop invariant i15: d3 > 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i37: 0 <= d1 <= 100000;\nloop invariant i38: 0 <= d2 <= 100000;\nloop invariant i39: 0 <= d3 <= 100000;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i71: x1 >= 0 && x2 >= 0 && x3 >= 0;\nloop invariant i72: d1 >= 1 && d2 >= 1 && d3 >= 1;\nloop invariant i73: c1 || c2 ==> (x1>=0 && x2>=0 && x3>=0);\nloop invariant i74: !(c1 && c2) ==> (x1>=0 && x2>=0 && x3>=0);\nloop invariant i75: !(c1 && c2) ==> (d1>=1 && d2>=1 && d3>=1);\nloop invariant i76: c1 ==> (x1>=0 && x2>=0 && x3>=0);\nloop invariant i77: c1 ==> (d1>=1 && d2>=1 && d3>=1);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i102: x1 <= x1 + x2 + x3;\nloop invariant i103: x2 <= x1 + x2 + x3;\nloop invariant i104: x3 <= x1 + x2 + x3;\nloop invariant i105: 0 <= x1 <= 4294967295;\nloop invariant i106: 0 <= x2 <= 4294967295;\nloop invariant i107: 0 <= x3 <= 4294967295;\nloop invariant i108: 0 <= d1 <= 4294967295;\nloop invariant i109: 0 <= d2 <= 4294967295;\nloop invariant i110: 0 <= d3 <= 4294967295;\n\n\n\n\n\n\n\n\n\nloop invariant i120: 1 <= d1 <= INT_MAX;\nloop invariant i121: 1 <= d2 <= INT_MAX;\nloop invariant i122: 1 <= d3 <= INT_MAX;\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i135: x1 > 0 ==> d1 > 0;\nloop invariant i136: x2 > 0 ==> d2 > 0;\nloop invariant i137: x3 > 0 ==> d3 > 0;\n\n\n\nloop invariant i141: x1 == 0 ==> x2 > 0 ==> d1 <= 0 ==> d2 > 0;\nloop invariant i142: x1 == 0 ==> x3 > 0 ==> d1 <= 0 ==> d3 > 0;\nloop invariant i143: x2 == 0 ==> x3 > 0 ==> d2 <= 0 ==> d3 > 0;\nloop invariant i144: x1 > 0 ==> x2 > 0 ==> x3 > 0 ==> d1 > 0 ==> d2 > 0 ==> d3 > 0;\nloop invariant i145: x1 > 0 ==> x2 > 0 ==> x3 > 0 ==> d1 <= 0 ==> d2 <= 0 ==> d3 <= 0;\n*/\nwhile(x1>0 && x2>0 && x3>0)\n  {\n    if (c1) x1=x1-d1;\n    else if (c2) x2=x2-d2;\n    else x3=x3-d3;\n    c1=unknown_bool();\n    c2=unknown_bool();\n  }\n\n  {;\n//@ assert(x1==0 || x2==0 || x3==0);\n}\n\n  return 0;\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/11.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/15.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/16.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/18.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/20.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/23.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/30.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/37.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/38.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/43.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/46.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/popl.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/07.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/39.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/gulv_simp.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/substring1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/xy10.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/const_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/multivar_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/phases_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/simple_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/simple_safe2.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/simple_safe3.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/simple_safe4.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/underapprox_safe2.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/underapprox_unsafe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/barbr.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/barbrprime.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/bk-nat.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/bkley.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/efm.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/ex1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/lifnat.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/lifnatprime.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/lifo.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/seesaw.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/substring1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/swim.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/swim1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/ken-imp.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/rajamani_1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/simple.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/simple_if.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/up-nested.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/svcomp/count_up_down_true.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/svcomp/for_infinite_loop_1_true.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/svcomp/for_infinite_loop_2_true.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/svcomp/sum03_true.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/svcomp/sum04_true.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/svcomp/terminator_02_true.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/svcomp/trex03_true.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/split.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/13.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/14.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/19.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/32.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/39.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/41.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/44.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/cav.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/05.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/19.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/37.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/gulv.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/pldi082_unbounded.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/svcomp/sum01_true.c"
        ],
        "skipped": [],
        "total": 180,
        "success_count": 149,
        "failure_count": 31,
        "success_rate": 0.8277777777777777
    }
}