{
    "logs": {
        "file": "../dataset/loop_invariants/accelerating_invariant_generation/invgen/gulwani_cegar1.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint __BLAST_NONDET;\nvoid main() {\n  int x,y;\n\n  assume(0 <= x);  assume(x <= 2);\n  assume(0 <= y);  assume(y <= 2);\n  while( __BLAST_NONDET ) {\n\tx+=2;\n\ty+=2;\n  }\n  if( y >= 0 ) \n    if( y <= 0 ) \n      if( 4 <= x ) \n\t{;\n//@ assert( x < 4 );\n}\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant i1;\nloop invariant i2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 2;\nloop invariant 0 <= y <= 2;\nloop invariant x < 4 ==> y < 0 || y > 0 || 4 > x;\nloop invariant x < 4 ==> 4 <= x ==> y >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 2;\nloop invariant 0 <= y <= 2;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y - x >= 0;\nloop invariant y >= x;\nloop invariant x - y <= 2;\nloop invariant x <= y + 2;\nloop invariant y - x >= 0;\nloop invariant y - x <= 2;\nloop invariant y <= x + 2;\nloop invariant x - y <= 2;\nloop invariant y - x <= 2;\nloop invariant y <= x + 2;\nloop invariant y - x <= 2;\nloop invariant y <= x + 2;\nloop invariant y - x <= 2;\nloop invariant y <= x + 2;\nloop invariant y - x <= 2;\nloop invariant y <= x + 2;\nloop invariant y - x <= 2;\nloop invariant y <= x + 2;\nloop invariant y - x <= 2;\nloop invariant y <= x + 2;\nloop invariant y - x <= 2;\nloop invariant y <= x + 2;\nloop invariant y - x <= 2;\nloop invariant y <= x + 2;\nloop invariant y - x <= 2;\nloop invariant y <= x + 2;\nloop invariant y - x <= 2;\nloop invariant y <= x + 2;\nloop invariant y - x <= 2;\nloop invariant y <= x + 2;\nloop invariant y - x <= 2;\nloop invariant y <= x + 2;\nloop invariant y - x <= 2;\nloop invariant y <= x + 2;\nloop invariant y - x <= 2;\nloop invariant y <= x + 2;\nloop invariant y - x <= 2;\nloop invariant y <= x + 2;\nloop invariant y - x <= 2;\nloop invariant y <= x + 2;\nloop invariant y - x <= 2;\nloop invariant y <= x + 2;\nloop invariant y - x <= 2;\nloop invariant y <= x + 2;\nloop invariant y - x <= 2;\nloop invariant y <= x + 2;\nloop invariant y - x <= 2;\nloop invariant y <= x + 2;\nloop invariant y - x <= 2;\nloop invariant y <= x + 2;\nloop invariant y - x <= 2;\nloop invariant y <= x + 2;\nloop invariant y - x <= 2;\nloop invariant y <= x + 2;\nloop invariant y - x <= 2;\nloop invariant y <= x + 2;\nloop invariant y - x <= 2;\nloop invariant y <= x + 2;\nloop invariant y - x <= 2;\nloop invariant y <= x + 2;\nloop invariant y - x <= 2;\nloop invariant y <= x + 2;\nloop invariant y - x <= 2;\nloop invariant y <= x + 2;\nloop invariant y - x <= 2;\nloop invariant y <= x + 2;\nloop invariant y - x <= 2;\nloop invariant y <= x + 2;\nloop invariant y - x <= 2;\nloop invariant y <= x + 2;\nloop invariant y - x <= 2;\nloop invariant y <= x + 2;\nloop invariant y - x <= 2;\nloop invariant y <= x + 2;\nloop invariant y - x <= 2;\nloop invariant y <= x + 2;\nloop invariant y - x <= 2;\nloop invariant y <= x + 2;\nloop invariant y - x <= 2;\nloop invariant y <= x + 2;\nloop invariant y - x <= 2;\nloop invariant y <= x + 2;\nloop invariant y - x <= 2;\nloop invariant y <= x + 2;\nloop invariant y - x <= 2;\nloop invariant y <= x + 2;\nloop invariant y - x <= 2;\nloop invariant y <= x + 2;\nloop invariant y - x <= 2;\nloop invariant y <= x + 2;\nloop invariant y - x <= 2;\nloop invariant y <= x + 2;\nloop invariant y - x <= 2;\nloop invariant y <= x + 2;\nloop invariant y - x <= 2;\nloop invariant y <= x + 2;\nloop invariant y - x <= 2;\nloop invariant y <= x + 2;\nloop invariant y - x <= 2;\nloop invariant y <= x + 2;\nloop invariant y - x <= 2;\nloop invariant y <= x + 2;\nloop invariant y - x <= 2;\nloop invariant y <= x + 2;\nloop invariant y - x <= 2;\nloop invariant y <= x + 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 2;\nloop invariant 0 <= x <= 4;\nloop invariant x >= y;\nloop invariant 0 <= y <= 2;\nloop invariant 0 <= x <= 4;\nloop invariant x >= y;\nloop invariant x <= 4;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x <= 4;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x <= 4;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x <= 4;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x <= 4;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x <= 4;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x <= 4;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x <= 4;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x <= 4;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x <= 4;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x <= 4;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x <= 4;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x <= 4;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x <= 4;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x <= 4;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x <= 4;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x <= 4;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x <= 4;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x <= 4;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x <= 4;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x <= 4;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x <= 4;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x <= 4;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x <= 4;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x <= 4;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x <= 4;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x <= 4;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x <= 4;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x <= 4;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x <= 4;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x <= 4;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x <= 4;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x <= 4;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x <= 4;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x <= 4;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x <= 4;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x <= 4;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x <= 4;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x <= 4;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x <= 4;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x <= 4;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x <= 4;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x <= 4;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x <= 4;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x <= 4;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x <= 4;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x <= 4;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x <= 4;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= 4;\nloop invariant 1 <= y <= 4;\nloop invariant x <= y;\nloop invariant (x < 4) ==> (y < 4);\nloop invariant (x < 4) ==> (y < 4);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 2;\nloop invariant 0 <= y <= 2;\nloop invariant y >= 0 ==> x >= 4 ==> x < 4;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 4;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant x == y || x == y + 2;\nloop invariant x == y || x == y + 2 || x == y + 4;\nloop invariant x == y || x == y + 2 || x == y + 4 || x == y + 6;\nloop invariant x == y || x == y + 2 || x == y + 4 || x == y + 6 || x == y + 8;\nloop invariant x == y || x == y + 2 || x == y + 4 || x == y + 6 || x == y + 8 || x == y + 10;\nloop invariant x == y || x == y + 2 || x == y + 4 || x == y + 6 || x == y + 8 || x == y + 10 || x == y + 12;\nloop invariant x == y || x == y + 2 || x == y + 4 || x == y + 6 || x == y + 8 || x == y + 10 || x == y + 12 || x == y + 14;\nloop invariant x == y || x == y + 2 || x == y + 4 || x == y + 6 || x == y + 8 || x == y + 10 || x == y + 12 || x == y + 14 || x == y + 16;\nloop invariant x == y || x == y + 2 || x == y + 4 || x == y + 6 || x == y + 8 || x == y + 10 || x == y + 12 || x == y + 14 || x == y + 16 || x == y + 18;\nloop invariant x == y || x == y + 2 || x == y + 4 || x == y + 6 || x == y + 8 || x == y + 10 || x == y + 12 || x == y + 14 || x == y + 16 || x == y + 18 || x == y + 20;\nloop invariant x == y || x == y + 2 || x == y + 4 || x == y + 6 || x == y + 8 || x == y + 10 || x == y + 12 || x == y + 14 || x == y + 16 || x == y + 18 || x == y + 20 || x == y + 22;\nloop invariant x == y || x == y + 2 || x == y + 4 || x == y + 6 || x == y + 8 || x == y + 10 || x == y + 12 || x == y + 14 || x == y + 16 || x == y + 18 || x == y + 20 || x == y + 22 || x == y + 24;\nloop invariant x == y || x == y + 2 || x == y + 4 || x == y + 6 || x == y + 8 || x == y + 10 || x == y + 12 || x == y + 14 || x == y + 16 || x == y + 18 || x == y + 20 || x == y + 22 || x == y + 24 || x == y + 26;\nloop invariant x == y || x == y + 2 || x == y + 4 || x == y + 6 || x == y + 8 || x == y + 10 || x == y + 12 || x == y + 14 || x == y + 16 || x == y + 18 || x == y + 20 || x == y + 22 || x == y + 24 || x == y + 26 || x == y + 28;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 2;\nloop invariant 0 <= y <= 2;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x <= y + 2;\nloop invariant y >= x - 2;\nloop invariant x >= y - 2;\nloop invariant y <= x + 2;\nloop invariant x <= y + 2;\nloop invariant y >= x - 2;\nloop invariant x >= y - 2;\nloop invariant y <= x + 2;\nloop invariant x <= y + 2;\nloop invariant y >= x - 2;\nloop invariant x >= y - 2;\nloop invariant y <= x + 2;\nloop invariant x <= y + 2;\nloop invariant y >= x - 2;\nloop invariant x >= y - 2;\nloop invariant y <= x + 2;\nloop invariant x <= y + 2;\nloop invariant y >= x - 2;\nloop invariant x >= y - 2;\nloop invariant y <= x + 2;\nloop invariant x <= y + 2;\nloop invariant y >= x - 2;\nloop invariant x >= y - 2;\nloop invariant y <= x + 2;\nloop invariant x <= y + 2;\nloop invariant y >= x - 2;\nloop invariant x >= y - 2;\nloop invariant y <= x + 2;\nloop invariant x <= y + 2;\nloop invariant y >= x - 2;\nloop invariant x >= y - 2;\nloop invariant y <= x + 2;\nloop invariant x <= y + 2;\nloop invariant y >= x - 2;\nloop invariant x >= y - 2;\nloop invariant y <= x + 2;\nloop invariant x <= y + 2;\nloop invariant y >= x - 2;\nloop invariant x >= y - 2;\nloop invariant y <= x + 2;\nloop invariant x <= y + 2;\nloop invariant y >= x - 2;\nloop invariant x >= y - 2;\nloop invariant y <= x + 2;\nloop invariant x <= y + 2;\nloop invariant y >= x - 2;\nloop invariant x >= y - 2;\nloop invariant y <= x + 2;\nloop invariant x <= y + 2;\nloop invariant y >= x - 2;\nloop invariant x >= y - 2;\nloop invariant y <= x + 2;\nloop invariant x <= y + 2;\nloop invariant y >= x - 2;\nloop invariant x >= y - 2;\nloop invariant y <= x + 2;\nloop invariant x <= y + 2;\nloop invariant y >= x - 2;\nloop invariant x >= y - 2;\nloop invariant y <= x + 2;\nloop invariant x <= y + 2;\nloop invariant y >= x - 2;\nloop invariant x >= y - 2;\nloop invariant y <= x + 2;\nloop invariant x <= y + 2;\nloop invariant y >= x - 2;\nloop invariant x >= y - 2;\nloop invariant y <= x + 2;\nloop invariant x <= y + 2;\nloop invariant y >= x - 2;\nloop invariant x >= y - 2;\nloop invariant y <= x + 2;\nloop invariant x <= y + 2;\nloop invariant y >= x - 2;\nloop invariant x >= y - 2;\nloop invariant y <= x + 2;\nloop invariant x <= y + 2;\nloop invariant y >= x - 2;\nloop invariant x >= y - 2;\nloop invariant y <= x + 2;\nloop invariant x <= y + 2;\nloop invariant y >= x - 2;\nloop invariant x >= y - 2;\nloop invariant y <= x + 2;\nloop invariant x <= y + 2;\nloop invariant y >= x - 2;\nloop invariant x >= y - 2;\nloop invariant y <= x + 2;\nloop invariant x <= y + 2;\nloop invariant y >= x - 2;\nloop invariant x >= y - 2;\nloop invariant y <= x + 2;\nloop invariant x <= y + 2;\nloop invariant y >= x - 2;\nloop invariant x >= y - 2;\nloop invariant y <= x + 2;\nloop invariant x <= y + 2;\nloop invariant y >= x - 2;\nloop invariant x >= y - 2;\nloop invariant y <= x + 2;\nloop invariant x <= y + 2;\nloop invariant y >= x - 2;\nloop invariant x >= y - 2;\nloop invariant y <= x + 2;\nloop invariant x <= y + 2;\n*/\n```",
            "```\n/*@\nloop invariant x + 2*y >= 0;\nloop invariant x + 2*y <= 4;\nloop invariant x >= 0;\nloop invariant x <= 4;\nloop invariant y >= 0;\nloop invariant y <= 2;\nloop invariant 0 <= x + y <= 4;\nloop invariant 0 <= x + 2*y <= 8;\nloop invariant x + y <= 4;\nloop invariant x + 2*y <= 8;\nloop invariant x + 3*y <= 12;\nloop invariant x + 4*y <= 16;\nloop invariant x + 5*y <= 20;\nloop invariant x + 6*y <= 24;\nloop invariant x + 7*y <= 28;\nloop invariant x + 8*y <= 32;\nloop invariant x + 9*y <= 36;\nloop invariant x + 10*y <= 40;\n*/\n```",
            "```\n/*@\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x <= 2 + 2 * y;\nloop invariant y >= x / 2;\n*/\n```",
            "```\n/*@\nloop invariant __BLAST_NONDET ==> (y >= 0 && y <= 2);\nloop invariant __BLAST_NONDET ==> (x >= 0 && x <= 4);\nloop invariant __BLAST_NONDET ==> (y >= x - 2);\n*/\n```",
            "```\n/*@\nloop invariant 2 <= x <= 4;\nloop invariant 0 <= y <= 2;\nloop invariant y >= 0 ==> x >= 4;\nloop invariant y <= 0 ==> x < 4;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 4;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y >= x - 2;\nloop invariant y <= x + 2;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant y >= 0 ==> x < 4;\nloop invariant y <= 0 ==> x >= 4;\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= 2;\nloop invariant x <= 4;\nloop invariant x >= y;\nloop invariant x - 2 * y <= 4;\nloop invariant x - 2 * y >= 0;\nloop invariant y >= 0 ==> x >= y;\nloop invariant x - 2 * y <= 4 ==> x >= y;\nloop invariant x >= y ==> x - 2 * y >= 0;\nloop invariant x - 2 * y <= 4 ==> x - 2 * y >= 0;\nloop invariant x - 2 * y >= 0 ==> x - 2 * y <= 4;\nloop invariant x - 2 * y >= 0 ==> x - 2 * y >= 0;\nloop invariant x - 2 * y <= 4 ==> x - 2 * y <= 4;\nloop invariant x - 2 * y >= 0 ==> x - 2 * y <= 4;\nloop invariant x >= y ==> x - 2 * y >= 0;\nloop invariant x >= y ==> x - 2 * y <= 4;\nloop invariant x - 2 * y >= 0 ==> x >= y;\nloop invariant x - 2 * y <= 4 ==> x >= y;\nloop invariant x - 2 * y >= 0 ==> x >= y;\nloop invariant x - 2 * y <= 4 ==> x >= y;\nloop invariant x - 2 * y >= 0 ==> x - 2 * y <= 4;\nloop invariant x - 2 * y <= 4 ==> x - 2 * y >= 0;\nloop invariant x >= y ==> x - 2 * y >= 0;\nloop invariant x >= y ==> x - 2 * y <= 4;\nloop invariant x - 2 * y >= 0 ==> x >= y;\nloop invariant x - 2 * y <= 4 ==> x >= y;\nloop invariant x >= y ==> x >= y;\nloop invariant x - 2 * y >= 0 ==> x - 2 * y >= 0;\nloop invariant x - 2 * y <= 4 ==> x - 2 * y <= 4;\nloop invariant x >= y ==> x - 2 * y >= 0;\nloop invariant x >= y ==> x - 2 * y <= 4;\nloop invariant x - 2 * y >= 0 ==> x >= y;\nloop invariant x - 2 * y <= 4 ==> x >= y;\nloop invariant x - 2 * y >= 0 ==> x >= y;\nloop invariant x - 2 * y <= 4 ==> x >= y;\nloop invariant x - 2 * y >= 0 ==> x - 2 * y <= 4;\nloop invariant x - 2 * y <= 4 ==> x - 2 * y >= 0;\nloop invariant x >= y ==> x - 2 * y >= 0;\nloop invariant x >= y ==> x - 2 * y <= 4;\nloop invariant x - 2 * y >= 0 ==> x >= y;\nloop invariant x - 2 * y <= 4 ==> x >= y;\nloop invariant x >= y ==> x >= y;\nloop invariant x - 2 * y >= 0 ==> x - 2 * y >= 0;\nloop invariant x - 2 * y <= 4 ==> x - 2 * y <= 4;\nloop invariant x >= y ==> x - 2 * y >= 0;\nloop invariant x >= y ==> x - 2 * y <= 4;\nloop invariant x - 2 * y >= 0 ==> x >= y;\nloop invariant x - 2 * y <= 4 ==> x >= y;\nloop invariant x - 2 * y >= 0 ==> x >= y;\nloop invariant x - 2 * y <= 4 ==> x >= y;\nloop invariant x - 2 * y >= 0 ==> x - 2 * y <= 4;\nloop invariant x - 2 * y <= 4 ==> x - 2 * y >= 0;\nloop invariant x >= y ==> x - 2 * y >= 0;\nloop invariant x >= y ==> x - 2 * y <= 4;\nloop invariant x - 2 * y >= 0 ==> x >= y;\nloop invariant x - 2 * y <= 4 ==> x >= y;\nloop invariant x >= y ==> x >= y;\nloop invariant x - 2 * y >= 0 ==> x - 2 * y >= 0;\nloop invariant x - 2 * y <= 4 ==> x - 2 * y <= 4;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant i1;\nloop invariant i2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint __BLAST_NONDET;\nvoid main() {\n  int x,y;\n\n  assume(0 <= x);  assume(x <= 2);\n  assume(0 <= y);  assume(y <= 2);\n  /*@\n\n\n*/\nwhile( __BLAST_NONDET ) {\n\tx+=2;\n\ty+=2;\n  }\n  if( y >= 0 ) \n    if( y <= 0 ) \n      if( 4 <= x ) \n\t{;\n//@ assert( x < 4 );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 2;\nloop invariant 0 <= y <= 2;\nloop invariant x < 4 ==> y < 0 || y > 0 || 4 > x;\nloop invariant x < 4 ==> 4 <= x ==> y >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint __BLAST_NONDET;\nvoid main() {\n  int x,y;\n\n  assume(0 <= x);  assume(x <= 2);\n  assume(0 <= y);  assume(y <= 2);\n  /*@\n\n\nloop invariant i3: x < 4 ==> y < 0 || y > 0 || 4 > x;\nloop invariant i4: x < 4 ==> 4 <= x ==> y >= 0;\n*/\nwhile( __BLAST_NONDET ) {\n\tx+=2;\n\ty+=2;\n  }\n  if( y >= 0 ) \n    if( y <= 0 ) \n      if( 4 <= x ) \n\t{;\n//@ assert( x < 4 );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 2;\nloop invariant 0 <= y <= 2;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y - x >= 0;\nloop invariant y >= x;\nloop invariant x - y <= 2;\nloop invariant x <= y + 2;\nloop invariant y - x >= 0;\nloop invariant y - x <= 2;\nloop invariant y <= x + 2;\nloop invariant x - y <= 2;\nloop invariant y - x <= 2;\nloop invariant y <= x + 2;\nloop invariant y - x <= 2;\nloop invariant y <= x + 2;\nloop invariant y - x <= 2;\nloop invariant y <= x + 2;\nloop invariant y - x <= 2;\nloop invariant y <= x + 2;\nloop invariant y - x <= 2;\nloop invariant y <= x + 2;\nloop invariant y - x <= 2;\nloop invariant y <= x + 2;\nloop invariant y - x <= 2;\nloop invariant y <= x + 2;\nloop invariant y - x <= 2;\nloop invariant y <= x + 2;\nloop invariant y - x <= 2;\nloop invariant y <= x + 2;\nloop invariant y - x <= 2;\nloop invariant y <= x + 2;\nloop invariant y - x <= 2;\nloop invariant y <= x + 2;\nloop invariant y - x <= 2;\nloop invariant y <= x + 2;\nloop invariant y - x <= 2;\nloop invariant y <= x + 2;\nloop invariant y - x <= 2;\nloop invariant y <= x + 2;\nloop invariant y - x <= 2;\nloop invariant y <= x + 2;\nloop invariant y - x <= 2;\nloop invariant y <= x + 2;\nloop invariant y - x <= 2;\nloop invariant y <= x + 2;\nloop invariant y - x <= 2;\nloop invariant y <= x + 2;\nloop invariant y - x <= 2;\nloop invariant y <= x + 2;\nloop invariant y - x <= 2;\nloop invariant y <= x + 2;\nloop invariant y - x <= 2;\nloop invariant y <= x + 2;\nloop invariant y - x <= 2;\nloop invariant y <= x + 2;\nloop invariant y - x <= 2;\nloop invariant y <= x + 2;\nloop invariant y - x <= 2;\nloop invariant y <= x + 2;\nloop invariant y - x <= 2;\nloop invariant y <= x + 2;\nloop invariant y - x <= 2;\nloop invariant y <= x + 2;\nloop invariant y - x <= 2;\nloop invariant y <= x + 2;\nloop invariant y - x <= 2;\nloop invariant y <= x + 2;\nloop invariant y - x <= 2;\nloop invariant y <= x + 2;\nloop invariant y - x <= 2;\nloop invariant y <= x + 2;\nloop invariant y - x <= 2;\nloop invariant y <= x + 2;\nloop invariant y - x <= 2;\nloop invariant y <= x + 2;\nloop invariant y - x <= 2;\nloop invariant y <= x + 2;\nloop invariant y - x <= 2;\nloop invariant y <= x + 2;\nloop invariant y - x <= 2;\nloop invariant y <= x + 2;\nloop invariant y - x <= 2;\nloop invariant y <= x + 2;\nloop invariant y - x <= 2;\nloop invariant y <= x + 2;\nloop invariant y - x <= 2;\nloop invariant y <= x + 2;\nloop invariant y - x <= 2;\nloop invariant y <= x + 2;\nloop invariant y - x <= 2;\nloop invariant y <= x + 2;\nloop invariant y - x <= 2;\nloop invariant y <= x + 2;\nloop invariant y - x <= 2;\nloop invariant y <= x + 2;\nloop invariant y - x <= 2;\nloop invariant y <= x + 2;\nloop invariant y - x <= 2;\nloop invariant y <= x + 2;\nloop invariant y - x <= 2;\nloop invariant y <= x + 2;\nloop invariant y - x <= 2;\nloop invariant y <= x + 2;\nloop invariant y - x <= 2;\nloop invariant y <= x + 2;\nloop invariant y - x <= 2;\nloop invariant y <= x + 2;\nloop invariant y - x <= 2;\nloop invariant y <= x + 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint __BLAST_NONDET;\nvoid main() {\n  int x,y;\n\n  assume(0 <= x);  assume(x <= 2);\n  assume(0 <= y);  assume(y <= 2);\n  /*@\n\n\n\n\nloop invariant i5: x >= 0;\nloop invariant i6: y >= 0;\n\n\nloop invariant i9: x - y <= 2;\nloop invariant i10: x <= y + 2;\nloop invariant i11: y - x <= 2;\nloop invariant i12: y <= x + 2;\n*/\nwhile( __BLAST_NONDET ) {\n\tx+=2;\n\ty+=2;\n  }\n  if( y >= 0 ) \n    if( y <= 0 ) \n      if( 4 <= x ) \n\t{;\n//@ assert( x < 4 );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 2;\nloop invariant 0 <= x <= 4;\nloop invariant x >= y;\nloop invariant 0 <= y <= 2;\nloop invariant 0 <= x <= 4;\nloop invariant x >= y;\nloop invariant x <= 4;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x <= 4;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x <= 4;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x <= 4;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x <= 4;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x <= 4;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x <= 4;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x <= 4;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x <= 4;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x <= 4;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x <= 4;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x <= 4;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x <= 4;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x <= 4;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x <= 4;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x <= 4;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x <= 4;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x <= 4;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x <= 4;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x <= 4;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x <= 4;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x <= 4;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x <= 4;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x <= 4;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x <= 4;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x <= 4;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x <= 4;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x <= 4;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x <= 4;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x <= 4;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x <= 4;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x <= 4;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x <= 4;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x <= 4;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x <= 4;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x <= 4;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x <= 4;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x <= 4;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x <= 4;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x <= 4;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x <= 4;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x <= 4;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x <= 4;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x <= 4;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x <= 4;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x <= 4;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x <= 4;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x <= 4;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint __BLAST_NONDET;\nvoid main() {\n  int x,y;\n\n  assume(0 <= x);  assume(x <= 2);\n  assume(0 <= y);  assume(y <= 2);\n  /*@\n\n\n\n\n\n*/\nwhile( __BLAST_NONDET ) {\n\tx+=2;\n\ty+=2;\n  }\n  if( y >= 0 ) \n    if( y <= 0 ) \n      if( 4 <= x ) \n\t{;\n//@ assert( x < 4 );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= 4;\nloop invariant 1 <= y <= 4;\nloop invariant x <= y;\nloop invariant (x < 4) ==> (y < 4);\nloop invariant (x < 4) ==> (y < 4);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint __BLAST_NONDET;\nvoid main() {\n  int x,y;\n\n  assume(0 <= x);  assume(x <= 2);\n  assume(0 <= y);  assume(y <= 2);\n  /*@\n\n\n\n\n*/\nwhile( __BLAST_NONDET ) {\n\tx+=2;\n\ty+=2;\n  }\n  if( y >= 0 ) \n    if( y <= 0 ) \n      if( 4 <= x ) \n\t{;\n//@ assert( x < 4 );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 2;\nloop invariant 0 <= y <= 2;\nloop invariant y >= 0 ==> x >= 4 ==> x < 4;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint __BLAST_NONDET;\nvoid main() {\n  int x,y;\n\n  assume(0 <= x);  assume(x <= 2);\n  assume(0 <= y);  assume(y <= 2);\n  /*@\n\n\n\n*/\nwhile( __BLAST_NONDET ) {\n\tx+=2;\n\ty+=2;\n  }\n  if( y >= 0 ) \n    if( y <= 0 ) \n      if( 4 <= x ) \n\t{;\n//@ assert( x < 4 );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 15,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 4;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant x == y || x == y + 2;\nloop invariant x == y || x == y + 2 || x == y + 4;\nloop invariant x == y || x == y + 2 || x == y + 4 || x == y + 6;\nloop invariant x == y || x == y + 2 || x == y + 4 || x == y + 6 || x == y + 8;\nloop invariant x == y || x == y + 2 || x == y + 4 || x == y + 6 || x == y + 8 || x == y + 10;\nloop invariant x == y || x == y + 2 || x == y + 4 || x == y + 6 || x == y + 8 || x == y + 10 || x == y + 12;\nloop invariant x == y || x == y + 2 || x == y + 4 || x == y + 6 || x == y + 8 || x == y + 10 || x == y + 12 || x == y + 14;\nloop invariant x == y || x == y + 2 || x == y + 4 || x == y + 6 || x == y + 8 || x == y + 10 || x == y + 12 || x == y + 14 || x == y + 16;\nloop invariant x == y || x == y + 2 || x == y + 4 || x == y + 6 || x == y + 8 || x == y + 10 || x == y + 12 || x == y + 14 || x == y + 16 || x == y + 18;\nloop invariant x == y || x == y + 2 || x == y + 4 || x == y + 6 || x == y + 8 || x == y + 10 || x == y + 12 || x == y + 14 || x == y + 16 || x == y + 18 || x == y + 20;\nloop invariant x == y || x == y + 2 || x == y + 4 || x == y + 6 || x == y + 8 || x == y + 10 || x == y + 12 || x == y + 14 || x == y + 16 || x == y + 18 || x == y + 20 || x == y + 22;\nloop invariant x == y || x == y + 2 || x == y + 4 || x == y + 6 || x == y + 8 || x == y + 10 || x == y + 12 || x == y + 14 || x == y + 16 || x == y + 18 || x == y + 20 || x == y + 22 || x == y + 24;\nloop invariant x == y || x == y + 2 || x == y + 4 || x == y + 6 || x == y + 8 || x == y + 10 || x == y + 12 || x == y + 14 || x == y + 16 || x == y + 18 || x == y + 20 || x == y + 22 || x == y + 24 || x == y + 26;\nloop invariant x == y || x == y + 2 || x == y + 4 || x == y + 6 || x == y + 8 || x == y + 10 || x == y + 12 || x == y + 14 || x == y + 16 || x == y + 18 || x == y + 20 || x == y + 22 || x == y + 24 || x == y + 26 || x == y + 28;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint __BLAST_NONDET;\nvoid main() {\n  int x,y;\n\n  assume(0 <= x);  assume(x <= 2);\n  assume(0 <= y);  assume(y <= 2);\n  /*@\n\n\nloop invariant i3: x >= 0;\nloop invariant i4: y >= 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile( __BLAST_NONDET ) {\n\tx+=2;\n\ty+=2;\n  }\n  if( y >= 0 ) \n    if( y <= 0 ) \n      if( 4 <= x ) \n\t{;\n//@ assert( x < 4 );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 2;\nloop invariant 0 <= y <= 2;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x <= y + 2;\nloop invariant y >= x - 2;\nloop invariant x >= y - 2;\nloop invariant y <= x + 2;\nloop invariant x <= y + 2;\nloop invariant y >= x - 2;\nloop invariant x >= y - 2;\nloop invariant y <= x + 2;\nloop invariant x <= y + 2;\nloop invariant y >= x - 2;\nloop invariant x >= y - 2;\nloop invariant y <= x + 2;\nloop invariant x <= y + 2;\nloop invariant y >= x - 2;\nloop invariant x >= y - 2;\nloop invariant y <= x + 2;\nloop invariant x <= y + 2;\nloop invariant y >= x - 2;\nloop invariant x >= y - 2;\nloop invariant y <= x + 2;\nloop invariant x <= y + 2;\nloop invariant y >= x - 2;\nloop invariant x >= y - 2;\nloop invariant y <= x + 2;\nloop invariant x <= y + 2;\nloop invariant y >= x - 2;\nloop invariant x >= y - 2;\nloop invariant y <= x + 2;\nloop invariant x <= y + 2;\nloop invariant y >= x - 2;\nloop invariant x >= y - 2;\nloop invariant y <= x + 2;\nloop invariant x <= y + 2;\nloop invariant y >= x - 2;\nloop invariant x >= y - 2;\nloop invariant y <= x + 2;\nloop invariant x <= y + 2;\nloop invariant y >= x - 2;\nloop invariant x >= y - 2;\nloop invariant y <= x + 2;\nloop invariant x <= y + 2;\nloop invariant y >= x - 2;\nloop invariant x >= y - 2;\nloop invariant y <= x + 2;\nloop invariant x <= y + 2;\nloop invariant y >= x - 2;\nloop invariant x >= y - 2;\nloop invariant y <= x + 2;\nloop invariant x <= y + 2;\nloop invariant y >= x - 2;\nloop invariant x >= y - 2;\nloop invariant y <= x + 2;\nloop invariant x <= y + 2;\nloop invariant y >= x - 2;\nloop invariant x >= y - 2;\nloop invariant y <= x + 2;\nloop invariant x <= y + 2;\nloop invariant y >= x - 2;\nloop invariant x >= y - 2;\nloop invariant y <= x + 2;\nloop invariant x <= y + 2;\nloop invariant y >= x - 2;\nloop invariant x >= y - 2;\nloop invariant y <= x + 2;\nloop invariant x <= y + 2;\nloop invariant y >= x - 2;\nloop invariant x >= y - 2;\nloop invariant y <= x + 2;\nloop invariant x <= y + 2;\nloop invariant y >= x - 2;\nloop invariant x >= y - 2;\nloop invariant y <= x + 2;\nloop invariant x <= y + 2;\nloop invariant y >= x - 2;\nloop invariant x >= y - 2;\nloop invariant y <= x + 2;\nloop invariant x <= y + 2;\nloop invariant y >= x - 2;\nloop invariant x >= y - 2;\nloop invariant y <= x + 2;\nloop invariant x <= y + 2;\nloop invariant y >= x - 2;\nloop invariant x >= y - 2;\nloop invariant y <= x + 2;\nloop invariant x <= y + 2;\nloop invariant y >= x - 2;\nloop invariant x >= y - 2;\nloop invariant y <= x + 2;\nloop invariant x <= y + 2;\nloop invariant y >= x - 2;\nloop invariant x >= y - 2;\nloop invariant y <= x + 2;\nloop invariant x <= y + 2;\nloop invariant y >= x - 2;\nloop invariant x >= y - 2;\nloop invariant y <= x + 2;\nloop invariant x <= y + 2;\nloop invariant y >= x - 2;\nloop invariant x >= y - 2;\nloop invariant y <= x + 2;\nloop invariant x <= y + 2;\nloop invariant y >= x - 2;\nloop invariant x >= y - 2;\nloop invariant y <= x + 2;\nloop invariant x <= y + 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint __BLAST_NONDET;\nvoid main() {\n  int x,y;\n\n  assume(0 <= x);  assume(x <= 2);\n  assume(0 <= y);  assume(y <= 2);\n  /*@\n\n\nloop invariant i3: x >= 0;\nloop invariant i4: y >= 0;\n\n\n\nloop invariant i8: x <= y + 2;\nloop invariant i9: y >= x - 2;\nloop invariant i10: x >= y - 2;\nloop invariant i11: y <= x + 2;\n*/\nwhile( __BLAST_NONDET ) {\n\tx+=2;\n\ty+=2;\n  }\n  if( y >= 0 ) \n    if( y <= 0 ) \n      if( 4 <= x ) \n\t{;\n//@ assert( x < 4 );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 13,
                "annotations": "```\n/*@\nloop invariant x + 2*y >= 0;\nloop invariant x + 2*y <= 4;\nloop invariant x >= 0;\nloop invariant x <= 4;\nloop invariant y >= 0;\nloop invariant y <= 2;\nloop invariant 0 <= x + y <= 4;\nloop invariant 0 <= x + 2*y <= 8;\nloop invariant x + y <= 4;\nloop invariant x + 2*y <= 8;\nloop invariant x + 3*y <= 12;\nloop invariant x + 4*y <= 16;\nloop invariant x + 5*y <= 20;\nloop invariant x + 6*y <= 24;\nloop invariant x + 7*y <= 28;\nloop invariant x + 8*y <= 32;\nloop invariant x + 9*y <= 36;\nloop invariant x + 10*y <= 40;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint __BLAST_NONDET;\nvoid main() {\n  int x,y;\n\n  assume(0 <= x);  assume(x <= 2);\n  assume(0 <= y);  assume(y <= 2);\n  /*@\nloop invariant i1: x + 2*y >= 0;\n\nloop invariant i3: x >= 0;\n\nloop invariant i5: y >= 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile( __BLAST_NONDET ) {\n\tx+=2;\n\ty+=2;\n  }\n  if( y >= 0 ) \n    if( y <= 0 ) \n      if( 4 <= x ) \n\t{;\n//@ assert( x < 4 );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x <= 2 + 2 * y;\nloop invariant y >= x / 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint __BLAST_NONDET;\nvoid main() {\n  int x,y;\n\n  assume(0 <= x);  assume(x <= 2);\n  assume(0 <= y);  assume(y <= 2);\n  /*@\nloop invariant i1: x >= 0;\nloop invariant i2: y >= 0;\n\n\nloop invariant i5: x <= 2 + 2 * y;\n\n*/\nwhile( __BLAST_NONDET ) {\n\tx+=2;\n\ty+=2;\n  }\n  if( y >= 0 ) \n    if( y <= 0 ) \n      if( 4 <= x ) \n\t{;\n//@ assert( x < 4 );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant __BLAST_NONDET ==> (y >= 0 && y <= 2);\nloop invariant __BLAST_NONDET ==> (x >= 0 && x <= 4);\nloop invariant __BLAST_NONDET ==> (y >= x - 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint __BLAST_NONDET;\nvoid main() {\n  int x,y;\n\n  assume(0 <= x);  assume(x <= 2);\n  assume(0 <= y);  assume(y <= 2);\n  /*@\n\n\nloop invariant i3: __BLAST_NONDET ==> (y >= x - 2);\n*/\nwhile( __BLAST_NONDET ) {\n\tx+=2;\n\ty+=2;\n  }\n  if( y >= 0 ) \n    if( y <= 0 ) \n      if( 4 <= x ) \n\t{;\n//@ assert( x < 4 );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 2 <= x <= 4;\nloop invariant 0 <= y <= 2;\nloop invariant y >= 0 ==> x >= 4;\nloop invariant y <= 0 ==> x < 4;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint __BLAST_NONDET;\nvoid main() {\n  int x,y;\n\n  assume(0 <= x);  assume(x <= 2);\n  assume(0 <= y);  assume(y <= 2);\n  /*@\n\n\n\n\n*/\nwhile( __BLAST_NONDET ) {\n\tx+=2;\n\ty+=2;\n  }\n  if( y >= 0 ) \n    if( y <= 0 ) \n      if( 4 <= x ) \n\t{;\n//@ assert( x < 4 );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 4;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y >= x - 2;\nloop invariant y <= x + 2;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant y >= 0 ==> x < 4;\nloop invariant y <= 0 ==> x >= 4;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint __BLAST_NONDET;\nvoid main() {\n  int x,y;\n\n  assume(0 <= x);  assume(x <= 2);\n  assume(0 <= y);  assume(y <= 2);\n  /*@\n\n\nloop invariant i3: x >= 0;\nloop invariant i4: y >= 0;\nloop invariant i5: y >= x - 2;\nloop invariant i6: y <= x + 2;\n\n\n\n\n*/\nwhile( __BLAST_NONDET ) {\n\tx+=2;\n\ty+=2;\n  }\n  if( y >= 0 ) \n    if( y <= 0 ) \n      if( 4 <= x ) \n\t{;\n//@ assert( x < 4 );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint __BLAST_NONDET;\nvoid main() {\n  int x,y;\n\n  assume(0 <= x);  assume(x <= 2);\n  assume(0 <= y);  assume(y <= 2);\n  /*@\n\n*/\nwhile( __BLAST_NONDET ) {\n\tx+=2;\n\ty+=2;\n  }\n  if( y >= 0 ) \n    if( y <= 0 ) \n      if( 4 <= x ) \n\t{;\n//@ assert( x < 4 );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= 2;\nloop invariant x <= 4;\nloop invariant x >= y;\nloop invariant x - 2 * y <= 4;\nloop invariant x - 2 * y >= 0;\nloop invariant y >= 0 ==> x >= y;\nloop invariant x - 2 * y <= 4 ==> x >= y;\nloop invariant x >= y ==> x - 2 * y >= 0;\nloop invariant x - 2 * y <= 4 ==> x - 2 * y >= 0;\nloop invariant x - 2 * y >= 0 ==> x - 2 * y <= 4;\nloop invariant x - 2 * y >= 0 ==> x - 2 * y >= 0;\nloop invariant x - 2 * y <= 4 ==> x - 2 * y <= 4;\nloop invariant x - 2 * y >= 0 ==> x - 2 * y <= 4;\nloop invariant x >= y ==> x - 2 * y >= 0;\nloop invariant x >= y ==> x - 2 * y <= 4;\nloop invariant x - 2 * y >= 0 ==> x >= y;\nloop invariant x - 2 * y <= 4 ==> x >= y;\nloop invariant x - 2 * y >= 0 ==> x >= y;\nloop invariant x - 2 * y <= 4 ==> x >= y;\nloop invariant x - 2 * y >= 0 ==> x - 2 * y <= 4;\nloop invariant x - 2 * y <= 4 ==> x - 2 * y >= 0;\nloop invariant x >= y ==> x - 2 * y >= 0;\nloop invariant x >= y ==> x - 2 * y <= 4;\nloop invariant x - 2 * y >= 0 ==> x >= y;\nloop invariant x - 2 * y <= 4 ==> x >= y;\nloop invariant x >= y ==> x >= y;\nloop invariant x - 2 * y >= 0 ==> x - 2 * y >= 0;\nloop invariant x - 2 * y <= 4 ==> x - 2 * y <= 4;\nloop invariant x >= y ==> x - 2 * y >= 0;\nloop invariant x >= y ==> x - 2 * y <= 4;\nloop invariant x - 2 * y >= 0 ==> x >= y;\nloop invariant x - 2 * y <= 4 ==> x >= y;\nloop invariant x - 2 * y >= 0 ==> x >= y;\nloop invariant x - 2 * y <= 4 ==> x >= y;\nloop invariant x - 2 * y >= 0 ==> x - 2 * y <= 4;\nloop invariant x - 2 * y <= 4 ==> x - 2 * y >= 0;\nloop invariant x >= y ==> x - 2 * y >= 0;\nloop invariant x >= y ==> x - 2 * y <= 4;\nloop invariant x - 2 * y >= 0 ==> x >= y;\nloop invariant x - 2 * y <= 4 ==> x >= y;\nloop invariant x >= y ==> x >= y;\nloop invariant x - 2 * y >= 0 ==> x - 2 * y >= 0;\nloop invariant x - 2 * y <= 4 ==> x - 2 * y <= 4;\nloop invariant x >= y ==> x - 2 * y >= 0;\nloop invariant x >= y ==> x - 2 * y <= 4;\nloop invariant x - 2 * y >= 0 ==> x >= y;\nloop invariant x - 2 * y <= 4 ==> x >= y;\nloop invariant x - 2 * y >= 0 ==> x >= y;\nloop invariant x - 2 * y <= 4 ==> x >= y;\nloop invariant x - 2 * y >= 0 ==> x - 2 * y <= 4;\nloop invariant x - 2 * y <= 4 ==> x - 2 * y >= 0;\nloop invariant x >= y ==> x - 2 * y >= 0;\nloop invariant x >= y ==> x - 2 * y <= 4;\nloop invariant x - 2 * y >= 0 ==> x >= y;\nloop invariant x - 2 * y <= 4 ==> x >= y;\nloop invariant x >= y ==> x >= y;\nloop invariant x - 2 * y >= 0 ==> x - 2 * y >= 0;\nloop invariant x - 2 * y <= 4 ==> x - 2 * y <= 4;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint __BLAST_NONDET;\nvoid main() {\n  int x,y;\n\n  assume(0 <= x);  assume(x <= 2);\n  assume(0 <= y);  assume(y <= 2);\n  /*@\nloop invariant i1: y >= 0;\nloop invariant i2: x >= 0;\n\n\n\nloop invariant i6: x - 2 * y <= 4;\n\n\n\n\n\nloop invariant i12: x - 2 * y >= 0 ==> x - 2 * y <= 4;\nloop invariant i13: x - 2 * y >= 0 ==> x - 2 * y >= 0;\nloop invariant i14: x - 2 * y <= 4 ==> x - 2 * y <= 4;\nloop invariant i15: x >= y ==> x - 2 * y <= 4;\nloop invariant i16: x - 2 * y >= 0 ==> x >= y;\nloop invariant i17: x >= y ==> x >= y;\n*/\nwhile( __BLAST_NONDET ) {\n\tx+=2;\n\ty+=2;\n  }\n  if( y >= 0 ) \n    if( y <= 0 ) \n      if( 4 <= x ) \n\t{;\n//@ assert( x < 4 );\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 14: unbound logic variable i1. Ignoring loop annotation",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint __BLAST_NONDET;\nvoid main() {\n  int x,y;\n\n  assume(0 <= x);  assume(x <= 2);\n  assume(0 <= y);  assume(y <= 2);\n  /*@\nloop invariant i1: i1;\nloop invariant i2: i2;\nloop invariant i3: 0 <= x <= 2;\nloop invariant i4: 0 <= y <= 2;\nloop invariant i5: x < 4 ==> y < 0 || y > 0 || 4 > x;\nloop invariant i6: x < 4 ==> 4 <= x ==> y >= 0;\nloop invariant i7: x <= 2;\nloop invariant i8: y <= 2;\nloop invariant i9: x >= 0;\nloop invariant i10: y >= 0;\nloop invariant i11: y - x >= 0;\nloop invariant i12: y >= x;\nloop invariant i13: x - y <= 2;\nloop invariant i14: x <= y + 2;\nloop invariant i15: y - x <= 2;\nloop invariant i16: y <= x + 2;\nloop invariant i17: 0 <= x <= 4;\nloop invariant i18: x >= y;\nloop invariant i19: x <= 4;\nloop invariant i20: 1 <= x <= 4;\nloop invariant i21: 1 <= y <= 4;\nloop invariant i22: x <= y;\nloop invariant i23: (x < 4) ==> (y < 4);\nloop invariant i24: y >= 0 ==> x >= 4 ==> x < 4;\nloop invariant i25: 0 <= y <= 4;\nloop invariant i26: x == y || x == y + 2;\nloop invariant i27: x == y || x == y + 2 || x == y + 4;\nloop invariant i28: x == y || x == y + 2 || x == y + 4 || x == y + 6;\nloop invariant i29: x == y || x == y + 2 || x == y + 4 || x == y + 6 || x == y + 8;\nloop invariant i30: x == y || x == y + 2 || x == y + 4 || x == y + 6 || x == y + 8 || x == y + 10;\nloop invariant i31: x == y || x == y + 2 || x == y + 4 || x == y + 6 || x == y + 8 || x == y + 10 || x == y + 12;\nloop invariant i32: x == y || x == y + 2 || x == y + 4 || x == y + 6 || x == y + 8 || x == y + 10 || x == y + 12 || x == y + 14;\nloop invariant i33: x == y || x == y + 2 || x == y + 4 || x == y + 6 || x == y + 8 || x == y + 10 || x == y + 12 || x == y + 14 || x == y + 16;\nloop invariant i34: x == y || x == y + 2 || x == y + 4 || x == y + 6 || x == y + 8 || x == y + 10 || x == y + 12 || x == y + 14 || x == y + 16 || x == y + 18;\nloop invariant i35: x == y || x == y + 2 || x == y + 4 || x == y + 6 || x == y + 8 || x == y + 10 || x == y + 12 || x == y + 14 || x == y + 16 || x == y + 18 || x == y + 20;\nloop invariant i36: x == y || x == y + 2 || x == y + 4 || x == y + 6 || x == y + 8 || x == y + 10 || x == y + 12 || x == y + 14 || x == y + 16 || x == y + 18 || x == y + 20 || x == y + 22;\nloop invariant i37: x == y || x == y + 2 || x == y + 4 || x == y + 6 || x == y + 8 || x == y + 10 || x == y + 12 || x == y + 14 || x == y + 16 || x == y + 18 || x == y + 20 || x == y + 22 || x == y + 24;\nloop invariant i38: x == y || x == y + 2 || x == y + 4 || x == y + 6 || x == y + 8 || x == y + 10 || x == y + 12 || x == y + 14 || x == y + 16 || x == y + 18 || x == y + 20 || x == y + 22 || x == y + 24 || x == y + 26;\nloop invariant i39: x == y || x == y + 2 || x == y + 4 || x == y + 6 || x == y + 8 || x == y + 10 || x == y + 12 || x == y + 14 || x == y + 16 || x == y + 18 || x == y + 20 || x == y + 22 || x == y + 24 || x == y + 26 || x == y + 28;\nloop invariant i40: y >= x - 2;\nloop invariant i41: x >= y - 2;\nloop invariant i42: x + 2*y >= 0;\nloop invariant i43: x + 2*y <= 4;\nloop invariant i44: 0 <= x + y <= 4;\nloop invariant i45: 0 <= x + 2*y <= 8;\nloop invariant i46: x + y <= 4;\nloop invariant i47: x + 2*y <= 8;\nloop invariant i48: x + 3*y <= 12;\nloop invariant i49: x + 4*y <= 16;\nloop invariant i50: x + 5*y <= 20;\nloop invariant i51: x + 6*y <= 24;\nloop invariant i52: x + 7*y <= 28;\nloop invariant i53: x + 8*y <= 32;\nloop invariant i54: x + 9*y <= 36;\nloop invariant i55: x + 10*y <= 40;\nloop invariant i56: x <= 2 + 2 * y;\nloop invariant i57: y >= x / 2;\nloop invariant i58: __BLAST_NONDET ==> (y >= 0 && y <= 2);\nloop invariant i59: __BLAST_NONDET ==> (x >= 0 && x <= 4);\nloop invariant i60: __BLAST_NONDET ==> (y >= x - 2);\nloop invariant i61: 2 <= x <= 4;\nloop invariant i62: y >= 0 ==> x >= 4;\nloop invariant i63: y <= 0 ==> x < 4;\nloop invariant i64: y >= 0 ==> x < 4;\nloop invariant i65: y <= 0 ==> x >= 4;\nloop invariant i66: x - 2 * y <= 4;\nloop invariant i67: x - 2 * y >= 0;\nloop invariant i68: y >= 0 ==> x >= y;\nloop invariant i69: x - 2 * y <= 4 ==> x >= y;\nloop invariant i70: x >= y ==> x - 2 * y >= 0;\nloop invariant i71: x - 2 * y <= 4 ==> x - 2 * y >= 0;\nloop invariant i72: x - 2 * y >= 0 ==> x - 2 * y <= 4;\nloop invariant i73: x - 2 * y >= 0 ==> x - 2 * y >= 0;\nloop invariant i74: x - 2 * y <= 4 ==> x - 2 * y <= 4;\nloop invariant i75: x >= y ==> x - 2 * y <= 4;\nloop invariant i76: x - 2 * y >= 0 ==> x >= y;\nloop invariant i77: x >= y ==> x >= y;\n*/\nwhile( __BLAST_NONDET ) {\n\tx+=2;\n\ty+=2;\n  }\n  if( y >= 0 ) \n    if( y <= 0 ) \n      if( 4 <= x ) \n\t{;\n//@ assert( x < 4 );\n}\n\n}",
        "combined_annotation_num_solver_calls": 21,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint __BLAST_NONDET;\nvoid main() {\n  int x,y;\n\n  assume(0 <= x);  assume(x <= 2);\n  assume(0 <= y);  assume(y <= 2);\n  /*@\n\n\n\n\nloop invariant i5: x < 4 ==> y < 0 || y > 0 || 4 > x;\nloop invariant i6: x < 4 ==> 4 <= x ==> y >= 0;\n\n\nloop invariant i9: x >= 0;\nloop invariant i10: y >= 0;\n\n\nloop invariant i13: x - y <= 2;\nloop invariant i14: x <= y + 2;\nloop invariant i15: y - x <= 2;\nloop invariant i16: y <= x + 2;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i40: y >= x - 2;\nloop invariant i41: x >= y - 2;\nloop invariant i42: x + 2*y >= 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i56: x <= 2 + 2 * y;\n\n\n\nloop invariant i60: __BLAST_NONDET ==> (y >= x - 2);\n\n\nloop invariant i63: y <= 0 ==> x < 4;\n\n\nloop invariant i66: x - 2 * y <= 4;\n\n\n\n\n\nloop invariant i72: x - 2 * y >= 0 ==> x - 2 * y <= 4;\nloop invariant i73: x - 2 * y >= 0 ==> x - 2 * y >= 0;\nloop invariant i74: x - 2 * y <= 4 ==> x - 2 * y <= 4;\nloop invariant i75: x >= y ==> x - 2 * y <= 4;\nloop invariant i76: x - 2 * y >= 0 ==> x >= y;\nloop invariant i77: x >= y ==> x >= y;\n*/\nwhile( __BLAST_NONDET ) {\n\tx+=2;\n\ty+=2;\n  }\n  if( y >= 0 ) \n    if( y <= 0 ) \n      if( 4 <= x ) \n\t{;\n//@ assert( x < 4 );\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/11.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/15.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/16.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/18.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/20.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/23.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/30.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/37.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/38.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/43.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/46.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/popl.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/07.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/39.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/gulv_simp.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/substring1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/xy10.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/const_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/multivar_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/phases_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/simple_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/simple_safe2.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/simple_safe3.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/simple_safe4.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/underapprox_safe2.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/underapprox_unsafe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/barbr.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/barbrprime.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/bk-nat.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/bkley.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/efm.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/ex1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/lifnat.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/lifnatprime.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/lifo.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/seesaw.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/substring1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/swim.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/swim1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/gulwani_cegar1.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/split.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/13.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/14.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/19.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/32.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/39.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/41.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/44.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/cav.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/05.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/19.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/37.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/gulv.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/pldi082_unbounded.c"
        ],
        "skipped": [],
        "total": 163,
        "success_count": 135,
        "failure_count": 28,
        "success_rate": 0.8282208588957055
    }
}