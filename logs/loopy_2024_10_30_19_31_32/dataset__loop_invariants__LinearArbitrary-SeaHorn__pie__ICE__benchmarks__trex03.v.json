{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.v.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  unsigned int x1=unknown_uint(), x2=unknown_uint(), x3=unknown_uint();\n  unsigned int d1=1, d2=1, d3=1;\n  int v1, v2, v3;\n  _Bool c1=unknown_bool(), c2=unknown_bool();\n  \n  while(x1>0 && x2>0 && x3>0)\n  {\n    if (c1) x1=x1-d1;\n    else if (c2) x2=x2-d2;\n    else x3=x3-d3;\n    c1=unknown_bool();\n    c2=unknown_bool();\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n\n  {;\n//@ assert(x1==0 || x2==0 || x3==0);\n}\n\n  return 0;\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant (x1 - x2) * (x1 - x3) >= 0;\nloop invariant (x2 - x1) * (x2 - x3) >= 0;\nloop invariant (x3 - x1) * (x3 - x2) >= 0;\nloop invariant x1 == 0 || x2 == 0 || x3 == 0;\n*/\n```",
            "```\n/*@\nloop invariant x1 >= 0 and x1 <= x1_init;\nloop invariant x2 >= 0 and x2 <= x2_init;\nloop invariant x3 >= 0 and x3 <= x3_init;\nloop invariant x1 + x2 + x3 <= x1_init + x2_init + x3_init;\nloop invariant x1 + x2 + x3 >= 0;\nloop invariant d1 >= 1;\nloop invariant d2 >= 1;\nloop invariant d3 >= 1;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant c1 is a boolean value;\nloop invariant c2 is a boolean value;\nloop invariant x1 >= x1_init - d1 * (x1_init/x1_init + 1)/2;\nloop invariant x2 >= x2_init - d2 * (x2_init/x2_init + 1)/2;\nloop invariant x3 >= x3_init - d3 * (x3_init/x3_init + 1)/2;\nloop invariant x1 <= x1_init - d1 * (x1_init/x1_init + 1)/2;\nloop invariant x2 <= x2_init - d2 * (x2_init/x2_init + 1)/2;\nloop invariant x3 <= x3_init - d3 * (x3_init/x3_init + 1)/2;\nloop invariant if (x1 >= 0) then (x1 <= x1_init);\nloop invariant if (x2 >= 0) then (x2 <= x2_init);\nloop invariant if (x3 >= 0) then (x3 <= x3_init);\nloop invariant if (x1 == 0) then (x2 >= 0 && x3 >= 0);\nloop invariant if (x2 == 0) then (x1 >= 0 && x3 >= 0);\nloop invariant if (x3 == 0) then (x1 >= 0 && x2 >= 0);\nloop invariant if (c1) then (x1 >= x1_init - d1 * (x1_init/x1_init + 1)/2);\nloop invariant if (c2) then (x2 >= x2_init - d2 * (x2_init/x2_init + 1)/2);\nloop invariant if (!c1 && !c2) then (x3 >= x3_init - d3 * (x3_init/x3_init + 1)/2);\nloop invariant if (c1) then (x1 <= x1_init - d1 * (x1_init/x1_init + 1)/2);\nloop invariant if (c2) then (x2 <= x2_init - d2 * (x2_init/x2_init + 1)/2);\nloop invariant if (!c1 && !c2) then (x3 <= x3_init - d3 * (x3_init/x3_init + 1)/2);\nloop invariant if (c1) then (x1 >= 0);\nloop invariant if (c2) then (x2 >= 0);\nloop invariant if (!c1 && !c2) then (x3 >= 0);\nloop invariant if (c1) then (x1 <= x1_init);\nloop invariant if (c2) then (x2 <= x2_init);\nloop invariant if (!c1 && !c2) then (x3 <= x3_init);\nloop invariant if (c1) then (x1 <= x1_init - d1 * (x1_init/x1_init + 1)/2);\nloop invariant if (c2) then (x2 <= x2_init - d2 * (x2_init/x2_init + 1)/2);\nloop invariant if (!c1 && !c2) then (x3 <= x3_init - d3 * (x3_init/x3_init + 1)/2);\nloop invariant if (c1) then (x1 >= x1_init - d1 * (x1_init/x1_init + 1)/2);\nloop invariant if (c2) then (x2 >= x2_init - d2 * (x2_init/x2_init + 1)/2);\nloop invariant if (!c1 && !c2) then (x3 >= x3_init - d3 * (x3_init/x3_init + 1)/2);\nloop invariant if (c1) then (x1 >= 0 && x1 <= x1_init - d1 * (x1_init/x1_init + 1)/2);\n*/\n```",
            "```\n/*@\nloop invariant x1 <= x2 <= x3;\nloop invariant d1 <= x1;\nloop invariant d2 <= x2;\nloop invariant d3 <= x3;\nloop invariant x1 == 0 || x2 == 0 || x3 == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x1 <= unknown_uint();\nloop invariant 0 <= x2 <= unknown_uint();\nloop invariant 0 <= x3 <= unknown_uint();\nloop invariant 0 <= d1 <= unknown_uint();\nloop invariant 0 <= d2 <= unknown_uint();\nloop invariant 0 <= d3 <= unknown_uint();\nloop invariant c1 == unknown_bool();\nloop invariant c2 == unknown_bool();\nloop invariant v1 == unknown_int();\nloop invariant v2 == unknown_int();\nloop invariant v3 == unknown_int();\nloop invariant x1 > 0 ==> c1 == unknown_bool();\nloop invariant x2 > 0 ==> c2 == unknown_bool();\nloop invariant x3 > 0 ==> c1 == unknown_bool() || c2 == unknown_bool();\nloop invariant x1 > 0 ==> x2 > 0 ==> x3 > 0 ==> c1 == unknown_bool();\nloop invariant x1 > 0 ==> x2 > 0 ==> x3 > 0 ==> c2 == unknown_bool();\nloop invariant x1 > 0 ==> x2 > 0 ==> x3 > 0 ==> x1 >= d1;\nloop invariant x1 > 0 ==> x2 > 0 ==> x3 > 0 ==> x2 >= d2;\nloop invariant x1 > 0 ==> x2 > 0 ==> x3 > 0 ==> x3 >= d3;\nloop invariant x1 > 0 ==> x2 > 0 ==> x3 > 0 ==> d1 > 0;\nloop invariant x1 > 0 ==> x2 > 0 ==> x3 > 0 ==> d2 > 0;\nloop invariant x1 > 0 ==> x2 > 0 ==> x3 > 0 ==> d3 > 0;\nloop invariant x1 > 0 ==> x2 > 0 ==> x3 > 0 ==> d1 <= x1;\nloop invariant x1 > 0 ==> x2 > 0 ==> x3 > 0 ==> d2 <= x2;\nloop invariant x1 > 0 ==> x2 > 0 ==> x3 > 0 ==> d3 <= x3;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x1 <= 4294967295;\nloop invariant 0 <= x2 <= 4294967295;\nloop invariant 0 <= x3 <= 4294967295;\nloop invariant 0 <= d1 <= 4294967295;\nloop invariant 0 <= d2 <= 4294967295;\nloop invariant 0 <= d3 <= 4294967295;\nloop invariant -2147483648 <= v1 <= 2147483647;\nloop invariant -2147483648 <= v2 <= 2147483647;\nloop invariant -2147483648 <= v3 <= 2147483647;\nloop invariant 0 <= c1 <= 1;\nloop invariant 0 <= c2 <= 1;\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x3 - x1 == v3;\nloop invariant x3 - x2 == v2;\nloop invariant x3 - v1 == x1 - v1;\nloop invariant x3 - v2 == x2 - v2;\nloop invariant x3 - v3 == x1 - v1;\nloop invariant x3 - v3 == x2 - v2;\nloop invariant x3 - v3 == x1 - v1 - x2 + v2;\nloop invariant x3 - v3 == x1 - v1 - x2 + v2 - x1 + v1;\nloop invariant x3 - v3 == x2 - v2 - x1 + v1;\nloop invariant x3 - v3 == x2 - v2 - x1 + v1 - x2 + v2;\nloop invariant x3 - v3 == x1 - v1 - x2 + v2 - x1 + v1 - x2 + v2;\nloop invariant x3 - v3 == x1 - v1 - x2 + v2 - x1 + v1 - x2 + v2 - x2 + v2;\nloop invariant x3 - v3 == x1 - v1 - x2 + v2 - x1 + v1 - x2 + v2 - x1 + v1;\nloop invariant x3 - v3 == x2 - v2 - x1 + v1 - x2 + v2 - x1 + v1;\nloop invariant x3 - v3 == x2 - v2 - x1 + v1 - x2 + v2 - x1 + v1 - x2 + v2;\nloop invariant x3 - v3 == x1 - v1 - x2 + v2 - x1 + v1 - x2 + v2 - x1 + v1 - x2 + v2;\nloop invariant x3 - v3 == x1 - v1 - x2 + v2 - x1 + v1 - x2 + v2 - x1 + v1 - x2 + v2 - x2 + v2;\nloop invariant x3 - v3 == x1 - v1 - x2 + v2 - x1 + v1 - x2 + v2 - x1 + v1 - x2 + v2 - x1 + v1;\nloop invariant x3 - v3 == x2 - v2 - x1 + v1 - x2 + v2 - x1 + v1 - x2 + v2 - x1 + v1;\nloop invariant x3 - v3 == x2 - v2 - x1 + v1 - x2 + v2 - x1 + v1 - x2 + v2 - x1 + v1 - x2 + v2;\nloop invariant x3 - v3 == x1 - v1 - x2 + v2 - x1 + v1 - x2 + v2 - x1 + v1 - x2 + v2 - x1 + v1 - x2 + v2;\nloop invariant x3 - v3 == x1 - v1 - x2 + v2 - x1 + v1 - x2 + v2 - x1 + v1 - x2 + v2 - x1 + v1 - x2 + v2 - x2 + v2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x1 <= 2^32 - 1;\nloop invariant 0 <= x2 <= 2^32 - 1;\nloop invariant 0 <= x3 <= 2^32 - 1;\nloop invariant 0 <= d1 <= 2^32 - 1;\nloop invariant 0 <= d2 <= 2^32 - 1;\nloop invariant 0 <= d3 <= 2^32 - 1;\nloop invariant v1 = unknown_int();\nloop invariant v2 = unknown_int();\nloop invariant v3 = unknown_int();\nloop invariant c1 = unknown_bool();\nloop invariant c2 = unknown_bool();\nloop invariant (x1 > 0) ==> (x1 - d1 >= 0);\nloop invariant (x2 > 0) ==> (x2 - d2 >= 0);\nloop invariant (x3 > 0) ==> (x3 - d3 >= 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x1 <= 2147483647;\nloop invariant 0 <= x2 <= 2147483647;\nloop invariant 0 <= x3 <= 2147483647;\nloop invariant 0 <= d1 <= 2147483647;\nloop invariant 0 <= d2 <= 2147483647;\nloop invariant 0 <= d3 <= 2147483647;\nloop invariant 0 <= v1 <= 2147483647;\nloop invariant 0 <= v2 <= 2147483647;\nloop invariant 0 <= v3 <= 2147483647;\nloop invariant x2 >= x1;\nloop invariant x3 >= x2;\nloop invariant x1 >= d1;\nloop invariant x2 >= d2;\nloop invariant x3 >= d3;\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant d1 >= 0;\nloop invariant d2 >= 0;\nloop invariant d3 >= 0;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant c1 == unknown_bool();\nloop invariant c2 == unknown_bool();\nloop invariant d1 == 1 ==> x1 >= d1;\nloop invariant d2 == 1 ==> x2 >= d2;\nloop invariant d3 == 1 ==> x3 >= d3;\nloop invariant d1 == 1 ==> x1 <= x1 + d1;\nloop invariant d2 == 1 ==> x2 <= x2 + d2;\nloop invariant d3 == 1 ==> x3 <= x3 + d3;\nloop invariant d1 == 1 ==> x1 <= x1 - d1;\nloop invariant d2 == 1 ==> x2 <= x2 - d2;\nloop invariant d3 == 1 ==> x3 <= x3 - d3;\nloop invariant d1 == 1 ==> x1 <= x1 + 1;\nloop invariant d2 == 1 ==> x2 <= x2 + 1;\nloop invariant d3 == 1 ==> x3 <= x3 + 1;\nloop invariant d1 == 1 ==> x1 <= x1 - 1;\nloop invariant d2 == 1 ==> x2 <= x2 - 1;\nloop invariant d3 == 1 ==> x3 <= x3 - 1;\nloop invariant d1 == 1 ==> x1 <= x1 + v1;\nloop invariant d2 == 1 ==> x2 <= x2 + v2;\nloop invariant d3 == 1 ==> x3 <= x3 + v3;\nloop invariant d1 == 1 ==> x1 <= x1 - v1;\nloop invariant d2 == 1 ==> x2 <= x2 - v2;\nloop invariant d3 == 1 ==> x3 <= x3 - v3;\nloop invariant d1 == 1 ==> x1 <= x1 + d1 + v1;\nloop invariant d2 == 1 ==> x2 <= x2 + d2 + v2;\nloop invariant d3 == 1 ==> x3 <= x3 + d3 + v3;\nloop invariant d1 == 1 ==> x1 <= x1 - d1 - v1;\nloop invariant d2 == 1 ==> x2 <= x2 - d2 - v2;\nloop invariant d3 == 1 ==> x3 <= x3 - d3 - v3;\nloop invariant d1 == 1 ==> x1 <= x1 + d1 + v1 - v2;\nloop invariant d2 == 1 ==> x2 <= x2 + d2 + v2 - v3;\nloop invariant d3 == 1 ==> x3 <= x3 + d3 + v3 - v1;\nloop invariant d1 == 1 ==> x1 <= x1 - d1 - v1 + v2;\nloop invariant d2 == 1 ==> x2 <= x2 - d2 - v2 + v3;\nloop invariant d3 == 1 ==> x3 <= x3 - d3 - v3 + v1;\nloop invariant d1 == 1 ==> x1 <= x1 + d1 + v1 - v2 + v3;\nloop invariant d2 == 1 ==> x2 <= x2 + d2 + v2 - v3 + v1;\nloop invariant d3 == 1 ==> x3 <= x3 + d3 + v3 - v1 + v2;\n*/\n```",
            "```\n/*@\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant (x1 > 0 ==> x1 >= d1);\nloop invariant (x2 > 0 ==> x2 >= d2);\nloop invariant (x3 > 0 ==> x3 >= d3);\nloop invariant (x1 > 0 ==> c1 || c2);\nloop invariant (x2 > 0 ==> c1 || c2);\nloop invariant (x3 > 0 ==> c1 || c2);\nloop invariant (x1 > 0 ==> (c1 ==> x1 - d1 >= 0));\nloop invariant (x2 > 0 ==> (c2 ==> x2 - d2 >= 0));\nloop invariant (x3 > 0 ==> (!c1 && !c2 ==> x3 - d3 >= 0));\nloop invariant (v1 == unknown_int() ==> v1 <= unknown_int());\nloop invariant (v2 == unknown_int() ==> v2 <= unknown_int());\nloop invariant (v3 == unknown_int() ==> v3 <= unknown_int());\nloop invariant (v1 == unknown_int() ==> v1 >= unknown_int());\nloop invariant (v2 == unknown_int() ==> v2 >= unknown_int());\nloop invariant (v3 == unknown_int() ==> v3 >= unknown_int());\nloop invariant (c1 ==> c1 == unknown_bool());\nloop invariant (c2 ==> c2 == unknown_bool());\nloop invariant (x1 == 0 ==> x1 == 0);\nloop invariant (x2 == 0 ==> x2 == 0);\nloop invariant (x3 == 0 ==> x3 == 0);\nloop invariant (x1 == 0 ==> x2 >= 0);\nloop invariant (x1 == 0 ==> x3 >= 0);\nloop invariant (x2 == 0 ==> x1 >= 0);\nloop invariant (x2 == 0 ==> x3 >= 0);\nloop invariant (x3 == 0 ==> x1 >= 0);\nloop invariant (x3 == 0 ==> x2 >= 0);\n*/\n```",
            "```\n/*@\nloop invariant x1 >= 0 && x2 >= 0 && x3 >= 0;\nloop invariant x1 == x2 + d2 + d3 - d1 || x1 == x3 + d3 + d1 - d2;\nloop invariant x2 == x1 + d1 + d3 - d2 || x2 == x3 + d3 + d2 - d1;\nloop invariant x3 == x1 + d1 + d2 - d3 || x3 == x2 + d2 + d1 - d3;\nloop invariant c1 || c2;\nloop invariant c1 ==> x1 >= d1;\nloop invariant c2 ==> x2 >= d2;\nloop invariant x1 >= 0 ==> c1 || c2;\nloop invariant x2 >= 0 ==> c1 || c2;\nloop invariant x3 >= 0 ==> c1 || c2;\nloop invariant x1 >= 0 && x2 >= 0 && x3 >= 0 ==> c1 || c2;\nloop invariant x1 >= 0 && x2 >= 0 && x3 >= 0 && c1 ==> x1 >= d1;\nloop invariant x1 >= 0 && x2 >= 0 && x3 >= 0 && c2 ==> x2 >= d2;\nloop invariant x1 >= 0 && x2 >= 0 && x3 >= 0 && c1 ==> x2 >= 0;\nloop invariant x1 >= 0 && x2 >= 0 && x3 >= 0 && c2 ==> x1 >= 0;\nloop invariant x1 >= 0 && x2 >= 0 && x3 >= 0 && c1 ==> x3 >= 0;\nloop invariant x1 >= 0 && x2 >= 0 && x3 >= 0 && c2 ==> x3 >= 0;\nloop invariant x1 >= 0 && x2 >= 0 && x3 >= 0 && c1 ==> x1 == x2 + d2 + d3 - d1 || x1 == x3 + d3 + d1 - d2;\nloop invariant x1 >= 0 && x2 >= 0 && x3 >= 0 && c2 ==> x2 == x1 + d1 + d3 - d2 || x2 == x3 + d3 + d2 - d1;\nloop invariant x1 >= 0 && x2 >= 0 && x3 >= 0 && c1 ==> x3 == x1 + d1 + d2 - d3 || x3 == x2 + d2 + d1 - d3;\nloop invariant x1 >= 0 && x2 >= 0 && x3 >= 0 && c2 ==> x3 == x1 + d1 + d2 - d3 || x3 == x2 + d2 + d1 - d3;\nloop invariant x1 >= 0 && x2 >= 0 && x3 >= 0 && c1 ==> x1 >= 0 && x2 >= 0 && x3 >= 0 ==> c1 || c2;\nloop invariant x1 >= 0 && x2 >= 0 && x3 >= 0 && c2 ==> x1 >= 0 && x2 >= 0 && x3 >= 0 ==> c1 || c2;\nloop invariant x1 >= 0 && x2 >= 0 && x3 >= 0 && c1 ==> x1 >= 0 && x2 >= 0 && x3 >= 0 && c1 ==> x1 >= d1;\nloop invariant x1 >= 0 && x2 >= 0 && x3 >= 0 && c2 ==> x1 >= 0 && x2 >= 0 && x3 >= 0 && c2 ==> x2 >= d2;\nloop invariant x1 >= 0 && x2 >= 0 && x3 >= 0 && c1 ==> x1 >= 0 && x2 >= 0 && x3 >= 0 && c1 ==> x2 >= 0;\nloop invariant x1 >= 0 && x2 >= 0 && x3 >= 0 && c2 ==> x1 >= 0 && x2 >= 0 && x3 >= 0 && c2 ==> x1 >= 0;\nloop invariant x1 >= 0 && x2 >= 0 && x3 >= 0 && c1 ==> x1 >= 0 && x2 >= 0 && x3 >= 0 && c1 ==> x3 >= 0;\nloop invariant x1 >= 0 && x2 >= 0 && x3 >= 0 && c2 ==> x1 >= 0 && x2 >= 0 && x3 >= 0 && c2 ==> x3 >= 0;\n*/\n```",
            "```\n/*@\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 <= x2 + x3;\nloop invariant x2 <= x1 + x3;\nloop invariant x3 <= x1 + x2;\nloop invariant d1 in {1};\nloop invariant d2 in {1};\nloop invariant d3 in {1};\nloop invariant x1 == 0 || x2 == 0 || x3 == 0;\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 <= x2 + x3;\nloop invariant x2 <= x1 + x3;\nloop invariant x3 <= x1 + x2;\nloop invariant d1 in {1};\nloop invariant d2 in {1};\nloop invariant d3 in {1};\nloop invariant x1 == 0 || x2 == 0 || x3 == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x1 && 0 <= x2 && 0 <= x3;\nloop invariant x1 >= d1 * x1;\nloop invariant x2 >= d2 * x2;\nloop invariant x3 >= d3 * x3;\nloop invariant d1 >= 1 && d2 >= 1 && d3 >= 1;\nloop invariant c1 == unknown_bool() && c2 == unknown_bool();\nloop invariant v1 == unknown_int() && v2 == unknown_int() && v3 == unknown_int();\nloop invariant x1 == (x1 - d1) ==> c1 && x2 == (x2 - d2) ==> c2 && x3 == (x3 - d3) ==> !c1 && !c2;\nloop invariant x1 == (x1 - d1) ==> c1 && x2 == (x2 - d2) ==> c2 && x3 == (x3 - d3) ==> !c1 && !c2 ==> (x1 == 0 || x2 == 0 || x3 == 0);\n*/\n```",
            "```\n/*@\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant d1 >= 1;\nloop invariant d2 >= 1;\nloop invariant d3 >= 1;\nloop invariant v1 >= unknown_int();\nloop invariant v1 <= unknown_int();\nloop invariant v2 >= unknown_int();\nloop invariant v2 <= unknown_int();\nloop invariant v3 >= unknown_int();\nloop invariant v3 <= unknown_int();\nloop invariant c1 == unknown_bool();\nloop invariant c2 == unknown_bool();\nloop invariant x1 == x1 - d1 ==> c1 == 0;\nloop invariant x2 == x2 - d2 ==> c2 == 0;\nloop invariant x3 == x3 - d3 ==> c1 == 0 && c2 == 0;\nloop invariant x3 == x3 - d3 ==> c1 == 0 && c2 == 1;\nloop invariant x3 == x3 - d3 ==> c1 == 1 && c2 == 0;\nloop invariant x3 == x3 - d3 ==> c1 == 1 && c2 == 1;\nloop invariant x1 == x1 - d1 ==> c1 == 0 && c2 == 0;\nloop invariant x1 == x1 - d1 ==> c1 == 0 && c2 == 1;\nloop invariant x1 == x1 - d1 ==> c1 == 1 && c2 == 0;\nloop invariant x1 == x1 - d1 ==> c1 == 1 && c2 == 1;\nloop invariant x2 == x2 - d2 ==> c1 == 0 && c2 == 0;\nloop invariant x2 == x2 - d2 ==> c1 == 0 && c2 == 1;\nloop invariant x2 == x2 - d2 ==> c1 == 1 && c2 == 0;\nloop invariant x2 == x2 - d2 ==> c1 == 1 && c2 == 1;\nloop invariant x3 == x3 - d3 ==> c1 == 0 && c2 == 0;\nloop invariant x3 == x3 - d3 ==> c1 == 0 && c2 == 1;\nloop invariant x3 == x3 - d3 ==> c1 == 1 && c2 == 0;\nloop invariant x3 == x3 - d3 ==> c1 == 1 && c2 == 1;\nloop invariant x1 == 0 || x2 == 0 || x3 == 0;\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x1 <= unknown_uint() && 1 <= x2 <= unknown_uint() && 1 <= x3 <= unknown_uint();\nloop invariant 1 <= d1 <= unknown_uint() && 1 <= d2 <= unknown_uint() && 1 <= d3 <= unknown_uint();\nloop invariant 0 <= v1 <= unknown_int() && 0 <= v2 <= unknown_int() && 0 <= v3 <= unknown_int();\nloop invariant 0 <= c1 <= 1 && 0 <= c2 <= 1;\nloop invariant (x1==0 || x2==0 || x3==0) ==> (x1==0 && x2==0 && x3==0);\nloop invariant (x1==0 || x2==0 || x3==0) ==> (x1==0 && x2==0 && x3==0);\nloop invariant (x1==0 || x2==0 || x3==0) ==> (x1==0 && x2==0 && x3==0);\nloop invariant (x1==0 || x2==0 || x3==0) ==> (x1==0 && x2==0 && x3==0);\nloop invariant (x1==0 || x2==0 || x3==0) ==> (x1==0 && x2==0 && x3==0);\nloop invariant (x1==0 || x2==0 || x3==0) ==> (x1==0 && x2==0 && x3==0);\nloop invariant (x1==0 || x2==0 || x3==0) ==> (x1==0 && x2==0 && x3==0);\nloop invariant (x1==0 || x2==0 || x3==0) ==> (x1==0 && x2==0 && x3==0);\nloop invariant (x1==0 || x2==0 || x3==0) ==> (x1==0 && x2==0 && x3==0);\nloop invariant (x1==0 || x2==0 || x3==0) ==> (x1==0 && x2==0 && x3==0);\nloop invariant (x1==0 || x2==0 || x3==0) ==> (x1==0 && x2==0 && x3==0);\nloop invariant (x1==0 || x2==0 || x3==0) ==> (x1==0 && x2==0 && x3==0);\nloop invariant (x1==0 || x2==0 || x3==0) ==> (x1==0 && x2==0 && x3==0);\nloop invariant (x1==0 || x2==0 || x3==0) ==> (x1==0 && x2==0 && x3==0);\nloop invariant (x1==0 || x2==0 || x3==0) ==> (x1==0 && x2==0 && x3==0);\nloop invariant (x1==0 || x2==0 || x3==0) ==> (x1==0 && x2==0 && x3==0);\nloop invariant (x1==0 || x2==0 || x3==0) ==> (x1==0 && x2==0 && x3==0);\nloop invariant (x1==0 || x2==0 || x3==0) ==> (x1==0 && x2==0 && x3==0);\nloop invariant (x1==0 || x2==0 || x3==0) ==> (x1==0 && x2==0 && x3==0);\nloop invariant (x1==0 || x2==0 || x3==0) ==> (x1==0 && x2==0 && x3==0);\nloop invariant (x1==0 || x2==0 || x3==0) ==> (x1==0 && x2==0 && x3==0);\nloop invariant (x1==0 || x2==0 || x3==0) ==> (x1==0 && x2==0 && x3==0);\nloop invariant (x1==0 || x2==0 || x3==0) ==> (x1==0 && x2==0 && x3==0);\nloop invariant (x1==0 || x2==0 || x3==0) ==> (x1==0 && x2==0 && x3==0);\nloop invariant (x1==0 || x2==0 || x3==0) ==> (x1==0 && x2==0 && x3==0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x1 <= 2147483647;\nloop invariant 0 <= x2 <= 2147483647;\nloop invariant 0 <= x3 <= 2147483647;\nloop invariant 1 <= d1 <= 2147483647;\nloop invariant 1 <= d2 <= 2147483647;\nloop invariant 1 <= d3 <= 2147483647;\nloop invariant -2147483648 <= v1 <= 2147483647;\nloop invariant -2147483648 <= v2 <= 2147483647;\nloop invariant -2147483648 <= v3 <= 2147483647;\nloop invariant c1 ==> (0 <= x1 - d1 <= 2147483647);\nloop invariant c2 ==> (0 <= x2 - d2 <= 2147483647);\nloop invariant !c1 && !c2 ==> (0 <= x3 - d3 <= 2147483647);\nloop invariant !c1 && !c2 ==> (d1 + d2 + d3 >= 1);\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant (x1 - x2) * (x1 - x3) >= 0;\nloop invariant (x2 - x1) * (x2 - x3) >= 0;\nloop invariant (x3 - x1) * (x3 - x2) >= 0;\nloop invariant x1 == 0 || x2 == 0 || x3 == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  unsigned int x1=unknown_uint(), x2=unknown_uint(), x3=unknown_uint();\n  unsigned int d1=1, d2=1, d3=1;\n  int v1, v2, v3;\n  _Bool c1=unknown_bool(), c2=unknown_bool();\n  \n  /*@\nloop invariant i1: x1 >= 0;\nloop invariant i2: x2 >= 0;\nloop invariant i3: x3 >= 0;\n\n\n\n\n*/\nwhile(x1>0 && x2>0 && x3>0)\n  {\n    if (c1) x1=x1-d1;\n    else if (c2) x2=x2-d2;\n    else x3=x3-d3;\n    c1=unknown_bool();\n    c2=unknown_bool();\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n\n  {;\n//@ assert(x1==0 || x2==0 || x3==0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 32,
                "annotations": "```\n/*@\nloop invariant x1 >= 0 and x1 <= x1_init;\nloop invariant x2 >= 0 and x2 <= x2_init;\nloop invariant x3 >= 0 and x3 <= x3_init;\nloop invariant x1 + x2 + x3 <= x1_init + x2_init + x3_init;\nloop invariant x1 + x2 + x3 >= 0;\nloop invariant d1 >= 1;\nloop invariant d2 >= 1;\nloop invariant d3 >= 1;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant c1 is a boolean value;\nloop invariant c2 is a boolean value;\nloop invariant x1 >= x1_init - d1 * (x1_init/x1_init + 1)/2;\nloop invariant x2 >= x2_init - d2 * (x2_init/x2_init + 1)/2;\nloop invariant x3 >= x3_init - d3 * (x3_init/x3_init + 1)/2;\nloop invariant x1 <= x1_init - d1 * (x1_init/x1_init + 1)/2;\nloop invariant x2 <= x2_init - d2 * (x2_init/x2_init + 1)/2;\nloop invariant x3 <= x3_init - d3 * (x3_init/x3_init + 1)/2;\nloop invariant if (x1 >= 0) then (x1 <= x1_init);\nloop invariant if (x2 >= 0) then (x2 <= x2_init);\nloop invariant if (x3 >= 0) then (x3 <= x3_init);\nloop invariant if (x1 == 0) then (x2 >= 0 && x3 >= 0);\nloop invariant if (x2 == 0) then (x1 >= 0 && x3 >= 0);\nloop invariant if (x3 == 0) then (x1 >= 0 && x2 >= 0);\nloop invariant if (c1) then (x1 >= x1_init - d1 * (x1_init/x1_init + 1)/2);\nloop invariant if (c2) then (x2 >= x2_init - d2 * (x2_init/x2_init + 1)/2);\nloop invariant if (!c1 && !c2) then (x3 >= x3_init - d3 * (x3_init/x3_init + 1)/2);\nloop invariant if (c1) then (x1 <= x1_init - d1 * (x1_init/x1_init + 1)/2);\nloop invariant if (c2) then (x2 <= x2_init - d2 * (x2_init/x2_init + 1)/2);\nloop invariant if (!c1 && !c2) then (x3 <= x3_init - d3 * (x3_init/x3_init + 1)/2);\nloop invariant if (c1) then (x1 >= 0);\nloop invariant if (c2) then (x2 >= 0);\nloop invariant if (!c1 && !c2) then (x3 >= 0);\nloop invariant if (c1) then (x1 <= x1_init);\nloop invariant if (c2) then (x2 <= x2_init);\nloop invariant if (!c1 && !c2) then (x3 <= x3_init);\nloop invariant if (c1) then (x1 <= x1_init - d1 * (x1_init/x1_init + 1)/2);\nloop invariant if (c2) then (x2 <= x2_init - d2 * (x2_init/x2_init + 1)/2);\nloop invariant if (!c1 && !c2) then (x3 <= x3_init - d3 * (x3_init/x3_init + 1)/2);\nloop invariant if (c1) then (x1 >= x1_init - d1 * (x1_init/x1_init + 1)/2);\nloop invariant if (c2) then (x2 >= x2_init - d2 * (x2_init/x2_init + 1)/2);\nloop invariant if (!c1 && !c2) then (x3 >= x3_init - d3 * (x3_init/x3_init + 1)/2);\nloop invariant if (c1) then (x1 >= 0 && x1 <= x1_init - d1 * (x1_init/x1_init + 1)/2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  unsigned int x1=unknown_uint(), x2=unknown_uint(), x3=unknown_uint();\n  unsigned int d1=1, d2=1, d3=1;\n  int v1, v2, v3;\n  _Bool c1=unknown_bool(), c2=unknown_bool();\n  \n  /*@\n\n\n\n\nloop invariant i5: x1 + x2 + x3 >= 0;\nloop invariant i6: d1 >= 1;\nloop invariant i7: d2 >= 1;\nloop invariant i8: d3 >= 1;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile(x1>0 && x2>0 && x3>0)\n  {\n    if (c1) x1=x1-d1;\n    else if (c2) x2=x2-d2;\n    else x3=x3-d3;\n    c1=unknown_bool();\n    c2=unknown_bool();\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n\n  {;\n//@ assert(x1==0 || x2==0 || x3==0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant x1 <= x2 <= x3;\nloop invariant d1 <= x1;\nloop invariant d2 <= x2;\nloop invariant d3 <= x3;\nloop invariant x1 == 0 || x2 == 0 || x3 == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  unsigned int x1=unknown_uint(), x2=unknown_uint(), x3=unknown_uint();\n  unsigned int d1=1, d2=1, d3=1;\n  int v1, v2, v3;\n  _Bool c1=unknown_bool(), c2=unknown_bool();\n  \n  /*@\n\n\n\n\n\n*/\nwhile(x1>0 && x2>0 && x3>0)\n  {\n    if (c1) x1=x1-d1;\n    else if (c2) x2=x2-d2;\n    else x3=x3-d3;\n    c1=unknown_bool();\n    c2=unknown_bool();\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n\n  {;\n//@ assert(x1==0 || x2==0 || x3==0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 18,
                "annotations": "```\n/*@\nloop invariant 0 <= x1 <= unknown_uint();\nloop invariant 0 <= x2 <= unknown_uint();\nloop invariant 0 <= x3 <= unknown_uint();\nloop invariant 0 <= d1 <= unknown_uint();\nloop invariant 0 <= d2 <= unknown_uint();\nloop invariant 0 <= d3 <= unknown_uint();\nloop invariant c1 == unknown_bool();\nloop invariant c2 == unknown_bool();\nloop invariant v1 == unknown_int();\nloop invariant v2 == unknown_int();\nloop invariant v3 == unknown_int();\nloop invariant x1 > 0 ==> c1 == unknown_bool();\nloop invariant x2 > 0 ==> c2 == unknown_bool();\nloop invariant x3 > 0 ==> c1 == unknown_bool() || c2 == unknown_bool();\nloop invariant x1 > 0 ==> x2 > 0 ==> x3 > 0 ==> c1 == unknown_bool();\nloop invariant x1 > 0 ==> x2 > 0 ==> x3 > 0 ==> c2 == unknown_bool();\nloop invariant x1 > 0 ==> x2 > 0 ==> x3 > 0 ==> x1 >= d1;\nloop invariant x1 > 0 ==> x2 > 0 ==> x3 > 0 ==> x2 >= d2;\nloop invariant x1 > 0 ==> x2 > 0 ==> x3 > 0 ==> x3 >= d3;\nloop invariant x1 > 0 ==> x2 > 0 ==> x3 > 0 ==> d1 > 0;\nloop invariant x1 > 0 ==> x2 > 0 ==> x3 > 0 ==> d2 > 0;\nloop invariant x1 > 0 ==> x2 > 0 ==> x3 > 0 ==> d3 > 0;\nloop invariant x1 > 0 ==> x2 > 0 ==> x3 > 0 ==> d1 <= x1;\nloop invariant x1 > 0 ==> x2 > 0 ==> x3 > 0 ==> d2 <= x2;\nloop invariant x1 > 0 ==> x2 > 0 ==> x3 > 0 ==> d3 <= x3;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  unsigned int x1=unknown_uint(), x2=unknown_uint(), x3=unknown_uint();\n  unsigned int d1=1, d2=1, d3=1;\n  int v1, v2, v3;\n  _Bool c1=unknown_bool(), c2=unknown_bool();\n  \n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i20: x1 > 0 ==> x2 > 0 ==> x3 > 0 ==> d1 > 0;\nloop invariant i21: x1 > 0 ==> x2 > 0 ==> x3 > 0 ==> d2 > 0;\nloop invariant i22: x1 > 0 ==> x2 > 0 ==> x3 > 0 ==> d3 > 0;\n\n\n\n*/\nwhile(x1>0 && x2>0 && x3>0)\n  {\n    if (c1) x1=x1-d1;\n    else if (c2) x2=x2-d2;\n    else x3=x3-d3;\n    c1=unknown_bool();\n    c2=unknown_bool();\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n\n  {;\n//@ assert(x1==0 || x2==0 || x3==0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant 0 <= x1 <= 4294967295;\nloop invariant 0 <= x2 <= 4294967295;\nloop invariant 0 <= x3 <= 4294967295;\nloop invariant 0 <= d1 <= 4294967295;\nloop invariant 0 <= d2 <= 4294967295;\nloop invariant 0 <= d3 <= 4294967295;\nloop invariant -2147483648 <= v1 <= 2147483647;\nloop invariant -2147483648 <= v2 <= 2147483647;\nloop invariant -2147483648 <= v3 <= 2147483647;\nloop invariant 0 <= c1 <= 1;\nloop invariant 0 <= c2 <= 1;\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x3 - x1 == v3;\nloop invariant x3 - x2 == v2;\nloop invariant x3 - v1 == x1 - v1;\nloop invariant x3 - v2 == x2 - v2;\nloop invariant x3 - v3 == x1 - v1;\nloop invariant x3 - v3 == x2 - v2;\nloop invariant x3 - v3 == x1 - v1 - x2 + v2;\nloop invariant x3 - v3 == x1 - v1 - x2 + v2 - x1 + v1;\nloop invariant x3 - v3 == x2 - v2 - x1 + v1;\nloop invariant x3 - v3 == x2 - v2 - x1 + v1 - x2 + v2;\nloop invariant x3 - v3 == x1 - v1 - x2 + v2 - x1 + v1 - x2 + v2;\nloop invariant x3 - v3 == x1 - v1 - x2 + v2 - x1 + v1 - x2 + v2 - x2 + v2;\nloop invariant x3 - v3 == x1 - v1 - x2 + v2 - x1 + v1 - x2 + v2 - x1 + v1;\nloop invariant x3 - v3 == x2 - v2 - x1 + v1 - x2 + v2 - x1 + v1;\nloop invariant x3 - v3 == x2 - v2 - x1 + v1 - x2 + v2 - x1 + v1 - x2 + v2;\nloop invariant x3 - v3 == x1 - v1 - x2 + v2 - x1 + v1 - x2 + v2 - x1 + v1 - x2 + v2;\nloop invariant x3 - v3 == x1 - v1 - x2 + v2 - x1 + v1 - x2 + v2 - x1 + v1 - x2 + v2 - x2 + v2;\nloop invariant x3 - v3 == x1 - v1 - x2 + v2 - x1 + v1 - x2 + v2 - x1 + v1 - x2 + v2 - x1 + v1;\nloop invariant x3 - v3 == x2 - v2 - x1 + v1 - x2 + v2 - x1 + v1 - x2 + v2 - x1 + v1;\nloop invariant x3 - v3 == x2 - v2 - x1 + v1 - x2 + v2 - x1 + v1 - x2 + v2 - x1 + v1 - x2 + v2;\nloop invariant x3 - v3 == x1 - v1 - x2 + v2 - x1 + v1 - x2 + v2 - x1 + v1 - x2 + v2 - x1 + v1 - x2 + v2;\nloop invariant x3 - v3 == x1 - v1 - x2 + v2 - x1 + v1 - x2 + v2 - x1 + v1 - x2 + v2 - x1 + v1 - x2 + v2 - x2 + v2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  unsigned int x1=unknown_uint(), x2=unknown_uint(), x3=unknown_uint();\n  unsigned int d1=1, d2=1, d3=1;\n  int v1, v2, v3;\n  _Bool c1=unknown_bool(), c2=unknown_bool();\n  \n  /*@\nloop invariant i1: 0 <= x1 <= 4294967295;\nloop invariant i2: 0 <= x2 <= 4294967295;\nloop invariant i3: 0 <= x3 <= 4294967295;\nloop invariant i4: 0 <= d1 <= 4294967295;\nloop invariant i5: 0 <= d2 <= 4294967295;\nloop invariant i6: 0 <= d3 <= 4294967295;\nloop invariant i7: -2147483648 <= v1 <= 2147483647;\nloop invariant i8: -2147483648 <= v2 <= 2147483647;\nloop invariant i9: -2147483648 <= v3 <= 2147483647;\nloop invariant i10: 0 <= c1 <= 1;\nloop invariant i11: 0 <= c2 <= 1;\nloop invariant i12: x1 >= 0;\nloop invariant i13: x2 >= 0;\nloop invariant i14: x3 >= 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile(x1>0 && x2>0 && x3>0)\n  {\n    if (c1) x1=x1-d1;\n    else if (c2) x2=x2-d2;\n    else x3=x3-d3;\n    c1=unknown_bool();\n    c2=unknown_bool();\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n\n  {;\n//@ assert(x1==0 || x2==0 || x3==0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 12,
                "annotations": "```\n/*@\nloop invariant 0 <= x1 <= 2^32 - 1;\nloop invariant 0 <= x2 <= 2^32 - 1;\nloop invariant 0 <= x3 <= 2^32 - 1;\nloop invariant 0 <= d1 <= 2^32 - 1;\nloop invariant 0 <= d2 <= 2^32 - 1;\nloop invariant 0 <= d3 <= 2^32 - 1;\nloop invariant v1 = unknown_int();\nloop invariant v2 = unknown_int();\nloop invariant v3 = unknown_int();\nloop invariant c1 = unknown_bool();\nloop invariant c2 = unknown_bool();\nloop invariant (x1 > 0) ==> (x1 - d1 >= 0);\nloop invariant (x2 > 0) ==> (x2 - d2 >= 0);\nloop invariant (x3 > 0) ==> (x3 - d3 >= 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  unsigned int x1=unknown_uint(), x2=unknown_uint(), x3=unknown_uint();\n  unsigned int d1=1, d2=1, d3=1;\n  int v1, v2, v3;\n  _Bool c1=unknown_bool(), c2=unknown_bool();\n  \n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile(x1>0 && x2>0 && x3>0)\n  {\n    if (c1) x1=x1-d1;\n    else if (c2) x2=x2-d2;\n    else x3=x3-d3;\n    c1=unknown_bool();\n    c2=unknown_bool();\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n\n  {;\n//@ assert(x1==0 || x2==0 || x3==0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 11,
                "annotations": "```\n/*@\nloop invariant 0 <= x1 <= 2147483647;\nloop invariant 0 <= x2 <= 2147483647;\nloop invariant 0 <= x3 <= 2147483647;\nloop invariant 0 <= d1 <= 2147483647;\nloop invariant 0 <= d2 <= 2147483647;\nloop invariant 0 <= d3 <= 2147483647;\nloop invariant 0 <= v1 <= 2147483647;\nloop invariant 0 <= v2 <= 2147483647;\nloop invariant 0 <= v3 <= 2147483647;\nloop invariant x2 >= x1;\nloop invariant x3 >= x2;\nloop invariant x1 >= d1;\nloop invariant x2 >= d2;\nloop invariant x3 >= d3;\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant d1 >= 0;\nloop invariant d2 >= 0;\nloop invariant d3 >= 0;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant c1 == unknown_bool();\nloop invariant c2 == unknown_bool();\nloop invariant d1 == 1 ==> x1 >= d1;\nloop invariant d2 == 1 ==> x2 >= d2;\nloop invariant d3 == 1 ==> x3 >= d3;\nloop invariant d1 == 1 ==> x1 <= x1 + d1;\nloop invariant d2 == 1 ==> x2 <= x2 + d2;\nloop invariant d3 == 1 ==> x3 <= x3 + d3;\nloop invariant d1 == 1 ==> x1 <= x1 - d1;\nloop invariant d2 == 1 ==> x2 <= x2 - d2;\nloop invariant d3 == 1 ==> x3 <= x3 - d3;\nloop invariant d1 == 1 ==> x1 <= x1 + 1;\nloop invariant d2 == 1 ==> x2 <= x2 + 1;\nloop invariant d3 == 1 ==> x3 <= x3 + 1;\nloop invariant d1 == 1 ==> x1 <= x1 - 1;\nloop invariant d2 == 1 ==> x2 <= x2 - 1;\nloop invariant d3 == 1 ==> x3 <= x3 - 1;\nloop invariant d1 == 1 ==> x1 <= x1 + v1;\nloop invariant d2 == 1 ==> x2 <= x2 + v2;\nloop invariant d3 == 1 ==> x3 <= x3 + v3;\nloop invariant d1 == 1 ==> x1 <= x1 - v1;\nloop invariant d2 == 1 ==> x2 <= x2 - v2;\nloop invariant d3 == 1 ==> x3 <= x3 - v3;\nloop invariant d1 == 1 ==> x1 <= x1 + d1 + v1;\nloop invariant d2 == 1 ==> x2 <= x2 + d2 + v2;\nloop invariant d3 == 1 ==> x3 <= x3 + d3 + v3;\nloop invariant d1 == 1 ==> x1 <= x1 - d1 - v1;\nloop invariant d2 == 1 ==> x2 <= x2 - d2 - v2;\nloop invariant d3 == 1 ==> x3 <= x3 - d3 - v3;\nloop invariant d1 == 1 ==> x1 <= x1 + d1 + v1 - v2;\nloop invariant d2 == 1 ==> x2 <= x2 + d2 + v2 - v3;\nloop invariant d3 == 1 ==> x3 <= x3 + d3 + v3 - v1;\nloop invariant d1 == 1 ==> x1 <= x1 - d1 - v1 + v2;\nloop invariant d2 == 1 ==> x2 <= x2 - d2 - v2 + v3;\nloop invariant d3 == 1 ==> x3 <= x3 - d3 - v3 + v1;\nloop invariant d1 == 1 ==> x1 <= x1 + d1 + v1 - v2 + v3;\nloop invariant d2 == 1 ==> x2 <= x2 + d2 + v2 - v3 + v1;\nloop invariant d3 == 1 ==> x3 <= x3 + d3 + v3 - v1 + v2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  unsigned int x1=unknown_uint(), x2=unknown_uint(), x3=unknown_uint();\n  unsigned int d1=1, d2=1, d3=1;\n  int v1, v2, v3;\n  _Bool c1=unknown_bool(), c2=unknown_bool();\n  \n  /*@\n\n\n\nloop invariant i4: 0 <= d1 <= 2147483647;\nloop invariant i5: 0 <= d2 <= 2147483647;\nloop invariant i6: 0 <= d3 <= 2147483647;\n\n\n\n\n\n\n\n\nloop invariant i15: x1 >= 0;\nloop invariant i16: x2 >= 0;\nloop invariant i17: x3 >= 0;\nloop invariant i18: d1 >= 0;\nloop invariant i19: d2 >= 0;\nloop invariant i20: d3 >= 0;\n\n\n\n\n\n\n\n\nloop invariant i29: d1 == 1 ==> x1 <= x1 + d1;\nloop invariant i30: d2 == 1 ==> x2 <= x2 + d2;\nloop invariant i31: d3 == 1 ==> x3 <= x3 + d3;\n\n\n\nloop invariant i35: d1 == 1 ==> x1 <= x1 + 1;\nloop invariant i36: d2 == 1 ==> x2 <= x2 + 1;\nloop invariant i37: d3 == 1 ==> x3 <= x3 + 1;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile(x1>0 && x2>0 && x3>0)\n  {\n    if (c1) x1=x1-d1;\n    else if (c2) x2=x2-d2;\n    else x3=x3-d3;\n    c1=unknown_bool();\n    c2=unknown_bool();\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n\n  {;\n//@ assert(x1==0 || x2==0 || x3==0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 11,
                "annotations": "```\n/*@\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant (x1 > 0 ==> x1 >= d1);\nloop invariant (x2 > 0 ==> x2 >= d2);\nloop invariant (x3 > 0 ==> x3 >= d3);\nloop invariant (x1 > 0 ==> c1 || c2);\nloop invariant (x2 > 0 ==> c1 || c2);\nloop invariant (x3 > 0 ==> c1 || c2);\nloop invariant (x1 > 0 ==> (c1 ==> x1 - d1 >= 0));\nloop invariant (x2 > 0 ==> (c2 ==> x2 - d2 >= 0));\nloop invariant (x3 > 0 ==> (!c1 && !c2 ==> x3 - d3 >= 0));\nloop invariant (v1 == unknown_int() ==> v1 <= unknown_int());\nloop invariant (v2 == unknown_int() ==> v2 <= unknown_int());\nloop invariant (v3 == unknown_int() ==> v3 <= unknown_int());\nloop invariant (v1 == unknown_int() ==> v1 >= unknown_int());\nloop invariant (v2 == unknown_int() ==> v2 >= unknown_int());\nloop invariant (v3 == unknown_int() ==> v3 >= unknown_int());\nloop invariant (c1 ==> c1 == unknown_bool());\nloop invariant (c2 ==> c2 == unknown_bool());\nloop invariant (x1 == 0 ==> x1 == 0);\nloop invariant (x2 == 0 ==> x2 == 0);\nloop invariant (x3 == 0 ==> x3 == 0);\nloop invariant (x1 == 0 ==> x2 >= 0);\nloop invariant (x1 == 0 ==> x3 >= 0);\nloop invariant (x2 == 0 ==> x1 >= 0);\nloop invariant (x2 == 0 ==> x3 >= 0);\nloop invariant (x3 == 0 ==> x1 >= 0);\nloop invariant (x3 == 0 ==> x2 >= 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  unsigned int x1=unknown_uint(), x2=unknown_uint(), x3=unknown_uint();\n  unsigned int d1=1, d2=1, d3=1;\n  int v1, v2, v3;\n  _Bool c1=unknown_bool(), c2=unknown_bool();\n  \n  /*@\nloop invariant i1: x1 >= 0;\nloop invariant i2: x2 >= 0;\nloop invariant i3: x3 >= 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i21: (x1 == 0 ==> x1 == 0);\nloop invariant i22: (x2 == 0 ==> x2 == 0);\nloop invariant i23: (x3 == 0 ==> x3 == 0);\nloop invariant i24: (x1 == 0 ==> x2 >= 0);\nloop invariant i25: (x1 == 0 ==> x3 >= 0);\nloop invariant i26: (x2 == 0 ==> x1 >= 0);\nloop invariant i27: (x2 == 0 ==> x3 >= 0);\nloop invariant i28: (x3 == 0 ==> x1 >= 0);\nloop invariant i29: (x3 == 0 ==> x2 >= 0);\n*/\nwhile(x1>0 && x2>0 && x3>0)\n  {\n    if (c1) x1=x1-d1;\n    else if (c2) x2=x2-d2;\n    else x3=x3-d3;\n    c1=unknown_bool();\n    c2=unknown_bool();\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n\n  {;\n//@ assert(x1==0 || x2==0 || x3==0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant x1 >= 0 && x2 >= 0 && x3 >= 0;\nloop invariant x1 == x2 + d2 + d3 - d1 || x1 == x3 + d3 + d1 - d2;\nloop invariant x2 == x1 + d1 + d3 - d2 || x2 == x3 + d3 + d2 - d1;\nloop invariant x3 == x1 + d1 + d2 - d3 || x3 == x2 + d2 + d1 - d3;\nloop invariant c1 || c2;\nloop invariant c1 ==> x1 >= d1;\nloop invariant c2 ==> x2 >= d2;\nloop invariant x1 >= 0 ==> c1 || c2;\nloop invariant x2 >= 0 ==> c1 || c2;\nloop invariant x3 >= 0 ==> c1 || c2;\nloop invariant x1 >= 0 && x2 >= 0 && x3 >= 0 ==> c1 || c2;\nloop invariant x1 >= 0 && x2 >= 0 && x3 >= 0 && c1 ==> x1 >= d1;\nloop invariant x1 >= 0 && x2 >= 0 && x3 >= 0 && c2 ==> x2 >= d2;\nloop invariant x1 >= 0 && x2 >= 0 && x3 >= 0 && c1 ==> x2 >= 0;\nloop invariant x1 >= 0 && x2 >= 0 && x3 >= 0 && c2 ==> x1 >= 0;\nloop invariant x1 >= 0 && x2 >= 0 && x3 >= 0 && c1 ==> x3 >= 0;\nloop invariant x1 >= 0 && x2 >= 0 && x3 >= 0 && c2 ==> x3 >= 0;\nloop invariant x1 >= 0 && x2 >= 0 && x3 >= 0 && c1 ==> x1 == x2 + d2 + d3 - d1 || x1 == x3 + d3 + d1 - d2;\nloop invariant x1 >= 0 && x2 >= 0 && x3 >= 0 && c2 ==> x2 == x1 + d1 + d3 - d2 || x2 == x3 + d3 + d2 - d1;\nloop invariant x1 >= 0 && x2 >= 0 && x3 >= 0 && c1 ==> x3 == x1 + d1 + d2 - d3 || x3 == x2 + d2 + d1 - d3;\nloop invariant x1 >= 0 && x2 >= 0 && x3 >= 0 && c2 ==> x3 == x1 + d1 + d2 - d3 || x3 == x2 + d2 + d1 - d3;\nloop invariant x1 >= 0 && x2 >= 0 && x3 >= 0 && c1 ==> x1 >= 0 && x2 >= 0 && x3 >= 0 ==> c1 || c2;\nloop invariant x1 >= 0 && x2 >= 0 && x3 >= 0 && c2 ==> x1 >= 0 && x2 >= 0 && x3 >= 0 ==> c1 || c2;\nloop invariant x1 >= 0 && x2 >= 0 && x3 >= 0 && c1 ==> x1 >= 0 && x2 >= 0 && x3 >= 0 && c1 ==> x1 >= d1;\nloop invariant x1 >= 0 && x2 >= 0 && x3 >= 0 && c2 ==> x1 >= 0 && x2 >= 0 && x3 >= 0 && c2 ==> x2 >= d2;\nloop invariant x1 >= 0 && x2 >= 0 && x3 >= 0 && c1 ==> x1 >= 0 && x2 >= 0 && x3 >= 0 && c1 ==> x2 >= 0;\nloop invariant x1 >= 0 && x2 >= 0 && x3 >= 0 && c2 ==> x1 >= 0 && x2 >= 0 && x3 >= 0 && c2 ==> x1 >= 0;\nloop invariant x1 >= 0 && x2 >= 0 && x3 >= 0 && c1 ==> x1 >= 0 && x2 >= 0 && x3 >= 0 && c1 ==> x3 >= 0;\nloop invariant x1 >= 0 && x2 >= 0 && x3 >= 0 && c2 ==> x1 >= 0 && x2 >= 0 && x3 >= 0 && c2 ==> x3 >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  unsigned int x1=unknown_uint(), x2=unknown_uint(), x3=unknown_uint();\n  unsigned int d1=1, d2=1, d3=1;\n  int v1, v2, v3;\n  _Bool c1=unknown_bool(), c2=unknown_bool();\n  \n  /*@\nloop invariant i1: x1 >= 0 && x2 >= 0 && x3 >= 0;\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i14: x1 >= 0 && x2 >= 0 && x3 >= 0 && c1 ==> x2 >= 0;\nloop invariant i15: x1 >= 0 && x2 >= 0 && x3 >= 0 && c2 ==> x1 >= 0;\nloop invariant i16: x1 >= 0 && x2 >= 0 && x3 >= 0 && c1 ==> x3 >= 0;\nloop invariant i17: x1 >= 0 && x2 >= 0 && x3 >= 0 && c2 ==> x3 >= 0;\n\n\n\n\nloop invariant i22: x1 >= 0 && x2 >= 0 && x3 >= 0 && c1 ==> x1 >= 0 && x2 >= 0 && x3 >= 0 ==> c1 || c2;\nloop invariant i23: x1 >= 0 && x2 >= 0 && x3 >= 0 && c2 ==> x1 >= 0 && x2 >= 0 && x3 >= 0 ==> c1 || c2;\n\n\nloop invariant i26: x1 >= 0 && x2 >= 0 && x3 >= 0 && c1 ==> x1 >= 0 && x2 >= 0 && x3 >= 0 && c1 ==> x2 >= 0;\nloop invariant i27: x1 >= 0 && x2 >= 0 && x3 >= 0 && c2 ==> x1 >= 0 && x2 >= 0 && x3 >= 0 && c2 ==> x1 >= 0;\nloop invariant i28: x1 >= 0 && x2 >= 0 && x3 >= 0 && c1 ==> x1 >= 0 && x2 >= 0 && x3 >= 0 && c1 ==> x3 >= 0;\nloop invariant i29: x1 >= 0 && x2 >= 0 && x3 >= 0 && c2 ==> x1 >= 0 && x2 >= 0 && x3 >= 0 && c2 ==> x3 >= 0;\n*/\nwhile(x1>0 && x2>0 && x3>0)\n  {\n    if (c1) x1=x1-d1;\n    else if (c2) x2=x2-d2;\n    else x3=x3-d3;\n    c1=unknown_bool();\n    c2=unknown_bool();\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n\n  {;\n//@ assert(x1==0 || x2==0 || x3==0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 <= x2 + x3;\nloop invariant x2 <= x1 + x3;\nloop invariant x3 <= x1 + x2;\nloop invariant d1 in {1};\nloop invariant d2 in {1};\nloop invariant d3 in {1};\nloop invariant x1 == 0 || x2 == 0 || x3 == 0;\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 <= x2 + x3;\nloop invariant x2 <= x1 + x3;\nloop invariant x3 <= x1 + x2;\nloop invariant d1 in {1};\nloop invariant d2 in {1};\nloop invariant d3 in {1};\nloop invariant x1 == 0 || x2 == 0 || x3 == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  unsigned int x1=unknown_uint(), x2=unknown_uint(), x3=unknown_uint();\n  unsigned int d1=1, d2=1, d3=1;\n  int v1, v2, v3;\n  _Bool c1=unknown_bool(), c2=unknown_bool();\n  \n  /*@\nloop invariant i1: x1 >= 0;\nloop invariant i2: x2 >= 0;\nloop invariant i3: x3 >= 0;\n\n\n\n\n\n\n\n*/\nwhile(x1>0 && x2>0 && x3>0)\n  {\n    if (c1) x1=x1-d1;\n    else if (c2) x2=x2-d2;\n    else x3=x3-d3;\n    c1=unknown_bool();\n    c2=unknown_bool();\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n\n  {;\n//@ assert(x1==0 || x2==0 || x3==0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x1 && 0 <= x2 && 0 <= x3;\nloop invariant x1 >= d1 * x1;\nloop invariant x2 >= d2 * x2;\nloop invariant x3 >= d3 * x3;\nloop invariant d1 >= 1 && d2 >= 1 && d3 >= 1;\nloop invariant c1 == unknown_bool() && c2 == unknown_bool();\nloop invariant v1 == unknown_int() && v2 == unknown_int() && v3 == unknown_int();\nloop invariant x1 == (x1 - d1) ==> c1 && x2 == (x2 - d2) ==> c2 && x3 == (x3 - d3) ==> !c1 && !c2;\nloop invariant x1 == (x1 - d1) ==> c1 && x2 == (x2 - d2) ==> c2 && x3 == (x3 - d3) ==> !c1 && !c2 ==> (x1 == 0 || x2 == 0 || x3 == 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  unsigned int x1=unknown_uint(), x2=unknown_uint(), x3=unknown_uint();\n  unsigned int d1=1, d2=1, d3=1;\n  int v1, v2, v3;\n  _Bool c1=unknown_bool(), c2=unknown_bool();\n  \n  /*@\nloop invariant i1: 0 <= x1 && 0 <= x2 && 0 <= x3;\nloop invariant i2: x1 >= d1 * x1;\nloop invariant i3: x2 >= d2 * x2;\nloop invariant i4: x3 >= d3 * x3;\nloop invariant i5: d1 >= 1 && d2 >= 1 && d3 >= 1;\n\n\nloop invariant i8: x1 == (x1 - d1) ==> c1 && x2 == (x2 - d2) ==> c2 && x3 == (x3 - d3) ==> !c1 && !c2;\nloop invariant i9: x1 == (x1 - d1) ==> c1 && x2 == (x2 - d2) ==> c2 && x3 == (x3 - d3) ==> !c1 && !c2 ==> (x1 == 0 || x2 == 0 || x3 == 0);\n*/\nwhile(x1>0 && x2>0 && x3>0)\n  {\n    if (c1) x1=x1-d1;\n    else if (c2) x2=x2-d2;\n    else x3=x3-d3;\n    c1=unknown_bool();\n    c2=unknown_bool();\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n\n  {;\n//@ assert(x1==0 || x2==0 || x3==0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 9,
                "annotations": "```\n/*@\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant d1 >= 1;\nloop invariant d2 >= 1;\nloop invariant d3 >= 1;\nloop invariant v1 >= unknown_int();\nloop invariant v1 <= unknown_int();\nloop invariant v2 >= unknown_int();\nloop invariant v2 <= unknown_int();\nloop invariant v3 >= unknown_int();\nloop invariant v3 <= unknown_int();\nloop invariant c1 == unknown_bool();\nloop invariant c2 == unknown_bool();\nloop invariant x1 == x1 - d1 ==> c1 == 0;\nloop invariant x2 == x2 - d2 ==> c2 == 0;\nloop invariant x3 == x3 - d3 ==> c1 == 0 && c2 == 0;\nloop invariant x3 == x3 - d3 ==> c1 == 0 && c2 == 1;\nloop invariant x3 == x3 - d3 ==> c1 == 1 && c2 == 0;\nloop invariant x3 == x3 - d3 ==> c1 == 1 && c2 == 1;\nloop invariant x1 == x1 - d1 ==> c1 == 0 && c2 == 0;\nloop invariant x1 == x1 - d1 ==> c1 == 0 && c2 == 1;\nloop invariant x1 == x1 - d1 ==> c1 == 1 && c2 == 0;\nloop invariant x1 == x1 - d1 ==> c1 == 1 && c2 == 1;\nloop invariant x2 == x2 - d2 ==> c1 == 0 && c2 == 0;\nloop invariant x2 == x2 - d2 ==> c1 == 0 && c2 == 1;\nloop invariant x2 == x2 - d2 ==> c1 == 1 && c2 == 0;\nloop invariant x2 == x2 - d2 ==> c1 == 1 && c2 == 1;\nloop invariant x3 == x3 - d3 ==> c1 == 0 && c2 == 0;\nloop invariant x3 == x3 - d3 ==> c1 == 0 && c2 == 1;\nloop invariant x3 == x3 - d3 ==> c1 == 1 && c2 == 0;\nloop invariant x3 == x3 - d3 ==> c1 == 1 && c2 == 1;\nloop invariant x1 == 0 || x2 == 0 || x3 == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  unsigned int x1=unknown_uint(), x2=unknown_uint(), x3=unknown_uint();\n  unsigned int d1=1, d2=1, d3=1;\n  int v1, v2, v3;\n  _Bool c1=unknown_bool(), c2=unknown_bool();\n  \n  /*@\nloop invariant i1: x1 >= 0;\nloop invariant i2: x2 >= 0;\nloop invariant i3: x3 >= 0;\nloop invariant i4: d1 >= 1;\nloop invariant i5: d2 >= 1;\nloop invariant i6: d3 >= 1;\n\n\n\n\n\n\n\n\nloop invariant i15: x1 == x1 - d1 ==> c1 == 0;\nloop invariant i16: x2 == x2 - d2 ==> c2 == 0;\nloop invariant i17: x3 == x3 - d3 ==> c1 == 0 && c2 == 0;\nloop invariant i18: x3 == x3 - d3 ==> c1 == 0 && c2 == 1;\nloop invariant i19: x3 == x3 - d3 ==> c1 == 1 && c2 == 0;\nloop invariant i20: x3 == x3 - d3 ==> c1 == 1 && c2 == 1;\nloop invariant i21: x1 == x1 - d1 ==> c1 == 0 && c2 == 0;\nloop invariant i22: x1 == x1 - d1 ==> c1 == 0 && c2 == 1;\nloop invariant i23: x1 == x1 - d1 ==> c1 == 1 && c2 == 0;\nloop invariant i24: x1 == x1 - d1 ==> c1 == 1 && c2 == 1;\nloop invariant i25: x2 == x2 - d2 ==> c1 == 0 && c2 == 0;\nloop invariant i26: x2 == x2 - d2 ==> c1 == 0 && c2 == 1;\nloop invariant i27: x2 == x2 - d2 ==> c1 == 1 && c2 == 0;\nloop invariant i28: x2 == x2 - d2 ==> c1 == 1 && c2 == 1;\n\n*/\nwhile(x1>0 && x2>0 && x3>0)\n  {\n    if (c1) x1=x1-d1;\n    else if (c2) x2=x2-d2;\n    else x3=x3-d3;\n    c1=unknown_bool();\n    c2=unknown_bool();\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n\n  {;\n//@ assert(x1==0 || x2==0 || x3==0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  unsigned int x1=unknown_uint(), x2=unknown_uint(), x3=unknown_uint();\n  unsigned int d1=1, d2=1, d3=1;\n  int v1, v2, v3;\n  _Bool c1=unknown_bool(), c2=unknown_bool();\n  \n  /*@\n\n*/\nwhile(x1>0 && x2>0 && x3>0)\n  {\n    if (c1) x1=x1-d1;\n    else if (c2) x2=x2-d2;\n    else x3=x3-d3;\n    c1=unknown_bool();\n    c2=unknown_bool();\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n\n  {;\n//@ assert(x1==0 || x2==0 || x3==0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 1 <= x1 <= unknown_uint() && 1 <= x2 <= unknown_uint() && 1 <= x3 <= unknown_uint();\nloop invariant 1 <= d1 <= unknown_uint() && 1 <= d2 <= unknown_uint() && 1 <= d3 <= unknown_uint();\nloop invariant 0 <= v1 <= unknown_int() && 0 <= v2 <= unknown_int() && 0 <= v3 <= unknown_int();\nloop invariant 0 <= c1 <= 1 && 0 <= c2 <= 1;\nloop invariant (x1==0 || x2==0 || x3==0) ==> (x1==0 && x2==0 && x3==0);\nloop invariant (x1==0 || x2==0 || x3==0) ==> (x1==0 && x2==0 && x3==0);\nloop invariant (x1==0 || x2==0 || x3==0) ==> (x1==0 && x2==0 && x3==0);\nloop invariant (x1==0 || x2==0 || x3==0) ==> (x1==0 && x2==0 && x3==0);\nloop invariant (x1==0 || x2==0 || x3==0) ==> (x1==0 && x2==0 && x3==0);\nloop invariant (x1==0 || x2==0 || x3==0) ==> (x1==0 && x2==0 && x3==0);\nloop invariant (x1==0 || x2==0 || x3==0) ==> (x1==0 && x2==0 && x3==0);\nloop invariant (x1==0 || x2==0 || x3==0) ==> (x1==0 && x2==0 && x3==0);\nloop invariant (x1==0 || x2==0 || x3==0) ==> (x1==0 && x2==0 && x3==0);\nloop invariant (x1==0 || x2==0 || x3==0) ==> (x1==0 && x2==0 && x3==0);\nloop invariant (x1==0 || x2==0 || x3==0) ==> (x1==0 && x2==0 && x3==0);\nloop invariant (x1==0 || x2==0 || x3==0) ==> (x1==0 && x2==0 && x3==0);\nloop invariant (x1==0 || x2==0 || x3==0) ==> (x1==0 && x2==0 && x3==0);\nloop invariant (x1==0 || x2==0 || x3==0) ==> (x1==0 && x2==0 && x3==0);\nloop invariant (x1==0 || x2==0 || x3==0) ==> (x1==0 && x2==0 && x3==0);\nloop invariant (x1==0 || x2==0 || x3==0) ==> (x1==0 && x2==0 && x3==0);\nloop invariant (x1==0 || x2==0 || x3==0) ==> (x1==0 && x2==0 && x3==0);\nloop invariant (x1==0 || x2==0 || x3==0) ==> (x1==0 && x2==0 && x3==0);\nloop invariant (x1==0 || x2==0 || x3==0) ==> (x1==0 && x2==0 && x3==0);\nloop invariant (x1==0 || x2==0 || x3==0) ==> (x1==0 && x2==0 && x3==0);\nloop invariant (x1==0 || x2==0 || x3==0) ==> (x1==0 && x2==0 && x3==0);\nloop invariant (x1==0 || x2==0 || x3==0) ==> (x1==0 && x2==0 && x3==0);\nloop invariant (x1==0 || x2==0 || x3==0) ==> (x1==0 && x2==0 && x3==0);\nloop invariant (x1==0 || x2==0 || x3==0) ==> (x1==0 && x2==0 && x3==0);\nloop invariant (x1==0 || x2==0 || x3==0) ==> (x1==0 && x2==0 && x3==0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  unsigned int x1=unknown_uint(), x2=unknown_uint(), x3=unknown_uint();\n  unsigned int d1=1, d2=1, d3=1;\n  int v1, v2, v3;\n  _Bool c1=unknown_bool(), c2=unknown_bool();\n  \n  /*@\n\n\n\nloop invariant i4: 0 <= c1 <= 1 && 0 <= c2 <= 1;\n\n*/\nwhile(x1>0 && x2>0 && x3>0)\n  {\n    if (c1) x1=x1-d1;\n    else if (c2) x2=x2-d2;\n    else x3=x3-d3;\n    c1=unknown_bool();\n    c2=unknown_bool();\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n\n  {;\n//@ assert(x1==0 || x2==0 || x3==0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x1 <= 2147483647;\nloop invariant 0 <= x2 <= 2147483647;\nloop invariant 0 <= x3 <= 2147483647;\nloop invariant 1 <= d1 <= 2147483647;\nloop invariant 1 <= d2 <= 2147483647;\nloop invariant 1 <= d3 <= 2147483647;\nloop invariant -2147483648 <= v1 <= 2147483647;\nloop invariant -2147483648 <= v2 <= 2147483647;\nloop invariant -2147483648 <= v3 <= 2147483647;\nloop invariant c1 ==> (0 <= x1 - d1 <= 2147483647);\nloop invariant c2 ==> (0 <= x2 - d2 <= 2147483647);\nloop invariant !c1 && !c2 ==> (0 <= x3 - d3 <= 2147483647);\nloop invariant !c1 && !c2 ==> (d1 + d2 + d3 >= 1);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  unsigned int x1=unknown_uint(), x2=unknown_uint(), x3=unknown_uint();\n  unsigned int d1=1, d2=1, d3=1;\n  int v1, v2, v3;\n  _Bool c1=unknown_bool(), c2=unknown_bool();\n  \n  /*@\n\n\n\nloop invariant i4: 1 <= d1 <= 2147483647;\nloop invariant i5: 1 <= d2 <= 2147483647;\nloop invariant i6: 1 <= d3 <= 2147483647;\nloop invariant i7: -2147483648 <= v1 <= 2147483647;\nloop invariant i8: -2147483648 <= v2 <= 2147483647;\nloop invariant i9: -2147483648 <= v3 <= 2147483647;\n\n\n\nloop invariant i13: !c1 && !c2 ==> (d1 + d2 + d3 >= 1);\n*/\nwhile(x1>0 && x2>0 && x3>0)\n  {\n    if (c1) x1=x1-d1;\n    else if (c2) x2=x2-d2;\n    else x3=x3-d3;\n    c1=unknown_bool();\n    c2=unknown_bool();\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n\n  {;\n//@ assert(x1==0 || x2==0 || x3==0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 28: unexpected token 'and'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  unsigned int x1=unknown_uint(), x2=unknown_uint(), x3=unknown_uint();\n  unsigned int d1=1, d2=1, d3=1;\n  int v1, v2, v3;\n  _Bool c1=unknown_bool(), c2=unknown_bool();\n  \n  /*@\nloop invariant i1: x1 >= 0;\nloop invariant i2: x2 >= 0;\nloop invariant i3: x3 >= 0;\nloop invariant i4: (x1 - x2) * (x1 - x3) >= 0;\nloop invariant i5: (x2 - x1) * (x2 - x3) >= 0;\nloop invariant i6: (x3 - x1) * (x3 - x2) >= 0;\nloop invariant i7: x1 == 0 || x2 == 0 || x3 == 0;\nloop invariant i8: x1 >= 0 and x1 <= x1_init;\nloop invariant i9: x2 >= 0 and x2 <= x2_init;\nloop invariant i10: x3 >= 0 and x3 <= x3_init;\nloop invariant i11: x1 + x2 + x3 <= x1_init + x2_init + x3_init;\nloop invariant i12: x1 + x2 + x3 >= 0;\nloop invariant i13: d1 >= 1;\nloop invariant i14: d2 >= 1;\nloop invariant i15: d3 >= 1;\nloop invariant i16: v1 >= 0;\nloop invariant i17: v2 >= 0;\nloop invariant i18: v3 >= 0;\nloop invariant i19: c1 is a boolean value;\nloop invariant i20: c2 is a boolean value;\nloop invariant i21: x1 >= x1_init - d1 * (x1_init/x1_init + 1)/2;\nloop invariant i22: x2 >= x2_init - d2 * (x2_init/x2_init + 1)/2;\nloop invariant i23: x3 >= x3_init - d3 * (x3_init/x3_init + 1)/2;\nloop invariant i24: x1 <= x1_init - d1 * (x1_init/x1_init + 1)/2;\nloop invariant i25: x2 <= x2_init - d2 * (x2_init/x2_init + 1)/2;\nloop invariant i26: x3 <= x3_init - d3 * (x3_init/x3_init + 1)/2;\nloop invariant i27: if (x1 >= 0) then (x1 <= x1_init);\nloop invariant i28: if (x2 >= 0) then (x2 <= x2_init);\nloop invariant i29: if (x3 >= 0) then (x3 <= x3_init);\nloop invariant i30: if (x1 == 0) then (x2 >= 0 && x3 >= 0);\nloop invariant i31: if (x2 == 0) then (x1 >= 0 && x3 >= 0);\nloop invariant i32: if (x3 == 0) then (x1 >= 0 && x2 >= 0);\nloop invariant i33: if (c1) then (x1 >= x1_init - d1 * (x1_init/x1_init + 1)/2);\nloop invariant i34: if (c2) then (x2 >= x2_init - d2 * (x2_init/x2_init + 1)/2);\nloop invariant i35: if (!c1 && !c2) then (x3 >= x3_init - d3 * (x3_init/x3_init + 1)/2);\nloop invariant i36: if (c1) then (x1 <= x1_init - d1 * (x1_init/x1_init + 1)/2);\nloop invariant i37: if (c2) then (x2 <= x2_init - d2 * (x2_init/x2_init + 1)/2);\nloop invariant i38: if (!c1 && !c2) then (x3 <= x3_init - d3 * (x3_init/x3_init + 1)/2);\nloop invariant i39: if (c1) then (x1 >= 0);\nloop invariant i40: if (c2) then (x2 >= 0);\nloop invariant i41: if (!c1 && !c2) then (x3 >= 0);\nloop invariant i42: if (c1) then (x1 <= x1_init);\nloop invariant i43: if (c2) then (x2 <= x2_init);\nloop invariant i44: if (!c1 && !c2) then (x3 <= x3_init);\nloop invariant i45: if (c1) then (x1 >= 0 && x1 <= x1_init - d1 * (x1_init/x1_init + 1)/2);\nloop invariant i46: x1 <= x2 <= x3;\nloop invariant i47: d1 <= x1;\nloop invariant i48: d2 <= x2;\nloop invariant i49: d3 <= x3;\nloop invariant i50: 0 <= x1 <= unknown_uint();\nloop invariant i51: 0 <= x2 <= unknown_uint();\nloop invariant i52: 0 <= x3 <= unknown_uint();\nloop invariant i53: 0 <= d1 <= unknown_uint();\nloop invariant i54: 0 <= d2 <= unknown_uint();\nloop invariant i55: 0 <= d3 <= unknown_uint();\nloop invariant i56: c1 == unknown_bool();\nloop invariant i57: c2 == unknown_bool();\nloop invariant i58: v1 == unknown_int();\nloop invariant i59: v2 == unknown_int();\nloop invariant i60: v3 == unknown_int();\nloop invariant i61: x1 > 0 ==> c1 == unknown_bool();\nloop invariant i62: x2 > 0 ==> c2 == unknown_bool();\nloop invariant i63: x3 > 0 ==> c1 == unknown_bool() || c2 == unknown_bool();\nloop invariant i64: x1 > 0 ==> x2 > 0 ==> x3 > 0 ==> c1 == unknown_bool();\nloop invariant i65: x1 > 0 ==> x2 > 0 ==> x3 > 0 ==> c2 == unknown_bool();\nloop invariant i66: x1 > 0 ==> x2 > 0 ==> x3 > 0 ==> x1 >= d1;\nloop invariant i67: x1 > 0 ==> x2 > 0 ==> x3 > 0 ==> x2 >= d2;\nloop invariant i68: x1 > 0 ==> x2 > 0 ==> x3 > 0 ==> x3 >= d3;\nloop invariant i69: x1 > 0 ==> x2 > 0 ==> x3 > 0 ==> d1 > 0;\nloop invariant i70: x1 > 0 ==> x2 > 0 ==> x3 > 0 ==> d2 > 0;\nloop invariant i71: x1 > 0 ==> x2 > 0 ==> x3 > 0 ==> d3 > 0;\nloop invariant i72: x1 > 0 ==> x2 > 0 ==> x3 > 0 ==> d1 <= x1;\nloop invariant i73: x1 > 0 ==> x2 > 0 ==> x3 > 0 ==> d2 <= x2;\nloop invariant i74: x1 > 0 ==> x2 > 0 ==> x3 > 0 ==> d3 <= x3;\nloop invariant i75: 0 <= x1 <= 4294967295;\nloop invariant i76: 0 <= x2 <= 4294967295;\nloop invariant i77: 0 <= x3 <= 4294967295;\nloop invariant i78: 0 <= d1 <= 4294967295;\nloop invariant i79: 0 <= d2 <= 4294967295;\nloop invariant i80: 0 <= d3 <= 4294967295;\nloop invariant i81: -2147483648 <= v1 <= 2147483647;\nloop invariant i82: -2147483648 <= v2 <= 2147483647;\nloop invariant i83: -2147483648 <= v3 <= 2147483647;\nloop invariant i84: 0 <= c1 <= 1;\nloop invariant i85: 0 <= c2 <= 1;\nloop invariant i86: x3 - x1 == v3;\nloop invariant i87: x3 - x2 == v2;\nloop invariant i88: x3 - v1 == x1 - v1;\nloop invariant i89: x3 - v2 == x2 - v2;\nloop invariant i90: x3 - v3 == x1 - v1;\nloop invariant i91: x3 - v3 == x2 - v2;\nloop invariant i92: x3 - v3 == x1 - v1 - x2 + v2;\nloop invariant i93: x3 - v3 == x1 - v1 - x2 + v2 - x1 + v1;\nloop invariant i94: x3 - v3 == x2 - v2 - x1 + v1;\nloop invariant i95: x3 - v3 == x2 - v2 - x1 + v1 - x2 + v2;\nloop invariant i96: x3 - v3 == x1 - v1 - x2 + v2 - x1 + v1 - x2 + v2;\nloop invariant i97: x3 - v3 == x1 - v1 - x2 + v2 - x1 + v1 - x2 + v2 - x2 + v2;\nloop invariant i98: x3 - v3 == x1 - v1 - x2 + v2 - x1 + v1 - x2 + v2 - x1 + v1;\nloop invariant i99: x3 - v3 == x2 - v2 - x1 + v1 - x2 + v2 - x1 + v1;\nloop invariant i100: x3 - v3 == x2 - v2 - x1 + v1 - x2 + v2 - x1 + v1 - x2 + v2;\nloop invariant i101: x3 - v3 == x1 - v1 - x2 + v2 - x1 + v1 - x2 + v2 - x1 + v1 - x2 + v2;\nloop invariant i102: x3 - v3 == x1 - v1 - x2 + v2 - x1 + v1 - x2 + v2 - x1 + v1 - x2 + v2 - x2 + v2;\nloop invariant i103: x3 - v3 == x1 - v1 - x2 + v2 - x1 + v1 - x2 + v2 - x1 + v1 - x2 + v2 - x1 + v1;\nloop invariant i104: x3 - v3 == x2 - v2 - x1 + v1 - x2 + v2 - x1 + v1 - x2 + v2 - x1 + v1;\nloop invariant i105: x3 - v3 == x2 - v2 - x1 + v1 - x2 + v2 - x1 + v1 - x2 + v2 - x1 + v1 - x2 + v2;\nloop invariant i106: x3 - v3 == x1 - v1 - x2 + v2 - x1 + v1 - x2 + v2 - x1 + v1 - x2 + v2 - x1 + v1 - x2 + v2;\nloop invariant i107: x3 - v3 == x1 - v1 - x2 + v2 - x1 + v1 - x2 + v2 - x1 + v1 - x2 + v2 - x1 + v1 - x2 + v2 - x2 + v2;\nloop invariant i108: 0 <= x1 <= 2^32 - 1;\nloop invariant i109: 0 <= x2 <= 2^32 - 1;\nloop invariant i110: 0 <= x3 <= 2^32 - 1;\nloop invariant i111: 0 <= d1 <= 2^32 - 1;\nloop invariant i112: 0 <= d2 <= 2^32 - 1;\nloop invariant i113: 0 <= d3 <= 2^32 - 1;\nloop invariant i114: v1 = unknown_int();\nloop invariant i115: v2 = unknown_int();\nloop invariant i116: v3 = unknown_int();\nloop invariant i117: c1 = unknown_bool();\nloop invariant i118: c2 = unknown_bool();\nloop invariant i119: (x1 > 0) ==> (x1 - d1 >= 0);\nloop invariant i120: (x2 > 0) ==> (x2 - d2 >= 0);\nloop invariant i121: (x3 > 0) ==> (x3 - d3 >= 0);\nloop invariant i122: 0 <= x1 <= 2147483647;\nloop invariant i123: 0 <= x2 <= 2147483647;\nloop invariant i124: 0 <= x3 <= 2147483647;\nloop invariant i125: 0 <= d1 <= 2147483647;\nloop invariant i126: 0 <= d2 <= 2147483647;\nloop invariant i127: 0 <= d3 <= 2147483647;\nloop invariant i128: 0 <= v1 <= 2147483647;\nloop invariant i129: 0 <= v2 <= 2147483647;\nloop invariant i130: 0 <= v3 <= 2147483647;\nloop invariant i131: x2 >= x1;\nloop invariant i132: x3 >= x2;\nloop invariant i133: x1 >= d1;\nloop invariant i134: x2 >= d2;\nloop invariant i135: x3 >= d3;\nloop invariant i136: d1 >= 0;\nloop invariant i137: d2 >= 0;\nloop invariant i138: d3 >= 0;\nloop invariant i139: d1 == 1 ==> x1 >= d1;\nloop invariant i140: d2 == 1 ==> x2 >= d2;\nloop invariant i141: d3 == 1 ==> x3 >= d3;\nloop invariant i142: d1 == 1 ==> x1 <= x1 + d1;\nloop invariant i143: d2 == 1 ==> x2 <= x2 + d2;\nloop invariant i144: d3 == 1 ==> x3 <= x3 + d3;\nloop invariant i145: d1 == 1 ==> x1 <= x1 - d1;\nloop invariant i146: d2 == 1 ==> x2 <= x2 - d2;\nloop invariant i147: d3 == 1 ==> x3 <= x3 - d3;\nloop invariant i148: d1 == 1 ==> x1 <= x1 + 1;\nloop invariant i149: d2 == 1 ==> x2 <= x2 + 1;\nloop invariant i150: d3 == 1 ==> x3 <= x3 + 1;\nloop invariant i151: d1 == 1 ==> x1 <= x1 - 1;\nloop invariant i152: d2 == 1 ==> x2 <= x2 - 1;\nloop invariant i153: d3 == 1 ==> x3 <= x3 - 1;\nloop invariant i154: d1 == 1 ==> x1 <= x1 + v1;\nloop invariant i155: d2 == 1 ==> x2 <= x2 + v2;\nloop invariant i156: d3 == 1 ==> x3 <= x3 + v3;\nloop invariant i157: d1 == 1 ==> x1 <= x1 - v1;\nloop invariant i158: d2 == 1 ==> x2 <= x2 - v2;\nloop invariant i159: d3 == 1 ==> x3 <= x3 - v3;\nloop invariant i160: d1 == 1 ==> x1 <= x1 + d1 + v1;\nloop invariant i161: d2 == 1 ==> x2 <= x2 + d2 + v2;\nloop invariant i162: d3 == 1 ==> x3 <= x3 + d3 + v3;\nloop invariant i163: d1 == 1 ==> x1 <= x1 - d1 - v1;\nloop invariant i164: d2 == 1 ==> x2 <= x2 - d2 - v2;\nloop invariant i165: d3 == 1 ==> x3 <= x3 - d3 - v3;\nloop invariant i166: d1 == 1 ==> x1 <= x1 + d1 + v1 - v2;\nloop invariant i167: d2 == 1 ==> x2 <= x2 + d2 + v2 - v3;\nloop invariant i168: d3 == 1 ==> x3 <= x3 + d3 + v3 - v1;\nloop invariant i169: d1 == 1 ==> x1 <= x1 - d1 - v1 + v2;\nloop invariant i170: d2 == 1 ==> x2 <= x2 - d2 - v2 + v3;\nloop invariant i171: d3 == 1 ==> x3 <= x3 - d3 - v3 + v1;\nloop invariant i172: d1 == 1 ==> x1 <= x1 + d1 + v1 - v2 + v3;\nloop invariant i173: d2 == 1 ==> x2 <= x2 + d2 + v2 - v3 + v1;\nloop invariant i174: d3 == 1 ==> x3 <= x3 + d3 + v3 - v1 + v2;\nloop invariant i175: (x1 > 0 ==> x1 >= d1);\nloop invariant i176: (x2 > 0 ==> x2 >= d2);\nloop invariant i177: (x3 > 0 ==> x3 >= d3);\nloop invariant i178: (x1 > 0 ==> c1 || c2);\nloop invariant i179: (x2 > 0 ==> c1 || c2);\nloop invariant i180: (x3 > 0 ==> c1 || c2);\nloop invariant i181: (x1 > 0 ==> (c1 ==> x1 - d1 >= 0));\nloop invariant i182: (x2 > 0 ==> (c2 ==> x2 - d2 >= 0));\nloop invariant i183: (x3 > 0 ==> (!c1 && !c2 ==> x3 - d3 >= 0));\nloop invariant i184: (v1 == unknown_int() ==> v1 <= unknown_int());\nloop invariant i185: (v2 == unknown_int() ==> v2 <= unknown_int());\nloop invariant i186: (v3 == unknown_int() ==> v3 <= unknown_int());\nloop invariant i187: (v1 == unknown_int() ==> v1 >= unknown_int());\nloop invariant i188: (v2 == unknown_int() ==> v2 >= unknown_int());\nloop invariant i189: (v3 == unknown_int() ==> v3 >= unknown_int());\nloop invariant i190: (c1 ==> c1 == unknown_bool());\nloop invariant i191: (c2 ==> c2 == unknown_bool());\nloop invariant i192: (x1 == 0 ==> x1 == 0);\nloop invariant i193: (x2 == 0 ==> x2 == 0);\nloop invariant i194: (x3 == 0 ==> x3 == 0);\nloop invariant i195: (x1 == 0 ==> x2 >= 0);\nloop invariant i196: (x1 == 0 ==> x3 >= 0);\nloop invariant i197: (x2 == 0 ==> x1 >= 0);\nloop invariant i198: (x2 == 0 ==> x3 >= 0);\nloop invariant i199: (x3 == 0 ==> x1 >= 0);\nloop invariant i200: (x3 == 0 ==> x2 >= 0);\nloop invariant i201: x1 >= 0 && x2 >= 0 && x3 >= 0;\nloop invariant i202: x1 == x2 + d2 + d3 - d1 || x1 == x3 + d3 + d1 - d2;\nloop invariant i203: x2 == x1 + d1 + d3 - d2 || x2 == x3 + d3 + d2 - d1;\nloop invariant i204: x3 == x1 + d1 + d2 - d3 || x3 == x2 + d2 + d1 - d3;\nloop invariant i205: c1 || c2;\nloop invariant i206: c1 ==> x1 >= d1;\nloop invariant i207: c2 ==> x2 >= d2;\nloop invariant i208: x1 >= 0 ==> c1 || c2;\nloop invariant i209: x2 >= 0 ==> c1 || c2;\nloop invariant i210: x3 >= 0 ==> c1 || c2;\nloop invariant i211: x1 >= 0 && x2 >= 0 && x3 >= 0 ==> c1 || c2;\nloop invariant i212: x1 >= 0 && x2 >= 0 && x3 >= 0 && c1 ==> x1 >= d1;\nloop invariant i213: x1 >= 0 && x2 >= 0 && x3 >= 0 && c2 ==> x2 >= d2;\nloop invariant i214: x1 >= 0 && x2 >= 0 && x3 >= 0 && c1 ==> x2 >= 0;\nloop invariant i215: x1 >= 0 && x2 >= 0 && x3 >= 0 && c2 ==> x1 >= 0;\nloop invariant i216: x1 >= 0 && x2 >= 0 && x3 >= 0 && c1 ==> x3 >= 0;\nloop invariant i217: x1 >= 0 && x2 >= 0 && x3 >= 0 && c2 ==> x3 >= 0;\nloop invariant i218: x1 >= 0 && x2 >= 0 && x3 >= 0 && c1 ==> x1 == x2 + d2 + d3 - d1 || x1 == x3 + d3 + d1 - d2;\nloop invariant i219: x1 >= 0 && x2 >= 0 && x3 >= 0 && c2 ==> x2 == x1 + d1 + d3 - d2 || x2 == x3 + d3 + d2 - d1;\nloop invariant i220: x1 >= 0 && x2 >= 0 && x3 >= 0 && c1 ==> x3 == x1 + d1 + d2 - d3 || x3 == x2 + d2 + d1 - d3;\nloop invariant i221: x1 >= 0 && x2 >= 0 && x3 >= 0 && c2 ==> x3 == x1 + d1 + d2 - d3 || x3 == x2 + d2 + d1 - d3;\nloop invariant i222: x1 >= 0 && x2 >= 0 && x3 >= 0 && c1 ==> x1 >= 0 && x2 >= 0 && x3 >= 0 ==> c1 || c2;\nloop invariant i223: x1 >= 0 && x2 >= 0 && x3 >= 0 && c2 ==> x1 >= 0 && x2 >= 0 && x3 >= 0 ==> c1 || c2;\nloop invariant i224: x1 >= 0 && x2 >= 0 && x3 >= 0 && c1 ==> x1 >= 0 && x2 >= 0 && x3 >= 0 && c1 ==> x1 >= d1;\nloop invariant i225: x1 >= 0 && x2 >= 0 && x3 >= 0 && c2 ==> x1 >= 0 && x2 >= 0 && x3 >= 0 && c2 ==> x2 >= d2;\nloop invariant i226: x1 >= 0 && x2 >= 0 && x3 >= 0 && c1 ==> x1 >= 0 && x2 >= 0 && x3 >= 0 && c1 ==> x2 >= 0;\nloop invariant i227: x1 >= 0 && x2 >= 0 && x3 >= 0 && c2 ==> x1 >= 0 && x2 >= 0 && x3 >= 0 && c2 ==> x1 >= 0;\nloop invariant i228: x1 >= 0 && x2 >= 0 && x3 >= 0 && c1 ==> x1 >= 0 && x2 >= 0 && x3 >= 0 && c1 ==> x3 >= 0;\nloop invariant i229: x1 >= 0 && x2 >= 0 && x3 >= 0 && c2 ==> x1 >= 0 && x2 >= 0 && x3 >= 0 && c2 ==> x3 >= 0;\nloop invariant i230: x1 <= x2 + x3;\nloop invariant i231: x2 <= x1 + x3;\nloop invariant i232: x3 <= x1 + x2;\nloop invariant i233: d1 in {1};\nloop invariant i234: d2 in {1};\nloop invariant i235: d3 in {1};\nloop invariant i236: 0 <= x1 && 0 <= x2 && 0 <= x3;\nloop invariant i237: x1 >= d1 * x1;\nloop invariant i238: x2 >= d2 * x2;\nloop invariant i239: x3 >= d3 * x3;\nloop invariant i240: d1 >= 1 && d2 >= 1 && d3 >= 1;\nloop invariant i241: c1 == unknown_bool() && c2 == unknown_bool();\nloop invariant i242: v1 == unknown_int() && v2 == unknown_int() && v3 == unknown_int();\nloop invariant i243: x1 == (x1 - d1) ==> c1 && x2 == (x2 - d2) ==> c2 && x3 == (x3 - d3) ==> !c1 && !c2;\nloop invariant i244: x1 == (x1 - d1) ==> c1 && x2 == (x2 - d2) ==> c2 && x3 == (x3 - d3) ==> !c1 && !c2 ==> (x1 == 0 || x2 == 0 || x3 == 0);\nloop invariant i245: v1 >= unknown_int();\nloop invariant i246: v1 <= unknown_int();\nloop invariant i247: v2 >= unknown_int();\nloop invariant i248: v2 <= unknown_int();\nloop invariant i249: v3 >= unknown_int();\nloop invariant i250: v3 <= unknown_int();\nloop invariant i251: x1 == x1 - d1 ==> c1 == 0;\nloop invariant i252: x2 == x2 - d2 ==> c2 == 0;\nloop invariant i253: x3 == x3 - d3 ==> c1 == 0 && c2 == 0;\nloop invariant i254: x3 == x3 - d3 ==> c1 == 0 && c2 == 1;\nloop invariant i255: x3 == x3 - d3 ==> c1 == 1 && c2 == 0;\nloop invariant i256: x3 == x3 - d3 ==> c1 == 1 && c2 == 1;\nloop invariant i257: x1 == x1 - d1 ==> c1 == 0 && c2 == 0;\nloop invariant i258: x1 == x1 - d1 ==> c1 == 0 && c2 == 1;\nloop invariant i259: x1 == x1 - d1 ==> c1 == 1 && c2 == 0;\nloop invariant i260: x1 == x1 - d1 ==> c1 == 1 && c2 == 1;\nloop invariant i261: x2 == x2 - d2 ==> c1 == 0 && c2 == 0;\nloop invariant i262: x2 == x2 - d2 ==> c1 == 0 && c2 == 1;\nloop invariant i263: x2 == x2 - d2 ==> c1 == 1 && c2 == 0;\nloop invariant i264: x2 == x2 - d2 ==> c1 == 1 && c2 == 1;\nloop invariant i265: 1 <= x1 <= unknown_uint() && 1 <= x2 <= unknown_uint() && 1 <= x3 <= unknown_uint();\nloop invariant i266: 1 <= d1 <= unknown_uint() && 1 <= d2 <= unknown_uint() && 1 <= d3 <= unknown_uint();\nloop invariant i267: 0 <= v1 <= unknown_int() && 0 <= v2 <= unknown_int() && 0 <= v3 <= unknown_int();\nloop invariant i268: 0 <= c1 <= 1 && 0 <= c2 <= 1;\nloop invariant i269: (x1==0 || x2==0 || x3==0) ==> (x1==0 && x2==0 && x3==0);\nloop invariant i270: 1 <= d1 <= 2147483647;\nloop invariant i271: 1 <= d2 <= 2147483647;\nloop invariant i272: 1 <= d3 <= 2147483647;\nloop invariant i273: c1 ==> (0 <= x1 - d1 <= 2147483647);\nloop invariant i274: c2 ==> (0 <= x2 - d2 <= 2147483647);\nloop invariant i275: !c1 && !c2 ==> (0 <= x3 - d3 <= 2147483647);\nloop invariant i276: !c1 && !c2 ==> (d1 + d2 + d3 >= 1);\n*/\nwhile(x1>0 && x2>0 && x3>0)\n  {\n    if (c1) x1=x1-d1;\n    else if (c2) x2=x2-d2;\n    else x3=x3-d3;\n    c1=unknown_bool();\n    c2=unknown_bool();\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n\n  {;\n//@ assert(x1==0 || x2==0 || x3==0);\n}\n\n  return 0;\n}",
        "combined_annotation_num_solver_calls": 98,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  unsigned int x1=unknown_uint(), x2=unknown_uint(), x3=unknown_uint();\n  unsigned int d1=1, d2=1, d3=1;\n  int v1, v2, v3;\n  _Bool c1=unknown_bool(), c2=unknown_bool();\n  \n  /*@\nloop invariant i1: x1 >= 0;\nloop invariant i2: x2 >= 0;\nloop invariant i3: x3 >= 0;\n\n\n\n\n\n\n\n\nloop invariant i12: x1 + x2 + x3 >= 0;\nloop invariant i13: d1 >= 1;\nloop invariant i14: d2 >= 1;\nloop invariant i15: d3 >= 1;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i66: x1 > 0 ==> x2 > 0 ==> x3 > 0 ==> x1 >= d1;\nloop invariant i67: x1 > 0 ==> x2 > 0 ==> x3 > 0 ==> x2 >= d2;\nloop invariant i68: x1 > 0 ==> x2 > 0 ==> x3 > 0 ==> x3 >= d3;\nloop invariant i69: x1 > 0 ==> x2 > 0 ==> x3 > 0 ==> d1 > 0;\nloop invariant i70: x1 > 0 ==> x2 > 0 ==> x3 > 0 ==> d2 > 0;\nloop invariant i71: x1 > 0 ==> x2 > 0 ==> x3 > 0 ==> d3 > 0;\nloop invariant i72: x1 > 0 ==> x2 > 0 ==> x3 > 0 ==> d1 <= x1;\nloop invariant i73: x1 > 0 ==> x2 > 0 ==> x3 > 0 ==> d2 <= x2;\nloop invariant i74: x1 > 0 ==> x2 > 0 ==> x3 > 0 ==> d3 <= x3;\nloop invariant i75: 0 <= x1 <= 4294967295;\nloop invariant i76: 0 <= x2 <= 4294967295;\nloop invariant i77: 0 <= x3 <= 4294967295;\nloop invariant i78: 0 <= d1 <= 4294967295;\nloop invariant i79: 0 <= d2 <= 4294967295;\nloop invariant i80: 0 <= d3 <= 4294967295;\nloop invariant i81: -2147483648 <= v1 <= 2147483647;\nloop invariant i82: -2147483648 <= v2 <= 2147483647;\nloop invariant i83: -2147483648 <= v3 <= 2147483647;\nloop invariant i84: 0 <= c1 <= 1;\nloop invariant i85: 0 <= c2 <= 1;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i119: (x1 > 0) ==> (x1 - d1 >= 0);\nloop invariant i120: (x2 > 0) ==> (x2 - d2 >= 0);\nloop invariant i121: (x3 > 0) ==> (x3 - d3 >= 0);\n\n\n\nloop invariant i125: 0 <= d1 <= 2147483647;\nloop invariant i126: 0 <= d2 <= 2147483647;\nloop invariant i127: 0 <= d3 <= 2147483647;\n\n\n\n\n\n\n\n\nloop invariant i136: d1 >= 0;\nloop invariant i137: d2 >= 0;\nloop invariant i138: d3 >= 0;\n\n\n\nloop invariant i142: d1 == 1 ==> x1 <= x1 + d1;\nloop invariant i143: d2 == 1 ==> x2 <= x2 + d2;\nloop invariant i144: d3 == 1 ==> x3 <= x3 + d3;\n\n\n\nloop invariant i148: d1 == 1 ==> x1 <= x1 + 1;\nloop invariant i149: d2 == 1 ==> x2 <= x2 + 1;\nloop invariant i150: d3 == 1 ==> x3 <= x3 + 1;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i175: (x1 > 0 ==> x1 >= d1);\nloop invariant i176: (x2 > 0 ==> x2 >= d2);\nloop invariant i177: (x3 > 0 ==> x3 >= d3);\n\n\n\nloop invariant i181: (x1 > 0 ==> (c1 ==> x1 - d1 >= 0));\nloop invariant i182: (x2 > 0 ==> (c2 ==> x2 - d2 >= 0));\nloop invariant i183: (x3 > 0 ==> (!c1 && !c2 ==> x3 - d3 >= 0));\n\n\n\n\n\n\n\n\nloop invariant i192: (x1 == 0 ==> x1 == 0);\nloop invariant i193: (x2 == 0 ==> x2 == 0);\nloop invariant i194: (x3 == 0 ==> x3 == 0);\nloop invariant i195: (x1 == 0 ==> x2 >= 0);\nloop invariant i196: (x1 == 0 ==> x3 >= 0);\nloop invariant i197: (x2 == 0 ==> x1 >= 0);\nloop invariant i198: (x2 == 0 ==> x3 >= 0);\nloop invariant i199: (x3 == 0 ==> x1 >= 0);\nloop invariant i200: (x3 == 0 ==> x2 >= 0);\nloop invariant i201: x1 >= 0 && x2 >= 0 && x3 >= 0;\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i214: x1 >= 0 && x2 >= 0 && x3 >= 0 && c1 ==> x2 >= 0;\nloop invariant i215: x1 >= 0 && x2 >= 0 && x3 >= 0 && c2 ==> x1 >= 0;\nloop invariant i216: x1 >= 0 && x2 >= 0 && x3 >= 0 && c1 ==> x3 >= 0;\nloop invariant i217: x1 >= 0 && x2 >= 0 && x3 >= 0 && c2 ==> x3 >= 0;\n\n\n\n\nloop invariant i222: x1 >= 0 && x2 >= 0 && x3 >= 0 && c1 ==> x1 >= 0 && x2 >= 0 && x3 >= 0 ==> c1 || c2;\nloop invariant i223: x1 >= 0 && x2 >= 0 && x3 >= 0 && c2 ==> x1 >= 0 && x2 >= 0 && x3 >= 0 ==> c1 || c2;\n\n\nloop invariant i226: x1 >= 0 && x2 >= 0 && x3 >= 0 && c1 ==> x1 >= 0 && x2 >= 0 && x3 >= 0 && c1 ==> x2 >= 0;\nloop invariant i227: x1 >= 0 && x2 >= 0 && x3 >= 0 && c2 ==> x1 >= 0 && x2 >= 0 && x3 >= 0 && c2 ==> x1 >= 0;\nloop invariant i228: x1 >= 0 && x2 >= 0 && x3 >= 0 && c1 ==> x1 >= 0 && x2 >= 0 && x3 >= 0 && c1 ==> x3 >= 0;\nloop invariant i229: x1 >= 0 && x2 >= 0 && x3 >= 0 && c2 ==> x1 >= 0 && x2 >= 0 && x3 >= 0 && c2 ==> x3 >= 0;\n\n\n\n\n\n\nloop invariant i236: 0 <= x1 && 0 <= x2 && 0 <= x3;\nloop invariant i237: x1 >= d1 * x1;\nloop invariant i238: x2 >= d2 * x2;\nloop invariant i239: x3 >= d3 * x3;\nloop invariant i240: d1 >= 1 && d2 >= 1 && d3 >= 1;\n\n\nloop invariant i243: x1 == (x1 - d1) ==> c1 && x2 == (x2 - d2) ==> c2 && x3 == (x3 - d3) ==> !c1 && !c2;\nloop invariant i244: x1 == (x1 - d1) ==> c1 && x2 == (x2 - d2) ==> c2 && x3 == (x3 - d3) ==> !c1 && !c2 ==> (x1 == 0 || x2 == 0 || x3 == 0);\n\n\n\n\n\n\nloop invariant i251: x1 == x1 - d1 ==> c1 == 0;\nloop invariant i252: x2 == x2 - d2 ==> c2 == 0;\nloop invariant i253: x3 == x3 - d3 ==> c1 == 0 && c2 == 0;\nloop invariant i254: x3 == x3 - d3 ==> c1 == 0 && c2 == 1;\nloop invariant i255: x3 == x3 - d3 ==> c1 == 1 && c2 == 0;\nloop invariant i256: x3 == x3 - d3 ==> c1 == 1 && c2 == 1;\nloop invariant i257: x1 == x1 - d1 ==> c1 == 0 && c2 == 0;\nloop invariant i258: x1 == x1 - d1 ==> c1 == 0 && c2 == 1;\nloop invariant i259: x1 == x1 - d1 ==> c1 == 1 && c2 == 0;\nloop invariant i260: x1 == x1 - d1 ==> c1 == 1 && c2 == 1;\nloop invariant i261: x2 == x2 - d2 ==> c1 == 0 && c2 == 0;\nloop invariant i262: x2 == x2 - d2 ==> c1 == 0 && c2 == 1;\nloop invariant i263: x2 == x2 - d2 ==> c1 == 1 && c2 == 0;\nloop invariant i264: x2 == x2 - d2 ==> c1 == 1 && c2 == 1;\n\n\n\nloop invariant i268: 0 <= c1 <= 1 && 0 <= c2 <= 1;\n\nloop invariant i270: 1 <= d1 <= 2147483647;\nloop invariant i271: 1 <= d2 <= 2147483647;\nloop invariant i272: 1 <= d3 <= 2147483647;\n\n\n\nloop invariant i276: !c1 && !c2 ==> (d1 + d2 + d3 >= 1);\n*/\nwhile(x1>0 && x2>0 && x3>0)\n  {\n    if (c1) x1=x1-d1;\n    else if (c2) x2=x2-d2;\n    else x3=x3-d3;\n    c1=unknown_bool();\n    c2=unknown_bool();\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n\n  {;\n//@ assert(x1==0 || x2==0 || x3==0);\n}\n\n  return 0;\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.v.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/split.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c"
        ],
        "skipped": [],
        "total": 96,
        "success_count": 82,
        "failure_count": 14,
        "success_rate": 0.8541666666666666
    }
}