{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int lo, mid, hi;\n    lo = 0;\n    mid = unknown_int();\n    if (!(mid > 0 && mid <= LARGE_INT)) return 0;\n    hi = 2*mid;\n    \n    while (mid > 0) {\n        lo = lo + 1;\n        hi = hi - 1;\n        mid = mid - 1;\n    }\n    {;\n//@ assert(lo == hi);\n}\n\n    return 0;\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= mid <= LARGE_INT;\nloop invariant lo + mid + hi = 2*mid;\nloop invariant lo + hi = mid;\nloop invariant mid == hi;\nloop invariant mid == lo;\n*/\n```",
            "```\n/*@\nloop invariant lo >= 0;\nloop invariant hi >= 0;\nloop invariant mid >= 0;\nloop invariant lo <= hi;\nloop invariant hi == 2*mid;\nloop invariant mid >= 1;\nloop invariant mid <= LARGE_INT;\nloop invariant lo + hi == 2*mid;\nloop invariant lo <= mid;\nloop invariant hi >= mid;\nloop invariant lo + hi == mid + mid;\nloop invariant lo <= hi - 1;\nloop invariant hi >= lo + 1;\nloop invariant lo == hi - mid + 1;\nloop invariant hi == lo + mid;\nloop invariant lo + hi == mid + mid;\nloop invariant lo <= hi - 1;\nloop invariant hi >= lo + 1;\nloop invariant lo == hi - mid + 1;\nloop invariant hi == lo + mid;\nloop invariant lo + hi == mid + mid;\nloop invariant lo <= hi - 1;\nloop invariant hi >= lo + 1;\nloop invariant lo == hi - mid + 1;\nloop invariant hi == lo + mid;\nloop invariant lo + hi == mid + mid;\nloop invariant lo <= hi - 1;\nloop invariant hi >= lo + 1;\nloop invariant lo == hi - mid + 1;\nloop invariant hi == lo + mid;\nloop invariant lo + hi == mid + mid;\nloop invariant lo <= hi - 1;\nloop invariant hi >= lo + 1;\nloop invariant lo == hi - mid + 1;\nloop invariant hi == lo + mid;\nloop invariant lo + hi == mid + mid;\nloop invariant lo <= hi - 1;\nloop invariant hi >= lo + 1;\nloop invariant lo == hi - mid + 1;\nloop invariant hi == lo + mid;\nloop invariant lo + hi == mid + mid;\nloop invariant lo <= hi - 1;\nloop invariant hi >= lo + 1;\nloop invariant lo == hi - mid + 1;\nloop invariant hi == lo + mid;\nloop invariant lo + hi == mid + mid;\nloop invariant lo <= hi - 1;\nloop invariant hi >= lo + 1;\nloop invariant lo == hi - mid + 1;\nloop invariant hi == lo + mid;\nloop invariant lo + hi == mid + mid;\nloop invariant lo <= hi - 1;\nloop invariant hi >= lo + 1;\nloop invariant lo == hi - mid + 1;\nloop invariant hi == lo + mid;\nloop invariant lo + hi == mid + mid;\nloop invariant lo <= hi - 1;\nloop invariant hi >= lo + 1;\nloop invariant lo == hi - mid + 1;\nloop invariant hi == lo + mid;\nloop invariant lo + hi == mid + mid;\nloop invariant lo <= hi - 1;\nloop invariant hi >= lo + 1;\nloop invariant lo == hi - mid + 1;\nloop invariant hi == lo + mid;\nloop invariant lo + hi == mid + mid;\nloop invariant lo <= hi - 1;\nloop invariant hi >= lo + 1;\nloop invariant lo == hi - mid + 1;\nloop invariant hi == lo + mid;\nloop invariant lo + hi == mid + mid;\nloop invariant lo <= hi - 1;\nloop invariant hi >= lo + 1;\nloop invariant lo == hi - mid + 1;\nloop invariant hi == lo + mid;\nloop invariant lo + hi == mid + mid;\nloop invariant lo <= hi - 1;\nloop invariant hi >= lo + 1;\nloop invariant lo == hi - mid + 1;\nloop invariant hi == lo + mid;\nloop invariant lo + hi == mid + mid;\nloop invariant lo <= hi - 1;\nloop invariant hi >= lo + 1;\nloop invariant lo == hi - mid + 1;\nloop invariant hi == lo + mid;\nloop invariant lo + hi == mid + mid;\nloop invariant lo <= hi - 1;\nloop invariant hi >= lo + 1;\nloop invariant lo == hi - mid + 1;\nloop invariant hi == lo + mid;\nloop invariant lo + hi == mid + mid;\nloop invariant lo <= hi - 1;\nloop invariant hi >= lo + 1;\nloop invariant lo == hi - mid + 1;\nloop invariant hi == lo + mid;\nloop invariant lo + hi == mid + mid;\nloop invariant lo <= hi - 1;\nloop invariant hi >= lo + 1;\nloop invariant lo == hi - mid + 1;\nloop invariant hi == lo + mid;\nloop invariant lo + hi == mid + mid;\nloop invariant lo <= hi - 1;\nloop invariant hi >= lo + 1;\nloop invariant lo == hi - mid + 1;\nloop invariant hi == lo + mid;\nloop invariant lo + hi == mid + mid;\nloop invariant lo <= hi - 1;\nloop invariant hi >= lo + 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= lo <= LARGE_INT;\nloop invariant 0 <= mid <= LARGE_INT;\nloop invariant 0 <= hi <= 2 * LARGE_INT;\nloop invariant lo == mid;\nloop invariant hi == 2 * mid;\nloop invariant mid == hi / 2;\nloop invariant mid == hi - lo;\nloop invariant mid == hi - 2 * lo;\nloop invariant mid == hi - 3 * lo;\nloop invariant mid == hi - 4 * lo;\nloop invariant mid == hi - 5 * lo;\nloop invariant mid == hi - 6 * lo;\nloop invariant mid == hi - 7 * lo;\nloop invariant mid == hi - 8 * lo;\nloop invariant mid == hi - 9 * lo;\nloop invariant mid == hi - 10 * lo;\nloop invariant mid == hi - 11 * lo;\nloop invariant mid == hi - 12 * lo;\nloop invariant mid == hi - 13 * lo;\nloop invariant mid == hi - 14 * lo;\nloop invariant mid == hi - 15 * lo;\nloop invariant mid == hi - 16 * lo;\nloop invariant mid == hi - 17 * lo;\nloop invariant mid == hi - 18 * lo;\nloop invariant mid == hi - 19 * lo;\nloop invariant mid == hi - 20 * lo;\nloop invariant mid == hi - 21 * lo;\nloop invariant mid == hi - 22 * lo;\nloop invariant mid == hi - 23 * lo;\nloop invariant mid == hi - 24 * lo;\nloop invariant mid == hi - 25 * lo;\nloop invariant mid == hi - 26 * lo;\nloop invariant mid == hi - 27 * lo;\nloop invariant mid == hi - 28 * lo;\nloop invariant mid == hi - 29 * lo;\nloop invariant mid == hi - 30 * lo;\nloop invariant mid == hi - 31 * lo;\nloop invariant mid == hi - 32 * lo;\nloop invariant mid == hi - 33 * lo;\nloop invariant mid == hi - 34 * lo;\nloop invariant mid == hi - 35 * lo;\nloop invariant mid == hi - 36 * lo;\nloop invariant mid == hi - 37 * lo;\nloop invariant mid == hi - 38 * lo;\nloop invariant mid == hi - 39 * lo;\nloop invariant mid == hi - 40 * lo;\nloop invariant mid == hi - 41 * lo;\nloop invariant mid == hi - 42 * lo;\nloop invariant mid == hi - 43 * lo;\nloop invariant mid == hi - 44 * lo;\nloop invariant mid == hi - 45 * lo;\nloop invariant mid == hi - 46 * lo;\nloop invariant mid == hi - 47 * lo;\nloop invariant mid == hi - 48 * lo;\nloop invariant mid == hi - 49 * lo;\nloop invariant mid == hi - 50 * lo;\nloop invariant mid == hi - 51 * lo;\nloop invariant mid == hi - 52 * lo;\nloop invariant mid == hi - 53 * lo;\nloop invariant mid == hi - 54 * lo;\nloop invariant mid == hi - 55 * lo;\nloop invariant mid == hi - 56 * lo;\nloop invariant mid == hi - 57 * lo;\nloop invariant mid == hi - 58 * lo;\nloop invariant mid == hi - 59 * lo;\nloop invariant mid == hi - 60 * lo;\nloop invariant mid == hi - 61 * lo;\nloop invariant mid == hi - 62 * lo;\nloop invariant mid == hi - 63 * lo;\nloop invariant mid == hi - 64 * lo;\nloop invariant mid == hi - 65 * lo;\nloop invariant mid == hi - 66 * lo;\nloop invariant mid == hi - 67 * lo;\nloop invariant mid == hi - 68 * lo;\nloop invariant mid == hi - 69 * lo;\nloop invariant mid == hi - 70 * lo;\nloop invariant mid == hi - 71 * lo;\nloop invariant mid == hi - 72 * lo;\nloop invariant mid == hi - 73 * lo;\nloop invariant mid == hi - 74 * lo;\nloop invariant mid == hi - 75 * lo;\nloop invariant mid == hi - 76 * lo;\nloop invariant mid == hi - 77 * lo;\nloop invariant mid == hi - 78 * lo;\nloop invariant mid == hi - 79 * lo;\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= mid <= LARGE_INT;\nloop invariant 0 <= lo <= mid;\nloop invariant 0 <= hi <= 2*mid;\nloop invariant lo + hi == mid + mid;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= mid <= LARGE_INT;\nloop invariant 0 <= lo + mid <= hi + mid;\nloop invariant 0 <= hi - mid <= hi;\nloop invariant 0 <= lo + mid <= hi;\nloop invariant lo + mid == hi - mid;\nloop invariant lo == hi;\n*/\n```",
            "```\n/*@\nloop invariant lo == hi ==> lo == mid;\nloop invariant lo == hi ==> lo == mid ==> lo == 0;\nloop invariant lo == hi ==> lo == mid ==> lo == 0 ==> mid == 0;\nloop invariant lo == hi ==> lo == mid ==> lo == 0 ==> mid == 0 ==> hi == 0;\nloop invariant lo == hi ==> lo == mid ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi;\nloop invariant lo == hi ==> lo == mid ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi ==> lo == 0;\nloop invariant lo == hi ==> lo == mid ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi ==> lo == 0 ==> mid == 0;\nloop invariant lo == hi ==> lo == mid ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi ==> lo == 0 ==> mid == 0 ==> hi == 0;\nloop invariant lo == hi ==> lo == mid ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi;\nloop invariant lo == hi ==> lo == mid ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi ==> lo == 0;\nloop invariant lo == hi ==> lo == mid ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi ==> lo == 0 ==> mid == 0;\nloop invariant lo == hi ==> lo == mid ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi ==> lo == 0 ==> mid == 0 ==> hi == 0;\nloop invariant lo == hi ==> lo == mid ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi;\nloop invariant lo == hi ==> lo == mid ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi ==> lo == 0;\nloop invariant lo == hi ==> lo == mid ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi ==> lo == 0 ==> mid == 0;\nloop invariant lo == hi ==> lo == mid ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi ==> lo == 0 ==> mid == 0 ==> hi == 0;\nloop invariant lo == hi ==> lo == mid ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi;\nloop invariant lo == hi ==> lo == mid ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi ==> lo == 0;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= lo;\nloop invariant 1 <= mid <= LARGE_INT;\nloop invariant lo == hi;\nloop invariant hi == 2*mid - lo;\nloop invariant lo + mid + hi == 2*mid;\nloop invariant mid == (lo + hi) / 2;\nloop invariant lo + hi == 2*mid - 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= lo <= hi;\nloop invariant mid == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= lo <= 2*mid;\nloop invariant 0 <= mid <= LARGE_INT;\nloop invariant hi = 2*mid - lo;\nloop invariant mid > 0 ==> lo = hi;\nloop invariant mid > 0 ==> lo + mid = hi;\nloop invariant mid > 0 ==> lo = lo + 1;\nloop invariant mid > 0 ==> hi = hi - 1;\nloop invariant mid > 0 ==> mid = mid - 1;\nloop invariant mid > 0 ==> mid <= LARGE_INT - 1;\nloop invariant mid > 0 ==> mid = mid - 1;\nloop invariant mid > 0 ==> mid > 0;\nloop invariant mid > 0 ==> mid <= LARGE_INT - 1;\nloop invariant mid > 0 ==> mid = mid - 1;\nloop invariant mid > 0 ==> mid > 0;\nloop invariant mid > 0 ==> mid <= LARGE_INT - 1;\nloop invariant mid > 0 ==> mid = mid - 1;\nloop invariant mid > 0 ==> mid > 0;\nloop invariant mid > 0 ==> mid <= LARGE_INT - 1;\nloop invariant mid > 0 ==> mid = mid - 1;\nloop invariant mid > 0 ==> mid > 0;\nloop invariant mid > 0 ==> mid <= LARGE_INT - 1;\nloop invariant mid > 0 ==> mid = mid - 1;\nloop invariant mid > 0 ==> mid > 0;\nloop invariant mid > 0 ==> mid <= LARGE_INT - 1;\nloop invariant mid > 0 ==> mid = mid - 1;\nloop invariant mid > 0 ==> mid > 0;\nloop invariant mid > 0 ==> mid <= LARGE_INT - 1;\nloop invariant mid > 0 ==> mid = mid - 1;\nloop invariant mid > 0 ==> mid > 0;\nloop invariant mid > 0 ==> mid <= LARGE_INT - 1;\nloop invariant mid > 0 ==> mid = mid - 1;\nloop invariant mid > 0 ==> mid > 0;\nloop invariant mid > 0 ==> mid <= LARGE_INT - 1;\nloop invariant mid > 0 ==> mid = mid - 1;\nloop invariant mid > 0 ==> mid > 0;\nloop invariant mid > 0 ==> mid <= LARGE_INT - 1;\nloop invariant mid > 0 ==> mid = mid - 1;\nloop invariant mid > 0 ==> mid > 0;\nloop invariant mid > 0 ==> mid <= LARGE_INT - 1;\nloop invariant mid > 0 ==> mid = mid - 1;\nloop invariant mid > 0 ==> mid > 0;\nloop invariant mid > 0 ==> mid <= LARGE_INT - 1;\nloop invariant mid > 0 ==> mid = mid - 1;\nloop invariant mid > 0 ==> mid > 0;\nloop invariant mid > 0 ==> mid <= LARGE_INT - 1;\nloop invariant mid > 0 ==> mid = mid - 1;\nloop invariant mid > 0 ==> mid > 0;\nloop invariant mid > 0 ==> mid <= LARGE_INT - 1;\nloop invariant mid > 0 ==> mid = mid - 1;\nloop invariant mid > 0 ==> mid > 0;\nloop invariant mid > 0 ==> mid <= LARGE_INT - 1;\nloop invariant mid > 0 ==> mid = mid - 1;\nloop invariant mid > 0 ==> mid > 0;\nloop invariant mid > 0 ==> mid <= LARGE_INT - 1;\nloop invariant mid > 0 ==> mid = mid - 1;\nloop invariant mid > 0 ==> mid > 0;\nloop invariant mid > 0 ==> mid <= LARGE_INT - 1;\nloop invariant mid > 0 ==> mid = mid - 1;\nloop invariant mid > 0 ==> mid > 0;\nloop invariant mid > 0 ==> mid <= LARGE_INT - 1;\nloop invariant mid > 0 ==> mid = mid - 1;\nloop invariant mid > 0 ==> mid > 0;\nloop invariant mid > 0 ==> mid <= LARGE_INT - 1;\nloop invariant mid > 0 ==> mid = mid - 1;\nloop invariant mid > 0 ==> mid > 0;\nloop invariant mid > 0 ==> mid <= LARGE_INT - 1;\nloop invariant mid > 0 ==> mid = mid - 1;\nloop invariant mid > 0 ==> mid > 0;\nloop invariant mid > 0 ==> mid <= LARGE_INT - 1;\nloop invariant mid > 0 ==> mid = mid - 1;\nloop invariant mid > 0 ==> mid > 0;\nloop invariant mid > 0 ==> mid <= LARGE_INT - 1;\nloop invariant mid > 0 ==> mid = mid - 1;\n*/\n```",
            "```\n/*@\nloop invariant lo <= hi;\nloop invariant hi >= 2*mid;\nloop invariant lo >= 0;\nloop invariant hi <= 2*mid;\nloop invariant mid >= 0;\nloop invariant mid <= LARGE_INT;\nloop invariant lo <= hi;\nloop invariant lo + mid <= hi;\nloop invariant mid <= hi;\nloop invariant mid >= 0;\nloop invariant mid <= LARGE_INT;\nloop invariant lo + mid <= hi;\nloop invariant mid <= hi;\nloop invariant mid >= 0;\nloop invariant mid <= LARGE_INT;\nloop invariant lo <= hi;\nloop invariant lo + mid <= hi;\nloop invariant mid <= hi;\nloop invariant mid >= 0;\nloop invariant mid <= LARGE_INT;\nloop invariant lo <= hi;\nloop invariant lo + mid <= hi;\nloop invariant mid <= hi;\nloop invariant mid >= 0;\nloop invariant mid <= LARGE_INT;\nloop invariant lo <= hi;\nloop invariant lo + mid <= hi;\nloop invariant mid <= hi;\nloop invariant mid >= 0;\nloop invariant mid <= LARGE_INT;\nloop invariant lo <= hi;\nloop invariant lo + mid <= hi;\nloop invariant mid <= hi;\nloop invariant mid >= 0;\nloop invariant mid <= LARGE_INT;\nloop invariant lo <= hi;\nloop invariant lo + mid <= hi;\nloop invariant mid <= hi;\nloop invariant mid >= 0;\nloop invariant mid <= LARGE_INT;\nloop invariant lo <= hi;\nloop invariant lo + mid <= hi;\nloop invariant mid <= hi;\nloop invariant mid >= 0;\nloop invariant mid <= LARGE_INT;\nloop invariant lo <= hi;\nloop invariant lo + mid <= hi;\nloop invariant mid <= hi;\nloop invariant mid >= 0;\nloop invariant mid <= LARGE_INT;\nloop invariant lo <= hi;\nloop invariant lo + mid <= hi;\nloop invariant mid <= hi;\nloop invariant mid >= 0;\nloop invariant mid <= LARGE_INT;\nloop invariant lo <= hi;\nloop invariant lo + mid <= hi;\nloop invariant mid <= hi;\nloop invariant mid >= 0;\nloop invariant mid <= LARGE_INT;\nloop invariant lo <= hi;\nloop invariant lo + mid <= hi;\nloop invariant mid <= hi;\nloop invariant mid >= 0;\nloop invariant mid <= LARGE_INT;\nloop invariant lo <= hi;\nloop invariant lo + mid <= hi;\nloop invariant mid <= hi;\nloop invariant mid >= 0;\nloop invariant mid <= LARGE_INT;\nloop invariant lo <= hi;\nloop invariant lo + mid <= hi;\nloop invariant mid <= hi;\nloop invariant mid >= 0;\nloop invariant mid <= LARGE_INT;\nloop invariant lo <= hi;\nloop invariant lo + mid <= hi;\nloop invariant mid <= hi;\nloop invariant mid >= 0;\nloop invariant mid <= LARGE_INT;\nloop invariant lo <= hi;\nloop invariant lo + mid <= hi;\nloop invariant mid <= hi;\nloop invariant mid >= 0;\nloop invariant mid <= LARGE_INT;\nloop invariant lo <= hi;\nloop invariant lo + mid <= hi;\nloop invariant mid <= hi;\nloop invariant mid >= 0;\nloop invariant mid <= LARGE_INT;\nloop invariant lo <= hi;\nloop invariant lo + mid <= hi;\nloop invariant mid <= hi;\nloop invariant mid >= 0;\nloop invariant mid <= LARGE_INT;\nloop invariant lo <= hi;\nloop invariant lo + mid <= hi;\nloop invariant mid <= hi;\nloop invariant mid >= 0;\nloop invariant mid <= LARGE_INT;\nloop invariant lo <= hi;\nloop invariant lo + mid <= hi;\nloop invariant mid <= hi;\nloop invariant mid >= 0;\nloop invariant mid <= LARGE_INT;\nloop invariant lo <= hi;\nloop invariant lo + mid <= hi;\nloop invariant mid <= hi;\nloop invariant mid >= 0;\nloop invariant mid <= LARGE_INT;\nloop invariant lo <= hi;\nloop invariant lo + mid <= hi;\nloop invariant mid <= hi;\nloop invariant mid >= 0;\nloop invariant mid <= LARGE_INT;\nloop invariant lo <= hi;\nloop invariant lo + mid <= hi;\nloop invariant mid <= hi;\nloop invariant mid >= 0;\nloop invariant mid <= LARGE_INT;\nloop invariant lo <= hi;\nloop invariant lo + mid <= hi;\nloop invariant mid <= hi;\nloop invariant mid >= 0;\nloop invariant mid <= LARGE_INT;\nloop invariant lo <= hi;\nloop invariant lo + mid <= hi;\nloop invariant mid <= hi;\nloop invariant mid >= 0;\nloop invariant mid <= LARGE_INT;\nloop invariant lo <= hi;\nloop invariant lo + mid <= hi;\nloop invariant mid <= hi;\nloop invariant mid >= 0;\nloop invariant mid <= LARGE_INT;\nloop invariant lo <= hi;\nloop invariant lo + mid <= hi;\nloop invariant mid <= hi;\nloop invariant mid >= 0;\nloop invariant mid <= LARGE_INT;\nloop invariant lo <= hi;\nloop invariant lo + mid <= hi;\nloop invariant mid <= hi;\nloop invariant mid >= 0;\nloop invariant mid <= LARGE_INT;\nloop invariant lo <= hi;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= lo <= mid <= hi <= 2*mid;\nloop invariant mid >= 0 ==> lo >= 0;\nloop invariant mid >= 0 ==> hi >= 2*mid;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= lo <= hi <= 2 * mid;\nloop invariant mid == 0 ==> lo == hi;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= lo <= mid;\nloop invariant mid <= hi <= 2*mid;\nloop invariant lo <= hi;\nloop invariant mid >= 0;\nloop invariant mid <= LARGE_INT;\nloop invariant lo <= hi <= 2*mid;\nloop invariant mid >= 0 ==> lo == hi;\nloop invariant mid > 0 ==> lo <= hi;\nloop invariant mid > 0 ==> lo < hi;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= mid <= LARGE_INT;\nloop invariant lo + mid + hi == 2*mid;\nloop invariant lo <= hi;\nloop invariant 0 <= mid <= LARGE_INT;\nloop invariant lo + mid + hi == 2*mid;\nloop invariant lo <= hi;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= mid <= LARGE_INT;\nloop invariant lo + mid + hi = 2*mid;\nloop invariant lo + hi = mid;\nloop invariant mid == hi;\nloop invariant mid == lo;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int lo, mid, hi;\n    lo = 0;\n    mid = unknown_int();\n    if (!(mid > 0 && mid <= LARGE_INT)) return 0;\n    hi = 2*mid;\n    \n    /*@\nloop invariant i1: 0 <= mid <= LARGE_INT;\n\n\n\n\n*/\nwhile (mid > 0) {\n        lo = lo + 1;\n        hi = hi - 1;\n        mid = mid - 1;\n    }\n    {;\n//@ assert(lo == hi);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 8,
                "annotations": "```\n/*@\nloop invariant lo >= 0;\nloop invariant hi >= 0;\nloop invariant mid >= 0;\nloop invariant lo <= hi;\nloop invariant hi == 2*mid;\nloop invariant mid >= 1;\nloop invariant mid <= LARGE_INT;\nloop invariant lo + hi == 2*mid;\nloop invariant lo <= mid;\nloop invariant hi >= mid;\nloop invariant lo + hi == mid + mid;\nloop invariant lo <= hi - 1;\nloop invariant hi >= lo + 1;\nloop invariant lo == hi - mid + 1;\nloop invariant hi == lo + mid;\nloop invariant lo + hi == mid + mid;\nloop invariant lo <= hi - 1;\nloop invariant hi >= lo + 1;\nloop invariant lo == hi - mid + 1;\nloop invariant hi == lo + mid;\nloop invariant lo + hi == mid + mid;\nloop invariant lo <= hi - 1;\nloop invariant hi >= lo + 1;\nloop invariant lo == hi - mid + 1;\nloop invariant hi == lo + mid;\nloop invariant lo + hi == mid + mid;\nloop invariant lo <= hi - 1;\nloop invariant hi >= lo + 1;\nloop invariant lo == hi - mid + 1;\nloop invariant hi == lo + mid;\nloop invariant lo + hi == mid + mid;\nloop invariant lo <= hi - 1;\nloop invariant hi >= lo + 1;\nloop invariant lo == hi - mid + 1;\nloop invariant hi == lo + mid;\nloop invariant lo + hi == mid + mid;\nloop invariant lo <= hi - 1;\nloop invariant hi >= lo + 1;\nloop invariant lo == hi - mid + 1;\nloop invariant hi == lo + mid;\nloop invariant lo + hi == mid + mid;\nloop invariant lo <= hi - 1;\nloop invariant hi >= lo + 1;\nloop invariant lo == hi - mid + 1;\nloop invariant hi == lo + mid;\nloop invariant lo + hi == mid + mid;\nloop invariant lo <= hi - 1;\nloop invariant hi >= lo + 1;\nloop invariant lo == hi - mid + 1;\nloop invariant hi == lo + mid;\nloop invariant lo + hi == mid + mid;\nloop invariant lo <= hi - 1;\nloop invariant hi >= lo + 1;\nloop invariant lo == hi - mid + 1;\nloop invariant hi == lo + mid;\nloop invariant lo + hi == mid + mid;\nloop invariant lo <= hi - 1;\nloop invariant hi >= lo + 1;\nloop invariant lo == hi - mid + 1;\nloop invariant hi == lo + mid;\nloop invariant lo + hi == mid + mid;\nloop invariant lo <= hi - 1;\nloop invariant hi >= lo + 1;\nloop invariant lo == hi - mid + 1;\nloop invariant hi == lo + mid;\nloop invariant lo + hi == mid + mid;\nloop invariant lo <= hi - 1;\nloop invariant hi >= lo + 1;\nloop invariant lo == hi - mid + 1;\nloop invariant hi == lo + mid;\nloop invariant lo + hi == mid + mid;\nloop invariant lo <= hi - 1;\nloop invariant hi >= lo + 1;\nloop invariant lo == hi - mid + 1;\nloop invariant hi == lo + mid;\nloop invariant lo + hi == mid + mid;\nloop invariant lo <= hi - 1;\nloop invariant hi >= lo + 1;\nloop invariant lo == hi - mid + 1;\nloop invariant hi == lo + mid;\nloop invariant lo + hi == mid + mid;\nloop invariant lo <= hi - 1;\nloop invariant hi >= lo + 1;\nloop invariant lo == hi - mid + 1;\nloop invariant hi == lo + mid;\nloop invariant lo + hi == mid + mid;\nloop invariant lo <= hi - 1;\nloop invariant hi >= lo + 1;\nloop invariant lo == hi - mid + 1;\nloop invariant hi == lo + mid;\nloop invariant lo + hi == mid + mid;\nloop invariant lo <= hi - 1;\nloop invariant hi >= lo + 1;\nloop invariant lo == hi - mid + 1;\nloop invariant hi == lo + mid;\nloop invariant lo + hi == mid + mid;\nloop invariant lo <= hi - 1;\nloop invariant hi >= lo + 1;\nloop invariant lo == hi - mid + 1;\nloop invariant hi == lo + mid;\nloop invariant lo + hi == mid + mid;\nloop invariant lo <= hi - 1;\nloop invariant hi >= lo + 1;\nloop invariant lo == hi - mid + 1;\nloop invariant hi == lo + mid;\nloop invariant lo + hi == mid + mid;\nloop invariant lo <= hi - 1;\nloop invariant hi >= lo + 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int lo, mid, hi;\n    lo = 0;\n    mid = unknown_int();\n    if (!(mid > 0 && mid <= LARGE_INT)) return 0;\n    hi = 2*mid;\n    \n    /*@\nloop invariant i1: lo >= 0;\nloop invariant i2: hi >= 0;\nloop invariant i3: mid >= 0;\n\n\n\nloop invariant i7: mid <= LARGE_INT;\n\n\nloop invariant i10: hi >= mid;\n\n\n\n\n\n*/\nwhile (mid > 0) {\n        lo = lo + 1;\n        hi = hi - 1;\n        mid = mid - 1;\n    }\n    {;\n//@ assert(lo == hi);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 84,
                "annotations": "```\n/*@\nloop invariant 0 <= lo <= LARGE_INT;\nloop invariant 0 <= mid <= LARGE_INT;\nloop invariant 0 <= hi <= 2 * LARGE_INT;\nloop invariant lo == mid;\nloop invariant hi == 2 * mid;\nloop invariant mid == hi / 2;\nloop invariant mid == hi - lo;\nloop invariant mid == hi - 2 * lo;\nloop invariant mid == hi - 3 * lo;\nloop invariant mid == hi - 4 * lo;\nloop invariant mid == hi - 5 * lo;\nloop invariant mid == hi - 6 * lo;\nloop invariant mid == hi - 7 * lo;\nloop invariant mid == hi - 8 * lo;\nloop invariant mid == hi - 9 * lo;\nloop invariant mid == hi - 10 * lo;\nloop invariant mid == hi - 11 * lo;\nloop invariant mid == hi - 12 * lo;\nloop invariant mid == hi - 13 * lo;\nloop invariant mid == hi - 14 * lo;\nloop invariant mid == hi - 15 * lo;\nloop invariant mid == hi - 16 * lo;\nloop invariant mid == hi - 17 * lo;\nloop invariant mid == hi - 18 * lo;\nloop invariant mid == hi - 19 * lo;\nloop invariant mid == hi - 20 * lo;\nloop invariant mid == hi - 21 * lo;\nloop invariant mid == hi - 22 * lo;\nloop invariant mid == hi - 23 * lo;\nloop invariant mid == hi - 24 * lo;\nloop invariant mid == hi - 25 * lo;\nloop invariant mid == hi - 26 * lo;\nloop invariant mid == hi - 27 * lo;\nloop invariant mid == hi - 28 * lo;\nloop invariant mid == hi - 29 * lo;\nloop invariant mid == hi - 30 * lo;\nloop invariant mid == hi - 31 * lo;\nloop invariant mid == hi - 32 * lo;\nloop invariant mid == hi - 33 * lo;\nloop invariant mid == hi - 34 * lo;\nloop invariant mid == hi - 35 * lo;\nloop invariant mid == hi - 36 * lo;\nloop invariant mid == hi - 37 * lo;\nloop invariant mid == hi - 38 * lo;\nloop invariant mid == hi - 39 * lo;\nloop invariant mid == hi - 40 * lo;\nloop invariant mid == hi - 41 * lo;\nloop invariant mid == hi - 42 * lo;\nloop invariant mid == hi - 43 * lo;\nloop invariant mid == hi - 44 * lo;\nloop invariant mid == hi - 45 * lo;\nloop invariant mid == hi - 46 * lo;\nloop invariant mid == hi - 47 * lo;\nloop invariant mid == hi - 48 * lo;\nloop invariant mid == hi - 49 * lo;\nloop invariant mid == hi - 50 * lo;\nloop invariant mid == hi - 51 * lo;\nloop invariant mid == hi - 52 * lo;\nloop invariant mid == hi - 53 * lo;\nloop invariant mid == hi - 54 * lo;\nloop invariant mid == hi - 55 * lo;\nloop invariant mid == hi - 56 * lo;\nloop invariant mid == hi - 57 * lo;\nloop invariant mid == hi - 58 * lo;\nloop invariant mid == hi - 59 * lo;\nloop invariant mid == hi - 60 * lo;\nloop invariant mid == hi - 61 * lo;\nloop invariant mid == hi - 62 * lo;\nloop invariant mid == hi - 63 * lo;\nloop invariant mid == hi - 64 * lo;\nloop invariant mid == hi - 65 * lo;\nloop invariant mid == hi - 66 * lo;\nloop invariant mid == hi - 67 * lo;\nloop invariant mid == hi - 68 * lo;\nloop invariant mid == hi - 69 * lo;\nloop invariant mid == hi - 70 * lo;\nloop invariant mid == hi - 71 * lo;\nloop invariant mid == hi - 72 * lo;\nloop invariant mid == hi - 73 * lo;\nloop invariant mid == hi - 74 * lo;\nloop invariant mid == hi - 75 * lo;\nloop invariant mid == hi - 76 * lo;\nloop invariant mid == hi - 77 * lo;\nloop invariant mid == hi - 78 * lo;\nloop invariant mid == hi - 79 * lo;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int lo, mid, hi;\n    lo = 0;\n    mid = unknown_int();\n    if (!(mid > 0 && mid <= LARGE_INT)) return 0;\n    hi = 2*mid;\n    \n    /*@\n\nloop invariant i2: 0 <= mid <= LARGE_INT;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (mid > 0) {\n        lo = lo + 1;\n        hi = hi - 1;\n        mid = mid - 1;\n    }\n    {;\n//@ assert(lo == hi);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int lo, mid, hi;\n    lo = 0;\n    mid = unknown_int();\n    if (!(mid > 0 && mid <= LARGE_INT)) return 0;\n    hi = 2*mid;\n    \n    /*@\n\n*/\nwhile (mid > 0) {\n        lo = lo + 1;\n        hi = hi - 1;\n        mid = mid - 1;\n    }\n    {;\n//@ assert(lo == hi);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= mid <= LARGE_INT;\nloop invariant 0 <= lo <= mid;\nloop invariant 0 <= hi <= 2*mid;\nloop invariant lo + hi == mid + mid;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int lo, mid, hi;\n    lo = 0;\n    mid = unknown_int();\n    if (!(mid > 0 && mid <= LARGE_INT)) return 0;\n    hi = 2*mid;\n    \n    /*@\nloop invariant i1: 0 <= mid <= LARGE_INT;\n\n\n\n*/\nwhile (mid > 0) {\n        lo = lo + 1;\n        hi = hi - 1;\n        mid = mid - 1;\n    }\n    {;\n//@ assert(lo == hi);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= mid <= LARGE_INT;\nloop invariant 0 <= lo + mid <= hi + mid;\nloop invariant 0 <= hi - mid <= hi;\nloop invariant 0 <= lo + mid <= hi;\nloop invariant lo + mid == hi - mid;\nloop invariant lo == hi;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int lo, mid, hi;\n    lo = 0;\n    mid = unknown_int();\n    if (!(mid > 0 && mid <= LARGE_INT)) return 0;\n    hi = 2*mid;\n    \n    /*@\nloop invariant i1: 0 <= mid <= LARGE_INT;\nloop invariant i2: 0 <= lo + mid <= hi + mid;\nloop invariant i3: 0 <= hi - mid <= hi;\nloop invariant i4: 0 <= lo + mid <= hi;\nloop invariant i5: lo + mid == hi - mid;\n\n*/\nwhile (mid > 0) {\n        lo = lo + 1;\n        hi = hi - 1;\n        mid = mid - 1;\n    }\n    {;\n//@ assert(lo == hi);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant lo == hi ==> lo == mid;\nloop invariant lo == hi ==> lo == mid ==> lo == 0;\nloop invariant lo == hi ==> lo == mid ==> lo == 0 ==> mid == 0;\nloop invariant lo == hi ==> lo == mid ==> lo == 0 ==> mid == 0 ==> hi == 0;\nloop invariant lo == hi ==> lo == mid ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi;\nloop invariant lo == hi ==> lo == mid ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi ==> lo == 0;\nloop invariant lo == hi ==> lo == mid ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi ==> lo == 0 ==> mid == 0;\nloop invariant lo == hi ==> lo == mid ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi ==> lo == 0 ==> mid == 0 ==> hi == 0;\nloop invariant lo == hi ==> lo == mid ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi;\nloop invariant lo == hi ==> lo == mid ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi ==> lo == 0;\nloop invariant lo == hi ==> lo == mid ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi ==> lo == 0 ==> mid == 0;\nloop invariant lo == hi ==> lo == mid ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi ==> lo == 0 ==> mid == 0 ==> hi == 0;\nloop invariant lo == hi ==> lo == mid ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi;\nloop invariant lo == hi ==> lo == mid ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi ==> lo == 0;\nloop invariant lo == hi ==> lo == mid ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi ==> lo == 0 ==> mid == 0;\nloop invariant lo == hi ==> lo == mid ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi ==> lo == 0 ==> mid == 0 ==> hi == 0;\nloop invariant lo == hi ==> lo == mid ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi;\nloop invariant lo == hi ==> lo == mid ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi ==> lo == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int lo, mid, hi;\n    lo = 0;\n    mid = unknown_int();\n    if (!(mid > 0 && mid <= LARGE_INT)) return 0;\n    hi = 2*mid;\n    \n    /*@\n\n\nloop invariant i3: lo == hi ==> lo == mid ==> lo == 0 ==> mid == 0;\nloop invariant i4: lo == hi ==> lo == mid ==> lo == 0 ==> mid == 0 ==> hi == 0;\nloop invariant i5: lo == hi ==> lo == mid ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi;\nloop invariant i6: lo == hi ==> lo == mid ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi ==> lo == 0;\nloop invariant i7: lo == hi ==> lo == mid ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi ==> lo == 0 ==> mid == 0;\nloop invariant i8: lo == hi ==> lo == mid ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi ==> lo == 0 ==> mid == 0 ==> hi == 0;\nloop invariant i9: lo == hi ==> lo == mid ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi;\nloop invariant i10: lo == hi ==> lo == mid ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi ==> lo == 0;\nloop invariant i11: lo == hi ==> lo == mid ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi ==> lo == 0 ==> mid == 0;\nloop invariant i12: lo == hi ==> lo == mid ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi ==> lo == 0 ==> mid == 0 ==> hi == 0;\nloop invariant i13: lo == hi ==> lo == mid ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi;\nloop invariant i14: lo == hi ==> lo == mid ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi ==> lo == 0;\nloop invariant i15: lo == hi ==> lo == mid ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi ==> lo == 0 ==> mid == 0;\nloop invariant i16: lo == hi ==> lo == mid ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi ==> lo == 0 ==> mid == 0 ==> hi == 0;\nloop invariant i17: lo == hi ==> lo == mid ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi;\nloop invariant i18: lo == hi ==> lo == mid ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi ==> lo == 0;\n*/\nwhile (mid > 0) {\n        lo = lo + 1;\n        hi = hi - 1;\n        mid = mid - 1;\n    }\n    {;\n//@ assert(lo == hi);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 1 <= lo;\nloop invariant 1 <= mid <= LARGE_INT;\nloop invariant lo == hi;\nloop invariant hi == 2*mid - lo;\nloop invariant lo + mid + hi == 2*mid;\nloop invariant mid == (lo + hi) / 2;\nloop invariant lo + hi == 2*mid - 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int lo, mid, hi;\n    lo = 0;\n    mid = unknown_int();\n    if (!(mid > 0 && mid <= LARGE_INT)) return 0;\n    hi = 2*mid;\n    \n    /*@\n\n\n\n\n\n\n\n*/\nwhile (mid > 0) {\n        lo = lo + 1;\n        hi = hi - 1;\n        mid = mid - 1;\n    }\n    {;\n//@ assert(lo == hi);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= lo <= hi;\nloop invariant mid == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int lo, mid, hi;\n    lo = 0;\n    mid = unknown_int();\n    if (!(mid > 0 && mid <= LARGE_INT)) return 0;\n    hi = 2*mid;\n    \n    /*@\n\n\n*/\nwhile (mid > 0) {\n        lo = lo + 1;\n        hi = hi - 1;\n        mid = mid - 1;\n    }\n    {;\n//@ assert(lo == hi);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 8,
                "annotations": "```\n/*@\nloop invariant 0 <= lo <= 2*mid;\nloop invariant 0 <= mid <= LARGE_INT;\nloop invariant hi = 2*mid - lo;\nloop invariant mid > 0 ==> lo = hi;\nloop invariant mid > 0 ==> lo + mid = hi;\nloop invariant mid > 0 ==> lo = lo + 1;\nloop invariant mid > 0 ==> hi = hi - 1;\nloop invariant mid > 0 ==> mid = mid - 1;\nloop invariant mid > 0 ==> mid <= LARGE_INT - 1;\nloop invariant mid > 0 ==> mid = mid - 1;\nloop invariant mid > 0 ==> mid > 0;\nloop invariant mid > 0 ==> mid <= LARGE_INT - 1;\nloop invariant mid > 0 ==> mid = mid - 1;\nloop invariant mid > 0 ==> mid > 0;\nloop invariant mid > 0 ==> mid <= LARGE_INT - 1;\nloop invariant mid > 0 ==> mid = mid - 1;\nloop invariant mid > 0 ==> mid > 0;\nloop invariant mid > 0 ==> mid <= LARGE_INT - 1;\nloop invariant mid > 0 ==> mid = mid - 1;\nloop invariant mid > 0 ==> mid > 0;\nloop invariant mid > 0 ==> mid <= LARGE_INT - 1;\nloop invariant mid > 0 ==> mid = mid - 1;\nloop invariant mid > 0 ==> mid > 0;\nloop invariant mid > 0 ==> mid <= LARGE_INT - 1;\nloop invariant mid > 0 ==> mid = mid - 1;\nloop invariant mid > 0 ==> mid > 0;\nloop invariant mid > 0 ==> mid <= LARGE_INT - 1;\nloop invariant mid > 0 ==> mid = mid - 1;\nloop invariant mid > 0 ==> mid > 0;\nloop invariant mid > 0 ==> mid <= LARGE_INT - 1;\nloop invariant mid > 0 ==> mid = mid - 1;\nloop invariant mid > 0 ==> mid > 0;\nloop invariant mid > 0 ==> mid <= LARGE_INT - 1;\nloop invariant mid > 0 ==> mid = mid - 1;\nloop invariant mid > 0 ==> mid > 0;\nloop invariant mid > 0 ==> mid <= LARGE_INT - 1;\nloop invariant mid > 0 ==> mid = mid - 1;\nloop invariant mid > 0 ==> mid > 0;\nloop invariant mid > 0 ==> mid <= LARGE_INT - 1;\nloop invariant mid > 0 ==> mid = mid - 1;\nloop invariant mid > 0 ==> mid > 0;\nloop invariant mid > 0 ==> mid <= LARGE_INT - 1;\nloop invariant mid > 0 ==> mid = mid - 1;\nloop invariant mid > 0 ==> mid > 0;\nloop invariant mid > 0 ==> mid <= LARGE_INT - 1;\nloop invariant mid > 0 ==> mid = mid - 1;\nloop invariant mid > 0 ==> mid > 0;\nloop invariant mid > 0 ==> mid <= LARGE_INT - 1;\nloop invariant mid > 0 ==> mid = mid - 1;\nloop invariant mid > 0 ==> mid > 0;\nloop invariant mid > 0 ==> mid <= LARGE_INT - 1;\nloop invariant mid > 0 ==> mid = mid - 1;\nloop invariant mid > 0 ==> mid > 0;\nloop invariant mid > 0 ==> mid <= LARGE_INT - 1;\nloop invariant mid > 0 ==> mid = mid - 1;\nloop invariant mid > 0 ==> mid > 0;\nloop invariant mid > 0 ==> mid <= LARGE_INT - 1;\nloop invariant mid > 0 ==> mid = mid - 1;\nloop invariant mid > 0 ==> mid > 0;\nloop invariant mid > 0 ==> mid <= LARGE_INT - 1;\nloop invariant mid > 0 ==> mid = mid - 1;\nloop invariant mid > 0 ==> mid > 0;\nloop invariant mid > 0 ==> mid <= LARGE_INT - 1;\nloop invariant mid > 0 ==> mid = mid - 1;\nloop invariant mid > 0 ==> mid > 0;\nloop invariant mid > 0 ==> mid <= LARGE_INT - 1;\nloop invariant mid > 0 ==> mid = mid - 1;\nloop invariant mid > 0 ==> mid > 0;\nloop invariant mid > 0 ==> mid <= LARGE_INT - 1;\nloop invariant mid > 0 ==> mid = mid - 1;\nloop invariant mid > 0 ==> mid > 0;\nloop invariant mid > 0 ==> mid <= LARGE_INT - 1;\nloop invariant mid > 0 ==> mid = mid - 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int lo, mid, hi;\n    lo = 0;\n    mid = unknown_int();\n    if (!(mid > 0 && mid <= LARGE_INT)) return 0;\n    hi = 2*mid;\n    \n    /*@\n\nloop invariant i2: 0 <= mid <= LARGE_INT;\n\n\n\n\n\n\n\nloop invariant i10: mid > 0 ==> mid > 0;\n*/\nwhile (mid > 0) {\n        lo = lo + 1;\n        hi = hi - 1;\n        mid = mid - 1;\n    }\n    {;\n//@ assert(lo == hi);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant lo <= hi;\nloop invariant hi >= 2*mid;\nloop invariant lo >= 0;\nloop invariant hi <= 2*mid;\nloop invariant mid >= 0;\nloop invariant mid <= LARGE_INT;\nloop invariant lo <= hi;\nloop invariant lo + mid <= hi;\nloop invariant mid <= hi;\nloop invariant mid >= 0;\nloop invariant mid <= LARGE_INT;\nloop invariant lo + mid <= hi;\nloop invariant mid <= hi;\nloop invariant mid >= 0;\nloop invariant mid <= LARGE_INT;\nloop invariant lo <= hi;\nloop invariant lo + mid <= hi;\nloop invariant mid <= hi;\nloop invariant mid >= 0;\nloop invariant mid <= LARGE_INT;\nloop invariant lo <= hi;\nloop invariant lo + mid <= hi;\nloop invariant mid <= hi;\nloop invariant mid >= 0;\nloop invariant mid <= LARGE_INT;\nloop invariant lo <= hi;\nloop invariant lo + mid <= hi;\nloop invariant mid <= hi;\nloop invariant mid >= 0;\nloop invariant mid <= LARGE_INT;\nloop invariant lo <= hi;\nloop invariant lo + mid <= hi;\nloop invariant mid <= hi;\nloop invariant mid >= 0;\nloop invariant mid <= LARGE_INT;\nloop invariant lo <= hi;\nloop invariant lo + mid <= hi;\nloop invariant mid <= hi;\nloop invariant mid >= 0;\nloop invariant mid <= LARGE_INT;\nloop invariant lo <= hi;\nloop invariant lo + mid <= hi;\nloop invariant mid <= hi;\nloop invariant mid >= 0;\nloop invariant mid <= LARGE_INT;\nloop invariant lo <= hi;\nloop invariant lo + mid <= hi;\nloop invariant mid <= hi;\nloop invariant mid >= 0;\nloop invariant mid <= LARGE_INT;\nloop invariant lo <= hi;\nloop invariant lo + mid <= hi;\nloop invariant mid <= hi;\nloop invariant mid >= 0;\nloop invariant mid <= LARGE_INT;\nloop invariant lo <= hi;\nloop invariant lo + mid <= hi;\nloop invariant mid <= hi;\nloop invariant mid >= 0;\nloop invariant mid <= LARGE_INT;\nloop invariant lo <= hi;\nloop invariant lo + mid <= hi;\nloop invariant mid <= hi;\nloop invariant mid >= 0;\nloop invariant mid <= LARGE_INT;\nloop invariant lo <= hi;\nloop invariant lo + mid <= hi;\nloop invariant mid <= hi;\nloop invariant mid >= 0;\nloop invariant mid <= LARGE_INT;\nloop invariant lo <= hi;\nloop invariant lo + mid <= hi;\nloop invariant mid <= hi;\nloop invariant mid >= 0;\nloop invariant mid <= LARGE_INT;\nloop invariant lo <= hi;\nloop invariant lo + mid <= hi;\nloop invariant mid <= hi;\nloop invariant mid >= 0;\nloop invariant mid <= LARGE_INT;\nloop invariant lo <= hi;\nloop invariant lo + mid <= hi;\nloop invariant mid <= hi;\nloop invariant mid >= 0;\nloop invariant mid <= LARGE_INT;\nloop invariant lo <= hi;\nloop invariant lo + mid <= hi;\nloop invariant mid <= hi;\nloop invariant mid >= 0;\nloop invariant mid <= LARGE_INT;\nloop invariant lo <= hi;\nloop invariant lo + mid <= hi;\nloop invariant mid <= hi;\nloop invariant mid >= 0;\nloop invariant mid <= LARGE_INT;\nloop invariant lo <= hi;\nloop invariant lo + mid <= hi;\nloop invariant mid <= hi;\nloop invariant mid >= 0;\nloop invariant mid <= LARGE_INT;\nloop invariant lo <= hi;\nloop invariant lo + mid <= hi;\nloop invariant mid <= hi;\nloop invariant mid >= 0;\nloop invariant mid <= LARGE_INT;\nloop invariant lo <= hi;\nloop invariant lo + mid <= hi;\nloop invariant mid <= hi;\nloop invariant mid >= 0;\nloop invariant mid <= LARGE_INT;\nloop invariant lo <= hi;\nloop invariant lo + mid <= hi;\nloop invariant mid <= hi;\nloop invariant mid >= 0;\nloop invariant mid <= LARGE_INT;\nloop invariant lo <= hi;\nloop invariant lo + mid <= hi;\nloop invariant mid <= hi;\nloop invariant mid >= 0;\nloop invariant mid <= LARGE_INT;\nloop invariant lo <= hi;\nloop invariant lo + mid <= hi;\nloop invariant mid <= hi;\nloop invariant mid >= 0;\nloop invariant mid <= LARGE_INT;\nloop invariant lo <= hi;\nloop invariant lo + mid <= hi;\nloop invariant mid <= hi;\nloop invariant mid >= 0;\nloop invariant mid <= LARGE_INT;\nloop invariant lo <= hi;\nloop invariant lo + mid <= hi;\nloop invariant mid <= hi;\nloop invariant mid >= 0;\nloop invariant mid <= LARGE_INT;\nloop invariant lo <= hi;\nloop invariant lo + mid <= hi;\nloop invariant mid <= hi;\nloop invariant mid >= 0;\nloop invariant mid <= LARGE_INT;\nloop invariant lo <= hi;\nloop invariant lo + mid <= hi;\nloop invariant mid <= hi;\nloop invariant mid >= 0;\nloop invariant mid <= LARGE_INT;\nloop invariant lo <= hi;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int lo, mid, hi;\n    lo = 0;\n    mid = unknown_int();\n    if (!(mid > 0 && mid <= LARGE_INT)) return 0;\n    hi = 2*mid;\n    \n    /*@\n\nloop invariant i2: hi >= 2*mid;\nloop invariant i3: lo >= 0;\n\nloop invariant i5: mid >= 0;\nloop invariant i6: mid <= LARGE_INT;\n\nloop invariant i8: mid <= hi;\n*/\nwhile (mid > 0) {\n        lo = lo + 1;\n        hi = hi - 1;\n        mid = mid - 1;\n    }\n    {;\n//@ assert(lo == hi);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= lo <= mid <= hi <= 2*mid;\nloop invariant mid >= 0 ==> lo >= 0;\nloop invariant mid >= 0 ==> hi >= 2*mid;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int lo, mid, hi;\n    lo = 0;\n    mid = unknown_int();\n    if (!(mid > 0 && mid <= LARGE_INT)) return 0;\n    hi = 2*mid;\n    \n    /*@\n\nloop invariant i2: mid >= 0 ==> lo >= 0;\nloop invariant i3: mid >= 0 ==> hi >= 2*mid;\n*/\nwhile (mid > 0) {\n        lo = lo + 1;\n        hi = hi - 1;\n        mid = mid - 1;\n    }\n    {;\n//@ assert(lo == hi);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= lo <= hi <= 2 * mid;\nloop invariant mid == 0 ==> lo == hi;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int lo, mid, hi;\n    lo = 0;\n    mid = unknown_int();\n    if (!(mid > 0 && mid <= LARGE_INT)) return 0;\n    hi = 2*mid;\n    \n    /*@\n\n\n*/\nwhile (mid > 0) {\n        lo = lo + 1;\n        hi = hi - 1;\n        mid = mid - 1;\n    }\n    {;\n//@ assert(lo == hi);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= lo <= mid;\nloop invariant mid <= hi <= 2*mid;\nloop invariant lo <= hi;\nloop invariant mid >= 0;\nloop invariant mid <= LARGE_INT;\nloop invariant lo <= hi <= 2*mid;\nloop invariant mid >= 0 ==> lo == hi;\nloop invariant mid > 0 ==> lo <= hi;\nloop invariant mid > 0 ==> lo < hi;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int lo, mid, hi;\n    lo = 0;\n    mid = unknown_int();\n    if (!(mid > 0 && mid <= LARGE_INT)) return 0;\n    hi = 2*mid;\n    \n    /*@\n\n\n\nloop invariant i4: mid >= 0;\nloop invariant i5: mid <= LARGE_INT;\n\n\n\n\n*/\nwhile (mid > 0) {\n        lo = lo + 1;\n        hi = hi - 1;\n        mid = mid - 1;\n    }\n    {;\n//@ assert(lo == hi);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= mid <= LARGE_INT;\nloop invariant lo + mid + hi == 2*mid;\nloop invariant lo <= hi;\nloop invariant 0 <= mid <= LARGE_INT;\nloop invariant lo + mid + hi == 2*mid;\nloop invariant lo <= hi;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int lo, mid, hi;\n    lo = 0;\n    mid = unknown_int();\n    if (!(mid > 0 && mid <= LARGE_INT)) return 0;\n    hi = 2*mid;\n    \n    /*@\nloop invariant i1: 0 <= mid <= LARGE_INT;\n\n\n*/\nwhile (mid > 0) {\n        lo = lo + 1;\n        hi = hi - 1;\n        mid = mid - 1;\n    }\n    {;\n//@ assert(lo == hi);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 20: Assignment operators not allowed in annotations.",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int lo, mid, hi;\n    lo = 0;\n    mid = unknown_int();\n    if (!(mid > 0 && mid <= LARGE_INT)) return 0;\n    hi = 2*mid;\n    \n    /*@\nloop invariant i1: 0 <= mid <= LARGE_INT;\nloop invariant i2: lo + mid + hi = 2*mid;\nloop invariant i3: lo + hi = mid;\nloop invariant i4: mid == hi;\nloop invariant i5: mid == lo;\nloop invariant i6: lo >= 0;\nloop invariant i7: hi >= 0;\nloop invariant i8: mid >= 0;\nloop invariant i9: lo <= hi;\nloop invariant i10: hi == 2*mid;\nloop invariant i11: mid >= 1;\nloop invariant i12: mid <= LARGE_INT;\nloop invariant i13: lo + hi == 2*mid;\nloop invariant i14: lo <= mid;\nloop invariant i15: hi >= mid;\nloop invariant i16: lo + hi == mid + mid;\nloop invariant i17: lo <= hi - 1;\nloop invariant i18: hi >= lo + 1;\nloop invariant i19: lo == hi - mid + 1;\nloop invariant i20: hi == lo + mid;\nloop invariant i21: 0 <= lo <= LARGE_INT;\nloop invariant i22: 0 <= hi <= 2 * LARGE_INT;\nloop invariant i23: lo == mid;\nloop invariant i24: hi == 2 * mid;\nloop invariant i25: mid == hi / 2;\nloop invariant i26: mid == hi - lo;\nloop invariant i27: mid == hi - 2 * lo;\nloop invariant i28: mid == hi - 3 * lo;\nloop invariant i29: mid == hi - 4 * lo;\nloop invariant i30: mid == hi - 5 * lo;\nloop invariant i31: mid == hi - 6 * lo;\nloop invariant i32: mid == hi - 7 * lo;\nloop invariant i33: mid == hi - 8 * lo;\nloop invariant i34: mid == hi - 9 * lo;\nloop invariant i35: mid == hi - 10 * lo;\nloop invariant i36: mid == hi - 11 * lo;\nloop invariant i37: mid == hi - 12 * lo;\nloop invariant i38: mid == hi - 13 * lo;\nloop invariant i39: mid == hi - 14 * lo;\nloop invariant i40: mid == hi - 15 * lo;\nloop invariant i41: mid == hi - 16 * lo;\nloop invariant i42: mid == hi - 17 * lo;\nloop invariant i43: mid == hi - 18 * lo;\nloop invariant i44: mid == hi - 19 * lo;\nloop invariant i45: mid == hi - 20 * lo;\nloop invariant i46: mid == hi - 21 * lo;\nloop invariant i47: mid == hi - 22 * lo;\nloop invariant i48: mid == hi - 23 * lo;\nloop invariant i49: mid == hi - 24 * lo;\nloop invariant i50: mid == hi - 25 * lo;\nloop invariant i51: mid == hi - 26 * lo;\nloop invariant i52: mid == hi - 27 * lo;\nloop invariant i53: mid == hi - 28 * lo;\nloop invariant i54: mid == hi - 29 * lo;\nloop invariant i55: mid == hi - 30 * lo;\nloop invariant i56: mid == hi - 31 * lo;\nloop invariant i57: mid == hi - 32 * lo;\nloop invariant i58: mid == hi - 33 * lo;\nloop invariant i59: mid == hi - 34 * lo;\nloop invariant i60: mid == hi - 35 * lo;\nloop invariant i61: mid == hi - 36 * lo;\nloop invariant i62: mid == hi - 37 * lo;\nloop invariant i63: mid == hi - 38 * lo;\nloop invariant i64: mid == hi - 39 * lo;\nloop invariant i65: mid == hi - 40 * lo;\nloop invariant i66: mid == hi - 41 * lo;\nloop invariant i67: mid == hi - 42 * lo;\nloop invariant i68: mid == hi - 43 * lo;\nloop invariant i69: mid == hi - 44 * lo;\nloop invariant i70: mid == hi - 45 * lo;\nloop invariant i71: mid == hi - 46 * lo;\nloop invariant i72: mid == hi - 47 * lo;\nloop invariant i73: mid == hi - 48 * lo;\nloop invariant i74: mid == hi - 49 * lo;\nloop invariant i75: mid == hi - 50 * lo;\nloop invariant i76: mid == hi - 51 * lo;\nloop invariant i77: mid == hi - 52 * lo;\nloop invariant i78: mid == hi - 53 * lo;\nloop invariant i79: mid == hi - 54 * lo;\nloop invariant i80: mid == hi - 55 * lo;\nloop invariant i81: mid == hi - 56 * lo;\nloop invariant i82: mid == hi - 57 * lo;\nloop invariant i83: mid == hi - 58 * lo;\nloop invariant i84: mid == hi - 59 * lo;\nloop invariant i85: mid == hi - 60 * lo;\nloop invariant i86: mid == hi - 61 * lo;\nloop invariant i87: mid == hi - 62 * lo;\nloop invariant i88: mid == hi - 63 * lo;\nloop invariant i89: mid == hi - 64 * lo;\nloop invariant i90: mid == hi - 65 * lo;\nloop invariant i91: mid == hi - 66 * lo;\nloop invariant i92: mid == hi - 67 * lo;\nloop invariant i93: mid == hi - 68 * lo;\nloop invariant i94: mid == hi - 69 * lo;\nloop invariant i95: mid == hi - 70 * lo;\nloop invariant i96: mid == hi - 71 * lo;\nloop invariant i97: mid == hi - 72 * lo;\nloop invariant i98: mid == hi - 73 * lo;\nloop invariant i99: mid == hi - 74 * lo;\nloop invariant i100: mid == hi - 75 * lo;\nloop invariant i101: mid == hi - 76 * lo;\nloop invariant i102: mid == hi - 77 * lo;\nloop invariant i103: mid == hi - 78 * lo;\nloop invariant i104: mid == hi - 79 * lo;\nloop invariant i105: 0 <= lo <= mid;\nloop invariant i106: 0 <= hi <= 2*mid;\nloop invariant i107: 0 <= lo + mid <= hi + mid;\nloop invariant i108: 0 <= hi - mid <= hi;\nloop invariant i109: 0 <= lo + mid <= hi;\nloop invariant i110: lo + mid == hi - mid;\nloop invariant i111: lo == hi;\nloop invariant i112: lo == hi ==> lo == mid;\nloop invariant i113: lo == hi ==> lo == mid ==> lo == 0;\nloop invariant i114: lo == hi ==> lo == mid ==> lo == 0 ==> mid == 0;\nloop invariant i115: lo == hi ==> lo == mid ==> lo == 0 ==> mid == 0 ==> hi == 0;\nloop invariant i116: lo == hi ==> lo == mid ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi;\nloop invariant i117: lo == hi ==> lo == mid ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi ==> lo == 0;\nloop invariant i118: lo == hi ==> lo == mid ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi ==> lo == 0 ==> mid == 0;\nloop invariant i119: lo == hi ==> lo == mid ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi ==> lo == 0 ==> mid == 0 ==> hi == 0;\nloop invariant i120: lo == hi ==> lo == mid ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi;\nloop invariant i121: lo == hi ==> lo == mid ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi ==> lo == 0;\nloop invariant i122: lo == hi ==> lo == mid ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi ==> lo == 0 ==> mid == 0;\nloop invariant i123: lo == hi ==> lo == mid ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi ==> lo == 0 ==> mid == 0 ==> hi == 0;\nloop invariant i124: lo == hi ==> lo == mid ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi;\nloop invariant i125: lo == hi ==> lo == mid ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi ==> lo == 0;\nloop invariant i126: lo == hi ==> lo == mid ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi ==> lo == 0 ==> mid == 0;\nloop invariant i127: lo == hi ==> lo == mid ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi ==> lo == 0 ==> mid == 0 ==> hi == 0;\nloop invariant i128: lo == hi ==> lo == mid ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi;\nloop invariant i129: lo == hi ==> lo == mid ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi ==> lo == 0;\nloop invariant i130: 1 <= lo;\nloop invariant i131: 1 <= mid <= LARGE_INT;\nloop invariant i132: hi == 2*mid - lo;\nloop invariant i133: lo + mid + hi == 2*mid;\nloop invariant i134: mid == (lo + hi) / 2;\nloop invariant i135: lo + hi == 2*mid - 1;\nloop invariant i136: 0 <= lo <= hi;\nloop invariant i137: mid == 0;\nloop invariant i138: 0 <= lo <= 2*mid;\nloop invariant i139: hi = 2*mid - lo;\nloop invariant i140: mid > 0 ==> lo = hi;\nloop invariant i141: mid > 0 ==> lo + mid = hi;\nloop invariant i142: mid > 0 ==> lo = lo + 1;\nloop invariant i143: mid > 0 ==> hi = hi - 1;\nloop invariant i144: mid > 0 ==> mid = mid - 1;\nloop invariant i145: mid > 0 ==> mid <= LARGE_INT - 1;\nloop invariant i146: mid > 0 ==> mid > 0;\nloop invariant i147: hi >= 2*mid;\nloop invariant i148: hi <= 2*mid;\nloop invariant i149: lo + mid <= hi;\nloop invariant i150: mid <= hi;\nloop invariant i151: 0 <= lo <= mid <= hi <= 2*mid;\nloop invariant i152: mid >= 0 ==> lo >= 0;\nloop invariant i153: mid >= 0 ==> hi >= 2*mid;\nloop invariant i154: 0 <= lo <= hi <= 2 * mid;\nloop invariant i155: mid == 0 ==> lo == hi;\nloop invariant i156: mid <= hi <= 2*mid;\nloop invariant i157: lo <= hi <= 2*mid;\nloop invariant i158: mid >= 0 ==> lo == hi;\nloop invariant i159: mid > 0 ==> lo <= hi;\nloop invariant i160: mid > 0 ==> lo < hi;\n*/\nwhile (mid > 0) {\n        lo = lo + 1;\n        hi = hi - 1;\n        mid = mid - 1;\n    }\n    {;\n//@ assert(lo == hi);\n}\n\n    return 0;\n}",
        "combined_annotation_num_solver_calls": 113,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int lo, mid, hi;\n    lo = 0;\n    mid = unknown_int();\n    if (!(mid > 0 && mid <= LARGE_INT)) return 0;\n    hi = 2*mid;\n    \n    /*@\nloop invariant i1: 0 <= mid <= LARGE_INT;\n\n\n\n\nloop invariant i6: lo >= 0;\nloop invariant i7: hi >= 0;\nloop invariant i8: mid >= 0;\nloop invariant i9: lo <= hi;\n\n\nloop invariant i12: mid <= LARGE_INT;\n\n\nloop invariant i15: hi >= mid;\n\n\n\n\n\n\nloop invariant i22: 0 <= hi <= 2 * LARGE_INT;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i107: 0 <= lo + mid <= hi + mid;\nloop invariant i108: 0 <= hi - mid <= hi;\nloop invariant i109: 0 <= lo + mid <= hi;\nloop invariant i110: lo + mid == hi - mid;\n\n\nloop invariant i113: lo == hi ==> lo == mid ==> lo == 0;\nloop invariant i114: lo == hi ==> lo == mid ==> lo == 0 ==> mid == 0;\nloop invariant i115: lo == hi ==> lo == mid ==> lo == 0 ==> mid == 0 ==> hi == 0;\nloop invariant i116: lo == hi ==> lo == mid ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi;\nloop invariant i117: lo == hi ==> lo == mid ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi ==> lo == 0;\nloop invariant i118: lo == hi ==> lo == mid ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi ==> lo == 0 ==> mid == 0;\nloop invariant i119: lo == hi ==> lo == mid ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi ==> lo == 0 ==> mid == 0 ==> hi == 0;\nloop invariant i120: lo == hi ==> lo == mid ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi;\nloop invariant i121: lo == hi ==> lo == mid ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi ==> lo == 0;\nloop invariant i122: lo == hi ==> lo == mid ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi ==> lo == 0 ==> mid == 0;\nloop invariant i123: lo == hi ==> lo == mid ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi ==> lo == 0 ==> mid == 0 ==> hi == 0;\nloop invariant i124: lo == hi ==> lo == mid ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi;\nloop invariant i125: lo == hi ==> lo == mid ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi ==> lo == 0;\nloop invariant i126: lo == hi ==> lo == mid ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi ==> lo == 0 ==> mid == 0;\nloop invariant i127: lo == hi ==> lo == mid ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi ==> lo == 0 ==> mid == 0 ==> hi == 0;\nloop invariant i128: lo == hi ==> lo == mid ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi;\nloop invariant i129: lo == hi ==> lo == mid ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi ==> lo == 0 ==> mid == 0 ==> hi == 0 ==> lo == hi ==> lo == 0;\n\n\n\n\n\n\nloop invariant i136: 0 <= lo <= hi;\n\n\n\n\n\n\n\n\n\nloop invariant i146: mid > 0 ==> mid > 0;\nloop invariant i147: hi >= 2*mid;\n\nloop invariant i149: lo + mid <= hi;\nloop invariant i150: mid <= hi;\n\nloop invariant i152: mid >= 0 ==> lo >= 0;\nloop invariant i153: mid >= 0 ==> hi >= 2*mid;\n\nloop invariant i155: mid == 0 ==> lo == hi;\n\n\n\nloop invariant i159: mid > 0 ==> lo <= hi;\nloop invariant i160: mid > 0 ==> lo < hi;\n*/\nwhile (mid > 0) {\n        lo = lo + 1;\n        hi = hi - 1;\n        mid = mid - 1;\n    }\n    {;\n//@ assert(lo == hi);\n}\n\n    return 0;\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/split.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c"
        ],
        "skipped": [],
        "total": 48,
        "success_count": 40,
        "failure_count": 8,
        "success_rate": 0.8333333333333334
    }
}