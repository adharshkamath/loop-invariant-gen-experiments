{
    "logs": {
        "file": "../dataset/loop_invariants/accelerating_invariant_generation/cav/37.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1(){\n    int x; return x;\n}\n\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main() {\n  int x= 0;\n  int m=0;\n  int n = unknown1();\n  while(x<=n-1) {\n     if(unknown1()) {\n\tm = x;\n     }\n     x= x+1;\n  }\n  if(x < n)\n    \nreturn;\n\n  if(n>=1 && (m <= -1 || m >= n))\n  {goto ERROR; { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}}\n\n}",
        "success": false,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m <= x;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= m <= n;\nloop invariant m <= x;\nloop invariant m <= n;\nloop invariant x >= 0;\nloop invariant m >= 0;\nloop invariant m <= n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant n >= 1;\nloop invariant m >= 0;\nloop invariant m <= x;\nloop invariant m <= n;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant (x == n) ==> (m <= -1 || m >= n);\nloop invariant (x < n) ==> (m >= 0 && m < n);\nloop invariant (x < n) ==> (m == x);\nloop invariant (x < n) ==> (m >= 0 && m < x);\nloop invariant (x < n) ==> (m == 0 || m == x - 1);\nloop invariant (x < n) ==> (m == x);\nloop invariant (x < n) ==> (m == 0 || m == x - 1);\nloop invariant (x < n) ==> (m == x);\nloop invariant (x < n) ==> (m == 0 || m == x - 1);\nloop invariant (x < n) ==> (m == x);\nloop invariant (x < n) ==> (m == 0 || m == x - 1);\nloop invariant (x < n) ==> (m == x);\nloop invariant (x < n) ==> (m == 0 || m == x - 1);\nloop invariant (x < n) ==> (m == x);\nloop invariant (x < n) ==> (m == 0 || m == x - 1);\nloop invariant (x < n) ==> (m == x);\nloop invariant (x < n) ==> (m == 0 || m == x - 1);\nloop invariant (x < n) ==> (m == x);\nloop invariant (x < n) ==> (m == 0 || m == x - 1);\nloop invariant (x < n) ==> (m == x);\nloop invariant (x < n) ==> (m == 0 || m == x - 1);\nloop invariant (x < n) ==> (m == x);\nloop invariant (x < n) ==> (m == 0 || m == x - 1);\nloop invariant (x < n) ==> (m == x);\nloop invariant (x < n) ==> (m == 0 || m == x - 1);\nloop invariant (x < n) ==> (m == x);\nloop invariant (x < n) ==> (m == 0 || m == x - 1);\nloop invariant (x < n) ==> (m == x);\nloop invariant (x < n) ==> (m == 0 || m == x - 1);\nloop invariant (x < n) ==> (m == x);\nloop invariant (x < n) ==> (m == 0 || m == x - 1);\nloop invariant (x < n) ==> (m == x);\nloop invariant (x < n) ==> (m == 0 || m == x - 1);\nloop invariant (x < n) ==> (m == x);\nloop invariant (x < n) ==> (m == 0 || m == x - 1);\nloop invariant (x < n) ==> (m == x);\nloop invariant (x < n) ==> (m == 0 || m == x - 1);\nloop invariant (x < n) ==> (m == x);\nloop invariant (x < n) ==> (m == 0 || m == x - 1);\nloop invariant (x < n) ==> (m == x);\nloop invariant (x < n) ==> (m == 0 || m == x - 1);\nloop invariant (x < n) ==> (m == x);\nloop invariant (x < n) ==> (m == 0 || m == x - 1);\nloop invariant (x < n) ==> (m == x);\nloop invariant (x < n) ==> (m == 0 || m == x - 1);\nloop invariant (x < n) ==> (m == x);\nloop invariant (x < n) ==> (m == 0 || m == x - 1);\nloop invariant (x < n) ==> (m == x);\nloop invariant (x < n) ==> (m == 0 || m == x - 1);\nloop invariant (x < n) ==> (m == x);\nloop invariant (x < n) ==> (m == 0 || m == x - 1);\nloop invariant (x < n) ==> (m == x);\nloop invariant (x < n) ==> (m == 0 || m == x - 1);\nloop invariant (x < n) ==> (m == x);\nloop invariant (x < n) ==> (m == 0 || m == x - 1);\nloop invariant (x < n) ==> (m == x);\nloop invariant (x < n) ==> (m == 0 || m == x - 1);\nloop invariant (x < n) ==> (m == x);\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n; loop invariant m >= 0; loop invariant m <= n; loop invariant (m = x) == (x <= n-1); loop invariant m >= 0; loop invariant m <= n; loop invariant (m = x) == (x <= n-1); loop invariant m >= 0; loop invariant m <= n; loop invariant (m = x) == (x <= n-1); loop invariant m >= 0; loop invariant m <= n; loop invariant (m = x) == (x <= n-1); loop invariant m >= 0; loop invariant m <= n; loop invariant (m = x) == (x <= n-1); loop invariant m >= 0; loop invariant m <= n; loop invariant (m = x) == (x <= n-1); loop invariant m >= 0; loop invariant m <= n; loop invariant (m = x) == (x <= n-1); loop invariant m >= 0; loop invariant m <= n; loop invariant (m = x) == (x <= n-1); loop invariant m >= 0; loop invariant m <= n; loop invariant (m = x) == (x <= n-1); loop invariant m >= 0; loop invariant m <= n; loop invariant (m = x) == (x <= n-1); loop invariant m >= 0; loop invariant m <= n; loop invariant (m = x) == (x <= n-1); loop invariant m >= 0; loop invariant m <= n; loop invariant (m = x) == (x <= n-1); loop invariant m >= 0; loop invariant m <= n; loop invariant (m = x) == (x <= n-1); loop invariant m >= 0; loop invariant m <= n; loop invariant (m = x) == (x <= n-1); loop invariant m >= 0; loop invariant m <= n; loop invariant (m = x) == (x <= n-1); loop invariant m >= 0; loop invariant m <= n; loop invariant (m = x) == (x <= n-1); loop invariant m >= 0; loop invariant m <= n; loop invariant (m = x) == (x <= n-1); loop invariant m >= 0; loop invariant m <= n; loop invariant (m = x) == (x <= n-1); loop invariant m >= 0; loop invariant m <= n; loop invariant (m = x) == (x <= n-1); loop invariant m >= 0; loop invariant m <= n; loop invariant (m = x) == (x <= n-1); loop invariant m >= 0; loop invariant m <= n; loop invariant (m = x) == (x <= n-1); loop invariant m >= 0; loop invariant m <= n; loop invariant (m = x) == (x <= n-1); loop invariant m >= 0; loop invariant m <= n; loop invariant (m = x) == (x <= n-1); loop invariant m >= 0; loop invariant m <= n; loop invariant (m = x) == (x <= n-1); loop invariant m >= 0; loop invariant m <= n; loop invariant (m = x) == (x <= n-1); loop invariant m >= 0; loop invariant m <= n; loop invariant (m = x) == (x <= n-1); loop invariant m >= 0; loop invariant m <= n; loop invariant (m = x) == (x <= n-1); loop invariant m >= 0; loop invariant m <= n; loop invariant (m = x) == (x <= n-1); loop invariant m >= 0; loop invariant m <= n; loop invariant (m = x) == (x <= n-1); loop invariant m >= 0; loop invariant m <= n; loop invariant (m = x) == (x <= n-1); loop invariant m >= 0; loop invariant m <= n; loop invariant (m = x) == (x <= n-1); loop invariant m >= 0; loop invariant m <= n; loop invariant (m = x) == (x <= n-1); loop invariant m >= 0; loop invariant m <= n; loop invariant (m = x) == (x <= n-1); loop invariant m >= 0; loop invariant m <= n; loop invariant (m = x) == (x <= n-1); loop invariant m >= 0; loop invariant m <= n; loop invariant (m = x) == (x <= n-1); loop invariant m >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n && n >= 1;\nloop invariant m == -1 || (m >= 0 && m < n);\nloop invariant n >= 1 ==> (0 <= m && m < n);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant (m <= x && x <= n) ==> m <= n;\nloop invariant (m <= x && x <= n) ==> m >= 0;\nloop invariant (m <= x && x <= n) ==> m <= n-1;\nloop invariant (m <= x && x <= n) ==> m <= n-2;\nloop invariant (m <= x && x <= n) ==> m <= n-3;\nloop invariant (m <= x && x <= n) ==> m <= n-4;\nloop invariant (m <= x && x <= n) ==> m <= n-5;\nloop invariant (m <= x && x <= n) ==> m <= n-6;\nloop invariant (m <= x && x <= n) ==> m <= n-7;\nloop invariant (m <= x && x <= n) ==> m <= n-8;\nloop invariant (m <= x && x <= n) ==> m <= n-9;\nloop invariant (m <= x && x <= n) ==> m <= n-10;\nloop invariant (m <= x && x <= n) ==> m <= n-11;\nloop invariant (m <= x && x <= n) ==> m <= n-12;\nloop invariant (m <= x && x <= n) ==> m <= n-13;\nloop invariant (m <= x && x <= n) ==> m <= n-14;\nloop invariant (m <= x && x <= n) ==> m <= n-15;\nloop invariant (m <= x && x <= n) ==> m <= n-16;\nloop invariant (m <= x && x <= n) ==> m <= n-17;\nloop invariant (m <= x && x <= n) ==> m <= n-18;\nloop invariant (m <= x && x <= n) ==> m <= n-19;\nloop invariant (m <= x && x <= n) ==> m <= n-20;\nloop invariant (m <= x && x <= n) ==> m <= n-21;\nloop invariant (m <= x && x <= n) ==> m <= n-22;\nloop invariant (m <= x && x <= n) ==> m <= n-23;\nloop invariant (m <= x && x <= n) ==> m <= n-24;\nloop invariant (m <= x && x <= n) ==> m <= n-25;\nloop invariant (m <= x && x <= n) ==> m <= n-26;\nloop invariant (m <= x && x <= n) ==> m <= n-27;\nloop invariant (m <= x && x <= n) ==> m <= n-28;\nloop invariant (m <= x && x <= n) ==> m <= n-29;\nloop invariant (m <= x && x <= n) ==> m <= n-30;\nloop invariant (m <= x && x <= n) ==> m <= n-31;\nloop invariant (m <= x && x <= n) ==> m <= n-32;\nloop invariant (m <= x && x <= n) ==> m <= n-33;\nloop invariant (m <= x && x <= n) ==> m <= n-34;\nloop invariant (m <= x && x <= n) ==> m <= n-35;\nloop invariant (m <= x && x <= n) ==> m <= n-36;\nloop invariant (m <= x && x <= n) ==> m <= n-37;\nloop invariant (m <= x && x <= n) ==> m <= n-38;\nloop invariant (m <= x && x <= n) ==> m <= n-39;\nloop invariant (m <= x && x <= n) ==> m <= n-40;\nloop invariant (m <= x && x <= n) ==> m <= n-41;\nloop invariant (m <= x && x <= n) ==> m <= n-42;\nloop invariant (m <= x && x <= n) ==> m <= n-43;\nloop invariant (m <= x && x <= n) ==> m <= n-44;\nloop invariant (m <= x && x <= n) ==> m <= n-45;\nloop invariant (m <= x && x <= n) ==> m <= n-46;\nloop invariant (m <= x && x <= n) ==> m <= n-47;\nloop invariant (m <= x && x <= n) ==> m <= n-48;\nloop invariant (m <= x && x <= n) ==> m <= n-49;\nloop invariant (m <= x && x <= n) ==> m <= n-50;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= n;\nloop invariant 0 <= m <= x;\nloop invariant m <= x - 1 || m >= x;\nloop invariant m <= -1 || m + 1 >= n || (n >= 1 && (m <= x - 1 || m >= x));\nloop invariant m <= -1 || m >= n || (n >= 1 && (m <= x - 1 || m >= x));\nloop invariant m <= -1 || m >= n || (n >= 1 && (m <= x - 1 || m >= x));\nloop invariant m <= -1 || m >= n || (n >= 1 && (m <= x - 1 || m >= x));\nloop invariant m <= -1 || m >= n || (n >= 1 && (m <= x - 1 || m >= x));\nloop invariant m <= -1 || m >= n || (n >= 1 && (m <= x - 1 || m >= x));\nloop invariant m <= -1 || m >= n || (n >= 1 && (m <= x - 1 || m >= x));\nloop invariant m <= -1 || m >= n || (n >= 1 && (m <= x - 1 || m >= x));\nloop invariant m <= -1 || m >= n || (n >= 1 && (m <= x - 1 || m >= x));\nloop invariant m <= -1 || m >= n || (n >= 1 && (m <= x - 1 || m >= x));\nloop invariant m <= -1 || m >= n || (n >= 1 && (m <= x - 1 || m >= x));\nloop invariant m <= -1 || m >= n || (n >= 1 && (m <= x - 1 || m >= x));\nloop invariant m <= -1 || m >= n || (n >= 1 && (m <= x - 1 || m >= x));\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= m <= n;\nloop invariant (unknown1() ==> m == x);\nloop invariant (unknown1() ==> m >= x);\nloop invariant (unknown1() ==> n - 1 >= x);\nloop invariant (unknown1() ==> m >= 0);\nloop invariant (unknown1() ==> m <= x);\nloop invariant (unknown1() ==> m <= n);\nloop invariant (unknown1() ==> m <= n);\nloop invariant (unknown1() ==> m >= -1);\nloop invariant (unknown1() ==> n >= 1);\nloop invariant (unknown1() ==> m >= 0);\nloop invariant (unknown1() ==> m <= x);\nloop invariant (unknown1() ==> m <= n);\nloop invariant (unknown1() ==> m >= 0);\nloop invariant (unknown1() ==> m <= x);\nloop invariant (unknown1() ==> m <= n);\nloop invariant (unknown1() ==> m >= 0);\nloop invariant (unknown1() ==> m <= x);\nloop invariant (unknown1() ==> m <= n);\nloop invariant (unknown1() ==> m >= 0);\nloop invariant (unknown1() ==> m <= x);\nloop invariant (unknown1() ==> m <= n);\nloop invariant (unknown1() ==> m >= 0);\nloop invariant (unknown1() ==> m <= x);\nloop invariant (unknown1() ==> m <= n);\nloop invariant (unknown1() ==> m >= 0);\nloop invariant (unknown1() ==> m <= x);\nloop invariant (unknown1() ==> m <= n);\nloop invariant (unknown1() ==> m >= 0);\nloop invariant (unknown1() ==> m <= x);\nloop invariant (unknown1() ==> m <= n);\nloop invariant (unknown1() ==> m >= 0);\nloop invariant (unknown1() ==> m <= x);\nloop invariant (unknown1() ==> m <= n);\nloop invariant (unknown1() ==> m >= 0);\nloop invariant (unknown1() ==> m <= x);\nloop invariant (unknown1() ==> m <= n);\nloop invariant (unknown1() ==> m >= 0);\nloop invariant (unknown1() ==> m <= x);\nloop invariant (unknown1() ==> m <= n);\nloop invariant (unknown1() ==> m >= 0);\nloop invariant (unknown1() ==> m <= x);\nloop invariant (unknown1() ==> m <= n);\nloop invariant (unknown1() ==> m >= 0);\nloop invariant (unknown1() ==> m <= x);\nloop invariant (unknown1() ==> m <= n);\nloop invariant (unknown1() ==> m >= 0);\nloop invariant (unknown1() ==> m <= x);\nloop invariant (unknown1() ==> m <= n);\nloop invariant (unknown1() ==> m >= 0);\nloop invariant (unknown1() ==> m <= x);\nloop invariant (unknown1() ==> m <= n);\nloop invariant (unknown1() ==> m >= 0);\nloop invariant (unknown1() ==> m <= x);\nloop invariant (unknown1() ==> m <= n);\nloop invariant (unknown1() ==> m >= 0);\nloop invariant (unknown1() ==> m <= x);\nloop invariant (unknown1() ==> m <= n);\nloop invariant (unknown1() ==> m >= 0);\nloop invariant (unknown1() ==> m <= x);\nloop invariant (unknown1() ==> m <= n);\nloop invariant (unknown1() ==> m >= 0);\nloop invariant (unknown1() ==> m <= x);\nloop invariant (unknown1() ==> m <= n);\nloop invariant (unknown1() ==> m >= 0);\nloop invariant (unknown1() ==> x <= n-1);\nloop invariant (unknown1() ==> x <= n);\nloop invariant (unknown1() ==> m <= x);\nloop invariant (unknown1() ==> m <= n);\nloop invariant (unknown1() ==> m >= 0);\nloop invariant (n >= 1 ==> m >= 0);\nloop invariant (n >= 1 ==> m <= n);\nloop invariant (n >= 1 ==> m >= -1);\nloop invariant (n >= 1 ==> m <= x);\nloop invariant (n >= 1 ==> m <= n);\nloop invariant (n >= 1 ==> m >= 0);\nloop invariant (n >= 1 ==> m <= x);\nloop invariant (n >= 1 ==> m <= n);\nloop invariant (n >= 1 ==> m >= 0);\nloop invariant (n >= 1 ==> m <= x);\nloop invariant (n >= 1 ==> m <= n);\nloop invariant (n >= 1 ==> m >= 0);\nloop invariant (n >= 1 ==> m <= x);\nloop invariant (n >= 1 ==> m <= n);\nloop invariant (n >= 1 ==> m >= 0);\n*/\n```",
            "```\n/*@\nloop invariant ( 0 <= x <= n - 1 );\nloop invariant ( 0 <= m <= n - 1 );\nloop invariant ( x <= n );\nloop invariant ( m <= n );\nloop invariant ( m <= x );\nloop invariant ( m <= n - 1 );\nloop invariant ( m <= x - 1 );\nloop invariant ( m <= x - 1 || m == -1 );\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m <= (x - 1);\nloop invariant (x < n ==> n >= 1 && (m <= -1 || m >= n));\nloop invariant (x < n ==> (n >= 1 && (m <= -1 || m >= n)) ==> (\\valid(&m)));\nloop invariant (x < n ==> (\\valid(&m) ==> m <= (x - 1)));\nloop invariant (x < n ==> (\\valid(&m) ==> m <= (x - 1) ==> m <= (x - 1)));\nloop invariant (x < n ==> (\\valid(&m) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1)));\nloop invariant (x < n ==> (\\valid(&m) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1)));\nloop invariant (x < n ==> (\\valid(&m) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1)));\nloop invariant (x < n ==> (\\valid(&m) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1)));\nloop invariant (x < n ==> (\\valid(&m) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1)));\nloop invariant (x < n ==> (\\valid(&m) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1)));\nloop invariant (x < n ==> (\\valid(&m) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1)));\nloop invariant (x < n ==> (\\valid(&m) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1)));\nloop invariant (x < n ==> (\\valid(&m) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1)));\nloop invariant (x < n ==> (\\valid(&m) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1)));\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n; loop invariant 0 <= m <= n; loop invariant m <= x; loop invariant x <= n; loop invariant m <= n; loop invariant 0 <= n; loop invariant n <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n - 1;\nloop invariant m <= x;\nloop invariant m <= n - 1;\nloop invariant m >= -1;\nloop invariant m <= n - 1;\nloop invariant m >= -1;\nloop invariant m <= n - 1;\nloop invariant m >= -1;\nloop invariant m <= n - 1;\nloop invariant m >= -1;\nloop invariant m <= n - 1;\nloop invariant m >= -1;\nloop invariant m <= n - 1;\nloop invariant m >= -1;\nloop invariant m <= n - 1;\nloop invariant m >= -1;\nloop invariant m <= n - 1;\nloop invariant m >= -1;\nloop invariant m <= n - 1;\nloop invariant m >= -1;\nloop invariant m <= n - 1;\nloop invariant m >= -1;\nloop invariant m <= n - 1;\nloop invariant m >= -1;\nloop invariant m <= n - 1;\nloop invariant m >= -1;\nloop invariant m <= n - 1;\nloop invariant m >= -1;\nloop invariant m <= n - 1;\nloop invariant m >= -1;\nloop invariant m <= n - 1;\nloop invariant m >= -1;\nloop invariant m <= n - 1;\nloop invariant m >= -1;\nloop invariant m <= n - 1;\nloop invariant m >= -1;\nloop invariant m <= n - 1;\nloop invariant m >= -1;\nloop invariant m <= n - 1;\nloop invariant m >= -1;\nloop invariant m <= n - 1;\nloop invariant m >= -1;\nloop invariant m <= n - 1;\nloop invariant m >= -1;\nloop invariant m <= n - 1;\nloop invariant m >= -1;\nloop invariant m <= n - 1;\nloop invariant m >= -1;\nloop invariant m <= n - 1;\nloop invariant m >= -1;\nloop invariant m <= n - 1;\nloop invariant m >= -1;\nloop invariant m <= n - 1;\nloop invariant m >= -1;\nloop invariant m <= n - 1;\nloop invariant m >= -1;\nloop invariant m <= n - 1;\nloop invariant m >= -1;\nloop invariant m <= n - 1;\nloop invariant m >= -1;\nloop invariant m <= n - 1;\nloop invariant m >= -1;\nloop invariant m <= n - 1;\nloop invariant m >= -1;\nloop invariant m <= n - 1;\nloop invariant m >= -1;\nloop invariant m <= n - 1;\nloop invariant m >= -1;\nloop invariant m <= n - 1;\nloop invariant m >= -1;\nloop invariant m <= n - 1;\nloop invariant m >= -1;\nloop invariant m <= n - 1;\nloop invariant m >= -1;\nloop invariant m <= n - 1;\nloop invariant m >= -1;\nloop invariant m <= n - 1;\nloop invariant m >= -1;\nloop invariant m <= n - 1;\nloop invariant m >= -1;\nloop invariant m <= n - 1;\nloop invariant m >= -1;\nloop invariant m <= n - 1;\nloop invariant m >= -1;\nloop invariant m <= n - 1;\nloop invariant m >= -1;\nloop invariant m <= n - 1;\nloop invariant m >= -1;\nloop invariant m <= n - 1;\nloop invariant m >= -1;\nloop invariant m <= n - 1;\nloop invariant m >= -1;\nloop invariant m <= n - 1;\nloop invariant m >= -1;\nloop invariant m <= n - 1;\nloop invariant m >= -1;\nloop invariant m <= n - 1;\nloop invariant m >= -1;\nloop invariant m <= n - 1;\nloop invariant m >= -1;\nloop invariant m <= n - 1;\nloop invariant m >= -1;\nloop invariant m <= n - 1;\nloop invariant m >= -1;\nloop invariant m <= n - 1;\nloop invariant m >= -1;\nloop invariant m <= n - 1;\nloop invariant m >= -1;\nloop invariant m <= n - 1;\nloop invariant m >= -1;\nloop invariant m <= n - 1;\nloop invariant m >= -1;\nloop invariant m <= n - 1;\nloop invariant m >= -1;\nloop invariant m <= n - 1;\nloop invariant m >= -1;\nloop invariant m <= n - 1;\nloop invariant m >= -1;\nloop invariant m <= n - 1;\nloop invariant m >= -1;\nloop invariant m <= n - 1;\nloop invariant m >= -1;\nloop invariant m <= n - 1;\nloop invariant m >= -1;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m <= x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1(){\n    int x; return x;\n}\n\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main() {\n  int x= 0;\n  int m=0;\n  int n = unknown1();\n  /*@\n\nloop invariant i2: m <= x;\n*/\nwhile(x<=n-1) {\n     if(unknown1()) {\n\tm = x;\n     }\n     x= x+1;\n  }\n  if(x < n)\n    \nreturn;\n\n  if(n>=1 && (m <= -1 || m >= n))\n  {goto ERROR; { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= m <= n;\nloop invariant m <= x;\nloop invariant m <= n;\nloop invariant x >= 0;\nloop invariant m >= 0;\nloop invariant m <= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1(){\n    int x; return x;\n}\n\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main() {\n  int x= 0;\n  int m=0;\n  int n = unknown1();\n  /*@\n\n\nloop invariant i3: m <= x;\n\nloop invariant i5: x >= 0;\nloop invariant i6: m >= 0;\n*/\nwhile(x<=n-1) {\n     if(unknown1()) {\n\tm = x;\n     }\n     x= x+1;\n  }\n  if(x < n)\n    \nreturn;\n\n  if(n>=1 && (m <= -1 || m >= n))\n  {goto ERROR; { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant n >= 1;\nloop invariant m >= 0;\nloop invariant m <= x;\nloop invariant m <= n;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\nloop invariant m <= x - 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1(){\n    int x; return x;\n}\n\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main() {\n  int x= 0;\n  int m=0;\n  int n = unknown1();\n  /*@\n\n\nloop invariant i3: m >= 0;\nloop invariant i4: m <= x;\n\n\n*/\nwhile(x<=n-1) {\n     if(unknown1()) {\n\tm = x;\n     }\n     x= x+1;\n  }\n  if(x < n)\n    \nreturn;\n\n  if(n>=1 && (m <= -1 || m >= n))\n  {goto ERROR; { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1(){\n    int x; return x;\n}\n\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main() {\n  int x= 0;\n  int m=0;\n  int n = unknown1();\n  /*@\n\n*/\nwhile(x<=n-1) {\n     if(unknown1()) {\n\tm = x;\n     }\n     x= x+1;\n  }\n  if(x < n)\n    \nreturn;\n\n  if(n>=1 && (m <= -1 || m >= n))\n  {goto ERROR; { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant (x == n) ==> (m <= -1 || m >= n);\nloop invariant (x < n) ==> (m >= 0 && m < n);\nloop invariant (x < n) ==> (m == x);\nloop invariant (x < n) ==> (m >= 0 && m < x);\nloop invariant (x < n) ==> (m == 0 || m == x - 1);\nloop invariant (x < n) ==> (m == x);\nloop invariant (x < n) ==> (m == 0 || m == x - 1);\nloop invariant (x < n) ==> (m == x);\nloop invariant (x < n) ==> (m == 0 || m == x - 1);\nloop invariant (x < n) ==> (m == x);\nloop invariant (x < n) ==> (m == 0 || m == x - 1);\nloop invariant (x < n) ==> (m == x);\nloop invariant (x < n) ==> (m == 0 || m == x - 1);\nloop invariant (x < n) ==> (m == x);\nloop invariant (x < n) ==> (m == 0 || m == x - 1);\nloop invariant (x < n) ==> (m == x);\nloop invariant (x < n) ==> (m == 0 || m == x - 1);\nloop invariant (x < n) ==> (m == x);\nloop invariant (x < n) ==> (m == 0 || m == x - 1);\nloop invariant (x < n) ==> (m == x);\nloop invariant (x < n) ==> (m == 0 || m == x - 1);\nloop invariant (x < n) ==> (m == x);\nloop invariant (x < n) ==> (m == 0 || m == x - 1);\nloop invariant (x < n) ==> (m == x);\nloop invariant (x < n) ==> (m == 0 || m == x - 1);\nloop invariant (x < n) ==> (m == x);\nloop invariant (x < n) ==> (m == 0 || m == x - 1);\nloop invariant (x < n) ==> (m == x);\nloop invariant (x < n) ==> (m == 0 || m == x - 1);\nloop invariant (x < n) ==> (m == x);\nloop invariant (x < n) ==> (m == 0 || m == x - 1);\nloop invariant (x < n) ==> (m == x);\nloop invariant (x < n) ==> (m == 0 || m == x - 1);\nloop invariant (x < n) ==> (m == x);\nloop invariant (x < n) ==> (m == 0 || m == x - 1);\nloop invariant (x < n) ==> (m == x);\nloop invariant (x < n) ==> (m == 0 || m == x - 1);\nloop invariant (x < n) ==> (m == x);\nloop invariant (x < n) ==> (m == 0 || m == x - 1);\nloop invariant (x < n) ==> (m == x);\nloop invariant (x < n) ==> (m == 0 || m == x - 1);\nloop invariant (x < n) ==> (m == x);\nloop invariant (x < n) ==> (m == 0 || m == x - 1);\nloop invariant (x < n) ==> (m == x);\nloop invariant (x < n) ==> (m == 0 || m == x - 1);\nloop invariant (x < n) ==> (m == x);\nloop invariant (x < n) ==> (m == 0 || m == x - 1);\nloop invariant (x < n) ==> (m == x);\nloop invariant (x < n) ==> (m == 0 || m == x - 1);\nloop invariant (x < n) ==> (m == x);\nloop invariant (x < n) ==> (m == 0 || m == x - 1);\nloop invariant (x < n) ==> (m == x);\nloop invariant (x < n) ==> (m == 0 || m == x - 1);\nloop invariant (x < n) ==> (m == x);\nloop invariant (x < n) ==> (m == 0 || m == x - 1);\nloop invariant (x < n) ==> (m == x);\nloop invariant (x < n) ==> (m == 0 || m == x - 1);\nloop invariant (x < n) ==> (m == x);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1(){\n    int x; return x;\n}\n\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main() {\n  int x= 0;\n  int m=0;\n  int n = unknown1();\n  /*@\n\n\n\n\n\n\n*/\nwhile(x<=n-1) {\n     if(unknown1()) {\n\tm = x;\n     }\n     x= x+1;\n  }\n  if(x < n)\n    \nreturn;\n\n  if(n>=1 && (m <= -1 || m >= n))\n  {goto ERROR; { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1(){\n    int x; return x;\n}\n\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main() {\n  int x= 0;\n  int m=0;\n  int n = unknown1();\n  /*@\n\n*/\nwhile(x<=n-1) {\n     if(unknown1()) {\n\tm = x;\n     }\n     x= x+1;\n  }\n  if(x < n)\n    \nreturn;\n\n  if(n>=1 && (m <= -1 || m >= n))\n  {goto ERROR; { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n; loop invariant m >= 0; loop invariant m <= n; loop invariant (m = x) == (x <= n-1); loop invariant m >= 0; loop invariant m <= n; loop invariant (m = x) == (x <= n-1); loop invariant m >= 0; loop invariant m <= n; loop invariant (m = x) == (x <= n-1); loop invariant m >= 0; loop invariant m <= n; loop invariant (m = x) == (x <= n-1); loop invariant m >= 0; loop invariant m <= n; loop invariant (m = x) == (x <= n-1); loop invariant m >= 0; loop invariant m <= n; loop invariant (m = x) == (x <= n-1); loop invariant m >= 0; loop invariant m <= n; loop invariant (m = x) == (x <= n-1); loop invariant m >= 0; loop invariant m <= n; loop invariant (m = x) == (x <= n-1); loop invariant m >= 0; loop invariant m <= n; loop invariant (m = x) == (x <= n-1); loop invariant m >= 0; loop invariant m <= n; loop invariant (m = x) == (x <= n-1); loop invariant m >= 0; loop invariant m <= n; loop invariant (m = x) == (x <= n-1); loop invariant m >= 0; loop invariant m <= n; loop invariant (m = x) == (x <= n-1); loop invariant m >= 0; loop invariant m <= n; loop invariant (m = x) == (x <= n-1); loop invariant m >= 0; loop invariant m <= n; loop invariant (m = x) == (x <= n-1); loop invariant m >= 0; loop invariant m <= n; loop invariant (m = x) == (x <= n-1); loop invariant m >= 0; loop invariant m <= n; loop invariant (m = x) == (x <= n-1); loop invariant m >= 0; loop invariant m <= n; loop invariant (m = x) == (x <= n-1); loop invariant m >= 0; loop invariant m <= n; loop invariant (m = x) == (x <= n-1); loop invariant m >= 0; loop invariant m <= n; loop invariant (m = x) == (x <= n-1); loop invariant m >= 0; loop invariant m <= n; loop invariant (m = x) == (x <= n-1); loop invariant m >= 0; loop invariant m <= n; loop invariant (m = x) == (x <= n-1); loop invariant m >= 0; loop invariant m <= n; loop invariant (m = x) == (x <= n-1); loop invariant m >= 0; loop invariant m <= n; loop invariant (m = x) == (x <= n-1); loop invariant m >= 0; loop invariant m <= n; loop invariant (m = x) == (x <= n-1); loop invariant m >= 0; loop invariant m <= n; loop invariant (m = x) == (x <= n-1); loop invariant m >= 0; loop invariant m <= n; loop invariant (m = x) == (x <= n-1); loop invariant m >= 0; loop invariant m <= n; loop invariant (m = x) == (x <= n-1); loop invariant m >= 0; loop invariant m <= n; loop invariant (m = x) == (x <= n-1); loop invariant m >= 0; loop invariant m <= n; loop invariant (m = x) == (x <= n-1); loop invariant m >= 0; loop invariant m <= n; loop invariant (m = x) == (x <= n-1); loop invariant m >= 0; loop invariant m <= n; loop invariant (m = x) == (x <= n-1); loop invariant m >= 0; loop invariant m <= n; loop invariant (m = x) == (x <= n-1); loop invariant m >= 0; loop invariant m <= n; loop invariant (m = x) == (x <= n-1); loop invariant m >= 0; loop invariant m <= n; loop invariant (m = x) == (x <= n-1); loop invariant m >= 0; loop invariant m <= n; loop invariant (m = x) == (x <= n-1); loop invariant m >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1(){\n    int x; return x;\n}\n\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main() {\n  int x= 0;\n  int m=0;\n  int n = unknown1();\n  /*@\n\n*/\nwhile(x<=n-1) {\n     if(unknown1()) {\n\tm = x;\n     }\n     x= x+1;\n  }\n  if(x < n)\n    \nreturn;\n\n  if(n>=1 && (m <= -1 || m >= n))\n  {goto ERROR; { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n && n >= 1;\nloop invariant m == -1 || (m >= 0 && m < n);\nloop invariant n >= 1 ==> (0 <= m && m < n);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1(){\n    int x; return x;\n}\n\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main() {\n  int x= 0;\n  int m=0;\n  int n = unknown1();\n  /*@\n\n\n\n*/\nwhile(x<=n-1) {\n     if(unknown1()) {\n\tm = x;\n     }\n     x= x+1;\n  }\n  if(x < n)\n    \nreturn;\n\n  if(n>=1 && (m <= -1 || m >= n))\n  {goto ERROR; { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant (m <= x && x <= n) ==> m <= n;\nloop invariant (m <= x && x <= n) ==> m >= 0;\nloop invariant (m <= x && x <= n) ==> m <= n-1;\nloop invariant (m <= x && x <= n) ==> m <= n-2;\nloop invariant (m <= x && x <= n) ==> m <= n-3;\nloop invariant (m <= x && x <= n) ==> m <= n-4;\nloop invariant (m <= x && x <= n) ==> m <= n-5;\nloop invariant (m <= x && x <= n) ==> m <= n-6;\nloop invariant (m <= x && x <= n) ==> m <= n-7;\nloop invariant (m <= x && x <= n) ==> m <= n-8;\nloop invariant (m <= x && x <= n) ==> m <= n-9;\nloop invariant (m <= x && x <= n) ==> m <= n-10;\nloop invariant (m <= x && x <= n) ==> m <= n-11;\nloop invariant (m <= x && x <= n) ==> m <= n-12;\nloop invariant (m <= x && x <= n) ==> m <= n-13;\nloop invariant (m <= x && x <= n) ==> m <= n-14;\nloop invariant (m <= x && x <= n) ==> m <= n-15;\nloop invariant (m <= x && x <= n) ==> m <= n-16;\nloop invariant (m <= x && x <= n) ==> m <= n-17;\nloop invariant (m <= x && x <= n) ==> m <= n-18;\nloop invariant (m <= x && x <= n) ==> m <= n-19;\nloop invariant (m <= x && x <= n) ==> m <= n-20;\nloop invariant (m <= x && x <= n) ==> m <= n-21;\nloop invariant (m <= x && x <= n) ==> m <= n-22;\nloop invariant (m <= x && x <= n) ==> m <= n-23;\nloop invariant (m <= x && x <= n) ==> m <= n-24;\nloop invariant (m <= x && x <= n) ==> m <= n-25;\nloop invariant (m <= x && x <= n) ==> m <= n-26;\nloop invariant (m <= x && x <= n) ==> m <= n-27;\nloop invariant (m <= x && x <= n) ==> m <= n-28;\nloop invariant (m <= x && x <= n) ==> m <= n-29;\nloop invariant (m <= x && x <= n) ==> m <= n-30;\nloop invariant (m <= x && x <= n) ==> m <= n-31;\nloop invariant (m <= x && x <= n) ==> m <= n-32;\nloop invariant (m <= x && x <= n) ==> m <= n-33;\nloop invariant (m <= x && x <= n) ==> m <= n-34;\nloop invariant (m <= x && x <= n) ==> m <= n-35;\nloop invariant (m <= x && x <= n) ==> m <= n-36;\nloop invariant (m <= x && x <= n) ==> m <= n-37;\nloop invariant (m <= x && x <= n) ==> m <= n-38;\nloop invariant (m <= x && x <= n) ==> m <= n-39;\nloop invariant (m <= x && x <= n) ==> m <= n-40;\nloop invariant (m <= x && x <= n) ==> m <= n-41;\nloop invariant (m <= x && x <= n) ==> m <= n-42;\nloop invariant (m <= x && x <= n) ==> m <= n-43;\nloop invariant (m <= x && x <= n) ==> m <= n-44;\nloop invariant (m <= x && x <= n) ==> m <= n-45;\nloop invariant (m <= x && x <= n) ==> m <= n-46;\nloop invariant (m <= x && x <= n) ==> m <= n-47;\nloop invariant (m <= x && x <= n) ==> m <= n-48;\nloop invariant (m <= x && x <= n) ==> m <= n-49;\nloop invariant (m <= x && x <= n) ==> m <= n-50;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1(){\n    int x; return x;\n}\n\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main() {\n  int x= 0;\n  int m=0;\n  int n = unknown1();\n  /*@\n\nloop invariant i2: (m <= x && x <= n) ==> m <= n;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile(x<=n-1) {\n     if(unknown1()) {\n\tm = x;\n     }\n     x= x+1;\n  }\n  if(x < n)\n    \nreturn;\n\n  if(n>=1 && (m <= -1 || m >= n))\n  {goto ERROR; { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= n;\nloop invariant 0 <= m <= x;\nloop invariant m <= x - 1 || m >= x;\nloop invariant m <= -1 || m + 1 >= n || (n >= 1 && (m <= x - 1 || m >= x));\nloop invariant m <= -1 || m >= n || (n >= 1 && (m <= x - 1 || m >= x));\nloop invariant m <= -1 || m >= n || (n >= 1 && (m <= x - 1 || m >= x));\nloop invariant m <= -1 || m >= n || (n >= 1 && (m <= x - 1 || m >= x));\nloop invariant m <= -1 || m >= n || (n >= 1 && (m <= x - 1 || m >= x));\nloop invariant m <= -1 || m >= n || (n >= 1 && (m <= x - 1 || m >= x));\nloop invariant m <= -1 || m >= n || (n >= 1 && (m <= x - 1 || m >= x));\nloop invariant m <= -1 || m >= n || (n >= 1 && (m <= x - 1 || m >= x));\nloop invariant m <= -1 || m >= n || (n >= 1 && (m <= x - 1 || m >= x));\nloop invariant m <= -1 || m >= n || (n >= 1 && (m <= x - 1 || m >= x));\nloop invariant m <= -1 || m >= n || (n >= 1 && (m <= x - 1 || m >= x));\nloop invariant m <= -1 || m >= n || (n >= 1 && (m <= x - 1 || m >= x));\nloop invariant m <= -1 || m >= n || (n >= 1 && (m <= x - 1 || m >= x));\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1(){\n    int x; return x;\n}\n\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main() {\n  int x= 0;\n  int m=0;\n  int n = unknown1();\n  /*@\n\nloop invariant i2: 0 <= m <= x;\nloop invariant i3: m <= x - 1 || m >= x;\nloop invariant i4: m <= -1 || m + 1 >= n || (n >= 1 && (m <= x - 1 || m >= x));\nloop invariant i5: m <= -1 || m >= n || (n >= 1 && (m <= x - 1 || m >= x));\n*/\nwhile(x<=n-1) {\n     if(unknown1()) {\n\tm = x;\n     }\n     x= x+1;\n  }\n  if(x < n)\n    \nreturn;\n\n  if(n>=1 && (m <= -1 || m >= n))\n  {goto ERROR; { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 13,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= m <= n;\nloop invariant (unknown1() ==> m == x);\nloop invariant (unknown1() ==> m >= x);\nloop invariant (unknown1() ==> n - 1 >= x);\nloop invariant (unknown1() ==> m >= 0);\nloop invariant (unknown1() ==> m <= x);\nloop invariant (unknown1() ==> m <= n);\nloop invariant (unknown1() ==> m <= n);\nloop invariant (unknown1() ==> m >= -1);\nloop invariant (unknown1() ==> n >= 1);\nloop invariant (unknown1() ==> m >= 0);\nloop invariant (unknown1() ==> m <= x);\nloop invariant (unknown1() ==> m <= n);\nloop invariant (unknown1() ==> m >= 0);\nloop invariant (unknown1() ==> m <= x);\nloop invariant (unknown1() ==> m <= n);\nloop invariant (unknown1() ==> m >= 0);\nloop invariant (unknown1() ==> m <= x);\nloop invariant (unknown1() ==> m <= n);\nloop invariant (unknown1() ==> m >= 0);\nloop invariant (unknown1() ==> m <= x);\nloop invariant (unknown1() ==> m <= n);\nloop invariant (unknown1() ==> m >= 0);\nloop invariant (unknown1() ==> m <= x);\nloop invariant (unknown1() ==> m <= n);\nloop invariant (unknown1() ==> m >= 0);\nloop invariant (unknown1() ==> m <= x);\nloop invariant (unknown1() ==> m <= n);\nloop invariant (unknown1() ==> m >= 0);\nloop invariant (unknown1() ==> m <= x);\nloop invariant (unknown1() ==> m <= n);\nloop invariant (unknown1() ==> m >= 0);\nloop invariant (unknown1() ==> m <= x);\nloop invariant (unknown1() ==> m <= n);\nloop invariant (unknown1() ==> m >= 0);\nloop invariant (unknown1() ==> m <= x);\nloop invariant (unknown1() ==> m <= n);\nloop invariant (unknown1() ==> m >= 0);\nloop invariant (unknown1() ==> m <= x);\nloop invariant (unknown1() ==> m <= n);\nloop invariant (unknown1() ==> m >= 0);\nloop invariant (unknown1() ==> m <= x);\nloop invariant (unknown1() ==> m <= n);\nloop invariant (unknown1() ==> m >= 0);\nloop invariant (unknown1() ==> m <= x);\nloop invariant (unknown1() ==> m <= n);\nloop invariant (unknown1() ==> m >= 0);\nloop invariant (unknown1() ==> m <= x);\nloop invariant (unknown1() ==> m <= n);\nloop invariant (unknown1() ==> m >= 0);\nloop invariant (unknown1() ==> m <= x);\nloop invariant (unknown1() ==> m <= n);\nloop invariant (unknown1() ==> m >= 0);\nloop invariant (unknown1() ==> m <= x);\nloop invariant (unknown1() ==> m <= n);\nloop invariant (unknown1() ==> m >= 0);\nloop invariant (unknown1() ==> m <= x);\nloop invariant (unknown1() ==> m <= n);\nloop invariant (unknown1() ==> m >= 0);\nloop invariant (unknown1() ==> m <= x);\nloop invariant (unknown1() ==> m <= n);\nloop invariant (unknown1() ==> m >= 0);\nloop invariant (unknown1() ==> m <= x);\nloop invariant (unknown1() ==> m <= n);\nloop invariant (unknown1() ==> m >= 0);\nloop invariant (unknown1() ==> x <= n-1);\nloop invariant (unknown1() ==> x <= n);\nloop invariant (unknown1() ==> m <= x);\nloop invariant (unknown1() ==> m <= n);\nloop invariant (unknown1() ==> m >= 0);\nloop invariant (n >= 1 ==> m >= 0);\nloop invariant (n >= 1 ==> m <= n);\nloop invariant (n >= 1 ==> m >= -1);\nloop invariant (n >= 1 ==> m <= x);\nloop invariant (n >= 1 ==> m <= n);\nloop invariant (n >= 1 ==> m >= 0);\nloop invariant (n >= 1 ==> m <= x);\nloop invariant (n >= 1 ==> m <= n);\nloop invariant (n >= 1 ==> m >= 0);\nloop invariant (n >= 1 ==> m <= x);\nloop invariant (n >= 1 ==> m <= n);\nloop invariant (n >= 1 ==> m >= 0);\nloop invariant (n >= 1 ==> m <= x);\nloop invariant (n >= 1 ==> m <= n);\nloop invariant (n >= 1 ==> m >= 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1(){\n    int x; return x;\n}\n\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main() {\n  int x= 0;\n  int m=0;\n  int n = unknown1();\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i13: (n >= 1 ==> m >= 0);\nloop invariant i14: (n >= 1 ==> m <= n);\nloop invariant i15: (n >= 1 ==> m >= -1);\nloop invariant i16: (n >= 1 ==> m <= x);\n*/\nwhile(x<=n-1) {\n     if(unknown1()) {\n\tm = x;\n     }\n     x= x+1;\n  }\n  if(x < n)\n    \nreturn;\n\n  if(n>=1 && (m <= -1 || m >= n))\n  {goto ERROR; { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant ( 0 <= x <= n - 1 );\nloop invariant ( 0 <= m <= n - 1 );\nloop invariant ( x <= n );\nloop invariant ( m <= n );\nloop invariant ( m <= x );\nloop invariant ( m <= n - 1 );\nloop invariant ( m <= x - 1 );\nloop invariant ( m <= x - 1 || m == -1 );\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1(){\n    int x; return x;\n}\n\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main() {\n  int x= 0;\n  int m=0;\n  int n = unknown1();\n  /*@\n\n\n\n\nloop invariant i5: ( m <= x );\n\n\n\n*/\nwhile(x<=n-1) {\n     if(unknown1()) {\n\tm = x;\n     }\n     x= x+1;\n  }\n  if(x < n)\n    \nreturn;\n\n  if(n>=1 && (m <= -1 || m >= n))\n  {goto ERROR; { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m <= (x - 1);\nloop invariant (x < n ==> n >= 1 && (m <= -1 || m >= n));\nloop invariant (x < n ==> (n >= 1 && (m <= -1 || m >= n)) ==> (\\valid(&m)));\nloop invariant (x < n ==> (\\valid(&m) ==> m <= (x - 1)));\nloop invariant (x < n ==> (\\valid(&m) ==> m <= (x - 1) ==> m <= (x - 1)));\nloop invariant (x < n ==> (\\valid(&m) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1)));\nloop invariant (x < n ==> (\\valid(&m) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1)));\nloop invariant (x < n ==> (\\valid(&m) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1)));\nloop invariant (x < n ==> (\\valid(&m) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1)));\nloop invariant (x < n ==> (\\valid(&m) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1)));\nloop invariant (x < n ==> (\\valid(&m) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1)));\nloop invariant (x < n ==> (\\valid(&m) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1)));\nloop invariant (x < n ==> (\\valid(&m) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1)));\nloop invariant (x < n ==> (\\valid(&m) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1)));\nloop invariant (x < n ==> (\\valid(&m) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1)));\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1(){\n    int x; return x;\n}\n\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main() {\n  int x= 0;\n  int m=0;\n  int n = unknown1();\n  /*@\n\n\n\nloop invariant i4: (x < n ==> (n >= 1 && (m <= -1 || m >= n)) ==> (\\valid(&m)));\n\nloop invariant i6: (x < n ==> (\\valid(&m) ==> m <= (x - 1) ==> m <= (x - 1)));\nloop invariant i7: (x < n ==> (\\valid(&m) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1)));\nloop invariant i8: (x < n ==> (\\valid(&m) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1)));\nloop invariant i9: (x < n ==> (\\valid(&m) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1)));\nloop invariant i10: (x < n ==> (\\valid(&m) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1)));\nloop invariant i11: (x < n ==> (\\valid(&m) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1)));\nloop invariant i12: (x < n ==> (\\valid(&m) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1)));\nloop invariant i13: (x < n ==> (\\valid(&m) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1)));\nloop invariant i14: (x < n ==> (\\valid(&m) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1)));\nloop invariant i15: (x < n ==> (\\valid(&m) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1)));\nloop invariant i16: (x < n ==> (\\valid(&m) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1)));\n*/\nwhile(x<=n-1) {\n     if(unknown1()) {\n\tm = x;\n     }\n     x= x+1;\n  }\n  if(x < n)\n    \nreturn;\n\n  if(n>=1 && (m <= -1 || m >= n))\n  {goto ERROR; { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n; loop invariant 0 <= m <= n; loop invariant m <= x; loop invariant x <= n; loop invariant m <= n; loop invariant 0 <= n; loop invariant n <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1(){\n    int x; return x;\n}\n\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main() {\n  int x= 0;\n  int m=0;\n  int n = unknown1();\n  /*@\n\n*/\nwhile(x<=n-1) {\n     if(unknown1()) {\n\tm = x;\n     }\n     x= x+1;\n  }\n  if(x < n)\n    \nreturn;\n\n  if(n>=1 && (m <= -1 || m >= n))\n  {goto ERROR; { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n - 1;\nloop invariant m <= x;\nloop invariant m <= n - 1;\nloop invariant m >= -1;\nloop invariant m <= n - 1;\nloop invariant m >= -1;\nloop invariant m <= n - 1;\nloop invariant m >= -1;\nloop invariant m <= n - 1;\nloop invariant m >= -1;\nloop invariant m <= n - 1;\nloop invariant m >= -1;\nloop invariant m <= n - 1;\nloop invariant m >= -1;\nloop invariant m <= n - 1;\nloop invariant m >= -1;\nloop invariant m <= n - 1;\nloop invariant m >= -1;\nloop invariant m <= n - 1;\nloop invariant m >= -1;\nloop invariant m <= n - 1;\nloop invariant m >= -1;\nloop invariant m <= n - 1;\nloop invariant m >= -1;\nloop invariant m <= n - 1;\nloop invariant m >= -1;\nloop invariant m <= n - 1;\nloop invariant m >= -1;\nloop invariant m <= n - 1;\nloop invariant m >= -1;\nloop invariant m <= n - 1;\nloop invariant m >= -1;\nloop invariant m <= n - 1;\nloop invariant m >= -1;\nloop invariant m <= n - 1;\nloop invariant m >= -1;\nloop invariant m <= n - 1;\nloop invariant m >= -1;\nloop invariant m <= n - 1;\nloop invariant m >= -1;\nloop invariant m <= n - 1;\nloop invariant m >= -1;\nloop invariant m <= n - 1;\nloop invariant m >= -1;\nloop invariant m <= n - 1;\nloop invariant m >= -1;\nloop invariant m <= n - 1;\nloop invariant m >= -1;\nloop invariant m <= n - 1;\nloop invariant m >= -1;\nloop invariant m <= n - 1;\nloop invariant m >= -1;\nloop invariant m <= n - 1;\nloop invariant m >= -1;\nloop invariant m <= n - 1;\nloop invariant m >= -1;\nloop invariant m <= n - 1;\nloop invariant m >= -1;\nloop invariant m <= n - 1;\nloop invariant m >= -1;\nloop invariant m <= n - 1;\nloop invariant m >= -1;\nloop invariant m <= n - 1;\nloop invariant m >= -1;\nloop invariant m <= n - 1;\nloop invariant m >= -1;\nloop invariant m <= n - 1;\nloop invariant m >= -1;\nloop invariant m <= n - 1;\nloop invariant m >= -1;\nloop invariant m <= n - 1;\nloop invariant m >= -1;\nloop invariant m <= n - 1;\nloop invariant m >= -1;\nloop invariant m <= n - 1;\nloop invariant m >= -1;\nloop invariant m <= n - 1;\nloop invariant m >= -1;\nloop invariant m <= n - 1;\nloop invariant m >= -1;\nloop invariant m <= n - 1;\nloop invariant m >= -1;\nloop invariant m <= n - 1;\nloop invariant m >= -1;\nloop invariant m <= n - 1;\nloop invariant m >= -1;\nloop invariant m <= n - 1;\nloop invariant m >= -1;\nloop invariant m <= n - 1;\nloop invariant m >= -1;\nloop invariant m <= n - 1;\nloop invariant m >= -1;\nloop invariant m <= n - 1;\nloop invariant m >= -1;\nloop invariant m <= n - 1;\nloop invariant m >= -1;\nloop invariant m <= n - 1;\nloop invariant m >= -1;\nloop invariant m <= n - 1;\nloop invariant m >= -1;\nloop invariant m <= n - 1;\nloop invariant m >= -1;\nloop invariant m <= n - 1;\nloop invariant m >= -1;\nloop invariant m <= n - 1;\nloop invariant m >= -1;\nloop invariant m <= n - 1;\nloop invariant m >= -1;\nloop invariant m <= n - 1;\nloop invariant m >= -1;\nloop invariant m <= n - 1;\nloop invariant m >= -1;\nloop invariant m <= n - 1;\nloop invariant m >= -1;\nloop invariant m <= n - 1;\nloop invariant m >= -1;\nloop invariant m <= n - 1;\nloop invariant m >= -1;\nloop invariant m <= n - 1;\nloop invariant m >= -1;\nloop invariant m <= n - 1;\nloop invariant m >= -1;\nloop invariant m <= n - 1;\nloop invariant m >= -1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1(){\n    int x; return x;\n}\n\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main() {\n  int x= 0;\n  int m=0;\n  int n = unknown1();\n  /*@\n\nloop invariant i2: m <= x;\n\nloop invariant i4: m >= -1;\n*/\nwhile(x<=n-1) {\n     if(unknown1()) {\n\tm = x;\n     }\n     x= x+1;\n  }\n  if(x < n)\n    \nreturn;\n\n  if(n>=1 && (m <= -1 || m >= n))\n  {goto ERROR; { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 33: Assignment operators not allowed in annotations.",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1(){\n    int x; return x;\n}\n\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main() {\n  int x= 0;\n  int m=0;\n  int n = unknown1();\n  /*@\nloop invariant i1: 0 <= x <= n;\nloop invariant i2: m <= x;\nloop invariant i3: 0 <= m <= n;\nloop invariant i4: m <= n;\nloop invariant i5: x >= 0;\nloop invariant i6: m >= 0;\nloop invariant i7: n >= 1;\nloop invariant i8: m <= x - 1;\nloop invariant i9: (x == n) ==> (m <= -1 || m >= n);\nloop invariant i10: (x < n) ==> (m >= 0 && m < n);\nloop invariant i11: (x < n) ==> (m == x);\nloop invariant i12: (x < n) ==> (m >= 0 && m < x);\nloop invariant i13: (x < n) ==> (m == 0 || m == x - 1);\nloop invariant i14: 0 <= x <= n; loop invariant m >= 0; loop invariant m <= n; loop invariant (m = x) == (x <= n-1); loop invariant m >= 0; loop invariant m <= n; loop invariant (m = x) == (x <= n-1); loop invariant m >= 0; loop invariant m <= n; loop invariant (m = x) == (x <= n-1); loop invariant m >= 0; loop invariant m <= n; loop invariant (m = x) == (x <= n-1); loop invariant m >= 0; loop invariant m <= n; loop invariant (m = x) == (x <= n-1); loop invariant m >= 0; loop invariant m <= n; loop invariant (m = x) == (x <= n-1); loop invariant m >= 0; loop invariant m <= n; loop invariant (m = x) == (x <= n-1); loop invariant m >= 0; loop invariant m <= n; loop invariant (m = x) == (x <= n-1); loop invariant m >= 0; loop invariant m <= n; loop invariant (m = x) == (x <= n-1); loop invariant m >= 0; loop invariant m <= n; loop invariant (m = x) == (x <= n-1); loop invariant m >= 0; loop invariant m <= n; loop invariant (m = x) == (x <= n-1); loop invariant m >= 0; loop invariant m <= n; loop invariant (m = x) == (x <= n-1); loop invariant m >= 0; loop invariant m <= n; loop invariant (m = x) == (x <= n-1); loop invariant m >= 0; loop invariant m <= n; loop invariant (m = x) == (x <= n-1); loop invariant m >= 0; loop invariant m <= n; loop invariant (m = x) == (x <= n-1); loop invariant m >= 0; loop invariant m <= n; loop invariant (m = x) == (x <= n-1); loop invariant m >= 0; loop invariant m <= n; loop invariant (m = x) == (x <= n-1); loop invariant m >= 0; loop invariant m <= n; loop invariant (m = x) == (x <= n-1); loop invariant m >= 0; loop invariant m <= n; loop invariant (m = x) == (x <= n-1); loop invariant m >= 0; loop invariant m <= n; loop invariant (m = x) == (x <= n-1); loop invariant m >= 0; loop invariant m <= n; loop invariant (m = x) == (x <= n-1); loop invariant m >= 0; loop invariant m <= n; loop invariant (m = x) == (x <= n-1); loop invariant m >= 0; loop invariant m <= n; loop invariant (m = x) == (x <= n-1); loop invariant m >= 0; loop invariant m <= n; loop invariant (m = x) == (x <= n-1); loop invariant m >= 0; loop invariant m <= n; loop invariant (m = x) == (x <= n-1); loop invariant m >= 0; loop invariant m <= n; loop invariant (m = x) == (x <= n-1); loop invariant m >= 0; loop invariant m <= n; loop invariant (m = x) == (x <= n-1); loop invariant m >= 0; loop invariant m <= n; loop invariant (m = x) == (x <= n-1); loop invariant m >= 0; loop invariant m <= n; loop invariant (m = x) == (x <= n-1); loop invariant m >= 0; loop invariant m <= n; loop invariant (m = x) == (x <= n-1); loop invariant m >= 0; loop invariant m <= n; loop invariant (m = x) == (x <= n-1); loop invariant m >= 0; loop invariant m <= n; loop invariant (m = x) == (x <= n-1); loop invariant m >= 0; loop invariant m <= n; loop invariant (m = x) == (x <= n-1); loop invariant m >= 0; loop invariant m <= n; loop invariant (m = x) == (x <= n-1); loop invariant m >= 0; loop invariant m <= n; loop invariant (m = x) == (x <= n-1); loop invariant m >= 0;\nloop invariant i15: 0 <= x <= n && n >= 1;\nloop invariant i16: m == -1 || (m >= 0 && m < n);\nloop invariant i17: n >= 1 ==> (0 <= m && m < n);\nloop invariant i18: (m <= x && x <= n) ==> m <= n;\nloop invariant i19: (m <= x && x <= n) ==> m >= 0;\nloop invariant i20: (m <= x && x <= n) ==> m <= n-1;\nloop invariant i21: (m <= x && x <= n) ==> m <= n-2;\nloop invariant i22: (m <= x && x <= n) ==> m <= n-3;\nloop invariant i23: (m <= x && x <= n) ==> m <= n-4;\nloop invariant i24: (m <= x && x <= n) ==> m <= n-5;\nloop invariant i25: (m <= x && x <= n) ==> m <= n-6;\nloop invariant i26: (m <= x && x <= n) ==> m <= n-7;\nloop invariant i27: (m <= x && x <= n) ==> m <= n-8;\nloop invariant i28: (m <= x && x <= n) ==> m <= n-9;\nloop invariant i29: (m <= x && x <= n) ==> m <= n-10;\nloop invariant i30: (m <= x && x <= n) ==> m <= n-11;\nloop invariant i31: (m <= x && x <= n) ==> m <= n-12;\nloop invariant i32: (m <= x && x <= n) ==> m <= n-13;\nloop invariant i33: (m <= x && x <= n) ==> m <= n-14;\nloop invariant i34: (m <= x && x <= n) ==> m <= n-15;\nloop invariant i35: (m <= x && x <= n) ==> m <= n-16;\nloop invariant i36: (m <= x && x <= n) ==> m <= n-17;\nloop invariant i37: (m <= x && x <= n) ==> m <= n-18;\nloop invariant i38: (m <= x && x <= n) ==> m <= n-19;\nloop invariant i39: (m <= x && x <= n) ==> m <= n-20;\nloop invariant i40: (m <= x && x <= n) ==> m <= n-21;\nloop invariant i41: (m <= x && x <= n) ==> m <= n-22;\nloop invariant i42: (m <= x && x <= n) ==> m <= n-23;\nloop invariant i43: (m <= x && x <= n) ==> m <= n-24;\nloop invariant i44: (m <= x && x <= n) ==> m <= n-25;\nloop invariant i45: (m <= x && x <= n) ==> m <= n-26;\nloop invariant i46: (m <= x && x <= n) ==> m <= n-27;\nloop invariant i47: (m <= x && x <= n) ==> m <= n-28;\nloop invariant i48: (m <= x && x <= n) ==> m <= n-29;\nloop invariant i49: (m <= x && x <= n) ==> m <= n-30;\nloop invariant i50: (m <= x && x <= n) ==> m <= n-31;\nloop invariant i51: (m <= x && x <= n) ==> m <= n-32;\nloop invariant i52: (m <= x && x <= n) ==> m <= n-33;\nloop invariant i53: (m <= x && x <= n) ==> m <= n-34;\nloop invariant i54: (m <= x && x <= n) ==> m <= n-35;\nloop invariant i55: (m <= x && x <= n) ==> m <= n-36;\nloop invariant i56: (m <= x && x <= n) ==> m <= n-37;\nloop invariant i57: (m <= x && x <= n) ==> m <= n-38;\nloop invariant i58: (m <= x && x <= n) ==> m <= n-39;\nloop invariant i59: (m <= x && x <= n) ==> m <= n-40;\nloop invariant i60: (m <= x && x <= n) ==> m <= n-41;\nloop invariant i61: (m <= x && x <= n) ==> m <= n-42;\nloop invariant i62: (m <= x && x <= n) ==> m <= n-43;\nloop invariant i63: (m <= x && x <= n) ==> m <= n-44;\nloop invariant i64: (m <= x && x <= n) ==> m <= n-45;\nloop invariant i65: (m <= x && x <= n) ==> m <= n-46;\nloop invariant i66: (m <= x && x <= n) ==> m <= n-47;\nloop invariant i67: (m <= x && x <= n) ==> m <= n-48;\nloop invariant i68: (m <= x && x <= n) ==> m <= n-49;\nloop invariant i69: (m <= x && x <= n) ==> m <= n-50;\nloop invariant i70: 1 <= x <= n;\nloop invariant i71: 0 <= m <= x;\nloop invariant i72: m <= x - 1 || m >= x;\nloop invariant i73: m <= -1 || m + 1 >= n || (n >= 1 && (m <= x - 1 || m >= x));\nloop invariant i74: m <= -1 || m >= n || (n >= 1 && (m <= x - 1 || m >= x));\nloop invariant i75: (unknown1() ==> m == x);\nloop invariant i76: (unknown1() ==> m >= x);\nloop invariant i77: (unknown1() ==> n - 1 >= x);\nloop invariant i78: (unknown1() ==> m >= 0);\nloop invariant i79: (unknown1() ==> m <= x);\nloop invariant i80: (unknown1() ==> m <= n);\nloop invariant i81: (unknown1() ==> m >= -1);\nloop invariant i82: (unknown1() ==> n >= 1);\nloop invariant i83: (unknown1() ==> x <= n-1);\nloop invariant i84: (unknown1() ==> x <= n);\nloop invariant i85: (n >= 1 ==> m >= 0);\nloop invariant i86: (n >= 1 ==> m <= n);\nloop invariant i87: (n >= 1 ==> m >= -1);\nloop invariant i88: (n >= 1 ==> m <= x);\nloop invariant i89: ( 0 <= x <= n - 1 );\nloop invariant i90: ( 0 <= m <= n - 1 );\nloop invariant i91: ( x <= n );\nloop invariant i92: ( m <= n );\nloop invariant i93: ( m <= x );\nloop invariant i94: ( m <= n - 1 );\nloop invariant i95: ( m <= x - 1 );\nloop invariant i96: ( m <= x - 1 || m == -1 );\nloop invariant i97: m <= (x - 1);\nloop invariant i98: (x < n ==> n >= 1 && (m <= -1 || m >= n));\nloop invariant i99: (x < n ==> (n >= 1 && (m <= -1 || m >= n)) ==> (\\valid(&m)));\nloop invariant i100: (x < n ==> (\\valid(&m) ==> m <= (x - 1)));\nloop invariant i101: (x < n ==> (\\valid(&m) ==> m <= (x - 1) ==> m <= (x - 1)));\nloop invariant i102: (x < n ==> (\\valid(&m) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1)));\nloop invariant i103: (x < n ==> (\\valid(&m) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1)));\nloop invariant i104: (x < n ==> (\\valid(&m) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1)));\nloop invariant i105: (x < n ==> (\\valid(&m) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1)));\nloop invariant i106: (x < n ==> (\\valid(&m) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1)));\nloop invariant i107: (x < n ==> (\\valid(&m) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1)));\nloop invariant i108: (x < n ==> (\\valid(&m) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1)));\nloop invariant i109: (x < n ==> (\\valid(&m) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1)));\nloop invariant i110: (x < n ==> (\\valid(&m) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1)));\nloop invariant i111: (x < n ==> (\\valid(&m) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1)));\nloop invariant i112: 0 <= x <= n; loop invariant 0 <= m <= n; loop invariant m <= x; loop invariant x <= n; loop invariant m <= n; loop invariant 0 <= n; loop invariant n <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n;\nloop invariant i113: 0 <= x <= n - 1;\nloop invariant i114: m <= n - 1;\nloop invariant i115: m >= -1;\n*/\nwhile(x<=n-1) {\n     if(unknown1()) {\n\tm = x;\n     }\n     x= x+1;\n  }\n  if(x < n)\n    \nreturn;\n\n  if(n>=1 && (m <= -1 || m >= n))\n  {goto ERROR; { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}}\n\n}",
        "combined_annotation_num_solver_calls": 21,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1(){\n    int x; return x;\n}\n\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main() {\n  int x= 0;\n  int m=0;\n  int n = unknown1();\n  /*@\n\n\n\n\nloop invariant i5: x >= 0;\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i18: (m <= x && x <= n) ==> m <= n;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i72: m <= x - 1 || m >= x;\nloop invariant i73: m <= -1 || m + 1 >= n || (n >= 1 && (m <= x - 1 || m >= x));\nloop invariant i74: m <= -1 || m >= n || (n >= 1 && (m <= x - 1 || m >= x));\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i99: (x < n ==> (n >= 1 && (m <= -1 || m >= n)) ==> (\\valid(&m)));\n\nloop invariant i101: (x < n ==> (\\valid(&m) ==> m <= (x - 1) ==> m <= (x - 1)));\nloop invariant i102: (x < n ==> (\\valid(&m) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1)));\nloop invariant i103: (x < n ==> (\\valid(&m) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1)));\nloop invariant i104: (x < n ==> (\\valid(&m) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1)));\nloop invariant i105: (x < n ==> (\\valid(&m) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1)));\nloop invariant i106: (x < n ==> (\\valid(&m) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1)));\nloop invariant i107: (x < n ==> (\\valid(&m) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1)));\nloop invariant i108: (x < n ==> (\\valid(&m) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1)));\nloop invariant i109: (x < n ==> (\\valid(&m) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1)));\nloop invariant i110: (x < n ==> (\\valid(&m) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1)));\nloop invariant i111: (x < n ==> (\\valid(&m) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1) ==> m <= (x - 1)));\n\n\n\n\n*/\nwhile(x<=n-1) {\n     if(unknown1()) {\n\tm = x;\n     }\n     x= x+1;\n  }\n  if(x < n)\n    \nreturn;\n\n  if(n>=1 && (m <= -1 || m >= n))\n  {goto ERROR; { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}}\n\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/11.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/15.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/16.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/18.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/20.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/23.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/30.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/37.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/38.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/43.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/46.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/popl.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/07.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/split.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/13.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/14.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/19.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/32.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/39.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/41.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/44.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/cav.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/05.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/19.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/37.c"
        ],
        "skipped": [],
        "total": 130,
        "success_count": 104,
        "failure_count": 26,
        "success_rate": 0.8
    }
}