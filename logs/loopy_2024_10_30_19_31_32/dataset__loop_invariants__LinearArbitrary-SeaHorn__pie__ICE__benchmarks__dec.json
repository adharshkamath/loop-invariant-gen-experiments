{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main()\n{\n  int x, m;\n  x = 100;\n  while(x > 0)\n  {\n    m = unknown_int();\n    x = x - 1;\n  }\n  {;\n//@ assert(x == 0);\n}\n    \n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= x <= 100;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant x == 100 - m;\nloop invariant m <= x;\nloop invariant x >= 1;\nloop invariant m >= 0;\nloop invariant m <= 100;\nloop invariant m >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 100; loop invariant x >= (100 - y) * y / 2; loop invariant x >= (100 - y) * y / 2 + 100 - y; loop invariant x >= (100 - y) * y / 2 + 100 - y + 1; loop invariant x >= (100 - y) * y / 2 + 100 - y + 1 + 1; loop invariant x >= (100 - y) * y / 2 + 100 - y + 1 + 1 + 1; loop invariant x >= (100 - y) * y / 2 + 100 - y + 1 + 1 + 1 + 1; loop invariant x >= (100 - y) * y / 2 + 100 - y + 1 + 1 + 1 + 1 + 1; loop invariant x >= (100 - y) * y / 2 + 100 - y + 1 + 1 + 1 + 1 + 1 + 1; loop invariant x >= (100 - y) * y / 2 + 100 - y + 1 + 1 + 1 + 1 + 1 + 1 + 1; loop invariant x >= (100 - y) * y / 2 + 100 - y + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1; loop invariant x >= (100 - y) * y / 2 + 100 - y + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1; loop invariant x >= (100 - y) * y / 2 + 100 - y + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1; loop invariant x >= (100 - y) * y / 2 + 100 - y + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1; loop invariant x >= (100 - y) * y / 2 + 100 - y + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1; loop invariant x >= (100 - y) * y / 2 + 100 - y + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1; loop invariant x >= (100 - y) * y / 2 + 100 - y + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1; loop invariant x >= (100 - y) * y / 2 + 100 - y + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1; loop invariant x >= (100 - y) * y / 2 + 100 - y + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1; loop invariant x >= (100 - y) * y / 2 + 100 - y + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1; loop invariant x >= (100 - y) * y / 2 + 100 - y + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant x >= 100 ==> m >= 0;\nloop invariant x >= 100 ==> m < 100;\nloop invariant x >= 100 ==> x - 1 >= 99;\nloop invariant x >= 100 ==> m >= 0 ==> x - 1 >= 99 + m;\nloop invariant x >= 100 ==> m >= 0 ==> x - 1 >= 99 + m ==> x >= 100 + m;\nloop invariant x >= 100 ==> m >= 0 ==> x - 1 >= 99 + m ==> x >= 100 + m ==> x >= 100 + m ==> x >= 100;\nloop invariant x >= 100 ==> m >= 0 ==> x - 1 >= 99 + m ==> x >= 100 + m ==> x >= 100 + m ==> x >= 100 ==> x >= 100;\nloop invariant x >= 100 ==> m >= 0 ==> x - 1 >= 99 + m ==> x >= 100 + m ==> x >= 100 + m ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100;\nloop invariant x >= 100 ==> m >= 0 ==> x - 1 >= 99 + m ==> x >= 100 + m ==> x >= 100 + m ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100;\nloop invariant x >= 100 ==> m >= 0 ==> x - 1 >= 99 + m ==> x >= 100 + m ==> x >= 100 + m ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100;\nloop invariant x >= 100 ==> m >= 0 ==> x - 1 >= 99 + m ==> x >= 100 + m ==> x >= 100 + m ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100;\nloop invariant x >= 100 ==> m >= 0 ==> x - 1 >= 99 + m ==> x >= 100 + m ==> x >= 100 + m ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100;\nloop invariant x >= 100 ==> m >= 0 ==> x - 1 >= 99 + m ==> x >= 100 + m ==> x >= 100 + m ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100;\nloop invariant x >= 100 ==> m >= 0 ==> x - 1 >= 99 + m ==> x >= 100 + m ==> x >= 100 + m ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100;\nloop invariant x >= 100 ==> m >= 0 ==> x - 1 >= 99 + m ==> x >= 100 + m ==> x >= 100 + m ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant 0 <= m <= 100;\nloop invariant x - 1 >= 0 ==> m >= x - 1;\n*/\n```",
            "```\n/*@\nloop invariant x >= 1;\nloop invariant x <= 100;\nloop invariant m >= 0;\nloop invariant m <= 100;\nloop invariant x - m >= 1;\nloop invariant x - m <= 100;\nloop invariant 1 <= x <= 100;\nloop invariant 0 <= m <= 100;\nloop invariant x - m >= 1;\nloop invariant x - m <= 100;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant x is divisible by 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant 0 <= m <= 100;\nloop invariant x - 1 >= m;\nloop invariant x = 100 - (m - 1);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant (m >= 0) ==> (x == 100 - m);\nloop invariant (m < 0) ==> (x == 100);\nloop invariant (m == 0) ==> (x == 100);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant m >= 0;\nloop invariant m <= 100;\nloop invariant (x - 1) > 0;\n*/\n```",
            "```\n/*@\nloop invariant x >= 0;\nloop invariant x <= 100;\nloop invariant m >= 0;\nloop invariant m <= RAND_MAX;\nloop invariant x == 100 - m;\nloop invariant x > 0 ==> x - 1 == x';\nloop invariant x' >= 0;\nloop invariant x' <= 100;\nloop invariant m >= 0;\nloop invariant m <= RAND_MAX;\nloop invariant x' == x - 1;\nloop invariant m == m';\nloop invariant x' == x - 1;\nloop invariant m' >= 0;\nloop invariant m' <= RAND_MAX;\n*/\n```",
            "```\n/*@\nloop invariant x > 0;\nloop invariant x >= 100;\nloop invariant x <= 100;\nloop invariant m >= 0;\nloop invariant m <= 100;\nloop invariant x - m == 100;\nloop invariant x - m == 100 ==> x >= 0;\nloop invariant x - m == 100 ==> x <= 100;\nloop invariant x - m == 100 ==> m >= 0;\nloop invariant x - m == 100 ==> m <= 100;\nloop invariant x - m == 100 ==> x >= 100;\nloop invariant x - m == 100 ==> x <= 100;\nloop invariant x - m == 100 ==> m >= 0;\nloop invariant x - m == 100 ==> m <= 100;\nloop invariant x - m == 100 ==> x >= 100;\nloop invariant x - m == 100 ==> x <= 100;\nloop invariant x - m == 100 ==> m >= 0;\nloop invariant x - m == 100 ==> m <= 100;\nloop invariant x - m == 100 ==> x >= 100;\nloop invariant x - m == 100 ==> x <= 100;\nloop invariant x - m == 100 ==> m >= 0;\nloop invariant x - m == 100 ==> m <= 100;\nloop invariant x - m == 100 ==> x >= 100;\nloop invariant x - m == 100 ==> x <= 100;\nloop invariant x - m == 100 ==> m >= 0;\nloop invariant x - m == 100 ==> m <= 100;\nloop invariant x - m == 100 ==> x >= 100;\nloop invariant x - m == 100 ==> x <= 100;\nloop invariant x - m == 100 ==> m >= 0;\nloop invariant x - m == 100 ==> m <= 100;\nloop invariant x - m == 100 ==> x >= 100;\nloop invariant x - m == 100 ==> x <= 100;\nloop invariant x - m == 100 ==> m >= 0;\nloop invariant x - m == 100 ==> m <= 100;\nloop invariant x - m == 100 ==> x >= 100;\nloop invariant x - m == 100 ==> x <= 100;\nloop invariant x - m == 100 ==> m >= 0;\nloop invariant x - m == 100 ==> m <= 100;\nloop invariant x - m == 100 ==> x >= 100;\nloop invariant x - m == 100 ==> x <= 100;\nloop invariant x - m == 100 ==> m >= 0;\nloop invariant x - m == 100 ==> m <= 100;\nloop invariant x - m == 100 ==> x >= 100;\nloop invariant x - m == 100 ==> x <= 100;\nloop invariant x - m == 100 ==> m >= 0;\nloop invariant x - m == 100 ==> m <= 100;\nloop invariant x - m == 100 ==> x >= 100;\nloop invariant x - m == 100 ==> x <= 100;\nloop invariant x - m == 100 ==> m >= 0;\nloop invariant x - m == 100 ==> m <= 100;\nloop invariant x - m == 100 ==> x >= 100;\nloop invariant x - m == 100 ==> x <= 100;\nloop invariant x - m == 100 ==> m >= 0;\nloop invariant x - m == 100 ==> m <= 100;\nloop invariant x - m == 100 ==> x >= 100;\nloop invariant x - m == 100 ==> x <= 100;\nloop invariant x - m == 100 ==> m >= 0;\nloop invariant x - m == 100 ==> m <= 100;\nloop invariant x - m == 100 ==> x >= 100;\nloop invariant x - m == 100 ==> x <= 100;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 100000;\nloop invariant y >= 0;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant 0 <= x <= 100000;\nloop invariant y >= 0;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant x == 100 - m;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant x == (100 - (100 - x));\nloop invariant x >= 0;\nloop invariant x <= 100;\nloop invariant x == 0;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 100;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main()\n{\n  int x, m;\n  x = 100;\n  /*@\nloop invariant i1: 0 <= x <= 100;\n*/\nwhile(x > 0)\n  {\n    m = unknown_int();\n    x = x - 1;\n  }\n  {;\n//@ assert(x == 0);\n}\n    \n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant x == 100 - m;\nloop invariant m <= x;\nloop invariant x >= 1;\nloop invariant m >= 0;\nloop invariant m <= 100;\nloop invariant m >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main()\n{\n  int x, m;\n  x = 100;\n  /*@\nloop invariant i1: 0 <= x <= 100;\n\n\n\n\n\n*/\nwhile(x > 0)\n  {\n    m = unknown_int();\n    x = x - 1;\n  }\n  {;\n//@ assert(x == 0);\n}\n    \n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 100; loop invariant x >= (100 - y) * y / 2; loop invariant x >= (100 - y) * y / 2 + 100 - y; loop invariant x >= (100 - y) * y / 2 + 100 - y + 1; loop invariant x >= (100 - y) * y / 2 + 100 - y + 1 + 1; loop invariant x >= (100 - y) * y / 2 + 100 - y + 1 + 1 + 1; loop invariant x >= (100 - y) * y / 2 + 100 - y + 1 + 1 + 1 + 1; loop invariant x >= (100 - y) * y / 2 + 100 - y + 1 + 1 + 1 + 1 + 1; loop invariant x >= (100 - y) * y / 2 + 100 - y + 1 + 1 + 1 + 1 + 1 + 1; loop invariant x >= (100 - y) * y / 2 + 100 - y + 1 + 1 + 1 + 1 + 1 + 1 + 1; loop invariant x >= (100 - y) * y / 2 + 100 - y + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1; loop invariant x >= (100 - y) * y / 2 + 100 - y + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1; loop invariant x >= (100 - y) * y / 2 + 100 - y + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1; loop invariant x >= (100 - y) * y / 2 + 100 - y + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1; loop invariant x >= (100 - y) * y / 2 + 100 - y + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1; loop invariant x >= (100 - y) * y / 2 + 100 - y + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1; loop invariant x >= (100 - y) * y / 2 + 100 - y + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1; loop invariant x >= (100 - y) * y / 2 + 100 - y + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1; loop invariant x >= (100 - y) * y / 2 + 100 - y + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1; loop invariant x >= (100 - y) * y / 2 + 100 - y + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1; loop invariant x >= (100 - y) * y / 2 + 100 - y + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main()\n{\n  int x, m;\n  x = 100;\n  /*@\n\n*/\nwhile(x > 0)\n  {\n    m = unknown_int();\n    x = x - 1;\n  }\n  {;\n//@ assert(x == 0);\n}\n    \n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant x >= 100 ==> m >= 0;\nloop invariant x >= 100 ==> m < 100;\nloop invariant x >= 100 ==> x - 1 >= 99;\nloop invariant x >= 100 ==> m >= 0 ==> x - 1 >= 99 + m;\nloop invariant x >= 100 ==> m >= 0 ==> x - 1 >= 99 + m ==> x >= 100 + m;\nloop invariant x >= 100 ==> m >= 0 ==> x - 1 >= 99 + m ==> x >= 100 + m ==> x >= 100 + m ==> x >= 100;\nloop invariant x >= 100 ==> m >= 0 ==> x - 1 >= 99 + m ==> x >= 100 + m ==> x >= 100 + m ==> x >= 100 ==> x >= 100;\nloop invariant x >= 100 ==> m >= 0 ==> x - 1 >= 99 + m ==> x >= 100 + m ==> x >= 100 + m ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100;\nloop invariant x >= 100 ==> m >= 0 ==> x - 1 >= 99 + m ==> x >= 100 + m ==> x >= 100 + m ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100;\nloop invariant x >= 100 ==> m >= 0 ==> x - 1 >= 99 + m ==> x >= 100 + m ==> x >= 100 + m ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100;\nloop invariant x >= 100 ==> m >= 0 ==> x - 1 >= 99 + m ==> x >= 100 + m ==> x >= 100 + m ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100;\nloop invariant x >= 100 ==> m >= 0 ==> x - 1 >= 99 + m ==> x >= 100 + m ==> x >= 100 + m ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100;\nloop invariant x >= 100 ==> m >= 0 ==> x - 1 >= 99 + m ==> x >= 100 + m ==> x >= 100 + m ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100;\nloop invariant x >= 100 ==> m >= 0 ==> x - 1 >= 99 + m ==> x >= 100 + m ==> x >= 100 + m ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100;\nloop invariant x >= 100 ==> m >= 0 ==> x - 1 >= 99 + m ==> x >= 100 + m ==> x >= 100 + m ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main()\n{\n  int x, m;\n  x = 100;\n  /*@\nloop invariant i1: 0 <= x <= 100;\n\n\nloop invariant i4: x >= 100 ==> x - 1 >= 99;\n\nloop invariant i6: x >= 100 ==> m >= 0 ==> x - 1 >= 99 + m ==> x >= 100 + m;\nloop invariant i7: x >= 100 ==> m >= 0 ==> x - 1 >= 99 + m ==> x >= 100 + m ==> x >= 100 + m ==> x >= 100;\nloop invariant i8: x >= 100 ==> m >= 0 ==> x - 1 >= 99 + m ==> x >= 100 + m ==> x >= 100 + m ==> x >= 100 ==> x >= 100;\nloop invariant i9: x >= 100 ==> m >= 0 ==> x - 1 >= 99 + m ==> x >= 100 + m ==> x >= 100 + m ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100;\nloop invariant i10: x >= 100 ==> m >= 0 ==> x - 1 >= 99 + m ==> x >= 100 + m ==> x >= 100 + m ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100;\nloop invariant i11: x >= 100 ==> m >= 0 ==> x - 1 >= 99 + m ==> x >= 100 + m ==> x >= 100 + m ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100;\nloop invariant i12: x >= 100 ==> m >= 0 ==> x - 1 >= 99 + m ==> x >= 100 + m ==> x >= 100 + m ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100;\nloop invariant i13: x >= 100 ==> m >= 0 ==> x - 1 >= 99 + m ==> x >= 100 + m ==> x >= 100 + m ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100;\nloop invariant i14: x >= 100 ==> m >= 0 ==> x - 1 >= 99 + m ==> x >= 100 + m ==> x >= 100 + m ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100;\nloop invariant i15: x >= 100 ==> m >= 0 ==> x - 1 >= 99 + m ==> x >= 100 + m ==> x >= 100 + m ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100;\nloop invariant i16: x >= 100 ==> m >= 0 ==> x - 1 >= 99 + m ==> x >= 100 + m ==> x >= 100 + m ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100;\n*/\nwhile(x > 0)\n  {\n    m = unknown_int();\n    x = x - 1;\n  }\n  {;\n//@ assert(x == 0);\n}\n    \n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant 0 <= m <= 100;\nloop invariant x - 1 >= 0 ==> m >= x - 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main()\n{\n  int x, m;\n  x = 100;\n  /*@\nloop invariant i1: 0 <= x <= 100;\n\n\n*/\nwhile(x > 0)\n  {\n    m = unknown_int();\n    x = x - 1;\n  }\n  {;\n//@ assert(x == 0);\n}\n    \n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant x >= 1;\nloop invariant x <= 100;\nloop invariant m >= 0;\nloop invariant m <= 100;\nloop invariant x - m >= 1;\nloop invariant x - m <= 100;\nloop invariant 1 <= x <= 100;\nloop invariant 0 <= m <= 100;\nloop invariant x - m >= 1;\nloop invariant x - m <= 100;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main()\n{\n  int x, m;\n  x = 100;\n  /*@\n\nloop invariant i2: x <= 100;\n\n\n\n\n\n\n*/\nwhile(x > 0)\n  {\n    m = unknown_int();\n    x = x - 1;\n  }\n  {;\n//@ assert(x == 0);\n}\n    \n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant x is divisible by 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main()\n{\n  int x, m;\n  x = 100;\n  /*@\nloop invariant i1: 0 <= x <= 100;\n\n*/\nwhile(x > 0)\n  {\n    m = unknown_int();\n    x = x - 1;\n  }\n  {;\n//@ assert(x == 0);\n}\n    \n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant 0 <= m <= 100;\nloop invariant x - 1 >= m;\nloop invariant x = 100 - (m - 1);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main()\n{\n  int x, m;\n  x = 100;\n  /*@\nloop invariant i1: 0 <= x <= 100;\n\n\n\n*/\nwhile(x > 0)\n  {\n    m = unknown_int();\n    x = x - 1;\n  }\n  {;\n//@ assert(x == 0);\n}\n    \n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant (m >= 0) ==> (x == 100 - m);\nloop invariant (m < 0) ==> (x == 100);\nloop invariant (m == 0) ==> (x == 100);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main()\n{\n  int x, m;\n  x = 100;\n  /*@\nloop invariant i1: 0 <= x <= 100;\n\n\n\n*/\nwhile(x > 0)\n  {\n    m = unknown_int();\n    x = x - 1;\n  }\n  {;\n//@ assert(x == 0);\n}\n    \n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant m >= 0;\nloop invariant m <= 100;\nloop invariant (x - 1) > 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main()\n{\n  int x, m;\n  x = 100;\n  /*@\nloop invariant i1: 0 <= x <= 100;\n\n\n\n*/\nwhile(x > 0)\n  {\n    m = unknown_int();\n    x = x - 1;\n  }\n  {;\n//@ assert(x == 0);\n}\n    \n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant x >= 0;\nloop invariant x <= 100;\nloop invariant m >= 0;\nloop invariant m <= RAND_MAX;\nloop invariant x == 100 - m;\nloop invariant x > 0 ==> x - 1 == x';\nloop invariant x' >= 0;\nloop invariant x' <= 100;\nloop invariant m >= 0;\nloop invariant m <= RAND_MAX;\nloop invariant x' == x - 1;\nloop invariant m == m';\nloop invariant x' == x - 1;\nloop invariant m' >= 0;\nloop invariant m' <= RAND_MAX;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main()\n{\n  int x, m;\n  x = 100;\n  /*@\nloop invariant i1: x >= 0;\nloop invariant i2: x <= 100;\nloop invariant i3: m >= 0;\nloop invariant i4: m <= RAND_MAX;\nloop invariant i5: x == 100 - m;\nloop invariant i6: x > 0 ==> x - 1 == x';\nloop invariant i7: x' >= 0;\nloop invariant i8: x' <= 100;\nloop invariant i9: x' == x - 1;\nloop invariant i10: m == m';\nloop invariant i11: m' >= 0;\nloop invariant i12: m' <= RAND_MAX;\n*/\nwhile(x > 0)\n  {\n    m = unknown_int();\n    x = x - 1;\n  }\n  {;\n//@ assert(x == 0);\n}\n    \n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant x > 0;\nloop invariant x >= 100;\nloop invariant x <= 100;\nloop invariant m >= 0;\nloop invariant m <= 100;\nloop invariant x - m == 100;\nloop invariant x - m == 100 ==> x >= 0;\nloop invariant x - m == 100 ==> x <= 100;\nloop invariant x - m == 100 ==> m >= 0;\nloop invariant x - m == 100 ==> m <= 100;\nloop invariant x - m == 100 ==> x >= 100;\nloop invariant x - m == 100 ==> x <= 100;\nloop invariant x - m == 100 ==> m >= 0;\nloop invariant x - m == 100 ==> m <= 100;\nloop invariant x - m == 100 ==> x >= 100;\nloop invariant x - m == 100 ==> x <= 100;\nloop invariant x - m == 100 ==> m >= 0;\nloop invariant x - m == 100 ==> m <= 100;\nloop invariant x - m == 100 ==> x >= 100;\nloop invariant x - m == 100 ==> x <= 100;\nloop invariant x - m == 100 ==> m >= 0;\nloop invariant x - m == 100 ==> m <= 100;\nloop invariant x - m == 100 ==> x >= 100;\nloop invariant x - m == 100 ==> x <= 100;\nloop invariant x - m == 100 ==> m >= 0;\nloop invariant x - m == 100 ==> m <= 100;\nloop invariant x - m == 100 ==> x >= 100;\nloop invariant x - m == 100 ==> x <= 100;\nloop invariant x - m == 100 ==> m >= 0;\nloop invariant x - m == 100 ==> m <= 100;\nloop invariant x - m == 100 ==> x >= 100;\nloop invariant x - m == 100 ==> x <= 100;\nloop invariant x - m == 100 ==> m >= 0;\nloop invariant x - m == 100 ==> m <= 100;\nloop invariant x - m == 100 ==> x >= 100;\nloop invariant x - m == 100 ==> x <= 100;\nloop invariant x - m == 100 ==> m >= 0;\nloop invariant x - m == 100 ==> m <= 100;\nloop invariant x - m == 100 ==> x >= 100;\nloop invariant x - m == 100 ==> x <= 100;\nloop invariant x - m == 100 ==> m >= 0;\nloop invariant x - m == 100 ==> m <= 100;\nloop invariant x - m == 100 ==> x >= 100;\nloop invariant x - m == 100 ==> x <= 100;\nloop invariant x - m == 100 ==> m >= 0;\nloop invariant x - m == 100 ==> m <= 100;\nloop invariant x - m == 100 ==> x >= 100;\nloop invariant x - m == 100 ==> x <= 100;\nloop invariant x - m == 100 ==> m >= 0;\nloop invariant x - m == 100 ==> m <= 100;\nloop invariant x - m == 100 ==> x >= 100;\nloop invariant x - m == 100 ==> x <= 100;\nloop invariant x - m == 100 ==> m >= 0;\nloop invariant x - m == 100 ==> m <= 100;\nloop invariant x - m == 100 ==> x >= 100;\nloop invariant x - m == 100 ==> x <= 100;\nloop invariant x - m == 100 ==> m >= 0;\nloop invariant x - m == 100 ==> m <= 100;\nloop invariant x - m == 100 ==> x >= 100;\nloop invariant x - m == 100 ==> x <= 100;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main()\n{\n  int x, m;\n  x = 100;\n  /*@\n\n\nloop invariant i3: x <= 100;\n\n\n\nloop invariant i7: x - m == 100 ==> x >= 0;\nloop invariant i8: x - m == 100 ==> x <= 100;\n\nloop invariant i10: x - m == 100 ==> m <= 100;\n\n*/\nwhile(x > 0)\n  {\n    m = unknown_int();\n    x = x - 1;\n  }\n  {;\n//@ assert(x == 0);\n}\n    \n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 100000;\nloop invariant y >= 0;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant 0 <= x <= 100000;\nloop invariant y >= 0;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main()\n{\n  int x, m;\n  x = 100;\n  /*@\nloop invariant i1: 0 <= x <= 100000;\n\n\n*/\nwhile(x > 0)\n  {\n    m = unknown_int();\n    x = x - 1;\n  }\n  {;\n//@ assert(x == 0);\n}\n    \n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant x == 100 - m;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main()\n{\n  int x, m;\n  x = 100;\n  /*@\nloop invariant i1: 0 <= x <= 100;\n\n*/\nwhile(x > 0)\n  {\n    m = unknown_int();\n    x = x - 1;\n  }\n  {;\n//@ assert(x == 0);\n}\n    \n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant x == (100 - (100 - x));\nloop invariant x >= 0;\nloop invariant x <= 100;\nloop invariant x == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main()\n{\n  int x, m;\n  x = 100;\n  /*@\nloop invariant i1: 0 <= x <= 100;\nloop invariant i2: x == (100 - (100 - x));\nloop invariant i3: x >= 0;\nloop invariant i4: x <= 100;\n\n*/\nwhile(x > 0)\n  {\n    m = unknown_int();\n    x = x - 1;\n  }\n  {;\n//@ assert(x == 0);\n}\n    \n}",
                "checker_output_after_prune": true
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "No CSV output dump found from Frama-C",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main()\n{\n  int x, m;\n  x = 100;\n  /*@\nloop invariant i1: 0 <= x <= 100;\nloop invariant i2: x == 100 - m;\nloop invariant i3: m <= x;\nloop invariant i4: x >= 1;\nloop invariant i5: m >= 0;\nloop invariant i6: m <= 100;\nloop invariant i7: 0 <= x <= 100; loop invariant x >= (100 - y) * y / 2; loop invariant x >= (100 - y) * y / 2 + 100 - y; loop invariant x >= (100 - y) * y / 2 + 100 - y + 1; loop invariant x >= (100 - y) * y / 2 + 100 - y + 1 + 1; loop invariant x >= (100 - y) * y / 2 + 100 - y + 1 + 1 + 1; loop invariant x >= (100 - y) * y / 2 + 100 - y + 1 + 1 + 1 + 1; loop invariant x >= (100 - y) * y / 2 + 100 - y + 1 + 1 + 1 + 1 + 1; loop invariant x >= (100 - y) * y / 2 + 100 - y + 1 + 1 + 1 + 1 + 1 + 1; loop invariant x >= (100 - y) * y / 2 + 100 - y + 1 + 1 + 1 + 1 + 1 + 1 + 1; loop invariant x >= (100 - y) * y / 2 + 100 - y + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1; loop invariant x >= (100 - y) * y / 2 + 100 - y + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1; loop invariant x >= (100 - y) * y / 2 + 100 - y + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1; loop invariant x >= (100 - y) * y / 2 + 100 - y + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1; loop invariant x >= (100 - y) * y / 2 + 100 - y + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1; loop invariant x >= (100 - y) * y / 2 + 100 - y + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1; loop invariant x >= (100 - y) * y / 2 + 100 - y + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1; loop invariant x >= (100 - y) * y / 2 + 100 - y + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1; loop invariant x >= (100 - y) * y / 2 + 100 - y + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1; loop invariant x >= (100 - y) * y / 2 + 100 - y + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1; loop invariant x >= (100 - y) * y / 2 + 100 - y + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1;\nloop invariant i8: x >= 100 ==> m >= 0;\nloop invariant i9: x >= 100 ==> m < 100;\nloop invariant i10: x >= 100 ==> x - 1 >= 99;\nloop invariant i11: x >= 100 ==> m >= 0 ==> x - 1 >= 99 + m;\nloop invariant i12: x >= 100 ==> m >= 0 ==> x - 1 >= 99 + m ==> x >= 100 + m;\nloop invariant i13: x >= 100 ==> m >= 0 ==> x - 1 >= 99 + m ==> x >= 100 + m ==> x >= 100 + m ==> x >= 100;\nloop invariant i14: x >= 100 ==> m >= 0 ==> x - 1 >= 99 + m ==> x >= 100 + m ==> x >= 100 + m ==> x >= 100 ==> x >= 100;\nloop invariant i15: x >= 100 ==> m >= 0 ==> x - 1 >= 99 + m ==> x >= 100 + m ==> x >= 100 + m ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100;\nloop invariant i16: x >= 100 ==> m >= 0 ==> x - 1 >= 99 + m ==> x >= 100 + m ==> x >= 100 + m ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100;\nloop invariant i17: x >= 100 ==> m >= 0 ==> x - 1 >= 99 + m ==> x >= 100 + m ==> x >= 100 + m ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100;\nloop invariant i18: x >= 100 ==> m >= 0 ==> x - 1 >= 99 + m ==> x >= 100 + m ==> x >= 100 + m ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100;\nloop invariant i19: x >= 100 ==> m >= 0 ==> x - 1 >= 99 + m ==> x >= 100 + m ==> x >= 100 + m ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100;\nloop invariant i20: x >= 100 ==> m >= 0 ==> x - 1 >= 99 + m ==> x >= 100 + m ==> x >= 100 + m ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100;\nloop invariant i21: x >= 100 ==> m >= 0 ==> x - 1 >= 99 + m ==> x >= 100 + m ==> x >= 100 + m ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100;\nloop invariant i22: x >= 100 ==> m >= 0 ==> x - 1 >= 99 + m ==> x >= 100 + m ==> x >= 100 + m ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100;\nloop invariant i23: 0 <= m <= 100;\nloop invariant i24: x - 1 >= 0 ==> m >= x - 1;\nloop invariant i25: x <= 100;\nloop invariant i26: x - m >= 1;\nloop invariant i27: x - m <= 100;\nloop invariant i28: 1 <= x <= 100;\nloop invariant i29: x is divisible by 1;\nloop invariant i30: x - 1 >= m;\nloop invariant i31: x = 100 - (m - 1);\nloop invariant i32: (m >= 0) ==> (x == 100 - m);\nloop invariant i33: (m < 0) ==> (x == 100);\nloop invariant i34: (m == 0) ==> (x == 100);\nloop invariant i35: (x - 1) > 0;\nloop invariant i36: x >= 0;\nloop invariant i37: m <= RAND_MAX;\nloop invariant i38: x > 0 ==> x - 1 == x';\nloop invariant i39: x' >= 0;\nloop invariant i40: x' <= 100;\nloop invariant i41: x' == x - 1;\nloop invariant i42: m == m';\nloop invariant i43: m' >= 0;\nloop invariant i44: m' <= RAND_MAX;\nloop invariant i45: x > 0;\nloop invariant i46: x >= 100;\nloop invariant i47: x - m == 100;\nloop invariant i48: x - m == 100 ==> x >= 0;\nloop invariant i49: x - m == 100 ==> x <= 100;\nloop invariant i50: x - m == 100 ==> m >= 0;\nloop invariant i51: x - m == 100 ==> m <= 100;\nloop invariant i52: x - m == 100 ==> x >= 100;\nloop invariant i53: 0 <= x <= 100000;\nloop invariant i54: y >= 0;\nloop invariant i55: x >= (1 + (y - 1) * y / 2);\nloop invariant i56: x == (100 - (100 - x));\nloop invariant i57: x == 0;\n*/\nwhile(x > 0)\n  {\n    m = unknown_int();\n    x = x - 1;\n  }\n  {;\n//@ assert(x == 0);\n}\n    \n}",
        "combined_annotation_num_solver_calls": 2,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main()\n{\n  int x, m;\n  x = 100;\n  /*@\nloop invariant i1: 0 <= x <= 100;\nloop invariant i2: x == 100 - m;\nloop invariant i3: m <= x;\nloop invariant i4: x >= 1;\nloop invariant i5: m >= 0;\nloop invariant i6: m <= 100;\nloop invariant i7: 0 <= x <= 100; loop invariant x >= (100 - y) * y / 2; loop invariant x >= (100 - y) * y / 2 + 100 - y; loop invariant x >= (100 - y) * y / 2 + 100 - y + 1; loop invariant x >= (100 - y) * y / 2 + 100 - y + 1 + 1; loop invariant x >= (100 - y) * y / 2 + 100 - y + 1 + 1 + 1; loop invariant x >= (100 - y) * y / 2 + 100 - y + 1 + 1 + 1 + 1; loop invariant x >= (100 - y) * y / 2 + 100 - y + 1 + 1 + 1 + 1 + 1; loop invariant x >= (100 - y) * y / 2 + 100 - y + 1 + 1 + 1 + 1 + 1 + 1; loop invariant x >= (100 - y) * y / 2 + 100 - y + 1 + 1 + 1 + 1 + 1 + 1 + 1; loop invariant x >= (100 - y) * y / 2 + 100 - y + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1; loop invariant x >= (100 - y) * y / 2 + 100 - y + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1; loop invariant x >= (100 - y) * y / 2 + 100 - y + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1; loop invariant x >= (100 - y) * y / 2 + 100 - y + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1; loop invariant x >= (100 - y) * y / 2 + 100 - y + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1; loop invariant x >= (100 - y) * y / 2 + 100 - y + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1; loop invariant x >= (100 - y) * y / 2 + 100 - y + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1; loop invariant x >= (100 - y) * y / 2 + 100 - y + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1; loop invariant x >= (100 - y) * y / 2 + 100 - y + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1; loop invariant x >= (100 - y) * y / 2 + 100 - y + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1; loop invariant x >= (100 - y) * y / 2 + 100 - y + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1;\nloop invariant i8: x >= 100 ==> m >= 0;\nloop invariant i9: x >= 100 ==> m < 100;\nloop invariant i10: x >= 100 ==> x - 1 >= 99;\nloop invariant i11: x >= 100 ==> m >= 0 ==> x - 1 >= 99 + m;\nloop invariant i12: x >= 100 ==> m >= 0 ==> x - 1 >= 99 + m ==> x >= 100 + m;\nloop invariant i13: x >= 100 ==> m >= 0 ==> x - 1 >= 99 + m ==> x >= 100 + m ==> x >= 100 + m ==> x >= 100;\nloop invariant i14: x >= 100 ==> m >= 0 ==> x - 1 >= 99 + m ==> x >= 100 + m ==> x >= 100 + m ==> x >= 100 ==> x >= 100;\nloop invariant i15: x >= 100 ==> m >= 0 ==> x - 1 >= 99 + m ==> x >= 100 + m ==> x >= 100 + m ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100;\nloop invariant i16: x >= 100 ==> m >= 0 ==> x - 1 >= 99 + m ==> x >= 100 + m ==> x >= 100 + m ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100;\nloop invariant i17: x >= 100 ==> m >= 0 ==> x - 1 >= 99 + m ==> x >= 100 + m ==> x >= 100 + m ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100;\nloop invariant i18: x >= 100 ==> m >= 0 ==> x - 1 >= 99 + m ==> x >= 100 + m ==> x >= 100 + m ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100;\nloop invariant i19: x >= 100 ==> m >= 0 ==> x - 1 >= 99 + m ==> x >= 100 + m ==> x >= 100 + m ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100;\nloop invariant i20: x >= 100 ==> m >= 0 ==> x - 1 >= 99 + m ==> x >= 100 + m ==> x >= 100 + m ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100;\nloop invariant i21: x >= 100 ==> m >= 0 ==> x - 1 >= 99 + m ==> x >= 100 + m ==> x >= 100 + m ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100;\nloop invariant i22: x >= 100 ==> m >= 0 ==> x - 1 >= 99 + m ==> x >= 100 + m ==> x >= 100 + m ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100 ==> x >= 100;\nloop invariant i23: 0 <= m <= 100;\nloop invariant i24: x - 1 >= 0 ==> m >= x - 1;\nloop invariant i25: x <= 100;\nloop invariant i26: x - m >= 1;\nloop invariant i27: x - m <= 100;\nloop invariant i28: 1 <= x <= 100;\nloop invariant i29: x is divisible by 1;\nloop invariant i30: x - 1 >= m;\nloop invariant i31: x = 100 - (m - 1);\nloop invariant i32: (m >= 0) ==> (x == 100 - m);\nloop invariant i33: (m < 0) ==> (x == 100);\nloop invariant i34: (m == 0) ==> (x == 100);\nloop invariant i35: (x - 1) > 0;\nloop invariant i36: x >= 0;\nloop invariant i37: m <= RAND_MAX;\nloop invariant i38: x > 0 ==> x - 1 == x';\nloop invariant i39: x' >= 0;\nloop invariant i40: x' <= 100;\nloop invariant i41: x' == x - 1;\nloop invariant i42: m == m';\nloop invariant i43: m' >= 0;\nloop invariant i44: m' <= RAND_MAX;\nloop invariant i45: x > 0;\nloop invariant i46: x >= 100;\nloop invariant i47: x - m == 100;\nloop invariant i48: x - m == 100 ==> x >= 0;\nloop invariant i49: x - m == 100 ==> x <= 100;\nloop invariant i50: x - m == 100 ==> m >= 0;\nloop invariant i51: x - m == 100 ==> m <= 100;\nloop invariant i52: x - m == 100 ==> x >= 100;\nloop invariant i53: 0 <= x <= 100000;\nloop invariant i54: y >= 0;\nloop invariant i55: x >= (1 + (y - 1) * y / 2);\nloop invariant i56: x == (100 - (100 - x));\nloop invariant i57: x == 0;\n*/\nwhile(x > 0)\n  {\n    m = unknown_int();\n    x = x - 1;\n  }\n  {;\n//@ assert(x == 0);\n}\n    \n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/split.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c"
        ],
        "skipped": [],
        "total": 73,
        "success_count": 62,
        "failure_count": 11,
        "success_rate": 0.8493150684931506
    }
}