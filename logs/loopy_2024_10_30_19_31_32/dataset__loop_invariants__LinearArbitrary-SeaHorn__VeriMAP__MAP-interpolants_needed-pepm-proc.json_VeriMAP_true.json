{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(){\n\n\tint x=0;\n\tint y=0;\n\n\twhile (unknown_int()) {\n\t\tif (unknown_int()) {\n\t\t\tx = x+1; \n\t\t\ty = y+2;\n\t\t} else if (unknown_int()) {\n\t\t\tif (x >= 4) {\n\t\t\t    x = x+1; \n\t\t\t    y = y+3; \n\t\t\t}\n\t\t} \n\t}\n\n    if(3*x < y)\n\t\tgoto ERROR;\n\t\n\treturn 0;\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\treturn -1;\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant 3*x >= y;\nloop invariant unknown_int() ==> x >= 0;\nloop invariant unknown_int() ==> y >= 0;\nloop invariant unknown_int() ==> 3*x >= y;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y >= x;\nloop invariant x <= y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x >= (x - 1) * (1 + (x - 1) / 2);\nloop invariant y >= (y - 1) * (1 + (y - 1) / 2);\nloop invariant x <= y;\nloop invariant x <= (x + 1) * (1 + (x + 1) / 2);\nloop invariant y <= (y + 1) * (1 + (y + 1) / 2);\nloop invariant x <= y;\nloop invariant x <= (x + 1) * (1 + (x + 1) / 2);\nloop invariant y <= (y + 1) * (1 + (y + 1) / 2);\nloop invariant x <= y;\nloop invariant x <= (x + 1) * (1 + (x + 1) / 2);\nloop invariant y <= (y + 1) * (1 + (y + 1) / 2);\nloop invariant x <= y;\nloop invariant x <= (x + 1) * (1 + (x + 1) / 2);\nloop invariant y <= (y + 1) * (1 + (y + 1) / 2);\nloop invariant x <= y;\nloop invariant x <= (x + 1) * (1 + (x + 1) / 2);\nloop invariant y <= (y + 1) * (1 + (y + 1) / 2);\nloop invariant x <= y;\nloop invariant x <= (x + 1) * (1 + (x + 1) / 2);\nloop invariant y <= (y + 1) * (1 + (y + 1) / 2);\nloop invariant x <= y;\nloop invariant x <= (x + 1) * (1 + (x + 1) / 2);\nloop invariant y <= (y + 1) * (1 + (y + 1) / 2);\nloop invariant x <= y;\nloop invariant x <= (x + 1) * (1 + (x + 1) / 2);\nloop invariant y <= (y + 1) * (1 + (y + 1) / 2);\nloop invariant x <= y;\nloop invariant x <= (x + 1) * (1 + (x + 1) / 2);\nloop invariant y <= (y + 1) * (1 + (y + 1) / 2);\nloop invariant x <= y;\nloop invariant x <= (x + 1) * (1 + (x + 1) / 2);\nloop invariant y <= (y + 1) * (1 + (y + 1) / 2);\nloop invariant x <= y;\nloop invariant x <= (x + 1) * (1 + (x + 1) / 2);\nloop invariant y <= (y + 1) * (1 + (y + 1) / 2);\nloop invariant x <= y;\nloop invariant x <= (x + 1) * (1 + (x + 1) / 2);\nloop invariant y <= (y + 1) * (1 + (y + 1) / 2);\nloop invariant x <= y;\nloop invariant x <= (x + 1) * (1 + (x + 1) / 2);\nloop invariant y <= (y + 1) * (1 + (y + 1) / 2);\nloop invariant x <= y;\nloop invariant x <= (x + 1) * (1 + (x + 1) / 2);\nloop invariant y <= (y + 1) * (1 + (y + 1) / 2);\nloop invariant x <= y;\nloop invariant x <= (x + 1) * (1 + (x + 1) / 2);\nloop invariant y <= (y + 1) * (1 + (y + 1) / 2);\nloop invariant x <= y;\nloop invariant x <= (x + 1) * (1 + (x + 1) / 2);\nloop invariant y <= (y + 1) * (1 + (y + 1) / 2);\nloop invariant x <= y;\nloop invariant x <= (x + 1) * (1 + (x + 1) / 2);\nloop invariant y <= (y + 1) * (1 + (y + 1) / 2);\nloop invariant x <= y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 3;\nloop invariant 0 <= y <= 6;\nloop invariant x <= y;\nloop invariant 0 <= x < 4 ==> (x <= y);\nloop invariant 0 <= y <= 6;\n*/\n```",
            "```\n/*@\nloop invariant ( y >= 0 );\nloop invariant ( x >= 0 );\nloop invariant ( y <= 2*x );\nloop invariant ( x <= y + 2 );\nloop invariant ( x >= y + 2 );\nloop invariant ( x >= 2*y );\nloop invariant ( x <= 2*y + 2 );\nloop invariant ( y >= 2*x );\nloop invariant ( y <= 2*x + 2 );\nloop invariant ( y >= 3*x - 2 );\nloop invariant ( y <= 3*x );\nloop invariant ( x >= 3*y/2 - 1 );\nloop invariant ( x <= 3*y/2 );\nloop invariant ( x >= 3*y/2 + 1 );\nloop invariant ( x <= 3*y/2 + 2 );\nloop invariant ( x >= 3*y/2 + 3 );\nloop invariant ( x <= 3*y/2 + 4 );\nloop invariant ( y >= 3*x/2 - 1 );\nloop invariant ( y <= 3*x/2 );\nloop invariant ( y >= 3*x/2 + 1 );\nloop invariant ( y <= 3*x/2 + 2 );\nloop invariant ( y >= 3*x/2 + 3 );\nloop invariant ( y <= 3*x/2 + 4 );\nloop invariant ( x >= 3*y/2 - 2 );\nloop invariant ( x <= 3*y/2 );\nloop invariant ( x >= 3*y/2 + 2 );\nloop invariant ( x <= 3*y/2 + 4 );\nloop invariant ( x >= 3*y/2 + 5 );\nloop invariant ( x <= 3*y/2 + 6 );\nloop invariant ( y >= 3*x/2 - 2 );\nloop invariant ( y <= 3*x/2 );\nloop invariant ( y >= 3*x/2 + 2 );\nloop invariant ( y <= 3*x/2 + 4 );\nloop invariant ( y >= 3*x/2 + 5 );\nloop invariant ( y <= 3*x/2 + 6 );\nloop invariant ( y >= 3*x/2 - 1 );\nloop invariant ( y <= 3*x/2 + 1 );\nloop invariant ( y >= 3*x/2 + 2 );\nloop invariant ( y <= 3*x/2 + 3 );\nloop invariant ( y >= 3*x/2 + 4 );\nloop invariant ( y <= 3*x/2 + 5 );\nloop invariant ( y >= 3*x/2 + 6 );\nloop invariant ( x >= 3*y/2 - 1 );\nloop invariant ( x <= 3*y/2 + 1 );\nloop invariant ( x >= 3*y/2 + 2 );\nloop invariant ( x <= 3*y/2 + 3 );\nloop invariant ( x >= 3*y/2 + 4 );\nloop invariant ( x <= 3*y/2 + 5 );\nloop invariant ( x >= 3*y/2 + 6 );\nloop invariant ( y >= 3*x/2 - 1 );\nloop invariant ( y <= 3*x/2 + 1 );\nloop invariant ( y >= 3*x/2 + 2 );\nloop invariant ( y <= 3*x/2 + 3 );\nloop invariant ( y >= 3*x/2 + 4 );\nloop invariant ( y <= 3*x/2 + 5 );\nloop invariant ( y >= 3*x/2 + 6 );\nloop invariant ( x >= 3*y/2 - 2 );\nloop invariant ( x <= 3*y/2 + 2 );\nloop invariant ( x >= 3*y/2 + 3 );\nloop invariant ( x <= 3*y/2 + 4 );\nloop invariant ( x >= 3*y/2 + 5 );\nloop invariant ( x <= 3*y/2 + 6 );\nloop invariant ( y >= 3*x/2 - 2 );\nloop invariant ( y <= 3*x/2 + 2 );\nloop invariant ( y >= 3*x/2 + 3 );\nloop invariant ( y <= 3*x/2 + 4 );\nloop invariant ( y >= 3*x/2 + 5 );\nloop invariant ( y <= 3*x/2 + 6 );\nloop invariant ( x >= 3*y/2 - 1 );\nloop invariant ( x <= 3*y/2 + 1 );\nloop invariant ( x >= 3*y/2 + 2 );\nloop invariant ( x <= 3*y/2 + 3 );\nloop invariant ( x >= 3*y/2 + 4 );\nloop invariant ( x <= 3*y/2 + 5 );\nloop invariant ( x >= 3*y/2 + 6 );\n*/\n```",
            "```\n/*@\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant x <= 3*y;\nloop invariant x <= 3*y;\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 12;\nloop invariant x <= y;\nloop invariant x == y || x < y;\nloop invariant x == y || x <= y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 3*y/2;\nloop invariant 0 <= y <= 3*x/2;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant 3*x >= y;\nloop invariant x <= 3*y/2;\nloop invariant y <= 3*x/2;\nloop invariant x < 3*y/2 ==> x <= 3*y/2;\nloop invariant y < 3*x/2 ==> y <= 3*x/2;\nloop invariant x >= 3*y/2 ==> x >= 3*y/2;\nloop invariant y >= 3*x/2 ==> y >= 3*x/2;\nloop invariant x < 3*y/2 ==> x >= 0;\nloop invariant y < 3*x/2 ==> y >= 0;\nloop invariant x >= 3*y/2 ==> x >= 4;\nloop invariant y >= 3*x/2 ==> y >= 3;\nloop invariant x >= 3*y/2 ==> x <= 3*y/2;\nloop invariant y >= 3*x/2 ==> y <= 3*x/2;\nloop invariant x < 3*y/2 ==> x < 3*y/2;\nloop invariant y < 3*x/2 ==> y < 3*x/2;\nloop invariant x >= 3*y/2 ==> x >= 4 ==> x >= 1;\nloop invariant y >= 3*x/2 ==> y >= 3 ==> y >= 1;\nloop invariant x >= 3*y/2 ==> x <= 3*y/2 ==> x <= 3*y/2;\nloop invariant y >= 3*x/2 ==> y <= 3*x/2 ==> y <= 3*x/2;\nloop invariant x < 3*y/2 ==> x >= 0 ==> x >= 0;\nloop invariant y < 3*x/2 ==> y >= 0 ==> y >= 0;\nloop invariant x >= 3*y/2 ==> x >= 4 ==> x >= 1 ==> x >= 1;\nloop invariant y >= 3*x/2 ==> y >= 3 ==> y >= 1 ==> y >= 1;\nloop invariant x >= 3*y/2 ==> x <= 3*y/2 ==> x <= 3*y/2 ==> x <= 3*y/2;\nloop invariant y >= 3*x/2 ==> y <= 3*x/2 ==> y <= 3*x/2 ==> y <= 3*x/2;\nloop invariant x < 3*y/2 ==> x >= 0 ==> x >= 0 ==> x >= 0;\nloop invariant y < 3*x/2 ==> y >= 0 ==> y >= 0 ==> y >= 0;\nloop invariant x >= 3*y/2 ==> x >= 4 ==> x >= 1 ==> x >= 1 ==> x >= 1;\nloop invariant y >= 3*x/2 ==> y >= 3 ==> y >= 1 ==> y >= 1 ==> y >= 1;\nloop invariant x >= 3*y/2 ==> x <= 3*y/2 ==> x <= 3*y/2 ==> x <= 3*y/2 ==> x <= 3*y/2;\nloop invariant y >= 3*x/2 ==> y <= 3*x/2 ==> y <= 3*x/2 ==> y <= 3*x/2 ==> y <= 3*x/2;\nloop invariant x < 3*y/2 ==> x >= 0 ==> x >= 0 ==> x >= 0 ==> x >= 0;\nloop invariant y < 3*x/2 ==> y >= 0 ==> y >= 0 ==> y >= 0 ==> y >= 0;\nloop invariant x >= 3*y/2 ==> x >= 4 ==> x >= 1 ==> x >= 1 ==> x >= 1 ==> x >= 1;\nloop invariant y >= 3*x/2 ==> y >= 3 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1;\nloop invariant x >= 3*y/2 ==> x <= 3*y/2 ==> x <= 3*y/2 ==> x <= 3*y/2 ==> x <= 3*y/2 ==> x <= 3*y/2;\nloop invariant y >= 3*x/2 ==> y <= 3*x/2 ==> y <= 3*x/2 ==> y <= 3*x/2 ==> y <= 3*x/2 ==> y <= 3*x/2;\nloop invariant x < 3*y/2 ==> x >= 0 ==> x >= 0 ==> x >= 0 ==> x >= 0 ==> x >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= (1 + (y - 1) * y / 2) ==> 3*x >= y;\nloop invariant (unknown_int() ==> x >= 4) ==> 3*x >= y;\nloop invariant (unknown_int() ==> x >= 4) ==> 3*x >= y ==> 3*x >= y;\nloop invariant (unknown_int() ==> x >= 4) ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y;\nloop invariant (unknown_int() ==> x >= 4) ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y;\nloop invariant (unknown_int() ==> x >= 4) ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y;\nloop invariant (unknown_int() ==> x >= 4) ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y;\nloop invariant (unknown_int() ==> x >= 4) ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y;\nloop invariant (unknown_int() ==> x >= 4) ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y;\nloop invariant (unknown_int() ==> x >= 4) ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y;\nloop invariant (unknown_int() ==> x >= 4) ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y;\nloop invariant (unknown_int() ==> x >= 4) ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y;\nloop invariant (unknown_int() ==> x >= 4) ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y;\nloop invariant (unknown_int() ==> x >= 4) ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y;\nloop invariant (unknown_int() ==> x >= 4) ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y;\nloop invariant (unknown_int() ==> x >= 4) ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant x == y ==> x == 0;\nloop invariant x != y ==> x >= 0;\nloop invariant x != y ==> y >= 0;\nloop invariant x != y ==> x < y;\nloop invariant x != y ==> x == y - 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 12;\nloop invariant y == 2*x || y == 3*x;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= unknown_int();\nloop invariant 0 <= y <= unknown_int();\nloop invariant (if (unknown_int() && unknown_int()) then 1 else 0) <= x <= (if (unknown_int() && unknown_int()) then 1 else 0) + (if (unknown_int() && unknown_int()) then 1 else 0);\nloop invariant (if (unknown_int() && unknown_int()) then 1 else 0) <= y <= (if (unknown_int() && unknown_int()) then 1 else 0) + (if (unknown_int() && unknown_int()) then 1 else 0);\nloop invariant (if (unknown_int() && unknown_int()) then 1 else 0) <= x <= (if (unknown_int() && unknown_int()) then 1 else 0) + (if (unknown_int() && unknown_int()) then 1 else 0);\nloop invariant (if (unknown_int() && unknown_int()) then 1 else 0) <= y <= (if (unknown_int() && unknown_int()) then 1 else 0) + (if (unknown_int() && unknown_int()) then 1 else 0);\nloop invariant (if (unknown_int() && unknown_int()) then 1 else 0) <= x <= (if (unknown_int() && unknown_int()) then 1 else 0) + (if (unknown_int() && unknown_int()) then 1 else 0);\nloop invariant (if (unknown_int() && unknown_int()) then 1 else 0) <= y <= (if (unknown_int() && unknown_int()) then 1 else 0) + (if (unknown_int() && unknown_int()) then 1 else 0);\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant 3*x >= y;\nloop invariant unknown_int() ==> x >= 0;\nloop invariant unknown_int() ==> y >= 0;\nloop invariant unknown_int() ==> 3*x >= y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(){\n\n\tint x=0;\n\tint y=0;\n\n\t/*@\nloop invariant i1: x >= 0;\nloop invariant i2: y >= 0;\nloop invariant i3: 3*x >= y;\n\n\n\n*/\nwhile (unknown_int()) {\n\t\tif (unknown_int()) {\n\t\t\tx = x+1; \n\t\t\ty = y+2;\n\t\t} else if (unknown_int()) {\n\t\t\tif (x >= 4) {\n\t\t\t    x = x+1; \n\t\t\t    y = y+3; \n\t\t\t}\n\t\t} \n\t}\n\n    if(3*x < y)\n\t\tgoto ERROR;\n\t\n\treturn 0;\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 1 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y >= x;\nloop invariant x <= y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(){\n\n\tint x=0;\n\tint y=0;\n\n\t/*@\n\n\nloop invariant i3: y >= 0;\nloop invariant i4: x >= 0;\nloop invariant i5: y >= x;\nloop invariant i6: x <= y;\n*/\nwhile (unknown_int()) {\n\t\tif (unknown_int()) {\n\t\t\tx = x+1; \n\t\t\ty = y+2;\n\t\t} else if (unknown_int()) {\n\t\t\tif (x >= 4) {\n\t\t\t    x = x+1; \n\t\t\t    y = y+3; \n\t\t\t}\n\t\t} \n\t}\n\n    if(3*x < y)\n\t\tgoto ERROR;\n\t\n\treturn 0;\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(){\n\n\tint x=0;\n\tint y=0;\n\n\t/*@\n\n\n*/\nwhile (unknown_int()) {\n\t\tif (unknown_int()) {\n\t\t\tx = x+1; \n\t\t\ty = y+2;\n\t\t} else if (unknown_int()) {\n\t\t\tif (x >= 4) {\n\t\t\t    x = x+1; \n\t\t\t    y = y+3; \n\t\t\t}\n\t\t} \n\t}\n\n    if(3*x < y)\n\t\tgoto ERROR;\n\t\n\treturn 0;\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(){\n\n\tint x=0;\n\tint y=0;\n\n\t/*@\n\n*/\nwhile (unknown_int()) {\n\t\tif (unknown_int()) {\n\t\t\tx = x+1; \n\t\t\ty = y+2;\n\t\t} else if (unknown_int()) {\n\t\t\tif (x >= 4) {\n\t\t\t    x = x+1; \n\t\t\t    y = y+3; \n\t\t\t}\n\t\t} \n\t}\n\n    if(3*x < y)\n\t\tgoto ERROR;\n\t\n\treturn 0;\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x >= (x - 1) * (1 + (x - 1) / 2);\nloop invariant y >= (y - 1) * (1 + (y - 1) / 2);\nloop invariant x <= y;\nloop invariant x <= (x + 1) * (1 + (x + 1) / 2);\nloop invariant y <= (y + 1) * (1 + (y + 1) / 2);\nloop invariant x <= y;\nloop invariant x <= (x + 1) * (1 + (x + 1) / 2);\nloop invariant y <= (y + 1) * (1 + (y + 1) / 2);\nloop invariant x <= y;\nloop invariant x <= (x + 1) * (1 + (x + 1) / 2);\nloop invariant y <= (y + 1) * (1 + (y + 1) / 2);\nloop invariant x <= y;\nloop invariant x <= (x + 1) * (1 + (x + 1) / 2);\nloop invariant y <= (y + 1) * (1 + (y + 1) / 2);\nloop invariant x <= y;\nloop invariant x <= (x + 1) * (1 + (x + 1) / 2);\nloop invariant y <= (y + 1) * (1 + (y + 1) / 2);\nloop invariant x <= y;\nloop invariant x <= (x + 1) * (1 + (x + 1) / 2);\nloop invariant y <= (y + 1) * (1 + (y + 1) / 2);\nloop invariant x <= y;\nloop invariant x <= (x + 1) * (1 + (x + 1) / 2);\nloop invariant y <= (y + 1) * (1 + (y + 1) / 2);\nloop invariant x <= y;\nloop invariant x <= (x + 1) * (1 + (x + 1) / 2);\nloop invariant y <= (y + 1) * (1 + (y + 1) / 2);\nloop invariant x <= y;\nloop invariant x <= (x + 1) * (1 + (x + 1) / 2);\nloop invariant y <= (y + 1) * (1 + (y + 1) / 2);\nloop invariant x <= y;\nloop invariant x <= (x + 1) * (1 + (x + 1) / 2);\nloop invariant y <= (y + 1) * (1 + (y + 1) / 2);\nloop invariant x <= y;\nloop invariant x <= (x + 1) * (1 + (x + 1) / 2);\nloop invariant y <= (y + 1) * (1 + (y + 1) / 2);\nloop invariant x <= y;\nloop invariant x <= (x + 1) * (1 + (x + 1) / 2);\nloop invariant y <= (y + 1) * (1 + (y + 1) / 2);\nloop invariant x <= y;\nloop invariant x <= (x + 1) * (1 + (x + 1) / 2);\nloop invariant y <= (y + 1) * (1 + (y + 1) / 2);\nloop invariant x <= y;\nloop invariant x <= (x + 1) * (1 + (x + 1) / 2);\nloop invariant y <= (y + 1) * (1 + (y + 1) / 2);\nloop invariant x <= y;\nloop invariant x <= (x + 1) * (1 + (x + 1) / 2);\nloop invariant y <= (y + 1) * (1 + (y + 1) / 2);\nloop invariant x <= y;\nloop invariant x <= (x + 1) * (1 + (x + 1) / 2);\nloop invariant y <= (y + 1) * (1 + (y + 1) / 2);\nloop invariant x <= y;\nloop invariant x <= (x + 1) * (1 + (x + 1) / 2);\nloop invariant y <= (y + 1) * (1 + (y + 1) / 2);\nloop invariant x <= y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(){\n\n\tint x=0;\n\tint y=0;\n\n\t/*@\nloop invariant i1: x >= 0;\nloop invariant i2: y >= 0;\n\n\nloop invariant i5: x <= y;\nloop invariant i6: x <= (x + 1) * (1 + (x + 1) / 2);\nloop invariant i7: y <= (y + 1) * (1 + (y + 1) / 2);\n*/\nwhile (unknown_int()) {\n\t\tif (unknown_int()) {\n\t\t\tx = x+1; \n\t\t\ty = y+2;\n\t\t} else if (unknown_int()) {\n\t\t\tif (x >= 4) {\n\t\t\t    x = x+1; \n\t\t\t    y = y+3; \n\t\t\t}\n\t\t} \n\t}\n\n    if(3*x < y)\n\t\tgoto ERROR;\n\t\n\treturn 0;\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 3;\nloop invariant 0 <= y <= 6;\nloop invariant x <= y;\nloop invariant 0 <= x < 4 ==> (x <= y);\nloop invariant 0 <= y <= 6;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(){\n\n\tint x=0;\n\tint y=0;\n\n\t/*@\n\n\nloop invariant i3: x <= y;\nloop invariant i4: 0 <= x < 4 ==> (x <= y);\n*/\nwhile (unknown_int()) {\n\t\tif (unknown_int()) {\n\t\t\tx = x+1; \n\t\t\ty = y+2;\n\t\t} else if (unknown_int()) {\n\t\t\tif (x >= 4) {\n\t\t\t    x = x+1; \n\t\t\t    y = y+3; \n\t\t\t}\n\t\t} \n\t}\n\n    if(3*x < y)\n\t\tgoto ERROR;\n\t\n\treturn 0;\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 22,
                "annotations": "```\n/*@\nloop invariant ( y >= 0 );\nloop invariant ( x >= 0 );\nloop invariant ( y <= 2*x );\nloop invariant ( x <= y + 2 );\nloop invariant ( x >= y + 2 );\nloop invariant ( x >= 2*y );\nloop invariant ( x <= 2*y + 2 );\nloop invariant ( y >= 2*x );\nloop invariant ( y <= 2*x + 2 );\nloop invariant ( y >= 3*x - 2 );\nloop invariant ( y <= 3*x );\nloop invariant ( x >= 3*y/2 - 1 );\nloop invariant ( x <= 3*y/2 );\nloop invariant ( x >= 3*y/2 + 1 );\nloop invariant ( x <= 3*y/2 + 2 );\nloop invariant ( x >= 3*y/2 + 3 );\nloop invariant ( x <= 3*y/2 + 4 );\nloop invariant ( y >= 3*x/2 - 1 );\nloop invariant ( y <= 3*x/2 );\nloop invariant ( y >= 3*x/2 + 1 );\nloop invariant ( y <= 3*x/2 + 2 );\nloop invariant ( y >= 3*x/2 + 3 );\nloop invariant ( y <= 3*x/2 + 4 );\nloop invariant ( x >= 3*y/2 - 2 );\nloop invariant ( x <= 3*y/2 );\nloop invariant ( x >= 3*y/2 + 2 );\nloop invariant ( x <= 3*y/2 + 4 );\nloop invariant ( x >= 3*y/2 + 5 );\nloop invariant ( x <= 3*y/2 + 6 );\nloop invariant ( y >= 3*x/2 - 2 );\nloop invariant ( y <= 3*x/2 );\nloop invariant ( y >= 3*x/2 + 2 );\nloop invariant ( y <= 3*x/2 + 4 );\nloop invariant ( y >= 3*x/2 + 5 );\nloop invariant ( y <= 3*x/2 + 6 );\nloop invariant ( y >= 3*x/2 - 1 );\nloop invariant ( y <= 3*x/2 + 1 );\nloop invariant ( y >= 3*x/2 + 2 );\nloop invariant ( y <= 3*x/2 + 3 );\nloop invariant ( y >= 3*x/2 + 4 );\nloop invariant ( y <= 3*x/2 + 5 );\nloop invariant ( y >= 3*x/2 + 6 );\nloop invariant ( x >= 3*y/2 - 1 );\nloop invariant ( x <= 3*y/2 + 1 );\nloop invariant ( x >= 3*y/2 + 2 );\nloop invariant ( x <= 3*y/2 + 3 );\nloop invariant ( x >= 3*y/2 + 4 );\nloop invariant ( x <= 3*y/2 + 5 );\nloop invariant ( x >= 3*y/2 + 6 );\nloop invariant ( y >= 3*x/2 - 1 );\nloop invariant ( y <= 3*x/2 + 1 );\nloop invariant ( y >= 3*x/2 + 2 );\nloop invariant ( y <= 3*x/2 + 3 );\nloop invariant ( y >= 3*x/2 + 4 );\nloop invariant ( y <= 3*x/2 + 5 );\nloop invariant ( y >= 3*x/2 + 6 );\nloop invariant ( x >= 3*y/2 - 2 );\nloop invariant ( x <= 3*y/2 + 2 );\nloop invariant ( x >= 3*y/2 + 3 );\nloop invariant ( x <= 3*y/2 + 4 );\nloop invariant ( x >= 3*y/2 + 5 );\nloop invariant ( x <= 3*y/2 + 6 );\nloop invariant ( y >= 3*x/2 - 2 );\nloop invariant ( y <= 3*x/2 + 2 );\nloop invariant ( y >= 3*x/2 + 3 );\nloop invariant ( y <= 3*x/2 + 4 );\nloop invariant ( y >= 3*x/2 + 5 );\nloop invariant ( y <= 3*x/2 + 6 );\nloop invariant ( x >= 3*y/2 - 1 );\nloop invariant ( x <= 3*y/2 + 1 );\nloop invariant ( x >= 3*y/2 + 2 );\nloop invariant ( x <= 3*y/2 + 3 );\nloop invariant ( x >= 3*y/2 + 4 );\nloop invariant ( x <= 3*y/2 + 5 );\nloop invariant ( x >= 3*y/2 + 6 );\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(){\n\n\tint x=0;\n\tint y=0;\n\n\t/*@\nloop invariant i1: ( y >= 0 );\nloop invariant i2: ( x >= 0 );\n\nloop invariant i4: ( x <= y + 2 );\n\n\nloop invariant i7: ( x <= 2*y + 2 );\nloop invariant i8: ( y >= 2*x );\n\n\nloop invariant i11: ( y <= 3*x );\n\nloop invariant i13: ( x <= 3*y/2 );\n\nloop invariant i15: ( x <= 3*y/2 + 2 );\n\nloop invariant i17: ( x <= 3*y/2 + 4 );\nloop invariant i18: ( y >= 3*x/2 - 1 );\n\n\n\n\n\n\n\n\nloop invariant i27: ( x <= 3*y/2 + 6 );\nloop invariant i28: ( y >= 3*x/2 - 2 );\n\n\n\n\n\n\n\n\nloop invariant i37: ( x <= 3*y/2 + 1 );\nloop invariant i38: ( x <= 3*y/2 + 3 );\n\nloop invariant i40: ( x <= 3*y/2 + 5 );\n\n*/\nwhile (unknown_int()) {\n\t\tif (unknown_int()) {\n\t\t\tx = x+1; \n\t\t\ty = y+2;\n\t\t} else if (unknown_int()) {\n\t\t\tif (x >= 4) {\n\t\t\t    x = x+1; \n\t\t\t    y = y+3; \n\t\t\t}\n\t\t} \n\t}\n\n    if(3*x < y)\n\t\tgoto ERROR;\n\t\n\treturn 0;\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant x <= 3*y;\nloop invariant x <= 3*y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(){\n\n\tint x=0;\n\tint y=0;\n\n\t/*@\nloop invariant i1: y >= 0;\nloop invariant i2: x >= 0;\nloop invariant i3: x <= 3*y;\n*/\nwhile (unknown_int()) {\n\t\tif (unknown_int()) {\n\t\t\tx = x+1; \n\t\t\ty = y+2;\n\t\t} else if (unknown_int()) {\n\t\t\tif (x >= 4) {\n\t\t\t    x = x+1; \n\t\t\t    y = y+3; \n\t\t\t}\n\t\t} \n\t}\n\n    if(3*x < y)\n\t\tgoto ERROR;\n\t\n\treturn 0;\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(){\n\n\tint x=0;\n\tint y=0;\n\n\t/*@\n\n*/\nwhile (unknown_int()) {\n\t\tif (unknown_int()) {\n\t\t\tx = x+1; \n\t\t\ty = y+2;\n\t\t} else if (unknown_int()) {\n\t\t\tif (x >= 4) {\n\t\t\t    x = x+1; \n\t\t\t    y = y+3; \n\t\t\t}\n\t\t} \n\t}\n\n    if(3*x < y)\n\t\tgoto ERROR;\n\t\n\treturn 0;\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 12;\nloop invariant x <= y;\nloop invariant x == y || x < y;\nloop invariant x == y || x <= y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(){\n\n\tint x=0;\n\tint y=0;\n\n\t/*@\n\n\nloop invariant i3: x <= y;\nloop invariant i4: x == y || x < y;\nloop invariant i5: x == y || x <= y;\n*/\nwhile (unknown_int()) {\n\t\tif (unknown_int()) {\n\t\t\tx = x+1; \n\t\t\ty = y+2;\n\t\t} else if (unknown_int()) {\n\t\t\tif (x >= 4) {\n\t\t\t    x = x+1; \n\t\t\t    y = y+3; \n\t\t\t}\n\t\t} \n\t}\n\n    if(3*x < y)\n\t\tgoto ERROR;\n\t\n\treturn 0;\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 3*y/2;\nloop invariant 0 <= y <= 3*x/2;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant 3*x >= y;\nloop invariant x <= 3*y/2;\nloop invariant y <= 3*x/2;\nloop invariant x < 3*y/2 ==> x <= 3*y/2;\nloop invariant y < 3*x/2 ==> y <= 3*x/2;\nloop invariant x >= 3*y/2 ==> x >= 3*y/2;\nloop invariant y >= 3*x/2 ==> y >= 3*x/2;\nloop invariant x < 3*y/2 ==> x >= 0;\nloop invariant y < 3*x/2 ==> y >= 0;\nloop invariant x >= 3*y/2 ==> x >= 4;\nloop invariant y >= 3*x/2 ==> y >= 3;\nloop invariant x >= 3*y/2 ==> x <= 3*y/2;\nloop invariant y >= 3*x/2 ==> y <= 3*x/2;\nloop invariant x < 3*y/2 ==> x < 3*y/2;\nloop invariant y < 3*x/2 ==> y < 3*x/2;\nloop invariant x >= 3*y/2 ==> x >= 4 ==> x >= 1;\nloop invariant y >= 3*x/2 ==> y >= 3 ==> y >= 1;\nloop invariant x >= 3*y/2 ==> x <= 3*y/2 ==> x <= 3*y/2;\nloop invariant y >= 3*x/2 ==> y <= 3*x/2 ==> y <= 3*x/2;\nloop invariant x < 3*y/2 ==> x >= 0 ==> x >= 0;\nloop invariant y < 3*x/2 ==> y >= 0 ==> y >= 0;\nloop invariant x >= 3*y/2 ==> x >= 4 ==> x >= 1 ==> x >= 1;\nloop invariant y >= 3*x/2 ==> y >= 3 ==> y >= 1 ==> y >= 1;\nloop invariant x >= 3*y/2 ==> x <= 3*y/2 ==> x <= 3*y/2 ==> x <= 3*y/2;\nloop invariant y >= 3*x/2 ==> y <= 3*x/2 ==> y <= 3*x/2 ==> y <= 3*x/2;\nloop invariant x < 3*y/2 ==> x >= 0 ==> x >= 0 ==> x >= 0;\nloop invariant y < 3*x/2 ==> y >= 0 ==> y >= 0 ==> y >= 0;\nloop invariant x >= 3*y/2 ==> x >= 4 ==> x >= 1 ==> x >= 1 ==> x >= 1;\nloop invariant y >= 3*x/2 ==> y >= 3 ==> y >= 1 ==> y >= 1 ==> y >= 1;\nloop invariant x >= 3*y/2 ==> x <= 3*y/2 ==> x <= 3*y/2 ==> x <= 3*y/2 ==> x <= 3*y/2;\nloop invariant y >= 3*x/2 ==> y <= 3*x/2 ==> y <= 3*x/2 ==> y <= 3*x/2 ==> y <= 3*x/2;\nloop invariant x < 3*y/2 ==> x >= 0 ==> x >= 0 ==> x >= 0 ==> x >= 0;\nloop invariant y < 3*x/2 ==> y >= 0 ==> y >= 0 ==> y >= 0 ==> y >= 0;\nloop invariant x >= 3*y/2 ==> x >= 4 ==> x >= 1 ==> x >= 1 ==> x >= 1 ==> x >= 1;\nloop invariant y >= 3*x/2 ==> y >= 3 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1;\nloop invariant x >= 3*y/2 ==> x <= 3*y/2 ==> x <= 3*y/2 ==> x <= 3*y/2 ==> x <= 3*y/2 ==> x <= 3*y/2;\nloop invariant y >= 3*x/2 ==> y <= 3*x/2 ==> y <= 3*x/2 ==> y <= 3*x/2 ==> y <= 3*x/2 ==> y <= 3*x/2;\nloop invariant x < 3*y/2 ==> x >= 0 ==> x >= 0 ==> x >= 0 ==> x >= 0 ==> x >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(){\n\n\tint x=0;\n\tint y=0;\n\n\t/*@\nloop invariant i1: 0 <= x <= 3*y/2;\n\nloop invariant i3: x >= 0;\nloop invariant i4: y >= 0;\nloop invariant i5: 3*x >= y;\nloop invariant i6: x <= 3*y/2;\n\nloop invariant i8: x < 3*y/2 ==> x <= 3*y/2;\nloop invariant i9: y < 3*x/2 ==> y <= 3*x/2;\nloop invariant i10: x >= 3*y/2 ==> x >= 3*y/2;\nloop invariant i11: y >= 3*x/2 ==> y >= 3*x/2;\nloop invariant i12: x < 3*y/2 ==> x >= 0;\nloop invariant i13: y < 3*x/2 ==> y >= 0;\n\n\nloop invariant i16: x >= 3*y/2 ==> x <= 3*y/2;\n\nloop invariant i18: x < 3*y/2 ==> x < 3*y/2;\nloop invariant i19: y < 3*x/2 ==> y < 3*x/2;\nloop invariant i20: x >= 3*y/2 ==> x >= 4 ==> x >= 1;\nloop invariant i21: y >= 3*x/2 ==> y >= 3 ==> y >= 1;\nloop invariant i22: x >= 3*y/2 ==> x <= 3*y/2 ==> x <= 3*y/2;\nloop invariant i23: y >= 3*x/2 ==> y <= 3*x/2 ==> y <= 3*x/2;\nloop invariant i24: x < 3*y/2 ==> x >= 0 ==> x >= 0;\nloop invariant i25: y < 3*x/2 ==> y >= 0 ==> y >= 0;\nloop invariant i26: x >= 3*y/2 ==> x >= 4 ==> x >= 1 ==> x >= 1;\nloop invariant i27: y >= 3*x/2 ==> y >= 3 ==> y >= 1 ==> y >= 1;\nloop invariant i28: x >= 3*y/2 ==> x <= 3*y/2 ==> x <= 3*y/2 ==> x <= 3*y/2;\nloop invariant i29: y >= 3*x/2 ==> y <= 3*x/2 ==> y <= 3*x/2 ==> y <= 3*x/2;\nloop invariant i30: x < 3*y/2 ==> x >= 0 ==> x >= 0 ==> x >= 0;\nloop invariant i31: y < 3*x/2 ==> y >= 0 ==> y >= 0 ==> y >= 0;\nloop invariant i32: x >= 3*y/2 ==> x >= 4 ==> x >= 1 ==> x >= 1 ==> x >= 1;\nloop invariant i33: y >= 3*x/2 ==> y >= 3 ==> y >= 1 ==> y >= 1 ==> y >= 1;\nloop invariant i34: x >= 3*y/2 ==> x <= 3*y/2 ==> x <= 3*y/2 ==> x <= 3*y/2 ==> x <= 3*y/2;\nloop invariant i35: y >= 3*x/2 ==> y <= 3*x/2 ==> y <= 3*x/2 ==> y <= 3*x/2 ==> y <= 3*x/2;\nloop invariant i36: x < 3*y/2 ==> x >= 0 ==> x >= 0 ==> x >= 0 ==> x >= 0;\nloop invariant i37: y < 3*x/2 ==> y >= 0 ==> y >= 0 ==> y >= 0 ==> y >= 0;\nloop invariant i38: x >= 3*y/2 ==> x >= 4 ==> x >= 1 ==> x >= 1 ==> x >= 1 ==> x >= 1;\nloop invariant i39: y >= 3*x/2 ==> y >= 3 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1;\nloop invariant i40: x >= 3*y/2 ==> x <= 3*y/2 ==> x <= 3*y/2 ==> x <= 3*y/2 ==> x <= 3*y/2 ==> x <= 3*y/2;\nloop invariant i41: y >= 3*x/2 ==> y <= 3*x/2 ==> y <= 3*x/2 ==> y <= 3*x/2 ==> y <= 3*x/2 ==> y <= 3*x/2;\nloop invariant i42: x < 3*y/2 ==> x >= 0 ==> x >= 0 ==> x >= 0 ==> x >= 0 ==> x >= 0;\n*/\nwhile (unknown_int()) {\n\t\tif (unknown_int()) {\n\t\t\tx = x+1; \n\t\t\ty = y+2;\n\t\t} else if (unknown_int()) {\n\t\t\tif (x >= 4) {\n\t\t\t    x = x+1; \n\t\t\t    y = y+3; \n\t\t\t}\n\t\t} \n\t}\n\n    if(3*x < y)\n\t\tgoto ERROR;\n\t\n\treturn 0;\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 18,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= (1 + (y - 1) * y / 2) ==> 3*x >= y;\nloop invariant (unknown_int() ==> x >= 4) ==> 3*x >= y;\nloop invariant (unknown_int() ==> x >= 4) ==> 3*x >= y ==> 3*x >= y;\nloop invariant (unknown_int() ==> x >= 4) ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y;\nloop invariant (unknown_int() ==> x >= 4) ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y;\nloop invariant (unknown_int() ==> x >= 4) ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y;\nloop invariant (unknown_int() ==> x >= 4) ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y;\nloop invariant (unknown_int() ==> x >= 4) ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y;\nloop invariant (unknown_int() ==> x >= 4) ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y;\nloop invariant (unknown_int() ==> x >= 4) ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y;\nloop invariant (unknown_int() ==> x >= 4) ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y;\nloop invariant (unknown_int() ==> x >= 4) ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y;\nloop invariant (unknown_int() ==> x >= 4) ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y;\nloop invariant (unknown_int() ==> x >= 4) ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y;\nloop invariant (unknown_int() ==> x >= 4) ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y;\nloop invariant (unknown_int() ==> x >= 4) ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(){\n\n\tint x=0;\n\tint y=0;\n\n\t/*@\n\n\nloop invariant i3: x >= (1 + (y - 1) * y / 2) ==> 3*x >= y;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown_int()) {\n\t\tif (unknown_int()) {\n\t\t\tx = x+1; \n\t\t\ty = y+2;\n\t\t} else if (unknown_int()) {\n\t\t\tif (x >= 4) {\n\t\t\t    x = x+1; \n\t\t\t    y = y+3; \n\t\t\t}\n\t\t} \n\t}\n\n    if(3*x < y)\n\t\tgoto ERROR;\n\t\n\treturn 0;\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant x == y ==> x == 0;\nloop invariant x != y ==> x >= 0;\nloop invariant x != y ==> y >= 0;\nloop invariant x != y ==> x < y;\nloop invariant x != y ==> x == y - 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(){\n\n\tint x=0;\n\tint y=0;\n\n\t/*@\nloop invariant i1: 0 <= x;\nloop invariant i2: 0 <= y;\nloop invariant i3: x == y ==> x == 0;\nloop invariant i4: x != y ==> x >= 0;\nloop invariant i5: x != y ==> y >= 0;\nloop invariant i6: x != y ==> x < y;\n\n*/\nwhile (unknown_int()) {\n\t\tif (unknown_int()) {\n\t\t\tx = x+1; \n\t\t\ty = y+2;\n\t\t} else if (unknown_int()) {\n\t\t\tif (x >= 4) {\n\t\t\t    x = x+1; \n\t\t\t    y = y+3; \n\t\t\t}\n\t\t} \n\t}\n\n    if(3*x < y)\n\t\tgoto ERROR;\n\t\n\treturn 0;\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 12;\nloop invariant y == 2*x || y == 3*x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(){\n\n\tint x=0;\n\tint y=0;\n\n\t/*@\n\n\n\n*/\nwhile (unknown_int()) {\n\t\tif (unknown_int()) {\n\t\t\tx = x+1; \n\t\t\ty = y+2;\n\t\t} else if (unknown_int()) {\n\t\t\tif (x >= 4) {\n\t\t\t    x = x+1; \n\t\t\t    y = y+3; \n\t\t\t}\n\t\t} \n\t}\n\n    if(3*x < y)\n\t\tgoto ERROR;\n\t\n\treturn 0;\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= unknown_int();\nloop invariant 0 <= y <= unknown_int();\nloop invariant (if (unknown_int() && unknown_int()) then 1 else 0) <= x <= (if (unknown_int() && unknown_int()) then 1 else 0) + (if (unknown_int() && unknown_int()) then 1 else 0);\nloop invariant (if (unknown_int() && unknown_int()) then 1 else 0) <= y <= (if (unknown_int() && unknown_int()) then 1 else 0) + (if (unknown_int() && unknown_int()) then 1 else 0);\nloop invariant (if (unknown_int() && unknown_int()) then 1 else 0) <= x <= (if (unknown_int() && unknown_int()) then 1 else 0) + (if (unknown_int() && unknown_int()) then 1 else 0);\nloop invariant (if (unknown_int() && unknown_int()) then 1 else 0) <= y <= (if (unknown_int() && unknown_int()) then 1 else 0) + (if (unknown_int() && unknown_int()) then 1 else 0);\nloop invariant (if (unknown_int() && unknown_int()) then 1 else 0) <= x <= (if (unknown_int() && unknown_int()) then 1 else 0) + (if (unknown_int() && unknown_int()) then 1 else 0);\nloop invariant (if (unknown_int() && unknown_int()) then 1 else 0) <= y <= (if (unknown_int() && unknown_int()) then 1 else 0) + (if (unknown_int() && unknown_int()) then 1 else 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(){\n\n\tint x=0;\n\tint y=0;\n\n\t/*@\n\n\n\n\n*/\nwhile (unknown_int()) {\n\t\tif (unknown_int()) {\n\t\t\tx = x+1; \n\t\t\ty = y+2;\n\t\t} else if (unknown_int()) {\n\t\t\tif (x >= 4) {\n\t\t\t    x = x+1; \n\t\t\t    y = y+3; \n\t\t\t}\n\t\t} \n\t}\n\n    if(3*x < y)\n\t\tgoto ERROR;\n\t\n\treturn 0;\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 18: unexpected token ')'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(){\n\n\tint x=0;\n\tint y=0;\n\n\t/*@\nloop invariant i1: x >= 0;\nloop invariant i2: y >= 0;\nloop invariant i3: 3*x >= y;\nloop invariant i4: unknown_int() ==> x >= 0;\nloop invariant i5: unknown_int() ==> y >= 0;\nloop invariant i6: unknown_int() ==> 3*x >= y;\nloop invariant i7: 1 <= y <= 100000;\nloop invariant i8: x >= (1 + (y - 1) * y / 2);\nloop invariant i9: y >= x;\nloop invariant i10: x <= y;\nloop invariant i11: 0 <= y <= 100000;\nloop invariant i12: x >= (x - 1) * (1 + (x - 1) / 2);\nloop invariant i13: y >= (y - 1) * (1 + (y - 1) / 2);\nloop invariant i14: x <= (x + 1) * (1 + (x + 1) / 2);\nloop invariant i15: y <= (y + 1) * (1 + (y + 1) / 2);\nloop invariant i16: 0 <= x <= 3;\nloop invariant i17: 0 <= y <= 6;\nloop invariant i18: 0 <= x < 4 ==> (x <= y);\nloop invariant i19: ( y >= 0 );\nloop invariant i20: ( x >= 0 );\nloop invariant i21: ( y <= 2*x );\nloop invariant i22: ( x <= y + 2 );\nloop invariant i23: ( x >= y + 2 );\nloop invariant i24: ( x >= 2*y );\nloop invariant i25: ( x <= 2*y + 2 );\nloop invariant i26: ( y >= 2*x );\nloop invariant i27: ( y <= 2*x + 2 );\nloop invariant i28: ( y >= 3*x - 2 );\nloop invariant i29: ( y <= 3*x );\nloop invariant i30: ( x >= 3*y/2 - 1 );\nloop invariant i31: ( x <= 3*y/2 );\nloop invariant i32: ( x >= 3*y/2 + 1 );\nloop invariant i33: ( x <= 3*y/2 + 2 );\nloop invariant i34: ( x >= 3*y/2 + 3 );\nloop invariant i35: ( x <= 3*y/2 + 4 );\nloop invariant i36: ( y >= 3*x/2 - 1 );\nloop invariant i37: ( y <= 3*x/2 );\nloop invariant i38: ( y >= 3*x/2 + 1 );\nloop invariant i39: ( y <= 3*x/2 + 2 );\nloop invariant i40: ( y >= 3*x/2 + 3 );\nloop invariant i41: ( y <= 3*x/2 + 4 );\nloop invariant i42: ( x >= 3*y/2 - 2 );\nloop invariant i43: ( x >= 3*y/2 + 2 );\nloop invariant i44: ( x >= 3*y/2 + 5 );\nloop invariant i45: ( x <= 3*y/2 + 6 );\nloop invariant i46: ( y >= 3*x/2 - 2 );\nloop invariant i47: ( y >= 3*x/2 + 2 );\nloop invariant i48: ( y >= 3*x/2 + 5 );\nloop invariant i49: ( y <= 3*x/2 + 6 );\nloop invariant i50: ( y <= 3*x/2 + 1 );\nloop invariant i51: ( y <= 3*x/2 + 3 );\nloop invariant i52: ( y >= 3*x/2 + 4 );\nloop invariant i53: ( y <= 3*x/2 + 5 );\nloop invariant i54: ( y >= 3*x/2 + 6 );\nloop invariant i55: ( x <= 3*y/2 + 1 );\nloop invariant i56: ( x <= 3*y/2 + 3 );\nloop invariant i57: ( x >= 3*y/2 + 4 );\nloop invariant i58: ( x <= 3*y/2 + 5 );\nloop invariant i59: ( x >= 3*y/2 + 6 );\nloop invariant i60: x <= 3*y;\nloop invariant i61: 0 <= x <= 4;\nloop invariant i62: 0 <= y <= 12;\nloop invariant i63: x == y || x < y;\nloop invariant i64: x == y || x <= y;\nloop invariant i65: 0 <= x <= 3*y/2;\nloop invariant i66: 0 <= y <= 3*x/2;\nloop invariant i67: x <= 3*y/2;\nloop invariant i68: y <= 3*x/2;\nloop invariant i69: x < 3*y/2 ==> x <= 3*y/2;\nloop invariant i70: y < 3*x/2 ==> y <= 3*x/2;\nloop invariant i71: x >= 3*y/2 ==> x >= 3*y/2;\nloop invariant i72: y >= 3*x/2 ==> y >= 3*x/2;\nloop invariant i73: x < 3*y/2 ==> x >= 0;\nloop invariant i74: y < 3*x/2 ==> y >= 0;\nloop invariant i75: x >= 3*y/2 ==> x >= 4;\nloop invariant i76: y >= 3*x/2 ==> y >= 3;\nloop invariant i77: x >= 3*y/2 ==> x <= 3*y/2;\nloop invariant i78: y >= 3*x/2 ==> y <= 3*x/2;\nloop invariant i79: x < 3*y/2 ==> x < 3*y/2;\nloop invariant i80: y < 3*x/2 ==> y < 3*x/2;\nloop invariant i81: x >= 3*y/2 ==> x >= 4 ==> x >= 1;\nloop invariant i82: y >= 3*x/2 ==> y >= 3 ==> y >= 1;\nloop invariant i83: x >= 3*y/2 ==> x <= 3*y/2 ==> x <= 3*y/2;\nloop invariant i84: y >= 3*x/2 ==> y <= 3*x/2 ==> y <= 3*x/2;\nloop invariant i85: x < 3*y/2 ==> x >= 0 ==> x >= 0;\nloop invariant i86: y < 3*x/2 ==> y >= 0 ==> y >= 0;\nloop invariant i87: x >= 3*y/2 ==> x >= 4 ==> x >= 1 ==> x >= 1;\nloop invariant i88: y >= 3*x/2 ==> y >= 3 ==> y >= 1 ==> y >= 1;\nloop invariant i89: x >= 3*y/2 ==> x <= 3*y/2 ==> x <= 3*y/2 ==> x <= 3*y/2;\nloop invariant i90: y >= 3*x/2 ==> y <= 3*x/2 ==> y <= 3*x/2 ==> y <= 3*x/2;\nloop invariant i91: x < 3*y/2 ==> x >= 0 ==> x >= 0 ==> x >= 0;\nloop invariant i92: y < 3*x/2 ==> y >= 0 ==> y >= 0 ==> y >= 0;\nloop invariant i93: x >= 3*y/2 ==> x >= 4 ==> x >= 1 ==> x >= 1 ==> x >= 1;\nloop invariant i94: y >= 3*x/2 ==> y >= 3 ==> y >= 1 ==> y >= 1 ==> y >= 1;\nloop invariant i95: x >= 3*y/2 ==> x <= 3*y/2 ==> x <= 3*y/2 ==> x <= 3*y/2 ==> x <= 3*y/2;\nloop invariant i96: y >= 3*x/2 ==> y <= 3*x/2 ==> y <= 3*x/2 ==> y <= 3*x/2 ==> y <= 3*x/2;\nloop invariant i97: x < 3*y/2 ==> x >= 0 ==> x >= 0 ==> x >= 0 ==> x >= 0;\nloop invariant i98: y < 3*x/2 ==> y >= 0 ==> y >= 0 ==> y >= 0 ==> y >= 0;\nloop invariant i99: x >= 3*y/2 ==> x >= 4 ==> x >= 1 ==> x >= 1 ==> x >= 1 ==> x >= 1;\nloop invariant i100: y >= 3*x/2 ==> y >= 3 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1;\nloop invariant i101: x >= 3*y/2 ==> x <= 3*y/2 ==> x <= 3*y/2 ==> x <= 3*y/2 ==> x <= 3*y/2 ==> x <= 3*y/2;\nloop invariant i102: y >= 3*x/2 ==> y <= 3*x/2 ==> y <= 3*x/2 ==> y <= 3*x/2 ==> y <= 3*x/2 ==> y <= 3*x/2;\nloop invariant i103: x < 3*y/2 ==> x >= 0 ==> x >= 0 ==> x >= 0 ==> x >= 0 ==> x >= 0;\nloop invariant i104: x >= (1 + (y - 1) * y / 2) ==> 3*x >= y;\nloop invariant i105: (unknown_int() ==> x >= 4) ==> 3*x >= y;\nloop invariant i106: (unknown_int() ==> x >= 4) ==> 3*x >= y ==> 3*x >= y;\nloop invariant i107: (unknown_int() ==> x >= 4) ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y;\nloop invariant i108: (unknown_int() ==> x >= 4) ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y;\nloop invariant i109: (unknown_int() ==> x >= 4) ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y;\nloop invariant i110: (unknown_int() ==> x >= 4) ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y;\nloop invariant i111: (unknown_int() ==> x >= 4) ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y;\nloop invariant i112: (unknown_int() ==> x >= 4) ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y;\nloop invariant i113: (unknown_int() ==> x >= 4) ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y;\nloop invariant i114: (unknown_int() ==> x >= 4) ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y;\nloop invariant i115: (unknown_int() ==> x >= 4) ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y;\nloop invariant i116: (unknown_int() ==> x >= 4) ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y;\nloop invariant i117: (unknown_int() ==> x >= 4) ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y;\nloop invariant i118: (unknown_int() ==> x >= 4) ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y;\nloop invariant i119: (unknown_int() ==> x >= 4) ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y ==> 3*x >= y;\nloop invariant i120: 0 <= x;\nloop invariant i121: 0 <= y;\nloop invariant i122: x == y ==> x == 0;\nloop invariant i123: x != y ==> x >= 0;\nloop invariant i124: x != y ==> y >= 0;\nloop invariant i125: x != y ==> x < y;\nloop invariant i126: x != y ==> x == y - 2;\nloop invariant i127: y == 2*x || y == 3*x;\nloop invariant i128: 0 <= x <= unknown_int();\nloop invariant i129: 0 <= y <= unknown_int();\nloop invariant i130: (if (unknown_int() && unknown_int()) then 1 else 0) <= x <= (if (unknown_int() && unknown_int()) then 1 else 0) + (if (unknown_int() && unknown_int()) then 1 else 0);\nloop invariant i131: (if (unknown_int() && unknown_int()) then 1 else 0) <= y <= (if (unknown_int() && unknown_int()) then 1 else 0) + (if (unknown_int() && unknown_int()) then 1 else 0);\n*/\nwhile (unknown_int()) {\n\t\tif (unknown_int()) {\n\t\t\tx = x+1; \n\t\t\ty = y+2;\n\t\t} else if (unknown_int()) {\n\t\t\tif (x >= 4) {\n\t\t\t    x = x+1; \n\t\t\t    y = y+3; \n\t\t\t}\n\t\t} \n\t}\n\n    if(3*x < y)\n\t\tgoto ERROR;\n\t\n\treturn 0;\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\treturn -1;\n}",
        "combined_annotation_num_solver_calls": 59,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(){\n\n\tint x=0;\n\tint y=0;\n\n\t/*@\nloop invariant i1: x >= 0;\nloop invariant i2: y >= 0;\nloop invariant i3: 3*x >= y;\n\n\n\n\n\nloop invariant i9: y >= x;\nloop invariant i10: x <= y;\n\n\n\nloop invariant i14: x <= (x + 1) * (1 + (x + 1) / 2);\nloop invariant i15: y <= (y + 1) * (1 + (y + 1) / 2);\n\n\nloop invariant i18: 0 <= x < 4 ==> (x <= y);\nloop invariant i19: ( y >= 0 );\nloop invariant i20: ( x >= 0 );\n\nloop invariant i22: ( x <= y + 2 );\n\n\nloop invariant i25: ( x <= 2*y + 2 );\nloop invariant i26: ( y >= 2*x );\n\n\nloop invariant i29: ( y <= 3*x );\n\nloop invariant i31: ( x <= 3*y/2 );\n\nloop invariant i33: ( x <= 3*y/2 + 2 );\n\nloop invariant i35: ( x <= 3*y/2 + 4 );\nloop invariant i36: ( y >= 3*x/2 - 1 );\n\n\n\n\n\n\n\n\nloop invariant i45: ( x <= 3*y/2 + 6 );\nloop invariant i46: ( y >= 3*x/2 - 2 );\n\n\n\n\n\n\n\n\nloop invariant i55: ( x <= 3*y/2 + 1 );\nloop invariant i56: ( x <= 3*y/2 + 3 );\n\nloop invariant i58: ( x <= 3*y/2 + 5 );\n\nloop invariant i60: x <= 3*y;\n\n\nloop invariant i63: x == y || x < y;\nloop invariant i64: x == y || x <= y;\nloop invariant i65: 0 <= x <= 3*y/2;\n\nloop invariant i67: x <= 3*y/2;\n\nloop invariant i69: x < 3*y/2 ==> x <= 3*y/2;\nloop invariant i70: y < 3*x/2 ==> y <= 3*x/2;\nloop invariant i71: x >= 3*y/2 ==> x >= 3*y/2;\nloop invariant i72: y >= 3*x/2 ==> y >= 3*x/2;\nloop invariant i73: x < 3*y/2 ==> x >= 0;\nloop invariant i74: y < 3*x/2 ==> y >= 0;\n\n\nloop invariant i77: x >= 3*y/2 ==> x <= 3*y/2;\n\nloop invariant i79: x < 3*y/2 ==> x < 3*y/2;\nloop invariant i80: y < 3*x/2 ==> y < 3*x/2;\nloop invariant i81: x >= 3*y/2 ==> x >= 4 ==> x >= 1;\nloop invariant i82: y >= 3*x/2 ==> y >= 3 ==> y >= 1;\nloop invariant i83: x >= 3*y/2 ==> x <= 3*y/2 ==> x <= 3*y/2;\nloop invariant i84: y >= 3*x/2 ==> y <= 3*x/2 ==> y <= 3*x/2;\nloop invariant i85: x < 3*y/2 ==> x >= 0 ==> x >= 0;\nloop invariant i86: y < 3*x/2 ==> y >= 0 ==> y >= 0;\nloop invariant i87: x >= 3*y/2 ==> x >= 4 ==> x >= 1 ==> x >= 1;\nloop invariant i88: y >= 3*x/2 ==> y >= 3 ==> y >= 1 ==> y >= 1;\nloop invariant i89: x >= 3*y/2 ==> x <= 3*y/2 ==> x <= 3*y/2 ==> x <= 3*y/2;\nloop invariant i90: y >= 3*x/2 ==> y <= 3*x/2 ==> y <= 3*x/2 ==> y <= 3*x/2;\nloop invariant i91: x < 3*y/2 ==> x >= 0 ==> x >= 0 ==> x >= 0;\nloop invariant i92: y < 3*x/2 ==> y >= 0 ==> y >= 0 ==> y >= 0;\nloop invariant i93: x >= 3*y/2 ==> x >= 4 ==> x >= 1 ==> x >= 1 ==> x >= 1;\nloop invariant i94: y >= 3*x/2 ==> y >= 3 ==> y >= 1 ==> y >= 1 ==> y >= 1;\nloop invariant i95: x >= 3*y/2 ==> x <= 3*y/2 ==> x <= 3*y/2 ==> x <= 3*y/2 ==> x <= 3*y/2;\nloop invariant i96: y >= 3*x/2 ==> y <= 3*x/2 ==> y <= 3*x/2 ==> y <= 3*x/2 ==> y <= 3*x/2;\nloop invariant i97: x < 3*y/2 ==> x >= 0 ==> x >= 0 ==> x >= 0 ==> x >= 0;\nloop invariant i98: y < 3*x/2 ==> y >= 0 ==> y >= 0 ==> y >= 0 ==> y >= 0;\nloop invariant i99: x >= 3*y/2 ==> x >= 4 ==> x >= 1 ==> x >= 1 ==> x >= 1 ==> x >= 1;\nloop invariant i100: y >= 3*x/2 ==> y >= 3 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1;\nloop invariant i101: x >= 3*y/2 ==> x <= 3*y/2 ==> x <= 3*y/2 ==> x <= 3*y/2 ==> x <= 3*y/2 ==> x <= 3*y/2;\nloop invariant i102: y >= 3*x/2 ==> y <= 3*x/2 ==> y <= 3*x/2 ==> y <= 3*x/2 ==> y <= 3*x/2 ==> y <= 3*x/2;\nloop invariant i103: x < 3*y/2 ==> x >= 0 ==> x >= 0 ==> x >= 0 ==> x >= 0 ==> x >= 0;\nloop invariant i104: x >= (1 + (y - 1) * y / 2) ==> 3*x >= y;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i120: 0 <= x;\nloop invariant i121: 0 <= y;\nloop invariant i122: x == y ==> x == 0;\nloop invariant i123: x != y ==> x >= 0;\nloop invariant i124: x != y ==> y >= 0;\nloop invariant i125: x != y ==> x < y;\n\n\n\n\n\n\n*/\nwhile (unknown_int()) {\n\t\tif (unknown_int()) {\n\t\t\tx = x+1; \n\t\t\ty = y+2;\n\t\t} else if (unknown_int()) {\n\t\t\tif (x >= 4) {\n\t\t\t    x = x+1; \n\t\t\t    y = y+3; \n\t\t\t}\n\t\t} \n\t}\n\n    if(3*x < y)\n\t\tgoto ERROR;\n\t\n\treturn 0;\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\treturn -1;\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c"
        ],
        "failure": [],
        "skipped": [],
        "total": 4,
        "success_count": 4,
        "failure_count": 0,
        "success_rate": 1.0
    }
}