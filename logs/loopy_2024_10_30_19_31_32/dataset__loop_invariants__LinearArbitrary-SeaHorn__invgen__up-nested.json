{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/up-nested.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int n,j,i,k;\n\n  i = 0;\n  k = 0;\n  j = unknown();\n  n = unknown();\n\n  if ( j<=n ) {\n  while ( j <= n ) {\n    \n    j++;\n  }\n  {;\n//@ assert( i>= 0);\n}\n\n  }\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant i = j; loop invariant j >= 0; loop invariant j <= n; loop invariant n >= 0;\n*/\n```",
            "```\n/*@\nloop invariant i = 0;\nloop invariant j = unknown();\nloop invariant k = 0;\nloop invariant n = unknown();\n*/\n```",
            "```\n/*@\nloop invariant 0 <= j <= n;\nloop invariant i = 0;\nloop invariant k = 0;\nloop invariant 0 <= j <= n;\nloop invariant i = 0;\nloop invariant k = 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= j <= (n - 1);\nloop invariant 0 <= i <= 0;\nloop invariant -1 <= k <= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant j <= n;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant i <= n;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant i <= n;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant i <= n;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant i <= n;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant i <= n;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant i <= n;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant i <= n;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant i <= n;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant i <= n;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant i <= n;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant i <= n;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant i <= n;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant i <= n;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant i <= n;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant i <= n;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant i <= n;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant i <= n;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant i <= n;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant i <= n;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant i <= n;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant i <= n;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant i <= n;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant i <= n;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant i <= n;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant i <= n;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant i <= n;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant i <= n;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant i <= n;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant i <= n;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant i <= n;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant i <= n;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant i <= n;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant i <= n;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant i <= n;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant i <= n;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant i <= n;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant i <= n;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant i <= n;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant i <= n;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant i <= n;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant i <= n;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant i <= n;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant i <= n;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant i <= n;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant i <= n;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant i <= n;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant i <= n;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant i <= n;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant i <= n;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant i <= n;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant i <= n;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant i <= n;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant i <= n;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant i <= n;\nloop invariant i <= j;\nloop invariant i <= k;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= j <= n;\nloop invariant j == n + 1;\nloop invariant i == 0;\nloop invariant i <= j;\nloop invariant i <= n + 1;\nloop invariant i >= 0;\nloop invariant i >= 1;\nloop invariant j == i;\nloop invariant j == i + 1;\nloop invariant j == n + 1;\nloop invariant j == n;\nloop invariant j == n - 1;\nloop invariant j == n - 2;\nloop invariant j == n - 3;\nloop invariant j == n - 4;\nloop invariant j == n - 5;\nloop invariant j == n - 6;\nloop invariant j == n - 7;\nloop invariant j == n - 8;\nloop invariant j == n - 9;\nloop invariant j == n - 10;\nloop invariant j == n - 11;\nloop invariant j == n - 12;\nloop invariant j == n - 13;\nloop invariant j == n - 14;\nloop invariant j == n - 15;\nloop invariant j == n - 16;\nloop invariant j == n - 17;\nloop invariant j == n - 18;\nloop invariant j == n - 19;\nloop invariant j == n - 20;\nloop invariant j == n - 21;\nloop invariant j == n - 22;\nloop invariant j == n - 23;\nloop invariant j == n - 24;\nloop invariant j == n - 25;\nloop invariant j == n - 26;\nloop invariant j == n - 27;\nloop invariant j == n - 28;\nloop invariant j == n - 29;\nloop invariant j == n - 30;\nloop invariant j == n - 31;\nloop invariant j == n - 32;\nloop invariant j == n - 33;\nloop invariant j == n - 34;\nloop invariant j == n - 35;\nloop invariant j == n - 36;\nloop invariant j == n - 37;\nloop invariant j == n - 38;\nloop invariant j == n - 39;\nloop invariant j == n - 40;\nloop invariant j == n - 41;\nloop invariant j == n - 42;\nloop invariant j == n - 43;\nloop invariant j == n - 44;\nloop invariant j == n - 45;\nloop invariant j == n - 46;\nloop invariant j == n - 47;\nloop invariant j == n - 48;\nloop invariant j == n - 49;\nloop invariant j == n - 50;\nloop invariant j == n - 51;\nloop invariant j == n - 52;\nloop invariant j == n - 53;\nloop invariant j == n - 54;\nloop invariant j == n - 55;\nloop invariant j == n - 56;\nloop invariant j == n - 57;\nloop invariant j == n - 58;\nloop invariant j == n - 59;\nloop invariant j == n - 60;\nloop invariant j == n - 61;\nloop invariant j == n - 62;\nloop invariant j == n - 63;\nloop invariant j == n - 64;\nloop invariant j == n - 65;\nloop invariant j == n - 66;\nloop invariant j == n - 67;\nloop invariant j == n - 68;\nloop invariant j == n - 69;\nloop invariant j == n - 70;\nloop invariant j == n - 71;\nloop invariant j == n - 72;\nloop invariant j == n - 73;\nloop invariant j == n - 74;\nloop invariant j == n - 75;\nloop invariant j == n - 76;\nloop invariant j == n - 77;\nloop invariant j == n - 78;\nloop invariant j == n - 79;\nloop invariant j == n - 80;\nloop invariant j == n - 81;\nloop invariant j == n - 82;\nloop invariant j == n - 83;\nloop invariant j == n - 84;\nloop invariant j == n - 85;\nloop invariant j == n - 86;\nloop invariant j == n - 87;\nloop invariant j == n - 88;\nloop invariant j == n - 89;\nloop invariant j == n - 90;\nloop invariant j == n - 91;\nloop invariant j == n - 92;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= j <= n;\nloop invariant i == 0;\nloop invariant k == 0;\nloop invariant j == i;\nloop invariant i <= n;\nloop invariant i <= j;\nloop invariant j <= n;\nloop invariant i >= 0;\nloop invariant j >= i;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant i >= 0;\nloop invariant j >= i;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant i >= 0;\nloop invariant j >= i;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant i >= 0;\nloop invariant j >= i;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant i >= 0;\nloop invariant j >= i;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant i >= 0;\nloop invariant j >= i;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant i >= 0;\nloop invariant j >= i;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant i >= 0;\nloop invariant j >= i;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant i >= 0;\nloop invariant j >= i;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant i >= 0;\nloop invariant j >= i;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant i >= 0;\nloop invariant j >= i;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant i >= 0;\nloop invariant j >= i;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant i >= 0;\nloop invariant j >= i;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant i >= 0;\nloop invariant j >= i;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant i >= 0;\nloop invariant j >= i;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant i >= 0;\nloop invariant j >= i;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant i >= 0;\nloop invariant j >= i;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant i >= 0;\nloop invariant j >= i;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant i >= 0;\nloop invariant j >= i;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant i >= 0;\nloop invariant j >= i;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant i >= 0;\nloop invariant j >= i;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant i >= 0;\nloop invariant j >= i;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant i >= 0;\nloop invariant j >= i;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant i >= 0;\nloop invariant j >= i;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant i >= 0;\nloop invariant j >= i;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant i >= 0;\nloop invariant j >= i;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant i >= 0;\nloop invariant j >= i;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant i >= 0;\nloop invariant j >= i;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant i >= 0;\nloop invariant j >= i;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant i >= 0;\nloop invariant j >= i;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant i >= 0;\nloop invariant j >= i;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant i >= 0;\nloop invariant j >= i;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant i >= 0;\nloop invariant j >= i;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant i >= 0;\nloop invariant j >= i;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant i >= 0;\nloop invariant j >= i;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant i >= 0;\nloop invariant j >= i;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant i >= 0;\nloop invariant j >= i;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant i >= 0;\nloop invariant j >= i;\nloop invariant i <= n;\nloop invariant j <= n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant j <= n;\nloop invariant 0 <= k <= n;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant k >= 0;\nloop invariant i <= j;\nloop invariant j <= n;\nloop invariant k <= n;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant k >= 0;\nloop invariant i <= j;\nloop invariant j <= n;\nloop invariant k <= n;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant k >= 0;\nloop invariant i <= j;\nloop invariant j <= n;\nloop invariant k <= n;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant k >= 0;\nloop invariant i <= j;\nloop invariant j <= n;\nloop invariant k <= n;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant k >= 0;\nloop invariant i <= j;\nloop invariant j <= n;\nloop invariant k <= n;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant k >= 0;\nloop invariant i <= j;\nloop invariant j <= n;\nloop invariant k <= n;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant k >= 0;\nloop invariant i <= j;\nloop invariant j <= n;\nloop invariant k <= n;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant k >= 0;\nloop invariant i <= j;\nloop invariant j <= n;\nloop invariant k <= n;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant k >= 0;\nloop invariant i <= j;\nloop invariant j <= n;\nloop invariant k <= n;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant k >= 0;\nloop invariant i <= j;\nloop invariant j <= n;\nloop invariant k <= n;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant k >= 0;\nloop invariant i <= j;\nloop invariant j <= n;\nloop invariant k <= n;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant k >= 0;\nloop invariant i <= j;\nloop invariant j <= n;\nloop invariant k <= n;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant k >= 0;\nloop invariant i <= j;\nloop invariant j <= n;\nloop invariant k <= n;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant k >= 0;\nloop invariant i <= j;\nloop invariant j <= n;\nloop invariant k <= n;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant k >= 0;\nloop invariant i <= j;\nloop invariant j <= n;\nloop invariant k <= n;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant k >= 0;\nloop invariant i <= j;\nloop invariant j <= n;\nloop invariant k <= n;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant k >= 0;\nloop invariant i <= j;\nloop invariant j <= n;\nloop invariant k <= n;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant k >= 0;\nloop invariant i <= j;\nloop invariant j <= n;\nloop invariant k <= n;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant k >= 0;\nloop invariant i <= j;\nloop invariant j <= n;\nloop invariant k <= n;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant k >= 0;\nloop invariant i <= j;\nloop invariant j <= n;\nloop invariant k <= n;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant k >= 0;\nloop invariant i <= j;\nloop invariant j <= n;\nloop invariant k <= n;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant k >= 0;\nloop invariant i <= j;\nloop invariant j <= n;\nloop invariant k <= n;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant k >= 0;\nloop invariant i <= j;\nloop invariant j <= n;\nloop invariant k <= n;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant k >= 0;\nloop invariant i <= j;\nloop invariant j <= n;\nloop invariant k <= n;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant k >= 0;\nloop invariant i <= j;\nloop invariant j <= n;\nloop invariant k <= n;\n*/\n```",
            "```\n/*@\nloop invariant i = 0;\nloop invariant k = 0;\nloop invariant j = unknown();\nloop invariant n = unknown();\nloop invariant assume(j <= n);\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= n);\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= n);\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= n);\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= n);\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= n);\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= n);\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= n);\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= n);\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= n);\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= n);\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= n);\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= n);\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= n);\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= n);\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= n);\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= n);\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= n);\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= n);\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= n);\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= n);\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= n);\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= n);\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= n);\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= n);\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= n);\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= n);\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= n);\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= n);\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= n);\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= n);\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= n);\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= n);\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= n);\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= n);\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= n);\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= n);\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= n);\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= n);\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= n);\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= n);\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= n);\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= n);\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= n);\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= n);\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= n);\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= n);\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= 100000;\nloop invariant 0 <= j <= 100000;\nloop invariant 0 <= k <= 100000;\nloop invariant n >= 0;\nloop invariant j >= n;\nloop invariant j <= n;\nloop invariant j >= 1;\nloop invariant j <= 100000;\nloop invariant i >= 0;\nloop invariant i <= 100000;\n*/\n```",
            "```\n/*@\nloop invariant i == 0;\nloop invariant k == 0;\nloop invariant j >= 0;\nloop invariant n >= 0;\nloop invariant j <= n;\nloop invariant j == n + 1;\nloop invariant i == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= j <= n;\nloop invariant i >= 0;\nloop invariant j <= n;\nloop invariant j >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= j <= n + 1;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant j <= n + 1;\nloop invariant j <= n ==> i >= n;\nloop invariant j > n ==> i >= n;\nloop invariant j <= n ==> j <= n + 1;\nloop invariant j > n ==> j >= n + 1;\nloop invariant j <= n ==> j >= 0;\nloop invariant j > n ==> j <= n + 1;\nloop invariant j <= n ==> j <= n + 1;\nloop invariant j > n ==> j >= n + 1;\nloop invariant j <= n ==> j >= 0;\nloop invariant j > n ==> j <= n + 1;\nloop invariant j <= n ==> j <= n + 1;\nloop invariant j > n ==> j >= n + 1;\nloop invariant j <= n ==> j >= 0;\nloop invariant j > n ==> j <= n + 1;\nloop invariant j <= n ==> j <= n + 1;\nloop invariant j > n ==> j >= n + 1;\nloop invariant j <= n ==> j >= 0;\nloop invariant j > n ==> j <= n + 1;\nloop invariant j <= n ==> j <= n + 1;\nloop invariant j > n ==> j >= n + 1;\nloop invariant j <= n ==> j >= 0;\nloop invariant j > n ==> j <= n + 1;\nloop invariant j <= n ==> j <= n + 1;\nloop invariant j > n ==> j >= n + 1;\nloop invariant j <= n ==> j >= 0;\nloop invariant j > n ==> j <= n + 1;\nloop invariant j <= n ==> j <= n + 1;\nloop invariant j > n ==> j >= n + 1;\nloop invariant j <= n ==> j >= 0;\nloop invariant j > n ==> j <= n + 1;\nloop invariant j <= n ==> j <= n + 1;\nloop invariant j > n ==> j >= n + 1;\nloop invariant j <= n ==> j >= 0;\nloop invariant j > n ==> j <= n + 1;\nloop invariant j <= n ==> j <= n + 1;\nloop invariant j > n ==> j >= n + 1;\nloop invariant j <= n ==> j >= 0;\nloop invariant j > n ==> j <= n + 1;\nloop invariant j <= n ==> j <= n + 1;\nloop invariant j > n ==> j >= n + 1;\nloop invariant j <= n ==> j >= 0;\nloop invariant j > n ==> j <= n + 1;\nloop invariant j <= n ==> j <= n + 1;\nloop invariant j > n ==> j >= n + 1;\nloop invariant j <= n ==> j >= 0;\nloop invariant j > n ==> j <= n + 1;\nloop invariant j <= n ==> j <= n + 1;\nloop invariant j > n ==> j >= n + 1;\nloop invariant j <= n ==> j >= 0;\nloop invariant j > n ==> j <= n + 1;\nloop invariant j <= n ==> j <= n + 1;\nloop invariant j > n ==> j >= n + 1;\nloop invariant j <= n ==> j >= 0;\nloop invariant j > n ==> j <= n + 1;\nloop invariant j <= n ==> j <= n + 1;\nloop invariant j > n ==> j >= n + 1;\nloop invariant j <= n ==> j >= 0;\nloop invariant j > n ==> j <= n + 1;\nloop invariant j <= n ==> j <= n + 1;\nloop invariant j > n ==> j >= n + 1;\nloop invariant j <= n ==> j >= 0;\nloop invariant j > n ==> j <= n + 1;\nloop invariant j <= n ==> j <= n + 1;\nloop invariant j > n ==> j >= n + 1;\nloop invariant j <= n ==> j >= 0;\nloop invariant j > n ==> j <= n + 1;\nloop invariant j <= n ==> j <= n + 1;\nloop invariant j > n ==> j >= n + 1;\nloop invariant j <= n ==> j >= 0;\nloop invariant j > n ==> j <= n + 1;\nloop invariant j <= n ==> j <= n + 1;\nloop invariant j > n ==> j >= n + 1;\nloop invariant j <= n ==> j >= 0;\nloop invariant j > n ==> j <= n + 1;\nloop invariant j <= n ==> j <= n + 1;\nloop invariant j > n ==> j >= n + 1;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= j <= n; i = k + (j - 1);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= j <= n;\nloop invariant i >= 0;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant i = j; loop invariant j >= 0; loop invariant j <= n; loop invariant n >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int n,j,i,k;\n\n  i = 0;\n  k = 0;\n  j = unknown();\n  n = unknown();\n\n  if ( j<=n ) {\n  /*@\n\n*/\nwhile ( j <= n ) {\n    \n    j++;\n  }\n  {;\n//@ assert( i>= 0);\n}\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant i = 0;\nloop invariant j = unknown();\nloop invariant k = 0;\nloop invariant n = unknown();\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int n,j,i,k;\n\n  i = 0;\n  k = 0;\n  j = unknown();\n  n = unknown();\n\n  if ( j<=n ) {\n  /*@\n\n\n\n\n*/\nwhile ( j <= n ) {\n    \n    j++;\n  }\n  {;\n//@ assert( i>= 0);\n}\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= j <= n;\nloop invariant i = 0;\nloop invariant k = 0;\nloop invariant 0 <= j <= n;\nloop invariant i = 0;\nloop invariant k = 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int n,j,i,k;\n\n  i = 0;\n  k = 0;\n  j = unknown();\n  n = unknown();\n\n  if ( j<=n ) {\n  /*@\n\n\n\n*/\nwhile ( j <= n ) {\n    \n    j++;\n  }\n  {;\n//@ assert( i>= 0);\n}\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= j <= (n - 1);\nloop invariant 0 <= i <= 0;\nloop invariant -1 <= k <= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int n,j,i,k;\n\n  i = 0;\n  k = 0;\n  j = unknown();\n  n = unknown();\n\n  if ( j<=n ) {\n  /*@\n\nloop invariant i2: 0 <= i <= 0;\nloop invariant i3: -1 <= k <= 0;\n*/\nwhile ( j <= n ) {\n    \n    j++;\n  }\n  {;\n//@ assert( i>= 0);\n}\n\n  }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant j <= n;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant i <= n;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant i <= n;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant i <= n;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant i <= n;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant i <= n;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant i <= n;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant i <= n;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant i <= n;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant i <= n;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant i <= n;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant i <= n;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant i <= n;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant i <= n;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant i <= n;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant i <= n;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant i <= n;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant i <= n;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant i <= n;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant i <= n;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant i <= n;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant i <= n;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant i <= n;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant i <= n;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant i <= n;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant i <= n;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant i <= n;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant i <= n;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant i <= n;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant i <= n;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant i <= n;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant i <= n;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant i <= n;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant i <= n;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant i <= n;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant i <= n;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant i <= n;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant i <= n;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant i <= n;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant i <= n;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant i <= n;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant i <= n;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant i <= n;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant i <= n;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant i <= n;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant i <= n;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant i <= n;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant i <= n;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant i <= n;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant i <= n;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant i <= n;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant i <= n;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant i <= n;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant i <= n;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant i <= n;\nloop invariant i <= j;\nloop invariant i <= k;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int n,j,i,k;\n\n  i = 0;\n  k = 0;\n  j = unknown();\n  n = unknown();\n\n  if ( j<=n ) {\n  /*@\n\n\n\nloop invariant i4: i <= k;\n\n*/\nwhile ( j <= n ) {\n    \n    j++;\n  }\n  {;\n//@ assert( i>= 0);\n}\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 50,
                "annotations": "```\n/*@\nloop invariant 0 <= j <= n;\nloop invariant j == n + 1;\nloop invariant i == 0;\nloop invariant i <= j;\nloop invariant i <= n + 1;\nloop invariant i >= 0;\nloop invariant i >= 1;\nloop invariant j == i;\nloop invariant j == i + 1;\nloop invariant j == n + 1;\nloop invariant j == n;\nloop invariant j == n - 1;\nloop invariant j == n - 2;\nloop invariant j == n - 3;\nloop invariant j == n - 4;\nloop invariant j == n - 5;\nloop invariant j == n - 6;\nloop invariant j == n - 7;\nloop invariant j == n - 8;\nloop invariant j == n - 9;\nloop invariant j == n - 10;\nloop invariant j == n - 11;\nloop invariant j == n - 12;\nloop invariant j == n - 13;\nloop invariant j == n - 14;\nloop invariant j == n - 15;\nloop invariant j == n - 16;\nloop invariant j == n - 17;\nloop invariant j == n - 18;\nloop invariant j == n - 19;\nloop invariant j == n - 20;\nloop invariant j == n - 21;\nloop invariant j == n - 22;\nloop invariant j == n - 23;\nloop invariant j == n - 24;\nloop invariant j == n - 25;\nloop invariant j == n - 26;\nloop invariant j == n - 27;\nloop invariant j == n - 28;\nloop invariant j == n - 29;\nloop invariant j == n - 30;\nloop invariant j == n - 31;\nloop invariant j == n - 32;\nloop invariant j == n - 33;\nloop invariant j == n - 34;\nloop invariant j == n - 35;\nloop invariant j == n - 36;\nloop invariant j == n - 37;\nloop invariant j == n - 38;\nloop invariant j == n - 39;\nloop invariant j == n - 40;\nloop invariant j == n - 41;\nloop invariant j == n - 42;\nloop invariant j == n - 43;\nloop invariant j == n - 44;\nloop invariant j == n - 45;\nloop invariant j == n - 46;\nloop invariant j == n - 47;\nloop invariant j == n - 48;\nloop invariant j == n - 49;\nloop invariant j == n - 50;\nloop invariant j == n - 51;\nloop invariant j == n - 52;\nloop invariant j == n - 53;\nloop invariant j == n - 54;\nloop invariant j == n - 55;\nloop invariant j == n - 56;\nloop invariant j == n - 57;\nloop invariant j == n - 58;\nloop invariant j == n - 59;\nloop invariant j == n - 60;\nloop invariant j == n - 61;\nloop invariant j == n - 62;\nloop invariant j == n - 63;\nloop invariant j == n - 64;\nloop invariant j == n - 65;\nloop invariant j == n - 66;\nloop invariant j == n - 67;\nloop invariant j == n - 68;\nloop invariant j == n - 69;\nloop invariant j == n - 70;\nloop invariant j == n - 71;\nloop invariant j == n - 72;\nloop invariant j == n - 73;\nloop invariant j == n - 74;\nloop invariant j == n - 75;\nloop invariant j == n - 76;\nloop invariant j == n - 77;\nloop invariant j == n - 78;\nloop invariant j == n - 79;\nloop invariant j == n - 80;\nloop invariant j == n - 81;\nloop invariant j == n - 82;\nloop invariant j == n - 83;\nloop invariant j == n - 84;\nloop invariant j == n - 85;\nloop invariant j == n - 86;\nloop invariant j == n - 87;\nloop invariant j == n - 88;\nloop invariant j == n - 89;\nloop invariant j == n - 90;\nloop invariant j == n - 91;\nloop invariant j == n - 92;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int n,j,i,k;\n\n  i = 0;\n  k = 0;\n  j = unknown();\n  n = unknown();\n\n  if ( j<=n ) {\n  /*@\n\n\nloop invariant i3: i == 0;\n\n\nloop invariant i6: i >= 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile ( j <= n ) {\n    \n    j++;\n  }\n  {;\n//@ assert( i>= 0);\n}\n\n  }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= j <= n;\nloop invariant i == 0;\nloop invariant k == 0;\nloop invariant j == i;\nloop invariant i <= n;\nloop invariant i <= j;\nloop invariant j <= n;\nloop invariant i >= 0;\nloop invariant j >= i;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant i >= 0;\nloop invariant j >= i;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant i >= 0;\nloop invariant j >= i;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant i >= 0;\nloop invariant j >= i;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant i >= 0;\nloop invariant j >= i;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant i >= 0;\nloop invariant j >= i;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant i >= 0;\nloop invariant j >= i;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant i >= 0;\nloop invariant j >= i;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant i >= 0;\nloop invariant j >= i;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant i >= 0;\nloop invariant j >= i;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant i >= 0;\nloop invariant j >= i;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant i >= 0;\nloop invariant j >= i;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant i >= 0;\nloop invariant j >= i;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant i >= 0;\nloop invariant j >= i;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant i >= 0;\nloop invariant j >= i;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant i >= 0;\nloop invariant j >= i;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant i >= 0;\nloop invariant j >= i;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant i >= 0;\nloop invariant j >= i;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant i >= 0;\nloop invariant j >= i;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant i >= 0;\nloop invariant j >= i;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant i >= 0;\nloop invariant j >= i;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant i >= 0;\nloop invariant j >= i;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant i >= 0;\nloop invariant j >= i;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant i >= 0;\nloop invariant j >= i;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant i >= 0;\nloop invariant j >= i;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant i >= 0;\nloop invariant j >= i;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant i >= 0;\nloop invariant j >= i;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant i >= 0;\nloop invariant j >= i;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant i >= 0;\nloop invariant j >= i;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant i >= 0;\nloop invariant j >= i;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant i >= 0;\nloop invariant j >= i;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant i >= 0;\nloop invariant j >= i;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant i >= 0;\nloop invariant j >= i;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant i >= 0;\nloop invariant j >= i;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant i >= 0;\nloop invariant j >= i;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant i >= 0;\nloop invariant j >= i;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant i >= 0;\nloop invariant j >= i;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant i >= 0;\nloop invariant j >= i;\nloop invariant i <= n;\nloop invariant j <= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int n,j,i,k;\n\n  i = 0;\n  k = 0;\n  j = unknown();\n  n = unknown();\n\n  if ( j<=n ) {\n  /*@\n\nloop invariant i2: i == 0;\nloop invariant i3: k == 0;\n\n\n\n\nloop invariant i8: i >= 0;\n\n*/\nwhile ( j <= n ) {\n    \n    j++;\n  }\n  {;\n//@ assert( i>= 0);\n}\n\n  }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant j <= n;\nloop invariant 0 <= k <= n;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant k >= 0;\nloop invariant i <= j;\nloop invariant j <= n;\nloop invariant k <= n;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant k >= 0;\nloop invariant i <= j;\nloop invariant j <= n;\nloop invariant k <= n;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant k >= 0;\nloop invariant i <= j;\nloop invariant j <= n;\nloop invariant k <= n;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant k >= 0;\nloop invariant i <= j;\nloop invariant j <= n;\nloop invariant k <= n;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant k >= 0;\nloop invariant i <= j;\nloop invariant j <= n;\nloop invariant k <= n;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant k >= 0;\nloop invariant i <= j;\nloop invariant j <= n;\nloop invariant k <= n;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant k >= 0;\nloop invariant i <= j;\nloop invariant j <= n;\nloop invariant k <= n;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant k >= 0;\nloop invariant i <= j;\nloop invariant j <= n;\nloop invariant k <= n;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant k >= 0;\nloop invariant i <= j;\nloop invariant j <= n;\nloop invariant k <= n;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant k >= 0;\nloop invariant i <= j;\nloop invariant j <= n;\nloop invariant k <= n;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant k >= 0;\nloop invariant i <= j;\nloop invariant j <= n;\nloop invariant k <= n;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant k >= 0;\nloop invariant i <= j;\nloop invariant j <= n;\nloop invariant k <= n;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant k >= 0;\nloop invariant i <= j;\nloop invariant j <= n;\nloop invariant k <= n;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant k >= 0;\nloop invariant i <= j;\nloop invariant j <= n;\nloop invariant k <= n;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant k >= 0;\nloop invariant i <= j;\nloop invariant j <= n;\nloop invariant k <= n;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant k >= 0;\nloop invariant i <= j;\nloop invariant j <= n;\nloop invariant k <= n;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant k >= 0;\nloop invariant i <= j;\nloop invariant j <= n;\nloop invariant k <= n;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant k >= 0;\nloop invariant i <= j;\nloop invariant j <= n;\nloop invariant k <= n;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant k >= 0;\nloop invariant i <= j;\nloop invariant j <= n;\nloop invariant k <= n;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant k >= 0;\nloop invariant i <= j;\nloop invariant j <= n;\nloop invariant k <= n;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant k >= 0;\nloop invariant i <= j;\nloop invariant j <= n;\nloop invariant k <= n;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant k >= 0;\nloop invariant i <= j;\nloop invariant j <= n;\nloop invariant k <= n;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant k >= 0;\nloop invariant i <= j;\nloop invariant j <= n;\nloop invariant k <= n;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant k >= 0;\nloop invariant i <= j;\nloop invariant j <= n;\nloop invariant k <= n;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant k >= 0;\nloop invariant i <= j;\nloop invariant j <= n;\nloop invariant k <= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int n,j,i,k;\n\n  i = 0;\n  k = 0;\n  j = unknown();\n  n = unknown();\n\n  if ( j<=n ) {\n  /*@\n\n\n\nloop invariant i4: i >= 0;\n\nloop invariant i6: k >= 0;\n\n\n*/\nwhile ( j <= n ) {\n    \n    j++;\n  }\n  {;\n//@ assert( i>= 0);\n}\n\n  }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant i = 0;\nloop invariant k = 0;\nloop invariant j = unknown();\nloop invariant n = unknown();\nloop invariant assume(j <= n);\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= n);\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= n);\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= n);\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= n);\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= n);\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= n);\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= n);\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= n);\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= n);\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= n);\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= n);\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= n);\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= n);\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= n);\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= n);\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= n);\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= n);\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= n);\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= n);\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= n);\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= n);\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= n);\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= n);\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= n);\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= n);\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= n);\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= n);\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= n);\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= n);\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= n);\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= n);\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= n);\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= n);\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= n);\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= n);\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= n);\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= n);\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= n);\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= n);\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= n);\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= n);\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= n);\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= n);\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= n);\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= n);\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= unknown());\nloop invariant assume(j <= n);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int n,j,i,k;\n\n  i = 0;\n  k = 0;\n  j = unknown();\n  n = unknown();\n\n  if ( j<=n ) {\n  /*@\n\n\n\n\n\n\n*/\nwhile ( j <= n ) {\n    \n    j++;\n  }\n  {;\n//@ assert( i>= 0);\n}\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= 100000;\nloop invariant 0 <= j <= 100000;\nloop invariant 0 <= k <= 100000;\nloop invariant n >= 0;\nloop invariant j >= n;\nloop invariant j <= n;\nloop invariant j >= 1;\nloop invariant j <= 100000;\nloop invariant i >= 0;\nloop invariant i <= 100000;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int n,j,i,k;\n\n  i = 0;\n  k = 0;\n  j = unknown();\n  n = unknown();\n\n  if ( j<=n ) {\n  /*@\n\n\nloop invariant i3: 0 <= k <= 100000;\n\n\n\n\n\nloop invariant i9: i >= 0;\nloop invariant i10: i <= 100000;\n*/\nwhile ( j <= n ) {\n    \n    j++;\n  }\n  {;\n//@ assert( i>= 0);\n}\n\n  }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant i == 0;\nloop invariant k == 0;\nloop invariant j >= 0;\nloop invariant n >= 0;\nloop invariant j <= n;\nloop invariant j == n + 1;\nloop invariant i == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int n,j,i,k;\n\n  i = 0;\n  k = 0;\n  j = unknown();\n  n = unknown();\n\n  if ( j<=n ) {\n  /*@\nloop invariant i1: i == 0;\nloop invariant i2: k == 0;\n\n\n\n\n*/\nwhile ( j <= n ) {\n    \n    j++;\n  }\n  {;\n//@ assert( i>= 0);\n}\n\n  }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= j <= n;\nloop invariant i >= 0;\nloop invariant j <= n;\nloop invariant j >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int n,j,i,k;\n\n  i = 0;\n  k = 0;\n  j = unknown();\n  n = unknown();\n\n  if ( j<=n ) {\n  /*@\n\nloop invariant i2: i >= 0;\n\n\n*/\nwhile ( j <= n ) {\n    \n    j++;\n  }\n  {;\n//@ assert( i>= 0);\n}\n\n  }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= j <= n + 1;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant j <= n + 1;\nloop invariant j <= n ==> i >= n;\nloop invariant j > n ==> i >= n;\nloop invariant j <= n ==> j <= n + 1;\nloop invariant j > n ==> j >= n + 1;\nloop invariant j <= n ==> j >= 0;\nloop invariant j > n ==> j <= n + 1;\nloop invariant j <= n ==> j <= n + 1;\nloop invariant j > n ==> j >= n + 1;\nloop invariant j <= n ==> j >= 0;\nloop invariant j > n ==> j <= n + 1;\nloop invariant j <= n ==> j <= n + 1;\nloop invariant j > n ==> j >= n + 1;\nloop invariant j <= n ==> j >= 0;\nloop invariant j > n ==> j <= n + 1;\nloop invariant j <= n ==> j <= n + 1;\nloop invariant j > n ==> j >= n + 1;\nloop invariant j <= n ==> j >= 0;\nloop invariant j > n ==> j <= n + 1;\nloop invariant j <= n ==> j <= n + 1;\nloop invariant j > n ==> j >= n + 1;\nloop invariant j <= n ==> j >= 0;\nloop invariant j > n ==> j <= n + 1;\nloop invariant j <= n ==> j <= n + 1;\nloop invariant j > n ==> j >= n + 1;\nloop invariant j <= n ==> j >= 0;\nloop invariant j > n ==> j <= n + 1;\nloop invariant j <= n ==> j <= n + 1;\nloop invariant j > n ==> j >= n + 1;\nloop invariant j <= n ==> j >= 0;\nloop invariant j > n ==> j <= n + 1;\nloop invariant j <= n ==> j <= n + 1;\nloop invariant j > n ==> j >= n + 1;\nloop invariant j <= n ==> j >= 0;\nloop invariant j > n ==> j <= n + 1;\nloop invariant j <= n ==> j <= n + 1;\nloop invariant j > n ==> j >= n + 1;\nloop invariant j <= n ==> j >= 0;\nloop invariant j > n ==> j <= n + 1;\nloop invariant j <= n ==> j <= n + 1;\nloop invariant j > n ==> j >= n + 1;\nloop invariant j <= n ==> j >= 0;\nloop invariant j > n ==> j <= n + 1;\nloop invariant j <= n ==> j <= n + 1;\nloop invariant j > n ==> j >= n + 1;\nloop invariant j <= n ==> j >= 0;\nloop invariant j > n ==> j <= n + 1;\nloop invariant j <= n ==> j <= n + 1;\nloop invariant j > n ==> j >= n + 1;\nloop invariant j <= n ==> j >= 0;\nloop invariant j > n ==> j <= n + 1;\nloop invariant j <= n ==> j <= n + 1;\nloop invariant j > n ==> j >= n + 1;\nloop invariant j <= n ==> j >= 0;\nloop invariant j > n ==> j <= n + 1;\nloop invariant j <= n ==> j <= n + 1;\nloop invariant j > n ==> j >= n + 1;\nloop invariant j <= n ==> j >= 0;\nloop invariant j > n ==> j <= n + 1;\nloop invariant j <= n ==> j <= n + 1;\nloop invariant j > n ==> j >= n + 1;\nloop invariant j <= n ==> j >= 0;\nloop invariant j > n ==> j <= n + 1;\nloop invariant j <= n ==> j <= n + 1;\nloop invariant j > n ==> j >= n + 1;\nloop invariant j <= n ==> j >= 0;\nloop invariant j > n ==> j <= n + 1;\nloop invariant j <= n ==> j <= n + 1;\nloop invariant j > n ==> j >= n + 1;\nloop invariant j <= n ==> j >= 0;\nloop invariant j > n ==> j <= n + 1;\nloop invariant j <= n ==> j <= n + 1;\nloop invariant j > n ==> j >= n + 1;\nloop invariant j <= n ==> j >= 0;\nloop invariant j > n ==> j <= n + 1;\nloop invariant j <= n ==> j <= n + 1;\nloop invariant j > n ==> j >= n + 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int n,j,i,k;\n\n  i = 0;\n  k = 0;\n  j = unknown();\n  n = unknown();\n\n  if ( j<=n ) {\n  /*@\n\nloop invariant i2: i >= 0;\n\nloop invariant i4: j <= n + 1;\n\n\nloop invariant i7: j <= n ==> j <= n + 1;\nloop invariant i8: j > n ==> j >= n + 1;\n\nloop invariant i10: j > n ==> j <= n + 1;\n*/\nwhile ( j <= n ) {\n    \n    j++;\n  }\n  {;\n//@ assert( i>= 0);\n}\n\n  }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 1 <= j <= n; i = k + (j - 1);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int n,j,i,k;\n\n  i = 0;\n  k = 0;\n  j = unknown();\n  n = unknown();\n\n  if ( j<=n ) {\n  /*@\n\n*/\nwhile ( j <= n ) {\n    \n    j++;\n  }\n  {;\n//@ assert( i>= 0);\n}\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= j <= n;\nloop invariant i >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int n,j,i,k;\n\n  i = 0;\n  k = 0;\n  j = unknown();\n  n = unknown();\n\n  if ( j<=n ) {\n  /*@\n\nloop invariant i2: i >= 0;\n*/\nwhile ( j <= n ) {\n    \n    j++;\n  }\n  {;\n//@ assert( i>= 0);\n}\n\n  }\n}",
                "checker_output_after_prune": true
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 21: Assignment operators not allowed in annotations.",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int n,j,i,k;\n\n  i = 0;\n  k = 0;\n  j = unknown();\n  n = unknown();\n\n  if ( j<=n ) {\n  /*@\nloop invariant i1: i = j; loop invariant j >= 0; loop invariant j <= n; loop invariant n >= 0;\nloop invariant i2: i = 0;\nloop invariant i3: j = unknown();\nloop invariant i4: k = 0;\nloop invariant i5: n = unknown();\nloop invariant i6: 0 <= j <= n;\nloop invariant i7: 0 <= j <= (n - 1);\nloop invariant i8: 0 <= i <= 0;\nloop invariant i9: -1 <= k <= 0;\nloop invariant i10: 0 <= i <= n;\nloop invariant i11: j <= n;\nloop invariant i12: i <= j;\nloop invariant i13: i <= k;\nloop invariant i14: i <= n;\nloop invariant i15: j == n + 1;\nloop invariant i16: i == 0;\nloop invariant i17: i <= n + 1;\nloop invariant i18: i >= 0;\nloop invariant i19: i >= 1;\nloop invariant i20: j == i;\nloop invariant i21: j == i + 1;\nloop invariant i22: j == n;\nloop invariant i23: j == n - 1;\nloop invariant i24: j == n - 2;\nloop invariant i25: j == n - 3;\nloop invariant i26: j == n - 4;\nloop invariant i27: j == n - 5;\nloop invariant i28: j == n - 6;\nloop invariant i29: j == n - 7;\nloop invariant i30: j == n - 8;\nloop invariant i31: j == n - 9;\nloop invariant i32: j == n - 10;\nloop invariant i33: j == n - 11;\nloop invariant i34: j == n - 12;\nloop invariant i35: j == n - 13;\nloop invariant i36: j == n - 14;\nloop invariant i37: j == n - 15;\nloop invariant i38: j == n - 16;\nloop invariant i39: j == n - 17;\nloop invariant i40: j == n - 18;\nloop invariant i41: j == n - 19;\nloop invariant i42: j == n - 20;\nloop invariant i43: j == n - 21;\nloop invariant i44: j == n - 22;\nloop invariant i45: j == n - 23;\nloop invariant i46: j == n - 24;\nloop invariant i47: j == n - 25;\nloop invariant i48: j == n - 26;\nloop invariant i49: j == n - 27;\nloop invariant i50: j == n - 28;\nloop invariant i51: j == n - 29;\nloop invariant i52: j == n - 30;\nloop invariant i53: j == n - 31;\nloop invariant i54: j == n - 32;\nloop invariant i55: j == n - 33;\nloop invariant i56: j == n - 34;\nloop invariant i57: j == n - 35;\nloop invariant i58: j == n - 36;\nloop invariant i59: j == n - 37;\nloop invariant i60: j == n - 38;\nloop invariant i61: j == n - 39;\nloop invariant i62: j == n - 40;\nloop invariant i63: j == n - 41;\nloop invariant i64: j == n - 42;\nloop invariant i65: j == n - 43;\nloop invariant i66: j == n - 44;\nloop invariant i67: j == n - 45;\nloop invariant i68: j == n - 46;\nloop invariant i69: j == n - 47;\nloop invariant i70: j == n - 48;\nloop invariant i71: j == n - 49;\nloop invariant i72: j == n - 50;\nloop invariant i73: j == n - 51;\nloop invariant i74: j == n - 52;\nloop invariant i75: j == n - 53;\nloop invariant i76: j == n - 54;\nloop invariant i77: j == n - 55;\nloop invariant i78: j == n - 56;\nloop invariant i79: j == n - 57;\nloop invariant i80: j == n - 58;\nloop invariant i81: j == n - 59;\nloop invariant i82: j == n - 60;\nloop invariant i83: j == n - 61;\nloop invariant i84: j == n - 62;\nloop invariant i85: j == n - 63;\nloop invariant i86: j == n - 64;\nloop invariant i87: j == n - 65;\nloop invariant i88: j == n - 66;\nloop invariant i89: j == n - 67;\nloop invariant i90: j == n - 68;\nloop invariant i91: j == n - 69;\nloop invariant i92: j == n - 70;\nloop invariant i93: j == n - 71;\nloop invariant i94: j == n - 72;\nloop invariant i95: j == n - 73;\nloop invariant i96: j == n - 74;\nloop invariant i97: j == n - 75;\nloop invariant i98: j == n - 76;\nloop invariant i99: j == n - 77;\nloop invariant i100: j == n - 78;\nloop invariant i101: j == n - 79;\nloop invariant i102: j == n - 80;\nloop invariant i103: j == n - 81;\nloop invariant i104: j == n - 82;\nloop invariant i105: j == n - 83;\nloop invariant i106: j == n - 84;\nloop invariant i107: j == n - 85;\nloop invariant i108: j == n - 86;\nloop invariant i109: j == n - 87;\nloop invariant i110: j == n - 88;\nloop invariant i111: j == n - 89;\nloop invariant i112: j == n - 90;\nloop invariant i113: j == n - 91;\nloop invariant i114: j == n - 92;\nloop invariant i115: k == 0;\nloop invariant i116: j >= i;\nloop invariant i117: 0 <= k <= n;\nloop invariant i118: j >= 0;\nloop invariant i119: k >= 0;\nloop invariant i120: k <= n;\nloop invariant i121: assume(j <= n);\nloop invariant i122: assume(j <= unknown());\nloop invariant i123: 1 <= i <= 100000;\nloop invariant i124: 0 <= j <= 100000;\nloop invariant i125: 0 <= k <= 100000;\nloop invariant i126: n >= 0;\nloop invariant i127: j >= n;\nloop invariant i128: j >= 1;\nloop invariant i129: j <= 100000;\nloop invariant i130: i <= 100000;\nloop invariant i131: 0 <= j <= n + 1;\nloop invariant i132: j <= n + 1;\nloop invariant i133: j <= n ==> i >= n;\nloop invariant i134: j > n ==> i >= n;\nloop invariant i135: j <= n ==> j <= n + 1;\nloop invariant i136: j > n ==> j >= n + 1;\nloop invariant i137: j <= n ==> j >= 0;\nloop invariant i138: j > n ==> j <= n + 1;\nloop invariant i139: 1 <= j <= n; i = k + (j - 1);\n*/\nwhile ( j <= n ) {\n    \n    j++;\n  }\n  {;\n//@ assert( i>= 0);\n}\n\n  }\n}",
        "combined_annotation_num_solver_calls": 62,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int n,j,i,k;\n\n  i = 0;\n  k = 0;\n  j = unknown();\n  n = unknown();\n\n  if ( j<=n ) {\n  /*@\n\n\n\n\n\n\n\nloop invariant i8: 0 <= i <= 0;\nloop invariant i9: -1 <= k <= 0;\n\n\n\nloop invariant i13: i <= k;\n\n\nloop invariant i16: i == 0;\n\nloop invariant i18: i >= 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i115: k == 0;\n\n\n\nloop invariant i119: k >= 0;\n\n\n\n\n\nloop invariant i125: 0 <= k <= 100000;\n\n\n\n\nloop invariant i130: i <= 100000;\n\nloop invariant i132: j <= n + 1;\n\n\nloop invariant i135: j <= n ==> j <= n + 1;\nloop invariant i136: j > n ==> j >= n + 1;\n\nloop invariant i138: j > n ==> j <= n + 1;\n\n*/\nwhile ( j <= n ) {\n    \n    j++;\n  }\n  {;\n//@ assert( i>= 0);\n}\n\n  }\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/up-nested.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/split.c"
        ],
        "skipped": [],
        "total": 39,
        "success_count": 33,
        "failure_count": 6,
        "success_rate": 0.8461538461538461
    }
}