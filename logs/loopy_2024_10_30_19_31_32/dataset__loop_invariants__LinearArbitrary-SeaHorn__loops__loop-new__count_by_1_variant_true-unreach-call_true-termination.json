{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\n\nint main() {\n    int i;\n    for (i = 0; i != LARGE_INT; i++) {\n\t{;\n//@ assert(i <= LARGE_INT);\n}\n\n    }\n    return 0;\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant LARGE_INT == 1000000;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant i < LARGE_INT ==> i + 1 == LARGE_INT;\nloop invariant i < LARGE_INT ==> i + 1 <= LARGE_INT;\nloop invariant i < LARGE_INT ==> LARGE_INT - i == 1;\nloop invariant i < LARGE_INT ==> LARGE_INT - i < 2;\nloop invariant i < LARGE_INT ==> i + 1 < LARGE_INT;\nloop invariant i < LARGE_INT ==> i + 1 <= LARGE_INT;\nloop invariant i < LARGE_INT ==> i < LARGE_INT;\nloop invariant i < LARGE_INT ==> i <= LARGE_INT - 1;\nloop invariant i < LARGE_INT ==> i <= LARGE_INT;\nloop invariant i < LARGE_INT ==> i + 1 == LARGE_INT;\nloop invariant i < LARGE_INT ==> i + 1 < LARGE_INT;\nloop invariant i < LARGE_INT ==> i < LARGE_INT;\nloop invariant i < LARGE_INT ==> i <= LARGE_INT;\nloop invariant i < LARGE_INT ==> i + 1 == LARGE_INT;\nloop invariant i < LARGE_INT ==> i + 1 < LARGE_INT;\nloop invariant i < LARGE_INT ==> i < LARGE_INT;\nloop invariant i < LARGE_INT ==> i <= LARGE_INT;\nloop invariant i < LARGE_INT ==> i + 1 == LARGE_INT;\nloop invariant i < LARGE_INT ==> i + 1 < LARGE_INT;\nloop invariant i < LARGE_INT ==> i < LARGE_INT;\nloop invariant i < LARGE_INT ==> i <= LARGE_INT;\nloop invariant i < LARGE_INT ==> i + 1 == LARGE_INT;\nloop invariant i < LARGE_INT ==> i + 1 < LARGE_INT;\nloop invariant i < LARGE_INT ==> i < LARGE_INT;\nloop invariant i < LARGE_INT ==> i <= LARGE_INT;\nloop invariant i < LARGE_INT ==> i + 1 == LARGE_INT;\nloop invariant i < LARGE_INT ==> i + 1 < LARGE_INT;\nloop invariant i < LARGE_INT ==> i < LARGE_INT;\nloop invariant i < LARGE_INT ==> i <= LARGE_INT;\nloop invariant i < LARGE_INT ==> i + 1 == LARGE_INT;\nloop invariant i < LARGE_INT ==> i + 1 < LARGE_INT;\nloop invariant i < LARGE_INT ==> i < LARGE_INT;\nloop invariant i < LARGE_INT ==> i <= LARGE_INT;\nloop invariant i < LARGE_INT ==> i + 1 == LARGE_INT;\nloop invariant i < LARGE_INT ==> i + 1 < LARGE_INT;\nloop invariant i < LARGE_INT ==> i < LARGE_INT;\nloop invariant i < LARGE_INT ==> i <= LARGE_INT;\nloop invariant i < LARGE_INT ==> i + 1 == LARGE_INT;\nloop invariant i < LARGE_INT ==> i + 1 < LARGE_INT;\nloop invariant i < LARGE_INT ==> i < LARGE_INT;\nloop invariant i < LARGE_INT ==> i <= LARGE_INT;\nloop invariant i < LARGE_INT ==> i + 1 == LARGE_INT;\nloop invariant i < LARGE_INT ==> i + 1 < LARGE_INT;\nloop invariant i < LARGE_INT ==> i < LARGE_INT;\nloop invariant i < LARGE_INT ==> i <= LARGE_INT;\nloop invariant i < LARGE_INT ==> i + 1 == LARGE_INT;\nloop invariant i < LARGE_INT ==> i + 1 < LARGE_INT;\nloop invariant i < LARGE_INT ==> i < LARGE_INT;\nloop invariant i < LARGE_INT ==> i <= LARGE_INT;\nloop invariant i < LARGE_INT ==> i + 1 == LARGE_INT;\nloop invariant i < LARGE_INT ==> i + 1 < LARGE_INT;\nloop invariant i < LARGE_INT ==> i < LARGE_INT;\nloop invariant i < LARGE_INT ==> i <= LARGE_INT;\nloop invariant i < LARGE_INT ==> i + 1 == LARGE_INT;\nloop invariant i < LARGE_INT ==> i + 1 < LARGE_INT;\nloop invariant i < LARGE_INT ==> i < LARGE_INT;\nloop invariant i < LARGE_INT ==> i <= LARGE_INT;\nloop invariant i < LARGE_INT ==> i + 1 == LARGE_INT;\nloop invariant i < LARGE_INT ==> i + 1 < LARGE_INT;\nloop invariant i < LARGE_INT ==> i < LARGE_INT;\nloop invariant i < LARGE_INT ==> i <= LARGE_INT;\nloop invariant i < LARGE_INT ==> i + 1 == LARGE_INT;\nloop invariant i < LARGE_INT ==> i + 1 < LARGE_INT;\nloop invariant i < LARGE_INT ==> i < LARGE_INT;\nloop invariant i < LARGE_INT ==> i <= LARGE_INT;\nloop invariant i < LARGE_INT ==> i + 1 == LARGE_INT;\nloop invariant i < LARGE_INT ==> i + 1 < LARGE_INT;\nloop invariant i < LARGE_INT ==> i < LARGE_INT;\nloop invariant i < LARGE_INT ==> i <= LARGE_INT;\nloop invariant i < LARGE_INT ==> i + 1 == LARGE_INT;\nloop invariant i < LARGE_INT ==> i + 1 < LARGE_INT;\nloop invariant i < LARGE_INT ==> i < LARGE_INT;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= LARGE_INT - 1;\nloop invariant i < LARGE_INT;\n*/\n```",
            "```\n/*@\nloop invariant i <= LARGE_INT;\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant i < LARGE_INT;\n*/\n```",
            "```\n/*@\nloop invariant i <= LARGE_INT;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\n*/\n```",
            "```\n/*@\nloop invariant i >= 0;\nloop invariant i <= LARGE_INT;\nloop invariant i < LARGE_INT ==> i != LARGE_INT;\nloop invariant i >= LARGE_INT ==> i == LARGE_INT;\nloop invariant i == 0 ==> i == 0;\nloop invariant i != 0 ==> i != 0;\n*/\n```",
            "```\n/*@\nloop invariant i >= 0;\nloop invariant i <= LARGE_INT;\nloop invariant i <= LARGE_INT - 1;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT - 2;\nloop invariant i < LARGE_INT - 1;\nloop invariant i <= LARGE_INT - 3;\nloop invariant i < LARGE_INT - 2;\nloop invariant i <= LARGE_INT - 4;\nloop invariant i < LARGE_INT - 3;\nloop invariant i <= LARGE_INT - 5;\nloop invariant i < LARGE_INT - 4;\nloop invariant i <= LARGE_INT - 6;\nloop invariant i < LARGE_INT - 5;\nloop invariant i <= LARGE_INT - 7;\nloop invariant i < LARGE_INT - 6;\nloop invariant i <= LARGE_INT - 8;\nloop invariant i < LARGE_INT - 7;\nloop invariant i <= LARGE_INT - 9;\nloop invariant i < LARGE_INT - 8;\nloop invariant i <= LARGE_INT - 10;\nloop invariant i < LARGE_INT - 9;\nloop invariant i <= LARGE_INT - 11;\nloop invariant i < LARGE_INT - 10;\nloop invariant i <= LARGE_INT - 12;\nloop invariant i < LARGE_INT - 11;\nloop invariant i <= LARGE_INT - 13;\nloop invariant i < LARGE_INT - 12;\nloop invariant i <= LARGE_INT - 14;\nloop invariant i < LARGE_INT - 13;\nloop invariant i <= LARGE_INT - 15;\nloop invariant i < LARGE_INT - 14;\nloop invariant i <= LARGE_INT - 16;\nloop invariant i < LARGE_INT - 15;\nloop invariant i <= LARGE_INT - 17;\nloop invariant i < LARGE_INT - 16;\nloop invariant i <= LARGE_INT - 18;\nloop invariant i < LARGE_INT - 17;\nloop invariant i <= LARGE_INT - 19;\nloop invariant i < LARGE_INT - 18;\nloop invariant i <= LARGE_INT - 20;\nloop invariant i < LARGE_INT - 19;\nloop invariant i <= LARGE_INT - 21;\nloop invariant i < LARGE_INT - 20;\nloop invariant i <= LARGE_INT - 22;\nloop invariant i < LARGE_INT - 21;\nloop invariant i <= LARGE_INT - 23;\nloop invariant i < LARGE_INT - 22;\nloop invariant i <= LARGE_INT - 24;\nloop invariant i < LARGE_INT - 23;\nloop invariant i <= LARGE_INT - 25;\nloop invariant i < LARGE_INT - 24;\nloop invariant i <= LARGE_INT - 26;\nloop invariant i < LARGE_INT - 25;\nloop invariant i <= LARGE_INT - 27;\nloop invariant i < LARGE_INT - 26;\nloop invariant i <= LARGE_INT - 28;\nloop invariant i < LARGE_INT - 27;\nloop invariant i <= LARGE_INT - 29;\nloop invariant i < LARGE_INT - 28;\nloop invariant i <= LARGE_INT - 30;\nloop invariant i < LARGE_INT - 29;\nloop invariant i <= LARGE_INT - 31;\nloop invariant i < LARGE_INT - 30;\nloop invariant i <= LARGE_INT - 32;\nloop invariant i < LARGE_INT - 31;\nloop invariant i <= LARGE_INT - 33;\nloop invariant i < LARGE_INT - 32;\nloop invariant i <= LARGE_INT - 34;\nloop invariant i < LARGE_INT - 33;\nloop invariant i <= LARGE_INT - 35;\nloop invariant i < LARGE_INT - 34;\nloop invariant i <= LARGE_INT - 36;\nloop invariant i < LARGE_INT - 35;\nloop invariant i <= LARGE_INT - 37;\nloop invariant i < LARGE_INT - 36;\nloop invariant i <= LARGE_INT - 38;\nloop invariant i < LARGE_INT - 37;\nloop invariant i <= LARGE_INT - 39;\nloop invariant i < LARGE_INT - 38;\nloop invariant i <= LARGE_INT - 40;\nloop invariant i < LARGE_INT - 39;\nloop invariant i <= LARGE_INT - 41;\nloop invariant i < LARGE_INT - 40;\nloop invariant i <= LARGE_INT - 42;\nloop invariant i < LARGE_INT - 41;\nloop invariant i <= LARGE_INT - 43;\nloop invariant i < LARGE_INT - 42;\nloop invariant i <= LARGE_INT - 44;\nloop invariant i < LARGE_INT - 43;\nloop invariant i <= LARGE_INT - 45;\nloop invariant i < LARGE_INT - 44;\nloop invariant i <= LARGE_INT - 46;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= LARGE_INT ==> i < LARGE_INT;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant i < LARGE_INT ==> i < LARGE_INT - 1;\nloop invariant i >= LARGE_INT ==> i == LARGE_INT;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\n\nint main() {\n    int i;\n    /*@\nloop invariant i1: i >= 0;\n\n*/\nfor (i = 0; i != LARGE_INT; i++) {\n\t{;\n//@ assert(i <= LARGE_INT);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant LARGE_INT == 1000000;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\n\nint main() {\n    int i;\n    /*@\nloop invariant i1: 0 <= i <= LARGE_INT;\nloop invariant i2: LARGE_INT == 1000000;\n*/\nfor (i = 0; i != LARGE_INT; i++) {\n\t{;\n//@ assert(i <= LARGE_INT);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant i < LARGE_INT ==> i + 1 == LARGE_INT;\nloop invariant i < LARGE_INT ==> i + 1 <= LARGE_INT;\nloop invariant i < LARGE_INT ==> LARGE_INT - i == 1;\nloop invariant i < LARGE_INT ==> LARGE_INT - i < 2;\nloop invariant i < LARGE_INT ==> i + 1 < LARGE_INT;\nloop invariant i < LARGE_INT ==> i + 1 <= LARGE_INT;\nloop invariant i < LARGE_INT ==> i < LARGE_INT;\nloop invariant i < LARGE_INT ==> i <= LARGE_INT - 1;\nloop invariant i < LARGE_INT ==> i <= LARGE_INT;\nloop invariant i < LARGE_INT ==> i + 1 == LARGE_INT;\nloop invariant i < LARGE_INT ==> i + 1 < LARGE_INT;\nloop invariant i < LARGE_INT ==> i < LARGE_INT;\nloop invariant i < LARGE_INT ==> i <= LARGE_INT;\nloop invariant i < LARGE_INT ==> i + 1 == LARGE_INT;\nloop invariant i < LARGE_INT ==> i + 1 < LARGE_INT;\nloop invariant i < LARGE_INT ==> i < LARGE_INT;\nloop invariant i < LARGE_INT ==> i <= LARGE_INT;\nloop invariant i < LARGE_INT ==> i + 1 == LARGE_INT;\nloop invariant i < LARGE_INT ==> i + 1 < LARGE_INT;\nloop invariant i < LARGE_INT ==> i < LARGE_INT;\nloop invariant i < LARGE_INT ==> i <= LARGE_INT;\nloop invariant i < LARGE_INT ==> i + 1 == LARGE_INT;\nloop invariant i < LARGE_INT ==> i + 1 < LARGE_INT;\nloop invariant i < LARGE_INT ==> i < LARGE_INT;\nloop invariant i < LARGE_INT ==> i <= LARGE_INT;\nloop invariant i < LARGE_INT ==> i + 1 == LARGE_INT;\nloop invariant i < LARGE_INT ==> i + 1 < LARGE_INT;\nloop invariant i < LARGE_INT ==> i < LARGE_INT;\nloop invariant i < LARGE_INT ==> i <= LARGE_INT;\nloop invariant i < LARGE_INT ==> i + 1 == LARGE_INT;\nloop invariant i < LARGE_INT ==> i + 1 < LARGE_INT;\nloop invariant i < LARGE_INT ==> i < LARGE_INT;\nloop invariant i < LARGE_INT ==> i <= LARGE_INT;\nloop invariant i < LARGE_INT ==> i + 1 == LARGE_INT;\nloop invariant i < LARGE_INT ==> i + 1 < LARGE_INT;\nloop invariant i < LARGE_INT ==> i < LARGE_INT;\nloop invariant i < LARGE_INT ==> i <= LARGE_INT;\nloop invariant i < LARGE_INT ==> i + 1 == LARGE_INT;\nloop invariant i < LARGE_INT ==> i + 1 < LARGE_INT;\nloop invariant i < LARGE_INT ==> i < LARGE_INT;\nloop invariant i < LARGE_INT ==> i <= LARGE_INT;\nloop invariant i < LARGE_INT ==> i + 1 == LARGE_INT;\nloop invariant i < LARGE_INT ==> i + 1 < LARGE_INT;\nloop invariant i < LARGE_INT ==> i < LARGE_INT;\nloop invariant i < LARGE_INT ==> i <= LARGE_INT;\nloop invariant i < LARGE_INT ==> i + 1 == LARGE_INT;\nloop invariant i < LARGE_INT ==> i + 1 < LARGE_INT;\nloop invariant i < LARGE_INT ==> i < LARGE_INT;\nloop invariant i < LARGE_INT ==> i <= LARGE_INT;\nloop invariant i < LARGE_INT ==> i + 1 == LARGE_INT;\nloop invariant i < LARGE_INT ==> i + 1 < LARGE_INT;\nloop invariant i < LARGE_INT ==> i < LARGE_INT;\nloop invariant i < LARGE_INT ==> i <= LARGE_INT;\nloop invariant i < LARGE_INT ==> i + 1 == LARGE_INT;\nloop invariant i < LARGE_INT ==> i + 1 < LARGE_INT;\nloop invariant i < LARGE_INT ==> i < LARGE_INT;\nloop invariant i < LARGE_INT ==> i <= LARGE_INT;\nloop invariant i < LARGE_INT ==> i + 1 == LARGE_INT;\nloop invariant i < LARGE_INT ==> i + 1 < LARGE_INT;\nloop invariant i < LARGE_INT ==> i < LARGE_INT;\nloop invariant i < LARGE_INT ==> i <= LARGE_INT;\nloop invariant i < LARGE_INT ==> i + 1 == LARGE_INT;\nloop invariant i < LARGE_INT ==> i + 1 < LARGE_INT;\nloop invariant i < LARGE_INT ==> i < LARGE_INT;\nloop invariant i < LARGE_INT ==> i <= LARGE_INT;\nloop invariant i < LARGE_INT ==> i + 1 == LARGE_INT;\nloop invariant i < LARGE_INT ==> i + 1 < LARGE_INT;\nloop invariant i < LARGE_INT ==> i < LARGE_INT;\nloop invariant i < LARGE_INT ==> i <= LARGE_INT;\nloop invariant i < LARGE_INT ==> i + 1 == LARGE_INT;\nloop invariant i < LARGE_INT ==> i + 1 < LARGE_INT;\nloop invariant i < LARGE_INT ==> i < LARGE_INT;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\n\nint main() {\n    int i;\n    /*@\nloop invariant i1: 0 <= i <= LARGE_INT;\n\nloop invariant i3: i < LARGE_INT ==> i + 1 <= LARGE_INT;\n\n\n\nloop invariant i7: i < LARGE_INT ==> i < LARGE_INT;\nloop invariant i8: i < LARGE_INT ==> i <= LARGE_INT - 1;\nloop invariant i9: i < LARGE_INT ==> i <= LARGE_INT;\n*/\nfor (i = 0; i != LARGE_INT; i++) {\n\t{;\n//@ assert(i <= LARGE_INT);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= LARGE_INT - 1;\nloop invariant i < LARGE_INT;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\n\nint main() {\n    int i;\n    /*@\n\n\n*/\nfor (i = 0; i != LARGE_INT; i++) {\n\t{;\n//@ assert(i <= LARGE_INT);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant i <= LARGE_INT;\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant i < LARGE_INT;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\n\nint main() {\n    int i;\n    /*@\nloop invariant i1: i <= LARGE_INT;\nloop invariant i2: 0 <= i <= LARGE_INT;\n\n*/\nfor (i = 0; i != LARGE_INT; i++) {\n\t{;\n//@ assert(i <= LARGE_INT);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant i <= LARGE_INT;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\n\nint main() {\n    int i;\n    /*@\nloop invariant i1: i <= LARGE_INT;\n*/\nfor (i = 0; i != LARGE_INT; i++) {\n\t{;\n//@ assert(i <= LARGE_INT);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\n\nint main() {\n    int i;\n    /*@\nloop invariant i1: 0 <= i <= LARGE_INT;\n*/\nfor (i = 0; i != LARGE_INT; i++) {\n\t{;\n//@ assert(i <= LARGE_INT);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\n\nint main() {\n    int i;\n    /*@\nloop invariant i1: 0 <= i <= LARGE_INT;\nloop invariant i2: i <= LARGE_INT;\n*/\nfor (i = 0; i != LARGE_INT; i++) {\n\t{;\n//@ assert(i <= LARGE_INT);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant i >= 0;\nloop invariant i <= LARGE_INT;\nloop invariant i < LARGE_INT ==> i != LARGE_INT;\nloop invariant i >= LARGE_INT ==> i == LARGE_INT;\nloop invariant i == 0 ==> i == 0;\nloop invariant i != 0 ==> i != 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\n\nint main() {\n    int i;\n    /*@\nloop invariant i1: i >= 0;\nloop invariant i2: i <= LARGE_INT;\nloop invariant i3: i < LARGE_INT ==> i != LARGE_INT;\nloop invariant i4: i >= LARGE_INT ==> i == LARGE_INT;\nloop invariant i5: i == 0 ==> i == 0;\nloop invariant i6: i != 0 ==> i != 0;\n*/\nfor (i = 0; i != LARGE_INT; i++) {\n\t{;\n//@ assert(i <= LARGE_INT);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 91,
                "annotations": "```\n/*@\nloop invariant i >= 0;\nloop invariant i <= LARGE_INT;\nloop invariant i <= LARGE_INT - 1;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT - 2;\nloop invariant i < LARGE_INT - 1;\nloop invariant i <= LARGE_INT - 3;\nloop invariant i < LARGE_INT - 2;\nloop invariant i <= LARGE_INT - 4;\nloop invariant i < LARGE_INT - 3;\nloop invariant i <= LARGE_INT - 5;\nloop invariant i < LARGE_INT - 4;\nloop invariant i <= LARGE_INT - 6;\nloop invariant i < LARGE_INT - 5;\nloop invariant i <= LARGE_INT - 7;\nloop invariant i < LARGE_INT - 6;\nloop invariant i <= LARGE_INT - 8;\nloop invariant i < LARGE_INT - 7;\nloop invariant i <= LARGE_INT - 9;\nloop invariant i < LARGE_INT - 8;\nloop invariant i <= LARGE_INT - 10;\nloop invariant i < LARGE_INT - 9;\nloop invariant i <= LARGE_INT - 11;\nloop invariant i < LARGE_INT - 10;\nloop invariant i <= LARGE_INT - 12;\nloop invariant i < LARGE_INT - 11;\nloop invariant i <= LARGE_INT - 13;\nloop invariant i < LARGE_INT - 12;\nloop invariant i <= LARGE_INT - 14;\nloop invariant i < LARGE_INT - 13;\nloop invariant i <= LARGE_INT - 15;\nloop invariant i < LARGE_INT - 14;\nloop invariant i <= LARGE_INT - 16;\nloop invariant i < LARGE_INT - 15;\nloop invariant i <= LARGE_INT - 17;\nloop invariant i < LARGE_INT - 16;\nloop invariant i <= LARGE_INT - 18;\nloop invariant i < LARGE_INT - 17;\nloop invariant i <= LARGE_INT - 19;\nloop invariant i < LARGE_INT - 18;\nloop invariant i <= LARGE_INT - 20;\nloop invariant i < LARGE_INT - 19;\nloop invariant i <= LARGE_INT - 21;\nloop invariant i < LARGE_INT - 20;\nloop invariant i <= LARGE_INT - 22;\nloop invariant i < LARGE_INT - 21;\nloop invariant i <= LARGE_INT - 23;\nloop invariant i < LARGE_INT - 22;\nloop invariant i <= LARGE_INT - 24;\nloop invariant i < LARGE_INT - 23;\nloop invariant i <= LARGE_INT - 25;\nloop invariant i < LARGE_INT - 24;\nloop invariant i <= LARGE_INT - 26;\nloop invariant i < LARGE_INT - 25;\nloop invariant i <= LARGE_INT - 27;\nloop invariant i < LARGE_INT - 26;\nloop invariant i <= LARGE_INT - 28;\nloop invariant i < LARGE_INT - 27;\nloop invariant i <= LARGE_INT - 29;\nloop invariant i < LARGE_INT - 28;\nloop invariant i <= LARGE_INT - 30;\nloop invariant i < LARGE_INT - 29;\nloop invariant i <= LARGE_INT - 31;\nloop invariant i < LARGE_INT - 30;\nloop invariant i <= LARGE_INT - 32;\nloop invariant i < LARGE_INT - 31;\nloop invariant i <= LARGE_INT - 33;\nloop invariant i < LARGE_INT - 32;\nloop invariant i <= LARGE_INT - 34;\nloop invariant i < LARGE_INT - 33;\nloop invariant i <= LARGE_INT - 35;\nloop invariant i < LARGE_INT - 34;\nloop invariant i <= LARGE_INT - 36;\nloop invariant i < LARGE_INT - 35;\nloop invariant i <= LARGE_INT - 37;\nloop invariant i < LARGE_INT - 36;\nloop invariant i <= LARGE_INT - 38;\nloop invariant i < LARGE_INT - 37;\nloop invariant i <= LARGE_INT - 39;\nloop invariant i < LARGE_INT - 38;\nloop invariant i <= LARGE_INT - 40;\nloop invariant i < LARGE_INT - 39;\nloop invariant i <= LARGE_INT - 41;\nloop invariant i < LARGE_INT - 40;\nloop invariant i <= LARGE_INT - 42;\nloop invariant i < LARGE_INT - 41;\nloop invariant i <= LARGE_INT - 43;\nloop invariant i < LARGE_INT - 42;\nloop invariant i <= LARGE_INT - 44;\nloop invariant i < LARGE_INT - 43;\nloop invariant i <= LARGE_INT - 45;\nloop invariant i < LARGE_INT - 44;\nloop invariant i <= LARGE_INT - 46;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\n\nint main() {\n    int i;\n    /*@\nloop invariant i1: i >= 0;\nloop invariant i2: i <= LARGE_INT;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nfor (i = 0; i != LARGE_INT; i++) {\n\t{;\n//@ assert(i <= LARGE_INT);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\n\nint main() {\n    int i;\n    /*@\nloop invariant i1: 0 <= i <= LARGE_INT;\nloop invariant i2: i <= LARGE_INT;\n*/\nfor (i = 0; i != LARGE_INT; i++) {\n\t{;\n//@ assert(i <= LARGE_INT);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= LARGE_INT ==> i < LARGE_INT;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\n\nint main() {\n    int i;\n    /*@\n\n*/\nfor (i = 0; i != LARGE_INT; i++) {\n\t{;\n//@ assert(i <= LARGE_INT);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\n\nint main() {\n    int i;\n    /*@\nloop invariant i1: 0 <= i <= LARGE_INT;\nloop invariant i2: i <= LARGE_INT;\n*/\nfor (i = 0; i != LARGE_INT; i++) {\n\t{;\n//@ assert(i <= LARGE_INT);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant i < LARGE_INT ==> i < LARGE_INT - 1;\nloop invariant i >= LARGE_INT ==> i == LARGE_INT;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\n\nint main() {\n    int i;\n    /*@\nloop invariant i1: 0 <= i <= LARGE_INT;\n\nloop invariant i3: i >= LARGE_INT ==> i == LARGE_INT;\n*/\nfor (i = 0; i != LARGE_INT; i++) {\n\t{;\n//@ assert(i <= LARGE_INT);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\n\nint main() {\n    int i;\n    /*@\nloop invariant i1: 0 <= i <= LARGE_INT;\nloop invariant i2: i <= LARGE_INT;\n*/\nfor (i = 0; i != LARGE_INT; i++) {\n\t{;\n//@ assert(i <= LARGE_INT);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": true
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "loop invariant i >= 0 is partially proven to be inductive.\nloop invariant i < LARGE_INT is partially proven to be inductive.\nloop invariant 0 <= i <= LARGE_INT is partially proven to be inductive.\nloop invariant LARGE_INT == 1000000 is partially proven to be inductive.\nloop invariant i < LARGE_INT ==> i + 1 == LARGE_INT is preserved but not established.\nloop invariant i < LARGE_INT ==> i + 1 <= LARGE_INT is partially proven to be inductive.\nloop invariant i < LARGE_INT ==> LARGE_INT - i == 1 is partially proven to be inductive.\nloop invariant i < LARGE_INT ==> LARGE_INT - i < 2 is partially proven to be inductive.\nloop invariant i < LARGE_INT ==> i + 1 < LARGE_INT is partially proven to be inductive.\nloop invariant i < LARGE_INT ==> i < LARGE_INT is partially proven to be inductive.\nloop invariant i < LARGE_INT ==> i <= LARGE_INT - 1 is partially proven to be inductive.\nloop invariant i < LARGE_INT ==> i <= LARGE_INT is partially proven to be inductive.\nloop invariant 0 <= i <= LARGE_INT - 1 is partially proven to be inductive.\nloop invariant i <= LARGE_INT is partially proven to be inductive.\nloop invariant i < LARGE_INT ==> i != LARGE_INT is partially proven to be inductive.\nloop invariant i >= LARGE_INT ==> i == LARGE_INT is partially proven to be inductive.\nloop invariant i == 0 ==> i == 0 is partially proven to be inductive.\nloop invariant i != 0 ==> i != 0 is partially proven to be inductive.\nloop invariant i <= LARGE_INT - 1 is partially proven to be inductive.\nloop invariant i <= LARGE_INT - 2 is partially proven to be inductive.\nloop invariant i < LARGE_INT - 1 is partially proven to be inductive.\nloop invariant i <= LARGE_INT - 3 is partially proven to be inductive.\nloop invariant i < LARGE_INT - 2 is partially proven to be inductive.\nloop invariant i <= LARGE_INT - 4 is partially proven to be inductive.\nloop invariant i < LARGE_INT - 3 is partially proven to be inductive.\nloop invariant i <= LARGE_INT - 5 is partially proven to be inductive.\nloop invariant i < LARGE_INT - 4 is partially proven to be inductive.\nloop invariant i <= LARGE_INT - 6 is partially proven to be inductive.\nloop invariant i < LARGE_INT - 5 is partially proven to be inductive.\nloop invariant i <= LARGE_INT - 7 is partially proven to be inductive.\nloop invariant i < LARGE_INT - 6 is partially proven to be inductive.\nloop invariant i <= LARGE_INT - 8 is partially proven to be inductive.\nloop invariant i < LARGE_INT - 7 is partially proven to be inductive.\nloop invariant i <= LARGE_INT - 9 is partially proven to be inductive.\nloop invariant i < LARGE_INT - 8 is partially proven to be inductive.\nloop invariant i <= LARGE_INT - 10 is partially proven to be inductive.\nloop invariant i < LARGE_INT - 9 is partially proven to be inductive.\nloop invariant i <= LARGE_INT - 11 is partially proven to be inductive.\nloop invariant i < LARGE_INT - 10 is partially proven to be inductive.\nloop invariant i <= LARGE_INT - 12 is partially proven to be inductive.\nloop invariant i < LARGE_INT - 11 is partially proven to be inductive.\nloop invariant i <= LARGE_INT - 13 is partially proven to be inductive.\nloop invariant i < LARGE_INT - 12 is partially proven to be inductive.\nloop invariant i <= LARGE_INT - 14 is partially proven to be inductive.\nloop invariant i < LARGE_INT - 13 is partially proven to be inductive.\nloop invariant i <= LARGE_INT - 15 is partially proven to be inductive.\nloop invariant i < LARGE_INT - 14 is partially proven to be inductive.\nloop invariant i <= LARGE_INT - 16 is partially proven to be inductive.\nloop invariant i < LARGE_INT - 15 is partially proven to be inductive.\nloop invariant i <= LARGE_INT - 17 is partially proven to be inductive.\nloop invariant i < LARGE_INT - 16 is partially proven to be inductive.\nloop invariant i <= LARGE_INT - 18 is partially proven to be inductive.\nloop invariant i < LARGE_INT - 17 is partially proven to be inductive.\nloop invariant i <= LARGE_INT - 19 is partially proven to be inductive.\nloop invariant i < LARGE_INT - 18 is partially proven to be inductive.\nloop invariant i <= LARGE_INT - 20 is partially proven to be inductive.\nloop invariant i < LARGE_INT - 19 is partially proven to be inductive.\nloop invariant i <= LARGE_INT - 21 is partially proven to be inductive.\nloop invariant i < LARGE_INT - 20 is partially proven to be inductive.\nloop invariant i <= LARGE_INT - 22 is partially proven to be inductive.\nloop invariant i < LARGE_INT - 21 is partially proven to be inductive.\nloop invariant i <= LARGE_INT - 23 is partially proven to be inductive.\nloop invariant i < LARGE_INT - 22 is partially proven to be inductive.\nloop invariant i <= LARGE_INT - 24 is partially proven to be inductive.\nloop invariant i < LARGE_INT - 23 is partially proven to be inductive.\nloop invariant i <= LARGE_INT - 25 is partially proven to be inductive.\nloop invariant i < LARGE_INT - 24 is partially proven to be inductive.\nloop invariant i <= LARGE_INT - 26 is partially proven to be inductive.\nloop invariant i < LARGE_INT - 25 is partially proven to be inductive.\nloop invariant i <= LARGE_INT - 27 is partially proven to be inductive.\nloop invariant i < LARGE_INT - 26 is partially proven to be inductive.\nloop invariant i <= LARGE_INT - 28 is partially proven to be inductive.\nloop invariant i < LARGE_INT - 27 is partially proven to be inductive.\nloop invariant i <= LARGE_INT - 29 is partially proven to be inductive.\nloop invariant i < LARGE_INT - 28 is partially proven to be inductive.\nloop invariant i <= LARGE_INT - 30 is partially proven to be inductive.\nloop invariant i < LARGE_INT - 29 is partially proven to be inductive.\nloop invariant i <= LARGE_INT - 31 is partially proven to be inductive.\nloop invariant i < LARGE_INT - 30 is partially proven to be inductive.\nloop invariant i <= LARGE_INT - 32 is partially proven to be inductive.\nloop invariant i < LARGE_INT - 31 is partially proven to be inductive.\nloop invariant i <= LARGE_INT - 33 is partially proven to be inductive.\nloop invariant i < LARGE_INT - 32 is partially proven to be inductive.\nloop invariant i <= LARGE_INT - 34 is partially proven to be inductive.\nloop invariant i < LARGE_INT - 33 is partially proven to be inductive.\nloop invariant i <= LARGE_INT - 35 is partially proven to be inductive.\nloop invariant i < LARGE_INT - 34 is partially proven to be inductive.\nloop invariant i <= LARGE_INT - 36 is partially proven to be inductive.\nloop invariant i < LARGE_INT - 35 is partially proven to be inductive.\nloop invariant i <= LARGE_INT - 37 is partially proven to be inductive.\nloop invariant i < LARGE_INT - 36 is partially proven to be inductive.\nloop invariant i <= LARGE_INT - 38 is partially proven to be inductive.\nloop invariant i < LARGE_INT - 37 is partially proven to be inductive.\nloop invariant i <= LARGE_INT - 39 is partially proven to be inductive.\nloop invariant i < LARGE_INT - 38 is partially proven to be inductive.\nloop invariant i <= LARGE_INT - 40 is partially proven to be inductive.\nloop invariant i < LARGE_INT - 39 is partially proven to be inductive.\nloop invariant i <= LARGE_INT - 41 is partially proven to be inductive.\nloop invariant i < LARGE_INT - 40 is partially proven to be inductive.\nloop invariant i <= LARGE_INT - 42 is partially proven to be inductive.\nloop invariant i < LARGE_INT - 41 is partially proven to be inductive.\nloop invariant i <= LARGE_INT - 43 is partially proven to be inductive.\nloop invariant i < LARGE_INT - 42 is partially proven to be inductive.\nloop invariant i <= LARGE_INT - 44 is partially proven to be inductive.\nloop invariant i < LARGE_INT - 43 is partially proven to be inductive.\nloop invariant i <= LARGE_INT - 45 is partially proven to be inductive.\nloop invariant i < LARGE_INT - 44 is partially proven to be inductive.\nloop invariant i <= LARGE_INT - 46 is partially proven to be inductive.\nloop invariant 0 <= i <= LARGE_INT ==> i < LARGE_INT is partially proven to be inductive.\nloop invariant i < LARGE_INT ==> i < LARGE_INT - 1 is partially proven to be inductive.\nAssertion i <= 1000000: Partially proven",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\n\nint main() {\n    int i;\n    /*@\nloop invariant i1: i >= 0;\nloop invariant i2: i < LARGE_INT;\nloop invariant i3: 0 <= i <= LARGE_INT;\nloop invariant i4: LARGE_INT == 1000000;\nloop invariant i5: i < LARGE_INT ==> i + 1 == LARGE_INT;\nloop invariant i6: i < LARGE_INT ==> i + 1 <= LARGE_INT;\nloop invariant i7: i < LARGE_INT ==> LARGE_INT - i == 1;\nloop invariant i8: i < LARGE_INT ==> LARGE_INT - i < 2;\nloop invariant i9: i < LARGE_INT ==> i + 1 < LARGE_INT;\nloop invariant i10: i < LARGE_INT ==> i < LARGE_INT;\nloop invariant i11: i < LARGE_INT ==> i <= LARGE_INT - 1;\nloop invariant i12: i < LARGE_INT ==> i <= LARGE_INT;\nloop invariant i13: 0 <= i <= LARGE_INT - 1;\nloop invariant i14: i <= LARGE_INT;\nloop invariant i15: i < LARGE_INT ==> i != LARGE_INT;\nloop invariant i16: i >= LARGE_INT ==> i == LARGE_INT;\nloop invariant i17: i == 0 ==> i == 0;\nloop invariant i18: i != 0 ==> i != 0;\nloop invariant i19: i <= LARGE_INT - 1;\nloop invariant i20: i <= LARGE_INT - 2;\nloop invariant i21: i < LARGE_INT - 1;\nloop invariant i22: i <= LARGE_INT - 3;\nloop invariant i23: i < LARGE_INT - 2;\nloop invariant i24: i <= LARGE_INT - 4;\nloop invariant i25: i < LARGE_INT - 3;\nloop invariant i26: i <= LARGE_INT - 5;\nloop invariant i27: i < LARGE_INT - 4;\nloop invariant i28: i <= LARGE_INT - 6;\nloop invariant i29: i < LARGE_INT - 5;\nloop invariant i30: i <= LARGE_INT - 7;\nloop invariant i31: i < LARGE_INT - 6;\nloop invariant i32: i <= LARGE_INT - 8;\nloop invariant i33: i < LARGE_INT - 7;\nloop invariant i34: i <= LARGE_INT - 9;\nloop invariant i35: i < LARGE_INT - 8;\nloop invariant i36: i <= LARGE_INT - 10;\nloop invariant i37: i < LARGE_INT - 9;\nloop invariant i38: i <= LARGE_INT - 11;\nloop invariant i39: i < LARGE_INT - 10;\nloop invariant i40: i <= LARGE_INT - 12;\nloop invariant i41: i < LARGE_INT - 11;\nloop invariant i42: i <= LARGE_INT - 13;\nloop invariant i43: i < LARGE_INT - 12;\nloop invariant i44: i <= LARGE_INT - 14;\nloop invariant i45: i < LARGE_INT - 13;\nloop invariant i46: i <= LARGE_INT - 15;\nloop invariant i47: i < LARGE_INT - 14;\nloop invariant i48: i <= LARGE_INT - 16;\nloop invariant i49: i < LARGE_INT - 15;\nloop invariant i50: i <= LARGE_INT - 17;\nloop invariant i51: i < LARGE_INT - 16;\nloop invariant i52: i <= LARGE_INT - 18;\nloop invariant i53: i < LARGE_INT - 17;\nloop invariant i54: i <= LARGE_INT - 19;\nloop invariant i55: i < LARGE_INT - 18;\nloop invariant i56: i <= LARGE_INT - 20;\nloop invariant i57: i < LARGE_INT - 19;\nloop invariant i58: i <= LARGE_INT - 21;\nloop invariant i59: i < LARGE_INT - 20;\nloop invariant i60: i <= LARGE_INT - 22;\nloop invariant i61: i < LARGE_INT - 21;\nloop invariant i62: i <= LARGE_INT - 23;\nloop invariant i63: i < LARGE_INT - 22;\nloop invariant i64: i <= LARGE_INT - 24;\nloop invariant i65: i < LARGE_INT - 23;\nloop invariant i66: i <= LARGE_INT - 25;\nloop invariant i67: i < LARGE_INT - 24;\nloop invariant i68: i <= LARGE_INT - 26;\nloop invariant i69: i < LARGE_INT - 25;\nloop invariant i70: i <= LARGE_INT - 27;\nloop invariant i71: i < LARGE_INT - 26;\nloop invariant i72: i <= LARGE_INT - 28;\nloop invariant i73: i < LARGE_INT - 27;\nloop invariant i74: i <= LARGE_INT - 29;\nloop invariant i75: i < LARGE_INT - 28;\nloop invariant i76: i <= LARGE_INT - 30;\nloop invariant i77: i < LARGE_INT - 29;\nloop invariant i78: i <= LARGE_INT - 31;\nloop invariant i79: i < LARGE_INT - 30;\nloop invariant i80: i <= LARGE_INT - 32;\nloop invariant i81: i < LARGE_INT - 31;\nloop invariant i82: i <= LARGE_INT - 33;\nloop invariant i83: i < LARGE_INT - 32;\nloop invariant i84: i <= LARGE_INT - 34;\nloop invariant i85: i < LARGE_INT - 33;\nloop invariant i86: i <= LARGE_INT - 35;\nloop invariant i87: i < LARGE_INT - 34;\nloop invariant i88: i <= LARGE_INT - 36;\nloop invariant i89: i < LARGE_INT - 35;\nloop invariant i90: i <= LARGE_INT - 37;\nloop invariant i91: i < LARGE_INT - 36;\nloop invariant i92: i <= LARGE_INT - 38;\nloop invariant i93: i < LARGE_INT - 37;\nloop invariant i94: i <= LARGE_INT - 39;\nloop invariant i95: i < LARGE_INT - 38;\nloop invariant i96: i <= LARGE_INT - 40;\nloop invariant i97: i < LARGE_INT - 39;\nloop invariant i98: i <= LARGE_INT - 41;\nloop invariant i99: i < LARGE_INT - 40;\nloop invariant i100: i <= LARGE_INT - 42;\nloop invariant i101: i < LARGE_INT - 41;\nloop invariant i102: i <= LARGE_INT - 43;\nloop invariant i103: i < LARGE_INT - 42;\nloop invariant i104: i <= LARGE_INT - 44;\nloop invariant i105: i < LARGE_INT - 43;\nloop invariant i106: i <= LARGE_INT - 45;\nloop invariant i107: i < LARGE_INT - 44;\nloop invariant i108: i <= LARGE_INT - 46;\nloop invariant i109: 0 <= i <= LARGE_INT ==> i < LARGE_INT;\nloop invariant i110: i < LARGE_INT ==> i < LARGE_INT - 1;\n*/\nfor (i = 0; i != LARGE_INT; i++) {\n\t{;\n//@ assert(i <= LARGE_INT);\n}\n\n    }\n    return 0;\n}",
        "combined_annotation_num_solver_calls": 99,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\n\nint main() {\n    int i;\n    /*@\nloop invariant i1: i >= 0;\n\nloop invariant i3: 0 <= i <= LARGE_INT;\nloop invariant i4: LARGE_INT == 1000000;\n\nloop invariant i6: i < LARGE_INT ==> i + 1 <= LARGE_INT;\n\n\n\nloop invariant i10: i < LARGE_INT ==> i < LARGE_INT;\nloop invariant i11: i < LARGE_INT ==> i <= LARGE_INT - 1;\nloop invariant i12: i < LARGE_INT ==> i <= LARGE_INT;\n\nloop invariant i14: i <= LARGE_INT;\nloop invariant i15: i < LARGE_INT ==> i != LARGE_INT;\nloop invariant i16: i >= LARGE_INT ==> i == LARGE_INT;\nloop invariant i17: i == 0 ==> i == 0;\nloop invariant i18: i != 0 ==> i != 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nfor (i = 0; i != LARGE_INT; i++) {\n\t{;\n//@ assert(i <= LARGE_INT);\n}\n\n    }\n    return 0;\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/split.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c"
        ],
        "skipped": [],
        "total": 56,
        "success_count": 47,
        "failure_count": 9,
        "success_rate": 0.8392857142857143
    }
}