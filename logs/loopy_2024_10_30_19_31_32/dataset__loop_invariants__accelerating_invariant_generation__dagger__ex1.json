{
    "logs": {
        "file": "../dataset/loop_invariants/accelerating_invariant_generation/dagger/ex1.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main () {\n\nint x;\nint y;\nint xa = 0;\nint ya = 0;\n\nwhile (unknown_int()) {\n\tx = xa + 2*ya;\n\ty = -2*xa + ya;\n\n\tx++;\n\tif (unknown_int()) y\t= y+x;\n\telse y = y-x;\n\n\txa = x - 2*y;\n\tya = 2*x + y;\n}\n\n{;\n//@ assert(xa + 2*ya >= 0);\n}\n\nreturn 0;\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 1 + xa + ya - (x * x + x) = 0; loop invariant ya * ya - ya - (y * y + y) = 0; loop invariant xa + ya >= 0; loop invariant xa >= ya; loop invariant xa >= 0; loop invariant ya >= 0; loop invariant x >= 0; loop invariant y >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= xa <= 100000;\nloop invariant 0 <= ya <= 100000;\nloop invariant xa >= 2*ya;\nloop invariant ya >= -2*xa;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x * x + y * y;\nloop invariant x * x + y * y >= xa * xa + ya * ya;\nloop invariant xa * xa + ya * ya >= 0;\nloop invariant xa * xa + ya * ya <= x * x + y * y;\nloop invariant xa * xa + ya * ya >= xa * xa + ya * ya;\nloop invariant xa * xa + ya * ya <= x * x + y * y;\nloop invariant xa * xa + ya * ya >= xa * xa + ya * ya;\nloop invariant xa * xa + ya * ya <= x * x + y * y;\nloop invariant xa * xa + ya * ya >= xa * xa + ya * ya;\nloop invariant xa * xa + ya * ya <= x * x + y * y;\nloop invariant xa * xa + ya * ya >= xa * xa + ya * ya;\nloop invariant xa * xa + ya * ya <= x * x + y * y;\nloop invariant xa * xa + ya * ya >= xa * xa + ya * ya;\nloop invariant xa * xa + ya * ya <= x * x + y * y;\nloop invariant xa * xa + ya * ya >= xa * xa + ya * ya;\nloop invariant xa * xa + ya * ya <= x * x + y * y;\nloop invariant xa * xa + ya * ya >= xa * xa + ya * ya;\nloop invariant xa * xa + ya * ya <= x * x + y * y;\nloop invariant xa * xa + ya * ya >= xa * xa + ya * ya;\nloop invariant xa * xa + ya * ya <= x * x + y * y;\nloop invariant xa * xa + ya * ya >= xa * xa + ya * ya;\nloop invariant xa * xa + ya * ya <= x * x + y * y;\nloop invariant xa * xa + ya * ya >= xa * xa + ya * ya;\nloop invariant xa * xa + ya * ya <= x * x + y * y;\nloop invariant xa * xa + ya * ya >= xa * xa + ya * ya;\nloop invariant xa * xa + ya * ya <= x * x + y * y;\nloop invariant xa * xa + ya * ya >= xa * xa + ya * ya;\nloop invariant xa * xa + ya * ya <= x * x + y * y;\nloop invariant xa * xa + ya * ya >= xa * xa + ya * ya;\nloop invariant xa * xa + ya * ya <= x * x + y * y;\nloop invariant xa * xa + ya * ya >= xa * xa + ya * ya;\nloop invariant xa * xa + ya * ya <= x * x + y * y;\nloop invariant xa * xa + ya * ya >= xa * xa + ya * ya;\nloop invariant xa * xa + ya * ya <= x * x + y * y;\nloop invariant xa * xa + ya * ya >= xa * xa + ya * ya;\nloop invariant xa * xa + ya * ya <= x * x + y * y;\nloop invariant xa * xa + ya * ya >= xa * xa + ya * ya;\nloop invariant xa * xa + ya * ya <= x * x + y * y;\nloop invariant xa * xa + ya * ya >= xa * xa + ya * ya;\nloop invariant xa * xa + ya * ya <= x * x + y * y;\nloop invariant xa * xa + ya * ya >= xa * xa + ya * ya;\nloop invariant xa * xa + ya * ya <= x * x + y * y;\nloop invariant xa * xa + ya * ya >= xa * xa + ya * ya;\nloop invariant xa * xa + ya * ya <= x * x + y * y;\nloop invariant xa * xa + ya * ya >= xa * xa + ya * ya;\nloop invariant xa * xa + ya * ya <= x * x + y * y;\nloop invariant xa * xa + ya * ya >= xa * xa + ya * ya;\nloop invariant xa * xa + ya * ya <= x * x + y * y;\nloop invariant xa * xa + ya * ya >= xa * xa + ya * ya;\nloop invariant xa * xa + ya * ya <= x * x + y * y;\nloop invariant xa * xa + ya * ya >= xa * xa + ya * ya;\nloop invariant xa * xa + ya * ya <= x * x + y * y;\nloop invariant xa * xa + ya * ya >= xa * xa + ya * ya;\nloop invariant xa * xa + ya * ya <= x * x + y * y;\nloop invariant xa * xa + ya * ya >= xa * xa + ya * ya;\nloop invariant xa * xa + ya * ya <= x * x + y * y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= xa <= x;\nloop invariant 0 <= ya <= y;\nloop invariant xa + 2*ya >= 0;\nloop invariant x >= xa + 2*ya;\nloop invariant y >= -2*xa + ya;\nloop invariant x >= xa + 2*ya;\nloop invariant x >= 2*ya;\nloop invariant y >= -2*xa + ya;\nloop invariant y >= xa + 2*ya;\nloop invariant x >= 2*ya;\nloop invariant y >= -2*xa + ya;\nloop invariant x >= xa + 2*ya;\nloop invariant x >= 2*ya;\nloop invariant y >= -2*xa + ya;\nloop invariant y >= xa + 2*ya;\nloop invariant x >= 2*ya;\nloop invariant y >= -2*xa + ya;\nloop invariant x >= xa + 2*ya;\nloop invariant x >= 2*ya;\nloop invariant y >= -2*xa + ya;\nloop invariant y >= xa + 2*ya;\nloop invariant x >= 2*ya;\nloop invariant y >= -2*xa + ya;\nloop invariant x >= xa + 2*ya;\nloop invariant x >= 2*ya;\nloop invariant y >= -2*xa + ya;\nloop invariant y >= xa + 2*ya;\nloop invariant x >= 2*ya;\nloop invariant y >= -2*xa + ya;\nloop invariant x >= xa + 2*ya;\nloop invariant x >= 2*ya;\nloop invariant y >= -2*xa + ya;\nloop invariant y >= xa + 2*ya;\nloop invariant x >= 2*ya;\nloop invariant y >= -2*xa + ya;\nloop invariant x >= xa + 2*ya;\nloop invariant x >= 2*ya;\nloop invariant y >= -2*xa + ya;\nloop invariant y >= xa + 2*ya;\nloop invariant x >= 2*ya;\nloop invariant y >= -2*xa + ya;\nloop invariant x >= xa + 2*ya;\nloop invariant x >= 2*ya;\nloop invariant y >= -2*xa + ya;\nloop invariant y >= xa + 2*ya;\nloop invariant x >= 2*ya;\nloop invariant y >= -2*xa + ya;\nloop invariant x >= xa + 2*ya;\nloop invariant x >= 2*ya;\nloop invariant y >= -2*xa + ya;\nloop invariant y >= xa + 2*ya;\nloop invariant x >= 2*ya;\nloop invariant y >= -2*xa + ya;\nloop invariant x >= xa + 2*ya;\nloop invariant x >= 2*ya;\nloop invariant y >= -2*xa + ya;\nloop invariant y >= xa + 2*ya;\nloop invariant x >= 2*ya;\nloop invariant y >= -2*xa + ya;\nloop invariant x >= xa + 2*ya;\nloop invariant x >= 2*ya;\nloop invariant y >= -2*xa + ya;\nloop invariant y >= xa + 2*ya;\nloop invariant x >= 2*ya;\nloop invariant y >= -2*xa + ya;\nloop invariant x >= xa + 2*ya;\nloop invariant x >= 2*ya;\nloop invariant y >= -2*xa + ya;\nloop invariant y >= xa + 2*ya;\nloop invariant x >= 2*ya;\nloop invariant y >= -2*xa + ya;\nloop invariant x >= xa + 2*ya;\nloop invariant x >= 2*ya;\nloop invariant y >= -2*xa + ya;\nloop invariant y >= xa + 2*ya;\nloop invariant x >= 2*ya;\nloop invariant y >= -2*xa + ya;\nloop invariant x >= xa + 2*ya;\nloop invariant x >= 2*ya;\nloop invariant y >= -2*xa + ya;\nloop invariant y >= xa + 2*ya;\nloop invariant x >= 2*ya;\nloop invariant y >= -2*xa + ya;\nloop invariant x >= xa + 2*ya;\nloop invariant x >= 2*ya;\nloop invariant y >= -2*xa + ya;\nloop invariant y >= xa + 2*ya;\nloop invariant x >= 2*ya;\nloop invariant y >= -2*xa + ya;\nloop invariant x >= xa + 2*ya;\nloop invariant x >= 2*ya;\nloop invariant y >= -2*xa + ya;\nloop invariant y >= xa + 2*ya;\nloop invariant x >= 2*ya;\nloop invariant y >= -2*xa + ya;\nloop invariant x >= xa + 2*ya;\n*/\n```",
            "```\n/*@\nloop invariant x >= xa + 2*ya;\nloop invariant y >= -2*xa + ya;\nloop invariant xa >= 0;\nloop invariant ya >= 0;\nloop invariant xa + 2*ya >= 0;\nloop invariant x + y >= 0;\nloop invariant xa - 2*y >= 0;\nloop invariant 2*x + y >= 0;\nloop invariant x + y >= 0;\nloop invariant xa - 2*y >= 0;\nloop invariant 2*x + y >= 0;\nloop invariant x + y >= 0;\nloop invariant xa - 2*y >= 0;\nloop invariant 2*x + y >= 0;\nloop invariant x + y >= 0;\nloop invariant xa - 2*y >= 0;\nloop invariant 2*x + y >= 0;\nloop invariant x + y >= 0;\nloop invariant xa - 2*y >= 0;\nloop invariant 2*x + y >= 0;\nloop invariant x + y >= 0;\nloop invariant xa - 2*y >= 0;\nloop invariant 2*x + y >= 0;\nloop invariant x + y >= 0;\nloop invariant xa - 2*y >= 0;\nloop invariant 2*x + y >= 0;\nloop invariant x + y >= 0;\nloop invariant xa - 2*y >= 0;\nloop invariant 2*x + y >= 0;\nloop invariant x + y >= 0;\nloop invariant xa - 2*y >= 0;\nloop invariant 2*x + y >= 0;\nloop invariant x + y >= 0;\nloop invariant xa - 2*y >= 0;\nloop invariant 2*x + y >= 0;\nloop invariant x + y >= 0;\nloop invariant xa - 2*y >= 0;\nloop invariant 2*x + y >= 0;\nloop invariant x + y >= 0;\nloop invariant xa - 2*y >= 0;\nloop invariant 2*x + y >= 0;\nloop invariant x + y >= 0;\nloop invariant xa - 2*y >= 0;\nloop invariant 2*x + y >= 0;\nloop invariant x + y >= 0;\nloop invariant xa - 2*y >= 0;\nloop invariant 2*x + y >= 0;\nloop invariant x + y >= 0;\nloop invariant xa - 2*y >= 0;\nloop invariant 2*x + y >= 0;\nloop invariant x + y >= 0;\nloop invariant xa - 2*y >= 0;\nloop invariant 2*x + y >= 0;\nloop invariant x + y >= 0;\nloop invariant xa - 2*y >= 0;\nloop invariant 2*x + y >= 0;\nloop invariant x + y >= 0;\nloop invariant xa - 2*y >= 0;\nloop invariant 2*x + y >= 0;\nloop invariant x + y >= 0;\nloop invariant xa - 2*y >= 0;\nloop invariant 2*x + y >= 0;\nloop invariant x + y >= 0;\nloop invariant xa - 2*y >= 0;\nloop invariant 2*x + y >= 0;\nloop invariant x + y >= 0;\nloop invariant xa - 2*y >= 0;\nloop invariant 2*x + y >= 0;\nloop invariant x + y >= 0;\nloop invariant xa - 2*y >= 0;\nloop invariant 2*x + y >= 0;\nloop invariant x + y >= 0;\nloop invariant xa - 2*y >= 0;\nloop invariant 2*x + y >= 0;\nloop invariant x + y >= 0;\nloop invariant xa - 2*y >= 0;\nloop invariant 2*x + y >= 0;\nloop invariant x + y >= 0;\nloop invariant xa - 2*y >= 0;\nloop invariant 2*x + y >= 0;\nloop invariant x + y >= 0;\nloop invariant xa - 2*y >= 0;\nloop invariant 2*x + y >= 0;\nloop invariant x + y >= 0;\nloop invariant xa - 2*y >= 0;\nloop invariant 2*x + y >= 0;\nloop invariant x + y >= 0;\nloop invariant xa - 2*y >= 0;\nloop invariant 2*x + y >= 0;\nloop invariant x + y >= 0;\nloop invariant xa - 2*y >= 0;\nloop invariant 2*x + y >= 0;\nloop invariant x + y >= 0;\nloop invariant xa - 2*y >= 0;\nloop invariant 2*x + y >= 0;\nloop invariant x + y >= 0;\nloop invariant xa - 2*y >= 0;\n*/\n```",
            "```\n/*@\nloop invariant y = -2*xa + ya;\nloop invariant x = xa + 2*ya;\nloop invariant xa >= -y;\nloop invariant ya >= x;\n*/\n```",
            "```\n/*@\nloop invariant ya >= 0;\nloop invariant xa >= 2*ya;\nloop invariant ya > 0 ==> xa > ya;\nloop invariant xa >= 2*ya ==> xa > ya;\nloop invariant xa >= ya;\nloop invariant xa >= ya ==> xa > ya;\nloop invariant xa >= ya ==> xa >= 2*ya;\nloop invariant xa >= ya ==> xa >= 2*ya && xa > ya;\nloop invariant xa >= ya ==> xa >= 2*ya && xa > ya ==> xa > ya;\nloop invariant xa >= ya ==> xa >= 2*ya && xa > ya ==> xa > ya ==> xa >= ya;\nloop invariant xa >= ya ==> xa >= 2*ya && xa > ya ==> xa > ya ==> xa >= ya ==> xa >= ya;\nloop invariant xa >= ya ==> xa >= 2*ya && xa > ya ==> xa > ya ==> xa >= ya ==> xa >= ya ==> xa >= ya;\nloop invariant xa >= ya ==> xa >= 2*ya && xa > ya ==> xa > ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya;\nloop invariant xa >= ya ==> xa >= 2*ya && xa > ya ==> xa > ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya;\nloop invariant xa >= ya ==> xa >= 2*ya && xa > ya ==> xa > ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya;\nloop invariant xa >= ya ==> xa >= 2*ya && xa > ya ==> xa > ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya;\nloop invariant xa >= ya ==> xa >= 2*ya && xa > ya ==> xa > ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya;\nloop invariant xa >= ya ==> xa >= 2*ya && xa > ya ==> xa > ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya;\nloop invariant xa >= ya ==> xa >= 2*ya && xa > ya ==> xa > ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya;\nloop invariant xa >= ya ==> xa >= 2*ya && xa > ya ==> xa > ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya;\nloop invariant xa >= ya ==> xa >= 2*ya && xa > ya ==> xa > ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya;\nloop invariant xa >= ya ==> xa >= 2*ya && xa > ya ==> xa > ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya;\nloop invariant xa >= ya ==> xa >= 2*ya && xa > ya ==> xa > ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya;\nloop invariant xa >= ya ==> xa >= 2*ya && xa > ya ==> xa > ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya;\nloop invariant xa >= ya ==> xa >= 2*ya && xa > ya ==> xa > ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya;\nloop invariant xa >= ya ==> xa >= 2*ya && xa > ya ==> xa > ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya;\nloop invariant xa >= ya ==> xa >= 2*ya && xa > ya ==> xa > ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya;\nloop invariant xa >= ya ==> xa >= 2*ya && xa > ya ==> xa > ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= xa <= ya;\nloop invariant 0 <= ya;\nloop invariant xa + 2*ya >= -2*xa + ya;\nloop invariant xa + 2*ya >= xa;\nloop invariant xa + 2*ya >= ya;\nloop invariant xa + 2*ya >= 0;\n*/\n```",
            "```\n/*@\nloop invariant xa + 2*ya >= 0;\nloop invariant xa + 2*ya <= 1;\nloop invariant xa >= 0;\nloop invariant xa <= 1;\nloop invariant ya >= 0;\nloop invariant ya <= 1;\nloop invariant x >= xa;\nloop invariant x <= xa + 2;\nloop invariant y >= -2;\nloop invariant y <= 1;\nloop invariant x == xa + 2*ya;\nloop invariant y == -2*xa + ya;\nloop invariant x == xa + 2*ya;\nloop invariant y == -2*xa + ya;\nloop invariant x >= xa;\nloop invariant x <= xa + 2;\nloop invariant y >= -2;\nloop invariant y <= 1;\nloop invariant x == xa + 2*ya;\nloop invariant y == -2*xa + ya;\nloop invariant x >= xa;\nloop invariant x <= xa + 2;\nloop invariant y >= -2;\nloop invariant y <= 1;\nloop invariant x == xa + 2*ya;\nloop invariant y == -2*xa + ya;\nloop invariant x >= xa;\nloop invariant x <= xa + 2;\nloop invariant y >= -2;\nloop invariant y <= 1;\nloop invariant x == xa + 2*ya;\nloop invariant y == -2*xa + ya;\nloop invariant x >= xa;\nloop invariant x <= xa + 2;\nloop invariant y >= -2;\nloop invariant y <= 1;\nloop invariant x == xa + 2*ya;\nloop invariant y == -2*xa + ya;\nloop invariant x >= xa;\nloop invariant x <= xa + 2;\nloop invariant y >= -2;\nloop invariant y <= 1;\nloop invariant x == xa + 2*ya;\nloop invariant y == -2*xa + ya;\nloop invariant x >= xa;\nloop invariant x <= xa + 2;\nloop invariant y >= -2;\nloop invariant y <= 1;\nloop invariant x == xa + 2*ya;\nloop invariant y == -2*xa + ya;\nloop invariant x >= xa;\nloop invariant x <= xa + 2;\nloop invariant y >= -2;\nloop invariant y <= 1;\nloop invariant x == xa + 2*ya;\nloop invariant y == -2*xa + ya;\nloop invariant x >= xa;\nloop invariant x <= xa + 2;\nloop invariant y >= -2;\nloop invariant y <= 1;\nloop invariant x == xa + 2*ya;\nloop invariant y == -2*xa + ya;\nloop invariant x >= xa;\nloop invariant x <= xa + 2;\nloop invariant y >= -2;\nloop invariant y <= 1;\nloop invariant x == xa + 2*ya;\nloop invariant y == -2*xa + ya;\nloop invariant x >= xa;\nloop invariant x <= xa + 2;\nloop invariant y >= -2;\nloop invariant y <= 1;\nloop invariant x == xa + 2*ya;\nloop invariant y == -2*xa + ya;\nloop invariant x >= xa;\nloop invariant x <= xa + 2;\nloop invariant y >= -2;\nloop invariant y <= 1;\nloop invariant x == xa + 2*ya;\nloop invariant y == -2*xa + ya;\nloop invariant x >= xa;\nloop invariant x <= xa + 2;\nloop invariant y >= -2;\nloop invariant y <= 1;\nloop invariant x == xa + 2*ya;\nloop invariant y == -2*xa + ya;\nloop invariant x >= xa;\nloop invariant x <= xa + 2;\nloop invariant y >= -2;\nloop invariant y <= 1;\nloop invariant x == xa + 2*ya;\nloop invariant y == -2*xa + ya;\nloop invariant x >= xa;\nloop invariant x <= xa + 2;\nloop invariant y >= -2;\nloop invariant y <= 1;\nloop invariant x == xa + 2*ya;\nloop invariant y == -2*xa + ya;\nloop invariant x >= xa;\nloop invariant x <= xa + 2;\nloop invariant y >= -2;\nloop invariant y <= 1;\nloop invariant x == xa + 2*ya;\nloop invariant y == -2*xa + ya;\nloop invariant x >= xa;\nloop invariant x <= xa + 2;\nloop invariant y >= -2;\nloop invariant y <= 1;\nloop invariant x == xa + 2*ya;\nloop invariant y == -2*xa + ya;\nloop invariant x >= xa;\nloop invariant x <= xa + 2;\nloop invariant y >= -2;\nloop invariant y <= 1;\nloop invariant x == xa + 2*ya;\nloop invariant y == -2*xa + ya;\nloop invariant x >= xa;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= xa + 2*ya <= 100000;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= xa + 2*ya;\nloop invariant 0 <= y <= -2*xa + ya;\nloop invariant xa + 2*ya >= 0;\nloop invariant y == xa + 2*ya - x;\nloop invariant x == -2*xa + ya + y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= xa + 2*ya;\nloop invariant xa >= 0;\nloop invariant ya >= 0;\nloop invariant xa + 2*ya >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 3 <= xa <= 2147483647;\nloop invariant 2 <= ya <= 2147483647;\nloop invariant xa >= ya;\nloop invariant xa + 2*ya >= 0;\nloop invariant xa + 2*ya >= 0 ==> xa >= ya;\nloop invariant xa + 2*ya >= 0 ==> xa + 2*ya <= 2147483647;\nloop invariant xa + 2*ya >= 0 ==> xa - 2*ya >= -2147483647;\nloop invariant xa + 2*ya >= 0 ==> xa + ya >= -2147483647;\nloop invariant xa + 2*ya >= 0 ==> xa >= -2147483647;\nloop invariant xa + 2*ya >= 0 ==> xa - ya >= -2147483647;\nloop invariant xa + 2*ya >= 0 ==> xa + ya >= -2147483647;\nloop invariant xa + 2*ya >= 0 ==> xa <= 2147483647;\nloop invariant xa + 2*ya >= 0 ==> xa - ya >= -2147483647;\nloop invariant xa + 2*ya >= 0 ==> xa + ya >= -2147483647;\nloop invariant xa + 2*ya >= 0 ==> xa <= 2147483647;\nloop invariant xa + 2*ya >= 0 ==> xa - ya >= -2147483647;\nloop invariant xa + 2*ya >= 0 ==> xa + ya >= -2147483647;\nloop invariant xa + 2*ya >= 0 ==> xa <= 2147483647;\nloop invariant xa + 2*ya >= 0 ==> xa - ya >= -2147483647;\nloop invariant xa + 2*ya >= 0 ==> xa + ya >= -2147483647;\nloop invariant xa + 2*ya >= 0 ==> xa <= 2147483647;\nloop invariant xa + 2*ya >= 0 ==> xa - ya >= -2147483647;\nloop invariant xa + 2*ya >= 0 ==> xa + ya >= -2147483647;\nloop invariant xa + 2*ya >= 0 ==> xa <= 2147483647;\nloop invariant xa + 2*ya >= 0 ==> xa - ya >= -2147483647;\nloop invariant xa + 2*ya >= 0 ==> xa + ya >= -2147483647;\nloop invariant xa + 2*ya >= 0 ==> xa <= 2147483647;\nloop invariant xa + 2*ya >= 0 ==> xa - ya >= -2147483647;\nloop invariant xa + 2*ya >= 0 ==> xa + ya >= -2147483647;\nloop invariant xa + 2*ya >= 0 ==> xa <= 2147483647;\nloop invariant xa + 2*ya >= 0 ==> xa - ya >= -2147483647;\nloop invariant xa + 2*ya >= 0 ==> xa + ya >= -2147483647;\nloop invariant xa + 2*ya >= 0 ==> xa <= 2147483647;\nloop invariant xa + 2*ya >= 0 ==> xa - ya >= -2147483647;\nloop invariant xa + 2*ya >= 0 ==> xa + ya >= -2147483647;\nloop invariant xa + 2*ya >= 0 ==> xa <= 2147483647;\nloop invariant xa + 2*ya >= 0 ==> xa - ya >= -2147483647;\nloop invariant xa + 2*ya >= 0 ==> xa + ya >= -2147483647;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= xa + 2*ya <= 2*xa + 2*ya;\nloop invariant xa + 2*ya >= -2*xa + ya;\nloop invariant xa + 2*ya >= xa + 2*ya;\nloop invariant xa + 2*ya <= 2*xa + 2*ya;\nloop invariant xa + 2*ya >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= xa <= x <= xa + 2*ya;\nloop invariant (xa - 2*y) <= 2*x + y <= ya;\nloop invariant x >= 0;\nloop invariant xa >= 0;\nloop invariant ya >= 0;\nloop invariant y >= 0;\nloop invariant x >= xa;\nloop invariant x >= ya;\nloop invariant xa >= (x - 2*y);\nloop invariant ya >= (2*x + y);\nloop invariant x >= (xa + 2*ya);\nloop invariant xa + 2*ya >= 0 ==> x >= xa;\nloop invariant xa + 2*ya >= 0 ==> x >= ya;\nloop invariant xa + 2*ya >= 0 ==> xa >= (x - 2*y);\nloop invariant xa + 2*ya >= 0 ==> ya >= (2*x + y);\nloop invariant xa + 2*ya >= 0 ==> x >= (xa + 2*ya);\nloop invariant xa + 2*ya >= 0 ==> xa >= 0;\nloop invariant xa + 2*ya >= 0 ==> ya >= 0;\nloop invariant xa + 2*ya >= 0 ==> x >= 0;\nloop invariant xa + 2*ya >= 0 ==> x >= xa;\nloop invariant xa + 2*ya >= 0 ==> x >= ya;\nloop invariant xa + 2*ya >= 0 ==> xa >= (x - 2*y);\nloop invariant xa + 2*ya >= 0 ==> ya >= (2*x + y);\nloop invariant xa + 2*ya >= 0 ==> x >= (xa + 2*ya);\nloop invariant xa + 2*ya >= 0 ==> xa >= 0;\nloop invariant xa + 2*ya >= 0 ==> ya >= 0;\nloop invariant xa + 2*ya >= 0 ==> x >= 0;\nloop invariant xa + 2*ya >= 0 ==> x >= xa;\nloop invariant xa + 2*ya >= 0 ==> x >= ya;\nloop invariant xa + 2*ya >= 0 ==> xa >= (x - 2*y);\nloop invariant xa + 2*ya >= 0 ==> ya >= (2*x + y);\nloop invariant xa + 2*ya >= 0 ==> x >= (xa + 2*ya);\nloop invariant xa + 2*ya >= 0 ==> xa >= 0;\nloop invariant xa + 2*ya >= 0 ==> ya >= 0;\nloop invariant xa + 2*ya >= 0 ==> x >= 0;\nloop invariant xa + 2*ya >= 0 ==> x >= xa;\nloop invariant xa + 2*ya >= 0 ==> x >= ya;\nloop invariant xa + 2*ya >= 0 ==> xa >= (x - 2*y);\nloop invariant xa + 2*ya >= 0 ==> ya >= (2*x + y);\nloop invariant xa + 2*ya >= 0 ==> x >= (xa + 2*ya);\nloop invariant xa + 2*ya >= 0 ==> xa >= 0;\nloop invariant xa + 2*ya >= 0 ==> ya >= 0;\nloop invariant xa + 2*ya >= 0 ==> x >= 0;\nloop invariant xa + 2*ya >= 0 ==> x >= xa;\nloop invariant xa + 2*ya >= 0 ==> x >= ya;\nloop invariant xa + 2*ya >= 0 ==> xa >= (x - 2*y);\nloop invariant xa + 2*ya >= 0 ==> ya >= (2*x + y);\nloop invariant xa + 2*ya >= 0 ==> x >= (xa + 2*ya);\nloop invariant xa + 2*ya >= 0 ==> xa >= 0;\nloop invariant xa + 2*ya >= 0 ==> ya >= 0;\nloop invariant xa + 2*ya >= 0 ==> x >= 0;\nloop invariant xa + 2*ya >= 0 ==> x >= xa;\nloop invariant xa + 2*ya >= 0 ==> x >= ya;\nloop invariant xa + 2*ya >= 0 ==> xa >= (x - 2*y);\nloop invariant xa + 2*ya >= 0 ==> ya >= (2*x + y);\nloop invariant xa + 2*ya >= 0 ==> x >= (xa + 2*ya);\nloop invariant xa + 2*ya >= 0 ==> xa >= 0;\nloop invariant xa + 2*ya >= 0 ==> ya >= 0;\nloop invariant xa + 2*ya >= 0 ==> x >= 0;\nloop invariant xa + 2*ya >= 0 ==> x >= xa;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 1 + xa + ya - (x * x + x) = 0; loop invariant ya * ya - ya - (y * y + y) = 0; loop invariant xa + ya >= 0; loop invariant xa >= ya; loop invariant xa >= 0; loop invariant ya >= 0; loop invariant x >= 0; loop invariant y >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main () {\n\nint x;\nint y;\nint xa = 0;\nint ya = 0;\n\n/*@\n\n*/\nwhile (unknown_int()) {\n\tx = xa + 2*ya;\n\ty = -2*xa + ya;\n\n\tx++;\n\tif (unknown_int()) y\t= y+x;\n\telse y = y-x;\n\n\txa = x - 2*y;\n\tya = 2*x + y;\n}\n\n{;\n//@ assert(xa + 2*ya >= 0);\n}\n\nreturn 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= xa <= 100000;\nloop invariant 0 <= ya <= 100000;\nloop invariant xa >= 2*ya;\nloop invariant ya >= -2*xa;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main () {\n\nint x;\nint y;\nint xa = 0;\nint ya = 0;\n\n/*@\n\n\n\n\n*/\nwhile (unknown_int()) {\n\tx = xa + 2*ya;\n\ty = -2*xa + ya;\n\n\tx++;\n\tif (unknown_int()) y\t= y+x;\n\telse y = y-x;\n\n\txa = x - 2*y;\n\tya = 2*x + y;\n}\n\n{;\n//@ assert(xa + 2*ya >= 0);\n}\n\nreturn 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x * x + y * y;\nloop invariant x * x + y * y >= xa * xa + ya * ya;\nloop invariant xa * xa + ya * ya >= 0;\nloop invariant xa * xa + ya * ya <= x * x + y * y;\nloop invariant xa * xa + ya * ya >= xa * xa + ya * ya;\nloop invariant xa * xa + ya * ya <= x * x + y * y;\nloop invariant xa * xa + ya * ya >= xa * xa + ya * ya;\nloop invariant xa * xa + ya * ya <= x * x + y * y;\nloop invariant xa * xa + ya * ya >= xa * xa + ya * ya;\nloop invariant xa * xa + ya * ya <= x * x + y * y;\nloop invariant xa * xa + ya * ya >= xa * xa + ya * ya;\nloop invariant xa * xa + ya * ya <= x * x + y * y;\nloop invariant xa * xa + ya * ya >= xa * xa + ya * ya;\nloop invariant xa * xa + ya * ya <= x * x + y * y;\nloop invariant xa * xa + ya * ya >= xa * xa + ya * ya;\nloop invariant xa * xa + ya * ya <= x * x + y * y;\nloop invariant xa * xa + ya * ya >= xa * xa + ya * ya;\nloop invariant xa * xa + ya * ya <= x * x + y * y;\nloop invariant xa * xa + ya * ya >= xa * xa + ya * ya;\nloop invariant xa * xa + ya * ya <= x * x + y * y;\nloop invariant xa * xa + ya * ya >= xa * xa + ya * ya;\nloop invariant xa * xa + ya * ya <= x * x + y * y;\nloop invariant xa * xa + ya * ya >= xa * xa + ya * ya;\nloop invariant xa * xa + ya * ya <= x * x + y * y;\nloop invariant xa * xa + ya * ya >= xa * xa + ya * ya;\nloop invariant xa * xa + ya * ya <= x * x + y * y;\nloop invariant xa * xa + ya * ya >= xa * xa + ya * ya;\nloop invariant xa * xa + ya * ya <= x * x + y * y;\nloop invariant xa * xa + ya * ya >= xa * xa + ya * ya;\nloop invariant xa * xa + ya * ya <= x * x + y * y;\nloop invariant xa * xa + ya * ya >= xa * xa + ya * ya;\nloop invariant xa * xa + ya * ya <= x * x + y * y;\nloop invariant xa * xa + ya * ya >= xa * xa + ya * ya;\nloop invariant xa * xa + ya * ya <= x * x + y * y;\nloop invariant xa * xa + ya * ya >= xa * xa + ya * ya;\nloop invariant xa * xa + ya * ya <= x * x + y * y;\nloop invariant xa * xa + ya * ya >= xa * xa + ya * ya;\nloop invariant xa * xa + ya * ya <= x * x + y * y;\nloop invariant xa * xa + ya * ya >= xa * xa + ya * ya;\nloop invariant xa * xa + ya * ya <= x * x + y * y;\nloop invariant xa * xa + ya * ya >= xa * xa + ya * ya;\nloop invariant xa * xa + ya * ya <= x * x + y * y;\nloop invariant xa * xa + ya * ya >= xa * xa + ya * ya;\nloop invariant xa * xa + ya * ya <= x * x + y * y;\nloop invariant xa * xa + ya * ya >= xa * xa + ya * ya;\nloop invariant xa * xa + ya * ya <= x * x + y * y;\nloop invariant xa * xa + ya * ya >= xa * xa + ya * ya;\nloop invariant xa * xa + ya * ya <= x * x + y * y;\nloop invariant xa * xa + ya * ya >= xa * xa + ya * ya;\nloop invariant xa * xa + ya * ya <= x * x + y * y;\nloop invariant xa * xa + ya * ya >= xa * xa + ya * ya;\nloop invariant xa * xa + ya * ya <= x * x + y * y;\nloop invariant xa * xa + ya * ya >= xa * xa + ya * ya;\nloop invariant xa * xa + ya * ya <= x * x + y * y;\nloop invariant xa * xa + ya * ya >= xa * xa + ya * ya;\nloop invariant xa * xa + ya * ya <= x * x + y * y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main () {\n\nint x;\nint y;\nint xa = 0;\nint ya = 0;\n\n/*@\nloop invariant i1: 0 <= x * x + y * y;\n\nloop invariant i3: xa * xa + ya * ya >= 0;\n\nloop invariant i5: xa * xa + ya * ya >= xa * xa + ya * ya;\n*/\nwhile (unknown_int()) {\n\tx = xa + 2*ya;\n\ty = -2*xa + ya;\n\n\tx++;\n\tif (unknown_int()) y\t= y+x;\n\telse y = y-x;\n\n\txa = x - 2*y;\n\tya = 2*x + y;\n}\n\n{;\n//@ assert(xa + 2*ya >= 0);\n}\n\nreturn 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= xa <= x;\nloop invariant 0 <= ya <= y;\nloop invariant xa + 2*ya >= 0;\nloop invariant x >= xa + 2*ya;\nloop invariant y >= -2*xa + ya;\nloop invariant x >= xa + 2*ya;\nloop invariant x >= 2*ya;\nloop invariant y >= -2*xa + ya;\nloop invariant y >= xa + 2*ya;\nloop invariant x >= 2*ya;\nloop invariant y >= -2*xa + ya;\nloop invariant x >= xa + 2*ya;\nloop invariant x >= 2*ya;\nloop invariant y >= -2*xa + ya;\nloop invariant y >= xa + 2*ya;\nloop invariant x >= 2*ya;\nloop invariant y >= -2*xa + ya;\nloop invariant x >= xa + 2*ya;\nloop invariant x >= 2*ya;\nloop invariant y >= -2*xa + ya;\nloop invariant y >= xa + 2*ya;\nloop invariant x >= 2*ya;\nloop invariant y >= -2*xa + ya;\nloop invariant x >= xa + 2*ya;\nloop invariant x >= 2*ya;\nloop invariant y >= -2*xa + ya;\nloop invariant y >= xa + 2*ya;\nloop invariant x >= 2*ya;\nloop invariant y >= -2*xa + ya;\nloop invariant x >= xa + 2*ya;\nloop invariant x >= 2*ya;\nloop invariant y >= -2*xa + ya;\nloop invariant y >= xa + 2*ya;\nloop invariant x >= 2*ya;\nloop invariant y >= -2*xa + ya;\nloop invariant x >= xa + 2*ya;\nloop invariant x >= 2*ya;\nloop invariant y >= -2*xa + ya;\nloop invariant y >= xa + 2*ya;\nloop invariant x >= 2*ya;\nloop invariant y >= -2*xa + ya;\nloop invariant x >= xa + 2*ya;\nloop invariant x >= 2*ya;\nloop invariant y >= -2*xa + ya;\nloop invariant y >= xa + 2*ya;\nloop invariant x >= 2*ya;\nloop invariant y >= -2*xa + ya;\nloop invariant x >= xa + 2*ya;\nloop invariant x >= 2*ya;\nloop invariant y >= -2*xa + ya;\nloop invariant y >= xa + 2*ya;\nloop invariant x >= 2*ya;\nloop invariant y >= -2*xa + ya;\nloop invariant x >= xa + 2*ya;\nloop invariant x >= 2*ya;\nloop invariant y >= -2*xa + ya;\nloop invariant y >= xa + 2*ya;\nloop invariant x >= 2*ya;\nloop invariant y >= -2*xa + ya;\nloop invariant x >= xa + 2*ya;\nloop invariant x >= 2*ya;\nloop invariant y >= -2*xa + ya;\nloop invariant y >= xa + 2*ya;\nloop invariant x >= 2*ya;\nloop invariant y >= -2*xa + ya;\nloop invariant x >= xa + 2*ya;\nloop invariant x >= 2*ya;\nloop invariant y >= -2*xa + ya;\nloop invariant y >= xa + 2*ya;\nloop invariant x >= 2*ya;\nloop invariant y >= -2*xa + ya;\nloop invariant x >= xa + 2*ya;\nloop invariant x >= 2*ya;\nloop invariant y >= -2*xa + ya;\nloop invariant y >= xa + 2*ya;\nloop invariant x >= 2*ya;\nloop invariant y >= -2*xa + ya;\nloop invariant x >= xa + 2*ya;\nloop invariant x >= 2*ya;\nloop invariant y >= -2*xa + ya;\nloop invariant y >= xa + 2*ya;\nloop invariant x >= 2*ya;\nloop invariant y >= -2*xa + ya;\nloop invariant x >= xa + 2*ya;\nloop invariant x >= 2*ya;\nloop invariant y >= -2*xa + ya;\nloop invariant y >= xa + 2*ya;\nloop invariant x >= 2*ya;\nloop invariant y >= -2*xa + ya;\nloop invariant x >= xa + 2*ya;\nloop invariant x >= 2*ya;\nloop invariant y >= -2*xa + ya;\nloop invariant y >= xa + 2*ya;\nloop invariant x >= 2*ya;\nloop invariant y >= -2*xa + ya;\nloop invariant x >= xa + 2*ya;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main () {\n\nint x;\nint y;\nint xa = 0;\nint ya = 0;\n\n/*@\n\n\nloop invariant i3: xa + 2*ya >= 0;\n\n\n\n\n*/\nwhile (unknown_int()) {\n\tx = xa + 2*ya;\n\ty = -2*xa + ya;\n\n\tx++;\n\tif (unknown_int()) y\t= y+x;\n\telse y = y-x;\n\n\txa = x - 2*y;\n\tya = 2*x + y;\n}\n\n{;\n//@ assert(xa + 2*ya >= 0);\n}\n\nreturn 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant x >= xa + 2*ya;\nloop invariant y >= -2*xa + ya;\nloop invariant xa >= 0;\nloop invariant ya >= 0;\nloop invariant xa + 2*ya >= 0;\nloop invariant x + y >= 0;\nloop invariant xa - 2*y >= 0;\nloop invariant 2*x + y >= 0;\nloop invariant x + y >= 0;\nloop invariant xa - 2*y >= 0;\nloop invariant 2*x + y >= 0;\nloop invariant x + y >= 0;\nloop invariant xa - 2*y >= 0;\nloop invariant 2*x + y >= 0;\nloop invariant x + y >= 0;\nloop invariant xa - 2*y >= 0;\nloop invariant 2*x + y >= 0;\nloop invariant x + y >= 0;\nloop invariant xa - 2*y >= 0;\nloop invariant 2*x + y >= 0;\nloop invariant x + y >= 0;\nloop invariant xa - 2*y >= 0;\nloop invariant 2*x + y >= 0;\nloop invariant x + y >= 0;\nloop invariant xa - 2*y >= 0;\nloop invariant 2*x + y >= 0;\nloop invariant x + y >= 0;\nloop invariant xa - 2*y >= 0;\nloop invariant 2*x + y >= 0;\nloop invariant x + y >= 0;\nloop invariant xa - 2*y >= 0;\nloop invariant 2*x + y >= 0;\nloop invariant x + y >= 0;\nloop invariant xa - 2*y >= 0;\nloop invariant 2*x + y >= 0;\nloop invariant x + y >= 0;\nloop invariant xa - 2*y >= 0;\nloop invariant 2*x + y >= 0;\nloop invariant x + y >= 0;\nloop invariant xa - 2*y >= 0;\nloop invariant 2*x + y >= 0;\nloop invariant x + y >= 0;\nloop invariant xa - 2*y >= 0;\nloop invariant 2*x + y >= 0;\nloop invariant x + y >= 0;\nloop invariant xa - 2*y >= 0;\nloop invariant 2*x + y >= 0;\nloop invariant x + y >= 0;\nloop invariant xa - 2*y >= 0;\nloop invariant 2*x + y >= 0;\nloop invariant x + y >= 0;\nloop invariant xa - 2*y >= 0;\nloop invariant 2*x + y >= 0;\nloop invariant x + y >= 0;\nloop invariant xa - 2*y >= 0;\nloop invariant 2*x + y >= 0;\nloop invariant x + y >= 0;\nloop invariant xa - 2*y >= 0;\nloop invariant 2*x + y >= 0;\nloop invariant x + y >= 0;\nloop invariant xa - 2*y >= 0;\nloop invariant 2*x + y >= 0;\nloop invariant x + y >= 0;\nloop invariant xa - 2*y >= 0;\nloop invariant 2*x + y >= 0;\nloop invariant x + y >= 0;\nloop invariant xa - 2*y >= 0;\nloop invariant 2*x + y >= 0;\nloop invariant x + y >= 0;\nloop invariant xa - 2*y >= 0;\nloop invariant 2*x + y >= 0;\nloop invariant x + y >= 0;\nloop invariant xa - 2*y >= 0;\nloop invariant 2*x + y >= 0;\nloop invariant x + y >= 0;\nloop invariant xa - 2*y >= 0;\nloop invariant 2*x + y >= 0;\nloop invariant x + y >= 0;\nloop invariant xa - 2*y >= 0;\nloop invariant 2*x + y >= 0;\nloop invariant x + y >= 0;\nloop invariant xa - 2*y >= 0;\nloop invariant 2*x + y >= 0;\nloop invariant x + y >= 0;\nloop invariant xa - 2*y >= 0;\nloop invariant 2*x + y >= 0;\nloop invariant x + y >= 0;\nloop invariant xa - 2*y >= 0;\nloop invariant 2*x + y >= 0;\nloop invariant x + y >= 0;\nloop invariant xa - 2*y >= 0;\nloop invariant 2*x + y >= 0;\nloop invariant x + y >= 0;\nloop invariant xa - 2*y >= 0;\nloop invariant 2*x + y >= 0;\nloop invariant x + y >= 0;\nloop invariant xa - 2*y >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main () {\n\nint x;\nint y;\nint xa = 0;\nint ya = 0;\n\n/*@\n\n\n\n\nloop invariant i5: xa + 2*ya >= 0;\n\n\n\n*/\nwhile (unknown_int()) {\n\tx = xa + 2*ya;\n\ty = -2*xa + ya;\n\n\tx++;\n\tif (unknown_int()) y\t= y+x;\n\telse y = y-x;\n\n\txa = x - 2*y;\n\tya = 2*x + y;\n}\n\n{;\n//@ assert(xa + 2*ya >= 0);\n}\n\nreturn 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant y = -2*xa + ya;\nloop invariant x = xa + 2*ya;\nloop invariant xa >= -y;\nloop invariant ya >= x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main () {\n\nint x;\nint y;\nint xa = 0;\nint ya = 0;\n\n/*@\n\n\n\n\n*/\nwhile (unknown_int()) {\n\tx = xa + 2*ya;\n\ty = -2*xa + ya;\n\n\tx++;\n\tif (unknown_int()) y\t= y+x;\n\telse y = y-x;\n\n\txa = x - 2*y;\n\tya = 2*x + y;\n}\n\n{;\n//@ assert(xa + 2*ya >= 0);\n}\n\nreturn 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant ya >= 0;\nloop invariant xa >= 2*ya;\nloop invariant ya > 0 ==> xa > ya;\nloop invariant xa >= 2*ya ==> xa > ya;\nloop invariant xa >= ya;\nloop invariant xa >= ya ==> xa > ya;\nloop invariant xa >= ya ==> xa >= 2*ya;\nloop invariant xa >= ya ==> xa >= 2*ya && xa > ya;\nloop invariant xa >= ya ==> xa >= 2*ya && xa > ya ==> xa > ya;\nloop invariant xa >= ya ==> xa >= 2*ya && xa > ya ==> xa > ya ==> xa >= ya;\nloop invariant xa >= ya ==> xa >= 2*ya && xa > ya ==> xa > ya ==> xa >= ya ==> xa >= ya;\nloop invariant xa >= ya ==> xa >= 2*ya && xa > ya ==> xa > ya ==> xa >= ya ==> xa >= ya ==> xa >= ya;\nloop invariant xa >= ya ==> xa >= 2*ya && xa > ya ==> xa > ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya;\nloop invariant xa >= ya ==> xa >= 2*ya && xa > ya ==> xa > ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya;\nloop invariant xa >= ya ==> xa >= 2*ya && xa > ya ==> xa > ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya;\nloop invariant xa >= ya ==> xa >= 2*ya && xa > ya ==> xa > ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya;\nloop invariant xa >= ya ==> xa >= 2*ya && xa > ya ==> xa > ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya;\nloop invariant xa >= ya ==> xa >= 2*ya && xa > ya ==> xa > ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya;\nloop invariant xa >= ya ==> xa >= 2*ya && xa > ya ==> xa > ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya;\nloop invariant xa >= ya ==> xa >= 2*ya && xa > ya ==> xa > ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya;\nloop invariant xa >= ya ==> xa >= 2*ya && xa > ya ==> xa > ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya;\nloop invariant xa >= ya ==> xa >= 2*ya && xa > ya ==> xa > ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya;\nloop invariant xa >= ya ==> xa >= 2*ya && xa > ya ==> xa > ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya;\nloop invariant xa >= ya ==> xa >= 2*ya && xa > ya ==> xa > ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya;\nloop invariant xa >= ya ==> xa >= 2*ya && xa > ya ==> xa > ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya;\nloop invariant xa >= ya ==> xa >= 2*ya && xa > ya ==> xa > ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya;\nloop invariant xa >= ya ==> xa >= 2*ya && xa > ya ==> xa > ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya;\nloop invariant xa >= ya ==> xa >= 2*ya && xa > ya ==> xa > ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main () {\n\nint x;\nint y;\nint xa = 0;\nint ya = 0;\n\n/*@\n\n\n\n\n\n\n\n\nloop invariant i9: xa >= ya ==> xa >= 2*ya && xa > ya ==> xa > ya;\nloop invariant i10: xa >= ya ==> xa >= 2*ya && xa > ya ==> xa > ya ==> xa >= ya;\nloop invariant i11: xa >= ya ==> xa >= 2*ya && xa > ya ==> xa > ya ==> xa >= ya ==> xa >= ya;\nloop invariant i12: xa >= ya ==> xa >= 2*ya && xa > ya ==> xa > ya ==> xa >= ya ==> xa >= ya ==> xa >= ya;\nloop invariant i13: xa >= ya ==> xa >= 2*ya && xa > ya ==> xa > ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya;\nloop invariant i14: xa >= ya ==> xa >= 2*ya && xa > ya ==> xa > ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya;\nloop invariant i15: xa >= ya ==> xa >= 2*ya && xa > ya ==> xa > ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya;\nloop invariant i16: xa >= ya ==> xa >= 2*ya && xa > ya ==> xa > ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya;\n*/\nwhile (unknown_int()) {\n\tx = xa + 2*ya;\n\ty = -2*xa + ya;\n\n\tx++;\n\tif (unknown_int()) y\t= y+x;\n\telse y = y-x;\n\n\txa = x - 2*y;\n\tya = 2*x + y;\n}\n\n{;\n//@ assert(xa + 2*ya >= 0);\n}\n\nreturn 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= xa <= ya;\nloop invariant 0 <= ya;\nloop invariant xa + 2*ya >= -2*xa + ya;\nloop invariant xa + 2*ya >= xa;\nloop invariant xa + 2*ya >= ya;\nloop invariant xa + 2*ya >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main () {\n\nint x;\nint y;\nint xa = 0;\nint ya = 0;\n\n/*@\n\n\n\n\n\nloop invariant i6: xa + 2*ya >= 0;\n*/\nwhile (unknown_int()) {\n\tx = xa + 2*ya;\n\ty = -2*xa + ya;\n\n\tx++;\n\tif (unknown_int()) y\t= y+x;\n\telse y = y-x;\n\n\txa = x - 2*y;\n\tya = 2*x + y;\n}\n\n{;\n//@ assert(xa + 2*ya >= 0);\n}\n\nreturn 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant xa + 2*ya >= 0;\nloop invariant xa + 2*ya <= 1;\nloop invariant xa >= 0;\nloop invariant xa <= 1;\nloop invariant ya >= 0;\nloop invariant ya <= 1;\nloop invariant x >= xa;\nloop invariant x <= xa + 2;\nloop invariant y >= -2;\nloop invariant y <= 1;\nloop invariant x == xa + 2*ya;\nloop invariant y == -2*xa + ya;\nloop invariant x == xa + 2*ya;\nloop invariant y == -2*xa + ya;\nloop invariant x >= xa;\nloop invariant x <= xa + 2;\nloop invariant y >= -2;\nloop invariant y <= 1;\nloop invariant x == xa + 2*ya;\nloop invariant y == -2*xa + ya;\nloop invariant x >= xa;\nloop invariant x <= xa + 2;\nloop invariant y >= -2;\nloop invariant y <= 1;\nloop invariant x == xa + 2*ya;\nloop invariant y == -2*xa + ya;\nloop invariant x >= xa;\nloop invariant x <= xa + 2;\nloop invariant y >= -2;\nloop invariant y <= 1;\nloop invariant x == xa + 2*ya;\nloop invariant y == -2*xa + ya;\nloop invariant x >= xa;\nloop invariant x <= xa + 2;\nloop invariant y >= -2;\nloop invariant y <= 1;\nloop invariant x == xa + 2*ya;\nloop invariant y == -2*xa + ya;\nloop invariant x >= xa;\nloop invariant x <= xa + 2;\nloop invariant y >= -2;\nloop invariant y <= 1;\nloop invariant x == xa + 2*ya;\nloop invariant y == -2*xa + ya;\nloop invariant x >= xa;\nloop invariant x <= xa + 2;\nloop invariant y >= -2;\nloop invariant y <= 1;\nloop invariant x == xa + 2*ya;\nloop invariant y == -2*xa + ya;\nloop invariant x >= xa;\nloop invariant x <= xa + 2;\nloop invariant y >= -2;\nloop invariant y <= 1;\nloop invariant x == xa + 2*ya;\nloop invariant y == -2*xa + ya;\nloop invariant x >= xa;\nloop invariant x <= xa + 2;\nloop invariant y >= -2;\nloop invariant y <= 1;\nloop invariant x == xa + 2*ya;\nloop invariant y == -2*xa + ya;\nloop invariant x >= xa;\nloop invariant x <= xa + 2;\nloop invariant y >= -2;\nloop invariant y <= 1;\nloop invariant x == xa + 2*ya;\nloop invariant y == -2*xa + ya;\nloop invariant x >= xa;\nloop invariant x <= xa + 2;\nloop invariant y >= -2;\nloop invariant y <= 1;\nloop invariant x == xa + 2*ya;\nloop invariant y == -2*xa + ya;\nloop invariant x >= xa;\nloop invariant x <= xa + 2;\nloop invariant y >= -2;\nloop invariant y <= 1;\nloop invariant x == xa + 2*ya;\nloop invariant y == -2*xa + ya;\nloop invariant x >= xa;\nloop invariant x <= xa + 2;\nloop invariant y >= -2;\nloop invariant y <= 1;\nloop invariant x == xa + 2*ya;\nloop invariant y == -2*xa + ya;\nloop invariant x >= xa;\nloop invariant x <= xa + 2;\nloop invariant y >= -2;\nloop invariant y <= 1;\nloop invariant x == xa + 2*ya;\nloop invariant y == -2*xa + ya;\nloop invariant x >= xa;\nloop invariant x <= xa + 2;\nloop invariant y >= -2;\nloop invariant y <= 1;\nloop invariant x == xa + 2*ya;\nloop invariant y == -2*xa + ya;\nloop invariant x >= xa;\nloop invariant x <= xa + 2;\nloop invariant y >= -2;\nloop invariant y <= 1;\nloop invariant x == xa + 2*ya;\nloop invariant y == -2*xa + ya;\nloop invariant x >= xa;\nloop invariant x <= xa + 2;\nloop invariant y >= -2;\nloop invariant y <= 1;\nloop invariant x == xa + 2*ya;\nloop invariant y == -2*xa + ya;\nloop invariant x >= xa;\nloop invariant x <= xa + 2;\nloop invariant y >= -2;\nloop invariant y <= 1;\nloop invariant x == xa + 2*ya;\nloop invariant y == -2*xa + ya;\nloop invariant x >= xa;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main () {\n\nint x;\nint y;\nint xa = 0;\nint ya = 0;\n\n/*@\nloop invariant i1: xa + 2*ya >= 0;\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown_int()) {\n\tx = xa + 2*ya;\n\ty = -2*xa + ya;\n\n\tx++;\n\tif (unknown_int()) y\t= y+x;\n\telse y = y-x;\n\n\txa = x - 2*y;\n\tya = 2*x + y;\n}\n\n{;\n//@ assert(xa + 2*ya >= 0);\n}\n\nreturn 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= xa + 2*ya <= 100000;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main () {\n\nint x;\nint y;\nint xa = 0;\nint ya = 0;\n\n/*@\n\n*/\nwhile (unknown_int()) {\n\tx = xa + 2*ya;\n\ty = -2*xa + ya;\n\n\tx++;\n\tif (unknown_int()) y\t= y+x;\n\telse y = y-x;\n\n\txa = x - 2*y;\n\tya = 2*x + y;\n}\n\n{;\n//@ assert(xa + 2*ya >= 0);\n}\n\nreturn 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= xa + 2*ya;\nloop invariant 0 <= y <= -2*xa + ya;\nloop invariant xa + 2*ya >= 0;\nloop invariant y == xa + 2*ya - x;\nloop invariant x == -2*xa + ya + y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main () {\n\nint x;\nint y;\nint xa = 0;\nint ya = 0;\n\n/*@\n\n\nloop invariant i3: xa + 2*ya >= 0;\n\n\n*/\nwhile (unknown_int()) {\n\tx = xa + 2*ya;\n\ty = -2*xa + ya;\n\n\tx++;\n\tif (unknown_int()) y\t= y+x;\n\telse y = y-x;\n\n\txa = x - 2*y;\n\tya = 2*x + y;\n}\n\n{;\n//@ assert(xa + 2*ya >= 0);\n}\n\nreturn 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= xa + 2*ya;\nloop invariant xa >= 0;\nloop invariant ya >= 0;\nloop invariant xa + 2*ya >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main () {\n\nint x;\nint y;\nint xa = 0;\nint ya = 0;\n\n/*@\n\n\n\nloop invariant i4: xa + 2*ya >= 0;\n*/\nwhile (unknown_int()) {\n\tx = xa + 2*ya;\n\ty = -2*xa + ya;\n\n\tx++;\n\tif (unknown_int()) y\t= y+x;\n\telse y = y-x;\n\n\txa = x - 2*y;\n\tya = 2*x + y;\n}\n\n{;\n//@ assert(xa + 2*ya >= 0);\n}\n\nreturn 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 3 <= xa <= 2147483647;\nloop invariant 2 <= ya <= 2147483647;\nloop invariant xa >= ya;\nloop invariant xa + 2*ya >= 0;\nloop invariant xa + 2*ya >= 0 ==> xa >= ya;\nloop invariant xa + 2*ya >= 0 ==> xa + 2*ya <= 2147483647;\nloop invariant xa + 2*ya >= 0 ==> xa - 2*ya >= -2147483647;\nloop invariant xa + 2*ya >= 0 ==> xa + ya >= -2147483647;\nloop invariant xa + 2*ya >= 0 ==> xa >= -2147483647;\nloop invariant xa + 2*ya >= 0 ==> xa - ya >= -2147483647;\nloop invariant xa + 2*ya >= 0 ==> xa + ya >= -2147483647;\nloop invariant xa + 2*ya >= 0 ==> xa <= 2147483647;\nloop invariant xa + 2*ya >= 0 ==> xa - ya >= -2147483647;\nloop invariant xa + 2*ya >= 0 ==> xa + ya >= -2147483647;\nloop invariant xa + 2*ya >= 0 ==> xa <= 2147483647;\nloop invariant xa + 2*ya >= 0 ==> xa - ya >= -2147483647;\nloop invariant xa + 2*ya >= 0 ==> xa + ya >= -2147483647;\nloop invariant xa + 2*ya >= 0 ==> xa <= 2147483647;\nloop invariant xa + 2*ya >= 0 ==> xa - ya >= -2147483647;\nloop invariant xa + 2*ya >= 0 ==> xa + ya >= -2147483647;\nloop invariant xa + 2*ya >= 0 ==> xa <= 2147483647;\nloop invariant xa + 2*ya >= 0 ==> xa - ya >= -2147483647;\nloop invariant xa + 2*ya >= 0 ==> xa + ya >= -2147483647;\nloop invariant xa + 2*ya >= 0 ==> xa <= 2147483647;\nloop invariant xa + 2*ya >= 0 ==> xa - ya >= -2147483647;\nloop invariant xa + 2*ya >= 0 ==> xa + ya >= -2147483647;\nloop invariant xa + 2*ya >= 0 ==> xa <= 2147483647;\nloop invariant xa + 2*ya >= 0 ==> xa - ya >= -2147483647;\nloop invariant xa + 2*ya >= 0 ==> xa + ya >= -2147483647;\nloop invariant xa + 2*ya >= 0 ==> xa <= 2147483647;\nloop invariant xa + 2*ya >= 0 ==> xa - ya >= -2147483647;\nloop invariant xa + 2*ya >= 0 ==> xa + ya >= -2147483647;\nloop invariant xa + 2*ya >= 0 ==> xa <= 2147483647;\nloop invariant xa + 2*ya >= 0 ==> xa - ya >= -2147483647;\nloop invariant xa + 2*ya >= 0 ==> xa + ya >= -2147483647;\nloop invariant xa + 2*ya >= 0 ==> xa <= 2147483647;\nloop invariant xa + 2*ya >= 0 ==> xa - ya >= -2147483647;\nloop invariant xa + 2*ya >= 0 ==> xa + ya >= -2147483647;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main () {\n\nint x;\nint y;\nint xa = 0;\nint ya = 0;\n\n/*@\n\n\n\nloop invariant i4: xa + 2*ya >= 0;\n\n\n\nloop invariant i8: xa + 2*ya >= 0 ==> xa + ya >= -2147483647;\n\n\nloop invariant i11: xa + 2*ya >= 0 ==> xa <= 2147483647;\n*/\nwhile (unknown_int()) {\n\tx = xa + 2*ya;\n\ty = -2*xa + ya;\n\n\tx++;\n\tif (unknown_int()) y\t= y+x;\n\telse y = y-x;\n\n\txa = x - 2*y;\n\tya = 2*x + y;\n}\n\n{;\n//@ assert(xa + 2*ya >= 0);\n}\n\nreturn 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= xa + 2*ya <= 2*xa + 2*ya;\nloop invariant xa + 2*ya >= -2*xa + ya;\nloop invariant xa + 2*ya >= xa + 2*ya;\nloop invariant xa + 2*ya <= 2*xa + 2*ya;\nloop invariant xa + 2*ya >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main () {\n\nint x;\nint y;\nint xa = 0;\nint ya = 0;\n\n/*@\n\n\nloop invariant i3: xa + 2*ya >= xa + 2*ya;\n\nloop invariant i5: xa + 2*ya >= 0;\n*/\nwhile (unknown_int()) {\n\tx = xa + 2*ya;\n\ty = -2*xa + ya;\n\n\tx++;\n\tif (unknown_int()) y\t= y+x;\n\telse y = y-x;\n\n\txa = x - 2*y;\n\tya = 2*x + y;\n}\n\n{;\n//@ assert(xa + 2*ya >= 0);\n}\n\nreturn 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= xa <= x <= xa + 2*ya;\nloop invariant (xa - 2*y) <= 2*x + y <= ya;\nloop invariant x >= 0;\nloop invariant xa >= 0;\nloop invariant ya >= 0;\nloop invariant y >= 0;\nloop invariant x >= xa;\nloop invariant x >= ya;\nloop invariant xa >= (x - 2*y);\nloop invariant ya >= (2*x + y);\nloop invariant x >= (xa + 2*ya);\nloop invariant xa + 2*ya >= 0 ==> x >= xa;\nloop invariant xa + 2*ya >= 0 ==> x >= ya;\nloop invariant xa + 2*ya >= 0 ==> xa >= (x - 2*y);\nloop invariant xa + 2*ya >= 0 ==> ya >= (2*x + y);\nloop invariant xa + 2*ya >= 0 ==> x >= (xa + 2*ya);\nloop invariant xa + 2*ya >= 0 ==> xa >= 0;\nloop invariant xa + 2*ya >= 0 ==> ya >= 0;\nloop invariant xa + 2*ya >= 0 ==> x >= 0;\nloop invariant xa + 2*ya >= 0 ==> x >= xa;\nloop invariant xa + 2*ya >= 0 ==> x >= ya;\nloop invariant xa + 2*ya >= 0 ==> xa >= (x - 2*y);\nloop invariant xa + 2*ya >= 0 ==> ya >= (2*x + y);\nloop invariant xa + 2*ya >= 0 ==> x >= (xa + 2*ya);\nloop invariant xa + 2*ya >= 0 ==> xa >= 0;\nloop invariant xa + 2*ya >= 0 ==> ya >= 0;\nloop invariant xa + 2*ya >= 0 ==> x >= 0;\nloop invariant xa + 2*ya >= 0 ==> x >= xa;\nloop invariant xa + 2*ya >= 0 ==> x >= ya;\nloop invariant xa + 2*ya >= 0 ==> xa >= (x - 2*y);\nloop invariant xa + 2*ya >= 0 ==> ya >= (2*x + y);\nloop invariant xa + 2*ya >= 0 ==> x >= (xa + 2*ya);\nloop invariant xa + 2*ya >= 0 ==> xa >= 0;\nloop invariant xa + 2*ya >= 0 ==> ya >= 0;\nloop invariant xa + 2*ya >= 0 ==> x >= 0;\nloop invariant xa + 2*ya >= 0 ==> x >= xa;\nloop invariant xa + 2*ya >= 0 ==> x >= ya;\nloop invariant xa + 2*ya >= 0 ==> xa >= (x - 2*y);\nloop invariant xa + 2*ya >= 0 ==> ya >= (2*x + y);\nloop invariant xa + 2*ya >= 0 ==> x >= (xa + 2*ya);\nloop invariant xa + 2*ya >= 0 ==> xa >= 0;\nloop invariant xa + 2*ya >= 0 ==> ya >= 0;\nloop invariant xa + 2*ya >= 0 ==> x >= 0;\nloop invariant xa + 2*ya >= 0 ==> x >= xa;\nloop invariant xa + 2*ya >= 0 ==> x >= ya;\nloop invariant xa + 2*ya >= 0 ==> xa >= (x - 2*y);\nloop invariant xa + 2*ya >= 0 ==> ya >= (2*x + y);\nloop invariant xa + 2*ya >= 0 ==> x >= (xa + 2*ya);\nloop invariant xa + 2*ya >= 0 ==> xa >= 0;\nloop invariant xa + 2*ya >= 0 ==> ya >= 0;\nloop invariant xa + 2*ya >= 0 ==> x >= 0;\nloop invariant xa + 2*ya >= 0 ==> x >= xa;\nloop invariant xa + 2*ya >= 0 ==> x >= ya;\nloop invariant xa + 2*ya >= 0 ==> xa >= (x - 2*y);\nloop invariant xa + 2*ya >= 0 ==> ya >= (2*x + y);\nloop invariant xa + 2*ya >= 0 ==> x >= (xa + 2*ya);\nloop invariant xa + 2*ya >= 0 ==> xa >= 0;\nloop invariant xa + 2*ya >= 0 ==> ya >= 0;\nloop invariant xa + 2*ya >= 0 ==> x >= 0;\nloop invariant xa + 2*ya >= 0 ==> x >= xa;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main () {\n\nint x;\nint y;\nint xa = 0;\nint ya = 0;\n\n/*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown_int()) {\n\tx = xa + 2*ya;\n\ty = -2*xa + ya;\n\n\tx++;\n\tif (unknown_int()) y\t= y+x;\n\telse y = y-x;\n\n\txa = x - 2*y;\n\tya = 2*x + y;\n}\n\n{;\n//@ assert(xa + 2*ya >= 0);\n}\n\nreturn 0;\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 19: Assignment operators not allowed in annotations.",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main () {\n\nint x;\nint y;\nint xa = 0;\nint ya = 0;\n\n/*@\nloop invariant i1: 1 + xa + ya - (x * x + x) = 0; loop invariant ya * ya - ya - (y * y + y) = 0; loop invariant xa + ya >= 0; loop invariant xa >= ya; loop invariant xa >= 0; loop invariant ya >= 0; loop invariant x >= 0; loop invariant y >= 0;\nloop invariant i2: 0 <= xa <= 100000;\nloop invariant i3: 0 <= ya <= 100000;\nloop invariant i4: xa >= 2*ya;\nloop invariant i5: ya >= -2*xa;\nloop invariant i6: 0 <= x * x + y * y;\nloop invariant i7: x * x + y * y >= xa * xa + ya * ya;\nloop invariant i8: xa * xa + ya * ya >= 0;\nloop invariant i9: xa * xa + ya * ya <= x * x + y * y;\nloop invariant i10: xa * xa + ya * ya >= xa * xa + ya * ya;\nloop invariant i11: 0 <= xa <= x;\nloop invariant i12: 0 <= ya <= y;\nloop invariant i13: xa + 2*ya >= 0;\nloop invariant i14: x >= xa + 2*ya;\nloop invariant i15: y >= -2*xa + ya;\nloop invariant i16: x >= 2*ya;\nloop invariant i17: y >= xa + 2*ya;\nloop invariant i18: xa >= 0;\nloop invariant i19: ya >= 0;\nloop invariant i20: x + y >= 0;\nloop invariant i21: xa - 2*y >= 0;\nloop invariant i22: 2*x + y >= 0;\nloop invariant i23: y = -2*xa + ya;\nloop invariant i24: x = xa + 2*ya;\nloop invariant i25: xa >= -y;\nloop invariant i26: ya >= x;\nloop invariant i27: ya > 0 ==> xa > ya;\nloop invariant i28: xa >= 2*ya ==> xa > ya;\nloop invariant i29: xa >= ya;\nloop invariant i30: xa >= ya ==> xa > ya;\nloop invariant i31: xa >= ya ==> xa >= 2*ya;\nloop invariant i32: xa >= ya ==> xa >= 2*ya && xa > ya;\nloop invariant i33: xa >= ya ==> xa >= 2*ya && xa > ya ==> xa > ya;\nloop invariant i34: xa >= ya ==> xa >= 2*ya && xa > ya ==> xa > ya ==> xa >= ya;\nloop invariant i35: xa >= ya ==> xa >= 2*ya && xa > ya ==> xa > ya ==> xa >= ya ==> xa >= ya;\nloop invariant i36: xa >= ya ==> xa >= 2*ya && xa > ya ==> xa > ya ==> xa >= ya ==> xa >= ya ==> xa >= ya;\nloop invariant i37: xa >= ya ==> xa >= 2*ya && xa > ya ==> xa > ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya;\nloop invariant i38: xa >= ya ==> xa >= 2*ya && xa > ya ==> xa > ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya;\nloop invariant i39: xa >= ya ==> xa >= 2*ya && xa > ya ==> xa > ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya;\nloop invariant i40: xa >= ya ==> xa >= 2*ya && xa > ya ==> xa > ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya;\nloop invariant i41: 0 <= xa <= ya;\nloop invariant i42: 0 <= ya;\nloop invariant i43: xa + 2*ya >= -2*xa + ya;\nloop invariant i44: xa + 2*ya >= xa;\nloop invariant i45: xa + 2*ya >= ya;\nloop invariant i46: xa + 2*ya <= 1;\nloop invariant i47: xa <= 1;\nloop invariant i48: ya <= 1;\nloop invariant i49: x >= xa;\nloop invariant i50: x <= xa + 2;\nloop invariant i51: y >= -2;\nloop invariant i52: y <= 1;\nloop invariant i53: x == xa + 2*ya;\nloop invariant i54: y == -2*xa + ya;\nloop invariant i55: 0 <= xa + 2*ya <= 100000;\nloop invariant i56: 0 <= x <= xa + 2*ya;\nloop invariant i57: 0 <= y <= -2*xa + ya;\nloop invariant i58: y == xa + 2*ya - x;\nloop invariant i59: x == -2*xa + ya + y;\nloop invariant i60: 0 <= y <= xa + 2*ya;\nloop invariant i61: 3 <= xa <= 2147483647;\nloop invariant i62: 2 <= ya <= 2147483647;\nloop invariant i63: xa + 2*ya >= 0 ==> xa >= ya;\nloop invariant i64: xa + 2*ya >= 0 ==> xa + 2*ya <= 2147483647;\nloop invariant i65: xa + 2*ya >= 0 ==> xa - 2*ya >= -2147483647;\nloop invariant i66: xa + 2*ya >= 0 ==> xa + ya >= -2147483647;\nloop invariant i67: xa + 2*ya >= 0 ==> xa >= -2147483647;\nloop invariant i68: xa + 2*ya >= 0 ==> xa - ya >= -2147483647;\nloop invariant i69: xa + 2*ya >= 0 ==> xa <= 2147483647;\nloop invariant i70: 0 <= xa + 2*ya <= 2*xa + 2*ya;\nloop invariant i71: xa + 2*ya >= xa + 2*ya;\nloop invariant i72: xa + 2*ya <= 2*xa + 2*ya;\nloop invariant i73: 0 <= xa <= x <= xa + 2*ya;\nloop invariant i74: (xa - 2*y) <= 2*x + y <= ya;\nloop invariant i75: x >= 0;\nloop invariant i76: y >= 0;\nloop invariant i77: x >= ya;\nloop invariant i78: xa >= (x - 2*y);\nloop invariant i79: ya >= (2*x + y);\nloop invariant i80: x >= (xa + 2*ya);\nloop invariant i81: xa + 2*ya >= 0 ==> x >= xa;\nloop invariant i82: xa + 2*ya >= 0 ==> x >= ya;\nloop invariant i83: xa + 2*ya >= 0 ==> xa >= (x - 2*y);\nloop invariant i84: xa + 2*ya >= 0 ==> ya >= (2*x + y);\nloop invariant i85: xa + 2*ya >= 0 ==> x >= (xa + 2*ya);\nloop invariant i86: xa + 2*ya >= 0 ==> xa >= 0;\nloop invariant i87: xa + 2*ya >= 0 ==> ya >= 0;\nloop invariant i88: xa + 2*ya >= 0 ==> x >= 0;\n*/\nwhile (unknown_int()) {\n\tx = xa + 2*ya;\n\ty = -2*xa + ya;\n\n\tx++;\n\tif (unknown_int()) y\t= y+x;\n\telse y = y-x;\n\n\txa = x - 2*y;\n\tya = 2*x + y;\n}\n\n{;\n//@ assert(xa + 2*ya >= 0);\n}\n\nreturn 0;\n}",
        "combined_annotation_num_solver_calls": 21,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main () {\n\nint x;\nint y;\nint xa = 0;\nint ya = 0;\n\n/*@\n\n\n\n\n\n\n\nloop invariant i8: xa * xa + ya * ya >= 0;\n\nloop invariant i10: xa * xa + ya * ya >= xa * xa + ya * ya;\n\n\nloop invariant i13: xa + 2*ya >= 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i33: xa >= ya ==> xa >= 2*ya && xa > ya ==> xa > ya;\nloop invariant i34: xa >= ya ==> xa >= 2*ya && xa > ya ==> xa > ya ==> xa >= ya;\nloop invariant i35: xa >= ya ==> xa >= 2*ya && xa > ya ==> xa > ya ==> xa >= ya ==> xa >= ya;\nloop invariant i36: xa >= ya ==> xa >= 2*ya && xa > ya ==> xa > ya ==> xa >= ya ==> xa >= ya ==> xa >= ya;\nloop invariant i37: xa >= ya ==> xa >= 2*ya && xa > ya ==> xa > ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya;\nloop invariant i38: xa >= ya ==> xa >= 2*ya && xa > ya ==> xa > ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya;\nloop invariant i39: xa >= ya ==> xa >= 2*ya && xa > ya ==> xa > ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya;\nloop invariant i40: xa >= ya ==> xa >= 2*ya && xa > ya ==> xa > ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya ==> xa >= ya;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i66: xa + 2*ya >= 0 ==> xa + ya >= -2147483647;\n\n\nloop invariant i69: xa + 2*ya >= 0 ==> xa <= 2147483647;\n\nloop invariant i71: xa + 2*ya >= xa + 2*ya;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown_int()) {\n\tx = xa + 2*ya;\n\ty = -2*xa + ya;\n\n\tx++;\n\tif (unknown_int()) y\t= y+x;\n\telse y = y-x;\n\n\txa = x - 2*y;\n\tya = 2*x + y;\n}\n\n{;\n//@ assert(xa + 2*ya >= 0);\n}\n\nreturn 0;\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/11.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/15.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/16.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/18.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/20.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/23.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/30.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/37.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/38.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/43.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/46.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/popl.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/07.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/39.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/gulv_simp.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/substring1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/xy10.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/const_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/multivar_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/phases_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/simple_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/simple_safe2.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/simple_safe3.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/simple_safe4.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/underapprox_safe2.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/underapprox_unsafe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/barbr.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/barbrprime.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/bk-nat.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/bkley.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/efm.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/ex1.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/split.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/13.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/14.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/19.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/32.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/39.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/41.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/44.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/cav.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/05.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/19.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/37.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/gulv.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/pldi082_unbounded.c"
        ],
        "skipped": [],
        "total": 151,
        "success_count": 123,
        "failure_count": 28,
        "success_rate": 0.8145695364238411
    }
}