{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main()\n{\n  int x, N, v1,v2,v3;\n  x = 0;\n  N = unknown_int();\n  while(x < N)\n  {\n    x = x + 1;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(N < 0 || x == N);\n}\n    \n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant N < 0 ==> x == N;\nloop invariant N >= 0 ==> x <= N;\nloop invariant x <= N ==> x == N;\nloop invariant x <= N ==> x >= 0;\nloop invariant x <= N ==> x <= N;\nloop invariant x <= N ==> x < N;\nloop invariant x <= N ==> x > N;\nloop invariant x <= N ==> x >= N;\nloop invariant x <= N ==> x == N;\nloop invariant x <= N ==> x < N;\nloop invariant x <= N ==> x > N;\nloop invariant x <= N ==> x >= N;\nloop invariant x <= N ==> x == N;\nloop invariant x <= N ==> x < N;\nloop invariant x <= N ==> x > N;\nloop invariant x <= N ==> x >= N;\nloop invariant x <= N ==> x == N;\nloop invariant x <= N ==> x < N;\nloop invariant x <= N ==> x > N;\nloop invariant x <= N ==> x >= N;\nloop invariant x <= N ==> x == N;\nloop invariant x <= N ==> x < N;\nloop invariant x <= N ==> x > N;\nloop invariant x <= N ==> x >= N;\nloop invariant x <= N ==> x == N;\nloop invariant x <= N ==> x < N;\nloop invariant x <= N ==> x > N;\nloop invariant x <= N ==> x >= N;\nloop invariant x <= N ==> x == N;\nloop invariant x <= N ==> x < N;\nloop invariant x <= N ==> x > N;\nloop invariant x <= N ==> x >= N;\nloop invariant x <= N ==> x == N;\nloop invariant x <= N ==> x < N;\nloop invariant x <= N ==> x > N;\nloop invariant x <= N ==> x >= N;\nloop invariant x <= N ==> x == N;\nloop invariant x <= N ==> x < N;\nloop invariant x <= N ==> x > N;\nloop invariant x <= N ==> x >= N;\nloop invariant x <= N ==> x == N;\nloop invariant x <= N ==> x < N;\nloop invariant x <= N ==> x > N;\nloop invariant x <= N ==> x >= N;\nloop invariant x <= N ==> x == N;\nloop invariant x <= N ==> x < N;\nloop invariant x <= N ==> x > N;\nloop invariant x <= N ==> x >= N;\nloop invariant x <= N ==> x == N;\nloop invariant x <= N ==> x < N;\nloop invariant x <= N ==> x > N;\nloop invariant x <= N ==> x >= N;\nloop invariant x <= N ==> x == N;\nloop invariant x <= N ==> x < N;\nloop invariant x <= N ==> x > N;\nloop invariant x <= N ==> x >= N;\nloop invariant x <= N ==> x == N;\nloop invariant x <= N ==> x < N;\nloop invariant x <= N ==> x > N;\nloop invariant x <= N ==> x >= N;\nloop invariant x <= N ==> x == N;\nloop invariant x <= N ==> x < N;\nloop invariant x <= N ==> x > N;\nloop invariant x <= N ==> x >= N;\nloop invariant x <= N ==> x == N;\nloop invariant x <= N ==> x < N;\nloop invariant x <= N ==> x > N;\nloop invariant x <= N ==> x >= N;\nloop invariant x <= N ==> x == N;\nloop invariant x <= N ==> x < N;\nloop invariant x <= N ==> x > N;\nloop invariant x <= N ==> x >= N;\nloop invariant x <= N ==> x == N;\nloop invariant x <= N ==> x < N;\nloop invariant x <= N ==> x > N;\nloop invariant x <= N ==> x >= N;\nloop invariant x <= N ==> x == N;\nloop invariant x <= N ==> x < N;\nloop invariant x <= N ==> x > N;\nloop invariant x <= N ==> x >= N;\nloop invariant x <= N ==> x == N;\nloop invariant x <= N ==> x < N;\nloop invariant x <= N ==> x > N;\nloop invariant x <= N ==> x >= N;\nloop invariant x <= N ==> x == N;\nloop invariant x <= N ==> x < N;\nloop invariant x <= N ==> x > N;\nloop invariant x <= N ==> x >= N;\nloop invariant x <= N ==> x == N;\nloop invariant x <= N ==> x < N;\nloop invariant x <= N ==> x > N;\nloop invariant x <= N ==> x >= N;\nloop invariant x <= N ==> x == N;\nloop invariant x <= N ==> x < N;\nloop invariant x <= N ==> x > N;\nloop invariant x <= N ==> x >= N;\nloop invariant x <= N ==> x == N;\nloop invariant x <= N ==> x < N;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant v1 <= N;\nloop invariant v2 <= N;\nloop invariant v3 <= N;\nloop invariant x < N ==> v1 < N;\nloop invariant x < N ==> v2 < N;\nloop invariant x < N ==> v3 < N;\nloop invariant x >= N ==> v1 >= N;\nloop invariant x >= N ==> v2 >= N;\nloop invariant x >= N ==> v3 >= N;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant v1 = unknown_int();\nloop invariant v2 = unknown_int();\nloop invariant v3 = unknown_int();\nloop invariant (x + v1 + v2 + v3) ==> (x < N);\nloop invariant (x + v1 + v2 + v3) ==> (x >= 0);\nloop invariant (x + v1 + v2 + v3) ==> (x <= N);\nloop invariant (x + v1 + v2 + v3) ==> (N >= 0);\nloop invariant (x + v1 + v2 + v3) ==> (N >= x);\nloop invariant (x + v1 + v2 + v3) ==> (x >= N => x == N);\nloop invariant (x + v1 + v2 + v3) ==> (v1 == unknown_int());\nloop invariant (x + v1 + v2 + v3) ==> (v2 == unknown_int());\nloop invariant (x + v1 + v2 + v3) ==> (v3 == unknown_int());\nloop invariant (x + v1 + v2 + v3) ==> (x >= 0 => x < N);\nloop invariant (x + v1 + v2 + v3) ==> (x <= N => x >= 0);\nloop invariant (x + v1 + v2 + v3) ==> (N >= x => x < N);\nloop invariant (x + v1 + v2 + v3) ==> (N >= x => x >= 0);\nloop invariant (x + v1 + v2 + v3) ==> (x >= N => x == N);\nloop invariant (x + v1 + v2 + v3) ==> (x >= N ==> x == N);\nloop invariant (x + v1 + v2 + v3) ==> (x >= N ==> x == N => x == N);\nloop invariant (x + v1 + v2 + v3) ==> (x >= N ==> x == N => x == N => x == N);\nloop invariant (x + v1 + v2 + v3) ==> (x >= N ==> x == N => x == N => x == N => x == N);\nloop invariant (x + v1 + v2 + v3) ==> (x >= N ==> x == N => x == N => x == N => x == N => x == N);\nloop invariant (x + v1 + v2 + v3) ==> (x >= N ==> x == N => x == N => x == N => x == N => x == N => x == N);\nloop invariant (x + v1 + v2 + v3) ==> (x >= N ==> x == N => x == N => x == N => x == N => x == N => x == N => x == N);\nloop invariant (x + v1 + v2 + v3) ==> (x >= N ==> x == N => x == N => x == N => x == N => x == N => x == N => x == N => x == N);\nloop invariant (x + v1 + v2 + v3) ==> (x >= N ==> x == N => x == N => x == N => x == N => x == N => x == N => x == N => x == N => x == N);\nloop invariant (x + v1 + v2 + v3) ==> (x >= N ==> x == N => x == N => x == N => x == N => x == N => x == N => x == N => x == N => x == N => x == N);\nloop invariant (x + v1 + v2 + v3) ==> (x >= N ==> x == N => x == N => x == N => x == N => x == N => x == N => x == N => x == N => x == N => x == N => x == N);\nloop invariant (x + v1 + v2 + v3) ==> (x >= N ==> x == N => x == N => x == N => x == N => x == N => x == N => x == N => x == N => x == N => x == N => x == N => x == N);\nloop invariant (x + v1 + v2 + v3) ==> (x >= N ==> x == N => x == N => x == N => x == N => x == N => x == N => x == N => x == N => x == N => x == N => x == N => x == N => x == N);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant unknown_int() == v1 || unknown_int() == v2 || unknown_int() == v3;\nloop invariant v1 >= 0 && v1 <= 100;\nloop invariant v2 >= 0 && v2 <= 100;\nloop invariant v3 >= 0 && v3 <= 100;\nloop invariant x >= 0 && x <= N;\nloop invariant N >= 0;\nloop invariant x == N ==> unknown_int() == v1 || unknown_int() == v2 || unknown_int() == v3;\nloop invariant x == N ==> v1 >= 0 && v1 <= 100;\nloop invariant x == N ==> v2 >= 0 && v2 <= 100;\nloop invariant x == N ==> v3 >= 0 && v3 <= 100;\nloop invariant x == N ==> N >= 0;\nloop invariant x == N ==> x >= 0 && x <= N;\n*/\n```",
            "```\n/*@\nloop invariant 0 < x < N;\nloop invariant v1 < unknown_int();\nloop invariant v2 < unknown_int();\nloop invariant v3 < unknown_int();\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant 0 <= v1;\nloop invariant 0 <= v2;\nloop invariant 0 <= v3;\nloop invariant x >= 0;\nloop invariant N >= x;\nloop invariant x <= N;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant x == N ==> N < 0;\nloop invariant x != N ==> x < N;\nloop invariant x == N ==> x == N;\nloop invariant x != N ==> x < N;\nloop invariant x == N ==> x == N;\nloop invariant x != N ==> x < N;\nloop invariant x == N ==> x == N;\nloop invariant x != N ==> x < N;\nloop invariant x == N ==> x == N;\nloop invariant x != N ==> x < N;\nloop invariant x == N ==> x == N;\nloop invariant x != N ==> x < N;\nloop invariant x == N ==> x == N;\nloop invariant x != N ==> x < N;\nloop invariant x == N ==> x == N;\nloop invariant x != N ==> x < N;\nloop invariant x == N ==> x == N;\nloop invariant x != N ==> x < N;\nloop invariant x == N ==> x == N;\nloop invariant x != N ==> x < N;\nloop invariant x == N ==> x == N;\nloop invariant x != N ==> x < N;\nloop invariant x == N ==> x == N;\nloop invariant x != N ==> x < N;\nloop invariant x == N ==> x == N;\nloop invariant x != N ==> x < N;\nloop invariant x == N ==> x == N;\nloop invariant x != N ==> x < N;\nloop invariant x == N ==> x == N;\nloop invariant x != N ==> x < N;\nloop invariant x == N ==> x == N;\nloop invariant x != N ==> x < N;\nloop invariant x == N ==> x == N;\nloop invariant x != N ==> x < N;\nloop invariant x == N ==> x == N;\nloop invariant x != N ==> x < N;\nloop invariant x == N ==> x == N;\nloop invariant x != N ==> x < N;\nloop invariant x == N ==> x == N;\nloop invariant x != N ==> x < N;\nloop invariant x == N ==> x == N;\nloop invariant x != N ==> x < N;\nloop invariant x == N ==> x == N;\nloop invariant x != N ==> x < N;\nloop invariant x == N ==> x == N;\nloop invariant x != N ==> x < N;\nloop invariant x == N ==> x == N;\nloop invariant x != N ==> x < N;\nloop invariant x == N ==> x == N;\nloop invariant x != N ==> x < N;\nloop invariant x == N ==> x == N;\nloop invariant x != N ==> x < N;\nloop invariant x == N ==> x == N;\nloop invariant x != N ==> x < N;\nloop invariant x == N ==> x == N;\nloop invariant x != N ==> x < N;\nloop invariant x == N ==> x == N;\nloop invariant x != N ==> x < N;\nloop invariant x == N ==> x == N;\nloop invariant x != N ==> x < N;\nloop invariant x == N ==> x == N;\nloop invariant x != N ==> x < N;\nloop invariant x == N ==> x == N;\nloop invariant x != N ==> x < N;\nloop invariant x == N ==> x == N;\nloop invariant x != N ==> x < N;\nloop invariant x == N ==> x == N;\nloop invariant x != N ==> x < N;\nloop invariant x == N ==> x == N;\nloop invariant x != N ==> x < N;\nloop invariant x == N ==> x == N;\nloop invariant x != N ==> x < N;\nloop invariant x == N ==> x == N;\nloop invariant x != N ==> x < N;\nloop invariant x == N ==> x == N;\nloop invariant x != N ==> x < N;\nloop invariant x == N ==> x == N;\nloop invariant x != N ==> x < N;\nloop invariant x == N ==> x == N;\nloop invariant x != N ==> x < N;\nloop invariant x == N ==> x == N;\nloop invariant x != N ==> x < N;\nloop invariant x == N ==> x == N;\nloop invariant x != N ==> x < N;\nloop invariant x == N ==> x == N;\nloop invariant x != N ==> x < N;\nloop invariant x == N ==> x == N;\nloop invariant x != N ==> x < N;\nloop invariant x == N ==> x == N;\nloop invariant x != N ==> x < N;\nloop invariant x == N ==> x == N;\nloop invariant x != N ==> x < N;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant x >= 0;\nloop invariant x <= N;\nloop invariant N >= 0;\nloop invariant x == 0 ==> v1 == v2 == v3;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant x < N ==> ((x >= 0) && (x <= N));\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant v1 == unknown_int();\nloop invariant v2 == unknown_int();\nloop invariant v3 == unknown_int();\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant x % 1 == 0;\nloop invariant v1 % 1 == 0;\nloop invariant v2 % 1 == 0;\nloop invariant v3 % 1 == 0;\nloop invariant x >= 0;\nloop invariant x <= N;\nloop invariant x % 1 == 0;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant v1 % 1 == 0;\nloop invariant v2 % 1 == 0;\nloop invariant v3 % 1 == 0;\nloop invariant x >= 0;\nloop invariant x <= N;\nloop invariant x % 1 == 0;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant v1 % 1 == 0;\nloop invariant v2 % 1 == 0;\nloop invariant v3 % 1 == 0;\nloop invariant x >= 0;\nloop invariant x <= N;\nloop invariant x % 1 == 0;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant v1 % 1 == 0;\nloop invariant v2 % 1 == 0;\nloop invariant v3 % 1 == 0;\nloop invariant x >= 0;\nloop invariant x <= N;\nloop invariant x % 1 == 0;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant v1 % 1 == 0;\nloop invariant v2 % 1 == 0;\nloop invariant v3 % 1 == 0;\nloop invariant x >= 0;\nloop invariant x <= N;\nloop invariant x % 1 == 0;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant v1 % 1 == 0;\nloop invariant v2 % 1 == 0;\nloop invariant v3 % 1 == 0;\nloop invariant x >= 0;\nloop invariant x <= N;\nloop invariant x % 1 == 0;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant v1 % 1 == 0;\nloop invariant v2 % 1 == 0;\nloop invariant v3 % 1 == 0;\nloop invariant x >= 0;\nloop invariant x <= N;\nloop invariant x % 1 == 0;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant v1 % 1 == 0;\nloop invariant v2 % 1 == 0;\nloop invariant v3 % 1 == 0;\nloop invariant x >= 0;\nloop invariant x <= N;\nloop invariant x % 1 == 0;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant v1 % 1 == 0;\nloop invariant v2 % 1 == 0;\nloop invariant v3 % 1 == 0;\nloop invariant x >= 0;\nloop invariant x <= N;\nloop invariant x % 1 == 0;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant v1 % 1 == 0;\nloop invariant v2 % 1 == 0;\nloop invariant v3 % 1 == 0;\nloop invariant x >= 0;\nloop invariant x <= N;\nloop invariant x % 1 == 0;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant v1 % 1 == 0;\nloop invariant v2 % 1 == 0;\nloop invariant v3 % 1 == 0;\nloop invariant x >= 0;\nloop invariant x <= N;\nloop invariant x % 1 == 0;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant v1 % 1 == 0;\nloop invariant v2 % 1 == 0;\nloop invariant v3 % 1 == 0;\nloop invariant x >= 0;\nloop invariant x <= N;\nloop invariant x % 1 == 0;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant v1 % 1 == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant v1 == unknown_int() ==> v1 is non-deterministic at the end of the loop;\nloop invariant v2 == unknown_int() ==> v2 is non-deterministic at the end of the loop;\nloop invariant v3 == unknown_int() ==> v3 is non-deterministic at the end of the loop;\nloop invariant 0 <= x <= N;\nloop invariant v1 == unknown_int() ==> v1 is non-deterministic at the end of the loop;\nloop invariant v2 == unknown_int() ==> v2 is non-deterministic at the end of the loop;\nloop invariant v3 == unknown_int() ==> v3 is non-deterministic at the end of the loop;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant v1 == unknown_int();\nloop invariant v2 == unknown_int();\nloop invariant v3 == unknown_int();\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x < N;\nloop invariant x >= 0;\nloop invariant x < N;\n*/\n```",
            "```\n/*@\nloop invariant x >= 0;\nloop invariant x <= N;\nloop invariant v1 == unknown_int();\nloop invariant v2 == unknown_int();\nloop invariant v3 == unknown_int();\nloop invariant (x < N ==> v1 == unknown_int() && v2 == unknown_int() && v3 == unknown_int());\nloop invariant (x >= N ==> v1 == unknown_int() && v2 == unknown_int() && v3 == unknown_int());\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= N;\nloop invariant v1 >= 0;\nloop invariant v1 <= 1;\nloop invariant v2 >= 0;\nloop invariant v2 <= 1;\nloop invariant v3 >= 0;\nloop invariant v3 <= 1;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant N < 0 ==> x == N;\nloop invariant N >= 0 ==> x <= N;\nloop invariant x <= N ==> x == N;\nloop invariant x <= N ==> x >= 0;\nloop invariant x <= N ==> x <= N;\nloop invariant x <= N ==> x < N;\nloop invariant x <= N ==> x > N;\nloop invariant x <= N ==> x >= N;\nloop invariant x <= N ==> x == N;\nloop invariant x <= N ==> x < N;\nloop invariant x <= N ==> x > N;\nloop invariant x <= N ==> x >= N;\nloop invariant x <= N ==> x == N;\nloop invariant x <= N ==> x < N;\nloop invariant x <= N ==> x > N;\nloop invariant x <= N ==> x >= N;\nloop invariant x <= N ==> x == N;\nloop invariant x <= N ==> x < N;\nloop invariant x <= N ==> x > N;\nloop invariant x <= N ==> x >= N;\nloop invariant x <= N ==> x == N;\nloop invariant x <= N ==> x < N;\nloop invariant x <= N ==> x > N;\nloop invariant x <= N ==> x >= N;\nloop invariant x <= N ==> x == N;\nloop invariant x <= N ==> x < N;\nloop invariant x <= N ==> x > N;\nloop invariant x <= N ==> x >= N;\nloop invariant x <= N ==> x == N;\nloop invariant x <= N ==> x < N;\nloop invariant x <= N ==> x > N;\nloop invariant x <= N ==> x >= N;\nloop invariant x <= N ==> x == N;\nloop invariant x <= N ==> x < N;\nloop invariant x <= N ==> x > N;\nloop invariant x <= N ==> x >= N;\nloop invariant x <= N ==> x == N;\nloop invariant x <= N ==> x < N;\nloop invariant x <= N ==> x > N;\nloop invariant x <= N ==> x >= N;\nloop invariant x <= N ==> x == N;\nloop invariant x <= N ==> x < N;\nloop invariant x <= N ==> x > N;\nloop invariant x <= N ==> x >= N;\nloop invariant x <= N ==> x == N;\nloop invariant x <= N ==> x < N;\nloop invariant x <= N ==> x > N;\nloop invariant x <= N ==> x >= N;\nloop invariant x <= N ==> x == N;\nloop invariant x <= N ==> x < N;\nloop invariant x <= N ==> x > N;\nloop invariant x <= N ==> x >= N;\nloop invariant x <= N ==> x == N;\nloop invariant x <= N ==> x < N;\nloop invariant x <= N ==> x > N;\nloop invariant x <= N ==> x >= N;\nloop invariant x <= N ==> x == N;\nloop invariant x <= N ==> x < N;\nloop invariant x <= N ==> x > N;\nloop invariant x <= N ==> x >= N;\nloop invariant x <= N ==> x == N;\nloop invariant x <= N ==> x < N;\nloop invariant x <= N ==> x > N;\nloop invariant x <= N ==> x >= N;\nloop invariant x <= N ==> x == N;\nloop invariant x <= N ==> x < N;\nloop invariant x <= N ==> x > N;\nloop invariant x <= N ==> x >= N;\nloop invariant x <= N ==> x == N;\nloop invariant x <= N ==> x < N;\nloop invariant x <= N ==> x > N;\nloop invariant x <= N ==> x >= N;\nloop invariant x <= N ==> x == N;\nloop invariant x <= N ==> x < N;\nloop invariant x <= N ==> x > N;\nloop invariant x <= N ==> x >= N;\nloop invariant x <= N ==> x == N;\nloop invariant x <= N ==> x < N;\nloop invariant x <= N ==> x > N;\nloop invariant x <= N ==> x >= N;\nloop invariant x <= N ==> x == N;\nloop invariant x <= N ==> x < N;\nloop invariant x <= N ==> x > N;\nloop invariant x <= N ==> x >= N;\nloop invariant x <= N ==> x == N;\nloop invariant x <= N ==> x < N;\nloop invariant x <= N ==> x > N;\nloop invariant x <= N ==> x >= N;\nloop invariant x <= N ==> x == N;\nloop invariant x <= N ==> x < N;\nloop invariant x <= N ==> x > N;\nloop invariant x <= N ==> x >= N;\nloop invariant x <= N ==> x == N;\nloop invariant x <= N ==> x < N;\nloop invariant x <= N ==> x > N;\nloop invariant x <= N ==> x >= N;\nloop invariant x <= N ==> x == N;\nloop invariant x <= N ==> x < N;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main()\n{\n  int x, N, v1,v2,v3;\n  x = 0;\n  N = unknown_int();\n  /*@\n\n\nloop invariant i3: N >= 0 ==> x <= N;\n\nloop invariant i5: x <= N ==> x >= 0;\nloop invariant i6: x <= N ==> x <= N;\n\n\n\n*/\nwhile(x < N)\n  {\n    x = x + 1;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(N < 0 || x == N);\n}\n    \n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant v1 <= N;\nloop invariant v2 <= N;\nloop invariant v3 <= N;\nloop invariant x < N ==> v1 < N;\nloop invariant x < N ==> v2 < N;\nloop invariant x < N ==> v3 < N;\nloop invariant x >= N ==> v1 >= N;\nloop invariant x >= N ==> v2 >= N;\nloop invariant x >= N ==> v3 >= N;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main()\n{\n  int x, N, v1,v2,v3;\n  x = 0;\n  N = unknown_int();\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile(x < N)\n  {\n    x = x + 1;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(N < 0 || x == N);\n}\n    \n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 28,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant v1 = unknown_int();\nloop invariant v2 = unknown_int();\nloop invariant v3 = unknown_int();\nloop invariant (x + v1 + v2 + v3) ==> (x < N);\nloop invariant (x + v1 + v2 + v3) ==> (x >= 0);\nloop invariant (x + v1 + v2 + v3) ==> (x <= N);\nloop invariant (x + v1 + v2 + v3) ==> (N >= 0);\nloop invariant (x + v1 + v2 + v3) ==> (N >= x);\nloop invariant (x + v1 + v2 + v3) ==> (x >= N => x == N);\nloop invariant (x + v1 + v2 + v3) ==> (v1 == unknown_int());\nloop invariant (x + v1 + v2 + v3) ==> (v2 == unknown_int());\nloop invariant (x + v1 + v2 + v3) ==> (v3 == unknown_int());\nloop invariant (x + v1 + v2 + v3) ==> (x >= 0 => x < N);\nloop invariant (x + v1 + v2 + v3) ==> (x <= N => x >= 0);\nloop invariant (x + v1 + v2 + v3) ==> (N >= x => x < N);\nloop invariant (x + v1 + v2 + v3) ==> (N >= x => x >= 0);\nloop invariant (x + v1 + v2 + v3) ==> (x >= N => x == N);\nloop invariant (x + v1 + v2 + v3) ==> (x >= N ==> x == N);\nloop invariant (x + v1 + v2 + v3) ==> (x >= N ==> x == N => x == N);\nloop invariant (x + v1 + v2 + v3) ==> (x >= N ==> x == N => x == N => x == N);\nloop invariant (x + v1 + v2 + v3) ==> (x >= N ==> x == N => x == N => x == N => x == N);\nloop invariant (x + v1 + v2 + v3) ==> (x >= N ==> x == N => x == N => x == N => x == N => x == N);\nloop invariant (x + v1 + v2 + v3) ==> (x >= N ==> x == N => x == N => x == N => x == N => x == N => x == N);\nloop invariant (x + v1 + v2 + v3) ==> (x >= N ==> x == N => x == N => x == N => x == N => x == N => x == N => x == N);\nloop invariant (x + v1 + v2 + v3) ==> (x >= N ==> x == N => x == N => x == N => x == N => x == N => x == N => x == N => x == N);\nloop invariant (x + v1 + v2 + v3) ==> (x >= N ==> x == N => x == N => x == N => x == N => x == N => x == N => x == N => x == N => x == N);\nloop invariant (x + v1 + v2 + v3) ==> (x >= N ==> x == N => x == N => x == N => x == N => x == N => x == N => x == N => x == N => x == N => x == N);\nloop invariant (x + v1 + v2 + v3) ==> (x >= N ==> x == N => x == N => x == N => x == N => x == N => x == N => x == N => x == N => x == N => x == N => x == N);\nloop invariant (x + v1 + v2 + v3) ==> (x >= N ==> x == N => x == N => x == N => x == N => x == N => x == N => x == N => x == N => x == N => x == N => x == N => x == N);\nloop invariant (x + v1 + v2 + v3) ==> (x >= N ==> x == N => x == N => x == N => x == N => x == N => x == N => x == N => x == N => x == N => x == N => x == N => x == N => x == N);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main()\n{\n  int x, N, v1,v2,v3;\n  x = 0;\n  N = unknown_int();\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile(x < N)\n  {\n    x = x + 1;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(N < 0 || x == N);\n}\n    \n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant unknown_int() == v1 || unknown_int() == v2 || unknown_int() == v3;\nloop invariant v1 >= 0 && v1 <= 100;\nloop invariant v2 >= 0 && v2 <= 100;\nloop invariant v3 >= 0 && v3 <= 100;\nloop invariant x >= 0 && x <= N;\nloop invariant N >= 0;\nloop invariant x == N ==> unknown_int() == v1 || unknown_int() == v2 || unknown_int() == v3;\nloop invariant x == N ==> v1 >= 0 && v1 <= 100;\nloop invariant x == N ==> v2 >= 0 && v2 <= 100;\nloop invariant x == N ==> v3 >= 0 && v3 <= 100;\nloop invariant x == N ==> N >= 0;\nloop invariant x == N ==> x >= 0 && x <= N;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main()\n{\n  int x, N, v1,v2,v3;\n  x = 0;\n  N = unknown_int();\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile(x < N)\n  {\n    x = x + 1;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(N < 0 || x == N);\n}\n    \n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 < x < N;\nloop invariant v1 < unknown_int();\nloop invariant v2 < unknown_int();\nloop invariant v3 < unknown_int();\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main()\n{\n  int x, N, v1,v2,v3;\n  x = 0;\n  N = unknown_int();\n  /*@\n\n\n\n\n*/\nwhile(x < N)\n  {\n    x = x + 1;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(N < 0 || x == N);\n}\n    \n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant 0 <= v1;\nloop invariant 0 <= v2;\nloop invariant 0 <= v3;\nloop invariant x >= 0;\nloop invariant N >= x;\nloop invariant x <= N;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant x == N ==> N < 0;\nloop invariant x != N ==> x < N;\nloop invariant x == N ==> x == N;\nloop invariant x != N ==> x < N;\nloop invariant x == N ==> x == N;\nloop invariant x != N ==> x < N;\nloop invariant x == N ==> x == N;\nloop invariant x != N ==> x < N;\nloop invariant x == N ==> x == N;\nloop invariant x != N ==> x < N;\nloop invariant x == N ==> x == N;\nloop invariant x != N ==> x < N;\nloop invariant x == N ==> x == N;\nloop invariant x != N ==> x < N;\nloop invariant x == N ==> x == N;\nloop invariant x != N ==> x < N;\nloop invariant x == N ==> x == N;\nloop invariant x != N ==> x < N;\nloop invariant x == N ==> x == N;\nloop invariant x != N ==> x < N;\nloop invariant x == N ==> x == N;\nloop invariant x != N ==> x < N;\nloop invariant x == N ==> x == N;\nloop invariant x != N ==> x < N;\nloop invariant x == N ==> x == N;\nloop invariant x != N ==> x < N;\nloop invariant x == N ==> x == N;\nloop invariant x != N ==> x < N;\nloop invariant x == N ==> x == N;\nloop invariant x != N ==> x < N;\nloop invariant x == N ==> x == N;\nloop invariant x != N ==> x < N;\nloop invariant x == N ==> x == N;\nloop invariant x != N ==> x < N;\nloop invariant x == N ==> x == N;\nloop invariant x != N ==> x < N;\nloop invariant x == N ==> x == N;\nloop invariant x != N ==> x < N;\nloop invariant x == N ==> x == N;\nloop invariant x != N ==> x < N;\nloop invariant x == N ==> x == N;\nloop invariant x != N ==> x < N;\nloop invariant x == N ==> x == N;\nloop invariant x != N ==> x < N;\nloop invariant x == N ==> x == N;\nloop invariant x != N ==> x < N;\nloop invariant x == N ==> x == N;\nloop invariant x != N ==> x < N;\nloop invariant x == N ==> x == N;\nloop invariant x != N ==> x < N;\nloop invariant x == N ==> x == N;\nloop invariant x != N ==> x < N;\nloop invariant x == N ==> x == N;\nloop invariant x != N ==> x < N;\nloop invariant x == N ==> x == N;\nloop invariant x != N ==> x < N;\nloop invariant x == N ==> x == N;\nloop invariant x != N ==> x < N;\nloop invariant x == N ==> x == N;\nloop invariant x != N ==> x < N;\nloop invariant x == N ==> x == N;\nloop invariant x != N ==> x < N;\nloop invariant x == N ==> x == N;\nloop invariant x != N ==> x < N;\nloop invariant x == N ==> x == N;\nloop invariant x != N ==> x < N;\nloop invariant x == N ==> x == N;\nloop invariant x != N ==> x < N;\nloop invariant x == N ==> x == N;\nloop invariant x != N ==> x < N;\nloop invariant x == N ==> x == N;\nloop invariant x != N ==> x < N;\nloop invariant x == N ==> x == N;\nloop invariant x != N ==> x < N;\nloop invariant x == N ==> x == N;\nloop invariant x != N ==> x < N;\nloop invariant x == N ==> x == N;\nloop invariant x != N ==> x < N;\nloop invariant x == N ==> x == N;\nloop invariant x != N ==> x < N;\nloop invariant x == N ==> x == N;\nloop invariant x != N ==> x < N;\nloop invariant x == N ==> x == N;\nloop invariant x != N ==> x < N;\nloop invariant x == N ==> x == N;\nloop invariant x != N ==> x < N;\nloop invariant x == N ==> x == N;\nloop invariant x != N ==> x < N;\nloop invariant x == N ==> x == N;\nloop invariant x != N ==> x < N;\nloop invariant x == N ==> x == N;\nloop invariant x != N ==> x < N;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main()\n{\n  int x, N, v1,v2,v3;\n  x = 0;\n  N = unknown_int();\n  /*@\n\n\n\n\nloop invariant i5: x >= 0;\n\n\n\n\n\n\n\nloop invariant i13: x == N ==> x == N;\n*/\nwhile(x < N)\n  {\n    x = x + 1;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(N < 0 || x == N);\n}\n    \n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant x >= 0;\nloop invariant x <= N;\nloop invariant N >= 0;\nloop invariant x == 0 ==> v1 == v2 == v3;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main()\n{\n  int x, N, v1,v2,v3;\n  x = 0;\n  N = unknown_int();\n  /*@\n\nloop invariant i2: x >= 0;\n\n\n\n*/\nwhile(x < N)\n  {\n    x = x + 1;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(N < 0 || x == N);\n}\n    \n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant x < N ==> ((x >= 0) && (x <= N));\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main()\n{\n  int x, N, v1,v2,v3;\n  x = 0;\n  N = unknown_int();\n  /*@\n\nloop invariant i2: x < N ==> ((x >= 0) && (x <= N));\n*/\nwhile(x < N)\n  {\n    x = x + 1;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(N < 0 || x == N);\n}\n    \n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant v1 == unknown_int();\nloop invariant v2 == unknown_int();\nloop invariant v3 == unknown_int();\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main()\n{\n  int x, N, v1,v2,v3;\n  x = 0;\n  N = unknown_int();\n  /*@\n\n\n\n\n*/\nwhile(x < N)\n  {\n    x = x + 1;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(N < 0 || x == N);\n}\n    \n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant x % 1 == 0;\nloop invariant v1 % 1 == 0;\nloop invariant v2 % 1 == 0;\nloop invariant v3 % 1 == 0;\nloop invariant x >= 0;\nloop invariant x <= N;\nloop invariant x % 1 == 0;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant v1 % 1 == 0;\nloop invariant v2 % 1 == 0;\nloop invariant v3 % 1 == 0;\nloop invariant x >= 0;\nloop invariant x <= N;\nloop invariant x % 1 == 0;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant v1 % 1 == 0;\nloop invariant v2 % 1 == 0;\nloop invariant v3 % 1 == 0;\nloop invariant x >= 0;\nloop invariant x <= N;\nloop invariant x % 1 == 0;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant v1 % 1 == 0;\nloop invariant v2 % 1 == 0;\nloop invariant v3 % 1 == 0;\nloop invariant x >= 0;\nloop invariant x <= N;\nloop invariant x % 1 == 0;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant v1 % 1 == 0;\nloop invariant v2 % 1 == 0;\nloop invariant v3 % 1 == 0;\nloop invariant x >= 0;\nloop invariant x <= N;\nloop invariant x % 1 == 0;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant v1 % 1 == 0;\nloop invariant v2 % 1 == 0;\nloop invariant v3 % 1 == 0;\nloop invariant x >= 0;\nloop invariant x <= N;\nloop invariant x % 1 == 0;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant v1 % 1 == 0;\nloop invariant v2 % 1 == 0;\nloop invariant v3 % 1 == 0;\nloop invariant x >= 0;\nloop invariant x <= N;\nloop invariant x % 1 == 0;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant v1 % 1 == 0;\nloop invariant v2 % 1 == 0;\nloop invariant v3 % 1 == 0;\nloop invariant x >= 0;\nloop invariant x <= N;\nloop invariant x % 1 == 0;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant v1 % 1 == 0;\nloop invariant v2 % 1 == 0;\nloop invariant v3 % 1 == 0;\nloop invariant x >= 0;\nloop invariant x <= N;\nloop invariant x % 1 == 0;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant v1 % 1 == 0;\nloop invariant v2 % 1 == 0;\nloop invariant v3 % 1 == 0;\nloop invariant x >= 0;\nloop invariant x <= N;\nloop invariant x % 1 == 0;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant v1 % 1 == 0;\nloop invariant v2 % 1 == 0;\nloop invariant v3 % 1 == 0;\nloop invariant x >= 0;\nloop invariant x <= N;\nloop invariant x % 1 == 0;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant v1 % 1 == 0;\nloop invariant v2 % 1 == 0;\nloop invariant v3 % 1 == 0;\nloop invariant x >= 0;\nloop invariant x <= N;\nloop invariant x % 1 == 0;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant v1 % 1 == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main()\n{\n  int x, N, v1,v2,v3;\n  x = 0;\n  N = unknown_int();\n  /*@\n\nloop invariant i2: x % 1 == 0;\nloop invariant i3: v1 % 1 == 0;\nloop invariant i4: v2 % 1 == 0;\nloop invariant i5: v3 % 1 == 0;\nloop invariant i6: x >= 0;\n\n\n\n\n*/\nwhile(x < N)\n  {\n    x = x + 1;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(N < 0 || x == N);\n}\n    \n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant v1 == unknown_int() ==> v1 is non-deterministic at the end of the loop;\nloop invariant v2 == unknown_int() ==> v2 is non-deterministic at the end of the loop;\nloop invariant v3 == unknown_int() ==> v3 is non-deterministic at the end of the loop;\nloop invariant 0 <= x <= N;\nloop invariant v1 == unknown_int() ==> v1 is non-deterministic at the end of the loop;\nloop invariant v2 == unknown_int() ==> v2 is non-deterministic at the end of the loop;\nloop invariant v3 == unknown_int() ==> v3 is non-deterministic at the end of the loop;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main()\n{\n  int x, N, v1,v2,v3;\n  x = 0;\n  N = unknown_int();\n  /*@\n\n\n\n\n*/\nwhile(x < N)\n  {\n    x = x + 1;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(N < 0 || x == N);\n}\n    \n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant v1 == unknown_int();\nloop invariant v2 == unknown_int();\nloop invariant v3 == unknown_int();\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main()\n{\n  int x, N, v1,v2,v3;\n  x = 0;\n  N = unknown_int();\n  /*@\n\n\n\n\n*/\nwhile(x < N)\n  {\n    x = x + 1;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(N < 0 || x == N);\n}\n    \n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x < N;\nloop invariant x >= 0;\nloop invariant x < N;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main()\n{\n  int x, N, v1,v2,v3;\n  x = 0;\n  N = unknown_int();\n  /*@\n\nloop invariant i2: x >= 0;\n\n*/\nwhile(x < N)\n  {\n    x = x + 1;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(N < 0 || x == N);\n}\n    \n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant x >= 0;\nloop invariant x <= N;\nloop invariant v1 == unknown_int();\nloop invariant v2 == unknown_int();\nloop invariant v3 == unknown_int();\nloop invariant (x < N ==> v1 == unknown_int() && v2 == unknown_int() && v3 == unknown_int());\nloop invariant (x >= N ==> v1 == unknown_int() && v2 == unknown_int() && v3 == unknown_int());\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main()\n{\n  int x, N, v1,v2,v3;\n  x = 0;\n  N = unknown_int();\n  /*@\nloop invariant i1: x >= 0;\n\n\n\n\n\n\n*/\nwhile(x < N)\n  {\n    x = x + 1;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(N < 0 || x == N);\n}\n    \n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= N;\nloop invariant v1 >= 0;\nloop invariant v1 <= 1;\nloop invariant v2 >= 0;\nloop invariant v2 <= 1;\nloop invariant v3 >= 0;\nloop invariant v3 <= 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main()\n{\n  int x, N, v1,v2,v3;\n  x = 0;\n  N = unknown_int();\n  /*@\n\n\n\n\n\n\n\n*/\nwhile(x < N)\n  {\n    x = x + 1;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(N < 0 || x == N);\n}\n    \n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 36: Assignment operators not allowed in annotations.",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main()\n{\n  int x, N, v1,v2,v3;\n  x = 0;\n  N = unknown_int();\n  /*@\nloop invariant i1: 0 <= x <= N;\nloop invariant i2: N < 0 ==> x == N;\nloop invariant i3: N >= 0 ==> x <= N;\nloop invariant i4: x <= N ==> x == N;\nloop invariant i5: x <= N ==> x >= 0;\nloop invariant i6: x <= N ==> x <= N;\nloop invariant i7: x <= N ==> x < N;\nloop invariant i8: x <= N ==> x > N;\nloop invariant i9: x <= N ==> x >= N;\nloop invariant i10: v1 >= 0;\nloop invariant i11: v2 >= 0;\nloop invariant i12: v3 >= 0;\nloop invariant i13: v1 <= N;\nloop invariant i14: v2 <= N;\nloop invariant i15: v3 <= N;\nloop invariant i16: x < N ==> v1 < N;\nloop invariant i17: x < N ==> v2 < N;\nloop invariant i18: x < N ==> v3 < N;\nloop invariant i19: x >= N ==> v1 >= N;\nloop invariant i20: x >= N ==> v2 >= N;\nloop invariant i21: x >= N ==> v3 >= N;\nloop invariant i22: v1 = unknown_int();\nloop invariant i23: v2 = unknown_int();\nloop invariant i24: v3 = unknown_int();\nloop invariant i25: (x + v1 + v2 + v3) ==> (x < N);\nloop invariant i26: (x + v1 + v2 + v3) ==> (x >= 0);\nloop invariant i27: (x + v1 + v2 + v3) ==> (x <= N);\nloop invariant i28: (x + v1 + v2 + v3) ==> (N >= 0);\nloop invariant i29: (x + v1 + v2 + v3) ==> (N >= x);\nloop invariant i30: (x + v1 + v2 + v3) ==> (x >= N => x == N);\nloop invariant i31: (x + v1 + v2 + v3) ==> (v1 == unknown_int());\nloop invariant i32: (x + v1 + v2 + v3) ==> (v2 == unknown_int());\nloop invariant i33: (x + v1 + v2 + v3) ==> (v3 == unknown_int());\nloop invariant i34: (x + v1 + v2 + v3) ==> (x >= 0 => x < N);\nloop invariant i35: (x + v1 + v2 + v3) ==> (x <= N => x >= 0);\nloop invariant i36: (x + v1 + v2 + v3) ==> (N >= x => x < N);\nloop invariant i37: (x + v1 + v2 + v3) ==> (N >= x => x >= 0);\nloop invariant i38: (x + v1 + v2 + v3) ==> (x >= N ==> x == N);\nloop invariant i39: (x + v1 + v2 + v3) ==> (x >= N ==> x == N => x == N);\nloop invariant i40: (x + v1 + v2 + v3) ==> (x >= N ==> x == N => x == N => x == N);\nloop invariant i41: (x + v1 + v2 + v3) ==> (x >= N ==> x == N => x == N => x == N => x == N);\nloop invariant i42: (x + v1 + v2 + v3) ==> (x >= N ==> x == N => x == N => x == N => x == N => x == N);\nloop invariant i43: (x + v1 + v2 + v3) ==> (x >= N ==> x == N => x == N => x == N => x == N => x == N => x == N);\nloop invariant i44: (x + v1 + v2 + v3) ==> (x >= N ==> x == N => x == N => x == N => x == N => x == N => x == N => x == N);\nloop invariant i45: (x + v1 + v2 + v3) ==> (x >= N ==> x == N => x == N => x == N => x == N => x == N => x == N => x == N => x == N);\nloop invariant i46: (x + v1 + v2 + v3) ==> (x >= N ==> x == N => x == N => x == N => x == N => x == N => x == N => x == N => x == N => x == N);\nloop invariant i47: (x + v1 + v2 + v3) ==> (x >= N ==> x == N => x == N => x == N => x == N => x == N => x == N => x == N => x == N => x == N => x == N);\nloop invariant i48: (x + v1 + v2 + v3) ==> (x >= N ==> x == N => x == N => x == N => x == N => x == N => x == N => x == N => x == N => x == N => x == N => x == N);\nloop invariant i49: (x + v1 + v2 + v3) ==> (x >= N ==> x == N => x == N => x == N => x == N => x == N => x == N => x == N => x == N => x == N => x == N => x == N => x == N);\nloop invariant i50: (x + v1 + v2 + v3) ==> (x >= N ==> x == N => x == N => x == N => x == N => x == N => x == N => x == N => x == N => x == N => x == N => x == N => x == N => x == N);\nloop invariant i51: unknown_int() == v1 || unknown_int() == v2 || unknown_int() == v3;\nloop invariant i52: v1 >= 0 && v1 <= 100;\nloop invariant i53: v2 >= 0 && v2 <= 100;\nloop invariant i54: v3 >= 0 && v3 <= 100;\nloop invariant i55: x >= 0 && x <= N;\nloop invariant i56: N >= 0;\nloop invariant i57: x == N ==> unknown_int() == v1 || unknown_int() == v2 || unknown_int() == v3;\nloop invariant i58: x == N ==> v1 >= 0 && v1 <= 100;\nloop invariant i59: x == N ==> v2 >= 0 && v2 <= 100;\nloop invariant i60: x == N ==> v3 >= 0 && v3 <= 100;\nloop invariant i61: x == N ==> N >= 0;\nloop invariant i62: x == N ==> x >= 0 && x <= N;\nloop invariant i63: 0 < x < N;\nloop invariant i64: v1 < unknown_int();\nloop invariant i65: v2 < unknown_int();\nloop invariant i66: v3 < unknown_int();\nloop invariant i67: 0 <= v1;\nloop invariant i68: 0 <= v2;\nloop invariant i69: 0 <= v3;\nloop invariant i70: x >= 0;\nloop invariant i71: N >= x;\nloop invariant i72: x <= N;\nloop invariant i73: x == N ==> N < 0;\nloop invariant i74: x != N ==> x < N;\nloop invariant i75: x == N ==> x == N;\nloop invariant i76: x == 0 ==> v1 == v2 == v3;\nloop invariant i77: x < N ==> ((x >= 0) && (x <= N));\nloop invariant i78: v1 == unknown_int();\nloop invariant i79: v2 == unknown_int();\nloop invariant i80: v3 == unknown_int();\nloop invariant i81: x % 1 == 0;\nloop invariant i82: v1 % 1 == 0;\nloop invariant i83: v2 % 1 == 0;\nloop invariant i84: v3 % 1 == 0;\nloop invariant i85: v1 == unknown_int() ==> v1 is non-deterministic at the end of the loop;\nloop invariant i86: v2 == unknown_int() ==> v2 is non-deterministic at the end of the loop;\nloop invariant i87: v3 == unknown_int() ==> v3 is non-deterministic at the end of the loop;\nloop invariant i88: 0 <= x < N;\nloop invariant i89: x < N;\nloop invariant i90: (x < N ==> v1 == unknown_int() && v2 == unknown_int() && v3 == unknown_int());\nloop invariant i91: (x >= N ==> v1 == unknown_int() && v2 == unknown_int() && v3 == unknown_int());\nloop invariant i92: 1 <= x <= N;\nloop invariant i93: v1 <= 1;\nloop invariant i94: v2 <= 1;\nloop invariant i95: v3 <= 1;\n*/\nwhile(x < N)\n  {\n    x = x + 1;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(N < 0 || x == N);\n}\n    \n}",
        "combined_annotation_num_solver_calls": 45,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main()\n{\n  int x, N, v1,v2,v3;\n  x = 0;\n  N = unknown_int();\n  /*@\n\n\nloop invariant i3: N >= 0 ==> x <= N;\n\nloop invariant i5: x <= N ==> x >= 0;\nloop invariant i6: x <= N ==> x <= N;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i26: (x + v1 + v2 + v3) ==> (x >= 0);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i61: x == N ==> N >= 0;\nloop invariant i62: x == N ==> x >= 0 && x <= N;\n\n\n\n\n\n\n\nloop invariant i70: x >= 0;\n\n\n\n\nloop invariant i75: x == N ==> x == N;\n\nloop invariant i77: x < N ==> ((x >= 0) && (x <= N));\n\n\n\nloop invariant i81: x % 1 == 0;\nloop invariant i82: v1 % 1 == 0;\nloop invariant i83: v2 % 1 == 0;\nloop invariant i84: v3 % 1 == 0;\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile(x < N)\n  {\n    x = x + 1;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(N < 0 || x == N);\n}\n    \n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/split.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c"
        ],
        "skipped": [],
        "total": 86,
        "success_count": 74,
        "failure_count": 12,
        "success_rate": 0.8604651162790697
    }
}