{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(){\nint y = unknown_uint();\nint x=0;\n\n    assume(y>=0);\n\n\twhile ( x < 10000) {\n\t\ty = y + 1;\n\t\tx = x + 1;\n\t}\n\n\tif( y + x < 10000)\t\t\n\t\tgoto ERROR;\n\n\treturn 0;\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\treturn -1;\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant y + x >= 10000;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y + x >= 10000 ==> x >= y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 10000;\nloop invariant y >= 0;\nloop invariant y + x >= 0;\nloop invariant y + x <= 20000;\nloop invariant y <= 10000;\n*/\n```",
            "```\n/*@\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant x < 10000;\nloop invariant x <= y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 10000;\nloop invariant 0 <= y <= 10000;\nloop invariant x + y <= 10000;\nloop invariant x >= y - 1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x + y >= 0;\nloop invariant x >= y;\nloop invariant x + y <= 10000;\nloop invariant x >= y - 1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x + y >= 0;\nloop invariant x >= y;\nloop invariant x + y <= 10000;\nloop invariant x >= y - 1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x + y >= 0;\nloop invariant x >= y;\nloop invariant x + y <= 10000;\nloop invariant x >= y - 1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x + y >= 0;\nloop invariant x >= y;\nloop invariant x + y <= 10000;\nloop invariant x >= y - 1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x + y >= 0;\nloop invariant x >= y;\nloop invariant x + y <= 10000;\nloop invariant x >= y - 1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x + y >= 0;\nloop invariant x >= y;\nloop invariant x + y <= 10000;\nloop invariant x >= y - 1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x + y >= 0;\nloop invariant x >= y;\nloop invariant x + y <= 10000;\nloop invariant x >= y - 1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x + y >= 0;\nloop invariant x >= y;\nloop invariant x + y <= 10000;\nloop invariant x >= y - 1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x + y >= 0;\nloop invariant x >= y;\nloop invariant x + y <= 10000;\nloop invariant x >= y - 1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x + y >= 0;\nloop invariant x >= y;\nloop invariant x + y <= 10000;\nloop invariant x >= y - 1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x + y >= 0;\nloop invariant x >= y;\nloop invariant x + y <= 10000;\nloop invariant x >= y - 1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x + y >= 0;\nloop invariant x >= y;\nloop invariant x + y <= 10000;\nloop invariant x >= y - 1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x + y >= 0;\nloop invariant x >= y;\nloop invariant x + y <= 10000;\nloop invariant x >= y - 1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x + y >= 0;\nloop invariant x >= y;\nloop invariant x + y <= 10000;\nloop invariant x >= y - 1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x + y >= 0;\nloop invariant x >= y;\nloop invariant x + y <= 10000;\nloop invariant x >= y - 1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x + y >= 0;\nloop invariant x >= y;\nloop invariant x + y <= 10000;\nloop invariant x >= y - 1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x + y >= 0;\nloop invariant x >= y;\nloop invariant x + y <= 10000;\nloop invariant x >= y - 1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x + y >= 0;\nloop invariant x >= y;\nloop invariant x + y <= 10000;\nloop invariant x >= y - 1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x + y >= 0;\nloop invariant x >= y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 10000;\nloop invariant 0 <= y <= 10000;\nloop invariant (x + y) >= 10000 ==> (x >= 10000 - y);\nloop invariant (x + y) < 10000 ==> (x < 10000 - y);\n*/\n```",
            "```\n/*@\nloop invariant y >=0;\nloop invariant x >= 0;\nloop invariant x <= 10000;\nloop invariant y <= 10000;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 9999;\nloop invariant 1 <= y <= 10000;\nloop invariant y = x + 1;\nloop invariant x + y >= 10000;\nloop invariant x + y >= 10000;\nloop invariant 0 <= x <= 9999;\nloop invariant 1 <= y <= 10000;\nloop invariant y = x + 1;\nloop invariant x + y >= 10000;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 10000;\nloop invariant 0 <= y <= 10001;\nloop invariant x + y <= 10001;\nloop invariant (x == y) ==> (y == 10000);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 10000;\nloop invariant y + x >= 10000 ==> x >= 10000;\nloop invariant y + x >= 10000 ==> y >= 10000;\nloop invariant y + x < 10000 ==> x < 10000;\nloop invariant y + x < 10000 ==> y < 10000;\nloop invariant y + x < 10000 ==> y + x >= 0;\nloop invariant y + x < 10000 ==> y + x < 10000;\nloop invariant y + x < 10000 ==> y >= 0;\nloop invariant y + x < 10000 ==> x >= 0;\nloop invariant y + x < 10000 ==> y + x >= 0;\nloop invariant y + x < 10000 ==> y + x < 10000;\nloop invariant y + x < 10000 ==> y >= 0;\nloop invariant y + x < 10000 ==> x >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 10000;\nloop invariant y >= 0;\nloop invariant y <= 10000;\nloop invariant x <= y;\nloop invariant y + x >= 9000;\nloop invariant y + x <= 10000;\nloop invariant x >= 0;\nloop invariant (x < 10000 ==>\\true);\nloop invariant (y < 10000 ==> x <= y);\nloop invariant (y < 10000 ==> y + x >= 9000);\nloop invariant (y < 10000 ==> y + x <= 10000);\nloop invariant (x >= 0 ==> x <= y);\nloop invariant (x >= 0 ==> y + x >= 9000);\nloop invariant (x >= 0 ==> y + x <= 10000);\nloop invariant (y >= 0 ==> y + x >= 9000);\nloop invariant (y >= 0 ==> y + x <= 10000);\nloop invariant (x < 10000 ==> (y < 10000 ==> x <= y));\nloop invariant (x < 10000 ==> (y < 10000 ==> y + x >= 9000));\nloop invariant (x < 10000 ==> (y < 10000 ==> y + x <= 10000));\nloop invariant (x < 10000 ==> (x >= 0 ==> y + x >= 9000));\nloop invariant (x < 10000 ==> (x >= 0 ==> y + x <= 10000));\nloop invariant (x < 10000 ==> (y >= 0 ==> y + x >= 9000));\nloop invariant (x < 10000 ==> (y >= 0 ==> y + x <= 10000));\nloop invariant (y < 10000 ==> (x < 10000 ==> x <= y));\nloop invariant (y < 10000 ==> (x < 10000 ==> y + x >= 9000));\nloop invariant (y < 10000 ==> (x < 10000 ==> y + x <= 10000));\nloop invariant (y < 10000 ==> (x >= 0 ==> y + x >= 9000));\nloop invariant (y < 10000 ==> (x >= 0 ==> y + x <= 10000));\nloop invariant (y < 10000 ==> (y >= 0 ==> y + x >= 9000));\nloop invariant (y < 10000 ==> (y >= 0 ==> y + x <= 10000));\nloop invariant (x >= 0 ==> (x < 10000 ==> y + x >= 9000));\nloop invariant (x >= 0 ==> (x < 10000 ==> y + x <= 10000));\nloop invariant (x >= 0 ==> (y < 10000 ==> y + x >= 9000));\nloop invariant (x >= 0 ==> (y < 10000 ==> y + x <= 10000));\nloop invariant (y >= 0 ==> (x < 10000 ==> y + x >= 9000));\nloop invariant (y >= 0 ==> (x < 10000 ==> y + x <= 10000));\nloop invariant (x < 10000 ==> (y < 10000 ==> (x >= 0 ==> y + x >= 9000)));\nloop invariant (x < 10000 ==> (y < 10000 ==> (x >= 0 ==> y + x <= 10000)));\nloop invariant (x < 10000 ==> (y < 10000 ==> (y >= 0 ==> y + x >= 9000)));\nloop invariant (x < 10000 ==> (y < 10000 ==> (y >= 0 ==> y + x <= 10000)));\n*/\n```",
            "```\n/*@\nloop invariant x >= 0;\nloop invariant x < 10000;\nloop invariant y >= 0;\nloop invariant y <= 10000;\nloop invariant x + y >= 0;\nloop invariant x + y <= 10000;\nloop invariant x + y < 10000 ==> x + y < 10000;\nloop invariant x + y >= 10000 ==> x + y >= 10000;\nloop invariant x <= 10000;\nloop invariant x < 10000 ==> x < 10000;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant y <= 10000 ==> y <= 10000;\nloop invariant y >= 0 ==> y >= 0;\nloop invariant x + y >= 0 ==> x + y >= 0;\nloop invariant x + y <= 10000 ==> x + y <= 10000;\nloop invariant x < 10000 ==> x < 10000;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant y <= 10000 ==> y <= 10000;\nloop invariant y >= 0 ==> y >= 0;\nloop invariant x + y >= 0 ==> x + y >= 0;\nloop invariant x + y <= 10000 ==> x + y <= 10000;\nloop invariant x < 10000 ==> x < 10000;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant y <= 10000 ==> y <= 10000;\nloop invariant y >= 0 ==> y >= 0;\nloop invariant x + y >= 0 ==> x + y >= 0;\nloop invariant x + y <= 10000 ==> x + y <= 10000;\nloop invariant x < 10000 ==> x < 10000;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant y <= 10000 ==> y <= 10000;\nloop invariant y >= 0 ==> y >= 0;\nloop invariant x + y >= 0 ==> x + y >= 0;\nloop invariant x + y <= 10000 ==> x + y <= 10000;\nloop invariant x < 10000 ==> x < 10000;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant y <= 10000 ==> y <= 10000;\nloop invariant y >= 0 ==> y >= 0;\nloop invariant x + y >= 0 ==> x + y >= 0;\nloop invariant x + y <= 10000 ==> x + y <= 10000;\nloop invariant x < 10000 ==> x < 10000;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant y <= 10000 ==> y <= 10000;\nloop invariant y >= 0 ==> y >= 0;\nloop invariant x + y >= 0 ==> x + y >= 0;\nloop invariant x + y <= 10000 ==> x + y <= 10000;\nloop invariant x < 10000 ==> x < 10000;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant y <= 10000 ==> y <= 10000;\nloop invariant y >= 0 ==> y >= 0;\nloop invariant x + y >= 0 ==> x + y >= 0;\nloop invariant x + y <= 10000 ==> x + y <= 10000;\nloop invariant x < 10000 ==> x < 10000;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant y <= 10000 ==> y <= 10000;\nloop invariant y >= 0 ==> y >= 0;\nloop invariant x + y >= 0 ==> x + y >= 0;\nloop invariant x + y <= 10000 ==> x + y <= 10000;\nloop invariant x < 10000 ==> x < 10000;\nloop invariant x >= 0 ==> x >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 10000;\nloop invariant x = 1 + y;\nloop invariant x < 10000;\nloop invariant y < 10000;\nloop invariant x + y < 10000;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 10000;\nloop invariant 0 <= y <= 10000;\nloop invariant x + y == 10000;\nloop invariant x + y <= 20000;\nloop invariant x <= y;\nloop invariant x + y + x >= 10000;\nloop invariant x + y + x <= 20000;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 10000;\nloop invariant y >= x;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 10000;\nloop invariant y >= 0;\nloop invariant y <= x;\nloop invariant y + x >= 10000;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant y + x >= 10000;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y + x >= 10000 ==> x >= y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(){\nint y = unknown_uint();\nint x=0;\n\n    assume(y>=0);\n\n\t/*@\n\n\n\nloop invariant i4: y >= 0;\nloop invariant i5: x >= 0;\n\n*/\nwhile ( x < 10000) {\n\t\ty = y + 1;\n\t\tx = x + 1;\n\t}\n\n\tif( y + x < 10000)\t\t\n\t\tgoto ERROR;\n\n\treturn 0;\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 10000;\nloop invariant y >= 0;\nloop invariant y + x >= 0;\nloop invariant y + x <= 20000;\nloop invariant y <= 10000;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(){\nint y = unknown_uint();\nint x=0;\n\n    assume(y>=0);\n\n\t/*@\nloop invariant i1: 0 <= x <= 10000;\nloop invariant i2: y >= 0;\nloop invariant i3: y + x >= 0;\n\n\n*/\nwhile ( x < 10000) {\n\t\ty = y + 1;\n\t\tx = x + 1;\n\t}\n\n\tif( y + x < 10000)\t\t\n\t\tgoto ERROR;\n\n\treturn 0;\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant x < 10000;\nloop invariant x <= y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(){\nint y = unknown_uint();\nint x=0;\n\n    assume(y>=0);\n\n\t/*@\nloop invariant i1: y >= 0;\nloop invariant i2: x >= 0;\n\nloop invariant i4: x <= y;\n*/\nwhile ( x < 10000) {\n\t\ty = y + 1;\n\t\tx = x + 1;\n\t}\n\n\tif( y + x < 10000)\t\t\n\t\tgoto ERROR;\n\n\treturn 0;\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 10000;\nloop invariant 0 <= y <= 10000;\nloop invariant x + y <= 10000;\nloop invariant x >= y - 1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x + y >= 0;\nloop invariant x >= y;\nloop invariant x + y <= 10000;\nloop invariant x >= y - 1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x + y >= 0;\nloop invariant x >= y;\nloop invariant x + y <= 10000;\nloop invariant x >= y - 1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x + y >= 0;\nloop invariant x >= y;\nloop invariant x + y <= 10000;\nloop invariant x >= y - 1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x + y >= 0;\nloop invariant x >= y;\nloop invariant x + y <= 10000;\nloop invariant x >= y - 1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x + y >= 0;\nloop invariant x >= y;\nloop invariant x + y <= 10000;\nloop invariant x >= y - 1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x + y >= 0;\nloop invariant x >= y;\nloop invariant x + y <= 10000;\nloop invariant x >= y - 1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x + y >= 0;\nloop invariant x >= y;\nloop invariant x + y <= 10000;\nloop invariant x >= y - 1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x + y >= 0;\nloop invariant x >= y;\nloop invariant x + y <= 10000;\nloop invariant x >= y - 1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x + y >= 0;\nloop invariant x >= y;\nloop invariant x + y <= 10000;\nloop invariant x >= y - 1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x + y >= 0;\nloop invariant x >= y;\nloop invariant x + y <= 10000;\nloop invariant x >= y - 1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x + y >= 0;\nloop invariant x >= y;\nloop invariant x + y <= 10000;\nloop invariant x >= y - 1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x + y >= 0;\nloop invariant x >= y;\nloop invariant x + y <= 10000;\nloop invariant x >= y - 1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x + y >= 0;\nloop invariant x >= y;\nloop invariant x + y <= 10000;\nloop invariant x >= y - 1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x + y >= 0;\nloop invariant x >= y;\nloop invariant x + y <= 10000;\nloop invariant x >= y - 1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x + y >= 0;\nloop invariant x >= y;\nloop invariant x + y <= 10000;\nloop invariant x >= y - 1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x + y >= 0;\nloop invariant x >= y;\nloop invariant x + y <= 10000;\nloop invariant x >= y - 1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x + y >= 0;\nloop invariant x >= y;\nloop invariant x + y <= 10000;\nloop invariant x >= y - 1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x + y >= 0;\nloop invariant x >= y;\nloop invariant x + y <= 10000;\nloop invariant x >= y - 1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x + y >= 0;\nloop invariant x >= y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(){\nint y = unknown_uint();\nint x=0;\n\n    assume(y>=0);\n\n\t/*@\nloop invariant i1: 0 <= x <= 10000;\n\n\n\nloop invariant i5: x >= 0;\nloop invariant i6: y >= 0;\nloop invariant i7: x + y >= 0;\n\n*/\nwhile ( x < 10000) {\n\t\ty = y + 1;\n\t\tx = x + 1;\n\t}\n\n\tif( y + x < 10000)\t\t\n\t\tgoto ERROR;\n\n\treturn 0;\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 10000;\nloop invariant 0 <= y <= 10000;\nloop invariant (x + y) >= 10000 ==> (x >= 10000 - y);\nloop invariant (x + y) < 10000 ==> (x < 10000 - y);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(){\nint y = unknown_uint();\nint x=0;\n\n    assume(y>=0);\n\n\t/*@\nloop invariant i1: 0 <= x <= 10000;\n\nloop invariant i3: (x + y) >= 10000 ==> (x >= 10000 - y);\nloop invariant i4: (x + y) < 10000 ==> (x < 10000 - y);\n*/\nwhile ( x < 10000) {\n\t\ty = y + 1;\n\t\tx = x + 1;\n\t}\n\n\tif( y + x < 10000)\t\t\n\t\tgoto ERROR;\n\n\treturn 0;\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant y >=0;\nloop invariant x >= 0;\nloop invariant x <= 10000;\nloop invariant y <= 10000;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(){\nint y = unknown_uint();\nint x=0;\n\n    assume(y>=0);\n\n\t/*@\nloop invariant i1: y >=0;\nloop invariant i2: x >= 0;\nloop invariant i3: x <= 10000;\n\n*/\nwhile ( x < 10000) {\n\t\ty = y + 1;\n\t\tx = x + 1;\n\t}\n\n\tif( y + x < 10000)\t\t\n\t\tgoto ERROR;\n\n\treturn 0;\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 9999;\nloop invariant 1 <= y <= 10000;\nloop invariant y = x + 1;\nloop invariant x + y >= 10000;\nloop invariant x + y >= 10000;\nloop invariant 0 <= x <= 9999;\nloop invariant 1 <= y <= 10000;\nloop invariant y = x + 1;\nloop invariant x + y >= 10000;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(){\nint y = unknown_uint();\nint x=0;\n\n    assume(y>=0);\n\n\t/*@\n\n\n\n\n*/\nwhile ( x < 10000) {\n\t\ty = y + 1;\n\t\tx = x + 1;\n\t}\n\n\tif( y + x < 10000)\t\t\n\t\tgoto ERROR;\n\n\treturn 0;\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 10000;\nloop invariant 0 <= y <= 10001;\nloop invariant x + y <= 10001;\nloop invariant (x == y) ==> (y == 10000);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(){\nint y = unknown_uint();\nint x=0;\n\n    assume(y>=0);\n\n\t/*@\nloop invariant i1: 0 <= x <= 10000;\n\n\n\n*/\nwhile ( x < 10000) {\n\t\ty = y + 1;\n\t\tx = x + 1;\n\t}\n\n\tif( y + x < 10000)\t\t\n\t\tgoto ERROR;\n\n\treturn 0;\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 10000;\nloop invariant y + x >= 10000 ==> x >= 10000;\nloop invariant y + x >= 10000 ==> y >= 10000;\nloop invariant y + x < 10000 ==> x < 10000;\nloop invariant y + x < 10000 ==> y < 10000;\nloop invariant y + x < 10000 ==> y + x >= 0;\nloop invariant y + x < 10000 ==> y + x < 10000;\nloop invariant y + x < 10000 ==> y >= 0;\nloop invariant y + x < 10000 ==> x >= 0;\nloop invariant y + x < 10000 ==> y + x >= 0;\nloop invariant y + x < 10000 ==> y + x < 10000;\nloop invariant y + x < 10000 ==> y >= 0;\nloop invariant y + x < 10000 ==> x >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(){\nint y = unknown_uint();\nint x=0;\n\n    assume(y>=0);\n\n\t/*@\nloop invariant i1: 0 <= x <= 10000;\n\n\nloop invariant i4: y + x < 10000 ==> x < 10000;\nloop invariant i5: y + x < 10000 ==> y < 10000;\nloop invariant i6: y + x < 10000 ==> y + x >= 0;\nloop invariant i7: y + x < 10000 ==> y + x < 10000;\nloop invariant i8: y + x < 10000 ==> y >= 0;\nloop invariant i9: y + x < 10000 ==> x >= 0;\n*/\nwhile ( x < 10000) {\n\t\ty = y + 1;\n\t\tx = x + 1;\n\t}\n\n\tif( y + x < 10000)\t\t\n\t\tgoto ERROR;\n\n\treturn 0;\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 15,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 10000;\nloop invariant y >= 0;\nloop invariant y <= 10000;\nloop invariant x <= y;\nloop invariant y + x >= 9000;\nloop invariant y + x <= 10000;\nloop invariant x >= 0;\nloop invariant (x < 10000 ==>\\true);\nloop invariant (y < 10000 ==> x <= y);\nloop invariant (y < 10000 ==> y + x >= 9000);\nloop invariant (y < 10000 ==> y + x <= 10000);\nloop invariant (x >= 0 ==> x <= y);\nloop invariant (x >= 0 ==> y + x >= 9000);\nloop invariant (x >= 0 ==> y + x <= 10000);\nloop invariant (y >= 0 ==> y + x >= 9000);\nloop invariant (y >= 0 ==> y + x <= 10000);\nloop invariant (x < 10000 ==> (y < 10000 ==> x <= y));\nloop invariant (x < 10000 ==> (y < 10000 ==> y + x >= 9000));\nloop invariant (x < 10000 ==> (y < 10000 ==> y + x <= 10000));\nloop invariant (x < 10000 ==> (x >= 0 ==> y + x >= 9000));\nloop invariant (x < 10000 ==> (x >= 0 ==> y + x <= 10000));\nloop invariant (x < 10000 ==> (y >= 0 ==> y + x >= 9000));\nloop invariant (x < 10000 ==> (y >= 0 ==> y + x <= 10000));\nloop invariant (y < 10000 ==> (x < 10000 ==> x <= y));\nloop invariant (y < 10000 ==> (x < 10000 ==> y + x >= 9000));\nloop invariant (y < 10000 ==> (x < 10000 ==> y + x <= 10000));\nloop invariant (y < 10000 ==> (x >= 0 ==> y + x >= 9000));\nloop invariant (y < 10000 ==> (x >= 0 ==> y + x <= 10000));\nloop invariant (y < 10000 ==> (y >= 0 ==> y + x >= 9000));\nloop invariant (y < 10000 ==> (y >= 0 ==> y + x <= 10000));\nloop invariant (x >= 0 ==> (x < 10000 ==> y + x >= 9000));\nloop invariant (x >= 0 ==> (x < 10000 ==> y + x <= 10000));\nloop invariant (x >= 0 ==> (y < 10000 ==> y + x >= 9000));\nloop invariant (x >= 0 ==> (y < 10000 ==> y + x <= 10000));\nloop invariant (y >= 0 ==> (x < 10000 ==> y + x >= 9000));\nloop invariant (y >= 0 ==> (x < 10000 ==> y + x <= 10000));\nloop invariant (x < 10000 ==> (y < 10000 ==> (x >= 0 ==> y + x >= 9000)));\nloop invariant (x < 10000 ==> (y < 10000 ==> (x >= 0 ==> y + x <= 10000)));\nloop invariant (x < 10000 ==> (y < 10000 ==> (y >= 0 ==> y + x >= 9000)));\nloop invariant (x < 10000 ==> (y < 10000 ==> (y >= 0 ==> y + x <= 10000)));\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(){\nint y = unknown_uint();\nint x=0;\n\n    assume(y>=0);\n\n\t/*@\nloop invariant i1: 0 <= x <= 10000;\nloop invariant i2: y >= 0;\n\nloop invariant i4: x <= y;\n\n\nloop invariant i7: x >= 0;\nloop invariant i8: (x < 10000 ==>\\true);\nloop invariant i9: (y < 10000 ==> x <= y);\n\n\nloop invariant i12: (x >= 0 ==> x <= y);\n\n\n\n\nloop invariant i17: (x < 10000 ==> (y < 10000 ==> x <= y));\n\n\n\n\n\n\nloop invariant i24: (y < 10000 ==> (x < 10000 ==> x <= y));\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile ( x < 10000) {\n\t\ty = y + 1;\n\t\tx = x + 1;\n\t}\n\n\tif( y + x < 10000)\t\t\n\t\tgoto ERROR;\n\n\treturn 0;\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant x >= 0;\nloop invariant x < 10000;\nloop invariant y >= 0;\nloop invariant y <= 10000;\nloop invariant x + y >= 0;\nloop invariant x + y <= 10000;\nloop invariant x + y < 10000 ==> x + y < 10000;\nloop invariant x + y >= 10000 ==> x + y >= 10000;\nloop invariant x <= 10000;\nloop invariant x < 10000 ==> x < 10000;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant y <= 10000 ==> y <= 10000;\nloop invariant y >= 0 ==> y >= 0;\nloop invariant x + y >= 0 ==> x + y >= 0;\nloop invariant x + y <= 10000 ==> x + y <= 10000;\nloop invariant x < 10000 ==> x < 10000;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant y <= 10000 ==> y <= 10000;\nloop invariant y >= 0 ==> y >= 0;\nloop invariant x + y >= 0 ==> x + y >= 0;\nloop invariant x + y <= 10000 ==> x + y <= 10000;\nloop invariant x < 10000 ==> x < 10000;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant y <= 10000 ==> y <= 10000;\nloop invariant y >= 0 ==> y >= 0;\nloop invariant x + y >= 0 ==> x + y >= 0;\nloop invariant x + y <= 10000 ==> x + y <= 10000;\nloop invariant x < 10000 ==> x < 10000;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant y <= 10000 ==> y <= 10000;\nloop invariant y >= 0 ==> y >= 0;\nloop invariant x + y >= 0 ==> x + y >= 0;\nloop invariant x + y <= 10000 ==> x + y <= 10000;\nloop invariant x < 10000 ==> x < 10000;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant y <= 10000 ==> y <= 10000;\nloop invariant y >= 0 ==> y >= 0;\nloop invariant x + y >= 0 ==> x + y >= 0;\nloop invariant x + y <= 10000 ==> x + y <= 10000;\nloop invariant x < 10000 ==> x < 10000;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant y <= 10000 ==> y <= 10000;\nloop invariant y >= 0 ==> y >= 0;\nloop invariant x + y >= 0 ==> x + y >= 0;\nloop invariant x + y <= 10000 ==> x + y <= 10000;\nloop invariant x < 10000 ==> x < 10000;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant y <= 10000 ==> y <= 10000;\nloop invariant y >= 0 ==> y >= 0;\nloop invariant x + y >= 0 ==> x + y >= 0;\nloop invariant x + y <= 10000 ==> x + y <= 10000;\nloop invariant x < 10000 ==> x < 10000;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant y <= 10000 ==> y <= 10000;\nloop invariant y >= 0 ==> y >= 0;\nloop invariant x + y >= 0 ==> x + y >= 0;\nloop invariant x + y <= 10000 ==> x + y <= 10000;\nloop invariant x < 10000 ==> x < 10000;\nloop invariant x >= 0 ==> x >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(){\nint y = unknown_uint();\nint x=0;\n\n    assume(y>=0);\n\n\t/*@\nloop invariant i1: x >= 0;\n\nloop invariant i3: y >= 0;\n\nloop invariant i5: x + y >= 0;\n\nloop invariant i7: x + y < 10000 ==> x + y < 10000;\nloop invariant i8: x + y >= 10000 ==> x + y >= 10000;\nloop invariant i9: x <= 10000;\nloop invariant i10: x < 10000 ==> x < 10000;\nloop invariant i11: x >= 0 ==> x >= 0;\nloop invariant i12: y <= 10000 ==> y <= 10000;\nloop invariant i13: y >= 0 ==> y >= 0;\nloop invariant i14: x + y >= 0 ==> x + y >= 0;\nloop invariant i15: x + y <= 10000 ==> x + y <= 10000;\n*/\nwhile ( x < 10000) {\n\t\ty = y + 1;\n\t\tx = x + 1;\n\t}\n\n\tif( y + x < 10000)\t\t\n\t\tgoto ERROR;\n\n\treturn 0;\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 10000;\nloop invariant x = 1 + y;\nloop invariant x < 10000;\nloop invariant y < 10000;\nloop invariant x + y < 10000;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(){\nint y = unknown_uint();\nint x=0;\n\n    assume(y>=0);\n\n\t/*@\n\n\n\n\n\n*/\nwhile ( x < 10000) {\n\t\ty = y + 1;\n\t\tx = x + 1;\n\t}\n\n\tif( y + x < 10000)\t\t\n\t\tgoto ERROR;\n\n\treturn 0;\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 10000;\nloop invariant 0 <= y <= 10000;\nloop invariant x + y == 10000;\nloop invariant x + y <= 20000;\nloop invariant x <= y;\nloop invariant x + y + x >= 10000;\nloop invariant x + y + x <= 20000;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(){\nint y = unknown_uint();\nint x=0;\n\n    assume(y>=0);\n\n\t/*@\nloop invariant i1: 0 <= x <= 10000;\n\n\n\nloop invariant i5: x <= y;\n\n\n*/\nwhile ( x < 10000) {\n\t\ty = y + 1;\n\t\tx = x + 1;\n\t}\n\n\tif( y + x < 10000)\t\t\n\t\tgoto ERROR;\n\n\treturn 0;\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 10000;\nloop invariant y >= x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(){\nint y = unknown_uint();\nint x=0;\n\n    assume(y>=0);\n\n\t/*@\nloop invariant i1: 0 <= x <= 10000;\nloop invariant i2: y >= x;\n*/\nwhile ( x < 10000) {\n\t\ty = y + 1;\n\t\tx = x + 1;\n\t}\n\n\tif( y + x < 10000)\t\t\n\t\tgoto ERROR;\n\n\treturn 0;\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 10000;\nloop invariant y >= 0;\nloop invariant y <= x;\nloop invariant y + x >= 10000;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(){\nint y = unknown_uint();\nint x=0;\n\n    assume(y>=0);\n\n\t/*@\nloop invariant i1: 0 <= x <= 10000;\nloop invariant i2: y >= 0;\n\n\n*/\nwhile ( x < 10000) {\n\t\ty = y + 1;\n\t\tx = x + 1;\n\t}\n\n\tif( y + x < 10000)\t\t\n\t\tgoto ERROR;\n\n\treturn 0;\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": true
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 42: Assignment operators not allowed in annotations.",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(){\nint y = unknown_uint();\nint x=0;\n\n    assume(y>=0);\n\n\t/*@\nloop invariant i1: 0 <= y <= 100000;\nloop invariant i2: x >= (1 + (y - 1) * y / 2);\nloop invariant i3: y + x >= 10000;\nloop invariant i4: y >= 0;\nloop invariant i5: x >= 0;\nloop invariant i6: y + x >= 10000 ==> x >= y;\nloop invariant i7: 0 <= x <= 10000;\nloop invariant i8: y + x >= 0;\nloop invariant i9: y + x <= 20000;\nloop invariant i10: y <= 10000;\nloop invariant i11: x < 10000;\nloop invariant i12: x <= y;\nloop invariant i13: 0 <= y <= 10000;\nloop invariant i14: x + y <= 10000;\nloop invariant i15: x >= y - 1;\nloop invariant i16: x + y >= 0;\nloop invariant i17: x >= y;\nloop invariant i18: (x + y) >= 10000 ==> (x >= 10000 - y);\nloop invariant i19: (x + y) < 10000 ==> (x < 10000 - y);\nloop invariant i20: y >=0;\nloop invariant i21: x <= 10000;\nloop invariant i22: 0 <= x <= 9999;\nloop invariant i23: 1 <= y <= 10000;\nloop invariant i24: y = x + 1;\nloop invariant i25: x + y >= 10000;\nloop invariant i26: 0 <= y <= 10001;\nloop invariant i27: x + y <= 10001;\nloop invariant i28: (x == y) ==> (y == 10000);\nloop invariant i29: y + x >= 10000 ==> x >= 10000;\nloop invariant i30: y + x >= 10000 ==> y >= 10000;\nloop invariant i31: y + x < 10000 ==> x < 10000;\nloop invariant i32: y + x < 10000 ==> y < 10000;\nloop invariant i33: y + x < 10000 ==> y + x >= 0;\nloop invariant i34: y + x < 10000 ==> y + x < 10000;\nloop invariant i35: y + x < 10000 ==> y >= 0;\nloop invariant i36: y + x < 10000 ==> x >= 0;\nloop invariant i37: y + x >= 9000;\nloop invariant i38: y + x <= 10000;\nloop invariant i39: (x < 10000 ==>\\true);\nloop invariant i40: (y < 10000 ==> x <= y);\nloop invariant i41: (y < 10000 ==> y + x >= 9000);\nloop invariant i42: (y < 10000 ==> y + x <= 10000);\nloop invariant i43: (x >= 0 ==> x <= y);\nloop invariant i44: (x >= 0 ==> y + x >= 9000);\nloop invariant i45: (x >= 0 ==> y + x <= 10000);\nloop invariant i46: (y >= 0 ==> y + x >= 9000);\nloop invariant i47: (y >= 0 ==> y + x <= 10000);\nloop invariant i48: (x < 10000 ==> (y < 10000 ==> x <= y));\nloop invariant i49: (x < 10000 ==> (y < 10000 ==> y + x >= 9000));\nloop invariant i50: (x < 10000 ==> (y < 10000 ==> y + x <= 10000));\nloop invariant i51: (x < 10000 ==> (x >= 0 ==> y + x >= 9000));\nloop invariant i52: (x < 10000 ==> (x >= 0 ==> y + x <= 10000));\nloop invariant i53: (x < 10000 ==> (y >= 0 ==> y + x >= 9000));\nloop invariant i54: (x < 10000 ==> (y >= 0 ==> y + x <= 10000));\nloop invariant i55: (y < 10000 ==> (x < 10000 ==> x <= y));\nloop invariant i56: (y < 10000 ==> (x < 10000 ==> y + x >= 9000));\nloop invariant i57: (y < 10000 ==> (x < 10000 ==> y + x <= 10000));\nloop invariant i58: (y < 10000 ==> (x >= 0 ==> y + x >= 9000));\nloop invariant i59: (y < 10000 ==> (x >= 0 ==> y + x <= 10000));\nloop invariant i60: (y < 10000 ==> (y >= 0 ==> y + x >= 9000));\nloop invariant i61: (y < 10000 ==> (y >= 0 ==> y + x <= 10000));\nloop invariant i62: (x >= 0 ==> (x < 10000 ==> y + x >= 9000));\nloop invariant i63: (x >= 0 ==> (x < 10000 ==> y + x <= 10000));\nloop invariant i64: (x >= 0 ==> (y < 10000 ==> y + x >= 9000));\nloop invariant i65: (x >= 0 ==> (y < 10000 ==> y + x <= 10000));\nloop invariant i66: (y >= 0 ==> (x < 10000 ==> y + x >= 9000));\nloop invariant i67: (y >= 0 ==> (x < 10000 ==> y + x <= 10000));\nloop invariant i68: (x < 10000 ==> (y < 10000 ==> (x >= 0 ==> y + x >= 9000)));\nloop invariant i69: (x < 10000 ==> (y < 10000 ==> (x >= 0 ==> y + x <= 10000)));\nloop invariant i70: (x < 10000 ==> (y < 10000 ==> (y >= 0 ==> y + x >= 9000)));\nloop invariant i71: (x < 10000 ==> (y < 10000 ==> (y >= 0 ==> y + x <= 10000)));\nloop invariant i72: x + y < 10000 ==> x + y < 10000;\nloop invariant i73: x + y >= 10000 ==> x + y >= 10000;\nloop invariant i74: x < 10000 ==> x < 10000;\nloop invariant i75: x >= 0 ==> x >= 0;\nloop invariant i76: y <= 10000 ==> y <= 10000;\nloop invariant i77: y >= 0 ==> y >= 0;\nloop invariant i78: x + y >= 0 ==> x + y >= 0;\nloop invariant i79: x + y <= 10000 ==> x + y <= 10000;\nloop invariant i80: x = 1 + y;\nloop invariant i81: y < 10000;\nloop invariant i82: x + y < 10000;\nloop invariant i83: x + y == 10000;\nloop invariant i84: x + y <= 20000;\nloop invariant i85: x + y + x >= 10000;\nloop invariant i86: x + y + x <= 20000;\nloop invariant i87: y >= x;\nloop invariant i88: y <= x;\n*/\nwhile ( x < 10000) {\n\t\ty = y + 1;\n\t\tx = x + 1;\n\t}\n\n\tif( y + x < 10000)\t\t\n\t\tgoto ERROR;\n\n\treturn 0;\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\treturn -1;\n}",
        "combined_annotation_num_solver_calls": 22,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(){\nint y = unknown_uint();\nint x=0;\n\n    assume(y>=0);\n\n\t/*@\n\n\n\nloop invariant i4: y >= 0;\nloop invariant i5: x >= 0;\n\nloop invariant i7: 0 <= x <= 10000;\nloop invariant i8: y + x >= 0;\n\n\n\nloop invariant i12: x <= y;\n\n\n\nloop invariant i16: x + y >= 0;\n\nloop invariant i18: (x + y) >= 10000 ==> (x >= 10000 - y);\nloop invariant i19: (x + y) < 10000 ==> (x < 10000 - y);\nloop invariant i20: y >=0;\nloop invariant i21: x <= 10000;\n\n\n\n\n\n\n\n\n\nloop invariant i31: y + x < 10000 ==> x < 10000;\nloop invariant i32: y + x < 10000 ==> y < 10000;\nloop invariant i33: y + x < 10000 ==> y + x >= 0;\nloop invariant i34: y + x < 10000 ==> y + x < 10000;\nloop invariant i35: y + x < 10000 ==> y >= 0;\nloop invariant i36: y + x < 10000 ==> x >= 0;\n\n\nloop invariant i39: (x < 10000 ==>\\true);\nloop invariant i40: (y < 10000 ==> x <= y);\n\n\nloop invariant i43: (x >= 0 ==> x <= y);\n\n\n\n\nloop invariant i48: (x < 10000 ==> (y < 10000 ==> x <= y));\n\n\n\n\n\n\nloop invariant i55: (y < 10000 ==> (x < 10000 ==> x <= y));\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i72: x + y < 10000 ==> x + y < 10000;\nloop invariant i73: x + y >= 10000 ==> x + y >= 10000;\nloop invariant i74: x < 10000 ==> x < 10000;\nloop invariant i75: x >= 0 ==> x >= 0;\nloop invariant i76: y <= 10000 ==> y <= 10000;\nloop invariant i77: y >= 0 ==> y >= 0;\nloop invariant i78: x + y >= 0 ==> x + y >= 0;\nloop invariant i79: x + y <= 10000 ==> x + y <= 10000;\n\n\n\n\n\n\n\nloop invariant i87: y >= x;\n\n*/\nwhile ( x < 10000) {\n\t\ty = y + 1;\n\t\tx = x + 1;\n\t}\n\n\tif( y + x < 10000)\t\t\n\t\tgoto ERROR;\n\n\treturn 0;\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\treturn -1;\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c"
        ],
        "failure": [],
        "skipped": [],
        "total": 6,
        "success_count": 6,
        "failure_count": 0,
        "success_rate": 1.0
    }
}