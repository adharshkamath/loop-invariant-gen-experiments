{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main (void)\n{\n  \n  int fbuflen = unknown();\n  int fb;\n  \n  if(fbuflen >0);else goto END;\n  fb = 0;\n  while (unknown())\n  {\n    \n    if (unknown())\n      break;\n\n    if (unknown())\n      break;\n\n    {;\n//@ assert(0<=fb);\n}\n\n    {;\n//@ assert(fb<fbuflen);\n}\n\n    fb++;\n    if (fb >= fbuflen-1)\n      fb = 0;\n\n    {;\n//@ assert(0<=fb);\n}\n\n    {;\n//@ assert(fb<fbuflen);\n}\n\n    fb++;\n    if (fb >= fbuflen-1)\n      fb = 0;\n\n    {;\n//@ assert(0<=fb);\n}\n\n    {;\n//@ assert(fb<fbuflen);\n}\n\n    fb++;\n    if (fb >= fbuflen-1)\n      fb = 0;\n  }\n\n  if (fb > 0)\n  {\n    \n    {;\n//@ assert(0<=fb);\n}\n\n    {;\n//@ assert(fb<fbuflen);\n}\n\n  }\n\n END:  return 0;\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen - 1;\nloop invariant fbuflen > 0;\nloop invariant fb == 0 || fb == fbuflen - 1;\nloop invariant fb == 0 || fb == fbuflen - 2;\nloop invariant fb == 0 || fb == fbuflen - 3;\nloop invariant fb == 0 || fb == fbuflen - 4;\nloop invariant fb == 0 || fb == fbuflen - 5;\nloop invariant fb == 0 || fb == fbuflen - 6;\nloop invariant fb == 0 || fb == fbuflen - 7;\nloop invariant fb == 0 || fb == fbuflen - 8;\nloop invariant fb == 0 || fb == fbuflen - 9;\nloop invariant fb == 0 || fb == fbuflen - 10;\nloop invariant fb == 0 || fb == fbuflen - 11;\nloop invariant fb == 0 || fb == fbuflen - 12;\nloop invariant fb == 0 || fb == fbuflen - 13;\nloop invariant fb == 0 || fb == fbuflen - 14;\nloop invariant fb == 0 || fb == fbuflen - 15;\nloop invariant fb == 0 || fb == fbuflen - 16;\nloop invariant fb == 0 || fb == fbuflen - 17;\nloop invariant fb == 0 || fb == fbuflen - 18;\nloop invariant fb == 0 || fb == fbuflen - 19;\nloop invariant fb == 0 || fb == fbuflen - 20;\nloop invariant fb == 0 || fb == fbuflen - 21;\nloop invariant fb == 0 || fb == fbuflen - 22;\nloop invariant fb == 0 || fb == fbuflen - 23;\nloop invariant fb == 0 || fb == fbuflen - 24;\nloop invariant fb == 0 || fb == fbuflen - 25;\nloop invariant fb == 0 || fb == fbuflen - 26;\nloop invariant fb == 0 || fb == fbuflen - 27;\nloop invariant fb == 0 || fb == fbuflen - 28;\nloop invariant fb == 0 || fb == fbuflen - 29;\nloop invariant fb == 0 || fb == fbuflen - 30;\nloop invariant fb == 0 || fb == fbuflen - 31;\nloop invariant fb == 0 || fb == fbuflen - 32;\nloop invariant fb == 0 || fb == fbuflen - 33;\nloop invariant fb == 0 || fb == fbuflen - 34;\nloop invariant fb == 0 || fb == fbuflen - 35;\nloop invariant fb == 0 || fb == fbuflen - 36;\nloop invariant fb == 0 || fb == fbuflen - 37;\nloop invariant fb == 0 || fb == fbuflen - 38;\nloop invariant fb == 0 || fb == fbuflen - 39;\nloop invariant fb == 0 || fb == fbuflen - 40;\nloop invariant fb == 0 || fb == fbuflen - 41;\nloop invariant fb == 0 || fb == fbuflen - 42;\nloop invariant fb == 0 || fb == fbuflen - 43;\nloop invariant fb == 0 || fb == fbuflen - 44;\nloop invariant fb == 0 || fb == fbuflen - 45;\nloop invariant fb == 0 || fb == fbuflen - 46;\nloop invariant fb == 0 || fb == fbuflen - 47;\nloop invariant fb == 0 || fb == fbuflen - 48;\nloop invariant fb == 0 || fb == fbuflen - 49;\nloop invariant fb == 0 || fb == fbuflen - 50;\nloop invariant fb == 0 || fb == fbuflen - 51;\nloop invariant fb == 0 || fb == fbuflen - 52;\nloop invariant fb == 0 || fb == fbuflen - 53;\nloop invariant fb == 0 || fb == fbuflen - 54;\nloop invariant fb == 0 || fb == fbuflen - 55;\nloop invariant fb == 0 || fb == fbuflen - 56;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen - 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fbuflen;\nloop invariant fbuflen > 0;\nloop invariant fb + 1 < fbuflen;\nloop invariant fb + 2 < fbuflen;\nloop invariant fb + 3 < fbuflen;\nloop invariant fb + 4 < fbuflen;\nloop invariant fb + 5 < fbuflen;\nloop invariant fb + 6 < fbuflen;\nloop invariant fb + 7 < fbuflen;\nloop invariant fb + 8 < fbuflen;\nloop invariant fb + 9 < fbuflen;\nloop invariant fb + 10 < fbuflen;\nloop invariant fb + 11 < fbuflen;\nloop invariant fb + 12 < fbuflen;\nloop invariant fb + 13 < fbuflen;\nloop invariant fb + 14 < fbuflen;\nloop invariant fb + 15 < fbuflen;\nloop invariant fb + 16 < fbuflen;\nloop invariant fb + 17 < fbuflen;\nloop invariant fb + 18 < fbuflen;\nloop invariant fb + 19 < fbuflen;\nloop invariant fb + 20 < fbuflen;\nloop invariant fb + 21 < fbuflen;\nloop invariant fb + 22 < fbuflen;\nloop invariant fb + 23 < fbuflen;\nloop invariant fb + 24 < fbuflen;\nloop invariant fb + 25 < fbuflen;\nloop invariant fb + 26 < fbuflen;\nloop invariant fb + 27 < fbuflen;\nloop invariant fb + 28 < fbuflen;\nloop invariant fb + 29 < fbuflen;\nloop invariant fb + 30 < fbuflen;\nloop invariant fb + 31 < fbuflen;\nloop invariant fb + 32 < fbuflen;\nloop invariant fb + 33 < fbuflen;\nloop invariant fb + 34 < fbuflen;\nloop invariant fb + 35 < fbuflen;\nloop invariant fb + 36 < fbuflen;\nloop invariant fb + 37 < fbuflen;\nloop invariant fb + 38 < fbuflen;\nloop invariant fb + 39 < fbuflen;\nloop invariant fb + 40 < fbuflen;\nloop invariant fb + 41 < fbuflen;\nloop invariant fb + 42 < fbuflen;\nloop invariant fb + 43 < fbuflen;\nloop invariant fb + 44 < fbuflen;\nloop invariant fb + 45 < fbuflen;\nloop invariant fb + 46 < fbuflen;\nloop invariant fb + 47 < fbuflen;\nloop invariant fb + 48 < fbuflen;\nloop invariant fb + 49 < fbuflen;\nloop invariant fb + 50 < fbuflen;\nloop invariant fb + 51 < fbuflen;\nloop invariant fb + 52 < fbuflen;\nloop invariant fb + 53 < fbuflen;\nloop invariant fb + 54 < fbuflen;\nloop invariant fb + 55 < fbuflen;\nloop invariant fb + 56 < fbuflen;\nloop invariant fb + 57 < fbuflen;\nloop invariant fb + 58 < fbuflen;\nloop invariant fb + 59 < fbuflen;\nloop invariant fb + 60 < fbuflen;\nloop invariant fb + 61 < fbuflen;\nloop invariant fb + 62 < fbuflen;\nloop invariant fb + 63 < fbuflen;\nloop invariant fb + 64 < fbuflen;\nloop invariant fb + 65 < fbuflen;\nloop invariant fb + 66 < fbuflen;\nloop invariant fb + 67 < fbuflen;\nloop invariant fb + 68 < fbuflen;\nloop invariant fb + 69 < fbuflen;\nloop invariant fb + 70 < fbuflen;\nloop invariant fb + 71 < fbuflen;\nloop invariant fb + 72 < fbuflen;\nloop invariant fb + 73 < fbuflen;\nloop invariant fb + 74 < fbuflen;\nloop invariant fb + 75 < fbuflen;\nloop invariant fb + 76 < fbuflen;\nloop invariant fb + 77 < fbuflen;\nloop invariant fb + 78 < fbuflen;\nloop invariant fb + 79 < fbuflen;\nloop invariant fb + 80 < fbuflen;\nloop invariant fb + 81 < fbuflen;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\n*/\n```",
            "```\n/*@\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb != 0;\nloop invariant fb != fbuflen-1;\nloop invariant fb != fbuflen-2;\nloop invariant fb != fbuflen-3;\nloop invariant fb != fbuflen-4;\nloop invariant fb != fbuflen-5;\nloop invariant fb != fbuflen-6;\nloop invariant fb != fbuflen-7;\nloop invariant fb != fbuflen-8;\nloop invariant fb != fbuflen-9;\nloop invariant fb != fbuflen-10;\nloop invariant fb != fbuflen-11;\nloop invariant fb != fbuflen-12;\nloop invariant fb != fbuflen-13;\nloop invariant fb != fbuflen-14;\nloop invariant fb != fbuflen-15;\nloop invariant fb != fbuflen-16;\nloop invariant fb != fbuflen-17;\nloop invariant fb != fbuflen-18;\nloop invariant fb != fbuflen-19;\nloop invariant fb != fbuflen-20;\nloop invariant fb != fbuflen-21;\nloop invariant fb != fbuflen-22;\nloop invariant fb != fbuflen-23;\nloop invariant fb != fbuflen-24;\nloop invariant fb != fbuflen-25;\nloop invariant fb != fbuflen-26;\nloop invariant fb != fbuflen-27;\nloop invariant fb != fbuflen-28;\nloop invariant fb != fbuflen-29;\nloop invariant fb != fbuflen-30;\nloop invariant fb != fbuflen-31;\nloop invariant fb != fbuflen-32;\nloop invariant fb != fbuflen-33;\nloop invariant fb != fbuflen-34;\nloop invariant fb != fbuflen-35;\nloop invariant fb != fbuflen-36;\nloop invariant fb != fbuflen-37;\nloop invariant fb != fbuflen-38;\nloop invariant fb != fbuflen-39;\nloop invariant fb != fbuflen-40;\nloop invariant fb != fbuflen-41;\nloop invariant fb != fbuflen-42;\nloop invariant fb != fbuflen-43;\nloop invariant fb != fbuflen-44;\nloop invariant fb != fbuflen-45;\nloop invariant fb != fbuflen-46;\nloop invariant fb != fbuflen-47;\nloop invariant fb != fbuflen-48;\nloop invariant fb != fbuflen-49;\nloop invariant fb != fbuflen-50;\nloop invariant fb != fbuflen-51;\nloop invariant fb != fbuflen-52;\nloop invariant fb != fbuflen-53;\nloop invariant fb != fbuflen-54;\nloop invariant fb != fbuflen-55;\nloop invariant fb != fbuflen-56;\nloop invariant fb != fbuflen-57;\nloop invariant fb != fbuflen-58;\nloop invariant fb != fbuflen-59;\nloop invariant fb != fbuflen-60;\nloop invariant fb != fbuflen-61;\nloop invariant fb != fbuflen-62;\nloop invariant fb != fbuflen-63;\nloop invariant fb != fbuflen-64;\nloop invariant fb != fbuflen-65;\nloop invariant fb != fbuflen-66;\nloop invariant fb != fbuflen-67;\nloop invariant fb != fbuflen-68;\nloop invariant fb != fbuflen-69;\nloop invariant fb != fbuflen-70;\nloop invariant fb != fbuflen-71;\nloop invariant fb != fbuflen-72;\nloop invariant fb != fbuflen-73;\nloop invariant fb != fbuflen-74;\nloop invariant fb != fbuflen-75;\nloop invariant fb != fbuflen-76;\nloop invariant fb != fbuflen-77;\nloop invariant fb != fbuflen-78;\nloop invariant fb != fbuflen-79;\nloop invariant fb != fbuflen-80;\nloop invariant fb != fbuflen-81;\nloop invariant fb != fbuflen-82;\nloop invariant fb != fbuflen-83;\nloop invariant fb != fbuflen-84;\nloop invariant fb != fbuflen-85;\nloop invariant fb != fbuflen-86;\nloop invariant fb != fbuflen-87;\nloop invariant fb != fbuflen-88;\nloop invariant fb != fbuflen-89;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= fb;\nloop invariant 0 <= fbuflen;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb + 1;\nloop invariant fb + 1 < fbuflen;\nloop invariant fb + 2 < fbuflen;\nloop invariant fb + 1 < fbuflen;\nloop invariant fb + 2 < fbuflen;\nloop invariant fb + 1 < fbuflen;\nloop invariant fb + 2 < fbuflen;\nloop invariant fb + 1 < fbuflen;\nloop invariant fb + 2 < fbuflen;\nloop invariant fb + 1 < fbuflen;\nloop invariant fb + 2 < fbuflen;\nloop invariant fb + 1 < fbuflen;\nloop invariant fb + 2 < fbuflen;\nloop invariant fb + 1 < fbuflen;\nloop invariant fb + 2 < fbuflen;\nloop invariant fb + 1 < fbuflen;\nloop invariant fb + 2 < fbuflen;\nloop invariant fb + 1 < fbuflen;\nloop invariant fb + 2 < fbuflen;\nloop invariant fb + 1 < fbuflen;\nloop invariant fb + 2 < fbuflen;\nloop invariant fb + 1 < fbuflen;\nloop invariant fb + 2 < fbuflen;\nloop invariant fb + 1 < fbuflen;\nloop invariant fb + 2 < fbuflen;\nloop invariant fb + 1 < fbuflen;\nloop invariant fb + 2 < fbuflen;\nloop invariant fb + 1 < fbuflen;\nloop invariant fb + 2 < fbuflen;\nloop invariant fb + 1 < fbuflen;\nloop invariant fb + 2 < fbuflen;\nloop invariant fb + 1 < fbuflen;\nloop invariant fb + 2 < fbuflen;\nloop invariant fb + 1 < fbuflen;\nloop invariant fb + 2 < fbuflen;\nloop invariant fb + 1 < fbuflen;\nloop invariant fb + 2 < fbuflen;\nloop invariant fb + 1 < fbuflen;\nloop invariant fb + 2 < fbuflen;\nloop invariant fb + 1 < fbuflen;\nloop invariant fb + 2 < fbuflen;\nloop invariant fb + 1 < fbuflen;\nloop invariant fb + 2 < fbuflen;\nloop invariant fb + 1 < fbuflen;\nloop invariant fb + 2 < fbuflen;\nloop invariant fb + 1 < fbuflen;\nloop invariant fb + 2 < fbuflen;\nloop invariant fb + 1 < fbuflen;\nloop invariant fb + 2 < fbuflen;\nloop invariant fb + 1 < fbuflen;\nloop invariant fb + 2 < fbuflen;\nloop invariant fb + 1 < fbuflen;\nloop invariant fb + 2 < fbuflen;\nloop invariant fb + 1 < fbuflen;\nloop invariant fb + 2 < fbuflen;\nloop invariant fb + 1 < fbuflen;\nloop invariant fb + 2 < fbuflen;\nloop invariant fb + 1 < fbuflen;\nloop invariant fb + 2 < fbuflen;\nloop invariant fb + 1 < fbuflen;\nloop invariant fb + 2 < fbuflen;\nloop invariant fb + 1 < fbuflen;\nloop invariant fb + 2 < fbuflen;\nloop invariant fb + 1 < fbuflen;\nloop invariant fb + 2 < fbuflen;\nloop invariant fb + 1 < fbuflen;\nloop invariant fb + 2 < fbuflen;\nloop invariant fb + 1 < fbuflen;\nloop invariant fb + 2 < fbuflen;\nloop invariant fb + 1 < fbuflen;\nloop invariant fb + 2 < fbuflen;\nloop invariant fb + 1 < fbuflen;\nloop invariant fb + 2 < fbuflen;\nloop invariant fb + 1 < fbuflen;\nloop invariant fb + 2 < fbuflen;\nloop invariant fb + 1 < fbuflen;\nloop invariant fb + 2 < fbuflen;\nloop invariant fb + 1 < fbuflen;\nloop invariant fb + 2 < fbuflen;\nloop invariant fb + 1 < fbuflen;\nloop invariant fb + 2 < fbuflen;\nloop invariant fb + 1 < fbuflen;\nloop invariant fb + 2 < fbuflen;\nloop invariant fb + 1 < fbuflen;\nloop invariant fb + 2 < fbuflen;\nloop invariant fb + 1 < fbuflen;\nloop invariant fb + 2 < fbuflen;\nloop invariant fb + 1 < fbuflen;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= fb ( trivially true in the initialization );\nloop invariant fb < fbuflen ( trivially true in the initialization );\nloop invariant 0 <= fb ( trivially true in the initialization );\nloop invariant fb < fbuflen ( trivially true in the initialization );\nloop invariant 0 <= fb ( trivially true in the initialization );\nloop invariant fb < fbuflen ( trivially true in the initialization );\nloop invariant 0 <= fb ( trivially true in the initialization );\nloop invariant fb < fbuflen ( trivially true in the initialization );\nloop invariant 0 <= fb ( trivially true in the initialization );\nloop invariant fb < fbuflen ( trivially true in the initialization );\nloop invariant 0 <= fb ( trivially true in the initialization );\nloop invariant fb < fbuflen ( trivially true in the initialization );\nloop invariant 0 <= fb ( trivially true in the initialization );\nloop invariant fb < fbuflen ( trivially true in the initialization );\nloop invariant 0 <= fb ( trivially true in the initialization );\nloop invariant fb < fbuflen ( trivially true in the initialization );\nloop invariant 0 <= fb ( trivially true in the initialization );\nloop invariant fb < fbuflen ( trivially true in the initialization );\nloop invariant 0 <= fb ( trivially true in the initialization );\nloop invariant fb < fbuflen ( trivially true in the initialization );\nloop invariant 0 <= fb ( trivially true in the initialization );\nloop invariant fb < fbuflen ( trivially true in the initialization );\nloop invariant 0 <= fb ( trivially true in the initialization );\nloop invariant fb < fbuflen ( trivially true in the initialization );\nloop invariant 0 <= fb ( trivially true in the initialization );\nloop invariant fb < fbuflen ( trivially true in the initialization );\nloop invariant 0 <= fb ( trivially true in the initialization );\nloop invariant fb < fbuflen ( trivially true in the initialization );\nloop invariant 0 <= fb ( trivially true in the initialization );\nloop invariant fb < fbuflen ( trivially true in the initialization );\nloop invariant 0 <= fb ( trivially true in the initialization );\nloop invariant fb < fbuflen ( trivially true in the initialization );\nloop invariant 0 <= fb ( trivially true in the initialization );\nloop invariant fb < fbuflen ( trivially true in the initialization );\nloop invariant 0 <= fb ( trivially true in the initialization );\nloop invariant fb < fbuflen ( trivially true in the initialization );\nloop invariant 0 <= fb ( trivially true in the initialization );\nloop invariant fb < fbuflen ( trivially true in the initialization );\nloop invariant 0 <= fb ( trivially true in the initialization );\nloop invariant fb < fbuflen ( trivially true in the initialization );\nloop invariant 0 <= fb ( trivially true in the initialization );\nloop invariant fb < fbuflen ( trivially true in the initialization );\nloop invariant 0 <= fb ( trivially true in the initialization );\nloop invariant fb < fbuflen ( trivially true in the initialization );\nloop invariant 0 <= fb ( trivially true in the initialization );\nloop invariant fb < fbuflen ( trivially true in the initialization );\nloop invariant 0 <= fb ( trivially true in the initialization );\nloop invariant fb < fbuflen ( trivially true in the initialization );\nloop invariant 0 <= fb ( trivially true in the initialization );\nloop invariant fb < fbuflen ( trivially true in the initialization );\nloop invariant 0 <= fb ( trivially true in the initialization );\nloop invariant fb < fbuflen ( trivially true in the initialization );\nloop invariant 0 <= fb ( trivially true in the initialization );\nloop invariant fb < fbuflen ( trivially true in the initialization );\nloop invariant 0 <= fb ( trivially true in the initialization );\nloop invariant fb < fbuflen ( trivially true in the initialization );\nloop invariant 0 <= fb ( trivially true in the initialization );\nloop invariant fb < fbuflen ( trivially true in the initialization );\nloop invariant 0 <= fb ( trivially true in the initialization );\nloop invariant fb < fbuflen ( trivially true in the initialization );\nloop invariant 0 <= fb ( trivially true in the initialization );\nloop invariant fb < fbuflen ( trivially true in the initialization );\nloop invariant 0 <= fb ( trivially true in the initialization );\nloop invariant fb < fbuflen ( trivially true in the initialization );\nloop invariant 0 <= fb ( trivially true in the initialization );\nloop invariant fb < fbuflen ( trivially true in the initialization );\nloop invariant 0 <= fb ( trivially true in the initialization );\nloop invariant fb < fbuflen ( trivially true in the initialization );\nloop invariant 0 <= fb ( trivially true in the initialization );\n*/\n```",
            "```\n/*@\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen - 1;\n*/\n```",
            "```\n/*@\nloop invariant ( fb >= 0 && fb < fbuflen );\nloop invariant ( fb >= 0 && fb < fbuflen );\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant -1 <= fb;\nloop invariant fb < fbuflen;\nloop invariant -1 <= fb;\nloop invariant fb < fbuflen;\nloop invariant -1 <= fb;\nloop invariant fb < fbuflen;\nloop invariant -1 <= fb;\nloop invariant fb < fbuflen;\nloop invariant -1 <= fb;\nloop invariant fb < fbuflen;\nloop invariant -1 <= fb;\nloop invariant fb < fbuflen;\nloop invariant -1 <= fb;\nloop invariant fb < fbuflen;\nloop invariant -1 <= fb;\nloop invariant fb < fbuflen;\nloop invariant -1 <= fb;\nloop invariant fb < fbuflen;\nloop invariant -1 <= fb;\nloop invariant fb < fbuflen;\nloop invariant -1 <= fb;\nloop invariant fb < fbuflen;\nloop invariant -1 <= fb;\nloop invariant fb < fbuflen;\nloop invariant -1 <= fb;\nloop invariant fb < fbuflen;\nloop invariant -1 <= fb;\nloop invariant fb < fbuflen;\nloop invariant -1 <= fb;\nloop invariant fb < fbuflen;\nloop invariant -1 <= fb;\nloop invariant fb < fbuflen;\nloop invariant -1 <= fb;\nloop invariant fb < fbuflen;\nloop invariant -1 <= fb;\nloop invariant fb < fbuflen;\nloop invariant -1 <= fb;\nloop invariant fb < fbuflen;\nloop invariant -1 <= fb;\nloop invariant fb < fbuflen;\nloop invariant -1 <= fb;\nloop invariant fb < fbuflen;\nloop invariant -1 <= fb;\nloop invariant fb < fbuflen;\nloop invariant -1 <= fb;\nloop invariant fb < fbuflen;\nloop invariant -1 <= fb;\nloop invariant fb < fbuflen;\nloop invariant -1 <= fb;\nloop invariant fb < fbuflen;\nloop invariant -1 <= fb;\nloop invariant fb < fbuflen;\nloop invariant -1 <= fb;\nloop invariant fb < fbuflen;\nloop invariant -1 <= fb;\nloop invariant fb < fbuflen;\nloop invariant -1 <= fb;\nloop invariant fb < fbuflen;\nloop invariant -1 <= fb;\nloop invariant fb < fbuflen;\nloop invariant -1 <= fb;\nloop invariant fb < fbuflen;\nloop invariant -1 <= fb;\nloop invariant fb < fbuflen;\nloop invariant -1 <= fb;\nloop invariant fb < fbuflen;\nloop invariant -1 <= fb;\nloop invariant fb < fbuflen;\nloop invariant -1 <= fb;\nloop invariant fb < fbuflen;\nloop invariant -1 <= fb;\nloop invariant fb < fbuflen;\nloop invariant -1 <= fb;\nloop invariant fb < fbuflen;\nloop invariant -1 <= fb;\nloop invariant fb < fbuflen;\nloop invariant -1 <= fb;\nloop invariant fb < fbuflen;\nloop invariant -1 <= fb;\nloop invariant fb < fbuflen;\nloop invariant -1 <= fb;\nloop invariant fb < fbuflen;\nloop invariant -1 <= fb;\nloop invariant fb < fbuflen;\nloop invariant -1 <= fb;\nloop invariant fb < fbuflen;\nloop invariant -1 <= fb;\nloop invariant fb < fbuflen;\nloop invariant -1 <= fb;\nloop invariant fb < fbuflen;\nloop invariant -1 <= fb;\nloop invariant fb < fbuflen;\nloop invariant -1 <= fb;\nloop invariant fb < fbuflen;\nloop invariant -1 <= fb;\nloop invariant fb < fbuflen;\nloop invariant -1 <= fb;\nloop invariant fb < fbuflen;\nloop invariant -1 <= fb;\nloop invariant fb < fbuflen;\nloop invariant -1 <= fb;\nloop invariant fb < fbuflen;\nloop invariant -1 <= fb;\nloop invariant fb < fbuflen;\nloop invariant -1 <= fb;\nloop invariant fb < fbuflen;\nloop invariant -1 <= fb;\nloop invariant fb < fbuflen;\nloop invariant -1 <= fb;\nloop invariant fb < fbuflen;\nloop invariant -1 <= fb;\nloop invariant fb < fbuflen;\nloop invariant -1 <= fb;\nloop invariant fb < fbuflen;\nloop invariant -1 <= fb;\nloop invariant fb < fbuflen;\nloop invariant -1 <= fb;\nloop invariant fb < fbuflen;\nloop invariant -1 <= fb;\nloop invariant fb < fbuflen;\nloop invariant -1 <= fb;\nloop invariant fb < fbuflen;\nloop invariant -1 <= fb;\nloop invariant fb < fbuflen;\nloop invariant -1 <= fb;\nloop invariant fb < fbuflen;\nloop invariant -1 <= fb;\nloop invariant fb < fbuflen;\nloop invariant -1 <= fb;\nloop invariant fb < fbuflen;\nloop invariant -1 <= fb;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 29,
                "annotations": "```\n/*@\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen - 1;\nloop invariant fbuflen > 0;\nloop invariant fb == 0 || fb == fbuflen - 1;\nloop invariant fb == 0 || fb == fbuflen - 2;\nloop invariant fb == 0 || fb == fbuflen - 3;\nloop invariant fb == 0 || fb == fbuflen - 4;\nloop invariant fb == 0 || fb == fbuflen - 5;\nloop invariant fb == 0 || fb == fbuflen - 6;\nloop invariant fb == 0 || fb == fbuflen - 7;\nloop invariant fb == 0 || fb == fbuflen - 8;\nloop invariant fb == 0 || fb == fbuflen - 9;\nloop invariant fb == 0 || fb == fbuflen - 10;\nloop invariant fb == 0 || fb == fbuflen - 11;\nloop invariant fb == 0 || fb == fbuflen - 12;\nloop invariant fb == 0 || fb == fbuflen - 13;\nloop invariant fb == 0 || fb == fbuflen - 14;\nloop invariant fb == 0 || fb == fbuflen - 15;\nloop invariant fb == 0 || fb == fbuflen - 16;\nloop invariant fb == 0 || fb == fbuflen - 17;\nloop invariant fb == 0 || fb == fbuflen - 18;\nloop invariant fb == 0 || fb == fbuflen - 19;\nloop invariant fb == 0 || fb == fbuflen - 20;\nloop invariant fb == 0 || fb == fbuflen - 21;\nloop invariant fb == 0 || fb == fbuflen - 22;\nloop invariant fb == 0 || fb == fbuflen - 23;\nloop invariant fb == 0 || fb == fbuflen - 24;\nloop invariant fb == 0 || fb == fbuflen - 25;\nloop invariant fb == 0 || fb == fbuflen - 26;\nloop invariant fb == 0 || fb == fbuflen - 27;\nloop invariant fb == 0 || fb == fbuflen - 28;\nloop invariant fb == 0 || fb == fbuflen - 29;\nloop invariant fb == 0 || fb == fbuflen - 30;\nloop invariant fb == 0 || fb == fbuflen - 31;\nloop invariant fb == 0 || fb == fbuflen - 32;\nloop invariant fb == 0 || fb == fbuflen - 33;\nloop invariant fb == 0 || fb == fbuflen - 34;\nloop invariant fb == 0 || fb == fbuflen - 35;\nloop invariant fb == 0 || fb == fbuflen - 36;\nloop invariant fb == 0 || fb == fbuflen - 37;\nloop invariant fb == 0 || fb == fbuflen - 38;\nloop invariant fb == 0 || fb == fbuflen - 39;\nloop invariant fb == 0 || fb == fbuflen - 40;\nloop invariant fb == 0 || fb == fbuflen - 41;\nloop invariant fb == 0 || fb == fbuflen - 42;\nloop invariant fb == 0 || fb == fbuflen - 43;\nloop invariant fb == 0 || fb == fbuflen - 44;\nloop invariant fb == 0 || fb == fbuflen - 45;\nloop invariant fb == 0 || fb == fbuflen - 46;\nloop invariant fb == 0 || fb == fbuflen - 47;\nloop invariant fb == 0 || fb == fbuflen - 48;\nloop invariant fb == 0 || fb == fbuflen - 49;\nloop invariant fb == 0 || fb == fbuflen - 50;\nloop invariant fb == 0 || fb == fbuflen - 51;\nloop invariant fb == 0 || fb == fbuflen - 52;\nloop invariant fb == 0 || fb == fbuflen - 53;\nloop invariant fb == 0 || fb == fbuflen - 54;\nloop invariant fb == 0 || fb == fbuflen - 55;\nloop invariant fb == 0 || fb == fbuflen - 56;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main (void)\n{\n  \n  int fbuflen = unknown();\n  int fb;\n  \n  if(fbuflen >0);else goto END;\n  fb = 0;\n  /*@\nloop invariant i1: 0 <= fb;\nloop invariant i2: fb < fbuflen;\nloop invariant i3: fb >= 0;\n\nloop invariant i5: fbuflen > 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown())\n  {\n    \n    if (unknown())\n      break;\n\n    if (unknown())\n      break;\n\n    {;\n//@ assert(0<=fb);\n}\n\n    {;\n//@ assert(fb<fbuflen);\n}\n\n    fb++;\n    if (fb >= fbuflen-1)\n      fb = 0;\n\n    {;\n//@ assert(0<=fb);\n}\n\n    {;\n//@ assert(fb<fbuflen);\n}\n\n    fb++;\n    if (fb >= fbuflen-1)\n      fb = 0;\n\n    {;\n//@ assert(0<=fb);\n}\n\n    {;\n//@ assert(fb<fbuflen);\n}\n\n    fb++;\n    if (fb >= fbuflen-1)\n      fb = 0;\n  }\n\n  if (fb > 0)\n  {\n    \n    {;\n//@ assert(0<=fb);\n}\n\n    {;\n//@ assert(fb<fbuflen);\n}\n\n  }\n\n END:  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen - 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main (void)\n{\n  \n  int fbuflen = unknown();\n  int fb;\n  \n  if(fbuflen >0);else goto END;\n  fb = 0;\n  /*@\nloop invariant i1: 0 <= fb;\nloop invariant i2: fb < fbuflen;\nloop invariant i3: fb >= 0;\n\n*/\nwhile (unknown())\n  {\n    \n    if (unknown())\n      break;\n\n    if (unknown())\n      break;\n\n    {;\n//@ assert(0<=fb);\n}\n\n    {;\n//@ assert(fb<fbuflen);\n}\n\n    fb++;\n    if (fb >= fbuflen-1)\n      fb = 0;\n\n    {;\n//@ assert(0<=fb);\n}\n\n    {;\n//@ assert(fb<fbuflen);\n}\n\n    fb++;\n    if (fb >= fbuflen-1)\n      fb = 0;\n\n    {;\n//@ assert(0<=fb);\n}\n\n    {;\n//@ assert(fb<fbuflen);\n}\n\n    fb++;\n    if (fb >= fbuflen-1)\n      fb = 0;\n  }\n\n  if (fb > 0)\n  {\n    \n    {;\n//@ assert(0<=fb);\n}\n\n    {;\n//@ assert(fb<fbuflen);\n}\n\n  }\n\n END:  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fbuflen;\nloop invariant fbuflen > 0;\nloop invariant fb + 1 < fbuflen;\nloop invariant fb + 2 < fbuflen;\nloop invariant fb + 3 < fbuflen;\nloop invariant fb + 4 < fbuflen;\nloop invariant fb + 5 < fbuflen;\nloop invariant fb + 6 < fbuflen;\nloop invariant fb + 7 < fbuflen;\nloop invariant fb + 8 < fbuflen;\nloop invariant fb + 9 < fbuflen;\nloop invariant fb + 10 < fbuflen;\nloop invariant fb + 11 < fbuflen;\nloop invariant fb + 12 < fbuflen;\nloop invariant fb + 13 < fbuflen;\nloop invariant fb + 14 < fbuflen;\nloop invariant fb + 15 < fbuflen;\nloop invariant fb + 16 < fbuflen;\nloop invariant fb + 17 < fbuflen;\nloop invariant fb + 18 < fbuflen;\nloop invariant fb + 19 < fbuflen;\nloop invariant fb + 20 < fbuflen;\nloop invariant fb + 21 < fbuflen;\nloop invariant fb + 22 < fbuflen;\nloop invariant fb + 23 < fbuflen;\nloop invariant fb + 24 < fbuflen;\nloop invariant fb + 25 < fbuflen;\nloop invariant fb + 26 < fbuflen;\nloop invariant fb + 27 < fbuflen;\nloop invariant fb + 28 < fbuflen;\nloop invariant fb + 29 < fbuflen;\nloop invariant fb + 30 < fbuflen;\nloop invariant fb + 31 < fbuflen;\nloop invariant fb + 32 < fbuflen;\nloop invariant fb + 33 < fbuflen;\nloop invariant fb + 34 < fbuflen;\nloop invariant fb + 35 < fbuflen;\nloop invariant fb + 36 < fbuflen;\nloop invariant fb + 37 < fbuflen;\nloop invariant fb + 38 < fbuflen;\nloop invariant fb + 39 < fbuflen;\nloop invariant fb + 40 < fbuflen;\nloop invariant fb + 41 < fbuflen;\nloop invariant fb + 42 < fbuflen;\nloop invariant fb + 43 < fbuflen;\nloop invariant fb + 44 < fbuflen;\nloop invariant fb + 45 < fbuflen;\nloop invariant fb + 46 < fbuflen;\nloop invariant fb + 47 < fbuflen;\nloop invariant fb + 48 < fbuflen;\nloop invariant fb + 49 < fbuflen;\nloop invariant fb + 50 < fbuflen;\nloop invariant fb + 51 < fbuflen;\nloop invariant fb + 52 < fbuflen;\nloop invariant fb + 53 < fbuflen;\nloop invariant fb + 54 < fbuflen;\nloop invariant fb + 55 < fbuflen;\nloop invariant fb + 56 < fbuflen;\nloop invariant fb + 57 < fbuflen;\nloop invariant fb + 58 < fbuflen;\nloop invariant fb + 59 < fbuflen;\nloop invariant fb + 60 < fbuflen;\nloop invariant fb + 61 < fbuflen;\nloop invariant fb + 62 < fbuflen;\nloop invariant fb + 63 < fbuflen;\nloop invariant fb + 64 < fbuflen;\nloop invariant fb + 65 < fbuflen;\nloop invariant fb + 66 < fbuflen;\nloop invariant fb + 67 < fbuflen;\nloop invariant fb + 68 < fbuflen;\nloop invariant fb + 69 < fbuflen;\nloop invariant fb + 70 < fbuflen;\nloop invariant fb + 71 < fbuflen;\nloop invariant fb + 72 < fbuflen;\nloop invariant fb + 73 < fbuflen;\nloop invariant fb + 74 < fbuflen;\nloop invariant fb + 75 < fbuflen;\nloop invariant fb + 76 < fbuflen;\nloop invariant fb + 77 < fbuflen;\nloop invariant fb + 78 < fbuflen;\nloop invariant fb + 79 < fbuflen;\nloop invariant fb + 80 < fbuflen;\nloop invariant fb + 81 < fbuflen;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main (void)\n{\n  \n  int fbuflen = unknown();\n  int fb;\n  \n  if(fbuflen >0);else goto END;\n  fb = 0;\n  /*@\nloop invariant i1: 0 <= fb;\nloop invariant i2: fb < fbuflen;\nloop invariant i3: 0 <= fbuflen;\nloop invariant i4: fbuflen > 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown())\n  {\n    \n    if (unknown())\n      break;\n\n    if (unknown())\n      break;\n\n    {;\n//@ assert(0<=fb);\n}\n\n    {;\n//@ assert(fb<fbuflen);\n}\n\n    fb++;\n    if (fb >= fbuflen-1)\n      fb = 0;\n\n    {;\n//@ assert(0<=fb);\n}\n\n    {;\n//@ assert(fb<fbuflen);\n}\n\n    fb++;\n    if (fb >= fbuflen-1)\n      fb = 0;\n\n    {;\n//@ assert(0<=fb);\n}\n\n    {;\n//@ assert(fb<fbuflen);\n}\n\n    fb++;\n    if (fb >= fbuflen-1)\n      fb = 0;\n  }\n\n  if (fb > 0)\n  {\n    \n    {;\n//@ assert(0<=fb);\n}\n\n    {;\n//@ assert(fb<fbuflen);\n}\n\n  }\n\n END:  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main (void)\n{\n  \n  int fbuflen = unknown();\n  int fb;\n  \n  if(fbuflen >0);else goto END;\n  fb = 0;\n  /*@\nloop invariant i1: 0 <= fb;\nloop invariant i2: fb < fbuflen;\n*/\nwhile (unknown())\n  {\n    \n    if (unknown())\n      break;\n\n    if (unknown())\n      break;\n\n    {;\n//@ assert(0<=fb);\n}\n\n    {;\n//@ assert(fb<fbuflen);\n}\n\n    fb++;\n    if (fb >= fbuflen-1)\n      fb = 0;\n\n    {;\n//@ assert(0<=fb);\n}\n\n    {;\n//@ assert(fb<fbuflen);\n}\n\n    fb++;\n    if (fb >= fbuflen-1)\n      fb = 0;\n\n    {;\n//@ assert(0<=fb);\n}\n\n    {;\n//@ assert(fb<fbuflen);\n}\n\n    fb++;\n    if (fb >= fbuflen-1)\n      fb = 0;\n  }\n\n  if (fb > 0)\n  {\n    \n    {;\n//@ assert(0<=fb);\n}\n\n    {;\n//@ assert(fb<fbuflen);\n}\n\n  }\n\n END:  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main (void)\n{\n  \n  int fbuflen = unknown();\n  int fb;\n  \n  if(fbuflen >0);else goto END;\n  fb = 0;\n  /*@\n\n*/\nwhile (unknown())\n  {\n    \n    if (unknown())\n      break;\n\n    if (unknown())\n      break;\n\n    {;\n//@ assert(0<=fb);\n}\n\n    {;\n//@ assert(fb<fbuflen);\n}\n\n    fb++;\n    if (fb >= fbuflen-1)\n      fb = 0;\n\n    {;\n//@ assert(0<=fb);\n}\n\n    {;\n//@ assert(fb<fbuflen);\n}\n\n    fb++;\n    if (fb >= fbuflen-1)\n      fb = 0;\n\n    {;\n//@ assert(0<=fb);\n}\n\n    {;\n//@ assert(fb<fbuflen);\n}\n\n    fb++;\n    if (fb >= fbuflen-1)\n      fb = 0;\n  }\n\n  if (fb > 0)\n  {\n    \n    {;\n//@ assert(0<=fb);\n}\n\n    {;\n//@ assert(fb<fbuflen);\n}\n\n  }\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main (void)\n{\n  \n  int fbuflen = unknown();\n  int fb;\n  \n  if(fbuflen >0);else goto END;\n  fb = 0;\n  /*@\nloop invariant i1: 0 <= fb;\nloop invariant i2: fb < fbuflen;\nloop invariant i3: fb >= 0;\n*/\nwhile (unknown())\n  {\n    \n    if (unknown())\n      break;\n\n    if (unknown())\n      break;\n\n    {;\n//@ assert(0<=fb);\n}\n\n    {;\n//@ assert(fb<fbuflen);\n}\n\n    fb++;\n    if (fb >= fbuflen-1)\n      fb = 0;\n\n    {;\n//@ assert(0<=fb);\n}\n\n    {;\n//@ assert(fb<fbuflen);\n}\n\n    fb++;\n    if (fb >= fbuflen-1)\n      fb = 0;\n\n    {;\n//@ assert(0<=fb);\n}\n\n    {;\n//@ assert(fb<fbuflen);\n}\n\n    fb++;\n    if (fb >= fbuflen-1)\n      fb = 0;\n  }\n\n  if (fb > 0)\n  {\n    \n    {;\n//@ assert(0<=fb);\n}\n\n    {;\n//@ assert(fb<fbuflen);\n}\n\n  }\n\n END:  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb != 0;\nloop invariant fb != fbuflen-1;\nloop invariant fb != fbuflen-2;\nloop invariant fb != fbuflen-3;\nloop invariant fb != fbuflen-4;\nloop invariant fb != fbuflen-5;\nloop invariant fb != fbuflen-6;\nloop invariant fb != fbuflen-7;\nloop invariant fb != fbuflen-8;\nloop invariant fb != fbuflen-9;\nloop invariant fb != fbuflen-10;\nloop invariant fb != fbuflen-11;\nloop invariant fb != fbuflen-12;\nloop invariant fb != fbuflen-13;\nloop invariant fb != fbuflen-14;\nloop invariant fb != fbuflen-15;\nloop invariant fb != fbuflen-16;\nloop invariant fb != fbuflen-17;\nloop invariant fb != fbuflen-18;\nloop invariant fb != fbuflen-19;\nloop invariant fb != fbuflen-20;\nloop invariant fb != fbuflen-21;\nloop invariant fb != fbuflen-22;\nloop invariant fb != fbuflen-23;\nloop invariant fb != fbuflen-24;\nloop invariant fb != fbuflen-25;\nloop invariant fb != fbuflen-26;\nloop invariant fb != fbuflen-27;\nloop invariant fb != fbuflen-28;\nloop invariant fb != fbuflen-29;\nloop invariant fb != fbuflen-30;\nloop invariant fb != fbuflen-31;\nloop invariant fb != fbuflen-32;\nloop invariant fb != fbuflen-33;\nloop invariant fb != fbuflen-34;\nloop invariant fb != fbuflen-35;\nloop invariant fb != fbuflen-36;\nloop invariant fb != fbuflen-37;\nloop invariant fb != fbuflen-38;\nloop invariant fb != fbuflen-39;\nloop invariant fb != fbuflen-40;\nloop invariant fb != fbuflen-41;\nloop invariant fb != fbuflen-42;\nloop invariant fb != fbuflen-43;\nloop invariant fb != fbuflen-44;\nloop invariant fb != fbuflen-45;\nloop invariant fb != fbuflen-46;\nloop invariant fb != fbuflen-47;\nloop invariant fb != fbuflen-48;\nloop invariant fb != fbuflen-49;\nloop invariant fb != fbuflen-50;\nloop invariant fb != fbuflen-51;\nloop invariant fb != fbuflen-52;\nloop invariant fb != fbuflen-53;\nloop invariant fb != fbuflen-54;\nloop invariant fb != fbuflen-55;\nloop invariant fb != fbuflen-56;\nloop invariant fb != fbuflen-57;\nloop invariant fb != fbuflen-58;\nloop invariant fb != fbuflen-59;\nloop invariant fb != fbuflen-60;\nloop invariant fb != fbuflen-61;\nloop invariant fb != fbuflen-62;\nloop invariant fb != fbuflen-63;\nloop invariant fb != fbuflen-64;\nloop invariant fb != fbuflen-65;\nloop invariant fb != fbuflen-66;\nloop invariant fb != fbuflen-67;\nloop invariant fb != fbuflen-68;\nloop invariant fb != fbuflen-69;\nloop invariant fb != fbuflen-70;\nloop invariant fb != fbuflen-71;\nloop invariant fb != fbuflen-72;\nloop invariant fb != fbuflen-73;\nloop invariant fb != fbuflen-74;\nloop invariant fb != fbuflen-75;\nloop invariant fb != fbuflen-76;\nloop invariant fb != fbuflen-77;\nloop invariant fb != fbuflen-78;\nloop invariant fb != fbuflen-79;\nloop invariant fb != fbuflen-80;\nloop invariant fb != fbuflen-81;\nloop invariant fb != fbuflen-82;\nloop invariant fb != fbuflen-83;\nloop invariant fb != fbuflen-84;\nloop invariant fb != fbuflen-85;\nloop invariant fb != fbuflen-86;\nloop invariant fb != fbuflen-87;\nloop invariant fb != fbuflen-88;\nloop invariant fb != fbuflen-89;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main (void)\n{\n  \n  int fbuflen = unknown();\n  int fb;\n  \n  if(fbuflen >0);else goto END;\n  fb = 0;\n  /*@\nloop invariant i1: fb >= 0;\nloop invariant i2: fb < fbuflen;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown())\n  {\n    \n    if (unknown())\n      break;\n\n    if (unknown())\n      break;\n\n    {;\n//@ assert(0<=fb);\n}\n\n    {;\n//@ assert(fb<fbuflen);\n}\n\n    fb++;\n    if (fb >= fbuflen-1)\n      fb = 0;\n\n    {;\n//@ assert(0<=fb);\n}\n\n    {;\n//@ assert(fb<fbuflen);\n}\n\n    fb++;\n    if (fb >= fbuflen-1)\n      fb = 0;\n\n    {;\n//@ assert(0<=fb);\n}\n\n    {;\n//@ assert(fb<fbuflen);\n}\n\n    fb++;\n    if (fb >= fbuflen-1)\n      fb = 0;\n  }\n\n  if (fb > 0)\n  {\n    \n    {;\n//@ assert(0<=fb);\n}\n\n    {;\n//@ assert(fb<fbuflen);\n}\n\n  }\n\n END:  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= fb;\nloop invariant 0 <= fbuflen;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb + 1;\nloop invariant fb + 1 < fbuflen;\nloop invariant fb + 2 < fbuflen;\nloop invariant fb + 1 < fbuflen;\nloop invariant fb + 2 < fbuflen;\nloop invariant fb + 1 < fbuflen;\nloop invariant fb + 2 < fbuflen;\nloop invariant fb + 1 < fbuflen;\nloop invariant fb + 2 < fbuflen;\nloop invariant fb + 1 < fbuflen;\nloop invariant fb + 2 < fbuflen;\nloop invariant fb + 1 < fbuflen;\nloop invariant fb + 2 < fbuflen;\nloop invariant fb + 1 < fbuflen;\nloop invariant fb + 2 < fbuflen;\nloop invariant fb + 1 < fbuflen;\nloop invariant fb + 2 < fbuflen;\nloop invariant fb + 1 < fbuflen;\nloop invariant fb + 2 < fbuflen;\nloop invariant fb + 1 < fbuflen;\nloop invariant fb + 2 < fbuflen;\nloop invariant fb + 1 < fbuflen;\nloop invariant fb + 2 < fbuflen;\nloop invariant fb + 1 < fbuflen;\nloop invariant fb + 2 < fbuflen;\nloop invariant fb + 1 < fbuflen;\nloop invariant fb + 2 < fbuflen;\nloop invariant fb + 1 < fbuflen;\nloop invariant fb + 2 < fbuflen;\nloop invariant fb + 1 < fbuflen;\nloop invariant fb + 2 < fbuflen;\nloop invariant fb + 1 < fbuflen;\nloop invariant fb + 2 < fbuflen;\nloop invariant fb + 1 < fbuflen;\nloop invariant fb + 2 < fbuflen;\nloop invariant fb + 1 < fbuflen;\nloop invariant fb + 2 < fbuflen;\nloop invariant fb + 1 < fbuflen;\nloop invariant fb + 2 < fbuflen;\nloop invariant fb + 1 < fbuflen;\nloop invariant fb + 2 < fbuflen;\nloop invariant fb + 1 < fbuflen;\nloop invariant fb + 2 < fbuflen;\nloop invariant fb + 1 < fbuflen;\nloop invariant fb + 2 < fbuflen;\nloop invariant fb + 1 < fbuflen;\nloop invariant fb + 2 < fbuflen;\nloop invariant fb + 1 < fbuflen;\nloop invariant fb + 2 < fbuflen;\nloop invariant fb + 1 < fbuflen;\nloop invariant fb + 2 < fbuflen;\nloop invariant fb + 1 < fbuflen;\nloop invariant fb + 2 < fbuflen;\nloop invariant fb + 1 < fbuflen;\nloop invariant fb + 2 < fbuflen;\nloop invariant fb + 1 < fbuflen;\nloop invariant fb + 2 < fbuflen;\nloop invariant fb + 1 < fbuflen;\nloop invariant fb + 2 < fbuflen;\nloop invariant fb + 1 < fbuflen;\nloop invariant fb + 2 < fbuflen;\nloop invariant fb + 1 < fbuflen;\nloop invariant fb + 2 < fbuflen;\nloop invariant fb + 1 < fbuflen;\nloop invariant fb + 2 < fbuflen;\nloop invariant fb + 1 < fbuflen;\nloop invariant fb + 2 < fbuflen;\nloop invariant fb + 1 < fbuflen;\nloop invariant fb + 2 < fbuflen;\nloop invariant fb + 1 < fbuflen;\nloop invariant fb + 2 < fbuflen;\nloop invariant fb + 1 < fbuflen;\nloop invariant fb + 2 < fbuflen;\nloop invariant fb + 1 < fbuflen;\nloop invariant fb + 2 < fbuflen;\nloop invariant fb + 1 < fbuflen;\nloop invariant fb + 2 < fbuflen;\nloop invariant fb + 1 < fbuflen;\nloop invariant fb + 2 < fbuflen;\nloop invariant fb + 1 < fbuflen;\nloop invariant fb + 2 < fbuflen;\nloop invariant fb + 1 < fbuflen;\nloop invariant fb + 2 < fbuflen;\nloop invariant fb + 1 < fbuflen;\nloop invariant fb + 2 < fbuflen;\nloop invariant fb + 1 < fbuflen;\nloop invariant fb + 2 < fbuflen;\nloop invariant fb + 1 < fbuflen;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main (void)\n{\n  \n  int fbuflen = unknown();\n  int fb;\n  \n  if(fbuflen >0);else goto END;\n  fb = 0;\n  /*@\nloop invariant i1: 0 <= fb;\nloop invariant i2: 0 <= fbuflen;\nloop invariant i3: fb < fbuflen;\nloop invariant i4: 0 <= fb + 1;\n\n\n*/\nwhile (unknown())\n  {\n    \n    if (unknown())\n      break;\n\n    if (unknown())\n      break;\n\n    {;\n//@ assert(0<=fb);\n}\n\n    {;\n//@ assert(fb<fbuflen);\n}\n\n    fb++;\n    if (fb >= fbuflen-1)\n      fb = 0;\n\n    {;\n//@ assert(0<=fb);\n}\n\n    {;\n//@ assert(fb<fbuflen);\n}\n\n    fb++;\n    if (fb >= fbuflen-1)\n      fb = 0;\n\n    {;\n//@ assert(0<=fb);\n}\n\n    {;\n//@ assert(fb<fbuflen);\n}\n\n    fb++;\n    if (fb >= fbuflen-1)\n      fb = 0;\n  }\n\n  if (fb > 0)\n  {\n    \n    {;\n//@ assert(0<=fb);\n}\n\n    {;\n//@ assert(fb<fbuflen);\n}\n\n  }\n\n END:  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main (void)\n{\n  \n  int fbuflen = unknown();\n  int fb;\n  \n  if(fbuflen >0);else goto END;\n  fb = 0;\n  /*@\nloop invariant i1: 0 <= fb;\nloop invariant i2: fb < fbuflen;\n*/\nwhile (unknown())\n  {\n    \n    if (unknown())\n      break;\n\n    if (unknown())\n      break;\n\n    {;\n//@ assert(0<=fb);\n}\n\n    {;\n//@ assert(fb<fbuflen);\n}\n\n    fb++;\n    if (fb >= fbuflen-1)\n      fb = 0;\n\n    {;\n//@ assert(0<=fb);\n}\n\n    {;\n//@ assert(fb<fbuflen);\n}\n\n    fb++;\n    if (fb >= fbuflen-1)\n      fb = 0;\n\n    {;\n//@ assert(0<=fb);\n}\n\n    {;\n//@ assert(fb<fbuflen);\n}\n\n    fb++;\n    if (fb >= fbuflen-1)\n      fb = 0;\n  }\n\n  if (fb > 0)\n  {\n    \n    {;\n//@ assert(0<=fb);\n}\n\n    {;\n//@ assert(fb<fbuflen);\n}\n\n  }\n\n END:  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main (void)\n{\n  \n  int fbuflen = unknown();\n  int fb;\n  \n  if(fbuflen >0);else goto END;\n  fb = 0;\n  /*@\nloop invariant i1: 0 <= fb < fbuflen;\nloop invariant i2: fb >= 0;\nloop invariant i3: fb < fbuflen;\n*/\nwhile (unknown())\n  {\n    \n    if (unknown())\n      break;\n\n    if (unknown())\n      break;\n\n    {;\n//@ assert(0<=fb);\n}\n\n    {;\n//@ assert(fb<fbuflen);\n}\n\n    fb++;\n    if (fb >= fbuflen-1)\n      fb = 0;\n\n    {;\n//@ assert(0<=fb);\n}\n\n    {;\n//@ assert(fb<fbuflen);\n}\n\n    fb++;\n    if (fb >= fbuflen-1)\n      fb = 0;\n\n    {;\n//@ assert(0<=fb);\n}\n\n    {;\n//@ assert(fb<fbuflen);\n}\n\n    fb++;\n    if (fb >= fbuflen-1)\n      fb = 0;\n  }\n\n  if (fb > 0)\n  {\n    \n    {;\n//@ assert(0<=fb);\n}\n\n    {;\n//@ assert(fb<fbuflen);\n}\n\n  }\n\n END:  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= fb ( trivially true in the initialization );\nloop invariant fb < fbuflen ( trivially true in the initialization );\nloop invariant 0 <= fb ( trivially true in the initialization );\nloop invariant fb < fbuflen ( trivially true in the initialization );\nloop invariant 0 <= fb ( trivially true in the initialization );\nloop invariant fb < fbuflen ( trivially true in the initialization );\nloop invariant 0 <= fb ( trivially true in the initialization );\nloop invariant fb < fbuflen ( trivially true in the initialization );\nloop invariant 0 <= fb ( trivially true in the initialization );\nloop invariant fb < fbuflen ( trivially true in the initialization );\nloop invariant 0 <= fb ( trivially true in the initialization );\nloop invariant fb < fbuflen ( trivially true in the initialization );\nloop invariant 0 <= fb ( trivially true in the initialization );\nloop invariant fb < fbuflen ( trivially true in the initialization );\nloop invariant 0 <= fb ( trivially true in the initialization );\nloop invariant fb < fbuflen ( trivially true in the initialization );\nloop invariant 0 <= fb ( trivially true in the initialization );\nloop invariant fb < fbuflen ( trivially true in the initialization );\nloop invariant 0 <= fb ( trivially true in the initialization );\nloop invariant fb < fbuflen ( trivially true in the initialization );\nloop invariant 0 <= fb ( trivially true in the initialization );\nloop invariant fb < fbuflen ( trivially true in the initialization );\nloop invariant 0 <= fb ( trivially true in the initialization );\nloop invariant fb < fbuflen ( trivially true in the initialization );\nloop invariant 0 <= fb ( trivially true in the initialization );\nloop invariant fb < fbuflen ( trivially true in the initialization );\nloop invariant 0 <= fb ( trivially true in the initialization );\nloop invariant fb < fbuflen ( trivially true in the initialization );\nloop invariant 0 <= fb ( trivially true in the initialization );\nloop invariant fb < fbuflen ( trivially true in the initialization );\nloop invariant 0 <= fb ( trivially true in the initialization );\nloop invariant fb < fbuflen ( trivially true in the initialization );\nloop invariant 0 <= fb ( trivially true in the initialization );\nloop invariant fb < fbuflen ( trivially true in the initialization );\nloop invariant 0 <= fb ( trivially true in the initialization );\nloop invariant fb < fbuflen ( trivially true in the initialization );\nloop invariant 0 <= fb ( trivially true in the initialization );\nloop invariant fb < fbuflen ( trivially true in the initialization );\nloop invariant 0 <= fb ( trivially true in the initialization );\nloop invariant fb < fbuflen ( trivially true in the initialization );\nloop invariant 0 <= fb ( trivially true in the initialization );\nloop invariant fb < fbuflen ( trivially true in the initialization );\nloop invariant 0 <= fb ( trivially true in the initialization );\nloop invariant fb < fbuflen ( trivially true in the initialization );\nloop invariant 0 <= fb ( trivially true in the initialization );\nloop invariant fb < fbuflen ( trivially true in the initialization );\nloop invariant 0 <= fb ( trivially true in the initialization );\nloop invariant fb < fbuflen ( trivially true in the initialization );\nloop invariant 0 <= fb ( trivially true in the initialization );\nloop invariant fb < fbuflen ( trivially true in the initialization );\nloop invariant 0 <= fb ( trivially true in the initialization );\nloop invariant fb < fbuflen ( trivially true in the initialization );\nloop invariant 0 <= fb ( trivially true in the initialization );\nloop invariant fb < fbuflen ( trivially true in the initialization );\nloop invariant 0 <= fb ( trivially true in the initialization );\nloop invariant fb < fbuflen ( trivially true in the initialization );\nloop invariant 0 <= fb ( trivially true in the initialization );\nloop invariant fb < fbuflen ( trivially true in the initialization );\nloop invariant 0 <= fb ( trivially true in the initialization );\nloop invariant fb < fbuflen ( trivially true in the initialization );\nloop invariant 0 <= fb ( trivially true in the initialization );\nloop invariant fb < fbuflen ( trivially true in the initialization );\nloop invariant 0 <= fb ( trivially true in the initialization );\nloop invariant fb < fbuflen ( trivially true in the initialization );\nloop invariant 0 <= fb ( trivially true in the initialization );\nloop invariant fb < fbuflen ( trivially true in the initialization );\nloop invariant 0 <= fb ( trivially true in the initialization );\nloop invariant fb < fbuflen ( trivially true in the initialization );\nloop invariant 0 <= fb ( trivially true in the initialization );\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main (void)\n{\n  \n  int fbuflen = unknown();\n  int fb;\n  \n  if(fbuflen >0);else goto END;\n  fb = 0;\n  /*@\n\n\n*/\nwhile (unknown())\n  {\n    \n    if (unknown())\n      break;\n\n    if (unknown())\n      break;\n\n    {;\n//@ assert(0<=fb);\n}\n\n    {;\n//@ assert(fb<fbuflen);\n}\n\n    fb++;\n    if (fb >= fbuflen-1)\n      fb = 0;\n\n    {;\n//@ assert(0<=fb);\n}\n\n    {;\n//@ assert(fb<fbuflen);\n}\n\n    fb++;\n    if (fb >= fbuflen-1)\n      fb = 0;\n\n    {;\n//@ assert(0<=fb);\n}\n\n    {;\n//@ assert(fb<fbuflen);\n}\n\n    fb++;\n    if (fb >= fbuflen-1)\n      fb = 0;\n  }\n\n  if (fb > 0)\n  {\n    \n    {;\n//@ assert(0<=fb);\n}\n\n    {;\n//@ assert(fb<fbuflen);\n}\n\n  }\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen - 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main (void)\n{\n  \n  int fbuflen = unknown();\n  int fb;\n  \n  if(fbuflen >0);else goto END;\n  fb = 0;\n  /*@\nloop invariant i1: 0 <= fb;\nloop invariant i2: fb < fbuflen;\nloop invariant i3: fb >= 0;\n\n*/\nwhile (unknown())\n  {\n    \n    if (unknown())\n      break;\n\n    if (unknown())\n      break;\n\n    {;\n//@ assert(0<=fb);\n}\n\n    {;\n//@ assert(fb<fbuflen);\n}\n\n    fb++;\n    if (fb >= fbuflen-1)\n      fb = 0;\n\n    {;\n//@ assert(0<=fb);\n}\n\n    {;\n//@ assert(fb<fbuflen);\n}\n\n    fb++;\n    if (fb >= fbuflen-1)\n      fb = 0;\n\n    {;\n//@ assert(0<=fb);\n}\n\n    {;\n//@ assert(fb<fbuflen);\n}\n\n    fb++;\n    if (fb >= fbuflen-1)\n      fb = 0;\n  }\n\n  if (fb > 0)\n  {\n    \n    {;\n//@ assert(0<=fb);\n}\n\n    {;\n//@ assert(fb<fbuflen);\n}\n\n  }\n\n END:  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant ( fb >= 0 && fb < fbuflen );\nloop invariant ( fb >= 0 && fb < fbuflen );\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main (void)\n{\n  \n  int fbuflen = unknown();\n  int fb;\n  \n  if(fbuflen >0);else goto END;\n  fb = 0;\n  /*@\nloop invariant i1: ( fb >= 0 && fb < fbuflen );\n*/\nwhile (unknown())\n  {\n    \n    if (unknown())\n      break;\n\n    if (unknown())\n      break;\n\n    {;\n//@ assert(0<=fb);\n}\n\n    {;\n//@ assert(fb<fbuflen);\n}\n\n    fb++;\n    if (fb >= fbuflen-1)\n      fb = 0;\n\n    {;\n//@ assert(0<=fb);\n}\n\n    {;\n//@ assert(fb<fbuflen);\n}\n\n    fb++;\n    if (fb >= fbuflen-1)\n      fb = 0;\n\n    {;\n//@ assert(0<=fb);\n}\n\n    {;\n//@ assert(fb<fbuflen);\n}\n\n    fb++;\n    if (fb >= fbuflen-1)\n      fb = 0;\n  }\n\n  if (fb > 0)\n  {\n    \n    {;\n//@ assert(0<=fb);\n}\n\n    {;\n//@ assert(fb<fbuflen);\n}\n\n  }\n\n END:  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main (void)\n{\n  \n  int fbuflen = unknown();\n  int fb;\n  \n  if(fbuflen >0);else goto END;\n  fb = 0;\n  /*@\n\n*/\nwhile (unknown())\n  {\n    \n    if (unknown())\n      break;\n\n    if (unknown())\n      break;\n\n    {;\n//@ assert(0<=fb);\n}\n\n    {;\n//@ assert(fb<fbuflen);\n}\n\n    fb++;\n    if (fb >= fbuflen-1)\n      fb = 0;\n\n    {;\n//@ assert(0<=fb);\n}\n\n    {;\n//@ assert(fb<fbuflen);\n}\n\n    fb++;\n    if (fb >= fbuflen-1)\n      fb = 0;\n\n    {;\n//@ assert(0<=fb);\n}\n\n    {;\n//@ assert(fb<fbuflen);\n}\n\n    fb++;\n    if (fb >= fbuflen-1)\n      fb = 0;\n  }\n\n  if (fb > 0)\n  {\n    \n    {;\n//@ assert(0<=fb);\n}\n\n    {;\n//@ assert(fb<fbuflen);\n}\n\n  }\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant -1 <= fb;\nloop invariant fb < fbuflen;\nloop invariant -1 <= fb;\nloop invariant fb < fbuflen;\nloop invariant -1 <= fb;\nloop invariant fb < fbuflen;\nloop invariant -1 <= fb;\nloop invariant fb < fbuflen;\nloop invariant -1 <= fb;\nloop invariant fb < fbuflen;\nloop invariant -1 <= fb;\nloop invariant fb < fbuflen;\nloop invariant -1 <= fb;\nloop invariant fb < fbuflen;\nloop invariant -1 <= fb;\nloop invariant fb < fbuflen;\nloop invariant -1 <= fb;\nloop invariant fb < fbuflen;\nloop invariant -1 <= fb;\nloop invariant fb < fbuflen;\nloop invariant -1 <= fb;\nloop invariant fb < fbuflen;\nloop invariant -1 <= fb;\nloop invariant fb < fbuflen;\nloop invariant -1 <= fb;\nloop invariant fb < fbuflen;\nloop invariant -1 <= fb;\nloop invariant fb < fbuflen;\nloop invariant -1 <= fb;\nloop invariant fb < fbuflen;\nloop invariant -1 <= fb;\nloop invariant fb < fbuflen;\nloop invariant -1 <= fb;\nloop invariant fb < fbuflen;\nloop invariant -1 <= fb;\nloop invariant fb < fbuflen;\nloop invariant -1 <= fb;\nloop invariant fb < fbuflen;\nloop invariant -1 <= fb;\nloop invariant fb < fbuflen;\nloop invariant -1 <= fb;\nloop invariant fb < fbuflen;\nloop invariant -1 <= fb;\nloop invariant fb < fbuflen;\nloop invariant -1 <= fb;\nloop invariant fb < fbuflen;\nloop invariant -1 <= fb;\nloop invariant fb < fbuflen;\nloop invariant -1 <= fb;\nloop invariant fb < fbuflen;\nloop invariant -1 <= fb;\nloop invariant fb < fbuflen;\nloop invariant -1 <= fb;\nloop invariant fb < fbuflen;\nloop invariant -1 <= fb;\nloop invariant fb < fbuflen;\nloop invariant -1 <= fb;\nloop invariant fb < fbuflen;\nloop invariant -1 <= fb;\nloop invariant fb < fbuflen;\nloop invariant -1 <= fb;\nloop invariant fb < fbuflen;\nloop invariant -1 <= fb;\nloop invariant fb < fbuflen;\nloop invariant -1 <= fb;\nloop invariant fb < fbuflen;\nloop invariant -1 <= fb;\nloop invariant fb < fbuflen;\nloop invariant -1 <= fb;\nloop invariant fb < fbuflen;\nloop invariant -1 <= fb;\nloop invariant fb < fbuflen;\nloop invariant -1 <= fb;\nloop invariant fb < fbuflen;\nloop invariant -1 <= fb;\nloop invariant fb < fbuflen;\nloop invariant -1 <= fb;\nloop invariant fb < fbuflen;\nloop invariant -1 <= fb;\nloop invariant fb < fbuflen;\nloop invariant -1 <= fb;\nloop invariant fb < fbuflen;\nloop invariant -1 <= fb;\nloop invariant fb < fbuflen;\nloop invariant -1 <= fb;\nloop invariant fb < fbuflen;\nloop invariant -1 <= fb;\nloop invariant fb < fbuflen;\nloop invariant -1 <= fb;\nloop invariant fb < fbuflen;\nloop invariant -1 <= fb;\nloop invariant fb < fbuflen;\nloop invariant -1 <= fb;\nloop invariant fb < fbuflen;\nloop invariant -1 <= fb;\nloop invariant fb < fbuflen;\nloop invariant -1 <= fb;\nloop invariant fb < fbuflen;\nloop invariant -1 <= fb;\nloop invariant fb < fbuflen;\nloop invariant -1 <= fb;\nloop invariant fb < fbuflen;\nloop invariant -1 <= fb;\nloop invariant fb < fbuflen;\nloop invariant -1 <= fb;\nloop invariant fb < fbuflen;\nloop invariant -1 <= fb;\nloop invariant fb < fbuflen;\nloop invariant -1 <= fb;\nloop invariant fb < fbuflen;\nloop invariant -1 <= fb;\nloop invariant fb < fbuflen;\nloop invariant -1 <= fb;\nloop invariant fb < fbuflen;\nloop invariant -1 <= fb;\nloop invariant fb < fbuflen;\nloop invariant -1 <= fb;\nloop invariant fb < fbuflen;\nloop invariant -1 <= fb;\nloop invariant fb < fbuflen;\nloop invariant -1 <= fb;\nloop invariant fb < fbuflen;\nloop invariant -1 <= fb;\nloop invariant fb < fbuflen;\nloop invariant -1 <= fb;\nloop invariant fb < fbuflen;\nloop invariant -1 <= fb;\nloop invariant fb < fbuflen;\nloop invariant -1 <= fb;\nloop invariant fb < fbuflen;\nloop invariant -1 <= fb;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main (void)\n{\n  \n  int fbuflen = unknown();\n  int fb;\n  \n  if(fbuflen >0);else goto END;\n  fb = 0;\n  /*@\nloop invariant i1: 0 <= fb;\nloop invariant i2: fb < fbuflen;\nloop invariant i3: -1 <= fb;\n*/\nwhile (unknown())\n  {\n    \n    if (unknown())\n      break;\n\n    if (unknown())\n      break;\n\n    {;\n//@ assert(0<=fb);\n}\n\n    {;\n//@ assert(fb<fbuflen);\n}\n\n    fb++;\n    if (fb >= fbuflen-1)\n      fb = 0;\n\n    {;\n//@ assert(0<=fb);\n}\n\n    {;\n//@ assert(fb<fbuflen);\n}\n\n    fb++;\n    if (fb >= fbuflen-1)\n      fb = 0;\n\n    {;\n//@ assert(0<=fb);\n}\n\n    {;\n//@ assert(fb<fbuflen);\n}\n\n    fb++;\n    if (fb >= fbuflen-1)\n      fb = 0;\n  }\n\n  if (fb > 0)\n  {\n    \n    {;\n//@ assert(0<=fb);\n}\n\n    {;\n//@ assert(fb<fbuflen);\n}\n\n  }\n\n END:  return 0;\n}",
                "checker_output_after_prune": true
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 255: unexpected token 'true'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main (void)\n{\n  \n  int fbuflen = unknown();\n  int fb;\n  \n  if(fbuflen >0);else goto END;\n  fb = 0;\n  /*@\nloop invariant i1: 0 <= fb;\nloop invariant i2: fb < fbuflen;\nloop invariant i3: fb >= 0;\nloop invariant i4: fb < fbuflen - 1;\nloop invariant i5: fbuflen > 0;\nloop invariant i6: fb == 0 || fb == fbuflen - 1;\nloop invariant i7: fb == 0 || fb == fbuflen - 2;\nloop invariant i8: fb == 0 || fb == fbuflen - 3;\nloop invariant i9: fb == 0 || fb == fbuflen - 4;\nloop invariant i10: fb == 0 || fb == fbuflen - 5;\nloop invariant i11: fb == 0 || fb == fbuflen - 6;\nloop invariant i12: fb == 0 || fb == fbuflen - 7;\nloop invariant i13: fb == 0 || fb == fbuflen - 8;\nloop invariant i14: fb == 0 || fb == fbuflen - 9;\nloop invariant i15: fb == 0 || fb == fbuflen - 10;\nloop invariant i16: fb == 0 || fb == fbuflen - 11;\nloop invariant i17: fb == 0 || fb == fbuflen - 12;\nloop invariant i18: fb == 0 || fb == fbuflen - 13;\nloop invariant i19: fb == 0 || fb == fbuflen - 14;\nloop invariant i20: fb == 0 || fb == fbuflen - 15;\nloop invariant i21: fb == 0 || fb == fbuflen - 16;\nloop invariant i22: fb == 0 || fb == fbuflen - 17;\nloop invariant i23: fb == 0 || fb == fbuflen - 18;\nloop invariant i24: fb == 0 || fb == fbuflen - 19;\nloop invariant i25: fb == 0 || fb == fbuflen - 20;\nloop invariant i26: fb == 0 || fb == fbuflen - 21;\nloop invariant i27: fb == 0 || fb == fbuflen - 22;\nloop invariant i28: fb == 0 || fb == fbuflen - 23;\nloop invariant i29: fb == 0 || fb == fbuflen - 24;\nloop invariant i30: fb == 0 || fb == fbuflen - 25;\nloop invariant i31: fb == 0 || fb == fbuflen - 26;\nloop invariant i32: fb == 0 || fb == fbuflen - 27;\nloop invariant i33: fb == 0 || fb == fbuflen - 28;\nloop invariant i34: fb == 0 || fb == fbuflen - 29;\nloop invariant i35: fb == 0 || fb == fbuflen - 30;\nloop invariant i36: fb == 0 || fb == fbuflen - 31;\nloop invariant i37: fb == 0 || fb == fbuflen - 32;\nloop invariant i38: fb == 0 || fb == fbuflen - 33;\nloop invariant i39: fb == 0 || fb == fbuflen - 34;\nloop invariant i40: fb == 0 || fb == fbuflen - 35;\nloop invariant i41: fb == 0 || fb == fbuflen - 36;\nloop invariant i42: fb == 0 || fb == fbuflen - 37;\nloop invariant i43: fb == 0 || fb == fbuflen - 38;\nloop invariant i44: fb == 0 || fb == fbuflen - 39;\nloop invariant i45: fb == 0 || fb == fbuflen - 40;\nloop invariant i46: fb == 0 || fb == fbuflen - 41;\nloop invariant i47: fb == 0 || fb == fbuflen - 42;\nloop invariant i48: fb == 0 || fb == fbuflen - 43;\nloop invariant i49: fb == 0 || fb == fbuflen - 44;\nloop invariant i50: fb == 0 || fb == fbuflen - 45;\nloop invariant i51: fb == 0 || fb == fbuflen - 46;\nloop invariant i52: fb == 0 || fb == fbuflen - 47;\nloop invariant i53: fb == 0 || fb == fbuflen - 48;\nloop invariant i54: fb == 0 || fb == fbuflen - 49;\nloop invariant i55: fb == 0 || fb == fbuflen - 50;\nloop invariant i56: fb == 0 || fb == fbuflen - 51;\nloop invariant i57: fb == 0 || fb == fbuflen - 52;\nloop invariant i58: fb == 0 || fb == fbuflen - 53;\nloop invariant i59: fb == 0 || fb == fbuflen - 54;\nloop invariant i60: fb == 0 || fb == fbuflen - 55;\nloop invariant i61: fb == 0 || fb == fbuflen - 56;\nloop invariant i62: 0 <= fbuflen;\nloop invariant i63: fb + 1 < fbuflen;\nloop invariant i64: fb + 2 < fbuflen;\nloop invariant i65: fb + 3 < fbuflen;\nloop invariant i66: fb + 4 < fbuflen;\nloop invariant i67: fb + 5 < fbuflen;\nloop invariant i68: fb + 6 < fbuflen;\nloop invariant i69: fb + 7 < fbuflen;\nloop invariant i70: fb + 8 < fbuflen;\nloop invariant i71: fb + 9 < fbuflen;\nloop invariant i72: fb + 10 < fbuflen;\nloop invariant i73: fb + 11 < fbuflen;\nloop invariant i74: fb + 12 < fbuflen;\nloop invariant i75: fb + 13 < fbuflen;\nloop invariant i76: fb + 14 < fbuflen;\nloop invariant i77: fb + 15 < fbuflen;\nloop invariant i78: fb + 16 < fbuflen;\nloop invariant i79: fb + 17 < fbuflen;\nloop invariant i80: fb + 18 < fbuflen;\nloop invariant i81: fb + 19 < fbuflen;\nloop invariant i82: fb + 20 < fbuflen;\nloop invariant i83: fb + 21 < fbuflen;\nloop invariant i84: fb + 22 < fbuflen;\nloop invariant i85: fb + 23 < fbuflen;\nloop invariant i86: fb + 24 < fbuflen;\nloop invariant i87: fb + 25 < fbuflen;\nloop invariant i88: fb + 26 < fbuflen;\nloop invariant i89: fb + 27 < fbuflen;\nloop invariant i90: fb + 28 < fbuflen;\nloop invariant i91: fb + 29 < fbuflen;\nloop invariant i92: fb + 30 < fbuflen;\nloop invariant i93: fb + 31 < fbuflen;\nloop invariant i94: fb + 32 < fbuflen;\nloop invariant i95: fb + 33 < fbuflen;\nloop invariant i96: fb + 34 < fbuflen;\nloop invariant i97: fb + 35 < fbuflen;\nloop invariant i98: fb + 36 < fbuflen;\nloop invariant i99: fb + 37 < fbuflen;\nloop invariant i100: fb + 38 < fbuflen;\nloop invariant i101: fb + 39 < fbuflen;\nloop invariant i102: fb + 40 < fbuflen;\nloop invariant i103: fb + 41 < fbuflen;\nloop invariant i104: fb + 42 < fbuflen;\nloop invariant i105: fb + 43 < fbuflen;\nloop invariant i106: fb + 44 < fbuflen;\nloop invariant i107: fb + 45 < fbuflen;\nloop invariant i108: fb + 46 < fbuflen;\nloop invariant i109: fb + 47 < fbuflen;\nloop invariant i110: fb + 48 < fbuflen;\nloop invariant i111: fb + 49 < fbuflen;\nloop invariant i112: fb + 50 < fbuflen;\nloop invariant i113: fb + 51 < fbuflen;\nloop invariant i114: fb + 52 < fbuflen;\nloop invariant i115: fb + 53 < fbuflen;\nloop invariant i116: fb + 54 < fbuflen;\nloop invariant i117: fb + 55 < fbuflen;\nloop invariant i118: fb + 56 < fbuflen;\nloop invariant i119: fb + 57 < fbuflen;\nloop invariant i120: fb + 58 < fbuflen;\nloop invariant i121: fb + 59 < fbuflen;\nloop invariant i122: fb + 60 < fbuflen;\nloop invariant i123: fb + 61 < fbuflen;\nloop invariant i124: fb + 62 < fbuflen;\nloop invariant i125: fb + 63 < fbuflen;\nloop invariant i126: fb + 64 < fbuflen;\nloop invariant i127: fb + 65 < fbuflen;\nloop invariant i128: fb + 66 < fbuflen;\nloop invariant i129: fb + 67 < fbuflen;\nloop invariant i130: fb + 68 < fbuflen;\nloop invariant i131: fb + 69 < fbuflen;\nloop invariant i132: fb + 70 < fbuflen;\nloop invariant i133: fb + 71 < fbuflen;\nloop invariant i134: fb + 72 < fbuflen;\nloop invariant i135: fb + 73 < fbuflen;\nloop invariant i136: fb + 74 < fbuflen;\nloop invariant i137: fb + 75 < fbuflen;\nloop invariant i138: fb + 76 < fbuflen;\nloop invariant i139: fb + 77 < fbuflen;\nloop invariant i140: fb + 78 < fbuflen;\nloop invariant i141: fb + 79 < fbuflen;\nloop invariant i142: fb + 80 < fbuflen;\nloop invariant i143: fb + 81 < fbuflen;\nloop invariant i144: fb != 0;\nloop invariant i145: fb != fbuflen-1;\nloop invariant i146: fb != fbuflen-2;\nloop invariant i147: fb != fbuflen-3;\nloop invariant i148: fb != fbuflen-4;\nloop invariant i149: fb != fbuflen-5;\nloop invariant i150: fb != fbuflen-6;\nloop invariant i151: fb != fbuflen-7;\nloop invariant i152: fb != fbuflen-8;\nloop invariant i153: fb != fbuflen-9;\nloop invariant i154: fb != fbuflen-10;\nloop invariant i155: fb != fbuflen-11;\nloop invariant i156: fb != fbuflen-12;\nloop invariant i157: fb != fbuflen-13;\nloop invariant i158: fb != fbuflen-14;\nloop invariant i159: fb != fbuflen-15;\nloop invariant i160: fb != fbuflen-16;\nloop invariant i161: fb != fbuflen-17;\nloop invariant i162: fb != fbuflen-18;\nloop invariant i163: fb != fbuflen-19;\nloop invariant i164: fb != fbuflen-20;\nloop invariant i165: fb != fbuflen-21;\nloop invariant i166: fb != fbuflen-22;\nloop invariant i167: fb != fbuflen-23;\nloop invariant i168: fb != fbuflen-24;\nloop invariant i169: fb != fbuflen-25;\nloop invariant i170: fb != fbuflen-26;\nloop invariant i171: fb != fbuflen-27;\nloop invariant i172: fb != fbuflen-28;\nloop invariant i173: fb != fbuflen-29;\nloop invariant i174: fb != fbuflen-30;\nloop invariant i175: fb != fbuflen-31;\nloop invariant i176: fb != fbuflen-32;\nloop invariant i177: fb != fbuflen-33;\nloop invariant i178: fb != fbuflen-34;\nloop invariant i179: fb != fbuflen-35;\nloop invariant i180: fb != fbuflen-36;\nloop invariant i181: fb != fbuflen-37;\nloop invariant i182: fb != fbuflen-38;\nloop invariant i183: fb != fbuflen-39;\nloop invariant i184: fb != fbuflen-40;\nloop invariant i185: fb != fbuflen-41;\nloop invariant i186: fb != fbuflen-42;\nloop invariant i187: fb != fbuflen-43;\nloop invariant i188: fb != fbuflen-44;\nloop invariant i189: fb != fbuflen-45;\nloop invariant i190: fb != fbuflen-46;\nloop invariant i191: fb != fbuflen-47;\nloop invariant i192: fb != fbuflen-48;\nloop invariant i193: fb != fbuflen-49;\nloop invariant i194: fb != fbuflen-50;\nloop invariant i195: fb != fbuflen-51;\nloop invariant i196: fb != fbuflen-52;\nloop invariant i197: fb != fbuflen-53;\nloop invariant i198: fb != fbuflen-54;\nloop invariant i199: fb != fbuflen-55;\nloop invariant i200: fb != fbuflen-56;\nloop invariant i201: fb != fbuflen-57;\nloop invariant i202: fb != fbuflen-58;\nloop invariant i203: fb != fbuflen-59;\nloop invariant i204: fb != fbuflen-60;\nloop invariant i205: fb != fbuflen-61;\nloop invariant i206: fb != fbuflen-62;\nloop invariant i207: fb != fbuflen-63;\nloop invariant i208: fb != fbuflen-64;\nloop invariant i209: fb != fbuflen-65;\nloop invariant i210: fb != fbuflen-66;\nloop invariant i211: fb != fbuflen-67;\nloop invariant i212: fb != fbuflen-68;\nloop invariant i213: fb != fbuflen-69;\nloop invariant i214: fb != fbuflen-70;\nloop invariant i215: fb != fbuflen-71;\nloop invariant i216: fb != fbuflen-72;\nloop invariant i217: fb != fbuflen-73;\nloop invariant i218: fb != fbuflen-74;\nloop invariant i219: fb != fbuflen-75;\nloop invariant i220: fb != fbuflen-76;\nloop invariant i221: fb != fbuflen-77;\nloop invariant i222: fb != fbuflen-78;\nloop invariant i223: fb != fbuflen-79;\nloop invariant i224: fb != fbuflen-80;\nloop invariant i225: fb != fbuflen-81;\nloop invariant i226: fb != fbuflen-82;\nloop invariant i227: fb != fbuflen-83;\nloop invariant i228: fb != fbuflen-84;\nloop invariant i229: fb != fbuflen-85;\nloop invariant i230: fb != fbuflen-86;\nloop invariant i231: fb != fbuflen-87;\nloop invariant i232: fb != fbuflen-88;\nloop invariant i233: fb != fbuflen-89;\nloop invariant i234: 0 <= fb + 1;\nloop invariant i235: 0 <= fb < fbuflen;\nloop invariant i236: 0 <= fb ( trivially true in the initialization );\nloop invariant i237: fb < fbuflen ( trivially true in the initialization );\nloop invariant i238: ( fb >= 0 && fb < fbuflen );\nloop invariant i239: -1 <= fb;\n*/\nwhile (unknown())\n  {\n    \n    if (unknown())\n      break;\n\n    if (unknown())\n      break;\n\n    {;\n//@ assert(0<=fb);\n}\n\n    {;\n//@ assert(fb<fbuflen);\n}\n\n    fb++;\n    if (fb >= fbuflen-1)\n      fb = 0;\n\n    {;\n//@ assert(0<=fb);\n}\n\n    {;\n//@ assert(fb<fbuflen);\n}\n\n    fb++;\n    if (fb >= fbuflen-1)\n      fb = 0;\n\n    {;\n//@ assert(0<=fb);\n}\n\n    {;\n//@ assert(fb<fbuflen);\n}\n\n    fb++;\n    if (fb >= fbuflen-1)\n      fb = 0;\n  }\n\n  if (fb > 0)\n  {\n    \n    {;\n//@ assert(0<=fb);\n}\n\n    {;\n//@ assert(fb<fbuflen);\n}\n\n  }\n\n END:  return 0;\n}",
        "combined_annotation_num_solver_calls": 33,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main (void)\n{\n  \n  int fbuflen = unknown();\n  int fb;\n  \n  if(fbuflen >0);else goto END;\n  fb = 0;\n  /*@\nloop invariant i1: 0 <= fb;\nloop invariant i2: fb < fbuflen;\nloop invariant i3: fb >= 0;\n\nloop invariant i5: fbuflen > 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i62: 0 <= fbuflen;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i234: 0 <= fb + 1;\nloop invariant i235: 0 <= fb < fbuflen;\n\n\nloop invariant i238: ( fb >= 0 && fb < fbuflen );\nloop invariant i239: -1 <= fb;\n*/\nwhile (unknown())\n  {\n    \n    if (unknown())\n      break;\n\n    if (unknown())\n      break;\n\n    {;\n//@ assert(0<=fb);\n}\n\n    {;\n//@ assert(fb<fbuflen);\n}\n\n    fb++;\n    if (fb >= fbuflen-1)\n      fb = 0;\n\n    {;\n//@ assert(0<=fb);\n}\n\n    {;\n//@ assert(fb<fbuflen);\n}\n\n    fb++;\n    if (fb >= fbuflen-1)\n      fb = 0;\n\n    {;\n//@ assert(0<=fb);\n}\n\n    {;\n//@ assert(fb<fbuflen);\n}\n\n    fb++;\n    if (fb >= fbuflen-1)\n      fb = 0;\n  }\n\n  if (fb > 0)\n  {\n    \n    {;\n//@ assert(0<=fb);\n}\n\n    {;\n//@ assert(fb<fbuflen);\n}\n\n  }\n\n END:  return 0;\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c"
        ],
        "skipped": [],
        "total": 35,
        "success_count": 30,
        "failure_count": 5,
        "success_rate": 0.8571428571428571
    }
}