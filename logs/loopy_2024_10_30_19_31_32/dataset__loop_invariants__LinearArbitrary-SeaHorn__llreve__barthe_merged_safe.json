{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int __mark(int);\nvoid main() {\n\tint n, c;\n    n = unknown();\n    c = unknown();\n    int i = 0;\n    int j1 = 0;\n    int x1 = 0;\n    int j2 = c;\n    int x2 = 0;\n\n    while ( (i < n)) {\n        \n        j1 = 5 * i + c;\n\t\t{;\n//@ assert(j1 == j2);\n}\n\n        x1 = x1 + j1;\n        x2 = x2 + j2;\n\t\t{;\n//@ assert(x1 == x2);\n}\n\n        j2 = j2 + 5;\n        i++;\n    }\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= j1 <= 5 * i + c;\nloop invariant 0 <= x1 <= x2;\nloop invariant 5 * i + c <= j2 <= 5 * i + c;\nloop invariant 0 <= j2 <= 5 * i + c;\nloop invariant 0 <= x2 <= x1;\nloop invariant 0 <= i <= n;\nloop invariant 0 <= j1 <= 5 * i + c;\nloop invariant 0 <= x1 <= x2;\nloop invariant 5 * i + c <= j2 <= 5 * i + c;\nloop invariant 0 <= j2 <= 5 * i + c;\nloop invariant 0 <= x2 <= x1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant c <= j1 <= 5 * i + c;\nloop invariant j2 == j1 + 5;\nloop invariant x1 == x2;\nloop invariant x1 == 5 * i + c * i + i * (i - 1) / 2;\nloop invariant x2 == 5 * i + c * i + i * (i - 1) / 2;\nloop invariant j1 == j2;\nloop invariant j2 == j1 + 5;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= j1 <= 5 * i + c;\nloop invariant 0 <= x1 <= x2;\nloop invariant j2 == 5 * i + c;\nloop invariant x2 == x1 + j2;\nloop invariant x1 == x2 - j2;\nloop invariant x1 == x2 - (5 * i + c);\nloop invariant x1 == x2 - c - 5 * i;\nloop invariant x1 == x2 - c - 5 * i;\nloop invariant x1 == x2 - c - 5 * i;\nloop invariant x1 == x2 - c - 5 * i;\nloop invariant x1 == x2 - c - 5 * i;\nloop invariant x1 == x2 - c - 5 * i;\nloop invariant x1 == x2 - c - 5 * i;\nloop invariant x1 == x2 - c - 5 * i;\nloop invariant x1 == x2 - c - 5 * i;\nloop invariant x1 == x2 - c - 5 * i;\nloop invariant x1 == x2 - c - 5 * i;\nloop invariant x1 == x2 - c - 5 * i;\nloop invariant x1 == x2 - c - 5 * i;\nloop invariant x1 == x2 - c - 5 * i;\nloop invariant x1 == x2 - c - 5 * i;\nloop invariant x1 == x2 - c - 5 * i;\nloop invariant x1 == x2 - c - 5 * i;\nloop invariant x1 == x2 - c - 5 * i;\nloop invariant x1 == x2 - c - 5 * i;\nloop invariant x1 == x2 - c - 5 * i;\nloop invariant x1 == x2 - c - 5 * i;\nloop invariant x1 == x2 - c - 5 * i;\nloop invariant x1 == x2 - c - 5 * i;\nloop invariant x1 == x2 - c - 5 * i;\nloop invariant x1 == x2 - c - 5 * i;\nloop invariant x1 == x2 - c - 5 * i;\nloop invariant x1 == x2 - c - 5 * i;\nloop invariant x1 == x2 - c - 5 * i;\nloop invariant x1 == x2 - c - 5 * i;\nloop invariant x1 == x2 - c - 5 * i;\nloop invariant x1 == x2 - c - 5 * i;\nloop invariant x1 == x2 - c - 5 * i;\nloop invariant x1 == x2 - c - 5 * i;\nloop invariant x1 == x2 - c - 5 * i;\nloop invariant x1 == x2 - c - 5 * i;\nloop invariant x1 == x2 - c - 5 * i;\nloop invariant x1 == x2 - c - 5 * i;\nloop invariant x1 == x2 - c - 5 * i;\nloop invariant x1 == x2 - c - 5 * i;\nloop invariant x1 == x2 - c - 5 * i;\nloop invariant x1 == x2 - c - 5 * i;\nloop invariant x1 == x2 - c - 5 * i;\nloop invariant x1 == x2 - c - 5 * i;\nloop invariant x1 == x2 - c - 5 * i;\nloop invariant x1 == x2 - c - 5 * i;\nloop invariant x1 == x2 - c - 5 * i;\nloop invariant x1 == x2 - c - 5 * i;\nloop invariant x1 == x2 - c - 5 * i;\nloop invariant x1 == x2 - c - 5 * i;\nloop invariant x1 == x2 - c - 5 * i;\nloop invariant x1 == x2 - c - 5 * i;\nloop invariant x1 == x2 - c - 5 * i;\nloop invariant x1 == x2 - c - 5 * i;\nloop invariant x1 == x2 - c - 5 * i;\nloop invariant x1 == x2 - c - 5 * i;\nloop invariant x1 == x2 - c - 5 * i;\nloop invariant x1 == x2 - c - 5 * i;\nloop invariant x1 == x2 - c - 5 * i;\nloop invariant x1 == x2 - c - 5 * i;\nloop invariant x1 == x2 - c - 5 * i;\nloop invariant x1 == x2 - c - 5 * i;\n*/\n```",
            "```\n/*@\nloop invariant j1 == j2;\nloop invariant x1 == x2;\nloop invariant c == (c + 5 * i);\n*/\n```",
            "```\n/*@\nloop invariant i < n;\nloop invariant j1 == 5 * i + c;\nloop invariant x1 == x2;\nloop invariant x1 == x2 + (5 * i + c) * i;\nloop invariant j2 == j1 + 5;\nloop invariant i <= n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= j1 <= c + 5 * n;\nloop invariant 5 * i + c <= j2 <= c + 5 * n;\nloop invariant 0 <= x1 <= x2;\nloop invariant x1 == x2 + j1 * i;\nloop invariant 0 <= i <= n;\nloop invariant 0 <= j2 <= c + 5 * n;\nloop invariant 0 <= x2 <= x1;\nloop invariant x2 == x1 - j1 * i;\nloop invariant j1 == j2 - 5 * i;\nloop invariant j2 == j1 + 5 * i;\nloop invariant x1 == x2 + j2 * i;\nloop invariant x2 == x1 - j2 * i;\nloop invariant j1 == j2 - 5 * i;\nloop invariant x2 <= x1;\nloop invariant x1 == x2 + j2 * i;\nloop invariant x2 == x1 - j2 * i;\nloop invariant j1 == j2 - 5 * i;\nloop invariant x2 <= x1;\nloop invariant x1 == x2 + j2 * i;\nloop invariant x2 == x1 - j2 * i;\nloop invariant j1 == j2 - 5 * i;\nloop invariant x2 <= x1;\nloop invariant x1 == x2 + j2 * i;\nloop invariant x2 == x1 - j2 * i;\nloop invariant j1 == j2 - 5 * i;\nloop invariant x2 <= x1;\nloop invariant x1 == x2 + j2 * i;\nloop invariant x2 == x1 - j2 * i;\nloop invariant j1 == j2 - 5 * i;\nloop invariant x2 <= x1;\nloop invariant x1 == x2 + j2 * i;\nloop invariant x2 == x1 - j2 * i;\nloop invariant j1 == j2 - 5 * i;\nloop invariant x2 <= x1;\nloop invariant x1 == x2 + j2 * i;\nloop invariant x2 == x1 - j2 * i;\nloop invariant j1 == j2 - 5 * i;\nloop invariant x2 <= x1;\nloop invariant x1 == x2 + j2 * i;\nloop invariant x2 == x1 - j2 * i;\nloop invariant j1 == j2 - 5 * i;\nloop invariant x2 <= x1;\nloop invariant x1 == x2 + j2 * i;\nloop invariant x2 == x1 - j2 * i;\nloop invariant j1 == j2 - 5 * i;\nloop invariant x2 <= x1;\nloop invariant x1 == x2 + j2 * i;\nloop invariant x2 == x1 - j2 * i;\nloop invariant j1 == j2 - 5 * i;\nloop invariant x2 <= x1;\nloop invariant x1 == x2 + j2 * i;\nloop invariant x2 == x1 - j2 * i;\nloop invariant j1 == j2 - 5 * i;\nloop invariant x2 <= x1;\nloop invariant x1 == x2 + j2 * i;\nloop invariant x2 == x1 - j2 * i;\nloop invariant j1 == j2 - 5 * i;\nloop invariant x2 <= x1;\nloop invariant x1 == x2 + j2 * i;\nloop invariant x2 == x1 - j2 * i;\nloop invariant j1 == j2 - 5 * i;\nloop invariant x2 <= x1;\nloop invariant x1 == x2 + j2 * i;\nloop invariant x2 == x1 - j2 * i;\nloop invariant j1 == j2 - 5 * i;\nloop invariant x2 <= x1;\nloop invariant x1 == x2 + j2 * i;\nloop invariant x2 == x1 - j2 * i;\nloop invariant j1 == j2 - 5 * i;\nloop invariant x2 <= x1;\nloop invariant x1 == x2 + j2 * i;\nloop invariant x2 == x1 - j2 * i;\nloop invariant j1 == j2 - 5 * i;\nloop invariant x2 <= x1;\nloop invariant x1 == x2 + j2 * i;\nloop invariant x2 == x1 - j2 * i;\nloop invariant j1 == j2 - 5 * i;\nloop invariant x2 <= x1;\nloop invariant x1 == x2 + j2 * i;\nloop invariant x2 == x1 - j2 * i;\nloop invariant j1 == j2 - 5 * i;\nloop invariant x2 <= x1;\nloop invariant x1 == x2 + j2 * i;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= j1 <= n * 5 + c;\nloop invariant 0 <= j2 <= n * 5 + c;\nloop invariant 0 <= x1 <= n * (5 * i + c);\nloop invariant 0 <= x2 <= n * (5 * i + c);\nloop invariant x1 == x2;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant j1 == 5 * i + c;\nloop invariant j2 == 5 * i + c;\nloop invariant x1 == 5 * i * (i + 1) / 2 + c * i;\nloop invariant x2 == 5 * i * (i + 1) / 2 + c * i;\nloop invariant j1 == j2;\nloop invariant x1 == x2;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant j1 == 5 * i + c;\nloop invariant j2 == 5 * i + c;\nloop invariant x1 == 5 * i * (i + 1) / 2 + c * i;\nloop invariant x2 == 5 * i * (i + 1) / 2 + c * i;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant i <= n ==> j1 == (5 * i + c);\nloop invariant (j1 == j2) ==> (x1 == x2);\nloop invariant (x1 == x2) ==> (i <= n);\nloop invariant (j1 == j2) ==> (x1 == x2 + 5 * i);\nloop invariant (x1 == x2 + 5 * i) ==> (j1 == j2);\nloop invariant (x1 == x2 + 5 * i) ==> (i <= n);\nloop invariant (j1 == j2) ==> (x1 == x2 + 5 * i);\nloop invariant (x1 == x2 + 5 * i) ==> (j1 == j2);\nloop invariant (x1 == x2 + 5 * i) ==> (i <= n);\nloop invariant (j1 == j2) ==> (x1 == x2 + 5 * i);\nloop invariant (x1 == x2 + 5 * i) ==> (j1 == j2);\nloop invariant (x1 == x2 + 5 * i) ==> (i <= n);\nloop invariant (j1 == j2) ==> (x1 == x2 + 5 * i);\nloop invariant (x1 == x2 + 5 * i) ==> (j1 == j2);\nloop invariant (x1 == x2 + 5 * i) ==> (i <= n);\nloop invariant (x1 == x2 + 5 * i) ==> (j1 == j2);\nloop invariant (x1 == x2 + 5 * i) ==> (i <= n);\nloop invariant (j1 == j2) ==> (x1 == x2 + 5 * i);\nloop invariant (x1 == x2 + 5 * i) ==> (j1 == j2);\nloop invariant (x1 == x2 + 5 * i) ==> (i <= n);\nloop invariant (j1 == j2) ==> (x1 == x2 + 5 * i);\nloop invariant (x1 == x2 + 5 * i) ==> (j1 == j2);\nloop invariant (x1 == x2 + 5 * i) ==> (i <= n);\nloop invariant (j1 == j2) ==> (x1 == x2 + 5 * i);\nloop invariant (x1 == x2 + 5 * i) ==> (j1 == j2);\nloop invariant (x1 == x2 + 5 * i) ==> (i <= n);\nloop invariant (j1 == j2) ==> (x1 == x2 + 5 * i);\nloop invariant (x1 == x2 + 5 * i) ==> (j1 == j2);\nloop invariant (x1 == x2 + 5 * i) ==> (i <= n);\nloop invariant (j1 == j2) ==> (x1 == x2 + 5 * i);\nloop invariant (x1 == x2 + 5 * i) ==> (j1 == j2);\nloop invariant (x1 == x2 + 5 * i) ==> (i <= n);\nloop invariant (j1 == j2) ==> (x1 == x2 + 5 * i);\nloop invariant (x1 == x2 + 5 * i) ==> (j1 == j2);\nloop invariant (x1 == x2 + 5 * i) ==> (i <= n);\nloop invariant (x1 == x2 + 5 * i) ==> (j1 == j2);\nloop invariant (x1 == x2 + 5 * i) ==> (i <= n);\nloop invariant (j1 == j2) ==> (x1 == x2 + 5 * i);\nloop invariant (x1 == x2 + 5 * i) ==> (j1 == j2);\nloop invariant (x1 == x2 + 5 * i) ==> (i <= n);\nloop invariant (j1 == j2) ==> (x1 == x2 + 5 * i);\nloop invariant (x1 == x2 + 5 * i) ==> (j1 == j2);\nloop invariant (x1 == x2 + 5 * i) ==> (i <= n);\nloop invariant (j1 == j2) ==> (x1 == x2 + 5 * i);\nloop invariant (x1 == x2 + 5 * i) ==> (j1 == j2);\nloop invariant (x1 == x2 + 5 * i) ==> (i <= n);\nloop invariant (x1 == x2 + 5 * i) ==> (j1 == j2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= j1 <= 5 * n + c;\nloop invariant 0 <= j2 <= 5 * n + c;\nloop invariant 0 <= x1 <= (5 * n + c) * (n + 1) / 2;\nloop invariant 0 <= x2 <= (5 * n + c) * (n + 1) / 2;\nloop invariant (i == n) ==> (j1 == j2);\nloop invariant (i == n) ==> (x1 == x2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= j1 <= 5 * n + c;\nloop invariant 0 <= j2 <= 5 * n + c;\nloop invariant x1 == j1 * i;\nloop invariant x2 == j2 * i;\nloop invariant j1 == j2;\nloop invariant x1 == x2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= j1 <= 5 * i + c;\nloop invariant 0 <= j2 <= 5 * i + c;\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x1 <= x2;\nloop invariant x1 >= x2 - 5 * i * c;\nloop invariant x2 <= x1 + 5 * i * c;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant j1 == 5 * i + c;\nloop invariant x1 == x2;\nloop invariant j1 == j2;\nloop invariant i < n ==> x1 == x2;\nloop invariant i >= n ==> x1 == x2;\nloop invariant i < n ==> x1 == x2 + 5 * i * c;\nloop invariant i >= n ==> x1 == x2 + 5 * i * c;\nloop invariant i < n ==> x1 == x2 + 5 * i * c ==> x1 == x2;\nloop invariant i >= n ==> x1 == x2 + 5 * i * c ==> x1 == x2;\nloop invariant i < n ==> x1 == x2 ==> x1 == x2 + 5 * i * c;\nloop invariant i >= n ==> x1 == x2 ==> x1 == x2 + 5 * i * c;\nloop invariant i < n ==> x1 == x2 + 5 * i * c ==> x1 == x2 ==> i == n;\nloop invariant i >= n ==> x1 == x2 + 5 * i * c ==> x1 == x2 ==> i == n;\nloop invariant i < n ==> x1 == x2 ==> x1 == x2 + 5 * i * c ==> i == n;\nloop invariant i >= n ==> x1 == x2 ==> x1 == x2 + 5 * i * c ==> i == n;\nloop invariant i < n ==> i == n ==> x1 == x2;\nloop invariant i >= n ==> i == n ==> x1 == x2;\nloop invariant i < n ==> i == n ==> x1 == x2 + 5 * i * c;\nloop invariant i >= n ==> i == n ==> x1 == x2 + 5 * i * c;\nloop invariant i < n ==> i == n ==> x1 == x2 ==> x1 == x2 + 5 * i * c;\nloop invariant i >= n ==> i == n ==> x1 == x2 ==> x1 == x2 + 5 * i * c;\nloop invariant i < n ==> i == n ==> x1 == x2 + 5 * i * c ==> x1 == x2 ==> i == n;\nloop invariant i >= n ==> i == n ==> x1 == x2 + 5 * i * c ==> x1 == x2 ==> i == n;\nloop invariant i < n ==> i == n ==> x1 == x2 ==> x1 == x2 + 5 * i * c ==> i == n;\nloop invariant i >= n ==> i == n ==> x1 == x2 ==> x1 == x2 + 5 * i * c ==> i == n;\nloop invariant i < n ==> i == n ==> x1 == x2 ==> i == n ==> x1 == x2;\nloop invariant i >= n ==> i == n ==> x1 == x2 ==> i == n ==> x1 == x2;\nloop invariant i < n ==> i == n ==> x1 == x2 + 5 * i * c ==> i == n ==> x1 == x2;\nloop invariant i >= n ==> i == n ==> x1 == x2 + 5 * i * c ==> i == n ==> x1 == x2;\nloop invariant i < n ==> i == n ==> x1 == x2 ==> x1 == x2 + 5 * i * c ==> i == n ==> x1 == x2;\nloop invariant i >= n ==> i == n ==> x1 == x2 ==> x1 == x2 + 5 * i * c ==> i == n ==> x1 == x2;\nloop invariant i < n ==> i == n ==> x1 == x2 + 5 * i * c ==> i == n ==> x1 == x2 ==> x1 == x2;\nloop invariant i >= n ==> i == n ==> x1 == x2 + 5 * i * c ==> i == n ==> x1 == x2 ==> x1 == x2;\nloop invariant i < n ==> i == n ==> x1 == x2 ==> x1 == x2 + 5 * i * c ==> i == n ==> x1 == x2 ==> x1 == x2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= j1 <= 5 * i + c;\nloop invariant 0 <= x1 <= x2;\nloop invariant j1 == j2;\nloop invariant x1 == x2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant j1 == 5 * i + c;\nloop invariant j2 == 5 * i + j2;\nloop invariant x1 == x2 + (5 * i + c) * i;\nloop invariant x2 == x2 + (5 * i + j2) * i;\nloop invariant j1 + x1 == j2 + x2;\nloop invariant j1 + x1 == j1 + x2 + (5 * i + j2) * i;\nloop invariant j2 + x2 == j2 + x2 + (5 * i + j2) * i;\nloop invariant x1 == x2 + (5 * i + j2) * i;\nloop invariant x2 == x2 + (5 * i + j2) * i;\nloop invariant x1 == x2;\nloop invariant x1 == x2 + (5 * i) * i + c * i;\nloop invariant x2 == x2 + (5 * i) * i + c * i;\nloop invariant x1 == x2 + (5 * i) * i + c * i;\nloop invariant x2 == x2 + (5 * i) * i + c * i;\nloop invariant x1 == x2;\nloop invariant x1 == x2 + (5 * i) * i;\nloop invariant x2 == x2 + (5 * i) * i;\nloop invariant x1 == x2 + (5 * i) * i;\nloop invariant x2 == x2 + (5 * i) * i;\nloop invariant x1 == x2;\nloop invariant x1 == x2 + (5 * i) * i + c * i;\nloop invariant x2 == x2 + (5 * i) * i + c * i;\nloop invariant x1 == x2 + (5 * i) * i + c * i;\nloop invariant x2 == x2 + (5 * i) * i + c * i;\nloop invariant x1 == x2;\nloop invariant x1 == x2 + (5 * i) * i + c * i;\nloop invariant x2 == x2 + (5 * i) * i + c * i;\nloop invariant x1 == x2 + (5 * i) * i + c * i;\nloop invariant x2 == x2 + (5 * i) * i + c * i;\nloop invariant x1 == x2;\nloop invariant x1 == x2 + (5 * i) * i + c * i;\nloop invariant x2 == x2 + (5 * i) * i + c * i;\nloop invariant x1 == x2 + (5 * i) * i + c * i;\nloop invariant x2 == x2 + (5 * i) * i + c * i;\nloop invariant x1 == x2;\nloop invariant x1 == x2 + (5 * i) * i + c * i;\nloop invariant x2 == x2 + (5 * i) * i + c * i;\nloop invariant x1 == x2 + (5 * i) * i + c * i;\nloop invariant x2 == x2 + (5 * i) * i + c * i;\nloop invariant x1 == x2;\nloop invariant x1 == x2 + (5 * i) * i + c * i;\nloop invariant x2 == x2 + (5 * i) * i + c * i;\nloop invariant x1 == x2 + (5 * i) * i + c * i;\nloop invariant x2 == x2 + (5 * i) * i + c * i;\nloop invariant x1 == x2;\nloop invariant x1 == x2 + (5 * i) * i + c * i;\nloop invariant x2 == x2 + (5 * i) * i + c * i;\nloop invariant x1 == x2 + (5 * i) * i + c * i;\nloop invariant x2 == x2 + (5 * i) * i + c * i;\nloop invariant x1 == x2;\nloop invariant x1 == x2 + (5 * i) * i + c * i;\nloop invariant x2 == x2 + (5 * i) * i + c * i;\nloop invariant x1 == x2 + (5 * i) * i + c * i;\nloop invariant x2 == x2 + (5 * i) * i + c * i;\nloop invariant x1 == x2;\nloop invariant x1 == x2 + (5 * i) * i + c * i;\nloop invariant x2 == x2 + (5 * i) * i + c * i;\n*/\n```",
            "```\n/*@\nloop invariant j1 = j2;\nloop invariant x1 = x2;\nloop invariant 0 <= i <= n;\nloop invariant 0 <= j1 <= 5 * n + c;\nloop invariant 0 <= x1 <= 5 * (n * (n + 1) / 2) + c * n;\nloop invariant 0 <= j2 <= 5 * n + c;\nloop invariant 0 <= x2 <= 5 * (n * (n + 1) / 2) + c * n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= j1 <= 5 * i + c;\nloop invariant 0 <= x1 <= x2;\nloop invariant j1 == j2;\nloop invariant x1 == x2;\nloop invariant j2 == j2 + 5;\nloop invariant i < n ==> j2 == 5 * i + c;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= j1 <= 5 * i + c;\nloop invariant 0 <= x1 <= x2;\nloop invariant 5 * i + c <= j2 <= 5 * i + c;\nloop invariant 0 <= j2 <= 5 * i + c;\nloop invariant 0 <= x2 <= x1;\nloop invariant 0 <= i <= n;\nloop invariant 0 <= j1 <= 5 * i + c;\nloop invariant 0 <= x1 <= x2;\nloop invariant 5 * i + c <= j2 <= 5 * i + c;\nloop invariant 0 <= j2 <= 5 * i + c;\nloop invariant 0 <= x2 <= x1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int __mark(int);\nvoid main() {\n\tint n, c;\n    n = unknown();\n    c = unknown();\n    int i = 0;\n    int j1 = 0;\n    int x1 = 0;\n    int j2 = c;\n    int x2 = 0;\n\n    /*@\n\n\n\nloop invariant i4: 5 * i + c <= j2 <= 5 * i + c;\n\n\n*/\nwhile ( (i < n)) {\n        \n        j1 = 5 * i + c;\n\t\t{;\n//@ assert(j1 == j2);\n}\n\n        x1 = x1 + j1;\n        x2 = x2 + j2;\n\t\t{;\n//@ assert(x1 == x2);\n}\n\n        j2 = j2 + 5;\n        i++;\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant c <= j1 <= 5 * i + c;\nloop invariant j2 == j1 + 5;\nloop invariant x1 == x2;\nloop invariant x1 == 5 * i + c * i + i * (i - 1) / 2;\nloop invariant x2 == 5 * i + c * i + i * (i - 1) / 2;\nloop invariant j1 == j2;\nloop invariant j2 == j1 + 5;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int __mark(int);\nvoid main() {\n\tint n, c;\n    n = unknown();\n    c = unknown();\n    int i = 0;\n    int j1 = 0;\n    int x1 = 0;\n    int j2 = c;\n    int x2 = 0;\n\n    /*@\n\n\n\nloop invariant i4: x1 == x2;\n\n\n\n*/\nwhile ( (i < n)) {\n        \n        j1 = 5 * i + c;\n\t\t{;\n//@ assert(j1 == j2);\n}\n\n        x1 = x1 + j1;\n        x2 = x2 + j2;\n\t\t{;\n//@ assert(x1 == x2);\n}\n\n        j2 = j2 + 5;\n        i++;\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= j1 <= 5 * i + c;\nloop invariant 0 <= x1 <= x2;\nloop invariant j2 == 5 * i + c;\nloop invariant x2 == x1 + j2;\nloop invariant x1 == x2 - j2;\nloop invariant x1 == x2 - (5 * i + c);\nloop invariant x1 == x2 - c - 5 * i;\nloop invariant x1 == x2 - c - 5 * i;\nloop invariant x1 == x2 - c - 5 * i;\nloop invariant x1 == x2 - c - 5 * i;\nloop invariant x1 == x2 - c - 5 * i;\nloop invariant x1 == x2 - c - 5 * i;\nloop invariant x1 == x2 - c - 5 * i;\nloop invariant x1 == x2 - c - 5 * i;\nloop invariant x1 == x2 - c - 5 * i;\nloop invariant x1 == x2 - c - 5 * i;\nloop invariant x1 == x2 - c - 5 * i;\nloop invariant x1 == x2 - c - 5 * i;\nloop invariant x1 == x2 - c - 5 * i;\nloop invariant x1 == x2 - c - 5 * i;\nloop invariant x1 == x2 - c - 5 * i;\nloop invariant x1 == x2 - c - 5 * i;\nloop invariant x1 == x2 - c - 5 * i;\nloop invariant x1 == x2 - c - 5 * i;\nloop invariant x1 == x2 - c - 5 * i;\nloop invariant x1 == x2 - c - 5 * i;\nloop invariant x1 == x2 - c - 5 * i;\nloop invariant x1 == x2 - c - 5 * i;\nloop invariant x1 == x2 - c - 5 * i;\nloop invariant x1 == x2 - c - 5 * i;\nloop invariant x1 == x2 - c - 5 * i;\nloop invariant x1 == x2 - c - 5 * i;\nloop invariant x1 == x2 - c - 5 * i;\nloop invariant x1 == x2 - c - 5 * i;\nloop invariant x1 == x2 - c - 5 * i;\nloop invariant x1 == x2 - c - 5 * i;\nloop invariant x1 == x2 - c - 5 * i;\nloop invariant x1 == x2 - c - 5 * i;\nloop invariant x1 == x2 - c - 5 * i;\nloop invariant x1 == x2 - c - 5 * i;\nloop invariant x1 == x2 - c - 5 * i;\nloop invariant x1 == x2 - c - 5 * i;\nloop invariant x1 == x2 - c - 5 * i;\nloop invariant x1 == x2 - c - 5 * i;\nloop invariant x1 == x2 - c - 5 * i;\nloop invariant x1 == x2 - c - 5 * i;\nloop invariant x1 == x2 - c - 5 * i;\nloop invariant x1 == x2 - c - 5 * i;\nloop invariant x1 == x2 - c - 5 * i;\nloop invariant x1 == x2 - c - 5 * i;\nloop invariant x1 == x2 - c - 5 * i;\nloop invariant x1 == x2 - c - 5 * i;\nloop invariant x1 == x2 - c - 5 * i;\nloop invariant x1 == x2 - c - 5 * i;\nloop invariant x1 == x2 - c - 5 * i;\nloop invariant x1 == x2 - c - 5 * i;\nloop invariant x1 == x2 - c - 5 * i;\nloop invariant x1 == x2 - c - 5 * i;\nloop invariant x1 == x2 - c - 5 * i;\nloop invariant x1 == x2 - c - 5 * i;\nloop invariant x1 == x2 - c - 5 * i;\nloop invariant x1 == x2 - c - 5 * i;\nloop invariant x1 == x2 - c - 5 * i;\nloop invariant x1 == x2 - c - 5 * i;\nloop invariant x1 == x2 - c - 5 * i;\nloop invariant x1 == x2 - c - 5 * i;\nloop invariant x1 == x2 - c - 5 * i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int __mark(int);\nvoid main() {\n\tint n, c;\n    n = unknown();\n    c = unknown();\n    int i = 0;\n    int j1 = 0;\n    int x1 = 0;\n    int j2 = c;\n    int x2 = 0;\n\n    /*@\n\n\n\nloop invariant i4: j2 == 5 * i + c;\n\n\n\n\n*/\nwhile ( (i < n)) {\n        \n        j1 = 5 * i + c;\n\t\t{;\n//@ assert(j1 == j2);\n}\n\n        x1 = x1 + j1;\n        x2 = x2 + j2;\n\t\t{;\n//@ assert(x1 == x2);\n}\n\n        j2 = j2 + 5;\n        i++;\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant j1 == j2;\nloop invariant x1 == x2;\nloop invariant c == (c + 5 * i);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int __mark(int);\nvoid main() {\n\tint n, c;\n    n = unknown();\n    c = unknown();\n    int i = 0;\n    int j1 = 0;\n    int x1 = 0;\n    int j2 = c;\n    int x2 = 0;\n\n    /*@\n\nloop invariant i2: x1 == x2;\n\n*/\nwhile ( (i < n)) {\n        \n        j1 = 5 * i + c;\n\t\t{;\n//@ assert(j1 == j2);\n}\n\n        x1 = x1 + j1;\n        x2 = x2 + j2;\n\t\t{;\n//@ assert(x1 == x2);\n}\n\n        j2 = j2 + 5;\n        i++;\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant i < n;\nloop invariant j1 == 5 * i + c;\nloop invariant x1 == x2;\nloop invariant x1 == x2 + (5 * i + c) * i;\nloop invariant j2 == j1 + 5;\nloop invariant i <= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int __mark(int);\nvoid main() {\n\tint n, c;\n    n = unknown();\n    c = unknown();\n    int i = 0;\n    int j1 = 0;\n    int x1 = 0;\n    int j2 = c;\n    int x2 = 0;\n\n    /*@\n\n\nloop invariant i3: x1 == x2;\n\n\n\n*/\nwhile ( (i < n)) {\n        \n        j1 = 5 * i + c;\n\t\t{;\n//@ assert(j1 == j2);\n}\n\n        x1 = x1 + j1;\n        x2 = x2 + j2;\n\t\t{;\n//@ assert(x1 == x2);\n}\n\n        j2 = j2 + 5;\n        i++;\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= j1 <= c + 5 * n;\nloop invariant 5 * i + c <= j2 <= c + 5 * n;\nloop invariant 0 <= x1 <= x2;\nloop invariant x1 == x2 + j1 * i;\nloop invariant 0 <= i <= n;\nloop invariant 0 <= j2 <= c + 5 * n;\nloop invariant 0 <= x2 <= x1;\nloop invariant x2 == x1 - j1 * i;\nloop invariant j1 == j2 - 5 * i;\nloop invariant j2 == j1 + 5 * i;\nloop invariant x1 == x2 + j2 * i;\nloop invariant x2 == x1 - j2 * i;\nloop invariant j1 == j2 - 5 * i;\nloop invariant x2 <= x1;\nloop invariant x1 == x2 + j2 * i;\nloop invariant x2 == x1 - j2 * i;\nloop invariant j1 == j2 - 5 * i;\nloop invariant x2 <= x1;\nloop invariant x1 == x2 + j2 * i;\nloop invariant x2 == x1 - j2 * i;\nloop invariant j1 == j2 - 5 * i;\nloop invariant x2 <= x1;\nloop invariant x1 == x2 + j2 * i;\nloop invariant x2 == x1 - j2 * i;\nloop invariant j1 == j2 - 5 * i;\nloop invariant x2 <= x1;\nloop invariant x1 == x2 + j2 * i;\nloop invariant x2 == x1 - j2 * i;\nloop invariant j1 == j2 - 5 * i;\nloop invariant x2 <= x1;\nloop invariant x1 == x2 + j2 * i;\nloop invariant x2 == x1 - j2 * i;\nloop invariant j1 == j2 - 5 * i;\nloop invariant x2 <= x1;\nloop invariant x1 == x2 + j2 * i;\nloop invariant x2 == x1 - j2 * i;\nloop invariant j1 == j2 - 5 * i;\nloop invariant x2 <= x1;\nloop invariant x1 == x2 + j2 * i;\nloop invariant x2 == x1 - j2 * i;\nloop invariant j1 == j2 - 5 * i;\nloop invariant x2 <= x1;\nloop invariant x1 == x2 + j2 * i;\nloop invariant x2 == x1 - j2 * i;\nloop invariant j1 == j2 - 5 * i;\nloop invariant x2 <= x1;\nloop invariant x1 == x2 + j2 * i;\nloop invariant x2 == x1 - j2 * i;\nloop invariant j1 == j2 - 5 * i;\nloop invariant x2 <= x1;\nloop invariant x1 == x2 + j2 * i;\nloop invariant x2 == x1 - j2 * i;\nloop invariant j1 == j2 - 5 * i;\nloop invariant x2 <= x1;\nloop invariant x1 == x2 + j2 * i;\nloop invariant x2 == x1 - j2 * i;\nloop invariant j1 == j2 - 5 * i;\nloop invariant x2 <= x1;\nloop invariant x1 == x2 + j2 * i;\nloop invariant x2 == x1 - j2 * i;\nloop invariant j1 == j2 - 5 * i;\nloop invariant x2 <= x1;\nloop invariant x1 == x2 + j2 * i;\nloop invariant x2 == x1 - j2 * i;\nloop invariant j1 == j2 - 5 * i;\nloop invariant x2 <= x1;\nloop invariant x1 == x2 + j2 * i;\nloop invariant x2 == x1 - j2 * i;\nloop invariant j1 == j2 - 5 * i;\nloop invariant x2 <= x1;\nloop invariant x1 == x2 + j2 * i;\nloop invariant x2 == x1 - j2 * i;\nloop invariant j1 == j2 - 5 * i;\nloop invariant x2 <= x1;\nloop invariant x1 == x2 + j2 * i;\nloop invariant x2 == x1 - j2 * i;\nloop invariant j1 == j2 - 5 * i;\nloop invariant x2 <= x1;\nloop invariant x1 == x2 + j2 * i;\nloop invariant x2 == x1 - j2 * i;\nloop invariant j1 == j2 - 5 * i;\nloop invariant x2 <= x1;\nloop invariant x1 == x2 + j2 * i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int __mark(int);\nvoid main() {\n\tint n, c;\n    n = unknown();\n    c = unknown();\n    int i = 0;\n    int j1 = 0;\n    int x1 = 0;\n    int j2 = c;\n    int x2 = 0;\n\n    /*@\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i13: x2 <= x1;\n*/\nwhile ( (i < n)) {\n        \n        j1 = 5 * i + c;\n\t\t{;\n//@ assert(j1 == j2);\n}\n\n        x1 = x1 + j1;\n        x2 = x2 + j2;\n\t\t{;\n//@ assert(x1 == x2);\n}\n\n        j2 = j2 + 5;\n        i++;\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= j1 <= n * 5 + c;\nloop invariant 0 <= j2 <= n * 5 + c;\nloop invariant 0 <= x1 <= n * (5 * i + c);\nloop invariant 0 <= x2 <= n * (5 * i + c);\nloop invariant x1 == x2;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant j1 == 5 * i + c;\nloop invariant j2 == 5 * i + c;\nloop invariant x1 == 5 * i * (i + 1) / 2 + c * i;\nloop invariant x2 == 5 * i * (i + 1) / 2 + c * i;\nloop invariant j1 == j2;\nloop invariant x1 == x2;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant j1 == 5 * i + c;\nloop invariant j2 == 5 * i + c;\nloop invariant x1 == 5 * i * (i + 1) / 2 + c * i;\nloop invariant x2 == 5 * i * (i + 1) / 2 + c * i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int __mark(int);\nvoid main() {\n\tint n, c;\n    n = unknown();\n    c = unknown();\n    int i = 0;\n    int j1 = 0;\n    int x1 = 0;\n    int j2 = c;\n    int x2 = 0;\n\n    /*@\n\n\n\n\nloop invariant i5: x1 == x2;\nloop invariant i6: i >= 0;\n\n\nloop invariant i9: j2 == 5 * i + c;\n\n\n\n*/\nwhile ( (i < n)) {\n        \n        j1 = 5 * i + c;\n\t\t{;\n//@ assert(j1 == j2);\n}\n\n        x1 = x1 + j1;\n        x2 = x2 + j2;\n\t\t{;\n//@ assert(x1 == x2);\n}\n\n        j2 = j2 + 5;\n        i++;\n    }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant i <= n ==> j1 == (5 * i + c);\nloop invariant (j1 == j2) ==> (x1 == x2);\nloop invariant (x1 == x2) ==> (i <= n);\nloop invariant (j1 == j2) ==> (x1 == x2 + 5 * i);\nloop invariant (x1 == x2 + 5 * i) ==> (j1 == j2);\nloop invariant (x1 == x2 + 5 * i) ==> (i <= n);\nloop invariant (j1 == j2) ==> (x1 == x2 + 5 * i);\nloop invariant (x1 == x2 + 5 * i) ==> (j1 == j2);\nloop invariant (x1 == x2 + 5 * i) ==> (i <= n);\nloop invariant (j1 == j2) ==> (x1 == x2 + 5 * i);\nloop invariant (x1 == x2 + 5 * i) ==> (j1 == j2);\nloop invariant (x1 == x2 + 5 * i) ==> (i <= n);\nloop invariant (j1 == j2) ==> (x1 == x2 + 5 * i);\nloop invariant (x1 == x2 + 5 * i) ==> (j1 == j2);\nloop invariant (x1 == x2 + 5 * i) ==> (i <= n);\nloop invariant (x1 == x2 + 5 * i) ==> (j1 == j2);\nloop invariant (x1 == x2 + 5 * i) ==> (i <= n);\nloop invariant (j1 == j2) ==> (x1 == x2 + 5 * i);\nloop invariant (x1 == x2 + 5 * i) ==> (j1 == j2);\nloop invariant (x1 == x2 + 5 * i) ==> (i <= n);\nloop invariant (j1 == j2) ==> (x1 == x2 + 5 * i);\nloop invariant (x1 == x2 + 5 * i) ==> (j1 == j2);\nloop invariant (x1 == x2 + 5 * i) ==> (i <= n);\nloop invariant (j1 == j2) ==> (x1 == x2 + 5 * i);\nloop invariant (x1 == x2 + 5 * i) ==> (j1 == j2);\nloop invariant (x1 == x2 + 5 * i) ==> (i <= n);\nloop invariant (j1 == j2) ==> (x1 == x2 + 5 * i);\nloop invariant (x1 == x2 + 5 * i) ==> (j1 == j2);\nloop invariant (x1 == x2 + 5 * i) ==> (i <= n);\nloop invariant (j1 == j2) ==> (x1 == x2 + 5 * i);\nloop invariant (x1 == x2 + 5 * i) ==> (j1 == j2);\nloop invariant (x1 == x2 + 5 * i) ==> (i <= n);\nloop invariant (j1 == j2) ==> (x1 == x2 + 5 * i);\nloop invariant (x1 == x2 + 5 * i) ==> (j1 == j2);\nloop invariant (x1 == x2 + 5 * i) ==> (i <= n);\nloop invariant (x1 == x2 + 5 * i) ==> (j1 == j2);\nloop invariant (x1 == x2 + 5 * i) ==> (i <= n);\nloop invariant (j1 == j2) ==> (x1 == x2 + 5 * i);\nloop invariant (x1 == x2 + 5 * i) ==> (j1 == j2);\nloop invariant (x1 == x2 + 5 * i) ==> (i <= n);\nloop invariant (j1 == j2) ==> (x1 == x2 + 5 * i);\nloop invariant (x1 == x2 + 5 * i) ==> (j1 == j2);\nloop invariant (x1 == x2 + 5 * i) ==> (i <= n);\nloop invariant (j1 == j2) ==> (x1 == x2 + 5 * i);\nloop invariant (x1 == x2 + 5 * i) ==> (j1 == j2);\nloop invariant (x1 == x2 + 5 * i) ==> (i <= n);\nloop invariant (x1 == x2 + 5 * i) ==> (j1 == j2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int __mark(int);\nvoid main() {\n\tint n, c;\n    n = unknown();\n    c = unknown();\n    int i = 0;\n    int j1 = 0;\n    int x1 = 0;\n    int j2 = c;\n    int x2 = 0;\n\n    /*@\n\n\nloop invariant i3: (j1 == j2) ==> (x1 == x2);\n\nloop invariant i5: (j1 == j2) ==> (x1 == x2 + 5 * i);\n\n\n*/\nwhile ( (i < n)) {\n        \n        j1 = 5 * i + c;\n\t\t{;\n//@ assert(j1 == j2);\n}\n\n        x1 = x1 + j1;\n        x2 = x2 + j2;\n\t\t{;\n//@ assert(x1 == x2);\n}\n\n        j2 = j2 + 5;\n        i++;\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= j1 <= 5 * n + c;\nloop invariant 0 <= j2 <= 5 * n + c;\nloop invariant 0 <= x1 <= (5 * n + c) * (n + 1) / 2;\nloop invariant 0 <= x2 <= (5 * n + c) * (n + 1) / 2;\nloop invariant (i == n) ==> (j1 == j2);\nloop invariant (i == n) ==> (x1 == x2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int __mark(int);\nvoid main() {\n\tint n, c;\n    n = unknown();\n    c = unknown();\n    int i = 0;\n    int j1 = 0;\n    int x1 = 0;\n    int j2 = c;\n    int x2 = 0;\n\n    /*@\n\n\n\n\n\n\nloop invariant i7: (i == n) ==> (x1 == x2);\n*/\nwhile ( (i < n)) {\n        \n        j1 = 5 * i + c;\n\t\t{;\n//@ assert(j1 == j2);\n}\n\n        x1 = x1 + j1;\n        x2 = x2 + j2;\n\t\t{;\n//@ assert(x1 == x2);\n}\n\n        j2 = j2 + 5;\n        i++;\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= j1 <= 5 * n + c;\nloop invariant 0 <= j2 <= 5 * n + c;\nloop invariant x1 == j1 * i;\nloop invariant x2 == j2 * i;\nloop invariant j1 == j2;\nloop invariant x1 == x2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int __mark(int);\nvoid main() {\n\tint n, c;\n    n = unknown();\n    c = unknown();\n    int i = 0;\n    int j1 = 0;\n    int x1 = 0;\n    int j2 = c;\n    int x2 = 0;\n\n    /*@\n\n\n\n\n\n\nloop invariant i7: x1 == x2;\n*/\nwhile ( (i < n)) {\n        \n        j1 = 5 * i + c;\n\t\t{;\n//@ assert(j1 == j2);\n}\n\n        x1 = x1 + j1;\n        x2 = x2 + j2;\n\t\t{;\n//@ assert(x1 == x2);\n}\n\n        j2 = j2 + 5;\n        i++;\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant 0 <= j1 <= 5 * i + c;\nloop invariant 0 <= j2 <= 5 * i + c;\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x1 <= x2;\nloop invariant x1 >= x2 - 5 * i * c;\nloop invariant x2 <= x1 + 5 * i * c;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant j1 == 5 * i + c;\nloop invariant x1 == x2;\nloop invariant j1 == j2;\nloop invariant i < n ==> x1 == x2;\nloop invariant i >= n ==> x1 == x2;\nloop invariant i < n ==> x1 == x2 + 5 * i * c;\nloop invariant i >= n ==> x1 == x2 + 5 * i * c;\nloop invariant i < n ==> x1 == x2 + 5 * i * c ==> x1 == x2;\nloop invariant i >= n ==> x1 == x2 + 5 * i * c ==> x1 == x2;\nloop invariant i < n ==> x1 == x2 ==> x1 == x2 + 5 * i * c;\nloop invariant i >= n ==> x1 == x2 ==> x1 == x2 + 5 * i * c;\nloop invariant i < n ==> x1 == x2 + 5 * i * c ==> x1 == x2 ==> i == n;\nloop invariant i >= n ==> x1 == x2 + 5 * i * c ==> x1 == x2 ==> i == n;\nloop invariant i < n ==> x1 == x2 ==> x1 == x2 + 5 * i * c ==> i == n;\nloop invariant i >= n ==> x1 == x2 ==> x1 == x2 + 5 * i * c ==> i == n;\nloop invariant i < n ==> i == n ==> x1 == x2;\nloop invariant i >= n ==> i == n ==> x1 == x2;\nloop invariant i < n ==> i == n ==> x1 == x2 + 5 * i * c;\nloop invariant i >= n ==> i == n ==> x1 == x2 + 5 * i * c;\nloop invariant i < n ==> i == n ==> x1 == x2 ==> x1 == x2 + 5 * i * c;\nloop invariant i >= n ==> i == n ==> x1 == x2 ==> x1 == x2 + 5 * i * c;\nloop invariant i < n ==> i == n ==> x1 == x2 + 5 * i * c ==> x1 == x2 ==> i == n;\nloop invariant i >= n ==> i == n ==> x1 == x2 + 5 * i * c ==> x1 == x2 ==> i == n;\nloop invariant i < n ==> i == n ==> x1 == x2 ==> x1 == x2 + 5 * i * c ==> i == n;\nloop invariant i >= n ==> i == n ==> x1 == x2 ==> x1 == x2 + 5 * i * c ==> i == n;\nloop invariant i < n ==> i == n ==> x1 == x2 ==> i == n ==> x1 == x2;\nloop invariant i >= n ==> i == n ==> x1 == x2 ==> i == n ==> x1 == x2;\nloop invariant i < n ==> i == n ==> x1 == x2 + 5 * i * c ==> i == n ==> x1 == x2;\nloop invariant i >= n ==> i == n ==> x1 == x2 + 5 * i * c ==> i == n ==> x1 == x2;\nloop invariant i < n ==> i == n ==> x1 == x2 ==> x1 == x2 + 5 * i * c ==> i == n ==> x1 == x2;\nloop invariant i >= n ==> i == n ==> x1 == x2 ==> x1 == x2 + 5 * i * c ==> i == n ==> x1 == x2;\nloop invariant i < n ==> i == n ==> x1 == x2 + 5 * i * c ==> i == n ==> x1 == x2 ==> x1 == x2;\nloop invariant i >= n ==> i == n ==> x1 == x2 + 5 * i * c ==> i == n ==> x1 == x2 ==> x1 == x2;\nloop invariant i < n ==> i == n ==> x1 == x2 ==> x1 == x2 + 5 * i * c ==> i == n ==> x1 == x2 ==> x1 == x2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int __mark(int);\nvoid main() {\n\tint n, c;\n    n = unknown();\n    c = unknown();\n    int i = 0;\n    int j1 = 0;\n    int x1 = 0;\n    int j2 = c;\n    int x2 = 0;\n\n    /*@\n\n\n\n\nloop invariant i5: x1 <= x2;\n\n\nloop invariant i8: i >= 0;\n\n\nloop invariant i11: x1 == x2;\n\nloop invariant i13: i < n ==> x1 == x2;\nloop invariant i14: i >= n ==> x1 == x2;\n\n\nloop invariant i17: i < n ==> x1 == x2 + 5 * i * c ==> x1 == x2;\nloop invariant i18: i >= n ==> x1 == x2 + 5 * i * c ==> x1 == x2;\n\n\n\n\n\n\nloop invariant i25: i < n ==> i == n ==> x1 == x2;\nloop invariant i26: i >= n ==> i == n ==> x1 == x2;\nloop invariant i27: i < n ==> i == n ==> x1 == x2 + 5 * i * c;\n\nloop invariant i29: i < n ==> i == n ==> x1 == x2 ==> x1 == x2 + 5 * i * c;\n\nloop invariant i31: i < n ==> i == n ==> x1 == x2 + 5 * i * c ==> x1 == x2 ==> i == n;\nloop invariant i32: i >= n ==> i == n ==> x1 == x2 + 5 * i * c ==> x1 == x2 ==> i == n;\nloop invariant i33: i < n ==> i == n ==> x1 == x2 ==> x1 == x2 + 5 * i * c ==> i == n;\nloop invariant i34: i >= n ==> i == n ==> x1 == x2 ==> x1 == x2 + 5 * i * c ==> i == n;\nloop invariant i35: i < n ==> i == n ==> x1 == x2 ==> i == n ==> x1 == x2;\nloop invariant i36: i >= n ==> i == n ==> x1 == x2 ==> i == n ==> x1 == x2;\nloop invariant i37: i < n ==> i == n ==> x1 == x2 + 5 * i * c ==> i == n ==> x1 == x2;\nloop invariant i38: i >= n ==> i == n ==> x1 == x2 + 5 * i * c ==> i == n ==> x1 == x2;\nloop invariant i39: i < n ==> i == n ==> x1 == x2 ==> x1 == x2 + 5 * i * c ==> i == n ==> x1 == x2;\nloop invariant i40: i >= n ==> i == n ==> x1 == x2 ==> x1 == x2 + 5 * i * c ==> i == n ==> x1 == x2;\nloop invariant i41: i < n ==> i == n ==> x1 == x2 + 5 * i * c ==> i == n ==> x1 == x2 ==> x1 == x2;\nloop invariant i42: i >= n ==> i == n ==> x1 == x2 + 5 * i * c ==> i == n ==> x1 == x2 ==> x1 == x2;\nloop invariant i43: i < n ==> i == n ==> x1 == x2 ==> x1 == x2 + 5 * i * c ==> i == n ==> x1 == x2 ==> x1 == x2;\n*/\nwhile ( (i < n)) {\n        \n        j1 = 5 * i + c;\n\t\t{;\n//@ assert(j1 == j2);\n}\n\n        x1 = x1 + j1;\n        x2 = x2 + j2;\n\t\t{;\n//@ assert(x1 == x2);\n}\n\n        j2 = j2 + 5;\n        i++;\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= j1 <= 5 * i + c;\nloop invariant 0 <= x1 <= x2;\nloop invariant j1 == j2;\nloop invariant x1 == x2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int __mark(int);\nvoid main() {\n\tint n, c;\n    n = unknown();\n    c = unknown();\n    int i = 0;\n    int j1 = 0;\n    int x1 = 0;\n    int j2 = c;\n    int x2 = 0;\n\n    /*@\n\n\n\n\nloop invariant i5: x1 == x2;\n*/\nwhile ( (i < n)) {\n        \n        j1 = 5 * i + c;\n\t\t{;\n//@ assert(j1 == j2);\n}\n\n        x1 = x1 + j1;\n        x2 = x2 + j2;\n\t\t{;\n//@ assert(x1 == x2);\n}\n\n        j2 = j2 + 5;\n        i++;\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 8,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant j1 == 5 * i + c;\nloop invariant j2 == 5 * i + j2;\nloop invariant x1 == x2 + (5 * i + c) * i;\nloop invariant x2 == x2 + (5 * i + j2) * i;\nloop invariant j1 + x1 == j2 + x2;\nloop invariant j1 + x1 == j1 + x2 + (5 * i + j2) * i;\nloop invariant j2 + x2 == j2 + x2 + (5 * i + j2) * i;\nloop invariant x1 == x2 + (5 * i + j2) * i;\nloop invariant x2 == x2 + (5 * i + j2) * i;\nloop invariant x1 == x2;\nloop invariant x1 == x2 + (5 * i) * i + c * i;\nloop invariant x2 == x2 + (5 * i) * i + c * i;\nloop invariant x1 == x2 + (5 * i) * i + c * i;\nloop invariant x2 == x2 + (5 * i) * i + c * i;\nloop invariant x1 == x2;\nloop invariant x1 == x2 + (5 * i) * i;\nloop invariant x2 == x2 + (5 * i) * i;\nloop invariant x1 == x2 + (5 * i) * i;\nloop invariant x2 == x2 + (5 * i) * i;\nloop invariant x1 == x2;\nloop invariant x1 == x2 + (5 * i) * i + c * i;\nloop invariant x2 == x2 + (5 * i) * i + c * i;\nloop invariant x1 == x2 + (5 * i) * i + c * i;\nloop invariant x2 == x2 + (5 * i) * i + c * i;\nloop invariant x1 == x2;\nloop invariant x1 == x2 + (5 * i) * i + c * i;\nloop invariant x2 == x2 + (5 * i) * i + c * i;\nloop invariant x1 == x2 + (5 * i) * i + c * i;\nloop invariant x2 == x2 + (5 * i) * i + c * i;\nloop invariant x1 == x2;\nloop invariant x1 == x2 + (5 * i) * i + c * i;\nloop invariant x2 == x2 + (5 * i) * i + c * i;\nloop invariant x1 == x2 + (5 * i) * i + c * i;\nloop invariant x2 == x2 + (5 * i) * i + c * i;\nloop invariant x1 == x2;\nloop invariant x1 == x2 + (5 * i) * i + c * i;\nloop invariant x2 == x2 + (5 * i) * i + c * i;\nloop invariant x1 == x2 + (5 * i) * i + c * i;\nloop invariant x2 == x2 + (5 * i) * i + c * i;\nloop invariant x1 == x2;\nloop invariant x1 == x2 + (5 * i) * i + c * i;\nloop invariant x2 == x2 + (5 * i) * i + c * i;\nloop invariant x1 == x2 + (5 * i) * i + c * i;\nloop invariant x2 == x2 + (5 * i) * i + c * i;\nloop invariant x1 == x2;\nloop invariant x1 == x2 + (5 * i) * i + c * i;\nloop invariant x2 == x2 + (5 * i) * i + c * i;\nloop invariant x1 == x2 + (5 * i) * i + c * i;\nloop invariant x2 == x2 + (5 * i) * i + c * i;\nloop invariant x1 == x2;\nloop invariant x1 == x2 + (5 * i) * i + c * i;\nloop invariant x2 == x2 + (5 * i) * i + c * i;\nloop invariant x1 == x2 + (5 * i) * i + c * i;\nloop invariant x2 == x2 + (5 * i) * i + c * i;\nloop invariant x1 == x2;\nloop invariant x1 == x2 + (5 * i) * i + c * i;\nloop invariant x2 == x2 + (5 * i) * i + c * i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int __mark(int);\nvoid main() {\n\tint n, c;\n    n = unknown();\n    c = unknown();\n    int i = 0;\n    int j1 = 0;\n    int x1 = 0;\n    int j2 = c;\n    int x2 = 0;\n\n    /*@\n\n\n\n\n\n\n\n\n\nloop invariant i10: x1 == x2;\n\n\n\n\n*/\nwhile ( (i < n)) {\n        \n        j1 = 5 * i + c;\n\t\t{;\n//@ assert(j1 == j2);\n}\n\n        x1 = x1 + j1;\n        x2 = x2 + j2;\n\t\t{;\n//@ assert(x1 == x2);\n}\n\n        j2 = j2 + 5;\n        i++;\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant j1 = j2;\nloop invariant x1 = x2;\nloop invariant 0 <= i <= n;\nloop invariant 0 <= j1 <= 5 * n + c;\nloop invariant 0 <= x1 <= 5 * (n * (n + 1) / 2) + c * n;\nloop invariant 0 <= j2 <= 5 * n + c;\nloop invariant 0 <= x2 <= 5 * (n * (n + 1) / 2) + c * n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int __mark(int);\nvoid main() {\n\tint n, c;\n    n = unknown();\n    c = unknown();\n    int i = 0;\n    int j1 = 0;\n    int x1 = 0;\n    int j2 = c;\n    int x2 = 0;\n\n    /*@\n\n\n\n\n\n\n\n*/\nwhile ( (i < n)) {\n        \n        j1 = 5 * i + c;\n\t\t{;\n//@ assert(j1 == j2);\n}\n\n        x1 = x1 + j1;\n        x2 = x2 + j2;\n\t\t{;\n//@ assert(x1 == x2);\n}\n\n        j2 = j2 + 5;\n        i++;\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= j1 <= 5 * i + c;\nloop invariant 0 <= x1 <= x2;\nloop invariant j1 == j2;\nloop invariant x1 == x2;\nloop invariant j2 == j2 + 5;\nloop invariant i < n ==> j2 == 5 * i + c;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int __mark(int);\nvoid main() {\n\tint n, c;\n    n = unknown();\n    c = unknown();\n    int i = 0;\n    int j1 = 0;\n    int x1 = 0;\n    int j2 = c;\n    int x2 = 0;\n\n    /*@\n\n\n\n\nloop invariant i5: x1 == x2;\n\nloop invariant i7: i < n ==> j2 == 5 * i + c;\n*/\nwhile ( (i < n)) {\n        \n        j1 = 5 * i + c;\n\t\t{;\n//@ assert(j1 == j2);\n}\n\n        x1 = x1 + j1;\n        x2 = x2 + j2;\n\t\t{;\n//@ assert(x1 == x2);\n}\n\n        j2 = j2 + 5;\n        i++;\n    }\n}",
                "checker_output_after_prune": true
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 121: Assignment operators not allowed in annotations.",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int __mark(int);\nvoid main() {\n\tint n, c;\n    n = unknown();\n    c = unknown();\n    int i = 0;\n    int j1 = 0;\n    int x1 = 0;\n    int j2 = c;\n    int x2 = 0;\n\n    /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= j1 <= 5 * i + c;\nloop invariant i3: 0 <= x1 <= x2;\nloop invariant i4: 5 * i + c <= j2 <= 5 * i + c;\nloop invariant i5: 0 <= j2 <= 5 * i + c;\nloop invariant i6: 0 <= x2 <= x1;\nloop invariant i7: c <= j1 <= 5 * i + c;\nloop invariant i8: j2 == j1 + 5;\nloop invariant i9: x1 == x2;\nloop invariant i10: x1 == 5 * i + c * i + i * (i - 1) / 2;\nloop invariant i11: x2 == 5 * i + c * i + i * (i - 1) / 2;\nloop invariant i12: j1 == j2;\nloop invariant i13: j2 == 5 * i + c;\nloop invariant i14: x2 == x1 + j2;\nloop invariant i15: x1 == x2 - j2;\nloop invariant i16: x1 == x2 - (5 * i + c);\nloop invariant i17: x1 == x2 - c - 5 * i;\nloop invariant i18: c == (c + 5 * i);\nloop invariant i19: i < n;\nloop invariant i20: j1 == 5 * i + c;\nloop invariant i21: x1 == x2 + (5 * i + c) * i;\nloop invariant i22: i <= n;\nloop invariant i23: 0 <= j1 <= c + 5 * n;\nloop invariant i24: 5 * i + c <= j2 <= c + 5 * n;\nloop invariant i25: x1 == x2 + j1 * i;\nloop invariant i26: 0 <= j2 <= c + 5 * n;\nloop invariant i27: x2 == x1 - j1 * i;\nloop invariant i28: j1 == j2 - 5 * i;\nloop invariant i29: j2 == j1 + 5 * i;\nloop invariant i30: x1 == x2 + j2 * i;\nloop invariant i31: x2 == x1 - j2 * i;\nloop invariant i32: x2 <= x1;\nloop invariant i33: 0 <= j1 <= n * 5 + c;\nloop invariant i34: 0 <= j2 <= n * 5 + c;\nloop invariant i35: 0 <= x1 <= n * (5 * i + c);\nloop invariant i36: 0 <= x2 <= n * (5 * i + c);\nloop invariant i37: i >= 0;\nloop invariant i38: x1 == 5 * i * (i + 1) / 2 + c * i;\nloop invariant i39: x2 == 5 * i * (i + 1) / 2 + c * i;\nloop invariant i40: 1 <= i <= n;\nloop invariant i41: i <= n ==> j1 == (5 * i + c);\nloop invariant i42: (j1 == j2) ==> (x1 == x2);\nloop invariant i43: (x1 == x2) ==> (i <= n);\nloop invariant i44: (j1 == j2) ==> (x1 == x2 + 5 * i);\nloop invariant i45: (x1 == x2 + 5 * i) ==> (j1 == j2);\nloop invariant i46: (x1 == x2 + 5 * i) ==> (i <= n);\nloop invariant i47: 0 <= j1 <= 5 * n + c;\nloop invariant i48: 0 <= j2 <= 5 * n + c;\nloop invariant i49: 0 <= x1 <= (5 * n + c) * (n + 1) / 2;\nloop invariant i50: 0 <= x2 <= (5 * n + c) * (n + 1) / 2;\nloop invariant i51: (i == n) ==> (j1 == j2);\nloop invariant i52: (i == n) ==> (x1 == x2);\nloop invariant i53: x1 == j1 * i;\nloop invariant i54: x2 == j2 * i;\nloop invariant i55: x1 >= 0;\nloop invariant i56: x2 >= 0;\nloop invariant i57: x1 <= x2;\nloop invariant i58: x1 >= x2 - 5 * i * c;\nloop invariant i59: x2 <= x1 + 5 * i * c;\nloop invariant i60: i < n ==> x1 == x2;\nloop invariant i61: i >= n ==> x1 == x2;\nloop invariant i62: i < n ==> x1 == x2 + 5 * i * c;\nloop invariant i63: i >= n ==> x1 == x2 + 5 * i * c;\nloop invariant i64: i < n ==> x1 == x2 + 5 * i * c ==> x1 == x2;\nloop invariant i65: i >= n ==> x1 == x2 + 5 * i * c ==> x1 == x2;\nloop invariant i66: i < n ==> x1 == x2 ==> x1 == x2 + 5 * i * c;\nloop invariant i67: i >= n ==> x1 == x2 ==> x1 == x2 + 5 * i * c;\nloop invariant i68: i < n ==> x1 == x2 + 5 * i * c ==> x1 == x2 ==> i == n;\nloop invariant i69: i >= n ==> x1 == x2 + 5 * i * c ==> x1 == x2 ==> i == n;\nloop invariant i70: i < n ==> x1 == x2 ==> x1 == x2 + 5 * i * c ==> i == n;\nloop invariant i71: i >= n ==> x1 == x2 ==> x1 == x2 + 5 * i * c ==> i == n;\nloop invariant i72: i < n ==> i == n ==> x1 == x2;\nloop invariant i73: i >= n ==> i == n ==> x1 == x2;\nloop invariant i74: i < n ==> i == n ==> x1 == x2 + 5 * i * c;\nloop invariant i75: i >= n ==> i == n ==> x1 == x2 + 5 * i * c;\nloop invariant i76: i < n ==> i == n ==> x1 == x2 ==> x1 == x2 + 5 * i * c;\nloop invariant i77: i >= n ==> i == n ==> x1 == x2 ==> x1 == x2 + 5 * i * c;\nloop invariant i78: i < n ==> i == n ==> x1 == x2 + 5 * i * c ==> x1 == x2 ==> i == n;\nloop invariant i79: i >= n ==> i == n ==> x1 == x2 + 5 * i * c ==> x1 == x2 ==> i == n;\nloop invariant i80: i < n ==> i == n ==> x1 == x2 ==> x1 == x2 + 5 * i * c ==> i == n;\nloop invariant i81: i >= n ==> i == n ==> x1 == x2 ==> x1 == x2 + 5 * i * c ==> i == n;\nloop invariant i82: i < n ==> i == n ==> x1 == x2 ==> i == n ==> x1 == x2;\nloop invariant i83: i >= n ==> i == n ==> x1 == x2 ==> i == n ==> x1 == x2;\nloop invariant i84: i < n ==> i == n ==> x1 == x2 + 5 * i * c ==> i == n ==> x1 == x2;\nloop invariant i85: i >= n ==> i == n ==> x1 == x2 + 5 * i * c ==> i == n ==> x1 == x2;\nloop invariant i86: i < n ==> i == n ==> x1 == x2 ==> x1 == x2 + 5 * i * c ==> i == n ==> x1 == x2;\nloop invariant i87: i >= n ==> i == n ==> x1 == x2 ==> x1 == x2 + 5 * i * c ==> i == n ==> x1 == x2;\nloop invariant i88: i < n ==> i == n ==> x1 == x2 + 5 * i * c ==> i == n ==> x1 == x2 ==> x1 == x2;\nloop invariant i89: i >= n ==> i == n ==> x1 == x2 + 5 * i * c ==> i == n ==> x1 == x2 ==> x1 == x2;\nloop invariant i90: i < n ==> i == n ==> x1 == x2 ==> x1 == x2 + 5 * i * c ==> i == n ==> x1 == x2 ==> x1 == x2;\nloop invariant i91: j2 == 5 * i + j2;\nloop invariant i92: x2 == x2 + (5 * i + j2) * i;\nloop invariant i93: j1 + x1 == j2 + x2;\nloop invariant i94: j1 + x1 == j1 + x2 + (5 * i + j2) * i;\nloop invariant i95: j2 + x2 == j2 + x2 + (5 * i + j2) * i;\nloop invariant i96: x1 == x2 + (5 * i + j2) * i;\nloop invariant i97: x1 == x2 + (5 * i) * i + c * i;\nloop invariant i98: x2 == x2 + (5 * i) * i + c * i;\nloop invariant i99: x1 == x2 + (5 * i) * i;\nloop invariant i100: x2 == x2 + (5 * i) * i;\nloop invariant i101: j1 = j2;\nloop invariant i102: x1 = x2;\nloop invariant i103: 0 <= x1 <= 5 * (n * (n + 1) / 2) + c * n;\nloop invariant i104: 0 <= x2 <= 5 * (n * (n + 1) / 2) + c * n;\nloop invariant i105: j2 == j2 + 5;\nloop invariant i106: i < n ==> j2 == 5 * i + c;\n*/\nwhile ( (i < n)) {\n        \n        j1 = 5 * i + c;\n\t\t{;\n//@ assert(j1 == j2);\n}\n\n        x1 = x1 + j1;\n        x2 = x2 + j2;\n\t\t{;\n//@ assert(x1 == x2);\n}\n\n        j2 = j2 + 5;\n        i++;\n    }\n}",
        "combined_annotation_num_solver_calls": 24,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int __mark(int);\nvoid main() {\n\tint n, c;\n    n = unknown();\n    c = unknown();\n    int i = 0;\n    int j1 = 0;\n    int x1 = 0;\n    int j2 = c;\n    int x2 = 0;\n\n    /*@\n\n\n\nloop invariant i4: 5 * i + c <= j2 <= 5 * i + c;\n\n\n\n\nloop invariant i9: x1 == x2;\n\n\n\nloop invariant i13: j2 == 5 * i + c;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i32: x2 <= x1;\n\n\n\n\nloop invariant i37: i >= 0;\n\n\n\n\nloop invariant i42: (j1 == j2) ==> (x1 == x2);\n\nloop invariant i44: (j1 == j2) ==> (x1 == x2 + 5 * i);\n\n\n\n\n\n\n\nloop invariant i52: (i == n) ==> (x1 == x2);\n\n\n\n\nloop invariant i57: x1 <= x2;\n\n\nloop invariant i60: i < n ==> x1 == x2;\nloop invariant i61: i >= n ==> x1 == x2;\n\n\nloop invariant i64: i < n ==> x1 == x2 + 5 * i * c ==> x1 == x2;\nloop invariant i65: i >= n ==> x1 == x2 + 5 * i * c ==> x1 == x2;\n\n\n\n\n\n\nloop invariant i72: i < n ==> i == n ==> x1 == x2;\nloop invariant i73: i >= n ==> i == n ==> x1 == x2;\nloop invariant i74: i < n ==> i == n ==> x1 == x2 + 5 * i * c;\n\nloop invariant i76: i < n ==> i == n ==> x1 == x2 ==> x1 == x2 + 5 * i * c;\n\nloop invariant i78: i < n ==> i == n ==> x1 == x2 + 5 * i * c ==> x1 == x2 ==> i == n;\nloop invariant i79: i >= n ==> i == n ==> x1 == x2 + 5 * i * c ==> x1 == x2 ==> i == n;\nloop invariant i80: i < n ==> i == n ==> x1 == x2 ==> x1 == x2 + 5 * i * c ==> i == n;\nloop invariant i81: i >= n ==> i == n ==> x1 == x2 ==> x1 == x2 + 5 * i * c ==> i == n;\nloop invariant i82: i < n ==> i == n ==> x1 == x2 ==> i == n ==> x1 == x2;\nloop invariant i83: i >= n ==> i == n ==> x1 == x2 ==> i == n ==> x1 == x2;\nloop invariant i84: i < n ==> i == n ==> x1 == x2 + 5 * i * c ==> i == n ==> x1 == x2;\nloop invariant i85: i >= n ==> i == n ==> x1 == x2 + 5 * i * c ==> i == n ==> x1 == x2;\nloop invariant i86: i < n ==> i == n ==> x1 == x2 ==> x1 == x2 + 5 * i * c ==> i == n ==> x1 == x2;\nloop invariant i87: i >= n ==> i == n ==> x1 == x2 ==> x1 == x2 + 5 * i * c ==> i == n ==> x1 == x2;\nloop invariant i88: i < n ==> i == n ==> x1 == x2 + 5 * i * c ==> i == n ==> x1 == x2 ==> x1 == x2;\nloop invariant i89: i >= n ==> i == n ==> x1 == x2 + 5 * i * c ==> i == n ==> x1 == x2 ==> x1 == x2;\nloop invariant i90: i < n ==> i == n ==> x1 == x2 ==> x1 == x2 + 5 * i * c ==> i == n ==> x1 == x2 ==> x1 == x2;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i106: i < n ==> j2 == 5 * i + c;\n*/\nwhile ( (i < n)) {\n        \n        j1 = 5 * i + c;\n\t\t{;\n//@ assert(j1 == j2);\n}\n\n        x1 = x1 + j1;\n        x2 = x2 + j2;\n\t\t{;\n//@ assert(x1 == x2);\n}\n\n        j2 = j2 + 5;\n        i++;\n    }\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/split.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c"
        ],
        "skipped": [],
        "total": 41,
        "success_count": 34,
        "failure_count": 7,
        "success_rate": 0.8292682926829268
    }
}