{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int x = unknown();\n  int y = unknown();\n\n  assume(0 <= x);  assume(x <= 2);\n  assume(0 <= y);  assume(y <= 2);\n\n  if (x >= 0 && x <= 2 && y >= 0 && y <= 2) {\n  while( unknown() ) {\n\tx+=2;\n\ty+=2;\n  }\n  if( y >= 0 ) \n    if( y <= 0 ) \n      if( 4 <= x ) \n\t{;\n//@ assert( x < 4 );\n}\n\n  }\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= x <= 2;\nloop invariant 0 <= y <= 2;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x <= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x <= 4;\nloop invariant y <= 4;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x <= 4;\nloop invariant y <= 4;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x <= 4;\nloop invariant y <= 4;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x <= 4;\nloop invariant y <= 4;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x <= 4;\nloop invariant y <= 4;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x <= 4;\nloop invariant y <= 4;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x <= 4;\nloop invariant y <= 4;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x <= 4;\nloop invariant y <= 4;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x <= 4;\nloop invariant y <= 4;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x <= 4;\nloop invariant y <= 4;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x <= 4;\nloop invariant y <= 4;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x <= 4;\nloop invariant y <= 4;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x <= 4;\nloop invariant y <= 4;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x <= 4;\nloop invariant y <= 4;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x <= 4;\nloop invariant y <= 4;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x <= 4;\nloop invariant y <= 4;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x <= 4;\nloop invariant y <= 4;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x <= 4;\nloop invariant y <= 4;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x <= 4;\nloop invariant y <= 4;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x <= 4;\nloop invariant y <= 4;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x <= 4;\nloop invariant y <= 4;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x <= 4;\nloop invariant y <= 4;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 2;\nloop invariant 0 <= y <= 2;\nloop invariant y >= 0 ==> x >= y;\nloop invariant x <= 4 ==> y >= -1;\nloop invariant y >= 0 ==> x <= 2;\nloop invariant x >= 0 ==> y >= 0;\nloop invariant x <= 2 ==> y <= 2;\nloop invariant y < 0 ==> x <= -1;\nloop invariant x >= 0 ==> x <= 2;\nloop invariant y <= 0 ==> y <= 0;\nloop invariant x >= -1 ==> x <= 4;\nloop invariant x >= 4 ==> x < 4;\nloop invariant x >= 0 ==> x <= 4;\nloop invariant y >= -1 ==> y <= 2;\nloop invariant x <= -1 ==> x <= -1;\nloop invariant y <= 2 ==> y <= 2;\nloop invariant y >= 2 ==> y < 0;\nloop invariant y >= -1 ==> y <= 4;\nloop invariant y >= 4 ==> y < 0;\nloop invariant x >= 4 ==> x < 4;\nloop invariant x <= 4 ==> x <= 4;\nloop invariant y <= 4 ==> y <= 2;\nloop invariant x >= -1 ==> x <= 2;\nloop invariant y >= 0 ==> y >= 0;\nloop invariant x >= 2 ==> x >= 2;\nloop invariant y <= 4 ==> y >= -1;\nloop invariant y >= 2 ==> y >= 0;\nloop invariant x >= 2 ==> x >= 0;\nloop invariant y <= 2 ==> y >= -1;\nloop invariant x <= 4 ==> x >= -1;\nloop invariant x >= 4 ==> x >= -1;\nloop invariant y <= 4 ==> y >= 0;\nloop invariant x >= -1 ==> x <= 2;\nloop invariant y >= -1 ==> y >= -1;\nloop invariant x <= 2 ==> x <= 4;\nloop invariant y <= 2 ==> y >= -1;\nloop invariant x >= -1 ==> x >= -1;\nloop invariant y >= 0 ==> y <= 2;\nloop invariant x >= 2 ==> x <= 4;\nloop invariant y <= 2 ==> y >= 0;\nloop invariant x >= 0 ==> x <= 4;\nloop invariant y >= -1 ==> y <= 4;\nloop invariant x <= 4 ==> x >= 0;\nloop invariant y <= 4 ==> y >= -1;\nloop invariant x >= 0 ==> x >= -1;\nloop invariant y >= 0 ==> y >= -1;\nloop invariant x <= 4 ==> x >= -1;\nloop invariant y <= 4 ==> y >= 0;\nloop invariant x >= -1 ==> x <= 4;\nloop invariant y >= 0 ==> y >= -1;\nloop invariant x >= 0 ==> x <= 2;\nloop invariant y >= -1 ==> y <= 2;\nloop invariant x <= 2 ==> x >= -1;\nloop invariant y <= 2 ==> y >= -1;\nloop invariant x >= -1 ==> x <= 2;\nloop invariant y >= -1 ==> y <= 2;\nloop invariant x >= 0 ==> x <= 4;\nloop invariant y >= -1 ==> y <= 4;\nloop invariant x <= 4 ==> x >= 0;\nloop invariant y <= 4 ==> y >= -1;\nloop invariant x >= 0 ==> x <= 2;\nloop invariant y >= -1 ==> y <= 2;\nloop invariant x <= 2 ==> x >= 0;\nloop invariant y <= 2 ==> y >= -1;\nloop invariant x >= -1 ==> x <= 4;\nloop invariant y >= 0 ==> y <= 2;\nloop invariant x >= 0 ==> x <= 4;\nloop invariant y >= -1 ==> y <= 4;\nloop invariant x <= 4 ==> x >= 0;\nloop invariant y <= 4 ==> y >= -1;\nloop invariant x >= -1 ==> x <= 2;\nloop invariant y >= -1 ==> y <= 2;\nloop invariant x >= 0 ==> x <= 2;\nloop invariant y >= -1 ==> y <= 2;\nloop invariant x <= 2 ==> x >= -1;\nloop invariant y <= 2 ==> y >= -1;\nloop invariant x >= -1 ==> x <= 2;\nloop invariant y >= -1 ==> y <= 2;\nloop invariant x >= 0 ==> x <= 4;\nloop invariant y >= -1 ==> y <= 4;\nloop invariant x <= 4 ==> x >= 0;\nloop invariant y <= 4 ==> y >= -1;\nloop invariant x >= 0 ==> x <= 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 2;\nloop invariant 0 <= y <= 2;\nloop invariant x >= 4 - 2 * (0 <= y <= 2);\nloop invariant y >= x - 2 * (0 <= x <= 2);\nloop invariant x >= 4 - 2 * (0 <= y <= 2) ==> x < 4;\nloop invariant y >= x - 2 * (0 <= x <= 2) ==> y <= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 2;\nloop invariant 0 <= y <= 2;\nloop invariant x + y >= 0;\nloop invariant x + y <= 4;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 2;\nloop invariant 0 <= y <= 2;\nloop invariant 0 <= x + y <= 4;\nloop invariant 0 <= y + 1 <= 3;\nloop invariant x + y + 1 <= 5;\nloop invariant 0 <= x + 2 <= 4;\nloop invariant 0 <= y + 2 <= 3;\nloop invariant x + y + 2 <= 5;\nloop invariant x + y + 2 <= 6;\nloop invariant 0 <= x + 4 <= 4;\nloop invariant 0 <= y + 4 <= 3;\nloop invariant x + y + 4 <= 5;\nloop invariant x + y + 4 <= 6;\nloop invariant 0 <= x + 6 <= 4;\nloop invariant 0 <= y + 6 <= 3;\nloop invariant x + y + 6 <= 5;\nloop invariant x + y + 6 <= 6;\nloop invariant 0 <= x + 8 <= 4;\nloop invariant 0 <= y + 8 <= 3;\nloop invariant x + y + 8 <= 5;\nloop invariant x + y + 8 <= 6;\nloop invariant 0 <= x + 10 <= 4;\nloop invariant 0 <= y + 10 <= 3;\nloop invariant x + y + 10 <= 5;\nloop invariant x + y + 10 <= 6;\nloop invariant 0 <= x + 12 <= 4;\nloop invariant 0 <= y + 12 <= 3;\nloop invariant x + y + 12 <= 5;\nloop invariant x + y + 12 <= 6;\nloop invariant 0 <= x + 14 <= 4;\nloop invariant 0 <= y + 14 <= 3;\nloop invariant x + y + 14 <= 5;\nloop invariant x + y + 14 <= 6;\nloop invariant 0 <= x + 16 <= 4;\nloop invariant 0 <= y + 16 <= 3;\nloop invariant x + y + 16 <= 5;\nloop invariant x + y + 16 <= 6;\nloop invariant 0 <= x + 18 <= 4;\nloop invariant 0 <= y + 18 <= 3;\nloop invariant x + y + 18 <= 5;\nloop invariant x + y + 18 <= 6;\nloop invariant 0 <= x + 20 <= 4;\nloop invariant 0 <= y + 20 <= 3;\nloop invariant x + y + 20 <= 5;\nloop invariant x + y + 20 <= 6;\nloop invariant 0 <= x + 22 <= 4;\nloop invariant 0 <= y + 22 <= 3;\nloop invariant x + y + 22 <= 5;\nloop invariant x + y + 22 <= 6;\nloop invariant 0 <= x + 24 <= 4;\nloop invariant 0 <= y + 24 <= 3;\nloop invariant x + y + 24 <= 5;\nloop invariant x + y + 24 <= 6;\nloop invariant 0 <= x + 26 <= 4;\nloop invariant 0 <= y + 26 <= 3;\nloop invariant x + y + 26 <= 5;\nloop invariant x + y + 26 <= 6;\nloop invariant 0 <= x + 28 <= 4;\nloop invariant 0 <= y + 28 <= 3;\nloop invariant x + y + 28 <= 5;\nloop invariant x + y + 28 <= 6;\nloop invariant 0 <= x + 30 <= 4;\nloop invariant 0 <= y + 30 <= 3;\nloop invariant x + y + 30 <= 5;\nloop invariant x + y + 30 <= 6;\nloop invariant 0 <= x + 32 <= 4;\nloop invariant 0 <= y + 32 <= 3;\nloop invariant x + y + 32 <= 5;\nloop invariant x + y + 32 <= 6;\nloop invariant 0 <= x + 34 <= 4;\nloop invariant 0 <= y + 34 <= 3;\nloop invariant x + y + 34 <= 5;\nloop invariant x + y + 34 <= 6;\nloop invariant 0 <= x + 36 <= 4;\nloop invariant 0 <= y + 36 <= 3;\nloop invariant x + y + 36 <= 5;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 2;\nloop invariant 0 <= y <= 2;\nloop invariant x >= 4;\nloop invariant x < 4;\nloop invariant implies the post-condition `@ assert(x < 4);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 4;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x <= 4;\nloop invariant y <= 4;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x <= 4;\nloop invariant y <= 4;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x <= 4;\nloop invariant y <= 4;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x <= 4;\nloop invariant y <= 4;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x <= 4;\nloop invariant y <= 4;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x <= 4;\nloop invariant y <= 4;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x <= 4;\nloop invariant y <= 4;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x <= 4;\nloop invariant y <= 4;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x <= 4;\nloop invariant y <= 4;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x <= 4;\nloop invariant y <= 4;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x <= 4;\nloop invariant y <= 4;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x <= 4;\nloop invariant y <= 4;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x <= 4;\nloop invariant y <= 4;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x <= 4;\nloop invariant y <= 4;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x <= 4;\nloop invariant y <= 4;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x <= 4;\nloop invariant y <= 4;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x <= 4;\nloop invariant y <= 4;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x <= 4;\nloop invariant y <= 4;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x <= 4;\nloop invariant y <= 4;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x <= 4;\nloop invariant y <= 4;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x <= 4;\nloop invariant y <= 4;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x <= 4;\nloop invariant y <= 4;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x <= 4;\nloop invariant y <= 4;\nloop invariant x >= 0;\nloop invariant y >= 0;\n*/\n```",
            "```\n/*@\nloop invariant x >= 0;\nloop invariant x <= 2;\nloop invariant y >= 0;\nloop invariant y <= 2;\nloop invariant unknown() ==> (x >= 0 && x <= 2 && y >= 0 && y <= 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 2;\nloop invariant 0 <= y <= 2;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant 0 <= x + y <= 4;\nloop invariant 0 <= 2 * y <= 4;\nloop invariant 4 <= x + 2 * y <= 8;\nloop invariant 2 <= x + y <= 8;\nloop invariant 0 <= x <= 2;\nloop invariant 0 <= y <= 2;\nloop invariant 0 <= x + y <= 4;\nloop invariant 0 <= 2 * y <= 4;\nloop invariant 4 <= x + 2 * y <= 8;\nloop invariant 2 <= x + y <= 8;\nloop invariant x + y >= 0;\nloop invariant x + y <= 8;\nloop invariant x + 2 * y >= 0;\nloop invariant x + 2 * y <= 8;\nloop invariant 0 <= x + y <= 8;\nloop invariant 0 <= x + 2 * y <= 8;\nloop invariant 0 <= x + 4 * y <= 8;\nloop invariant x + 4 * y >= 0;\nloop invariant x + 4 * y <= 8;\nloop invariant 0 <= x + 4 * y <= 8;\nloop invariant x + y >= 0;\nloop invariant x + y <= 8;\nloop invariant x + 2 * y >= 0;\nloop invariant x + 2 * y <= 8;\nloop invariant 0 <= x + 2 * y <= 8;\nloop invariant x + 4 * y >= 0;\nloop invariant x + 4 * y <= 8;\nloop invariant 0 <= x + 4 * y <= 8;\nloop invariant x + y >= 0;\nloop invariant x + y <= 8;\nloop invariant x + 2 * y >= 0;\nloop invariant x + 2 * y <= 8;\nloop invariant 0 <= x + 2 * y <= 8;\nloop invariant x + 4 * y >= 0;\nloop invariant x + 4 * y <= 8;\nloop invariant 0 <= x + 4 * y <= 8;\nloop invariant x + y >= 0;\nloop invariant x + y <= 8;\nloop invariant x + 2 * y >= 0;\nloop invariant x + 2 * y <= 8;\nloop invariant 0 <= x + 2 * y <= 8;\nloop invariant x + 4 * y >= 0;\nloop invariant x + 4 * y <= 8;\nloop invariant 0 <= x + 4 * y <= 8;\nloop invariant x + y >= 0;\nloop invariant x + y <= 8;\nloop invariant x + 2 * y >= 0;\nloop invariant x + 2 * y <= 8;\nloop invariant 0 <= x + 2 * y <= 8;\nloop invariant x + 4 * y >= 0;\nloop invariant x + 4 * y <= 8;\nloop invariant 0 <= x + 4 * y <= 8;\nloop invariant x + y >= 0;\nloop invariant x + y <= 8;\nloop invariant x + 2 * y >= 0;\nloop invariant x + 2 * y <= 8;\nloop invariant 0 <= x + 2 * y <= 8;\nloop invariant x + 4 * y >= 0;\nloop invariant x + 4 * y <= 8;\nloop invariant 0 <= x + 4 * y <= 8;\nloop invariant x + y >= 0;\nloop invariant x + y <= 8;\nloop invariant x + 2 * y >= 0;\nloop invariant x + 2 * y <= 8;\nloop invariant 0 <= x + 2 * y <= 8;\nloop invariant x + 4 * y >= 0;\nloop invariant x + 4 * y <= 8;\nloop invariant 0 <= x + 4 * y <= 8;\nloop invariant x + y >= 0;\nloop invariant x + y <= 8;\nloop invariant x + 2 * y >= 0;\nloop invariant x + 2 * y <= 8;\nloop invariant 0 <= x + 2 * y <= 8;\nloop invariant x + 4 * y >= 0;\nloop invariant x + 4 * y <= 8;\nloop invariant 0 <= x + 4 * y <= 8;\nloop invariant x + y >= 0;\nloop invariant x + y <= 8;\nloop invariant x + 2 * y >= 0;\nloop invariant x + 2 * y <= 8;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 2;\nloop invariant 0 <= y <= 2;\nloop invariant 0 <= y <= 2 ==> x >= 0;\nloop invariant 0 <= x <= 2 ==> y >= 0;\nloop invariant 0 <= y <= 2 ==> x <= 2;\nloop invariant 0 <= x <= 2 ==> y <= 2;\nloop invariant 0 <= y <= 2 ==> x <= 2 ==> x >= 0;\nloop invariant 0 <= y <= 2 ==> x <= 2 ==> y >= 0;\nloop invariant 0 <= y <= 2 ==> x <= 2 ==> x <= 2;\nloop invariant 0 <= y <= 2 ==> x <= 2 ==> y <= 2;\nloop invariant 0 <= y <= 2 ==> x <= 2 ==> x <= 2 ==> x >= 0;\nloop invariant 0 <= y <= 2 ==> x <= 2 ==> y >= 0 ==> x <= 2;\nloop invariant 0 <= y <= 2 ==> x <= 2 ==> x <= 2 ==> y <= 2;\nloop invariant 0 <= y <= 2 ==> x <= 2 ==> x <= 2 ==> x >= 0 ==> x <= 2;\nloop invariant 0 <= y <= 2 ==> x <= 2 ==> y >= 0 ==> x <= 2 ==> y <= 2;\nloop invariant 0 <= y <= 2 ==> x <= 2 ==> x <= 2 ==> y <= 2 ==> x >= 0;\nloop invariant 0 <= y <= 2 ==> x <= 2 ==> x <= 2 ==> y <= 2 ==> x <= 2 ==> y >= 0;\nloop invariant 0 <= y <= 2 ==> x <= 2 ==> x <= 2 ==> y <= 2 ==> x <= 2 ==> y <= 2;\nloop invariant 0 <= y <= 2 ==> x <= 2 ==> x <= 2 ==> y <= 2 ==> x >= 0 ==> x <= 2 ==> y <= 2;\nloop invariant 0 <= y <= 2 ==> x <= 2 ==> y >= 0 ==> x <= 2 ==> y <= 2 ==> x >= 0;\nloop invariant 0 <= y <= 2 ==> x <= 2 ==> x <= 2 ==> y <= 2 ==> x <= 2 ==> y <= 2 ==> x >= 0;\nloop invariant 0 <= y <= 2 ==> x <= 2 ==> x <= 2 ==> y <= 2 ==> x <= 2 ==> y <= 2 ==> x <= 2 ==> y >= 0;\nloop invariant 0 <= y <= 2 ==> x <= 2 ==> x <= 2 ==> y <= 2 ==> x >= 0 ==> x <= 2 ==> y <= 2 ==> y >= 0;\nloop invariant 0 <= y <= 2 ==> x <= 2 ==> y >= 0 ==> x <= 2 ==> y <= 2 ==> x >= 0 ==> x <= 2 ==> y <= 2;\nloop invariant 0 <= y <= 2 ==> x <= 2 ==> x <= 2 ==> y <= 2 ==> x <= 2 ==> y <= 2 ==> x >= 0 ==> x <= 2 ==> y <= 2;\nloop invariant 0 <= y <= 2 ==> x <= 2 ==> x <= 2 ==> y <= 2 ==> x <= 2 ==> y <= 2 ==> x <= 2 ==> y >= 0 ==> x >= 0;\nloop invariant 0 <= y <= 2 ==> x <= 2 ==> x <= 2 ==> y <= 2 ==> x >= 0 ==> x <= 2 ==> y <= 2 ==> y >= 0 ==> x <= 2;\nloop invariant 0 <= y <= 2 ==> x <= 2 ==> y >= 0 ==> x <= 2 ==> y <= 2 ==> x >= 0 ==> x <= 2 ==> y <= 2 ==> x <= 2;\nloop invariant 0 <= y <= 2 ==> x <= 2 ==> x <= 2 ==> y <= 2 ==> x <= 2 ==> y <= 2 ==> x >= 0 ==> x <= 2 ==> y <= 2 ==> y >= 0;\nloop invariant 0 <= y <= 2 ==> x <= 2 ==> x <= 2 ==> y <= 2 ==> x <= 2 ==> y <= 2 ==> x <= 2 ==> y >= 0 ==> x >= 0 ==> x <= 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 2;\nloop invariant 0 <= y <= 2;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x >= 2;\nloop invariant y >= 0;\nloop invariant x >= 2;\nloop invariant y >= 0;\nloop invariant x >= 4;\nloop invariant y >= 0;\nloop invariant x < 4;\nloop invariant y >= 0;\nloop invariant x < 4;\nloop invariant y >= 0;\nloop invariant x < 4;\nloop invariant y >= 0;\nloop invariant x < 4;\nloop invariant y >= 0;\nloop invariant x < 4;\nloop invariant y >= 0;\nloop invariant x < 4;\nloop invariant y >= 0;\nloop invariant x < 4;\nloop invariant y >= 0;\nloop invariant x < 4;\nloop invariant y >= 0;\nloop invariant x < 4;\nloop invariant y >= 0;\nloop invariant x < 4;\nloop invariant y >= 0;\nloop invariant x < 4;\nloop invariant y >= 0;\nloop invariant x < 4;\nloop invariant y >= 0;\nloop invariant x < 4;\nloop invariant y >= 0;\nloop invariant x < 4;\nloop invariant y >= 0;\nloop invariant x < 4;\nloop invariant y >= 0;\nloop invariant x < 4;\nloop invariant y >= 0;\nloop invariant x < 4;\nloop invariant y >= 0;\nloop invariant x < 4;\nloop invariant y >= 0;\nloop invariant x < 4;\nloop invariant y >= 0;\nloop invariant x < 4;\nloop invariant y >= 0;\nloop invariant x < 4;\nloop invariant y >= 0;\nloop invariant x < 4;\nloop invariant y >= 0;\nloop invariant x < 4;\nloop invariant y >= 0;\nloop invariant x < 4;\nloop invariant y >= 0;\nloop invariant x < 4;\nloop invariant y >= 0;\nloop invariant x < 4;\nloop invariant y >= 0;\nloop invariant x < 4;\nloop invariant y >= 0;\nloop invariant x < 4;\nloop invariant y >= 0;\nloop invariant x < 4;\nloop invariant y >= 0;\nloop invariant x < 4;\nloop invariant y >= 0;\nloop invariant x < 4;\nloop invariant y >= 0;\nloop invariant x < 4;\nloop invariant y >= 0;\nloop invariant x < 4;\nloop invariant y >= 0;\nloop invariant x < 4;\nloop invariant y >= 0;\nloop invariant x < 4;\nloop invariant y >= 0;\nloop invariant x < 4;\nloop invariant y >= 0;\nloop invariant x < 4;\nloop invariant y >= 0;\nloop invariant x < 4;\nloop invariant y >= 0;\nloop invariant x < 4;\nloop invariant y >= 0;\nloop invariant x < 4;\nloop invariant y >= 0;\nloop invariant x < 4;\nloop invariant y >= 0;\nloop invariant x < 4;\nloop invariant y >= 0;\nloop invariant x < 4;\nloop invariant y >= 0;\nloop invariant x < 4;\nloop invariant y >= 0;\nloop invariant x < 4;\nloop invariant y >= 0;\nloop invariant x < 4;\nloop invariant y >= 0;\nloop invariant x < 4;\nloop invariant y >= 0;\nloop invariant x < 4;\nloop invariant y >= 0;\nloop invariant x < 4;\nloop invariant y >= 0;\nloop invariant x < 4;\nloop invariant y >= 0;\nloop invariant x < 4;\nloop invariant y >= 0;\nloop invariant x < 4;\nloop invariant y >= 0;\nloop invariant x < 4;\nloop invariant y >= 0;\nloop invariant x < 4;\nloop invariant y >= 0;\nloop invariant x < 4;\nloop invariant y >= 0;\nloop invariant x < 4;\nloop invariant y >= 0;\nloop invariant x < 4;\nloop invariant y >= 0;\nloop invariant x < 4;\nloop invariant y >= 0;\nloop invariant x < 4;\nloop invariant y >= 0;\nloop invariant x < 4;\nloop invariant y >= 0;\nloop invariant x < 4;\nloop invariant y >= 0;\nloop invariant x < 4;\nloop invariant y >= 0;\nloop invariant x < 4;\nloop invariant y >= 0;\nloop invariant x < 4;\nloop invariant y >= 0;\nloop invariant x < 4;\nloop invariant y >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 2;\nloop invariant 0 <= x <= 4;\nloop invariant y <= x;\nloop invariant x < 4;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 2;\nloop invariant 0 <= y <= 2;\nloop invariant 2 <= x + y <= 4;\nloop invariant 0 <= x - y <= 2;\nloop invariant 0 <= y - x <= 2;\nloop invariant x + y >= 0;\nloop invariant x - y >= 0;\nloop invariant y - x >= 0;\nloop invariant x + y <= 4;\nloop invariant x - y <= 2;\nloop invariant y - x <= 2;\nloop invariant x + y >= 0;\nloop invariant x - y >= 0;\nloop invariant y - x >= 0;\nloop invariant x + y <= 4;\nloop invariant x - y <= 2;\nloop invariant y - x <= 2;\nloop invariant x + y >= 0;\nloop invariant x - y >= 0;\nloop invariant y - x >= 0;\nloop invariant x + y <= 4;\nloop invariant x - y <= 2;\nloop invariant y - x <= 2;\nloop invariant x + y >= 0;\nloop invariant x - y >= 0;\nloop invariant y - x >= 0;\nloop invariant x + y <= 4;\nloop invariant x - y <= 2;\nloop invariant y - x <= 2;\nloop invariant x + y >= 0;\nloop invariant x - y >= 0;\nloop invariant y - x >= 0;\nloop invariant x + y <= 4;\nloop invariant x - y <= 2;\nloop invariant y - x <= 2;\nloop invariant x + y >= 0;\nloop invariant x - y >= 0;\nloop invariant y - x >= 0;\nloop invariant x + y <= 4;\nloop invariant x - y <= 2;\nloop invariant y - x <= 2;\nloop invariant x + y >= 0;\nloop invariant x - y >= 0;\nloop invariant y - x >= 0;\nloop invariant x + y <= 4;\nloop invariant x - y <= 2;\nloop invariant y - x <= 2;\nloop invariant x + y >= 0;\nloop invariant x - y >= 0;\nloop invariant y - x >= 0;\nloop invariant x + y <= 4;\nloop invariant x - y <= 2;\nloop invariant y - x <= 2;\nloop invariant x + y >= 0;\nloop invariant x - y >= 0;\nloop invariant y - x >= 0;\nloop invariant x + y <= 4;\nloop invariant x - y <= 2;\nloop invariant y - x <= 2;\nloop invariant x + y >= 0;\nloop invariant x - y >= 0;\nloop invariant y - x >= 0;\nloop invariant x + y <= 4;\nloop invariant x - y <= 2;\nloop invariant y - x <= 2;\nloop invariant x + y >= 0;\nloop invariant x - y >= 0;\nloop invariant y - x >= 0;\nloop invariant x + y <= 4;\nloop invariant x - y <= 2;\nloop invariant y - x <= 2;\nloop invariant x + y >= 0;\nloop invariant x - y >= 0;\nloop invariant y - x >= 0;\nloop invariant x + y <= 4;\nloop invariant x - y <= 2;\nloop invariant y - x <= 2;\nloop invariant x + y >= 0;\nloop invariant x - y >= 0;\nloop invariant y - x >= 0;\nloop invariant x + y <= 4;\nloop invariant x - y <= 2;\nloop invariant y - x <= 2;\nloop invariant x + y >= 0;\nloop invariant x - y >= 0;\nloop invariant y - x >= 0;\nloop invariant x + y <= 4;\nloop invariant x - y <= 2;\nloop invariant y - x <= 2;\nloop invariant x + y >= 0;\nloop invariant x - y >= 0;\nloop invariant y - x >= 0;\nloop invariant x + y <= 4;\nloop invariant x - y <= 2;\nloop invariant y - x <= 2;\nloop invariant x + y >= 0;\nloop invariant x - y >= 0;\nloop invariant y - x >= 0;\nloop invariant x + y <= 4;\nloop invariant x - y <= 2;\nloop invariant y - x <= 2;\nloop invariant x + y >= 0;\nloop invariant x - y >= 0;\nloop invariant y - x >= 0;\nloop invariant x + y <= 4;\nloop invariant x - y <= 2;\nloop invariant y - x <= 2;\nloop invariant x + y >= 0;\nloop invariant x - y >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y;\nloop invariant x >= 2 * y;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 2;\nloop invariant 0 <= y <= 2;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x <= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x <= 4;\nloop invariant y <= 4;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x <= 4;\nloop invariant y <= 4;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x <= 4;\nloop invariant y <= 4;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x <= 4;\nloop invariant y <= 4;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x <= 4;\nloop invariant y <= 4;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x <= 4;\nloop invariant y <= 4;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x <= 4;\nloop invariant y <= 4;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x <= 4;\nloop invariant y <= 4;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x <= 4;\nloop invariant y <= 4;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x <= 4;\nloop invariant y <= 4;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x <= 4;\nloop invariant y <= 4;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x <= 4;\nloop invariant y <= 4;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x <= 4;\nloop invariant y <= 4;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x <= 4;\nloop invariant y <= 4;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x <= 4;\nloop invariant y <= 4;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x <= 4;\nloop invariant y <= 4;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x <= 4;\nloop invariant y <= 4;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x <= 4;\nloop invariant y <= 4;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x <= 4;\nloop invariant y <= 4;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x <= 4;\nloop invariant y <= 4;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x <= 4;\nloop invariant y <= 4;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x <= 4;\nloop invariant y <= 4;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int x = unknown();\n  int y = unknown();\n\n  assume(0 <= x);  assume(x <= 2);\n  assume(0 <= y);  assume(y <= 2);\n\n  if (x >= 0 && x <= 2 && y >= 0 && y <= 2) {\n  /*@\n\n\nloop invariant i3: x >= 0;\nloop invariant i4: y >= 0;\n\n\n\n\n\n*/\nwhile( unknown() ) {\n\tx+=2;\n\ty+=2;\n  }\n  if( y >= 0 ) \n    if( y <= 0 ) \n      if( 4 <= x ) \n\t{;\n//@ assert( x < 4 );\n}\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 8,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 2;\nloop invariant 0 <= y <= 2;\nloop invariant y >= 0 ==> x >= y;\nloop invariant x <= 4 ==> y >= -1;\nloop invariant y >= 0 ==> x <= 2;\nloop invariant x >= 0 ==> y >= 0;\nloop invariant x <= 2 ==> y <= 2;\nloop invariant y < 0 ==> x <= -1;\nloop invariant x >= 0 ==> x <= 2;\nloop invariant y <= 0 ==> y <= 0;\nloop invariant x >= -1 ==> x <= 4;\nloop invariant x >= 4 ==> x < 4;\nloop invariant x >= 0 ==> x <= 4;\nloop invariant y >= -1 ==> y <= 2;\nloop invariant x <= -1 ==> x <= -1;\nloop invariant y <= 2 ==> y <= 2;\nloop invariant y >= 2 ==> y < 0;\nloop invariant y >= -1 ==> y <= 4;\nloop invariant y >= 4 ==> y < 0;\nloop invariant x >= 4 ==> x < 4;\nloop invariant x <= 4 ==> x <= 4;\nloop invariant y <= 4 ==> y <= 2;\nloop invariant x >= -1 ==> x <= 2;\nloop invariant y >= 0 ==> y >= 0;\nloop invariant x >= 2 ==> x >= 2;\nloop invariant y <= 4 ==> y >= -1;\nloop invariant y >= 2 ==> y >= 0;\nloop invariant x >= 2 ==> x >= 0;\nloop invariant y <= 2 ==> y >= -1;\nloop invariant x <= 4 ==> x >= -1;\nloop invariant x >= 4 ==> x >= -1;\nloop invariant y <= 4 ==> y >= 0;\nloop invariant x >= -1 ==> x <= 2;\nloop invariant y >= -1 ==> y >= -1;\nloop invariant x <= 2 ==> x <= 4;\nloop invariant y <= 2 ==> y >= -1;\nloop invariant x >= -1 ==> x >= -1;\nloop invariant y >= 0 ==> y <= 2;\nloop invariant x >= 2 ==> x <= 4;\nloop invariant y <= 2 ==> y >= 0;\nloop invariant x >= 0 ==> x <= 4;\nloop invariant y >= -1 ==> y <= 4;\nloop invariant x <= 4 ==> x >= 0;\nloop invariant y <= 4 ==> y >= -1;\nloop invariant x >= 0 ==> x >= -1;\nloop invariant y >= 0 ==> y >= -1;\nloop invariant x <= 4 ==> x >= -1;\nloop invariant y <= 4 ==> y >= 0;\nloop invariant x >= -1 ==> x <= 4;\nloop invariant y >= 0 ==> y >= -1;\nloop invariant x >= 0 ==> x <= 2;\nloop invariant y >= -1 ==> y <= 2;\nloop invariant x <= 2 ==> x >= -1;\nloop invariant y <= 2 ==> y >= -1;\nloop invariant x >= -1 ==> x <= 2;\nloop invariant y >= -1 ==> y <= 2;\nloop invariant x >= 0 ==> x <= 4;\nloop invariant y >= -1 ==> y <= 4;\nloop invariant x <= 4 ==> x >= 0;\nloop invariant y <= 4 ==> y >= -1;\nloop invariant x >= 0 ==> x <= 2;\nloop invariant y >= -1 ==> y <= 2;\nloop invariant x <= 2 ==> x >= 0;\nloop invariant y <= 2 ==> y >= -1;\nloop invariant x >= -1 ==> x <= 4;\nloop invariant y >= 0 ==> y <= 2;\nloop invariant x >= 0 ==> x <= 4;\nloop invariant y >= -1 ==> y <= 4;\nloop invariant x <= 4 ==> x >= 0;\nloop invariant y <= 4 ==> y >= -1;\nloop invariant x >= -1 ==> x <= 2;\nloop invariant y >= -1 ==> y <= 2;\nloop invariant x >= 0 ==> x <= 2;\nloop invariant y >= -1 ==> y <= 2;\nloop invariant x <= 2 ==> x >= -1;\nloop invariant y <= 2 ==> y >= -1;\nloop invariant x >= -1 ==> x <= 2;\nloop invariant y >= -1 ==> y <= 2;\nloop invariant x >= 0 ==> x <= 4;\nloop invariant y >= -1 ==> y <= 4;\nloop invariant x <= 4 ==> x >= 0;\nloop invariant y <= 4 ==> y >= -1;\nloop invariant x >= 0 ==> x <= 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int x = unknown();\n  int y = unknown();\n\n  assume(0 <= x);  assume(x <= 2);\n  assume(0 <= y);  assume(y <= 2);\n\n  if (x >= 0 && x <= 2 && y >= 0 && y <= 2) {\n  /*@\n\n\n\nloop invariant i4: x <= 4 ==> y >= -1;\n\nloop invariant i6: x >= 0 ==> y >= 0;\n\nloop invariant i8: y < 0 ==> x <= -1;\n\nloop invariant i10: y <= 0 ==> y <= 0;\n\n\n\n\nloop invariant i15: x <= -1 ==> x <= -1;\nloop invariant i16: y <= 2 ==> y <= 2;\n\n\n\nloop invariant i20: x <= 4 ==> x <= 4;\n\n\nloop invariant i23: y >= 0 ==> y >= 0;\nloop invariant i24: x >= 2 ==> x >= 2;\nloop invariant i25: y <= 4 ==> y >= -1;\nloop invariant i26: y >= 2 ==> y >= 0;\nloop invariant i27: x >= 2 ==> x >= 0;\nloop invariant i28: y <= 2 ==> y >= -1;\nloop invariant i29: x <= 4 ==> x >= -1;\nloop invariant i30: x >= 4 ==> x >= -1;\nloop invariant i31: y <= 4 ==> y >= 0;\nloop invariant i32: y >= -1 ==> y >= -1;\nloop invariant i33: x <= 2 ==> x <= 4;\nloop invariant i34: x >= -1 ==> x >= -1;\n\n\nloop invariant i37: y <= 2 ==> y >= 0;\nloop invariant i38: x <= 4 ==> x >= 0;\nloop invariant i39: x >= 0 ==> x >= -1;\nloop invariant i40: y >= 0 ==> y >= -1;\nloop invariant i41: x <= 2 ==> x >= -1;\nloop invariant i42: x <= 2 ==> x >= 0;\n*/\nwhile( unknown() ) {\n\tx+=2;\n\ty+=2;\n  }\n  if( y >= 0 ) \n    if( y <= 0 ) \n      if( 4 <= x ) \n\t{;\n//@ assert( x < 4 );\n}\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 2;\nloop invariant 0 <= y <= 2;\nloop invariant x >= 4 - 2 * (0 <= y <= 2);\nloop invariant y >= x - 2 * (0 <= x <= 2);\nloop invariant x >= 4 - 2 * (0 <= y <= 2) ==> x < 4;\nloop invariant y >= x - 2 * (0 <= x <= 2) ==> y <= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int x = unknown();\n  int y = unknown();\n\n  assume(0 <= x);  assume(x <= 2);\n  assume(0 <= y);  assume(y <= 2);\n\n  if (x >= 0 && x <= 2 && y >= 0 && y <= 2) {\n  /*@\n\n\n\n\n\n\n*/\nwhile( unknown() ) {\n\tx+=2;\n\ty+=2;\n  }\n  if( y >= 0 ) \n    if( y <= 0 ) \n      if( 4 <= x ) \n\t{;\n//@ assert( x < 4 );\n}\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 2;\nloop invariant 0 <= y <= 2;\nloop invariant x + y >= 0;\nloop invariant x + y <= 4;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int x = unknown();\n  int y = unknown();\n\n  assume(0 <= x);  assume(x <= 2);\n  assume(0 <= y);  assume(y <= 2);\n\n  if (x >= 0 && x <= 2 && y >= 0 && y <= 2) {\n  /*@\n\n\nloop invariant i3: x + y >= 0;\n\n*/\nwhile( unknown() ) {\n\tx+=2;\n\ty+=2;\n  }\n  if( y >= 0 ) \n    if( y <= 0 ) \n      if( 4 <= x ) \n\t{;\n//@ assert( x < 4 );\n}\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 67,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 2;\nloop invariant 0 <= y <= 2;\nloop invariant 0 <= x + y <= 4;\nloop invariant 0 <= y + 1 <= 3;\nloop invariant x + y + 1 <= 5;\nloop invariant 0 <= x + 2 <= 4;\nloop invariant 0 <= y + 2 <= 3;\nloop invariant x + y + 2 <= 5;\nloop invariant x + y + 2 <= 6;\nloop invariant 0 <= x + 4 <= 4;\nloop invariant 0 <= y + 4 <= 3;\nloop invariant x + y + 4 <= 5;\nloop invariant x + y + 4 <= 6;\nloop invariant 0 <= x + 6 <= 4;\nloop invariant 0 <= y + 6 <= 3;\nloop invariant x + y + 6 <= 5;\nloop invariant x + y + 6 <= 6;\nloop invariant 0 <= x + 8 <= 4;\nloop invariant 0 <= y + 8 <= 3;\nloop invariant x + y + 8 <= 5;\nloop invariant x + y + 8 <= 6;\nloop invariant 0 <= x + 10 <= 4;\nloop invariant 0 <= y + 10 <= 3;\nloop invariant x + y + 10 <= 5;\nloop invariant x + y + 10 <= 6;\nloop invariant 0 <= x + 12 <= 4;\nloop invariant 0 <= y + 12 <= 3;\nloop invariant x + y + 12 <= 5;\nloop invariant x + y + 12 <= 6;\nloop invariant 0 <= x + 14 <= 4;\nloop invariant 0 <= y + 14 <= 3;\nloop invariant x + y + 14 <= 5;\nloop invariant x + y + 14 <= 6;\nloop invariant 0 <= x + 16 <= 4;\nloop invariant 0 <= y + 16 <= 3;\nloop invariant x + y + 16 <= 5;\nloop invariant x + y + 16 <= 6;\nloop invariant 0 <= x + 18 <= 4;\nloop invariant 0 <= y + 18 <= 3;\nloop invariant x + y + 18 <= 5;\nloop invariant x + y + 18 <= 6;\nloop invariant 0 <= x + 20 <= 4;\nloop invariant 0 <= y + 20 <= 3;\nloop invariant x + y + 20 <= 5;\nloop invariant x + y + 20 <= 6;\nloop invariant 0 <= x + 22 <= 4;\nloop invariant 0 <= y + 22 <= 3;\nloop invariant x + y + 22 <= 5;\nloop invariant x + y + 22 <= 6;\nloop invariant 0 <= x + 24 <= 4;\nloop invariant 0 <= y + 24 <= 3;\nloop invariant x + y + 24 <= 5;\nloop invariant x + y + 24 <= 6;\nloop invariant 0 <= x + 26 <= 4;\nloop invariant 0 <= y + 26 <= 3;\nloop invariant x + y + 26 <= 5;\nloop invariant x + y + 26 <= 6;\nloop invariant 0 <= x + 28 <= 4;\nloop invariant 0 <= y + 28 <= 3;\nloop invariant x + y + 28 <= 5;\nloop invariant x + y + 28 <= 6;\nloop invariant 0 <= x + 30 <= 4;\nloop invariant 0 <= y + 30 <= 3;\nloop invariant x + y + 30 <= 5;\nloop invariant x + y + 30 <= 6;\nloop invariant 0 <= x + 32 <= 4;\nloop invariant 0 <= y + 32 <= 3;\nloop invariant x + y + 32 <= 5;\nloop invariant x + y + 32 <= 6;\nloop invariant 0 <= x + 34 <= 4;\nloop invariant 0 <= y + 34 <= 3;\nloop invariant x + y + 34 <= 5;\nloop invariant x + y + 34 <= 6;\nloop invariant 0 <= x + 36 <= 4;\nloop invariant 0 <= y + 36 <= 3;\nloop invariant x + y + 36 <= 5;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int x = unknown();\n  int y = unknown();\n\n  assume(0 <= x);  assume(x <= 2);\n  assume(0 <= y);  assume(y <= 2);\n\n  if (x >= 0 && x <= 2 && y >= 0 && y <= 2) {\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile( unknown() ) {\n\tx+=2;\n\ty+=2;\n  }\n  if( y >= 0 ) \n    if( y <= 0 ) \n      if( 4 <= x ) \n\t{;\n//@ assert( x < 4 );\n}\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 2;\nloop invariant 0 <= y <= 2;\nloop invariant x >= 4;\nloop invariant x < 4;\nloop invariant implies the post-condition `@ assert(x < 4);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int x = unknown();\n  int y = unknown();\n\n  assume(0 <= x);  assume(x <= 2);\n  assume(0 <= y);  assume(y <= 2);\n\n  if (x >= 0 && x <= 2 && y >= 0 && y <= 2) {\n  /*@\n\n\n\n\n\n*/\nwhile( unknown() ) {\n\tx+=2;\n\ty+=2;\n  }\n  if( y >= 0 ) \n    if( y <= 0 ) \n      if( 4 <= x ) \n\t{;\n//@ assert( x < 4 );\n}\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 4;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x <= 4;\nloop invariant y <= 4;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x <= 4;\nloop invariant y <= 4;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x <= 4;\nloop invariant y <= 4;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x <= 4;\nloop invariant y <= 4;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x <= 4;\nloop invariant y <= 4;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x <= 4;\nloop invariant y <= 4;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x <= 4;\nloop invariant y <= 4;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x <= 4;\nloop invariant y <= 4;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x <= 4;\nloop invariant y <= 4;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x <= 4;\nloop invariant y <= 4;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x <= 4;\nloop invariant y <= 4;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x <= 4;\nloop invariant y <= 4;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x <= 4;\nloop invariant y <= 4;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x <= 4;\nloop invariant y <= 4;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x <= 4;\nloop invariant y <= 4;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x <= 4;\nloop invariant y <= 4;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x <= 4;\nloop invariant y <= 4;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x <= 4;\nloop invariant y <= 4;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x <= 4;\nloop invariant y <= 4;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x <= 4;\nloop invariant y <= 4;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x <= 4;\nloop invariant y <= 4;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x <= 4;\nloop invariant y <= 4;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x <= 4;\nloop invariant y <= 4;\nloop invariant x >= 0;\nloop invariant y >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int x = unknown();\n  int y = unknown();\n\n  assume(0 <= x);  assume(x <= 2);\n  assume(0 <= y);  assume(y <= 2);\n\n  if (x >= 0 && x <= 2 && y >= 0 && y <= 2) {\n  /*@\n\n\nloop invariant i3: x >= 0;\nloop invariant i4: y >= 0;\n\n\n\n\n*/\nwhile( unknown() ) {\n\tx+=2;\n\ty+=2;\n  }\n  if( y >= 0 ) \n    if( y <= 0 ) \n      if( 4 <= x ) \n\t{;\n//@ assert( x < 4 );\n}\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant x >= 0;\nloop invariant x <= 2;\nloop invariant y >= 0;\nloop invariant y <= 2;\nloop invariant unknown() ==> (x >= 0 && x <= 2 && y >= 0 && y <= 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int x = unknown();\n  int y = unknown();\n\n  assume(0 <= x);  assume(x <= 2);\n  assume(0 <= y);  assume(y <= 2);\n\n  if (x >= 0 && x <= 2 && y >= 0 && y <= 2) {\n  /*@\nloop invariant i1: x >= 0;\n\nloop invariant i3: y >= 0;\n\n\n*/\nwhile( unknown() ) {\n\tx+=2;\n\ty+=2;\n  }\n  if( y >= 0 ) \n    if( y <= 0 ) \n      if( 4 <= x ) \n\t{;\n//@ assert( x < 4 );\n}\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 2;\nloop invariant 0 <= y <= 2;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant 0 <= x + y <= 4;\nloop invariant 0 <= 2 * y <= 4;\nloop invariant 4 <= x + 2 * y <= 8;\nloop invariant 2 <= x + y <= 8;\nloop invariant 0 <= x <= 2;\nloop invariant 0 <= y <= 2;\nloop invariant 0 <= x + y <= 4;\nloop invariant 0 <= 2 * y <= 4;\nloop invariant 4 <= x + 2 * y <= 8;\nloop invariant 2 <= x + y <= 8;\nloop invariant x + y >= 0;\nloop invariant x + y <= 8;\nloop invariant x + 2 * y >= 0;\nloop invariant x + 2 * y <= 8;\nloop invariant 0 <= x + y <= 8;\nloop invariant 0 <= x + 2 * y <= 8;\nloop invariant 0 <= x + 4 * y <= 8;\nloop invariant x + 4 * y >= 0;\nloop invariant x + 4 * y <= 8;\nloop invariant 0 <= x + 4 * y <= 8;\nloop invariant x + y >= 0;\nloop invariant x + y <= 8;\nloop invariant x + 2 * y >= 0;\nloop invariant x + 2 * y <= 8;\nloop invariant 0 <= x + 2 * y <= 8;\nloop invariant x + 4 * y >= 0;\nloop invariant x + 4 * y <= 8;\nloop invariant 0 <= x + 4 * y <= 8;\nloop invariant x + y >= 0;\nloop invariant x + y <= 8;\nloop invariant x + 2 * y >= 0;\nloop invariant x + 2 * y <= 8;\nloop invariant 0 <= x + 2 * y <= 8;\nloop invariant x + 4 * y >= 0;\nloop invariant x + 4 * y <= 8;\nloop invariant 0 <= x + 4 * y <= 8;\nloop invariant x + y >= 0;\nloop invariant x + y <= 8;\nloop invariant x + 2 * y >= 0;\nloop invariant x + 2 * y <= 8;\nloop invariant 0 <= x + 2 * y <= 8;\nloop invariant x + 4 * y >= 0;\nloop invariant x + 4 * y <= 8;\nloop invariant 0 <= x + 4 * y <= 8;\nloop invariant x + y >= 0;\nloop invariant x + y <= 8;\nloop invariant x + 2 * y >= 0;\nloop invariant x + 2 * y <= 8;\nloop invariant 0 <= x + 2 * y <= 8;\nloop invariant x + 4 * y >= 0;\nloop invariant x + 4 * y <= 8;\nloop invariant 0 <= x + 4 * y <= 8;\nloop invariant x + y >= 0;\nloop invariant x + y <= 8;\nloop invariant x + 2 * y >= 0;\nloop invariant x + 2 * y <= 8;\nloop invariant 0 <= x + 2 * y <= 8;\nloop invariant x + 4 * y >= 0;\nloop invariant x + 4 * y <= 8;\nloop invariant 0 <= x + 4 * y <= 8;\nloop invariant x + y >= 0;\nloop invariant x + y <= 8;\nloop invariant x + 2 * y >= 0;\nloop invariant x + 2 * y <= 8;\nloop invariant 0 <= x + 2 * y <= 8;\nloop invariant x + 4 * y >= 0;\nloop invariant x + 4 * y <= 8;\nloop invariant 0 <= x + 4 * y <= 8;\nloop invariant x + y >= 0;\nloop invariant x + y <= 8;\nloop invariant x + 2 * y >= 0;\nloop invariant x + 2 * y <= 8;\nloop invariant 0 <= x + 2 * y <= 8;\nloop invariant x + 4 * y >= 0;\nloop invariant x + 4 * y <= 8;\nloop invariant 0 <= x + 4 * y <= 8;\nloop invariant x + y >= 0;\nloop invariant x + y <= 8;\nloop invariant x + 2 * y >= 0;\nloop invariant x + 2 * y <= 8;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int x = unknown();\n  int y = unknown();\n\n  assume(0 <= x);  assume(x <= 2);\n  assume(0 <= y);  assume(y <= 2);\n\n  if (x >= 0 && x <= 2 && y >= 0 && y <= 2) {\n  /*@\n\n\nloop invariant i3: x >= 0;\nloop invariant i4: y >= 0;\n\n\n\n\nloop invariant i9: x + y >= 0;\n\nloop invariant i11: x + 2 * y >= 0;\n\n\n\n\nloop invariant i16: x + 4 * y >= 0;\n\n*/\nwhile( unknown() ) {\n\tx+=2;\n\ty+=2;\n  }\n  if( y >= 0 ) \n    if( y <= 0 ) \n      if( 4 <= x ) \n\t{;\n//@ assert( x < 4 );\n}\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 9,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 2;\nloop invariant 0 <= y <= 2;\nloop invariant 0 <= y <= 2 ==> x >= 0;\nloop invariant 0 <= x <= 2 ==> y >= 0;\nloop invariant 0 <= y <= 2 ==> x <= 2;\nloop invariant 0 <= x <= 2 ==> y <= 2;\nloop invariant 0 <= y <= 2 ==> x <= 2 ==> x >= 0;\nloop invariant 0 <= y <= 2 ==> x <= 2 ==> y >= 0;\nloop invariant 0 <= y <= 2 ==> x <= 2 ==> x <= 2;\nloop invariant 0 <= y <= 2 ==> x <= 2 ==> y <= 2;\nloop invariant 0 <= y <= 2 ==> x <= 2 ==> x <= 2 ==> x >= 0;\nloop invariant 0 <= y <= 2 ==> x <= 2 ==> y >= 0 ==> x <= 2;\nloop invariant 0 <= y <= 2 ==> x <= 2 ==> x <= 2 ==> y <= 2;\nloop invariant 0 <= y <= 2 ==> x <= 2 ==> x <= 2 ==> x >= 0 ==> x <= 2;\nloop invariant 0 <= y <= 2 ==> x <= 2 ==> y >= 0 ==> x <= 2 ==> y <= 2;\nloop invariant 0 <= y <= 2 ==> x <= 2 ==> x <= 2 ==> y <= 2 ==> x >= 0;\nloop invariant 0 <= y <= 2 ==> x <= 2 ==> x <= 2 ==> y <= 2 ==> x <= 2 ==> y >= 0;\nloop invariant 0 <= y <= 2 ==> x <= 2 ==> x <= 2 ==> y <= 2 ==> x <= 2 ==> y <= 2;\nloop invariant 0 <= y <= 2 ==> x <= 2 ==> x <= 2 ==> y <= 2 ==> x >= 0 ==> x <= 2 ==> y <= 2;\nloop invariant 0 <= y <= 2 ==> x <= 2 ==> y >= 0 ==> x <= 2 ==> y <= 2 ==> x >= 0;\nloop invariant 0 <= y <= 2 ==> x <= 2 ==> x <= 2 ==> y <= 2 ==> x <= 2 ==> y <= 2 ==> x >= 0;\nloop invariant 0 <= y <= 2 ==> x <= 2 ==> x <= 2 ==> y <= 2 ==> x <= 2 ==> y <= 2 ==> x <= 2 ==> y >= 0;\nloop invariant 0 <= y <= 2 ==> x <= 2 ==> x <= 2 ==> y <= 2 ==> x >= 0 ==> x <= 2 ==> y <= 2 ==> y >= 0;\nloop invariant 0 <= y <= 2 ==> x <= 2 ==> y >= 0 ==> x <= 2 ==> y <= 2 ==> x >= 0 ==> x <= 2 ==> y <= 2;\nloop invariant 0 <= y <= 2 ==> x <= 2 ==> x <= 2 ==> y <= 2 ==> x <= 2 ==> y <= 2 ==> x >= 0 ==> x <= 2 ==> y <= 2;\nloop invariant 0 <= y <= 2 ==> x <= 2 ==> x <= 2 ==> y <= 2 ==> x <= 2 ==> y <= 2 ==> x <= 2 ==> y >= 0 ==> x >= 0;\nloop invariant 0 <= y <= 2 ==> x <= 2 ==> x <= 2 ==> y <= 2 ==> x >= 0 ==> x <= 2 ==> y <= 2 ==> y >= 0 ==> x <= 2;\nloop invariant 0 <= y <= 2 ==> x <= 2 ==> y >= 0 ==> x <= 2 ==> y <= 2 ==> x >= 0 ==> x <= 2 ==> y <= 2 ==> x <= 2;\nloop invariant 0 <= y <= 2 ==> x <= 2 ==> x <= 2 ==> y <= 2 ==> x <= 2 ==> y <= 2 ==> x >= 0 ==> x <= 2 ==> y <= 2 ==> y >= 0;\nloop invariant 0 <= y <= 2 ==> x <= 2 ==> x <= 2 ==> y <= 2 ==> x <= 2 ==> y <= 2 ==> x <= 2 ==> y >= 0 ==> x >= 0 ==> x <= 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int x = unknown();\n  int y = unknown();\n\n  assume(0 <= x);  assume(x <= 2);\n  assume(0 <= y);  assume(y <= 2);\n\n  if (x >= 0 && x <= 2 && y >= 0 && y <= 2) {\n  /*@\n\n\n\n\n\n\n\nloop invariant i8: 0 <= y <= 2 ==> x <= 2 ==> y >= 0;\nloop invariant i9: 0 <= y <= 2 ==> x <= 2 ==> x <= 2;\nloop invariant i10: 0 <= y <= 2 ==> x <= 2 ==> y <= 2;\n\nloop invariant i12: 0 <= y <= 2 ==> x <= 2 ==> y >= 0 ==> x <= 2;\nloop invariant i13: 0 <= y <= 2 ==> x <= 2 ==> x <= 2 ==> y <= 2;\nloop invariant i14: 0 <= y <= 2 ==> x <= 2 ==> x <= 2 ==> x >= 0 ==> x <= 2;\nloop invariant i15: 0 <= y <= 2 ==> x <= 2 ==> y >= 0 ==> x <= 2 ==> y <= 2;\n\nloop invariant i17: 0 <= y <= 2 ==> x <= 2 ==> x <= 2 ==> y <= 2 ==> x <= 2 ==> y >= 0;\nloop invariant i18: 0 <= y <= 2 ==> x <= 2 ==> x <= 2 ==> y <= 2 ==> x <= 2 ==> y <= 2;\nloop invariant i19: 0 <= y <= 2 ==> x <= 2 ==> x <= 2 ==> y <= 2 ==> x >= 0 ==> x <= 2 ==> y <= 2;\n\n\nloop invariant i22: 0 <= y <= 2 ==> x <= 2 ==> x <= 2 ==> y <= 2 ==> x <= 2 ==> y <= 2 ==> x <= 2 ==> y >= 0;\nloop invariant i23: 0 <= y <= 2 ==> x <= 2 ==> x <= 2 ==> y <= 2 ==> x >= 0 ==> x <= 2 ==> y <= 2 ==> y >= 0;\nloop invariant i24: 0 <= y <= 2 ==> x <= 2 ==> y >= 0 ==> x <= 2 ==> y <= 2 ==> x >= 0 ==> x <= 2 ==> y <= 2;\nloop invariant i25: 0 <= y <= 2 ==> x <= 2 ==> x <= 2 ==> y <= 2 ==> x <= 2 ==> y <= 2 ==> x >= 0 ==> x <= 2 ==> y <= 2;\n\nloop invariant i27: 0 <= y <= 2 ==> x <= 2 ==> x <= 2 ==> y <= 2 ==> x >= 0 ==> x <= 2 ==> y <= 2 ==> y >= 0 ==> x <= 2;\nloop invariant i28: 0 <= y <= 2 ==> x <= 2 ==> y >= 0 ==> x <= 2 ==> y <= 2 ==> x >= 0 ==> x <= 2 ==> y <= 2 ==> x <= 2;\nloop invariant i29: 0 <= y <= 2 ==> x <= 2 ==> x <= 2 ==> y <= 2 ==> x <= 2 ==> y <= 2 ==> x >= 0 ==> x <= 2 ==> y <= 2 ==> y >= 0;\nloop invariant i30: 0 <= y <= 2 ==> x <= 2 ==> x <= 2 ==> y <= 2 ==> x <= 2 ==> y <= 2 ==> x <= 2 ==> y >= 0 ==> x >= 0 ==> x <= 2;\n*/\nwhile( unknown() ) {\n\tx+=2;\n\ty+=2;\n  }\n  if( y >= 0 ) \n    if( y <= 0 ) \n      if( 4 <= x ) \n\t{;\n//@ assert( x < 4 );\n}\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 2;\nloop invariant 0 <= y <= 2;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x >= 2;\nloop invariant y >= 0;\nloop invariant x >= 2;\nloop invariant y >= 0;\nloop invariant x >= 4;\nloop invariant y >= 0;\nloop invariant x < 4;\nloop invariant y >= 0;\nloop invariant x < 4;\nloop invariant y >= 0;\nloop invariant x < 4;\nloop invariant y >= 0;\nloop invariant x < 4;\nloop invariant y >= 0;\nloop invariant x < 4;\nloop invariant y >= 0;\nloop invariant x < 4;\nloop invariant y >= 0;\nloop invariant x < 4;\nloop invariant y >= 0;\nloop invariant x < 4;\nloop invariant y >= 0;\nloop invariant x < 4;\nloop invariant y >= 0;\nloop invariant x < 4;\nloop invariant y >= 0;\nloop invariant x < 4;\nloop invariant y >= 0;\nloop invariant x < 4;\nloop invariant y >= 0;\nloop invariant x < 4;\nloop invariant y >= 0;\nloop invariant x < 4;\nloop invariant y >= 0;\nloop invariant x < 4;\nloop invariant y >= 0;\nloop invariant x < 4;\nloop invariant y >= 0;\nloop invariant x < 4;\nloop invariant y >= 0;\nloop invariant x < 4;\nloop invariant y >= 0;\nloop invariant x < 4;\nloop invariant y >= 0;\nloop invariant x < 4;\nloop invariant y >= 0;\nloop invariant x < 4;\nloop invariant y >= 0;\nloop invariant x < 4;\nloop invariant y >= 0;\nloop invariant x < 4;\nloop invariant y >= 0;\nloop invariant x < 4;\nloop invariant y >= 0;\nloop invariant x < 4;\nloop invariant y >= 0;\nloop invariant x < 4;\nloop invariant y >= 0;\nloop invariant x < 4;\nloop invariant y >= 0;\nloop invariant x < 4;\nloop invariant y >= 0;\nloop invariant x < 4;\nloop invariant y >= 0;\nloop invariant x < 4;\nloop invariant y >= 0;\nloop invariant x < 4;\nloop invariant y >= 0;\nloop invariant x < 4;\nloop invariant y >= 0;\nloop invariant x < 4;\nloop invariant y >= 0;\nloop invariant x < 4;\nloop invariant y >= 0;\nloop invariant x < 4;\nloop invariant y >= 0;\nloop invariant x < 4;\nloop invariant y >= 0;\nloop invariant x < 4;\nloop invariant y >= 0;\nloop invariant x < 4;\nloop invariant y >= 0;\nloop invariant x < 4;\nloop invariant y >= 0;\nloop invariant x < 4;\nloop invariant y >= 0;\nloop invariant x < 4;\nloop invariant y >= 0;\nloop invariant x < 4;\nloop invariant y >= 0;\nloop invariant x < 4;\nloop invariant y >= 0;\nloop invariant x < 4;\nloop invariant y >= 0;\nloop invariant x < 4;\nloop invariant y >= 0;\nloop invariant x < 4;\nloop invariant y >= 0;\nloop invariant x < 4;\nloop invariant y >= 0;\nloop invariant x < 4;\nloop invariant y >= 0;\nloop invariant x < 4;\nloop invariant y >= 0;\nloop invariant x < 4;\nloop invariant y >= 0;\nloop invariant x < 4;\nloop invariant y >= 0;\nloop invariant x < 4;\nloop invariant y >= 0;\nloop invariant x < 4;\nloop invariant y >= 0;\nloop invariant x < 4;\nloop invariant y >= 0;\nloop invariant x < 4;\nloop invariant y >= 0;\nloop invariant x < 4;\nloop invariant y >= 0;\nloop invariant x < 4;\nloop invariant y >= 0;\nloop invariant x < 4;\nloop invariant y >= 0;\nloop invariant x < 4;\nloop invariant y >= 0;\nloop invariant x < 4;\nloop invariant y >= 0;\nloop invariant x < 4;\nloop invariant y >= 0;\nloop invariant x < 4;\nloop invariant y >= 0;\nloop invariant x < 4;\nloop invariant y >= 0;\nloop invariant x < 4;\nloop invariant y >= 0;\nloop invariant x < 4;\nloop invariant y >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int x = unknown();\n  int y = unknown();\n\n  assume(0 <= x);  assume(x <= 2);\n  assume(0 <= y);  assume(y <= 2);\n\n  if (x >= 0 && x <= 2 && y >= 0 && y <= 2) {\n  /*@\n\n\nloop invariant i3: x >= 0;\nloop invariant i4: y >= 0;\n\n\n\n\n\n*/\nwhile( unknown() ) {\n\tx+=2;\n\ty+=2;\n  }\n  if( y >= 0 ) \n    if( y <= 0 ) \n      if( 4 <= x ) \n\t{;\n//@ assert( x < 4 );\n}\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 2;\nloop invariant 0 <= x <= 4;\nloop invariant y <= x;\nloop invariant x < 4;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int x = unknown();\n  int y = unknown();\n\n  assume(0 <= x);  assume(x <= 2);\n  assume(0 <= y);  assume(y <= 2);\n\n  if (x >= 0 && x <= 2 && y >= 0 && y <= 2) {\n  /*@\n\n\n\n\n*/\nwhile( unknown() ) {\n\tx+=2;\n\ty+=2;\n  }\n  if( y >= 0 ) \n    if( y <= 0 ) \n      if( 4 <= x ) \n\t{;\n//@ assert( x < 4 );\n}\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 2;\nloop invariant 0 <= y <= 2;\nloop invariant 2 <= x + y <= 4;\nloop invariant 0 <= x - y <= 2;\nloop invariant 0 <= y - x <= 2;\nloop invariant x + y >= 0;\nloop invariant x - y >= 0;\nloop invariant y - x >= 0;\nloop invariant x + y <= 4;\nloop invariant x - y <= 2;\nloop invariant y - x <= 2;\nloop invariant x + y >= 0;\nloop invariant x - y >= 0;\nloop invariant y - x >= 0;\nloop invariant x + y <= 4;\nloop invariant x - y <= 2;\nloop invariant y - x <= 2;\nloop invariant x + y >= 0;\nloop invariant x - y >= 0;\nloop invariant y - x >= 0;\nloop invariant x + y <= 4;\nloop invariant x - y <= 2;\nloop invariant y - x <= 2;\nloop invariant x + y >= 0;\nloop invariant x - y >= 0;\nloop invariant y - x >= 0;\nloop invariant x + y <= 4;\nloop invariant x - y <= 2;\nloop invariant y - x <= 2;\nloop invariant x + y >= 0;\nloop invariant x - y >= 0;\nloop invariant y - x >= 0;\nloop invariant x + y <= 4;\nloop invariant x - y <= 2;\nloop invariant y - x <= 2;\nloop invariant x + y >= 0;\nloop invariant x - y >= 0;\nloop invariant y - x >= 0;\nloop invariant x + y <= 4;\nloop invariant x - y <= 2;\nloop invariant y - x <= 2;\nloop invariant x + y >= 0;\nloop invariant x - y >= 0;\nloop invariant y - x >= 0;\nloop invariant x + y <= 4;\nloop invariant x - y <= 2;\nloop invariant y - x <= 2;\nloop invariant x + y >= 0;\nloop invariant x - y >= 0;\nloop invariant y - x >= 0;\nloop invariant x + y <= 4;\nloop invariant x - y <= 2;\nloop invariant y - x <= 2;\nloop invariant x + y >= 0;\nloop invariant x - y >= 0;\nloop invariant y - x >= 0;\nloop invariant x + y <= 4;\nloop invariant x - y <= 2;\nloop invariant y - x <= 2;\nloop invariant x + y >= 0;\nloop invariant x - y >= 0;\nloop invariant y - x >= 0;\nloop invariant x + y <= 4;\nloop invariant x - y <= 2;\nloop invariant y - x <= 2;\nloop invariant x + y >= 0;\nloop invariant x - y >= 0;\nloop invariant y - x >= 0;\nloop invariant x + y <= 4;\nloop invariant x - y <= 2;\nloop invariant y - x <= 2;\nloop invariant x + y >= 0;\nloop invariant x - y >= 0;\nloop invariant y - x >= 0;\nloop invariant x + y <= 4;\nloop invariant x - y <= 2;\nloop invariant y - x <= 2;\nloop invariant x + y >= 0;\nloop invariant x - y >= 0;\nloop invariant y - x >= 0;\nloop invariant x + y <= 4;\nloop invariant x - y <= 2;\nloop invariant y - x <= 2;\nloop invariant x + y >= 0;\nloop invariant x - y >= 0;\nloop invariant y - x >= 0;\nloop invariant x + y <= 4;\nloop invariant x - y <= 2;\nloop invariant y - x <= 2;\nloop invariant x + y >= 0;\nloop invariant x - y >= 0;\nloop invariant y - x >= 0;\nloop invariant x + y <= 4;\nloop invariant x - y <= 2;\nloop invariant y - x <= 2;\nloop invariant x + y >= 0;\nloop invariant x - y >= 0;\nloop invariant y - x >= 0;\nloop invariant x + y <= 4;\nloop invariant x - y <= 2;\nloop invariant y - x <= 2;\nloop invariant x + y >= 0;\nloop invariant x - y >= 0;\nloop invariant y - x >= 0;\nloop invariant x + y <= 4;\nloop invariant x - y <= 2;\nloop invariant y - x <= 2;\nloop invariant x + y >= 0;\nloop invariant x - y >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int x = unknown();\n  int y = unknown();\n\n  assume(0 <= x);  assume(x <= 2);\n  assume(0 <= y);  assume(y <= 2);\n\n  if (x >= 0 && x <= 2 && y >= 0 && y <= 2) {\n  /*@\n\n\n\n\n\nloop invariant i6: x + y >= 0;\n\n\n\nloop invariant i10: x - y <= 2;\nloop invariant i11: y - x <= 2;\n*/\nwhile( unknown() ) {\n\tx+=2;\n\ty+=2;\n  }\n  if( y >= 0 ) \n    if( y <= 0 ) \n      if( 4 <= x ) \n\t{;\n//@ assert( x < 4 );\n}\n\n  }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int x = unknown();\n  int y = unknown();\n\n  assume(0 <= x);  assume(x <= 2);\n  assume(0 <= y);  assume(y <= 2);\n\n  if (x >= 0 && x <= 2 && y >= 0 && y <= 2) {\n  /*@\n\n\n*/\nwhile( unknown() ) {\n\tx+=2;\n\ty+=2;\n  }\n  if( y >= 0 ) \n    if( y <= 0 ) \n      if( 4 <= x ) \n\t{;\n//@ assert( x < 4 );\n}\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y;\nloop invariant x >= 2 * y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int x = unknown();\n  int y = unknown();\n\n  assume(0 <= x);  assume(x <= 2);\n  assume(0 <= y);  assume(y <= 2);\n\n  if (x >= 0 && x <= 2 && y >= 0 && y <= 2) {\n  /*@\nloop invariant i1: 0 <= y;\n\n*/\nwhile( unknown() ) {\n\tx+=2;\n\ty+=2;\n  }\n  if( y >= 0 ) \n    if( y <= 0 ) \n      if( 4 <= x ) \n\t{;\n//@ assert( x < 4 );\n}\n\n  }\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 151: unexpected token 'the'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int x = unknown();\n  int y = unknown();\n\n  assume(0 <= x);  assume(x <= 2);\n  assume(0 <= y);  assume(y <= 2);\n\n  if (x >= 0 && x <= 2 && y >= 0 && y <= 2) {\n  /*@\nloop invariant i1: 0 <= x <= 2;\nloop invariant i2: 0 <= y <= 2;\nloop invariant i3: x >= 0;\nloop invariant i4: y >= 0;\nloop invariant i5: x <= 2;\nloop invariant i6: y <= 2;\nloop invariant i7: x <= y;\nloop invariant i8: x <= 4;\nloop invariant i9: y <= 4;\nloop invariant i10: y >= 0 ==> x >= y;\nloop invariant i11: x <= 4 ==> y >= -1;\nloop invariant i12: y >= 0 ==> x <= 2;\nloop invariant i13: x >= 0 ==> y >= 0;\nloop invariant i14: x <= 2 ==> y <= 2;\nloop invariant i15: y < 0 ==> x <= -1;\nloop invariant i16: x >= 0 ==> x <= 2;\nloop invariant i17: y <= 0 ==> y <= 0;\nloop invariant i18: x >= -1 ==> x <= 4;\nloop invariant i19: x >= 4 ==> x < 4;\nloop invariant i20: x >= 0 ==> x <= 4;\nloop invariant i21: y >= -1 ==> y <= 2;\nloop invariant i22: x <= -1 ==> x <= -1;\nloop invariant i23: y <= 2 ==> y <= 2;\nloop invariant i24: y >= 2 ==> y < 0;\nloop invariant i25: y >= -1 ==> y <= 4;\nloop invariant i26: y >= 4 ==> y < 0;\nloop invariant i27: x <= 4 ==> x <= 4;\nloop invariant i28: y <= 4 ==> y <= 2;\nloop invariant i29: x >= -1 ==> x <= 2;\nloop invariant i30: y >= 0 ==> y >= 0;\nloop invariant i31: x >= 2 ==> x >= 2;\nloop invariant i32: y <= 4 ==> y >= -1;\nloop invariant i33: y >= 2 ==> y >= 0;\nloop invariant i34: x >= 2 ==> x >= 0;\nloop invariant i35: y <= 2 ==> y >= -1;\nloop invariant i36: x <= 4 ==> x >= -1;\nloop invariant i37: x >= 4 ==> x >= -1;\nloop invariant i38: y <= 4 ==> y >= 0;\nloop invariant i39: y >= -1 ==> y >= -1;\nloop invariant i40: x <= 2 ==> x <= 4;\nloop invariant i41: x >= -1 ==> x >= -1;\nloop invariant i42: y >= 0 ==> y <= 2;\nloop invariant i43: x >= 2 ==> x <= 4;\nloop invariant i44: y <= 2 ==> y >= 0;\nloop invariant i45: x <= 4 ==> x >= 0;\nloop invariant i46: x >= 0 ==> x >= -1;\nloop invariant i47: y >= 0 ==> y >= -1;\nloop invariant i48: x <= 2 ==> x >= -1;\nloop invariant i49: x <= 2 ==> x >= 0;\nloop invariant i50: x >= 4 - 2 * (0 <= y <= 2);\nloop invariant i51: y >= x - 2 * (0 <= x <= 2);\nloop invariant i52: x >= 4 - 2 * (0 <= y <= 2) ==> x < 4;\nloop invariant i53: y >= x - 2 * (0 <= x <= 2) ==> y <= 0;\nloop invariant i54: x + y >= 0;\nloop invariant i55: x + y <= 4;\nloop invariant i56: 0 <= x + y <= 4;\nloop invariant i57: 0 <= y + 1 <= 3;\nloop invariant i58: x + y + 1 <= 5;\nloop invariant i59: 0 <= x + 2 <= 4;\nloop invariant i60: 0 <= y + 2 <= 3;\nloop invariant i61: x + y + 2 <= 5;\nloop invariant i62: x + y + 2 <= 6;\nloop invariant i63: 0 <= x + 4 <= 4;\nloop invariant i64: 0 <= y + 4 <= 3;\nloop invariant i65: x + y + 4 <= 5;\nloop invariant i66: x + y + 4 <= 6;\nloop invariant i67: 0 <= x + 6 <= 4;\nloop invariant i68: 0 <= y + 6 <= 3;\nloop invariant i69: x + y + 6 <= 5;\nloop invariant i70: x + y + 6 <= 6;\nloop invariant i71: 0 <= x + 8 <= 4;\nloop invariant i72: 0 <= y + 8 <= 3;\nloop invariant i73: x + y + 8 <= 5;\nloop invariant i74: x + y + 8 <= 6;\nloop invariant i75: 0 <= x + 10 <= 4;\nloop invariant i76: 0 <= y + 10 <= 3;\nloop invariant i77: x + y + 10 <= 5;\nloop invariant i78: x + y + 10 <= 6;\nloop invariant i79: 0 <= x + 12 <= 4;\nloop invariant i80: 0 <= y + 12 <= 3;\nloop invariant i81: x + y + 12 <= 5;\nloop invariant i82: x + y + 12 <= 6;\nloop invariant i83: 0 <= x + 14 <= 4;\nloop invariant i84: 0 <= y + 14 <= 3;\nloop invariant i85: x + y + 14 <= 5;\nloop invariant i86: x + y + 14 <= 6;\nloop invariant i87: 0 <= x + 16 <= 4;\nloop invariant i88: 0 <= y + 16 <= 3;\nloop invariant i89: x + y + 16 <= 5;\nloop invariant i90: x + y + 16 <= 6;\nloop invariant i91: 0 <= x + 18 <= 4;\nloop invariant i92: 0 <= y + 18 <= 3;\nloop invariant i93: x + y + 18 <= 5;\nloop invariant i94: x + y + 18 <= 6;\nloop invariant i95: 0 <= x + 20 <= 4;\nloop invariant i96: 0 <= y + 20 <= 3;\nloop invariant i97: x + y + 20 <= 5;\nloop invariant i98: x + y + 20 <= 6;\nloop invariant i99: 0 <= x + 22 <= 4;\nloop invariant i100: 0 <= y + 22 <= 3;\nloop invariant i101: x + y + 22 <= 5;\nloop invariant i102: x + y + 22 <= 6;\nloop invariant i103: 0 <= x + 24 <= 4;\nloop invariant i104: 0 <= y + 24 <= 3;\nloop invariant i105: x + y + 24 <= 5;\nloop invariant i106: x + y + 24 <= 6;\nloop invariant i107: 0 <= x + 26 <= 4;\nloop invariant i108: 0 <= y + 26 <= 3;\nloop invariant i109: x + y + 26 <= 5;\nloop invariant i110: x + y + 26 <= 6;\nloop invariant i111: 0 <= x + 28 <= 4;\nloop invariant i112: 0 <= y + 28 <= 3;\nloop invariant i113: x + y + 28 <= 5;\nloop invariant i114: x + y + 28 <= 6;\nloop invariant i115: 0 <= x + 30 <= 4;\nloop invariant i116: 0 <= y + 30 <= 3;\nloop invariant i117: x + y + 30 <= 5;\nloop invariant i118: x + y + 30 <= 6;\nloop invariant i119: 0 <= x + 32 <= 4;\nloop invariant i120: 0 <= y + 32 <= 3;\nloop invariant i121: x + y + 32 <= 5;\nloop invariant i122: x + y + 32 <= 6;\nloop invariant i123: 0 <= x + 34 <= 4;\nloop invariant i124: 0 <= y + 34 <= 3;\nloop invariant i125: x + y + 34 <= 5;\nloop invariant i126: x + y + 34 <= 6;\nloop invariant i127: 0 <= x + 36 <= 4;\nloop invariant i128: 0 <= y + 36 <= 3;\nloop invariant i129: x + y + 36 <= 5;\nloop invariant i130: x >= 4;\nloop invariant i131: x < 4;\nloop invariant i132: implies the post-condition `@ assert(x < 4);\nloop invariant i133: 0 <= x <= 4;\nloop invariant i134: 0 <= y <= 4;\nloop invariant i135: unknown() ==> (x >= 0 && x <= 2 && y >= 0 && y <= 2);\nloop invariant i136: 0 <= 2 * y <= 4;\nloop invariant i137: 4 <= x + 2 * y <= 8;\nloop invariant i138: 2 <= x + y <= 8;\nloop invariant i139: x + y <= 8;\nloop invariant i140: x + 2 * y >= 0;\nloop invariant i141: x + 2 * y <= 8;\nloop invariant i142: 0 <= x + y <= 8;\nloop invariant i143: 0 <= x + 2 * y <= 8;\nloop invariant i144: 0 <= x + 4 * y <= 8;\nloop invariant i145: x + 4 * y >= 0;\nloop invariant i146: x + 4 * y <= 8;\nloop invariant i147: 0 <= y <= 2 ==> x >= 0;\nloop invariant i148: 0 <= x <= 2 ==> y >= 0;\nloop invariant i149: 0 <= y <= 2 ==> x <= 2;\nloop invariant i150: 0 <= x <= 2 ==> y <= 2;\nloop invariant i151: 0 <= y <= 2 ==> x <= 2 ==> x >= 0;\nloop invariant i152: 0 <= y <= 2 ==> x <= 2 ==> y >= 0;\nloop invariant i153: 0 <= y <= 2 ==> x <= 2 ==> x <= 2;\nloop invariant i154: 0 <= y <= 2 ==> x <= 2 ==> y <= 2;\nloop invariant i155: 0 <= y <= 2 ==> x <= 2 ==> x <= 2 ==> x >= 0;\nloop invariant i156: 0 <= y <= 2 ==> x <= 2 ==> y >= 0 ==> x <= 2;\nloop invariant i157: 0 <= y <= 2 ==> x <= 2 ==> x <= 2 ==> y <= 2;\nloop invariant i158: 0 <= y <= 2 ==> x <= 2 ==> x <= 2 ==> x >= 0 ==> x <= 2;\nloop invariant i159: 0 <= y <= 2 ==> x <= 2 ==> y >= 0 ==> x <= 2 ==> y <= 2;\nloop invariant i160: 0 <= y <= 2 ==> x <= 2 ==> x <= 2 ==> y <= 2 ==> x >= 0;\nloop invariant i161: 0 <= y <= 2 ==> x <= 2 ==> x <= 2 ==> y <= 2 ==> x <= 2 ==> y >= 0;\nloop invariant i162: 0 <= y <= 2 ==> x <= 2 ==> x <= 2 ==> y <= 2 ==> x <= 2 ==> y <= 2;\nloop invariant i163: 0 <= y <= 2 ==> x <= 2 ==> x <= 2 ==> y <= 2 ==> x >= 0 ==> x <= 2 ==> y <= 2;\nloop invariant i164: 0 <= y <= 2 ==> x <= 2 ==> y >= 0 ==> x <= 2 ==> y <= 2 ==> x >= 0;\nloop invariant i165: 0 <= y <= 2 ==> x <= 2 ==> x <= 2 ==> y <= 2 ==> x <= 2 ==> y <= 2 ==> x >= 0;\nloop invariant i166: 0 <= y <= 2 ==> x <= 2 ==> x <= 2 ==> y <= 2 ==> x <= 2 ==> y <= 2 ==> x <= 2 ==> y >= 0;\nloop invariant i167: 0 <= y <= 2 ==> x <= 2 ==> x <= 2 ==> y <= 2 ==> x >= 0 ==> x <= 2 ==> y <= 2 ==> y >= 0;\nloop invariant i168: 0 <= y <= 2 ==> x <= 2 ==> y >= 0 ==> x <= 2 ==> y <= 2 ==> x >= 0 ==> x <= 2 ==> y <= 2;\nloop invariant i169: 0 <= y <= 2 ==> x <= 2 ==> x <= 2 ==> y <= 2 ==> x <= 2 ==> y <= 2 ==> x >= 0 ==> x <= 2 ==> y <= 2;\nloop invariant i170: 0 <= y <= 2 ==> x <= 2 ==> x <= 2 ==> y <= 2 ==> x <= 2 ==> y <= 2 ==> x <= 2 ==> y >= 0 ==> x >= 0;\nloop invariant i171: 0 <= y <= 2 ==> x <= 2 ==> x <= 2 ==> y <= 2 ==> x >= 0 ==> x <= 2 ==> y <= 2 ==> y >= 0 ==> x <= 2;\nloop invariant i172: 0 <= y <= 2 ==> x <= 2 ==> y >= 0 ==> x <= 2 ==> y <= 2 ==> x >= 0 ==> x <= 2 ==> y <= 2 ==> x <= 2;\nloop invariant i173: 0 <= y <= 2 ==> x <= 2 ==> x <= 2 ==> y <= 2 ==> x <= 2 ==> y <= 2 ==> x >= 0 ==> x <= 2 ==> y <= 2 ==> y >= 0;\nloop invariant i174: 0 <= y <= 2 ==> x <= 2 ==> x <= 2 ==> y <= 2 ==> x <= 2 ==> y <= 2 ==> x <= 2 ==> y >= 0 ==> x >= 0 ==> x <= 2;\nloop invariant i175: x >= 2;\nloop invariant i176: y <= x;\nloop invariant i177: 2 <= x + y <= 4;\nloop invariant i178: 0 <= x - y <= 2;\nloop invariant i179: 0 <= y - x <= 2;\nloop invariant i180: x - y >= 0;\nloop invariant i181: y - x >= 0;\nloop invariant i182: x - y <= 2;\nloop invariant i183: y - x <= 2;\nloop invariant i184: 0 <= y <= 100000;\nloop invariant i185: x >= (1 + (y - 1) * y / 2);\nloop invariant i186: 0 <= y;\nloop invariant i187: x >= 2 * y;\n*/\nwhile( unknown() ) {\n\tx+=2;\n\ty+=2;\n  }\n  if( y >= 0 ) \n    if( y <= 0 ) \n      if( 4 <= x ) \n\t{;\n//@ assert( x < 4 );\n}\n\n  }\n}",
        "combined_annotation_num_solver_calls": 90,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int x = unknown();\n  int y = unknown();\n\n  assume(0 <= x);  assume(x <= 2);\n  assume(0 <= y);  assume(y <= 2);\n\n  if (x >= 0 && x <= 2 && y >= 0 && y <= 2) {\n  /*@\n\n\nloop invariant i3: x >= 0;\nloop invariant i4: y >= 0;\n\n\n\n\n\n\nloop invariant i11: x <= 4 ==> y >= -1;\n\nloop invariant i13: x >= 0 ==> y >= 0;\n\nloop invariant i15: y < 0 ==> x <= -1;\n\nloop invariant i17: y <= 0 ==> y <= 0;\n\n\n\n\nloop invariant i22: x <= -1 ==> x <= -1;\nloop invariant i23: y <= 2 ==> y <= 2;\n\n\n\nloop invariant i27: x <= 4 ==> x <= 4;\n\n\nloop invariant i30: y >= 0 ==> y >= 0;\nloop invariant i31: x >= 2 ==> x >= 2;\nloop invariant i32: y <= 4 ==> y >= -1;\nloop invariant i33: y >= 2 ==> y >= 0;\nloop invariant i34: x >= 2 ==> x >= 0;\nloop invariant i35: y <= 2 ==> y >= -1;\nloop invariant i36: x <= 4 ==> x >= -1;\nloop invariant i37: x >= 4 ==> x >= -1;\nloop invariant i38: y <= 4 ==> y >= 0;\nloop invariant i39: y >= -1 ==> y >= -1;\nloop invariant i40: x <= 2 ==> x <= 4;\nloop invariant i41: x >= -1 ==> x >= -1;\n\n\nloop invariant i44: y <= 2 ==> y >= 0;\nloop invariant i45: x <= 4 ==> x >= 0;\nloop invariant i46: x >= 0 ==> x >= -1;\nloop invariant i47: y >= 0 ==> y >= -1;\nloop invariant i48: x <= 2 ==> x >= -1;\nloop invariant i49: x <= 2 ==> x >= 0;\n\n\n\n\nloop invariant i54: x + y >= 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i140: x + 2 * y >= 0;\n\n\n\n\nloop invariant i145: x + 4 * y >= 0;\n\nloop invariant i147: 0 <= y <= 2 ==> x >= 0;\nloop invariant i148: 0 <= x <= 2 ==> y >= 0;\n\n\nloop invariant i151: 0 <= y <= 2 ==> x <= 2 ==> x >= 0;\nloop invariant i152: 0 <= y <= 2 ==> x <= 2 ==> y >= 0;\nloop invariant i153: 0 <= y <= 2 ==> x <= 2 ==> x <= 2;\nloop invariant i154: 0 <= y <= 2 ==> x <= 2 ==> y <= 2;\nloop invariant i155: 0 <= y <= 2 ==> x <= 2 ==> x <= 2 ==> x >= 0;\nloop invariant i156: 0 <= y <= 2 ==> x <= 2 ==> y >= 0 ==> x <= 2;\nloop invariant i157: 0 <= y <= 2 ==> x <= 2 ==> x <= 2 ==> y <= 2;\nloop invariant i158: 0 <= y <= 2 ==> x <= 2 ==> x <= 2 ==> x >= 0 ==> x <= 2;\nloop invariant i159: 0 <= y <= 2 ==> x <= 2 ==> y >= 0 ==> x <= 2 ==> y <= 2;\nloop invariant i160: 0 <= y <= 2 ==> x <= 2 ==> x <= 2 ==> y <= 2 ==> x >= 0;\nloop invariant i161: 0 <= y <= 2 ==> x <= 2 ==> x <= 2 ==> y <= 2 ==> x <= 2 ==> y >= 0;\nloop invariant i162: 0 <= y <= 2 ==> x <= 2 ==> x <= 2 ==> y <= 2 ==> x <= 2 ==> y <= 2;\nloop invariant i163: 0 <= y <= 2 ==> x <= 2 ==> x <= 2 ==> y <= 2 ==> x >= 0 ==> x <= 2 ==> y <= 2;\nloop invariant i164: 0 <= y <= 2 ==> x <= 2 ==> y >= 0 ==> x <= 2 ==> y <= 2 ==> x >= 0;\nloop invariant i165: 0 <= y <= 2 ==> x <= 2 ==> x <= 2 ==> y <= 2 ==> x <= 2 ==> y <= 2 ==> x >= 0;\nloop invariant i166: 0 <= y <= 2 ==> x <= 2 ==> x <= 2 ==> y <= 2 ==> x <= 2 ==> y <= 2 ==> x <= 2 ==> y >= 0;\nloop invariant i167: 0 <= y <= 2 ==> x <= 2 ==> x <= 2 ==> y <= 2 ==> x >= 0 ==> x <= 2 ==> y <= 2 ==> y >= 0;\nloop invariant i168: 0 <= y <= 2 ==> x <= 2 ==> y >= 0 ==> x <= 2 ==> y <= 2 ==> x >= 0 ==> x <= 2 ==> y <= 2;\nloop invariant i169: 0 <= y <= 2 ==> x <= 2 ==> x <= 2 ==> y <= 2 ==> x <= 2 ==> y <= 2 ==> x >= 0 ==> x <= 2 ==> y <= 2;\nloop invariant i170: 0 <= y <= 2 ==> x <= 2 ==> x <= 2 ==> y <= 2 ==> x <= 2 ==> y <= 2 ==> x <= 2 ==> y >= 0 ==> x >= 0;\nloop invariant i171: 0 <= y <= 2 ==> x <= 2 ==> x <= 2 ==> y <= 2 ==> x >= 0 ==> x <= 2 ==> y <= 2 ==> y >= 0 ==> x <= 2;\nloop invariant i172: 0 <= y <= 2 ==> x <= 2 ==> y >= 0 ==> x <= 2 ==> y <= 2 ==> x >= 0 ==> x <= 2 ==> y <= 2 ==> x <= 2;\nloop invariant i173: 0 <= y <= 2 ==> x <= 2 ==> x <= 2 ==> y <= 2 ==> x <= 2 ==> y <= 2 ==> x >= 0 ==> x <= 2 ==> y <= 2 ==> y >= 0;\nloop invariant i174: 0 <= y <= 2 ==> x <= 2 ==> x <= 2 ==> y <= 2 ==> x <= 2 ==> y <= 2 ==> x <= 2 ==> y >= 0 ==> x >= 0 ==> x <= 2;\n\n\n\n\n\n\n\nloop invariant i182: x - y <= 2;\nloop invariant i183: y - x <= 2;\n\n\nloop invariant i186: 0 <= y;\n\n*/\nwhile( unknown() ) {\n\tx+=2;\n\ty+=2;\n  }\n  if( y >= 0 ) \n    if( y <= 0 ) \n      if( 4 <= x ) \n\t{;\n//@ assert( x < 4 );\n}\n\n  }\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c"
        ],
        "skipped": [],
        "total": 28,
        "success_count": 26,
        "failure_count": 2,
        "success_rate": 0.9285714285714286
    }
}