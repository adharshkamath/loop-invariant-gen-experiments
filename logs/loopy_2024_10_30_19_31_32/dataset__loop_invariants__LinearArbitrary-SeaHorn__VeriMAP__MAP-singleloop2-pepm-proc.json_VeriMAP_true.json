{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n;\nint main() {\nint x=0;\nint y=0;\nint n = unknown_int();\n\n\tassume(n>=1);\n\n\twhile(x < 2*n){\n\t   x = x + 1;\n\n\t   if ( x > n )\n\t\t  y = y - 1;\n\t   else\n\t\t  y = y + 2;\n\t}\n\n\tif(x < y)\n\t\tgoto ERROR;\n\n\treturn 0;\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\treturn -1;\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= x <= 2*n;\nloop invariant x >= n ==> y >= 0;\nloop invariant x < n ==> y >= 2*x;\nloop invariant x >= n ==> y <= 0;\nloop invariant x < n ==> y <= 2*x;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 2*n;\nloop invariant 0 <= y <= n;\nloop invariant 0 <= n <= 100000;\nloop invariant x >= y;\nloop invariant x - y <= n;\nloop invariant x - y >= 0;\nloop invariant x - y <= n;\nloop invariant x - y >= 0;\nloop invariant x - y <= n;\nloop invariant x - y >= 0;\nloop invariant x - y <= n;\nloop invariant x - y >= 0;\nloop invariant x - y <= n;\nloop invariant x - y >= 0;\nloop invariant x - y <= n;\nloop invariant x - y >= 0;\nloop invariant x - y <= n;\nloop invariant x - y >= 0;\nloop invariant x - y <= n;\nloop invariant x - y >= 0;\nloop invariant x - y <= n;\nloop invariant x - y >= 0;\nloop invariant x - y <= n;\nloop invariant x - y >= 0;\nloop invariant x - y <= n;\nloop invariant x - y >= 0;\nloop invariant x - y <= n;\nloop invariant x - y >= 0;\nloop invariant x - y <= n;\nloop invariant x - y >= 0;\nloop invariant x - y <= n;\nloop invariant x - y >= 0;\nloop invariant x - y <= n;\nloop invariant x - y >= 0;\nloop invariant x - y <= n;\nloop invariant x - y >= 0;\nloop invariant x - y <= n;\nloop invariant x - y >= 0;\nloop invariant x - y <= n;\nloop invariant x - y >= 0;\nloop invariant x - y <= n;\nloop invariant x - y >= 0;\nloop invariant x - y <= n;\nloop invariant x - y >= 0;\nloop invariant x - y <= n;\nloop invariant x - y >= 0;\nloop invariant x - y <= n;\nloop invariant x - y >= 0;\nloop invariant x - y <= n;\nloop invariant x - y >= 0;\nloop invariant x - y <= n;\nloop invariant x - y >= 0;\nloop invariant x - y <= n;\nloop invariant x - y >= 0;\nloop invariant x - y <= n;\nloop invariant x - y >= 0;\nloop invariant x - y <= n;\nloop invariant x - y >= 0;\nloop invariant x - y <= n;\nloop invariant x - y >= 0;\nloop invariant x - y <= n;\nloop invariant x - y >= 0;\nloop invariant x - y <= n;\nloop invariant x - y >= 0;\nloop invariant x - y <= n;\nloop invariant x - y >= 0;\nloop invariant x - y <= n;\nloop invariant x - y >= 0;\nloop invariant x - y <= n;\nloop invariant x - y >= 0;\nloop invariant x - y <= n;\nloop invariant x - y >= 0;\nloop invariant x - y <= n;\nloop invariant x - y >= 0;\nloop invariant x - y <= n;\nloop invariant x - y >= 0;\nloop invariant x - y <= n;\nloop invariant x - y >= 0;\nloop invariant x - y <= n;\nloop invariant x - y >= 0;\nloop invariant x - y <= n;\nloop invariant x - y >= 0;\nloop invariant x - y <= n;\nloop invariant x - y >= 0;\nloop invariant x - y <= n;\nloop invariant x - y >= 0;\nloop invariant x - y <= n;\nloop invariant x - y >= 0;\nloop invariant x - y <= n;\nloop invariant x - y >= 0;\nloop invariant x - y <= n;\nloop invariant x - y >= 0;\nloop invariant x - y <= n;\nloop invariant x - y >= 0;\nloop invariant x - y <= n;\nloop invariant x - y >= 0;\nloop invariant x - y <= n;\nloop invariant x - y >= 0;\nloop invariant x - y <= n;\nloop invariant x - y >= 0;\nloop invariant x - y <= n;\nloop invariant x - y >= 0;\nloop invariant x - y <= n;\nloop invariant x - y >= 0;\nloop invariant x - y <= n;\nloop invariant x - y >= 0;\nloop invariant x - y <= n;\nloop invariant x - y >= 0;\nloop invariant x - y <= n;\nloop invariant x - y >= 0;\nloop invariant x - y <= n;\nloop invariant x - y >= 0;\nloop invariant x - y <= n;\nloop invariant x - y >= 0;\nloop invariant x - y <= n;\nloop invariant x - y >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 2*n;\nloop invariant 0 <= y <= 2*n;\nloop invariant x >= y;\nloop invariant x == n || y == 0;\nloop invariant (x <= n ==> y == 2*x) && (x > n ==> y == 2*x - 2*n);\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= 2*n;loop invariant y >= 0;loop invariant y <= 2*n;loop invariant y >= 2*x;loop invariant x >= n ==> y == 0;loop invariant x < n ==> y >= 2*x;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 2*n;\nloop invariant 0 <= y <= 2*n;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x == 0 ==> y == 0;\nloop invariant x < n ==> y >= 0;\nloop invariant x >= n ==> y <= 0;\nloop invariant x < n ==> y <= 2*y;\nloop invariant x >= n ==> y >= -2*y;\nloop invariant x < n ==> y <= 2*y;\nloop invariant x < n ==> y >= -2*y;\nloop invariant x < n ==> y >= 0;\nloop invariant x < n ==> y <= 2*y;\nloop invariant x >= n ==> y <= 0;\nloop invariant x >= n ==> y >= -2*y;\nloop invariant x < n ==> y >= 0;\nloop invariant x < n ==> y <= 2*y;\nloop invariant x >= n ==> y <= 0;\nloop invariant x >= n ==> y >= -2*y;\nloop invariant x < n ==> y >= 0;\nloop invariant x < n ==> y <= 2*y;\nloop invariant x >= n ==> y <= 0;\nloop invariant x >= n ==> y >= -2*y;\nloop invariant x < n ==> y >= 0;\nloop invariant x < n ==> y <= 2*y;\nloop invariant x >= n ==> y <= 0;\nloop invariant x >= n ==> y >= -2*y;\nloop invariant x < n ==> y >= 0;\nloop invariant x < n ==> y <= 2*y;\nloop invariant x >= n ==> y <= 0;\nloop invariant x >= n ==> y >= -2*y;\nloop invariant x < n ==> y >= 0;\nloop invariant x < n ==> y <= 2*y;\nloop invariant x >= n ==> y <= 0;\nloop invariant x >= n ==> y >= -2*y;\nloop invariant x < n ==> y >= 0;\nloop invariant x < n ==> y <= 2*y;\nloop invariant x >= n ==> y <= 0;\nloop invariant x >= n ==> y >= -2*y;\nloop invariant x < n ==> y >= 0;\nloop invariant x < n ==> y <= 2*y;\nloop invariant x >= n ==> y <= 0;\nloop invariant x >= n ==> y >= -2*y;\nloop invariant x < n ==> y >= 0;\nloop invariant x < n ==> y <= 2*y;\nloop invariant x >= n ==> y <= 0;\nloop invariant x >= n ==> y >= -2*y;\nloop invariant x < n ==> y >= 0;\nloop invariant x < n ==> y <= 2*y;\nloop invariant x >= n ==> y <= 0;\nloop invariant x >= n ==> y >= -2*y;\nloop invariant x < n ==> y >= 0;\nloop invariant x < n ==> y <= 2*y;\nloop invariant x >= n ==> y <= 0;\nloop invariant x >= n ==> y >= -2*y;\nloop invariant x < n ==> y >= 0;\nloop invariant x < n ==> y <= 2*y;\nloop invariant x >= n ==> y <= 0;\nloop invariant x >= n ==> y >= -2*y;\nloop invariant x < n ==> y >= 0;\nloop invariant x < n ==> y <= 2*y;\nloop invariant x >= n ==> y <= 0;\nloop invariant x >= n ==> y >= -2*y;\nloop invariant x < n ==> y >= 0;\nloop invariant x < n ==> y <= 2*y;\nloop invariant x >= n ==> y <= 0;\nloop invariant x >= n ==> y >= -2*y;\nloop invariant x < n ==> y >= 0;\nloop invariant x < n ==> y <= 2*y;\nloop invariant x >= n ==> y <= 0;\nloop invariant x >= n ==> y >= -2*y;\nloop invariant x < n ==> y >= 0;\nloop invariant x < n ==> y <= 2*y;\nloop invariant x >= n ==> y <= 0;\nloop invariant x >= n ==> y >= -2*y;\nloop invariant x < n ==> y >= 0;\nloop invariant x < n ==> y <= 2*y;\nloop invariant x >= n ==> y <= 0;\nloop invariant x >= n ==> y >= -2*y;\nloop invariant x < n ==> y >= 0;\nloop invariant x < n ==> y <= 2*y;\nloop invariant x >= n ==> y <= 0;\nloop invariant x >= n ==> y >= -2*y;\nloop invariant x < n ==> y >= 0;\nloop invariant x < n ==> y <= 2*y;\nloop invariant x >= n ==> y <= 0;\nloop invariant x >= n ==> y >= -2*y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 2*n;\nloop invariant x == y ==> x <= n;\nloop invariant x != y ==> x > n;\nloop invariant x <= n ==> y >= 0;\nloop invariant x > n ==> y <= 0;\n*/\n```",
            "```\n/*@\nloop invariant y >= 0;\nloop invariant y <= 2*n;\nloop invariant x >= 0;\nloop invariant x <= 2*n;\nloop invariant x >= y;\nloop invariant x == y ==> y == 2*n;\nloop invariant x > n ==> y == n;\nloop invariant x <= n ==> y == 2*n - x;\nloop invariant x > n ==> y == 2*n - (x - n);\nloop invariant x < n ==> y == 2*n - x;\nloop invariant x == n ==> y == 2*n - n;\nloop invariant x < 2*n ==> y >= 0;\nloop invariant x < 2*n ==> y <= 2*n;\nloop invariant x > n ==> y >= n;\nloop invariant x < n ==> y >= 0;\nloop invariant x > n ==> y <= 2*n - (x - n);\nloop invariant x < n ==> y <= 2*n - x;\nloop invariant x == n ==> y == 2*n - n;\nloop invariant x < 2*n ==> y >= 0;\nloop invariant x < 2*n ==> y <= 2*n;\nloop invariant x > n ==> y >= n;\nloop invariant x < n ==> y >= 0;\nloop invariant x > n ==> y <= 2*n - (x - n);\nloop invariant x < n ==> y <= 2*n - x;\nloop invariant x == n ==> y == 2*n - n;\nloop invariant x < 2*n ==> y >= 0;\nloop invariant x < 2*n ==> y <= 2*n;\nloop invariant x > n ==> y >= n;\nloop invariant x < n ==> y >= 0;\nloop invariant x > n ==> y <= 2*n - (x - n);\nloop invariant x < n ==> y <= 2*n - x;\nloop invariant x == n ==> y == 2*n - n;\nloop invariant x < 2*n ==> y >= 0;\nloop invariant x < 2*n ==> y <= 2*n;\nloop invariant x > n ==> y >= n;\nloop invariant x < n ==> y >= 0;\nloop invariant x > n ==> y <= 2*n - (x - n);\nloop invariant x < n ==> y <= 2*n - x;\nloop invariant x == n ==> y == 2*n - n;\nloop invariant x < 2*n ==> y >= 0;\nloop invariant x < 2*n ==> y <= 2*n;\nloop invariant x > n ==> y >= n;\nloop invariant x < n ==> y >= 0;\nloop invariant x > n ==> y <= 2*n - (x - n);\nloop invariant x < n ==> y <= 2*n - x;\nloop invariant x == n ==> y == 2*n - n;\nloop invariant x < 2*n ==> y >= 0;\nloop invariant x < 2*n ==> y <= 2*n;\nloop invariant x > n ==> y >= n;\nloop invariant x < n ==> y >= 0;\nloop invariant x > n ==> y <= 2*n - (x - n);\nloop invariant x < n ==> y <= 2*n - x;\nloop invariant x == n ==> y == 2*n - n;\nloop invariant x < 2*n ==> y >= 0;\nloop invariant x < 2*n ==> y <= 2*n;\nloop invariant x > n ==> y >= n;\nloop invariant x < n ==> y >= 0;\nloop invariant x > n ==> y <= 2*n - (x - n);\nloop invariant x < n ==> y <= 2*n - x;\nloop invariant x == n ==> y == 2*n - n;\nloop invariant x < 2*n ==> y >= 0;\nloop invariant x < 2*n ==> y <= 2*n;\nloop invariant x > n ==> y >= n;\nloop invariant x < n ==> y >= 0;\nloop invariant x > n ==> y <= 2*n - (x - n);\nloop invariant x < n ==> y <= 2*n - x;\nloop invariant x == n ==> y == 2*n - n;\nloop invariant x < 2*n ==> y >= 0;\nloop invariant x < 2*n ==> y <= 2*n;\nloop invariant x > n ==> y >= n;\nloop invariant x < n ==> y >= 0;\nloop invariant x > n ==> y <= 2*n - (x - n);\nloop invariant x < n ==> y <= 2*n - x;\nloop invariant x == n ==> y == 2*n - n;\nloop invariant x < 2*n ==> y >= 0;\nloop invariant x < 2*n ==> y <= 2*n;\nloop invariant x > n ==> y >= n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 2*n;\nloop invariant 0 <= y <= 2*n;\nloop invariant x >= n ==> y >= 0;\nloop invariant x < n ==> y >= 2*n - x;\nloop invariant x < n ==> y <= 2*n - x + 2;\nloop invariant x >= n ==> y >= 2*n - x;\nloop invariant x >= n ==> y <= 2*n - x + 1;\nloop invariant x < n ==> y >= 2*n - x + 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 2 * n; loop invariant 0 <= y <= 2 * n; loop invariant if (x > n) ==> y <= n - 1; loop invariant if (x <= n) ==> y >= 2 * x;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= 2*n;\nloop invariant 0 <= y <= n;\nloop invariant x <= y + 2;\nloop invariant x >= n;\nloop invariant x >= y;\n*/\n```",
            "```\n/*@\nloop invariant x <= 2*n;\nloop invariant y >= 0;\nloop invariant y <= 2*n;\nloop invariant x >= 1;\nloop invariant y <= n;\nloop invariant x <= y ==> x == y;\nloop invariant x > y ==> x == n + 1;\nloop invariant x < y ==> x == n;\nloop invariant y == n ==> x == n + 1;\nloop invariant y < n ==> x == n;\nloop invariant y == n + 1 ==> x == 2*n;\nloop invariant y < n + 1 ==> x <= 2*n;\nloop invariant y >= n + 1 ==> x == 2*n;\nloop invariant x <= 2*n ==> x == 2*n;\nloop invariant x < 2*n ==> x == n;\nloop invariant x == 2*n ==> x == 2*n;\nloop invariant x < 2*n ==> x == n + 1;\n*/\n```",
            "```\n/*@\nloop invariant y >= 0;\nloop invariant (x <= n ==> y >= 2 * x - n) && (x > n ==> y <= n - x);\nloop invariant x + y >= n;\nloop invariant x + y <= 3 * n;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2 * n;\nloop invariant y <= 2 * n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 2*n;\nloop invariant 0 <= y <= 2*n;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2*n;\nloop invariant y <= 2*n;\nloop invariant x >= y ==> x >= y;\nloop invariant x < y ==> x >= y;\nloop invariant x >= y ==> x >= y;\nloop invariant x < y ==> x >= y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 2*n;\nloop invariant y >= 2*x - n;\nloop invariant y <= 2*x;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 2*n;\nloop invariant -n <= y <= n;\nloop invariant x <= 2*n;\nloop invariant x >= 0;\nloop invariant y <= n;\nloop invariant y >= -n;\nloop invariant x <= n + 2*y;\nloop invariant x >= n + 2*y;\nloop invariant x <= n + 2*y ==> x >= n + 2*y;\nloop invariant x <= n + 2*y ==> x >= n + 2*y ==> x <= n + 2*y;\nloop invariant x <= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x <= n + 2*y;\nloop invariant x <= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x <= n + 2*y;\nloop invariant x <= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x <= n + 2*y;\nloop invariant x <= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x <= n + 2*y;\nloop invariant x <= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x <= n + 2*y;\nloop invariant x <= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x <= n + 2*y;\nloop invariant x <= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x <= n + 2*y;\nloop invariant x <= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x <= n + 2*y;\nloop invariant x <= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x <= n + 2*y;\nloop invariant x <= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x <= n + 2*y;\nloop invariant x <= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x <= n + 2*y;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 2*n;\nloop invariant x >= n ==> y >= 0;\nloop invariant x < n ==> y >= 2*x;\nloop invariant x >= n ==> y <= 0;\nloop invariant x < n ==> y <= 2*x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n;\nint main() {\nint x=0;\nint y=0;\nint n = unknown_int();\n\n\tassume(n>=1);\n\n\t/*@\nloop invariant i1: 0 <= x <= 2*n;\n\nloop invariant i3: x < n ==> y >= 2*x;\n\nloop invariant i5: x < n ==> y <= 2*x;\n*/\nwhile(x < 2*n){\n\t   x = x + 1;\n\n\t   if ( x > n )\n\t\t  y = y - 1;\n\t   else\n\t\t  y = y + 2;\n\t}\n\n\tif(x < y)\n\t\tgoto ERROR;\n\n\treturn 0;\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 2*n;\nloop invariant 0 <= y <= n;\nloop invariant 0 <= n <= 100000;\nloop invariant x >= y;\nloop invariant x - y <= n;\nloop invariant x - y >= 0;\nloop invariant x - y <= n;\nloop invariant x - y >= 0;\nloop invariant x - y <= n;\nloop invariant x - y >= 0;\nloop invariant x - y <= n;\nloop invariant x - y >= 0;\nloop invariant x - y <= n;\nloop invariant x - y >= 0;\nloop invariant x - y <= n;\nloop invariant x - y >= 0;\nloop invariant x - y <= n;\nloop invariant x - y >= 0;\nloop invariant x - y <= n;\nloop invariant x - y >= 0;\nloop invariant x - y <= n;\nloop invariant x - y >= 0;\nloop invariant x - y <= n;\nloop invariant x - y >= 0;\nloop invariant x - y <= n;\nloop invariant x - y >= 0;\nloop invariant x - y <= n;\nloop invariant x - y >= 0;\nloop invariant x - y <= n;\nloop invariant x - y >= 0;\nloop invariant x - y <= n;\nloop invariant x - y >= 0;\nloop invariant x - y <= n;\nloop invariant x - y >= 0;\nloop invariant x - y <= n;\nloop invariant x - y >= 0;\nloop invariant x - y <= n;\nloop invariant x - y >= 0;\nloop invariant x - y <= n;\nloop invariant x - y >= 0;\nloop invariant x - y <= n;\nloop invariant x - y >= 0;\nloop invariant x - y <= n;\nloop invariant x - y >= 0;\nloop invariant x - y <= n;\nloop invariant x - y >= 0;\nloop invariant x - y <= n;\nloop invariant x - y >= 0;\nloop invariant x - y <= n;\nloop invariant x - y >= 0;\nloop invariant x - y <= n;\nloop invariant x - y >= 0;\nloop invariant x - y <= n;\nloop invariant x - y >= 0;\nloop invariant x - y <= n;\nloop invariant x - y >= 0;\nloop invariant x - y <= n;\nloop invariant x - y >= 0;\nloop invariant x - y <= n;\nloop invariant x - y >= 0;\nloop invariant x - y <= n;\nloop invariant x - y >= 0;\nloop invariant x - y <= n;\nloop invariant x - y >= 0;\nloop invariant x - y <= n;\nloop invariant x - y >= 0;\nloop invariant x - y <= n;\nloop invariant x - y >= 0;\nloop invariant x - y <= n;\nloop invariant x - y >= 0;\nloop invariant x - y <= n;\nloop invariant x - y >= 0;\nloop invariant x - y <= n;\nloop invariant x - y >= 0;\nloop invariant x - y <= n;\nloop invariant x - y >= 0;\nloop invariant x - y <= n;\nloop invariant x - y >= 0;\nloop invariant x - y <= n;\nloop invariant x - y >= 0;\nloop invariant x - y <= n;\nloop invariant x - y >= 0;\nloop invariant x - y <= n;\nloop invariant x - y >= 0;\nloop invariant x - y <= n;\nloop invariant x - y >= 0;\nloop invariant x - y <= n;\nloop invariant x - y >= 0;\nloop invariant x - y <= n;\nloop invariant x - y >= 0;\nloop invariant x - y <= n;\nloop invariant x - y >= 0;\nloop invariant x - y <= n;\nloop invariant x - y >= 0;\nloop invariant x - y <= n;\nloop invariant x - y >= 0;\nloop invariant x - y <= n;\nloop invariant x - y >= 0;\nloop invariant x - y <= n;\nloop invariant x - y >= 0;\nloop invariant x - y <= n;\nloop invariant x - y >= 0;\nloop invariant x - y <= n;\nloop invariant x - y >= 0;\nloop invariant x - y <= n;\nloop invariant x - y >= 0;\nloop invariant x - y <= n;\nloop invariant x - y >= 0;\nloop invariant x - y <= n;\nloop invariant x - y >= 0;\nloop invariant x - y <= n;\nloop invariant x - y >= 0;\nloop invariant x - y <= n;\nloop invariant x - y >= 0;\nloop invariant x - y <= n;\nloop invariant x - y >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n;\nint main() {\nint x=0;\nint y=0;\nint n = unknown_int();\n\n\tassume(n>=1);\n\n\t/*@\nloop invariant i1: 0 <= x <= 2*n;\n\n\n\n\n\n*/\nwhile(x < 2*n){\n\t   x = x + 1;\n\n\t   if ( x > n )\n\t\t  y = y - 1;\n\t   else\n\t\t  y = y + 2;\n\t}\n\n\tif(x < y)\n\t\tgoto ERROR;\n\n\treturn 0;\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 2*n;\nloop invariant 0 <= y <= 2*n;\nloop invariant x >= y;\nloop invariant x == n || y == 0;\nloop invariant (x <= n ==> y == 2*x) && (x > n ==> y == 2*x - 2*n);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n;\nint main() {\nint x=0;\nint y=0;\nint n = unknown_int();\n\n\tassume(n>=1);\n\n\t/*@\nloop invariant i1: 0 <= x <= 2*n;\n\n\n\n\n*/\nwhile(x < 2*n){\n\t   x = x + 1;\n\n\t   if ( x > n )\n\t\t  y = y - 1;\n\t   else\n\t\t  y = y + 2;\n\t}\n\n\tif(x < y)\n\t\tgoto ERROR;\n\n\treturn 0;\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= 2*n;loop invariant y >= 0;loop invariant y <= 2*n;loop invariant y >= 2*x;loop invariant x >= n ==> y == 0;loop invariant x < n ==> y >= 2*x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n;\nint main() {\nint x=0;\nint y=0;\nint n = unknown_int();\n\n\tassume(n>=1);\n\n\t/*@\n\n*/\nwhile(x < 2*n){\n\t   x = x + 1;\n\n\t   if ( x > n )\n\t\t  y = y - 1;\n\t   else\n\t\t  y = y + 2;\n\t}\n\n\tif(x < y)\n\t\tgoto ERROR;\n\n\treturn 0;\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 2*n;\nloop invariant 0 <= y <= 2*n;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x == 0 ==> y == 0;\nloop invariant x < n ==> y >= 0;\nloop invariant x >= n ==> y <= 0;\nloop invariant x < n ==> y <= 2*y;\nloop invariant x >= n ==> y >= -2*y;\nloop invariant x < n ==> y <= 2*y;\nloop invariant x < n ==> y >= -2*y;\nloop invariant x < n ==> y >= 0;\nloop invariant x < n ==> y <= 2*y;\nloop invariant x >= n ==> y <= 0;\nloop invariant x >= n ==> y >= -2*y;\nloop invariant x < n ==> y >= 0;\nloop invariant x < n ==> y <= 2*y;\nloop invariant x >= n ==> y <= 0;\nloop invariant x >= n ==> y >= -2*y;\nloop invariant x < n ==> y >= 0;\nloop invariant x < n ==> y <= 2*y;\nloop invariant x >= n ==> y <= 0;\nloop invariant x >= n ==> y >= -2*y;\nloop invariant x < n ==> y >= 0;\nloop invariant x < n ==> y <= 2*y;\nloop invariant x >= n ==> y <= 0;\nloop invariant x >= n ==> y >= -2*y;\nloop invariant x < n ==> y >= 0;\nloop invariant x < n ==> y <= 2*y;\nloop invariant x >= n ==> y <= 0;\nloop invariant x >= n ==> y >= -2*y;\nloop invariant x < n ==> y >= 0;\nloop invariant x < n ==> y <= 2*y;\nloop invariant x >= n ==> y <= 0;\nloop invariant x >= n ==> y >= -2*y;\nloop invariant x < n ==> y >= 0;\nloop invariant x < n ==> y <= 2*y;\nloop invariant x >= n ==> y <= 0;\nloop invariant x >= n ==> y >= -2*y;\nloop invariant x < n ==> y >= 0;\nloop invariant x < n ==> y <= 2*y;\nloop invariant x >= n ==> y <= 0;\nloop invariant x >= n ==> y >= -2*y;\nloop invariant x < n ==> y >= 0;\nloop invariant x < n ==> y <= 2*y;\nloop invariant x >= n ==> y <= 0;\nloop invariant x >= n ==> y >= -2*y;\nloop invariant x < n ==> y >= 0;\nloop invariant x < n ==> y <= 2*y;\nloop invariant x >= n ==> y <= 0;\nloop invariant x >= n ==> y >= -2*y;\nloop invariant x < n ==> y >= 0;\nloop invariant x < n ==> y <= 2*y;\nloop invariant x >= n ==> y <= 0;\nloop invariant x >= n ==> y >= -2*y;\nloop invariant x < n ==> y >= 0;\nloop invariant x < n ==> y <= 2*y;\nloop invariant x >= n ==> y <= 0;\nloop invariant x >= n ==> y >= -2*y;\nloop invariant x < n ==> y >= 0;\nloop invariant x < n ==> y <= 2*y;\nloop invariant x >= n ==> y <= 0;\nloop invariant x >= n ==> y >= -2*y;\nloop invariant x < n ==> y >= 0;\nloop invariant x < n ==> y <= 2*y;\nloop invariant x >= n ==> y <= 0;\nloop invariant x >= n ==> y >= -2*y;\nloop invariant x < n ==> y >= 0;\nloop invariant x < n ==> y <= 2*y;\nloop invariant x >= n ==> y <= 0;\nloop invariant x >= n ==> y >= -2*y;\nloop invariant x < n ==> y >= 0;\nloop invariant x < n ==> y <= 2*y;\nloop invariant x >= n ==> y <= 0;\nloop invariant x >= n ==> y >= -2*y;\nloop invariant x < n ==> y >= 0;\nloop invariant x < n ==> y <= 2*y;\nloop invariant x >= n ==> y <= 0;\nloop invariant x >= n ==> y >= -2*y;\nloop invariant x < n ==> y >= 0;\nloop invariant x < n ==> y <= 2*y;\nloop invariant x >= n ==> y <= 0;\nloop invariant x >= n ==> y >= -2*y;\nloop invariant x < n ==> y >= 0;\nloop invariant x < n ==> y <= 2*y;\nloop invariant x >= n ==> y <= 0;\nloop invariant x >= n ==> y >= -2*y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n;\nint main() {\nint x=0;\nint y=0;\nint n = unknown_int();\n\n\tassume(n>=1);\n\n\t/*@\nloop invariant i1: 0 <= x <= 2*n;\n\nloop invariant i3: x >= 0;\n\nloop invariant i5: x == 0 ==> y == 0;\nloop invariant i6: x < n ==> y >= 0;\n\nloop invariant i8: x < n ==> y <= 2*y;\n\nloop invariant i10: x < n ==> y >= -2*y;\n*/\nwhile(x < 2*n){\n\t   x = x + 1;\n\n\t   if ( x > n )\n\t\t  y = y - 1;\n\t   else\n\t\t  y = y + 2;\n\t}\n\n\tif(x < y)\n\t\tgoto ERROR;\n\n\treturn 0;\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 2*n;\nloop invariant x == y ==> x <= n;\nloop invariant x != y ==> x > n;\nloop invariant x <= n ==> y >= 0;\nloop invariant x > n ==> y <= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n;\nint main() {\nint x=0;\nint y=0;\nint n = unknown_int();\n\n\tassume(n>=1);\n\n\t/*@\nloop invariant i1: 0 <= x <= 2*n;\n\n\nloop invariant i4: x <= n ==> y >= 0;\n\n*/\nwhile(x < 2*n){\n\t   x = x + 1;\n\n\t   if ( x > n )\n\t\t  y = y - 1;\n\t   else\n\t\t  y = y + 2;\n\t}\n\n\tif(x < y)\n\t\tgoto ERROR;\n\n\treturn 0;\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 8,
                "annotations": "```\n/*@\nloop invariant y >= 0;\nloop invariant y <= 2*n;\nloop invariant x >= 0;\nloop invariant x <= 2*n;\nloop invariant x >= y;\nloop invariant x == y ==> y == 2*n;\nloop invariant x > n ==> y == n;\nloop invariant x <= n ==> y == 2*n - x;\nloop invariant x > n ==> y == 2*n - (x - n);\nloop invariant x < n ==> y == 2*n - x;\nloop invariant x == n ==> y == 2*n - n;\nloop invariant x < 2*n ==> y >= 0;\nloop invariant x < 2*n ==> y <= 2*n;\nloop invariant x > n ==> y >= n;\nloop invariant x < n ==> y >= 0;\nloop invariant x > n ==> y <= 2*n - (x - n);\nloop invariant x < n ==> y <= 2*n - x;\nloop invariant x == n ==> y == 2*n - n;\nloop invariant x < 2*n ==> y >= 0;\nloop invariant x < 2*n ==> y <= 2*n;\nloop invariant x > n ==> y >= n;\nloop invariant x < n ==> y >= 0;\nloop invariant x > n ==> y <= 2*n - (x - n);\nloop invariant x < n ==> y <= 2*n - x;\nloop invariant x == n ==> y == 2*n - n;\nloop invariant x < 2*n ==> y >= 0;\nloop invariant x < 2*n ==> y <= 2*n;\nloop invariant x > n ==> y >= n;\nloop invariant x < n ==> y >= 0;\nloop invariant x > n ==> y <= 2*n - (x - n);\nloop invariant x < n ==> y <= 2*n - x;\nloop invariant x == n ==> y == 2*n - n;\nloop invariant x < 2*n ==> y >= 0;\nloop invariant x < 2*n ==> y <= 2*n;\nloop invariant x > n ==> y >= n;\nloop invariant x < n ==> y >= 0;\nloop invariant x > n ==> y <= 2*n - (x - n);\nloop invariant x < n ==> y <= 2*n - x;\nloop invariant x == n ==> y == 2*n - n;\nloop invariant x < 2*n ==> y >= 0;\nloop invariant x < 2*n ==> y <= 2*n;\nloop invariant x > n ==> y >= n;\nloop invariant x < n ==> y >= 0;\nloop invariant x > n ==> y <= 2*n - (x - n);\nloop invariant x < n ==> y <= 2*n - x;\nloop invariant x == n ==> y == 2*n - n;\nloop invariant x < 2*n ==> y >= 0;\nloop invariant x < 2*n ==> y <= 2*n;\nloop invariant x > n ==> y >= n;\nloop invariant x < n ==> y >= 0;\nloop invariant x > n ==> y <= 2*n - (x - n);\nloop invariant x < n ==> y <= 2*n - x;\nloop invariant x == n ==> y == 2*n - n;\nloop invariant x < 2*n ==> y >= 0;\nloop invariant x < 2*n ==> y <= 2*n;\nloop invariant x > n ==> y >= n;\nloop invariant x < n ==> y >= 0;\nloop invariant x > n ==> y <= 2*n - (x - n);\nloop invariant x < n ==> y <= 2*n - x;\nloop invariant x == n ==> y == 2*n - n;\nloop invariant x < 2*n ==> y >= 0;\nloop invariant x < 2*n ==> y <= 2*n;\nloop invariant x > n ==> y >= n;\nloop invariant x < n ==> y >= 0;\nloop invariant x > n ==> y <= 2*n - (x - n);\nloop invariant x < n ==> y <= 2*n - x;\nloop invariant x == n ==> y == 2*n - n;\nloop invariant x < 2*n ==> y >= 0;\nloop invariant x < 2*n ==> y <= 2*n;\nloop invariant x > n ==> y >= n;\nloop invariant x < n ==> y >= 0;\nloop invariant x > n ==> y <= 2*n - (x - n);\nloop invariant x < n ==> y <= 2*n - x;\nloop invariant x == n ==> y == 2*n - n;\nloop invariant x < 2*n ==> y >= 0;\nloop invariant x < 2*n ==> y <= 2*n;\nloop invariant x > n ==> y >= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n;\nint main() {\nint x=0;\nint y=0;\nint n = unknown_int();\n\n\tassume(n>=1);\n\n\t/*@\n\n\nloop invariant i3: x >= 0;\nloop invariant i4: x <= 2*n;\n\n\n\n\n\n\n\n\n\n\nloop invariant i15: x < n ==> y >= 0;\n\n\n*/\nwhile(x < 2*n){\n\t   x = x + 1;\n\n\t   if ( x > n )\n\t\t  y = y - 1;\n\t   else\n\t\t  y = y + 2;\n\t}\n\n\tif(x < y)\n\t\tgoto ERROR;\n\n\treturn 0;\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 2*n;\nloop invariant 0 <= y <= 2*n;\nloop invariant x >= n ==> y >= 0;\nloop invariant x < n ==> y >= 2*n - x;\nloop invariant x < n ==> y <= 2*n - x + 2;\nloop invariant x >= n ==> y >= 2*n - x;\nloop invariant x >= n ==> y <= 2*n - x + 1;\nloop invariant x < n ==> y >= 2*n - x + 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n;\nint main() {\nint x=0;\nint y=0;\nint n = unknown_int();\n\n\tassume(n>=1);\n\n\t/*@\nloop invariant i1: 0 <= x <= 2*n;\n\n\n\n\n\n\n\n*/\nwhile(x < 2*n){\n\t   x = x + 1;\n\n\t   if ( x > n )\n\t\t  y = y - 1;\n\t   else\n\t\t  y = y + 2;\n\t}\n\n\tif(x < y)\n\t\tgoto ERROR;\n\n\treturn 0;\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 2 * n; loop invariant 0 <= y <= 2 * n; loop invariant if (x > n) ==> y <= n - 1; loop invariant if (x <= n) ==> y >= 2 * x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n;\nint main() {\nint x=0;\nint y=0;\nint n = unknown_int();\n\n\tassume(n>=1);\n\n\t/*@\n\n*/\nwhile(x < 2*n){\n\t   x = x + 1;\n\n\t   if ( x > n )\n\t\t  y = y - 1;\n\t   else\n\t\t  y = y + 2;\n\t}\n\n\tif(x < y)\n\t\tgoto ERROR;\n\n\treturn 0;\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= 2*n;\nloop invariant 0 <= y <= n;\nloop invariant x <= y + 2;\nloop invariant x >= n;\nloop invariant x >= y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n;\nint main() {\nint x=0;\nint y=0;\nint n = unknown_int();\n\n\tassume(n>=1);\n\n\t/*@\n\n\n\n\n\n*/\nwhile(x < 2*n){\n\t   x = x + 1;\n\n\t   if ( x > n )\n\t\t  y = y - 1;\n\t   else\n\t\t  y = y + 2;\n\t}\n\n\tif(x < y)\n\t\tgoto ERROR;\n\n\treturn 0;\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 9,
                "annotations": "```\n/*@\nloop invariant x <= 2*n;\nloop invariant y >= 0;\nloop invariant y <= 2*n;\nloop invariant x >= 1;\nloop invariant y <= n;\nloop invariant x <= y ==> x == y;\nloop invariant x > y ==> x == n + 1;\nloop invariant x < y ==> x == n;\nloop invariant y == n ==> x == n + 1;\nloop invariant y < n ==> x == n;\nloop invariant y == n + 1 ==> x == 2*n;\nloop invariant y < n + 1 ==> x <= 2*n;\nloop invariant y >= n + 1 ==> x == 2*n;\nloop invariant x <= 2*n ==> x == 2*n;\nloop invariant x < 2*n ==> x == n;\nloop invariant x == 2*n ==> x == 2*n;\nloop invariant x < 2*n ==> x == n + 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n;\nint main() {\nint x=0;\nint y=0;\nint n = unknown_int();\n\n\tassume(n>=1);\n\n\t/*@\nloop invariant i1: x <= 2*n;\n\n\n\n\n\n\n\n\n\n\nloop invariant i12: y < n + 1 ==> x <= 2*n;\n\n\n\nloop invariant i16: x == 2*n ==> x == 2*n;\n\n*/\nwhile(x < 2*n){\n\t   x = x + 1;\n\n\t   if ( x > n )\n\t\t  y = y - 1;\n\t   else\n\t\t  y = y + 2;\n\t}\n\n\tif(x < y)\n\t\tgoto ERROR;\n\n\treturn 0;\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant y >= 0;\nloop invariant (x <= n ==> y >= 2 * x - n) && (x > n ==> y <= n - x);\nloop invariant x + y >= n;\nloop invariant x + y <= 3 * n;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2 * n;\nloop invariant y <= 2 * n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n;\nint main() {\nint x=0;\nint y=0;\nint n = unknown_int();\n\n\tassume(n>=1);\n\n\t/*@\n\n\n\n\nloop invariant i5: x >= 0;\nloop invariant i6: x <= 2 * n;\n\n*/\nwhile(x < 2*n){\n\t   x = x + 1;\n\n\t   if ( x > n )\n\t\t  y = y - 1;\n\t   else\n\t\t  y = y + 2;\n\t}\n\n\tif(x < y)\n\t\tgoto ERROR;\n\n\treturn 0;\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 2*n;\nloop invariant 0 <= y <= 2*n;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2*n;\nloop invariant y <= 2*n;\nloop invariant x >= y ==> x >= y;\nloop invariant x < y ==> x >= y;\nloop invariant x >= y ==> x >= y;\nloop invariant x < y ==> x >= y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n;\nint main() {\nint x=0;\nint y=0;\nint n = unknown_int();\n\n\tassume(n>=1);\n\n\t/*@\nloop invariant i1: 0 <= x <= 2*n;\n\nloop invariant i3: x >= 0;\n\nloop invariant i5: x <= 2*n;\n\nloop invariant i7: x >= y ==> x >= y;\n\n*/\nwhile(x < 2*n){\n\t   x = x + 1;\n\n\t   if ( x > n )\n\t\t  y = y - 1;\n\t   else\n\t\t  y = y + 2;\n\t}\n\n\tif(x < y)\n\t\tgoto ERROR;\n\n\treturn 0;\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 2*n;\nloop invariant y >= 2*x - n;\nloop invariant y <= 2*x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n;\nint main() {\nint x=0;\nint y=0;\nint n = unknown_int();\n\n\tassume(n>=1);\n\n\t/*@\nloop invariant i1: 0 <= x <= 2*n;\n\nloop invariant i3: y <= 2*x;\n*/\nwhile(x < 2*n){\n\t   x = x + 1;\n\n\t   if ( x > n )\n\t\t  y = y - 1;\n\t   else\n\t\t  y = y + 2;\n\t}\n\n\tif(x < y)\n\t\tgoto ERROR;\n\n\treturn 0;\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 2*n;\nloop invariant -n <= y <= n;\nloop invariant x <= 2*n;\nloop invariant x >= 0;\nloop invariant y <= n;\nloop invariant y >= -n;\nloop invariant x <= n + 2*y;\nloop invariant x >= n + 2*y;\nloop invariant x <= n + 2*y ==> x >= n + 2*y;\nloop invariant x <= n + 2*y ==> x >= n + 2*y ==> x <= n + 2*y;\nloop invariant x <= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x <= n + 2*y;\nloop invariant x <= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x <= n + 2*y;\nloop invariant x <= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x <= n + 2*y;\nloop invariant x <= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x <= n + 2*y;\nloop invariant x <= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x <= n + 2*y;\nloop invariant x <= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x <= n + 2*y;\nloop invariant x <= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x <= n + 2*y;\nloop invariant x <= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x <= n + 2*y;\nloop invariant x <= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x <= n + 2*y;\nloop invariant x <= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x <= n + 2*y;\nloop invariant x <= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x <= n + 2*y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n;\nint main() {\nint x=0;\nint y=0;\nint n = unknown_int();\n\n\tassume(n>=1);\n\n\t/*@\nloop invariant i1: 0 <= x <= 2*n;\n\nloop invariant i3: x <= 2*n;\nloop invariant i4: x >= 0;\n\n\n\n\n\nloop invariant i10: x <= n + 2*y ==> x >= n + 2*y ==> x <= n + 2*y;\nloop invariant i11: x <= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x <= n + 2*y;\nloop invariant i12: x <= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x <= n + 2*y;\nloop invariant i13: x <= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x <= n + 2*y;\nloop invariant i14: x <= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x <= n + 2*y;\nloop invariant i15: x <= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x <= n + 2*y;\nloop invariant i16: x <= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x <= n + 2*y;\nloop invariant i17: x <= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x <= n + 2*y;\nloop invariant i18: x <= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x <= n + 2*y;\nloop invariant i19: x <= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x <= n + 2*y;\nloop invariant i20: x <= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x <= n + 2*y;\nloop invariant i21: x <= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x <= n + 2*y;\n*/\nwhile(x < 2*n){\n\t   x = x + 1;\n\n\t   if ( x > n )\n\t\t  y = y - 1;\n\t   else\n\t\t  y = y + 2;\n\t}\n\n\tif(x < y)\n\t\tgoto ERROR;\n\n\treturn 0;\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 61: unexpected token '('",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n;\nint main() {\nint x=0;\nint y=0;\nint n = unknown_int();\n\n\tassume(n>=1);\n\n\t/*@\nloop invariant i1: 0 <= x <= 2*n;\nloop invariant i2: x >= n ==> y >= 0;\nloop invariant i3: x < n ==> y >= 2*x;\nloop invariant i4: x >= n ==> y <= 0;\nloop invariant i5: x < n ==> y <= 2*x;\nloop invariant i6: 0 <= y <= n;\nloop invariant i7: 0 <= n <= 100000;\nloop invariant i8: x >= y;\nloop invariant i9: x - y <= n;\nloop invariant i10: x - y >= 0;\nloop invariant i11: 0 <= y <= 2*n;\nloop invariant i12: x == n || y == 0;\nloop invariant i13: (x <= n ==> y == 2*x) && (x > n ==> y == 2*x - 2*n);\nloop invariant i14: 1 <= x <= 2*n;loop invariant y >= 0;loop invariant y <= 2*n;loop invariant y >= 2*x;loop invariant x >= n ==> y == 0;loop invariant x < n ==> y >= 2*x;\nloop invariant i15: x >= 0;\nloop invariant i16: y >= 0;\nloop invariant i17: x == 0 ==> y == 0;\nloop invariant i18: x < n ==> y >= 0;\nloop invariant i19: x < n ==> y <= 2*y;\nloop invariant i20: x >= n ==> y >= -2*y;\nloop invariant i21: x < n ==> y >= -2*y;\nloop invariant i22: x == y ==> x <= n;\nloop invariant i23: x != y ==> x > n;\nloop invariant i24: x <= n ==> y >= 0;\nloop invariant i25: x > n ==> y <= 0;\nloop invariant i26: y <= 2*n;\nloop invariant i27: x <= 2*n;\nloop invariant i28: x == y ==> y == 2*n;\nloop invariant i29: x > n ==> y == n;\nloop invariant i30: x <= n ==> y == 2*n - x;\nloop invariant i31: x > n ==> y == 2*n - (x - n);\nloop invariant i32: x < n ==> y == 2*n - x;\nloop invariant i33: x == n ==> y == 2*n - n;\nloop invariant i34: x < 2*n ==> y >= 0;\nloop invariant i35: x < 2*n ==> y <= 2*n;\nloop invariant i36: x > n ==> y >= n;\nloop invariant i37: x > n ==> y <= 2*n - (x - n);\nloop invariant i38: x < n ==> y <= 2*n - x;\nloop invariant i39: x < n ==> y >= 2*n - x;\nloop invariant i40: x < n ==> y <= 2*n - x + 2;\nloop invariant i41: x >= n ==> y >= 2*n - x;\nloop invariant i42: x >= n ==> y <= 2*n - x + 1;\nloop invariant i43: x < n ==> y >= 2*n - x + 1;\nloop invariant i44: 0 <= x <= 2 * n; loop invariant 0 <= y <= 2 * n; loop invariant if (x > n) ==> y <= n - 1; loop invariant if (x <= n) ==> y >= 2 * x;\nloop invariant i45: 1 <= x <= 2*n;\nloop invariant i46: x <= y + 2;\nloop invariant i47: x >= n;\nloop invariant i48: x >= 1;\nloop invariant i49: y <= n;\nloop invariant i50: x <= y ==> x == y;\nloop invariant i51: x > y ==> x == n + 1;\nloop invariant i52: x < y ==> x == n;\nloop invariant i53: y == n ==> x == n + 1;\nloop invariant i54: y < n ==> x == n;\nloop invariant i55: y == n + 1 ==> x == 2*n;\nloop invariant i56: y < n + 1 ==> x <= 2*n;\nloop invariant i57: y >= n + 1 ==> x == 2*n;\nloop invariant i58: x <= 2*n ==> x == 2*n;\nloop invariant i59: x < 2*n ==> x == n;\nloop invariant i60: x == 2*n ==> x == 2*n;\nloop invariant i61: x < 2*n ==> x == n + 1;\nloop invariant i62: (x <= n ==> y >= 2 * x - n) && (x > n ==> y <= n - x);\nloop invariant i63: x + y >= n;\nloop invariant i64: x + y <= 3 * n;\nloop invariant i65: x <= 2 * n;\nloop invariant i66: y <= 2 * n;\nloop invariant i67: x >= y ==> x >= y;\nloop invariant i68: x < y ==> x >= y;\nloop invariant i69: y >= 2*x - n;\nloop invariant i70: y <= 2*x;\nloop invariant i71: -n <= y <= n;\nloop invariant i72: y >= -n;\nloop invariant i73: x <= n + 2*y;\nloop invariant i74: x >= n + 2*y;\nloop invariant i75: x <= n + 2*y ==> x >= n + 2*y;\nloop invariant i76: x <= n + 2*y ==> x >= n + 2*y ==> x <= n + 2*y;\nloop invariant i77: x <= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x <= n + 2*y;\nloop invariant i78: x <= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x <= n + 2*y;\nloop invariant i79: x <= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x <= n + 2*y;\nloop invariant i80: x <= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x <= n + 2*y;\nloop invariant i81: x <= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x <= n + 2*y;\nloop invariant i82: x <= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x <= n + 2*y;\nloop invariant i83: x <= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x <= n + 2*y;\nloop invariant i84: x <= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x <= n + 2*y;\nloop invariant i85: x <= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x <= n + 2*y;\nloop invariant i86: x <= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x <= n + 2*y;\nloop invariant i87: x <= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x <= n + 2*y;\n*/\nwhile(x < 2*n){\n\t   x = x + 1;\n\n\t   if ( x > n )\n\t\t  y = y - 1;\n\t   else\n\t\t  y = y + 2;\n\t}\n\n\tif(x < y)\n\t\tgoto ERROR;\n\n\treturn 0;\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\treturn -1;\n}",
        "combined_annotation_num_solver_calls": 31,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n;\nint main() {\nint x=0;\nint y=0;\nint n = unknown_int();\n\n\tassume(n>=1);\n\n\t/*@\nloop invariant i1: 0 <= x <= 2*n;\nloop invariant i2: x >= n ==> y >= 0;\nloop invariant i3: x < n ==> y >= 2*x;\n\nloop invariant i5: x < n ==> y <= 2*x;\n\n\n\n\n\nloop invariant i11: 0 <= y <= 2*n;\n\n\n\nloop invariant i15: x >= 0;\nloop invariant i16: y >= 0;\nloop invariant i17: x == 0 ==> y == 0;\nloop invariant i18: x < n ==> y >= 0;\nloop invariant i19: x < n ==> y <= 2*y;\nloop invariant i20: x >= n ==> y >= -2*y;\nloop invariant i21: x < n ==> y >= -2*y;\n\n\nloop invariant i24: x <= n ==> y >= 0;\n\nloop invariant i26: y <= 2*n;\nloop invariant i27: x <= 2*n;\n\n\n\n\n\n\nloop invariant i34: x < 2*n ==> y >= 0;\nloop invariant i35: x < 2*n ==> y <= 2*n;\n\nloop invariant i37: x > n ==> y <= 2*n - (x - n);\n\n\n\nloop invariant i41: x >= n ==> y >= 2*n - x;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i56: y < n + 1 ==> x <= 2*n;\n\n\n\nloop invariant i60: x == 2*n ==> x == 2*n;\n\n\n\nloop invariant i64: x + y <= 3 * n;\nloop invariant i65: x <= 2 * n;\nloop invariant i66: y <= 2 * n;\nloop invariant i67: x >= y ==> x >= y;\n\n\nloop invariant i70: y <= 2*x;\n\nloop invariant i72: y >= -n;\n\n\n\nloop invariant i76: x <= n + 2*y ==> x >= n + 2*y ==> x <= n + 2*y;\nloop invariant i77: x <= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x <= n + 2*y;\nloop invariant i78: x <= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x <= n + 2*y;\nloop invariant i79: x <= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x <= n + 2*y;\nloop invariant i80: x <= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x <= n + 2*y;\nloop invariant i81: x <= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x <= n + 2*y;\nloop invariant i82: x <= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x <= n + 2*y;\nloop invariant i83: x <= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x <= n + 2*y;\nloop invariant i84: x <= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x <= n + 2*y;\nloop invariant i85: x <= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x <= n + 2*y;\nloop invariant i86: x <= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x <= n + 2*y;\nloop invariant i87: x <= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x >= n + 2*y ==> x <= n + 2*y;\n*/\nwhile(x < 2*n){\n\t   x = x + 1;\n\n\t   if ( x > n )\n\t\t  y = y - 1;\n\t   else\n\t\t  y = y + 2;\n\t}\n\n\tif(x < y)\n\t\tgoto ERROR;\n\n\treturn 0;\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\treturn -1;\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c"
        ],
        "failure": [],
        "skipped": [],
        "total": 5,
        "success_count": 5,
        "failure_count": 0,
        "success_rate": 1.0
    }
}