{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i,j,k;\n    i = 1;\n    j = 1;\n    k = unknown_int();\n    if (!(0 <= k && k <= 1)) return 0;\n    while (i < LARGE_INT) {\n\ti = i + 1;\n\tj = j + k;\n\tk = k - 1;\n\t{;\n//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n}\n\n    }\n    return 0;\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= i < 1000000;\nloop invariant 1 <= j <= 1000001;\nloop invariant 0 <= k <= 2;\nloop invariant 0 <= i < 1000000;\nloop invariant 1 <= j <= 1000001;\nloop invariant 0 <= k <= 2;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i && i <= LARGE_INT && k >= 0 && k <= 1;\nloop invariant j >= 1 && j <= LARGE_INT;\nloop invariant i - k <= j && j <= i + k;\nloop invariant if k == 1 then i == LARGE_INT else true;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i + k and i + k <= 2;\nloop invariant i >= 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 0 <= j <= LARGE_INT * k;\nloop invariant 0 <= k <= 1;\nloop invariant i <= LARGE_INT - 1 ==> k == 0;\nloop invariant i + k <= 2 ==> k == 1;\nloop invariant i >= 1 ==> k == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant j >= 1;\nloop invariant 0 <= k < i;\nloop invariant 1 <= i + k && i + k <= 2;\nloop invariant i >= 1;\nloop invariant j >= k;\nloop invariant i + k <= LARGE_INT;\nloop invariant i + k >= 1;\nloop invariant i >= 1;\nloop invariant j >= i;\nloop invariant i + k <= LARGE_INT;\nloop invariant i + k >= 1;\nloop invariant i >= 1;\nloop invariant i + k <= LARGE_INT;\nloop invariant i + k >= 1;\nloop invariant i >= 1;\nloop invariant i + k <= LARGE_INT;\nloop invariant i + k >= 1;\nloop invariant i >= 1;\nloop invariant i + k <= LARGE_INT;\nloop invariant i + k >= 1;\nloop invariant i >= 1;\nloop invariant i + k <= LARGE_INT;\nloop invariant i + k >= 1;\nloop invariant i >= 1;\nloop invariant i + k <= LARGE_INT;\nloop invariant i + k >= 1;\nloop invariant i >= 1;\nloop invariant i + k <= LARGE_INT;\nloop invariant i + k >= 1;\nloop invariant i >= 1;\nloop invariant i + k <= LARGE_INT;\nloop invariant i + k >= 1;\nloop invariant i >= 1;\nloop invariant i + k <= LARGE_INT;\nloop invariant i + k >= 1;\nloop invariant i >= 1;\nloop invariant i + k <= LARGE_INT;\nloop invariant i + k >= 1;\nloop invariant i >= 1;\nloop invariant i + k <= LARGE_INT;\nloop invariant i + k >= 1;\nloop invariant i >= 1;\nloop invariant i + k <= LARGE_INT;\nloop invariant i + k >= 1;\nloop invariant i >= 1;\nloop invariant i + k <= LARGE_INT;\nloop invariant i + k >= 1;\nloop invariant i >= 1;\nloop invariant i + k <= LARGE_INT;\nloop invariant i + k >= 1;\nloop invariant i >= 1;\nloop invariant i + k <= LARGE_INT;\nloop invariant i + k >= 1;\nloop invariant i >= 1;\nloop invariant i + k <= LARGE_INT;\nloop invariant i + k >= 1;\nloop invariant i >= 1;\nloop invariant i + k <= LARGE_INT;\nloop invariant i + k >= 1;\nloop invariant i >= 1;\nloop invariant i + k <= LARGE_INT;\nloop invariant i + k >= 1;\nloop invariant i >= 1;\nloop invariant i + k <= LARGE_INT;\nloop invariant i + k >= 1;\nloop invariant i >= 1;\nloop invariant i + k <= LARGE_INT;\nloop invariant i + k >= 1;\nloop invariant i >= 1;\nloop invariant i + k <= LARGE_INT;\nloop invariant i + k >= 1;\nloop invariant i >= 1;\nloop invariant i + k <= LARGE_INT;\nloop invariant i + k >= 1;\nloop invariant i >= 1;\nloop invariant i + k <= LARGE_INT;\nloop invariant i + k >= 1;\nloop invariant i >= 1;\nloop invariant i + k <= LARGE_INT;\nloop invariant i + k >= 1;\nloop invariant i >= 1;\nloop invariant i + k <= LARGE_INT;\nloop invariant i + k >= 1;\nloop invariant i >= 1;\nloop invariant i + k <= LARGE_INT;\nloop invariant i + k >= 1;\nloop invariant i >= 1;\nloop invariant i + k <= LARGE_INT;\nloop invariant i + k >= 1;\nloop invariant i >= 1;\nloop invariant i + k <= LARGE_INT;\nloop invariant i + k >= 1;\nloop invariant i >= 1;\nloop invariant i + k <= LARGE_INT;\nloop invariant i + k >= 1;\nloop invariant i >= 1;\nloop invariant i + k <= LARGE_INT;\nloop invariant i + k >= 1;\nloop invariant i >= 1;\nloop invariant i + k <= LARGE_INT;\nloop invariant i + k >= 1;\nloop invariant i >= 1;\nloop invariant i + k <= LARGE_INT;\nloop invariant i + k >= 1;\nloop invariant i >= 1;\nloop invariant i + k <= LARGE_INT;\nloop invariant i + k >= 1;\nloop invariant i >= 1;\nloop invariant i + k <= LARGE_INT;\nloop invariant i + k >= 1;\nloop invariant i >= 1;\nloop invariant i + k <= LARGE_INT;\nloop invariant i + k >= 1;\nloop invariant i >= 1;\nloop invariant i + k <= LARGE_INT;\nloop invariant i + k >= 1;\nloop invariant i >= 1;\nloop invariant i + k <= LARGE_INT;\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i + k && i + k <= 2 && i >= 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= k <= 1;\nloop invariant 1 <= i + k && i + k <= 2;\nloop invariant i >= 1;\nloop invariant i <= LARGE_INT;\nloop invariant 0 <= j && j <= LARGE_INT * 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= LARGE_INT - 1;\nloop invariant 1 <= j + k * (i - 1);\nloop invariant 0 <= k <= 1;\nloop invariant i + k >= 1;\n*/\n```",
            "```\n/*@\nloop invariant i >= 1;\nloop invariant k >= 0 && k <= i;\nloop invariant j >= i * (i - 1) / 2;\nloop invariant i >= 1 && i <= LARGE_INT;\nloop invariant j >= i * (i - 1) / 2 && j <= i * (i + 1) / 2;\nloop invariant k >= 0 && k <= i;\nloop invariant i >= 1 && i <= LARGE_INT ==> j >= i * (i - 1) / 2 && j <= i * (i + 1) / 2;\nloop invariant k >= 0 && k <= i ==> j >= i * (i - 1) / 2 && j <= i * (i + 1) / 2;\nloop invariant i >= 1 && i <= LARGE_INT ==> k >= 0 && k <= i;\nloop invariant k >= 0 && k <= i ==> i >= 1 && i <= LARGE_INT;\nloop invariant i >= 1 && i <= LARGE_INT ==> j >= i * (i - 1) / 2 && j <= i * (i + 1) / 2 && k >= 0 && k <= i;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= k <= 1;\nloop invariant 1 <= i <= LARGE_INT;\nloop invariant 1 <= j <= i * k;\nloop invariant 1 <= i + k <= 2;\nloop invariant 1 <= i - k <= 1;\nloop invariant i >= 1;\nloop invariant k >= 0;\nloop invariant i + k <= 2;\nloop invariant j >= 1;\nloop invariant j <= i * k;\nloop invariant i + k >= 1;\nloop invariant j >= 1;\nloop invariant j <= i * k;\nloop invariant i + k <= 2;\nloop invariant j >= 1;\nloop invariant j <= i * k;\nloop invariant i + k >= 1;\nloop invariant j >= 1;\nloop invariant j <= i * k;\nloop invariant i + k <= 2;\nloop invariant j >= 1;\nloop invariant j <= i * k;\nloop invariant i + k >= 1;\nloop invariant j >= 1;\nloop invariant j <= i * k;\nloop invariant i + k <= 2;\nloop invariant j >= 1;\nloop invariant j <= i * k;\nloop invariant i + k >= 1;\nloop invariant j >= 1;\nloop invariant j <= i * k;\nloop invariant i + k <= 2;\nloop invariant j >= 1;\nloop invariant j <= i * k;\nloop invariant i + k >= 1;\nloop invariant j >= 1;\nloop invariant j <= i * k;\nloop invariant i + k <= 2;\nloop invariant j >= 1;\nloop invariant j <= i * k;\nloop invariant i + k >= 1;\nloop invariant j >= 1;\nloop invariant j <= i * k;\nloop invariant i + k <= 2;\nloop invariant j >= 1;\nloop invariant j <= i * k;\nloop invariant i + k >= 1;\nloop invariant j >= 1;\nloop invariant j <= i * k;\nloop invariant i + k <= 2;\nloop invariant j >= 1;\nloop invariant j <= i * k;\nloop invariant i + k >= 1;\nloop invariant j >= 1;\nloop invariant j <= i * k;\nloop invariant i + k <= 2;\nloop invariant j >= 1;\nloop invariant j <= i * k;\nloop invariant i + k >= 1;\nloop invariant j >= 1;\nloop invariant j <= i * k;\nloop invariant i + k <= 2;\nloop invariant j >= 1;\nloop invariant j <= i * k;\nloop invariant i + k >= 1;\nloop invariant j >= 1;\nloop invariant j <= i * k;\nloop invariant i + k <= 2;\nloop invariant j >= 1;\nloop invariant j <= i * k;\nloop invariant i + k >= 1;\nloop invariant j >= 1;\nloop invariant j <= i * k;\nloop invariant i + k <= 2;\nloop invariant j >= 1;\nloop invariant j <= i * k;\nloop invariant i + k >= 1;\nloop invariant j >= 1;\nloop invariant j <= i * k;\nloop invariant i + k <= 2;\nloop invariant j >= 1;\nloop invariant j <= i * k;\nloop invariant i + k >= 1;\nloop invariant j >= 1;\nloop invariant j <= i * k;\nloop invariant i + k <= 2;\nloop invariant j >= 1;\nloop invariant j <= i * k;\nloop invariant i + k >= 1;\nloop invariant j >= 1;\nloop invariant j <= i * k;\nloop invariant i + k <= 2;\nloop invariant j >= 1;\nloop invariant j <= i * k;\nloop invariant i + k >= 1;\nloop invariant j >= 1;\nloop invariant j <= i * k;\nloop invariant i + k <= 2;\nloop invariant j >= 1;\nloop invariant j <= i * k;\nloop invariant i + k >= 1;\nloop invariant j >= 1;\nloop invariant j <= i * k;\nloop invariant i + k <= 2;\nloop invariant j >= 1;\nloop invariant j <= i * k;\nloop invariant i + k >= 1;\nloop invariant j >= 1;\nloop invariant j <= i * k;\nloop invariant i + k <= 2;\nloop invariant j >= 1;\nloop invariant j <= i * k;\nloop invariant i + k >= 1;\nloop invariant j >= 1;\nloop invariant j <= i * k;\nloop invariant i + k <= 2;\nloop invariant j >= 1;\nloop invariant j <= i * k;\nloop invariant i + k >= 1;\nloop invariant j >= 1;\nloop invariant j <= i * k;\nloop invariant i + k <= 2;\nloop invariant j >= 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 0 <= k <= 1;\nloop invariant 1 <= j <= LARGE_INT;\nloop invariant 1 <= i <= LARGE_INT;\nloop invariant 1 <= j <= LARGE_INT + k;\nloop invariant 0 <= k <= 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= k <= 1;\nloop invariant 1 <= i <= LARGE_INT;\nloop invariant i >= 1;\nloop invariant j >= 1;\nloop invariant i + k >= 1 && i + k <= 2;\nloop invariant j >= i + k;\nloop invariant j >= i + k - 1;\nloop invariant j >= i + k - 2;\nloop invariant j >= i + k - 3;\nloop invariant j >= i + k - 4;\nloop invariant j >= i + k - 5;\nloop invariant j >= i + k - 6;\nloop invariant j >= i + k - 7;\nloop invariant j >= i + k - 8;\nloop invariant j >= i + k - 9;\nloop invariant j >= i + k - 10;\nloop invariant j >= i + k - 11;\nloop invariant j >= i + k - 12;\nloop invariant j >= i + k - 13;\nloop invariant j >= i + k - 14;\nloop invariant j >= i + k - 15;\nloop invariant j >= i + k - 16;\nloop invariant j >= i + k - 17;\nloop invariant j >= i + k - 18;\nloop invariant j >= i + k - 19;\nloop invariant j >= i + k - 20;\nloop invariant j >= i + k - 21;\nloop invariant j >= i + k - 22;\nloop invariant j >= i + k - 23;\nloop invariant j >= i + k - 24;\nloop invariant j >= i + k - 25;\nloop invariant j >= i + k - 26;\nloop invariant j >= i + k - 27;\nloop invariant j >= i + k - 28;\nloop invariant j >= i + k - 29;\nloop invariant j >= i + k - 30;\nloop invariant j >= i + k - 31;\nloop invariant j >= i + k - 32;\nloop invariant j >= i + k - 33;\nloop invariant j >= i + k - 34;\nloop invariant j >= i + k - 35;\nloop invariant j >= i + k - 36;\nloop invariant j >= i + k - 37;\nloop invariant j >= i + k - 38;\nloop invariant j >= i + k - 39;\nloop invariant j >= i + k - 40;\nloop invariant j >= i + k - 41;\nloop invariant j >= i + k - 42;\nloop invariant j >= i + k - 43;\nloop invariant j >= i + k - 44;\nloop invariant j >= i + k - 45;\nloop invariant j >= i + k - 46;\nloop invariant j >= i + k - 47;\nloop invariant j >= i + k - 48;\nloop invariant j >= i + k - 49;\nloop invariant j >= i + k - 50;\nloop invariant j >= i + k - 51;\nloop invariant j >= i + k - 52;\nloop invariant j >= i + k - 53;\nloop invariant j >= i + k - 54;\nloop invariant j >= i + k - 55;\nloop invariant j >= i + k - 56;\nloop invariant j >= i + k - 57;\nloop invariant j >= i + k - 58;\nloop invariant j >= i + k - 59;\nloop invariant j >= i + k - 60;\nloop invariant j >= i + k - 61;\nloop invariant j >= i + k - 62;\nloop invariant j >= i + k - 63;\nloop invariant j >= i + k - 64;\nloop invariant j >= i + k - 65;\nloop invariant j >= i + k - 66;\nloop invariant j >= i + k - 67;\nloop invariant j >= i + k - 68;\nloop invariant j >= i + k - 69;\nloop invariant j >= i + k - 70;\nloop invariant j >= i + k - 71;\nloop invariant j >= i + k - 72;\nloop invariant j >= i + k - 73;\nloop invariant j >= i + k - 74;\nloop invariant j >= i + k - 75;\nloop invariant j >= i + k - 76;\nloop invariant j >= i + k - 77;\nloop invariant j >= i + k - 78;\nloop invariant j >= i + k - 79;\n*/\n```",
            "```\n/*@\nloop invariant i >= 1 && i <= LARGE_INT && j >= i && k >= 0 && k <= 1 ==> 1 <= i + k && i + k <= 2 && i >= 1;\n*/\n```",
            "```\n/*@\nloop invariant ( 1 <= i ) && ( i <= LARGE_INT ) && ( 0 <= j ) && ( j <= k * LARGE_INT ) && ( 0 <= k ) && ( k <= 1 );\nloop invariant ( 1 <= i + k ) && ( i + k <= 2 ) && ( i >= 1 );\nloop invariant ( j <= k * LARGE_INT ) && ( j >= 0 );\nloop invariant ( i >= 1 ) && ( i <= LARGE_INT ) && ( j >= 0 ) && ( j <= k * LARGE_INT ) && ( 0 <= i + k ) && ( i + k <= 2 ) && ( 0 <= k ) && ( k <= 1 );\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i < 1000000;\nloop invariant 1 <= j <= 1000001;\nloop invariant 0 <= k <= 2;\nloop invariant 0 <= i < 1000000;\nloop invariant 1 <= j <= 1000001;\nloop invariant 0 <= k <= 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i,j,k;\n    i = 1;\n    j = 1;\n    k = unknown_int();\n    if (!(0 <= k && k <= 1)) return 0;\n    /*@\n\n\n\n*/\nwhile (i < LARGE_INT) {\n\ti = i + 1;\n\tj = j + k;\n\tk = k - 1;\n\t{;\n//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 1 <= i && i <= LARGE_INT && k >= 0 && k <= 1;\nloop invariant j >= 1 && j <= LARGE_INT;\nloop invariant i - k <= j && j <= i + k;\nloop invariant if k == 1 then i == LARGE_INT else true;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i,j,k;\n    i = 1;\n    j = 1;\n    k = unknown_int();\n    if (!(0 <= k && k <= 1)) return 0;\n    /*@\n\n\n\n\n*/\nwhile (i < LARGE_INT) {\n\ti = i + 1;\n\tj = j + k;\n\tk = k - 1;\n\t{;\n//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 1 <= i + k and i + k <= 2;\nloop invariant i >= 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i,j,k;\n    i = 1;\n    j = 1;\n    k = unknown_int();\n    if (!(0 <= k && k <= 1)) return 0;\n    /*@\n\nloop invariant i2: i >= 1;\n*/\nwhile (i < LARGE_INT) {\n\ti = i + 1;\n\tj = j + k;\n\tk = k - 1;\n\t{;\n//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 0 <= j <= LARGE_INT * k;\nloop invariant 0 <= k <= 1;\nloop invariant i <= LARGE_INT - 1 ==> k == 0;\nloop invariant i + k <= 2 ==> k == 1;\nloop invariant i >= 1 ==> k == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i,j,k;\n    i = 1;\n    j = 1;\n    k = unknown_int();\n    if (!(0 <= k && k <= 1)) return 0;\n    /*@\nloop invariant i1: 0 <= i <= LARGE_INT;\n\n\n\n\n\n*/\nwhile (i < LARGE_INT) {\n\ti = i + 1;\n\tj = j + k;\n\tk = k - 1;\n\t{;\n//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant j >= 1;\nloop invariant 0 <= k < i;\nloop invariant 1 <= i + k && i + k <= 2;\nloop invariant i >= 1;\nloop invariant j >= k;\nloop invariant i + k <= LARGE_INT;\nloop invariant i + k >= 1;\nloop invariant i >= 1;\nloop invariant j >= i;\nloop invariant i + k <= LARGE_INT;\nloop invariant i + k >= 1;\nloop invariant i >= 1;\nloop invariant i + k <= LARGE_INT;\nloop invariant i + k >= 1;\nloop invariant i >= 1;\nloop invariant i + k <= LARGE_INT;\nloop invariant i + k >= 1;\nloop invariant i >= 1;\nloop invariant i + k <= LARGE_INT;\nloop invariant i + k >= 1;\nloop invariant i >= 1;\nloop invariant i + k <= LARGE_INT;\nloop invariant i + k >= 1;\nloop invariant i >= 1;\nloop invariant i + k <= LARGE_INT;\nloop invariant i + k >= 1;\nloop invariant i >= 1;\nloop invariant i + k <= LARGE_INT;\nloop invariant i + k >= 1;\nloop invariant i >= 1;\nloop invariant i + k <= LARGE_INT;\nloop invariant i + k >= 1;\nloop invariant i >= 1;\nloop invariant i + k <= LARGE_INT;\nloop invariant i + k >= 1;\nloop invariant i >= 1;\nloop invariant i + k <= LARGE_INT;\nloop invariant i + k >= 1;\nloop invariant i >= 1;\nloop invariant i + k <= LARGE_INT;\nloop invariant i + k >= 1;\nloop invariant i >= 1;\nloop invariant i + k <= LARGE_INT;\nloop invariant i + k >= 1;\nloop invariant i >= 1;\nloop invariant i + k <= LARGE_INT;\nloop invariant i + k >= 1;\nloop invariant i >= 1;\nloop invariant i + k <= LARGE_INT;\nloop invariant i + k >= 1;\nloop invariant i >= 1;\nloop invariant i + k <= LARGE_INT;\nloop invariant i + k >= 1;\nloop invariant i >= 1;\nloop invariant i + k <= LARGE_INT;\nloop invariant i + k >= 1;\nloop invariant i >= 1;\nloop invariant i + k <= LARGE_INT;\nloop invariant i + k >= 1;\nloop invariant i >= 1;\nloop invariant i + k <= LARGE_INT;\nloop invariant i + k >= 1;\nloop invariant i >= 1;\nloop invariant i + k <= LARGE_INT;\nloop invariant i + k >= 1;\nloop invariant i >= 1;\nloop invariant i + k <= LARGE_INT;\nloop invariant i + k >= 1;\nloop invariant i >= 1;\nloop invariant i + k <= LARGE_INT;\nloop invariant i + k >= 1;\nloop invariant i >= 1;\nloop invariant i + k <= LARGE_INT;\nloop invariant i + k >= 1;\nloop invariant i >= 1;\nloop invariant i + k <= LARGE_INT;\nloop invariant i + k >= 1;\nloop invariant i >= 1;\nloop invariant i + k <= LARGE_INT;\nloop invariant i + k >= 1;\nloop invariant i >= 1;\nloop invariant i + k <= LARGE_INT;\nloop invariant i + k >= 1;\nloop invariant i >= 1;\nloop invariant i + k <= LARGE_INT;\nloop invariant i + k >= 1;\nloop invariant i >= 1;\nloop invariant i + k <= LARGE_INT;\nloop invariant i + k >= 1;\nloop invariant i >= 1;\nloop invariant i + k <= LARGE_INT;\nloop invariant i + k >= 1;\nloop invariant i >= 1;\nloop invariant i + k <= LARGE_INT;\nloop invariant i + k >= 1;\nloop invariant i >= 1;\nloop invariant i + k <= LARGE_INT;\nloop invariant i + k >= 1;\nloop invariant i >= 1;\nloop invariant i + k <= LARGE_INT;\nloop invariant i + k >= 1;\nloop invariant i >= 1;\nloop invariant i + k <= LARGE_INT;\nloop invariant i + k >= 1;\nloop invariant i >= 1;\nloop invariant i + k <= LARGE_INT;\nloop invariant i + k >= 1;\nloop invariant i >= 1;\nloop invariant i + k <= LARGE_INT;\nloop invariant i + k >= 1;\nloop invariant i >= 1;\nloop invariant i + k <= LARGE_INT;\nloop invariant i + k >= 1;\nloop invariant i >= 1;\nloop invariant i + k <= LARGE_INT;\nloop invariant i + k >= 1;\nloop invariant i >= 1;\nloop invariant i + k <= LARGE_INT;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i,j,k;\n    i = 1;\n    j = 1;\n    k = unknown_int();\n    if (!(0 <= k && k <= 1)) return 0;\n    /*@\nloop invariant i1: 0 <= i <= LARGE_INT;\n\n\nloop invariant i4: 1 <= i + k && i + k <= 2;\nloop invariant i5: i >= 1;\n\nloop invariant i7: i + k <= LARGE_INT;\nloop invariant i8: i + k >= 1;\n\n*/\nwhile (i < LARGE_INT) {\n\ti = i + 1;\n\tj = j + k;\n\tk = k - 1;\n\t{;\n//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i,j,k;\n    i = 1;\n    j = 1;\n    k = unknown_int();\n    if (!(0 <= k && k <= 1)) return 0;\n    /*@\n\n*/\nwhile (i < LARGE_INT) {\n\ti = i + 1;\n\tj = j + k;\n\tk = k - 1;\n\t{;\n//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i + k && i + k <= 2 && i >= 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i,j,k;\n    i = 1;\n    j = 1;\n    k = unknown_int();\n    if (!(0 <= k && k <= 1)) return 0;\n    /*@\nloop invariant i1: 0 <= i + k && i + k <= 2 && i >= 1;\n*/\nwhile (i < LARGE_INT) {\n\ti = i + 1;\n\tj = j + k;\n\tk = k - 1;\n\t{;\n//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= k <= 1;\nloop invariant 1 <= i + k && i + k <= 2;\nloop invariant i >= 1;\nloop invariant i <= LARGE_INT;\nloop invariant 0 <= j && j <= LARGE_INT * 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i,j,k;\n    i = 1;\n    j = 1;\n    k = unknown_int();\n    if (!(0 <= k && k <= 1)) return 0;\n    /*@\n\nloop invariant i2: 1 <= i + k && i + k <= 2;\nloop invariant i3: i >= 1;\nloop invariant i4: i <= LARGE_INT;\n\n*/\nwhile (i < LARGE_INT) {\n\ti = i + 1;\n\tj = j + k;\n\tk = k - 1;\n\t{;\n//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= LARGE_INT - 1;\nloop invariant 1 <= j + k * (i - 1);\nloop invariant 0 <= k <= 1;\nloop invariant i + k >= 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i,j,k;\n    i = 1;\n    j = 1;\n    k = unknown_int();\n    if (!(0 <= k && k <= 1)) return 0;\n    /*@\n\n\n\nloop invariant i4: i + k >= 1;\n*/\nwhile (i < LARGE_INT) {\n\ti = i + 1;\n\tj = j + k;\n\tk = k - 1;\n\t{;\n//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant i >= 1;\nloop invariant k >= 0 && k <= i;\nloop invariant j >= i * (i - 1) / 2;\nloop invariant i >= 1 && i <= LARGE_INT;\nloop invariant j >= i * (i - 1) / 2 && j <= i * (i + 1) / 2;\nloop invariant k >= 0 && k <= i;\nloop invariant i >= 1 && i <= LARGE_INT ==> j >= i * (i - 1) / 2 && j <= i * (i + 1) / 2;\nloop invariant k >= 0 && k <= i ==> j >= i * (i - 1) / 2 && j <= i * (i + 1) / 2;\nloop invariant i >= 1 && i <= LARGE_INT ==> k >= 0 && k <= i;\nloop invariant k >= 0 && k <= i ==> i >= 1 && i <= LARGE_INT;\nloop invariant i >= 1 && i <= LARGE_INT ==> j >= i * (i - 1) / 2 && j <= i * (i + 1) / 2 && k >= 0 && k <= i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i,j,k;\n    i = 1;\n    j = 1;\n    k = unknown_int();\n    if (!(0 <= k && k <= 1)) return 0;\n    /*@\nloop invariant i1: i >= 1;\n\n\nloop invariant i4: i >= 1 && i <= LARGE_INT;\n\n\nloop invariant i7: k >= 0 && k <= i ==> j >= i * (i - 1) / 2 && j <= i * (i + 1) / 2;\n\nloop invariant i9: k >= 0 && k <= i ==> i >= 1 && i <= LARGE_INT;\n\n*/\nwhile (i < LARGE_INT) {\n\ti = i + 1;\n\tj = j + k;\n\tk = k - 1;\n\t{;\n//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= k <= 1;\nloop invariant 1 <= i <= LARGE_INT;\nloop invariant 1 <= j <= i * k;\nloop invariant 1 <= i + k <= 2;\nloop invariant 1 <= i - k <= 1;\nloop invariant i >= 1;\nloop invariant k >= 0;\nloop invariant i + k <= 2;\nloop invariant j >= 1;\nloop invariant j <= i * k;\nloop invariant i + k >= 1;\nloop invariant j >= 1;\nloop invariant j <= i * k;\nloop invariant i + k <= 2;\nloop invariant j >= 1;\nloop invariant j <= i * k;\nloop invariant i + k >= 1;\nloop invariant j >= 1;\nloop invariant j <= i * k;\nloop invariant i + k <= 2;\nloop invariant j >= 1;\nloop invariant j <= i * k;\nloop invariant i + k >= 1;\nloop invariant j >= 1;\nloop invariant j <= i * k;\nloop invariant i + k <= 2;\nloop invariant j >= 1;\nloop invariant j <= i * k;\nloop invariant i + k >= 1;\nloop invariant j >= 1;\nloop invariant j <= i * k;\nloop invariant i + k <= 2;\nloop invariant j >= 1;\nloop invariant j <= i * k;\nloop invariant i + k >= 1;\nloop invariant j >= 1;\nloop invariant j <= i * k;\nloop invariant i + k <= 2;\nloop invariant j >= 1;\nloop invariant j <= i * k;\nloop invariant i + k >= 1;\nloop invariant j >= 1;\nloop invariant j <= i * k;\nloop invariant i + k <= 2;\nloop invariant j >= 1;\nloop invariant j <= i * k;\nloop invariant i + k >= 1;\nloop invariant j >= 1;\nloop invariant j <= i * k;\nloop invariant i + k <= 2;\nloop invariant j >= 1;\nloop invariant j <= i * k;\nloop invariant i + k >= 1;\nloop invariant j >= 1;\nloop invariant j <= i * k;\nloop invariant i + k <= 2;\nloop invariant j >= 1;\nloop invariant j <= i * k;\nloop invariant i + k >= 1;\nloop invariant j >= 1;\nloop invariant j <= i * k;\nloop invariant i + k <= 2;\nloop invariant j >= 1;\nloop invariant j <= i * k;\nloop invariant i + k >= 1;\nloop invariant j >= 1;\nloop invariant j <= i * k;\nloop invariant i + k <= 2;\nloop invariant j >= 1;\nloop invariant j <= i * k;\nloop invariant i + k >= 1;\nloop invariant j >= 1;\nloop invariant j <= i * k;\nloop invariant i + k <= 2;\nloop invariant j >= 1;\nloop invariant j <= i * k;\nloop invariant i + k >= 1;\nloop invariant j >= 1;\nloop invariant j <= i * k;\nloop invariant i + k <= 2;\nloop invariant j >= 1;\nloop invariant j <= i * k;\nloop invariant i + k >= 1;\nloop invariant j >= 1;\nloop invariant j <= i * k;\nloop invariant i + k <= 2;\nloop invariant j >= 1;\nloop invariant j <= i * k;\nloop invariant i + k >= 1;\nloop invariant j >= 1;\nloop invariant j <= i * k;\nloop invariant i + k <= 2;\nloop invariant j >= 1;\nloop invariant j <= i * k;\nloop invariant i + k >= 1;\nloop invariant j >= 1;\nloop invariant j <= i * k;\nloop invariant i + k <= 2;\nloop invariant j >= 1;\nloop invariant j <= i * k;\nloop invariant i + k >= 1;\nloop invariant j >= 1;\nloop invariant j <= i * k;\nloop invariant i + k <= 2;\nloop invariant j >= 1;\nloop invariant j <= i * k;\nloop invariant i + k >= 1;\nloop invariant j >= 1;\nloop invariant j <= i * k;\nloop invariant i + k <= 2;\nloop invariant j >= 1;\nloop invariant j <= i * k;\nloop invariant i + k >= 1;\nloop invariant j >= 1;\nloop invariant j <= i * k;\nloop invariant i + k <= 2;\nloop invariant j >= 1;\nloop invariant j <= i * k;\nloop invariant i + k >= 1;\nloop invariant j >= 1;\nloop invariant j <= i * k;\nloop invariant i + k <= 2;\nloop invariant j >= 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i,j,k;\n    i = 1;\n    j = 1;\n    k = unknown_int();\n    if (!(0 <= k && k <= 1)) return 0;\n    /*@\n\nloop invariant i2: 1 <= i <= LARGE_INT;\n\nloop invariant i4: 1 <= i + k <= 2;\n\nloop invariant i6: i >= 1;\n\nloop invariant i8: i + k <= 2;\n\n\nloop invariant i11: i + k >= 1;\n*/\nwhile (i < LARGE_INT) {\n\ti = i + 1;\n\tj = j + k;\n\tk = k - 1;\n\t{;\n//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 0 <= k <= 1;\nloop invariant 1 <= j <= LARGE_INT;\nloop invariant 1 <= i <= LARGE_INT;\nloop invariant 1 <= j <= LARGE_INT + k;\nloop invariant 0 <= k <= 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i,j,k;\n    i = 1;\n    j = 1;\n    k = unknown_int();\n    if (!(0 <= k && k <= 1)) return 0;\n    /*@\nloop invariant i1: 0 <= i <= LARGE_INT;\n\n\nloop invariant i4: 1 <= i <= LARGE_INT;\n\n*/\nwhile (i < LARGE_INT) {\n\ti = i + 1;\n\tj = j + k;\n\tk = k - 1;\n\t{;\n//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 81,
                "annotations": "```\n/*@\nloop invariant 0 <= k <= 1;\nloop invariant 1 <= i <= LARGE_INT;\nloop invariant i >= 1;\nloop invariant j >= 1;\nloop invariant i + k >= 1 && i + k <= 2;\nloop invariant j >= i + k;\nloop invariant j >= i + k - 1;\nloop invariant j >= i + k - 2;\nloop invariant j >= i + k - 3;\nloop invariant j >= i + k - 4;\nloop invariant j >= i + k - 5;\nloop invariant j >= i + k - 6;\nloop invariant j >= i + k - 7;\nloop invariant j >= i + k - 8;\nloop invariant j >= i + k - 9;\nloop invariant j >= i + k - 10;\nloop invariant j >= i + k - 11;\nloop invariant j >= i + k - 12;\nloop invariant j >= i + k - 13;\nloop invariant j >= i + k - 14;\nloop invariant j >= i + k - 15;\nloop invariant j >= i + k - 16;\nloop invariant j >= i + k - 17;\nloop invariant j >= i + k - 18;\nloop invariant j >= i + k - 19;\nloop invariant j >= i + k - 20;\nloop invariant j >= i + k - 21;\nloop invariant j >= i + k - 22;\nloop invariant j >= i + k - 23;\nloop invariant j >= i + k - 24;\nloop invariant j >= i + k - 25;\nloop invariant j >= i + k - 26;\nloop invariant j >= i + k - 27;\nloop invariant j >= i + k - 28;\nloop invariant j >= i + k - 29;\nloop invariant j >= i + k - 30;\nloop invariant j >= i + k - 31;\nloop invariant j >= i + k - 32;\nloop invariant j >= i + k - 33;\nloop invariant j >= i + k - 34;\nloop invariant j >= i + k - 35;\nloop invariant j >= i + k - 36;\nloop invariant j >= i + k - 37;\nloop invariant j >= i + k - 38;\nloop invariant j >= i + k - 39;\nloop invariant j >= i + k - 40;\nloop invariant j >= i + k - 41;\nloop invariant j >= i + k - 42;\nloop invariant j >= i + k - 43;\nloop invariant j >= i + k - 44;\nloop invariant j >= i + k - 45;\nloop invariant j >= i + k - 46;\nloop invariant j >= i + k - 47;\nloop invariant j >= i + k - 48;\nloop invariant j >= i + k - 49;\nloop invariant j >= i + k - 50;\nloop invariant j >= i + k - 51;\nloop invariant j >= i + k - 52;\nloop invariant j >= i + k - 53;\nloop invariant j >= i + k - 54;\nloop invariant j >= i + k - 55;\nloop invariant j >= i + k - 56;\nloop invariant j >= i + k - 57;\nloop invariant j >= i + k - 58;\nloop invariant j >= i + k - 59;\nloop invariant j >= i + k - 60;\nloop invariant j >= i + k - 61;\nloop invariant j >= i + k - 62;\nloop invariant j >= i + k - 63;\nloop invariant j >= i + k - 64;\nloop invariant j >= i + k - 65;\nloop invariant j >= i + k - 66;\nloop invariant j >= i + k - 67;\nloop invariant j >= i + k - 68;\nloop invariant j >= i + k - 69;\nloop invariant j >= i + k - 70;\nloop invariant j >= i + k - 71;\nloop invariant j >= i + k - 72;\nloop invariant j >= i + k - 73;\nloop invariant j >= i + k - 74;\nloop invariant j >= i + k - 75;\nloop invariant j >= i + k - 76;\nloop invariant j >= i + k - 77;\nloop invariant j >= i + k - 78;\nloop invariant j >= i + k - 79;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i,j,k;\n    i = 1;\n    j = 1;\n    k = unknown_int();\n    if (!(0 <= k && k <= 1)) return 0;\n    /*@\n\nloop invariant i2: 1 <= i <= LARGE_INT;\nloop invariant i3: i >= 1;\n\nloop invariant i5: i + k >= 1 && i + k <= 2;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (i < LARGE_INT) {\n\ti = i + 1;\n\tj = j + k;\n\tk = k - 1;\n\t{;\n//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant i >= 1 && i <= LARGE_INT && j >= i && k >= 0 && k <= 1 ==> 1 <= i + k && i + k <= 2 && i >= 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i,j,k;\n    i = 1;\n    j = 1;\n    k = unknown_int();\n    if (!(0 <= k && k <= 1)) return 0;\n    /*@\nloop invariant i1: i >= 1 && i <= LARGE_INT && j >= i && k >= 0 && k <= 1 ==> 1 <= i + k && i + k <= 2 && i >= 1;\n*/\nwhile (i < LARGE_INT) {\n\ti = i + 1;\n\tj = j + k;\n\tk = k - 1;\n\t{;\n//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant ( 1 <= i ) && ( i <= LARGE_INT ) && ( 0 <= j ) && ( j <= k * LARGE_INT ) && ( 0 <= k ) && ( k <= 1 );\nloop invariant ( 1 <= i + k ) && ( i + k <= 2 ) && ( i >= 1 );\nloop invariant ( j <= k * LARGE_INT ) && ( j >= 0 );\nloop invariant ( i >= 1 ) && ( i <= LARGE_INT ) && ( j >= 0 ) && ( j <= k * LARGE_INT ) && ( 0 <= i + k ) && ( i + k <= 2 ) && ( 0 <= k ) && ( k <= 1 );\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i,j,k;\n    i = 1;\n    j = 1;\n    k = unknown_int();\n    if (!(0 <= k && k <= 1)) return 0;\n    /*@\n\nloop invariant i2: ( 1 <= i + k ) && ( i + k <= 2 ) && ( i >= 1 );\n\n\n*/\nwhile (i < LARGE_INT) {\n\ti = i + 1;\n\tj = j + k;\n\tk = k - 1;\n\t{;\n//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": true
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 24: unexpected token 'k'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i,j,k;\n    i = 1;\n    j = 1;\n    k = unknown_int();\n    if (!(0 <= k && k <= 1)) return 0;\n    /*@\nloop invariant i1: 0 <= i < 1000000;\nloop invariant i2: 1 <= j <= 1000001;\nloop invariant i3: 0 <= k <= 2;\nloop invariant i4: 1 <= i && i <= LARGE_INT && k >= 0 && k <= 1;\nloop invariant i5: j >= 1 && j <= LARGE_INT;\nloop invariant i6: i - k <= j && j <= i + k;\nloop invariant i7: if k == 1 then i == LARGE_INT else true;\nloop invariant i8: 1 <= i + k and i + k <= 2;\nloop invariant i9: i >= 1;\nloop invariant i10: 0 <= i <= LARGE_INT;\nloop invariant i11: 0 <= j <= LARGE_INT * k;\nloop invariant i12: 0 <= k <= 1;\nloop invariant i13: i <= LARGE_INT - 1 ==> k == 0;\nloop invariant i14: i + k <= 2 ==> k == 1;\nloop invariant i15: i >= 1 ==> k == 0;\nloop invariant i16: j >= 1;\nloop invariant i17: 0 <= k < i;\nloop invariant i18: 1 <= i + k && i + k <= 2;\nloop invariant i19: j >= k;\nloop invariant i20: i + k <= LARGE_INT;\nloop invariant i21: i + k >= 1;\nloop invariant i22: j >= i;\nloop invariant i23: 0 <= i + k && i + k <= 2 && i >= 1;\nloop invariant i24: i <= LARGE_INT;\nloop invariant i25: 0 <= j && j <= LARGE_INT * 2;\nloop invariant i26: 0 <= i <= LARGE_INT - 1;\nloop invariant i27: 1 <= j + k * (i - 1);\nloop invariant i28: k >= 0 && k <= i;\nloop invariant i29: j >= i * (i - 1) / 2;\nloop invariant i30: i >= 1 && i <= LARGE_INT;\nloop invariant i31: j >= i * (i - 1) / 2 && j <= i * (i + 1) / 2;\nloop invariant i32: i >= 1 && i <= LARGE_INT ==> j >= i * (i - 1) / 2 && j <= i * (i + 1) / 2;\nloop invariant i33: k >= 0 && k <= i ==> j >= i * (i - 1) / 2 && j <= i * (i + 1) / 2;\nloop invariant i34: i >= 1 && i <= LARGE_INT ==> k >= 0 && k <= i;\nloop invariant i35: k >= 0 && k <= i ==> i >= 1 && i <= LARGE_INT;\nloop invariant i36: i >= 1 && i <= LARGE_INT ==> j >= i * (i - 1) / 2 && j <= i * (i + 1) / 2 && k >= 0 && k <= i;\nloop invariant i37: 1 <= i <= LARGE_INT;\nloop invariant i38: 1 <= j <= i * k;\nloop invariant i39: 1 <= i + k <= 2;\nloop invariant i40: 1 <= i - k <= 1;\nloop invariant i41: k >= 0;\nloop invariant i42: i + k <= 2;\nloop invariant i43: j <= i * k;\nloop invariant i44: 1 <= j <= LARGE_INT;\nloop invariant i45: 1 <= j <= LARGE_INT + k;\nloop invariant i46: i + k >= 1 && i + k <= 2;\nloop invariant i47: j >= i + k;\nloop invariant i48: j >= i + k - 1;\nloop invariant i49: j >= i + k - 2;\nloop invariant i50: j >= i + k - 3;\nloop invariant i51: j >= i + k - 4;\nloop invariant i52: j >= i + k - 5;\nloop invariant i53: j >= i + k - 6;\nloop invariant i54: j >= i + k - 7;\nloop invariant i55: j >= i + k - 8;\nloop invariant i56: j >= i + k - 9;\nloop invariant i57: j >= i + k - 10;\nloop invariant i58: j >= i + k - 11;\nloop invariant i59: j >= i + k - 12;\nloop invariant i60: j >= i + k - 13;\nloop invariant i61: j >= i + k - 14;\nloop invariant i62: j >= i + k - 15;\nloop invariant i63: j >= i + k - 16;\nloop invariant i64: j >= i + k - 17;\nloop invariant i65: j >= i + k - 18;\nloop invariant i66: j >= i + k - 19;\nloop invariant i67: j >= i + k - 20;\nloop invariant i68: j >= i + k - 21;\nloop invariant i69: j >= i + k - 22;\nloop invariant i70: j >= i + k - 23;\nloop invariant i71: j >= i + k - 24;\nloop invariant i72: j >= i + k - 25;\nloop invariant i73: j >= i + k - 26;\nloop invariant i74: j >= i + k - 27;\nloop invariant i75: j >= i + k - 28;\nloop invariant i76: j >= i + k - 29;\nloop invariant i77: j >= i + k - 30;\nloop invariant i78: j >= i + k - 31;\nloop invariant i79: j >= i + k - 32;\nloop invariant i80: j >= i + k - 33;\nloop invariant i81: j >= i + k - 34;\nloop invariant i82: j >= i + k - 35;\nloop invariant i83: j >= i + k - 36;\nloop invariant i84: j >= i + k - 37;\nloop invariant i85: j >= i + k - 38;\nloop invariant i86: j >= i + k - 39;\nloop invariant i87: j >= i + k - 40;\nloop invariant i88: j >= i + k - 41;\nloop invariant i89: j >= i + k - 42;\nloop invariant i90: j >= i + k - 43;\nloop invariant i91: j >= i + k - 44;\nloop invariant i92: j >= i + k - 45;\nloop invariant i93: j >= i + k - 46;\nloop invariant i94: j >= i + k - 47;\nloop invariant i95: j >= i + k - 48;\nloop invariant i96: j >= i + k - 49;\nloop invariant i97: j >= i + k - 50;\nloop invariant i98: j >= i + k - 51;\nloop invariant i99: j >= i + k - 52;\nloop invariant i100: j >= i + k - 53;\nloop invariant i101: j >= i + k - 54;\nloop invariant i102: j >= i + k - 55;\nloop invariant i103: j >= i + k - 56;\nloop invariant i104: j >= i + k - 57;\nloop invariant i105: j >= i + k - 58;\nloop invariant i106: j >= i + k - 59;\nloop invariant i107: j >= i + k - 60;\nloop invariant i108: j >= i + k - 61;\nloop invariant i109: j >= i + k - 62;\nloop invariant i110: j >= i + k - 63;\nloop invariant i111: j >= i + k - 64;\nloop invariant i112: j >= i + k - 65;\nloop invariant i113: j >= i + k - 66;\nloop invariant i114: j >= i + k - 67;\nloop invariant i115: j >= i + k - 68;\nloop invariant i116: j >= i + k - 69;\nloop invariant i117: j >= i + k - 70;\nloop invariant i118: j >= i + k - 71;\nloop invariant i119: j >= i + k - 72;\nloop invariant i120: j >= i + k - 73;\nloop invariant i121: j >= i + k - 74;\nloop invariant i122: j >= i + k - 75;\nloop invariant i123: j >= i + k - 76;\nloop invariant i124: j >= i + k - 77;\nloop invariant i125: j >= i + k - 78;\nloop invariant i126: j >= i + k - 79;\nloop invariant i127: i >= 1 && i <= LARGE_INT && j >= i && k >= 0 && k <= 1 ==> 1 <= i + k && i + k <= 2 && i >= 1;\nloop invariant i128: ( 1 <= i ) && ( i <= LARGE_INT ) && ( 0 <= j ) && ( j <= k * LARGE_INT ) && ( 0 <= k ) && ( k <= 1 );\nloop invariant i129: ( 1 <= i + k ) && ( i + k <= 2 ) && ( i >= 1 );\nloop invariant i130: ( j <= k * LARGE_INT ) && ( j >= 0 );\nloop invariant i131: ( i >= 1 ) && ( i <= LARGE_INT ) && ( j >= 0 ) && ( j <= k * LARGE_INT ) && ( 0 <= i + k ) && ( i + k <= 2 ) && ( 0 <= k ) && ( k <= 1 );\n*/\nwhile (i < LARGE_INT) {\n\ti = i + 1;\n\tj = j + k;\n\tk = k - 1;\n\t{;\n//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n}\n\n    }\n    return 0;\n}",
        "combined_annotation_num_solver_calls": 102,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i,j,k;\n    i = 1;\n    j = 1;\n    k = unknown_int();\n    if (!(0 <= k && k <= 1)) return 0;\n    /*@\n\n\n\n\n\n\n\n\nloop invariant i9: i >= 1;\nloop invariant i10: 0 <= i <= LARGE_INT;\n\n\n\n\n\n\n\nloop invariant i18: 1 <= i + k && i + k <= 2;\n\nloop invariant i20: i + k <= LARGE_INT;\nloop invariant i21: i + k >= 1;\n\nloop invariant i23: 0 <= i + k && i + k <= 2 && i >= 1;\nloop invariant i24: i <= LARGE_INT;\n\n\n\n\n\nloop invariant i30: i >= 1 && i <= LARGE_INT;\n\n\nloop invariant i33: k >= 0 && k <= i ==> j >= i * (i - 1) / 2 && j <= i * (i + 1) / 2;\n\nloop invariant i35: k >= 0 && k <= i ==> i >= 1 && i <= LARGE_INT;\n\nloop invariant i37: 1 <= i <= LARGE_INT;\n\nloop invariant i39: 1 <= i + k <= 2;\n\n\nloop invariant i42: i + k <= 2;\n\n\n\nloop invariant i46: i + k >= 1 && i + k <= 2;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i127: i >= 1 && i <= LARGE_INT && j >= i && k >= 0 && k <= 1 ==> 1 <= i + k && i + k <= 2 && i >= 1;\n\nloop invariant i129: ( 1 <= i + k ) && ( i + k <= 2 ) && ( i >= 1 );\n\n\n*/\nwhile (i < LARGE_INT) {\n\ti = i + 1;\n\tj = j + k;\n\tk = k - 1;\n\t{;\n//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n}\n\n    }\n    return 0;\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/split.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c"
        ],
        "skipped": [],
        "total": 49,
        "success_count": 41,
        "failure_count": 8,
        "success_rate": 0.8367346938775511
    }
}