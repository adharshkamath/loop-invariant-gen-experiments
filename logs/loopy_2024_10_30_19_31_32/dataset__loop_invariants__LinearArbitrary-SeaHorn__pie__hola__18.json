{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/18.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\nextern int unknown3();\n\nint main() {\n   int flag = unknown1();\n   int a = unknown2();\n   int b = unknown3();\n   int j = 0;\n\n   for (b=0; b < 100 ; ++b){\n      if (flag)\n         j = j +1;\n   }\n\n   if(flag)\n      {;\n//@ assert(j==100);\n}\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= j <= 100;\nloop invariant j <= b;\nloop invariant flag ==> (j == 100) ==> (j == b);\nloop invariant !(flag) ==> (j == 0) ==> (j == b);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= b <= 99;\nloop invariant j ==> b >= 100;\nloop invariant j ==> 0 <= b <= 100;\nloop invariant flag ==> j == 100;\nloop invariant flag ==> j >= 100;\nloop invariant flag ==> j <= 100;\nloop invariant flag ==> j == 100;\nloop invariant flag ==> j >= 100;\nloop invariant flag ==> j <= 100;\nloop invariant flag ==> j == 100;\nloop invariant flag ==> j >= 100;\nloop invariant flag ==> j <= 100;\nloop invariant flag ==> j == 100;\nloop invariant flag ==> j >= 100;\nloop invariant flag ==> j <= 100;\nloop invariant flag ==> j == 100;\nloop invariant flag ==> j >= 100;\nloop invariant flag ==> j <= 100;\nloop invariant flag ==> j == 100;\nloop invariant flag ==> j >= 100;\nloop invariant flag ==> j <= 100;\nloop invariant flag ==> j == 100;\nloop invariant flag ==> j >= 100;\nloop invariant flag ==> j <= 100;\nloop invariant flag ==> j == 100;\nloop invariant flag ==> j >= 100;\nloop invariant flag ==> j <= 100;\nloop invariant flag ==> j == 100;\nloop invariant flag ==> j >= 100;\nloop invariant flag ==> j <= 100;\nloop invariant flag ==> j == 100;\nloop invariant flag ==> j >= 100;\nloop invariant flag ==> j <= 100;\nloop invariant flag ==> j == 100;\nloop invariant flag ==> j >= 100;\nloop invariant flag ==> j <= 100;\nloop invariant flag ==> j == 100;\nloop invariant flag ==> j >= 100;\nloop invariant flag ==> j <= 100;\nloop invariant flag ==> j == 100;\nloop invariant flag ==> j >= 100;\nloop invariant flag ==> j <= 100;\nloop invariant flag ==> j == 100;\nloop invariant flag ==> j >= 100;\nloop invariant flag ==> j <= 100;\nloop invariant flag ==> j == 100;\nloop invariant flag ==> j >= 100;\nloop invariant flag ==> j <= 100;\nloop invariant flag ==> j == 100;\nloop invariant flag ==> j >= 100;\nloop invariant flag ==> j <= 100;\nloop invariant flag ==> j == 100;\nloop invariant flag ==> j >= 100;\nloop invariant flag ==> j <= 100;\nloop invariant flag ==> j == 100;\nloop invariant flag ==> j >= 100;\nloop invariant flag ==> j <= 100;\nloop invariant flag ==> j == 100;\nloop invariant flag ==> j >= 100;\nloop invariant flag ==> j <= 100;\nloop invariant flag ==> j == 100;\nloop invariant flag ==> j >= 100;\nloop invariant flag ==> j <= 100;\nloop invariant flag ==> j == 100;\nloop invariant flag ==> j >= 100;\nloop invariant flag ==> j <= 100;\nloop invariant flag ==> j == 100;\nloop invariant flag ==> j >= 100;\nloop invariant flag ==> j <= 100;\nloop invariant flag ==> j == 100;\nloop invariant flag ==> j >= 100;\nloop invariant flag ==> j <= 100;\nloop invariant flag ==> j == 100;\nloop invariant flag ==> j >= 100;\nloop invariant flag ==> j <= 100;\nloop invariant flag ==> j == 100;\nloop invariant flag ==> j >= 100;\nloop invariant flag ==> j <= 100;\nloop invariant flag ==> j == 100;\nloop invariant flag ==> j >= 100;\nloop invariant flag ==> j <= 100;\nloop invariant flag ==> j == 100;\nloop invariant flag ==> j >= 100;\nloop invariant flag ==> j <= 100;\nloop invariant flag ==> j == 100;\nloop invariant flag ==> j >= 100;\nloop invariant flag ==> j <= 100;\nloop invariant flag ==> j == 100;\nloop invariant flag ==> j >= 100;\nloop invariant flag ==> j <= 100;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= b <= 100;\nloop invariant flag == 0 ==> j == 0;\nloop invariant flag == 1 ==> j == 100;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= b <= 100;\nloop invariant if(flag) then j==100 else j==0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= b <= 100;\nloop invariant flag ==> j==100;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= b <= 100;\nloop invariant 0 <= j <= 100;\nloop invariant b * flag == 0 ==> j == 0;\nloop invariant j <= 100 * flag;\nloop invariant b >= 0;\nloop invariant b <= 100;\nloop invariant j >= 0;\nloop invariant j <= 100;\nloop invariant j <= 100 * flag;\nloop invariant j <= 100 * flag;\nloop invariant b <= 100;\nloop invariant j <= 100 * flag;\nloop invariant j <= 100;\nloop invariant flag ==> j >= 0;\nloop invariant flag ==> j <= 100 * flag;\nloop invariant b <= 100;\nloop invariant j == 100 * flag;\nloop invariant flag ==> j == 100 * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100 * flag;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= j <= 100;\nloop invariant (if flag then j == 100 else j == 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= b <= 100;\nloop invariant j == (100 * unknown1());\n*/\n```",
            "```\n/*@\nloop invariant 0 <= j <= 100;\nloop invariant b <= 100;\nloop invariant j == (1 * flag);\nloop invariant (j == 100) ==> flag;\nloop invariant b == (j + flag - 1);\nloop invariant j == (flag * (flag + 1) / 2);\nloop invariant j == (flag * (flag + 1) / 2) * flag;\nloop invariant j == (flag * (flag + 1) / 2) * flag * flag;\nloop invariant j == (flag * (flag + 1) / 2) * flag * flag * flag;\nloop invariant j == (flag * (flag + 1) / 2) * flag * flag * flag * flag;\nloop invariant j == (flag * (flag + 1) / 2) * flag * flag * flag * flag * flag;\nloop invariant j == (flag * (flag + 1) / 2) * flag * flag * flag * flag * flag * flag;\nloop invariant j == (flag * (flag + 1) / 2) * flag * flag * flag * flag * flag * flag * flag;\nloop invariant j == (flag * (flag + 1) / 2) * flag * flag * flag * flag * flag * flag * flag * flag;\nloop invariant j == (flag * (flag + 1) / 2) * flag * flag * flag * flag * flag * flag * flag * flag * flag;\nloop invariant j == (flag * (flag + 1) / 2) * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag;\nloop invariant j == (flag * (flag + 1) / 2) * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag;\nloop invariant j == (flag * (flag + 1) / 2) * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag;\nloop invariant j == (flag * (flag + 1) / 2) * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag;\nloop invariant j == (flag * (flag + 1) / 2) * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag;\nloop invariant j == (flag * (flag + 1) / 2) * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag;\nloop invariant j == (flag * (flag + 1) / 2) * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag;\nloop invariant j == (flag * (flag + 1) / 2) * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag;\nloop invariant j == (flag * (flag + 1) / 2) * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag;\nloop invariant j == (flag * (flag + 1) / 2) * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag;\nloop invariant j == (flag * (flag + 1) / 2) * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag;\nloop invariant j == (flag * (flag + 1) / 2) * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag;\nloop invariant j == (flag * (flag + 1) / 2) * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= j <= 100;\nloop invariant (flag ==> j == 100);\nloop invariant (flag ==> b == 100);\nloop invariant (flag ==> a == 0);\nloop invariant (flag ==> (j >= b));\nloop invariant (flag ==> (j >= a));\nloop invariant (flag ==> (b >= a));\nloop invariant (flag ==> (j <= b));\nloop invariant (flag ==> (j <= a));\nloop invariant (flag ==> (b <= a));\nloop invariant (flag ==> (j == a));\nloop invariant (flag ==> (b == a));\nloop invariant (flag ==> (j == b));\nloop invariant (flag ==> (j == a));\nloop invariant (flag ==> (j == b));\nloop invariant (flag ==> (j == a));\nloop invariant (flag ==> (j == b));\nloop invariant (flag ==> (j == a));\nloop invariant (flag ==> (j == b));\nloop invariant (flag ==> (j == a));\nloop invariant (flag ==> (j == b));\nloop invariant (flag ==> (j == a));\nloop invariant (flag ==> (j == b));\nloop invariant (flag ==> (j == a));\nloop invariant (flag ==> (j == b));\nloop invariant (flag ==> (j == a));\nloop invariant (flag ==> (j == b));\nloop invariant (flag ==> (j == a));\nloop invariant (flag ==> (j == b));\nloop invariant (flag ==> (j == a));\nloop invariant (flag ==> (j == b));\nloop invariant (flag ==> (j == a));\nloop invariant (flag ==> (j == b));\nloop invariant (flag ==> (j == a));\nloop invariant (flag ==> (j == b));\nloop invariant (flag ==> (j == a));\nloop invariant (flag ==> (j == b));\nloop invariant (flag ==> (j == a));\nloop invariant (flag ==> (j == b));\nloop invariant (flag ==> (j == a));\nloop invariant (flag ==> (j == b));\nloop invariant (flag ==> (j == a));\nloop invariant (flag ==> (j == b));\nloop invariant (flag ==> (j == a));\nloop invariant (flag ==> (j == b));\nloop invariant (flag ==> (j == a));\nloop invariant (flag ==> (j == b));\nloop invariant (flag ==> (j == a));\nloop invariant (flag ==> (j == b));\nloop invariant (flag ==> (j == a));\nloop invariant (flag ==> (j == b));\nloop invariant (flag ==> (j == a));\nloop invariant (flag ==> (j == b));\nloop invariant (flag ==> (j == a));\nloop invariant (flag ==> (j == b));\nloop invariant (flag ==> (j == a));\nloop invariant (flag ==> (j == b));\nloop invariant (flag ==> (j == a));\nloop invariant (flag ==> (j == b));\nloop invariant (flag ==> (j == a));\nloop invariant (flag ==> (j == b));\nloop invariant (flag ==> (j == a));\nloop invariant (flag ==> (j == b));\nloop invariant (flag ==> (j == a));\nloop invariant (flag ==> (j == b));\nloop invariant (flag ==> (j == a));\nloop invariant (flag ==> (j == b));\nloop invariant (flag ==> (j == a));\nloop invariant (flag ==> (j == b));\nloop invariant (flag ==> (j == a));\nloop invariant (flag ==> (j == b));\nloop invariant (flag ==> (j == a));\nloop invariant (flag ==> (j == b));\nloop invariant (flag ==> (j == a));\nloop invariant (flag ==> (j == b));\nloop invariant (flag ==> (j == a));\nloop invariant (flag ==> (j == b));\nloop invariant (flag ==> (j == a));\nloop invariant (flag ==> (j == b));\nloop invariant (flag ==> (j == a));\nloop invariant (flag ==> (j == b));\nloop invariant (flag ==> (j == a));\nloop invariant (flag ==> (j == b));\nloop invariant (flag ==> (j == a));\nloop invariant (flag ==> (j == b));\nloop invariant (flag ==> (j == a));\nloop invariant (flag ==> (j == b));\nloop invariant (flag ==> (j == a));\nloop invariant (flag ==> (j == b));\nloop invariant (flag ==> (j == a));\nloop invariant (flag ==> (j == b));\nloop invariant (flag ==> (j == a));\nloop invariant (flag ==> (j == b));\nloop invariant (flag ==> (j == a));\nloop invariant (flag ==> (j == b));\nloop invariant (flag ==> (j == a));\nloop invariant (flag ==> (j == b));\nloop invariant (flag ==> (j == a));\nloop invariant (flag ==> (j == b));\n*/\n```",
            "```\n/*@\nloop invariant 0 <= b <= 100;\nloop invariant j >= 0;\nloop invariant j <= b;\nloop invariant j == (b * flag);\nloop invariant (b * flag) <= 100 * flag;\nloop invariant flag == 0 || flag == 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= b < 100;\nloop invariant j == (100 - b) * flag;\nloop invariant j >= 0;\nloop invariant j <= 100 * flag;\nloop invariant (flag ==> j == 100);\nloop invariant (!flag ==> j == 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= j <= 100;\nloop invariant (flag ==> j==100);\nloop invariant (!flag ==> j==0);\nloop invariant (flag ==> a==unknown2());\nloop invariant (!flag ==> a==unknown2());\nloop invariant (flag ==> b==unknown3());\nloop invariant (!flag ==> b==unknown3());\n*/\n```",
            "```\n/*@\nloop invariant 0 <= b <= 100;\nloop invariant 1 <= j <= 100;\nloop invariant flag ==> j == b;\nloop invariant flag ==> j <= 100;\nloop invariant !flag ==> j == 0;\nloop invariant !flag ==> j >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= j <= 100;\nloop invariant j == 0;\nloop invariant j <= b;\nloop invariant j <= 100;\nloop invariant j == 100;\nloop invariant j == b;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= j <= 100;\nloop invariant j <= b;\nloop invariant flag ==> (j == 100) ==> (j == b);\nloop invariant !(flag) ==> (j == 0) ==> (j == b);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\nextern int unknown3();\n\nint main() {\n   int flag = unknown1();\n   int a = unknown2();\n   int b = unknown3();\n   int j = 0;\n\n   /*@\nloop invariant i1: 0 <= j <= 100;\nloop invariant i2: j <= b;\nloop invariant i3: flag ==> (j == 100) ==> (j == b);\n\n*/\nfor (b=0; b < 100 ; ++b){\n      if (flag)\n         j = j +1;\n   }\n\n   if(flag)\n      {;\n//@ assert(j==100);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= b <= 99;\nloop invariant j ==> b >= 100;\nloop invariant j ==> 0 <= b <= 100;\nloop invariant flag ==> j == 100;\nloop invariant flag ==> j >= 100;\nloop invariant flag ==> j <= 100;\nloop invariant flag ==> j == 100;\nloop invariant flag ==> j >= 100;\nloop invariant flag ==> j <= 100;\nloop invariant flag ==> j == 100;\nloop invariant flag ==> j >= 100;\nloop invariant flag ==> j <= 100;\nloop invariant flag ==> j == 100;\nloop invariant flag ==> j >= 100;\nloop invariant flag ==> j <= 100;\nloop invariant flag ==> j == 100;\nloop invariant flag ==> j >= 100;\nloop invariant flag ==> j <= 100;\nloop invariant flag ==> j == 100;\nloop invariant flag ==> j >= 100;\nloop invariant flag ==> j <= 100;\nloop invariant flag ==> j == 100;\nloop invariant flag ==> j >= 100;\nloop invariant flag ==> j <= 100;\nloop invariant flag ==> j == 100;\nloop invariant flag ==> j >= 100;\nloop invariant flag ==> j <= 100;\nloop invariant flag ==> j == 100;\nloop invariant flag ==> j >= 100;\nloop invariant flag ==> j <= 100;\nloop invariant flag ==> j == 100;\nloop invariant flag ==> j >= 100;\nloop invariant flag ==> j <= 100;\nloop invariant flag ==> j == 100;\nloop invariant flag ==> j >= 100;\nloop invariant flag ==> j <= 100;\nloop invariant flag ==> j == 100;\nloop invariant flag ==> j >= 100;\nloop invariant flag ==> j <= 100;\nloop invariant flag ==> j == 100;\nloop invariant flag ==> j >= 100;\nloop invariant flag ==> j <= 100;\nloop invariant flag ==> j == 100;\nloop invariant flag ==> j >= 100;\nloop invariant flag ==> j <= 100;\nloop invariant flag ==> j == 100;\nloop invariant flag ==> j >= 100;\nloop invariant flag ==> j <= 100;\nloop invariant flag ==> j == 100;\nloop invariant flag ==> j >= 100;\nloop invariant flag ==> j <= 100;\nloop invariant flag ==> j == 100;\nloop invariant flag ==> j >= 100;\nloop invariant flag ==> j <= 100;\nloop invariant flag ==> j == 100;\nloop invariant flag ==> j >= 100;\nloop invariant flag ==> j <= 100;\nloop invariant flag ==> j == 100;\nloop invariant flag ==> j >= 100;\nloop invariant flag ==> j <= 100;\nloop invariant flag ==> j == 100;\nloop invariant flag ==> j >= 100;\nloop invariant flag ==> j <= 100;\nloop invariant flag ==> j == 100;\nloop invariant flag ==> j >= 100;\nloop invariant flag ==> j <= 100;\nloop invariant flag ==> j == 100;\nloop invariant flag ==> j >= 100;\nloop invariant flag ==> j <= 100;\nloop invariant flag ==> j == 100;\nloop invariant flag ==> j >= 100;\nloop invariant flag ==> j <= 100;\nloop invariant flag ==> j == 100;\nloop invariant flag ==> j >= 100;\nloop invariant flag ==> j <= 100;\nloop invariant flag ==> j == 100;\nloop invariant flag ==> j >= 100;\nloop invariant flag ==> j <= 100;\nloop invariant flag ==> j == 100;\nloop invariant flag ==> j >= 100;\nloop invariant flag ==> j <= 100;\nloop invariant flag ==> j == 100;\nloop invariant flag ==> j >= 100;\nloop invariant flag ==> j <= 100;\nloop invariant flag ==> j == 100;\nloop invariant flag ==> j >= 100;\nloop invariant flag ==> j <= 100;\nloop invariant flag ==> j == 100;\nloop invariant flag ==> j >= 100;\nloop invariant flag ==> j <= 100;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\nextern int unknown3();\n\nint main() {\n   int flag = unknown1();\n   int a = unknown2();\n   int b = unknown3();\n   int j = 0;\n\n   /*@\n\n\n\n\n\n\n*/\nfor (b=0; b < 100 ; ++b){\n      if (flag)\n         j = j +1;\n   }\n\n   if(flag)\n      {;\n//@ assert(j==100);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= b <= 100;\nloop invariant flag == 0 ==> j == 0;\nloop invariant flag == 1 ==> j == 100;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\nextern int unknown3();\n\nint main() {\n   int flag = unknown1();\n   int a = unknown2();\n   int b = unknown3();\n   int j = 0;\n\n   /*@\nloop invariant i1: 0 <= b <= 100;\nloop invariant i2: flag == 0 ==> j == 0;\n\n*/\nfor (b=0; b < 100 ; ++b){\n      if (flag)\n         j = j +1;\n   }\n\n   if(flag)\n      {;\n//@ assert(j==100);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= b <= 100;\nloop invariant if(flag) then j==100 else j==0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\nextern int unknown3();\n\nint main() {\n   int flag = unknown1();\n   int a = unknown2();\n   int b = unknown3();\n   int j = 0;\n\n   /*@\nloop invariant i1: 0 <= b <= 100;\n\n*/\nfor (b=0; b < 100 ; ++b){\n      if (flag)\n         j = j +1;\n   }\n\n   if(flag)\n      {;\n//@ assert(j==100);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= b <= 100;\nloop invariant flag ==> j==100;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\nextern int unknown3();\n\nint main() {\n   int flag = unknown1();\n   int a = unknown2();\n   int b = unknown3();\n   int j = 0;\n\n   /*@\nloop invariant i1: 0 <= b <= 100;\n\n*/\nfor (b=0; b < 100 ; ++b){\n      if (flag)\n         j = j +1;\n   }\n\n   if(flag)\n      {;\n//@ assert(j==100);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= b <= 100;\nloop invariant 0 <= j <= 100;\nloop invariant b * flag == 0 ==> j == 0;\nloop invariant j <= 100 * flag;\nloop invariant b >= 0;\nloop invariant b <= 100;\nloop invariant j >= 0;\nloop invariant j <= 100;\nloop invariant j <= 100 * flag;\nloop invariant j <= 100 * flag;\nloop invariant b <= 100;\nloop invariant j <= 100 * flag;\nloop invariant j <= 100;\nloop invariant flag ==> j >= 0;\nloop invariant flag ==> j <= 100 * flag;\nloop invariant b <= 100;\nloop invariant j == 100 * flag;\nloop invariant flag ==> j == 100 * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100 * flag;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\nextern int unknown3();\n\nint main() {\n   int flag = unknown1();\n   int a = unknown2();\n   int b = unknown3();\n   int j = 0;\n\n   /*@\nloop invariant i1: 0 <= b <= 100;\n\nloop invariant i3: b * flag == 0 ==> j == 0;\n\nloop invariant i5: b >= 0;\nloop invariant i6: b <= 100;\nloop invariant i7: j >= 0;\n\nloop invariant i9: flag ==> j >= 0;\n\n\n\n*/\nfor (b=0; b < 100 ; ++b){\n      if (flag)\n         j = j +1;\n   }\n\n   if(flag)\n      {;\n//@ assert(j==100);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= j <= 100;\nloop invariant (if flag then j == 100 else j == 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\nextern int unknown3();\n\nint main() {\n   int flag = unknown1();\n   int a = unknown2();\n   int b = unknown3();\n   int j = 0;\n\n   /*@\n\n\n*/\nfor (b=0; b < 100 ; ++b){\n      if (flag)\n         j = j +1;\n   }\n\n   if(flag)\n      {;\n//@ assert(j==100);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= b <= 100;\nloop invariant j == (100 * unknown1());\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\nextern int unknown3();\n\nint main() {\n   int flag = unknown1();\n   int a = unknown2();\n   int b = unknown3();\n   int j = 0;\n\n   /*@\nloop invariant i1: 0 <= b <= 100;\n\n*/\nfor (b=0; b < 100 ; ++b){\n      if (flag)\n         j = j +1;\n   }\n\n   if(flag)\n      {;\n//@ assert(j==100);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 26,
                "annotations": "```\n/*@\nloop invariant 0 <= j <= 100;\nloop invariant b <= 100;\nloop invariant j == (1 * flag);\nloop invariant (j == 100) ==> flag;\nloop invariant b == (j + flag - 1);\nloop invariant j == (flag * (flag + 1) / 2);\nloop invariant j == (flag * (flag + 1) / 2) * flag;\nloop invariant j == (flag * (flag + 1) / 2) * flag * flag;\nloop invariant j == (flag * (flag + 1) / 2) * flag * flag * flag;\nloop invariant j == (flag * (flag + 1) / 2) * flag * flag * flag * flag;\nloop invariant j == (flag * (flag + 1) / 2) * flag * flag * flag * flag * flag;\nloop invariant j == (flag * (flag + 1) / 2) * flag * flag * flag * flag * flag * flag;\nloop invariant j == (flag * (flag + 1) / 2) * flag * flag * flag * flag * flag * flag * flag;\nloop invariant j == (flag * (flag + 1) / 2) * flag * flag * flag * flag * flag * flag * flag * flag;\nloop invariant j == (flag * (flag + 1) / 2) * flag * flag * flag * flag * flag * flag * flag * flag * flag;\nloop invariant j == (flag * (flag + 1) / 2) * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag;\nloop invariant j == (flag * (flag + 1) / 2) * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag;\nloop invariant j == (flag * (flag + 1) / 2) * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag;\nloop invariant j == (flag * (flag + 1) / 2) * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag;\nloop invariant j == (flag * (flag + 1) / 2) * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag;\nloop invariant j == (flag * (flag + 1) / 2) * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag;\nloop invariant j == (flag * (flag + 1) / 2) * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag;\nloop invariant j == (flag * (flag + 1) / 2) * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag;\nloop invariant j == (flag * (flag + 1) / 2) * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag;\nloop invariant j == (flag * (flag + 1) / 2) * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag;\nloop invariant j == (flag * (flag + 1) / 2) * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag;\nloop invariant j == (flag * (flag + 1) / 2) * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag;\nloop invariant j == (flag * (flag + 1) / 2) * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\nextern int unknown3();\n\nint main() {\n   int flag = unknown1();\n   int a = unknown2();\n   int b = unknown3();\n   int j = 0;\n\n   /*@\n\nloop invariant i2: b <= 100;\n\nloop invariant i4: (j == 100) ==> flag;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nfor (b=0; b < 100 ; ++b){\n      if (flag)\n         j = j +1;\n   }\n\n   if(flag)\n      {;\n//@ assert(j==100);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= j <= 100;\nloop invariant (flag ==> j == 100);\nloop invariant (flag ==> b == 100);\nloop invariant (flag ==> a == 0);\nloop invariant (flag ==> (j >= b));\nloop invariant (flag ==> (j >= a));\nloop invariant (flag ==> (b >= a));\nloop invariant (flag ==> (j <= b));\nloop invariant (flag ==> (j <= a));\nloop invariant (flag ==> (b <= a));\nloop invariant (flag ==> (j == a));\nloop invariant (flag ==> (b == a));\nloop invariant (flag ==> (j == b));\nloop invariant (flag ==> (j == a));\nloop invariant (flag ==> (j == b));\nloop invariant (flag ==> (j == a));\nloop invariant (flag ==> (j == b));\nloop invariant (flag ==> (j == a));\nloop invariant (flag ==> (j == b));\nloop invariant (flag ==> (j == a));\nloop invariant (flag ==> (j == b));\nloop invariant (flag ==> (j == a));\nloop invariant (flag ==> (j == b));\nloop invariant (flag ==> (j == a));\nloop invariant (flag ==> (j == b));\nloop invariant (flag ==> (j == a));\nloop invariant (flag ==> (j == b));\nloop invariant (flag ==> (j == a));\nloop invariant (flag ==> (j == b));\nloop invariant (flag ==> (j == a));\nloop invariant (flag ==> (j == b));\nloop invariant (flag ==> (j == a));\nloop invariant (flag ==> (j == b));\nloop invariant (flag ==> (j == a));\nloop invariant (flag ==> (j == b));\nloop invariant (flag ==> (j == a));\nloop invariant (flag ==> (j == b));\nloop invariant (flag ==> (j == a));\nloop invariant (flag ==> (j == b));\nloop invariant (flag ==> (j == a));\nloop invariant (flag ==> (j == b));\nloop invariant (flag ==> (j == a));\nloop invariant (flag ==> (j == b));\nloop invariant (flag ==> (j == a));\nloop invariant (flag ==> (j == b));\nloop invariant (flag ==> (j == a));\nloop invariant (flag ==> (j == b));\nloop invariant (flag ==> (j == a));\nloop invariant (flag ==> (j == b));\nloop invariant (flag ==> (j == a));\nloop invariant (flag ==> (j == b));\nloop invariant (flag ==> (j == a));\nloop invariant (flag ==> (j == b));\nloop invariant (flag ==> (j == a));\nloop invariant (flag ==> (j == b));\nloop invariant (flag ==> (j == a));\nloop invariant (flag ==> (j == b));\nloop invariant (flag ==> (j == a));\nloop invariant (flag ==> (j == b));\nloop invariant (flag ==> (j == a));\nloop invariant (flag ==> (j == b));\nloop invariant (flag ==> (j == a));\nloop invariant (flag ==> (j == b));\nloop invariant (flag ==> (j == a));\nloop invariant (flag ==> (j == b));\nloop invariant (flag ==> (j == a));\nloop invariant (flag ==> (j == b));\nloop invariant (flag ==> (j == a));\nloop invariant (flag ==> (j == b));\nloop invariant (flag ==> (j == a));\nloop invariant (flag ==> (j == b));\nloop invariant (flag ==> (j == a));\nloop invariant (flag ==> (j == b));\nloop invariant (flag ==> (j == a));\nloop invariant (flag ==> (j == b));\nloop invariant (flag ==> (j == a));\nloop invariant (flag ==> (j == b));\nloop invariant (flag ==> (j == a));\nloop invariant (flag ==> (j == b));\nloop invariant (flag ==> (j == a));\nloop invariant (flag ==> (j == b));\nloop invariant (flag ==> (j == a));\nloop invariant (flag ==> (j == b));\nloop invariant (flag ==> (j == a));\nloop invariant (flag ==> (j == b));\nloop invariant (flag ==> (j == a));\nloop invariant (flag ==> (j == b));\nloop invariant (flag ==> (j == a));\nloop invariant (flag ==> (j == b));\nloop invariant (flag ==> (j == a));\nloop invariant (flag ==> (j == b));\nloop invariant (flag ==> (j == a));\nloop invariant (flag ==> (j == b));\nloop invariant (flag ==> (j == a));\nloop invariant (flag ==> (j == b));\nloop invariant (flag ==> (j == a));\nloop invariant (flag ==> (j == b));\nloop invariant (flag ==> (j == a));\nloop invariant (flag ==> (j == b));\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\nextern int unknown3();\n\nint main() {\n   int flag = unknown1();\n   int a = unknown2();\n   int b = unknown3();\n   int j = 0;\n\n   /*@\nloop invariant i1: 0 <= j <= 100;\n\n\n\nloop invariant i5: (flag ==> (j >= b));\n\n\nloop invariant i8: (flag ==> (j <= b));\n\n\n\n\nloop invariant i13: (flag ==> (j == b));\n*/\nfor (b=0; b < 100 ; ++b){\n      if (flag)\n         j = j +1;\n   }\n\n   if(flag)\n      {;\n//@ assert(j==100);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= b <= 100;\nloop invariant j >= 0;\nloop invariant j <= b;\nloop invariant j == (b * flag);\nloop invariant (b * flag) <= 100 * flag;\nloop invariant flag == 0 || flag == 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\nextern int unknown3();\n\nint main() {\n   int flag = unknown1();\n   int a = unknown2();\n   int b = unknown3();\n   int j = 0;\n\n   /*@\nloop invariant i1: 0 <= b <= 100;\nloop invariant i2: j >= 0;\nloop invariant i3: j <= b;\n\n\n\n*/\nfor (b=0; b < 100 ; ++b){\n      if (flag)\n         j = j +1;\n   }\n\n   if(flag)\n      {;\n//@ assert(j==100);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= b < 100;\nloop invariant j == (100 - b) * flag;\nloop invariant j >= 0;\nloop invariant j <= 100 * flag;\nloop invariant (flag ==> j == 100);\nloop invariant (!flag ==> j == 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\nextern int unknown3();\n\nint main() {\n   int flag = unknown1();\n   int a = unknown2();\n   int b = unknown3();\n   int j = 0;\n\n   /*@\n\n\nloop invariant i3: j >= 0;\n\n\nloop invariant i6: (!flag ==> j == 0);\n*/\nfor (b=0; b < 100 ; ++b){\n      if (flag)\n         j = j +1;\n   }\n\n   if(flag)\n      {;\n//@ assert(j==100);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= j <= 100;\nloop invariant (flag ==> j==100);\nloop invariant (!flag ==> j==0);\nloop invariant (flag ==> a==unknown2());\nloop invariant (!flag ==> a==unknown2());\nloop invariant (flag ==> b==unknown3());\nloop invariant (!flag ==> b==unknown3());\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\nextern int unknown3();\n\nint main() {\n   int flag = unknown1();\n   int a = unknown2();\n   int b = unknown3();\n   int j = 0;\n\n   /*@\n\n\nloop invariant i3: (!flag ==> j==0);\n\n\n\n\n*/\nfor (b=0; b < 100 ; ++b){\n      if (flag)\n         j = j +1;\n   }\n\n   if(flag)\n      {;\n//@ assert(j==100);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= b <= 100;\nloop invariant 1 <= j <= 100;\nloop invariant flag ==> j == b;\nloop invariant flag ==> j <= 100;\nloop invariant !flag ==> j == 0;\nloop invariant !flag ==> j >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\nextern int unknown3();\n\nint main() {\n   int flag = unknown1();\n   int a = unknown2();\n   int b = unknown3();\n   int j = 0;\n\n   /*@\nloop invariant i1: 0 <= b <= 100;\n\nloop invariant i3: flag ==> j == b;\nloop invariant i4: flag ==> j <= 100;\nloop invariant i5: !flag ==> j == 0;\nloop invariant i6: !flag ==> j >= 0;\n*/\nfor (b=0; b < 100 ; ++b){\n      if (flag)\n         j = j +1;\n   }\n\n   if(flag)\n      {;\n//@ assert(j==100);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= j <= 100;\nloop invariant j == 0;\nloop invariant j <= b;\nloop invariant j <= 100;\nloop invariant j == 100;\nloop invariant j == b;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\nloop invariant j == b - 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\nextern int unknown3();\n\nint main() {\n   int flag = unknown1();\n   int a = unknown2();\n   int b = unknown3();\n   int j = 0;\n\n   /*@\nloop invariant i1: 0 <= j <= 100;\n\nloop invariant i3: j <= b;\nloop invariant i4: j <= 100;\n\n\n\n*/\nfor (b=0; b < 100 ; ++b){\n      if (flag)\n         j = j +1;\n   }\n\n   if(flag)\n      {;\n//@ assert(j==100);\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 31: unexpected token '('",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\nextern int unknown3();\n\nint main() {\n   int flag = unknown1();\n   int a = unknown2();\n   int b = unknown3();\n   int j = 0;\n\n   /*@\nloop invariant i1: 0 <= j <= 100;\nloop invariant i2: j <= b;\nloop invariant i3: flag ==> (j == 100) ==> (j == b);\nloop invariant i4: !(flag) ==> (j == 0) ==> (j == b);\nloop invariant i5: 0 <= b <= 99;\nloop invariant i6: j ==> b >= 100;\nloop invariant i7: j ==> 0 <= b <= 100;\nloop invariant i8: flag ==> j == 100;\nloop invariant i9: flag ==> j >= 100;\nloop invariant i10: flag ==> j <= 100;\nloop invariant i11: 0 <= b <= 100;\nloop invariant i12: flag == 0 ==> j == 0;\nloop invariant i13: flag == 1 ==> j == 100;\nloop invariant i14: if(flag) then j==100 else j==0;\nloop invariant i15: flag ==> j==100;\nloop invariant i16: b * flag == 0 ==> j == 0;\nloop invariant i17: j <= 100 * flag;\nloop invariant i18: b >= 0;\nloop invariant i19: b <= 100;\nloop invariant i20: j >= 0;\nloop invariant i21: j <= 100;\nloop invariant i22: flag ==> j >= 0;\nloop invariant i23: flag ==> j <= 100 * flag;\nloop invariant i24: j == 100 * flag;\nloop invariant i25: flag ==> j == 100 * flag;\nloop invariant i26: (if flag then j == 100 else j == 0);\nloop invariant i27: j == (100 * unknown1());\nloop invariant i28: j == (1 * flag);\nloop invariant i29: (j == 100) ==> flag;\nloop invariant i30: b == (j + flag - 1);\nloop invariant i31: j == (flag * (flag + 1) / 2);\nloop invariant i32: j == (flag * (flag + 1) / 2) * flag;\nloop invariant i33: j == (flag * (flag + 1) / 2) * flag * flag;\nloop invariant i34: j == (flag * (flag + 1) / 2) * flag * flag * flag;\nloop invariant i35: j == (flag * (flag + 1) / 2) * flag * flag * flag * flag;\nloop invariant i36: j == (flag * (flag + 1) / 2) * flag * flag * flag * flag * flag;\nloop invariant i37: j == (flag * (flag + 1) / 2) * flag * flag * flag * flag * flag * flag;\nloop invariant i38: j == (flag * (flag + 1) / 2) * flag * flag * flag * flag * flag * flag * flag;\nloop invariant i39: j == (flag * (flag + 1) / 2) * flag * flag * flag * flag * flag * flag * flag * flag;\nloop invariant i40: j == (flag * (flag + 1) / 2) * flag * flag * flag * flag * flag * flag * flag * flag * flag;\nloop invariant i41: j == (flag * (flag + 1) / 2) * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag;\nloop invariant i42: j == (flag * (flag + 1) / 2) * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag;\nloop invariant i43: j == (flag * (flag + 1) / 2) * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag;\nloop invariant i44: j == (flag * (flag + 1) / 2) * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag;\nloop invariant i45: j == (flag * (flag + 1) / 2) * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag;\nloop invariant i46: j == (flag * (flag + 1) / 2) * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag;\nloop invariant i47: j == (flag * (flag + 1) / 2) * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag;\nloop invariant i48: j == (flag * (flag + 1) / 2) * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag;\nloop invariant i49: j == (flag * (flag + 1) / 2) * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag;\nloop invariant i50: j == (flag * (flag + 1) / 2) * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag;\nloop invariant i51: j == (flag * (flag + 1) / 2) * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag;\nloop invariant i52: j == (flag * (flag + 1) / 2) * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag;\nloop invariant i53: j == (flag * (flag + 1) / 2) * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag * flag;\nloop invariant i54: (flag ==> j == 100);\nloop invariant i55: (flag ==> b == 100);\nloop invariant i56: (flag ==> a == 0);\nloop invariant i57: (flag ==> (j >= b));\nloop invariant i58: (flag ==> (j >= a));\nloop invariant i59: (flag ==> (b >= a));\nloop invariant i60: (flag ==> (j <= b));\nloop invariant i61: (flag ==> (j <= a));\nloop invariant i62: (flag ==> (b <= a));\nloop invariant i63: (flag ==> (j == a));\nloop invariant i64: (flag ==> (b == a));\nloop invariant i65: (flag ==> (j == b));\nloop invariant i66: j == (b * flag);\nloop invariant i67: (b * flag) <= 100 * flag;\nloop invariant i68: flag == 0 || flag == 1;\nloop invariant i69: 0 <= b < 100;\nloop invariant i70: j == (100 - b) * flag;\nloop invariant i71: (!flag ==> j == 0);\nloop invariant i72: (flag ==> j==100);\nloop invariant i73: (!flag ==> j==0);\nloop invariant i74: (flag ==> a==unknown2());\nloop invariant i75: (!flag ==> a==unknown2());\nloop invariant i76: (flag ==> b==unknown3());\nloop invariant i77: (!flag ==> b==unknown3());\nloop invariant i78: 1 <= j <= 100;\nloop invariant i79: flag ==> j == b;\nloop invariant i80: !flag ==> j == 0;\nloop invariant i81: !flag ==> j >= 0;\nloop invariant i82: j == 0;\nloop invariant i83: j == 100;\nloop invariant i84: j == b;\nloop invariant i85: j == b - 1;\n*/\nfor (b=0; b < 100 ; ++b){\n      if (flag)\n         j = j +1;\n   }\n\n   if(flag)\n      {;\n//@ assert(j==100);\n}\n\n}",
        "combined_annotation_num_solver_calls": 38,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\nextern int unknown3();\n\nint main() {\n   int flag = unknown1();\n   int a = unknown2();\n   int b = unknown3();\n   int j = 0;\n\n   /*@\nloop invariant i1: 0 <= j <= 100;\nloop invariant i2: j <= b;\nloop invariant i3: flag ==> (j == 100) ==> (j == b);\n\n\n\nloop invariant i7: j ==> 0 <= b <= 100;\n\n\nloop invariant i10: flag ==> j <= 100;\nloop invariant i11: 0 <= b <= 100;\nloop invariant i12: flag == 0 ==> j == 0;\n\n\n\nloop invariant i16: b * flag == 0 ==> j == 0;\n\nloop invariant i18: b >= 0;\nloop invariant i19: b <= 100;\nloop invariant i20: j >= 0;\nloop invariant i21: j <= 100;\nloop invariant i22: flag ==> j >= 0;\n\n\n\n\n\n\nloop invariant i29: (j == 100) ==> flag;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i57: (flag ==> (j >= b));\n\n\nloop invariant i60: (flag ==> (j <= b));\n\n\n\n\nloop invariant i65: (flag ==> (j == b));\n\n\n\n\n\nloop invariant i71: (!flag ==> j == 0);\n\nloop invariant i73: (!flag ==> j==0);\n\n\n\n\n\nloop invariant i79: flag ==> j == b;\nloop invariant i80: !flag ==> j == 0;\nloop invariant i81: !flag ==> j >= 0;\n\n\n\n\n*/\nfor (b=0; b < 100 ; ++b){\n      if (flag)\n         j = j +1;\n   }\n\n   if(flag)\n      {;\n//@ assert(j==100);\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/11.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/15.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/16.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/18.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/split.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/13.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/14.c"
        ],
        "skipped": [],
        "total": 112,
        "success_count": 95,
        "failure_count": 17,
        "success_rate": 0.8482142857142857
    }
}