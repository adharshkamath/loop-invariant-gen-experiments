{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n    if (!(i >= 0 && j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    while(x != 0) {\n        x--;\n        y--;\n    }\n\n    if (i == j) {\n        {;\n//@ assert(y == 0);\n}\n\n    }\n    return 0;\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x >= i;\nloop invariant y >= j;\nloop invariant x >= y;\nloop invariant i - x == j - y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= i;\nloop invariant 0 <= y <= j;\nloop invariant i - x == j - y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= i;\nloop invariant 0 <= y <= j;\nloop invariant x + y == i + j;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x == i - y;\nloop invariant y == j - x;\nloop invariant x == 0 == (y == j);\nloop invariant y == 0 == (x == i);\nloop invariant (x != 0 ==> (x <= i && y <= j));\nloop invariant (x == 0 ==> (y == j));\nloop invariant (y == 0 ==> (x == i));\nloop invariant (x != 0 ==> (x >= 0 && y >= 0));\nloop invariant (x == 0 ==> (y >= 0 && x >= 0));\nloop invariant (y != 0 ==> (y >= 0 && x >= 0));\nloop invariant (y == 0 ==> (x >= 0 && y >= 0));\nloop invariant (x != 0 ==> (x == i - y && y == j - x));\nloop invariant (x == 0 ==> (y == j && x == i));\nloop invariant (y != 0 ==> (y == j - x && x == i - y));\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= i;\nloop invariant 0 <= y <= j;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant x + y == i + j;\nloop invariant x == i - j;\nloop invariant y == j - i;\nloop invariant x == 0 ==> j == i;\nloop invariant y == 0 ==> i == j;\nloop invariant x == i ==> y == 0;\nloop invariant y == j ==> x == 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x + y == i + j;\nloop invariant x == i - j;\nloop invariant y == j - i;\nloop invariant x == 0 ==> j == i;\nloop invariant y == 0 ==> i == j;\nloop invariant x == i ==> y == 0;\nloop invariant y == j ==> x == 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x + y == i + j;\nloop invariant x == i - j;\nloop invariant y == j - i;\nloop invariant x == 0 ==> j == i;\nloop invariant y == 0 ==> i == j;\nloop invariant x == i ==> y == 0;\nloop invariant y == j ==> x == 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x + y == i + j;\nloop invariant x == i - j;\nloop invariant y == j - i;\nloop invariant x == 0 ==> j == i;\nloop invariant y == 0 ==> i == j;\nloop invariant x == i ==> y == 0;\nloop invariant y == j ==> x == 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x + y == i + j;\nloop invariant x == i - j;\nloop invariant y == j - i;\nloop invariant x == 0 ==> j == i;\nloop invariant y == 0 ==> i == j;\nloop invariant x == i ==> y == 0;\nloop invariant y == j ==> x == 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x + y == i + j;\nloop invariant x == i - j;\nloop invariant y == j - i;\nloop invariant x == 0 ==> j == i;\nloop invariant y == 0 ==> i == j;\nloop invariant x == i ==> y == 0;\nloop invariant y == j ==> x == 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x + y == i + j;\nloop invariant x == i - j;\nloop invariant y == j - i;\nloop invariant x == 0 ==> j == i;\nloop invariant y == 0 ==> i == j;\nloop invariant x == i ==> y == 0;\nloop invariant y == j ==> x == 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x + y == i + j;\nloop invariant x == i - j;\nloop invariant y == j - i;\nloop invariant x == 0 ==> j == i;\nloop invariant y == 0 ==> i == j;\nloop invariant x == i ==> y == 0;\nloop invariant y == j ==> x == 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x + y == i + j;\nloop invariant x == i - j;\nloop invariant y == j - i;\nloop invariant x == 0 ==> j == i;\nloop invariant y == 0 ==> i == j;\nloop invariant x == i ==> y == 0;\nloop invariant y == j ==> x == 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x + y == i + j;\nloop invariant x == i - j;\nloop invariant y == j - i;\nloop invariant x == 0 ==> j == i;\nloop invariant y == 0 ==> i == j;\nloop invariant x == i ==> y == 0;\nloop invariant y == j ==> x == 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x >= 0;\nloop invariant y >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= i;\nloop invariant 0 <= y <= j;\nloop invariant x + y >= i - j;\nloop invariant x + y <= i + j;\nloop invariant x = i - y;\nloop invariant y = j - x;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= i;\nloop invariant 0 <= y <= j;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x == i - j;\nloop invariant y == j - j;\nloop invariant i >= j;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x + y == i + j - j;\nloop invariant x + y == i - j;\nloop invariant x + y == j;\nloop invariant x + y == 0;\nloop invariant x + y == i;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i == j;\nloop invariant x == 0;\nloop invariant y == 0;\nloop invariant x == i;\nloop invariant y == j;\nloop invariant i == j;\nloop invariant x == i - j;\nloop invariant y == j - j;\nloop invariant x == i;\nloop invariant y == j - j;\nloop invariant i >= j;\nloop invariant x + y == i;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i == j;\nloop invariant x == 0;\nloop invariant y == 0;\nloop invariant x == i;\nloop invariant y == j;\nloop invariant i == j;\nloop invariant x == i - j;\nloop invariant y == j - j;\nloop invariant x == i;\nloop invariant y == j - j;\nloop invariant i >= j;\nloop invariant x + y == i;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i == j;\nloop invariant x == 0;\nloop invariant y == 0;\nloop invariant x == i;\nloop invariant y == j;\nloop invariant i == j;\nloop invariant x == i - j;\nloop invariant y == j - j;\nloop invariant x == i;\nloop invariant y == j - j;\nloop invariant i >= j;\nloop invariant x + y == i;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i == j;\nloop invariant x == 0;\nloop invariant y == 0;\nloop invariant x == i;\nloop invariant y == j;\nloop invariant i == j;\nloop invariant x == i - j;\nloop invariant y == j - j;\nloop invariant x == i;\nloop invariant y == j - j;\nloop invariant i >= j;\nloop invariant x + y == i;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i == j;\nloop invariant x == 0;\nloop invariant y == 0;\nloop invariant x == i;\nloop invariant y == j;\nloop invariant i == j;\nloop invariant x == i - j;\nloop invariant y == j - j;\nloop invariant x == i;\nloop invariant y == j - j;\nloop invariant i >= j;\nloop invariant x + y == i;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i == j;\nloop invariant x == 0;\nloop invariant y == 0;\nloop invariant x == i;\nloop invariant y == j;\nloop invariant i == j;\nloop invariant x == i - j;\nloop invariant y == j - j;\nloop invariant x == i;\nloop invariant y == j - j;\nloop invariant i >= j;\nloop invariant x + y == i;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i == j;\nloop invariant x == 0;\nloop invariant y == 0;\nloop invariant x == i;\nloop invariant y == j;\nloop invariant i == j;\nloop invariant x == i - j;\nloop invariant y == j - j;\nloop invariant x == i;\nloop invariant y == j - j;\nloop invariant i >= j;\nloop invariant x + y == i;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i == j;\nloop invariant x == 0;\nloop invariant y == 0;\nloop invariant x == i;\nloop invariant y == j;\nloop invariant i == j;\nloop invariant x == i - j;\nloop invariant y == j - j;\nloop invariant x == i;\nloop invariant y == j - j;\nloop invariant i >= j;\nloop invariant x + y == i;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i == j;\nloop invariant x == 0;\nloop invariant y == 0;\nloop invariant x == i;\nloop invariant y == j;\nloop invariant i == j;\nloop invariant x == i - j;\nloop invariant y == j - j;\nloop invariant x == i;\nloop invariant y == j - j;\nloop invariant i >= j;\nloop invariant x + y == i;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i == j;\n*/\n```",
            "```\n/*@\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x == 0 ==> y == 0;\nloop invariant i == j ==> x == y;\nloop invariant i >= j ==> x == y;\nloop invariant i < j ==> x == 0;\nloop invariant y >= i ==> x == 0;\nloop invariant y < i ==> x == y;\nloop invariant i == j ==> x == y;\nloop invariant i >= j ==> x == y;\nloop invariant i < j ==> x == 0;\nloop invariant y >= i ==> x == 0;\nloop invariant y < i ==> x == y;\nloop invariant i == j ==> x == y;\nloop invariant i >= j ==> x == y;\nloop invariant i < j ==> x == 0;\nloop invariant y >= i ==> x == 0;\nloop invariant y < i ==> x == y;\nloop invariant i == j ==> x == y;\nloop invariant i >= j ==> x == y;\nloop invariant i < j ==> x == 0;\nloop invariant y >= i ==> x == 0;\nloop invariant y < i ==> x == y;\nloop invariant i == j ==> x == y;\nloop invariant i >= j ==> x == y;\nloop invariant i < j ==> x == 0;\nloop invariant y >= i ==> x == 0;\nloop invariant y < i ==> x == y;\nloop invariant i == j ==> x == y;\nloop invariant i >= j ==> x == y;\nloop invariant i < j ==> x == 0;\nloop invariant y >= i ==> x == 0;\nloop invariant y < i ==> x == y;\nloop invariant i == j ==> x == y;\nloop invariant i >= j ==> x == y;\nloop invariant i < j ==> x == 0;\nloop invariant y >= i ==> x == 0;\nloop invariant y < i ==> x == y;\nloop invariant i == j ==> x == y;\nloop invariant i >= j ==> x == y;\nloop invariant i < j ==> x == 0;\nloop invariant y >= i ==> x == 0;\nloop invariant y < i ==> x == y;\nloop invariant i == j ==> x == y;\nloop invariant i >= j ==> x == y;\nloop invariant i < j ==> x == 0;\nloop invariant y >= i ==> x == 0;\nloop invariant y < i ==> x == y;\nloop invariant i == j ==> x == y;\nloop invariant i >= j ==> x == y;\nloop invariant i < j ==> x == 0;\nloop invariant y >= i ==> x == 0;\nloop invariant y < i ==> x == y;\nloop invariant i == j ==> x == y;\nloop invariant i >= j ==> x == y;\nloop invariant i < j ==> x == 0;\nloop invariant y >= i ==> x == 0;\nloop invariant y < i ==> x == y;\nloop invariant i == j ==> x == y;\nloop invariant i >= j ==> x == y;\nloop invariant i < j ==> x == 0;\nloop invariant y >= i ==> x == 0;\nloop invariant y < i ==> x == y;\nloop invariant i == j ==> x == y;\nloop invariant i >= j ==> x == y;\nloop invariant i < j ==> x == 0;\nloop invariant y >= i ==> x == 0;\nloop invariant y < i ==> x == y;\nloop invariant i == j ==> x == y;\nloop invariant i >= j ==> x == y;\nloop invariant i < j ==> x == 0;\nloop invariant y >= i ==> x == 0;\nloop invariant y < i ==> x == y;\nloop invariant i == j ==> x == y;\nloop invariant i >= j ==> x == y;\nloop invariant i < j ==> x == 0;\nloop invariant y >= i ==> x == 0;\nloop invariant y < i ==> x == y;\nloop invariant i == j ==> x == y;\nloop invariant i >= j ==> x == y;\nloop invariant i < j ==> x == 0;\nloop invariant y >= i ==> x == 0;\nloop invariant y < i ==> x == y;\nloop invariant i == j ==> x == y;\nloop invariant i >= j ==> x == y;\nloop invariant i < j ==> x == 0;\nloop invariant y >= i ==> x == 0;\nloop invariant y < i ==> x == y;\nloop invariant i == j ==> x == y;\nloop invariant i >= j ==> x == y;\nloop invariant i < j ==> x == 0;\nloop invariant y >= i ==> x == 0;\nloop invariant y < i ==> x == y;\nloop invariant i == j ==> x == y;\n*/\n```",
            "```\n/*@\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant i == x + j;\nloop invariant j == y + i;\nloop invariant i != 0 ==> x == i;\nloop invariant i != 0 ==> y == j;\nloop invariant i == j ==> y == 0;\nloop invariant i == j ==> x == 2 * j;\nloop invariant i == j ==> y == j * j;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= j;\nloop invariant x == i;\nloop invariant y == j;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y == i - x;\nloop invariant y <= j;\nloop invariant i >= j;\nloop invariant x >= y;\nloop invariant x == 0 ==> y == j;\nloop invariant x == 0 ==> i == j;\nloop invariant x == 0 ==> y == 0;\nloop invariant x == 0 ==> i >= 0;\nloop invariant x == 0 ==> j >= 0;\nloop invariant x == 0 ==> i == j;\nloop invariant x == 0 ==> y == 0;\nloop invariant x == 0 ==> i >= 0;\nloop invariant x == 0 ==> j >= 0;\nloop invariant x == 0 ==> i == j;\nloop invariant x == 0 ==> y == 0;\nloop invariant x == 0 ==> i >= 0;\nloop invariant x == 0 ==> j >= 0;\nloop invariant x == 0 ==> i == j;\nloop invariant x == 0 ==> y == 0;\nloop invariant x == 0 ==> i >= 0;\nloop invariant x == 0 ==> j >= 0;\nloop invariant x == 0 ==> i == j;\nloop invariant x == 0 ==> y == 0;\nloop invariant x == 0 ==> i >= 0;\nloop invariant x == 0 ==> j >= 0;\nloop invariant x == 0 ==> i == j;\nloop invariant x == 0 ==> y == 0;\nloop invariant x == 0 ==> i >= 0;\nloop invariant x == 0 ==> j >= 0;\nloop invariant x == 0 ==> i == j;\nloop invariant x == 0 ==> y == 0;\nloop invariant x == 0 ==> i >= 0;\nloop invariant x == 0 ==> j >= 0;\nloop invariant x == 0 ==> i == j;\nloop invariant x == 0 ==> y == 0;\nloop invariant x == 0 ==> i >= 0;\nloop invariant x == 0 ==> j >= 0;\nloop invariant x == 0 ==> i == j;\nloop invariant x == 0 ==> y == 0;\nloop invariant x == 0 ==> i >= 0;\nloop invariant x == 0 ==> j >= 0;\nloop invariant x == 0 ==> i == j;\nloop invariant x == 0 ==> y == 0;\nloop invariant x == 0 ==> i >= 0;\nloop invariant x == 0 ==> j >= 0;\nloop invariant x == 0 ==> i == j;\nloop invariant x == 0 ==> y == 0;\nloop invariant x == 0 ==> i >= 0;\nloop invariant x == 0 ==> j >= 0;\nloop invariant x == 0 ==> i == j;\nloop invariant x == 0 ==> y == 0;\nloop invariant x == 0 ==> i >= 0;\nloop invariant x == 0 ==> j >= 0;\nloop invariant x == 0 ==> i == j;\nloop invariant x == 0 ==> y == 0;\nloop invariant x == 0 ==> i >= 0;\nloop invariant x == 0 ==> j >= 0;\nloop invariant x == 0 ==> i == j;\nloop invariant x == 0 ==> y == 0;\nloop invariant x == 0 ==> i >= 0;\nloop invariant x == 0 ==> j >= 0;\nloop invariant x == 0 ==> i == j;\nloop invariant x == 0 ==> y == 0;\nloop invariant x == 0 ==> i >= 0;\nloop invariant x == 0 ==> j >= 0;\nloop invariant x == 0 ==> i == j;\nloop invariant x == 0 ==> y == 0;\nloop invariant x == 0 ==> i >= 0;\nloop invariant x == 0 ==> j >= 0;\nloop invariant x == 0 ==> i == j;\nloop invariant x == 0 ==> y == 0;\nloop invariant x == 0 ==> i >= 0;\nloop invariant x == 0 ==> j >= 0;\nloop invariant x == 0 ==> i == j;\nloop invariant x == 0 ==> y == 0;\nloop invariant x == 0 ==> i >= 0;\nloop invariant x == 0 ==> j >= 0;\nloop invariant x == 0 ==> i == j;\nloop invariant x == 0 ==> y == 0;\nloop invariant x == 0 ==> i >= 0;\nloop invariant x == 0 ==> j >= 0;\nloop invariant x == 0 ==> i == j;\nloop invariant x == 0 ==> y == 0;\nloop invariant x == 0 ==> i >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= i;\nloop invariant 0 <= y <= j;\nloop invariant y == (j - x);\n*/\n```",
            "```\n/*@\nloop invariant ( i >= 0 && j >= 0 );\nloop invariant ( x >= 0 && y >= 0 );\nloop invariant ( i == x + j && j == y + j );\nloop invariant ( i <= x && j <= y );\nloop invariant ( i <= x + y && j <= x + y );\nloop invariant ( i <= x + y && j <= x + y );\nloop invariant ( i <= x + y && j <= x + y );\nloop invariant ( i <= x + y && j <= x + y );\nloop invariant ( i <= x + y && j <= x + y );\nloop invariant ( i <= x + y && j <= x + y );\nloop invariant ( i <= x + y && j <= x + y );\nloop invariant ( i <= x + y && j <= x + y );\nloop invariant ( i <= x + y && j <= x + y );\nloop invariant ( i <= x + y && j <= x + y );\nloop invariant ( i <= x + y && j <= x + y );\nloop invariant ( i <= x + y && j <= x + y );\nloop invariant ( i <= x + y && j <= x + y );\nloop invariant ( i <= x + y && j <= x + y );\nloop invariant ( i <= x + y && j <= x + y );\nloop invariant ( i <= x + y && j <= x + y );\nloop invariant ( i <= x + y && j <= x + y );\nloop invariant ( i <= x + y && j <= x + y );\nloop invariant ( i <= x + y && j <= x + y );\nloop invariant ( i <= x + y && j <= x + y );\nloop invariant ( i <= x + y && j <= x + y );\nloop invariant ( i <= x + y && j <= x + y );\nloop invariant ( i <= x + y && j <= x + y );\nloop invariant ( i <= x + y && j <= x + y );\nloop invariant ( i <= x + y && j <= x + y );\nloop invariant ( i <= x + y && j <= x + y );\nloop invariant ( i <= x + y && j <= x + y );\nloop invariant ( i <= x + y && j <= x + y );\nloop invariant ( i <= x + y && j <= x + y );\nloop invariant ( i <= x + y && j <= x + y );\nloop invariant ( i <= x + y && j <= x + y );\nloop invariant ( i <= x + y && j <= x + y );\nloop invariant ( i <= x + y && j <= x + y );\nloop invariant ( i <= x + y && j <= x + y );\nloop invariant ( i <= x + y && j <= x + y );\nloop invariant ( i <= x + y && j <= x + y );\nloop invariant ( i <= x + y && j <= x + y );\nloop invariant ( i <= x + y && j <= x + y );\nloop invariant ( i <= x + y && j <= x + y );\nloop invariant ( i <= x + y && j <= x + y );\nloop invariant ( i <= x + y && j <= x + y );\nloop invariant ( i <= x + y && j <= x + y );\nloop invariant ( i <= x + y && j <= x + y );\nloop invariant ( i <= x + y && j <= x + y );\nloop invariant ( i <= x + y && j <= x + y );\nloop invariant ( i <= x + y && j <= x + y );\nloop invariant ( i <= x + y && j <= x + y );\nloop invariant ( i <= x + y && j <= x + y );\nloop invariant ( i <= x + y && j <= x + y );\nloop invariant ( i <= x + y && j <= x + y );\nloop invariant ( i <= x + y && j <= x + y );\nloop invariant ( i <= x + y && j <= x + y );\nloop invariant ( i <= x + y && j <= x + y );\nloop invariant ( i <= x + y && j <= x + y );\nloop invariant ( i <= x + y && j <= x + y );\nloop invariant ( i <= x + y && j <= x + y );\nloop invariant ( i <= x + y && j <= x + y );\nloop invariant ( i <= x + y && j <= x + y );\nloop invariant ( i <= x + y && j <= x + y );\nloop invariant ( i <= x + y && j <= x + y );\nloop invariant ( i <= x + y && j <= x + y );\nloop invariant ( i <= x + y && j <= x + y );\nloop invariant ( i <= x + y && j <= x + y );\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= i;\nloop invariant 0 <= y <= j;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant i >= x;\nloop invariant j >= y;\nloop invariant x <= y || x == y;\nloop invariant y <= x || x == y;\nloop invariant x == 0 ==> y == 0;\nloop invariant x == 0 ==> i == j;\nloop invariant y == 0 ==> i == j;\nloop invariant x == 0 ==> x == y;\nloop invariant y == 0 ==> x == y;\nloop invariant x == 0 ==> i == j && y == 0;\nloop invariant y == 0 ==> i == j && x == 0;\nloop invariant x == 0 ==> i == j && y == 0 && x == y;\nloop invariant y == 0 ==> i == j && x == 0 && x == y;\nloop invariant x == 0 ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y;\nloop invariant y == 0 ==> i == j && x == 0 && x == y ==> i == j && y == 0 && x == y;\nloop invariant x == 0 ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y;\nloop invariant y == 0 ==> i == j && x == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y;\nloop invariant x == 0 ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y;\nloop invariant y == 0 ==> i == j && x == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y;\nloop invariant x == 0 ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y;\nloop invariant y == 0 ==> i == j && x == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y;\nloop invariant x == 0 ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y;\nloop invariant y == 0 ==> i == j && x == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 2147483647;\nloop invariant 0 <= j <= 2147483647;\nloop invariant 0 <= y <= j;\nloop invariant x == y;\nloop invariant (x == 0 ==> y == j);\nloop invariant (x == 0 ==> i == j);\nloop invariant (x == 0 ==> y == 0);\nloop invariant (x == 0 ==> i == j && y == j && i == j && x == y && y == 0);\nloop invariant (x == 0 ==> i == j && y == j && i == j && x == y && y == 0 && i == j && y == j && i == j && x == y && y == 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 100000;\nloop invariant 0 <= j <= 100000;\nloop invariant x >= (i - j) && y >= j;\nloop invariant x >= 0 && y >= 0;\nloop invariant x == i - j;\nloop invariant y == j;\nloop invariant x >= y;\nloop invariant x == y;\nloop invariant x == 0;\nloop invariant x == 0 && y == 0;\nloop invariant x == 0 && y == 0 && i == j;\nloop invariant x == 0 && y == 0 && i == j && y == 0;\nloop invariant x == 0 && y == 0 && i == j && y == 0 && x == 0;\nloop invariant x == 0 && y == 0 && i == j && y == 0 && x == 0 && x == y;\nloop invariant x == 0 && y == 0 && i == j && y == 0 && x == 0 && x == y && x == 0;\nloop invariant x == 0 && y == 0 && i == j && y == 0 && x == 0 && x == y && x == 0 && y == 0;\nloop invariant x == 0 && y == 0 && i == j && y == 0 && x == 0 && x == y && x == 0 && y == 0 && x == 0;\nloop invariant x == 0 && y == 0 && i == j && y == 0 && x == 0 && x == y && x == 0 && y == 0 && x == 0 && x == 0;\nloop invariant x == 0 && y == 0 && i == j && y == 0 && x == 0 && x == y && x == 0 && y == 0 && x == 0 && x == 0 && x == 0;\nloop invariant x == 0 && y == 0 && i == j && y == 0 && x == 0 && x == y && x == 0 && y == 0 && x == 0 && x == 0 && x == 0 && x == 0;\nloop invariant x == 0 && y == 0 && i == j && y == 0 && x == 0 && x == y && x == 0 && y == 0 && x == 0 && x == 0 && x == 0 && x == 0 && x == 0;\nloop invariant x == 0 && y == 0 && i == j && y == 0 && x == 0 && x == y && x == 0 && y == 0 && x == 0 && x == 0 && x == 0 && x == 0 && x == 0 && x == 0;\nloop invariant x == 0 && y == 0 && i == j && y == 0 && x == 0 && x == y && x == 0 && y == 0 && x == 0 && x == 0 && x == 0 && x == 0 && x == 0 && x == 0 && x == 0;\nloop invariant x == 0 && y == 0 && i == j && y == 0 && x == 0 && x == y && x == 0 && y == 0 && x == 0 && x == 0 && x == 0 && x == 0 && x == 0 && x == 0 && x == 0 && x == 0;\nloop invariant x == 0 && y == 0 && i == j && y == 0 && x == 0 && x == y && x == 0 && y == 0 && x == 0 && x == 0 && x == 0 && x == 0 && x == 0 && x == 0 && x == 0 && x == 0 && x == 0;\nloop invariant x == 0 && y == 0 && i == j && y == 0 && x == 0 && x == y && x == 0 && y == 0 && x == 0 && x == 0 && x == 0 && x == 0 && x == 0 && x == 0 && x == 0 && x == 0 && x == 0 && x == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= i;\nloop invariant 0 <= y <= j;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x + y >= i + j;\nloop invariant x + y <= i + j;\nloop invariant x == (i - y);\nloop invariant y == (j - x);\nloop invariant x == 0 ==> y == j;\nloop invariant y == 0 ==> x == i;\nloop invariant x == 0 ==> i == j;\nloop invariant y == 0 ==> i == j;\nloop invariant x == 0 ==> y == j ==> i == j;\nloop invariant y == 0 ==> x == i ==> i == j;\nloop invariant x == 0 ==> y == j ==> x == 0;\nloop invariant y == 0 ==> x == i ==> x == 0;\nloop invariant x == 0 ==> y == j ==> y == 0;\nloop invariant y == 0 ==> x == i ==> y == 0;\nloop invariant x == 0 ==> y == j ==> x == i;\nloop invariant y == 0 ==> x == i ==> y == j;\nloop invariant x == 0 ==> y == j ==> x + y == i + j;\nloop invariant y == 0 ==> x == i ==> x + y == i + j;\nloop invariant x == 0 ==> y == j ==> x + y == i + j ==> x == 0;\nloop invariant y == 0 ==> x == i ==> x + y == i + j ==> x == 0;\nloop invariant x == 0 ==> y == j ==> x + y == i + j ==> y == 0;\nloop invariant y == 0 ==> x == i ==> x + y == i + j ==> y == 0;\nloop invariant x == 0 ==> y == j ==> x + y == i + j ==> x == i;\nloop invariant y == 0 ==> x == i ==> x + y == i + j ==> y == j;\nloop invariant x == 0 ==> y == j ==> x + y == i + j ==> x + y == i + j;\nloop invariant y == 0 ==> x == i ==> x + y == i + j ==> x + y == i + j;\nloop invariant x == 0 ==> y == j ==> x + y == i + j ==> x == 0 ==> y == j;\nloop invariant y == 0 ==> x == i ==> x + y == i + j ==> x == 0 ==> y == j;\nloop invariant x == 0 ==> y == j ==> x + y == i + j ==> x == 0 ==> y == 0;\nloop invariant y == 0 ==> x == i ==> x + y == i + j ==> x == 0 ==> y == 0;\nloop invariant x == 0 ==> y == j ==> x + y == i + j ==> x == 0 ==> x == i;\nloop invariant y == 0 ==> x == i ==> x + y == i + j ==> x == 0 ==> y == j;\nloop invariant x == 0 ==> y == j ==> x + y == i + j ==> x == 0 ==> x + y == i + j;\nloop invariant y == 0 ==> x == i ==> x + y == i + j ==> x == 0 ==> x + y == i + j;\nloop invariant x == 0 ==> y == j ==> x + y == i + j ==> x == 0 ==> x == i ==> y == j;\nloop invariant y == 0 ==> x == i ==> x + y == i + j ==> x == 0 ==> x == i ==> y == j;\nloop invariant x == 0 ==> y == j ==> x + y == i + j ==> x == 0 ==> x == i ==> x + y == i + j;\nloop invariant y == 0 ==> x == i ==> x + y == i + j ==> x == 0 ==> x == i ==> x + y == i + j;\nloop invariant x == 0 ==> y == j ==> x + y == i + j ==> x == 0 ==> x == i ==> x + y == i + j ==> x == 0;\nloop invariant y == 0 ==> x == i ==> x + y == i + j ==> x == 0 ==> x == i ==> x + y == i + j ==> x == 0;\nloop invariant x == 0 ==> y == j ==> x + y == i + j ==> x == 0 ==> x == i ==> x + y == i + j ==> y == 0;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x >= i;\nloop invariant y >= j;\nloop invariant x >= y;\nloop invariant i - x == j - y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n    if (!(i >= 0 && j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    /*@\nloop invariant i1: i >= 0;\nloop invariant i2: j >= 0;\nloop invariant i3: x >= 0;\n\n\n\n\nloop invariant i8: i - x == j - y;\n*/\nwhile(x != 0) {\n        x--;\n        y--;\n    }\n\n    if (i == j) {\n        {;\n//@ assert(y == 0);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= i;\nloop invariant 0 <= y <= j;\nloop invariant i - x == j - y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n    if (!(i >= 0 && j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    /*@\nloop invariant i1: 0 <= x <= i;\n\nloop invariant i3: i - x == j - y;\n*/\nwhile(x != 0) {\n        x--;\n        y--;\n    }\n\n    if (i == j) {\n        {;\n//@ assert(y == 0);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 8,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= i;\nloop invariant 0 <= y <= j;\nloop invariant x + y == i + j;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x == i - y;\nloop invariant y == j - x;\nloop invariant x == 0 == (y == j);\nloop invariant y == 0 == (x == i);\nloop invariant (x != 0 ==> (x <= i && y <= j));\nloop invariant (x == 0 ==> (y == j));\nloop invariant (y == 0 ==> (x == i));\nloop invariant (x != 0 ==> (x >= 0 && y >= 0));\nloop invariant (x == 0 ==> (y >= 0 && x >= 0));\nloop invariant (y != 0 ==> (y >= 0 && x >= 0));\nloop invariant (y == 0 ==> (x >= 0 && y >= 0));\nloop invariant (x != 0 ==> (x == i - y && y == j - x));\nloop invariant (x == 0 ==> (y == j && x == i));\nloop invariant (y != 0 ==> (y == j - x && x == i - y));\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n    if (!(i >= 0 && j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    /*@\nloop invariant i1: 0 <= x <= i;\n\n\nloop invariant i4: x <= i;\nloop invariant i5: y <= j;\nloop invariant i6: x >= 0;\n\n\n\n\n\nloop invariant i12: (x != 0 ==> (x <= i && y <= j));\n\n\n\n\n\nloop invariant i18: (y == 0 ==> (x >= 0 && y >= 0));\n\n\n\n*/\nwhile(x != 0) {\n        x--;\n        y--;\n    }\n\n    if (i == j) {\n        {;\n//@ assert(y == 0);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= i;\nloop invariant 0 <= y <= j;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant x + y == i + j;\nloop invariant x == i - j;\nloop invariant y == j - i;\nloop invariant x == 0 ==> j == i;\nloop invariant y == 0 ==> i == j;\nloop invariant x == i ==> y == 0;\nloop invariant y == j ==> x == 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x + y == i + j;\nloop invariant x == i - j;\nloop invariant y == j - i;\nloop invariant x == 0 ==> j == i;\nloop invariant y == 0 ==> i == j;\nloop invariant x == i ==> y == 0;\nloop invariant y == j ==> x == 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x + y == i + j;\nloop invariant x == i - j;\nloop invariant y == j - i;\nloop invariant x == 0 ==> j == i;\nloop invariant y == 0 ==> i == j;\nloop invariant x == i ==> y == 0;\nloop invariant y == j ==> x == 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x + y == i + j;\nloop invariant x == i - j;\nloop invariant y == j - i;\nloop invariant x == 0 ==> j == i;\nloop invariant y == 0 ==> i == j;\nloop invariant x == i ==> y == 0;\nloop invariant y == j ==> x == 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x + y == i + j;\nloop invariant x == i - j;\nloop invariant y == j - i;\nloop invariant x == 0 ==> j == i;\nloop invariant y == 0 ==> i == j;\nloop invariant x == i ==> y == 0;\nloop invariant y == j ==> x == 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x + y == i + j;\nloop invariant x == i - j;\nloop invariant y == j - i;\nloop invariant x == 0 ==> j == i;\nloop invariant y == 0 ==> i == j;\nloop invariant x == i ==> y == 0;\nloop invariant y == j ==> x == 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x + y == i + j;\nloop invariant x == i - j;\nloop invariant y == j - i;\nloop invariant x == 0 ==> j == i;\nloop invariant y == 0 ==> i == j;\nloop invariant x == i ==> y == 0;\nloop invariant y == j ==> x == 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x + y == i + j;\nloop invariant x == i - j;\nloop invariant y == j - i;\nloop invariant x == 0 ==> j == i;\nloop invariant y == 0 ==> i == j;\nloop invariant x == i ==> y == 0;\nloop invariant y == j ==> x == 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x + y == i + j;\nloop invariant x == i - j;\nloop invariant y == j - i;\nloop invariant x == 0 ==> j == i;\nloop invariant y == 0 ==> i == j;\nloop invariant x == i ==> y == 0;\nloop invariant y == j ==> x == 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x + y == i + j;\nloop invariant x == i - j;\nloop invariant y == j - i;\nloop invariant x == 0 ==> j == i;\nloop invariant y == 0 ==> i == j;\nloop invariant x == i ==> y == 0;\nloop invariant y == j ==> x == 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x >= 0;\nloop invariant y >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n    if (!(i >= 0 && j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    /*@\nloop invariant i1: 0 <= x <= i;\n\nloop invariant i3: i >= 0;\nloop invariant i4: j >= 0;\n\n\n\n\n\n\n\nloop invariant i12: x <= i;\nloop invariant i13: y <= j;\nloop invariant i14: x >= 0;\n\n*/\nwhile(x != 0) {\n        x--;\n        y--;\n    }\n\n    if (i == j) {\n        {;\n//@ assert(y == 0);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= i;\nloop invariant 0 <= y <= j;\nloop invariant x + y >= i - j;\nloop invariant x + y <= i + j;\nloop invariant x = i - y;\nloop invariant y = j - x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n    if (!(i >= 0 && j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    /*@\nloop invariant i1: 0 <= x <= i;\n\n\nloop invariant i4: x + y <= i + j;\n\n\n*/\nwhile(x != 0) {\n        x--;\n        y--;\n    }\n\n    if (i == j) {\n        {;\n//@ assert(y == 0);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 9,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= i;\nloop invariant 0 <= y <= j;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x == i - j;\nloop invariant y == j - j;\nloop invariant i >= j;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x + y == i + j - j;\nloop invariant x + y == i - j;\nloop invariant x + y == j;\nloop invariant x + y == 0;\nloop invariant x + y == i;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i == j;\nloop invariant x == 0;\nloop invariant y == 0;\nloop invariant x == i;\nloop invariant y == j;\nloop invariant i == j;\nloop invariant x == i - j;\nloop invariant y == j - j;\nloop invariant x == i;\nloop invariant y == j - j;\nloop invariant i >= j;\nloop invariant x + y == i;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i == j;\nloop invariant x == 0;\nloop invariant y == 0;\nloop invariant x == i;\nloop invariant y == j;\nloop invariant i == j;\nloop invariant x == i - j;\nloop invariant y == j - j;\nloop invariant x == i;\nloop invariant y == j - j;\nloop invariant i >= j;\nloop invariant x + y == i;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i == j;\nloop invariant x == 0;\nloop invariant y == 0;\nloop invariant x == i;\nloop invariant y == j;\nloop invariant i == j;\nloop invariant x == i - j;\nloop invariant y == j - j;\nloop invariant x == i;\nloop invariant y == j - j;\nloop invariant i >= j;\nloop invariant x + y == i;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i == j;\nloop invariant x == 0;\nloop invariant y == 0;\nloop invariant x == i;\nloop invariant y == j;\nloop invariant i == j;\nloop invariant x == i - j;\nloop invariant y == j - j;\nloop invariant x == i;\nloop invariant y == j - j;\nloop invariant i >= j;\nloop invariant x + y == i;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i == j;\nloop invariant x == 0;\nloop invariant y == 0;\nloop invariant x == i;\nloop invariant y == j;\nloop invariant i == j;\nloop invariant x == i - j;\nloop invariant y == j - j;\nloop invariant x == i;\nloop invariant y == j - j;\nloop invariant i >= j;\nloop invariant x + y == i;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i == j;\nloop invariant x == 0;\nloop invariant y == 0;\nloop invariant x == i;\nloop invariant y == j;\nloop invariant i == j;\nloop invariant x == i - j;\nloop invariant y == j - j;\nloop invariant x == i;\nloop invariant y == j - j;\nloop invariant i >= j;\nloop invariant x + y == i;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i == j;\nloop invariant x == 0;\nloop invariant y == 0;\nloop invariant x == i;\nloop invariant y == j;\nloop invariant i == j;\nloop invariant x == i - j;\nloop invariant y == j - j;\nloop invariant x == i;\nloop invariant y == j - j;\nloop invariant i >= j;\nloop invariant x + y == i;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i == j;\nloop invariant x == 0;\nloop invariant y == 0;\nloop invariant x == i;\nloop invariant y == j;\nloop invariant i == j;\nloop invariant x == i - j;\nloop invariant y == j - j;\nloop invariant x == i;\nloop invariant y == j - j;\nloop invariant i >= j;\nloop invariant x + y == i;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i == j;\nloop invariant x == 0;\nloop invariant y == 0;\nloop invariant x == i;\nloop invariant y == j;\nloop invariant i == j;\nloop invariant x == i - j;\nloop invariant y == j - j;\nloop invariant x == i;\nloop invariant y == j - j;\nloop invariant i >= j;\nloop invariant x + y == i;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i == j;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n    if (!(i >= 0 && j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    /*@\nloop invariant i1: 0 <= x <= i;\n\nloop invariant i3: x >= 0;\n\n\n\n\nloop invariant i8: x <= i;\nloop invariant i9: y <= j;\n\n\n\n\n\nloop invariant i15: i >= 0;\nloop invariant i16: j >= 0;\n\n\n\n\n\n*/\nwhile(x != 0) {\n        x--;\n        y--;\n    }\n\n    if (i == j) {\n        {;\n//@ assert(y == 0);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x == 0 ==> y == 0;\nloop invariant i == j ==> x == y;\nloop invariant i >= j ==> x == y;\nloop invariant i < j ==> x == 0;\nloop invariant y >= i ==> x == 0;\nloop invariant y < i ==> x == y;\nloop invariant i == j ==> x == y;\nloop invariant i >= j ==> x == y;\nloop invariant i < j ==> x == 0;\nloop invariant y >= i ==> x == 0;\nloop invariant y < i ==> x == y;\nloop invariant i == j ==> x == y;\nloop invariant i >= j ==> x == y;\nloop invariant i < j ==> x == 0;\nloop invariant y >= i ==> x == 0;\nloop invariant y < i ==> x == y;\nloop invariant i == j ==> x == y;\nloop invariant i >= j ==> x == y;\nloop invariant i < j ==> x == 0;\nloop invariant y >= i ==> x == 0;\nloop invariant y < i ==> x == y;\nloop invariant i == j ==> x == y;\nloop invariant i >= j ==> x == y;\nloop invariant i < j ==> x == 0;\nloop invariant y >= i ==> x == 0;\nloop invariant y < i ==> x == y;\nloop invariant i == j ==> x == y;\nloop invariant i >= j ==> x == y;\nloop invariant i < j ==> x == 0;\nloop invariant y >= i ==> x == 0;\nloop invariant y < i ==> x == y;\nloop invariant i == j ==> x == y;\nloop invariant i >= j ==> x == y;\nloop invariant i < j ==> x == 0;\nloop invariant y >= i ==> x == 0;\nloop invariant y < i ==> x == y;\nloop invariant i == j ==> x == y;\nloop invariant i >= j ==> x == y;\nloop invariant i < j ==> x == 0;\nloop invariant y >= i ==> x == 0;\nloop invariant y < i ==> x == y;\nloop invariant i == j ==> x == y;\nloop invariant i >= j ==> x == y;\nloop invariant i < j ==> x == 0;\nloop invariant y >= i ==> x == 0;\nloop invariant y < i ==> x == y;\nloop invariant i == j ==> x == y;\nloop invariant i >= j ==> x == y;\nloop invariant i < j ==> x == 0;\nloop invariant y >= i ==> x == 0;\nloop invariant y < i ==> x == y;\nloop invariant i == j ==> x == y;\nloop invariant i >= j ==> x == y;\nloop invariant i < j ==> x == 0;\nloop invariant y >= i ==> x == 0;\nloop invariant y < i ==> x == y;\nloop invariant i == j ==> x == y;\nloop invariant i >= j ==> x == y;\nloop invariant i < j ==> x == 0;\nloop invariant y >= i ==> x == 0;\nloop invariant y < i ==> x == y;\nloop invariant i == j ==> x == y;\nloop invariant i >= j ==> x == y;\nloop invariant i < j ==> x == 0;\nloop invariant y >= i ==> x == 0;\nloop invariant y < i ==> x == y;\nloop invariant i == j ==> x == y;\nloop invariant i >= j ==> x == y;\nloop invariant i < j ==> x == 0;\nloop invariant y >= i ==> x == 0;\nloop invariant y < i ==> x == y;\nloop invariant i == j ==> x == y;\nloop invariant i >= j ==> x == y;\nloop invariant i < j ==> x == 0;\nloop invariant y >= i ==> x == 0;\nloop invariant y < i ==> x == y;\nloop invariant i == j ==> x == y;\nloop invariant i >= j ==> x == y;\nloop invariant i < j ==> x == 0;\nloop invariant y >= i ==> x == 0;\nloop invariant y < i ==> x == y;\nloop invariant i == j ==> x == y;\nloop invariant i >= j ==> x == y;\nloop invariant i < j ==> x == 0;\nloop invariant y >= i ==> x == 0;\nloop invariant y < i ==> x == y;\nloop invariant i == j ==> x == y;\nloop invariant i >= j ==> x == y;\nloop invariant i < j ==> x == 0;\nloop invariant y >= i ==> x == 0;\nloop invariant y < i ==> x == y;\nloop invariant i == j ==> x == y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n    if (!(i >= 0 && j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    /*@\nloop invariant i1: i >= 0;\nloop invariant i2: j >= 0;\nloop invariant i3: x >= 0;\n\nloop invariant i5: x <= i;\nloop invariant i6: y <= j;\n\nloop invariant i8: i == j ==> x == y;\n\n\n\n\n*/\nwhile(x != 0) {\n        x--;\n        y--;\n    }\n\n    if (i == j) {\n        {;\n//@ assert(y == 0);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant i == x + j;\nloop invariant j == y + i;\nloop invariant i != 0 ==> x == i;\nloop invariant i != 0 ==> y == j;\nloop invariant i == j ==> y == 0;\nloop invariant i == j ==> x == 2 * j;\nloop invariant i == j ==> y == j * j;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n    if (!(i >= 0 && j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    /*@\nloop invariant i1: i >= 0;\nloop invariant i2: j >= 0;\nloop invariant i3: x >= 0;\n\n\n\n\n\n\n\n\n*/\nwhile(x != 0) {\n        x--;\n        y--;\n    }\n\n    if (i == j) {\n        {;\n//@ assert(y == 0);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= j;\nloop invariant x == i;\nloop invariant y == j;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y == i - x;\nloop invariant y <= j;\nloop invariant i >= j;\nloop invariant x >= y;\nloop invariant x == 0 ==> y == j;\nloop invariant x == 0 ==> i == j;\nloop invariant x == 0 ==> y == 0;\nloop invariant x == 0 ==> i >= 0;\nloop invariant x == 0 ==> j >= 0;\nloop invariant x == 0 ==> i == j;\nloop invariant x == 0 ==> y == 0;\nloop invariant x == 0 ==> i >= 0;\nloop invariant x == 0 ==> j >= 0;\nloop invariant x == 0 ==> i == j;\nloop invariant x == 0 ==> y == 0;\nloop invariant x == 0 ==> i >= 0;\nloop invariant x == 0 ==> j >= 0;\nloop invariant x == 0 ==> i == j;\nloop invariant x == 0 ==> y == 0;\nloop invariant x == 0 ==> i >= 0;\nloop invariant x == 0 ==> j >= 0;\nloop invariant x == 0 ==> i == j;\nloop invariant x == 0 ==> y == 0;\nloop invariant x == 0 ==> i >= 0;\nloop invariant x == 0 ==> j >= 0;\nloop invariant x == 0 ==> i == j;\nloop invariant x == 0 ==> y == 0;\nloop invariant x == 0 ==> i >= 0;\nloop invariant x == 0 ==> j >= 0;\nloop invariant x == 0 ==> i == j;\nloop invariant x == 0 ==> y == 0;\nloop invariant x == 0 ==> i >= 0;\nloop invariant x == 0 ==> j >= 0;\nloop invariant x == 0 ==> i == j;\nloop invariant x == 0 ==> y == 0;\nloop invariant x == 0 ==> i >= 0;\nloop invariant x == 0 ==> j >= 0;\nloop invariant x == 0 ==> i == j;\nloop invariant x == 0 ==> y == 0;\nloop invariant x == 0 ==> i >= 0;\nloop invariant x == 0 ==> j >= 0;\nloop invariant x == 0 ==> i == j;\nloop invariant x == 0 ==> y == 0;\nloop invariant x == 0 ==> i >= 0;\nloop invariant x == 0 ==> j >= 0;\nloop invariant x == 0 ==> i == j;\nloop invariant x == 0 ==> y == 0;\nloop invariant x == 0 ==> i >= 0;\nloop invariant x == 0 ==> j >= 0;\nloop invariant x == 0 ==> i == j;\nloop invariant x == 0 ==> y == 0;\nloop invariant x == 0 ==> i >= 0;\nloop invariant x == 0 ==> j >= 0;\nloop invariant x == 0 ==> i == j;\nloop invariant x == 0 ==> y == 0;\nloop invariant x == 0 ==> i >= 0;\nloop invariant x == 0 ==> j >= 0;\nloop invariant x == 0 ==> i == j;\nloop invariant x == 0 ==> y == 0;\nloop invariant x == 0 ==> i >= 0;\nloop invariant x == 0 ==> j >= 0;\nloop invariant x == 0 ==> i == j;\nloop invariant x == 0 ==> y == 0;\nloop invariant x == 0 ==> i >= 0;\nloop invariant x == 0 ==> j >= 0;\nloop invariant x == 0 ==> i == j;\nloop invariant x == 0 ==> y == 0;\nloop invariant x == 0 ==> i >= 0;\nloop invariant x == 0 ==> j >= 0;\nloop invariant x == 0 ==> i == j;\nloop invariant x == 0 ==> y == 0;\nloop invariant x == 0 ==> i >= 0;\nloop invariant x == 0 ==> j >= 0;\nloop invariant x == 0 ==> i == j;\nloop invariant x == 0 ==> y == 0;\nloop invariant x == 0 ==> i >= 0;\nloop invariant x == 0 ==> j >= 0;\nloop invariant x == 0 ==> i == j;\nloop invariant x == 0 ==> y == 0;\nloop invariant x == 0 ==> i >= 0;\nloop invariant x == 0 ==> j >= 0;\nloop invariant x == 0 ==> i == j;\nloop invariant x == 0 ==> y == 0;\nloop invariant x == 0 ==> i >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n    if (!(i >= 0 && j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    /*@\n\n\n\nloop invariant i4: x >= 0;\n\n\nloop invariant i7: y <= j;\n\n\n\n\n\n\n\n*/\nwhile(x != 0) {\n        x--;\n        y--;\n    }\n\n    if (i == j) {\n        {;\n//@ assert(y == 0);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= i;\nloop invariant 0 <= y <= j;\nloop invariant y == (j - x);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n    if (!(i >= 0 && j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    /*@\n\n\n\n*/\nwhile(x != 0) {\n        x--;\n        y--;\n    }\n\n    if (i == j) {\n        {;\n//@ assert(y == 0);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant ( i >= 0 && j >= 0 );\nloop invariant ( x >= 0 && y >= 0 );\nloop invariant ( i == x + j && j == y + j );\nloop invariant ( i <= x && j <= y );\nloop invariant ( i <= x + y && j <= x + y );\nloop invariant ( i <= x + y && j <= x + y );\nloop invariant ( i <= x + y && j <= x + y );\nloop invariant ( i <= x + y && j <= x + y );\nloop invariant ( i <= x + y && j <= x + y );\nloop invariant ( i <= x + y && j <= x + y );\nloop invariant ( i <= x + y && j <= x + y );\nloop invariant ( i <= x + y && j <= x + y );\nloop invariant ( i <= x + y && j <= x + y );\nloop invariant ( i <= x + y && j <= x + y );\nloop invariant ( i <= x + y && j <= x + y );\nloop invariant ( i <= x + y && j <= x + y );\nloop invariant ( i <= x + y && j <= x + y );\nloop invariant ( i <= x + y && j <= x + y );\nloop invariant ( i <= x + y && j <= x + y );\nloop invariant ( i <= x + y && j <= x + y );\nloop invariant ( i <= x + y && j <= x + y );\nloop invariant ( i <= x + y && j <= x + y );\nloop invariant ( i <= x + y && j <= x + y );\nloop invariant ( i <= x + y && j <= x + y );\nloop invariant ( i <= x + y && j <= x + y );\nloop invariant ( i <= x + y && j <= x + y );\nloop invariant ( i <= x + y && j <= x + y );\nloop invariant ( i <= x + y && j <= x + y );\nloop invariant ( i <= x + y && j <= x + y );\nloop invariant ( i <= x + y && j <= x + y );\nloop invariant ( i <= x + y && j <= x + y );\nloop invariant ( i <= x + y && j <= x + y );\nloop invariant ( i <= x + y && j <= x + y );\nloop invariant ( i <= x + y && j <= x + y );\nloop invariant ( i <= x + y && j <= x + y );\nloop invariant ( i <= x + y && j <= x + y );\nloop invariant ( i <= x + y && j <= x + y );\nloop invariant ( i <= x + y && j <= x + y );\nloop invariant ( i <= x + y && j <= x + y );\nloop invariant ( i <= x + y && j <= x + y );\nloop invariant ( i <= x + y && j <= x + y );\nloop invariant ( i <= x + y && j <= x + y );\nloop invariant ( i <= x + y && j <= x + y );\nloop invariant ( i <= x + y && j <= x + y );\nloop invariant ( i <= x + y && j <= x + y );\nloop invariant ( i <= x + y && j <= x + y );\nloop invariant ( i <= x + y && j <= x + y );\nloop invariant ( i <= x + y && j <= x + y );\nloop invariant ( i <= x + y && j <= x + y );\nloop invariant ( i <= x + y && j <= x + y );\nloop invariant ( i <= x + y && j <= x + y );\nloop invariant ( i <= x + y && j <= x + y );\nloop invariant ( i <= x + y && j <= x + y );\nloop invariant ( i <= x + y && j <= x + y );\nloop invariant ( i <= x + y && j <= x + y );\nloop invariant ( i <= x + y && j <= x + y );\nloop invariant ( i <= x + y && j <= x + y );\nloop invariant ( i <= x + y && j <= x + y );\nloop invariant ( i <= x + y && j <= x + y );\nloop invariant ( i <= x + y && j <= x + y );\nloop invariant ( i <= x + y && j <= x + y );\nloop invariant ( i <= x + y && j <= x + y );\nloop invariant ( i <= x + y && j <= x + y );\nloop invariant ( i <= x + y && j <= x + y );\nloop invariant ( i <= x + y && j <= x + y );\nloop invariant ( i <= x + y && j <= x + y );\nloop invariant ( i <= x + y && j <= x + y );\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n    if (!(i >= 0 && j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    /*@\nloop invariant i1: ( i >= 0 && j >= 0 );\n\n\n\n\n*/\nwhile(x != 0) {\n        x--;\n        y--;\n    }\n\n    if (i == j) {\n        {;\n//@ assert(y == 0);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= i;\nloop invariant 0 <= y <= j;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant i >= x;\nloop invariant j >= y;\nloop invariant x <= y || x == y;\nloop invariant y <= x || x == y;\nloop invariant x == 0 ==> y == 0;\nloop invariant x == 0 ==> i == j;\nloop invariant y == 0 ==> i == j;\nloop invariant x == 0 ==> x == y;\nloop invariant y == 0 ==> x == y;\nloop invariant x == 0 ==> i == j && y == 0;\nloop invariant y == 0 ==> i == j && x == 0;\nloop invariant x == 0 ==> i == j && y == 0 && x == y;\nloop invariant y == 0 ==> i == j && x == 0 && x == y;\nloop invariant x == 0 ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y;\nloop invariant y == 0 ==> i == j && x == 0 && x == y ==> i == j && y == 0 && x == y;\nloop invariant x == 0 ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y;\nloop invariant y == 0 ==> i == j && x == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y;\nloop invariant x == 0 ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y;\nloop invariant y == 0 ==> i == j && x == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y;\nloop invariant x == 0 ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y;\nloop invariant y == 0 ==> i == j && x == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y;\nloop invariant x == 0 ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y;\nloop invariant y == 0 ==> i == j && x == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n    if (!(i >= 0 && j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    /*@\nloop invariant i1: 0 <= x <= i;\n\nloop invariant i3: x >= 0;\n\nloop invariant i5: i >= x;\nloop invariant i6: j >= y;\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i18: x == 0 ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y;\nloop invariant i19: y == 0 ==> i == j && x == 0 && x == y ==> i == j && y == 0 && x == y;\nloop invariant i20: x == 0 ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y;\nloop invariant i21: y == 0 ==> i == j && x == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y;\nloop invariant i22: x == 0 ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y;\nloop invariant i23: y == 0 ==> i == j && x == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y;\nloop invariant i24: x == 0 ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y;\nloop invariant i25: y == 0 ==> i == j && x == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y;\nloop invariant i26: x == 0 ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y;\nloop invariant i27: y == 0 ==> i == j && x == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y;\n*/\nwhile(x != 0) {\n        x--;\n        y--;\n    }\n\n    if (i == j) {\n        {;\n//@ assert(y == 0);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 2147483647;\nloop invariant 0 <= j <= 2147483647;\nloop invariant 0 <= y <= j;\nloop invariant x == y;\nloop invariant (x == 0 ==> y == j);\nloop invariant (x == 0 ==> i == j);\nloop invariant (x == 0 ==> y == 0);\nloop invariant (x == 0 ==> i == j && y == j && i == j && x == y && y == 0);\nloop invariant (x == 0 ==> i == j && y == j && i == j && x == y && y == 0 && i == j && y == j && i == j && x == y && y == 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n    if (!(i >= 0 && j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    /*@\nloop invariant i1: 0 <= i <= 2147483647;\nloop invariant i2: 0 <= j <= 2147483647;\n\n\n\n\n\n\n\n*/\nwhile(x != 0) {\n        x--;\n        y--;\n    }\n\n    if (i == j) {\n        {;\n//@ assert(y == 0);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 21,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 100000;\nloop invariant 0 <= j <= 100000;\nloop invariant x >= (i - j) && y >= j;\nloop invariant x >= 0 && y >= 0;\nloop invariant x == i - j;\nloop invariant y == j;\nloop invariant x >= y;\nloop invariant x == y;\nloop invariant x == 0;\nloop invariant x == 0 && y == 0;\nloop invariant x == 0 && y == 0 && i == j;\nloop invariant x == 0 && y == 0 && i == j && y == 0;\nloop invariant x == 0 && y == 0 && i == j && y == 0 && x == 0;\nloop invariant x == 0 && y == 0 && i == j && y == 0 && x == 0 && x == y;\nloop invariant x == 0 && y == 0 && i == j && y == 0 && x == 0 && x == y && x == 0;\nloop invariant x == 0 && y == 0 && i == j && y == 0 && x == 0 && x == y && x == 0 && y == 0;\nloop invariant x == 0 && y == 0 && i == j && y == 0 && x == 0 && x == y && x == 0 && y == 0 && x == 0;\nloop invariant x == 0 && y == 0 && i == j && y == 0 && x == 0 && x == y && x == 0 && y == 0 && x == 0 && x == 0;\nloop invariant x == 0 && y == 0 && i == j && y == 0 && x == 0 && x == y && x == 0 && y == 0 && x == 0 && x == 0 && x == 0;\nloop invariant x == 0 && y == 0 && i == j && y == 0 && x == 0 && x == y && x == 0 && y == 0 && x == 0 && x == 0 && x == 0 && x == 0;\nloop invariant x == 0 && y == 0 && i == j && y == 0 && x == 0 && x == y && x == 0 && y == 0 && x == 0 && x == 0 && x == 0 && x == 0 && x == 0;\nloop invariant x == 0 && y == 0 && i == j && y == 0 && x == 0 && x == y && x == 0 && y == 0 && x == 0 && x == 0 && x == 0 && x == 0 && x == 0 && x == 0;\nloop invariant x == 0 && y == 0 && i == j && y == 0 && x == 0 && x == y && x == 0 && y == 0 && x == 0 && x == 0 && x == 0 && x == 0 && x == 0 && x == 0 && x == 0;\nloop invariant x == 0 && y == 0 && i == j && y == 0 && x == 0 && x == y && x == 0 && y == 0 && x == 0 && x == 0 && x == 0 && x == 0 && x == 0 && x == 0 && x == 0 && x == 0;\nloop invariant x == 0 && y == 0 && i == j && y == 0 && x == 0 && x == y && x == 0 && y == 0 && x == 0 && x == 0 && x == 0 && x == 0 && x == 0 && x == 0 && x == 0 && x == 0 && x == 0;\nloop invariant x == 0 && y == 0 && i == j && y == 0 && x == 0 && x == y && x == 0 && y == 0 && x == 0 && x == 0 && x == 0 && x == 0 && x == 0 && x == 0 && x == 0 && x == 0 && x == 0 && x == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n    if (!(i >= 0 && j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile(x != 0) {\n        x--;\n        y--;\n    }\n\n    if (i == j) {\n        {;\n//@ assert(y == 0);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 8,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= i;\nloop invariant 0 <= y <= j;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x + y >= i + j;\nloop invariant x + y <= i + j;\nloop invariant x == (i - y);\nloop invariant y == (j - x);\nloop invariant x == 0 ==> y == j;\nloop invariant y == 0 ==> x == i;\nloop invariant x == 0 ==> i == j;\nloop invariant y == 0 ==> i == j;\nloop invariant x == 0 ==> y == j ==> i == j;\nloop invariant y == 0 ==> x == i ==> i == j;\nloop invariant x == 0 ==> y == j ==> x == 0;\nloop invariant y == 0 ==> x == i ==> x == 0;\nloop invariant x == 0 ==> y == j ==> y == 0;\nloop invariant y == 0 ==> x == i ==> y == 0;\nloop invariant x == 0 ==> y == j ==> x == i;\nloop invariant y == 0 ==> x == i ==> y == j;\nloop invariant x == 0 ==> y == j ==> x + y == i + j;\nloop invariant y == 0 ==> x == i ==> x + y == i + j;\nloop invariant x == 0 ==> y == j ==> x + y == i + j ==> x == 0;\nloop invariant y == 0 ==> x == i ==> x + y == i + j ==> x == 0;\nloop invariant x == 0 ==> y == j ==> x + y == i + j ==> y == 0;\nloop invariant y == 0 ==> x == i ==> x + y == i + j ==> y == 0;\nloop invariant x == 0 ==> y == j ==> x + y == i + j ==> x == i;\nloop invariant y == 0 ==> x == i ==> x + y == i + j ==> y == j;\nloop invariant x == 0 ==> y == j ==> x + y == i + j ==> x + y == i + j;\nloop invariant y == 0 ==> x == i ==> x + y == i + j ==> x + y == i + j;\nloop invariant x == 0 ==> y == j ==> x + y == i + j ==> x == 0 ==> y == j;\nloop invariant y == 0 ==> x == i ==> x + y == i + j ==> x == 0 ==> y == j;\nloop invariant x == 0 ==> y == j ==> x + y == i + j ==> x == 0 ==> y == 0;\nloop invariant y == 0 ==> x == i ==> x + y == i + j ==> x == 0 ==> y == 0;\nloop invariant x == 0 ==> y == j ==> x + y == i + j ==> x == 0 ==> x == i;\nloop invariant y == 0 ==> x == i ==> x + y == i + j ==> x == 0 ==> y == j;\nloop invariant x == 0 ==> y == j ==> x + y == i + j ==> x == 0 ==> x + y == i + j;\nloop invariant y == 0 ==> x == i ==> x + y == i + j ==> x == 0 ==> x + y == i + j;\nloop invariant x == 0 ==> y == j ==> x + y == i + j ==> x == 0 ==> x == i ==> y == j;\nloop invariant y == 0 ==> x == i ==> x + y == i + j ==> x == 0 ==> x == i ==> y == j;\nloop invariant x == 0 ==> y == j ==> x + y == i + j ==> x == 0 ==> x == i ==> x + y == i + j;\nloop invariant y == 0 ==> x == i ==> x + y == i + j ==> x == 0 ==> x == i ==> x + y == i + j;\nloop invariant x == 0 ==> y == j ==> x + y == i + j ==> x == 0 ==> x == i ==> x + y == i + j ==> x == 0;\nloop invariant y == 0 ==> x == i ==> x + y == i + j ==> x == 0 ==> x == i ==> x + y == i + j ==> x == 0;\nloop invariant x == 0 ==> y == j ==> x + y == i + j ==> x == 0 ==> x == i ==> x + y == i + j ==> y == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n    if (!(i >= 0 && j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    /*@\nloop invariant i1: 0 <= x <= i;\n\nloop invariant i3: x >= 0;\n\nloop invariant i5: x <= i;\nloop invariant i6: y <= j;\n\nloop invariant i8: x + y <= i + j;\n\n\n\n\n\n\n\n\nloop invariant i17: x == 0 ==> y == j ==> x == 0;\n\n\nloop invariant i20: y == 0 ==> x == i ==> y == 0;\nloop invariant i21: x == 0 ==> y == j ==> x == i;\nloop invariant i22: y == 0 ==> x == i ==> y == j;\nloop invariant i23: x == 0 ==> y == j ==> x + y == i + j;\nloop invariant i24: y == 0 ==> x == i ==> x + y == i + j;\nloop invariant i25: x == 0 ==> y == j ==> x + y == i + j ==> x == 0;\n\n\nloop invariant i28: y == 0 ==> x == i ==> x + y == i + j ==> y == 0;\nloop invariant i29: x == 0 ==> y == j ==> x + y == i + j ==> x == i;\nloop invariant i30: y == 0 ==> x == i ==> x + y == i + j ==> y == j;\nloop invariant i31: x == 0 ==> y == j ==> x + y == i + j ==> x + y == i + j;\nloop invariant i32: y == 0 ==> x == i ==> x + y == i + j ==> x + y == i + j;\nloop invariant i33: x == 0 ==> y == j ==> x + y == i + j ==> x == 0 ==> y == j;\nloop invariant i34: y == 0 ==> x == i ==> x + y == i + j ==> x == 0 ==> y == j;\n\nloop invariant i36: y == 0 ==> x == i ==> x + y == i + j ==> x == 0 ==> y == 0;\nloop invariant i37: x == 0 ==> y == j ==> x + y == i + j ==> x == 0 ==> x == i;\nloop invariant i38: x == 0 ==> y == j ==> x + y == i + j ==> x == 0 ==> x + y == i + j;\nloop invariant i39: y == 0 ==> x == i ==> x + y == i + j ==> x == 0 ==> x + y == i + j;\nloop invariant i40: x == 0 ==> y == j ==> x + y == i + j ==> x == 0 ==> x == i ==> y == j;\nloop invariant i41: y == 0 ==> x == i ==> x + y == i + j ==> x == 0 ==> x == i ==> y == j;\nloop invariant i42: x == 0 ==> y == j ==> x + y == i + j ==> x == 0 ==> x == i ==> x + y == i + j;\nloop invariant i43: y == 0 ==> x == i ==> x + y == i + j ==> x == 0 ==> x == i ==> x + y == i + j;\nloop invariant i44: x == 0 ==> y == j ==> x + y == i + j ==> x == 0 ==> x == i ==> x + y == i + j ==> x == 0;\nloop invariant i45: y == 0 ==> x == i ==> x + y == i + j ==> x == 0 ==> x == i ==> x + y == i + j ==> x == 0;\n\n*/\nwhile(x != 0) {\n        x--;\n        y--;\n    }\n\n    if (i == j) {\n        {;\n//@ assert(y == 0);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 52: Assignment operators not allowed in annotations.",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n    if (!(i >= 0 && j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    /*@\nloop invariant i1: i >= 0;\nloop invariant i2: j >= 0;\nloop invariant i3: x >= 0;\nloop invariant i4: y >= 0;\nloop invariant i5: x >= i;\nloop invariant i6: y >= j;\nloop invariant i7: x >= y;\nloop invariant i8: i - x == j - y;\nloop invariant i9: 0 <= x <= i;\nloop invariant i10: 0 <= y <= j;\nloop invariant i11: x + y == i + j;\nloop invariant i12: x <= i;\nloop invariant i13: y <= j;\nloop invariant i14: x == i - y;\nloop invariant i15: y == j - x;\nloop invariant i16: x == 0 == (y == j);\nloop invariant i17: y == 0 == (x == i);\nloop invariant i18: (x != 0 ==> (x <= i && y <= j));\nloop invariant i19: (x == 0 ==> (y == j));\nloop invariant i20: (y == 0 ==> (x == i));\nloop invariant i21: (x != 0 ==> (x >= 0 && y >= 0));\nloop invariant i22: (x == 0 ==> (y >= 0 && x >= 0));\nloop invariant i23: (y != 0 ==> (y >= 0 && x >= 0));\nloop invariant i24: (y == 0 ==> (x >= 0 && y >= 0));\nloop invariant i25: (x != 0 ==> (x == i - y && y == j - x));\nloop invariant i26: (x == 0 ==> (y == j && x == i));\nloop invariant i27: (y != 0 ==> (y == j - x && x == i - y));\nloop invariant i28: x == i - j;\nloop invariant i29: y == j - i;\nloop invariant i30: x == 0 ==> j == i;\nloop invariant i31: y == 0 ==> i == j;\nloop invariant i32: x == i ==> y == 0;\nloop invariant i33: y == j ==> x == 0;\nloop invariant i34: x + y >= i - j;\nloop invariant i35: x + y <= i + j;\nloop invariant i36: x = i - y;\nloop invariant i37: y = j - x;\nloop invariant i38: y == j - j;\nloop invariant i39: i >= j;\nloop invariant i40: x + y == i + j - j;\nloop invariant i41: x + y == i - j;\nloop invariant i42: x + y == j;\nloop invariant i43: x + y == 0;\nloop invariant i44: x + y == i;\nloop invariant i45: i == j;\nloop invariant i46: x == 0;\nloop invariant i47: y == 0;\nloop invariant i48: x == i;\nloop invariant i49: y == j;\nloop invariant i50: x == 0 ==> y == 0;\nloop invariant i51: i == j ==> x == y;\nloop invariant i52: i >= j ==> x == y;\nloop invariant i53: i < j ==> x == 0;\nloop invariant i54: y >= i ==> x == 0;\nloop invariant i55: y < i ==> x == y;\nloop invariant i56: i == x + j;\nloop invariant i57: j == y + i;\nloop invariant i58: i != 0 ==> x == i;\nloop invariant i59: i != 0 ==> y == j;\nloop invariant i60: i == j ==> y == 0;\nloop invariant i61: i == j ==> x == 2 * j;\nloop invariant i62: i == j ==> y == j * j;\nloop invariant i63: 0 <= i <= j;\nloop invariant i64: y == i - x;\nloop invariant i65: x == 0 ==> y == j;\nloop invariant i66: x == 0 ==> i == j;\nloop invariant i67: x == 0 ==> i >= 0;\nloop invariant i68: x == 0 ==> j >= 0;\nloop invariant i69: 1 <= x <= i;\nloop invariant i70: y == (j - x);\nloop invariant i71: ( i >= 0 && j >= 0 );\nloop invariant i72: ( x >= 0 && y >= 0 );\nloop invariant i73: ( i == x + j && j == y + j );\nloop invariant i74: ( i <= x && j <= y );\nloop invariant i75: ( i <= x + y && j <= x + y );\nloop invariant i76: i >= x;\nloop invariant i77: j >= y;\nloop invariant i78: x <= y || x == y;\nloop invariant i79: y <= x || x == y;\nloop invariant i80: x == 0 ==> x == y;\nloop invariant i81: y == 0 ==> x == y;\nloop invariant i82: x == 0 ==> i == j && y == 0;\nloop invariant i83: y == 0 ==> i == j && x == 0;\nloop invariant i84: x == 0 ==> i == j && y == 0 && x == y;\nloop invariant i85: y == 0 ==> i == j && x == 0 && x == y;\nloop invariant i86: x == 0 ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y;\nloop invariant i87: y == 0 ==> i == j && x == 0 && x == y ==> i == j && y == 0 && x == y;\nloop invariant i88: x == 0 ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y;\nloop invariant i89: y == 0 ==> i == j && x == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y;\nloop invariant i90: x == 0 ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y;\nloop invariant i91: y == 0 ==> i == j && x == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y;\nloop invariant i92: x == 0 ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y;\nloop invariant i93: y == 0 ==> i == j && x == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y;\nloop invariant i94: x == 0 ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y;\nloop invariant i95: y == 0 ==> i == j && x == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y;\nloop invariant i96: 0 <= i <= 2147483647;\nloop invariant i97: 0 <= j <= 2147483647;\nloop invariant i98: x == y;\nloop invariant i99: (x == 0 ==> y == j);\nloop invariant i100: (x == 0 ==> i == j);\nloop invariant i101: (x == 0 ==> y == 0);\nloop invariant i102: (x == 0 ==> i == j && y == j && i == j && x == y && y == 0);\nloop invariant i103: (x == 0 ==> i == j && y == j && i == j && x == y && y == 0 && i == j && y == j && i == j && x == y && y == 0);\nloop invariant i104: 0 <= i <= 100000;\nloop invariant i105: 0 <= j <= 100000;\nloop invariant i106: x >= (i - j) && y >= j;\nloop invariant i107: x >= 0 && y >= 0;\nloop invariant i108: x == 0 && y == 0;\nloop invariant i109: x == 0 && y == 0 && i == j;\nloop invariant i110: x == 0 && y == 0 && i == j && y == 0;\nloop invariant i111: x == 0 && y == 0 && i == j && y == 0 && x == 0;\nloop invariant i112: x == 0 && y == 0 && i == j && y == 0 && x == 0 && x == y;\nloop invariant i113: x == 0 && y == 0 && i == j && y == 0 && x == 0 && x == y && x == 0;\nloop invariant i114: x == 0 && y == 0 && i == j && y == 0 && x == 0 && x == y && x == 0 && y == 0;\nloop invariant i115: x == 0 && y == 0 && i == j && y == 0 && x == 0 && x == y && x == 0 && y == 0 && x == 0;\nloop invariant i116: x == 0 && y == 0 && i == j && y == 0 && x == 0 && x == y && x == 0 && y == 0 && x == 0 && x == 0;\nloop invariant i117: x == 0 && y == 0 && i == j && y == 0 && x == 0 && x == y && x == 0 && y == 0 && x == 0 && x == 0 && x == 0;\nloop invariant i118: x == 0 && y == 0 && i == j && y == 0 && x == 0 && x == y && x == 0 && y == 0 && x == 0 && x == 0 && x == 0 && x == 0;\nloop invariant i119: x == 0 && y == 0 && i == j && y == 0 && x == 0 && x == y && x == 0 && y == 0 && x == 0 && x == 0 && x == 0 && x == 0 && x == 0;\nloop invariant i120: x == 0 && y == 0 && i == j && y == 0 && x == 0 && x == y && x == 0 && y == 0 && x == 0 && x == 0 && x == 0 && x == 0 && x == 0 && x == 0;\nloop invariant i121: x == 0 && y == 0 && i == j && y == 0 && x == 0 && x == y && x == 0 && y == 0 && x == 0 && x == 0 && x == 0 && x == 0 && x == 0 && x == 0 && x == 0;\nloop invariant i122: x == 0 && y == 0 && i == j && y == 0 && x == 0 && x == y && x == 0 && y == 0 && x == 0 && x == 0 && x == 0 && x == 0 && x == 0 && x == 0 && x == 0 && x == 0;\nloop invariant i123: x == 0 && y == 0 && i == j && y == 0 && x == 0 && x == y && x == 0 && y == 0 && x == 0 && x == 0 && x == 0 && x == 0 && x == 0 && x == 0 && x == 0 && x == 0 && x == 0;\nloop invariant i124: x == 0 && y == 0 && i == j && y == 0 && x == 0 && x == y && x == 0 && y == 0 && x == 0 && x == 0 && x == 0 && x == 0 && x == 0 && x == 0 && x == 0 && x == 0 && x == 0 && x == 0;\nloop invariant i125: x + y >= i + j;\nloop invariant i126: x == (i - y);\nloop invariant i127: y == 0 ==> x == i;\nloop invariant i128: x == 0 ==> y == j ==> i == j;\nloop invariant i129: y == 0 ==> x == i ==> i == j;\nloop invariant i130: x == 0 ==> y == j ==> x == 0;\nloop invariant i131: y == 0 ==> x == i ==> x == 0;\nloop invariant i132: x == 0 ==> y == j ==> y == 0;\nloop invariant i133: y == 0 ==> x == i ==> y == 0;\nloop invariant i134: x == 0 ==> y == j ==> x == i;\nloop invariant i135: y == 0 ==> x == i ==> y == j;\nloop invariant i136: x == 0 ==> y == j ==> x + y == i + j;\nloop invariant i137: y == 0 ==> x == i ==> x + y == i + j;\nloop invariant i138: x == 0 ==> y == j ==> x + y == i + j ==> x == 0;\nloop invariant i139: y == 0 ==> x == i ==> x + y == i + j ==> x == 0;\nloop invariant i140: x == 0 ==> y == j ==> x + y == i + j ==> y == 0;\nloop invariant i141: y == 0 ==> x == i ==> x + y == i + j ==> y == 0;\nloop invariant i142: x == 0 ==> y == j ==> x + y == i + j ==> x == i;\nloop invariant i143: y == 0 ==> x == i ==> x + y == i + j ==> y == j;\nloop invariant i144: x == 0 ==> y == j ==> x + y == i + j ==> x + y == i + j;\nloop invariant i145: y == 0 ==> x == i ==> x + y == i + j ==> x + y == i + j;\nloop invariant i146: x == 0 ==> y == j ==> x + y == i + j ==> x == 0 ==> y == j;\nloop invariant i147: y == 0 ==> x == i ==> x + y == i + j ==> x == 0 ==> y == j;\nloop invariant i148: x == 0 ==> y == j ==> x + y == i + j ==> x == 0 ==> y == 0;\nloop invariant i149: y == 0 ==> x == i ==> x + y == i + j ==> x == 0 ==> y == 0;\nloop invariant i150: x == 0 ==> y == j ==> x + y == i + j ==> x == 0 ==> x == i;\nloop invariant i151: x == 0 ==> y == j ==> x + y == i + j ==> x == 0 ==> x + y == i + j;\nloop invariant i152: y == 0 ==> x == i ==> x + y == i + j ==> x == 0 ==> x + y == i + j;\nloop invariant i153: x == 0 ==> y == j ==> x + y == i + j ==> x == 0 ==> x == i ==> y == j;\nloop invariant i154: y == 0 ==> x == i ==> x + y == i + j ==> x == 0 ==> x == i ==> y == j;\nloop invariant i155: x == 0 ==> y == j ==> x + y == i + j ==> x == 0 ==> x == i ==> x + y == i + j;\nloop invariant i156: y == 0 ==> x == i ==> x + y == i + j ==> x == 0 ==> x == i ==> x + y == i + j;\nloop invariant i157: x == 0 ==> y == j ==> x + y == i + j ==> x == 0 ==> x == i ==> x + y == i + j ==> x == 0;\nloop invariant i158: y == 0 ==> x == i ==> x + y == i + j ==> x == 0 ==> x == i ==> x + y == i + j ==> x == 0;\nloop invariant i159: x == 0 ==> y == j ==> x + y == i + j ==> x == 0 ==> x == i ==> x + y == i + j ==> y == 0;\n*/\nwhile(x != 0) {\n        x--;\n        y--;\n    }\n\n    if (i == j) {\n        {;\n//@ assert(y == 0);\n}\n\n    }\n    return 0;\n}",
        "combined_annotation_num_solver_calls": 47,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n    if (!(i >= 0 && j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    /*@\nloop invariant i1: i >= 0;\nloop invariant i2: j >= 0;\nloop invariant i3: x >= 0;\n\n\n\n\nloop invariant i8: i - x == j - y;\nloop invariant i9: 0 <= x <= i;\n\n\nloop invariant i12: x <= i;\nloop invariant i13: y <= j;\n\n\n\n\nloop invariant i18: (x != 0 ==> (x <= i && y <= j));\n\n\n\n\n\nloop invariant i24: (y == 0 ==> (x >= 0 && y >= 0));\n\n\n\n\n\n\n\n\n\n\nloop invariant i35: x + y <= i + j;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i51: i == j ==> x == y;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i67: x == 0 ==> i >= 0;\nloop invariant i68: x == 0 ==> j >= 0;\n\n\nloop invariant i71: ( i >= 0 && j >= 0 );\n\n\n\n\nloop invariant i76: i >= x;\nloop invariant i77: j >= y;\n\n\n\n\n\n\n\n\nloop invariant i86: x == 0 ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y;\nloop invariant i87: y == 0 ==> i == j && x == 0 && x == y ==> i == j && y == 0 && x == y;\nloop invariant i88: x == 0 ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y;\nloop invariant i89: y == 0 ==> i == j && x == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y;\nloop invariant i90: x == 0 ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y;\nloop invariant i91: y == 0 ==> i == j && x == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y;\nloop invariant i92: x == 0 ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y;\nloop invariant i93: y == 0 ==> i == j && x == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y;\nloop invariant i94: x == 0 ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y;\nloop invariant i95: y == 0 ==> i == j && x == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y ==> i == j && y == 0 && x == y;\nloop invariant i96: 0 <= i <= 2147483647;\nloop invariant i97: 0 <= j <= 2147483647;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i130: x == 0 ==> y == j ==> x == 0;\n\n\nloop invariant i133: y == 0 ==> x == i ==> y == 0;\nloop invariant i134: x == 0 ==> y == j ==> x == i;\nloop invariant i135: y == 0 ==> x == i ==> y == j;\nloop invariant i136: x == 0 ==> y == j ==> x + y == i + j;\nloop invariant i137: y == 0 ==> x == i ==> x + y == i + j;\nloop invariant i138: x == 0 ==> y == j ==> x + y == i + j ==> x == 0;\n\n\nloop invariant i141: y == 0 ==> x == i ==> x + y == i + j ==> y == 0;\nloop invariant i142: x == 0 ==> y == j ==> x + y == i + j ==> x == i;\nloop invariant i143: y == 0 ==> x == i ==> x + y == i + j ==> y == j;\nloop invariant i144: x == 0 ==> y == j ==> x + y == i + j ==> x + y == i + j;\nloop invariant i145: y == 0 ==> x == i ==> x + y == i + j ==> x + y == i + j;\nloop invariant i146: x == 0 ==> y == j ==> x + y == i + j ==> x == 0 ==> y == j;\nloop invariant i147: y == 0 ==> x == i ==> x + y == i + j ==> x == 0 ==> y == j;\n\nloop invariant i149: y == 0 ==> x == i ==> x + y == i + j ==> x == 0 ==> y == 0;\nloop invariant i150: x == 0 ==> y == j ==> x + y == i + j ==> x == 0 ==> x == i;\nloop invariant i151: x == 0 ==> y == j ==> x + y == i + j ==> x == 0 ==> x + y == i + j;\nloop invariant i152: y == 0 ==> x == i ==> x + y == i + j ==> x == 0 ==> x + y == i + j;\nloop invariant i153: x == 0 ==> y == j ==> x + y == i + j ==> x == 0 ==> x == i ==> y == j;\nloop invariant i154: y == 0 ==> x == i ==> x + y == i + j ==> x == 0 ==> x == i ==> y == j;\nloop invariant i155: x == 0 ==> y == j ==> x + y == i + j ==> x == 0 ==> x == i ==> x + y == i + j;\nloop invariant i156: y == 0 ==> x == i ==> x + y == i + j ==> x == 0 ==> x == i ==> x + y == i + j;\nloop invariant i157: x == 0 ==> y == j ==> x + y == i + j ==> x == 0 ==> x == i ==> x + y == i + j ==> x == 0;\nloop invariant i158: y == 0 ==> x == i ==> x + y == i + j ==> x == 0 ==> x == i ==> x + y == i + j ==> x == 0;\n\n*/\nwhile(x != 0) {\n        x--;\n        y--;\n    }\n\n    if (i == j) {\n        {;\n//@ assert(y == 0);\n}\n\n    }\n    return 0;\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/split.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c"
        ],
        "skipped": [],
        "total": 53,
        "success_count": 44,
        "failure_count": 9,
        "success_rate": 0.8301886792452831
    }
}