{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w2.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nvoid main() {\n\n\tint n = unknown_int();\n\tif (n <= 0)\n\t\t\nreturn;\n\n\tint x = 0;\n\tint input = unknown_int();\n\n \twhile ( 0 == 0 ) {\n\t\tif ( input ) {\n\n\t\t\tx = x + 1;\n\t\t\tif (x >= n ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tinput = unknown_int();\n\t}\n\t{;\n//@ assert(x == n);\n}\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= n;\nloop invariant 0 <= input <= INT_MAX;\nloop invariant input is non-deterministic;\nloop invariant x is non-deterministic;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= n <= 100000;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant input <= 1;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant input <= 1;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant input <= 1;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant input <= 1;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant input <= 1;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant input <= 1;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant input <= 1;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant input <= 1;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant input <= 1;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant input <= 1;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant input <= 1;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant input <= 1;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant input <= 1;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant input <= 1;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant input <= 1;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant input <= 1;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant input <= 1;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant input <= 1;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant input <= 1;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant input <= 1;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant input <= 1;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant input <= 1;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant input <= 1;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant input <= 1;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant input <= 1;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant input <= 1;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant input <= 1;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant input <= 1;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant input <= 1;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant input <= 1;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant input <= 1;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant input <= 1;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant input <= 1;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant input <= 1;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant input <= 1;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant input <= 1;\nloop invariant x >= 1;\nloop invariant x <= n;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= n;\nloop invariant 0 <= input <= 1;\nloop invariant 0 <= n;\nloop invariant x <= n;\nloop invariant input <= 1;\nloop invariant x >= 0;\nloop invariant input >= 0;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant input == 1 ==> x == n;\nloop invariant input == 0 ==> x < n;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant input == 1 ==> x == n;\nloop invariant input == 0 ==> x < n;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant input == 1 ==> x == n;\nloop invariant input == 0 ==> x < n;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant input == 1 ==> x == n;\nloop invariant input == 0 ==> x < n;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant input == 1 ==> x == n;\nloop invariant input == 0 ==> x < n;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant input == 1 ==> x == n;\nloop invariant input == 0 ==> x < n;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant input == 1 ==> x == n;\nloop invariant input == 0 ==> x < n;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant input == 1 ==> x == n;\nloop invariant input == 0 ==> x < n;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant input == 1 ==> x == n;\nloop invariant input == 0 ==> x < n;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant input == 1 ==> x == n;\nloop invariant input == 0 ==> x < n;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant input == 1 ==> x == n;\nloop invariant input == 0 ==> x < n;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant input == 1 ==> x == n;\nloop invariant input == 0 ==> x < n;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant input == 1 ==> x == n;\nloop invariant input == 0 ==> x < n;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant input == 1 ==> x == n;\nloop invariant input == 0 ==> x < n;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant input == 1 ==> x == n;\nloop invariant input == 0 ==> x < n;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant input == 1 ==> x == n;\nloop invariant input == 0 ==> x < n;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant input == 1 ==> x == n;\nloop invariant input == 0 ==> x < n;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant input == 1 ==> x == n;\nloop invariant input == 0 ==> x < n;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant input == 1 ==> x == n;\nloop invariant input == 0 ==> x < n;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant input == 1 ==> x == n;\nloop invariant input == 0 ==> x < n;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant input == 1 ==> x == n;\nloop invariant input == 0 ==> x < n;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant input == 1 ==> x == n;\nloop invariant input == 0 ==> x < n;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant input == 1 ==> x == n;\nloop invariant input == 0 ==> x < n;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant input == 1 ==> x == n;\nloop invariant input == 0 ==> x < n;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant input == 1 ==> x == n;\nloop invariant input == 0 ==> x < n;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant input == 1 ==> x == n;\nloop invariant input == 0 ==> x < n;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant input == 1 ==> x == n;\nloop invariant input == 0 ==> x < n;\n*/\n```",
            "```\n/*@\nloop invariant x == n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x <= n ==> input >= 0;\nloop invariant x <= n ==> x <= n - input;\nloop invariant x <= n ==> x + input == n;\nloop invariant x <= n ==> n - x == input;\nloop invariant x <= n ==> x + input >= 0;\nloop invariant x <= n ==> input <= n - x;\nloop invariant x <= n ==> x <= n - input;\nloop invariant x <= n ==> x + input == n;\nloop invariant x <= n ==> n - x == input;\nloop invariant x <= n ==> x <= n - input;\nloop invariant x <= n ==> x + input >= 0;\nloop invariant x <= n ==> input <= n - x;\nloop invariant x <= n ==> x <= n - input;\nloop invariant x <= n ==> x + input == n;\nloop invariant x <= n ==> n - x == input;\nloop invariant x <= n ==> x + input >= 0;\nloop invariant x <= n ==> input <= n - x;\nloop invariant x <= n ==> x <= n - input;\nloop invariant x <= n ==> x + input == n;\nloop invariant x <= n ==> n - x == input;\nloop invariant x <= n ==> x + input >= 0;\nloop invariant x <= n ==> input <= n - x;\nloop invariant x <= n ==> x <= n - input;\nloop invariant x <= n ==> x + input == n;\nloop invariant x <= n ==> n - x == input;\nloop invariant x <= n ==> x + input >= 0;\nloop invariant x <= n ==> input <= n - x;\nloop invariant x <= n ==> x <= n - input;\nloop invariant x <= n ==> x + input == n;\nloop invariant x <= n ==> n - x == input;\nloop invariant x <= n ==> x + input >= 0;\nloop invariant x <= n ==> input <= n - x;\nloop invariant x <= n ==> x <= n - input;\nloop invariant x <= n ==> x + input == n;\nloop invariant x <= n ==> n - x == input;\nloop invariant x <= n ==> x + input >= 0;\nloop invariant x <= n ==> input <= n - x;\nloop invariant x <= n ==> x <= n - input;\nloop invariant x <= n ==> x + input == n;\nloop invariant x <= n ==> n - x == input;\nloop invariant x <= n ==> x + input >= 0;\nloop invariant x <= n ==> input <= n - x;\nloop invariant x <= n ==> x <= n - input;\nloop invariant x <= n ==> x + input == n;\nloop invariant x <= n ==> n - x == input;\nloop invariant x <= n ==> x + input >= 0;\nloop invariant x <= n ==> input <= n - x;\nloop invariant x <= n ==> x <= n - input;\nloop invariant x <= n ==> x + input == n;\nloop invariant x <= n ==> n - x == input;\nloop invariant x <= n ==> x + input >= 0;\nloop invariant x <= n ==> input <= n - x;\nloop invariant x <= n ==> x <= n - input;\nloop invariant x <= n ==> x + input == n;\nloop invariant x <= n ==> n - x == input;\nloop invariant x <= n ==> x + input >= 0;\nloop invariant x <= n ==> input <= n - x;\nloop invariant x <= n ==> x <= n - input;\nloop invariant x <= n ==> x + input == n;\nloop invariant x <= n ==> n - x == input;\nloop invariant x <= n ==> x + input >= 0;\nloop invariant x <= n ==> input <= n - x;\nloop invariant x <= n ==> x <= n - input;\nloop invariant x <= n ==> x + input == n;\nloop invariant x <= n ==> n - x == input;\nloop invariant x <= n ==> x + input >= 0;\nloop invariant x <= n ==> input <= n - x;\nloop invariant x <= n ==> x <= n - input;\nloop invariant x <= n ==> x + input == n;\nloop invariant x <= n ==> n - x == input;\nloop invariant x <= n ==> x + input >= 0;\nloop invariant x <= n ==> input <= n - x;\nloop invariant x <= n ==> x <= n - input;\nloop invariant x <= n ==> x + input == n;\nloop invariant x <= n ==> n - x == input;\nloop invariant x <= n ==> x + input >= 0;\nloop invariant x <= n ==> input <= n - x;\nloop invariant x <= n ==> x <= n - input;\nloop invariant x <= n ==> x + input == n;\nloop invariant x <= n ==> n - x == input;\nloop invariant x <= n ==> x + input >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant input >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant input >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= n;\nloop invariant 0 <= x;\nloop invariant x <= n;\nloop invariant 0 <= input;\nloop invariant input <= 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant input >= 0;\nloop invariant input <= n;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= n;\nloop invariant input >= 0;\nloop invariant input <= INT_MAX;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant (input != 0) ==> (x < n);\nloop invariant (input == 0) ==> (x == n);\n*/\n```",
            "```\n/*@\nloop invariant x == 0;\nloop invariant input == 1;\nloop invariant n <= 0;\n*/\n```",
            "```\n/*@\nloop invariant true;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant input <= n;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= n;\nloop invariant input == 0;\nloop invariant unknown_int() == input;\nloop invariant unknown_int() == n;\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= n <= 2147483647;\nloop invariant n <= 2147483647;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= input;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nvoid main() {\n\n\tint n = unknown_int();\n\tif (n <= 0)\n\t\t\nreturn;\n\n\tint x = 0;\n\tint input = unknown_int();\n\n \t/*@\n\n*/\nwhile ( 0 == 0 ) {\n\t\tif ( input ) {\n\n\t\t\tx = x + 1;\n\t\t\tif (x >= n ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tinput = unknown_int();\n\t}\n\t{;\n//@ assert(x == n);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= n;\nloop invariant 0 <= input <= INT_MAX;\nloop invariant input is non-deterministic;\nloop invariant x is non-deterministic;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nvoid main() {\n\n\tint n = unknown_int();\n\tif (n <= 0)\n\t\t\nreturn;\n\n\tint x = 0;\n\tint input = unknown_int();\n\n \t/*@\n\n\n\n\n*/\nwhile ( 0 == 0 ) {\n\t\tif ( input ) {\n\n\t\t\tx = x + 1;\n\t\t\tif (x >= n ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tinput = unknown_int();\n\t}\n\t{;\n//@ assert(x == n);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 1 <= n <= 100000;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant input <= 1;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant input <= 1;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant input <= 1;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant input <= 1;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant input <= 1;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant input <= 1;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant input <= 1;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant input <= 1;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant input <= 1;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant input <= 1;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant input <= 1;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant input <= 1;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant input <= 1;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant input <= 1;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant input <= 1;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant input <= 1;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant input <= 1;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant input <= 1;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant input <= 1;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant input <= 1;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant input <= 1;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant input <= 1;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant input <= 1;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant input <= 1;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant input <= 1;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant input <= 1;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant input <= 1;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant input <= 1;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant input <= 1;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant input <= 1;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant input <= 1;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant input <= 1;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant input <= 1;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant input <= 1;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant input <= 1;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant input <= 1;\nloop invariant x >= 1;\nloop invariant x <= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nvoid main() {\n\n\tint n = unknown_int();\n\tif (n <= 0)\n\t\t\nreturn;\n\n\tint x = 0;\n\tint input = unknown_int();\n\n \t/*@\n\n\nloop invariant i3: x <= n;\n\n\n\n*/\nwhile ( 0 == 0 ) {\n\t\tif ( input ) {\n\n\t\t\tx = x + 1;\n\t\t\tif (x >= n ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tinput = unknown_int();\n\t}\n\t{;\n//@ assert(x == n);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= n;\nloop invariant 0 <= input <= 1;\nloop invariant 0 <= n;\nloop invariant x <= n;\nloop invariant input <= 1;\nloop invariant x >= 0;\nloop invariant input >= 0;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant input == 1 ==> x == n;\nloop invariant input == 0 ==> x < n;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant input == 1 ==> x == n;\nloop invariant input == 0 ==> x < n;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant input == 1 ==> x == n;\nloop invariant input == 0 ==> x < n;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant input == 1 ==> x == n;\nloop invariant input == 0 ==> x < n;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant input == 1 ==> x == n;\nloop invariant input == 0 ==> x < n;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant input == 1 ==> x == n;\nloop invariant input == 0 ==> x < n;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant input == 1 ==> x == n;\nloop invariant input == 0 ==> x < n;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant input == 1 ==> x == n;\nloop invariant input == 0 ==> x < n;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant input == 1 ==> x == n;\nloop invariant input == 0 ==> x < n;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant input == 1 ==> x == n;\nloop invariant input == 0 ==> x < n;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant input == 1 ==> x == n;\nloop invariant input == 0 ==> x < n;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant input == 1 ==> x == n;\nloop invariant input == 0 ==> x < n;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant input == 1 ==> x == n;\nloop invariant input == 0 ==> x < n;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant input == 1 ==> x == n;\nloop invariant input == 0 ==> x < n;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant input == 1 ==> x == n;\nloop invariant input == 0 ==> x < n;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant input == 1 ==> x == n;\nloop invariant input == 0 ==> x < n;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant input == 1 ==> x == n;\nloop invariant input == 0 ==> x < n;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant input == 1 ==> x == n;\nloop invariant input == 0 ==> x < n;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant input == 1 ==> x == n;\nloop invariant input == 0 ==> x < n;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant input == 1 ==> x == n;\nloop invariant input == 0 ==> x < n;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant input == 1 ==> x == n;\nloop invariant input == 0 ==> x < n;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant input == 1 ==> x == n;\nloop invariant input == 0 ==> x < n;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant input == 1 ==> x == n;\nloop invariant input == 0 ==> x < n;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant input == 1 ==> x == n;\nloop invariant input == 0 ==> x < n;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant input == 1 ==> x == n;\nloop invariant input == 0 ==> x < n;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant input == 1 ==> x == n;\nloop invariant input == 0 ==> x < n;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant input == 1 ==> x == n;\nloop invariant input == 0 ==> x < n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nvoid main() {\n\n\tint n = unknown_int();\n\tif (n <= 0)\n\t\t\nreturn;\n\n\tint x = 0;\n\tint input = unknown_int();\n\n \t/*@\n\n\nloop invariant i3: 0 <= n;\nloop invariant i4: x <= n;\n\nloop invariant i6: x >= 0;\n\n\nloop invariant i9: input == 0 ==> x < n;\n*/\nwhile ( 0 == 0 ) {\n\t\tif ( input ) {\n\n\t\t\tx = x + 1;\n\t\t\tif (x >= n ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tinput = unknown_int();\n\t}\n\t{;\n//@ assert(x == n);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant x == n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nvoid main() {\n\n\tint n = unknown_int();\n\tif (n <= 0)\n\t\t\nreturn;\n\n\tint x = 0;\n\tint input = unknown_int();\n\n \t/*@\n\nloop invariant i2: x >= 0;\nloop invariant i3: x <= n;\n*/\nwhile ( 0 == 0 ) {\n\t\tif ( input ) {\n\n\t\t\tx = x + 1;\n\t\t\tif (x >= n ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tinput = unknown_int();\n\t}\n\t{;\n//@ assert(x == n);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x <= n ==> input >= 0;\nloop invariant x <= n ==> x <= n - input;\nloop invariant x <= n ==> x + input == n;\nloop invariant x <= n ==> n - x == input;\nloop invariant x <= n ==> x + input >= 0;\nloop invariant x <= n ==> input <= n - x;\nloop invariant x <= n ==> x <= n - input;\nloop invariant x <= n ==> x + input == n;\nloop invariant x <= n ==> n - x == input;\nloop invariant x <= n ==> x <= n - input;\nloop invariant x <= n ==> x + input >= 0;\nloop invariant x <= n ==> input <= n - x;\nloop invariant x <= n ==> x <= n - input;\nloop invariant x <= n ==> x + input == n;\nloop invariant x <= n ==> n - x == input;\nloop invariant x <= n ==> x + input >= 0;\nloop invariant x <= n ==> input <= n - x;\nloop invariant x <= n ==> x <= n - input;\nloop invariant x <= n ==> x + input == n;\nloop invariant x <= n ==> n - x == input;\nloop invariant x <= n ==> x + input >= 0;\nloop invariant x <= n ==> input <= n - x;\nloop invariant x <= n ==> x <= n - input;\nloop invariant x <= n ==> x + input == n;\nloop invariant x <= n ==> n - x == input;\nloop invariant x <= n ==> x + input >= 0;\nloop invariant x <= n ==> input <= n - x;\nloop invariant x <= n ==> x <= n - input;\nloop invariant x <= n ==> x + input == n;\nloop invariant x <= n ==> n - x == input;\nloop invariant x <= n ==> x + input >= 0;\nloop invariant x <= n ==> input <= n - x;\nloop invariant x <= n ==> x <= n - input;\nloop invariant x <= n ==> x + input == n;\nloop invariant x <= n ==> n - x == input;\nloop invariant x <= n ==> x + input >= 0;\nloop invariant x <= n ==> input <= n - x;\nloop invariant x <= n ==> x <= n - input;\nloop invariant x <= n ==> x + input == n;\nloop invariant x <= n ==> n - x == input;\nloop invariant x <= n ==> x + input >= 0;\nloop invariant x <= n ==> input <= n - x;\nloop invariant x <= n ==> x <= n - input;\nloop invariant x <= n ==> x + input == n;\nloop invariant x <= n ==> n - x == input;\nloop invariant x <= n ==> x + input >= 0;\nloop invariant x <= n ==> input <= n - x;\nloop invariant x <= n ==> x <= n - input;\nloop invariant x <= n ==> x + input == n;\nloop invariant x <= n ==> n - x == input;\nloop invariant x <= n ==> x + input >= 0;\nloop invariant x <= n ==> input <= n - x;\nloop invariant x <= n ==> x <= n - input;\nloop invariant x <= n ==> x + input == n;\nloop invariant x <= n ==> n - x == input;\nloop invariant x <= n ==> x + input >= 0;\nloop invariant x <= n ==> input <= n - x;\nloop invariant x <= n ==> x <= n - input;\nloop invariant x <= n ==> x + input == n;\nloop invariant x <= n ==> n - x == input;\nloop invariant x <= n ==> x + input >= 0;\nloop invariant x <= n ==> input <= n - x;\nloop invariant x <= n ==> x <= n - input;\nloop invariant x <= n ==> x + input == n;\nloop invariant x <= n ==> n - x == input;\nloop invariant x <= n ==> x + input >= 0;\nloop invariant x <= n ==> input <= n - x;\nloop invariant x <= n ==> x <= n - input;\nloop invariant x <= n ==> x + input == n;\nloop invariant x <= n ==> n - x == input;\nloop invariant x <= n ==> x + input >= 0;\nloop invariant x <= n ==> input <= n - x;\nloop invariant x <= n ==> x <= n - input;\nloop invariant x <= n ==> x + input == n;\nloop invariant x <= n ==> n - x == input;\nloop invariant x <= n ==> x + input >= 0;\nloop invariant x <= n ==> input <= n - x;\nloop invariant x <= n ==> x <= n - input;\nloop invariant x <= n ==> x + input == n;\nloop invariant x <= n ==> n - x == input;\nloop invariant x <= n ==> x + input >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nvoid main() {\n\n\tint n = unknown_int();\n\tif (n <= 0)\n\t\t\nreturn;\n\n\tint x = 0;\n\tint input = unknown_int();\n\n \t/*@\nloop invariant i1: 0 <= x <= n;\n\n\n\n\n\n\n*/\nwhile ( 0 == 0 ) {\n\t\tif ( input ) {\n\n\t\t\tx = x + 1;\n\t\t\tif (x >= n ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tinput = unknown_int();\n\t}\n\t{;\n//@ assert(x == n);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant input >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant input >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nvoid main() {\n\n\tint n = unknown_int();\n\tif (n <= 0)\n\t\t\nreturn;\n\n\tint x = 0;\n\tint input = unknown_int();\n\n \t/*@\nloop invariant i1: 0 <= x <= n;\n\nloop invariant i3: x >= 0;\nloop invariant i4: x <= n;\n*/\nwhile ( 0 == 0 ) {\n\t\tif ( input ) {\n\n\t\t\tx = x + 1;\n\t\t\tif (x >= n ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tinput = unknown_int();\n\t}\n\t{;\n//@ assert(x == n);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= n;\nloop invariant 0 <= x;\nloop invariant x <= n;\nloop invariant 0 <= input;\nloop invariant input <= 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nvoid main() {\n\n\tint n = unknown_int();\n\tif (n <= 0)\n\t\t\nreturn;\n\n\tint x = 0;\n\tint input = unknown_int();\n\n \t/*@\nloop invariant i1: 0 <= n;\nloop invariant i2: 0 <= x;\nloop invariant i3: x <= n;\n\n\n*/\nwhile ( 0 == 0 ) {\n\t\tif ( input ) {\n\n\t\t\tx = x + 1;\n\t\t\tif (x >= n ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tinput = unknown_int();\n\t}\n\t{;\n//@ assert(x == n);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant input >= 0;\nloop invariant input <= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nvoid main() {\n\n\tint n = unknown_int();\n\tif (n <= 0)\n\t\t\nreturn;\n\n\tint x = 0;\n\tint input = unknown_int();\n\n \t/*@\nloop invariant i1: 0 <= x <= n;\n\n\n*/\nwhile ( 0 == 0 ) {\n\t\tif ( input ) {\n\n\t\t\tx = x + 1;\n\t\t\tif (x >= n ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tinput = unknown_int();\n\t}\n\t{;\n//@ assert(x == n);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= n;\nloop invariant input >= 0;\nloop invariant input <= INT_MAX;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant (input != 0) ==> (x < n);\nloop invariant (input == 0) ==> (x == n);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nvoid main() {\n\n\tint n = unknown_int();\n\tif (n <= 0)\n\t\t\nreturn;\n\n\tint x = 0;\n\tint input = unknown_int();\n\n \t/*@\n\n\nloop invariant i3: input <= INT_MAX;\nloop invariant i4: x >= 0;\nloop invariant i5: x <= n;\n\n\n*/\nwhile ( 0 == 0 ) {\n\t\tif ( input ) {\n\n\t\t\tx = x + 1;\n\t\t\tif (x >= n ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tinput = unknown_int();\n\t}\n\t{;\n//@ assert(x == n);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant x == 0;\nloop invariant input == 1;\nloop invariant n <= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nvoid main() {\n\n\tint n = unknown_int();\n\tif (n <= 0)\n\t\t\nreturn;\n\n\tint x = 0;\n\tint input = unknown_int();\n\n \t/*@\n\n\n\n*/\nwhile ( 0 == 0 ) {\n\t\tif ( input ) {\n\n\t\t\tx = x + 1;\n\t\t\tif (x >= n ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tinput = unknown_int();\n\t}\n\t{;\n//@ assert(x == n);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant true;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant input >= 0;\nloop invariant input <= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nvoid main() {\n\n\tint n = unknown_int();\n\tif (n <= 0)\n\t\t\nreturn;\n\n\tint x = 0;\n\tint input = unknown_int();\n\n \t/*@\n\nloop invariant i2: x >= 0;\nloop invariant i3: x <= n;\n\n\n*/\nwhile ( 0 == 0 ) {\n\t\tif ( input ) {\n\n\t\t\tx = x + 1;\n\t\t\tif (x >= n ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tinput = unknown_int();\n\t}\n\t{;\n//@ assert(x == n);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= n;\nloop invariant input == 0;\nloop invariant unknown_int() == input;\nloop invariant unknown_int() == n;\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nvoid main() {\n\n\tint n = unknown_int();\n\tif (n <= 0)\n\t\t\nreturn;\n\n\tint x = 0;\n\tint input = unknown_int();\n\n \t/*@\n\n\n\n\n\n*/\nwhile ( 0 == 0 ) {\n\t\tif ( input ) {\n\n\t\t\tx = x + 1;\n\t\t\tif (x >= n ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tinput = unknown_int();\n\t}\n\t{;\n//@ assert(x == n);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= n <= 2147483647;\nloop invariant n <= 2147483647;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nvoid main() {\n\n\tint n = unknown_int();\n\tif (n <= 0)\n\t\t\nreturn;\n\n\tint x = 0;\n\tint input = unknown_int();\n\n \t/*@\nloop invariant i1: 0 <= x <= n;\nloop invariant i2: 0 <= n <= 2147483647;\nloop invariant i3: n <= 2147483647;\n*/\nwhile ( 0 == 0 ) {\n\t\tif ( input ) {\n\n\t\t\tx = x + 1;\n\t\t\tif (x >= n ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tinput = unknown_int();\n\t}\n\t{;\n//@ assert(x == n);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= input;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nvoid main() {\n\n\tint n = unknown_int();\n\tif (n <= 0)\n\t\t\nreturn;\n\n\tint x = 0;\n\tint input = unknown_int();\n\n \t/*@\nloop invariant i1: 0 <= x <= n;\n\n*/\nwhile ( 0 == 0 ) {\n\t\tif ( input ) {\n\n\t\t\tx = x + 1;\n\t\t\tif (x >= n ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tinput = unknown_int();\n\t}\n\t{;\n//@ assert(x == n);\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 22: unexpected token 'is'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nvoid main() {\n\n\tint n = unknown_int();\n\tif (n <= 0)\n\t\t\nreturn;\n\n\tint x = 0;\n\tint input = unknown_int();\n\n \t/*@\nloop invariant i1: 1 <= x <= n;\nloop invariant i2: 0 <= input <= INT_MAX;\nloop invariant i3: input is non-deterministic;\nloop invariant i4: x is non-deterministic;\nloop invariant i5: 1 <= n <= 100000;\nloop invariant i6: x >= n;\nloop invariant i7: x <= n;\nloop invariant i8: input >= 0;\nloop invariant i9: input <= 1;\nloop invariant i10: x >= 1;\nloop invariant i11: 0 <= input <= 1;\nloop invariant i12: 0 <= n;\nloop invariant i13: x >= 0;\nloop invariant i14: input == 1 ==> x == n;\nloop invariant i15: input == 0 ==> x < n;\nloop invariant i16: x == n;\nloop invariant i17: 0 <= x <= n;\nloop invariant i18: x <= n ==> input >= 0;\nloop invariant i19: x <= n ==> x <= n - input;\nloop invariant i20: x <= n ==> x + input == n;\nloop invariant i21: x <= n ==> n - x == input;\nloop invariant i22: x <= n ==> x + input >= 0;\nloop invariant i23: x <= n ==> input <= n - x;\nloop invariant i24: 0 <= x;\nloop invariant i25: 0 <= input;\nloop invariant i26: input <= n;\nloop invariant i27: input <= INT_MAX;\nloop invariant i28: (input != 0) ==> (x < n);\nloop invariant i29: (input == 0) ==> (x == n);\nloop invariant i30: x == 0;\nloop invariant i31: input == 1;\nloop invariant i32: n <= 0;\nloop invariant i33: true;\nloop invariant i34: input == 0;\nloop invariant i35: unknown_int() == input;\nloop invariant i36: unknown_int() == n;\nloop invariant i37: unknown_int() == unknown_int();\nloop invariant i38: 0 <= n <= 2147483647;\nloop invariant i39: n <= 2147483647;\n*/\nwhile ( 0 == 0 ) {\n\t\tif ( input ) {\n\n\t\t\tx = x + 1;\n\t\t\tif (x >= n ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tinput = unknown_int();\n\t}\n\t{;\n//@ assert(x == n);\n}\n\n}",
        "combined_annotation_num_solver_calls": 15,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nvoid main() {\n\n\tint n = unknown_int();\n\tif (n <= 0)\n\t\t\nreturn;\n\n\tint x = 0;\n\tint input = unknown_int();\n\n \t/*@\n\n\n\n\n\n\nloop invariant i7: x <= n;\n\n\n\n\nloop invariant i12: 0 <= n;\nloop invariant i13: x >= 0;\n\nloop invariant i15: input == 0 ==> x < n;\n\nloop invariant i17: 0 <= x <= n;\n\n\n\n\n\n\nloop invariant i24: 0 <= x;\n\n\nloop invariant i27: input <= INT_MAX;\nloop invariant i28: (input != 0) ==> (x < n);\n\n\n\n\n\n\n\n\n\nloop invariant i38: 0 <= n <= 2147483647;\nloop invariant i39: n <= 2147483647;\n*/\nwhile ( 0 == 0 ) {\n\t\tif ( input ) {\n\n\t\t\tx = x + 1;\n\t\t\tif (x >= n ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tinput = unknown_int();\n\t}\n\t{;\n//@ assert(x == n);\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w2.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/split.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c"
        ],
        "skipped": [],
        "total": 100,
        "success_count": 86,
        "failure_count": 14,
        "success_rate": 0.86
    }
}