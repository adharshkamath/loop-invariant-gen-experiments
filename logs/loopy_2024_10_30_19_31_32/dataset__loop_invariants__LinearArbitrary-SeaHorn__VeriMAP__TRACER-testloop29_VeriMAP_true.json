{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main() {\n  int x = 0;\n  while(x < 100) {\n    x++;\n    if(x == 50)\n      break;\n  }\n  {;\n//@ assert(!( x != 50 ));\n}\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant x >= 1;\nloop invariant x < 50 ==> x <= 49;\nloop invariant x >= 50 ==> x == 50;\nloop invariant x == 50 ==> x < 50 ==> x == 49;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant x == 50 ==> x >= 50;\nloop invariant x < 50 ==> x < 100;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 100;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant x < 50 ==> x = 50;\nloop invariant x >= 50 ==> x != 50;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant x < 100 ==> x == 50;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= 100;\nloop invariant x < 50 ==> x == 50;\nloop invariant x >= 50 ==> x < 50;\nloop invariant !(x != 50);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant (x == 50) ==> (x == 50);\nloop invariant x >= 50 ==> (x == 50);\nloop invariant x <= 50 ==> (x == 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant x == 50 ==> x == 50;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 100;\n*/\n```",
            "```\n/*@\nloop invariant x >= 0;\nloop invariant x < 100;\nloop invariant x == 50 ==> x == 50;\nloop invariant x != 50 ==> x != 50;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x < 100;\nloop invariant (if x == 50 then x == 50 else x < 50);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant x % 2 == 0 ==> x >= 50;\nloop invariant x % 2 != 0 ==> x <= 49;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant ((x == 50) ==> (x < 100));\nloop invariant ((x != 50) ==> (x < 50));\nloop invariant ((x != 50) ==> (x != 0));\nloop invariant ((x == 50) ==> (x != 50));\nloop invariant ((x < 50) ==> (x > 0));\nloop invariant ((x == 50) ==> (x == 50));\nloop invariant ((x != 50) ==> (x >= 0));\nloop invariant ((x == 50) ==> (x <= 50));\nloop invariant ((x < 50) ==> (x < 100));\nloop invariant ((x == 50) ==> (x > 0));\nloop invariant ((x != 50) ==> (x <= 100));\nloop invariant ((x == 50) ==> (x >= 0));\nloop invariant ((x != 50) ==> (x != 100));\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 100;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant x >= 0;\nloop invariant x <= 100;\nloop invariant x == 0;\nloop invariant x == 50;\nloop invariant x == 100;\nloop invariant x != 50;\nloop invariant x != 100;\nloop invariant x != 0;\nloop invariant x < 100;\nloop invariant x > 0;\nloop invariant x == 0 ==> x >= 0;\nloop invariant x == 0 ==> x <= 100;\nloop invariant x == 0 ==> x == 0;\nloop invariant x == 0 ==> x == 50;\nloop invariant x == 0 ==> x == 100;\nloop invariant x == 0 ==> x != 50;\nloop invariant x == 0 ==> x != 100;\nloop invariant x == 0 ==> x != 0;\nloop invariant x == 0 ==> x < 100;\nloop invariant x == 0 ==> x > 0;\nloop invariant x == 50 ==> x >= 0;\nloop invariant x == 50 ==> x <= 100;\nloop invariant x == 50 ==> x == 0;\nloop invariant x == 50 ==> x == 50;\nloop invariant x == 50 ==> x == 100;\nloop invariant x == 50 ==> x != 50;\nloop invariant x == 50 ==> x != 100;\nloop invariant x == 50 ==> x != 0;\nloop invariant x == 50 ==> x < 100;\nloop invariant x == 50 ==> x > 0;\nloop invariant x == 100 ==> x >= 0;\nloop invariant x == 100 ==> x <= 100;\nloop invariant x == 100 ==> x == 0;\nloop invariant x == 100 ==> x == 50;\nloop invariant x == 100 ==> x == 100;\nloop invariant x == 100 ==> x != 50;\nloop invariant x == 100 ==> x != 100;\nloop invariant x == 100 ==> x != 0;\nloop invariant x == 100 ==> x < 100;\nloop invariant x == 100 ==> x > 0;\nloop invariant x != 50 ==> x >= 0;\nloop invariant x != 50 ==> x <= 100;\nloop invariant x != 50 ==> x == 0;\nloop invariant x != 50 ==> x == 50;\nloop invariant x != 50 ==> x == 100;\nloop invariant x != 50 ==> x != 50;\nloop invariant x != 50 ==> x != 100;\nloop invariant x != 50 ==> x != 0;\nloop invariant x != 50 ==> x < 100;\nloop invariant x != 50 ==> x > 0;\nloop invariant x != 100 ==> x >= 0;\nloop invariant x != 100 ==> x <= 100;\nloop invariant x != 100 ==> x == 0;\nloop invariant x != 100 ==> x == 50;\nloop invariant x != 100 ==> x == 100;\nloop invariant x != 100 ==> x != 50;\nloop invariant x != 100 ==> x != 100;\nloop invariant x != 100 ==> x != 0;\nloop invariant x != 100 ==> x < 100;\nloop invariant x != 100 ==> x > 0;\nloop invariant x != 0 ==> x >= 0;\nloop invariant x != 0 ==> x <= 100;\nloop invariant x != 0 ==> x == 0;\nloop invariant x != 0 ==> x == 50;\nloop invariant x != 0 ==> x == 100;\nloop invariant x != 0 ==> x != 50;\nloop invariant x != 0 ==> x != 100;\nloop invariant x != 0 ==> x != 0;\nloop invariant x != 0 ==> x < 100;\nloop invariant x != 0 ==> x > 0;\nloop invariant x < 100 ==> x >= 0;\nloop invariant x < 100 ==> x <= 100;\nloop invariant x < 100 ==> x == 0;\nloop invariant x < 100 ==> x == 50;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant x >= 1;\nloop invariant x < 50 ==> x <= 49;\nloop invariant x >= 50 ==> x == 50;\nloop invariant x == 50 ==> x < 50 ==> x == 49;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main() {\n  int x = 0;\n  /*@\nloop invariant i1: 0 <= x <= 100;\n\nloop invariant i3: x < 50 ==> x <= 49;\n\nloop invariant i5: x == 50 ==> x < 50 ==> x == 49;\n*/\nwhile(x < 100) {\n    x++;\n    if(x == 50)\n      break;\n  }\n  {;\n//@ assert(!( x != 50 ));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant x == 50 ==> x >= 50;\nloop invariant x < 50 ==> x < 100;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main() {\n  int x = 0;\n  /*@\nloop invariant i1: 0 <= x <= 100;\nloop invariant i2: x == 50 ==> x >= 50;\nloop invariant i3: x < 50 ==> x < 100;\n*/\nwhile(x < 100) {\n    x++;\n    if(x == 50)\n      break;\n  }\n  {;\n//@ assert(!( x != 50 ));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 100;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main() {\n  int x = 0;\n  /*@\nloop invariant i1: 0 <= x <= 100;\n*/\nwhile(x < 100) {\n    x++;\n    if(x == 50)\n      break;\n  }\n  {;\n//@ assert(!( x != 50 ));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant x < 50 ==> x = 50;\nloop invariant x >= 50 ==> x != 50;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main() {\n  int x = 0;\n  /*@\nloop invariant i1: 0 <= x <= 100;\n\nloop invariant i3: x >= 50 ==> x != 50;\n*/\nwhile(x < 100) {\n    x++;\n    if(x == 50)\n      break;\n  }\n  {;\n//@ assert(!( x != 50 ));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant x < 100 ==> x == 50;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main() {\n  int x = 0;\n  /*@\nloop invariant i1: 0 <= x <= 100;\n\n*/\nwhile(x < 100) {\n    x++;\n    if(x == 50)\n      break;\n  }\n  {;\n//@ assert(!( x != 50 ));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= 100;\nloop invariant x < 50 ==> x == 50;\nloop invariant x >= 50 ==> x < 50;\nloop invariant !(x != 50);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main() {\n  int x = 0;\n  /*@\n\n\nloop invariant i3: x >= 50 ==> x < 50;\n\n*/\nwhile(x < 100) {\n    x++;\n    if(x == 50)\n      break;\n  }\n  {;\n//@ assert(!( x != 50 ));\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant (x == 50) ==> (x == 50);\nloop invariant x >= 50 ==> (x == 50);\nloop invariant x <= 50 ==> (x == 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main() {\n  int x = 0;\n  /*@\nloop invariant i1: 0 <= x <= 100;\nloop invariant i2: (x == 50) ==> (x == 50);\n\n\n*/\nwhile(x < 100) {\n    x++;\n    if(x == 50)\n      break;\n  }\n  {;\n//@ assert(!( x != 50 ));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant x == 50 ==> x == 50;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main() {\n  int x = 0;\n  /*@\nloop invariant i1: 0 <= x <= 100;\nloop invariant i2: x == 50 ==> x == 50;\n*/\nwhile(x < 100) {\n    x++;\n    if(x == 50)\n      break;\n  }\n  {;\n//@ assert(!( x != 50 ));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 100;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main() {\n  int x = 0;\n  /*@\nloop invariant i1: 0 <= x <= 100;\n*/\nwhile(x < 100) {\n    x++;\n    if(x == 50)\n      break;\n  }\n  {;\n//@ assert(!( x != 50 ));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant x >= 0;\nloop invariant x < 100;\nloop invariant x == 50 ==> x == 50;\nloop invariant x != 50 ==> x != 50;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main() {\n  int x = 0;\n  /*@\nloop invariant i1: x >= 0;\n\nloop invariant i3: x == 50 ==> x == 50;\nloop invariant i4: x != 50 ==> x != 50;\n*/\nwhile(x < 100) {\n    x++;\n    if(x == 50)\n      break;\n  }\n  {;\n//@ assert(!( x != 50 ));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x < 100;\nloop invariant (if x == 50 then x == 50 else x < 50);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main() {\n  int x = 0;\n  /*@\n\n\n*/\nwhile(x < 100) {\n    x++;\n    if(x == 50)\n      break;\n  }\n  {;\n//@ assert(!( x != 50 ));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant x % 2 == 0 ==> x >= 50;\nloop invariant x % 2 != 0 ==> x <= 49;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main() {\n  int x = 0;\n  /*@\nloop invariant i1: 0 <= x <= 100;\n\n\n*/\nwhile(x < 100) {\n    x++;\n    if(x == 50)\n      break;\n  }\n  {;\n//@ assert(!( x != 50 ));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant ((x == 50) ==> (x < 100));\nloop invariant ((x != 50) ==> (x < 50));\nloop invariant ((x != 50) ==> (x != 0));\nloop invariant ((x == 50) ==> (x != 50));\nloop invariant ((x < 50) ==> (x > 0));\nloop invariant ((x == 50) ==> (x == 50));\nloop invariant ((x != 50) ==> (x >= 0));\nloop invariant ((x == 50) ==> (x <= 50));\nloop invariant ((x < 50) ==> (x < 100));\nloop invariant ((x == 50) ==> (x > 0));\nloop invariant ((x != 50) ==> (x <= 100));\nloop invariant ((x == 50) ==> (x >= 0));\nloop invariant ((x != 50) ==> (x != 100));\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main() {\n  int x = 0;\n  /*@\nloop invariant i1: 0 <= x <= 100;\nloop invariant i2: ((x == 50) ==> (x < 100));\nloop invariant i3: ((x != 50) ==> (x < 50));\n\nloop invariant i5: ((x == 50) ==> (x != 50));\n\nloop invariant i7: ((x == 50) ==> (x == 50));\nloop invariant i8: ((x != 50) ==> (x >= 0));\nloop invariant i9: ((x == 50) ==> (x <= 50));\nloop invariant i10: ((x < 50) ==> (x < 100));\nloop invariant i11: ((x == 50) ==> (x > 0));\nloop invariant i12: ((x != 50) ==> (x <= 100));\nloop invariant i13: ((x == 50) ==> (x >= 0));\nloop invariant i14: ((x != 50) ==> (x != 100));\n*/\nwhile(x < 100) {\n    x++;\n    if(x == 50)\n      break;\n  }\n  {;\n//@ assert(!( x != 50 ));\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 100;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main() {\n  int x = 0;\n  /*@\nloop invariant i1: 0 <= x <= 100;\n*/\nwhile(x < 100) {\n    x++;\n    if(x == 50)\n      break;\n  }\n  {;\n//@ assert(!( x != 50 ));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 35,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant x >= 0;\nloop invariant x <= 100;\nloop invariant x == 0;\nloop invariant x == 50;\nloop invariant x == 100;\nloop invariant x != 50;\nloop invariant x != 100;\nloop invariant x != 0;\nloop invariant x < 100;\nloop invariant x > 0;\nloop invariant x == 0 ==> x >= 0;\nloop invariant x == 0 ==> x <= 100;\nloop invariant x == 0 ==> x == 0;\nloop invariant x == 0 ==> x == 50;\nloop invariant x == 0 ==> x == 100;\nloop invariant x == 0 ==> x != 50;\nloop invariant x == 0 ==> x != 100;\nloop invariant x == 0 ==> x != 0;\nloop invariant x == 0 ==> x < 100;\nloop invariant x == 0 ==> x > 0;\nloop invariant x == 50 ==> x >= 0;\nloop invariant x == 50 ==> x <= 100;\nloop invariant x == 50 ==> x == 0;\nloop invariant x == 50 ==> x == 50;\nloop invariant x == 50 ==> x == 100;\nloop invariant x == 50 ==> x != 50;\nloop invariant x == 50 ==> x != 100;\nloop invariant x == 50 ==> x != 0;\nloop invariant x == 50 ==> x < 100;\nloop invariant x == 50 ==> x > 0;\nloop invariant x == 100 ==> x >= 0;\nloop invariant x == 100 ==> x <= 100;\nloop invariant x == 100 ==> x == 0;\nloop invariant x == 100 ==> x == 50;\nloop invariant x == 100 ==> x == 100;\nloop invariant x == 100 ==> x != 50;\nloop invariant x == 100 ==> x != 100;\nloop invariant x == 100 ==> x != 0;\nloop invariant x == 100 ==> x < 100;\nloop invariant x == 100 ==> x > 0;\nloop invariant x != 50 ==> x >= 0;\nloop invariant x != 50 ==> x <= 100;\nloop invariant x != 50 ==> x == 0;\nloop invariant x != 50 ==> x == 50;\nloop invariant x != 50 ==> x == 100;\nloop invariant x != 50 ==> x != 50;\nloop invariant x != 50 ==> x != 100;\nloop invariant x != 50 ==> x != 0;\nloop invariant x != 50 ==> x < 100;\nloop invariant x != 50 ==> x > 0;\nloop invariant x != 100 ==> x >= 0;\nloop invariant x != 100 ==> x <= 100;\nloop invariant x != 100 ==> x == 0;\nloop invariant x != 100 ==> x == 50;\nloop invariant x != 100 ==> x == 100;\nloop invariant x != 100 ==> x != 50;\nloop invariant x != 100 ==> x != 100;\nloop invariant x != 100 ==> x != 0;\nloop invariant x != 100 ==> x < 100;\nloop invariant x != 100 ==> x > 0;\nloop invariant x != 0 ==> x >= 0;\nloop invariant x != 0 ==> x <= 100;\nloop invariant x != 0 ==> x == 0;\nloop invariant x != 0 ==> x == 50;\nloop invariant x != 0 ==> x == 100;\nloop invariant x != 0 ==> x != 50;\nloop invariant x != 0 ==> x != 100;\nloop invariant x != 0 ==> x != 0;\nloop invariant x != 0 ==> x < 100;\nloop invariant x != 0 ==> x > 0;\nloop invariant x < 100 ==> x >= 0;\nloop invariant x < 100 ==> x <= 100;\nloop invariant x < 100 ==> x == 0;\nloop invariant x < 100 ==> x == 50;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main() {\n  int x = 0;\n  /*@\nloop invariant i1: 0 <= x <= 100;\nloop invariant i2: x >= 0;\nloop invariant i3: x <= 100;\n\n\n\nloop invariant i7: x != 50;\n\n\n\n\nloop invariant i12: x == 0 ==> x >= 0;\nloop invariant i13: x == 0 ==> x <= 100;\nloop invariant i14: x == 0 ==> x == 0;\n\n\nloop invariant i17: x == 0 ==> x != 50;\nloop invariant i18: x == 0 ==> x != 100;\n\nloop invariant i20: x == 0 ==> x < 100;\n\nloop invariant i22: x == 50 ==> x >= 0;\nloop invariant i23: x == 50 ==> x <= 100;\nloop invariant i24: x == 50 ==> x == 0;\nloop invariant i25: x == 50 ==> x == 50;\nloop invariant i26: x == 50 ==> x == 100;\nloop invariant i27: x == 50 ==> x != 50;\nloop invariant i28: x == 50 ==> x != 100;\nloop invariant i29: x == 50 ==> x != 0;\nloop invariant i30: x == 50 ==> x < 100;\nloop invariant i31: x == 50 ==> x > 0;\nloop invariant i32: x == 100 ==> x >= 0;\nloop invariant i33: x == 100 ==> x <= 100;\n\n\nloop invariant i36: x == 100 ==> x == 100;\nloop invariant i37: x == 100 ==> x != 50;\n\nloop invariant i39: x == 100 ==> x != 0;\n\nloop invariant i41: x == 100 ==> x > 0;\nloop invariant i42: x != 50 ==> x >= 0;\nloop invariant i43: x != 50 ==> x <= 100;\n\n\n\nloop invariant i47: x != 50 ==> x != 50;\n\n\n\n\nloop invariant i52: x != 100 ==> x >= 0;\nloop invariant i53: x != 100 ==> x <= 100;\n\n\n\nloop invariant i57: x != 100 ==> x != 50;\nloop invariant i58: x != 100 ==> x != 100;\n\nloop invariant i60: x != 100 ==> x < 100;\n\nloop invariant i62: x != 0 ==> x >= 0;\nloop invariant i63: x != 0 ==> x <= 100;\n\n\n\nloop invariant i67: x != 0 ==> x != 50;\n\nloop invariant i69: x != 0 ==> x != 0;\n\nloop invariant i71: x != 0 ==> x > 0;\nloop invariant i72: x < 100 ==> x >= 0;\nloop invariant i73: x < 100 ==> x <= 100;\n\n\n*/\nwhile(x < 100) {\n    x++;\n    if(x == 50)\n      break;\n  }\n  {;\n//@ assert(!( x != 50 ));\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 18: Assignment operators not allowed in annotations.",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main() {\n  int x = 0;\n  /*@\nloop invariant i1: 0 <= x <= 100;\nloop invariant i2: x >= 1;\nloop invariant i3: x < 50 ==> x <= 49;\nloop invariant i4: x >= 50 ==> x == 50;\nloop invariant i5: x == 50 ==> x < 50 ==> x == 49;\nloop invariant i6: x == 50 ==> x >= 50;\nloop invariant i7: x < 50 ==> x < 100;\nloop invariant i8: x < 50 ==> x = 50;\nloop invariant i9: x >= 50 ==> x != 50;\nloop invariant i10: x < 100 ==> x == 50;\nloop invariant i11: 1 <= x <= 100;\nloop invariant i12: x < 50 ==> x == 50;\nloop invariant i13: x >= 50 ==> x < 50;\nloop invariant i14: !(x != 50);\nloop invariant i15: (x == 50) ==> (x == 50);\nloop invariant i16: x >= 50 ==> (x == 50);\nloop invariant i17: x <= 50 ==> (x == 0);\nloop invariant i18: x == 50 ==> x == 50;\nloop invariant i19: x >= 0;\nloop invariant i20: x < 100;\nloop invariant i21: x != 50 ==> x != 50;\nloop invariant i22: 0 <= x < 100;\nloop invariant i23: (if x == 50 then x == 50 else x < 50);\nloop invariant i24: x % 2 == 0 ==> x >= 50;\nloop invariant i25: x % 2 != 0 ==> x <= 49;\nloop invariant i26: ((x == 50) ==> (x < 100));\nloop invariant i27: ((x != 50) ==> (x < 50));\nloop invariant i28: ((x != 50) ==> (x != 0));\nloop invariant i29: ((x == 50) ==> (x != 50));\nloop invariant i30: ((x < 50) ==> (x > 0));\nloop invariant i31: ((x == 50) ==> (x == 50));\nloop invariant i32: ((x != 50) ==> (x >= 0));\nloop invariant i33: ((x == 50) ==> (x <= 50));\nloop invariant i34: ((x < 50) ==> (x < 100));\nloop invariant i35: ((x == 50) ==> (x > 0));\nloop invariant i36: ((x != 50) ==> (x <= 100));\nloop invariant i37: ((x == 50) ==> (x >= 0));\nloop invariant i38: ((x != 50) ==> (x != 100));\nloop invariant i39: x <= 100;\nloop invariant i40: x == 0;\nloop invariant i41: x == 50;\nloop invariant i42: x == 100;\nloop invariant i43: x != 50;\nloop invariant i44: x != 100;\nloop invariant i45: x != 0;\nloop invariant i46: x > 0;\nloop invariant i47: x == 0 ==> x >= 0;\nloop invariant i48: x == 0 ==> x <= 100;\nloop invariant i49: x == 0 ==> x == 0;\nloop invariant i50: x == 0 ==> x == 50;\nloop invariant i51: x == 0 ==> x == 100;\nloop invariant i52: x == 0 ==> x != 50;\nloop invariant i53: x == 0 ==> x != 100;\nloop invariant i54: x == 0 ==> x != 0;\nloop invariant i55: x == 0 ==> x < 100;\nloop invariant i56: x == 0 ==> x > 0;\nloop invariant i57: x == 50 ==> x >= 0;\nloop invariant i58: x == 50 ==> x <= 100;\nloop invariant i59: x == 50 ==> x == 0;\nloop invariant i60: x == 50 ==> x == 100;\nloop invariant i61: x == 50 ==> x != 50;\nloop invariant i62: x == 50 ==> x != 100;\nloop invariant i63: x == 50 ==> x != 0;\nloop invariant i64: x == 50 ==> x < 100;\nloop invariant i65: x == 50 ==> x > 0;\nloop invariant i66: x == 100 ==> x >= 0;\nloop invariant i67: x == 100 ==> x <= 100;\nloop invariant i68: x == 100 ==> x == 0;\nloop invariant i69: x == 100 ==> x == 50;\nloop invariant i70: x == 100 ==> x == 100;\nloop invariant i71: x == 100 ==> x != 50;\nloop invariant i72: x == 100 ==> x != 100;\nloop invariant i73: x == 100 ==> x != 0;\nloop invariant i74: x == 100 ==> x < 100;\nloop invariant i75: x == 100 ==> x > 0;\nloop invariant i76: x != 50 ==> x >= 0;\nloop invariant i77: x != 50 ==> x <= 100;\nloop invariant i78: x != 50 ==> x == 0;\nloop invariant i79: x != 50 ==> x == 50;\nloop invariant i80: x != 50 ==> x == 100;\nloop invariant i81: x != 50 ==> x != 100;\nloop invariant i82: x != 50 ==> x != 0;\nloop invariant i83: x != 50 ==> x < 100;\nloop invariant i84: x != 50 ==> x > 0;\nloop invariant i85: x != 100 ==> x >= 0;\nloop invariant i86: x != 100 ==> x <= 100;\nloop invariant i87: x != 100 ==> x == 0;\nloop invariant i88: x != 100 ==> x == 50;\nloop invariant i89: x != 100 ==> x == 100;\nloop invariant i90: x != 100 ==> x != 50;\nloop invariant i91: x != 100 ==> x != 100;\nloop invariant i92: x != 100 ==> x != 0;\nloop invariant i93: x != 100 ==> x < 100;\nloop invariant i94: x != 100 ==> x > 0;\nloop invariant i95: x != 0 ==> x >= 0;\nloop invariant i96: x != 0 ==> x <= 100;\nloop invariant i97: x != 0 ==> x == 0;\nloop invariant i98: x != 0 ==> x == 50;\nloop invariant i99: x != 0 ==> x == 100;\nloop invariant i100: x != 0 ==> x != 50;\nloop invariant i101: x != 0 ==> x != 100;\nloop invariant i102: x != 0 ==> x != 0;\nloop invariant i103: x != 0 ==> x < 100;\nloop invariant i104: x != 0 ==> x > 0;\nloop invariant i105: x < 100 ==> x >= 0;\nloop invariant i106: x < 100 ==> x <= 100;\nloop invariant i107: x < 100 ==> x == 0;\n*/\nwhile(x < 100) {\n    x++;\n    if(x == 50)\n      break;\n  }\n  {;\n//@ assert(!( x != 50 ));\n}\n\n}",
        "combined_annotation_num_solver_calls": 35,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main() {\n  int x = 0;\n  /*@\nloop invariant i1: 0 <= x <= 100;\n\nloop invariant i3: x < 50 ==> x <= 49;\nloop invariant i4: x >= 50 ==> x == 50;\nloop invariant i5: x == 50 ==> x < 50 ==> x == 49;\nloop invariant i6: x == 50 ==> x >= 50;\nloop invariant i7: x < 50 ==> x < 100;\n\nloop invariant i9: x >= 50 ==> x != 50;\n\n\n\nloop invariant i13: x >= 50 ==> x < 50;\n\nloop invariant i15: (x == 50) ==> (x == 50);\nloop invariant i16: x >= 50 ==> (x == 50);\n\nloop invariant i18: x == 50 ==> x == 50;\nloop invariant i19: x >= 0;\nloop invariant i20: x < 100;\nloop invariant i21: x != 50 ==> x != 50;\nloop invariant i22: 0 <= x < 100;\n\n\nloop invariant i25: x % 2 != 0 ==> x <= 49;\nloop invariant i26: ((x == 50) ==> (x < 100));\nloop invariant i27: ((x != 50) ==> (x < 50));\n\nloop invariant i29: ((x == 50) ==> (x != 50));\n\nloop invariant i31: ((x == 50) ==> (x == 50));\nloop invariant i32: ((x != 50) ==> (x >= 0));\nloop invariant i33: ((x == 50) ==> (x <= 50));\nloop invariant i34: ((x < 50) ==> (x < 100));\nloop invariant i35: ((x == 50) ==> (x > 0));\nloop invariant i36: ((x != 50) ==> (x <= 100));\nloop invariant i37: ((x == 50) ==> (x >= 0));\nloop invariant i38: ((x != 50) ==> (x != 100));\nloop invariant i39: x <= 100;\n\n\n\nloop invariant i43: x != 50;\nloop invariant i44: x != 100;\n\n\nloop invariant i47: x == 0 ==> x >= 0;\nloop invariant i48: x == 0 ==> x <= 100;\nloop invariant i49: x == 0 ==> x == 0;\n\n\nloop invariant i52: x == 0 ==> x != 50;\nloop invariant i53: x == 0 ==> x != 100;\n\nloop invariant i55: x == 0 ==> x < 100;\n\nloop invariant i57: x == 50 ==> x >= 0;\nloop invariant i58: x == 50 ==> x <= 100;\nloop invariant i59: x == 50 ==> x == 0;\nloop invariant i60: x == 50 ==> x == 100;\nloop invariant i61: x == 50 ==> x != 50;\nloop invariant i62: x == 50 ==> x != 100;\nloop invariant i63: x == 50 ==> x != 0;\nloop invariant i64: x == 50 ==> x < 100;\nloop invariant i65: x == 50 ==> x > 0;\nloop invariant i66: x == 100 ==> x >= 0;\nloop invariant i67: x == 100 ==> x <= 100;\nloop invariant i68: x == 100 ==> x == 0;\nloop invariant i69: x == 100 ==> x == 50;\nloop invariant i70: x == 100 ==> x == 100;\nloop invariant i71: x == 100 ==> x != 50;\nloop invariant i72: x == 100 ==> x != 100;\nloop invariant i73: x == 100 ==> x != 0;\nloop invariant i74: x == 100 ==> x < 100;\nloop invariant i75: x == 100 ==> x > 0;\nloop invariant i76: x != 50 ==> x >= 0;\nloop invariant i77: x != 50 ==> x <= 100;\n\n\n\nloop invariant i81: x != 50 ==> x != 100;\n\nloop invariant i83: x != 50 ==> x < 100;\n\nloop invariant i85: x != 100 ==> x >= 0;\nloop invariant i86: x != 100 ==> x <= 100;\n\n\n\nloop invariant i90: x != 100 ==> x != 50;\nloop invariant i91: x != 100 ==> x != 100;\n\nloop invariant i93: x != 100 ==> x < 100;\n\nloop invariant i95: x != 0 ==> x >= 0;\nloop invariant i96: x != 0 ==> x <= 100;\n\n\n\nloop invariant i100: x != 0 ==> x != 50;\nloop invariant i101: x != 0 ==> x != 100;\nloop invariant i102: x != 0 ==> x != 0;\nloop invariant i103: x != 0 ==> x < 100;\nloop invariant i104: x != 0 ==> x > 0;\nloop invariant i105: x < 100 ==> x >= 0;\nloop invariant i106: x < 100 ==> x <= 100;\n\n*/\nwhile(x < 100) {\n    x++;\n    if(x == 50)\n      break;\n  }\n  {;\n//@ assert(!( x != 50 ));\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c"
        ],
        "failure": [],
        "skipped": [],
        "total": 19,
        "success_count": 19,
        "failure_count": 0,
        "success_rate": 1.0
    }
}