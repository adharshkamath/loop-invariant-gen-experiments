{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nvoid main() {\n    int x = 1;\n    int y = 0;\n    while (y < 1000 && unknown_int()) {\n\tx = x + y;\n\ty = y + 1;\n    }\n    {;\n//@ assert(x >= y);\n}\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= y <= 1000;\nloop invariant x >= y;\nloop invariant x >= 1;\nloop invariant x <= 10000;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 1000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 1000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant (y < 1000 ==> unknown_int());\nloop invariant (y >= 1000 ==> !unknown_int());\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= 1000;\nloop invariant 0 <= y <= 1000;\nloop invariant y >= x - 1;\nloop invariant unknown_int() ==> (y < 1000);\nloop invariant y == 0 ==> unknown_int() == 1;\nloop invariant y == 1000 ==> unknown_int() == 0;\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 1000;\nloop invariant 0 <= y <= 1000;\nloop invariant x >= y;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 1000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant unknown_int ==> y < 1000;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 1000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 1000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant y < 1000 ==> unknown_int() == 1;\nloop invariant x >= y ==> unknown_int() == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 1000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= 0;\nloop invariant x <= 1000000;\nloop invariant x >= y;\nloop invariant x >= 1;\nloop invariant x <= 1000;\nloop invariant y >= 0;\nloop invariant y <= 1000;\nloop invariant x >= (y * (y + 1) / 2);\nloop invariant x >= (1 + (y - 1) * y / 2) ==> y < 1000 ==> unknown_int();\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 1000 && 0 <= x <= 1000 && y < 1000 && unknown_int() == true;\nloop invariant x <= y + 1 && y <= 1000 && unknown_int() == true;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 1000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= y;\nloop invariant (unknown_int() ==> x >= y);\nloop invariant (unknown_int() ==> y >= 0);\nloop invariant (unknown_int() ==> y <= 1000);\nloop invariant (unknown_int() ==> y <= 10000);\nloop invariant (unknown_int() ==> y <= 100000);\nloop invariant (unknown_int() ==> y <= 1000000);\nloop invariant (unknown_int() ==> y <= 10000000);\nloop invariant (unknown_int() ==> y <= 100000000);\nloop invariant (unknown_int() ==> y <= 1000000000);\nloop invariant (unknown_int() ==> y <= 10000000000);\nloop invariant (unknown_int() ==> y <= 100000000000);\nloop invariant (unknown_int() ==> y <= 1000000000000);\nloop invariant (unknown_int() ==> y <= 10000000000000);\nloop invariant (unknown_int() ==> y <= 100000000000000);\nloop invariant (unknown_int() ==> y <= 1000000000000000);\nloop invariant (unknown_int() ==> y <= 10000000000000000);\nloop invariant (unknown_int() ==> y <= 100000000000000000);\nloop invariant (unknown_int() ==> y <= 1000000000000000000);\nloop invariant (unknown_int() ==> y <= 10000000000000000000);\nloop invariant (unknown_int() ==> y <= 100000000000000000000);\nloop invariant (unknown_int() ==> y <= 1000000000000000000000);\nloop invariant (unknown_int() ==> y <= 10000000000000000000000);\nloop invariant (unknown_int() ==> y <= 100000000000000000000000);\nloop invariant (unknown_int() ==> y <= 1000000000000000000000000);\nloop invariant (unknown_int() ==> y <= 10000000000000000000000000);\nloop invariant (unknown_int() ==> y <= 100000000000000000000000000);\nloop invariant (unknown_int() ==> y <= 1000000000000000000000000000);\nloop invariant (unknown_int() ==> y <= 10000000000000000000000000000);\nloop invariant (unknown_int() ==> y <= 100000000000000000000000000000);\nloop invariant (unknown_int() ==> y <= 1000000000000000000000000000000);\nloop invariant (unknown_int() ==> y <= 10000000000000000000000000000000);\nloop invariant (unknown_int() ==> y <= 100000000000000000000000000000000);\nloop invariant (unknown_int() ==> y <= 1000000000000000000000000000000000);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 1000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x <= (1 + (1000 - 1) * 1000 / 2 + 1000 * (y - 1));\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 1000;\nloop invariant x >= 0;\nloop invariant x >= y;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant 0 <= y <= 1000 ==> x >= y && x >= (1 + (y - 1) * y / 2);\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 1000;\nloop invariant x >= y;\nloop invariant x >= 1;\nloop invariant x <= 10000;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nvoid main() {\n    int x = 1;\n    int y = 0;\n    /*@\nloop invariant i1: 0 <= y <= 1000;\nloop invariant i2: x >= y;\nloop invariant i3: x >= 1;\n\n*/\nwhile (y < 1000 && unknown_int()) {\n\tx = x + y;\n\ty = y + 1;\n    }\n    {;\n//@ assert(x >= y);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 1000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nvoid main() {\n    int x = 1;\n    int y = 0;\n    /*@\nloop invariant i1: 0 <= y <= 1000;\nloop invariant i2: x >= (1 + (y - 1) * y / 2);\n*/\nwhile (y < 1000 && unknown_int()) {\n\tx = x + y;\n\ty = y + 1;\n    }\n    {;\n//@ assert(x >= y);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 1000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant (y < 1000 ==> unknown_int());\nloop invariant (y >= 1000 ==> !unknown_int());\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nvoid main() {\n    int x = 1;\n    int y = 0;\n    /*@\nloop invariant i1: 0 <= y <= 1000;\nloop invariant i2: x >= (1 + (y - 1) * y / 2);\n\n\n*/\nwhile (y < 1000 && unknown_int()) {\n\tx = x + y;\n\ty = y + 1;\n    }\n    {;\n//@ assert(x >= y);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= 1000;\nloop invariant 0 <= y <= 1000;\nloop invariant y >= x - 1;\nloop invariant unknown_int() ==> (y < 1000);\nloop invariant y == 0 ==> unknown_int() == 1;\nloop invariant y == 1000 ==> unknown_int() == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nvoid main() {\n    int x = 1;\n    int y = 0;\n    /*@\n\nloop invariant i2: 0 <= y <= 1000;\n\n\n\n\n*/\nwhile (y < 1000 && unknown_int()) {\n\tx = x + y;\n\ty = y + 1;\n    }\n    {;\n//@ assert(x >= y);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nvoid main() {\n    int x = 1;\n    int y = 0;\n    /*@\n\n*/\nwhile (y < 1000 && unknown_int()) {\n\tx = x + y;\n\ty = y + 1;\n    }\n    {;\n//@ assert(x >= y);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 1000;\nloop invariant 0 <= y <= 1000;\nloop invariant x >= y;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nvoid main() {\n    int x = 1;\n    int y = 0;\n    /*@\n\nloop invariant i2: 0 <= y <= 1000;\nloop invariant i3: x >= y;\nloop invariant i4: x >= (1 + (y - 1) * y / 2);\n*/\nwhile (y < 1000 && unknown_int()) {\n\tx = x + y;\n\ty = y + 1;\n    }\n    {;\n//@ assert(x >= y);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 1000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant unknown_int ==> y < 1000;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nvoid main() {\n    int x = 1;\n    int y = 0;\n    /*@\nloop invariant i1: 0 <= y <= 1000;\nloop invariant i2: x >= (1 + (y - 1) * y / 2);\n\n*/\nwhile (y < 1000 && unknown_int()) {\n\tx = x + y;\n\ty = y + 1;\n    }\n    {;\n//@ assert(x >= y);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 1000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nvoid main() {\n    int x = 1;\n    int y = 0;\n    /*@\nloop invariant i1: 0 <= y <= 1000;\nloop invariant i2: x >= (1 + (y - 1) * y / 2);\n*/\nwhile (y < 1000 && unknown_int()) {\n\tx = x + y;\n\ty = y + 1;\n    }\n    {;\n//@ assert(x >= y);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 1000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant y < 1000 ==> unknown_int() == 1;\nloop invariant x >= y ==> unknown_int() == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nvoid main() {\n    int x = 1;\n    int y = 0;\n    /*@\nloop invariant i1: 0 <= y <= 1000;\nloop invariant i2: x >= (1 + (y - 1) * y / 2);\n\n\n*/\nwhile (y < 1000 && unknown_int()) {\n\tx = x + y;\n\ty = y + 1;\n    }\n    {;\n//@ assert(x >= y);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 1000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= 0;\nloop invariant x <= 1000000;\nloop invariant x >= y;\nloop invariant x >= 1;\nloop invariant x <= 1000;\nloop invariant y >= 0;\nloop invariant y <= 1000;\nloop invariant x >= (y * (y + 1) / 2);\nloop invariant x >= (1 + (y - 1) * y / 2) ==> y < 1000 ==> unknown_int();\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nvoid main() {\n    int x = 1;\n    int y = 0;\n    /*@\nloop invariant i1: 0 <= y <= 1000;\nloop invariant i2: x >= (1 + (y - 1) * y / 2);\nloop invariant i3: x >= 0;\n\nloop invariant i5: x >= y;\nloop invariant i6: x >= 1;\n\nloop invariant i8: y >= 0;\nloop invariant i9: y <= 1000;\n\n\n*/\nwhile (y < 1000 && unknown_int()) {\n\tx = x + y;\n\ty = y + 1;\n    }\n    {;\n//@ assert(x >= y);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 1000 && 0 <= x <= 1000 && y < 1000 && unknown_int() == true;\nloop invariant x <= y + 1 && y <= 1000 && unknown_int() == true;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nvoid main() {\n    int x = 1;\n    int y = 0;\n    /*@\n\n\n*/\nwhile (y < 1000 && unknown_int()) {\n\tx = x + y;\n\ty = y + 1;\n    }\n    {;\n//@ assert(x >= y);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 33,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 1000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= y;\nloop invariant (unknown_int() ==> x >= y);\nloop invariant (unknown_int() ==> y >= 0);\nloop invariant (unknown_int() ==> y <= 1000);\nloop invariant (unknown_int() ==> y <= 10000);\nloop invariant (unknown_int() ==> y <= 100000);\nloop invariant (unknown_int() ==> y <= 1000000);\nloop invariant (unknown_int() ==> y <= 10000000);\nloop invariant (unknown_int() ==> y <= 100000000);\nloop invariant (unknown_int() ==> y <= 1000000000);\nloop invariant (unknown_int() ==> y <= 10000000000);\nloop invariant (unknown_int() ==> y <= 100000000000);\nloop invariant (unknown_int() ==> y <= 1000000000000);\nloop invariant (unknown_int() ==> y <= 10000000000000);\nloop invariant (unknown_int() ==> y <= 100000000000000);\nloop invariant (unknown_int() ==> y <= 1000000000000000);\nloop invariant (unknown_int() ==> y <= 10000000000000000);\nloop invariant (unknown_int() ==> y <= 100000000000000000);\nloop invariant (unknown_int() ==> y <= 1000000000000000000);\nloop invariant (unknown_int() ==> y <= 10000000000000000000);\nloop invariant (unknown_int() ==> y <= 100000000000000000000);\nloop invariant (unknown_int() ==> y <= 1000000000000000000000);\nloop invariant (unknown_int() ==> y <= 10000000000000000000000);\nloop invariant (unknown_int() ==> y <= 100000000000000000000000);\nloop invariant (unknown_int() ==> y <= 1000000000000000000000000);\nloop invariant (unknown_int() ==> y <= 10000000000000000000000000);\nloop invariant (unknown_int() ==> y <= 100000000000000000000000000);\nloop invariant (unknown_int() ==> y <= 1000000000000000000000000000);\nloop invariant (unknown_int() ==> y <= 10000000000000000000000000000);\nloop invariant (unknown_int() ==> y <= 100000000000000000000000000000);\nloop invariant (unknown_int() ==> y <= 1000000000000000000000000000000);\nloop invariant (unknown_int() ==> y <= 10000000000000000000000000000000);\nloop invariant (unknown_int() ==> y <= 100000000000000000000000000000000);\nloop invariant (unknown_int() ==> y <= 1000000000000000000000000000000000);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nvoid main() {\n    int x = 1;\n    int y = 0;\n    /*@\nloop invariant i1: 0 <= y <= 1000;\nloop invariant i2: x >= (1 + (y - 1) * y / 2);\nloop invariant i3: x >= y;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (y < 1000 && unknown_int()) {\n\tx = x + y;\n\ty = y + 1;\n    }\n    {;\n//@ assert(x >= y);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 1000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x <= (1 + (1000 - 1) * 1000 / 2 + 1000 * (y - 1));\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nvoid main() {\n    int x = 1;\n    int y = 0;\n    /*@\nloop invariant i1: 0 <= y <= 1000;\nloop invariant i2: x >= (1 + (y - 1) * y / 2);\nloop invariant i3: x <= (1 + (1000 - 1) * 1000 / 2 + 1000 * (y - 1));\n*/\nwhile (y < 1000 && unknown_int()) {\n\tx = x + y;\n\ty = y + 1;\n    }\n    {;\n//@ assert(x >= y);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nvoid main() {\n    int x = 1;\n    int y = 0;\n    /*@\n\n*/\nwhile (y < 1000 && unknown_int()) {\n\tx = x + y;\n\ty = y + 1;\n    }\n    {;\n//@ assert(x >= y);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 1000;\nloop invariant x >= 0;\nloop invariant x >= y;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant 0 <= y <= 1000 ==> x >= y && x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nvoid main() {\n    int x = 1;\n    int y = 0;\n    /*@\nloop invariant i1: 0 <= y <= 1000;\nloop invariant i2: x >= 0;\nloop invariant i3: x >= y;\nloop invariant i4: x >= (1 + (y - 1) * y / 2);\nloop invariant i5: 0 <= y <= 1000 ==> x >= y && x >= (1 + (y - 1) * y / 2);\n*/\nwhile (y < 1000 && unknown_int()) {\n\tx = x + y;\n\ty = y + 1;\n    }\n    {;\n//@ assert(x >= y);\n}\n\n}",
                "checker_output_after_prune": true
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 18: unexpected token ')'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nvoid main() {\n    int x = 1;\n    int y = 0;\n    /*@\nloop invariant i1: 0 <= y <= 1000;\nloop invariant i2: x >= y;\nloop invariant i3: x >= 1;\nloop invariant i4: x <= 10000;\nloop invariant i5: x >= (1 + (y - 1) * y / 2);\nloop invariant i6: (y < 1000 ==> unknown_int());\nloop invariant i7: (y >= 1000 ==> !unknown_int());\nloop invariant i8: 1 <= x <= 1000;\nloop invariant i9: y >= x - 1;\nloop invariant i10: unknown_int() ==> (y < 1000);\nloop invariant i11: y == 0 ==> unknown_int() == 1;\nloop invariant i12: y == 1000 ==> unknown_int() == 0;\nloop invariant i13: 0 <= x <= 1000;\nloop invariant i14: unknown_int ==> y < 1000;\nloop invariant i15: y < 1000 ==> unknown_int() == 1;\nloop invariant i16: x >= y ==> unknown_int() == 0;\nloop invariant i17: x >= 0;\nloop invariant i18: x <= 1000000;\nloop invariant i19: x <= 1000;\nloop invariant i20: y >= 0;\nloop invariant i21: y <= 1000;\nloop invariant i22: x >= (y * (y + 1) / 2);\nloop invariant i23: x >= (1 + (y - 1) * y / 2) ==> y < 1000 ==> unknown_int();\nloop invariant i24: 0 <= y <= 1000 && 0 <= x <= 1000 && y < 1000 && unknown_int() == true;\nloop invariant i25: x <= y + 1 && y <= 1000 && unknown_int() == true;\nloop invariant i26: (unknown_int() ==> x >= y);\nloop invariant i27: (unknown_int() ==> y >= 0);\nloop invariant i28: (unknown_int() ==> y <= 1000);\nloop invariant i29: (unknown_int() ==> y <= 10000);\nloop invariant i30: (unknown_int() ==> y <= 100000);\nloop invariant i31: (unknown_int() ==> y <= 1000000);\nloop invariant i32: (unknown_int() ==> y <= 10000000);\nloop invariant i33: (unknown_int() ==> y <= 100000000);\nloop invariant i34: (unknown_int() ==> y <= 1000000000);\nloop invariant i35: (unknown_int() ==> y <= 10000000000);\nloop invariant i36: (unknown_int() ==> y <= 100000000000);\nloop invariant i37: (unknown_int() ==> y <= 1000000000000);\nloop invariant i38: (unknown_int() ==> y <= 10000000000000);\nloop invariant i39: (unknown_int() ==> y <= 100000000000000);\nloop invariant i40: (unknown_int() ==> y <= 1000000000000000);\nloop invariant i41: (unknown_int() ==> y <= 10000000000000000);\nloop invariant i42: (unknown_int() ==> y <= 100000000000000000);\nloop invariant i43: (unknown_int() ==> y <= 1000000000000000000);\nloop invariant i44: (unknown_int() ==> y <= 10000000000000000000);\nloop invariant i45: (unknown_int() ==> y <= 100000000000000000000);\nloop invariant i46: (unknown_int() ==> y <= 1000000000000000000000);\nloop invariant i47: (unknown_int() ==> y <= 10000000000000000000000);\nloop invariant i48: (unknown_int() ==> y <= 100000000000000000000000);\nloop invariant i49: (unknown_int() ==> y <= 1000000000000000000000000);\nloop invariant i50: (unknown_int() ==> y <= 10000000000000000000000000);\nloop invariant i51: (unknown_int() ==> y <= 100000000000000000000000000);\nloop invariant i52: (unknown_int() ==> y <= 1000000000000000000000000000);\nloop invariant i53: (unknown_int() ==> y <= 10000000000000000000000000000);\nloop invariant i54: (unknown_int() ==> y <= 100000000000000000000000000000);\nloop invariant i55: (unknown_int() ==> y <= 1000000000000000000000000000000);\nloop invariant i56: (unknown_int() ==> y <= 10000000000000000000000000000000);\nloop invariant i57: (unknown_int() ==> y <= 100000000000000000000000000000000);\nloop invariant i58: (unknown_int() ==> y <= 1000000000000000000000000000000000);\nloop invariant i59: x <= (1 + (1000 - 1) * 1000 / 2 + 1000 * (y - 1));\nloop invariant i60: 0 <= y <= 1000 ==> x >= y && x >= (1 + (y - 1) * y / 2);\n*/\nwhile (y < 1000 && unknown_int()) {\n\tx = x + y;\n\ty = y + 1;\n    }\n    {;\n//@ assert(x >= y);\n}\n\n}",
        "combined_annotation_num_solver_calls": 50,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nvoid main() {\n    int x = 1;\n    int y = 0;\n    /*@\nloop invariant i1: 0 <= y <= 1000;\nloop invariant i2: x >= y;\nloop invariant i3: x >= 1;\n\nloop invariant i5: x >= (1 + (y - 1) * y / 2);\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i17: x >= 0;\n\n\nloop invariant i20: y >= 0;\nloop invariant i21: y <= 1000;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i59: x <= (1 + (1000 - 1) * 1000 / 2 + 1000 * (y - 1));\nloop invariant i60: 0 <= y <= 1000 ==> x >= y && x >= (1 + (y - 1) * y / 2);\n*/\nwhile (y < 1000 && unknown_int()) {\n\tx = x + y;\n\ty = y + 1;\n    }\n    {;\n//@ assert(x >= y);\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/split.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c"
        ],
        "skipped": [],
        "total": 70,
        "success_count": 60,
        "failure_count": 10,
        "success_rate": 0.8571428571428571
    }
}