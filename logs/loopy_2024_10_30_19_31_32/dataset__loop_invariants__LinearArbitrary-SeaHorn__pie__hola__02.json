{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/02.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown2();\n\nint main()\n{\n\tint i = 1;\n\tint j = 0;\n\tint z = i-j;\n\tint x = 0;\n\tint y = 0;\n\tint w = 0;\n\n\twhile(unknown2()) \n\t{\n\t\tz+=x+y+w;\n\t\ty++;\n\t\tif(z%2==1) \n\t\t  x++;\n\t\tw+=2; \n\t}\n\n\t{;\n//@ assert(x==y);\n}\n\n}",
        "success": false,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant 0 <= z <= x + y + w;\nloop invariant 0 <= w <= 2 * y;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= 2;\nloop invariant 0 <= j <= 1;\nloop invariant z >= 1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant w >= 0;\nloop invariant x <= y;\nloop invariant x <= z/2;\nloop invariant y <= z/2;\nloop invariant w <= z;\nloop invariant z >= (1 + (w - 1) * w / 2);\nloop invariant z >= (1 + (x - 1) * x / 2);\nloop invariant z >= (1 + (y - 1) * y / 2);\nloop invariant z >= (1 + (x - 1) * x / 2) + (1 + (y - 1) * y / 2);\nloop invariant z >= (1 + (x - 1) * x / 2) + (1 + (y - 1) * y / 2) + (1 + (w - 1) * w / 2);\nloop invariant z >= (1 + (x - 1) * x / 2) + (1 + (y - 1) * y / 2) + (1 + (w - 1) * w / 2) + (1 + (z - 1) * z / 2);\nloop invariant z >= (1 + (x - 1) * x / 2) + (1 + (y - 1) * y / 2) + (1 + (w - 1) * w / 2) + (1 + (z - 1) * z / 2) + (1 + (i - 1) * i / 2);\nloop invariant z >= (1 + (x - 1) * x / 2) + (1 + (y - 1) * y / 2) + (1 + (w - 1) * w / 2) + (1 + (z - 1) * z / 2) + (1 + (i - 1) * i / 2) + (1 + (j - 1) * j / 2);\nloop invariant z >= (1 + (x - 1) * x / 2) + (1 + (y - 1) * y / 2) + (1 + (w - 1) * w / 2) + (1 + (z - 1) * z / 2) + (1 + (i - 1) * i / 2) + (1 + (j - 1) * j / 2) + (1 + (z - 1) * z / 2);\nloop invariant z >= (1 + (x - 1) * x / 2) + (1 + (y - 1) * y / 2) + (1 + (w - 1) * w / 2) + (1 + (z - 1) * z / 2) + (1 + (i - 1) * i / 2) + (1 + (j - 1) * j / 2) + (1 + (z - 1) * z / 2) + (1 + (x - 1) * x / 2);\nloop invariant z >= (1 + (x - 1) * x / 2) + (1 + (y - 1) * y / 2) + (1 + (w - 1) * w / 2) + (1 + (z - 1) * z / 2) + (1 + (i - 1) * i / 2) + (1 + (j - 1) * j / 2) + (1 + (z - 1) * z / 2) + (1 + (x - 1) * x / 2) + (1 + (y - 1) * y / 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 1;\nloop invariant 0 <= j <= 1;\nloop invariant 0 <= z <= 1;\nloop invariant 0 <= x <= 1;\nloop invariant 0 <= y <= 1;\nloop invariant 0 <= w <= 2;\nloop invariant i - j + x + y + w = z;\nloop invariant i = 1;\nloop invariant j = 0;\nloop invariant x = 0;\nloop invariant y = 0;\nloop invariant w = 0;\nloop invariant z = 1;\nloop invariant x <= y;\nloop invariant z <= y;\nloop invariant z <= x;\nloop invariant z <= x + y;\nloop invariant z <= x + y + w;\nloop invariant z <= 2 * y;\nloop invariant z <= 2 * y + w;\nloop invariant x + y + w <= z;\nloop invariant z <= x + y + w;\nloop invariant z <= 2 * y + w;\nloop invariant z <= 2 * (x + y);\nloop invariant z <= 2 * (x + y + w);\nloop invariant x + y <= z;\nloop invariant x + y <= x + y + w;\nloop invariant x + y <= 2 * y;\nloop invariant x + y <= 2 * y + w;\nloop invariant x + y <= 2 * (x + y);\nloop invariant x + y <= 2 * (x + y + w);\nloop invariant w <= 2;\nloop invariant x + y + w <= z;\nloop invariant z <= x + y + w;\nloop invariant x + y + w <= 2 * y;\nloop invariant x + y + w <= 2 * y + w;\nloop invariant x + y + w <= 2 * (x + y);\nloop invariant x + y + w <= 2 * (x + y + w);\nloop invariant x <= y;\nloop invariant x <= z;\nloop invariant x <= x + y;\nloop invariant x <= x + y + w;\nloop invariant x <= 2 * y;\nloop invariant x <= 2 * y + w;\nloop invariant x <= 2 * (x + y);\nloop invariant x <= 2 * (x + y + w);\nloop invariant y <= z;\nloop invariant y <= x + y;\nloop invariant y <= x + y + w;\nloop invariant y <= 2 * y;\nloop invariant y <= 2 * y + w;\nloop invariant y <= 2 * (x + y);\nloop invariant y <= 2 * (x + y + w);\nloop invariant w <= z;\nloop invariant w <= x + y + w;\nloop invariant w <= 2 * y;\nloop invariant w <= 2 * y + w;\nloop invariant w <= 2 * (x + y);\nloop invariant w <= 2 * (x + y + w);\nloop invariant x + y <= 2 * y;\nloop invariant x + y <= 2 * y + w;\nloop invariant x + y <= 2 * (x + y);\nloop invariant x + y <= 2 * (x + y + w);\nloop invariant x <= 2 * y;\nloop invariant x <= 2 * y + w;\nloop invariant x <= 2 * (x + y);\nloop invariant x <= 2 * (x + y + w);\nloop invariant y <= 2 * y;\nloop invariant y <= 2 * y + w;\nloop invariant y <= 2 * (x + y);\nloop invariant y <= 2 * (x + y + w);\nloop invariant w <= 2 * y;\nloop invariant w <= 2 * y + w;\nloop invariant w <= 2 * (x + y);\nloop invariant w <= 2 * (x + y + w);\nloop invariant x + y <= 2 * y + w;\nloop invariant x + y <= 2 * (x + y);\nloop invariant x + y <= 2 * (x + y + w);\nloop invariant x <= 2 * y + w;\nloop invariant x <= 2 * (x + y);\nloop invariant x <= 2 * (x + y + w);\nloop invariant y <= 2 * y + w;\nloop invariant y <= 2 * (x + y);\nloop invariant y <= 2 * (x + y + w);\nloop invariant w <= 2 * (x + y);\nloop invariant w <= 2 * (x + y + w);\nloop invariant x + y <= 2 * (x + y);\nloop invariant x + y <= 2 * (x + y + w);\nloop invariant x <= 2 * y + w;\nloop invariant x <= 2 * (x + y);\n*/\n```",
            "```\n/*@\nloop invariant i1;\nloop invariant i2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 2;\nloop invariant 0 <= y <= 2;\nloop invariant 0 <= z <= 6;\nloop invariant x <= y;\nloop invariant z >= x + y;\nloop invariant z >= x + y + 2;\nloop invariant z <= x + y + 6;\n*/\n```",
            "```\n/*@\nloop invariant x = y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant w >= 0;\nloop invariant x + y + z + w >= i - j;\nloop invariant x + y + z + w <= i + j;\nloop invariant x + y + z + w + i - j <= 2 * (i + j);\nloop invariant x + y + z + w + i - j >= 2 * (i + j);\nloop invariant x + y + z + w + i - j <= 2 * (i + j);\nloop invariant x + y + z + w + i - j >= 2 * (i + j);\nloop invariant x + y + z + w + i - j <= 2 * (i + j);\nloop invariant x + y + z + w + i - j >= 2 * (i + j);\nloop invariant x + y + z + w + i - j <= 2 * (i + j);\nloop invariant x + y + z + w + i - j >= 2 * (i + j);\nloop invariant x + y + z + w + i - j <= 2 * (i + j);\nloop invariant x + y + z + w + i - j >= 2 * (i + j);\nloop invariant x + y + z + w + i - j <= 2 * (i + j);\nloop invariant x + y + z + w + i - j >= 2 * (i + j);\nloop invariant x + y + z + w + i - j <= 2 * (i + j);\nloop invariant x + y + z + w + i - j >= 2 * (i + j);\nloop invariant x + y + z + w + i - j <= 2 * (i + j);\nloop invariant x + y + z + w + i - j >= 2 * (i + j);\nloop invariant x + y + z + w + i - j <= 2 * (i + j);\nloop invariant x + y + z + w + i - j >= 2 * (i + j);\nloop invariant x + y + z + w + i - j <= 2 * (i + j);\nloop invariant x + y + z + w + i - j >= 2 * (i + j);\nloop invariant x + y + z + w + i - j <= 2 * (i + j);\nloop invariant x + y + z + w + i - j >= 2 * (i + j);\nloop invariant x + y + z + w + i - j <= 2 * (i + j);\nloop invariant x + y + z + w + i - j >= 2 * (i + j);\nloop invariant x + y + z + w + i - j <= 2 * (i + j);\nloop invariant x + y + z + w + i - j >= 2 * (i + j);\nloop invariant x + y + z + w + i - j <= 2 * (i + j);\nloop invariant x + y + z + w + i - j >= 2 * (i + j);\nloop invariant x + y + z + w + i - j <= 2 * (i + j);\nloop invariant x + y + z + w + i - j >= 2 * (i + j);\nloop invariant x + y + z + w + i - j <= 2 * (i + j);\nloop invariant x + y + z + w + i - j >= 2 * (i + j);\nloop invariant x + y + z + w + i - j <= 2 * (i + j);\nloop invariant x + y + z + w + i - j >= 2 * (i + j);\nloop invariant x + y + z + w + i - j <= 2 * (i + j);\nloop invariant x + y + z + w + i - j >= 2 * (i + j);\nloop invariant x + y + z + w + i - j <= 2 * (i + j);\nloop invariant x + y + z + w + i - j >= 2 * (i + j);\nloop invariant x + y + z + w + i - j <= 2 * (i + j);\nloop invariant x + y + z + w + i - j >= 2 * (i + j);\nloop invariant x + y + z + w + i - j <= 2 * (i + j);\nloop invariant x + y + z + w + i - j >= 2 * (i + j);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= w <= y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= w <= 2*y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant z+3*w+x >= y*x;\nloop invariant z-x >= y*y/2;\nloop invariant z-x >= y*y/2;\nloop invariant z-x >= y*y/2;\nloop invariant y <= 100000;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= z <= 100000;\nloop invariant 0 <= x <= 100000;\nloop invariant 0 <= y <= 100000;\nloop invariant 0 <= w <= 100000;\nloop invariant 0 <= z <= x + y + w;\nloop invariant z % 2 == 0 ==> x == y;\nloop invariant z % 2 == 1 ==> x == y + 1;\nloop invariant x == y + z % 2;\nloop invariant i == 1;\nloop invariant j == 0;\nloop invariant z == 1 + x + y + w;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant w >= 0;\nloop invariant x == y + (z % 2 == 1);\nloop invariant i == 1;\nloop invariant j == 0;\nloop invariant z == 1 + x + y + w;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant w >= 0;\nloop invariant x == y + (z % 2 == 1);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= j <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant z >= 0;\nloop invariant w >= 0;\nloop invariant i >= 1;\nloop invariant j == y;\nloop invariant z >= x * y;\nloop invariant x == y;\nloop invariant z == x * y;\nloop invariant z == 0;\nloop invariant x == 0;\nloop invariant y == 0;\nloop invariant w == 0;\nloop invariant i == 1;\nloop invariant z == 0;\nloop invariant x == 0;\nloop invariant y == 0;\nloop invariant w == 0;\nloop invariant i == 1;\nloop invariant z == 0;\nloop invariant x == 0;\nloop invariant y == 0;\nloop invariant w == 0;\nloop invariant i == 1;\nloop invariant z == 0;\nloop invariant x == 0;\nloop invariant y == 0;\nloop invariant w == 0;\nloop invariant i == 1;\nloop invariant z == 0;\nloop invariant x == 0;\nloop invariant y == 0;\nloop invariant w == 0;\nloop invariant i == 1;\nloop invariant z == 0;\nloop invariant x == 0;\nloop invariant y == 0;\nloop invariant w == 0;\nloop invariant i == 1;\nloop invariant z == 0;\nloop invariant x == 0;\nloop invariant y == 0;\nloop invariant w == 0;\nloop invariant i == 1;\nloop invariant z == 0;\nloop invariant x == 0;\nloop invariant y == 0;\nloop invariant w == 0;\nloop invariant i == 1;\nloop invariant z == 0;\nloop invariant x == 0;\nloop invariant y == 0;\nloop invariant w == 0;\nloop invariant i == 1;\nloop invariant z == 0;\nloop invariant x == 0;\nloop invariant y == 0;\nloop invariant w == 0;\nloop invariant i == 1;\nloop invariant z == 0;\nloop invariant x == 0;\nloop invariant y == 0;\nloop invariant w == 0;\nloop invariant i == 1;\nloop invariant z == 0;\nloop invariant x == 0;\nloop invariant y == 0;\nloop invariant w == 0;\nloop invariant i == 1;\nloop invariant z == 0;\nloop invariant x == 0;\nloop invariant y == 0;\nloop invariant w == 0;\nloop invariant i == 1;\nloop invariant z == 0;\nloop invariant x == 0;\nloop invariant y == 0;\nloop invariant w == 0;\nloop invariant i == 1;\nloop invariant z == 0;\nloop invariant x == 0;\nloop invariant y == 0;\nloop invariant w == 0;\nloop invariant i == 1;\nloop invariant z == 0;\nloop invariant x == 0;\nloop invariant y == 0;\nloop invariant w == 0;\nloop invariant i == 1;\nloop invariant z == 0;\nloop invariant x == 0;\nloop invariant y == 0;\nloop invariant w == 0;\nloop invariant i == 1;\nloop invariant z == 0;\nloop invariant x == 0;\nloop invariant y == 0;\nloop invariant w == 0;\nloop invariant i == 1;\nloop invariant z == 0;\nloop invariant x == 0;\nloop invariant y == 0;\nloop invariant w == 0;\nloop invariant i == 1;\nloop invariant z == 0;\nloop invariant x == 0;\nloop invariant y == 0;\nloop invariant w == 0;\nloop invariant i == 1;\nloop invariant z == 0;\nloop invariant x == 0;\nloop invariant y == 0;\nloop invariant w == 0;\nloop invariant i == 1;\nloop invariant z == 0;\nloop invariant x == 0;\nloop invariant y == 0;\nloop invariant w == 0;\nloop invariant i == 1;\nloop invariant z == 0;\nloop invariant x == 0;\nloop invariant y == 0;\nloop invariant w == 0;\nloop invariant i == 1;\nloop invariant z == 0;\nloop invariant x == 0;\nloop invariant y == 0;\nloop invariant w == 0;\nloop invariant i == 1;\nloop invariant z == 0;\nloop invariant x == 0;\nloop invariant y == 0;\nloop invariant w == 0;\nloop invariant i == 1;\nloop invariant z == 0;\nloop invariant x == 0;\nloop invariant y == 0;\nloop invariant w == 0;\nloop invariant i == 1;\nloop invariant z == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y;\nloop invariant 0 <= x;\nloop invariant w >= 0;\nloop invariant z >= 0;\nloop invariant z <= x + y + w + j;\nloop invariant x <= y;\nloop invariant i == 1;\nloop invariant j == 0;\nloop invariant w%2 == 0;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= j <= 100000;\nloop invariant x >= 0;\nloop invariant x >= (j - 1) * j / 2;\nloop invariant x >= (j - 1) * j / 2;\nloop invariant 1 <= j <= 100000;\nloop invariant x >= 0;\nloop invariant x >= (j - 1) * j / 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant w >= 2 * y;\nloop invariant z >= (1 + (y - 1) * y / 2) + 2 * y;\nloop invariant z = (1 + (y - 1) * y / 2) + 2 * y + (x - y);\nloop invariant x >= y;\nloop invariant w >= 2 * (y - 1);\nloop invariant z >= (1 + (y - 1) * y / 2) + 2 * (y - 1);\nloop invariant z = (1 + (y - 1) * y / 2) + 2 * (y - 1) + (x - y);\nloop invariant z = 1 + (y - 1) * y / 2 + 2 * (y - 1) + x - y;\nloop invariant z = 1 + (y - 1) * y / 2 + 2 * (y - 1) + x - y;\nloop invariant z = 1 + (y - 1) * y / 2 + 2 * (y - 1) + x - y;\nloop invariant z = 1 + (y - 1) * y / 2 + 2 * (y - 1) + x - y;\nloop invariant z = 1 + (y - 1) * y / 2 + 2 * (y - 1) + x - y;\nloop invariant z = 1 + (y - 1) * y / 2 + 2 * (y - 1) + x - y;\nloop invariant z = 1 + (y - 1) * y / 2 + 2 * (y - 1) + x - y;\nloop invariant z = 1 + (y - 1) * y / 2 + 2 * (y - 1) + x - y;\nloop invariant z = 1 + (y - 1) * y / 2 + 2 * (y - 1) + x - y;\nloop invariant z = 1 + (y - 1) * y / 2 + 2 * (y - 1) + x - y;\nloop invariant z = 1 + (y - 1) * y / 2 + 2 * (y - 1) + x - y;\nloop invariant z = 1 + (y - 1) * y / 2 + 2 * (y - 1) + x - y;\nloop invariant z = 1 + (y - 1) * y / 2 + 2 * (y - 1) + x - y;\nloop invariant z = 1 + (y - 1) * y / 2 + 2 * (y - 1) + x - y;\nloop invariant z = 1 + (y - 1) * y / 2 + 2 * (y - 1) + x - y;\nloop invariant z = 1 + (y - 1) * y / 2 + 2 * (y - 1) + x - y;\nloop invariant z = 1 + (y - 1) * y / 2 + 2 * (y - 1) + x - y;\nloop invariant z = 1 + (y - 1) * y / 2 + 2 * (y - 1) + x - y;\nloop invariant z = 1 + (y - 1) * y / 2 + 2 * (y - 1) + x - y;\nloop invariant z = 1 + (y - 1) * y / 2 + 2 * (y - 1) + x - y;\nloop invariant z = 1 + (y - 1) * y / 2 + 2 * (y - 1) + x - y;\nloop invariant z = 1 + (y - 1) * y / 2 + 2 * (y - 1) + x - y;\nloop invariant z = 1 + (y - 1) * y / 2 + 2 * (y - 1) + x - y;\nloop invariant z = 1 + (y - 1) * y / 2 + 2 * (y - 1) + x - y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= w <= j;\nloop invariant 0 <= x <= j;\nloop invariant 0 <= y <= j;\nloop invariant 0 <= z <= j;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= unknown2();\nloop invariant 0 <= j <= unknown2();\nloop invariant 0 <= x <= i;\nloop invariant 0 <= y <= i;\nloop invariant 0 <= z <= i;\nloop invariant 0 <= w <= 2 * i;\nloop invariant z % 2 == x;\nloop invariant x == y;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant 0 <= z <= x + y + w;\nloop invariant 0 <= w <= 2 * y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown2();\n\nint main()\n{\n\tint i = 1;\n\tint j = 0;\n\tint z = i-j;\n\tint x = 0;\n\tint y = 0;\n\tint w = 0;\n\n\t/*@\nloop invariant i1: 0 <= x <= y;\n\nloop invariant i3: 0 <= w <= 2 * y;\n*/\nwhile(unknown2()) \n\t{\n\t\tz+=x+y+w;\n\t\ty++;\n\t\tif(z%2==1) \n\t\t  x++;\n\t\tw+=2; \n\t}\n\n\t{;\n//@ assert(x==y);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 10,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= 2;\nloop invariant 0 <= j <= 1;\nloop invariant z >= 1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant w >= 0;\nloop invariant x <= y;\nloop invariant x <= z/2;\nloop invariant y <= z/2;\nloop invariant w <= z;\nloop invariant z >= (1 + (w - 1) * w / 2);\nloop invariant z >= (1 + (x - 1) * x / 2);\nloop invariant z >= (1 + (y - 1) * y / 2);\nloop invariant z >= (1 + (x - 1) * x / 2) + (1 + (y - 1) * y / 2);\nloop invariant z >= (1 + (x - 1) * x / 2) + (1 + (y - 1) * y / 2) + (1 + (w - 1) * w / 2);\nloop invariant z >= (1 + (x - 1) * x / 2) + (1 + (y - 1) * y / 2) + (1 + (w - 1) * w / 2) + (1 + (z - 1) * z / 2);\nloop invariant z >= (1 + (x - 1) * x / 2) + (1 + (y - 1) * y / 2) + (1 + (w - 1) * w / 2) + (1 + (z - 1) * z / 2) + (1 + (i - 1) * i / 2);\nloop invariant z >= (1 + (x - 1) * x / 2) + (1 + (y - 1) * y / 2) + (1 + (w - 1) * w / 2) + (1 + (z - 1) * z / 2) + (1 + (i - 1) * i / 2) + (1 + (j - 1) * j / 2);\nloop invariant z >= (1 + (x - 1) * x / 2) + (1 + (y - 1) * y / 2) + (1 + (w - 1) * w / 2) + (1 + (z - 1) * z / 2) + (1 + (i - 1) * i / 2) + (1 + (j - 1) * j / 2) + (1 + (z - 1) * z / 2);\nloop invariant z >= (1 + (x - 1) * x / 2) + (1 + (y - 1) * y / 2) + (1 + (w - 1) * w / 2) + (1 + (z - 1) * z / 2) + (1 + (i - 1) * i / 2) + (1 + (j - 1) * j / 2) + (1 + (z - 1) * z / 2) + (1 + (x - 1) * x / 2);\nloop invariant z >= (1 + (x - 1) * x / 2) + (1 + (y - 1) * y / 2) + (1 + (w - 1) * w / 2) + (1 + (z - 1) * z / 2) + (1 + (i - 1) * i / 2) + (1 + (j - 1) * j / 2) + (1 + (z - 1) * z / 2) + (1 + (x - 1) * x / 2) + (1 + (y - 1) * y / 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown2();\n\nint main()\n{\n\tint i = 1;\n\tint j = 0;\n\tint z = i-j;\n\tint x = 0;\n\tint y = 0;\n\tint w = 0;\n\n\t/*@\nloop invariant i1: 1 <= i <= 2;\nloop invariant i2: 0 <= j <= 1;\nloop invariant i3: z >= 1;\nloop invariant i4: x >= 0;\nloop invariant i5: y >= 0;\nloop invariant i6: w >= 0;\nloop invariant i7: x <= y;\n\n\n\n\nloop invariant i12: z >= (1 + (x - 1) * x / 2);\nloop invariant i13: z >= (1 + (y - 1) * y / 2);\n\n\n\n\n\n\n\n\n*/\nwhile(unknown2()) \n\t{\n\t\tz+=x+y+w;\n\t\ty++;\n\t\tif(z%2==1) \n\t\t  x++;\n\t\tw+=2; \n\t}\n\n\t{;\n//@ assert(x==y);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 20,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 1;\nloop invariant 0 <= j <= 1;\nloop invariant 0 <= z <= 1;\nloop invariant 0 <= x <= 1;\nloop invariant 0 <= y <= 1;\nloop invariant 0 <= w <= 2;\nloop invariant i - j + x + y + w = z;\nloop invariant i = 1;\nloop invariant j = 0;\nloop invariant x = 0;\nloop invariant y = 0;\nloop invariant w = 0;\nloop invariant z = 1;\nloop invariant x <= y;\nloop invariant z <= y;\nloop invariant z <= x;\nloop invariant z <= x + y;\nloop invariant z <= x + y + w;\nloop invariant z <= 2 * y;\nloop invariant z <= 2 * y + w;\nloop invariant x + y + w <= z;\nloop invariant z <= x + y + w;\nloop invariant z <= 2 * y + w;\nloop invariant z <= 2 * (x + y);\nloop invariant z <= 2 * (x + y + w);\nloop invariant x + y <= z;\nloop invariant x + y <= x + y + w;\nloop invariant x + y <= 2 * y;\nloop invariant x + y <= 2 * y + w;\nloop invariant x + y <= 2 * (x + y);\nloop invariant x + y <= 2 * (x + y + w);\nloop invariant w <= 2;\nloop invariant x + y + w <= z;\nloop invariant z <= x + y + w;\nloop invariant x + y + w <= 2 * y;\nloop invariant x + y + w <= 2 * y + w;\nloop invariant x + y + w <= 2 * (x + y);\nloop invariant x + y + w <= 2 * (x + y + w);\nloop invariant x <= y;\nloop invariant x <= z;\nloop invariant x <= x + y;\nloop invariant x <= x + y + w;\nloop invariant x <= 2 * y;\nloop invariant x <= 2 * y + w;\nloop invariant x <= 2 * (x + y);\nloop invariant x <= 2 * (x + y + w);\nloop invariant y <= z;\nloop invariant y <= x + y;\nloop invariant y <= x + y + w;\nloop invariant y <= 2 * y;\nloop invariant y <= 2 * y + w;\nloop invariant y <= 2 * (x + y);\nloop invariant y <= 2 * (x + y + w);\nloop invariant w <= z;\nloop invariant w <= x + y + w;\nloop invariant w <= 2 * y;\nloop invariant w <= 2 * y + w;\nloop invariant w <= 2 * (x + y);\nloop invariant w <= 2 * (x + y + w);\nloop invariant x + y <= 2 * y;\nloop invariant x + y <= 2 * y + w;\nloop invariant x + y <= 2 * (x + y);\nloop invariant x + y <= 2 * (x + y + w);\nloop invariant x <= 2 * y;\nloop invariant x <= 2 * y + w;\nloop invariant x <= 2 * (x + y);\nloop invariant x <= 2 * (x + y + w);\nloop invariant y <= 2 * y;\nloop invariant y <= 2 * y + w;\nloop invariant y <= 2 * (x + y);\nloop invariant y <= 2 * (x + y + w);\nloop invariant w <= 2 * y;\nloop invariant w <= 2 * y + w;\nloop invariant w <= 2 * (x + y);\nloop invariant w <= 2 * (x + y + w);\nloop invariant x + y <= 2 * y + w;\nloop invariant x + y <= 2 * (x + y);\nloop invariant x + y <= 2 * (x + y + w);\nloop invariant x <= 2 * y + w;\nloop invariant x <= 2 * (x + y);\nloop invariant x <= 2 * (x + y + w);\nloop invariant y <= 2 * y + w;\nloop invariant y <= 2 * (x + y);\nloop invariant y <= 2 * (x + y + w);\nloop invariant w <= 2 * (x + y);\nloop invariant w <= 2 * (x + y + w);\nloop invariant x + y <= 2 * (x + y);\nloop invariant x + y <= 2 * (x + y + w);\nloop invariant x <= 2 * y + w;\nloop invariant x <= 2 * (x + y);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown2();\n\nint main()\n{\n\tint i = 1;\n\tint j = 0;\n\tint z = i-j;\n\tint x = 0;\n\tint y = 0;\n\tint w = 0;\n\n\t/*@\nloop invariant i1: 0 <= i <= 1;\nloop invariant i2: 0 <= j <= 1;\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i14: x <= y;\n\n\n\n\n\n\n\n\n\n\nloop invariant i25: x + y <= x + y + w;\nloop invariant i26: x + y <= 2 * y;\nloop invariant i27: x + y <= 2 * y + w;\nloop invariant i28: x + y <= 2 * (x + y);\nloop invariant i29: x + y <= 2 * (x + y + w);\n\n\nloop invariant i32: x + y + w <= 2 * y + w;\n\nloop invariant i34: x + y + w <= 2 * (x + y + w);\nloop invariant i35: x <= z;\nloop invariant i36: x <= x + y;\nloop invariant i37: x <= x + y + w;\nloop invariant i38: x <= 2 * y;\nloop invariant i39: x <= 2 * y + w;\nloop invariant i40: x <= 2 * (x + y);\nloop invariant i41: x <= 2 * (x + y + w);\n\nloop invariant i43: y <= x + y;\nloop invariant i44: y <= x + y + w;\nloop invariant i45: y <= 2 * y;\nloop invariant i46: y <= 2 * y + w;\nloop invariant i47: y <= 2 * (x + y);\nloop invariant i48: y <= 2 * (x + y + w);\n\nloop invariant i50: w <= x + y + w;\nloop invariant i51: w <= 2 * y;\nloop invariant i52: w <= 2 * y + w;\nloop invariant i53: w <= 2 * (x + y);\nloop invariant i54: w <= 2 * (x + y + w);\n*/\nwhile(unknown2()) \n\t{\n\t\tz+=x+y+w;\n\t\ty++;\n\t\tif(z%2==1) \n\t\t  x++;\n\t\tw+=2; \n\t}\n\n\t{;\n//@ assert(x==y);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant i1;\nloop invariant i2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown2();\n\nint main()\n{\n\tint i = 1;\n\tint j = 0;\n\tint z = i-j;\n\tint x = 0;\n\tint y = 0;\n\tint w = 0;\n\n\t/*@\n\n\n*/\nwhile(unknown2()) \n\t{\n\t\tz+=x+y+w;\n\t\ty++;\n\t\tif(z%2==1) \n\t\t  x++;\n\t\tw+=2; \n\t}\n\n\t{;\n//@ assert(x==y);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 2;\nloop invariant 0 <= y <= 2;\nloop invariant 0 <= z <= 6;\nloop invariant x <= y;\nloop invariant z >= x + y;\nloop invariant z >= x + y + 2;\nloop invariant z <= x + y + 6;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown2();\n\nint main()\n{\n\tint i = 1;\n\tint j = 0;\n\tint z = i-j;\n\tint x = 0;\n\tint y = 0;\n\tint w = 0;\n\n\t/*@\n\n\n\nloop invariant i4: x <= y;\n\n\n\n*/\nwhile(unknown2()) \n\t{\n\t\tz+=x+y+w;\n\t\ty++;\n\t\tif(z%2==1) \n\t\t  x++;\n\t\tw+=2; \n\t}\n\n\t{;\n//@ assert(x==y);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant x = y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant w >= 0;\nloop invariant x + y + z + w >= i - j;\nloop invariant x + y + z + w <= i + j;\nloop invariant x + y + z + w + i - j <= 2 * (i + j);\nloop invariant x + y + z + w + i - j >= 2 * (i + j);\nloop invariant x + y + z + w + i - j <= 2 * (i + j);\nloop invariant x + y + z + w + i - j >= 2 * (i + j);\nloop invariant x + y + z + w + i - j <= 2 * (i + j);\nloop invariant x + y + z + w + i - j >= 2 * (i + j);\nloop invariant x + y + z + w + i - j <= 2 * (i + j);\nloop invariant x + y + z + w + i - j >= 2 * (i + j);\nloop invariant x + y + z + w + i - j <= 2 * (i + j);\nloop invariant x + y + z + w + i - j >= 2 * (i + j);\nloop invariant x + y + z + w + i - j <= 2 * (i + j);\nloop invariant x + y + z + w + i - j >= 2 * (i + j);\nloop invariant x + y + z + w + i - j <= 2 * (i + j);\nloop invariant x + y + z + w + i - j >= 2 * (i + j);\nloop invariant x + y + z + w + i - j <= 2 * (i + j);\nloop invariant x + y + z + w + i - j >= 2 * (i + j);\nloop invariant x + y + z + w + i - j <= 2 * (i + j);\nloop invariant x + y + z + w + i - j >= 2 * (i + j);\nloop invariant x + y + z + w + i - j <= 2 * (i + j);\nloop invariant x + y + z + w + i - j >= 2 * (i + j);\nloop invariant x + y + z + w + i - j <= 2 * (i + j);\nloop invariant x + y + z + w + i - j >= 2 * (i + j);\nloop invariant x + y + z + w + i - j <= 2 * (i + j);\nloop invariant x + y + z + w + i - j >= 2 * (i + j);\nloop invariant x + y + z + w + i - j <= 2 * (i + j);\nloop invariant x + y + z + w + i - j >= 2 * (i + j);\nloop invariant x + y + z + w + i - j <= 2 * (i + j);\nloop invariant x + y + z + w + i - j >= 2 * (i + j);\nloop invariant x + y + z + w + i - j <= 2 * (i + j);\nloop invariant x + y + z + w + i - j >= 2 * (i + j);\nloop invariant x + y + z + w + i - j <= 2 * (i + j);\nloop invariant x + y + z + w + i - j >= 2 * (i + j);\nloop invariant x + y + z + w + i - j <= 2 * (i + j);\nloop invariant x + y + z + w + i - j >= 2 * (i + j);\nloop invariant x + y + z + w + i - j <= 2 * (i + j);\nloop invariant x + y + z + w + i - j >= 2 * (i + j);\nloop invariant x + y + z + w + i - j <= 2 * (i + j);\nloop invariant x + y + z + w + i - j >= 2 * (i + j);\nloop invariant x + y + z + w + i - j <= 2 * (i + j);\nloop invariant x + y + z + w + i - j >= 2 * (i + j);\nloop invariant x + y + z + w + i - j <= 2 * (i + j);\nloop invariant x + y + z + w + i - j >= 2 * (i + j);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown2();\n\nint main()\n{\n\tint i = 1;\n\tint j = 0;\n\tint z = i-j;\n\tint x = 0;\n\tint y = 0;\n\tint w = 0;\n\n\t/*@\n\nloop invariant i2: x >= 0;\nloop invariant i3: y >= 0;\nloop invariant i4: z >= 0;\nloop invariant i5: w >= 0;\nloop invariant i6: x + y + z + w >= i - j;\n\n\nloop invariant i9: x + y + z + w + i - j >= 2 * (i + j);\n*/\nwhile(unknown2()) \n\t{\n\t\tz+=x+y+w;\n\t\ty++;\n\t\tif(z%2==1) \n\t\t  x++;\n\t\tw+=2; \n\t}\n\n\t{;\n//@ assert(x==y);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= w <= y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown2();\n\nint main()\n{\n\tint i = 1;\n\tint j = 0;\n\tint z = i-j;\n\tint x = 0;\n\tint y = 0;\n\tint w = 0;\n\n\t/*@\n\n*/\nwhile(unknown2()) \n\t{\n\t\tz+=x+y+w;\n\t\ty++;\n\t\tif(z%2==1) \n\t\t  x++;\n\t\tw+=2; \n\t}\n\n\t{;\n//@ assert(x==y);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= w <= 2*y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant z+3*w+x >= y*x;\nloop invariant z-x >= y*y/2;\nloop invariant z-x >= y*y/2;\nloop invariant z-x >= y*y/2;\nloop invariant y <= 100000;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown2();\n\nint main()\n{\n\tint i = 1;\n\tint j = 0;\n\tint z = i-j;\n\tint x = 0;\n\tint y = 0;\n\tint w = 0;\n\n\t/*@\nloop invariant i1: 0 <= w <= 2*y;\nloop invariant i2: x >= 0;\nloop invariant i3: y >= 0;\nloop invariant i4: z+3*w+x >= y*x;\n\n\n*/\nwhile(unknown2()) \n\t{\n\t\tz+=x+y+w;\n\t\ty++;\n\t\tif(z%2==1) \n\t\t  x++;\n\t\tw+=2; \n\t}\n\n\t{;\n//@ assert(x==y);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant 0 <= z <= 100000;\nloop invariant 0 <= x <= 100000;\nloop invariant 0 <= y <= 100000;\nloop invariant 0 <= w <= 100000;\nloop invariant 0 <= z <= x + y + w;\nloop invariant z % 2 == 0 ==> x == y;\nloop invariant z % 2 == 1 ==> x == y + 1;\nloop invariant x == y + z % 2;\nloop invariant i == 1;\nloop invariant j == 0;\nloop invariant z == 1 + x + y + w;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant w >= 0;\nloop invariant x == y + (z % 2 == 1);\nloop invariant i == 1;\nloop invariant j == 0;\nloop invariant z == 1 + x + y + w;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant w >= 0;\nloop invariant x == y + (z % 2 == 1);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown2();\n\nint main()\n{\n\tint i = 1;\n\tint j = 0;\n\tint z = i-j;\n\tint x = 0;\n\tint y = 0;\n\tint w = 0;\n\n\t/*@\n\n\n\n\n\n\n\n\nloop invariant i9: i == 1;\nloop invariant i10: j == 0;\n\nloop invariant i12: y >= 0;\nloop invariant i13: x >= 0;\nloop invariant i14: w >= 0;\n\n*/\nwhile(unknown2()) \n\t{\n\t\tz+=x+y+w;\n\t\ty++;\n\t\tif(z%2==1) \n\t\t  x++;\n\t\tw+=2; \n\t}\n\n\t{;\n//@ assert(x==y);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 8,
                "annotations": "```\n/*@\nloop invariant 0 <= j <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant z >= 0;\nloop invariant w >= 0;\nloop invariant i >= 1;\nloop invariant j == y;\nloop invariant z >= x * y;\nloop invariant x == y;\nloop invariant z == x * y;\nloop invariant z == 0;\nloop invariant x == 0;\nloop invariant y == 0;\nloop invariant w == 0;\nloop invariant i == 1;\nloop invariant z == 0;\nloop invariant x == 0;\nloop invariant y == 0;\nloop invariant w == 0;\nloop invariant i == 1;\nloop invariant z == 0;\nloop invariant x == 0;\nloop invariant y == 0;\nloop invariant w == 0;\nloop invariant i == 1;\nloop invariant z == 0;\nloop invariant x == 0;\nloop invariant y == 0;\nloop invariant w == 0;\nloop invariant i == 1;\nloop invariant z == 0;\nloop invariant x == 0;\nloop invariant y == 0;\nloop invariant w == 0;\nloop invariant i == 1;\nloop invariant z == 0;\nloop invariant x == 0;\nloop invariant y == 0;\nloop invariant w == 0;\nloop invariant i == 1;\nloop invariant z == 0;\nloop invariant x == 0;\nloop invariant y == 0;\nloop invariant w == 0;\nloop invariant i == 1;\nloop invariant z == 0;\nloop invariant x == 0;\nloop invariant y == 0;\nloop invariant w == 0;\nloop invariant i == 1;\nloop invariant z == 0;\nloop invariant x == 0;\nloop invariant y == 0;\nloop invariant w == 0;\nloop invariant i == 1;\nloop invariant z == 0;\nloop invariant x == 0;\nloop invariant y == 0;\nloop invariant w == 0;\nloop invariant i == 1;\nloop invariant z == 0;\nloop invariant x == 0;\nloop invariant y == 0;\nloop invariant w == 0;\nloop invariant i == 1;\nloop invariant z == 0;\nloop invariant x == 0;\nloop invariant y == 0;\nloop invariant w == 0;\nloop invariant i == 1;\nloop invariant z == 0;\nloop invariant x == 0;\nloop invariant y == 0;\nloop invariant w == 0;\nloop invariant i == 1;\nloop invariant z == 0;\nloop invariant x == 0;\nloop invariant y == 0;\nloop invariant w == 0;\nloop invariant i == 1;\nloop invariant z == 0;\nloop invariant x == 0;\nloop invariant y == 0;\nloop invariant w == 0;\nloop invariant i == 1;\nloop invariant z == 0;\nloop invariant x == 0;\nloop invariant y == 0;\nloop invariant w == 0;\nloop invariant i == 1;\nloop invariant z == 0;\nloop invariant x == 0;\nloop invariant y == 0;\nloop invariant w == 0;\nloop invariant i == 1;\nloop invariant z == 0;\nloop invariant x == 0;\nloop invariant y == 0;\nloop invariant w == 0;\nloop invariant i == 1;\nloop invariant z == 0;\nloop invariant x == 0;\nloop invariant y == 0;\nloop invariant w == 0;\nloop invariant i == 1;\nloop invariant z == 0;\nloop invariant x == 0;\nloop invariant y == 0;\nloop invariant w == 0;\nloop invariant i == 1;\nloop invariant z == 0;\nloop invariant x == 0;\nloop invariant y == 0;\nloop invariant w == 0;\nloop invariant i == 1;\nloop invariant z == 0;\nloop invariant x == 0;\nloop invariant y == 0;\nloop invariant w == 0;\nloop invariant i == 1;\nloop invariant z == 0;\nloop invariant x == 0;\nloop invariant y == 0;\nloop invariant w == 0;\nloop invariant i == 1;\nloop invariant z == 0;\nloop invariant x == 0;\nloop invariant y == 0;\nloop invariant w == 0;\nloop invariant i == 1;\nloop invariant z == 0;\nloop invariant x == 0;\nloop invariant y == 0;\nloop invariant w == 0;\nloop invariant i == 1;\nloop invariant z == 0;\nloop invariant x == 0;\nloop invariant y == 0;\nloop invariant w == 0;\nloop invariant i == 1;\nloop invariant z == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown2();\n\nint main()\n{\n\tint i = 1;\n\tint j = 0;\n\tint z = i-j;\n\tint x = 0;\n\tint y = 0;\n\tint w = 0;\n\n\t/*@\nloop invariant i1: 0 <= j <= 100000;\n\n\nloop invariant i4: w >= 0;\nloop invariant i5: i >= 1;\n\n\n\n\n\n\n\n\nloop invariant i14: i == 1;\n*/\nwhile(unknown2()) \n\t{\n\t\tz+=x+y+w;\n\t\ty++;\n\t\tif(z%2==1) \n\t\t  x++;\n\t\tw+=2; \n\t}\n\n\t{;\n//@ assert(x==y);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y;\nloop invariant 0 <= x;\nloop invariant w >= 0;\nloop invariant z >= 0;\nloop invariant z <= x + y + w + j;\nloop invariant x <= y;\nloop invariant i == 1;\nloop invariant j == 0;\nloop invariant w%2 == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown2();\n\nint main()\n{\n\tint i = 1;\n\tint j = 0;\n\tint z = i-j;\n\tint x = 0;\n\tint y = 0;\n\tint w = 0;\n\n\t/*@\nloop invariant i1: 0 <= y;\nloop invariant i2: 0 <= x;\nloop invariant i3: w >= 0;\nloop invariant i4: z >= 0;\n\nloop invariant i6: x <= y;\nloop invariant i7: i == 1;\nloop invariant i8: j == 0;\nloop invariant i9: w%2 == 0;\n*/\nwhile(unknown2()) \n\t{\n\t\tz+=x+y+w;\n\t\ty++;\n\t\tif(z%2==1) \n\t\t  x++;\n\t\tw+=2; \n\t}\n\n\t{;\n//@ assert(x==y);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 1 <= j <= 100000;\nloop invariant x >= 0;\nloop invariant x >= (j - 1) * j / 2;\nloop invariant x >= (j - 1) * j / 2;\nloop invariant 1 <= j <= 100000;\nloop invariant x >= 0;\nloop invariant x >= (j - 1) * j / 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown2();\n\nint main()\n{\n\tint i = 1;\n\tint j = 0;\n\tint z = i-j;\n\tint x = 0;\n\tint y = 0;\n\tint w = 0;\n\n\t/*@\n\nloop invariant i2: x >= 0;\nloop invariant i3: x >= (j - 1) * j / 2;\n*/\nwhile(unknown2()) \n\t{\n\t\tz+=x+y+w;\n\t\ty++;\n\t\tif(z%2==1) \n\t\t  x++;\n\t\tw+=2; \n\t}\n\n\t{;\n//@ assert(x==y);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 8,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant w >= 2 * y;\nloop invariant z >= (1 + (y - 1) * y / 2) + 2 * y;\nloop invariant z = (1 + (y - 1) * y / 2) + 2 * y + (x - y);\nloop invariant x >= y;\nloop invariant w >= 2 * (y - 1);\nloop invariant z >= (1 + (y - 1) * y / 2) + 2 * (y - 1);\nloop invariant z = (1 + (y - 1) * y / 2) + 2 * (y - 1) + (x - y);\nloop invariant z = 1 + (y - 1) * y / 2 + 2 * (y - 1) + x - y;\nloop invariant z = 1 + (y - 1) * y / 2 + 2 * (y - 1) + x - y;\nloop invariant z = 1 + (y - 1) * y / 2 + 2 * (y - 1) + x - y;\nloop invariant z = 1 + (y - 1) * y / 2 + 2 * (y - 1) + x - y;\nloop invariant z = 1 + (y - 1) * y / 2 + 2 * (y - 1) + x - y;\nloop invariant z = 1 + (y - 1) * y / 2 + 2 * (y - 1) + x - y;\nloop invariant z = 1 + (y - 1) * y / 2 + 2 * (y - 1) + x - y;\nloop invariant z = 1 + (y - 1) * y / 2 + 2 * (y - 1) + x - y;\nloop invariant z = 1 + (y - 1) * y / 2 + 2 * (y - 1) + x - y;\nloop invariant z = 1 + (y - 1) * y / 2 + 2 * (y - 1) + x - y;\nloop invariant z = 1 + (y - 1) * y / 2 + 2 * (y - 1) + x - y;\nloop invariant z = 1 + (y - 1) * y / 2 + 2 * (y - 1) + x - y;\nloop invariant z = 1 + (y - 1) * y / 2 + 2 * (y - 1) + x - y;\nloop invariant z = 1 + (y - 1) * y / 2 + 2 * (y - 1) + x - y;\nloop invariant z = 1 + (y - 1) * y / 2 + 2 * (y - 1) + x - y;\nloop invariant z = 1 + (y - 1) * y / 2 + 2 * (y - 1) + x - y;\nloop invariant z = 1 + (y - 1) * y / 2 + 2 * (y - 1) + x - y;\nloop invariant z = 1 + (y - 1) * y / 2 + 2 * (y - 1) + x - y;\nloop invariant z = 1 + (y - 1) * y / 2 + 2 * (y - 1) + x - y;\nloop invariant z = 1 + (y - 1) * y / 2 + 2 * (y - 1) + x - y;\nloop invariant z = 1 + (y - 1) * y / 2 + 2 * (y - 1) + x - y;\nloop invariant z = 1 + (y - 1) * y / 2 + 2 * (y - 1) + x - y;\nloop invariant z = 1 + (y - 1) * y / 2 + 2 * (y - 1) + x - y;\nloop invariant z = 1 + (y - 1) * y / 2 + 2 * (y - 1) + x - y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown2();\n\nint main()\n{\n\tint i = 1;\n\tint j = 0;\n\tint z = i-j;\n\tint x = 0;\n\tint y = 0;\n\tint w = 0;\n\n\t/*@\n\n\nloop invariant i3: w >= 2 * y;\n\n\n\nloop invariant i7: w >= 2 * (y - 1);\n\n\n\n*/\nwhile(unknown2()) \n\t{\n\t\tz+=x+y+w;\n\t\ty++;\n\t\tif(z%2==1) \n\t\t  x++;\n\t\tw+=2; \n\t}\n\n\t{;\n//@ assert(x==y);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= w <= j;\nloop invariant 0 <= x <= j;\nloop invariant 0 <= y <= j;\nloop invariant 0 <= z <= j;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown2();\n\nint main()\n{\n\tint i = 1;\n\tint j = 0;\n\tint z = i-j;\n\tint x = 0;\n\tint y = 0;\n\tint w = 0;\n\n\t/*@\n\n\n\n\n*/\nwhile(unknown2()) \n\t{\n\t\tz+=x+y+w;\n\t\ty++;\n\t\tif(z%2==1) \n\t\t  x++;\n\t\tw+=2; \n\t}\n\n\t{;\n//@ assert(x==y);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= unknown2();\nloop invariant 0 <= j <= unknown2();\nloop invariant 0 <= x <= i;\nloop invariant 0 <= y <= i;\nloop invariant 0 <= z <= i;\nloop invariant 0 <= w <= 2 * i;\nloop invariant z % 2 == x;\nloop invariant x == y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown2();\n\nint main()\n{\n\tint i = 1;\n\tint j = 0;\n\tint z = i-j;\n\tint x = 0;\n\tint y = 0;\n\tint w = 0;\n\n\t/*@\n\n\n\n\n\n\n\n\n*/\nwhile(unknown2()) \n\t{\n\t\tz+=x+y+w;\n\t\ty++;\n\t\tif(z%2==1) \n\t\t  x++;\n\t\tw+=2; \n\t}\n\n\t{;\n//@ assert(x==y);\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 48: Assignment operators not allowed in annotations.",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown2();\n\nint main()\n{\n\tint i = 1;\n\tint j = 0;\n\tint z = i-j;\n\tint x = 0;\n\tint y = 0;\n\tint w = 0;\n\n\t/*@\nloop invariant i1: 0 <= x <= y;\nloop invariant i2: 0 <= z <= x + y + w;\nloop invariant i3: 0 <= w <= 2 * y;\nloop invariant i4: 1 <= i <= 2;\nloop invariant i5: 0 <= j <= 1;\nloop invariant i6: z >= 1;\nloop invariant i7: x >= 0;\nloop invariant i8: y >= 0;\nloop invariant i9: w >= 0;\nloop invariant i10: x <= y;\nloop invariant i11: x <= z/2;\nloop invariant i12: y <= z/2;\nloop invariant i13: w <= z;\nloop invariant i14: z >= (1 + (w - 1) * w / 2);\nloop invariant i15: z >= (1 + (x - 1) * x / 2);\nloop invariant i16: z >= (1 + (y - 1) * y / 2);\nloop invariant i17: z >= (1 + (x - 1) * x / 2) + (1 + (y - 1) * y / 2);\nloop invariant i18: z >= (1 + (x - 1) * x / 2) + (1 + (y - 1) * y / 2) + (1 + (w - 1) * w / 2);\nloop invariant i19: z >= (1 + (x - 1) * x / 2) + (1 + (y - 1) * y / 2) + (1 + (w - 1) * w / 2) + (1 + (z - 1) * z / 2);\nloop invariant i20: z >= (1 + (x - 1) * x / 2) + (1 + (y - 1) * y / 2) + (1 + (w - 1) * w / 2) + (1 + (z - 1) * z / 2) + (1 + (i - 1) * i / 2);\nloop invariant i21: z >= (1 + (x - 1) * x / 2) + (1 + (y - 1) * y / 2) + (1 + (w - 1) * w / 2) + (1 + (z - 1) * z / 2) + (1 + (i - 1) * i / 2) + (1 + (j - 1) * j / 2);\nloop invariant i22: z >= (1 + (x - 1) * x / 2) + (1 + (y - 1) * y / 2) + (1 + (w - 1) * w / 2) + (1 + (z - 1) * z / 2) + (1 + (i - 1) * i / 2) + (1 + (j - 1) * j / 2) + (1 + (z - 1) * z / 2);\nloop invariant i23: z >= (1 + (x - 1) * x / 2) + (1 + (y - 1) * y / 2) + (1 + (w - 1) * w / 2) + (1 + (z - 1) * z / 2) + (1 + (i - 1) * i / 2) + (1 + (j - 1) * j / 2) + (1 + (z - 1) * z / 2) + (1 + (x - 1) * x / 2);\nloop invariant i24: z >= (1 + (x - 1) * x / 2) + (1 + (y - 1) * y / 2) + (1 + (w - 1) * w / 2) + (1 + (z - 1) * z / 2) + (1 + (i - 1) * i / 2) + (1 + (j - 1) * j / 2) + (1 + (z - 1) * z / 2) + (1 + (x - 1) * x / 2) + (1 + (y - 1) * y / 2);\nloop invariant i25: 0 <= i <= 1;\nloop invariant i26: 0 <= z <= 1;\nloop invariant i27: 0 <= x <= 1;\nloop invariant i28: 0 <= y <= 1;\nloop invariant i29: 0 <= w <= 2;\nloop invariant i30: i - j + x + y + w = z;\nloop invariant i31: i = 1;\nloop invariant i32: j = 0;\nloop invariant i33: x = 0;\nloop invariant i34: y = 0;\nloop invariant i35: w = 0;\nloop invariant i36: z = 1;\nloop invariant i37: z <= y;\nloop invariant i38: z <= x;\nloop invariant i39: z <= x + y;\nloop invariant i40: z <= x + y + w;\nloop invariant i41: z <= 2 * y;\nloop invariant i42: z <= 2 * y + w;\nloop invariant i43: x + y + w <= z;\nloop invariant i44: z <= 2 * (x + y);\nloop invariant i45: z <= 2 * (x + y + w);\nloop invariant i46: x + y <= z;\nloop invariant i47: x + y <= x + y + w;\nloop invariant i48: x + y <= 2 * y;\nloop invariant i49: x + y <= 2 * y + w;\nloop invariant i50: x + y <= 2 * (x + y);\nloop invariant i51: x + y <= 2 * (x + y + w);\nloop invariant i52: w <= 2;\nloop invariant i53: x + y + w <= 2 * y;\nloop invariant i54: x + y + w <= 2 * y + w;\nloop invariant i55: x + y + w <= 2 * (x + y);\nloop invariant i56: x + y + w <= 2 * (x + y + w);\nloop invariant i57: x <= z;\nloop invariant i58: x <= x + y;\nloop invariant i59: x <= x + y + w;\nloop invariant i60: x <= 2 * y;\nloop invariant i61: x <= 2 * y + w;\nloop invariant i62: x <= 2 * (x + y);\nloop invariant i63: x <= 2 * (x + y + w);\nloop invariant i64: y <= z;\nloop invariant i65: y <= x + y;\nloop invariant i66: y <= x + y + w;\nloop invariant i67: y <= 2 * y;\nloop invariant i68: y <= 2 * y + w;\nloop invariant i69: y <= 2 * (x + y);\nloop invariant i70: y <= 2 * (x + y + w);\nloop invariant i71: w <= x + y + w;\nloop invariant i72: w <= 2 * y;\nloop invariant i73: w <= 2 * y + w;\nloop invariant i74: w <= 2 * (x + y);\nloop invariant i75: w <= 2 * (x + y + w);\nloop invariant i76: i1;\nloop invariant i77: i2;\nloop invariant i78: 0 <= x <= 2;\nloop invariant i79: 0 <= y <= 2;\nloop invariant i80: 0 <= z <= 6;\nloop invariant i81: z >= x + y;\nloop invariant i82: z >= x + y + 2;\nloop invariant i83: z <= x + y + 6;\nloop invariant i84: x = y;\nloop invariant i85: z >= 0;\nloop invariant i86: x + y + z + w >= i - j;\nloop invariant i87: x + y + z + w <= i + j;\nloop invariant i88: x + y + z + w + i - j <= 2 * (i + j);\nloop invariant i89: x + y + z + w + i - j >= 2 * (i + j);\nloop invariant i90: 0 <= w <= y;\nloop invariant i91: 0 <= w <= 2*y;\nloop invariant i92: z+3*w+x >= y*x;\nloop invariant i93: z-x >= y*y/2;\nloop invariant i94: y <= 100000;\nloop invariant i95: 0 <= z <= 100000;\nloop invariant i96: 0 <= x <= 100000;\nloop invariant i97: 0 <= y <= 100000;\nloop invariant i98: 0 <= w <= 100000;\nloop invariant i99: z % 2 == 0 ==> x == y;\nloop invariant i100: z % 2 == 1 ==> x == y + 1;\nloop invariant i101: x == y + z % 2;\nloop invariant i102: i == 1;\nloop invariant i103: j == 0;\nloop invariant i104: z == 1 + x + y + w;\nloop invariant i105: x == y + (z % 2 == 1);\nloop invariant i106: 0 <= j <= 100000;\nloop invariant i107: x >= (1 + (y - 1) * y / 2);\nloop invariant i108: i >= 1;\nloop invariant i109: j == y;\nloop invariant i110: z >= x * y;\nloop invariant i111: x == y;\nloop invariant i112: z == x * y;\nloop invariant i113: z == 0;\nloop invariant i114: x == 0;\nloop invariant i115: y == 0;\nloop invariant i116: w == 0;\nloop invariant i117: 0 <= y;\nloop invariant i118: 0 <= x;\nloop invariant i119: z <= x + y + w + j;\nloop invariant i120: w%2 == 0;\nloop invariant i121: 1 <= j <= 100000;\nloop invariant i122: x >= (j - 1) * j / 2;\nloop invariant i123: w >= 2 * y;\nloop invariant i124: z >= (1 + (y - 1) * y / 2) + 2 * y;\nloop invariant i125: z = (1 + (y - 1) * y / 2) + 2 * y + (x - y);\nloop invariant i126: x >= y;\nloop invariant i127: w >= 2 * (y - 1);\nloop invariant i128: z >= (1 + (y - 1) * y / 2) + 2 * (y - 1);\nloop invariant i129: z = (1 + (y - 1) * y / 2) + 2 * (y - 1) + (x - y);\nloop invariant i130: z = 1 + (y - 1) * y / 2 + 2 * (y - 1) + x - y;\nloop invariant i131: 0 <= w <= j;\nloop invariant i132: 0 <= x <= j;\nloop invariant i133: 0 <= y <= j;\nloop invariant i134: 0 <= z <= j;\nloop invariant i135: 1 <= i <= unknown2();\nloop invariant i136: 0 <= j <= unknown2();\nloop invariant i137: 0 <= x <= i;\nloop invariant i138: 0 <= y <= i;\nloop invariant i139: 0 <= z <= i;\nloop invariant i140: 0 <= w <= 2 * i;\nloop invariant i141: z % 2 == x;\n*/\nwhile(unknown2()) \n\t{\n\t\tz+=x+y+w;\n\t\ty++;\n\t\tif(z%2==1) \n\t\t  x++;\n\t\tw+=2; \n\t}\n\n\t{;\n//@ assert(x==y);\n}\n\n}",
        "combined_annotation_num_solver_calls": 78,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown2();\n\nint main()\n{\n\tint i = 1;\n\tint j = 0;\n\tint z = i-j;\n\tint x = 0;\n\tint y = 0;\n\tint w = 0;\n\n\t/*@\nloop invariant i1: 0 <= x <= y;\n\nloop invariant i3: 0 <= w <= 2 * y;\nloop invariant i4: 1 <= i <= 2;\nloop invariant i5: 0 <= j <= 1;\nloop invariant i6: z >= 1;\nloop invariant i7: x >= 0;\nloop invariant i8: y >= 0;\nloop invariant i9: w >= 0;\nloop invariant i10: x <= y;\n\n\n\n\nloop invariant i15: z >= (1 + (x - 1) * x / 2);\nloop invariant i16: z >= (1 + (y - 1) * y / 2);\n\n\n\n\n\n\n\n\nloop invariant i25: 0 <= i <= 1;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i47: x + y <= x + y + w;\nloop invariant i48: x + y <= 2 * y;\nloop invariant i49: x + y <= 2 * y + w;\nloop invariant i50: x + y <= 2 * (x + y);\nloop invariant i51: x + y <= 2 * (x + y + w);\n\n\nloop invariant i54: x + y + w <= 2 * y + w;\n\nloop invariant i56: x + y + w <= 2 * (x + y + w);\nloop invariant i57: x <= z;\nloop invariant i58: x <= x + y;\nloop invariant i59: x <= x + y + w;\nloop invariant i60: x <= 2 * y;\nloop invariant i61: x <= 2 * y + w;\nloop invariant i62: x <= 2 * (x + y);\nloop invariant i63: x <= 2 * (x + y + w);\nloop invariant i64: y <= z;\nloop invariant i65: y <= x + y;\nloop invariant i66: y <= x + y + w;\nloop invariant i67: y <= 2 * y;\nloop invariant i68: y <= 2 * y + w;\nloop invariant i69: y <= 2 * (x + y);\nloop invariant i70: y <= 2 * (x + y + w);\nloop invariant i71: w <= x + y + w;\nloop invariant i72: w <= 2 * y;\nloop invariant i73: w <= 2 * y + w;\nloop invariant i74: w <= 2 * (x + y);\nloop invariant i75: w <= 2 * (x + y + w);\n\n\n\n\n\n\n\n\n\nloop invariant i85: z >= 0;\nloop invariant i86: x + y + z + w >= i - j;\n\n\nloop invariant i89: x + y + z + w + i - j >= 2 * (i + j);\n\nloop invariant i91: 0 <= w <= 2*y;\nloop invariant i92: z+3*w+x >= y*x;\nloop invariant i93: z-x >= y*y/2;\nloop invariant i94: y <= 100000;\n\nloop invariant i96: 0 <= x <= 100000;\nloop invariant i97: 0 <= y <= 100000;\n\n\n\n\nloop invariant i102: i == 1;\nloop invariant i103: j == 0;\n\n\nloop invariant i106: 0 <= j <= 100000;\n\nloop invariant i108: i >= 1;\n\nloop invariant i110: z >= x * y;\n\n\n\n\n\n\nloop invariant i117: 0 <= y;\nloop invariant i118: 0 <= x;\n\nloop invariant i120: w%2 == 0;\n\nloop invariant i122: x >= (j - 1) * j / 2;\nloop invariant i123: w >= 2 * y;\n\n\n\nloop invariant i127: w >= 2 * (y - 1);\nloop invariant i128: z >= (1 + (y - 1) * y / 2) + 2 * (y - 1);\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile(unknown2()) \n\t{\n\t\tz+=x+y+w;\n\t\ty++;\n\t\tif(z%2==1) \n\t\t  x++;\n\t\tw+=2; \n\t}\n\n\t{;\n//@ assert(x==y);\n}\n\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/01.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/split.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/02.c"
        ],
        "skipped": [],
        "total": 102,
        "success_count": 87,
        "failure_count": 15,
        "success_rate": 0.8529411764705882
    }
}