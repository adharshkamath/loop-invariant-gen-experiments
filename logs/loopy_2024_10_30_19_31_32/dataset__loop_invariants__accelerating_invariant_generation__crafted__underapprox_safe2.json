{
    "logs": {
        "file": "../dataset/loop_invariants/accelerating_invariant_generation/crafted/underapprox_safe2.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = 1;\n\n  while (x < 6) {\n    x++;\n    y *= 2;\n  }\n\n  {;\n//@ assert(x == 6);\n}\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= x <= 6;\nloop invariant 1 <= y <= 64;\nloop invariant y == (1 << x);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 6;\nloop invariant y = 2^x;\nloop invariant x <= 6 ==> y <= 64;\nloop invariant x < 6 ==> y < 64;\nloop invariant x = 6 ==> y = 64;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 6;\nloop invariant y >= 1;\nloop invariant y == (1 << x);\nloop invariant x < 6 ==> y == (1 << x);\nloop invariant x >= 6 ==> y == (1 << 6);\nloop invariant x >= 6 ==> x == 6;\nloop invariant x < 6 ==> x < 6;\nloop invariant y >= 1 ==> y >= 1;\nloop invariant y < 1 ==> y == 1;\nloop invariant y == 1 ==> y == 1;\nloop invariant y > 1 ==> y > 1;\nloop invariant y <= 1 ==> y <= 1;\nloop invariant y >= 2 ==> y >= 2;\nloop invariant y < 2 ==> y == 1;\nloop invariant y == 2 ==> y == 2;\nloop invariant y > 2 ==> y > 2;\nloop invariant y <= 2 ==> y <= 2;\nloop invariant y >= 4 ==> y >= 4;\nloop invariant y < 4 ==> y == 4;\nloop invariant y == 4 ==> y == 4;\nloop invariant y > 4 ==> y > 4;\nloop invariant y <= 4 ==> y <= 4;\nloop invariant y >= 8 ==> y >= 8;\nloop invariant y < 8 ==> y == 8;\nloop invariant y == 8 ==> y == 8;\nloop invariant y > 8 ==> y > 8;\nloop invariant y <= 8 ==> y <= 8;\nloop invariant y >= 16 ==> y >= 16;\nloop invariant y < 16 ==> y == 16;\nloop invariant y == 16 ==> y == 16;\nloop invariant y > 16 ==> y > 16;\nloop invariant y <= 16 ==> y <= 16;\nloop invariant y >= 32 ==> y >= 32;\nloop invariant y < 32 ==> y == 32;\nloop invariant y == 32 ==> y == 32;\nloop invariant y > 32 ==> y > 32;\nloop invariant y <= 32 ==> y <= 32;\nloop invariant y >= 64 ==> y >= 64;\nloop invariant y < 64 ==> y == 64;\nloop invariant y == 64 ==> y == 64;\nloop invariant y > 64 ==> y > 64;\nloop invariant y <= 64 ==> y <= 64;\nloop invariant y >= 128 ==> y >= 128;\nloop invariant y < 128 ==> y == 128;\nloop invariant y == 128 ==> y == 128;\nloop invariant y > 128 ==> y > 128;\nloop invariant y <= 128 ==> y <= 128;\nloop invariant y >= 256 ==> y >= 256;\nloop invariant y < 256 ==> y == 256;\nloop invariant y == 256 ==> y == 256;\nloop invariant y > 256 ==> y > 256;\nloop invariant y <= 256 ==> y <= 256;\nloop invariant y >= 512 ==> y >= 512;\nloop invariant y < 512 ==> y == 512;\nloop invariant y == 512 ==> y == 512;\nloop invariant y > 512 ==> y > 512;\nloop invariant y <= 512 ==> y <= 512;\nloop invariant y >= 1024 ==> y >= 1024;\nloop invariant y < 1024 ==> y == 1024;\nloop invariant y == 1024 ==> y == 1024;\nloop invariant y > 1024 ==> y > 1024;\nloop invariant y <= 1024 ==> y <= 1024;\nloop invariant y >= 2048 ==> y >= 2048;\nloop invariant y < 2048 ==> y == 2048;\nloop invariant y == 2048 ==> y == 2048;\nloop invariant y > 2048 ==> y > 2048;\nloop invariant y <= 2048 ==> y <= 2048;\nloop invariant y >= 4096 ==> y >= 4096;\nloop invariant y < 4096 ==> y == 4096;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 6;\nloop invariant y == (2 ^ x);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 6;\nloop invariant 1 <= y <= 64;\nloop invariant x < y;\nloop invariant 0 <= x <= 6;\nloop invariant 1 <= y <= 64;\nloop invariant x < y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 6;\nloop invariant 1 <= y <= 64;\nloop invariant x * y >= 1;\nloop invariant x * y <= 6 * 64;\nloop invariant x * y == 6 * 64;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 6;\nloop invariant (x == 6) ==> (y == 1024);\nloop invariant x <= 6 ==> (y == 1 << x);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 5;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 6;\nloop invariant 1 <= y <= 64;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 6;\nloop invariant 1 <= y <= 64;\nloop invariant x + 1 <= 6;\nloop invariant x + 1 <= 6 ==> y * 2 == 64;\nloop invariant x < 6 ==> y * 2 == 64;\nloop invariant x < 6 ==> y == 64;\nloop invariant x < 6 ==> x + 1 == 6;\nloop invariant x < 6 ==> x == 5;\nloop invariant x < 6 ==> x == 5 ==> y * 2 == 64;\nloop invariant x < 6 ==> x == 5 ==> y == 32;\nloop invariant x < 6 ==> x == 5 ==> y * 2 == 32 * 2;\nloop invariant x < 6 ==> x == 5 ==> y == 32;\nloop invariant x < 6 ==> x == 5 ==> y * 2 == 64;\nloop invariant x < 6 ==> x == 5 ==> y == 64;\nloop invariant x < 6 ==> x == 5 ==> x + 1 == 6;\nloop invariant x < 6 ==> x == 5 ==> x == 5;\nloop invariant x < 6 ==> x == 5 ==> x == 5 ==> y * 2 == 64;\nloop invariant x < 6 ==> x == 5 ==> x == 5 ==> y == 64;\nloop invariant x < 6 ==> x == 5 ==> x == 5 ==> y * 2 == 64;\nloop invariant x < 6 ==> x == 5 ==> x == 5 ==> y == 64;\nloop invariant x < 6 ==> x == 5 ==> x == 5 ==> x + 1 == 6;\nloop invariant x < 6 ==> x == 5 ==> x == 5 ==> x == 5;\nloop invariant x < 6 ==> x == 5 ==> x == 5 ==> x == 5 ==> y * 2 == 64;\nloop invariant x < 6 ==> x == 5 ==> x == 5 ==> x == 5 ==> y == 64;\nloop invariant x < 6 ==> x == 5 ==> x == 5 ==> x == 5 ==> y * 2 == 64;\nloop invariant x < 6 ==> x == 5 ==> x == 5 ==> x == 5 ==> y == 64;\nloop invariant x < 6 ==> x == 5 ==> x == 5 ==> x == 5 ==> x + 1 == 6;\nloop invariant x < 6 ==> x == 5 ==> x == 5 ==> x == 5 ==> x == 5;\nloop invariant x < 6 ==> x == 5 ==> x == 5 ==> x == 5 ==> x == 5 ==> y * 2 == 64;\nloop invariant x < 6 ==> x == 5 ==> x == 5 ==> x == 5 ==> x == 5 ==> y == 64;\nloop invariant x < 6 ==> x == 5 ==> x == 5 ==> x == 5 ==> x == 5 ==> y * 2 == 64;\nloop invariant x < 6 ==> x == 5 ==> x == 5 ==> x == 5 ==> x == 5 ==> y == 64;\nloop invariant x < 6 ==> x == 5 ==> x == 5 ==> x == 5 ==> x == 5 ==> x + 1 == 6;\nloop invariant x < 6 ==> x == 5 ==> x == 5 ==> x == 5 ==> x == 5 ==> x == 5;\nloop invariant x < 6 ==> x == 5 ==> x == 5 ==> x == 5 ==> x == 5 ==> x == 5 ==> y * 2 == 64;\nloop invariant x < 6 ==> x == 5 ==> x == 5 ==> x == 5 ==> x == 5 ==> x == 5 ==> y == 64;\nloop invariant x < 6 ==> x == 5 ==> x == 5 ==> x == 5 ==> x == 5 ==> x == 5 ==> y * 2 == 64;\nloop invariant x < 6 ==> x == 5 ==> x == 5 ==> x == 5 ==> x == 5 ==> x == 5 ==> y == 64;\nloop invariant x < 6 ==> x == 5 ==> x == 5 ==> x == 5 ==> x == 5 ==> x == 5 ==> x + 1 == 6;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 6;\nloop invariant 1 <= y <= 64;\nloop invariant x == (y - 1) / 2;\nloop invariant y == (1 << x);\nloop invariant x + 1 == y;\nloop invariant x + 1 == y;\nloop invariant y == (1 << x);\nloop invariant x + 1 == y;\nloop invariant x + 1 == y;\nloop invariant y == (1 << x);\nloop invariant x + 1 == y;\nloop invariant x + 1 == y;\nloop invariant y == (1 << x);\nloop invariant x + 1 == y;\nloop invariant x + 1 == y;\nloop invariant y == (1 << x);\nloop invariant x + 1 == y;\nloop invariant x + 1 == y;\nloop invariant y == (1 << x);\nloop invariant x + 1 == y;\nloop invariant x + 1 == y;\nloop invariant y == (1 << x);\nloop invariant x + 1 == y;\nloop invariant x + 1 == y;\nloop invariant y == (1 << x);\nloop invariant x + 1 == y;\nloop invariant x + 1 == y;\nloop invariant y == (1 << x);\nloop invariant x + 1 == y;\nloop invariant x + 1 == y;\nloop invariant y == (1 << x);\nloop invariant x + 1 == y;\nloop invariant x + 1 == y;\nloop invariant y == (1 << x);\nloop invariant x + 1 == y;\nloop invariant x + 1 == y;\nloop invariant y == (1 << x);\nloop invariant x + 1 == y;\nloop invariant x + 1 == y;\nloop invariant y == (1 << x);\nloop invariant x + 1 == y;\nloop invariant x + 1 == y;\nloop invariant y == (1 << x);\nloop invariant x + 1 == y;\nloop invariant x + 1 == y;\nloop invariant y == (1 << x);\nloop invariant x + 1 == y;\nloop invariant x + 1 == y;\nloop invariant y == (1 << x);\nloop invariant x + 1 == y;\nloop invariant x + 1 == y;\nloop invariant y == (1 << x);\nloop invariant x + 1 == y;\nloop invariant x + 1 == y;\nloop invariant y == (1 << x);\nloop invariant x + 1 == y;\nloop invariant x + 1 == y;\nloop invariant y == (1 << x);\nloop invariant x + 1 == y;\nloop invariant x + 1 == y;\nloop invariant y == (1 << x);\nloop invariant x + 1 == y;\nloop invariant x + 1 == y;\nloop invariant y == (1 << x);\nloop invariant x + 1 == y;\nloop invariant x + 1 == y;\nloop invariant y == (1 << x);\nloop invariant x + 1 == y;\nloop invariant x + 1 == y;\nloop invariant y == (1 << x);\nloop invariant x + 1 == y;\nloop invariant x + 1 == y;\nloop invariant y == (1 << x);\nloop invariant x + 1 == y;\nloop invariant x + 1 == y;\nloop invariant y == (1 << x);\nloop invariant x + 1 == y;\nloop invariant x + 1 == y;\nloop invariant y == (1 << x);\nloop invariant x + 1 == y;\nloop invariant x + 1 == y;\nloop invariant y == (1 << x);\nloop invariant x + 1 == y;\nloop invariant x + 1 == y;\nloop invariant y == (1 << x);\nloop invariant x + 1 == y;\nloop invariant x + 1 == y;\nloop invariant y == (1 << x);\nloop invariant x + 1 == y;\nloop invariant x + 1 == y;\nloop invariant y == (1 << x);\nloop invariant x + 1 == y;\nloop invariant x + 1 == y;\nloop invariant y == (1 << x);\nloop invariant x + 1 == y;\nloop invariant x + 1 == y;\nloop invariant y == (1 << x);\nloop invariant x + 1 == y;\nloop invariant x + 1 == y;\nloop invariant y == (1 << x);\nloop invariant x + 1 == y;\nloop invariant x + 1 == y;\nloop invariant y == (1 << x);\nloop invariant x + 1 == y;\nloop invariant x + 1 == y;\nloop invariant y == (1 << x);\nloop invariant x + 1 == y;\nloop invariant x + 1 == y;\nloop invariant y == (1 << x);\nloop invariant x + 1 == y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 6;\nloop invariant 1 <= y <= 64;\n*/\n```",
            "```\n/*@\nloop invariant x < 7;\nloop invariant y = 2^x;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 6;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 6;\nloop invariant y == (1 << x);\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 6;\nloop invariant 1 <= y <= 64;\nloop invariant y == (1 << x);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = 1;\n\n  /*@\nloop invariant i1: 0 <= x <= 6;\n\nloop invariant i3: y == (1 << x);\n*/\nwhile (x < 6) {\n    x++;\n    y *= 2;\n  }\n\n  {;\n//@ assert(x == 6);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 6;\nloop invariant y = 2^x;\nloop invariant x <= 6 ==> y <= 64;\nloop invariant x < 6 ==> y < 64;\nloop invariant x = 6 ==> y = 64;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = 1;\n\n  /*@\nloop invariant i1: 0 <= x <= 6;\n\n\n\n\n*/\nwhile (x < 6) {\n    x++;\n    y *= 2;\n  }\n\n  {;\n//@ assert(x == 6);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 11,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 6;\nloop invariant y >= 1;\nloop invariant y == (1 << x);\nloop invariant x < 6 ==> y == (1 << x);\nloop invariant x >= 6 ==> y == (1 << 6);\nloop invariant x >= 6 ==> x == 6;\nloop invariant x < 6 ==> x < 6;\nloop invariant y >= 1 ==> y >= 1;\nloop invariant y < 1 ==> y == 1;\nloop invariant y == 1 ==> y == 1;\nloop invariant y > 1 ==> y > 1;\nloop invariant y <= 1 ==> y <= 1;\nloop invariant y >= 2 ==> y >= 2;\nloop invariant y < 2 ==> y == 1;\nloop invariant y == 2 ==> y == 2;\nloop invariant y > 2 ==> y > 2;\nloop invariant y <= 2 ==> y <= 2;\nloop invariant y >= 4 ==> y >= 4;\nloop invariant y < 4 ==> y == 4;\nloop invariant y == 4 ==> y == 4;\nloop invariant y > 4 ==> y > 4;\nloop invariant y <= 4 ==> y <= 4;\nloop invariant y >= 8 ==> y >= 8;\nloop invariant y < 8 ==> y == 8;\nloop invariant y == 8 ==> y == 8;\nloop invariant y > 8 ==> y > 8;\nloop invariant y <= 8 ==> y <= 8;\nloop invariant y >= 16 ==> y >= 16;\nloop invariant y < 16 ==> y == 16;\nloop invariant y == 16 ==> y == 16;\nloop invariant y > 16 ==> y > 16;\nloop invariant y <= 16 ==> y <= 16;\nloop invariant y >= 32 ==> y >= 32;\nloop invariant y < 32 ==> y == 32;\nloop invariant y == 32 ==> y == 32;\nloop invariant y > 32 ==> y > 32;\nloop invariant y <= 32 ==> y <= 32;\nloop invariant y >= 64 ==> y >= 64;\nloop invariant y < 64 ==> y == 64;\nloop invariant y == 64 ==> y == 64;\nloop invariant y > 64 ==> y > 64;\nloop invariant y <= 64 ==> y <= 64;\nloop invariant y >= 128 ==> y >= 128;\nloop invariant y < 128 ==> y == 128;\nloop invariant y == 128 ==> y == 128;\nloop invariant y > 128 ==> y > 128;\nloop invariant y <= 128 ==> y <= 128;\nloop invariant y >= 256 ==> y >= 256;\nloop invariant y < 256 ==> y == 256;\nloop invariant y == 256 ==> y == 256;\nloop invariant y > 256 ==> y > 256;\nloop invariant y <= 256 ==> y <= 256;\nloop invariant y >= 512 ==> y >= 512;\nloop invariant y < 512 ==> y == 512;\nloop invariant y == 512 ==> y == 512;\nloop invariant y > 512 ==> y > 512;\nloop invariant y <= 512 ==> y <= 512;\nloop invariant y >= 1024 ==> y >= 1024;\nloop invariant y < 1024 ==> y == 1024;\nloop invariant y == 1024 ==> y == 1024;\nloop invariant y > 1024 ==> y > 1024;\nloop invariant y <= 1024 ==> y <= 1024;\nloop invariant y >= 2048 ==> y >= 2048;\nloop invariant y < 2048 ==> y == 2048;\nloop invariant y == 2048 ==> y == 2048;\nloop invariant y > 2048 ==> y > 2048;\nloop invariant y <= 2048 ==> y <= 2048;\nloop invariant y >= 4096 ==> y >= 4096;\nloop invariant y < 4096 ==> y == 4096;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = 1;\n\n  /*@\nloop invariant i1: 0 <= x <= 6;\nloop invariant i2: y >= 1;\nloop invariant i3: y == (1 << x);\nloop invariant i4: x < 6 ==> y == (1 << x);\nloop invariant i5: x >= 6 ==> y == (1 << 6);\nloop invariant i6: x >= 6 ==> x == 6;\nloop invariant i7: x < 6 ==> x < 6;\nloop invariant i8: y >= 1 ==> y >= 1;\nloop invariant i9: y < 1 ==> y == 1;\nloop invariant i10: y == 1 ==> y == 1;\nloop invariant i11: y > 1 ==> y > 1;\nloop invariant i12: y <= 1 ==> y <= 1;\nloop invariant i13: y >= 2 ==> y >= 2;\nloop invariant i14: y < 2 ==> y == 1;\nloop invariant i15: y == 2 ==> y == 2;\nloop invariant i16: y > 2 ==> y > 2;\nloop invariant i17: y <= 2 ==> y <= 2;\nloop invariant i18: y >= 4 ==> y >= 4;\n\nloop invariant i20: y == 4 ==> y == 4;\nloop invariant i21: y > 4 ==> y > 4;\nloop invariant i22: y <= 4 ==> y <= 4;\nloop invariant i23: y >= 8 ==> y >= 8;\n\nloop invariant i25: y == 8 ==> y == 8;\nloop invariant i26: y > 8 ==> y > 8;\nloop invariant i27: y <= 8 ==> y <= 8;\nloop invariant i28: y >= 16 ==> y >= 16;\n\nloop invariant i30: y == 16 ==> y == 16;\nloop invariant i31: y > 16 ==> y > 16;\nloop invariant i32: y <= 16 ==> y <= 16;\nloop invariant i33: y >= 32 ==> y >= 32;\n\nloop invariant i35: y == 32 ==> y == 32;\nloop invariant i36: y > 32 ==> y > 32;\nloop invariant i37: y <= 32 ==> y <= 32;\nloop invariant i38: y >= 64 ==> y >= 64;\n\nloop invariant i40: y == 64 ==> y == 64;\nloop invariant i41: y > 64 ==> y > 64;\nloop invariant i42: y <= 64 ==> y <= 64;\nloop invariant i43: y >= 128 ==> y >= 128;\n\nloop invariant i45: y == 128 ==> y == 128;\nloop invariant i46: y > 128 ==> y > 128;\nloop invariant i47: y <= 128 ==> y <= 128;\nloop invariant i48: y >= 256 ==> y >= 256;\n\nloop invariant i50: y == 256 ==> y == 256;\nloop invariant i51: y > 256 ==> y > 256;\nloop invariant i52: y <= 256 ==> y <= 256;\nloop invariant i53: y >= 512 ==> y >= 512;\n\nloop invariant i55: y == 512 ==> y == 512;\nloop invariant i56: y > 512 ==> y > 512;\nloop invariant i57: y <= 512 ==> y <= 512;\nloop invariant i58: y >= 1024 ==> y >= 1024;\n\nloop invariant i60: y == 1024 ==> y == 1024;\nloop invariant i61: y > 1024 ==> y > 1024;\nloop invariant i62: y <= 1024 ==> y <= 1024;\nloop invariant i63: y >= 2048 ==> y >= 2048;\n\nloop invariant i65: y == 2048 ==> y == 2048;\nloop invariant i66: y > 2048 ==> y > 2048;\nloop invariant i67: y <= 2048 ==> y <= 2048;\nloop invariant i68: y >= 4096 ==> y >= 4096;\n\n*/\nwhile (x < 6) {\n    x++;\n    y *= 2;\n  }\n\n  {;\n//@ assert(x == 6);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 6;\nloop invariant y == (2 ^ x);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = 1;\n\n  /*@\nloop invariant i1: 0 <= x <= 6;\n\n*/\nwhile (x < 6) {\n    x++;\n    y *= 2;\n  }\n\n  {;\n//@ assert(x == 6);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 6;\nloop invariant 1 <= y <= 64;\nloop invariant x < y;\nloop invariant 0 <= x <= 6;\nloop invariant 1 <= y <= 64;\nloop invariant x < y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = 1;\n\n  /*@\nloop invariant i1: 0 <= x <= 6;\n\n\n*/\nwhile (x < 6) {\n    x++;\n    y *= 2;\n  }\n\n  {;\n//@ assert(x == 6);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 6;\nloop invariant 1 <= y <= 64;\nloop invariant x * y >= 1;\nloop invariant x * y <= 6 * 64;\nloop invariant x * y == 6 * 64;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = 1;\n\n  /*@\nloop invariant i1: 0 <= x <= 6;\n\n\n\n\n*/\nwhile (x < 6) {\n    x++;\n    y *= 2;\n  }\n\n  {;\n//@ assert(x == 6);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 6;\nloop invariant (x == 6) ==> (y == 1024);\nloop invariant x <= 6 ==> (y == 1 << x);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = 1;\n\n  /*@\nloop invariant i1: 0 <= x <= 6;\n\nloop invariant i3: x <= 6 ==> (y == 1 << x);\n*/\nwhile (x < 6) {\n    x++;\n    y *= 2;\n  }\n\n  {;\n//@ assert(x == 6);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 5;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = 1;\n\n  /*@\n\n*/\nwhile (x < 6) {\n    x++;\n    y *= 2;\n  }\n\n  {;\n//@ assert(x == 6);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 6;\nloop invariant 1 <= y <= 64;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = 1;\n\n  /*@\nloop invariant i1: 0 <= x <= 6;\n\n*/\nwhile (x < 6) {\n    x++;\n    y *= 2;\n  }\n\n  {;\n//@ assert(x == 6);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 12,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 6;\nloop invariant 1 <= y <= 64;\nloop invariant x + 1 <= 6;\nloop invariant x + 1 <= 6 ==> y * 2 == 64;\nloop invariant x < 6 ==> y * 2 == 64;\nloop invariant x < 6 ==> y == 64;\nloop invariant x < 6 ==> x + 1 == 6;\nloop invariant x < 6 ==> x == 5;\nloop invariant x < 6 ==> x == 5 ==> y * 2 == 64;\nloop invariant x < 6 ==> x == 5 ==> y == 32;\nloop invariant x < 6 ==> x == 5 ==> y * 2 == 32 * 2;\nloop invariant x < 6 ==> x == 5 ==> y == 32;\nloop invariant x < 6 ==> x == 5 ==> y * 2 == 64;\nloop invariant x < 6 ==> x == 5 ==> y == 64;\nloop invariant x < 6 ==> x == 5 ==> x + 1 == 6;\nloop invariant x < 6 ==> x == 5 ==> x == 5;\nloop invariant x < 6 ==> x == 5 ==> x == 5 ==> y * 2 == 64;\nloop invariant x < 6 ==> x == 5 ==> x == 5 ==> y == 64;\nloop invariant x < 6 ==> x == 5 ==> x == 5 ==> y * 2 == 64;\nloop invariant x < 6 ==> x == 5 ==> x == 5 ==> y == 64;\nloop invariant x < 6 ==> x == 5 ==> x == 5 ==> x + 1 == 6;\nloop invariant x < 6 ==> x == 5 ==> x == 5 ==> x == 5;\nloop invariant x < 6 ==> x == 5 ==> x == 5 ==> x == 5 ==> y * 2 == 64;\nloop invariant x < 6 ==> x == 5 ==> x == 5 ==> x == 5 ==> y == 64;\nloop invariant x < 6 ==> x == 5 ==> x == 5 ==> x == 5 ==> y * 2 == 64;\nloop invariant x < 6 ==> x == 5 ==> x == 5 ==> x == 5 ==> y == 64;\nloop invariant x < 6 ==> x == 5 ==> x == 5 ==> x == 5 ==> x + 1 == 6;\nloop invariant x < 6 ==> x == 5 ==> x == 5 ==> x == 5 ==> x == 5;\nloop invariant x < 6 ==> x == 5 ==> x == 5 ==> x == 5 ==> x == 5 ==> y * 2 == 64;\nloop invariant x < 6 ==> x == 5 ==> x == 5 ==> x == 5 ==> x == 5 ==> y == 64;\nloop invariant x < 6 ==> x == 5 ==> x == 5 ==> x == 5 ==> x == 5 ==> y * 2 == 64;\nloop invariant x < 6 ==> x == 5 ==> x == 5 ==> x == 5 ==> x == 5 ==> y == 64;\nloop invariant x < 6 ==> x == 5 ==> x == 5 ==> x == 5 ==> x == 5 ==> x + 1 == 6;\nloop invariant x < 6 ==> x == 5 ==> x == 5 ==> x == 5 ==> x == 5 ==> x == 5;\nloop invariant x < 6 ==> x == 5 ==> x == 5 ==> x == 5 ==> x == 5 ==> x == 5 ==> y * 2 == 64;\nloop invariant x < 6 ==> x == 5 ==> x == 5 ==> x == 5 ==> x == 5 ==> x == 5 ==> y == 64;\nloop invariant x < 6 ==> x == 5 ==> x == 5 ==> x == 5 ==> x == 5 ==> x == 5 ==> y * 2 == 64;\nloop invariant x < 6 ==> x == 5 ==> x == 5 ==> x == 5 ==> x == 5 ==> x == 5 ==> y == 64;\nloop invariant x < 6 ==> x == 5 ==> x == 5 ==> x == 5 ==> x == 5 ==> x == 5 ==> x + 1 == 6;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = 1;\n\n  /*@\nloop invariant i1: 0 <= x <= 6;\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i13: x < 6 ==> x == 5 ==> x + 1 == 6;\nloop invariant i14: x < 6 ==> x == 5 ==> x == 5;\n\n\nloop invariant i17: x < 6 ==> x == 5 ==> x == 5 ==> x + 1 == 6;\nloop invariant i18: x < 6 ==> x == 5 ==> x == 5 ==> x == 5;\n\n\nloop invariant i21: x < 6 ==> x == 5 ==> x == 5 ==> x == 5 ==> x + 1 == 6;\nloop invariant i22: x < 6 ==> x == 5 ==> x == 5 ==> x == 5 ==> x == 5;\n\n\nloop invariant i25: x < 6 ==> x == 5 ==> x == 5 ==> x == 5 ==> x == 5 ==> x + 1 == 6;\nloop invariant i26: x < 6 ==> x == 5 ==> x == 5 ==> x == 5 ==> x == 5 ==> x == 5;\n\n\nloop invariant i29: x < 6 ==> x == 5 ==> x == 5 ==> x == 5 ==> x == 5 ==> x == 5 ==> x + 1 == 6;\n*/\nwhile (x < 6) {\n    x++;\n    y *= 2;\n  }\n\n  {;\n//@ assert(x == 6);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 6;\nloop invariant 1 <= y <= 64;\nloop invariant x == (y - 1) / 2;\nloop invariant y == (1 << x);\nloop invariant x + 1 == y;\nloop invariant x + 1 == y;\nloop invariant y == (1 << x);\nloop invariant x + 1 == y;\nloop invariant x + 1 == y;\nloop invariant y == (1 << x);\nloop invariant x + 1 == y;\nloop invariant x + 1 == y;\nloop invariant y == (1 << x);\nloop invariant x + 1 == y;\nloop invariant x + 1 == y;\nloop invariant y == (1 << x);\nloop invariant x + 1 == y;\nloop invariant x + 1 == y;\nloop invariant y == (1 << x);\nloop invariant x + 1 == y;\nloop invariant x + 1 == y;\nloop invariant y == (1 << x);\nloop invariant x + 1 == y;\nloop invariant x + 1 == y;\nloop invariant y == (1 << x);\nloop invariant x + 1 == y;\nloop invariant x + 1 == y;\nloop invariant y == (1 << x);\nloop invariant x + 1 == y;\nloop invariant x + 1 == y;\nloop invariant y == (1 << x);\nloop invariant x + 1 == y;\nloop invariant x + 1 == y;\nloop invariant y == (1 << x);\nloop invariant x + 1 == y;\nloop invariant x + 1 == y;\nloop invariant y == (1 << x);\nloop invariant x + 1 == y;\nloop invariant x + 1 == y;\nloop invariant y == (1 << x);\nloop invariant x + 1 == y;\nloop invariant x + 1 == y;\nloop invariant y == (1 << x);\nloop invariant x + 1 == y;\nloop invariant x + 1 == y;\nloop invariant y == (1 << x);\nloop invariant x + 1 == y;\nloop invariant x + 1 == y;\nloop invariant y == (1 << x);\nloop invariant x + 1 == y;\nloop invariant x + 1 == y;\nloop invariant y == (1 << x);\nloop invariant x + 1 == y;\nloop invariant x + 1 == y;\nloop invariant y == (1 << x);\nloop invariant x + 1 == y;\nloop invariant x + 1 == y;\nloop invariant y == (1 << x);\nloop invariant x + 1 == y;\nloop invariant x + 1 == y;\nloop invariant y == (1 << x);\nloop invariant x + 1 == y;\nloop invariant x + 1 == y;\nloop invariant y == (1 << x);\nloop invariant x + 1 == y;\nloop invariant x + 1 == y;\nloop invariant y == (1 << x);\nloop invariant x + 1 == y;\nloop invariant x + 1 == y;\nloop invariant y == (1 << x);\nloop invariant x + 1 == y;\nloop invariant x + 1 == y;\nloop invariant y == (1 << x);\nloop invariant x + 1 == y;\nloop invariant x + 1 == y;\nloop invariant y == (1 << x);\nloop invariant x + 1 == y;\nloop invariant x + 1 == y;\nloop invariant y == (1 << x);\nloop invariant x + 1 == y;\nloop invariant x + 1 == y;\nloop invariant y == (1 << x);\nloop invariant x + 1 == y;\nloop invariant x + 1 == y;\nloop invariant y == (1 << x);\nloop invariant x + 1 == y;\nloop invariant x + 1 == y;\nloop invariant y == (1 << x);\nloop invariant x + 1 == y;\nloop invariant x + 1 == y;\nloop invariant y == (1 << x);\nloop invariant x + 1 == y;\nloop invariant x + 1 == y;\nloop invariant y == (1 << x);\nloop invariant x + 1 == y;\nloop invariant x + 1 == y;\nloop invariant y == (1 << x);\nloop invariant x + 1 == y;\nloop invariant x + 1 == y;\nloop invariant y == (1 << x);\nloop invariant x + 1 == y;\nloop invariant x + 1 == y;\nloop invariant y == (1 << x);\nloop invariant x + 1 == y;\nloop invariant x + 1 == y;\nloop invariant y == (1 << x);\nloop invariant x + 1 == y;\nloop invariant x + 1 == y;\nloop invariant y == (1 << x);\nloop invariant x + 1 == y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = 1;\n\n  /*@\nloop invariant i1: 0 <= x <= 6;\n\n\n\n\n*/\nwhile (x < 6) {\n    x++;\n    y *= 2;\n  }\n\n  {;\n//@ assert(x == 6);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 6;\nloop invariant 1 <= y <= 64;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = 1;\n\n  /*@\nloop invariant i1: 0 <= x <= 6;\n\n*/\nwhile (x < 6) {\n    x++;\n    y *= 2;\n  }\n\n  {;\n//@ assert(x == 6);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant x < 7;\nloop invariant y = 2^x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = 1;\n\n  /*@\nloop invariant i1: x < 7;\n\n*/\nwhile (x < 6) {\n    x++;\n    y *= 2;\n  }\n\n  {;\n//@ assert(x == 6);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 6;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = 1;\n\n  /*@\nloop invariant i1: 0 <= x <= 6;\n*/\nwhile (x < 6) {\n    x++;\n    y *= 2;\n  }\n\n  {;\n//@ assert(x == 6);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 6;\nloop invariant y == (1 << x);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = 1;\n\n  /*@\nloop invariant i1: 0 <= x <= 6;\nloop invariant i2: y == (1 << x);\n*/\nwhile (x < 6) {\n    x++;\n    y *= 2;\n  }\n\n  {;\n//@ assert(x == 6);\n}\n\n}",
                "checker_output_after_prune": true
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 15: Assignment operators not allowed in annotations.",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = 1;\n\n  /*@\nloop invariant i1: 0 <= x <= 6;\nloop invariant i2: 1 <= y <= 64;\nloop invariant i3: y == (1 << x);\nloop invariant i4: y = 2^x;\nloop invariant i5: x <= 6 ==> y <= 64;\nloop invariant i6: x < 6 ==> y < 64;\nloop invariant i7: x = 6 ==> y = 64;\nloop invariant i8: y >= 1;\nloop invariant i9: x < 6 ==> y == (1 << x);\nloop invariant i10: x >= 6 ==> y == (1 << 6);\nloop invariant i11: x >= 6 ==> x == 6;\nloop invariant i12: x < 6 ==> x < 6;\nloop invariant i13: y >= 1 ==> y >= 1;\nloop invariant i14: y < 1 ==> y == 1;\nloop invariant i15: y == 1 ==> y == 1;\nloop invariant i16: y > 1 ==> y > 1;\nloop invariant i17: y <= 1 ==> y <= 1;\nloop invariant i18: y >= 2 ==> y >= 2;\nloop invariant i19: y < 2 ==> y == 1;\nloop invariant i20: y == 2 ==> y == 2;\nloop invariant i21: y > 2 ==> y > 2;\nloop invariant i22: y <= 2 ==> y <= 2;\nloop invariant i23: y >= 4 ==> y >= 4;\nloop invariant i24: y < 4 ==> y == 4;\nloop invariant i25: y == 4 ==> y == 4;\nloop invariant i26: y > 4 ==> y > 4;\nloop invariant i27: y <= 4 ==> y <= 4;\nloop invariant i28: y >= 8 ==> y >= 8;\nloop invariant i29: y < 8 ==> y == 8;\nloop invariant i30: y == 8 ==> y == 8;\nloop invariant i31: y > 8 ==> y > 8;\nloop invariant i32: y <= 8 ==> y <= 8;\nloop invariant i33: y >= 16 ==> y >= 16;\nloop invariant i34: y < 16 ==> y == 16;\nloop invariant i35: y == 16 ==> y == 16;\nloop invariant i36: y > 16 ==> y > 16;\nloop invariant i37: y <= 16 ==> y <= 16;\nloop invariant i38: y >= 32 ==> y >= 32;\nloop invariant i39: y < 32 ==> y == 32;\nloop invariant i40: y == 32 ==> y == 32;\nloop invariant i41: y > 32 ==> y > 32;\nloop invariant i42: y <= 32 ==> y <= 32;\nloop invariant i43: y >= 64 ==> y >= 64;\nloop invariant i44: y < 64 ==> y == 64;\nloop invariant i45: y == 64 ==> y == 64;\nloop invariant i46: y > 64 ==> y > 64;\nloop invariant i47: y <= 64 ==> y <= 64;\nloop invariant i48: y >= 128 ==> y >= 128;\nloop invariant i49: y < 128 ==> y == 128;\nloop invariant i50: y == 128 ==> y == 128;\nloop invariant i51: y > 128 ==> y > 128;\nloop invariant i52: y <= 128 ==> y <= 128;\nloop invariant i53: y >= 256 ==> y >= 256;\nloop invariant i54: y < 256 ==> y == 256;\nloop invariant i55: y == 256 ==> y == 256;\nloop invariant i56: y > 256 ==> y > 256;\nloop invariant i57: y <= 256 ==> y <= 256;\nloop invariant i58: y >= 512 ==> y >= 512;\nloop invariant i59: y < 512 ==> y == 512;\nloop invariant i60: y == 512 ==> y == 512;\nloop invariant i61: y > 512 ==> y > 512;\nloop invariant i62: y <= 512 ==> y <= 512;\nloop invariant i63: y >= 1024 ==> y >= 1024;\nloop invariant i64: y < 1024 ==> y == 1024;\nloop invariant i65: y == 1024 ==> y == 1024;\nloop invariant i66: y > 1024 ==> y > 1024;\nloop invariant i67: y <= 1024 ==> y <= 1024;\nloop invariant i68: y >= 2048 ==> y >= 2048;\nloop invariant i69: y < 2048 ==> y == 2048;\nloop invariant i70: y == 2048 ==> y == 2048;\nloop invariant i71: y > 2048 ==> y > 2048;\nloop invariant i72: y <= 2048 ==> y <= 2048;\nloop invariant i73: y >= 4096 ==> y >= 4096;\nloop invariant i74: y < 4096 ==> y == 4096;\nloop invariant i75: y == (2 ^ x);\nloop invariant i76: x < y;\nloop invariant i77: x * y >= 1;\nloop invariant i78: x * y <= 6 * 64;\nloop invariant i79: x * y == 6 * 64;\nloop invariant i80: (x == 6) ==> (y == 1024);\nloop invariant i81: x <= 6 ==> (y == 1 << x);\nloop invariant i82: 0 <= x <= 5;\nloop invariant i83: x + 1 <= 6;\nloop invariant i84: x + 1 <= 6 ==> y * 2 == 64;\nloop invariant i85: x < 6 ==> y * 2 == 64;\nloop invariant i86: x < 6 ==> y == 64;\nloop invariant i87: x < 6 ==> x + 1 == 6;\nloop invariant i88: x < 6 ==> x == 5;\nloop invariant i89: x < 6 ==> x == 5 ==> y * 2 == 64;\nloop invariant i90: x < 6 ==> x == 5 ==> y == 32;\nloop invariant i91: x < 6 ==> x == 5 ==> y * 2 == 32 * 2;\nloop invariant i92: x < 6 ==> x == 5 ==> y == 64;\nloop invariant i93: x < 6 ==> x == 5 ==> x + 1 == 6;\nloop invariant i94: x < 6 ==> x == 5 ==> x == 5;\nloop invariant i95: x < 6 ==> x == 5 ==> x == 5 ==> y * 2 == 64;\nloop invariant i96: x < 6 ==> x == 5 ==> x == 5 ==> y == 64;\nloop invariant i97: x < 6 ==> x == 5 ==> x == 5 ==> x + 1 == 6;\nloop invariant i98: x < 6 ==> x == 5 ==> x == 5 ==> x == 5;\nloop invariant i99: x < 6 ==> x == 5 ==> x == 5 ==> x == 5 ==> y * 2 == 64;\nloop invariant i100: x < 6 ==> x == 5 ==> x == 5 ==> x == 5 ==> y == 64;\nloop invariant i101: x < 6 ==> x == 5 ==> x == 5 ==> x == 5 ==> x + 1 == 6;\nloop invariant i102: x < 6 ==> x == 5 ==> x == 5 ==> x == 5 ==> x == 5;\nloop invariant i103: x < 6 ==> x == 5 ==> x == 5 ==> x == 5 ==> x == 5 ==> y * 2 == 64;\nloop invariant i104: x < 6 ==> x == 5 ==> x == 5 ==> x == 5 ==> x == 5 ==> y == 64;\nloop invariant i105: x < 6 ==> x == 5 ==> x == 5 ==> x == 5 ==> x == 5 ==> x + 1 == 6;\nloop invariant i106: x < 6 ==> x == 5 ==> x == 5 ==> x == 5 ==> x == 5 ==> x == 5;\nloop invariant i107: x < 6 ==> x == 5 ==> x == 5 ==> x == 5 ==> x == 5 ==> x == 5 ==> y * 2 == 64;\nloop invariant i108: x < 6 ==> x == 5 ==> x == 5 ==> x == 5 ==> x == 5 ==> x == 5 ==> y == 64;\nloop invariant i109: x < 6 ==> x == 5 ==> x == 5 ==> x == 5 ==> x == 5 ==> x == 5 ==> x + 1 == 6;\nloop invariant i110: x == (y - 1) / 2;\nloop invariant i111: x + 1 == y;\nloop invariant i112: x < 7;\n*/\nwhile (x < 6) {\n    x++;\n    y *= 2;\n  }\n\n  {;\n//@ assert(x == 6);\n}\n\n}",
        "combined_annotation_num_solver_calls": 32,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = 1;\n\n  /*@\nloop invariant i1: 0 <= x <= 6;\n\n\n\n\n\n\nloop invariant i8: y >= 1;\nloop invariant i9: x < 6 ==> y == (1 << x);\nloop invariant i10: x >= 6 ==> y == (1 << 6);\nloop invariant i11: x >= 6 ==> x == 6;\nloop invariant i12: x < 6 ==> x < 6;\nloop invariant i13: y >= 1 ==> y >= 1;\nloop invariant i14: y < 1 ==> y == 1;\nloop invariant i15: y == 1 ==> y == 1;\nloop invariant i16: y > 1 ==> y > 1;\nloop invariant i17: y <= 1 ==> y <= 1;\nloop invariant i18: y >= 2 ==> y >= 2;\nloop invariant i19: y < 2 ==> y == 1;\nloop invariant i20: y == 2 ==> y == 2;\nloop invariant i21: y > 2 ==> y > 2;\nloop invariant i22: y <= 2 ==> y <= 2;\nloop invariant i23: y >= 4 ==> y >= 4;\n\nloop invariant i25: y == 4 ==> y == 4;\nloop invariant i26: y > 4 ==> y > 4;\nloop invariant i27: y <= 4 ==> y <= 4;\nloop invariant i28: y >= 8 ==> y >= 8;\n\nloop invariant i30: y == 8 ==> y == 8;\nloop invariant i31: y > 8 ==> y > 8;\nloop invariant i32: y <= 8 ==> y <= 8;\nloop invariant i33: y >= 16 ==> y >= 16;\n\nloop invariant i35: y == 16 ==> y == 16;\nloop invariant i36: y > 16 ==> y > 16;\nloop invariant i37: y <= 16 ==> y <= 16;\nloop invariant i38: y >= 32 ==> y >= 32;\n\nloop invariant i40: y == 32 ==> y == 32;\nloop invariant i41: y > 32 ==> y > 32;\nloop invariant i42: y <= 32 ==> y <= 32;\nloop invariant i43: y >= 64 ==> y >= 64;\n\nloop invariant i45: y == 64 ==> y == 64;\nloop invariant i46: y > 64 ==> y > 64;\nloop invariant i47: y <= 64 ==> y <= 64;\nloop invariant i48: y >= 128 ==> y >= 128;\n\nloop invariant i50: y == 128 ==> y == 128;\nloop invariant i51: y > 128 ==> y > 128;\nloop invariant i52: y <= 128 ==> y <= 128;\nloop invariant i53: y >= 256 ==> y >= 256;\n\nloop invariant i55: y == 256 ==> y == 256;\nloop invariant i56: y > 256 ==> y > 256;\nloop invariant i57: y <= 256 ==> y <= 256;\nloop invariant i58: y >= 512 ==> y >= 512;\n\nloop invariant i60: y == 512 ==> y == 512;\nloop invariant i61: y > 512 ==> y > 512;\nloop invariant i62: y <= 512 ==> y <= 512;\nloop invariant i63: y >= 1024 ==> y >= 1024;\n\nloop invariant i65: y == 1024 ==> y == 1024;\nloop invariant i66: y > 1024 ==> y > 1024;\nloop invariant i67: y <= 1024 ==> y <= 1024;\nloop invariant i68: y >= 2048 ==> y >= 2048;\n\nloop invariant i70: y == 2048 ==> y == 2048;\nloop invariant i71: y > 2048 ==> y > 2048;\nloop invariant i72: y <= 2048 ==> y <= 2048;\nloop invariant i73: y >= 4096 ==> y >= 4096;\n\n\nloop invariant i76: x < y;\n\n\n\n\nloop invariant i81: x <= 6 ==> (y == 1 << x);\n\n\n\n\n\n\n\nloop invariant i89: x < 6 ==> x == 5 ==> y * 2 == 64;\nloop invariant i90: x < 6 ==> x == 5 ==> y == 32;\nloop invariant i91: x < 6 ==> x == 5 ==> y * 2 == 32 * 2;\n\nloop invariant i93: x < 6 ==> x == 5 ==> x + 1 == 6;\nloop invariant i94: x < 6 ==> x == 5 ==> x == 5;\nloop invariant i95: x < 6 ==> x == 5 ==> x == 5 ==> y * 2 == 64;\n\nloop invariant i97: x < 6 ==> x == 5 ==> x == 5 ==> x + 1 == 6;\nloop invariant i98: x < 6 ==> x == 5 ==> x == 5 ==> x == 5;\nloop invariant i99: x < 6 ==> x == 5 ==> x == 5 ==> x == 5 ==> y * 2 == 64;\n\nloop invariant i101: x < 6 ==> x == 5 ==> x == 5 ==> x == 5 ==> x + 1 == 6;\nloop invariant i102: x < 6 ==> x == 5 ==> x == 5 ==> x == 5 ==> x == 5;\nloop invariant i103: x < 6 ==> x == 5 ==> x == 5 ==> x == 5 ==> x == 5 ==> y * 2 == 64;\n\nloop invariant i105: x < 6 ==> x == 5 ==> x == 5 ==> x == 5 ==> x == 5 ==> x + 1 == 6;\nloop invariant i106: x < 6 ==> x == 5 ==> x == 5 ==> x == 5 ==> x == 5 ==> x == 5;\nloop invariant i107: x < 6 ==> x == 5 ==> x == 5 ==> x == 5 ==> x == 5 ==> x == 5 ==> y * 2 == 64;\n\nloop invariant i109: x < 6 ==> x == 5 ==> x == 5 ==> x == 5 ==> x == 5 ==> x == 5 ==> x + 1 == 6;\n\n\nloop invariant i112: x < 7;\n*/\nwhile (x < 6) {\n    x++;\n    y *= 2;\n  }\n\n  {;\n//@ assert(x == 6);\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/11.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/15.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/16.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/18.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/20.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/23.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/30.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/37.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/38.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/43.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/46.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/popl.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/07.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/39.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/gulv_simp.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/substring1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/xy10.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/const_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/multivar_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/phases_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/simple_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/simple_safe2.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/simple_safe3.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/simple_safe4.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/underapprox_safe2.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/split.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/13.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/14.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/19.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/32.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/39.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/41.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/44.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/cav.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/05.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/19.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/37.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/gulv.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/pldi082_unbounded.c"
        ],
        "skipped": [],
        "total": 144,
        "success_count": 116,
        "failure_count": 28,
        "success_rate": 0.8055555555555556
    }
}