{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/23.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nint main(){\n   int i, sum=0;\n   int n = unknown1();\n   if( n >= 0){\n\n   for (i=0; i < n; ++i)\n      sum = sum +i;\n\n   {;\n//@ assert(sum >= 0);\n}\n\n   }\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sum = (((i * (i - 1)) / 2) + sum);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sum = (i * (i - 1)) / 2;\nloop invariant sum >= 0;\nloop invariant n >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sum >= i*(i-1)/2;\nloop invariant sum <= n*(n-1)/2;\nloop invariant i >= 0 ==> sum >= i*(i-1)/2;\nloop invariant i < n ==> sum <= n*(n-1)/2;\nloop invariant sum >= 0 ==> sum >= i*(i-1)/2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sum == i * (i - 1) / 2;\nloop invariant n >= 0 ==> 0 <= sum <= n * (n - 1) / 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sum >= 0;\nloop invariant sum == i * (i-1) / 2;\nloop invariant sum == sum + i;\nloop invariant 0 <= sum + i;\nloop invariant sum + i <= sum + i + 1;\nloop invariant sum + i + 1 == sum + i + 1;\nloop invariant sum + i + 1 <= n * (n+1) / 2;\nloop invariant sum + i + 1 <= sum + i + 1;\nloop invariant sum + i + 1 == sum + i + 1;\nloop invariant sum + i + 1 <= sum + i + 1;\nloop invariant sum + i + 1 == sum + i + 1;\nloop invariant sum + i + 1 <= sum + i + 1;\nloop invariant sum + i + 1 == sum + i + 1;\nloop invariant sum + i + 1 <= sum + i + 1;\nloop invariant sum + i + 1 == sum + i + 1;\nloop invariant sum + i + 1 <= sum + i + 1;\nloop invariant sum + i + 1 == sum + i + 1;\nloop invariant sum + i + 1 <= sum + i + 1;\nloop invariant sum + i + 1 == sum + i + 1;\nloop invariant sum + i + 1 <= sum + i + 1;\nloop invariant sum + i + 1 == sum + i + 1;\nloop invariant sum + i + 1 <= sum + i + 1;\nloop invariant sum + i + 1 == sum + i + 1;\nloop invariant sum + i + 1 <= sum + i + 1;\nloop invariant sum + i + 1 == sum + i + 1;\nloop invariant sum + i + 1 <= sum + i + 1;\nloop invariant sum + i + 1 == sum + i + 1;\nloop invariant sum + i + 1 <= sum + i + 1;\nloop invariant sum + i + 1 == sum + i + 1;\nloop invariant sum + i + 1 <= sum + i + 1;\nloop invariant sum + i + 1 == sum + i + 1;\nloop invariant sum + i + 1 <= sum + i + 1;\nloop invariant sum + i + 1 == sum + i + 1;\nloop invariant sum + i + 1 <= sum + i + 1;\nloop invariant sum + i + 1 == sum + i + 1;\nloop invariant sum + i + 1 <= sum + i + 1;\nloop invariant sum + i + 1 == sum + i + 1;\nloop invariant sum + i + 1 <= sum + i + 1;\nloop invariant sum + i + 1 == sum + i + 1;\nloop invariant sum + i + 1 <= sum + i + 1;\nloop invariant sum + i + 1 == sum + i + 1;\nloop invariant sum + i + 1 <= sum + i + 1;\nloop invariant sum + i + 1 == sum + i + 1;\nloop invariant sum + i + 1 <= sum + i + 1;\nloop invariant sum + i + 1 == sum + i + 1;\nloop invariant sum + i + 1 <= sum + i + 1;\nloop invariant sum + i + 1 == sum + i + 1;\nloop invariant sum + i + 1 <= sum + i + 1;\nloop invariant sum + i + 1 == sum + i + 1;\nloop invariant sum + i + 1 <= sum + i + 1;\nloop invariant sum + i + 1 == sum + i + 1;\nloop invariant sum + i + 1 <= sum + i + 1;\nloop invariant sum + i + 1 == sum + i + 1;\nloop invariant sum + i + 1 <= sum + i + 1;\nloop invariant sum + i + 1 == sum + i + 1;\nloop invariant sum + i + 1 <= sum + i + 1;\nloop invariant sum + i + 1 == sum + i + 1;\nloop invariant sum + i + 1 <= sum + i + 1;\nloop invariant sum + i + 1 == sum + i + 1;\nloop invariant sum + i + 1 <= sum + i + 1;\nloop invariant sum + i + 1 == sum + i + 1;\nloop invariant sum + i + 1 <= sum + i + 1;\nloop invariant sum + i + 1 == sum + i + 1;\n*/\n```",
            "```\n/*@\nloop invariant i <= n;\nloop invariant sum >= 0;\nloop invariant sum <= (n * (n - 1)) / 2;\nloop invariant i <= n ==> sum <= sum + i;\nloop invariant i < n ==> sum <= sum + i;\nloop invariant i >= n ==> sum < sum + i;\nloop invariant i < n ==> sum < sum + i;\nloop invariant i < n ==> sum + i <= sum + n;\nloop invariant i < n ==> sum + i <= sum + n * (n - 1) / 2;\nloop invariant i < n ==> sum + i <= sum + (n * (n - 1)) / 2;\nloop invariant i < n ==> sum + i <= sum + n * (n - 1) / 2;\nloop invariant i < n ==> sum + i <= sum + n * (n - 1) / 2;\nloop invariant i < n ==> sum + i <= sum + n * (n - 1) / 2;\nloop invariant i < n ==> sum + i <= sum + n * (n - 1) / 2;\nloop invariant i < n ==> sum + i <= sum + n * (n - 1) / 2;\nloop invariant i < n ==> sum + i <= sum + n * (n - 1) / 2;\nloop invariant i < n ==> sum + i <= sum + n * (n - 1) / 2;\nloop invariant i < n ==> sum + i <= sum + n * (n - 1) / 2;\nloop invariant i < n ==> sum + i <= sum + n * (n - 1) / 2;\nloop invariant i < n ==> sum + i <= sum + n * (n - 1) / 2;\nloop invariant i < n ==> sum + i <= sum + n * (n - 1) / 2;\nloop invariant i < n ==> sum + i <= sum + n * (n - 1) / 2;\nloop invariant i < n ==> sum + i <= sum + n * (n - 1) / 2;\nloop invariant i < n ==> sum + i <= sum + n * (n - 1) / 2;\nloop invariant i < n ==> sum + i <= sum + n * (n - 1) / 2;\nloop invariant i < n ==> sum + i <= sum + n * (n - 1) / 2;\nloop invariant i < n ==> sum + i <= sum + n * (n - 1) / 2;\nloop invariant i < n ==> sum + i <= sum + n * (n - 1) / 2;\nloop invariant i < n ==> sum + i <= sum + n * (n - 1) / 2;\nloop invariant i < n ==> sum + i <= sum + n * (n - 1) / 2;\nloop invariant i < n ==> sum + i <= sum + n * (n - 1) / 2;\nloop invariant i < n ==> sum + i <= sum + n * (n - 1) / 2;\nloop invariant i < n ==> sum + i <= sum + n * (n - 1) / 2;\nloop invariant i < n ==> sum + i <= sum + n * (n - 1) / 2;\nloop invariant i < n ==> sum + i <= sum + n * (n - 1) / 2;\nloop invariant i < n ==> sum + i <= sum + n * (n - 1) / 2;\nloop invariant i < n ==> sum + i <= sum + n * (n - 1) / 2;\nloop invariant i < n ==> sum + i <= sum + n * (n - 1) / 2;\nloop invariant i < n ==> sum + i <= sum + n * (n - 1) / 2;\nloop invariant i < n ==> sum + i <= sum + n * (n - 1) / 2;\nloop invariant i < n ==> sum + i <= sum + n * (n - 1) / 2;\nloop invariant i < n ==> sum + i <= sum + n * (n - 1) / 2;\nloop invariant i < n ==> sum + i <= sum + n * (n - 1) / 2;\nloop invariant i < n ==> sum + i <= sum + n * (n - 1) / 2;\nloop invariant i < n ==> sum + i <= sum + n * (n - 1) / 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sum >= 0;\nloop invariant sum == (i * (i - 1)) / 2;\nloop invariant i == 0 ==> sum == 0;\nloop invariant i < n ==> sum < (n * (n - 1)) / 2;\nloop invariant i >= n ==> sum >= (n * (n - 1)) / 2;\nloop invariant i == n ==> sum == (n * (n - 1)) / 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= sum <= (n * (n + 1)) / 2;\nloop invariant sum >= i;\nloop invariant sum <= (i * (i + 1)) / 2;\nloop invariant sum >= 0;\nloop invariant sum <= n * (n + 1) / 2;\nloop invariant sum >= i;\nloop invariant sum <= (i * (i + 1)) / 2;\nloop invariant sum >= 0;\nloop invariant sum <= n * (n + 1) / 2;\nloop invariant sum >= i;\nloop invariant sum <= (i * (i + 1)) / 2;\nloop invariant sum >= 0;\nloop invariant sum <= n * (n + 1) / 2;\nloop invariant sum >= i;\nloop invariant sum <= (i * (i + 1)) / 2;\nloop invariant sum >= 0;\nloop invariant sum <= n * (n + 1) / 2;\nloop invariant sum >= i;\nloop invariant sum <= (i * (i + 1)) / 2;\nloop invariant sum >= 0;\nloop invariant sum <= n * (n + 1) / 2;\nloop invariant sum >= i;\nloop invariant sum <= (i * (i + 1)) / 2;\nloop invariant sum >= 0;\nloop invariant sum <= n * (n + 1) / 2;\nloop invariant sum >= i;\nloop invariant sum <= (i * (i + 1)) / 2;\nloop invariant sum >= 0;\nloop invariant sum <= n * (n + 1) / 2;\nloop invariant sum >= i;\nloop invariant sum <= (i * (i + 1)) / 2;\nloop invariant sum >= 0;\nloop invariant sum <= n * (n + 1) / 2;\nloop invariant sum >= i;\nloop invariant sum <= (i * (i + 1)) / 2;\nloop invariant sum >= 0;\nloop invariant sum <= n * (n + 1) / 2;\nloop invariant sum >= i;\nloop invariant sum <= (i * (i + 1)) / 2;\nloop invariant sum >= 0;\nloop invariant sum <= n * (n + 1) / 2;\nloop invariant sum >= i;\nloop invariant sum <= (i * (i + 1)) / 2;\nloop invariant sum >= 0;\nloop invariant sum <= n * (n + 1) / 2;\nloop invariant sum >= i;\nloop invariant sum <= (i * (i + 1)) / 2;\nloop invariant sum >= 0;\nloop invariant sum <= n * (n + 1) / 2;\nloop invariant sum >= i;\nloop invariant sum <= (i * (i + 1)) / 2;\nloop invariant sum >= 0;\nloop invariant sum <= n * (n + 1) / 2;\nloop invariant sum >= i;\nloop invariant sum <= (i * (i + 1)) / 2;\nloop invariant sum >= 0;\nloop invariant sum <= n * (n + 1) / 2;\nloop invariant sum >= i;\nloop invariant sum <= (i * (i + 1)) / 2;\nloop invariant sum >= 0;\nloop invariant sum <= n * (n + 1) / 2;\nloop invariant sum >= i;\nloop invariant sum <= (i * (i + 1)) / 2;\nloop invariant sum >= 0;\nloop invariant sum <= n * (n + 1) / 2;\nloop invariant sum >= i;\nloop invariant sum <= (i * (i + 1)) / 2;\nloop invariant sum >= 0;\nloop invariant sum <= n * (n + 1) / 2;\nloop invariant sum >= i;\nloop invariant sum <= (i * (i + 1)) / 2;\nloop invariant sum >= 0;\nloop invariant sum <= n * (n + 1) / 2;\nloop invariant sum >= i;\nloop invariant sum <= (i * (i + 1)) / 2;\nloop invariant sum >= 0;\nloop invariant sum <= n * (n + 1) / 2;\nloop invariant sum >= i;\nloop invariant sum <= (i * (i + 1)) / 2;\nloop invariant sum >= 0;\nloop invariant sum <= n * (n + 1) / 2;\nloop invariant sum >= i;\nloop invariant sum <= (i * (i + 1)) / 2;\nloop invariant sum >= 0;\nloop invariant sum <= n * (n + 1) / 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= sum <= (n*(n+1))/2;\nloop invariant 0 <= n <= 100000;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant sum >= 0;\nloop invariant sum <= (n*(n+1))/2;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant sum >= 0;\nloop invariant sum <= (n*(n+1))/2;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant sum >= 0;\nloop invariant sum <= (n*(n+1))/2;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant sum >= 0;\nloop invariant sum <= (n*(n+1))/2;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant sum >= 0;\nloop invariant sum <= (n*(n+1))/2;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant sum >= 0;\nloop invariant sum <= (n*(n+1))/2;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant sum >= 0;\nloop invariant sum <= (n*(n+1))/2;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant sum >= 0;\nloop invariant sum <= (n*(n+1))/2;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant sum >= 0;\nloop invariant sum <= (n*(n+1))/2;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant sum >= 0;\nloop invariant sum <= (n*(n+1))/2;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant sum >= 0;\nloop invariant sum <= (n*(n+1))/2;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant sum >= 0;\nloop invariant sum <= (n*(n+1))/2;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant sum >= 0;\nloop invariant sum <= (n*(n+1))/2;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant sum >= 0;\nloop invariant sum <= (n*(n+1))/2;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant sum >= 0;\nloop invariant sum <= (n*(n+1))/2;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant sum >= 0;\nloop invariant sum <= (n*(n+1))/2;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant sum >= 0;\nloop invariant sum <= (n*(n+1))/2;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant sum >= 0;\nloop invariant sum <= (n*(n+1))/2;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant sum >= 0;\nloop invariant sum <= (n*(n+1))/2;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant sum >= 0;\nloop invariant sum <= (n*(n+1))/2;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant sum >= 0;\nloop invariant sum <= (n*(n+1))/2;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant sum >= 0;\nloop invariant sum <= (n*(n+1))/2;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant sum >= 0;\nloop invariant sum <= (n*(n+1))/2;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant sum >= 0;\nloop invariant sum <= (n*(n+1))/2;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant sum >= 0;\nloop invariant sum <= (n*(n+1))/2;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant sum >= 0;\nloop invariant sum <= (n*(n+1))/2;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant sum >= 0;\nloop invariant sum <= (n*(n+1))/2;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant sum >= 0;\nloop invariant sum <= (n*(n+1))/2;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant sum >= 0;\nloop invariant sum <= (n*(n+1))/2;\nloop invariant i >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= sum <= (n * (n + 1))/2;\nloop invariant sum >= 0; loop invariant sum <= (n * (n + 1))/2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sum >= 0;\nloop invariant sum >= i * (i - 1) / 2;\nloop invariant sum <= (i * (i + 1)) / 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sum >= i * (i - 1) / 2;\nloop invariant sum >= 0;\n*/\n```",
            "```\n/*@\nloop invariant sum >= 0;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant sum <= (i * (i + 1)) / 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sum >= 0;\nloop invariant sum == (i * (i + 1)) / 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= sum <= (n * (n+1) / 2);\nloop invariant 0 <= i <= n;\nloop invariant sum >= 0;\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant sum <= (n * (n+1) / 2);\nloop invariant sum >= (i * (i-1) / 2);\nloop invariant sum <= (i * (i+1) / 2);\nloop invariant sum >= (i * i / 2);\nloop invariant sum <= (i * (n+1) / 2);\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sum = (((i * (i - 1)) / 2) + sum);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nint main(){\n   int i, sum=0;\n   int n = unknown1();\n   if( n >= 0){\n\n   /*@\nloop invariant i1: 0 <= i <= n;\n\n*/\nfor (i=0; i < n; ++i)\n      sum = sum +i;\n\n   {;\n//@ assert(sum >= 0);\n}\n\n   }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sum = (i * (i - 1)) / 2;\nloop invariant sum >= 0;\nloop invariant n >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nint main(){\n   int i, sum=0;\n   int n = unknown1();\n   if( n >= 0){\n\n   /*@\nloop invariant i1: 0 <= i <= n;\n\nloop invariant i3: sum >= 0;\nloop invariant i4: n >= 0;\n*/\nfor (i=0; i < n; ++i)\n      sum = sum +i;\n\n   {;\n//@ assert(sum >= 0);\n}\n\n   }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sum >= i*(i-1)/2;\nloop invariant sum <= n*(n-1)/2;\nloop invariant i >= 0 ==> sum >= i*(i-1)/2;\nloop invariant i < n ==> sum <= n*(n-1)/2;\nloop invariant sum >= 0 ==> sum >= i*(i-1)/2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nint main(){\n   int i, sum=0;\n   int n = unknown1();\n   if( n >= 0){\n\n   /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: sum >= i*(i-1)/2;\n\nloop invariant i4: i >= 0 ==> sum >= i*(i-1)/2;\n\nloop invariant i6: sum >= 0 ==> sum >= i*(i-1)/2;\n*/\nfor (i=0; i < n; ++i)\n      sum = sum +i;\n\n   {;\n//@ assert(sum >= 0);\n}\n\n   }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sum == i * (i - 1) / 2;\nloop invariant n >= 0 ==> 0 <= sum <= n * (n - 1) / 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nint main(){\n   int i, sum=0;\n   int n = unknown1();\n   if( n >= 0){\n\n   /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: sum == i * (i - 1) / 2;\n\n*/\nfor (i=0; i < n; ++i)\n      sum = sum +i;\n\n   {;\n//@ assert(sum >= 0);\n}\n\n   }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sum >= 0;\nloop invariant sum == i * (i-1) / 2;\nloop invariant sum == sum + i;\nloop invariant 0 <= sum + i;\nloop invariant sum + i <= sum + i + 1;\nloop invariant sum + i + 1 == sum + i + 1;\nloop invariant sum + i + 1 <= n * (n+1) / 2;\nloop invariant sum + i + 1 <= sum + i + 1;\nloop invariant sum + i + 1 == sum + i + 1;\nloop invariant sum + i + 1 <= sum + i + 1;\nloop invariant sum + i + 1 == sum + i + 1;\nloop invariant sum + i + 1 <= sum + i + 1;\nloop invariant sum + i + 1 == sum + i + 1;\nloop invariant sum + i + 1 <= sum + i + 1;\nloop invariant sum + i + 1 == sum + i + 1;\nloop invariant sum + i + 1 <= sum + i + 1;\nloop invariant sum + i + 1 == sum + i + 1;\nloop invariant sum + i + 1 <= sum + i + 1;\nloop invariant sum + i + 1 == sum + i + 1;\nloop invariant sum + i + 1 <= sum + i + 1;\nloop invariant sum + i + 1 == sum + i + 1;\nloop invariant sum + i + 1 <= sum + i + 1;\nloop invariant sum + i + 1 == sum + i + 1;\nloop invariant sum + i + 1 <= sum + i + 1;\nloop invariant sum + i + 1 == sum + i + 1;\nloop invariant sum + i + 1 <= sum + i + 1;\nloop invariant sum + i + 1 == sum + i + 1;\nloop invariant sum + i + 1 <= sum + i + 1;\nloop invariant sum + i + 1 == sum + i + 1;\nloop invariant sum + i + 1 <= sum + i + 1;\nloop invariant sum + i + 1 == sum + i + 1;\nloop invariant sum + i + 1 <= sum + i + 1;\nloop invariant sum + i + 1 == sum + i + 1;\nloop invariant sum + i + 1 <= sum + i + 1;\nloop invariant sum + i + 1 == sum + i + 1;\nloop invariant sum + i + 1 <= sum + i + 1;\nloop invariant sum + i + 1 == sum + i + 1;\nloop invariant sum + i + 1 <= sum + i + 1;\nloop invariant sum + i + 1 == sum + i + 1;\nloop invariant sum + i + 1 <= sum + i + 1;\nloop invariant sum + i + 1 == sum + i + 1;\nloop invariant sum + i + 1 <= sum + i + 1;\nloop invariant sum + i + 1 == sum + i + 1;\nloop invariant sum + i + 1 <= sum + i + 1;\nloop invariant sum + i + 1 == sum + i + 1;\nloop invariant sum + i + 1 <= sum + i + 1;\nloop invariant sum + i + 1 == sum + i + 1;\nloop invariant sum + i + 1 <= sum + i + 1;\nloop invariant sum + i + 1 == sum + i + 1;\nloop invariant sum + i + 1 <= sum + i + 1;\nloop invariant sum + i + 1 == sum + i + 1;\nloop invariant sum + i + 1 <= sum + i + 1;\nloop invariant sum + i + 1 == sum + i + 1;\nloop invariant sum + i + 1 <= sum + i + 1;\nloop invariant sum + i + 1 == sum + i + 1;\nloop invariant sum + i + 1 <= sum + i + 1;\nloop invariant sum + i + 1 == sum + i + 1;\nloop invariant sum + i + 1 <= sum + i + 1;\nloop invariant sum + i + 1 == sum + i + 1;\nloop invariant sum + i + 1 <= sum + i + 1;\nloop invariant sum + i + 1 == sum + i + 1;\nloop invariant sum + i + 1 <= sum + i + 1;\nloop invariant sum + i + 1 == sum + i + 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nint main(){\n   int i, sum=0;\n   int n = unknown1();\n   if( n >= 0){\n\n   /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: sum >= 0;\nloop invariant i3: sum == i * (i-1) / 2;\n\nloop invariant i5: 0 <= sum + i;\nloop invariant i6: sum + i <= sum + i + 1;\nloop invariant i7: sum + i + 1 == sum + i + 1;\n\nloop invariant i9: sum + i + 1 <= sum + i + 1;\n*/\nfor (i=0; i < n; ++i)\n      sum = sum +i;\n\n   {;\n//@ assert(sum >= 0);\n}\n\n   }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant i <= n;\nloop invariant sum >= 0;\nloop invariant sum <= (n * (n - 1)) / 2;\nloop invariant i <= n ==> sum <= sum + i;\nloop invariant i < n ==> sum <= sum + i;\nloop invariant i >= n ==> sum < sum + i;\nloop invariant i < n ==> sum < sum + i;\nloop invariant i < n ==> sum + i <= sum + n;\nloop invariant i < n ==> sum + i <= sum + n * (n - 1) / 2;\nloop invariant i < n ==> sum + i <= sum + (n * (n - 1)) / 2;\nloop invariant i < n ==> sum + i <= sum + n * (n - 1) / 2;\nloop invariant i < n ==> sum + i <= sum + n * (n - 1) / 2;\nloop invariant i < n ==> sum + i <= sum + n * (n - 1) / 2;\nloop invariant i < n ==> sum + i <= sum + n * (n - 1) / 2;\nloop invariant i < n ==> sum + i <= sum + n * (n - 1) / 2;\nloop invariant i < n ==> sum + i <= sum + n * (n - 1) / 2;\nloop invariant i < n ==> sum + i <= sum + n * (n - 1) / 2;\nloop invariant i < n ==> sum + i <= sum + n * (n - 1) / 2;\nloop invariant i < n ==> sum + i <= sum + n * (n - 1) / 2;\nloop invariant i < n ==> sum + i <= sum + n * (n - 1) / 2;\nloop invariant i < n ==> sum + i <= sum + n * (n - 1) / 2;\nloop invariant i < n ==> sum + i <= sum + n * (n - 1) / 2;\nloop invariant i < n ==> sum + i <= sum + n * (n - 1) / 2;\nloop invariant i < n ==> sum + i <= sum + n * (n - 1) / 2;\nloop invariant i < n ==> sum + i <= sum + n * (n - 1) / 2;\nloop invariant i < n ==> sum + i <= sum + n * (n - 1) / 2;\nloop invariant i < n ==> sum + i <= sum + n * (n - 1) / 2;\nloop invariant i < n ==> sum + i <= sum + n * (n - 1) / 2;\nloop invariant i < n ==> sum + i <= sum + n * (n - 1) / 2;\nloop invariant i < n ==> sum + i <= sum + n * (n - 1) / 2;\nloop invariant i < n ==> sum + i <= sum + n * (n - 1) / 2;\nloop invariant i < n ==> sum + i <= sum + n * (n - 1) / 2;\nloop invariant i < n ==> sum + i <= sum + n * (n - 1) / 2;\nloop invariant i < n ==> sum + i <= sum + n * (n - 1) / 2;\nloop invariant i < n ==> sum + i <= sum + n * (n - 1) / 2;\nloop invariant i < n ==> sum + i <= sum + n * (n - 1) / 2;\nloop invariant i < n ==> sum + i <= sum + n * (n - 1) / 2;\nloop invariant i < n ==> sum + i <= sum + n * (n - 1) / 2;\nloop invariant i < n ==> sum + i <= sum + n * (n - 1) / 2;\nloop invariant i < n ==> sum + i <= sum + n * (n - 1) / 2;\nloop invariant i < n ==> sum + i <= sum + n * (n - 1) / 2;\nloop invariant i < n ==> sum + i <= sum + n * (n - 1) / 2;\nloop invariant i < n ==> sum + i <= sum + n * (n - 1) / 2;\nloop invariant i < n ==> sum + i <= sum + n * (n - 1) / 2;\nloop invariant i < n ==> sum + i <= sum + n * (n - 1) / 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nint main(){\n   int i, sum=0;\n   int n = unknown1();\n   if( n >= 0){\n\n   /*@\nloop invariant i1: i <= n;\nloop invariant i2: sum >= 0;\n\nloop invariant i4: i <= n ==> sum <= sum + i;\nloop invariant i5: i < n ==> sum <= sum + i;\n\n\nloop invariant i8: i < n ==> sum + i <= sum + n;\nloop invariant i9: i < n ==> sum + i <= sum + n * (n - 1) / 2;\nloop invariant i10: i < n ==> sum + i <= sum + (n * (n - 1)) / 2;\n*/\nfor (i=0; i < n; ++i)\n      sum = sum +i;\n\n   {;\n//@ assert(sum >= 0);\n}\n\n   }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sum >= 0;\nloop invariant sum == (i * (i - 1)) / 2;\nloop invariant i == 0 ==> sum == 0;\nloop invariant i < n ==> sum < (n * (n - 1)) / 2;\nloop invariant i >= n ==> sum >= (n * (n - 1)) / 2;\nloop invariant i == n ==> sum == (n * (n - 1)) / 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nint main(){\n   int i, sum=0;\n   int n = unknown1();\n   if( n >= 0){\n\n   /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: sum >= 0;\nloop invariant i3: sum == (i * (i - 1)) / 2;\nloop invariant i4: i == 0 ==> sum == 0;\n\nloop invariant i6: i >= n ==> sum >= (n * (n - 1)) / 2;\nloop invariant i7: i == n ==> sum == (n * (n - 1)) / 2;\n*/\nfor (i=0; i < n; ++i)\n      sum = sum +i;\n\n   {;\n//@ assert(sum >= 0);\n}\n\n   }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= sum <= (n * (n + 1)) / 2;\nloop invariant sum >= i;\nloop invariant sum <= (i * (i + 1)) / 2;\nloop invariant sum >= 0;\nloop invariant sum <= n * (n + 1) / 2;\nloop invariant sum >= i;\nloop invariant sum <= (i * (i + 1)) / 2;\nloop invariant sum >= 0;\nloop invariant sum <= n * (n + 1) / 2;\nloop invariant sum >= i;\nloop invariant sum <= (i * (i + 1)) / 2;\nloop invariant sum >= 0;\nloop invariant sum <= n * (n + 1) / 2;\nloop invariant sum >= i;\nloop invariant sum <= (i * (i + 1)) / 2;\nloop invariant sum >= 0;\nloop invariant sum <= n * (n + 1) / 2;\nloop invariant sum >= i;\nloop invariant sum <= (i * (i + 1)) / 2;\nloop invariant sum >= 0;\nloop invariant sum <= n * (n + 1) / 2;\nloop invariant sum >= i;\nloop invariant sum <= (i * (i + 1)) / 2;\nloop invariant sum >= 0;\nloop invariant sum <= n * (n + 1) / 2;\nloop invariant sum >= i;\nloop invariant sum <= (i * (i + 1)) / 2;\nloop invariant sum >= 0;\nloop invariant sum <= n * (n + 1) / 2;\nloop invariant sum >= i;\nloop invariant sum <= (i * (i + 1)) / 2;\nloop invariant sum >= 0;\nloop invariant sum <= n * (n + 1) / 2;\nloop invariant sum >= i;\nloop invariant sum <= (i * (i + 1)) / 2;\nloop invariant sum >= 0;\nloop invariant sum <= n * (n + 1) / 2;\nloop invariant sum >= i;\nloop invariant sum <= (i * (i + 1)) / 2;\nloop invariant sum >= 0;\nloop invariant sum <= n * (n + 1) / 2;\nloop invariant sum >= i;\nloop invariant sum <= (i * (i + 1)) / 2;\nloop invariant sum >= 0;\nloop invariant sum <= n * (n + 1) / 2;\nloop invariant sum >= i;\nloop invariant sum <= (i * (i + 1)) / 2;\nloop invariant sum >= 0;\nloop invariant sum <= n * (n + 1) / 2;\nloop invariant sum >= i;\nloop invariant sum <= (i * (i + 1)) / 2;\nloop invariant sum >= 0;\nloop invariant sum <= n * (n + 1) / 2;\nloop invariant sum >= i;\nloop invariant sum <= (i * (i + 1)) / 2;\nloop invariant sum >= 0;\nloop invariant sum <= n * (n + 1) / 2;\nloop invariant sum >= i;\nloop invariant sum <= (i * (i + 1)) / 2;\nloop invariant sum >= 0;\nloop invariant sum <= n * (n + 1) / 2;\nloop invariant sum >= i;\nloop invariant sum <= (i * (i + 1)) / 2;\nloop invariant sum >= 0;\nloop invariant sum <= n * (n + 1) / 2;\nloop invariant sum >= i;\nloop invariant sum <= (i * (i + 1)) / 2;\nloop invariant sum >= 0;\nloop invariant sum <= n * (n + 1) / 2;\nloop invariant sum >= i;\nloop invariant sum <= (i * (i + 1)) / 2;\nloop invariant sum >= 0;\nloop invariant sum <= n * (n + 1) / 2;\nloop invariant sum >= i;\nloop invariant sum <= (i * (i + 1)) / 2;\nloop invariant sum >= 0;\nloop invariant sum <= n * (n + 1) / 2;\nloop invariant sum >= i;\nloop invariant sum <= (i * (i + 1)) / 2;\nloop invariant sum >= 0;\nloop invariant sum <= n * (n + 1) / 2;\nloop invariant sum >= i;\nloop invariant sum <= (i * (i + 1)) / 2;\nloop invariant sum >= 0;\nloop invariant sum <= n * (n + 1) / 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nint main(){\n   int i, sum=0;\n   int n = unknown1();\n   if( n >= 0){\n\n   /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= sum <= (n * (n + 1)) / 2;\n\nloop invariant i4: sum <= (i * (i + 1)) / 2;\nloop invariant i5: sum >= 0;\nloop invariant i6: sum <= n * (n + 1) / 2;\n*/\nfor (i=0; i < n; ++i)\n      sum = sum +i;\n\n   {;\n//@ assert(sum >= 0);\n}\n\n   }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= sum <= (n*(n+1))/2;\nloop invariant 0 <= n <= 100000;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant sum >= 0;\nloop invariant sum <= (n*(n+1))/2;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant sum >= 0;\nloop invariant sum <= (n*(n+1))/2;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant sum >= 0;\nloop invariant sum <= (n*(n+1))/2;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant sum >= 0;\nloop invariant sum <= (n*(n+1))/2;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant sum >= 0;\nloop invariant sum <= (n*(n+1))/2;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant sum >= 0;\nloop invariant sum <= (n*(n+1))/2;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant sum >= 0;\nloop invariant sum <= (n*(n+1))/2;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant sum >= 0;\nloop invariant sum <= (n*(n+1))/2;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant sum >= 0;\nloop invariant sum <= (n*(n+1))/2;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant sum >= 0;\nloop invariant sum <= (n*(n+1))/2;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant sum >= 0;\nloop invariant sum <= (n*(n+1))/2;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant sum >= 0;\nloop invariant sum <= (n*(n+1))/2;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant sum >= 0;\nloop invariant sum <= (n*(n+1))/2;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant sum >= 0;\nloop invariant sum <= (n*(n+1))/2;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant sum >= 0;\nloop invariant sum <= (n*(n+1))/2;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant sum >= 0;\nloop invariant sum <= (n*(n+1))/2;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant sum >= 0;\nloop invariant sum <= (n*(n+1))/2;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant sum >= 0;\nloop invariant sum <= (n*(n+1))/2;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant sum >= 0;\nloop invariant sum <= (n*(n+1))/2;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant sum >= 0;\nloop invariant sum <= (n*(n+1))/2;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant sum >= 0;\nloop invariant sum <= (n*(n+1))/2;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant sum >= 0;\nloop invariant sum <= (n*(n+1))/2;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant sum >= 0;\nloop invariant sum <= (n*(n+1))/2;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant sum >= 0;\nloop invariant sum <= (n*(n+1))/2;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant sum >= 0;\nloop invariant sum <= (n*(n+1))/2;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant sum >= 0;\nloop invariant sum <= (n*(n+1))/2;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant sum >= 0;\nloop invariant sum <= (n*(n+1))/2;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant sum >= 0;\nloop invariant sum <= (n*(n+1))/2;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant sum >= 0;\nloop invariant sum <= (n*(n+1))/2;\nloop invariant i >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nint main(){\n   int i, sum=0;\n   int n = unknown1();\n   if( n >= 0){\n\n   /*@\n\n\nloop invariant i3: i >= 0;\nloop invariant i4: i <= n;\nloop invariant i5: sum >= 0;\n\n*/\nfor (i=0; i < n; ++i)\n      sum = sum +i;\n\n   {;\n//@ assert(sum >= 0);\n}\n\n   }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= sum <= (n * (n + 1))/2;\nloop invariant sum >= 0; loop invariant sum <= (n * (n + 1))/2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nint main(){\n   int i, sum=0;\n   int n = unknown1();\n   if( n >= 0){\n\n   /*@\n\n\n*/\nfor (i=0; i < n; ++i)\n      sum = sum +i;\n\n   {;\n//@ assert(sum >= 0);\n}\n\n   }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sum >= 0;\nloop invariant sum >= i * (i - 1) / 2;\nloop invariant sum <= (i * (i + 1)) / 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nint main(){\n   int i, sum=0;\n   int n = unknown1();\n   if( n >= 0){\n\n   /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: sum >= 0;\nloop invariant i3: sum >= i * (i - 1) / 2;\nloop invariant i4: sum <= (i * (i + 1)) / 2;\n*/\nfor (i=0; i < n; ++i)\n      sum = sum +i;\n\n   {;\n//@ assert(sum >= 0);\n}\n\n   }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sum >= i * (i - 1) / 2;\nloop invariant sum >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nint main(){\n   int i, sum=0;\n   int n = unknown1();\n   if( n >= 0){\n\n   /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: sum >= i * (i - 1) / 2;\nloop invariant i3: sum >= 0;\n*/\nfor (i=0; i < n; ++i)\n      sum = sum +i;\n\n   {;\n//@ assert(sum >= 0);\n}\n\n   }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant sum >= 0;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant sum <= (i * (i + 1)) / 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nint main(){\n   int i, sum=0;\n   int n = unknown1();\n   if( n >= 0){\n\n   /*@\nloop invariant i1: sum >= 0;\nloop invariant i2: i >= 0;\nloop invariant i3: i <= n;\nloop invariant i4: sum <= (i * (i + 1)) / 2;\n*/\nfor (i=0; i < n; ++i)\n      sum = sum +i;\n\n   {;\n//@ assert(sum >= 0);\n}\n\n   }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sum >= 0;\nloop invariant sum == (i * (i + 1)) / 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nint main(){\n   int i, sum=0;\n   int n = unknown1();\n   if( n >= 0){\n\n   /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: sum >= 0;\n\n*/\nfor (i=0; i < n; ++i)\n      sum = sum +i;\n\n   {;\n//@ assert(sum >= 0);\n}\n\n   }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= sum <= (n * (n+1) / 2);\nloop invariant 0 <= i <= n;\nloop invariant sum >= 0;\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant sum <= (n * (n+1) / 2);\nloop invariant sum >= (i * (i-1) / 2);\nloop invariant sum <= (i * (i+1) / 2);\nloop invariant sum >= (i * i / 2);\nloop invariant sum <= (i * (n+1) / 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nint main(){\n   int i, sum=0;\n   int n = unknown1();\n   if( n >= 0){\n\n   /*@\n\nloop invariant i2: 0 <= i <= n;\nloop invariant i3: sum >= 0;\nloop invariant i4: i <= n;\nloop invariant i5: i >= 0;\n\nloop invariant i7: sum >= (i * (i-1) / 2);\nloop invariant i8: sum <= (i * (i+1) / 2);\n\n\n*/\nfor (i=0; i < n; ++i)\n      sum = sum +i;\n\n   {;\n//@ assert(sum >= 0);\n}\n\n   }\n}",
                "checker_output_after_prune": true
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 16: Assignment operators not allowed in annotations.",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nint main(){\n   int i, sum=0;\n   int n = unknown1();\n   if( n >= 0){\n\n   /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: sum = (((i * (i - 1)) / 2) + sum);\nloop invariant i3: sum = (i * (i - 1)) / 2;\nloop invariant i4: sum >= 0;\nloop invariant i5: n >= 0;\nloop invariant i6: sum >= i*(i-1)/2;\nloop invariant i7: sum <= n*(n-1)/2;\nloop invariant i8: i >= 0 ==> sum >= i*(i-1)/2;\nloop invariant i9: i < n ==> sum <= n*(n-1)/2;\nloop invariant i10: sum >= 0 ==> sum >= i*(i-1)/2;\nloop invariant i11: sum == i * (i - 1) / 2;\nloop invariant i12: n >= 0 ==> 0 <= sum <= n * (n - 1) / 2;\nloop invariant i13: sum == i * (i-1) / 2;\nloop invariant i14: sum == sum + i;\nloop invariant i15: 0 <= sum + i;\nloop invariant i16: sum + i <= sum + i + 1;\nloop invariant i17: sum + i + 1 == sum + i + 1;\nloop invariant i18: sum + i + 1 <= n * (n+1) / 2;\nloop invariant i19: sum + i + 1 <= sum + i + 1;\nloop invariant i20: i <= n;\nloop invariant i21: sum <= (n * (n - 1)) / 2;\nloop invariant i22: i <= n ==> sum <= sum + i;\nloop invariant i23: i < n ==> sum <= sum + i;\nloop invariant i24: i >= n ==> sum < sum + i;\nloop invariant i25: i < n ==> sum < sum + i;\nloop invariant i26: i < n ==> sum + i <= sum + n;\nloop invariant i27: i < n ==> sum + i <= sum + n * (n - 1) / 2;\nloop invariant i28: i < n ==> sum + i <= sum + (n * (n - 1)) / 2;\nloop invariant i29: sum == (i * (i - 1)) / 2;\nloop invariant i30: i == 0 ==> sum == 0;\nloop invariant i31: i < n ==> sum < (n * (n - 1)) / 2;\nloop invariant i32: i >= n ==> sum >= (n * (n - 1)) / 2;\nloop invariant i33: i == n ==> sum == (n * (n - 1)) / 2;\nloop invariant i34: 0 <= sum <= (n * (n + 1)) / 2;\nloop invariant i35: sum >= i;\nloop invariant i36: sum <= (i * (i + 1)) / 2;\nloop invariant i37: sum <= n * (n + 1) / 2;\nloop invariant i38: 0 <= sum <= (n*(n+1))/2;\nloop invariant i39: 0 <= n <= 100000;\nloop invariant i40: i >= 0;\nloop invariant i41: sum <= (n*(n+1))/2;\nloop invariant i42: 0 <= sum <= (n * (n + 1))/2;\nloop invariant i43: sum >= 0; loop invariant sum <= (n * (n + 1))/2;\nloop invariant i44: sum >= i * (i - 1) / 2;\nloop invariant i45: sum == (i * (i + 1)) / 2;\nloop invariant i46: 0 <= sum <= (n * (n+1) / 2);\nloop invariant i47: sum <= (n * (n+1) / 2);\nloop invariant i48: sum >= (i * (i-1) / 2);\nloop invariant i49: sum <= (i * (i+1) / 2);\nloop invariant i50: sum >= (i * i / 2);\nloop invariant i51: sum <= (i * (n+1) / 2);\n*/\nfor (i=0; i < n; ++i)\n      sum = sum +i;\n\n   {;\n//@ assert(sum >= 0);\n}\n\n   }\n}",
        "combined_annotation_num_solver_calls": 12,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nint main(){\n   int i, sum=0;\n   int n = unknown1();\n   if( n >= 0){\n\n   /*@\nloop invariant i1: 0 <= i <= n;\n\n\nloop invariant i4: sum >= 0;\nloop invariant i5: n >= 0;\nloop invariant i6: sum >= i*(i-1)/2;\n\nloop invariant i8: i >= 0 ==> sum >= i*(i-1)/2;\n\nloop invariant i10: sum >= 0 ==> sum >= i*(i-1)/2;\nloop invariant i11: sum == i * (i - 1) / 2;\n\nloop invariant i13: sum == i * (i-1) / 2;\n\nloop invariant i15: 0 <= sum + i;\nloop invariant i16: sum + i <= sum + i + 1;\nloop invariant i17: sum + i + 1 == sum + i + 1;\n\nloop invariant i19: sum + i + 1 <= sum + i + 1;\nloop invariant i20: i <= n;\n\nloop invariant i22: i <= n ==> sum <= sum + i;\nloop invariant i23: i < n ==> sum <= sum + i;\n\n\nloop invariant i26: i < n ==> sum + i <= sum + n;\nloop invariant i27: i < n ==> sum + i <= sum + n * (n - 1) / 2;\nloop invariant i28: i < n ==> sum + i <= sum + (n * (n - 1)) / 2;\nloop invariant i29: sum == (i * (i - 1)) / 2;\nloop invariant i30: i == 0 ==> sum == 0;\n\nloop invariant i32: i >= n ==> sum >= (n * (n - 1)) / 2;\nloop invariant i33: i == n ==> sum == (n * (n - 1)) / 2;\nloop invariant i34: 0 <= sum <= (n * (n + 1)) / 2;\n\nloop invariant i36: sum <= (i * (i + 1)) / 2;\nloop invariant i37: sum <= n * (n + 1) / 2;\nloop invariant i38: 0 <= sum <= (n*(n+1))/2;\n\nloop invariant i40: i >= 0;\nloop invariant i41: sum <= (n*(n+1))/2;\nloop invariant i42: 0 <= sum <= (n * (n + 1))/2;\nloop invariant i43: sum >= 0; loop invariant sum <= (n * (n + 1))/2;\nloop invariant i44: sum >= i * (i - 1) / 2;\n\nloop invariant i46: 0 <= sum <= (n * (n+1) / 2);\nloop invariant i47: sum <= (n * (n+1) / 2);\nloop invariant i48: sum >= (i * (i-1) / 2);\nloop invariant i49: sum <= (i * (i+1) / 2);\n\nloop invariant i51: sum <= (i * (n+1) / 2);\n*/\nfor (i=0; i < n; ++i)\n      sum = sum +i;\n\n   {;\n//@ assert(sum >= 0);\n}\n\n   }\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/11.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/15.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/16.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/18.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/20.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/23.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/split.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/13.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/14.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/19.c"
        ],
        "skipped": [],
        "total": 115,
        "success_count": 97,
        "failure_count": 18,
        "success_rate": 0.8434782608695652
    }
}