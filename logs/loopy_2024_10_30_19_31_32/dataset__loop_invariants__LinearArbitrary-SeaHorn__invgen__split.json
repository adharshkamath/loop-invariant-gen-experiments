{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/split.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int k = 100;\n  int b = 0;\n  int i;\n  int j;\n  int n;\n  i = j = 0;\n  for( n = 0 ; n < 2*k ; n++ ) {\n    \n    if(b) {\n      i++;\n    } else {\n      j++;\n    }\n    b = !b;\n  }\n  {;\n//@ assert(i == j);\n}\n\n}",
        "success": false,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= i <= k;\nloop invariant 0 <= j <= k;\nloop invariant i + j == n;\nloop invariant b == (n % 2 == 0);\nloop invariant (i == n/2 || j == n/2) ==> (i == j);\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= j; loop invariant i + j <= k; loop invariant i >= 0; loop invariant j >= 0; loop invariant b == !(n % 2); loop invariant i <= k; loop invariant j <= k; loop invariant i + j == n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= k;\nloop invariant 0 <= j <= k;\nloop invariant i + j == n;\nloop invariant i == j ==> n % 2 == 0;\nloop invariant i != j ==> n % 2 == 1;\nloop invariant i >= 0 ==> i + j <= 2*k;\nloop invariant i < k ==> i + j < 2*k;\nloop invariant i >= k ==> i + j == 2*k;\nloop invariant j >= 0 ==> i + j <= 2*k;\nloop invariant j < k ==> i + j < 2*k;\nloop invariant j >= k ==> i + j == 2*k;\nloop invariant i + j < 2*k ==> n < 2*k;\nloop invariant i + j == 2*k ==> n == 2*k;\nloop invariant i + j > 0 ==> n > 0;\nloop invariant i + j == 0 ==> n == 0;\nloop invariant i + j < 2*k ==> n < 2*k;\nloop invariant i + j == 2*k ==> n == 2*k;\nloop invariant i + j > 0 ==> n > 0;\nloop invariant i + j == 0 ==> n == 0;\nloop invariant i + j < 2*k ==> n < 2*k;\nloop invariant i + j == 2*k ==> n == 2*k;\nloop invariant i + j > 0 ==> n > 0;\nloop invariant i + j == 0 ==> n == 0;\nloop invariant i + j < 2*k ==> n < 2*k;\nloop invariant i + j == 2*k ==> n == 2*k;\nloop invariant i + j > 0 ==> n > 0;\nloop invariant i + j == 0 ==> n == 0;\nloop invariant i + j < 2*k ==> n < 2*k;\nloop invariant i + j == 2*k ==> n == 2*k;\nloop invariant i + j > 0 ==> n > 0;\nloop invariant i + j == 0 ==> n == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= k;\nloop invariant 0 <= j <= k;\nloop invariant i + j <= 2*k;\nloop invariant i >= j;\nloop invariant (b == 0) ==> i == k;\nloop invariant (b == 1) ==> j == k;\nloop invariant (b == 0 || b == 1);\nloop invariant (n >= 0 && n < 2*k);\nloop invariant (b == 0 && n < k) ==> i == n;\nloop invariant (b == 1 && n < k) ==> j == n;\nloop invariant (b == 0 && n >= k) ==> i == k;\nloop invariant (b == 1 && n >= k) ==> j == k;\nloop invariant (b == 0 && n < k) ==> j == 0;\nloop invariant (b == 1 && n < k) ==> i == 0;\nloop invariant (b == 0 && n < k) ==> i >= j;\nloop invariant (b == 1 && n < k) ==> j >= i;\nloop invariant (b == 0 && n >= k) ==> i >= j;\nloop invariant (b == 1 && n >= k) ==> j >= i;\nloop invariant (b == 0 && n >= k) ==> j == 0;\nloop invariant (b == 1 && n >= k) ==> i == 0;\nloop invariant (b == 0 && n >= k) ==> i >= j;\nloop invariant (b == 1 && n >= k) ==> j >= i;\nloop invariant (b == 0 && n >= k) ==> j == 0;\nloop invariant (b == 1 && n >= k) ==> i == 0;\nloop invariant (b == 0 && n >= k) ==> i >= j;\nloop invariant (b == 1 && n >= k) ==> j >= i;\nloop invariant (b == 0 && n >= k) ==> j == 0;\nloop invariant (b == 1 && n >= k) ==> i == 0;\nloop invariant (b == 0 && n >= k) ==> i >= j;\nloop invariant (b == 1 && n >= k) ==> j >= i;\nloop invariant (b == 0 && n >= k) ==> j == 0;\nloop invariant (b == 1 && n >= k) ==> i == 0;\nloop invariant (b == 0 && n >= k) ==> i >= j;\nloop invariant (b == 1 && n >= k) ==> j >= i;\nloop invariant (b == 0 && n >= k) ==> j == 0;\nloop invariant (b == 1 && n >= k) ==> i == 0;\nloop invariant (b == 0 && n >= k) ==> i >= j;\nloop invariant (b == 1 && n >= k) ==> j >= i;\nloop invariant (b == 0 && n >= k) ==> j == 0;\nloop invariant (b == 1 && n >= k) ==> i == 0;\nloop invariant (b == 0 && n >= k) ==> i >= j;\nloop invariant (b == 1 && n >= k) ==> j >= i;\nloop invariant (b == 0 && n >= k) ==> j == 0;\nloop invariant (b == 1 && n >= k) ==> i == 0;\nloop invariant (b == 0 && n >= k) ==> i >= j;\nloop invariant (b == 1 && n >= k) ==> j >= i;\nloop invariant (b == 0 && n >= k) ==> j == 0;\nloop invariant (b == 1 && n >= k) ==> i == 0;\nloop invariant (b == 0 && n >= k) ==> i >= j;\nloop invariant (b == 1 && n >= k) ==> j >= i;\nloop invariant (b == 0 && n >= k) ==> j == 0;\nloop invariant (b == 1 && n >= k) ==> i == 0;\nloop invariant (b == 0 && n >= k) ==> i >= j;\nloop invariant (b == 1 && n >= k) ==> j >= i;\nloop invariant (b == 0 && n >= k) ==> j == 0;\nloop invariant (b == 1 && n >= k) ==> i == 0;\nloop invariant (b == 0 && n >= k) ==> i >= j;\nloop invariant (b == 1 && n >= k) ==> j >= i;\nloop invariant (b == 0 && n >= k) ==> j == 0;\nloop invariant (b == 1 && n >= k) ==> i == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 100;\nloop invariant 0 <= j <= 100;\nloop invariant i == j;\nloop invariant i + j == 100;\nloop invariant !(b && b == 0);\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant b != 0 ==> i < 100;\nloop invariant !b ==> j < 100;\nloop invariant i == j ==> b == 0;\nloop invariant !(i == j) ==> b == 1;\nloop invariant i == j ==> i + j == 100;\nloop invariant i < j ==> i + j != 100;\nloop invariant j < i ==> i + j != 100;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= k;\nloop invariant 0 <= j <= k;\nloop invariant i + j == k;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= n <= 2 * k;\nloop invariant (i + j) == n;\nloop invariant (i == j) ==> (i == k);\nloop invariant (i != j) ==> (i == k) ==> (k != 0);\nloop invariant (i != j) ==> (i == k) ==> (k == 0) ==> (i == 0);\nloop invariant 0 <= n <= 2 * k;\nloop invariant (i + j) == n;\nloop invariant (i == j) ==> (i == k);\nloop invariant (i != j) ==> (i == k) ==> (k != 0);\nloop invariant (i != j) ==> (i == k) ==> (k == 0) ==> (i == 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= j;\nloop invariant i + j == n;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant i == j;\nloop invariant b == (n % 2 == 0);\nloop invariant b == !b;\nloop invariant i == j;\nloop invariant i + j == n;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant i == j;\nloop invariant b == (n % 2 == 0);\nloop invariant b == !b;\nloop invariant i == j;\nloop invariant i + j == n;\nloop invariant i <= k;\nloop invariant j <= k;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= k;\nloop invariant 0 <= j <= k;\nloop invariant i + j == n;\nloop invariant (n % 2 == 0) ==> (i == j);\nloop invariant (n % 2 != 0) ==> (i == j + 1);\nloop invariant (n % 2 == 0) ==> (j == i);\nloop invariant (n % 2 != 0) ==> (j == i + 1);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= k;\nloop invariant 0 <= j <= k;\nloop invariant i + j == k;\nloop invariant i >= j;\nloop invariant j >= i;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= k;\nloop invariant 0 <= j <= k;\nloop invariant i + j == n;\nloop invariant 0 <= n <= 2*k;\nloop invariant i == j ==> n % 2 == 0;\nloop invariant i != j ==> n % 2 == 1;\nloop invariant (n % 2 == 0) ==> i == j;\nloop invariant (n % 2 == 1) ==> i != j;\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= k;\nloop invariant 0 <= j <= k;\nloop invariant i + j == n;\nloop invariant n <= 2 * k;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= k;\nloop invariant 0 <= j <= k;\nloop invariant i + j == n;\nloop invariant b == (n % 2 == 0);\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= k;\nloop invariant 0 <= j <= k;\nloop invariant i + j == n;\nloop invariant b == (n % 2 == 0);\nloop invariant (i == n/2 || j == n/2) ==> (i == j);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int k = 100;\n  int b = 0;\n  int i;\n  int j;\n  int n;\n  i = j = 0;\n  /*@\n\n\nloop invariant i3: i + j == n;\n\n\n*/\nfor( n = 0 ; n < 2*k ; n++ ) {\n    \n    if(b) {\n      i++;\n    } else {\n      j++;\n    }\n    b = !b;\n  }\n  {;\n//@ assert(i == j);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int k = 100;\n  int b = 0;\n  int i;\n  int j;\n  int n;\n  i = j = 0;\n  /*@\n\n*/\nfor( n = 0 ; n < 2*k ; n++ ) {\n    \n    if(b) {\n      i++;\n    } else {\n      j++;\n    }\n    b = !b;\n  }\n  {;\n//@ assert(i == j);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= j; loop invariant i + j <= k; loop invariant i >= 0; loop invariant j >= 0; loop invariant b == !(n % 2); loop invariant i <= k; loop invariant j <= k; loop invariant i + j == n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int k = 100;\n  int b = 0;\n  int i;\n  int j;\n  int n;\n  i = j = 0;\n  /*@\nloop invariant i1: 0 <= i <= j; loop invariant i + j <= k; loop invariant i >= 0; loop invariant j >= 0; loop invariant b == !(n % 2); loop invariant i <= k; loop invariant j <= k; loop invariant i + j == n;\n*/\nfor( n = 0 ; n < 2*k ; n++ ) {\n    \n    if(b) {\n      i++;\n    } else {\n      j++;\n    }\n    b = !b;\n  }\n  {;\n//@ assert(i == j);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= k;\nloop invariant 0 <= j <= k;\nloop invariant i + j == n;\nloop invariant i == j ==> n % 2 == 0;\nloop invariant i != j ==> n % 2 == 1;\nloop invariant i >= 0 ==> i + j <= 2*k;\nloop invariant i < k ==> i + j < 2*k;\nloop invariant i >= k ==> i + j == 2*k;\nloop invariant j >= 0 ==> i + j <= 2*k;\nloop invariant j < k ==> i + j < 2*k;\nloop invariant j >= k ==> i + j == 2*k;\nloop invariant i + j < 2*k ==> n < 2*k;\nloop invariant i + j == 2*k ==> n == 2*k;\nloop invariant i + j > 0 ==> n > 0;\nloop invariant i + j == 0 ==> n == 0;\nloop invariant i + j < 2*k ==> n < 2*k;\nloop invariant i + j == 2*k ==> n == 2*k;\nloop invariant i + j > 0 ==> n > 0;\nloop invariant i + j == 0 ==> n == 0;\nloop invariant i + j < 2*k ==> n < 2*k;\nloop invariant i + j == 2*k ==> n == 2*k;\nloop invariant i + j > 0 ==> n > 0;\nloop invariant i + j == 0 ==> n == 0;\nloop invariant i + j < 2*k ==> n < 2*k;\nloop invariant i + j == 2*k ==> n == 2*k;\nloop invariant i + j > 0 ==> n > 0;\nloop invariant i + j == 0 ==> n == 0;\nloop invariant i + j < 2*k ==> n < 2*k;\nloop invariant i + j == 2*k ==> n == 2*k;\nloop invariant i + j > 0 ==> n > 0;\nloop invariant i + j == 0 ==> n == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int k = 100;\n  int b = 0;\n  int i;\n  int j;\n  int n;\n  i = j = 0;\n  /*@\n\n\nloop invariant i3: i + j == n;\nloop invariant i4: i == j ==> n % 2 == 0;\n\nloop invariant i6: i >= 0 ==> i + j <= 2*k;\n\n\nloop invariant i9: j >= 0 ==> i + j <= 2*k;\n\n\nloop invariant i12: i + j < 2*k ==> n < 2*k;\nloop invariant i13: i + j == 2*k ==> n == 2*k;\nloop invariant i14: i + j > 0 ==> n > 0;\nloop invariant i15: i + j == 0 ==> n == 0;\n*/\nfor( n = 0 ; n < 2*k ; n++ ) {\n    \n    if(b) {\n      i++;\n    } else {\n      j++;\n    }\n    b = !b;\n  }\n  {;\n//@ assert(i == j);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= k;\nloop invariant 0 <= j <= k;\nloop invariant i + j <= 2*k;\nloop invariant i >= j;\nloop invariant (b == 0) ==> i == k;\nloop invariant (b == 1) ==> j == k;\nloop invariant (b == 0 || b == 1);\nloop invariant (n >= 0 && n < 2*k);\nloop invariant (b == 0 && n < k) ==> i == n;\nloop invariant (b == 1 && n < k) ==> j == n;\nloop invariant (b == 0 && n >= k) ==> i == k;\nloop invariant (b == 1 && n >= k) ==> j == k;\nloop invariant (b == 0 && n < k) ==> j == 0;\nloop invariant (b == 1 && n < k) ==> i == 0;\nloop invariant (b == 0 && n < k) ==> i >= j;\nloop invariant (b == 1 && n < k) ==> j >= i;\nloop invariant (b == 0 && n >= k) ==> i >= j;\nloop invariant (b == 1 && n >= k) ==> j >= i;\nloop invariant (b == 0 && n >= k) ==> j == 0;\nloop invariant (b == 1 && n >= k) ==> i == 0;\nloop invariant (b == 0 && n >= k) ==> i >= j;\nloop invariant (b == 1 && n >= k) ==> j >= i;\nloop invariant (b == 0 && n >= k) ==> j == 0;\nloop invariant (b == 1 && n >= k) ==> i == 0;\nloop invariant (b == 0 && n >= k) ==> i >= j;\nloop invariant (b == 1 && n >= k) ==> j >= i;\nloop invariant (b == 0 && n >= k) ==> j == 0;\nloop invariant (b == 1 && n >= k) ==> i == 0;\nloop invariant (b == 0 && n >= k) ==> i >= j;\nloop invariant (b == 1 && n >= k) ==> j >= i;\nloop invariant (b == 0 && n >= k) ==> j == 0;\nloop invariant (b == 1 && n >= k) ==> i == 0;\nloop invariant (b == 0 && n >= k) ==> i >= j;\nloop invariant (b == 1 && n >= k) ==> j >= i;\nloop invariant (b == 0 && n >= k) ==> j == 0;\nloop invariant (b == 1 && n >= k) ==> i == 0;\nloop invariant (b == 0 && n >= k) ==> i >= j;\nloop invariant (b == 1 && n >= k) ==> j >= i;\nloop invariant (b == 0 && n >= k) ==> j == 0;\nloop invariant (b == 1 && n >= k) ==> i == 0;\nloop invariant (b == 0 && n >= k) ==> i >= j;\nloop invariant (b == 1 && n >= k) ==> j >= i;\nloop invariant (b == 0 && n >= k) ==> j == 0;\nloop invariant (b == 1 && n >= k) ==> i == 0;\nloop invariant (b == 0 && n >= k) ==> i >= j;\nloop invariant (b == 1 && n >= k) ==> j >= i;\nloop invariant (b == 0 && n >= k) ==> j == 0;\nloop invariant (b == 1 && n >= k) ==> i == 0;\nloop invariant (b == 0 && n >= k) ==> i >= j;\nloop invariant (b == 1 && n >= k) ==> j >= i;\nloop invariant (b == 0 && n >= k) ==> j == 0;\nloop invariant (b == 1 && n >= k) ==> i == 0;\nloop invariant (b == 0 && n >= k) ==> i >= j;\nloop invariant (b == 1 && n >= k) ==> j >= i;\nloop invariant (b == 0 && n >= k) ==> j == 0;\nloop invariant (b == 1 && n >= k) ==> i == 0;\nloop invariant (b == 0 && n >= k) ==> i >= j;\nloop invariant (b == 1 && n >= k) ==> j >= i;\nloop invariant (b == 0 && n >= k) ==> j == 0;\nloop invariant (b == 1 && n >= k) ==> i == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int k = 100;\n  int b = 0;\n  int i;\n  int j;\n  int n;\n  i = j = 0;\n  /*@\n\n\n\n\n\n\nloop invariant i7: (b == 0 || b == 1);\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nfor( n = 0 ; n < 2*k ; n++ ) {\n    \n    if(b) {\n      i++;\n    } else {\n      j++;\n    }\n    b = !b;\n  }\n  {;\n//@ assert(i == j);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 9,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 100;\nloop invariant 0 <= j <= 100;\nloop invariant i == j;\nloop invariant i + j == 100;\nloop invariant !(b && b == 0);\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant b != 0 ==> i < 100;\nloop invariant !b ==> j < 100;\nloop invariant i == j ==> b == 0;\nloop invariant !(i == j) ==> b == 1;\nloop invariant i == j ==> i + j == 100;\nloop invariant i < j ==> i + j != 100;\nloop invariant j < i ==> i + j != 100;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i == j;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int k = 100;\n  int b = 0;\n  int i;\n  int j;\n  int n;\n  i = j = 0;\n  /*@\n\n\n\n\nloop invariant i5: !(b && b == 0);\n\nloop invariant i7: j >= i;\n\n\nloop invariant i10: i == j ==> b == 0;\n\n\n\nloop invariant i14: j < i ==> i + j != 100;\nloop invariant i15: i == j ==> i == j;\n*/\nfor( n = 0 ; n < 2*k ; n++ ) {\n    \n    if(b) {\n      i++;\n    } else {\n      j++;\n    }\n    b = !b;\n  }\n  {;\n//@ assert(i == j);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= k;\nloop invariant 0 <= j <= k;\nloop invariant i + j == k;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int k = 100;\n  int b = 0;\n  int i;\n  int j;\n  int n;\n  i = j = 0;\n  /*@\n\n\n\n*/\nfor( n = 0 ; n < 2*k ; n++ ) {\n    \n    if(b) {\n      i++;\n    } else {\n      j++;\n    }\n    b = !b;\n  }\n  {;\n//@ assert(i == j);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= n <= 2 * k;\nloop invariant (i + j) == n;\nloop invariant (i == j) ==> (i == k);\nloop invariant (i != j) ==> (i == k) ==> (k != 0);\nloop invariant (i != j) ==> (i == k) ==> (k == 0) ==> (i == 0);\nloop invariant 0 <= n <= 2 * k;\nloop invariant (i + j) == n;\nloop invariant (i == j) ==> (i == k);\nloop invariant (i != j) ==> (i == k) ==> (k != 0);\nloop invariant (i != j) ==> (i == k) ==> (k == 0) ==> (i == 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int k = 100;\n  int b = 0;\n  int i;\n  int j;\n  int n;\n  i = j = 0;\n  /*@\nloop invariant i1: 0 <= n <= 2 * k;\nloop invariant i2: (i + j) == n;\n\nloop invariant i4: (i != j) ==> (i == k) ==> (k != 0);\nloop invariant i5: (i != j) ==> (i == k) ==> (k == 0) ==> (i == 0);\n*/\nfor( n = 0 ; n < 2*k ; n++ ) {\n    \n    if(b) {\n      i++;\n    } else {\n      j++;\n    }\n    b = !b;\n  }\n  {;\n//@ assert(i == j);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= j;\nloop invariant i + j == n;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant i == j;\nloop invariant b == (n % 2 == 0);\nloop invariant b == !b;\nloop invariant i == j;\nloop invariant i + j == n;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant i == j;\nloop invariant b == (n % 2 == 0);\nloop invariant b == !b;\nloop invariant i == j;\nloop invariant i + j == n;\nloop invariant i <= k;\nloop invariant j <= k;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int k = 100;\n  int b = 0;\n  int i;\n  int j;\n  int n;\n  i = j = 0;\n  /*@\n\nloop invariant i2: i + j == n;\n\n\n\n\n\n*/\nfor( n = 0 ; n < 2*k ; n++ ) {\n    \n    if(b) {\n      i++;\n    } else {\n      j++;\n    }\n    b = !b;\n  }\n  {;\n//@ assert(i == j);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= k;\nloop invariant 0 <= j <= k;\nloop invariant i + j == n;\nloop invariant (n % 2 == 0) ==> (i == j);\nloop invariant (n % 2 != 0) ==> (i == j + 1);\nloop invariant (n % 2 == 0) ==> (j == i);\nloop invariant (n % 2 != 0) ==> (j == i + 1);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int k = 100;\n  int b = 0;\n  int i;\n  int j;\n  int n;\n  i = j = 0;\n  /*@\n\n\nloop invariant i3: i + j == n;\n\n\n\n\n*/\nfor( n = 0 ; n < 2*k ; n++ ) {\n    \n    if(b) {\n      i++;\n    } else {\n      j++;\n    }\n    b = !b;\n  }\n  {;\n//@ assert(i == j);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= k;\nloop invariant 0 <= j <= k;\nloop invariant i + j == k;\nloop invariant i >= j;\nloop invariant j >= i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int k = 100;\n  int b = 0;\n  int i;\n  int j;\n  int n;\n  i = j = 0;\n  /*@\n\n\n\n\n\n*/\nfor( n = 0 ; n < 2*k ; n++ ) {\n    \n    if(b) {\n      i++;\n    } else {\n      j++;\n    }\n    b = !b;\n  }\n  {;\n//@ assert(i == j);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= k;\nloop invariant 0 <= j <= k;\nloop invariant i + j == n;\nloop invariant 0 <= n <= 2*k;\nloop invariant i == j ==> n % 2 == 0;\nloop invariant i != j ==> n % 2 == 1;\nloop invariant (n % 2 == 0) ==> i == j;\nloop invariant (n % 2 == 1) ==> i != j;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int k = 100;\n  int b = 0;\n  int i;\n  int j;\n  int n;\n  i = j = 0;\n  /*@\n\n\nloop invariant i3: i + j == n;\nloop invariant i4: 0 <= n <= 2*k;\nloop invariant i5: i == j ==> n % 2 == 0;\n\n\nloop invariant i8: (n % 2 == 1) ==> i != j;\n*/\nfor( n = 0 ; n < 2*k ; n++ ) {\n    \n    if(b) {\n      i++;\n    } else {\n      j++;\n    }\n    b = !b;\n  }\n  {;\n//@ assert(i == j);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int k = 100;\n  int b = 0;\n  int i;\n  int j;\n  int n;\n  i = j = 0;\n  /*@\n\n*/\nfor( n = 0 ; n < 2*k ; n++ ) {\n    \n    if(b) {\n      i++;\n    } else {\n      j++;\n    }\n    b = !b;\n  }\n  {;\n//@ assert(i == j);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= k;\nloop invariant 0 <= j <= k;\nloop invariant i + j == n;\nloop invariant n <= 2 * k;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int k = 100;\n  int b = 0;\n  int i;\n  int j;\n  int n;\n  i = j = 0;\n  /*@\n\n\nloop invariant i3: i + j == n;\nloop invariant i4: n <= 2 * k;\n*/\nfor( n = 0 ; n < 2*k ; n++ ) {\n    \n    if(b) {\n      i++;\n    } else {\n      j++;\n    }\n    b = !b;\n  }\n  {;\n//@ assert(i == j);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= k;\nloop invariant 0 <= j <= k;\nloop invariant i + j == n;\nloop invariant b == (n % 2 == 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int k = 100;\n  int b = 0;\n  int i;\n  int j;\n  int n;\n  i = j = 0;\n  /*@\n\n\nloop invariant i3: i + j == n;\n\n*/\nfor( n = 0 ; n < 2*k ; n++ ) {\n    \n    if(b) {\n      i++;\n    } else {\n      j++;\n    }\n    b = !b;\n  }\n  {;\n//@ assert(i == j);\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "loop invariant 0 <= i <= k is partially proven to be inductive.\nloop invariant 0 <= j <= k is partially proven to be inductive.\nloop invariant i + j == n is partially proven to be inductive.\nloop invariant b == (n % 2 == 0) is preserved but not established.\nloop invariant (i == n/2 || j == n/2) ==> (i == j) is partially proven to be inductive.\nloop invariant 0 <= i <= j; loop invariant i + j <= k; loop invariant i >= 0; loop invariant j >= 0; loop invariant b == !(n % 2); loop invariant i <= k; loop invariant j <= k; loop invariant i + j == n is partially proven to be inductive.\nloop invariant i == j ==> n % 2 == 0 is partially proven to be inductive.\nloop invariant i != j ==> n % 2 == 1 is partially proven to be inductive.\nloop invariant i >= 0 ==> i + j <= 2*k is partially proven to be inductive.\nloop invariant i < k ==> i + j < 2*k is partially proven to be inductive.\nloop invariant i >= k ==> i + j == 2*k is partially proven to be inductive.\nloop invariant j >= 0 ==> i + j <= 2*k is partially proven to be inductive.\nloop invariant j < k ==> i + j < 2*k is partially proven to be inductive.\nloop invariant j >= k ==> i + j == 2*k is partially proven to be inductive.\nloop invariant i + j < 2*k ==> n < 2*k is partially proven to be inductive.\nloop invariant i + j == 2*k ==> n == 2*k is partially proven to be inductive.\nloop invariant i + j > 0 ==> n > 0 is partially proven to be inductive.\nloop invariant i + j == 0 ==> n == 0 is partially proven to be inductive.\nloop invariant i + j <= 2*k is partially proven to be inductive.\nloop invariant i >= j is partially proven to be inductive.\nloop invariant (b == 0) ==> i == k is partially proven to be inductive.\nloop invariant (b == 1) ==> j == k is partially proven to be inductive.\nloop invariant (b == 0 || b == 1) is partially proven to be inductive.\nloop invariant (n >= 0 && n < 2*k) is partially proven to be inductive.\nloop invariant (b == 0 && n < k) ==> i == n is partially proven to be inductive.\nloop invariant (b == 1 && n < k) ==> j == n is partially proven to be inductive.\nloop invariant (b == 0 && n >= k) ==> i == k is partially proven to be inductive.\nloop invariant (b == 1 && n >= k) ==> j == k is partially proven to be inductive.\nloop invariant (b == 0 && n < k) ==> j == 0 is partially proven to be inductive.\nloop invariant (b == 1 && n < k) ==> i == 0 is partially proven to be inductive.\nloop invariant (b == 0 && n < k) ==> i >= j is partially proven to be inductive.\nloop invariant (b == 1 && n < k) ==> j >= i is partially proven to be inductive.\nloop invariant (b == 0 && n >= k) ==> i >= j is partially proven to be inductive.\nloop invariant (b == 1 && n >= k) ==> j >= i is partially proven to be inductive.\nloop invariant (b == 0 && n >= k) ==> j == 0 is partially proven to be inductive.\nloop invariant (b == 1 && n >= k) ==> i == 0 is partially proven to be inductive.\nloop invariant 0 <= i <= 100 is partially proven to be inductive.\nloop invariant 0 <= j <= 100 is partially proven to be inductive.\nloop invariant i == j is partially proven to be inductive.\nloop invariant i + j == 100 is partially proven to be inductive.\nloop invariant !(b && b == 0) is partially proven to be inductive.\nloop invariant j >= i is partially proven to be inductive.\nloop invariant b != 0 ==> i < 100 is partially proven to be inductive.\nloop invariant !b ==> j < 100 is partially proven to be inductive.\nloop invariant i == j ==> b == 0 is partially proven to be inductive.\nloop invariant !(i == j) ==> b == 1 is partially proven to be inductive.\nloop invariant i == j ==> i + j == 100 is partially proven to be inductive.\nloop invariant i < j ==> i + j != 100 is partially proven to be inductive.\nloop invariant j < i ==> i + j != 100 is partially proven to be inductive.\nloop invariant i == j ==> i == j is partially proven to be inductive.\nloop invariant i + j == k is partially proven to be inductive.\nloop invariant 0 <= n <= 2 * k is partially proven to be inductive.\nloop invariant (i + j) == n is partially proven to be inductive.\nloop invariant (i == j) ==> (i == k) is partially proven to be inductive.\nloop invariant (i != j) ==> (i == k) ==> (k != 0) is partially proven to be inductive.\nloop invariant (i != j) ==> (i == k) ==> (k == 0) ==> (i == 0) is partially proven to be inductive.\nloop invariant 0 <= i <= j is partially proven to be inductive.\nloop invariant i <= k is partially proven to be inductive.\nloop invariant j <= k is partially proven to be inductive.\nloop invariant b == !b is partially proven to be inductive.\nloop invariant (n % 2 == 0) ==> (i == j) is partially proven to be inductive.\nloop invariant (n % 2 != 0) ==> (i == j + 1) is partially proven to be inductive.\nloop invariant (n % 2 == 0) ==> (j == i) is partially proven to be inductive.\nloop invariant (n % 2 != 0) ==> (j == i + 1) is partially proven to be inductive.\nloop invariant 0 <= n <= 2*k is partially proven to be inductive.\nloop invariant (n % 2 == 0) ==> i == j is partially proven to be inductive.\nloop invariant (n % 2 == 1) ==> i != j is partially proven to be inductive.\nloop invariant n <= 2 * k is partially proven to be inductive.\nAssertion i == j: Partially proven",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int k = 100;\n  int b = 0;\n  int i;\n  int j;\n  int n;\n  i = j = 0;\n  /*@\nloop invariant i1: 0 <= i <= k;\nloop invariant i2: 0 <= j <= k;\nloop invariant i3: i + j == n;\nloop invariant i4: b == (n % 2 == 0);\nloop invariant i5: (i == n/2 || j == n/2) ==> (i == j);\nloop invariant i6: 0 <= i <= j; loop invariant i + j <= k; loop invariant i >= 0; loop invariant j >= 0; loop invariant b == !(n % 2); loop invariant i <= k; loop invariant j <= k; loop invariant i + j == n;\nloop invariant i7: i == j ==> n % 2 == 0;\nloop invariant i8: i != j ==> n % 2 == 1;\nloop invariant i9: i >= 0 ==> i + j <= 2*k;\nloop invariant i10: i < k ==> i + j < 2*k;\nloop invariant i11: i >= k ==> i + j == 2*k;\nloop invariant i12: j >= 0 ==> i + j <= 2*k;\nloop invariant i13: j < k ==> i + j < 2*k;\nloop invariant i14: j >= k ==> i + j == 2*k;\nloop invariant i15: i + j < 2*k ==> n < 2*k;\nloop invariant i16: i + j == 2*k ==> n == 2*k;\nloop invariant i17: i + j > 0 ==> n > 0;\nloop invariant i18: i + j == 0 ==> n == 0;\nloop invariant i19: i + j <= 2*k;\nloop invariant i20: i >= j;\nloop invariant i21: (b == 0) ==> i == k;\nloop invariant i22: (b == 1) ==> j == k;\nloop invariant i23: (b == 0 || b == 1);\nloop invariant i24: (n >= 0 && n < 2*k);\nloop invariant i25: (b == 0 && n < k) ==> i == n;\nloop invariant i26: (b == 1 && n < k) ==> j == n;\nloop invariant i27: (b == 0 && n >= k) ==> i == k;\nloop invariant i28: (b == 1 && n >= k) ==> j == k;\nloop invariant i29: (b == 0 && n < k) ==> j == 0;\nloop invariant i30: (b == 1 && n < k) ==> i == 0;\nloop invariant i31: (b == 0 && n < k) ==> i >= j;\nloop invariant i32: (b == 1 && n < k) ==> j >= i;\nloop invariant i33: (b == 0 && n >= k) ==> i >= j;\nloop invariant i34: (b == 1 && n >= k) ==> j >= i;\nloop invariant i35: (b == 0 && n >= k) ==> j == 0;\nloop invariant i36: (b == 1 && n >= k) ==> i == 0;\nloop invariant i37: 0 <= i <= 100;\nloop invariant i38: 0 <= j <= 100;\nloop invariant i39: i == j;\nloop invariant i40: i + j == 100;\nloop invariant i41: !(b && b == 0);\nloop invariant i42: j >= i;\nloop invariant i43: b != 0 ==> i < 100;\nloop invariant i44: !b ==> j < 100;\nloop invariant i45: i == j ==> b == 0;\nloop invariant i46: !(i == j) ==> b == 1;\nloop invariant i47: i == j ==> i + j == 100;\nloop invariant i48: i < j ==> i + j != 100;\nloop invariant i49: j < i ==> i + j != 100;\nloop invariant i50: i == j ==> i == j;\nloop invariant i51: i + j == k;\nloop invariant i52: 0 <= n <= 2 * k;\nloop invariant i53: (i + j) == n;\nloop invariant i54: (i == j) ==> (i == k);\nloop invariant i55: (i != j) ==> (i == k) ==> (k != 0);\nloop invariant i56: (i != j) ==> (i == k) ==> (k == 0) ==> (i == 0);\nloop invariant i57: 0 <= i <= j;\nloop invariant i58: i <= k;\nloop invariant i59: j <= k;\nloop invariant i60: b == !b;\nloop invariant i61: (n % 2 == 0) ==> (i == j);\nloop invariant i62: (n % 2 != 0) ==> (i == j + 1);\nloop invariant i63: (n % 2 == 0) ==> (j == i);\nloop invariant i64: (n % 2 != 0) ==> (j == i + 1);\nloop invariant i65: 0 <= n <= 2*k;\nloop invariant i66: (n % 2 == 0) ==> i == j;\nloop invariant i67: (n % 2 == 1) ==> i != j;\nloop invariant i68: n <= 2 * k;\n*/\nfor( n = 0 ; n < 2*k ; n++ ) {\n    \n    if(b) {\n      i++;\n    } else {\n      j++;\n    }\n    b = !b;\n  }\n  {;\n//@ assert(i == j);\n}\n\n}",
        "combined_annotation_num_solver_calls": 3,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int k = 100;\n  int b = 0;\n  int i;\n  int j;\n  int n;\n  i = j = 0;\n  /*@\nloop invariant i1: 0 <= i <= k;\nloop invariant i2: 0 <= j <= k;\nloop invariant i3: i + j == n;\n\nloop invariant i5: (i == n/2 || j == n/2) ==> (i == j);\nloop invariant i6: 0 <= i <= j; loop invariant i + j <= k; loop invariant i >= 0; loop invariant j >= 0; loop invariant b == !(n % 2); loop invariant i <= k; loop invariant j <= k; loop invariant i + j == n;\nloop invariant i7: i == j ==> n % 2 == 0;\nloop invariant i8: i != j ==> n % 2 == 1;\nloop invariant i9: i >= 0 ==> i + j <= 2*k;\nloop invariant i10: i < k ==> i + j < 2*k;\nloop invariant i11: i >= k ==> i + j == 2*k;\nloop invariant i12: j >= 0 ==> i + j <= 2*k;\nloop invariant i13: j < k ==> i + j < 2*k;\nloop invariant i14: j >= k ==> i + j == 2*k;\nloop invariant i15: i + j < 2*k ==> n < 2*k;\nloop invariant i16: i + j == 2*k ==> n == 2*k;\nloop invariant i17: i + j > 0 ==> n > 0;\nloop invariant i18: i + j == 0 ==> n == 0;\nloop invariant i19: i + j <= 2*k;\nloop invariant i20: i >= j;\nloop invariant i21: (b == 0) ==> i == k;\nloop invariant i22: (b == 1) ==> j == k;\nloop invariant i23: (b == 0 || b == 1);\nloop invariant i24: (n >= 0 && n < 2*k);\nloop invariant i25: (b == 0 && n < k) ==> i == n;\nloop invariant i26: (b == 1 && n < k) ==> j == n;\nloop invariant i27: (b == 0 && n >= k) ==> i == k;\nloop invariant i28: (b == 1 && n >= k) ==> j == k;\nloop invariant i29: (b == 0 && n < k) ==> j == 0;\nloop invariant i30: (b == 1 && n < k) ==> i == 0;\nloop invariant i31: (b == 0 && n < k) ==> i >= j;\nloop invariant i32: (b == 1 && n < k) ==> j >= i;\nloop invariant i33: (b == 0 && n >= k) ==> i >= j;\nloop invariant i34: (b == 1 && n >= k) ==> j >= i;\nloop invariant i35: (b == 0 && n >= k) ==> j == 0;\nloop invariant i36: (b == 1 && n >= k) ==> i == 0;\nloop invariant i37: 0 <= i <= 100;\nloop invariant i38: 0 <= j <= 100;\nloop invariant i39: i == j;\nloop invariant i40: i + j == 100;\nloop invariant i41: !(b && b == 0);\nloop invariant i42: j >= i;\nloop invariant i43: b != 0 ==> i < 100;\nloop invariant i44: !b ==> j < 100;\nloop invariant i45: i == j ==> b == 0;\nloop invariant i46: !(i == j) ==> b == 1;\nloop invariant i47: i == j ==> i + j == 100;\nloop invariant i48: i < j ==> i + j != 100;\nloop invariant i49: j < i ==> i + j != 100;\nloop invariant i50: i == j ==> i == j;\nloop invariant i51: i + j == k;\nloop invariant i52: 0 <= n <= 2 * k;\nloop invariant i53: (i + j) == n;\nloop invariant i54: (i == j) ==> (i == k);\nloop invariant i55: (i != j) ==> (i == k) ==> (k != 0);\nloop invariant i56: (i != j) ==> (i == k) ==> (k == 0) ==> (i == 0);\nloop invariant i57: 0 <= i <= j;\nloop invariant i58: i <= k;\nloop invariant i59: j <= k;\nloop invariant i60: b == !b;\nloop invariant i61: (n % 2 == 0) ==> (i == j);\nloop invariant i62: (n % 2 != 0) ==> (i == j + 1);\nloop invariant i63: (n % 2 == 0) ==> (j == i);\nloop invariant i64: (n % 2 != 0) ==> (j == i + 1);\nloop invariant i65: 0 <= n <= 2*k;\nloop invariant i66: (n % 2 == 0) ==> i == j;\nloop invariant i67: (n % 2 == 1) ==> i != j;\nloop invariant i68: n <= 2 * k;\n*/\nfor( n = 0 ; n < 2*k ; n++ ) {\n    \n    if(b) {\n      i++;\n    } else {\n      j++;\n    }\n    b = !b;\n  }\n  {;\n//@ assert(i == j);\n}\n\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple_if.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/split.c"
        ],
        "skipped": [],
        "total": 38,
        "success_count": 32,
        "failure_count": 6,
        "success_rate": 0.8421052631578947
    }
}