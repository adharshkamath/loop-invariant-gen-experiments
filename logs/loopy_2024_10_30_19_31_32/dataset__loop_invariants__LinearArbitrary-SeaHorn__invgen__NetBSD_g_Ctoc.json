{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main ()\n{\n  int BASE_SZ = unknown();\n  int __BLAST_NONDET = unknown();\n  \n  int i;\n  int j;\n  int len = BASE_SZ;\n\n  if(BASE_SZ > 0 ); else goto END;\n\n  {;\n//@ assert( 0 <= BASE_SZ-1 );\n}\n\n  if (len == 0)\n    goto END; \n  \n  i = 0;\n  j = 0;\n  while (1) {\n    if ( len == 0 ){ \n      goto END;\n    } else {\n      {;\n//@ assert( 0<= j );\n}\n {;\n//@ assert(j < BASE_SZ);\n}\n\n      {;\n//@ assert( 0<= i );\n}\n {;\n//@ assert(i < BASE_SZ );\n}\n\n      if ( __BLAST_NONDET ) {\n        i++;\n        j++;\n        goto END;\n      }\n    }\n    i ++;\n    j ++;\n    len --;\n  }\n\n END:  return 0;\n}",
        "success": false,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= i <= BASE_SZ;\nloop invariant 0 <= j <= BASE_SZ;\nloop invariant 0 <= len <= BASE_SZ;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= len <= BASE_SZ;\nloop invariant 0 <= i <= BASE_SZ;\nloop invariant 0 <= j <= BASE_SZ;\nloop invariant i == j;\nloop invariant i + j == BASE_SZ;\nloop invariant len == 0;\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= j <= BASE_SZ;\nloop invariant 0 <= i <= BASE_SZ;\nloop invariant 0 <= j <= i;\nloop invariant 0 <= i <= len;\nloop invariant j + i <= len;\nloop invariant len >= 0;\nloop invariant j >= 0;\nloop invariant i >= 0;\nloop invariant j <= BASE_SZ;\nloop invariant i <= BASE_SZ;\nloop invariant j <= len;\nloop invariant i <= len;\nloop invariant j <= i + len;\nloop invariant i <= j + len;\nloop invariant BASE_SZ > 0;\nloop invariant len >= 0;\nloop invariant j >= 0;\nloop invariant i >= 0;\nloop invariant j <= BASE_SZ;\nloop invariant i <= BASE_SZ;\nloop invariant j <= len;\nloop invariant i <= len;\nloop invariant j <= i + len;\nloop invariant i <= j + len;\nloop invariant BASE_SZ > 0;\nloop invariant len >= 0;\nloop invariant j >= 0;\nloop invariant i >= 0;\nloop invariant j <= BASE_SZ;\nloop invariant i <= BASE_SZ;\nloop invariant j <= len;\nloop invariant i <= len;\nloop invariant j <= i + len;\nloop invariant i <= j + len;\nloop invariant BASE_SZ > 0;\nloop invariant len >= 0;\nloop invariant j >= 0;\nloop invariant i >= 0;\nloop invariant j <= BASE_SZ;\nloop invariant i <= BASE_SZ;\nloop invariant j <= len;\nloop invariant i <= len;\nloop invariant j <= i + len;\nloop invariant i <= j + len;\nloop invariant BASE_SZ > 0;\nloop invariant len >= 0;\nloop invariant j >= 0;\nloop invariant i >= 0;\nloop invariant j <= BASE_SZ;\nloop invariant i <= BASE_SZ;\nloop invariant j <= len;\nloop invariant i <= len;\nloop invariant j <= i + len;\nloop invariant i <= j + len;\nloop invariant BASE_SZ > 0;\nloop invariant len >= 0;\nloop invariant j >= 0;\nloop invariant i >= 0;\nloop invariant j <= BASE_SZ;\nloop invariant i <= BASE_SZ;\nloop invariant j <= len;\nloop invariant i <= len;\nloop invariant j <= i + len;\nloop invariant i <= j + len;\nloop invariant BASE_SZ > 0;\nloop invariant len >= 0;\nloop invariant j >= 0;\nloop invariant i >= 0;\nloop invariant j <= BASE_SZ;\nloop invariant i <= BASE_SZ;\nloop invariant j <= len;\nloop invariant i <= len;\nloop invariant j <= i + len;\nloop invariant i <= j + len;\nloop invariant BASE_SZ > 0;\nloop invariant len >= 0;\nloop invariant j >= 0;\nloop invariant i >= 0;\nloop invariant j <= BASE_SZ;\nloop invariant i <= BASE_SZ;\nloop invariant j <= len;\nloop invariant i <= len;\nloop invariant j <= i + len;\nloop invariant i <= j + len;\nloop invariant BASE_SZ > 0;\nloop invariant len >= 0;\nloop invariant j >= 0;\nloop invariant i >= 0;\nloop invariant j <= BASE_SZ;\nloop invariant i <= BASE_SZ;\nloop invariant j <= len;\nloop invariant i <= len;\nloop invariant j <= i + len;\nloop invariant i <= j + len;\nloop invariant BASE_SZ > 0;\nloop invariant len >= 0;\nloop invariant j >= 0;\nloop invariant i >= 0;\nloop invariant j <= BASE_SZ;\nloop invariant i <= BASE_SZ;\nloop invariant j <= len;\nloop invariant i <= len;\nloop invariant j <= i + len;\nloop invariant i <= j + len;\nloop invariant BASE_SZ > 0;\nloop invariant len >= 0;\nloop invariant j >= 0;\nloop invariant i >= 0;\nloop invariant j <= BASE_SZ;\nloop invariant i <= BASE_SZ;\nloop invariant j <= len;\nloop invariant i <= len;\nloop invariant j <= i + len;\nloop invariant i <= j + len;\nloop invariant BASE_SZ > 0;\nloop invariant len >= 0;\nloop invariant j >= 0;\nloop invariant i >= 0;\nloop invariant j <= BASE_SZ;\nloop invariant i <= BASE_SZ;\nloop invariant j <= len;\nloop invariant i <= len;\nloop invariant j <= i + len;\nloop invariant i <= j + len;\nloop invariant BASE_SZ > 0;\nloop invariant len >= 0;\nloop invariant j >= 0;\nloop invariant i >= 0;\nloop invariant j <= BASE_SZ;\nloop invariant i <= BASE_SZ;\nloop invariant j <= len;\nloop invariant i <= len;\nloop invariant j <= i + len;\nloop invariant i <= j + len;\nloop invariant BASE_SZ > 0;\nloop invariant len >= 0;\nloop invariant j >= 0;\nloop invariant i >= 0;\nloop invariant j <= BASE_SZ;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= BASE_SZ;\nloop invariant 0 <= j <= BASE_SZ;\nloop invariant 0 <= i <= BASE_SZ;\nloop invariant len >= 0;\nloop invariant len <= BASE_SZ;\nloop invariant i <= j;\nloop invariant j <= len;\nloop invariant i <= len;\nloop invariant len <= BASE_SZ;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant i <= BASE_SZ;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= j <= BASE_SZ;\nloop invariant 0 <= i <= BASE_SZ;\nloop invariant 0 <= len <= BASE_SZ;\nloop invariant len >= 0;\nloop invariant j >= 0;\nloop invariant i >= 0;\nloop invariant len <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant i <= BASE_SZ;\nloop invariant len >= 0;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len >= 0;\nloop invariant j >= 0;\nloop invariant i >= 0;\nloop invariant len <= BASE_SZ;\nloop invariant len >= 0;\nloop invariant j >= 0;\nloop invariant i >= 0;\nloop invariant len <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant i <= BASE_SZ;\nloop invariant len >= 0;\nloop invariant j >= 0;\nloop invariant i >= 0;\nloop invariant len <= BASE_SZ;\nloop invariant len >= 0;\nloop invariant j >= 0;\nloop invariant i >= 0;\nloop invariant len <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant i <= BASE_SZ;\nloop invariant len >= 0;\nloop invariant j >= 0;\nloop invariant i >= 0;\nloop invariant len <= BASE_SZ;\nloop invariant len >= 0;\nloop invariant j >= 0;\nloop invariant i >= 0;\nloop invariant len <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant i <= BASE_SZ;\nloop invariant len >= 0;\nloop invariant j >= 0;\nloop invariant i >= 0;\nloop invariant len <= BASE_SZ;\nloop invariant len >= 0;\nloop invariant j >= 0;\nloop invariant i >= 0;\nloop invariant len <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant i <= BASE_SZ;\nloop invariant len >= 0;\nloop invariant j >= 0;\nloop invariant i >= 0;\nloop invariant len <= BASE_SZ;\nloop invariant len >= 0;\nloop invariant j >= 0;\nloop invariant i >= 0;\nloop invariant len <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant i <= BASE_SZ;\nloop invariant len >= 0;\nloop invariant j >= 0;\nloop invariant i >= 0;\nloop invariant len <= BASE_SZ;\nloop invariant len >= 0;\nloop invariant j >= 0;\nloop invariant i >= 0;\nloop invariant len <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant i <= BASE_SZ;\nloop invariant len >= 0;\nloop invariant j >= 0;\nloop invariant i >= 0;\nloop invariant len <= BASE_SZ;\nloop invariant len >= 0;\nloop invariant j >= 0;\nloop invariant i >= 0;\nloop invariant len <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant i <= BASE_SZ;\nloop invariant len >= 0;\nloop invariant j >= 0;\nloop invariant i >= 0;\nloop invariant len <= BASE_SZ;\nloop invariant len >= 0;\nloop invariant j >= 0;\nloop invariant i >= 0;\nloop invariant len <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant i <= BASE_SZ;\nloop invariant len >= 0;\nloop invariant j >= 0;\nloop invariant i >= 0;\nloop invariant len <= BASE_SZ;\nloop invariant len >= 0;\nloop invariant j >= 0;\nloop invariant i >= 0;\nloop invariant len <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant i <= BASE_SZ;\nloop invariant len >= 0;\nloop invariant j >= 0;\nloop invariant i >= 0;\nloop invariant len <= BASE_SZ;\nloop invariant len >= 0;\nloop invariant j >= 0;\nloop invariant i >= 0;\nloop invariant len <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant i <= BASE_SZ;\nloop invariant len >= 0;\nloop invariant j >= 0;\nloop invariant i >= 0;\nloop invariant len <= BASE_SZ;\nloop invariant len >= 0;\nloop invariant j >= 0;\nloop invariant i >= 0;\nloop invariant len <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant i <= BASE_SZ;\nloop invariant len >= 0;\nloop invariant j >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= j <= BASE_SZ;\nloop invariant 0 <= i <= BASE_SZ;\nloop invariant j <= i;\nloop invariant len >= 0;\nloop invariant len <= BASE_SZ;\nloop invariant len >= 1 ==> len <= BASE_SZ;\nloop invariant len >= 0 ==> i + j >= len;\nloop invariant len >= 1 ==> i + j >= len;\nloop invariant len == 0 ==> i + j == BASE_SZ;\nloop invariant len == 1 ==> i + j == BASE_SZ;\nloop invariant len == 2 ==> i + j == BASE_SZ;\nloop invariant len == 3 ==> i + j == BASE_SZ;\nloop invariant len == 4 ==> i + j == BASE_SZ;\nloop invariant len == 5 ==> i + j == BASE_SZ;\nloop invariant len == 6 ==> i + j == BASE_SZ;\nloop invariant len == 7 ==> i + j == BASE_SZ;\nloop invariant len == 8 ==> i + j == BASE_SZ;\nloop invariant len == 9 ==> i + j == BASE_SZ;\nloop invariant len == 10 ==> i + j == BASE_SZ;\nloop invariant len == 11 ==> i + j == BASE_SZ;\nloop invariant len == 12 ==> i + j == BASE_SZ;\nloop invariant len == 13 ==> i + j == BASE_SZ;\nloop invariant len == 14 ==> i + j == BASE_SZ;\nloop invariant len == 15 ==> i + j == BASE_SZ;\nloop invariant len == 16 ==> i + j == BASE_SZ;\nloop invariant len == 17 ==> i + j == BASE_SZ;\nloop invariant len == 18 ==> i + j == BASE_SZ;\nloop invariant len == 19 ==> i + j == BASE_SZ;\nloop invariant len == 20 ==> i + j == BASE_SZ;\nloop invariant len == 21 ==> i + j == BASE_SZ;\nloop invariant len == 22 ==> i + j == BASE_SZ;\nloop invariant len == 23 ==> i + j == BASE_SZ;\nloop invariant len == 24 ==> i + j == BASE_SZ;\nloop invariant len == 25 ==> i + j == BASE_SZ;\nloop invariant len == 26 ==> i + j == BASE_SZ;\nloop invariant len == 27 ==> i + j == BASE_SZ;\nloop invariant len == 28 ==> i + j == BASE_SZ;\nloop invariant len == 29 ==> i + j == BASE_SZ;\nloop invariant len == 30 ==> i + j == BASE_SZ;\nloop invariant len == 31 ==> i + j == BASE_SZ;\nloop invariant len == 32 ==> i + j == BASE_SZ;\nloop invariant len == 33 ==> i + j == BASE_SZ;\nloop invariant len == 34 ==> i + j == BASE_SZ;\nloop invariant len == 35 ==> i + j == BASE_SZ;\nloop invariant len == 36 ==> i + j == BASE_SZ;\nloop invariant len == 37 ==> i + j == BASE_SZ;\nloop invariant len == 38 ==> i + j == BASE_SZ;\nloop invariant len == 39 ==> i + j == BASE_SZ;\nloop invariant len == 40 ==> i + j == BASE_SZ;\nloop invariant len == 41 ==> i + j == BASE_SZ;\nloop invariant len == 42 ==> i + j == BASE_SZ;\nloop invariant len == 43 ==> i + j == BASE_SZ;\nloop invariant len == 44 ==> i + j == BASE_SZ;\nloop invariant len == 45 ==> i + j == BASE_SZ;\nloop invariant len == 46 ==> i + j == BASE_SZ;\nloop invariant len == 47 ==> i + j == BASE_SZ;\nloop invariant len == 48 ==> i + j == BASE_SZ;\nloop invariant len == 49 ==> i + j == BASE_SZ;\nloop invariant len == 50 ==> i + j == BASE_SZ;\nloop invariant len == 51 ==> i + j == BASE_SZ;\nloop invariant len == 52 ==> i + j == BASE_SZ;\nloop invariant len == 53 ==> i + j == BASE_SZ;\nloop invariant len == 54 ==> i + j == BASE_SZ;\nloop invariant len == 55 ==> i + j == BASE_SZ;\nloop invariant len == 56 ==> i + j == BASE_SZ;\nloop invariant len == 57 ==> i + j == BASE_SZ;\nloop invariant len == 58 ==> i + j == BASE_SZ;\nloop invariant len == 59 ==> i + j == BASE_SZ;\nloop invariant len == 60 ==> i + j == BASE_SZ;\nloop invariant len == 61 ==> i + j == BASE_SZ;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i;\nloop invariant i < BASE_SZ;\nloop invariant 0 <= j;\nloop invariant j < BASE_SZ;\nloop invariant len >= 0;\nloop invariant len <= BASE_SZ;\nloop invariant len >= BASE_SZ - i;\nloop invariant len >= BASE_SZ - j;\nloop invariant len >= BASE_SZ - (i + j);\nloop invariant len >= BASE_SZ - (i + j + 1);\nloop invariant len >= BASE_SZ - (i + j + 2);\nloop invariant len >= BASE_SZ - (i + j + 3);\nloop invariant len >= BASE_SZ - (i + j + 4);\nloop invariant len >= BASE_SZ - (i + j + 5);\nloop invariant len >= BASE_SZ - (i + j + 6);\nloop invariant len >= BASE_SZ - (i + j + 7);\nloop invariant len >= BASE_SZ - (i + j + 8);\nloop invariant len >= BASE_SZ - (i + j + 9);\nloop invariant len >= BASE_SZ - (i + j + 10);\nloop invariant len >= BASE_SZ - (i + j + 11);\nloop invariant len >= BASE_SZ - (i + j + 12);\nloop invariant len >= BASE_SZ - (i + j + 13);\nloop invariant len >= BASE_SZ - (i + j + 14);\nloop invariant len >= BASE_SZ - (i + j + 15);\nloop invariant len >= BASE_SZ - (i + j + 16);\nloop invariant len >= BASE_SZ - (i + j + 17);\nloop invariant len >= BASE_SZ - (i + j + 18);\nloop invariant len >= BASE_SZ - (i + j + 19);\nloop invariant len >= BASE_SZ - (i + j + 20);\nloop invariant len >= BASE_SZ - (i + j + 21);\nloop invariant len >= BASE_SZ - (i + j + 22);\nloop invariant len >= BASE_SZ - (i + j + 23);\nloop invariant len >= BASE_SZ - (i + j + 24);\nloop invariant len >= BASE_SZ - (i + j + 25);\nloop invariant len >= BASE_SZ - (i + j + 26);\nloop invariant len >= BASE_SZ - (i + j + 27);\nloop invariant len >= BASE_SZ - (i + j + 28);\nloop invariant len >= BASE_SZ - (i + j + 29);\nloop invariant len >= BASE_SZ - (i + j + 30);\nloop invariant len >= BASE_SZ - (i + j + 31);\nloop invariant len >= BASE_SZ - (i + j + 32);\nloop invariant len >= BASE_SZ - (i + j + 33);\nloop invariant len >= BASE_SZ - (i + j + 34);\nloop invariant len >= BASE_SZ - (i + j + 35);\nloop invariant len >= BASE_SZ - (i + j + 36);\nloop invariant len >= BASE_SZ - (i + j + 37);\nloop invariant len >= BASE_SZ - (i + j + 38);\nloop invariant len >= BASE_SZ - (i + j + 39);\nloop invariant len >= BASE_SZ - (i + j + 40);\nloop invariant len >= BASE_SZ - (i + j + 41);\nloop invariant len >= BASE_SZ - (i + j + 42);\nloop invariant len >= BASE_SZ - (i + j + 43);\nloop invariant len >= BASE_SZ - (i + j + 44);\nloop invariant len >= BASE_SZ - (i + j + 45);\nloop invariant len >= BASE_SZ - (i + j + 46);\nloop invariant len >= BASE_SZ - (i + j + 47);\nloop invariant len >= BASE_SZ - (i + j + 48);\nloop invariant len >= BASE_SZ - (i + j + 49);\nloop invariant len >= BASE_SZ - (i + j + 50);\nloop invariant len >= BASE_SZ - (i + j + 51);\nloop invariant len >= BASE_SZ - (i + j + 52);\nloop invariant len >= BASE_SZ - (i + j + 53);\nloop invariant len >= BASE_SZ - (i + j + 54);\nloop invariant len >= BASE_SZ - (i + j + 55);\nloop invariant len >= BASE_SZ - (i + j + 56);\nloop invariant len >= BASE_SZ - (i + j + 57);\nloop invariant len >= BASE_SZ - (i + j + 58);\n*/\n```",
            "```\n/*@\nloop invariant i == j;loop invariant i >= 0;loop invariant j >= 0;loop invariant len >= 0;loop invariant len <= BASE_SZ;loop invariant i < BASE_SZ;loop invariant j < BASE_SZ;loop invariant i <= BASE_SZ;loop invariant j <= BASE_SZ;loop invariant i <= j;loop invariant i >= 0;loop invariant j >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= j && j <= BASE_SZ;\nloop invariant 0 <= i && i <= BASE_SZ;\nloop invariant len >= 0;\nloop invariant __BLAST_NONDET == 0 || __BLAST_NONDET == 1;\nloop invariant (i >= j && j >= 0 && i <= BASE_SZ) ==> (__BLAST_NONDET == 0 || __BLAST_NONDET == 1);\nloop invariant (len >= 0 && __BLAST_NONDET == 0 || __BLAST_NONDET == 1) ==> (i + 1 >= j && j + 1 >= 0 && i + 1 <= BASE_SZ);\nloop invariant (len >= 1 && __BLAST_NONDET == 0 || __BLAST_NONDET == 1) ==> (i + 1 >= j + 1 && j + 1 + 1 >= 0 && i + 1 <= BASE_SZ);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= j <= BASE_SZ;\nloop invariant 0 <= i <= BASE_SZ;\nloop invariant len > 0;\nloop invariant j == i;\nloop invariant len == 1;\nloop invariant i == BASE_SZ - 2;\nloop invariant j == BASE_SZ - 1;\nloop invariant len == 0;\nloop invariant i == BASE_SZ - 1;\nloop invariant j == BASE_SZ - 1;\nloop invariant len == -1;\nloop invariant i == BASE_SZ;\nloop invariant j == BASE_SZ;\nloop invariant len == -2;\nloop invariant i == BASE_SZ + 1;\nloop invariant j == BASE_SZ + 1;\nloop invariant len == -3;\nloop invariant i == BASE_SZ + 2;\nloop invariant j == BASE_SZ + 2;\nloop invariant len == -4;\nloop invariant i == BASE_SZ + 3;\nloop invariant j == BASE_SZ + 3;\nloop invariant len == -5;\nloop invariant i == BASE_SZ + 4;\nloop invariant j == BASE_SZ + 4;\nloop invariant len == -6;\nloop invariant i == BASE_SZ + 5;\nloop invariant j == BASE_SZ + 5;\nloop invariant len == -7;\nloop invariant i == BASE_SZ + 6;\nloop invariant j == BASE_SZ + 6;\nloop invariant len == -8;\nloop invariant i == BASE_SZ + 7;\nloop invariant j == BASE_SZ + 7;\nloop invariant len == -9;\nloop invariant i == BASE_SZ + 8;\nloop invariant j == BASE_SZ + 8;\nloop invariant len == -10;\nloop invariant i == BASE_SZ + 9;\nloop invariant j == BASE_SZ + 9;\nloop invariant len == -11;\nloop invariant i == BASE_SZ + 10;\nloop invariant j == BASE_SZ + 10;\nloop invariant len == -12;\nloop invariant i == BASE_SZ + 11;\nloop invariant j == BASE_SZ + 11;\nloop invariant len == -13;\nloop invariant i == BASE_SZ + 12;\nloop invariant j == BASE_SZ + 12;\nloop invariant len == -14;\nloop invariant i == BASE_SZ + 13;\nloop invariant j == BASE_SZ + 13;\nloop invariant len == -15;\nloop invariant i == BASE_SZ + 14;\nloop invariant j == BASE_SZ + 14;\nloop invariant len == -16;\nloop invariant i == BASE_SZ + 15;\nloop invariant j == BASE_SZ + 15;\nloop invariant len == -17;\nloop invariant i == BASE_SZ + 16;\nloop invariant j == BASE_SZ + 16;\nloop invariant len == -18;\nloop invariant i == BASE_SZ + 17;\nloop invariant j == BASE_SZ + 17;\nloop invariant len == -19;\nloop invariant i == BASE_SZ + 18;\nloop invariant j == BASE_SZ + 18;\nloop invariant len == -20;\nloop invariant i == BASE_SZ + 19;\nloop invariant j == BASE_SZ + 19;\nloop invariant len == -21;\nloop invariant i == BASE_SZ + 20;\nloop invariant j == BASE_SZ + 20;\nloop invariant len == -22;\nloop invariant i == BASE_SZ + 21;\nloop invariant j == BASE_SZ + 21;\nloop invariant len == -23;\nloop invariant i == BASE_SZ + 22;\nloop invariant j == BASE_SZ + 22;\nloop invariant len == -24;\nloop invariant i == BASE_SZ + 23;\nloop invariant j == BASE_SZ + 23;\nloop invariant len == -25;\nloop invariant i == BASE_SZ + 24;\nloop invariant j == BASE_SZ + 24;\nloop invariant len == -26;\nloop invariant i == BASE_SZ + 25;\nloop invariant j == BASE_SZ + 25;\nloop invariant len == -27;\nloop invariant i == BASE_SZ + 26;\nloop invariant j == BASE_SZ + 26;\nloop invariant len == -28;\nloop invariant i == BASE_SZ + 27;\nloop invariant j == BASE_SZ + 27;\nloop invariant len == -29;\nloop invariant i == BASE_SZ + 28;\nloop invariant j == BASE_SZ + 28;\nloop invariant len == -30;\nloop invariant i == BASE_SZ + 29;\nloop invariant j == BASE_SZ + 29;\nloop invariant len == -31;\nloop invariant i == BASE_SZ + 30;\nloop invariant j == BASE_SZ + 30;\nloop invariant len == -32;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= BASE_SZ;\nloop invariant 1 <= j <= BASE_SZ;\nloop invariant BASE_SZ - len == i + j;\nloop invariant len >= 0;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant 0 <= len <= BASE_SZ;\nloop invariant 0 <= i <= BASE_SZ;\nloop invariant 0 <= j <= BASE_SZ;\nloop invariant 1 <= i + j <= 2 * BASE_SZ;\nloop invariant 1 <= i + j <= 2 * BASE_SZ;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= BASE_SZ - 1 ;\nloop invariant 0 <= len ;\nloop invariant 0 <= i ;\nloop invariant i <= BASE_SZ ;\nloop invariant 0 <= j ;\nloop invariant j <= BASE_SZ ;\nloop invariant i == j ==> len == 0 ;\nloop invariant i != j ==> len != 0 ;\nloop invariant i < j ==> len != 0 ;\nloop invariant i == j ==> len == 0 ;\nloop invariant i != j ==> len != 0 ;\nloop invariant i < j ==> len != 0 ;\nloop invariant i == j ==> len == 0 ;\nloop invariant i != j ==> len != 0 ;\nloop invariant i < j ==> len != 0 ;\nloop invariant i == j ==> len == 0 ;\nloop invariant i != j ==> len != 0 ;\nloop invariant i < j ==> len != 0 ;\nloop invariant i == j ==> len == 0 ;\nloop invariant i != j ==> len != 0 ;\nloop invariant i < j ==> len != 0 ;\nloop invariant i == j ==> len == 0 ;\nloop invariant i != j ==> len != 0 ;\nloop invariant i < j ==> len != 0 ;\nloop invariant i == j ==> len == 0 ;\nloop invariant i != j ==> len != 0 ;\nloop invariant i < j ==> len != 0 ;\nloop invariant i == j ==> len == 0 ;\nloop invariant i != j ==> len != 0 ;\nloop invariant i < j ==> len != 0 ;\nloop invariant i == j ==> len == 0 ;\nloop invariant i != j ==> len != 0 ;\nloop invariant i < j ==> len != 0 ;\nloop invariant i == j ==> len == 0 ;\nloop invariant i != j ==> len != 0 ;\nloop invariant i < j ==> len != 0 ;\nloop invariant i == j ==> len == 0 ;\nloop invariant i != j ==> len != 0 ;\nloop invariant i < j ==> len != 0 ;\nloop invariant i == j ==> len == 0 ;\nloop invariant i != j ==> len != 0 ;\nloop invariant i < j ==> len != 0 ;\nloop invariant i == j ==> len == 0 ;\nloop invariant i != j ==> len != 0 ;\nloop invariant i < j ==> len != 0 ;\nloop invariant i == j ==> len == 0 ;\nloop invariant i != j ==> len != 0 ;\nloop invariant i < j ==> len != 0 ;\nloop invariant i == j ==> len == 0 ;\nloop invariant i != j ==> len != 0 ;\nloop invariant i < j ==> len != 0 ;\nloop invariant i == j ==> len == 0 ;\nloop invariant i != j ==> len != 0 ;\nloop invariant i < j ==> len != 0 ;\nloop invariant i == j ==> len == 0 ;\nloop invariant i != j ==> len != 0 ;\nloop invariant i < j ==> len != 0 ;\nloop invariant i == j ==> len == 0 ;\nloop invariant i != j ==> len != 0 ;\nloop invariant i < j ==> len != 0 ;\nloop invariant i == j ==> len == 0 ;\nloop invariant i != j ==> len != 0 ;\nloop invariant i < j ==> len != 0 ;\nloop invariant i == j ==> len == 0 ;\nloop invariant i != j ==> len != 0 ;\nloop invariant i < j ==> len != 0 ;\nloop invariant i == j ==> len == 0 ;\nloop invariant i != j ==> len != 0 ;\nloop invariant i < j ==> len != 0 ;\nloop invariant i == j ==> len == 0 ;\nloop invariant i != j ==> len != 0 ;\nloop invariant i < j ==> len != 0 ;\nloop invariant i == j ==> len == 0 ;\nloop invariant i != j ==> len != 0 ;\nloop invariant i < j ==> len != 0 ;\nloop invariant i == j ==> len == 0 ;\nloop invariant i != j ==> len != 0 ;\nloop invariant i < j ==> len != 0 ;\nloop invariant i == j ==> len == 0 ;\nloop invariant i != j ==> len != 0 ;\nloop invariant i < j ==> len != 0 ;\nloop invariant i == j ==> len == 0 ;\nloop invariant i != j ==> len != 0 ;\nloop invariant i < j ==> len != 0 ;\nloop invariant i == j ==> len == 0 ;\nloop invariant i != j ==> len != 0 ;\nloop invariant i < j ==> len != 0 ;\nloop invariant i == j ==> len == 0 ;\nloop invariant i != j ==> len != 0 ;\nloop invariant i < j ==> len != 0 ;\nloop invariant i == j ==> len == 0 ;\nloop invariant i != j ==> len != 0 ;\n*/\n```",
            "```\n/*@\nloop invariant ( ( i >= 0 ) && ( i <= BASE_SZ ) );\nloop invariant ( ( j >= 0 ) && ( j <= BASE_SZ ) );\nloop invariant ( ( len >= 0 ) && ( len <= BASE_SZ ) );\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= BASE_SZ;\nloop invariant 0 <= j <= BASE_SZ;\nloop invariant 0 <= len <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant i <= j;\nloop invariant j <= BASE_SZ;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= BASE_SZ;\nloop invariant 0 <= j <= BASE_SZ;\nloop invariant 0 <= len <= BASE_SZ;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main ()\n{\n  int BASE_SZ = unknown();\n  int __BLAST_NONDET = unknown();\n  \n  int i;\n  int j;\n  int len = BASE_SZ;\n\n  if(BASE_SZ > 0 ); else goto END;\n\n  {;\n//@ assert( 0 <= BASE_SZ-1 );\n}\n\n  if (len == 0)\n    goto END; \n  \n  i = 0;\n  j = 0;\n  /*@\nloop invariant i1: 0 <= i <= BASE_SZ;\nloop invariant i2: 0 <= j <= BASE_SZ;\nloop invariant i3: 0 <= len <= BASE_SZ;\n*/\nwhile (1) {\n    if ( len == 0 ){ \n      goto END;\n    } else {\n      {;\n//@ assert( 0<= j );\n}\n {;\n//@ assert(j < BASE_SZ);\n}\n\n      {;\n//@ assert( 0<= i );\n}\n {;\n//@ assert(i < BASE_SZ );\n}\n\n      if ( __BLAST_NONDET ) {\n        i++;\n        j++;\n        goto END;\n      }\n    }\n    i ++;\n    j ++;\n    len --;\n  }\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= len <= BASE_SZ;\nloop invariant 0 <= i <= BASE_SZ;\nloop invariant 0 <= j <= BASE_SZ;\nloop invariant i == j;\nloop invariant i + j == BASE_SZ;\nloop invariant len == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main ()\n{\n  int BASE_SZ = unknown();\n  int __BLAST_NONDET = unknown();\n  \n  int i;\n  int j;\n  int len = BASE_SZ;\n\n  if(BASE_SZ > 0 ); else goto END;\n\n  {;\n//@ assert( 0 <= BASE_SZ-1 );\n}\n\n  if (len == 0)\n    goto END; \n  \n  i = 0;\n  j = 0;\n  /*@\nloop invariant i1: 0 <= len <= BASE_SZ;\nloop invariant i2: 0 <= i <= BASE_SZ;\nloop invariant i3: 0 <= j <= BASE_SZ;\nloop invariant i4: i == j;\n\n\n*/\nwhile (1) {\n    if ( len == 0 ){ \n      goto END;\n    } else {\n      {;\n//@ assert( 0<= j );\n}\n {;\n//@ assert(j < BASE_SZ);\n}\n\n      {;\n//@ assert( 0<= i );\n}\n {;\n//@ assert(i < BASE_SZ );\n}\n\n      if ( __BLAST_NONDET ) {\n        i++;\n        j++;\n        goto END;\n      }\n    }\n    i ++;\n    j ++;\n    len --;\n  }\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main ()\n{\n  int BASE_SZ = unknown();\n  int __BLAST_NONDET = unknown();\n  \n  int i;\n  int j;\n  int len = BASE_SZ;\n\n  if(BASE_SZ > 0 ); else goto END;\n\n  {;\n//@ assert( 0 <= BASE_SZ-1 );\n}\n\n  if (len == 0)\n    goto END; \n  \n  i = 0;\n  j = 0;\n  /*@\n\n*/\nwhile (1) {\n    if ( len == 0 ){ \n      goto END;\n    } else {\n      {;\n//@ assert( 0<= j );\n}\n {;\n//@ assert(j < BASE_SZ);\n}\n\n      {;\n//@ assert( 0<= i );\n}\n {;\n//@ assert(i < BASE_SZ );\n}\n\n      if ( __BLAST_NONDET ) {\n        i++;\n        j++;\n        goto END;\n      }\n    }\n    i ++;\n    j ++;\n    len --;\n  }\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= j <= BASE_SZ;\nloop invariant 0 <= i <= BASE_SZ;\nloop invariant 0 <= j <= i;\nloop invariant 0 <= i <= len;\nloop invariant j + i <= len;\nloop invariant len >= 0;\nloop invariant j >= 0;\nloop invariant i >= 0;\nloop invariant j <= BASE_SZ;\nloop invariant i <= BASE_SZ;\nloop invariant j <= len;\nloop invariant i <= len;\nloop invariant j <= i + len;\nloop invariant i <= j + len;\nloop invariant BASE_SZ > 0;\nloop invariant len >= 0;\nloop invariant j >= 0;\nloop invariant i >= 0;\nloop invariant j <= BASE_SZ;\nloop invariant i <= BASE_SZ;\nloop invariant j <= len;\nloop invariant i <= len;\nloop invariant j <= i + len;\nloop invariant i <= j + len;\nloop invariant BASE_SZ > 0;\nloop invariant len >= 0;\nloop invariant j >= 0;\nloop invariant i >= 0;\nloop invariant j <= BASE_SZ;\nloop invariant i <= BASE_SZ;\nloop invariant j <= len;\nloop invariant i <= len;\nloop invariant j <= i + len;\nloop invariant i <= j + len;\nloop invariant BASE_SZ > 0;\nloop invariant len >= 0;\nloop invariant j >= 0;\nloop invariant i >= 0;\nloop invariant j <= BASE_SZ;\nloop invariant i <= BASE_SZ;\nloop invariant j <= len;\nloop invariant i <= len;\nloop invariant j <= i + len;\nloop invariant i <= j + len;\nloop invariant BASE_SZ > 0;\nloop invariant len >= 0;\nloop invariant j >= 0;\nloop invariant i >= 0;\nloop invariant j <= BASE_SZ;\nloop invariant i <= BASE_SZ;\nloop invariant j <= len;\nloop invariant i <= len;\nloop invariant j <= i + len;\nloop invariant i <= j + len;\nloop invariant BASE_SZ > 0;\nloop invariant len >= 0;\nloop invariant j >= 0;\nloop invariant i >= 0;\nloop invariant j <= BASE_SZ;\nloop invariant i <= BASE_SZ;\nloop invariant j <= len;\nloop invariant i <= len;\nloop invariant j <= i + len;\nloop invariant i <= j + len;\nloop invariant BASE_SZ > 0;\nloop invariant len >= 0;\nloop invariant j >= 0;\nloop invariant i >= 0;\nloop invariant j <= BASE_SZ;\nloop invariant i <= BASE_SZ;\nloop invariant j <= len;\nloop invariant i <= len;\nloop invariant j <= i + len;\nloop invariant i <= j + len;\nloop invariant BASE_SZ > 0;\nloop invariant len >= 0;\nloop invariant j >= 0;\nloop invariant i >= 0;\nloop invariant j <= BASE_SZ;\nloop invariant i <= BASE_SZ;\nloop invariant j <= len;\nloop invariant i <= len;\nloop invariant j <= i + len;\nloop invariant i <= j + len;\nloop invariant BASE_SZ > 0;\nloop invariant len >= 0;\nloop invariant j >= 0;\nloop invariant i >= 0;\nloop invariant j <= BASE_SZ;\nloop invariant i <= BASE_SZ;\nloop invariant j <= len;\nloop invariant i <= len;\nloop invariant j <= i + len;\nloop invariant i <= j + len;\nloop invariant BASE_SZ > 0;\nloop invariant len >= 0;\nloop invariant j >= 0;\nloop invariant i >= 0;\nloop invariant j <= BASE_SZ;\nloop invariant i <= BASE_SZ;\nloop invariant j <= len;\nloop invariant i <= len;\nloop invariant j <= i + len;\nloop invariant i <= j + len;\nloop invariant BASE_SZ > 0;\nloop invariant len >= 0;\nloop invariant j >= 0;\nloop invariant i >= 0;\nloop invariant j <= BASE_SZ;\nloop invariant i <= BASE_SZ;\nloop invariant j <= len;\nloop invariant i <= len;\nloop invariant j <= i + len;\nloop invariant i <= j + len;\nloop invariant BASE_SZ > 0;\nloop invariant len >= 0;\nloop invariant j >= 0;\nloop invariant i >= 0;\nloop invariant j <= BASE_SZ;\nloop invariant i <= BASE_SZ;\nloop invariant j <= len;\nloop invariant i <= len;\nloop invariant j <= i + len;\nloop invariant i <= j + len;\nloop invariant BASE_SZ > 0;\nloop invariant len >= 0;\nloop invariant j >= 0;\nloop invariant i >= 0;\nloop invariant j <= BASE_SZ;\nloop invariant i <= BASE_SZ;\nloop invariant j <= len;\nloop invariant i <= len;\nloop invariant j <= i + len;\nloop invariant i <= j + len;\nloop invariant BASE_SZ > 0;\nloop invariant len >= 0;\nloop invariant j >= 0;\nloop invariant i >= 0;\nloop invariant j <= BASE_SZ;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main ()\n{\n  int BASE_SZ = unknown();\n  int __BLAST_NONDET = unknown();\n  \n  int i;\n  int j;\n  int len = BASE_SZ;\n\n  if(BASE_SZ > 0 ); else goto END;\n\n  {;\n//@ assert( 0 <= BASE_SZ-1 );\n}\n\n  if (len == 0)\n    goto END; \n  \n  i = 0;\n  j = 0;\n  /*@\nloop invariant i1: 0 <= j <= BASE_SZ;\nloop invariant i2: 0 <= i <= BASE_SZ;\nloop invariant i3: 0 <= j <= i;\n\n\nloop invariant i6: len >= 0;\nloop invariant i7: j >= 0;\nloop invariant i8: i >= 0;\nloop invariant i9: j <= BASE_SZ;\nloop invariant i10: i <= BASE_SZ;\n\n\nloop invariant i13: j <= i + len;\n\nloop invariant i15: BASE_SZ > 0;\n*/\nwhile (1) {\n    if ( len == 0 ){ \n      goto END;\n    } else {\n      {;\n//@ assert( 0<= j );\n}\n {;\n//@ assert(j < BASE_SZ);\n}\n\n      {;\n//@ assert( 0<= i );\n}\n {;\n//@ assert(i < BASE_SZ );\n}\n\n      if ( __BLAST_NONDET ) {\n        i++;\n        j++;\n        goto END;\n      }\n    }\n    i ++;\n    j ++;\n    len --;\n  }\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= BASE_SZ;\nloop invariant 0 <= j <= BASE_SZ;\nloop invariant 0 <= i <= BASE_SZ;\nloop invariant len >= 0;\nloop invariant len <= BASE_SZ;\nloop invariant i <= j;\nloop invariant j <= len;\nloop invariant i <= len;\nloop invariant len <= BASE_SZ;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant i <= BASE_SZ;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main ()\n{\n  int BASE_SZ = unknown();\n  int __BLAST_NONDET = unknown();\n  \n  int i;\n  int j;\n  int len = BASE_SZ;\n\n  if(BASE_SZ > 0 ); else goto END;\n\n  {;\n//@ assert( 0 <= BASE_SZ-1 );\n}\n\n  if (len == 0)\n    goto END; \n  \n  i = 0;\n  j = 0;\n  /*@\nloop invariant i1: 0 <= BASE_SZ;\nloop invariant i2: 0 <= j <= BASE_SZ;\nloop invariant i3: 0 <= i <= BASE_SZ;\nloop invariant i4: len >= 0;\nloop invariant i5: len <= BASE_SZ;\nloop invariant i6: i <= j;\n\n\nloop invariant i9: i <= BASE_SZ;\nloop invariant i10: j <= BASE_SZ;\n*/\nwhile (1) {\n    if ( len == 0 ){ \n      goto END;\n    } else {\n      {;\n//@ assert( 0<= j );\n}\n {;\n//@ assert(j < BASE_SZ);\n}\n\n      {;\n//@ assert( 0<= i );\n}\n {;\n//@ assert(i < BASE_SZ );\n}\n\n      if ( __BLAST_NONDET ) {\n        i++;\n        j++;\n        goto END;\n      }\n    }\n    i ++;\n    j ++;\n    len --;\n  }\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= j <= BASE_SZ;\nloop invariant 0 <= i <= BASE_SZ;\nloop invariant 0 <= len <= BASE_SZ;\nloop invariant len >= 0;\nloop invariant j >= 0;\nloop invariant i >= 0;\nloop invariant len <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant i <= BASE_SZ;\nloop invariant len >= 0;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len >= 0;\nloop invariant j >= 0;\nloop invariant i >= 0;\nloop invariant len <= BASE_SZ;\nloop invariant len >= 0;\nloop invariant j >= 0;\nloop invariant i >= 0;\nloop invariant len <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant i <= BASE_SZ;\nloop invariant len >= 0;\nloop invariant j >= 0;\nloop invariant i >= 0;\nloop invariant len <= BASE_SZ;\nloop invariant len >= 0;\nloop invariant j >= 0;\nloop invariant i >= 0;\nloop invariant len <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant i <= BASE_SZ;\nloop invariant len >= 0;\nloop invariant j >= 0;\nloop invariant i >= 0;\nloop invariant len <= BASE_SZ;\nloop invariant len >= 0;\nloop invariant j >= 0;\nloop invariant i >= 0;\nloop invariant len <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant i <= BASE_SZ;\nloop invariant len >= 0;\nloop invariant j >= 0;\nloop invariant i >= 0;\nloop invariant len <= BASE_SZ;\nloop invariant len >= 0;\nloop invariant j >= 0;\nloop invariant i >= 0;\nloop invariant len <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant i <= BASE_SZ;\nloop invariant len >= 0;\nloop invariant j >= 0;\nloop invariant i >= 0;\nloop invariant len <= BASE_SZ;\nloop invariant len >= 0;\nloop invariant j >= 0;\nloop invariant i >= 0;\nloop invariant len <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant i <= BASE_SZ;\nloop invariant len >= 0;\nloop invariant j >= 0;\nloop invariant i >= 0;\nloop invariant len <= BASE_SZ;\nloop invariant len >= 0;\nloop invariant j >= 0;\nloop invariant i >= 0;\nloop invariant len <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant i <= BASE_SZ;\nloop invariant len >= 0;\nloop invariant j >= 0;\nloop invariant i >= 0;\nloop invariant len <= BASE_SZ;\nloop invariant len >= 0;\nloop invariant j >= 0;\nloop invariant i >= 0;\nloop invariant len <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant i <= BASE_SZ;\nloop invariant len >= 0;\nloop invariant j >= 0;\nloop invariant i >= 0;\nloop invariant len <= BASE_SZ;\nloop invariant len >= 0;\nloop invariant j >= 0;\nloop invariant i >= 0;\nloop invariant len <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant i <= BASE_SZ;\nloop invariant len >= 0;\nloop invariant j >= 0;\nloop invariant i >= 0;\nloop invariant len <= BASE_SZ;\nloop invariant len >= 0;\nloop invariant j >= 0;\nloop invariant i >= 0;\nloop invariant len <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant i <= BASE_SZ;\nloop invariant len >= 0;\nloop invariant j >= 0;\nloop invariant i >= 0;\nloop invariant len <= BASE_SZ;\nloop invariant len >= 0;\nloop invariant j >= 0;\nloop invariant i >= 0;\nloop invariant len <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant i <= BASE_SZ;\nloop invariant len >= 0;\nloop invariant j >= 0;\nloop invariant i >= 0;\nloop invariant len <= BASE_SZ;\nloop invariant len >= 0;\nloop invariant j >= 0;\nloop invariant i >= 0;\nloop invariant len <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant i <= BASE_SZ;\nloop invariant len >= 0;\nloop invariant j >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main ()\n{\n  int BASE_SZ = unknown();\n  int __BLAST_NONDET = unknown();\n  \n  int i;\n  int j;\n  int len = BASE_SZ;\n\n  if(BASE_SZ > 0 ); else goto END;\n\n  {;\n//@ assert( 0 <= BASE_SZ-1 );\n}\n\n  if (len == 0)\n    goto END; \n  \n  i = 0;\n  j = 0;\n  /*@\nloop invariant i1: 0 <= j <= BASE_SZ;\nloop invariant i2: 0 <= i <= BASE_SZ;\nloop invariant i3: 0 <= len <= BASE_SZ;\nloop invariant i4: len >= 0;\nloop invariant i5: j >= 0;\nloop invariant i6: i >= 0;\nloop invariant i7: len <= BASE_SZ;\nloop invariant i8: j <= BASE_SZ;\nloop invariant i9: i <= BASE_SZ;\n*/\nwhile (1) {\n    if ( len == 0 ){ \n      goto END;\n    } else {\n      {;\n//@ assert( 0<= j );\n}\n {;\n//@ assert(j < BASE_SZ);\n}\n\n      {;\n//@ assert( 0<= i );\n}\n {;\n//@ assert(i < BASE_SZ );\n}\n\n      if ( __BLAST_NONDET ) {\n        i++;\n        j++;\n        goto END;\n      }\n    }\n    i ++;\n    j ++;\n    len --;\n  }\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= j <= BASE_SZ;\nloop invariant 0 <= i <= BASE_SZ;\nloop invariant j <= i;\nloop invariant len >= 0;\nloop invariant len <= BASE_SZ;\nloop invariant len >= 1 ==> len <= BASE_SZ;\nloop invariant len >= 0 ==> i + j >= len;\nloop invariant len >= 1 ==> i + j >= len;\nloop invariant len == 0 ==> i + j == BASE_SZ;\nloop invariant len == 1 ==> i + j == BASE_SZ;\nloop invariant len == 2 ==> i + j == BASE_SZ;\nloop invariant len == 3 ==> i + j == BASE_SZ;\nloop invariant len == 4 ==> i + j == BASE_SZ;\nloop invariant len == 5 ==> i + j == BASE_SZ;\nloop invariant len == 6 ==> i + j == BASE_SZ;\nloop invariant len == 7 ==> i + j == BASE_SZ;\nloop invariant len == 8 ==> i + j == BASE_SZ;\nloop invariant len == 9 ==> i + j == BASE_SZ;\nloop invariant len == 10 ==> i + j == BASE_SZ;\nloop invariant len == 11 ==> i + j == BASE_SZ;\nloop invariant len == 12 ==> i + j == BASE_SZ;\nloop invariant len == 13 ==> i + j == BASE_SZ;\nloop invariant len == 14 ==> i + j == BASE_SZ;\nloop invariant len == 15 ==> i + j == BASE_SZ;\nloop invariant len == 16 ==> i + j == BASE_SZ;\nloop invariant len == 17 ==> i + j == BASE_SZ;\nloop invariant len == 18 ==> i + j == BASE_SZ;\nloop invariant len == 19 ==> i + j == BASE_SZ;\nloop invariant len == 20 ==> i + j == BASE_SZ;\nloop invariant len == 21 ==> i + j == BASE_SZ;\nloop invariant len == 22 ==> i + j == BASE_SZ;\nloop invariant len == 23 ==> i + j == BASE_SZ;\nloop invariant len == 24 ==> i + j == BASE_SZ;\nloop invariant len == 25 ==> i + j == BASE_SZ;\nloop invariant len == 26 ==> i + j == BASE_SZ;\nloop invariant len == 27 ==> i + j == BASE_SZ;\nloop invariant len == 28 ==> i + j == BASE_SZ;\nloop invariant len == 29 ==> i + j == BASE_SZ;\nloop invariant len == 30 ==> i + j == BASE_SZ;\nloop invariant len == 31 ==> i + j == BASE_SZ;\nloop invariant len == 32 ==> i + j == BASE_SZ;\nloop invariant len == 33 ==> i + j == BASE_SZ;\nloop invariant len == 34 ==> i + j == BASE_SZ;\nloop invariant len == 35 ==> i + j == BASE_SZ;\nloop invariant len == 36 ==> i + j == BASE_SZ;\nloop invariant len == 37 ==> i + j == BASE_SZ;\nloop invariant len == 38 ==> i + j == BASE_SZ;\nloop invariant len == 39 ==> i + j == BASE_SZ;\nloop invariant len == 40 ==> i + j == BASE_SZ;\nloop invariant len == 41 ==> i + j == BASE_SZ;\nloop invariant len == 42 ==> i + j == BASE_SZ;\nloop invariant len == 43 ==> i + j == BASE_SZ;\nloop invariant len == 44 ==> i + j == BASE_SZ;\nloop invariant len == 45 ==> i + j == BASE_SZ;\nloop invariant len == 46 ==> i + j == BASE_SZ;\nloop invariant len == 47 ==> i + j == BASE_SZ;\nloop invariant len == 48 ==> i + j == BASE_SZ;\nloop invariant len == 49 ==> i + j == BASE_SZ;\nloop invariant len == 50 ==> i + j == BASE_SZ;\nloop invariant len == 51 ==> i + j == BASE_SZ;\nloop invariant len == 52 ==> i + j == BASE_SZ;\nloop invariant len == 53 ==> i + j == BASE_SZ;\nloop invariant len == 54 ==> i + j == BASE_SZ;\nloop invariant len == 55 ==> i + j == BASE_SZ;\nloop invariant len == 56 ==> i + j == BASE_SZ;\nloop invariant len == 57 ==> i + j == BASE_SZ;\nloop invariant len == 58 ==> i + j == BASE_SZ;\nloop invariant len == 59 ==> i + j == BASE_SZ;\nloop invariant len == 60 ==> i + j == BASE_SZ;\nloop invariant len == 61 ==> i + j == BASE_SZ;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main ()\n{\n  int BASE_SZ = unknown();\n  int __BLAST_NONDET = unknown();\n  \n  int i;\n  int j;\n  int len = BASE_SZ;\n\n  if(BASE_SZ > 0 ); else goto END;\n\n  {;\n//@ assert( 0 <= BASE_SZ-1 );\n}\n\n  if (len == 0)\n    goto END; \n  \n  i = 0;\n  j = 0;\n  /*@\nloop invariant i1: 0 <= j <= BASE_SZ;\nloop invariant i2: 0 <= i <= BASE_SZ;\nloop invariant i3: j <= i;\nloop invariant i4: len >= 0;\nloop invariant i5: len <= BASE_SZ;\nloop invariant i6: len >= 1 ==> len <= BASE_SZ;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (1) {\n    if ( len == 0 ){ \n      goto END;\n    } else {\n      {;\n//@ assert( 0<= j );\n}\n {;\n//@ assert(j < BASE_SZ);\n}\n\n      {;\n//@ assert( 0<= i );\n}\n {;\n//@ assert(i < BASE_SZ );\n}\n\n      if ( __BLAST_NONDET ) {\n        i++;\n        j++;\n        goto END;\n      }\n    }\n    i ++;\n    j ++;\n    len --;\n  }\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i;\nloop invariant i < BASE_SZ;\nloop invariant 0 <= j;\nloop invariant j < BASE_SZ;\nloop invariant len >= 0;\nloop invariant len <= BASE_SZ;\nloop invariant len >= BASE_SZ - i;\nloop invariant len >= BASE_SZ - j;\nloop invariant len >= BASE_SZ - (i + j);\nloop invariant len >= BASE_SZ - (i + j + 1);\nloop invariant len >= BASE_SZ - (i + j + 2);\nloop invariant len >= BASE_SZ - (i + j + 3);\nloop invariant len >= BASE_SZ - (i + j + 4);\nloop invariant len >= BASE_SZ - (i + j + 5);\nloop invariant len >= BASE_SZ - (i + j + 6);\nloop invariant len >= BASE_SZ - (i + j + 7);\nloop invariant len >= BASE_SZ - (i + j + 8);\nloop invariant len >= BASE_SZ - (i + j + 9);\nloop invariant len >= BASE_SZ - (i + j + 10);\nloop invariant len >= BASE_SZ - (i + j + 11);\nloop invariant len >= BASE_SZ - (i + j + 12);\nloop invariant len >= BASE_SZ - (i + j + 13);\nloop invariant len >= BASE_SZ - (i + j + 14);\nloop invariant len >= BASE_SZ - (i + j + 15);\nloop invariant len >= BASE_SZ - (i + j + 16);\nloop invariant len >= BASE_SZ - (i + j + 17);\nloop invariant len >= BASE_SZ - (i + j + 18);\nloop invariant len >= BASE_SZ - (i + j + 19);\nloop invariant len >= BASE_SZ - (i + j + 20);\nloop invariant len >= BASE_SZ - (i + j + 21);\nloop invariant len >= BASE_SZ - (i + j + 22);\nloop invariant len >= BASE_SZ - (i + j + 23);\nloop invariant len >= BASE_SZ - (i + j + 24);\nloop invariant len >= BASE_SZ - (i + j + 25);\nloop invariant len >= BASE_SZ - (i + j + 26);\nloop invariant len >= BASE_SZ - (i + j + 27);\nloop invariant len >= BASE_SZ - (i + j + 28);\nloop invariant len >= BASE_SZ - (i + j + 29);\nloop invariant len >= BASE_SZ - (i + j + 30);\nloop invariant len >= BASE_SZ - (i + j + 31);\nloop invariant len >= BASE_SZ - (i + j + 32);\nloop invariant len >= BASE_SZ - (i + j + 33);\nloop invariant len >= BASE_SZ - (i + j + 34);\nloop invariant len >= BASE_SZ - (i + j + 35);\nloop invariant len >= BASE_SZ - (i + j + 36);\nloop invariant len >= BASE_SZ - (i + j + 37);\nloop invariant len >= BASE_SZ - (i + j + 38);\nloop invariant len >= BASE_SZ - (i + j + 39);\nloop invariant len >= BASE_SZ - (i + j + 40);\nloop invariant len >= BASE_SZ - (i + j + 41);\nloop invariant len >= BASE_SZ - (i + j + 42);\nloop invariant len >= BASE_SZ - (i + j + 43);\nloop invariant len >= BASE_SZ - (i + j + 44);\nloop invariant len >= BASE_SZ - (i + j + 45);\nloop invariant len >= BASE_SZ - (i + j + 46);\nloop invariant len >= BASE_SZ - (i + j + 47);\nloop invariant len >= BASE_SZ - (i + j + 48);\nloop invariant len >= BASE_SZ - (i + j + 49);\nloop invariant len >= BASE_SZ - (i + j + 50);\nloop invariant len >= BASE_SZ - (i + j + 51);\nloop invariant len >= BASE_SZ - (i + j + 52);\nloop invariant len >= BASE_SZ - (i + j + 53);\nloop invariant len >= BASE_SZ - (i + j + 54);\nloop invariant len >= BASE_SZ - (i + j + 55);\nloop invariant len >= BASE_SZ - (i + j + 56);\nloop invariant len >= BASE_SZ - (i + j + 57);\nloop invariant len >= BASE_SZ - (i + j + 58);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main ()\n{\n  int BASE_SZ = unknown();\n  int __BLAST_NONDET = unknown();\n  \n  int i;\n  int j;\n  int len = BASE_SZ;\n\n  if(BASE_SZ > 0 ); else goto END;\n\n  {;\n//@ assert( 0 <= BASE_SZ-1 );\n}\n\n  if (len == 0)\n    goto END; \n  \n  i = 0;\n  j = 0;\n  /*@\nloop invariant i1: 0 <= i;\n\nloop invariant i3: 0 <= j;\n\nloop invariant i5: len >= 0;\nloop invariant i6: len <= BASE_SZ;\nloop invariant i7: len >= BASE_SZ - i;\nloop invariant i8: len >= BASE_SZ - j;\nloop invariant i9: len >= BASE_SZ - (i + j);\nloop invariant i10: len >= BASE_SZ - (i + j + 1);\nloop invariant i11: len >= BASE_SZ - (i + j + 2);\nloop invariant i12: len >= BASE_SZ - (i + j + 3);\nloop invariant i13: len >= BASE_SZ - (i + j + 4);\nloop invariant i14: len >= BASE_SZ - (i + j + 5);\nloop invariant i15: len >= BASE_SZ - (i + j + 6);\nloop invariant i16: len >= BASE_SZ - (i + j + 7);\nloop invariant i17: len >= BASE_SZ - (i + j + 8);\nloop invariant i18: len >= BASE_SZ - (i + j + 9);\nloop invariant i19: len >= BASE_SZ - (i + j + 10);\nloop invariant i20: len >= BASE_SZ - (i + j + 11);\nloop invariant i21: len >= BASE_SZ - (i + j + 12);\nloop invariant i22: len >= BASE_SZ - (i + j + 13);\nloop invariant i23: len >= BASE_SZ - (i + j + 14);\nloop invariant i24: len >= BASE_SZ - (i + j + 15);\nloop invariant i25: len >= BASE_SZ - (i + j + 16);\nloop invariant i26: len >= BASE_SZ - (i + j + 17);\nloop invariant i27: len >= BASE_SZ - (i + j + 18);\nloop invariant i28: len >= BASE_SZ - (i + j + 19);\nloop invariant i29: len >= BASE_SZ - (i + j + 20);\nloop invariant i30: len >= BASE_SZ - (i + j + 21);\nloop invariant i31: len >= BASE_SZ - (i + j + 22);\nloop invariant i32: len >= BASE_SZ - (i + j + 23);\nloop invariant i33: len >= BASE_SZ - (i + j + 24);\nloop invariant i34: len >= BASE_SZ - (i + j + 25);\nloop invariant i35: len >= BASE_SZ - (i + j + 26);\nloop invariant i36: len >= BASE_SZ - (i + j + 27);\nloop invariant i37: len >= BASE_SZ - (i + j + 28);\nloop invariant i38: len >= BASE_SZ - (i + j + 29);\nloop invariant i39: len >= BASE_SZ - (i + j + 30);\nloop invariant i40: len >= BASE_SZ - (i + j + 31);\nloop invariant i41: len >= BASE_SZ - (i + j + 32);\nloop invariant i42: len >= BASE_SZ - (i + j + 33);\nloop invariant i43: len >= BASE_SZ - (i + j + 34);\nloop invariant i44: len >= BASE_SZ - (i + j + 35);\nloop invariant i45: len >= BASE_SZ - (i + j + 36);\nloop invariant i46: len >= BASE_SZ - (i + j + 37);\nloop invariant i47: len >= BASE_SZ - (i + j + 38);\nloop invariant i48: len >= BASE_SZ - (i + j + 39);\nloop invariant i49: len >= BASE_SZ - (i + j + 40);\nloop invariant i50: len >= BASE_SZ - (i + j + 41);\nloop invariant i51: len >= BASE_SZ - (i + j + 42);\nloop invariant i52: len >= BASE_SZ - (i + j + 43);\nloop invariant i53: len >= BASE_SZ - (i + j + 44);\nloop invariant i54: len >= BASE_SZ - (i + j + 45);\nloop invariant i55: len >= BASE_SZ - (i + j + 46);\nloop invariant i56: len >= BASE_SZ - (i + j + 47);\nloop invariant i57: len >= BASE_SZ - (i + j + 48);\nloop invariant i58: len >= BASE_SZ - (i + j + 49);\nloop invariant i59: len >= BASE_SZ - (i + j + 50);\nloop invariant i60: len >= BASE_SZ - (i + j + 51);\nloop invariant i61: len >= BASE_SZ - (i + j + 52);\nloop invariant i62: len >= BASE_SZ - (i + j + 53);\nloop invariant i63: len >= BASE_SZ - (i + j + 54);\nloop invariant i64: len >= BASE_SZ - (i + j + 55);\nloop invariant i65: len >= BASE_SZ - (i + j + 56);\nloop invariant i66: len >= BASE_SZ - (i + j + 57);\nloop invariant i67: len >= BASE_SZ - (i + j + 58);\n*/\nwhile (1) {\n    if ( len == 0 ){ \n      goto END;\n    } else {\n      {;\n//@ assert( 0<= j );\n}\n {;\n//@ assert(j < BASE_SZ);\n}\n\n      {;\n//@ assert( 0<= i );\n}\n {;\n//@ assert(i < BASE_SZ );\n}\n\n      if ( __BLAST_NONDET ) {\n        i++;\n        j++;\n        goto END;\n      }\n    }\n    i ++;\n    j ++;\n    len --;\n  }\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant i == j;loop invariant i >= 0;loop invariant j >= 0;loop invariant len >= 0;loop invariant len <= BASE_SZ;loop invariant i < BASE_SZ;loop invariant j < BASE_SZ;loop invariant i <= BASE_SZ;loop invariant j <= BASE_SZ;loop invariant i <= j;loop invariant i >= 0;loop invariant j >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main ()\n{\n  int BASE_SZ = unknown();\n  int __BLAST_NONDET = unknown();\n  \n  int i;\n  int j;\n  int len = BASE_SZ;\n\n  if(BASE_SZ > 0 ); else goto END;\n\n  {;\n//@ assert( 0 <= BASE_SZ-1 );\n}\n\n  if (len == 0)\n    goto END; \n  \n  i = 0;\n  j = 0;\n  /*@\nloop invariant i1: i == j;loop invariant i >= 0;loop invariant j >= 0;loop invariant len >= 0;loop invariant len <= BASE_SZ;loop invariant i < BASE_SZ;loop invariant j < BASE_SZ;loop invariant i <= BASE_SZ;loop invariant j <= BASE_SZ;loop invariant i <= j;loop invariant i >= 0;loop invariant j >= 0;\n*/\nwhile (1) {\n    if ( len == 0 ){ \n      goto END;\n    } else {\n      {;\n//@ assert( 0<= j );\n}\n {;\n//@ assert(j < BASE_SZ);\n}\n\n      {;\n//@ assert( 0<= i );\n}\n {;\n//@ assert(i < BASE_SZ );\n}\n\n      if ( __BLAST_NONDET ) {\n        i++;\n        j++;\n        goto END;\n      }\n    }\n    i ++;\n    j ++;\n    len --;\n  }\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= j && j <= BASE_SZ;\nloop invariant 0 <= i && i <= BASE_SZ;\nloop invariant len >= 0;\nloop invariant __BLAST_NONDET == 0 || __BLAST_NONDET == 1;\nloop invariant (i >= j && j >= 0 && i <= BASE_SZ) ==> (__BLAST_NONDET == 0 || __BLAST_NONDET == 1);\nloop invariant (len >= 0 && __BLAST_NONDET == 0 || __BLAST_NONDET == 1) ==> (i + 1 >= j && j + 1 >= 0 && i + 1 <= BASE_SZ);\nloop invariant (len >= 1 && __BLAST_NONDET == 0 || __BLAST_NONDET == 1) ==> (i + 1 >= j + 1 && j + 1 + 1 >= 0 && i + 1 <= BASE_SZ);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main ()\n{\n  int BASE_SZ = unknown();\n  int __BLAST_NONDET = unknown();\n  \n  int i;\n  int j;\n  int len = BASE_SZ;\n\n  if(BASE_SZ > 0 ); else goto END;\n\n  {;\n//@ assert( 0 <= BASE_SZ-1 );\n}\n\n  if (len == 0)\n    goto END; \n  \n  i = 0;\n  j = 0;\n  /*@\nloop invariant i1: 0 <= j && j <= BASE_SZ;\nloop invariant i2: 0 <= i && i <= BASE_SZ;\nloop invariant i3: len >= 0;\n\n\n\n\n*/\nwhile (1) {\n    if ( len == 0 ){ \n      goto END;\n    } else {\n      {;\n//@ assert( 0<= j );\n}\n {;\n//@ assert(j < BASE_SZ);\n}\n\n      {;\n//@ assert( 0<= i );\n}\n {;\n//@ assert(i < BASE_SZ );\n}\n\n      if ( __BLAST_NONDET ) {\n        i++;\n        j++;\n        goto END;\n      }\n    }\n    i ++;\n    j ++;\n    len --;\n  }\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 98,
                "annotations": "```\n/*@\nloop invariant 0 <= j <= BASE_SZ;\nloop invariant 0 <= i <= BASE_SZ;\nloop invariant len > 0;\nloop invariant j == i;\nloop invariant len == 1;\nloop invariant i == BASE_SZ - 2;\nloop invariant j == BASE_SZ - 1;\nloop invariant len == 0;\nloop invariant i == BASE_SZ - 1;\nloop invariant j == BASE_SZ - 1;\nloop invariant len == -1;\nloop invariant i == BASE_SZ;\nloop invariant j == BASE_SZ;\nloop invariant len == -2;\nloop invariant i == BASE_SZ + 1;\nloop invariant j == BASE_SZ + 1;\nloop invariant len == -3;\nloop invariant i == BASE_SZ + 2;\nloop invariant j == BASE_SZ + 2;\nloop invariant len == -4;\nloop invariant i == BASE_SZ + 3;\nloop invariant j == BASE_SZ + 3;\nloop invariant len == -5;\nloop invariant i == BASE_SZ + 4;\nloop invariant j == BASE_SZ + 4;\nloop invariant len == -6;\nloop invariant i == BASE_SZ + 5;\nloop invariant j == BASE_SZ + 5;\nloop invariant len == -7;\nloop invariant i == BASE_SZ + 6;\nloop invariant j == BASE_SZ + 6;\nloop invariant len == -8;\nloop invariant i == BASE_SZ + 7;\nloop invariant j == BASE_SZ + 7;\nloop invariant len == -9;\nloop invariant i == BASE_SZ + 8;\nloop invariant j == BASE_SZ + 8;\nloop invariant len == -10;\nloop invariant i == BASE_SZ + 9;\nloop invariant j == BASE_SZ + 9;\nloop invariant len == -11;\nloop invariant i == BASE_SZ + 10;\nloop invariant j == BASE_SZ + 10;\nloop invariant len == -12;\nloop invariant i == BASE_SZ + 11;\nloop invariant j == BASE_SZ + 11;\nloop invariant len == -13;\nloop invariant i == BASE_SZ + 12;\nloop invariant j == BASE_SZ + 12;\nloop invariant len == -14;\nloop invariant i == BASE_SZ + 13;\nloop invariant j == BASE_SZ + 13;\nloop invariant len == -15;\nloop invariant i == BASE_SZ + 14;\nloop invariant j == BASE_SZ + 14;\nloop invariant len == -16;\nloop invariant i == BASE_SZ + 15;\nloop invariant j == BASE_SZ + 15;\nloop invariant len == -17;\nloop invariant i == BASE_SZ + 16;\nloop invariant j == BASE_SZ + 16;\nloop invariant len == -18;\nloop invariant i == BASE_SZ + 17;\nloop invariant j == BASE_SZ + 17;\nloop invariant len == -19;\nloop invariant i == BASE_SZ + 18;\nloop invariant j == BASE_SZ + 18;\nloop invariant len == -20;\nloop invariant i == BASE_SZ + 19;\nloop invariant j == BASE_SZ + 19;\nloop invariant len == -21;\nloop invariant i == BASE_SZ + 20;\nloop invariant j == BASE_SZ + 20;\nloop invariant len == -22;\nloop invariant i == BASE_SZ + 21;\nloop invariant j == BASE_SZ + 21;\nloop invariant len == -23;\nloop invariant i == BASE_SZ + 22;\nloop invariant j == BASE_SZ + 22;\nloop invariant len == -24;\nloop invariant i == BASE_SZ + 23;\nloop invariant j == BASE_SZ + 23;\nloop invariant len == -25;\nloop invariant i == BASE_SZ + 24;\nloop invariant j == BASE_SZ + 24;\nloop invariant len == -26;\nloop invariant i == BASE_SZ + 25;\nloop invariant j == BASE_SZ + 25;\nloop invariant len == -27;\nloop invariant i == BASE_SZ + 26;\nloop invariant j == BASE_SZ + 26;\nloop invariant len == -28;\nloop invariant i == BASE_SZ + 27;\nloop invariant j == BASE_SZ + 27;\nloop invariant len == -29;\nloop invariant i == BASE_SZ + 28;\nloop invariant j == BASE_SZ + 28;\nloop invariant len == -30;\nloop invariant i == BASE_SZ + 29;\nloop invariant j == BASE_SZ + 29;\nloop invariant len == -31;\nloop invariant i == BASE_SZ + 30;\nloop invariant j == BASE_SZ + 30;\nloop invariant len == -32;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main ()\n{\n  int BASE_SZ = unknown();\n  int __BLAST_NONDET = unknown();\n  \n  int i;\n  int j;\n  int len = BASE_SZ;\n\n  if(BASE_SZ > 0 ); else goto END;\n\n  {;\n//@ assert( 0 <= BASE_SZ-1 );\n}\n\n  if (len == 0)\n    goto END; \n  \n  i = 0;\n  j = 0;\n  /*@\nloop invariant i1: 0 <= j <= BASE_SZ;\nloop invariant i2: 0 <= i <= BASE_SZ;\n\nloop invariant i4: j == i;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (1) {\n    if ( len == 0 ){ \n      goto END;\n    } else {\n      {;\n//@ assert( 0<= j );\n}\n {;\n//@ assert(j < BASE_SZ);\n}\n\n      {;\n//@ assert( 0<= i );\n}\n {;\n//@ assert(i < BASE_SZ );\n}\n\n      if ( __BLAST_NONDET ) {\n        i++;\n        j++;\n        goto END;\n      }\n    }\n    i ++;\n    j ++;\n    len --;\n  }\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= BASE_SZ;\nloop invariant 1 <= j <= BASE_SZ;\nloop invariant BASE_SZ - len == i + j;\nloop invariant len >= 0;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant 0 <= len <= BASE_SZ;\nloop invariant 0 <= i <= BASE_SZ;\nloop invariant 0 <= j <= BASE_SZ;\nloop invariant 1 <= i + j <= 2 * BASE_SZ;\nloop invariant 1 <= i + j <= 2 * BASE_SZ;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main ()\n{\n  int BASE_SZ = unknown();\n  int __BLAST_NONDET = unknown();\n  \n  int i;\n  int j;\n  int len = BASE_SZ;\n\n  if(BASE_SZ > 0 ); else goto END;\n\n  {;\n//@ assert( 0 <= BASE_SZ-1 );\n}\n\n  if (len == 0)\n    goto END; \n  \n  i = 0;\n  j = 0;\n  /*@\n\n\n\nloop invariant i4: len >= 0;\nloop invariant i5: i <= BASE_SZ;\nloop invariant i6: j <= BASE_SZ;\nloop invariant i7: 0 <= len <= BASE_SZ;\nloop invariant i8: 0 <= i <= BASE_SZ;\nloop invariant i9: 0 <= j <= BASE_SZ;\n\n*/\nwhile (1) {\n    if ( len == 0 ){ \n      goto END;\n    } else {\n      {;\n//@ assert( 0<= j );\n}\n {;\n//@ assert(j < BASE_SZ);\n}\n\n      {;\n//@ assert( 0<= i );\n}\n {;\n//@ assert(i < BASE_SZ );\n}\n\n      if ( __BLAST_NONDET ) {\n        i++;\n        j++;\n        goto END;\n      }\n    }\n    i ++;\n    j ++;\n    len --;\n  }\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= BASE_SZ - 1 ;\nloop invariant 0 <= len ;\nloop invariant 0 <= i ;\nloop invariant i <= BASE_SZ ;\nloop invariant 0 <= j ;\nloop invariant j <= BASE_SZ ;\nloop invariant i == j ==> len == 0 ;\nloop invariant i != j ==> len != 0 ;\nloop invariant i < j ==> len != 0 ;\nloop invariant i == j ==> len == 0 ;\nloop invariant i != j ==> len != 0 ;\nloop invariant i < j ==> len != 0 ;\nloop invariant i == j ==> len == 0 ;\nloop invariant i != j ==> len != 0 ;\nloop invariant i < j ==> len != 0 ;\nloop invariant i == j ==> len == 0 ;\nloop invariant i != j ==> len != 0 ;\nloop invariant i < j ==> len != 0 ;\nloop invariant i == j ==> len == 0 ;\nloop invariant i != j ==> len != 0 ;\nloop invariant i < j ==> len != 0 ;\nloop invariant i == j ==> len == 0 ;\nloop invariant i != j ==> len != 0 ;\nloop invariant i < j ==> len != 0 ;\nloop invariant i == j ==> len == 0 ;\nloop invariant i != j ==> len != 0 ;\nloop invariant i < j ==> len != 0 ;\nloop invariant i == j ==> len == 0 ;\nloop invariant i != j ==> len != 0 ;\nloop invariant i < j ==> len != 0 ;\nloop invariant i == j ==> len == 0 ;\nloop invariant i != j ==> len != 0 ;\nloop invariant i < j ==> len != 0 ;\nloop invariant i == j ==> len == 0 ;\nloop invariant i != j ==> len != 0 ;\nloop invariant i < j ==> len != 0 ;\nloop invariant i == j ==> len == 0 ;\nloop invariant i != j ==> len != 0 ;\nloop invariant i < j ==> len != 0 ;\nloop invariant i == j ==> len == 0 ;\nloop invariant i != j ==> len != 0 ;\nloop invariant i < j ==> len != 0 ;\nloop invariant i == j ==> len == 0 ;\nloop invariant i != j ==> len != 0 ;\nloop invariant i < j ==> len != 0 ;\nloop invariant i == j ==> len == 0 ;\nloop invariant i != j ==> len != 0 ;\nloop invariant i < j ==> len != 0 ;\nloop invariant i == j ==> len == 0 ;\nloop invariant i != j ==> len != 0 ;\nloop invariant i < j ==> len != 0 ;\nloop invariant i == j ==> len == 0 ;\nloop invariant i != j ==> len != 0 ;\nloop invariant i < j ==> len != 0 ;\nloop invariant i == j ==> len == 0 ;\nloop invariant i != j ==> len != 0 ;\nloop invariant i < j ==> len != 0 ;\nloop invariant i == j ==> len == 0 ;\nloop invariant i != j ==> len != 0 ;\nloop invariant i < j ==> len != 0 ;\nloop invariant i == j ==> len == 0 ;\nloop invariant i != j ==> len != 0 ;\nloop invariant i < j ==> len != 0 ;\nloop invariant i == j ==> len == 0 ;\nloop invariant i != j ==> len != 0 ;\nloop invariant i < j ==> len != 0 ;\nloop invariant i == j ==> len == 0 ;\nloop invariant i != j ==> len != 0 ;\nloop invariant i < j ==> len != 0 ;\nloop invariant i == j ==> len == 0 ;\nloop invariant i != j ==> len != 0 ;\nloop invariant i < j ==> len != 0 ;\nloop invariant i == j ==> len == 0 ;\nloop invariant i != j ==> len != 0 ;\nloop invariant i < j ==> len != 0 ;\nloop invariant i == j ==> len == 0 ;\nloop invariant i != j ==> len != 0 ;\nloop invariant i < j ==> len != 0 ;\nloop invariant i == j ==> len == 0 ;\nloop invariant i != j ==> len != 0 ;\nloop invariant i < j ==> len != 0 ;\nloop invariant i == j ==> len == 0 ;\nloop invariant i != j ==> len != 0 ;\nloop invariant i < j ==> len != 0 ;\nloop invariant i == j ==> len == 0 ;\nloop invariant i != j ==> len != 0 ;\nloop invariant i < j ==> len != 0 ;\nloop invariant i == j ==> len == 0 ;\nloop invariant i != j ==> len != 0 ;\nloop invariant i < j ==> len != 0 ;\nloop invariant i == j ==> len == 0 ;\nloop invariant i != j ==> len != 0 ;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main ()\n{\n  int BASE_SZ = unknown();\n  int __BLAST_NONDET = unknown();\n  \n  int i;\n  int j;\n  int len = BASE_SZ;\n\n  if(BASE_SZ > 0 ); else goto END;\n\n  {;\n//@ assert( 0 <= BASE_SZ-1 );\n}\n\n  if (len == 0)\n    goto END; \n  \n  i = 0;\n  j = 0;\n  /*@\nloop invariant i1: 0 <= BASE_SZ - 1 ;\nloop invariant i2: 0 <= len ;\nloop invariant i3: 0 <= i ;\nloop invariant i4: i <= BASE_SZ ;\nloop invariant i5: 0 <= j ;\nloop invariant i6: j <= BASE_SZ ;\nloop invariant i7: i == j ==> len == 0 ;\nloop invariant i8: i != j ==> len != 0 ;\nloop invariant i9: i < j ==> len != 0 ;\n*/\nwhile (1) {\n    if ( len == 0 ){ \n      goto END;\n    } else {\n      {;\n//@ assert( 0<= j );\n}\n {;\n//@ assert(j < BASE_SZ);\n}\n\n      {;\n//@ assert( 0<= i );\n}\n {;\n//@ assert(i < BASE_SZ );\n}\n\n      if ( __BLAST_NONDET ) {\n        i++;\n        j++;\n        goto END;\n      }\n    }\n    i ++;\n    j ++;\n    len --;\n  }\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant ( ( i >= 0 ) && ( i <= BASE_SZ ) );\nloop invariant ( ( j >= 0 ) && ( j <= BASE_SZ ) );\nloop invariant ( ( len >= 0 ) && ( len <= BASE_SZ ) );\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main ()\n{\n  int BASE_SZ = unknown();\n  int __BLAST_NONDET = unknown();\n  \n  int i;\n  int j;\n  int len = BASE_SZ;\n\n  if(BASE_SZ > 0 ); else goto END;\n\n  {;\n//@ assert( 0 <= BASE_SZ-1 );\n}\n\n  if (len == 0)\n    goto END; \n  \n  i = 0;\n  j = 0;\n  /*@\nloop invariant i1: ( ( i >= 0 ) && ( i <= BASE_SZ ) );\nloop invariant i2: ( ( j >= 0 ) && ( j <= BASE_SZ ) );\nloop invariant i3: ( ( len >= 0 ) && ( len <= BASE_SZ ) );\n*/\nwhile (1) {\n    if ( len == 0 ){ \n      goto END;\n    } else {\n      {;\n//@ assert( 0<= j );\n}\n {;\n//@ assert(j < BASE_SZ);\n}\n\n      {;\n//@ assert( 0<= i );\n}\n {;\n//@ assert(i < BASE_SZ );\n}\n\n      if ( __BLAST_NONDET ) {\n        i++;\n        j++;\n        goto END;\n      }\n    }\n    i ++;\n    j ++;\n    len --;\n  }\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= BASE_SZ;\nloop invariant 0 <= j <= BASE_SZ;\nloop invariant 0 <= len <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant i <= j;\nloop invariant j <= BASE_SZ;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main ()\n{\n  int BASE_SZ = unknown();\n  int __BLAST_NONDET = unknown();\n  \n  int i;\n  int j;\n  int len = BASE_SZ;\n\n  if(BASE_SZ > 0 ); else goto END;\n\n  {;\n//@ assert( 0 <= BASE_SZ-1 );\n}\n\n  if (len == 0)\n    goto END; \n  \n  i = 0;\n  j = 0;\n  /*@\nloop invariant i1: 0 <= i <= BASE_SZ;\nloop invariant i2: 0 <= j <= BASE_SZ;\nloop invariant i3: 0 <= len <= BASE_SZ;\nloop invariant i4: len <= BASE_SZ;\nloop invariant i5: i <= j;\nloop invariant i6: j <= BASE_SZ;\n*/\nwhile (1) {\n    if ( len == 0 ){ \n      goto END;\n    } else {\n      {;\n//@ assert( 0<= j );\n}\n {;\n//@ assert(j < BASE_SZ);\n}\n\n      {;\n//@ assert( 0<= i );\n}\n {;\n//@ assert(i < BASE_SZ );\n}\n\n      if ( __BLAST_NONDET ) {\n        i++;\n        j++;\n        goto END;\n      }\n    }\n    i ++;\n    j ++;\n    len --;\n  }\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "loop invariant 0 <= i <= BASE_SZ is partially proven to be inductive.\nloop invariant 0 <= j <= BASE_SZ is partially proven to be inductive.\nloop invariant 0 <= len <= BASE_SZ is partially proven to be inductive.\nloop invariant i == j is partially proven to be inductive.\nloop invariant i + j == BASE_SZ is preserved but not established.\nloop invariant len == 0 is partially proven to be inductive.\nloop invariant 0 <= j <= i is partially proven to be inductive.\nloop invariant 0 <= i <= len is partially proven to be inductive.\nloop invariant j + i <= len is partially proven to be inductive.\nloop invariant len >= 0 is partially proven to be inductive.\nloop invariant j >= 0 is partially proven to be inductive.\nloop invariant i >= 0 is partially proven to be inductive.\nloop invariant j <= BASE_SZ is partially proven to be inductive.\nloop invariant i <= BASE_SZ is partially proven to be inductive.\nloop invariant j <= len is partially proven to be inductive.\nloop invariant i <= len is partially proven to be inductive.\nloop invariant j <= i + len is partially proven to be inductive.\nloop invariant i <= j + len is partially proven to be inductive.\nloop invariant BASE_SZ > 0 is partially proven to be inductive.\nloop invariant 0 <= BASE_SZ is partially proven to be inductive.\nloop invariant len <= BASE_SZ is partially proven to be inductive.\nloop invariant i <= j is partially proven to be inductive.\nloop invariant j <= i is partially proven to be inductive.\nloop invariant len >= 1 ==> len <= BASE_SZ is partially proven to be inductive.\nloop invariant len >= 0 ==> i + j >= len is partially proven to be inductive.\nloop invariant len >= 1 ==> i + j >= len is partially proven to be inductive.\nloop invariant len == 0 ==> i + j == BASE_SZ is partially proven to be inductive.\nloop invariant len == 1 ==> i + j == BASE_SZ is partially proven to be inductive.\nloop invariant len == 2 ==> i + j == BASE_SZ is partially proven to be inductive.\nloop invariant len == 3 ==> i + j == BASE_SZ is partially proven to be inductive.\nloop invariant len == 4 ==> i + j == BASE_SZ is partially proven to be inductive.\nloop invariant len == 5 ==> i + j == BASE_SZ is partially proven to be inductive.\nloop invariant len == 6 ==> i + j == BASE_SZ is partially proven to be inductive.\nloop invariant len == 7 ==> i + j == BASE_SZ is partially proven to be inductive.\nloop invariant len == 8 ==> i + j == BASE_SZ is partially proven to be inductive.\nloop invariant len == 9 ==> i + j == BASE_SZ is partially proven to be inductive.\nloop invariant len == 10 ==> i + j == BASE_SZ is partially proven to be inductive.\nloop invariant len == 11 ==> i + j == BASE_SZ is partially proven to be inductive.\nloop invariant len == 12 ==> i + j == BASE_SZ is partially proven to be inductive.\nloop invariant len == 13 ==> i + j == BASE_SZ is partially proven to be inductive.\nloop invariant len == 14 ==> i + j == BASE_SZ is partially proven to be inductive.\nloop invariant len == 15 ==> i + j == BASE_SZ is partially proven to be inductive.\nloop invariant len == 16 ==> i + j == BASE_SZ is partially proven to be inductive.\nloop invariant len == 17 ==> i + j == BASE_SZ is partially proven to be inductive.\nloop invariant len == 18 ==> i + j == BASE_SZ is partially proven to be inductive.\nloop invariant len == 19 ==> i + j == BASE_SZ is partially proven to be inductive.\nloop invariant len == 20 ==> i + j == BASE_SZ is partially proven to be inductive.\nloop invariant len == 21 ==> i + j == BASE_SZ is partially proven to be inductive.\nloop invariant len == 22 ==> i + j == BASE_SZ is partially proven to be inductive.\nloop invariant len == 23 ==> i + j == BASE_SZ is partially proven to be inductive.\nloop invariant len == 24 ==> i + j == BASE_SZ is partially proven to be inductive.\nloop invariant len == 25 ==> i + j == BASE_SZ is partially proven to be inductive.\nloop invariant len == 26 ==> i + j == BASE_SZ is partially proven to be inductive.\nloop invariant len == 27 ==> i + j == BASE_SZ is partially proven to be inductive.\nloop invariant len == 28 ==> i + j == BASE_SZ is partially proven to be inductive.\nloop invariant len == 29 ==> i + j == BASE_SZ is partially proven to be inductive.\nloop invariant len == 30 ==> i + j == BASE_SZ is partially proven to be inductive.\nloop invariant len == 31 ==> i + j == BASE_SZ is partially proven to be inductive.\nloop invariant len == 32 ==> i + j == BASE_SZ is partially proven to be inductive.\nloop invariant len == 33 ==> i + j == BASE_SZ is partially proven to be inductive.\nloop invariant len == 34 ==> i + j == BASE_SZ is partially proven to be inductive.\nloop invariant len == 35 ==> i + j == BASE_SZ is partially proven to be inductive.\nloop invariant len == 36 ==> i + j == BASE_SZ is partially proven to be inductive.\nloop invariant len == 37 ==> i + j == BASE_SZ is partially proven to be inductive.\nloop invariant len == 38 ==> i + j == BASE_SZ is partially proven to be inductive.\nloop invariant len == 39 ==> i + j == BASE_SZ is partially proven to be inductive.\nloop invariant len == 40 ==> i + j == BASE_SZ is partially proven to be inductive.\nloop invariant len == 41 ==> i + j == BASE_SZ is partially proven to be inductive.\nloop invariant len == 42 ==> i + j == BASE_SZ is partially proven to be inductive.\nloop invariant len == 43 ==> i + j == BASE_SZ is partially proven to be inductive.\nloop invariant len == 44 ==> i + j == BASE_SZ is partially proven to be inductive.\nloop invariant len == 45 ==> i + j == BASE_SZ is partially proven to be inductive.\nloop invariant len == 46 ==> i + j == BASE_SZ is partially proven to be inductive.\nloop invariant len == 47 ==> i + j == BASE_SZ is partially proven to be inductive.\nloop invariant len == 48 ==> i + j == BASE_SZ is partially proven to be inductive.\nloop invariant len == 49 ==> i + j == BASE_SZ is partially proven to be inductive.\nloop invariant len == 50 ==> i + j == BASE_SZ is partially proven to be inductive.\nloop invariant len == 51 ==> i + j == BASE_SZ is partially proven to be inductive.\nloop invariant len == 52 ==> i + j == BASE_SZ is partially proven to be inductive.\nloop invariant len == 53 ==> i + j == BASE_SZ is partially proven to be inductive.\nloop invariant len == 54 ==> i + j == BASE_SZ is partially proven to be inductive.\nloop invariant len == 55 ==> i + j == BASE_SZ is partially proven to be inductive.\nloop invariant len == 56 ==> i + j == BASE_SZ is partially proven to be inductive.\nloop invariant len == 57 ==> i + j == BASE_SZ is partially proven to be inductive.\nloop invariant len == 58 ==> i + j == BASE_SZ is partially proven to be inductive.\nloop invariant len == 59 ==> i + j == BASE_SZ is partially proven to be inductive.\nloop invariant len == 60 ==> i + j == BASE_SZ is partially proven to be inductive.\nloop invariant len == 61 ==> i + j == BASE_SZ is partially proven to be inductive.\nloop invariant 0 <= i is partially proven to be inductive.\nloop invariant i < BASE_SZ is partially proven to be inductive.\nloop invariant 0 <= j is partially proven to be inductive.\nloop invariant j < BASE_SZ is partially proven to be inductive.\nloop invariant len >= BASE_SZ - i is partially proven to be inductive.\nloop invariant len >= BASE_SZ - j is partially proven to be inductive.\nloop invariant len >= BASE_SZ - (i + j) is partially proven to be inductive.\nloop invariant len >= BASE_SZ - (i + j + 1) is partially proven to be inductive.\nloop invariant len >= BASE_SZ - (i + j + 2) is partially proven to be inductive.\nloop invariant len >= BASE_SZ - (i + j + 3) is partially proven to be inductive.\nloop invariant len >= BASE_SZ - (i + j + 4) is partially proven to be inductive.\nloop invariant len >= BASE_SZ - (i + j + 5) is partially proven to be inductive.\nloop invariant len >= BASE_SZ - (i + j + 6) is partially proven to be inductive.\nloop invariant len >= BASE_SZ - (i + j + 7) is partially proven to be inductive.\nloop invariant len >= BASE_SZ - (i + j + 8) is partially proven to be inductive.\nloop invariant len >= BASE_SZ - (i + j + 9) is partially proven to be inductive.\nloop invariant len >= BASE_SZ - (i + j + 10) is partially proven to be inductive.\nloop invariant len >= BASE_SZ - (i + j + 11) is partially proven to be inductive.\nloop invariant len >= BASE_SZ - (i + j + 12) is partially proven to be inductive.\nloop invariant len >= BASE_SZ - (i + j + 13) is partially proven to be inductive.\nloop invariant len >= BASE_SZ - (i + j + 14) is partially proven to be inductive.\nloop invariant len >= BASE_SZ - (i + j + 15) is partially proven to be inductive.\nloop invariant len >= BASE_SZ - (i + j + 16) is partially proven to be inductive.\nloop invariant len >= BASE_SZ - (i + j + 17) is partially proven to be inductive.\nloop invariant len >= BASE_SZ - (i + j + 18) is partially proven to be inductive.\nloop invariant len >= BASE_SZ - (i + j + 19) is partially proven to be inductive.\nloop invariant len >= BASE_SZ - (i + j + 20) is partially proven to be inductive.\nloop invariant len >= BASE_SZ - (i + j + 21) is partially proven to be inductive.\nloop invariant len >= BASE_SZ - (i + j + 22) is partially proven to be inductive.\nloop invariant len >= BASE_SZ - (i + j + 23) is partially proven to be inductive.\nloop invariant len >= BASE_SZ - (i + j + 24) is partially proven to be inductive.\nloop invariant len >= BASE_SZ - (i + j + 25) is partially proven to be inductive.\nloop invariant len >= BASE_SZ - (i + j + 26) is partially proven to be inductive.\nloop invariant len >= BASE_SZ - (i + j + 27) is partially proven to be inductive.\nloop invariant len >= BASE_SZ - (i + j + 28) is partially proven to be inductive.\nloop invariant len >= BASE_SZ - (i + j + 29) is partially proven to be inductive.\nloop invariant len >= BASE_SZ - (i + j + 30) is partially proven to be inductive.\nloop invariant len >= BASE_SZ - (i + j + 31) is partially proven to be inductive.\nloop invariant len >= BASE_SZ - (i + j + 32) is partially proven to be inductive.\nloop invariant len >= BASE_SZ - (i + j + 33) is partially proven to be inductive.\nloop invariant len >= BASE_SZ - (i + j + 34) is partially proven to be inductive.\nloop invariant len >= BASE_SZ - (i + j + 35) is partially proven to be inductive.\nloop invariant len >= BASE_SZ - (i + j + 36) is partially proven to be inductive.\nloop invariant len >= BASE_SZ - (i + j + 37) is partially proven to be inductive.\nloop invariant len >= BASE_SZ - (i + j + 38) is partially proven to be inductive.\nloop invariant len >= BASE_SZ - (i + j + 39) is partially proven to be inductive.\nloop invariant len >= BASE_SZ - (i + j + 40) is partially proven to be inductive.\nloop invariant len >= BASE_SZ - (i + j + 41) is partially proven to be inductive.\nloop invariant len >= BASE_SZ - (i + j + 42) is partially proven to be inductive.\nloop invariant len >= BASE_SZ - (i + j + 43) is partially proven to be inductive.\nloop invariant len >= BASE_SZ - (i + j + 44) is partially proven to be inductive.\nloop invariant len >= BASE_SZ - (i + j + 45) is partially proven to be inductive.\nloop invariant len >= BASE_SZ - (i + j + 46) is partially proven to be inductive.\nloop invariant len >= BASE_SZ - (i + j + 47) is partially proven to be inductive.\nloop invariant len >= BASE_SZ - (i + j + 48) is partially proven to be inductive.\nloop invariant len >= BASE_SZ - (i + j + 49) is partially proven to be inductive.\nloop invariant len >= BASE_SZ - (i + j + 50) is partially proven to be inductive.\nloop invariant len >= BASE_SZ - (i + j + 51) is partially proven to be inductive.\nloop invariant len >= BASE_SZ - (i + j + 52) is partially proven to be inductive.\nloop invariant len >= BASE_SZ - (i + j + 53) is partially proven to be inductive.\nloop invariant len >= BASE_SZ - (i + j + 54) is partially proven to be inductive.\nloop invariant len >= BASE_SZ - (i + j + 55) is partially proven to be inductive.\nloop invariant len >= BASE_SZ - (i + j + 56) is partially proven to be inductive.\nloop invariant len >= BASE_SZ - (i + j + 57) is partially proven to be inductive.\nloop invariant len >= BASE_SZ - (i + j + 58) is partially proven to be inductive.\nloop invariant i == j;loop invariant i >= 0;loop invariant j >= 0;loop invariant len >= 0;loop invariant len <= BASE_SZ;loop invariant i < BASE_SZ;loop invariant j < BASE_SZ;loop invariant i <= BASE_SZ;loop invariant j <= BASE_SZ;loop invariant i <= j;loop invariant i >= 0;loop invariant j >= 0 is partially proven to be inductive.\nloop invariant 0 <= j && j <= BASE_SZ is partially proven to be inductive.\nloop invariant 0 <= i && i <= BASE_SZ is partially proven to be inductive.\nloop invariant __BLAST_NONDET == 0 || __BLAST_NONDET == 1 is partially proven to be inductive.\nloop invariant (i >= j && j >= 0 && i <= BASE_SZ) ==> (__BLAST_NONDET == 0 || __BLAST_NONDET == 1) is partially proven to be inductive.\nloop invariant (len >= 0 && __BLAST_NONDET == 0 || __BLAST_NONDET == 1) ==> (i + 1 >= j && j + 1 >= 0 && i + 1 <= BASE_SZ) is partially proven to be inductive.\nloop invariant (len >= 1 && __BLAST_NONDET == 0 || __BLAST_NONDET == 1) ==> (i + 1 >= j + 1 && j + 1 + 1 >= 0 && i + 1 <= BASE_SZ) is partially proven to be inductive.\nloop invariant len > 0 is partially proven to be inductive.\nloop invariant j == i is partially proven to be inductive.\nloop invariant len == 1 is partially proven to be inductive.\nloop invariant i == BASE_SZ - 2 is partially proven to be inductive.\nloop invariant j == BASE_SZ - 1 is partially proven to be inductive.\nloop invariant i == BASE_SZ - 1 is partially proven to be inductive.\nloop invariant len == -1 is partially proven to be inductive.\nloop invariant i == BASE_SZ is partially proven to be inductive.\nloop invariant j == BASE_SZ is partially proven to be inductive.\nloop invariant len == -2 is partially proven to be inductive.\nloop invariant i == BASE_SZ + 1 is partially proven to be inductive.\nloop invariant j == BASE_SZ + 1 is partially proven to be inductive.\nloop invariant len == -3 is partially proven to be inductive.\nloop invariant i == BASE_SZ + 2 is partially proven to be inductive.\nloop invariant j == BASE_SZ + 2 is partially proven to be inductive.\nloop invariant len == -4 is partially proven to be inductive.\nloop invariant i == BASE_SZ + 3 is partially proven to be inductive.\nloop invariant j == BASE_SZ + 3 is partially proven to be inductive.\nloop invariant len == -5 is partially proven to be inductive.\nloop invariant i == BASE_SZ + 4 is partially proven to be inductive.\nloop invariant j == BASE_SZ + 4 is partially proven to be inductive.\nloop invariant len == -6 is partially proven to be inductive.\nloop invariant i == BASE_SZ + 5 is partially proven to be inductive.\nloop invariant j == BASE_SZ + 5 is partially proven to be inductive.\nloop invariant len == -7 is partially proven to be inductive.\nloop invariant i == BASE_SZ + 6 is partially proven to be inductive.\nloop invariant j == BASE_SZ + 6 is partially proven to be inductive.\nloop invariant len == -8 is partially proven to be inductive.\nloop invariant i == BASE_SZ + 7 is partially proven to be inductive.\nloop invariant j == BASE_SZ + 7 is partially proven to be inductive.\nloop invariant len == -9 is partially proven to be inductive.\nloop invariant i == BASE_SZ + 8 is partially proven to be inductive.\nloop invariant j == BASE_SZ + 8 is partially proven to be inductive.\nloop invariant len == -10 is partially proven to be inductive.\nloop invariant i == BASE_SZ + 9 is partially proven to be inductive.\nloop invariant j == BASE_SZ + 9 is partially proven to be inductive.\nloop invariant len == -11 is partially proven to be inductive.\nloop invariant i == BASE_SZ + 10 is partially proven to be inductive.\nloop invariant j == BASE_SZ + 10 is partially proven to be inductive.\nloop invariant len == -12 is partially proven to be inductive.\nloop invariant i == BASE_SZ + 11 is partially proven to be inductive.\nloop invariant j == BASE_SZ + 11 is partially proven to be inductive.\nloop invariant len == -13 is partially proven to be inductive.\nloop invariant i == BASE_SZ + 12 is partially proven to be inductive.\nloop invariant j == BASE_SZ + 12 is partially proven to be inductive.\nloop invariant len == -14 is partially proven to be inductive.\nloop invariant i == BASE_SZ + 13 is partially proven to be inductive.\nloop invariant j == BASE_SZ + 13 is partially proven to be inductive.\nloop invariant len == -15 is partially proven to be inductive.\nloop invariant i == BASE_SZ + 14 is partially proven to be inductive.\nloop invariant j == BASE_SZ + 14 is partially proven to be inductive.\nloop invariant len == -16 is partially proven to be inductive.\nloop invariant i == BASE_SZ + 15 is partially proven to be inductive.\nloop invariant j == BASE_SZ + 15 is partially proven to be inductive.\nloop invariant len == -17 is partially proven to be inductive.\nloop invariant i == BASE_SZ + 16 is partially proven to be inductive.\nloop invariant j == BASE_SZ + 16 is partially proven to be inductive.\nloop invariant len == -18 is partially proven to be inductive.\nloop invariant i == BASE_SZ + 17 is partially proven to be inductive.\nloop invariant j == BASE_SZ + 17 is partially proven to be inductive.\nloop invariant len == -19 is partially proven to be inductive.\nloop invariant i == BASE_SZ + 18 is partially proven to be inductive.\nloop invariant j == BASE_SZ + 18 is partially proven to be inductive.\nloop invariant len == -20 is partially proven to be inductive.\nloop invariant i == BASE_SZ + 19 is partially proven to be inductive.\nloop invariant j == BASE_SZ + 19 is partially proven to be inductive.\nloop invariant len == -21 is partially proven to be inductive.\nloop invariant i == BASE_SZ + 20 is partially proven to be inductive.\nloop invariant j == BASE_SZ + 20 is partially proven to be inductive.\nloop invariant len == -22 is partially proven to be inductive.\nloop invariant i == BASE_SZ + 21 is partially proven to be inductive.\nloop invariant j == BASE_SZ + 21 is partially proven to be inductive.\nloop invariant len == -23 is partially proven to be inductive.\nloop invariant i == BASE_SZ + 22 is partially proven to be inductive.\nloop invariant j == BASE_SZ + 22 is partially proven to be inductive.\nloop invariant len == -24 is partially proven to be inductive.\nloop invariant i == BASE_SZ + 23 is partially proven to be inductive.\nloop invariant j == BASE_SZ + 23 is partially proven to be inductive.\nloop invariant len == -25 is partially proven to be inductive.\nloop invariant i == BASE_SZ + 24 is partially proven to be inductive.\nloop invariant j == BASE_SZ + 24 is partially proven to be inductive.\nloop invariant len == -26 is partially proven to be inductive.\nloop invariant i == BASE_SZ + 25 is partially proven to be inductive.\nloop invariant j == BASE_SZ + 25 is partially proven to be inductive.\nloop invariant len == -27 is partially proven to be inductive.\nloop invariant i == BASE_SZ + 26 is partially proven to be inductive.\nloop invariant j == BASE_SZ + 26 is partially proven to be inductive.\nloop invariant len == -28 is partially proven to be inductive.\nloop invariant i == BASE_SZ + 27 is partially proven to be inductive.\nloop invariant j == BASE_SZ + 27 is partially proven to be inductive.\nloop invariant len == -29 is partially proven to be inductive.\nloop invariant i == BASE_SZ + 28 is partially proven to be inductive.\nloop invariant j == BASE_SZ + 28 is partially proven to be inductive.\nloop invariant len == -30 is partially proven to be inductive.\nloop invariant i == BASE_SZ + 29 is partially proven to be inductive.\nloop invariant j == BASE_SZ + 29 is partially proven to be inductive.\nloop invariant len == -31 is partially proven to be inductive.\nloop invariant i == BASE_SZ + 30 is partially proven to be inductive.\nloop invariant j == BASE_SZ + 30 is partially proven to be inductive.\nloop invariant len == -32 is partially proven to be inductive.\nloop invariant 1 <= i <= BASE_SZ is partially proven to be inductive.\nloop invariant 1 <= j <= BASE_SZ is partially proven to be inductive.\nloop invariant BASE_SZ - len == i + j is partially proven to be inductive.\nloop invariant 1 <= i + j <= 2 * BASE_SZ is partially proven to be inductive.\nloop invariant 0 <= BASE_SZ - 1 is partially proven to be inductive.\nloop invariant 0 <= len is partially proven to be inductive.\nloop invariant 0 <= i is partially proven to be inductive.\nloop invariant i <= BASE_SZ is partially proven to be inductive.\nloop invariant 0 <= j is partially proven to be inductive.\nloop invariant j <= BASE_SZ is partially proven to be inductive.\nloop invariant i == j ==> len == 0 is partially proven to be inductive.\nloop invariant i != j ==> len != 0 is partially proven to be inductive.\nloop invariant i < j ==> len != 0 is partially proven to be inductive.\nloop invariant ( ( i >= 0 ) && ( i <= BASE_SZ ) ) is partially proven to be inductive.\nloop invariant ( ( j >= 0 ) && ( j <= BASE_SZ ) ) is partially proven to be inductive.\nloop invariant ( ( len >= 0 ) && ( len <= BASE_SZ ) ) is partially proven to be inductive.\nAssertion 0 <= BASE_SZ - 1: Valid\nAssertion 0 <= j: Partially proven\nAssertion j < BASE_SZ: Partially proven\nAssertion 0 <= i: Partially proven\nAssertion i < BASE_SZ: Partially proven",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main ()\n{\n  int BASE_SZ = unknown();\n  int __BLAST_NONDET = unknown();\n  \n  int i;\n  int j;\n  int len = BASE_SZ;\n\n  if(BASE_SZ > 0 ); else goto END;\n\n  {;\n//@ assert( 0 <= BASE_SZ-1 );\n}\n\n  if (len == 0)\n    goto END; \n  \n  i = 0;\n  j = 0;\n  /*@\nloop invariant i1: 0 <= i <= BASE_SZ;\nloop invariant i2: 0 <= j <= BASE_SZ;\nloop invariant i3: 0 <= len <= BASE_SZ;\nloop invariant i4: i == j;\nloop invariant i5: i + j == BASE_SZ;\nloop invariant i6: len == 0;\nloop invariant i7: 0 <= j <= i;\nloop invariant i8: 0 <= i <= len;\nloop invariant i9: j + i <= len;\nloop invariant i10: len >= 0;\nloop invariant i11: j >= 0;\nloop invariant i12: i >= 0;\nloop invariant i13: j <= BASE_SZ;\nloop invariant i14: i <= BASE_SZ;\nloop invariant i15: j <= len;\nloop invariant i16: i <= len;\nloop invariant i17: j <= i + len;\nloop invariant i18: i <= j + len;\nloop invariant i19: BASE_SZ > 0;\nloop invariant i20: 0 <= BASE_SZ;\nloop invariant i21: len <= BASE_SZ;\nloop invariant i22: i <= j;\nloop invariant i23: j <= i;\nloop invariant i24: len >= 1 ==> len <= BASE_SZ;\nloop invariant i25: len >= 0 ==> i + j >= len;\nloop invariant i26: len >= 1 ==> i + j >= len;\nloop invariant i27: len == 0 ==> i + j == BASE_SZ;\nloop invariant i28: len == 1 ==> i + j == BASE_SZ;\nloop invariant i29: len == 2 ==> i + j == BASE_SZ;\nloop invariant i30: len == 3 ==> i + j == BASE_SZ;\nloop invariant i31: len == 4 ==> i + j == BASE_SZ;\nloop invariant i32: len == 5 ==> i + j == BASE_SZ;\nloop invariant i33: len == 6 ==> i + j == BASE_SZ;\nloop invariant i34: len == 7 ==> i + j == BASE_SZ;\nloop invariant i35: len == 8 ==> i + j == BASE_SZ;\nloop invariant i36: len == 9 ==> i + j == BASE_SZ;\nloop invariant i37: len == 10 ==> i + j == BASE_SZ;\nloop invariant i38: len == 11 ==> i + j == BASE_SZ;\nloop invariant i39: len == 12 ==> i + j == BASE_SZ;\nloop invariant i40: len == 13 ==> i + j == BASE_SZ;\nloop invariant i41: len == 14 ==> i + j == BASE_SZ;\nloop invariant i42: len == 15 ==> i + j == BASE_SZ;\nloop invariant i43: len == 16 ==> i + j == BASE_SZ;\nloop invariant i44: len == 17 ==> i + j == BASE_SZ;\nloop invariant i45: len == 18 ==> i + j == BASE_SZ;\nloop invariant i46: len == 19 ==> i + j == BASE_SZ;\nloop invariant i47: len == 20 ==> i + j == BASE_SZ;\nloop invariant i48: len == 21 ==> i + j == BASE_SZ;\nloop invariant i49: len == 22 ==> i + j == BASE_SZ;\nloop invariant i50: len == 23 ==> i + j == BASE_SZ;\nloop invariant i51: len == 24 ==> i + j == BASE_SZ;\nloop invariant i52: len == 25 ==> i + j == BASE_SZ;\nloop invariant i53: len == 26 ==> i + j == BASE_SZ;\nloop invariant i54: len == 27 ==> i + j == BASE_SZ;\nloop invariant i55: len == 28 ==> i + j == BASE_SZ;\nloop invariant i56: len == 29 ==> i + j == BASE_SZ;\nloop invariant i57: len == 30 ==> i + j == BASE_SZ;\nloop invariant i58: len == 31 ==> i + j == BASE_SZ;\nloop invariant i59: len == 32 ==> i + j == BASE_SZ;\nloop invariant i60: len == 33 ==> i + j == BASE_SZ;\nloop invariant i61: len == 34 ==> i + j == BASE_SZ;\nloop invariant i62: len == 35 ==> i + j == BASE_SZ;\nloop invariant i63: len == 36 ==> i + j == BASE_SZ;\nloop invariant i64: len == 37 ==> i + j == BASE_SZ;\nloop invariant i65: len == 38 ==> i + j == BASE_SZ;\nloop invariant i66: len == 39 ==> i + j == BASE_SZ;\nloop invariant i67: len == 40 ==> i + j == BASE_SZ;\nloop invariant i68: len == 41 ==> i + j == BASE_SZ;\nloop invariant i69: len == 42 ==> i + j == BASE_SZ;\nloop invariant i70: len == 43 ==> i + j == BASE_SZ;\nloop invariant i71: len == 44 ==> i + j == BASE_SZ;\nloop invariant i72: len == 45 ==> i + j == BASE_SZ;\nloop invariant i73: len == 46 ==> i + j == BASE_SZ;\nloop invariant i74: len == 47 ==> i + j == BASE_SZ;\nloop invariant i75: len == 48 ==> i + j == BASE_SZ;\nloop invariant i76: len == 49 ==> i + j == BASE_SZ;\nloop invariant i77: len == 50 ==> i + j == BASE_SZ;\nloop invariant i78: len == 51 ==> i + j == BASE_SZ;\nloop invariant i79: len == 52 ==> i + j == BASE_SZ;\nloop invariant i80: len == 53 ==> i + j == BASE_SZ;\nloop invariant i81: len == 54 ==> i + j == BASE_SZ;\nloop invariant i82: len == 55 ==> i + j == BASE_SZ;\nloop invariant i83: len == 56 ==> i + j == BASE_SZ;\nloop invariant i84: len == 57 ==> i + j == BASE_SZ;\nloop invariant i85: len == 58 ==> i + j == BASE_SZ;\nloop invariant i86: len == 59 ==> i + j == BASE_SZ;\nloop invariant i87: len == 60 ==> i + j == BASE_SZ;\nloop invariant i88: len == 61 ==> i + j == BASE_SZ;\nloop invariant i89: 0 <= i;\nloop invariant i90: i < BASE_SZ;\nloop invariant i91: 0 <= j;\nloop invariant i92: j < BASE_SZ;\nloop invariant i93: len >= BASE_SZ - i;\nloop invariant i94: len >= BASE_SZ - j;\nloop invariant i95: len >= BASE_SZ - (i + j);\nloop invariant i96: len >= BASE_SZ - (i + j + 1);\nloop invariant i97: len >= BASE_SZ - (i + j + 2);\nloop invariant i98: len >= BASE_SZ - (i + j + 3);\nloop invariant i99: len >= BASE_SZ - (i + j + 4);\nloop invariant i100: len >= BASE_SZ - (i + j + 5);\nloop invariant i101: len >= BASE_SZ - (i + j + 6);\nloop invariant i102: len >= BASE_SZ - (i + j + 7);\nloop invariant i103: len >= BASE_SZ - (i + j + 8);\nloop invariant i104: len >= BASE_SZ - (i + j + 9);\nloop invariant i105: len >= BASE_SZ - (i + j + 10);\nloop invariant i106: len >= BASE_SZ - (i + j + 11);\nloop invariant i107: len >= BASE_SZ - (i + j + 12);\nloop invariant i108: len >= BASE_SZ - (i + j + 13);\nloop invariant i109: len >= BASE_SZ - (i + j + 14);\nloop invariant i110: len >= BASE_SZ - (i + j + 15);\nloop invariant i111: len >= BASE_SZ - (i + j + 16);\nloop invariant i112: len >= BASE_SZ - (i + j + 17);\nloop invariant i113: len >= BASE_SZ - (i + j + 18);\nloop invariant i114: len >= BASE_SZ - (i + j + 19);\nloop invariant i115: len >= BASE_SZ - (i + j + 20);\nloop invariant i116: len >= BASE_SZ - (i + j + 21);\nloop invariant i117: len >= BASE_SZ - (i + j + 22);\nloop invariant i118: len >= BASE_SZ - (i + j + 23);\nloop invariant i119: len >= BASE_SZ - (i + j + 24);\nloop invariant i120: len >= BASE_SZ - (i + j + 25);\nloop invariant i121: len >= BASE_SZ - (i + j + 26);\nloop invariant i122: len >= BASE_SZ - (i + j + 27);\nloop invariant i123: len >= BASE_SZ - (i + j + 28);\nloop invariant i124: len >= BASE_SZ - (i + j + 29);\nloop invariant i125: len >= BASE_SZ - (i + j + 30);\nloop invariant i126: len >= BASE_SZ - (i + j + 31);\nloop invariant i127: len >= BASE_SZ - (i + j + 32);\nloop invariant i128: len >= BASE_SZ - (i + j + 33);\nloop invariant i129: len >= BASE_SZ - (i + j + 34);\nloop invariant i130: len >= BASE_SZ - (i + j + 35);\nloop invariant i131: len >= BASE_SZ - (i + j + 36);\nloop invariant i132: len >= BASE_SZ - (i + j + 37);\nloop invariant i133: len >= BASE_SZ - (i + j + 38);\nloop invariant i134: len >= BASE_SZ - (i + j + 39);\nloop invariant i135: len >= BASE_SZ - (i + j + 40);\nloop invariant i136: len >= BASE_SZ - (i + j + 41);\nloop invariant i137: len >= BASE_SZ - (i + j + 42);\nloop invariant i138: len >= BASE_SZ - (i + j + 43);\nloop invariant i139: len >= BASE_SZ - (i + j + 44);\nloop invariant i140: len >= BASE_SZ - (i + j + 45);\nloop invariant i141: len >= BASE_SZ - (i + j + 46);\nloop invariant i142: len >= BASE_SZ - (i + j + 47);\nloop invariant i143: len >= BASE_SZ - (i + j + 48);\nloop invariant i144: len >= BASE_SZ - (i + j + 49);\nloop invariant i145: len >= BASE_SZ - (i + j + 50);\nloop invariant i146: len >= BASE_SZ - (i + j + 51);\nloop invariant i147: len >= BASE_SZ - (i + j + 52);\nloop invariant i148: len >= BASE_SZ - (i + j + 53);\nloop invariant i149: len >= BASE_SZ - (i + j + 54);\nloop invariant i150: len >= BASE_SZ - (i + j + 55);\nloop invariant i151: len >= BASE_SZ - (i + j + 56);\nloop invariant i152: len >= BASE_SZ - (i + j + 57);\nloop invariant i153: len >= BASE_SZ - (i + j + 58);\nloop invariant i154: i == j;loop invariant i >= 0;loop invariant j >= 0;loop invariant len >= 0;loop invariant len <= BASE_SZ;loop invariant i < BASE_SZ;loop invariant j < BASE_SZ;loop invariant i <= BASE_SZ;loop invariant j <= BASE_SZ;loop invariant i <= j;loop invariant i >= 0;loop invariant j >= 0;\nloop invariant i155: 0 <= j && j <= BASE_SZ;\nloop invariant i156: 0 <= i && i <= BASE_SZ;\nloop invariant i157: __BLAST_NONDET == 0 || __BLAST_NONDET == 1;\nloop invariant i158: (i >= j && j >= 0 && i <= BASE_SZ) ==> (__BLAST_NONDET == 0 || __BLAST_NONDET == 1);\nloop invariant i159: (len >= 0 && __BLAST_NONDET == 0 || __BLAST_NONDET == 1) ==> (i + 1 >= j && j + 1 >= 0 && i + 1 <= BASE_SZ);\nloop invariant i160: (len >= 1 && __BLAST_NONDET == 0 || __BLAST_NONDET == 1) ==> (i + 1 >= j + 1 && j + 1 + 1 >= 0 && i + 1 <= BASE_SZ);\nloop invariant i161: len > 0;\nloop invariant i162: j == i;\nloop invariant i163: len == 1;\nloop invariant i164: i == BASE_SZ - 2;\nloop invariant i165: j == BASE_SZ - 1;\nloop invariant i166: i == BASE_SZ - 1;\nloop invariant i167: len == -1;\nloop invariant i168: i == BASE_SZ;\nloop invariant i169: j == BASE_SZ;\nloop invariant i170: len == -2;\nloop invariant i171: i == BASE_SZ + 1;\nloop invariant i172: j == BASE_SZ + 1;\nloop invariant i173: len == -3;\nloop invariant i174: i == BASE_SZ + 2;\nloop invariant i175: j == BASE_SZ + 2;\nloop invariant i176: len == -4;\nloop invariant i177: i == BASE_SZ + 3;\nloop invariant i178: j == BASE_SZ + 3;\nloop invariant i179: len == -5;\nloop invariant i180: i == BASE_SZ + 4;\nloop invariant i181: j == BASE_SZ + 4;\nloop invariant i182: len == -6;\nloop invariant i183: i == BASE_SZ + 5;\nloop invariant i184: j == BASE_SZ + 5;\nloop invariant i185: len == -7;\nloop invariant i186: i == BASE_SZ + 6;\nloop invariant i187: j == BASE_SZ + 6;\nloop invariant i188: len == -8;\nloop invariant i189: i == BASE_SZ + 7;\nloop invariant i190: j == BASE_SZ + 7;\nloop invariant i191: len == -9;\nloop invariant i192: i == BASE_SZ + 8;\nloop invariant i193: j == BASE_SZ + 8;\nloop invariant i194: len == -10;\nloop invariant i195: i == BASE_SZ + 9;\nloop invariant i196: j == BASE_SZ + 9;\nloop invariant i197: len == -11;\nloop invariant i198: i == BASE_SZ + 10;\nloop invariant i199: j == BASE_SZ + 10;\nloop invariant i200: len == -12;\nloop invariant i201: i == BASE_SZ + 11;\nloop invariant i202: j == BASE_SZ + 11;\nloop invariant i203: len == -13;\nloop invariant i204: i == BASE_SZ + 12;\nloop invariant i205: j == BASE_SZ + 12;\nloop invariant i206: len == -14;\nloop invariant i207: i == BASE_SZ + 13;\nloop invariant i208: j == BASE_SZ + 13;\nloop invariant i209: len == -15;\nloop invariant i210: i == BASE_SZ + 14;\nloop invariant i211: j == BASE_SZ + 14;\nloop invariant i212: len == -16;\nloop invariant i213: i == BASE_SZ + 15;\nloop invariant i214: j == BASE_SZ + 15;\nloop invariant i215: len == -17;\nloop invariant i216: i == BASE_SZ + 16;\nloop invariant i217: j == BASE_SZ + 16;\nloop invariant i218: len == -18;\nloop invariant i219: i == BASE_SZ + 17;\nloop invariant i220: j == BASE_SZ + 17;\nloop invariant i221: len == -19;\nloop invariant i222: i == BASE_SZ + 18;\nloop invariant i223: j == BASE_SZ + 18;\nloop invariant i224: len == -20;\nloop invariant i225: i == BASE_SZ + 19;\nloop invariant i226: j == BASE_SZ + 19;\nloop invariant i227: len == -21;\nloop invariant i228: i == BASE_SZ + 20;\nloop invariant i229: j == BASE_SZ + 20;\nloop invariant i230: len == -22;\nloop invariant i231: i == BASE_SZ + 21;\nloop invariant i232: j == BASE_SZ + 21;\nloop invariant i233: len == -23;\nloop invariant i234: i == BASE_SZ + 22;\nloop invariant i235: j == BASE_SZ + 22;\nloop invariant i236: len == -24;\nloop invariant i237: i == BASE_SZ + 23;\nloop invariant i238: j == BASE_SZ + 23;\nloop invariant i239: len == -25;\nloop invariant i240: i == BASE_SZ + 24;\nloop invariant i241: j == BASE_SZ + 24;\nloop invariant i242: len == -26;\nloop invariant i243: i == BASE_SZ + 25;\nloop invariant i244: j == BASE_SZ + 25;\nloop invariant i245: len == -27;\nloop invariant i246: i == BASE_SZ + 26;\nloop invariant i247: j == BASE_SZ + 26;\nloop invariant i248: len == -28;\nloop invariant i249: i == BASE_SZ + 27;\nloop invariant i250: j == BASE_SZ + 27;\nloop invariant i251: len == -29;\nloop invariant i252: i == BASE_SZ + 28;\nloop invariant i253: j == BASE_SZ + 28;\nloop invariant i254: len == -30;\nloop invariant i255: i == BASE_SZ + 29;\nloop invariant i256: j == BASE_SZ + 29;\nloop invariant i257: len == -31;\nloop invariant i258: i == BASE_SZ + 30;\nloop invariant i259: j == BASE_SZ + 30;\nloop invariant i260: len == -32;\nloop invariant i261: 1 <= i <= BASE_SZ;\nloop invariant i262: 1 <= j <= BASE_SZ;\nloop invariant i263: BASE_SZ - len == i + j;\nloop invariant i264: 1 <= i + j <= 2 * BASE_SZ;\nloop invariant i265: 0 <= BASE_SZ - 1 ;\nloop invariant i266: 0 <= len ;\nloop invariant i267: 0 <= i ;\nloop invariant i268: i <= BASE_SZ ;\nloop invariant i269: 0 <= j ;\nloop invariant i270: j <= BASE_SZ ;\nloop invariant i271: i == j ==> len == 0 ;\nloop invariant i272: i != j ==> len != 0 ;\nloop invariant i273: i < j ==> len != 0 ;\nloop invariant i274: ( ( i >= 0 ) && ( i <= BASE_SZ ) );\nloop invariant i275: ( ( j >= 0 ) && ( j <= BASE_SZ ) );\nloop invariant i276: ( ( len >= 0 ) && ( len <= BASE_SZ ) );\n*/\nwhile (1) {\n    if ( len == 0 ){ \n      goto END;\n    } else {\n      {;\n//@ assert( 0<= j );\n}\n {;\n//@ assert(j < BASE_SZ);\n}\n\n      {;\n//@ assert( 0<= i );\n}\n {;\n//@ assert(i < BASE_SZ );\n}\n\n      if ( __BLAST_NONDET ) {\n        i++;\n        j++;\n        goto END;\n      }\n    }\n    i ++;\n    j ++;\n    len --;\n  }\n\n END:  return 0;\n}",
        "combined_annotation_num_solver_calls": 105,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main ()\n{\n  int BASE_SZ = unknown();\n  int __BLAST_NONDET = unknown();\n  \n  int i;\n  int j;\n  int len = BASE_SZ;\n\n  if(BASE_SZ > 0 ); else goto END;\n\n  {;\n//@ assert( 0 <= BASE_SZ-1 );\n}\n\n  if (len == 0)\n    goto END; \n  \n  i = 0;\n  j = 0;\n  /*@\nloop invariant i1: 0 <= i <= BASE_SZ;\nloop invariant i2: 0 <= j <= BASE_SZ;\nloop invariant i3: 0 <= len <= BASE_SZ;\nloop invariant i4: i == j;\n\n\nloop invariant i7: 0 <= j <= i;\nloop invariant i8: 0 <= i <= len;\nloop invariant i9: j + i <= len;\nloop invariant i10: len >= 0;\nloop invariant i11: j >= 0;\nloop invariant i12: i >= 0;\nloop invariant i13: j <= BASE_SZ;\nloop invariant i14: i <= BASE_SZ;\nloop invariant i15: j <= len;\nloop invariant i16: i <= len;\nloop invariant i17: j <= i + len;\nloop invariant i18: i <= j + len;\nloop invariant i19: BASE_SZ > 0;\nloop invariant i20: 0 <= BASE_SZ;\nloop invariant i21: len <= BASE_SZ;\nloop invariant i22: i <= j;\nloop invariant i23: j <= i;\nloop invariant i24: len >= 1 ==> len <= BASE_SZ;\n\n\nloop invariant i27: len == 0 ==> i + j == BASE_SZ;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i89: 0 <= i;\nloop invariant i90: i < BASE_SZ;\nloop invariant i91: 0 <= j;\nloop invariant i92: j < BASE_SZ;\nloop invariant i93: len >= BASE_SZ - i;\nloop invariant i94: len >= BASE_SZ - j;\nloop invariant i95: len >= BASE_SZ - (i + j);\nloop invariant i96: len >= BASE_SZ - (i + j + 1);\nloop invariant i97: len >= BASE_SZ - (i + j + 2);\nloop invariant i98: len >= BASE_SZ - (i + j + 3);\nloop invariant i99: len >= BASE_SZ - (i + j + 4);\nloop invariant i100: len >= BASE_SZ - (i + j + 5);\nloop invariant i101: len >= BASE_SZ - (i + j + 6);\nloop invariant i102: len >= BASE_SZ - (i + j + 7);\nloop invariant i103: len >= BASE_SZ - (i + j + 8);\nloop invariant i104: len >= BASE_SZ - (i + j + 9);\nloop invariant i105: len >= BASE_SZ - (i + j + 10);\nloop invariant i106: len >= BASE_SZ - (i + j + 11);\nloop invariant i107: len >= BASE_SZ - (i + j + 12);\nloop invariant i108: len >= BASE_SZ - (i + j + 13);\nloop invariant i109: len >= BASE_SZ - (i + j + 14);\nloop invariant i110: len >= BASE_SZ - (i + j + 15);\nloop invariant i111: len >= BASE_SZ - (i + j + 16);\nloop invariant i112: len >= BASE_SZ - (i + j + 17);\nloop invariant i113: len >= BASE_SZ - (i + j + 18);\nloop invariant i114: len >= BASE_SZ - (i + j + 19);\nloop invariant i115: len >= BASE_SZ - (i + j + 20);\nloop invariant i116: len >= BASE_SZ - (i + j + 21);\nloop invariant i117: len >= BASE_SZ - (i + j + 22);\nloop invariant i118: len >= BASE_SZ - (i + j + 23);\nloop invariant i119: len >= BASE_SZ - (i + j + 24);\nloop invariant i120: len >= BASE_SZ - (i + j + 25);\nloop invariant i121: len >= BASE_SZ - (i + j + 26);\nloop invariant i122: len >= BASE_SZ - (i + j + 27);\nloop invariant i123: len >= BASE_SZ - (i + j + 28);\nloop invariant i124: len >= BASE_SZ - (i + j + 29);\nloop invariant i125: len >= BASE_SZ - (i + j + 30);\nloop invariant i126: len >= BASE_SZ - (i + j + 31);\nloop invariant i127: len >= BASE_SZ - (i + j + 32);\nloop invariant i128: len >= BASE_SZ - (i + j + 33);\nloop invariant i129: len >= BASE_SZ - (i + j + 34);\nloop invariant i130: len >= BASE_SZ - (i + j + 35);\nloop invariant i131: len >= BASE_SZ - (i + j + 36);\nloop invariant i132: len >= BASE_SZ - (i + j + 37);\nloop invariant i133: len >= BASE_SZ - (i + j + 38);\nloop invariant i134: len >= BASE_SZ - (i + j + 39);\nloop invariant i135: len >= BASE_SZ - (i + j + 40);\nloop invariant i136: len >= BASE_SZ - (i + j + 41);\nloop invariant i137: len >= BASE_SZ - (i + j + 42);\nloop invariant i138: len >= BASE_SZ - (i + j + 43);\nloop invariant i139: len >= BASE_SZ - (i + j + 44);\nloop invariant i140: len >= BASE_SZ - (i + j + 45);\nloop invariant i141: len >= BASE_SZ - (i + j + 46);\nloop invariant i142: len >= BASE_SZ - (i + j + 47);\nloop invariant i143: len >= BASE_SZ - (i + j + 48);\nloop invariant i144: len >= BASE_SZ - (i + j + 49);\nloop invariant i145: len >= BASE_SZ - (i + j + 50);\nloop invariant i146: len >= BASE_SZ - (i + j + 51);\nloop invariant i147: len >= BASE_SZ - (i + j + 52);\nloop invariant i148: len >= BASE_SZ - (i + j + 53);\nloop invariant i149: len >= BASE_SZ - (i + j + 54);\nloop invariant i150: len >= BASE_SZ - (i + j + 55);\nloop invariant i151: len >= BASE_SZ - (i + j + 56);\nloop invariant i152: len >= BASE_SZ - (i + j + 57);\nloop invariant i153: len >= BASE_SZ - (i + j + 58);\nloop invariant i154: i == j;loop invariant i >= 0;loop invariant j >= 0;loop invariant len >= 0;loop invariant len <= BASE_SZ;loop invariant i < BASE_SZ;loop invariant j < BASE_SZ;loop invariant i <= BASE_SZ;loop invariant j <= BASE_SZ;loop invariant i <= j;loop invariant i >= 0;loop invariant j >= 0;\nloop invariant i155: 0 <= j && j <= BASE_SZ;\nloop invariant i156: 0 <= i && i <= BASE_SZ;\n\n\nloop invariant i159: (len >= 0 && __BLAST_NONDET == 0 || __BLAST_NONDET == 1) ==> (i + 1 >= j && j + 1 >= 0 && i + 1 <= BASE_SZ);\nloop invariant i160: (len >= 1 && __BLAST_NONDET == 0 || __BLAST_NONDET == 1) ==> (i + 1 >= j + 1 && j + 1 + 1 >= 0 && i + 1 <= BASE_SZ);\nloop invariant i161: len > 0;\nloop invariant i162: j == i;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i263: BASE_SZ - len == i + j;\n\nloop invariant i265: 0 <= BASE_SZ - 1 ;\nloop invariant i266: 0 <= len ;\nloop invariant i267: 0 <= i ;\nloop invariant i268: i <= BASE_SZ ;\nloop invariant i269: 0 <= j ;\nloop invariant i270: j <= BASE_SZ ;\nloop invariant i271: i == j ==> len == 0 ;\nloop invariant i272: i != j ==> len != 0 ;\nloop invariant i273: i < j ==> len != 0 ;\nloop invariant i274: ( ( i >= 0 ) && ( i <= BASE_SZ ) );\nloop invariant i275: ( ( j >= 0 ) && ( j <= BASE_SZ ) );\nloop invariant i276: ( ( len >= 0 ) && ( len <= BASE_SZ ) );\n*/\nwhile (1) {\n    if ( len == 0 ){ \n      goto END;\n    } else {\n      {;\n//@ assert( 0<= j );\n}\n {;\n//@ assert(j < BASE_SZ);\n}\n\n      {;\n//@ assert( 0<= i );\n}\n {;\n//@ assert(i < BASE_SZ );\n}\n\n      if ( __BLAST_NONDET ) {\n        i++;\n        j++;\n        goto END;\n      }\n    }\n    i ++;\n    j ++;\n    len --;\n  }\n\n END:  return 0;\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c"
        ],
        "skipped": [],
        "total": 24,
        "success_count": 23,
        "failure_count": 1,
        "success_rate": 0.9583333333333334
    }
}