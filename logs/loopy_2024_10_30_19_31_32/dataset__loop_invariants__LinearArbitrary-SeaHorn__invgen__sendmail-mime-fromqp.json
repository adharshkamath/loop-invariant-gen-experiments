{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main (void)\n{\n  int outfilelen = unknown();\n  \n  int nchar = 0;\n\n  int out = 0; \n\n  if(outfilelen > 0); else goto RETURN;\n\n  while(unknown())\n  {\n    \n    if(unknown())\n    {\n      \n      if(unknown())\n\t\n\tgoto AFTERLOOP; \n\n      if(unknown())\n      {\n\tout = 0;\n\tnchar = 0;\n\tgoto LOOPEND;\n      }\n      else\n      {\n\t\n\tif(unknown())  goto AFTERLOOP;\n\n\tnchar++;\n\tif (nchar >= outfilelen)\n\t  goto AFTERLOOP;\n\n\t{;\n//@ assert(0<=out);\n}\n\n\t{;\n//@ assert(out<outfilelen);\n}\n\n\tout++;\n      }\n    }\n    else\n    {\n      \n      nchar++;\n      if (nchar >= outfilelen)\n\tgoto AFTERLOOP;\n\n      {;\n//@ assert(0<=out);\n}\n\n      {;\n//@ assert(out<outfilelen);\n}\n\n      out++;\n\n      if(unknown()) goto AFTERLOOP;\n    }\n  LOOPEND:;\n  }\n AFTERLOOP:\n\n  {;\n//@ assert(0<=out);\n}\n\n  {;\n//@ assert(out<outfilelen);\n}\n\n  out++;\n RETURN:  return 0;\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= out <= outfilelen;\nloop invariant nchar >= 0;\nloop invariant nchar <= outfilelen;\nloop invariant out >= 0;\nloop invariant out <= outfilelen;\nloop invariant nchar < outfilelen;\nloop invariant out < outfilelen;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= nchar;\nloop invariant 0 <= out;\nloop invariant out <= outfilelen;\nloop invariant 0 <= outfilelen;\nloop invariant outfilelen >= 0;\nloop invariant outfilelen > 0;\nloop invariant outfilelen < 1;\nloop invariant outfilelen <= 0;\nloop invariant outfilelen > 1;\nloop invariant outfilelen < 2;\nloop invariant outfilelen <= 1;\nloop invariant outfilelen > 2;\nloop invariant outfilelen < 3;\nloop invariant outfilelen <= 2;\nloop invariant outfilelen > 3;\nloop invariant outfilelen < 4;\nloop invariant outfilelen <= 3;\nloop invariant outfilelen > 4;\nloop invariant outfilelen < 5;\nloop invariant outfilelen <= 4;\nloop invariant outfilelen > 5;\nloop invariant outfilelen < 6;\nloop invariant outfilelen <= 5;\nloop invariant outfilelen > 6;\nloop invariant outfilelen < 7;\nloop invariant outfilelen <= 6;\nloop invariant outfilelen > 7;\nloop invariant outfilelen < 8;\nloop invariant outfilelen <= 7;\nloop invariant outfilelen > 8;\nloop invariant outfilelen < 9;\nloop invariant outfilelen <= 8;\nloop invariant outfilelen > 9;\nloop invariant outfilelen < 10;\nloop invariant outfilelen <= 9;\nloop invariant outfilelen > 10;\nloop invariant outfilelen < 11;\nloop invariant outfilelen <= 10;\nloop invariant outfilelen > 11;\nloop invariant outfilelen < 12;\nloop invariant outfilelen <= 11;\nloop invariant outfilelen > 12;\nloop invariant outfilelen < 13;\nloop invariant outfilelen <= 12;\nloop invariant outfilelen > 13;\nloop invariant outfilelen < 14;\nloop invariant outfilelen <= 13;\nloop invariant outfilelen > 14;\nloop invariant outfilelen < 15;\nloop invariant outfilelen <= 14;\nloop invariant outfilelen > 15;\nloop invariant outfilelen < 16;\nloop invariant outfilelen <= 15;\nloop invariant outfilelen > 16;\nloop invariant outfilelen < 17;\nloop invariant outfilelen <= 16;\nloop invariant outfilelen > 17;\nloop invariant outfilelen < 18;\nloop invariant outfilelen <= 17;\nloop invariant outfilelen > 18;\nloop invariant outfilelen < 19;\nloop invariant outfilelen <= 18;\nloop invariant outfilelen > 19;\nloop invariant outfilelen < 20;\nloop invariant outfilelen <= 19;\nloop invariant outfilelen > 20;\nloop invariant outfilelen < 21;\nloop invariant outfilelen <= 20;\nloop invariant outfilelen > 21;\nloop invariant outfilelen < 22;\nloop invariant outfilelen <= 21;\nloop invariant outfilelen > 22;\nloop invariant outfilelen < 23;\nloop invariant outfilelen <= 22;\nloop invariant outfilelen > 23;\nloop invariant outfilelen < 24;\nloop invariant outfilelen <= 23;\nloop invariant outfilelen > 24;\nloop invariant outfilelen < 25;\nloop invariant outfilelen <= 24;\nloop invariant outfilelen > 25;\nloop invariant outfilelen < 26;\nloop invariant outfilelen <= 25;\nloop invariant outfilelen > 26;\nloop invariant outfilelen < 27;\nloop invariant outfilelen <= 26;\nloop invariant outfilelen > 27;\nloop invariant outfilelen < 28;\nloop invariant outfilelen <= 27;\nloop invariant outfilelen > 28;\nloop invariant outfilelen < 29;\nloop invariant outfilelen <= 28;\nloop invariant outfilelen > 29;\nloop invariant outfilelen < 30;\nloop invariant outfilelen <= 29;\nloop invariant outfilelen > 30;\nloop invariant outfilelen < 31;\nloop invariant outfilelen <= 30;\nloop invariant outfilelen > 31;\nloop invariant outfilelen < 32;\nloop invariant outfilelen <= 31;\nloop invariant outfilelen > 32;\nloop invariant outfilelen < 33;\nloop invariant outfilelen <= 32;\nloop invariant outfilelen > 33;\nloop invariant outfilelen < 34;\nloop invariant outfilelen <= 33;\nloop invariant outfilelen > 34;\nloop invariant outfilelen < 35;\nloop invariant outfilelen <= 34;\nloop invariant outfilelen > 35;\nloop invariant outfilelen < 36;\nloop invariant outfilelen <= 35;\nloop invariant outfilelen > 36;\nloop invariant outfilelen < 37;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= out <= outfilelen;\nloop invariant 0 <= nchar <= outfilelen;\nloop invariant 0 <= out + nchar <= outfilelen * 2;\nloop invariant 0 <= out <= outfilelen - 1;\nloop invariant 0 <= nchar <= outfilelen - 1;\nloop invariant 0 <= out + nchar <= outfilelen - 1;\nloop invariant 0 <= out <= outfilelen - 1;\nloop invariant 0 <= nchar <= outfilelen - 1;\nloop invariant 0 <= out + nchar <= outfilelen - 2;\nloop invariant 0 <= out <= outfilelen - 1;\nloop invariant 0 <= nchar <= outfilelen - 1;\nloop invariant 0 <= out + nchar <= outfilelen - 2;\nloop invariant 0 <= out <= outfilelen - 1;\nloop invariant 0 <= nchar <= outfilelen - 1;\nloop invariant 0 <= out <= outfilelen - 1;\nloop invariant 0 <= nchar <= outfilelen - 1;\nloop invariant 0 <= out <= outfilelen - 1;\nloop invariant 0 <= nchar <= outfilelen - 1;\nloop invariant 0 <= out <= outfilelen - 1;\nloop invariant 0 <= nchar <= outfilelen - 1;\nloop invariant 0 <= out <= outfilelen - 1;\nloop invariant 0 <= nchar <= outfilelen - 1;\nloop invariant 0 <= out <= outfilelen - 1;\nloop invariant 0 <= nchar <= outfilelen - 1;\nloop invariant 0 <= out <= outfilelen - 1;\nloop invariant 0 <= nchar <= outfilelen - 1;\nloop invariant 0 <= out <= outfilelen - 1;\nloop invariant 0 <= nchar <= outfilelen - 1;\nloop invariant 0 <= out <= outfilelen - 1;\nloop invariant 0 <= nchar <= outfilelen - 1;\nloop invariant 0 <= out <= outfilelen - 1;\nloop invariant 0 <= nchar <= outfilelen - 1;\nloop invariant 0 <= out <= outfilelen - 1;\nloop invariant 0 <= nchar <= outfilelen - 1;\nloop invariant 0 <= out <= outfilelen - 1;\nloop invariant 0 <= nchar <= outfilelen - 1;\nloop invariant 0 <= out <= outfilelen - 1;\nloop invariant 0 <= nchar <= outfilelen - 1;\nloop invariant 0 <= out <= outfilelen - 1;\nloop invariant 0 <= nchar <= outfilelen - 1;\nloop invariant 0 <= out <= outfilelen - 1;\nloop invariant 0 <= nchar <= outfilelen - 1;\nloop invariant 0 <= out <= outfilelen - 1;\nloop invariant 0 <= nchar <= outfilelen - 1;\nloop invariant 0 <= out <= outfilelen - 1;\nloop invariant 0 <= nchar <= outfilelen - 1;\nloop invariant 0 <= out <= outfilelen - 1;\nloop invariant 0 <= nchar <= outfilelen - 1;\nloop invariant 0 <= out <= outfilelen - 1;\nloop invariant 0 <= nchar <= outfilelen - 1;\nloop invariant 0 <= out <= outfilelen - 1;\nloop invariant 0 <= nchar <= outfilelen - 1;\nloop invariant 0 <= out <= outfilelen - 1;\nloop invariant 0 <= nchar <= outfilelen - 1;\nloop invariant 0 <= out <= outfilelen - 1;\nloop invariant 0 <= nchar <= outfilelen - 1;\nloop invariant 0 <= out <= outfilelen - 1;\nloop invariant 0 <= nchar <= outfilelen - 1;\nloop invariant 0 <= out <= outfilelen - 1;\nloop invariant 0 <= nchar <= outfilelen - 1;\nloop invariant 0 <= out <= outfilelen - 1;\nloop invariant 0 <= nchar <= outfilelen - 1;\nloop invariant 0 <= out <= outfilelen - 1;\nloop invariant 0 <= nchar <= outfilelen - 1;\nloop invariant 0 <= out <= outfilelen - 1;\nloop invariant 0 <= nchar <= outfilelen - 1;\nloop invariant 0 <= out <= outfilelen - 1;\nloop invariant 0 <= nchar <= outfilelen - 1;\nloop invariant 0 <= out <= outfilelen - 1;\nloop invariant 0 <= nchar <= outfilelen - 1;\nloop invariant 0 <= out <= outfilelen - 1;\nloop invariant 0 <= nchar <= outfilelen - 1;\nloop invariant 0 <= out <= outfilelen - 1;\n*/\n```",
            "```\n/*@\nloop invariant x >= 0;\nloop invariant nchar >= 0;\nloop invariant out >= 0;\nloop invariant nchar <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant nchar >= 0;\nloop invariant nchar < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant nchar >= 0;\nloop invariant nchar < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant nchar >= 0;\nloop invariant nchar < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant nchar >= 0;\nloop invariant nchar < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant nchar >= 0;\nloop invariant nchar < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant nchar >= 0;\nloop invariant nchar < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\n*/\n```",
            "```\n/*@\nloop invariant i1; loop invariant i2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= out <= outfilelen;\nloop invariant 0 <= nchar <= outfilelen;\nloop invariant 1 <= outfilelen <= 2147483647;\nloop invariant 1 <= nchar <= 2147483647;\nloop invariant 1 <= out <= 2147483647;\nloop invariant 0 <= outfilelen <= 2147483647;\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= out < outfilelen;\nloop invariant 0 <= nchar <= outfilelen;\nloop invariant if (out == 0) then out < outfilelen;\nloop invariant if (out == outfilelen) then out == outfilelen;\nloop invariant if (nchar == 0) then nchar < outfilelen;\nloop invariant if (nchar == outfilelen) then nchar == outfilelen;\nloop invariant if (out == outfilelen) then nchar == outfilelen;\nloop invariant if (nchar == outfilelen) then out < outfilelen;\nloop invariant if (out == outfilelen) then nchar < outfilelen;\nloop invariant if (out == outfilelen) then nchar < outfilelen;\nloop invariant if (out == outfilelen) then nchar == outfilelen;\nloop invariant if (out == outfilelen) then nchar < outfilelen;\nloop invariant if (out == outfilelen) then nchar == outfilelen;\nloop invariant if (out == outfilelen) then nchar < outfilelen;\nloop invariant if (out == outfilelen) then nchar == outfilelen;\nloop invariant if (out == outfilelen) then nchar < outfilelen;\nloop invariant if (out == outfilelen) then nchar == outfilelen;\nloop invariant if (out == outfilelen) then nchar < outfilelen;\nloop invariant if (out == outfilelen) then nchar == outfilelen;\nloop invariant if (out == outfilelen) then nchar < outfilelen;\nloop invariant if (out == outfilelen) then nchar == outfilelen;\nloop invariant if (out == outfilelen) then nchar < outfilelen;\nloop invariant if (out == outfilelen) then nchar == outfilelen;\nloop invariant if (out == outfilelen) then nchar < outfilelen;\nloop invariant if (out == outfilelen) then nchar == outfilelen;\nloop invariant if (out == outfilelen) then nchar < outfilelen;\nloop invariant if (out == outfilelen) then nchar == outfilelen;\nloop invariant if (out == outfilelen) then nchar < outfilelen;\nloop invariant if (out == outfilelen) then nchar == outfilelen;\nloop invariant if (out == outfilelen) then nchar < outfilelen;\nloop invariant if (out == outfilelen) then nchar == outfilelen;\nloop invariant if (out == outfilelen) then nchar < outfilelen;\nloop invariant if (out == outfilelen) then nchar == outfilelen;\nloop invariant if (out == outfilelen) then nchar < outfilelen;\nloop invariant if (out == outfilelen) then nchar == outfilelen;\nloop invariant if (out == outfilelen) then nchar < outfilelen;\nloop invariant if (out == outfilelen) then nchar == outfilelen;\nloop invariant if (out == outfilelen) then nchar < outfilelen;\nloop invariant if (out == outfilelen) then nchar == outfilelen;\nloop invariant if (out == outfilelen) then nchar < outfilelen;\nloop invariant if (out == outfilelen) then nchar == outfilelen;\nloop invariant if (out == outfilelen) then nchar < outfilelen;\nloop invariant if (out == outfilelen) then nchar == outfilelen;\nloop invariant if (out == outfilelen) then nchar < outfilelen;\nloop invariant if (out == outfilelen) then nchar == outfilelen;\nloop invariant if (out == outfilelen) then nchar < outfilelen;\nloop invariant if (out == outfilelen) then nchar == outfilelen;\nloop invariant if (out == outfilelen) then nchar < outfilelen;\nloop invariant if (out == outfilelen) then nchar == outfilelen;\nloop invariant if (out == outfilelen) then nchar < outfilelen;\nloop invariant if (out == outfilelen) then nchar == outfilelen;\nloop invariant if (out == outfilelen) then nchar < outfilelen;\nloop invariant if (out == outfilelen) then nchar == outfilelen;\nloop invariant if (out == outfilelen) then nchar < outfilelen;\nloop invariant if (out == outfilelen) then nchar == outfilelen;\nloop invariant if (out == outfilelen) then nchar < outfilelen;\nloop invariant if (out == outfilelen) then nchar == outfilelen;\nloop invariant if (out == outfilelen) then nchar < outfilelen;\nloop invariant if (out == outfilelen) then nchar == outfilelen;\nloop invariant if (out == outfilelen) then nchar < outfilelen;\nloop invariant if (out == outfilelen) then nchar == outfilelen;\nloop invariant if (out == outfilelen) then nchar < outfilelen;\nloop invariant if (out == outfilelen) then nchar == outfilelen;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= out <= outfilelen;\nloop invariant 0 <= nchar <= outfilelen;\nloop invariant nchar <= out;\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= out <= outfilelen - 1;\nloop invariant nchar >= 0;\nloop invariant nchar < outfilelen;\nloop invariant out <= nchar;\nloop invariant out > nchar - outfilelen;\nloop invariant out >= 0;\nloop invariant nchar >= 0;\nloop invariant nchar <= outfilelen;\nloop invariant out >= 0;\nloop invariant out <= outfilelen;\nloop invariant out >= 0;\nloop invariant nchar >= 0;\nloop invariant nchar <= outfilelen;\nloop invariant out >= 0;\nloop invariant nchar >= 0;\nloop invariant nchar <= outfilelen;\nloop invariant out >= 0;\nloop invariant nchar >= 0;\nloop invariant nchar <= outfilelen;\nloop invariant out >= 0;\nloop invariant nchar >= 0;\nloop invariant nchar <= outfilelen;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= out <= outfilelen;\nloop invariant 0 <= nchar <= outfilelen;\nloop invariant 0 <= outfilelen <= 2147483647;\nloop invariant 0 <= out <= outfilelen ==> out < outfilelen;\nloop invariant 0 <= nchar <= outfilelen ==> nchar < outfilelen;\nloop invariant 0 <= outfilelen ==> outfilelen > 0;\nloop invariant 0 <= out ==> 0 <= out < outfilelen ==> out < outfilelen;\nloop invariant 0 <= nchar ==> 0 <= nchar < outfilelen ==> nchar < outfilelen;\nloop invariant 0 <= outfilelen ==> outfilelen > 0 ==> outfilelen > 0;\nloop invariant 0 <= out ==> 0 <= out ==> 0 <= out;\nloop invariant 0 <= nchar ==> 0 <= nchar ==> 0 <= nchar;\nloop invariant 0 <= outfilelen ==> outfilelen > 0 ==> outfilelen > 0;\nloop invariant 0 <= out ==> 0 <= out < outfilelen ==> out < outfilelen ==> out < outfilelen;\nloop invariant 0 <= nchar ==> 0 <= nchar < outfilelen ==> nchar < outfilelen ==> nchar < outfilelen;\nloop invariant 0 <= outfilelen ==> outfilelen > 0 ==> outfilelen > 0 ==> outfilelen > 0;\nloop invariant 0 <= out ==> 0 <= out ==> 0 <= out ==> 0 <= out;\nloop invariant 0 <= nchar ==> 0 <= nchar ==> 0 <= nchar ==> 0 <= nchar;\nloop invariant 0 <= outfilelen ==> outfilelen > 0 ==> outfilelen > 0 ==> outfilelen > 0;\nloop invariant 0 <= out ==> 0 <= out < outfilelen ==> out < outfilelen ==> out < outfilelen ==> out < outfilelen;\nloop invariant 0 <= nchar ==> 0 <= nchar < outfilelen ==> nchar < outfilelen ==> nchar < outfilelen ==> nchar < outfilelen;\nloop invariant 0 <= outfilelen ==> outfilelen > 0 ==> outfilelen > 0 ==> outfilelen > 0 ==> outfilelen > 0;\nloop invariant 0 <= out ==> 0 <= out ==> 0 <= out ==> 0 <= out ==> 0 <= out;\nloop invariant 0 <= nchar ==> 0 <= nchar ==> 0 <= nchar ==> 0 <= nchar ==> 0 <= nchar;\nloop invariant 0 <= outfilelen ==> outfilelen > 0 ==> outfilelen > 0 ==> outfilelen > 0 ==> outfilelen > 0;\nloop invariant 0 <= out ==> 0 <= out < outfilelen ==> out < outfilelen ==> out < outfilelen ==> out < outfilelen ==> out < outfilelen;\nloop invariant 0 <= nchar ==> 0 <= nchar < outfilelen ==> nchar < outfilelen ==> nchar < outfilelen ==> nchar < outfilelen ==> nchar < outfilelen;\nloop invariant 0 <= outfilelen ==> outfilelen > 0 ==> outfilelen > 0 ==> outfilelen > 0 ==> outfilelen > 0 ==> outfilelen > 0;\nloop invariant 0 <= out ==> 0 <= out ==> 0 <= out ==> 0 <= out ==> 0 <= out ==> 0 <= out;\nloop invariant 0 <= nchar ==> 0 <= nchar ==> 0 <= nchar ==> 0 <= nchar ==> 0 <= nchar ==> 0 <= nchar;\nloop invariant 0 <= outfilelen ==> outfilelen > 0 ==> outfilelen > 0 ==> outfilelen > 0 ==> outfilelen > 0 ==> outfilelen > 0;\nloop invariant 0 <= out ==> 0 <= out < outfilelen ==> out < outfilelen ==> out < outfilelen ==> out < outfilelen ==> out < outfilelen ==> out < outfilelen;\nloop invariant 0 <= nchar ==> 0 <= nchar < outfilelen ==> nchar < outfilelen ==> nchar < outfilelen ==> nchar < outfilelen ==> nchar < outfilelen ==> nchar < outfilelen;\nloop invariant 0 <= outfilelen ==> outfilelen > 0 ==> outfilelen > 0 ==> outfilelen > 0 ==> outfilelen > 0 ==> outfilelen > 0 ==> outfilelen > 0;\nloop invariant 0 <= out ==> 0 <= out ==> 0 <= out ==> 0 <= out ==> 0 <= out ==> 0 <= out ==> 0 <= out;\nloop invariant 0 <= nchar ==> 0 <= nchar ==> 0 <= nchar ==> 0 <= nchar ==> 0 <= nchar ==> 0 <= nchar ==> 0 <= nchar;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= out <= outfilelen;\nloop invariant 0 <= out <= outfilelen - 1 ==> 0 <= nchar <= outfilelen;\nloop invariant out < outfilelen ==> nchar < outfilelen;\nloop invariant out < outfilelen ==> nchar <= outfilelen;\nloop invariant out < outfilelen ==> nchar <= outfilelen - 1;\nloop invariant out < outfilelen ==> nchar <= outfilelen - 1 ==> nchar >= 0;\nloop invariant out < outfilelen ==> nchar <= outfilelen - 1 ==> nchar >= 1;\nloop invariant out < outfilelen ==> nchar <= outfilelen - 1 ==> nchar >= 2;\nloop invariant out < outfilelen ==> nchar <= outfilelen - 1 ==> nchar >= 3;\nloop invariant out < outfilelen ==> nchar <= outfilelen - 1 ==> nchar >= 4;\nloop invariant out < outfilelen ==> nchar <= outfilelen - 1 ==> nchar >= 5;\nloop invariant out < outfilelen ==> nchar <= outfilelen - 1 ==> nchar >= 6;\nloop invariant out < outfilelen ==> nchar <= outfilelen - 1 ==> nchar >= 7;\nloop invariant out < outfilelen ==> nchar <= outfilelen - 1 ==> nchar >= 8;\nloop invariant out < outfilelen ==> nchar <= outfilelen - 1 ==> nchar >= 9;\nloop invariant out < outfilelen ==> nchar <= outfilelen - 1 ==> nchar >= 10;\nloop invariant out < outfilelen ==> nchar <= outfilelen - 1 ==> nchar >= 11;\nloop invariant out < outfilelen ==> nchar <= outfilelen - 1 ==> nchar >= 12;\nloop invariant out < outfilelen ==> nchar <= outfilelen - 1 ==> nchar >= 13;\nloop invariant out < outfilelen ==> nchar <= outfilelen - 1 ==> nchar >= 14;\nloop invariant out < outfilelen ==> nchar <= outfilelen - 1 ==> nchar >= 15;\nloop invariant out < outfilelen ==> nchar <= outfilelen - 1 ==> nchar >= 16;\nloop invariant out < outfilelen ==> nchar <= outfilelen - 1 ==> nchar >= 17;\nloop invariant out < outfilelen ==> nchar <= outfilelen - 1 ==> nchar >= 18;\nloop invariant out < outfilelen ==> nchar <= outfilelen - 1 ==> nchar >= 19;\nloop invariant out < outfilelen ==> nchar <= outfilelen - 1 ==> nchar >= 20;\nloop invariant out < outfilelen ==> nchar <= outfilelen - 1 ==> nchar >= 21;\nloop invariant out < outfilelen ==> nchar <= outfilelen - 1 ==> nchar >= 22;\nloop invariant out < outfilelen ==> nchar <= outfilelen - 1 ==> nchar >= 23;\nloop invariant out < outfilelen ==> nchar <= outfilelen - 1 ==> nchar >= 24;\nloop invariant out < outfilelen ==> nchar <= outfilelen - 1 ==> nchar >= 25;\nloop invariant out < outfilelen ==> nchar <= outfilelen - 1 ==> nchar >= 26;\nloop invariant out < outfilelen ==> nchar <= outfilelen - 1 ==> nchar >= 27;\nloop invariant out < outfilelen ==> nchar <= outfilelen - 1 ==> nchar >= 28;\nloop invariant out < outfilelen ==> nchar <= outfilelen - 1 ==> nchar >= 29;\nloop invariant out < outfilelen ==> nchar <= outfilelen - 1 ==> nchar >= 30;\nloop invariant out < outfilelen ==> nchar <= outfilelen - 1 ==> nchar >= 31;\nloop invariant out < outfilelen ==> nchar <= outfilelen - 1 ==> nchar >= 32;\nloop invariant out < outfilelen ==> nchar <= outfilelen - 1 ==> nchar >= 33;\nloop invariant out < outfilelen ==> nchar <= outfilelen - 1 ==> nchar >= 34;\nloop invariant out < outfilelen ==> nchar <= outfilelen - 1 ==> nchar >= 35;\nloop invariant out < outfilelen ==> nchar <= outfilelen - 1 ==> nchar >= 36;\nloop invariant out < outfilelen ==> nchar <= outfilelen - 1 ==> nchar >= 37;\nloop invariant out < outfilelen ==> nchar <= outfilelen - 1 ==> nchar >= 38;\nloop invariant out < outfilelen ==> nchar <= outfilelen - 1 ==> nchar >= 39;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= out < outfilelen;\nloop invariant 0 <= nchar < outfilelen;\nloop invariant nchar >= 0;\nloop invariant out >= 0;\nloop invariant out <= outfilelen;\nloop invariant nchar <= outfilelen;\nloop invariant outfilelen > 0;\nloop invariant outfilelen >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= out;\nloop invariant 0 <= outfilelen;\nloop invariant outfilelen > 0;\nloop invariant nchar >= 0;\nloop invariant nchar <= outfilelen;\nloop invariant 0 <= out;\nloop invariant out < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant out >= 0;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= out <= outfilelen;\nloop invariant nchar >= 0;\nloop invariant nchar <= outfilelen;\nloop invariant out >= 0;\nloop invariant out <= outfilelen;\nloop invariant nchar < outfilelen;\nloop invariant out < outfilelen;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main (void)\n{\n  int outfilelen = unknown();\n  \n  int nchar = 0;\n\n  int out = 0; \n\n  if(outfilelen > 0); else goto RETURN;\n\n  /*@\nloop invariant i1: 0 <= out <= outfilelen;\nloop invariant i2: nchar >= 0;\nloop invariant i3: nchar <= outfilelen;\nloop invariant i4: out >= 0;\nloop invariant i5: out <= outfilelen;\nloop invariant i6: nchar < outfilelen;\n\n*/\nwhile(unknown())\n  {\n    \n    if(unknown())\n    {\n      \n      if(unknown())\n\t\n\tgoto AFTERLOOP; \n\n      if(unknown())\n      {\n\tout = 0;\n\tnchar = 0;\n\tgoto LOOPEND;\n      }\n      else\n      {\n\t\n\tif(unknown())  goto AFTERLOOP;\n\n\tnchar++;\n\tif (nchar >= outfilelen)\n\t  goto AFTERLOOP;\n\n\t{;\n//@ assert(0<=out);\n}\n\n\t{;\n//@ assert(out<outfilelen);\n}\n\n\tout++;\n      }\n    }\n    else\n    {\n      \n      nchar++;\n      if (nchar >= outfilelen)\n\tgoto AFTERLOOP;\n\n      {;\n//@ assert(0<=out);\n}\n\n      {;\n//@ assert(out<outfilelen);\n}\n\n      out++;\n\n      if(unknown()) goto AFTERLOOP;\n    }\n  LOOPEND:;\n  }\n AFTERLOOP:\n\n  {;\n//@ assert(0<=out);\n}\n\n  {;\n//@ assert(out<outfilelen);\n}\n\n  out++;\n RETURN:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 74,
                "annotations": "```\n/*@\nloop invariant 0 <= nchar;\nloop invariant 0 <= out;\nloop invariant out <= outfilelen;\nloop invariant 0 <= outfilelen;\nloop invariant outfilelen >= 0;\nloop invariant outfilelen > 0;\nloop invariant outfilelen < 1;\nloop invariant outfilelen <= 0;\nloop invariant outfilelen > 1;\nloop invariant outfilelen < 2;\nloop invariant outfilelen <= 1;\nloop invariant outfilelen > 2;\nloop invariant outfilelen < 3;\nloop invariant outfilelen <= 2;\nloop invariant outfilelen > 3;\nloop invariant outfilelen < 4;\nloop invariant outfilelen <= 3;\nloop invariant outfilelen > 4;\nloop invariant outfilelen < 5;\nloop invariant outfilelen <= 4;\nloop invariant outfilelen > 5;\nloop invariant outfilelen < 6;\nloop invariant outfilelen <= 5;\nloop invariant outfilelen > 6;\nloop invariant outfilelen < 7;\nloop invariant outfilelen <= 6;\nloop invariant outfilelen > 7;\nloop invariant outfilelen < 8;\nloop invariant outfilelen <= 7;\nloop invariant outfilelen > 8;\nloop invariant outfilelen < 9;\nloop invariant outfilelen <= 8;\nloop invariant outfilelen > 9;\nloop invariant outfilelen < 10;\nloop invariant outfilelen <= 9;\nloop invariant outfilelen > 10;\nloop invariant outfilelen < 11;\nloop invariant outfilelen <= 10;\nloop invariant outfilelen > 11;\nloop invariant outfilelen < 12;\nloop invariant outfilelen <= 11;\nloop invariant outfilelen > 12;\nloop invariant outfilelen < 13;\nloop invariant outfilelen <= 12;\nloop invariant outfilelen > 13;\nloop invariant outfilelen < 14;\nloop invariant outfilelen <= 13;\nloop invariant outfilelen > 14;\nloop invariant outfilelen < 15;\nloop invariant outfilelen <= 14;\nloop invariant outfilelen > 15;\nloop invariant outfilelen < 16;\nloop invariant outfilelen <= 15;\nloop invariant outfilelen > 16;\nloop invariant outfilelen < 17;\nloop invariant outfilelen <= 16;\nloop invariant outfilelen > 17;\nloop invariant outfilelen < 18;\nloop invariant outfilelen <= 17;\nloop invariant outfilelen > 18;\nloop invariant outfilelen < 19;\nloop invariant outfilelen <= 18;\nloop invariant outfilelen > 19;\nloop invariant outfilelen < 20;\nloop invariant outfilelen <= 19;\nloop invariant outfilelen > 20;\nloop invariant outfilelen < 21;\nloop invariant outfilelen <= 20;\nloop invariant outfilelen > 21;\nloop invariant outfilelen < 22;\nloop invariant outfilelen <= 21;\nloop invariant outfilelen > 22;\nloop invariant outfilelen < 23;\nloop invariant outfilelen <= 22;\nloop invariant outfilelen > 23;\nloop invariant outfilelen < 24;\nloop invariant outfilelen <= 23;\nloop invariant outfilelen > 24;\nloop invariant outfilelen < 25;\nloop invariant outfilelen <= 24;\nloop invariant outfilelen > 25;\nloop invariant outfilelen < 26;\nloop invariant outfilelen <= 25;\nloop invariant outfilelen > 26;\nloop invariant outfilelen < 27;\nloop invariant outfilelen <= 26;\nloop invariant outfilelen > 27;\nloop invariant outfilelen < 28;\nloop invariant outfilelen <= 27;\nloop invariant outfilelen > 28;\nloop invariant outfilelen < 29;\nloop invariant outfilelen <= 28;\nloop invariant outfilelen > 29;\nloop invariant outfilelen < 30;\nloop invariant outfilelen <= 29;\nloop invariant outfilelen > 30;\nloop invariant outfilelen < 31;\nloop invariant outfilelen <= 30;\nloop invariant outfilelen > 31;\nloop invariant outfilelen < 32;\nloop invariant outfilelen <= 31;\nloop invariant outfilelen > 32;\nloop invariant outfilelen < 33;\nloop invariant outfilelen <= 32;\nloop invariant outfilelen > 33;\nloop invariant outfilelen < 34;\nloop invariant outfilelen <= 33;\nloop invariant outfilelen > 34;\nloop invariant outfilelen < 35;\nloop invariant outfilelen <= 34;\nloop invariant outfilelen > 35;\nloop invariant outfilelen < 36;\nloop invariant outfilelen <= 35;\nloop invariant outfilelen > 36;\nloop invariant outfilelen < 37;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main (void)\n{\n  int outfilelen = unknown();\n  \n  int nchar = 0;\n\n  int out = 0; \n\n  if(outfilelen > 0); else goto RETURN;\n\n  /*@\nloop invariant i1: 0 <= nchar;\nloop invariant i2: 0 <= out;\nloop invariant i3: out <= outfilelen;\nloop invariant i4: 0 <= outfilelen;\nloop invariant i5: outfilelen >= 0;\nloop invariant i6: outfilelen > 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile(unknown())\n  {\n    \n    if(unknown())\n    {\n      \n      if(unknown())\n\t\n\tgoto AFTERLOOP; \n\n      if(unknown())\n      {\n\tout = 0;\n\tnchar = 0;\n\tgoto LOOPEND;\n      }\n      else\n      {\n\t\n\tif(unknown())  goto AFTERLOOP;\n\n\tnchar++;\n\tif (nchar >= outfilelen)\n\t  goto AFTERLOOP;\n\n\t{;\n//@ assert(0<=out);\n}\n\n\t{;\n//@ assert(out<outfilelen);\n}\n\n\tout++;\n      }\n    }\n    else\n    {\n      \n      nchar++;\n      if (nchar >= outfilelen)\n\tgoto AFTERLOOP;\n\n      {;\n//@ assert(0<=out);\n}\n\n      {;\n//@ assert(out<outfilelen);\n}\n\n      out++;\n\n      if(unknown()) goto AFTERLOOP;\n    }\n  LOOPEND:;\n  }\n AFTERLOOP:\n\n  {;\n//@ assert(0<=out);\n}\n\n  {;\n//@ assert(out<outfilelen);\n}\n\n  out++;\n RETURN:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= out <= outfilelen;\nloop invariant 0 <= nchar <= outfilelen;\nloop invariant 0 <= out + nchar <= outfilelen * 2;\nloop invariant 0 <= out <= outfilelen - 1;\nloop invariant 0 <= nchar <= outfilelen - 1;\nloop invariant 0 <= out + nchar <= outfilelen - 1;\nloop invariant 0 <= out <= outfilelen - 1;\nloop invariant 0 <= nchar <= outfilelen - 1;\nloop invariant 0 <= out + nchar <= outfilelen - 2;\nloop invariant 0 <= out <= outfilelen - 1;\nloop invariant 0 <= nchar <= outfilelen - 1;\nloop invariant 0 <= out + nchar <= outfilelen - 2;\nloop invariant 0 <= out <= outfilelen - 1;\nloop invariant 0 <= nchar <= outfilelen - 1;\nloop invariant 0 <= out <= outfilelen - 1;\nloop invariant 0 <= nchar <= outfilelen - 1;\nloop invariant 0 <= out <= outfilelen - 1;\nloop invariant 0 <= nchar <= outfilelen - 1;\nloop invariant 0 <= out <= outfilelen - 1;\nloop invariant 0 <= nchar <= outfilelen - 1;\nloop invariant 0 <= out <= outfilelen - 1;\nloop invariant 0 <= nchar <= outfilelen - 1;\nloop invariant 0 <= out <= outfilelen - 1;\nloop invariant 0 <= nchar <= outfilelen - 1;\nloop invariant 0 <= out <= outfilelen - 1;\nloop invariant 0 <= nchar <= outfilelen - 1;\nloop invariant 0 <= out <= outfilelen - 1;\nloop invariant 0 <= nchar <= outfilelen - 1;\nloop invariant 0 <= out <= outfilelen - 1;\nloop invariant 0 <= nchar <= outfilelen - 1;\nloop invariant 0 <= out <= outfilelen - 1;\nloop invariant 0 <= nchar <= outfilelen - 1;\nloop invariant 0 <= out <= outfilelen - 1;\nloop invariant 0 <= nchar <= outfilelen - 1;\nloop invariant 0 <= out <= outfilelen - 1;\nloop invariant 0 <= nchar <= outfilelen - 1;\nloop invariant 0 <= out <= outfilelen - 1;\nloop invariant 0 <= nchar <= outfilelen - 1;\nloop invariant 0 <= out <= outfilelen - 1;\nloop invariant 0 <= nchar <= outfilelen - 1;\nloop invariant 0 <= out <= outfilelen - 1;\nloop invariant 0 <= nchar <= outfilelen - 1;\nloop invariant 0 <= out <= outfilelen - 1;\nloop invariant 0 <= nchar <= outfilelen - 1;\nloop invariant 0 <= out <= outfilelen - 1;\nloop invariant 0 <= nchar <= outfilelen - 1;\nloop invariant 0 <= out <= outfilelen - 1;\nloop invariant 0 <= nchar <= outfilelen - 1;\nloop invariant 0 <= out <= outfilelen - 1;\nloop invariant 0 <= nchar <= outfilelen - 1;\nloop invariant 0 <= out <= outfilelen - 1;\nloop invariant 0 <= nchar <= outfilelen - 1;\nloop invariant 0 <= out <= outfilelen - 1;\nloop invariant 0 <= nchar <= outfilelen - 1;\nloop invariant 0 <= out <= outfilelen - 1;\nloop invariant 0 <= nchar <= outfilelen - 1;\nloop invariant 0 <= out <= outfilelen - 1;\nloop invariant 0 <= nchar <= outfilelen - 1;\nloop invariant 0 <= out <= outfilelen - 1;\nloop invariant 0 <= nchar <= outfilelen - 1;\nloop invariant 0 <= out <= outfilelen - 1;\nloop invariant 0 <= nchar <= outfilelen - 1;\nloop invariant 0 <= out <= outfilelen - 1;\nloop invariant 0 <= nchar <= outfilelen - 1;\nloop invariant 0 <= out <= outfilelen - 1;\nloop invariant 0 <= nchar <= outfilelen - 1;\nloop invariant 0 <= out <= outfilelen - 1;\nloop invariant 0 <= nchar <= outfilelen - 1;\nloop invariant 0 <= out <= outfilelen - 1;\nloop invariant 0 <= nchar <= outfilelen - 1;\nloop invariant 0 <= out <= outfilelen - 1;\nloop invariant 0 <= nchar <= outfilelen - 1;\nloop invariant 0 <= out <= outfilelen - 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main (void)\n{\n  int outfilelen = unknown();\n  \n  int nchar = 0;\n\n  int out = 0; \n\n  if(outfilelen > 0); else goto RETURN;\n\n  /*@\nloop invariant i1: 0 <= out <= outfilelen;\nloop invariant i2: 0 <= nchar <= outfilelen;\nloop invariant i3: 0 <= out + nchar <= outfilelen * 2;\n\nloop invariant i5: 0 <= nchar <= outfilelen - 1;\n\n\n*/\nwhile(unknown())\n  {\n    \n    if(unknown())\n    {\n      \n      if(unknown())\n\t\n\tgoto AFTERLOOP; \n\n      if(unknown())\n      {\n\tout = 0;\n\tnchar = 0;\n\tgoto LOOPEND;\n      }\n      else\n      {\n\t\n\tif(unknown())  goto AFTERLOOP;\n\n\tnchar++;\n\tif (nchar >= outfilelen)\n\t  goto AFTERLOOP;\n\n\t{;\n//@ assert(0<=out);\n}\n\n\t{;\n//@ assert(out<outfilelen);\n}\n\n\tout++;\n      }\n    }\n    else\n    {\n      \n      nchar++;\n      if (nchar >= outfilelen)\n\tgoto AFTERLOOP;\n\n      {;\n//@ assert(0<=out);\n}\n\n      {;\n//@ assert(out<outfilelen);\n}\n\n      out++;\n\n      if(unknown()) goto AFTERLOOP;\n    }\n  LOOPEND:;\n  }\n AFTERLOOP:\n\n  {;\n//@ assert(0<=out);\n}\n\n  {;\n//@ assert(out<outfilelen);\n}\n\n  out++;\n RETURN:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant x >= 0;\nloop invariant nchar >= 0;\nloop invariant out >= 0;\nloop invariant nchar <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant nchar >= 0;\nloop invariant nchar < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant nchar >= 0;\nloop invariant nchar < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant nchar >= 0;\nloop invariant nchar < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant nchar >= 0;\nloop invariant nchar < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant nchar >= 0;\nloop invariant nchar < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant nchar >= 0;\nloop invariant nchar < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main (void)\n{\n  int outfilelen = unknown();\n  \n  int nchar = 0;\n\n  int out = 0; \n\n  if(outfilelen > 0); else goto RETURN;\n\n  /*@\n\nloop invariant i2: nchar >= 0;\nloop invariant i3: out >= 0;\nloop invariant i4: nchar <= outfilelen;\nloop invariant i5: out <= outfilelen;\n\nloop invariant i7: nchar < outfilelen;\n*/\nwhile(unknown())\n  {\n    \n    if(unknown())\n    {\n      \n      if(unknown())\n\t\n\tgoto AFTERLOOP; \n\n      if(unknown())\n      {\n\tout = 0;\n\tnchar = 0;\n\tgoto LOOPEND;\n      }\n      else\n      {\n\t\n\tif(unknown())  goto AFTERLOOP;\n\n\tnchar++;\n\tif (nchar >= outfilelen)\n\t  goto AFTERLOOP;\n\n\t{;\n//@ assert(0<=out);\n}\n\n\t{;\n//@ assert(out<outfilelen);\n}\n\n\tout++;\n      }\n    }\n    else\n    {\n      \n      nchar++;\n      if (nchar >= outfilelen)\n\tgoto AFTERLOOP;\n\n      {;\n//@ assert(0<=out);\n}\n\n      {;\n//@ assert(out<outfilelen);\n}\n\n      out++;\n\n      if(unknown()) goto AFTERLOOP;\n    }\n  LOOPEND:;\n  }\n AFTERLOOP:\n\n  {;\n//@ assert(0<=out);\n}\n\n  {;\n//@ assert(out<outfilelen);\n}\n\n  out++;\n RETURN:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant i1; loop invariant i2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main (void)\n{\n  int outfilelen = unknown();\n  \n  int nchar = 0;\n\n  int out = 0; \n\n  if(outfilelen > 0); else goto RETURN;\n\n  /*@\n\n*/\nwhile(unknown())\n  {\n    \n    if(unknown())\n    {\n      \n      if(unknown())\n\t\n\tgoto AFTERLOOP; \n\n      if(unknown())\n      {\n\tout = 0;\n\tnchar = 0;\n\tgoto LOOPEND;\n      }\n      else\n      {\n\t\n\tif(unknown())  goto AFTERLOOP;\n\n\tnchar++;\n\tif (nchar >= outfilelen)\n\t  goto AFTERLOOP;\n\n\t{;\n//@ assert(0<=out);\n}\n\n\t{;\n//@ assert(out<outfilelen);\n}\n\n\tout++;\n      }\n    }\n    else\n    {\n      \n      nchar++;\n      if (nchar >= outfilelen)\n\tgoto AFTERLOOP;\n\n      {;\n//@ assert(0<=out);\n}\n\n      {;\n//@ assert(out<outfilelen);\n}\n\n      out++;\n\n      if(unknown()) goto AFTERLOOP;\n    }\n  LOOPEND:;\n  }\n AFTERLOOP:\n\n  {;\n//@ assert(0<=out);\n}\n\n  {;\n//@ assert(out<outfilelen);\n}\n\n  out++;\n RETURN:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= out <= outfilelen;\nloop invariant 0 <= nchar <= outfilelen;\nloop invariant 1 <= outfilelen <= 2147483647;\nloop invariant 1 <= nchar <= 2147483647;\nloop invariant 1 <= out <= 2147483647;\nloop invariant 0 <= outfilelen <= 2147483647;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main (void)\n{\n  int outfilelen = unknown();\n  \n  int nchar = 0;\n\n  int out = 0; \n\n  if(outfilelen > 0); else goto RETURN;\n\n  /*@\nloop invariant i1: 0 <= out <= outfilelen;\nloop invariant i2: 0 <= nchar <= outfilelen;\nloop invariant i3: 1 <= outfilelen <= 2147483647;\n\n\nloop invariant i6: 0 <= outfilelen <= 2147483647;\n*/\nwhile(unknown())\n  {\n    \n    if(unknown())\n    {\n      \n      if(unknown())\n\t\n\tgoto AFTERLOOP; \n\n      if(unknown())\n      {\n\tout = 0;\n\tnchar = 0;\n\tgoto LOOPEND;\n      }\n      else\n      {\n\t\n\tif(unknown())  goto AFTERLOOP;\n\n\tnchar++;\n\tif (nchar >= outfilelen)\n\t  goto AFTERLOOP;\n\n\t{;\n//@ assert(0<=out);\n}\n\n\t{;\n//@ assert(out<outfilelen);\n}\n\n\tout++;\n      }\n    }\n    else\n    {\n      \n      nchar++;\n      if (nchar >= outfilelen)\n\tgoto AFTERLOOP;\n\n      {;\n//@ assert(0<=out);\n}\n\n      {;\n//@ assert(out<outfilelen);\n}\n\n      out++;\n\n      if(unknown()) goto AFTERLOOP;\n    }\n  LOOPEND:;\n  }\n AFTERLOOP:\n\n  {;\n//@ assert(0<=out);\n}\n\n  {;\n//@ assert(out<outfilelen);\n}\n\n  out++;\n RETURN:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main (void)\n{\n  int outfilelen = unknown();\n  \n  int nchar = 0;\n\n  int out = 0; \n\n  if(outfilelen > 0); else goto RETURN;\n\n  /*@\n\n*/\nwhile(unknown())\n  {\n    \n    if(unknown())\n    {\n      \n      if(unknown())\n\t\n\tgoto AFTERLOOP; \n\n      if(unknown())\n      {\n\tout = 0;\n\tnchar = 0;\n\tgoto LOOPEND;\n      }\n      else\n      {\n\t\n\tif(unknown())  goto AFTERLOOP;\n\n\tnchar++;\n\tif (nchar >= outfilelen)\n\t  goto AFTERLOOP;\n\n\t{;\n//@ assert(0<=out);\n}\n\n\t{;\n//@ assert(out<outfilelen);\n}\n\n\tout++;\n      }\n    }\n    else\n    {\n      \n      nchar++;\n      if (nchar >= outfilelen)\n\tgoto AFTERLOOP;\n\n      {;\n//@ assert(0<=out);\n}\n\n      {;\n//@ assert(out<outfilelen);\n}\n\n      out++;\n\n      if(unknown()) goto AFTERLOOP;\n    }\n  LOOPEND:;\n  }\n AFTERLOOP:\n\n  {;\n//@ assert(0<=out);\n}\n\n  {;\n//@ assert(out<outfilelen);\n}\n\n  out++;\n RETURN:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 9,
                "annotations": "```\n/*@\nloop invariant 0 <= out < outfilelen;\nloop invariant 0 <= nchar <= outfilelen;\nloop invariant if (out == 0) then out < outfilelen;\nloop invariant if (out == outfilelen) then out == outfilelen;\nloop invariant if (nchar == 0) then nchar < outfilelen;\nloop invariant if (nchar == outfilelen) then nchar == outfilelen;\nloop invariant if (out == outfilelen) then nchar == outfilelen;\nloop invariant if (nchar == outfilelen) then out < outfilelen;\nloop invariant if (out == outfilelen) then nchar < outfilelen;\nloop invariant if (out == outfilelen) then nchar < outfilelen;\nloop invariant if (out == outfilelen) then nchar == outfilelen;\nloop invariant if (out == outfilelen) then nchar < outfilelen;\nloop invariant if (out == outfilelen) then nchar == outfilelen;\nloop invariant if (out == outfilelen) then nchar < outfilelen;\nloop invariant if (out == outfilelen) then nchar == outfilelen;\nloop invariant if (out == outfilelen) then nchar < outfilelen;\nloop invariant if (out == outfilelen) then nchar == outfilelen;\nloop invariant if (out == outfilelen) then nchar < outfilelen;\nloop invariant if (out == outfilelen) then nchar == outfilelen;\nloop invariant if (out == outfilelen) then nchar < outfilelen;\nloop invariant if (out == outfilelen) then nchar == outfilelen;\nloop invariant if (out == outfilelen) then nchar < outfilelen;\nloop invariant if (out == outfilelen) then nchar == outfilelen;\nloop invariant if (out == outfilelen) then nchar < outfilelen;\nloop invariant if (out == outfilelen) then nchar == outfilelen;\nloop invariant if (out == outfilelen) then nchar < outfilelen;\nloop invariant if (out == outfilelen) then nchar == outfilelen;\nloop invariant if (out == outfilelen) then nchar < outfilelen;\nloop invariant if (out == outfilelen) then nchar == outfilelen;\nloop invariant if (out == outfilelen) then nchar < outfilelen;\nloop invariant if (out == outfilelen) then nchar == outfilelen;\nloop invariant if (out == outfilelen) then nchar < outfilelen;\nloop invariant if (out == outfilelen) then nchar == outfilelen;\nloop invariant if (out == outfilelen) then nchar < outfilelen;\nloop invariant if (out == outfilelen) then nchar == outfilelen;\nloop invariant if (out == outfilelen) then nchar < outfilelen;\nloop invariant if (out == outfilelen) then nchar == outfilelen;\nloop invariant if (out == outfilelen) then nchar < outfilelen;\nloop invariant if (out == outfilelen) then nchar == outfilelen;\nloop invariant if (out == outfilelen) then nchar < outfilelen;\nloop invariant if (out == outfilelen) then nchar == outfilelen;\nloop invariant if (out == outfilelen) then nchar < outfilelen;\nloop invariant if (out == outfilelen) then nchar == outfilelen;\nloop invariant if (out == outfilelen) then nchar < outfilelen;\nloop invariant if (out == outfilelen) then nchar == outfilelen;\nloop invariant if (out == outfilelen) then nchar < outfilelen;\nloop invariant if (out == outfilelen) then nchar == outfilelen;\nloop invariant if (out == outfilelen) then nchar < outfilelen;\nloop invariant if (out == outfilelen) then nchar == outfilelen;\nloop invariant if (out == outfilelen) then nchar < outfilelen;\nloop invariant if (out == outfilelen) then nchar == outfilelen;\nloop invariant if (out == outfilelen) then nchar < outfilelen;\nloop invariant if (out == outfilelen) then nchar == outfilelen;\nloop invariant if (out == outfilelen) then nchar < outfilelen;\nloop invariant if (out == outfilelen) then nchar == outfilelen;\nloop invariant if (out == outfilelen) then nchar < outfilelen;\nloop invariant if (out == outfilelen) then nchar == outfilelen;\nloop invariant if (out == outfilelen) then nchar < outfilelen;\nloop invariant if (out == outfilelen) then nchar == outfilelen;\nloop invariant if (out == outfilelen) then nchar < outfilelen;\nloop invariant if (out == outfilelen) then nchar == outfilelen;\nloop invariant if (out == outfilelen) then nchar < outfilelen;\nloop invariant if (out == outfilelen) then nchar == outfilelen;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main (void)\n{\n  int outfilelen = unknown();\n  \n  int nchar = 0;\n\n  int out = 0; \n\n  if(outfilelen > 0); else goto RETURN;\n\n  /*@\n\nloop invariant i2: 0 <= nchar <= outfilelen;\n\n\n\n\n\n\n\n*/\nwhile(unknown())\n  {\n    \n    if(unknown())\n    {\n      \n      if(unknown())\n\t\n\tgoto AFTERLOOP; \n\n      if(unknown())\n      {\n\tout = 0;\n\tnchar = 0;\n\tgoto LOOPEND;\n      }\n      else\n      {\n\t\n\tif(unknown())  goto AFTERLOOP;\n\n\tnchar++;\n\tif (nchar >= outfilelen)\n\t  goto AFTERLOOP;\n\n\t{;\n//@ assert(0<=out);\n}\n\n\t{;\n//@ assert(out<outfilelen);\n}\n\n\tout++;\n      }\n    }\n    else\n    {\n      \n      nchar++;\n      if (nchar >= outfilelen)\n\tgoto AFTERLOOP;\n\n      {;\n//@ assert(0<=out);\n}\n\n      {;\n//@ assert(out<outfilelen);\n}\n\n      out++;\n\n      if(unknown()) goto AFTERLOOP;\n    }\n  LOOPEND:;\n  }\n AFTERLOOP:\n\n  {;\n//@ assert(0<=out);\n}\n\n  {;\n//@ assert(out<outfilelen);\n}\n\n  out++;\n RETURN:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= out <= outfilelen;\nloop invariant 0 <= nchar <= outfilelen;\nloop invariant nchar <= out;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main (void)\n{\n  int outfilelen = unknown();\n  \n  int nchar = 0;\n\n  int out = 0; \n\n  if(outfilelen > 0); else goto RETURN;\n\n  /*@\nloop invariant i1: 0 <= out <= outfilelen;\nloop invariant i2: 0 <= nchar <= outfilelen;\nloop invariant i3: nchar <= out;\n*/\nwhile(unknown())\n  {\n    \n    if(unknown())\n    {\n      \n      if(unknown())\n\t\n\tgoto AFTERLOOP; \n\n      if(unknown())\n      {\n\tout = 0;\n\tnchar = 0;\n\tgoto LOOPEND;\n      }\n      else\n      {\n\t\n\tif(unknown())  goto AFTERLOOP;\n\n\tnchar++;\n\tif (nchar >= outfilelen)\n\t  goto AFTERLOOP;\n\n\t{;\n//@ assert(0<=out);\n}\n\n\t{;\n//@ assert(out<outfilelen);\n}\n\n\tout++;\n      }\n    }\n    else\n    {\n      \n      nchar++;\n      if (nchar >= outfilelen)\n\tgoto AFTERLOOP;\n\n      {;\n//@ assert(0<=out);\n}\n\n      {;\n//@ assert(out<outfilelen);\n}\n\n      out++;\n\n      if(unknown()) goto AFTERLOOP;\n    }\n  LOOPEND:;\n  }\n AFTERLOOP:\n\n  {;\n//@ assert(0<=out);\n}\n\n  {;\n//@ assert(out<outfilelen);\n}\n\n  out++;\n RETURN:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main (void)\n{\n  int outfilelen = unknown();\n  \n  int nchar = 0;\n\n  int out = 0; \n\n  if(outfilelen > 0); else goto RETURN;\n\n  /*@\n\n*/\nwhile(unknown())\n  {\n    \n    if(unknown())\n    {\n      \n      if(unknown())\n\t\n\tgoto AFTERLOOP; \n\n      if(unknown())\n      {\n\tout = 0;\n\tnchar = 0;\n\tgoto LOOPEND;\n      }\n      else\n      {\n\t\n\tif(unknown())  goto AFTERLOOP;\n\n\tnchar++;\n\tif (nchar >= outfilelen)\n\t  goto AFTERLOOP;\n\n\t{;\n//@ assert(0<=out);\n}\n\n\t{;\n//@ assert(out<outfilelen);\n}\n\n\tout++;\n      }\n    }\n    else\n    {\n      \n      nchar++;\n      if (nchar >= outfilelen)\n\tgoto AFTERLOOP;\n\n      {;\n//@ assert(0<=out);\n}\n\n      {;\n//@ assert(out<outfilelen);\n}\n\n      out++;\n\n      if(unknown()) goto AFTERLOOP;\n    }\n  LOOPEND:;\n  }\n AFTERLOOP:\n\n  {;\n//@ assert(0<=out);\n}\n\n  {;\n//@ assert(out<outfilelen);\n}\n\n  out++;\n RETURN:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= out <= outfilelen - 1;\nloop invariant nchar >= 0;\nloop invariant nchar < outfilelen;\nloop invariant out <= nchar;\nloop invariant out > nchar - outfilelen;\nloop invariant out >= 0;\nloop invariant nchar >= 0;\nloop invariant nchar <= outfilelen;\nloop invariant out >= 0;\nloop invariant out <= outfilelen;\nloop invariant out >= 0;\nloop invariant nchar >= 0;\nloop invariant nchar <= outfilelen;\nloop invariant out >= 0;\nloop invariant nchar >= 0;\nloop invariant nchar <= outfilelen;\nloop invariant out >= 0;\nloop invariant nchar >= 0;\nloop invariant nchar <= outfilelen;\nloop invariant out >= 0;\nloop invariant nchar >= 0;\nloop invariant nchar <= outfilelen;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main (void)\n{\n  int outfilelen = unknown();\n  \n  int nchar = 0;\n\n  int out = 0; \n\n  if(outfilelen > 0); else goto RETURN;\n\n  /*@\nloop invariant i1: 0 <= out <= outfilelen - 1;\nloop invariant i2: nchar >= 0;\nloop invariant i3: nchar < outfilelen;\nloop invariant i4: out <= nchar;\nloop invariant i5: out > nchar - outfilelen;\nloop invariant i6: out >= 0;\nloop invariant i7: nchar <= outfilelen;\nloop invariant i8: out <= outfilelen;\n*/\nwhile(unknown())\n  {\n    \n    if(unknown())\n    {\n      \n      if(unknown())\n\t\n\tgoto AFTERLOOP; \n\n      if(unknown())\n      {\n\tout = 0;\n\tnchar = 0;\n\tgoto LOOPEND;\n      }\n      else\n      {\n\t\n\tif(unknown())  goto AFTERLOOP;\n\n\tnchar++;\n\tif (nchar >= outfilelen)\n\t  goto AFTERLOOP;\n\n\t{;\n//@ assert(0<=out);\n}\n\n\t{;\n//@ assert(out<outfilelen);\n}\n\n\tout++;\n      }\n    }\n    else\n    {\n      \n      nchar++;\n      if (nchar >= outfilelen)\n\tgoto AFTERLOOP;\n\n      {;\n//@ assert(0<=out);\n}\n\n      {;\n//@ assert(out<outfilelen);\n}\n\n      out++;\n\n      if(unknown()) goto AFTERLOOP;\n    }\n  LOOPEND:;\n  }\n AFTERLOOP:\n\n  {;\n//@ assert(0<=out);\n}\n\n  {;\n//@ assert(out<outfilelen);\n}\n\n  out++;\n RETURN:  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= out <= outfilelen;\nloop invariant 0 <= nchar <= outfilelen;\nloop invariant 0 <= outfilelen <= 2147483647;\nloop invariant 0 <= out <= outfilelen ==> out < outfilelen;\nloop invariant 0 <= nchar <= outfilelen ==> nchar < outfilelen;\nloop invariant 0 <= outfilelen ==> outfilelen > 0;\nloop invariant 0 <= out ==> 0 <= out < outfilelen ==> out < outfilelen;\nloop invariant 0 <= nchar ==> 0 <= nchar < outfilelen ==> nchar < outfilelen;\nloop invariant 0 <= outfilelen ==> outfilelen > 0 ==> outfilelen > 0;\nloop invariant 0 <= out ==> 0 <= out ==> 0 <= out;\nloop invariant 0 <= nchar ==> 0 <= nchar ==> 0 <= nchar;\nloop invariant 0 <= outfilelen ==> outfilelen > 0 ==> outfilelen > 0;\nloop invariant 0 <= out ==> 0 <= out < outfilelen ==> out < outfilelen ==> out < outfilelen;\nloop invariant 0 <= nchar ==> 0 <= nchar < outfilelen ==> nchar < outfilelen ==> nchar < outfilelen;\nloop invariant 0 <= outfilelen ==> outfilelen > 0 ==> outfilelen > 0 ==> outfilelen > 0;\nloop invariant 0 <= out ==> 0 <= out ==> 0 <= out ==> 0 <= out;\nloop invariant 0 <= nchar ==> 0 <= nchar ==> 0 <= nchar ==> 0 <= nchar;\nloop invariant 0 <= outfilelen ==> outfilelen > 0 ==> outfilelen > 0 ==> outfilelen > 0;\nloop invariant 0 <= out ==> 0 <= out < outfilelen ==> out < outfilelen ==> out < outfilelen ==> out < outfilelen;\nloop invariant 0 <= nchar ==> 0 <= nchar < outfilelen ==> nchar < outfilelen ==> nchar < outfilelen ==> nchar < outfilelen;\nloop invariant 0 <= outfilelen ==> outfilelen > 0 ==> outfilelen > 0 ==> outfilelen > 0 ==> outfilelen > 0;\nloop invariant 0 <= out ==> 0 <= out ==> 0 <= out ==> 0 <= out ==> 0 <= out;\nloop invariant 0 <= nchar ==> 0 <= nchar ==> 0 <= nchar ==> 0 <= nchar ==> 0 <= nchar;\nloop invariant 0 <= outfilelen ==> outfilelen > 0 ==> outfilelen > 0 ==> outfilelen > 0 ==> outfilelen > 0;\nloop invariant 0 <= out ==> 0 <= out < outfilelen ==> out < outfilelen ==> out < outfilelen ==> out < outfilelen ==> out < outfilelen;\nloop invariant 0 <= nchar ==> 0 <= nchar < outfilelen ==> nchar < outfilelen ==> nchar < outfilelen ==> nchar < outfilelen ==> nchar < outfilelen;\nloop invariant 0 <= outfilelen ==> outfilelen > 0 ==> outfilelen > 0 ==> outfilelen > 0 ==> outfilelen > 0 ==> outfilelen > 0;\nloop invariant 0 <= out ==> 0 <= out ==> 0 <= out ==> 0 <= out ==> 0 <= out ==> 0 <= out;\nloop invariant 0 <= nchar ==> 0 <= nchar ==> 0 <= nchar ==> 0 <= nchar ==> 0 <= nchar ==> 0 <= nchar;\nloop invariant 0 <= outfilelen ==> outfilelen > 0 ==> outfilelen > 0 ==> outfilelen > 0 ==> outfilelen > 0 ==> outfilelen > 0;\nloop invariant 0 <= out ==> 0 <= out < outfilelen ==> out < outfilelen ==> out < outfilelen ==> out < outfilelen ==> out < outfilelen ==> out < outfilelen;\nloop invariant 0 <= nchar ==> 0 <= nchar < outfilelen ==> nchar < outfilelen ==> nchar < outfilelen ==> nchar < outfilelen ==> nchar < outfilelen ==> nchar < outfilelen;\nloop invariant 0 <= outfilelen ==> outfilelen > 0 ==> outfilelen > 0 ==> outfilelen > 0 ==> outfilelen > 0 ==> outfilelen > 0 ==> outfilelen > 0;\nloop invariant 0 <= out ==> 0 <= out ==> 0 <= out ==> 0 <= out ==> 0 <= out ==> 0 <= out ==> 0 <= out;\nloop invariant 0 <= nchar ==> 0 <= nchar ==> 0 <= nchar ==> 0 <= nchar ==> 0 <= nchar ==> 0 <= nchar ==> 0 <= nchar;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main (void)\n{\n  int outfilelen = unknown();\n  \n  int nchar = 0;\n\n  int out = 0; \n\n  if(outfilelen > 0); else goto RETURN;\n\n  /*@\nloop invariant i1: 0 <= out <= outfilelen;\nloop invariant i2: 0 <= nchar <= outfilelen;\nloop invariant i3: 0 <= outfilelen <= 2147483647;\n\nloop invariant i5: 0 <= nchar <= outfilelen ==> nchar < outfilelen;\nloop invariant i6: 0 <= outfilelen ==> outfilelen > 0;\nloop invariant i7: 0 <= out ==> 0 <= out < outfilelen ==> out < outfilelen;\nloop invariant i8: 0 <= nchar ==> 0 <= nchar < outfilelen ==> nchar < outfilelen;\nloop invariant i9: 0 <= outfilelen ==> outfilelen > 0 ==> outfilelen > 0;\nloop invariant i10: 0 <= out ==> 0 <= out ==> 0 <= out;\nloop invariant i11: 0 <= nchar ==> 0 <= nchar ==> 0 <= nchar;\nloop invariant i12: 0 <= out ==> 0 <= out < outfilelen ==> out < outfilelen ==> out < outfilelen;\nloop invariant i13: 0 <= nchar ==> 0 <= nchar < outfilelen ==> nchar < outfilelen ==> nchar < outfilelen;\nloop invariant i14: 0 <= outfilelen ==> outfilelen > 0 ==> outfilelen > 0 ==> outfilelen > 0;\nloop invariant i15: 0 <= out ==> 0 <= out ==> 0 <= out ==> 0 <= out;\nloop invariant i16: 0 <= nchar ==> 0 <= nchar ==> 0 <= nchar ==> 0 <= nchar;\nloop invariant i17: 0 <= out ==> 0 <= out < outfilelen ==> out < outfilelen ==> out < outfilelen ==> out < outfilelen;\nloop invariant i18: 0 <= nchar ==> 0 <= nchar < outfilelen ==> nchar < outfilelen ==> nchar < outfilelen ==> nchar < outfilelen;\nloop invariant i19: 0 <= outfilelen ==> outfilelen > 0 ==> outfilelen > 0 ==> outfilelen > 0 ==> outfilelen > 0;\nloop invariant i20: 0 <= out ==> 0 <= out ==> 0 <= out ==> 0 <= out ==> 0 <= out;\nloop invariant i21: 0 <= nchar ==> 0 <= nchar ==> 0 <= nchar ==> 0 <= nchar ==> 0 <= nchar;\nloop invariant i22: 0 <= out ==> 0 <= out < outfilelen ==> out < outfilelen ==> out < outfilelen ==> out < outfilelen ==> out < outfilelen;\nloop invariant i23: 0 <= nchar ==> 0 <= nchar < outfilelen ==> nchar < outfilelen ==> nchar < outfilelen ==> nchar < outfilelen ==> nchar < outfilelen;\nloop invariant i24: 0 <= outfilelen ==> outfilelen > 0 ==> outfilelen > 0 ==> outfilelen > 0 ==> outfilelen > 0 ==> outfilelen > 0;\nloop invariant i25: 0 <= out ==> 0 <= out ==> 0 <= out ==> 0 <= out ==> 0 <= out ==> 0 <= out;\nloop invariant i26: 0 <= nchar ==> 0 <= nchar ==> 0 <= nchar ==> 0 <= nchar ==> 0 <= nchar ==> 0 <= nchar;\nloop invariant i27: 0 <= out ==> 0 <= out < outfilelen ==> out < outfilelen ==> out < outfilelen ==> out < outfilelen ==> out < outfilelen ==> out < outfilelen;\nloop invariant i28: 0 <= nchar ==> 0 <= nchar < outfilelen ==> nchar < outfilelen ==> nchar < outfilelen ==> nchar < outfilelen ==> nchar < outfilelen ==> nchar < outfilelen;\nloop invariant i29: 0 <= outfilelen ==> outfilelen > 0 ==> outfilelen > 0 ==> outfilelen > 0 ==> outfilelen > 0 ==> outfilelen > 0 ==> outfilelen > 0;\nloop invariant i30: 0 <= out ==> 0 <= out ==> 0 <= out ==> 0 <= out ==> 0 <= out ==> 0 <= out ==> 0 <= out;\nloop invariant i31: 0 <= nchar ==> 0 <= nchar ==> 0 <= nchar ==> 0 <= nchar ==> 0 <= nchar ==> 0 <= nchar ==> 0 <= nchar;\n*/\nwhile(unknown())\n  {\n    \n    if(unknown())\n    {\n      \n      if(unknown())\n\t\n\tgoto AFTERLOOP; \n\n      if(unknown())\n      {\n\tout = 0;\n\tnchar = 0;\n\tgoto LOOPEND;\n      }\n      else\n      {\n\t\n\tif(unknown())  goto AFTERLOOP;\n\n\tnchar++;\n\tif (nchar >= outfilelen)\n\t  goto AFTERLOOP;\n\n\t{;\n//@ assert(0<=out);\n}\n\n\t{;\n//@ assert(out<outfilelen);\n}\n\n\tout++;\n      }\n    }\n    else\n    {\n      \n      nchar++;\n      if (nchar >= outfilelen)\n\tgoto AFTERLOOP;\n\n      {;\n//@ assert(0<=out);\n}\n\n      {;\n//@ assert(out<outfilelen);\n}\n\n      out++;\n\n      if(unknown()) goto AFTERLOOP;\n    }\n  LOOPEND:;\n  }\n AFTERLOOP:\n\n  {;\n//@ assert(0<=out);\n}\n\n  {;\n//@ assert(out<outfilelen);\n}\n\n  out++;\n RETURN:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 40,
                "annotations": "```\n/*@\nloop invariant 0 <= out <= outfilelen;\nloop invariant 0 <= out <= outfilelen - 1 ==> 0 <= nchar <= outfilelen;\nloop invariant out < outfilelen ==> nchar < outfilelen;\nloop invariant out < outfilelen ==> nchar <= outfilelen;\nloop invariant out < outfilelen ==> nchar <= outfilelen - 1;\nloop invariant out < outfilelen ==> nchar <= outfilelen - 1 ==> nchar >= 0;\nloop invariant out < outfilelen ==> nchar <= outfilelen - 1 ==> nchar >= 1;\nloop invariant out < outfilelen ==> nchar <= outfilelen - 1 ==> nchar >= 2;\nloop invariant out < outfilelen ==> nchar <= outfilelen - 1 ==> nchar >= 3;\nloop invariant out < outfilelen ==> nchar <= outfilelen - 1 ==> nchar >= 4;\nloop invariant out < outfilelen ==> nchar <= outfilelen - 1 ==> nchar >= 5;\nloop invariant out < outfilelen ==> nchar <= outfilelen - 1 ==> nchar >= 6;\nloop invariant out < outfilelen ==> nchar <= outfilelen - 1 ==> nchar >= 7;\nloop invariant out < outfilelen ==> nchar <= outfilelen - 1 ==> nchar >= 8;\nloop invariant out < outfilelen ==> nchar <= outfilelen - 1 ==> nchar >= 9;\nloop invariant out < outfilelen ==> nchar <= outfilelen - 1 ==> nchar >= 10;\nloop invariant out < outfilelen ==> nchar <= outfilelen - 1 ==> nchar >= 11;\nloop invariant out < outfilelen ==> nchar <= outfilelen - 1 ==> nchar >= 12;\nloop invariant out < outfilelen ==> nchar <= outfilelen - 1 ==> nchar >= 13;\nloop invariant out < outfilelen ==> nchar <= outfilelen - 1 ==> nchar >= 14;\nloop invariant out < outfilelen ==> nchar <= outfilelen - 1 ==> nchar >= 15;\nloop invariant out < outfilelen ==> nchar <= outfilelen - 1 ==> nchar >= 16;\nloop invariant out < outfilelen ==> nchar <= outfilelen - 1 ==> nchar >= 17;\nloop invariant out < outfilelen ==> nchar <= outfilelen - 1 ==> nchar >= 18;\nloop invariant out < outfilelen ==> nchar <= outfilelen - 1 ==> nchar >= 19;\nloop invariant out < outfilelen ==> nchar <= outfilelen - 1 ==> nchar >= 20;\nloop invariant out < outfilelen ==> nchar <= outfilelen - 1 ==> nchar >= 21;\nloop invariant out < outfilelen ==> nchar <= outfilelen - 1 ==> nchar >= 22;\nloop invariant out < outfilelen ==> nchar <= outfilelen - 1 ==> nchar >= 23;\nloop invariant out < outfilelen ==> nchar <= outfilelen - 1 ==> nchar >= 24;\nloop invariant out < outfilelen ==> nchar <= outfilelen - 1 ==> nchar >= 25;\nloop invariant out < outfilelen ==> nchar <= outfilelen - 1 ==> nchar >= 26;\nloop invariant out < outfilelen ==> nchar <= outfilelen - 1 ==> nchar >= 27;\nloop invariant out < outfilelen ==> nchar <= outfilelen - 1 ==> nchar >= 28;\nloop invariant out < outfilelen ==> nchar <= outfilelen - 1 ==> nchar >= 29;\nloop invariant out < outfilelen ==> nchar <= outfilelen - 1 ==> nchar >= 30;\nloop invariant out < outfilelen ==> nchar <= outfilelen - 1 ==> nchar >= 31;\nloop invariant out < outfilelen ==> nchar <= outfilelen - 1 ==> nchar >= 32;\nloop invariant out < outfilelen ==> nchar <= outfilelen - 1 ==> nchar >= 33;\nloop invariant out < outfilelen ==> nchar <= outfilelen - 1 ==> nchar >= 34;\nloop invariant out < outfilelen ==> nchar <= outfilelen - 1 ==> nchar >= 35;\nloop invariant out < outfilelen ==> nchar <= outfilelen - 1 ==> nchar >= 36;\nloop invariant out < outfilelen ==> nchar <= outfilelen - 1 ==> nchar >= 37;\nloop invariant out < outfilelen ==> nchar <= outfilelen - 1 ==> nchar >= 38;\nloop invariant out < outfilelen ==> nchar <= outfilelen - 1 ==> nchar >= 39;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main (void)\n{\n  int outfilelen = unknown();\n  \n  int nchar = 0;\n\n  int out = 0; \n\n  if(outfilelen > 0); else goto RETURN;\n\n  /*@\nloop invariant i1: 0 <= out <= outfilelen;\nloop invariant i2: 0 <= out <= outfilelen - 1 ==> 0 <= nchar <= outfilelen;\nloop invariant i3: out < outfilelen ==> nchar < outfilelen;\nloop invariant i4: out < outfilelen ==> nchar <= outfilelen;\nloop invariant i5: out < outfilelen ==> nchar <= outfilelen - 1;\nloop invariant i6: out < outfilelen ==> nchar <= outfilelen - 1 ==> nchar >= 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile(unknown())\n  {\n    \n    if(unknown())\n    {\n      \n      if(unknown())\n\t\n\tgoto AFTERLOOP; \n\n      if(unknown())\n      {\n\tout = 0;\n\tnchar = 0;\n\tgoto LOOPEND;\n      }\n      else\n      {\n\t\n\tif(unknown())  goto AFTERLOOP;\n\n\tnchar++;\n\tif (nchar >= outfilelen)\n\t  goto AFTERLOOP;\n\n\t{;\n//@ assert(0<=out);\n}\n\n\t{;\n//@ assert(out<outfilelen);\n}\n\n\tout++;\n      }\n    }\n    else\n    {\n      \n      nchar++;\n      if (nchar >= outfilelen)\n\tgoto AFTERLOOP;\n\n      {;\n//@ assert(0<=out);\n}\n\n      {;\n//@ assert(out<outfilelen);\n}\n\n      out++;\n\n      if(unknown()) goto AFTERLOOP;\n    }\n  LOOPEND:;\n  }\n AFTERLOOP:\n\n  {;\n//@ assert(0<=out);\n}\n\n  {;\n//@ assert(out<outfilelen);\n}\n\n  out++;\n RETURN:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= out < outfilelen;\nloop invariant 0 <= nchar < outfilelen;\nloop invariant nchar >= 0;\nloop invariant out >= 0;\nloop invariant out <= outfilelen;\nloop invariant nchar <= outfilelen;\nloop invariant outfilelen > 0;\nloop invariant outfilelen >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main (void)\n{\n  int outfilelen = unknown();\n  \n  int nchar = 0;\n\n  int out = 0; \n\n  if(outfilelen > 0); else goto RETURN;\n\n  /*@\n\nloop invariant i2: 0 <= nchar < outfilelen;\nloop invariant i3: nchar >= 0;\nloop invariant i4: out >= 0;\nloop invariant i5: out <= outfilelen;\nloop invariant i6: nchar <= outfilelen;\nloop invariant i7: outfilelen > 0;\nloop invariant i8: outfilelen >= 0;\n*/\nwhile(unknown())\n  {\n    \n    if(unknown())\n    {\n      \n      if(unknown())\n\t\n\tgoto AFTERLOOP; \n\n      if(unknown())\n      {\n\tout = 0;\n\tnchar = 0;\n\tgoto LOOPEND;\n      }\n      else\n      {\n\t\n\tif(unknown())  goto AFTERLOOP;\n\n\tnchar++;\n\tif (nchar >= outfilelen)\n\t  goto AFTERLOOP;\n\n\t{;\n//@ assert(0<=out);\n}\n\n\t{;\n//@ assert(out<outfilelen);\n}\n\n\tout++;\n      }\n    }\n    else\n    {\n      \n      nchar++;\n      if (nchar >= outfilelen)\n\tgoto AFTERLOOP;\n\n      {;\n//@ assert(0<=out);\n}\n\n      {;\n//@ assert(out<outfilelen);\n}\n\n      out++;\n\n      if(unknown()) goto AFTERLOOP;\n    }\n  LOOPEND:;\n  }\n AFTERLOOP:\n\n  {;\n//@ assert(0<=out);\n}\n\n  {;\n//@ assert(out<outfilelen);\n}\n\n  out++;\n RETURN:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= out;\nloop invariant 0 <= outfilelen;\nloop invariant outfilelen > 0;\nloop invariant nchar >= 0;\nloop invariant nchar <= outfilelen;\nloop invariant 0 <= out;\nloop invariant out < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant out >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main (void)\n{\n  int outfilelen = unknown();\n  \n  int nchar = 0;\n\n  int out = 0; \n\n  if(outfilelen > 0); else goto RETURN;\n\n  /*@\nloop invariant i1: 0 <= out;\nloop invariant i2: 0 <= outfilelen;\nloop invariant i3: outfilelen > 0;\nloop invariant i4: nchar >= 0;\nloop invariant i5: nchar <= outfilelen;\n\nloop invariant i7: out >= 0;\n*/\nwhile(unknown())\n  {\n    \n    if(unknown())\n    {\n      \n      if(unknown())\n\t\n\tgoto AFTERLOOP; \n\n      if(unknown())\n      {\n\tout = 0;\n\tnchar = 0;\n\tgoto LOOPEND;\n      }\n      else\n      {\n\t\n\tif(unknown())  goto AFTERLOOP;\n\n\tnchar++;\n\tif (nchar >= outfilelen)\n\t  goto AFTERLOOP;\n\n\t{;\n//@ assert(0<=out);\n}\n\n\t{;\n//@ assert(out<outfilelen);\n}\n\n\tout++;\n      }\n    }\n    else\n    {\n      \n      nchar++;\n      if (nchar >= outfilelen)\n\tgoto AFTERLOOP;\n\n      {;\n//@ assert(0<=out);\n}\n\n      {;\n//@ assert(out<outfilelen);\n}\n\n      out++;\n\n      if(unknown()) goto AFTERLOOP;\n    }\n  LOOPEND:;\n  }\n AFTERLOOP:\n\n  {;\n//@ assert(0<=out);\n}\n\n  {;\n//@ assert(out<outfilelen);\n}\n\n  out++;\n RETURN:  return 0;\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 156: unexpected token '('",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main (void)\n{\n  int outfilelen = unknown();\n  \n  int nchar = 0;\n\n  int out = 0; \n\n  if(outfilelen > 0); else goto RETURN;\n\n  /*@\nloop invariant i1: 0 <= out <= outfilelen;\nloop invariant i2: nchar >= 0;\nloop invariant i3: nchar <= outfilelen;\nloop invariant i4: out >= 0;\nloop invariant i5: out <= outfilelen;\nloop invariant i6: nchar < outfilelen;\nloop invariant i7: out < outfilelen;\nloop invariant i8: 0 <= nchar;\nloop invariant i9: 0 <= out;\nloop invariant i10: 0 <= outfilelen;\nloop invariant i11: outfilelen >= 0;\nloop invariant i12: outfilelen > 0;\nloop invariant i13: outfilelen < 1;\nloop invariant i14: outfilelen <= 0;\nloop invariant i15: outfilelen > 1;\nloop invariant i16: outfilelen < 2;\nloop invariant i17: outfilelen <= 1;\nloop invariant i18: outfilelen > 2;\nloop invariant i19: outfilelen < 3;\nloop invariant i20: outfilelen <= 2;\nloop invariant i21: outfilelen > 3;\nloop invariant i22: outfilelen < 4;\nloop invariant i23: outfilelen <= 3;\nloop invariant i24: outfilelen > 4;\nloop invariant i25: outfilelen < 5;\nloop invariant i26: outfilelen <= 4;\nloop invariant i27: outfilelen > 5;\nloop invariant i28: outfilelen < 6;\nloop invariant i29: outfilelen <= 5;\nloop invariant i30: outfilelen > 6;\nloop invariant i31: outfilelen < 7;\nloop invariant i32: outfilelen <= 6;\nloop invariant i33: outfilelen > 7;\nloop invariant i34: outfilelen < 8;\nloop invariant i35: outfilelen <= 7;\nloop invariant i36: outfilelen > 8;\nloop invariant i37: outfilelen < 9;\nloop invariant i38: outfilelen <= 8;\nloop invariant i39: outfilelen > 9;\nloop invariant i40: outfilelen < 10;\nloop invariant i41: outfilelen <= 9;\nloop invariant i42: outfilelen > 10;\nloop invariant i43: outfilelen < 11;\nloop invariant i44: outfilelen <= 10;\nloop invariant i45: outfilelen > 11;\nloop invariant i46: outfilelen < 12;\nloop invariant i47: outfilelen <= 11;\nloop invariant i48: outfilelen > 12;\nloop invariant i49: outfilelen < 13;\nloop invariant i50: outfilelen <= 12;\nloop invariant i51: outfilelen > 13;\nloop invariant i52: outfilelen < 14;\nloop invariant i53: outfilelen <= 13;\nloop invariant i54: outfilelen > 14;\nloop invariant i55: outfilelen < 15;\nloop invariant i56: outfilelen <= 14;\nloop invariant i57: outfilelen > 15;\nloop invariant i58: outfilelen < 16;\nloop invariant i59: outfilelen <= 15;\nloop invariant i60: outfilelen > 16;\nloop invariant i61: outfilelen < 17;\nloop invariant i62: outfilelen <= 16;\nloop invariant i63: outfilelen > 17;\nloop invariant i64: outfilelen < 18;\nloop invariant i65: outfilelen <= 17;\nloop invariant i66: outfilelen > 18;\nloop invariant i67: outfilelen < 19;\nloop invariant i68: outfilelen <= 18;\nloop invariant i69: outfilelen > 19;\nloop invariant i70: outfilelen < 20;\nloop invariant i71: outfilelen <= 19;\nloop invariant i72: outfilelen > 20;\nloop invariant i73: outfilelen < 21;\nloop invariant i74: outfilelen <= 20;\nloop invariant i75: outfilelen > 21;\nloop invariant i76: outfilelen < 22;\nloop invariant i77: outfilelen <= 21;\nloop invariant i78: outfilelen > 22;\nloop invariant i79: outfilelen < 23;\nloop invariant i80: outfilelen <= 22;\nloop invariant i81: outfilelen > 23;\nloop invariant i82: outfilelen < 24;\nloop invariant i83: outfilelen <= 23;\nloop invariant i84: outfilelen > 24;\nloop invariant i85: outfilelen < 25;\nloop invariant i86: outfilelen <= 24;\nloop invariant i87: outfilelen > 25;\nloop invariant i88: outfilelen < 26;\nloop invariant i89: outfilelen <= 25;\nloop invariant i90: outfilelen > 26;\nloop invariant i91: outfilelen < 27;\nloop invariant i92: outfilelen <= 26;\nloop invariant i93: outfilelen > 27;\nloop invariant i94: outfilelen < 28;\nloop invariant i95: outfilelen <= 27;\nloop invariant i96: outfilelen > 28;\nloop invariant i97: outfilelen < 29;\nloop invariant i98: outfilelen <= 28;\nloop invariant i99: outfilelen > 29;\nloop invariant i100: outfilelen < 30;\nloop invariant i101: outfilelen <= 29;\nloop invariant i102: outfilelen > 30;\nloop invariant i103: outfilelen < 31;\nloop invariant i104: outfilelen <= 30;\nloop invariant i105: outfilelen > 31;\nloop invariant i106: outfilelen < 32;\nloop invariant i107: outfilelen <= 31;\nloop invariant i108: outfilelen > 32;\nloop invariant i109: outfilelen < 33;\nloop invariant i110: outfilelen <= 32;\nloop invariant i111: outfilelen > 33;\nloop invariant i112: outfilelen < 34;\nloop invariant i113: outfilelen <= 33;\nloop invariant i114: outfilelen > 34;\nloop invariant i115: outfilelen < 35;\nloop invariant i116: outfilelen <= 34;\nloop invariant i117: outfilelen > 35;\nloop invariant i118: outfilelen < 36;\nloop invariant i119: outfilelen <= 35;\nloop invariant i120: outfilelen > 36;\nloop invariant i121: outfilelen < 37;\nloop invariant i122: 0 <= nchar <= outfilelen;\nloop invariant i123: 0 <= out + nchar <= outfilelen * 2;\nloop invariant i124: 0 <= out <= outfilelen - 1;\nloop invariant i125: 0 <= nchar <= outfilelen - 1;\nloop invariant i126: 0 <= out + nchar <= outfilelen - 1;\nloop invariant i127: 0 <= out + nchar <= outfilelen - 2;\nloop invariant i128: x >= 0;\nloop invariant i129: i1; loop invariant i2;\nloop invariant i130: 1 <= outfilelen <= 2147483647;\nloop invariant i131: 1 <= nchar <= 2147483647;\nloop invariant i132: 1 <= out <= 2147483647;\nloop invariant i133: 0 <= outfilelen <= 2147483647;\nloop invariant i134: 0 <= out < outfilelen;\nloop invariant i135: if (out == 0) then out < outfilelen;\nloop invariant i136: if (out == outfilelen) then out == outfilelen;\nloop invariant i137: if (nchar == 0) then nchar < outfilelen;\nloop invariant i138: if (nchar == outfilelen) then nchar == outfilelen;\nloop invariant i139: if (out == outfilelen) then nchar == outfilelen;\nloop invariant i140: if (nchar == outfilelen) then out < outfilelen;\nloop invariant i141: if (out == outfilelen) then nchar < outfilelen;\nloop invariant i142: nchar <= out;\nloop invariant i143: out <= nchar;\nloop invariant i144: out > nchar - outfilelen;\nloop invariant i145: 0 <= out <= outfilelen ==> out < outfilelen;\nloop invariant i146: 0 <= nchar <= outfilelen ==> nchar < outfilelen;\nloop invariant i147: 0 <= outfilelen ==> outfilelen > 0;\nloop invariant i148: 0 <= out ==> 0 <= out < outfilelen ==> out < outfilelen;\nloop invariant i149: 0 <= nchar ==> 0 <= nchar < outfilelen ==> nchar < outfilelen;\nloop invariant i150: 0 <= outfilelen ==> outfilelen > 0 ==> outfilelen > 0;\nloop invariant i151: 0 <= out ==> 0 <= out ==> 0 <= out;\nloop invariant i152: 0 <= nchar ==> 0 <= nchar ==> 0 <= nchar;\nloop invariant i153: 0 <= out ==> 0 <= out < outfilelen ==> out < outfilelen ==> out < outfilelen;\nloop invariant i154: 0 <= nchar ==> 0 <= nchar < outfilelen ==> nchar < outfilelen ==> nchar < outfilelen;\nloop invariant i155: 0 <= outfilelen ==> outfilelen > 0 ==> outfilelen > 0 ==> outfilelen > 0;\nloop invariant i156: 0 <= out ==> 0 <= out ==> 0 <= out ==> 0 <= out;\nloop invariant i157: 0 <= nchar ==> 0 <= nchar ==> 0 <= nchar ==> 0 <= nchar;\nloop invariant i158: 0 <= out ==> 0 <= out < outfilelen ==> out < outfilelen ==> out < outfilelen ==> out < outfilelen;\nloop invariant i159: 0 <= nchar ==> 0 <= nchar < outfilelen ==> nchar < outfilelen ==> nchar < outfilelen ==> nchar < outfilelen;\nloop invariant i160: 0 <= outfilelen ==> outfilelen > 0 ==> outfilelen > 0 ==> outfilelen > 0 ==> outfilelen > 0;\nloop invariant i161: 0 <= out ==> 0 <= out ==> 0 <= out ==> 0 <= out ==> 0 <= out;\nloop invariant i162: 0 <= nchar ==> 0 <= nchar ==> 0 <= nchar ==> 0 <= nchar ==> 0 <= nchar;\nloop invariant i163: 0 <= out ==> 0 <= out < outfilelen ==> out < outfilelen ==> out < outfilelen ==> out < outfilelen ==> out < outfilelen;\nloop invariant i164: 0 <= nchar ==> 0 <= nchar < outfilelen ==> nchar < outfilelen ==> nchar < outfilelen ==> nchar < outfilelen ==> nchar < outfilelen;\nloop invariant i165: 0 <= outfilelen ==> outfilelen > 0 ==> outfilelen > 0 ==> outfilelen > 0 ==> outfilelen > 0 ==> outfilelen > 0;\nloop invariant i166: 0 <= out ==> 0 <= out ==> 0 <= out ==> 0 <= out ==> 0 <= out ==> 0 <= out;\nloop invariant i167: 0 <= nchar ==> 0 <= nchar ==> 0 <= nchar ==> 0 <= nchar ==> 0 <= nchar ==> 0 <= nchar;\nloop invariant i168: 0 <= out ==> 0 <= out < outfilelen ==> out < outfilelen ==> out < outfilelen ==> out < outfilelen ==> out < outfilelen ==> out < outfilelen;\nloop invariant i169: 0 <= nchar ==> 0 <= nchar < outfilelen ==> nchar < outfilelen ==> nchar < outfilelen ==> nchar < outfilelen ==> nchar < outfilelen ==> nchar < outfilelen;\nloop invariant i170: 0 <= outfilelen ==> outfilelen > 0 ==> outfilelen > 0 ==> outfilelen > 0 ==> outfilelen > 0 ==> outfilelen > 0 ==> outfilelen > 0;\nloop invariant i171: 0 <= out ==> 0 <= out ==> 0 <= out ==> 0 <= out ==> 0 <= out ==> 0 <= out ==> 0 <= out;\nloop invariant i172: 0 <= nchar ==> 0 <= nchar ==> 0 <= nchar ==> 0 <= nchar ==> 0 <= nchar ==> 0 <= nchar ==> 0 <= nchar;\nloop invariant i173: 0 <= out <= outfilelen - 1 ==> 0 <= nchar <= outfilelen;\nloop invariant i174: out < outfilelen ==> nchar < outfilelen;\nloop invariant i175: out < outfilelen ==> nchar <= outfilelen;\nloop invariant i176: out < outfilelen ==> nchar <= outfilelen - 1;\nloop invariant i177: out < outfilelen ==> nchar <= outfilelen - 1 ==> nchar >= 0;\nloop invariant i178: out < outfilelen ==> nchar <= outfilelen - 1 ==> nchar >= 1;\nloop invariant i179: out < outfilelen ==> nchar <= outfilelen - 1 ==> nchar >= 2;\nloop invariant i180: out < outfilelen ==> nchar <= outfilelen - 1 ==> nchar >= 3;\nloop invariant i181: out < outfilelen ==> nchar <= outfilelen - 1 ==> nchar >= 4;\nloop invariant i182: out < outfilelen ==> nchar <= outfilelen - 1 ==> nchar >= 5;\nloop invariant i183: out < outfilelen ==> nchar <= outfilelen - 1 ==> nchar >= 6;\nloop invariant i184: out < outfilelen ==> nchar <= outfilelen - 1 ==> nchar >= 7;\nloop invariant i185: out < outfilelen ==> nchar <= outfilelen - 1 ==> nchar >= 8;\nloop invariant i186: out < outfilelen ==> nchar <= outfilelen - 1 ==> nchar >= 9;\nloop invariant i187: out < outfilelen ==> nchar <= outfilelen - 1 ==> nchar >= 10;\nloop invariant i188: out < outfilelen ==> nchar <= outfilelen - 1 ==> nchar >= 11;\nloop invariant i189: out < outfilelen ==> nchar <= outfilelen - 1 ==> nchar >= 12;\nloop invariant i190: out < outfilelen ==> nchar <= outfilelen - 1 ==> nchar >= 13;\nloop invariant i191: out < outfilelen ==> nchar <= outfilelen - 1 ==> nchar >= 14;\nloop invariant i192: out < outfilelen ==> nchar <= outfilelen - 1 ==> nchar >= 15;\nloop invariant i193: out < outfilelen ==> nchar <= outfilelen - 1 ==> nchar >= 16;\nloop invariant i194: out < outfilelen ==> nchar <= outfilelen - 1 ==> nchar >= 17;\nloop invariant i195: out < outfilelen ==> nchar <= outfilelen - 1 ==> nchar >= 18;\nloop invariant i196: out < outfilelen ==> nchar <= outfilelen - 1 ==> nchar >= 19;\nloop invariant i197: out < outfilelen ==> nchar <= outfilelen - 1 ==> nchar >= 20;\nloop invariant i198: out < outfilelen ==> nchar <= outfilelen - 1 ==> nchar >= 21;\nloop invariant i199: out < outfilelen ==> nchar <= outfilelen - 1 ==> nchar >= 22;\nloop invariant i200: out < outfilelen ==> nchar <= outfilelen - 1 ==> nchar >= 23;\nloop invariant i201: out < outfilelen ==> nchar <= outfilelen - 1 ==> nchar >= 24;\nloop invariant i202: out < outfilelen ==> nchar <= outfilelen - 1 ==> nchar >= 25;\nloop invariant i203: out < outfilelen ==> nchar <= outfilelen - 1 ==> nchar >= 26;\nloop invariant i204: out < outfilelen ==> nchar <= outfilelen - 1 ==> nchar >= 27;\nloop invariant i205: out < outfilelen ==> nchar <= outfilelen - 1 ==> nchar >= 28;\nloop invariant i206: out < outfilelen ==> nchar <= outfilelen - 1 ==> nchar >= 29;\nloop invariant i207: out < outfilelen ==> nchar <= outfilelen - 1 ==> nchar >= 30;\nloop invariant i208: out < outfilelen ==> nchar <= outfilelen - 1 ==> nchar >= 31;\nloop invariant i209: out < outfilelen ==> nchar <= outfilelen - 1 ==> nchar >= 32;\nloop invariant i210: out < outfilelen ==> nchar <= outfilelen - 1 ==> nchar >= 33;\nloop invariant i211: out < outfilelen ==> nchar <= outfilelen - 1 ==> nchar >= 34;\nloop invariant i212: out < outfilelen ==> nchar <= outfilelen - 1 ==> nchar >= 35;\nloop invariant i213: out < outfilelen ==> nchar <= outfilelen - 1 ==> nchar >= 36;\nloop invariant i214: out < outfilelen ==> nchar <= outfilelen - 1 ==> nchar >= 37;\nloop invariant i215: out < outfilelen ==> nchar <= outfilelen - 1 ==> nchar >= 38;\nloop invariant i216: out < outfilelen ==> nchar <= outfilelen - 1 ==> nchar >= 39;\nloop invariant i217: 0 <= nchar < outfilelen;\n*/\nwhile(unknown())\n  {\n    \n    if(unknown())\n    {\n      \n      if(unknown())\n\t\n\tgoto AFTERLOOP; \n\n      if(unknown())\n      {\n\tout = 0;\n\tnchar = 0;\n\tgoto LOOPEND;\n      }\n      else\n      {\n\t\n\tif(unknown())  goto AFTERLOOP;\n\n\tnchar++;\n\tif (nchar >= outfilelen)\n\t  goto AFTERLOOP;\n\n\t{;\n//@ assert(0<=out);\n}\n\n\t{;\n//@ assert(out<outfilelen);\n}\n\n\tout++;\n      }\n    }\n    else\n    {\n      \n      nchar++;\n      if (nchar >= outfilelen)\n\tgoto AFTERLOOP;\n\n      {;\n//@ assert(0<=out);\n}\n\n      {;\n//@ assert(out<outfilelen);\n}\n\n      out++;\n\n      if(unknown()) goto AFTERLOOP;\n    }\n  LOOPEND:;\n  }\n AFTERLOOP:\n\n  {;\n//@ assert(0<=out);\n}\n\n  {;\n//@ assert(out<outfilelen);\n}\n\n  out++;\n RETURN:  return 0;\n}",
        "combined_annotation_num_solver_calls": 90,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main (void)\n{\n  int outfilelen = unknown();\n  \n  int nchar = 0;\n\n  int out = 0; \n\n  if(outfilelen > 0); else goto RETURN;\n\n  /*@\nloop invariant i1: 0 <= out <= outfilelen;\nloop invariant i2: nchar >= 0;\nloop invariant i3: nchar <= outfilelen;\nloop invariant i4: out >= 0;\nloop invariant i5: out <= outfilelen;\nloop invariant i6: nchar < outfilelen;\nloop invariant i7: out < outfilelen;\nloop invariant i8: 0 <= nchar;\nloop invariant i9: 0 <= out;\nloop invariant i10: 0 <= outfilelen;\nloop invariant i11: outfilelen >= 0;\nloop invariant i12: outfilelen > 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i122: 0 <= nchar <= outfilelen;\nloop invariant i123: 0 <= out + nchar <= outfilelen * 2;\nloop invariant i124: 0 <= out <= outfilelen - 1;\nloop invariant i125: 0 <= nchar <= outfilelen - 1;\n\n\n\n\nloop invariant i130: 1 <= outfilelen <= 2147483647;\n\n\nloop invariant i133: 0 <= outfilelen <= 2147483647;\nloop invariant i134: 0 <= out < outfilelen;\n\n\n\n\n\n\n\nloop invariant i142: nchar <= out;\nloop invariant i143: out <= nchar;\nloop invariant i144: out > nchar - outfilelen;\nloop invariant i145: 0 <= out <= outfilelen ==> out < outfilelen;\nloop invariant i146: 0 <= nchar <= outfilelen ==> nchar < outfilelen;\nloop invariant i147: 0 <= outfilelen ==> outfilelen > 0;\nloop invariant i148: 0 <= out ==> 0 <= out < outfilelen ==> out < outfilelen;\nloop invariant i149: 0 <= nchar ==> 0 <= nchar < outfilelen ==> nchar < outfilelen;\nloop invariant i150: 0 <= outfilelen ==> outfilelen > 0 ==> outfilelen > 0;\nloop invariant i151: 0 <= out ==> 0 <= out ==> 0 <= out;\nloop invariant i152: 0 <= nchar ==> 0 <= nchar ==> 0 <= nchar;\nloop invariant i153: 0 <= out ==> 0 <= out < outfilelen ==> out < outfilelen ==> out < outfilelen;\nloop invariant i154: 0 <= nchar ==> 0 <= nchar < outfilelen ==> nchar < outfilelen ==> nchar < outfilelen;\nloop invariant i155: 0 <= outfilelen ==> outfilelen > 0 ==> outfilelen > 0 ==> outfilelen > 0;\nloop invariant i156: 0 <= out ==> 0 <= out ==> 0 <= out ==> 0 <= out;\nloop invariant i157: 0 <= nchar ==> 0 <= nchar ==> 0 <= nchar ==> 0 <= nchar;\nloop invariant i158: 0 <= out ==> 0 <= out < outfilelen ==> out < outfilelen ==> out < outfilelen ==> out < outfilelen;\nloop invariant i159: 0 <= nchar ==> 0 <= nchar < outfilelen ==> nchar < outfilelen ==> nchar < outfilelen ==> nchar < outfilelen;\nloop invariant i160: 0 <= outfilelen ==> outfilelen > 0 ==> outfilelen > 0 ==> outfilelen > 0 ==> outfilelen > 0;\nloop invariant i161: 0 <= out ==> 0 <= out ==> 0 <= out ==> 0 <= out ==> 0 <= out;\nloop invariant i162: 0 <= nchar ==> 0 <= nchar ==> 0 <= nchar ==> 0 <= nchar ==> 0 <= nchar;\nloop invariant i163: 0 <= out ==> 0 <= out < outfilelen ==> out < outfilelen ==> out < outfilelen ==> out < outfilelen ==> out < outfilelen;\nloop invariant i164: 0 <= nchar ==> 0 <= nchar < outfilelen ==> nchar < outfilelen ==> nchar < outfilelen ==> nchar < outfilelen ==> nchar < outfilelen;\nloop invariant i165: 0 <= outfilelen ==> outfilelen > 0 ==> outfilelen > 0 ==> outfilelen > 0 ==> outfilelen > 0 ==> outfilelen > 0;\nloop invariant i166: 0 <= out ==> 0 <= out ==> 0 <= out ==> 0 <= out ==> 0 <= out ==> 0 <= out;\nloop invariant i167: 0 <= nchar ==> 0 <= nchar ==> 0 <= nchar ==> 0 <= nchar ==> 0 <= nchar ==> 0 <= nchar;\nloop invariant i168: 0 <= out ==> 0 <= out < outfilelen ==> out < outfilelen ==> out < outfilelen ==> out < outfilelen ==> out < outfilelen ==> out < outfilelen;\nloop invariant i169: 0 <= nchar ==> 0 <= nchar < outfilelen ==> nchar < outfilelen ==> nchar < outfilelen ==> nchar < outfilelen ==> nchar < outfilelen ==> nchar < outfilelen;\nloop invariant i170: 0 <= outfilelen ==> outfilelen > 0 ==> outfilelen > 0 ==> outfilelen > 0 ==> outfilelen > 0 ==> outfilelen > 0 ==> outfilelen > 0;\nloop invariant i171: 0 <= out ==> 0 <= out ==> 0 <= out ==> 0 <= out ==> 0 <= out ==> 0 <= out ==> 0 <= out;\nloop invariant i172: 0 <= nchar ==> 0 <= nchar ==> 0 <= nchar ==> 0 <= nchar ==> 0 <= nchar ==> 0 <= nchar ==> 0 <= nchar;\nloop invariant i173: 0 <= out <= outfilelen - 1 ==> 0 <= nchar <= outfilelen;\nloop invariant i174: out < outfilelen ==> nchar < outfilelen;\nloop invariant i175: out < outfilelen ==> nchar <= outfilelen;\nloop invariant i176: out < outfilelen ==> nchar <= outfilelen - 1;\nloop invariant i177: out < outfilelen ==> nchar <= outfilelen - 1 ==> nchar >= 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i217: 0 <= nchar < outfilelen;\n*/\nwhile(unknown())\n  {\n    \n    if(unknown())\n    {\n      \n      if(unknown())\n\t\n\tgoto AFTERLOOP; \n\n      if(unknown())\n      {\n\tout = 0;\n\tnchar = 0;\n\tgoto LOOPEND;\n      }\n      else\n      {\n\t\n\tif(unknown())  goto AFTERLOOP;\n\n\tnchar++;\n\tif (nchar >= outfilelen)\n\t  goto AFTERLOOP;\n\n\t{;\n//@ assert(0<=out);\n}\n\n\t{;\n//@ assert(out<outfilelen);\n}\n\n\tout++;\n      }\n    }\n    else\n    {\n      \n      nchar++;\n      if (nchar >= outfilelen)\n\tgoto AFTERLOOP;\n\n      {;\n//@ assert(0<=out);\n}\n\n      {;\n//@ assert(out<outfilelen);\n}\n\n      out++;\n\n      if(unknown()) goto AFTERLOOP;\n    }\n  LOOPEND:;\n  }\n AFTERLOOP:\n\n  {;\n//@ assert(0<=out);\n}\n\n  {;\n//@ assert(out<outfilelen);\n}\n\n  out++;\n RETURN:  return 0;\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c"
        ],
        "skipped": [],
        "total": 34,
        "success_count": 29,
        "failure_count": 5,
        "success_rate": 0.8529411764705882
    }
}