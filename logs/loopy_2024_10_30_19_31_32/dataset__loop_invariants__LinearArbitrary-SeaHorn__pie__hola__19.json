{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/19.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nvoid main()\n{\n  int n = unknown1 (); \n  int m = unknown1 ();\n  if (n >= 0 && m >= 0 && m < n) {\n  int x=0; \n  int y=m;\n  while(x<n) {\n    x++;\n    if(x>m) y++;\n  }\n  {;\n//@ assert(y==n);\n}\n\n  }\n}",
        "success": false,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x <= y <= n;\nloop invariant ! (x <= m) || (x == m + 1 && y == m + 1);\nloop invariant ! (x > m) || (x == n && y == m);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= n;\nloop invariant m <= x <= n;\nloop invariant y == x || y == x - 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m <= y <= n;\nloop invariant x + y <= n + m;\nloop invariant x <= x + y;\nloop invariant y <= n - m;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y <= n;\nloop invariant y >= m;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y <= n + m;\nloop invariant x <= x + y;\nloop invariant y <= n - m;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y <= n;\nloop invariant y >= m;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y <= n + m;\nloop invariant x <= x + y;\nloop invariant y <= n - m;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y <= n;\nloop invariant y >= m;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y <= n + m;\nloop invariant x <= x + y;\nloop invariant y <= n - m;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y <= n;\nloop invariant y >= m;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y <= n + m;\nloop invariant x <= x + y;\nloop invariant y <= n - m;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y <= n;\nloop invariant y >= m;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y <= n + m;\nloop invariant x <= x + y;\nloop invariant y <= n - m;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y <= n;\nloop invariant y >= m;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y <= n + m;\nloop invariant x <= x + y;\nloop invariant y <= n - m;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y <= n;\nloop invariant y >= m;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y <= n + m;\nloop invariant x <= x + y;\nloop invariant y <= n - m;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y <= n;\nloop invariant y >= m;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y <= n + m;\nloop invariant x <= x + y;\nloop invariant y <= n - m;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y <= n;\nloop invariant y >= m;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y <= n + m;\nloop invariant x <= x + y;\nloop invariant y <= n - m;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y <= n;\nloop invariant y >= m;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y <= n + m;\nloop invariant x <= x + y;\nloop invariant y <= n - m;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y <= n;\nloop invariant y >= m;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y <= n + m;\nloop invariant x <= x + y;\nloop invariant y <= n - m;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y <= n;\nloop invariant y >= m;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y <= n + m;\nloop invariant x <= x + y;\nloop invariant y <= n - m;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y <= n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= m;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant y == m || y == m + 1;\nloop invariant x == n || x == n - 1;\nloop invariant x >= m;\nloop invariant y >= m;\nloop invariant x == y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= m < n;\nloop invariant 0 <= x <= n;\nloop invariant m <= y <= n;\nloop invariant x + m <= y <= x + n;\nloop invariant x + m <= y <= x + n;\nloop invariant 0 <= m < n;\nloop invariant 0 <= x <= n;\nloop invariant m <= y <= n;\nloop invariant x + m <= y <= x + n;\nloop invariant x + m <= y <= x + n;\nloop invariant 0 <= m < n;\nloop invariant 0 <= x <= n;\nloop invariant m <= y <= n;\nloop invariant x + m <= y <= x + n;\nloop invariant x + m <= y <= x + n;\nloop invariant 0 <= m < n;\nloop invariant 0 <= x <= n;\nloop invariant m <= y <= n;\nloop invariant x + m <= y <= x + n;\nloop invariant x + m <= y <= x + n;\nloop invariant 0 <= m < n;\nloop invariant 0 <= x <= n;\nloop invariant m <= y <= n;\nloop invariant x + m <= y <= x + n;\nloop invariant x + m <= y <= x + n;\nloop invariant 0 <= m < n;\nloop invariant 0 <= x <= n;\nloop invariant m <= y <= n;\nloop invariant x + m <= y <= x + n;\nloop invariant x + m <= y <= x + n;\nloop invariant 0 <= m < n;\nloop invariant 0 <= x <= n;\nloop invariant m <= y <= n;\nloop invariant x + m <= y <= x + n;\nloop invariant x + m <= y <= x + n;\nloop invariant 0 <= m < n;\nloop invariant 0 <= x <= n;\nloop invariant m <= y <= n;\nloop invariant x + m <= y <= x + n;\nloop invariant x + m <= y <= x + n;\nloop invariant 0 <= m < n;\nloop invariant 0 <= x <= n;\nloop invariant m <= y <= n;\nloop invariant x + m <= y <= x + n;\nloop invariant x + m <= y <= x + n;\nloop invariant 0 <= m < n;\nloop invariant 0 <= x <= n;\nloop invariant m <= y <= n;\nloop invariant x + m <= y <= x + n;\nloop invariant x + m <= y <= x + n;\nloop invariant 0 <= m < n;\nloop invariant 0 <= x <= n;\nloop invariant m <= y <= n;\nloop invariant x + m <= y <= x + n;\nloop invariant x + m <= y <= x + n;\nloop invariant 0 <= m < n;\nloop invariant 0 <= x <= n;\nloop invariant m <= y <= n;\nloop invariant x + m <= y <= x + n;\nloop invariant x + m <= y <= x + n;\nloop invariant 0 <= m < n;\nloop invariant 0 <= x <= n;\nloop invariant m <= y <= n;\nloop invariant x + m <= y <= x + n;\nloop invariant x + m <= y <= x + n;\nloop invariant 0 <= m < n;\nloop invariant 0 <= x <= n;\nloop invariant m <= y <= n;\nloop invariant x + m <= y <= x + n;\nloop invariant x + m <= y <= x + n;\nloop invariant 0 <= m < n;\nloop invariant 0 <= x <= n;\nloop invariant m <= y <= n;\nloop invariant x + m <= y <= x + n;\nloop invariant x + m <= y <= x + n;\nloop invariant 0 <= m < n;\nloop invariant 0 <= x <= n;\nloop invariant m <= y <= n;\nloop invariant x + m <= y <= x + n;\nloop invariant x + m <= y <= x + n;\nloop invariant 0 <= m < n;\nloop invariant 0 <= x <= n;\nloop invariant m <= y <= n;\nloop invariant x + m <= y <= x + n;\nloop invariant x + m <= y <= x + n;\nloop invariant 0 <= m < n;\nloop invariant 0 <= x <= n;\nloop invariant m <= y <= n;\nloop invariant x + m <= y <= x + n;\nloop invariant x + m <= y <= x + n;\nloop invariant 0 <= m < n;\nloop invariant 0 <= x <= n;\nloop invariant m <= y <= n;\nloop invariant x + m <= y <= x + n;\nloop invariant x + m <= y <= x + n;\nloop invariant 0 <= m < n;\nloop invariant 0 <= x <= n;\nloop invariant m <= y <= n;\nloop invariant x + m <= y <= x + n;\nloop invariant x + m <= y <= x + n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m <= y <= n;\nloop invariant x >= y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= y <= n;\nloop invariant x + y <= n;\nloop invariant x >= y;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y <= n;\nloop invariant x >= y;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y <= n;\nloop invariant x >= y;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y <= n;\nloop invariant x >= y;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y <= n;\nloop invariant x >= y;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y <= n;\nloop invariant x >= y;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y <= n;\nloop invariant x >= y;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y <= n;\nloop invariant x >= y;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y <= n;\nloop invariant x >= y;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y <= n;\nloop invariant x >= y;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y <= n;\nloop invariant x >= y;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y <= n;\nloop invariant x >= y;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y <= n;\nloop invariant x >= y;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y <= n;\nloop invariant x >= y;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y <= n;\nloop invariant x >= y;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y <= n;\nloop invariant x >= y;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y <= n;\nloop invariant x >= y;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y <= n;\nloop invariant x >= y;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y <= n;\nloop invariant x >= y;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y <= n;\nloop invariant x >= y;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y <= n;\nloop invariant x >= y;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y <= n;\nloop invariant x >= y;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y <= n;\nloop invariant x >= y;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y <= n;\nloop invariant x >= y;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y <= n;\nloop invariant x >= y;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y <= n;\nloop invariant x >= y;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y <= n;\nloop invariant x >= y;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y <= n;\nloop invariant x >= y;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y <= n;\nloop invariant x >= y;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y <= n;\nloop invariant x >= y;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y <= n;\nloop invariant x >= y;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y <= n;\nloop invariant x >= y;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y <= n;\nloop invariant x >= y;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y <= n;\nloop invariant x >= y;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y <= n;\nloop invariant x >= y;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y <= n;\nloop invariant x >= y;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y <= n;\nloop invariant x >= y;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y <= n;\nloop invariant x >= y;\nloop invariant x <= n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant y == m + (x - m);\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= 0;\nloop invariant y >= m;\nloop invariant y <= n;\nloop invariant x <= n;\nloop invariant y == m + (x - m);\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= 0;\nloop invariant y >= m;\nloop invariant y <= n;\nloop invariant x <= n;\nloop invariant y == m + (x - m);\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= 0;\nloop invariant y >= m;\nloop invariant y <= n;\nloop invariant x <= n;\nloop invariant y == m + (x - m);\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= 0;\nloop invariant y >= m;\nloop invariant y <= n;\nloop invariant x <= n;\nloop invariant y == m + (x - m);\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= 0;\nloop invariant y >= m;\nloop invariant y <= n;\nloop invariant x <= n;\nloop invariant y == m + (x - m);\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= 0;\nloop invariant y >= m;\nloop invariant y <= n;\nloop invariant x <= n;\nloop invariant y == m + (x - m);\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= 0;\nloop invariant y >= m;\nloop invariant y <= n;\nloop invariant x <= n;\nloop invariant y == m + (x - m);\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= 0;\nloop invariant y >= m;\nloop invariant y <= n;\nloop invariant x <= n;\nloop invariant y == m + (x - m);\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= 0;\nloop invariant y >= m;\nloop invariant y <= n;\nloop invariant x <= n;\nloop invariant y == m + (x - m);\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= 0;\nloop invariant y >= m;\nloop invariant y <= n;\nloop invariant x <= n;\nloop invariant y == m + (x - m);\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= 0;\nloop invariant y >= m;\nloop invariant y <= n;\nloop invariant x <= n;\nloop invariant y == m + (x - m);\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= 0;\nloop invariant y >= m;\nloop invariant y <= n;\nloop invariant x <= n;\nloop invariant y == m + (x - m);\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= 0;\nloop invariant y >= m;\nloop invariant y <= n;\nloop invariant x <= n;\nloop invariant y == m + (x - m);\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= 0;\nloop invariant y >= m;\nloop invariant y <= n;\nloop invariant x <= n;\nloop invariant y == m + (x - m);\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= 0;\nloop invariant y >= m;\nloop invariant y <= n;\nloop invariant x <= n;\nloop invariant y == m + (x - m);\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= 0;\nloop invariant y >= m;\nloop invariant y <= n;\nloop invariant x <= n;\nloop invariant y == m + (x - m);\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= 0;\nloop invariant y >= m;\nloop invariant y <= n;\nloop invariant x <= n;\nloop invariant y == m + (x - m);\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= 0;\nloop invariant y >= m;\nloop invariant y <= n;\nloop invariant x <= n;\nloop invariant y == m + (x - m);\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= 0;\nloop invariant y >= m;\nloop invariant y <= n;\nloop invariant x <= n;\nloop invariant y == m + (x - m);\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= 0;\nloop invariant y >= m;\nloop invariant y <= n;\nloop invariant x <= n;\nloop invariant y == m + (x - m);\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m <= y <= n;\nloop invariant x <= y;\nloop invariant x + y <= n;\nloop invariant x - y >= m;\nloop invariant x - y <= n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= n;\nloop invariant 0 <= x <= n;\nloop invariant x < n ==> y <= n;\nloop invariant x < n ==> y >= m;\nloop invariant m < n ==> y == m;\nloop invariant x == n ==> y == n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= n;\nloop invariant 0 <= m < n;\nloop invariant 0 <= x <= n;\nloop invariant x >= m;\nloop invariant y >= m;\nloop invariant y <= n;\nloop invariant x - m <= y - m;\nloop invariant x - m <= n - m;\nloop invariant x - m <= n - m ==> y - m == x - m;\nloop invariant y - m == n - m ==> x - m == n - m;\nloop invariant x - m == n - m ==> y - m == n - m;\nloop invariant x - m == n - m ==> y - m == n - m;\nloop invariant x - m == n - m ==> y - m == n - m;\nloop invariant x - m == n - m ==> y - m == n - m;\nloop invariant x - m == n - m ==> y - m == n - m;\nloop invariant x - m == n - m ==> y - m == n - m;\nloop invariant x - m == n - m ==> y - m == n - m;\nloop invariant x - m == n - m ==> y - m == n - m;\nloop invariant x - m == n - m ==> y - m == n - m;\nloop invariant x - m == n - m ==> y - m == n - m;\nloop invariant x - m == n - m ==> y - m == n - m;\nloop invariant x - m == n - m ==> y - m == n - m;\nloop invariant x - m == n - m ==> y - m == n - m;\nloop invariant x - m == n - m ==> y - m == n - m;\nloop invariant x - m == n - m ==> y - m == n - m;\nloop invariant x - m == n - m ==> y - m == n - m;\nloop invariant x - m == n - m ==> y - m == n - m;\nloop invariant x - m == n - m ==> y - m == n - m;\nloop invariant x - m == n - m ==> y - m == n - m;\nloop invariant x - m == n - m ==> y - m == n - m;\nloop invariant x - m == n - m ==> y - m == n - m;\nloop invariant x - m == n - m ==> y - m == n - m;\nloop invariant x - m == n - m ==> y - m == n - m;\nloop invariant x - m == n - m ==> y - m == n - m;\nloop invariant x - m == n - m ==> y - m == n - m;\nloop invariant x - m == n - m ==> y - m == n - m;\nloop invariant x - m == n - m ==> y - m == n - m;\nloop invariant x - m == n - m ==> y - m == n - m;\nloop invariant x - m == n - m ==> y - m == n - m;\nloop invariant x - m == n - m ==> y - m == n - m;\nloop invariant x - m == n - m ==> y - m == n - m;\nloop invariant x - m == n - m ==> y - m == n - m;\nloop invariant x - m == n - m ==> y - m == n - m;\nloop invariant x - m == n - m ==> y - m == n - m;\nloop invariant x - m == n - m ==> y - m == n - m;\nloop invariant x - m == n - m ==> y - m == n - m;\nloop invariant x - m == n - m ==> y - m == n - m;\nloop invariant x - m == n - m ==> y - m == n - m;\nloop invariant x - m == n - m ==> y - m == n - m;\nloop invariant x - m == n - m ==> y - m == n - m;\nloop invariant x - m == n - m ==> y - m == n - m;\nloop invariant x - m == n - m ==> y - m == n - m;\nloop invariant x - m == n - m ==> y - m == n - m;\nloop invariant x - m == n - m ==> y - m == n - m;\nloop invariant x - m == n - m ==> y - m == n - m;\nloop invariant x - m == n - m ==> y - m == n - m;\nloop invariant x - m == n - m ==> y - m == n - m;\nloop invariant x - m == n - m ==> y - m == n - m;\nloop invariant x - m == n - m ==> y - m == n - m;\nloop invariant x - m == n - m ==> y - m == n - m;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x <= y;\nloop invariant y <= n;\nloop invariant x + y == n;\nloop invariant x + m == n;\nloop invariant x + m + 1 == y;\nloop invariant x + y == m;\nloop invariant x + m + 1 == n;\nloop invariant x + y == m + 1;\nloop invariant x + m + 1 == y + 1;\nloop invariant x + y == n - 1;\nloop invariant x + m + 1 == n - 1;\nloop invariant x + y == m + 1;\nloop invariant x + m + 1 == n;\nloop invariant x + y == m + 1;\nloop invariant x + m + 1 == n;\nloop invariant x + y == m + 1;\nloop invariant x + m + 1 == n;\nloop invariant x + y == m + 1;\nloop invariant x + m + 1 == n;\nloop invariant x + y == m + 1;\nloop invariant x + m + 1 == n;\nloop invariant x + y == m + 1;\nloop invariant x + m + 1 == n;\nloop invariant x + y == m + 1;\nloop invariant x + m + 1 == n;\nloop invariant x + y == m + 1;\nloop invariant x + m + 1 == n;\nloop invariant x + y == m + 1;\nloop invariant x + m + 1 == n;\nloop invariant x + y == m + 1;\nloop invariant x + m + 1 == n;\nloop invariant x + y == m + 1;\nloop invariant x + m + 1 == n;\nloop invariant x + y == m + 1;\nloop invariant x + m + 1 == n;\nloop invariant x + y == m + 1;\nloop invariant x + m + 1 == n;\nloop invariant x + y == m + 1;\nloop invariant x + m + 1 == n;\nloop invariant x + y == m + 1;\nloop invariant x + m + 1 == n;\nloop invariant x + y == m + 1;\nloop invariant x + m + 1 == n;\nloop invariant x + y == m + 1;\nloop invariant x + m + 1 == n;\nloop invariant x + y == m + 1;\nloop invariant x + m + 1 == n;\nloop invariant x + y == m + 1;\nloop invariant x + m + 1 == n;\nloop invariant x + y == m + 1;\nloop invariant x + m + 1 == n;\nloop invariant x + y == m + 1;\nloop invariant x + m + 1 == n;\nloop invariant x + y == m + 1;\nloop invariant x + m + 1 == n;\nloop invariant x + y == m + 1;\nloop invariant x + m + 1 == n;\nloop invariant x + y == m + 1;\nloop invariant x + m + 1 == n;\nloop invariant x + y == m + 1;\nloop invariant x + m + 1 == n;\nloop invariant x + y == m + 1;\nloop invariant x + m + 1 == n;\nloop invariant x + y == m + 1;\nloop invariant x + m + 1 == n;\nloop invariant x + y == m + 1;\nloop invariant x + m + 1 == n;\nloop invariant x + y == m + 1;\nloop invariant x + m + 1 == n;\nloop invariant x + y == m + 1;\nloop invariant x + m + 1 == n;\nloop invariant x + y == m + 1;\nloop invariant x + m + 1 == n;\nloop invariant x + y == m + 1;\nloop invariant x + m + 1 == n;\nloop invariant x + y == m + 1;\nloop invariant x + m + 1 == n;\nloop invariant x + y == m + 1;\nloop invariant x + m + 1 == n;\nloop invariant x + y == m + 1;\nloop invariant x + m + 1 == n;\nloop invariant x + y == m + 1;\nloop invariant x + m + 1 == n;\nloop invariant x + y == m + 1;\nloop invariant x + m + 1 == n;\nloop invariant x + y == m + 1;\nloop invariant x + m + 1 == n;\nloop invariant x + y == m + 1;\nloop invariant x + m + 1 == n;\nloop invariant x + y == m + 1;\nloop invariant x + m + 1 == n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= y <= n;\nloop invariant x + y == n;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y == n - x + 1;\nloop invariant y == m;\n*/\n```",
            "```\n/*@\nloop invariant x <= m;\nloop invariant x <= n;\nloop invariant y <= m;\nloop invariant y <= n;\nloop invariant x + y == m + n;\nloop invariant x + y == m + n;\n*/\n```",
            "```\n/*@\n\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x <= y <= n;\nloop invariant ! (x <= m) || (x == m + 1 && y == m + 1);\nloop invariant ! (x > m) || (x == n && y == m);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nvoid main()\n{\n  int n = unknown1 (); \n  int m = unknown1 ();\n  if (n >= 0 && m >= 0 && m < n) {\n  int x=0; \n  int y=m;\n  /*@\nloop invariant i1: 0 <= x <= n;\n\n\n\n*/\nwhile(x<n) {\n    x++;\n    if(x>m) y++;\n  }\n  {;\n//@ assert(y==n);\n}\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= n;\nloop invariant m <= x <= n;\nloop invariant y == x || y == x - 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nvoid main()\n{\n  int n = unknown1 (); \n  int m = unknown1 ();\n  if (n >= 0 && m >= 0 && m < n) {\n  int x=0; \n  int y=m;\n  /*@\n\n\n\n*/\nwhile(x<n) {\n    x++;\n    if(x>m) y++;\n  }\n  {;\n//@ assert(y==n);\n}\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m <= y <= n;\nloop invariant x + y <= n + m;\nloop invariant x <= x + y;\nloop invariant y <= n - m;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y <= n;\nloop invariant y >= m;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y <= n + m;\nloop invariant x <= x + y;\nloop invariant y <= n - m;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y <= n;\nloop invariant y >= m;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y <= n + m;\nloop invariant x <= x + y;\nloop invariant y <= n - m;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y <= n;\nloop invariant y >= m;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y <= n + m;\nloop invariant x <= x + y;\nloop invariant y <= n - m;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y <= n;\nloop invariant y >= m;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y <= n + m;\nloop invariant x <= x + y;\nloop invariant y <= n - m;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y <= n;\nloop invariant y >= m;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y <= n + m;\nloop invariant x <= x + y;\nloop invariant y <= n - m;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y <= n;\nloop invariant y >= m;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y <= n + m;\nloop invariant x <= x + y;\nloop invariant y <= n - m;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y <= n;\nloop invariant y >= m;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y <= n + m;\nloop invariant x <= x + y;\nloop invariant y <= n - m;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y <= n;\nloop invariant y >= m;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y <= n + m;\nloop invariant x <= x + y;\nloop invariant y <= n - m;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y <= n;\nloop invariant y >= m;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y <= n + m;\nloop invariant x <= x + y;\nloop invariant y <= n - m;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y <= n;\nloop invariant y >= m;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y <= n + m;\nloop invariant x <= x + y;\nloop invariant y <= n - m;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y <= n;\nloop invariant y >= m;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y <= n + m;\nloop invariant x <= x + y;\nloop invariant y <= n - m;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y <= n;\nloop invariant y >= m;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y <= n + m;\nloop invariant x <= x + y;\nloop invariant y <= n - m;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y <= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nvoid main()\n{\n  int n = unknown1 (); \n  int m = unknown1 ();\n  if (n >= 0 && m >= 0 && m < n) {\n  int x=0; \n  int y=m;\n  /*@\nloop invariant i1: 0 <= x <= n;\n\n\nloop invariant i4: x <= x + y;\n\nloop invariant i6: x <= n;\n\n\nloop invariant i9: y >= m;\nloop invariant i10: x >= 0;\nloop invariant i11: y >= 0;\n*/\nwhile(x<n) {\n    x++;\n    if(x>m) y++;\n  }\n  {;\n//@ assert(y==n);\n}\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= m;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant y == m || y == m + 1;\nloop invariant x == n || x == n - 1;\nloop invariant x >= m;\nloop invariant y >= m;\nloop invariant x == y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nvoid main()\n{\n  int n = unknown1 (); \n  int m = unknown1 ();\n  if (n >= 0 && m >= 0 && m < n) {\n  int x=0; \n  int y=m;\n  /*@\n\nloop invariant i2: x <= n;\n\n\n\n\nloop invariant i7: y >= m;\n\n*/\nwhile(x<n) {\n    x++;\n    if(x>m) y++;\n  }\n  {;\n//@ assert(y==n);\n}\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= m < n;\nloop invariant 0 <= x <= n;\nloop invariant m <= y <= n;\nloop invariant x + m <= y <= x + n;\nloop invariant x + m <= y <= x + n;\nloop invariant 0 <= m < n;\nloop invariant 0 <= x <= n;\nloop invariant m <= y <= n;\nloop invariant x + m <= y <= x + n;\nloop invariant x + m <= y <= x + n;\nloop invariant 0 <= m < n;\nloop invariant 0 <= x <= n;\nloop invariant m <= y <= n;\nloop invariant x + m <= y <= x + n;\nloop invariant x + m <= y <= x + n;\nloop invariant 0 <= m < n;\nloop invariant 0 <= x <= n;\nloop invariant m <= y <= n;\nloop invariant x + m <= y <= x + n;\nloop invariant x + m <= y <= x + n;\nloop invariant 0 <= m < n;\nloop invariant 0 <= x <= n;\nloop invariant m <= y <= n;\nloop invariant x + m <= y <= x + n;\nloop invariant x + m <= y <= x + n;\nloop invariant 0 <= m < n;\nloop invariant 0 <= x <= n;\nloop invariant m <= y <= n;\nloop invariant x + m <= y <= x + n;\nloop invariant x + m <= y <= x + n;\nloop invariant 0 <= m < n;\nloop invariant 0 <= x <= n;\nloop invariant m <= y <= n;\nloop invariant x + m <= y <= x + n;\nloop invariant x + m <= y <= x + n;\nloop invariant 0 <= m < n;\nloop invariant 0 <= x <= n;\nloop invariant m <= y <= n;\nloop invariant x + m <= y <= x + n;\nloop invariant x + m <= y <= x + n;\nloop invariant 0 <= m < n;\nloop invariant 0 <= x <= n;\nloop invariant m <= y <= n;\nloop invariant x + m <= y <= x + n;\nloop invariant x + m <= y <= x + n;\nloop invariant 0 <= m < n;\nloop invariant 0 <= x <= n;\nloop invariant m <= y <= n;\nloop invariant x + m <= y <= x + n;\nloop invariant x + m <= y <= x + n;\nloop invariant 0 <= m < n;\nloop invariant 0 <= x <= n;\nloop invariant m <= y <= n;\nloop invariant x + m <= y <= x + n;\nloop invariant x + m <= y <= x + n;\nloop invariant 0 <= m < n;\nloop invariant 0 <= x <= n;\nloop invariant m <= y <= n;\nloop invariant x + m <= y <= x + n;\nloop invariant x + m <= y <= x + n;\nloop invariant 0 <= m < n;\nloop invariant 0 <= x <= n;\nloop invariant m <= y <= n;\nloop invariant x + m <= y <= x + n;\nloop invariant x + m <= y <= x + n;\nloop invariant 0 <= m < n;\nloop invariant 0 <= x <= n;\nloop invariant m <= y <= n;\nloop invariant x + m <= y <= x + n;\nloop invariant x + m <= y <= x + n;\nloop invariant 0 <= m < n;\nloop invariant 0 <= x <= n;\nloop invariant m <= y <= n;\nloop invariant x + m <= y <= x + n;\nloop invariant x + m <= y <= x + n;\nloop invariant 0 <= m < n;\nloop invariant 0 <= x <= n;\nloop invariant m <= y <= n;\nloop invariant x + m <= y <= x + n;\nloop invariant x + m <= y <= x + n;\nloop invariant 0 <= m < n;\nloop invariant 0 <= x <= n;\nloop invariant m <= y <= n;\nloop invariant x + m <= y <= x + n;\nloop invariant x + m <= y <= x + n;\nloop invariant 0 <= m < n;\nloop invariant 0 <= x <= n;\nloop invariant m <= y <= n;\nloop invariant x + m <= y <= x + n;\nloop invariant x + m <= y <= x + n;\nloop invariant 0 <= m < n;\nloop invariant 0 <= x <= n;\nloop invariant m <= y <= n;\nloop invariant x + m <= y <= x + n;\nloop invariant x + m <= y <= x + n;\nloop invariant 0 <= m < n;\nloop invariant 0 <= x <= n;\nloop invariant m <= y <= n;\nloop invariant x + m <= y <= x + n;\nloop invariant x + m <= y <= x + n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nvoid main()\n{\n  int n = unknown1 (); \n  int m = unknown1 ();\n  if (n >= 0 && m >= 0 && m < n) {\n  int x=0; \n  int y=m;\n  /*@\nloop invariant i1: 0 <= m < n;\nloop invariant i2: 0 <= x <= n;\n\n\n*/\nwhile(x<n) {\n    x++;\n    if(x>m) y++;\n  }\n  {;\n//@ assert(y==n);\n}\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m <= y <= n;\nloop invariant x >= y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nvoid main()\n{\n  int n = unknown1 (); \n  int m = unknown1 ();\n  if (n >= 0 && m >= 0 && m < n) {\n  int x=0; \n  int y=m;\n  /*@\nloop invariant i1: 0 <= x <= n;\n\n\n*/\nwhile(x<n) {\n    x++;\n    if(x>m) y++;\n  }\n  {;\n//@ assert(y==n);\n}\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= y <= n;\nloop invariant x + y <= n;\nloop invariant x >= y;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y <= n;\nloop invariant x >= y;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y <= n;\nloop invariant x >= y;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y <= n;\nloop invariant x >= y;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y <= n;\nloop invariant x >= y;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y <= n;\nloop invariant x >= y;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y <= n;\nloop invariant x >= y;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y <= n;\nloop invariant x >= y;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y <= n;\nloop invariant x >= y;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y <= n;\nloop invariant x >= y;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y <= n;\nloop invariant x >= y;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y <= n;\nloop invariant x >= y;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y <= n;\nloop invariant x >= y;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y <= n;\nloop invariant x >= y;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y <= n;\nloop invariant x >= y;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y <= n;\nloop invariant x >= y;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y <= n;\nloop invariant x >= y;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y <= n;\nloop invariant x >= y;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y <= n;\nloop invariant x >= y;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y <= n;\nloop invariant x >= y;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y <= n;\nloop invariant x >= y;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y <= n;\nloop invariant x >= y;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y <= n;\nloop invariant x >= y;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y <= n;\nloop invariant x >= y;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y <= n;\nloop invariant x >= y;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y <= n;\nloop invariant x >= y;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y <= n;\nloop invariant x >= y;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y <= n;\nloop invariant x >= y;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y <= n;\nloop invariant x >= y;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y <= n;\nloop invariant x >= y;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y <= n;\nloop invariant x >= y;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y <= n;\nloop invariant x >= y;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y <= n;\nloop invariant x >= y;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y <= n;\nloop invariant x >= y;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y <= n;\nloop invariant x >= y;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y <= n;\nloop invariant x >= y;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y <= n;\nloop invariant x >= y;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y <= n;\nloop invariant x >= y;\nloop invariant x <= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nvoid main()\n{\n  int n = unknown1 (); \n  int m = unknown1 ();\n  if (n >= 0 && m >= 0 && m < n) {\n  int x=0; \n  int y=m;\n  /*@\nloop invariant i1: 0 <= x <= n;\n\n\n\nloop invariant i5: x <= n;\n\n*/\nwhile(x<n) {\n    x++;\n    if(x>m) y++;\n  }\n  {;\n//@ assert(y==n);\n}\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant y == m + (x - m);\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= 0;\nloop invariant y >= m;\nloop invariant y <= n;\nloop invariant x <= n;\nloop invariant y == m + (x - m);\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= 0;\nloop invariant y >= m;\nloop invariant y <= n;\nloop invariant x <= n;\nloop invariant y == m + (x - m);\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= 0;\nloop invariant y >= m;\nloop invariant y <= n;\nloop invariant x <= n;\nloop invariant y == m + (x - m);\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= 0;\nloop invariant y >= m;\nloop invariant y <= n;\nloop invariant x <= n;\nloop invariant y == m + (x - m);\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= 0;\nloop invariant y >= m;\nloop invariant y <= n;\nloop invariant x <= n;\nloop invariant y == m + (x - m);\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= 0;\nloop invariant y >= m;\nloop invariant y <= n;\nloop invariant x <= n;\nloop invariant y == m + (x - m);\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= 0;\nloop invariant y >= m;\nloop invariant y <= n;\nloop invariant x <= n;\nloop invariant y == m + (x - m);\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= 0;\nloop invariant y >= m;\nloop invariant y <= n;\nloop invariant x <= n;\nloop invariant y == m + (x - m);\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= 0;\nloop invariant y >= m;\nloop invariant y <= n;\nloop invariant x <= n;\nloop invariant y == m + (x - m);\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= 0;\nloop invariant y >= m;\nloop invariant y <= n;\nloop invariant x <= n;\nloop invariant y == m + (x - m);\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= 0;\nloop invariant y >= m;\nloop invariant y <= n;\nloop invariant x <= n;\nloop invariant y == m + (x - m);\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= 0;\nloop invariant y >= m;\nloop invariant y <= n;\nloop invariant x <= n;\nloop invariant y == m + (x - m);\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= 0;\nloop invariant y >= m;\nloop invariant y <= n;\nloop invariant x <= n;\nloop invariant y == m + (x - m);\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= 0;\nloop invariant y >= m;\nloop invariant y <= n;\nloop invariant x <= n;\nloop invariant y == m + (x - m);\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= 0;\nloop invariant y >= m;\nloop invariant y <= n;\nloop invariant x <= n;\nloop invariant y == m + (x - m);\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= 0;\nloop invariant y >= m;\nloop invariant y <= n;\nloop invariant x <= n;\nloop invariant y == m + (x - m);\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= 0;\nloop invariant y >= m;\nloop invariant y <= n;\nloop invariant x <= n;\nloop invariant y == m + (x - m);\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= 0;\nloop invariant y >= m;\nloop invariant y <= n;\nloop invariant x <= n;\nloop invariant y == m + (x - m);\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= 0;\nloop invariant y >= m;\nloop invariant y <= n;\nloop invariant x <= n;\nloop invariant y == m + (x - m);\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= 0;\nloop invariant y >= m;\nloop invariant y <= n;\nloop invariant x <= n;\nloop invariant y == m + (x - m);\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nvoid main()\n{\n  int n = unknown1 (); \n  int m = unknown1 ();\n  if (n >= 0 && m >= 0 && m < n) {\n  int x=0; \n  int y=m;\n  /*@\nloop invariant i1: 0 <= x <= n;\n\nloop invariant i3: x <= n;\n\nloop invariant i5: x >= 0;\nloop invariant i6: y >= m;\n*/\nwhile(x<n) {\n    x++;\n    if(x>m) y++;\n  }\n  {;\n//@ assert(y==n);\n}\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m <= y <= n;\nloop invariant x <= y;\nloop invariant x + y <= n;\nloop invariant x - y >= m;\nloop invariant x - y <= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nvoid main()\n{\n  int n = unknown1 (); \n  int m = unknown1 ();\n  if (n >= 0 && m >= 0 && m < n) {\n  int x=0; \n  int y=m;\n  /*@\nloop invariant i1: 0 <= x <= n;\n\n\n\n\n\n*/\nwhile(x<n) {\n    x++;\n    if(x>m) y++;\n  }\n  {;\n//@ assert(y==n);\n}\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= n;\nloop invariant 0 <= x <= n;\nloop invariant x < n ==> y <= n;\nloop invariant x < n ==> y >= m;\nloop invariant m < n ==> y == m;\nloop invariant x == n ==> y == n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nvoid main()\n{\n  int n = unknown1 (); \n  int m = unknown1 ();\n  if (n >= 0 && m >= 0 && m < n) {\n  int x=0; \n  int y=m;\n  /*@\n\nloop invariant i2: 0 <= x <= n;\n\nloop invariant i4: x < n ==> y >= m;\n\n\n*/\nwhile(x<n) {\n    x++;\n    if(x>m) y++;\n  }\n  {;\n//@ assert(y==n);\n}\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= n;\nloop invariant 0 <= m < n;\nloop invariant 0 <= x <= n;\nloop invariant x >= m;\nloop invariant y >= m;\nloop invariant y <= n;\nloop invariant x - m <= y - m;\nloop invariant x - m <= n - m;\nloop invariant x - m <= n - m ==> y - m == x - m;\nloop invariant y - m == n - m ==> x - m == n - m;\nloop invariant x - m == n - m ==> y - m == n - m;\nloop invariant x - m == n - m ==> y - m == n - m;\nloop invariant x - m == n - m ==> y - m == n - m;\nloop invariant x - m == n - m ==> y - m == n - m;\nloop invariant x - m == n - m ==> y - m == n - m;\nloop invariant x - m == n - m ==> y - m == n - m;\nloop invariant x - m == n - m ==> y - m == n - m;\nloop invariant x - m == n - m ==> y - m == n - m;\nloop invariant x - m == n - m ==> y - m == n - m;\nloop invariant x - m == n - m ==> y - m == n - m;\nloop invariant x - m == n - m ==> y - m == n - m;\nloop invariant x - m == n - m ==> y - m == n - m;\nloop invariant x - m == n - m ==> y - m == n - m;\nloop invariant x - m == n - m ==> y - m == n - m;\nloop invariant x - m == n - m ==> y - m == n - m;\nloop invariant x - m == n - m ==> y - m == n - m;\nloop invariant x - m == n - m ==> y - m == n - m;\nloop invariant x - m == n - m ==> y - m == n - m;\nloop invariant x - m == n - m ==> y - m == n - m;\nloop invariant x - m == n - m ==> y - m == n - m;\nloop invariant x - m == n - m ==> y - m == n - m;\nloop invariant x - m == n - m ==> y - m == n - m;\nloop invariant x - m == n - m ==> y - m == n - m;\nloop invariant x - m == n - m ==> y - m == n - m;\nloop invariant x - m == n - m ==> y - m == n - m;\nloop invariant x - m == n - m ==> y - m == n - m;\nloop invariant x - m == n - m ==> y - m == n - m;\nloop invariant x - m == n - m ==> y - m == n - m;\nloop invariant x - m == n - m ==> y - m == n - m;\nloop invariant x - m == n - m ==> y - m == n - m;\nloop invariant x - m == n - m ==> y - m == n - m;\nloop invariant x - m == n - m ==> y - m == n - m;\nloop invariant x - m == n - m ==> y - m == n - m;\nloop invariant x - m == n - m ==> y - m == n - m;\nloop invariant x - m == n - m ==> y - m == n - m;\nloop invariant x - m == n - m ==> y - m == n - m;\nloop invariant x - m == n - m ==> y - m == n - m;\nloop invariant x - m == n - m ==> y - m == n - m;\nloop invariant x - m == n - m ==> y - m == n - m;\nloop invariant x - m == n - m ==> y - m == n - m;\nloop invariant x - m == n - m ==> y - m == n - m;\nloop invariant x - m == n - m ==> y - m == n - m;\nloop invariant x - m == n - m ==> y - m == n - m;\nloop invariant x - m == n - m ==> y - m == n - m;\nloop invariant x - m == n - m ==> y - m == n - m;\nloop invariant x - m == n - m ==> y - m == n - m;\nloop invariant x - m == n - m ==> y - m == n - m;\nloop invariant x - m == n - m ==> y - m == n - m;\nloop invariant x - m == n - m ==> y - m == n - m;\nloop invariant x - m == n - m ==> y - m == n - m;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nvoid main()\n{\n  int n = unknown1 (); \n  int m = unknown1 ();\n  if (n >= 0 && m >= 0 && m < n) {\n  int x=0; \n  int y=m;\n  /*@\nloop invariant i1: 0 <= n;\nloop invariant i2: 0 <= m < n;\nloop invariant i3: 0 <= x <= n;\n\nloop invariant i5: y >= m;\n\nloop invariant i7: x - m <= y - m;\nloop invariant i8: x - m <= n - m;\n\n\n\n*/\nwhile(x<n) {\n    x++;\n    if(x>m) y++;\n  }\n  {;\n//@ assert(y==n);\n}\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 9,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x <= y;\nloop invariant y <= n;\nloop invariant x + y == n;\nloop invariant x + m == n;\nloop invariant x + m + 1 == y;\nloop invariant x + y == m;\nloop invariant x + m + 1 == n;\nloop invariant x + y == m + 1;\nloop invariant x + m + 1 == y + 1;\nloop invariant x + y == n - 1;\nloop invariant x + m + 1 == n - 1;\nloop invariant x + y == m + 1;\nloop invariant x + m + 1 == n;\nloop invariant x + y == m + 1;\nloop invariant x + m + 1 == n;\nloop invariant x + y == m + 1;\nloop invariant x + m + 1 == n;\nloop invariant x + y == m + 1;\nloop invariant x + m + 1 == n;\nloop invariant x + y == m + 1;\nloop invariant x + m + 1 == n;\nloop invariant x + y == m + 1;\nloop invariant x + m + 1 == n;\nloop invariant x + y == m + 1;\nloop invariant x + m + 1 == n;\nloop invariant x + y == m + 1;\nloop invariant x + m + 1 == n;\nloop invariant x + y == m + 1;\nloop invariant x + m + 1 == n;\nloop invariant x + y == m + 1;\nloop invariant x + m + 1 == n;\nloop invariant x + y == m + 1;\nloop invariant x + m + 1 == n;\nloop invariant x + y == m + 1;\nloop invariant x + m + 1 == n;\nloop invariant x + y == m + 1;\nloop invariant x + m + 1 == n;\nloop invariant x + y == m + 1;\nloop invariant x + m + 1 == n;\nloop invariant x + y == m + 1;\nloop invariant x + m + 1 == n;\nloop invariant x + y == m + 1;\nloop invariant x + m + 1 == n;\nloop invariant x + y == m + 1;\nloop invariant x + m + 1 == n;\nloop invariant x + y == m + 1;\nloop invariant x + m + 1 == n;\nloop invariant x + y == m + 1;\nloop invariant x + m + 1 == n;\nloop invariant x + y == m + 1;\nloop invariant x + m + 1 == n;\nloop invariant x + y == m + 1;\nloop invariant x + m + 1 == n;\nloop invariant x + y == m + 1;\nloop invariant x + m + 1 == n;\nloop invariant x + y == m + 1;\nloop invariant x + m + 1 == n;\nloop invariant x + y == m + 1;\nloop invariant x + m + 1 == n;\nloop invariant x + y == m + 1;\nloop invariant x + m + 1 == n;\nloop invariant x + y == m + 1;\nloop invariant x + m + 1 == n;\nloop invariant x + y == m + 1;\nloop invariant x + m + 1 == n;\nloop invariant x + y == m + 1;\nloop invariant x + m + 1 == n;\nloop invariant x + y == m + 1;\nloop invariant x + m + 1 == n;\nloop invariant x + y == m + 1;\nloop invariant x + m + 1 == n;\nloop invariant x + y == m + 1;\nloop invariant x + m + 1 == n;\nloop invariant x + y == m + 1;\nloop invariant x + m + 1 == n;\nloop invariant x + y == m + 1;\nloop invariant x + m + 1 == n;\nloop invariant x + y == m + 1;\nloop invariant x + m + 1 == n;\nloop invariant x + y == m + 1;\nloop invariant x + m + 1 == n;\nloop invariant x + y == m + 1;\nloop invariant x + m + 1 == n;\nloop invariant x + y == m + 1;\nloop invariant x + m + 1 == n;\nloop invariant x + y == m + 1;\nloop invariant x + m + 1 == n;\nloop invariant x + y == m + 1;\nloop invariant x + m + 1 == n;\nloop invariant x + y == m + 1;\nloop invariant x + m + 1 == n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nvoid main()\n{\n  int n = unknown1 (); \n  int m = unknown1 ();\n  if (n >= 0 && m >= 0 && m < n) {\n  int x=0; \n  int y=m;\n  /*@\nloop invariant i1: 0 <= x <= n;\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile(x<n) {\n    x++;\n    if(x>m) y++;\n  }\n  {;\n//@ assert(y==n);\n}\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= y <= n;\nloop invariant x + y == n;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y == n - x + 1;\nloop invariant y == m;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nvoid main()\n{\n  int n = unknown1 (); \n  int m = unknown1 ();\n  if (n >= 0 && m >= 0 && m < n) {\n  int x=0; \n  int y=m;\n  /*@\nloop invariant i1: 0 <= x <= n;\n\n\n\nloop invariant i5: x <= n;\nloop invariant i6: y >= 0;\n\n\n\n*/\nwhile(x<n) {\n    x++;\n    if(x>m) y++;\n  }\n  {;\n//@ assert(y==n);\n}\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant x <= m;\nloop invariant x <= n;\nloop invariant y <= m;\nloop invariant y <= n;\nloop invariant x + y == m + n;\nloop invariant x + y == m + n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nvoid main()\n{\n  int n = unknown1 (); \n  int m = unknown1 ();\n  if (n >= 0 && m >= 0 && m < n) {\n  int x=0; \n  int y=m;\n  /*@\n\nloop invariant i2: x <= n;\n\n\n\n*/\nwhile(x<n) {\n    x++;\n    if(x>m) y++;\n  }\n  {;\n//@ assert(y==n);\n}\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nvoid main()\n{\n  int n = unknown1 (); \n  int m = unknown1 ();\n  if (n >= 0 && m >= 0 && m < n) {\n  int x=0; \n  int y=m;\n  /*@\n\n*/\nwhile(x<n) {\n    x++;\n    if(x>m) y++;\n  }\n  {;\n//@ assert(y==n);\n}\n\n  }\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "loop invariant 0 <= x <= n is partially proven to be inductive.\nloop invariant x <= y <= n is partially proven to be inductive.\nloop invariant ! (x <= m) || (x == m + 1 && y == m + 1) is preserved but not established.\nloop invariant ! (x > m) || (x == n && y == m) is partially proven to be inductive.\nloop invariant 0 <= y <= n is partially proven to be inductive.\nloop invariant m <= x <= n is partially proven to be inductive.\nloop invariant y == x || y == x - 1 is partially proven to be inductive.\nloop invariant m <= y <= n is partially proven to be inductive.\nloop invariant x + y <= n + m is partially proven to be inductive.\nloop invariant x <= x + y is partially proven to be inductive.\nloop invariant y <= n - m is partially proven to be inductive.\nloop invariant x <= n is partially proven to be inductive.\nloop invariant y <= n is partially proven to be inductive.\nloop invariant x + y <= n is partially proven to be inductive.\nloop invariant y >= m is partially proven to be inductive.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant y >= 0 is partially proven to be inductive.\nloop invariant 0 <= y <= m is partially proven to be inductive.\nloop invariant y == m || y == m + 1 is partially proven to be inductive.\nloop invariant x == n || x == n - 1 is partially proven to be inductive.\nloop invariant x >= m is partially proven to be inductive.\nloop invariant x == y is partially proven to be inductive.\nloop invariant 0 <= m < n is partially proven to be inductive.\nloop invariant x + m <= y <= x + n is partially proven to be inductive.\nloop invariant x >= y is partially proven to be inductive.\nloop invariant y == m + (x - m) is partially proven to be inductive.\nloop invariant x <= y is partially proven to be inductive.\nloop invariant x - y >= m is partially proven to be inductive.\nloop invariant x - y <= n is partially proven to be inductive.\nloop invariant x < n ==> y <= n is partially proven to be inductive.\nloop invariant x < n ==> y >= m is partially proven to be inductive.\nloop invariant m < n ==> y == m is partially proven to be inductive.\nloop invariant x == n ==> y == n is partially proven to be inductive.\nloop invariant 0 <= n is partially proven to be inductive.\nloop invariant x - m <= y - m is partially proven to be inductive.\nloop invariant x - m <= n - m is partially proven to be inductive.\nloop invariant x - m <= n - m ==> y - m == x - m is partially proven to be inductive.\nloop invariant y - m == n - m ==> x - m == n - m is partially proven to be inductive.\nloop invariant x - m == n - m ==> y - m == n - m is partially proven to be inductive.\nloop invariant x + y == n is partially proven to be inductive.\nloop invariant x + m == n is partially proven to be inductive.\nloop invariant x + m + 1 == y is partially proven to be inductive.\nloop invariant x + y == m is partially proven to be inductive.\nloop invariant x + m + 1 == n is partially proven to be inductive.\nloop invariant x + y == m + 1 is partially proven to be inductive.\nloop invariant x + m + 1 == y + 1 is partially proven to be inductive.\nloop invariant x + y == n - 1 is partially proven to be inductive.\nloop invariant x + m + 1 == n - 1 is partially proven to be inductive.\nloop invariant x >= 1 is partially proven to be inductive.\nloop invariant y == n - x + 1 is partially proven to be inductive.\nloop invariant y == m is partially proven to be inductive.\nloop invariant x <= m is partially proven to be inductive.\nloop invariant y <= m is partially proven to be inductive.\nloop invariant x + y == m + n is partially proven to be inductive.\nAssertion y == n: Partially proven",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nvoid main()\n{\n  int n = unknown1 (); \n  int m = unknown1 ();\n  if (n >= 0 && m >= 0 && m < n) {\n  int x=0; \n  int y=m;\n  /*@\nloop invariant i1: 0 <= x <= n;\nloop invariant i2: x <= y <= n;\nloop invariant i3: ! (x <= m) || (x == m + 1 && y == m + 1);\nloop invariant i4: ! (x > m) || (x == n && y == m);\nloop invariant i5: 0 <= y <= n;\nloop invariant i6: m <= x <= n;\nloop invariant i7: y == x || y == x - 1;\nloop invariant i8: m <= y <= n;\nloop invariant i9: x + y <= n + m;\nloop invariant i10: x <= x + y;\nloop invariant i11: y <= n - m;\nloop invariant i12: x <= n;\nloop invariant i13: y <= n;\nloop invariant i14: x + y <= n;\nloop invariant i15: y >= m;\nloop invariant i16: x >= 0;\nloop invariant i17: y >= 0;\nloop invariant i18: 0 <= y <= m;\nloop invariant i19: y == m || y == m + 1;\nloop invariant i20: x == n || x == n - 1;\nloop invariant i21: x >= m;\nloop invariant i22: x == y;\nloop invariant i23: 0 <= m < n;\nloop invariant i24: x + m <= y <= x + n;\nloop invariant i25: x >= y;\nloop invariant i26: y == m + (x - m);\nloop invariant i27: x <= y;\nloop invariant i28: x - y >= m;\nloop invariant i29: x - y <= n;\nloop invariant i30: x < n ==> y <= n;\nloop invariant i31: x < n ==> y >= m;\nloop invariant i32: m < n ==> y == m;\nloop invariant i33: x == n ==> y == n;\nloop invariant i34: 0 <= n;\nloop invariant i35: x - m <= y - m;\nloop invariant i36: x - m <= n - m;\nloop invariant i37: x - m <= n - m ==> y - m == x - m;\nloop invariant i38: y - m == n - m ==> x - m == n - m;\nloop invariant i39: x - m == n - m ==> y - m == n - m;\nloop invariant i40: x + y == n;\nloop invariant i41: x + m == n;\nloop invariant i42: x + m + 1 == y;\nloop invariant i43: x + y == m;\nloop invariant i44: x + m + 1 == n;\nloop invariant i45: x + y == m + 1;\nloop invariant i46: x + m + 1 == y + 1;\nloop invariant i47: x + y == n - 1;\nloop invariant i48: x + m + 1 == n - 1;\nloop invariant i49: x >= 1;\nloop invariant i50: y == n - x + 1;\nloop invariant i51: y == m;\nloop invariant i52: x <= m;\nloop invariant i53: y <= m;\nloop invariant i54: x + y == m + n;\n*/\nwhile(x<n) {\n    x++;\n    if(x>m) y++;\n  }\n  {;\n//@ assert(y==n);\n}\n\n  }\n}",
        "combined_annotation_num_solver_calls": 25,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nvoid main()\n{\n  int n = unknown1 (); \n  int m = unknown1 ();\n  if (n >= 0 && m >= 0 && m < n) {\n  int x=0; \n  int y=m;\n  /*@\nloop invariant i1: 0 <= x <= n;\n\n\n\n\n\n\n\n\nloop invariant i10: x <= x + y;\n\nloop invariant i12: x <= n;\n\n\nloop invariant i15: y >= m;\nloop invariant i16: x >= 0;\nloop invariant i17: y >= 0;\n\n\n\n\n\nloop invariant i23: 0 <= m < n;\n\n\n\nloop invariant i27: x <= y;\n\nloop invariant i29: x - y <= n;\n\nloop invariant i31: x < n ==> y >= m;\n\n\nloop invariant i34: 0 <= n;\nloop invariant i35: x - m <= y - m;\nloop invariant i36: x - m <= n - m;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile(x<n) {\n    x++;\n    if(x>m) y++;\n  }\n  {;\n//@ assert(y==n);\n}\n\n  }\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/11.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/15.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/16.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/18.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/split.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/13.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/14.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/19.c"
        ],
        "skipped": [],
        "total": 113,
        "success_count": 95,
        "failure_count": 18,
        "success_rate": 0.8407079646017699
    }
}