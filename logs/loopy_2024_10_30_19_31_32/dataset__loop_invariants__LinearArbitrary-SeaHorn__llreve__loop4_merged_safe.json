{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nvoid main() {\n  int n = unknown();\n  int i1 = 0, i2 = 0;\n  int j1 = 0, j2 = 0;\n\n  while (1) {\n    if (i1 < n + n) {\n      j1++;\n      i1++;\n    }\n\n    if (i2 < n) {\n      j2 = j2 + 2;\n      i2++;\n    }\n  }\n  {;\n//@ assert(j1==j2);\n}\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant ( i1 <= 2 * n );\nloop invariant ( i2 <= n );\nloop invariant ( (i1 + i2) == (n + n) );\nloop invariant ( j1 <= j2 );\nloop invariant ( j2 <= (2 * n) );\nloop invariant ( j1 == (j2 + (i1 - i2)));\nloop invariant ( i1 == (n + n) ==> (j1 == j2) );\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i1 <= i2 <= n;loop invariant 0 <= j1 <= j2;loop invariant j1 == (i1 - i2) + i2;loop invariant j2 == (i2 * 2);loop invariant i1 >= n;loop invariant i2 >= n;loop invariant j1 >= j2;loop invariant j2 >= (i2 * 2);loop invariant i1 >= (n + n);loop invariant i2 >= n;loop invariant j1 >= j2;loop invariant j2 >= (i2 * 2);loop invariant i1 >= (n + n);loop invariant i2 >= n;loop invariant j1 >= j2;loop invariant j2 >= (i2 * 2);loop invariant i1 >= (n + n);loop invariant i2 >= n;loop invariant j1 >= j2;loop invariant j2 >= (i2 * 2);loop invariant i1 >= (n + n);loop invariant i2 >= n;loop invariant j1 >= j2;loop invariant j2 >= (i2 * 2);loop invariant i1 >= (n + n);loop invariant i2 >= n;loop invariant j1 >= j2;loop invariant j2 >= (i2 * 2);loop invariant i1 >= (n + n);loop invariant i2 >= n;loop invariant j1 >= j2;loop invariant j2 >= (i2 * 2);loop invariant i1 >= (n + n);loop invariant i2 >= n;loop invariant j1 >= j2;loop invariant j2 >= (i2 * 2);loop invariant i1 >= (n + n);loop invariant i2 >= n;loop invariant j1 >= j2;loop invariant j2 >= (i2 * 2);loop invariant i1 >= (n + n);loop invariant i2 >= n;loop invariant j1 >= j2;loop invariant j2 >= (i2 * 2);loop invariant i1 >= (n + n);loop invariant i2 >= n;loop invariant j1 >= j2;loop invariant j2 >= (i2 * 2);loop invariant i1 >= (n + n);loop invariant i2 >= n;loop invariant j1 >= j2;loop invariant j2 >= (i2 * 2);loop invariant i1 >= (n + n);loop invariant i2 >= n;loop invariant j1 >= j2;loop invariant j2 >= (i2 * 2);loop invariant i1 >= (n + n);loop invariant i2 >= n;loop invariant j1 >= j2;loop invariant j2 >= (i2 * 2);loop invariant i1 >= (n + n);loop invariant i2 >= n;loop invariant j1 >= j2;loop invariant j2 >= (i2 * 2);loop invariant i1 >= (n + n);loop invariant i2 >= n;loop invariant j1 >= j2;loop invariant j2 >= (i2 * 2);loop invariant i1 >= (n + n);loop invariant i2 >= n;loop invariant j1 >= j2;loop invariant j2 >= (i2 * 2);loop invariant i1 >= (n + n);loop invariant i2 >= n;loop invariant j1 >= j2;loop invariant j2 >= (i2 * 2);loop invariant i1 >= (n + n);loop invariant i2 >= n;loop invariant j1 >= j2;loop invariant j2 >= (i2 * 2);loop invariant i1 >= (n + n);loop invariant i2 >= n;loop invariant j1 >= j2;loop invariant j2 >= (i2 * 2);loop invariant i1 >= (n + n);loop invariant i2 >= n;loop invariant j1 >= j2;loop invariant j2 >= (i2 * 2);loop invariant i1 >= (n + n);loop invariant i2 >= n;loop invariant j1 >= j2;loop invariant j2 >= (i2 * 2);loop invariant i1 >= (n + n);loop invariant i2 >= n;loop invariant j1 >= j2;loop invariant j2 >= (i2 * 2);loop invariant i1 >= (n + n);loop invariant i2 >= n;loop invariant j1 >= j2;loop invariant j2 >= (i2 * 2);loop invariant i1 >= (n + n);loop invariant i2 >= n;loop invariant j1 >= j2;loop invariant j2 >= (i2 * 2);loop invariant i1 >= (n + n);loop invariant i2 >= n;loop invariant j1 >= j2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i1 <= n + n;\nloop invariant 0 <= i2 <= n;\nloop invariant 0 <= j1 <= (n + n) + n;\nloop invariant 0 <= j2 <= n * 2;\nloop invariant j1 >= j2;\nloop invariant i1 >= i2;\nloop invariant j1 == j2 ==> i1 == i2 + 1;\nloop invariant j1 == j2 ==> i1 == i2 + 2;\nloop invariant j1 == j2 ==> i1 == i2 + 3;\nloop invariant j1 == j2 ==> i1 == i2 + 4;\nloop invariant j1 == j2 ==> i1 == i2 + 5;\nloop invariant j1 == j2 ==> i1 == i2 + 6;\nloop invariant j1 == j2 ==> i1 == i2 + 7;\nloop invariant j1 == j2 ==> i1 == i2 + 8;\nloop invariant j1 == j2 ==> i1 == i2 + 9;\nloop invariant j1 == j2 ==> i1 == i2 + 10;\nloop invariant j1 == j2 ==> i1 == i2 + 11;\nloop invariant j1 == j2 ==> i1 == i2 + 12;\nloop invariant j1 == j2 ==> i1 == i2 + 13;\nloop invariant j1 == j2 ==> i1 == i2 + 14;\nloop invariant j1 == j2 ==> i1 == i2 + 15;\nloop invariant j1 == j2 ==> i1 == i2 + 16;\nloop invariant j1 == j2 ==> i1 == i2 + 17;\nloop invariant j1 == j2 ==> i1 == i2 + 18;\nloop invariant j1 == j2 ==> i1 == i2 + 19;\nloop invariant j1 == j2 ==> i1 == i2 + 20;\nloop invariant j1 == j2 ==> i1 == i2 + 21;\nloop invariant j1 == j2 ==> i1 == i2 + 22;\nloop invariant j1 == j2 ==> i1 == i2 + 23;\nloop invariant j1 == j2 ==> i1 == i2 + 24;\nloop invariant j1 == j2 ==> i1 == i2 + 25;\nloop invariant j1 == j2 ==> i1 == i2 + 26;\nloop invariant j1 == j2 ==> i1 == i2 + 27;\nloop invariant j1 == j2 ==> i1 == i2 + 28;\nloop invariant j1 == j2 ==> i1 == i2 + 29;\nloop invariant j1 == j2 ==> i1 == i2 + 30;\nloop invariant j1 == j2 ==> i1 == i2 + 31;\nloop invariant j1 == j2 ==> i1 == i2 + 32;\nloop invariant j1 == j2 ==> i1 == i2 + 33;\nloop invariant j1 == j2 ==> i1 == i2 + 34;\nloop invariant j1 == j2 ==> i1 == i2 + 35;\nloop invariant j1 == j2 ==> i1 == i2 + 36;\nloop invariant j1 == j2 ==> i1 == i2 + 37;\nloop invariant j1 == j2 ==> i1 == i2 + 38;\nloop invariant j1 == j2 ==> i1 == i2 + 39;\nloop invariant j1 == j2 ==> i1 == i2 + 40;\nloop invariant j1 == j2 ==> i1 == i2 + 41;\nloop invariant j1 == j2 ==> i1 == i2 + 42;\nloop invariant j1 == j2 ==> i1 == i2 + 43;\nloop invariant j1 == j2 ==> i1 == i2 + 44;\nloop invariant j1 == j2 ==> i1 == i2 + 45;\nloop invariant j1 == j2 ==> i1 == i2 + 46;\nloop invariant j1 == j2 ==> i1 == i2 + 47;\nloop invariant j1 == j2 ==> i1 == i2 + 48;\nloop invariant j1 == j2 ==> i1 == i2 + 49;\nloop invariant j1 == j2 ==> i1 == i2 + 50;\nloop invariant j1 == j2 ==> i1 == i2 + 51;\nloop invariant j1 == j2 ==> i1 == i2 + 52;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i1 <= 2 * n;\nloop invariant 0 <= i2 <= n;\nloop invariant 0 <= j1 <= 2 * n;\nloop invariant 0 <= j2 <= 2 * n;\nloop invariant j1 == j2 ==> i1 == n;\nloop invariant j1 == j2 ==> i2 == n;\nloop invariant j1 == j2 ==> i1 >= i2;\nloop invariant j1 == j2 ==> i1 <= i2;\nloop invariant j1 == j2 ==> i1 == i2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i1 + i2 <= 2 * n;\nloop invariant i1 + i2 >= n;\nloop invariant j1 + j2 >= n;\nloop invariant j1 + j2 <= 2 * n;\nloop invariant j1 <= j2;\nloop invariant i1 <= n + n;\nloop invariant i1 <= 2 * n;\nloop invariant i2 <= n;\nloop invariant j1 <= n + n;\nloop invariant j2 <= 2 * n;\nloop invariant i1 <= n + n;\nloop invariant i2 <= n;\nloop invariant j1 <= n + n;\nloop invariant j2 <= 2 * n;\nloop invariant 0 <= i1 <= n + n;\nloop invariant 0 <= i2 <= n;\nloop invariant 0 <= j1 <= n + n;\nloop invariant 0 <= j2 <= 2 * n;\nloop invariant 0 <= i1 + i2 <= 2 * n;\nloop invariant i1 + i2 >= n;\nloop invariant j1 + j2 >= n;\nloop invariant j1 + j2 <= 2 * n;\nloop invariant j1 <= j2;\nloop invariant i1 <= n + n;\nloop invariant i1 <= 2 * n;\nloop invariant i2 <= n;\nloop invariant j1 <= n + n;\nloop invariant j2 <= 2 * n;\n*/\n```",
            "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant i1 == 0;\nloop invariant i2 == 0;\nloop invariant j1 == 0;\nloop invariant j2 == 0;\nloop invariant n >= 0;\nloop invariant i1 <= 2 * n;\nloop invariant i2 <= n;\nloop invariant j1 >= 0;\nloop invariant j2 >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i1 <= 2 * n;\nloop invariant 0 <= j1 <= 2 * n;\nloop invariant 0 <= i2 <= n;\nloop invariant 0 <= j2 <= 2 * n;\nloop invariant i1 % 2 == j1 % 2;\nloop invariant i1 + i2 % 2 == j1 + j2 % 2;\nloop invariant i1 == j1 || i1 != j1;\nloop invariant i2 == j2 || i2 != j2;\nloop invariant i1 == i2 || i1 != i2;\nloop invariant j1 == j2 || j1 != j2;\nloop invariant i1 == n + n || i1 != n + n;\nloop invariant i2 == n || i2 != n;\nloop invariant j1 == j2 || j1 != j2;\nloop invariant j1 == j2 || j1 != j2;\nloop invariant i1 == i2 || i1 != i2;\nloop invariant j1 == j2 || j1 != j2;\nloop invariant i1 == n + n || i1 != n + n;\nloop invariant i2 == n || i2 != n;\nloop invariant j1 == j2 || j1 != j2;\nloop invariant j1 == j2 || j1 != j2;\nloop invariant i1 == i2 || i1 != i2;\nloop invariant j1 == j2 || j1 != j2;\nloop invariant i1 == n + n || i1 != n + n;\nloop invariant i2 == n || i2 != n;\nloop invariant j1 == j2 || j1 != j2;\nloop invariant j1 == j2 || j1 != j2;\nloop invariant i1 == i2 || i1 != i2;\nloop invariant j1 == j2 || j1 != j2;\nloop invariant i1 == n + n || i1 != n + n;\nloop invariant i2 == n || i2 != n;\nloop invariant j1 == j2 || j1 != j2;\nloop invariant j1 == j2 || j1 != j2;\nloop invariant i1 == i2 || i1 != i2;\nloop invariant j1 == j2 || j1 != j2;\nloop invariant i1 == n + n || i1 != n + n;\nloop invariant i2 == n || i2 != n;\nloop invariant j1 == j2 || j1 != j2;\nloop invariant j1 == j2 || j1 != j2;\nloop invariant i1 == i2 || i1 != i2;\nloop invariant j1 == j2 || j1 != j2;\nloop invariant i1 == n + n || i1 != n + n;\nloop invariant i2 == n || i2 != n;\nloop invariant j1 == j2 || j1 != j2;\nloop invariant j1 == j2 || j1 != j2;\nloop invariant i1 == i2 || i1 != i2;\nloop invariant j1 == j2 || j1 != j2;\nloop invariant i1 == n + n || i1 != n + n;\nloop invariant i2 == n || i2 != n;\nloop invariant j1 == j2 || j1 != j2;\nloop invariant j1 == j2 || j1 != j2;\nloop invariant i1 == i2 || i1 != i2;\nloop invariant j1 == j2 || j1 != j2;\nloop invariant i1 == n + n || i1 != n + n;\nloop invariant i2 == n || i2 != n;\nloop invariant j1 == j2 || j1 != j2;\nloop invariant j1 == j2 || j1 != j2;\nloop invariant i1 == i2 || i1 != i2;\nloop invariant j1 == j2 || j1 != j2;\nloop invariant i1 == n + n || i1 != n + n;\nloop invariant i2 == n || i2 != n;\nloop invariant j1 == j2 || j1 != j2;\nloop invariant j1 == j2 || j1 != j2;\nloop invariant i1 == i2 || i1 != i2;\nloop invariant j1 == j2 || j1 != j2;\nloop invariant i1 == n + n || i1 != n + n;\nloop invariant i2 == n || i2 != n;\nloop invariant j1 == j2 || j1 != j2;\nloop invariant j1 == j2 || j1 != j2;\nloop invariant i1 == i2 || i1 != i2;\nloop invariant j1 == j2 || j1 != j2;\nloop invariant i1 == n + n || i1 != n + n;\n*/\n```",
            "```\n/*@\nloop invariant i1 <= n + n;\nloop invariant 0 <= i2 <= n;\nloop invariant j1 <= j2;\nloop invariant i1 >= 0;\nloop invariant i2 >= 0;\nloop invariant j1 >= 0;\nloop invariant j2 >= 0;\nloop invariant j1 == j2 ==> i2 == n;\nloop invariant j2 == j1 + 2 * (n - i2) ==> i2 < n;\nloop invariant j1 == j2 ==> i1 == n + n;\nloop invariant j2 == j1 - 2 * (i2 - n) ==> i2 == n;\nloop invariant j2 == j1 + 2 * (n - i2) ==> i2 < n;\nloop invariant j2 == j1 + 2 * (n - i2) ==> i2 >= n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i1 <= n + n;\nloop invariant 0 <= i2 <= n;\nloop invariant 0 <= j1 <= n + n;\nloop invariant 0 <= j2 <= 2 * n;\nloop invariant i1 >= j1;\nloop invariant i2 >= j2;\nloop invariant i1 >= i2;\nloop invariant i2 >= j2;\nloop invariant i1 >= j2;\nloop invariant j1 == j2 ==> i1 == i2;\nloop invariant j1 == j2 ==> i1 == j2;\nloop invariant j1 == j2 ==> i2 == j2;\n*/\n```",
            "```\n/*@\nloop invariant i1 == 0;\nloop invariant i2 == 0;\nloop invariant j1 == 0;\nloop invariant j2 == 0;\nloop invariant i1 <= n + n;\nloop invariant i2 <= n;\nloop invariant j1 <= j2;\nloop invariant i1 <= i2 + n;\nloop invariant i2 <= i1 + n;\nloop invariant j1 <= i1 + i2;\nloop invariant j2 <= i1 + i2;\n*/\n```",
            "```\n/*@\nloop invariant i1 <= n + n;\nloop invariant i1 >= 0;\nloop invariant i2 <= n;\nloop invariant i2 >= 0;\nloop invariant j1 >= 0;\nloop invariant j2 >= 0;\nloop invariant j1 <= 2 * n;\nloop invariant j2 <= 2 * n;\nloop invariant j1 == j2;\n*/\n```",
            "```\n/*@\nloop invariant unknown() >= 0;\nloop invariant 0 <= i1 <= unknown() + unknown();\nloop invariant 0 <= i2 <= unknown();\nloop invariant 0 <= j1 <= unknown() + unknown();\nloop invariant 0 <= j2 <= 2 * unknown();\nloop invariant unknown() >= 0;\nloop invariant 0 <= i1 <= unknown() + unknown();\nloop invariant 0 <= i2 <= unknown();\nloop invariant 0 <= j1 <= unknown() + unknown();\nloop invariant 0 <= j2 <= 2 * unknown();\nloop invariant i1 >= i2;\nloop invariant j1 == j2;\nloop invariant j1 == j2;\nloop invariant unknown() >= 0;\nloop invariant 0 <= i1 <= unknown() + unknown();\nloop invariant 0 <= i2 <= unknown();\nloop invariant 0 <= j1 <= unknown() + unknown();\nloop invariant 0 <= j2 <= 2 * unknown();\nloop invariant i1 >= i2;\nloop invariant j1 == j2;\n*/\n```",
            "```\n/*@\nloop invariant i1 >= 0;\nloop invariant i2 >= 0;\nloop invariant j1 >= 0;\nloop invariant j2 >= 0;\nloop invariant i1 <= 2 * n;\nloop invariant i2 <= n;\nloop invariant j1 <= 2 * n;\nloop invariant j2 <= 2 * n;\nloop invariant j1 == j2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i1 <= 2 * n;\nloop invariant 0 <= i2 <= n;\nloop invariant j1 == j2 + (n - i2);\nloop invariant 0 <= j1 <= j2 + n;\nloop invariant j1 >= 0;\nloop invariant j2 >= 0;\n*/\n```",
            "```\n/*@\nloop invariant i1 <= n + n;\nloop invariant i2 <= n;\nloop invariant j1 <= j2 + 2 * i2;\nloop invariant j1 >= j2;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant ( i1 <= 2 * n );\nloop invariant ( i2 <= n );\nloop invariant ( (i1 + i2) == (n + n) );\nloop invariant ( j1 <= j2 );\nloop invariant ( j2 <= (2 * n) );\nloop invariant ( j1 == (j2 + (i1 - i2)));\nloop invariant ( i1 == (n + n) ==> (j1 == j2) );\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nvoid main() {\n  int n = unknown();\n  int i1 = 0, i2 = 0;\n  int j1 = 0, j2 = 0;\n\n  /*@\n\n\n\n\n\n\n\n*/\nwhile (1) {\n    if (i1 < n + n) {\n      j1++;\n      i1++;\n    }\n\n    if (i2 < n) {\n      j2 = j2 + 2;\n      i2++;\n    }\n  }\n  {;\n//@ assert(j1==j2);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i1 <= i2 <= n;loop invariant 0 <= j1 <= j2;loop invariant j1 == (i1 - i2) + i2;loop invariant j2 == (i2 * 2);loop invariant i1 >= n;loop invariant i2 >= n;loop invariant j1 >= j2;loop invariant j2 >= (i2 * 2);loop invariant i1 >= (n + n);loop invariant i2 >= n;loop invariant j1 >= j2;loop invariant j2 >= (i2 * 2);loop invariant i1 >= (n + n);loop invariant i2 >= n;loop invariant j1 >= j2;loop invariant j2 >= (i2 * 2);loop invariant i1 >= (n + n);loop invariant i2 >= n;loop invariant j1 >= j2;loop invariant j2 >= (i2 * 2);loop invariant i1 >= (n + n);loop invariant i2 >= n;loop invariant j1 >= j2;loop invariant j2 >= (i2 * 2);loop invariant i1 >= (n + n);loop invariant i2 >= n;loop invariant j1 >= j2;loop invariant j2 >= (i2 * 2);loop invariant i1 >= (n + n);loop invariant i2 >= n;loop invariant j1 >= j2;loop invariant j2 >= (i2 * 2);loop invariant i1 >= (n + n);loop invariant i2 >= n;loop invariant j1 >= j2;loop invariant j2 >= (i2 * 2);loop invariant i1 >= (n + n);loop invariant i2 >= n;loop invariant j1 >= j2;loop invariant j2 >= (i2 * 2);loop invariant i1 >= (n + n);loop invariant i2 >= n;loop invariant j1 >= j2;loop invariant j2 >= (i2 * 2);loop invariant i1 >= (n + n);loop invariant i2 >= n;loop invariant j1 >= j2;loop invariant j2 >= (i2 * 2);loop invariant i1 >= (n + n);loop invariant i2 >= n;loop invariant j1 >= j2;loop invariant j2 >= (i2 * 2);loop invariant i1 >= (n + n);loop invariant i2 >= n;loop invariant j1 >= j2;loop invariant j2 >= (i2 * 2);loop invariant i1 >= (n + n);loop invariant i2 >= n;loop invariant j1 >= j2;loop invariant j2 >= (i2 * 2);loop invariant i1 >= (n + n);loop invariant i2 >= n;loop invariant j1 >= j2;loop invariant j2 >= (i2 * 2);loop invariant i1 >= (n + n);loop invariant i2 >= n;loop invariant j1 >= j2;loop invariant j2 >= (i2 * 2);loop invariant i1 >= (n + n);loop invariant i2 >= n;loop invariant j1 >= j2;loop invariant j2 >= (i2 * 2);loop invariant i1 >= (n + n);loop invariant i2 >= n;loop invariant j1 >= j2;loop invariant j2 >= (i2 * 2);loop invariant i1 >= (n + n);loop invariant i2 >= n;loop invariant j1 >= j2;loop invariant j2 >= (i2 * 2);loop invariant i1 >= (n + n);loop invariant i2 >= n;loop invariant j1 >= j2;loop invariant j2 >= (i2 * 2);loop invariant i1 >= (n + n);loop invariant i2 >= n;loop invariant j1 >= j2;loop invariant j2 >= (i2 * 2);loop invariant i1 >= (n + n);loop invariant i2 >= n;loop invariant j1 >= j2;loop invariant j2 >= (i2 * 2);loop invariant i1 >= (n + n);loop invariant i2 >= n;loop invariant j1 >= j2;loop invariant j2 >= (i2 * 2);loop invariant i1 >= (n + n);loop invariant i2 >= n;loop invariant j1 >= j2;loop invariant j2 >= (i2 * 2);loop invariant i1 >= (n + n);loop invariant i2 >= n;loop invariant j1 >= j2;loop invariant j2 >= (i2 * 2);loop invariant i1 >= (n + n);loop invariant i2 >= n;loop invariant j1 >= j2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nvoid main() {\n  int n = unknown();\n  int i1 = 0, i2 = 0;\n  int j1 = 0, j2 = 0;\n\n  /*@\n\n*/\nwhile (1) {\n    if (i1 < n + n) {\n      j1++;\n      i1++;\n    }\n\n    if (i2 < n) {\n      j2 = j2 + 2;\n      i2++;\n    }\n  }\n  {;\n//@ assert(j1==j2);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 53,
                "annotations": "```\n/*@\nloop invariant 0 <= i1 <= n + n;\nloop invariant 0 <= i2 <= n;\nloop invariant 0 <= j1 <= (n + n) + n;\nloop invariant 0 <= j2 <= n * 2;\nloop invariant j1 >= j2;\nloop invariant i1 >= i2;\nloop invariant j1 == j2 ==> i1 == i2 + 1;\nloop invariant j1 == j2 ==> i1 == i2 + 2;\nloop invariant j1 == j2 ==> i1 == i2 + 3;\nloop invariant j1 == j2 ==> i1 == i2 + 4;\nloop invariant j1 == j2 ==> i1 == i2 + 5;\nloop invariant j1 == j2 ==> i1 == i2 + 6;\nloop invariant j1 == j2 ==> i1 == i2 + 7;\nloop invariant j1 == j2 ==> i1 == i2 + 8;\nloop invariant j1 == j2 ==> i1 == i2 + 9;\nloop invariant j1 == j2 ==> i1 == i2 + 10;\nloop invariant j1 == j2 ==> i1 == i2 + 11;\nloop invariant j1 == j2 ==> i1 == i2 + 12;\nloop invariant j1 == j2 ==> i1 == i2 + 13;\nloop invariant j1 == j2 ==> i1 == i2 + 14;\nloop invariant j1 == j2 ==> i1 == i2 + 15;\nloop invariant j1 == j2 ==> i1 == i2 + 16;\nloop invariant j1 == j2 ==> i1 == i2 + 17;\nloop invariant j1 == j2 ==> i1 == i2 + 18;\nloop invariant j1 == j2 ==> i1 == i2 + 19;\nloop invariant j1 == j2 ==> i1 == i2 + 20;\nloop invariant j1 == j2 ==> i1 == i2 + 21;\nloop invariant j1 == j2 ==> i1 == i2 + 22;\nloop invariant j1 == j2 ==> i1 == i2 + 23;\nloop invariant j1 == j2 ==> i1 == i2 + 24;\nloop invariant j1 == j2 ==> i1 == i2 + 25;\nloop invariant j1 == j2 ==> i1 == i2 + 26;\nloop invariant j1 == j2 ==> i1 == i2 + 27;\nloop invariant j1 == j2 ==> i1 == i2 + 28;\nloop invariant j1 == j2 ==> i1 == i2 + 29;\nloop invariant j1 == j2 ==> i1 == i2 + 30;\nloop invariant j1 == j2 ==> i1 == i2 + 31;\nloop invariant j1 == j2 ==> i1 == i2 + 32;\nloop invariant j1 == j2 ==> i1 == i2 + 33;\nloop invariant j1 == j2 ==> i1 == i2 + 34;\nloop invariant j1 == j2 ==> i1 == i2 + 35;\nloop invariant j1 == j2 ==> i1 == i2 + 36;\nloop invariant j1 == j2 ==> i1 == i2 + 37;\nloop invariant j1 == j2 ==> i1 == i2 + 38;\nloop invariant j1 == j2 ==> i1 == i2 + 39;\nloop invariant j1 == j2 ==> i1 == i2 + 40;\nloop invariant j1 == j2 ==> i1 == i2 + 41;\nloop invariant j1 == j2 ==> i1 == i2 + 42;\nloop invariant j1 == j2 ==> i1 == i2 + 43;\nloop invariant j1 == j2 ==> i1 == i2 + 44;\nloop invariant j1 == j2 ==> i1 == i2 + 45;\nloop invariant j1 == j2 ==> i1 == i2 + 46;\nloop invariant j1 == j2 ==> i1 == i2 + 47;\nloop invariant j1 == j2 ==> i1 == i2 + 48;\nloop invariant j1 == j2 ==> i1 == i2 + 49;\nloop invariant j1 == j2 ==> i1 == i2 + 50;\nloop invariant j1 == j2 ==> i1 == i2 + 51;\nloop invariant j1 == j2 ==> i1 == i2 + 52;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nvoid main() {\n  int n = unknown();\n  int i1 = 0, i2 = 0;\n  int j1 = 0, j2 = 0;\n\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (1) {\n    if (i1 < n + n) {\n      j1++;\n      i1++;\n    }\n\n    if (i2 < n) {\n      j2 = j2 + 2;\n      i2++;\n    }\n  }\n  {;\n//@ assert(j1==j2);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i1 <= 2 * n;\nloop invariant 0 <= i2 <= n;\nloop invariant 0 <= j1 <= 2 * n;\nloop invariant 0 <= j2 <= 2 * n;\nloop invariant j1 == j2 ==> i1 == n;\nloop invariant j1 == j2 ==> i2 == n;\nloop invariant j1 == j2 ==> i1 >= i2;\nloop invariant j1 == j2 ==> i1 <= i2;\nloop invariant j1 == j2 ==> i1 == i2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nvoid main() {\n  int n = unknown();\n  int i1 = 0, i2 = 0;\n  int j1 = 0, j2 = 0;\n\n  /*@\n\n\n\n\n\n\n\n\n\n*/\nwhile (1) {\n    if (i1 < n + n) {\n      j1++;\n      i1++;\n    }\n\n    if (i2 < n) {\n      j2 = j2 + 2;\n      i2++;\n    }\n  }\n  {;\n//@ assert(j1==j2);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= i1 + i2 <= 2 * n;\nloop invariant i1 + i2 >= n;\nloop invariant j1 + j2 >= n;\nloop invariant j1 + j2 <= 2 * n;\nloop invariant j1 <= j2;\nloop invariant i1 <= n + n;\nloop invariant i1 <= 2 * n;\nloop invariant i2 <= n;\nloop invariant j1 <= n + n;\nloop invariant j2 <= 2 * n;\nloop invariant i1 <= n + n;\nloop invariant i2 <= n;\nloop invariant j1 <= n + n;\nloop invariant j2 <= 2 * n;\nloop invariant 0 <= i1 <= n + n;\nloop invariant 0 <= i2 <= n;\nloop invariant 0 <= j1 <= n + n;\nloop invariant 0 <= j2 <= 2 * n;\nloop invariant 0 <= i1 + i2 <= 2 * n;\nloop invariant i1 + i2 >= n;\nloop invariant j1 + j2 >= n;\nloop invariant j1 + j2 <= 2 * n;\nloop invariant j1 <= j2;\nloop invariant i1 <= n + n;\nloop invariant i1 <= 2 * n;\nloop invariant i2 <= n;\nloop invariant j1 <= n + n;\nloop invariant j2 <= 2 * n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nvoid main() {\n  int n = unknown();\n  int i1 = 0, i2 = 0;\n  int j1 = 0, j2 = 0;\n\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (1) {\n    if (i1 < n + n) {\n      j1++;\n      i1++;\n    }\n\n    if (i2 < n) {\n      j2 = j2 + 2;\n      i2++;\n    }\n  }\n  {;\n//@ assert(j1==j2);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant i1 == 0;\nloop invariant i2 == 0;\nloop invariant j1 == 0;\nloop invariant j2 == 0;\nloop invariant n >= 0;\nloop invariant i1 <= 2 * n;\nloop invariant i2 <= n;\nloop invariant j1 >= 0;\nloop invariant j2 >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nvoid main() {\n  int n = unknown();\n  int i1 = 0, i2 = 0;\n  int j1 = 0, j2 = 0;\n\n  /*@\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i12: j1 >= 0;\nloop invariant i13: j2 >= 0;\n*/\nwhile (1) {\n    if (i1 < n + n) {\n      j1++;\n      i1++;\n    }\n\n    if (i2 < n) {\n      j2 = j2 + 2;\n      i2++;\n    }\n  }\n  {;\n//@ assert(j1==j2);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i1 <= 2 * n;\nloop invariant 0 <= j1 <= 2 * n;\nloop invariant 0 <= i2 <= n;\nloop invariant 0 <= j2 <= 2 * n;\nloop invariant i1 % 2 == j1 % 2;\nloop invariant i1 + i2 % 2 == j1 + j2 % 2;\nloop invariant i1 == j1 || i1 != j1;\nloop invariant i2 == j2 || i2 != j2;\nloop invariant i1 == i2 || i1 != i2;\nloop invariant j1 == j2 || j1 != j2;\nloop invariant i1 == n + n || i1 != n + n;\nloop invariant i2 == n || i2 != n;\nloop invariant j1 == j2 || j1 != j2;\nloop invariant j1 == j2 || j1 != j2;\nloop invariant i1 == i2 || i1 != i2;\nloop invariant j1 == j2 || j1 != j2;\nloop invariant i1 == n + n || i1 != n + n;\nloop invariant i2 == n || i2 != n;\nloop invariant j1 == j2 || j1 != j2;\nloop invariant j1 == j2 || j1 != j2;\nloop invariant i1 == i2 || i1 != i2;\nloop invariant j1 == j2 || j1 != j2;\nloop invariant i1 == n + n || i1 != n + n;\nloop invariant i2 == n || i2 != n;\nloop invariant j1 == j2 || j1 != j2;\nloop invariant j1 == j2 || j1 != j2;\nloop invariant i1 == i2 || i1 != i2;\nloop invariant j1 == j2 || j1 != j2;\nloop invariant i1 == n + n || i1 != n + n;\nloop invariant i2 == n || i2 != n;\nloop invariant j1 == j2 || j1 != j2;\nloop invariant j1 == j2 || j1 != j2;\nloop invariant i1 == i2 || i1 != i2;\nloop invariant j1 == j2 || j1 != j2;\nloop invariant i1 == n + n || i1 != n + n;\nloop invariant i2 == n || i2 != n;\nloop invariant j1 == j2 || j1 != j2;\nloop invariant j1 == j2 || j1 != j2;\nloop invariant i1 == i2 || i1 != i2;\nloop invariant j1 == j2 || j1 != j2;\nloop invariant i1 == n + n || i1 != n + n;\nloop invariant i2 == n || i2 != n;\nloop invariant j1 == j2 || j1 != j2;\nloop invariant j1 == j2 || j1 != j2;\nloop invariant i1 == i2 || i1 != i2;\nloop invariant j1 == j2 || j1 != j2;\nloop invariant i1 == n + n || i1 != n + n;\nloop invariant i2 == n || i2 != n;\nloop invariant j1 == j2 || j1 != j2;\nloop invariant j1 == j2 || j1 != j2;\nloop invariant i1 == i2 || i1 != i2;\nloop invariant j1 == j2 || j1 != j2;\nloop invariant i1 == n + n || i1 != n + n;\nloop invariant i2 == n || i2 != n;\nloop invariant j1 == j2 || j1 != j2;\nloop invariant j1 == j2 || j1 != j2;\nloop invariant i1 == i2 || i1 != i2;\nloop invariant j1 == j2 || j1 != j2;\nloop invariant i1 == n + n || i1 != n + n;\nloop invariant i2 == n || i2 != n;\nloop invariant j1 == j2 || j1 != j2;\nloop invariant j1 == j2 || j1 != j2;\nloop invariant i1 == i2 || i1 != i2;\nloop invariant j1 == j2 || j1 != j2;\nloop invariant i1 == n + n || i1 != n + n;\nloop invariant i2 == n || i2 != n;\nloop invariant j1 == j2 || j1 != j2;\nloop invariant j1 == j2 || j1 != j2;\nloop invariant i1 == i2 || i1 != i2;\nloop invariant j1 == j2 || j1 != j2;\nloop invariant i1 == n + n || i1 != n + n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nvoid main() {\n  int n = unknown();\n  int i1 = 0, i2 = 0;\n  int j1 = 0, j2 = 0;\n\n  /*@\n\n\n\n\n\n\nloop invariant i7: i1 == j1 || i1 != j1;\nloop invariant i8: i2 == j2 || i2 != j2;\nloop invariant i9: i1 == i2 || i1 != i2;\nloop invariant i10: j1 == j2 || j1 != j2;\nloop invariant i11: i1 == n + n || i1 != n + n;\nloop invariant i12: i2 == n || i2 != n;\n*/\nwhile (1) {\n    if (i1 < n + n) {\n      j1++;\n      i1++;\n    }\n\n    if (i2 < n) {\n      j2 = j2 + 2;\n      i2++;\n    }\n  }\n  {;\n//@ assert(j1==j2);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant i1 <= n + n;\nloop invariant 0 <= i2 <= n;\nloop invariant j1 <= j2;\nloop invariant i1 >= 0;\nloop invariant i2 >= 0;\nloop invariant j1 >= 0;\nloop invariant j2 >= 0;\nloop invariant j1 == j2 ==> i2 == n;\nloop invariant j2 == j1 + 2 * (n - i2) ==> i2 < n;\nloop invariant j1 == j2 ==> i1 == n + n;\nloop invariant j2 == j1 - 2 * (i2 - n) ==> i2 == n;\nloop invariant j2 == j1 + 2 * (n - i2) ==> i2 < n;\nloop invariant j2 == j1 + 2 * (n - i2) ==> i2 >= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nvoid main() {\n  int n = unknown();\n  int i1 = 0, i2 = 0;\n  int j1 = 0, j2 = 0;\n\n  /*@\n\n\n\nloop invariant i4: i1 >= 0;\nloop invariant i5: i2 >= 0;\nloop invariant i6: j1 >= 0;\nloop invariant i7: j2 >= 0;\n\n\n\n\n\n*/\nwhile (1) {\n    if (i1 < n + n) {\n      j1++;\n      i1++;\n    }\n\n    if (i2 < n) {\n      j2 = j2 + 2;\n      i2++;\n    }\n  }\n  {;\n//@ assert(j1==j2);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i1 <= n + n;\nloop invariant 0 <= i2 <= n;\nloop invariant 0 <= j1 <= n + n;\nloop invariant 0 <= j2 <= 2 * n;\nloop invariant i1 >= j1;\nloop invariant i2 >= j2;\nloop invariant i1 >= i2;\nloop invariant i2 >= j2;\nloop invariant i1 >= j2;\nloop invariant j1 == j2 ==> i1 == i2;\nloop invariant j1 == j2 ==> i1 == j2;\nloop invariant j1 == j2 ==> i2 == j2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nvoid main() {\n  int n = unknown();\n  int i1 = 0, i2 = 0;\n  int j1 = 0, j2 = 0;\n\n  /*@\n\n\n\n\nloop invariant i5: i1 >= j1;\n\n\n\n\n\n\n*/\nwhile (1) {\n    if (i1 < n + n) {\n      j1++;\n      i1++;\n    }\n\n    if (i2 < n) {\n      j2 = j2 + 2;\n      i2++;\n    }\n  }\n  {;\n//@ assert(j1==j2);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant i1 == 0;\nloop invariant i2 == 0;\nloop invariant j1 == 0;\nloop invariant j2 == 0;\nloop invariant i1 <= n + n;\nloop invariant i2 <= n;\nloop invariant j1 <= j2;\nloop invariant i1 <= i2 + n;\nloop invariant i2 <= i1 + n;\nloop invariant j1 <= i1 + i2;\nloop invariant j2 <= i1 + i2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nvoid main() {\n  int n = unknown();\n  int i1 = 0, i2 = 0;\n  int j1 = 0, j2 = 0;\n\n  /*@\n\n\n\n\n\n\n\n\n\nloop invariant i10: j1 <= i1 + i2;\n\n*/\nwhile (1) {\n    if (i1 < n + n) {\n      j1++;\n      i1++;\n    }\n\n    if (i2 < n) {\n      j2 = j2 + 2;\n      i2++;\n    }\n  }\n  {;\n//@ assert(j1==j2);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant i1 <= n + n;\nloop invariant i1 >= 0;\nloop invariant i2 <= n;\nloop invariant i2 >= 0;\nloop invariant j1 >= 0;\nloop invariant j2 >= 0;\nloop invariant j1 <= 2 * n;\nloop invariant j2 <= 2 * n;\nloop invariant j1 == j2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nvoid main() {\n  int n = unknown();\n  int i1 = 0, i2 = 0;\n  int j1 = 0, j2 = 0;\n\n  /*@\n\nloop invariant i2: i1 >= 0;\n\nloop invariant i4: i2 >= 0;\nloop invariant i5: j1 >= 0;\nloop invariant i6: j2 >= 0;\n\n\n\n*/\nwhile (1) {\n    if (i1 < n + n) {\n      j1++;\n      i1++;\n    }\n\n    if (i2 < n) {\n      j2 = j2 + 2;\n      i2++;\n    }\n  }\n  {;\n//@ assert(j1==j2);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant unknown() >= 0;\nloop invariant 0 <= i1 <= unknown() + unknown();\nloop invariant 0 <= i2 <= unknown();\nloop invariant 0 <= j1 <= unknown() + unknown();\nloop invariant 0 <= j2 <= 2 * unknown();\nloop invariant unknown() >= 0;\nloop invariant 0 <= i1 <= unknown() + unknown();\nloop invariant 0 <= i2 <= unknown();\nloop invariant 0 <= j1 <= unknown() + unknown();\nloop invariant 0 <= j2 <= 2 * unknown();\nloop invariant i1 >= i2;\nloop invariant j1 == j2;\nloop invariant j1 == j2;\nloop invariant unknown() >= 0;\nloop invariant 0 <= i1 <= unknown() + unknown();\nloop invariant 0 <= i2 <= unknown();\nloop invariant 0 <= j1 <= unknown() + unknown();\nloop invariant 0 <= j2 <= 2 * unknown();\nloop invariant i1 >= i2;\nloop invariant j1 == j2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nvoid main() {\n  int n = unknown();\n  int i1 = 0, i2 = 0;\n  int j1 = 0, j2 = 0;\n\n  /*@\n\n\n\n\n\n\n\n*/\nwhile (1) {\n    if (i1 < n + n) {\n      j1++;\n      i1++;\n    }\n\n    if (i2 < n) {\n      j2 = j2 + 2;\n      i2++;\n    }\n  }\n  {;\n//@ assert(j1==j2);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant i1 >= 0;\nloop invariant i2 >= 0;\nloop invariant j1 >= 0;\nloop invariant j2 >= 0;\nloop invariant i1 <= 2 * n;\nloop invariant i2 <= n;\nloop invariant j1 <= 2 * n;\nloop invariant j2 <= 2 * n;\nloop invariant j1 == j2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nvoid main() {\n  int n = unknown();\n  int i1 = 0, i2 = 0;\n  int j1 = 0, j2 = 0;\n\n  /*@\nloop invariant i1: i1 >= 0;\nloop invariant i2: i2 >= 0;\nloop invariant i3: j1 >= 0;\nloop invariant i4: j2 >= 0;\n\n\n\n\n\n*/\nwhile (1) {\n    if (i1 < n + n) {\n      j1++;\n      i1++;\n    }\n\n    if (i2 < n) {\n      j2 = j2 + 2;\n      i2++;\n    }\n  }\n  {;\n//@ assert(j1==j2);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i1 <= 2 * n;\nloop invariant 0 <= i2 <= n;\nloop invariant j1 == j2 + (n - i2);\nloop invariant 0 <= j1 <= j2 + n;\nloop invariant j1 >= 0;\nloop invariant j2 >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nvoid main() {\n  int n = unknown();\n  int i1 = 0, i2 = 0;\n  int j1 = 0, j2 = 0;\n\n  /*@\n\n\n\n\nloop invariant i5: j1 >= 0;\nloop invariant i6: j2 >= 0;\n*/\nwhile (1) {\n    if (i1 < n + n) {\n      j1++;\n      i1++;\n    }\n\n    if (i2 < n) {\n      j2 = j2 + 2;\n      i2++;\n    }\n  }\n  {;\n//@ assert(j1==j2);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant i1 <= n + n;\nloop invariant i2 <= n;\nloop invariant j1 <= j2 + 2 * i2;\nloop invariant j1 >= j2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nvoid main() {\n  int n = unknown();\n  int i1 = 0, i2 = 0;\n  int j1 = 0, j2 = 0;\n\n  /*@\n\n\n\n\n*/\nwhile (1) {\n    if (i1 < n + n) {\n      j1++;\n      i1++;\n    }\n\n    if (i2 < n) {\n      j2 = j2 + 2;\n      i2++;\n    }\n  }\n  {;\n//@ assert(j1==j2);\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 136: unexpected token ')'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nvoid main() {\n  int n = unknown();\n  int i1 = 0, i2 = 0;\n  int j1 = 0, j2 = 0;\n\n  /*@\nloop invariant i1: ( i1 <= 2 * n );\nloop invariant i2: ( i2 <= n );\nloop invariant i3: ( (i1 + i2) == (n + n) );\nloop invariant i4: ( j1 <= j2 );\nloop invariant i5: ( j2 <= (2 * n) );\nloop invariant i6: ( j1 == (j2 + (i1 - i2)));\nloop invariant i7: ( i1 == (n + n) ==> (j1 == j2) );\nloop invariant i8: 0 <= i1 <= i2 <= n;loop invariant 0 <= j1 <= j2;loop invariant j1 == (i1 - i2) + i2;loop invariant j2 == (i2 * 2);loop invariant i1 >= n;loop invariant i2 >= n;loop invariant j1 >= j2;loop invariant j2 >= (i2 * 2);loop invariant i1 >= (n + n);loop invariant i2 >= n;loop invariant j1 >= j2;loop invariant j2 >= (i2 * 2);loop invariant i1 >= (n + n);loop invariant i2 >= n;loop invariant j1 >= j2;loop invariant j2 >= (i2 * 2);loop invariant i1 >= (n + n);loop invariant i2 >= n;loop invariant j1 >= j2;loop invariant j2 >= (i2 * 2);loop invariant i1 >= (n + n);loop invariant i2 >= n;loop invariant j1 >= j2;loop invariant j2 >= (i2 * 2);loop invariant i1 >= (n + n);loop invariant i2 >= n;loop invariant j1 >= j2;loop invariant j2 >= (i2 * 2);loop invariant i1 >= (n + n);loop invariant i2 >= n;loop invariant j1 >= j2;loop invariant j2 >= (i2 * 2);loop invariant i1 >= (n + n);loop invariant i2 >= n;loop invariant j1 >= j2;loop invariant j2 >= (i2 * 2);loop invariant i1 >= (n + n);loop invariant i2 >= n;loop invariant j1 >= j2;loop invariant j2 >= (i2 * 2);loop invariant i1 >= (n + n);loop invariant i2 >= n;loop invariant j1 >= j2;loop invariant j2 >= (i2 * 2);loop invariant i1 >= (n + n);loop invariant i2 >= n;loop invariant j1 >= j2;loop invariant j2 >= (i2 * 2);loop invariant i1 >= (n + n);loop invariant i2 >= n;loop invariant j1 >= j2;loop invariant j2 >= (i2 * 2);loop invariant i1 >= (n + n);loop invariant i2 >= n;loop invariant j1 >= j2;loop invariant j2 >= (i2 * 2);loop invariant i1 >= (n + n);loop invariant i2 >= n;loop invariant j1 >= j2;loop invariant j2 >= (i2 * 2);loop invariant i1 >= (n + n);loop invariant i2 >= n;loop invariant j1 >= j2;loop invariant j2 >= (i2 * 2);loop invariant i1 >= (n + n);loop invariant i2 >= n;loop invariant j1 >= j2;loop invariant j2 >= (i2 * 2);loop invariant i1 >= (n + n);loop invariant i2 >= n;loop invariant j1 >= j2;loop invariant j2 >= (i2 * 2);loop invariant i1 >= (n + n);loop invariant i2 >= n;loop invariant j1 >= j2;loop invariant j2 >= (i2 * 2);loop invariant i1 >= (n + n);loop invariant i2 >= n;loop invariant j1 >= j2;loop invariant j2 >= (i2 * 2);loop invariant i1 >= (n + n);loop invariant i2 >= n;loop invariant j1 >= j2;loop invariant j2 >= (i2 * 2);loop invariant i1 >= (n + n);loop invariant i2 >= n;loop invariant j1 >= j2;loop invariant j2 >= (i2 * 2);loop invariant i1 >= (n + n);loop invariant i2 >= n;loop invariant j1 >= j2;loop invariant j2 >= (i2 * 2);loop invariant i1 >= (n + n);loop invariant i2 >= n;loop invariant j1 >= j2;loop invariant j2 >= (i2 * 2);loop invariant i1 >= (n + n);loop invariant i2 >= n;loop invariant j1 >= j2;loop invariant j2 >= (i2 * 2);loop invariant i1 >= (n + n);loop invariant i2 >= n;loop invariant j1 >= j2;loop invariant j2 >= (i2 * 2);loop invariant i1 >= (n + n);loop invariant i2 >= n;loop invariant j1 >= j2;\nloop invariant i9: 0 <= i1 <= n + n;\nloop invariant i10: 0 <= i2 <= n;\nloop invariant i11: 0 <= j1 <= (n + n) + n;\nloop invariant i12: 0 <= j2 <= n * 2;\nloop invariant i13: j1 >= j2;\nloop invariant i14: i1 >= i2;\nloop invariant i15: j1 == j2 ==> i1 == i2 + 1;\nloop invariant i16: j1 == j2 ==> i1 == i2 + 2;\nloop invariant i17: j1 == j2 ==> i1 == i2 + 3;\nloop invariant i18: j1 == j2 ==> i1 == i2 + 4;\nloop invariant i19: j1 == j2 ==> i1 == i2 + 5;\nloop invariant i20: j1 == j2 ==> i1 == i2 + 6;\nloop invariant i21: j1 == j2 ==> i1 == i2 + 7;\nloop invariant i22: j1 == j2 ==> i1 == i2 + 8;\nloop invariant i23: j1 == j2 ==> i1 == i2 + 9;\nloop invariant i24: j1 == j2 ==> i1 == i2 + 10;\nloop invariant i25: j1 == j2 ==> i1 == i2 + 11;\nloop invariant i26: j1 == j2 ==> i1 == i2 + 12;\nloop invariant i27: j1 == j2 ==> i1 == i2 + 13;\nloop invariant i28: j1 == j2 ==> i1 == i2 + 14;\nloop invariant i29: j1 == j2 ==> i1 == i2 + 15;\nloop invariant i30: j1 == j2 ==> i1 == i2 + 16;\nloop invariant i31: j1 == j2 ==> i1 == i2 + 17;\nloop invariant i32: j1 == j2 ==> i1 == i2 + 18;\nloop invariant i33: j1 == j2 ==> i1 == i2 + 19;\nloop invariant i34: j1 == j2 ==> i1 == i2 + 20;\nloop invariant i35: j1 == j2 ==> i1 == i2 + 21;\nloop invariant i36: j1 == j2 ==> i1 == i2 + 22;\nloop invariant i37: j1 == j2 ==> i1 == i2 + 23;\nloop invariant i38: j1 == j2 ==> i1 == i2 + 24;\nloop invariant i39: j1 == j2 ==> i1 == i2 + 25;\nloop invariant i40: j1 == j2 ==> i1 == i2 + 26;\nloop invariant i41: j1 == j2 ==> i1 == i2 + 27;\nloop invariant i42: j1 == j2 ==> i1 == i2 + 28;\nloop invariant i43: j1 == j2 ==> i1 == i2 + 29;\nloop invariant i44: j1 == j2 ==> i1 == i2 + 30;\nloop invariant i45: j1 == j2 ==> i1 == i2 + 31;\nloop invariant i46: j1 == j2 ==> i1 == i2 + 32;\nloop invariant i47: j1 == j2 ==> i1 == i2 + 33;\nloop invariant i48: j1 == j2 ==> i1 == i2 + 34;\nloop invariant i49: j1 == j2 ==> i1 == i2 + 35;\nloop invariant i50: j1 == j2 ==> i1 == i2 + 36;\nloop invariant i51: j1 == j2 ==> i1 == i2 + 37;\nloop invariant i52: j1 == j2 ==> i1 == i2 + 38;\nloop invariant i53: j1 == j2 ==> i1 == i2 + 39;\nloop invariant i54: j1 == j2 ==> i1 == i2 + 40;\nloop invariant i55: j1 == j2 ==> i1 == i2 + 41;\nloop invariant i56: j1 == j2 ==> i1 == i2 + 42;\nloop invariant i57: j1 == j2 ==> i1 == i2 + 43;\nloop invariant i58: j1 == j2 ==> i1 == i2 + 44;\nloop invariant i59: j1 == j2 ==> i1 == i2 + 45;\nloop invariant i60: j1 == j2 ==> i1 == i2 + 46;\nloop invariant i61: j1 == j2 ==> i1 == i2 + 47;\nloop invariant i62: j1 == j2 ==> i1 == i2 + 48;\nloop invariant i63: j1 == j2 ==> i1 == i2 + 49;\nloop invariant i64: j1 == j2 ==> i1 == i2 + 50;\nloop invariant i65: j1 == j2 ==> i1 == i2 + 51;\nloop invariant i66: j1 == j2 ==> i1 == i2 + 52;\nloop invariant i67: 0 <= i1 <= 2 * n;\nloop invariant i68: 0 <= j1 <= 2 * n;\nloop invariant i69: 0 <= j2 <= 2 * n;\nloop invariant i70: j1 == j2 ==> i1 == n;\nloop invariant i71: j1 == j2 ==> i2 == n;\nloop invariant i72: j1 == j2 ==> i1 >= i2;\nloop invariant i73: j1 == j2 ==> i1 <= i2;\nloop invariant i74: j1 == j2 ==> i1 == i2;\nloop invariant i75: 0 <= i1 + i2 <= 2 * n;\nloop invariant i76: i1 + i2 >= n;\nloop invariant i77: j1 + j2 >= n;\nloop invariant i78: j1 + j2 <= 2 * n;\nloop invariant i79: j1 <= j2;\nloop invariant i80: i1 <= n + n;\nloop invariant i81: i1 <= 2 * n;\nloop invariant i82: i2 <= n;\nloop invariant i83: j1 <= n + n;\nloop invariant i84: j2 <= 2 * n;\nloop invariant i85: 0 <= j1 <= n + n;\nloop invariant i86: i1;\nloop invariant i87: i2;\nloop invariant i88: 0 <= y <= 100000;\nloop invariant i89: x >= (1 + (y - 1) * y / 2);\nloop invariant i90: i1 == 0;\nloop invariant i91: i2 == 0;\nloop invariant i92: j1 == 0;\nloop invariant i93: j2 == 0;\nloop invariant i94: n >= 0;\nloop invariant i95: j1 >= 0;\nloop invariant i96: j2 >= 0;\nloop invariant i97: i1 % 2 == j1 % 2;\nloop invariant i98: i1 + i2 % 2 == j1 + j2 % 2;\nloop invariant i99: i1 == j1 || i1 != j1;\nloop invariant i100: i2 == j2 || i2 != j2;\nloop invariant i101: i1 == i2 || i1 != i2;\nloop invariant i102: j1 == j2 || j1 != j2;\nloop invariant i103: i1 == n + n || i1 != n + n;\nloop invariant i104: i2 == n || i2 != n;\nloop invariant i105: i1 >= 0;\nloop invariant i106: i2 >= 0;\nloop invariant i107: j2 == j1 + 2 * (n - i2) ==> i2 < n;\nloop invariant i108: j1 == j2 ==> i1 == n + n;\nloop invariant i109: j2 == j1 - 2 * (i2 - n) ==> i2 == n;\nloop invariant i110: j2 == j1 + 2 * (n - i2) ==> i2 >= n;\nloop invariant i111: i1 >= j1;\nloop invariant i112: i2 >= j2;\nloop invariant i113: i1 >= j2;\nloop invariant i114: j1 == j2 ==> i1 == j2;\nloop invariant i115: j1 == j2 ==> i2 == j2;\nloop invariant i116: i1 <= i2 + n;\nloop invariant i117: i2 <= i1 + n;\nloop invariant i118: j1 <= i1 + i2;\nloop invariant i119: j2 <= i1 + i2;\nloop invariant i120: j1 <= 2 * n;\nloop invariant i121: j1 == j2;\nloop invariant i122: unknown() >= 0;\nloop invariant i123: 0 <= i1 <= unknown() + unknown();\nloop invariant i124: 0 <= i2 <= unknown();\nloop invariant i125: 0 <= j1 <= unknown() + unknown();\nloop invariant i126: 0 <= j2 <= 2 * unknown();\nloop invariant i127: j1 == j2 + (n - i2);\nloop invariant i128: 0 <= j1 <= j2 + n;\nloop invariant i129: j1 <= j2 + 2 * i2;\n*/\nwhile (1) {\n    if (i1 < n + n) {\n      j1++;\n      i1++;\n    }\n\n    if (i2 < n) {\n      j2 = j2 + 2;\n      i2++;\n    }\n  }\n  {;\n//@ assert(j1==j2);\n}\n\n}",
        "combined_annotation_num_solver_calls": 77,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nvoid main() {\n  int n = unknown();\n  int i1 = 0, i2 = 0;\n  int j1 = 0, j2 = 0;\n\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i14: i1 >= i2;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i72: j1 == j2 ==> i1 >= i2;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i95: j1 >= 0;\nloop invariant i96: j2 >= 0;\nloop invariant i97: i1 % 2 == j1 % 2;\n\nloop invariant i99: i1 == j1 || i1 != j1;\nloop invariant i100: i2 == j2 || i2 != j2;\nloop invariant i101: i1 == i2 || i1 != i2;\nloop invariant i102: j1 == j2 || j1 != j2;\nloop invariant i103: i1 == n + n || i1 != n + n;\nloop invariant i104: i2 == n || i2 != n;\nloop invariant i105: i1 >= 0;\nloop invariant i106: i2 >= 0;\n\n\n\n\nloop invariant i111: i1 >= j1;\n\n\n\n\n\n\nloop invariant i118: j1 <= i1 + i2;\n\n\n\n\n\n\n\n\n\n\nloop invariant i129: j1 <= j2 + 2 * i2;\n*/\nwhile (1) {\n    if (i1 < n + n) {\n      j1++;\n      i1++;\n    }\n\n    if (i2 < n) {\n      j2 = j2 + 2;\n      i2++;\n    }\n  }\n  {;\n//@ assert(j1==j2);\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/split.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c"
        ],
        "skipped": [],
        "total": 42,
        "success_count": 35,
        "failure_count": 7,
        "success_rate": 0.8333333333333334
    }
}