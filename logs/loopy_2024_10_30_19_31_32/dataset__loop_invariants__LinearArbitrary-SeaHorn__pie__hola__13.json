{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/13.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\nextern int unknown3();\nextern int unknown4();\n\nint main() {\n   int j = 2; \n   int k = 0;\n\n   int flag = unknown2();\n\n   while(unknown1()){ \n     if (flag)\n       j = j + 4;\n     else {\n       j = j + 2;\n       k = k + 1;\n     }\n   }\n   if(k!=0)\n     {;\n//@ assert(j==2*k+2);\n}\n\n   return 0;\n}",
        "success": false,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= k <= j/2;\nloop invariant j >= 2;\nloop invariant (j == 2*k + 2) ==> (k != 0);\nloop invariant (j == 2*k + 2) ==> (flag ==> j >= 4);\nloop invariant (j == 2*k + 2) ==> (!flag ==> j >= 4);\nloop invariant (j == 2*k + 2) ==> (flag ==> k >= 2);\nloop invariant (j == 2*k + 2) ==> (!flag ==> k >= 1);\nloop invariant (j == 2*k + 2) ==> (flag ==> j == 2*k + 2);\nloop invariant (j == 2*k + 2) ==> (!flag ==> j == 2*k + 2);\nloop invariant (j == 2*k + 2) ==> (flag ==> k >= 2);\nloop invariant (j == 2*k + 2) ==> (!flag ==> k >= 1);\nloop invariant (j == 2*k + 2) ==> (flag ==> j >= 4);\nloop invariant (j == 2*k + 2) ==> (!flag ==> j >= 4);\nloop invariant (j == 2*k + 2) ==> (flag ==> k >= 2);\nloop invariant (j == 2*k + 2) ==> (!flag ==> k >= 1);\nloop invariant (j == 2*k + 2) ==> (flag ==> j >= 4);\nloop invariant (j == 2*k + 2) ==> (!flag ==> j >= 4);\nloop invariant (j == 2*k + 2) ==> (flag ==> k >= 2);\nloop invariant (j == 2*k + 2) ==> (!flag ==> k >= 1);\nloop invariant (j == 2*k + 2) ==> (flag ==> j >= 4);\nloop invariant (j == 2*k + 2) ==> (!flag ==> j >= 4);\nloop invariant (j == 2*k + 2) ==> (flag ==> k >= 2);\nloop invariant (j == 2*k + 2) ==> (!flag ==> k >= 1);\nloop invariant (j == 2*k + 2) ==> (flag ==> j >= 4);\nloop invariant (j == 2*k + 2) ==> (!flag ==> j >= 4);\nloop invariant (j == 2*k + 2) ==> (flag ==> k >= 2);\nloop invariant (j == 2*k + 2) ==> (!flag ==> k >= 1);\nloop invariant (j == 2*k + 2) ==> (flag ==> j >= 4);\nloop invariant (j == 2*k + 2) ==> (!flag ==> j >= 4);\nloop invariant (j == 2*k + 2) ==> (flag ==> k >= 2);\nloop invariant (j == 2*k + 2) ==> (!flag ==> k >= 1);\nloop invariant (j == 2*k + 2) ==> (flag ==> j >= 4);\nloop invariant (j == 2*k + 2) ==> (!flag ==> j >= 4);\nloop invariant (j == 2*k + 2) ==> (flag ==> k >= 2);\nloop invariant (j == 2*k + 2) ==> (!flag ==> k >= 1);\nloop invariant (j == 2*k + 2) ==> (flag ==> j >= 4);\nloop invariant (j == 2*k + 2) ==> (!flag ==> j >= 4);\nloop invariant (j == 2*k + 2) ==> (flag ==> k >= 2);\nloop invariant (j == 2*k + 2) ==> (!flag ==> k >= 1);\nloop invariant (j == 2*k + 2) ==> (flag ==> j >= 4);\nloop invariant (j == 2*k + 2) ==> (!flag ==> j >= 4);\nloop invariant (j == 2*k + 2) ==> (flag ==> k >= 2);\nloop invariant (j == 2*k + 2) ==> (!flag ==> k >= 1);\nloop invariant (j == 2*k + 2) ==> (flag ==> j >= 4);\nloop invariant (j == 2*k + 2) ==> (!flag ==> j >= 4);\nloop invariant (j == 2*k + 2) ==> (flag ==> k >= 2);\nloop invariant (j == 2*k + 2) ==> (!flag ==> k >= 1);\nloop invariant (j == 2*k + 2) ==> (flag ==> j >= 4);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= k <= unknown4();\nloop invariant j >= 2;\nloop invariant j <= 2*k + 2;\nloop invariant j == 2*k + 2 ==> k != 0;\nloop invariant j == 2*k + 2 ==> unknown1() == 0;\nloop invariant j == 2*k + 2 ==> unknown2() == 0;\nloop invariant j == 2*k + 2 ==> unknown3() == 0;\nloop invariant j == 2*k + 2 ==> unknown4() == 0;\nloop invariant j == 2*k + 2 ==> j == 2*k + 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= k <= 100000;\nloop invariant j >= 2 * k + 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= k <= unknown1(); loop invariant 0 <= j <= 2 * k + 2; loop invariant k == j / 2; loop invariant j == 2 * k + 2 ==> unknown2() == flag;\n*/\n```",
            "```\n/*@\nloop invariant j >= 2;\nloop invariant k >= 0;\nloop invariant flag == 1 || flag == 0;\nloop invariant j - 2*k == 2 ==> flag == 1;\nloop invariant j - 2*k == 2 ==> flag == 0;\nloop invariant j - 2*k == 2 ==> unknown1() == 1;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= j;\nloop invariant k >= 0;\nloop invariant k <= j/2;\nloop invariant j <= 2*k+2 ==> k!=0;\nloop invariant k == 0 ==> j == 2;\nloop invariant k != 0 ==> j == 2*k+2;\nloop invariant k == 0 ==> flag == 0;\nloop invariant k != 0 ==> flag == 1;\n*/\n```",
            "```\n/*@\nloop invariant j >= 2;\nloop invariant k >= 0;\nloop invariant j == 2 * k + 2 ==> flag == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= j <= 100000;loop invariant k >= 0;loop invariant k <= 100000;loop invariant j == 2*k+2;loop invariant k == 0;loop invariant j == 2;loop invariant k == 0;loop invariant j == 2*k+2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= k <= unknown3();\nloop invariant j >= 2 * k + 2;\nloop invariant unknown4() ==> k <= unknown4() - 1;\nloop invariant unknown4() ==> j <= 2 * unknown4();\nloop invariant unknown4() ==> k <= unknown4();\nloop invariant unknown4() ==> j <= 2 * unknown4() + 2;\nloop invariant unknown4() ==> k <= unknown4() + 1;\nloop invariant unknown4() ==> j <= 2 * unknown4() + 4;\nloop invariant unknown4() ==> k <= unknown4() + 2;\nloop invariant unknown4() ==> j <= 2 * unknown4() + 6;\nloop invariant unknown4() ==> k <= unknown4() + 3;\nloop invariant unknown4() ==> j <= 2 * unknown4() + 8;\nloop invariant unknown4() ==> k <= unknown4() + 4;\nloop invariant unknown4() ==> j <= 2 * unknown4() + 10;\nloop invariant unknown4() ==> k <= unknown4() + 5;\nloop invariant unknown4() ==> j <= 2 * unknown4() + 12;\nloop invariant unknown4() ==> k <= unknown4() + 6;\nloop invariant unknown4() ==> j <= 2 * unknown4() + 14;\nloop invariant unknown4() ==> k <= unknown4() + 7;\nloop invariant unknown4() ==> j <= 2 * unknown4() + 16;\nloop invariant unknown4() ==> k <= unknown4() + 8;\nloop invariant unknown4() ==> j <= 2 * unknown4() + 18;\nloop invariant unknown4() ==> k <= unknown4() + 9;\nloop invariant unknown4() ==> j <= 2 * unknown4() + 20;\nloop invariant unknown4() ==> k <= unknown4() + 10;\nloop invariant unknown4() ==> j <= 2 * unknown4() + 22;\nloop invariant unknown4() ==> k <= unknown4() + 11;\nloop invariant unknown4() ==> j <= 2 * unknown4() + 24;\nloop invariant unknown4() ==> k <= unknown4() + 12;\nloop invariant unknown4() ==> j <= 2 * unknown4() + 26;\nloop invariant unknown4() ==> k <= unknown4() + 13;\nloop invariant unknown4() ==> j <= 2 * unknown4() + 28;\nloop invariant unknown4() ==> k <= unknown4() + 14;\nloop invariant unknown4() ==> j <= 2 * unknown4() + 30;\nloop invariant unknown4() ==> k <= unknown4() + 15;\nloop invariant unknown4() ==> j <= 2 * unknown4() + 32;\nloop invariant unknown4() ==> k <= unknown4() + 16;\nloop invariant unknown4() ==> j <= 2 * unknown4() + 34;\nloop invariant unknown4() ==> k <= unknown4() + 17;\nloop invariant unknown4() ==> j <= 2 * unknown4() + 36;\nloop invariant unknown4() ==> k <= unknown4() + 18;\nloop invariant unknown4() ==> j <= 2 * unknown4() + 38;\nloop invariant unknown4() ==> k <= unknown4() + 19;\nloop invariant unknown4() ==> j <= 2 * unknown4() + 40;\nloop invariant unknown4() ==> k <= unknown4() + 20;\nloop invariant unknown4() ==> j <= 2 * unknown4() + 42;\nloop invariant unknown4() ==> k <= unknown4() + 21;\nloop invariant unknown4() ==> j <= 2 * unknown4() + 44;\nloop invariant unknown4() ==> k <= unknown4() + 22;\nloop invariant unknown4() ==> j <= 2 * unknown4() + 46;\nloop invariant unknown4() ==> k <= unknown4() + 23;\nloop invariant unknown4() ==> j <= 2 * unknown4() + 48;\nloop invariant unknown4() ==> k <= unknown4() + 24;\nloop invariant unknown4() ==> j <= 2 * unknown4() + 50;\nloop invariant unknown4() ==> k <= unknown4() + 25;\nloop invariant unknown4() ==> j <= 2 * unknown4() + 52;\nloop invariant unknown4() ==> k <= unknown4() + 26;\nloop invariant unknown4() ==> j <= 2 * unknown4() + 54;\nloop invariant unknown4() ==> k <= unknown4() + 27;\n*/\n```",
            "```\n/*@\nloop invariant 0 < j <= 6;\nloop invariant k >= 0;\nloop invariant j == 2*k + 2 ==> flag == 0;\nloop invariant j == 4*k + 2 ==> flag == 1;\nloop invariant k == 0 ==> flag == 0;\nloop invariant k != 0 ==> flag == 0;\nloop invariant k == 0 ==> flag == 1;\nloop invariant k != 0 ==> flag == 1;\nloop invariant 0 < j <= 5;\nloop invariant k >= 0;\nloop invariant j == 2*k + 2 ==> flag == 0;\nloop invariant j == 4*k + 2 ==> flag == 1;\nloop invariant k == 0 ==> flag == 0;\nloop invariant k != 0 ==> flag == 0;\nloop invariant k == 0 ==> flag == 1;\nloop invariant k != 0 ==> flag == 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= k <= 100000;\nloop invariant j >= (2 * k) + 2;\nloop invariant flag == (j >= 4);\nloop invariant !(flag && (j != 4));\nloop invariant !(flag && (j == 4));\nloop invariant !(flag && (j == 2));\nloop invariant !(flag && (j == 0));\nloop invariant !(flag && (j == -2));\nloop invariant !(flag && (j == -4));\nloop invariant !(flag && (j == -6));\nloop invariant !(flag && (j == -8));\nloop invariant !(flag && (j == -10));\nloop invariant !(flag && (j == -12));\nloop invariant !(flag && (j == -14));\nloop invariant !(flag && (j == -16));\nloop invariant !(flag && (j == -18));\nloop invariant !(flag && (j == -20));\nloop invariant !(flag && (j == -22));\nloop invariant !(flag && (j == -24));\nloop invariant !(flag && (j == -26));\nloop invariant !(flag && (j == -28));\nloop invariant !(flag && (j == -30));\nloop invariant !(flag && (j == -32));\nloop invariant !(flag && (j == -34));\nloop invariant !(flag && (j == -36));\nloop invariant !(flag && (j == -38));\nloop invariant !(flag && (j == -40));\nloop invariant !(flag && (j == -42));\nloop invariant !(flag && (j == -44));\nloop invariant !(flag && (j == -46));\nloop invariant !(flag && (j == -48));\nloop invariant !(flag && (j == -50));\nloop invariant !(flag && (j == -52));\nloop invariant !(flag && (j == -54));\nloop invariant !(flag && (j == -56));\nloop invariant !(flag && (j == -58));\nloop invariant !(flag && (j == -60));\nloop invariant !(flag && (j == -62));\nloop invariant !(flag && (j == -64));\nloop invariant !(flag && (j == -66));\nloop invariant !(flag && (j == -68));\nloop invariant !(flag && (j == -70));\nloop invariant !(flag && (j == -72));\nloop invariant !(flag && (j == -74));\nloop invariant !(flag && (j == -76));\nloop invariant !(flag && (j == -78));\nloop invariant !(flag && (j == -80));\nloop invariant !(flag && (j == -82));\nloop invariant !(flag && (j == -84));\nloop invariant !(flag && (j == -86));\nloop invariant !(flag && (j == -88));\nloop invariant !(flag && (j == -90));\nloop invariant !(flag && (j == -92));\nloop invariant !(flag && (j == -94));\nloop invariant !(flag && (j == -96));\nloop invariant !(flag && (j == -98));\nloop invariant !(flag && (j == -100));\nloop invariant !(flag && (j == -102));\nloop invariant !(flag && (j == -104));\nloop invariant !(flag && (j == -106));\nloop invariant !(flag && (j == -108));\nloop invariant !(flag && (j == -110));\nloop invariant !(flag && (j == -112));\nloop invariant !(flag && (j == -114));\nloop invariant !(flag && (j == -116));\nloop invariant !(flag && (j == -118));\nloop invariant !(flag && (j == -120));\nloop invariant !(flag && (j == -122));\nloop invariant !(flag && (j == -124));\nloop invariant !(flag && (j == -126));\nloop invariant !(flag && (j == -128));\nloop invariant !(flag && (j == -130));\nloop invariant !(flag && (j == -132));\nloop invariant !(flag && (j == -134));\nloop invariant !(flag && (j == -136));\nloop invariant !(flag && (j == -138));\nloop invariant !(flag && (j == -140));\nloop invariant !(flag && (j == -142));\nloop invariant !(flag && (j == -144));\nloop invariant !(flag && (j == -146));\nloop invariant !(flag && (j == -148));\n*/\n```",
            "```\n/*@\nloop invariant 0 <= k <= unknown4();\nloop invariant 2 <= j <= unknown1()*2 + 2;\nloop invariant j >= 2*k + 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= k <= unknown3() + 1;\nloop invariant 0 <= j <= 2*unknown3() + 2;\nloop invariant j <= k <= unknown3() + 1;\nloop invariant (j == 2*k + 2) ==> (k != 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= j <= 100000;\nloop invariant k >= 0;\nloop invariant flag == unknown2();\nloop invariant j == 2 * k + 2 ==> flag == 1;\nloop invariant j == 2 * k + 2 ==> flag == 0;\nloop invariant j == 2 * k + 2 ==> unknown1() == 1;\nloop invariant j == 2 * k + 2 ==> unknown1() == 0;\nloop invariant j == 2 * k + 2 ==> unknown2() == 1;\nloop invariant j == 2 * k + 2 ==> unknown2() == 0;\nloop invariant j == 2 * k + 2 ==> unknown3() == 1;\nloop invariant j == 2 * k + 2 ==> unknown3() == 0;\nloop invariant j == 2 * k + 2 ==> unknown4() == 1;\nloop invariant j == 2 * k + 2 ==> unknown4() == 0;\nloop invariant j == 2 * k + 2 ==> unknown1() == 1 ==> flag == 1;\nloop invariant j == 2 * k + 2 ==> unknown1() == 1 ==> flag == 0;\nloop invariant j == 2 * k + 2 ==> unknown1() == 0 ==> flag == 1;\nloop invariant j == 2 * k + 2 ==> unknown1() == 0 ==> flag == 0;\nloop invariant j == 2 * k + 2 ==> unknown2() == 1 ==> flag == 1;\nloop invariant j == 2 * k + 2 ==> unknown2() == 1 ==> flag == 0;\nloop invariant j == 2 * k + 2 ==> unknown2() == 0 ==> flag == 1;\nloop invariant j == 2 * k + 2 ==> unknown2() == 0 ==> flag == 0;\nloop invariant j == 2 * k + 2 ==> unknown3() == 1 ==> flag == 1;\nloop invariant j == 2 * k + 2 ==> unknown3() == 1 ==> flag == 0;\nloop invariant j == 2 * k + 2 ==> unknown3() == 0 ==> flag == 1;\nloop invariant j == 2 * k + 2 ==> unknown3() == 0 ==> flag == 0;\nloop invariant j == 2 * k + 2 ==> unknown4() == 1 ==> flag == 1;\nloop invariant j == 2 * k + 2 ==> unknown4() == 1 ==> flag == 0;\nloop invariant j == 2 * k + 2 ==> unknown4() == 0 ==> flag == 1;\nloop invariant j == 2 * k + 2 ==> unknown4() == 0 ==> flag == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= j <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant j >= 2;\nloop invariant k >= 1;\nloop invariant k <= 100000;\nloop invariant j >= 4;\nloop invariant j >= 2*k+2;\nloop invariant unknown1() == 0;\nloop invariant unknown2() == 0;\nloop invariant unknown3() == 0;\nloop invariant unknown4() == 0;\nloop invariant unknown5() == 0;\nloop invariant unknown6() == 0;\nloop invariant unknown7() == 0;\nloop invariant unknown8() == 0;\nloop invariant unknown9() == 0;\nloop invariant unknown10() == 0;\nloop invariant unknown11() == 0;\nloop invariant unknown12() == 0;\nloop invariant unknown13() == 0;\nloop invariant unknown14() == 0;\nloop invariant unknown15() == 0;\nloop invariant unknown16() == 0;\nloop invariant unknown17() == 0;\nloop invariant unknown18() == 0;\nloop invariant unknown19() == 0;\nloop invariant unknown20() == 0;\nloop invariant unknown21() == 0;\nloop invariant unknown22() == 0;\nloop invariant unknown23() == 0;\nloop invariant unknown24() == 0;\nloop invariant unknown25() == 0;\nloop invariant unknown26() == 0;\nloop invariant unknown27() == 0;\nloop invariant unknown28() == 0;\nloop invariant unknown29() == 0;\nloop invariant unknown30() == 0;\nloop invariant unknown31() == 0;\nloop invariant unknown32() == 0;\nloop invariant unknown33() == 0;\nloop invariant unknown34() == 0;\nloop invariant unknown35() == 0;\nloop invariant unknown36() == 0;\nloop invariant unknown37() == 0;\nloop invariant unknown38() == 0;\nloop invariant unknown39() == 0;\nloop invariant unknown40() == 0;\nloop invariant unknown41() == 0;\nloop invariant unknown42() == 0;\nloop invariant unknown43() == 0;\nloop invariant unknown44() == 0;\nloop invariant unknown45() == 0;\nloop invariant unknown46() == 0;\nloop invariant unknown47() == 0;\nloop invariant unknown48() == 0;\nloop invariant unknown49() == 0;\nloop invariant unknown50() == 0;\nloop invariant unknown51() == 0;\nloop invariant unknown52() == 0;\nloop invariant unknown53() == 0;\nloop invariant unknown54() == 0;\nloop invariant unknown55() == 0;\nloop invariant unknown56() == 0;\nloop invariant unknown57() == 0;\nloop invariant unknown58() == 0;\nloop invariant unknown59() == 0;\nloop invariant unknown60() == 0;\nloop invariant unknown61() == 0;\nloop invariant unknown62() == 0;\nloop invariant unknown63() == 0;\nloop invariant unknown64() == 0;\nloop invariant unknown65() == 0;\nloop invariant unknown66() == 0;\nloop invariant unknown67() == 0;\nloop invariant unknown68() == 0;\nloop invariant unknown69() == 0;\nloop invariant unknown70() == 0;\nloop invariant unknown71() == 0;\nloop invariant unknown72() == 0;\nloop invariant unknown73() == 0;\nloop invariant unknown74() == 0;\nloop invariant unknown75() == 0;\nloop invariant unknown76() == 0;\nloop invariant unknown77() == 0;\nloop invariant unknown78() == 0;\nloop invariant unknown79() == 0;\nloop invariant unknown80() == 0;\nloop invariant unknown81() == 0;\nloop invariant unknown82() == 0;\nloop invariant unknown83() == 0;\nloop invariant unknown84() == 0;\nloop invariant unknown85() == 0;\nloop invariant unknown86() == 0;\nloop invariant unknown87() == 0;\nloop invariant unknown88() == 0;\nloop invariant unknown89() == 0;\nloop invariant unknown90() == 0;\nloop invariant unknown91() == 0;\nloop invariant unknown92() == 0;\nloop invariant unknown93() == 0;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= k <= j/2;\nloop invariant j >= 2;\nloop invariant (j == 2*k + 2) ==> (k != 0);\nloop invariant (j == 2*k + 2) ==> (flag ==> j >= 4);\nloop invariant (j == 2*k + 2) ==> (!flag ==> j >= 4);\nloop invariant (j == 2*k + 2) ==> (flag ==> k >= 2);\nloop invariant (j == 2*k + 2) ==> (!flag ==> k >= 1);\nloop invariant (j == 2*k + 2) ==> (flag ==> j == 2*k + 2);\nloop invariant (j == 2*k + 2) ==> (!flag ==> j == 2*k + 2);\nloop invariant (j == 2*k + 2) ==> (flag ==> k >= 2);\nloop invariant (j == 2*k + 2) ==> (!flag ==> k >= 1);\nloop invariant (j == 2*k + 2) ==> (flag ==> j >= 4);\nloop invariant (j == 2*k + 2) ==> (!flag ==> j >= 4);\nloop invariant (j == 2*k + 2) ==> (flag ==> k >= 2);\nloop invariant (j == 2*k + 2) ==> (!flag ==> k >= 1);\nloop invariant (j == 2*k + 2) ==> (flag ==> j >= 4);\nloop invariant (j == 2*k + 2) ==> (!flag ==> j >= 4);\nloop invariant (j == 2*k + 2) ==> (flag ==> k >= 2);\nloop invariant (j == 2*k + 2) ==> (!flag ==> k >= 1);\nloop invariant (j == 2*k + 2) ==> (flag ==> j >= 4);\nloop invariant (j == 2*k + 2) ==> (!flag ==> j >= 4);\nloop invariant (j == 2*k + 2) ==> (flag ==> k >= 2);\nloop invariant (j == 2*k + 2) ==> (!flag ==> k >= 1);\nloop invariant (j == 2*k + 2) ==> (flag ==> j >= 4);\nloop invariant (j == 2*k + 2) ==> (!flag ==> j >= 4);\nloop invariant (j == 2*k + 2) ==> (flag ==> k >= 2);\nloop invariant (j == 2*k + 2) ==> (!flag ==> k >= 1);\nloop invariant (j == 2*k + 2) ==> (flag ==> j >= 4);\nloop invariant (j == 2*k + 2) ==> (!flag ==> j >= 4);\nloop invariant (j == 2*k + 2) ==> (flag ==> k >= 2);\nloop invariant (j == 2*k + 2) ==> (!flag ==> k >= 1);\nloop invariant (j == 2*k + 2) ==> (flag ==> j >= 4);\nloop invariant (j == 2*k + 2) ==> (!flag ==> j >= 4);\nloop invariant (j == 2*k + 2) ==> (flag ==> k >= 2);\nloop invariant (j == 2*k + 2) ==> (!flag ==> k >= 1);\nloop invariant (j == 2*k + 2) ==> (flag ==> j >= 4);\nloop invariant (j == 2*k + 2) ==> (!flag ==> j >= 4);\nloop invariant (j == 2*k + 2) ==> (flag ==> k >= 2);\nloop invariant (j == 2*k + 2) ==> (!flag ==> k >= 1);\nloop invariant (j == 2*k + 2) ==> (flag ==> j >= 4);\nloop invariant (j == 2*k + 2) ==> (!flag ==> j >= 4);\nloop invariant (j == 2*k + 2) ==> (flag ==> k >= 2);\nloop invariant (j == 2*k + 2) ==> (!flag ==> k >= 1);\nloop invariant (j == 2*k + 2) ==> (flag ==> j >= 4);\nloop invariant (j == 2*k + 2) ==> (!flag ==> j >= 4);\nloop invariant (j == 2*k + 2) ==> (flag ==> k >= 2);\nloop invariant (j == 2*k + 2) ==> (!flag ==> k >= 1);\nloop invariant (j == 2*k + 2) ==> (flag ==> j >= 4);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\nextern int unknown3();\nextern int unknown4();\n\nint main() {\n   int j = 2; \n   int k = 0;\n\n   int flag = unknown2();\n\n   /*@\nloop invariant i1: 0 <= k <= j/2;\nloop invariant i2: j >= 2;\n\n\n\n\n\nloop invariant i8: (j == 2*k + 2) ==> (flag ==> j == 2*k + 2);\nloop invariant i9: (j == 2*k + 2) ==> (!flag ==> j == 2*k + 2);\n*/\nwhile(unknown1()){ \n     if (flag)\n       j = j + 4;\n     else {\n       j = j + 2;\n       k = k + 1;\n     }\n   }\n   if(k!=0)\n     {;\n//@ assert(j==2*k+2);\n}\n\n   return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 8,
                "annotations": "```\n/*@\nloop invariant 0 <= k <= unknown4();\nloop invariant j >= 2;\nloop invariant j <= 2*k + 2;\nloop invariant j == 2*k + 2 ==> k != 0;\nloop invariant j == 2*k + 2 ==> unknown1() == 0;\nloop invariant j == 2*k + 2 ==> unknown2() == 0;\nloop invariant j == 2*k + 2 ==> unknown3() == 0;\nloop invariant j == 2*k + 2 ==> unknown4() == 0;\nloop invariant j == 2*k + 2 ==> j == 2*k + 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\nextern int unknown3();\nextern int unknown4();\n\nint main() {\n   int j = 2; \n   int k = 0;\n\n   int flag = unknown2();\n\n   /*@\n\nloop invariant i2: j >= 2;\n\n\n\n\n\n\nloop invariant i9: j == 2*k + 2 ==> j == 2*k + 2;\n*/\nwhile(unknown1()){ \n     if (flag)\n       j = j + 4;\n     else {\n       j = j + 2;\n       k = k + 1;\n     }\n   }\n   if(k!=0)\n     {;\n//@ assert(j==2*k+2);\n}\n\n   return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= k <= 100000;\nloop invariant j >= 2 * k + 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\nextern int unknown3();\nextern int unknown4();\n\nint main() {\n   int j = 2; \n   int k = 0;\n\n   int flag = unknown2();\n\n   /*@\n\nloop invariant i2: j >= 2 * k + 2;\n*/\nwhile(unknown1()){ \n     if (flag)\n       j = j + 4;\n     else {\n       j = j + 2;\n       k = k + 1;\n     }\n   }\n   if(k!=0)\n     {;\n//@ assert(j==2*k+2);\n}\n\n   return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= k <= unknown1(); loop invariant 0 <= j <= 2 * k + 2; loop invariant k == j / 2; loop invariant j == 2 * k + 2 ==> unknown2() == flag;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\nextern int unknown3();\nextern int unknown4();\n\nint main() {\n   int j = 2; \n   int k = 0;\n\n   int flag = unknown2();\n\n   /*@\n\n*/\nwhile(unknown1()){ \n     if (flag)\n       j = j + 4;\n     else {\n       j = j + 2;\n       k = k + 1;\n     }\n   }\n   if(k!=0)\n     {;\n//@ assert(j==2*k+2);\n}\n\n   return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant j >= 2;\nloop invariant k >= 0;\nloop invariant flag == 1 || flag == 0;\nloop invariant j - 2*k == 2 ==> flag == 1;\nloop invariant j - 2*k == 2 ==> flag == 0;\nloop invariant j - 2*k == 2 ==> unknown1() == 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\nextern int unknown3();\nextern int unknown4();\n\nint main() {\n   int j = 2; \n   int k = 0;\n\n   int flag = unknown2();\n\n   /*@\nloop invariant i1: j >= 2;\nloop invariant i2: k >= 0;\n\n\n\n\n*/\nwhile(unknown1()){ \n     if (flag)\n       j = j + 4;\n     else {\n       j = j + 2;\n       k = k + 1;\n     }\n   }\n   if(k!=0)\n     {;\n//@ assert(j==2*k+2);\n}\n\n   return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 1 <= j;\nloop invariant k >= 0;\nloop invariant k <= j/2;\nloop invariant j <= 2*k+2 ==> k!=0;\nloop invariant k == 0 ==> j == 2;\nloop invariant k != 0 ==> j == 2*k+2;\nloop invariant k == 0 ==> flag == 0;\nloop invariant k != 0 ==> flag == 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\nextern int unknown3();\nextern int unknown4();\n\nint main() {\n   int j = 2; \n   int k = 0;\n\n   int flag = unknown2();\n\n   /*@\nloop invariant i1: 1 <= j;\nloop invariant i2: k >= 0;\nloop invariant i3: k <= j/2;\n\n\n\n\n\n*/\nwhile(unknown1()){ \n     if (flag)\n       j = j + 4;\n     else {\n       j = j + 2;\n       k = k + 1;\n     }\n   }\n   if(k!=0)\n     {;\n//@ assert(j==2*k+2);\n}\n\n   return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant j >= 2;\nloop invariant k >= 0;\nloop invariant j == 2 * k + 2 ==> flag == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\nextern int unknown3();\nextern int unknown4();\n\nint main() {\n   int j = 2; \n   int k = 0;\n\n   int flag = unknown2();\n\n   /*@\nloop invariant i1: j >= 2;\nloop invariant i2: k >= 0;\n\n*/\nwhile(unknown1()){ \n     if (flag)\n       j = j + 4;\n     else {\n       j = j + 2;\n       k = k + 1;\n     }\n   }\n   if(k!=0)\n     {;\n//@ assert(j==2*k+2);\n}\n\n   return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= j <= 100000;loop invariant k >= 0;loop invariant k <= 100000;loop invariant j == 2*k+2;loop invariant k == 0;loop invariant j == 2;loop invariant k == 0;loop invariant j == 2*k+2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\nextern int unknown3();\nextern int unknown4();\n\nint main() {\n   int j = 2; \n   int k = 0;\n\n   int flag = unknown2();\n\n   /*@\nloop invariant i1: 0 <= j <= 100000;loop invariant k >= 0;loop invariant k <= 100000;loop invariant j == 2*k+2;loop invariant k == 0;loop invariant j == 2;loop invariant k == 0;loop invariant j == 2*k+2;\n*/\nwhile(unknown1()){ \n     if (flag)\n       j = j + 4;\n     else {\n       j = j + 2;\n       k = k + 1;\n     }\n   }\n   if(k!=0)\n     {;\n//@ assert(j==2*k+2);\n}\n\n   return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 59,
                "annotations": "```\n/*@\nloop invariant 0 <= k <= unknown3();\nloop invariant j >= 2 * k + 2;\nloop invariant unknown4() ==> k <= unknown4() - 1;\nloop invariant unknown4() ==> j <= 2 * unknown4();\nloop invariant unknown4() ==> k <= unknown4();\nloop invariant unknown4() ==> j <= 2 * unknown4() + 2;\nloop invariant unknown4() ==> k <= unknown4() + 1;\nloop invariant unknown4() ==> j <= 2 * unknown4() + 4;\nloop invariant unknown4() ==> k <= unknown4() + 2;\nloop invariant unknown4() ==> j <= 2 * unknown4() + 6;\nloop invariant unknown4() ==> k <= unknown4() + 3;\nloop invariant unknown4() ==> j <= 2 * unknown4() + 8;\nloop invariant unknown4() ==> k <= unknown4() + 4;\nloop invariant unknown4() ==> j <= 2 * unknown4() + 10;\nloop invariant unknown4() ==> k <= unknown4() + 5;\nloop invariant unknown4() ==> j <= 2 * unknown4() + 12;\nloop invariant unknown4() ==> k <= unknown4() + 6;\nloop invariant unknown4() ==> j <= 2 * unknown4() + 14;\nloop invariant unknown4() ==> k <= unknown4() + 7;\nloop invariant unknown4() ==> j <= 2 * unknown4() + 16;\nloop invariant unknown4() ==> k <= unknown4() + 8;\nloop invariant unknown4() ==> j <= 2 * unknown4() + 18;\nloop invariant unknown4() ==> k <= unknown4() + 9;\nloop invariant unknown4() ==> j <= 2 * unknown4() + 20;\nloop invariant unknown4() ==> k <= unknown4() + 10;\nloop invariant unknown4() ==> j <= 2 * unknown4() + 22;\nloop invariant unknown4() ==> k <= unknown4() + 11;\nloop invariant unknown4() ==> j <= 2 * unknown4() + 24;\nloop invariant unknown4() ==> k <= unknown4() + 12;\nloop invariant unknown4() ==> j <= 2 * unknown4() + 26;\nloop invariant unknown4() ==> k <= unknown4() + 13;\nloop invariant unknown4() ==> j <= 2 * unknown4() + 28;\nloop invariant unknown4() ==> k <= unknown4() + 14;\nloop invariant unknown4() ==> j <= 2 * unknown4() + 30;\nloop invariant unknown4() ==> k <= unknown4() + 15;\nloop invariant unknown4() ==> j <= 2 * unknown4() + 32;\nloop invariant unknown4() ==> k <= unknown4() + 16;\nloop invariant unknown4() ==> j <= 2 * unknown4() + 34;\nloop invariant unknown4() ==> k <= unknown4() + 17;\nloop invariant unknown4() ==> j <= 2 * unknown4() + 36;\nloop invariant unknown4() ==> k <= unknown4() + 18;\nloop invariant unknown4() ==> j <= 2 * unknown4() + 38;\nloop invariant unknown4() ==> k <= unknown4() + 19;\nloop invariant unknown4() ==> j <= 2 * unknown4() + 40;\nloop invariant unknown4() ==> k <= unknown4() + 20;\nloop invariant unknown4() ==> j <= 2 * unknown4() + 42;\nloop invariant unknown4() ==> k <= unknown4() + 21;\nloop invariant unknown4() ==> j <= 2 * unknown4() + 44;\nloop invariant unknown4() ==> k <= unknown4() + 22;\nloop invariant unknown4() ==> j <= 2 * unknown4() + 46;\nloop invariant unknown4() ==> k <= unknown4() + 23;\nloop invariant unknown4() ==> j <= 2 * unknown4() + 48;\nloop invariant unknown4() ==> k <= unknown4() + 24;\nloop invariant unknown4() ==> j <= 2 * unknown4() + 50;\nloop invariant unknown4() ==> k <= unknown4() + 25;\nloop invariant unknown4() ==> j <= 2 * unknown4() + 52;\nloop invariant unknown4() ==> k <= unknown4() + 26;\nloop invariant unknown4() ==> j <= 2 * unknown4() + 54;\nloop invariant unknown4() ==> k <= unknown4() + 27;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\nextern int unknown3();\nextern int unknown4();\n\nint main() {\n   int j = 2; \n   int k = 0;\n\n   int flag = unknown2();\n\n   /*@\n\nloop invariant i2: j >= 2 * k + 2;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile(unknown1()){ \n     if (flag)\n       j = j + 4;\n     else {\n       j = j + 2;\n       k = k + 1;\n     }\n   }\n   if(k!=0)\n     {;\n//@ assert(j==2*k+2);\n}\n\n   return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 < j <= 6;\nloop invariant k >= 0;\nloop invariant j == 2*k + 2 ==> flag == 0;\nloop invariant j == 4*k + 2 ==> flag == 1;\nloop invariant k == 0 ==> flag == 0;\nloop invariant k != 0 ==> flag == 0;\nloop invariant k == 0 ==> flag == 1;\nloop invariant k != 0 ==> flag == 1;\nloop invariant 0 < j <= 5;\nloop invariant k >= 0;\nloop invariant j == 2*k + 2 ==> flag == 0;\nloop invariant j == 4*k + 2 ==> flag == 1;\nloop invariant k == 0 ==> flag == 0;\nloop invariant k != 0 ==> flag == 0;\nloop invariant k == 0 ==> flag == 1;\nloop invariant k != 0 ==> flag == 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\nextern int unknown3();\nextern int unknown4();\n\nint main() {\n   int j = 2; \n   int k = 0;\n\n   int flag = unknown2();\n\n   /*@\n\nloop invariant i2: k >= 0;\n\n\n\nloop invariant i6: k != 0 ==> flag == 0;\n\n\n\n*/\nwhile(unknown1()){ \n     if (flag)\n       j = j + 4;\n     else {\n       j = j + 2;\n       k = k + 1;\n     }\n   }\n   if(k!=0)\n     {;\n//@ assert(j==2*k+2);\n}\n\n   return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 42,
                "annotations": "```\n/*@\nloop invariant 0 <= k <= 100000;\nloop invariant j >= (2 * k) + 2;\nloop invariant flag == (j >= 4);\nloop invariant !(flag && (j != 4));\nloop invariant !(flag && (j == 4));\nloop invariant !(flag && (j == 2));\nloop invariant !(flag && (j == 0));\nloop invariant !(flag && (j == -2));\nloop invariant !(flag && (j == -4));\nloop invariant !(flag && (j == -6));\nloop invariant !(flag && (j == -8));\nloop invariant !(flag && (j == -10));\nloop invariant !(flag && (j == -12));\nloop invariant !(flag && (j == -14));\nloop invariant !(flag && (j == -16));\nloop invariant !(flag && (j == -18));\nloop invariant !(flag && (j == -20));\nloop invariant !(flag && (j == -22));\nloop invariant !(flag && (j == -24));\nloop invariant !(flag && (j == -26));\nloop invariant !(flag && (j == -28));\nloop invariant !(flag && (j == -30));\nloop invariant !(flag && (j == -32));\nloop invariant !(flag && (j == -34));\nloop invariant !(flag && (j == -36));\nloop invariant !(flag && (j == -38));\nloop invariant !(flag && (j == -40));\nloop invariant !(flag && (j == -42));\nloop invariant !(flag && (j == -44));\nloop invariant !(flag && (j == -46));\nloop invariant !(flag && (j == -48));\nloop invariant !(flag && (j == -50));\nloop invariant !(flag && (j == -52));\nloop invariant !(flag && (j == -54));\nloop invariant !(flag && (j == -56));\nloop invariant !(flag && (j == -58));\nloop invariant !(flag && (j == -60));\nloop invariant !(flag && (j == -62));\nloop invariant !(flag && (j == -64));\nloop invariant !(flag && (j == -66));\nloop invariant !(flag && (j == -68));\nloop invariant !(flag && (j == -70));\nloop invariant !(flag && (j == -72));\nloop invariant !(flag && (j == -74));\nloop invariant !(flag && (j == -76));\nloop invariant !(flag && (j == -78));\nloop invariant !(flag && (j == -80));\nloop invariant !(flag && (j == -82));\nloop invariant !(flag && (j == -84));\nloop invariant !(flag && (j == -86));\nloop invariant !(flag && (j == -88));\nloop invariant !(flag && (j == -90));\nloop invariant !(flag && (j == -92));\nloop invariant !(flag && (j == -94));\nloop invariant !(flag && (j == -96));\nloop invariant !(flag && (j == -98));\nloop invariant !(flag && (j == -100));\nloop invariant !(flag && (j == -102));\nloop invariant !(flag && (j == -104));\nloop invariant !(flag && (j == -106));\nloop invariant !(flag && (j == -108));\nloop invariant !(flag && (j == -110));\nloop invariant !(flag && (j == -112));\nloop invariant !(flag && (j == -114));\nloop invariant !(flag && (j == -116));\nloop invariant !(flag && (j == -118));\nloop invariant !(flag && (j == -120));\nloop invariant !(flag && (j == -122));\nloop invariant !(flag && (j == -124));\nloop invariant !(flag && (j == -126));\nloop invariant !(flag && (j == -128));\nloop invariant !(flag && (j == -130));\nloop invariant !(flag && (j == -132));\nloop invariant !(flag && (j == -134));\nloop invariant !(flag && (j == -136));\nloop invariant !(flag && (j == -138));\nloop invariant !(flag && (j == -140));\nloop invariant !(flag && (j == -142));\nloop invariant !(flag && (j == -144));\nloop invariant !(flag && (j == -146));\nloop invariant !(flag && (j == -148));\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\nextern int unknown3();\nextern int unknown4();\n\nint main() {\n   int j = 2; \n   int k = 0;\n\n   int flag = unknown2();\n\n   /*@\n\nloop invariant i2: j >= (2 * k) + 2;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile(unknown1()){ \n     if (flag)\n       j = j + 4;\n     else {\n       j = j + 2;\n       k = k + 1;\n     }\n   }\n   if(k!=0)\n     {;\n//@ assert(j==2*k+2);\n}\n\n   return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= k <= unknown4();\nloop invariant 2 <= j <= unknown1()*2 + 2;\nloop invariant j >= 2*k + 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\nextern int unknown3();\nextern int unknown4();\n\nint main() {\n   int j = 2; \n   int k = 0;\n\n   int flag = unknown2();\n\n   /*@\n\n\nloop invariant i3: j >= 2*k + 2;\n*/\nwhile(unknown1()){ \n     if (flag)\n       j = j + 4;\n     else {\n       j = j + 2;\n       k = k + 1;\n     }\n   }\n   if(k!=0)\n     {;\n//@ assert(j==2*k+2);\n}\n\n   return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= k <= unknown3() + 1;\nloop invariant 0 <= j <= 2*unknown3() + 2;\nloop invariant j <= k <= unknown3() + 1;\nloop invariant (j == 2*k + 2) ==> (k != 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\nextern int unknown3();\nextern int unknown4();\n\nint main() {\n   int j = 2; \n   int k = 0;\n\n   int flag = unknown2();\n\n   /*@\n\n\n\n\n*/\nwhile(unknown1()){ \n     if (flag)\n       j = j + 4;\n     else {\n       j = j + 2;\n       k = k + 1;\n     }\n   }\n   if(k!=0)\n     {;\n//@ assert(j==2*k+2);\n}\n\n   return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 28,
                "annotations": "```\n/*@\nloop invariant 0 <= j <= 100000;\nloop invariant k >= 0;\nloop invariant flag == unknown2();\nloop invariant j == 2 * k + 2 ==> flag == 1;\nloop invariant j == 2 * k + 2 ==> flag == 0;\nloop invariant j == 2 * k + 2 ==> unknown1() == 1;\nloop invariant j == 2 * k + 2 ==> unknown1() == 0;\nloop invariant j == 2 * k + 2 ==> unknown2() == 1;\nloop invariant j == 2 * k + 2 ==> unknown2() == 0;\nloop invariant j == 2 * k + 2 ==> unknown3() == 1;\nloop invariant j == 2 * k + 2 ==> unknown3() == 0;\nloop invariant j == 2 * k + 2 ==> unknown4() == 1;\nloop invariant j == 2 * k + 2 ==> unknown4() == 0;\nloop invariant j == 2 * k + 2 ==> unknown1() == 1 ==> flag == 1;\nloop invariant j == 2 * k + 2 ==> unknown1() == 1 ==> flag == 0;\nloop invariant j == 2 * k + 2 ==> unknown1() == 0 ==> flag == 1;\nloop invariant j == 2 * k + 2 ==> unknown1() == 0 ==> flag == 0;\nloop invariant j == 2 * k + 2 ==> unknown2() == 1 ==> flag == 1;\nloop invariant j == 2 * k + 2 ==> unknown2() == 1 ==> flag == 0;\nloop invariant j == 2 * k + 2 ==> unknown2() == 0 ==> flag == 1;\nloop invariant j == 2 * k + 2 ==> unknown2() == 0 ==> flag == 0;\nloop invariant j == 2 * k + 2 ==> unknown3() == 1 ==> flag == 1;\nloop invariant j == 2 * k + 2 ==> unknown3() == 1 ==> flag == 0;\nloop invariant j == 2 * k + 2 ==> unknown3() == 0 ==> flag == 1;\nloop invariant j == 2 * k + 2 ==> unknown3() == 0 ==> flag == 0;\nloop invariant j == 2 * k + 2 ==> unknown4() == 1 ==> flag == 1;\nloop invariant j == 2 * k + 2 ==> unknown4() == 1 ==> flag == 0;\nloop invariant j == 2 * k + 2 ==> unknown4() == 0 ==> flag == 1;\nloop invariant j == 2 * k + 2 ==> unknown4() == 0 ==> flag == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\nextern int unknown3();\nextern int unknown4();\n\nint main() {\n   int j = 2; \n   int k = 0;\n\n   int flag = unknown2();\n\n   /*@\n\nloop invariant i2: k >= 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile(unknown1()){ \n     if (flag)\n       j = j + 4;\n     else {\n       j = j + 2;\n       k = k + 1;\n     }\n   }\n   if(k!=0)\n     {;\n//@ assert(j==2*k+2);\n}\n\n   return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 99,
                "annotations": "```\n/*@\nloop invariant 0 <= j <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant j >= 2;\nloop invariant k >= 1;\nloop invariant k <= 100000;\nloop invariant j >= 4;\nloop invariant j >= 2*k+2;\nloop invariant unknown1() == 0;\nloop invariant unknown2() == 0;\nloop invariant unknown3() == 0;\nloop invariant unknown4() == 0;\nloop invariant unknown5() == 0;\nloop invariant unknown6() == 0;\nloop invariant unknown7() == 0;\nloop invariant unknown8() == 0;\nloop invariant unknown9() == 0;\nloop invariant unknown10() == 0;\nloop invariant unknown11() == 0;\nloop invariant unknown12() == 0;\nloop invariant unknown13() == 0;\nloop invariant unknown14() == 0;\nloop invariant unknown15() == 0;\nloop invariant unknown16() == 0;\nloop invariant unknown17() == 0;\nloop invariant unknown18() == 0;\nloop invariant unknown19() == 0;\nloop invariant unknown20() == 0;\nloop invariant unknown21() == 0;\nloop invariant unknown22() == 0;\nloop invariant unknown23() == 0;\nloop invariant unknown24() == 0;\nloop invariant unknown25() == 0;\nloop invariant unknown26() == 0;\nloop invariant unknown27() == 0;\nloop invariant unknown28() == 0;\nloop invariant unknown29() == 0;\nloop invariant unknown30() == 0;\nloop invariant unknown31() == 0;\nloop invariant unknown32() == 0;\nloop invariant unknown33() == 0;\nloop invariant unknown34() == 0;\nloop invariant unknown35() == 0;\nloop invariant unknown36() == 0;\nloop invariant unknown37() == 0;\nloop invariant unknown38() == 0;\nloop invariant unknown39() == 0;\nloop invariant unknown40() == 0;\nloop invariant unknown41() == 0;\nloop invariant unknown42() == 0;\nloop invariant unknown43() == 0;\nloop invariant unknown44() == 0;\nloop invariant unknown45() == 0;\nloop invariant unknown46() == 0;\nloop invariant unknown47() == 0;\nloop invariant unknown48() == 0;\nloop invariant unknown49() == 0;\nloop invariant unknown50() == 0;\nloop invariant unknown51() == 0;\nloop invariant unknown52() == 0;\nloop invariant unknown53() == 0;\nloop invariant unknown54() == 0;\nloop invariant unknown55() == 0;\nloop invariant unknown56() == 0;\nloop invariant unknown57() == 0;\nloop invariant unknown58() == 0;\nloop invariant unknown59() == 0;\nloop invariant unknown60() == 0;\nloop invariant unknown61() == 0;\nloop invariant unknown62() == 0;\nloop invariant unknown63() == 0;\nloop invariant unknown64() == 0;\nloop invariant unknown65() == 0;\nloop invariant unknown66() == 0;\nloop invariant unknown67() == 0;\nloop invariant unknown68() == 0;\nloop invariant unknown69() == 0;\nloop invariant unknown70() == 0;\nloop invariant unknown71() == 0;\nloop invariant unknown72() == 0;\nloop invariant unknown73() == 0;\nloop invariant unknown74() == 0;\nloop invariant unknown75() == 0;\nloop invariant unknown76() == 0;\nloop invariant unknown77() == 0;\nloop invariant unknown78() == 0;\nloop invariant unknown79() == 0;\nloop invariant unknown80() == 0;\nloop invariant unknown81() == 0;\nloop invariant unknown82() == 0;\nloop invariant unknown83() == 0;\nloop invariant unknown84() == 0;\nloop invariant unknown85() == 0;\nloop invariant unknown86() == 0;\nloop invariant unknown87() == 0;\nloop invariant unknown88() == 0;\nloop invariant unknown89() == 0;\nloop invariant unknown90() == 0;\nloop invariant unknown91() == 0;\nloop invariant unknown92() == 0;\nloop invariant unknown93() == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\nextern int unknown3();\nextern int unknown4();\n\nint main() {\n   int j = 2; \n   int k = 0;\n\n   int flag = unknown2();\n\n   /*@\n\n\nloop invariant i3: j >= 2;\n\n\n\nloop invariant i7: j >= 2*k+2;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile(unknown1()){ \n     if (flag)\n       j = j + 4;\n     else {\n       j = j + 2;\n       k = k + 1;\n     }\n   }\n   if(k!=0)\n     {;\n//@ assert(j==2*k+2);\n}\n\n   return 0;\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 28: unexpected token ')'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\nextern int unknown3();\nextern int unknown4();\n\nint main() {\n   int j = 2; \n   int k = 0;\n\n   int flag = unknown2();\n\n   /*@\nloop invariant i1: 0 <= k <= j/2;\nloop invariant i2: j >= 2;\nloop invariant i3: (j == 2*k + 2) ==> (k != 0);\nloop invariant i4: (j == 2*k + 2) ==> (flag ==> j >= 4);\nloop invariant i5: (j == 2*k + 2) ==> (!flag ==> j >= 4);\nloop invariant i6: (j == 2*k + 2) ==> (flag ==> k >= 2);\nloop invariant i7: (j == 2*k + 2) ==> (!flag ==> k >= 1);\nloop invariant i8: (j == 2*k + 2) ==> (flag ==> j == 2*k + 2);\nloop invariant i9: (j == 2*k + 2) ==> (!flag ==> j == 2*k + 2);\nloop invariant i10: 0 <= k <= unknown4();\nloop invariant i11: j <= 2*k + 2;\nloop invariant i12: j == 2*k + 2 ==> k != 0;\nloop invariant i13: j == 2*k + 2 ==> unknown1() == 0;\nloop invariant i14: j == 2*k + 2 ==> unknown2() == 0;\nloop invariant i15: j == 2*k + 2 ==> unknown3() == 0;\nloop invariant i16: j == 2*k + 2 ==> unknown4() == 0;\nloop invariant i17: j == 2*k + 2 ==> j == 2*k + 2;\nloop invariant i18: 0 <= k <= 100000;\nloop invariant i19: j >= 2 * k + 2;\nloop invariant i20: 0 <= k <= unknown1(); loop invariant 0 <= j <= 2 * k + 2; loop invariant k == j / 2; loop invariant j == 2 * k + 2 ==> unknown2() == flag;\nloop invariant i21: k >= 0;\nloop invariant i22: flag == 1 || flag == 0;\nloop invariant i23: j - 2*k == 2 ==> flag == 1;\nloop invariant i24: j - 2*k == 2 ==> flag == 0;\nloop invariant i25: j - 2*k == 2 ==> unknown1() == 1;\nloop invariant i26: 1 <= j;\nloop invariant i27: k <= j/2;\nloop invariant i28: j <= 2*k+2 ==> k!=0;\nloop invariant i29: k == 0 ==> j == 2;\nloop invariant i30: k != 0 ==> j == 2*k+2;\nloop invariant i31: k == 0 ==> flag == 0;\nloop invariant i32: k != 0 ==> flag == 1;\nloop invariant i33: j == 2 * k + 2 ==> flag == 0;\nloop invariant i34: 0 <= j <= 100000;loop invariant k >= 0;loop invariant k <= 100000;loop invariant j == 2*k+2;loop invariant k == 0;loop invariant j == 2;loop invariant k == 0;loop invariant j == 2*k+2;\nloop invariant i35: 0 <= k <= unknown3();\nloop invariant i36: unknown4() ==> k <= unknown4() - 1;\nloop invariant i37: unknown4() ==> j <= 2 * unknown4();\nloop invariant i38: unknown4() ==> k <= unknown4();\nloop invariant i39: unknown4() ==> j <= 2 * unknown4() + 2;\nloop invariant i40: unknown4() ==> k <= unknown4() + 1;\nloop invariant i41: unknown4() ==> j <= 2 * unknown4() + 4;\nloop invariant i42: unknown4() ==> k <= unknown4() + 2;\nloop invariant i43: unknown4() ==> j <= 2 * unknown4() + 6;\nloop invariant i44: unknown4() ==> k <= unknown4() + 3;\nloop invariant i45: unknown4() ==> j <= 2 * unknown4() + 8;\nloop invariant i46: unknown4() ==> k <= unknown4() + 4;\nloop invariant i47: unknown4() ==> j <= 2 * unknown4() + 10;\nloop invariant i48: unknown4() ==> k <= unknown4() + 5;\nloop invariant i49: unknown4() ==> j <= 2 * unknown4() + 12;\nloop invariant i50: unknown4() ==> k <= unknown4() + 6;\nloop invariant i51: unknown4() ==> j <= 2 * unknown4() + 14;\nloop invariant i52: unknown4() ==> k <= unknown4() + 7;\nloop invariant i53: unknown4() ==> j <= 2 * unknown4() + 16;\nloop invariant i54: unknown4() ==> k <= unknown4() + 8;\nloop invariant i55: unknown4() ==> j <= 2 * unknown4() + 18;\nloop invariant i56: unknown4() ==> k <= unknown4() + 9;\nloop invariant i57: unknown4() ==> j <= 2 * unknown4() + 20;\nloop invariant i58: unknown4() ==> k <= unknown4() + 10;\nloop invariant i59: unknown4() ==> j <= 2 * unknown4() + 22;\nloop invariant i60: unknown4() ==> k <= unknown4() + 11;\nloop invariant i61: unknown4() ==> j <= 2 * unknown4() + 24;\nloop invariant i62: unknown4() ==> k <= unknown4() + 12;\nloop invariant i63: unknown4() ==> j <= 2 * unknown4() + 26;\nloop invariant i64: unknown4() ==> k <= unknown4() + 13;\nloop invariant i65: unknown4() ==> j <= 2 * unknown4() + 28;\nloop invariant i66: unknown4() ==> k <= unknown4() + 14;\nloop invariant i67: unknown4() ==> j <= 2 * unknown4() + 30;\nloop invariant i68: unknown4() ==> k <= unknown4() + 15;\nloop invariant i69: unknown4() ==> j <= 2 * unknown4() + 32;\nloop invariant i70: unknown4() ==> k <= unknown4() + 16;\nloop invariant i71: unknown4() ==> j <= 2 * unknown4() + 34;\nloop invariant i72: unknown4() ==> k <= unknown4() + 17;\nloop invariant i73: unknown4() ==> j <= 2 * unknown4() + 36;\nloop invariant i74: unknown4() ==> k <= unknown4() + 18;\nloop invariant i75: unknown4() ==> j <= 2 * unknown4() + 38;\nloop invariant i76: unknown4() ==> k <= unknown4() + 19;\nloop invariant i77: unknown4() ==> j <= 2 * unknown4() + 40;\nloop invariant i78: unknown4() ==> k <= unknown4() + 20;\nloop invariant i79: unknown4() ==> j <= 2 * unknown4() + 42;\nloop invariant i80: unknown4() ==> k <= unknown4() + 21;\nloop invariant i81: unknown4() ==> j <= 2 * unknown4() + 44;\nloop invariant i82: unknown4() ==> k <= unknown4() + 22;\nloop invariant i83: unknown4() ==> j <= 2 * unknown4() + 46;\nloop invariant i84: unknown4() ==> k <= unknown4() + 23;\nloop invariant i85: unknown4() ==> j <= 2 * unknown4() + 48;\nloop invariant i86: unknown4() ==> k <= unknown4() + 24;\nloop invariant i87: unknown4() ==> j <= 2 * unknown4() + 50;\nloop invariant i88: unknown4() ==> k <= unknown4() + 25;\nloop invariant i89: unknown4() ==> j <= 2 * unknown4() + 52;\nloop invariant i90: unknown4() ==> k <= unknown4() + 26;\nloop invariant i91: unknown4() ==> j <= 2 * unknown4() + 54;\nloop invariant i92: unknown4() ==> k <= unknown4() + 27;\nloop invariant i93: 0 < j <= 6;\nloop invariant i94: j == 2*k + 2 ==> flag == 0;\nloop invariant i95: j == 4*k + 2 ==> flag == 1;\nloop invariant i96: k != 0 ==> flag == 0;\nloop invariant i97: k == 0 ==> flag == 1;\nloop invariant i98: 0 < j <= 5;\nloop invariant i99: j >= (2 * k) + 2;\nloop invariant i100: flag == (j >= 4);\nloop invariant i101: !(flag && (j != 4));\nloop invariant i102: !(flag && (j == 4));\nloop invariant i103: !(flag && (j == 2));\nloop invariant i104: !(flag && (j == 0));\nloop invariant i105: !(flag && (j == -2));\nloop invariant i106: !(flag && (j == -4));\nloop invariant i107: !(flag && (j == -6));\nloop invariant i108: !(flag && (j == -8));\nloop invariant i109: !(flag && (j == -10));\nloop invariant i110: !(flag && (j == -12));\nloop invariant i111: !(flag && (j == -14));\nloop invariant i112: !(flag && (j == -16));\nloop invariant i113: !(flag && (j == -18));\nloop invariant i114: !(flag && (j == -20));\nloop invariant i115: !(flag && (j == -22));\nloop invariant i116: !(flag && (j == -24));\nloop invariant i117: !(flag && (j == -26));\nloop invariant i118: !(flag && (j == -28));\nloop invariant i119: !(flag && (j == -30));\nloop invariant i120: !(flag && (j == -32));\nloop invariant i121: !(flag && (j == -34));\nloop invariant i122: !(flag && (j == -36));\nloop invariant i123: !(flag && (j == -38));\nloop invariant i124: !(flag && (j == -40));\nloop invariant i125: !(flag && (j == -42));\nloop invariant i126: !(flag && (j == -44));\nloop invariant i127: !(flag && (j == -46));\nloop invariant i128: !(flag && (j == -48));\nloop invariant i129: !(flag && (j == -50));\nloop invariant i130: !(flag && (j == -52));\nloop invariant i131: !(flag && (j == -54));\nloop invariant i132: !(flag && (j == -56));\nloop invariant i133: !(flag && (j == -58));\nloop invariant i134: !(flag && (j == -60));\nloop invariant i135: !(flag && (j == -62));\nloop invariant i136: !(flag && (j == -64));\nloop invariant i137: !(flag && (j == -66));\nloop invariant i138: !(flag && (j == -68));\nloop invariant i139: !(flag && (j == -70));\nloop invariant i140: !(flag && (j == -72));\nloop invariant i141: !(flag && (j == -74));\nloop invariant i142: !(flag && (j == -76));\nloop invariant i143: !(flag && (j == -78));\nloop invariant i144: !(flag && (j == -80));\nloop invariant i145: !(flag && (j == -82));\nloop invariant i146: !(flag && (j == -84));\nloop invariant i147: !(flag && (j == -86));\nloop invariant i148: !(flag && (j == -88));\nloop invariant i149: !(flag && (j == -90));\nloop invariant i150: !(flag && (j == -92));\nloop invariant i151: !(flag && (j == -94));\nloop invariant i152: !(flag && (j == -96));\nloop invariant i153: !(flag && (j == -98));\nloop invariant i154: !(flag && (j == -100));\nloop invariant i155: !(flag && (j == -102));\nloop invariant i156: !(flag && (j == -104));\nloop invariant i157: !(flag && (j == -106));\nloop invariant i158: !(flag && (j == -108));\nloop invariant i159: !(flag && (j == -110));\nloop invariant i160: !(flag && (j == -112));\nloop invariant i161: !(flag && (j == -114));\nloop invariant i162: !(flag && (j == -116));\nloop invariant i163: !(flag && (j == -118));\nloop invariant i164: !(flag && (j == -120));\nloop invariant i165: !(flag && (j == -122));\nloop invariant i166: !(flag && (j == -124));\nloop invariant i167: !(flag && (j == -126));\nloop invariant i168: !(flag && (j == -128));\nloop invariant i169: !(flag && (j == -130));\nloop invariant i170: !(flag && (j == -132));\nloop invariant i171: !(flag && (j == -134));\nloop invariant i172: !(flag && (j == -136));\nloop invariant i173: !(flag && (j == -138));\nloop invariant i174: !(flag && (j == -140));\nloop invariant i175: !(flag && (j == -142));\nloop invariant i176: !(flag && (j == -144));\nloop invariant i177: !(flag && (j == -146));\nloop invariant i178: !(flag && (j == -148));\nloop invariant i179: 2 <= j <= unknown1()*2 + 2;\nloop invariant i180: j >= 2*k + 2;\nloop invariant i181: 0 <= k <= unknown3() + 1;\nloop invariant i182: 0 <= j <= 2*unknown3() + 2;\nloop invariant i183: j <= k <= unknown3() + 1;\nloop invariant i184: 0 <= j <= 100000;\nloop invariant i185: flag == unknown2();\nloop invariant i186: j == 2 * k + 2 ==> flag == 1;\nloop invariant i187: j == 2 * k + 2 ==> unknown1() == 1;\nloop invariant i188: j == 2 * k + 2 ==> unknown1() == 0;\nloop invariant i189: j == 2 * k + 2 ==> unknown2() == 1;\nloop invariant i190: j == 2 * k + 2 ==> unknown2() == 0;\nloop invariant i191: j == 2 * k + 2 ==> unknown3() == 1;\nloop invariant i192: j == 2 * k + 2 ==> unknown3() == 0;\nloop invariant i193: j == 2 * k + 2 ==> unknown4() == 1;\nloop invariant i194: j == 2 * k + 2 ==> unknown4() == 0;\nloop invariant i195: j == 2 * k + 2 ==> unknown1() == 1 ==> flag == 1;\nloop invariant i196: j == 2 * k + 2 ==> unknown1() == 1 ==> flag == 0;\nloop invariant i197: j == 2 * k + 2 ==> unknown1() == 0 ==> flag == 1;\nloop invariant i198: j == 2 * k + 2 ==> unknown1() == 0 ==> flag == 0;\nloop invariant i199: j == 2 * k + 2 ==> unknown2() == 1 ==> flag == 1;\nloop invariant i200: j == 2 * k + 2 ==> unknown2() == 1 ==> flag == 0;\nloop invariant i201: j == 2 * k + 2 ==> unknown2() == 0 ==> flag == 1;\nloop invariant i202: j == 2 * k + 2 ==> unknown2() == 0 ==> flag == 0;\nloop invariant i203: j == 2 * k + 2 ==> unknown3() == 1 ==> flag == 1;\nloop invariant i204: j == 2 * k + 2 ==> unknown3() == 1 ==> flag == 0;\nloop invariant i205: j == 2 * k + 2 ==> unknown3() == 0 ==> flag == 1;\nloop invariant i206: j == 2 * k + 2 ==> unknown3() == 0 ==> flag == 0;\nloop invariant i207: j == 2 * k + 2 ==> unknown4() == 1 ==> flag == 1;\nloop invariant i208: j == 2 * k + 2 ==> unknown4() == 1 ==> flag == 0;\nloop invariant i209: j == 2 * k + 2 ==> unknown4() == 0 ==> flag == 1;\nloop invariant i210: j == 2 * k + 2 ==> unknown4() == 0 ==> flag == 0;\nloop invariant i211: x >= (1 + (y - 1) * y / 2);\nloop invariant i212: k >= 1;\nloop invariant i213: k <= 100000;\nloop invariant i214: j >= 4;\nloop invariant i215: j >= 2*k+2;\nloop invariant i216: unknown1() == 0;\nloop invariant i217: unknown2() == 0;\nloop invariant i218: unknown3() == 0;\nloop invariant i219: unknown4() == 0;\nloop invariant i220: unknown5() == 0;\nloop invariant i221: unknown6() == 0;\nloop invariant i222: unknown7() == 0;\nloop invariant i223: unknown8() == 0;\nloop invariant i224: unknown9() == 0;\nloop invariant i225: unknown10() == 0;\nloop invariant i226: unknown11() == 0;\nloop invariant i227: unknown12() == 0;\nloop invariant i228: unknown13() == 0;\nloop invariant i229: unknown14() == 0;\nloop invariant i230: unknown15() == 0;\nloop invariant i231: unknown16() == 0;\nloop invariant i232: unknown17() == 0;\nloop invariant i233: unknown18() == 0;\nloop invariant i234: unknown19() == 0;\nloop invariant i235: unknown20() == 0;\nloop invariant i236: unknown21() == 0;\nloop invariant i237: unknown22() == 0;\nloop invariant i238: unknown23() == 0;\nloop invariant i239: unknown24() == 0;\nloop invariant i240: unknown25() == 0;\nloop invariant i241: unknown26() == 0;\nloop invariant i242: unknown27() == 0;\nloop invariant i243: unknown28() == 0;\nloop invariant i244: unknown29() == 0;\nloop invariant i245: unknown30() == 0;\nloop invariant i246: unknown31() == 0;\nloop invariant i247: unknown32() == 0;\nloop invariant i248: unknown33() == 0;\nloop invariant i249: unknown34() == 0;\nloop invariant i250: unknown35() == 0;\nloop invariant i251: unknown36() == 0;\nloop invariant i252: unknown37() == 0;\nloop invariant i253: unknown38() == 0;\nloop invariant i254: unknown39() == 0;\nloop invariant i255: unknown40() == 0;\nloop invariant i256: unknown41() == 0;\nloop invariant i257: unknown42() == 0;\nloop invariant i258: unknown43() == 0;\nloop invariant i259: unknown44() == 0;\nloop invariant i260: unknown45() == 0;\nloop invariant i261: unknown46() == 0;\nloop invariant i262: unknown47() == 0;\nloop invariant i263: unknown48() == 0;\nloop invariant i264: unknown49() == 0;\nloop invariant i265: unknown50() == 0;\nloop invariant i266: unknown51() == 0;\nloop invariant i267: unknown52() == 0;\nloop invariant i268: unknown53() == 0;\nloop invariant i269: unknown54() == 0;\nloop invariant i270: unknown55() == 0;\nloop invariant i271: unknown56() == 0;\nloop invariant i272: unknown57() == 0;\nloop invariant i273: unknown58() == 0;\nloop invariant i274: unknown59() == 0;\nloop invariant i275: unknown60() == 0;\nloop invariant i276: unknown61() == 0;\nloop invariant i277: unknown62() == 0;\nloop invariant i278: unknown63() == 0;\nloop invariant i279: unknown64() == 0;\nloop invariant i280: unknown65() == 0;\nloop invariant i281: unknown66() == 0;\nloop invariant i282: unknown67() == 0;\nloop invariant i283: unknown68() == 0;\nloop invariant i284: unknown69() == 0;\nloop invariant i285: unknown70() == 0;\nloop invariant i286: unknown71() == 0;\nloop invariant i287: unknown72() == 0;\nloop invariant i288: unknown73() == 0;\nloop invariant i289: unknown74() == 0;\nloop invariant i290: unknown75() == 0;\nloop invariant i291: unknown76() == 0;\nloop invariant i292: unknown77() == 0;\nloop invariant i293: unknown78() == 0;\nloop invariant i294: unknown79() == 0;\nloop invariant i295: unknown80() == 0;\nloop invariant i296: unknown81() == 0;\nloop invariant i297: unknown82() == 0;\nloop invariant i298: unknown83() == 0;\nloop invariant i299: unknown84() == 0;\nloop invariant i300: unknown85() == 0;\nloop invariant i301: unknown86() == 0;\nloop invariant i302: unknown87() == 0;\nloop invariant i303: unknown88() == 0;\nloop invariant i304: unknown89() == 0;\nloop invariant i305: unknown90() == 0;\nloop invariant i306: unknown91() == 0;\nloop invariant i307: unknown92() == 0;\nloop invariant i308: unknown93() == 0;\n*/\nwhile(unknown1()){ \n     if (flag)\n       j = j + 4;\n     else {\n       j = j + 2;\n       k = k + 1;\n     }\n   }\n   if(k!=0)\n     {;\n//@ assert(j==2*k+2);\n}\n\n   return 0;\n}",
        "combined_annotation_num_solver_calls": 204,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\nextern int unknown3();\nextern int unknown4();\n\nint main() {\n   int j = 2; \n   int k = 0;\n\n   int flag = unknown2();\n\n   /*@\nloop invariant i1: 0 <= k <= j/2;\nloop invariant i2: j >= 2;\n\n\n\n\n\nloop invariant i8: (j == 2*k + 2) ==> (flag ==> j == 2*k + 2);\nloop invariant i9: (j == 2*k + 2) ==> (!flag ==> j == 2*k + 2);\n\n\n\n\n\n\n\nloop invariant i17: j == 2*k + 2 ==> j == 2*k + 2;\nloop invariant i18: 0 <= k <= 100000;\nloop invariant i19: j >= 2 * k + 2;\n\nloop invariant i21: k >= 0;\n\n\n\n\nloop invariant i26: 1 <= j;\nloop invariant i27: k <= j/2;\n\n\nloop invariant i30: k != 0 ==> j == 2*k+2;\n\n\n\nloop invariant i34: 0 <= j <= 100000;loop invariant k >= 0;loop invariant k <= 100000;loop invariant j == 2*k+2;loop invariant k == 0;loop invariant j == 2;loop invariant k == 0;loop invariant j == 2*k+2;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i93: 0 < j <= 6;\n\n\nloop invariant i96: k != 0 ==> flag == 0;\n\nloop invariant i98: 0 < j <= 5;\nloop invariant i99: j >= (2 * k) + 2;\n\n\nloop invariant i102: !(flag && (j == 4));\n\nloop invariant i104: !(flag && (j == 0));\nloop invariant i105: !(flag && (j == -2));\nloop invariant i106: !(flag && (j == -4));\nloop invariant i107: !(flag && (j == -6));\nloop invariant i108: !(flag && (j == -8));\nloop invariant i109: !(flag && (j == -10));\nloop invariant i110: !(flag && (j == -12));\nloop invariant i111: !(flag && (j == -14));\nloop invariant i112: !(flag && (j == -16));\nloop invariant i113: !(flag && (j == -18));\nloop invariant i114: !(flag && (j == -20));\nloop invariant i115: !(flag && (j == -22));\nloop invariant i116: !(flag && (j == -24));\nloop invariant i117: !(flag && (j == -26));\nloop invariant i118: !(flag && (j == -28));\nloop invariant i119: !(flag && (j == -30));\nloop invariant i120: !(flag && (j == -32));\nloop invariant i121: !(flag && (j == -34));\nloop invariant i122: !(flag && (j == -36));\nloop invariant i123: !(flag && (j == -38));\nloop invariant i124: !(flag && (j == -40));\nloop invariant i125: !(flag && (j == -42));\nloop invariant i126: !(flag && (j == -44));\nloop invariant i127: !(flag && (j == -46));\nloop invariant i128: !(flag && (j == -48));\nloop invariant i129: !(flag && (j == -50));\nloop invariant i130: !(flag && (j == -52));\nloop invariant i131: !(flag && (j == -54));\nloop invariant i132: !(flag && (j == -56));\nloop invariant i133: !(flag && (j == -58));\nloop invariant i134: !(flag && (j == -60));\nloop invariant i135: !(flag && (j == -62));\nloop invariant i136: !(flag && (j == -64));\nloop invariant i137: !(flag && (j == -66));\nloop invariant i138: !(flag && (j == -68));\nloop invariant i139: !(flag && (j == -70));\nloop invariant i140: !(flag && (j == -72));\nloop invariant i141: !(flag && (j == -74));\nloop invariant i142: !(flag && (j == -76));\nloop invariant i143: !(flag && (j == -78));\nloop invariant i144: !(flag && (j == -80));\nloop invariant i145: !(flag && (j == -82));\nloop invariant i146: !(flag && (j == -84));\nloop invariant i147: !(flag && (j == -86));\nloop invariant i148: !(flag && (j == -88));\nloop invariant i149: !(flag && (j == -90));\nloop invariant i150: !(flag && (j == -92));\nloop invariant i151: !(flag && (j == -94));\nloop invariant i152: !(flag && (j == -96));\nloop invariant i153: !(flag && (j == -98));\nloop invariant i154: !(flag && (j == -100));\nloop invariant i155: !(flag && (j == -102));\nloop invariant i156: !(flag && (j == -104));\nloop invariant i157: !(flag && (j == -106));\nloop invariant i158: !(flag && (j == -108));\nloop invariant i159: !(flag && (j == -110));\nloop invariant i160: !(flag && (j == -112));\nloop invariant i161: !(flag && (j == -114));\nloop invariant i162: !(flag && (j == -116));\nloop invariant i163: !(flag && (j == -118));\nloop invariant i164: !(flag && (j == -120));\nloop invariant i165: !(flag && (j == -122));\nloop invariant i166: !(flag && (j == -124));\nloop invariant i167: !(flag && (j == -126));\nloop invariant i168: !(flag && (j == -128));\nloop invariant i169: !(flag && (j == -130));\nloop invariant i170: !(flag && (j == -132));\nloop invariant i171: !(flag && (j == -134));\nloop invariant i172: !(flag && (j == -136));\nloop invariant i173: !(flag && (j == -138));\nloop invariant i174: !(flag && (j == -140));\nloop invariant i175: !(flag && (j == -142));\nloop invariant i176: !(flag && (j == -144));\nloop invariant i177: !(flag && (j == -146));\nloop invariant i178: !(flag && (j == -148));\n\nloop invariant i180: j >= 2*k + 2;\n\n\n\nloop invariant i184: 0 <= j <= 100000;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i213: k <= 100000;\n\nloop invariant i215: j >= 2*k+2;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile(unknown1()){ \n     if (flag)\n       j = j + 4;\n     else {\n       j = j + 2;\n       k = k + 1;\n     }\n   }\n   if(k!=0)\n     {;\n//@ assert(j==2*k+2);\n}\n\n   return 0;\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/11.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/split.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/13.c"
        ],
        "skipped": [],
        "total": 108,
        "success_count": 92,
        "failure_count": 16,
        "success_rate": 0.8518518518518519
    }
}