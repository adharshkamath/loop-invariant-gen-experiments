{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nvoid main()\n{\n  int x, y;\n\n  y = 0;\n  x = 1;\n  while ( unknown() < 10) {\n    if (x<2) {\n      x=2;\n    } else {\n      x=1;\n    }\n    if (y<1) {\n      y=0;\n    }\n  }\n  {;\n//@ assert(!( x > 2 ));\n}\n\nreturn;\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= x <= 2;\nloop invariant 0 <= y <= 1;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= 2;\nloop invariant 0 <= y <= 1;\nloop invariant unknown() < 10;\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 1 <= y <= 10;\nloop invariant y == 0 || (x == 1 && y == 1) || (x == 2 && y >= 2);\nloop invariant x <= 2;\nloop invariant x == 1 || x == 2;\nloop invariant (x == 1 && y == 0) || (x == 2 && y >= 2);\nloop invariant x == 1 || (x == 2 && y >= 2);\nloop invariant (x == 1 && y == 0) || (x == 2 && y >= 2);\nloop invariant x == 1 || (x == 2 && y >= 2);\nloop invariant (x == 1 && y == 0) || (x == 2 && y >= 2);\nloop invariant x == 1 || (x == 2 && y >= 2);\nloop invariant (x == 1 && y == 0) || (x == 2 && y >= 2);\nloop invariant x == 1 || (x == 2 && y >= 2);\nloop invariant (x == 1 && y == 0) || (x == 2 && y >= 2);\nloop invariant x == 1 || (x == 2 && y >= 2);\nloop invariant (x == 1 && y == 0) || (x == 2 && y >= 2);\nloop invariant x == 1 || (x == 2 && y >= 2);\nloop invariant (x == 1 && y == 0) || (x == 2 && y >= 2);\nloop invariant x == 1 || (x == 2 && y >= 2);\nloop invariant (x == 1 && y == 0) || (x == 2 && y >= 2);\nloop invariant x == 1 || (x == 2 && y >= 2);\nloop invariant (x == 1 && y == 0) || (x == 2 && y >= 2);\nloop invariant x == 1 || (x == 2 && y >= 2);\nloop invariant (x == 1 && y == 0) || (x == 2 && y >= 2);\nloop invariant x == 1 || (x == 2 && y >= 2);\nloop invariant (x == 1 && y == 0) || (x == 2 && y >= 2);\nloop invariant x == 1 || (x == 2 && y >= 2);\nloop invariant (x == 1 && y == 0) || (x == 2 && y >= 2);\nloop invariant x == 1 || (x == 2 && y >= 2);\nloop invariant (x == 1 && y == 0) || (x == 2 && y >= 2);\nloop invariant x == 1 || (x == 2 && y >= 2);\nloop invariant (x == 1 && y == 0) || (x == 2 && y >= 2);\nloop invariant x == 1 || (x == 2 && y >= 2);\nloop invariant (x == 1 && y == 0) || (x == 2 && y >= 2);\nloop invariant x == 1 || (x == 2 && y >= 2);\nloop invariant (x == 1 && y == 0) || (x == 2 && y >= 2);\nloop invariant x == 1 || (x == 2 && y >= 2);\nloop invariant (x == 1 && y == 0) || (x == 2 && y >= 2);\nloop invariant x == 1 || (x == 2 && y >= 2);\nloop invariant (x == 1 && y == 0) || (x == 2 && y >= 2);\nloop invariant x == 1 || (x == 2 && y >= 2);\nloop invariant (x == 1 && y == 0) || (x == 2 && y >= 2);\nloop invariant x == 1 || (x == 2 && y >= 2);\nloop invariant (x == 1 && y == 0) || (x == 2 && y >= 2);\nloop invariant x == 1 || (x == 2 && y >= 2);\nloop invariant (x == 1 && y == 0) || (x == 2 && y >= 2);\nloop invariant x == 1 || (x == 2 && y >= 2);\nloop invariant (x == 1 && y == 0) || (x == 2 && y >= 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 10;\nloop invariant x == 1 || x == 2;\nloop invariant x != 0;\nloop invariant y != 2;\nloop invariant x != 3;\nloop invariant y != 0 || x != 1;\nloop invariant y != 1 || x != 1;\nloop invariant y != 2 || x != 2;\nloop invariant y != 3 || x != 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 2;\nloop invariant 0 <= y <= 1;\nloop invariant unknown() < 10;\nloop invariant x < 2 ==> x = 2;\nloop invariant x >= 2 ==> x = 1;\nloop invariant y < 1 ==> y = 0;\nloop invariant x < 2 ==> unknown() < 10 - 1;\nloop invariant x >= 2 ==> unknown() < 10;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 1;\nloop invariant 1 <= x <= 2;\nloop invariant y < 10;\nloop invariant 0 <= y <= 1;\nloop invariant 1 <= x <= 2;\nloop invariant y < 10;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 2;\nloop invariant 0 <= y <= 1;\nloop invariant y < 10;\nloop invariant y < 1 ==> x = 1;\nloop invariant y >= 1 ==> x = 2;\nloop invariant x = 2 ==> y < 1;\nloop invariant x = 1 ==> y >= 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 10;\nloop invariant x == 1 ==> (x >= 2 && (y >= 0 && y < 10));\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 10;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 2;\nloop invariant 0 <= y <= 1;\nloop invariant unknown() < 10 ==> x == 1;\nloop invariant unknown() < 10 ==> y == 0;\nloop invariant unknown() >= 10 ==> x == 2;\nloop invariant 0 <= x <= 2;\nloop invariant 0 <= y <= 1;\nloop invariant unknown() < 10 ==> x == 1;\nloop invariant unknown() < 10 ==> y == 0;\nloop invariant unknown() >= 10 ==> x == 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 10;\nloop invariant 1 <= x <= 2;\nloop invariant x == 2 ==> y == 0;\n*/\n```",
            "```\n/*@\nloop invariant y < 1;\nloop invariant 0 <= x <= 2;\nloop invariant x < 2 ==> x == 2;\nloop invariant x >= 2 ==> x == 1;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x < 2 ==> y == 0;\nloop invariant x < 2 ==> y == 1;\nloop invariant x >= 2 ==> y == 1;\nloop invariant x < 2 ==> y == 1;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= unknown() < 10; loop invariant 0 <= y <= 1; loop invariant 0 <= x <= 2; loop invariant x >= y; loop invariant x != 2 ==> y == 0; loop invariant x >= y ==> x <= 2; loop invariant x <= 2 ==> x >= 1; loop invariant y < 1 ==> x == 1; loop invariant y >= 1 ==> x == 2; loop invariant x == 2 ==> y == 0; loop invariant x == 1 ==> y >= 0; loop invariant x == 1 ==> y < 1; loop invariant x == 2 ==> y < 1; loop invariant x == 1 ==> x <= 2; loop invariant x == 2 ==> x >= 1; loop invariant x == 1 ==> y <= 1; loop invariant x == 2 ==> y >= 0; loop invariant x == 1 ==> y < 1; loop invariant x == 2 ==> y < 1; loop invariant x == 1 ==> y >= 0; loop invariant x == 2 ==> y >= 0; loop invariant x == 1 ==> x <= 2; loop invariant x == 2 ==> x >= 1; loop invariant x == 1 ==> y <= 1; loop invariant x == 2 ==> y >= 0; loop invariant x == 1 ==> y < 1; loop invariant x == 2 ==> y < 1; loop invariant x == 1 ==> y >= 0; loop invariant x == 2 ==> y >= 0; loop invariant x == 1 ==> x <= 2; loop invariant x == 2 ==> x >= 1; loop invariant x == 1 ==> y <= 1; loop invariant x == 2 ==> y >= 0; loop invariant x == 1 ==> y < 1; loop invariant x == 2 ==> y < 1; loop invariant x == 1 ==> y >= 0; loop invariant x == 2 ==> y >= 0; loop invariant x == 1 ==> x <= 2; loop invariant x == 2 ==> x >= 1; loop invariant x == 1 ==> y <= 1; loop invariant x == 2 ==> y >= 0; loop invariant x == 1 ==> y < 1; loop invariant x == 2 ==> y < 1; loop invariant x == 1 ==> y >= 0; loop invariant x == 2 ==> y >= 0; loop invariant x == 1 ==> x <= 2; loop invariant x == 2 ==> x >= 1; loop invariant x == 1 ==> y <= 1; loop invariant x == 2 ==> y >= 0; loop invariant x == 1 ==> y < 1; loop invariant x == 2 ==> y < 1; loop invariant x == 1 ==> y >= 0; loop invariant x == 2 ==> y >= 0; loop invariant x == 1 ==> x <= 2; loop invariant x == 2 ==> x >= 1; loop invariant x == 1 ==> y <= 1; loop invariant x == 2 ==> y >= 0; loop invariant x == 1 ==> y < 1; loop invariant x == 2 ==> y < 1; loop invariant x == 1 ==> y >= 0; loop invariant x == 2 ==> y >= 0; loop invariant x == 1 ==> x <= 2; loop invariant x == 2 ==> x >= 1; loop invariant x == 1 ==> y <= 1; loop invariant x == 2 ==> y >= 0; loop invariant x == 1 ==> y < 1; loop invariant x == 2 ==> y < 1; loop invariant x == 1 ==> y >= 0; loop invariant x == 2 ==> y >= 0; loop invariant x == 1 ==> x <= 2; loop invariant x == 2 ==> x >= 1; loop invariant x == 1 ==> y <= 1; loop invariant x == 2 ==> y >= 0; loop invariant x == 1 ==> y < 1; loop invariant x == 2 ==> y < 1; loop invariant x == 1 ==> y >= 0; loop invariant x == 2 ==> y >= 0; loop invariant x == 1 ==> x <= 2; loop invariant x == 2 ==> x >= 1; loop invariant x == 1 ==> y <= 1; loop invariant x == 2 ==> y >= 0; loop invariant x == 1 ==> y < 1; loop invariant x == 2 ==> y < 1; loop invariant x == 1 ==> y >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 10;\nloop invariant x == 1 || x == 2;\nloop invariant y == 0 || y == 1; loop invariant unknown() <= 10;\nloop invariant !(x > 2) ==> (y <= 10);\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 2;\nloop invariant 0 <= y <= 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nvoid main()\n{\n  int x, y;\n\n  y = 0;\n  x = 1;\n  /*@\nloop invariant i1: 0 <= x <= 2;\nloop invariant i2: 0 <= y <= 1;\n*/\nwhile ( unknown() < 10) {\n    if (x<2) {\n      x=2;\n    } else {\n      x=1;\n    }\n    if (y<1) {\n      y=0;\n    }\n  }\n  {;\n//@ assert(!( x > 2 ));\n}\n\nreturn;\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= 2;\nloop invariant 0 <= y <= 1;\nloop invariant unknown() < 10;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nvoid main()\n{\n  int x, y;\n\n  y = 0;\n  x = 1;\n  /*@\nloop invariant i1: 1 <= x <= 2;\nloop invariant i2: 0 <= y <= 1;\n\n*/\nwhile ( unknown() < 10) {\n    if (x<2) {\n      x=2;\n    } else {\n      x=1;\n    }\n    if (y<1) {\n      y=0;\n    }\n  }\n  {;\n//@ assert(!( x > 2 ));\n}\n\nreturn;\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nvoid main()\n{\n  int x, y;\n\n  y = 0;\n  x = 1;\n  /*@\n\n*/\nwhile ( unknown() < 10) {\n    if (x<2) {\n      x=2;\n    } else {\n      x=1;\n    }\n    if (y<1) {\n      y=0;\n    }\n  }\n  {;\n//@ assert(!( x > 2 ));\n}\n\nreturn;\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 1 <= y <= 10;\nloop invariant y == 0 || (x == 1 && y == 1) || (x == 2 && y >= 2);\nloop invariant x <= 2;\nloop invariant x == 1 || x == 2;\nloop invariant (x == 1 && y == 0) || (x == 2 && y >= 2);\nloop invariant x == 1 || (x == 2 && y >= 2);\nloop invariant (x == 1 && y == 0) || (x == 2 && y >= 2);\nloop invariant x == 1 || (x == 2 && y >= 2);\nloop invariant (x == 1 && y == 0) || (x == 2 && y >= 2);\nloop invariant x == 1 || (x == 2 && y >= 2);\nloop invariant (x == 1 && y == 0) || (x == 2 && y >= 2);\nloop invariant x == 1 || (x == 2 && y >= 2);\nloop invariant (x == 1 && y == 0) || (x == 2 && y >= 2);\nloop invariant x == 1 || (x == 2 && y >= 2);\nloop invariant (x == 1 && y == 0) || (x == 2 && y >= 2);\nloop invariant x == 1 || (x == 2 && y >= 2);\nloop invariant (x == 1 && y == 0) || (x == 2 && y >= 2);\nloop invariant x == 1 || (x == 2 && y >= 2);\nloop invariant (x == 1 && y == 0) || (x == 2 && y >= 2);\nloop invariant x == 1 || (x == 2 && y >= 2);\nloop invariant (x == 1 && y == 0) || (x == 2 && y >= 2);\nloop invariant x == 1 || (x == 2 && y >= 2);\nloop invariant (x == 1 && y == 0) || (x == 2 && y >= 2);\nloop invariant x == 1 || (x == 2 && y >= 2);\nloop invariant (x == 1 && y == 0) || (x == 2 && y >= 2);\nloop invariant x == 1 || (x == 2 && y >= 2);\nloop invariant (x == 1 && y == 0) || (x == 2 && y >= 2);\nloop invariant x == 1 || (x == 2 && y >= 2);\nloop invariant (x == 1 && y == 0) || (x == 2 && y >= 2);\nloop invariant x == 1 || (x == 2 && y >= 2);\nloop invariant (x == 1 && y == 0) || (x == 2 && y >= 2);\nloop invariant x == 1 || (x == 2 && y >= 2);\nloop invariant (x == 1 && y == 0) || (x == 2 && y >= 2);\nloop invariant x == 1 || (x == 2 && y >= 2);\nloop invariant (x == 1 && y == 0) || (x == 2 && y >= 2);\nloop invariant x == 1 || (x == 2 && y >= 2);\nloop invariant (x == 1 && y == 0) || (x == 2 && y >= 2);\nloop invariant x == 1 || (x == 2 && y >= 2);\nloop invariant (x == 1 && y == 0) || (x == 2 && y >= 2);\nloop invariant x == 1 || (x == 2 && y >= 2);\nloop invariant (x == 1 && y == 0) || (x == 2 && y >= 2);\nloop invariant x == 1 || (x == 2 && y >= 2);\nloop invariant (x == 1 && y == 0) || (x == 2 && y >= 2);\nloop invariant x == 1 || (x == 2 && y >= 2);\nloop invariant (x == 1 && y == 0) || (x == 2 && y >= 2);\nloop invariant x == 1 || (x == 2 && y >= 2);\nloop invariant (x == 1 && y == 0) || (x == 2 && y >= 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nvoid main()\n{\n  int x, y;\n\n  y = 0;\n  x = 1;\n  /*@\n\n\nloop invariant i3: x <= 2;\nloop invariant i4: x == 1 || x == 2;\n\n\n*/\nwhile ( unknown() < 10) {\n    if (x<2) {\n      x=2;\n    } else {\n      x=1;\n    }\n    if (y<1) {\n      y=0;\n    }\n  }\n  {;\n//@ assert(!( x > 2 ));\n}\n\nreturn;\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 10;\nloop invariant x == 1 || x == 2;\nloop invariant x != 0;\nloop invariant y != 2;\nloop invariant x != 3;\nloop invariant y != 0 || x != 1;\nloop invariant y != 1 || x != 1;\nloop invariant y != 2 || x != 2;\nloop invariant y != 3 || x != 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nvoid main()\n{\n  int x, y;\n\n  y = 0;\n  x = 1;\n  /*@\nloop invariant i1: 0 <= y <= 10;\nloop invariant i2: x == 1 || x == 2;\nloop invariant i3: x != 0;\nloop invariant i4: y != 2;\nloop invariant i5: x != 3;\n\n\nloop invariant i8: y != 2 || x != 2;\n\n*/\nwhile ( unknown() < 10) {\n    if (x<2) {\n      x=2;\n    } else {\n      x=1;\n    }\n    if (y<1) {\n      y=0;\n    }\n  }\n  {;\n//@ assert(!( x > 2 ));\n}\n\nreturn;\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 2;\nloop invariant 0 <= y <= 1;\nloop invariant unknown() < 10;\nloop invariant x < 2 ==> x = 2;\nloop invariant x >= 2 ==> x = 1;\nloop invariant y < 1 ==> y = 0;\nloop invariant x < 2 ==> unknown() < 10 - 1;\nloop invariant x >= 2 ==> unknown() < 10;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nvoid main()\n{\n  int x, y;\n\n  y = 0;\n  x = 1;\n  /*@\nloop invariant i1: 0 <= x <= 2;\nloop invariant i2: 0 <= y <= 1;\n\n\n\n\n\n\n*/\nwhile ( unknown() < 10) {\n    if (x<2) {\n      x=2;\n    } else {\n      x=1;\n    }\n    if (y<1) {\n      y=0;\n    }\n  }\n  {;\n//@ assert(!( x > 2 ));\n}\n\nreturn;\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 1;\nloop invariant 1 <= x <= 2;\nloop invariant y < 10;\nloop invariant 0 <= y <= 1;\nloop invariant 1 <= x <= 2;\nloop invariant y < 10;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nvoid main()\n{\n  int x, y;\n\n  y = 0;\n  x = 1;\n  /*@\nloop invariant i1: 0 <= y <= 1;\nloop invariant i2: 1 <= x <= 2;\nloop invariant i3: y < 10;\n*/\nwhile ( unknown() < 10) {\n    if (x<2) {\n      x=2;\n    } else {\n      x=1;\n    }\n    if (y<1) {\n      y=0;\n    }\n  }\n  {;\n//@ assert(!( x > 2 ));\n}\n\nreturn;\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 2;\nloop invariant 0 <= y <= 1;\nloop invariant y < 10;\nloop invariant y < 1 ==> x = 1;\nloop invariant y >= 1 ==> x = 2;\nloop invariant x = 2 ==> y < 1;\nloop invariant x = 1 ==> y >= 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nvoid main()\n{\n  int x, y;\n\n  y = 0;\n  x = 1;\n  /*@\nloop invariant i1: 0 <= x <= 2;\nloop invariant i2: 0 <= y <= 1;\nloop invariant i3: y < 10;\n\n\n\n\n*/\nwhile ( unknown() < 10) {\n    if (x<2) {\n      x=2;\n    } else {\n      x=1;\n    }\n    if (y<1) {\n      y=0;\n    }\n  }\n  {;\n//@ assert(!( x > 2 ));\n}\n\nreturn;\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 10;\nloop invariant x == 1 ==> (x >= 2 && (y >= 0 && y < 10));\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nvoid main()\n{\n  int x, y;\n\n  y = 0;\n  x = 1;\n  /*@\nloop invariant i1: 0 <= y <= 10;\n\n*/\nwhile ( unknown() < 10) {\n    if (x<2) {\n      x=2;\n    } else {\n      x=1;\n    }\n    if (y<1) {\n      y=0;\n    }\n  }\n  {;\n//@ assert(!( x > 2 ));\n}\n\nreturn;\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 10;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nvoid main()\n{\n  int x, y;\n\n  y = 0;\n  x = 1;\n  /*@\nloop invariant i1: 0 <= y <= 10;\n\n*/\nwhile ( unknown() < 10) {\n    if (x<2) {\n      x=2;\n    } else {\n      x=1;\n    }\n    if (y<1) {\n      y=0;\n    }\n  }\n  {;\n//@ assert(!( x > 2 ));\n}\n\nreturn;\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 2;\nloop invariant 0 <= y <= 1;\nloop invariant unknown() < 10 ==> x == 1;\nloop invariant unknown() < 10 ==> y == 0;\nloop invariant unknown() >= 10 ==> x == 2;\nloop invariant 0 <= x <= 2;\nloop invariant 0 <= y <= 1;\nloop invariant unknown() < 10 ==> x == 1;\nloop invariant unknown() < 10 ==> y == 0;\nloop invariant unknown() >= 10 ==> x == 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nvoid main()\n{\n  int x, y;\n\n  y = 0;\n  x = 1;\n  /*@\nloop invariant i1: 0 <= x <= 2;\nloop invariant i2: 0 <= y <= 1;\n\n\n\n*/\nwhile ( unknown() < 10) {\n    if (x<2) {\n      x=2;\n    } else {\n      x=1;\n    }\n    if (y<1) {\n      y=0;\n    }\n  }\n  {;\n//@ assert(!( x > 2 ));\n}\n\nreturn;\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 10;\nloop invariant 1 <= x <= 2;\nloop invariant x == 2 ==> y == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nvoid main()\n{\n  int x, y;\n\n  y = 0;\n  x = 1;\n  /*@\nloop invariant i1: 0 <= y <= 10;\nloop invariant i2: 1 <= x <= 2;\n\n*/\nwhile ( unknown() < 10) {\n    if (x<2) {\n      x=2;\n    } else {\n      x=1;\n    }\n    if (y<1) {\n      y=0;\n    }\n  }\n  {;\n//@ assert(!( x > 2 ));\n}\n\nreturn;\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant y < 1;\nloop invariant 0 <= x <= 2;\nloop invariant x < 2 ==> x == 2;\nloop invariant x >= 2 ==> x == 1;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x < 2 ==> y == 0;\nloop invariant x < 2 ==> y == 1;\nloop invariant x >= 2 ==> y == 1;\nloop invariant x < 2 ==> y == 1;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\nloop invariant x >= 2 ==> y == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nvoid main()\n{\n  int x, y;\n\n  y = 0;\n  x = 1;\n  /*@\nloop invariant i1: y < 1;\nloop invariant i2: 0 <= x <= 2;\n\n\nloop invariant i5: x >= 2 ==> y == 0;\nloop invariant i6: x < 2 ==> y == 0;\n\n\n*/\nwhile ( unknown() < 10) {\n    if (x<2) {\n      x=2;\n    } else {\n      x=1;\n    }\n    if (y<1) {\n      y=0;\n    }\n  }\n  {;\n//@ assert(!( x > 2 ));\n}\n\nreturn;\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= unknown() < 10; loop invariant 0 <= y <= 1; loop invariant 0 <= x <= 2; loop invariant x >= y; loop invariant x != 2 ==> y == 0; loop invariant x >= y ==> x <= 2; loop invariant x <= 2 ==> x >= 1; loop invariant y < 1 ==> x == 1; loop invariant y >= 1 ==> x == 2; loop invariant x == 2 ==> y == 0; loop invariant x == 1 ==> y >= 0; loop invariant x == 1 ==> y < 1; loop invariant x == 2 ==> y < 1; loop invariant x == 1 ==> x <= 2; loop invariant x == 2 ==> x >= 1; loop invariant x == 1 ==> y <= 1; loop invariant x == 2 ==> y >= 0; loop invariant x == 1 ==> y < 1; loop invariant x == 2 ==> y < 1; loop invariant x == 1 ==> y >= 0; loop invariant x == 2 ==> y >= 0; loop invariant x == 1 ==> x <= 2; loop invariant x == 2 ==> x >= 1; loop invariant x == 1 ==> y <= 1; loop invariant x == 2 ==> y >= 0; loop invariant x == 1 ==> y < 1; loop invariant x == 2 ==> y < 1; loop invariant x == 1 ==> y >= 0; loop invariant x == 2 ==> y >= 0; loop invariant x == 1 ==> x <= 2; loop invariant x == 2 ==> x >= 1; loop invariant x == 1 ==> y <= 1; loop invariant x == 2 ==> y >= 0; loop invariant x == 1 ==> y < 1; loop invariant x == 2 ==> y < 1; loop invariant x == 1 ==> y >= 0; loop invariant x == 2 ==> y >= 0; loop invariant x == 1 ==> x <= 2; loop invariant x == 2 ==> x >= 1; loop invariant x == 1 ==> y <= 1; loop invariant x == 2 ==> y >= 0; loop invariant x == 1 ==> y < 1; loop invariant x == 2 ==> y < 1; loop invariant x == 1 ==> y >= 0; loop invariant x == 2 ==> y >= 0; loop invariant x == 1 ==> x <= 2; loop invariant x == 2 ==> x >= 1; loop invariant x == 1 ==> y <= 1; loop invariant x == 2 ==> y >= 0; loop invariant x == 1 ==> y < 1; loop invariant x == 2 ==> y < 1; loop invariant x == 1 ==> y >= 0; loop invariant x == 2 ==> y >= 0; loop invariant x == 1 ==> x <= 2; loop invariant x == 2 ==> x >= 1; loop invariant x == 1 ==> y <= 1; loop invariant x == 2 ==> y >= 0; loop invariant x == 1 ==> y < 1; loop invariant x == 2 ==> y < 1; loop invariant x == 1 ==> y >= 0; loop invariant x == 2 ==> y >= 0; loop invariant x == 1 ==> x <= 2; loop invariant x == 2 ==> x >= 1; loop invariant x == 1 ==> y <= 1; loop invariant x == 2 ==> y >= 0; loop invariant x == 1 ==> y < 1; loop invariant x == 2 ==> y < 1; loop invariant x == 1 ==> y >= 0; loop invariant x == 2 ==> y >= 0; loop invariant x == 1 ==> x <= 2; loop invariant x == 2 ==> x >= 1; loop invariant x == 1 ==> y <= 1; loop invariant x == 2 ==> y >= 0; loop invariant x == 1 ==> y < 1; loop invariant x == 2 ==> y < 1; loop invariant x == 1 ==> y >= 0; loop invariant x == 2 ==> y >= 0; loop invariant x == 1 ==> x <= 2; loop invariant x == 2 ==> x >= 1; loop invariant x == 1 ==> y <= 1; loop invariant x == 2 ==> y >= 0; loop invariant x == 1 ==> y < 1; loop invariant x == 2 ==> y < 1; loop invariant x == 1 ==> y >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nvoid main()\n{\n  int x, y;\n\n  y = 0;\n  x = 1;\n  /*@\n\n*/\nwhile ( unknown() < 10) {\n    if (x<2) {\n      x=2;\n    } else {\n      x=1;\n    }\n    if (y<1) {\n      y=0;\n    }\n  }\n  {;\n//@ assert(!( x > 2 ));\n}\n\nreturn;\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 10;\nloop invariant x == 1 || x == 2;\nloop invariant y == 0 || y == 1; loop invariant unknown() <= 10;\nloop invariant !(x > 2) ==> (y <= 10);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nvoid main()\n{\n  int x, y;\n\n  y = 0;\n  x = 1;\n  /*@\nloop invariant i1: 0 <= y <= 10;\nloop invariant i2: x == 1 || x == 2;\n\nloop invariant i4: !(x > 2) ==> (y <= 10);\n*/\nwhile ( unknown() < 10) {\n    if (x<2) {\n      x=2;\n    } else {\n      x=1;\n    }\n    if (y<1) {\n      y=0;\n    }\n  }\n  {;\n//@ assert(!( x > 2 ));\n}\n\nreturn;\n\n}",
                "checker_output_after_prune": true
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 23: unexpected token ')'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nvoid main()\n{\n  int x, y;\n\n  y = 0;\n  x = 1;\n  /*@\nloop invariant i1: 0 <= x <= 2;\nloop invariant i2: 0 <= y <= 1;\nloop invariant i3: 1 <= x <= 2;\nloop invariant i4: unknown() < 10;\nloop invariant i5: 1 <= y <= 10;\nloop invariant i6: y == 0 || (x == 1 && y == 1) || (x == 2 && y >= 2);\nloop invariant i7: x <= 2;\nloop invariant i8: x == 1 || x == 2;\nloop invariant i9: (x == 1 && y == 0) || (x == 2 && y >= 2);\nloop invariant i10: x == 1 || (x == 2 && y >= 2);\nloop invariant i11: 0 <= y <= 10;\nloop invariant i12: x != 0;\nloop invariant i13: y != 2;\nloop invariant i14: x != 3;\nloop invariant i15: y != 0 || x != 1;\nloop invariant i16: y != 1 || x != 1;\nloop invariant i17: y != 2 || x != 2;\nloop invariant i18: y != 3 || x != 2;\nloop invariant i19: x < 2 ==> x = 2;\nloop invariant i20: x >= 2 ==> x = 1;\nloop invariant i21: y < 1 ==> y = 0;\nloop invariant i22: x < 2 ==> unknown() < 10 - 1;\nloop invariant i23: x >= 2 ==> unknown() < 10;\nloop invariant i24: y < 10;\nloop invariant i25: y < 1 ==> x = 1;\nloop invariant i26: y >= 1 ==> x = 2;\nloop invariant i27: x = 2 ==> y < 1;\nloop invariant i28: x = 1 ==> y >= 1;\nloop invariant i29: x == 1 ==> (x >= 2 && (y >= 0 && y < 10));\nloop invariant i30: x >= (1 + (y - 1) * y / 2);\nloop invariant i31: unknown() < 10 ==> x == 1;\nloop invariant i32: unknown() < 10 ==> y == 0;\nloop invariant i33: unknown() >= 10 ==> x == 2;\nloop invariant i34: x == 2 ==> y == 0;\nloop invariant i35: y < 1;\nloop invariant i36: x < 2 ==> x == 2;\nloop invariant i37: x >= 2 ==> x == 1;\nloop invariant i38: x >= 2 ==> y == 0;\nloop invariant i39: x < 2 ==> y == 0;\nloop invariant i40: x < 2 ==> y == 1;\nloop invariant i41: x >= 2 ==> y == 1;\nloop invariant i42: 0 <= unknown() < 10; loop invariant 0 <= y <= 1; loop invariant 0 <= x <= 2; loop invariant x >= y; loop invariant x != 2 ==> y == 0; loop invariant x >= y ==> x <= 2; loop invariant x <= 2 ==> x >= 1; loop invariant y < 1 ==> x == 1; loop invariant y >= 1 ==> x == 2; loop invariant x == 2 ==> y == 0; loop invariant x == 1 ==> y >= 0; loop invariant x == 1 ==> y < 1; loop invariant x == 2 ==> y < 1; loop invariant x == 1 ==> x <= 2; loop invariant x == 2 ==> x >= 1; loop invariant x == 1 ==> y <= 1; loop invariant x == 2 ==> y >= 0; loop invariant x == 1 ==> y < 1; loop invariant x == 2 ==> y < 1; loop invariant x == 1 ==> y >= 0; loop invariant x == 2 ==> y >= 0; loop invariant x == 1 ==> x <= 2; loop invariant x == 2 ==> x >= 1; loop invariant x == 1 ==> y <= 1; loop invariant x == 2 ==> y >= 0; loop invariant x == 1 ==> y < 1; loop invariant x == 2 ==> y < 1; loop invariant x == 1 ==> y >= 0; loop invariant x == 2 ==> y >= 0; loop invariant x == 1 ==> x <= 2; loop invariant x == 2 ==> x >= 1; loop invariant x == 1 ==> y <= 1; loop invariant x == 2 ==> y >= 0; loop invariant x == 1 ==> y < 1; loop invariant x == 2 ==> y < 1; loop invariant x == 1 ==> y >= 0; loop invariant x == 2 ==> y >= 0; loop invariant x == 1 ==> x <= 2; loop invariant x == 2 ==> x >= 1; loop invariant x == 1 ==> y <= 1; loop invariant x == 2 ==> y >= 0; loop invariant x == 1 ==> y < 1; loop invariant x == 2 ==> y < 1; loop invariant x == 1 ==> y >= 0; loop invariant x == 2 ==> y >= 0; loop invariant x == 1 ==> x <= 2; loop invariant x == 2 ==> x >= 1; loop invariant x == 1 ==> y <= 1; loop invariant x == 2 ==> y >= 0; loop invariant x == 1 ==> y < 1; loop invariant x == 2 ==> y < 1; loop invariant x == 1 ==> y >= 0; loop invariant x == 2 ==> y >= 0; loop invariant x == 1 ==> x <= 2; loop invariant x == 2 ==> x >= 1; loop invariant x == 1 ==> y <= 1; loop invariant x == 2 ==> y >= 0; loop invariant x == 1 ==> y < 1; loop invariant x == 2 ==> y < 1; loop invariant x == 1 ==> y >= 0; loop invariant x == 2 ==> y >= 0; loop invariant x == 1 ==> x <= 2; loop invariant x == 2 ==> x >= 1; loop invariant x == 1 ==> y <= 1; loop invariant x == 2 ==> y >= 0; loop invariant x == 1 ==> y < 1; loop invariant x == 2 ==> y < 1; loop invariant x == 1 ==> y >= 0; loop invariant x == 2 ==> y >= 0; loop invariant x == 1 ==> x <= 2; loop invariant x == 2 ==> x >= 1; loop invariant x == 1 ==> y <= 1; loop invariant x == 2 ==> y >= 0; loop invariant x == 1 ==> y < 1; loop invariant x == 2 ==> y < 1; loop invariant x == 1 ==> y >= 0; loop invariant x == 2 ==> y >= 0; loop invariant x == 1 ==> x <= 2; loop invariant x == 2 ==> x >= 1; loop invariant x == 1 ==> y <= 1; loop invariant x == 2 ==> y >= 0; loop invariant x == 1 ==> y < 1; loop invariant x == 2 ==> y < 1; loop invariant x == 1 ==> y >= 0;\nloop invariant i43: y == 0 || y == 1; loop invariant unknown() <= 10;\nloop invariant i44: !(x > 2) ==> (y <= 10);\n*/\nwhile ( unknown() < 10) {\n    if (x<2) {\n      x=2;\n    } else {\n      x=1;\n    }\n    if (y<1) {\n      y=0;\n    }\n  }\n  {;\n//@ assert(!( x > 2 ));\n}\n\nreturn;\n\n}",
        "combined_annotation_num_solver_calls": 25,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nvoid main()\n{\n  int x, y;\n\n  y = 0;\n  x = 1;\n  /*@\nloop invariant i1: 0 <= x <= 2;\nloop invariant i2: 0 <= y <= 1;\nloop invariant i3: 1 <= x <= 2;\n\n\nloop invariant i6: y == 0 || (x == 1 && y == 1) || (x == 2 && y >= 2);\nloop invariant i7: x <= 2;\nloop invariant i8: x == 1 || x == 2;\n\n\nloop invariant i11: 0 <= y <= 10;\nloop invariant i12: x != 0;\nloop invariant i13: y != 2;\nloop invariant i14: x != 3;\n\nloop invariant i16: y != 1 || x != 1;\nloop invariant i17: y != 2 || x != 2;\nloop invariant i18: y != 3 || x != 2;\n\n\n\n\n\nloop invariant i24: y < 10;\n\n\n\n\n\nloop invariant i30: x >= (1 + (y - 1) * y / 2);\n\n\n\nloop invariant i34: x == 2 ==> y == 0;\nloop invariant i35: y < 1;\n\n\nloop invariant i38: x >= 2 ==> y == 0;\nloop invariant i39: x < 2 ==> y == 0;\n\n\n\n\nloop invariant i44: !(x > 2) ==> (y <= 10);\n*/\nwhile ( unknown() < 10) {\n    if (x<2) {\n      x=2;\n    } else {\n      x=1;\n    }\n    if (y<1) {\n      y=0;\n    }\n  }\n  {;\n//@ assert(!( x > 2 ));\n}\n\nreturn;\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c"
        ],
        "failure": [],
        "skipped": [],
        "total": 23,
        "success_count": 23,
        "failure_count": 0,
        "success_rate": 1.0
    }
}