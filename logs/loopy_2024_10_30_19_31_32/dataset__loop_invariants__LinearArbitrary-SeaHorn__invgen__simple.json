{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nvoid main() {\n  int x=0;\n  int n = unknown();\n  \n  assume(n > 0 );\n  while( x < n ){\n    x++;\n  }\n  {;\n//@ assert( x<=n );\n}\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 1 >= x >= n;\nloop invariant x < n ==> x >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant (x == n) ==> (x <= n);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x <= n;\nloop invariant x < n ==> x+1 <= n;\n*/\n```",
            "```\n/*@\nloop invariant n > 0;\nloop invariant 0 <= x <= n;\nloop invariant x <= n;\nloop invariant x <= n ==> n > 0;\nloop invariant x <= n ==> x >= 0;\nloop invariant x <= n ==> x <= n;\nloop invariant x <= n ==> x >= 0;\nloop invariant x <= n ==> x <= n;\nloop invariant x <= n ==> x >= 0;\nloop invariant x <= n ==> x <= n;\nloop invariant x <= n ==> x >= 0;\nloop invariant x <= n ==> x <= n;\nloop invariant x <= n ==> x >= 0;\nloop invariant x <= n ==> x <= n;\nloop invariant x <= n ==> x >= 0;\nloop invariant x <= n ==> x <= n;\nloop invariant x <= n ==> x >= 0;\nloop invariant x <= n ==> x <= n;\nloop invariant x <= n ==> x >= 0;\nloop invariant x <= n ==> x <= n;\nloop invariant x <= n ==> x >= 0;\nloop invariant x <= n ==> x <= n;\nloop invariant x <= n ==> x >= 0;\nloop invariant x <= n ==> x <= n;\nloop invariant x <= n ==> x >= 0;\nloop invariant x <= n ==> x <= n;\nloop invariant x <= n ==> x >= 0;\nloop invariant x <= n ==> x <= n;\nloop invariant x <= n ==> x >= 0;\nloop invariant x <= n ==> x <= n;\nloop invariant x <= n ==> x >= 0;\nloop invariant x <= n ==> x <= n;\nloop invariant x <= n ==> x >= 0;\nloop invariant x <= n ==> x <= n;\nloop invariant x <= n ==> x >= 0;\nloop invariant x <= n ==> x <= n;\nloop invariant x <= n ==> x >= 0;\nloop invariant x <= n ==> x <= n;\nloop invariant x <= n ==> x >= 0;\nloop invariant x <= n ==> x <= n;\nloop invariant x <= n ==> x >= 0;\nloop invariant x <= n ==> x <= n;\nloop invariant x <= n ==> x >= 0;\nloop invariant x <= n ==> x <= n;\nloop invariant x <= n ==> x >= 0;\nloop invariant x <= n ==> x <= n;\nloop invariant x <= n ==> x >= 0;\nloop invariant x <= n ==> x <= n;\nloop invariant x <= n ==> x >= 0;\nloop invariant x <= n ==> x <= n;\nloop invariant x <= n ==> x >= 0;\nloop invariant x <= n ==> x <= n;\nloop invariant x <= n ==> x >= 0;\nloop invariant x <= n ==> x <= n;\nloop invariant x <= n ==> x >= 0;\nloop invariant x <= n ==> x <= n;\nloop invariant x <= n ==> x >= 0;\nloop invariant x <= n ==> x <= n;\nloop invariant x <= n ==> x >= 0;\nloop invariant x <= n ==> x <= n;\nloop invariant x <= n ==> x >= 0;\nloop invariant x <= n ==> x <= n;\nloop invariant x <= n ==> x >= 0;\nloop invariant x <= n ==> x <= n;\nloop invariant x <= n ==> x >= 0;\nloop invariant x <= n ==> x <= n;\nloop invariant x <= n ==> x >= 0;\nloop invariant x <= n ==> x <= n;\nloop invariant x <= n ==> x >= 0;\nloop invariant x <= n ==> x <= n;\nloop invariant x <= n ==> x >= 0;\nloop invariant x <= n ==> x <= n;\nloop invariant x <= n ==> x >= 0;\nloop invariant x <= n ==> x <= n;\nloop invariant x <= n ==> x >= 0;\nloop invariant x <= n ==> x <= n;\nloop invariant x <= n ==> x >= 0;\nloop invariant x <= n ==> x <= n;\nloop invariant x <= n ==> x >= 0;\nloop invariant x <= n ==> x <= n;\nloop invariant x <= n ==> x >= 0;\nloop invariant x <= n ==> x <= n;\nloop invariant x <= n ==> x >= 0;\nloop invariant x <= n ==> x <= n;\nloop invariant x <= n ==> x >= 0;\nloop invariant x <= n ==> x <= n;\nloop invariant x <= n ==> x >= 0;\nloop invariant x <= n ==> x <= n;\nloop invariant x <= n ==> x >= 0;\nloop invariant x <= n ==> x <= n;\nloop invariant x <= n ==> x >= 0;\nloop invariant x <= n ==> x <= n;\nloop invariant x <= n ==> x >= 0;\nloop invariant x <= n ==> x <= n;\nloop invariant x <= n ==> x >= 0;\nloop invariant x <= n ==> x <= n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x == n;\nloop invariant n > 0 ==> x <= n;\nloop invariant n <= 0 ==> x == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n; loop invariant x == n; loop invariant x > n; loop invariant x <= n; loop invariant x >= n; loop invariant x < n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x >= 0;\nloop invariant x < n;\nloop invariant x == n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x+1 >= n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nvoid main() {\n  int x=0;\n  int n = unknown();\n  \n  assume(n > 0 );\n  /*@\nloop invariant i1: 0 <= x <= n;\nloop invariant i2: x <= n;\n*/\nwhile( x < n ){\n    x++;\n  }\n  {;\n//@ assert( x<=n );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nvoid main() {\n  int x=0;\n  int n = unknown();\n  \n  assume(n > 0 );\n  /*@\nloop invariant i1: 0 <= x <= n;\nloop invariant i2: x >= 0;\n*/\nwhile( x < n ){\n    x++;\n  }\n  {;\n//@ assert( x<=n );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 1 >= x >= n;\nloop invariant x < n ==> x >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nvoid main() {\n  int x=0;\n  int n = unknown();\n  \n  assume(n > 0 );\n  /*@\n\nloop invariant i2: x < n ==> x >= 0;\n*/\nwhile( x < n ){\n    x++;\n  }\n  {;\n//@ assert( x<=n );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant (x == n) ==> (x <= n);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nvoid main() {\n  int x=0;\n  int n = unknown();\n  \n  assume(n > 0 );\n  /*@\nloop invariant i1: 0 <= x <= n;\nloop invariant i2: (x == n) ==> (x <= n);\n*/\nwhile( x < n ){\n    x++;\n  }\n  {;\n//@ assert( x<=n );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x <= n;\nloop invariant x < n ==> x+1 <= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nvoid main() {\n  int x=0;\n  int n = unknown();\n  \n  assume(n > 0 );\n  /*@\nloop invariant i1: 0 <= x <= n;\nloop invariant i2: x <= n;\nloop invariant i3: x < n ==> x+1 <= n;\n*/\nwhile( x < n ){\n    x++;\n  }\n  {;\n//@ assert( x<=n );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant n > 0;\nloop invariant 0 <= x <= n;\nloop invariant x <= n;\nloop invariant x <= n ==> n > 0;\nloop invariant x <= n ==> x >= 0;\nloop invariant x <= n ==> x <= n;\nloop invariant x <= n ==> x >= 0;\nloop invariant x <= n ==> x <= n;\nloop invariant x <= n ==> x >= 0;\nloop invariant x <= n ==> x <= n;\nloop invariant x <= n ==> x >= 0;\nloop invariant x <= n ==> x <= n;\nloop invariant x <= n ==> x >= 0;\nloop invariant x <= n ==> x <= n;\nloop invariant x <= n ==> x >= 0;\nloop invariant x <= n ==> x <= n;\nloop invariant x <= n ==> x >= 0;\nloop invariant x <= n ==> x <= n;\nloop invariant x <= n ==> x >= 0;\nloop invariant x <= n ==> x <= n;\nloop invariant x <= n ==> x >= 0;\nloop invariant x <= n ==> x <= n;\nloop invariant x <= n ==> x >= 0;\nloop invariant x <= n ==> x <= n;\nloop invariant x <= n ==> x >= 0;\nloop invariant x <= n ==> x <= n;\nloop invariant x <= n ==> x >= 0;\nloop invariant x <= n ==> x <= n;\nloop invariant x <= n ==> x >= 0;\nloop invariant x <= n ==> x <= n;\nloop invariant x <= n ==> x >= 0;\nloop invariant x <= n ==> x <= n;\nloop invariant x <= n ==> x >= 0;\nloop invariant x <= n ==> x <= n;\nloop invariant x <= n ==> x >= 0;\nloop invariant x <= n ==> x <= n;\nloop invariant x <= n ==> x >= 0;\nloop invariant x <= n ==> x <= n;\nloop invariant x <= n ==> x >= 0;\nloop invariant x <= n ==> x <= n;\nloop invariant x <= n ==> x >= 0;\nloop invariant x <= n ==> x <= n;\nloop invariant x <= n ==> x >= 0;\nloop invariant x <= n ==> x <= n;\nloop invariant x <= n ==> x >= 0;\nloop invariant x <= n ==> x <= n;\nloop invariant x <= n ==> x >= 0;\nloop invariant x <= n ==> x <= n;\nloop invariant x <= n ==> x >= 0;\nloop invariant x <= n ==> x <= n;\nloop invariant x <= n ==> x >= 0;\nloop invariant x <= n ==> x <= n;\nloop invariant x <= n ==> x >= 0;\nloop invariant x <= n ==> x <= n;\nloop invariant x <= n ==> x >= 0;\nloop invariant x <= n ==> x <= n;\nloop invariant x <= n ==> x >= 0;\nloop invariant x <= n ==> x <= n;\nloop invariant x <= n ==> x >= 0;\nloop invariant x <= n ==> x <= n;\nloop invariant x <= n ==> x >= 0;\nloop invariant x <= n ==> x <= n;\nloop invariant x <= n ==> x >= 0;\nloop invariant x <= n ==> x <= n;\nloop invariant x <= n ==> x >= 0;\nloop invariant x <= n ==> x <= n;\nloop invariant x <= n ==> x >= 0;\nloop invariant x <= n ==> x <= n;\nloop invariant x <= n ==> x >= 0;\nloop invariant x <= n ==> x <= n;\nloop invariant x <= n ==> x >= 0;\nloop invariant x <= n ==> x <= n;\nloop invariant x <= n ==> x >= 0;\nloop invariant x <= n ==> x <= n;\nloop invariant x <= n ==> x >= 0;\nloop invariant x <= n ==> x <= n;\nloop invariant x <= n ==> x >= 0;\nloop invariant x <= n ==> x <= n;\nloop invariant x <= n ==> x >= 0;\nloop invariant x <= n ==> x <= n;\nloop invariant x <= n ==> x >= 0;\nloop invariant x <= n ==> x <= n;\nloop invariant x <= n ==> x >= 0;\nloop invariant x <= n ==> x <= n;\nloop invariant x <= n ==> x >= 0;\nloop invariant x <= n ==> x <= n;\nloop invariant x <= n ==> x >= 0;\nloop invariant x <= n ==> x <= n;\nloop invariant x <= n ==> x >= 0;\nloop invariant x <= n ==> x <= n;\nloop invariant x <= n ==> x >= 0;\nloop invariant x <= n ==> x <= n;\nloop invariant x <= n ==> x >= 0;\nloop invariant x <= n ==> x <= n;\nloop invariant x <= n ==> x >= 0;\nloop invariant x <= n ==> x <= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nvoid main() {\n  int x=0;\n  int n = unknown();\n  \n  assume(n > 0 );\n  /*@\nloop invariant i1: n > 0;\nloop invariant i2: 0 <= x <= n;\nloop invariant i3: x <= n;\nloop invariant i4: x <= n ==> n > 0;\nloop invariant i5: x <= n ==> x >= 0;\nloop invariant i6: x <= n ==> x <= n;\n*/\nwhile( x < n ){\n    x++;\n  }\n  {;\n//@ assert( x<=n );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nvoid main() {\n  int x=0;\n  int n = unknown();\n  \n  assume(n > 0 );\n  /*@\nloop invariant i1: 0 <= x <= n;\nloop invariant i2: x >= 0;\n*/\nwhile( x < n ){\n    x++;\n  }\n  {;\n//@ assert( x<=n );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nvoid main() {\n  int x=0;\n  int n = unknown();\n  \n  assume(n > 0 );\n  /*@\nloop invariant i1: 0 <= x <= n;\n*/\nwhile( x < n ){\n    x++;\n  }\n  {;\n//@ assert( x<=n );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x == n;\nloop invariant n > 0 ==> x <= n;\nloop invariant n <= 0 ==> x == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nvoid main() {\n  int x=0;\n  int n = unknown();\n  \n  assume(n > 0 );\n  /*@\nloop invariant i1: 0 <= x <= n;\n\nloop invariant i3: n > 0 ==> x <= n;\nloop invariant i4: n <= 0 ==> x == 0;\n*/\nwhile( x < n ){\n    x++;\n  }\n  {;\n//@ assert( x<=n );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n; loop invariant x == n; loop invariant x > n; loop invariant x <= n; loop invariant x >= n; loop invariant x < n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nvoid main() {\n  int x=0;\n  int n = unknown();\n  \n  assume(n > 0 );\n  /*@\nloop invariant i1: 0 <= x <= n; loop invariant x == n; loop invariant x > n; loop invariant x <= n; loop invariant x >= n; loop invariant x < n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n;\n*/\nwhile( x < n ){\n    x++;\n  }\n  {;\n//@ assert( x<=n );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nvoid main() {\n  int x=0;\n  int n = unknown();\n  \n  assume(n > 0 );\n  /*@\nloop invariant i1: 0 <= x <= n;\n*/\nwhile( x < n ){\n    x++;\n  }\n  {;\n//@ assert( x<=n );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x >= 0;\nloop invariant x < n;\nloop invariant x == n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nvoid main() {\n  int x=0;\n  int n = unknown();\n  \n  assume(n > 0 );\n  /*@\nloop invariant i1: 0 <= x <= n;\nloop invariant i2: x >= 0;\n\n\n*/\nwhile( x < n ){\n    x++;\n  }\n  {;\n//@ assert( x<=n );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nvoid main() {\n  int x=0;\n  int n = unknown();\n  \n  assume(n > 0 );\n  /*@\nloop invariant i1: 0 <= x <= n;\n*/\nwhile( x < n ){\n    x++;\n  }\n  {;\n//@ assert( x<=n );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x+1 >= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nvoid main() {\n  int x=0;\n  int n = unknown();\n  \n  assume(n > 0 );\n  /*@\nloop invariant i1: 0 <= x <= n;\n\n*/\nwhile( x < n ){\n    x++;\n  }\n  {;\n//@ assert( x<=n );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nvoid main() {\n  int x=0;\n  int n = unknown();\n  \n  assume(n > 0 );\n  /*@\nloop invariant i1: 0 <= x <= n;\nloop invariant i2: x <= n;\n*/\nwhile( x < n ){\n    x++;\n  }\n  {;\n//@ assert( x<=n );\n}\n\n}",
                "checker_output_after_prune": true
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "loop invariant 0 <= x <= n is partially proven to be inductive.\nloop invariant x <= n is partially proven to be inductive.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant 1 >= x >= n is preserved but not established.\nloop invariant x < n ==> x >= 0 is partially proven to be inductive.\nloop invariant (x == n) ==> (x <= n) is partially proven to be inductive.\nloop invariant x < n ==> x+1 <= n is partially proven to be inductive.\nloop invariant n > 0 is partially proven to be inductive.\nloop invariant x <= n ==> n > 0 is partially proven to be inductive.\nloop invariant x <= n ==> x >= 0 is partially proven to be inductive.\nloop invariant x <= n ==> x <= n is partially proven to be inductive.\nloop invariant x == n is partially proven to be inductive.\nloop invariant n > 0 ==> x <= n is partially proven to be inductive.\nloop invariant n <= 0 ==> x == 0 is partially proven to be inductive.\nloop invariant 0 <= x <= n; loop invariant x == n; loop invariant x > n; loop invariant x <= n; loop invariant x >= n; loop invariant x < n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n is partially proven to be inductive.\nloop invariant x < n is partially proven to be inductive.\nloop invariant x+1 >= n is partially proven to be inductive.\nAssertion x <= n: Partially proven",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nvoid main() {\n  int x=0;\n  int n = unknown();\n  \n  assume(n > 0 );\n  /*@\nloop invariant i1: 0 <= x <= n;\nloop invariant i2: x <= n;\nloop invariant i3: x >= 0;\nloop invariant i4: 1 >= x >= n;\nloop invariant i5: x < n ==> x >= 0;\nloop invariant i6: (x == n) ==> (x <= n);\nloop invariant i7: x < n ==> x+1 <= n;\nloop invariant i8: n > 0;\nloop invariant i9: x <= n ==> n > 0;\nloop invariant i10: x <= n ==> x >= 0;\nloop invariant i11: x <= n ==> x <= n;\nloop invariant i12: x == n;\nloop invariant i13: n > 0 ==> x <= n;\nloop invariant i14: n <= 0 ==> x == 0;\nloop invariant i15: 0 <= x <= n; loop invariant x == n; loop invariant x > n; loop invariant x <= n; loop invariant x >= n; loop invariant x < n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n;\nloop invariant i16: x < n;\nloop invariant i17: x+1 >= n;\n*/\nwhile( x < n ){\n    x++;\n  }\n  {;\n//@ assert( x<=n );\n}\n\n}",
        "combined_annotation_num_solver_calls": 4,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nvoid main() {\n  int x=0;\n  int n = unknown();\n  \n  assume(n > 0 );\n  /*@\nloop invariant i1: 0 <= x <= n;\nloop invariant i2: x <= n;\nloop invariant i3: x >= 0;\n\nloop invariant i5: x < n ==> x >= 0;\nloop invariant i6: (x == n) ==> (x <= n);\nloop invariant i7: x < n ==> x+1 <= n;\nloop invariant i8: n > 0;\nloop invariant i9: x <= n ==> n > 0;\nloop invariant i10: x <= n ==> x >= 0;\nloop invariant i11: x <= n ==> x <= n;\n\nloop invariant i13: n > 0 ==> x <= n;\nloop invariant i14: n <= 0 ==> x == 0;\nloop invariant i15: 0 <= x <= n; loop invariant x == n; loop invariant x > n; loop invariant x <= n; loop invariant x >= n; loop invariant x < n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n; loop invariant x != n;\nloop invariant i16: x < n;\nloop invariant i17: x+1 >= n;\n*/\nwhile( x < n ){\n    x++;\n  }\n  {;\n//@ assert( x<=n );\n}\n\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c"
        ],
        "skipped": [],
        "total": 36,
        "success_count": 31,
        "failure_count": 5,
        "success_rate": 0.8611111111111112
    }
}