{
    "logs": {
        "file": "../dataset/loop_invariants/code2inv/12.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  assume((x >= 0));\n  assume((x <= 10));\n  assume((y <= 10));\n  assume((y >= 0));\n  \n  while (unknown()) {\n    {\n    (x  = (x + 10));\n    (y  = (y + 10));\n    }\n\n  }\n  \nif ( (y == 0) )\n{;\n//@ assert( (x != 20) );\n}\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= y <= 10;\nloop invariant 0 <= x <= 10;\nloop invariant x >= y + 10 * (1 + y) / 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 20 and 0 <= y <= 20;\nloop invariant \\forall int z1; 0 <= z1 <= 20 ==> (x >= z1);\nloop invariant \\forall int z2; 0 <= z2 <= 20 ==> (y >= z2);\nloop invariant \\forall int z3; 0 <= z3 <= 20 ==> (x >= z3 + z3 * z3 / 2);\nloop invariant \\forall int z4; 0 <= z4 <= 20 ==> (y >= z4 + z4 * z4 / 2);\nloop invariant (x == 20) ==> (y == 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 10;\nloop invariant 0 <= y <= 10;\nloop invariant x <= y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 30; loop invariant 0 <= y <= 20; loop invariant x >= y; loop invariant y <= 10; loop invariant x >= 0; loop invariant x <= 30; loop invariant y >= 0; loop invariant y <= 20; loop invariant x >= y; loop invariant y <= 10;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 10;\nloop invariant 0 <= y <= 10;\nloop invariant x + 10 * (y + 1) <= 20;\nloop invariant x + 10 * (y + 1) > 10;\nloop invariant x + 10 * (y + 1) >= 0;\nloop invariant x + 10 * (y + 1) <= 20;\nloop invariant x + 10 * (y + 1) > 10;\nloop invariant x + 10 * (y + 1) >= 0;\nloop invariant x + 10 * (y + 1) <= 20;\nloop invariant x + 10 * (y + 1) > 10;\nloop invariant x + 10 * (y + 1) >= 0;\nloop invariant x + 10 * (y + 1) <= 20;\nloop invariant x + 10 * (y + 1) > 10;\nloop invariant x + 10 * (y + 1) >= 0;\nloop invariant x + 10 * (y + 1) <= 20;\nloop invariant x + 10 * (y + 1) > 10;\nloop invariant x + 10 * (y + 1) >= 0;\nloop invariant x + 10 * (y + 1) <= 20;\nloop invariant x + 10 * (y + 1) > 10;\nloop invariant x + 10 * (y + 1) >= 0;\nloop invariant x + 10 * (y + 1) <= 20;\nloop invariant x + 10 * (y + 1) > 10;\nloop invariant x + 10 * (y + 1) >= 0;\nloop invariant x + 10 * (y + 1) <= 20;\nloop invariant x + 10 * (y + 1) > 10;\nloop invariant x + 10 * (y + 1) >= 0;\nloop invariant x + 10 * (y + 1) <= 20;\nloop invariant x + 10 * (y + 1) > 10;\nloop invariant x + 10 * (y + 1) >= 0;\nloop invariant x + 10 * (y + 1) <= 20;\nloop invariant x + 10 * (y + 1) > 10;\nloop invariant x + 10 * (y + 1) >= 0;\nloop invariant x + 10 * (y + 1) <= 20;\nloop invariant x + 10 * (y + 1) > 10;\nloop invariant x + 10 * (y + 1) >= 0;\nloop invariant x + 10 * (y + 1) <= 20;\nloop invariant x + 10 * (y + 1) > 10;\nloop invariant x + 10 * (y + 1) >= 0;\nloop invariant x + 10 * (y + 1) <= 20;\nloop invariant x + 10 * (y + 1) > 10;\nloop invariant x + 10 * (y + 1) >= 0;\nloop invariant x + 10 * (y + 1) <= 20;\nloop invariant x + 10 * (y + 1) > 10;\nloop invariant x + 10 * (y + 1) >= 0;\nloop invariant x + 10 * (y + 1) <= 20;\nloop invariant x + 10 * (y + 1) > 10;\nloop invariant x + 10 * (y + 1) >= 0;\nloop invariant x + 10 * (y + 1) <= 20;\nloop invariant x + 10 * (y + 1) > 10;\nloop invariant x + 10 * (y + 1) >= 0;\nloop invariant x + 10 * (y + 1) <= 20;\nloop invariant x + 10 * (y + 1) > 10;\nloop invariant x + 10 * (y + 1) >= 0;\nloop invariant x + 10 * (y + 1) <= 20;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 10;\nloop invariant 0 <= y <= 10;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant (x + y) >= 0;\nloop invariant (x + y) <= 20;\nloop invariant (x + y) == 0 ==> (x != 20);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 10;\nloop invariant 0 <= y <= 10;\nloop invariant x <= 10;\nloop invariant y <= 10;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant x <= y + 10;\nloop invariant x <= y + 10 + 10;\nloop invariant x <= y + 10 + 10 + 10;\nloop invariant x <= y + 10 + 10 + 10 + 10;\nloop invariant x <= y + 10 + 10 + 10 + 10 + 10;\nloop invariant x <= y + 10 + 10 + 10 + 10 + 10 + 10;\nloop invariant x <= y + 10 + 10 + 10 + 10 + 10 + 10 + 10;\nloop invariant x <= y + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10;\nloop invariant x <= y + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10;\nloop invariant x <= y + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10;\nloop invariant x <= y + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10;\nloop invariant x <= y + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10;\nloop invariant x <= y + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10;\nloop invariant x <= y + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10;\nloop invariant x <= y + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10;\nloop invariant x <= y + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10;\nloop invariant x <= y + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10;\nloop invariant x <= y + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10;\nloop invariant x <= y + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 10;\nloop invariant 0 <= y <= 10;\nloop invariant (x <= 20) ==> (y >= 0);\nloop invariant (x <= 20) ==> (y <= 10);\nloop invariant (x <= 20) ==> (y != 0);\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= 20;\nloop invariant 0 <= y <= 20;\nloop invariant z1 >= 0;\nloop invariant z2 >= 0;\nloop invariant z3 >= 0;\nloop invariant x <= y;\nloop invariant y <= x + 10;\nloop invariant z1 <= x;\nloop invariant z2 <= y;\nloop invariant z3 <= z1 + z2;\nloop invariant z1 + z2 >= x;\nloop invariant z2 + z3 >= y;\nloop invariant z1 + z2 + z3 >= x + y;\nloop invariant z1 + z2 + z3 <= x + y + 10;\nloop invariant z1 + z2 + z3 >= x;\nloop invariant z1 + z2 + z3 <= x + 10;\nloop invariant z1 + z2 + z3 >= y;\nloop invariant z1 + z2 + z3 <= y + 10;\nloop invariant z1 + z2 + z3 >= x + y;\nloop invariant z1 + z2 + z3 <= x + y + 10;\nloop invariant z1 + z2 + z3 >= x + y;\nloop invariant z1 + z2 + z3 <= x + y + 10;\nloop invariant z1 + z2 + z3 >= x + y;\nloop invariant z1 + z2 + z3 <= x + y + 10;\nloop invariant z1 + z2 + z3 >= x + y;\nloop invariant z1 + z2 + z3 <= x + y + 10;\nloop invariant z1 + z2 + z3 >= x + y;\nloop invariant z1 + z2 + z3 <= x + y + 10;\nloop invariant z1 + z2 + z3 >= x + y;\nloop invariant z1 + z2 + z3 <= x + y + 10;\nloop invariant z1 + z2 + z3 >= x + y;\nloop invariant z1 + z2 + z3 <= x + y + 10;\nloop invariant z1 + z2 + z3 >= x + y;\nloop invariant z1 + z2 + z3 <= x + y + 10;\nloop invariant z1 + z2 + z3 >= x + y;\nloop invariant z1 + z2 + z3 <= x + y + 10;\nloop invariant z1 + z2 + z3 >= x + y;\nloop invariant z1 + z2 + z3 <= x + y + 10;\nloop invariant z1 + z2 + z3 >= x + y;\nloop invariant z1 + z2 + z3 <= x + y + 10;\nloop invariant z1 + z2 + z3 >= x + y;\nloop invariant z1 + z2 + z3 <= x + y + 10;\nloop invariant z1 + z2 + z3 >= x + y;\nloop invariant z1 + z2 + z3 <= x + y + 10;\nloop invariant z1 + z2 + z3 >= x + y;\nloop invariant z1 + z2 + z3 <= x + y + 10;\nloop invariant z1 + z2 + z3 >= x + y;\nloop invariant z1 + z2 + z3 <= x + y + 10;\nloop invariant z1 + z2 + z3 >= x + y;\nloop invariant z1 + z2 + z3 <= x + y + 10;\nloop invariant z1 + z2 + z3 >= x + y;\nloop invariant z1 + z2 + z3 <= x + y + 10;\nloop invariant z1 + z2 + z3 >= x + y;\nloop invariant z1 + z2 + z3 <= x + y + 10;\nloop invariant z1 + z2 + z3 >= x + y;\nloop invariant z1 + z2 + z3 <= x + y + 10;\nloop invariant z1 + z2 + z3 >= x + y;\nloop invariant z1 + z2 + z3 <= x + y + 10;\nloop invariant z1 + z2 + z3 >= x + y;\nloop invariant z1 + z2 + z3 <= x + y + 10;\nloop invariant z1 + z2 + z3 >= x + y;\nloop invariant z1 + z2 + z3 <= x + y + 10;\nloop invariant z1 + z2 + z3 >= x + y;\nloop invariant z1 + z2 + z3 <= x + y + 10;\nloop invariant z1 + z2 + z3 >= x + y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 10;\nloop invariant 0 <= y <= 10;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant z1 >= 0;\nloop invariant z2 >= 0;\nloop invariant z3 >= 0;\nloop invariant x <= 10;\nloop invariant y <= 10;\nloop invariant z1 <= 10;\nloop invariant z2 <= 10;\nloop invariant z3 <= 10;\nloop invariant x == 10 ==> y == 0;\nloop invariant x == 10 ==> z1 == 10;\nloop invariant x == 10 ==> z2 == 10;\nloop invariant x == 10 ==> z3 == 10;\nloop invariant x == 0 ==> y == 0;\nloop invariant x == 0 ==> z1 == 0;\nloop invariant x == 0 ==> z2 == 0;\nloop invariant x == 0 ==> z3 == 0;\nloop invariant x == 1 ==> y == 1;\nloop invariant x == 1 ==> z1 == 1;\nloop invariant x == 1 ==> z2 == 1;\nloop invariant x == 1 ==> z3 == 1;\nloop invariant x == 2 ==> y == 2;\nloop invariant x == 2 ==> z1 == 2;\nloop invariant x == 2 ==> z2 == 2;\nloop invariant x == 2 ==> z3 == 2;\nloop invariant x == 3 ==> y == 3;\nloop invariant x == 3 ==> z1 == 3;\nloop invariant x == 3 ==> z2 == 3;\nloop invariant x == 3 ==> z3 == 3;\nloop invariant x == 4 ==> y == 4;\nloop invariant x == 4 ==> z1 == 4;\nloop invariant x == 4 ==> z2 == 4;\nloop invariant x == 4 ==> z3 == 4;\nloop invariant x == 5 ==> y == 5;\nloop invariant x == 5 ==> z1 == 5;\nloop invariant x == 5 ==> z2 == 5;\nloop invariant x == 5 ==> z3 == 5;\nloop invariant x == 6 ==> y == 6;\nloop invariant x == 6 ==> z1 == 6;\nloop invariant x == 6 ==> z2 == 6;\nloop invariant x == 6 ==> z3 == 6;\nloop invariant x == 7 ==> y == 7;\nloop invariant x == 7 ==> z1 == 7;\nloop invariant x == 7 ==> z2 == 7;\nloop invariant x == 7 ==> z3 == 7;\nloop invariant x == 8 ==> y == 8;\nloop invariant x == 8 ==> z1 == 8;\nloop invariant x == 8 ==> z2 == 8;\nloop invariant x == 8 ==> z3 == 8;\nloop invariant x == 9 ==> y == 9;\nloop invariant x == 9 ==> z1 == 9;\nloop invariant x == 9 ==> z2 == 9;\nloop invariant x == 9 ==> z3 == 9;\nloop invariant unknown() ==> x == 10;\nloop invariant unknown() ==> y == 0;\nloop invariant unknown() ==> z1 == 0;\nloop invariant unknown() ==> z2 == 0;\nloop invariant unknown() ==> z3 == 0;\nloop invariant unknown() ==> x == 10;\nloop invariant unknown() ==> y == 0;\nloop invariant unknown() ==> z1 == 0;\nloop invariant unknown() ==> z2 == 0;\nloop invariant unknown() ==> z3 == 0;\nloop invariant unknown() ==> x == 10;\nloop invariant unknown() ==> y == 0;\nloop invariant unknown() ==> z1 == 0;\nloop invariant unknown() ==> z2 == 0;\nloop invariant unknown() ==> z3 == 0;\nloop invariant unknown() ==> x == 10;\nloop invariant unknown() ==> y == 0;\nloop invariant unknown() ==> z1 == 0;\nloop invariant unknown() ==> z2 == 0;\nloop invariant unknown() ==> z3 == 0;\nloop invariant unknown() ==> x == 10;\nloop invariant unknown() ==> y == 0;\nloop invariant unknown() ==> z1 == 0;\nloop invariant unknown() ==> z2 == 0;\nloop invariant unknown() ==> z3 == 0;\nloop invariant unknown() ==> x == 10;\nloop invariant unknown() ==> y == 0;\nloop invariant unknown() ==> z1 == 0;\nloop invariant unknown() ==> z2 == 0;\nloop invariant unknown() ==> z3 == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 10;\nloop invariant 0 <= x <= 20;\nloop invariant x >= 10;\nloop invariant x <= 20;\nloop invariant x >= y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 10;\nloop invariant 0 <= y <= 10;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 10;\nloop invariant y <= 10;\nloop invariant x == 0 ==> y == 0;\nloop invariant x == 10 ==> y == 10;\nloop invariant x == 0 ==> x == 0;\nloop invariant x == 10 ==> x == 10;\nloop invariant y == 0 ==> y == 0;\nloop invariant y == 10 ==> y == 10;\nloop invariant x == 0 ==> y == 0 ==> y == 0;\nloop invariant x == 10 ==> y == 10 ==> y == 10;\nloop invariant x == 0 ==> y == 0 ==> x == 0;\nloop invariant x == 10 ==> y == 10 ==> x == 10;\nloop invariant x == 0 ==> y == 0 ==> y == 0 ==> y == 0;\nloop invariant x == 10 ==> y == 10 ==> y == 10 ==> y == 10;\nloop invariant x == 0 ==> y == 0 ==> x == 0 ==> x == 0;\nloop invariant x == 10 ==> y == 10 ==> x == 10 ==> x == 10;\nloop invariant x == 0 ==> y == 0 ==> y == 0 ==> x == 0;\nloop invariant x == 10 ==> y == 10 ==> y == 10 ==> x == 10;\nloop invariant x == 0 ==> y == 0 ==> y == 0 ==> x == 0 ==> x == 0;\nloop invariant x == 10 ==> y == 10 ==> y == 10 ==> x == 10 ==> x == 10;\nloop invariant x == 0 ==> y == 0 ==> y == 0 ==> x == 0 ==> x == 0 ==> x == 0;\nloop invariant x == 10 ==> y == 10 ==> y == 10 ==> x == 10 ==> x == 10 ==> x == 10;\nloop invariant x == 0 ==> y == 0 ==> y == 0 ==> x == 0 ==> x == 0 ==> x == 0 ==> x == 0;\nloop invariant x == 10 ==> y == 10 ==> y == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10;\nloop invariant x == 0 ==> y == 0 ==> y == 0 ==> x == 0 ==> x == 0 ==> x == 0 ==> x == 0 ==> x == 0;\nloop invariant x == 10 ==> y == 10 ==> y == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10;\nloop invariant x == 0 ==> y == 0 ==> y == 0 ==> x == 0 ==> x == 0 ==> x == 0 ==> x == 0 ==> x == 0 ==> x == 0;\nloop invariant x == 10 ==> y == 10 ==> y == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10;\nloop invariant x == 0 ==> y == 0 ==> y == 0 ==> x == 0 ==> x == 0 ==> x == 0 ==> x == 0 ==> x == 0 ==> x == 0 ==> x == 0;\nloop invariant x == 10 ==> y == 10 ==> y == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10;\nloop invariant x == 0 ==> y == 0 ==> y == 0 ==> x == 0 ==> x == 0 ==> x == 0 ==> x == 0 ==> x == 0 ==> x == 0 ==> x == 0 ==> x == 0;\nloop invariant x == 10 ==> y == 10 ==> y == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 10;\nloop invariant 0 <= y <= 10;\nloop invariant x <= 10;\nloop invariant y <= 10;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x + 10 * y <= 10 + 10 * y;\nloop invariant x + y <= 10 + y;\nloop invariant x + y <= 10;\nloop invariant x + y >= 0;\nloop invariant x + y >= x;\nloop invariant x + y >= y;\nloop invariant x + y == 0 -> (x == 0 && y == 0);\nloop invariant x + y == 0 -> (x == 0 || y == 0 || (x == 1 && y == -1));\nloop invariant x + y == 0 -> (x == 0 || y == 0 || (x == 2 && y == -2));\nloop invariant x + y == 0 -> (x == 0 || y == 0 || (x == 3 && y == -3));\nloop invariant x + y == 0 -> (x == 0 || y == 0 || (x == 4 && y == -4));\nloop invariant x + y == 0 -> (x == 0 || y == 0 || (x == 5 && y == -5));\nloop invariant x + y == 0 -> (x == 0 || y == 0 || (x == 6 && y == -6));\nloop invariant x + y == 0 -> (x == 0 || y == 0 || (x == 7 && y == -7));\nloop invariant x + y == 0 -> (x == 0 || y == 0 || (x == 8 && y == -8));\nloop invariant x + y == 0 -> (x == 0 || y == 0 || (x == 9 && y == -9));\nloop invariant x + y == 0 -> (x == 0 || y == 0 || (x == 10 && y == -10));\nloop invariant x + y == 0 -> (x == 0 || y == 0);\nloop invariant x + y == 0 -> (x == 1 && y == -1);\nloop invariant x + y == 0 -> (x == 2 && y == -2);\nloop invariant x + y == 0 -> (x == 3 && y == -3);\nloop invariant x + y == 0 -> (x == 4 && y == -4);\nloop invariant x + y == 0 -> (x == 5 && y == -5);\nloop invariant x + y == 0 -> (x == 6 && y == -6);\nloop invariant x + y == 0 -> (x == 7 && y == -7);\nloop invariant x + y == 0 -> (x == 8 && y == -8);\nloop invariant x + y == 0 -> (x == 9 && y == -9);\nloop invariant x + y == 0 -> (x == 10 && y == -10);\nloop invariant x + y == 0 -> (x == 0 || y == 0);\nloop invariant x + y == 0 -> (x == 1 && y == -1);\nloop invariant x + y == 0 -> (x == 2 && y == -2);\nloop invariant x + y == 0 -> (x == 3 && y == -3);\nloop invariant x + y == 0 -> (x == 4 && y == -4);\nloop invariant x + y == 0 -> (x == 5 && y == -5);\nloop invariant x + y == 0 -> (x == 6 && y == -6);\nloop invariant x + y == 0 -> (x == 7 && y == -7);\nloop invariant x + y == 0 -> (x == 8 && y == -8);\nloop invariant x + y == 0 -> (x == 9 && y == -9);\nloop invariant x + y == 0 -> (x == 10 && y == -10);\nloop invariant x + y == 0 -> (x == 0 || y == 0);\nloop invariant x + y == 0 -> (x == 1 && y == -1);\nloop invariant x + y == 0 -> (x == 2 && y == -2);\nloop invariant x + y == 0 -> (x == 3 && y == -3);\nloop invariant x + y == 0 -> (x == 4 && y == -4);\n*/\n```",
            "```\n/*@\nloop invariant x >= 0; loop invariant x <= 30; loop invariant y >= 0; loop invariant y <= 30; loop invariant x <= 2*y; loop invariant y <= 2*x; loop invariant x + y <= 30; loop invariant x + y >= 0; loop invariant (x == 20) ==> (y == 0); loop invariant (x == 21) ==> (y == 1); loop invariant (x == 22) ==> (y == 2); loop invariant (x == 23) ==> (y == 3); loop invariant (x == 24) ==> (y == 4); loop invariant (x == 25) ==> (y == 5); loop invariant (x == 26) ==> (y == 6); loop invariant (x == 27) ==> (y == 7); loop invariant (x == 28) ==> (y == 8); loop invariant (x == 29) ==> (y == 9); loop invariant (x == 30) ==> (y == 10); loop invariant (x == 19) ==> (y == 11); loop invariant (x == 18) ==> (y == 12); loop invariant (x == 17) ==> (y == 13); loop invariant (x == 16) ==> (y == 14); loop invariant (x == 15) ==> (y == 15); loop invariant (x == 14) ==> (y == 16); loop invariant (x == 13) ==> (y == 17); loop invariant (x == 12) ==> (y == 18); loop invariant (x == 11) ==> (y == 19); loop invariant (x == 10) ==> (y == 20); loop invariant (x == 9) ==> (y == 21); loop invariant (x == 8) ==> (y == 22); loop invariant (x == 7) ==> (y == 23); loop invariant (x == 6) ==> (y == 24); loop invariant (x == 5) ==> (y == 25); loop invariant (x == 4) ==> (y == 26); loop invariant (x == 3) ==> (y == 27); loop invariant (x == 2) ==> (y == 28); loop invariant (x == 1) ==> (y == 29); loop invariant (x == 0) ==> (y == 30); loop invariant (x == 20) ==> (y == 0); loop invariant (x == 21) ==> (y == 1); loop invariant (x == 22) ==> (y == 2); loop invariant (x == 23) ==> (y == 3); loop invariant (x == 24) ==> (y == 4); loop invariant (x == 25) ==> (y == 5); loop invariant (x == 26) ==> (y == 6); loop invariant (x == 27) ==> (y == 7); loop invariant (x == 28) ==> (y == 8); loop invariant (x == 29) ==> (y == 9); loop invariant (x == 30) ==> (y == 10); loop invariant (x == 19) ==> (y == 11); loop invariant (x == 18) ==> (y == 12); loop invariant (x == 17) ==> (y == 13); loop invariant (x == 16) ==> (y == 14); loop invariant (x == 15) ==> (y == 15); loop invariant (x == 14) ==> (y == 16); loop invariant (x == 13) ==> (y == 17); loop invariant (x == 12) ==> (y == 18); loop invariant (x == 11) ==> (y == 19); loop invariant (x == 10) ==> (y == 20); loop invariant (x == 9) ==> (y == 21); loop invariant (x == 8) ==> (y == 22); loop invariant (x == 7) ==> (y == 23); loop invariant (x == 6) ==> (y == 24); loop invariant (x == 5) ==> (y == 25);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 10 + 10 * y;\nloop invariant y >= 0;\nloop invariant y <= 10;\nloop invariant x >= 0;\nloop invariant x <= 10 + 10 * y;\nloop invariant unknown() ==> x >= 0;\nloop invariant unknown() ==> x <= 10 + 10 * y;\nloop invariant unknown() ==> y >= 0;\nloop invariant unknown() ==> y <= 10;\nloop invariant (y == 0) ==> (x != 20);\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 10;\nloop invariant 0 <= x <= 10;\nloop invariant x >= y + 10 * (1 + y) / 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  assume((x >= 0));\n  assume((x <= 10));\n  assume((y <= 10));\n  assume((y >= 0));\n  \n  /*@\n\n\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 10));\n    (y  = (y + 10));\n    }\n\n  }\n  \nif ( (y == 0) )\n{;\n//@ assert( (x != 20) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 20 and 0 <= y <= 20;\nloop invariant \\forall int z1; 0 <= z1 <= 20 ==> (x >= z1);\nloop invariant \\forall int z2; 0 <= z2 <= 20 ==> (y >= z2);\nloop invariant \\forall int z3; 0 <= z3 <= 20 ==> (x >= z3 + z3 * z3 / 2);\nloop invariant \\forall int z4; 0 <= z4 <= 20 ==> (y >= z4 + z4 * z4 / 2);\nloop invariant (x == 20) ==> (y == 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  assume((x >= 0));\n  assume((x <= 10));\n  assume((y <= 10));\n  assume((y >= 0));\n  \n  /*@\n\n\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 10));\n    (y  = (y + 10));\n    }\n\n  }\n  \nif ( (y == 0) )\n{;\n//@ assert( (x != 20) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 10;\nloop invariant 0 <= y <= 10;\nloop invariant x <= y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  assume((x >= 0));\n  assume((x <= 10));\n  assume((y <= 10));\n  assume((y >= 0));\n  \n  /*@\n\n\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 10));\n    (y  = (y + 10));\n    }\n\n  }\n  \nif ( (y == 0) )\n{;\n//@ assert( (x != 20) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 30; loop invariant 0 <= y <= 20; loop invariant x >= y; loop invariant y <= 10; loop invariant x >= 0; loop invariant x <= 30; loop invariant y >= 0; loop invariant y <= 20; loop invariant x >= y; loop invariant y <= 10;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  assume((x >= 0));\n  assume((x <= 10));\n  assume((y <= 10));\n  assume((y >= 0));\n  \n  /*@\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 10));\n    (y  = (y + 10));\n    }\n\n  }\n  \nif ( (y == 0) )\n{;\n//@ assert( (x != 20) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 10;\nloop invariant 0 <= y <= 10;\nloop invariant x + 10 * (y + 1) <= 20;\nloop invariant x + 10 * (y + 1) > 10;\nloop invariant x + 10 * (y + 1) >= 0;\nloop invariant x + 10 * (y + 1) <= 20;\nloop invariant x + 10 * (y + 1) > 10;\nloop invariant x + 10 * (y + 1) >= 0;\nloop invariant x + 10 * (y + 1) <= 20;\nloop invariant x + 10 * (y + 1) > 10;\nloop invariant x + 10 * (y + 1) >= 0;\nloop invariant x + 10 * (y + 1) <= 20;\nloop invariant x + 10 * (y + 1) > 10;\nloop invariant x + 10 * (y + 1) >= 0;\nloop invariant x + 10 * (y + 1) <= 20;\nloop invariant x + 10 * (y + 1) > 10;\nloop invariant x + 10 * (y + 1) >= 0;\nloop invariant x + 10 * (y + 1) <= 20;\nloop invariant x + 10 * (y + 1) > 10;\nloop invariant x + 10 * (y + 1) >= 0;\nloop invariant x + 10 * (y + 1) <= 20;\nloop invariant x + 10 * (y + 1) > 10;\nloop invariant x + 10 * (y + 1) >= 0;\nloop invariant x + 10 * (y + 1) <= 20;\nloop invariant x + 10 * (y + 1) > 10;\nloop invariant x + 10 * (y + 1) >= 0;\nloop invariant x + 10 * (y + 1) <= 20;\nloop invariant x + 10 * (y + 1) > 10;\nloop invariant x + 10 * (y + 1) >= 0;\nloop invariant x + 10 * (y + 1) <= 20;\nloop invariant x + 10 * (y + 1) > 10;\nloop invariant x + 10 * (y + 1) >= 0;\nloop invariant x + 10 * (y + 1) <= 20;\nloop invariant x + 10 * (y + 1) > 10;\nloop invariant x + 10 * (y + 1) >= 0;\nloop invariant x + 10 * (y + 1) <= 20;\nloop invariant x + 10 * (y + 1) > 10;\nloop invariant x + 10 * (y + 1) >= 0;\nloop invariant x + 10 * (y + 1) <= 20;\nloop invariant x + 10 * (y + 1) > 10;\nloop invariant x + 10 * (y + 1) >= 0;\nloop invariant x + 10 * (y + 1) <= 20;\nloop invariant x + 10 * (y + 1) > 10;\nloop invariant x + 10 * (y + 1) >= 0;\nloop invariant x + 10 * (y + 1) <= 20;\nloop invariant x + 10 * (y + 1) > 10;\nloop invariant x + 10 * (y + 1) >= 0;\nloop invariant x + 10 * (y + 1) <= 20;\nloop invariant x + 10 * (y + 1) > 10;\nloop invariant x + 10 * (y + 1) >= 0;\nloop invariant x + 10 * (y + 1) <= 20;\nloop invariant x + 10 * (y + 1) > 10;\nloop invariant x + 10 * (y + 1) >= 0;\nloop invariant x + 10 * (y + 1) <= 20;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  assume((x >= 0));\n  assume((x <= 10));\n  assume((y <= 10));\n  assume((y >= 0));\n  \n  /*@\n\n\n\n\nloop invariant i5: x + 10 * (y + 1) >= 0;\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 10));\n    (y  = (y + 10));\n    }\n\n  }\n  \nif ( (y == 0) )\n{;\n//@ assert( (x != 20) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 10;\nloop invariant 0 <= y <= 10;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant (x + y) >= 0;\nloop invariant (x + y) <= 20;\nloop invariant (x + y) == 0 ==> (x != 20);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  assume((x >= 0));\n  assume((x <= 10));\n  assume((y <= 10));\n  assume((y >= 0));\n  \n  /*@\n\n\nloop invariant i3: x >= 0;\nloop invariant i4: y >= 0;\nloop invariant i5: (x + y) >= 0;\n\nloop invariant i7: (x + y) == 0 ==> (x != 20);\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 10));\n    (y  = (y + 10));\n    }\n\n  }\n  \nif ( (y == 0) )\n{;\n//@ assert( (x != 20) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 10;\nloop invariant 0 <= y <= 10;\nloop invariant x <= 10;\nloop invariant y <= 10;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant x <= y + 10;\nloop invariant x <= y + 10 + 10;\nloop invariant x <= y + 10 + 10 + 10;\nloop invariant x <= y + 10 + 10 + 10 + 10;\nloop invariant x <= y + 10 + 10 + 10 + 10 + 10;\nloop invariant x <= y + 10 + 10 + 10 + 10 + 10 + 10;\nloop invariant x <= y + 10 + 10 + 10 + 10 + 10 + 10 + 10;\nloop invariant x <= y + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10;\nloop invariant x <= y + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10;\nloop invariant x <= y + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10;\nloop invariant x <= y + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10;\nloop invariant x <= y + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10;\nloop invariant x <= y + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10;\nloop invariant x <= y + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10;\nloop invariant x <= y + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10;\nloop invariant x <= y + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10;\nloop invariant x <= y + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10;\nloop invariant x <= y + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10;\nloop invariant x <= y + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  assume((x >= 0));\n  assume((x <= 10));\n  assume((y <= 10));\n  assume((y >= 0));\n  \n  /*@\n\n\n\n\nloop invariant i5: x >= 0;\nloop invariant i6: y >= 0;\n\nloop invariant i8: x <= y + 10;\nloop invariant i9: x <= y + 10 + 10;\nloop invariant i10: x <= y + 10 + 10 + 10;\nloop invariant i11: x <= y + 10 + 10 + 10 + 10;\nloop invariant i12: x <= y + 10 + 10 + 10 + 10 + 10;\nloop invariant i13: x <= y + 10 + 10 + 10 + 10 + 10 + 10;\nloop invariant i14: x <= y + 10 + 10 + 10 + 10 + 10 + 10 + 10;\nloop invariant i15: x <= y + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10;\nloop invariant i16: x <= y + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10;\nloop invariant i17: x <= y + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10;\nloop invariant i18: x <= y + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10;\nloop invariant i19: x <= y + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10;\nloop invariant i20: x <= y + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10;\nloop invariant i21: x <= y + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10;\nloop invariant i22: x <= y + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10;\nloop invariant i23: x <= y + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10;\nloop invariant i24: x <= y + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10;\nloop invariant i25: x <= y + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10;\nloop invariant i26: x <= y + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10;\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 10));\n    (y  = (y + 10));\n    }\n\n  }\n  \nif ( (y == 0) )\n{;\n//@ assert( (x != 20) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 10;\nloop invariant 0 <= y <= 10;\nloop invariant (x <= 20) ==> (y >= 0);\nloop invariant (x <= 20) ==> (y <= 10);\nloop invariant (x <= 20) ==> (y != 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  assume((x >= 0));\n  assume((x <= 10));\n  assume((y <= 10));\n  assume((y >= 0));\n  \n  /*@\n\n\nloop invariant i3: (x <= 20) ==> (y >= 0);\n\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 10));\n    (y  = (y + 10));\n    }\n\n  }\n  \nif ( (y == 0) )\n{;\n//@ assert( (x != 20) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= 20;\nloop invariant 0 <= y <= 20;\nloop invariant z1 >= 0;\nloop invariant z2 >= 0;\nloop invariant z3 >= 0;\nloop invariant x <= y;\nloop invariant y <= x + 10;\nloop invariant z1 <= x;\nloop invariant z2 <= y;\nloop invariant z3 <= z1 + z2;\nloop invariant z1 + z2 >= x;\nloop invariant z2 + z3 >= y;\nloop invariant z1 + z2 + z3 >= x + y;\nloop invariant z1 + z2 + z3 <= x + y + 10;\nloop invariant z1 + z2 + z3 >= x;\nloop invariant z1 + z2 + z3 <= x + 10;\nloop invariant z1 + z2 + z3 >= y;\nloop invariant z1 + z2 + z3 <= y + 10;\nloop invariant z1 + z2 + z3 >= x + y;\nloop invariant z1 + z2 + z3 <= x + y + 10;\nloop invariant z1 + z2 + z3 >= x + y;\nloop invariant z1 + z2 + z3 <= x + y + 10;\nloop invariant z1 + z2 + z3 >= x + y;\nloop invariant z1 + z2 + z3 <= x + y + 10;\nloop invariant z1 + z2 + z3 >= x + y;\nloop invariant z1 + z2 + z3 <= x + y + 10;\nloop invariant z1 + z2 + z3 >= x + y;\nloop invariant z1 + z2 + z3 <= x + y + 10;\nloop invariant z1 + z2 + z3 >= x + y;\nloop invariant z1 + z2 + z3 <= x + y + 10;\nloop invariant z1 + z2 + z3 >= x + y;\nloop invariant z1 + z2 + z3 <= x + y + 10;\nloop invariant z1 + z2 + z3 >= x + y;\nloop invariant z1 + z2 + z3 <= x + y + 10;\nloop invariant z1 + z2 + z3 >= x + y;\nloop invariant z1 + z2 + z3 <= x + y + 10;\nloop invariant z1 + z2 + z3 >= x + y;\nloop invariant z1 + z2 + z3 <= x + y + 10;\nloop invariant z1 + z2 + z3 >= x + y;\nloop invariant z1 + z2 + z3 <= x + y + 10;\nloop invariant z1 + z2 + z3 >= x + y;\nloop invariant z1 + z2 + z3 <= x + y + 10;\nloop invariant z1 + z2 + z3 >= x + y;\nloop invariant z1 + z2 + z3 <= x + y + 10;\nloop invariant z1 + z2 + z3 >= x + y;\nloop invariant z1 + z2 + z3 <= x + y + 10;\nloop invariant z1 + z2 + z3 >= x + y;\nloop invariant z1 + z2 + z3 <= x + y + 10;\nloop invariant z1 + z2 + z3 >= x + y;\nloop invariant z1 + z2 + z3 <= x + y + 10;\nloop invariant z1 + z2 + z3 >= x + y;\nloop invariant z1 + z2 + z3 <= x + y + 10;\nloop invariant z1 + z2 + z3 >= x + y;\nloop invariant z1 + z2 + z3 <= x + y + 10;\nloop invariant z1 + z2 + z3 >= x + y;\nloop invariant z1 + z2 + z3 <= x + y + 10;\nloop invariant z1 + z2 + z3 >= x + y;\nloop invariant z1 + z2 + z3 <= x + y + 10;\nloop invariant z1 + z2 + z3 >= x + y;\nloop invariant z1 + z2 + z3 <= x + y + 10;\nloop invariant z1 + z2 + z3 >= x + y;\nloop invariant z1 + z2 + z3 <= x + y + 10;\nloop invariant z1 + z2 + z3 >= x + y;\nloop invariant z1 + z2 + z3 <= x + y + 10;\nloop invariant z1 + z2 + z3 >= x + y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  assume((x >= 0));\n  assume((x <= 10));\n  assume((y <= 10));\n  assume((y >= 0));\n  \n  /*@\n\n\n\n\n\n\nloop invariant i7: y <= x + 10;\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 10));\n    (y  = (y + 10));\n    }\n\n  }\n  \nif ( (y == 0) )\n{;\n//@ assert( (x != 20) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 9,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 10;\nloop invariant 0 <= y <= 10;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant z1 >= 0;\nloop invariant z2 >= 0;\nloop invariant z3 >= 0;\nloop invariant x <= 10;\nloop invariant y <= 10;\nloop invariant z1 <= 10;\nloop invariant z2 <= 10;\nloop invariant z3 <= 10;\nloop invariant x == 10 ==> y == 0;\nloop invariant x == 10 ==> z1 == 10;\nloop invariant x == 10 ==> z2 == 10;\nloop invariant x == 10 ==> z3 == 10;\nloop invariant x == 0 ==> y == 0;\nloop invariant x == 0 ==> z1 == 0;\nloop invariant x == 0 ==> z2 == 0;\nloop invariant x == 0 ==> z3 == 0;\nloop invariant x == 1 ==> y == 1;\nloop invariant x == 1 ==> z1 == 1;\nloop invariant x == 1 ==> z2 == 1;\nloop invariant x == 1 ==> z3 == 1;\nloop invariant x == 2 ==> y == 2;\nloop invariant x == 2 ==> z1 == 2;\nloop invariant x == 2 ==> z2 == 2;\nloop invariant x == 2 ==> z3 == 2;\nloop invariant x == 3 ==> y == 3;\nloop invariant x == 3 ==> z1 == 3;\nloop invariant x == 3 ==> z2 == 3;\nloop invariant x == 3 ==> z3 == 3;\nloop invariant x == 4 ==> y == 4;\nloop invariant x == 4 ==> z1 == 4;\nloop invariant x == 4 ==> z2 == 4;\nloop invariant x == 4 ==> z3 == 4;\nloop invariant x == 5 ==> y == 5;\nloop invariant x == 5 ==> z1 == 5;\nloop invariant x == 5 ==> z2 == 5;\nloop invariant x == 5 ==> z3 == 5;\nloop invariant x == 6 ==> y == 6;\nloop invariant x == 6 ==> z1 == 6;\nloop invariant x == 6 ==> z2 == 6;\nloop invariant x == 6 ==> z3 == 6;\nloop invariant x == 7 ==> y == 7;\nloop invariant x == 7 ==> z1 == 7;\nloop invariant x == 7 ==> z2 == 7;\nloop invariant x == 7 ==> z3 == 7;\nloop invariant x == 8 ==> y == 8;\nloop invariant x == 8 ==> z1 == 8;\nloop invariant x == 8 ==> z2 == 8;\nloop invariant x == 8 ==> z3 == 8;\nloop invariant x == 9 ==> y == 9;\nloop invariant x == 9 ==> z1 == 9;\nloop invariant x == 9 ==> z2 == 9;\nloop invariant x == 9 ==> z3 == 9;\nloop invariant unknown() ==> x == 10;\nloop invariant unknown() ==> y == 0;\nloop invariant unknown() ==> z1 == 0;\nloop invariant unknown() ==> z2 == 0;\nloop invariant unknown() ==> z3 == 0;\nloop invariant unknown() ==> x == 10;\nloop invariant unknown() ==> y == 0;\nloop invariant unknown() ==> z1 == 0;\nloop invariant unknown() ==> z2 == 0;\nloop invariant unknown() ==> z3 == 0;\nloop invariant unknown() ==> x == 10;\nloop invariant unknown() ==> y == 0;\nloop invariant unknown() ==> z1 == 0;\nloop invariant unknown() ==> z2 == 0;\nloop invariant unknown() ==> z3 == 0;\nloop invariant unknown() ==> x == 10;\nloop invariant unknown() ==> y == 0;\nloop invariant unknown() ==> z1 == 0;\nloop invariant unknown() ==> z2 == 0;\nloop invariant unknown() ==> z3 == 0;\nloop invariant unknown() ==> x == 10;\nloop invariant unknown() ==> y == 0;\nloop invariant unknown() ==> z1 == 0;\nloop invariant unknown() ==> z2 == 0;\nloop invariant unknown() ==> z3 == 0;\nloop invariant unknown() ==> x == 10;\nloop invariant unknown() ==> y == 0;\nloop invariant unknown() ==> z1 == 0;\nloop invariant unknown() ==> z2 == 0;\nloop invariant unknown() ==> z3 == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  assume((x >= 0));\n  assume((x <= 10));\n  assume((y <= 10));\n  assume((y >= 0));\n  \n  /*@\n\n\nloop invariant i3: x >= 0;\nloop invariant i4: y >= 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 10));\n    (y  = (y + 10));\n    }\n\n  }\n  \nif ( (y == 0) )\n{;\n//@ assert( (x != 20) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 10;\nloop invariant 0 <= x <= 20;\nloop invariant x >= 10;\nloop invariant x <= 20;\nloop invariant x >= y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  assume((x >= 0));\n  assume((x <= 10));\n  assume((y <= 10));\n  assume((y >= 0));\n  \n  /*@\n\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 10));\n    (y  = (y + 10));\n    }\n\n  }\n  \nif ( (y == 0) )\n{;\n//@ assert( (x != 20) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 10;\nloop invariant 0 <= y <= 10;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 10;\nloop invariant y <= 10;\nloop invariant x == 0 ==> y == 0;\nloop invariant x == 10 ==> y == 10;\nloop invariant x == 0 ==> x == 0;\nloop invariant x == 10 ==> x == 10;\nloop invariant y == 0 ==> y == 0;\nloop invariant y == 10 ==> y == 10;\nloop invariant x == 0 ==> y == 0 ==> y == 0;\nloop invariant x == 10 ==> y == 10 ==> y == 10;\nloop invariant x == 0 ==> y == 0 ==> x == 0;\nloop invariant x == 10 ==> y == 10 ==> x == 10;\nloop invariant x == 0 ==> y == 0 ==> y == 0 ==> y == 0;\nloop invariant x == 10 ==> y == 10 ==> y == 10 ==> y == 10;\nloop invariant x == 0 ==> y == 0 ==> x == 0 ==> x == 0;\nloop invariant x == 10 ==> y == 10 ==> x == 10 ==> x == 10;\nloop invariant x == 0 ==> y == 0 ==> y == 0 ==> x == 0;\nloop invariant x == 10 ==> y == 10 ==> y == 10 ==> x == 10;\nloop invariant x == 0 ==> y == 0 ==> y == 0 ==> x == 0 ==> x == 0;\nloop invariant x == 10 ==> y == 10 ==> y == 10 ==> x == 10 ==> x == 10;\nloop invariant x == 0 ==> y == 0 ==> y == 0 ==> x == 0 ==> x == 0 ==> x == 0;\nloop invariant x == 10 ==> y == 10 ==> y == 10 ==> x == 10 ==> x == 10 ==> x == 10;\nloop invariant x == 0 ==> y == 0 ==> y == 0 ==> x == 0 ==> x == 0 ==> x == 0 ==> x == 0;\nloop invariant x == 10 ==> y == 10 ==> y == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10;\nloop invariant x == 0 ==> y == 0 ==> y == 0 ==> x == 0 ==> x == 0 ==> x == 0 ==> x == 0 ==> x == 0;\nloop invariant x == 10 ==> y == 10 ==> y == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10;\nloop invariant x == 0 ==> y == 0 ==> y == 0 ==> x == 0 ==> x == 0 ==> x == 0 ==> x == 0 ==> x == 0 ==> x == 0;\nloop invariant x == 10 ==> y == 10 ==> y == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10;\nloop invariant x == 0 ==> y == 0 ==> y == 0 ==> x == 0 ==> x == 0 ==> x == 0 ==> x == 0 ==> x == 0 ==> x == 0 ==> x == 0;\nloop invariant x == 10 ==> y == 10 ==> y == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10;\nloop invariant x == 0 ==> y == 0 ==> y == 0 ==> x == 0 ==> x == 0 ==> x == 0 ==> x == 0 ==> x == 0 ==> x == 0 ==> x == 0 ==> x == 0;\nloop invariant x == 10 ==> y == 10 ==> y == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  assume((x >= 0));\n  assume((x <= 10));\n  assume((y <= 10));\n  assume((y >= 0));\n  \n  /*@\n\n\nloop invariant i3: x >= 0;\nloop invariant i4: y >= 0;\n\n\n\n\nloop invariant i9: x == 0 ==> x == 0;\nloop invariant i10: x == 10 ==> x == 10;\nloop invariant i11: y == 0 ==> y == 0;\nloop invariant i12: y == 10 ==> y == 10;\nloop invariant i13: x == 0 ==> y == 0 ==> y == 0;\nloop invariant i14: x == 10 ==> y == 10 ==> y == 10;\nloop invariant i15: x == 0 ==> y == 0 ==> x == 0;\nloop invariant i16: x == 10 ==> y == 10 ==> x == 10;\nloop invariant i17: x == 0 ==> y == 0 ==> y == 0 ==> y == 0;\nloop invariant i18: x == 10 ==> y == 10 ==> y == 10 ==> y == 10;\nloop invariant i19: x == 0 ==> y == 0 ==> x == 0 ==> x == 0;\nloop invariant i20: x == 10 ==> y == 10 ==> x == 10 ==> x == 10;\nloop invariant i21: x == 0 ==> y == 0 ==> y == 0 ==> x == 0;\nloop invariant i22: x == 10 ==> y == 10 ==> y == 10 ==> x == 10;\nloop invariant i23: x == 0 ==> y == 0 ==> y == 0 ==> x == 0 ==> x == 0;\nloop invariant i24: x == 10 ==> y == 10 ==> y == 10 ==> x == 10 ==> x == 10;\nloop invariant i25: x == 0 ==> y == 0 ==> y == 0 ==> x == 0 ==> x == 0 ==> x == 0;\nloop invariant i26: x == 10 ==> y == 10 ==> y == 10 ==> x == 10 ==> x == 10 ==> x == 10;\nloop invariant i27: x == 0 ==> y == 0 ==> y == 0 ==> x == 0 ==> x == 0 ==> x == 0 ==> x == 0;\nloop invariant i28: x == 10 ==> y == 10 ==> y == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10;\nloop invariant i29: x == 0 ==> y == 0 ==> y == 0 ==> x == 0 ==> x == 0 ==> x == 0 ==> x == 0 ==> x == 0;\nloop invariant i30: x == 10 ==> y == 10 ==> y == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10;\nloop invariant i31: x == 0 ==> y == 0 ==> y == 0 ==> x == 0 ==> x == 0 ==> x == 0 ==> x == 0 ==> x == 0 ==> x == 0;\nloop invariant i32: x == 10 ==> y == 10 ==> y == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10;\nloop invariant i33: x == 0 ==> y == 0 ==> y == 0 ==> x == 0 ==> x == 0 ==> x == 0 ==> x == 0 ==> x == 0 ==> x == 0 ==> x == 0;\nloop invariant i34: x == 10 ==> y == 10 ==> y == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10;\nloop invariant i35: x == 0 ==> y == 0 ==> y == 0 ==> x == 0 ==> x == 0 ==> x == 0 ==> x == 0 ==> x == 0 ==> x == 0 ==> x == 0 ==> x == 0;\nloop invariant i36: x == 10 ==> y == 10 ==> y == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10;\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 10));\n    (y  = (y + 10));\n    }\n\n  }\n  \nif ( (y == 0) )\n{;\n//@ assert( (x != 20) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 27,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 10;\nloop invariant 0 <= y <= 10;\nloop invariant x <= 10;\nloop invariant y <= 10;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x + 10 * y <= 10 + 10 * y;\nloop invariant x + y <= 10 + y;\nloop invariant x + y <= 10;\nloop invariant x + y >= 0;\nloop invariant x + y >= x;\nloop invariant x + y >= y;\nloop invariant x + y == 0 -> (x == 0 && y == 0);\nloop invariant x + y == 0 -> (x == 0 || y == 0 || (x == 1 && y == -1));\nloop invariant x + y == 0 -> (x == 0 || y == 0 || (x == 2 && y == -2));\nloop invariant x + y == 0 -> (x == 0 || y == 0 || (x == 3 && y == -3));\nloop invariant x + y == 0 -> (x == 0 || y == 0 || (x == 4 && y == -4));\nloop invariant x + y == 0 -> (x == 0 || y == 0 || (x == 5 && y == -5));\nloop invariant x + y == 0 -> (x == 0 || y == 0 || (x == 6 && y == -6));\nloop invariant x + y == 0 -> (x == 0 || y == 0 || (x == 7 && y == -7));\nloop invariant x + y == 0 -> (x == 0 || y == 0 || (x == 8 && y == -8));\nloop invariant x + y == 0 -> (x == 0 || y == 0 || (x == 9 && y == -9));\nloop invariant x + y == 0 -> (x == 0 || y == 0 || (x == 10 && y == -10));\nloop invariant x + y == 0 -> (x == 0 || y == 0);\nloop invariant x + y == 0 -> (x == 1 && y == -1);\nloop invariant x + y == 0 -> (x == 2 && y == -2);\nloop invariant x + y == 0 -> (x == 3 && y == -3);\nloop invariant x + y == 0 -> (x == 4 && y == -4);\nloop invariant x + y == 0 -> (x == 5 && y == -5);\nloop invariant x + y == 0 -> (x == 6 && y == -6);\nloop invariant x + y == 0 -> (x == 7 && y == -7);\nloop invariant x + y == 0 -> (x == 8 && y == -8);\nloop invariant x + y == 0 -> (x == 9 && y == -9);\nloop invariant x + y == 0 -> (x == 10 && y == -10);\nloop invariant x + y == 0 -> (x == 0 || y == 0);\nloop invariant x + y == 0 -> (x == 1 && y == -1);\nloop invariant x + y == 0 -> (x == 2 && y == -2);\nloop invariant x + y == 0 -> (x == 3 && y == -3);\nloop invariant x + y == 0 -> (x == 4 && y == -4);\nloop invariant x + y == 0 -> (x == 5 && y == -5);\nloop invariant x + y == 0 -> (x == 6 && y == -6);\nloop invariant x + y == 0 -> (x == 7 && y == -7);\nloop invariant x + y == 0 -> (x == 8 && y == -8);\nloop invariant x + y == 0 -> (x == 9 && y == -9);\nloop invariant x + y == 0 -> (x == 10 && y == -10);\nloop invariant x + y == 0 -> (x == 0 || y == 0);\nloop invariant x + y == 0 -> (x == 1 && y == -1);\nloop invariant x + y == 0 -> (x == 2 && y == -2);\nloop invariant x + y == 0 -> (x == 3 && y == -3);\nloop invariant x + y == 0 -> (x == 4 && y == -4);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  assume((x >= 0));\n  assume((x <= 10));\n  assume((y <= 10));\n  assume((y >= 0));\n  \n  /*@\n\n\n\n\nloop invariant i5: x >= 0;\nloop invariant i6: y >= 0;\n\n\n\nloop invariant i10: x + y >= 0;\nloop invariant i11: x + y >= x;\nloop invariant i12: x + y >= y;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 10));\n    (y  = (y + 10));\n    }\n\n  }\n  \nif ( (y == 0) )\n{;\n//@ assert( (x != 20) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant x >= 0; loop invariant x <= 30; loop invariant y >= 0; loop invariant y <= 30; loop invariant x <= 2*y; loop invariant y <= 2*x; loop invariant x + y <= 30; loop invariant x + y >= 0; loop invariant (x == 20) ==> (y == 0); loop invariant (x == 21) ==> (y == 1); loop invariant (x == 22) ==> (y == 2); loop invariant (x == 23) ==> (y == 3); loop invariant (x == 24) ==> (y == 4); loop invariant (x == 25) ==> (y == 5); loop invariant (x == 26) ==> (y == 6); loop invariant (x == 27) ==> (y == 7); loop invariant (x == 28) ==> (y == 8); loop invariant (x == 29) ==> (y == 9); loop invariant (x == 30) ==> (y == 10); loop invariant (x == 19) ==> (y == 11); loop invariant (x == 18) ==> (y == 12); loop invariant (x == 17) ==> (y == 13); loop invariant (x == 16) ==> (y == 14); loop invariant (x == 15) ==> (y == 15); loop invariant (x == 14) ==> (y == 16); loop invariant (x == 13) ==> (y == 17); loop invariant (x == 12) ==> (y == 18); loop invariant (x == 11) ==> (y == 19); loop invariant (x == 10) ==> (y == 20); loop invariant (x == 9) ==> (y == 21); loop invariant (x == 8) ==> (y == 22); loop invariant (x == 7) ==> (y == 23); loop invariant (x == 6) ==> (y == 24); loop invariant (x == 5) ==> (y == 25); loop invariant (x == 4) ==> (y == 26); loop invariant (x == 3) ==> (y == 27); loop invariant (x == 2) ==> (y == 28); loop invariant (x == 1) ==> (y == 29); loop invariant (x == 0) ==> (y == 30); loop invariant (x == 20) ==> (y == 0); loop invariant (x == 21) ==> (y == 1); loop invariant (x == 22) ==> (y == 2); loop invariant (x == 23) ==> (y == 3); loop invariant (x == 24) ==> (y == 4); loop invariant (x == 25) ==> (y == 5); loop invariant (x == 26) ==> (y == 6); loop invariant (x == 27) ==> (y == 7); loop invariant (x == 28) ==> (y == 8); loop invariant (x == 29) ==> (y == 9); loop invariant (x == 30) ==> (y == 10); loop invariant (x == 19) ==> (y == 11); loop invariant (x == 18) ==> (y == 12); loop invariant (x == 17) ==> (y == 13); loop invariant (x == 16) ==> (y == 14); loop invariant (x == 15) ==> (y == 15); loop invariant (x == 14) ==> (y == 16); loop invariant (x == 13) ==> (y == 17); loop invariant (x == 12) ==> (y == 18); loop invariant (x == 11) ==> (y == 19); loop invariant (x == 10) ==> (y == 20); loop invariant (x == 9) ==> (y == 21); loop invariant (x == 8) ==> (y == 22); loop invariant (x == 7) ==> (y == 23); loop invariant (x == 6) ==> (y == 24); loop invariant (x == 5) ==> (y == 25);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  assume((x >= 0));\n  assume((x <= 10));\n  assume((y <= 10));\n  assume((y >= 0));\n  \n  /*@\nloop invariant i1: x >= 0; loop invariant x <= 30; loop invariant y >= 0; loop invariant y <= 30; loop invariant x <= 2*y; loop invariant y <= 2*x; loop invariant x + y <= 30; loop invariant x + y >= 0; loop invariant (x == 20) ==> (y == 0); loop invariant (x == 21) ==> (y == 1); loop invariant (x == 22) ==> (y == 2); loop invariant (x == 23) ==> (y == 3); loop invariant (x == 24) ==> (y == 4); loop invariant (x == 25) ==> (y == 5); loop invariant (x == 26) ==> (y == 6); loop invariant (x == 27) ==> (y == 7); loop invariant (x == 28) ==> (y == 8); loop invariant (x == 29) ==> (y == 9); loop invariant (x == 30) ==> (y == 10); loop invariant (x == 19) ==> (y == 11); loop invariant (x == 18) ==> (y == 12); loop invariant (x == 17) ==> (y == 13); loop invariant (x == 16) ==> (y == 14); loop invariant (x == 15) ==> (y == 15); loop invariant (x == 14) ==> (y == 16); loop invariant (x == 13) ==> (y == 17); loop invariant (x == 12) ==> (y == 18); loop invariant (x == 11) ==> (y == 19); loop invariant (x == 10) ==> (y == 20); loop invariant (x == 9) ==> (y == 21); loop invariant (x == 8) ==> (y == 22); loop invariant (x == 7) ==> (y == 23); loop invariant (x == 6) ==> (y == 24); loop invariant (x == 5) ==> (y == 25); loop invariant (x == 4) ==> (y == 26); loop invariant (x == 3) ==> (y == 27); loop invariant (x == 2) ==> (y == 28); loop invariant (x == 1) ==> (y == 29); loop invariant (x == 0) ==> (y == 30); loop invariant (x == 20) ==> (y == 0); loop invariant (x == 21) ==> (y == 1); loop invariant (x == 22) ==> (y == 2); loop invariant (x == 23) ==> (y == 3); loop invariant (x == 24) ==> (y == 4); loop invariant (x == 25) ==> (y == 5); loop invariant (x == 26) ==> (y == 6); loop invariant (x == 27) ==> (y == 7); loop invariant (x == 28) ==> (y == 8); loop invariant (x == 29) ==> (y == 9); loop invariant (x == 30) ==> (y == 10); loop invariant (x == 19) ==> (y == 11); loop invariant (x == 18) ==> (y == 12); loop invariant (x == 17) ==> (y == 13); loop invariant (x == 16) ==> (y == 14); loop invariant (x == 15) ==> (y == 15); loop invariant (x == 14) ==> (y == 16); loop invariant (x == 13) ==> (y == 17); loop invariant (x == 12) ==> (y == 18); loop invariant (x == 11) ==> (y == 19); loop invariant (x == 10) ==> (y == 20); loop invariant (x == 9) ==> (y == 21); loop invariant (x == 8) ==> (y == 22); loop invariant (x == 7) ==> (y == 23); loop invariant (x == 6) ==> (y == 24); loop invariant (x == 5) ==> (y == 25);\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 10));\n    (y  = (y + 10));\n    }\n\n  }\n  \nif ( (y == 0) )\n{;\n//@ assert( (x != 20) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 10 + 10 * y;\nloop invariant y >= 0;\nloop invariant y <= 10;\nloop invariant x >= 0;\nloop invariant x <= 10 + 10 * y;\nloop invariant unknown() ==> x >= 0;\nloop invariant unknown() ==> x <= 10 + 10 * y;\nloop invariant unknown() ==> y >= 0;\nloop invariant unknown() ==> y <= 10;\nloop invariant (y == 0) ==> (x != 20);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  assume((x >= 0));\n  assume((x <= 10));\n  assume((y <= 10));\n  assume((y >= 0));\n  \n  /*@\nloop invariant i1: 0 <= x <= 10 + 10 * y;\nloop invariant i2: y >= 0;\n\nloop invariant i4: x >= 0;\nloop invariant i5: x <= 10 + 10 * y;\n\n\n\n\nloop invariant i10: (y == 0) ==> (x != 20);\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 10));\n    (y  = (y + 10));\n    }\n\n  }\n  \nif ( (y == 0) )\n{;\n//@ assert( (x != 20) );\n}\n\n}",
                "checker_output_after_prune": true
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 26: unexpected token 'and'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  assume((x >= 0));\n  assume((x <= 10));\n  assume((y <= 10));\n  assume((y >= 0));\n  \n  /*@\nloop invariant i1: 0 <= y <= 10;\nloop invariant i2: 0 <= x <= 10;\nloop invariant i3: x >= y + 10 * (1 + y) / 2;\nloop invariant i4: 0 <= x <= 20 and 0 <= y <= 20;\nloop invariant i5: \\forall int z1; 0 <= z1 <= 20 ==> (x >= z1);\nloop invariant i6: \\forall int z2; 0 <= z2 <= 20 ==> (y >= z2);\nloop invariant i7: \\forall int z3; 0 <= z3 <= 20 ==> (x >= z3 + z3 * z3 / 2);\nloop invariant i8: \\forall int z4; 0 <= z4 <= 20 ==> (y >= z4 + z4 * z4 / 2);\nloop invariant i9: (x == 20) ==> (y == 0);\nloop invariant i10: x <= y;\nloop invariant i11: 0 <= x <= 30; loop invariant 0 <= y <= 20; loop invariant x >= y; loop invariant y <= 10; loop invariant x >= 0; loop invariant x <= 30; loop invariant y >= 0; loop invariant y <= 20; loop invariant x >= y; loop invariant y <= 10;\nloop invariant i12: x + 10 * (y + 1) <= 20;\nloop invariant i13: x + 10 * (y + 1) > 10;\nloop invariant i14: x + 10 * (y + 1) >= 0;\nloop invariant i15: x >= 0;\nloop invariant i16: y >= 0;\nloop invariant i17: (x + y) >= 0;\nloop invariant i18: (x + y) <= 20;\nloop invariant i19: (x + y) == 0 ==> (x != 20);\nloop invariant i20: x <= 10;\nloop invariant i21: y <= 10;\nloop invariant i22: x <= y + 10;\nloop invariant i23: x <= y + 10 + 10;\nloop invariant i24: x <= y + 10 + 10 + 10;\nloop invariant i25: x <= y + 10 + 10 + 10 + 10;\nloop invariant i26: x <= y + 10 + 10 + 10 + 10 + 10;\nloop invariant i27: x <= y + 10 + 10 + 10 + 10 + 10 + 10;\nloop invariant i28: x <= y + 10 + 10 + 10 + 10 + 10 + 10 + 10;\nloop invariant i29: x <= y + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10;\nloop invariant i30: x <= y + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10;\nloop invariant i31: x <= y + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10;\nloop invariant i32: x <= y + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10;\nloop invariant i33: x <= y + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10;\nloop invariant i34: x <= y + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10;\nloop invariant i35: x <= y + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10;\nloop invariant i36: x <= y + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10;\nloop invariant i37: x <= y + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10;\nloop invariant i38: x <= y + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10;\nloop invariant i39: x <= y + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10;\nloop invariant i40: x <= y + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10;\nloop invariant i41: (x <= 20) ==> (y >= 0);\nloop invariant i42: (x <= 20) ==> (y <= 10);\nloop invariant i43: (x <= 20) ==> (y != 0);\nloop invariant i44: 1 <= x <= 20;\nloop invariant i45: 0 <= y <= 20;\nloop invariant i46: z1 >= 0;\nloop invariant i47: z2 >= 0;\nloop invariant i48: z3 >= 0;\nloop invariant i49: y <= x + 10;\nloop invariant i50: z1 <= x;\nloop invariant i51: z2 <= y;\nloop invariant i52: z3 <= z1 + z2;\nloop invariant i53: z1 + z2 >= x;\nloop invariant i54: z2 + z3 >= y;\nloop invariant i55: z1 + z2 + z3 >= x + y;\nloop invariant i56: z1 + z2 + z3 <= x + y + 10;\nloop invariant i57: z1 + z2 + z3 >= x;\nloop invariant i58: z1 + z2 + z3 <= x + 10;\nloop invariant i59: z1 + z2 + z3 >= y;\nloop invariant i60: z1 + z2 + z3 <= y + 10;\nloop invariant i61: z1 <= 10;\nloop invariant i62: z2 <= 10;\nloop invariant i63: z3 <= 10;\nloop invariant i64: x == 10 ==> y == 0;\nloop invariant i65: x == 10 ==> z1 == 10;\nloop invariant i66: x == 10 ==> z2 == 10;\nloop invariant i67: x == 10 ==> z3 == 10;\nloop invariant i68: x == 0 ==> y == 0;\nloop invariant i69: x == 0 ==> z1 == 0;\nloop invariant i70: x == 0 ==> z2 == 0;\nloop invariant i71: x == 0 ==> z3 == 0;\nloop invariant i72: x == 1 ==> y == 1;\nloop invariant i73: x == 1 ==> z1 == 1;\nloop invariant i74: x == 1 ==> z2 == 1;\nloop invariant i75: x == 1 ==> z3 == 1;\nloop invariant i76: x == 2 ==> y == 2;\nloop invariant i77: x == 2 ==> z1 == 2;\nloop invariant i78: x == 2 ==> z2 == 2;\nloop invariant i79: x == 2 ==> z3 == 2;\nloop invariant i80: x == 3 ==> y == 3;\nloop invariant i81: x == 3 ==> z1 == 3;\nloop invariant i82: x == 3 ==> z2 == 3;\nloop invariant i83: x == 3 ==> z3 == 3;\nloop invariant i84: x == 4 ==> y == 4;\nloop invariant i85: x == 4 ==> z1 == 4;\nloop invariant i86: x == 4 ==> z2 == 4;\nloop invariant i87: x == 4 ==> z3 == 4;\nloop invariant i88: x == 5 ==> y == 5;\nloop invariant i89: x == 5 ==> z1 == 5;\nloop invariant i90: x == 5 ==> z2 == 5;\nloop invariant i91: x == 5 ==> z3 == 5;\nloop invariant i92: x == 6 ==> y == 6;\nloop invariant i93: x == 6 ==> z1 == 6;\nloop invariant i94: x == 6 ==> z2 == 6;\nloop invariant i95: x == 6 ==> z3 == 6;\nloop invariant i96: x == 7 ==> y == 7;\nloop invariant i97: x == 7 ==> z1 == 7;\nloop invariant i98: x == 7 ==> z2 == 7;\nloop invariant i99: x == 7 ==> z3 == 7;\nloop invariant i100: x == 8 ==> y == 8;\nloop invariant i101: x == 8 ==> z1 == 8;\nloop invariant i102: x == 8 ==> z2 == 8;\nloop invariant i103: x == 8 ==> z3 == 8;\nloop invariant i104: x == 9 ==> y == 9;\nloop invariant i105: x == 9 ==> z1 == 9;\nloop invariant i106: x == 9 ==> z2 == 9;\nloop invariant i107: x == 9 ==> z3 == 9;\nloop invariant i108: unknown() ==> x == 10;\nloop invariant i109: unknown() ==> y == 0;\nloop invariant i110: unknown() ==> z1 == 0;\nloop invariant i111: unknown() ==> z2 == 0;\nloop invariant i112: unknown() ==> z3 == 0;\nloop invariant i113: 0 <= x <= 20;\nloop invariant i114: x >= 10;\nloop invariant i115: x <= 20;\nloop invariant i116: x >= y;\nloop invariant i117: x == 10 ==> y == 10;\nloop invariant i118: x == 0 ==> x == 0;\nloop invariant i119: x == 10 ==> x == 10;\nloop invariant i120: y == 0 ==> y == 0;\nloop invariant i121: y == 10 ==> y == 10;\nloop invariant i122: x == 0 ==> y == 0 ==> y == 0;\nloop invariant i123: x == 10 ==> y == 10 ==> y == 10;\nloop invariant i124: x == 0 ==> y == 0 ==> x == 0;\nloop invariant i125: x == 10 ==> y == 10 ==> x == 10;\nloop invariant i126: x == 0 ==> y == 0 ==> y == 0 ==> y == 0;\nloop invariant i127: x == 10 ==> y == 10 ==> y == 10 ==> y == 10;\nloop invariant i128: x == 0 ==> y == 0 ==> x == 0 ==> x == 0;\nloop invariant i129: x == 10 ==> y == 10 ==> x == 10 ==> x == 10;\nloop invariant i130: x == 0 ==> y == 0 ==> y == 0 ==> x == 0;\nloop invariant i131: x == 10 ==> y == 10 ==> y == 10 ==> x == 10;\nloop invariant i132: x == 0 ==> y == 0 ==> y == 0 ==> x == 0 ==> x == 0;\nloop invariant i133: x == 10 ==> y == 10 ==> y == 10 ==> x == 10 ==> x == 10;\nloop invariant i134: x == 0 ==> y == 0 ==> y == 0 ==> x == 0 ==> x == 0 ==> x == 0;\nloop invariant i135: x == 10 ==> y == 10 ==> y == 10 ==> x == 10 ==> x == 10 ==> x == 10;\nloop invariant i136: x == 0 ==> y == 0 ==> y == 0 ==> x == 0 ==> x == 0 ==> x == 0 ==> x == 0;\nloop invariant i137: x == 10 ==> y == 10 ==> y == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10;\nloop invariant i138: x == 0 ==> y == 0 ==> y == 0 ==> x == 0 ==> x == 0 ==> x == 0 ==> x == 0 ==> x == 0;\nloop invariant i139: x == 10 ==> y == 10 ==> y == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10;\nloop invariant i140: x == 0 ==> y == 0 ==> y == 0 ==> x == 0 ==> x == 0 ==> x == 0 ==> x == 0 ==> x == 0 ==> x == 0;\nloop invariant i141: x == 10 ==> y == 10 ==> y == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10;\nloop invariant i142: x == 0 ==> y == 0 ==> y == 0 ==> x == 0 ==> x == 0 ==> x == 0 ==> x == 0 ==> x == 0 ==> x == 0 ==> x == 0;\nloop invariant i143: x == 10 ==> y == 10 ==> y == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10;\nloop invariant i144: x == 0 ==> y == 0 ==> y == 0 ==> x == 0 ==> x == 0 ==> x == 0 ==> x == 0 ==> x == 0 ==> x == 0 ==> x == 0 ==> x == 0;\nloop invariant i145: x == 10 ==> y == 10 ==> y == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10;\nloop invariant i146: x + 10 * y <= 10 + 10 * y;\nloop invariant i147: x + y <= 10 + y;\nloop invariant i148: x + y <= 10;\nloop invariant i149: x + y >= 0;\nloop invariant i150: x + y >= x;\nloop invariant i151: x + y >= y;\nloop invariant i152: x + y == 0 -> (x == 0 && y == 0);\nloop invariant i153: x + y == 0 -> (x == 0 || y == 0 || (x == 1 && y == -1));\nloop invariant i154: x + y == 0 -> (x == 0 || y == 0 || (x == 2 && y == -2));\nloop invariant i155: x + y == 0 -> (x == 0 || y == 0 || (x == 3 && y == -3));\nloop invariant i156: x + y == 0 -> (x == 0 || y == 0 || (x == 4 && y == -4));\nloop invariant i157: x + y == 0 -> (x == 0 || y == 0 || (x == 5 && y == -5));\nloop invariant i158: x + y == 0 -> (x == 0 || y == 0 || (x == 6 && y == -6));\nloop invariant i159: x + y == 0 -> (x == 0 || y == 0 || (x == 7 && y == -7));\nloop invariant i160: x + y == 0 -> (x == 0 || y == 0 || (x == 8 && y == -8));\nloop invariant i161: x + y == 0 -> (x == 0 || y == 0 || (x == 9 && y == -9));\nloop invariant i162: x + y == 0 -> (x == 0 || y == 0 || (x == 10 && y == -10));\nloop invariant i163: x + y == 0 -> (x == 0 || y == 0);\nloop invariant i164: x + y == 0 -> (x == 1 && y == -1);\nloop invariant i165: x + y == 0 -> (x == 2 && y == -2);\nloop invariant i166: x + y == 0 -> (x == 3 && y == -3);\nloop invariant i167: x + y == 0 -> (x == 4 && y == -4);\nloop invariant i168: x + y == 0 -> (x == 5 && y == -5);\nloop invariant i169: x + y == 0 -> (x == 6 && y == -6);\nloop invariant i170: x + y == 0 -> (x == 7 && y == -7);\nloop invariant i171: x + y == 0 -> (x == 8 && y == -8);\nloop invariant i172: x + y == 0 -> (x == 9 && y == -9);\nloop invariant i173: x + y == 0 -> (x == 10 && y == -10);\nloop invariant i174: x >= 0; loop invariant x <= 30; loop invariant y >= 0; loop invariant y <= 30; loop invariant x <= 2*y; loop invariant y <= 2*x; loop invariant x + y <= 30; loop invariant x + y >= 0; loop invariant (x == 20) ==> (y == 0); loop invariant (x == 21) ==> (y == 1); loop invariant (x == 22) ==> (y == 2); loop invariant (x == 23) ==> (y == 3); loop invariant (x == 24) ==> (y == 4); loop invariant (x == 25) ==> (y == 5); loop invariant (x == 26) ==> (y == 6); loop invariant (x == 27) ==> (y == 7); loop invariant (x == 28) ==> (y == 8); loop invariant (x == 29) ==> (y == 9); loop invariant (x == 30) ==> (y == 10); loop invariant (x == 19) ==> (y == 11); loop invariant (x == 18) ==> (y == 12); loop invariant (x == 17) ==> (y == 13); loop invariant (x == 16) ==> (y == 14); loop invariant (x == 15) ==> (y == 15); loop invariant (x == 14) ==> (y == 16); loop invariant (x == 13) ==> (y == 17); loop invariant (x == 12) ==> (y == 18); loop invariant (x == 11) ==> (y == 19); loop invariant (x == 10) ==> (y == 20); loop invariant (x == 9) ==> (y == 21); loop invariant (x == 8) ==> (y == 22); loop invariant (x == 7) ==> (y == 23); loop invariant (x == 6) ==> (y == 24); loop invariant (x == 5) ==> (y == 25); loop invariant (x == 4) ==> (y == 26); loop invariant (x == 3) ==> (y == 27); loop invariant (x == 2) ==> (y == 28); loop invariant (x == 1) ==> (y == 29); loop invariant (x == 0) ==> (y == 30); loop invariant (x == 20) ==> (y == 0); loop invariant (x == 21) ==> (y == 1); loop invariant (x == 22) ==> (y == 2); loop invariant (x == 23) ==> (y == 3); loop invariant (x == 24) ==> (y == 4); loop invariant (x == 25) ==> (y == 5); loop invariant (x == 26) ==> (y == 6); loop invariant (x == 27) ==> (y == 7); loop invariant (x == 28) ==> (y == 8); loop invariant (x == 29) ==> (y == 9); loop invariant (x == 30) ==> (y == 10); loop invariant (x == 19) ==> (y == 11); loop invariant (x == 18) ==> (y == 12); loop invariant (x == 17) ==> (y == 13); loop invariant (x == 16) ==> (y == 14); loop invariant (x == 15) ==> (y == 15); loop invariant (x == 14) ==> (y == 16); loop invariant (x == 13) ==> (y == 17); loop invariant (x == 12) ==> (y == 18); loop invariant (x == 11) ==> (y == 19); loop invariant (x == 10) ==> (y == 20); loop invariant (x == 9) ==> (y == 21); loop invariant (x == 8) ==> (y == 22); loop invariant (x == 7) ==> (y == 23); loop invariant (x == 6) ==> (y == 24); loop invariant (x == 5) ==> (y == 25);\nloop invariant i175: 0 <= x <= 10 + 10 * y;\nloop invariant i176: x <= 10 + 10 * y;\nloop invariant i177: unknown() ==> x >= 0;\nloop invariant i178: unknown() ==> x <= 10 + 10 * y;\nloop invariant i179: unknown() ==> y >= 0;\nloop invariant i180: unknown() ==> y <= 10;\nloop invariant i181: (y == 0) ==> (x != 20);\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 10));\n    (y  = (y + 10));\n    }\n\n  }\n  \nif ( (y == 0) )\n{;\n//@ assert( (x != 20) );\n}\n\n}",
        "combined_annotation_num_solver_calls": 41,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  assume((x >= 0));\n  assume((x <= 10));\n  assume((y <= 10));\n  assume((y >= 0));\n  \n  /*@\nloop invariant i1: 0 <= y <= 10;\nloop invariant i2: 0 <= x <= 10;\n\n\n\n\n\n\nloop invariant i9: (x == 20) ==> (y == 0);\n\nloop invariant i11: 0 <= x <= 30; loop invariant 0 <= y <= 20; loop invariant x >= y; loop invariant y <= 10; loop invariant x >= 0; loop invariant x <= 30; loop invariant y >= 0; loop invariant y <= 20; loop invariant x >= y; loop invariant y <= 10;\n\n\nloop invariant i14: x + 10 * (y + 1) >= 0;\nloop invariant i15: x >= 0;\nloop invariant i16: y >= 0;\nloop invariant i17: (x + y) >= 0;\nloop invariant i18: (x + y) <= 20;\nloop invariant i19: (x + y) == 0 ==> (x != 20);\nloop invariant i20: x <= 10;\nloop invariant i21: y <= 10;\nloop invariant i22: x <= y + 10;\nloop invariant i23: x <= y + 10 + 10;\nloop invariant i24: x <= y + 10 + 10 + 10;\nloop invariant i25: x <= y + 10 + 10 + 10 + 10;\nloop invariant i26: x <= y + 10 + 10 + 10 + 10 + 10;\nloop invariant i27: x <= y + 10 + 10 + 10 + 10 + 10 + 10;\nloop invariant i28: x <= y + 10 + 10 + 10 + 10 + 10 + 10 + 10;\nloop invariant i29: x <= y + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10;\nloop invariant i30: x <= y + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10;\nloop invariant i31: x <= y + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10;\nloop invariant i32: x <= y + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10;\nloop invariant i33: x <= y + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10;\nloop invariant i34: x <= y + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10;\nloop invariant i35: x <= y + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10;\nloop invariant i36: x <= y + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10;\nloop invariant i37: x <= y + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10;\nloop invariant i38: x <= y + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10;\nloop invariant i39: x <= y + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10;\nloop invariant i40: x <= y + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10;\nloop invariant i41: (x <= 20) ==> (y >= 0);\nloop invariant i42: (x <= 20) ==> (y <= 10);\n\n\nloop invariant i45: 0 <= y <= 20;\n\n\n\nloop invariant i49: y <= x + 10;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i68: x == 0 ==> y == 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i113: 0 <= x <= 20;\n\nloop invariant i115: x <= 20;\nloop invariant i116: x >= y;\n\nloop invariant i118: x == 0 ==> x == 0;\nloop invariant i119: x == 10 ==> x == 10;\nloop invariant i120: y == 0 ==> y == 0;\nloop invariant i121: y == 10 ==> y == 10;\nloop invariant i122: x == 0 ==> y == 0 ==> y == 0;\nloop invariant i123: x == 10 ==> y == 10 ==> y == 10;\nloop invariant i124: x == 0 ==> y == 0 ==> x == 0;\nloop invariant i125: x == 10 ==> y == 10 ==> x == 10;\nloop invariant i126: x == 0 ==> y == 0 ==> y == 0 ==> y == 0;\nloop invariant i127: x == 10 ==> y == 10 ==> y == 10 ==> y == 10;\nloop invariant i128: x == 0 ==> y == 0 ==> x == 0 ==> x == 0;\nloop invariant i129: x == 10 ==> y == 10 ==> x == 10 ==> x == 10;\nloop invariant i130: x == 0 ==> y == 0 ==> y == 0 ==> x == 0;\nloop invariant i131: x == 10 ==> y == 10 ==> y == 10 ==> x == 10;\nloop invariant i132: x == 0 ==> y == 0 ==> y == 0 ==> x == 0 ==> x == 0;\nloop invariant i133: x == 10 ==> y == 10 ==> y == 10 ==> x == 10 ==> x == 10;\nloop invariant i134: x == 0 ==> y == 0 ==> y == 0 ==> x == 0 ==> x == 0 ==> x == 0;\nloop invariant i135: x == 10 ==> y == 10 ==> y == 10 ==> x == 10 ==> x == 10 ==> x == 10;\nloop invariant i136: x == 0 ==> y == 0 ==> y == 0 ==> x == 0 ==> x == 0 ==> x == 0 ==> x == 0;\nloop invariant i137: x == 10 ==> y == 10 ==> y == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10;\nloop invariant i138: x == 0 ==> y == 0 ==> y == 0 ==> x == 0 ==> x == 0 ==> x == 0 ==> x == 0 ==> x == 0;\nloop invariant i139: x == 10 ==> y == 10 ==> y == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10;\nloop invariant i140: x == 0 ==> y == 0 ==> y == 0 ==> x == 0 ==> x == 0 ==> x == 0 ==> x == 0 ==> x == 0 ==> x == 0;\nloop invariant i141: x == 10 ==> y == 10 ==> y == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10;\nloop invariant i142: x == 0 ==> y == 0 ==> y == 0 ==> x == 0 ==> x == 0 ==> x == 0 ==> x == 0 ==> x == 0 ==> x == 0 ==> x == 0;\nloop invariant i143: x == 10 ==> y == 10 ==> y == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10;\nloop invariant i144: x == 0 ==> y == 0 ==> y == 0 ==> x == 0 ==> x == 0 ==> x == 0 ==> x == 0 ==> x == 0 ==> x == 0 ==> x == 0 ==> x == 0;\nloop invariant i145: x == 10 ==> y == 10 ==> y == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10;\nloop invariant i146: x + 10 * y <= 10 + 10 * y;\nloop invariant i147: x + y <= 10 + y;\n\nloop invariant i149: x + y >= 0;\nloop invariant i150: x + y >= x;\nloop invariant i151: x + y >= y;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i174: x >= 0; loop invariant x <= 30; loop invariant y >= 0; loop invariant y <= 30; loop invariant x <= 2*y; loop invariant y <= 2*x; loop invariant x + y <= 30; loop invariant x + y >= 0; loop invariant (x == 20) ==> (y == 0); loop invariant (x == 21) ==> (y == 1); loop invariant (x == 22) ==> (y == 2); loop invariant (x == 23) ==> (y == 3); loop invariant (x == 24) ==> (y == 4); loop invariant (x == 25) ==> (y == 5); loop invariant (x == 26) ==> (y == 6); loop invariant (x == 27) ==> (y == 7); loop invariant (x == 28) ==> (y == 8); loop invariant (x == 29) ==> (y == 9); loop invariant (x == 30) ==> (y == 10); loop invariant (x == 19) ==> (y == 11); loop invariant (x == 18) ==> (y == 12); loop invariant (x == 17) ==> (y == 13); loop invariant (x == 16) ==> (y == 14); loop invariant (x == 15) ==> (y == 15); loop invariant (x == 14) ==> (y == 16); loop invariant (x == 13) ==> (y == 17); loop invariant (x == 12) ==> (y == 18); loop invariant (x == 11) ==> (y == 19); loop invariant (x == 10) ==> (y == 20); loop invariant (x == 9) ==> (y == 21); loop invariant (x == 8) ==> (y == 22); loop invariant (x == 7) ==> (y == 23); loop invariant (x == 6) ==> (y == 24); loop invariant (x == 5) ==> (y == 25); loop invariant (x == 4) ==> (y == 26); loop invariant (x == 3) ==> (y == 27); loop invariant (x == 2) ==> (y == 28); loop invariant (x == 1) ==> (y == 29); loop invariant (x == 0) ==> (y == 30); loop invariant (x == 20) ==> (y == 0); loop invariant (x == 21) ==> (y == 1); loop invariant (x == 22) ==> (y == 2); loop invariant (x == 23) ==> (y == 3); loop invariant (x == 24) ==> (y == 4); loop invariant (x == 25) ==> (y == 5); loop invariant (x == 26) ==> (y == 6); loop invariant (x == 27) ==> (y == 7); loop invariant (x == 28) ==> (y == 8); loop invariant (x == 29) ==> (y == 9); loop invariant (x == 30) ==> (y == 10); loop invariant (x == 19) ==> (y == 11); loop invariant (x == 18) ==> (y == 12); loop invariant (x == 17) ==> (y == 13); loop invariant (x == 16) ==> (y == 14); loop invariant (x == 15) ==> (y == 15); loop invariant (x == 14) ==> (y == 16); loop invariant (x == 13) ==> (y == 17); loop invariant (x == 12) ==> (y == 18); loop invariant (x == 11) ==> (y == 19); loop invariant (x == 10) ==> (y == 20); loop invariant (x == 9) ==> (y == 21); loop invariant (x == 8) ==> (y == 22); loop invariant (x == 7) ==> (y == 23); loop invariant (x == 6) ==> (y == 24); loop invariant (x == 5) ==> (y == 25);\nloop invariant i175: 0 <= x <= 10 + 10 * y;\nloop invariant i176: x <= 10 + 10 * y;\n\n\n\n\nloop invariant i181: (y == 0) ==> (x != 20);\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 10));\n    (y  = (y + 10));\n    }\n\n  }\n  \nif ( (y == 0) )\n{;\n//@ assert( (x != 20) );\n}\n\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/11.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/15.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/16.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/18.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/20.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/23.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/30.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/37.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/38.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/43.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/46.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/popl.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/07.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/39.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/gulv_simp.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/substring1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/xy10.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/const_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/multivar_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/phases_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/simple_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/simple_safe2.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/simple_safe3.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/simple_safe4.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/underapprox_safe2.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/underapprox_unsafe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/barbr.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/barbrprime.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/bk-nat.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/bkley.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/efm.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/ex1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/lifnat.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/lifnatprime.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/lifo.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/seesaw.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/substring1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/swim.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/swim1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/ken-imp.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/rajamani_1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/simple.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/simple_if.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/up-nested.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/svcomp/count_up_down_true.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/svcomp/for_infinite_loop_1_true.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/svcomp/for_infinite_loop_2_true.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/svcomp/sum03_true.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/svcomp/sum04_true.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/svcomp/terminator_02_true.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/svcomp/trex03_true.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/svcomp/while_infinite_loop_1_true.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/svcomp/while_infinite_loop_2_true.c",
            "../dataset/loop_invariants/code2inv/1.c",
            "../dataset/loop_invariants/code2inv/10.c",
            "../dataset/loop_invariants/code2inv/100.c",
            "../dataset/loop_invariants/code2inv/103.c",
            "../dataset/loop_invariants/code2inv/107.c",
            "../dataset/loop_invariants/code2inv/108.c",
            "../dataset/loop_invariants/code2inv/11.c",
            "../dataset/loop_invariants/code2inv/114.c",
            "../dataset/loop_invariants/code2inv/115.c",
            "../dataset/loop_invariants/code2inv/116.c",
            "../dataset/loop_invariants/code2inv/117.c",
            "../dataset/loop_invariants/code2inv/12.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/split.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/13.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/14.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/19.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/32.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/39.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/41.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/44.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/cav.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/05.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/19.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/37.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/gulv.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/pldi082_unbounded.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/svcomp/sum01_true.c",
            "../dataset/loop_invariants/code2inv/102.c",
            "../dataset/loop_invariants/code2inv/109.c",
            "../dataset/loop_invariants/code2inv/112.c",
            "../dataset/loop_invariants/code2inv/118.c"
        ],
        "skipped": [],
        "total": 198,
        "success_count": 163,
        "failure_count": 35,
        "success_rate": 0.8232323232323232
    }
}