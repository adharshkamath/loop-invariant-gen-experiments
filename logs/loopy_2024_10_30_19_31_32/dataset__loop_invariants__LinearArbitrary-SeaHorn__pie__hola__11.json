{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/11.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main()\n{\n  int j=0;\n  int i;\n  int x=100;\n   \n  for (i =0; i< x ; i++){\n    j = j + 2;\n  }\n\n  {;\n//@ assert(j == 2*x);\n}\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= j <= 2*x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant j == 2*i;\nloop invariant i <= j/2;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant j == 2*i;\nloop invariant i <= j/2;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant j == 2*i;\nloop invariant i <= j/2;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant j == 2*i;\nloop invariant i <= j/2;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant j == 2*i;\nloop invariant i <= j/2;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant j == 2*i;\nloop invariant i <= j/2;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant j == 2*i;\nloop invariant i <= j/2;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant j == 2*i;\nloop invariant i <= j/2;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant j == 2*i;\nloop invariant i <= j/2;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant j == 2*i;\nloop invariant i <= j/2;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant j == 2*i;\nloop invariant i <= j/2;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant j == 2*i;\nloop invariant i <= j/2;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant j == 2*i;\nloop invariant i <= j/2;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant j == 2*i;\nloop invariant i <= j/2;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant j == 2*i;\nloop invariant i <= j/2;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant j == 2*i;\nloop invariant i <= j/2;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant j == 2*i;\nloop invariant i <= j/2;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant j == 2*i;\nloop invariant i <= j/2;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant j == 2*i;\nloop invariant i <= j/2;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant j == 2*i;\nloop invariant i <= j/2;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant j == 2*i;\nloop invariant i <= j/2;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant j == 2*i;\nloop invariant i <= j/2;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant j == 2*i;\nloop invariant i <= j/2;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant j == 2*i;\nloop invariant i <= j/2;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant j == 2*i;\nloop invariant i <= j/2;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant j == 2*i;\nloop invariant i <= j/2;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant j == 2*i;\nloop invariant i <= j/2;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant j == 2*i;\nloop invariant i <= j/2;\nloop invariant i <= x;\nloop invariant i >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= x;\nloop invariant j == 2*i;\nloop invariant j <= 2*x;\nloop invariant j >= 0;\nloop invariant i == x;\nloop invariant j == 2*x;\nloop invariant j == 2*x ==> x >= 0;\nloop invariant j == 2*x ==> i == x;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= j <= 2*x;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= x;\nloop invariant j == i * 2;\nloop invariant j < 2 * x ==> j == 2 * i;\nloop invariant j >= 2 * x ==> j == 2 * x;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= x;\nloop invariant j = 2 * i;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= j <= 2 * x;\nloop invariant 0 <= i <= x;\nloop invariant j == 2 * i;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= x;\nloop invariant j = 2 * i;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= j <= 2*x;\nloop invariant j == 2*i;\nloop invariant 0 <= i <= x;\nloop invariant i >= 0;\nloop invariant i < x;\nloop invariant j == 2*i;\nloop invariant i < x;\nloop invariant i >= 0;\nloop invariant j <= 2*x;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant j <= 2*x;\nloop invariant j == 2*i;\nloop invariant i < x;\nloop invariant i >= 0;\nloop invariant j <= 2*x;\nloop invariant i < x;\nloop invariant i >= 0;\nloop invariant j <= 2*x;\nloop invariant j == 2*i;\nloop invariant i >= 0;\nloop invariant j <= 2*x;\nloop invariant i < x;\nloop invariant j == 2*i;\nloop invariant i >= 0;\nloop invariant j <= 2*x;\nloop invariant i < x;\nloop invariant j == 2*i;\nloop invariant i >= 0;\nloop invariant j <= 2*x;\nloop invariant i < x;\nloop invariant j == 2*i;\nloop invariant i >= 0;\nloop invariant j <= 2*x;\nloop invariant i < x;\nloop invariant j == 2*i;\nloop invariant i >= 0;\nloop invariant j <= 2*x;\nloop invariant i < x;\nloop invariant j == 2*i;\nloop invariant i >= 0;\nloop invariant j <= 2*x;\nloop invariant i < x;\nloop invariant j == 2*i;\nloop invariant i >= 0;\nloop invariant j <= 2*x;\nloop invariant i < x;\nloop invariant j == 2*i;\nloop invariant i >= 0;\nloop invariant j <= 2*x;\nloop invariant i < x;\nloop invariant j == 2*i;\nloop invariant i >= 0;\nloop invariant j <= 2*x;\nloop invariant i < x;\nloop invariant j == 2*i;\nloop invariant i >= 0;\nloop invariant j <= 2*x;\nloop invariant i < x;\nloop invariant j == 2*i;\nloop invariant i >= 0;\nloop invariant j <= 2*x;\nloop invariant i < x;\nloop invariant j == 2*i;\nloop invariant i >= 0;\nloop invariant j <= 2*x;\nloop invariant i < x;\nloop invariant j == 2*i;\nloop invariant i >= 0;\nloop invariant j <= 2*x;\nloop invariant i < x;\nloop invariant j == 2*i;\nloop invariant i >= 0;\nloop invariant j <= 2*x;\nloop invariant i < x;\nloop invariant j == 2*i;\nloop invariant i >= 0;\nloop invariant j <= 2*x;\nloop invariant i < x;\nloop invariant j == 2*i;\nloop invariant i >= 0;\nloop invariant j <= 2*x;\nloop invariant i < x;\nloop invariant j == 2*i;\nloop invariant i >= 0;\nloop invariant j <= 2*x;\nloop invariant i < x;\nloop invariant j == 2*i;\nloop invariant i >= 0;\nloop invariant j <= 2*x;\nloop invariant i < x;\nloop invariant j == 2*i;\nloop invariant i >= 0;\nloop invariant j <= 2*x;\nloop invariant i < x;\nloop invariant j == 2*i;\nloop invariant i >= 0;\nloop invariant j <= 2*x;\nloop invariant i < x;\nloop invariant j == 2*i;\nloop invariant i >= 0;\nloop invariant j <= 2*x;\nloop invariant i < x;\nloop invariant j == 2*i;\nloop invariant i >= 0;\nloop invariant j <= 2*x;\nloop invariant i < x;\nloop invariant j == 2*i;\nloop invariant i >= 0;\nloop invariant j <= 2*x;\nloop invariant i < x;\nloop invariant j == 2*i;\nloop invariant i >= 0;\nloop invariant j <= 2*x;\nloop invariant i < x;\nloop invariant j == 2*i;\nloop invariant i >= 0;\nloop invariant j <= 2*x;\nloop invariant i < x;\nloop invariant j == 2*i;\nloop invariant i >= 0;\nloop invariant j <= 2*x;\nloop invariant i < x;\nloop invariant j == 2*i;\nloop invariant i >= 0;\nloop invariant j <= 2*x;\nloop invariant i < x;\nloop invariant j == 2*i;\nloop invariant i >= 0;\nloop invariant j <= 2*x;\nloop invariant i < x;\nloop invariant j == 2*i;\nloop invariant i >= 0;\nloop invariant j <= 2*x;\nloop invariant i < x;\nloop invariant j == 2*i;\nloop invariant i >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= x;\nloop invariant j >= 0;\nloop invariant j == 2*i;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= j <= 2*x;\nloop invariant 0 <= i <= x;\nloop invariant i <= j;\nloop invariant i <= x;\nloop invariant j <= 2*i;\nloop invariant j <= 2*x;\nloop invariant i <= j;\nloop invariant i <= x;\nloop invariant j <= 2*i;\nloop invariant j <= 2*x;\nloop invariant i <= j;\nloop invariant i <= x;\nloop invariant j <= 2*i;\nloop invariant j <= 2*x;\nloop invariant i <= j;\nloop invariant i <= x;\nloop invariant j <= 2*i;\nloop invariant j <= 2*x;\nloop invariant i <= j;\nloop invariant i <= x;\nloop invariant j <= 2*i;\nloop invariant j <= 2*x;\nloop invariant i <= j;\nloop invariant i <= x;\nloop invariant j <= 2*i;\nloop invariant j <= 2*x;\nloop invariant i <= j;\nloop invariant i <= x;\nloop invariant j <= 2*i;\nloop invariant j <= 2*x;\nloop invariant i <= j;\nloop invariant i <= x;\nloop invariant j <= 2*i;\nloop invariant j <= 2*x;\nloop invariant i <= j;\nloop invariant i <= x;\nloop invariant j <= 2*i;\nloop invariant j <= 2*x;\nloop invariant i <= j;\nloop invariant i <= x;\nloop invariant j <= 2*i;\nloop invariant j <= 2*x;\nloop invariant i <= j;\nloop invariant i <= x;\nloop invariant j <= 2*i;\nloop invariant j <= 2*x;\nloop invariant i <= j;\nloop invariant i <= x;\nloop invariant j <= 2*i;\nloop invariant j <= 2*x;\nloop invariant i <= j;\nloop invariant i <= x;\nloop invariant j <= 2*i;\nloop invariant j <= 2*x;\nloop invariant i <= j;\nloop invariant i <= x;\nloop invariant j <= 2*i;\nloop invariant j <= 2*x;\nloop invariant i <= j;\nloop invariant i <= x;\nloop invariant j <= 2*i;\nloop invariant j <= 2*x;\nloop invariant i <= j;\nloop invariant i <= x;\nloop invariant j <= 2*i;\nloop invariant j <= 2*x;\nloop invariant i <= j;\nloop invariant i <= x;\nloop invariant j <= 2*i;\nloop invariant j <= 2*x;\nloop invariant i <= j;\nloop invariant i <= x;\nloop invariant j <= 2*i;\nloop invariant j <= 2*x;\nloop invariant i <= j;\nloop invariant i <= x;\nloop invariant j <= 2*i;\nloop invariant j <= 2*x;\nloop invariant i <= j;\nloop invariant i <= x;\nloop invariant j <= 2*i;\nloop invariant j <= 2*x;\nloop invariant i <= j;\nloop invariant i <= x;\nloop invariant j <= 2*i;\nloop invariant j <= 2*x;\nloop invariant i <= j;\nloop invariant i <= x;\nloop invariant j <= 2*i;\nloop invariant j <= 2*x;\nloop invariant i <= j;\nloop invariant i <= x;\nloop invariant j <= 2*i;\nloop invariant j <= 2*x;\nloop invariant i <= j;\nloop invariant i <= x;\nloop invariant j <= 2*i;\nloop invariant j <= 2*x;\nloop invariant i <= j;\nloop invariant i <= x;\nloop invariant j <= 2*i;\nloop invariant j <= 2*x;\nloop invariant i <= j;\nloop invariant i <= x;\nloop invariant j <= 2*i;\nloop invariant j <= 2*x;\nloop invariant i <= j;\nloop invariant i <= x;\nloop invariant j <= 2*i;\nloop invariant j <= 2*x;\nloop invariant i <= j;\nloop invariant i <= x;\nloop invariant j <= 2*i;\nloop invariant j <= 2*x;\nloop invariant i <= j;\nloop invariant i <= x;\nloop invariant j <= 2*i;\nloop invariant j <= 2*x;\nloop invariant i <= j;\nloop invariant i <= x;\nloop invariant j <= 2*i;\nloop invariant j <= 2*x;\nloop invariant i <= j;\nloop invariant i <= x;\nloop invariant j <= 2*i;\nloop invariant j <= 2*x;\nloop invariant i <= j;\nloop invariant i <= x;\nloop invariant j <= 2*i;\nloop invariant j <= 2*x;\nloop invariant i <= j;\nloop invariant i <= x;\nloop invariant j <= 2*i;\nloop invariant j <= 2*x;\nloop invariant i <= j;\nloop invariant i <= x;\nloop invariant j <= 2*i;\nloop invariant j <= 2*x;\nloop invariant i <= j;\nloop invariant i <= x;\nloop invariant j <= 2*i;\nloop invariant j <= 2*x;\n*/\n```",
            "```\n/*@\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i + 1 <= x;\nloop invariant j = 2 * x;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= j <= 2 * x;\nloop invariant j >= 2 * i;\nloop invariant j <= 2 * (x - 1);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= x;\nloop invariant 0 <= j <= 2*x;\nloop invariant i == j / 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= j <= 2*i;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant j <= 2*x;\nloop invariant j == 2*i ==> i < x;\nloop invariant i == x ==> j == 2*x;\nloop invariant j == 2*x ==> i == x;\nloop invariant j == 2*i ==> i < x ==> i >= 0;\n*/\n```",
            "```\n/*@\nloop invariant x = 100 - i;\nloop invariant 0 <= i <= x;\nloop invariant 0 <= j <= 2 * (x - i);\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= j <= 2*x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant j == 2*i;\nloop invariant i <= j/2;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant j == 2*i;\nloop invariant i <= j/2;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant j == 2*i;\nloop invariant i <= j/2;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant j == 2*i;\nloop invariant i <= j/2;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant j == 2*i;\nloop invariant i <= j/2;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant j == 2*i;\nloop invariant i <= j/2;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant j == 2*i;\nloop invariant i <= j/2;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant j == 2*i;\nloop invariant i <= j/2;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant j == 2*i;\nloop invariant i <= j/2;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant j == 2*i;\nloop invariant i <= j/2;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant j == 2*i;\nloop invariant i <= j/2;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant j == 2*i;\nloop invariant i <= j/2;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant j == 2*i;\nloop invariant i <= j/2;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant j == 2*i;\nloop invariant i <= j/2;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant j == 2*i;\nloop invariant i <= j/2;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant j == 2*i;\nloop invariant i <= j/2;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant j == 2*i;\nloop invariant i <= j/2;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant j == 2*i;\nloop invariant i <= j/2;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant j == 2*i;\nloop invariant i <= j/2;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant j == 2*i;\nloop invariant i <= j/2;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant j == 2*i;\nloop invariant i <= j/2;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant j == 2*i;\nloop invariant i <= j/2;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant j == 2*i;\nloop invariant i <= j/2;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant j == 2*i;\nloop invariant i <= j/2;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant j == 2*i;\nloop invariant i <= j/2;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant j == 2*i;\nloop invariant i <= j/2;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant j == 2*i;\nloop invariant i <= j/2;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant j == 2*i;\nloop invariant i <= j/2;\nloop invariant i <= x;\nloop invariant i >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main()\n{\n  int j=0;\n  int i;\n  int x=100;\n   \n  /*@\nloop invariant i1: 0 <= j <= 2*x;\nloop invariant i2: i >= 0;\nloop invariant i3: i <= x;\nloop invariant i4: j == 2*i;\nloop invariant i5: i <= j/2;\n*/\nfor (i =0; i< x ; i++){\n    j = j + 2;\n  }\n\n  {;\n//@ assert(j == 2*x);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= x;\nloop invariant j == 2*i;\nloop invariant j <= 2*x;\nloop invariant j >= 0;\nloop invariant i == x;\nloop invariant j == 2*x;\nloop invariant j == 2*x ==> x >= 0;\nloop invariant j == 2*x ==> i == x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main()\n{\n  int j=0;\n  int i;\n  int x=100;\n   \n  /*@\nloop invariant i1: 0 <= i <= x;\nloop invariant i2: j == 2*i;\nloop invariant i3: j <= 2*x;\nloop invariant i4: j >= 0;\n\n\nloop invariant i7: j == 2*x ==> x >= 0;\nloop invariant i8: j == 2*x ==> i == x;\n*/\nfor (i =0; i< x ; i++){\n    j = j + 2;\n  }\n\n  {;\n//@ assert(j == 2*x);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= j <= 2*x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main()\n{\n  int j=0;\n  int i;\n  int x=100;\n   \n  /*@\n\n*/\nfor (i =0; i< x ; i++){\n    j = j + 2;\n  }\n\n  {;\n//@ assert(j == 2*x);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= x;\nloop invariant j == i * 2;\nloop invariant j < 2 * x ==> j == 2 * i;\nloop invariant j >= 2 * x ==> j == 2 * x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main()\n{\n  int j=0;\n  int i;\n  int x=100;\n   \n  /*@\nloop invariant i1: 0 <= i <= x;\nloop invariant i2: j == i * 2;\nloop invariant i3: j < 2 * x ==> j == 2 * i;\nloop invariant i4: j >= 2 * x ==> j == 2 * x;\n*/\nfor (i =0; i< x ; i++){\n    j = j + 2;\n  }\n\n  {;\n//@ assert(j == 2*x);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= x;\nloop invariant j = 2 * i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main()\n{\n  int j=0;\n  int i;\n  int x=100;\n   \n  /*@\nloop invariant i1: 0 <= i <= x;\n\n*/\nfor (i =0; i< x ; i++){\n    j = j + 2;\n  }\n\n  {;\n//@ assert(j == 2*x);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= j <= 2 * x;\nloop invariant 0 <= i <= x;\nloop invariant j == 2 * i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main()\n{\n  int j=0;\n  int i;\n  int x=100;\n   \n  /*@\nloop invariant i1: 0 <= j <= 2 * x;\nloop invariant i2: 0 <= i <= x;\nloop invariant i3: j == 2 * i;\n*/\nfor (i =0; i< x ; i++){\n    j = j + 2;\n  }\n\n  {;\n//@ assert(j == 2*x);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= x;\nloop invariant j = 2 * i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main()\n{\n  int j=0;\n  int i;\n  int x=100;\n   \n  /*@\nloop invariant i1: 0 <= i <= x;\n\n*/\nfor (i =0; i< x ; i++){\n    j = j + 2;\n  }\n\n  {;\n//@ assert(j == 2*x);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= j <= 2*x;\nloop invariant j == 2*i;\nloop invariant 0 <= i <= x;\nloop invariant i >= 0;\nloop invariant i < x;\nloop invariant j == 2*i;\nloop invariant i < x;\nloop invariant i >= 0;\nloop invariant j <= 2*x;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant j <= 2*x;\nloop invariant j == 2*i;\nloop invariant i < x;\nloop invariant i >= 0;\nloop invariant j <= 2*x;\nloop invariant i < x;\nloop invariant i >= 0;\nloop invariant j <= 2*x;\nloop invariant j == 2*i;\nloop invariant i >= 0;\nloop invariant j <= 2*x;\nloop invariant i < x;\nloop invariant j == 2*i;\nloop invariant i >= 0;\nloop invariant j <= 2*x;\nloop invariant i < x;\nloop invariant j == 2*i;\nloop invariant i >= 0;\nloop invariant j <= 2*x;\nloop invariant i < x;\nloop invariant j == 2*i;\nloop invariant i >= 0;\nloop invariant j <= 2*x;\nloop invariant i < x;\nloop invariant j == 2*i;\nloop invariant i >= 0;\nloop invariant j <= 2*x;\nloop invariant i < x;\nloop invariant j == 2*i;\nloop invariant i >= 0;\nloop invariant j <= 2*x;\nloop invariant i < x;\nloop invariant j == 2*i;\nloop invariant i >= 0;\nloop invariant j <= 2*x;\nloop invariant i < x;\nloop invariant j == 2*i;\nloop invariant i >= 0;\nloop invariant j <= 2*x;\nloop invariant i < x;\nloop invariant j == 2*i;\nloop invariant i >= 0;\nloop invariant j <= 2*x;\nloop invariant i < x;\nloop invariant j == 2*i;\nloop invariant i >= 0;\nloop invariant j <= 2*x;\nloop invariant i < x;\nloop invariant j == 2*i;\nloop invariant i >= 0;\nloop invariant j <= 2*x;\nloop invariant i < x;\nloop invariant j == 2*i;\nloop invariant i >= 0;\nloop invariant j <= 2*x;\nloop invariant i < x;\nloop invariant j == 2*i;\nloop invariant i >= 0;\nloop invariant j <= 2*x;\nloop invariant i < x;\nloop invariant j == 2*i;\nloop invariant i >= 0;\nloop invariant j <= 2*x;\nloop invariant i < x;\nloop invariant j == 2*i;\nloop invariant i >= 0;\nloop invariant j <= 2*x;\nloop invariant i < x;\nloop invariant j == 2*i;\nloop invariant i >= 0;\nloop invariant j <= 2*x;\nloop invariant i < x;\nloop invariant j == 2*i;\nloop invariant i >= 0;\nloop invariant j <= 2*x;\nloop invariant i < x;\nloop invariant j == 2*i;\nloop invariant i >= 0;\nloop invariant j <= 2*x;\nloop invariant i < x;\nloop invariant j == 2*i;\nloop invariant i >= 0;\nloop invariant j <= 2*x;\nloop invariant i < x;\nloop invariant j == 2*i;\nloop invariant i >= 0;\nloop invariant j <= 2*x;\nloop invariant i < x;\nloop invariant j == 2*i;\nloop invariant i >= 0;\nloop invariant j <= 2*x;\nloop invariant i < x;\nloop invariant j == 2*i;\nloop invariant i >= 0;\nloop invariant j <= 2*x;\nloop invariant i < x;\nloop invariant j == 2*i;\nloop invariant i >= 0;\nloop invariant j <= 2*x;\nloop invariant i < x;\nloop invariant j == 2*i;\nloop invariant i >= 0;\nloop invariant j <= 2*x;\nloop invariant i < x;\nloop invariant j == 2*i;\nloop invariant i >= 0;\nloop invariant j <= 2*x;\nloop invariant i < x;\nloop invariant j == 2*i;\nloop invariant i >= 0;\nloop invariant j <= 2*x;\nloop invariant i < x;\nloop invariant j == 2*i;\nloop invariant i >= 0;\nloop invariant j <= 2*x;\nloop invariant i < x;\nloop invariant j == 2*i;\nloop invariant i >= 0;\nloop invariant j <= 2*x;\nloop invariant i < x;\nloop invariant j == 2*i;\nloop invariant i >= 0;\nloop invariant j <= 2*x;\nloop invariant i < x;\nloop invariant j == 2*i;\nloop invariant i >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main()\n{\n  int j=0;\n  int i;\n  int x=100;\n   \n  /*@\nloop invariant i1: 0 <= j <= 2*x;\nloop invariant i2: j == 2*i;\nloop invariant i3: 0 <= i <= x;\nloop invariant i4: i >= 0;\n\nloop invariant i6: j <= 2*x;\nloop invariant i7: j >= 0;\n*/\nfor (i =0; i< x ; i++){\n    j = j + 2;\n  }\n\n  {;\n//@ assert(j == 2*x);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= x;\nloop invariant j >= 0;\nloop invariant j == 2*i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main()\n{\n  int j=0;\n  int i;\n  int x=100;\n   \n  /*@\nloop invariant i1: 0 <= i <= x;\nloop invariant i2: j >= 0;\nloop invariant i3: j == 2*i;\n*/\nfor (i =0; i< x ; i++){\n    j = j + 2;\n  }\n\n  {;\n//@ assert(j == 2*x);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= j <= 2*x;\nloop invariant 0 <= i <= x;\nloop invariant i <= j;\nloop invariant i <= x;\nloop invariant j <= 2*i;\nloop invariant j <= 2*x;\nloop invariant i <= j;\nloop invariant i <= x;\nloop invariant j <= 2*i;\nloop invariant j <= 2*x;\nloop invariant i <= j;\nloop invariant i <= x;\nloop invariant j <= 2*i;\nloop invariant j <= 2*x;\nloop invariant i <= j;\nloop invariant i <= x;\nloop invariant j <= 2*i;\nloop invariant j <= 2*x;\nloop invariant i <= j;\nloop invariant i <= x;\nloop invariant j <= 2*i;\nloop invariant j <= 2*x;\nloop invariant i <= j;\nloop invariant i <= x;\nloop invariant j <= 2*i;\nloop invariant j <= 2*x;\nloop invariant i <= j;\nloop invariant i <= x;\nloop invariant j <= 2*i;\nloop invariant j <= 2*x;\nloop invariant i <= j;\nloop invariant i <= x;\nloop invariant j <= 2*i;\nloop invariant j <= 2*x;\nloop invariant i <= j;\nloop invariant i <= x;\nloop invariant j <= 2*i;\nloop invariant j <= 2*x;\nloop invariant i <= j;\nloop invariant i <= x;\nloop invariant j <= 2*i;\nloop invariant j <= 2*x;\nloop invariant i <= j;\nloop invariant i <= x;\nloop invariant j <= 2*i;\nloop invariant j <= 2*x;\nloop invariant i <= j;\nloop invariant i <= x;\nloop invariant j <= 2*i;\nloop invariant j <= 2*x;\nloop invariant i <= j;\nloop invariant i <= x;\nloop invariant j <= 2*i;\nloop invariant j <= 2*x;\nloop invariant i <= j;\nloop invariant i <= x;\nloop invariant j <= 2*i;\nloop invariant j <= 2*x;\nloop invariant i <= j;\nloop invariant i <= x;\nloop invariant j <= 2*i;\nloop invariant j <= 2*x;\nloop invariant i <= j;\nloop invariant i <= x;\nloop invariant j <= 2*i;\nloop invariant j <= 2*x;\nloop invariant i <= j;\nloop invariant i <= x;\nloop invariant j <= 2*i;\nloop invariant j <= 2*x;\nloop invariant i <= j;\nloop invariant i <= x;\nloop invariant j <= 2*i;\nloop invariant j <= 2*x;\nloop invariant i <= j;\nloop invariant i <= x;\nloop invariant j <= 2*i;\nloop invariant j <= 2*x;\nloop invariant i <= j;\nloop invariant i <= x;\nloop invariant j <= 2*i;\nloop invariant j <= 2*x;\nloop invariant i <= j;\nloop invariant i <= x;\nloop invariant j <= 2*i;\nloop invariant j <= 2*x;\nloop invariant i <= j;\nloop invariant i <= x;\nloop invariant j <= 2*i;\nloop invariant j <= 2*x;\nloop invariant i <= j;\nloop invariant i <= x;\nloop invariant j <= 2*i;\nloop invariant j <= 2*x;\nloop invariant i <= j;\nloop invariant i <= x;\nloop invariant j <= 2*i;\nloop invariant j <= 2*x;\nloop invariant i <= j;\nloop invariant i <= x;\nloop invariant j <= 2*i;\nloop invariant j <= 2*x;\nloop invariant i <= j;\nloop invariant i <= x;\nloop invariant j <= 2*i;\nloop invariant j <= 2*x;\nloop invariant i <= j;\nloop invariant i <= x;\nloop invariant j <= 2*i;\nloop invariant j <= 2*x;\nloop invariant i <= j;\nloop invariant i <= x;\nloop invariant j <= 2*i;\nloop invariant j <= 2*x;\nloop invariant i <= j;\nloop invariant i <= x;\nloop invariant j <= 2*i;\nloop invariant j <= 2*x;\nloop invariant i <= j;\nloop invariant i <= x;\nloop invariant j <= 2*i;\nloop invariant j <= 2*x;\nloop invariant i <= j;\nloop invariant i <= x;\nloop invariant j <= 2*i;\nloop invariant j <= 2*x;\nloop invariant i <= j;\nloop invariant i <= x;\nloop invariant j <= 2*i;\nloop invariant j <= 2*x;\nloop invariant i <= j;\nloop invariant i <= x;\nloop invariant j <= 2*i;\nloop invariant j <= 2*x;\nloop invariant i <= j;\nloop invariant i <= x;\nloop invariant j <= 2*i;\nloop invariant j <= 2*x;\nloop invariant i <= j;\nloop invariant i <= x;\nloop invariant j <= 2*i;\nloop invariant j <= 2*x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main()\n{\n  int j=0;\n  int i;\n  int x=100;\n   \n  /*@\nloop invariant i1: 0 <= j <= 2*x;\nloop invariant i2: 0 <= i <= x;\nloop invariant i3: i <= j;\nloop invariant i4: i <= x;\nloop invariant i5: j <= 2*i;\nloop invariant i6: j <= 2*x;\n*/\nfor (i =0; i< x ; i++){\n    j = j + 2;\n  }\n\n  {;\n//@ assert(j == 2*x);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i + 1 <= x;\nloop invariant j = 2 * x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main()\n{\n  int j=0;\n  int i;\n  int x=100;\n   \n  /*@\nloop invariant i1: i <= x;\nloop invariant i2: i >= 0;\n\n\n*/\nfor (i =0; i< x ; i++){\n    j = j + 2;\n  }\n\n  {;\n//@ assert(j == 2*x);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= j <= 2 * x;\nloop invariant j >= 2 * i;\nloop invariant j <= 2 * (x - 1);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main()\n{\n  int j=0;\n  int i;\n  int x=100;\n   \n  /*@\n\nloop invariant i2: j >= 2 * i;\n\n*/\nfor (i =0; i< x ; i++){\n    j = j + 2;\n  }\n\n  {;\n//@ assert(j == 2*x);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= x;\nloop invariant 0 <= j <= 2*x;\nloop invariant i == j / 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main()\n{\n  int j=0;\n  int i;\n  int x=100;\n   \n  /*@\nloop invariant i1: 0 <= i <= x;\n\n\n*/\nfor (i =0; i< x ; i++){\n    j = j + 2;\n  }\n\n  {;\n//@ assert(j == 2*x);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= j <= 2*i;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant j <= 2*x;\nloop invariant j == 2*i ==> i < x;\nloop invariant i == x ==> j == 2*x;\nloop invariant j == 2*x ==> i == x;\nloop invariant j == 2*i ==> i < x ==> i >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main()\n{\n  int j=0;\n  int i;\n  int x=100;\n   \n  /*@\nloop invariant i1: 0 <= j <= 2*i;\nloop invariant i2: i <= x;\nloop invariant i3: i >= 0;\nloop invariant i4: j >= 0;\nloop invariant i5: j <= 2*x;\n\n\nloop invariant i8: j == 2*x ==> i == x;\nloop invariant i9: j == 2*i ==> i < x ==> i >= 0;\n*/\nfor (i =0; i< x ; i++){\n    j = j + 2;\n  }\n\n  {;\n//@ assert(j == 2*x);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant x = 100 - i;\nloop invariant 0 <= i <= x;\nloop invariant 0 <= j <= 2 * (x - i);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main()\n{\n  int j=0;\n  int i;\n  int x=100;\n   \n  /*@\n\nloop invariant i2: 0 <= i <= x;\n\n*/\nfor (i =0; i< x ; i++){\n    j = j + 2;\n  }\n\n  {;\n//@ assert(j == 2*x);\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 29: Assignment operators not allowed in annotations.",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main()\n{\n  int j=0;\n  int i;\n  int x=100;\n   \n  /*@\nloop invariant i1: 0 <= j <= 2*x;\nloop invariant i2: i >= 0;\nloop invariant i3: i <= x;\nloop invariant i4: j == 2*i;\nloop invariant i5: i <= j/2;\nloop invariant i6: 0 <= i <= x;\nloop invariant i7: j <= 2*x;\nloop invariant i8: j >= 0;\nloop invariant i9: i == x;\nloop invariant i10: j == 2*x;\nloop invariant i11: j == 2*x ==> x >= 0;\nloop invariant i12: j == 2*x ==> i == x;\nloop invariant i13: j == i * 2;\nloop invariant i14: j < 2 * x ==> j == 2 * i;\nloop invariant i15: j >= 2 * x ==> j == 2 * x;\nloop invariant i16: j = 2 * i;\nloop invariant i17: 0 <= j <= 2 * x;\nloop invariant i18: j == 2 * i;\nloop invariant i19: i < x;\nloop invariant i20: i <= j;\nloop invariant i21: j <= 2*i;\nloop invariant i22: i + 1 <= x;\nloop invariant i23: j = 2 * x;\nloop invariant i24: j >= 2 * i;\nloop invariant i25: j <= 2 * (x - 1);\nloop invariant i26: i == j / 2;\nloop invariant i27: 0 <= j <= 2*i;\nloop invariant i28: j == 2*i ==> i < x;\nloop invariant i29: i == x ==> j == 2*x;\nloop invariant i30: j == 2*i ==> i < x ==> i >= 0;\nloop invariant i31: x = 100 - i;\nloop invariant i32: 0 <= j <= 2 * (x - i);\n*/\nfor (i =0; i< x ; i++){\n    j = j + 2;\n  }\n\n  {;\n//@ assert(j == 2*x);\n}\n\n}",
        "combined_annotation_num_solver_calls": 10,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main()\n{\n  int j=0;\n  int i;\n  int x=100;\n   \n  /*@\nloop invariant i1: 0 <= j <= 2*x;\nloop invariant i2: i >= 0;\nloop invariant i3: i <= x;\nloop invariant i4: j == 2*i;\nloop invariant i5: i <= j/2;\nloop invariant i6: 0 <= i <= x;\nloop invariant i7: j <= 2*x;\nloop invariant i8: j >= 0;\n\n\nloop invariant i11: j == 2*x ==> x >= 0;\nloop invariant i12: j == 2*x ==> i == x;\nloop invariant i13: j == i * 2;\nloop invariant i14: j < 2 * x ==> j == 2 * i;\nloop invariant i15: j >= 2 * x ==> j == 2 * x;\n\nloop invariant i17: 0 <= j <= 2 * x;\nloop invariant i18: j == 2 * i;\n\nloop invariant i20: i <= j;\nloop invariant i21: j <= 2*i;\n\n\nloop invariant i24: j >= 2 * i;\n\nloop invariant i26: i == j / 2;\nloop invariant i27: 0 <= j <= 2*i;\n\nloop invariant i29: i == x ==> j == 2*x;\nloop invariant i30: j == 2*i ==> i < x ==> i >= 0;\n\n\n*/\nfor (i =0; i< x ; i++){\n    j = j + 2;\n  }\n\n  {;\n//@ assert(j == 2*x);\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/11.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/split.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/02.c"
        ],
        "skipped": [],
        "total": 107,
        "success_count": 92,
        "failure_count": 15,
        "success_rate": 0.8598130841121495
    }
}