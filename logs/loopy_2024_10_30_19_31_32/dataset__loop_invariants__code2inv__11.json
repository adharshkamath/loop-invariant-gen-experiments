{
    "logs": {
        "file": "../dataset/loop_invariants/code2inv/11.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  assume((x >= 0));\n  assume((x <= 10));\n  assume((y <= 10));\n  assume((y >= 0));\n  \n  while (unknown()) {\n    {\n    (x  = (x + 10));\n    (y  = (y + 10));\n    }\n\n  }\n  \nif ( (x == 20) )\n{;\n//@ assert( (y != 0) );\n}\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= x <= 20;\nloop invariant 0 <= y <= 20;\nloop invariant (x == 20) ==> (y != 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 20;\nloop invariant 0 <= y <= 20;\nloop invariant x - y == 10 * unknown() - 10;\nloop invariant (unknown() ==> (x >= 10));\nloop invariant (unknown() ==> (y >= 10));\nloop invariant (unknown() ==> (x >= y));\nloop invariant (unknown() ==> (x == 20 ==> y != 0));\n*/\n```",
            "```\n/*@\nloop invariant x >= 0 && x <= 30 && y >= 0 && y <= 30 && z1 == 0 && z2 == 0 && z3 == 0;\nloop invariant x % 10 == 0 && y % 10 == 0;\n*/\n```",
            "```\n/*@\nloop invariant x >= 10 && x <= 30 && y >= 10 && y <= 30 && z1 >= 0 && z1 <= 10 && z2 >= 0 && z2 <= 10 && z3 >= 0 && z3 <= 10;\nloop invariant (z1 + z2 + z3 >= 0) ==> (x == (z1 + z2 + z3));\nloop invariant (z1 + z2 + z3 >= 0) ==> (y == (z1 + z2 + z3));\nloop invariant (z1 + z2 + z3 < 0) ==> (x == 0);\nloop invariant (z1 + z2 + z3 < 0) ==> (y == 0);\nloop invariant (x == 0) ==> (y == 0);\nloop invariant (x == 0) ==> (z1 == 0 && z2 == 0 && z3 == 0);\nloop invariant (y == 0) ==> (z1 == 0 && z2 == 0 && z3 == 0);\nloop invariant (x >= 10) ==> (y >= 10);\nloop invariant (x >= 10) ==> (z1 >= 10 && z2 >= 10 && z3 >= 10);\nloop invariant (y >= 10) ==> (z1 >= 10 && z2 >= 10 && z3 >= 10);\nloop invariant (x <= 20) ==> (y <= 20);\nloop invariant (x <= 20) ==> (z1 <= 20 && z2 <= 20 && z3 <= 20);\nloop invariant (y <= 20) ==> (z1 <= 20 && z2 <= 20 && z3 <= 20);\nloop invariant (x <= 30) ==> (y <= 30);\nloop invariant (x <= 30) ==> (z1 <= 30 && z2 <= 30 && z3 <= 30);\nloop invariant (y <= 30) ==> (z1 <= 30 && z2 <= 30 && z3 <= 30);\nloop invariant (x == 20) ==> (y == 20);\nloop invariant (x == 20) ==> (z1 == 20 && z2 == 20 && z3 == 20);\nloop invariant (y == 20) ==> (z1 == 20 && z2 == 20 && z3 == 20);\nloop invariant (x == 0) ==> (z1 == 0 && z2 == 0 && z3 == 0);\nloop invariant (y == 0) ==> (z1 == 0 && z2 == 0 && z3 == 0);\nloop invariant (z1 + z2 + z3 >= 0) ==> (x == (z1 + z2 + z3));\nloop invariant (z1 + z2 + z3 >= 0) ==> (y == (z1 + z2 + z3));\nloop invariant (z1 + z2 + z3 < 0) ==> (x == 0);\nloop invariant (z1 + z2 + z3 < 0) ==> (y == 0);\nloop invariant (x == 0) ==> (y == 0);\nloop invariant (x == 0) ==> (z1 == 0 && z2 == 0 && z3 == 0);\nloop invariant (y == 0) ==> (z1 == 0 && z2 == 0 && z3 == 0);\nloop invariant (x >= 10) ==> (y >= 10);\nloop invariant (x >= 10) ==> (z1 >= 10 && z2 >= 10 && z3 >= 10);\nloop invariant (y >= 10) ==> (z1 >= 10 && z2 >= 10 && z3 >= 10);\nloop invariant (x <= 20) ==> (y <= 20);\nloop invariant (x <= 20) ==> (z1 <= 20 && z2 <= 20 && z3 <= 20);\nloop invariant (y <= 20) ==> (z1 <= 20 && z2 <= 20 && z3 <= 20);\nloop invariant (x <= 30) ==> (y <= 30);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 20;\nloop invariant 0 <= y <= 20;\nloop invariant x >= y;\nloop invariant x <= 20;\nloop invariant y <= 20;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 10;\nloop invariant 0 <= y <= 10;\nloop invariant x <= y + 10;\nloop invariant x >= y;\nloop invariant x <= 20;\nloop invariant y >= x - 10;\nloop invariant x == 20 ==> y != 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 20;\nloop invariant 0 <= y <= 20;\nloop invariant x <= y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 20;\nloop invariant 0 <= y <= 20;\nloop invariant 0 <= x + y <= 40;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20 + 20;\nloop invariant x <= 20;\nloop invariant y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20 + 20;\nloop invariant x <= 20;\nloop invariant y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20 + 20;\nloop invariant x <= 20;\nloop invariant y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20 + 20;\nloop invariant x <= 20;\nloop invariant y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20 + 20;\nloop invariant x <= 20;\nloop invariant y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20 + 20;\nloop invariant x <= 20;\nloop invariant y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20 + 20;\nloop invariant x <= 20;\nloop invariant y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20 + 20;\nloop invariant x <= 20;\nloop invariant y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20 + 20;\nloop invariant x <= 20;\nloop invariant y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20 + 20;\nloop invariant x <= 20;\nloop invariant y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20 + 20;\nloop invariant x <= 20;\nloop invariant y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20 + 20;\nloop invariant x <= 20;\nloop invariant y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20 + 20;\nloop invariant x <= 20;\nloop invariant y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20 + 20;\nloop invariant x <= 20;\nloop invariant y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20 + 20;\nloop invariant x <= 20;\nloop invariant y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20 + 20;\nloop invariant x <= 20;\nloop invariant y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20 + 20;\nloop invariant x <= 20;\nloop invariant y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20 + 20;\nloop invariant x <= 20;\nloop invariant y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20 + 20;\nloop invariant x <= 20;\nloop invariant y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20 + 20;\nloop invariant x <= 20;\nloop invariant y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20 + 20;\nloop invariant x <= 20;\nloop invariant y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20 + 20;\nloop invariant x <= 20;\nloop invariant y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20 + 20;\nloop invariant x <= 20;\nloop invariant y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20 + 20;\nloop invariant x <= 20;\nloop invariant y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20 + 20;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= 20;\nloop invariant 0 <= y <= 20;\nloop invariant x == y  ==>  (y != 0);\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= 20;\nloop invariant 1 <= y <= 20;\nloop invariant x == 20 ==> y != 0;\nloop invariant y == 0 ==> x != 20;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 20;\nloop invariant 0 <= y <= 20;\nloop invariant (x == (y + 10));\nloop invariant (x >= 0);\nloop invariant (y >= 0);\nloop invariant (x <= 20);\nloop invariant (y <= 20);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 20;\nloop invariant 0 <= y <= 20;\nloop invariant (x >= 0);\nloop invariant (x <= 10);\nloop invariant (y >= 0);\nloop invariant (y <= 10);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 20;\nloop invariant 0 <= y <= 20;\nloop invariant x >= y;\nloop invariant x >= ((x - 1) * 10);\nloop invariant y >= ((y - 1) * 10);\nloop invariant x == ((x - 1) * 10 + 10);\nloop invariant y == ((y - 1) * 10 + 10);\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= 20;\nloop invariant 0 <= y <= 20;\nloop invariant x == (10 * (i + 1)) ==> y == (10 * (i + 1));\nloop invariant x == (10 * (i + 1)) ==> y == (10 * (i + 1));\nloop invariant x >= y;\nloop invariant x == 20 ==> y == 10;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 20;\nloop invariant 0 <= y <= 20;\nloop invariant (x == 20) ==> (y != 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  assume((x >= 0));\n  assume((x <= 10));\n  assume((y <= 10));\n  assume((y >= 0));\n  \n  /*@\n\n\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 10));\n    (y  = (y + 10));\n    }\n\n  }\n  \nif ( (x == 20) )\n{;\n//@ assert( (y != 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 20;\nloop invariant 0 <= y <= 20;\nloop invariant x - y == 10 * unknown() - 10;\nloop invariant (unknown() ==> (x >= 10));\nloop invariant (unknown() ==> (y >= 10));\nloop invariant (unknown() ==> (x >= y));\nloop invariant (unknown() ==> (x == 20 ==> y != 0));\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  assume((x >= 0));\n  assume((x <= 10));\n  assume((y <= 10));\n  assume((y >= 0));\n  \n  /*@\n\n\n\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 10));\n    (y  = (y + 10));\n    }\n\n  }\n  \nif ( (x == 20) )\n{;\n//@ assert( (y != 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant x >= 0 && x <= 30 && y >= 0 && y <= 30 && z1 == 0 && z2 == 0 && z3 == 0;\nloop invariant x % 10 == 0 && y % 10 == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  assume((x >= 0));\n  assume((x <= 10));\n  assume((y <= 10));\n  assume((y >= 0));\n  \n  /*@\n\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 10));\n    (y  = (y + 10));\n    }\n\n  }\n  \nif ( (x == 20) )\n{;\n//@ assert( (y != 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant x >= 10 && x <= 30 && y >= 10 && y <= 30 && z1 >= 0 && z1 <= 10 && z2 >= 0 && z2 <= 10 && z3 >= 0 && z3 <= 10;\nloop invariant (z1 + z2 + z3 >= 0) ==> (x == (z1 + z2 + z3));\nloop invariant (z1 + z2 + z3 >= 0) ==> (y == (z1 + z2 + z3));\nloop invariant (z1 + z2 + z3 < 0) ==> (x == 0);\nloop invariant (z1 + z2 + z3 < 0) ==> (y == 0);\nloop invariant (x == 0) ==> (y == 0);\nloop invariant (x == 0) ==> (z1 == 0 && z2 == 0 && z3 == 0);\nloop invariant (y == 0) ==> (z1 == 0 && z2 == 0 && z3 == 0);\nloop invariant (x >= 10) ==> (y >= 10);\nloop invariant (x >= 10) ==> (z1 >= 10 && z2 >= 10 && z3 >= 10);\nloop invariant (y >= 10) ==> (z1 >= 10 && z2 >= 10 && z3 >= 10);\nloop invariant (x <= 20) ==> (y <= 20);\nloop invariant (x <= 20) ==> (z1 <= 20 && z2 <= 20 && z3 <= 20);\nloop invariant (y <= 20) ==> (z1 <= 20 && z2 <= 20 && z3 <= 20);\nloop invariant (x <= 30) ==> (y <= 30);\nloop invariant (x <= 30) ==> (z1 <= 30 && z2 <= 30 && z3 <= 30);\nloop invariant (y <= 30) ==> (z1 <= 30 && z2 <= 30 && z3 <= 30);\nloop invariant (x == 20) ==> (y == 20);\nloop invariant (x == 20) ==> (z1 == 20 && z2 == 20 && z3 == 20);\nloop invariant (y == 20) ==> (z1 == 20 && z2 == 20 && z3 == 20);\nloop invariant (x == 0) ==> (z1 == 0 && z2 == 0 && z3 == 0);\nloop invariant (y == 0) ==> (z1 == 0 && z2 == 0 && z3 == 0);\nloop invariant (z1 + z2 + z3 >= 0) ==> (x == (z1 + z2 + z3));\nloop invariant (z1 + z2 + z3 >= 0) ==> (y == (z1 + z2 + z3));\nloop invariant (z1 + z2 + z3 < 0) ==> (x == 0);\nloop invariant (z1 + z2 + z3 < 0) ==> (y == 0);\nloop invariant (x == 0) ==> (y == 0);\nloop invariant (x == 0) ==> (z1 == 0 && z2 == 0 && z3 == 0);\nloop invariant (y == 0) ==> (z1 == 0 && z2 == 0 && z3 == 0);\nloop invariant (x >= 10) ==> (y >= 10);\nloop invariant (x >= 10) ==> (z1 >= 10 && z2 >= 10 && z3 >= 10);\nloop invariant (y >= 10) ==> (z1 >= 10 && z2 >= 10 && z3 >= 10);\nloop invariant (x <= 20) ==> (y <= 20);\nloop invariant (x <= 20) ==> (z1 <= 20 && z2 <= 20 && z3 <= 20);\nloop invariant (y <= 20) ==> (z1 <= 20 && z2 <= 20 && z3 <= 20);\nloop invariant (x <= 30) ==> (y <= 30);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  assume((x >= 0));\n  assume((x <= 10));\n  assume((y <= 10));\n  assume((y >= 0));\n  \n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 10));\n    (y  = (y + 10));\n    }\n\n  }\n  \nif ( (x == 20) )\n{;\n//@ assert( (y != 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 20;\nloop invariant 0 <= y <= 20;\nloop invariant x >= y;\nloop invariant x <= 20;\nloop invariant y <= 20;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  assume((x >= 0));\n  assume((x <= 10));\n  assume((y <= 10));\n  assume((y >= 0));\n  \n  /*@\n\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 10));\n    (y  = (y + 10));\n    }\n\n  }\n  \nif ( (x == 20) )\n{;\n//@ assert( (y != 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 10;\nloop invariant 0 <= y <= 10;\nloop invariant x <= y + 10;\nloop invariant x >= y;\nloop invariant x <= 20;\nloop invariant y >= x - 10;\nloop invariant x == 20 ==> y != 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  assume((x >= 0));\n  assume((x <= 10));\n  assume((y <= 10));\n  assume((y >= 0));\n  \n  /*@\n\n\nloop invariant i3: x <= y + 10;\n\n\nloop invariant i6: y >= x - 10;\nloop invariant i7: x == 20 ==> y != 0;\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 10));\n    (y  = (y + 10));\n    }\n\n  }\n  \nif ( (x == 20) )\n{;\n//@ assert( (y != 0) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 20;\nloop invariant 0 <= y <= 20;\nloop invariant x <= y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  assume((x >= 0));\n  assume((x <= 10));\n  assume((y <= 10));\n  assume((y >= 0));\n  \n  /*@\n\n\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 10));\n    (y  = (y + 10));\n    }\n\n  }\n  \nif ( (x == 20) )\n{;\n//@ assert( (y != 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 20;\nloop invariant 0 <= y <= 20;\nloop invariant 0 <= x + y <= 40;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20 + 20;\nloop invariant x <= 20;\nloop invariant y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20 + 20;\nloop invariant x <= 20;\nloop invariant y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20 + 20;\nloop invariant x <= 20;\nloop invariant y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20 + 20;\nloop invariant x <= 20;\nloop invariant y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20 + 20;\nloop invariant x <= 20;\nloop invariant y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20 + 20;\nloop invariant x <= 20;\nloop invariant y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20 + 20;\nloop invariant x <= 20;\nloop invariant y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20 + 20;\nloop invariant x <= 20;\nloop invariant y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20 + 20;\nloop invariant x <= 20;\nloop invariant y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20 + 20;\nloop invariant x <= 20;\nloop invariant y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20 + 20;\nloop invariant x <= 20;\nloop invariant y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20 + 20;\nloop invariant x <= 20;\nloop invariant y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20 + 20;\nloop invariant x <= 20;\nloop invariant y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20 + 20;\nloop invariant x <= 20;\nloop invariant y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20 + 20;\nloop invariant x <= 20;\nloop invariant y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20 + 20;\nloop invariant x <= 20;\nloop invariant y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20 + 20;\nloop invariant x <= 20;\nloop invariant y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20 + 20;\nloop invariant x <= 20;\nloop invariant y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20 + 20;\nloop invariant x <= 20;\nloop invariant y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20 + 20;\nloop invariant x <= 20;\nloop invariant y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20 + 20;\nloop invariant x <= 20;\nloop invariant y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20 + 20;\nloop invariant x <= 20;\nloop invariant y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20 + 20;\nloop invariant x <= 20;\nloop invariant y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20 + 20;\nloop invariant x <= 20;\nloop invariant y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20 + 20;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  assume((x >= 0));\n  assume((x <= 10));\n  assume((y <= 10));\n  assume((y >= 0));\n  \n  /*@\n\n\n\nloop invariant i4: x + y >= 0;\n\n\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 10));\n    (y  = (y + 10));\n    }\n\n  }\n  \nif ( (x == 20) )\n{;\n//@ assert( (y != 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= 20;\nloop invariant 0 <= y <= 20;\nloop invariant x == y  ==>  (y != 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  assume((x >= 0));\n  assume((x <= 10));\n  assume((y <= 10));\n  assume((y >= 0));\n  \n  /*@\n\n\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 10));\n    (y  = (y + 10));\n    }\n\n  }\n  \nif ( (x == 20) )\n{;\n//@ assert( (y != 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= 20;\nloop invariant 1 <= y <= 20;\nloop invariant x == 20 ==> y != 0;\nloop invariant y == 0 ==> x != 20;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  assume((x >= 0));\n  assume((x <= 10));\n  assume((y <= 10));\n  assume((y >= 0));\n  \n  /*@\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 10));\n    (y  = (y + 10));\n    }\n\n  }\n  \nif ( (x == 20) )\n{;\n//@ assert( (y != 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 20;\nloop invariant 0 <= y <= 20;\nloop invariant (x == (y + 10));\nloop invariant (x >= 0);\nloop invariant (y >= 0);\nloop invariant (x <= 20);\nloop invariant (y <= 20);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  assume((x >= 0));\n  assume((x <= 10));\n  assume((y <= 10));\n  assume((y >= 0));\n  \n  /*@\n\n\n\nloop invariant i4: (x >= 0);\nloop invariant i5: (y >= 0);\n\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 10));\n    (y  = (y + 10));\n    }\n\n  }\n  \nif ( (x == 20) )\n{;\n//@ assert( (y != 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 20;\nloop invariant 0 <= y <= 20;\nloop invariant (x >= 0);\nloop invariant (x <= 10);\nloop invariant (y >= 0);\nloop invariant (y <= 10);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  assume((x >= 0));\n  assume((x <= 10));\n  assume((y <= 10));\n  assume((y >= 0));\n  \n  /*@\n\n\nloop invariant i3: (x >= 0);\n\nloop invariant i5: (y >= 0);\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 10));\n    (y  = (y + 10));\n    }\n\n  }\n  \nif ( (x == 20) )\n{;\n//@ assert( (y != 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  assume((x >= 0));\n  assume((x <= 10));\n  assume((y <= 10));\n  assume((y >= 0));\n  \n  /*@\n\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 10));\n    (y  = (y + 10));\n    }\n\n  }\n  \nif ( (x == 20) )\n{;\n//@ assert( (y != 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 20;\nloop invariant 0 <= y <= 20;\nloop invariant x >= y;\nloop invariant x >= ((x - 1) * 10);\nloop invariant y >= ((y - 1) * 10);\nloop invariant x == ((x - 1) * 10 + 10);\nloop invariant y == ((y - 1) * 10 + 10);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  assume((x >= 0));\n  assume((x <= 10));\n  assume((y <= 10));\n  assume((y >= 0));\n  \n  /*@\n\n\n\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 10));\n    (y  = (y + 10));\n    }\n\n  }\n  \nif ( (x == 20) )\n{;\n//@ assert( (y != 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= 20;\nloop invariant 0 <= y <= 20;\nloop invariant x == (10 * (i + 1)) ==> y == (10 * (i + 1));\nloop invariant x == (10 * (i + 1)) ==> y == (10 * (i + 1));\nloop invariant x >= y;\nloop invariant x == 20 ==> y == 10;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  assume((x >= 0));\n  assume((x <= 10));\n  assume((y <= 10));\n  assume((y >= 0));\n  \n  /*@\n\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 10));\n    (y  = (y + 10));\n    }\n\n  }\n  \nif ( (x == 20) )\n{;\n//@ assert( (y != 0) );\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 26: unexpected token ')'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  assume((x >= 0));\n  assume((x <= 10));\n  assume((y <= 10));\n  assume((y >= 0));\n  \n  /*@\nloop invariant i1: 0 <= x <= 20;\nloop invariant i2: 0 <= y <= 20;\nloop invariant i3: (x == 20) ==> (y != 0);\nloop invariant i4: x - y == 10 * unknown() - 10;\nloop invariant i5: (unknown() ==> (x >= 10));\nloop invariant i6: (unknown() ==> (y >= 10));\nloop invariant i7: (unknown() ==> (x >= y));\nloop invariant i8: (unknown() ==> (x == 20 ==> y != 0));\nloop invariant i9: x >= 0 && x <= 30 && y >= 0 && y <= 30 && z1 == 0 && z2 == 0 && z3 == 0;\nloop invariant i10: x % 10 == 0 && y % 10 == 0;\nloop invariant i11: x >= 10 && x <= 30 && y >= 10 && y <= 30 && z1 >= 0 && z1 <= 10 && z2 >= 0 && z2 <= 10 && z3 >= 0 && z3 <= 10;\nloop invariant i12: (z1 + z2 + z3 >= 0) ==> (x == (z1 + z2 + z3));\nloop invariant i13: (z1 + z2 + z3 >= 0) ==> (y == (z1 + z2 + z3));\nloop invariant i14: (z1 + z2 + z3 < 0) ==> (x == 0);\nloop invariant i15: (z1 + z2 + z3 < 0) ==> (y == 0);\nloop invariant i16: (x == 0) ==> (y == 0);\nloop invariant i17: (x == 0) ==> (z1 == 0 && z2 == 0 && z3 == 0);\nloop invariant i18: (y == 0) ==> (z1 == 0 && z2 == 0 && z3 == 0);\nloop invariant i19: (x >= 10) ==> (y >= 10);\nloop invariant i20: (x >= 10) ==> (z1 >= 10 && z2 >= 10 && z3 >= 10);\nloop invariant i21: (y >= 10) ==> (z1 >= 10 && z2 >= 10 && z3 >= 10);\nloop invariant i22: (x <= 20) ==> (y <= 20);\nloop invariant i23: (x <= 20) ==> (z1 <= 20 && z2 <= 20 && z3 <= 20);\nloop invariant i24: (y <= 20) ==> (z1 <= 20 && z2 <= 20 && z3 <= 20);\nloop invariant i25: (x <= 30) ==> (y <= 30);\nloop invariant i26: (x <= 30) ==> (z1 <= 30 && z2 <= 30 && z3 <= 30);\nloop invariant i27: (y <= 30) ==> (z1 <= 30 && z2 <= 30 && z3 <= 30);\nloop invariant i28: (x == 20) ==> (y == 20);\nloop invariant i29: (x == 20) ==> (z1 == 20 && z2 == 20 && z3 == 20);\nloop invariant i30: (y == 20) ==> (z1 == 20 && z2 == 20 && z3 == 20);\nloop invariant i31: x >= y;\nloop invariant i32: x <= 20;\nloop invariant i33: y <= 20;\nloop invariant i34: 0 <= x <= 10;\nloop invariant i35: 0 <= y <= 10;\nloop invariant i36: x <= y + 10;\nloop invariant i37: y >= x - 10;\nloop invariant i38: x == 20 ==> y != 0;\nloop invariant i39: x <= y;\nloop invariant i40: 0 <= x + y <= 40;\nloop invariant i41: x + y >= 0;\nloop invariant i42: x + y <= 20 + 20;\nloop invariant i43: 1 <= x <= 20;\nloop invariant i44: x == y  ==>  (y != 0);\nloop invariant i45: 1 <= y <= 20;\nloop invariant i46: y == 0 ==> x != 20;\nloop invariant i47: (x == (y + 10));\nloop invariant i48: (x >= 0);\nloop invariant i49: (y >= 0);\nloop invariant i50: (x <= 20);\nloop invariant i51: (y <= 20);\nloop invariant i52: (x <= 10);\nloop invariant i53: (y <= 10);\nloop invariant i54: 0 <= y <= 100000;\nloop invariant i55: x >= (1 + (y - 1) * y / 2);\nloop invariant i56: x >= ((x - 1) * 10);\nloop invariant i57: y >= ((y - 1) * 10);\nloop invariant i58: x == ((x - 1) * 10 + 10);\nloop invariant i59: y == ((y - 1) * 10 + 10);\nloop invariant i60: x == (10 * (i + 1)) ==> y == (10 * (i + 1));\nloop invariant i61: x == 20 ==> y == 10;\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 10));\n    (y  = (y + 10));\n    }\n\n  }\n  \nif ( (x == 20) )\n{;\n//@ assert( (y != 0) );\n}\n\n}",
        "combined_annotation_num_solver_calls": 17,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  assume((x >= 0));\n  assume((x <= 10));\n  assume((y <= 10));\n  assume((y >= 0));\n  \n  /*@\n\n\nloop invariant i3: (x == 20) ==> (y != 0);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i36: x <= y + 10;\nloop invariant i37: y >= x - 10;\nloop invariant i38: x == 20 ==> y != 0;\n\n\nloop invariant i41: x + y >= 0;\n\n\n\n\nloop invariant i46: y == 0 ==> x != 20;\n\nloop invariant i48: (x >= 0);\nloop invariant i49: (y >= 0);\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 10));\n    (y  = (y + 10));\n    }\n\n  }\n  \nif ( (x == 20) )\n{;\n//@ assert( (y != 0) );\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/11.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/15.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/16.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/18.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/20.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/23.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/30.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/37.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/38.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/43.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/46.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/popl.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/07.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/39.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/gulv_simp.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/substring1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/xy10.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/const_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/multivar_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/phases_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/simple_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/simple_safe2.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/simple_safe3.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/simple_safe4.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/underapprox_safe2.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/underapprox_unsafe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/barbr.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/barbrprime.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/bk-nat.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/bkley.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/efm.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/ex1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/lifnat.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/lifnatprime.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/lifo.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/seesaw.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/substring1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/swim.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/swim1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/ken-imp.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/rajamani_1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/simple.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/simple_if.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/up-nested.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/svcomp/count_up_down_true.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/svcomp/for_infinite_loop_1_true.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/svcomp/for_infinite_loop_2_true.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/svcomp/sum03_true.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/svcomp/sum04_true.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/svcomp/terminator_02_true.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/svcomp/trex03_true.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/svcomp/while_infinite_loop_1_true.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/svcomp/while_infinite_loop_2_true.c",
            "../dataset/loop_invariants/code2inv/1.c",
            "../dataset/loop_invariants/code2inv/10.c",
            "../dataset/loop_invariants/code2inv/100.c",
            "../dataset/loop_invariants/code2inv/103.c",
            "../dataset/loop_invariants/code2inv/107.c",
            "../dataset/loop_invariants/code2inv/108.c",
            "../dataset/loop_invariants/code2inv/11.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/split.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/13.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/14.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/19.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/32.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/39.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/41.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/44.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/cav.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/05.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/19.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/37.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/gulv.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/pldi082_unbounded.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/svcomp/sum01_true.c",
            "../dataset/loop_invariants/code2inv/102.c",
            "../dataset/loop_invariants/code2inv/109.c"
        ],
        "skipped": [],
        "total": 191,
        "success_count": 158,
        "failure_count": 33,
        "success_rate": 0.8272251308900523
    }
}