{
    "logs": {
        "file": "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/diamond_1-1.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  while (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
        "success": false,
        "annotation_blocks": [
            "```\n/*@\nloop invariant y % 2 == y % 2;\nloop invariant x % 2 == x % 2;\nloop invariant x % 2 == (y % 2 ==> x % 2) ==> x % 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant x % 2 == y % 2;\n*/\n```",
            "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant i3;\nloop invariant i4;\nloop invariant i5;\nloop invariant i6;\nloop invariant i7;\nloop invariant i8;\nloop invariant i9;\nloop invariant i10;\nloop invariant i11;\nloop invariant i12;\nloop invariant i13;\nloop invariant i14;\nloop invariant i15;\nloop invariant i16;\nloop invariant i17;\nloop invariant i18;\nloop invariant i19;\nloop invariant i20;\nloop invariant i21;\nloop invariant i22;\nloop invariant i23;\nloop invariant i24;\nloop invariant i25;\nloop invariant i26;\nloop invariant i27;\nloop invariant i28;\nloop invariant i29;\nloop invariant i30;\nloop invariant i31;\nloop invariant i32;\nloop invariant i33;\nloop invariant i34;\nloop invariant i35;\nloop invariant i36;\nloop invariant i37;\nloop invariant i38;\nloop invariant i39;\nloop invariant i40;\nloop invariant i41;\nloop invariant i42;\nloop invariant i43;\nloop invariant i44;\nloop invariant i45;\nloop invariant i46;\nloop invariant i47;\nloop invariant i48;\nloop invariant i49;\nloop invariant i50;\nloop invariant i51;\nloop invariant i52;\nloop invariant i53;\nloop invariant i54;\nloop invariant i55;\nloop invariant i56;\nloop invariant i57;\nloop invariant i58;\nloop invariant i59;\nloop invariant i60;\nloop invariant i61;\nloop invariant i62;\nloop invariant i63;\nloop invariant i64;\nloop invariant i65;\nloop invariant i66;\nloop invariant i67;\nloop invariant i68;\nloop invariant i69;\nloop invariant i70;\nloop invariant i71;\nloop invariant i72;\nloop invariant i73;\nloop invariant i74;\nloop invariant i75;\nloop invariant i76;\nloop invariant i77;\nloop invariant i78;\nloop invariant i79;\nloop invariant i80;\nloop invariant i81;\nloop invariant i82;\nloop invariant i83;\nloop invariant i84;\nloop invariant i85;\nloop invariant i86;\nloop invariant i87;\nloop invariant i88;\nloop invariant i89;\nloop invariant i90;\nloop invariant i91;\nloop invariant i92;\nloop invariant i93;\nloop invariant i94;\nloop invariant i95;\nloop invariant i96;\nloop invariant i97;\nloop invariant i98;\nloop invariant i99;\nloop invariant i100;\nloop invariant i101;\nloop invariant i102;\nloop invariant i103;\nloop invariant i104;\nloop invariant i105;\nloop invariant i106;\nloop invariant i107;\nloop invariant i108;\nloop invariant i109;\nloop invariant i110;\nloop invariant i111;\nloop invariant i112;\nloop invariant i113;\nloop invariant i114;\nloop invariant i115;\nloop invariant i116;\nloop invariant i117;\nloop invariant i118;\nloop invariant i119;\nloop invariant i120;\nloop invariant i121;\nloop invariant i122;\nloop invariant i123;\nloop invariant i124;\nloop invariant i125;\nloop invariant i126;\nloop invariant i127;\nloop invariant i128;\nloop invariant i129;\nloop invariant i130;\nloop invariant i131;\nloop invariant i132;\nloop invariant i133;\nloop invariant i134;\nloop invariant i135;\nloop invariant i136;\nloop invariant i137;\nloop invariant i138;\nloop invariant i139;\nloop invariant i140;\nloop invariant i141;\nloop invariant i142;\nloop invariant i143;\nloop invariant i144;\nloop invariant i145;\nloop invariant i146;\nloop invariant i147;\nloop invariant i148;\nloop invariant i149;\nloop invariant i150;\nloop invariant i151;\nloop invariant i152;\nloop invariant i153;\nloop invariant i154;\nloop invariant i155;\nloop invariant i156;\nloop invariant i157;\nloop invariant i158;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant 0 <= y < 100;\nloop invariant (x % 2) == (y % 2) ==> (x % 2) == 0 ==> (x % 2) == 0;\nloop invariant (x % 2) == (y % 2) ==> (x % 2) == 1 ==> (x % 2) == 1;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant x % 2 == 1 ==> x % 2 == 1;\nloop invariant x % 2 == 0 ==> y % 2 == 0;\nloop invariant x % 2 == 1 ==> y % 2 == 1;\nloop invariant x % 2 == 0 ==> (x % 2) == 0 ==> (x % 2) == 0;\nloop invariant x % 2 == 1 ==> (x % 2) == 1 ==> (x % 2) == 1;\nloop invariant x % 2 == 0 ==> (x % 2) == 0 ==> (x % 2) == 0;\nloop invariant x % 2 == 1 ==> (x % 2) == 1 ==> (x % 2) == 1;\nloop invariant x % 2 == 0 ==> (x % 2) == 0 ==> (x % 2) == 0;\nloop invariant x % 2 == 1 ==> (x % 2) == 1 ==> (x % 2) == 1;\nloop invariant x % 2 == 0 ==> (x % 2) == 0 ==> (x % 2) == 0;\nloop invariant x % 2 == 1 ==> (x % 2) == 1 ==> (x % 2) == 1;\nloop invariant x % 2 == 0 ==> (x % 2) == 0 ==> (x % 2) == 0;\nloop invariant x % 2 == 1 ==> (x % 2) == 1 ==> (x % 2) == 1;\nloop invariant x % 2 == 0 ==> (x % 2) == 0 ==> (x % 2) == 0;\nloop invariant x % 2 == 1 ==> (x % 2) == 1 ==> (x % 2) == 1;\nloop invariant x % 2 == 0 ==> (x % 2) == 0 ==> (x % 2) == 0;\nloop invariant x % 2 == 1 ==> (x % 2) == 1 ==> (x % 2) == 1;\nloop invariant x % 2 == 0 ==> (x % 2) == 0 ==> (x % 2) == 0;\nloop invariant x % 2 == 1 ==> (x % 2) == 1 ==> (x % 2) == 1;\nloop invariant x % 2 == 0 ==> (x % 2) == 0 ==> (x % 2) == 0;\nloop invariant x % 2 == 1 ==> (x % 2) == 1 ==> (x % 2) == 1;\nloop invariant x % 2 == 0 ==> (x % 2) == 0 ==> (x % 2) == 0;\nloop invariant x % 2 == 1 ==> (x % 2) == 1 ==> (x % 2) == 1;\nloop invariant x % 2 == 0 ==> (x % 2) == 0 ==> (x % 2) == 0;\nloop invariant x % 2 == 1 ==> (x % 2) == 1 ==> (x % 2) == 1;\nloop invariant x % 2 == 0 ==> (x % 2) == 0 ==> (x % 2) == 0;\nloop invariant x % 2 == 1 ==> (x % 2) == 1 ==> (x % 2) == 1;\nloop invariant x % 2 == 0 ==> (x % 2) == 0 ==> (x % 2) == 0;\nloop invariant x % 2 == 1 ==> (x % 2) == 1 ==> (x % 2) == 1;\nloop invariant x % 2 == 0 ==> (x % 2) == 0 ==> (x % 2) == 0;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x;\nloop invariant x % 2 == y % 2;\nloop invariant x >= y;\nloop invariant x <= 99;\nloop invariant y >= 0;\nloop invariant y <= 99;\nloop invariant y % 2 == y % 2;\nloop invariant y % 2 == y % 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 99; loop invariant 0 <= y; loop invariant (x % 2) == (y % 2); loop invariant ((x % 2) == 0) ==> (x % 2) == ((y + x - 1) % 2); loop invariant (y % 2) == (2 * (y / 2)); loop invariant (y % 2) == ((y / 2) * 2); loop invariant (x % 2) == ((x / 2) * 2); loop invariant (x % 2) == (2 * (x / 2)); loop invariant (x % 2) == ((x % 2) % 2); loop invariant (x % 2) == ((x % 2) % 2); loop invariant ((x % 2) == 0) ==> (x % 2) == (y % 2); loop invariant ((x % 2) == 1) ==> (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant y % 2 == 0 ==> (x % 2) == 0;\nloop invariant y % 2 != 0 ==> (x % 2) == 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant (y % 2) == 0 ==> x % 2 == 0;\nloop invariant (y % 2) != 0 ==> x % 2 != 0;\nloop invariant x <= y;\nloop invariant x % 2 == y % 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant y % 2 == 0 ==> x % 2 == 0;\nloop invariant y % 2 != 0 ==> x % 2 != 0;\nloop invariant y % 2 == 0 ==> (x >= 2 * (x / 2));\nloop invariant y % 2 != 0 ==> (x >= (x / 2) + 1);\nloop invariant y % 2 == 0 ==> (x <= 2 * (x / 2));\nloop invariant y % 2 != 0 ==> (x <= (x / 2) + 1);\nloop invariant y % 2 == 0 ==> (y >= 2 * (x / 2));\nloop invariant y % 2 != 0 ==> (y >= (x / 2) + 1);\nloop invariant y % 2 == 0 ==> (y <= 2 * (x / 2));\nloop invariant y % 2 != 0 ==> (y <= (x / 2) + 1);\nloop invariant y % 2 == 0 ==> (x / 2) * 2 == x;\nloop invariant y % 2 != 0 ==> (x - 1) / 2 * 2 == x - 1;\nloop invariant y % 2 == 0 ==> (y / 2) * 2 == y;\nloop invariant y % 2 != 0 ==> (y - 1) / 2 * 2 == y - 1;\nloop invariant y % 2 == 0 ==> (x / 2) == x / 2;\nloop invariant y % 2 != 0 ==> (x - 1) / 2 == (x - 1) / 2;\nloop invariant y % 2 == 0 ==> (y / 2) == y / 2;\nloop invariant y % 2 != 0 ==> (y - 1) / 2 == (y - 1) / 2;\nloop invariant y % 2 == 0 ==> (x % 2) == 0;\nloop invariant y % 2 != 0 ==> (x % 2) == 1;\nloop invariant y % 2 == 0 ==> (y % 2) == 0;\nloop invariant y % 2 != 0 ==> (y % 2) == 1;\nloop invariant y % 2 == 0 ==> (x / 2) == y;\nloop invariant y % 2 != 0 ==> (x - 1) / 2 == y - 1;\nloop invariant y % 2 == 0 ==> (y / 2) == x;\nloop invariant y % 2 != 0 ==> (y - 1) / 2 == x - 1;\nloop invariant y % 2 == 0 ==> (x / 2) == y / 2;\nloop invariant y % 2 != 0 ==> (x - 1) / 2 == (y - 1) / 2;\nloop invariant y % 2 == 0 ==> (y / 2) == x / 2;\nloop invariant y % 2 != 0 ==> (y - 1) / 2 == (x - 1) / 2;\nloop invariant y % 2 == 0 ==> (x / 2) == y / 2;\nloop invariant y % 2 != 0 ==> (x - 1) / 2 == (y - 1) / 2;\nloop invariant y % 2 == 0 ==> (y / 2) == x / 2;\nloop invariant y % 2 != 0 ==> (y - 1) / 2 == (x - 1) / 2;\nloop invariant y % 2 == 0 ==> (x / 2) == y / 2;\nloop invariant y % 2 != 0 ==> (x - 1) / 2 == (y - 1) / 2;\nloop invariant y % 2 == 0 ==> (y / 2) == x / 2;\nloop invariant y % 2 != 0 ==> (y - 1) / 2 == (x - 1) / 2;\nloop invariant y % 2 == 0 ==> (x / 2) == y / 2;\nloop invariant y % 2 != 0 ==> (x - 1) / 2 == (y - 1) / 2;\nloop invariant y % 2 == 0 ==> (y / 2) == x / 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant 0 <= y <= 99;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 <= 99;\nloop invariant x % 2 == y % 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant 0 <= y <= 49999;\nloop invariant (x % 2) == (y % 2) ==> (x % 2) == (y % 2);\nloop invariant x >= y ==> x >= y;\nloop invariant x <= y ==> x <= y;\nloop invariant x < 99 ==> x < 99;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant y >= 0 ==> y >= 0;\nloop invariant y <= 49999 ==> y <= 49999;\nloop invariant y % 2 == 0 ==> y % 2 == 0;\nloop invariant y % 2 != 0 ==> y % 2 != 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant x % 2 == y % 2 ==> (y >= 0);\nloop invariant x % 2 == y % 2 ==> (y <= 99);\nloop invariant x % 2 == y % 2 ==> (x == 0 || x == 1 || x == 3 || x == 5 || x == 7 || x == 9 || x == 11 || x == 13 || x == 15 || x == 17 || x == 19 || x == 21 || x == 23 || x == 25 || x == 27 || x == 29 || x == 31 || x == 33 || x == 35 || x == 37 || x == 39 || x == 41 || x == 43 || x == 45 || x == 47 || x == 49 || x == 51 || x == 53 || x == 55 || x == 57 || x == 59 || x == 61 || x == 63 || x == 65 || x == 67 || x == 69 || x == 71 || x == 73 || x == 75 || x == 77 || x == 79 || x == 81 || x == 83 || x == 85 || x == 87 || x == 89 || x == 91 || x == 93 || x == 95 || x == 97 || x == 99);\nloop invariant (y % 2 == 0) ==> (x % 2 == y % 2 ==> (x == 0 || x == 2 || x == 4 || x == 6 || x == 8 || x == 10 || x == 12 || x == 14 || x == 16 || x == 18 || x == 20 || x == 22 || x == 24 || x == 26 || x == 28 || x == 30 || x == 32 || x == 34 || x == 36 || x == 38 || x == 40 || x == 42 || x == 44 || x == 46 || x == 48 || x == 50 || x == 52 || x == 54 || x == 56 || x == 58 || x == 60 || x == 62 || x == 64 || x == 66 || x == 68 || x == 70 || x == 72 || x == 74 || x == 76 || x == 78 || x == 80 || x == 82 || x == 84 || x == 86 || x == 88 || x == 90 || x == 92 || x == 94 || x == 96 || x == 98));\nloop invariant (y % 2 == 1) ==> (x % 2 == y % 2 ==> (x == 1 || x == 3 || x == 5 || x == 7 || x == 9 || x == 11 || x == 13 || x == 15 || x == 17 || x == 19 || x == 21 || x == 23 || x == 25 || x == 27 || x == 29 || x == 31 || x == 33 || x == 35 || x == 37 || x == 39 || x == 41 || x == 43 || x == 45 || x == 47 || x == 49 || x == 51 || x == 53 || x == 55 || x == 57 || x == 59 || x == 61 || x == 63 || x == 65 || x == 67 || x == 69 || x == 71 || x == 73 || x == 75 || x == 77 || x == 79 || x == 81 || x == 83 || x == 85 || x == 87 || x == 89 || x == 91 || x == 93 || x == 95 || x == 97 || x == 99));\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant y >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant if (y % 2 == 0) then x % 2 == 0 else x % 2 == 1;\nloop invariant x <= y;\nloop invariant x % 2 == y % 2;\nloop invariant 0 <= x <= 99;\nloop invariant if (y % 2 == 0) then x % 2 == 0 else x % 2 == 1;\nloop invariant x <= y;\nloop invariant x % 2 == y % 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0;\nloop invariant x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1;\nloop invariant 99 <= x <= 99;\nloop invariant x % 2 == (y % 2);\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant y % 2 == y % 2;\nloop invariant x % 2 == x % 2;\nloop invariant x % 2 == (y % 2 ==> x % 2) ==> x % 2;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 16: syntax error (expression expected but predicate found). Ignoring loop annotation",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\nloop invariant i1: y % 2 == y % 2;\nloop invariant i2: x % 2 == x % 2;\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant x % 2 == y % 2;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is established but not preserved.\nloop invariant x % 2 == y % 2 is neither established nor preserved.\nAssertion x % 2 == y % 2: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\n\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 159,
                "annotations": "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant i3;\nloop invariant i4;\nloop invariant i5;\nloop invariant i6;\nloop invariant i7;\nloop invariant i8;\nloop invariant i9;\nloop invariant i10;\nloop invariant i11;\nloop invariant i12;\nloop invariant i13;\nloop invariant i14;\nloop invariant i15;\nloop invariant i16;\nloop invariant i17;\nloop invariant i18;\nloop invariant i19;\nloop invariant i20;\nloop invariant i21;\nloop invariant i22;\nloop invariant i23;\nloop invariant i24;\nloop invariant i25;\nloop invariant i26;\nloop invariant i27;\nloop invariant i28;\nloop invariant i29;\nloop invariant i30;\nloop invariant i31;\nloop invariant i32;\nloop invariant i33;\nloop invariant i34;\nloop invariant i35;\nloop invariant i36;\nloop invariant i37;\nloop invariant i38;\nloop invariant i39;\nloop invariant i40;\nloop invariant i41;\nloop invariant i42;\nloop invariant i43;\nloop invariant i44;\nloop invariant i45;\nloop invariant i46;\nloop invariant i47;\nloop invariant i48;\nloop invariant i49;\nloop invariant i50;\nloop invariant i51;\nloop invariant i52;\nloop invariant i53;\nloop invariant i54;\nloop invariant i55;\nloop invariant i56;\nloop invariant i57;\nloop invariant i58;\nloop invariant i59;\nloop invariant i60;\nloop invariant i61;\nloop invariant i62;\nloop invariant i63;\nloop invariant i64;\nloop invariant i65;\nloop invariant i66;\nloop invariant i67;\nloop invariant i68;\nloop invariant i69;\nloop invariant i70;\nloop invariant i71;\nloop invariant i72;\nloop invariant i73;\nloop invariant i74;\nloop invariant i75;\nloop invariant i76;\nloop invariant i77;\nloop invariant i78;\nloop invariant i79;\nloop invariant i80;\nloop invariant i81;\nloop invariant i82;\nloop invariant i83;\nloop invariant i84;\nloop invariant i85;\nloop invariant i86;\nloop invariant i87;\nloop invariant i88;\nloop invariant i89;\nloop invariant i90;\nloop invariant i91;\nloop invariant i92;\nloop invariant i93;\nloop invariant i94;\nloop invariant i95;\nloop invariant i96;\nloop invariant i97;\nloop invariant i98;\nloop invariant i99;\nloop invariant i100;\nloop invariant i101;\nloop invariant i102;\nloop invariant i103;\nloop invariant i104;\nloop invariant i105;\nloop invariant i106;\nloop invariant i107;\nloop invariant i108;\nloop invariant i109;\nloop invariant i110;\nloop invariant i111;\nloop invariant i112;\nloop invariant i113;\nloop invariant i114;\nloop invariant i115;\nloop invariant i116;\nloop invariant i117;\nloop invariant i118;\nloop invariant i119;\nloop invariant i120;\nloop invariant i121;\nloop invariant i122;\nloop invariant i123;\nloop invariant i124;\nloop invariant i125;\nloop invariant i126;\nloop invariant i127;\nloop invariant i128;\nloop invariant i129;\nloop invariant i130;\nloop invariant i131;\nloop invariant i132;\nloop invariant i133;\nloop invariant i134;\nloop invariant i135;\nloop invariant i136;\nloop invariant i137;\nloop invariant i138;\nloop invariant i139;\nloop invariant i140;\nloop invariant i141;\nloop invariant i142;\nloop invariant i143;\nloop invariant i144;\nloop invariant i145;\nloop invariant i146;\nloop invariant i147;\nloop invariant i148;\nloop invariant i149;\nloop invariant i150;\nloop invariant i151;\nloop invariant i152;\nloop invariant i153;\nloop invariant i154;\nloop invariant i155;\nloop invariant i156;\nloop invariant i157;\nloop invariant i158;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 14: unbound logic variable i1. Ignoring loop annotation",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant 0 <= y < 100;\nloop invariant (x % 2) == (y % 2) ==> (x % 2) == 0 ==> (x % 2) == 0;\nloop invariant (x % 2) == (y % 2) ==> (x % 2) == 1 ==> (x % 2) == 1;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant x % 2 == 1 ==> x % 2 == 1;\nloop invariant x % 2 == 0 ==> y % 2 == 0;\nloop invariant x % 2 == 1 ==> y % 2 == 1;\nloop invariant x % 2 == 0 ==> (x % 2) == 0 ==> (x % 2) == 0;\nloop invariant x % 2 == 1 ==> (x % 2) == 1 ==> (x % 2) == 1;\nloop invariant x % 2 == 0 ==> (x % 2) == 0 ==> (x % 2) == 0;\nloop invariant x % 2 == 1 ==> (x % 2) == 1 ==> (x % 2) == 1;\nloop invariant x % 2 == 0 ==> (x % 2) == 0 ==> (x % 2) == 0;\nloop invariant x % 2 == 1 ==> (x % 2) == 1 ==> (x % 2) == 1;\nloop invariant x % 2 == 0 ==> (x % 2) == 0 ==> (x % 2) == 0;\nloop invariant x % 2 == 1 ==> (x % 2) == 1 ==> (x % 2) == 1;\nloop invariant x % 2 == 0 ==> (x % 2) == 0 ==> (x % 2) == 0;\nloop invariant x % 2 == 1 ==> (x % 2) == 1 ==> (x % 2) == 1;\nloop invariant x % 2 == 0 ==> (x % 2) == 0 ==> (x % 2) == 0;\nloop invariant x % 2 == 1 ==> (x % 2) == 1 ==> (x % 2) == 1;\nloop invariant x % 2 == 0 ==> (x % 2) == 0 ==> (x % 2) == 0;\nloop invariant x % 2 == 1 ==> (x % 2) == 1 ==> (x % 2) == 1;\nloop invariant x % 2 == 0 ==> (x % 2) == 0 ==> (x % 2) == 0;\nloop invariant x % 2 == 1 ==> (x % 2) == 1 ==> (x % 2) == 1;\nloop invariant x % 2 == 0 ==> (x % 2) == 0 ==> (x % 2) == 0;\nloop invariant x % 2 == 1 ==> (x % 2) == 1 ==> (x % 2) == 1;\nloop invariant x % 2 == 0 ==> (x % 2) == 0 ==> (x % 2) == 0;\nloop invariant x % 2 == 1 ==> (x % 2) == 1 ==> (x % 2) == 1;\nloop invariant x % 2 == 0 ==> (x % 2) == 0 ==> (x % 2) == 0;\nloop invariant x % 2 == 1 ==> (x % 2) == 1 ==> (x % 2) == 1;\nloop invariant x % 2 == 0 ==> (x % 2) == 0 ==> (x % 2) == 0;\nloop invariant x % 2 == 1 ==> (x % 2) == 1 ==> (x % 2) == 1;\nloop invariant x % 2 == 0 ==> (x % 2) == 0 ==> (x % 2) == 0;\nloop invariant x % 2 == 1 ==> (x % 2) == 1 ==> (x % 2) == 1;\nloop invariant x % 2 == 0 ==> (x % 2) == 0 ==> (x % 2) == 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is established but not preserved.\nloop invariant 0 <= y < 100 is preserved but not established.\nloop invariant (x % 2) == (y % 2) ==> (x % 2) == 0 ==> (x % 2) == 0 is partially proven to be inductive.\nloop invariant (x % 2) == (y % 2) ==> (x % 2) == 1 ==> (x % 2) == 1 is partially proven to be inductive.\nloop invariant x % 2 == 0 ==> x % 2 == 0 is partially proven to be inductive.\nloop invariant x % 2 == 1 ==> x % 2 == 1 is partially proven to be inductive.\nloop invariant x % 2 == 0 ==> y % 2 == 0 is neither established nor preserved.\nloop invariant x % 2 == 1 ==> y % 2 == 1 is partially proven to be inductive.\nloop invariant x % 2 == 0 ==> (x % 2) == 0 ==> (x % 2) == 0 is partially proven to be inductive.\nloop invariant x % 2 == 1 ==> (x % 2) == 1 ==> (x % 2) == 1 is partially proven to be inductive.\nAssertion x % 2 == y % 2: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\n\n\nloop invariant i3: (x % 2) == (y % 2) ==> (x % 2) == 0 ==> (x % 2) == 0;\nloop invariant i4: (x % 2) == (y % 2) ==> (x % 2) == 1 ==> (x % 2) == 1;\nloop invariant i5: x % 2 == 0 ==> x % 2 == 0;\nloop invariant i6: x % 2 == 1 ==> x % 2 == 1;\n\nloop invariant i8: x % 2 == 1 ==> y % 2 == 1;\nloop invariant i9: x % 2 == 0 ==> (x % 2) == 0 ==> (x % 2) == 0;\nloop invariant i10: x % 2 == 1 ==> (x % 2) == 1 ==> (x % 2) == 1;\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 1 <= x;\nloop invariant x % 2 == y % 2;\nloop invariant x >= y;\nloop invariant x <= 99;\nloop invariant y >= 0;\nloop invariant y <= 99;\nloop invariant y % 2 == y % 2;\nloop invariant y % 2 == y % 2;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= x is preserved but not established.\nloop invariant x % 2 == y % 2 is partially proven to be inductive.\nloop invariant x >= y is partially proven to be inductive.\nloop invariant x <= 99 is partially proven to be inductive.\nloop invariant y >= 0 is partially proven to be inductive.\nloop invariant y <= 99 is partially proven to be inductive.\nloop invariant y % 2 == y % 2 is partially proven to be inductive.\nAssertion x % 2 == y % 2: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\n\n\n\n\nloop invariant i5: y >= 0;\n\nloop invariant i7: y % 2 == y % 2;\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 99; loop invariant 0 <= y; loop invariant (x % 2) == (y % 2); loop invariant ((x % 2) == 0) ==> (x % 2) == ((y + x - 1) % 2); loop invariant (y % 2) == (2 * (y / 2)); loop invariant (y % 2) == ((y / 2) * 2); loop invariant (x % 2) == ((x / 2) * 2); loop invariant (x % 2) == (2 * (x / 2)); loop invariant (x % 2) == ((x % 2) % 2); loop invariant (x % 2) == ((x % 2) % 2); loop invariant ((x % 2) == 0) ==> (x % 2) == (y % 2); loop invariant ((x % 2) == 1) ==> (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 99; loop invariant 0 <= y; loop invariant (x % 2) == (y % 2); loop invariant ((x % 2) == 0) ==> (x % 2) == ((y + x - 1) % 2); loop invariant (y % 2) == (2 * (y / 2)); loop invariant (y % 2) == ((y / 2) * 2); loop invariant (x % 2) == ((x / 2) * 2); loop invariant (x % 2) == (2 * (x / 2)); loop invariant (x % 2) == ((x % 2) % 2); loop invariant (x % 2) == ((x % 2) % 2); loop invariant ((x % 2) == 0) ==> (x % 2) == (y % 2); loop invariant ((x % 2) == 1) ==> (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2) is partially proven to be inductive.\nAssertion x % 2 == y % 2: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\nloop invariant i1: 0 <= x <= 99; loop invariant 0 <= y; loop invariant (x % 2) == (y % 2); loop invariant ((x % 2) == 0) ==> (x % 2) == ((y + x - 1) % 2); loop invariant (y % 2) == (2 * (y / 2)); loop invariant (y % 2) == ((y / 2) * 2); loop invariant (x % 2) == ((x / 2) * 2); loop invariant (x % 2) == (2 * (x / 2)); loop invariant (x % 2) == ((x % 2) % 2); loop invariant (x % 2) == ((x % 2) % 2); loop invariant ((x % 2) == 0) ==> (x % 2) == (y % 2); loop invariant ((x % 2) == 1) ==> (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2);\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant y % 2 == 0 ==> (x % 2) == 0;\nloop invariant y % 2 != 0 ==> (x % 2) == 1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is established but not preserved.\nloop invariant y % 2 == 0 ==> (x % 2) == 0 is partially proven to be inductive.\nloop invariant y % 2 != 0 ==> (x % 2) == 1 is neither established nor preserved.\nAssertion x % 2 == y % 2: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\n\nloop invariant i2: y % 2 == 0 ==> (x % 2) == 0;\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant (y % 2) == 0 ==> x % 2 == 0;\nloop invariant (y % 2) != 0 ==> x % 2 != 0;\nloop invariant x <= y;\nloop invariant x % 2 == y % 2;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is established but not preserved.\nloop invariant (y % 2) == 0 ==> x % 2 == 0 is partially proven to be inductive.\nloop invariant (y % 2) != 0 ==> x % 2 != 0 is neither established nor preserved.\nloop invariant x <= y is established but not preserved.\nloop invariant x % 2 == y % 2 is partially proven to be inductive.\nAssertion x % 2 == y % 2: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\n\nloop invariant i2: (y % 2) == 0 ==> x % 2 == 0;\n\n\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 9,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant y % 2 == 0 ==> x % 2 == 0;\nloop invariant y % 2 != 0 ==> x % 2 != 0;\nloop invariant y % 2 == 0 ==> (x >= 2 * (x / 2));\nloop invariant y % 2 != 0 ==> (x >= (x / 2) + 1);\nloop invariant y % 2 == 0 ==> (x <= 2 * (x / 2));\nloop invariant y % 2 != 0 ==> (x <= (x / 2) + 1);\nloop invariant y % 2 == 0 ==> (y >= 2 * (x / 2));\nloop invariant y % 2 != 0 ==> (y >= (x / 2) + 1);\nloop invariant y % 2 == 0 ==> (y <= 2 * (x / 2));\nloop invariant y % 2 != 0 ==> (y <= (x / 2) + 1);\nloop invariant y % 2 == 0 ==> (x / 2) * 2 == x;\nloop invariant y % 2 != 0 ==> (x - 1) / 2 * 2 == x - 1;\nloop invariant y % 2 == 0 ==> (y / 2) * 2 == y;\nloop invariant y % 2 != 0 ==> (y - 1) / 2 * 2 == y - 1;\nloop invariant y % 2 == 0 ==> (x / 2) == x / 2;\nloop invariant y % 2 != 0 ==> (x - 1) / 2 == (x - 1) / 2;\nloop invariant y % 2 == 0 ==> (y / 2) == y / 2;\nloop invariant y % 2 != 0 ==> (y - 1) / 2 == (y - 1) / 2;\nloop invariant y % 2 == 0 ==> (x % 2) == 0;\nloop invariant y % 2 != 0 ==> (x % 2) == 1;\nloop invariant y % 2 == 0 ==> (y % 2) == 0;\nloop invariant y % 2 != 0 ==> (y % 2) == 1;\nloop invariant y % 2 == 0 ==> (x / 2) == y;\nloop invariant y % 2 != 0 ==> (x - 1) / 2 == y - 1;\nloop invariant y % 2 == 0 ==> (y / 2) == x;\nloop invariant y % 2 != 0 ==> (y - 1) / 2 == x - 1;\nloop invariant y % 2 == 0 ==> (x / 2) == y / 2;\nloop invariant y % 2 != 0 ==> (x - 1) / 2 == (y - 1) / 2;\nloop invariant y % 2 == 0 ==> (y / 2) == x / 2;\nloop invariant y % 2 != 0 ==> (y - 1) / 2 == (x - 1) / 2;\nloop invariant y % 2 == 0 ==> (x / 2) == y / 2;\nloop invariant y % 2 != 0 ==> (x - 1) / 2 == (y - 1) / 2;\nloop invariant y % 2 == 0 ==> (y / 2) == x / 2;\nloop invariant y % 2 != 0 ==> (y - 1) / 2 == (x - 1) / 2;\nloop invariant y % 2 == 0 ==> (x / 2) == y / 2;\nloop invariant y % 2 != 0 ==> (x - 1) / 2 == (y - 1) / 2;\nloop invariant y % 2 == 0 ==> (y / 2) == x / 2;\nloop invariant y % 2 != 0 ==> (y - 1) / 2 == (x - 1) / 2;\nloop invariant y % 2 == 0 ==> (x / 2) == y / 2;\nloop invariant y % 2 != 0 ==> (x - 1) / 2 == (y - 1) / 2;\nloop invariant y % 2 == 0 ==> (y / 2) == x / 2;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x % 2 == 0 is partially proven to be inductive.\nloop invariant y % 2 != 0 ==> x % 2 != 0 is neither established nor preserved.\nloop invariant y % 2 == 0 ==> (x >= 2 * (x / 2)) is partially proven to be inductive.\nloop invariant y % 2 != 0 ==> (x >= (x / 2) + 1) is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> (x <= 2 * (x / 2)) is partially proven to be inductive.\nloop invariant y % 2 != 0 ==> (x <= (x / 2) + 1) is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> (y >= 2 * (x / 2)) is established but not preserved.\nloop invariant y % 2 != 0 ==> (y >= (x / 2) + 1) is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> (y <= 2 * (x / 2)) is preserved but not established.\nloop invariant y % 2 != 0 ==> (y <= (x / 2) + 1) is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> (x / 2) * 2 == x is partially proven to be inductive.\nloop invariant y % 2 != 0 ==> (x - 1) / 2 * 2 == x - 1 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> (y / 2) * 2 == y is partially proven to be inductive.\nloop invariant y % 2 != 0 ==> (y - 1) / 2 * 2 == y - 1 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> (x / 2) == x / 2 is partially proven to be inductive.\nloop invariant y % 2 != 0 ==> (x - 1) / 2 == (x - 1) / 2 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> (y / 2) == y / 2 is partially proven to be inductive.\nloop invariant y % 2 != 0 ==> (y - 1) / 2 == (y - 1) / 2 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> (x % 2) == 0 is partially proven to be inductive.\nloop invariant y % 2 != 0 ==> (x % 2) == 1 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> (y % 2) == 0 is partially proven to be inductive.\nloop invariant y % 2 != 0 ==> (y % 2) == 1 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> (x / 2) == y is partially proven to be inductive.\nloop invariant y % 2 != 0 ==> (x - 1) / 2 == y - 1 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> (y / 2) == x is partially proven to be inductive.\nloop invariant y % 2 != 0 ==> (y - 1) / 2 == x - 1 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> (x / 2) == y / 2 is partially proven to be inductive.\nloop invariant y % 2 != 0 ==> (x - 1) / 2 == (y - 1) / 2 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> (y / 2) == x / 2 is partially proven to be inductive.\nloop invariant y % 2 != 0 ==> (y - 1) / 2 == (x - 1) / 2 is partially proven to be inductive.\nAssertion x % 2 == y % 2: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\n\nloop invariant i2: y % 2 == 0 ==> x % 2 == 0;\n\nloop invariant i4: y % 2 == 0 ==> (x >= 2 * (x / 2));\n\nloop invariant i6: y % 2 == 0 ==> (x <= 2 * (x / 2));\n\n\n\n\n\nloop invariant i12: y % 2 == 0 ==> (x / 2) * 2 == x;\n\nloop invariant i14: y % 2 == 0 ==> (y / 2) * 2 == y;\nloop invariant i15: y % 2 != 0 ==> (y - 1) / 2 * 2 == y - 1;\nloop invariant i16: y % 2 == 0 ==> (x / 2) == x / 2;\nloop invariant i17: y % 2 != 0 ==> (x - 1) / 2 == (x - 1) / 2;\nloop invariant i18: y % 2 == 0 ==> (y / 2) == y / 2;\nloop invariant i19: y % 2 != 0 ==> (y - 1) / 2 == (y - 1) / 2;\nloop invariant i20: y % 2 == 0 ==> (x % 2) == 0;\n\nloop invariant i22: y % 2 == 0 ==> (y % 2) == 0;\nloop invariant i23: y % 2 != 0 ==> (y % 2) == 1;\n\n\n\n\n\n\n\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant 0 <= y <= 99;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 <= 99;\nloop invariant x % 2 == y % 2;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is established but not preserved.\nloop invariant 0 <= y <= 99 is preserved but not established.\nloop invariant (x + y) % 2 == 0 is neither established nor preserved.\nloop invariant (x + y) % 2 <= 99 is partially proven to be inductive.\nloop invariant x % 2 == y % 2 is partially proven to be inductive.\nAssertion x % 2 == y % 2: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\n\n\n\nloop invariant i4: (x + y) % 2 <= 99;\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant 0 <= y <= 49999;\nloop invariant (x % 2) == (y % 2) ==> (x % 2) == (y % 2);\nloop invariant x >= y ==> x >= y;\nloop invariant x <= y ==> x <= y;\nloop invariant x < 99 ==> x < 99;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant y >= 0 ==> y >= 0;\nloop invariant y <= 49999 ==> y <= 49999;\nloop invariant y % 2 == 0 ==> y % 2 == 0;\nloop invariant y % 2 != 0 ==> y % 2 != 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is established but not preserved.\nloop invariant 0 <= y <= 49999 is preserved but not established.\nloop invariant (x % 2) == (y % 2) ==> (x % 2) == (y % 2) is partially proven to be inductive.\nloop invariant x >= y ==> x >= y is partially proven to be inductive.\nloop invariant x <= y ==> x <= y is partially proven to be inductive.\nloop invariant x < 99 ==> x < 99 is partially proven to be inductive.\nloop invariant x >= 0 ==> x >= 0 is partially proven to be inductive.\nloop invariant y >= 0 ==> y >= 0 is partially proven to be inductive.\nloop invariant y <= 49999 ==> y <= 49999 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> y % 2 == 0 is partially proven to be inductive.\nloop invariant y % 2 != 0 ==> y % 2 != 0 is partially proven to be inductive.\nAssertion x % 2 == y % 2: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\n\n\nloop invariant i3: (x % 2) == (y % 2) ==> (x % 2) == (y % 2);\nloop invariant i4: x >= y ==> x >= y;\nloop invariant i5: x <= y ==> x <= y;\nloop invariant i6: x < 99 ==> x < 99;\nloop invariant i7: x >= 0 ==> x >= 0;\nloop invariant i8: y >= 0 ==> y >= 0;\nloop invariant i9: y <= 49999 ==> y <= 49999;\nloop invariant i10: y % 2 == 0 ==> y % 2 == 0;\nloop invariant i11: y % 2 != 0 ==> y % 2 != 0;\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant x % 2 == y % 2 ==> (y >= 0);\nloop invariant x % 2 == y % 2 ==> (y <= 99);\nloop invariant x % 2 == y % 2 ==> (x == 0 || x == 1 || x == 3 || x == 5 || x == 7 || x == 9 || x == 11 || x == 13 || x == 15 || x == 17 || x == 19 || x == 21 || x == 23 || x == 25 || x == 27 || x == 29 || x == 31 || x == 33 || x == 35 || x == 37 || x == 39 || x == 41 || x == 43 || x == 45 || x == 47 || x == 49 || x == 51 || x == 53 || x == 55 || x == 57 || x == 59 || x == 61 || x == 63 || x == 65 || x == 67 || x == 69 || x == 71 || x == 73 || x == 75 || x == 77 || x == 79 || x == 81 || x == 83 || x == 85 || x == 87 || x == 89 || x == 91 || x == 93 || x == 95 || x == 97 || x == 99);\nloop invariant (y % 2 == 0) ==> (x % 2 == y % 2 ==> (x == 0 || x == 2 || x == 4 || x == 6 || x == 8 || x == 10 || x == 12 || x == 14 || x == 16 || x == 18 || x == 20 || x == 22 || x == 24 || x == 26 || x == 28 || x == 30 || x == 32 || x == 34 || x == 36 || x == 38 || x == 40 || x == 42 || x == 44 || x == 46 || x == 48 || x == 50 || x == 52 || x == 54 || x == 56 || x == 58 || x == 60 || x == 62 || x == 64 || x == 66 || x == 68 || x == 70 || x == 72 || x == 74 || x == 76 || x == 78 || x == 80 || x == 82 || x == 84 || x == 86 || x == 88 || x == 90 || x == 92 || x == 94 || x == 96 || x == 98));\nloop invariant (y % 2 == 1) ==> (x % 2 == y % 2 ==> (x == 1 || x == 3 || x == 5 || x == 7 || x == 9 || x == 11 || x == 13 || x == 15 || x == 17 || x == 19 || x == 21 || x == 23 || x == 25 || x == 27 || x == 29 || x == 31 || x == 33 || x == 35 || x == 37 || x == 39 || x == 41 || x == 43 || x == 45 || x == 47 || x == 49 || x == 51 || x == 53 || x == 55 || x == 57 || x == 59 || x == 61 || x == 63 || x == 65 || x == 67 || x == 69 || x == 71 || x == 73 || x == 75 || x == 77 || x == 79 || x == 81 || x == 83 || x == 85 || x == 87 || x == 89 || x == 91 || x == 93 || x == 95 || x == 97 || x == 99));\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is partially proven to be inductive.\nloop invariant x % 2 == y % 2 ==> (y >= 0) is partially proven to be inductive.\nloop invariant x % 2 == y % 2 ==> (y <= 99) is neither established nor preserved.\nloop invariant x % 2 == y % 2 ==> (x == 0 || x == 1 || x == 3 || x == 5 || x == 7 || x == 9 || x == 11 || x == 13 || x == 15 || x == 17 || x == 19 || x == 21 || x == 23 || x == 25 || x == 27 || x == 29 || x == 31 || x == 33 || x == 35 || x == 37 || x == 39 || x == 41 || x == 43 || x == 45 || x == 47 || x == 49 || x == 51 || x == 53 || x == 55 || x == 57 || x == 59 || x == 61 || x == 63 || x == 65 || x == 67 || x == 69 || x == 71 || x == 73 || x == 75 || x == 77 || x == 79 || x == 81 || x == 83 || x == 85 || x == 87 || x == 89 || x == 91 || x == 93 || x == 95 || x == 97 || x == 99) is established but not preserved.\nloop invariant (y % 2 == 0) ==> (x % 2 == y % 2 ==> (x == 0 || x == 2 || x == 4 || x == 6 || x == 8 || x == 10 || x == 12 || x == 14 || x == 16 || x == 18 || x == 20 || x == 22 || x == 24 || x == 26 || x == 28 || x == 30 || x == 32 || x == 34 || x == 36 || x == 38 || x == 40 || x == 42 || x == 44 || x == 46 || x == 48 || x == 50 || x == 52 || x == 54 || x == 56 || x == 58 || x == 60 || x == 62 || x == 64 || x == 66 || x == 68 || x == 70 || x == 72 || x == 74 || x == 76 || x == 78 || x == 80 || x == 82 || x == 84 || x == 86 || x == 88 || x == 90 || x == 92 || x == 94 || x == 96 || x == 98)) is partially proven to be inductive.\nloop invariant (y % 2 == 1) ==> (x % 2 == y % 2 ==> (x == 1 || x == 3 || x == 5 || x == 7 || x == 9 || x == 11 || x == 13 || x == 15 || x == 17 || x == 19 || x == 21 || x == 23 || x == 25 || x == 27 || x == 29 || x == 31 || x == 33 || x == 35 || x == 37 || x == 39 || x == 41 || x == 43 || x == 45 || x == 47 || x == 49 || x == 51 || x == 53 || x == 55 || x == 57 || x == 59 || x == 61 || x == 63 || x == 65 || x == 67 || x == 69 || x == 71 || x == 73 || x == 75 || x == 77 || x == 79 || x == 81 || x == 83 || x == 85 || x == 87 || x == 89 || x == 91 || x == 93 || x == 95 || x == 97 || x == 99)) is partially proven to be inductive.\nAssertion x % 2 == y % 2: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\n\nloop invariant i2: x % 2 == y % 2 ==> (y >= 0);\n\n\n\nloop invariant i6: (y % 2 == 1) ==> (x % 2 == y % 2 ==> (x == 1 || x == 3 || x == 5 || x == 7 || x == 9 || x == 11 || x == 13 || x == 15 || x == 17 || x == 19 || x == 21 || x == 23 || x == 25 || x == 27 || x == 29 || x == 31 || x == 33 || x == 35 || x == 37 || x == 39 || x == 41 || x == 43 || x == 45 || x == 47 || x == 49 || x == 51 || x == 53 || x == 55 || x == 57 || x == 59 || x == 61 || x == 63 || x == 65 || x == 67 || x == 69 || x == 71 || x == 73 || x == 75 || x == 77 || x == 79 || x == 81 || x == 83 || x == 85 || x == 87 || x == 89 || x == 91 || x == 93 || x == 95 || x == 97 || x == 99));\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant y >= 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is established but not preserved.\nloop invariant y >= 0 is partially proven to be inductive.\nAssertion x % 2 == y % 2: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\n\nloop invariant i2: y >= 0;\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant if (y % 2 == 0) then x % 2 == 0 else x % 2 == 1;\nloop invariant x <= y;\nloop invariant x % 2 == y % 2;\nloop invariant 0 <= x <= 99;\nloop invariant if (y % 2 == 0) then x % 2 == 0 else x % 2 == 1;\nloop invariant x <= y;\nloop invariant x % 2 == y % 2;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 15: unexpected token '('",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\n\n\n\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0;\nloop invariant x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1;\nloop invariant 99 <= x <= 99;\nloop invariant x % 2 == (y % 2);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is partially proven to be inductive.\nloop invariant x % 2 == y % 2 is preserved but not established.\nloop invariant x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 is partially proven to be inductive.\nloop invariant x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1 is partially proven to be inductive.\nloop invariant 99 <= x <= 99 is preserved but not established.\nloop invariant x % 2 == (y % 2) is partially proven to be inductive.\nAssertion x % 2 == y % 2: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\n\n\nloop invariant i3: x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0;\nloop invariant i4: x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1;\n\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 243: unexpected token '('",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\nloop invariant i1: y % 2 == y % 2;\nloop invariant i2: x % 2 == x % 2;\nloop invariant i3: x % 2 == (y % 2 ==> x % 2) ==> x % 2;\nloop invariant i4: 0 <= x <= 99;\nloop invariant i5: x % 2 == y % 2;\nloop invariant i6: i1;\nloop invariant i7: i2;\nloop invariant i8: i3;\nloop invariant i9: i4;\nloop invariant i10: i5;\nloop invariant i11: i6;\nloop invariant i12: i7;\nloop invariant i13: i8;\nloop invariant i14: i9;\nloop invariant i15: i10;\nloop invariant i16: i11;\nloop invariant i17: i12;\nloop invariant i18: i13;\nloop invariant i19: i14;\nloop invariant i20: i15;\nloop invariant i21: i16;\nloop invariant i22: i17;\nloop invariant i23: i18;\nloop invariant i24: i19;\nloop invariant i25: i20;\nloop invariant i26: i21;\nloop invariant i27: i22;\nloop invariant i28: i23;\nloop invariant i29: i24;\nloop invariant i30: i25;\nloop invariant i31: i26;\nloop invariant i32: i27;\nloop invariant i33: i28;\nloop invariant i34: i29;\nloop invariant i35: i30;\nloop invariant i36: i31;\nloop invariant i37: i32;\nloop invariant i38: i33;\nloop invariant i39: i34;\nloop invariant i40: i35;\nloop invariant i41: i36;\nloop invariant i42: i37;\nloop invariant i43: i38;\nloop invariant i44: i39;\nloop invariant i45: i40;\nloop invariant i46: i41;\nloop invariant i47: i42;\nloop invariant i48: i43;\nloop invariant i49: i44;\nloop invariant i50: i45;\nloop invariant i51: i46;\nloop invariant i52: i47;\nloop invariant i53: i48;\nloop invariant i54: i49;\nloop invariant i55: i50;\nloop invariant i56: i51;\nloop invariant i57: i52;\nloop invariant i58: i53;\nloop invariant i59: i54;\nloop invariant i60: i55;\nloop invariant i61: i56;\nloop invariant i62: i57;\nloop invariant i63: i58;\nloop invariant i64: i59;\nloop invariant i65: i60;\nloop invariant i66: i61;\nloop invariant i67: i62;\nloop invariant i68: i63;\nloop invariant i69: i64;\nloop invariant i70: i65;\nloop invariant i71: i66;\nloop invariant i72: i67;\nloop invariant i73: i68;\nloop invariant i74: i69;\nloop invariant i75: i70;\nloop invariant i76: i71;\nloop invariant i77: i72;\nloop invariant i78: i73;\nloop invariant i79: i74;\nloop invariant i80: i75;\nloop invariant i81: i76;\nloop invariant i82: i77;\nloop invariant i83: i78;\nloop invariant i84: i79;\nloop invariant i85: i80;\nloop invariant i86: i81;\nloop invariant i87: i82;\nloop invariant i88: i83;\nloop invariant i89: i84;\nloop invariant i90: i85;\nloop invariant i91: i86;\nloop invariant i92: i87;\nloop invariant i93: i88;\nloop invariant i94: i89;\nloop invariant i95: i90;\nloop invariant i96: i91;\nloop invariant i97: i92;\nloop invariant i98: i93;\nloop invariant i99: i94;\nloop invariant i100: i95;\nloop invariant i101: i96;\nloop invariant i102: i97;\nloop invariant i103: i98;\nloop invariant i104: i99;\nloop invariant i105: i100;\nloop invariant i106: i101;\nloop invariant i107: i102;\nloop invariant i108: i103;\nloop invariant i109: i104;\nloop invariant i110: i105;\nloop invariant i111: i106;\nloop invariant i112: i107;\nloop invariant i113: i108;\nloop invariant i114: i109;\nloop invariant i115: i110;\nloop invariant i116: i111;\nloop invariant i117: i112;\nloop invariant i118: i113;\nloop invariant i119: i114;\nloop invariant i120: i115;\nloop invariant i121: i116;\nloop invariant i122: i117;\nloop invariant i123: i118;\nloop invariant i124: i119;\nloop invariant i125: i120;\nloop invariant i126: i121;\nloop invariant i127: i122;\nloop invariant i128: i123;\nloop invariant i129: i124;\nloop invariant i130: i125;\nloop invariant i131: i126;\nloop invariant i132: i127;\nloop invariant i133: i128;\nloop invariant i134: i129;\nloop invariant i135: i130;\nloop invariant i136: i131;\nloop invariant i137: i132;\nloop invariant i138: i133;\nloop invariant i139: i134;\nloop invariant i140: i135;\nloop invariant i141: i136;\nloop invariant i142: i137;\nloop invariant i143: i138;\nloop invariant i144: i139;\nloop invariant i145: i140;\nloop invariant i146: i141;\nloop invariant i147: i142;\nloop invariant i148: i143;\nloop invariant i149: i144;\nloop invariant i150: i145;\nloop invariant i151: i146;\nloop invariant i152: i147;\nloop invariant i153: i148;\nloop invariant i154: i149;\nloop invariant i155: i150;\nloop invariant i156: i151;\nloop invariant i157: i152;\nloop invariant i158: i153;\nloop invariant i159: i154;\nloop invariant i160: i155;\nloop invariant i161: i156;\nloop invariant i162: i157;\nloop invariant i163: i158;\nloop invariant i164: 0 <= y < 100;\nloop invariant i165: (x % 2) == (y % 2) ==> (x % 2) == 0 ==> (x % 2) == 0;\nloop invariant i166: (x % 2) == (y % 2) ==> (x % 2) == 1 ==> (x % 2) == 1;\nloop invariant i167: x % 2 == 0 ==> x % 2 == 0;\nloop invariant i168: x % 2 == 1 ==> x % 2 == 1;\nloop invariant i169: x % 2 == 0 ==> y % 2 == 0;\nloop invariant i170: x % 2 == 1 ==> y % 2 == 1;\nloop invariant i171: x % 2 == 0 ==> (x % 2) == 0 ==> (x % 2) == 0;\nloop invariant i172: x % 2 == 1 ==> (x % 2) == 1 ==> (x % 2) == 1;\nloop invariant i173: 1 <= x;\nloop invariant i174: x >= y;\nloop invariant i175: x <= 99;\nloop invariant i176: y >= 0;\nloop invariant i177: y <= 99;\nloop invariant i178: 0 <= x <= 99; loop invariant 0 <= y; loop invariant (x % 2) == (y % 2); loop invariant ((x % 2) == 0) ==> (x % 2) == ((y + x - 1) % 2); loop invariant (y % 2) == (2 * (y / 2)); loop invariant (y % 2) == ((y / 2) * 2); loop invariant (x % 2) == ((x / 2) * 2); loop invariant (x % 2) == (2 * (x / 2)); loop invariant (x % 2) == ((x % 2) % 2); loop invariant (x % 2) == ((x % 2) % 2); loop invariant ((x % 2) == 0) ==> (x % 2) == (y % 2); loop invariant ((x % 2) == 1) ==> (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2);\nloop invariant i179: y % 2 == 0 ==> (x % 2) == 0;\nloop invariant i180: y % 2 != 0 ==> (x % 2) == 1;\nloop invariant i181: (y % 2) == 0 ==> x % 2 == 0;\nloop invariant i182: (y % 2) != 0 ==> x % 2 != 0;\nloop invariant i183: x <= y;\nloop invariant i184: y % 2 == 0 ==> x % 2 == 0;\nloop invariant i185: y % 2 != 0 ==> x % 2 != 0;\nloop invariant i186: y % 2 == 0 ==> (x >= 2 * (x / 2));\nloop invariant i187: y % 2 != 0 ==> (x >= (x / 2) + 1);\nloop invariant i188: y % 2 == 0 ==> (x <= 2 * (x / 2));\nloop invariant i189: y % 2 != 0 ==> (x <= (x / 2) + 1);\nloop invariant i190: y % 2 == 0 ==> (y >= 2 * (x / 2));\nloop invariant i191: y % 2 != 0 ==> (y >= (x / 2) + 1);\nloop invariant i192: y % 2 == 0 ==> (y <= 2 * (x / 2));\nloop invariant i193: y % 2 != 0 ==> (y <= (x / 2) + 1);\nloop invariant i194: y % 2 == 0 ==> (x / 2) * 2 == x;\nloop invariant i195: y % 2 != 0 ==> (x - 1) / 2 * 2 == x - 1;\nloop invariant i196: y % 2 == 0 ==> (y / 2) * 2 == y;\nloop invariant i197: y % 2 != 0 ==> (y - 1) / 2 * 2 == y - 1;\nloop invariant i198: y % 2 == 0 ==> (x / 2) == x / 2;\nloop invariant i199: y % 2 != 0 ==> (x - 1) / 2 == (x - 1) / 2;\nloop invariant i200: y % 2 == 0 ==> (y / 2) == y / 2;\nloop invariant i201: y % 2 != 0 ==> (y - 1) / 2 == (y - 1) / 2;\nloop invariant i202: y % 2 == 0 ==> (y % 2) == 0;\nloop invariant i203: y % 2 != 0 ==> (y % 2) == 1;\nloop invariant i204: y % 2 == 0 ==> (x / 2) == y;\nloop invariant i205: y % 2 != 0 ==> (x - 1) / 2 == y - 1;\nloop invariant i206: y % 2 == 0 ==> (y / 2) == x;\nloop invariant i207: y % 2 != 0 ==> (y - 1) / 2 == x - 1;\nloop invariant i208: y % 2 == 0 ==> (x / 2) == y / 2;\nloop invariant i209: y % 2 != 0 ==> (x - 1) / 2 == (y - 1) / 2;\nloop invariant i210: y % 2 == 0 ==> (y / 2) == x / 2;\nloop invariant i211: y % 2 != 0 ==> (y - 1) / 2 == (x - 1) / 2;\nloop invariant i212: 0 <= y <= 99;\nloop invariant i213: (x + y) % 2 == 0;\nloop invariant i214: (x + y) % 2 <= 99;\nloop invariant i215: 0 <= y <= 49999;\nloop invariant i216: (x % 2) == (y % 2) ==> (x % 2) == (y % 2);\nloop invariant i217: x >= y ==> x >= y;\nloop invariant i218: x <= y ==> x <= y;\nloop invariant i219: x < 99 ==> x < 99;\nloop invariant i220: x >= 0 ==> x >= 0;\nloop invariant i221: y >= 0 ==> y >= 0;\nloop invariant i222: y <= 49999 ==> y <= 49999;\nloop invariant i223: y % 2 == 0 ==> y % 2 == 0;\nloop invariant i224: y % 2 != 0 ==> y % 2 != 0;\nloop invariant i225: x % 2 == y % 2 ==> (y >= 0);\nloop invariant i226: x % 2 == y % 2 ==> (y <= 99);\nloop invariant i227: x % 2 == y % 2 ==> (x == 0 || x == 1 || x == 3 || x == 5 || x == 7 || x == 9 || x == 11 || x == 13 || x == 15 || x == 17 || x == 19 || x == 21 || x == 23 || x == 25 || x == 27 || x == 29 || x == 31 || x == 33 || x == 35 || x == 37 || x == 39 || x == 41 || x == 43 || x == 45 || x == 47 || x == 49 || x == 51 || x == 53 || x == 55 || x == 57 || x == 59 || x == 61 || x == 63 || x == 65 || x == 67 || x == 69 || x == 71 || x == 73 || x == 75 || x == 77 || x == 79 || x == 81 || x == 83 || x == 85 || x == 87 || x == 89 || x == 91 || x == 93 || x == 95 || x == 97 || x == 99);\nloop invariant i228: (y % 2 == 0) ==> (x % 2 == y % 2 ==> (x == 0 || x == 2 || x == 4 || x == 6 || x == 8 || x == 10 || x == 12 || x == 14 || x == 16 || x == 18 || x == 20 || x == 22 || x == 24 || x == 26 || x == 28 || x == 30 || x == 32 || x == 34 || x == 36 || x == 38 || x == 40 || x == 42 || x == 44 || x == 46 || x == 48 || x == 50 || x == 52 || x == 54 || x == 56 || x == 58 || x == 60 || x == 62 || x == 64 || x == 66 || x == 68 || x == 70 || x == 72 || x == 74 || x == 76 || x == 78 || x == 80 || x == 82 || x == 84 || x == 86 || x == 88 || x == 90 || x == 92 || x == 94 || x == 96 || x == 98));\nloop invariant i229: (y % 2 == 1) ==> (x % 2 == y % 2 ==> (x == 1 || x == 3 || x == 5 || x == 7 || x == 9 || x == 11 || x == 13 || x == 15 || x == 17 || x == 19 || x == 21 || x == 23 || x == 25 || x == 27 || x == 29 || x == 31 || x == 33 || x == 35 || x == 37 || x == 39 || x == 41 || x == 43 || x == 45 || x == 47 || x == 49 || x == 51 || x == 53 || x == 55 || x == 57 || x == 59 || x == 61 || x == 63 || x == 65 || x == 67 || x == 69 || x == 71 || x == 73 || x == 75 || x == 77 || x == 79 || x == 81 || x == 83 || x == 85 || x == 87 || x == 89 || x == 91 || x == 93 || x == 95 || x == 97 || x == 99));\nloop invariant i230: if (y % 2 == 0) then x % 2 == 0 else x % 2 == 1;\nloop invariant i231: x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0;\nloop invariant i232: x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1;\nloop invariant i233: 99 <= x <= 99;\nloop invariant i234: x % 2 == (y % 2);\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
        "combined_annotation_num_solver_calls": 165,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\nloop invariant i1: y % 2 == y % 2;\nloop invariant i2: x % 2 == x % 2;\n\nloop invariant i4: 0 <= x <= 99;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i165: (x % 2) == (y % 2) ==> (x % 2) == 0 ==> (x % 2) == 0;\nloop invariant i166: (x % 2) == (y % 2) ==> (x % 2) == 1 ==> (x % 2) == 1;\nloop invariant i167: x % 2 == 0 ==> x % 2 == 0;\nloop invariant i168: x % 2 == 1 ==> x % 2 == 1;\n\nloop invariant i170: x % 2 == 1 ==> y % 2 == 1;\nloop invariant i171: x % 2 == 0 ==> (x % 2) == 0 ==> (x % 2) == 0;\nloop invariant i172: x % 2 == 1 ==> (x % 2) == 1 ==> (x % 2) == 1;\n\n\nloop invariant i175: x <= 99;\nloop invariant i176: y >= 0;\n\nloop invariant i178: 0 <= x <= 99; loop invariant 0 <= y; loop invariant (x % 2) == (y % 2); loop invariant ((x % 2) == 0) ==> (x % 2) == ((y + x - 1) % 2); loop invariant (y % 2) == (2 * (y / 2)); loop invariant (y % 2) == ((y / 2) * 2); loop invariant (x % 2) == ((x / 2) * 2); loop invariant (x % 2) == (2 * (x / 2)); loop invariant (x % 2) == ((x % 2) % 2); loop invariant (x % 2) == ((x % 2) % 2); loop invariant ((x % 2) == 0) ==> (x % 2) == (y % 2); loop invariant ((x % 2) == 1) ==> (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2);\nloop invariant i179: y % 2 == 0 ==> (x % 2) == 0;\nloop invariant i180: y % 2 != 0 ==> (x % 2) == 1;\nloop invariant i181: (y % 2) == 0 ==> x % 2 == 0;\nloop invariant i182: (y % 2) != 0 ==> x % 2 != 0;\nloop invariant i183: x <= y;\nloop invariant i184: y % 2 == 0 ==> x % 2 == 0;\nloop invariant i185: y % 2 != 0 ==> x % 2 != 0;\nloop invariant i186: y % 2 == 0 ==> (x >= 2 * (x / 2));\nloop invariant i187: y % 2 != 0 ==> (x >= (x / 2) + 1);\nloop invariant i188: y % 2 == 0 ==> (x <= 2 * (x / 2));\nloop invariant i189: y % 2 != 0 ==> (x <= (x / 2) + 1);\nloop invariant i190: y % 2 == 0 ==> (y >= 2 * (x / 2));\nloop invariant i191: y % 2 != 0 ==> (y >= (x / 2) + 1);\nloop invariant i192: y % 2 == 0 ==> (y <= 2 * (x / 2));\nloop invariant i193: y % 2 != 0 ==> (y <= (x / 2) + 1);\nloop invariant i194: y % 2 == 0 ==> (x / 2) * 2 == x;\nloop invariant i195: y % 2 != 0 ==> (x - 1) / 2 * 2 == x - 1;\nloop invariant i196: y % 2 == 0 ==> (y / 2) * 2 == y;\nloop invariant i197: y % 2 != 0 ==> (y - 1) / 2 * 2 == y - 1;\nloop invariant i198: y % 2 == 0 ==> (x / 2) == x / 2;\nloop invariant i199: y % 2 != 0 ==> (x - 1) / 2 == (x - 1) / 2;\nloop invariant i200: y % 2 == 0 ==> (y / 2) == y / 2;\nloop invariant i201: y % 2 != 0 ==> (y - 1) / 2 == (y - 1) / 2;\nloop invariant i202: y % 2 == 0 ==> (y % 2) == 0;\nloop invariant i203: y % 2 != 0 ==> (y % 2) == 1;\nloop invariant i204: y % 2 == 0 ==> (x / 2) == y;\nloop invariant i205: y % 2 != 0 ==> (x - 1) / 2 == y - 1;\nloop invariant i206: y % 2 == 0 ==> (y / 2) == x;\nloop invariant i207: y % 2 != 0 ==> (y - 1) / 2 == x - 1;\nloop invariant i208: y % 2 == 0 ==> (x / 2) == y / 2;\nloop invariant i209: y % 2 != 0 ==> (x - 1) / 2 == (y - 1) / 2;\nloop invariant i210: y % 2 == 0 ==> (y / 2) == x / 2;\nloop invariant i211: y % 2 != 0 ==> (y - 1) / 2 == (x - 1) / 2;\nloop invariant i212: 0 <= y <= 99;\nloop invariant i213: (x + y) % 2 == 0;\nloop invariant i214: (x + y) % 2 <= 99;\nloop invariant i215: 0 <= y <= 49999;\nloop invariant i216: (x % 2) == (y % 2) ==> (x % 2) == (y % 2);\nloop invariant i217: x >= y ==> x >= y;\nloop invariant i218: x <= y ==> x <= y;\nloop invariant i219: x < 99 ==> x < 99;\nloop invariant i220: x >= 0 ==> x >= 0;\nloop invariant i221: y >= 0 ==> y >= 0;\nloop invariant i222: y <= 49999 ==> y <= 49999;\nloop invariant i223: y % 2 == 0 ==> y % 2 == 0;\nloop invariant i224: y % 2 != 0 ==> y % 2 != 0;\nloop invariant i225: x % 2 == y % 2 ==> (y >= 0);\nloop invariant i226: x % 2 == y % 2 ==> (y <= 99);\nloop invariant i227: x % 2 == y % 2 ==> (x == 0 || x == 1 || x == 3 || x == 5 || x == 7 || x == 9 || x == 11 || x == 13 || x == 15 || x == 17 || x == 19 || x == 21 || x == 23 || x == 25 || x == 27 || x == 29 || x == 31 || x == 33 || x == 35 || x == 37 || x == 39 || x == 41 || x == 43 || x == 45 || x == 47 || x == 49 || x == 51 || x == 53 || x == 55 || x == 57 || x == 59 || x == 61 || x == 63 || x == 65 || x == 67 || x == 69 || x == 71 || x == 73 || x == 75 || x == 77 || x == 79 || x == 81 || x == 83 || x == 85 || x == 87 || x == 89 || x == 91 || x == 93 || x == 95 || x == 97 || x == 99);\nloop invariant i228: (y % 2 == 0) ==> (x % 2 == y % 2 ==> (x == 0 || x == 2 || x == 4 || x == 6 || x == 8 || x == 10 || x == 12 || x == 14 || x == 16 || x == 18 || x == 20 || x == 22 || x == 24 || x == 26 || x == 28 || x == 30 || x == 32 || x == 34 || x == 36 || x == 38 || x == 40 || x == 42 || x == 44 || x == 46 || x == 48 || x == 50 || x == 52 || x == 54 || x == 56 || x == 58 || x == 60 || x == 62 || x == 64 || x == 66 || x == 68 || x == 70 || x == 72 || x == 74 || x == 76 || x == 78 || x == 80 || x == 82 || x == 84 || x == 86 || x == 88 || x == 90 || x == 92 || x == 94 || x == 96 || x == 98));\nloop invariant i229: (y % 2 == 1) ==> (x % 2 == y % 2 ==> (x == 1 || x == 3 || x == 5 || x == 7 || x == 9 || x == 11 || x == 13 || x == 15 || x == 17 || x == 19 || x == 21 || x == 23 || x == 25 || x == 27 || x == 29 || x == 31 || x == 33 || x == 35 || x == 37 || x == 39 || x == 41 || x == 43 || x == 45 || x == 47 || x == 49 || x == 51 || x == 53 || x == 55 || x == 57 || x == 59 || x == 61 || x == 63 || x == 65 || x == 67 || x == 69 || x == 71 || x == 73 || x == 75 || x == 77 || x == 79 || x == 81 || x == 83 || x == 85 || x == 87 || x == 89 || x == 91 || x == 93 || x == 95 || x == 97 || x == 99));\n\nloop invariant i231: x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0;\nloop invariant i232: x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1;\nloop invariant i233: 99 <= x <= 99;\nloop invariant i234: x % 2 == (y % 2);\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [],
        "failure": [
            "../dataset/loop_invariants/code2inv/85.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/ex2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/42.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/diamond_1-1.c"
        ],
        "skipped": [],
        "total": 4,
        "success_count": 0,
        "failure_count": 4,
        "success_rate": 0.0
    }
}