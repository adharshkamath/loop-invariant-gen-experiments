{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop17_VeriMAP_true.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n\tint N = unknown_uint();\n  int i, j, k;\n\n  i = 0;\n  j = 0;\n  k = 0;\n\n  assume( N > 1 );\n\n  while (i < N) {\n    if (i<1)\n      k = 1;\n    else\n      k = 0;\n    j++;\n    i++;\n  }\n\n  {;\n//@ assert(!( k>0 ));\n}\n\n  return 0;\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= i <= N;\nloop invariant 0 <= j <= N;\nloop invariant 0 <= k <= 1;\nloop invariant !(i < N) ==> (k == 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= N;\nloop invariant 0 <= j <= N;\nloop invariant 0 <= k <= 1;\nloop invariant i + j == N;\nloop invariant i == k;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= N;\nloop invariant j == i;\nloop invariant k == (i == 1 ? 1 : 0);\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= N;\nloop invariant 0 <= j <= i;\nloop invariant j == (i * (i - 1)) / 2;\nloop invariant i == N;\nloop invariant k == (i < 1);\nloop invariant 1 <= i <= N;\nloop invariant 0 <= j <= i;\nloop invariant j == (i * (i - 1)) / 2;\nloop invariant i == N;\nloop invariant k == (i < 1);\nloop invariant !(k > 0) ==> (i < 1);\nloop invariant (i >= 1) ==> !(k > 0);\nloop invariant 1 <= i <= N;\nloop invariant 0 <= j <= i;\nloop invariant j == (i * (i - 1)) / 2;\nloop invariant i == N;\nloop invariant k == (i < 1);\nloop invariant (i >= 1) ==> !(k > 0);\nloop invariant !(k > 0) ==> (i < 1);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= N;\nloop invariant 0 <= j <= N;\nloop invariant 0 <= k <= 1;\nloop invariant i + j == N;\nloop invariant i == j;\nloop invariant k == 0;\nloop invariant k == 0;\n*/\n```",
            "```\n/*@\nloop invariant i >= 0;\nloop invariant i <= N;\nloop invariant j >= 0;\nloop invariant j <= N;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant (k>0) ==> (i>0);\nloop invariant (k==0) ==> (i==0);\nloop invariant j>=i;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= N;\nloop invariant 0 <= j <= N;\nloop invariant 0 <= k <= 1;\nloop invariant i == j;\nloop invariant k == (i > 0 ? 0 : 1);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= N;\nloop invariant 0 <= j <= N;\nloop invariant 0 <= k <= 1;\nloop invariant i < N ==> k == 0;\nloop invariant i < N ==> j == i;\nloop invariant i < N ==> k == 0 ==> j == i;\nloop invariant i < N ==> k > 0 ==> j == i+1;\nloop invariant i == N ==> k == 0;\nloop invariant i == N ==> j == N;\nloop invariant i == N ==> k == 0 ==> j == N;\nloop invariant i == N ==> k > 0 ==> j == N+1;\nloop invariant 0 <= i <= N;\nloop invariant 0 <= j <= N;\nloop invariant 0 <= k <= 1;\nloop invariant i < N ==> k == 0;\nloop invariant i < N ==> j == i;\nloop invariant i < N ==> k == 0 ==> j == i;\nloop invariant i < N ==> k > 0 ==> j == i+1;\nloop invariant i == N ==> k == 0;\nloop invariant i == N ==> j == N;\nloop invariant i == N ==> k == 0 ==> j == N;\nloop invariant i == N ==> k > 0 ==> j == N+1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= N;\nloop invariant 0 <= j <= N;\nloop invariant 0 <= k <= 1;\nloop invariant i <= N ==> k == 0;\nloop invariant i == N ==> k == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= N;\n*/\n```",
            "```\n/*@\nloop invariant i is in the range [0, N-1];\nloop invariant j is in the range [1, N];\nloop invariant k is either 0 or 1;\nloop invariant k is 1 if i < 1, otherwise k is 0;\nloop invariant j is always increasing by 1 for each iteration of the loop;\nloop invariant i is always increasing by 1 for each iteration of the loop;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= k <= 1;\nloop invariant 0 <= i <= N;\nloop invariant 0 <= j <= N;\nloop invariant i + j = N;\nloop invariant i + k = 1;\nloop invariant j + k = N;\nloop invariant i >= k;\nloop invariant j >= k;\nloop invariant i == 1 ==> k == 1;\nloop invariant i < 1 ==> k == 0;\nloop invariant j == i + 1;\nloop invariant k == 1;\nloop invariant k == 0;\nloop invariant i == N;\nloop invariant j == N;\nloop invariant k == 0;\nloop invariant k == 1;\nloop invariant i >= k;\nloop invariant j >= k;\nloop invariant i + j = N;\nloop invariant i == 1;\nloop invariant j == 1;\nloop invariant k == 1;\nloop invariant i == 0;\nloop invariant j == 0;\nloop invariant k == 0;\nloop invariant i == N;\nloop invariant j == N;\nloop invariant k == 0;\nloop invariant k == 1;\nloop invariant i >= k;\nloop invariant j >= k;\nloop invariant i + j = N;\nloop invariant i == 1;\nloop invariant j == 1;\nloop invariant k == 1;\nloop invariant i == 0;\nloop invariant j == 0;\nloop invariant k == 0;\nloop invariant i == N;\nloop invariant j == N;\nloop invariant k == 0;\nloop invariant k == 1;\nloop invariant i >= k;\nloop invariant j >= k;\nloop invariant i + j = N;\nloop invariant i == 1;\nloop invariant j == 1;\nloop invariant k == 1;\nloop invariant i == 0;\nloop invariant j == 0;\nloop invariant k == 0;\nloop invariant i == N;\nloop invariant j == N;\nloop invariant k == 0;\nloop invariant k == 1;\nloop invariant i >= k;\nloop invariant j >= k;\nloop invariant i + j = N;\nloop invariant i == 1;\nloop invariant j == 1;\nloop invariant k == 1;\nloop invariant i == 0;\nloop invariant j == 0;\nloop invariant k == 0;\nloop invariant i == N;\nloop invariant j == N;\nloop invariant k == 0;\nloop invariant k == 1;\nloop invariant i >= k;\nloop invariant j >= k;\nloop invariant i + j = N;\nloop invariant i == 1;\nloop invariant j == 1;\nloop invariant k == 1;\nloop invariant i == 0;\nloop invariant j == 0;\nloop invariant k == 0;\nloop invariant i == N;\nloop invariant j == N;\nloop invariant k == 0;\nloop invariant k == 1;\nloop invariant i >= k;\nloop invariant j >= k;\nloop invariant i + j = N;\nloop invariant i == 1;\nloop invariant j == 1;\nloop invariant k == 1;\nloop invariant i == 0;\nloop invariant j == 0;\nloop invariant k == 0;\nloop invariant i == N;\nloop invariant j == N;\nloop invariant k == 0;\nloop invariant k == 1;\nloop invariant i >= k;\nloop invariant j >= k;\nloop invariant i + j = N;\nloop invariant i == 1;\nloop invariant j == 1;\nloop invariant k == 1;\nloop invariant i == 0;\nloop invariant j == 0;\nloop invariant k == 0;\nloop invariant i == N;\nloop invariant j == N;\nloop invariant k == 0;\nloop invariant k == 1;\nloop invariant i >= k;\nloop invariant j >= k;\nloop invariant i + j = N;\nloop invariant i == 1;\nloop invariant j == 1;\nloop invariant k == 1;\nloop invariant i == 0;\nloop invariant j == 0;\nloop invariant k == 0;\nloop invariant i == N;\nloop invariant j == N;\nloop invariant k == 0;\nloop invariant k == 1;\nloop invariant i >= k;\nloop invariant j >= k;\nloop invariant i + j = N;\nloop invariant i == 1;\nloop invariant j == 1;\nloop invariant k == 1;\nloop invariant i == 0;\nloop invariant j == 0;\nloop invariant k == 0;\nloop invariant i == N;\nloop invariant j == N;\nloop invariant k == 0;\nloop invariant k == 1;\nloop invariant i >= k;\nloop invariant j >= k;\nloop invariant i + j = N;\nloop invariant i == 1;\nloop invariant j == 1;\nloop invariant k == 1;\nloop invariant i == 0;\nloop invariant j == 0;\nloop invariant k == 0;\nloop invariant i == N;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= N;\nloop invariant 0 <= j <= N;\nloop invariant 0 <= k <= 1;\nloop invariant (k == 0) ==> (j == i);\nloop invariant (k == 1) ==> (j == i - 1);\nloop invariant !(N > 1) ==> (i == N && j == N && k == 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= N;\nloop invariant 0 <= j <= N;\nloop invariant 0 <= k <= 1;\nloop invariant (i < N) ==> (k == 0);\nloop invariant (i >= N) ==> (k == 1);\n*/\n```",
            "```\n/*@\nloop invariant i > 0;\nloop invariant i < N;\nloop invariant i = j;\nloop invariant i = k;\nloop invariant j > 0;\nloop invariant j <= i;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant k == 0 || k == 1;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= N;\nloop invariant 0 <= j <= N;\nloop invariant 0 <= k <= 1;\nloop invariant !(i < N) ==> (k == 0);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= N is partially proven to be inductive.\nloop invariant 0 <= j <= N is established but not preserved.\nloop invariant 0 <= k <= 1 is partially proven to be inductive.\nloop invariant !(i < N) ==> (k == 0) is established but not preserved.\nAssertion !(k > 0): Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n\tint N = unknown_uint();\n  int i, j, k;\n\n  i = 0;\n  j = 0;\n  k = 0;\n\n  assume( N > 1 );\n\n  /*@\nloop invariant i1: 0 <= i <= N;\n\nloop invariant i3: 0 <= k <= 1;\n\n*/\nwhile (i < N) {\n    if (i<1)\n      k = 1;\n    else\n      k = 0;\n    j++;\n    i++;\n  }\n\n  {;\n//@ assert(!( k>0 ));\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= N;\nloop invariant 0 <= j <= N;\nloop invariant 0 <= k <= 1;\nloop invariant i + j == N;\nloop invariant i == k;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= N is partially proven to be inductive.\nloop invariant 0 <= j <= N is partially proven to be inductive.\nloop invariant 0 <= k <= 1 is partially proven to be inductive.\nloop invariant i + j == N is preserved but not established.\nloop invariant i == k is partially proven to be inductive.\nAssertion !(k > 0): Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n\tint N = unknown_uint();\n  int i, j, k;\n\n  i = 0;\n  j = 0;\n  k = 0;\n\n  assume( N > 1 );\n\n  /*@\nloop invariant i1: 0 <= i <= N;\n\nloop invariant i3: 0 <= k <= 1;\n\n\n*/\nwhile (i < N) {\n    if (i<1)\n      k = 1;\n    else\n      k = 0;\n    j++;\n    i++;\n  }\n\n  {;\n//@ assert(!( k>0 ));\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= N;\nloop invariant j == i;\nloop invariant k == (i == 1 ? 1 : 0);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= N is inductive.\nloop invariant j == i is inductive.\nloop invariant k == (i == 1 ? 1 : 0) is inductive.\nAssertion !(k > 0): Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n\tint N = unknown_uint();\n  int i, j, k;\n\n  i = 0;\n  j = 0;\n  k = 0;\n\n  assume( N > 1 );\n\n  /*@\nloop invariant i1: 0 <= i <= N;\nloop invariant i2: j == i;\nloop invariant i3: k == (i == 1 ? 1 : 0);\n*/\nwhile (i < N) {\n    if (i<1)\n      k = 1;\n    else\n      k = 0;\n    j++;\n    i++;\n  }\n\n  {;\n//@ assert(!( k>0 ));\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 8,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= N;\nloop invariant 0 <= j <= i;\nloop invariant j == (i * (i - 1)) / 2;\nloop invariant i == N;\nloop invariant k == (i < 1);\nloop invariant 1 <= i <= N;\nloop invariant 0 <= j <= i;\nloop invariant j == (i * (i - 1)) / 2;\nloop invariant i == N;\nloop invariant k == (i < 1);\nloop invariant !(k > 0) ==> (i < 1);\nloop invariant (i >= 1) ==> !(k > 0);\nloop invariant 1 <= i <= N;\nloop invariant 0 <= j <= i;\nloop invariant j == (i * (i - 1)) / 2;\nloop invariant i == N;\nloop invariant k == (i < 1);\nloop invariant (i >= 1) ==> !(k > 0);\nloop invariant !(k > 0) ==> (i < 1);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= i <= N is preserved but not established.\nloop invariant 0 <= j <= i is partially proven to be inductive.\nloop invariant j == (i * (i - 1)) / 2 is partially proven to be inductive.\nloop invariant i == N is partially proven to be inductive.\nloop invariant k == (i < 1) is partially proven to be inductive.\nloop invariant !(k > 0) ==> (i < 1) is partially proven to be inductive.\nloop invariant (i >= 1) ==> !(k > 0) is partially proven to be inductive.\nAssertion !(k > 0): Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n\tint N = unknown_uint();\n  int i, j, k;\n\n  i = 0;\n  j = 0;\n  k = 0;\n\n  assume( N > 1 );\n\n  /*@\n\nloop invariant i2: 0 <= j <= i;\n\n\n\n\n\n*/\nwhile (i < N) {\n    if (i<1)\n      k = 1;\n    else\n      k = 0;\n    j++;\n    i++;\n  }\n\n  {;\n//@ assert(!( k>0 ));\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= N;\nloop invariant 0 <= j <= N;\nloop invariant 0 <= k <= 1;\nloop invariant i + j == N;\nloop invariant i == j;\nloop invariant k == 0;\nloop invariant k == 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= N is partially proven to be inductive.\nloop invariant 0 <= j <= N is partially proven to be inductive.\nloop invariant 0 <= k <= 1 is partially proven to be inductive.\nloop invariant i + j == N is preserved but not established.\nloop invariant i == j is partially proven to be inductive.\nloop invariant k == 0 is partially proven to be inductive.\nAssertion !(k > 0): Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n\tint N = unknown_uint();\n  int i, j, k;\n\n  i = 0;\n  j = 0;\n  k = 0;\n\n  assume( N > 1 );\n\n  /*@\nloop invariant i1: 0 <= i <= N;\nloop invariant i2: 0 <= j <= N;\nloop invariant i3: 0 <= k <= 1;\n\nloop invariant i5: i == j;\n\n*/\nwhile (i < N) {\n    if (i<1)\n      k = 1;\n    else\n      k = 0;\n    j++;\n    i++;\n  }\n\n  {;\n//@ assert(!( k>0 ));\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant i >= 0;\nloop invariant i <= N;\nloop invariant j >= 0;\nloop invariant j <= N;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant (k>0) ==> (i>0);\nloop invariant (k==0) ==> (i==0);\nloop invariant j>=i;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant i >= 0 is partially proven to be inductive.\nloop invariant i <= N is partially proven to be inductive.\nloop invariant j >= 0 is partially proven to be inductive.\nloop invariant j <= N is established but not preserved.\nloop invariant k >= 0 is partially proven to be inductive.\nloop invariant k <= 1 is partially proven to be inductive.\nloop invariant (k>0) ==> (i>0) is partially proven to be inductive.\nloop invariant (k==0) ==> (i==0) is established but not preserved.\nloop invariant j>=i is partially proven to be inductive.\nAssertion !(k > 0): Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n\tint N = unknown_uint();\n  int i, j, k;\n\n  i = 0;\n  j = 0;\n  k = 0;\n\n  assume( N > 1 );\n\n  /*@\nloop invariant i1: i >= 0;\nloop invariant i2: i <= N;\nloop invariant i3: j >= 0;\n\nloop invariant i5: k >= 0;\nloop invariant i6: k <= 1;\nloop invariant i7: (k>0) ==> (i>0);\n\nloop invariant i9: j>=i;\n*/\nwhile (i < N) {\n    if (i<1)\n      k = 1;\n    else\n      k = 0;\n    j++;\n    i++;\n  }\n\n  {;\n//@ assert(!( k>0 ));\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= N;\nloop invariant 0 <= j <= N;\nloop invariant 0 <= k <= 1;\nloop invariant i == j;\nloop invariant k == (i > 0 ? 0 : 1);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= N is partially proven to be inductive.\nloop invariant 0 <= j <= N is partially proven to be inductive.\nloop invariant 0 <= k <= 1 is partially proven to be inductive.\nloop invariant i == j is partially proven to be inductive.\nloop invariant k == (i > 0 ? 0 : 1) is preserved but not established.\nAssertion !(k > 0): Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n\tint N = unknown_uint();\n  int i, j, k;\n\n  i = 0;\n  j = 0;\n  k = 0;\n\n  assume( N > 1 );\n\n  /*@\nloop invariant i1: 0 <= i <= N;\nloop invariant i2: 0 <= j <= N;\nloop invariant i3: 0 <= k <= 1;\nloop invariant i4: i == j;\n\n*/\nwhile (i < N) {\n    if (i<1)\n      k = 1;\n    else\n      k = 0;\n    j++;\n    i++;\n  }\n\n  {;\n//@ assert(!( k>0 ));\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= N;\nloop invariant 0 <= j <= N;\nloop invariant 0 <= k <= 1;\nloop invariant i < N ==> k == 0;\nloop invariant i < N ==> j == i;\nloop invariant i < N ==> k == 0 ==> j == i;\nloop invariant i < N ==> k > 0 ==> j == i+1;\nloop invariant i == N ==> k == 0;\nloop invariant i == N ==> j == N;\nloop invariant i == N ==> k == 0 ==> j == N;\nloop invariant i == N ==> k > 0 ==> j == N+1;\nloop invariant 0 <= i <= N;\nloop invariant 0 <= j <= N;\nloop invariant 0 <= k <= 1;\nloop invariant i < N ==> k == 0;\nloop invariant i < N ==> j == i;\nloop invariant i < N ==> k == 0 ==> j == i;\nloop invariant i < N ==> k > 0 ==> j == i+1;\nloop invariant i == N ==> k == 0;\nloop invariant i == N ==> j == N;\nloop invariant i == N ==> k == 0 ==> j == N;\nloop invariant i == N ==> k > 0 ==> j == N+1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= N is partially proven to be inductive.\nloop invariant 0 <= j <= N is partially proven to be inductive.\nloop invariant 0 <= k <= 1 is partially proven to be inductive.\nloop invariant i < N ==> k == 0 is established but not preserved.\nloop invariant i < N ==> j == i is partially proven to be inductive.\nloop invariant i < N ==> k == 0 ==> j == i is partially proven to be inductive.\nloop invariant i < N ==> k > 0 ==> j == i+1 is partially proven to be inductive.\nloop invariant i == N ==> k == 0 is established but not preserved.\nloop invariant i == N ==> j == N is partially proven to be inductive.\nloop invariant i == N ==> k == 0 ==> j == N is partially proven to be inductive.\nloop invariant i == N ==> k > 0 ==> j == N+1 is partially proven to be inductive.\nAssertion !(k > 0): Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n\tint N = unknown_uint();\n  int i, j, k;\n\n  i = 0;\n  j = 0;\n  k = 0;\n\n  assume( N > 1 );\n\n  /*@\nloop invariant i1: 0 <= i <= N;\nloop invariant i2: 0 <= j <= N;\nloop invariant i3: 0 <= k <= 1;\n\nloop invariant i5: i < N ==> j == i;\nloop invariant i6: i < N ==> k == 0 ==> j == i;\n\n\nloop invariant i9: i == N ==> j == N;\nloop invariant i10: i == N ==> k == 0 ==> j == N;\n\n*/\nwhile (i < N) {\n    if (i<1)\n      k = 1;\n    else\n      k = 0;\n    j++;\n    i++;\n  }\n\n  {;\n//@ assert(!( k>0 ));\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= N;\nloop invariant 0 <= j <= N;\nloop invariant 0 <= k <= 1;\nloop invariant i <= N ==> k == 0;\nloop invariant i == N ==> k == 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= N is partially proven to be inductive.\nloop invariant 0 <= j <= N is established but not preserved.\nloop invariant 0 <= k <= 1 is partially proven to be inductive.\nloop invariant i <= N ==> k == 0 is established but not preserved.\nloop invariant i == N ==> k == 0 is partially proven to be inductive.\nAssertion !(k > 0): Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n\tint N = unknown_uint();\n  int i, j, k;\n\n  i = 0;\n  j = 0;\n  k = 0;\n\n  assume( N > 1 );\n\n  /*@\nloop invariant i1: 0 <= i <= N;\n\nloop invariant i3: 0 <= k <= 1;\n\n\n*/\nwhile (i < N) {\n    if (i<1)\n      k = 1;\n    else\n      k = 0;\n    j++;\n    i++;\n  }\n\n  {;\n//@ assert(!( k>0 ));\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= N;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= N is inductive.\nAssertion !(k > 0): Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n\tint N = unknown_uint();\n  int i, j, k;\n\n  i = 0;\n  j = 0;\n  k = 0;\n\n  assume( N > 1 );\n\n  /*@\nloop invariant i1: 0 <= i <= N;\n*/\nwhile (i < N) {\n    if (i<1)\n      k = 1;\n    else\n      k = 0;\n    j++;\n    i++;\n  }\n\n  {;\n//@ assert(!( k>0 ));\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant i is in the range [0, N-1];\nloop invariant j is in the range [1, N];\nloop invariant k is either 0 or 1;\nloop invariant k is 1 if i < 1, otherwise k is 0;\nloop invariant j is always increasing by 1 for each iteration of the loop;\nloop invariant i is always increasing by 1 for each iteration of the loop;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 24: unexpected token 'is'",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n\tint N = unknown_uint();\n  int i, j, k;\n\n  i = 0;\n  j = 0;\n  k = 0;\n\n  assume( N > 1 );\n\n  /*@\n\n\n\n\n\n\n*/\nwhile (i < N) {\n    if (i<1)\n      k = 1;\n    else\n      k = 0;\n    j++;\n    i++;\n  }\n\n  {;\n//@ assert(!( k>0 ));\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 15,
                "annotations": "```\n/*@\nloop invariant 0 <= k <= 1;\nloop invariant 0 <= i <= N;\nloop invariant 0 <= j <= N;\nloop invariant i + j = N;\nloop invariant i + k = 1;\nloop invariant j + k = N;\nloop invariant i >= k;\nloop invariant j >= k;\nloop invariant i == 1 ==> k == 1;\nloop invariant i < 1 ==> k == 0;\nloop invariant j == i + 1;\nloop invariant k == 1;\nloop invariant k == 0;\nloop invariant i == N;\nloop invariant j == N;\nloop invariant k == 0;\nloop invariant k == 1;\nloop invariant i >= k;\nloop invariant j >= k;\nloop invariant i + j = N;\nloop invariant i == 1;\nloop invariant j == 1;\nloop invariant k == 1;\nloop invariant i == 0;\nloop invariant j == 0;\nloop invariant k == 0;\nloop invariant i == N;\nloop invariant j == N;\nloop invariant k == 0;\nloop invariant k == 1;\nloop invariant i >= k;\nloop invariant j >= k;\nloop invariant i + j = N;\nloop invariant i == 1;\nloop invariant j == 1;\nloop invariant k == 1;\nloop invariant i == 0;\nloop invariant j == 0;\nloop invariant k == 0;\nloop invariant i == N;\nloop invariant j == N;\nloop invariant k == 0;\nloop invariant k == 1;\nloop invariant i >= k;\nloop invariant j >= k;\nloop invariant i + j = N;\nloop invariant i == 1;\nloop invariant j == 1;\nloop invariant k == 1;\nloop invariant i == 0;\nloop invariant j == 0;\nloop invariant k == 0;\nloop invariant i == N;\nloop invariant j == N;\nloop invariant k == 0;\nloop invariant k == 1;\nloop invariant i >= k;\nloop invariant j >= k;\nloop invariant i + j = N;\nloop invariant i == 1;\nloop invariant j == 1;\nloop invariant k == 1;\nloop invariant i == 0;\nloop invariant j == 0;\nloop invariant k == 0;\nloop invariant i == N;\nloop invariant j == N;\nloop invariant k == 0;\nloop invariant k == 1;\nloop invariant i >= k;\nloop invariant j >= k;\nloop invariant i + j = N;\nloop invariant i == 1;\nloop invariant j == 1;\nloop invariant k == 1;\nloop invariant i == 0;\nloop invariant j == 0;\nloop invariant k == 0;\nloop invariant i == N;\nloop invariant j == N;\nloop invariant k == 0;\nloop invariant k == 1;\nloop invariant i >= k;\nloop invariant j >= k;\nloop invariant i + j = N;\nloop invariant i == 1;\nloop invariant j == 1;\nloop invariant k == 1;\nloop invariant i == 0;\nloop invariant j == 0;\nloop invariant k == 0;\nloop invariant i == N;\nloop invariant j == N;\nloop invariant k == 0;\nloop invariant k == 1;\nloop invariant i >= k;\nloop invariant j >= k;\nloop invariant i + j = N;\nloop invariant i == 1;\nloop invariant j == 1;\nloop invariant k == 1;\nloop invariant i == 0;\nloop invariant j == 0;\nloop invariant k == 0;\nloop invariant i == N;\nloop invariant j == N;\nloop invariant k == 0;\nloop invariant k == 1;\nloop invariant i >= k;\nloop invariant j >= k;\nloop invariant i + j = N;\nloop invariant i == 1;\nloop invariant j == 1;\nloop invariant k == 1;\nloop invariant i == 0;\nloop invariant j == 0;\nloop invariant k == 0;\nloop invariant i == N;\nloop invariant j == N;\nloop invariant k == 0;\nloop invariant k == 1;\nloop invariant i >= k;\nloop invariant j >= k;\nloop invariant i + j = N;\nloop invariant i == 1;\nloop invariant j == 1;\nloop invariant k == 1;\nloop invariant i == 0;\nloop invariant j == 0;\nloop invariant k == 0;\nloop invariant i == N;\nloop invariant j == N;\nloop invariant k == 0;\nloop invariant k == 1;\nloop invariant i >= k;\nloop invariant j >= k;\nloop invariant i + j = N;\nloop invariant i == 1;\nloop invariant j == 1;\nloop invariant k == 1;\nloop invariant i == 0;\nloop invariant j == 0;\nloop invariant k == 0;\nloop invariant i == N;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 27: Assignment operators not allowed in annotations.",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n\tint N = unknown_uint();\n  int i, j, k;\n\n  i = 0;\n  j = 0;\n  k = 0;\n\n  assume( N > 1 );\n\n  /*@\nloop invariant i1: 0 <= k <= 1;\nloop invariant i2: 0 <= i <= N;\n\n\n\n\nloop invariant i7: i >= k;\nloop invariant i8: j >= k;\nloop invariant i9: i == 1 ==> k == 1;\nloop invariant i10: i < 1 ==> k == 0;\n\n\n\n\n\n\n\n\n\n*/\nwhile (i < N) {\n    if (i<1)\n      k = 1;\n    else\n      k = 0;\n    j++;\n    i++;\n  }\n\n  {;\n//@ assert(!( k>0 ));\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= N;\nloop invariant 0 <= j <= N;\nloop invariant 0 <= k <= 1;\nloop invariant (k == 0) ==> (j == i);\nloop invariant (k == 1) ==> (j == i - 1);\nloop invariant !(N > 1) ==> (i == N && j == N && k == 0);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= N is partially proven to be inductive.\nloop invariant 0 <= j <= N is partially proven to be inductive.\nloop invariant 0 <= k <= 1 is partially proven to be inductive.\nloop invariant (k == 0) ==> (j == i) is established but not preserved.\nloop invariant (k == 1) ==> (j == i - 1) is established but not preserved.\nloop invariant !(N > 1) ==> (i == N && j == N && k == 0) is partially proven to be inductive.\nAssertion !(k > 0): Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n\tint N = unknown_uint();\n  int i, j, k;\n\n  i = 0;\n  j = 0;\n  k = 0;\n\n  assume( N > 1 );\n\n  /*@\nloop invariant i1: 0 <= i <= N;\n\nloop invariant i3: 0 <= k <= 1;\n\n\nloop invariant i6: !(N > 1) ==> (i == N && j == N && k == 0);\n*/\nwhile (i < N) {\n    if (i<1)\n      k = 1;\n    else\n      k = 0;\n    j++;\n    i++;\n  }\n\n  {;\n//@ assert(!( k>0 ));\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= N;\nloop invariant 0 <= j <= N;\nloop invariant 0 <= k <= 1;\nloop invariant (i < N) ==> (k == 0);\nloop invariant (i >= N) ==> (k == 1);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= N is partially proven to be inductive.\nloop invariant 0 <= j <= N is established but not preserved.\nloop invariant 0 <= k <= 1 is partially proven to be inductive.\nloop invariant (i < N) ==> (k == 0) is established but not preserved.\nloop invariant (i >= N) ==> (k == 1) is established but not preserved.\nAssertion !(k > 0): Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n\tint N = unknown_uint();\n  int i, j, k;\n\n  i = 0;\n  j = 0;\n  k = 0;\n\n  assume( N > 1 );\n\n  /*@\nloop invariant i1: 0 <= i <= N;\n\nloop invariant i3: 0 <= k <= 1;\n\n\n*/\nwhile (i < N) {\n    if (i<1)\n      k = 1;\n    else\n      k = 0;\n    j++;\n    i++;\n  }\n\n  {;\n//@ assert(!( k>0 ));\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant i > 0;\nloop invariant i < N;\nloop invariant i = j;\nloop invariant i = k;\nloop invariant j > 0;\nloop invariant j <= i;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant k == 0 || k == 1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 26: Assignment operators not allowed in annotations.",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n\tint N = unknown_uint();\n  int i, j, k;\n\n  i = 0;\n  j = 0;\n  k = 0;\n\n  assume( N > 1 );\n\n  /*@\n\n\n\n\n\nloop invariant i6: j <= i;\nloop invariant i7: k >= 0;\nloop invariant i8: k <= 1;\nloop invariant i9: k == 0 || k == 1;\n*/\nwhile (i < N) {\n    if (i<1)\n      k = 1;\n    else\n      k = 0;\n    j++;\n    i++;\n  }\n\n  {;\n//@ assert(!( k>0 ));\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 60: unexpected token 'is'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n\tint N = unknown_uint();\n  int i, j, k;\n\n  i = 0;\n  j = 0;\n  k = 0;\n\n  assume( N > 1 );\n\n  /*@\nloop invariant i1: 0 <= i <= N;\nloop invariant i2: 0 <= j <= N;\nloop invariant i3: 0 <= k <= 1;\nloop invariant i4: !(i < N) ==> (k == 0);\nloop invariant i5: i + j == N;\nloop invariant i6: i == k;\nloop invariant i7: j == i;\nloop invariant i8: k == (i == 1 ? 1 : 0);\nloop invariant i9: 1 <= i <= N;\nloop invariant i10: 0 <= j <= i;\nloop invariant i11: j == (i * (i - 1)) / 2;\nloop invariant i12: i == N;\nloop invariant i13: k == (i < 1);\nloop invariant i14: !(k > 0) ==> (i < 1);\nloop invariant i15: (i >= 1) ==> !(k > 0);\nloop invariant i16: i == j;\nloop invariant i17: k == 0;\nloop invariant i18: i >= 0;\nloop invariant i19: i <= N;\nloop invariant i20: j >= 0;\nloop invariant i21: j <= N;\nloop invariant i22: k >= 0;\nloop invariant i23: k <= 1;\nloop invariant i24: (k>0) ==> (i>0);\nloop invariant i25: (k==0) ==> (i==0);\nloop invariant i26: j>=i;\nloop invariant i27: k == (i > 0 ? 0 : 1);\nloop invariant i28: i < N ==> k == 0;\nloop invariant i29: i < N ==> j == i;\nloop invariant i30: i < N ==> k == 0 ==> j == i;\nloop invariant i31: i < N ==> k > 0 ==> j == i+1;\nloop invariant i32: i == N ==> k == 0;\nloop invariant i33: i == N ==> j == N;\nloop invariant i34: i == N ==> k == 0 ==> j == N;\nloop invariant i35: i == N ==> k > 0 ==> j == N+1;\nloop invariant i36: i <= N ==> k == 0;\nloop invariant i37: i is in the range [0, N-1];\nloop invariant i38: j is in the range [1, N];\nloop invariant i39: k is either 0 or 1;\nloop invariant i40: k is 1 if i < 1, otherwise k is 0;\nloop invariant i41: j is always increasing by 1 for each iteration of the loop;\nloop invariant i42: i is always increasing by 1 for each iteration of the loop;\nloop invariant i43: i + j = N;\nloop invariant i44: i + k = 1;\nloop invariant i45: j + k = N;\nloop invariant i46: i >= k;\nloop invariant i47: j >= k;\nloop invariant i48: i == 1 ==> k == 1;\nloop invariant i49: i < 1 ==> k == 0;\nloop invariant i50: j == i + 1;\nloop invariant i51: k == 1;\nloop invariant i52: j == N;\nloop invariant i53: i == 1;\nloop invariant i54: j == 1;\nloop invariant i55: i == 0;\nloop invariant i56: j == 0;\nloop invariant i57: (k == 0) ==> (j == i);\nloop invariant i58: (k == 1) ==> (j == i - 1);\nloop invariant i59: !(N > 1) ==> (i == N && j == N && k == 0);\nloop invariant i60: (i < N) ==> (k == 0);\nloop invariant i61: (i >= N) ==> (k == 1);\nloop invariant i62: i > 0;\nloop invariant i63: i < N;\nloop invariant i64: i = j;\nloop invariant i65: i = k;\nloop invariant i66: j > 0;\nloop invariant i67: j <= i;\nloop invariant i68: k == 0 || k == 1;\n*/\nwhile (i < N) {\n    if (i<1)\n      k = 1;\n    else\n      k = 0;\n    j++;\n    i++;\n  }\n\n  {;\n//@ assert(!( k>0 ));\n}\n\n  return 0;\n}",
        "combined_annotation_num_solver_calls": 39,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n\tint N = unknown_uint();\n  int i, j, k;\n\n  i = 0;\n  j = 0;\n  k = 0;\n\n  assume( N > 1 );\n\n  /*@\nloop invariant i1: 0 <= i <= N;\nloop invariant i2: 0 <= j <= N;\nloop invariant i3: 0 <= k <= 1;\nloop invariant i4: !(i < N) ==> (k == 0);\n\n\nloop invariant i7: j == i;\nloop invariant i8: k == (i == 1 ? 1 : 0);\n\nloop invariant i10: 0 <= j <= i;\n\n\n\n\n\nloop invariant i16: i == j;\n\nloop invariant i18: i >= 0;\nloop invariant i19: i <= N;\nloop invariant i20: j >= 0;\nloop invariant i21: j <= N;\nloop invariant i22: k >= 0;\nloop invariant i23: k <= 1;\nloop invariant i24: (k>0) ==> (i>0);\n\nloop invariant i26: j>=i;\n\n\nloop invariant i29: i < N ==> j == i;\nloop invariant i30: i < N ==> k == 0 ==> j == i;\n\nloop invariant i32: i == N ==> k == 0;\nloop invariant i33: i == N ==> j == N;\nloop invariant i34: i == N ==> k == 0 ==> j == N;\nloop invariant i35: i == N ==> k > 0 ==> j == N+1;\n\n\n\n\n\n\n\n\n\n\nloop invariant i46: i >= k;\nloop invariant i47: j >= k;\nloop invariant i48: i == 1 ==> k == 1;\nloop invariant i49: i < 1 ==> k == 0;\n\n\n\n\n\n\n\nloop invariant i57: (k == 0) ==> (j == i);\n\nloop invariant i59: !(N > 1) ==> (i == N && j == N && k == 0);\n\n\n\n\n\n\n\nloop invariant i67: j <= i;\nloop invariant i68: k == 0 || k == 1;\n*/\nwhile (i < N) {\n    if (i<1)\n      k = 1;\n    else\n      k = 0;\n    j++;\n    i++;\n  }\n\n  {;\n//@ assert(!( k>0 ));\n}\n\n  return 0;\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_nondet_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum01_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/22.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop17_VeriMAP_true.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/85.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/ex2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/42.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/diamond_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/odd.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/even.c",
            "../dataset/loop_invariants/code2inv/24.c",
            "../dataset/loop_invariants/code2inv/130.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/diamond_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/overflow_safe1.c",
            "../dataset/loop_invariants/code2inv/113.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/ddlm2013_true-unreach-call.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/MADWiFi-encode_ie_ok.c",
            "../dataset/loop_invariants/code2inv/69.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/half.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.v.c",
            "../dataset/loop_invariants/code2inv/101.c",
            "../dataset/loop_invariants/code2inv/86.c",
            "../dataset/loop_invariants/code2inv/119.c"
        ],
        "skipped": [],
        "total": 24,
        "success_count": 5,
        "failure_count": 19,
        "success_rate": 0.20833333333333334
    }
}