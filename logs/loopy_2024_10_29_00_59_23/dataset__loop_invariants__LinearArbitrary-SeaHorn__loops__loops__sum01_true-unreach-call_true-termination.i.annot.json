{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum01_true-unreach-call_true-termination.i.annot.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(){\n  int i, n=unknown_int(), sn=0;\nassume(n < 1000 && n >= -1000);\n  for(i=1; i<=n; i++){\n    sn = sn +(2);\n  }\n  {;\n//@ assert(sn==n*(2)|| sn == 0);\n}\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant sn == 2 * i;\nloop invariant sn >= 0;\nloop invariant sn <= 2 * n;\nloop invariant i * 2 == sn;\nloop invariant i <= n;\nloop invariant sn == 2 * i;\nloop invariant sn >= 0;\nloop invariant sn <= 2 * n;\nloop invariant i * 2 == sn;\nloop invariant i <= n;\nloop invariant sn == 2 * i;\nloop invariant sn >= 0;\nloop invariant sn <= 2 * n;\nloop invariant i * 2 == sn;\nloop invariant i <= n;\nloop invariant sn == 2 * i;\nloop invariant sn >= 0;\nloop invariant sn <= 2 * n;\nloop invariant i * 2 == sn;\nloop invariant i <= n;\nloop invariant sn == 2 * i;\nloop invariant sn >= 0;\nloop invariant sn <= 2 * n;\nloop invariant i * 2 == sn;\nloop invariant i <= n;\nloop invariant sn == 2 * i;\nloop invariant sn >= 0;\nloop invariant sn <= 2 * n;\nloop invariant i * 2 == sn;\nloop invariant i <= n;\nloop invariant sn == 2 * i;\nloop invariant sn >= 0;\nloop invariant sn <= 2 * n;\nloop invariant i * 2 == sn;\nloop invariant i <= n;\nloop invariant sn == 2 * i;\nloop invariant sn >= 0;\nloop invariant sn <= 2 * n;\nloop invariant i * 2 == sn;\nloop invariant i <= n;\nloop invariant sn == 2 * i;\nloop invariant sn >= 0;\nloop invariant sn <= 2 * n;\nloop invariant i * 2 == sn;\nloop invariant i <= n;\nloop invariant sn == 2 * i;\nloop invariant sn >= 0;\nloop invariant sn <= 2 * n;\nloop invariant i * 2 == sn;\nloop invariant i <= n;\nloop invariant sn == 2 * i;\nloop invariant sn >= 0;\nloop invariant sn <= 2 * n;\nloop invariant i * 2 == sn;\nloop invariant i <= n;\nloop invariant sn == 2 * i;\nloop invariant sn >= 0;\nloop invariant sn <= 2 * n;\nloop invariant i * 2 == sn;\nloop invariant i <= n;\nloop invariant sn == 2 * i;\nloop invariant sn >= 0;\nloop invariant sn <= 2 * n;\nloop invariant i * 2 == sn;\nloop invariant i <= n;\nloop invariant sn == 2 * i;\nloop invariant sn >= 0;\nloop invariant sn <= 2 * n;\nloop invariant i * 2 == sn;\nloop invariant i <= n;\nloop invariant sn == 2 * i;\nloop invariant sn >= 0;\nloop invariant sn <= 2 * n;\nloop invariant i * 2 == sn;\nloop invariant i <= n;\nloop invariant sn == 2 * i;\nloop invariant sn >= 0;\nloop invariant sn <= 2 * n;\nloop invariant i * 2 == sn;\nloop invariant i <= n;\nloop invariant sn == 2 * i;\nloop invariant sn >= 0;\nloop invariant sn <= 2 * n;\nloop invariant i * 2 == sn;\nloop invariant i <= n;\nloop invariant sn == 2 * i;\nloop invariant sn >= 0;\nloop invariant sn <= 2 * n;\nloop invariant i * 2 == sn;\nloop invariant i <= n;\nloop invariant sn == 2 * i;\nloop invariant sn >= 0;\nloop invariant sn <= 2 * n;\nloop invariant i * 2 == sn;\nloop invariant i <= n;\nloop invariant sn == 2 * i;\nloop invariant sn >= 0;\nloop invariant sn <= 2 * n;\nloop invariant i * 2 == sn;\nloop invariant i <= n;\nloop invariant sn == 2 * i;\nloop invariant sn >= 0;\nloop invariant sn <= 2 * n;\nloop invariant i * 2 == sn;\nloop invariant i <= n;\nloop invariant sn == 2 * i;\nloop invariant sn >= 0;\nloop invariant sn <= 2 * n;\nloop invariant i * 2 == sn;\nloop invariant i <= n;\nloop invariant sn == 2 * i;\nloop invariant sn >= 0;\nloop invariant sn <= 2 * n;\nloop invariant i * 2 == sn;\nloop invariant i <= n;\nloop invariant sn == 2 * i;\nloop invariant sn >= 0;\nloop invariant sn <= 2 * n;\nloop invariant i * 2 == sn;\nloop invariant i <= n;\nloop invariant sn == 2 * i;\nloop invariant sn >= 0;\nloop invariant sn <= 2 * n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn == 2 * i;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n + 1;\nloop invariant sn == (2 * i);\nloop invariant i >= -1000;\nloop invariant i <= 1000;\nloop invariant n >= -1000;\nloop invariant n <= 1000;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant sn >= i * 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= sn <= 2*n;\nloop invariant sn == 2*i;\nloop invariant 2*i <= 2*n;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= n+1;\nloop invariant sn == i*(2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n+1;\nloop invariant 0 <= sn <= (n+1)*(2);\nloop invariant sn == (i*(2)-2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn == 2 * i;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n; loop invariant i <= sn <= (n*(2)+i);\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= n + 1;\nloop invariant sn == i * 2;\nloop invariant sn >= 0;\nloop invariant sn <= (n + 1) * 2;\nloop invariant n >= -1000;\nloop invariant n < 1000;\nloop invariant 2 <= sn <= (n + 1) * 2;\nloop invariant i <= n + 1;\nloop invariant i >= 1;\nloop invariant sn == i * 2;\nloop invariant sn >= 0;\nloop invariant sn <= (n + 1) * 2;\nloop invariant n >= -1000;\nloop invariant n < 1000;\nloop invariant 2 <= sn <= (n + 1) * 2;\nloop invariant i <= n + 1;\nloop invariant i >= 1;\nloop invariant sn == i * 2;\nloop invariant sn >= 0;\nloop invariant sn <= (n + 1) * 2;\nloop invariant n >= -1000;\nloop invariant n < 1000;\nloop invariant 2 <= sn <= (n + 1) * 2;\nloop invariant i <= n + 1;\nloop invariant i >= 1;\nloop invariant sn == i * 2;\nloop invariant sn >= 0;\nloop invariant sn <= (n + 1) * 2;\nloop invariant n >= -1000;\nloop invariant n < 1000;\nloop invariant 2 <= sn <= (n + 1) * 2;\nloop invariant i <= n + 1;\nloop invariant i >= 1;\nloop invariant sn == i * 2;\nloop invariant sn >= 0;\nloop invariant sn <= (n + 1) * 2;\nloop invariant n >= -1000;\nloop invariant n < 1000;\nloop invariant 2 <= sn <= (n + 1) * 2;\nloop invariant i <= n + 1;\nloop invariant i >= 1;\nloop invariant sn == i * 2;\nloop invariant sn >= 0;\nloop invariant sn <= (n + 1) * 2;\nloop invariant n >= -1000;\nloop invariant n < 1000;\nloop invariant 2 <= sn <= (n + 1) * 2;\nloop invariant i <= n + 1;\nloop invariant i >= 1;\nloop invariant sn == i * 2;\nloop invariant sn >= 0;\nloop invariant sn <= (n + 1) * 2;\nloop invariant n >= -1000;\nloop invariant n < 1000;\nloop invariant 2 <= sn <= (n + 1) * 2;\nloop invariant i <= n + 1;\nloop invariant i >= 1;\nloop invariant sn == i * 2;\nloop invariant sn >= 0;\nloop invariant sn <= (n + 1) * 2;\nloop invariant n >= -1000;\nloop invariant n < 1000;\nloop invariant 2 <= sn <= (n + 1) * 2;\nloop invariant i <= n + 1;\nloop invariant i >= 1;\nloop invariant sn == i * 2;\nloop invariant sn >= 0;\nloop invariant sn <= (n + 1) * 2;\nloop invariant n >= -1000;\nloop invariant n < 1000;\nloop invariant 2 <= sn <= (n + 1) * 2;\nloop invariant i <= n + 1;\nloop invariant i >= 1;\nloop invariant sn == i * 2;\nloop invariant sn >= 0;\nloop invariant sn <= (n + 1) * 2;\nloop invariant n >= -1000;\nloop invariant n < 1000;\nloop invariant 2 <= sn <= (n + 1) * 2;\nloop invariant i <= n + 1;\nloop invariant i >= 1;\nloop invariant sn == i * 2;\nloop invariant sn >= 0;\nloop invariant sn <= (n + 1) * 2;\nloop invariant n >= -1000;\nloop invariant n < 1000;\nloop invariant 2 <= sn <= (n + 1) * 2;\nloop invariant i <= n + 1;\nloop invariant i >= 1;\nloop invariant sn == i * 2;\nloop invariant sn >= 0;\nloop invariant sn <= (n + 1) * 2;\nloop invariant n >= -1000;\nloop invariant n < 1000;\nloop invariant 2 <= sn <= (n + 1) * 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= sn <= 2*n;\nloop invariant i >= 1;\nloop invariant i <= n+1;\nloop invariant (i == n+1) ==> (sn == n*(2) || sn == 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn = 2*i; loop invariant i <= n ==> n >= 0 ==> sn == n*(2); loop invariant i > n ==> sn == 0;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= n + 1;\nloop invariant 0 <= sn <= n * (2);\nloop invariant sn == i * (2) - (n * (2) - sn);\nloop invariant sn == 2 * i - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= n <= 1000;\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant sn >= 2 * i - 2;\nloop invariant sn <= 2 * n;\nloop invariant sn == n * (2) || sn == 0;\nloop invariant (i <= n) ==> (sn == i * (2) || sn == 0);\nloop invariant (i > n) ==> (sn == n * (2) || sn == 0);\nloop invariant (i < 1) ==> (sn == 0);\nloop invariant (i > n) ==> (sn == 0);\nloop invariant (i <= n) ==> (sn == i * (2) || sn == n * (2));\nloop invariant (i < 1) ==> (sn == 0);\nloop invariant (i <= n) ==> (sn == i * (2) || sn == n * (2));\nloop invariant (i < 1) ==> (sn == 0);\nloop invariant (i <= n) ==> (sn == i * (2) || sn == n * (2));\nloop invariant (i < 1) ==> (sn == 0);\nloop invariant (i <= n) ==> (sn == i * (2) || sn == n * (2));\nloop invariant (i < 1) ==> (sn == 0);\nloop invariant (i <= n) ==> (sn == i * (2) || sn == n * (2));\nloop invariant (i < 1) ==> (sn == 0);\nloop invariant (i <= n) ==> (sn == i * (2) || sn == n * (2));\nloop invariant (i < 1) ==> (sn == 0);\nloop invariant (i <= n) ==> (sn == i * (2) || sn == n * (2));\nloop invariant (i < 1) ==> (sn == 0);\nloop invariant (i <= n) ==> (sn == i * (2) || sn == n * (2));\nloop invariant (i < 1) ==> (sn == 0);\nloop invariant (i <= n) ==> (sn == i * (2) || sn == n * (2));\nloop invariant (i < 1) ==> (sn == 0);\nloop invariant (i <= n) ==> (sn == i * (2) || sn == n * (2));\nloop invariant (i < 1) ==> (sn == 0);\nloop invariant (i <= n) ==> (sn == i * (2) || sn == n * (2));\nloop invariant (i < 1) ==> (sn == 0);\nloop invariant (i <= n) ==> (sn == i * (2) || sn == n * (2));\nloop invariant (i < 1) ==> (sn == 0);\nloop invariant (i <= n) ==> (sn == i * (2) || sn == n * (2));\nloop invariant (i < 1) ==> (sn == 0);\nloop invariant (i <= n) ==> (sn == i * (2) || sn == n * (2));\nloop invariant (i < 1) ==> (sn == 0);\nloop invariant (i <= n) ==> (sn == i * (2) || sn == n * (2));\nloop invariant (i < 1) ==> (sn == 0);\nloop invariant (i <= n) ==> (sn == i * (2) || sn == n * (2));\nloop invariant (i < 1) ==> (sn == 0);\nloop invariant (i <= n) ==> (sn == i * (2) || sn == n * (2));\nloop invariant (i < 1) ==> (sn == 0);\nloop invariant (i <= n) ==> (sn == i * (2) || sn == n * (2));\nloop invariant (i < 1) ==> (sn == 0);\nloop invariant (i <= n) ==> (sn == i * (2) || sn == n * (2));\nloop invariant (i < 1) ==> (sn == 0);\nloop invariant (i <= n) ==> (sn == i * (2) || sn == n * (2));\nloop invariant (i < 1) ==> (sn == 0);\nloop invariant (i <= n) ==> (sn == i * (2) || sn == n * (2));\nloop invariant (i < 1) ==> (sn == 0);\nloop invariant (i <= n) ==> (sn == i * (2) || sn == n * (2));\nloop invariant (i < 1) ==> (sn == 0);\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant sn = (i-1)*(2) + sn;\nloop invariant n >= 0;\nloop invariant n < 1000;\nloop invariant n >= -1000;\nloop invariant i <= n;\nloop invariant sn >= 0;\nloop invariant sn <= n * (2);\nloop invariant sn == i * (2);\nloop invariant sn == 0;\nloop invariant sn == n * (2);\nloop invariant sn == n * (2) || sn == 0;\nloop invariant n < 1000 && n >= -1000;\nloop invariant i <= n;\nloop invariant sn >= 0;\nloop invariant sn <= n * (2);\nloop invariant sn == i * (2);\nloop invariant sn == 0;\nloop invariant sn == n * (2);\nloop invariant sn == n * (2) || sn == 0;\nloop invariant n < 1000 && n >= -1000;\nloop invariant i <= n;\nloop invariant sn >= 0;\nloop invariant sn <= n * (2);\nloop invariant sn == i * (2);\nloop invariant sn == 0;\nloop invariant sn == n * (2);\nloop invariant sn == n * (2) || sn == 0;\nloop invariant n < 1000 && n >= -1000;\nloop invariant i <= n;\nloop invariant sn >= 0;\nloop invariant sn <= n * (2);\nloop invariant sn == i * (2);\nloop invariant sn == 0;\nloop invariant sn == n * (2);\nloop invariant sn == n * (2) || sn == 0;\nloop invariant n < 1000 && n >= -1000;\nloop invariant i <= n;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant sn == 2 * i;\nloop invariant sn >= 0;\nloop invariant sn <= 2 * n;\nloop invariant i * 2 == sn;\nloop invariant i <= n;\nloop invariant sn == 2 * i;\nloop invariant sn >= 0;\nloop invariant sn <= 2 * n;\nloop invariant i * 2 == sn;\nloop invariant i <= n;\nloop invariant sn == 2 * i;\nloop invariant sn >= 0;\nloop invariant sn <= 2 * n;\nloop invariant i * 2 == sn;\nloop invariant i <= n;\nloop invariant sn == 2 * i;\nloop invariant sn >= 0;\nloop invariant sn <= 2 * n;\nloop invariant i * 2 == sn;\nloop invariant i <= n;\nloop invariant sn == 2 * i;\nloop invariant sn >= 0;\nloop invariant sn <= 2 * n;\nloop invariant i * 2 == sn;\nloop invariant i <= n;\nloop invariant sn == 2 * i;\nloop invariant sn >= 0;\nloop invariant sn <= 2 * n;\nloop invariant i * 2 == sn;\nloop invariant i <= n;\nloop invariant sn == 2 * i;\nloop invariant sn >= 0;\nloop invariant sn <= 2 * n;\nloop invariant i * 2 == sn;\nloop invariant i <= n;\nloop invariant sn == 2 * i;\nloop invariant sn >= 0;\nloop invariant sn <= 2 * n;\nloop invariant i * 2 == sn;\nloop invariant i <= n;\nloop invariant sn == 2 * i;\nloop invariant sn >= 0;\nloop invariant sn <= 2 * n;\nloop invariant i * 2 == sn;\nloop invariant i <= n;\nloop invariant sn == 2 * i;\nloop invariant sn >= 0;\nloop invariant sn <= 2 * n;\nloop invariant i * 2 == sn;\nloop invariant i <= n;\nloop invariant sn == 2 * i;\nloop invariant sn >= 0;\nloop invariant sn <= 2 * n;\nloop invariant i * 2 == sn;\nloop invariant i <= n;\nloop invariant sn == 2 * i;\nloop invariant sn >= 0;\nloop invariant sn <= 2 * n;\nloop invariant i * 2 == sn;\nloop invariant i <= n;\nloop invariant sn == 2 * i;\nloop invariant sn >= 0;\nloop invariant sn <= 2 * n;\nloop invariant i * 2 == sn;\nloop invariant i <= n;\nloop invariant sn == 2 * i;\nloop invariant sn >= 0;\nloop invariant sn <= 2 * n;\nloop invariant i * 2 == sn;\nloop invariant i <= n;\nloop invariant sn == 2 * i;\nloop invariant sn >= 0;\nloop invariant sn <= 2 * n;\nloop invariant i * 2 == sn;\nloop invariant i <= n;\nloop invariant sn == 2 * i;\nloop invariant sn >= 0;\nloop invariant sn <= 2 * n;\nloop invariant i * 2 == sn;\nloop invariant i <= n;\nloop invariant sn == 2 * i;\nloop invariant sn >= 0;\nloop invariant sn <= 2 * n;\nloop invariant i * 2 == sn;\nloop invariant i <= n;\nloop invariant sn == 2 * i;\nloop invariant sn >= 0;\nloop invariant sn <= 2 * n;\nloop invariant i * 2 == sn;\nloop invariant i <= n;\nloop invariant sn == 2 * i;\nloop invariant sn >= 0;\nloop invariant sn <= 2 * n;\nloop invariant i * 2 == sn;\nloop invariant i <= n;\nloop invariant sn == 2 * i;\nloop invariant sn >= 0;\nloop invariant sn <= 2 * n;\nloop invariant i * 2 == sn;\nloop invariant i <= n;\nloop invariant sn == 2 * i;\nloop invariant sn >= 0;\nloop invariant sn <= 2 * n;\nloop invariant i * 2 == sn;\nloop invariant i <= n;\nloop invariant sn == 2 * i;\nloop invariant sn >= 0;\nloop invariant sn <= 2 * n;\nloop invariant i * 2 == sn;\nloop invariant i <= n;\nloop invariant sn == 2 * i;\nloop invariant sn >= 0;\nloop invariant sn <= 2 * n;\nloop invariant i * 2 == sn;\nloop invariant i <= n;\nloop invariant sn == 2 * i;\nloop invariant sn >= 0;\nloop invariant sn <= 2 * n;\nloop invariant i * 2 == sn;\nloop invariant i <= n;\nloop invariant sn == 2 * i;\nloop invariant sn >= 0;\nloop invariant sn <= 2 * n;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= i <= n is preserved but not established.\nloop invariant sn == 2 * i is preserved but not established.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn <= 2 * n is partially proven to be inductive.\nloop invariant i * 2 == sn is partially proven to be inductive.\nloop invariant i <= n is partially proven to be inductive.\nAssertion sn == n * 2 || sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(){\n  int i, n=unknown_int(), sn=0;\nassume(n < 1000 && n >= -1000);\n  /*@\n\n\nloop invariant i3: sn >= 0;\n\n\n\n*/\nfor(i=1; i<=n; i++){\n    sn = sn +(2);\n  }\n  {;\n//@ assert(sn==n*(2)|| sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn == 2 * i;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is preserved but not established.\nloop invariant sn == 2 * i is preserved but not established.\nAssertion sn == n * 2 || sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(){\n  int i, n=unknown_int(), sn=0;\nassume(n < 1000 && n >= -1000);\n  /*@\n\n\n*/\nfor(i=1; i<=n; i++){\n    sn = sn +(2);\n  }\n  {;\n//@ assert(sn==n*(2)|| sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n + 1;\nloop invariant sn == (2 * i);\nloop invariant i >= -1000;\nloop invariant i <= 1000;\nloop invariant n >= -1000;\nloop invariant n <= 1000;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n + 1 is preserved but not established.\nloop invariant sn == (2 * i) is preserved but not established.\nloop invariant i >= -1000 is partially proven to be inductive.\nloop invariant i <= 1000 is partially proven to be inductive.\nloop invariant n >= -1000 is partially proven to be inductive.\nloop invariant n <= 1000 is partially proven to be inductive.\nAssertion sn == n * 2 || sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(){\n  int i, n=unknown_int(), sn=0;\nassume(n < 1000 && n >= -1000);\n  /*@\n\n\nloop invariant i3: i >= -1000;\n\nloop invariant i5: n >= -1000;\nloop invariant i6: n <= 1000;\n*/\nfor(i=1; i<=n; i++){\n    sn = sn +(2);\n  }\n  {;\n//@ assert(sn==n*(2)|| sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant sn >= i * 2;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= i <= n is preserved but not established.\nloop invariant sn >= i * 2 is preserved but not established.\nAssertion sn == n * 2 || sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(){\n  int i, n=unknown_int(), sn=0;\nassume(n < 1000 && n >= -1000);\n  /*@\n\n\n*/\nfor(i=1; i<=n; i++){\n    sn = sn +(2);\n  }\n  {;\n//@ assert(sn==n*(2)|| sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= sn <= 2*n;\nloop invariant sn == 2*i;\nloop invariant 2*i <= 2*n;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is preserved but not established.\nloop invariant 0 <= sn <= 2*n is partially proven to be inductive.\nloop invariant sn == 2*i is preserved but not established.\nloop invariant 2*i <= 2*n is partially proven to be inductive.\nAssertion sn == n * 2 || sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(){\n  int i, n=unknown_int(), sn=0;\nassume(n < 1000 && n >= -1000);\n  /*@\n\n\n\n\n*/\nfor(i=1; i<=n; i++){\n    sn = sn +(2);\n  }\n  {;\n//@ assert(sn==n*(2)|| sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= n+1;\nloop invariant sn == i*(2);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= i <= n+1 is preserved but not established.\nloop invariant sn == i*(2) is preserved but not established.\nAssertion sn == n * 2 || sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(){\n  int i, n=unknown_int(), sn=0;\nassume(n < 1000 && n >= -1000);\n  /*@\n\n\n*/\nfor(i=1; i<=n; i++){\n    sn = sn +(2);\n  }\n  {;\n//@ assert(sn==n*(2)|| sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n+1;\nloop invariant 0 <= sn <= (n+1)*(2);\nloop invariant sn == (i*(2)-2);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n+1 is preserved but not established.\nloop invariant 0 <= sn <= (n+1)*(2) is partially proven to be inductive.\nloop invariant sn == (i*(2)-2) is partially proven to be inductive.\nAssertion sn == n * 2 || sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(){\n  int i, n=unknown_int(), sn=0;\nassume(n < 1000 && n >= -1000);\n  /*@\n\n\nloop invariant i3: sn == (i*(2)-2);\n*/\nfor(i=1; i<=n; i++){\n    sn = sn +(2);\n  }\n  {;\n//@ assert(sn==n*(2)|| sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn == 2 * i;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is preserved but not established.\nloop invariant sn == 2 * i is preserved but not established.\nAssertion sn == n * 2 || sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(){\n  int i, n=unknown_int(), sn=0;\nassume(n < 1000 && n >= -1000);\n  /*@\n\n\n*/\nfor(i=1; i<=n; i++){\n    sn = sn +(2);\n  }\n  {;\n//@ assert(sn==n*(2)|| sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n; loop invariant i <= sn <= (n*(2)+i);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n; loop invariant i <= sn <= (n*(2)+i) is preserved but not established.\nAssertion sn == n * 2 || sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(){\n  int i, n=unknown_int(), sn=0;\nassume(n < 1000 && n >= -1000);\n  /*@\n\n*/\nfor(i=1; i<=n; i++){\n    sn = sn +(2);\n  }\n  {;\n//@ assert(sn==n*(2)|| sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= n + 1;\nloop invariant sn == i * 2;\nloop invariant sn >= 0;\nloop invariant sn <= (n + 1) * 2;\nloop invariant n >= -1000;\nloop invariant n < 1000;\nloop invariant 2 <= sn <= (n + 1) * 2;\nloop invariant i <= n + 1;\nloop invariant i >= 1;\nloop invariant sn == i * 2;\nloop invariant sn >= 0;\nloop invariant sn <= (n + 1) * 2;\nloop invariant n >= -1000;\nloop invariant n < 1000;\nloop invariant 2 <= sn <= (n + 1) * 2;\nloop invariant i <= n + 1;\nloop invariant i >= 1;\nloop invariant sn == i * 2;\nloop invariant sn >= 0;\nloop invariant sn <= (n + 1) * 2;\nloop invariant n >= -1000;\nloop invariant n < 1000;\nloop invariant 2 <= sn <= (n + 1) * 2;\nloop invariant i <= n + 1;\nloop invariant i >= 1;\nloop invariant sn == i * 2;\nloop invariant sn >= 0;\nloop invariant sn <= (n + 1) * 2;\nloop invariant n >= -1000;\nloop invariant n < 1000;\nloop invariant 2 <= sn <= (n + 1) * 2;\nloop invariant i <= n + 1;\nloop invariant i >= 1;\nloop invariant sn == i * 2;\nloop invariant sn >= 0;\nloop invariant sn <= (n + 1) * 2;\nloop invariant n >= -1000;\nloop invariant n < 1000;\nloop invariant 2 <= sn <= (n + 1) * 2;\nloop invariant i <= n + 1;\nloop invariant i >= 1;\nloop invariant sn == i * 2;\nloop invariant sn >= 0;\nloop invariant sn <= (n + 1) * 2;\nloop invariant n >= -1000;\nloop invariant n < 1000;\nloop invariant 2 <= sn <= (n + 1) * 2;\nloop invariant i <= n + 1;\nloop invariant i >= 1;\nloop invariant sn == i * 2;\nloop invariant sn >= 0;\nloop invariant sn <= (n + 1) * 2;\nloop invariant n >= -1000;\nloop invariant n < 1000;\nloop invariant 2 <= sn <= (n + 1) * 2;\nloop invariant i <= n + 1;\nloop invariant i >= 1;\nloop invariant sn == i * 2;\nloop invariant sn >= 0;\nloop invariant sn <= (n + 1) * 2;\nloop invariant n >= -1000;\nloop invariant n < 1000;\nloop invariant 2 <= sn <= (n + 1) * 2;\nloop invariant i <= n + 1;\nloop invariant i >= 1;\nloop invariant sn == i * 2;\nloop invariant sn >= 0;\nloop invariant sn <= (n + 1) * 2;\nloop invariant n >= -1000;\nloop invariant n < 1000;\nloop invariant 2 <= sn <= (n + 1) * 2;\nloop invariant i <= n + 1;\nloop invariant i >= 1;\nloop invariant sn == i * 2;\nloop invariant sn >= 0;\nloop invariant sn <= (n + 1) * 2;\nloop invariant n >= -1000;\nloop invariant n < 1000;\nloop invariant 2 <= sn <= (n + 1) * 2;\nloop invariant i <= n + 1;\nloop invariant i >= 1;\nloop invariant sn == i * 2;\nloop invariant sn >= 0;\nloop invariant sn <= (n + 1) * 2;\nloop invariant n >= -1000;\nloop invariant n < 1000;\nloop invariant 2 <= sn <= (n + 1) * 2;\nloop invariant i <= n + 1;\nloop invariant i >= 1;\nloop invariant sn == i * 2;\nloop invariant sn >= 0;\nloop invariant sn <= (n + 1) * 2;\nloop invariant n >= -1000;\nloop invariant n < 1000;\nloop invariant 2 <= sn <= (n + 1) * 2;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= i <= n + 1 is preserved but not established.\nloop invariant sn == i * 2 is preserved but not established.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn <= (n + 1) * 2 is partially proven to be inductive.\nloop invariant n >= -1000 is partially proven to be inductive.\nloop invariant n < 1000 is partially proven to be inductive.\nloop invariant 2 <= sn <= (n + 1) * 2 is partially proven to be inductive.\nloop invariant i <= n + 1 is partially proven to be inductive.\nloop invariant i >= 1 is partially proven to be inductive.\nAssertion sn == n * 2 || sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(){\n  int i, n=unknown_int(), sn=0;\nassume(n < 1000 && n >= -1000);\n  /*@\n\n\nloop invariant i3: sn >= 0;\n\nloop invariant i5: n >= -1000;\nloop invariant i6: n < 1000;\n\n\nloop invariant i9: i >= 1;\n*/\nfor(i=1; i<=n; i++){\n    sn = sn +(2);\n  }\n  {;\n//@ assert(sn==n*(2)|| sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= sn <= 2*n;\nloop invariant i >= 1;\nloop invariant i <= n+1;\nloop invariant (i == n+1) ==> (sn == n*(2) || sn == 0);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= sn <= 2*n is neither established nor preserved.\nloop invariant i >= 1 is partially proven to be inductive.\nloop invariant i <= n+1 is partially proven to be inductive.\nloop invariant (i == n+1) ==> (sn == n*(2) || sn == 0) is established but not preserved.\nAssertion sn == n * 2 || sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(){\n  int i, n=unknown_int(), sn=0;\nassume(n < 1000 && n >= -1000);\n  /*@\n\nloop invariant i2: i >= 1;\n\n\n*/\nfor(i=1; i<=n; i++){\n    sn = sn +(2);\n  }\n  {;\n//@ assert(sn==n*(2)|| sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn = 2*i; loop invariant i <= n ==> n >= 0 ==> sn == n*(2); loop invariant i > n ==> sn == 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 14: Assignment operators not allowed in annotations.",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(){\n  int i, n=unknown_int(), sn=0;\nassume(n < 1000 && n >= -1000);\n  /*@\n\n\n*/\nfor(i=1; i<=n; i++){\n    sn = sn +(2);\n  }\n  {;\n//@ assert(sn==n*(2)|| sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= n + 1;\nloop invariant 0 <= sn <= n * (2);\nloop invariant sn == i * (2) - (n * (2) - sn);\nloop invariant sn == 2 * i - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= i <= n + 1 is preserved but not established.\nloop invariant 0 <= sn <= n * (2) is established but not preserved.\nloop invariant sn == i * (2) - (n * (2) - sn) is neither established nor preserved.\nloop invariant sn == 2 * i - (2 * n - sn) is partially proven to be inductive.\nloop invariant sn == (2 * i) - (2 * n - sn) is partially proven to be inductive.\nAssertion sn == n * 2 || sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(){\n  int i, n=unknown_int(), sn=0;\nassume(n < 1000 && n >= -1000);\n  /*@\n\n\n\n\n\n*/\nfor(i=1; i<=n; i++){\n    sn = sn +(2);\n  }\n  {;\n//@ assert(sn==n*(2)|| sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= n <= 1000;\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant sn >= 2 * i - 2;\nloop invariant sn <= 2 * n;\nloop invariant sn == n * (2) || sn == 0;\nloop invariant (i <= n) ==> (sn == i * (2) || sn == 0);\nloop invariant (i > n) ==> (sn == n * (2) || sn == 0);\nloop invariant (i < 1) ==> (sn == 0);\nloop invariant (i > n) ==> (sn == 0);\nloop invariant (i <= n) ==> (sn == i * (2) || sn == n * (2));\nloop invariant (i < 1) ==> (sn == 0);\nloop invariant (i <= n) ==> (sn == i * (2) || sn == n * (2));\nloop invariant (i < 1) ==> (sn == 0);\nloop invariant (i <= n) ==> (sn == i * (2) || sn == n * (2));\nloop invariant (i < 1) ==> (sn == 0);\nloop invariant (i <= n) ==> (sn == i * (2) || sn == n * (2));\nloop invariant (i < 1) ==> (sn == 0);\nloop invariant (i <= n) ==> (sn == i * (2) || sn == n * (2));\nloop invariant (i < 1) ==> (sn == 0);\nloop invariant (i <= n) ==> (sn == i * (2) || sn == n * (2));\nloop invariant (i < 1) ==> (sn == 0);\nloop invariant (i <= n) ==> (sn == i * (2) || sn == n * (2));\nloop invariant (i < 1) ==> (sn == 0);\nloop invariant (i <= n) ==> (sn == i * (2) || sn == n * (2));\nloop invariant (i < 1) ==> (sn == 0);\nloop invariant (i <= n) ==> (sn == i * (2) || sn == n * (2));\nloop invariant (i < 1) ==> (sn == 0);\nloop invariant (i <= n) ==> (sn == i * (2) || sn == n * (2));\nloop invariant (i < 1) ==> (sn == 0);\nloop invariant (i <= n) ==> (sn == i * (2) || sn == n * (2));\nloop invariant (i < 1) ==> (sn == 0);\nloop invariant (i <= n) ==> (sn == i * (2) || sn == n * (2));\nloop invariant (i < 1) ==> (sn == 0);\nloop invariant (i <= n) ==> (sn == i * (2) || sn == n * (2));\nloop invariant (i < 1) ==> (sn == 0);\nloop invariant (i <= n) ==> (sn == i * (2) || sn == n * (2));\nloop invariant (i < 1) ==> (sn == 0);\nloop invariant (i <= n) ==> (sn == i * (2) || sn == n * (2));\nloop invariant (i < 1) ==> (sn == 0);\nloop invariant (i <= n) ==> (sn == i * (2) || sn == n * (2));\nloop invariant (i < 1) ==> (sn == 0);\nloop invariant (i <= n) ==> (sn == i * (2) || sn == n * (2));\nloop invariant (i < 1) ==> (sn == 0);\nloop invariant (i <= n) ==> (sn == i * (2) || sn == n * (2));\nloop invariant (i < 1) ==> (sn == 0);\nloop invariant (i <= n) ==> (sn == i * (2) || sn == n * (2));\nloop invariant (i < 1) ==> (sn == 0);\nloop invariant (i <= n) ==> (sn == i * (2) || sn == n * (2));\nloop invariant (i < 1) ==> (sn == 0);\nloop invariant (i <= n) ==> (sn == i * (2) || sn == n * (2));\nloop invariant (i < 1) ==> (sn == 0);\nloop invariant (i <= n) ==> (sn == i * (2) || sn == n * (2));\nloop invariant (i < 1) ==> (sn == 0);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= n <= 1000 is preserved but not established.\nloop invariant i >= 1 is partially proven to be inductive.\nloop invariant i <= n is preserved but not established.\nloop invariant sn >= 2 * i - 2 is partially proven to be inductive.\nloop invariant sn <= 2 * n is partially proven to be inductive.\nloop invariant sn == n * (2) || sn == 0 is partially proven to be inductive.\nloop invariant (i <= n) ==> (sn == i * (2) || sn == 0) is partially proven to be inductive.\nloop invariant (i > n) ==> (sn == n * (2) || sn == 0) is partially proven to be inductive.\nloop invariant (i < 1) ==> (sn == 0) is partially proven to be inductive.\nloop invariant (i > n) ==> (sn == 0) is partially proven to be inductive.\nloop invariant (i <= n) ==> (sn == i * (2) || sn == n * (2)) is preserved but not established.\nAssertion sn == n * 2 || sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(){\n  int i, n=unknown_int(), sn=0;\nassume(n < 1000 && n >= -1000);\n  /*@\n\nloop invariant i2: i >= 1;\n\nloop invariant i4: sn >= 2 * i - 2;\n\n\n\n\nloop invariant i9: (i < 1) ==> (sn == 0);\n\n\n*/\nfor(i=1; i<=n; i++){\n    sn = sn +(2);\n  }\n  {;\n//@ assert(sn==n*(2)|| sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant sn = (i-1)*(2) + sn;\nloop invariant n >= 0;\nloop invariant n < 1000;\nloop invariant n >= -1000;\nloop invariant i <= n;\nloop invariant sn >= 0;\nloop invariant sn <= n * (2);\nloop invariant sn == i * (2);\nloop invariant sn == 0;\nloop invariant sn == n * (2);\nloop invariant sn == n * (2) || sn == 0;\nloop invariant n < 1000 && n >= -1000;\nloop invariant i <= n;\nloop invariant sn >= 0;\nloop invariant sn <= n * (2);\nloop invariant sn == i * (2);\nloop invariant sn == 0;\nloop invariant sn == n * (2);\nloop invariant sn == n * (2) || sn == 0;\nloop invariant n < 1000 && n >= -1000;\nloop invariant i <= n;\nloop invariant sn >= 0;\nloop invariant sn <= n * (2);\nloop invariant sn == i * (2);\nloop invariant sn == 0;\nloop invariant sn == n * (2);\nloop invariant sn == n * (2) || sn == 0;\nloop invariant n < 1000 && n >= -1000;\nloop invariant i <= n;\nloop invariant sn >= 0;\nloop invariant sn <= n * (2);\nloop invariant sn == i * (2);\nloop invariant sn == 0;\nloop invariant sn == n * (2);\nloop invariant sn == n * (2) || sn == 0;\nloop invariant n < 1000 && n >= -1000;\nloop invariant i <= n;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 14: Assignment operators not allowed in annotations.",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(){\n  int i, n=unknown_int(), sn=0;\nassume(n < 1000 && n >= -1000);\n  /*@\n\n\n\nloop invariant i4: n < 1000;\nloop invariant i5: n >= -1000;\n\nloop invariant i7: sn >= 0;\n\n\n\n\n\nloop invariant i13: n < 1000 && n >= -1000;\n*/\nfor(i=1; i<=n; i++){\n    sn = sn +(2);\n  }\n  {;\n//@ assert(sn==n*(2)|| sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 45: Assignment operators not allowed in annotations.",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(){\n  int i, n=unknown_int(), sn=0;\nassume(n < 1000 && n >= -1000);\n  /*@\nloop invariant i1: 1 <= i <= n;\nloop invariant i2: sn == 2 * i;\nloop invariant i3: sn >= 0;\nloop invariant i4: sn <= 2 * n;\nloop invariant i5: i * 2 == sn;\nloop invariant i6: i <= n;\nloop invariant i7: 0 <= i <= n;\nloop invariant i8: 0 <= i <= n + 1;\nloop invariant i9: sn == (2 * i);\nloop invariant i10: i >= -1000;\nloop invariant i11: i <= 1000;\nloop invariant i12: n >= -1000;\nloop invariant i13: n <= 1000;\nloop invariant i14: sn >= i * 2;\nloop invariant i15: 0 <= sn <= 2*n;\nloop invariant i16: sn == 2*i;\nloop invariant i17: 2*i <= 2*n;\nloop invariant i18: 1 <= i <= n+1;\nloop invariant i19: sn == i*(2);\nloop invariant i20: 0 <= i <= n+1;\nloop invariant i21: 0 <= sn <= (n+1)*(2);\nloop invariant i22: sn == (i*(2)-2);\nloop invariant i23: 0 <= i <= n; loop invariant i <= sn <= (n*(2)+i);\nloop invariant i24: 1 <= i <= n + 1;\nloop invariant i25: sn == i * 2;\nloop invariant i26: sn <= (n + 1) * 2;\nloop invariant i27: n < 1000;\nloop invariant i28: 2 <= sn <= (n + 1) * 2;\nloop invariant i29: i <= n + 1;\nloop invariant i30: i >= 1;\nloop invariant i31: i <= n+1;\nloop invariant i32: (i == n+1) ==> (sn == n*(2) || sn == 0);\nloop invariant i33: sn = 2*i; loop invariant i <= n ==> n >= 0 ==> sn == n*(2); loop invariant i > n ==> sn == 0;\nloop invariant i34: 0 <= sn <= n * (2);\nloop invariant i35: sn == i * (2) - (n * (2) - sn);\nloop invariant i36: sn == 2 * i - (2 * n - sn);\nloop invariant i37: sn == (2 * i) - (2 * n - sn);\nloop invariant i38: 0 <= n <= 1000;\nloop invariant i39: sn >= 2 * i - 2;\nloop invariant i40: sn == n * (2) || sn == 0;\nloop invariant i41: (i <= n) ==> (sn == i * (2) || sn == 0);\nloop invariant i42: (i > n) ==> (sn == n * (2) || sn == 0);\nloop invariant i43: (i < 1) ==> (sn == 0);\nloop invariant i44: (i > n) ==> (sn == 0);\nloop invariant i45: (i <= n) ==> (sn == i * (2) || sn == n * (2));\nloop invariant i46: sn = (i-1)*(2) + sn;\nloop invariant i47: n >= 0;\nloop invariant i48: sn <= n * (2);\nloop invariant i49: sn == i * (2);\nloop invariant i50: sn == 0;\nloop invariant i51: sn == n * (2);\nloop invariant i52: n < 1000 && n >= -1000;\n*/\nfor(i=1; i<=n; i++){\n    sn = sn +(2);\n  }\n  {;\n//@ assert(sn==n*(2)|| sn == 0);\n}\n\n}",
        "combined_annotation_num_solver_calls": 18,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(){\n  int i, n=unknown_int(), sn=0;\nassume(n < 1000 && n >= -1000);\n  /*@\n\n\nloop invariant i3: sn >= 0;\n\n\n\n\n\n\nloop invariant i10: i >= -1000;\nloop invariant i11: i <= 1000;\nloop invariant i12: n >= -1000;\nloop invariant i13: n <= 1000;\n\n\n\n\n\n\n\n\nloop invariant i22: sn == (i*(2)-2);\n\n\n\n\nloop invariant i27: n < 1000;\n\n\nloop invariant i30: i >= 1;\n\nloop invariant i32: (i == n+1) ==> (sn == n*(2) || sn == 0);\n\n\n\n\n\n\nloop invariant i39: sn >= 2 * i - 2;\n\n\nloop invariant i42: (i > n) ==> (sn == n * (2) || sn == 0);\nloop invariant i43: (i < 1) ==> (sn == 0);\n\n\n\n\n\n\n\n\nloop invariant i52: n < 1000 && n >= -1000;\n*/\nfor(i=1; i<=n; i++){\n    sn = sn +(2);\n  }\n  {;\n//@ assert(sn==n*(2)|| sn == 0);\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_nondet_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum01_true-unreach-call_true-termination.i.annot.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/85.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/ex2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/42.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/diamond_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/odd.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/even.c",
            "../dataset/loop_invariants/code2inv/24.c",
            "../dataset/loop_invariants/code2inv/130.c"
        ],
        "skipped": [],
        "total": 10,
        "success_count": 2,
        "failure_count": 8,
        "success_rate": 0.2
    }
}