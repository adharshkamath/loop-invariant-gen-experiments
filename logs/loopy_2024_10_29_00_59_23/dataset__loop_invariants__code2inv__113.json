{
    "logs": {
        "file": "../dataset/loop_invariants/code2inv/113.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  while ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
        "success": false,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn >= i;\nloop invariant n != 0 ==> sn == n;\nloop invariant n == 0 ==> sn == 0;\nloop invariant i == n ==> sn == n;\nloop invariant i < n ==> sn < n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= sn <= n;\nloop invariant 0 <= sn <= i;\nloop invariant 0 <= sn <= n - (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= sn <= n;\nloop invariant sn == (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant i == (sn + 1);\nloop invariant i > 0;\nloop invariant i <= n;\nloop invariant sn == (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant i == (sn + 1);\nloop invariant i > 0;\nloop invariant i <= n;\nloop invariant sn == (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant i == (sn + 1);\nloop invariant i > 0;\nloop invariant i <= n;\nloop invariant sn == (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant i == (sn + 1);\nloop invariant i > 0;\nloop invariant i <= n;\nloop invariant sn == (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant i == (sn + 1);\nloop invariant i > 0;\nloop invariant i <= n;\nloop invariant sn == (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant i == (sn + 1);\nloop invariant i > 0;\nloop invariant i <= n;\nloop invariant sn == (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant i == (sn + 1);\nloop invariant i > 0;\nloop invariant i <= n;\nloop invariant sn == (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant i == (sn + 1);\nloop invariant i > 0;\nloop invariant i <= n;\nloop invariant sn == (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant i == (sn + 1);\nloop invariant i > 0;\nloop invariant i <= n;\nloop invariant sn == (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant i == (sn + 1);\nloop invariant i > 0;\nloop invariant i <= n;\nloop invariant sn == (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant i == (sn + 1);\nloop invariant i > 0;\nloop invariant i <= n;\nloop invariant sn == (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant i == (sn + 1);\nloop invariant i > 0;\nloop invariant i <= n;\nloop invariant sn == (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant i == (sn + 1);\nloop invariant i > 0;\nloop invariant i <= n;\nloop invariant sn == (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant i == (sn + 1);\nloop invariant i > 0;\nloop invariant i <= n;\nloop invariant sn == (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant i == (sn + 1);\nloop invariant i > 0;\nloop invariant i <= n;\nloop invariant sn == (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant i == (sn + 1);\nloop invariant i > 0;\nloop invariant i <= n;\nloop invariant sn == (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant i == (sn + 1);\nloop invariant i > 0;\nloop invariant i <= n;\nloop invariant sn == (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant i == (sn + 1);\nloop invariant i > 0;\nloop invariant i <= n;\nloop invariant sn == (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant i == (sn + 1);\nloop invariant i > 0;\nloop invariant i <= n;\nloop invariant sn == (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant i == (sn + 1);\nloop invariant i > 0;\nloop invariant i <= n;\nloop invariant sn == (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant i == (sn + 1);\nloop invariant i > 0;\nloop invariant i <= n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn == i - 1;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant sn == (i - 1);\nloop invariant n >= 0;\nloop invariant 1 <= i <= n;\nloop invariant sn == (i - 1);\nloop invariant n >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= n;\nloop invariant 0 <= i <= n;\nloop invariant 0 <= sn <= n;\nloop invariant sn == (i - 1);\nloop invariant 1 <= i <= n ==> sn == (i - 1);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= sn <= n;\nloop invariant sn == i - 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= sn <= n;\nloop invariant i == sn + 1;\nloop invariant i >= 1;\nloop invariant n >= 0;\nloop invariant n == i - 1;\nloop invariant sn == i - 1;\nloop invariant sn == n - (i - 1);\nloop invariant sn == n - i + 1;\nloop invariant sn == n - i + i;\nloop invariant sn == n;\nloop invariant (sn == n) ==> ((n >= 0) && (i == n + 1));\nloop invariant (sn == n) ==> ((sn >= 0) && (i == n + 1));\nloop invariant (sn == n) ==> ((sn == n) && (i == n + 1));\nloop invariant (sn == n) ==> (sn == n);\nloop invariant (sn == n) ==> (i == n + 1);\nloop invariant (sn == n) ==> (sn == i - 1);\nloop invariant (sn == n) ==> (sn == n - i + 1);\nloop invariant (sn == n) ==> (sn == n - (i - 1));\nloop invariant (sn == n) ==> (sn == n - i + i);\nloop invariant (sn == n) ==> (sn == n);\nloop invariant (sn == n) ==> (i == n + 1);\nloop invariant (sn == n) ==> (sn == i - 1);\nloop invariant (sn == n) ==> (sn == n - i + 1);\nloop invariant (sn == n) ==> (sn == n - (i - 1));\nloop invariant (sn == n) ==> (sn == n - i + i);\nloop invariant (sn == n) ==> (sn == n);\nloop invariant (sn == n) ==> (i == n + 1);\nloop invariant (sn == n) ==> (sn == i - 1);\nloop invariant (sn == n) ==> (sn == n - i + 1);\nloop invariant (sn == n) ==> (sn == n - (i - 1));\nloop invariant (sn == n) ==> (sn == n - i + i);\nloop invariant (sn == n) ==> (sn == n);\nloop invariant (sn == n) ==> (i == n + 1);\nloop invariant (sn == n) ==> (sn == i - 1);\nloop invariant (sn == n) ==> (sn == n - i + 1);\nloop invariant (sn == n) ==> (sn == n - (i - 1));\nloop invariant (sn == n) ==> (sn == n - i + i);\nloop invariant (sn == n) ==> (sn == n);\nloop invariant (sn == n) ==> (i == n + 1);\nloop invariant (sn == n) ==> (sn == i - 1);\nloop invariant (sn == n) ==> (sn == n - i + 1);\nloop invariant (sn == n) ==> (sn == n - (i - 1));\nloop invariant (sn == n) ==> (sn == n - i + i);\nloop invariant (sn == n) ==> (sn == n);\nloop invariant (sn == n) ==> (i == n + 1);\nloop invariant (sn == n) ==> (sn == i - 1);\nloop invariant (sn == n) ==> (sn == n - i + 1);\nloop invariant (sn == n) ==> (sn == n - (i - 1));\nloop invariant (sn == n) ==> (sn == n - i + i);\nloop invariant (sn == n) ==> (sn == n);\nloop invariant (sn == n) ==> (i == n + 1);\nloop invariant (sn == n) ==> (sn == i - 1);\nloop invariant (sn == n) ==> (sn == n - i + 1);\nloop invariant (sn == n) ==> (sn == n - (i - 1));\nloop invariant (sn == n) ==> (sn == n - i + i);\nloop invariant (sn == n) ==> (sn == n);\nloop invariant (sn == n) ==> (i == n + 1);\nloop invariant (sn == n) ==> (sn == i - 1);\nloop invariant (sn == n) ==> (sn == n - i + 1);\nloop invariant (sn == n) ==> (sn == n - (i - 1));\nloop invariant (sn == n) ==> (sn == n - i + i);\nloop invariant (sn == n) ==> (sn == n);\nloop invariant (sn == n) ==> (i == n + 1);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn >= 0;\nloop invariant sn == (i - 1);\nloop invariant sn >= (i - 1);\nloop invariant sn <= (i - 1);\nloop invariant (sn == (i - 1)) ==> (sn == (i - 1));\n*/\n```",
            "```\n/*@\nloop invariant ( 1 <= i <= n );\nloop invariant ( sn == (i - 1) );\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= n + 1;\nloop invariant i >= 1;\nloop invariant i <= n + 1;\nloop invariant sn >= 0;\nloop invariant sn <= n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= sn <= n;\nloop invariant 0 <= i <= n;\nloop invariant sn == (n - (n - i));\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn >= i - 1;\nloop invariant sn <= i;\nloop invariant sn == i - 1 ==> i == n + 1;\nloop invariant sn == i ==> i <= n + 1;\nloop invariant 1 <= i <= n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn >= i - 1;\nloop invariant sn <= i;\nloop invariant sn == i - 1 ==> i == n + 1;\nloop invariant sn == i ==> i <= n + 1;\n*/\n```",
            "```\n/*@\nloop invariant i1;\nloop invariant i2;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant 0 <= sn <= n;\nloop invariant sn == i - 1;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn >= i;\nloop invariant n != 0 ==> sn == n;\nloop invariant n == 0 ==> sn == 0;\nloop invariant i == n ==> sn == n;\nloop invariant i < n ==> sn < n;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is preserved but not established.\nloop invariant sn >= i is preserved but not established.\nloop invariant n != 0 ==> sn == n is partially proven to be inductive.\nloop invariant n == 0 ==> sn == 0 is partially proven to be inductive.\nloop invariant i == n ==> sn == n is partially proven to be inductive.\nloop invariant i < n ==> sn < n is partially proven to be inductive.\nAssertion sn == n: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\n\n\n\n\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= sn <= n;\nloop invariant 0 <= sn <= i;\nloop invariant 0 <= sn <= n - (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= n;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is neither established nor preserved.\nloop invariant 0 <= sn <= n is partially proven to be inductive.\nloop invariant 0 <= sn <= i is partially proven to be inductive.\nloop invariant 0 <= sn <= n - (i - 1) is established but not preserved.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn <= i - 1 is partially proven to be inductive.\nloop invariant sn <= n is partially proven to be inductive.\nAssertion sn == n: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: 0 <= sn <= i;\n\nloop invariant i5: sn >= 0;\nloop invariant i6: sn <= i - 1;\n\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= sn <= n;\nloop invariant sn == (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant i == (sn + 1);\nloop invariant i > 0;\nloop invariant i <= n;\nloop invariant sn == (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant i == (sn + 1);\nloop invariant i > 0;\nloop invariant i <= n;\nloop invariant sn == (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant i == (sn + 1);\nloop invariant i > 0;\nloop invariant i <= n;\nloop invariant sn == (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant i == (sn + 1);\nloop invariant i > 0;\nloop invariant i <= n;\nloop invariant sn == (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant i == (sn + 1);\nloop invariant i > 0;\nloop invariant i <= n;\nloop invariant sn == (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant i == (sn + 1);\nloop invariant i > 0;\nloop invariant i <= n;\nloop invariant sn == (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant i == (sn + 1);\nloop invariant i > 0;\nloop invariant i <= n;\nloop invariant sn == (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant i == (sn + 1);\nloop invariant i > 0;\nloop invariant i <= n;\nloop invariant sn == (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant i == (sn + 1);\nloop invariant i > 0;\nloop invariant i <= n;\nloop invariant sn == (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant i == (sn + 1);\nloop invariant i > 0;\nloop invariant i <= n;\nloop invariant sn == (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant i == (sn + 1);\nloop invariant i > 0;\nloop invariant i <= n;\nloop invariant sn == (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant i == (sn + 1);\nloop invariant i > 0;\nloop invariant i <= n;\nloop invariant sn == (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant i == (sn + 1);\nloop invariant i > 0;\nloop invariant i <= n;\nloop invariant sn == (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant i == (sn + 1);\nloop invariant i > 0;\nloop invariant i <= n;\nloop invariant sn == (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant i == (sn + 1);\nloop invariant i > 0;\nloop invariant i <= n;\nloop invariant sn == (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant i == (sn + 1);\nloop invariant i > 0;\nloop invariant i <= n;\nloop invariant sn == (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant i == (sn + 1);\nloop invariant i > 0;\nloop invariant i <= n;\nloop invariant sn == (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant i == (sn + 1);\nloop invariant i > 0;\nloop invariant i <= n;\nloop invariant sn == (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant i == (sn + 1);\nloop invariant i > 0;\nloop invariant i <= n;\nloop invariant sn == (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant i == (sn + 1);\nloop invariant i > 0;\nloop invariant i <= n;\nloop invariant sn == (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant i == (sn + 1);\nloop invariant i > 0;\nloop invariant i <= n;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is neither established nor preserved.\nloop invariant 0 <= sn <= n is partially proven to be inductive.\nloop invariant sn == (i - 1) is partially proven to be inductive.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn <= n is partially proven to be inductive.\nloop invariant i >= 1 is partially proven to be inductive.\nloop invariant i <= n is partially proven to be inductive.\nloop invariant i == (sn + 1) is partially proven to be inductive.\nloop invariant i > 0 is partially proven to be inductive.\nAssertion sn == n: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: sn == (i - 1);\nloop invariant i4: sn >= 0;\n\nloop invariant i6: i >= 1;\n\nloop invariant i8: i == (sn + 1);\nloop invariant i9: i > 0;\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn == i - 1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is neither established nor preserved.\nloop invariant sn == i - 1 is partially proven to be inductive.\nAssertion sn == n: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\nloop invariant i2: sn == i - 1;\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant sn == (i - 1);\nloop invariant n >= 0;\nloop invariant 1 <= i <= n;\nloop invariant sn == (i - 1);\nloop invariant n >= 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= i <= n is neither established nor preserved.\nloop invariant sn == (i - 1) is partially proven to be inductive.\nloop invariant n >= 0 is partially proven to be inductive.\nAssertion sn == n: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\nloop invariant i2: sn == (i - 1);\n\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= n;\nloop invariant 0 <= i <= n;\nloop invariant 0 <= sn <= n;\nloop invariant sn == (i - 1);\nloop invariant 1 <= i <= n ==> sn == (i - 1);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= n is preserved but not established.\nloop invariant 0 <= i <= n is neither established nor preserved.\nloop invariant 0 <= sn <= n is partially proven to be inductive.\nloop invariant sn == (i - 1) is partially proven to be inductive.\nloop invariant 1 <= i <= n ==> sn == (i - 1) is partially proven to be inductive.\nAssertion sn == n: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\n\nloop invariant i4: sn == (i - 1);\nloop invariant i5: 1 <= i <= n ==> sn == (i - 1);\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= sn <= n;\nloop invariant sn == i - 1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is neither established nor preserved.\nloop invariant 0 <= sn <= n is partially proven to be inductive.\nloop invariant sn == i - 1 is partially proven to be inductive.\nAssertion sn == n: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: sn == i - 1;\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 9,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= sn <= n;\nloop invariant i == sn + 1;\nloop invariant i >= 1;\nloop invariant n >= 0;\nloop invariant n == i - 1;\nloop invariant sn == i - 1;\nloop invariant sn == n - (i - 1);\nloop invariant sn == n - i + 1;\nloop invariant sn == n - i + i;\nloop invariant sn == n;\nloop invariant (sn == n) ==> ((n >= 0) && (i == n + 1));\nloop invariant (sn == n) ==> ((sn >= 0) && (i == n + 1));\nloop invariant (sn == n) ==> ((sn == n) && (i == n + 1));\nloop invariant (sn == n) ==> (sn == n);\nloop invariant (sn == n) ==> (i == n + 1);\nloop invariant (sn == n) ==> (sn == i - 1);\nloop invariant (sn == n) ==> (sn == n - i + 1);\nloop invariant (sn == n) ==> (sn == n - (i - 1));\nloop invariant (sn == n) ==> (sn == n - i + i);\nloop invariant (sn == n) ==> (sn == n);\nloop invariant (sn == n) ==> (i == n + 1);\nloop invariant (sn == n) ==> (sn == i - 1);\nloop invariant (sn == n) ==> (sn == n - i + 1);\nloop invariant (sn == n) ==> (sn == n - (i - 1));\nloop invariant (sn == n) ==> (sn == n - i + i);\nloop invariant (sn == n) ==> (sn == n);\nloop invariant (sn == n) ==> (i == n + 1);\nloop invariant (sn == n) ==> (sn == i - 1);\nloop invariant (sn == n) ==> (sn == n - i + 1);\nloop invariant (sn == n) ==> (sn == n - (i - 1));\nloop invariant (sn == n) ==> (sn == n - i + i);\nloop invariant (sn == n) ==> (sn == n);\nloop invariant (sn == n) ==> (i == n + 1);\nloop invariant (sn == n) ==> (sn == i - 1);\nloop invariant (sn == n) ==> (sn == n - i + 1);\nloop invariant (sn == n) ==> (sn == n - (i - 1));\nloop invariant (sn == n) ==> (sn == n - i + i);\nloop invariant (sn == n) ==> (sn == n);\nloop invariant (sn == n) ==> (i == n + 1);\nloop invariant (sn == n) ==> (sn == i - 1);\nloop invariant (sn == n) ==> (sn == n - i + 1);\nloop invariant (sn == n) ==> (sn == n - (i - 1));\nloop invariant (sn == n) ==> (sn == n - i + i);\nloop invariant (sn == n) ==> (sn == n);\nloop invariant (sn == n) ==> (i == n + 1);\nloop invariant (sn == n) ==> (sn == i - 1);\nloop invariant (sn == n) ==> (sn == n - i + 1);\nloop invariant (sn == n) ==> (sn == n - (i - 1));\nloop invariant (sn == n) ==> (sn == n - i + i);\nloop invariant (sn == n) ==> (sn == n);\nloop invariant (sn == n) ==> (i == n + 1);\nloop invariant (sn == n) ==> (sn == i - 1);\nloop invariant (sn == n) ==> (sn == n - i + 1);\nloop invariant (sn == n) ==> (sn == n - (i - 1));\nloop invariant (sn == n) ==> (sn == n - i + i);\nloop invariant (sn == n) ==> (sn == n);\nloop invariant (sn == n) ==> (i == n + 1);\nloop invariant (sn == n) ==> (sn == i - 1);\nloop invariant (sn == n) ==> (sn == n - i + 1);\nloop invariant (sn == n) ==> (sn == n - (i - 1));\nloop invariant (sn == n) ==> (sn == n - i + i);\nloop invariant (sn == n) ==> (sn == n);\nloop invariant (sn == n) ==> (i == n + 1);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is preserved but not established.\nloop invariant 0 <= sn <= n is partially proven to be inductive.\nloop invariant i == sn + 1 is partially proven to be inductive.\nloop invariant i >= 1 is partially proven to be inductive.\nloop invariant n >= 0 is partially proven to be inductive.\nloop invariant n == i - 1 is preserved but not established.\nloop invariant sn == i - 1 is partially proven to be inductive.\nloop invariant sn == n - (i - 1) is partially proven to be inductive.\nloop invariant sn == n - i + 1 is partially proven to be inductive.\nloop invariant sn == n - i + i is partially proven to be inductive.\nloop invariant sn == n is partially proven to be inductive.\nloop invariant (sn == n) ==> ((n >= 0) && (i == n + 1)) is partially proven to be inductive.\nloop invariant (sn == n) ==> ((sn >= 0) && (i == n + 1)) is partially proven to be inductive.\nloop invariant (sn == n) ==> ((sn == n) && (i == n + 1)) is partially proven to be inductive.\nloop invariant (sn == n) ==> (sn == n) is partially proven to be inductive.\nloop invariant (sn == n) ==> (i == n + 1) is partially proven to be inductive.\nloop invariant (sn == n) ==> (sn == i - 1) is partially proven to be inductive.\nloop invariant (sn == n) ==> (sn == n - i + 1) is partially proven to be inductive.\nloop invariant (sn == n) ==> (sn == n - (i - 1)) is partially proven to be inductive.\nloop invariant (sn == n) ==> (sn == n - i + i) is partially proven to be inductive.\nAssertion sn == n: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: i == sn + 1;\nloop invariant i4: i >= 1;\n\n\nloop invariant i7: sn == i - 1;\n\n\n\n\nloop invariant i12: (sn == n) ==> ((n >= 0) && (i == n + 1));\nloop invariant i13: (sn == n) ==> ((sn >= 0) && (i == n + 1));\nloop invariant i14: (sn == n) ==> ((sn == n) && (i == n + 1));\nloop invariant i15: (sn == n) ==> (sn == n);\nloop invariant i16: (sn == n) ==> (i == n + 1);\nloop invariant i17: (sn == n) ==> (sn == i - 1);\n\n\nloop invariant i20: (sn == n) ==> (sn == n - i + i);\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn >= 0;\nloop invariant sn == (i - 1);\nloop invariant sn >= (i - 1);\nloop invariant sn <= (i - 1);\nloop invariant (sn == (i - 1)) ==> (sn == (i - 1));\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is neither established nor preserved.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn == (i - 1) is partially proven to be inductive.\nloop invariant sn >= (i - 1) is partially proven to be inductive.\nloop invariant sn <= (i - 1) is partially proven to be inductive.\nloop invariant (sn == (i - 1)) ==> (sn == (i - 1)) is partially proven to be inductive.\nAssertion sn == n: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\nloop invariant i2: sn >= 0;\nloop invariant i3: sn == (i - 1);\nloop invariant i4: sn >= (i - 1);\nloop invariant i5: sn <= (i - 1);\nloop invariant i6: (sn == (i - 1)) ==> (sn == (i - 1));\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant ( 1 <= i <= n );\nloop invariant ( sn == (i - 1) );\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant ( 1 <= i <= n ) is neither established nor preserved.\nloop invariant ( sn == (i - 1) ) is partially proven to be inductive.\nAssertion sn == n: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\nloop invariant i2: ( sn == (i - 1) );\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= n + 1;\nloop invariant i >= 1;\nloop invariant i <= n + 1;\nloop invariant sn >= 0;\nloop invariant sn <= n;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= i <= n + 1 is preserved but not established.\nloop invariant i >= 1 is partially proven to be inductive.\nloop invariant i <= n + 1 is partially proven to be inductive.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn <= n is established but not preserved.\nAssertion sn == n: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\nloop invariant i2: i >= 1;\n\nloop invariant i4: sn >= 0;\n\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= sn <= n;\nloop invariant 0 <= i <= n;\nloop invariant sn == (n - (n - i));\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= sn <= n is preserved but not established.\nloop invariant 0 <= i <= n is preserved but not established.\nloop invariant sn == (n - (n - i)) is preserved but not established.\nAssertion sn == n: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\n\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn >= i - 1;\nloop invariant sn <= i;\nloop invariant sn == i - 1 ==> i == n + 1;\nloop invariant sn == i ==> i <= n + 1;\nloop invariant 1 <= i <= n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn >= i - 1;\nloop invariant sn <= i;\nloop invariant sn == i - 1 ==> i == n + 1;\nloop invariant sn == i ==> i <= n + 1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= i <= n is preserved but not established.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn <= n is partially proven to be inductive.\nloop invariant sn >= i - 1 is partially proven to be inductive.\nloop invariant sn <= i is partially proven to be inductive.\nloop invariant sn == i - 1 ==> i == n + 1 is preserved but not established.\nloop invariant sn == i ==> i <= n + 1 is partially proven to be inductive.\nAssertion sn == n: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\nloop invariant i2: sn >= 0;\n\nloop invariant i4: sn >= i - 1;\nloop invariant i5: sn <= i;\n\nloop invariant i7: sn == i ==> i <= n + 1;\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant i1;\nloop invariant i2;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 20: unbound logic variable i1. Ignoring loop annotation",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant 0 <= sn <= n;\nloop invariant sn == i - 1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= i <= n is neither established nor preserved.\nloop invariant 0 <= sn <= n is partially proven to be inductive.\nloop invariant sn == i - 1 is partially proven to be inductive.\nAssertion sn == n: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: sn == i - 1;\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 69: unbound logic variable i1. Ignoring loop annotation",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: sn >= i;\nloop invariant i3: n != 0 ==> sn == n;\nloop invariant i4: n == 0 ==> sn == 0;\nloop invariant i5: i == n ==> sn == n;\nloop invariant i6: i < n ==> sn < n;\nloop invariant i7: 0 <= sn <= n;\nloop invariant i8: 0 <= sn <= i;\nloop invariant i9: 0 <= sn <= n - (i - 1);\nloop invariant i10: sn >= 0;\nloop invariant i11: sn <= i - 1;\nloop invariant i12: sn <= n;\nloop invariant i13: sn == (i - 1);\nloop invariant i14: i >= 1;\nloop invariant i15: i <= n;\nloop invariant i16: i == (sn + 1);\nloop invariant i17: i > 0;\nloop invariant i18: sn == i - 1;\nloop invariant i19: 1 <= i <= n;\nloop invariant i20: n >= 0;\nloop invariant i21: 0 <= n;\nloop invariant i22: 1 <= i <= n ==> sn == (i - 1);\nloop invariant i23: i == sn + 1;\nloop invariant i24: n == i - 1;\nloop invariant i25: sn == n - (i - 1);\nloop invariant i26: sn == n - i + 1;\nloop invariant i27: sn == n - i + i;\nloop invariant i28: sn == n;\nloop invariant i29: (sn == n) ==> ((n >= 0) && (i == n + 1));\nloop invariant i30: (sn == n) ==> ((sn >= 0) && (i == n + 1));\nloop invariant i31: (sn == n) ==> ((sn == n) && (i == n + 1));\nloop invariant i32: (sn == n) ==> (sn == n);\nloop invariant i33: (sn == n) ==> (i == n + 1);\nloop invariant i34: (sn == n) ==> (sn == i - 1);\nloop invariant i35: (sn == n) ==> (sn == n - i + 1);\nloop invariant i36: (sn == n) ==> (sn == n - (i - 1));\nloop invariant i37: (sn == n) ==> (sn == n - i + i);\nloop invariant i38: sn >= (i - 1);\nloop invariant i39: sn <= (i - 1);\nloop invariant i40: (sn == (i - 1)) ==> (sn == (i - 1));\nloop invariant i41: ( 1 <= i <= n );\nloop invariant i42: ( sn == (i - 1) );\nloop invariant i43: 1 <= i <= n + 1;\nloop invariant i44: i <= n + 1;\nloop invariant i45: sn == (n - (n - i));\nloop invariant i46: sn >= i - 1;\nloop invariant i47: sn <= i;\nloop invariant i48: sn == i - 1 ==> i == n + 1;\nloop invariant i49: sn == i ==> i <= n + 1;\nloop invariant i50: i1;\nloop invariant i51: i2;\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
        "combined_annotation_num_solver_calls": 14,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\n\nloop invariant i4: n == 0 ==> sn == 0;\n\nloop invariant i6: i < n ==> sn < n;\n\nloop invariant i8: 0 <= sn <= i;\n\nloop invariant i10: sn >= 0;\nloop invariant i11: sn <= i - 1;\n\nloop invariant i13: sn == (i - 1);\nloop invariant i14: i >= 1;\n\nloop invariant i16: i == (sn + 1);\nloop invariant i17: i > 0;\nloop invariant i18: sn == i - 1;\n\n\n\nloop invariant i22: 1 <= i <= n ==> sn == (i - 1);\nloop invariant i23: i == sn + 1;\n\n\n\n\n\nloop invariant i29: (sn == n) ==> ((n >= 0) && (i == n + 1));\nloop invariant i30: (sn == n) ==> ((sn >= 0) && (i == n + 1));\nloop invariant i31: (sn == n) ==> ((sn == n) && (i == n + 1));\nloop invariant i32: (sn == n) ==> (sn == n);\nloop invariant i33: (sn == n) ==> (i == n + 1);\nloop invariant i34: (sn == n) ==> (sn == i - 1);\n\n\nloop invariant i37: (sn == n) ==> (sn == n - i + i);\nloop invariant i38: sn >= (i - 1);\nloop invariant i39: sn <= (i - 1);\nloop invariant i40: (sn == (i - 1)) ==> (sn == (i - 1));\n\nloop invariant i42: ( sn == (i - 1) );\n\n\n\nloop invariant i46: sn >= i - 1;\nloop invariant i47: sn <= i;\n\nloop invariant i49: sn == i ==> i <= n + 1;\n\n\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_nondet_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum01_true-unreach-call_true-termination.i.annot.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/85.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/ex2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/42.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/diamond_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/odd.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/even.c",
            "../dataset/loop_invariants/code2inv/24.c",
            "../dataset/loop_invariants/code2inv/130.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/diamond_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/overflow_safe1.c",
            "../dataset/loop_invariants/code2inv/113.c"
        ],
        "skipped": [],
        "total": 13,
        "success_count": 2,
        "failure_count": 11,
        "success_rate": 0.15384615384615385
    }
}