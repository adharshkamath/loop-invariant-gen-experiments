{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/22.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nvoid main()\n{\n  int x = 0;\n  int y = 0;\n  int z = 0;\n  int k = 0;\n\n  while(unknown1())\n  {\n     if(k%3 == 0)\n       x++;\n     y++;\n     z++;\n     k = x+y+z;\n  }\n\n  {;\n//@ assert(x==y && y==z);\n}\n \n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= x <= 1;\nloop invariant x <= y <= x + 1;\nloop invariant z >= x;\nloop invariant x + y + z <= 3 * x + 1;\nloop invariant x + y + z <= 3 * y;\nloop invariant x + y + z <= 3 * z;\nloop invariant x + y + z >= x;\nloop invariant x + y + z >= y;\nloop invariant x + y + z >= z;\nloop invariant x + y + z <= 3 * (x + y + z);\nloop invariant x + y + z >= 0;\nloop invariant x + y + z >= x + y + z;\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= 3 * (x + y + z);\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= 3 * (x + y + z);\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= 3 * (x + y + z);\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= 3 * (x + y + z);\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= 3 * (x + y + z);\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= 3 * (x + y + z);\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= 3 * (x + y + z);\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= 3 * (x + y + z);\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= 3 * (x + y + z);\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= 3 * (x + y + z);\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= 3 * (x + y + z);\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= 3 * (x + y + z);\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= 3 * (x + y + z);\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= 3 * (x + y + z);\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= 3 * (x + y + z);\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= 3 * (x + y + z);\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= 3 * (x + y + z);\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= 3 * (x + y + z);\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= 3 * (x + y + z);\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= 3 * (x + y + z);\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= 3 * (x + y + z);\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= 3 * (x + y + z);\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= 3 * (x + y + z);\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= 3 * (x + y + z);\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= 3 * (x + y + z);\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= 3 * (x + y + z);\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= 3 * (x + y + z);\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= 3 * (x + y + z);\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= 3 * (x + y + z);\nloop invariant x + y + z >= 0;\n*/\n```",
            "```\n/*@\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant z >= 0;\nloop invariant k >= 0;\nloop invariant k <= x+y+z;\nloop invariant k >= x+y+z || unknown1() == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= z;\nloop invariant 0 <= k;\nloop invariant x <= x + 1;\nloop invariant y <= y + 1;\nloop invariant z <= z + 1;\nloop invariant k <= x + y + z;\nloop invariant k >= x;\nloop invariant k >= y;\nloop invariant k >= z;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant x <= z;\nloop invariant x <= x + 1;\nloop invariant y <= y + 1;\nloop invariant z <= z + 1;\nloop invariant x <= y + 1;\nloop invariant y <= z + 1;\nloop invariant x <= z + 1;\nloop invariant x <= x + 1;\nloop invariant y <= y + 1;\nloop invariant z <= z + 1;\nloop invariant x <= y + 1;\nloop invariant y <= z + 1;\nloop invariant x <= z + 1;\nloop invariant x <= x + 1;\nloop invariant y <= y + 1;\nloop invariant z <= z + 1;\nloop invariant x <= y + 1;\nloop invariant y <= z + 1;\nloop invariant x <= z + 1;\nloop invariant x <= x + 1;\nloop invariant y <= y + 1;\nloop invariant z <= z + 1;\nloop invariant x <= y + 1;\nloop invariant y <= z + 1;\nloop invariant x <= z + 1;\nloop invariant x <= x + 1;\nloop invariant y <= y + 1;\nloop invariant z <= z + 1;\nloop invariant x <= y + 1;\nloop invariant y <= z + 1;\nloop invariant x <= z + 1;\nloop invariant x <= x + 1;\nloop invariant y <= y + 1;\nloop invariant z <= z + 1;\nloop invariant x <= y + 1;\nloop invariant y <= z + 1;\nloop invariant x <= z + 1;\nloop invariant x <= x + 1;\nloop invariant y <= y + 1;\nloop invariant z <= z + 1;\nloop invariant x <= y + 1;\nloop invariant y <= z + 1;\nloop invariant x <= z + 1;\nloop invariant x <= x + 1;\nloop invariant y <= y + 1;\nloop invariant z <= z + 1;\nloop invariant x <= y + 1;\nloop invariant y <= z + 1;\nloop invariant x <= z + 1;\nloop invariant x <= x + 1;\nloop invariant y <= y + 1;\nloop invariant z <= z + 1;\nloop invariant x <= y + 1;\nloop invariant y <= z + 1;\nloop invariant x <= z + 1;\nloop invariant x <= x + 1;\nloop invariant y <= y + 1;\nloop invariant z <= z + 1;\nloop invariant x <= y + 1;\nloop invariant y <= z + 1;\nloop invariant x <= z + 1;\nloop invariant x <= x + 1;\nloop invariant y <= y + 1;\nloop invariant z <= z + 1;\nloop invariant x <= y + 1;\nloop invariant y <= z + 1;\nloop invariant x <= z + 1;\nloop invariant x <= x + 1;\nloop invariant y <= y + 1;\nloop invariant z <= z + 1;\nloop invariant x <= y + 1;\nloop invariant y <= z + 1;\nloop invariant x <= z + 1;\nloop invariant x <= x + 1;\nloop invariant y <= y + 1;\nloop invariant z <= z + 1;\nloop invariant x <= y + 1;\nloop invariant y <= z + 1;\nloop invariant x <= z + 1;\nloop invariant x <= x + 1;\nloop invariant y <= y + 1;\nloop invariant z <= z + 1;\nloop invariant x <= y + 1;\nloop invariant y <= z + 1;\nloop invariant x <= z + 1;\nloop invariant x <= x + 1;\nloop invariant y <= y + 1;\nloop invariant z <= z + 1;\nloop invariant x <= y + 1;\nloop invariant y <= z + 1;\nloop invariant x <= z + 1;\nloop invariant x <= x + 1;\nloop invariant y <= y + 1;\nloop invariant z <= z + 1;\nloop invariant x <= y + 1;\nloop invariant y <= z + 1;\nloop invariant x <= z + 1;\nloop invariant x <= x + 1;\nloop invariant y <= y + 1;\nloop invariant z <= z + 1;\n*/\n```",
            "```\n/*@\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant k >= 0;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= k;\nloop invariant k == x + y + z;\nloop invariant y >= k % 3;\nloop invariant k % 3 < 3;\nloop invariant k % 3 == 0 ==> x == k / 3;\nloop invariant k % 3 == 1 ==> y == (k - 1) / 3;\nloop invariant k % 3 == 2 ==> z == (k - 2) / 3;\nloop invariant k % 3 == 0 ==> x == (k - 2) / 3;\nloop invariant k % 3 == 1 ==> y == (k - 1) / 3;\nloop invariant k % 3 == 2 ==> z == (k - 2) / 3;\nloop invariant k % 3 == 0 ==> x == (k - 2) / 3;\nloop invariant k % 3 == 1 ==> y == (k - 1) / 3;\nloop invariant k % 3 == 2 ==> z == (k - 2) / 3;\nloop invariant k % 3 == 0 ==> x == (k - 2) / 3;\nloop invariant k % 3 == 1 ==> y == (k - 1) / 3;\nloop invariant k % 3 == 2 ==> z == (k - 2) / 3;\nloop invariant k % 3 == 0 ==> x == (k - 2) / 3;\nloop invariant k % 3 == 1 ==> y == (k - 1) / 3;\nloop invariant k % 3 == 2 ==> z == (k - 2) / 3;\nloop invariant k % 3 == 0 ==> x == (k - 2) / 3;\nloop invariant k % 3 == 1 ==> y == (k - 1) / 3;\nloop invariant k % 3 == 2 ==> z == (k - 2) / 3;\nloop invariant k % 3 == 0 ==> x == (k - 2) / 3;\nloop invariant k % 3 == 1 ==> y == (k - 1) / 3;\nloop invariant k % 3 == 2 ==> z == (k - 2) / 3;\nloop invariant k % 3 == 0 ==> x == (k - 2) / 3;\nloop invariant k % 3 == 1 ==> y == (k - 1) / 3;\nloop invariant k % 3 == 2 ==> z == (k - 2) / 3;\nloop invariant k % 3 == 0 ==> x == (k - 2) / 3;\nloop invariant k % 3 == 1 ==> y == (k - 1) / 3;\nloop invariant k % 3 == 2 ==> z == (k - 2) / 3;\nloop invariant k % 3 == 0 ==> x == (k - 2) / 3;\nloop invariant k % 3 == 1 ==> y == (k - 1) / 3;\nloop invariant k % 3 == 2 ==> z == (k - 2) / 3;\nloop invariant k % 3 == 0 ==> x == (k - 2) / 3;\nloop invariant k % 3 == 1 ==> y == (k - 1) / 3;\nloop invariant k % 3 == 2 ==> z == (k - 2) / 3;\nloop invariant k % 3 == 0 ==> x == (k - 2) / 3;\nloop invariant k % 3 == 1 ==> y == (k - 1) / 3;\nloop invariant k % 3 == 2 ==> z == (k - 2) / 3;\nloop invariant k % 3 == 0 ==> x == (k - 2) / 3;\nloop invariant k % 3 == 1 ==> y == (k - 1) / 3;\nloop invariant k % 3 == 2 ==> z == (k - 2) / 3;\nloop invariant k % 3 == 0 ==> x == (k - 2) / 3;\nloop invariant k % 3 == 1 ==> y == (k - 1) / 3;\nloop invariant k % 3 == 2 ==> z == (k - 2) / 3;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= k;\nloop invariant 0 <= x <= k;\nloop invariant 0 <= y <= k;\nloop invariant 0 <= z <= k;\nloop invariant x + y + z == k;\nloop invariant k % 3 == 0 ==> x == y && y == z;\nloop invariant k % 3 != 0 ==> x + y + z == k;\n*/\n```",
            "```\n/*@\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant k >= 0;\nloop invariant x >= 0;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= k;\nloop invariant y <= k;\nloop invariant z <= k;\nloop invariant (k == x + y + z) ==> (k >= x);\nloop invariant (k == x + y + z) ==> (k >= y);\nloop invariant (k == x + y + z) ==> (k >= z);\nloop invariant (k == x + y + z) ==> (x >= 0);\nloop invariant (k == x + y + z) ==> (y >= 0);\nloop invariant (k == x + y + z) ==> (z >= 0);\nloop invariant (k == x + y + z) ==> (x <= y);\nloop invariant (k == x + y + z) ==> (y <= z);\nloop invariant (k == x + y + z) ==> (z <= k);\nloop invariant (k == x + y + z) ==> (y <= k);\nloop invariant (k == x + y + z) ==> (z <= k);\nloop invariant (k == x + y + z) ==> (x == y);\nloop invariant (k == x + y + z) ==> (y == z);\nloop invariant (k == x + y + z) ==> (z == k);\nloop invariant (k == x + y + z) ==> (x >= 0);\nloop invariant (k == x + y + z) ==> (y >= 0);\nloop invariant (k == x + y + z) ==> (z >= 0);\nloop invariant (k == x + y + z) ==> (x <= y);\nloop invariant (k == x + y + z) ==> (y <= z);\nloop invariant (k == x + y + z) ==> (z <= k);\nloop invariant (k == x + y + z) ==> (y <= k);\nloop invariant (k == x + y + z) ==> (z <= k);\nloop invariant (k == x + y + z) ==> (x == y);\nloop invariant (k == x + y + z) ==> (y == z);\nloop invariant (k == x + y + z) ==> (z == k);\nloop invariant (k == x + y + z) ==> (x >= 0);\nloop invariant (k == x + y + z) ==> (y >= 0);\nloop invariant (k == x + y + z) ==> (z >= 0);\nloop invariant (k == x + y + z) ==> (x <= y);\nloop invariant (k == x + y + z) ==> (y <= z);\nloop invariant (k == x + y + z) ==> (z <= k);\nloop invariant (k == x + y + z) ==> (y <= k);\nloop invariant (k == x + y + z) ==> (z <= k);\nloop invariant (k == x + y + z) ==> (x == y);\nloop invariant (k == x + y + z) ==> (y == z);\nloop invariant (k == x + y + z) ==> (z == k);\nloop invariant (k == x + y + z) ==> (x >= 0);\nloop invariant (k == x + y + z) ==> (y >= 0);\nloop invariant (k == x + y + z) ==> (z >= 0);\nloop invariant (k == x + y + z) ==> (x <= y);\nloop invariant (k == x + y + z) ==> (y <= z);\nloop invariant (k == x + y + z) ==> (z <= k);\nloop invariant (k == x + y + z) ==> (y <= k);\nloop invariant (k == x + y + z) ==> (z <= k);\nloop invariant (k == x + y + z) ==> (x == y);\nloop invariant (k == x + y + z) ==> (y == z);\nloop invariant (k == x + y + z) ==> (z == k);\nloop invariant (k == x + y + z) ==> (x >= 0);\nloop invariant (k == x + y + z) ==> (y >= 0);\nloop invariant (k == x + y + z) ==> (z >= 0);\nloop invariant (k == x + y + z) ==> (x <= y);\nloop invariant (k == x + y + z) ==> (y <= z);\nloop invariant (k == x + y + z) ==> (z <= k);\nloop invariant (k == x + y + z) ==> (y <= k);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= z;\nloop invariant 0 <= k;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z == x + y;\nloop invariant k == x + y + z;\nloop invariant x <= y + z;\nloop invariant y <= x + z;\nloop invariant z <= x + y;\nloop invariant x <= y <= z;\nloop invariant y <= x <= z;\nloop invariant z <= y <= x;\nloop invariant k == 2 * x + 2 * y + 2 * z;\nloop invariant k == 3 * (x + y + z);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= y <= z;\nloop invariant x + y + z == k;\nloop invariant k%3 == 0 ==> x == 0;\nloop invariant k%3 == 1 ==> x == 1;\nloop invariant k%3 == 2 ==> x == 2;\nloop invariant unknown1() ==> x + y + z == k;\nloop invariant !unknown1() ==> x + y + z == k;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= y <= z <= INT_MAX;\nloop invariant k = x + y + z;\nloop invariant k % 3 == 0 ==> x <= y <= z;\nloop invariant k % 3 != 0 ==> x <= y <= z;\nloop invariant k % 3 == 0 ==> x == y == z;\nloop invariant k % 3 != 0 ==> x == y == z;\nloop invariant 0 <= x <= y <= z <= INT_MAX;\nloop invariant k = x + y + z;\nloop invariant k % 3 == 0 ==> x <= y <= z;\nloop invariant k % 3 != 0 ==> x <= y <= z;\nloop invariant k % 3 == 0 ==> x == y == z;\nloop invariant k % 3 != 0 ==> x == y == z;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= k;\nloop invariant 0 <= y <= k;\nloop invariant 0 <= z <= k;\nloop invariant x <= y && y <= z;\nloop invariant x <= k;\nloop invariant y <= k;\nloop invariant z <= k;\nloop invariant x + y + z == k;\nloop invariant x == y && y == z ==> k % 3 == 0;\nloop invariant x + y + z == k ==> k % 3 == 0;\nloop invariant x + y + z == k ==> x == y && y == z;\nloop invariant x + y + z == k ==> x == y;\nloop invariant x + y + z == k ==> y == z;\nloop invariant x + y + z == k ==> x == z;\nloop invariant x + y + z == k ==> x == y && y == z;\nloop invariant x + y + z == k ==> x == y || y == z;\nloop invariant x + y + z == k ==> x == y || z == y;\nloop invariant x + y + z == k ==> x == y || y == z || z == y;\nloop invariant x + y + z == k ==> x == y || y == z || z == y || x == z;\nloop invariant x + y + z == k ==> x == y || y == z || z == y || x == z || x == y && y == z;\nloop invariant x + y + z == k ==> x == y || y == z || z == y || x == z || x == y && y == z || x == y || y == z;\nloop invariant x + y + z == k ==> x == y || y == z || z == y || x == z || x == y && y == z || x == y || y == z || x == z;\nloop invariant x + y + z == k ==> x == y || y == z || z == y || x == z || x == y && y == z || x == y || y == z || x == z || x == y && y == z;\nloop invariant x + y + z == k ==> x == y || y == z || z == y || x == z || x == y && y == z || x == y || y == z || x == z || x == y && y == z || x == y || y == z;\nloop invariant x + y + z == k ==> x == y || y == z || z == y || x == z || x == y && y == z || x == y || y == z || x == z || x == y && y == z || x == y || y == z || x == z;\nloop invariant x + y + z == k ==> x == y || y == z || z == y || x == z || x == y && y == z || x == y || y == z || x == z || x == y && y == z || x == y || y == z || x == z || x == y && y == z;\nloop invariant x + y + z == k ==> x == y || y == z || z == y || x == z || x == y && y == z || x == y || y == z || x == z || x == y && y == z || x == y || y == z || x == z || x == y && y == z || x == y || y == z;\nloop invariant x + y + z == k ==> x == y || y == z || z == y || x == z || x == y && y == z || x == y || y == z || x == z || x == y && y == z || x == y || y == z || x == z || x == y && y == z || x == y || y == z || x == z;\nloop invariant x + y + z == k ==> x == y || y == z || z == y || x == z || x == y && y == z || x == y || y == z || x == z || x == y && y == z || x == y || y == z || x == z || x == y && y == z || x == y || y == z || x == z || x == y && y == z;\n*/\n```",
            "```\n/*@\nloop invariant x <= y <= z;\nloop invariant k == x+y+z;\nloop invariant k%3 >= 0 && k%3 <= 2;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant x + y + z == k;\nloop invariant x == y ==> x%3 == y%3;\nloop invariant x == z ==> x%3 == z%3;\nloop invariant y == z ==> y%3 == z%3;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= y <= z <= k;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant 0 <= y <= z;\nloop invariant 0 <= z;\nloop invariant x + y + z = k;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant k >= 0;\nloop invariant x + y + z >= k;\nloop invariant x + y + z <= k;\nloop invariant x + y + z == k;\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= k;\nloop invariant x + y + z == k;\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= k;\nloop invariant x + y + z == k;\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= k;\nloop invariant x + y + z == k;\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= k;\nloop invariant x + y + z == k;\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= k;\nloop invariant x + y + z == k;\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= k;\nloop invariant x + y + z == k;\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= k;\nloop invariant x + y + z == k;\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= k;\nloop invariant x + y + z == k;\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= k;\nloop invariant x + y + z == k;\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= k;\nloop invariant x + y + z == k;\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= k;\nloop invariant x + y + z == k;\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= k;\nloop invariant x + y + z == k;\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= k;\nloop invariant x + y + z == k;\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= k;\nloop invariant x + y + z == k;\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= k;\nloop invariant x + y + z == k;\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= k;\nloop invariant x + y + z == k;\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= k;\nloop invariant x + y + z == k;\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= k;\nloop invariant x + y + z == k;\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= k;\nloop invariant x + y + z == k;\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= k;\nloop invariant x + y + z == k;\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= k;\nloop invariant x + y + z == k;\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= k;\nloop invariant x + y + z == k;\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= k;\nloop invariant x + y + z == k;\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= k;\nloop invariant x + y + z == k;\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= k;\nloop invariant x + y + z == k;\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= k;\nloop invariant x + y + z == k;\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= k;\nloop invariant x + y + z == k;\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= k;\nloop invariant x + y + z == k;\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= k;\nloop invariant x + y + z == k;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= x+y+z;\nloop invariant 0 <= x <= y+z;\nloop invariant 0 <= z <= x+y;\nloop invariant y+z <= x;\nloop invariant x+y <= z;\nloop invariant x+y+z <= k;\n*/\n```",
            "```\n/*@\nloop invariant 1 -> 1 <= k <= x+y+z;\nloop invariant 2 -> k%(3*x+y+z) == 0;\nloop invariant 3 -> x >= 0;\nloop invariant 4 -> y >= 0;\nloop invariant 5 -> z >= 0;\nloop invariant 6 -> k >= 1;\nloop invariant 7 -> x <= y;\nloop invariant 8 -> y <= z;\nloop invariant 9 -> x <= z;\nloop invariant 10 -> x <= k;\nloop invariant 11 -> y <= k;\nloop invariant 12 -> z <= k;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 1;\nloop invariant x <= y <= x + 1;\nloop invariant z >= x;\nloop invariant x + y + z <= 3 * x + 1;\nloop invariant x + y + z <= 3 * y;\nloop invariant x + y + z <= 3 * z;\nloop invariant x + y + z >= x;\nloop invariant x + y + z >= y;\nloop invariant x + y + z >= z;\nloop invariant x + y + z <= 3 * (x + y + z);\nloop invariant x + y + z >= 0;\nloop invariant x + y + z >= x + y + z;\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= 3 * (x + y + z);\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= 3 * (x + y + z);\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= 3 * (x + y + z);\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= 3 * (x + y + z);\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= 3 * (x + y + z);\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= 3 * (x + y + z);\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= 3 * (x + y + z);\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= 3 * (x + y + z);\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= 3 * (x + y + z);\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= 3 * (x + y + z);\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= 3 * (x + y + z);\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= 3 * (x + y + z);\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= 3 * (x + y + z);\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= 3 * (x + y + z);\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= 3 * (x + y + z);\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= 3 * (x + y + z);\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= 3 * (x + y + z);\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= 3 * (x + y + z);\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= 3 * (x + y + z);\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= 3 * (x + y + z);\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= 3 * (x + y + z);\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= 3 * (x + y + z);\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= 3 * (x + y + z);\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= 3 * (x + y + z);\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= 3 * (x + y + z);\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= 3 * (x + y + z);\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= 3 * (x + y + z);\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= 3 * (x + y + z);\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= 3 * (x + y + z);\nloop invariant x + y + z >= 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 1 is established but not preserved.\nloop invariant x <= y <= x + 1 is partially proven to be inductive.\nloop invariant z >= x is partially proven to be inductive.\nloop invariant x + y + z <= 3 * x + 1 is established but not preserved.\nloop invariant x + y + z <= 3 * y is partially proven to be inductive.\nloop invariant x + y + z <= 3 * z is partially proven to be inductive.\nloop invariant x + y + z >= x is partially proven to be inductive.\nloop invariant x + y + z >= y is partially proven to be inductive.\nloop invariant x + y + z >= z is partially proven to be inductive.\nloop invariant x + y + z <= 3 * (x + y + z) is partially proven to be inductive.\nloop invariant x + y + z >= 0 is partially proven to be inductive.\nloop invariant x + y + z >= x + y + z is partially proven to be inductive.\nAssertion x == y == z: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nvoid main()\n{\n  int x = 0;\n  int y = 0;\n  int z = 0;\n  int k = 0;\n\n  /*@\n\n\nloop invariant i3: z >= x;\n\nloop invariant i5: x + y + z <= 3 * y;\nloop invariant i6: x + y + z <= 3 * z;\nloop invariant i7: x + y + z >= x;\nloop invariant i8: x + y + z >= y;\nloop invariant i9: x + y + z >= z;\nloop invariant i10: x + y + z <= 3 * (x + y + z);\nloop invariant i11: x + y + z >= 0;\nloop invariant i12: x + y + z >= x + y + z;\n*/\nwhile(unknown1())\n  {\n     if(k%3 == 0)\n       x++;\n     y++;\n     z++;\n     k = x+y+z;\n  }\n\n  {;\n//@ assert(x==y && y==z);\n}\n \n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant z >= 0;\nloop invariant k >= 0;\nloop invariant k <= x+y+z;\nloop invariant k >= x+y+z || unknown1() == 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 22: unexpected token ')'",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nvoid main()\n{\n  int x = 0;\n  int y = 0;\n  int z = 0;\n  int k = 0;\n\n  /*@\nloop invariant i1: y >= 0;\nloop invariant i2: x >= 0;\nloop invariant i3: z >= 0;\nloop invariant i4: k >= 0;\nloop invariant i5: k <= x+y+z;\n\n*/\nwhile(unknown1())\n  {\n     if(k%3 == 0)\n       x++;\n     y++;\n     z++;\n     k = x+y+z;\n  }\n\n  {;\n//@ assert(x==y && y==z);\n}\n \n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= z;\nloop invariant 0 <= k;\nloop invariant x <= x + 1;\nloop invariant y <= y + 1;\nloop invariant z <= z + 1;\nloop invariant k <= x + y + z;\nloop invariant k >= x;\nloop invariant k >= y;\nloop invariant k >= z;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant x <= z;\nloop invariant x <= x + 1;\nloop invariant y <= y + 1;\nloop invariant z <= z + 1;\nloop invariant x <= y + 1;\nloop invariant y <= z + 1;\nloop invariant x <= z + 1;\nloop invariant x <= x + 1;\nloop invariant y <= y + 1;\nloop invariant z <= z + 1;\nloop invariant x <= y + 1;\nloop invariant y <= z + 1;\nloop invariant x <= z + 1;\nloop invariant x <= x + 1;\nloop invariant y <= y + 1;\nloop invariant z <= z + 1;\nloop invariant x <= y + 1;\nloop invariant y <= z + 1;\nloop invariant x <= z + 1;\nloop invariant x <= x + 1;\nloop invariant y <= y + 1;\nloop invariant z <= z + 1;\nloop invariant x <= y + 1;\nloop invariant y <= z + 1;\nloop invariant x <= z + 1;\nloop invariant x <= x + 1;\nloop invariant y <= y + 1;\nloop invariant z <= z + 1;\nloop invariant x <= y + 1;\nloop invariant y <= z + 1;\nloop invariant x <= z + 1;\nloop invariant x <= x + 1;\nloop invariant y <= y + 1;\nloop invariant z <= z + 1;\nloop invariant x <= y + 1;\nloop invariant y <= z + 1;\nloop invariant x <= z + 1;\nloop invariant x <= x + 1;\nloop invariant y <= y + 1;\nloop invariant z <= z + 1;\nloop invariant x <= y + 1;\nloop invariant y <= z + 1;\nloop invariant x <= z + 1;\nloop invariant x <= x + 1;\nloop invariant y <= y + 1;\nloop invariant z <= z + 1;\nloop invariant x <= y + 1;\nloop invariant y <= z + 1;\nloop invariant x <= z + 1;\nloop invariant x <= x + 1;\nloop invariant y <= y + 1;\nloop invariant z <= z + 1;\nloop invariant x <= y + 1;\nloop invariant y <= z + 1;\nloop invariant x <= z + 1;\nloop invariant x <= x + 1;\nloop invariant y <= y + 1;\nloop invariant z <= z + 1;\nloop invariant x <= y + 1;\nloop invariant y <= z + 1;\nloop invariant x <= z + 1;\nloop invariant x <= x + 1;\nloop invariant y <= y + 1;\nloop invariant z <= z + 1;\nloop invariant x <= y + 1;\nloop invariant y <= z + 1;\nloop invariant x <= z + 1;\nloop invariant x <= x + 1;\nloop invariant y <= y + 1;\nloop invariant z <= z + 1;\nloop invariant x <= y + 1;\nloop invariant y <= z + 1;\nloop invariant x <= z + 1;\nloop invariant x <= x + 1;\nloop invariant y <= y + 1;\nloop invariant z <= z + 1;\nloop invariant x <= y + 1;\nloop invariant y <= z + 1;\nloop invariant x <= z + 1;\nloop invariant x <= x + 1;\nloop invariant y <= y + 1;\nloop invariant z <= z + 1;\nloop invariant x <= y + 1;\nloop invariant y <= z + 1;\nloop invariant x <= z + 1;\nloop invariant x <= x + 1;\nloop invariant y <= y + 1;\nloop invariant z <= z + 1;\nloop invariant x <= y + 1;\nloop invariant y <= z + 1;\nloop invariant x <= z + 1;\nloop invariant x <= x + 1;\nloop invariant y <= y + 1;\nloop invariant z <= z + 1;\nloop invariant x <= y + 1;\nloop invariant y <= z + 1;\nloop invariant x <= z + 1;\nloop invariant x <= x + 1;\nloop invariant y <= y + 1;\nloop invariant z <= z + 1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x is inductive.\nloop invariant 0 <= y is inductive.\nloop invariant 0 <= z is inductive.\nloop invariant 0 <= k is inductive.\nloop invariant x <= x + 1 is inductive.\nloop invariant y <= y + 1 is inductive.\nloop invariant z <= z + 1 is inductive.\nloop invariant k <= x + y + z is inductive.\nloop invariant k >= x is inductive.\nloop invariant k >= y is inductive.\nloop invariant k >= z is inductive.\nloop invariant x <= y is inductive.\nloop invariant y <= z is inductive.\nloop invariant x <= z is inductive.\nloop invariant x <= y + 1 is inductive.\nloop invariant y <= z + 1 is inductive.\nloop invariant x <= z + 1 is inductive.\nAssertion x == y == z: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nvoid main()\n{\n  int x = 0;\n  int y = 0;\n  int z = 0;\n  int k = 0;\n\n  /*@\nloop invariant i1: 0 <= x;\nloop invariant i2: 0 <= y;\nloop invariant i3: 0 <= z;\nloop invariant i4: 0 <= k;\nloop invariant i5: x <= x + 1;\nloop invariant i6: y <= y + 1;\nloop invariant i7: z <= z + 1;\nloop invariant i8: k <= x + y + z;\nloop invariant i9: k >= x;\nloop invariant i10: k >= y;\nloop invariant i11: k >= z;\nloop invariant i12: x <= y;\nloop invariant i13: y <= z;\nloop invariant i14: x <= z;\nloop invariant i15: x <= y + 1;\nloop invariant i16: y <= z + 1;\nloop invariant i17: x <= z + 1;\n*/\nwhile(unknown1())\n  {\n     if(k%3 == 0)\n       x++;\n     y++;\n     z++;\n     k = x+y+z;\n  }\n\n  {;\n//@ assert(x==y && y==z);\n}\n \n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant k >= 0;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= k;\nloop invariant k == x + y + z;\nloop invariant y >= k % 3;\nloop invariant k % 3 < 3;\nloop invariant k % 3 == 0 ==> x == k / 3;\nloop invariant k % 3 == 1 ==> y == (k - 1) / 3;\nloop invariant k % 3 == 2 ==> z == (k - 2) / 3;\nloop invariant k % 3 == 0 ==> x == (k - 2) / 3;\nloop invariant k % 3 == 1 ==> y == (k - 1) / 3;\nloop invariant k % 3 == 2 ==> z == (k - 2) / 3;\nloop invariant k % 3 == 0 ==> x == (k - 2) / 3;\nloop invariant k % 3 == 1 ==> y == (k - 1) / 3;\nloop invariant k % 3 == 2 ==> z == (k - 2) / 3;\nloop invariant k % 3 == 0 ==> x == (k - 2) / 3;\nloop invariant k % 3 == 1 ==> y == (k - 1) / 3;\nloop invariant k % 3 == 2 ==> z == (k - 2) / 3;\nloop invariant k % 3 == 0 ==> x == (k - 2) / 3;\nloop invariant k % 3 == 1 ==> y == (k - 1) / 3;\nloop invariant k % 3 == 2 ==> z == (k - 2) / 3;\nloop invariant k % 3 == 0 ==> x == (k - 2) / 3;\nloop invariant k % 3 == 1 ==> y == (k - 1) / 3;\nloop invariant k % 3 == 2 ==> z == (k - 2) / 3;\nloop invariant k % 3 == 0 ==> x == (k - 2) / 3;\nloop invariant k % 3 == 1 ==> y == (k - 1) / 3;\nloop invariant k % 3 == 2 ==> z == (k - 2) / 3;\nloop invariant k % 3 == 0 ==> x == (k - 2) / 3;\nloop invariant k % 3 == 1 ==> y == (k - 1) / 3;\nloop invariant k % 3 == 2 ==> z == (k - 2) / 3;\nloop invariant k % 3 == 0 ==> x == (k - 2) / 3;\nloop invariant k % 3 == 1 ==> y == (k - 1) / 3;\nloop invariant k % 3 == 2 ==> z == (k - 2) / 3;\nloop invariant k % 3 == 0 ==> x == (k - 2) / 3;\nloop invariant k % 3 == 1 ==> y == (k - 1) / 3;\nloop invariant k % 3 == 2 ==> z == (k - 2) / 3;\nloop invariant k % 3 == 0 ==> x == (k - 2) / 3;\nloop invariant k % 3 == 1 ==> y == (k - 1) / 3;\nloop invariant k % 3 == 2 ==> z == (k - 2) / 3;\nloop invariant k % 3 == 0 ==> x == (k - 2) / 3;\nloop invariant k % 3 == 1 ==> y == (k - 1) / 3;\nloop invariant k % 3 == 2 ==> z == (k - 2) / 3;\nloop invariant k % 3 == 0 ==> x == (k - 2) / 3;\nloop invariant k % 3 == 1 ==> y == (k - 1) / 3;\nloop invariant k % 3 == 2 ==> z == (k - 2) / 3;\nloop invariant k % 3 == 0 ==> x == (k - 2) / 3;\nloop invariant k % 3 == 1 ==> y == (k - 1) / 3;\nloop invariant k % 3 == 2 ==> z == (k - 2) / 3;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x >= 0 is partially proven to be inductive.\nloop invariant y >= 0 is partially proven to be inductive.\nloop invariant z >= 0 is partially proven to be inductive.\nloop invariant k >= 0 is partially proven to be inductive.\nloop invariant x <= y is partially proven to be inductive.\nloop invariant y <= z is partially proven to be inductive.\nloop invariant z <= k is partially proven to be inductive.\nloop invariant k == x + y + z is partially proven to be inductive.\nloop invariant y >= k % 3 is partially proven to be inductive.\nloop invariant k % 3 < 3 is partially proven to be inductive.\nloop invariant k % 3 == 0 ==> x == k / 3 is established but not preserved.\nloop invariant k % 3 == 1 ==> y == (k - 1) / 3 is partially proven to be inductive.\nloop invariant k % 3 == 2 ==> z == (k - 2) / 3 is partially proven to be inductive.\nloop invariant k % 3 == 0 ==> x == (k - 2) / 3 is established but not preserved.\nAssertion x == y == z: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nvoid main()\n{\n  int x = 0;\n  int y = 0;\n  int z = 0;\n  int k = 0;\n\n  /*@\nloop invariant i1: x >= 0;\nloop invariant i2: y >= 0;\nloop invariant i3: z >= 0;\nloop invariant i4: k >= 0;\nloop invariant i5: x <= y;\nloop invariant i6: y <= z;\nloop invariant i7: z <= k;\nloop invariant i8: k == x + y + z;\nloop invariant i9: y >= k % 3;\nloop invariant i10: k % 3 < 3;\n\nloop invariant i12: k % 3 == 1 ==> y == (k - 1) / 3;\nloop invariant i13: k % 3 == 2 ==> z == (k - 2) / 3;\n\n*/\nwhile(unknown1())\n  {\n     if(k%3 == 0)\n       x++;\n     y++;\n     z++;\n     k = x+y+z;\n  }\n\n  {;\n//@ assert(x==y && y==z);\n}\n \n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= k;\nloop invariant 0 <= x <= k;\nloop invariant 0 <= y <= k;\nloop invariant 0 <= z <= k;\nloop invariant x + y + z == k;\nloop invariant k % 3 == 0 ==> x == y && y == z;\nloop invariant k % 3 != 0 ==> x + y + z == k;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= k is partially proven to be inductive.\nloop invariant 0 <= x <= k is partially proven to be inductive.\nloop invariant 0 <= y <= k is partially proven to be inductive.\nloop invariant 0 <= z <= k is partially proven to be inductive.\nloop invariant x + y + z == k is partially proven to be inductive.\nloop invariant k % 3 == 0 ==> x == y && y == z is established but not preserved.\nloop invariant k % 3 != 0 ==> x + y + z == k is partially proven to be inductive.\nAssertion x == y == z: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nvoid main()\n{\n  int x = 0;\n  int y = 0;\n  int z = 0;\n  int k = 0;\n\n  /*@\nloop invariant i1: 0 <= k;\nloop invariant i2: 0 <= x <= k;\nloop invariant i3: 0 <= y <= k;\nloop invariant i4: 0 <= z <= k;\nloop invariant i5: x + y + z == k;\n\nloop invariant i7: k % 3 != 0 ==> x + y + z == k;\n*/\nwhile(unknown1())\n  {\n     if(k%3 == 0)\n       x++;\n     y++;\n     z++;\n     k = x+y+z;\n  }\n\n  {;\n//@ assert(x==y && y==z);\n}\n \n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant k >= 0;\nloop invariant x >= 0;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= k;\nloop invariant y <= k;\nloop invariant z <= k;\nloop invariant (k == x + y + z) ==> (k >= x);\nloop invariant (k == x + y + z) ==> (k >= y);\nloop invariant (k == x + y + z) ==> (k >= z);\nloop invariant (k == x + y + z) ==> (x >= 0);\nloop invariant (k == x + y + z) ==> (y >= 0);\nloop invariant (k == x + y + z) ==> (z >= 0);\nloop invariant (k == x + y + z) ==> (x <= y);\nloop invariant (k == x + y + z) ==> (y <= z);\nloop invariant (k == x + y + z) ==> (z <= k);\nloop invariant (k == x + y + z) ==> (y <= k);\nloop invariant (k == x + y + z) ==> (z <= k);\nloop invariant (k == x + y + z) ==> (x == y);\nloop invariant (k == x + y + z) ==> (y == z);\nloop invariant (k == x + y + z) ==> (z == k);\nloop invariant (k == x + y + z) ==> (x >= 0);\nloop invariant (k == x + y + z) ==> (y >= 0);\nloop invariant (k == x + y + z) ==> (z >= 0);\nloop invariant (k == x + y + z) ==> (x <= y);\nloop invariant (k == x + y + z) ==> (y <= z);\nloop invariant (k == x + y + z) ==> (z <= k);\nloop invariant (k == x + y + z) ==> (y <= k);\nloop invariant (k == x + y + z) ==> (z <= k);\nloop invariant (k == x + y + z) ==> (x == y);\nloop invariant (k == x + y + z) ==> (y == z);\nloop invariant (k == x + y + z) ==> (z == k);\nloop invariant (k == x + y + z) ==> (x >= 0);\nloop invariant (k == x + y + z) ==> (y >= 0);\nloop invariant (k == x + y + z) ==> (z >= 0);\nloop invariant (k == x + y + z) ==> (x <= y);\nloop invariant (k == x + y + z) ==> (y <= z);\nloop invariant (k == x + y + z) ==> (z <= k);\nloop invariant (k == x + y + z) ==> (y <= k);\nloop invariant (k == x + y + z) ==> (z <= k);\nloop invariant (k == x + y + z) ==> (x == y);\nloop invariant (k == x + y + z) ==> (y == z);\nloop invariant (k == x + y + z) ==> (z == k);\nloop invariant (k == x + y + z) ==> (x >= 0);\nloop invariant (k == x + y + z) ==> (y >= 0);\nloop invariant (k == x + y + z) ==> (z >= 0);\nloop invariant (k == x + y + z) ==> (x <= y);\nloop invariant (k == x + y + z) ==> (y <= z);\nloop invariant (k == x + y + z) ==> (z <= k);\nloop invariant (k == x + y + z) ==> (y <= k);\nloop invariant (k == x + y + z) ==> (z <= k);\nloop invariant (k == x + y + z) ==> (x == y);\nloop invariant (k == x + y + z) ==> (y == z);\nloop invariant (k == x + y + z) ==> (z == k);\nloop invariant (k == x + y + z) ==> (x >= 0);\nloop invariant (k == x + y + z) ==> (y >= 0);\nloop invariant (k == x + y + z) ==> (z >= 0);\nloop invariant (k == x + y + z) ==> (x <= y);\nloop invariant (k == x + y + z) ==> (y <= z);\nloop invariant (k == x + y + z) ==> (z <= k);\nloop invariant (k == x + y + z) ==> (y <= k);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant y >= 0 is partially proven to be inductive.\nloop invariant z >= 0 is partially proven to be inductive.\nloop invariant k >= 0 is partially proven to be inductive.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant x <= y is partially proven to be inductive.\nloop invariant y <= z is partially proven to be inductive.\nloop invariant z <= k is partially proven to be inductive.\nloop invariant y <= k is partially proven to be inductive.\nloop invariant (k == x + y + z) ==> (k >= x) is partially proven to be inductive.\nloop invariant (k == x + y + z) ==> (k >= y) is partially proven to be inductive.\nloop invariant (k == x + y + z) ==> (k >= z) is partially proven to be inductive.\nloop invariant (k == x + y + z) ==> (x >= 0) is partially proven to be inductive.\nloop invariant (k == x + y + z) ==> (y >= 0) is partially proven to be inductive.\nloop invariant (k == x + y + z) ==> (z >= 0) is partially proven to be inductive.\nloop invariant (k == x + y + z) ==> (x <= y) is partially proven to be inductive.\nloop invariant (k == x + y + z) ==> (y <= z) is partially proven to be inductive.\nloop invariant (k == x + y + z) ==> (z <= k) is partially proven to be inductive.\nloop invariant (k == x + y + z) ==> (y <= k) is partially proven to be inductive.\nloop invariant (k == x + y + z) ==> (x == y) is established but not preserved.\nloop invariant (k == x + y + z) ==> (y == z) is established but not preserved.\nloop invariant (k == x + y + z) ==> (z == k) is established but not preserved.\nAssertion x == y == z: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nvoid main()\n{\n  int x = 0;\n  int y = 0;\n  int z = 0;\n  int k = 0;\n\n  /*@\nloop invariant i1: y >= 0;\nloop invariant i2: z >= 0;\nloop invariant i3: k >= 0;\nloop invariant i4: x >= 0;\nloop invariant i5: x <= y;\nloop invariant i6: y <= z;\nloop invariant i7: z <= k;\nloop invariant i8: y <= k;\nloop invariant i9: (k == x + y + z) ==> (k >= x);\nloop invariant i10: (k == x + y + z) ==> (k >= y);\nloop invariant i11: (k == x + y + z) ==> (k >= z);\nloop invariant i12: (k == x + y + z) ==> (x >= 0);\nloop invariant i13: (k == x + y + z) ==> (y >= 0);\nloop invariant i14: (k == x + y + z) ==> (z >= 0);\nloop invariant i15: (k == x + y + z) ==> (x <= y);\nloop invariant i16: (k == x + y + z) ==> (y <= z);\nloop invariant i17: (k == x + y + z) ==> (z <= k);\nloop invariant i18: (k == x + y + z) ==> (y <= k);\n\n\n\n*/\nwhile(unknown1())\n  {\n     if(k%3 == 0)\n       x++;\n     y++;\n     z++;\n     k = x+y+z;\n  }\n\n  {;\n//@ assert(x==y && y==z);\n}\n \n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= z;\nloop invariant 0 <= k;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z == x + y;\nloop invariant k == x + y + z;\nloop invariant x <= y + z;\nloop invariant y <= x + z;\nloop invariant z <= x + y;\nloop invariant x <= y <= z;\nloop invariant y <= x <= z;\nloop invariant z <= y <= x;\nloop invariant k == 2 * x + 2 * y + 2 * z;\nloop invariant k == 3 * (x + y + z);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x is partially proven to be inductive.\nloop invariant 0 <= y is partially proven to be inductive.\nloop invariant 0 <= z is partially proven to be inductive.\nloop invariant 0 <= k is partially proven to be inductive.\nloop invariant x <= y is partially proven to be inductive.\nloop invariant y <= z is partially proven to be inductive.\nloop invariant z == x + y is established but not preserved.\nloop invariant k == x + y + z is partially proven to be inductive.\nloop invariant x <= y + z is partially proven to be inductive.\nloop invariant y <= x + z is partially proven to be inductive.\nloop invariant z <= x + y is partially proven to be inductive.\nloop invariant x <= y <= z is partially proven to be inductive.\nloop invariant y <= x <= z is partially proven to be inductive.\nloop invariant z <= y <= x is partially proven to be inductive.\nloop invariant k == 2 * x + 2 * y + 2 * z is partially proven to be inductive.\nloop invariant k == 3 * (x + y + z) is partially proven to be inductive.\nAssertion x == y == z: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nvoid main()\n{\n  int x = 0;\n  int y = 0;\n  int z = 0;\n  int k = 0;\n\n  /*@\nloop invariant i1: 0 <= x;\nloop invariant i2: 0 <= y;\nloop invariant i3: 0 <= z;\nloop invariant i4: 0 <= k;\nloop invariant i5: x <= y;\nloop invariant i6: y <= z;\n\nloop invariant i8: k == x + y + z;\nloop invariant i9: x <= y + z;\nloop invariant i10: y <= x + z;\nloop invariant i11: z <= x + y;\nloop invariant i12: x <= y <= z;\nloop invariant i13: y <= x <= z;\nloop invariant i14: z <= y <= x;\n\n\n*/\nwhile(unknown1())\n  {\n     if(k%3 == 0)\n       x++;\n     y++;\n     z++;\n     k = x+y+z;\n  }\n\n  {;\n//@ assert(x==y && y==z);\n}\n \n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= y <= z;\nloop invariant x + y + z == k;\nloop invariant k%3 == 0 ==> x == 0;\nloop invariant k%3 == 1 ==> x == 1;\nloop invariant k%3 == 2 ==> x == 2;\nloop invariant unknown1() ==> x + y + z == k;\nloop invariant !unknown1() ==> x + y + z == k;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 22: unexpected token ')'",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nvoid main()\n{\n  int x = 0;\n  int y = 0;\n  int z = 0;\n  int k = 0;\n\n  /*@\nloop invariant i1: 0 <= x <= y <= z;\nloop invariant i2: x + y + z == k;\n\n\nloop invariant i5: k%3 == 2 ==> x == 2;\n\n\n*/\nwhile(unknown1())\n  {\n     if(k%3 == 0)\n       x++;\n     y++;\n     z++;\n     k = x+y+z;\n  }\n\n  {;\n//@ assert(x==y && y==z);\n}\n \n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= y <= z <= INT_MAX;\nloop invariant k = x + y + z;\nloop invariant k % 3 == 0 ==> x <= y <= z;\nloop invariant k % 3 != 0 ==> x <= y <= z;\nloop invariant k % 3 == 0 ==> x == y == z;\nloop invariant k % 3 != 0 ==> x == y == z;\nloop invariant 0 <= x <= y <= z <= INT_MAX;\nloop invariant k = x + y + z;\nloop invariant k % 3 == 0 ==> x <= y <= z;\nloop invariant k % 3 != 0 ==> x <= y <= z;\nloop invariant k % 3 == 0 ==> x == y == z;\nloop invariant k % 3 != 0 ==> x == y == z;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 18: Assignment operators not allowed in annotations.",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nvoid main()\n{\n  int x = 0;\n  int y = 0;\n  int z = 0;\n  int k = 0;\n\n  /*@\nloop invariant i1: 0 <= x <= y <= z <= INT_MAX;\n\nloop invariant i3: k % 3 == 0 ==> x <= y <= z;\nloop invariant i4: k % 3 != 0 ==> x <= y <= z;\n\n\n*/\nwhile(unknown1())\n  {\n     if(k%3 == 0)\n       x++;\n     y++;\n     z++;\n     k = x+y+z;\n  }\n\n  {;\n//@ assert(x==y && y==z);\n}\n \n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= k;\nloop invariant 0 <= y <= k;\nloop invariant 0 <= z <= k;\nloop invariant x <= y && y <= z;\nloop invariant x <= k;\nloop invariant y <= k;\nloop invariant z <= k;\nloop invariant x + y + z == k;\nloop invariant x == y && y == z ==> k % 3 == 0;\nloop invariant x + y + z == k ==> k % 3 == 0;\nloop invariant x + y + z == k ==> x == y && y == z;\nloop invariant x + y + z == k ==> x == y;\nloop invariant x + y + z == k ==> y == z;\nloop invariant x + y + z == k ==> x == z;\nloop invariant x + y + z == k ==> x == y && y == z;\nloop invariant x + y + z == k ==> x == y || y == z;\nloop invariant x + y + z == k ==> x == y || z == y;\nloop invariant x + y + z == k ==> x == y || y == z || z == y;\nloop invariant x + y + z == k ==> x == y || y == z || z == y || x == z;\nloop invariant x + y + z == k ==> x == y || y == z || z == y || x == z || x == y && y == z;\nloop invariant x + y + z == k ==> x == y || y == z || z == y || x == z || x == y && y == z || x == y || y == z;\nloop invariant x + y + z == k ==> x == y || y == z || z == y || x == z || x == y && y == z || x == y || y == z || x == z;\nloop invariant x + y + z == k ==> x == y || y == z || z == y || x == z || x == y && y == z || x == y || y == z || x == z || x == y && y == z;\nloop invariant x + y + z == k ==> x == y || y == z || z == y || x == z || x == y && y == z || x == y || y == z || x == z || x == y && y == z || x == y || y == z;\nloop invariant x + y + z == k ==> x == y || y == z || z == y || x == z || x == y && y == z || x == y || y == z || x == z || x == y && y == z || x == y || y == z || x == z;\nloop invariant x + y + z == k ==> x == y || y == z || z == y || x == z || x == y && y == z || x == y || y == z || x == z || x == y && y == z || x == y || y == z || x == z || x == y && y == z;\nloop invariant x + y + z == k ==> x == y || y == z || z == y || x == z || x == y && y == z || x == y || y == z || x == z || x == y && y == z || x == y || y == z || x == z || x == y && y == z || x == y || y == z;\nloop invariant x + y + z == k ==> x == y || y == z || z == y || x == z || x == y && y == z || x == y || y == z || x == z || x == y && y == z || x == y || y == z || x == z || x == y && y == z || x == y || y == z || x == z;\nloop invariant x + y + z == k ==> x == y || y == z || z == y || x == z || x == y && y == z || x == y || y == z || x == z || x == y && y == z || x == y || y == z || x == z || x == y && y == z || x == y || y == z || x == z || x == y && y == z;\n*/\n```",
                "checker_output_for_annotations": true,
                "checker_message_for_annotations": "loop invariant 0 <= x <= k is inductive.\nloop invariant 0 <= y <= k is inductive.\nloop invariant 0 <= z <= k is inductive.\nloop invariant x <= y && y <= z is inductive.\nloop invariant x <= k is inductive.\nloop invariant y <= k is inductive.\nloop invariant z <= k is inductive.\nloop invariant x + y + z == k is inductive.\nloop invariant x == y && y == z ==> k % 3 == 0 is inductive.\nloop invariant x + y + z == k ==> k % 3 == 0 is inductive.\nloop invariant x + y + z == k ==> x == y && y == z is inductive.\nloop invariant x + y + z == k ==> x == y is inductive.\nloop invariant x + y + z == k ==> y == z is inductive.\nloop invariant x + y + z == k ==> x == z is inductive.\nloop invariant x + y + z == k ==> x == y || y == z is inductive.\nloop invariant x + y + z == k ==> x == y || z == y is inductive.\nloop invariant x + y + z == k ==> x == y || y == z || z == y is inductive.\nloop invariant x + y + z == k ==> x == y || y == z || z == y || x == z is inductive.\nloop invariant x + y + z == k ==> x == y || y == z || z == y || x == z || x == y && y == z is inductive.\nloop invariant x + y + z == k ==> x == y || y == z || z == y || x == z || x == y && y == z || x == y || y == z is inductive.\nloop invariant x + y + z == k ==> x == y || y == z || z == y || x == z || x == y && y == z || x == y || y == z || x == z is inductive.\nloop invariant x + y + z == k ==> x == y || y == z || z == y || x == z || x == y && y == z || x == y || y == z || x == z || x == y && y == z is inductive.\nloop invariant x + y + z == k ==> x == y || y == z || z == y || x == z || x == y && y == z || x == y || y == z || x == z || x == y && y == z || x == y || y == z is inductive.\nloop invariant x + y + z == k ==> x == y || y == z || z == y || x == z || x == y && y == z || x == y || y == z || x == z || x == y && y == z || x == y || y == z || x == z is inductive.\nloop invariant x + y + z == k ==> x == y || y == z || z == y || x == z || x == y && y == z || x == y || y == z || x == z || x == y && y == z || x == y || y == z || x == z || x == y && y == z is inductive.\nloop invariant x + y + z == k ==> x == y || y == z || z == y || x == z || x == y && y == z || x == y || y == z || x == z || x == y && y == z || x == y || y == z || x == z || x == y && y == z || x == y || y == z is inductive.\nloop invariant x + y + z == k ==> x == y || y == z || z == y || x == z || x == y && y == z || x == y || y == z || x == z || x == y && y == z || x == y || y == z || x == z || x == y && y == z || x == y || y == z || x == z is inductive.\nloop invariant x + y + z == k ==> x == y || y == z || z == y || x == z || x == y && y == z || x == y || y == z || x == z || x == y && y == z || x == y || y == z || x == z || x == y && y == z || x == y || y == z || x == z || x == y && y == z is inductive.\nAssertion x == y == z: Valid"
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant x <= y <= z;\nloop invariant k == x+y+z;\nloop invariant k%3 >= 0 && k%3 <= 2;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant x + y + z == k;\nloop invariant x == y ==> x%3 == y%3;\nloop invariant x == z ==> x%3 == z%3;\nloop invariant y == z ==> y%3 == z%3;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x <= y <= z is inductive.\nloop invariant k == x+y+z is inductive.\nloop invariant k%3 >= 0 && k%3 <= 2 is inductive.\nloop invariant x >= 0 is inductive.\nloop invariant y >= 0 is inductive.\nloop invariant z >= 0 is inductive.\nloop invariant x + y + z == k is inductive.\nloop invariant x == y ==> x%3 == y%3 is inductive.\nloop invariant x == z ==> x%3 == z%3 is inductive.\nloop invariant y == z ==> y%3 == z%3 is inductive.\nAssertion x == y == z: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nvoid main()\n{\n  int x = 0;\n  int y = 0;\n  int z = 0;\n  int k = 0;\n\n  /*@\nloop invariant i1: x <= y <= z;\nloop invariant i2: k == x+y+z;\nloop invariant i3: k%3 >= 0 && k%3 <= 2;\nloop invariant i4: x >= 0;\nloop invariant i5: y >= 0;\nloop invariant i6: z >= 0;\nloop invariant i7: x + y + z == k;\nloop invariant i8: x == y ==> x%3 == y%3;\nloop invariant i9: x == z ==> x%3 == z%3;\nloop invariant i10: y == z ==> y%3 == z%3;\n*/\nwhile(unknown1())\n  {\n     if(k%3 == 0)\n       x++;\n     y++;\n     z++;\n     k = x+y+z;\n  }\n\n  {;\n//@ assert(x==y && y==z);\n}\n \n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= y <= z <= k;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= y <= z <= k is inductive.\nAssertion x == y == z: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nvoid main()\n{\n  int x = 0;\n  int y = 0;\n  int z = 0;\n  int k = 0;\n\n  /*@\nloop invariant i1: 0 <= x <= y <= z <= k;\n*/\nwhile(unknown1())\n  {\n     if(k%3 == 0)\n       x++;\n     y++;\n     z++;\n     k = x+y+z;\n  }\n\n  {;\n//@ assert(x==y && y==z);\n}\n \n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant 0 <= y <= z;\nloop invariant 0 <= z;\nloop invariant x + y + z = k;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant k >= 0;\nloop invariant x + y + z >= k;\nloop invariant x + y + z <= k;\nloop invariant x + y + z == k;\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= k;\nloop invariant x + y + z == k;\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= k;\nloop invariant x + y + z == k;\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= k;\nloop invariant x + y + z == k;\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= k;\nloop invariant x + y + z == k;\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= k;\nloop invariant x + y + z == k;\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= k;\nloop invariant x + y + z == k;\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= k;\nloop invariant x + y + z == k;\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= k;\nloop invariant x + y + z == k;\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= k;\nloop invariant x + y + z == k;\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= k;\nloop invariant x + y + z == k;\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= k;\nloop invariant x + y + z == k;\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= k;\nloop invariant x + y + z == k;\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= k;\nloop invariant x + y + z == k;\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= k;\nloop invariant x + y + z == k;\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= k;\nloop invariant x + y + z == k;\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= k;\nloop invariant x + y + z == k;\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= k;\nloop invariant x + y + z == k;\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= k;\nloop invariant x + y + z == k;\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= k;\nloop invariant x + y + z == k;\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= k;\nloop invariant x + y + z == k;\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= k;\nloop invariant x + y + z == k;\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= k;\nloop invariant x + y + z == k;\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= k;\nloop invariant x + y + z == k;\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= k;\nloop invariant x + y + z == k;\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= k;\nloop invariant x + y + z == k;\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= k;\nloop invariant x + y + z == k;\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= k;\nloop invariant x + y + z == k;\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= k;\nloop invariant x + y + z == k;\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= k;\nloop invariant x + y + z == k;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 20: Assignment operators not allowed in annotations.",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nvoid main()\n{\n  int x = 0;\n  int y = 0;\n  int z = 0;\n  int k = 0;\n\n  /*@\nloop invariant i1: 0 <= x <= y;\nloop invariant i2: 0 <= y <= z;\nloop invariant i3: 0 <= z;\n\nloop invariant i5: x >= 0;\nloop invariant i6: y >= 0;\nloop invariant i7: z >= 0;\nloop invariant i8: k >= 0;\nloop invariant i9: x + y + z >= k;\nloop invariant i10: x + y + z <= k;\nloop invariant i11: x + y + z == k;\nloop invariant i12: x + y + z >= 0;\n*/\nwhile(unknown1())\n  {\n     if(k%3 == 0)\n       x++;\n     y++;\n     z++;\n     k = x+y+z;\n  }\n\n  {;\n//@ assert(x==y && y==z);\n}\n \n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= x+y+z;\nloop invariant 0 <= x <= y+z;\nloop invariant 0 <= z <= x+y;\nloop invariant y+z <= x;\nloop invariant x+y <= z;\nloop invariant x+y+z <= k;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= y <= x+y+z is partially proven to be inductive.\nloop invariant 0 <= x <= y+z is partially proven to be inductive.\nloop invariant 0 <= z <= x+y is partially proven to be inductive.\nloop invariant y+z <= x is established but not preserved.\nloop invariant x+y <= z is partially proven to be inductive.\nloop invariant x+y+z <= k is partially proven to be inductive.\nAssertion x == y == z: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nvoid main()\n{\n  int x = 0;\n  int y = 0;\n  int z = 0;\n  int k = 0;\n\n  /*@\nloop invariant i1: 0 <= y <= x+y+z;\nloop invariant i2: 0 <= x <= y+z;\nloop invariant i3: 0 <= z <= x+y;\n\n\nloop invariant i6: x+y+z <= k;\n*/\nwhile(unknown1())\n  {\n     if(k%3 == 0)\n       x++;\n     y++;\n     z++;\n     k = x+y+z;\n  }\n\n  {;\n//@ assert(x==y && y==z);\n}\n \n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 13,
                "annotations": "```\n/*@\nloop invariant 1 -> 1 <= k <= x+y+z;\nloop invariant 2 -> k%(3*x+y+z) == 0;\nloop invariant 3 -> x >= 0;\nloop invariant 4 -> y >= 0;\nloop invariant 5 -> z >= 0;\nloop invariant 6 -> k >= 1;\nloop invariant 7 -> x <= y;\nloop invariant 8 -> y <= z;\nloop invariant 9 -> x <= z;\nloop invariant 10 -> x <= k;\nloop invariant 11 -> y <= k;\nloop invariant 12 -> z <= k;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 17: unexpected token '1'",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nvoid main()\n{\n  int x = 0;\n  int y = 0;\n  int z = 0;\n  int k = 0;\n\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile(unknown1())\n  {\n     if(k%3 == 0)\n       x++;\n     y++;\n     z++;\n     k = x+y+z;\n  }\n\n  {;\n//@ assert(x==y && y==z);\n}\n \n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 34: unexpected token ')'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nvoid main()\n{\n  int x = 0;\n  int y = 0;\n  int z = 0;\n  int k = 0;\n\n  /*@\nloop invariant i1: 0 <= x <= 1;\nloop invariant i2: x <= y <= x + 1;\nloop invariant i3: z >= x;\nloop invariant i4: x + y + z <= 3 * x + 1;\nloop invariant i5: x + y + z <= 3 * y;\nloop invariant i6: x + y + z <= 3 * z;\nloop invariant i7: x + y + z >= x;\nloop invariant i8: x + y + z >= y;\nloop invariant i9: x + y + z >= z;\nloop invariant i10: x + y + z <= 3 * (x + y + z);\nloop invariant i11: x + y + z >= 0;\nloop invariant i12: x + y + z >= x + y + z;\nloop invariant i13: y >= 0;\nloop invariant i14: x >= 0;\nloop invariant i15: z >= 0;\nloop invariant i16: k >= 0;\nloop invariant i17: k <= x+y+z;\nloop invariant i18: k >= x+y+z || unknown1() == 0;\nloop invariant i19: 0 <= x;\nloop invariant i20: 0 <= y;\nloop invariant i21: 0 <= z;\nloop invariant i22: 0 <= k;\nloop invariant i23: x <= x + 1;\nloop invariant i24: y <= y + 1;\nloop invariant i25: z <= z + 1;\nloop invariant i26: k <= x + y + z;\nloop invariant i27: k >= x;\nloop invariant i28: k >= y;\nloop invariant i29: k >= z;\nloop invariant i30: x <= y;\nloop invariant i31: y <= z;\nloop invariant i32: x <= z;\nloop invariant i33: x <= y + 1;\nloop invariant i34: y <= z + 1;\nloop invariant i35: x <= z + 1;\nloop invariant i36: z <= k;\nloop invariant i37: k == x + y + z;\nloop invariant i38: y >= k % 3;\nloop invariant i39: k % 3 < 3;\nloop invariant i40: k % 3 == 0 ==> x == k / 3;\nloop invariant i41: k % 3 == 1 ==> y == (k - 1) / 3;\nloop invariant i42: k % 3 == 2 ==> z == (k - 2) / 3;\nloop invariant i43: k % 3 == 0 ==> x == (k - 2) / 3;\nloop invariant i44: 0 <= x <= k;\nloop invariant i45: 0 <= y <= k;\nloop invariant i46: 0 <= z <= k;\nloop invariant i47: x + y + z == k;\nloop invariant i48: k % 3 == 0 ==> x == y && y == z;\nloop invariant i49: k % 3 != 0 ==> x + y + z == k;\nloop invariant i50: y <= k;\nloop invariant i51: (k == x + y + z) ==> (k >= x);\nloop invariant i52: (k == x + y + z) ==> (k >= y);\nloop invariant i53: (k == x + y + z) ==> (k >= z);\nloop invariant i54: (k == x + y + z) ==> (x >= 0);\nloop invariant i55: (k == x + y + z) ==> (y >= 0);\nloop invariant i56: (k == x + y + z) ==> (z >= 0);\nloop invariant i57: (k == x + y + z) ==> (x <= y);\nloop invariant i58: (k == x + y + z) ==> (y <= z);\nloop invariant i59: (k == x + y + z) ==> (z <= k);\nloop invariant i60: (k == x + y + z) ==> (y <= k);\nloop invariant i61: (k == x + y + z) ==> (x == y);\nloop invariant i62: (k == x + y + z) ==> (y == z);\nloop invariant i63: (k == x + y + z) ==> (z == k);\nloop invariant i64: z == x + y;\nloop invariant i65: x <= y + z;\nloop invariant i66: y <= x + z;\nloop invariant i67: z <= x + y;\nloop invariant i68: x <= y <= z;\nloop invariant i69: y <= x <= z;\nloop invariant i70: z <= y <= x;\nloop invariant i71: k == 2 * x + 2 * y + 2 * z;\nloop invariant i72: k == 3 * (x + y + z);\nloop invariant i73: 0 <= x <= y <= z;\nloop invariant i74: k%3 == 0 ==> x == 0;\nloop invariant i75: k%3 == 1 ==> x == 1;\nloop invariant i76: k%3 == 2 ==> x == 2;\nloop invariant i77: unknown1() ==> x + y + z == k;\nloop invariant i78: !unknown1() ==> x + y + z == k;\nloop invariant i79: 0 <= x <= y <= z <= INT_MAX;\nloop invariant i80: k = x + y + z;\nloop invariant i81: k % 3 == 0 ==> x <= y <= z;\nloop invariant i82: k % 3 != 0 ==> x <= y <= z;\nloop invariant i83: k % 3 == 0 ==> x == y == z;\nloop invariant i84: k % 3 != 0 ==> x == y == z;\nloop invariant i85: x <= y && y <= z;\nloop invariant i86: x <= k;\nloop invariant i87: x == y && y == z ==> k % 3 == 0;\nloop invariant i88: x + y + z == k ==> k % 3 == 0;\nloop invariant i89: x + y + z == k ==> x == y && y == z;\nloop invariant i90: x + y + z == k ==> x == y;\nloop invariant i91: x + y + z == k ==> y == z;\nloop invariant i92: x + y + z == k ==> x == z;\nloop invariant i93: x + y + z == k ==> x == y || y == z;\nloop invariant i94: x + y + z == k ==> x == y || z == y;\nloop invariant i95: x + y + z == k ==> x == y || y == z || z == y;\nloop invariant i96: x + y + z == k ==> x == y || y == z || z == y || x == z;\nloop invariant i97: x + y + z == k ==> x == y || y == z || z == y || x == z || x == y && y == z;\nloop invariant i98: x + y + z == k ==> x == y || y == z || z == y || x == z || x == y && y == z || x == y || y == z;\nloop invariant i99: x + y + z == k ==> x == y || y == z || z == y || x == z || x == y && y == z || x == y || y == z || x == z;\nloop invariant i100: x + y + z == k ==> x == y || y == z || z == y || x == z || x == y && y == z || x == y || y == z || x == z || x == y && y == z;\nloop invariant i101: x + y + z == k ==> x == y || y == z || z == y || x == z || x == y && y == z || x == y || y == z || x == z || x == y && y == z || x == y || y == z;\nloop invariant i102: x + y + z == k ==> x == y || y == z || z == y || x == z || x == y && y == z || x == y || y == z || x == z || x == y && y == z || x == y || y == z || x == z;\nloop invariant i103: x + y + z == k ==> x == y || y == z || z == y || x == z || x == y && y == z || x == y || y == z || x == z || x == y && y == z || x == y || y == z || x == z || x == y && y == z;\nloop invariant i104: x + y + z == k ==> x == y || y == z || z == y || x == z || x == y && y == z || x == y || y == z || x == z || x == y && y == z || x == y || y == z || x == z || x == y && y == z || x == y || y == z;\nloop invariant i105: x + y + z == k ==> x == y || y == z || z == y || x == z || x == y && y == z || x == y || y == z || x == z || x == y && y == z || x == y || y == z || x == z || x == y && y == z || x == y || y == z || x == z;\nloop invariant i106: x + y + z == k ==> x == y || y == z || z == y || x == z || x == y && y == z || x == y || y == z || x == z || x == y && y == z || x == y || y == z || x == z || x == y && y == z || x == y || y == z || x == z || x == y && y == z;\nloop invariant i107: k == x+y+z;\nloop invariant i108: k%3 >= 0 && k%3 <= 2;\nloop invariant i109: x == y ==> x%3 == y%3;\nloop invariant i110: x == z ==> x%3 == z%3;\nloop invariant i111: y == z ==> y%3 == z%3;\nloop invariant i112: 0 <= x <= y <= z <= k;\nloop invariant i113: 0 <= x <= y;\nloop invariant i114: 0 <= y <= z;\nloop invariant i115: x + y + z = k;\nloop invariant i116: x + y + z >= k;\nloop invariant i117: x + y + z <= k;\nloop invariant i118: 0 <= y <= x+y+z;\nloop invariant i119: 0 <= x <= y+z;\nloop invariant i120: 0 <= z <= x+y;\nloop invariant i121: y+z <= x;\nloop invariant i122: x+y <= z;\nloop invariant i123: x+y+z <= k;\nloop invariant i124: 1 -> 1 <= k <= x+y+z;\nloop invariant i125: 2 -> k%(3*x+y+z) == 0;\nloop invariant i126: 3 -> x >= 0;\nloop invariant i127: 4 -> y >= 0;\nloop invariant i128: 5 -> z >= 0;\nloop invariant i129: 6 -> k >= 1;\nloop invariant i130: 7 -> x <= y;\nloop invariant i131: 8 -> y <= z;\nloop invariant i132: 9 -> x <= z;\nloop invariant i133: 10 -> x <= k;\nloop invariant i134: 11 -> y <= k;\nloop invariant i135: 12 -> z <= k;\n*/\nwhile(unknown1())\n  {\n     if(k%3 == 0)\n       x++;\n     y++;\n     z++;\n     k = x+y+z;\n  }\n\n  {;\n//@ assert(x==y && y==z);\n}\n \n}",
        "combined_annotation_num_solver_calls": 27,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nvoid main()\n{\n  int x = 0;\n  int y = 0;\n  int z = 0;\n  int k = 0;\n\n  /*@\n\nloop invariant i2: x <= y <= x + 1;\nloop invariant i3: z >= x;\nloop invariant i4: x + y + z <= 3 * x + 1;\nloop invariant i5: x + y + z <= 3 * y;\nloop invariant i6: x + y + z <= 3 * z;\nloop invariant i7: x + y + z >= x;\nloop invariant i8: x + y + z >= y;\nloop invariant i9: x + y + z >= z;\nloop invariant i10: x + y + z <= 3 * (x + y + z);\nloop invariant i11: x + y + z >= 0;\nloop invariant i12: x + y + z >= x + y + z;\nloop invariant i13: y >= 0;\nloop invariant i14: x >= 0;\nloop invariant i15: z >= 0;\nloop invariant i16: k >= 0;\nloop invariant i17: k <= x+y+z;\n\nloop invariant i19: 0 <= x;\nloop invariant i20: 0 <= y;\nloop invariant i21: 0 <= z;\nloop invariant i22: 0 <= k;\nloop invariant i23: x <= x + 1;\nloop invariant i24: y <= y + 1;\nloop invariant i25: z <= z + 1;\nloop invariant i26: k <= x + y + z;\nloop invariant i27: k >= x;\nloop invariant i28: k >= y;\nloop invariant i29: k >= z;\nloop invariant i30: x <= y;\nloop invariant i31: y <= z;\nloop invariant i32: x <= z;\nloop invariant i33: x <= y + 1;\nloop invariant i34: y <= z + 1;\nloop invariant i35: x <= z + 1;\nloop invariant i36: z <= k;\nloop invariant i37: k == x + y + z;\nloop invariant i38: y >= k % 3;\nloop invariant i39: k % 3 < 3;\nloop invariant i40: k % 3 == 0 ==> x == k / 3;\nloop invariant i41: k % 3 == 1 ==> y == (k - 1) / 3;\nloop invariant i42: k % 3 == 2 ==> z == (k - 2) / 3;\n\nloop invariant i44: 0 <= x <= k;\nloop invariant i45: 0 <= y <= k;\nloop invariant i46: 0 <= z <= k;\nloop invariant i47: x + y + z == k;\nloop invariant i48: k % 3 == 0 ==> x == y && y == z;\nloop invariant i49: k % 3 != 0 ==> x + y + z == k;\nloop invariant i50: y <= k;\nloop invariant i51: (k == x + y + z) ==> (k >= x);\nloop invariant i52: (k == x + y + z) ==> (k >= y);\nloop invariant i53: (k == x + y + z) ==> (k >= z);\nloop invariant i54: (k == x + y + z) ==> (x >= 0);\nloop invariant i55: (k == x + y + z) ==> (y >= 0);\nloop invariant i56: (k == x + y + z) ==> (z >= 0);\nloop invariant i57: (k == x + y + z) ==> (x <= y);\nloop invariant i58: (k == x + y + z) ==> (y <= z);\nloop invariant i59: (k == x + y + z) ==> (z <= k);\nloop invariant i60: (k == x + y + z) ==> (y <= k);\nloop invariant i61: (k == x + y + z) ==> (x == y);\nloop invariant i62: (k == x + y + z) ==> (y == z);\n\n\nloop invariant i65: x <= y + z;\nloop invariant i66: y <= x + z;\nloop invariant i67: z <= x + y;\nloop invariant i68: x <= y <= z;\nloop invariant i69: y <= x <= z;\nloop invariant i70: z <= y <= x;\n\n\nloop invariant i73: 0 <= x <= y <= z;\n\nloop invariant i75: k%3 == 1 ==> x == 1;\nloop invariant i76: k%3 == 2 ==> x == 2;\n\n\nloop invariant i79: 0 <= x <= y <= z <= INT_MAX;\n\nloop invariant i81: k % 3 == 0 ==> x <= y <= z;\nloop invariant i82: k % 3 != 0 ==> x <= y <= z;\nloop invariant i83: k % 3 == 0 ==> x == y == z;\nloop invariant i84: k % 3 != 0 ==> x == y == z;\nloop invariant i85: x <= y && y <= z;\nloop invariant i86: x <= k;\nloop invariant i87: x == y && y == z ==> k % 3 == 0;\nloop invariant i88: x + y + z == k ==> k % 3 == 0;\nloop invariant i89: x + y + z == k ==> x == y && y == z;\nloop invariant i90: x + y + z == k ==> x == y;\nloop invariant i91: x + y + z == k ==> y == z;\nloop invariant i92: x + y + z == k ==> x == z;\nloop invariant i93: x + y + z == k ==> x == y || y == z;\nloop invariant i94: x + y + z == k ==> x == y || z == y;\nloop invariant i95: x + y + z == k ==> x == y || y == z || z == y;\nloop invariant i96: x + y + z == k ==> x == y || y == z || z == y || x == z;\nloop invariant i97: x + y + z == k ==> x == y || y == z || z == y || x == z || x == y && y == z;\nloop invariant i98: x + y + z == k ==> x == y || y == z || z == y || x == z || x == y && y == z || x == y || y == z;\nloop invariant i99: x + y + z == k ==> x == y || y == z || z == y || x == z || x == y && y == z || x == y || y == z || x == z;\nloop invariant i100: x + y + z == k ==> x == y || y == z || z == y || x == z || x == y && y == z || x == y || y == z || x == z || x == y && y == z;\nloop invariant i101: x + y + z == k ==> x == y || y == z || z == y || x == z || x == y && y == z || x == y || y == z || x == z || x == y && y == z || x == y || y == z;\nloop invariant i102: x + y + z == k ==> x == y || y == z || z == y || x == z || x == y && y == z || x == y || y == z || x == z || x == y && y == z || x == y || y == z || x == z;\nloop invariant i103: x + y + z == k ==> x == y || y == z || z == y || x == z || x == y && y == z || x == y || y == z || x == z || x == y && y == z || x == y || y == z || x == z || x == y && y == z;\nloop invariant i104: x + y + z == k ==> x == y || y == z || z == y || x == z || x == y && y == z || x == y || y == z || x == z || x == y && y == z || x == y || y == z || x == z || x == y && y == z || x == y || y == z;\nloop invariant i105: x + y + z == k ==> x == y || y == z || z == y || x == z || x == y && y == z || x == y || y == z || x == z || x == y && y == z || x == y || y == z || x == z || x == y && y == z || x == y || y == z || x == z;\nloop invariant i106: x + y + z == k ==> x == y || y == z || z == y || x == z || x == y && y == z || x == y || y == z || x == z || x == y && y == z || x == y || y == z || x == z || x == y && y == z || x == y || y == z || x == z || x == y && y == z;\nloop invariant i107: k == x+y+z;\nloop invariant i108: k%3 >= 0 && k%3 <= 2;\nloop invariant i109: x == y ==> x%3 == y%3;\nloop invariant i110: x == z ==> x%3 == z%3;\nloop invariant i111: y == z ==> y%3 == z%3;\nloop invariant i112: 0 <= x <= y <= z <= k;\nloop invariant i113: 0 <= x <= y;\nloop invariant i114: 0 <= y <= z;\n\nloop invariant i116: x + y + z >= k;\nloop invariant i117: x + y + z <= k;\nloop invariant i118: 0 <= y <= x+y+z;\nloop invariant i119: 0 <= x <= y+z;\nloop invariant i120: 0 <= z <= x+y;\n\n\nloop invariant i123: x+y+z <= k;\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile(unknown1())\n  {\n     if(k%3 == 0)\n       x++;\n     y++;\n     z++;\n     k = x+y+z;\n  }\n\n  {;\n//@ assert(x==y && y==z);\n}\n \n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_nondet_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum01_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/22.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/85.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/ex2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/42.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/diamond_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/odd.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/even.c",
            "../dataset/loop_invariants/code2inv/24.c",
            "../dataset/loop_invariants/code2inv/130.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/diamond_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/overflow_safe1.c",
            "../dataset/loop_invariants/code2inv/113.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/ddlm2013_true-unreach-call.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/MADWiFi-encode_ie_ok.c",
            "../dataset/loop_invariants/code2inv/69.c"
        ],
        "skipped": [],
        "total": 17,
        "success_count": 3,
        "failure_count": 14,
        "success_rate": 0.17647058823529413
    }
}