{
    "logs": {
        "file": "../dataset/loop_invariants/sv-benchmarks/loop-invariants/even.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 0;\n  while (unknown_int()) {\n    x += 2;\n  }\n  {;\n//@ assert(!(x % 2));\n}\n\n  return 0;\n}",
        "success": false,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= x;\nloop invariant x % 2 == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 4294967295;\nloop invariant 0 <= unknown_int() <= 1;\nloop invariant !(unknown_int() && (x % 2));\nloop invariant !(unknown_int() && ((x % 2) == 0));\nloop invariant !(unknown_int() && (!(x % 2)));\nloop invariant !(unknown_int() && (x % 2 == 0));\nloop invariant !(unknown_int() && ((x % 2) == 0));\nloop invariant !(unknown_int() && (!(x % 2)));\nloop invariant !(unknown_int() && (x % 2 == 0));\nloop invariant !(unknown_int() && ((x % 2) == 0));\nloop invariant !(unknown_int() && (!(x % 2)));\nloop invariant !(unknown_int() && (x % 2 == 0));\nloop invariant !(unknown_int() && ((x % 2) == 0));\nloop invariant !(unknown_int() && (!(x % 2)));\nloop invariant !(unknown_int() && (x % 2 == 0));\nloop invariant !(unknown_int() && ((x % 2) == 0));\nloop invariant !(unknown_int() && (!(x % 2)));\nloop invariant !(unknown_int() && (x % 2 == 0));\nloop invariant !(unknown_int() && ((x % 2) == 0));\nloop invariant !(unknown_int() && (!(x % 2)));\nloop invariant !(unknown_int() && (x % 2 == 0));\nloop invariant !(unknown_int() && ((x % 2) == 0));\nloop invariant !(unknown_int() && (!(x % 2)));\nloop invariant !(unknown_int() && (x % 2 == 0));\nloop invariant !(unknown_int() && ((x % 2) == 0));\nloop invariant !(unknown_int() && (!(x % 2)));\nloop invariant !(unknown_int() && (x % 2 == 0));\nloop invariant !(unknown_int() && ((x % 2) == 0));\nloop invariant !(unknown_int() && (!(x % 2)));\nloop invariant !(unknown_int() && (x % 2 == 0));\nloop invariant !(unknown_int() && ((x % 2) == 0));\nloop invariant !(unknown_int() && (!(x % 2)));\nloop invariant !(unknown_int() && (x % 2 == 0));\nloop invariant !(unknown_int() && ((x % 2) == 0));\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x;\nloop invariant x % 2 == 0;\nloop invariant x == 2 * (unknown_int() ? 1 : 0);\n*/\n```",
            "```\n/*@\nloop invariant \\true;\nloop invariant 0 <= x <= UINT_MAX;\nloop invariant unknown_int() ==> x % 2 == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x;\nloop invariant x % 2 == 0;\nloop invariant x <= 2 * unknown_int();\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 2 * (1 + (y - 1) * y / 2);\nloop invariant 0 <= x <= y + 1;\nloop invariant 0 <= y <= 100000;\nloop invariant x >= 1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x % 2 == 0;\nloop invariant y >= 0;\nloop invariant y % 1 == 0;\nloop invariant x >= 0;\nloop invariant x % 1 == 0;\nloop invariant x >= y;\nloop invariant x <= x + 2;\nloop invariant y >= y - 1;\nloop invariant y <= y + 1;\nloop invariant x >= 1;\nloop invariant x % 1 == 0;\nloop invariant y <= 100000;\nloop invariant y % 1 == 0;\nloop invariant x <= y + 1;\nloop invariant x >= 0;\nloop invariant x % 1 == 0;\nloop invariant y >= 0;\nloop invariant y % 1 == 0;\nloop invariant x >= 1;\nloop invariant x % 1 == 0;\nloop invariant y <= 100000;\nloop invariant y % 1 == 0;\nloop invariant x >= 0;\nloop invariant x % 1 == 0;\nloop invariant y >= 0;\nloop invariant y % 1 == 0;\nloop invariant x >= 1;\nloop invariant x % 1 == 0;\nloop invariant y <= 100000;\nloop invariant y % 1 == 0;\nloop invariant x >= 0;\nloop invariant x % 1 == 0;\nloop invariant y >= 0;\nloop invariant y % 1 == 0;\nloop invariant x >= 1;\nloop invariant x % 1 == 0;\nloop invariant y <= 100000;\nloop invariant y % 1 == 0;\nloop invariant x >= 0;\nloop invariant x % 1 == 0;\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant x = 0;\nloop invariant x is even;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= 2;\nloop invariant x % 2 == 0;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= 2 * x;\nloop invariant x % 2 == 0;\nloop invariant unknown_int() == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 2 * (2^32-1);\nloop invariant x % 2 == 0;\nloop invariant unknown_int() ==> x >= 0;\nloop invariant !unknown_int() ==> x == 0;\nloop invariant unknown_int() ==> x < 2 * (2^32-1);\nloop invariant !unknown_int() ==> x <= 2 * (2^32-1);\nloop invariant unknown_int() ==> x % 2 == 0;\nloop invariant !unknown_int() ==> x % 2 == 0;\nloop invariant unknown_int() ==> x % 2 == 0;\nloop invariant !unknown_int() ==> x % 2 == 0;\nloop invariant unknown_int() ==> x % 2 == 0;\nloop invariant !unknown_int() ==> x % 2 == 0;\nloop invariant unknown_int() ==> x % 2 == 0;\nloop invariant !unknown_int() ==> x % 2 == 0;\nloop invariant unknown_int() ==> x % 2 == 0;\nloop invariant !unknown_int() ==> x % 2 == 0;\nloop invariant unknown_int() ==> x % 2 == 0;\nloop invariant !unknown_int() ==> x % 2 == 0;\nloop invariant unknown_int() ==> x % 2 == 0;\nloop invariant !unknown_int() ==> x % 2 == 0;\nloop invariant unknown_int() ==> x % 2 == 0;\nloop invariant !unknown_int() ==> x % 2 == 0;\nloop invariant unknown_int() ==> x % 2 == 0;\nloop invariant !unknown_int() ==> x % 2 == 0;\nloop invariant unknown_int() ==> x % 2 == 0;\nloop invariant !unknown_int() ==> x % 2 == 0;\nloop invariant unknown_int() ==> x % 2 == 0;\nloop invariant !unknown_int() ==> x % 2 == 0;\nloop invariant unknown_int() ==> x % 2 == 0;\nloop invariant !unknown_int() ==> x % 2 == 0;\nloop invariant unknown_int() ==> x % 2 == 0;\nloop invariant !unknown_int() ==> x % 2 == 0;\nloop invariant unknown_int() ==> x % 2 == 0;\nloop invariant !unknown_int() ==> x % 2 == 0;\nloop invariant unknown_int() ==> x % 2 == 0;\nloop invariant !unknown_int() ==> x % 2 == 0;\nloop invariant unknown_int() ==> x % 2 == 0;\nloop invariant !unknown_int() ==> x % 2 == 0;\nloop invariant unknown_int() ==> x % 2 == 0;\nloop invariant !unknown_int() ==> x % 2 == 0;\nloop invariant unknown_int() ==> x % 2 == 0;\nloop invariant !unknown_int() ==> x % 2 == 0;\nloop invariant unknown_int() ==> x % 2 == 0;\nloop invariant !unknown_int() ==> x % 2 == 0;\nloop invariant unknown_int() ==> x % 2 == 0;\nloop invariant !unknown_int() ==> x % 2 == 0;\nloop invariant unknown_int() ==> x % 2 == 0;\nloop invariant !unknown_int() ==> x % 2 == 0;\nloop invariant unknown_int() ==> x % 2 == 0;\nloop invariant !unknown_int() ==> x % 2 == 0;\nloop invariant unknown_int() ==> x % 2 == 0;\nloop invariant !unknown_int() ==> x % 2 == 0;\nloop invariant unknown_int() ==> x % 2 == 0;\nloop invariant !unknown_int() ==> x % 2 == 0;\nloop invariant unknown_int() ==> x % 2 == 0;\nloop invariant !unknown_int() ==> x % 2 == 0;\nloop invariant unknown_int() ==> x % 2 == 0;\nloop invariant !unknown_int() ==> x % 2 == 0;\nloop invariant unknown_int() ==> x % 2 == 0;\nloop invariant !unknown_int() ==> x % 2 == 0;\nloop invariant unknown_int() ==> x % 2 == 0;\nloop invariant !unknown_int() ==> x % 2 == 0;\nloop invariant unknown_int() ==> x % 2 == 0;\nloop invariant !unknown_int() ==> x % 2 == 0;\nloop invariant unknown_int() ==> x % 2 == 0;\nloop invariant !unknown_int() ==> x % 2 == 0;\nloop invariant unknown_int() ==> x % 2 == 0;\nloop invariant !unknown_int() ==> x % 2 == 0;\n*/\n```",
            "```\n/*@\nloop invariant x >= 0;\nloop invariant (x % 2) == 0;\nloop invariant (x % 2) == 0 ==> (x >= 0);\nloop invariant (x % 2) == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x >= 0;\nloop invariant (x % 2) == 0;\nloop invariant (x % 2) == 0 ==> (x >= 0);\nloop invariant (x % 2) == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 2 * y;\nloop invariant x % 2 == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x;\nloop invariant x <= 2 * unknown_int();\nloop invariant unknown_int() == (x % 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 2147483646;\nloop invariant x % 2 == 0;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x;\nloop invariant x % 2 == 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x is partially proven to be inductive.\nloop invariant x % 2 == 0 is established but not preserved.\nAssertion x % 2 == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 0;\n  /*@\nloop invariant i1: 0 <= x;\n\n*/\nwhile (unknown_int()) {\n    x += 2;\n  }\n  {;\n//@ assert(!(x % 2));\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 4294967295;\nloop invariant 0 <= unknown_int() <= 1;\nloop invariant !(unknown_int() && (x % 2));\nloop invariant !(unknown_int() && ((x % 2) == 0));\nloop invariant !(unknown_int() && (!(x % 2)));\nloop invariant !(unknown_int() && (x % 2 == 0));\nloop invariant !(unknown_int() && ((x % 2) == 0));\nloop invariant !(unknown_int() && (!(x % 2)));\nloop invariant !(unknown_int() && (x % 2 == 0));\nloop invariant !(unknown_int() && ((x % 2) == 0));\nloop invariant !(unknown_int() && (!(x % 2)));\nloop invariant !(unknown_int() && (x % 2 == 0));\nloop invariant !(unknown_int() && ((x % 2) == 0));\nloop invariant !(unknown_int() && (!(x % 2)));\nloop invariant !(unknown_int() && (x % 2 == 0));\nloop invariant !(unknown_int() && ((x % 2) == 0));\nloop invariant !(unknown_int() && (!(x % 2)));\nloop invariant !(unknown_int() && (x % 2 == 0));\nloop invariant !(unknown_int() && ((x % 2) == 0));\nloop invariant !(unknown_int() && (!(x % 2)));\nloop invariant !(unknown_int() && (x % 2 == 0));\nloop invariant !(unknown_int() && ((x % 2) == 0));\nloop invariant !(unknown_int() && (!(x % 2)));\nloop invariant !(unknown_int() && (x % 2 == 0));\nloop invariant !(unknown_int() && ((x % 2) == 0));\nloop invariant !(unknown_int() && (!(x % 2)));\nloop invariant !(unknown_int() && (x % 2 == 0));\nloop invariant !(unknown_int() && ((x % 2) == 0));\nloop invariant !(unknown_int() && (!(x % 2)));\nloop invariant !(unknown_int() && (x % 2 == 0));\nloop invariant !(unknown_int() && ((x % 2) == 0));\nloop invariant !(unknown_int() && (!(x % 2)));\nloop invariant !(unknown_int() && (x % 2 == 0));\nloop invariant !(unknown_int() && ((x % 2) == 0));\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 13: unexpected token ')'",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 0;\n  /*@\nloop invariant i1: 0 <= x <= 4294967295;\n\n\n\n\n\n*/\nwhile (unknown_int()) {\n    x += 2;\n  }\n  {;\n//@ assert(!(x % 2));\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x;\nloop invariant x % 2 == 0;\nloop invariant x == 2 * (unknown_int() ? 1 : 0);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 14: unexpected token ')'",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 0;\n  /*@\nloop invariant i1: 0 <= x;\n\n\n*/\nwhile (unknown_int()) {\n    x += 2;\n  }\n  {;\n//@ assert(!(x % 2));\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant \\true;\nloop invariant 0 <= x <= UINT_MAX;\nloop invariant unknown_int() ==> x % 2 == 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 14: unexpected token ')'",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 0;\n  /*@\nloop invariant i1: \\true;\nloop invariant i2: 0 <= x <= UINT_MAX;\n\n*/\nwhile (unknown_int()) {\n    x += 2;\n  }\n  {;\n//@ assert(!(x % 2));\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x;\nloop invariant x % 2 == 0;\nloop invariant x <= 2 * unknown_int();\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 14: unexpected token ')'",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 0;\n  /*@\nloop invariant i1: 0 <= x;\n\n\n*/\nwhile (unknown_int()) {\n    x += 2;\n  }\n  {;\n//@ assert(!(x % 2));\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 14,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 2 * (1 + (y - 1) * y / 2);\nloop invariant 0 <= x <= y + 1;\nloop invariant 0 <= y <= 100000;\nloop invariant x >= 1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x % 2 == 0;\nloop invariant y >= 0;\nloop invariant y % 1 == 0;\nloop invariant x >= 0;\nloop invariant x % 1 == 0;\nloop invariant x >= y;\nloop invariant x <= x + 2;\nloop invariant y >= y - 1;\nloop invariant y <= y + 1;\nloop invariant x >= 1;\nloop invariant x % 1 == 0;\nloop invariant y <= 100000;\nloop invariant y % 1 == 0;\nloop invariant x <= y + 1;\nloop invariant x >= 0;\nloop invariant x % 1 == 0;\nloop invariant y >= 0;\nloop invariant y % 1 == 0;\nloop invariant x >= 1;\nloop invariant x % 1 == 0;\nloop invariant y <= 100000;\nloop invariant y % 1 == 0;\nloop invariant x >= 0;\nloop invariant x % 1 == 0;\nloop invariant y >= 0;\nloop invariant y % 1 == 0;\nloop invariant x >= 1;\nloop invariant x % 1 == 0;\nloop invariant y <= 100000;\nloop invariant y % 1 == 0;\nloop invariant x >= 0;\nloop invariant x % 1 == 0;\nloop invariant y >= 0;\nloop invariant y % 1 == 0;\nloop invariant x >= 1;\nloop invariant x % 1 == 0;\nloop invariant y <= 100000;\nloop invariant y % 1 == 0;\nloop invariant x >= 0;\nloop invariant x % 1 == 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 12: unbound logic variable y. Ignoring loop annotation",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 0;\n  /*@\n\n\n\n\nloop invariant i5: x >= 0;\n\n\n\nloop invariant i9: x % 1 == 0;\n\nloop invariant i11: x <= x + 2;\n\n\n\n\n*/\nwhile (unknown_int()) {\n    x += 2;\n  }\n  {;\n//@ assert(!(x % 2));\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\n\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 12: unexpected token ''",
                "houdini_error": "No annotations found"
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant x = 0;\nloop invariant x is even;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 12: Assignment operators not allowed in annotations.",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 0;\n  /*@\n\n\n*/\nwhile (unknown_int()) {\n    x += 2;\n  }\n  {;\n//@ assert(!(x % 2));\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= 2;\nloop invariant x % 2 == 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= x <= 2 is preserved but not established.\nloop invariant x % 2 == 0 is partially proven to be inductive.\nAssertion x % 2 == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 0;\n  /*@\n\n\n*/\nwhile (unknown_int()) {\n    x += 2;\n  }\n  {;\n//@ assert(!(x % 2));\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= 2 * x;\nloop invariant x % 2 == 0;\nloop invariant unknown_int() == 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 14: unexpected token ')'",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 0;\n  /*@\n\n\n\n*/\nwhile (unknown_int()) {\n    x += 2;\n  }\n  {;\n//@ assert(!(x % 2));\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 9,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 2 * (2^32-1);\nloop invariant x % 2 == 0;\nloop invariant unknown_int() ==> x >= 0;\nloop invariant !unknown_int() ==> x == 0;\nloop invariant unknown_int() ==> x < 2 * (2^32-1);\nloop invariant !unknown_int() ==> x <= 2 * (2^32-1);\nloop invariant unknown_int() ==> x % 2 == 0;\nloop invariant !unknown_int() ==> x % 2 == 0;\nloop invariant unknown_int() ==> x % 2 == 0;\nloop invariant !unknown_int() ==> x % 2 == 0;\nloop invariant unknown_int() ==> x % 2 == 0;\nloop invariant !unknown_int() ==> x % 2 == 0;\nloop invariant unknown_int() ==> x % 2 == 0;\nloop invariant !unknown_int() ==> x % 2 == 0;\nloop invariant unknown_int() ==> x % 2 == 0;\nloop invariant !unknown_int() ==> x % 2 == 0;\nloop invariant unknown_int() ==> x % 2 == 0;\nloop invariant !unknown_int() ==> x % 2 == 0;\nloop invariant unknown_int() ==> x % 2 == 0;\nloop invariant !unknown_int() ==> x % 2 == 0;\nloop invariant unknown_int() ==> x % 2 == 0;\nloop invariant !unknown_int() ==> x % 2 == 0;\nloop invariant unknown_int() ==> x % 2 == 0;\nloop invariant !unknown_int() ==> x % 2 == 0;\nloop invariant unknown_int() ==> x % 2 == 0;\nloop invariant !unknown_int() ==> x % 2 == 0;\nloop invariant unknown_int() ==> x % 2 == 0;\nloop invariant !unknown_int() ==> x % 2 == 0;\nloop invariant unknown_int() ==> x % 2 == 0;\nloop invariant !unknown_int() ==> x % 2 == 0;\nloop invariant unknown_int() ==> x % 2 == 0;\nloop invariant !unknown_int() ==> x % 2 == 0;\nloop invariant unknown_int() ==> x % 2 == 0;\nloop invariant !unknown_int() ==> x % 2 == 0;\nloop invariant unknown_int() ==> x % 2 == 0;\nloop invariant !unknown_int() ==> x % 2 == 0;\nloop invariant unknown_int() ==> x % 2 == 0;\nloop invariant !unknown_int() ==> x % 2 == 0;\nloop invariant unknown_int() ==> x % 2 == 0;\nloop invariant !unknown_int() ==> x % 2 == 0;\nloop invariant unknown_int() ==> x % 2 == 0;\nloop invariant !unknown_int() ==> x % 2 == 0;\nloop invariant unknown_int() ==> x % 2 == 0;\nloop invariant !unknown_int() ==> x % 2 == 0;\nloop invariant unknown_int() ==> x % 2 == 0;\nloop invariant !unknown_int() ==> x % 2 == 0;\nloop invariant unknown_int() ==> x % 2 == 0;\nloop invariant !unknown_int() ==> x % 2 == 0;\nloop invariant unknown_int() ==> x % 2 == 0;\nloop invariant !unknown_int() ==> x % 2 == 0;\nloop invariant unknown_int() ==> x % 2 == 0;\nloop invariant !unknown_int() ==> x % 2 == 0;\nloop invariant unknown_int() ==> x % 2 == 0;\nloop invariant !unknown_int() ==> x % 2 == 0;\nloop invariant unknown_int() ==> x % 2 == 0;\nloop invariant !unknown_int() ==> x % 2 == 0;\nloop invariant unknown_int() ==> x % 2 == 0;\nloop invariant !unknown_int() ==> x % 2 == 0;\nloop invariant unknown_int() ==> x % 2 == 0;\nloop invariant !unknown_int() ==> x % 2 == 0;\nloop invariant unknown_int() ==> x % 2 == 0;\nloop invariant !unknown_int() ==> x % 2 == 0;\nloop invariant unknown_int() ==> x % 2 == 0;\nloop invariant !unknown_int() ==> x % 2 == 0;\nloop invariant unknown_int() ==> x % 2 == 0;\nloop invariant !unknown_int() ==> x % 2 == 0;\nloop invariant unknown_int() ==> x % 2 == 0;\nloop invariant !unknown_int() ==> x % 2 == 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 14: unexpected token ')'",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 0;\n  /*@\n\n\n\n\n\n\n\n\n*/\nwhile (unknown_int()) {\n    x += 2;\n  }\n  {;\n//@ assert(!(x % 2));\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant x >= 0;\nloop invariant (x % 2) == 0;\nloop invariant (x % 2) == 0 ==> (x >= 0);\nloop invariant (x % 2) == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x >= 0;\nloop invariant (x % 2) == 0;\nloop invariant (x % 2) == 0 ==> (x >= 0);\nloop invariant (x % 2) == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x >= 0 is partially proven to be inductive.\nloop invariant (x % 2) == 0 is established but not preserved.\nloop invariant (x % 2) == 0 ==> (x >= 0) is partially proven to be inductive.\nloop invariant (x % 2) == 0 ==> x >= 0 is partially proven to be inductive.\nloop invariant x % 2 == 0 ==> x >= 0 is partially proven to be inductive.\nAssertion x % 2 == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 0;\n  /*@\nloop invariant i1: x >= 0;\n\nloop invariant i3: (x % 2) == 0 ==> (x >= 0);\nloop invariant i4: (x % 2) == 0 ==> x >= 0;\nloop invariant i5: x % 2 == 0 ==> x >= 0;\n*/\nwhile (unknown_int()) {\n    x += 2;\n  }\n  {;\n//@ assert(!(x % 2));\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 2 * y;\nloop invariant x % 2 == 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 12: unbound logic variable y. Ignoring loop annotation",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 0;\n  /*@\n\n\n*/\nwhile (unknown_int()) {\n    x += 2;\n  }\n  {;\n//@ assert(!(x % 2));\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x;\nloop invariant x <= 2 * unknown_int();\nloop invariant unknown_int() == (x % 2);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 13: unexpected token ')'",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 0;\n  /*@\nloop invariant i1: 0 <= x;\n\n\n*/\nwhile (unknown_int()) {\n    x += 2;\n  }\n  {;\n//@ assert(!(x % 2));\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 2147483646;\nloop invariant x % 2 == 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 2147483646 is established but not preserved.\nloop invariant x % 2 == 0 is partially proven to be inductive.\nAssertion x % 2 == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 0;\n  /*@\n\n\n*/\nwhile (unknown_int()) {\n    x += 2;\n  }\n  {;\n//@ assert(!(x % 2));\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 15: unexpected token ')'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 0;\n  /*@\nloop invariant i1: 0 <= x;\nloop invariant i2: x % 2 == 0;\nloop invariant i3: 0 <= x <= 4294967295;\nloop invariant i4: 0 <= unknown_int() <= 1;\nloop invariant i5: !(unknown_int() && (x % 2));\nloop invariant i6: !(unknown_int() && ((x % 2) == 0));\nloop invariant i7: !(unknown_int() && (!(x % 2)));\nloop invariant i8: !(unknown_int() && (x % 2 == 0));\nloop invariant i9: x == 2 * (unknown_int() ? 1 : 0);\nloop invariant i10: \\true;\nloop invariant i11: 0 <= x <= UINT_MAX;\nloop invariant i12: unknown_int() ==> x % 2 == 0;\nloop invariant i13: x <= 2 * unknown_int();\nloop invariant i14: 0 <= x <= 2 * (1 + (y - 1) * y / 2);\nloop invariant i15: 0 <= x <= y + 1;\nloop invariant i16: 0 <= y <= 100000;\nloop invariant i17: x >= 1;\nloop invariant i18: x >= 0;\nloop invariant i19: y >= 0;\nloop invariant i20: y % 1 == 0;\nloop invariant i21: x % 1 == 0;\nloop invariant i22: x >= y;\nloop invariant i23: x <= x + 2;\nloop invariant i24: y >= y - 1;\nloop invariant i25: y <= y + 1;\nloop invariant i26: y <= 100000;\nloop invariant i27: x <= y + 1;\nloop invariant i28: x = 0;\nloop invariant i29: x is even;\nloop invariant i30: 1 <= x <= 2;\nloop invariant i31: 1 <= x <= 2 * x;\nloop invariant i32: unknown_int() == 0;\nloop invariant i33: 0 <= x <= 2 * (2^32-1);\nloop invariant i34: unknown_int() ==> x >= 0;\nloop invariant i35: !unknown_int() ==> x == 0;\nloop invariant i36: unknown_int() ==> x < 2 * (2^32-1);\nloop invariant i37: !unknown_int() ==> x <= 2 * (2^32-1);\nloop invariant i38: !unknown_int() ==> x % 2 == 0;\nloop invariant i39: (x % 2) == 0;\nloop invariant i40: (x % 2) == 0 ==> (x >= 0);\nloop invariant i41: (x % 2) == 0 ==> x >= 0;\nloop invariant i42: x % 2 == 0 ==> x >= 0;\nloop invariant i43: 0 <= x <= 2 * y;\nloop invariant i44: unknown_int() == (x % 2);\nloop invariant i45: 0 <= x <= 2147483646;\n*/\nwhile (unknown_int()) {\n    x += 2;\n  }\n  {;\n//@ assert(!(x % 2));\n}\n\n  return 0;\n}",
        "combined_annotation_num_solver_calls": 37,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 0;\n  /*@\nloop invariant i1: 0 <= x;\n\nloop invariant i3: 0 <= x <= 4294967295;\n\n\n\n\n\n\nloop invariant i10: \\true;\nloop invariant i11: 0 <= x <= UINT_MAX;\n\n\n\n\n\n\nloop invariant i18: x >= 0;\n\n\nloop invariant i21: x % 1 == 0;\n\nloop invariant i23: x <= x + 2;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i40: (x % 2) == 0 ==> (x >= 0);\nloop invariant i41: (x % 2) == 0 ==> x >= 0;\nloop invariant i42: x % 2 == 0 ==> x >= 0;\n\n\n\n*/\nwhile (unknown_int()) {\n    x += 2;\n  }\n  {;\n//@ assert(!(x % 2));\n}\n\n  return 0;\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_nondet_true-unreach-call_true-termination.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/85.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/ex2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/42.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/diamond_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/odd.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/even.c"
        ],
        "skipped": [],
        "total": 7,
        "success_count": 1,
        "failure_count": 6,
        "success_rate": 0.14285714285714285
    }
}