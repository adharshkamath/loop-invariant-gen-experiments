{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_nondet_true-unreach-call_true-termination.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int k = 0;\n    while(i < LARGE_INT) {\n        int j = unknown_int();\n        if (!(1 <= j && j < LARGE_INT)) return 0;\n        i = i + j;\n        k ++;\n    }\n    {;\n//@ assert(k <= LARGE_INT);\n}\n\n    return 0;\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 1 <= j < LARGE_INT;\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant i + j >= 0;\nloop invariant i + j <= 2 * LARGE_INT;\nloop invariant i + j <= LARGE_INT + j;\nloop invariant k * j >= 0;\nloop invariant k * j <= LARGE_INT * j;\nloop invariant k * j <= (k + 1) * j;\nloop invariant k * j <= (k + 1) * (LARGE_INT - 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\n*/\n```",
            "```\n/*@\nloop invariant i = 0;\nloop invariant k = 0;\nloop invariant 0 <= j <= LARGE_INT;\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant i <= LARGE_INT * k;\nloop invariant i >= LARGE_INT * (k - 1);\nloop invariant i >= 0;\nloop invariant k >= 0;\nloop invariant j >= 1;\nloop invariant j < LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant k >= 1;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant k >= 1;\nloop invariant k <= LARGE_INT;\nloop invariant i <= LARGE_INT * k;\nloop invariant i >= LARGE_INT * (k - 1);\nloop invariant j >= 1;\nloop invariant j < LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant k >= 1;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant k >= 1;\nloop invariant k <= LARGE_INT;\nloop invariant i <= LARGE_INT * k;\nloop invariant i >= LARGE_INT * (k - 1);\nloop invariant j >= 1;\nloop invariant j < LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant k >= 1;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant k >= 1;\nloop invariant k <= LARGE_INT;\nloop invariant i <= LARGE_INT * k;\nloop invariant i >= LARGE_INT * (k - 1);\nloop invariant j >= 1;\nloop invariant j < LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant k >= 1;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant k >= 1;\nloop invariant k <= LARGE_INT;\nloop invariant i <= LARGE_INT * k;\nloop invariant i >= LARGE_INT * (k - 1);\nloop invariant j >= 1;\nloop invariant j < LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant k >= 1;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant k >= 1;\nloop invariant k <= LARGE_INT;\nloop invariant i <= LARGE_INT * k;\nloop invariant i >= LARGE_INT * (k - 1);\nloop invariant j >= 1;\nloop invariant j < LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant k >= 1;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant k >= 1;\nloop invariant k <= LARGE_INT;\nloop invariant i <= LARGE_INT * k;\nloop invariant i >= LARGE_INT * (k - 1);\nloop invariant j >= 1;\nloop invariant j < LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant k >= 1;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant k >= 1;\nloop invariant k <= LARGE_INT;\nloop invariant i <= LARGE_INT * k;\nloop invariant i >= LARGE_INT * (k - 1);\nloop invariant j >= 1;\nloop invariant j < LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant k >= 1;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant k >= 1;\nloop invariant k <= LARGE_INT;\nloop invariant i <= LARGE_INT * k;\nloop invariant i >= LARGE_INT * (k - 1);\nloop invariant j >= 1;\nloop invariant j < LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant k >= 1;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant k >= 1;\nloop invariant k <= LARGE_INT;\nloop invariant i <= LARGE_INT * k;\nloop invariant i >= LARGE_INT * (k - 1);\nloop invariant j >= 1;\nloop invariant j < LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant k >= 1;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant k >= 1;\nloop invariant k <= LARGE_INT;\nloop invariant i <= LARGE_INT * k;\nloop invariant i >= LARGE_INT * (k - 1);\nloop invariant j >= 1;\nloop invariant j < LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant k >= 1;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant k >= 1;\nloop invariant k <= LARGE_INT;\nloop invariant i <= LARGE_INT * k;\nloop invariant i >= LARGE_INT * (k - 1);\nloop invariant j >= 1;\nloop invariant j < LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant k >= 1;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant k >= 1;\nloop invariant k <= LARGE_INT;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= k;\nloop invariant 0 <= i;\nloop invariant i <= LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant i <= k * LARGE_INT;\nloop invariant i >= k;\nloop invariant i <= k * (k + 1) / 2;\nloop invariant i >= k * (k - 1) / 2;\nloop invariant i <= k * (k + 1) / 2 * LARGE_INT;\nloop invariant i >= k * (k - 1) / 2 * LARGE_INT;\nloop invariant i <= k * (k + 1) / 2 * LARGE_INT + k;\nloop invariant i >= k * (k - 1) / 2 * LARGE_INT + k;\nloop invariant i <= k * (k + 1) / 2 * LARGE_INT + k * LARGE_INT;\nloop invariant i >= k * (k - 1) / 2 * LARGE_INT + k * LARGE_INT;\nloop invariant i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 1);\nloop invariant i >= k * (k - 1) / 2 * LARGE_INT + k * (k + 1);\nloop invariant i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 2) / 2;\nloop invariant i >= k * (k - 1) / 2 * LARGE_INT + k * (k + 2) / 2;\nloop invariant i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 3) / 2;\nloop invariant i >= k * (k - 1) / 2 * LARGE_INT + k * (k + 3) / 2;\nloop invariant i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 4) / 2;\nloop invariant i >= k * (k - 1) / 2 * LARGE_INT + k * (k + 4) / 2;\nloop invariant i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 5) / 2;\nloop invariant i >= k * (k - 1) / 2 * LARGE_INT + k * (k + 5) / 2;\nloop invariant i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 6) / 2;\nloop invariant i >= k * (k - 1) / 2 * LARGE_INT + k * (k + 6) / 2;\nloop invariant i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 7) / 2;\nloop invariant i >= k * (k - 1) / 2 * LARGE_INT + k * (k + 7) / 2;\nloop invariant i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 8) / 2;\nloop invariant i >= k * (k - 1) / 2 * LARGE_INT + k * (k + 8) / 2;\nloop invariant i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 9) / 2;\nloop invariant i >= k * (k - 1) / 2 * LARGE_INT + k * (k + 9) / 2;\nloop invariant i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 10) / 2;\nloop invariant i >= k * (k - 1) / 2 * LARGE_INT + k * (k + 10) / 2;\nloop invariant i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 11) / 2;\nloop invariant i >= k * (k - 1) / 2 * LARGE_INT + k * (k + 11) / 2;\nloop invariant i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 12) / 2;\nloop invariant i >= k * (k - 1) / 2 * LARGE_INT + k * (k + 12) / 2;\nloop invariant i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 13) / 2;\n*/\n```",
            "```\n/*@\nloop invariant i >= 0;\nloop invariant k >= 0;\nloop invariant i <= k * LARGE_INT;\nloop invariant j >= 1;\nloop invariant j < LARGE_INT;\nloop invariant i + j <= LARGE_INT;\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant 1 <= j && j < LARGE_INT ==> i + j >= i;\nloop invariant 1 <= j && j < LARGE_INT ==> k + 1 >= k;\nloop invariant 1 <= j && j < LARGE_INT ==> i + j <= i + LARGE_INT;\nloop invariant 1 <= j && j < LARGE_INT ==> k + 1 <= LARGE_INT;\nloop invariant 1 <= j && j < LARGE_INT ==> i + j < LARGE_INT ==> k + 1 < LARGE_INT;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant k >= 0;\nloop invariant i == k * j;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 1000000;\nloop invariant 0 <= k <= 1000000;\nloop invariant k = (i / LARGE_INT);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant i + j == (LARGE_INT  - 1);\nloop invariant k == (LARGE_INT  - 2);\nloop invariant j == (LARGE_INT  - 3);\nloop invariant i == (LARGE_INT  - 2);\nloop invariant k == (LARGE_INT  - 1);\nloop invariant j == (LARGE_INT  - 2);\nloop invariant i == (LARGE_INT  - 1);\nloop invariant k == (LARGE_INT  - 0);\nloop invariant j == (LARGE_INT  - 1);\nloop invariant i == (LARGE_INT  - 0);\nloop invariant k == (LARGE_INT  - 0);\nloop invariant j == (LARGE_INT  - 0);\nloop invariant i == (LARGE_INT  - 0);\nloop invariant k == (LARGE_INT  - 0);\nloop invariant j == (LARGE_INT  - 0);\nloop invariant i == (LARGE_INT  - 0);\nloop invariant k == (LARGE_INT  - 0);\nloop invariant j == (LARGE_INT  - 0);\nloop invariant i == (LARGE_INT  - 0);\nloop invariant k == (LARGE_INT  - 0);\nloop invariant j == (LARGE_INT  - 0);\nloop invariant i == (LARGE_INT  - 0);\nloop invariant k == (LARGE_INT  - 0);\nloop invariant j == (LARGE_INT  - 0);\nloop invariant i == (LARGE_INT  - 0);\nloop invariant k == (LARGE_INT  - 0);\nloop invariant j == (LARGE_INT  - 0);\nloop invariant i == (LARGE_INT  - 0);\nloop invariant k == (LARGE_INT  - 0);\nloop invariant j == (LARGE_INT  - 0);\nloop invariant i == (LARGE_INT  - 0);\nloop invariant k == (LARGE_INT  - 0);\nloop invariant j == (LARGE_INT  - 0);\nloop invariant i == (LARGE_INT  - 0);\nloop invariant k == (LARGE_INT  - 0);\nloop invariant j == (LARGE_INT  - 0);\nloop invariant i == (LARGE_INT  - 0);\nloop invariant k == (LARGE_INT  - 0);\nloop invariant j == (LARGE_INT  - 0);\nloop invariant i == (LARGE_INT  - 0);\nloop invariant k == (LARGE_INT  - 0);\nloop invariant j == (LARGE_INT  - 0);\nloop invariant i == (LARGE_INT  - 0);\nloop invariant k == (LARGE_INT  - 0);\nloop invariant j == (LARGE_INT  - 0);\nloop invariant i == (LARGE_INT  - 0);\nloop invariant k == (LARGE_INT  - 0);\nloop invariant j == (LARGE_INT  - 0);\nloop invariant i == (LARGE_INT  - 0);\nloop invariant k == (LARGE_INT  - 0);\nloop invariant j == (LARGE_INT  - 0);\nloop invariant i == (LARGE_INT  - 0);\nloop invariant k == (LARGE_INT  - 0);\nloop invariant j == (LARGE_INT  - 0);\nloop invariant i == (LARGE_INT  - 0);\nloop invariant k == (LARGE_INT  - 0);\nloop invariant j == (LARGE_INT  - 0);\nloop invariant i == (LARGE_INT  - 0);\nloop invariant k == (LARGE_INT  - 0);\nloop invariant j == (LARGE_INT  - 0);\nloop invariant i == (LARGE_INT  - 0);\nloop invariant k == (LARGE_INT  - 0);\nloop invariant j == (LARGE_INT  - 0);\nloop invariant i == (LARGE_INT  - 0);\nloop invariant k == (LARGE_INT  - 0);\nloop invariant j == (LARGE_INT  - 0);\nloop invariant i == (LARGE_INT  - 0);\nloop invariant k == (LARGE_INT  - 0);\nloop invariant j == (LARGE_INT  - 0);\nloop invariant i == (LARGE_INT  - 0);\nloop invariant k == (LARGE_INT  - 0);\nloop invariant j == (LARGE_INT  - 0);\nloop invariant i == (LARGE_INT  - 0);\nloop invariant k == (LARGE_INT  - 0);\nloop invariant j == (LARGE_INT  - 0);\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= LARGE_INT;\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant 1 <= j ==> 1 <= i + j <= LARGE_INT;\nloop invariant 1 <= j ==> k + 1 <= LARGE_INT;\nloop invariant 1 <= j ==> 1 <= k + 1;\nloop invariant 1 < j ==> 1 <= k + 1;\nloop invariant 1 <= j ==> i + j < LARGE_INT;\nloop invariant 1 <= j ==> i < LARGE_INT;\nloop invariant 1 <= j ==> i + j <= LARGE_INT;\nloop invariant 1 <= j ==> k <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> k <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 1000000;\nloop invariant 0 <= k <= 1000000;\nloop invariant i + k * large_int >= large_int;\nloop invariant i + k * large_int < large_int * 1000000;\nloop invariant i + k * large_int < large_int * 1000000;\nloop invariant i + k * large_int < large_int * 1000000;\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant i <= LARGE_INT;\nloop invariant 1 <= j && j < LARGE_INT;\nloop invariant i + j <= LARGE_INT;\nloop invariant k >= 0;\nloop invariant k <= LARGE_INT;\nloop invariant j >= 0;\nloop invariant j < LARGE_INT;\nloop invariant unknown_int() <= LARGE_INT;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 1000000;\nloop invariant k >= 0;\nloop invariant i >= k;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 0 <= j < LARGE_INT;\nloop invariant k >= 0;\nloop invariant k <= i / j;\nloop invariant k <= LARGE_INT / j;\nloop invariant i >= j * k;\nloop invariant i >= j * (k - 1);\nloop invariant i <= j * k + j - 1;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 11,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 1 <= j < LARGE_INT;\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant i + j >= 0;\nloop invariant i + j <= 2 * LARGE_INT;\nloop invariant i + j <= LARGE_INT + j;\nloop invariant k * j >= 0;\nloop invariant k * j <= LARGE_INT * j;\nloop invariant k * j <= (k + 1) * j;\nloop invariant k * j <= (k + 1) * (LARGE_INT - 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 16: unbound logic variable j. Ignoring loop annotation",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int k = 0;\n    /*@\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile(i < LARGE_INT) {\n        int j = unknown_int();\n        if (!(1 <= j && j < LARGE_INT)) return 0;\n        i = i + j;\n        k ++;\n    }\n    {;\n//@ assert(k <= LARGE_INT);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 11,
                "annotations": "```\n/*@\nloop invariant i = 0;\nloop invariant k = 0;\nloop invariant 0 <= j <= LARGE_INT;\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant i <= LARGE_INT * k;\nloop invariant i >= LARGE_INT * (k - 1);\nloop invariant i >= 0;\nloop invariant k >= 0;\nloop invariant j >= 1;\nloop invariant j < LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant k >= 1;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant k >= 1;\nloop invariant k <= LARGE_INT;\nloop invariant i <= LARGE_INT * k;\nloop invariant i >= LARGE_INT * (k - 1);\nloop invariant j >= 1;\nloop invariant j < LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant k >= 1;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant k >= 1;\nloop invariant k <= LARGE_INT;\nloop invariant i <= LARGE_INT * k;\nloop invariant i >= LARGE_INT * (k - 1);\nloop invariant j >= 1;\nloop invariant j < LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant k >= 1;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant k >= 1;\nloop invariant k <= LARGE_INT;\nloop invariant i <= LARGE_INT * k;\nloop invariant i >= LARGE_INT * (k - 1);\nloop invariant j >= 1;\nloop invariant j < LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant k >= 1;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant k >= 1;\nloop invariant k <= LARGE_INT;\nloop invariant i <= LARGE_INT * k;\nloop invariant i >= LARGE_INT * (k - 1);\nloop invariant j >= 1;\nloop invariant j < LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant k >= 1;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant k >= 1;\nloop invariant k <= LARGE_INT;\nloop invariant i <= LARGE_INT * k;\nloop invariant i >= LARGE_INT * (k - 1);\nloop invariant j >= 1;\nloop invariant j < LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant k >= 1;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant k >= 1;\nloop invariant k <= LARGE_INT;\nloop invariant i <= LARGE_INT * k;\nloop invariant i >= LARGE_INT * (k - 1);\nloop invariant j >= 1;\nloop invariant j < LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant k >= 1;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant k >= 1;\nloop invariant k <= LARGE_INT;\nloop invariant i <= LARGE_INT * k;\nloop invariant i >= LARGE_INT * (k - 1);\nloop invariant j >= 1;\nloop invariant j < LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant k >= 1;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant k >= 1;\nloop invariant k <= LARGE_INT;\nloop invariant i <= LARGE_INT * k;\nloop invariant i >= LARGE_INT * (k - 1);\nloop invariant j >= 1;\nloop invariant j < LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant k >= 1;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant k >= 1;\nloop invariant k <= LARGE_INT;\nloop invariant i <= LARGE_INT * k;\nloop invariant i >= LARGE_INT * (k - 1);\nloop invariant j >= 1;\nloop invariant j < LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant k >= 1;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant k >= 1;\nloop invariant k <= LARGE_INT;\nloop invariant i <= LARGE_INT * k;\nloop invariant i >= LARGE_INT * (k - 1);\nloop invariant j >= 1;\nloop invariant j < LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant k >= 1;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant k >= 1;\nloop invariant k <= LARGE_INT;\nloop invariant i <= LARGE_INT * k;\nloop invariant i >= LARGE_INT * (k - 1);\nloop invariant j >= 1;\nloop invariant j < LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant k >= 1;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant k >= 1;\nloop invariant k <= LARGE_INT;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 15: Assignment operators not allowed in annotations.",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int k = 0;\n    /*@\n\n\n\n\n\nloop invariant i6: i <= LARGE_INT * k;\n\nloop invariant i8: i >= 0;\nloop invariant i9: k >= 0;\n\n\n\n\n\n*/\nwhile(i < LARGE_INT) {\n        int j = unknown_int();\n        if (!(1 <= j && j < LARGE_INT)) return 0;\n        i = i + j;\n        k ++;\n    }\n    {;\n//@ assert(k <= LARGE_INT);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= k;\nloop invariant 0 <= i;\nloop invariant i <= LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant i <= k * LARGE_INT;\nloop invariant i >= k;\nloop invariant i <= k * (k + 1) / 2;\nloop invariant i >= k * (k - 1) / 2;\nloop invariant i <= k * (k + 1) / 2 * LARGE_INT;\nloop invariant i >= k * (k - 1) / 2 * LARGE_INT;\nloop invariant i <= k * (k + 1) / 2 * LARGE_INT + k;\nloop invariant i >= k * (k - 1) / 2 * LARGE_INT + k;\nloop invariant i <= k * (k + 1) / 2 * LARGE_INT + k * LARGE_INT;\nloop invariant i >= k * (k - 1) / 2 * LARGE_INT + k * LARGE_INT;\nloop invariant i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 1);\nloop invariant i >= k * (k - 1) / 2 * LARGE_INT + k * (k + 1);\nloop invariant i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 2) / 2;\nloop invariant i >= k * (k - 1) / 2 * LARGE_INT + k * (k + 2) / 2;\nloop invariant i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 3) / 2;\nloop invariant i >= k * (k - 1) / 2 * LARGE_INT + k * (k + 3) / 2;\nloop invariant i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 4) / 2;\nloop invariant i >= k * (k - 1) / 2 * LARGE_INT + k * (k + 4) / 2;\nloop invariant i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 5) / 2;\nloop invariant i >= k * (k - 1) / 2 * LARGE_INT + k * (k + 5) / 2;\nloop invariant i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 6) / 2;\nloop invariant i >= k * (k - 1) / 2 * LARGE_INT + k * (k + 6) / 2;\nloop invariant i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 7) / 2;\nloop invariant i >= k * (k - 1) / 2 * LARGE_INT + k * (k + 7) / 2;\nloop invariant i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 8) / 2;\nloop invariant i >= k * (k - 1) / 2 * LARGE_INT + k * (k + 8) / 2;\nloop invariant i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 9) / 2;\nloop invariant i >= k * (k - 1) / 2 * LARGE_INT + k * (k + 9) / 2;\nloop invariant i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 10) / 2;\nloop invariant i >= k * (k - 1) / 2 * LARGE_INT + k * (k + 10) / 2;\nloop invariant i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 11) / 2;\nloop invariant i >= k * (k - 1) / 2 * LARGE_INT + k * (k + 11) / 2;\nloop invariant i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 12) / 2;\nloop invariant i >= k * (k - 1) / 2 * LARGE_INT + k * (k + 12) / 2;\nloop invariant i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 13) / 2;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= k is partially proven to be inductive.\nloop invariant 0 <= i is partially proven to be inductive.\nloop invariant i <= LARGE_INT is partially proven to be inductive.\nloop invariant k <= LARGE_INT is partially proven to be inductive.\nloop invariant i <= k * LARGE_INT is partially proven to be inductive.\nloop invariant i >= k is partially proven to be inductive.\nloop invariant i <= k * (k + 1) / 2 is established but not preserved.\nloop invariant i >= k * (k - 1) / 2 is partially proven to be inductive.\nloop invariant i <= k * (k + 1) / 2 * LARGE_INT is partially proven to be inductive.\nloop invariant i >= k * (k - 1) / 2 * LARGE_INT is partially proven to be inductive.\nloop invariant i <= k * (k + 1) / 2 * LARGE_INT + k is partially proven to be inductive.\nloop invariant i >= k * (k - 1) / 2 * LARGE_INT + k is partially proven to be inductive.\nloop invariant i <= k * (k + 1) / 2 * LARGE_INT + k * LARGE_INT is partially proven to be inductive.\nloop invariant i >= k * (k - 1) / 2 * LARGE_INT + k * LARGE_INT is established but not preserved.\nloop invariant i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 1) is partially proven to be inductive.\nloop invariant i >= k * (k - 1) / 2 * LARGE_INT + k * (k + 1) is partially proven to be inductive.\nloop invariant i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 2) / 2 is partially proven to be inductive.\nloop invariant i >= k * (k - 1) / 2 * LARGE_INT + k * (k + 2) / 2 is partially proven to be inductive.\nloop invariant i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 3) / 2 is partially proven to be inductive.\nloop invariant i >= k * (k - 1) / 2 * LARGE_INT + k * (k + 3) / 2 is partially proven to be inductive.\nloop invariant i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 4) / 2 is partially proven to be inductive.\nloop invariant i >= k * (k - 1) / 2 * LARGE_INT + k * (k + 4) / 2 is partially proven to be inductive.\nloop invariant i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 5) / 2 is partially proven to be inductive.\nloop invariant i >= k * (k - 1) / 2 * LARGE_INT + k * (k + 5) / 2 is partially proven to be inductive.\nloop invariant i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 6) / 2 is partially proven to be inductive.\nloop invariant i >= k * (k - 1) / 2 * LARGE_INT + k * (k + 6) / 2 is partially proven to be inductive.\nloop invariant i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 7) / 2 is partially proven to be inductive.\nloop invariant i >= k * (k - 1) / 2 * LARGE_INT + k * (k + 7) / 2 is partially proven to be inductive.\nloop invariant i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 8) / 2 is partially proven to be inductive.\nloop invariant i >= k * (k - 1) / 2 * LARGE_INT + k * (k + 8) / 2 is partially proven to be inductive.\nloop invariant i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 9) / 2 is partially proven to be inductive.\nloop invariant i >= k * (k - 1) / 2 * LARGE_INT + k * (k + 9) / 2 is partially proven to be inductive.\nloop invariant i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 10) / 2 is partially proven to be inductive.\nloop invariant i >= k * (k - 1) / 2 * LARGE_INT + k * (k + 10) / 2 is partially proven to be inductive.\nloop invariant i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 11) / 2 is partially proven to be inductive.\nloop invariant i >= k * (k - 1) / 2 * LARGE_INT + k * (k + 11) / 2 is partially proven to be inductive.\nloop invariant i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 12) / 2 is partially proven to be inductive.\nloop invariant i >= k * (k - 1) / 2 * LARGE_INT + k * (k + 12) / 2 is partially proven to be inductive.\nloop invariant i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 13) / 2 is partially proven to be inductive.\nAssertion k <= 1000000: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int k = 0;\n    /*@\nloop invariant i1: 0 <= k;\nloop invariant i2: 0 <= i;\n\nloop invariant i4: k <= LARGE_INT;\nloop invariant i5: i <= k * LARGE_INT;\nloop invariant i6: i >= k;\n\n\nloop invariant i9: i <= k * (k + 1) / 2 * LARGE_INT;\n\nloop invariant i11: i <= k * (k + 1) / 2 * LARGE_INT + k;\n\nloop invariant i13: i <= k * (k + 1) / 2 * LARGE_INT + k * LARGE_INT;\n\nloop invariant i15: i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 1);\n\nloop invariant i17: i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 2) / 2;\n\nloop invariant i19: i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 3) / 2;\n\nloop invariant i21: i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 4) / 2;\n\nloop invariant i23: i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 5) / 2;\n\nloop invariant i25: i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 6) / 2;\n\nloop invariant i27: i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 7) / 2;\n\nloop invariant i29: i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 8) / 2;\n\nloop invariant i31: i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 9) / 2;\n\nloop invariant i33: i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 10) / 2;\n\nloop invariant i35: i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 11) / 2;\n\nloop invariant i37: i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 12) / 2;\n\nloop invariant i39: i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 13) / 2;\n*/\nwhile(i < LARGE_INT) {\n        int j = unknown_int();\n        if (!(1 <= j && j < LARGE_INT)) return 0;\n        i = i + j;\n        k ++;\n    }\n    {;\n//@ assert(k <= LARGE_INT);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant i >= 0;\nloop invariant k >= 0;\nloop invariant i <= k * LARGE_INT;\nloop invariant j >= 1;\nloop invariant j < LARGE_INT;\nloop invariant i + j <= LARGE_INT;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 18: unbound logic variable j. Ignoring loop annotation",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int k = 0;\n    /*@\nloop invariant i1: i >= 0;\nloop invariant i2: k >= 0;\nloop invariant i3: i <= k * LARGE_INT;\n\n\n\n*/\nwhile(i < LARGE_INT) {\n        int j = unknown_int();\n        if (!(1 <= j && j < LARGE_INT)) return 0;\n        i = i + j;\n        k ++;\n    }\n    {;\n//@ assert(k <= LARGE_INT);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\n\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 15: unexpected token ''",
                "houdini_error": "No annotations found"
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant 1 <= j && j < LARGE_INT ==> i + j >= i;\nloop invariant 1 <= j && j < LARGE_INT ==> k + 1 >= k;\nloop invariant 1 <= j && j < LARGE_INT ==> i + j <= i + LARGE_INT;\nloop invariant 1 <= j && j < LARGE_INT ==> k + 1 <= LARGE_INT;\nloop invariant 1 <= j && j < LARGE_INT ==> i + j < LARGE_INT ==> k + 1 < LARGE_INT;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 17: unbound logic variable j. Ignoring loop annotation",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int k = 0;\n    /*@\n\n\n\n\n\n\n\n*/\nwhile(i < LARGE_INT) {\n        int j = unknown_int();\n        if (!(1 <= j && j < LARGE_INT)) return 0;\n        i = i + j;\n        k ++;\n    }\n    {;\n//@ assert(k <= LARGE_INT);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant k >= 0;\nloop invariant i == k * j;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 17: unbound logic variable j. Ignoring loop annotation",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int k = 0;\n    /*@\n\nloop invariant i2: k >= 0;\n\n*/\nwhile(i < LARGE_INT) {\n        int j = unknown_int();\n        if (!(1 <= j && j < LARGE_INT)) return 0;\n        i = i + j;\n        k ++;\n    }\n    {;\n//@ assert(k <= LARGE_INT);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 1000000;\nloop invariant 0 <= k <= 1000000;\nloop invariant k = (i / LARGE_INT);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 17: Assignment operators not allowed in annotations.",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int k = 0;\n    /*@\n\n\n\n*/\nwhile(i < LARGE_INT) {\n        int j = unknown_int();\n        if (!(1 <= j && j < LARGE_INT)) return 0;\n        i = i + j;\n        k ++;\n    }\n    {;\n//@ assert(k <= LARGE_INT);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 13,
                "annotations": "```\n/*@\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant i + j == (LARGE_INT  - 1);\nloop invariant k == (LARGE_INT  - 2);\nloop invariant j == (LARGE_INT  - 3);\nloop invariant i == (LARGE_INT  - 2);\nloop invariant k == (LARGE_INT  - 1);\nloop invariant j == (LARGE_INT  - 2);\nloop invariant i == (LARGE_INT  - 1);\nloop invariant k == (LARGE_INT  - 0);\nloop invariant j == (LARGE_INT  - 1);\nloop invariant i == (LARGE_INT  - 0);\nloop invariant k == (LARGE_INT  - 0);\nloop invariant j == (LARGE_INT  - 0);\nloop invariant i == (LARGE_INT  - 0);\nloop invariant k == (LARGE_INT  - 0);\nloop invariant j == (LARGE_INT  - 0);\nloop invariant i == (LARGE_INT  - 0);\nloop invariant k == (LARGE_INT  - 0);\nloop invariant j == (LARGE_INT  - 0);\nloop invariant i == (LARGE_INT  - 0);\nloop invariant k == (LARGE_INT  - 0);\nloop invariant j == (LARGE_INT  - 0);\nloop invariant i == (LARGE_INT  - 0);\nloop invariant k == (LARGE_INT  - 0);\nloop invariant j == (LARGE_INT  - 0);\nloop invariant i == (LARGE_INT  - 0);\nloop invariant k == (LARGE_INT  - 0);\nloop invariant j == (LARGE_INT  - 0);\nloop invariant i == (LARGE_INT  - 0);\nloop invariant k == (LARGE_INT  - 0);\nloop invariant j == (LARGE_INT  - 0);\nloop invariant i == (LARGE_INT  - 0);\nloop invariant k == (LARGE_INT  - 0);\nloop invariant j == (LARGE_INT  - 0);\nloop invariant i == (LARGE_INT  - 0);\nloop invariant k == (LARGE_INT  - 0);\nloop invariant j == (LARGE_INT  - 0);\nloop invariant i == (LARGE_INT  - 0);\nloop invariant k == (LARGE_INT  - 0);\nloop invariant j == (LARGE_INT  - 0);\nloop invariant i == (LARGE_INT  - 0);\nloop invariant k == (LARGE_INT  - 0);\nloop invariant j == (LARGE_INT  - 0);\nloop invariant i == (LARGE_INT  - 0);\nloop invariant k == (LARGE_INT  - 0);\nloop invariant j == (LARGE_INT  - 0);\nloop invariant i == (LARGE_INT  - 0);\nloop invariant k == (LARGE_INT  - 0);\nloop invariant j == (LARGE_INT  - 0);\nloop invariant i == (LARGE_INT  - 0);\nloop invariant k == (LARGE_INT  - 0);\nloop invariant j == (LARGE_INT  - 0);\nloop invariant i == (LARGE_INT  - 0);\nloop invariant k == (LARGE_INT  - 0);\nloop invariant j == (LARGE_INT  - 0);\nloop invariant i == (LARGE_INT  - 0);\nloop invariant k == (LARGE_INT  - 0);\nloop invariant j == (LARGE_INT  - 0);\nloop invariant i == (LARGE_INT  - 0);\nloop invariant k == (LARGE_INT  - 0);\nloop invariant j == (LARGE_INT  - 0);\nloop invariant i == (LARGE_INT  - 0);\nloop invariant k == (LARGE_INT  - 0);\nloop invariant j == (LARGE_INT  - 0);\nloop invariant i == (LARGE_INT  - 0);\nloop invariant k == (LARGE_INT  - 0);\nloop invariant j == (LARGE_INT  - 0);\nloop invariant i == (LARGE_INT  - 0);\nloop invariant k == (LARGE_INT  - 0);\nloop invariant j == (LARGE_INT  - 0);\nloop invariant i == (LARGE_INT  - 0);\nloop invariant k == (LARGE_INT  - 0);\nloop invariant j == (LARGE_INT  - 0);\nloop invariant i == (LARGE_INT  - 0);\nloop invariant k == (LARGE_INT  - 0);\nloop invariant j == (LARGE_INT  - 0);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 17: unbound logic variable j. Ignoring loop annotation",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int k = 0;\n    /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile(i < LARGE_INT) {\n        int j = unknown_int();\n        if (!(1 <= j && j < LARGE_INT)) return 0;\n        i = i + j;\n        k ++;\n    }\n    {;\n//@ assert(k <= LARGE_INT);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 12,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= LARGE_INT;\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant 1 <= j ==> 1 <= i + j <= LARGE_INT;\nloop invariant 1 <= j ==> k + 1 <= LARGE_INT;\nloop invariant 1 <= j ==> 1 <= k + 1;\nloop invariant 1 < j ==> 1 <= k + 1;\nloop invariant 1 <= j ==> i + j < LARGE_INT;\nloop invariant 1 <= j ==> i < LARGE_INT;\nloop invariant 1 <= j ==> i + j <= LARGE_INT;\nloop invariant 1 <= j ==> k <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> k <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 17: unbound logic variable j. Ignoring loop annotation",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int k = 0;\n    /*@\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile(i < LARGE_INT) {\n        int j = unknown_int();\n        if (!(1 <= j && j < LARGE_INT)) return 0;\n        i = i + j;\n        k ++;\n    }\n    {;\n//@ assert(k <= LARGE_INT);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 1000000;\nloop invariant 0 <= k <= 1000000;\nloop invariant i + k * large_int >= large_int;\nloop invariant i + k * large_int < large_int * 1000000;\nloop invariant i + k * large_int < large_int * 1000000;\nloop invariant i + k * large_int < large_int * 1000000;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 17: unbound logic variable large_int. Ignoring loop annotation",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int k = 0;\n    /*@\n\n\n\n\n*/\nwhile(i < LARGE_INT) {\n        int j = unknown_int();\n        if (!(1 <= j && j < LARGE_INT)) return 0;\n        i = i + j;\n        k ++;\n    }\n    {;\n//@ assert(k <= LARGE_INT);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\n\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 15: unexpected token ''",
                "houdini_error": "No annotations found"
            },
            {
                "num_solver_calls": 8,
                "annotations": "```\n/*@\nloop invariant i <= LARGE_INT;\nloop invariant 1 <= j && j < LARGE_INT;\nloop invariant i + j <= LARGE_INT;\nloop invariant k >= 0;\nloop invariant k <= LARGE_INT;\nloop invariant j >= 0;\nloop invariant j < LARGE_INT;\nloop invariant unknown_int() <= LARGE_INT;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 22: unexpected token ')'",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int k = 0;\n    /*@\n\n\n\nloop invariant i4: k >= 0;\n\n\n\n\n*/\nwhile(i < LARGE_INT) {\n        int j = unknown_int();\n        if (!(1 <= j && j < LARGE_INT)) return 0;\n        i = i + j;\n        k ++;\n    }\n    {;\n//@ assert(k <= LARGE_INT);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 1000000;\nloop invariant k >= 0;\nloop invariant i >= k;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= 1000000 is established but not preserved.\nloop invariant k >= 0 is partially proven to be inductive.\nloop invariant i >= k is partially proven to be inductive.\nAssertion k <= 1000000: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int k = 0;\n    /*@\n\nloop invariant i2: k >= 0;\nloop invariant i3: i >= k;\n*/\nwhile(i < LARGE_INT) {\n        int j = unknown_int();\n        if (!(1 <= j && j < LARGE_INT)) return 0;\n        i = i + j;\n        k ++;\n    }\n    {;\n//@ assert(k <= LARGE_INT);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 9,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 0 <= j < LARGE_INT;\nloop invariant k >= 0;\nloop invariant k <= i / j;\nloop invariant k <= LARGE_INT / j;\nloop invariant i >= j * k;\nloop invariant i >= j * (k - 1);\nloop invariant i <= j * k + j - 1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 16: unbound logic variable j. Ignoring loop annotation",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int k = 0;\n    /*@\n\n\nloop invariant i3: k >= 0;\n\n\n\n\n\n*/\nwhile(i < LARGE_INT) {\n        int j = unknown_int();\n        if (!(1 <= j && j < LARGE_INT)) return 0;\n        i = i + j;\n        k ++;\n    }\n    {;\n//@ assert(k <= LARGE_INT);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 26: Assignment operators not allowed in annotations.",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int k = 0;\n    /*@\nloop invariant i1: 0 <= i <= LARGE_INT;\nloop invariant i2: 1 <= j < LARGE_INT;\nloop invariant i3: 0 <= k <= LARGE_INT;\nloop invariant i4: i + j >= 0;\nloop invariant i5: i + j <= 2 * LARGE_INT;\nloop invariant i6: i + j <= LARGE_INT + j;\nloop invariant i7: k * j >= 0;\nloop invariant i8: k * j <= LARGE_INT * j;\nloop invariant i9: k * j <= (k + 1) * j;\nloop invariant i10: k * j <= (k + 1) * (LARGE_INT - 1);\nloop invariant i11: k * j <= LARGE_INT * (k + 1);\nloop invariant i12: i = 0;\nloop invariant i13: k = 0;\nloop invariant i14: 0 <= j <= LARGE_INT;\nloop invariant i15: i <= LARGE_INT * k;\nloop invariant i16: i >= LARGE_INT * (k - 1);\nloop invariant i17: i >= 0;\nloop invariant i18: k >= 0;\nloop invariant i19: j >= 1;\nloop invariant i20: j < LARGE_INT;\nloop invariant i21: k <= LARGE_INT;\nloop invariant i22: k >= 1;\nloop invariant i23: i <= LARGE_INT;\nloop invariant i24: 0 <= k;\nloop invariant i25: 0 <= i;\nloop invariant i26: i <= k * LARGE_INT;\nloop invariant i27: i >= k;\nloop invariant i28: i <= k * (k + 1) / 2;\nloop invariant i29: i >= k * (k - 1) / 2;\nloop invariant i30: i <= k * (k + 1) / 2 * LARGE_INT;\nloop invariant i31: i >= k * (k - 1) / 2 * LARGE_INT;\nloop invariant i32: i <= k * (k + 1) / 2 * LARGE_INT + k;\nloop invariant i33: i >= k * (k - 1) / 2 * LARGE_INT + k;\nloop invariant i34: i <= k * (k + 1) / 2 * LARGE_INT + k * LARGE_INT;\nloop invariant i35: i >= k * (k - 1) / 2 * LARGE_INT + k * LARGE_INT;\nloop invariant i36: i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 1);\nloop invariant i37: i >= k * (k - 1) / 2 * LARGE_INT + k * (k + 1);\nloop invariant i38: i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 2) / 2;\nloop invariant i39: i >= k * (k - 1) / 2 * LARGE_INT + k * (k + 2) / 2;\nloop invariant i40: i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 3) / 2;\nloop invariant i41: i >= k * (k - 1) / 2 * LARGE_INT + k * (k + 3) / 2;\nloop invariant i42: i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 4) / 2;\nloop invariant i43: i >= k * (k - 1) / 2 * LARGE_INT + k * (k + 4) / 2;\nloop invariant i44: i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 5) / 2;\nloop invariant i45: i >= k * (k - 1) / 2 * LARGE_INT + k * (k + 5) / 2;\nloop invariant i46: i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 6) / 2;\nloop invariant i47: i >= k * (k - 1) / 2 * LARGE_INT + k * (k + 6) / 2;\nloop invariant i48: i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 7) / 2;\nloop invariant i49: i >= k * (k - 1) / 2 * LARGE_INT + k * (k + 7) / 2;\nloop invariant i50: i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 8) / 2;\nloop invariant i51: i >= k * (k - 1) / 2 * LARGE_INT + k * (k + 8) / 2;\nloop invariant i52: i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 9) / 2;\nloop invariant i53: i >= k * (k - 1) / 2 * LARGE_INT + k * (k + 9) / 2;\nloop invariant i54: i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 10) / 2;\nloop invariant i55: i >= k * (k - 1) / 2 * LARGE_INT + k * (k + 10) / 2;\nloop invariant i56: i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 11) / 2;\nloop invariant i57: i >= k * (k - 1) / 2 * LARGE_INT + k * (k + 11) / 2;\nloop invariant i58: i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 12) / 2;\nloop invariant i59: i >= k * (k - 1) / 2 * LARGE_INT + k * (k + 12) / 2;\nloop invariant i60: i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 13) / 2;\nloop invariant i61: i + j <= LARGE_INT;\nloop invariant i62: 1 <= j && j < LARGE_INT ==> i + j >= i;\nloop invariant i63: 1 <= j && j < LARGE_INT ==> k + 1 >= k;\nloop invariant i64: 1 <= j && j < LARGE_INT ==> i + j <= i + LARGE_INT;\nloop invariant i65: 1 <= j && j < LARGE_INT ==> k + 1 <= LARGE_INT;\nloop invariant i66: 1 <= j && j < LARGE_INT ==> i + j < LARGE_INT ==> k + 1 < LARGE_INT;\nloop invariant i67: i == k * j;\nloop invariant i68: 0 <= i <= 1000000;\nloop invariant i69: 0 <= k <= 1000000;\nloop invariant i70: k = (i / LARGE_INT);\nloop invariant i71: i + j == (LARGE_INT  - 1);\nloop invariant i72: k == (LARGE_INT  - 2);\nloop invariant i73: j == (LARGE_INT  - 3);\nloop invariant i74: i == (LARGE_INT  - 2);\nloop invariant i75: k == (LARGE_INT  - 1);\nloop invariant i76: j == (LARGE_INT  - 2);\nloop invariant i77: i == (LARGE_INT  - 1);\nloop invariant i78: k == (LARGE_INT  - 0);\nloop invariant i79: j == (LARGE_INT  - 1);\nloop invariant i80: i == (LARGE_INT  - 0);\nloop invariant i81: j == (LARGE_INT  - 0);\nloop invariant i82: 1 <= i <= LARGE_INT;\nloop invariant i83: 1 <= j ==> 1 <= i + j <= LARGE_INT;\nloop invariant i84: 1 <= j ==> k + 1 <= LARGE_INT;\nloop invariant i85: 1 <= j ==> 1 <= k + 1;\nloop invariant i86: 1 < j ==> 1 <= k + 1;\nloop invariant i87: 1 <= j ==> i + j < LARGE_INT;\nloop invariant i88: 1 <= j ==> i < LARGE_INT;\nloop invariant i89: 1 <= j ==> i + j <= LARGE_INT;\nloop invariant i90: 1 <= j ==> k <= LARGE_INT;\nloop invariant i91: 1 <= j ==> i <= LARGE_INT;\nloop invariant i92: i + k * large_int >= large_int;\nloop invariant i93: i + k * large_int < large_int * 1000000;\nloop invariant i94: 1 <= j && j < LARGE_INT;\nloop invariant i95: j >= 0;\nloop invariant i96: unknown_int() <= LARGE_INT;\nloop invariant i97: 0 <= j < LARGE_INT;\nloop invariant i98: k <= i / j;\nloop invariant i99: k <= LARGE_INT / j;\nloop invariant i100: i >= j * k;\nloop invariant i101: i >= j * (k - 1);\nloop invariant i102: i <= j * k + j - 1;\n*/\nwhile(i < LARGE_INT) {\n        int j = unknown_int();\n        if (!(1 <= j && j < LARGE_INT)) return 0;\n        i = i + j;\n        k ++;\n    }\n    {;\n//@ assert(k <= LARGE_INT);\n}\n\n    return 0;\n}",
        "combined_annotation_num_solver_calls": 61,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int k = 0;\n    /*@\n\n\nloop invariant i3: 0 <= k <= LARGE_INT;\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i15: i <= LARGE_INT * k;\n\nloop invariant i17: i >= 0;\nloop invariant i18: k >= 0;\n\n\nloop invariant i21: k <= LARGE_INT;\n\n\nloop invariant i24: 0 <= k;\nloop invariant i25: 0 <= i;\nloop invariant i26: i <= k * LARGE_INT;\nloop invariant i27: i >= k;\n\n\nloop invariant i30: i <= k * (k + 1) / 2 * LARGE_INT;\n\nloop invariant i32: i <= k * (k + 1) / 2 * LARGE_INT + k;\n\nloop invariant i34: i <= k * (k + 1) / 2 * LARGE_INT + k * LARGE_INT;\n\nloop invariant i36: i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 1);\n\nloop invariant i38: i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 2) / 2;\n\nloop invariant i40: i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 3) / 2;\n\nloop invariant i42: i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 4) / 2;\n\nloop invariant i44: i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 5) / 2;\n\nloop invariant i46: i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 6) / 2;\n\nloop invariant i48: i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 7) / 2;\n\nloop invariant i50: i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 8) / 2;\n\nloop invariant i52: i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 9) / 2;\n\nloop invariant i54: i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 10) / 2;\n\nloop invariant i56: i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 11) / 2;\n\nloop invariant i58: i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 12) / 2;\n\nloop invariant i60: i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 13) / 2;\n\n\n\n\n\n\n\n\nloop invariant i69: 0 <= k <= 1000000;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile(i < LARGE_INT) {\n        int j = unknown_int();\n        if (!(1 <= j && j < LARGE_INT)) return 0;\n        i = i + j;\n        k ++;\n    }\n    {;\n//@ assert(k <= LARGE_INT);\n}\n\n    return 0;\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_nondet_true-unreach-call_true-termination.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/85.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/ex2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/42.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/diamond_1-1.c"
        ],
        "skipped": [],
        "total": 5,
        "success_count": 1,
        "failure_count": 4,
        "success_rate": 0.2
    }
}