{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/ex2.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n\tint x, y, z;\n\tx=0;y=0;z=0;\n\twhile (x<100) {\n\t\tif(x<=50)\n               \t\ty=y+1;\n       \t\telse\n               \t\ty=y-1;\n       \n       \t\tif(x<25)\n               \t\tz=z+1;\n       \t\telse\n               \t\tz=z+5;\n       \n       \t\tx=x+1;\n\t}\n\t{;\n//@ assert(z==400);\n}\n\n\t{;\n//@ assert(y==2);\n}\n\n\t{;\n//@ assert(x==100);\n}\n\n\treturn 0;\n}",
        "success": false,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant 0 <= y <= 2;\nloop invariant 0 <= z <= 400;\nloop invariant (x <= 50 ==> y <= 1);\nloop invariant (x > 50 ==> y >= -1);\nloop invariant (x < 25 ==> z <= 1);\nloop invariant (x >= 25 ==> z >= 5);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant x >= 0;\nloop invariant x <= 100;\nloop invariant x == 100;\nloop invariant y == 2;\nloop invariant z == 400;\nloop invariant x == 100 ==> y == 2;\nloop invariant x == 100 ==> z == 400;\nloop invariant x == 100 ==> x == 100;\nloop invariant x == 100 ==> y == 2;\nloop invariant x == 100 ==> z == 400;\nloop invariant x == 100 ==> x == 100;\nloop invariant x == 100 ==> y == 2;\nloop invariant x == 100 ==> z == 400;\nloop invariant x == 100 ==> x == 100;\nloop invariant x == 100 ==> y == 2;\nloop invariant x == 100 ==> z == 400;\nloop invariant x == 100 ==> x == 100;\nloop invariant x == 100 ==> y == 2;\nloop invariant x == 100 ==> z == 400;\nloop invariant x == 100 ==> x == 100;\nloop invariant x == 100 ==> y == 2;\nloop invariant x == 100 ==> z == 400;\nloop invariant x == 100 ==> x == 100;\nloop invariant x == 100 ==> y == 2;\nloop invariant x == 100 ==> z == 400;\nloop invariant x == 100 ==> x == 100;\nloop invariant x == 100 ==> y == 2;\nloop invariant x == 100 ==> z == 400;\nloop invariant x == 100 ==> x == 100;\nloop invariant x == 100 ==> y == 2;\nloop invariant x == 100 ==> z == 400;\nloop invariant x == 100 ==> x == 100;\nloop invariant x == 100 ==> y == 2;\nloop invariant x == 100 ==> z == 400;\nloop invariant x == 100 ==> x == 100;\nloop invariant x == 100 ==> y == 2;\nloop invariant x == 100 ==> z == 400;\nloop invariant x == 100 ==> x == 100;\nloop invariant x == 100 ==> y == 2;\nloop invariant x == 100 ==> z == 400;\nloop invariant x == 100 ==> x == 100;\nloop invariant x == 100 ==> y == 2;\nloop invariant x == 100 ==> z == 400;\nloop invariant x == 100 ==> x == 100;\nloop invariant x == 100 ==> y == 2;\nloop invariant x == 100 ==> z == 400;\nloop invariant x == 100 ==> x == 100;\nloop invariant x == 100 ==> y == 2;\nloop invariant x == 100 ==> z == 400;\nloop invariant x == 100 ==> x == 100;\nloop invariant x == 100 ==> y == 2;\nloop invariant x == 100 ==> z == 400;\nloop invariant x == 100 ==> x == 100;\nloop invariant x == 100 ==> y == 2;\nloop invariant x == 100 ==> z == 400;\nloop invariant x == 100 ==> x == 100;\nloop invariant x == 100 ==> y == 2;\nloop invariant x == 100 ==> z == 400;\nloop invariant x == 100 ==> x == 100;\nloop invariant x == 100 ==> y == 2;\nloop invariant x == 100 ==> z == 400;\nloop invariant x == 100 ==> x == 100;\nloop invariant x == 100 ==> y == 2;\nloop invariant x == 100 ==> z == 400;\nloop invariant x == 100 ==> x == 100;\nloop invariant x == 100 ==> y == 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant 0 <= y <= 2;\nloop invariant 0 <= z <= 250;\nloop invariant (x <= 50 ==> y <= 1);\nloop invariant (x >= 25 ==> z <= 400);\nloop invariant (x >= 50 ==> y >= -1);\nloop invariant (x < 25 ==> z >= 1);\nloop invariant (x < 50 ==> y >= 0);\nloop invariant (x < 50 ==> z >= 5);\nloop invariant (x >= 50 ==> y >= 0);\nloop invariant (x >= 50 ==> z >= 25);\nloop invariant (x >= 50 ==> y <= 0);\nloop invariant (x >= 50 ==> z <= 25);\nloop invariant (x >= 50 ==> y >= -1);\nloop invariant (x >= 50 ==> z >= 25);\nloop invariant (x >= 50 ==> y <= 0);\nloop invariant (x >= 50 ==> z <= 25);\nloop invariant (x >= 50 ==> y >= -1);\nloop invariant (x >= 50 ==> z >= 25);\nloop invariant (x >= 50 ==> y <= 0);\nloop invariant (x >= 50 ==> z <= 25);\nloop invariant (x >= 50 ==> y >= -1);\nloop invariant (x >= 50 ==> z >= 25);\nloop invariant (x >= 50 ==> y <= 0);\nloop invariant (x >= 50 ==> z <= 25);\nloop invariant (x >= 50 ==> y >= -1);\nloop invariant (x >= 50 ==> z >= 25);\nloop invariant (x >= 50 ==> y <= 0);\nloop invariant (x >= 50 ==> z <= 25);\nloop invariant (x >= 50 ==> y >= -1);\nloop invariant (x >= 50 ==> z >= 25);\nloop invariant (x >= 50 ==> y <= 0);\nloop invariant (x >= 50 ==> z <= 25);\nloop invariant (x >= 50 ==> y >= -1);\nloop invariant (x >= 50 ==> z >= 25);\nloop invariant (x >= 50 ==> y <= 0);\nloop invariant (x >= 50 ==> z <= 25);\nloop invariant (x >= 50 ==> y >= -1);\nloop invariant (x >= 50 ==> z >= 25);\nloop invariant (x >= 50 ==> y <= 0);\nloop invariant (x >= 50 ==> z <= 25);\nloop invariant (x >= 50 ==> y >= -1);\nloop invariant (x >= 50 ==> z >= 25);\nloop invariant (x >= 50 ==> y <= 0);\nloop invariant (x >= 50 ==> z <= 25);\nloop invariant (x >= 50 ==> y >= -1);\nloop invariant (x >= 50 ==> z >= 25);\nloop invariant (x >= 50 ==> y <= 0);\nloop invariant (x >= 50 ==> z <= 25);\nloop invariant (x >= 50 ==> y >= -1);\nloop invariant (x >= 50 ==> z >= 25);\nloop invariant (x >= 50 ==> y <= 0);\nloop invariant (x >= 50 ==> z <= 25);\nloop invariant (x >= 50 ==> y >= -1);\nloop invariant (x >= 50 ==> z >= 25);\nloop invariant (x >= 50 ==> y <= 0);\nloop invariant (x >= 50 ==> z <= 25);\nloop invariant (x >= 50 ==> y >= -1);\nloop invariant (x >= 50 ==> z >= 25);\nloop invariant (x >= 50 ==> y <= 0);\nloop invariant (x >= 50 ==> z <= 25);\nloop invariant (x >= 50 ==> y >= -1);\nloop invariant (x >= 50 ==> z >= 25);\nloop invariant (x >= 50 ==> y <= 0);\nloop invariant (x >= 50 ==> z <= 25);\nloop invariant (x >= 50 ==> y >= -1);\nloop invariant (x >= 50 ==> z >= 25);\nloop invariant (x >= 50 ==> y <= 0);\nloop invariant (x >= 50 ==> z <= 25);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant 0 <= y <= 2;\nloop invariant 0 <= z <= 100;\nloop invariant x <= z;\nloop invariant y <= z;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant 0 <= y;\nloop invariant 0 <= z;\nloop invariant x < 100 || (y < 100 && z == 400);\nloop invariant x >= 100 || (y == 2 && z >= 25);\nloop invariant x >= 100 || (y == 2 && z <= 400 && z >= 200);\nloop invariant x >= 100 || (y == 2 && z <= 400 && z >= 200 && x >= 25);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant 0 <= y <= 2;\nloop invariant 0 <= z <= 400;\nloop invariant x == 100 ==> y == 2;\nloop invariant x == 100 ==> z == 400;\nloop invariant x <= 50 ==> y == 0;\nloop invariant x >= 25 ==> z == 400;\nloop invariant x < 25 ==> z == (x - 25) * 5;\nloop invariant x > 50 ==> y == 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant -50 <= y <= 50;\nloop invariant x + y >= 0;\nloop invariant z == (x + y)/5;\nloop invariant x + y >= 100;\nloop invariant x + y <= 25;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant (100 <= y ==> (y == 100));\nloop invariant (100 <= z ==> (z == 400));\nloop invariant (x <= 50 ==> (y == x+1));\nloop invariant (x > 50 ==> (y == 51-x));\nloop invariant (x < 25 ==> (z == x+1));\nloop invariant (25 <= x < 50 ==> (z == x+5));\nloop invariant (50 <= x < 75 ==> (z == 75+4*(x-50)));\nloop invariant (75 <= x <= 100 ==> (z == 400));\nloop invariant (x == 100 ==> (y == 2));\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant 0 <= y <= 2;\nloop invariant 0 <= z <= 400;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 2;\nloop invariant 0 <= z <= 5;\nloop invariant 0 <= x <= 100;\nloop invariant x >= 1;\nloop invariant x == y + z;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant 0 <= y <= 2;\nloop invariant -47 <= z <= 400;\nloop invariant (x < 50 ==> y == 0) || (x >= 50 ==> y == 1);\nloop invariant (x < 25 ==> z <= x + 24) && (x >= 25 ==> z >= 5*x + 5);\nloop invariant (x < 25 ==> y == x+1) && (x >= 25 ==> y == 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 2;\nloop invariant x >= 0;\nloop invariant x <= 100;\nloop invariant z >= 0;\nloop invariant z <= 400;\nloop invariant y >= x - 50;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant 0 <= y <= 2;\nloop invariant 0 <= z <= 400;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant -50 <= y <= 50;\nloop invariant 0 <= z <= 400;\nloop invariant (if x<=50 then y==x else y==x-1);\nloop invariant (if x<25 then z==x-25 else z==5*(x-25));\nloop invariant (if x==100 then z==400 else z<=400);\nloop invariant (if x==100 then y==2 else y<=2);\nloop invariant (if x==100 then x==100 else x<100);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 2;\nloop invariant 0 <= z <= 500;\nloop invariant 0 <= x <= 100;\nloop invariant if(x<=50) ==> y==x+1;\nloop invariant else ==> y==x-1;\nloop invariant if(x<25) ==> z==x+1;\nloop invariant else ==> z==5*x+1;\nloop invariant x==y+1 ==> z==5*y+1;\nloop invariant x==y-1 ==> z==y+1;\nloop invariant x==y ==> z==5*y+1;\nloop invariant x==y-2 ==> z==y+2;\nloop invariant x==y+2 ==> z==5*y+1;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant 0 <= y <= 2;\nloop invariant 0 <= z <= 400;\nloop invariant (x <= 50 ==> y <= 1);\nloop invariant (x > 50 ==> y >= -1);\nloop invariant (x < 25 ==> z <= 1);\nloop invariant (x >= 25 ==> z >= 5);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 100 is partially proven to be inductive.\nloop invariant 0 <= y <= 2 is established but not preserved.\nloop invariant 0 <= z <= 400 is established but not preserved.\nloop invariant (x <= 50 ==> y <= 1) is established but not preserved.\nloop invariant (x > 50 ==> y >= -1) is partially proven to be inductive.\nloop invariant (x < 25 ==> z <= 1) is established but not preserved.\nloop invariant (x >= 25 ==> z >= 5) is established but not preserved.\nAssertion z == 400: Unproven\nAssertion y == 2: Unproven\nAssertion x == 100: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n\tint x, y, z;\n\tx=0;y=0;z=0;\n\t/*@\nloop invariant i1: 0 <= x <= 100;\n\n\n\n\n\n\n*/\nwhile (x<100) {\n\t\tif(x<=50)\n               \t\ty=y+1;\n       \t\telse\n               \t\ty=y-1;\n       \n       \t\tif(x<25)\n               \t\tz=z+1;\n       \t\telse\n               \t\tz=z+5;\n       \n       \t\tx=x+1;\n\t}\n\t{;\n//@ assert(z==400);\n}\n\n\t{;\n//@ assert(y==2);\n}\n\n\t{;\n//@ assert(x==100);\n}\n\n\treturn 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant x >= 0;\nloop invariant x <= 100;\nloop invariant x == 100;\nloop invariant y == 2;\nloop invariant z == 400;\nloop invariant x == 100 ==> y == 2;\nloop invariant x == 100 ==> z == 400;\nloop invariant x == 100 ==> x == 100;\nloop invariant x == 100 ==> y == 2;\nloop invariant x == 100 ==> z == 400;\nloop invariant x == 100 ==> x == 100;\nloop invariant x == 100 ==> y == 2;\nloop invariant x == 100 ==> z == 400;\nloop invariant x == 100 ==> x == 100;\nloop invariant x == 100 ==> y == 2;\nloop invariant x == 100 ==> z == 400;\nloop invariant x == 100 ==> x == 100;\nloop invariant x == 100 ==> y == 2;\nloop invariant x == 100 ==> z == 400;\nloop invariant x == 100 ==> x == 100;\nloop invariant x == 100 ==> y == 2;\nloop invariant x == 100 ==> z == 400;\nloop invariant x == 100 ==> x == 100;\nloop invariant x == 100 ==> y == 2;\nloop invariant x == 100 ==> z == 400;\nloop invariant x == 100 ==> x == 100;\nloop invariant x == 100 ==> y == 2;\nloop invariant x == 100 ==> z == 400;\nloop invariant x == 100 ==> x == 100;\nloop invariant x == 100 ==> y == 2;\nloop invariant x == 100 ==> z == 400;\nloop invariant x == 100 ==> x == 100;\nloop invariant x == 100 ==> y == 2;\nloop invariant x == 100 ==> z == 400;\nloop invariant x == 100 ==> x == 100;\nloop invariant x == 100 ==> y == 2;\nloop invariant x == 100 ==> z == 400;\nloop invariant x == 100 ==> x == 100;\nloop invariant x == 100 ==> y == 2;\nloop invariant x == 100 ==> z == 400;\nloop invariant x == 100 ==> x == 100;\nloop invariant x == 100 ==> y == 2;\nloop invariant x == 100 ==> z == 400;\nloop invariant x == 100 ==> x == 100;\nloop invariant x == 100 ==> y == 2;\nloop invariant x == 100 ==> z == 400;\nloop invariant x == 100 ==> x == 100;\nloop invariant x == 100 ==> y == 2;\nloop invariant x == 100 ==> z == 400;\nloop invariant x == 100 ==> x == 100;\nloop invariant x == 100 ==> y == 2;\nloop invariant x == 100 ==> z == 400;\nloop invariant x == 100 ==> x == 100;\nloop invariant x == 100 ==> y == 2;\nloop invariant x == 100 ==> z == 400;\nloop invariant x == 100 ==> x == 100;\nloop invariant x == 100 ==> y == 2;\nloop invariant x == 100 ==> z == 400;\nloop invariant x == 100 ==> x == 100;\nloop invariant x == 100 ==> y == 2;\nloop invariant x == 100 ==> z == 400;\nloop invariant x == 100 ==> x == 100;\nloop invariant x == 100 ==> y == 2;\nloop invariant x == 100 ==> z == 400;\nloop invariant x == 100 ==> x == 100;\nloop invariant x == 100 ==> y == 2;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 100 is partially proven to be inductive.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant x <= 100 is partially proven to be inductive.\nloop invariant x == 100 is preserved but not established.\nloop invariant y == 2 is partially proven to be inductive.\nloop invariant z == 400 is partially proven to be inductive.\nloop invariant x == 100 ==> y == 2 is partially proven to be inductive.\nloop invariant x == 100 ==> z == 400 is partially proven to be inductive.\nloop invariant x == 100 ==> x == 100 is partially proven to be inductive.\nAssertion z == 400: Partially proven\nAssertion y == 2: Partially proven\nAssertion x == 100: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n\tint x, y, z;\n\tx=0;y=0;z=0;\n\t/*@\nloop invariant i1: 0 <= x <= 100;\nloop invariant i2: x >= 0;\nloop invariant i3: x <= 100;\n\n\n\n\n\nloop invariant i9: x == 100 ==> x == 100;\n*/\nwhile (x<100) {\n\t\tif(x<=50)\n               \t\ty=y+1;\n       \t\telse\n               \t\ty=y-1;\n       \n       \t\tif(x<25)\n               \t\tz=z+1;\n       \t\telse\n               \t\tz=z+5;\n       \n       \t\tx=x+1;\n\t}\n\t{;\n//@ assert(z==400);\n}\n\n\t{;\n//@ assert(y==2);\n}\n\n\t{;\n//@ assert(x==100);\n}\n\n\treturn 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant 0 <= y <= 2;\nloop invariant 0 <= z <= 250;\nloop invariant (x <= 50 ==> y <= 1);\nloop invariant (x >= 25 ==> z <= 400);\nloop invariant (x >= 50 ==> y >= -1);\nloop invariant (x < 25 ==> z >= 1);\nloop invariant (x < 50 ==> y >= 0);\nloop invariant (x < 50 ==> z >= 5);\nloop invariant (x >= 50 ==> y >= 0);\nloop invariant (x >= 50 ==> z >= 25);\nloop invariant (x >= 50 ==> y <= 0);\nloop invariant (x >= 50 ==> z <= 25);\nloop invariant (x >= 50 ==> y >= -1);\nloop invariant (x >= 50 ==> z >= 25);\nloop invariant (x >= 50 ==> y <= 0);\nloop invariant (x >= 50 ==> z <= 25);\nloop invariant (x >= 50 ==> y >= -1);\nloop invariant (x >= 50 ==> z >= 25);\nloop invariant (x >= 50 ==> y <= 0);\nloop invariant (x >= 50 ==> z <= 25);\nloop invariant (x >= 50 ==> y >= -1);\nloop invariant (x >= 50 ==> z >= 25);\nloop invariant (x >= 50 ==> y <= 0);\nloop invariant (x >= 50 ==> z <= 25);\nloop invariant (x >= 50 ==> y >= -1);\nloop invariant (x >= 50 ==> z >= 25);\nloop invariant (x >= 50 ==> y <= 0);\nloop invariant (x >= 50 ==> z <= 25);\nloop invariant (x >= 50 ==> y >= -1);\nloop invariant (x >= 50 ==> z >= 25);\nloop invariant (x >= 50 ==> y <= 0);\nloop invariant (x >= 50 ==> z <= 25);\nloop invariant (x >= 50 ==> y >= -1);\nloop invariant (x >= 50 ==> z >= 25);\nloop invariant (x >= 50 ==> y <= 0);\nloop invariant (x >= 50 ==> z <= 25);\nloop invariant (x >= 50 ==> y >= -1);\nloop invariant (x >= 50 ==> z >= 25);\nloop invariant (x >= 50 ==> y <= 0);\nloop invariant (x >= 50 ==> z <= 25);\nloop invariant (x >= 50 ==> y >= -1);\nloop invariant (x >= 50 ==> z >= 25);\nloop invariant (x >= 50 ==> y <= 0);\nloop invariant (x >= 50 ==> z <= 25);\nloop invariant (x >= 50 ==> y >= -1);\nloop invariant (x >= 50 ==> z >= 25);\nloop invariant (x >= 50 ==> y <= 0);\nloop invariant (x >= 50 ==> z <= 25);\nloop invariant (x >= 50 ==> y >= -1);\nloop invariant (x >= 50 ==> z >= 25);\nloop invariant (x >= 50 ==> y <= 0);\nloop invariant (x >= 50 ==> z <= 25);\nloop invariant (x >= 50 ==> y >= -1);\nloop invariant (x >= 50 ==> z >= 25);\nloop invariant (x >= 50 ==> y <= 0);\nloop invariant (x >= 50 ==> z <= 25);\nloop invariant (x >= 50 ==> y >= -1);\nloop invariant (x >= 50 ==> z >= 25);\nloop invariant (x >= 50 ==> y <= 0);\nloop invariant (x >= 50 ==> z <= 25);\nloop invariant (x >= 50 ==> y >= -1);\nloop invariant (x >= 50 ==> z >= 25);\nloop invariant (x >= 50 ==> y <= 0);\nloop invariant (x >= 50 ==> z <= 25);\nloop invariant (x >= 50 ==> y >= -1);\nloop invariant (x >= 50 ==> z >= 25);\nloop invariant (x >= 50 ==> y <= 0);\nloop invariant (x >= 50 ==> z <= 25);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 100 is partially proven to be inductive.\nloop invariant 0 <= y <= 2 is partially proven to be inductive.\nloop invariant 0 <= z <= 250 is partially proven to be inductive.\nloop invariant (x <= 50 ==> y <= 1) is partially proven to be inductive.\nloop invariant (x >= 25 ==> z <= 400) is partially proven to be inductive.\nloop invariant (x >= 50 ==> y >= -1) is partially proven to be inductive.\nloop invariant (x < 25 ==> z >= 1) is preserved but not established.\nloop invariant (x < 50 ==> y >= 0) is partially proven to be inductive.\nloop invariant (x < 50 ==> z >= 5) is partially proven to be inductive.\nloop invariant (x >= 50 ==> y >= 0) is partially proven to be inductive.\nloop invariant (x >= 50 ==> z >= 25) is partially proven to be inductive.\nloop invariant (x >= 50 ==> y <= 0) is partially proven to be inductive.\nloop invariant (x >= 50 ==> z <= 25) is partially proven to be inductive.\nAssertion z == 400: Partially proven\nAssertion y == 2: Partially proven\nAssertion x == 100: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n\tint x, y, z;\n\tx=0;y=0;z=0;\n\t/*@\nloop invariant i1: 0 <= x <= 100;\n\n\n\n\n\n\nloop invariant i8: (x < 50 ==> y >= 0);\n\n\n\n\n\n*/\nwhile (x<100) {\n\t\tif(x<=50)\n               \t\ty=y+1;\n       \t\telse\n               \t\ty=y-1;\n       \n       \t\tif(x<25)\n               \t\tz=z+1;\n       \t\telse\n               \t\tz=z+5;\n       \n       \t\tx=x+1;\n\t}\n\t{;\n//@ assert(z==400);\n}\n\n\t{;\n//@ assert(y==2);\n}\n\n\t{;\n//@ assert(x==100);\n}\n\n\treturn 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant 0 <= y <= 2;\nloop invariant 0 <= z <= 100;\nloop invariant x <= z;\nloop invariant y <= z;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 100 is partially proven to be inductive.\nloop invariant 0 <= y <= 2 is established but not preserved.\nloop invariant 0 <= z <= 100 is established but not preserved.\nloop invariant x <= z is partially proven to be inductive.\nloop invariant y <= z is partially proven to be inductive.\nloop invariant x <= z <= 100 is partially proven to be inductive.\nloop invariant y <= z <= 100 is partially proven to be inductive.\nAssertion z == 400: Unproven\nAssertion y == 2: Partially proven\nAssertion x == 100: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n\tint x, y, z;\n\tx=0;y=0;z=0;\n\t/*@\nloop invariant i1: 0 <= x <= 100;\n\n\nloop invariant i4: x <= z;\nloop invariant i5: y <= z;\n\n\n*/\nwhile (x<100) {\n\t\tif(x<=50)\n               \t\ty=y+1;\n       \t\telse\n               \t\ty=y-1;\n       \n       \t\tif(x<25)\n               \t\tz=z+1;\n       \t\telse\n               \t\tz=z+5;\n       \n       \t\tx=x+1;\n\t}\n\t{;\n//@ assert(z==400);\n}\n\n\t{;\n//@ assert(y==2);\n}\n\n\t{;\n//@ assert(x==100);\n}\n\n\treturn 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant 0 <= y;\nloop invariant 0 <= z;\nloop invariant x < 100 || (y < 100 && z == 400);\nloop invariant x >= 100 || (y == 2 && z >= 25);\nloop invariant x >= 100 || (y == 2 && z <= 400 && z >= 200);\nloop invariant x >= 100 || (y == 2 && z <= 400 && z >= 200 && x >= 25);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 100 is partially proven to be inductive.\nloop invariant 0 <= y is partially proven to be inductive.\nloop invariant 0 <= z is partially proven to be inductive.\nloop invariant x < 100 || (y < 100 && z == 400) is partially proven to be inductive.\nloop invariant x >= 100 || (y == 2 && z >= 25) is preserved but not established.\nloop invariant x >= 100 || (y == 2 && z <= 400 && z >= 200) is partially proven to be inductive.\nloop invariant x >= 100 || (y == 2 && z <= 400 && z >= 200 && x >= 25) is partially proven to be inductive.\nAssertion z == 400: Partially proven\nAssertion y == 2: Partially proven\nAssertion x == 100: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n\tint x, y, z;\n\tx=0;y=0;z=0;\n\t/*@\nloop invariant i1: 0 <= x <= 100;\n\nloop invariant i3: 0 <= z;\n\n\n\n\n*/\nwhile (x<100) {\n\t\tif(x<=50)\n               \t\ty=y+1;\n       \t\telse\n               \t\ty=y-1;\n       \n       \t\tif(x<25)\n               \t\tz=z+1;\n       \t\telse\n               \t\tz=z+5;\n       \n       \t\tx=x+1;\n\t}\n\t{;\n//@ assert(z==400);\n}\n\n\t{;\n//@ assert(y==2);\n}\n\n\t{;\n//@ assert(x==100);\n}\n\n\treturn 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant 0 <= y <= 2;\nloop invariant 0 <= z <= 400;\nloop invariant x == 100 ==> y == 2;\nloop invariant x == 100 ==> z == 400;\nloop invariant x <= 50 ==> y == 0;\nloop invariant x >= 25 ==> z == 400;\nloop invariant x < 25 ==> z == (x - 25) * 5;\nloop invariant x > 50 ==> y == 1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 100 is partially proven to be inductive.\nloop invariant 0 <= y <= 2 is partially proven to be inductive.\nloop invariant 0 <= z <= 400 is partially proven to be inductive.\nloop invariant x == 100 ==> y == 2 is partially proven to be inductive.\nloop invariant x == 100 ==> z == 400 is partially proven to be inductive.\nloop invariant x <= 50 ==> y == 0 is partially proven to be inductive.\nloop invariant x >= 25 ==> z == 400 is partially proven to be inductive.\nloop invariant x < 25 ==> z == (x - 25) * 5 is preserved but not established.\nloop invariant x > 50 ==> y == 1 is partially proven to be inductive.\nAssertion z == 400: Partially proven\nAssertion y == 2: Partially proven\nAssertion x == 100: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n\tint x, y, z;\n\tx=0;y=0;z=0;\n\t/*@\nloop invariant i1: 0 <= x <= 100;\n\n\n\n\n\n\n\n\n*/\nwhile (x<100) {\n\t\tif(x<=50)\n               \t\ty=y+1;\n       \t\telse\n               \t\ty=y-1;\n       \n       \t\tif(x<25)\n               \t\tz=z+1;\n       \t\telse\n               \t\tz=z+5;\n       \n       \t\tx=x+1;\n\t}\n\t{;\n//@ assert(z==400);\n}\n\n\t{;\n//@ assert(y==2);\n}\n\n\t{;\n//@ assert(x==100);\n}\n\n\treturn 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant -50 <= y <= 50;\nloop invariant x + y >= 0;\nloop invariant z == (x + y)/5;\nloop invariant x + y >= 100;\nloop invariant x + y <= 25;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 100 is partially proven to be inductive.\nloop invariant -50 <= y <= 50 is partially proven to be inductive.\nloop invariant x + y >= 0 is partially proven to be inductive.\nloop invariant z == (x + y)/5 is partially proven to be inductive.\nloop invariant x + y >= 100 is preserved but not established.\nloop invariant x + y <= 25 is partially proven to be inductive.\nAssertion z == 400: Partially proven\nAssertion y == 2: Partially proven\nAssertion x == 100: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n\tint x, y, z;\n\tx=0;y=0;z=0;\n\t/*@\nloop invariant i1: 0 <= x <= 100;\n\nloop invariant i3: x + y >= 0;\n\n\n\n*/\nwhile (x<100) {\n\t\tif(x<=50)\n               \t\ty=y+1;\n       \t\telse\n               \t\ty=y-1;\n       \n       \t\tif(x<25)\n               \t\tz=z+1;\n       \t\telse\n               \t\tz=z+5;\n       \n       \t\tx=x+1;\n\t}\n\t{;\n//@ assert(z==400);\n}\n\n\t{;\n//@ assert(y==2);\n}\n\n\t{;\n//@ assert(x==100);\n}\n\n\treturn 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant (100 <= y ==> (y == 100));\nloop invariant (100 <= z ==> (z == 400));\nloop invariant (x <= 50 ==> (y == x+1));\nloop invariant (x > 50 ==> (y == 51-x));\nloop invariant (x < 25 ==> (z == x+1));\nloop invariant (25 <= x < 50 ==> (z == x+5));\nloop invariant (50 <= x < 75 ==> (z == 75+4*(x-50)));\nloop invariant (75 <= x <= 100 ==> (z == 400));\nloop invariant (x == 100 ==> (y == 2));\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 100 is partially proven to be inductive.\nloop invariant (100 <= y ==> (y == 100)) is partially proven to be inductive.\nloop invariant (100 <= z ==> (z == 400)) is partially proven to be inductive.\nloop invariant (x <= 50 ==> (y == x+1)) is preserved but not established.\nloop invariant (x > 50 ==> (y == 51-x)) is partially proven to be inductive.\nloop invariant (x < 25 ==> (z == x+1)) is partially proven to be inductive.\nloop invariant (25 <= x < 50 ==> (z == x+5)) is partially proven to be inductive.\nloop invariant (50 <= x < 75 ==> (z == 75+4*(x-50))) is partially proven to be inductive.\nloop invariant (75 <= x <= 100 ==> (z == 400)) is partially proven to be inductive.\nloop invariant (x == 100 ==> (y == 2)) is partially proven to be inductive.\nAssertion z == 400: Partially proven\nAssertion y == 2: Partially proven\nAssertion x == 100: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n\tint x, y, z;\n\tx=0;y=0;z=0;\n\t/*@\nloop invariant i1: 0 <= x <= 100;\n\n\n\n\n\n\n\n\n\n*/\nwhile (x<100) {\n\t\tif(x<=50)\n               \t\ty=y+1;\n       \t\telse\n               \t\ty=y-1;\n       \n       \t\tif(x<25)\n               \t\tz=z+1;\n       \t\telse\n               \t\tz=z+5;\n       \n       \t\tx=x+1;\n\t}\n\t{;\n//@ assert(z==400);\n}\n\n\t{;\n//@ assert(y==2);\n}\n\n\t{;\n//@ assert(x==100);\n}\n\n\treturn 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant 0 <= y <= 2;\nloop invariant 0 <= z <= 400;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 100 is partially proven to be inductive.\nloop invariant 0 <= y <= 2 is established but not preserved.\nloop invariant 0 <= z <= 400 is established but not preserved.\nAssertion z == 400: Unproven\nAssertion y == 2: Unproven\nAssertion x == 100: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n\tint x, y, z;\n\tx=0;y=0;z=0;\n\t/*@\nloop invariant i1: 0 <= x <= 100;\n\n\n*/\nwhile (x<100) {\n\t\tif(x<=50)\n               \t\ty=y+1;\n       \t\telse\n               \t\ty=y-1;\n       \n       \t\tif(x<25)\n               \t\tz=z+1;\n       \t\telse\n               \t\tz=z+5;\n       \n       \t\tx=x+1;\n\t}\n\t{;\n//@ assert(z==400);\n}\n\n\t{;\n//@ assert(y==2);\n}\n\n\t{;\n//@ assert(x==100);\n}\n\n\treturn 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 2;\nloop invariant 0 <= z <= 5;\nloop invariant 0 <= x <= 100;\nloop invariant x >= 1;\nloop invariant x == y + z;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= y <= 2 is partially proven to be inductive.\nloop invariant 0 <= z <= 5 is partially proven to be inductive.\nloop invariant 0 <= x <= 100 is partially proven to be inductive.\nloop invariant x >= 1 is preserved but not established.\nloop invariant x == y + z is partially proven to be inductive.\nAssertion z == 400: Partially proven\nAssertion y == 2: Partially proven\nAssertion x == 100: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n\tint x, y, z;\n\tx=0;y=0;z=0;\n\t/*@\n\n\nloop invariant i3: 0 <= x <= 100;\n\n\n*/\nwhile (x<100) {\n\t\tif(x<=50)\n               \t\ty=y+1;\n       \t\telse\n               \t\ty=y-1;\n       \n       \t\tif(x<25)\n               \t\tz=z+1;\n       \t\telse\n               \t\tz=z+5;\n       \n       \t\tx=x+1;\n\t}\n\t{;\n//@ assert(z==400);\n}\n\n\t{;\n//@ assert(y==2);\n}\n\n\t{;\n//@ assert(x==100);\n}\n\n\treturn 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant 0 <= y <= 2;\nloop invariant -47 <= z <= 400;\nloop invariant (x < 50 ==> y == 0) || (x >= 50 ==> y == 1);\nloop invariant (x < 25 ==> z <= x + 24) && (x >= 25 ==> z >= 5*x + 5);\nloop invariant (x < 25 ==> y == x+1) && (x >= 25 ==> y == 2);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 100 is partially proven to be inductive.\nloop invariant 0 <= y <= 2 is partially proven to be inductive.\nloop invariant -47 <= z <= 400 is partially proven to be inductive.\nloop invariant (x < 50 ==> y == 0) || (x >= 50 ==> y == 1) is partially proven to be inductive.\nloop invariant (x < 25 ==> z <= x + 24) && (x >= 25 ==> z >= 5*x + 5) is partially proven to be inductive.\nloop invariant (x < 25 ==> y == x+1) && (x >= 25 ==> y == 2) is preserved but not established.\nAssertion z == 400: Partially proven\nAssertion y == 2: Partially proven\nAssertion x == 100: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n\tint x, y, z;\n\tx=0;y=0;z=0;\n\t/*@\nloop invariant i1: 0 <= x <= 100;\n\n\nloop invariant i4: (x < 50 ==> y == 0) || (x >= 50 ==> y == 1);\n\n\n*/\nwhile (x<100) {\n\t\tif(x<=50)\n               \t\ty=y+1;\n       \t\telse\n               \t\ty=y-1;\n       \n       \t\tif(x<25)\n               \t\tz=z+1;\n       \t\telse\n               \t\tz=z+5;\n       \n       \t\tx=x+1;\n\t}\n\t{;\n//@ assert(z==400);\n}\n\n\t{;\n//@ assert(y==2);\n}\n\n\t{;\n//@ assert(x==100);\n}\n\n\treturn 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 2;\nloop invariant x >= 0;\nloop invariant x <= 100;\nloop invariant z >= 0;\nloop invariant z <= 400;\nloop invariant y >= x - 50;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= y <= 2 is established but not preserved.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant x <= 100 is partially proven to be inductive.\nloop invariant z >= 0 is partially proven to be inductive.\nloop invariant z <= 400 is established but not preserved.\nloop invariant y >= x - 50 is established but not preserved.\nAssertion z == 400: Partially proven\nAssertion y == 2: Partially proven\nAssertion x == 100: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n\tint x, y, z;\n\tx=0;y=0;z=0;\n\t/*@\n\nloop invariant i2: x >= 0;\nloop invariant i3: x <= 100;\nloop invariant i4: z >= 0;\n\n\n*/\nwhile (x<100) {\n\t\tif(x<=50)\n               \t\ty=y+1;\n       \t\telse\n               \t\ty=y-1;\n       \n       \t\tif(x<25)\n               \t\tz=z+1;\n       \t\telse\n               \t\tz=z+5;\n       \n       \t\tx=x+1;\n\t}\n\t{;\n//@ assert(z==400);\n}\n\n\t{;\n//@ assert(y==2);\n}\n\n\t{;\n//@ assert(x==100);\n}\n\n\treturn 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant 0 <= y <= 2;\nloop invariant 0 <= z <= 400;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 100 is partially proven to be inductive.\nloop invariant 0 <= y <= 2 is established but not preserved.\nloop invariant 0 <= z <= 400 is established but not preserved.\nAssertion z == 400: Unproven\nAssertion y == 2: Unproven\nAssertion x == 100: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n\tint x, y, z;\n\tx=0;y=0;z=0;\n\t/*@\nloop invariant i1: 0 <= x <= 100;\n\n\n*/\nwhile (x<100) {\n\t\tif(x<=50)\n               \t\ty=y+1;\n       \t\telse\n               \t\ty=y-1;\n       \n       \t\tif(x<25)\n               \t\tz=z+1;\n       \t\telse\n               \t\tz=z+5;\n       \n       \t\tx=x+1;\n\t}\n\t{;\n//@ assert(z==400);\n}\n\n\t{;\n//@ assert(y==2);\n}\n\n\t{;\n//@ assert(x==100);\n}\n\n\treturn 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 8,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant -50 <= y <= 50;\nloop invariant 0 <= z <= 400;\nloop invariant (if x<=50 then y==x else y==x-1);\nloop invariant (if x<25 then z==x-25 else z==5*(x-25));\nloop invariant (if x==100 then z==400 else z<=400);\nloop invariant (if x==100 then y==2 else y<=2);\nloop invariant (if x==100 then x==100 else x<100);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 14: unexpected token 'x'",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n\tint x, y, z;\n\tx=0;y=0;z=0;\n\t/*@\nloop invariant i1: 0 <= x <= 100;\n\n\n\n\n\n\n\n*/\nwhile (x<100) {\n\t\tif(x<=50)\n               \t\ty=y+1;\n       \t\telse\n               \t\ty=y-1;\n       \n       \t\tif(x<25)\n               \t\tz=z+1;\n       \t\telse\n               \t\tz=z+5;\n       \n       \t\tx=x+1;\n\t}\n\t{;\n//@ assert(z==400);\n}\n\n\t{;\n//@ assert(y==2);\n}\n\n\t{;\n//@ assert(x==100);\n}\n\n\treturn 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 9,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 2;\nloop invariant 0 <= z <= 500;\nloop invariant 0 <= x <= 100;\nloop invariant if(x<=50) ==> y==x+1;\nloop invariant else ==> y==x-1;\nloop invariant if(x<25) ==> z==x+1;\nloop invariant else ==> z==5*x+1;\nloop invariant x==y+1 ==> z==5*y+1;\nloop invariant x==y-1 ==> z==y+1;\nloop invariant x==y ==> z==5*y+1;\nloop invariant x==y-2 ==> z==y+2;\nloop invariant x==y+2 ==> z==5*y+1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 14: unexpected token '('",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n\tint x, y, z;\n\tx=0;y=0;z=0;\n\t/*@\n\n\nloop invariant i3: 0 <= x <= 100;\n\n\n\n\n\n\n\n\n\n*/\nwhile (x<100) {\n\t\tif(x<=50)\n               \t\ty=y+1;\n       \t\telse\n               \t\ty=y-1;\n       \n       \t\tif(x<25)\n               \t\tz=z+1;\n       \t\telse\n               \t\tz=z+5;\n       \n       \t\tx=x+1;\n\t}\n\t{;\n//@ assert(z==400);\n}\n\n\t{;\n//@ assert(y==2);\n}\n\n\t{;\n//@ assert(x==100);\n}\n\n\treturn 0;\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 75: unexpected token 'x'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n\tint x, y, z;\n\tx=0;y=0;z=0;\n\t/*@\nloop invariant i1: 0 <= x <= 100;\nloop invariant i2: 0 <= y <= 2;\nloop invariant i3: 0 <= z <= 400;\nloop invariant i4: (x <= 50 ==> y <= 1);\nloop invariant i5: (x > 50 ==> y >= -1);\nloop invariant i6: (x < 25 ==> z <= 1);\nloop invariant i7: (x >= 25 ==> z >= 5);\nloop invariant i8: x >= 0;\nloop invariant i9: x <= 100;\nloop invariant i10: x == 100;\nloop invariant i11: y == 2;\nloop invariant i12: z == 400;\nloop invariant i13: x == 100 ==> y == 2;\nloop invariant i14: x == 100 ==> z == 400;\nloop invariant i15: x == 100 ==> x == 100;\nloop invariant i16: 0 <= z <= 250;\nloop invariant i17: (x >= 25 ==> z <= 400);\nloop invariant i18: (x >= 50 ==> y >= -1);\nloop invariant i19: (x < 25 ==> z >= 1);\nloop invariant i20: (x < 50 ==> y >= 0);\nloop invariant i21: (x < 50 ==> z >= 5);\nloop invariant i22: (x >= 50 ==> y >= 0);\nloop invariant i23: (x >= 50 ==> z >= 25);\nloop invariant i24: (x >= 50 ==> y <= 0);\nloop invariant i25: (x >= 50 ==> z <= 25);\nloop invariant i26: 0 <= z <= 100;\nloop invariant i27: x <= z;\nloop invariant i28: y <= z;\nloop invariant i29: x <= z <= 100;\nloop invariant i30: y <= z <= 100;\nloop invariant i31: 0 <= y;\nloop invariant i32: 0 <= z;\nloop invariant i33: x < 100 || (y < 100 && z == 400);\nloop invariant i34: x >= 100 || (y == 2 && z >= 25);\nloop invariant i35: x >= 100 || (y == 2 && z <= 400 && z >= 200);\nloop invariant i36: x >= 100 || (y == 2 && z <= 400 && z >= 200 && x >= 25);\nloop invariant i37: x <= 50 ==> y == 0;\nloop invariant i38: x >= 25 ==> z == 400;\nloop invariant i39: x < 25 ==> z == (x - 25) * 5;\nloop invariant i40: x > 50 ==> y == 1;\nloop invariant i41: -50 <= y <= 50;\nloop invariant i42: x + y >= 0;\nloop invariant i43: z == (x + y)/5;\nloop invariant i44: x + y >= 100;\nloop invariant i45: x + y <= 25;\nloop invariant i46: (100 <= y ==> (y == 100));\nloop invariant i47: (100 <= z ==> (z == 400));\nloop invariant i48: (x <= 50 ==> (y == x+1));\nloop invariant i49: (x > 50 ==> (y == 51-x));\nloop invariant i50: (x < 25 ==> (z == x+1));\nloop invariant i51: (25 <= x < 50 ==> (z == x+5));\nloop invariant i52: (50 <= x < 75 ==> (z == 75+4*(x-50)));\nloop invariant i53: (75 <= x <= 100 ==> (z == 400));\nloop invariant i54: (x == 100 ==> (y == 2));\nloop invariant i55: 0 <= z <= 5;\nloop invariant i56: x >= 1;\nloop invariant i57: x == y + z;\nloop invariant i58: -47 <= z <= 400;\nloop invariant i59: (x < 50 ==> y == 0) || (x >= 50 ==> y == 1);\nloop invariant i60: (x < 25 ==> z <= x + 24) && (x >= 25 ==> z >= 5*x + 5);\nloop invariant i61: (x < 25 ==> y == x+1) && (x >= 25 ==> y == 2);\nloop invariant i62: z >= 0;\nloop invariant i63: z <= 400;\nloop invariant i64: y >= x - 50;\nloop invariant i65: (if x<=50 then y==x else y==x-1);\nloop invariant i66: (if x<25 then z==x-25 else z==5*(x-25));\nloop invariant i67: (if x==100 then z==400 else z<=400);\nloop invariant i68: (if x==100 then y==2 else y<=2);\nloop invariant i69: (if x==100 then x==100 else x<100);\nloop invariant i70: 0 <= z <= 500;\nloop invariant i71: if(x<=50) ==> y==x+1;\nloop invariant i72: else ==> y==x-1;\nloop invariant i73: if(x<25) ==> z==x+1;\nloop invariant i74: else ==> z==5*x+1;\nloop invariant i75: x==y+1 ==> z==5*y+1;\nloop invariant i76: x==y-1 ==> z==y+1;\nloop invariant i77: x==y ==> z==5*y+1;\nloop invariant i78: x==y-2 ==> z==y+2;\nloop invariant i79: x==y+2 ==> z==5*y+1;\n*/\nwhile (x<100) {\n\t\tif(x<=50)\n               \t\ty=y+1;\n       \t\telse\n               \t\ty=y-1;\n       \n       \t\tif(x<25)\n               \t\tz=z+1;\n       \t\telse\n               \t\tz=z+5;\n       \n       \t\tx=x+1;\n\t}\n\t{;\n//@ assert(z==400);\n}\n\n\t{;\n//@ assert(y==2);\n}\n\n\t{;\n//@ assert(x==100);\n}\n\n\treturn 0;\n}",
        "combined_annotation_num_solver_calls": 40,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n\tint x, y, z;\n\tx=0;y=0;z=0;\n\t/*@\nloop invariant i1: 0 <= x <= 100;\n\n\n\n\n\nloop invariant i7: (x >= 25 ==> z >= 5);\nloop invariant i8: x >= 0;\nloop invariant i9: x <= 100;\n\n\n\n\n\nloop invariant i15: x == 100 ==> x == 100;\n\n\n\n\nloop invariant i20: (x < 50 ==> y >= 0);\n\n\nloop invariant i23: (x >= 50 ==> z >= 25);\n\n\n\nloop invariant i27: x <= z;\nloop invariant i28: y <= z;\n\n\n\nloop invariant i32: 0 <= z;\n\n\n\n\n\n\n\n\n\nloop invariant i42: x + y >= 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i59: (x < 50 ==> y == 0) || (x >= 50 ==> y == 1);\n\n\nloop invariant i62: z >= 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (x<100) {\n\t\tif(x<=50)\n               \t\ty=y+1;\n       \t\telse\n               \t\ty=y-1;\n       \n       \t\tif(x<25)\n               \t\tz=z+1;\n       \t\telse\n               \t\tz=z+5;\n       \n       \t\tx=x+1;\n\t}\n\t{;\n//@ assert(z==400);\n}\n\n\t{;\n//@ assert(y==2);\n}\n\n\t{;\n//@ assert(x==100);\n}\n\n\treturn 0;\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [],
        "failure": [
            "../dataset/loop_invariants/code2inv/85.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/ex2.c"
        ],
        "skipped": [],
        "total": 2,
        "success_count": 0,
        "failure_count": 2,
        "success_rate": 0.0
    }
}