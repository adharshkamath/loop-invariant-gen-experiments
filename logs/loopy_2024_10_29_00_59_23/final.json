{
    "params": {
        "cli_args": {
            "config_file": "../config/loop_invariants.yaml",
            "no_preprocess": false,
            "termination_analysis": false,
            "recursive_functions": false,
            "loop_invariants": false,
            "loop_invariants_prompt": null,
            "repair_invariants": false,
            "repair_input": "",
            "repair_retries": 5,
            "repair_from_k": 0,
            "max_benchmarks": 40,
            "start_index": 40,
            "debug": false,
            "check_only": true,
            "input_log": "../../syncode/loopy_expts/logs/2024_10_27_22_10_15_expt_logs_processed.json"
        },
        "config_file_args": {
            "checker": "frama-c",
            "model": "gpt-4-32k",
            "benchmarks": "syncode/benchmarks.txt",
            "benchmark_features": "one_loop_one_method",
            "debug": true
        }
    },
    "logs": [
        {
            "file": "../dataset/loop_invariants/code2inv/85.c",
            "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = -15000);\n  \n  while ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
            "success": false,
            "annotation_blocks": [
                "```\n/*@\nloop invariant ( z1 = 0 );\nloop invariant ( z2 = 0 );\nloop invariant ( z3 = 0 );\nloop invariant ( x = -15000 );\nloop invariant ( y = z2 );\nloop invariant ( z1 = 1 );\nloop invariant ( z2 = z2 + 1 );\nloop invariant ( z1 = 1 + z2 );\nloop invariant ( x = -15000 + z2 );\nloop invariant ( y = z2 + 1 );\nloop invariant ( z1 = 1 + z2 );\nloop invariant ( x = -15000 + z2 + z2 );\nloop invariant ( y = z2 + 1 + 1 );\nloop invariant ( z1 = 1 + z2 + 1 );\nloop invariant ( x = -15000 + z2 + z2 + z2 );\nloop invariant ( y = z2 + 1 + 1 + 1 );\nloop invariant ( z1 = 1 + z2 + 1 + 1 );\nloop invariant ( x = -15000 + z2 + z2 + z2 + z2 );\nloop invariant ( y = z2 + 1 + 1 + 1 + 1 );\nloop invariant ( z1 = 1 + z2 + 1 + 1 + 1 );\nloop invariant ( x = -15000 + z2 + z2 + z2 + z2 + z2 );\nloop invariant ( y = z2 + 1 + 1 + 1 + 1 + 1 );\nloop invariant ( z1 = 1 + z2 + 1 + 1 + 1 + 1 );\nloop invariant ( x = -15000 + z2 + z2 + z2 + z2 + z2 + z2 );\nloop invariant ( y = z2 + 1 + 1 + 1 + 1 + 1 + 1 );\nloop invariant ( z1 = 1 + z2 + 1 + 1 + 1 + 1 + 1 );\nloop invariant ( x = -15000 + z2 + z2 + z2 + z2 + z2 + z2 + z2 );\nloop invariant ( y = z2 + 1 + 1 + 1 + 1 + 1 + 1 + 1 );\nloop invariant ( z1 = 1 + z2 + 1 + 1 + 1 + 1 + 1 + 1 );\nloop invariant ( x = -15000 + z2 + z2 + z2 + z2 + z2 + z2 + z2 + z2 );\nloop invariant ( y = z2 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 );\nloop invariant ( z1 = 1 + z2 + 1 + 1 + 1 + 1 + 1 + 1 + 1 );\nloop invariant ( x = -15000 + z2 + z2 + z2 + z2 + z2 + z2 + z2 + z2 + z2 );\nloop invariant ( y = z2 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 );\nloop invariant ( z1 = 1 + z2 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 );\nloop invariant ( x = -15000 + z2 + z2 + z2 + z2 + z2 + z2 + z2 + z2 + z2 + z2 );\nloop invariant ( y = z2 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 );\nloop invariant ( z1 = 1 + z2 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 );\nloop invariant ( x = -15000 + z2 + z2 + z2 + z2 + z2 + z2 + z2 + z2 + z2 + z2 + z2 );\nloop invariant ( y = z2 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 );\nloop invariant ( z1 = 1 + z2 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 );\n*/\n```",
                "```\n/*@\nloop invariant - y > 0;\nloop invariant x >= -15000;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x < 0;\nloop invariant y > 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x + y < 0;\nloop invariant y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < 0;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= y <= 20000;\nloop invariant x <= (20000 - y);\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= -15000;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= 0;\nloop invariant x >= y;\nloop invariant x >= -15000;\nloop invariant x < 0 ==> y > 0;\nloop invariant x < 0 ==> y >= 1;\nloop invariant x < 0 ==> y <= 100000;\nloop invariant x < 0 ==> x >= y;\nloop invariant x < 0 ==> x >= -15000;\nloop invariant x < 0 ==> y >= 1 ==> x >= (1 + (y - 1) * y / 2);\nloop invariant x < 0 ==> y >= 1 ==> x >= (1 + (y - 1) * y / 2) ==> x >= 0;\nloop invariant x < 0 ==> y >= 1 ==> x >= (1 + (y - 1) * y / 2) ==> x >= 0 ==> x >= y;\nloop invariant x < 0 ==> y >= 1 ==> x >= (1 + (y - 1) * y / 2) ==> x >= 0 ==> x >= y ==> x >= -15000;\nloop invariant x < 0 ==> y >= 1 ==> x >= (1 + (y - 1) * y / 2) ==> x >= 0 ==> x >= y ==> x >= -15000 ==> y <= 100000;\nloop invariant x < 0 ==> y >= 1 ==> x >= (1 + (y - 1) * y / 2) ==> x >= 0 ==> x >= y ==> x >= -15000 ==> y <= 100000 ==> x >= y;\nloop invariant x < 0 ==> y >= 1 ==> x >= (1 + (y - 1) * y / 2) ==> x >= 0 ==> x >= y ==> x >= -15000 ==> y <= 100000 ==> x >= y ==> x >= -15000;\nloop invariant x < 0 ==> y >= 1 ==> x >= (1 + (y - 1) * y / 2) ==> x >= 0 ==> x >= y ==> x >= -15000 ==> y <= 100000 ==> x >= y ==> x >= -15000 ==> y >= 1;\nloop invariant x < 0 ==> y >= 1 ==> x >= (1 + (y - 1) * y / 2) ==> x >= 0 ==> x >= y ==> x >= -15000 ==> y <= 100000 ==> x >= y ==> x >= -15000 ==> y >= 1 ==> x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x + y == y + x;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= y <= -x;loop invariant x <= y;loop invariant x + y <= y + y * y / 2;loop invariant x + y <= y + y * (y + 1) / 2;loop invariant x + y <= y + (y + 1) * (y + 2) / 2;loop invariant x + y <= y + (y + 1) * (y + 2) * (y + 3) / 6;loop invariant x + y <= y + (y + 1) * (y + 2) * (y + 3) * (y + 4) / 24;loop invariant x + y <= y + (y + 1) * (y + 2) * (y + 3) * (y + 4) * (y + 5) / 120;loop invariant x + y <= y + (y + 1) * (y + 2) * (y + 3) * (y + 4) * (y + 5) * (y + 6) / 720;loop invariant x + y <= y + (y + 1) * (y + 2) * (y + 3) * (y + 4) * (y + 5) * (y + 6) * (y + 7) / 5040;loop invariant x + y <= y + (y + 1) * (y + 2) * (y + 3) * (y + 4) * (y + 5) * (y + 6) * (y + 7) * (y + 8) / 40320;loop invariant x + y <= y + (y + 1) * (y + 2) * (y + 3) * (y + 4) * (y + 5) * (y + 6) * (y + 7) * (y + 8) * (y + 9) / 362880;loop invariant x + y <= y + (y + 1) * (y + 2) * (y + 3) * (y + 4) * (y + 5) * (y + 6) * (y + 7) * (y + 8) * (y + 9) * (y + 10) / 3628800;loop invariant x + y <= y + (y + 1) * (y + 2) * (y + 3) * (y + 4) * (y + 5) * (y + 6) * (y + 7) * (y + 8) * (y + 9) * (y + 10) * (y + 11) / 39916800;loop invariant x + y <= y + (y + 1) * (y + 2) * (y + 3) * (y + 4) * (y + 5) * (y + 6) * (y + 7) * (y + 8) * (y + 9) * (y + 10) * (y + 11) * (y + 12) / 479001600;loop invariant x + y <= y + (y + 1) * (y + 2) * (y + 3) * (y + 4) * (y + 5) * (y + 6) * (y + 7) * (y + 8) * (y + 9) * (y + 10) * (y + 11) * (y + 12) * (y + 13) / 6227020800;loop invariant x + y <= y + (y + 1) * (y + 2) * (y + 3) * (y + 4) * (y + 5) * (y + 6) * (y + 7) * (y + 8) * (y + 9) * (y + 10) * (y + 11) * (y + 12) * (y + 13) * (y + 14) / 87178291200;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= y <= 100000; loop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x + y >= 0;\nloop invariant x - y <= 0;\nloop invariant x * y <= 0;\nloop invariant x + 2 * y >= -15000;\nloop invariant x - 2 * y <= -15000;\nloop invariant x + 3 * y >= -15000;\nloop invariant x - 3 * y <= -15000;\nloop invariant x + 4 * y >= -15000;\nloop invariant x - 4 * y <= -15000;\nloop invariant x + 5 * y >= -15000;\nloop invariant x - 5 * y <= -15000;\nloop invariant x + 6 * y >= -15000;\nloop invariant x - 6 * y <= -15000;\nloop invariant x + 7 * y >= -15000;\nloop invariant x - 7 * y <= -15000;\nloop invariant x + 8 * y >= -15000;\nloop invariant x - 8 * y <= -15000;\nloop invariant x + 9 * y >= -15000;\nloop invariant x - 9 * y <= -15000;\nloop invariant x + 10 * y >= -15000;\nloop invariant x - 10 * y <= -15000;\nloop invariant x + 11 * y >= -15000;\nloop invariant x - 11 * y <= -15000;\nloop invariant x + 12 * y >= -15000;\nloop invariant x - 12 * y <= -15000;\nloop invariant x + 13 * y >= -15000;\nloop invariant x - 13 * y <= -15000;\nloop invariant x + 14 * y >= -15000;\nloop invariant x - 14 * y <= -15000;\nloop invariant x + 15 * y >= -15000;\nloop invariant x - 15 * y <= -15000;\nloop invariant x + 16 * y >= -15000;\nloop invariant x - 16 * y <= -15000;\nloop invariant x + 17 * y >= -15000;\nloop invariant x - 17 * y <= -15000;\nloop invariant x + 18 * y >= -15000;\nloop invariant x - 18 * y <= -15000;\nloop invariant x + 19 * y >= -15000;\nloop invariant x - 19 * y <= -15000;\nloop invariant x + 20 * y >= -15000;\nloop invariant x - 20 * y <= -15000;\nloop invariant x + 21 * y >= -15000;\nloop invariant x - 21 * y <= -15000;\nloop invariant x + 22 * y >= -15000;\nloop invariant x - 22 * y <= -15000;\nloop invariant x + 23 * y >= -15000;\nloop invariant x - 23 * y <= -15000;\nloop invariant x + 24 * y >= -15000;\nloop invariant x - 24 * y <= -15000;\nloop invariant x + 25 * y >= -15000;\nloop invariant x - 25 * y <= -15000;\nloop invariant x + 26 * y >= -15000;\nloop invariant x - 26 * y <= -15000;\nloop invariant x + 27 * y >= -15000;\nloop invariant x - 27 * y <= -15000;\nloop invariant x + 28 * y >= -15000;\nloop invariant x - 28 * y <= -15000;\nloop invariant x + 29 * y >= -15000;\nloop invariant x - 29 * y <= -15000;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= -15000;\nloop invariant 0 <= y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\n*/\n```"
            ],
            "completions": [
                {
                    "num_solver_calls": 41,
                    "annotations": "```\n/*@\nloop invariant ( z1 = 0 );\nloop invariant ( z2 = 0 );\nloop invariant ( z3 = 0 );\nloop invariant ( x = -15000 );\nloop invariant ( y = z2 );\nloop invariant ( z1 = 1 );\nloop invariant ( z2 = z2 + 1 );\nloop invariant ( z1 = 1 + z2 );\nloop invariant ( x = -15000 + z2 );\nloop invariant ( y = z2 + 1 );\nloop invariant ( z1 = 1 + z2 );\nloop invariant ( x = -15000 + z2 + z2 );\nloop invariant ( y = z2 + 1 + 1 );\nloop invariant ( z1 = 1 + z2 + 1 );\nloop invariant ( x = -15000 + z2 + z2 + z2 );\nloop invariant ( y = z2 + 1 + 1 + 1 );\nloop invariant ( z1 = 1 + z2 + 1 + 1 );\nloop invariant ( x = -15000 + z2 + z2 + z2 + z2 );\nloop invariant ( y = z2 + 1 + 1 + 1 + 1 );\nloop invariant ( z1 = 1 + z2 + 1 + 1 + 1 );\nloop invariant ( x = -15000 + z2 + z2 + z2 + z2 + z2 );\nloop invariant ( y = z2 + 1 + 1 + 1 + 1 + 1 );\nloop invariant ( z1 = 1 + z2 + 1 + 1 + 1 + 1 );\nloop invariant ( x = -15000 + z2 + z2 + z2 + z2 + z2 + z2 );\nloop invariant ( y = z2 + 1 + 1 + 1 + 1 + 1 + 1 );\nloop invariant ( z1 = 1 + z2 + 1 + 1 + 1 + 1 + 1 );\nloop invariant ( x = -15000 + z2 + z2 + z2 + z2 + z2 + z2 + z2 );\nloop invariant ( y = z2 + 1 + 1 + 1 + 1 + 1 + 1 + 1 );\nloop invariant ( z1 = 1 + z2 + 1 + 1 + 1 + 1 + 1 + 1 );\nloop invariant ( x = -15000 + z2 + z2 + z2 + z2 + z2 + z2 + z2 + z2 );\nloop invariant ( y = z2 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 );\nloop invariant ( z1 = 1 + z2 + 1 + 1 + 1 + 1 + 1 + 1 + 1 );\nloop invariant ( x = -15000 + z2 + z2 + z2 + z2 + z2 + z2 + z2 + z2 + z2 );\nloop invariant ( y = z2 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 );\nloop invariant ( z1 = 1 + z2 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 );\nloop invariant ( x = -15000 + z2 + z2 + z2 + z2 + z2 + z2 + z2 + z2 + z2 + z2 );\nloop invariant ( y = z2 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 );\nloop invariant ( z1 = 1 + z2 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 );\nloop invariant ( x = -15000 + z2 + z2 + z2 + z2 + z2 + z2 + z2 + z2 + z2 + z2 + z2 );\nloop invariant ( y = z2 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 );\nloop invariant ( z1 = 1 + z2 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 );\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 18: Assignment operators not allowed in annotations.",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = -15000);\n  \n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant - y > 0;\nloop invariant x >= -15000;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant - y > 0 is neither established nor preserved.\nloop invariant x >= -15000 is established but not preserved.\nAssertion y > 0: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = -15000);\n  \n  /*@\n\n\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x < 0;\nloop invariant y > 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x < 0 is preserved but not established.\nloop invariant y > 0 is partially proven to be inductive.\nAssertion y > 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = -15000);\n  \n  /*@\n\n\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= x + y < 0;\nloop invariant y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < 0;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x + y < 0 is preserved but not established.\nloop invariant y < -15000 is partially proven to be inductive.\nloop invariant x + y < -15000 is partially proven to be inductive.\nloop invariant x + y < 0 is partially proven to be inductive.\nAssertion y > 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = -15000);\n  \n  /*@\n\n\n\n\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= y <= 20000;\nloop invariant x <= (20000 - y);\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= -15000;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= y <= 20000 is preserved but not established.\nloop invariant x <= (20000 - y) is partially proven to be inductive.\nloop invariant x >= (1 + (y - 1) * y / 2) is preserved but not established.\nloop invariant x >= -15000 is partially proven to be inductive.\nAssertion y > 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = -15000);\n  \n  /*@\n\n\n\n\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 8,
                    "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= 0;\nloop invariant x >= y;\nloop invariant x >= -15000;\nloop invariant x < 0 ==> y > 0;\nloop invariant x < 0 ==> y >= 1;\nloop invariant x < 0 ==> y <= 100000;\nloop invariant x < 0 ==> x >= y;\nloop invariant x < 0 ==> x >= -15000;\nloop invariant x < 0 ==> y >= 1 ==> x >= (1 + (y - 1) * y / 2);\nloop invariant x < 0 ==> y >= 1 ==> x >= (1 + (y - 1) * y / 2) ==> x >= 0;\nloop invariant x < 0 ==> y >= 1 ==> x >= (1 + (y - 1) * y / 2) ==> x >= 0 ==> x >= y;\nloop invariant x < 0 ==> y >= 1 ==> x >= (1 + (y - 1) * y / 2) ==> x >= 0 ==> x >= y ==> x >= -15000;\nloop invariant x < 0 ==> y >= 1 ==> x >= (1 + (y - 1) * y / 2) ==> x >= 0 ==> x >= y ==> x >= -15000 ==> y <= 100000;\nloop invariant x < 0 ==> y >= 1 ==> x >= (1 + (y - 1) * y / 2) ==> x >= 0 ==> x >= y ==> x >= -15000 ==> y <= 100000 ==> x >= y;\nloop invariant x < 0 ==> y >= 1 ==> x >= (1 + (y - 1) * y / 2) ==> x >= 0 ==> x >= y ==> x >= -15000 ==> y <= 100000 ==> x >= y ==> x >= -15000;\nloop invariant x < 0 ==> y >= 1 ==> x >= (1 + (y - 1) * y / 2) ==> x >= 0 ==> x >= y ==> x >= -15000 ==> y <= 100000 ==> x >= y ==> x >= -15000 ==> y >= 1;\nloop invariant x < 0 ==> y >= 1 ==> x >= (1 + (y - 1) * y / 2) ==> x >= 0 ==> x >= y ==> x >= -15000 ==> y <= 100000 ==> x >= y ==> x >= -15000 ==> y >= 1 ==> x >= (1 + (y - 1) * y / 2);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= y <= 100000 is preserved but not established.\nloop invariant x >= (1 + (y - 1) * y / 2) is preserved but not established.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant x >= y is partially proven to be inductive.\nloop invariant x >= -15000 is partially proven to be inductive.\nloop invariant x < 0 ==> y > 0 is partially proven to be inductive.\nloop invariant x < 0 ==> y >= 1 is partially proven to be inductive.\nloop invariant x < 0 ==> y <= 100000 is partially proven to be inductive.\nloop invariant x < 0 ==> x >= y is partially proven to be inductive.\nloop invariant x < 0 ==> x >= -15000 is partially proven to be inductive.\nloop invariant x < 0 ==> y >= 1 ==> x >= (1 + (y - 1) * y / 2) is partially proven to be inductive.\nloop invariant x < 0 ==> y >= 1 ==> x >= (1 + (y - 1) * y / 2) ==> x >= 0 is partially proven to be inductive.\nloop invariant x < 0 ==> y >= 1 ==> x >= (1 + (y - 1) * y / 2) ==> x >= 0 ==> x >= y is partially proven to be inductive.\nloop invariant x < 0 ==> y >= 1 ==> x >= (1 + (y - 1) * y / 2) ==> x >= 0 ==> x >= y ==> x >= -15000 is partially proven to be inductive.\nloop invariant x < 0 ==> y >= 1 ==> x >= (1 + (y - 1) * y / 2) ==> x >= 0 ==> x >= y ==> x >= -15000 ==> y <= 100000 is partially proven to be inductive.\nloop invariant x < 0 ==> y >= 1 ==> x >= (1 + (y - 1) * y / 2) ==> x >= 0 ==> x >= y ==> x >= -15000 ==> y <= 100000 ==> x >= y is partially proven to be inductive.\nloop invariant x < 0 ==> y >= 1 ==> x >= (1 + (y - 1) * y / 2) ==> x >= 0 ==> x >= y ==> x >= -15000 ==> y <= 100000 ==> x >= y ==> x >= -15000 is partially proven to be inductive.\nloop invariant x < 0 ==> y >= 1 ==> x >= (1 + (y - 1) * y / 2) ==> x >= 0 ==> x >= y ==> x >= -15000 ==> y <= 100000 ==> x >= y ==> x >= -15000 ==> y >= 1 is partially proven to be inductive.\nloop invariant x < 0 ==> y >= 1 ==> x >= (1 + (y - 1) * y / 2) ==> x >= 0 ==> x >= y ==> x >= -15000 ==> y <= 100000 ==> x >= y ==> x >= -15000 ==> y >= 1 ==> x >= (1 + (y - 1) * y / 2) is partially proven to be inductive.\nAssertion y > 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = -15000);\n  \n  /*@\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i12: x < 0 ==> y >= 1 ==> x >= (1 + (y - 1) * y / 2) ==> x >= 0;\nloop invariant i13: x < 0 ==> y >= 1 ==> x >= (1 + (y - 1) * y / 2) ==> x >= 0 ==> x >= y;\nloop invariant i14: x < 0 ==> y >= 1 ==> x >= (1 + (y - 1) * y / 2) ==> x >= 0 ==> x >= y ==> x >= -15000;\nloop invariant i15: x < 0 ==> y >= 1 ==> x >= (1 + (y - 1) * y / 2) ==> x >= 0 ==> x >= y ==> x >= -15000 ==> y <= 100000;\nloop invariant i16: x < 0 ==> y >= 1 ==> x >= (1 + (y - 1) * y / 2) ==> x >= 0 ==> x >= y ==> x >= -15000 ==> y <= 100000 ==> x >= y;\nloop invariant i17: x < 0 ==> y >= 1 ==> x >= (1 + (y - 1) * y / 2) ==> x >= 0 ==> x >= y ==> x >= -15000 ==> y <= 100000 ==> x >= y ==> x >= -15000;\nloop invariant i18: x < 0 ==> y >= 1 ==> x >= (1 + (y - 1) * y / 2) ==> x >= 0 ==> x >= y ==> x >= -15000 ==> y <= 100000 ==> x >= y ==> x >= -15000 ==> y >= 1;\nloop invariant i19: x < 0 ==> y >= 1 ==> x >= (1 + (y - 1) * y / 2) ==> x >= 0 ==> x >= y ==> x >= -15000 ==> y <= 100000 ==> x >= y ==> x >= -15000 ==> y >= 1 ==> x >= (1 + (y - 1) * y / 2);\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x + y == y + x;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= y <= 100000 is preserved but not established.\nloop invariant x >= (1 + (y - 1) * y / 2) is preserved but not established.\nloop invariant x + y == y + x is partially proven to be inductive.\nAssertion y > 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = -15000);\n  \n  /*@\n\n\nloop invariant i3: x + y == y + x;\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= y <= 100000 is preserved but not established.\nloop invariant x >= (1 + (y - 1) * y / 2) is preserved but not established.\nAssertion y > 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = -15000);\n  \n  /*@\n\n\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= y <= 100000 is preserved but not established.\nloop invariant x >= (1 + (y - 1) * y / 2) is preserved but not established.\nAssertion y > 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = -15000);\n  \n  /*@\n\n\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= y <= 100000 is preserved but not established.\nloop invariant x >= (1 + (y - 1) * y / 2) is preserved but not established.\nAssertion y > 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = -15000);\n  \n  /*@\n\n\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= y <= 100000 is preserved but not established.\nloop invariant x >= (1 + (y - 1) * y / 2) is preserved but not established.\nAssertion y > 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = -15000);\n  \n  /*@\n\n\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= y <= -x;loop invariant x <= y;loop invariant x + y <= y + y * y / 2;loop invariant x + y <= y + y * (y + 1) / 2;loop invariant x + y <= y + (y + 1) * (y + 2) / 2;loop invariant x + y <= y + (y + 1) * (y + 2) * (y + 3) / 6;loop invariant x + y <= y + (y + 1) * (y + 2) * (y + 3) * (y + 4) / 24;loop invariant x + y <= y + (y + 1) * (y + 2) * (y + 3) * (y + 4) * (y + 5) / 120;loop invariant x + y <= y + (y + 1) * (y + 2) * (y + 3) * (y + 4) * (y + 5) * (y + 6) / 720;loop invariant x + y <= y + (y + 1) * (y + 2) * (y + 3) * (y + 4) * (y + 5) * (y + 6) * (y + 7) / 5040;loop invariant x + y <= y + (y + 1) * (y + 2) * (y + 3) * (y + 4) * (y + 5) * (y + 6) * (y + 7) * (y + 8) / 40320;loop invariant x + y <= y + (y + 1) * (y + 2) * (y + 3) * (y + 4) * (y + 5) * (y + 6) * (y + 7) * (y + 8) * (y + 9) / 362880;loop invariant x + y <= y + (y + 1) * (y + 2) * (y + 3) * (y + 4) * (y + 5) * (y + 6) * (y + 7) * (y + 8) * (y + 9) * (y + 10) / 3628800;loop invariant x + y <= y + (y + 1) * (y + 2) * (y + 3) * (y + 4) * (y + 5) * (y + 6) * (y + 7) * (y + 8) * (y + 9) * (y + 10) * (y + 11) / 39916800;loop invariant x + y <= y + (y + 1) * (y + 2) * (y + 3) * (y + 4) * (y + 5) * (y + 6) * (y + 7) * (y + 8) * (y + 9) * (y + 10) * (y + 11) * (y + 12) / 479001600;loop invariant x + y <= y + (y + 1) * (y + 2) * (y + 3) * (y + 4) * (y + 5) * (y + 6) * (y + 7) * (y + 8) * (y + 9) * (y + 10) * (y + 11) * (y + 12) * (y + 13) / 6227020800;loop invariant x + y <= y + (y + 1) * (y + 2) * (y + 3) * (y + 4) * (y + 5) * (y + 6) * (y + 7) * (y + 8) * (y + 9) * (y + 10) * (y + 11) * (y + 12) * (y + 13) * (y + 14) / 87178291200;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= y <= -x;loop invariant x <= y;loop invariant x + y <= y + y * y / 2;loop invariant x + y <= y + y * (y + 1) / 2;loop invariant x + y <= y + (y + 1) * (y + 2) / 2;loop invariant x + y <= y + (y + 1) * (y + 2) * (y + 3) / 6;loop invariant x + y <= y + (y + 1) * (y + 2) * (y + 3) * (y + 4) / 24;loop invariant x + y <= y + (y + 1) * (y + 2) * (y + 3) * (y + 4) * (y + 5) / 120;loop invariant x + y <= y + (y + 1) * (y + 2) * (y + 3) * (y + 4) * (y + 5) * (y + 6) / 720;loop invariant x + y <= y + (y + 1) * (y + 2) * (y + 3) * (y + 4) * (y + 5) * (y + 6) * (y + 7) / 5040;loop invariant x + y <= y + (y + 1) * (y + 2) * (y + 3) * (y + 4) * (y + 5) * (y + 6) * (y + 7) * (y + 8) / 40320;loop invariant x + y <= y + (y + 1) * (y + 2) * (y + 3) * (y + 4) * (y + 5) * (y + 6) * (y + 7) * (y + 8) * (y + 9) / 362880;loop invariant x + y <= y + (y + 1) * (y + 2) * (y + 3) * (y + 4) * (y + 5) * (y + 6) * (y + 7) * (y + 8) * (y + 9) * (y + 10) / 3628800;loop invariant x + y <= y + (y + 1) * (y + 2) * (y + 3) * (y + 4) * (y + 5) * (y + 6) * (y + 7) * (y + 8) * (y + 9) * (y + 10) * (y + 11) / 39916800;loop invariant x + y <= y + (y + 1) * (y + 2) * (y + 3) * (y + 4) * (y + 5) * (y + 6) * (y + 7) * (y + 8) * (y + 9) * (y + 10) * (y + 11) * (y + 12) / 479001600;loop invariant x + y <= y + (y + 1) * (y + 2) * (y + 3) * (y + 4) * (y + 5) * (y + 6) * (y + 7) * (y + 8) * (y + 9) * (y + 10) * (y + 11) * (y + 12) * (y + 13) / 6227020800;loop invariant x + y <= y + (y + 1) * (y + 2) * (y + 3) * (y + 4) * (y + 5) * (y + 6) * (y + 7) * (y + 8) * (y + 9) * (y + 10) * (y + 11) * (y + 12) * (y + 13) * (y + 14) / 87178291200 is neither established nor preserved.\nAssertion y > 0: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = -15000);\n  \n  /*@\n\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000; loop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= y <= 100000; loop invariant x >= (1 + (y - 1) * y / 2) is preserved but not established.\nAssertion y > 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = -15000);\n  \n  /*@\n\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 31,
                    "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x + y >= 0;\nloop invariant x - y <= 0;\nloop invariant x * y <= 0;\nloop invariant x + 2 * y >= -15000;\nloop invariant x - 2 * y <= -15000;\nloop invariant x + 3 * y >= -15000;\nloop invariant x - 3 * y <= -15000;\nloop invariant x + 4 * y >= -15000;\nloop invariant x - 4 * y <= -15000;\nloop invariant x + 5 * y >= -15000;\nloop invariant x - 5 * y <= -15000;\nloop invariant x + 6 * y >= -15000;\nloop invariant x - 6 * y <= -15000;\nloop invariant x + 7 * y >= -15000;\nloop invariant x - 7 * y <= -15000;\nloop invariant x + 8 * y >= -15000;\nloop invariant x - 8 * y <= -15000;\nloop invariant x + 9 * y >= -15000;\nloop invariant x - 9 * y <= -15000;\nloop invariant x + 10 * y >= -15000;\nloop invariant x - 10 * y <= -15000;\nloop invariant x + 11 * y >= -15000;\nloop invariant x - 11 * y <= -15000;\nloop invariant x + 12 * y >= -15000;\nloop invariant x - 12 * y <= -15000;\nloop invariant x + 13 * y >= -15000;\nloop invariant x - 13 * y <= -15000;\nloop invariant x + 14 * y >= -15000;\nloop invariant x - 14 * y <= -15000;\nloop invariant x + 15 * y >= -15000;\nloop invariant x - 15 * y <= -15000;\nloop invariant x + 16 * y >= -15000;\nloop invariant x - 16 * y <= -15000;\nloop invariant x + 17 * y >= -15000;\nloop invariant x - 17 * y <= -15000;\nloop invariant x + 18 * y >= -15000;\nloop invariant x - 18 * y <= -15000;\nloop invariant x + 19 * y >= -15000;\nloop invariant x - 19 * y <= -15000;\nloop invariant x + 20 * y >= -15000;\nloop invariant x - 20 * y <= -15000;\nloop invariant x + 21 * y >= -15000;\nloop invariant x - 21 * y <= -15000;\nloop invariant x + 22 * y >= -15000;\nloop invariant x - 22 * y <= -15000;\nloop invariant x + 23 * y >= -15000;\nloop invariant x - 23 * y <= -15000;\nloop invariant x + 24 * y >= -15000;\nloop invariant x - 24 * y <= -15000;\nloop invariant x + 25 * y >= -15000;\nloop invariant x - 25 * y <= -15000;\nloop invariant x + 26 * y >= -15000;\nloop invariant x - 26 * y <= -15000;\nloop invariant x + 27 * y >= -15000;\nloop invariant x - 27 * y <= -15000;\nloop invariant x + 28 * y >= -15000;\nloop invariant x - 28 * y <= -15000;\nloop invariant x + 29 * y >= -15000;\nloop invariant x - 29 * y <= -15000;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= y <= 100000 is preserved but not established.\nloop invariant x >= (1 + (y - 1) * y / 2) is preserved but not established.\nloop invariant x + y >= 0 is partially proven to be inductive.\nloop invariant x - y <= 0 is partially proven to be inductive.\nloop invariant x * y <= 0 is partially proven to be inductive.\nloop invariant x + 2 * y >= -15000 is partially proven to be inductive.\nloop invariant x - 2 * y <= -15000 is partially proven to be inductive.\nloop invariant x + 3 * y >= -15000 is partially proven to be inductive.\nloop invariant x - 3 * y <= -15000 is partially proven to be inductive.\nloop invariant x + 4 * y >= -15000 is partially proven to be inductive.\nloop invariant x - 4 * y <= -15000 is partially proven to be inductive.\nloop invariant x + 5 * y >= -15000 is partially proven to be inductive.\nloop invariant x - 5 * y <= -15000 is partially proven to be inductive.\nloop invariant x + 6 * y >= -15000 is partially proven to be inductive.\nloop invariant x - 6 * y <= -15000 is partially proven to be inductive.\nloop invariant x + 7 * y >= -15000 is partially proven to be inductive.\nloop invariant x - 7 * y <= -15000 is partially proven to be inductive.\nloop invariant x + 8 * y >= -15000 is partially proven to be inductive.\nloop invariant x - 8 * y <= -15000 is partially proven to be inductive.\nloop invariant x + 9 * y >= -15000 is partially proven to be inductive.\nloop invariant x - 9 * y <= -15000 is partially proven to be inductive.\nloop invariant x + 10 * y >= -15000 is partially proven to be inductive.\nloop invariant x - 10 * y <= -15000 is partially proven to be inductive.\nloop invariant x + 11 * y >= -15000 is partially proven to be inductive.\nloop invariant x - 11 * y <= -15000 is partially proven to be inductive.\nloop invariant x + 12 * y >= -15000 is partially proven to be inductive.\nloop invariant x - 12 * y <= -15000 is partially proven to be inductive.\nloop invariant x + 13 * y >= -15000 is partially proven to be inductive.\nloop invariant x - 13 * y <= -15000 is partially proven to be inductive.\nloop invariant x + 14 * y >= -15000 is partially proven to be inductive.\nloop invariant x - 14 * y <= -15000 is partially proven to be inductive.\nloop invariant x + 15 * y >= -15000 is partially proven to be inductive.\nloop invariant x - 15 * y <= -15000 is partially proven to be inductive.\nloop invariant x + 16 * y >= -15000 is partially proven to be inductive.\nloop invariant x - 16 * y <= -15000 is partially proven to be inductive.\nloop invariant x + 17 * y >= -15000 is partially proven to be inductive.\nloop invariant x - 17 * y <= -15000 is partially proven to be inductive.\nloop invariant x + 18 * y >= -15000 is partially proven to be inductive.\nloop invariant x - 18 * y <= -15000 is partially proven to be inductive.\nloop invariant x + 19 * y >= -15000 is partially proven to be inductive.\nloop invariant x - 19 * y <= -15000 is partially proven to be inductive.\nloop invariant x + 20 * y >= -15000 is partially proven to be inductive.\nloop invariant x - 20 * y <= -15000 is partially proven to be inductive.\nloop invariant x + 21 * y >= -15000 is partially proven to be inductive.\nloop invariant x - 21 * y <= -15000 is partially proven to be inductive.\nloop invariant x + 22 * y >= -15000 is partially proven to be inductive.\nloop invariant x - 22 * y <= -15000 is partially proven to be inductive.\nloop invariant x + 23 * y >= -15000 is partially proven to be inductive.\nloop invariant x - 23 * y <= -15000 is partially proven to be inductive.\nloop invariant x + 24 * y >= -15000 is partially proven to be inductive.\nloop invariant x - 24 * y <= -15000 is partially proven to be inductive.\nloop invariant x + 25 * y >= -15000 is partially proven to be inductive.\nloop invariant x - 25 * y <= -15000 is partially proven to be inductive.\nloop invariant x + 26 * y >= -15000 is partially proven to be inductive.\nloop invariant x - 26 * y <= -15000 is partially proven to be inductive.\nloop invariant x + 27 * y >= -15000 is partially proven to be inductive.\nloop invariant x - 27 * y <= -15000 is partially proven to be inductive.\nloop invariant x + 28 * y >= -15000 is partially proven to be inductive.\nloop invariant x - 28 * y <= -15000 is partially proven to be inductive.\nloop invariant x + 29 * y >= -15000 is partially proven to be inductive.\nloop invariant x - 29 * y <= -15000 is partially proven to be inductive.\nAssertion y > 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = -15000);\n  \n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= -15000;\nloop invariant 0 <= y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= -15000 is preserved but not established.\nloop invariant 0 <= y <= 1 is partially proven to be inductive.\nloop invariant x <= -15000 is partially proven to be inductive.\nloop invariant y <= 1 is partially proven to be inductive.\nAssertion y > 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = -15000);\n  \n  /*@\n\n\n\n\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                }
            ],
            "checker_output_for_combined_annotations": false,
            "checker_message_for_combined_annotations": "Annotation error on line 18: Assignment operators not allowed in annotations.",
            "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = -15000);\n  \n  /*@\nloop invariant i1: ( z1 = 0 );\nloop invariant i2: ( z2 = 0 );\nloop invariant i3: ( z3 = 0 );\nloop invariant i4: ( x = -15000 );\nloop invariant i5: ( y = z2 );\nloop invariant i6: ( z1 = 1 );\nloop invariant i7: ( z2 = z2 + 1 );\nloop invariant i8: ( z1 = 1 + z2 );\nloop invariant i9: ( x = -15000 + z2 );\nloop invariant i10: ( y = z2 + 1 );\nloop invariant i11: ( x = -15000 + z2 + z2 );\nloop invariant i12: ( y = z2 + 1 + 1 );\nloop invariant i13: ( z1 = 1 + z2 + 1 );\nloop invariant i14: ( x = -15000 + z2 + z2 + z2 );\nloop invariant i15: ( y = z2 + 1 + 1 + 1 );\nloop invariant i16: ( z1 = 1 + z2 + 1 + 1 );\nloop invariant i17: ( x = -15000 + z2 + z2 + z2 + z2 );\nloop invariant i18: ( y = z2 + 1 + 1 + 1 + 1 );\nloop invariant i19: ( z1 = 1 + z2 + 1 + 1 + 1 );\nloop invariant i20: ( x = -15000 + z2 + z2 + z2 + z2 + z2 );\nloop invariant i21: ( y = z2 + 1 + 1 + 1 + 1 + 1 );\nloop invariant i22: ( z1 = 1 + z2 + 1 + 1 + 1 + 1 );\nloop invariant i23: ( x = -15000 + z2 + z2 + z2 + z2 + z2 + z2 );\nloop invariant i24: ( y = z2 + 1 + 1 + 1 + 1 + 1 + 1 );\nloop invariant i25: ( z1 = 1 + z2 + 1 + 1 + 1 + 1 + 1 );\nloop invariant i26: ( x = -15000 + z2 + z2 + z2 + z2 + z2 + z2 + z2 );\nloop invariant i27: ( y = z2 + 1 + 1 + 1 + 1 + 1 + 1 + 1 );\nloop invariant i28: ( z1 = 1 + z2 + 1 + 1 + 1 + 1 + 1 + 1 );\nloop invariant i29: ( x = -15000 + z2 + z2 + z2 + z2 + z2 + z2 + z2 + z2 );\nloop invariant i30: ( y = z2 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 );\nloop invariant i31: ( z1 = 1 + z2 + 1 + 1 + 1 + 1 + 1 + 1 + 1 );\nloop invariant i32: ( x = -15000 + z2 + z2 + z2 + z2 + z2 + z2 + z2 + z2 + z2 );\nloop invariant i33: ( y = z2 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 );\nloop invariant i34: ( z1 = 1 + z2 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 );\nloop invariant i35: ( x = -15000 + z2 + z2 + z2 + z2 + z2 + z2 + z2 + z2 + z2 + z2 );\nloop invariant i36: ( y = z2 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 );\nloop invariant i37: ( z1 = 1 + z2 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 );\nloop invariant i38: ( x = -15000 + z2 + z2 + z2 + z2 + z2 + z2 + z2 + z2 + z2 + z2 + z2 );\nloop invariant i39: ( y = z2 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 );\nloop invariant i40: ( z1 = 1 + z2 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 );\nloop invariant i41: - y > 0;\nloop invariant i42: x >= -15000;\nloop invariant i43: 0 <= x < 0;\nloop invariant i44: y > 0;\nloop invariant i45: 0 <= x + y < 0;\nloop invariant i46: y < -15000;\nloop invariant i47: x + y < -15000;\nloop invariant i48: x + y < 0;\nloop invariant i49: 0 <= y <= 20000;\nloop invariant i50: x <= (20000 - y);\nloop invariant i51: x >= (1 + (y - 1) * y / 2);\nloop invariant i52: 0 <= y <= 100000;\nloop invariant i53: x >= 0;\nloop invariant i54: x >= y;\nloop invariant i55: x < 0 ==> y > 0;\nloop invariant i56: x < 0 ==> y >= 1;\nloop invariant i57: x < 0 ==> y <= 100000;\nloop invariant i58: x < 0 ==> x >= y;\nloop invariant i59: x < 0 ==> x >= -15000;\nloop invariant i60: x < 0 ==> y >= 1 ==> x >= (1 + (y - 1) * y / 2);\nloop invariant i61: x < 0 ==> y >= 1 ==> x >= (1 + (y - 1) * y / 2) ==> x >= 0;\nloop invariant i62: x < 0 ==> y >= 1 ==> x >= (1 + (y - 1) * y / 2) ==> x >= 0 ==> x >= y;\nloop invariant i63: x < 0 ==> y >= 1 ==> x >= (1 + (y - 1) * y / 2) ==> x >= 0 ==> x >= y ==> x >= -15000;\nloop invariant i64: x < 0 ==> y >= 1 ==> x >= (1 + (y - 1) * y / 2) ==> x >= 0 ==> x >= y ==> x >= -15000 ==> y <= 100000;\nloop invariant i65: x < 0 ==> y >= 1 ==> x >= (1 + (y - 1) * y / 2) ==> x >= 0 ==> x >= y ==> x >= -15000 ==> y <= 100000 ==> x >= y;\nloop invariant i66: x < 0 ==> y >= 1 ==> x >= (1 + (y - 1) * y / 2) ==> x >= 0 ==> x >= y ==> x >= -15000 ==> y <= 100000 ==> x >= y ==> x >= -15000;\nloop invariant i67: x < 0 ==> y >= 1 ==> x >= (1 + (y - 1) * y / 2) ==> x >= 0 ==> x >= y ==> x >= -15000 ==> y <= 100000 ==> x >= y ==> x >= -15000 ==> y >= 1;\nloop invariant i68: x < 0 ==> y >= 1 ==> x >= (1 + (y - 1) * y / 2) ==> x >= 0 ==> x >= y ==> x >= -15000 ==> y <= 100000 ==> x >= y ==> x >= -15000 ==> y >= 1 ==> x >= (1 + (y - 1) * y / 2);\nloop invariant i69: x + y == y + x;\nloop invariant i70: 0 <= y <= -x;loop invariant x <= y;loop invariant x + y <= y + y * y / 2;loop invariant x + y <= y + y * (y + 1) / 2;loop invariant x + y <= y + (y + 1) * (y + 2) / 2;loop invariant x + y <= y + (y + 1) * (y + 2) * (y + 3) / 6;loop invariant x + y <= y + (y + 1) * (y + 2) * (y + 3) * (y + 4) / 24;loop invariant x + y <= y + (y + 1) * (y + 2) * (y + 3) * (y + 4) * (y + 5) / 120;loop invariant x + y <= y + (y + 1) * (y + 2) * (y + 3) * (y + 4) * (y + 5) * (y + 6) / 720;loop invariant x + y <= y + (y + 1) * (y + 2) * (y + 3) * (y + 4) * (y + 5) * (y + 6) * (y + 7) / 5040;loop invariant x + y <= y + (y + 1) * (y + 2) * (y + 3) * (y + 4) * (y + 5) * (y + 6) * (y + 7) * (y + 8) / 40320;loop invariant x + y <= y + (y + 1) * (y + 2) * (y + 3) * (y + 4) * (y + 5) * (y + 6) * (y + 7) * (y + 8) * (y + 9) / 362880;loop invariant x + y <= y + (y + 1) * (y + 2) * (y + 3) * (y + 4) * (y + 5) * (y + 6) * (y + 7) * (y + 8) * (y + 9) * (y + 10) / 3628800;loop invariant x + y <= y + (y + 1) * (y + 2) * (y + 3) * (y + 4) * (y + 5) * (y + 6) * (y + 7) * (y + 8) * (y + 9) * (y + 10) * (y + 11) / 39916800;loop invariant x + y <= y + (y + 1) * (y + 2) * (y + 3) * (y + 4) * (y + 5) * (y + 6) * (y + 7) * (y + 8) * (y + 9) * (y + 10) * (y + 11) * (y + 12) / 479001600;loop invariant x + y <= y + (y + 1) * (y + 2) * (y + 3) * (y + 4) * (y + 5) * (y + 6) * (y + 7) * (y + 8) * (y + 9) * (y + 10) * (y + 11) * (y + 12) * (y + 13) / 6227020800;loop invariant x + y <= y + (y + 1) * (y + 2) * (y + 3) * (y + 4) * (y + 5) * (y + 6) * (y + 7) * (y + 8) * (y + 9) * (y + 10) * (y + 11) * (y + 12) * (y + 13) * (y + 14) / 87178291200;\nloop invariant i71: 0 <= y <= 100000; loop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant i72: x + y >= 0;\nloop invariant i73: x - y <= 0;\nloop invariant i74: x * y <= 0;\nloop invariant i75: x + 2 * y >= -15000;\nloop invariant i76: x - 2 * y <= -15000;\nloop invariant i77: x + 3 * y >= -15000;\nloop invariant i78: x - 3 * y <= -15000;\nloop invariant i79: x + 4 * y >= -15000;\nloop invariant i80: x - 4 * y <= -15000;\nloop invariant i81: x + 5 * y >= -15000;\nloop invariant i82: x - 5 * y <= -15000;\nloop invariant i83: x + 6 * y >= -15000;\nloop invariant i84: x - 6 * y <= -15000;\nloop invariant i85: x + 7 * y >= -15000;\nloop invariant i86: x - 7 * y <= -15000;\nloop invariant i87: x + 8 * y >= -15000;\nloop invariant i88: x - 8 * y <= -15000;\nloop invariant i89: x + 9 * y >= -15000;\nloop invariant i90: x - 9 * y <= -15000;\nloop invariant i91: x + 10 * y >= -15000;\nloop invariant i92: x - 10 * y <= -15000;\nloop invariant i93: x + 11 * y >= -15000;\nloop invariant i94: x - 11 * y <= -15000;\nloop invariant i95: x + 12 * y >= -15000;\nloop invariant i96: x - 12 * y <= -15000;\nloop invariant i97: x + 13 * y >= -15000;\nloop invariant i98: x - 13 * y <= -15000;\nloop invariant i99: x + 14 * y >= -15000;\nloop invariant i100: x - 14 * y <= -15000;\nloop invariant i101: x + 15 * y >= -15000;\nloop invariant i102: x - 15 * y <= -15000;\nloop invariant i103: x + 16 * y >= -15000;\nloop invariant i104: x - 16 * y <= -15000;\nloop invariant i105: x + 17 * y >= -15000;\nloop invariant i106: x - 17 * y <= -15000;\nloop invariant i107: x + 18 * y >= -15000;\nloop invariant i108: x - 18 * y <= -15000;\nloop invariant i109: x + 19 * y >= -15000;\nloop invariant i110: x - 19 * y <= -15000;\nloop invariant i111: x + 20 * y >= -15000;\nloop invariant i112: x - 20 * y <= -15000;\nloop invariant i113: x + 21 * y >= -15000;\nloop invariant i114: x - 21 * y <= -15000;\nloop invariant i115: x + 22 * y >= -15000;\nloop invariant i116: x - 22 * y <= -15000;\nloop invariant i117: x + 23 * y >= -15000;\nloop invariant i118: x - 23 * y <= -15000;\nloop invariant i119: x + 24 * y >= -15000;\nloop invariant i120: x - 24 * y <= -15000;\nloop invariant i121: x + 25 * y >= -15000;\nloop invariant i122: x - 25 * y <= -15000;\nloop invariant i123: x + 26 * y >= -15000;\nloop invariant i124: x - 26 * y <= -15000;\nloop invariant i125: x + 27 * y >= -15000;\nloop invariant i126: x - 27 * y <= -15000;\nloop invariant i127: x + 28 * y >= -15000;\nloop invariant i128: x - 28 * y <= -15000;\nloop invariant i129: x + 29 * y >= -15000;\nloop invariant i130: x - 29 * y <= -15000;\nloop invariant i131: 0 <= x <= -15000;\nloop invariant i132: 0 <= y <= 1;\nloop invariant i133: x <= -15000;\nloop invariant i134: y <= 1;\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
            "combined_annotation_num_solver_calls": 84,
            "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = -15000);\n  \n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i61: x < 0 ==> y >= 1 ==> x >= (1 + (y - 1) * y / 2) ==> x >= 0;\nloop invariant i62: x < 0 ==> y >= 1 ==> x >= (1 + (y - 1) * y / 2) ==> x >= 0 ==> x >= y;\nloop invariant i63: x < 0 ==> y >= 1 ==> x >= (1 + (y - 1) * y / 2) ==> x >= 0 ==> x >= y ==> x >= -15000;\nloop invariant i64: x < 0 ==> y >= 1 ==> x >= (1 + (y - 1) * y / 2) ==> x >= 0 ==> x >= y ==> x >= -15000 ==> y <= 100000;\nloop invariant i65: x < 0 ==> y >= 1 ==> x >= (1 + (y - 1) * y / 2) ==> x >= 0 ==> x >= y ==> x >= -15000 ==> y <= 100000 ==> x >= y;\nloop invariant i66: x < 0 ==> y >= 1 ==> x >= (1 + (y - 1) * y / 2) ==> x >= 0 ==> x >= y ==> x >= -15000 ==> y <= 100000 ==> x >= y ==> x >= -15000;\nloop invariant i67: x < 0 ==> y >= 1 ==> x >= (1 + (y - 1) * y / 2) ==> x >= 0 ==> x >= y ==> x >= -15000 ==> y <= 100000 ==> x >= y ==> x >= -15000 ==> y >= 1;\nloop invariant i68: x < 0 ==> y >= 1 ==> x >= (1 + (y - 1) * y / 2) ==> x >= 0 ==> x >= y ==> x >= -15000 ==> y <= 100000 ==> x >= y ==> x >= -15000 ==> y >= 1 ==> x >= (1 + (y - 1) * y / 2);\nloop invariant i69: x + y == y + x;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
            "checker_output_after_prune": false
        },
        {
            "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/ex2.c",
            "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n\tint x, y, z;\n\tx=0;y=0;z=0;\n\twhile (x<100) {\n\t\tif(x<=50)\n               \t\ty=y+1;\n       \t\telse\n               \t\ty=y-1;\n       \n       \t\tif(x<25)\n               \t\tz=z+1;\n       \t\telse\n               \t\tz=z+5;\n       \n       \t\tx=x+1;\n\t}\n\t{;\n//@ assert(z==400);\n}\n\n\t{;\n//@ assert(y==2);\n}\n\n\t{;\n//@ assert(x==100);\n}\n\n\treturn 0;\n}",
            "success": false,
            "annotation_blocks": [
                "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant 0 <= y <= 2;\nloop invariant 0 <= z <= 400;\nloop invariant (x <= 50 ==> y <= 1);\nloop invariant (x > 50 ==> y >= -1);\nloop invariant (x < 25 ==> z <= 1);\nloop invariant (x >= 25 ==> z >= 5);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant x >= 0;\nloop invariant x <= 100;\nloop invariant x == 100;\nloop invariant y == 2;\nloop invariant z == 400;\nloop invariant x == 100 ==> y == 2;\nloop invariant x == 100 ==> z == 400;\nloop invariant x == 100 ==> x == 100;\nloop invariant x == 100 ==> y == 2;\nloop invariant x == 100 ==> z == 400;\nloop invariant x == 100 ==> x == 100;\nloop invariant x == 100 ==> y == 2;\nloop invariant x == 100 ==> z == 400;\nloop invariant x == 100 ==> x == 100;\nloop invariant x == 100 ==> y == 2;\nloop invariant x == 100 ==> z == 400;\nloop invariant x == 100 ==> x == 100;\nloop invariant x == 100 ==> y == 2;\nloop invariant x == 100 ==> z == 400;\nloop invariant x == 100 ==> x == 100;\nloop invariant x == 100 ==> y == 2;\nloop invariant x == 100 ==> z == 400;\nloop invariant x == 100 ==> x == 100;\nloop invariant x == 100 ==> y == 2;\nloop invariant x == 100 ==> z == 400;\nloop invariant x == 100 ==> x == 100;\nloop invariant x == 100 ==> y == 2;\nloop invariant x == 100 ==> z == 400;\nloop invariant x == 100 ==> x == 100;\nloop invariant x == 100 ==> y == 2;\nloop invariant x == 100 ==> z == 400;\nloop invariant x == 100 ==> x == 100;\nloop invariant x == 100 ==> y == 2;\nloop invariant x == 100 ==> z == 400;\nloop invariant x == 100 ==> x == 100;\nloop invariant x == 100 ==> y == 2;\nloop invariant x == 100 ==> z == 400;\nloop invariant x == 100 ==> x == 100;\nloop invariant x == 100 ==> y == 2;\nloop invariant x == 100 ==> z == 400;\nloop invariant x == 100 ==> x == 100;\nloop invariant x == 100 ==> y == 2;\nloop invariant x == 100 ==> z == 400;\nloop invariant x == 100 ==> x == 100;\nloop invariant x == 100 ==> y == 2;\nloop invariant x == 100 ==> z == 400;\nloop invariant x == 100 ==> x == 100;\nloop invariant x == 100 ==> y == 2;\nloop invariant x == 100 ==> z == 400;\nloop invariant x == 100 ==> x == 100;\nloop invariant x == 100 ==> y == 2;\nloop invariant x == 100 ==> z == 400;\nloop invariant x == 100 ==> x == 100;\nloop invariant x == 100 ==> y == 2;\nloop invariant x == 100 ==> z == 400;\nloop invariant x == 100 ==> x == 100;\nloop invariant x == 100 ==> y == 2;\nloop invariant x == 100 ==> z == 400;\nloop invariant x == 100 ==> x == 100;\nloop invariant x == 100 ==> y == 2;\nloop invariant x == 100 ==> z == 400;\nloop invariant x == 100 ==> x == 100;\nloop invariant x == 100 ==> y == 2;\nloop invariant x == 100 ==> z == 400;\nloop invariant x == 100 ==> x == 100;\nloop invariant x == 100 ==> y == 2;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant 0 <= y <= 2;\nloop invariant 0 <= z <= 250;\nloop invariant (x <= 50 ==> y <= 1);\nloop invariant (x >= 25 ==> z <= 400);\nloop invariant (x >= 50 ==> y >= -1);\nloop invariant (x < 25 ==> z >= 1);\nloop invariant (x < 50 ==> y >= 0);\nloop invariant (x < 50 ==> z >= 5);\nloop invariant (x >= 50 ==> y >= 0);\nloop invariant (x >= 50 ==> z >= 25);\nloop invariant (x >= 50 ==> y <= 0);\nloop invariant (x >= 50 ==> z <= 25);\nloop invariant (x >= 50 ==> y >= -1);\nloop invariant (x >= 50 ==> z >= 25);\nloop invariant (x >= 50 ==> y <= 0);\nloop invariant (x >= 50 ==> z <= 25);\nloop invariant (x >= 50 ==> y >= -1);\nloop invariant (x >= 50 ==> z >= 25);\nloop invariant (x >= 50 ==> y <= 0);\nloop invariant (x >= 50 ==> z <= 25);\nloop invariant (x >= 50 ==> y >= -1);\nloop invariant (x >= 50 ==> z >= 25);\nloop invariant (x >= 50 ==> y <= 0);\nloop invariant (x >= 50 ==> z <= 25);\nloop invariant (x >= 50 ==> y >= -1);\nloop invariant (x >= 50 ==> z >= 25);\nloop invariant (x >= 50 ==> y <= 0);\nloop invariant (x >= 50 ==> z <= 25);\nloop invariant (x >= 50 ==> y >= -1);\nloop invariant (x >= 50 ==> z >= 25);\nloop invariant (x >= 50 ==> y <= 0);\nloop invariant (x >= 50 ==> z <= 25);\nloop invariant (x >= 50 ==> y >= -1);\nloop invariant (x >= 50 ==> z >= 25);\nloop invariant (x >= 50 ==> y <= 0);\nloop invariant (x >= 50 ==> z <= 25);\nloop invariant (x >= 50 ==> y >= -1);\nloop invariant (x >= 50 ==> z >= 25);\nloop invariant (x >= 50 ==> y <= 0);\nloop invariant (x >= 50 ==> z <= 25);\nloop invariant (x >= 50 ==> y >= -1);\nloop invariant (x >= 50 ==> z >= 25);\nloop invariant (x >= 50 ==> y <= 0);\nloop invariant (x >= 50 ==> z <= 25);\nloop invariant (x >= 50 ==> y >= -1);\nloop invariant (x >= 50 ==> z >= 25);\nloop invariant (x >= 50 ==> y <= 0);\nloop invariant (x >= 50 ==> z <= 25);\nloop invariant (x >= 50 ==> y >= -1);\nloop invariant (x >= 50 ==> z >= 25);\nloop invariant (x >= 50 ==> y <= 0);\nloop invariant (x >= 50 ==> z <= 25);\nloop invariant (x >= 50 ==> y >= -1);\nloop invariant (x >= 50 ==> z >= 25);\nloop invariant (x >= 50 ==> y <= 0);\nloop invariant (x >= 50 ==> z <= 25);\nloop invariant (x >= 50 ==> y >= -1);\nloop invariant (x >= 50 ==> z >= 25);\nloop invariant (x >= 50 ==> y <= 0);\nloop invariant (x >= 50 ==> z <= 25);\nloop invariant (x >= 50 ==> y >= -1);\nloop invariant (x >= 50 ==> z >= 25);\nloop invariant (x >= 50 ==> y <= 0);\nloop invariant (x >= 50 ==> z <= 25);\nloop invariant (x >= 50 ==> y >= -1);\nloop invariant (x >= 50 ==> z >= 25);\nloop invariant (x >= 50 ==> y <= 0);\nloop invariant (x >= 50 ==> z <= 25);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant 0 <= y <= 2;\nloop invariant 0 <= z <= 100;\nloop invariant x <= z;\nloop invariant y <= z;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant 0 <= y;\nloop invariant 0 <= z;\nloop invariant x < 100 || (y < 100 && z == 400);\nloop invariant x >= 100 || (y == 2 && z >= 25);\nloop invariant x >= 100 || (y == 2 && z <= 400 && z >= 200);\nloop invariant x >= 100 || (y == 2 && z <= 400 && z >= 200 && x >= 25);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant 0 <= y <= 2;\nloop invariant 0 <= z <= 400;\nloop invariant x == 100 ==> y == 2;\nloop invariant x == 100 ==> z == 400;\nloop invariant x <= 50 ==> y == 0;\nloop invariant x >= 25 ==> z == 400;\nloop invariant x < 25 ==> z == (x - 25) * 5;\nloop invariant x > 50 ==> y == 1;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant -50 <= y <= 50;\nloop invariant x + y >= 0;\nloop invariant z == (x + y)/5;\nloop invariant x + y >= 100;\nloop invariant x + y <= 25;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant (100 <= y ==> (y == 100));\nloop invariant (100 <= z ==> (z == 400));\nloop invariant (x <= 50 ==> (y == x+1));\nloop invariant (x > 50 ==> (y == 51-x));\nloop invariant (x < 25 ==> (z == x+1));\nloop invariant (25 <= x < 50 ==> (z == x+5));\nloop invariant (50 <= x < 75 ==> (z == 75+4*(x-50)));\nloop invariant (75 <= x <= 100 ==> (z == 400));\nloop invariant (x == 100 ==> (y == 2));\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant 0 <= y <= 2;\nloop invariant 0 <= z <= 400;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= y <= 2;\nloop invariant 0 <= z <= 5;\nloop invariant 0 <= x <= 100;\nloop invariant x >= 1;\nloop invariant x == y + z;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant 0 <= y <= 2;\nloop invariant -47 <= z <= 400;\nloop invariant (x < 50 ==> y == 0) || (x >= 50 ==> y == 1);\nloop invariant (x < 25 ==> z <= x + 24) && (x >= 25 ==> z >= 5*x + 5);\nloop invariant (x < 25 ==> y == x+1) && (x >= 25 ==> y == 2);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= y <= 2;\nloop invariant x >= 0;\nloop invariant x <= 100;\nloop invariant z >= 0;\nloop invariant z <= 400;\nloop invariant y >= x - 50;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant 0 <= y <= 2;\nloop invariant 0 <= z <= 400;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant -50 <= y <= 50;\nloop invariant 0 <= z <= 400;\nloop invariant (if x<=50 then y==x else y==x-1);\nloop invariant (if x<25 then z==x-25 else z==5*(x-25));\nloop invariant (if x==100 then z==400 else z<=400);\nloop invariant (if x==100 then y==2 else y<=2);\nloop invariant (if x==100 then x==100 else x<100);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= y <= 2;\nloop invariant 0 <= z <= 500;\nloop invariant 0 <= x <= 100;\nloop invariant if(x<=50) ==> y==x+1;\nloop invariant else ==> y==x-1;\nloop invariant if(x<25) ==> z==x+1;\nloop invariant else ==> z==5*x+1;\nloop invariant x==y+1 ==> z==5*y+1;\nloop invariant x==y-1 ==> z==y+1;\nloop invariant x==y ==> z==5*y+1;\nloop invariant x==y-2 ==> z==y+2;\nloop invariant x==y+2 ==> z==5*y+1;\n*/\n```"
            ],
            "completions": [
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant 0 <= y <= 2;\nloop invariant 0 <= z <= 400;\nloop invariant (x <= 50 ==> y <= 1);\nloop invariant (x > 50 ==> y >= -1);\nloop invariant (x < 25 ==> z <= 1);\nloop invariant (x >= 25 ==> z >= 5);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 100 is partially proven to be inductive.\nloop invariant 0 <= y <= 2 is established but not preserved.\nloop invariant 0 <= z <= 400 is established but not preserved.\nloop invariant (x <= 50 ==> y <= 1) is established but not preserved.\nloop invariant (x > 50 ==> y >= -1) is partially proven to be inductive.\nloop invariant (x < 25 ==> z <= 1) is established but not preserved.\nloop invariant (x >= 25 ==> z >= 5) is established but not preserved.\nAssertion z == 400: Unproven\nAssertion y == 2: Unproven\nAssertion x == 100: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n\tint x, y, z;\n\tx=0;y=0;z=0;\n\t/*@\nloop invariant i1: 0 <= x <= 100;\n\n\n\n\n\n\n*/\nwhile (x<100) {\n\t\tif(x<=50)\n               \t\ty=y+1;\n       \t\telse\n               \t\ty=y-1;\n       \n       \t\tif(x<25)\n               \t\tz=z+1;\n       \t\telse\n               \t\tz=z+5;\n       \n       \t\tx=x+1;\n\t}\n\t{;\n//@ assert(z==400);\n}\n\n\t{;\n//@ assert(y==2);\n}\n\n\t{;\n//@ assert(x==100);\n}\n\n\treturn 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 6,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant x >= 0;\nloop invariant x <= 100;\nloop invariant x == 100;\nloop invariant y == 2;\nloop invariant z == 400;\nloop invariant x == 100 ==> y == 2;\nloop invariant x == 100 ==> z == 400;\nloop invariant x == 100 ==> x == 100;\nloop invariant x == 100 ==> y == 2;\nloop invariant x == 100 ==> z == 400;\nloop invariant x == 100 ==> x == 100;\nloop invariant x == 100 ==> y == 2;\nloop invariant x == 100 ==> z == 400;\nloop invariant x == 100 ==> x == 100;\nloop invariant x == 100 ==> y == 2;\nloop invariant x == 100 ==> z == 400;\nloop invariant x == 100 ==> x == 100;\nloop invariant x == 100 ==> y == 2;\nloop invariant x == 100 ==> z == 400;\nloop invariant x == 100 ==> x == 100;\nloop invariant x == 100 ==> y == 2;\nloop invariant x == 100 ==> z == 400;\nloop invariant x == 100 ==> x == 100;\nloop invariant x == 100 ==> y == 2;\nloop invariant x == 100 ==> z == 400;\nloop invariant x == 100 ==> x == 100;\nloop invariant x == 100 ==> y == 2;\nloop invariant x == 100 ==> z == 400;\nloop invariant x == 100 ==> x == 100;\nloop invariant x == 100 ==> y == 2;\nloop invariant x == 100 ==> z == 400;\nloop invariant x == 100 ==> x == 100;\nloop invariant x == 100 ==> y == 2;\nloop invariant x == 100 ==> z == 400;\nloop invariant x == 100 ==> x == 100;\nloop invariant x == 100 ==> y == 2;\nloop invariant x == 100 ==> z == 400;\nloop invariant x == 100 ==> x == 100;\nloop invariant x == 100 ==> y == 2;\nloop invariant x == 100 ==> z == 400;\nloop invariant x == 100 ==> x == 100;\nloop invariant x == 100 ==> y == 2;\nloop invariant x == 100 ==> z == 400;\nloop invariant x == 100 ==> x == 100;\nloop invariant x == 100 ==> y == 2;\nloop invariant x == 100 ==> z == 400;\nloop invariant x == 100 ==> x == 100;\nloop invariant x == 100 ==> y == 2;\nloop invariant x == 100 ==> z == 400;\nloop invariant x == 100 ==> x == 100;\nloop invariant x == 100 ==> y == 2;\nloop invariant x == 100 ==> z == 400;\nloop invariant x == 100 ==> x == 100;\nloop invariant x == 100 ==> y == 2;\nloop invariant x == 100 ==> z == 400;\nloop invariant x == 100 ==> x == 100;\nloop invariant x == 100 ==> y == 2;\nloop invariant x == 100 ==> z == 400;\nloop invariant x == 100 ==> x == 100;\nloop invariant x == 100 ==> y == 2;\nloop invariant x == 100 ==> z == 400;\nloop invariant x == 100 ==> x == 100;\nloop invariant x == 100 ==> y == 2;\nloop invariant x == 100 ==> z == 400;\nloop invariant x == 100 ==> x == 100;\nloop invariant x == 100 ==> y == 2;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 100 is partially proven to be inductive.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant x <= 100 is partially proven to be inductive.\nloop invariant x == 100 is preserved but not established.\nloop invariant y == 2 is partially proven to be inductive.\nloop invariant z == 400 is partially proven to be inductive.\nloop invariant x == 100 ==> y == 2 is partially proven to be inductive.\nloop invariant x == 100 ==> z == 400 is partially proven to be inductive.\nloop invariant x == 100 ==> x == 100 is partially proven to be inductive.\nAssertion z == 400: Partially proven\nAssertion y == 2: Partially proven\nAssertion x == 100: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n\tint x, y, z;\n\tx=0;y=0;z=0;\n\t/*@\nloop invariant i1: 0 <= x <= 100;\nloop invariant i2: x >= 0;\nloop invariant i3: x <= 100;\n\n\n\n\n\nloop invariant i9: x == 100 ==> x == 100;\n*/\nwhile (x<100) {\n\t\tif(x<=50)\n               \t\ty=y+1;\n       \t\telse\n               \t\ty=y-1;\n       \n       \t\tif(x<25)\n               \t\tz=z+1;\n       \t\telse\n               \t\tz=z+5;\n       \n       \t\tx=x+1;\n\t}\n\t{;\n//@ assert(z==400);\n}\n\n\t{;\n//@ assert(y==2);\n}\n\n\t{;\n//@ assert(x==100);\n}\n\n\treturn 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 7,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant 0 <= y <= 2;\nloop invariant 0 <= z <= 250;\nloop invariant (x <= 50 ==> y <= 1);\nloop invariant (x >= 25 ==> z <= 400);\nloop invariant (x >= 50 ==> y >= -1);\nloop invariant (x < 25 ==> z >= 1);\nloop invariant (x < 50 ==> y >= 0);\nloop invariant (x < 50 ==> z >= 5);\nloop invariant (x >= 50 ==> y >= 0);\nloop invariant (x >= 50 ==> z >= 25);\nloop invariant (x >= 50 ==> y <= 0);\nloop invariant (x >= 50 ==> z <= 25);\nloop invariant (x >= 50 ==> y >= -1);\nloop invariant (x >= 50 ==> z >= 25);\nloop invariant (x >= 50 ==> y <= 0);\nloop invariant (x >= 50 ==> z <= 25);\nloop invariant (x >= 50 ==> y >= -1);\nloop invariant (x >= 50 ==> z >= 25);\nloop invariant (x >= 50 ==> y <= 0);\nloop invariant (x >= 50 ==> z <= 25);\nloop invariant (x >= 50 ==> y >= -1);\nloop invariant (x >= 50 ==> z >= 25);\nloop invariant (x >= 50 ==> y <= 0);\nloop invariant (x >= 50 ==> z <= 25);\nloop invariant (x >= 50 ==> y >= -1);\nloop invariant (x >= 50 ==> z >= 25);\nloop invariant (x >= 50 ==> y <= 0);\nloop invariant (x >= 50 ==> z <= 25);\nloop invariant (x >= 50 ==> y >= -1);\nloop invariant (x >= 50 ==> z >= 25);\nloop invariant (x >= 50 ==> y <= 0);\nloop invariant (x >= 50 ==> z <= 25);\nloop invariant (x >= 50 ==> y >= -1);\nloop invariant (x >= 50 ==> z >= 25);\nloop invariant (x >= 50 ==> y <= 0);\nloop invariant (x >= 50 ==> z <= 25);\nloop invariant (x >= 50 ==> y >= -1);\nloop invariant (x >= 50 ==> z >= 25);\nloop invariant (x >= 50 ==> y <= 0);\nloop invariant (x >= 50 ==> z <= 25);\nloop invariant (x >= 50 ==> y >= -1);\nloop invariant (x >= 50 ==> z >= 25);\nloop invariant (x >= 50 ==> y <= 0);\nloop invariant (x >= 50 ==> z <= 25);\nloop invariant (x >= 50 ==> y >= -1);\nloop invariant (x >= 50 ==> z >= 25);\nloop invariant (x >= 50 ==> y <= 0);\nloop invariant (x >= 50 ==> z <= 25);\nloop invariant (x >= 50 ==> y >= -1);\nloop invariant (x >= 50 ==> z >= 25);\nloop invariant (x >= 50 ==> y <= 0);\nloop invariant (x >= 50 ==> z <= 25);\nloop invariant (x >= 50 ==> y >= -1);\nloop invariant (x >= 50 ==> z >= 25);\nloop invariant (x >= 50 ==> y <= 0);\nloop invariant (x >= 50 ==> z <= 25);\nloop invariant (x >= 50 ==> y >= -1);\nloop invariant (x >= 50 ==> z >= 25);\nloop invariant (x >= 50 ==> y <= 0);\nloop invariant (x >= 50 ==> z <= 25);\nloop invariant (x >= 50 ==> y >= -1);\nloop invariant (x >= 50 ==> z >= 25);\nloop invariant (x >= 50 ==> y <= 0);\nloop invariant (x >= 50 ==> z <= 25);\nloop invariant (x >= 50 ==> y >= -1);\nloop invariant (x >= 50 ==> z >= 25);\nloop invariant (x >= 50 ==> y <= 0);\nloop invariant (x >= 50 ==> z <= 25);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 100 is partially proven to be inductive.\nloop invariant 0 <= y <= 2 is partially proven to be inductive.\nloop invariant 0 <= z <= 250 is partially proven to be inductive.\nloop invariant (x <= 50 ==> y <= 1) is partially proven to be inductive.\nloop invariant (x >= 25 ==> z <= 400) is partially proven to be inductive.\nloop invariant (x >= 50 ==> y >= -1) is partially proven to be inductive.\nloop invariant (x < 25 ==> z >= 1) is preserved but not established.\nloop invariant (x < 50 ==> y >= 0) is partially proven to be inductive.\nloop invariant (x < 50 ==> z >= 5) is partially proven to be inductive.\nloop invariant (x >= 50 ==> y >= 0) is partially proven to be inductive.\nloop invariant (x >= 50 ==> z >= 25) is partially proven to be inductive.\nloop invariant (x >= 50 ==> y <= 0) is partially proven to be inductive.\nloop invariant (x >= 50 ==> z <= 25) is partially proven to be inductive.\nAssertion z == 400: Partially proven\nAssertion y == 2: Partially proven\nAssertion x == 100: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n\tint x, y, z;\n\tx=0;y=0;z=0;\n\t/*@\nloop invariant i1: 0 <= x <= 100;\n\n\n\n\n\n\nloop invariant i8: (x < 50 ==> y >= 0);\n\n\n\n\n\n*/\nwhile (x<100) {\n\t\tif(x<=50)\n               \t\ty=y+1;\n       \t\telse\n               \t\ty=y-1;\n       \n       \t\tif(x<25)\n               \t\tz=z+1;\n       \t\telse\n               \t\tz=z+5;\n       \n       \t\tx=x+1;\n\t}\n\t{;\n//@ assert(z==400);\n}\n\n\t{;\n//@ assert(y==2);\n}\n\n\t{;\n//@ assert(x==100);\n}\n\n\treturn 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant 0 <= y <= 2;\nloop invariant 0 <= z <= 100;\nloop invariant x <= z;\nloop invariant y <= z;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\nloop invariant x <= z <= 100;\nloop invariant y <= z <= 100;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 100 is partially proven to be inductive.\nloop invariant 0 <= y <= 2 is established but not preserved.\nloop invariant 0 <= z <= 100 is established but not preserved.\nloop invariant x <= z is partially proven to be inductive.\nloop invariant y <= z is partially proven to be inductive.\nloop invariant x <= z <= 100 is partially proven to be inductive.\nloop invariant y <= z <= 100 is partially proven to be inductive.\nAssertion z == 400: Unproven\nAssertion y == 2: Partially proven\nAssertion x == 100: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n\tint x, y, z;\n\tx=0;y=0;z=0;\n\t/*@\nloop invariant i1: 0 <= x <= 100;\n\n\nloop invariant i4: x <= z;\nloop invariant i5: y <= z;\n\n\n*/\nwhile (x<100) {\n\t\tif(x<=50)\n               \t\ty=y+1;\n       \t\telse\n               \t\ty=y-1;\n       \n       \t\tif(x<25)\n               \t\tz=z+1;\n       \t\telse\n               \t\tz=z+5;\n       \n       \t\tx=x+1;\n\t}\n\t{;\n//@ assert(z==400);\n}\n\n\t{;\n//@ assert(y==2);\n}\n\n\t{;\n//@ assert(x==100);\n}\n\n\treturn 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 6,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant 0 <= y;\nloop invariant 0 <= z;\nloop invariant x < 100 || (y < 100 && z == 400);\nloop invariant x >= 100 || (y == 2 && z >= 25);\nloop invariant x >= 100 || (y == 2 && z <= 400 && z >= 200);\nloop invariant x >= 100 || (y == 2 && z <= 400 && z >= 200 && x >= 25);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 100 is partially proven to be inductive.\nloop invariant 0 <= y is partially proven to be inductive.\nloop invariant 0 <= z is partially proven to be inductive.\nloop invariant x < 100 || (y < 100 && z == 400) is partially proven to be inductive.\nloop invariant x >= 100 || (y == 2 && z >= 25) is preserved but not established.\nloop invariant x >= 100 || (y == 2 && z <= 400 && z >= 200) is partially proven to be inductive.\nloop invariant x >= 100 || (y == 2 && z <= 400 && z >= 200 && x >= 25) is partially proven to be inductive.\nAssertion z == 400: Partially proven\nAssertion y == 2: Partially proven\nAssertion x == 100: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n\tint x, y, z;\n\tx=0;y=0;z=0;\n\t/*@\nloop invariant i1: 0 <= x <= 100;\n\nloop invariant i3: 0 <= z;\n\n\n\n\n*/\nwhile (x<100) {\n\t\tif(x<=50)\n               \t\ty=y+1;\n       \t\telse\n               \t\ty=y-1;\n       \n       \t\tif(x<25)\n               \t\tz=z+1;\n       \t\telse\n               \t\tz=z+5;\n       \n       \t\tx=x+1;\n\t}\n\t{;\n//@ assert(z==400);\n}\n\n\t{;\n//@ assert(y==2);\n}\n\n\t{;\n//@ assert(x==100);\n}\n\n\treturn 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 6,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant 0 <= y <= 2;\nloop invariant 0 <= z <= 400;\nloop invariant x == 100 ==> y == 2;\nloop invariant x == 100 ==> z == 400;\nloop invariant x <= 50 ==> y == 0;\nloop invariant x >= 25 ==> z == 400;\nloop invariant x < 25 ==> z == (x - 25) * 5;\nloop invariant x > 50 ==> y == 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 100 is partially proven to be inductive.\nloop invariant 0 <= y <= 2 is partially proven to be inductive.\nloop invariant 0 <= z <= 400 is partially proven to be inductive.\nloop invariant x == 100 ==> y == 2 is partially proven to be inductive.\nloop invariant x == 100 ==> z == 400 is partially proven to be inductive.\nloop invariant x <= 50 ==> y == 0 is partially proven to be inductive.\nloop invariant x >= 25 ==> z == 400 is partially proven to be inductive.\nloop invariant x < 25 ==> z == (x - 25) * 5 is preserved but not established.\nloop invariant x > 50 ==> y == 1 is partially proven to be inductive.\nAssertion z == 400: Partially proven\nAssertion y == 2: Partially proven\nAssertion x == 100: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n\tint x, y, z;\n\tx=0;y=0;z=0;\n\t/*@\nloop invariant i1: 0 <= x <= 100;\n\n\n\n\n\n\n\n\n*/\nwhile (x<100) {\n\t\tif(x<=50)\n               \t\ty=y+1;\n       \t\telse\n               \t\ty=y-1;\n       \n       \t\tif(x<25)\n               \t\tz=z+1;\n       \t\telse\n               \t\tz=z+5;\n       \n       \t\tx=x+1;\n\t}\n\t{;\n//@ assert(z==400);\n}\n\n\t{;\n//@ assert(y==2);\n}\n\n\t{;\n//@ assert(x==100);\n}\n\n\treturn 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant -50 <= y <= 50;\nloop invariant x + y >= 0;\nloop invariant z == (x + y)/5;\nloop invariant x + y >= 100;\nloop invariant x + y <= 25;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 100 is partially proven to be inductive.\nloop invariant -50 <= y <= 50 is partially proven to be inductive.\nloop invariant x + y >= 0 is partially proven to be inductive.\nloop invariant z == (x + y)/5 is partially proven to be inductive.\nloop invariant x + y >= 100 is preserved but not established.\nloop invariant x + y <= 25 is partially proven to be inductive.\nAssertion z == 400: Partially proven\nAssertion y == 2: Partially proven\nAssertion x == 100: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n\tint x, y, z;\n\tx=0;y=0;z=0;\n\t/*@\nloop invariant i1: 0 <= x <= 100;\n\nloop invariant i3: x + y >= 0;\n\n\n\n*/\nwhile (x<100) {\n\t\tif(x<=50)\n               \t\ty=y+1;\n       \t\telse\n               \t\ty=y-1;\n       \n       \t\tif(x<25)\n               \t\tz=z+1;\n       \t\telse\n               \t\tz=z+5;\n       \n       \t\tx=x+1;\n\t}\n\t{;\n//@ assert(z==400);\n}\n\n\t{;\n//@ assert(y==2);\n}\n\n\t{;\n//@ assert(x==100);\n}\n\n\treturn 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 7,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant (100 <= y ==> (y == 100));\nloop invariant (100 <= z ==> (z == 400));\nloop invariant (x <= 50 ==> (y == x+1));\nloop invariant (x > 50 ==> (y == 51-x));\nloop invariant (x < 25 ==> (z == x+1));\nloop invariant (25 <= x < 50 ==> (z == x+5));\nloop invariant (50 <= x < 75 ==> (z == 75+4*(x-50)));\nloop invariant (75 <= x <= 100 ==> (z == 400));\nloop invariant (x == 100 ==> (y == 2));\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 100 is partially proven to be inductive.\nloop invariant (100 <= y ==> (y == 100)) is partially proven to be inductive.\nloop invariant (100 <= z ==> (z == 400)) is partially proven to be inductive.\nloop invariant (x <= 50 ==> (y == x+1)) is preserved but not established.\nloop invariant (x > 50 ==> (y == 51-x)) is partially proven to be inductive.\nloop invariant (x < 25 ==> (z == x+1)) is partially proven to be inductive.\nloop invariant (25 <= x < 50 ==> (z == x+5)) is partially proven to be inductive.\nloop invariant (50 <= x < 75 ==> (z == 75+4*(x-50))) is partially proven to be inductive.\nloop invariant (75 <= x <= 100 ==> (z == 400)) is partially proven to be inductive.\nloop invariant (x == 100 ==> (y == 2)) is partially proven to be inductive.\nAssertion z == 400: Partially proven\nAssertion y == 2: Partially proven\nAssertion x == 100: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n\tint x, y, z;\n\tx=0;y=0;z=0;\n\t/*@\nloop invariant i1: 0 <= x <= 100;\n\n\n\n\n\n\n\n\n\n*/\nwhile (x<100) {\n\t\tif(x<=50)\n               \t\ty=y+1;\n       \t\telse\n               \t\ty=y-1;\n       \n       \t\tif(x<25)\n               \t\tz=z+1;\n       \t\telse\n               \t\tz=z+5;\n       \n       \t\tx=x+1;\n\t}\n\t{;\n//@ assert(z==400);\n}\n\n\t{;\n//@ assert(y==2);\n}\n\n\t{;\n//@ assert(x==100);\n}\n\n\treturn 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant 0 <= y <= 2;\nloop invariant 0 <= z <= 400;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 100 is partially proven to be inductive.\nloop invariant 0 <= y <= 2 is established but not preserved.\nloop invariant 0 <= z <= 400 is established but not preserved.\nAssertion z == 400: Unproven\nAssertion y == 2: Unproven\nAssertion x == 100: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n\tint x, y, z;\n\tx=0;y=0;z=0;\n\t/*@\nloop invariant i1: 0 <= x <= 100;\n\n\n*/\nwhile (x<100) {\n\t\tif(x<=50)\n               \t\ty=y+1;\n       \t\telse\n               \t\ty=y-1;\n       \n       \t\tif(x<25)\n               \t\tz=z+1;\n       \t\telse\n               \t\tz=z+5;\n       \n       \t\tx=x+1;\n\t}\n\t{;\n//@ assert(z==400);\n}\n\n\t{;\n//@ assert(y==2);\n}\n\n\t{;\n//@ assert(x==100);\n}\n\n\treturn 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= y <= 2;\nloop invariant 0 <= z <= 5;\nloop invariant 0 <= x <= 100;\nloop invariant x >= 1;\nloop invariant x == y + z;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= y <= 2 is partially proven to be inductive.\nloop invariant 0 <= z <= 5 is partially proven to be inductive.\nloop invariant 0 <= x <= 100 is partially proven to be inductive.\nloop invariant x >= 1 is preserved but not established.\nloop invariant x == y + z is partially proven to be inductive.\nAssertion z == 400: Partially proven\nAssertion y == 2: Partially proven\nAssertion x == 100: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n\tint x, y, z;\n\tx=0;y=0;z=0;\n\t/*@\n\n\nloop invariant i3: 0 <= x <= 100;\n\n\n*/\nwhile (x<100) {\n\t\tif(x<=50)\n               \t\ty=y+1;\n       \t\telse\n               \t\ty=y-1;\n       \n       \t\tif(x<25)\n               \t\tz=z+1;\n       \t\telse\n               \t\tz=z+5;\n       \n       \t\tx=x+1;\n\t}\n\t{;\n//@ assert(z==400);\n}\n\n\t{;\n//@ assert(y==2);\n}\n\n\t{;\n//@ assert(x==100);\n}\n\n\treturn 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant 0 <= y <= 2;\nloop invariant -47 <= z <= 400;\nloop invariant (x < 50 ==> y == 0) || (x >= 50 ==> y == 1);\nloop invariant (x < 25 ==> z <= x + 24) && (x >= 25 ==> z >= 5*x + 5);\nloop invariant (x < 25 ==> y == x+1) && (x >= 25 ==> y == 2);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 100 is partially proven to be inductive.\nloop invariant 0 <= y <= 2 is partially proven to be inductive.\nloop invariant -47 <= z <= 400 is partially proven to be inductive.\nloop invariant (x < 50 ==> y == 0) || (x >= 50 ==> y == 1) is partially proven to be inductive.\nloop invariant (x < 25 ==> z <= x + 24) && (x >= 25 ==> z >= 5*x + 5) is partially proven to be inductive.\nloop invariant (x < 25 ==> y == x+1) && (x >= 25 ==> y == 2) is preserved but not established.\nAssertion z == 400: Partially proven\nAssertion y == 2: Partially proven\nAssertion x == 100: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n\tint x, y, z;\n\tx=0;y=0;z=0;\n\t/*@\nloop invariant i1: 0 <= x <= 100;\n\n\nloop invariant i4: (x < 50 ==> y == 0) || (x >= 50 ==> y == 1);\n\n\n*/\nwhile (x<100) {\n\t\tif(x<=50)\n               \t\ty=y+1;\n       \t\telse\n               \t\ty=y-1;\n       \n       \t\tif(x<25)\n               \t\tz=z+1;\n       \t\telse\n               \t\tz=z+5;\n       \n       \t\tx=x+1;\n\t}\n\t{;\n//@ assert(z==400);\n}\n\n\t{;\n//@ assert(y==2);\n}\n\n\t{;\n//@ assert(x==100);\n}\n\n\treturn 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= y <= 2;\nloop invariant x >= 0;\nloop invariant x <= 100;\nloop invariant z >= 0;\nloop invariant z <= 400;\nloop invariant y >= x - 50;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= y <= 2 is established but not preserved.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant x <= 100 is partially proven to be inductive.\nloop invariant z >= 0 is partially proven to be inductive.\nloop invariant z <= 400 is established but not preserved.\nloop invariant y >= x - 50 is established but not preserved.\nAssertion z == 400: Partially proven\nAssertion y == 2: Partially proven\nAssertion x == 100: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n\tint x, y, z;\n\tx=0;y=0;z=0;\n\t/*@\n\nloop invariant i2: x >= 0;\nloop invariant i3: x <= 100;\nloop invariant i4: z >= 0;\n\n\n*/\nwhile (x<100) {\n\t\tif(x<=50)\n               \t\ty=y+1;\n       \t\telse\n               \t\ty=y-1;\n       \n       \t\tif(x<25)\n               \t\tz=z+1;\n       \t\telse\n               \t\tz=z+5;\n       \n       \t\tx=x+1;\n\t}\n\t{;\n//@ assert(z==400);\n}\n\n\t{;\n//@ assert(y==2);\n}\n\n\t{;\n//@ assert(x==100);\n}\n\n\treturn 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant 0 <= y <= 2;\nloop invariant 0 <= z <= 400;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 100 is partially proven to be inductive.\nloop invariant 0 <= y <= 2 is established but not preserved.\nloop invariant 0 <= z <= 400 is established but not preserved.\nAssertion z == 400: Unproven\nAssertion y == 2: Unproven\nAssertion x == 100: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n\tint x, y, z;\n\tx=0;y=0;z=0;\n\t/*@\nloop invariant i1: 0 <= x <= 100;\n\n\n*/\nwhile (x<100) {\n\t\tif(x<=50)\n               \t\ty=y+1;\n       \t\telse\n               \t\ty=y-1;\n       \n       \t\tif(x<25)\n               \t\tz=z+1;\n       \t\telse\n               \t\tz=z+5;\n       \n       \t\tx=x+1;\n\t}\n\t{;\n//@ assert(z==400);\n}\n\n\t{;\n//@ assert(y==2);\n}\n\n\t{;\n//@ assert(x==100);\n}\n\n\treturn 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 8,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant -50 <= y <= 50;\nloop invariant 0 <= z <= 400;\nloop invariant (if x<=50 then y==x else y==x-1);\nloop invariant (if x<25 then z==x-25 else z==5*(x-25));\nloop invariant (if x==100 then z==400 else z<=400);\nloop invariant (if x==100 then y==2 else y<=2);\nloop invariant (if x==100 then x==100 else x<100);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 14: unexpected token 'x'",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n\tint x, y, z;\n\tx=0;y=0;z=0;\n\t/*@\nloop invariant i1: 0 <= x <= 100;\n\n\n\n\n\n\n\n*/\nwhile (x<100) {\n\t\tif(x<=50)\n               \t\ty=y+1;\n       \t\telse\n               \t\ty=y-1;\n       \n       \t\tif(x<25)\n               \t\tz=z+1;\n       \t\telse\n               \t\tz=z+5;\n       \n       \t\tx=x+1;\n\t}\n\t{;\n//@ assert(z==400);\n}\n\n\t{;\n//@ assert(y==2);\n}\n\n\t{;\n//@ assert(x==100);\n}\n\n\treturn 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 9,
                    "annotations": "```\n/*@\nloop invariant 0 <= y <= 2;\nloop invariant 0 <= z <= 500;\nloop invariant 0 <= x <= 100;\nloop invariant if(x<=50) ==> y==x+1;\nloop invariant else ==> y==x-1;\nloop invariant if(x<25) ==> z==x+1;\nloop invariant else ==> z==5*x+1;\nloop invariant x==y+1 ==> z==5*y+1;\nloop invariant x==y-1 ==> z==y+1;\nloop invariant x==y ==> z==5*y+1;\nloop invariant x==y-2 ==> z==y+2;\nloop invariant x==y+2 ==> z==5*y+1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 14: unexpected token '('",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n\tint x, y, z;\n\tx=0;y=0;z=0;\n\t/*@\n\n\nloop invariant i3: 0 <= x <= 100;\n\n\n\n\n\n\n\n\n\n*/\nwhile (x<100) {\n\t\tif(x<=50)\n               \t\ty=y+1;\n       \t\telse\n               \t\ty=y-1;\n       \n       \t\tif(x<25)\n               \t\tz=z+1;\n       \t\telse\n               \t\tz=z+5;\n       \n       \t\tx=x+1;\n\t}\n\t{;\n//@ assert(z==400);\n}\n\n\t{;\n//@ assert(y==2);\n}\n\n\t{;\n//@ assert(x==100);\n}\n\n\treturn 0;\n}",
                    "checker_output_after_prune": false
                }
            ],
            "checker_output_for_combined_annotations": false,
            "checker_message_for_combined_annotations": "Annotation error on line 75: unexpected token 'x'",
            "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n\tint x, y, z;\n\tx=0;y=0;z=0;\n\t/*@\nloop invariant i1: 0 <= x <= 100;\nloop invariant i2: 0 <= y <= 2;\nloop invariant i3: 0 <= z <= 400;\nloop invariant i4: (x <= 50 ==> y <= 1);\nloop invariant i5: (x > 50 ==> y >= -1);\nloop invariant i6: (x < 25 ==> z <= 1);\nloop invariant i7: (x >= 25 ==> z >= 5);\nloop invariant i8: x >= 0;\nloop invariant i9: x <= 100;\nloop invariant i10: x == 100;\nloop invariant i11: y == 2;\nloop invariant i12: z == 400;\nloop invariant i13: x == 100 ==> y == 2;\nloop invariant i14: x == 100 ==> z == 400;\nloop invariant i15: x == 100 ==> x == 100;\nloop invariant i16: 0 <= z <= 250;\nloop invariant i17: (x >= 25 ==> z <= 400);\nloop invariant i18: (x >= 50 ==> y >= -1);\nloop invariant i19: (x < 25 ==> z >= 1);\nloop invariant i20: (x < 50 ==> y >= 0);\nloop invariant i21: (x < 50 ==> z >= 5);\nloop invariant i22: (x >= 50 ==> y >= 0);\nloop invariant i23: (x >= 50 ==> z >= 25);\nloop invariant i24: (x >= 50 ==> y <= 0);\nloop invariant i25: (x >= 50 ==> z <= 25);\nloop invariant i26: 0 <= z <= 100;\nloop invariant i27: x <= z;\nloop invariant i28: y <= z;\nloop invariant i29: x <= z <= 100;\nloop invariant i30: y <= z <= 100;\nloop invariant i31: 0 <= y;\nloop invariant i32: 0 <= z;\nloop invariant i33: x < 100 || (y < 100 && z == 400);\nloop invariant i34: x >= 100 || (y == 2 && z >= 25);\nloop invariant i35: x >= 100 || (y == 2 && z <= 400 && z >= 200);\nloop invariant i36: x >= 100 || (y == 2 && z <= 400 && z >= 200 && x >= 25);\nloop invariant i37: x <= 50 ==> y == 0;\nloop invariant i38: x >= 25 ==> z == 400;\nloop invariant i39: x < 25 ==> z == (x - 25) * 5;\nloop invariant i40: x > 50 ==> y == 1;\nloop invariant i41: -50 <= y <= 50;\nloop invariant i42: x + y >= 0;\nloop invariant i43: z == (x + y)/5;\nloop invariant i44: x + y >= 100;\nloop invariant i45: x + y <= 25;\nloop invariant i46: (100 <= y ==> (y == 100));\nloop invariant i47: (100 <= z ==> (z == 400));\nloop invariant i48: (x <= 50 ==> (y == x+1));\nloop invariant i49: (x > 50 ==> (y == 51-x));\nloop invariant i50: (x < 25 ==> (z == x+1));\nloop invariant i51: (25 <= x < 50 ==> (z == x+5));\nloop invariant i52: (50 <= x < 75 ==> (z == 75+4*(x-50)));\nloop invariant i53: (75 <= x <= 100 ==> (z == 400));\nloop invariant i54: (x == 100 ==> (y == 2));\nloop invariant i55: 0 <= z <= 5;\nloop invariant i56: x >= 1;\nloop invariant i57: x == y + z;\nloop invariant i58: -47 <= z <= 400;\nloop invariant i59: (x < 50 ==> y == 0) || (x >= 50 ==> y == 1);\nloop invariant i60: (x < 25 ==> z <= x + 24) && (x >= 25 ==> z >= 5*x + 5);\nloop invariant i61: (x < 25 ==> y == x+1) && (x >= 25 ==> y == 2);\nloop invariant i62: z >= 0;\nloop invariant i63: z <= 400;\nloop invariant i64: y >= x - 50;\nloop invariant i65: (if x<=50 then y==x else y==x-1);\nloop invariant i66: (if x<25 then z==x-25 else z==5*(x-25));\nloop invariant i67: (if x==100 then z==400 else z<=400);\nloop invariant i68: (if x==100 then y==2 else y<=2);\nloop invariant i69: (if x==100 then x==100 else x<100);\nloop invariant i70: 0 <= z <= 500;\nloop invariant i71: if(x<=50) ==> y==x+1;\nloop invariant i72: else ==> y==x-1;\nloop invariant i73: if(x<25) ==> z==x+1;\nloop invariant i74: else ==> z==5*x+1;\nloop invariant i75: x==y+1 ==> z==5*y+1;\nloop invariant i76: x==y-1 ==> z==y+1;\nloop invariant i77: x==y ==> z==5*y+1;\nloop invariant i78: x==y-2 ==> z==y+2;\nloop invariant i79: x==y+2 ==> z==5*y+1;\n*/\nwhile (x<100) {\n\t\tif(x<=50)\n               \t\ty=y+1;\n       \t\telse\n               \t\ty=y-1;\n       \n       \t\tif(x<25)\n               \t\tz=z+1;\n       \t\telse\n               \t\tz=z+5;\n       \n       \t\tx=x+1;\n\t}\n\t{;\n//@ assert(z==400);\n}\n\n\t{;\n//@ assert(y==2);\n}\n\n\t{;\n//@ assert(x==100);\n}\n\n\treturn 0;\n}",
            "combined_annotation_num_solver_calls": 40,
            "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n\tint x, y, z;\n\tx=0;y=0;z=0;\n\t/*@\nloop invariant i1: 0 <= x <= 100;\n\n\n\n\n\nloop invariant i7: (x >= 25 ==> z >= 5);\nloop invariant i8: x >= 0;\nloop invariant i9: x <= 100;\n\n\n\n\n\nloop invariant i15: x == 100 ==> x == 100;\n\n\n\n\nloop invariant i20: (x < 50 ==> y >= 0);\n\n\nloop invariant i23: (x >= 50 ==> z >= 25);\n\n\n\nloop invariant i27: x <= z;\nloop invariant i28: y <= z;\n\n\n\nloop invariant i32: 0 <= z;\n\n\n\n\n\n\n\n\n\nloop invariant i42: x + y >= 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i59: (x < 50 ==> y == 0) || (x >= 50 ==> y == 1);\n\n\nloop invariant i62: z >= 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (x<100) {\n\t\tif(x<=50)\n               \t\ty=y+1;\n       \t\telse\n               \t\ty=y-1;\n       \n       \t\tif(x<25)\n               \t\tz=z+1;\n       \t\telse\n               \t\tz=z+5;\n       \n       \t\tx=x+1;\n\t}\n\t{;\n//@ assert(z==400);\n}\n\n\t{;\n//@ assert(y==2);\n}\n\n\t{;\n//@ assert(x==100);\n}\n\n\treturn 0;\n}",
            "checker_output_after_prune": false
        },
        {
            "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/42.c",
            "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main()\n{\n  int flag = unknown1();\n  int x = 1;\n  int y = 1;\n  int a;\n  \n  if(flag)\n    a = 0;\n  else\n    a = 1;\n\n  while(unknown1()){\n    if(flag)\n    {\n      a = x+y;\n      x++;\n    }\n    else\n    {\n      a = x+y+1;\n      y++;\n    }\n    if(a%2==1)\n      y++;\n    else\n      x++;\t  \n  }\n  \n  if(flag)\n    a++;\n  {;\n//@ assert(a%2==1);\n}\n\n}",
            "success": false,
            "annotation_blocks": [
                "```\n/*@\nloop invariant 0 <= a <= 1 and flag == 1 ==> a == 1;\nloop invariant 0 <= a <= 1 and flag == 0 ==> a == 0;\nloop invariant x >= 1 and y >= 1 and a >= 1 and flag == 1 ==> a == x + y;\nloop invariant x >= 1 and y >= 1 and a >= 1 and flag == 0 ==> a == x + y + 1;\nloop invariant x >= 1 and y >= 1 and a >= 1 and flag == 1 ==> x >= y;\nloop invariant x >= 1 and y >= 1 and a >= 1 and flag == 0 ==> x >= y + 1;\nloop invariant x >= 1 and y >= 1 and a >= 1 and flag == 1 ==> x <= a;\nloop invariant x >= 1 and y >= 1 and a >= 1 and flag == 0 ==> x <= a - 1;\nloop invariant flag == 1 ==> x >= 1 and y >= 1 and a >= 1 and x >= y and x <= a;\nloop invariant flag == 0 ==> x >= 1 and y >= 1 and a >= 1 and x >= y + 1 and x <= a - 1;\nloop invariant flag == 1 ==> x >= 1 and y >= 1 and a >= 1 and x >= y and x <= a;\nloop invariant flag == 0 ==> x >= 1 and y >= 1 and a >= 1 and x >= y + 1 and x <= a - 1;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "```\n/*@\nloop invariant x >= y;\nloop invariant flag ==> a = x+y;\nloop invariant !flag ==> a = x+y+1;\nloop invariant x >= 1;\nloop invariant y >= 1;\nloop invariant x <= (a - y);\nloop invariant y <= (a - x);\nloop invariant flag ==> a > 1;\nloop invariant !flag ==> a >= 2;\nloop invariant flag ==> x > 1;\nloop invariant !flag ==> x >= 2;\nloop invariant flag ==> y > 1;\nloop invariant !flag ==> y >= 2;\nloop invariant flag ==> a > 1;\nloop invariant !flag ==> a >= 2;\nloop invariant x = x + 1 ==> a = x + y;\nloop invariant x = x + 1 ==> y = y + 1;\nloop invariant x = x + 1 ==> a = x + y + 1;\nloop invariant x = x + 1 ==> y = y + 1;\nloop invariant y = y + 1 ==> a = x + y;\nloop invariant y = y + 1 ==> x = x + 1;\nloop invariant y = y + 1 ==> a = x + y + 1;\nloop invariant y = y + 1 ==> x = x + 1;\nloop invariant a%2==1 ==> y = y + 1;\nloop invariant a%2==0 ==> x = x + 1;\nloop invariant flag ==> x = x + 1 ==> a = x + y;\nloop invariant flag ==> x = x + 1 ==> y = y + 1;\nloop invariant flag ==> x = x + 1 ==> a = x + y + 1;\nloop invariant flag ==> x = x + 1 ==> y = y + 1;\nloop invariant flag ==> y = y + 1 ==> a = x + y;\nloop invariant flag ==> y = y + 1 ==> x = x + 1;\nloop invariant flag ==> y = y + 1 ==> a = x + y + 1;\nloop invariant flag ==> y = y + 1 ==> x = x + 1;\nloop invariant !flag ==> x = x + 1 ==> a = x + y;\nloop invariant !flag ==> x = x + 1 ==> y = y + 1;\nloop invariant !flag ==> x = x + 1 ==> a = x + y + 1;\nloop invariant !flag ==> x = x + 1 ==> y = y + 1;\nloop invariant !flag ==> y = y + 1 ==> a = x + y;\nloop invariant !flag ==> y = y + 1 ==> x = x + 1;\nloop invariant !flag ==> y = y + 1 ==> a = x + y + 1;\nloop invariant !flag ==> y = y + 1 ==> x = x + 1;\nloop invariant flag ==> x = x + 1 ==> a = x + y;\nloop invariant flag ==> x = x + 1 ==> y = y + 1;\nloop invariant flag ==> x = x + 1 ==> a = x + y + 1;\nloop invariant flag ==> x = x + 1 ==> y = y + 1;\nloop invariant flag ==> y = y + 1 ==> a = x + y;\nloop invariant flag ==> y = y + 1 ==> x = x + 1;\nloop invariant flag ==> y = y + 1 ==> a = x + y + 1;\nloop invariant flag ==> y = y + 1 ==> x = x + 1;\nloop invariant !flag ==> x = x + 1 ==> a = x + y;\nloop invariant !flag ==> x = x + 1 ==> y = y + 1;\nloop invariant !flag ==> x = x + 1 ==> a = x + y + 1;\nloop invariant !flag ==> x = x + 1 ==> y = y + 1;\nloop invariant !flag ==> y = y + 1 ==> a = x + y;\nloop invariant !flag ==> y = y + 1 ==> x = x + 1;\nloop invariant !flag ==> y = y + 1 ==> a = x + y + 1;\nloop invariant !flag ==> y = y + 1 ==> x = x + 1;\nloop invariant flag ==> x = x + 1 ==> a = x + y;\nloop invariant flag ==> x = x + 1 ==> y = y + 1;\nloop invariant flag ==> x = x + 1 ==> a = x + y + 1;\nloop invariant flag ==> x = x + 1 ==> y = y + 1;\nloop invariant flag ==> y = y + 1 ==> a = x + y;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= unknown2();\nloop invariant 1 <= y <= unknown2();\nloop invariant a >= 1;\nloop invariant a <= unknown2();\nloop invariant a%2==1 ==> x-a%2==1;\nloop invariant a%2==0 ==> x-a%2==0;\nloop invariant a%2==1 ==> y-a%2==2;\nloop invariant a%2==0 ==> y-a%2==1;\nloop invariant unknown1() ==> x==y;\nloop invariant !unknown1() ==> x!=y;\nloop invariant unknown1() ==> x<=a;\nloop invariant !unknown1() ==> x>=a;\nloop invariant unknown1() ==> y<=a;\nloop invariant !unknown1() ==> y>=a;\nloop invariant unknown1() ==> flag==1;\nloop invariant !unknown1() ==> flag==0;\nloop invariant unknown1() ==> a%2==1;\nloop invariant !unknown1() ==> a%2==0;\nloop invariant unknown1() ==> x%2==0;\nloop invariant !unknown1() ==> x%2==1;\nloop invariant unknown1() ==> y%2==1;\nloop invariant !unknown1() ==> y%2==0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= flag <= 1;\nloop invariant 0 <= x <= unknown1();\nloop invariant 0 <= y <= unknown1();\nloop invariant 1 <= a <= unknown1();\nloop invariant if flag then x+y < unknown1() else x+y+1 < unknown1();\nloop invariant if flag then x+y < unknown1() else x+y+1 < unknown1();\nloop invariant if a%2==1 then y < unknown1() else x < unknown1();\nloop invariant if a%2==1 then y < unknown1() else x < unknown1();\nloop invariant if flag then x+y < unknown1() else x+y+1 < unknown1();\nloop invariant if flag then x+y < unknown1() else x+y+1 < unknown1();\nloop invariant if a%2==1 then y < unknown1() else x < unknown1();\nloop invariant if a%2==1 then y < unknown1() else x < unknown1();\nloop invariant if flag then x+y < unknown1() else x+y+1 < unknown1();\nloop invariant if flag then x+y < unknown1() else x+y+1 < unknown1();\nloop invariant if a%2==1 then y < unknown1() else x < unknown1();\nloop invariant if a%2==1 then y < unknown1() else x < unknown1();\nloop invariant if flag then x+y < unknown1() else x+y+1 < unknown1();\nloop invariant if flag then x+y < unknown1() else x+y+1 < unknown1();\nloop invariant if a%2==1 then y < unknown1() else x < unknown1();\nloop invariant if a%2==1 then y < unknown1() else x < unknown1();\nloop invariant if flag then x+y < unknown1() else x+y+1 < unknown1();\nloop invariant if flag then x+y < unknown1() else x+y+1 < unknown1();\nloop invariant if a%2==1 then y < unknown1() else x < unknown1();\nloop invariant if a%2==1 then y < unknown1() else x < unknown1();\nloop invariant if flag then x+y < unknown1() else x+y+1 < unknown1();\nloop invariant if flag then x+y < unknown1() else x+y+1 < unknown1();\nloop invariant if a%2==1 then y < unknown1() else x < unknown1();\nloop invariant if a%2==1 then y < unknown1() else x < unknown1();\nloop invariant if flag then x+y < unknown1() else x+y+1 < unknown1();\nloop invariant if flag then x+y < unknown1() else x+y+1 < unknown1();\nloop invariant if a%2==1 then y < unknown1() else x < unknown1();\nloop invariant if a%2==1 then y < unknown1() else x < unknown1();\nloop invariant if flag then x+y < unknown1() else x+y+1 < unknown1();\nloop invariant if flag then x+y < unknown1() else x+y+1 < unknown1();\nloop invariant if a%2==1 then y < unknown1() else x < unknown1();\nloop invariant if a%2==1 then y < unknown1() else x < unknown1();\nloop invariant if flag then x+y < unknown1() else x+y+1 < unknown1();\nloop invariant if flag then x+y < unknown1() else x+y+1 < unknown1();\nloop invariant if a%2==1 then y < unknown1() else x < unknown1();\nloop invariant if a%2==1 then y < unknown1() else x < unknown1();\nloop invariant if flag then x+y < unknown1() else x+y+1 < unknown1();\nloop invariant if flag then x+y < unknown1() else x+y+1 < unknown1();\nloop invariant if a%2==1 then y < unknown1() else x < unknown1();\nloop invariant if a%2==1 then y < unknown1() else x < unknown1();\nloop invariant if flag then x+y < unknown1() else x+y+1 < unknown1();\nloop invariant if flag then x+y < unknown1() else x+y+1 < unknown1();\nloop invariant if a%2==1 then y < unknown1() else x < unknown1();\nloop invariant if a%2==1 then y < unknown1() else x < unknown1();\nloop invariant if flag then x+y < unknown1() else x+y+1 < unknown1();\nloop invariant if flag then x+y < unknown1() else x+y+1 < unknown1();\nloop invariant if a%2==1 then y < unknown1() else x < unknown1();\nloop invariant if a%2==1 then y < unknown1() else x < unknown1();\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 1 + y;\nloop invariant 0 <= y <= 1 + x;\nloop invariant a >= x + y;\nloop invariant a <= x + y + 1;\nloop invariant (a + 1) % 2 == 0 ==> x < y;\nloop invariant (a + 1) % 2 == 0 ==> a <= x + y;\nloop invariant (a + 1) % 2 == 0 ==> a >= x + y + 1;\nloop invariant (a + 1) % 2 == 0 ==> y < x;\nloop invariant (a + 1) % 2 == 0 ==> y == x + 1;\n*/\n```",
                "```\n/*@\nloop invariant 1 <= x <= 2;\nloop invariant 1 <= y <= 2;\nloop invariant 1 <= a <= 3;\nloop invariant x <= y;\nloop invariant x == y ==> a == x + y;\nloop invariant x != y ==> a == x + y + 1;\nloop invariant a % 2 == 1 ==> x == y;\nloop invariant a % 2 == 0 ==> x != y;\nloop invariant flag ==> a == x + y + 1;\nloop invariant !flag ==> a == x + y;\nloop invariant flag ==> x <= y;\nloop invariant !flag ==> x < y;\nloop invariant y >= 1;\nloop invariant y <= 2;\nloop invariant a >= 1;\nloop invariant a <= 3;\nloop invariant a % 2 == 1 ==> y == x;\nloop invariant a % 2 == 0 ==> y == x + 1;\nloop invariant flag ==> x == y;\nloop invariant !flag ==> x < y;\nloop invariant y >= 1;\nloop invariant y <= 2;\nloop invariant a >= 1;\nloop invariant a <= 3;\nloop invariant a % 2 == 1 ==> y == x;\nloop invariant a % 2 == 0 ==> y == x + 1;\nloop invariant flag ==> x == y;\nloop invariant !flag ==> x < y;\nloop invariant y >= 1;\nloop invariant y <= 2;\nloop invariant a >= 1;\nloop invariant a <= 3;\nloop invariant a % 2 == 1 ==> y == x;\nloop invariant a % 2 == 0 ==> y == x + 1;\nloop invariant flag ==> x == y;\nloop invariant !flag ==> x < y;\nloop invariant y >= 1;\nloop invariant y <= 2;\nloop invariant a >= 1;\nloop invariant a <= 3;\nloop invariant a % 2 == 1 ==> y == x;\nloop invariant a % 2 == 0 ==> y == x + 1;\nloop invariant flag ==> x == y;\nloop invariant !flag ==> x < y;\nloop invariant y >= 1;\nloop invariant y <= 2;\nloop invariant a >= 1;\nloop invariant a <= 3;\nloop invariant a % 2 == 1 ==> y == x;\nloop invariant a % 2 == 0 ==> y == x + 1;\nloop invariant flag ==> x == y;\nloop invariant !flag ==> x < y;\nloop invariant y >= 1;\nloop invariant y <= 2;\nloop invariant a >= 1;\nloop invariant a <= 3;\nloop invariant a % 2 == 1 ==> y == x;\nloop invariant a % 2 == 0 ==> y == x + 1;\nloop invariant flag ==> x == y;\nloop invariant !flag ==> x < y;\nloop invariant y >= 1;\nloop invariant y <= 2;\nloop invariant a >= 1;\nloop invariant a <= 3;\nloop invariant a % 2 == 1 ==> y == x;\nloop invariant a % 2 == 0 ==> y == x + 1;\nloop invariant flag ==> x == y;\nloop invariant !flag ==> x < y;\nloop invariant y >= 1;\nloop invariant y <= 2;\nloop invariant a >= 1;\nloop invariant a <= 3;\nloop invariant a % 2 == 1 ==> y == x;\nloop invariant a % 2 == 0 ==> y == x + 1;\nloop invariant flag ==> x == y;\nloop invariant !flag ==> x < y;\nloop invariant y >= 1;\nloop invariant y <= 2;\nloop invariant a >= 1;\nloop invariant a <= 3;\nloop invariant a % 2 == 1 ==> y == x;\nloop invariant a % 2 == 0 ==> y == x + 1;\nloop invariant flag ==> x == y;\nloop invariant !flag ==> x < y;\nloop invariant y >= 1;\nloop invariant y <= 2;\nloop invariant a >= 1;\nloop invariant a <= 3;\nloop invariant a % 2 == 1 ==> y == x;\nloop invariant a % 2 == 0 ==> y == x + 1;\nloop invariant flag ==> x == y;\nloop invariant !flag ==> x < y;\nloop invariant y >= 1;\nloop invariant y <= 2;\nloop invariant a >= 1;\nloop invariant a <= 3;\nloop invariant a % 2 == 1 ==> y == x;\nloop invariant a % 2 == 0 ==> y == x + 1;\nloop invariant flag ==> x == y;\nloop invariant !flag ==> x < y;\nloop invariant y >= 1;\nloop invariant y <= 2;\nloop invariant a >= 1;\nloop invariant a <= 3;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "```\n/*@\n\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 100000;\nloop invariant 0 <= y <= 100000;\nloop invariant 0 <= a <= 100000;\nloop invariant x >= y;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant 1 <= y <= 100000;\nloop invariant a >= x;\nloop invariant a >= y;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant x >= 1;\nloop invariant y >= 1;\nloop invariant x + y >= 2;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= y <= a; loop invariant a % 2 == 1; loop invariant flag ==> x == 1; loop invariant !flag ==> y == 1; loop invariant flag ==> a == x + y; loop invariant !flag ==> a == x + y + 1;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 100000;\nloop invariant 0 <= y <= 100000;\nloop invariant x + y <= 100000;\nloop invariant a >= 0;\nloop invariant a <= 1000000;\nloop invariant a % 2 == 1;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= flag <= 1;\nloop invariant 1 <= x <= 2;\nloop invariant 1 <= y <= 2;\nloop invariant 1 <= a <= 3;\n*/\n```"
            ],
            "completions": [
                {
                    "num_solver_calls": 11,
                    "annotations": "```\n/*@\nloop invariant 0 <= a <= 1 and flag == 1 ==> a == 1;\nloop invariant 0 <= a <= 1 and flag == 0 ==> a == 0;\nloop invariant x >= 1 and y >= 1 and a >= 1 and flag == 1 ==> a == x + y;\nloop invariant x >= 1 and y >= 1 and a >= 1 and flag == 0 ==> a == x + y + 1;\nloop invariant x >= 1 and y >= 1 and a >= 1 and flag == 1 ==> x >= y;\nloop invariant x >= 1 and y >= 1 and a >= 1 and flag == 0 ==> x >= y + 1;\nloop invariant x >= 1 and y >= 1 and a >= 1 and flag == 1 ==> x <= a;\nloop invariant x >= 1 and y >= 1 and a >= 1 and flag == 0 ==> x <= a - 1;\nloop invariant flag == 1 ==> x >= 1 and y >= 1 and a >= 1 and x >= y and x <= a;\nloop invariant flag == 0 ==> x >= 1 and y >= 1 and a >= 1 and x >= y + 1 and x <= a - 1;\nloop invariant flag == 1 ==> x >= 1 and y >= 1 and a >= 1 and x >= y and x <= a;\nloop invariant flag == 0 ==> x >= 1 and y >= 1 and a >= 1 and x >= y + 1 and x <= a - 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 23: unexpected token 'and'",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main()\n{\n  int flag = unknown1();\n  int x = 1;\n  int y = 1;\n  int a;\n  \n  if(flag)\n    a = 0;\n  else\n    a = 1;\n\n  /*@\n\n\n\n\n\n\n\n\n\n\n*/\nwhile(unknown1()){\n    if(flag)\n    {\n      a = x+y;\n      x++;\n    }\n    else\n    {\n      a = x+y+1;\n      y++;\n    }\n    if(a%2==1)\n      y++;\n    else\n      x++;\t  \n  }\n  \n  if(flag)\n    a++;\n  {;\n//@ assert(a%2==1);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= y <= 100000 is partially proven to be inductive.\nloop invariant x >= (1 + (y - 1) * y / 2) is established but not preserved.\nAssertion a % 2 == 1: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main()\n{\n  int flag = unknown1();\n  int x = 1;\n  int y = 1;\n  int a;\n  \n  if(flag)\n    a = 0;\n  else\n    a = 1;\n\n  /*@\n\n\n*/\nwhile(unknown1()){\n    if(flag)\n    {\n      a = x+y;\n      x++;\n    }\n    else\n    {\n      a = x+y+1;\n      y++;\n    }\n    if(a%2==1)\n      y++;\n    else\n      x++;\t  \n  }\n  \n  if(flag)\n    a++;\n  {;\n//@ assert(a%2==1);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 30,
                    "annotations": "```\n/*@\nloop invariant x >= y;\nloop invariant flag ==> a = x+y;\nloop invariant !flag ==> a = x+y+1;\nloop invariant x >= 1;\nloop invariant y >= 1;\nloop invariant x <= (a - y);\nloop invariant y <= (a - x);\nloop invariant flag ==> a > 1;\nloop invariant !flag ==> a >= 2;\nloop invariant flag ==> x > 1;\nloop invariant !flag ==> x >= 2;\nloop invariant flag ==> y > 1;\nloop invariant !flag ==> y >= 2;\nloop invariant flag ==> a > 1;\nloop invariant !flag ==> a >= 2;\nloop invariant x = x + 1 ==> a = x + y;\nloop invariant x = x + 1 ==> y = y + 1;\nloop invariant x = x + 1 ==> a = x + y + 1;\nloop invariant x = x + 1 ==> y = y + 1;\nloop invariant y = y + 1 ==> a = x + y;\nloop invariant y = y + 1 ==> x = x + 1;\nloop invariant y = y + 1 ==> a = x + y + 1;\nloop invariant y = y + 1 ==> x = x + 1;\nloop invariant a%2==1 ==> y = y + 1;\nloop invariant a%2==0 ==> x = x + 1;\nloop invariant flag ==> x = x + 1 ==> a = x + y;\nloop invariant flag ==> x = x + 1 ==> y = y + 1;\nloop invariant flag ==> x = x + 1 ==> a = x + y + 1;\nloop invariant flag ==> x = x + 1 ==> y = y + 1;\nloop invariant flag ==> y = y + 1 ==> a = x + y;\nloop invariant flag ==> y = y + 1 ==> x = x + 1;\nloop invariant flag ==> y = y + 1 ==> a = x + y + 1;\nloop invariant flag ==> y = y + 1 ==> x = x + 1;\nloop invariant !flag ==> x = x + 1 ==> a = x + y;\nloop invariant !flag ==> x = x + 1 ==> y = y + 1;\nloop invariant !flag ==> x = x + 1 ==> a = x + y + 1;\nloop invariant !flag ==> x = x + 1 ==> y = y + 1;\nloop invariant !flag ==> y = y + 1 ==> a = x + y;\nloop invariant !flag ==> y = y + 1 ==> x = x + 1;\nloop invariant !flag ==> y = y + 1 ==> a = x + y + 1;\nloop invariant !flag ==> y = y + 1 ==> x = x + 1;\nloop invariant flag ==> x = x + 1 ==> a = x + y;\nloop invariant flag ==> x = x + 1 ==> y = y + 1;\nloop invariant flag ==> x = x + 1 ==> a = x + y + 1;\nloop invariant flag ==> x = x + 1 ==> y = y + 1;\nloop invariant flag ==> y = y + 1 ==> a = x + y;\nloop invariant flag ==> y = y + 1 ==> x = x + 1;\nloop invariant flag ==> y = y + 1 ==> a = x + y + 1;\nloop invariant flag ==> y = y + 1 ==> x = x + 1;\nloop invariant !flag ==> x = x + 1 ==> a = x + y;\nloop invariant !flag ==> x = x + 1 ==> y = y + 1;\nloop invariant !flag ==> x = x + 1 ==> a = x + y + 1;\nloop invariant !flag ==> x = x + 1 ==> y = y + 1;\nloop invariant !flag ==> y = y + 1 ==> a = x + y;\nloop invariant !flag ==> y = y + 1 ==> x = x + 1;\nloop invariant !flag ==> y = y + 1 ==> a = x + y + 1;\nloop invariant !flag ==> y = y + 1 ==> x = x + 1;\nloop invariant flag ==> x = x + 1 ==> a = x + y;\nloop invariant flag ==> x = x + 1 ==> y = y + 1;\nloop invariant flag ==> x = x + 1 ==> a = x + y + 1;\nloop invariant flag ==> x = x + 1 ==> y = y + 1;\nloop invariant flag ==> y = y + 1 ==> a = x + y;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 24: Assignment operators not allowed in annotations.",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main()\n{\n  int flag = unknown1();\n  int x = 1;\n  int y = 1;\n  int a;\n  \n  if(flag)\n    a = 0;\n  else\n    a = 1;\n\n  /*@\n\n\n\nloop invariant i4: x >= 1;\nloop invariant i5: y >= 1;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile(unknown1()){\n    if(flag)\n    {\n      a = x+y;\n      x++;\n    }\n    else\n    {\n      a = x+y+1;\n      y++;\n    }\n    if(a%2==1)\n      y++;\n    else\n      x++;\t  \n  }\n  \n  if(flag)\n    a++;\n  {;\n//@ assert(a%2==1);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 21,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= unknown2();\nloop invariant 1 <= y <= unknown2();\nloop invariant a >= 1;\nloop invariant a <= unknown2();\nloop invariant a%2==1 ==> x-a%2==1;\nloop invariant a%2==0 ==> x-a%2==0;\nloop invariant a%2==1 ==> y-a%2==2;\nloop invariant a%2==0 ==> y-a%2==1;\nloop invariant unknown1() ==> x==y;\nloop invariant !unknown1() ==> x!=y;\nloop invariant unknown1() ==> x<=a;\nloop invariant !unknown1() ==> x>=a;\nloop invariant unknown1() ==> y<=a;\nloop invariant !unknown1() ==> y>=a;\nloop invariant unknown1() ==> flag==1;\nloop invariant !unknown1() ==> flag==0;\nloop invariant unknown1() ==> a%2==1;\nloop invariant !unknown1() ==> a%2==0;\nloop invariant unknown1() ==> x%2==0;\nloop invariant !unknown1() ==> x%2==1;\nloop invariant unknown1() ==> y%2==1;\nloop invariant !unknown1() ==> y%2==0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 23: unexpected token ')'",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main()\n{\n  int flag = unknown1();\n  int x = 1;\n  int y = 1;\n  int a;\n  \n  if(flag)\n    a = 0;\n  else\n    a = 1;\n\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile(unknown1()){\n    if(flag)\n    {\n      a = x+y;\n      x++;\n    }\n    else\n    {\n      a = x+y+1;\n      y++;\n    }\n    if(a%2==1)\n      y++;\n    else\n      x++;\t  \n  }\n  \n  if(flag)\n    a++;\n  {;\n//@ assert(a%2==1);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 7,
                    "annotations": "```\n/*@\nloop invariant 0 <= flag <= 1;\nloop invariant 0 <= x <= unknown1();\nloop invariant 0 <= y <= unknown1();\nloop invariant 1 <= a <= unknown1();\nloop invariant if flag then x+y < unknown1() else x+y+1 < unknown1();\nloop invariant if flag then x+y < unknown1() else x+y+1 < unknown1();\nloop invariant if a%2==1 then y < unknown1() else x < unknown1();\nloop invariant if a%2==1 then y < unknown1() else x < unknown1();\nloop invariant if flag then x+y < unknown1() else x+y+1 < unknown1();\nloop invariant if flag then x+y < unknown1() else x+y+1 < unknown1();\nloop invariant if a%2==1 then y < unknown1() else x < unknown1();\nloop invariant if a%2==1 then y < unknown1() else x < unknown1();\nloop invariant if flag then x+y < unknown1() else x+y+1 < unknown1();\nloop invariant if flag then x+y < unknown1() else x+y+1 < unknown1();\nloop invariant if a%2==1 then y < unknown1() else x < unknown1();\nloop invariant if a%2==1 then y < unknown1() else x < unknown1();\nloop invariant if flag then x+y < unknown1() else x+y+1 < unknown1();\nloop invariant if flag then x+y < unknown1() else x+y+1 < unknown1();\nloop invariant if a%2==1 then y < unknown1() else x < unknown1();\nloop invariant if a%2==1 then y < unknown1() else x < unknown1();\nloop invariant if flag then x+y < unknown1() else x+y+1 < unknown1();\nloop invariant if flag then x+y < unknown1() else x+y+1 < unknown1();\nloop invariant if a%2==1 then y < unknown1() else x < unknown1();\nloop invariant if a%2==1 then y < unknown1() else x < unknown1();\nloop invariant if flag then x+y < unknown1() else x+y+1 < unknown1();\nloop invariant if flag then x+y < unknown1() else x+y+1 < unknown1();\nloop invariant if a%2==1 then y < unknown1() else x < unknown1();\nloop invariant if a%2==1 then y < unknown1() else x < unknown1();\nloop invariant if flag then x+y < unknown1() else x+y+1 < unknown1();\nloop invariant if flag then x+y < unknown1() else x+y+1 < unknown1();\nloop invariant if a%2==1 then y < unknown1() else x < unknown1();\nloop invariant if a%2==1 then y < unknown1() else x < unknown1();\nloop invariant if flag then x+y < unknown1() else x+y+1 < unknown1();\nloop invariant if flag then x+y < unknown1() else x+y+1 < unknown1();\nloop invariant if a%2==1 then y < unknown1() else x < unknown1();\nloop invariant if a%2==1 then y < unknown1() else x < unknown1();\nloop invariant if flag then x+y < unknown1() else x+y+1 < unknown1();\nloop invariant if flag then x+y < unknown1() else x+y+1 < unknown1();\nloop invariant if a%2==1 then y < unknown1() else x < unknown1();\nloop invariant if a%2==1 then y < unknown1() else x < unknown1();\nloop invariant if flag then x+y < unknown1() else x+y+1 < unknown1();\nloop invariant if flag then x+y < unknown1() else x+y+1 < unknown1();\nloop invariant if a%2==1 then y < unknown1() else x < unknown1();\nloop invariant if a%2==1 then y < unknown1() else x < unknown1();\nloop invariant if flag then x+y < unknown1() else x+y+1 < unknown1();\nloop invariant if flag then x+y < unknown1() else x+y+1 < unknown1();\nloop invariant if a%2==1 then y < unknown1() else x < unknown1();\nloop invariant if a%2==1 then y < unknown1() else x < unknown1();\nloop invariant if flag then x+y < unknown1() else x+y+1 < unknown1();\nloop invariant if flag then x+y < unknown1() else x+y+1 < unknown1();\nloop invariant if a%2==1 then y < unknown1() else x < unknown1();\nloop invariant if a%2==1 then y < unknown1() else x < unknown1();\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 24: unexpected token ')'",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main()\n{\n  int flag = unknown1();\n  int x = 1;\n  int y = 1;\n  int a;\n  \n  if(flag)\n    a = 0;\n  else\n    a = 1;\n\n  /*@\n\n\n\n\n\n\n*/\nwhile(unknown1()){\n    if(flag)\n    {\n      a = x+y;\n      x++;\n    }\n    else\n    {\n      a = x+y+1;\n      y++;\n    }\n    if(a%2==1)\n      y++;\n    else\n      x++;\t  \n  }\n  \n  if(flag)\n    a++;\n  {;\n//@ assert(a%2==1);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 1 + y;\nloop invariant 0 <= y <= 1 + x;\nloop invariant a >= x + y;\nloop invariant a <= x + y + 1;\nloop invariant (a + 1) % 2 == 0 ==> x < y;\nloop invariant (a + 1) % 2 == 0 ==> a <= x + y;\nloop invariant (a + 1) % 2 == 0 ==> a >= x + y + 1;\nloop invariant (a + 1) % 2 == 0 ==> y < x;\nloop invariant (a + 1) % 2 == 0 ==> y == x + 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 1 + y is partially proven to be inductive.\nloop invariant 0 <= y <= 1 + x is partially proven to be inductive.\nloop invariant a >= x + y is preserved but not established.\nloop invariant a <= x + y + 1 is partially proven to be inductive.\nloop invariant (a + 1) % 2 == 0 ==> x < y is partially proven to be inductive.\nloop invariant (a + 1) % 2 == 0 ==> a <= x + y is partially proven to be inductive.\nloop invariant (a + 1) % 2 == 0 ==> a >= x + y + 1 is partially proven to be inductive.\nloop invariant (a + 1) % 2 == 0 ==> y < x is partially proven to be inductive.\nloop invariant (a + 1) % 2 == 0 ==> y == x + 1 is partially proven to be inductive.\nAssertion a % 2 == 1: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main()\n{\n  int flag = unknown1();\n  int x = 1;\n  int y = 1;\n  int a;\n  \n  if(flag)\n    a = 0;\n  else\n    a = 1;\n\n  /*@\n\n\n\nloop invariant i4: a <= x + y + 1;\n\nloop invariant i6: (a + 1) % 2 == 0 ==> a <= x + y;\n\n\n\n*/\nwhile(unknown1()){\n    if(flag)\n    {\n      a = x+y;\n      x++;\n    }\n    else\n    {\n      a = x+y+1;\n      y++;\n    }\n    if(a%2==1)\n      y++;\n    else\n      x++;\t  \n  }\n  \n  if(flag)\n    a++;\n  {;\n//@ assert(a%2==1);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 9,
                    "annotations": "```\n/*@\nloop invariant 1 <= x <= 2;\nloop invariant 1 <= y <= 2;\nloop invariant 1 <= a <= 3;\nloop invariant x <= y;\nloop invariant x == y ==> a == x + y;\nloop invariant x != y ==> a == x + y + 1;\nloop invariant a % 2 == 1 ==> x == y;\nloop invariant a % 2 == 0 ==> x != y;\nloop invariant flag ==> a == x + y + 1;\nloop invariant !flag ==> a == x + y;\nloop invariant flag ==> x <= y;\nloop invariant !flag ==> x < y;\nloop invariant y >= 1;\nloop invariant y <= 2;\nloop invariant a >= 1;\nloop invariant a <= 3;\nloop invariant a % 2 == 1 ==> y == x;\nloop invariant a % 2 == 0 ==> y == x + 1;\nloop invariant flag ==> x == y;\nloop invariant !flag ==> x < y;\nloop invariant y >= 1;\nloop invariant y <= 2;\nloop invariant a >= 1;\nloop invariant a <= 3;\nloop invariant a % 2 == 1 ==> y == x;\nloop invariant a % 2 == 0 ==> y == x + 1;\nloop invariant flag ==> x == y;\nloop invariant !flag ==> x < y;\nloop invariant y >= 1;\nloop invariant y <= 2;\nloop invariant a >= 1;\nloop invariant a <= 3;\nloop invariant a % 2 == 1 ==> y == x;\nloop invariant a % 2 == 0 ==> y == x + 1;\nloop invariant flag ==> x == y;\nloop invariant !flag ==> x < y;\nloop invariant y >= 1;\nloop invariant y <= 2;\nloop invariant a >= 1;\nloop invariant a <= 3;\nloop invariant a % 2 == 1 ==> y == x;\nloop invariant a % 2 == 0 ==> y == x + 1;\nloop invariant flag ==> x == y;\nloop invariant !flag ==> x < y;\nloop invariant y >= 1;\nloop invariant y <= 2;\nloop invariant a >= 1;\nloop invariant a <= 3;\nloop invariant a % 2 == 1 ==> y == x;\nloop invariant a % 2 == 0 ==> y == x + 1;\nloop invariant flag ==> x == y;\nloop invariant !flag ==> x < y;\nloop invariant y >= 1;\nloop invariant y <= 2;\nloop invariant a >= 1;\nloop invariant a <= 3;\nloop invariant a % 2 == 1 ==> y == x;\nloop invariant a % 2 == 0 ==> y == x + 1;\nloop invariant flag ==> x == y;\nloop invariant !flag ==> x < y;\nloop invariant y >= 1;\nloop invariant y <= 2;\nloop invariant a >= 1;\nloop invariant a <= 3;\nloop invariant a % 2 == 1 ==> y == x;\nloop invariant a % 2 == 0 ==> y == x + 1;\nloop invariant flag ==> x == y;\nloop invariant !flag ==> x < y;\nloop invariant y >= 1;\nloop invariant y <= 2;\nloop invariant a >= 1;\nloop invariant a <= 3;\nloop invariant a % 2 == 1 ==> y == x;\nloop invariant a % 2 == 0 ==> y == x + 1;\nloop invariant flag ==> x == y;\nloop invariant !flag ==> x < y;\nloop invariant y >= 1;\nloop invariant y <= 2;\nloop invariant a >= 1;\nloop invariant a <= 3;\nloop invariant a % 2 == 1 ==> y == x;\nloop invariant a % 2 == 0 ==> y == x + 1;\nloop invariant flag ==> x == y;\nloop invariant !flag ==> x < y;\nloop invariant y >= 1;\nloop invariant y <= 2;\nloop invariant a >= 1;\nloop invariant a <= 3;\nloop invariant a % 2 == 1 ==> y == x;\nloop invariant a % 2 == 0 ==> y == x + 1;\nloop invariant flag ==> x == y;\nloop invariant !flag ==> x < y;\nloop invariant y >= 1;\nloop invariant y <= 2;\nloop invariant a >= 1;\nloop invariant a <= 3;\nloop invariant a % 2 == 1 ==> y == x;\nloop invariant a % 2 == 0 ==> y == x + 1;\nloop invariant flag ==> x == y;\nloop invariant !flag ==> x < y;\nloop invariant y >= 1;\nloop invariant y <= 2;\nloop invariant a >= 1;\nloop invariant a <= 3;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= x <= 2 is partially proven to be inductive.\nloop invariant 1 <= y <= 2 is partially proven to be inductive.\nloop invariant 1 <= a <= 3 is preserved but not established.\nloop invariant x <= y is partially proven to be inductive.\nloop invariant x == y ==> a == x + y is preserved but not established.\nloop invariant x != y ==> a == x + y + 1 is partially proven to be inductive.\nloop invariant a % 2 == 1 ==> x == y is partially proven to be inductive.\nloop invariant a % 2 == 0 ==> x != y is partially proven to be inductive.\nloop invariant flag ==> a == x + y + 1 is partially proven to be inductive.\nloop invariant !flag ==> a == x + y is partially proven to be inductive.\nloop invariant flag ==> x <= y is partially proven to be inductive.\nloop invariant !flag ==> x < y is partially proven to be inductive.\nloop invariant y >= 1 is partially proven to be inductive.\nloop invariant y <= 2 is partially proven to be inductive.\nloop invariant a >= 1 is partially proven to be inductive.\nloop invariant a <= 3 is partially proven to be inductive.\nloop invariant a % 2 == 1 ==> y == x is partially proven to be inductive.\nloop invariant a % 2 == 0 ==> y == x + 1 is partially proven to be inductive.\nloop invariant flag ==> x == y is partially proven to be inductive.\nAssertion a % 2 == 1: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main()\n{\n  int flag = unknown1();\n  int x = 1;\n  int y = 1;\n  int a;\n  \n  if(flag)\n    a = 0;\n  else\n    a = 1;\n\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i13: y >= 1;\n\n\n\n\n\n\n*/\nwhile(unknown1()){\n    if(flag)\n    {\n      a = x+y;\n      x++;\n    }\n    else\n    {\n      a = x+y+1;\n      y++;\n    }\n    if(a%2==1)\n      y++;\n    else\n      x++;\t  \n  }\n  \n  if(flag)\n    a++;\n  {;\n//@ assert(a%2==1);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= y <= 100000 is partially proven to be inductive.\nloop invariant x >= (1 + (y - 1) * y / 2) is established but not preserved.\nAssertion a % 2 == 1: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main()\n{\n  int flag = unknown1();\n  int x = 1;\n  int y = 1;\n  int a;\n  \n  if(flag)\n    a = 0;\n  else\n    a = 1;\n\n  /*@\n\n\n*/\nwhile(unknown1()){\n    if(flag)\n    {\n      a = x+y;\n      x++;\n    }\n    else\n    {\n      a = x+y+1;\n      y++;\n    }\n    if(a%2==1)\n      y++;\n    else\n      x++;\t  \n  }\n  \n  if(flag)\n    a++;\n  {;\n//@ assert(a%2==1);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 1,
                    "annotations": "```\n/*@\n\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 23: unexpected token ''",
                    "houdini_error": "No annotations found"
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 100000;\nloop invariant 0 <= y <= 100000;\nloop invariant 0 <= a <= 100000;\nloop invariant x >= y;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 100000 is partially proven to be inductive.\nloop invariant 0 <= y <= 100000 is partially proven to be inductive.\nloop invariant 0 <= a <= 100000 is partially proven to be inductive.\nloop invariant x >= y is partially proven to be inductive.\nloop invariant x >= y + 1 is preserved but not established.\nAssertion a % 2 == 1: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main()\n{\n  int flag = unknown1();\n  int x = 1;\n  int y = 1;\n  int a;\n  \n  if(flag)\n    a = 0;\n  else\n    a = 1;\n\n  /*@\n\n\n\n\n\n*/\nwhile(unknown1()){\n    if(flag)\n    {\n      a = x+y;\n      x++;\n    }\n    else\n    {\n      a = x+y+1;\n      y++;\n    }\n    if(a%2==1)\n      y++;\n    else\n      x++;\t  \n  }\n  \n  if(flag)\n    a++;\n  {;\n//@ assert(a%2==1);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant 1 <= y <= 100000;\nloop invariant a >= x;\nloop invariant a >= y;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= y is established but not preserved.\nloop invariant 1 <= y <= 100000 is established but not preserved.\nloop invariant a >= x is preserved but not established.\nloop invariant a >= y is established but not preserved.\nAssertion a % 2 == 1: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main()\n{\n  int flag = unknown1();\n  int x = 1;\n  int y = 1;\n  int a;\n  \n  if(flag)\n    a = 0;\n  else\n    a = 1;\n\n  /*@\n\n\n\n\n*/\nwhile(unknown1()){\n    if(flag)\n    {\n      a = x+y;\n      x++;\n    }\n    else\n    {\n      a = x+y+1;\n      y++;\n    }\n    if(a%2==1)\n      y++;\n    else\n      x++;\t  \n  }\n  \n  if(flag)\n    a++;\n  {;\n//@ assert(a%2==1);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant x >= 1;\nloop invariant y >= 1;\nloop invariant x + y >= 2;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= y is established but not preserved.\nloop invariant x >= 1 is partially proven to be inductive.\nloop invariant y >= 1 is partially proven to be inductive.\nloop invariant x + y >= 2 is partially proven to be inductive.\nAssertion a % 2 == 1: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main()\n{\n  int flag = unknown1();\n  int x = 1;\n  int y = 1;\n  int a;\n  \n  if(flag)\n    a = 0;\n  else\n    a = 1;\n\n  /*@\n\nloop invariant i2: x >= 1;\nloop invariant i3: y >= 1;\nloop invariant i4: x + y >= 2;\n*/\nwhile(unknown1()){\n    if(flag)\n    {\n      a = x+y;\n      x++;\n    }\n    else\n    {\n      a = x+y+1;\n      y++;\n    }\n    if(a%2==1)\n      y++;\n    else\n      x++;\t  \n  }\n  \n  if(flag)\n    a++;\n  {;\n//@ assert(a%2==1);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= y <= a; loop invariant a % 2 == 1; loop invariant flag ==> x == 1; loop invariant !flag ==> y == 1; loop invariant flag ==> a == x + y; loop invariant !flag ==> a == x + y + 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= y <= a; loop invariant a % 2 == 1; loop invariant flag ==> x == 1; loop invariant !flag ==> y == 1; loop invariant flag ==> a == x + y; loop invariant !flag ==> a == x + y + 1 is preserved but not established.\nAssertion a % 2 == 1: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main()\n{\n  int flag = unknown1();\n  int x = 1;\n  int y = 1;\n  int a;\n  \n  if(flag)\n    a = 0;\n  else\n    a = 1;\n\n  /*@\n\n*/\nwhile(unknown1()){\n    if(flag)\n    {\n      a = x+y;\n      x++;\n    }\n    else\n    {\n      a = x+y+1;\n      y++;\n    }\n    if(a%2==1)\n      y++;\n    else\n      x++;\t  \n  }\n  \n  if(flag)\n    a++;\n  {;\n//@ assert(a%2==1);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 100000;\nloop invariant 0 <= y <= 100000;\nloop invariant x + y <= 100000;\nloop invariant a >= 0;\nloop invariant a <= 1000000;\nloop invariant a % 2 == 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 100000 is established but not preserved.\nloop invariant 0 <= y <= 100000 is established but not preserved.\nloop invariant x + y <= 100000 is established but not preserved.\nloop invariant a >= 0 is partially proven to be inductive.\nloop invariant a <= 1000000 is partially proven to be inductive.\nloop invariant a % 2 == 1 is neither established nor preserved.\nAssertion a % 2 == 1: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main()\n{\n  int flag = unknown1();\n  int x = 1;\n  int y = 1;\n  int a;\n  \n  if(flag)\n    a = 0;\n  else\n    a = 1;\n\n  /*@\n\n\n\n\n\n\n*/\nwhile(unknown1()){\n    if(flag)\n    {\n      a = x+y;\n      x++;\n    }\n    else\n    {\n      a = x+y+1;\n      y++;\n    }\n    if(a%2==1)\n      y++;\n    else\n      x++;\t  \n  }\n  \n  if(flag)\n    a++;\n  {;\n//@ assert(a%2==1);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= flag <= 1;\nloop invariant 1 <= x <= 2;\nloop invariant 1 <= y <= 2;\nloop invariant 1 <= a <= 3;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= flag <= 1 is preserved but not established.\nloop invariant 1 <= x <= 2 is established but not preserved.\nloop invariant 1 <= y <= 2 is established but not preserved.\nloop invariant 1 <= a <= 3 is preserved but not established.\nAssertion a % 2 == 1: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main()\n{\n  int flag = unknown1();\n  int x = 1;\n  int y = 1;\n  int a;\n  \n  if(flag)\n    a = 0;\n  else\n    a = 1;\n\n  /*@\n\n\n\n\n*/\nwhile(unknown1()){\n    if(flag)\n    {\n      a = x+y;\n      x++;\n    }\n    else\n    {\n      a = x+y+1;\n      y++;\n    }\n    if(a%2==1)\n      y++;\n    else\n      x++;\t  \n  }\n  \n  if(flag)\n    a++;\n  {;\n//@ assert(a%2==1);\n}\n\n}",
                    "checker_output_after_prune": false
                }
            ],
            "checker_output_for_combined_annotations": false,
            "checker_message_for_combined_annotations": "Annotation error on line 23: unexpected token 'and'",
            "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main()\n{\n  int flag = unknown1();\n  int x = 1;\n  int y = 1;\n  int a;\n  \n  if(flag)\n    a = 0;\n  else\n    a = 1;\n\n  /*@\nloop invariant i1: 0 <= a <= 1 and flag == 1 ==> a == 1;\nloop invariant i2: 0 <= a <= 1 and flag == 0 ==> a == 0;\nloop invariant i3: x >= 1 and y >= 1 and a >= 1 and flag == 1 ==> a == x + y;\nloop invariant i4: x >= 1 and y >= 1 and a >= 1 and flag == 0 ==> a == x + y + 1;\nloop invariant i5: x >= 1 and y >= 1 and a >= 1 and flag == 1 ==> x >= y;\nloop invariant i6: x >= 1 and y >= 1 and a >= 1 and flag == 0 ==> x >= y + 1;\nloop invariant i7: x >= 1 and y >= 1 and a >= 1 and flag == 1 ==> x <= a;\nloop invariant i8: x >= 1 and y >= 1 and a >= 1 and flag == 0 ==> x <= a - 1;\nloop invariant i9: flag == 1 ==> x >= 1 and y >= 1 and a >= 1 and x >= y and x <= a;\nloop invariant i10: flag == 0 ==> x >= 1 and y >= 1 and a >= 1 and x >= y + 1 and x <= a - 1;\nloop invariant i11: 0 <= y <= 100000;\nloop invariant i12: x >= (1 + (y - 1) * y / 2);\nloop invariant i13: x >= y;\nloop invariant i14: flag ==> a = x+y;\nloop invariant i15: !flag ==> a = x+y+1;\nloop invariant i16: x >= 1;\nloop invariant i17: y >= 1;\nloop invariant i18: x <= (a - y);\nloop invariant i19: y <= (a - x);\nloop invariant i20: flag ==> a > 1;\nloop invariant i21: !flag ==> a >= 2;\nloop invariant i22: flag ==> x > 1;\nloop invariant i23: !flag ==> x >= 2;\nloop invariant i24: flag ==> y > 1;\nloop invariant i25: !flag ==> y >= 2;\nloop invariant i26: x = x + 1 ==> a = x + y;\nloop invariant i27: x = x + 1 ==> y = y + 1;\nloop invariant i28: x = x + 1 ==> a = x + y + 1;\nloop invariant i29: y = y + 1 ==> a = x + y;\nloop invariant i30: y = y + 1 ==> x = x + 1;\nloop invariant i31: y = y + 1 ==> a = x + y + 1;\nloop invariant i32: a%2==1 ==> y = y + 1;\nloop invariant i33: a%2==0 ==> x = x + 1;\nloop invariant i34: flag ==> x = x + 1 ==> a = x + y;\nloop invariant i35: flag ==> x = x + 1 ==> y = y + 1;\nloop invariant i36: flag ==> x = x + 1 ==> a = x + y + 1;\nloop invariant i37: flag ==> y = y + 1 ==> a = x + y;\nloop invariant i38: flag ==> y = y + 1 ==> x = x + 1;\nloop invariant i39: flag ==> y = y + 1 ==> a = x + y + 1;\nloop invariant i40: !flag ==> x = x + 1 ==> a = x + y;\nloop invariant i41: !flag ==> x = x + 1 ==> y = y + 1;\nloop invariant i42: !flag ==> x = x + 1 ==> a = x + y + 1;\nloop invariant i43: !flag ==> y = y + 1 ==> a = x + y;\nloop invariant i44: !flag ==> y = y + 1 ==> x = x + 1;\nloop invariant i45: !flag ==> y = y + 1 ==> a = x + y + 1;\nloop invariant i46: 0 <= x <= unknown2();\nloop invariant i47: 1 <= y <= unknown2();\nloop invariant i48: a >= 1;\nloop invariant i49: a <= unknown2();\nloop invariant i50: a%2==1 ==> x-a%2==1;\nloop invariant i51: a%2==0 ==> x-a%2==0;\nloop invariant i52: a%2==1 ==> y-a%2==2;\nloop invariant i53: a%2==0 ==> y-a%2==1;\nloop invariant i54: unknown1() ==> x==y;\nloop invariant i55: !unknown1() ==> x!=y;\nloop invariant i56: unknown1() ==> x<=a;\nloop invariant i57: !unknown1() ==> x>=a;\nloop invariant i58: unknown1() ==> y<=a;\nloop invariant i59: !unknown1() ==> y>=a;\nloop invariant i60: unknown1() ==> flag==1;\nloop invariant i61: !unknown1() ==> flag==0;\nloop invariant i62: unknown1() ==> a%2==1;\nloop invariant i63: !unknown1() ==> a%2==0;\nloop invariant i64: unknown1() ==> x%2==0;\nloop invariant i65: !unknown1() ==> x%2==1;\nloop invariant i66: unknown1() ==> y%2==1;\nloop invariant i67: !unknown1() ==> y%2==0;\nloop invariant i68: 0 <= flag <= 1;\nloop invariant i69: 0 <= x <= unknown1();\nloop invariant i70: 0 <= y <= unknown1();\nloop invariant i71: 1 <= a <= unknown1();\nloop invariant i72: if flag then x+y < unknown1() else x+y+1 < unknown1();\nloop invariant i73: if a%2==1 then y < unknown1() else x < unknown1();\nloop invariant i74: 0 <= x <= 1 + y;\nloop invariant i75: 0 <= y <= 1 + x;\nloop invariant i76: a >= x + y;\nloop invariant i77: a <= x + y + 1;\nloop invariant i78: (a + 1) % 2 == 0 ==> x < y;\nloop invariant i79: (a + 1) % 2 == 0 ==> a <= x + y;\nloop invariant i80: (a + 1) % 2 == 0 ==> a >= x + y + 1;\nloop invariant i81: (a + 1) % 2 == 0 ==> y < x;\nloop invariant i82: (a + 1) % 2 == 0 ==> y == x + 1;\nloop invariant i83: 1 <= x <= 2;\nloop invariant i84: 1 <= y <= 2;\nloop invariant i85: 1 <= a <= 3;\nloop invariant i86: x <= y;\nloop invariant i87: x == y ==> a == x + y;\nloop invariant i88: x != y ==> a == x + y + 1;\nloop invariant i89: a % 2 == 1 ==> x == y;\nloop invariant i90: a % 2 == 0 ==> x != y;\nloop invariant i91: flag ==> a == x + y + 1;\nloop invariant i92: !flag ==> a == x + y;\nloop invariant i93: flag ==> x <= y;\nloop invariant i94: !flag ==> x < y;\nloop invariant i95: y <= 2;\nloop invariant i96: a <= 3;\nloop invariant i97: a % 2 == 1 ==> y == x;\nloop invariant i98: a % 2 == 0 ==> y == x + 1;\nloop invariant i99: flag ==> x == y;\nloop invariant i100: 0 <= x <= 100000;\nloop invariant i101: 0 <= a <= 100000;\nloop invariant i102: x >= y + 1;\nloop invariant i103: 0 <= x <= y;\nloop invariant i104: 1 <= y <= 100000;\nloop invariant i105: a >= x;\nloop invariant i106: a >= y;\nloop invariant i107: x + y >= 2;\nloop invariant i108: 0 <= x <= y <= a; loop invariant a % 2 == 1; loop invariant flag ==> x == 1; loop invariant !flag ==> y == 1; loop invariant flag ==> a == x + y; loop invariant !flag ==> a == x + y + 1;\nloop invariant i109: x + y <= 100000;\nloop invariant i110: a >= 0;\nloop invariant i111: a <= 1000000;\nloop invariant i112: a % 2 == 1;\n*/\nwhile(unknown1()){\n    if(flag)\n    {\n      a = x+y;\n      x++;\n    }\n    else\n    {\n      a = x+y+1;\n      y++;\n    }\n    if(a%2==1)\n      y++;\n    else\n      x++;\t  \n  }\n  \n  if(flag)\n    a++;\n  {;\n//@ assert(a%2==1);\n}\n\n}",
            "combined_annotation_num_solver_calls": 82,
            "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main()\n{\n  int flag = unknown1();\n  int x = 1;\n  int y = 1;\n  int a;\n  \n  if(flag)\n    a = 0;\n  else\n    a = 1;\n\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i16: x >= 1;\nloop invariant i17: y >= 1;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i77: a <= x + y + 1;\n\nloop invariant i79: (a + 1) % 2 == 0 ==> a <= x + y;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i107: x + y >= 2;\n\n\nloop invariant i110: a >= 0;\n\n\n*/\nwhile(unknown1()){\n    if(flag)\n    {\n      a = x+y;\n      x++;\n    }\n    else\n    {\n      a = x+y+1;\n      y++;\n    }\n    if(a%2==1)\n      y++;\n    else\n      x++;\t  \n  }\n  \n  if(flag)\n    a++;\n  {;\n//@ assert(a%2==1);\n}\n\n}",
            "checker_output_after_prune": false
        },
        {
            "file": "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/diamond_1-1.c",
            "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  while (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
            "success": false,
            "annotation_blocks": [
                "```\n/*@\nloop invariant y % 2 == y % 2;\nloop invariant x % 2 == x % 2;\nloop invariant x % 2 == (y % 2 ==> x % 2) ==> x % 2;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant x % 2 == y % 2;\n*/\n```",
                "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant i3;\nloop invariant i4;\nloop invariant i5;\nloop invariant i6;\nloop invariant i7;\nloop invariant i8;\nloop invariant i9;\nloop invariant i10;\nloop invariant i11;\nloop invariant i12;\nloop invariant i13;\nloop invariant i14;\nloop invariant i15;\nloop invariant i16;\nloop invariant i17;\nloop invariant i18;\nloop invariant i19;\nloop invariant i20;\nloop invariant i21;\nloop invariant i22;\nloop invariant i23;\nloop invariant i24;\nloop invariant i25;\nloop invariant i26;\nloop invariant i27;\nloop invariant i28;\nloop invariant i29;\nloop invariant i30;\nloop invariant i31;\nloop invariant i32;\nloop invariant i33;\nloop invariant i34;\nloop invariant i35;\nloop invariant i36;\nloop invariant i37;\nloop invariant i38;\nloop invariant i39;\nloop invariant i40;\nloop invariant i41;\nloop invariant i42;\nloop invariant i43;\nloop invariant i44;\nloop invariant i45;\nloop invariant i46;\nloop invariant i47;\nloop invariant i48;\nloop invariant i49;\nloop invariant i50;\nloop invariant i51;\nloop invariant i52;\nloop invariant i53;\nloop invariant i54;\nloop invariant i55;\nloop invariant i56;\nloop invariant i57;\nloop invariant i58;\nloop invariant i59;\nloop invariant i60;\nloop invariant i61;\nloop invariant i62;\nloop invariant i63;\nloop invariant i64;\nloop invariant i65;\nloop invariant i66;\nloop invariant i67;\nloop invariant i68;\nloop invariant i69;\nloop invariant i70;\nloop invariant i71;\nloop invariant i72;\nloop invariant i73;\nloop invariant i74;\nloop invariant i75;\nloop invariant i76;\nloop invariant i77;\nloop invariant i78;\nloop invariant i79;\nloop invariant i80;\nloop invariant i81;\nloop invariant i82;\nloop invariant i83;\nloop invariant i84;\nloop invariant i85;\nloop invariant i86;\nloop invariant i87;\nloop invariant i88;\nloop invariant i89;\nloop invariant i90;\nloop invariant i91;\nloop invariant i92;\nloop invariant i93;\nloop invariant i94;\nloop invariant i95;\nloop invariant i96;\nloop invariant i97;\nloop invariant i98;\nloop invariant i99;\nloop invariant i100;\nloop invariant i101;\nloop invariant i102;\nloop invariant i103;\nloop invariant i104;\nloop invariant i105;\nloop invariant i106;\nloop invariant i107;\nloop invariant i108;\nloop invariant i109;\nloop invariant i110;\nloop invariant i111;\nloop invariant i112;\nloop invariant i113;\nloop invariant i114;\nloop invariant i115;\nloop invariant i116;\nloop invariant i117;\nloop invariant i118;\nloop invariant i119;\nloop invariant i120;\nloop invariant i121;\nloop invariant i122;\nloop invariant i123;\nloop invariant i124;\nloop invariant i125;\nloop invariant i126;\nloop invariant i127;\nloop invariant i128;\nloop invariant i129;\nloop invariant i130;\nloop invariant i131;\nloop invariant i132;\nloop invariant i133;\nloop invariant i134;\nloop invariant i135;\nloop invariant i136;\nloop invariant i137;\nloop invariant i138;\nloop invariant i139;\nloop invariant i140;\nloop invariant i141;\nloop invariant i142;\nloop invariant i143;\nloop invariant i144;\nloop invariant i145;\nloop invariant i146;\nloop invariant i147;\nloop invariant i148;\nloop invariant i149;\nloop invariant i150;\nloop invariant i151;\nloop invariant i152;\nloop invariant i153;\nloop invariant i154;\nloop invariant i155;\nloop invariant i156;\nloop invariant i157;\nloop invariant i158;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant 0 <= y < 100;\nloop invariant (x % 2) == (y % 2) ==> (x % 2) == 0 ==> (x % 2) == 0;\nloop invariant (x % 2) == (y % 2) ==> (x % 2) == 1 ==> (x % 2) == 1;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant x % 2 == 1 ==> x % 2 == 1;\nloop invariant x % 2 == 0 ==> y % 2 == 0;\nloop invariant x % 2 == 1 ==> y % 2 == 1;\nloop invariant x % 2 == 0 ==> (x % 2) == 0 ==> (x % 2) == 0;\nloop invariant x % 2 == 1 ==> (x % 2) == 1 ==> (x % 2) == 1;\nloop invariant x % 2 == 0 ==> (x % 2) == 0 ==> (x % 2) == 0;\nloop invariant x % 2 == 1 ==> (x % 2) == 1 ==> (x % 2) == 1;\nloop invariant x % 2 == 0 ==> (x % 2) == 0 ==> (x % 2) == 0;\nloop invariant x % 2 == 1 ==> (x % 2) == 1 ==> (x % 2) == 1;\nloop invariant x % 2 == 0 ==> (x % 2) == 0 ==> (x % 2) == 0;\nloop invariant x % 2 == 1 ==> (x % 2) == 1 ==> (x % 2) == 1;\nloop invariant x % 2 == 0 ==> (x % 2) == 0 ==> (x % 2) == 0;\nloop invariant x % 2 == 1 ==> (x % 2) == 1 ==> (x % 2) == 1;\nloop invariant x % 2 == 0 ==> (x % 2) == 0 ==> (x % 2) == 0;\nloop invariant x % 2 == 1 ==> (x % 2) == 1 ==> (x % 2) == 1;\nloop invariant x % 2 == 0 ==> (x % 2) == 0 ==> (x % 2) == 0;\nloop invariant x % 2 == 1 ==> (x % 2) == 1 ==> (x % 2) == 1;\nloop invariant x % 2 == 0 ==> (x % 2) == 0 ==> (x % 2) == 0;\nloop invariant x % 2 == 1 ==> (x % 2) == 1 ==> (x % 2) == 1;\nloop invariant x % 2 == 0 ==> (x % 2) == 0 ==> (x % 2) == 0;\nloop invariant x % 2 == 1 ==> (x % 2) == 1 ==> (x % 2) == 1;\nloop invariant x % 2 == 0 ==> (x % 2) == 0 ==> (x % 2) == 0;\nloop invariant x % 2 == 1 ==> (x % 2) == 1 ==> (x % 2) == 1;\nloop invariant x % 2 == 0 ==> (x % 2) == 0 ==> (x % 2) == 0;\nloop invariant x % 2 == 1 ==> (x % 2) == 1 ==> (x % 2) == 1;\nloop invariant x % 2 == 0 ==> (x % 2) == 0 ==> (x % 2) == 0;\nloop invariant x % 2 == 1 ==> (x % 2) == 1 ==> (x % 2) == 1;\nloop invariant x % 2 == 0 ==> (x % 2) == 0 ==> (x % 2) == 0;\nloop invariant x % 2 == 1 ==> (x % 2) == 1 ==> (x % 2) == 1;\nloop invariant x % 2 == 0 ==> (x % 2) == 0 ==> (x % 2) == 0;\n*/\n```",
                "```\n/*@\nloop invariant 1 <= x;\nloop invariant x % 2 == y % 2;\nloop invariant x >= y;\nloop invariant x <= 99;\nloop invariant y >= 0;\nloop invariant y <= 99;\nloop invariant y % 2 == y % 2;\nloop invariant y % 2 == y % 2;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 99; loop invariant 0 <= y; loop invariant (x % 2) == (y % 2); loop invariant ((x % 2) == 0) ==> (x % 2) == ((y + x - 1) % 2); loop invariant (y % 2) == (2 * (y / 2)); loop invariant (y % 2) == ((y / 2) * 2); loop invariant (x % 2) == ((x / 2) * 2); loop invariant (x % 2) == (2 * (x / 2)); loop invariant (x % 2) == ((x % 2) % 2); loop invariant (x % 2) == ((x % 2) % 2); loop invariant ((x % 2) == 0) ==> (x % 2) == (y % 2); loop invariant ((x % 2) == 1) ==> (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant y % 2 == 0 ==> (x % 2) == 0;\nloop invariant y % 2 != 0 ==> (x % 2) == 1;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant (y % 2) == 0 ==> x % 2 == 0;\nloop invariant (y % 2) != 0 ==> x % 2 != 0;\nloop invariant x <= y;\nloop invariant x % 2 == y % 2;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant y % 2 == 0 ==> x % 2 == 0;\nloop invariant y % 2 != 0 ==> x % 2 != 0;\nloop invariant y % 2 == 0 ==> (x >= 2 * (x / 2));\nloop invariant y % 2 != 0 ==> (x >= (x / 2) + 1);\nloop invariant y % 2 == 0 ==> (x <= 2 * (x / 2));\nloop invariant y % 2 != 0 ==> (x <= (x / 2) + 1);\nloop invariant y % 2 == 0 ==> (y >= 2 * (x / 2));\nloop invariant y % 2 != 0 ==> (y >= (x / 2) + 1);\nloop invariant y % 2 == 0 ==> (y <= 2 * (x / 2));\nloop invariant y % 2 != 0 ==> (y <= (x / 2) + 1);\nloop invariant y % 2 == 0 ==> (x / 2) * 2 == x;\nloop invariant y % 2 != 0 ==> (x - 1) / 2 * 2 == x - 1;\nloop invariant y % 2 == 0 ==> (y / 2) * 2 == y;\nloop invariant y % 2 != 0 ==> (y - 1) / 2 * 2 == y - 1;\nloop invariant y % 2 == 0 ==> (x / 2) == x / 2;\nloop invariant y % 2 != 0 ==> (x - 1) / 2 == (x - 1) / 2;\nloop invariant y % 2 == 0 ==> (y / 2) == y / 2;\nloop invariant y % 2 != 0 ==> (y - 1) / 2 == (y - 1) / 2;\nloop invariant y % 2 == 0 ==> (x % 2) == 0;\nloop invariant y % 2 != 0 ==> (x % 2) == 1;\nloop invariant y % 2 == 0 ==> (y % 2) == 0;\nloop invariant y % 2 != 0 ==> (y % 2) == 1;\nloop invariant y % 2 == 0 ==> (x / 2) == y;\nloop invariant y % 2 != 0 ==> (x - 1) / 2 == y - 1;\nloop invariant y % 2 == 0 ==> (y / 2) == x;\nloop invariant y % 2 != 0 ==> (y - 1) / 2 == x - 1;\nloop invariant y % 2 == 0 ==> (x / 2) == y / 2;\nloop invariant y % 2 != 0 ==> (x - 1) / 2 == (y - 1) / 2;\nloop invariant y % 2 == 0 ==> (y / 2) == x / 2;\nloop invariant y % 2 != 0 ==> (y - 1) / 2 == (x - 1) / 2;\nloop invariant y % 2 == 0 ==> (x / 2) == y / 2;\nloop invariant y % 2 != 0 ==> (x - 1) / 2 == (y - 1) / 2;\nloop invariant y % 2 == 0 ==> (y / 2) == x / 2;\nloop invariant y % 2 != 0 ==> (y - 1) / 2 == (x - 1) / 2;\nloop invariant y % 2 == 0 ==> (x / 2) == y / 2;\nloop invariant y % 2 != 0 ==> (x - 1) / 2 == (y - 1) / 2;\nloop invariant y % 2 == 0 ==> (y / 2) == x / 2;\nloop invariant y % 2 != 0 ==> (y - 1) / 2 == (x - 1) / 2;\nloop invariant y % 2 == 0 ==> (x / 2) == y / 2;\nloop invariant y % 2 != 0 ==> (x - 1) / 2 == (y - 1) / 2;\nloop invariant y % 2 == 0 ==> (y / 2) == x / 2;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant 0 <= y <= 99;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 <= 99;\nloop invariant x % 2 == y % 2;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant 0 <= y <= 49999;\nloop invariant (x % 2) == (y % 2) ==> (x % 2) == (y % 2);\nloop invariant x >= y ==> x >= y;\nloop invariant x <= y ==> x <= y;\nloop invariant x < 99 ==> x < 99;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant y >= 0 ==> y >= 0;\nloop invariant y <= 49999 ==> y <= 49999;\nloop invariant y % 2 == 0 ==> y % 2 == 0;\nloop invariant y % 2 != 0 ==> y % 2 != 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant x % 2 == y % 2 ==> (y >= 0);\nloop invariant x % 2 == y % 2 ==> (y <= 99);\nloop invariant x % 2 == y % 2 ==> (x == 0 || x == 1 || x == 3 || x == 5 || x == 7 || x == 9 || x == 11 || x == 13 || x == 15 || x == 17 || x == 19 || x == 21 || x == 23 || x == 25 || x == 27 || x == 29 || x == 31 || x == 33 || x == 35 || x == 37 || x == 39 || x == 41 || x == 43 || x == 45 || x == 47 || x == 49 || x == 51 || x == 53 || x == 55 || x == 57 || x == 59 || x == 61 || x == 63 || x == 65 || x == 67 || x == 69 || x == 71 || x == 73 || x == 75 || x == 77 || x == 79 || x == 81 || x == 83 || x == 85 || x == 87 || x == 89 || x == 91 || x == 93 || x == 95 || x == 97 || x == 99);\nloop invariant (y % 2 == 0) ==> (x % 2 == y % 2 ==> (x == 0 || x == 2 || x == 4 || x == 6 || x == 8 || x == 10 || x == 12 || x == 14 || x == 16 || x == 18 || x == 20 || x == 22 || x == 24 || x == 26 || x == 28 || x == 30 || x == 32 || x == 34 || x == 36 || x == 38 || x == 40 || x == 42 || x == 44 || x == 46 || x == 48 || x == 50 || x == 52 || x == 54 || x == 56 || x == 58 || x == 60 || x == 62 || x == 64 || x == 66 || x == 68 || x == 70 || x == 72 || x == 74 || x == 76 || x == 78 || x == 80 || x == 82 || x == 84 || x == 86 || x == 88 || x == 90 || x == 92 || x == 94 || x == 96 || x == 98));\nloop invariant (y % 2 == 1) ==> (x % 2 == y % 2 ==> (x == 1 || x == 3 || x == 5 || x == 7 || x == 9 || x == 11 || x == 13 || x == 15 || x == 17 || x == 19 || x == 21 || x == 23 || x == 25 || x == 27 || x == 29 || x == 31 || x == 33 || x == 35 || x == 37 || x == 39 || x == 41 || x == 43 || x == 45 || x == 47 || x == 49 || x == 51 || x == 53 || x == 55 || x == 57 || x == 59 || x == 61 || x == 63 || x == 65 || x == 67 || x == 69 || x == 71 || x == 73 || x == 75 || x == 77 || x == 79 || x == 81 || x == 83 || x == 85 || x == 87 || x == 89 || x == 91 || x == 93 || x == 95 || x == 97 || x == 99));\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant y >= 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant if (y % 2 == 0) then x % 2 == 0 else x % 2 == 1;\nloop invariant x <= y;\nloop invariant x % 2 == y % 2;\nloop invariant 0 <= x <= 99;\nloop invariant if (y % 2 == 0) then x % 2 == 0 else x % 2 == 1;\nloop invariant x <= y;\nloop invariant x % 2 == y % 2;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0;\nloop invariant x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1;\nloop invariant 99 <= x <= 99;\nloop invariant x % 2 == (y % 2);\n*/\n```"
            ],
            "completions": [
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant y % 2 == y % 2;\nloop invariant x % 2 == x % 2;\nloop invariant x % 2 == (y % 2 ==> x % 2) ==> x % 2;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 16: syntax error (expression expected but predicate found). Ignoring loop annotation",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\nloop invariant i1: y % 2 == y % 2;\nloop invariant i2: x % 2 == x % 2;\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant x % 2 == y % 2;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is established but not preserved.\nloop invariant x % 2 == y % 2 is neither established nor preserved.\nAssertion x % 2 == y % 2: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\n\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 159,
                    "annotations": "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant i3;\nloop invariant i4;\nloop invariant i5;\nloop invariant i6;\nloop invariant i7;\nloop invariant i8;\nloop invariant i9;\nloop invariant i10;\nloop invariant i11;\nloop invariant i12;\nloop invariant i13;\nloop invariant i14;\nloop invariant i15;\nloop invariant i16;\nloop invariant i17;\nloop invariant i18;\nloop invariant i19;\nloop invariant i20;\nloop invariant i21;\nloop invariant i22;\nloop invariant i23;\nloop invariant i24;\nloop invariant i25;\nloop invariant i26;\nloop invariant i27;\nloop invariant i28;\nloop invariant i29;\nloop invariant i30;\nloop invariant i31;\nloop invariant i32;\nloop invariant i33;\nloop invariant i34;\nloop invariant i35;\nloop invariant i36;\nloop invariant i37;\nloop invariant i38;\nloop invariant i39;\nloop invariant i40;\nloop invariant i41;\nloop invariant i42;\nloop invariant i43;\nloop invariant i44;\nloop invariant i45;\nloop invariant i46;\nloop invariant i47;\nloop invariant i48;\nloop invariant i49;\nloop invariant i50;\nloop invariant i51;\nloop invariant i52;\nloop invariant i53;\nloop invariant i54;\nloop invariant i55;\nloop invariant i56;\nloop invariant i57;\nloop invariant i58;\nloop invariant i59;\nloop invariant i60;\nloop invariant i61;\nloop invariant i62;\nloop invariant i63;\nloop invariant i64;\nloop invariant i65;\nloop invariant i66;\nloop invariant i67;\nloop invariant i68;\nloop invariant i69;\nloop invariant i70;\nloop invariant i71;\nloop invariant i72;\nloop invariant i73;\nloop invariant i74;\nloop invariant i75;\nloop invariant i76;\nloop invariant i77;\nloop invariant i78;\nloop invariant i79;\nloop invariant i80;\nloop invariant i81;\nloop invariant i82;\nloop invariant i83;\nloop invariant i84;\nloop invariant i85;\nloop invariant i86;\nloop invariant i87;\nloop invariant i88;\nloop invariant i89;\nloop invariant i90;\nloop invariant i91;\nloop invariant i92;\nloop invariant i93;\nloop invariant i94;\nloop invariant i95;\nloop invariant i96;\nloop invariant i97;\nloop invariant i98;\nloop invariant i99;\nloop invariant i100;\nloop invariant i101;\nloop invariant i102;\nloop invariant i103;\nloop invariant i104;\nloop invariant i105;\nloop invariant i106;\nloop invariant i107;\nloop invariant i108;\nloop invariant i109;\nloop invariant i110;\nloop invariant i111;\nloop invariant i112;\nloop invariant i113;\nloop invariant i114;\nloop invariant i115;\nloop invariant i116;\nloop invariant i117;\nloop invariant i118;\nloop invariant i119;\nloop invariant i120;\nloop invariant i121;\nloop invariant i122;\nloop invariant i123;\nloop invariant i124;\nloop invariant i125;\nloop invariant i126;\nloop invariant i127;\nloop invariant i128;\nloop invariant i129;\nloop invariant i130;\nloop invariant i131;\nloop invariant i132;\nloop invariant i133;\nloop invariant i134;\nloop invariant i135;\nloop invariant i136;\nloop invariant i137;\nloop invariant i138;\nloop invariant i139;\nloop invariant i140;\nloop invariant i141;\nloop invariant i142;\nloop invariant i143;\nloop invariant i144;\nloop invariant i145;\nloop invariant i146;\nloop invariant i147;\nloop invariant i148;\nloop invariant i149;\nloop invariant i150;\nloop invariant i151;\nloop invariant i152;\nloop invariant i153;\nloop invariant i154;\nloop invariant i155;\nloop invariant i156;\nloop invariant i157;\nloop invariant i158;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 14: unbound logic variable i1. Ignoring loop annotation",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant 0 <= y < 100;\nloop invariant (x % 2) == (y % 2) ==> (x % 2) == 0 ==> (x % 2) == 0;\nloop invariant (x % 2) == (y % 2) ==> (x % 2) == 1 ==> (x % 2) == 1;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant x % 2 == 1 ==> x % 2 == 1;\nloop invariant x % 2 == 0 ==> y % 2 == 0;\nloop invariant x % 2 == 1 ==> y % 2 == 1;\nloop invariant x % 2 == 0 ==> (x % 2) == 0 ==> (x % 2) == 0;\nloop invariant x % 2 == 1 ==> (x % 2) == 1 ==> (x % 2) == 1;\nloop invariant x % 2 == 0 ==> (x % 2) == 0 ==> (x % 2) == 0;\nloop invariant x % 2 == 1 ==> (x % 2) == 1 ==> (x % 2) == 1;\nloop invariant x % 2 == 0 ==> (x % 2) == 0 ==> (x % 2) == 0;\nloop invariant x % 2 == 1 ==> (x % 2) == 1 ==> (x % 2) == 1;\nloop invariant x % 2 == 0 ==> (x % 2) == 0 ==> (x % 2) == 0;\nloop invariant x % 2 == 1 ==> (x % 2) == 1 ==> (x % 2) == 1;\nloop invariant x % 2 == 0 ==> (x % 2) == 0 ==> (x % 2) == 0;\nloop invariant x % 2 == 1 ==> (x % 2) == 1 ==> (x % 2) == 1;\nloop invariant x % 2 == 0 ==> (x % 2) == 0 ==> (x % 2) == 0;\nloop invariant x % 2 == 1 ==> (x % 2) == 1 ==> (x % 2) == 1;\nloop invariant x % 2 == 0 ==> (x % 2) == 0 ==> (x % 2) == 0;\nloop invariant x % 2 == 1 ==> (x % 2) == 1 ==> (x % 2) == 1;\nloop invariant x % 2 == 0 ==> (x % 2) == 0 ==> (x % 2) == 0;\nloop invariant x % 2 == 1 ==> (x % 2) == 1 ==> (x % 2) == 1;\nloop invariant x % 2 == 0 ==> (x % 2) == 0 ==> (x % 2) == 0;\nloop invariant x % 2 == 1 ==> (x % 2) == 1 ==> (x % 2) == 1;\nloop invariant x % 2 == 0 ==> (x % 2) == 0 ==> (x % 2) == 0;\nloop invariant x % 2 == 1 ==> (x % 2) == 1 ==> (x % 2) == 1;\nloop invariant x % 2 == 0 ==> (x % 2) == 0 ==> (x % 2) == 0;\nloop invariant x % 2 == 1 ==> (x % 2) == 1 ==> (x % 2) == 1;\nloop invariant x % 2 == 0 ==> (x % 2) == 0 ==> (x % 2) == 0;\nloop invariant x % 2 == 1 ==> (x % 2) == 1 ==> (x % 2) == 1;\nloop invariant x % 2 == 0 ==> (x % 2) == 0 ==> (x % 2) == 0;\nloop invariant x % 2 == 1 ==> (x % 2) == 1 ==> (x % 2) == 1;\nloop invariant x % 2 == 0 ==> (x % 2) == 0 ==> (x % 2) == 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is established but not preserved.\nloop invariant 0 <= y < 100 is preserved but not established.\nloop invariant (x % 2) == (y % 2) ==> (x % 2) == 0 ==> (x % 2) == 0 is partially proven to be inductive.\nloop invariant (x % 2) == (y % 2) ==> (x % 2) == 1 ==> (x % 2) == 1 is partially proven to be inductive.\nloop invariant x % 2 == 0 ==> x % 2 == 0 is partially proven to be inductive.\nloop invariant x % 2 == 1 ==> x % 2 == 1 is partially proven to be inductive.\nloop invariant x % 2 == 0 ==> y % 2 == 0 is neither established nor preserved.\nloop invariant x % 2 == 1 ==> y % 2 == 1 is partially proven to be inductive.\nloop invariant x % 2 == 0 ==> (x % 2) == 0 ==> (x % 2) == 0 is partially proven to be inductive.\nloop invariant x % 2 == 1 ==> (x % 2) == 1 ==> (x % 2) == 1 is partially proven to be inductive.\nAssertion x % 2 == y % 2: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\n\n\nloop invariant i3: (x % 2) == (y % 2) ==> (x % 2) == 0 ==> (x % 2) == 0;\nloop invariant i4: (x % 2) == (y % 2) ==> (x % 2) == 1 ==> (x % 2) == 1;\nloop invariant i5: x % 2 == 0 ==> x % 2 == 0;\nloop invariant i6: x % 2 == 1 ==> x % 2 == 1;\n\nloop invariant i8: x % 2 == 1 ==> y % 2 == 1;\nloop invariant i9: x % 2 == 0 ==> (x % 2) == 0 ==> (x % 2) == 0;\nloop invariant i10: x % 2 == 1 ==> (x % 2) == 1 ==> (x % 2) == 1;\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 1 <= x;\nloop invariant x % 2 == y % 2;\nloop invariant x >= y;\nloop invariant x <= 99;\nloop invariant y >= 0;\nloop invariant y <= 99;\nloop invariant y % 2 == y % 2;\nloop invariant y % 2 == y % 2;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= x is preserved but not established.\nloop invariant x % 2 == y % 2 is partially proven to be inductive.\nloop invariant x >= y is partially proven to be inductive.\nloop invariant x <= 99 is partially proven to be inductive.\nloop invariant y >= 0 is partially proven to be inductive.\nloop invariant y <= 99 is partially proven to be inductive.\nloop invariant y % 2 == y % 2 is partially proven to be inductive.\nAssertion x % 2 == y % 2: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\n\n\n\n\nloop invariant i5: y >= 0;\n\nloop invariant i7: y % 2 == y % 2;\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 99; loop invariant 0 <= y; loop invariant (x % 2) == (y % 2); loop invariant ((x % 2) == 0) ==> (x % 2) == ((y + x - 1) % 2); loop invariant (y % 2) == (2 * (y / 2)); loop invariant (y % 2) == ((y / 2) * 2); loop invariant (x % 2) == ((x / 2) * 2); loop invariant (x % 2) == (2 * (x / 2)); loop invariant (x % 2) == ((x % 2) % 2); loop invariant (x % 2) == ((x % 2) % 2); loop invariant ((x % 2) == 0) ==> (x % 2) == (y % 2); loop invariant ((x % 2) == 1) ==> (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 99; loop invariant 0 <= y; loop invariant (x % 2) == (y % 2); loop invariant ((x % 2) == 0) ==> (x % 2) == ((y + x - 1) % 2); loop invariant (y % 2) == (2 * (y / 2)); loop invariant (y % 2) == ((y / 2) * 2); loop invariant (x % 2) == ((x / 2) * 2); loop invariant (x % 2) == (2 * (x / 2)); loop invariant (x % 2) == ((x % 2) % 2); loop invariant (x % 2) == ((x % 2) % 2); loop invariant ((x % 2) == 0) ==> (x % 2) == (y % 2); loop invariant ((x % 2) == 1) ==> (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2) is partially proven to be inductive.\nAssertion x % 2 == y % 2: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\nloop invariant i1: 0 <= x <= 99; loop invariant 0 <= y; loop invariant (x % 2) == (y % 2); loop invariant ((x % 2) == 0) ==> (x % 2) == ((y + x - 1) % 2); loop invariant (y % 2) == (2 * (y / 2)); loop invariant (y % 2) == ((y / 2) * 2); loop invariant (x % 2) == ((x / 2) * 2); loop invariant (x % 2) == (2 * (x / 2)); loop invariant (x % 2) == ((x % 2) % 2); loop invariant (x % 2) == ((x % 2) % 2); loop invariant ((x % 2) == 0) ==> (x % 2) == (y % 2); loop invariant ((x % 2) == 1) ==> (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2);\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant y % 2 == 0 ==> (x % 2) == 0;\nloop invariant y % 2 != 0 ==> (x % 2) == 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is established but not preserved.\nloop invariant y % 2 == 0 ==> (x % 2) == 0 is partially proven to be inductive.\nloop invariant y % 2 != 0 ==> (x % 2) == 1 is neither established nor preserved.\nAssertion x % 2 == y % 2: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\n\nloop invariant i2: y % 2 == 0 ==> (x % 2) == 0;\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant (y % 2) == 0 ==> x % 2 == 0;\nloop invariant (y % 2) != 0 ==> x % 2 != 0;\nloop invariant x <= y;\nloop invariant x % 2 == y % 2;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is established but not preserved.\nloop invariant (y % 2) == 0 ==> x % 2 == 0 is partially proven to be inductive.\nloop invariant (y % 2) != 0 ==> x % 2 != 0 is neither established nor preserved.\nloop invariant x <= y is established but not preserved.\nloop invariant x % 2 == y % 2 is partially proven to be inductive.\nAssertion x % 2 == y % 2: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\n\nloop invariant i2: (y % 2) == 0 ==> x % 2 == 0;\n\n\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 9,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant y % 2 == 0 ==> x % 2 == 0;\nloop invariant y % 2 != 0 ==> x % 2 != 0;\nloop invariant y % 2 == 0 ==> (x >= 2 * (x / 2));\nloop invariant y % 2 != 0 ==> (x >= (x / 2) + 1);\nloop invariant y % 2 == 0 ==> (x <= 2 * (x / 2));\nloop invariant y % 2 != 0 ==> (x <= (x / 2) + 1);\nloop invariant y % 2 == 0 ==> (y >= 2 * (x / 2));\nloop invariant y % 2 != 0 ==> (y >= (x / 2) + 1);\nloop invariant y % 2 == 0 ==> (y <= 2 * (x / 2));\nloop invariant y % 2 != 0 ==> (y <= (x / 2) + 1);\nloop invariant y % 2 == 0 ==> (x / 2) * 2 == x;\nloop invariant y % 2 != 0 ==> (x - 1) / 2 * 2 == x - 1;\nloop invariant y % 2 == 0 ==> (y / 2) * 2 == y;\nloop invariant y % 2 != 0 ==> (y - 1) / 2 * 2 == y - 1;\nloop invariant y % 2 == 0 ==> (x / 2) == x / 2;\nloop invariant y % 2 != 0 ==> (x - 1) / 2 == (x - 1) / 2;\nloop invariant y % 2 == 0 ==> (y / 2) == y / 2;\nloop invariant y % 2 != 0 ==> (y - 1) / 2 == (y - 1) / 2;\nloop invariant y % 2 == 0 ==> (x % 2) == 0;\nloop invariant y % 2 != 0 ==> (x % 2) == 1;\nloop invariant y % 2 == 0 ==> (y % 2) == 0;\nloop invariant y % 2 != 0 ==> (y % 2) == 1;\nloop invariant y % 2 == 0 ==> (x / 2) == y;\nloop invariant y % 2 != 0 ==> (x - 1) / 2 == y - 1;\nloop invariant y % 2 == 0 ==> (y / 2) == x;\nloop invariant y % 2 != 0 ==> (y - 1) / 2 == x - 1;\nloop invariant y % 2 == 0 ==> (x / 2) == y / 2;\nloop invariant y % 2 != 0 ==> (x - 1) / 2 == (y - 1) / 2;\nloop invariant y % 2 == 0 ==> (y / 2) == x / 2;\nloop invariant y % 2 != 0 ==> (y - 1) / 2 == (x - 1) / 2;\nloop invariant y % 2 == 0 ==> (x / 2) == y / 2;\nloop invariant y % 2 != 0 ==> (x - 1) / 2 == (y - 1) / 2;\nloop invariant y % 2 == 0 ==> (y / 2) == x / 2;\nloop invariant y % 2 != 0 ==> (y - 1) / 2 == (x - 1) / 2;\nloop invariant y % 2 == 0 ==> (x / 2) == y / 2;\nloop invariant y % 2 != 0 ==> (x - 1) / 2 == (y - 1) / 2;\nloop invariant y % 2 == 0 ==> (y / 2) == x / 2;\nloop invariant y % 2 != 0 ==> (y - 1) / 2 == (x - 1) / 2;\nloop invariant y % 2 == 0 ==> (x / 2) == y / 2;\nloop invariant y % 2 != 0 ==> (x - 1) / 2 == (y - 1) / 2;\nloop invariant y % 2 == 0 ==> (y / 2) == x / 2;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x % 2 == 0 is partially proven to be inductive.\nloop invariant y % 2 != 0 ==> x % 2 != 0 is neither established nor preserved.\nloop invariant y % 2 == 0 ==> (x >= 2 * (x / 2)) is partially proven to be inductive.\nloop invariant y % 2 != 0 ==> (x >= (x / 2) + 1) is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> (x <= 2 * (x / 2)) is partially proven to be inductive.\nloop invariant y % 2 != 0 ==> (x <= (x / 2) + 1) is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> (y >= 2 * (x / 2)) is established but not preserved.\nloop invariant y % 2 != 0 ==> (y >= (x / 2) + 1) is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> (y <= 2 * (x / 2)) is preserved but not established.\nloop invariant y % 2 != 0 ==> (y <= (x / 2) + 1) is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> (x / 2) * 2 == x is partially proven to be inductive.\nloop invariant y % 2 != 0 ==> (x - 1) / 2 * 2 == x - 1 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> (y / 2) * 2 == y is partially proven to be inductive.\nloop invariant y % 2 != 0 ==> (y - 1) / 2 * 2 == y - 1 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> (x / 2) == x / 2 is partially proven to be inductive.\nloop invariant y % 2 != 0 ==> (x - 1) / 2 == (x - 1) / 2 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> (y / 2) == y / 2 is partially proven to be inductive.\nloop invariant y % 2 != 0 ==> (y - 1) / 2 == (y - 1) / 2 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> (x % 2) == 0 is partially proven to be inductive.\nloop invariant y % 2 != 0 ==> (x % 2) == 1 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> (y % 2) == 0 is partially proven to be inductive.\nloop invariant y % 2 != 0 ==> (y % 2) == 1 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> (x / 2) == y is partially proven to be inductive.\nloop invariant y % 2 != 0 ==> (x - 1) / 2 == y - 1 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> (y / 2) == x is partially proven to be inductive.\nloop invariant y % 2 != 0 ==> (y - 1) / 2 == x - 1 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> (x / 2) == y / 2 is partially proven to be inductive.\nloop invariant y % 2 != 0 ==> (x - 1) / 2 == (y - 1) / 2 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> (y / 2) == x / 2 is partially proven to be inductive.\nloop invariant y % 2 != 0 ==> (y - 1) / 2 == (x - 1) / 2 is partially proven to be inductive.\nAssertion x % 2 == y % 2: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\n\nloop invariant i2: y % 2 == 0 ==> x % 2 == 0;\n\nloop invariant i4: y % 2 == 0 ==> (x >= 2 * (x / 2));\n\nloop invariant i6: y % 2 == 0 ==> (x <= 2 * (x / 2));\n\n\n\n\n\nloop invariant i12: y % 2 == 0 ==> (x / 2) * 2 == x;\n\nloop invariant i14: y % 2 == 0 ==> (y / 2) * 2 == y;\nloop invariant i15: y % 2 != 0 ==> (y - 1) / 2 * 2 == y - 1;\nloop invariant i16: y % 2 == 0 ==> (x / 2) == x / 2;\nloop invariant i17: y % 2 != 0 ==> (x - 1) / 2 == (x - 1) / 2;\nloop invariant i18: y % 2 == 0 ==> (y / 2) == y / 2;\nloop invariant i19: y % 2 != 0 ==> (y - 1) / 2 == (y - 1) / 2;\nloop invariant i20: y % 2 == 0 ==> (x % 2) == 0;\n\nloop invariant i22: y % 2 == 0 ==> (y % 2) == 0;\nloop invariant i23: y % 2 != 0 ==> (y % 2) == 1;\n\n\n\n\n\n\n\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant 0 <= y <= 99;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 <= 99;\nloop invariant x % 2 == y % 2;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is established but not preserved.\nloop invariant 0 <= y <= 99 is preserved but not established.\nloop invariant (x + y) % 2 == 0 is neither established nor preserved.\nloop invariant (x + y) % 2 <= 99 is partially proven to be inductive.\nloop invariant x % 2 == y % 2 is partially proven to be inductive.\nAssertion x % 2 == y % 2: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\n\n\n\nloop invariant i4: (x + y) % 2 <= 99;\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant 0 <= y <= 49999;\nloop invariant (x % 2) == (y % 2) ==> (x % 2) == (y % 2);\nloop invariant x >= y ==> x >= y;\nloop invariant x <= y ==> x <= y;\nloop invariant x < 99 ==> x < 99;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant y >= 0 ==> y >= 0;\nloop invariant y <= 49999 ==> y <= 49999;\nloop invariant y % 2 == 0 ==> y % 2 == 0;\nloop invariant y % 2 != 0 ==> y % 2 != 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is established but not preserved.\nloop invariant 0 <= y <= 49999 is preserved but not established.\nloop invariant (x % 2) == (y % 2) ==> (x % 2) == (y % 2) is partially proven to be inductive.\nloop invariant x >= y ==> x >= y is partially proven to be inductive.\nloop invariant x <= y ==> x <= y is partially proven to be inductive.\nloop invariant x < 99 ==> x < 99 is partially proven to be inductive.\nloop invariant x >= 0 ==> x >= 0 is partially proven to be inductive.\nloop invariant y >= 0 ==> y >= 0 is partially proven to be inductive.\nloop invariant y <= 49999 ==> y <= 49999 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> y % 2 == 0 is partially proven to be inductive.\nloop invariant y % 2 != 0 ==> y % 2 != 0 is partially proven to be inductive.\nAssertion x % 2 == y % 2: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\n\n\nloop invariant i3: (x % 2) == (y % 2) ==> (x % 2) == (y % 2);\nloop invariant i4: x >= y ==> x >= y;\nloop invariant i5: x <= y ==> x <= y;\nloop invariant i6: x < 99 ==> x < 99;\nloop invariant i7: x >= 0 ==> x >= 0;\nloop invariant i8: y >= 0 ==> y >= 0;\nloop invariant i9: y <= 49999 ==> y <= 49999;\nloop invariant i10: y % 2 == 0 ==> y % 2 == 0;\nloop invariant i11: y % 2 != 0 ==> y % 2 != 0;\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant x % 2 == y % 2 ==> (y >= 0);\nloop invariant x % 2 == y % 2 ==> (y <= 99);\nloop invariant x % 2 == y % 2 ==> (x == 0 || x == 1 || x == 3 || x == 5 || x == 7 || x == 9 || x == 11 || x == 13 || x == 15 || x == 17 || x == 19 || x == 21 || x == 23 || x == 25 || x == 27 || x == 29 || x == 31 || x == 33 || x == 35 || x == 37 || x == 39 || x == 41 || x == 43 || x == 45 || x == 47 || x == 49 || x == 51 || x == 53 || x == 55 || x == 57 || x == 59 || x == 61 || x == 63 || x == 65 || x == 67 || x == 69 || x == 71 || x == 73 || x == 75 || x == 77 || x == 79 || x == 81 || x == 83 || x == 85 || x == 87 || x == 89 || x == 91 || x == 93 || x == 95 || x == 97 || x == 99);\nloop invariant (y % 2 == 0) ==> (x % 2 == y % 2 ==> (x == 0 || x == 2 || x == 4 || x == 6 || x == 8 || x == 10 || x == 12 || x == 14 || x == 16 || x == 18 || x == 20 || x == 22 || x == 24 || x == 26 || x == 28 || x == 30 || x == 32 || x == 34 || x == 36 || x == 38 || x == 40 || x == 42 || x == 44 || x == 46 || x == 48 || x == 50 || x == 52 || x == 54 || x == 56 || x == 58 || x == 60 || x == 62 || x == 64 || x == 66 || x == 68 || x == 70 || x == 72 || x == 74 || x == 76 || x == 78 || x == 80 || x == 82 || x == 84 || x == 86 || x == 88 || x == 90 || x == 92 || x == 94 || x == 96 || x == 98));\nloop invariant (y % 2 == 1) ==> (x % 2 == y % 2 ==> (x == 1 || x == 3 || x == 5 || x == 7 || x == 9 || x == 11 || x == 13 || x == 15 || x == 17 || x == 19 || x == 21 || x == 23 || x == 25 || x == 27 || x == 29 || x == 31 || x == 33 || x == 35 || x == 37 || x == 39 || x == 41 || x == 43 || x == 45 || x == 47 || x == 49 || x == 51 || x == 53 || x == 55 || x == 57 || x == 59 || x == 61 || x == 63 || x == 65 || x == 67 || x == 69 || x == 71 || x == 73 || x == 75 || x == 77 || x == 79 || x == 81 || x == 83 || x == 85 || x == 87 || x == 89 || x == 91 || x == 93 || x == 95 || x == 97 || x == 99));\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is partially proven to be inductive.\nloop invariant x % 2 == y % 2 ==> (y >= 0) is partially proven to be inductive.\nloop invariant x % 2 == y % 2 ==> (y <= 99) is neither established nor preserved.\nloop invariant x % 2 == y % 2 ==> (x == 0 || x == 1 || x == 3 || x == 5 || x == 7 || x == 9 || x == 11 || x == 13 || x == 15 || x == 17 || x == 19 || x == 21 || x == 23 || x == 25 || x == 27 || x == 29 || x == 31 || x == 33 || x == 35 || x == 37 || x == 39 || x == 41 || x == 43 || x == 45 || x == 47 || x == 49 || x == 51 || x == 53 || x == 55 || x == 57 || x == 59 || x == 61 || x == 63 || x == 65 || x == 67 || x == 69 || x == 71 || x == 73 || x == 75 || x == 77 || x == 79 || x == 81 || x == 83 || x == 85 || x == 87 || x == 89 || x == 91 || x == 93 || x == 95 || x == 97 || x == 99) is established but not preserved.\nloop invariant (y % 2 == 0) ==> (x % 2 == y % 2 ==> (x == 0 || x == 2 || x == 4 || x == 6 || x == 8 || x == 10 || x == 12 || x == 14 || x == 16 || x == 18 || x == 20 || x == 22 || x == 24 || x == 26 || x == 28 || x == 30 || x == 32 || x == 34 || x == 36 || x == 38 || x == 40 || x == 42 || x == 44 || x == 46 || x == 48 || x == 50 || x == 52 || x == 54 || x == 56 || x == 58 || x == 60 || x == 62 || x == 64 || x == 66 || x == 68 || x == 70 || x == 72 || x == 74 || x == 76 || x == 78 || x == 80 || x == 82 || x == 84 || x == 86 || x == 88 || x == 90 || x == 92 || x == 94 || x == 96 || x == 98)) is partially proven to be inductive.\nloop invariant (y % 2 == 1) ==> (x % 2 == y % 2 ==> (x == 1 || x == 3 || x == 5 || x == 7 || x == 9 || x == 11 || x == 13 || x == 15 || x == 17 || x == 19 || x == 21 || x == 23 || x == 25 || x == 27 || x == 29 || x == 31 || x == 33 || x == 35 || x == 37 || x == 39 || x == 41 || x == 43 || x == 45 || x == 47 || x == 49 || x == 51 || x == 53 || x == 55 || x == 57 || x == 59 || x == 61 || x == 63 || x == 65 || x == 67 || x == 69 || x == 71 || x == 73 || x == 75 || x == 77 || x == 79 || x == 81 || x == 83 || x == 85 || x == 87 || x == 89 || x == 91 || x == 93 || x == 95 || x == 97 || x == 99)) is partially proven to be inductive.\nAssertion x % 2 == y % 2: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\n\nloop invariant i2: x % 2 == y % 2 ==> (y >= 0);\n\n\n\nloop invariant i6: (y % 2 == 1) ==> (x % 2 == y % 2 ==> (x == 1 || x == 3 || x == 5 || x == 7 || x == 9 || x == 11 || x == 13 || x == 15 || x == 17 || x == 19 || x == 21 || x == 23 || x == 25 || x == 27 || x == 29 || x == 31 || x == 33 || x == 35 || x == 37 || x == 39 || x == 41 || x == 43 || x == 45 || x == 47 || x == 49 || x == 51 || x == 53 || x == 55 || x == 57 || x == 59 || x == 61 || x == 63 || x == 65 || x == 67 || x == 69 || x == 71 || x == 73 || x == 75 || x == 77 || x == 79 || x == 81 || x == 83 || x == 85 || x == 87 || x == 89 || x == 91 || x == 93 || x == 95 || x == 97 || x == 99));\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant y >= 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is established but not preserved.\nloop invariant y >= 0 is partially proven to be inductive.\nAssertion x % 2 == y % 2: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\n\nloop invariant i2: y >= 0;\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant if (y % 2 == 0) then x % 2 == 0 else x % 2 == 1;\nloop invariant x <= y;\nloop invariant x % 2 == y % 2;\nloop invariant 0 <= x <= 99;\nloop invariant if (y % 2 == 0) then x % 2 == 0 else x % 2 == 1;\nloop invariant x <= y;\nloop invariant x % 2 == y % 2;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 15: unexpected token '('",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\n\n\n\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0;\nloop invariant x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1;\nloop invariant 99 <= x <= 99;\nloop invariant x % 2 == (y % 2);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is partially proven to be inductive.\nloop invariant x % 2 == y % 2 is preserved but not established.\nloop invariant x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 is partially proven to be inductive.\nloop invariant x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1 is partially proven to be inductive.\nloop invariant 99 <= x <= 99 is preserved but not established.\nloop invariant x % 2 == (y % 2) is partially proven to be inductive.\nAssertion x % 2 == y % 2: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\n\n\nloop invariant i3: x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0;\nloop invariant i4: x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1;\n\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                }
            ],
            "checker_output_for_combined_annotations": false,
            "checker_message_for_combined_annotations": "Annotation error on line 243: unexpected token '('",
            "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\nloop invariant i1: y % 2 == y % 2;\nloop invariant i2: x % 2 == x % 2;\nloop invariant i3: x % 2 == (y % 2 ==> x % 2) ==> x % 2;\nloop invariant i4: 0 <= x <= 99;\nloop invariant i5: x % 2 == y % 2;\nloop invariant i6: i1;\nloop invariant i7: i2;\nloop invariant i8: i3;\nloop invariant i9: i4;\nloop invariant i10: i5;\nloop invariant i11: i6;\nloop invariant i12: i7;\nloop invariant i13: i8;\nloop invariant i14: i9;\nloop invariant i15: i10;\nloop invariant i16: i11;\nloop invariant i17: i12;\nloop invariant i18: i13;\nloop invariant i19: i14;\nloop invariant i20: i15;\nloop invariant i21: i16;\nloop invariant i22: i17;\nloop invariant i23: i18;\nloop invariant i24: i19;\nloop invariant i25: i20;\nloop invariant i26: i21;\nloop invariant i27: i22;\nloop invariant i28: i23;\nloop invariant i29: i24;\nloop invariant i30: i25;\nloop invariant i31: i26;\nloop invariant i32: i27;\nloop invariant i33: i28;\nloop invariant i34: i29;\nloop invariant i35: i30;\nloop invariant i36: i31;\nloop invariant i37: i32;\nloop invariant i38: i33;\nloop invariant i39: i34;\nloop invariant i40: i35;\nloop invariant i41: i36;\nloop invariant i42: i37;\nloop invariant i43: i38;\nloop invariant i44: i39;\nloop invariant i45: i40;\nloop invariant i46: i41;\nloop invariant i47: i42;\nloop invariant i48: i43;\nloop invariant i49: i44;\nloop invariant i50: i45;\nloop invariant i51: i46;\nloop invariant i52: i47;\nloop invariant i53: i48;\nloop invariant i54: i49;\nloop invariant i55: i50;\nloop invariant i56: i51;\nloop invariant i57: i52;\nloop invariant i58: i53;\nloop invariant i59: i54;\nloop invariant i60: i55;\nloop invariant i61: i56;\nloop invariant i62: i57;\nloop invariant i63: i58;\nloop invariant i64: i59;\nloop invariant i65: i60;\nloop invariant i66: i61;\nloop invariant i67: i62;\nloop invariant i68: i63;\nloop invariant i69: i64;\nloop invariant i70: i65;\nloop invariant i71: i66;\nloop invariant i72: i67;\nloop invariant i73: i68;\nloop invariant i74: i69;\nloop invariant i75: i70;\nloop invariant i76: i71;\nloop invariant i77: i72;\nloop invariant i78: i73;\nloop invariant i79: i74;\nloop invariant i80: i75;\nloop invariant i81: i76;\nloop invariant i82: i77;\nloop invariant i83: i78;\nloop invariant i84: i79;\nloop invariant i85: i80;\nloop invariant i86: i81;\nloop invariant i87: i82;\nloop invariant i88: i83;\nloop invariant i89: i84;\nloop invariant i90: i85;\nloop invariant i91: i86;\nloop invariant i92: i87;\nloop invariant i93: i88;\nloop invariant i94: i89;\nloop invariant i95: i90;\nloop invariant i96: i91;\nloop invariant i97: i92;\nloop invariant i98: i93;\nloop invariant i99: i94;\nloop invariant i100: i95;\nloop invariant i101: i96;\nloop invariant i102: i97;\nloop invariant i103: i98;\nloop invariant i104: i99;\nloop invariant i105: i100;\nloop invariant i106: i101;\nloop invariant i107: i102;\nloop invariant i108: i103;\nloop invariant i109: i104;\nloop invariant i110: i105;\nloop invariant i111: i106;\nloop invariant i112: i107;\nloop invariant i113: i108;\nloop invariant i114: i109;\nloop invariant i115: i110;\nloop invariant i116: i111;\nloop invariant i117: i112;\nloop invariant i118: i113;\nloop invariant i119: i114;\nloop invariant i120: i115;\nloop invariant i121: i116;\nloop invariant i122: i117;\nloop invariant i123: i118;\nloop invariant i124: i119;\nloop invariant i125: i120;\nloop invariant i126: i121;\nloop invariant i127: i122;\nloop invariant i128: i123;\nloop invariant i129: i124;\nloop invariant i130: i125;\nloop invariant i131: i126;\nloop invariant i132: i127;\nloop invariant i133: i128;\nloop invariant i134: i129;\nloop invariant i135: i130;\nloop invariant i136: i131;\nloop invariant i137: i132;\nloop invariant i138: i133;\nloop invariant i139: i134;\nloop invariant i140: i135;\nloop invariant i141: i136;\nloop invariant i142: i137;\nloop invariant i143: i138;\nloop invariant i144: i139;\nloop invariant i145: i140;\nloop invariant i146: i141;\nloop invariant i147: i142;\nloop invariant i148: i143;\nloop invariant i149: i144;\nloop invariant i150: i145;\nloop invariant i151: i146;\nloop invariant i152: i147;\nloop invariant i153: i148;\nloop invariant i154: i149;\nloop invariant i155: i150;\nloop invariant i156: i151;\nloop invariant i157: i152;\nloop invariant i158: i153;\nloop invariant i159: i154;\nloop invariant i160: i155;\nloop invariant i161: i156;\nloop invariant i162: i157;\nloop invariant i163: i158;\nloop invariant i164: 0 <= y < 100;\nloop invariant i165: (x % 2) == (y % 2) ==> (x % 2) == 0 ==> (x % 2) == 0;\nloop invariant i166: (x % 2) == (y % 2) ==> (x % 2) == 1 ==> (x % 2) == 1;\nloop invariant i167: x % 2 == 0 ==> x % 2 == 0;\nloop invariant i168: x % 2 == 1 ==> x % 2 == 1;\nloop invariant i169: x % 2 == 0 ==> y % 2 == 0;\nloop invariant i170: x % 2 == 1 ==> y % 2 == 1;\nloop invariant i171: x % 2 == 0 ==> (x % 2) == 0 ==> (x % 2) == 0;\nloop invariant i172: x % 2 == 1 ==> (x % 2) == 1 ==> (x % 2) == 1;\nloop invariant i173: 1 <= x;\nloop invariant i174: x >= y;\nloop invariant i175: x <= 99;\nloop invariant i176: y >= 0;\nloop invariant i177: y <= 99;\nloop invariant i178: 0 <= x <= 99; loop invariant 0 <= y; loop invariant (x % 2) == (y % 2); loop invariant ((x % 2) == 0) ==> (x % 2) == ((y + x - 1) % 2); loop invariant (y % 2) == (2 * (y / 2)); loop invariant (y % 2) == ((y / 2) * 2); loop invariant (x % 2) == ((x / 2) * 2); loop invariant (x % 2) == (2 * (x / 2)); loop invariant (x % 2) == ((x % 2) % 2); loop invariant (x % 2) == ((x % 2) % 2); loop invariant ((x % 2) == 0) ==> (x % 2) == (y % 2); loop invariant ((x % 2) == 1) ==> (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2);\nloop invariant i179: y % 2 == 0 ==> (x % 2) == 0;\nloop invariant i180: y % 2 != 0 ==> (x % 2) == 1;\nloop invariant i181: (y % 2) == 0 ==> x % 2 == 0;\nloop invariant i182: (y % 2) != 0 ==> x % 2 != 0;\nloop invariant i183: x <= y;\nloop invariant i184: y % 2 == 0 ==> x % 2 == 0;\nloop invariant i185: y % 2 != 0 ==> x % 2 != 0;\nloop invariant i186: y % 2 == 0 ==> (x >= 2 * (x / 2));\nloop invariant i187: y % 2 != 0 ==> (x >= (x / 2) + 1);\nloop invariant i188: y % 2 == 0 ==> (x <= 2 * (x / 2));\nloop invariant i189: y % 2 != 0 ==> (x <= (x / 2) + 1);\nloop invariant i190: y % 2 == 0 ==> (y >= 2 * (x / 2));\nloop invariant i191: y % 2 != 0 ==> (y >= (x / 2) + 1);\nloop invariant i192: y % 2 == 0 ==> (y <= 2 * (x / 2));\nloop invariant i193: y % 2 != 0 ==> (y <= (x / 2) + 1);\nloop invariant i194: y % 2 == 0 ==> (x / 2) * 2 == x;\nloop invariant i195: y % 2 != 0 ==> (x - 1) / 2 * 2 == x - 1;\nloop invariant i196: y % 2 == 0 ==> (y / 2) * 2 == y;\nloop invariant i197: y % 2 != 0 ==> (y - 1) / 2 * 2 == y - 1;\nloop invariant i198: y % 2 == 0 ==> (x / 2) == x / 2;\nloop invariant i199: y % 2 != 0 ==> (x - 1) / 2 == (x - 1) / 2;\nloop invariant i200: y % 2 == 0 ==> (y / 2) == y / 2;\nloop invariant i201: y % 2 != 0 ==> (y - 1) / 2 == (y - 1) / 2;\nloop invariant i202: y % 2 == 0 ==> (y % 2) == 0;\nloop invariant i203: y % 2 != 0 ==> (y % 2) == 1;\nloop invariant i204: y % 2 == 0 ==> (x / 2) == y;\nloop invariant i205: y % 2 != 0 ==> (x - 1) / 2 == y - 1;\nloop invariant i206: y % 2 == 0 ==> (y / 2) == x;\nloop invariant i207: y % 2 != 0 ==> (y - 1) / 2 == x - 1;\nloop invariant i208: y % 2 == 0 ==> (x / 2) == y / 2;\nloop invariant i209: y % 2 != 0 ==> (x - 1) / 2 == (y - 1) / 2;\nloop invariant i210: y % 2 == 0 ==> (y / 2) == x / 2;\nloop invariant i211: y % 2 != 0 ==> (y - 1) / 2 == (x - 1) / 2;\nloop invariant i212: 0 <= y <= 99;\nloop invariant i213: (x + y) % 2 == 0;\nloop invariant i214: (x + y) % 2 <= 99;\nloop invariant i215: 0 <= y <= 49999;\nloop invariant i216: (x % 2) == (y % 2) ==> (x % 2) == (y % 2);\nloop invariant i217: x >= y ==> x >= y;\nloop invariant i218: x <= y ==> x <= y;\nloop invariant i219: x < 99 ==> x < 99;\nloop invariant i220: x >= 0 ==> x >= 0;\nloop invariant i221: y >= 0 ==> y >= 0;\nloop invariant i222: y <= 49999 ==> y <= 49999;\nloop invariant i223: y % 2 == 0 ==> y % 2 == 0;\nloop invariant i224: y % 2 != 0 ==> y % 2 != 0;\nloop invariant i225: x % 2 == y % 2 ==> (y >= 0);\nloop invariant i226: x % 2 == y % 2 ==> (y <= 99);\nloop invariant i227: x % 2 == y % 2 ==> (x == 0 || x == 1 || x == 3 || x == 5 || x == 7 || x == 9 || x == 11 || x == 13 || x == 15 || x == 17 || x == 19 || x == 21 || x == 23 || x == 25 || x == 27 || x == 29 || x == 31 || x == 33 || x == 35 || x == 37 || x == 39 || x == 41 || x == 43 || x == 45 || x == 47 || x == 49 || x == 51 || x == 53 || x == 55 || x == 57 || x == 59 || x == 61 || x == 63 || x == 65 || x == 67 || x == 69 || x == 71 || x == 73 || x == 75 || x == 77 || x == 79 || x == 81 || x == 83 || x == 85 || x == 87 || x == 89 || x == 91 || x == 93 || x == 95 || x == 97 || x == 99);\nloop invariant i228: (y % 2 == 0) ==> (x % 2 == y % 2 ==> (x == 0 || x == 2 || x == 4 || x == 6 || x == 8 || x == 10 || x == 12 || x == 14 || x == 16 || x == 18 || x == 20 || x == 22 || x == 24 || x == 26 || x == 28 || x == 30 || x == 32 || x == 34 || x == 36 || x == 38 || x == 40 || x == 42 || x == 44 || x == 46 || x == 48 || x == 50 || x == 52 || x == 54 || x == 56 || x == 58 || x == 60 || x == 62 || x == 64 || x == 66 || x == 68 || x == 70 || x == 72 || x == 74 || x == 76 || x == 78 || x == 80 || x == 82 || x == 84 || x == 86 || x == 88 || x == 90 || x == 92 || x == 94 || x == 96 || x == 98));\nloop invariant i229: (y % 2 == 1) ==> (x % 2 == y % 2 ==> (x == 1 || x == 3 || x == 5 || x == 7 || x == 9 || x == 11 || x == 13 || x == 15 || x == 17 || x == 19 || x == 21 || x == 23 || x == 25 || x == 27 || x == 29 || x == 31 || x == 33 || x == 35 || x == 37 || x == 39 || x == 41 || x == 43 || x == 45 || x == 47 || x == 49 || x == 51 || x == 53 || x == 55 || x == 57 || x == 59 || x == 61 || x == 63 || x == 65 || x == 67 || x == 69 || x == 71 || x == 73 || x == 75 || x == 77 || x == 79 || x == 81 || x == 83 || x == 85 || x == 87 || x == 89 || x == 91 || x == 93 || x == 95 || x == 97 || x == 99));\nloop invariant i230: if (y % 2 == 0) then x % 2 == 0 else x % 2 == 1;\nloop invariant i231: x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0;\nloop invariant i232: x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1;\nloop invariant i233: 99 <= x <= 99;\nloop invariant i234: x % 2 == (y % 2);\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
            "combined_annotation_num_solver_calls": 165,
            "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\nloop invariant i1: y % 2 == y % 2;\nloop invariant i2: x % 2 == x % 2;\n\nloop invariant i4: 0 <= x <= 99;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i165: (x % 2) == (y % 2) ==> (x % 2) == 0 ==> (x % 2) == 0;\nloop invariant i166: (x % 2) == (y % 2) ==> (x % 2) == 1 ==> (x % 2) == 1;\nloop invariant i167: x % 2 == 0 ==> x % 2 == 0;\nloop invariant i168: x % 2 == 1 ==> x % 2 == 1;\n\nloop invariant i170: x % 2 == 1 ==> y % 2 == 1;\nloop invariant i171: x % 2 == 0 ==> (x % 2) == 0 ==> (x % 2) == 0;\nloop invariant i172: x % 2 == 1 ==> (x % 2) == 1 ==> (x % 2) == 1;\n\n\nloop invariant i175: x <= 99;\nloop invariant i176: y >= 0;\n\nloop invariant i178: 0 <= x <= 99; loop invariant 0 <= y; loop invariant (x % 2) == (y % 2); loop invariant ((x % 2) == 0) ==> (x % 2) == ((y + x - 1) % 2); loop invariant (y % 2) == (2 * (y / 2)); loop invariant (y % 2) == ((y / 2) * 2); loop invariant (x % 2) == ((x / 2) * 2); loop invariant (x % 2) == (2 * (x / 2)); loop invariant (x % 2) == ((x % 2) % 2); loop invariant (x % 2) == ((x % 2) % 2); loop invariant ((x % 2) == 0) ==> (x % 2) == (y % 2); loop invariant ((x % 2) == 1) ==> (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2); loop invariant (x % 2) == (y % 2);\nloop invariant i179: y % 2 == 0 ==> (x % 2) == 0;\nloop invariant i180: y % 2 != 0 ==> (x % 2) == 1;\nloop invariant i181: (y % 2) == 0 ==> x % 2 == 0;\nloop invariant i182: (y % 2) != 0 ==> x % 2 != 0;\nloop invariant i183: x <= y;\nloop invariant i184: y % 2 == 0 ==> x % 2 == 0;\nloop invariant i185: y % 2 != 0 ==> x % 2 != 0;\nloop invariant i186: y % 2 == 0 ==> (x >= 2 * (x / 2));\nloop invariant i187: y % 2 != 0 ==> (x >= (x / 2) + 1);\nloop invariant i188: y % 2 == 0 ==> (x <= 2 * (x / 2));\nloop invariant i189: y % 2 != 0 ==> (x <= (x / 2) + 1);\nloop invariant i190: y % 2 == 0 ==> (y >= 2 * (x / 2));\nloop invariant i191: y % 2 != 0 ==> (y >= (x / 2) + 1);\nloop invariant i192: y % 2 == 0 ==> (y <= 2 * (x / 2));\nloop invariant i193: y % 2 != 0 ==> (y <= (x / 2) + 1);\nloop invariant i194: y % 2 == 0 ==> (x / 2) * 2 == x;\nloop invariant i195: y % 2 != 0 ==> (x - 1) / 2 * 2 == x - 1;\nloop invariant i196: y % 2 == 0 ==> (y / 2) * 2 == y;\nloop invariant i197: y % 2 != 0 ==> (y - 1) / 2 * 2 == y - 1;\nloop invariant i198: y % 2 == 0 ==> (x / 2) == x / 2;\nloop invariant i199: y % 2 != 0 ==> (x - 1) / 2 == (x - 1) / 2;\nloop invariant i200: y % 2 == 0 ==> (y / 2) == y / 2;\nloop invariant i201: y % 2 != 0 ==> (y - 1) / 2 == (y - 1) / 2;\nloop invariant i202: y % 2 == 0 ==> (y % 2) == 0;\nloop invariant i203: y % 2 != 0 ==> (y % 2) == 1;\nloop invariant i204: y % 2 == 0 ==> (x / 2) == y;\nloop invariant i205: y % 2 != 0 ==> (x - 1) / 2 == y - 1;\nloop invariant i206: y % 2 == 0 ==> (y / 2) == x;\nloop invariant i207: y % 2 != 0 ==> (y - 1) / 2 == x - 1;\nloop invariant i208: y % 2 == 0 ==> (x / 2) == y / 2;\nloop invariant i209: y % 2 != 0 ==> (x - 1) / 2 == (y - 1) / 2;\nloop invariant i210: y % 2 == 0 ==> (y / 2) == x / 2;\nloop invariant i211: y % 2 != 0 ==> (y - 1) / 2 == (x - 1) / 2;\nloop invariant i212: 0 <= y <= 99;\nloop invariant i213: (x + y) % 2 == 0;\nloop invariant i214: (x + y) % 2 <= 99;\nloop invariant i215: 0 <= y <= 49999;\nloop invariant i216: (x % 2) == (y % 2) ==> (x % 2) == (y % 2);\nloop invariant i217: x >= y ==> x >= y;\nloop invariant i218: x <= y ==> x <= y;\nloop invariant i219: x < 99 ==> x < 99;\nloop invariant i220: x >= 0 ==> x >= 0;\nloop invariant i221: y >= 0 ==> y >= 0;\nloop invariant i222: y <= 49999 ==> y <= 49999;\nloop invariant i223: y % 2 == 0 ==> y % 2 == 0;\nloop invariant i224: y % 2 != 0 ==> y % 2 != 0;\nloop invariant i225: x % 2 == y % 2 ==> (y >= 0);\nloop invariant i226: x % 2 == y % 2 ==> (y <= 99);\nloop invariant i227: x % 2 == y % 2 ==> (x == 0 || x == 1 || x == 3 || x == 5 || x == 7 || x == 9 || x == 11 || x == 13 || x == 15 || x == 17 || x == 19 || x == 21 || x == 23 || x == 25 || x == 27 || x == 29 || x == 31 || x == 33 || x == 35 || x == 37 || x == 39 || x == 41 || x == 43 || x == 45 || x == 47 || x == 49 || x == 51 || x == 53 || x == 55 || x == 57 || x == 59 || x == 61 || x == 63 || x == 65 || x == 67 || x == 69 || x == 71 || x == 73 || x == 75 || x == 77 || x == 79 || x == 81 || x == 83 || x == 85 || x == 87 || x == 89 || x == 91 || x == 93 || x == 95 || x == 97 || x == 99);\nloop invariant i228: (y % 2 == 0) ==> (x % 2 == y % 2 ==> (x == 0 || x == 2 || x == 4 || x == 6 || x == 8 || x == 10 || x == 12 || x == 14 || x == 16 || x == 18 || x == 20 || x == 22 || x == 24 || x == 26 || x == 28 || x == 30 || x == 32 || x == 34 || x == 36 || x == 38 || x == 40 || x == 42 || x == 44 || x == 46 || x == 48 || x == 50 || x == 52 || x == 54 || x == 56 || x == 58 || x == 60 || x == 62 || x == 64 || x == 66 || x == 68 || x == 70 || x == 72 || x == 74 || x == 76 || x == 78 || x == 80 || x == 82 || x == 84 || x == 86 || x == 88 || x == 90 || x == 92 || x == 94 || x == 96 || x == 98));\nloop invariant i229: (y % 2 == 1) ==> (x % 2 == y % 2 ==> (x == 1 || x == 3 || x == 5 || x == 7 || x == 9 || x == 11 || x == 13 || x == 15 || x == 17 || x == 19 || x == 21 || x == 23 || x == 25 || x == 27 || x == 29 || x == 31 || x == 33 || x == 35 || x == 37 || x == 39 || x == 41 || x == 43 || x == 45 || x == 47 || x == 49 || x == 51 || x == 53 || x == 55 || x == 57 || x == 59 || x == 61 || x == 63 || x == 65 || x == 67 || x == 69 || x == 71 || x == 73 || x == 75 || x == 77 || x == 79 || x == 81 || x == 83 || x == 85 || x == 87 || x == 89 || x == 91 || x == 93 || x == 95 || x == 97 || x == 99));\n\nloop invariant i231: x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0;\nloop invariant i232: x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1;\nloop invariant i233: 99 <= x <= 99;\nloop invariant i234: x % 2 == (y % 2);\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
            "checker_output_after_prune": false
        },
        {
            "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_nondet_true-unreach-call_true-termination.c",
            "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int k = 0;\n    while(i < LARGE_INT) {\n        int j = unknown_int();\n        if (!(1 <= j && j < LARGE_INT)) return 0;\n        i = i + j;\n        k ++;\n    }\n    {;\n//@ assert(k <= LARGE_INT);\n}\n\n    return 0;\n}",
            "success": true,
            "annotation_blocks": [
                "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 1 <= j < LARGE_INT;\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant i + j >= 0;\nloop invariant i + j <= 2 * LARGE_INT;\nloop invariant i + j <= LARGE_INT + j;\nloop invariant k * j >= 0;\nloop invariant k * j <= LARGE_INT * j;\nloop invariant k * j <= (k + 1) * j;\nloop invariant k * j <= (k + 1) * (LARGE_INT - 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\n*/\n```",
                "```\n/*@\nloop invariant i = 0;\nloop invariant k = 0;\nloop invariant 0 <= j <= LARGE_INT;\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant i <= LARGE_INT * k;\nloop invariant i >= LARGE_INT * (k - 1);\nloop invariant i >= 0;\nloop invariant k >= 0;\nloop invariant j >= 1;\nloop invariant j < LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant k >= 1;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant k >= 1;\nloop invariant k <= LARGE_INT;\nloop invariant i <= LARGE_INT * k;\nloop invariant i >= LARGE_INT * (k - 1);\nloop invariant j >= 1;\nloop invariant j < LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant k >= 1;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant k >= 1;\nloop invariant k <= LARGE_INT;\nloop invariant i <= LARGE_INT * k;\nloop invariant i >= LARGE_INT * (k - 1);\nloop invariant j >= 1;\nloop invariant j < LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant k >= 1;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant k >= 1;\nloop invariant k <= LARGE_INT;\nloop invariant i <= LARGE_INT * k;\nloop invariant i >= LARGE_INT * (k - 1);\nloop invariant j >= 1;\nloop invariant j < LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant k >= 1;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant k >= 1;\nloop invariant k <= LARGE_INT;\nloop invariant i <= LARGE_INT * k;\nloop invariant i >= LARGE_INT * (k - 1);\nloop invariant j >= 1;\nloop invariant j < LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant k >= 1;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant k >= 1;\nloop invariant k <= LARGE_INT;\nloop invariant i <= LARGE_INT * k;\nloop invariant i >= LARGE_INT * (k - 1);\nloop invariant j >= 1;\nloop invariant j < LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant k >= 1;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant k >= 1;\nloop invariant k <= LARGE_INT;\nloop invariant i <= LARGE_INT * k;\nloop invariant i >= LARGE_INT * (k - 1);\nloop invariant j >= 1;\nloop invariant j < LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant k >= 1;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant k >= 1;\nloop invariant k <= LARGE_INT;\nloop invariant i <= LARGE_INT * k;\nloop invariant i >= LARGE_INT * (k - 1);\nloop invariant j >= 1;\nloop invariant j < LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant k >= 1;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant k >= 1;\nloop invariant k <= LARGE_INT;\nloop invariant i <= LARGE_INT * k;\nloop invariant i >= LARGE_INT * (k - 1);\nloop invariant j >= 1;\nloop invariant j < LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant k >= 1;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant k >= 1;\nloop invariant k <= LARGE_INT;\nloop invariant i <= LARGE_INT * k;\nloop invariant i >= LARGE_INT * (k - 1);\nloop invariant j >= 1;\nloop invariant j < LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant k >= 1;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant k >= 1;\nloop invariant k <= LARGE_INT;\nloop invariant i <= LARGE_INT * k;\nloop invariant i >= LARGE_INT * (k - 1);\nloop invariant j >= 1;\nloop invariant j < LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant k >= 1;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant k >= 1;\nloop invariant k <= LARGE_INT;\nloop invariant i <= LARGE_INT * k;\nloop invariant i >= LARGE_INT * (k - 1);\nloop invariant j >= 1;\nloop invariant j < LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant k >= 1;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant k >= 1;\nloop invariant k <= LARGE_INT;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= k;\nloop invariant 0 <= i;\nloop invariant i <= LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant i <= k * LARGE_INT;\nloop invariant i >= k;\nloop invariant i <= k * (k + 1) / 2;\nloop invariant i >= k * (k - 1) / 2;\nloop invariant i <= k * (k + 1) / 2 * LARGE_INT;\nloop invariant i >= k * (k - 1) / 2 * LARGE_INT;\nloop invariant i <= k * (k + 1) / 2 * LARGE_INT + k;\nloop invariant i >= k * (k - 1) / 2 * LARGE_INT + k;\nloop invariant i <= k * (k + 1) / 2 * LARGE_INT + k * LARGE_INT;\nloop invariant i >= k * (k - 1) / 2 * LARGE_INT + k * LARGE_INT;\nloop invariant i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 1);\nloop invariant i >= k * (k - 1) / 2 * LARGE_INT + k * (k + 1);\nloop invariant i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 2) / 2;\nloop invariant i >= k * (k - 1) / 2 * LARGE_INT + k * (k + 2) / 2;\nloop invariant i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 3) / 2;\nloop invariant i >= k * (k - 1) / 2 * LARGE_INT + k * (k + 3) / 2;\nloop invariant i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 4) / 2;\nloop invariant i >= k * (k - 1) / 2 * LARGE_INT + k * (k + 4) / 2;\nloop invariant i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 5) / 2;\nloop invariant i >= k * (k - 1) / 2 * LARGE_INT + k * (k + 5) / 2;\nloop invariant i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 6) / 2;\nloop invariant i >= k * (k - 1) / 2 * LARGE_INT + k * (k + 6) / 2;\nloop invariant i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 7) / 2;\nloop invariant i >= k * (k - 1) / 2 * LARGE_INT + k * (k + 7) / 2;\nloop invariant i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 8) / 2;\nloop invariant i >= k * (k - 1) / 2 * LARGE_INT + k * (k + 8) / 2;\nloop invariant i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 9) / 2;\nloop invariant i >= k * (k - 1) / 2 * LARGE_INT + k * (k + 9) / 2;\nloop invariant i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 10) / 2;\nloop invariant i >= k * (k - 1) / 2 * LARGE_INT + k * (k + 10) / 2;\nloop invariant i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 11) / 2;\nloop invariant i >= k * (k - 1) / 2 * LARGE_INT + k * (k + 11) / 2;\nloop invariant i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 12) / 2;\nloop invariant i >= k * (k - 1) / 2 * LARGE_INT + k * (k + 12) / 2;\nloop invariant i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 13) / 2;\n*/\n```",
                "```\n/*@\nloop invariant i >= 0;\nloop invariant k >= 0;\nloop invariant i <= k * LARGE_INT;\nloop invariant j >= 1;\nloop invariant j < LARGE_INT;\nloop invariant i + j <= LARGE_INT;\n*/\n```",
                "```\n/*@\n\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant 1 <= j && j < LARGE_INT ==> i + j >= i;\nloop invariant 1 <= j && j < LARGE_INT ==> k + 1 >= k;\nloop invariant 1 <= j && j < LARGE_INT ==> i + j <= i + LARGE_INT;\nloop invariant 1 <= j && j < LARGE_INT ==> k + 1 <= LARGE_INT;\nloop invariant 1 <= j && j < LARGE_INT ==> i + j < LARGE_INT ==> k + 1 < LARGE_INT;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant k >= 0;\nloop invariant i == k * j;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= 1000000;\nloop invariant 0 <= k <= 1000000;\nloop invariant k = (i / LARGE_INT);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant i + j == (LARGE_INT  - 1);\nloop invariant k == (LARGE_INT  - 2);\nloop invariant j == (LARGE_INT  - 3);\nloop invariant i == (LARGE_INT  - 2);\nloop invariant k == (LARGE_INT  - 1);\nloop invariant j == (LARGE_INT  - 2);\nloop invariant i == (LARGE_INT  - 1);\nloop invariant k == (LARGE_INT  - 0);\nloop invariant j == (LARGE_INT  - 1);\nloop invariant i == (LARGE_INT  - 0);\nloop invariant k == (LARGE_INT  - 0);\nloop invariant j == (LARGE_INT  - 0);\nloop invariant i == (LARGE_INT  - 0);\nloop invariant k == (LARGE_INT  - 0);\nloop invariant j == (LARGE_INT  - 0);\nloop invariant i == (LARGE_INT  - 0);\nloop invariant k == (LARGE_INT  - 0);\nloop invariant j == (LARGE_INT  - 0);\nloop invariant i == (LARGE_INT  - 0);\nloop invariant k == (LARGE_INT  - 0);\nloop invariant j == (LARGE_INT  - 0);\nloop invariant i == (LARGE_INT  - 0);\nloop invariant k == (LARGE_INT  - 0);\nloop invariant j == (LARGE_INT  - 0);\nloop invariant i == (LARGE_INT  - 0);\nloop invariant k == (LARGE_INT  - 0);\nloop invariant j == (LARGE_INT  - 0);\nloop invariant i == (LARGE_INT  - 0);\nloop invariant k == (LARGE_INT  - 0);\nloop invariant j == (LARGE_INT  - 0);\nloop invariant i == (LARGE_INT  - 0);\nloop invariant k == (LARGE_INT  - 0);\nloop invariant j == (LARGE_INT  - 0);\nloop invariant i == (LARGE_INT  - 0);\nloop invariant k == (LARGE_INT  - 0);\nloop invariant j == (LARGE_INT  - 0);\nloop invariant i == (LARGE_INT  - 0);\nloop invariant k == (LARGE_INT  - 0);\nloop invariant j == (LARGE_INT  - 0);\nloop invariant i == (LARGE_INT  - 0);\nloop invariant k == (LARGE_INT  - 0);\nloop invariant j == (LARGE_INT  - 0);\nloop invariant i == (LARGE_INT  - 0);\nloop invariant k == (LARGE_INT  - 0);\nloop invariant j == (LARGE_INT  - 0);\nloop invariant i == (LARGE_INT  - 0);\nloop invariant k == (LARGE_INT  - 0);\nloop invariant j == (LARGE_INT  - 0);\nloop invariant i == (LARGE_INT  - 0);\nloop invariant k == (LARGE_INT  - 0);\nloop invariant j == (LARGE_INT  - 0);\nloop invariant i == (LARGE_INT  - 0);\nloop invariant k == (LARGE_INT  - 0);\nloop invariant j == (LARGE_INT  - 0);\nloop invariant i == (LARGE_INT  - 0);\nloop invariant k == (LARGE_INT  - 0);\nloop invariant j == (LARGE_INT  - 0);\nloop invariant i == (LARGE_INT  - 0);\nloop invariant k == (LARGE_INT  - 0);\nloop invariant j == (LARGE_INT  - 0);\nloop invariant i == (LARGE_INT  - 0);\nloop invariant k == (LARGE_INT  - 0);\nloop invariant j == (LARGE_INT  - 0);\nloop invariant i == (LARGE_INT  - 0);\nloop invariant k == (LARGE_INT  - 0);\nloop invariant j == (LARGE_INT  - 0);\nloop invariant i == (LARGE_INT  - 0);\nloop invariant k == (LARGE_INT  - 0);\nloop invariant j == (LARGE_INT  - 0);\nloop invariant i == (LARGE_INT  - 0);\nloop invariant k == (LARGE_INT  - 0);\nloop invariant j == (LARGE_INT  - 0);\nloop invariant i == (LARGE_INT  - 0);\nloop invariant k == (LARGE_INT  - 0);\nloop invariant j == (LARGE_INT  - 0);\n*/\n```",
                "```\n/*@\nloop invariant 1 <= i <= LARGE_INT;\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant 1 <= j ==> 1 <= i + j <= LARGE_INT;\nloop invariant 1 <= j ==> k + 1 <= LARGE_INT;\nloop invariant 1 <= j ==> 1 <= k + 1;\nloop invariant 1 < j ==> 1 <= k + 1;\nloop invariant 1 <= j ==> i + j < LARGE_INT;\nloop invariant 1 <= j ==> i < LARGE_INT;\nloop invariant 1 <= j ==> i + j <= LARGE_INT;\nloop invariant 1 <= j ==> k <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> k <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= 1000000;\nloop invariant 0 <= k <= 1000000;\nloop invariant i + k * large_int >= large_int;\nloop invariant i + k * large_int < large_int * 1000000;\nloop invariant i + k * large_int < large_int * 1000000;\nloop invariant i + k * large_int < large_int * 1000000;\n*/\n```",
                "```\n/*@\n\n*/\n```",
                "```\n/*@\nloop invariant i <= LARGE_INT;\nloop invariant 1 <= j && j < LARGE_INT;\nloop invariant i + j <= LARGE_INT;\nloop invariant k >= 0;\nloop invariant k <= LARGE_INT;\nloop invariant j >= 0;\nloop invariant j < LARGE_INT;\nloop invariant unknown_int() <= LARGE_INT;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= 1000000;\nloop invariant k >= 0;\nloop invariant i >= k;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 0 <= j < LARGE_INT;\nloop invariant k >= 0;\nloop invariant k <= i / j;\nloop invariant k <= LARGE_INT / j;\nloop invariant i >= j * k;\nloop invariant i >= j * (k - 1);\nloop invariant i <= j * k + j - 1;\n*/\n```"
            ],
            "completions": [
                {
                    "num_solver_calls": 11,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 1 <= j < LARGE_INT;\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant i + j >= 0;\nloop invariant i + j <= 2 * LARGE_INT;\nloop invariant i + j <= LARGE_INT + j;\nloop invariant k * j >= 0;\nloop invariant k * j <= LARGE_INT * j;\nloop invariant k * j <= (k + 1) * j;\nloop invariant k * j <= (k + 1) * (LARGE_INT - 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\nloop invariant k * j <= LARGE_INT * (k + 1);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 16: unbound logic variable j. Ignoring loop annotation",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int k = 0;\n    /*@\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile(i < LARGE_INT) {\n        int j = unknown_int();\n        if (!(1 <= j && j < LARGE_INT)) return 0;\n        i = i + j;\n        k ++;\n    }\n    {;\n//@ assert(k <= LARGE_INT);\n}\n\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 11,
                    "annotations": "```\n/*@\nloop invariant i = 0;\nloop invariant k = 0;\nloop invariant 0 <= j <= LARGE_INT;\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant i <= LARGE_INT * k;\nloop invariant i >= LARGE_INT * (k - 1);\nloop invariant i >= 0;\nloop invariant k >= 0;\nloop invariant j >= 1;\nloop invariant j < LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant k >= 1;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant k >= 1;\nloop invariant k <= LARGE_INT;\nloop invariant i <= LARGE_INT * k;\nloop invariant i >= LARGE_INT * (k - 1);\nloop invariant j >= 1;\nloop invariant j < LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant k >= 1;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant k >= 1;\nloop invariant k <= LARGE_INT;\nloop invariant i <= LARGE_INT * k;\nloop invariant i >= LARGE_INT * (k - 1);\nloop invariant j >= 1;\nloop invariant j < LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant k >= 1;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant k >= 1;\nloop invariant k <= LARGE_INT;\nloop invariant i <= LARGE_INT * k;\nloop invariant i >= LARGE_INT * (k - 1);\nloop invariant j >= 1;\nloop invariant j < LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant k >= 1;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant k >= 1;\nloop invariant k <= LARGE_INT;\nloop invariant i <= LARGE_INT * k;\nloop invariant i >= LARGE_INT * (k - 1);\nloop invariant j >= 1;\nloop invariant j < LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant k >= 1;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant k >= 1;\nloop invariant k <= LARGE_INT;\nloop invariant i <= LARGE_INT * k;\nloop invariant i >= LARGE_INT * (k - 1);\nloop invariant j >= 1;\nloop invariant j < LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant k >= 1;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant k >= 1;\nloop invariant k <= LARGE_INT;\nloop invariant i <= LARGE_INT * k;\nloop invariant i >= LARGE_INT * (k - 1);\nloop invariant j >= 1;\nloop invariant j < LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant k >= 1;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant k >= 1;\nloop invariant k <= LARGE_INT;\nloop invariant i <= LARGE_INT * k;\nloop invariant i >= LARGE_INT * (k - 1);\nloop invariant j >= 1;\nloop invariant j < LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant k >= 1;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant k >= 1;\nloop invariant k <= LARGE_INT;\nloop invariant i <= LARGE_INT * k;\nloop invariant i >= LARGE_INT * (k - 1);\nloop invariant j >= 1;\nloop invariant j < LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant k >= 1;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant k >= 1;\nloop invariant k <= LARGE_INT;\nloop invariant i <= LARGE_INT * k;\nloop invariant i >= LARGE_INT * (k - 1);\nloop invariant j >= 1;\nloop invariant j < LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant k >= 1;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant k >= 1;\nloop invariant k <= LARGE_INT;\nloop invariant i <= LARGE_INT * k;\nloop invariant i >= LARGE_INT * (k - 1);\nloop invariant j >= 1;\nloop invariant j < LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant k >= 1;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant k >= 1;\nloop invariant k <= LARGE_INT;\nloop invariant i <= LARGE_INT * k;\nloop invariant i >= LARGE_INT * (k - 1);\nloop invariant j >= 1;\nloop invariant j < LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant k >= 1;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant k >= 1;\nloop invariant k <= LARGE_INT;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 15: Assignment operators not allowed in annotations.",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int k = 0;\n    /*@\n\n\n\n\n\nloop invariant i6: i <= LARGE_INT * k;\n\nloop invariant i8: i >= 0;\nloop invariant i9: k >= 0;\n\n\n\n\n\n*/\nwhile(i < LARGE_INT) {\n        int j = unknown_int();\n        if (!(1 <= j && j < LARGE_INT)) return 0;\n        i = i + j;\n        k ++;\n    }\n    {;\n//@ assert(k <= LARGE_INT);\n}\n\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= k;\nloop invariant 0 <= i;\nloop invariant i <= LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant i <= k * LARGE_INT;\nloop invariant i >= k;\nloop invariant i <= k * (k + 1) / 2;\nloop invariant i >= k * (k - 1) / 2;\nloop invariant i <= k * (k + 1) / 2 * LARGE_INT;\nloop invariant i >= k * (k - 1) / 2 * LARGE_INT;\nloop invariant i <= k * (k + 1) / 2 * LARGE_INT + k;\nloop invariant i >= k * (k - 1) / 2 * LARGE_INT + k;\nloop invariant i <= k * (k + 1) / 2 * LARGE_INT + k * LARGE_INT;\nloop invariant i >= k * (k - 1) / 2 * LARGE_INT + k * LARGE_INT;\nloop invariant i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 1);\nloop invariant i >= k * (k - 1) / 2 * LARGE_INT + k * (k + 1);\nloop invariant i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 2) / 2;\nloop invariant i >= k * (k - 1) / 2 * LARGE_INT + k * (k + 2) / 2;\nloop invariant i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 3) / 2;\nloop invariant i >= k * (k - 1) / 2 * LARGE_INT + k * (k + 3) / 2;\nloop invariant i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 4) / 2;\nloop invariant i >= k * (k - 1) / 2 * LARGE_INT + k * (k + 4) / 2;\nloop invariant i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 5) / 2;\nloop invariant i >= k * (k - 1) / 2 * LARGE_INT + k * (k + 5) / 2;\nloop invariant i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 6) / 2;\nloop invariant i >= k * (k - 1) / 2 * LARGE_INT + k * (k + 6) / 2;\nloop invariant i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 7) / 2;\nloop invariant i >= k * (k - 1) / 2 * LARGE_INT + k * (k + 7) / 2;\nloop invariant i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 8) / 2;\nloop invariant i >= k * (k - 1) / 2 * LARGE_INT + k * (k + 8) / 2;\nloop invariant i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 9) / 2;\nloop invariant i >= k * (k - 1) / 2 * LARGE_INT + k * (k + 9) / 2;\nloop invariant i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 10) / 2;\nloop invariant i >= k * (k - 1) / 2 * LARGE_INT + k * (k + 10) / 2;\nloop invariant i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 11) / 2;\nloop invariant i >= k * (k - 1) / 2 * LARGE_INT + k * (k + 11) / 2;\nloop invariant i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 12) / 2;\nloop invariant i >= k * (k - 1) / 2 * LARGE_INT + k * (k + 12) / 2;\nloop invariant i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 13) / 2;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= k is partially proven to be inductive.\nloop invariant 0 <= i is partially proven to be inductive.\nloop invariant i <= LARGE_INT is partially proven to be inductive.\nloop invariant k <= LARGE_INT is partially proven to be inductive.\nloop invariant i <= k * LARGE_INT is partially proven to be inductive.\nloop invariant i >= k is partially proven to be inductive.\nloop invariant i <= k * (k + 1) / 2 is established but not preserved.\nloop invariant i >= k * (k - 1) / 2 is partially proven to be inductive.\nloop invariant i <= k * (k + 1) / 2 * LARGE_INT is partially proven to be inductive.\nloop invariant i >= k * (k - 1) / 2 * LARGE_INT is partially proven to be inductive.\nloop invariant i <= k * (k + 1) / 2 * LARGE_INT + k is partially proven to be inductive.\nloop invariant i >= k * (k - 1) / 2 * LARGE_INT + k is partially proven to be inductive.\nloop invariant i <= k * (k + 1) / 2 * LARGE_INT + k * LARGE_INT is partially proven to be inductive.\nloop invariant i >= k * (k - 1) / 2 * LARGE_INT + k * LARGE_INT is established but not preserved.\nloop invariant i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 1) is partially proven to be inductive.\nloop invariant i >= k * (k - 1) / 2 * LARGE_INT + k * (k + 1) is partially proven to be inductive.\nloop invariant i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 2) / 2 is partially proven to be inductive.\nloop invariant i >= k * (k - 1) / 2 * LARGE_INT + k * (k + 2) / 2 is partially proven to be inductive.\nloop invariant i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 3) / 2 is partially proven to be inductive.\nloop invariant i >= k * (k - 1) / 2 * LARGE_INT + k * (k + 3) / 2 is partially proven to be inductive.\nloop invariant i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 4) / 2 is partially proven to be inductive.\nloop invariant i >= k * (k - 1) / 2 * LARGE_INT + k * (k + 4) / 2 is partially proven to be inductive.\nloop invariant i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 5) / 2 is partially proven to be inductive.\nloop invariant i >= k * (k - 1) / 2 * LARGE_INT + k * (k + 5) / 2 is partially proven to be inductive.\nloop invariant i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 6) / 2 is partially proven to be inductive.\nloop invariant i >= k * (k - 1) / 2 * LARGE_INT + k * (k + 6) / 2 is partially proven to be inductive.\nloop invariant i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 7) / 2 is partially proven to be inductive.\nloop invariant i >= k * (k - 1) / 2 * LARGE_INT + k * (k + 7) / 2 is partially proven to be inductive.\nloop invariant i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 8) / 2 is partially proven to be inductive.\nloop invariant i >= k * (k - 1) / 2 * LARGE_INT + k * (k + 8) / 2 is partially proven to be inductive.\nloop invariant i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 9) / 2 is partially proven to be inductive.\nloop invariant i >= k * (k - 1) / 2 * LARGE_INT + k * (k + 9) / 2 is partially proven to be inductive.\nloop invariant i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 10) / 2 is partially proven to be inductive.\nloop invariant i >= k * (k - 1) / 2 * LARGE_INT + k * (k + 10) / 2 is partially proven to be inductive.\nloop invariant i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 11) / 2 is partially proven to be inductive.\nloop invariant i >= k * (k - 1) / 2 * LARGE_INT + k * (k + 11) / 2 is partially proven to be inductive.\nloop invariant i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 12) / 2 is partially proven to be inductive.\nloop invariant i >= k * (k - 1) / 2 * LARGE_INT + k * (k + 12) / 2 is partially proven to be inductive.\nloop invariant i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 13) / 2 is partially proven to be inductive.\nAssertion k <= 1000000: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int k = 0;\n    /*@\nloop invariant i1: 0 <= k;\nloop invariant i2: 0 <= i;\n\nloop invariant i4: k <= LARGE_INT;\nloop invariant i5: i <= k * LARGE_INT;\nloop invariant i6: i >= k;\n\n\nloop invariant i9: i <= k * (k + 1) / 2 * LARGE_INT;\n\nloop invariant i11: i <= k * (k + 1) / 2 * LARGE_INT + k;\n\nloop invariant i13: i <= k * (k + 1) / 2 * LARGE_INT + k * LARGE_INT;\n\nloop invariant i15: i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 1);\n\nloop invariant i17: i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 2) / 2;\n\nloop invariant i19: i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 3) / 2;\n\nloop invariant i21: i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 4) / 2;\n\nloop invariant i23: i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 5) / 2;\n\nloop invariant i25: i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 6) / 2;\n\nloop invariant i27: i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 7) / 2;\n\nloop invariant i29: i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 8) / 2;\n\nloop invariant i31: i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 9) / 2;\n\nloop invariant i33: i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 10) / 2;\n\nloop invariant i35: i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 11) / 2;\n\nloop invariant i37: i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 12) / 2;\n\nloop invariant i39: i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 13) / 2;\n*/\nwhile(i < LARGE_INT) {\n        int j = unknown_int();\n        if (!(1 <= j && j < LARGE_INT)) return 0;\n        i = i + j;\n        k ++;\n    }\n    {;\n//@ assert(k <= LARGE_INT);\n}\n\n    return 0;\n}",
                    "checker_output_after_prune": true
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant i >= 0;\nloop invariant k >= 0;\nloop invariant i <= k * LARGE_INT;\nloop invariant j >= 1;\nloop invariant j < LARGE_INT;\nloop invariant i + j <= LARGE_INT;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 18: unbound logic variable j. Ignoring loop annotation",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int k = 0;\n    /*@\nloop invariant i1: i >= 0;\nloop invariant i2: k >= 0;\nloop invariant i3: i <= k * LARGE_INT;\n\n\n\n*/\nwhile(i < LARGE_INT) {\n        int j = unknown_int();\n        if (!(1 <= j && j < LARGE_INT)) return 0;\n        i = i + j;\n        k ++;\n    }\n    {;\n//@ assert(k <= LARGE_INT);\n}\n\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 1,
                    "annotations": "```\n/*@\n\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 15: unexpected token ''",
                    "houdini_error": "No annotations found"
                },
                {
                    "num_solver_calls": 7,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant 1 <= j && j < LARGE_INT ==> i + j >= i;\nloop invariant 1 <= j && j < LARGE_INT ==> k + 1 >= k;\nloop invariant 1 <= j && j < LARGE_INT ==> i + j <= i + LARGE_INT;\nloop invariant 1 <= j && j < LARGE_INT ==> k + 1 <= LARGE_INT;\nloop invariant 1 <= j && j < LARGE_INT ==> i + j < LARGE_INT ==> k + 1 < LARGE_INT;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 17: unbound logic variable j. Ignoring loop annotation",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int k = 0;\n    /*@\n\n\n\n\n\n\n\n*/\nwhile(i < LARGE_INT) {\n        int j = unknown_int();\n        if (!(1 <= j && j < LARGE_INT)) return 0;\n        i = i + j;\n        k ++;\n    }\n    {;\n//@ assert(k <= LARGE_INT);\n}\n\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant k >= 0;\nloop invariant i == k * j;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 17: unbound logic variable j. Ignoring loop annotation",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int k = 0;\n    /*@\n\nloop invariant i2: k >= 0;\n\n*/\nwhile(i < LARGE_INT) {\n        int j = unknown_int();\n        if (!(1 <= j && j < LARGE_INT)) return 0;\n        i = i + j;\n        k ++;\n    }\n    {;\n//@ assert(k <= LARGE_INT);\n}\n\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= 1000000;\nloop invariant 0 <= k <= 1000000;\nloop invariant k = (i / LARGE_INT);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 17: Assignment operators not allowed in annotations.",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int k = 0;\n    /*@\n\n\n\n*/\nwhile(i < LARGE_INT) {\n        int j = unknown_int();\n        if (!(1 <= j && j < LARGE_INT)) return 0;\n        i = i + j;\n        k ++;\n    }\n    {;\n//@ assert(k <= LARGE_INT);\n}\n\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 13,
                    "annotations": "```\n/*@\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant i + j == (LARGE_INT  - 1);\nloop invariant k == (LARGE_INT  - 2);\nloop invariant j == (LARGE_INT  - 3);\nloop invariant i == (LARGE_INT  - 2);\nloop invariant k == (LARGE_INT  - 1);\nloop invariant j == (LARGE_INT  - 2);\nloop invariant i == (LARGE_INT  - 1);\nloop invariant k == (LARGE_INT  - 0);\nloop invariant j == (LARGE_INT  - 1);\nloop invariant i == (LARGE_INT  - 0);\nloop invariant k == (LARGE_INT  - 0);\nloop invariant j == (LARGE_INT  - 0);\nloop invariant i == (LARGE_INT  - 0);\nloop invariant k == (LARGE_INT  - 0);\nloop invariant j == (LARGE_INT  - 0);\nloop invariant i == (LARGE_INT  - 0);\nloop invariant k == (LARGE_INT  - 0);\nloop invariant j == (LARGE_INT  - 0);\nloop invariant i == (LARGE_INT  - 0);\nloop invariant k == (LARGE_INT  - 0);\nloop invariant j == (LARGE_INT  - 0);\nloop invariant i == (LARGE_INT  - 0);\nloop invariant k == (LARGE_INT  - 0);\nloop invariant j == (LARGE_INT  - 0);\nloop invariant i == (LARGE_INT  - 0);\nloop invariant k == (LARGE_INT  - 0);\nloop invariant j == (LARGE_INT  - 0);\nloop invariant i == (LARGE_INT  - 0);\nloop invariant k == (LARGE_INT  - 0);\nloop invariant j == (LARGE_INT  - 0);\nloop invariant i == (LARGE_INT  - 0);\nloop invariant k == (LARGE_INT  - 0);\nloop invariant j == (LARGE_INT  - 0);\nloop invariant i == (LARGE_INT  - 0);\nloop invariant k == (LARGE_INT  - 0);\nloop invariant j == (LARGE_INT  - 0);\nloop invariant i == (LARGE_INT  - 0);\nloop invariant k == (LARGE_INT  - 0);\nloop invariant j == (LARGE_INT  - 0);\nloop invariant i == (LARGE_INT  - 0);\nloop invariant k == (LARGE_INT  - 0);\nloop invariant j == (LARGE_INT  - 0);\nloop invariant i == (LARGE_INT  - 0);\nloop invariant k == (LARGE_INT  - 0);\nloop invariant j == (LARGE_INT  - 0);\nloop invariant i == (LARGE_INT  - 0);\nloop invariant k == (LARGE_INT  - 0);\nloop invariant j == (LARGE_INT  - 0);\nloop invariant i == (LARGE_INT  - 0);\nloop invariant k == (LARGE_INT  - 0);\nloop invariant j == (LARGE_INT  - 0);\nloop invariant i == (LARGE_INT  - 0);\nloop invariant k == (LARGE_INT  - 0);\nloop invariant j == (LARGE_INT  - 0);\nloop invariant i == (LARGE_INT  - 0);\nloop invariant k == (LARGE_INT  - 0);\nloop invariant j == (LARGE_INT  - 0);\nloop invariant i == (LARGE_INT  - 0);\nloop invariant k == (LARGE_INT  - 0);\nloop invariant j == (LARGE_INT  - 0);\nloop invariant i == (LARGE_INT  - 0);\nloop invariant k == (LARGE_INT  - 0);\nloop invariant j == (LARGE_INT  - 0);\nloop invariant i == (LARGE_INT  - 0);\nloop invariant k == (LARGE_INT  - 0);\nloop invariant j == (LARGE_INT  - 0);\nloop invariant i == (LARGE_INT  - 0);\nloop invariant k == (LARGE_INT  - 0);\nloop invariant j == (LARGE_INT  - 0);\nloop invariant i == (LARGE_INT  - 0);\nloop invariant k == (LARGE_INT  - 0);\nloop invariant j == (LARGE_INT  - 0);\nloop invariant i == (LARGE_INT  - 0);\nloop invariant k == (LARGE_INT  - 0);\nloop invariant j == (LARGE_INT  - 0);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 17: unbound logic variable j. Ignoring loop annotation",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int k = 0;\n    /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile(i < LARGE_INT) {\n        int j = unknown_int();\n        if (!(1 <= j && j < LARGE_INT)) return 0;\n        i = i + j;\n        k ++;\n    }\n    {;\n//@ assert(k <= LARGE_INT);\n}\n\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 12,
                    "annotations": "```\n/*@\nloop invariant 1 <= i <= LARGE_INT;\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant 1 <= j ==> 1 <= i + j <= LARGE_INT;\nloop invariant 1 <= j ==> k + 1 <= LARGE_INT;\nloop invariant 1 <= j ==> 1 <= k + 1;\nloop invariant 1 < j ==> 1 <= k + 1;\nloop invariant 1 <= j ==> i + j < LARGE_INT;\nloop invariant 1 <= j ==> i < LARGE_INT;\nloop invariant 1 <= j ==> i + j <= LARGE_INT;\nloop invariant 1 <= j ==> k <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> k <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\nloop invariant 1 <= j ==> i <= LARGE_INT;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 17: unbound logic variable j. Ignoring loop annotation",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int k = 0;\n    /*@\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile(i < LARGE_INT) {\n        int j = unknown_int();\n        if (!(1 <= j && j < LARGE_INT)) return 0;\n        i = i + j;\n        k ++;\n    }\n    {;\n//@ assert(k <= LARGE_INT);\n}\n\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= 1000000;\nloop invariant 0 <= k <= 1000000;\nloop invariant i + k * large_int >= large_int;\nloop invariant i + k * large_int < large_int * 1000000;\nloop invariant i + k * large_int < large_int * 1000000;\nloop invariant i + k * large_int < large_int * 1000000;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 17: unbound logic variable large_int. Ignoring loop annotation",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int k = 0;\n    /*@\n\n\n\n\n*/\nwhile(i < LARGE_INT) {\n        int j = unknown_int();\n        if (!(1 <= j && j < LARGE_INT)) return 0;\n        i = i + j;\n        k ++;\n    }\n    {;\n//@ assert(k <= LARGE_INT);\n}\n\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 1,
                    "annotations": "```\n/*@\n\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 15: unexpected token ''",
                    "houdini_error": "No annotations found"
                },
                {
                    "num_solver_calls": 8,
                    "annotations": "```\n/*@\nloop invariant i <= LARGE_INT;\nloop invariant 1 <= j && j < LARGE_INT;\nloop invariant i + j <= LARGE_INT;\nloop invariant k >= 0;\nloop invariant k <= LARGE_INT;\nloop invariant j >= 0;\nloop invariant j < LARGE_INT;\nloop invariant unknown_int() <= LARGE_INT;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 22: unexpected token ')'",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int k = 0;\n    /*@\n\n\n\nloop invariant i4: k >= 0;\n\n\n\n\n*/\nwhile(i < LARGE_INT) {\n        int j = unknown_int();\n        if (!(1 <= j && j < LARGE_INT)) return 0;\n        i = i + j;\n        k ++;\n    }\n    {;\n//@ assert(k <= LARGE_INT);\n}\n\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= 1000000;\nloop invariant k >= 0;\nloop invariant i >= k;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= 1000000 is established but not preserved.\nloop invariant k >= 0 is partially proven to be inductive.\nloop invariant i >= k is partially proven to be inductive.\nAssertion k <= 1000000: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int k = 0;\n    /*@\n\nloop invariant i2: k >= 0;\nloop invariant i3: i >= k;\n*/\nwhile(i < LARGE_INT) {\n        int j = unknown_int();\n        if (!(1 <= j && j < LARGE_INT)) return 0;\n        i = i + j;\n        k ++;\n    }\n    {;\n//@ assert(k <= LARGE_INT);\n}\n\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 9,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 0 <= j < LARGE_INT;\nloop invariant k >= 0;\nloop invariant k <= i / j;\nloop invariant k <= LARGE_INT / j;\nloop invariant i >= j * k;\nloop invariant i >= j * (k - 1);\nloop invariant i <= j * k + j - 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 16: unbound logic variable j. Ignoring loop annotation",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int k = 0;\n    /*@\n\n\nloop invariant i3: k >= 0;\n\n\n\n\n\n*/\nwhile(i < LARGE_INT) {\n        int j = unknown_int();\n        if (!(1 <= j && j < LARGE_INT)) return 0;\n        i = i + j;\n        k ++;\n    }\n    {;\n//@ assert(k <= LARGE_INT);\n}\n\n    return 0;\n}",
                    "checker_output_after_prune": false
                }
            ],
            "checker_output_for_combined_annotations": false,
            "checker_message_for_combined_annotations": "Annotation error on line 26: Assignment operators not allowed in annotations.",
            "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int k = 0;\n    /*@\nloop invariant i1: 0 <= i <= LARGE_INT;\nloop invariant i2: 1 <= j < LARGE_INT;\nloop invariant i3: 0 <= k <= LARGE_INT;\nloop invariant i4: i + j >= 0;\nloop invariant i5: i + j <= 2 * LARGE_INT;\nloop invariant i6: i + j <= LARGE_INT + j;\nloop invariant i7: k * j >= 0;\nloop invariant i8: k * j <= LARGE_INT * j;\nloop invariant i9: k * j <= (k + 1) * j;\nloop invariant i10: k * j <= (k + 1) * (LARGE_INT - 1);\nloop invariant i11: k * j <= LARGE_INT * (k + 1);\nloop invariant i12: i = 0;\nloop invariant i13: k = 0;\nloop invariant i14: 0 <= j <= LARGE_INT;\nloop invariant i15: i <= LARGE_INT * k;\nloop invariant i16: i >= LARGE_INT * (k - 1);\nloop invariant i17: i >= 0;\nloop invariant i18: k >= 0;\nloop invariant i19: j >= 1;\nloop invariant i20: j < LARGE_INT;\nloop invariant i21: k <= LARGE_INT;\nloop invariant i22: k >= 1;\nloop invariant i23: i <= LARGE_INT;\nloop invariant i24: 0 <= k;\nloop invariant i25: 0 <= i;\nloop invariant i26: i <= k * LARGE_INT;\nloop invariant i27: i >= k;\nloop invariant i28: i <= k * (k + 1) / 2;\nloop invariant i29: i >= k * (k - 1) / 2;\nloop invariant i30: i <= k * (k + 1) / 2 * LARGE_INT;\nloop invariant i31: i >= k * (k - 1) / 2 * LARGE_INT;\nloop invariant i32: i <= k * (k + 1) / 2 * LARGE_INT + k;\nloop invariant i33: i >= k * (k - 1) / 2 * LARGE_INT + k;\nloop invariant i34: i <= k * (k + 1) / 2 * LARGE_INT + k * LARGE_INT;\nloop invariant i35: i >= k * (k - 1) / 2 * LARGE_INT + k * LARGE_INT;\nloop invariant i36: i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 1);\nloop invariant i37: i >= k * (k - 1) / 2 * LARGE_INT + k * (k + 1);\nloop invariant i38: i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 2) / 2;\nloop invariant i39: i >= k * (k - 1) / 2 * LARGE_INT + k * (k + 2) / 2;\nloop invariant i40: i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 3) / 2;\nloop invariant i41: i >= k * (k - 1) / 2 * LARGE_INT + k * (k + 3) / 2;\nloop invariant i42: i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 4) / 2;\nloop invariant i43: i >= k * (k - 1) / 2 * LARGE_INT + k * (k + 4) / 2;\nloop invariant i44: i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 5) / 2;\nloop invariant i45: i >= k * (k - 1) / 2 * LARGE_INT + k * (k + 5) / 2;\nloop invariant i46: i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 6) / 2;\nloop invariant i47: i >= k * (k - 1) / 2 * LARGE_INT + k * (k + 6) / 2;\nloop invariant i48: i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 7) / 2;\nloop invariant i49: i >= k * (k - 1) / 2 * LARGE_INT + k * (k + 7) / 2;\nloop invariant i50: i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 8) / 2;\nloop invariant i51: i >= k * (k - 1) / 2 * LARGE_INT + k * (k + 8) / 2;\nloop invariant i52: i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 9) / 2;\nloop invariant i53: i >= k * (k - 1) / 2 * LARGE_INT + k * (k + 9) / 2;\nloop invariant i54: i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 10) / 2;\nloop invariant i55: i >= k * (k - 1) / 2 * LARGE_INT + k * (k + 10) / 2;\nloop invariant i56: i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 11) / 2;\nloop invariant i57: i >= k * (k - 1) / 2 * LARGE_INT + k * (k + 11) / 2;\nloop invariant i58: i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 12) / 2;\nloop invariant i59: i >= k * (k - 1) / 2 * LARGE_INT + k * (k + 12) / 2;\nloop invariant i60: i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 13) / 2;\nloop invariant i61: i + j <= LARGE_INT;\nloop invariant i62: 1 <= j && j < LARGE_INT ==> i + j >= i;\nloop invariant i63: 1 <= j && j < LARGE_INT ==> k + 1 >= k;\nloop invariant i64: 1 <= j && j < LARGE_INT ==> i + j <= i + LARGE_INT;\nloop invariant i65: 1 <= j && j < LARGE_INT ==> k + 1 <= LARGE_INT;\nloop invariant i66: 1 <= j && j < LARGE_INT ==> i + j < LARGE_INT ==> k + 1 < LARGE_INT;\nloop invariant i67: i == k * j;\nloop invariant i68: 0 <= i <= 1000000;\nloop invariant i69: 0 <= k <= 1000000;\nloop invariant i70: k = (i / LARGE_INT);\nloop invariant i71: i + j == (LARGE_INT  - 1);\nloop invariant i72: k == (LARGE_INT  - 2);\nloop invariant i73: j == (LARGE_INT  - 3);\nloop invariant i74: i == (LARGE_INT  - 2);\nloop invariant i75: k == (LARGE_INT  - 1);\nloop invariant i76: j == (LARGE_INT  - 2);\nloop invariant i77: i == (LARGE_INT  - 1);\nloop invariant i78: k == (LARGE_INT  - 0);\nloop invariant i79: j == (LARGE_INT  - 1);\nloop invariant i80: i == (LARGE_INT  - 0);\nloop invariant i81: j == (LARGE_INT  - 0);\nloop invariant i82: 1 <= i <= LARGE_INT;\nloop invariant i83: 1 <= j ==> 1 <= i + j <= LARGE_INT;\nloop invariant i84: 1 <= j ==> k + 1 <= LARGE_INT;\nloop invariant i85: 1 <= j ==> 1 <= k + 1;\nloop invariant i86: 1 < j ==> 1 <= k + 1;\nloop invariant i87: 1 <= j ==> i + j < LARGE_INT;\nloop invariant i88: 1 <= j ==> i < LARGE_INT;\nloop invariant i89: 1 <= j ==> i + j <= LARGE_INT;\nloop invariant i90: 1 <= j ==> k <= LARGE_INT;\nloop invariant i91: 1 <= j ==> i <= LARGE_INT;\nloop invariant i92: i + k * large_int >= large_int;\nloop invariant i93: i + k * large_int < large_int * 1000000;\nloop invariant i94: 1 <= j && j < LARGE_INT;\nloop invariant i95: j >= 0;\nloop invariant i96: unknown_int() <= LARGE_INT;\nloop invariant i97: 0 <= j < LARGE_INT;\nloop invariant i98: k <= i / j;\nloop invariant i99: k <= LARGE_INT / j;\nloop invariant i100: i >= j * k;\nloop invariant i101: i >= j * (k - 1);\nloop invariant i102: i <= j * k + j - 1;\n*/\nwhile(i < LARGE_INT) {\n        int j = unknown_int();\n        if (!(1 <= j && j < LARGE_INT)) return 0;\n        i = i + j;\n        k ++;\n    }\n    {;\n//@ assert(k <= LARGE_INT);\n}\n\n    return 0;\n}",
            "combined_annotation_num_solver_calls": 61,
            "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int k = 0;\n    /*@\n\n\nloop invariant i3: 0 <= k <= LARGE_INT;\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i15: i <= LARGE_INT * k;\n\nloop invariant i17: i >= 0;\nloop invariant i18: k >= 0;\n\n\nloop invariant i21: k <= LARGE_INT;\n\n\nloop invariant i24: 0 <= k;\nloop invariant i25: 0 <= i;\nloop invariant i26: i <= k * LARGE_INT;\nloop invariant i27: i >= k;\n\n\nloop invariant i30: i <= k * (k + 1) / 2 * LARGE_INT;\n\nloop invariant i32: i <= k * (k + 1) / 2 * LARGE_INT + k;\n\nloop invariant i34: i <= k * (k + 1) / 2 * LARGE_INT + k * LARGE_INT;\n\nloop invariant i36: i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 1);\n\nloop invariant i38: i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 2) / 2;\n\nloop invariant i40: i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 3) / 2;\n\nloop invariant i42: i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 4) / 2;\n\nloop invariant i44: i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 5) / 2;\n\nloop invariant i46: i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 6) / 2;\n\nloop invariant i48: i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 7) / 2;\n\nloop invariant i50: i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 8) / 2;\n\nloop invariant i52: i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 9) / 2;\n\nloop invariant i54: i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 10) / 2;\n\nloop invariant i56: i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 11) / 2;\n\nloop invariant i58: i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 12) / 2;\n\nloop invariant i60: i <= k * (k + 1) / 2 * LARGE_INT + k * (k + 13) / 2;\n\n\n\n\n\n\n\n\nloop invariant i69: 0 <= k <= 1000000;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile(i < LARGE_INT) {\n        int j = unknown_int();\n        if (!(1 <= j && j < LARGE_INT)) return 0;\n        i = i + j;\n        k ++;\n    }\n    {;\n//@ assert(k <= LARGE_INT);\n}\n\n    return 0;\n}",
            "checker_output_after_prune": true
        },
        {
            "file": "../dataset/loop_invariants/sv-benchmarks/loop-invariants/odd.c",
            "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 1;\n  while (unknown_int()) {\n    x += 2;\n  }\n  {;\n//@ assert(x % 2);\n}\n\n  return 0;\n}",
            "success": false,
            "annotation_blocks": [
                "```\n/*@\nloop invariant 1 <= x;\nloop invariant x % 2 == 0 ==> x >= 2;\nloop invariant x % 2 != 0 ==> x == 1;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x;\nloop invariant x % 2 == 1;\nloop invariant unknown_int() => x % 2 == 1;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 2 * j;\nloop invariant x % 2 == 0;\n*/\n```",
                "```\n/*@\nloop invariant 1 <= x;\nloop invariant x % 2 == 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= (2 * UnknownInt());\n*/\n```",
                "```\n/*@\nloop invariant 1 <= x <= 3;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 2 * x + 1;\nloop invariant x % 2 == 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 2147483647;\nloop invariant unknown_int() ==> x % 2 == 0;\n*/\n```",
                "```\n/*@\n\n*/\n```",
                "```\n/*@\n\n*/\n```",
                "```\n/*@\nloop invariant x >= 1;\nloop invariant x % 2 == 0 ==> unknown_int();\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 2^(32);\nloop invariant x % 2 == 1;\nloop invariant x <= 2^(32) - 1;\nloop invariant x >= 1;\nloop invariant x < 2^(32);\nloop invariant x > 0;\nloop invariant x != 0;\nloop invariant x != 1;\nloop invariant x != 2;\nloop invariant x != 3;\nloop invariant x != 4;\nloop invariant x != 5;\nloop invariant x != 6;\nloop invariant x != 7;\nloop invariant x != 8;\nloop invariant x != 9;\nloop invariant x != 10;\nloop invariant x != 11;\nloop invariant x != 12;\nloop invariant x != 13;\nloop invariant x != 14;\nloop invariant x != 15;\nloop invariant x != 16;\nloop invariant x != 17;\nloop invariant x != 18;\nloop invariant x != 19;\nloop invariant x != 20;\nloop invariant x != 21;\nloop invariant x != 22;\nloop invariant x != 23;\nloop invariant x != 24;\nloop invariant x != 25;\nloop invariant x != 26;\nloop invariant x != 27;\nloop invariant x != 28;\nloop invariant x != 29;\nloop invariant x != 30;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 2;\nloop invariant 0 <= x % 2 <= 1;\nloop invariant x % 2 == 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x;\nloop invariant x % 2 == 0;\nloop invariant x <= 2 * unknown_int();\nloop invariant x >= 0;\nloop invariant unknown_int() == 0;\nloop invariant x == 0;\nloop invariant x % 2 == 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 2 * (1 + (y - 1) * y / 2);\n*/\n```"
            ],
            "completions": [
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 1 <= x;\nloop invariant x % 2 == 0 ==> x >= 2;\nloop invariant x % 2 != 0 ==> x == 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= x is established but not preserved.\nloop invariant x % 2 == 0 ==> x >= 2 is partially proven to be inductive.\nloop invariant x % 2 != 0 ==> x == 1 is established but not preserved.\nAssertion x % 2 != 0: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 1;\n  /*@\n\n\n\n*/\nwhile (unknown_int()) {\n    x += 2;\n  }\n  {;\n//@ assert(x % 2);\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= x;\nloop invariant x % 2 == 1;\nloop invariant unknown_int() => x % 2 == 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 14: unexpected token ')'",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 1;\n  /*@\nloop invariant i1: 0 <= x;\n\n\n*/\nwhile (unknown_int()) {\n    x += 2;\n  }\n  {;\n//@ assert(x % 2);\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 2 * j;\nloop invariant x % 2 == 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 12: unbound logic variable j. Ignoring loop annotation",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 1;\n  /*@\n\n\n*/\nwhile (unknown_int()) {\n    x += 2;\n  }\n  {;\n//@ assert(x % 2);\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 1 <= x;\nloop invariant x % 2 == 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= x is partially proven to be inductive.\nloop invariant x % 2 == 0 is preserved but not established.\nAssertion x % 2 != 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 1;\n  /*@\n\n\n*/\nwhile (unknown_int()) {\n    x += 2;\n  }\n  {;\n//@ assert(x % 2);\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= (2 * UnknownInt());\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 12: unexpected token ')'",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 1;\n  /*@\n\n*/\nwhile (unknown_int()) {\n    x += 2;\n  }\n  {;\n//@ assert(x % 2);\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 1 <= x <= 3;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= x <= 3 is established but not preserved.\nAssertion x % 2 != 0: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 1;\n  /*@\n\n*/\nwhile (unknown_int()) {\n    x += 2;\n  }\n  {;\n//@ assert(x % 2);\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 2 * x + 1;\nloop invariant x % 2 == 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 2 * x + 1 is partially proven to be inductive.\nloop invariant x % 2 == 0 is preserved but not established.\nAssertion x % 2 != 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 1;\n  /*@\nloop invariant i1: 0 <= x <= 2 * x + 1;\n\n*/\nwhile (unknown_int()) {\n    x += 2;\n  }\n  {;\n//@ assert(x % 2);\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 2147483647;\nloop invariant unknown_int() ==> x % 2 == 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 13: unexpected token ')'",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 1;\n  /*@\n\n\n*/\nwhile (unknown_int()) {\n    x += 2;\n  }\n  {;\n//@ assert(x % 2);\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 1,
                    "annotations": "```\n/*@\n\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 12: unexpected token ''",
                    "houdini_error": "No annotations found"
                },
                {
                    "num_solver_calls": 1,
                    "annotations": "```\n/*@\n\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 12: unexpected token ''",
                    "houdini_error": "No annotations found"
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant x >= 1;\nloop invariant x % 2 == 0 ==> unknown_int();\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 13: unexpected token ')'",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 1;\n  /*@\n\n\n*/\nwhile (unknown_int()) {\n    x += 2;\n  }\n  {;\n//@ assert(x % 2);\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 9,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 2^(32);\nloop invariant x % 2 == 1;\nloop invariant x <= 2^(32) - 1;\nloop invariant x >= 1;\nloop invariant x < 2^(32);\nloop invariant x > 0;\nloop invariant x != 0;\nloop invariant x != 1;\nloop invariant x != 2;\nloop invariant x != 3;\nloop invariant x != 4;\nloop invariant x != 5;\nloop invariant x != 6;\nloop invariant x != 7;\nloop invariant x != 8;\nloop invariant x != 9;\nloop invariant x != 10;\nloop invariant x != 11;\nloop invariant x != 12;\nloop invariant x != 13;\nloop invariant x != 14;\nloop invariant x != 15;\nloop invariant x != 16;\nloop invariant x != 17;\nloop invariant x != 18;\nloop invariant x != 19;\nloop invariant x != 20;\nloop invariant x != 21;\nloop invariant x != 22;\nloop invariant x != 23;\nloop invariant x != 24;\nloop invariant x != 25;\nloop invariant x != 26;\nloop invariant x != 27;\nloop invariant x != 28;\nloop invariant x != 29;\nloop invariant x != 30;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 12: invalid operands to binary ^; unexpected 𝔹 and ℤ. Ignoring loop annotation",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 1;\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown_int()) {\n    x += 2;\n  }\n  {;\n//@ assert(x % 2);\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 2;\nloop invariant 0 <= x % 2 <= 1;\nloop invariant x % 2 == 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 2 is partially proven to be inductive.\nloop invariant 0 <= x % 2 <= 1 is partially proven to be inductive.\nloop invariant x % 2 == 0 is preserved but not established.\nAssertion x % 2 != 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 1;\n  /*@\n\nloop invariant i2: 0 <= x % 2 <= 1;\n\n*/\nwhile (unknown_int()) {\n    x += 2;\n  }\n  {;\n//@ assert(x % 2);\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 6,
                    "annotations": "```\n/*@\nloop invariant 0 <= x;\nloop invariant x % 2 == 0;\nloop invariant x <= 2 * unknown_int();\nloop invariant x >= 0;\nloop invariant unknown_int() == 0;\nloop invariant x == 0;\nloop invariant x % 2 == 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 14: unexpected token ')'",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 1;\n  /*@\nloop invariant i1: 0 <= x;\n\n\nloop invariant i4: x >= 0;\n\n\n*/\nwhile (unknown_int()) {\n    x += 2;\n  }\n  {;\n//@ assert(x % 2);\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 2 * (1 + (y - 1) * y / 2);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 12: unbound logic variable y. Ignoring loop annotation",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 1;\n  /*@\n\n*/\nwhile (unknown_int()) {\n    x += 2;\n  }\n  {;\n//@ assert(x % 2);\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                }
            ],
            "checker_output_for_combined_annotations": false,
            "checker_message_for_combined_annotations": "Annotation error on line 17: unexpected token ')'",
            "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 1;\n  /*@\nloop invariant i1: 1 <= x;\nloop invariant i2: x % 2 == 0 ==> x >= 2;\nloop invariant i3: x % 2 != 0 ==> x == 1;\nloop invariant i4: 0 <= x;\nloop invariant i5: x % 2 == 1;\nloop invariant i6: unknown_int() => x % 2 == 1;\nloop invariant i7: 0 <= x <= 2 * j;\nloop invariant i8: x % 2 == 0;\nloop invariant i9: 0 <= x <= (2 * UnknownInt());\nloop invariant i10: 1 <= x <= 3;\nloop invariant i11: 0 <= x <= 2 * x + 1;\nloop invariant i12: 0 <= x <= 2147483647;\nloop invariant i13: unknown_int() ==> x % 2 == 0;\nloop invariant i14: x >= 1;\nloop invariant i15: x % 2 == 0 ==> unknown_int();\nloop invariant i16: 0 <= x <= 2^(32);\nloop invariant i17: x <= 2^(32) - 1;\nloop invariant i18: x < 2^(32);\nloop invariant i19: x > 0;\nloop invariant i20: x != 0;\nloop invariant i21: x != 1;\nloop invariant i22: x != 2;\nloop invariant i23: x != 3;\nloop invariant i24: x != 4;\nloop invariant i25: x != 5;\nloop invariant i26: x != 6;\nloop invariant i27: x != 7;\nloop invariant i28: x != 8;\nloop invariant i29: x != 9;\nloop invariant i30: x != 10;\nloop invariant i31: x != 11;\nloop invariant i32: x != 12;\nloop invariant i33: x != 13;\nloop invariant i34: x != 14;\nloop invariant i35: x != 15;\nloop invariant i36: x != 16;\nloop invariant i37: x != 17;\nloop invariant i38: x != 18;\nloop invariant i39: x != 19;\nloop invariant i40: x != 20;\nloop invariant i41: x != 21;\nloop invariant i42: x != 22;\nloop invariant i43: x != 23;\nloop invariant i44: x != 24;\nloop invariant i45: x != 25;\nloop invariant i46: x != 26;\nloop invariant i47: x != 27;\nloop invariant i48: x != 28;\nloop invariant i49: x != 29;\nloop invariant i50: x != 30;\nloop invariant i51: 0 <= x <= 2;\nloop invariant i52: 0 <= x % 2 <= 1;\nloop invariant i53: x <= 2 * unknown_int();\nloop invariant i54: x >= 0;\nloop invariant i55: unknown_int() == 0;\nloop invariant i56: x == 0;\nloop invariant i57: 0 <= x <= 2 * (1 + (y - 1) * y / 2);\n*/\nwhile (unknown_int()) {\n    x += 2;\n  }\n  {;\n//@ assert(x % 2);\n}\n\n  return 0;\n}",
            "combined_annotation_num_solver_calls": 26,
            "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 1;\n  /*@\n\n\n\nloop invariant i4: 0 <= x;\n\n\n\n\n\n\nloop invariant i11: 0 <= x <= 2 * x + 1;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i52: 0 <= x % 2 <= 1;\n\nloop invariant i54: x >= 0;\n\n\n\n*/\nwhile (unknown_int()) {\n    x += 2;\n  }\n  {;\n//@ assert(x % 2);\n}\n\n  return 0;\n}",
            "checker_output_after_prune": false
        },
        {
            "file": "../dataset/loop_invariants/sv-benchmarks/loop-invariants/even.c",
            "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 0;\n  while (unknown_int()) {\n    x += 2;\n  }\n  {;\n//@ assert(!(x % 2));\n}\n\n  return 0;\n}",
            "success": false,
            "annotation_blocks": [
                "```\n/*@\nloop invariant 0 <= x;\nloop invariant x % 2 == 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 4294967295;\nloop invariant 0 <= unknown_int() <= 1;\nloop invariant !(unknown_int() && (x % 2));\nloop invariant !(unknown_int() && ((x % 2) == 0));\nloop invariant !(unknown_int() && (!(x % 2)));\nloop invariant !(unknown_int() && (x % 2 == 0));\nloop invariant !(unknown_int() && ((x % 2) == 0));\nloop invariant !(unknown_int() && (!(x % 2)));\nloop invariant !(unknown_int() && (x % 2 == 0));\nloop invariant !(unknown_int() && ((x % 2) == 0));\nloop invariant !(unknown_int() && (!(x % 2)));\nloop invariant !(unknown_int() && (x % 2 == 0));\nloop invariant !(unknown_int() && ((x % 2) == 0));\nloop invariant !(unknown_int() && (!(x % 2)));\nloop invariant !(unknown_int() && (x % 2 == 0));\nloop invariant !(unknown_int() && ((x % 2) == 0));\nloop invariant !(unknown_int() && (!(x % 2)));\nloop invariant !(unknown_int() && (x % 2 == 0));\nloop invariant !(unknown_int() && ((x % 2) == 0));\nloop invariant !(unknown_int() && (!(x % 2)));\nloop invariant !(unknown_int() && (x % 2 == 0));\nloop invariant !(unknown_int() && ((x % 2) == 0));\nloop invariant !(unknown_int() && (!(x % 2)));\nloop invariant !(unknown_int() && (x % 2 == 0));\nloop invariant !(unknown_int() && ((x % 2) == 0));\nloop invariant !(unknown_int() && (!(x % 2)));\nloop invariant !(unknown_int() && (x % 2 == 0));\nloop invariant !(unknown_int() && ((x % 2) == 0));\nloop invariant !(unknown_int() && (!(x % 2)));\nloop invariant !(unknown_int() && (x % 2 == 0));\nloop invariant !(unknown_int() && ((x % 2) == 0));\nloop invariant !(unknown_int() && (!(x % 2)));\nloop invariant !(unknown_int() && (x % 2 == 0));\nloop invariant !(unknown_int() && ((x % 2) == 0));\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x;\nloop invariant x % 2 == 0;\nloop invariant x == 2 * (unknown_int() ? 1 : 0);\n*/\n```",
                "```\n/*@\nloop invariant \\true;\nloop invariant 0 <= x <= UINT_MAX;\nloop invariant unknown_int() ==> x % 2 == 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x;\nloop invariant x % 2 == 0;\nloop invariant x <= 2 * unknown_int();\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 2 * (1 + (y - 1) * y / 2);\nloop invariant 0 <= x <= y + 1;\nloop invariant 0 <= y <= 100000;\nloop invariant x >= 1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x % 2 == 0;\nloop invariant y >= 0;\nloop invariant y % 1 == 0;\nloop invariant x >= 0;\nloop invariant x % 1 == 0;\nloop invariant x >= y;\nloop invariant x <= x + 2;\nloop invariant y >= y - 1;\nloop invariant y <= y + 1;\nloop invariant x >= 1;\nloop invariant x % 1 == 0;\nloop invariant y <= 100000;\nloop invariant y % 1 == 0;\nloop invariant x <= y + 1;\nloop invariant x >= 0;\nloop invariant x % 1 == 0;\nloop invariant y >= 0;\nloop invariant y % 1 == 0;\nloop invariant x >= 1;\nloop invariant x % 1 == 0;\nloop invariant y <= 100000;\nloop invariant y % 1 == 0;\nloop invariant x >= 0;\nloop invariant x % 1 == 0;\nloop invariant y >= 0;\nloop invariant y % 1 == 0;\nloop invariant x >= 1;\nloop invariant x % 1 == 0;\nloop invariant y <= 100000;\nloop invariant y % 1 == 0;\nloop invariant x >= 0;\nloop invariant x % 1 == 0;\nloop invariant y >= 0;\nloop invariant y % 1 == 0;\nloop invariant x >= 1;\nloop invariant x % 1 == 0;\nloop invariant y <= 100000;\nloop invariant y % 1 == 0;\nloop invariant x >= 0;\nloop invariant x % 1 == 0;\n*/\n```",
                "```\n/*@\n\n*/\n```",
                "```\n/*@\nloop invariant x = 0;\nloop invariant x is even;\n*/\n```",
                "```\n/*@\nloop invariant 1 <= x <= 2;\nloop invariant x % 2 == 0;\n*/\n```",
                "```\n/*@\nloop invariant 1 <= x <= 2 * x;\nloop invariant x % 2 == 0;\nloop invariant unknown_int() == 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 2 * (2^32-1);\nloop invariant x % 2 == 0;\nloop invariant unknown_int() ==> x >= 0;\nloop invariant !unknown_int() ==> x == 0;\nloop invariant unknown_int() ==> x < 2 * (2^32-1);\nloop invariant !unknown_int() ==> x <= 2 * (2^32-1);\nloop invariant unknown_int() ==> x % 2 == 0;\nloop invariant !unknown_int() ==> x % 2 == 0;\nloop invariant unknown_int() ==> x % 2 == 0;\nloop invariant !unknown_int() ==> x % 2 == 0;\nloop invariant unknown_int() ==> x % 2 == 0;\nloop invariant !unknown_int() ==> x % 2 == 0;\nloop invariant unknown_int() ==> x % 2 == 0;\nloop invariant !unknown_int() ==> x % 2 == 0;\nloop invariant unknown_int() ==> x % 2 == 0;\nloop invariant !unknown_int() ==> x % 2 == 0;\nloop invariant unknown_int() ==> x % 2 == 0;\nloop invariant !unknown_int() ==> x % 2 == 0;\nloop invariant unknown_int() ==> x % 2 == 0;\nloop invariant !unknown_int() ==> x % 2 == 0;\nloop invariant unknown_int() ==> x % 2 == 0;\nloop invariant !unknown_int() ==> x % 2 == 0;\nloop invariant unknown_int() ==> x % 2 == 0;\nloop invariant !unknown_int() ==> x % 2 == 0;\nloop invariant unknown_int() ==> x % 2 == 0;\nloop invariant !unknown_int() ==> x % 2 == 0;\nloop invariant unknown_int() ==> x % 2 == 0;\nloop invariant !unknown_int() ==> x % 2 == 0;\nloop invariant unknown_int() ==> x % 2 == 0;\nloop invariant !unknown_int() ==> x % 2 == 0;\nloop invariant unknown_int() ==> x % 2 == 0;\nloop invariant !unknown_int() ==> x % 2 == 0;\nloop invariant unknown_int() ==> x % 2 == 0;\nloop invariant !unknown_int() ==> x % 2 == 0;\nloop invariant unknown_int() ==> x % 2 == 0;\nloop invariant !unknown_int() ==> x % 2 == 0;\nloop invariant unknown_int() ==> x % 2 == 0;\nloop invariant !unknown_int() ==> x % 2 == 0;\nloop invariant unknown_int() ==> x % 2 == 0;\nloop invariant !unknown_int() ==> x % 2 == 0;\nloop invariant unknown_int() ==> x % 2 == 0;\nloop invariant !unknown_int() ==> x % 2 == 0;\nloop invariant unknown_int() ==> x % 2 == 0;\nloop invariant !unknown_int() ==> x % 2 == 0;\nloop invariant unknown_int() ==> x % 2 == 0;\nloop invariant !unknown_int() ==> x % 2 == 0;\nloop invariant unknown_int() ==> x % 2 == 0;\nloop invariant !unknown_int() ==> x % 2 == 0;\nloop invariant unknown_int() ==> x % 2 == 0;\nloop invariant !unknown_int() ==> x % 2 == 0;\nloop invariant unknown_int() ==> x % 2 == 0;\nloop invariant !unknown_int() ==> x % 2 == 0;\nloop invariant unknown_int() ==> x % 2 == 0;\nloop invariant !unknown_int() ==> x % 2 == 0;\nloop invariant unknown_int() ==> x % 2 == 0;\nloop invariant !unknown_int() ==> x % 2 == 0;\nloop invariant unknown_int() ==> x % 2 == 0;\nloop invariant !unknown_int() ==> x % 2 == 0;\nloop invariant unknown_int() ==> x % 2 == 0;\nloop invariant !unknown_int() ==> x % 2 == 0;\nloop invariant unknown_int() ==> x % 2 == 0;\nloop invariant !unknown_int() ==> x % 2 == 0;\nloop invariant unknown_int() ==> x % 2 == 0;\nloop invariant !unknown_int() ==> x % 2 == 0;\nloop invariant unknown_int() ==> x % 2 == 0;\nloop invariant !unknown_int() ==> x % 2 == 0;\nloop invariant unknown_int() ==> x % 2 == 0;\nloop invariant !unknown_int() ==> x % 2 == 0;\n*/\n```",
                "```\n/*@\nloop invariant x >= 0;\nloop invariant (x % 2) == 0;\nloop invariant (x % 2) == 0 ==> (x >= 0);\nloop invariant (x % 2) == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x >= 0;\nloop invariant (x % 2) == 0;\nloop invariant (x % 2) == 0 ==> (x >= 0);\nloop invariant (x % 2) == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 2 * y;\nloop invariant x % 2 == 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x;\nloop invariant x <= 2 * unknown_int();\nloop invariant unknown_int() == (x % 2);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 2147483646;\nloop invariant x % 2 == 0;\n*/\n```"
            ],
            "completions": [
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x;\nloop invariant x % 2 == 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x is partially proven to be inductive.\nloop invariant x % 2 == 0 is established but not preserved.\nAssertion x % 2 == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 0;\n  /*@\nloop invariant i1: 0 <= x;\n\n*/\nwhile (unknown_int()) {\n    x += 2;\n  }\n  {;\n//@ assert(!(x % 2));\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 7,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 4294967295;\nloop invariant 0 <= unknown_int() <= 1;\nloop invariant !(unknown_int() && (x % 2));\nloop invariant !(unknown_int() && ((x % 2) == 0));\nloop invariant !(unknown_int() && (!(x % 2)));\nloop invariant !(unknown_int() && (x % 2 == 0));\nloop invariant !(unknown_int() && ((x % 2) == 0));\nloop invariant !(unknown_int() && (!(x % 2)));\nloop invariant !(unknown_int() && (x % 2 == 0));\nloop invariant !(unknown_int() && ((x % 2) == 0));\nloop invariant !(unknown_int() && (!(x % 2)));\nloop invariant !(unknown_int() && (x % 2 == 0));\nloop invariant !(unknown_int() && ((x % 2) == 0));\nloop invariant !(unknown_int() && (!(x % 2)));\nloop invariant !(unknown_int() && (x % 2 == 0));\nloop invariant !(unknown_int() && ((x % 2) == 0));\nloop invariant !(unknown_int() && (!(x % 2)));\nloop invariant !(unknown_int() && (x % 2 == 0));\nloop invariant !(unknown_int() && ((x % 2) == 0));\nloop invariant !(unknown_int() && (!(x % 2)));\nloop invariant !(unknown_int() && (x % 2 == 0));\nloop invariant !(unknown_int() && ((x % 2) == 0));\nloop invariant !(unknown_int() && (!(x % 2)));\nloop invariant !(unknown_int() && (x % 2 == 0));\nloop invariant !(unknown_int() && ((x % 2) == 0));\nloop invariant !(unknown_int() && (!(x % 2)));\nloop invariant !(unknown_int() && (x % 2 == 0));\nloop invariant !(unknown_int() && ((x % 2) == 0));\nloop invariant !(unknown_int() && (!(x % 2)));\nloop invariant !(unknown_int() && (x % 2 == 0));\nloop invariant !(unknown_int() && ((x % 2) == 0));\nloop invariant !(unknown_int() && (!(x % 2)));\nloop invariant !(unknown_int() && (x % 2 == 0));\nloop invariant !(unknown_int() && ((x % 2) == 0));\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 13: unexpected token ')'",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 0;\n  /*@\nloop invariant i1: 0 <= x <= 4294967295;\n\n\n\n\n\n*/\nwhile (unknown_int()) {\n    x += 2;\n  }\n  {;\n//@ assert(!(x % 2));\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= x;\nloop invariant x % 2 == 0;\nloop invariant x == 2 * (unknown_int() ? 1 : 0);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 14: unexpected token ')'",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 0;\n  /*@\nloop invariant i1: 0 <= x;\n\n\n*/\nwhile (unknown_int()) {\n    x += 2;\n  }\n  {;\n//@ assert(!(x % 2));\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant \\true;\nloop invariant 0 <= x <= UINT_MAX;\nloop invariant unknown_int() ==> x % 2 == 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 14: unexpected token ')'",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 0;\n  /*@\nloop invariant i1: \\true;\nloop invariant i2: 0 <= x <= UINT_MAX;\n\n*/\nwhile (unknown_int()) {\n    x += 2;\n  }\n  {;\n//@ assert(!(x % 2));\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= x;\nloop invariant x % 2 == 0;\nloop invariant x <= 2 * unknown_int();\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 14: unexpected token ')'",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 0;\n  /*@\nloop invariant i1: 0 <= x;\n\n\n*/\nwhile (unknown_int()) {\n    x += 2;\n  }\n  {;\n//@ assert(!(x % 2));\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 14,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 2 * (1 + (y - 1) * y / 2);\nloop invariant 0 <= x <= y + 1;\nloop invariant 0 <= y <= 100000;\nloop invariant x >= 1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x % 2 == 0;\nloop invariant y >= 0;\nloop invariant y % 1 == 0;\nloop invariant x >= 0;\nloop invariant x % 1 == 0;\nloop invariant x >= y;\nloop invariant x <= x + 2;\nloop invariant y >= y - 1;\nloop invariant y <= y + 1;\nloop invariant x >= 1;\nloop invariant x % 1 == 0;\nloop invariant y <= 100000;\nloop invariant y % 1 == 0;\nloop invariant x <= y + 1;\nloop invariant x >= 0;\nloop invariant x % 1 == 0;\nloop invariant y >= 0;\nloop invariant y % 1 == 0;\nloop invariant x >= 1;\nloop invariant x % 1 == 0;\nloop invariant y <= 100000;\nloop invariant y % 1 == 0;\nloop invariant x >= 0;\nloop invariant x % 1 == 0;\nloop invariant y >= 0;\nloop invariant y % 1 == 0;\nloop invariant x >= 1;\nloop invariant x % 1 == 0;\nloop invariant y <= 100000;\nloop invariant y % 1 == 0;\nloop invariant x >= 0;\nloop invariant x % 1 == 0;\nloop invariant y >= 0;\nloop invariant y % 1 == 0;\nloop invariant x >= 1;\nloop invariant x % 1 == 0;\nloop invariant y <= 100000;\nloop invariant y % 1 == 0;\nloop invariant x >= 0;\nloop invariant x % 1 == 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 12: unbound logic variable y. Ignoring loop annotation",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 0;\n  /*@\n\n\n\n\nloop invariant i5: x >= 0;\n\n\n\nloop invariant i9: x % 1 == 0;\n\nloop invariant i11: x <= x + 2;\n\n\n\n\n*/\nwhile (unknown_int()) {\n    x += 2;\n  }\n  {;\n//@ assert(!(x % 2));\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 1,
                    "annotations": "```\n/*@\n\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 12: unexpected token ''",
                    "houdini_error": "No annotations found"
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant x = 0;\nloop invariant x is even;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 12: Assignment operators not allowed in annotations.",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 0;\n  /*@\n\n\n*/\nwhile (unknown_int()) {\n    x += 2;\n  }\n  {;\n//@ assert(!(x % 2));\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 1 <= x <= 2;\nloop invariant x % 2 == 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= x <= 2 is preserved but not established.\nloop invariant x % 2 == 0 is partially proven to be inductive.\nAssertion x % 2 == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 0;\n  /*@\n\n\n*/\nwhile (unknown_int()) {\n    x += 2;\n  }\n  {;\n//@ assert(!(x % 2));\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 1 <= x <= 2 * x;\nloop invariant x % 2 == 0;\nloop invariant unknown_int() == 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 14: unexpected token ')'",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 0;\n  /*@\n\n\n\n*/\nwhile (unknown_int()) {\n    x += 2;\n  }\n  {;\n//@ assert(!(x % 2));\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 9,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 2 * (2^32-1);\nloop invariant x % 2 == 0;\nloop invariant unknown_int() ==> x >= 0;\nloop invariant !unknown_int() ==> x == 0;\nloop invariant unknown_int() ==> x < 2 * (2^32-1);\nloop invariant !unknown_int() ==> x <= 2 * (2^32-1);\nloop invariant unknown_int() ==> x % 2 == 0;\nloop invariant !unknown_int() ==> x % 2 == 0;\nloop invariant unknown_int() ==> x % 2 == 0;\nloop invariant !unknown_int() ==> x % 2 == 0;\nloop invariant unknown_int() ==> x % 2 == 0;\nloop invariant !unknown_int() ==> x % 2 == 0;\nloop invariant unknown_int() ==> x % 2 == 0;\nloop invariant !unknown_int() ==> x % 2 == 0;\nloop invariant unknown_int() ==> x % 2 == 0;\nloop invariant !unknown_int() ==> x % 2 == 0;\nloop invariant unknown_int() ==> x % 2 == 0;\nloop invariant !unknown_int() ==> x % 2 == 0;\nloop invariant unknown_int() ==> x % 2 == 0;\nloop invariant !unknown_int() ==> x % 2 == 0;\nloop invariant unknown_int() ==> x % 2 == 0;\nloop invariant !unknown_int() ==> x % 2 == 0;\nloop invariant unknown_int() ==> x % 2 == 0;\nloop invariant !unknown_int() ==> x % 2 == 0;\nloop invariant unknown_int() ==> x % 2 == 0;\nloop invariant !unknown_int() ==> x % 2 == 0;\nloop invariant unknown_int() ==> x % 2 == 0;\nloop invariant !unknown_int() ==> x % 2 == 0;\nloop invariant unknown_int() ==> x % 2 == 0;\nloop invariant !unknown_int() ==> x % 2 == 0;\nloop invariant unknown_int() ==> x % 2 == 0;\nloop invariant !unknown_int() ==> x % 2 == 0;\nloop invariant unknown_int() ==> x % 2 == 0;\nloop invariant !unknown_int() ==> x % 2 == 0;\nloop invariant unknown_int() ==> x % 2 == 0;\nloop invariant !unknown_int() ==> x % 2 == 0;\nloop invariant unknown_int() ==> x % 2 == 0;\nloop invariant !unknown_int() ==> x % 2 == 0;\nloop invariant unknown_int() ==> x % 2 == 0;\nloop invariant !unknown_int() ==> x % 2 == 0;\nloop invariant unknown_int() ==> x % 2 == 0;\nloop invariant !unknown_int() ==> x % 2 == 0;\nloop invariant unknown_int() ==> x % 2 == 0;\nloop invariant !unknown_int() ==> x % 2 == 0;\nloop invariant unknown_int() ==> x % 2 == 0;\nloop invariant !unknown_int() ==> x % 2 == 0;\nloop invariant unknown_int() ==> x % 2 == 0;\nloop invariant !unknown_int() ==> x % 2 == 0;\nloop invariant unknown_int() ==> x % 2 == 0;\nloop invariant !unknown_int() ==> x % 2 == 0;\nloop invariant unknown_int() ==> x % 2 == 0;\nloop invariant !unknown_int() ==> x % 2 == 0;\nloop invariant unknown_int() ==> x % 2 == 0;\nloop invariant !unknown_int() ==> x % 2 == 0;\nloop invariant unknown_int() ==> x % 2 == 0;\nloop invariant !unknown_int() ==> x % 2 == 0;\nloop invariant unknown_int() ==> x % 2 == 0;\nloop invariant !unknown_int() ==> x % 2 == 0;\nloop invariant unknown_int() ==> x % 2 == 0;\nloop invariant !unknown_int() ==> x % 2 == 0;\nloop invariant unknown_int() ==> x % 2 == 0;\nloop invariant !unknown_int() ==> x % 2 == 0;\nloop invariant unknown_int() ==> x % 2 == 0;\nloop invariant !unknown_int() ==> x % 2 == 0;\nloop invariant unknown_int() ==> x % 2 == 0;\nloop invariant !unknown_int() ==> x % 2 == 0;\nloop invariant unknown_int() ==> x % 2 == 0;\nloop invariant !unknown_int() ==> x % 2 == 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 14: unexpected token ')'",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 0;\n  /*@\n\n\n\n\n\n\n\n\n*/\nwhile (unknown_int()) {\n    x += 2;\n  }\n  {;\n//@ assert(!(x % 2));\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant x >= 0;\nloop invariant (x % 2) == 0;\nloop invariant (x % 2) == 0 ==> (x >= 0);\nloop invariant (x % 2) == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x >= 0;\nloop invariant (x % 2) == 0;\nloop invariant (x % 2) == 0 ==> (x >= 0);\nloop invariant (x % 2) == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x >= 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant x >= 0 is partially proven to be inductive.\nloop invariant (x % 2) == 0 is established but not preserved.\nloop invariant (x % 2) == 0 ==> (x >= 0) is partially proven to be inductive.\nloop invariant (x % 2) == 0 ==> x >= 0 is partially proven to be inductive.\nloop invariant x % 2 == 0 ==> x >= 0 is partially proven to be inductive.\nAssertion x % 2 == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 0;\n  /*@\nloop invariant i1: x >= 0;\n\nloop invariant i3: (x % 2) == 0 ==> (x >= 0);\nloop invariant i4: (x % 2) == 0 ==> x >= 0;\nloop invariant i5: x % 2 == 0 ==> x >= 0;\n*/\nwhile (unknown_int()) {\n    x += 2;\n  }\n  {;\n//@ assert(!(x % 2));\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 2 * y;\nloop invariant x % 2 == 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 12: unbound logic variable y. Ignoring loop annotation",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 0;\n  /*@\n\n\n*/\nwhile (unknown_int()) {\n    x += 2;\n  }\n  {;\n//@ assert(!(x % 2));\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= x;\nloop invariant x <= 2 * unknown_int();\nloop invariant unknown_int() == (x % 2);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 13: unexpected token ')'",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 0;\n  /*@\nloop invariant i1: 0 <= x;\n\n\n*/\nwhile (unknown_int()) {\n    x += 2;\n  }\n  {;\n//@ assert(!(x % 2));\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 2147483646;\nloop invariant x % 2 == 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 2147483646 is established but not preserved.\nloop invariant x % 2 == 0 is partially proven to be inductive.\nAssertion x % 2 == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 0;\n  /*@\n\n\n*/\nwhile (unknown_int()) {\n    x += 2;\n  }\n  {;\n//@ assert(!(x % 2));\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                }
            ],
            "checker_output_for_combined_annotations": false,
            "checker_message_for_combined_annotations": "Annotation error on line 15: unexpected token ')'",
            "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 0;\n  /*@\nloop invariant i1: 0 <= x;\nloop invariant i2: x % 2 == 0;\nloop invariant i3: 0 <= x <= 4294967295;\nloop invariant i4: 0 <= unknown_int() <= 1;\nloop invariant i5: !(unknown_int() && (x % 2));\nloop invariant i6: !(unknown_int() && ((x % 2) == 0));\nloop invariant i7: !(unknown_int() && (!(x % 2)));\nloop invariant i8: !(unknown_int() && (x % 2 == 0));\nloop invariant i9: x == 2 * (unknown_int() ? 1 : 0);\nloop invariant i10: \\true;\nloop invariant i11: 0 <= x <= UINT_MAX;\nloop invariant i12: unknown_int() ==> x % 2 == 0;\nloop invariant i13: x <= 2 * unknown_int();\nloop invariant i14: 0 <= x <= 2 * (1 + (y - 1) * y / 2);\nloop invariant i15: 0 <= x <= y + 1;\nloop invariant i16: 0 <= y <= 100000;\nloop invariant i17: x >= 1;\nloop invariant i18: x >= 0;\nloop invariant i19: y >= 0;\nloop invariant i20: y % 1 == 0;\nloop invariant i21: x % 1 == 0;\nloop invariant i22: x >= y;\nloop invariant i23: x <= x + 2;\nloop invariant i24: y >= y - 1;\nloop invariant i25: y <= y + 1;\nloop invariant i26: y <= 100000;\nloop invariant i27: x <= y + 1;\nloop invariant i28: x = 0;\nloop invariant i29: x is even;\nloop invariant i30: 1 <= x <= 2;\nloop invariant i31: 1 <= x <= 2 * x;\nloop invariant i32: unknown_int() == 0;\nloop invariant i33: 0 <= x <= 2 * (2^32-1);\nloop invariant i34: unknown_int() ==> x >= 0;\nloop invariant i35: !unknown_int() ==> x == 0;\nloop invariant i36: unknown_int() ==> x < 2 * (2^32-1);\nloop invariant i37: !unknown_int() ==> x <= 2 * (2^32-1);\nloop invariant i38: !unknown_int() ==> x % 2 == 0;\nloop invariant i39: (x % 2) == 0;\nloop invariant i40: (x % 2) == 0 ==> (x >= 0);\nloop invariant i41: (x % 2) == 0 ==> x >= 0;\nloop invariant i42: x % 2 == 0 ==> x >= 0;\nloop invariant i43: 0 <= x <= 2 * y;\nloop invariant i44: unknown_int() == (x % 2);\nloop invariant i45: 0 <= x <= 2147483646;\n*/\nwhile (unknown_int()) {\n    x += 2;\n  }\n  {;\n//@ assert(!(x % 2));\n}\n\n  return 0;\n}",
            "combined_annotation_num_solver_calls": 37,
            "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 0;\n  /*@\nloop invariant i1: 0 <= x;\n\nloop invariant i3: 0 <= x <= 4294967295;\n\n\n\n\n\n\nloop invariant i10: \\true;\nloop invariant i11: 0 <= x <= UINT_MAX;\n\n\n\n\n\n\nloop invariant i18: x >= 0;\n\n\nloop invariant i21: x % 1 == 0;\n\nloop invariant i23: x <= x + 2;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i40: (x % 2) == 0 ==> (x >= 0);\nloop invariant i41: (x % 2) == 0 ==> x >= 0;\nloop invariant i42: x % 2 == 0 ==> x >= 0;\n\n\n\n*/\nwhile (unknown_int()) {\n    x += 2;\n  }\n  {;\n//@ assert(!(x % 2));\n}\n\n  return 0;\n}",
            "checker_output_after_prune": false
        },
        {
            "file": "../dataset/loop_invariants/code2inv/24.c",
            "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  \n  (i = 1);\n  (j = 10);\n  \n  while ((j >= i)) {\n    {\n    (i  = (i + 2));\n    (j  = (j - 1));\n    }\n\n  }\n  \n{;\n//@ assert( (j == 6) );\n}\n\n}",
            "success": false,
            "annotation_blocks": [
                "```\n/*@\nloop invariant 1 <= i <= j;\nloop invariant i <= j + 1;\nloop invariant j >= 10;\nloop invariant j >= i - 2;\nloop invariant i <= 10;\nloop invariant j <= 10 - (i - 1) * (i - 2) / 2;\n*/\n```",
                "```\n/*@\nloop invariant 1 <= j <= i <= 11;\nloop invariant i + j <= 12;\nloop invariant (j == 6) ==> (i == 6);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= j <= 10;\nloop invariant 1 <= i <= 11;\nloop invariant i <= j;\nloop invariant i % 2 == 1;\nloop invariant j == 10 - (i - 1) / 2;\nloop invariant (j >= i) ==> (i % 2 == 1);\nloop invariant (j >= i) ==> (i <= j);\nloop invariant (j >= i) ==> (i <= 11);\nloop invariant (j >= i) ==> (j <= 10);\nloop invariant (j >= i) ==> (0 <= j);\nloop invariant (j >= i) ==> (0 <= i);\nloop invariant (j >= i) ==> (i % 2 == 1);\nloop invariant (j >= i) ==> (j == 10 - (i - 1) / 2);\nloop invariant (j >= i) ==> (i <= 11);\nloop invariant (j >= i) ==> (j <= 10);\nloop invariant (j >= i) ==> (0 <= j);\nloop invariant (j >= i) ==> (0 <= i);\nloop invariant (j >= i) ==> (i % 2 == 1);\nloop invariant (j >= i) ==> (j == 10 - (i - 1) / 2);\nloop invariant (j >= i) ==> (i <= 11);\nloop invariant (j >= i) ==> (j <= 10);\nloop invariant (j >= i) ==> (0 <= j);\nloop invariant (j >= i) ==> (0 <= i);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= j <= 10;\nloop invariant i >= 1;\nloop invariant (j - i) % 2 == 0;\nloop invariant (i - j) % 2 == 0;\nloop invariant i <= j + 1;\nloop invariant j >= i - 1;\nloop invariant (j - i) <= 9;\nloop invariant (i - j) <= 1;\nloop invariant (i - j) >= -9;\nloop invariant (j - i) >= -1;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= j <= 10;\nloop invariant 1 <= i <= 10;\nloop invariant j == 10 - i;\nloop invariant j >= i;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= j <= 10;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\n*/\n```",
                "```\n/*@\nloop invariant i >= 1;\nloop invariant j >= 6;\nloop invariant j <= 10;\nloop invariant i <= 11;\nloop invariant i + j <= 21;\n*/\n```",
                "```\n/*@\nloop invariant i > 0; loop invariant j > i; loop invariant j <= 10; loop invariant i <= 7; loop invariant i <= j; loop invariant j == 6;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= j < i <= 10;\nloop invariant i % 2 == 1;\nloop invariant j == 10 - i;\nloop invariant i <= 9;\nloop invariant j >= 1;\nloop invariant i >= 1;\nloop invariant i % 2 == 1 ==> i == 1 || i == 3 || i == 5 || i == 7 || i == 9;\nloop invariant j == 10 - i ==> j == 9 || j == 8 || j == 7 || j == 6 || j == 5 || j == 4 || j == 3 || j == 2 || j == 1 || j == 0;\n*/\n```",
                "```\n/*@\nloop invariant 1 <= j <= 10;\nloop invariant 1 <= i <= 11;\nloop invariant i <= j;\nloop invariant i <= 2 * i - 2;\nloop invariant j >= 11 - 2 * i;\nloop invariant j <= 10 - 2 * i;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= j;\nloop invariant j >= 10;\nloop invariant i <= 10;\nloop invariant j >= i;\nloop invariant j - i + 1 == 10;\nloop invariant j - i == 9;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i >= 1;\nloop invariant j <= 10;\nloop invariant i <= j;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i >= 1;\nloop invariant j <= 10;\nloop invariant i <= j;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i >= 1;\nloop invariant j <= 10;\nloop invariant i <= j;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i >= 1;\nloop invariant j <= 10;\nloop invariant i <= j;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i >= 1;\nloop invariant j <= 10;\nloop invariant i <= j;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i >= 1;\nloop invariant j <= 10;\nloop invariant i <= j;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i >= 1;\nloop invariant j <= 10;\nloop invariant i <= j;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i >= 1;\nloop invariant j <= 10;\nloop invariant i <= j;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i >= 1;\nloop invariant j <= 10;\nloop invariant i <= j;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i >= 1;\nloop invariant j <= 10;\nloop invariant i <= j;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i >= 1;\nloop invariant j <= 10;\nloop invariant i <= j;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i >= 1;\nloop invariant j <= 10;\nloop invariant i <= j;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i >= 1;\nloop invariant j <= 10;\nloop invariant i <= j;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i >= 1;\nloop invariant j <= 10;\nloop invariant i <= j;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i >= 1;\nloop invariant j <= 10;\nloop invariant i <= j;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i >= 1;\nloop invariant j <= 10;\nloop invariant i <= j;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i >= 1;\nloop invariant j <= 10;\nloop invariant i <= j;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i >= 1;\nloop invariant j <= 10;\nloop invariant i <= j;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i >= 1;\nloop invariant j <= 10;\nloop invariant i <= j;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i >= 1;\nloop invariant j <= 10;\nloop invariant i <= j;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i >= 1;\nloop invariant j <= 10;\nloop invariant i <= j;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i >= 1;\nloop invariant j <= 10;\nloop invariant i <= j;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i >= 1;\nloop invariant j <= 10;\nloop invariant i <= j;\n*/\n```",
                "```\n/*@\nloop invariant i >= j;\nloop invariant i >= 10;\nloop invariant j >= 1;\nloop invariant i >= 2 * j;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= j <= 10;\nloop invariant i >= 1;\nloop invariant i <= 11;\nloop invariant j >= i;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i + j == 11;\nloop invariant 0 <= j <= 10;\nloop invariant i >= 1;\nloop invariant i <= 11;\nloop invariant j >= i;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i + j == 11;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= j <= 10;\nloop invariant 1 <= i <= 10;\nloop invariant i >= j;\nloop invariant j == 6 ==> i == 12;\nloop invariant j != 6 ==> i == 10;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= j <= 10;\nloop invariant i >= 1;\nloop invariant i <= j + 1;\nloop invariant (i % 2) == 1;\nloop invariant (i + j) % 2 == 0;\nloop invariant i <= 11;\nloop invariant j >= 1;\nloop invariant j <= 9;\nloop invariant (j - i + 1) % 2 == 0;\nloop invariant i <= 11;\nloop invariant j >= 1;\nloop invariant j <= 9;\nloop invariant (j - i + 1) % 2 == 0;\nloop invariant i <= 11;\nloop invariant j >= 1;\nloop invariant j <= 9;\nloop invariant (j - i + 1) % 2 == 0;\nloop invariant i <= 11;\nloop invariant j >= 1;\nloop invariant j <= 9;\nloop invariant (j - i + 1) % 2 == 0;\nloop invariant i <= 11;\nloop invariant j >= 1;\nloop invariant j <= 9;\nloop invariant (j - i + 1) % 2 == 0;\nloop invariant i <= 11;\nloop invariant j >= 1;\nloop invariant j <= 9;\nloop invariant (j - i + 1) % 2 == 0;\nloop invariant i <= 11;\nloop invariant j >= 1;\nloop invariant j <= 9;\nloop invariant (j - i + 1) % 2 == 0;\nloop invariant i <= 11;\nloop invariant j >= 1;\nloop invariant j <= 9;\nloop invariant (j - i + 1) % 2 == 0;\nloop invariant i <= 11;\nloop invariant j >= 1;\nloop invariant j <= 9;\nloop invariant (j - i + 1) % 2 == 0;\nloop invariant i <= 11;\nloop invariant j >= 1;\nloop invariant j <= 9;\nloop invariant (j - i + 1) % 2 == 0;\nloop invariant i <= 11;\nloop invariant j >= 1;\nloop invariant j <= 9;\nloop invariant (j - i + 1) % 2 == 0;\nloop invariant i <= 11;\nloop invariant j >= 1;\nloop invariant j <= 9;\nloop invariant (j - i + 1) % 2 == 0;\nloop invariant i <= 11;\nloop invariant j >= 1;\nloop invariant j <= 9;\nloop invariant (j - i + 1) % 2 == 0;\nloop invariant i <= 11;\nloop invariant j >= 1;\nloop invariant j <= 9;\nloop invariant (j - i + 1) % 2 == 0;\nloop invariant i <= 11;\nloop invariant j >= 1;\nloop invariant j <= 9;\nloop invariant (j - i + 1) % 2 == 0;\nloop invariant i <= 11;\nloop invariant j >= 1;\nloop invariant j <= 9;\nloop invariant (j - i + 1) % 2 == 0;\nloop invariant i <= 11;\nloop invariant j >= 1;\nloop invariant j <= 9;\nloop invariant (j - i + 1) % 2 == 0;\nloop invariant i <= 11;\nloop invariant j >= 1;\nloop invariant j <= 9;\nloop invariant (j - i + 1) % 2 == 0;\nloop invariant i <= 11;\nloop invariant j >= 1;\nloop invariant j <= 9;\nloop invariant (j - i + 1) % 2 == 0;\nloop invariant i <= 11;\nloop invariant j >= 1;\nloop invariant j <= 9;\nloop invariant (j - i + 1) % 2 == 0;\nloop invariant i <= 11;\nloop invariant j >= 1;\nloop invariant j <= 9;\nloop invariant (j - i + 1) % 2 == 0;\nloop invariant i <= 11;\nloop invariant j >= 1;\nloop invariant j <= 9;\nloop invariant (j - i + 1) % 2 == 0;\nloop invariant i <= 11;\nloop invariant j >= 1;\nloop invariant j <= 9;\nloop invariant (j - i + 1) % 2 == 0;\nloop invariant i <= 11;\nloop invariant j >= 1;\nloop invariant j <= 9;\nloop invariant (j - i + 1) % 2 == 0;\nloop invariant i <= 11;\n*/\n```"
            ],
            "completions": [
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 1 <= i <= j;\nloop invariant i <= j + 1;\nloop invariant j >= 10;\nloop invariant j >= i - 2;\nloop invariant i <= 10;\nloop invariant j <= 10 - (i - 1) * (i - 2) / 2;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= i <= j is partially proven to be inductive.\nloop invariant i <= j + 1 is partially proven to be inductive.\nloop invariant j >= 10 is established but not preserved.\nloop invariant j >= i - 2 is partially proven to be inductive.\nloop invariant i <= 10 is partially proven to be inductive.\nloop invariant j <= 10 - (i - 1) * (i - 2) / 2 is partially proven to be inductive.\nAssertion j == 6: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  \n  (i = 1);\n  (j = 10);\n  \n  /*@\n\n\n\n\n\n\n*/\nwhile ((j >= i)) {\n    {\n    (i  = (i + 2));\n    (j  = (j - 1));\n    }\n\n  }\n  \n{;\n//@ assert( (j == 6) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 1 <= j <= i <= 11;\nloop invariant i + j <= 12;\nloop invariant (j == 6) ==> (i == 6);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= j <= i <= 11 is preserved but not established.\nloop invariant i + j <= 12 is partially proven to be inductive.\nloop invariant (j == 6) ==> (i == 6) is partially proven to be inductive.\nAssertion j == 6: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  \n  (i = 1);\n  (j = 10);\n  \n  /*@\n\n\n\n*/\nwhile ((j >= i)) {\n    {\n    (i  = (i + 2));\n    (j  = (j - 1));\n    }\n\n  }\n  \n{;\n//@ assert( (j == 6) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= j <= 10;\nloop invariant 1 <= i <= 11;\nloop invariant i <= j;\nloop invariant i % 2 == 1;\nloop invariant j == 10 - (i - 1) / 2;\nloop invariant (j >= i) ==> (i % 2 == 1);\nloop invariant (j >= i) ==> (i <= j);\nloop invariant (j >= i) ==> (i <= 11);\nloop invariant (j >= i) ==> (j <= 10);\nloop invariant (j >= i) ==> (0 <= j);\nloop invariant (j >= i) ==> (0 <= i);\nloop invariant (j >= i) ==> (i % 2 == 1);\nloop invariant (j >= i) ==> (j == 10 - (i - 1) / 2);\nloop invariant (j >= i) ==> (i <= 11);\nloop invariant (j >= i) ==> (j <= 10);\nloop invariant (j >= i) ==> (0 <= j);\nloop invariant (j >= i) ==> (0 <= i);\nloop invariant (j >= i) ==> (i % 2 == 1);\nloop invariant (j >= i) ==> (j == 10 - (i - 1) / 2);\nloop invariant (j >= i) ==> (i <= 11);\nloop invariant (j >= i) ==> (j <= 10);\nloop invariant (j >= i) ==> (0 <= j);\nloop invariant (j >= i) ==> (0 <= i);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= j <= 10 is partially proven to be inductive.\nloop invariant 1 <= i <= 11 is partially proven to be inductive.\nloop invariant i <= j is established but not preserved.\nloop invariant i % 2 == 1 is partially proven to be inductive.\nloop invariant j == 10 - (i - 1) / 2 is partially proven to be inductive.\nloop invariant (j >= i) ==> (i % 2 == 1) is partially proven to be inductive.\nloop invariant (j >= i) ==> (i <= j) is partially proven to be inductive.\nloop invariant (j >= i) ==> (i <= 11) is partially proven to be inductive.\nloop invariant (j >= i) ==> (j <= 10) is partially proven to be inductive.\nloop invariant (j >= i) ==> (0 <= j) is partially proven to be inductive.\nloop invariant (j >= i) ==> (0 <= i) is partially proven to be inductive.\nloop invariant (j >= i) ==> (j == 10 - (i - 1) / 2) is partially proven to be inductive.\nAssertion j == 6: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  \n  (i = 1);\n  (j = 10);\n  \n  /*@\nloop invariant i1: 0 <= j <= 10;\nloop invariant i2: 1 <= i <= 11;\n\nloop invariant i4: i % 2 == 1;\nloop invariant i5: j == 10 - (i - 1) / 2;\nloop invariant i6: (j >= i) ==> (i % 2 == 1);\nloop invariant i7: (j >= i) ==> (i <= j);\nloop invariant i8: (j >= i) ==> (i <= 11);\nloop invariant i9: (j >= i) ==> (j <= 10);\nloop invariant i10: (j >= i) ==> (0 <= j);\nloop invariant i11: (j >= i) ==> (0 <= i);\nloop invariant i12: (j >= i) ==> (j == 10 - (i - 1) / 2);\n*/\nwhile ((j >= i)) {\n    {\n    (i  = (i + 2));\n    (j  = (j - 1));\n    }\n\n  }\n  \n{;\n//@ assert( (j == 6) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 8,
                    "annotations": "```\n/*@\nloop invariant 0 <= j <= 10;\nloop invariant i >= 1;\nloop invariant (j - i) % 2 == 0;\nloop invariant (i - j) % 2 == 0;\nloop invariant i <= j + 1;\nloop invariant j >= i - 1;\nloop invariant (j - i) <= 9;\nloop invariant (i - j) <= 1;\nloop invariant (i - j) >= -9;\nloop invariant (j - i) >= -1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= j <= 10 is partially proven to be inductive.\nloop invariant i >= 1 is partially proven to be inductive.\nloop invariant (j - i) % 2 == 0 is preserved but not established.\nloop invariant (i - j) % 2 == 0 is partially proven to be inductive.\nloop invariant i <= j + 1 is partially proven to be inductive.\nloop invariant j >= i - 1 is partially proven to be inductive.\nloop invariant (j - i) <= 9 is partially proven to be inductive.\nloop invariant (i - j) <= 1 is partially proven to be inductive.\nloop invariant (i - j) >= -9 is partially proven to be inductive.\nloop invariant (j - i) >= -1 is partially proven to be inductive.\nAssertion j == 6: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  \n  (i = 1);\n  (j = 10);\n  \n  /*@\nloop invariant i1: 0 <= j <= 10;\nloop invariant i2: i >= 1;\n\n\n\n\nloop invariant i7: (j - i) <= 9;\n\nloop invariant i9: (i - j) >= -9;\n\n*/\nwhile ((j >= i)) {\n    {\n    (i  = (i + 2));\n    (j  = (j - 1));\n    }\n\n  }\n  \n{;\n//@ assert( (j == 6) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= j <= 10;\nloop invariant 1 <= i <= 10;\nloop invariant j == 10 - i;\nloop invariant j >= i;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= j <= 10 is partially proven to be inductive.\nloop invariant 1 <= i <= 10 is partially proven to be inductive.\nloop invariant j == 10 - i is preserved but not established.\nloop invariant j >= i is partially proven to be inductive.\nAssertion j == 6: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  \n  (i = 1);\n  (j = 10);\n  \n  /*@\n\n\n\n\n*/\nwhile ((j >= i)) {\n    {\n    (i  = (i + 2));\n    (j  = (j - 1));\n    }\n\n  }\n  \n{;\n//@ assert( (j == 6) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= j <= 10;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= j <= 10 is established but not preserved.\nloop invariant i % 2 == 1 is partially proven to be inductive.\nloop invariant j % 2 == 0 is established but not preserved.\nAssertion j == 6: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  \n  (i = 1);\n  (j = 10);\n  \n  /*@\n\nloop invariant i2: i % 2 == 1;\n\n*/\nwhile ((j >= i)) {\n    {\n    (i  = (i + 2));\n    (j  = (j - 1));\n    }\n\n  }\n  \n{;\n//@ assert( (j == 6) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant i >= 1;\nloop invariant j >= 6;\nloop invariant j <= 10;\nloop invariant i <= 11;\nloop invariant i + j <= 21;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant i >= 1 is partially proven to be inductive.\nloop invariant j >= 6 is established but not preserved.\nloop invariant j <= 10 is partially proven to be inductive.\nloop invariant i <= 11 is established but not preserved.\nloop invariant i + j <= 21 is partially proven to be inductive.\nAssertion j == 6: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  \n  (i = 1);\n  (j = 10);\n  \n  /*@\nloop invariant i1: i >= 1;\n\nloop invariant i3: j <= 10;\n\nloop invariant i5: i + j <= 21;\n*/\nwhile ((j >= i)) {\n    {\n    (i  = (i + 2));\n    (j  = (j - 1));\n    }\n\n  }\n  \n{;\n//@ assert( (j == 6) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant i > 0; loop invariant j > i; loop invariant j <= 10; loop invariant i <= 7; loop invariant i <= j; loop invariant j == 6;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant i > 0; loop invariant j > i; loop invariant j <= 10; loop invariant i <= 7; loop invariant i <= j; loop invariant j == 6 is partially proven to be inductive.\nAssertion j == 6: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  \n  (i = 1);\n  (j = 10);\n  \n  /*@\nloop invariant i1: i > 0; loop invariant j > i; loop invariant j <= 10; loop invariant i <= 7; loop invariant i <= j; loop invariant j == 6;\n*/\nwhile ((j >= i)) {\n    {\n    (i  = (i + 2));\n    (j  = (j - 1));\n    }\n\n  }\n  \n{;\n//@ assert( (j == 6) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 6,
                    "annotations": "```\n/*@\nloop invariant 0 <= j < i <= 10;\nloop invariant i % 2 == 1;\nloop invariant j == 10 - i;\nloop invariant i <= 9;\nloop invariant j >= 1;\nloop invariant i >= 1;\nloop invariant i % 2 == 1 ==> i == 1 || i == 3 || i == 5 || i == 7 || i == 9;\nloop invariant j == 10 - i ==> j == 9 || j == 8 || j == 7 || j == 6 || j == 5 || j == 4 || j == 3 || j == 2 || j == 1 || j == 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= j < i <= 10 is preserved but not established.\nloop invariant i % 2 == 1 is partially proven to be inductive.\nloop invariant j == 10 - i is partially proven to be inductive.\nloop invariant i <= 9 is partially proven to be inductive.\nloop invariant j >= 1 is partially proven to be inductive.\nloop invariant i >= 1 is partially proven to be inductive.\nloop invariant i % 2 == 1 ==> i == 1 || i == 3 || i == 5 || i == 7 || i == 9 is partially proven to be inductive.\nloop invariant j == 10 - i ==> j == 9 || j == 8 || j == 7 || j == 6 || j == 5 || j == 4 || j == 3 || j == 2 || j == 1 || j == 0 is partially proven to be inductive.\nAssertion j == 6: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  \n  (i = 1);\n  (j = 10);\n  \n  /*@\n\nloop invariant i2: i % 2 == 1;\n\n\n\nloop invariant i6: i >= 1;\n\nloop invariant i8: j == 10 - i ==> j == 9 || j == 8 || j == 7 || j == 6 || j == 5 || j == 4 || j == 3 || j == 2 || j == 1 || j == 0;\n*/\nwhile ((j >= i)) {\n    {\n    (i  = (i + 2));\n    (j  = (j - 1));\n    }\n\n  }\n  \n{;\n//@ assert( (j == 6) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 1 <= j <= 10;\nloop invariant 1 <= i <= 11;\nloop invariant i <= j;\nloop invariant i <= 2 * i - 2;\nloop invariant j >= 11 - 2 * i;\nloop invariant j <= 10 - 2 * i;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= j <= 10 is partially proven to be inductive.\nloop invariant 1 <= i <= 11 is partially proven to be inductive.\nloop invariant i <= j is partially proven to be inductive.\nloop invariant i <= 2 * i - 2 is preserved but not established.\nloop invariant j >= 11 - 2 * i is partially proven to be inductive.\nloop invariant j <= 10 - 2 * i is partially proven to be inductive.\nAssertion j == 6: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  \n  (i = 1);\n  (j = 10);\n  \n  /*@\nloop invariant i1: 1 <= j <= 10;\n\n\n\nloop invariant i5: j >= 11 - 2 * i;\n\n*/\nwhile ((j >= i)) {\n    {\n    (i  = (i + 2));\n    (j  = (j - 1));\n    }\n\n  }\n  \n{;\n//@ assert( (j == 6) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 8,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= j;\nloop invariant j >= 10;\nloop invariant i <= 10;\nloop invariant j >= i;\nloop invariant j - i + 1 == 10;\nloop invariant j - i == 9;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i >= 1;\nloop invariant j <= 10;\nloop invariant i <= j;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i >= 1;\nloop invariant j <= 10;\nloop invariant i <= j;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i >= 1;\nloop invariant j <= 10;\nloop invariant i <= j;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i >= 1;\nloop invariant j <= 10;\nloop invariant i <= j;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i >= 1;\nloop invariant j <= 10;\nloop invariant i <= j;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i >= 1;\nloop invariant j <= 10;\nloop invariant i <= j;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i >= 1;\nloop invariant j <= 10;\nloop invariant i <= j;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i >= 1;\nloop invariant j <= 10;\nloop invariant i <= j;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i >= 1;\nloop invariant j <= 10;\nloop invariant i <= j;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i >= 1;\nloop invariant j <= 10;\nloop invariant i <= j;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i >= 1;\nloop invariant j <= 10;\nloop invariant i <= j;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i >= 1;\nloop invariant j <= 10;\nloop invariant i <= j;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i >= 1;\nloop invariant j <= 10;\nloop invariant i <= j;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i >= 1;\nloop invariant j <= 10;\nloop invariant i <= j;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i >= 1;\nloop invariant j <= 10;\nloop invariant i <= j;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i >= 1;\nloop invariant j <= 10;\nloop invariant i <= j;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i >= 1;\nloop invariant j <= 10;\nloop invariant i <= j;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i >= 1;\nloop invariant j <= 10;\nloop invariant i <= j;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i >= 1;\nloop invariant j <= 10;\nloop invariant i <= j;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i >= 1;\nloop invariant j <= 10;\nloop invariant i <= j;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i >= 1;\nloop invariant j <= 10;\nloop invariant i <= j;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i >= 1;\nloop invariant j <= 10;\nloop invariant i <= j;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i >= 1;\nloop invariant j <= 10;\nloop invariant i <= j;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= j is partially proven to be inductive.\nloop invariant j >= 10 is established but not preserved.\nloop invariant i <= 10 is partially proven to be inductive.\nloop invariant j >= i is partially proven to be inductive.\nloop invariant j - i + 1 == 10 is partially proven to be inductive.\nloop invariant j - i == 9 is partially proven to be inductive.\nloop invariant i % 2 == 1 is partially proven to be inductive.\nloop invariant j % 2 == 0 is partially proven to be inductive.\nloop invariant i >= 1 is partially proven to be inductive.\nloop invariant j <= 10 is partially proven to be inductive.\nloop invariant i <= j is partially proven to be inductive.\nAssertion j == 6: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  \n  (i = 1);\n  (j = 10);\n  \n  /*@\n\n\n\n\n\n\nloop invariant i7: i % 2 == 1;\n\nloop invariant i9: i >= 1;\nloop invariant i10: j <= 10;\n\n*/\nwhile ((j >= i)) {\n    {\n    (i  = (i + 2));\n    (j  = (j - 1));\n    }\n\n  }\n  \n{;\n//@ assert( (j == 6) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant i >= j;\nloop invariant i >= 10;\nloop invariant j >= 1;\nloop invariant i >= 2 * j;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant i >= j is preserved but not established.\nloop invariant i >= 10 is partially proven to be inductive.\nloop invariant j >= 1 is partially proven to be inductive.\nloop invariant i >= 2 * j is partially proven to be inductive.\nAssertion j == 6: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  \n  (i = 1);\n  (j = 10);\n  \n  /*@\n\n\n\n\n*/\nwhile ((j >= i)) {\n    {\n    (i  = (i + 2));\n    (j  = (j - 1));\n    }\n\n  }\n  \n{;\n//@ assert( (j == 6) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= j <= 10;\nloop invariant i >= 1;\nloop invariant i <= 11;\nloop invariant j >= i;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i + j == 11;\nloop invariant 0 <= j <= 10;\nloop invariant i >= 1;\nloop invariant i <= 11;\nloop invariant j >= i;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i + j == 11;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= j <= 10 is partially proven to be inductive.\nloop invariant i >= 1 is partially proven to be inductive.\nloop invariant i <= 11 is partially proven to be inductive.\nloop invariant j >= i is established but not preserved.\nloop invariant i % 2 == 1 is partially proven to be inductive.\nloop invariant j % 2 == 0 is established but not preserved.\nloop invariant i + j == 11 is partially proven to be inductive.\nAssertion j == 6: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  \n  (i = 1);\n  (j = 10);\n  \n  /*@\nloop invariant i1: 0 <= j <= 10;\nloop invariant i2: i >= 1;\nloop invariant i3: i <= 11;\n\nloop invariant i5: i % 2 == 1;\n\n\n*/\nwhile ((j >= i)) {\n    {\n    (i  = (i + 2));\n    (j  = (j - 1));\n    }\n\n  }\n  \n{;\n//@ assert( (j == 6) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= j <= 10;\nloop invariant 1 <= i <= 10;\nloop invariant i >= j;\nloop invariant j == 6 ==> i == 12;\nloop invariant j != 6 ==> i == 10;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= j <= 10 is partially proven to be inductive.\nloop invariant 1 <= i <= 10 is partially proven to be inductive.\nloop invariant i >= j is preserved but not established.\nloop invariant j == 6 ==> i == 12 is partially proven to be inductive.\nloop invariant j != 6 ==> i == 10 is partially proven to be inductive.\nAssertion j == 6: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  \n  (i = 1);\n  (j = 10);\n  \n  /*@\n\n\n\n\n\n*/\nwhile ((j >= i)) {\n    {\n    (i  = (i + 2));\n    (j  = (j - 1));\n    }\n\n  }\n  \n{;\n//@ assert( (j == 6) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 6,
                    "annotations": "```\n/*@\nloop invariant 0 <= j <= 10;\nloop invariant i >= 1;\nloop invariant i <= j + 1;\nloop invariant (i % 2) == 1;\nloop invariant (i + j) % 2 == 0;\nloop invariant i <= 11;\nloop invariant j >= 1;\nloop invariant j <= 9;\nloop invariant (j - i + 1) % 2 == 0;\nloop invariant i <= 11;\nloop invariant j >= 1;\nloop invariant j <= 9;\nloop invariant (j - i + 1) % 2 == 0;\nloop invariant i <= 11;\nloop invariant j >= 1;\nloop invariant j <= 9;\nloop invariant (j - i + 1) % 2 == 0;\nloop invariant i <= 11;\nloop invariant j >= 1;\nloop invariant j <= 9;\nloop invariant (j - i + 1) % 2 == 0;\nloop invariant i <= 11;\nloop invariant j >= 1;\nloop invariant j <= 9;\nloop invariant (j - i + 1) % 2 == 0;\nloop invariant i <= 11;\nloop invariant j >= 1;\nloop invariant j <= 9;\nloop invariant (j - i + 1) % 2 == 0;\nloop invariant i <= 11;\nloop invariant j >= 1;\nloop invariant j <= 9;\nloop invariant (j - i + 1) % 2 == 0;\nloop invariant i <= 11;\nloop invariant j >= 1;\nloop invariant j <= 9;\nloop invariant (j - i + 1) % 2 == 0;\nloop invariant i <= 11;\nloop invariant j >= 1;\nloop invariant j <= 9;\nloop invariant (j - i + 1) % 2 == 0;\nloop invariant i <= 11;\nloop invariant j >= 1;\nloop invariant j <= 9;\nloop invariant (j - i + 1) % 2 == 0;\nloop invariant i <= 11;\nloop invariant j >= 1;\nloop invariant j <= 9;\nloop invariant (j - i + 1) % 2 == 0;\nloop invariant i <= 11;\nloop invariant j >= 1;\nloop invariant j <= 9;\nloop invariant (j - i + 1) % 2 == 0;\nloop invariant i <= 11;\nloop invariant j >= 1;\nloop invariant j <= 9;\nloop invariant (j - i + 1) % 2 == 0;\nloop invariant i <= 11;\nloop invariant j >= 1;\nloop invariant j <= 9;\nloop invariant (j - i + 1) % 2 == 0;\nloop invariant i <= 11;\nloop invariant j >= 1;\nloop invariant j <= 9;\nloop invariant (j - i + 1) % 2 == 0;\nloop invariant i <= 11;\nloop invariant j >= 1;\nloop invariant j <= 9;\nloop invariant (j - i + 1) % 2 == 0;\nloop invariant i <= 11;\nloop invariant j >= 1;\nloop invariant j <= 9;\nloop invariant (j - i + 1) % 2 == 0;\nloop invariant i <= 11;\nloop invariant j >= 1;\nloop invariant j <= 9;\nloop invariant (j - i + 1) % 2 == 0;\nloop invariant i <= 11;\nloop invariant j >= 1;\nloop invariant j <= 9;\nloop invariant (j - i + 1) % 2 == 0;\nloop invariant i <= 11;\nloop invariant j >= 1;\nloop invariant j <= 9;\nloop invariant (j - i + 1) % 2 == 0;\nloop invariant i <= 11;\nloop invariant j >= 1;\nloop invariant j <= 9;\nloop invariant (j - i + 1) % 2 == 0;\nloop invariant i <= 11;\nloop invariant j >= 1;\nloop invariant j <= 9;\nloop invariant (j - i + 1) % 2 == 0;\nloop invariant i <= 11;\nloop invariant j >= 1;\nloop invariant j <= 9;\nloop invariant (j - i + 1) % 2 == 0;\nloop invariant i <= 11;\nloop invariant j >= 1;\nloop invariant j <= 9;\nloop invariant (j - i + 1) % 2 == 0;\nloop invariant i <= 11;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= j <= 10 is partially proven to be inductive.\nloop invariant i >= 1 is partially proven to be inductive.\nloop invariant i <= j + 1 is partially proven to be inductive.\nloop invariant (i % 2) == 1 is partially proven to be inductive.\nloop invariant (i + j) % 2 == 0 is preserved but not established.\nloop invariant i <= 11 is partially proven to be inductive.\nloop invariant j >= 1 is partially proven to be inductive.\nloop invariant j <= 9 is partially proven to be inductive.\nloop invariant (j - i + 1) % 2 == 0 is partially proven to be inductive.\nAssertion j == 6: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  \n  (i = 1);\n  (j = 10);\n  \n  /*@\nloop invariant i1: 0 <= j <= 10;\nloop invariant i2: i >= 1;\n\nloop invariant i4: (i % 2) == 1;\n\nloop invariant i6: i <= 11;\n\n\n\n*/\nwhile ((j >= i)) {\n    {\n    (i  = (i + 2));\n    (j  = (j - 1));\n    }\n\n  }\n  \n{;\n//@ assert( (j == 6) );\n}\n\n}",
                    "checker_output_after_prune": false
                }
            ],
            "checker_output_for_combined_annotations": false,
            "checker_message_for_combined_annotations": "loop invariant 1 <= i <= j is partially proven to be inductive.\nloop invariant i <= j + 1 is partially proven to be inductive.\nloop invariant j >= 10 is partially proven to be inductive.\nloop invariant j >= i - 2 is partially proven to be inductive.\nloop invariant i <= 10 is partially proven to be inductive.\nloop invariant j <= 10 - (i - 1) * (i - 2) / 2 is partially proven to be inductive.\nloop invariant 1 <= j <= i <= 11 is preserved but not established.\nloop invariant i + j <= 12 is partially proven to be inductive.\nloop invariant (j == 6) ==> (i == 6) is partially proven to be inductive.\nloop invariant 0 <= j <= 10 is partially proven to be inductive.\nloop invariant 1 <= i <= 11 is partially proven to be inductive.\nloop invariant i <= j is partially proven to be inductive.\nloop invariant i % 2 == 1 is partially proven to be inductive.\nloop invariant j == 10 - (i - 1) / 2 is partially proven to be inductive.\nloop invariant (j >= i) ==> (i % 2 == 1) is partially proven to be inductive.\nloop invariant (j >= i) ==> (i <= j) is partially proven to be inductive.\nloop invariant (j >= i) ==> (i <= 11) is partially proven to be inductive.\nloop invariant (j >= i) ==> (j <= 10) is partially proven to be inductive.\nloop invariant (j >= i) ==> (0 <= j) is partially proven to be inductive.\nloop invariant (j >= i) ==> (0 <= i) is partially proven to be inductive.\nloop invariant (j >= i) ==> (j == 10 - (i - 1) / 2) is partially proven to be inductive.\nloop invariant i >= 1 is partially proven to be inductive.\nloop invariant (j - i) % 2 == 0 is partially proven to be inductive.\nloop invariant (i - j) % 2 == 0 is partially proven to be inductive.\nloop invariant j >= i - 1 is partially proven to be inductive.\nloop invariant (j - i) <= 9 is partially proven to be inductive.\nloop invariant (i - j) <= 1 is partially proven to be inductive.\nloop invariant (i - j) >= -9 is partially proven to be inductive.\nloop invariant (j - i) >= -1 is partially proven to be inductive.\nloop invariant 1 <= i <= 10 is partially proven to be inductive.\nloop invariant j == 10 - i is partially proven to be inductive.\nloop invariant j >= i is partially proven to be inductive.\nloop invariant 0 <= i <= j <= 10 is partially proven to be inductive.\nloop invariant j % 2 == 0 is partially proven to be inductive.\nloop invariant j >= 6 is partially proven to be inductive.\nloop invariant j <= 10 is partially proven to be inductive.\nloop invariant i <= 11 is partially proven to be inductive.\nloop invariant i + j <= 21 is partially proven to be inductive.\nloop invariant i > 0; loop invariant j > i; loop invariant j <= 10; loop invariant i <= 7; loop invariant i <= j; loop invariant j == 6 is partially proven to be inductive.\nloop invariant 0 <= j < i <= 10 is partially proven to be inductive.\nloop invariant i <= 9 is partially proven to be inductive.\nloop invariant j >= 1 is partially proven to be inductive.\nloop invariant i % 2 == 1 ==> i == 1 || i == 3 || i == 5 || i == 7 || i == 9 is partially proven to be inductive.\nloop invariant j == 10 - i ==> j == 9 || j == 8 || j == 7 || j == 6 || j == 5 || j == 4 || j == 3 || j == 2 || j == 1 || j == 0 is partially proven to be inductive.\nloop invariant 1 <= j <= 10 is partially proven to be inductive.\nloop invariant i <= 2 * i - 2 is partially proven to be inductive.\nloop invariant j >= 11 - 2 * i is partially proven to be inductive.\nloop invariant j <= 10 - 2 * i is partially proven to be inductive.\nloop invariant 0 <= i <= j is partially proven to be inductive.\nloop invariant j - i + 1 == 10 is partially proven to be inductive.\nloop invariant j - i == 9 is partially proven to be inductive.\nloop invariant i >= j is partially proven to be inductive.\nloop invariant i >= 10 is partially proven to be inductive.\nloop invariant i >= 2 * j is partially proven to be inductive.\nloop invariant i + j == 11 is partially proven to be inductive.\nloop invariant j == 6 ==> i == 12 is partially proven to be inductive.\nloop invariant j != 6 ==> i == 10 is partially proven to be inductive.\nloop invariant (i % 2) == 1 is partially proven to be inductive.\nloop invariant (i + j) % 2 == 0 is partially proven to be inductive.\nloop invariant j <= 9 is partially proven to be inductive.\nloop invariant (j - i + 1) % 2 == 0 is partially proven to be inductive.\nAssertion j == 6: Partially proven",
            "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  \n  (i = 1);\n  (j = 10);\n  \n  /*@\nloop invariant i1: 1 <= i <= j;\nloop invariant i2: i <= j + 1;\nloop invariant i3: j >= 10;\nloop invariant i4: j >= i - 2;\nloop invariant i5: i <= 10;\nloop invariant i6: j <= 10 - (i - 1) * (i - 2) / 2;\nloop invariant i7: 1 <= j <= i <= 11;\nloop invariant i8: i + j <= 12;\nloop invariant i9: (j == 6) ==> (i == 6);\nloop invariant i10: 0 <= j <= 10;\nloop invariant i11: 1 <= i <= 11;\nloop invariant i12: i <= j;\nloop invariant i13: i % 2 == 1;\nloop invariant i14: j == 10 - (i - 1) / 2;\nloop invariant i15: (j >= i) ==> (i % 2 == 1);\nloop invariant i16: (j >= i) ==> (i <= j);\nloop invariant i17: (j >= i) ==> (i <= 11);\nloop invariant i18: (j >= i) ==> (j <= 10);\nloop invariant i19: (j >= i) ==> (0 <= j);\nloop invariant i20: (j >= i) ==> (0 <= i);\nloop invariant i21: (j >= i) ==> (j == 10 - (i - 1) / 2);\nloop invariant i22: i >= 1;\nloop invariant i23: (j - i) % 2 == 0;\nloop invariant i24: (i - j) % 2 == 0;\nloop invariant i25: j >= i - 1;\nloop invariant i26: (j - i) <= 9;\nloop invariant i27: (i - j) <= 1;\nloop invariant i28: (i - j) >= -9;\nloop invariant i29: (j - i) >= -1;\nloop invariant i30: 1 <= i <= 10;\nloop invariant i31: j == 10 - i;\nloop invariant i32: j >= i;\nloop invariant i33: 0 <= i <= j <= 10;\nloop invariant i34: j % 2 == 0;\nloop invariant i35: j >= 6;\nloop invariant i36: j <= 10;\nloop invariant i37: i <= 11;\nloop invariant i38: i + j <= 21;\nloop invariant i39: i > 0; loop invariant j > i; loop invariant j <= 10; loop invariant i <= 7; loop invariant i <= j; loop invariant j == 6;\nloop invariant i40: 0 <= j < i <= 10;\nloop invariant i41: i <= 9;\nloop invariant i42: j >= 1;\nloop invariant i43: i % 2 == 1 ==> i == 1 || i == 3 || i == 5 || i == 7 || i == 9;\nloop invariant i44: j == 10 - i ==> j == 9 || j == 8 || j == 7 || j == 6 || j == 5 || j == 4 || j == 3 || j == 2 || j == 1 || j == 0;\nloop invariant i45: 1 <= j <= 10;\nloop invariant i46: i <= 2 * i - 2;\nloop invariant i47: j >= 11 - 2 * i;\nloop invariant i48: j <= 10 - 2 * i;\nloop invariant i49: 0 <= i <= j;\nloop invariant i50: j - i + 1 == 10;\nloop invariant i51: j - i == 9;\nloop invariant i52: i >= j;\nloop invariant i53: i >= 10;\nloop invariant i54: i >= 2 * j;\nloop invariant i55: i + j == 11;\nloop invariant i56: j == 6 ==> i == 12;\nloop invariant i57: j != 6 ==> i == 10;\nloop invariant i58: (i % 2) == 1;\nloop invariant i59: (i + j) % 2 == 0;\nloop invariant i60: j <= 9;\nloop invariant i61: (j - i + 1) % 2 == 0;\n*/\nwhile ((j >= i)) {\n    {\n    (i  = (i + 2));\n    (j  = (j - 1));\n    }\n\n  }\n  \n{;\n//@ assert( (j == 6) );\n}\n\n}",
            "combined_annotation_num_solver_calls": 6,
            "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  \n  (i = 1);\n  (j = 10);\n  \n  /*@\nloop invariant i1: 1 <= i <= j;\nloop invariant i2: i <= j + 1;\nloop invariant i3: j >= 10;\nloop invariant i4: j >= i - 2;\nloop invariant i5: i <= 10;\nloop invariant i6: j <= 10 - (i - 1) * (i - 2) / 2;\n\nloop invariant i8: i + j <= 12;\nloop invariant i9: (j == 6) ==> (i == 6);\nloop invariant i10: 0 <= j <= 10;\nloop invariant i11: 1 <= i <= 11;\nloop invariant i12: i <= j;\nloop invariant i13: i % 2 == 1;\nloop invariant i14: j == 10 - (i - 1) / 2;\nloop invariant i15: (j >= i) ==> (i % 2 == 1);\nloop invariant i16: (j >= i) ==> (i <= j);\nloop invariant i17: (j >= i) ==> (i <= 11);\nloop invariant i18: (j >= i) ==> (j <= 10);\nloop invariant i19: (j >= i) ==> (0 <= j);\nloop invariant i20: (j >= i) ==> (0 <= i);\nloop invariant i21: (j >= i) ==> (j == 10 - (i - 1) / 2);\nloop invariant i22: i >= 1;\n\n\nloop invariant i25: j >= i - 1;\nloop invariant i26: (j - i) <= 9;\nloop invariant i27: (i - j) <= 1;\nloop invariant i28: (i - j) >= -9;\nloop invariant i29: (j - i) >= -1;\nloop invariant i30: 1 <= i <= 10;\n\nloop invariant i32: j >= i;\nloop invariant i33: 0 <= i <= j <= 10;\nloop invariant i34: j % 2 == 0;\nloop invariant i35: j >= 6;\nloop invariant i36: j <= 10;\nloop invariant i37: i <= 11;\nloop invariant i38: i + j <= 21;\nloop invariant i39: i > 0; loop invariant j > i; loop invariant j <= 10; loop invariant i <= 7; loop invariant i <= j; loop invariant j == 6;\nloop invariant i40: 0 <= j < i <= 10;\nloop invariant i41: i <= 9;\nloop invariant i42: j >= 1;\nloop invariant i43: i % 2 == 1 ==> i == 1 || i == 3 || i == 5 || i == 7 || i == 9;\nloop invariant i44: j == 10 - i ==> j == 9 || j == 8 || j == 7 || j == 6 || j == 5 || j == 4 || j == 3 || j == 2 || j == 1 || j == 0;\nloop invariant i45: 1 <= j <= 10;\nloop invariant i46: i <= 2 * i - 2;\nloop invariant i47: j >= 11 - 2 * i;\nloop invariant i48: j <= 10 - 2 * i;\nloop invariant i49: 0 <= i <= j;\nloop invariant i50: j - i + 1 == 10;\nloop invariant i51: j - i == 9;\nloop invariant i52: i >= j;\nloop invariant i53: i >= 10;\nloop invariant i54: i >= 2 * j;\nloop invariant i55: i + j == 11;\nloop invariant i56: j == 6 ==> i == 12;\nloop invariant i57: j != 6 ==> i == 10;\nloop invariant i58: (i % 2) == 1;\nloop invariant i59: (i + j) % 2 == 0;\nloop invariant i60: j <= 9;\nloop invariant i61: (j - i + 1) % 2 == 0;\n*/\nwhile ((j >= i)) {\n    {\n    (i  = (i + 2));\n    (j  = (j - 1));\n    }\n\n  }\n  \n{;\n//@ assert( (j == 6) );\n}\n\n}",
            "checker_output_after_prune": false
        },
        {
            "file": "../dataset/loop_invariants/code2inv/130.c",
            "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int d1 = 1;\n    int d2 = 1;\n    int d3 = 1;\n    int x1 = 1;\n    int x2,x3;\n\n    while( x1 > 0) {\n        if(x2 > 0) {\n            if(x3 > 0) {\n                x1 = x1 - d1;\n                x2 = x2 - d2;\n                x3 = x3 - d3;\n            }\n        }\n    }\n\n    {;\n//@ assert(x2 >= 0);\n}\n\n}",
            "success": false,
            "annotation_blocks": [
                "```\n/*@\nloop invariant 0 <= x2 <= 1;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= d1 <= 100000;\nloop invariant 0 <= d2 <= 100000;\nloop invariant 0 <= d3 <= 100000;\nloop invariant 0 <= x1 <= 100000;\nloop invariant 0 <= x2 <= 100000;\nloop invariant 0 <= x3 <= 100000;\nloop invariant d1 >= 0;\nloop invariant d2 >= 0;\nloop invariant d3 >= 0;\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2;\nloop invariant x1 >= x3;\nloop invariant x2 >= x3;\nloop invariant x1 >= d1;\nloop invariant x2 >= d2;\nloop invariant x3 >= d3;\nloop invariant x1 >= d1 * x2 + d2 * x3;\nloop invariant x2 >= d2 * x3;\nloop invariant x3 >= d3 * x3;\nloop invariant x1 >= d1 * x2 + d2 * x3 + d3 * x3;\nloop invariant x2 >= d2 * x3 + d3 * x3;\nloop invariant x3 >= d3 * x3;\nloop invariant x1 >= d1 * x2 + d2 * x3 + d3 * x3 + d3 * x3;\nloop invariant x2 >= d2 * x3 + d3 * x3 + d3 * x3;\nloop invariant x3 >= d3 * x3 + d3 * x3;\nloop invariant x1 >= d1 * x2 + d2 * x3 + d3 * x3 + d3 * x3 + d3 * x3;\nloop invariant x2 >= d2 * x3 + d3 * x3 + d3 * x3 + d3 * x3;\nloop invariant x3 >= d3 * x3 + d3 * x3 + d3 * x3;\nloop invariant x1 >= d1 * x2 + d2 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3;\nloop invariant x2 >= d2 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3;\nloop invariant x3 >= d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3;\nloop invariant x1 >= d1 * x2 + d2 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3;\nloop invariant x2 >= d2 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3;\nloop invariant x3 >= d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3;\nloop invariant x1 >= d1 * x2 + d2 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3;\nloop invariant x2 >= d2 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3;\nloop invariant x3 >= d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3;\nloop invariant x1 >= d1 * x2 + d2 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3;\nloop invariant x2 >= d2 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3;\nloop invariant x3 >= d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x2 <= 1;\nloop invariant x1 >= x2 + x3;\nloop invariant x3 >= 0;\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant d1 >= 1;\nloop invariant d2 >= 1;\nloop invariant d3 >= 1;\nloop invariant x1 >= x2 + x3;\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant d1 >= 1;\nloop invariant d2 >= 1;\nloop invariant d3 >= 1;\nloop invariant x1 >= x2 + x3;\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant d1 >= 1;\nloop invariant d2 >= 1;\nloop invariant d3 >= 1;\nloop invariant x1 >= x2 + x3;\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant d1 >= 1;\nloop invariant d2 >= 1;\nloop invariant d3 >= 1;\nloop invariant x1 >= x2 + x3;\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant d1 >= 1;\nloop invariant d2 >= 1;\nloop invariant d3 >= 1;\nloop invariant x1 >= x2 + x3;\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant d1 >= 1;\nloop invariant d2 >= 1;\nloop invariant d3 >= 1;\nloop invariant x1 >= x2 + x3;\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant d1 >= 1;\nloop invariant d2 >= 1;\nloop invariant d3 >= 1;\nloop invariant x1 >= x2 + x3;\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant d1 >= 1;\nloop invariant d2 >= 1;\nloop invariant d3 >= 1;\nloop invariant x1 >= x2 + x3;\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant d1 >= 1;\nloop invariant d2 >= 1;\nloop invariant d3 >= 1;\nloop invariant x1 >= x2 + x3;\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant d1 >= 1;\nloop invariant d2 >= 1;\nloop invariant d3 >= 1;\nloop invariant x1 >= x2 + x3;\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant d1 >= 1;\nloop invariant d2 >= 1;\nloop invariant d3 >= 1;\nloop invariant x1 >= x2 + x3;\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant d1 >= 1;\nloop invariant d2 >= 1;\nloop invariant d3 >= 1;\nloop invariant x1 >= x2 + x3;\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant d1 >= 1;\nloop invariant d2 >= 1;\nloop invariant d3 >= 1;\nloop invariant x1 >= x2 + x3;\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant d1 >= 1;\nloop invariant d2 >= 1;\nloop invariant d3 >= 1;\nloop invariant x1 >= x2 + x3;\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant d1 >= 1;\nloop invariant d2 >= 1;\nloop invariant d3 >= 1;\nloop invariant x1 >= x2 + x3;\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant d1 >= 1;\nloop invariant d2 >= 1;\nloop invariant d3 >= 1;\nloop invariant x1 >= x2 + x3;\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= d1 <= 1;\nloop invariant 0 <= d2 <= 1;\nloop invariant 0 <= d3 <= 1;\nloop invariant 1 <= x1 <= 1;\nloop invariant 0 <= x2 <= 1;\nloop invariant 0 <= x3 <= 1;\nloop invariant (x2 == 0) ==> (x1 >= 0);\nloop invariant (x3 == 0) ==> (x2 >= 0);\nloop invariant (x2 >= 0) ==> (x1 >= 0);\nloop invariant (x3 >= 0) ==> (x2 >= 0);\nloop invariant (x2 == 0) ==> (x1 <= 1);\nloop invariant (x3 == 0) ==> (x2 <= 1);\nloop invariant (x2 >= 0) ==> (x1 <= 1);\nloop invariant (x3 >= 0) ==> (x2 <= 1);\nloop invariant (x2 == 0) ==> (x1 == 1);\nloop invariant (x3 == 0) ==> (x2 == 1);\nloop invariant (x2 >= 0) ==> (x1 <= 1);\nloop invariant (x3 >= 0) ==> (x2 <= 1);\nloop invariant (x2 == 0) ==> (x1 <= 1);\nloop invariant (x3 == 0) ==> (x2 <= 1);\nloop invariant (x2 >= 0) ==> (x1 <= 1);\nloop invariant (x3 >= 0) ==> (x2 <= 1);\nloop invariant (x2 == 0) ==> (x1 <= 1);\nloop invariant (x3 == 0) ==> (x2 <= 1);\nloop invariant (x2 >= 0) ==> (x1 <= 1);\nloop invariant (x3 >= 0) ==> (x2 <= 1);\nloop invariant (x2 == 0) ==> (x1 <= 1);\nloop invariant (x3 == 0) ==> (x2 <= 1);\nloop invariant (x2 >= 0) ==> (x1 <= 1);\nloop invariant (x3 >= 0) ==> (x2 <= 1);\nloop invariant (x2 == 0) ==> (x1 <= 1);\nloop invariant (x3 == 0) ==> (x2 <= 1);\nloop invariant (x2 >= 0) ==> (x1 <= 1);\nloop invariant (x3 >= 0) ==> (x2 <= 1);\nloop invariant (x2 == 0) ==> (x1 <= 1);\nloop invariant (x3 == 0) ==> (x2 <= 1);\nloop invariant (x2 >= 0) ==> (x1 <= 1);\nloop invariant (x3 >= 0) ==> (x2 <= 1);\nloop invariant (x2 == 0) ==> (x1 <= 1);\nloop invariant (x3 == 0) ==> (x2 <= 1);\nloop invariant (x2 >= 0) ==> (x1 <= 1);\nloop invariant (x3 >= 0) ==> (x2 <= 1);\nloop invariant (x2 == 0) ==> (x1 <= 1);\nloop invariant (x3 == 0) ==> (x2 <= 1);\nloop invariant (x2 >= 0) ==> (x1 <= 1);\nloop invariant (x3 >= 0) ==> (x2 <= 1);\nloop invariant (x2 == 0) ==> (x1 <= 1);\nloop invariant (x3 == 0) ==> (x2 <= 1);\nloop invariant (x2 >= 0) ==> (x1 <= 1);\nloop invariant (x3 >= 0) ==> (x2 <= 1);\nloop invariant (x2 == 0) ==> (x1 <= 1);\nloop invariant (x3 == 0) ==> (x2 <= 1);\nloop invariant (x2 >= 0) ==> (x1 <= 1);\nloop invariant (x3 >= 0) ==> (x2 <= 1);\nloop invariant (x2 == 0) ==> (x1 <= 1);\nloop invariant (x3 == 0) ==> (x2 <= 1);\nloop invariant (x2 >= 0) ==> (x1 <= 1);\nloop invariant (x3 >= 0) ==> (x2 <= 1);\nloop invariant (x2 == 0) ==> (x1 <= 1);\nloop invariant (x3 == 0) ==> (x2 <= 1);\n*/\n```",
                "```\n/*@\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant ( x1 == 1 ==> ( ( x2 == 1 && x3 == 1 ) ) );\nloop invariant ( x1 < 1 ==> !( x2 > 0 && x3 > 0 ) );\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x1 <= 1;\nloop invariant 0 <= x2 <= 1;\nloop invariant 0 <= x3 <= 1;\nloop invariant d1 >= 1;\nloop invariant d2 >= 1;\nloop invariant d3 >= 1;\nloop invariant x1 >= x2;\nloop invariant x1 >= x3;\nloop invariant x2 >= x3;\nloop invariant (x1 > 0 ==> x2 > 0 ==> x3 > 0);\nloop invariant (x1 <= 0 ==> x2 <= 0 ==> x3 <= 0);\nloop invariant (x1 > 0 ==> x2 > 0 ==> d1 <= x1);\nloop invariant (x1 > 0 ==> x2 > 0 ==> d2 <= x2);\nloop invariant (x1 > 0 ==> x3 > 0 ==> d3 <= x3);\nloop invariant (x1 <= 0 ==> x2 <= 0 ==> x3 <= 0 ==> d1 <= 1);\nloop invariant (x1 <= 0 ==> x2 <= 0 ==> x3 <= 0 ==> d2 <= 1);\nloop invariant (x1 <= 0 ==> x2 <= 0 ==> x3 <= 0 ==> d3 <= 1);\nloop invariant (x1 > 0 ==> x2 > 0 ==> x3 > 0 ==> d1 > 0);\nloop invariant (x1 > 0 ==> x2 > 0 ==> x3 > 0 ==> d2 > 0);\nloop invariant (x1 > 0 ==> x3 > 0 ==> d3 > 0);\nloop invariant (x1 <= 0 ==> x2 <= 0 ==> x3 <= 0 ==> d1 > 0);\nloop invariant (x1 <= 0 ==> x2 <= 0 ==> x3 <= 0 ==> d2 > 0);\nloop invariant (x1 <= 0 ==> x3 <= 0 ==> d3 > 0);\nloop invariant (x1 > 0 ==> x2 > 0 ==> x3 > 0 ==> d1 < x1);\nloop invariant (x1 > 0 ==> x2 > 0 ==> x3 > 0 ==> d2 < x2);\nloop invariant (x1 > 0 ==> x3 > 0 ==> d3 < x3);\nloop invariant (x1 <= 0 ==> x2 <= 0 ==> x3 <= 0 ==> d1 < 1);\nloop invariant (x1 <= 0 ==> x2 <= 0 ==> x3 <= 0 ==> d2 < 1);\nloop invariant (x1 <= 0 ==> x3 <= 0 ==> d3 < 1);\nloop invariant (x1 > 0 ==> x2 > 0 ==> x3 > 0 ==> d1 > 0);\nloop invariant (x1 > 0 ==> x2 > 0 ==> x3 > 0 ==> d2 > 0);\nloop invariant (x1 > 0 ==> x3 > 0 ==> d3 > 0);\nloop invariant (x1 <= 0 ==> x2 <= 0 ==> x3 <= 0 ==> d1 > 0);\nloop invariant (x1 <= 0 ==> x2 <= 0 ==> x3 <= 0 ==> d2 > 0);\nloop invariant (x1 <= 0 ==> x3 <= 0 ==> d3 > 0);\nloop invariant (x1 > 0 ==> x2 > 0 ==> x3 > 0 ==> d1 < x1);\nloop invariant (x1 > 0 ==> x2 > 0 ==> x3 > 0 ==> d2 < x2);\nloop invariant (x1 > 0 ==> x3 > 0 ==> d3 < x3);\nloop invariant (x1 <= 0 ==> x2 <= 0 ==> x3 <= 0 ==> d1 < 1);\nloop invariant (x1 <= 0 ==> x2 <= 0 ==> x3 <= 0 ==> d2 < 1);\nloop invariant (x1 <= 0 ==> x3 <= 0 ==> d3 < 1);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x1;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2;\nloop invariant x1 >= x3;\nloop invariant x2 >= x3;\nloop invariant x1 <= (d1 + x2);\nloop invariant x1 <= (d1 + x3);\nloop invariant x2 <= (d2 + x3);\nloop invariant x1 >= (d1 * (x2 - 1));\nloop invariant x1 >= (d1 * (x3 - 1));\nloop invariant x2 >= (d2 * (x3 - 1));\nloop invariant x1 <= (d1 * x2);\nloop invariant x1 <= (d1 * x3);\nloop invariant x2 <= (d2 * x3);\nloop invariant x1 >= (d1 * (x2 - 1) * (x3 - 1));\nloop invariant x1 <= (d1 * x2 * x3);\nloop invariant x2 >= (d2 * (x3 - 1) * (x1 - 1));\nloop invariant x2 <= (d2 * x3 * x1);\nloop invariant x3 >= (d3 * (x2 - 1) * (x1 - 1));\nloop invariant x3 <= (d3 * x2 * x1);\nloop invariant x1 >= (d1 * x2 * x3);\nloop invariant x2 >= (d2 * x3 * x1);\nloop invariant x3 >= (d3 * x2 * x1);\nloop invariant x1 <= (d1 * (x2 + 1) * (x3 + 1));\nloop invariant x2 <= (d2 * (x3 + 1) * (x1 + 1));\nloop invariant x3 <= (d3 * (x2 + 1) * (x1 + 1));\nloop invariant x1 >= (d1 * (x2 + 1) * (x3 + 1));\nloop invariant x2 >= (d2 * (x3 + 1) * (x1 + 1));\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x2 <= -d2 ==> (x2 >= 0);\nloop invariant 0 <= x2 <= -d2 ==> (x2 >= 0);\nloop invariant x3 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= d1;\nloop invariant x1 >= d1;\nloop invariant d1 > 0;\nloop invariant d1 > 0;\nloop invariant d2 > 0;\nloop invariant d2 > 0;\nloop invariant d3 > 0;\nloop invariant d3 > 0;\nloop invariant x1 >= d1 ==> (x1 >= d1);\nloop invariant x1 >= d1 ==> (x1 >= d1);\nloop invariant x2 >= d2 ==> (x2 >= d2);\nloop invariant x2 >= d2 ==> (x2 >= d2);\nloop invariant x3 >= d3 ==> (x3 >= d3);\nloop invariant x3 >= d3 ==> (x3 >= d3);\nloop invariant d1 > 0 ==> (d1 > 0);\nloop invariant d1 > 0 ==> (d1 > 0);\nloop invariant d2 > 0 ==> (d2 > 0);\nloop invariant d2 > 0 ==> (d2 > 0);\nloop invariant d3 > 0 ==> (d3 > 0);\nloop invariant d3 > 0 ==> (d3 > 0);\nloop invariant x1 >= d1 ==> (x1 >= d1);\nloop invariant x1 >= d1 ==> (x1 >= d1);\nloop invariant x2 >= d2 ==> (x2 >= d2);\nloop invariant x2 >= d2 ==> (x2 >= d2);\nloop invariant x3 >= d3 ==> (x3 >= d3);\nloop invariant x3 >= d3 ==> (x3 >= d3);\nloop invariant d1 > 0 ==> (d1 > 0);\nloop invariant d1 > 0 ==> (d1 > 0);\nloop invariant d2 > 0 ==> (d2 > 0);\nloop invariant d2 > 0 ==> (d2 > 0);\nloop invariant d3 > 0 ==> (d3 > 0);\nloop invariant d3 > 0 ==> (d3 > 0);\nloop invariant x1 >= d1 ==> (x1 >= d1);\nloop invariant x1 >= d1 ==> (x1 >= d1);\nloop invariant x2 >= d2 ==> (x2 >= d2);\nloop invariant x2 >= d2 ==> (x2 >= d2);\nloop invariant x3 >= d3 ==> (x3 >= d3);\nloop invariant x3 >= d3 ==> (x3 >= d3);\nloop invariant d1 > 0 ==> (d1 > 0);\nloop invariant d1 > 0 ==> (d1 > 0);\nloop invariant d2 > 0 ==> (d2 > 0);\nloop invariant d2 > 0 ==> (d2 > 0);\nloop invariant d3 > 0 ==> (d3 > 0);\nloop invariant d3 > 0 ==> (d3 > 0);\nloop invariant x1 >= d1 ==> (x1 >= d1);\nloop invariant x1 >= d1 ==> (x1 >= d1);\nloop invariant x2 >= d2 ==> (x2 >= d2);\nloop invariant x2 >= d2 ==> (x2 >= d2);\nloop invariant x3 >= d3 ==> (x3 >= d3);\nloop invariant x3 >= d3 ==> (x3 >= d3);\nloop invariant d1 > 0 ==> (d1 > 0);\nloop invariant d1 > 0 ==> (d1 > 0);\nloop invariant d2 > 0 ==> (d2 > 0);\nloop invariant d2 > 0 ==> (d2 > 0);\nloop invariant d3 > 0 ==> (d3 > 0);\nloop invariant d3 > 0 ==> (d3 > 0);\nloop invariant x1 >= d1 ==> (x1 >= d1);\nloop invariant x1 >= d1 ==> (x1 >= d1);\nloop invariant x2 >= d2 ==> (x2 >= d2);\nloop invariant x2 >= d2 ==> (x2 >= d2);\nloop invariant x3 >= d3 ==> (x3 >= d3);\nloop invariant x3 >= d3 ==> (x3 >= d3);\nloop invariant d1 > 0 ==> (d1 > 0);\nloop invariant d1 > 0 ==> (d1 > 0);\nloop invariant d2 > 0 ==> (d2 > 0);\nloop invariant d2 > 0 ==> (d2 > 0);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= d1 <= 1;\nloop invariant 0 <= d2 <= 1;\nloop invariant 0 <= d3 <= 1;\nloop invariant 0 <= x1;\nloop invariant x2 >= d2*(x1/d1);\nloop invariant x3 >= d3*(x1/d1);\nloop invariant x2 >= d2;\nloop invariant x3 >= d3;\nloop invariant x1 >= 1;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant d1 >= 0;\nloop invariant d2 >= 0;\nloop invariant d3 >= 0;\nloop invariant x1 <= (x2 + x3);\nloop invariant x1 <= (x2 + d2);\nloop invariant x1 <= (x3 + d3);\nloop invariant x1 <= (x2 + d2 + x3 + d3);\nloop invariant x1 <= (x2 + x3 + d2 + d3);\nloop invariant x1 <= (x2 + x3 + d2 + d3 + d1);\nloop invariant x1 <= (x2 + x3 + d2 + d3 + d1 + d1);\nloop invariant x1 <= (x2 + x3 + d2 + d3 + d1 + d1 + d1);\nloop invariant x1 <= (x2 + x3 + d2 + d3 + d1 + d1 + d1 + d1);\nloop invariant x1 <= (x2 + x3 + d2 + d3 + d1 + d1 + d1 + d1 + d1);\nloop invariant x1 <= (x2 + x3 + d2 + d3 + d1 + d1 + d1 + d1 + d1 + d1);\nloop invariant x1 <= (x2 + x3 + d2 + d3 + d1 + d1 + d1 + d1 + d1 + d1 + d1);\nloop invariant x1 <= (x2 + x3 + d2 + d3 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1);\nloop invariant x1 <= (x2 + x3 + d2 + d3 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1);\nloop invariant x1 <= (x2 + x3 + d2 + d3 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1);\nloop invariant x1 <= (x2 + x3 + d2 + d3 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1);\nloop invariant x1 <= (x2 + x3 + d2 + d3 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1);\nloop invariant x1 <= (x2 + x3 + d2 + d3 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1);\nloop invariant x1 <= (x2 + x3 + d2 + d3 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1);\nloop invariant x1 <= (x2 + x3 + d2 + d3 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1);\nloop invariant x1 <= (x2 + x3 + d2 + d3 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1);\nloop invariant x1 <= (x2 + x3 + d2 + d3 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x1 <= 1;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant 0 <= x1 <= 1;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant 0 <= x1 <= 1;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant 0 <= x1 <= 1;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant 0 <= x1 <= 1;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant 0 <= x1 <= 1;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant 0 <= x1 <= 1;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant 0 <= x1 <= 1;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant 0 <= x1 <= 1;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant 0 <= x1 <= 1;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant 0 <= x1 <= 1;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant 0 <= x1 <= 1;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant 0 <= x1 <= 1;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant 0 <= x1 <= 1;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant 0 <= x1 <= 1;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant 0 <= x1 <= 1;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant 0 <= x1 <= 1;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x1 <= 100000;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 <= 100000;\nloop invariant x3 <= 100000;\nloop invariant x2 + x3 <= d1 * 100000;\nloop invariant x2 + x3 >= d1 * 100000;\nloop invariant x1 - d1 * 100000 <= 0;\nloop invariant x1 - d1 * 100000 >= 0;\nloop invariant x1 - d1 * 100000 <= 1;\nloop invariant x1 - d1 * 100000 >= 1;\nloop invariant x1 - d1 * 100000 <= 0;\nloop invariant x1 - d1 * 100000 >= 0;\nloop invariant x1 - d1 * 100000 <= 1;\nloop invariant x1 - d1 * 100000 >= 1;\nloop invariant x1 - d1 * 100000 <= 0;\nloop invariant x1 - d1 * 100000 >= 0;\nloop invariant x1 - d1 * 100000 <= 1;\nloop invariant x1 - d1 * 100000 >= 1;\nloop invariant x1 - d1 * 100000 <= 0;\nloop invariant x1 - d1 * 100000 >= 0;\nloop invariant x1 - d1 * 100000 <= 1;\nloop invariant x1 - d1 * 100000 >= 1;\nloop invariant x1 - d1 * 100000 <= 0;\nloop invariant x1 - d1 * 100000 >= 0;\nloop invariant x1 - d1 * 100000 <= 1;\nloop invariant x1 - d1 * 100000 >= 1;\nloop invariant x1 - d1 * 100000 <= 0;\nloop invariant x1 - d1 * 100000 >= 0;\nloop invariant x1 - d1 * 100000 <= 1;\nloop invariant x1 - d1 * 100000 >= 1;\nloop invariant x1 - d1 * 100000 <= 0;\nloop invariant x1 - d1 * 100000 >= 0;\nloop invariant x1 - d1 * 100000 <= 1;\nloop invariant x1 - d1 * 100000 >= 1;\nloop invariant x1 - d1 * 100000 <= 0;\nloop invariant x1 - d1 * 100000 >= 0;\nloop invariant x1 - d1 * 100000 <= 1;\nloop invariant x1 - d1 * 100000 >= 1;\nloop invariant x1 - d1 * 100000 <= 0;\nloop invariant x1 - d1 * 100000 >= 0;\nloop invariant x1 - d1 * 100000 <= 1;\nloop invariant x1 - d1 * 100000 >= 1;\nloop invariant x1 - d1 * 100000 <= 0;\nloop invariant x1 - d1 * 100000 >= 0;\nloop invariant x1 - d1 * 100000 <= 1;\nloop invariant x1 - d1 * 100000 >= 1;\nloop invariant x1 - d1 * 100000 <= 0;\nloop invariant x1 - d1 * 100000 >= 0;\nloop invariant x1 - d1 * 100000 <= 1;\nloop invariant x1 - d1 * 100000 >= 1;\nloop invariant x1 - d1 * 100000 <= 0;\nloop invariant x1 - d1 * 100000 >= 0;\nloop invariant x1 - d1 * 100000 <= 1;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x2 <= x1;\nloop invariant x2 <= x3;\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2;\nloop invariant d1 >= 0;\nloop invariant d2 >= 0;\nloop invariant d3 >= 0;\nloop invariant x2 >= x2 - d2;\nloop invariant x3 >= x3 - d3;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x2 <= 1;\nloop invariant x1 >= 0;\nloop invariant x2 <= d2 * x1;\nloop invariant x3 <= d3 * x1;\nloop invariant x1 = x1 - d1 * (x2/d2) * (x3/d3);\nloop invariant x2 = x2 - d2 * (x2/d2) * (x3/d3);\nloop invariant x3 = x3 - d3 * (x2/d2) * (x3/d3);\nloop invariant x1 - x2 - x3 >= 0;\nloop invariant x1 - x2 - x3 <= 0;\nloop invariant x1 - x2 - x3 == 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2 + x3;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2 + x3;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2 + x3;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2 + x3;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2 + x3;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2 + x3;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2 + x3;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2 + x3;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2 + x3;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2 + x3;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2 + x3;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2 + x3;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2 + x3;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2 + x3;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2 + x3;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2 + x3;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2 + x3;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2 + x3;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2 + x3;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2 + x3;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2 + x3;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2 + x3;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2 + x3;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2 + x3;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2 + x3;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2 + x3;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2 + x3;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2 + x3;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2 + x3;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2 + x3;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2 + x3;\nloop invariant x2 >= 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x1 <= 1;\nloop invariant 0 <= x2 <= 1;\nloop invariant 0 <= x3 <= 1;\nloop invariant 0 <= d1 <= 1;\nloop invariant 0 <= d2 <= 1;\nloop invariant 0 <= d3 <= 1;\nloop invariant d1 >= 0;\nloop invariant d2 >= 0;\nloop invariant d3 >= 0;\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2;\nloop invariant x2 >= x3;\nloop invariant x3 >= d3;\nloop invariant x1 >= d1;\nloop invariant x2 >= d2;\nloop invariant x3 >= d3;\nloop invariant x1 >= x2 + x3;\nloop invariant x2 >= x3 + d3;\nloop invariant x3 >= d3 + d3;\nloop invariant x1 >= x2 + d2 + d3;\nloop invariant x2 >= x3 + d3 + d3;\nloop invariant x3 >= d3 + d3 + d3;\nloop invariant x1 >= x2 + d2 + d3 + d3;\nloop invariant x2 >= x3 + d3 + d3 + d3;\nloop invariant x3 >= d3 + d3 + d3 + d3;\nloop invariant x1 >= x2 + d2 + d3 + d3 + d3;\nloop invariant x2 >= x3 + d3 + d3 + d3 + d3;\nloop invariant x3 >= d3 + d3 + d3 + d3 + d3;\nloop invariant x1 >= x2 + d2 + d3 + d3 + d3 + d3;\nloop invariant x2 >= x3 + d3 + d3 + d3 + d3 + d3;\nloop invariant x3 >= d3 + d3 + d3 + d3 + d3 + d3;\nloop invariant x1 >= x2 + d2 + d3 + d3 + d3 + d3 + d3;\nloop invariant x2 >= x3 + d3 + d3 + d3 + d3 + d3 + d3;\nloop invariant x3 >= d3 + d3 + d3 + d3 + d3 + d3 + d3;\nloop invariant x1 >= x2 + d2 + d3 + d3 + d3 + d3 + d3 + d3;\nloop invariant x2 >= x3 + d3 + d3 + d3 + d3 + d3 + d3 + d3;\nloop invariant x3 >= d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3;\nloop invariant x1 >= x2 + d2 + d3 + d3 + d3 + d3 + d3 + d3 + d3;\nloop invariant x2 >= x3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3;\nloop invariant x3 >= d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3;\nloop invariant x1 >= x2 + d2 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3;\nloop invariant x2 >= x3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3;\nloop invariant x3 >= d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3;\nloop invariant x1 >= x2 + d2 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3;\nloop invariant x2 >= x3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3;\nloop invariant x3 >= d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3;\nloop invariant x1 >= x2 + d2 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3;\nloop invariant x2 >= x3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x1;\nloop invariant 0 <= x2;\nloop invariant 0 <= x3;\nloop invariant x1 >= d1;\nloop invariant x2 >= d2;\nloop invariant x3 >= d3;\nloop invariant x1 - d1 * (x2 / d2) <= x3;\nloop invariant x2 - d2 * (x3 / d3) <= x1;\nloop invariant x3 - d3 * (x1 / d1) <= x2;\n*/\n```"
            ],
            "completions": [
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= x2 <= 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x2 <= 1 is neither established nor preserved.\nAssertion x2 >= 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int d1 = 1;\n    int d2 = 1;\n    int d3 = 1;\n    int x1 = 1;\n    int x2,x3;\n\n    /*@\n\n*/\nwhile( x1 > 0) {\n        if(x2 > 0) {\n            if(x3 > 0) {\n                x1 = x1 - d1;\n                x2 = x2 - d2;\n                x3 = x3 - d3;\n            }\n        }\n    }\n\n    {;\n//@ assert(x2 >= 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 12,
                    "annotations": "```\n/*@\nloop invariant 0 <= d1 <= 100000;\nloop invariant 0 <= d2 <= 100000;\nloop invariant 0 <= d3 <= 100000;\nloop invariant 0 <= x1 <= 100000;\nloop invariant 0 <= x2 <= 100000;\nloop invariant 0 <= x3 <= 100000;\nloop invariant d1 >= 0;\nloop invariant d2 >= 0;\nloop invariant d3 >= 0;\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2;\nloop invariant x1 >= x3;\nloop invariant x2 >= x3;\nloop invariant x1 >= d1;\nloop invariant x2 >= d2;\nloop invariant x3 >= d3;\nloop invariant x1 >= d1 * x2 + d2 * x3;\nloop invariant x2 >= d2 * x3;\nloop invariant x3 >= d3 * x3;\nloop invariant x1 >= d1 * x2 + d2 * x3 + d3 * x3;\nloop invariant x2 >= d2 * x3 + d3 * x3;\nloop invariant x3 >= d3 * x3;\nloop invariant x1 >= d1 * x2 + d2 * x3 + d3 * x3 + d3 * x3;\nloop invariant x2 >= d2 * x3 + d3 * x3 + d3 * x3;\nloop invariant x3 >= d3 * x3 + d3 * x3;\nloop invariant x1 >= d1 * x2 + d2 * x3 + d3 * x3 + d3 * x3 + d3 * x3;\nloop invariant x2 >= d2 * x3 + d3 * x3 + d3 * x3 + d3 * x3;\nloop invariant x3 >= d3 * x3 + d3 * x3 + d3 * x3;\nloop invariant x1 >= d1 * x2 + d2 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3;\nloop invariant x2 >= d2 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3;\nloop invariant x3 >= d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3;\nloop invariant x1 >= d1 * x2 + d2 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3;\nloop invariant x2 >= d2 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3;\nloop invariant x3 >= d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3;\nloop invariant x1 >= d1 * x2 + d2 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3;\nloop invariant x2 >= d2 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3;\nloop invariant x3 >= d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3;\nloop invariant x1 >= d1 * x2 + d2 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3;\nloop invariant x2 >= d2 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3;\nloop invariant x3 >= d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= d1 <= 100000 is partially proven to be inductive.\nloop invariant 0 <= d2 <= 100000 is partially proven to be inductive.\nloop invariant 0 <= d3 <= 100000 is partially proven to be inductive.\nloop invariant 0 <= x1 <= 100000 is partially proven to be inductive.\nloop invariant 0 <= x2 <= 100000 is preserved but not established.\nloop invariant 0 <= x3 <= 100000 is preserved but not established.\nloop invariant d1 >= 0 is partially proven to be inductive.\nloop invariant d2 >= 0 is partially proven to be inductive.\nloop invariant d3 >= 0 is partially proven to be inductive.\nloop invariant x1 >= 0 is partially proven to be inductive.\nloop invariant x2 >= 0 is partially proven to be inductive.\nloop invariant x3 >= 0 is partially proven to be inductive.\nloop invariant x1 >= x2 is preserved but not established.\nloop invariant x1 >= x3 is preserved but not established.\nloop invariant x2 >= x3 is preserved but not established.\nloop invariant x1 >= d1 is partially proven to be inductive.\nloop invariant x2 >= d2 is preserved but not established.\nloop invariant x3 >= d3 is preserved but not established.\nloop invariant x1 >= d1 * x2 + d2 * x3 is preserved but not established.\nloop invariant x2 >= d2 * x3 is partially proven to be inductive.\nloop invariant x3 >= d3 * x3 is partially proven to be inductive.\nloop invariant x1 >= d1 * x2 + d2 * x3 + d3 * x3 is partially proven to be inductive.\nloop invariant x2 >= d2 * x3 + d3 * x3 is partially proven to be inductive.\nloop invariant x1 >= d1 * x2 + d2 * x3 + d3 * x3 + d3 * x3 is partially proven to be inductive.\nloop invariant x2 >= d2 * x3 + d3 * x3 + d3 * x3 is partially proven to be inductive.\nloop invariant x3 >= d3 * x3 + d3 * x3 is partially proven to be inductive.\nloop invariant x1 >= d1 * x2 + d2 * x3 + d3 * x3 + d3 * x3 + d3 * x3 is partially proven to be inductive.\nloop invariant x2 >= d2 * x3 + d3 * x3 + d3 * x3 + d3 * x3 is partially proven to be inductive.\nloop invariant x3 >= d3 * x3 + d3 * x3 + d3 * x3 is partially proven to be inductive.\nloop invariant x1 >= d1 * x2 + d2 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 is partially proven to be inductive.\nloop invariant x2 >= d2 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 is partially proven to be inductive.\nloop invariant x3 >= d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 is partially proven to be inductive.\nloop invariant x1 >= d1 * x2 + d2 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 is partially proven to be inductive.\nloop invariant x2 >= d2 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 is partially proven to be inductive.\nloop invariant x3 >= d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 is partially proven to be inductive.\nloop invariant x1 >= d1 * x2 + d2 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 is partially proven to be inductive.\nloop invariant x2 >= d2 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 is partially proven to be inductive.\nloop invariant x3 >= d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 is partially proven to be inductive.\nloop invariant x1 >= d1 * x2 + d2 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 is partially proven to be inductive.\nloop invariant x2 >= d2 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 is partially proven to be inductive.\nloop invariant x3 >= d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 is partially proven to be inductive.\nAssertion x2 >= 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int d1 = 1;\n    int d2 = 1;\n    int d3 = 1;\n    int x1 = 1;\n    int x2,x3;\n\n    /*@\nloop invariant i1: 0 <= d1 <= 100000;\nloop invariant i2: 0 <= d2 <= 100000;\nloop invariant i3: 0 <= d3 <= 100000;\n\n\n\nloop invariant i7: d1 >= 0;\nloop invariant i8: d2 >= 0;\nloop invariant i9: d3 >= 0;\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i21: x3 >= d3 * x3;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile( x1 > 0) {\n        if(x2 > 0) {\n            if(x3 > 0) {\n                x1 = x1 - d1;\n                x2 = x2 - d2;\n                x3 = x3 - d3;\n            }\n        }\n    }\n\n    {;\n//@ assert(x2 >= 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= x2 <= 1;\nloop invariant x1 >= x2 + x3;\nloop invariant x3 >= 0;\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant d1 >= 1;\nloop invariant d2 >= 1;\nloop invariant d3 >= 1;\nloop invariant x1 >= x2 + x3;\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant d1 >= 1;\nloop invariant d2 >= 1;\nloop invariant d3 >= 1;\nloop invariant x1 >= x2 + x3;\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant d1 >= 1;\nloop invariant d2 >= 1;\nloop invariant d3 >= 1;\nloop invariant x1 >= x2 + x3;\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant d1 >= 1;\nloop invariant d2 >= 1;\nloop invariant d3 >= 1;\nloop invariant x1 >= x2 + x3;\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant d1 >= 1;\nloop invariant d2 >= 1;\nloop invariant d3 >= 1;\nloop invariant x1 >= x2 + x3;\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant d1 >= 1;\nloop invariant d2 >= 1;\nloop invariant d3 >= 1;\nloop invariant x1 >= x2 + x3;\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant d1 >= 1;\nloop invariant d2 >= 1;\nloop invariant d3 >= 1;\nloop invariant x1 >= x2 + x3;\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant d1 >= 1;\nloop invariant d2 >= 1;\nloop invariant d3 >= 1;\nloop invariant x1 >= x2 + x3;\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant d1 >= 1;\nloop invariant d2 >= 1;\nloop invariant d3 >= 1;\nloop invariant x1 >= x2 + x3;\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant d1 >= 1;\nloop invariant d2 >= 1;\nloop invariant d3 >= 1;\nloop invariant x1 >= x2 + x3;\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant d1 >= 1;\nloop invariant d2 >= 1;\nloop invariant d3 >= 1;\nloop invariant x1 >= x2 + x3;\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant d1 >= 1;\nloop invariant d2 >= 1;\nloop invariant d3 >= 1;\nloop invariant x1 >= x2 + x3;\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant d1 >= 1;\nloop invariant d2 >= 1;\nloop invariant d3 >= 1;\nloop invariant x1 >= x2 + x3;\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant d1 >= 1;\nloop invariant d2 >= 1;\nloop invariant d3 >= 1;\nloop invariant x1 >= x2 + x3;\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant d1 >= 1;\nloop invariant d2 >= 1;\nloop invariant d3 >= 1;\nloop invariant x1 >= x2 + x3;\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant d1 >= 1;\nloop invariant d2 >= 1;\nloop invariant d3 >= 1;\nloop invariant x1 >= x2 + x3;\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x2 <= 1 is neither established nor preserved.\nloop invariant x1 >= x2 + x3 is neither established nor preserved.\nloop invariant x3 >= 0 is neither established nor preserved.\nloop invariant x1 >= 0 is partially proven to be inductive.\nloop invariant x2 >= 0 is partially proven to be inductive.\nloop invariant d1 >= 1 is partially proven to be inductive.\nloop invariant d2 >= 1 is partially proven to be inductive.\nloop invariant d3 >= 1 is partially proven to be inductive.\nAssertion x2 >= 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int d1 = 1;\n    int d2 = 1;\n    int d3 = 1;\n    int x1 = 1;\n    int x2,x3;\n\n    /*@\n\n\n\n\n\nloop invariant i6: d1 >= 1;\nloop invariant i7: d2 >= 1;\nloop invariant i8: d3 >= 1;\n*/\nwhile( x1 > 0) {\n        if(x2 > 0) {\n            if(x3 > 0) {\n                x1 = x1 - d1;\n                x2 = x2 - d2;\n                x3 = x3 - d3;\n            }\n        }\n    }\n\n    {;\n//@ assert(x2 >= 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= d1 <= 1;\nloop invariant 0 <= d2 <= 1;\nloop invariant 0 <= d3 <= 1;\nloop invariant 1 <= x1 <= 1;\nloop invariant 0 <= x2 <= 1;\nloop invariant 0 <= x3 <= 1;\nloop invariant (x2 == 0) ==> (x1 >= 0);\nloop invariant (x3 == 0) ==> (x2 >= 0);\nloop invariant (x2 >= 0) ==> (x1 >= 0);\nloop invariant (x3 >= 0) ==> (x2 >= 0);\nloop invariant (x2 == 0) ==> (x1 <= 1);\nloop invariant (x3 == 0) ==> (x2 <= 1);\nloop invariant (x2 >= 0) ==> (x1 <= 1);\nloop invariant (x3 >= 0) ==> (x2 <= 1);\nloop invariant (x2 == 0) ==> (x1 == 1);\nloop invariant (x3 == 0) ==> (x2 == 1);\nloop invariant (x2 >= 0) ==> (x1 <= 1);\nloop invariant (x3 >= 0) ==> (x2 <= 1);\nloop invariant (x2 == 0) ==> (x1 <= 1);\nloop invariant (x3 == 0) ==> (x2 <= 1);\nloop invariant (x2 >= 0) ==> (x1 <= 1);\nloop invariant (x3 >= 0) ==> (x2 <= 1);\nloop invariant (x2 == 0) ==> (x1 <= 1);\nloop invariant (x3 == 0) ==> (x2 <= 1);\nloop invariant (x2 >= 0) ==> (x1 <= 1);\nloop invariant (x3 >= 0) ==> (x2 <= 1);\nloop invariant (x2 == 0) ==> (x1 <= 1);\nloop invariant (x3 == 0) ==> (x2 <= 1);\nloop invariant (x2 >= 0) ==> (x1 <= 1);\nloop invariant (x3 >= 0) ==> (x2 <= 1);\nloop invariant (x2 == 0) ==> (x1 <= 1);\nloop invariant (x3 == 0) ==> (x2 <= 1);\nloop invariant (x2 >= 0) ==> (x1 <= 1);\nloop invariant (x3 >= 0) ==> (x2 <= 1);\nloop invariant (x2 == 0) ==> (x1 <= 1);\nloop invariant (x3 == 0) ==> (x2 <= 1);\nloop invariant (x2 >= 0) ==> (x1 <= 1);\nloop invariant (x3 >= 0) ==> (x2 <= 1);\nloop invariant (x2 == 0) ==> (x1 <= 1);\nloop invariant (x3 == 0) ==> (x2 <= 1);\nloop invariant (x2 >= 0) ==> (x1 <= 1);\nloop invariant (x3 >= 0) ==> (x2 <= 1);\nloop invariant (x2 == 0) ==> (x1 <= 1);\nloop invariant (x3 == 0) ==> (x2 <= 1);\nloop invariant (x2 >= 0) ==> (x1 <= 1);\nloop invariant (x3 >= 0) ==> (x2 <= 1);\nloop invariant (x2 == 0) ==> (x1 <= 1);\nloop invariant (x3 == 0) ==> (x2 <= 1);\nloop invariant (x2 >= 0) ==> (x1 <= 1);\nloop invariant (x3 >= 0) ==> (x2 <= 1);\nloop invariant (x2 == 0) ==> (x1 <= 1);\nloop invariant (x3 == 0) ==> (x2 <= 1);\nloop invariant (x2 >= 0) ==> (x1 <= 1);\nloop invariant (x3 >= 0) ==> (x2 <= 1);\nloop invariant (x2 == 0) ==> (x1 <= 1);\nloop invariant (x3 == 0) ==> (x2 <= 1);\nloop invariant (x2 >= 0) ==> (x1 <= 1);\nloop invariant (x3 >= 0) ==> (x2 <= 1);\nloop invariant (x2 == 0) ==> (x1 <= 1);\nloop invariant (x3 == 0) ==> (x2 <= 1);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= d1 <= 1 is partially proven to be inductive.\nloop invariant 0 <= d2 <= 1 is partially proven to be inductive.\nloop invariant 0 <= d3 <= 1 is partially proven to be inductive.\nloop invariant 1 <= x1 <= 1 is established but not preserved.\nloop invariant 0 <= x2 <= 1 is preserved but not established.\nloop invariant 0 <= x3 <= 1 is preserved but not established.\nloop invariant (x2 == 0) ==> (x1 >= 0) is partially proven to be inductive.\nloop invariant (x3 == 0) ==> (x2 >= 0) is partially proven to be inductive.\nloop invariant (x2 >= 0) ==> (x1 >= 0) is partially proven to be inductive.\nloop invariant (x3 >= 0) ==> (x2 >= 0) is partially proven to be inductive.\nloop invariant (x2 == 0) ==> (x1 <= 1) is partially proven to be inductive.\nloop invariant (x3 == 0) ==> (x2 <= 1) is partially proven to be inductive.\nloop invariant (x2 >= 0) ==> (x1 <= 1) is partially proven to be inductive.\nloop invariant (x3 >= 0) ==> (x2 <= 1) is partially proven to be inductive.\nloop invariant (x2 == 0) ==> (x1 == 1) is partially proven to be inductive.\nloop invariant (x3 == 0) ==> (x2 == 1) is neither established nor preserved.\nAssertion x2 >= 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int d1 = 1;\n    int d2 = 1;\n    int d3 = 1;\n    int x1 = 1;\n    int x2,x3;\n\n    /*@\nloop invariant i1: 0 <= d1 <= 1;\nloop invariant i2: 0 <= d2 <= 1;\nloop invariant i3: 0 <= d3 <= 1;\n\n\n\nloop invariant i7: (x2 == 0) ==> (x1 >= 0);\n\nloop invariant i9: (x2 >= 0) ==> (x1 >= 0);\n\nloop invariant i11: (x2 == 0) ==> (x1 <= 1);\n\nloop invariant i13: (x2 >= 0) ==> (x1 <= 1);\n\n\n\n*/\nwhile( x1 > 0) {\n        if(x2 > 0) {\n            if(x3 > 0) {\n                x1 = x1 - d1;\n                x2 = x2 - d2;\n                x3 = x3 - d3;\n            }\n        }\n    }\n\n    {;\n//@ assert(x2 >= 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant ( x1 == 1 ==> ( ( x2 == 1 && x3 == 1 ) ) );\nloop invariant ( x1 < 1 ==> !( x2 > 0 && x3 > 0 ) );\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant x1 >= 0 is established but not preserved.\nloop invariant x2 >= 0 is neither established nor preserved.\nloop invariant x3 >= 0 is neither established nor preserved.\nloop invariant ( x1 == 1 ==> ( ( x2 == 1 && x3 == 1 ) ) ) is neither established nor preserved.\nloop invariant ( x1 < 1 ==> !( x2 > 0 && x3 > 0 ) ) is established but not preserved.\nAssertion x2 >= 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int d1 = 1;\n    int d2 = 1;\n    int d3 = 1;\n    int x1 = 1;\n    int x2,x3;\n\n    /*@\n\n\n\n\n\n*/\nwhile( x1 > 0) {\n        if(x2 > 0) {\n            if(x3 > 0) {\n                x1 = x1 - d1;\n                x2 = x2 - d2;\n                x3 = x3 - d3;\n            }\n        }\n    }\n\n    {;\n//@ assert(x2 >= 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 6,
                    "annotations": "```\n/*@\nloop invariant 0 <= x1 <= 1;\nloop invariant 0 <= x2 <= 1;\nloop invariant 0 <= x3 <= 1;\nloop invariant d1 >= 1;\nloop invariant d2 >= 1;\nloop invariant d3 >= 1;\nloop invariant x1 >= x2;\nloop invariant x1 >= x3;\nloop invariant x2 >= x3;\nloop invariant (x1 > 0 ==> x2 > 0 ==> x3 > 0);\nloop invariant (x1 <= 0 ==> x2 <= 0 ==> x3 <= 0);\nloop invariant (x1 > 0 ==> x2 > 0 ==> d1 <= x1);\nloop invariant (x1 > 0 ==> x2 > 0 ==> d2 <= x2);\nloop invariant (x1 > 0 ==> x3 > 0 ==> d3 <= x3);\nloop invariant (x1 <= 0 ==> x2 <= 0 ==> x3 <= 0 ==> d1 <= 1);\nloop invariant (x1 <= 0 ==> x2 <= 0 ==> x3 <= 0 ==> d2 <= 1);\nloop invariant (x1 <= 0 ==> x2 <= 0 ==> x3 <= 0 ==> d3 <= 1);\nloop invariant (x1 > 0 ==> x2 > 0 ==> x3 > 0 ==> d1 > 0);\nloop invariant (x1 > 0 ==> x2 > 0 ==> x3 > 0 ==> d2 > 0);\nloop invariant (x1 > 0 ==> x3 > 0 ==> d3 > 0);\nloop invariant (x1 <= 0 ==> x2 <= 0 ==> x3 <= 0 ==> d1 > 0);\nloop invariant (x1 <= 0 ==> x2 <= 0 ==> x3 <= 0 ==> d2 > 0);\nloop invariant (x1 <= 0 ==> x3 <= 0 ==> d3 > 0);\nloop invariant (x1 > 0 ==> x2 > 0 ==> x3 > 0 ==> d1 < x1);\nloop invariant (x1 > 0 ==> x2 > 0 ==> x3 > 0 ==> d2 < x2);\nloop invariant (x1 > 0 ==> x3 > 0 ==> d3 < x3);\nloop invariant (x1 <= 0 ==> x2 <= 0 ==> x3 <= 0 ==> d1 < 1);\nloop invariant (x1 <= 0 ==> x2 <= 0 ==> x3 <= 0 ==> d2 < 1);\nloop invariant (x1 <= 0 ==> x3 <= 0 ==> d3 < 1);\nloop invariant (x1 > 0 ==> x2 > 0 ==> x3 > 0 ==> d1 > 0);\nloop invariant (x1 > 0 ==> x2 > 0 ==> x3 > 0 ==> d2 > 0);\nloop invariant (x1 > 0 ==> x3 > 0 ==> d3 > 0);\nloop invariant (x1 <= 0 ==> x2 <= 0 ==> x3 <= 0 ==> d1 > 0);\nloop invariant (x1 <= 0 ==> x2 <= 0 ==> x3 <= 0 ==> d2 > 0);\nloop invariant (x1 <= 0 ==> x3 <= 0 ==> d3 > 0);\nloop invariant (x1 > 0 ==> x2 > 0 ==> x3 > 0 ==> d1 < x1);\nloop invariant (x1 > 0 ==> x2 > 0 ==> x3 > 0 ==> d2 < x2);\nloop invariant (x1 > 0 ==> x3 > 0 ==> d3 < x3);\nloop invariant (x1 <= 0 ==> x2 <= 0 ==> x3 <= 0 ==> d1 < 1);\nloop invariant (x1 <= 0 ==> x2 <= 0 ==> x3 <= 0 ==> d2 < 1);\nloop invariant (x1 <= 0 ==> x3 <= 0 ==> d3 < 1);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x1 <= 1 is partially proven to be inductive.\nloop invariant 0 <= x2 <= 1 is preserved but not established.\nloop invariant 0 <= x3 <= 1 is preserved but not established.\nloop invariant d1 >= 1 is partially proven to be inductive.\nloop invariant d2 >= 1 is partially proven to be inductive.\nloop invariant d3 >= 1 is partially proven to be inductive.\nloop invariant x1 >= x2 is partially proven to be inductive.\nloop invariant x1 >= x3 is partially proven to be inductive.\nloop invariant x2 >= x3 is preserved but not established.\nloop invariant (x1 > 0 ==> x2 > 0 ==> x3 > 0) is preserved but not established.\nloop invariant (x1 <= 0 ==> x2 <= 0 ==> x3 <= 0) is partially proven to be inductive.\nloop invariant (x1 > 0 ==> x2 > 0 ==> d1 <= x1) is partially proven to be inductive.\nloop invariant (x1 > 0 ==> x2 > 0 ==> d2 <= x2) is partially proven to be inductive.\nloop invariant (x1 > 0 ==> x3 > 0 ==> d3 <= x3) is partially proven to be inductive.\nloop invariant (x1 <= 0 ==> x2 <= 0 ==> x3 <= 0 ==> d1 <= 1) is partially proven to be inductive.\nloop invariant (x1 <= 0 ==> x2 <= 0 ==> x3 <= 0 ==> d2 <= 1) is partially proven to be inductive.\nloop invariant (x1 <= 0 ==> x2 <= 0 ==> x3 <= 0 ==> d3 <= 1) is partially proven to be inductive.\nloop invariant (x1 > 0 ==> x2 > 0 ==> x3 > 0 ==> d1 > 0) is partially proven to be inductive.\nloop invariant (x1 > 0 ==> x2 > 0 ==> x3 > 0 ==> d2 > 0) is partially proven to be inductive.\nloop invariant (x1 > 0 ==> x3 > 0 ==> d3 > 0) is partially proven to be inductive.\nloop invariant (x1 <= 0 ==> x2 <= 0 ==> x3 <= 0 ==> d1 > 0) is partially proven to be inductive.\nloop invariant (x1 <= 0 ==> x2 <= 0 ==> x3 <= 0 ==> d2 > 0) is partially proven to be inductive.\nloop invariant (x1 <= 0 ==> x3 <= 0 ==> d3 > 0) is partially proven to be inductive.\nloop invariant (x1 > 0 ==> x2 > 0 ==> x3 > 0 ==> d1 < x1) is preserved but not established.\nloop invariant (x1 > 0 ==> x2 > 0 ==> x3 > 0 ==> d2 < x2) is partially proven to be inductive.\nloop invariant (x1 > 0 ==> x3 > 0 ==> d3 < x3) is partially proven to be inductive.\nloop invariant (x1 <= 0 ==> x2 <= 0 ==> x3 <= 0 ==> d1 < 1) is partially proven to be inductive.\nloop invariant (x1 <= 0 ==> x2 <= 0 ==> x3 <= 0 ==> d2 < 1) is partially proven to be inductive.\nloop invariant (x1 <= 0 ==> x3 <= 0 ==> d3 < 1) is partially proven to be inductive.\nAssertion x2 >= 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int d1 = 1;\n    int d2 = 1;\n    int d3 = 1;\n    int x1 = 1;\n    int x2,x3;\n\n    /*@\nloop invariant i1: 0 <= x1 <= 1;\n\n\nloop invariant i4: d1 >= 1;\nloop invariant i5: d2 >= 1;\nloop invariant i6: d3 >= 1;\n\n\n\n\n\nloop invariant i12: (x1 > 0 ==> x2 > 0 ==> d1 <= x1);\nloop invariant i13: (x1 > 0 ==> x2 > 0 ==> d2 <= x2);\nloop invariant i14: (x1 > 0 ==> x3 > 0 ==> d3 <= x3);\nloop invariant i15: (x1 <= 0 ==> x2 <= 0 ==> x3 <= 0 ==> d1 <= 1);\n\n\nloop invariant i18: (x1 > 0 ==> x2 > 0 ==> x3 > 0 ==> d1 > 0);\nloop invariant i19: (x1 > 0 ==> x2 > 0 ==> x3 > 0 ==> d2 > 0);\nloop invariant i20: (x1 > 0 ==> x3 > 0 ==> d3 > 0);\nloop invariant i21: (x1 <= 0 ==> x2 <= 0 ==> x3 <= 0 ==> d1 > 0);\nloop invariant i22: (x1 <= 0 ==> x2 <= 0 ==> x3 <= 0 ==> d2 > 0);\nloop invariant i23: (x1 <= 0 ==> x3 <= 0 ==> d3 > 0);\n\n\n\n\n\n\n*/\nwhile( x1 > 0) {\n        if(x2 > 0) {\n            if(x3 > 0) {\n                x1 = x1 - d1;\n                x2 = x2 - d2;\n                x3 = x3 - d3;\n            }\n        }\n    }\n\n    {;\n//@ assert(x2 >= 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= x1;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2;\nloop invariant x1 >= x3;\nloop invariant x2 >= x3;\nloop invariant x1 <= (d1 + x2);\nloop invariant x1 <= (d1 + x3);\nloop invariant x2 <= (d2 + x3);\nloop invariant x1 >= (d1 * (x2 - 1));\nloop invariant x1 >= (d1 * (x3 - 1));\nloop invariant x2 >= (d2 * (x3 - 1));\nloop invariant x1 <= (d1 * x2);\nloop invariant x1 <= (d1 * x3);\nloop invariant x2 <= (d2 * x3);\nloop invariant x1 >= (d1 * (x2 - 1) * (x3 - 1));\nloop invariant x1 <= (d1 * x2 * x3);\nloop invariant x2 >= (d2 * (x3 - 1) * (x1 - 1));\nloop invariant x2 <= (d2 * x3 * x1);\nloop invariant x3 >= (d3 * (x2 - 1) * (x1 - 1));\nloop invariant x3 <= (d3 * x2 * x1);\nloop invariant x1 >= (d1 * x2 * x3);\nloop invariant x2 >= (d2 * x3 * x1);\nloop invariant x3 >= (d3 * x2 * x1);\nloop invariant x1 <= (d1 * (x2 + 1) * (x3 + 1));\nloop invariant x2 <= (d2 * (x3 + 1) * (x1 + 1));\nloop invariant x3 <= (d3 * (x2 + 1) * (x1 + 1));\nloop invariant x1 >= (d1 * (x2 + 1) * (x3 + 1));\nloop invariant x2 >= (d2 * (x3 + 1) * (x1 + 1));\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x1 is partially proven to be inductive.\nloop invariant x2 >= 0 is preserved but not established.\nloop invariant x3 >= 0 is preserved but not established.\nloop invariant x1 >= x2 is preserved but not established.\nloop invariant x1 >= x3 is preserved but not established.\nloop invariant x2 >= x3 is preserved but not established.\nloop invariant x1 <= (d1 + x2) is partially proven to be inductive.\nloop invariant x1 <= (d1 + x3) is partially proven to be inductive.\nloop invariant x2 <= (d2 + x3) is partially proven to be inductive.\nloop invariant x1 >= (d1 * (x2 - 1)) is partially proven to be inductive.\nloop invariant x1 >= (d1 * (x3 - 1)) is partially proven to be inductive.\nloop invariant x2 >= (d2 * (x3 - 1)) is partially proven to be inductive.\nloop invariant x1 <= (d1 * x2) is preserved but not established.\nloop invariant x1 <= (d1 * x3) is preserved but not established.\nloop invariant x2 <= (d2 * x3) is partially proven to be inductive.\nloop invariant x1 >= (d1 * (x2 - 1) * (x3 - 1)) is partially proven to be inductive.\nloop invariant x1 <= (d1 * x2 * x3) is partially proven to be inductive.\nloop invariant x2 >= (d2 * (x3 - 1) * (x1 - 1)) is partially proven to be inductive.\nloop invariant x2 <= (d2 * x3 * x1) is partially proven to be inductive.\nloop invariant x3 >= (d3 * (x2 - 1) * (x1 - 1)) is partially proven to be inductive.\nloop invariant x3 <= (d3 * x2 * x1) is partially proven to be inductive.\nloop invariant x1 >= (d1 * x2 * x3) is partially proven to be inductive.\nloop invariant x2 >= (d2 * x3 * x1) is partially proven to be inductive.\nloop invariant x3 >= (d3 * x2 * x1) is partially proven to be inductive.\nloop invariant x1 <= (d1 * (x2 + 1) * (x3 + 1)) is partially proven to be inductive.\nloop invariant x2 <= (d2 * (x3 + 1) * (x1 + 1)) is partially proven to be inductive.\nloop invariant x3 <= (d3 * (x2 + 1) * (x1 + 1)) is partially proven to be inductive.\nloop invariant x1 >= (d1 * (x2 + 1) * (x3 + 1)) is preserved but not established.\nloop invariant x2 >= (d2 * (x3 + 1) * (x1 + 1)) is partially proven to be inductive.\nAssertion x2 >= 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int d1 = 1;\n    int d2 = 1;\n    int d3 = 1;\n    int x1 = 1;\n    int x2,x3;\n\n    /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile( x1 > 0) {\n        if(x2 > 0) {\n            if(x3 > 0) {\n                x1 = x1 - d1;\n                x2 = x2 - d2;\n                x3 = x3 - d3;\n            }\n        }\n    }\n\n    {;\n//@ assert(x2 >= 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x2 <= -d2 ==> (x2 >= 0);\nloop invariant 0 <= x2 <= -d2 ==> (x2 >= 0);\nloop invariant x3 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= d1;\nloop invariant x1 >= d1;\nloop invariant d1 > 0;\nloop invariant d1 > 0;\nloop invariant d2 > 0;\nloop invariant d2 > 0;\nloop invariant d3 > 0;\nloop invariant d3 > 0;\nloop invariant x1 >= d1 ==> (x1 >= d1);\nloop invariant x1 >= d1 ==> (x1 >= d1);\nloop invariant x2 >= d2 ==> (x2 >= d2);\nloop invariant x2 >= d2 ==> (x2 >= d2);\nloop invariant x3 >= d3 ==> (x3 >= d3);\nloop invariant x3 >= d3 ==> (x3 >= d3);\nloop invariant d1 > 0 ==> (d1 > 0);\nloop invariant d1 > 0 ==> (d1 > 0);\nloop invariant d2 > 0 ==> (d2 > 0);\nloop invariant d2 > 0 ==> (d2 > 0);\nloop invariant d3 > 0 ==> (d3 > 0);\nloop invariant d3 > 0 ==> (d3 > 0);\nloop invariant x1 >= d1 ==> (x1 >= d1);\nloop invariant x1 >= d1 ==> (x1 >= d1);\nloop invariant x2 >= d2 ==> (x2 >= d2);\nloop invariant x2 >= d2 ==> (x2 >= d2);\nloop invariant x3 >= d3 ==> (x3 >= d3);\nloop invariant x3 >= d3 ==> (x3 >= d3);\nloop invariant d1 > 0 ==> (d1 > 0);\nloop invariant d1 > 0 ==> (d1 > 0);\nloop invariant d2 > 0 ==> (d2 > 0);\nloop invariant d2 > 0 ==> (d2 > 0);\nloop invariant d3 > 0 ==> (d3 > 0);\nloop invariant d3 > 0 ==> (d3 > 0);\nloop invariant x1 >= d1 ==> (x1 >= d1);\nloop invariant x1 >= d1 ==> (x1 >= d1);\nloop invariant x2 >= d2 ==> (x2 >= d2);\nloop invariant x2 >= d2 ==> (x2 >= d2);\nloop invariant x3 >= d3 ==> (x3 >= d3);\nloop invariant x3 >= d3 ==> (x3 >= d3);\nloop invariant d1 > 0 ==> (d1 > 0);\nloop invariant d1 > 0 ==> (d1 > 0);\nloop invariant d2 > 0 ==> (d2 > 0);\nloop invariant d2 > 0 ==> (d2 > 0);\nloop invariant d3 > 0 ==> (d3 > 0);\nloop invariant d3 > 0 ==> (d3 > 0);\nloop invariant x1 >= d1 ==> (x1 >= d1);\nloop invariant x1 >= d1 ==> (x1 >= d1);\nloop invariant x2 >= d2 ==> (x2 >= d2);\nloop invariant x2 >= d2 ==> (x2 >= d2);\nloop invariant x3 >= d3 ==> (x3 >= d3);\nloop invariant x3 >= d3 ==> (x3 >= d3);\nloop invariant d1 > 0 ==> (d1 > 0);\nloop invariant d1 > 0 ==> (d1 > 0);\nloop invariant d2 > 0 ==> (d2 > 0);\nloop invariant d2 > 0 ==> (d2 > 0);\nloop invariant d3 > 0 ==> (d3 > 0);\nloop invariant d3 > 0 ==> (d3 > 0);\nloop invariant x1 >= d1 ==> (x1 >= d1);\nloop invariant x1 >= d1 ==> (x1 >= d1);\nloop invariant x2 >= d2 ==> (x2 >= d2);\nloop invariant x2 >= d2 ==> (x2 >= d2);\nloop invariant x3 >= d3 ==> (x3 >= d3);\nloop invariant x3 >= d3 ==> (x3 >= d3);\nloop invariant d1 > 0 ==> (d1 > 0);\nloop invariant d1 > 0 ==> (d1 > 0);\nloop invariant d2 > 0 ==> (d2 > 0);\nloop invariant d2 > 0 ==> (d2 > 0);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x2 <= -d2 ==> (x2 >= 0) is partially proven to be inductive.\nloop invariant x3 >= 0 is neither established nor preserved.\nloop invariant x1 >= d1 is established but not preserved.\nloop invariant d1 > 0 is partially proven to be inductive.\nloop invariant d2 > 0 is partially proven to be inductive.\nloop invariant d3 > 0 is partially proven to be inductive.\nloop invariant x1 >= d1 ==> (x1 >= d1) is partially proven to be inductive.\nloop invariant x2 >= d2 ==> (x2 >= d2) is partially proven to be inductive.\nloop invariant x3 >= d3 ==> (x3 >= d3) is partially proven to be inductive.\nloop invariant d1 > 0 ==> (d1 > 0) is partially proven to be inductive.\nloop invariant d2 > 0 ==> (d2 > 0) is partially proven to be inductive.\nloop invariant d3 > 0 ==> (d3 > 0) is partially proven to be inductive.\nAssertion x2 >= 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int d1 = 1;\n    int d2 = 1;\n    int d3 = 1;\n    int x1 = 1;\n    int x2,x3;\n\n    /*@\nloop invariant i1: 0 <= x2 <= -d2 ==> (x2 >= 0);\n\n\nloop invariant i4: d1 > 0;\nloop invariant i5: d2 > 0;\nloop invariant i6: d3 > 0;\nloop invariant i7: x1 >= d1 ==> (x1 >= d1);\nloop invariant i8: x2 >= d2 ==> (x2 >= d2);\nloop invariant i9: x3 >= d3 ==> (x3 >= d3);\nloop invariant i10: d1 > 0 ==> (d1 > 0);\nloop invariant i11: d2 > 0 ==> (d2 > 0);\nloop invariant i12: d3 > 0 ==> (d3 > 0);\n*/\nwhile( x1 > 0) {\n        if(x2 > 0) {\n            if(x3 > 0) {\n                x1 = x1 - d1;\n                x2 = x2 - d2;\n                x3 = x3 - d3;\n            }\n        }\n    }\n\n    {;\n//@ assert(x2 >= 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 22,
                    "annotations": "```\n/*@\nloop invariant 0 <= d1 <= 1;\nloop invariant 0 <= d2 <= 1;\nloop invariant 0 <= d3 <= 1;\nloop invariant 0 <= x1;\nloop invariant x2 >= d2*(x1/d1);\nloop invariant x3 >= d3*(x1/d1);\nloop invariant x2 >= d2;\nloop invariant x3 >= d3;\nloop invariant x1 >= 1;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant d1 >= 0;\nloop invariant d2 >= 0;\nloop invariant d3 >= 0;\nloop invariant x1 <= (x2 + x3);\nloop invariant x1 <= (x2 + d2);\nloop invariant x1 <= (x3 + d3);\nloop invariant x1 <= (x2 + d2 + x3 + d3);\nloop invariant x1 <= (x2 + x3 + d2 + d3);\nloop invariant x1 <= (x2 + x3 + d2 + d3 + d1);\nloop invariant x1 <= (x2 + x3 + d2 + d3 + d1 + d1);\nloop invariant x1 <= (x2 + x3 + d2 + d3 + d1 + d1 + d1);\nloop invariant x1 <= (x2 + x3 + d2 + d3 + d1 + d1 + d1 + d1);\nloop invariant x1 <= (x2 + x3 + d2 + d3 + d1 + d1 + d1 + d1 + d1);\nloop invariant x1 <= (x2 + x3 + d2 + d3 + d1 + d1 + d1 + d1 + d1 + d1);\nloop invariant x1 <= (x2 + x3 + d2 + d3 + d1 + d1 + d1 + d1 + d1 + d1 + d1);\nloop invariant x1 <= (x2 + x3 + d2 + d3 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1);\nloop invariant x1 <= (x2 + x3 + d2 + d3 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1);\nloop invariant x1 <= (x2 + x3 + d2 + d3 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1);\nloop invariant x1 <= (x2 + x3 + d2 + d3 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1);\nloop invariant x1 <= (x2 + x3 + d2 + d3 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1);\nloop invariant x1 <= (x2 + x3 + d2 + d3 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1);\nloop invariant x1 <= (x2 + x3 + d2 + d3 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1);\nloop invariant x1 <= (x2 + x3 + d2 + d3 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1);\nloop invariant x1 <= (x2 + x3 + d2 + d3 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1);\nloop invariant x1 <= (x2 + x3 + d2 + d3 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= d1 <= 1 is partially proven to be inductive.\nloop invariant 0 <= d2 <= 1 is partially proven to be inductive.\nloop invariant 0 <= d3 <= 1 is partially proven to be inductive.\nloop invariant 0 <= x1 is partially proven to be inductive.\nloop invariant x2 >= d2*(x1/d1) is neither established nor preserved.\nloop invariant x3 >= d3*(x1/d1) is neither established nor preserved.\nloop invariant x2 >= d2 is established but not preserved.\nloop invariant x3 >= d3 is established but not preserved.\nloop invariant x1 >= 1 is established but not preserved.\nloop invariant x2 >= 0 is partially proven to be inductive.\nloop invariant x3 >= 0 is partially proven to be inductive.\nloop invariant d1 >= 0 is partially proven to be inductive.\nloop invariant d2 >= 0 is partially proven to be inductive.\nloop invariant d3 >= 0 is partially proven to be inductive.\nloop invariant x1 <= (x2 + x3) is established but not preserved.\nloop invariant x1 <= (x2 + d2) is established but not preserved.\nloop invariant x1 <= (x3 + d3) is established but not preserved.\nloop invariant x1 <= (x2 + d2 + x3 + d3) is partially proven to be inductive.\nloop invariant x1 <= (x2 + x3 + d2 + d3) is partially proven to be inductive.\nloop invariant x1 <= (x2 + x3 + d2 + d3 + d1) is partially proven to be inductive.\nloop invariant x1 <= (x2 + x3 + d2 + d3 + d1 + d1) is partially proven to be inductive.\nloop invariant x1 <= (x2 + x3 + d2 + d3 + d1 + d1 + d1) is partially proven to be inductive.\nloop invariant x1 <= (x2 + x3 + d2 + d3 + d1 + d1 + d1 + d1) is partially proven to be inductive.\nloop invariant x1 <= (x2 + x3 + d2 + d3 + d1 + d1 + d1 + d1 + d1) is partially proven to be inductive.\nloop invariant x1 <= (x2 + x3 + d2 + d3 + d1 + d1 + d1 + d1 + d1 + d1) is partially proven to be inductive.\nloop invariant x1 <= (x2 + x3 + d2 + d3 + d1 + d1 + d1 + d1 + d1 + d1 + d1) is partially proven to be inductive.\nloop invariant x1 <= (x2 + x3 + d2 + d3 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1) is partially proven to be inductive.\nloop invariant x1 <= (x2 + x3 + d2 + d3 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1) is partially proven to be inductive.\nloop invariant x1 <= (x2 + x3 + d2 + d3 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1) is partially proven to be inductive.\nloop invariant x1 <= (x2 + x3 + d2 + d3 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1) is partially proven to be inductive.\nloop invariant x1 <= (x2 + x3 + d2 + d3 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1) is partially proven to be inductive.\nloop invariant x1 <= (x2 + x3 + d2 + d3 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1) is partially proven to be inductive.\nloop invariant x1 <= (x2 + x3 + d2 + d3 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1) is partially proven to be inductive.\nloop invariant x1 <= (x2 + x3 + d2 + d3 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1) is partially proven to be inductive.\nloop invariant x1 <= (x2 + x3 + d2 + d3 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1) is partially proven to be inductive.\nloop invariant x1 <= (x2 + x3 + d2 + d3 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1) is partially proven to be inductive.\nAssertion x2 >= 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int d1 = 1;\n    int d2 = 1;\n    int d3 = 1;\n    int x1 = 1;\n    int x2,x3;\n\n    /*@\nloop invariant i1: 0 <= d1 <= 1;\nloop invariant i2: 0 <= d2 <= 1;\nloop invariant i3: 0 <= d3 <= 1;\nloop invariant i4: 0 <= x1;\n\n\n\n\n\n\n\nloop invariant i12: d1 >= 0;\nloop invariant i13: d2 >= 0;\nloop invariant i14: d3 >= 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile( x1 > 0) {\n        if(x2 > 0) {\n            if(x3 > 0) {\n                x1 = x1 - d1;\n                x2 = x2 - d2;\n                x3 = x3 - d3;\n            }\n        }\n    }\n\n    {;\n//@ assert(x2 >= 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= x1 <= 1;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant 0 <= x1 <= 1;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant 0 <= x1 <= 1;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant 0 <= x1 <= 1;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant 0 <= x1 <= 1;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant 0 <= x1 <= 1;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant 0 <= x1 <= 1;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant 0 <= x1 <= 1;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant 0 <= x1 <= 1;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant 0 <= x1 <= 1;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant 0 <= x1 <= 1;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant 0 <= x1 <= 1;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant 0 <= x1 <= 1;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant 0 <= x1 <= 1;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant 0 <= x1 <= 1;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant 0 <= x1 <= 1;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant 0 <= x1 <= 1;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x1 <= 1 is established but not preserved.\nloop invariant x2 >= 0 is neither established nor preserved.\nloop invariant x3 >= 0 is neither established nor preserved.\nAssertion x2 >= 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int d1 = 1;\n    int d2 = 1;\n    int d3 = 1;\n    int x1 = 1;\n    int x2,x3;\n\n    /*@\n\n\n\n*/\nwhile( x1 > 0) {\n        if(x2 > 0) {\n            if(x3 > 0) {\n                x1 = x1 - d1;\n                x2 = x2 - d2;\n                x3 = x3 - d3;\n            }\n        }\n    }\n\n    {;\n//@ assert(x2 >= 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= x1 <= 100000;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 <= 100000;\nloop invariant x3 <= 100000;\nloop invariant x2 + x3 <= d1 * 100000;\nloop invariant x2 + x3 >= d1 * 100000;\nloop invariant x1 - d1 * 100000 <= 0;\nloop invariant x1 - d1 * 100000 >= 0;\nloop invariant x1 - d1 * 100000 <= 1;\nloop invariant x1 - d1 * 100000 >= 1;\nloop invariant x1 - d1 * 100000 <= 0;\nloop invariant x1 - d1 * 100000 >= 0;\nloop invariant x1 - d1 * 100000 <= 1;\nloop invariant x1 - d1 * 100000 >= 1;\nloop invariant x1 - d1 * 100000 <= 0;\nloop invariant x1 - d1 * 100000 >= 0;\nloop invariant x1 - d1 * 100000 <= 1;\nloop invariant x1 - d1 * 100000 >= 1;\nloop invariant x1 - d1 * 100000 <= 0;\nloop invariant x1 - d1 * 100000 >= 0;\nloop invariant x1 - d1 * 100000 <= 1;\nloop invariant x1 - d1 * 100000 >= 1;\nloop invariant x1 - d1 * 100000 <= 0;\nloop invariant x1 - d1 * 100000 >= 0;\nloop invariant x1 - d1 * 100000 <= 1;\nloop invariant x1 - d1 * 100000 >= 1;\nloop invariant x1 - d1 * 100000 <= 0;\nloop invariant x1 - d1 * 100000 >= 0;\nloop invariant x1 - d1 * 100000 <= 1;\nloop invariant x1 - d1 * 100000 >= 1;\nloop invariant x1 - d1 * 100000 <= 0;\nloop invariant x1 - d1 * 100000 >= 0;\nloop invariant x1 - d1 * 100000 <= 1;\nloop invariant x1 - d1 * 100000 >= 1;\nloop invariant x1 - d1 * 100000 <= 0;\nloop invariant x1 - d1 * 100000 >= 0;\nloop invariant x1 - d1 * 100000 <= 1;\nloop invariant x1 - d1 * 100000 >= 1;\nloop invariant x1 - d1 * 100000 <= 0;\nloop invariant x1 - d1 * 100000 >= 0;\nloop invariant x1 - d1 * 100000 <= 1;\nloop invariant x1 - d1 * 100000 >= 1;\nloop invariant x1 - d1 * 100000 <= 0;\nloop invariant x1 - d1 * 100000 >= 0;\nloop invariant x1 - d1 * 100000 <= 1;\nloop invariant x1 - d1 * 100000 >= 1;\nloop invariant x1 - d1 * 100000 <= 0;\nloop invariant x1 - d1 * 100000 >= 0;\nloop invariant x1 - d1 * 100000 <= 1;\nloop invariant x1 - d1 * 100000 >= 1;\nloop invariant x1 - d1 * 100000 <= 0;\nloop invariant x1 - d1 * 100000 >= 0;\nloop invariant x1 - d1 * 100000 <= 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x1 <= 100000 is partially proven to be inductive.\nloop invariant x2 >= 0 is preserved but not established.\nloop invariant x3 >= 0 is preserved but not established.\nloop invariant x2 <= 100000 is preserved but not established.\nloop invariant x3 <= 100000 is preserved but not established.\nloop invariant x2 + x3 <= d1 * 100000 is preserved but not established.\nloop invariant x2 + x3 >= d1 * 100000 is preserved but not established.\nloop invariant x1 - d1 * 100000 <= 0 is partially proven to be inductive.\nloop invariant x1 - d1 * 100000 >= 0 is preserved but not established.\nloop invariant x1 - d1 * 100000 <= 1 is partially proven to be inductive.\nloop invariant x1 - d1 * 100000 >= 1 is partially proven to be inductive.\nAssertion x2 >= 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int d1 = 1;\n    int d2 = 1;\n    int d3 = 1;\n    int x1 = 1;\n    int x2,x3;\n\n    /*@\n\n\n\n\n\n\n\nloop invariant i8: x1 - d1 * 100000 <= 0;\n\nloop invariant i10: x1 - d1 * 100000 <= 1;\n\n*/\nwhile( x1 > 0) {\n        if(x2 > 0) {\n            if(x3 > 0) {\n                x1 = x1 - d1;\n                x2 = x2 - d2;\n                x3 = x3 - d3;\n            }\n        }\n    }\n\n    {;\n//@ assert(x2 >= 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= x2 <= x1;\nloop invariant x2 <= x3;\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2;\nloop invariant d1 >= 0;\nloop invariant d2 >= 0;\nloop invariant d3 >= 0;\nloop invariant x2 >= x2 - d2;\nloop invariant x3 >= x3 - d3;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x2 <= x1 is neither established nor preserved.\nloop invariant x2 <= x3 is neither established nor preserved.\nloop invariant x1 >= 0 is partially proven to be inductive.\nloop invariant x2 >= 0 is partially proven to be inductive.\nloop invariant x3 >= 0 is partially proven to be inductive.\nloop invariant x1 >= x2 is partially proven to be inductive.\nloop invariant d1 >= 0 is partially proven to be inductive.\nloop invariant d2 >= 0 is partially proven to be inductive.\nloop invariant d3 >= 0 is partially proven to be inductive.\nloop invariant x2 >= x2 - d2 is partially proven to be inductive.\nloop invariant x3 >= x3 - d3 is partially proven to be inductive.\nAssertion x2 >= 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int d1 = 1;\n    int d2 = 1;\n    int d3 = 1;\n    int x1 = 1;\n    int x2,x3;\n\n    /*@\n\n\n\n\n\n\nloop invariant i7: d1 >= 0;\nloop invariant i8: d2 >= 0;\nloop invariant i9: d3 >= 0;\nloop invariant i10: x2 >= x2 - d2;\nloop invariant i11: x3 >= x3 - d3;\n*/\nwhile( x1 > 0) {\n        if(x2 > 0) {\n            if(x3 > 0) {\n                x1 = x1 - d1;\n                x2 = x2 - d2;\n                x3 = x3 - d3;\n            }\n        }\n    }\n\n    {;\n//@ assert(x2 >= 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 7,
                    "annotations": "```\n/*@\nloop invariant 0 <= x2 <= 1;\nloop invariant x1 >= 0;\nloop invariant x2 <= d2 * x1;\nloop invariant x3 <= d3 * x1;\nloop invariant x1 = x1 - d1 * (x2/d2) * (x3/d3);\nloop invariant x2 = x2 - d2 * (x2/d2) * (x3/d3);\nloop invariant x3 = x3 - d3 * (x2/d2) * (x3/d3);\nloop invariant x1 - x2 - x3 >= 0;\nloop invariant x1 - x2 - x3 <= 0;\nloop invariant x1 - x2 - x3 == 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2 + x3;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2 + x3;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2 + x3;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2 + x3;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2 + x3;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2 + x3;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2 + x3;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2 + x3;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2 + x3;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2 + x3;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2 + x3;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2 + x3;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2 + x3;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2 + x3;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2 + x3;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2 + x3;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2 + x3;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2 + x3;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2 + x3;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2 + x3;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2 + x3;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2 + x3;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2 + x3;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2 + x3;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2 + x3;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2 + x3;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2 + x3;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2 + x3;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2 + x3;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2 + x3;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2 + x3;\nloop invariant x2 >= 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 19: Assignment operators not allowed in annotations.",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int d1 = 1;\n    int d2 = 1;\n    int d3 = 1;\n    int x1 = 1;\n    int x2,x3;\n\n    /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile( x1 > 0) {\n        if(x2 > 0) {\n            if(x3 > 0) {\n                x1 = x1 - d1;\n                x2 = x2 - d2;\n                x3 = x3 - d3;\n            }\n        }\n    }\n\n    {;\n//@ assert(x2 >= 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 14,
                    "annotations": "```\n/*@\nloop invariant 0 <= x1 <= 1;\nloop invariant 0 <= x2 <= 1;\nloop invariant 0 <= x3 <= 1;\nloop invariant 0 <= d1 <= 1;\nloop invariant 0 <= d2 <= 1;\nloop invariant 0 <= d3 <= 1;\nloop invariant d1 >= 0;\nloop invariant d2 >= 0;\nloop invariant d3 >= 0;\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2;\nloop invariant x2 >= x3;\nloop invariant x3 >= d3;\nloop invariant x1 >= d1;\nloop invariant x2 >= d2;\nloop invariant x3 >= d3;\nloop invariant x1 >= x2 + x3;\nloop invariant x2 >= x3 + d3;\nloop invariant x3 >= d3 + d3;\nloop invariant x1 >= x2 + d2 + d3;\nloop invariant x2 >= x3 + d3 + d3;\nloop invariant x3 >= d3 + d3 + d3;\nloop invariant x1 >= x2 + d2 + d3 + d3;\nloop invariant x2 >= x3 + d3 + d3 + d3;\nloop invariant x3 >= d3 + d3 + d3 + d3;\nloop invariant x1 >= x2 + d2 + d3 + d3 + d3;\nloop invariant x2 >= x3 + d3 + d3 + d3 + d3;\nloop invariant x3 >= d3 + d3 + d3 + d3 + d3;\nloop invariant x1 >= x2 + d2 + d3 + d3 + d3 + d3;\nloop invariant x2 >= x3 + d3 + d3 + d3 + d3 + d3;\nloop invariant x3 >= d3 + d3 + d3 + d3 + d3 + d3;\nloop invariant x1 >= x2 + d2 + d3 + d3 + d3 + d3 + d3;\nloop invariant x2 >= x3 + d3 + d3 + d3 + d3 + d3 + d3;\nloop invariant x3 >= d3 + d3 + d3 + d3 + d3 + d3 + d3;\nloop invariant x1 >= x2 + d2 + d3 + d3 + d3 + d3 + d3 + d3;\nloop invariant x2 >= x3 + d3 + d3 + d3 + d3 + d3 + d3 + d3;\nloop invariant x3 >= d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3;\nloop invariant x1 >= x2 + d2 + d3 + d3 + d3 + d3 + d3 + d3 + d3;\nloop invariant x2 >= x3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3;\nloop invariant x3 >= d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3;\nloop invariant x1 >= x2 + d2 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3;\nloop invariant x2 >= x3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3;\nloop invariant x3 >= d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3;\nloop invariant x1 >= x2 + d2 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3;\nloop invariant x2 >= x3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3;\nloop invariant x3 >= d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3;\nloop invariant x1 >= x2 + d2 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3;\nloop invariant x2 >= x3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x1 <= 1 is partially proven to be inductive.\nloop invariant 0 <= x2 <= 1 is preserved but not established.\nloop invariant 0 <= x3 <= 1 is preserved but not established.\nloop invariant 0 <= d1 <= 1 is partially proven to be inductive.\nloop invariant 0 <= d2 <= 1 is partially proven to be inductive.\nloop invariant 0 <= d3 <= 1 is partially proven to be inductive.\nloop invariant d1 >= 0 is partially proven to be inductive.\nloop invariant d2 >= 0 is partially proven to be inductive.\nloop invariant d3 >= 0 is partially proven to be inductive.\nloop invariant x1 >= 0 is partially proven to be inductive.\nloop invariant x2 >= 0 is partially proven to be inductive.\nloop invariant x3 >= 0 is partially proven to be inductive.\nloop invariant x1 >= x2 is partially proven to be inductive.\nloop invariant x2 >= x3 is preserved but not established.\nloop invariant x3 >= d3 is preserved but not established.\nloop invariant x1 >= d1 is partially proven to be inductive.\nloop invariant x2 >= d2 is partially proven to be inductive.\nloop invariant x1 >= x2 + x3 is preserved but not established.\nloop invariant x2 >= x3 + d3 is partially proven to be inductive.\nloop invariant x3 >= d3 + d3 is partially proven to be inductive.\nloop invariant x1 >= x2 + d2 + d3 is partially proven to be inductive.\nloop invariant x2 >= x3 + d3 + d3 is partially proven to be inductive.\nloop invariant x3 >= d3 + d3 + d3 is partially proven to be inductive.\nloop invariant x1 >= x2 + d2 + d3 + d3 is partially proven to be inductive.\nloop invariant x2 >= x3 + d3 + d3 + d3 is partially proven to be inductive.\nloop invariant x3 >= d3 + d3 + d3 + d3 is partially proven to be inductive.\nloop invariant x1 >= x2 + d2 + d3 + d3 + d3 is partially proven to be inductive.\nloop invariant x2 >= x3 + d3 + d3 + d3 + d3 is partially proven to be inductive.\nloop invariant x3 >= d3 + d3 + d3 + d3 + d3 is partially proven to be inductive.\nloop invariant x1 >= x2 + d2 + d3 + d3 + d3 + d3 is partially proven to be inductive.\nloop invariant x2 >= x3 + d3 + d3 + d3 + d3 + d3 is partially proven to be inductive.\nloop invariant x3 >= d3 + d3 + d3 + d3 + d3 + d3 is partially proven to be inductive.\nloop invariant x1 >= x2 + d2 + d3 + d3 + d3 + d3 + d3 is partially proven to be inductive.\nloop invariant x2 >= x3 + d3 + d3 + d3 + d3 + d3 + d3 is partially proven to be inductive.\nloop invariant x3 >= d3 + d3 + d3 + d3 + d3 + d3 + d3 is partially proven to be inductive.\nloop invariant x1 >= x2 + d2 + d3 + d3 + d3 + d3 + d3 + d3 is partially proven to be inductive.\nloop invariant x2 >= x3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 is partially proven to be inductive.\nloop invariant x3 >= d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 is partially proven to be inductive.\nloop invariant x1 >= x2 + d2 + d3 + d3 + d3 + d3 + d3 + d3 + d3 is partially proven to be inductive.\nloop invariant x2 >= x3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 is partially proven to be inductive.\nloop invariant x3 >= d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 is partially proven to be inductive.\nloop invariant x1 >= x2 + d2 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 is partially proven to be inductive.\nloop invariant x2 >= x3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 is partially proven to be inductive.\nloop invariant x3 >= d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 is partially proven to be inductive.\nloop invariant x1 >= x2 + d2 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 is partially proven to be inductive.\nloop invariant x2 >= x3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 is partially proven to be inductive.\nloop invariant x3 >= d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 is partially proven to be inductive.\nloop invariant x1 >= x2 + d2 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 is partially proven to be inductive.\nloop invariant x2 >= x3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 is partially proven to be inductive.\nAssertion x2 >= 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int d1 = 1;\n    int d2 = 1;\n    int d3 = 1;\n    int x1 = 1;\n    int x2,x3;\n\n    /*@\nloop invariant i1: 0 <= x1 <= 1;\n\n\nloop invariant i4: 0 <= d1 <= 1;\nloop invariant i5: 0 <= d2 <= 1;\nloop invariant i6: 0 <= d3 <= 1;\nloop invariant i7: d1 >= 0;\nloop invariant i8: d2 >= 0;\nloop invariant i9: d3 >= 0;\nloop invariant i10: x1 >= 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile( x1 > 0) {\n        if(x2 > 0) {\n            if(x3 > 0) {\n                x1 = x1 - d1;\n                x2 = x2 - d2;\n                x3 = x3 - d3;\n            }\n        }\n    }\n\n    {;\n//@ assert(x2 >= 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x1;\nloop invariant 0 <= x2;\nloop invariant 0 <= x3;\nloop invariant x1 >= d1;\nloop invariant x2 >= d2;\nloop invariant x3 >= d3;\nloop invariant x1 - d1 * (x2 / d2) <= x3;\nloop invariant x2 - d2 * (x3 / d3) <= x1;\nloop invariant x3 - d3 * (x1 / d1) <= x2;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x1 is partially proven to be inductive.\nloop invariant 0 <= x2 is preserved but not established.\nloop invariant 0 <= x3 is preserved but not established.\nloop invariant x1 >= d1 is established but not preserved.\nloop invariant x2 >= d2 is neither established nor preserved.\nloop invariant x3 >= d3 is neither established nor preserved.\nloop invariant x1 - d1 * (x2 / d2) <= x3 is established but not preserved.\nloop invariant x2 - d2 * (x3 / d3) <= x1 is neither established nor preserved.\nloop invariant x3 - d3 * (x1 / d1) <= x2 is neither established nor preserved.\nAssertion x2 >= 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int d1 = 1;\n    int d2 = 1;\n    int d3 = 1;\n    int x1 = 1;\n    int x2,x3;\n\n    /*@\n\n\n\n\n\n\n\n\n\n*/\nwhile( x1 > 0) {\n        if(x2 > 0) {\n            if(x3 > 0) {\n                x1 = x1 - d1;\n                x2 = x2 - d2;\n                x3 = x3 - d3;\n            }\n        }\n    }\n\n    {;\n//@ assert(x2 >= 0);\n}\n\n}",
                    "checker_output_after_prune": false
                }
            ],
            "checker_output_for_combined_annotations": false,
            "checker_message_for_combined_annotations": "Annotation error on line 172: Assignment operators not allowed in annotations.",
            "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int d1 = 1;\n    int d2 = 1;\n    int d3 = 1;\n    int x1 = 1;\n    int x2,x3;\n\n    /*@\nloop invariant i1: 0 <= x2 <= 1;\nloop invariant i2: 0 <= d1 <= 100000;\nloop invariant i3: 0 <= d2 <= 100000;\nloop invariant i4: 0 <= d3 <= 100000;\nloop invariant i5: 0 <= x1 <= 100000;\nloop invariant i6: 0 <= x2 <= 100000;\nloop invariant i7: 0 <= x3 <= 100000;\nloop invariant i8: d1 >= 0;\nloop invariant i9: d2 >= 0;\nloop invariant i10: d3 >= 0;\nloop invariant i11: x1 >= 0;\nloop invariant i12: x2 >= 0;\nloop invariant i13: x3 >= 0;\nloop invariant i14: x1 >= x2;\nloop invariant i15: x1 >= x3;\nloop invariant i16: x2 >= x3;\nloop invariant i17: x1 >= d1;\nloop invariant i18: x2 >= d2;\nloop invariant i19: x3 >= d3;\nloop invariant i20: x1 >= d1 * x2 + d2 * x3;\nloop invariant i21: x2 >= d2 * x3;\nloop invariant i22: x3 >= d3 * x3;\nloop invariant i23: x1 >= d1 * x2 + d2 * x3 + d3 * x3;\nloop invariant i24: x2 >= d2 * x3 + d3 * x3;\nloop invariant i25: x1 >= d1 * x2 + d2 * x3 + d3 * x3 + d3 * x3;\nloop invariant i26: x2 >= d2 * x3 + d3 * x3 + d3 * x3;\nloop invariant i27: x3 >= d3 * x3 + d3 * x3;\nloop invariant i28: x1 >= d1 * x2 + d2 * x3 + d3 * x3 + d3 * x3 + d3 * x3;\nloop invariant i29: x2 >= d2 * x3 + d3 * x3 + d3 * x3 + d3 * x3;\nloop invariant i30: x3 >= d3 * x3 + d3 * x3 + d3 * x3;\nloop invariant i31: x1 >= d1 * x2 + d2 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3;\nloop invariant i32: x2 >= d2 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3;\nloop invariant i33: x3 >= d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3;\nloop invariant i34: x1 >= d1 * x2 + d2 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3;\nloop invariant i35: x2 >= d2 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3;\nloop invariant i36: x3 >= d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3;\nloop invariant i37: x1 >= d1 * x2 + d2 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3;\nloop invariant i38: x2 >= d2 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3;\nloop invariant i39: x3 >= d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3;\nloop invariant i40: x1 >= d1 * x2 + d2 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3;\nloop invariant i41: x2 >= d2 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3;\nloop invariant i42: x3 >= d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3;\nloop invariant i43: x1 >= x2 + x3;\nloop invariant i44: d1 >= 1;\nloop invariant i45: d2 >= 1;\nloop invariant i46: d3 >= 1;\nloop invariant i47: 0 <= d1 <= 1;\nloop invariant i48: 0 <= d2 <= 1;\nloop invariant i49: 0 <= d3 <= 1;\nloop invariant i50: 1 <= x1 <= 1;\nloop invariant i51: 0 <= x3 <= 1;\nloop invariant i52: (x2 == 0) ==> (x1 >= 0);\nloop invariant i53: (x3 == 0) ==> (x2 >= 0);\nloop invariant i54: (x2 >= 0) ==> (x1 >= 0);\nloop invariant i55: (x3 >= 0) ==> (x2 >= 0);\nloop invariant i56: (x2 == 0) ==> (x1 <= 1);\nloop invariant i57: (x3 == 0) ==> (x2 <= 1);\nloop invariant i58: (x2 >= 0) ==> (x1 <= 1);\nloop invariant i59: (x3 >= 0) ==> (x2 <= 1);\nloop invariant i60: (x2 == 0) ==> (x1 == 1);\nloop invariant i61: (x3 == 0) ==> (x2 == 1);\nloop invariant i62: ( x1 == 1 ==> ( ( x2 == 1 && x3 == 1 ) ) );\nloop invariant i63: ( x1 < 1 ==> !( x2 > 0 && x3 > 0 ) );\nloop invariant i64: 0 <= x1 <= 1;\nloop invariant i65: (x1 > 0 ==> x2 > 0 ==> x3 > 0);\nloop invariant i66: (x1 <= 0 ==> x2 <= 0 ==> x3 <= 0);\nloop invariant i67: (x1 > 0 ==> x2 > 0 ==> d1 <= x1);\nloop invariant i68: (x1 > 0 ==> x2 > 0 ==> d2 <= x2);\nloop invariant i69: (x1 > 0 ==> x3 > 0 ==> d3 <= x3);\nloop invariant i70: (x1 <= 0 ==> x2 <= 0 ==> x3 <= 0 ==> d1 <= 1);\nloop invariant i71: (x1 <= 0 ==> x2 <= 0 ==> x3 <= 0 ==> d2 <= 1);\nloop invariant i72: (x1 <= 0 ==> x2 <= 0 ==> x3 <= 0 ==> d3 <= 1);\nloop invariant i73: (x1 > 0 ==> x2 > 0 ==> x3 > 0 ==> d1 > 0);\nloop invariant i74: (x1 > 0 ==> x2 > 0 ==> x3 > 0 ==> d2 > 0);\nloop invariant i75: (x1 > 0 ==> x3 > 0 ==> d3 > 0);\nloop invariant i76: (x1 <= 0 ==> x2 <= 0 ==> x3 <= 0 ==> d1 > 0);\nloop invariant i77: (x1 <= 0 ==> x2 <= 0 ==> x3 <= 0 ==> d2 > 0);\nloop invariant i78: (x1 <= 0 ==> x3 <= 0 ==> d3 > 0);\nloop invariant i79: (x1 > 0 ==> x2 > 0 ==> x3 > 0 ==> d1 < x1);\nloop invariant i80: (x1 > 0 ==> x2 > 0 ==> x3 > 0 ==> d2 < x2);\nloop invariant i81: (x1 > 0 ==> x3 > 0 ==> d3 < x3);\nloop invariant i82: (x1 <= 0 ==> x2 <= 0 ==> x3 <= 0 ==> d1 < 1);\nloop invariant i83: (x1 <= 0 ==> x2 <= 0 ==> x3 <= 0 ==> d2 < 1);\nloop invariant i84: (x1 <= 0 ==> x3 <= 0 ==> d3 < 1);\nloop invariant i85: 0 <= x1;\nloop invariant i86: x1 <= (d1 + x2);\nloop invariant i87: x1 <= (d1 + x3);\nloop invariant i88: x2 <= (d2 + x3);\nloop invariant i89: x1 >= (d1 * (x2 - 1));\nloop invariant i90: x1 >= (d1 * (x3 - 1));\nloop invariant i91: x2 >= (d2 * (x3 - 1));\nloop invariant i92: x1 <= (d1 * x2);\nloop invariant i93: x1 <= (d1 * x3);\nloop invariant i94: x2 <= (d2 * x3);\nloop invariant i95: x1 >= (d1 * (x2 - 1) * (x3 - 1));\nloop invariant i96: x1 <= (d1 * x2 * x3);\nloop invariant i97: x2 >= (d2 * (x3 - 1) * (x1 - 1));\nloop invariant i98: x2 <= (d2 * x3 * x1);\nloop invariant i99: x3 >= (d3 * (x2 - 1) * (x1 - 1));\nloop invariant i100: x3 <= (d3 * x2 * x1);\nloop invariant i101: x1 >= (d1 * x2 * x3);\nloop invariant i102: x2 >= (d2 * x3 * x1);\nloop invariant i103: x3 >= (d3 * x2 * x1);\nloop invariant i104: x1 <= (d1 * (x2 + 1) * (x3 + 1));\nloop invariant i105: x2 <= (d2 * (x3 + 1) * (x1 + 1));\nloop invariant i106: x3 <= (d3 * (x2 + 1) * (x1 + 1));\nloop invariant i107: x1 >= (d1 * (x2 + 1) * (x3 + 1));\nloop invariant i108: x2 >= (d2 * (x3 + 1) * (x1 + 1));\nloop invariant i109: 0 <= x2 <= -d2 ==> (x2 >= 0);\nloop invariant i110: d1 > 0;\nloop invariant i111: d2 > 0;\nloop invariant i112: d3 > 0;\nloop invariant i113: x1 >= d1 ==> (x1 >= d1);\nloop invariant i114: x2 >= d2 ==> (x2 >= d2);\nloop invariant i115: x3 >= d3 ==> (x3 >= d3);\nloop invariant i116: d1 > 0 ==> (d1 > 0);\nloop invariant i117: d2 > 0 ==> (d2 > 0);\nloop invariant i118: d3 > 0 ==> (d3 > 0);\nloop invariant i119: x2 >= d2*(x1/d1);\nloop invariant i120: x3 >= d3*(x1/d1);\nloop invariant i121: x1 >= 1;\nloop invariant i122: x1 <= (x2 + x3);\nloop invariant i123: x1 <= (x2 + d2);\nloop invariant i124: x1 <= (x3 + d3);\nloop invariant i125: x1 <= (x2 + d2 + x3 + d3);\nloop invariant i126: x1 <= (x2 + x3 + d2 + d3);\nloop invariant i127: x1 <= (x2 + x3 + d2 + d3 + d1);\nloop invariant i128: x1 <= (x2 + x3 + d2 + d3 + d1 + d1);\nloop invariant i129: x1 <= (x2 + x3 + d2 + d3 + d1 + d1 + d1);\nloop invariant i130: x1 <= (x2 + x3 + d2 + d3 + d1 + d1 + d1 + d1);\nloop invariant i131: x1 <= (x2 + x3 + d2 + d3 + d1 + d1 + d1 + d1 + d1);\nloop invariant i132: x1 <= (x2 + x3 + d2 + d3 + d1 + d1 + d1 + d1 + d1 + d1);\nloop invariant i133: x1 <= (x2 + x3 + d2 + d3 + d1 + d1 + d1 + d1 + d1 + d1 + d1);\nloop invariant i134: x1 <= (x2 + x3 + d2 + d3 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1);\nloop invariant i135: x1 <= (x2 + x3 + d2 + d3 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1);\nloop invariant i136: x1 <= (x2 + x3 + d2 + d3 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1);\nloop invariant i137: x1 <= (x2 + x3 + d2 + d3 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1);\nloop invariant i138: x1 <= (x2 + x3 + d2 + d3 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1);\nloop invariant i139: x1 <= (x2 + x3 + d2 + d3 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1);\nloop invariant i140: x1 <= (x2 + x3 + d2 + d3 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1);\nloop invariant i141: x1 <= (x2 + x3 + d2 + d3 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1);\nloop invariant i142: x1 <= (x2 + x3 + d2 + d3 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1);\nloop invariant i143: x1 <= (x2 + x3 + d2 + d3 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1);\nloop invariant i144: x2 <= 100000;\nloop invariant i145: x3 <= 100000;\nloop invariant i146: x2 + x3 <= d1 * 100000;\nloop invariant i147: x2 + x3 >= d1 * 100000;\nloop invariant i148: x1 - d1 * 100000 <= 0;\nloop invariant i149: x1 - d1 * 100000 >= 0;\nloop invariant i150: x1 - d1 * 100000 <= 1;\nloop invariant i151: x1 - d1 * 100000 >= 1;\nloop invariant i152: 0 <= x2 <= x1;\nloop invariant i153: x2 <= x3;\nloop invariant i154: x2 >= x2 - d2;\nloop invariant i155: x3 >= x3 - d3;\nloop invariant i156: x2 <= d2 * x1;\nloop invariant i157: x3 <= d3 * x1;\nloop invariant i158: x1 = x1 - d1 * (x2/d2) * (x3/d3);\nloop invariant i159: x2 = x2 - d2 * (x2/d2) * (x3/d3);\nloop invariant i160: x3 = x3 - d3 * (x2/d2) * (x3/d3);\nloop invariant i161: x1 - x2 - x3 >= 0;\nloop invariant i162: x1 - x2 - x3 <= 0;\nloop invariant i163: x1 - x2 - x3 == 0;\nloop invariant i164: x2 >= x3 + d3;\nloop invariant i165: x3 >= d3 + d3;\nloop invariant i166: x1 >= x2 + d2 + d3;\nloop invariant i167: x2 >= x3 + d3 + d3;\nloop invariant i168: x3 >= d3 + d3 + d3;\nloop invariant i169: x1 >= x2 + d2 + d3 + d3;\nloop invariant i170: x2 >= x3 + d3 + d3 + d3;\nloop invariant i171: x3 >= d3 + d3 + d3 + d3;\nloop invariant i172: x1 >= x2 + d2 + d3 + d3 + d3;\nloop invariant i173: x2 >= x3 + d3 + d3 + d3 + d3;\nloop invariant i174: x3 >= d3 + d3 + d3 + d3 + d3;\nloop invariant i175: x1 >= x2 + d2 + d3 + d3 + d3 + d3;\nloop invariant i176: x2 >= x3 + d3 + d3 + d3 + d3 + d3;\nloop invariant i177: x3 >= d3 + d3 + d3 + d3 + d3 + d3;\nloop invariant i178: x1 >= x2 + d2 + d3 + d3 + d3 + d3 + d3;\nloop invariant i179: x2 >= x3 + d3 + d3 + d3 + d3 + d3 + d3;\nloop invariant i180: x3 >= d3 + d3 + d3 + d3 + d3 + d3 + d3;\nloop invariant i181: x1 >= x2 + d2 + d3 + d3 + d3 + d3 + d3 + d3;\nloop invariant i182: x2 >= x3 + d3 + d3 + d3 + d3 + d3 + d3 + d3;\nloop invariant i183: x3 >= d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3;\nloop invariant i184: x1 >= x2 + d2 + d3 + d3 + d3 + d3 + d3 + d3 + d3;\nloop invariant i185: x2 >= x3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3;\nloop invariant i186: x3 >= d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3;\nloop invariant i187: x1 >= x2 + d2 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3;\nloop invariant i188: x2 >= x3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3;\nloop invariant i189: x3 >= d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3;\nloop invariant i190: x1 >= x2 + d2 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3;\nloop invariant i191: x2 >= x3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3;\nloop invariant i192: x3 >= d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3;\nloop invariant i193: x1 >= x2 + d2 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3;\nloop invariant i194: x2 >= x3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3;\nloop invariant i195: 0 <= x2;\nloop invariant i196: 0 <= x3;\nloop invariant i197: x1 - d1 * (x2 / d2) <= x3;\nloop invariant i198: x2 - d2 * (x3 / d3) <= x1;\nloop invariant i199: x3 - d3 * (x1 / d1) <= x2;\n*/\nwhile( x1 > 0) {\n        if(x2 > 0) {\n            if(x3 > 0) {\n                x1 = x1 - d1;\n                x2 = x2 - d2;\n                x3 = x3 - d3;\n            }\n        }\n    }\n\n    {;\n//@ assert(x2 >= 0);\n}\n\n}",
            "combined_annotation_num_solver_calls": 34,
            "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int d1 = 1;\n    int d2 = 1;\n    int d3 = 1;\n    int x1 = 1;\n    int x2,x3;\n\n    /*@\n\nloop invariant i2: 0 <= d1 <= 100000;\nloop invariant i3: 0 <= d2 <= 100000;\nloop invariant i4: 0 <= d3 <= 100000;\nloop invariant i5: 0 <= x1 <= 100000;\n\n\nloop invariant i8: d1 >= 0;\nloop invariant i9: d2 >= 0;\nloop invariant i10: d3 >= 0;\nloop invariant i11: x1 >= 0;\n\n\n\n\n\n\n\n\n\n\nloop invariant i22: x3 >= d3 * x3;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i44: d1 >= 1;\nloop invariant i45: d2 >= 1;\nloop invariant i46: d3 >= 1;\nloop invariant i47: 0 <= d1 <= 1;\nloop invariant i48: 0 <= d2 <= 1;\nloop invariant i49: 0 <= d3 <= 1;\n\n\nloop invariant i52: (x2 == 0) ==> (x1 >= 0);\n\nloop invariant i54: (x2 >= 0) ==> (x1 >= 0);\n\nloop invariant i56: (x2 == 0) ==> (x1 <= 1);\n\nloop invariant i58: (x2 >= 0) ==> (x1 <= 1);\n\n\n\n\n\nloop invariant i64: 0 <= x1 <= 1;\n\n\nloop invariant i67: (x1 > 0 ==> x2 > 0 ==> d1 <= x1);\nloop invariant i68: (x1 > 0 ==> x2 > 0 ==> d2 <= x2);\nloop invariant i69: (x1 > 0 ==> x3 > 0 ==> d3 <= x3);\nloop invariant i70: (x1 <= 0 ==> x2 <= 0 ==> x3 <= 0 ==> d1 <= 1);\nloop invariant i71: (x1 <= 0 ==> x2 <= 0 ==> x3 <= 0 ==> d2 <= 1);\nloop invariant i72: (x1 <= 0 ==> x2 <= 0 ==> x3 <= 0 ==> d3 <= 1);\nloop invariant i73: (x1 > 0 ==> x2 > 0 ==> x3 > 0 ==> d1 > 0);\nloop invariant i74: (x1 > 0 ==> x2 > 0 ==> x3 > 0 ==> d2 > 0);\nloop invariant i75: (x1 > 0 ==> x3 > 0 ==> d3 > 0);\nloop invariant i76: (x1 <= 0 ==> x2 <= 0 ==> x3 <= 0 ==> d1 > 0);\nloop invariant i77: (x1 <= 0 ==> x2 <= 0 ==> x3 <= 0 ==> d2 > 0);\nloop invariant i78: (x1 <= 0 ==> x3 <= 0 ==> d3 > 0);\n\n\n\n\n\n\nloop invariant i85: 0 <= x1;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i109: 0 <= x2 <= -d2 ==> (x2 >= 0);\nloop invariant i110: d1 > 0;\nloop invariant i111: d2 > 0;\nloop invariant i112: d3 > 0;\nloop invariant i113: x1 >= d1 ==> (x1 >= d1);\nloop invariant i114: x2 >= d2 ==> (x2 >= d2);\nloop invariant i115: x3 >= d3 ==> (x3 >= d3);\nloop invariant i116: d1 > 0 ==> (d1 > 0);\nloop invariant i117: d2 > 0 ==> (d2 > 0);\nloop invariant i118: d3 > 0 ==> (d3 > 0);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i148: x1 - d1 * 100000 <= 0;\n\nloop invariant i150: x1 - d1 * 100000 <= 1;\n\n\n\nloop invariant i154: x2 >= x2 - d2;\nloop invariant i155: x3 >= x3 - d3;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile( x1 > 0) {\n        if(x2 > 0) {\n            if(x3 > 0) {\n                x1 = x1 - d1;\n                x2 = x2 - d2;\n                x3 = x3 - d3;\n            }\n        }\n    }\n\n    {;\n//@ assert(x2 >= 0);\n}\n\n}",
            "checker_output_after_prune": false
        },
        {
            "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum01_true-unreach-call_true-termination.i.annot.c",
            "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(){\n  int i, n=unknown_int(), sn=0;\nassume(n < 1000 && n >= -1000);\n  for(i=1; i<=n; i++){\n    sn = sn +(2);\n  }\n  {;\n//@ assert(sn==n*(2)|| sn == 0);\n}\n\n}",
            "success": true,
            "annotation_blocks": [
                "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant sn == 2 * i;\nloop invariant sn >= 0;\nloop invariant sn <= 2 * n;\nloop invariant i * 2 == sn;\nloop invariant i <= n;\nloop invariant sn == 2 * i;\nloop invariant sn >= 0;\nloop invariant sn <= 2 * n;\nloop invariant i * 2 == sn;\nloop invariant i <= n;\nloop invariant sn == 2 * i;\nloop invariant sn >= 0;\nloop invariant sn <= 2 * n;\nloop invariant i * 2 == sn;\nloop invariant i <= n;\nloop invariant sn == 2 * i;\nloop invariant sn >= 0;\nloop invariant sn <= 2 * n;\nloop invariant i * 2 == sn;\nloop invariant i <= n;\nloop invariant sn == 2 * i;\nloop invariant sn >= 0;\nloop invariant sn <= 2 * n;\nloop invariant i * 2 == sn;\nloop invariant i <= n;\nloop invariant sn == 2 * i;\nloop invariant sn >= 0;\nloop invariant sn <= 2 * n;\nloop invariant i * 2 == sn;\nloop invariant i <= n;\nloop invariant sn == 2 * i;\nloop invariant sn >= 0;\nloop invariant sn <= 2 * n;\nloop invariant i * 2 == sn;\nloop invariant i <= n;\nloop invariant sn == 2 * i;\nloop invariant sn >= 0;\nloop invariant sn <= 2 * n;\nloop invariant i * 2 == sn;\nloop invariant i <= n;\nloop invariant sn == 2 * i;\nloop invariant sn >= 0;\nloop invariant sn <= 2 * n;\nloop invariant i * 2 == sn;\nloop invariant i <= n;\nloop invariant sn == 2 * i;\nloop invariant sn >= 0;\nloop invariant sn <= 2 * n;\nloop invariant i * 2 == sn;\nloop invariant i <= n;\nloop invariant sn == 2 * i;\nloop invariant sn >= 0;\nloop invariant sn <= 2 * n;\nloop invariant i * 2 == sn;\nloop invariant i <= n;\nloop invariant sn == 2 * i;\nloop invariant sn >= 0;\nloop invariant sn <= 2 * n;\nloop invariant i * 2 == sn;\nloop invariant i <= n;\nloop invariant sn == 2 * i;\nloop invariant sn >= 0;\nloop invariant sn <= 2 * n;\nloop invariant i * 2 == sn;\nloop invariant i <= n;\nloop invariant sn == 2 * i;\nloop invariant sn >= 0;\nloop invariant sn <= 2 * n;\nloop invariant i * 2 == sn;\nloop invariant i <= n;\nloop invariant sn == 2 * i;\nloop invariant sn >= 0;\nloop invariant sn <= 2 * n;\nloop invariant i * 2 == sn;\nloop invariant i <= n;\nloop invariant sn == 2 * i;\nloop invariant sn >= 0;\nloop invariant sn <= 2 * n;\nloop invariant i * 2 == sn;\nloop invariant i <= n;\nloop invariant sn == 2 * i;\nloop invariant sn >= 0;\nloop invariant sn <= 2 * n;\nloop invariant i * 2 == sn;\nloop invariant i <= n;\nloop invariant sn == 2 * i;\nloop invariant sn >= 0;\nloop invariant sn <= 2 * n;\nloop invariant i * 2 == sn;\nloop invariant i <= n;\nloop invariant sn == 2 * i;\nloop invariant sn >= 0;\nloop invariant sn <= 2 * n;\nloop invariant i * 2 == sn;\nloop invariant i <= n;\nloop invariant sn == 2 * i;\nloop invariant sn >= 0;\nloop invariant sn <= 2 * n;\nloop invariant i * 2 == sn;\nloop invariant i <= n;\nloop invariant sn == 2 * i;\nloop invariant sn >= 0;\nloop invariant sn <= 2 * n;\nloop invariant i * 2 == sn;\nloop invariant i <= n;\nloop invariant sn == 2 * i;\nloop invariant sn >= 0;\nloop invariant sn <= 2 * n;\nloop invariant i * 2 == sn;\nloop invariant i <= n;\nloop invariant sn == 2 * i;\nloop invariant sn >= 0;\nloop invariant sn <= 2 * n;\nloop invariant i * 2 == sn;\nloop invariant i <= n;\nloop invariant sn == 2 * i;\nloop invariant sn >= 0;\nloop invariant sn <= 2 * n;\nloop invariant i * 2 == sn;\nloop invariant i <= n;\nloop invariant sn == 2 * i;\nloop invariant sn >= 0;\nloop invariant sn <= 2 * n;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn == 2 * i;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= n + 1;\nloop invariant sn == (2 * i);\nloop invariant i >= -1000;\nloop invariant i <= 1000;\nloop invariant n >= -1000;\nloop invariant n <= 1000;\n*/\n```",
                "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant sn >= i * 2;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= sn <= 2*n;\nloop invariant sn == 2*i;\nloop invariant 2*i <= 2*n;\n*/\n```",
                "```\n/*@\nloop invariant 1 <= i <= n+1;\nloop invariant sn == i*(2);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= n+1;\nloop invariant 0 <= sn <= (n+1)*(2);\nloop invariant sn == (i*(2)-2);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn == 2 * i;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= n; loop invariant i <= sn <= (n*(2)+i);\n*/\n```",
                "```\n/*@\nloop invariant 1 <= i <= n + 1;\nloop invariant sn == i * 2;\nloop invariant sn >= 0;\nloop invariant sn <= (n + 1) * 2;\nloop invariant n >= -1000;\nloop invariant n < 1000;\nloop invariant 2 <= sn <= (n + 1) * 2;\nloop invariant i <= n + 1;\nloop invariant i >= 1;\nloop invariant sn == i * 2;\nloop invariant sn >= 0;\nloop invariant sn <= (n + 1) * 2;\nloop invariant n >= -1000;\nloop invariant n < 1000;\nloop invariant 2 <= sn <= (n + 1) * 2;\nloop invariant i <= n + 1;\nloop invariant i >= 1;\nloop invariant sn == i * 2;\nloop invariant sn >= 0;\nloop invariant sn <= (n + 1) * 2;\nloop invariant n >= -1000;\nloop invariant n < 1000;\nloop invariant 2 <= sn <= (n + 1) * 2;\nloop invariant i <= n + 1;\nloop invariant i >= 1;\nloop invariant sn == i * 2;\nloop invariant sn >= 0;\nloop invariant sn <= (n + 1) * 2;\nloop invariant n >= -1000;\nloop invariant n < 1000;\nloop invariant 2 <= sn <= (n + 1) * 2;\nloop invariant i <= n + 1;\nloop invariant i >= 1;\nloop invariant sn == i * 2;\nloop invariant sn >= 0;\nloop invariant sn <= (n + 1) * 2;\nloop invariant n >= -1000;\nloop invariant n < 1000;\nloop invariant 2 <= sn <= (n + 1) * 2;\nloop invariant i <= n + 1;\nloop invariant i >= 1;\nloop invariant sn == i * 2;\nloop invariant sn >= 0;\nloop invariant sn <= (n + 1) * 2;\nloop invariant n >= -1000;\nloop invariant n < 1000;\nloop invariant 2 <= sn <= (n + 1) * 2;\nloop invariant i <= n + 1;\nloop invariant i >= 1;\nloop invariant sn == i * 2;\nloop invariant sn >= 0;\nloop invariant sn <= (n + 1) * 2;\nloop invariant n >= -1000;\nloop invariant n < 1000;\nloop invariant 2 <= sn <= (n + 1) * 2;\nloop invariant i <= n + 1;\nloop invariant i >= 1;\nloop invariant sn == i * 2;\nloop invariant sn >= 0;\nloop invariant sn <= (n + 1) * 2;\nloop invariant n >= -1000;\nloop invariant n < 1000;\nloop invariant 2 <= sn <= (n + 1) * 2;\nloop invariant i <= n + 1;\nloop invariant i >= 1;\nloop invariant sn == i * 2;\nloop invariant sn >= 0;\nloop invariant sn <= (n + 1) * 2;\nloop invariant n >= -1000;\nloop invariant n < 1000;\nloop invariant 2 <= sn <= (n + 1) * 2;\nloop invariant i <= n + 1;\nloop invariant i >= 1;\nloop invariant sn == i * 2;\nloop invariant sn >= 0;\nloop invariant sn <= (n + 1) * 2;\nloop invariant n >= -1000;\nloop invariant n < 1000;\nloop invariant 2 <= sn <= (n + 1) * 2;\nloop invariant i <= n + 1;\nloop invariant i >= 1;\nloop invariant sn == i * 2;\nloop invariant sn >= 0;\nloop invariant sn <= (n + 1) * 2;\nloop invariant n >= -1000;\nloop invariant n < 1000;\nloop invariant 2 <= sn <= (n + 1) * 2;\nloop invariant i <= n + 1;\nloop invariant i >= 1;\nloop invariant sn == i * 2;\nloop invariant sn >= 0;\nloop invariant sn <= (n + 1) * 2;\nloop invariant n >= -1000;\nloop invariant n < 1000;\nloop invariant 2 <= sn <= (n + 1) * 2;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= sn <= 2*n;\nloop invariant i >= 1;\nloop invariant i <= n+1;\nloop invariant (i == n+1) ==> (sn == n*(2) || sn == 0);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn = 2*i; loop invariant i <= n ==> n >= 0 ==> sn == n*(2); loop invariant i > n ==> sn == 0;\n*/\n```",
                "```\n/*@\nloop invariant 1 <= i <= n + 1;\nloop invariant 0 <= sn <= n * (2);\nloop invariant sn == i * (2) - (n * (2) - sn);\nloop invariant sn == 2 * i - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= n <= 1000;\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant sn >= 2 * i - 2;\nloop invariant sn <= 2 * n;\nloop invariant sn == n * (2) || sn == 0;\nloop invariant (i <= n) ==> (sn == i * (2) || sn == 0);\nloop invariant (i > n) ==> (sn == n * (2) || sn == 0);\nloop invariant (i < 1) ==> (sn == 0);\nloop invariant (i > n) ==> (sn == 0);\nloop invariant (i <= n) ==> (sn == i * (2) || sn == n * (2));\nloop invariant (i < 1) ==> (sn == 0);\nloop invariant (i <= n) ==> (sn == i * (2) || sn == n * (2));\nloop invariant (i < 1) ==> (sn == 0);\nloop invariant (i <= n) ==> (sn == i * (2) || sn == n * (2));\nloop invariant (i < 1) ==> (sn == 0);\nloop invariant (i <= n) ==> (sn == i * (2) || sn == n * (2));\nloop invariant (i < 1) ==> (sn == 0);\nloop invariant (i <= n) ==> (sn == i * (2) || sn == n * (2));\nloop invariant (i < 1) ==> (sn == 0);\nloop invariant (i <= n) ==> (sn == i * (2) || sn == n * (2));\nloop invariant (i < 1) ==> (sn == 0);\nloop invariant (i <= n) ==> (sn == i * (2) || sn == n * (2));\nloop invariant (i < 1) ==> (sn == 0);\nloop invariant (i <= n) ==> (sn == i * (2) || sn == n * (2));\nloop invariant (i < 1) ==> (sn == 0);\nloop invariant (i <= n) ==> (sn == i * (2) || sn == n * (2));\nloop invariant (i < 1) ==> (sn == 0);\nloop invariant (i <= n) ==> (sn == i * (2) || sn == n * (2));\nloop invariant (i < 1) ==> (sn == 0);\nloop invariant (i <= n) ==> (sn == i * (2) || sn == n * (2));\nloop invariant (i < 1) ==> (sn == 0);\nloop invariant (i <= n) ==> (sn == i * (2) || sn == n * (2));\nloop invariant (i < 1) ==> (sn == 0);\nloop invariant (i <= n) ==> (sn == i * (2) || sn == n * (2));\nloop invariant (i < 1) ==> (sn == 0);\nloop invariant (i <= n) ==> (sn == i * (2) || sn == n * (2));\nloop invariant (i < 1) ==> (sn == 0);\nloop invariant (i <= n) ==> (sn == i * (2) || sn == n * (2));\nloop invariant (i < 1) ==> (sn == 0);\nloop invariant (i <= n) ==> (sn == i * (2) || sn == n * (2));\nloop invariant (i < 1) ==> (sn == 0);\nloop invariant (i <= n) ==> (sn == i * (2) || sn == n * (2));\nloop invariant (i < 1) ==> (sn == 0);\nloop invariant (i <= n) ==> (sn == i * (2) || sn == n * (2));\nloop invariant (i < 1) ==> (sn == 0);\nloop invariant (i <= n) ==> (sn == i * (2) || sn == n * (2));\nloop invariant (i < 1) ==> (sn == 0);\nloop invariant (i <= n) ==> (sn == i * (2) || sn == n * (2));\nloop invariant (i < 1) ==> (sn == 0);\nloop invariant (i <= n) ==> (sn == i * (2) || sn == n * (2));\nloop invariant (i < 1) ==> (sn == 0);\nloop invariant (i <= n) ==> (sn == i * (2) || sn == n * (2));\nloop invariant (i < 1) ==> (sn == 0);\n*/\n```",
                "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant sn = (i-1)*(2) + sn;\nloop invariant n >= 0;\nloop invariant n < 1000;\nloop invariant n >= -1000;\nloop invariant i <= n;\nloop invariant sn >= 0;\nloop invariant sn <= n * (2);\nloop invariant sn == i * (2);\nloop invariant sn == 0;\nloop invariant sn == n * (2);\nloop invariant sn == n * (2) || sn == 0;\nloop invariant n < 1000 && n >= -1000;\nloop invariant i <= n;\nloop invariant sn >= 0;\nloop invariant sn <= n * (2);\nloop invariant sn == i * (2);\nloop invariant sn == 0;\nloop invariant sn == n * (2);\nloop invariant sn == n * (2) || sn == 0;\nloop invariant n < 1000 && n >= -1000;\nloop invariant i <= n;\nloop invariant sn >= 0;\nloop invariant sn <= n * (2);\nloop invariant sn == i * (2);\nloop invariant sn == 0;\nloop invariant sn == n * (2);\nloop invariant sn == n * (2) || sn == 0;\nloop invariant n < 1000 && n >= -1000;\nloop invariant i <= n;\nloop invariant sn >= 0;\nloop invariant sn <= n * (2);\nloop invariant sn == i * (2);\nloop invariant sn == 0;\nloop invariant sn == n * (2);\nloop invariant sn == n * (2) || sn == 0;\nloop invariant n < 1000 && n >= -1000;\nloop invariant i <= n;\n*/\n```"
            ],
            "completions": [
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant sn == 2 * i;\nloop invariant sn >= 0;\nloop invariant sn <= 2 * n;\nloop invariant i * 2 == sn;\nloop invariant i <= n;\nloop invariant sn == 2 * i;\nloop invariant sn >= 0;\nloop invariant sn <= 2 * n;\nloop invariant i * 2 == sn;\nloop invariant i <= n;\nloop invariant sn == 2 * i;\nloop invariant sn >= 0;\nloop invariant sn <= 2 * n;\nloop invariant i * 2 == sn;\nloop invariant i <= n;\nloop invariant sn == 2 * i;\nloop invariant sn >= 0;\nloop invariant sn <= 2 * n;\nloop invariant i * 2 == sn;\nloop invariant i <= n;\nloop invariant sn == 2 * i;\nloop invariant sn >= 0;\nloop invariant sn <= 2 * n;\nloop invariant i * 2 == sn;\nloop invariant i <= n;\nloop invariant sn == 2 * i;\nloop invariant sn >= 0;\nloop invariant sn <= 2 * n;\nloop invariant i * 2 == sn;\nloop invariant i <= n;\nloop invariant sn == 2 * i;\nloop invariant sn >= 0;\nloop invariant sn <= 2 * n;\nloop invariant i * 2 == sn;\nloop invariant i <= n;\nloop invariant sn == 2 * i;\nloop invariant sn >= 0;\nloop invariant sn <= 2 * n;\nloop invariant i * 2 == sn;\nloop invariant i <= n;\nloop invariant sn == 2 * i;\nloop invariant sn >= 0;\nloop invariant sn <= 2 * n;\nloop invariant i * 2 == sn;\nloop invariant i <= n;\nloop invariant sn == 2 * i;\nloop invariant sn >= 0;\nloop invariant sn <= 2 * n;\nloop invariant i * 2 == sn;\nloop invariant i <= n;\nloop invariant sn == 2 * i;\nloop invariant sn >= 0;\nloop invariant sn <= 2 * n;\nloop invariant i * 2 == sn;\nloop invariant i <= n;\nloop invariant sn == 2 * i;\nloop invariant sn >= 0;\nloop invariant sn <= 2 * n;\nloop invariant i * 2 == sn;\nloop invariant i <= n;\nloop invariant sn == 2 * i;\nloop invariant sn >= 0;\nloop invariant sn <= 2 * n;\nloop invariant i * 2 == sn;\nloop invariant i <= n;\nloop invariant sn == 2 * i;\nloop invariant sn >= 0;\nloop invariant sn <= 2 * n;\nloop invariant i * 2 == sn;\nloop invariant i <= n;\nloop invariant sn == 2 * i;\nloop invariant sn >= 0;\nloop invariant sn <= 2 * n;\nloop invariant i * 2 == sn;\nloop invariant i <= n;\nloop invariant sn == 2 * i;\nloop invariant sn >= 0;\nloop invariant sn <= 2 * n;\nloop invariant i * 2 == sn;\nloop invariant i <= n;\nloop invariant sn == 2 * i;\nloop invariant sn >= 0;\nloop invariant sn <= 2 * n;\nloop invariant i * 2 == sn;\nloop invariant i <= n;\nloop invariant sn == 2 * i;\nloop invariant sn >= 0;\nloop invariant sn <= 2 * n;\nloop invariant i * 2 == sn;\nloop invariant i <= n;\nloop invariant sn == 2 * i;\nloop invariant sn >= 0;\nloop invariant sn <= 2 * n;\nloop invariant i * 2 == sn;\nloop invariant i <= n;\nloop invariant sn == 2 * i;\nloop invariant sn >= 0;\nloop invariant sn <= 2 * n;\nloop invariant i * 2 == sn;\nloop invariant i <= n;\nloop invariant sn == 2 * i;\nloop invariant sn >= 0;\nloop invariant sn <= 2 * n;\nloop invariant i * 2 == sn;\nloop invariant i <= n;\nloop invariant sn == 2 * i;\nloop invariant sn >= 0;\nloop invariant sn <= 2 * n;\nloop invariant i * 2 == sn;\nloop invariant i <= n;\nloop invariant sn == 2 * i;\nloop invariant sn >= 0;\nloop invariant sn <= 2 * n;\nloop invariant i * 2 == sn;\nloop invariant i <= n;\nloop invariant sn == 2 * i;\nloop invariant sn >= 0;\nloop invariant sn <= 2 * n;\nloop invariant i * 2 == sn;\nloop invariant i <= n;\nloop invariant sn == 2 * i;\nloop invariant sn >= 0;\nloop invariant sn <= 2 * n;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= i <= n is preserved but not established.\nloop invariant sn == 2 * i is preserved but not established.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn <= 2 * n is partially proven to be inductive.\nloop invariant i * 2 == sn is partially proven to be inductive.\nloop invariant i <= n is partially proven to be inductive.\nAssertion sn == n * 2 || sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(){\n  int i, n=unknown_int(), sn=0;\nassume(n < 1000 && n >= -1000);\n  /*@\n\n\nloop invariant i3: sn >= 0;\n\n\n\n*/\nfor(i=1; i<=n; i++){\n    sn = sn +(2);\n  }\n  {;\n//@ assert(sn==n*(2)|| sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn == 2 * i;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= n is preserved but not established.\nloop invariant sn == 2 * i is preserved but not established.\nAssertion sn == n * 2 || sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(){\n  int i, n=unknown_int(), sn=0;\nassume(n < 1000 && n >= -1000);\n  /*@\n\n\n*/\nfor(i=1; i<=n; i++){\n    sn = sn +(2);\n  }\n  {;\n//@ assert(sn==n*(2)|| sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= n + 1;\nloop invariant sn == (2 * i);\nloop invariant i >= -1000;\nloop invariant i <= 1000;\nloop invariant n >= -1000;\nloop invariant n <= 1000;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= n + 1 is preserved but not established.\nloop invariant sn == (2 * i) is preserved but not established.\nloop invariant i >= -1000 is partially proven to be inductive.\nloop invariant i <= 1000 is partially proven to be inductive.\nloop invariant n >= -1000 is partially proven to be inductive.\nloop invariant n <= 1000 is partially proven to be inductive.\nAssertion sn == n * 2 || sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(){\n  int i, n=unknown_int(), sn=0;\nassume(n < 1000 && n >= -1000);\n  /*@\n\n\nloop invariant i3: i >= -1000;\n\nloop invariant i5: n >= -1000;\nloop invariant i6: n <= 1000;\n*/\nfor(i=1; i<=n; i++){\n    sn = sn +(2);\n  }\n  {;\n//@ assert(sn==n*(2)|| sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant sn >= i * 2;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= i <= n is preserved but not established.\nloop invariant sn >= i * 2 is preserved but not established.\nAssertion sn == n * 2 || sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(){\n  int i, n=unknown_int(), sn=0;\nassume(n < 1000 && n >= -1000);\n  /*@\n\n\n*/\nfor(i=1; i<=n; i++){\n    sn = sn +(2);\n  }\n  {;\n//@ assert(sn==n*(2)|| sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= sn <= 2*n;\nloop invariant sn == 2*i;\nloop invariant 2*i <= 2*n;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= n is preserved but not established.\nloop invariant 0 <= sn <= 2*n is partially proven to be inductive.\nloop invariant sn == 2*i is preserved but not established.\nloop invariant 2*i <= 2*n is partially proven to be inductive.\nAssertion sn == n * 2 || sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(){\n  int i, n=unknown_int(), sn=0;\nassume(n < 1000 && n >= -1000);\n  /*@\n\n\n\n\n*/\nfor(i=1; i<=n; i++){\n    sn = sn +(2);\n  }\n  {;\n//@ assert(sn==n*(2)|| sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 1 <= i <= n+1;\nloop invariant sn == i*(2);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= i <= n+1 is preserved but not established.\nloop invariant sn == i*(2) is preserved but not established.\nAssertion sn == n * 2 || sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(){\n  int i, n=unknown_int(), sn=0;\nassume(n < 1000 && n >= -1000);\n  /*@\n\n\n*/\nfor(i=1; i<=n; i++){\n    sn = sn +(2);\n  }\n  {;\n//@ assert(sn==n*(2)|| sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= n+1;\nloop invariant 0 <= sn <= (n+1)*(2);\nloop invariant sn == (i*(2)-2);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= n+1 is preserved but not established.\nloop invariant 0 <= sn <= (n+1)*(2) is partially proven to be inductive.\nloop invariant sn == (i*(2)-2) is partially proven to be inductive.\nAssertion sn == n * 2 || sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(){\n  int i, n=unknown_int(), sn=0;\nassume(n < 1000 && n >= -1000);\n  /*@\n\n\nloop invariant i3: sn == (i*(2)-2);\n*/\nfor(i=1; i<=n; i++){\n    sn = sn +(2);\n  }\n  {;\n//@ assert(sn==n*(2)|| sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn == 2 * i;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= n is preserved but not established.\nloop invariant sn == 2 * i is preserved but not established.\nAssertion sn == n * 2 || sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(){\n  int i, n=unknown_int(), sn=0;\nassume(n < 1000 && n >= -1000);\n  /*@\n\n\n*/\nfor(i=1; i<=n; i++){\n    sn = sn +(2);\n  }\n  {;\n//@ assert(sn==n*(2)|| sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= n; loop invariant i <= sn <= (n*(2)+i);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= n; loop invariant i <= sn <= (n*(2)+i) is preserved but not established.\nAssertion sn == n * 2 || sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(){\n  int i, n=unknown_int(), sn=0;\nassume(n < 1000 && n >= -1000);\n  /*@\n\n*/\nfor(i=1; i<=n; i++){\n    sn = sn +(2);\n  }\n  {;\n//@ assert(sn==n*(2)|| sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 1 <= i <= n + 1;\nloop invariant sn == i * 2;\nloop invariant sn >= 0;\nloop invariant sn <= (n + 1) * 2;\nloop invariant n >= -1000;\nloop invariant n < 1000;\nloop invariant 2 <= sn <= (n + 1) * 2;\nloop invariant i <= n + 1;\nloop invariant i >= 1;\nloop invariant sn == i * 2;\nloop invariant sn >= 0;\nloop invariant sn <= (n + 1) * 2;\nloop invariant n >= -1000;\nloop invariant n < 1000;\nloop invariant 2 <= sn <= (n + 1) * 2;\nloop invariant i <= n + 1;\nloop invariant i >= 1;\nloop invariant sn == i * 2;\nloop invariant sn >= 0;\nloop invariant sn <= (n + 1) * 2;\nloop invariant n >= -1000;\nloop invariant n < 1000;\nloop invariant 2 <= sn <= (n + 1) * 2;\nloop invariant i <= n + 1;\nloop invariant i >= 1;\nloop invariant sn == i * 2;\nloop invariant sn >= 0;\nloop invariant sn <= (n + 1) * 2;\nloop invariant n >= -1000;\nloop invariant n < 1000;\nloop invariant 2 <= sn <= (n + 1) * 2;\nloop invariant i <= n + 1;\nloop invariant i >= 1;\nloop invariant sn == i * 2;\nloop invariant sn >= 0;\nloop invariant sn <= (n + 1) * 2;\nloop invariant n >= -1000;\nloop invariant n < 1000;\nloop invariant 2 <= sn <= (n + 1) * 2;\nloop invariant i <= n + 1;\nloop invariant i >= 1;\nloop invariant sn == i * 2;\nloop invariant sn >= 0;\nloop invariant sn <= (n + 1) * 2;\nloop invariant n >= -1000;\nloop invariant n < 1000;\nloop invariant 2 <= sn <= (n + 1) * 2;\nloop invariant i <= n + 1;\nloop invariant i >= 1;\nloop invariant sn == i * 2;\nloop invariant sn >= 0;\nloop invariant sn <= (n + 1) * 2;\nloop invariant n >= -1000;\nloop invariant n < 1000;\nloop invariant 2 <= sn <= (n + 1) * 2;\nloop invariant i <= n + 1;\nloop invariant i >= 1;\nloop invariant sn == i * 2;\nloop invariant sn >= 0;\nloop invariant sn <= (n + 1) * 2;\nloop invariant n >= -1000;\nloop invariant n < 1000;\nloop invariant 2 <= sn <= (n + 1) * 2;\nloop invariant i <= n + 1;\nloop invariant i >= 1;\nloop invariant sn == i * 2;\nloop invariant sn >= 0;\nloop invariant sn <= (n + 1) * 2;\nloop invariant n >= -1000;\nloop invariant n < 1000;\nloop invariant 2 <= sn <= (n + 1) * 2;\nloop invariant i <= n + 1;\nloop invariant i >= 1;\nloop invariant sn == i * 2;\nloop invariant sn >= 0;\nloop invariant sn <= (n + 1) * 2;\nloop invariant n >= -1000;\nloop invariant n < 1000;\nloop invariant 2 <= sn <= (n + 1) * 2;\nloop invariant i <= n + 1;\nloop invariant i >= 1;\nloop invariant sn == i * 2;\nloop invariant sn >= 0;\nloop invariant sn <= (n + 1) * 2;\nloop invariant n >= -1000;\nloop invariant n < 1000;\nloop invariant 2 <= sn <= (n + 1) * 2;\nloop invariant i <= n + 1;\nloop invariant i >= 1;\nloop invariant sn == i * 2;\nloop invariant sn >= 0;\nloop invariant sn <= (n + 1) * 2;\nloop invariant n >= -1000;\nloop invariant n < 1000;\nloop invariant 2 <= sn <= (n + 1) * 2;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= i <= n + 1 is preserved but not established.\nloop invariant sn == i * 2 is preserved but not established.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn <= (n + 1) * 2 is partially proven to be inductive.\nloop invariant n >= -1000 is partially proven to be inductive.\nloop invariant n < 1000 is partially proven to be inductive.\nloop invariant 2 <= sn <= (n + 1) * 2 is partially proven to be inductive.\nloop invariant i <= n + 1 is partially proven to be inductive.\nloop invariant i >= 1 is partially proven to be inductive.\nAssertion sn == n * 2 || sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(){\n  int i, n=unknown_int(), sn=0;\nassume(n < 1000 && n >= -1000);\n  /*@\n\n\nloop invariant i3: sn >= 0;\n\nloop invariant i5: n >= -1000;\nloop invariant i6: n < 1000;\n\n\nloop invariant i9: i >= 1;\n*/\nfor(i=1; i<=n; i++){\n    sn = sn +(2);\n  }\n  {;\n//@ assert(sn==n*(2)|| sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= sn <= 2*n;\nloop invariant i >= 1;\nloop invariant i <= n+1;\nloop invariant (i == n+1) ==> (sn == n*(2) || sn == 0);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= sn <= 2*n is neither established nor preserved.\nloop invariant i >= 1 is partially proven to be inductive.\nloop invariant i <= n+1 is partially proven to be inductive.\nloop invariant (i == n+1) ==> (sn == n*(2) || sn == 0) is established but not preserved.\nAssertion sn == n * 2 || sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(){\n  int i, n=unknown_int(), sn=0;\nassume(n < 1000 && n >= -1000);\n  /*@\n\nloop invariant i2: i >= 1;\n\n\n*/\nfor(i=1; i<=n; i++){\n    sn = sn +(2);\n  }\n  {;\n//@ assert(sn==n*(2)|| sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn = 2*i; loop invariant i <= n ==> n >= 0 ==> sn == n*(2); loop invariant i > n ==> sn == 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 14: Assignment operators not allowed in annotations.",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(){\n  int i, n=unknown_int(), sn=0;\nassume(n < 1000 && n >= -1000);\n  /*@\n\n\n*/\nfor(i=1; i<=n; i++){\n    sn = sn +(2);\n  }\n  {;\n//@ assert(sn==n*(2)|| sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 1 <= i <= n + 1;\nloop invariant 0 <= sn <= n * (2);\nloop invariant sn == i * (2) - (n * (2) - sn);\nloop invariant sn == 2 * i - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\nloop invariant sn == (2 * i) - (2 * n - sn);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= i <= n + 1 is preserved but not established.\nloop invariant 0 <= sn <= n * (2) is established but not preserved.\nloop invariant sn == i * (2) - (n * (2) - sn) is neither established nor preserved.\nloop invariant sn == 2 * i - (2 * n - sn) is partially proven to be inductive.\nloop invariant sn == (2 * i) - (2 * n - sn) is partially proven to be inductive.\nAssertion sn == n * 2 || sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(){\n  int i, n=unknown_int(), sn=0;\nassume(n < 1000 && n >= -1000);\n  /*@\n\n\n\n\n\n*/\nfor(i=1; i<=n; i++){\n    sn = sn +(2);\n  }\n  {;\n//@ assert(sn==n*(2)|| sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= n <= 1000;\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant sn >= 2 * i - 2;\nloop invariant sn <= 2 * n;\nloop invariant sn == n * (2) || sn == 0;\nloop invariant (i <= n) ==> (sn == i * (2) || sn == 0);\nloop invariant (i > n) ==> (sn == n * (2) || sn == 0);\nloop invariant (i < 1) ==> (sn == 0);\nloop invariant (i > n) ==> (sn == 0);\nloop invariant (i <= n) ==> (sn == i * (2) || sn == n * (2));\nloop invariant (i < 1) ==> (sn == 0);\nloop invariant (i <= n) ==> (sn == i * (2) || sn == n * (2));\nloop invariant (i < 1) ==> (sn == 0);\nloop invariant (i <= n) ==> (sn == i * (2) || sn == n * (2));\nloop invariant (i < 1) ==> (sn == 0);\nloop invariant (i <= n) ==> (sn == i * (2) || sn == n * (2));\nloop invariant (i < 1) ==> (sn == 0);\nloop invariant (i <= n) ==> (sn == i * (2) || sn == n * (2));\nloop invariant (i < 1) ==> (sn == 0);\nloop invariant (i <= n) ==> (sn == i * (2) || sn == n * (2));\nloop invariant (i < 1) ==> (sn == 0);\nloop invariant (i <= n) ==> (sn == i * (2) || sn == n * (2));\nloop invariant (i < 1) ==> (sn == 0);\nloop invariant (i <= n) ==> (sn == i * (2) || sn == n * (2));\nloop invariant (i < 1) ==> (sn == 0);\nloop invariant (i <= n) ==> (sn == i * (2) || sn == n * (2));\nloop invariant (i < 1) ==> (sn == 0);\nloop invariant (i <= n) ==> (sn == i * (2) || sn == n * (2));\nloop invariant (i < 1) ==> (sn == 0);\nloop invariant (i <= n) ==> (sn == i * (2) || sn == n * (2));\nloop invariant (i < 1) ==> (sn == 0);\nloop invariant (i <= n) ==> (sn == i * (2) || sn == n * (2));\nloop invariant (i < 1) ==> (sn == 0);\nloop invariant (i <= n) ==> (sn == i * (2) || sn == n * (2));\nloop invariant (i < 1) ==> (sn == 0);\nloop invariant (i <= n) ==> (sn == i * (2) || sn == n * (2));\nloop invariant (i < 1) ==> (sn == 0);\nloop invariant (i <= n) ==> (sn == i * (2) || sn == n * (2));\nloop invariant (i < 1) ==> (sn == 0);\nloop invariant (i <= n) ==> (sn == i * (2) || sn == n * (2));\nloop invariant (i < 1) ==> (sn == 0);\nloop invariant (i <= n) ==> (sn == i * (2) || sn == n * (2));\nloop invariant (i < 1) ==> (sn == 0);\nloop invariant (i <= n) ==> (sn == i * (2) || sn == n * (2));\nloop invariant (i < 1) ==> (sn == 0);\nloop invariant (i <= n) ==> (sn == i * (2) || sn == n * (2));\nloop invariant (i < 1) ==> (sn == 0);\nloop invariant (i <= n) ==> (sn == i * (2) || sn == n * (2));\nloop invariant (i < 1) ==> (sn == 0);\nloop invariant (i <= n) ==> (sn == i * (2) || sn == n * (2));\nloop invariant (i < 1) ==> (sn == 0);\nloop invariant (i <= n) ==> (sn == i * (2) || sn == n * (2));\nloop invariant (i < 1) ==> (sn == 0);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= n <= 1000 is preserved but not established.\nloop invariant i >= 1 is partially proven to be inductive.\nloop invariant i <= n is preserved but not established.\nloop invariant sn >= 2 * i - 2 is partially proven to be inductive.\nloop invariant sn <= 2 * n is partially proven to be inductive.\nloop invariant sn == n * (2) || sn == 0 is partially proven to be inductive.\nloop invariant (i <= n) ==> (sn == i * (2) || sn == 0) is partially proven to be inductive.\nloop invariant (i > n) ==> (sn == n * (2) || sn == 0) is partially proven to be inductive.\nloop invariant (i < 1) ==> (sn == 0) is partially proven to be inductive.\nloop invariant (i > n) ==> (sn == 0) is partially proven to be inductive.\nloop invariant (i <= n) ==> (sn == i * (2) || sn == n * (2)) is preserved but not established.\nAssertion sn == n * 2 || sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(){\n  int i, n=unknown_int(), sn=0;\nassume(n < 1000 && n >= -1000);\n  /*@\n\nloop invariant i2: i >= 1;\n\nloop invariant i4: sn >= 2 * i - 2;\n\n\n\n\nloop invariant i9: (i < 1) ==> (sn == 0);\n\n\n*/\nfor(i=1; i<=n; i++){\n    sn = sn +(2);\n  }\n  {;\n//@ assert(sn==n*(2)|| sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 7,
                    "annotations": "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant sn = (i-1)*(2) + sn;\nloop invariant n >= 0;\nloop invariant n < 1000;\nloop invariant n >= -1000;\nloop invariant i <= n;\nloop invariant sn >= 0;\nloop invariant sn <= n * (2);\nloop invariant sn == i * (2);\nloop invariant sn == 0;\nloop invariant sn == n * (2);\nloop invariant sn == n * (2) || sn == 0;\nloop invariant n < 1000 && n >= -1000;\nloop invariant i <= n;\nloop invariant sn >= 0;\nloop invariant sn <= n * (2);\nloop invariant sn == i * (2);\nloop invariant sn == 0;\nloop invariant sn == n * (2);\nloop invariant sn == n * (2) || sn == 0;\nloop invariant n < 1000 && n >= -1000;\nloop invariant i <= n;\nloop invariant sn >= 0;\nloop invariant sn <= n * (2);\nloop invariant sn == i * (2);\nloop invariant sn == 0;\nloop invariant sn == n * (2);\nloop invariant sn == n * (2) || sn == 0;\nloop invariant n < 1000 && n >= -1000;\nloop invariant i <= n;\nloop invariant sn >= 0;\nloop invariant sn <= n * (2);\nloop invariant sn == i * (2);\nloop invariant sn == 0;\nloop invariant sn == n * (2);\nloop invariant sn == n * (2) || sn == 0;\nloop invariant n < 1000 && n >= -1000;\nloop invariant i <= n;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 14: Assignment operators not allowed in annotations.",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(){\n  int i, n=unknown_int(), sn=0;\nassume(n < 1000 && n >= -1000);\n  /*@\n\n\n\nloop invariant i4: n < 1000;\nloop invariant i5: n >= -1000;\n\nloop invariant i7: sn >= 0;\n\n\n\n\n\nloop invariant i13: n < 1000 && n >= -1000;\n*/\nfor(i=1; i<=n; i++){\n    sn = sn +(2);\n  }\n  {;\n//@ assert(sn==n*(2)|| sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                }
            ],
            "checker_output_for_combined_annotations": false,
            "checker_message_for_combined_annotations": "Annotation error on line 45: Assignment operators not allowed in annotations.",
            "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(){\n  int i, n=unknown_int(), sn=0;\nassume(n < 1000 && n >= -1000);\n  /*@\nloop invariant i1: 1 <= i <= n;\nloop invariant i2: sn == 2 * i;\nloop invariant i3: sn >= 0;\nloop invariant i4: sn <= 2 * n;\nloop invariant i5: i * 2 == sn;\nloop invariant i6: i <= n;\nloop invariant i7: 0 <= i <= n;\nloop invariant i8: 0 <= i <= n + 1;\nloop invariant i9: sn == (2 * i);\nloop invariant i10: i >= -1000;\nloop invariant i11: i <= 1000;\nloop invariant i12: n >= -1000;\nloop invariant i13: n <= 1000;\nloop invariant i14: sn >= i * 2;\nloop invariant i15: 0 <= sn <= 2*n;\nloop invariant i16: sn == 2*i;\nloop invariant i17: 2*i <= 2*n;\nloop invariant i18: 1 <= i <= n+1;\nloop invariant i19: sn == i*(2);\nloop invariant i20: 0 <= i <= n+1;\nloop invariant i21: 0 <= sn <= (n+1)*(2);\nloop invariant i22: sn == (i*(2)-2);\nloop invariant i23: 0 <= i <= n; loop invariant i <= sn <= (n*(2)+i);\nloop invariant i24: 1 <= i <= n + 1;\nloop invariant i25: sn == i * 2;\nloop invariant i26: sn <= (n + 1) * 2;\nloop invariant i27: n < 1000;\nloop invariant i28: 2 <= sn <= (n + 1) * 2;\nloop invariant i29: i <= n + 1;\nloop invariant i30: i >= 1;\nloop invariant i31: i <= n+1;\nloop invariant i32: (i == n+1) ==> (sn == n*(2) || sn == 0);\nloop invariant i33: sn = 2*i; loop invariant i <= n ==> n >= 0 ==> sn == n*(2); loop invariant i > n ==> sn == 0;\nloop invariant i34: 0 <= sn <= n * (2);\nloop invariant i35: sn == i * (2) - (n * (2) - sn);\nloop invariant i36: sn == 2 * i - (2 * n - sn);\nloop invariant i37: sn == (2 * i) - (2 * n - sn);\nloop invariant i38: 0 <= n <= 1000;\nloop invariant i39: sn >= 2 * i - 2;\nloop invariant i40: sn == n * (2) || sn == 0;\nloop invariant i41: (i <= n) ==> (sn == i * (2) || sn == 0);\nloop invariant i42: (i > n) ==> (sn == n * (2) || sn == 0);\nloop invariant i43: (i < 1) ==> (sn == 0);\nloop invariant i44: (i > n) ==> (sn == 0);\nloop invariant i45: (i <= n) ==> (sn == i * (2) || sn == n * (2));\nloop invariant i46: sn = (i-1)*(2) + sn;\nloop invariant i47: n >= 0;\nloop invariant i48: sn <= n * (2);\nloop invariant i49: sn == i * (2);\nloop invariant i50: sn == 0;\nloop invariant i51: sn == n * (2);\nloop invariant i52: n < 1000 && n >= -1000;\n*/\nfor(i=1; i<=n; i++){\n    sn = sn +(2);\n  }\n  {;\n//@ assert(sn==n*(2)|| sn == 0);\n}\n\n}",
            "combined_annotation_num_solver_calls": 18,
            "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(){\n  int i, n=unknown_int(), sn=0;\nassume(n < 1000 && n >= -1000);\n  /*@\n\n\nloop invariant i3: sn >= 0;\n\n\n\n\n\n\nloop invariant i10: i >= -1000;\nloop invariant i11: i <= 1000;\nloop invariant i12: n >= -1000;\nloop invariant i13: n <= 1000;\n\n\n\n\n\n\n\n\nloop invariant i22: sn == (i*(2)-2);\n\n\n\n\nloop invariant i27: n < 1000;\n\n\nloop invariant i30: i >= 1;\n\nloop invariant i32: (i == n+1) ==> (sn == n*(2) || sn == 0);\n\n\n\n\n\n\nloop invariant i39: sn >= 2 * i - 2;\n\n\nloop invariant i42: (i > n) ==> (sn == n * (2) || sn == 0);\nloop invariant i43: (i < 1) ==> (sn == 0);\n\n\n\n\n\n\n\n\nloop invariant i52: n < 1000 && n >= -1000;\n*/\nfor(i=1; i<=n; i++){\n    sn = sn +(2);\n  }\n  {;\n//@ assert(sn==n*(2)|| sn == 0);\n}\n\n}",
            "checker_output_after_prune": true
        },
        {
            "file": "../dataset/loop_invariants/accelerating_invariant_generation/crafted/diamond_safe1.c",
            "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  while (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
            "success": false,
            "annotation_blocks": [
                "```\n/*@\n\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant 0 <= y <= 99;\nloop invariant (x % 2) == (y % 2) ==> (x % 2) == 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant 99 - x == y % 2;\nloop invariant (y % 2) == 0 ==> (x % 2) == 0;\nloop invariant (y % 2) == 1 ==> (x % 2) == 1;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant 0 <= y <= 99;\nloop invariant (x % 2) == (y % 2) ==> (x % 2) == 0;\nloop invariant (x % 2) == (y % 2) ==> (y % 2) == 0;\nloop invariant (x % 2) != (y % 2) ==> (x % 2) == 1;\nloop invariant (x % 2) != (y % 2) ==> (y % 2) == 1;\nloop invariant (x % 2) == 0 ==> (y % 2) == 0;\nloop invariant (x % 2) == 1 ==> (y % 2) == 1;\nloop invariant (x % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0;\nloop invariant (x % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1;\nloop invariant (x % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0;\nloop invariant (x % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1;\nloop invariant (x % 2) != (y % 2) ==> (x % 2) == 1 ==> (y % 2) == 0;\nloop invariant (x % 2) != (y % 2) ==> (x % 2) == 0 ==> (y % 2) == 1;\nloop invariant (x % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0;\nloop invariant (x % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1;\nloop invariant (x % 2) != (y % 2) ==> (x % 2) == 1 ==> (y % 2) == 0 ==> (y % 2) == 0;\nloop invariant (x % 2) != (y % 2) ==> (x % 2) == 0 ==> (y % 2) == 1 ==> (y % 2) == 1;\nloop invariant (x % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0;\nloop invariant (x % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1;\nloop invariant (x % 2) != (y % 2) ==> (x % 2) == 1 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0;\nloop invariant (x % 2) != (y % 2) ==> (x % 2) == 0 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1;\nloop invariant (x % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0;\nloop invariant (x % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant x % 2 == 0 ==> y % 2 == 0;\nloop invariant x % 2 == 1 ==> y % 2 == 1;\nloop invariant x % 2 == 0 ==> y % 2 == 0;\nloop invariant x % 2 == 1 ==> y % 2 == 1;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant 0 <= y <= 99;\nloop invariant (x % 2) == (y % 2);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant y % 2 == x % 2;\nloop invariant x % 2 == 0 ==> y % 2 == 0;\nloop invariant x % 2 == 1 ==> y % 2 == 1;\n*/\n```",
                "```\n/*@\nloop invariant x <= y <= 99;\nloop invariant x % 2 == y % 2 ==> x % 2 == 0;\nloop invariant x % 2 != y % 2 ==> x % 2 == 1;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant x % 2 == 1 ==> x % 2 == 1;\nloop invariant y % 2 == 0 ==> y % 2 == 0;\nloop invariant y % 2 == 1 ==> y % 2 == 1;\nloop invariant x <= y;\nloop invariant y <= 99;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= y;\nloop invariant x >= 0;\nloop invariant (x + 2) % 2 == (y % 2);\nloop invariant x <= 100;\nloop invariant y <= 100;\n*/\n```",
                "```\n/*@\n\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant (x % 2) == (y % 2);\nloop invariant 0 <= y <= 99;\nloop invariant ((x % 2) == 0 ? (x >= 2) : (x > 0));\nloop invariant ((y % 2) == 0 ? (y == 0) : (y > 0));\nloop invariant ((x % 2) == 0 ? (x == 2 * x) : (x == 2 * x - 1));\nloop invariant ((y % 2) == 0 ? (y == 2 * y) : (y == 2 * y - 1));\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant 0 <= y <= 100000;\nloop invariant x % 2 == y % 2;\nloop invariant (x % 2) == ((y + 1) % 2);\nloop invariant (x % 2) == ((y + 2) % 2);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant 0 <= y <= 100000;\nloop invariant (x % 2) == (y % 2);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant x % 2 == y % 2;\nloop invariant (y % 2 == 0) ==> (x >= 2);\nloop invariant (y % 2 != 0) ==> (x >= 1);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant x % 2 == 0 ==> y % 2 == 0;\nloop invariant x % 2 == 1 ==> y % 2 == 1;\nloop invariant x >= y;\nloop invariant y >= 0;\nloop invariant y <= 99;\nloop invariant x % 2 == 0 ==> x >= 2 * y;\nloop invariant x % 2 == 1 ==> x >= 2 * y + 1;\nloop invariant x % 2 == 0 ==> x <= 2 * y + 80;\nloop invariant x % 2 == 1 ==> x <= 2 * y + 81;\n*/\n```"
            ],
            "completions": [
                {
                    "num_solver_calls": 1,
                    "annotations": "```\n/*@\n\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 12: unexpected token ''",
                    "houdini_error": "No annotations found"
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant 0 <= y <= 99;\nloop invariant (x % 2) == (y % 2) ==> (x % 2) == 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is established but not preserved.\nloop invariant 0 <= y <= 99 is preserved but not established.\nloop invariant (x % 2) == (y % 2) ==> (x % 2) == 0 is established but not preserved.\nAssertion x % 2 == y % 2: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  /*@\n\n\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant 99 - x == y % 2;\nloop invariant (y % 2) == 0 ==> (x % 2) == 0;\nloop invariant (y % 2) == 1 ==> (x % 2) == 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is partially proven to be inductive.\nloop invariant 99 - x == y % 2 is preserved but not established.\nloop invariant (y % 2) == 0 ==> (x % 2) == 0 is partially proven to be inductive.\nloop invariant (y % 2) == 1 ==> (x % 2) == 1 is partially proven to be inductive.\nAssertion x % 2 == y % 2: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  /*@\n\n\nloop invariant i3: (y % 2) == 0 ==> (x % 2) == 0;\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 6,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant 0 <= y <= 99;\nloop invariant (x % 2) == (y % 2) ==> (x % 2) == 0;\nloop invariant (x % 2) == (y % 2) ==> (y % 2) == 0;\nloop invariant (x % 2) != (y % 2) ==> (x % 2) == 1;\nloop invariant (x % 2) != (y % 2) ==> (y % 2) == 1;\nloop invariant (x % 2) == 0 ==> (y % 2) == 0;\nloop invariant (x % 2) == 1 ==> (y % 2) == 1;\nloop invariant (x % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0;\nloop invariant (x % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1;\nloop invariant (x % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0;\nloop invariant (x % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1;\nloop invariant (x % 2) != (y % 2) ==> (x % 2) == 1 ==> (y % 2) == 0;\nloop invariant (x % 2) != (y % 2) ==> (x % 2) == 0 ==> (y % 2) == 1;\nloop invariant (x % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0;\nloop invariant (x % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1;\nloop invariant (x % 2) != (y % 2) ==> (x % 2) == 1 ==> (y % 2) == 0 ==> (y % 2) == 0;\nloop invariant (x % 2) != (y % 2) ==> (x % 2) == 0 ==> (y % 2) == 1 ==> (y % 2) == 1;\nloop invariant (x % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0;\nloop invariant (x % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1;\nloop invariant (x % 2) != (y % 2) ==> (x % 2) == 1 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0;\nloop invariant (x % 2) != (y % 2) ==> (x % 2) == 0 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1;\nloop invariant (x % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0;\nloop invariant (x % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is established but not preserved.\nloop invariant 0 <= y <= 99 is preserved but not established.\nloop invariant (x % 2) == (y % 2) ==> (x % 2) == 0 is partially proven to be inductive.\nloop invariant (x % 2) == (y % 2) ==> (y % 2) == 0 is partially proven to be inductive.\nloop invariant (x % 2) != (y % 2) ==> (x % 2) == 1 is preserved but not established.\nloop invariant (x % 2) != (y % 2) ==> (y % 2) == 1 is partially proven to be inductive.\nloop invariant (x % 2) == 0 ==> (y % 2) == 0 is partially proven to be inductive.\nloop invariant (x % 2) == 1 ==> (y % 2) == 1 is partially proven to be inductive.\nloop invariant (x % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 is partially proven to be inductive.\nloop invariant (x % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 is partially proven to be inductive.\nloop invariant (x % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 is partially proven to be inductive.\nloop invariant (x % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 is partially proven to be inductive.\nloop invariant (x % 2) != (y % 2) ==> (x % 2) == 1 ==> (y % 2) == 0 is partially proven to be inductive.\nloop invariant (x % 2) != (y % 2) ==> (x % 2) == 0 ==> (y % 2) == 1 is partially proven to be inductive.\nloop invariant (x % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 is partially proven to be inductive.\nloop invariant (x % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 is partially proven to be inductive.\nloop invariant (x % 2) != (y % 2) ==> (x % 2) == 1 ==> (y % 2) == 0 ==> (y % 2) == 0 is partially proven to be inductive.\nloop invariant (x % 2) != (y % 2) ==> (x % 2) == 0 ==> (y % 2) == 1 ==> (y % 2) == 1 is partially proven to be inductive.\nloop invariant (x % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 is partially proven to be inductive.\nloop invariant (x % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 is partially proven to be inductive.\nloop invariant (x % 2) != (y % 2) ==> (x % 2) == 1 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 is partially proven to be inductive.\nloop invariant (x % 2) != (y % 2) ==> (x % 2) == 0 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 is partially proven to be inductive.\nloop invariant (x % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 is partially proven to be inductive.\nloop invariant (x % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 is partially proven to be inductive.\nAssertion x % 2 == y % 2: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  /*@\n\n\n\n\n\nloop invariant i6: (x % 2) != (y % 2) ==> (y % 2) == 1;\n\nloop invariant i8: (x % 2) == 1 ==> (y % 2) == 1;\nloop invariant i9: (x % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0;\nloop invariant i10: (x % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1;\nloop invariant i11: (x % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0;\nloop invariant i12: (x % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1;\nloop invariant i13: (x % 2) != (y % 2) ==> (x % 2) == 1 ==> (y % 2) == 0;\nloop invariant i14: (x % 2) != (y % 2) ==> (x % 2) == 0 ==> (y % 2) == 1;\nloop invariant i15: (x % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0;\nloop invariant i16: (x % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1;\nloop invariant i17: (x % 2) != (y % 2) ==> (x % 2) == 1 ==> (y % 2) == 0 ==> (y % 2) == 0;\nloop invariant i18: (x % 2) != (y % 2) ==> (x % 2) == 0 ==> (y % 2) == 1 ==> (y % 2) == 1;\nloop invariant i19: (x % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0;\nloop invariant i20: (x % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1;\nloop invariant i21: (x % 2) != (y % 2) ==> (x % 2) == 1 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0;\nloop invariant i22: (x % 2) != (y % 2) ==> (x % 2) == 0 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1;\nloop invariant i23: (x % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0;\nloop invariant i24: (x % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1;\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant x % 2 == 0 ==> y % 2 == 0;\nloop invariant x % 2 == 1 ==> y % 2 == 1;\nloop invariant x % 2 == 0 ==> y % 2 == 0;\nloop invariant x % 2 == 1 ==> y % 2 == 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is established but not preserved.\nloop invariant x % 2 == 0 ==> y % 2 == 0 is neither established nor preserved.\nloop invariant x % 2 == 1 ==> y % 2 == 1 is partially proven to be inductive.\nAssertion x % 2 == y % 2: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  /*@\n\n\nloop invariant i3: x % 2 == 1 ==> y % 2 == 1;\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant 0 <= y <= 99;\nloop invariant (x % 2) == (y % 2);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is established but not preserved.\nloop invariant 0 <= y <= 99 is preserved but not established.\nloop invariant (x % 2) == (y % 2) is neither established nor preserved.\nAssertion x % 2 == y % 2: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  /*@\n\n\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant y % 2 == x % 2;\nloop invariant x % 2 == 0 ==> y % 2 == 0;\nloop invariant x % 2 == 1 ==> y % 2 == 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is established but not preserved.\nloop invariant y % 2 == x % 2 is neither established nor preserved.\nloop invariant x % 2 == 0 ==> y % 2 == 0 is partially proven to be inductive.\nloop invariant x % 2 == 1 ==> y % 2 == 1 is partially proven to be inductive.\nAssertion x % 2 == y % 2: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  /*@\n\n\n\nloop invariant i4: x % 2 == 1 ==> y % 2 == 1;\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant x <= y <= 99;\nloop invariant x % 2 == y % 2 ==> x % 2 == 0;\nloop invariant x % 2 != y % 2 ==> x % 2 == 1;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant x % 2 == 1 ==> x % 2 == 1;\nloop invariant y % 2 == 0 ==> y % 2 == 0;\nloop invariant y % 2 == 1 ==> y % 2 == 1;\nloop invariant x <= y;\nloop invariant y <= 99;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant x <= y <= 99 is neither established nor preserved.\nloop invariant x % 2 == y % 2 ==> x % 2 == 0 is partially proven to be inductive.\nloop invariant x % 2 != y % 2 ==> x % 2 == 1 is preserved but not established.\nloop invariant x % 2 == 0 ==> x % 2 == 0 is partially proven to be inductive.\nloop invariant x % 2 == 1 ==> x % 2 == 1 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> y % 2 == 0 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> y % 2 == 1 is partially proven to be inductive.\nloop invariant x <= y is partially proven to be inductive.\nloop invariant y <= 99 is partially proven to be inductive.\nAssertion x % 2 == y % 2: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  /*@\n\n\n\nloop invariant i4: x % 2 == 0 ==> x % 2 == 0;\nloop invariant i5: x % 2 == 1 ==> x % 2 == 1;\nloop invariant i6: y % 2 == 0 ==> y % 2 == 0;\nloop invariant i7: y % 2 == 1 ==> y % 2 == 1;\n\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= y;\nloop invariant x >= 0;\nloop invariant (x + 2) % 2 == (y % 2);\nloop invariant x <= 100;\nloop invariant y <= 100;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= y is partially proven to be inductive.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant (x + 2) % 2 == (y % 2) is neither established nor preserved.\nloop invariant x <= 100 is partially proven to be inductive.\nloop invariant y <= 100 is preserved but not established.\nAssertion x % 2 == y % 2: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  /*@\nloop invariant i1: 0 <= y;\nloop invariant i2: x >= 0;\n\nloop invariant i4: x <= 100;\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 1,
                    "annotations": "```\n/*@\n\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 12: unexpected token ''",
                    "houdini_error": "No annotations found"
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant (x % 2) == (y % 2);\nloop invariant 0 <= y <= 99;\nloop invariant ((x % 2) == 0 ? (x >= 2) : (x > 0));\nloop invariant ((y % 2) == 0 ? (y == 0) : (y > 0));\nloop invariant ((x % 2) == 0 ? (x == 2 * x) : (x == 2 * x - 1));\nloop invariant ((y % 2) == 0 ? (y == 2 * y) : (y == 2 * y - 1));\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is partially proven to be inductive.\nloop invariant (x % 2) == (y % 2) is preserved but not established.\nloop invariant 0 <= y <= 99 is preserved but not established.\nloop invariant ((x % 2) == 0 ? (x >= 2) : (x > 0)) is preserved but not established.\nloop invariant ((y % 2) == 0 ? (y == 0) : (y > 0)) is partially proven to be inductive.\nloop invariant ((x % 2) == 0 ? (x == 2 * x) : (x == 2 * x - 1)) is partially proven to be inductive.\nloop invariant ((y % 2) == 0 ? (y == 2 * y) : (y == 2 * y - 1)) is partially proven to be inductive.\nAssertion x % 2 == y % 2: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  /*@\n\n\n\n\n\n\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant 0 <= y <= 100000;\nloop invariant x % 2 == y % 2;\nloop invariant (x % 2) == ((y + 1) % 2);\nloop invariant (x % 2) == ((y + 2) % 2);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is partially proven to be inductive.\nloop invariant 0 <= y <= 100000 is preserved but not established.\nloop invariant x % 2 == y % 2 is preserved but not established.\nloop invariant (x % 2) == ((y + 1) % 2) is preserved but not established.\nloop invariant (x % 2) == ((y + 2) % 2) is partially proven to be inductive.\nAssertion x % 2 == y % 2: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  /*@\n\n\n\n\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant 0 <= y <= 100000;\nloop invariant (x % 2) == (y % 2);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is established but not preserved.\nloop invariant 0 <= y <= 100000 is preserved but not established.\nloop invariant (x % 2) == (y % 2) is neither established nor preserved.\nAssertion x % 2 == y % 2: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  /*@\n\n\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant x % 2 == y % 2;\nloop invariant (y % 2 == 0) ==> (x >= 2);\nloop invariant (y % 2 != 0) ==> (x >= 1);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is partially proven to be inductive.\nloop invariant x % 2 == y % 2 is preserved but not established.\nloop invariant (y % 2 == 0) ==> (x >= 2) is preserved but not established.\nloop invariant (y % 2 != 0) ==> (x >= 1) is partially proven to be inductive.\nAssertion x % 2 == y % 2: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  /*@\n\n\n\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant x % 2 == 0 ==> y % 2 == 0;\nloop invariant x % 2 == 1 ==> y % 2 == 1;\nloop invariant x >= y;\nloop invariant y >= 0;\nloop invariant y <= 99;\nloop invariant x % 2 == 0 ==> x >= 2 * y;\nloop invariant x % 2 == 1 ==> x >= 2 * y + 1;\nloop invariant x % 2 == 0 ==> x <= 2 * y + 80;\nloop invariant x % 2 == 1 ==> x <= 2 * y + 81;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is established but not preserved.\nloop invariant x % 2 == 0 ==> y % 2 == 0 is neither established nor preserved.\nloop invariant x % 2 == 1 ==> y % 2 == 1 is partially proven to be inductive.\nloop invariant x >= y is preserved but not established.\nloop invariant y >= 0 is partially proven to be inductive.\nloop invariant y <= 99 is partially proven to be inductive.\nloop invariant x % 2 == 0 ==> x >= 2 * y is partially proven to be inductive.\nloop invariant x % 2 == 1 ==> x >= 2 * y + 1 is partially proven to be inductive.\nloop invariant x % 2 == 0 ==> x <= 2 * y + 80 is established but not preserved.\nloop invariant x % 2 == 1 ==> x <= 2 * y + 81 is partially proven to be inductive.\nAssertion x % 2 == y % 2: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  /*@\n\n\nloop invariant i3: x % 2 == 1 ==> y % 2 == 1;\n\nloop invariant i5: y >= 0;\n\n\n\n\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                }
            ],
            "checker_output_for_combined_annotations": false,
            "checker_message_for_combined_annotations": "loop invariant 0 <= x <= 99 is partially proven to be inductive.\nloop invariant 0 <= y <= 99 is preserved but not established.\nloop invariant (x % 2) == (y % 2) ==> (x % 2) == 0 is partially proven to be inductive.\nloop invariant 99 - x == y % 2 is preserved but not established.\nloop invariant (y % 2) == 0 ==> (x % 2) == 0 is partially proven to be inductive.\nloop invariant (y % 2) == 1 ==> (x % 2) == 1 is partially proven to be inductive.\nloop invariant (x % 2) == (y % 2) ==> (y % 2) == 0 is partially proven to be inductive.\nloop invariant (x % 2) != (y % 2) ==> (x % 2) == 1 is partially proven to be inductive.\nloop invariant (x % 2) != (y % 2) ==> (y % 2) == 1 is partially proven to be inductive.\nloop invariant (x % 2) == 0 ==> (y % 2) == 0 is partially proven to be inductive.\nloop invariant (x % 2) == 1 ==> (y % 2) == 1 is partially proven to be inductive.\nloop invariant (x % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 is partially proven to be inductive.\nloop invariant (x % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 is partially proven to be inductive.\nloop invariant (x % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 is partially proven to be inductive.\nloop invariant (x % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 is partially proven to be inductive.\nloop invariant (x % 2) != (y % 2) ==> (x % 2) == 1 ==> (y % 2) == 0 is partially proven to be inductive.\nloop invariant (x % 2) != (y % 2) ==> (x % 2) == 0 ==> (y % 2) == 1 is partially proven to be inductive.\nloop invariant (x % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 is partially proven to be inductive.\nloop invariant (x % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 is partially proven to be inductive.\nloop invariant (x % 2) != (y % 2) ==> (x % 2) == 1 ==> (y % 2) == 0 ==> (y % 2) == 0 is partially proven to be inductive.\nloop invariant (x % 2) != (y % 2) ==> (x % 2) == 0 ==> (y % 2) == 1 ==> (y % 2) == 1 is partially proven to be inductive.\nloop invariant (x % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 is partially proven to be inductive.\nloop invariant (x % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 is partially proven to be inductive.\nloop invariant (x % 2) != (y % 2) ==> (x % 2) == 1 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 is partially proven to be inductive.\nloop invariant (x % 2) != (y % 2) ==> (x % 2) == 0 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 is partially proven to be inductive.\nloop invariant (x % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 is partially proven to be inductive.\nloop invariant (x % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 is partially proven to be inductive.\nloop invariant x % 2 == 0 ==> y % 2 == 0 is partially proven to be inductive.\nloop invariant x % 2 == 1 ==> y % 2 == 1 is partially proven to be inductive.\nloop invariant (x % 2) == (y % 2) is partially proven to be inductive.\nloop invariant y % 2 == x % 2 is partially proven to be inductive.\nloop invariant x <= y <= 99 is partially proven to be inductive.\nloop invariant x % 2 == y % 2 ==> x % 2 == 0 is partially proven to be inductive.\nloop invariant x % 2 != y % 2 ==> x % 2 == 1 is partially proven to be inductive.\nloop invariant x % 2 == 0 ==> x % 2 == 0 is partially proven to be inductive.\nloop invariant x % 2 == 1 ==> x % 2 == 1 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> y % 2 == 0 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> y % 2 == 1 is partially proven to be inductive.\nloop invariant x <= y is partially proven to be inductive.\nloop invariant y <= 99 is partially proven to be inductive.\nloop invariant 0 <= y is partially proven to be inductive.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant (x + 2) % 2 == (y % 2) is partially proven to be inductive.\nloop invariant x <= 100 is partially proven to be inductive.\nloop invariant y <= 100 is partially proven to be inductive.\nloop invariant ((x % 2) == 0 ? (x >= 2) : (x > 0)) is partially proven to be inductive.\nloop invariant ((y % 2) == 0 ? (y == 0) : (y > 0)) is partially proven to be inductive.\nloop invariant ((x % 2) == 0 ? (x == 2 * x) : (x == 2 * x - 1)) is partially proven to be inductive.\nloop invariant ((y % 2) == 0 ? (y == 2 * y) : (y == 2 * y - 1)) is partially proven to be inductive.\nloop invariant 0 <= y <= 100000 is partially proven to be inductive.\nloop invariant x % 2 == y % 2 is partially proven to be inductive.\nloop invariant (x % 2) == ((y + 1) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((y + 2) % 2) is partially proven to be inductive.\nloop invariant (y % 2 == 0) ==> (x >= 2) is partially proven to be inductive.\nloop invariant (y % 2 != 0) ==> (x >= 1) is partially proven to be inductive.\nloop invariant x >= y is partially proven to be inductive.\nloop invariant y >= 0 is partially proven to be inductive.\nloop invariant x % 2 == 0 ==> x >= 2 * y is partially proven to be inductive.\nloop invariant x % 2 == 1 ==> x >= 2 * y + 1 is partially proven to be inductive.\nloop invariant x % 2 == 0 ==> x <= 2 * y + 80 is partially proven to be inductive.\nloop invariant x % 2 == 1 ==> x <= 2 * y + 81 is partially proven to be inductive.\nAssertion x % 2 == y % 2: Partially proven",
            "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  /*@\nloop invariant i1: 0 <= x <= 99;\nloop invariant i2: 0 <= y <= 99;\nloop invariant i3: (x % 2) == (y % 2) ==> (x % 2) == 0;\nloop invariant i4: 99 - x == y % 2;\nloop invariant i5: (y % 2) == 0 ==> (x % 2) == 0;\nloop invariant i6: (y % 2) == 1 ==> (x % 2) == 1;\nloop invariant i7: (x % 2) == (y % 2) ==> (y % 2) == 0;\nloop invariant i8: (x % 2) != (y % 2) ==> (x % 2) == 1;\nloop invariant i9: (x % 2) != (y % 2) ==> (y % 2) == 1;\nloop invariant i10: (x % 2) == 0 ==> (y % 2) == 0;\nloop invariant i11: (x % 2) == 1 ==> (y % 2) == 1;\nloop invariant i12: (x % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0;\nloop invariant i13: (x % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1;\nloop invariant i14: (x % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0;\nloop invariant i15: (x % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1;\nloop invariant i16: (x % 2) != (y % 2) ==> (x % 2) == 1 ==> (y % 2) == 0;\nloop invariant i17: (x % 2) != (y % 2) ==> (x % 2) == 0 ==> (y % 2) == 1;\nloop invariant i18: (x % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0;\nloop invariant i19: (x % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1;\nloop invariant i20: (x % 2) != (y % 2) ==> (x % 2) == 1 ==> (y % 2) == 0 ==> (y % 2) == 0;\nloop invariant i21: (x % 2) != (y % 2) ==> (x % 2) == 0 ==> (y % 2) == 1 ==> (y % 2) == 1;\nloop invariant i22: (x % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0;\nloop invariant i23: (x % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1;\nloop invariant i24: (x % 2) != (y % 2) ==> (x % 2) == 1 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0;\nloop invariant i25: (x % 2) != (y % 2) ==> (x % 2) == 0 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1;\nloop invariant i26: (x % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0;\nloop invariant i27: (x % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1;\nloop invariant i28: x % 2 == 0 ==> y % 2 == 0;\nloop invariant i29: x % 2 == 1 ==> y % 2 == 1;\nloop invariant i30: (x % 2) == (y % 2);\nloop invariant i31: y % 2 == x % 2;\nloop invariant i32: x <= y <= 99;\nloop invariant i33: x % 2 == y % 2 ==> x % 2 == 0;\nloop invariant i34: x % 2 != y % 2 ==> x % 2 == 1;\nloop invariant i35: x % 2 == 0 ==> x % 2 == 0;\nloop invariant i36: x % 2 == 1 ==> x % 2 == 1;\nloop invariant i37: y % 2 == 0 ==> y % 2 == 0;\nloop invariant i38: y % 2 == 1 ==> y % 2 == 1;\nloop invariant i39: x <= y;\nloop invariant i40: y <= 99;\nloop invariant i41: 0 <= y;\nloop invariant i42: x >= 0;\nloop invariant i43: (x + 2) % 2 == (y % 2);\nloop invariant i44: x <= 100;\nloop invariant i45: y <= 100;\nloop invariant i46: ((x % 2) == 0 ? (x >= 2) : (x > 0));\nloop invariant i47: ((y % 2) == 0 ? (y == 0) : (y > 0));\nloop invariant i48: ((x % 2) == 0 ? (x == 2 * x) : (x == 2 * x - 1));\nloop invariant i49: ((y % 2) == 0 ? (y == 2 * y) : (y == 2 * y - 1));\nloop invariant i50: 0 <= y <= 100000;\nloop invariant i51: x % 2 == y % 2;\nloop invariant i52: (x % 2) == ((y + 1) % 2);\nloop invariant i53: (x % 2) == ((y + 2) % 2);\nloop invariant i54: (y % 2 == 0) ==> (x >= 2);\nloop invariant i55: (y % 2 != 0) ==> (x >= 1);\nloop invariant i56: x >= y;\nloop invariant i57: y >= 0;\nloop invariant i58: x % 2 == 0 ==> x >= 2 * y;\nloop invariant i59: x % 2 == 1 ==> x >= 2 * y + 1;\nloop invariant i60: x % 2 == 0 ==> x <= 2 * y + 80;\nloop invariant i61: x % 2 == 1 ==> x <= 2 * y + 81;\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
            "combined_annotation_num_solver_calls": 17,
            "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  /*@\n\n\n\n\nloop invariant i5: (y % 2) == 0 ==> (x % 2) == 0;\n\n\n\nloop invariant i9: (x % 2) != (y % 2) ==> (y % 2) == 1;\n\nloop invariant i11: (x % 2) == 1 ==> (y % 2) == 1;\nloop invariant i12: (x % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0;\nloop invariant i13: (x % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1;\nloop invariant i14: (x % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0;\nloop invariant i15: (x % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1;\nloop invariant i16: (x % 2) != (y % 2) ==> (x % 2) == 1 ==> (y % 2) == 0;\nloop invariant i17: (x % 2) != (y % 2) ==> (x % 2) == 0 ==> (y % 2) == 1;\nloop invariant i18: (x % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0;\nloop invariant i19: (x % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1;\nloop invariant i20: (x % 2) != (y % 2) ==> (x % 2) == 1 ==> (y % 2) == 0 ==> (y % 2) == 0;\nloop invariant i21: (x % 2) != (y % 2) ==> (x % 2) == 0 ==> (y % 2) == 1 ==> (y % 2) == 1;\nloop invariant i22: (x % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0;\nloop invariant i23: (x % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1;\nloop invariant i24: (x % 2) != (y % 2) ==> (x % 2) == 1 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0;\nloop invariant i25: (x % 2) != (y % 2) ==> (x % 2) == 0 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1;\nloop invariant i26: (x % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0;\nloop invariant i27: (x % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1;\n\nloop invariant i29: x % 2 == 1 ==> y % 2 == 1;\n\n\n\n\n\nloop invariant i35: x % 2 == 0 ==> x % 2 == 0;\nloop invariant i36: x % 2 == 1 ==> x % 2 == 1;\nloop invariant i37: y % 2 == 0 ==> y % 2 == 0;\nloop invariant i38: y % 2 == 1 ==> y % 2 == 1;\n\n\nloop invariant i41: 0 <= y;\nloop invariant i42: x >= 0;\n\nloop invariant i44: x <= 100;\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i57: y >= 0;\n\n\n\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
            "checker_output_after_prune": false
        },
        {
            "file": "../dataset/loop_invariants/accelerating_invariant_generation/crafted/overflow_safe1.c",
            "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 10;\n\n  while (x >= 10) {\n    x += 2;\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
            "success": false,
            "annotation_blocks": [
                "```\n/*@\nloop invariant x >= 10;\nloop invariant x <= 20;\nloop invariant x % 2 == 0;\nloop invariant x >= 10 ==> x % 2 == 0;\nloop invariant x <= 20 ==> x % 2 == 0;\nloop invariant x >= 10 && x % 2 == 0 ==> x >= 10;\nloop invariant x <= 20 && x % 2 == 0 ==> x <= 20;\nloop invariant x % 2 == 0 ==> x >= 10 && x <= 20;\nloop invariant x >= 10 && x <= 20 ==> x % 2 == 0;\nloop invariant x >= 10 && x <= 20 ==> x % 2 == 0;\nloop invariant x % 2 == 0 ==> x >= 10 && x <= 20;\nloop invariant x >= 10 && x % 2 == 0 ==> x <= 20;\nloop invariant x % 2 == 0 ==> x >= 10 && x <= 20;\nloop invariant x >= 10 && x <= 20 ==> x % 2 == 0;\n*/\n```",
                "```\n/*@\nloop invariant x <= 10;\nloop invariant x >= 10;\nloop invariant x % 2 == 0 ==> x >= 10;\nloop invariant !(x % 2 == 0) ==> x < 10;\nloop invariant x % 2 == 0 ==> x <= 10;\nloop invariant !(x % 2 == 0) ==> x >= 10;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant !(x % 2 == 0) ==> x % 2 != 0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant !(x % 2 == 0) ==> x % 2 != 0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant !(x % 2 == 0) ==> x % 2 != 0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant !(x % 2 == 0) ==> x % 2 != 0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant !(x % 2 == 0) ==> x % 2 != 0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant !(x % 2 == 0) ==> x % 2 != 0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant !(x % 2 == 0) ==> x % 2 != 0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant !(x % 2 == 0) ==> x % 2 != 0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant !(x % 2 == 0) ==> x % 2 != 0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant !(x % 2 == 0) ==> x % 2 != 0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant !(x % 2 == 0) ==> x % 2 != 0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant !(x % 2 == 0) ==> x % 2 != 0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant !(x % 2 == 0) ==> x % 2 != 0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant !(x % 2 == 0) ==> x % 2 != 0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant !(x % 2 == 0) ==> x % 2 != 0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant !(x % 2 == 0) ==> x % 2 != 0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant !(x % 2 == 0) ==> x % 2 != 0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant !(x % 2 == 0) ==> x % 2 != 0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant !(x % 2 == 0) ==> x % 2 != 0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant !(x % 2 == 0) ==> x % 2 != 0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant !(x % 2 == 0) ==> x % 2 != 0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant !(x % 2 == 0) ==> x % 2 != 0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant !(x % 2 == 0) ==> x % 2 != 0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant !(x % 2 == 0) ==> x % 2 != 0;\n*/\n```",
                "```\n/*@\nloop invariant 10 <= x;\nloop invariant x < 12;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= 10;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 2147483647;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 10;\nloop invariant x % 2 == 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x;\nloop invariant x >= 10;\nloop invariant (x % 2 == 0);\nloop invariant x <= 2147483647;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 10;\nloop invariant x % 2 == 0 ==> x >= 2;\nloop invariant !(x % 2) ==> x >= 10;\nloop invariant (x % 2) ==> x >= 12;\nloop invariant x % 2 == 0 ==> x >= 10;\nloop invariant x % 2 != 0 ==> x >= 11;\nloop invariant !(x % 2) ==> x >= 10;\nloop invariant (x % 2) ==> x >= 12;\nloop invariant x % 2 == 0 ==> x >= 10;\nloop invariant x % 2 != 0 ==> x >= 11;\nloop invariant !(x % 2) ==> x >= 10;\nloop invariant (x % 2) ==> x >= 12;\nloop invariant x % 2 == 0 ==> x >= 10;\nloop invariant x % 2 != 0 ==> x >= 11;\nloop invariant !(x % 2) ==> x >= 10;\nloop invariant (x % 2) ==> x >= 12;\nloop invariant x % 2 == 0 ==> x >= 10;\nloop invariant x % 2 != 0 ==> x >= 11;\nloop invariant !(x % 2) ==> x >= 10;\nloop invariant (x % 2) ==> x >= 12;\nloop invariant x % 2 == 0 ==> x >= 10;\nloop invariant x % 2 != 0 ==> x >= 11;\nloop invariant !(x % 2) ==> x >= 10;\nloop invariant (x % 2) ==> x >= 12;\nloop invariant x % 2 == 0 ==> x >= 10;\nloop invariant x % 2 != 0 ==> x >= 11;\nloop invariant !(x % 2) ==> x >= 10;\nloop invariant (x % 2) ==> x >= 12;\nloop invariant x % 2 == 0 ==> x >= 10;\nloop invariant x % 2 != 0 ==> x >= 11;\nloop invariant !(x % 2) ==> x >= 10;\nloop invariant (x % 2) ==> x >= 12;\nloop invariant x % 2 == 0 ==> x >= 10;\nloop invariant x % 2 != 0 ==> x >= 11;\nloop invariant !(x % 2) ==> x >= 10;\nloop invariant (x % 2) ==> x >= 12;\nloop invariant x % 2 == 0 ==> x >= 10;\nloop invariant x % 2 != 0 ==> x >= 11;\nloop invariant !(x % 2) ==> x >= 10;\nloop invariant (x % 2) ==> x >= 12;\nloop invariant x % 2 == 0 ==> x >= 10;\nloop invariant x % 2 != 0 ==> x >= 11;\nloop invariant !(x % 2) ==> x >= 10;\nloop invariant (x % 2) ==> x >= 12;\nloop invariant x % 2 == 0 ==> x >= 10;\nloop invariant x % 2 != 0 ==> x >= 11;\nloop invariant !(x % 2) ==> x >= 10;\nloop invariant (x % 2) ==> x >= 12;\nloop invariant x % 2 == 0 ==> x >= 10;\nloop invariant x % 2 != 0 ==> x >= 11;\nloop invariant !(x % 2) ==> x >= 10;\nloop invariant (x % 2) ==> x >= 12;\nloop invariant x % 2 == 0 ==> x >= 10;\nloop invariant x % 2 != 0 ==> x >= 11;\nloop invariant !(x % 2) ==> x >= 10;\nloop invariant (x % 2) ==> x >= 12;\nloop invariant x % 2 == 0 ==> x >= 10;\nloop invariant x % 2 != 0 ==> x >= 11;\nloop invariant !(x % 2) ==> x >= 10;\nloop invariant (x % 2) ==> x >= 12;\nloop invariant x % 2 == 0 ==> x >= 10;\nloop invariant x % 2 != 0 ==> x >= 11;\nloop invariant !(x % 2) ==> x >= 10;\nloop invariant (x % 2) ==> x >= 12;\n*/\n```",
                "```\n/*@\nloop invariant 10 <= x <= 20;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 10;\nloop invariant x % 2 == 0 ==> x >= 10;\nloop invariant x % 2 != 0 ==> x < 10;\nloop invariant x % 2 == 0 ==> x >= 10 ==> x <= 12;\nloop invariant x % 2 == 0 ==> x >= 10 ==> x % 2 == 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 10;\nloop invariant (x % 2 == 0);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x;\nloop invariant x <= UINT_MAX;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 2147483647;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= 12;\nloop invariant x <= 2147483646;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 20;\nloop invariant (x % 2) == 0;\n*/\n```"
            ],
            "completions": [
                {
                    "num_solver_calls": 8,
                    "annotations": "```\n/*@\nloop invariant x >= 10;\nloop invariant x <= 20;\nloop invariant x % 2 == 0;\nloop invariant x >= 10 ==> x % 2 == 0;\nloop invariant x <= 20 ==> x % 2 == 0;\nloop invariant x >= 10 && x % 2 == 0 ==> x >= 10;\nloop invariant x <= 20 && x % 2 == 0 ==> x <= 20;\nloop invariant x % 2 == 0 ==> x >= 10 && x <= 20;\nloop invariant x >= 10 && x <= 20 ==> x % 2 == 0;\nloop invariant x >= 10 && x <= 20 ==> x % 2 == 0;\nloop invariant x % 2 == 0 ==> x >= 10 && x <= 20;\nloop invariant x >= 10 && x % 2 == 0 ==> x <= 20;\nloop invariant x % 2 == 0 ==> x >= 10 && x <= 20;\nloop invariant x >= 10 && x <= 20 ==> x % 2 == 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant x >= 10 is partially proven to be inductive.\nloop invariant x <= 20 is established but not preserved.\nloop invariant x % 2 == 0 is partially proven to be inductive.\nloop invariant x >= 10 ==> x % 2 == 0 is partially proven to be inductive.\nloop invariant x <= 20 ==> x % 2 == 0 is partially proven to be inductive.\nloop invariant x >= 10 && x % 2 == 0 ==> x >= 10 is partially proven to be inductive.\nloop invariant x <= 20 && x % 2 == 0 ==> x <= 20 is partially proven to be inductive.\nloop invariant x % 2 == 0 ==> x >= 10 && x <= 20 is partially proven to be inductive.\nloop invariant x >= 10 && x <= 20 ==> x % 2 == 0 is partially proven to be inductive.\nloop invariant x >= 10 && x % 2 == 0 ==> x <= 20 is partially proven to be inductive.\nAssertion x % 2 == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 10;\n\n  /*@\n\n\n\n\n\nloop invariant i6: x >= 10 && x % 2 == 0 ==> x >= 10;\nloop invariant i7: x <= 20 && x % 2 == 0 ==> x <= 20;\n\n\n\n*/\nwhile (x >= 10) {\n    x += 2;\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 6,
                    "annotations": "```\n/*@\nloop invariant x <= 10;\nloop invariant x >= 10;\nloop invariant x % 2 == 0 ==> x >= 10;\nloop invariant !(x % 2 == 0) ==> x < 10;\nloop invariant x % 2 == 0 ==> x <= 10;\nloop invariant !(x % 2 == 0) ==> x >= 10;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant !(x % 2 == 0) ==> x % 2 != 0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant !(x % 2 == 0) ==> x % 2 != 0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant !(x % 2 == 0) ==> x % 2 != 0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant !(x % 2 == 0) ==> x % 2 != 0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant !(x % 2 == 0) ==> x % 2 != 0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant !(x % 2 == 0) ==> x % 2 != 0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant !(x % 2 == 0) ==> x % 2 != 0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant !(x % 2 == 0) ==> x % 2 != 0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant !(x % 2 == 0) ==> x % 2 != 0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant !(x % 2 == 0) ==> x % 2 != 0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant !(x % 2 == 0) ==> x % 2 != 0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant !(x % 2 == 0) ==> x % 2 != 0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant !(x % 2 == 0) ==> x % 2 != 0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant !(x % 2 == 0) ==> x % 2 != 0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant !(x % 2 == 0) ==> x % 2 != 0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant !(x % 2 == 0) ==> x % 2 != 0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant !(x % 2 == 0) ==> x % 2 != 0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant !(x % 2 == 0) ==> x % 2 != 0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant !(x % 2 == 0) ==> x % 2 != 0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant !(x % 2 == 0) ==> x % 2 != 0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant !(x % 2 == 0) ==> x % 2 != 0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant !(x % 2 == 0) ==> x % 2 != 0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant !(x % 2 == 0) ==> x % 2 != 0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant !(x % 2 == 0) ==> x % 2 != 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant x <= 10 is established but not preserved.\nloop invariant x >= 10 is partially proven to be inductive.\nloop invariant x % 2 == 0 ==> x >= 10 is partially proven to be inductive.\nloop invariant !(x % 2 == 0) ==> x < 10 is partially proven to be inductive.\nloop invariant x % 2 == 0 ==> x <= 10 is partially proven to be inductive.\nloop invariant !(x % 2 == 0) ==> x >= 10 is partially proven to be inductive.\nloop invariant x % 2 == 0 ==> x % 2 == 0 is partially proven to be inductive.\nloop invariant !(x % 2 == 0) ==> x % 2 != 0 is partially proven to be inductive.\nAssertion x % 2 == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 10;\n\n  /*@\n\n\n\n\n\n\nloop invariant i7: x % 2 == 0 ==> x % 2 == 0;\nloop invariant i8: !(x % 2 == 0) ==> x % 2 != 0;\n*/\nwhile (x >= 10) {\n    x += 2;\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 10 <= x;\nloop invariant x < 12;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 10 <= x is partially proven to be inductive.\nloop invariant x < 12 is established but not preserved.\nAssertion x % 2 == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 10;\n\n  /*@\n\n\n*/\nwhile (x >= 10) {\n    x += 2;\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= 10;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 10 is established but not preserved.\nloop invariant x % 2 == 0 is partially proven to be inductive.\nloop invariant x >= 10 is partially proven to be inductive.\nAssertion x % 2 == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 10;\n\n  /*@\n\n\n\n*/\nwhile (x >= 10) {\n    x += 2;\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 2147483647;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 2147483647 is established but not preserved.\nAssertion x % 2 == 0: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 10;\n\n  /*@\n\n*/\nwhile (x >= 10) {\n    x += 2;\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 10;\nloop invariant x % 2 == 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 10 is established but not preserved.\nloop invariant x % 2 == 0 is partially proven to be inductive.\nAssertion x % 2 == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 10;\n\n  /*@\n\n\n*/\nwhile (x >= 10) {\n    x += 2;\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= x;\nloop invariant x >= 10;\nloop invariant (x % 2 == 0);\nloop invariant x <= 2147483647;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x is partially proven to be inductive.\nloop invariant x >= 10 is partially proven to be inductive.\nloop invariant (x % 2 == 0) is partially proven to be inductive.\nloop invariant x <= 2147483647 is established but not preserved.\nAssertion x % 2 == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 10;\n\n  /*@\nloop invariant i1: 0 <= x;\n\n\n\n*/\nwhile (x >= 10) {\n    x += 2;\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 12: unbound logic variable y. Ignoring loop annotation",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 10;\n\n  /*@\n\n\n*/\nwhile (x >= 10) {\n    x += 2;\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 10;\nloop invariant x % 2 == 0 ==> x >= 2;\nloop invariant !(x % 2) ==> x >= 10;\nloop invariant (x % 2) ==> x >= 12;\nloop invariant x % 2 == 0 ==> x >= 10;\nloop invariant x % 2 != 0 ==> x >= 11;\nloop invariant !(x % 2) ==> x >= 10;\nloop invariant (x % 2) ==> x >= 12;\nloop invariant x % 2 == 0 ==> x >= 10;\nloop invariant x % 2 != 0 ==> x >= 11;\nloop invariant !(x % 2) ==> x >= 10;\nloop invariant (x % 2) ==> x >= 12;\nloop invariant x % 2 == 0 ==> x >= 10;\nloop invariant x % 2 != 0 ==> x >= 11;\nloop invariant !(x % 2) ==> x >= 10;\nloop invariant (x % 2) ==> x >= 12;\nloop invariant x % 2 == 0 ==> x >= 10;\nloop invariant x % 2 != 0 ==> x >= 11;\nloop invariant !(x % 2) ==> x >= 10;\nloop invariant (x % 2) ==> x >= 12;\nloop invariant x % 2 == 0 ==> x >= 10;\nloop invariant x % 2 != 0 ==> x >= 11;\nloop invariant !(x % 2) ==> x >= 10;\nloop invariant (x % 2) ==> x >= 12;\nloop invariant x % 2 == 0 ==> x >= 10;\nloop invariant x % 2 != 0 ==> x >= 11;\nloop invariant !(x % 2) ==> x >= 10;\nloop invariant (x % 2) ==> x >= 12;\nloop invariant x % 2 == 0 ==> x >= 10;\nloop invariant x % 2 != 0 ==> x >= 11;\nloop invariant !(x % 2) ==> x >= 10;\nloop invariant (x % 2) ==> x >= 12;\nloop invariant x % 2 == 0 ==> x >= 10;\nloop invariant x % 2 != 0 ==> x >= 11;\nloop invariant !(x % 2) ==> x >= 10;\nloop invariant (x % 2) ==> x >= 12;\nloop invariant x % 2 == 0 ==> x >= 10;\nloop invariant x % 2 != 0 ==> x >= 11;\nloop invariant !(x % 2) ==> x >= 10;\nloop invariant (x % 2) ==> x >= 12;\nloop invariant x % 2 == 0 ==> x >= 10;\nloop invariant x % 2 != 0 ==> x >= 11;\nloop invariant !(x % 2) ==> x >= 10;\nloop invariant (x % 2) ==> x >= 12;\nloop invariant x % 2 == 0 ==> x >= 10;\nloop invariant x % 2 != 0 ==> x >= 11;\nloop invariant !(x % 2) ==> x >= 10;\nloop invariant (x % 2) ==> x >= 12;\nloop invariant x % 2 == 0 ==> x >= 10;\nloop invariant x % 2 != 0 ==> x >= 11;\nloop invariant !(x % 2) ==> x >= 10;\nloop invariant (x % 2) ==> x >= 12;\nloop invariant x % 2 == 0 ==> x >= 10;\nloop invariant x % 2 != 0 ==> x >= 11;\nloop invariant !(x % 2) ==> x >= 10;\nloop invariant (x % 2) ==> x >= 12;\nloop invariant x % 2 == 0 ==> x >= 10;\nloop invariant x % 2 != 0 ==> x >= 11;\nloop invariant !(x % 2) ==> x >= 10;\nloop invariant (x % 2) ==> x >= 12;\nloop invariant x % 2 == 0 ==> x >= 10;\nloop invariant x % 2 != 0 ==> x >= 11;\nloop invariant !(x % 2) ==> x >= 10;\nloop invariant (x % 2) ==> x >= 12;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 10 is established but not preserved.\nloop invariant x % 2 == 0 ==> x >= 2 is partially proven to be inductive.\nloop invariant !(x % 2) ==> x >= 10 is partially proven to be inductive.\nloop invariant (x % 2) ==> x >= 12 is partially proven to be inductive.\nloop invariant x % 2 == 0 ==> x >= 10 is partially proven to be inductive.\nloop invariant x % 2 != 0 ==> x >= 11 is partially proven to be inductive.\nAssertion x % 2 == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 10;\n\n  /*@\n\n\n\n\n\n\n*/\nwhile (x >= 10) {\n    x += 2;\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 10 <= x <= 20;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 10 <= x <= 20 is established but not preserved.\nAssertion x % 2 == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 10;\n\n  /*@\n\n*/\nwhile (x >= 10) {\n    x += 2;\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 10;\nloop invariant x % 2 == 0 ==> x >= 10;\nloop invariant x % 2 != 0 ==> x < 10;\nloop invariant x % 2 == 0 ==> x >= 10 ==> x <= 12;\nloop invariant x % 2 == 0 ==> x >= 10 ==> x % 2 == 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 10 is established but not preserved.\nloop invariant x % 2 == 0 ==> x >= 10 is partially proven to be inductive.\nloop invariant x % 2 != 0 ==> x < 10 is partially proven to be inductive.\nloop invariant x % 2 == 0 ==> x >= 10 ==> x <= 12 is partially proven to be inductive.\nloop invariant x % 2 == 0 ==> x >= 10 ==> x % 2 == 0 is partially proven to be inductive.\nAssertion x % 2 == 0: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 10;\n\n  /*@\n\n\n\n\nloop invariant i5: x % 2 == 0 ==> x >= 10 ==> x % 2 == 0;\n*/\nwhile (x >= 10) {\n    x += 2;\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 10;\nloop invariant (x % 2 == 0);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 10 is established but not preserved.\nloop invariant (x % 2 == 0) is partially proven to be inductive.\nAssertion x % 2 == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 10;\n\n  /*@\n\n\n*/\nwhile (x >= 10) {\n    x += 2;\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x;\nloop invariant x <= UINT_MAX;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x is partially proven to be inductive.\nloop invariant x <= UINT_MAX is partially proven to be inductive.\nloop invariant x >= 10 is established but not preserved.\nloop invariant x % 2 == 0 is established but not preserved.\nAssertion x % 2 == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 10;\n\n  /*@\nloop invariant i1: 0 <= x;\nloop invariant i2: x <= UINT_MAX;\n\n\n*/\nwhile (x >= 10) {\n    x += 2;\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 2147483647;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= 12;\nloop invariant x <= 2147483646;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 2147483647 is partially proven to be inductive.\nloop invariant x >= 10 is partially proven to be inductive.\nloop invariant x % 2 == 0 is partially proven to be inductive.\nloop invariant x >= 12 is preserved but not established.\nloop invariant x <= 2147483646 is partially proven to be inductive.\nAssertion x % 2 == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 10;\n\n  /*@\n\n\n\n\n\n*/\nwhile (x >= 10) {\n    x += 2;\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 20;\nloop invariant (x % 2) == 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 20 is established but not preserved.\nloop invariant (x % 2) == 0 is partially proven to be inductive.\nAssertion x % 2 == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 10;\n\n  /*@\n\n\n*/\nwhile (x >= 10) {\n    x += 2;\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                }
            ],
            "checker_output_for_combined_annotations": false,
            "checker_message_for_combined_annotations": "Annotation error on line 36: unbound logic variable y. Ignoring loop annotation",
            "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 10;\n\n  /*@\nloop invariant i1: x >= 10;\nloop invariant i2: x <= 20;\nloop invariant i3: x % 2 == 0;\nloop invariant i4: x >= 10 ==> x % 2 == 0;\nloop invariant i5: x <= 20 ==> x % 2 == 0;\nloop invariant i6: x >= 10 && x % 2 == 0 ==> x >= 10;\nloop invariant i7: x <= 20 && x % 2 == 0 ==> x <= 20;\nloop invariant i8: x % 2 == 0 ==> x >= 10 && x <= 20;\nloop invariant i9: x >= 10 && x <= 20 ==> x % 2 == 0;\nloop invariant i10: x >= 10 && x % 2 == 0 ==> x <= 20;\nloop invariant i11: x <= 10;\nloop invariant i12: x % 2 == 0 ==> x >= 10;\nloop invariant i13: !(x % 2 == 0) ==> x < 10;\nloop invariant i14: x % 2 == 0 ==> x <= 10;\nloop invariant i15: !(x % 2 == 0) ==> x >= 10;\nloop invariant i16: x % 2 == 0 ==> x % 2 == 0;\nloop invariant i17: !(x % 2 == 0) ==> x % 2 != 0;\nloop invariant i18: 10 <= x;\nloop invariant i19: x < 12;\nloop invariant i20: 0 <= x <= 10;\nloop invariant i21: 0 <= x <= 2147483647;\nloop invariant i22: 0 <= x;\nloop invariant i23: (x % 2 == 0);\nloop invariant i24: x <= 2147483647;\nloop invariant i25: 0 <= x <= 100000;\nloop invariant i26: x >= (1 + (y - 1) * y / 2);\nloop invariant i27: x % 2 == 0 ==> x >= 2;\nloop invariant i28: !(x % 2) ==> x >= 10;\nloop invariant i29: (x % 2) ==> x >= 12;\nloop invariant i30: x % 2 != 0 ==> x >= 11;\nloop invariant i31: 10 <= x <= 20;\nloop invariant i32: x % 2 != 0 ==> x < 10;\nloop invariant i33: x % 2 == 0 ==> x >= 10 ==> x <= 12;\nloop invariant i34: x % 2 == 0 ==> x >= 10 ==> x % 2 == 0;\nloop invariant i35: x <= UINT_MAX;\nloop invariant i36: x >= 12;\nloop invariant i37: x <= 2147483646;\nloop invariant i38: 0 <= x <= 20;\nloop invariant i39: (x % 2) == 0;\n*/\nwhile (x >= 10) {\n    x += 2;\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
            "combined_annotation_num_solver_calls": 24,
            "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 10;\n\n  /*@\n\n\n\n\n\nloop invariant i6: x >= 10 && x % 2 == 0 ==> x >= 10;\nloop invariant i7: x <= 20 && x % 2 == 0 ==> x <= 20;\n\n\n\n\n\n\n\n\nloop invariant i16: x % 2 == 0 ==> x % 2 == 0;\nloop invariant i17: !(x % 2 == 0) ==> x % 2 != 0;\n\n\n\n\nloop invariant i22: 0 <= x;\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i34: x % 2 == 0 ==> x >= 10 ==> x % 2 == 0;\nloop invariant i35: x <= UINT_MAX;\n\n\n\n\n*/\nwhile (x >= 10) {\n    x += 2;\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
            "checker_output_after_prune": false
        },
        {
            "file": "../dataset/loop_invariants/code2inv/113.c",
            "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  while ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
            "success": false,
            "annotation_blocks": [
                "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn >= i;\nloop invariant n != 0 ==> sn == n;\nloop invariant n == 0 ==> sn == 0;\nloop invariant i == n ==> sn == n;\nloop invariant i < n ==> sn < n;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= sn <= n;\nloop invariant 0 <= sn <= i;\nloop invariant 0 <= sn <= n - (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= n;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= sn <= n;\nloop invariant sn == (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant i == (sn + 1);\nloop invariant i > 0;\nloop invariant i <= n;\nloop invariant sn == (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant i == (sn + 1);\nloop invariant i > 0;\nloop invariant i <= n;\nloop invariant sn == (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant i == (sn + 1);\nloop invariant i > 0;\nloop invariant i <= n;\nloop invariant sn == (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant i == (sn + 1);\nloop invariant i > 0;\nloop invariant i <= n;\nloop invariant sn == (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant i == (sn + 1);\nloop invariant i > 0;\nloop invariant i <= n;\nloop invariant sn == (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant i == (sn + 1);\nloop invariant i > 0;\nloop invariant i <= n;\nloop invariant sn == (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant i == (sn + 1);\nloop invariant i > 0;\nloop invariant i <= n;\nloop invariant sn == (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant i == (sn + 1);\nloop invariant i > 0;\nloop invariant i <= n;\nloop invariant sn == (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant i == (sn + 1);\nloop invariant i > 0;\nloop invariant i <= n;\nloop invariant sn == (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant i == (sn + 1);\nloop invariant i > 0;\nloop invariant i <= n;\nloop invariant sn == (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant i == (sn + 1);\nloop invariant i > 0;\nloop invariant i <= n;\nloop invariant sn == (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant i == (sn + 1);\nloop invariant i > 0;\nloop invariant i <= n;\nloop invariant sn == (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant i == (sn + 1);\nloop invariant i > 0;\nloop invariant i <= n;\nloop invariant sn == (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant i == (sn + 1);\nloop invariant i > 0;\nloop invariant i <= n;\nloop invariant sn == (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant i == (sn + 1);\nloop invariant i > 0;\nloop invariant i <= n;\nloop invariant sn == (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant i == (sn + 1);\nloop invariant i > 0;\nloop invariant i <= n;\nloop invariant sn == (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant i == (sn + 1);\nloop invariant i > 0;\nloop invariant i <= n;\nloop invariant sn == (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant i == (sn + 1);\nloop invariant i > 0;\nloop invariant i <= n;\nloop invariant sn == (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant i == (sn + 1);\nloop invariant i > 0;\nloop invariant i <= n;\nloop invariant sn == (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant i == (sn + 1);\nloop invariant i > 0;\nloop invariant i <= n;\nloop invariant sn == (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant i == (sn + 1);\nloop invariant i > 0;\nloop invariant i <= n;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn == i - 1;\n*/\n```",
                "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant sn == (i - 1);\nloop invariant n >= 0;\nloop invariant 1 <= i <= n;\nloop invariant sn == (i - 1);\nloop invariant n >= 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= n;\nloop invariant 0 <= i <= n;\nloop invariant 0 <= sn <= n;\nloop invariant sn == (i - 1);\nloop invariant 1 <= i <= n ==> sn == (i - 1);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= sn <= n;\nloop invariant sn == i - 1;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= sn <= n;\nloop invariant i == sn + 1;\nloop invariant i >= 1;\nloop invariant n >= 0;\nloop invariant n == i - 1;\nloop invariant sn == i - 1;\nloop invariant sn == n - (i - 1);\nloop invariant sn == n - i + 1;\nloop invariant sn == n - i + i;\nloop invariant sn == n;\nloop invariant (sn == n) ==> ((n >= 0) && (i == n + 1));\nloop invariant (sn == n) ==> ((sn >= 0) && (i == n + 1));\nloop invariant (sn == n) ==> ((sn == n) && (i == n + 1));\nloop invariant (sn == n) ==> (sn == n);\nloop invariant (sn == n) ==> (i == n + 1);\nloop invariant (sn == n) ==> (sn == i - 1);\nloop invariant (sn == n) ==> (sn == n - i + 1);\nloop invariant (sn == n) ==> (sn == n - (i - 1));\nloop invariant (sn == n) ==> (sn == n - i + i);\nloop invariant (sn == n) ==> (sn == n);\nloop invariant (sn == n) ==> (i == n + 1);\nloop invariant (sn == n) ==> (sn == i - 1);\nloop invariant (sn == n) ==> (sn == n - i + 1);\nloop invariant (sn == n) ==> (sn == n - (i - 1));\nloop invariant (sn == n) ==> (sn == n - i + i);\nloop invariant (sn == n) ==> (sn == n);\nloop invariant (sn == n) ==> (i == n + 1);\nloop invariant (sn == n) ==> (sn == i - 1);\nloop invariant (sn == n) ==> (sn == n - i + 1);\nloop invariant (sn == n) ==> (sn == n - (i - 1));\nloop invariant (sn == n) ==> (sn == n - i + i);\nloop invariant (sn == n) ==> (sn == n);\nloop invariant (sn == n) ==> (i == n + 1);\nloop invariant (sn == n) ==> (sn == i - 1);\nloop invariant (sn == n) ==> (sn == n - i + 1);\nloop invariant (sn == n) ==> (sn == n - (i - 1));\nloop invariant (sn == n) ==> (sn == n - i + i);\nloop invariant (sn == n) ==> (sn == n);\nloop invariant (sn == n) ==> (i == n + 1);\nloop invariant (sn == n) ==> (sn == i - 1);\nloop invariant (sn == n) ==> (sn == n - i + 1);\nloop invariant (sn == n) ==> (sn == n - (i - 1));\nloop invariant (sn == n) ==> (sn == n - i + i);\nloop invariant (sn == n) ==> (sn == n);\nloop invariant (sn == n) ==> (i == n + 1);\nloop invariant (sn == n) ==> (sn == i - 1);\nloop invariant (sn == n) ==> (sn == n - i + 1);\nloop invariant (sn == n) ==> (sn == n - (i - 1));\nloop invariant (sn == n) ==> (sn == n - i + i);\nloop invariant (sn == n) ==> (sn == n);\nloop invariant (sn == n) ==> (i == n + 1);\nloop invariant (sn == n) ==> (sn == i - 1);\nloop invariant (sn == n) ==> (sn == n - i + 1);\nloop invariant (sn == n) ==> (sn == n - (i - 1));\nloop invariant (sn == n) ==> (sn == n - i + i);\nloop invariant (sn == n) ==> (sn == n);\nloop invariant (sn == n) ==> (i == n + 1);\nloop invariant (sn == n) ==> (sn == i - 1);\nloop invariant (sn == n) ==> (sn == n - i + 1);\nloop invariant (sn == n) ==> (sn == n - (i - 1));\nloop invariant (sn == n) ==> (sn == n - i + i);\nloop invariant (sn == n) ==> (sn == n);\nloop invariant (sn == n) ==> (i == n + 1);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn >= 0;\nloop invariant sn == (i - 1);\nloop invariant sn >= (i - 1);\nloop invariant sn <= (i - 1);\nloop invariant (sn == (i - 1)) ==> (sn == (i - 1));\n*/\n```",
                "```\n/*@\nloop invariant ( 1 <= i <= n );\nloop invariant ( sn == (i - 1) );\n*/\n```",
                "```\n/*@\nloop invariant 1 <= i <= n + 1;\nloop invariant i >= 1;\nloop invariant i <= n + 1;\nloop invariant sn >= 0;\nloop invariant sn <= n;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= sn <= n;\nloop invariant 0 <= i <= n;\nloop invariant sn == (n - (n - i));\n*/\n```",
                "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn >= i - 1;\nloop invariant sn <= i;\nloop invariant sn == i - 1 ==> i == n + 1;\nloop invariant sn == i ==> i <= n + 1;\nloop invariant 1 <= i <= n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn >= i - 1;\nloop invariant sn <= i;\nloop invariant sn == i - 1 ==> i == n + 1;\nloop invariant sn == i ==> i <= n + 1;\n*/\n```",
                "```\n/*@\nloop invariant i1;\nloop invariant i2;\n*/\n```",
                "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant 0 <= sn <= n;\nloop invariant sn == i - 1;\n*/\n```"
            ],
            "completions": [
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn >= i;\nloop invariant n != 0 ==> sn == n;\nloop invariant n == 0 ==> sn == 0;\nloop invariant i == n ==> sn == n;\nloop invariant i < n ==> sn < n;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= n is preserved but not established.\nloop invariant sn >= i is preserved but not established.\nloop invariant n != 0 ==> sn == n is partially proven to be inductive.\nloop invariant n == 0 ==> sn == 0 is partially proven to be inductive.\nloop invariant i == n ==> sn == n is partially proven to be inductive.\nloop invariant i < n ==> sn < n is partially proven to be inductive.\nAssertion sn == n: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\n\n\n\n\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= sn <= n;\nloop invariant 0 <= sn <= i;\nloop invariant 0 <= sn <= n - (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= n;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= n is neither established nor preserved.\nloop invariant 0 <= sn <= n is partially proven to be inductive.\nloop invariant 0 <= sn <= i is partially proven to be inductive.\nloop invariant 0 <= sn <= n - (i - 1) is established but not preserved.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn <= i - 1 is partially proven to be inductive.\nloop invariant sn <= n is partially proven to be inductive.\nAssertion sn == n: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: 0 <= sn <= i;\n\nloop invariant i5: sn >= 0;\nloop invariant i6: sn <= i - 1;\n\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= sn <= n;\nloop invariant sn == (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant i == (sn + 1);\nloop invariant i > 0;\nloop invariant i <= n;\nloop invariant sn == (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant i == (sn + 1);\nloop invariant i > 0;\nloop invariant i <= n;\nloop invariant sn == (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant i == (sn + 1);\nloop invariant i > 0;\nloop invariant i <= n;\nloop invariant sn == (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant i == (sn + 1);\nloop invariant i > 0;\nloop invariant i <= n;\nloop invariant sn == (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant i == (sn + 1);\nloop invariant i > 0;\nloop invariant i <= n;\nloop invariant sn == (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant i == (sn + 1);\nloop invariant i > 0;\nloop invariant i <= n;\nloop invariant sn == (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant i == (sn + 1);\nloop invariant i > 0;\nloop invariant i <= n;\nloop invariant sn == (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant i == (sn + 1);\nloop invariant i > 0;\nloop invariant i <= n;\nloop invariant sn == (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant i == (sn + 1);\nloop invariant i > 0;\nloop invariant i <= n;\nloop invariant sn == (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant i == (sn + 1);\nloop invariant i > 0;\nloop invariant i <= n;\nloop invariant sn == (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant i == (sn + 1);\nloop invariant i > 0;\nloop invariant i <= n;\nloop invariant sn == (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant i == (sn + 1);\nloop invariant i > 0;\nloop invariant i <= n;\nloop invariant sn == (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant i == (sn + 1);\nloop invariant i > 0;\nloop invariant i <= n;\nloop invariant sn == (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant i == (sn + 1);\nloop invariant i > 0;\nloop invariant i <= n;\nloop invariant sn == (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant i == (sn + 1);\nloop invariant i > 0;\nloop invariant i <= n;\nloop invariant sn == (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant i == (sn + 1);\nloop invariant i > 0;\nloop invariant i <= n;\nloop invariant sn == (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant i == (sn + 1);\nloop invariant i > 0;\nloop invariant i <= n;\nloop invariant sn == (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant i == (sn + 1);\nloop invariant i > 0;\nloop invariant i <= n;\nloop invariant sn == (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant i == (sn + 1);\nloop invariant i > 0;\nloop invariant i <= n;\nloop invariant sn == (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant i == (sn + 1);\nloop invariant i > 0;\nloop invariant i <= n;\nloop invariant sn == (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant i == (sn + 1);\nloop invariant i > 0;\nloop invariant i <= n;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= n is neither established nor preserved.\nloop invariant 0 <= sn <= n is partially proven to be inductive.\nloop invariant sn == (i - 1) is partially proven to be inductive.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn <= n is partially proven to be inductive.\nloop invariant i >= 1 is partially proven to be inductive.\nloop invariant i <= n is partially proven to be inductive.\nloop invariant i == (sn + 1) is partially proven to be inductive.\nloop invariant i > 0 is partially proven to be inductive.\nAssertion sn == n: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: sn == (i - 1);\nloop invariant i4: sn >= 0;\n\nloop invariant i6: i >= 1;\n\nloop invariant i8: i == (sn + 1);\nloop invariant i9: i > 0;\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn == i - 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= n is neither established nor preserved.\nloop invariant sn == i - 1 is partially proven to be inductive.\nAssertion sn == n: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\nloop invariant i2: sn == i - 1;\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant sn == (i - 1);\nloop invariant n >= 0;\nloop invariant 1 <= i <= n;\nloop invariant sn == (i - 1);\nloop invariant n >= 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= i <= n is neither established nor preserved.\nloop invariant sn == (i - 1) is partially proven to be inductive.\nloop invariant n >= 0 is partially proven to be inductive.\nAssertion sn == n: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\nloop invariant i2: sn == (i - 1);\n\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= n;\nloop invariant 0 <= i <= n;\nloop invariant 0 <= sn <= n;\nloop invariant sn == (i - 1);\nloop invariant 1 <= i <= n ==> sn == (i - 1);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= n is preserved but not established.\nloop invariant 0 <= i <= n is neither established nor preserved.\nloop invariant 0 <= sn <= n is partially proven to be inductive.\nloop invariant sn == (i - 1) is partially proven to be inductive.\nloop invariant 1 <= i <= n ==> sn == (i - 1) is partially proven to be inductive.\nAssertion sn == n: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\n\nloop invariant i4: sn == (i - 1);\nloop invariant i5: 1 <= i <= n ==> sn == (i - 1);\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= sn <= n;\nloop invariant sn == i - 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= n is neither established nor preserved.\nloop invariant 0 <= sn <= n is partially proven to be inductive.\nloop invariant sn == i - 1 is partially proven to be inductive.\nAssertion sn == n: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: sn == i - 1;\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 9,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= sn <= n;\nloop invariant i == sn + 1;\nloop invariant i >= 1;\nloop invariant n >= 0;\nloop invariant n == i - 1;\nloop invariant sn == i - 1;\nloop invariant sn == n - (i - 1);\nloop invariant sn == n - i + 1;\nloop invariant sn == n - i + i;\nloop invariant sn == n;\nloop invariant (sn == n) ==> ((n >= 0) && (i == n + 1));\nloop invariant (sn == n) ==> ((sn >= 0) && (i == n + 1));\nloop invariant (sn == n) ==> ((sn == n) && (i == n + 1));\nloop invariant (sn == n) ==> (sn == n);\nloop invariant (sn == n) ==> (i == n + 1);\nloop invariant (sn == n) ==> (sn == i - 1);\nloop invariant (sn == n) ==> (sn == n - i + 1);\nloop invariant (sn == n) ==> (sn == n - (i - 1));\nloop invariant (sn == n) ==> (sn == n - i + i);\nloop invariant (sn == n) ==> (sn == n);\nloop invariant (sn == n) ==> (i == n + 1);\nloop invariant (sn == n) ==> (sn == i - 1);\nloop invariant (sn == n) ==> (sn == n - i + 1);\nloop invariant (sn == n) ==> (sn == n - (i - 1));\nloop invariant (sn == n) ==> (sn == n - i + i);\nloop invariant (sn == n) ==> (sn == n);\nloop invariant (sn == n) ==> (i == n + 1);\nloop invariant (sn == n) ==> (sn == i - 1);\nloop invariant (sn == n) ==> (sn == n - i + 1);\nloop invariant (sn == n) ==> (sn == n - (i - 1));\nloop invariant (sn == n) ==> (sn == n - i + i);\nloop invariant (sn == n) ==> (sn == n);\nloop invariant (sn == n) ==> (i == n + 1);\nloop invariant (sn == n) ==> (sn == i - 1);\nloop invariant (sn == n) ==> (sn == n - i + 1);\nloop invariant (sn == n) ==> (sn == n - (i - 1));\nloop invariant (sn == n) ==> (sn == n - i + i);\nloop invariant (sn == n) ==> (sn == n);\nloop invariant (sn == n) ==> (i == n + 1);\nloop invariant (sn == n) ==> (sn == i - 1);\nloop invariant (sn == n) ==> (sn == n - i + 1);\nloop invariant (sn == n) ==> (sn == n - (i - 1));\nloop invariant (sn == n) ==> (sn == n - i + i);\nloop invariant (sn == n) ==> (sn == n);\nloop invariant (sn == n) ==> (i == n + 1);\nloop invariant (sn == n) ==> (sn == i - 1);\nloop invariant (sn == n) ==> (sn == n - i + 1);\nloop invariant (sn == n) ==> (sn == n - (i - 1));\nloop invariant (sn == n) ==> (sn == n - i + i);\nloop invariant (sn == n) ==> (sn == n);\nloop invariant (sn == n) ==> (i == n + 1);\nloop invariant (sn == n) ==> (sn == i - 1);\nloop invariant (sn == n) ==> (sn == n - i + 1);\nloop invariant (sn == n) ==> (sn == n - (i - 1));\nloop invariant (sn == n) ==> (sn == n - i + i);\nloop invariant (sn == n) ==> (sn == n);\nloop invariant (sn == n) ==> (i == n + 1);\nloop invariant (sn == n) ==> (sn == i - 1);\nloop invariant (sn == n) ==> (sn == n - i + 1);\nloop invariant (sn == n) ==> (sn == n - (i - 1));\nloop invariant (sn == n) ==> (sn == n - i + i);\nloop invariant (sn == n) ==> (sn == n);\nloop invariant (sn == n) ==> (i == n + 1);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= n is preserved but not established.\nloop invariant 0 <= sn <= n is partially proven to be inductive.\nloop invariant i == sn + 1 is partially proven to be inductive.\nloop invariant i >= 1 is partially proven to be inductive.\nloop invariant n >= 0 is partially proven to be inductive.\nloop invariant n == i - 1 is preserved but not established.\nloop invariant sn == i - 1 is partially proven to be inductive.\nloop invariant sn == n - (i - 1) is partially proven to be inductive.\nloop invariant sn == n - i + 1 is partially proven to be inductive.\nloop invariant sn == n - i + i is partially proven to be inductive.\nloop invariant sn == n is partially proven to be inductive.\nloop invariant (sn == n) ==> ((n >= 0) && (i == n + 1)) is partially proven to be inductive.\nloop invariant (sn == n) ==> ((sn >= 0) && (i == n + 1)) is partially proven to be inductive.\nloop invariant (sn == n) ==> ((sn == n) && (i == n + 1)) is partially proven to be inductive.\nloop invariant (sn == n) ==> (sn == n) is partially proven to be inductive.\nloop invariant (sn == n) ==> (i == n + 1) is partially proven to be inductive.\nloop invariant (sn == n) ==> (sn == i - 1) is partially proven to be inductive.\nloop invariant (sn == n) ==> (sn == n - i + 1) is partially proven to be inductive.\nloop invariant (sn == n) ==> (sn == n - (i - 1)) is partially proven to be inductive.\nloop invariant (sn == n) ==> (sn == n - i + i) is partially proven to be inductive.\nAssertion sn == n: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: i == sn + 1;\nloop invariant i4: i >= 1;\n\n\nloop invariant i7: sn == i - 1;\n\n\n\n\nloop invariant i12: (sn == n) ==> ((n >= 0) && (i == n + 1));\nloop invariant i13: (sn == n) ==> ((sn >= 0) && (i == n + 1));\nloop invariant i14: (sn == n) ==> ((sn == n) && (i == n + 1));\nloop invariant i15: (sn == n) ==> (sn == n);\nloop invariant i16: (sn == n) ==> (i == n + 1);\nloop invariant i17: (sn == n) ==> (sn == i - 1);\n\n\nloop invariant i20: (sn == n) ==> (sn == n - i + i);\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn >= 0;\nloop invariant sn == (i - 1);\nloop invariant sn >= (i - 1);\nloop invariant sn <= (i - 1);\nloop invariant (sn == (i - 1)) ==> (sn == (i - 1));\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= n is neither established nor preserved.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn == (i - 1) is partially proven to be inductive.\nloop invariant sn >= (i - 1) is partially proven to be inductive.\nloop invariant sn <= (i - 1) is partially proven to be inductive.\nloop invariant (sn == (i - 1)) ==> (sn == (i - 1)) is partially proven to be inductive.\nAssertion sn == n: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\nloop invariant i2: sn >= 0;\nloop invariant i3: sn == (i - 1);\nloop invariant i4: sn >= (i - 1);\nloop invariant i5: sn <= (i - 1);\nloop invariant i6: (sn == (i - 1)) ==> (sn == (i - 1));\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant ( 1 <= i <= n );\nloop invariant ( sn == (i - 1) );\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant ( 1 <= i <= n ) is neither established nor preserved.\nloop invariant ( sn == (i - 1) ) is partially proven to be inductive.\nAssertion sn == n: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\nloop invariant i2: ( sn == (i - 1) );\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 1 <= i <= n + 1;\nloop invariant i >= 1;\nloop invariant i <= n + 1;\nloop invariant sn >= 0;\nloop invariant sn <= n;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= i <= n + 1 is preserved but not established.\nloop invariant i >= 1 is partially proven to be inductive.\nloop invariant i <= n + 1 is partially proven to be inductive.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn <= n is established but not preserved.\nAssertion sn == n: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\nloop invariant i2: i >= 1;\n\nloop invariant i4: sn >= 0;\n\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= sn <= n;\nloop invariant 0 <= i <= n;\nloop invariant sn == (n - (n - i));\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= sn <= n is preserved but not established.\nloop invariant 0 <= i <= n is preserved but not established.\nloop invariant sn == (n - (n - i)) is preserved but not established.\nAssertion sn == n: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\n\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn >= i - 1;\nloop invariant sn <= i;\nloop invariant sn == i - 1 ==> i == n + 1;\nloop invariant sn == i ==> i <= n + 1;\nloop invariant 1 <= i <= n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn >= i - 1;\nloop invariant sn <= i;\nloop invariant sn == i - 1 ==> i == n + 1;\nloop invariant sn == i ==> i <= n + 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= i <= n is preserved but not established.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn <= n is partially proven to be inductive.\nloop invariant sn >= i - 1 is partially proven to be inductive.\nloop invariant sn <= i is partially proven to be inductive.\nloop invariant sn == i - 1 ==> i == n + 1 is preserved but not established.\nloop invariant sn == i ==> i <= n + 1 is partially proven to be inductive.\nAssertion sn == n: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\nloop invariant i2: sn >= 0;\n\nloop invariant i4: sn >= i - 1;\nloop invariant i5: sn <= i;\n\nloop invariant i7: sn == i ==> i <= n + 1;\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant i1;\nloop invariant i2;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 20: unbound logic variable i1. Ignoring loop annotation",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant 0 <= sn <= n;\nloop invariant sn == i - 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= i <= n is neither established nor preserved.\nloop invariant 0 <= sn <= n is partially proven to be inductive.\nloop invariant sn == i - 1 is partially proven to be inductive.\nAssertion sn == n: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: sn == i - 1;\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
                    "checker_output_after_prune": false
                }
            ],
            "checker_output_for_combined_annotations": false,
            "checker_message_for_combined_annotations": "Annotation error on line 69: unbound logic variable i1. Ignoring loop annotation",
            "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: sn >= i;\nloop invariant i3: n != 0 ==> sn == n;\nloop invariant i4: n == 0 ==> sn == 0;\nloop invariant i5: i == n ==> sn == n;\nloop invariant i6: i < n ==> sn < n;\nloop invariant i7: 0 <= sn <= n;\nloop invariant i8: 0 <= sn <= i;\nloop invariant i9: 0 <= sn <= n - (i - 1);\nloop invariant i10: sn >= 0;\nloop invariant i11: sn <= i - 1;\nloop invariant i12: sn <= n;\nloop invariant i13: sn == (i - 1);\nloop invariant i14: i >= 1;\nloop invariant i15: i <= n;\nloop invariant i16: i == (sn + 1);\nloop invariant i17: i > 0;\nloop invariant i18: sn == i - 1;\nloop invariant i19: 1 <= i <= n;\nloop invariant i20: n >= 0;\nloop invariant i21: 0 <= n;\nloop invariant i22: 1 <= i <= n ==> sn == (i - 1);\nloop invariant i23: i == sn + 1;\nloop invariant i24: n == i - 1;\nloop invariant i25: sn == n - (i - 1);\nloop invariant i26: sn == n - i + 1;\nloop invariant i27: sn == n - i + i;\nloop invariant i28: sn == n;\nloop invariant i29: (sn == n) ==> ((n >= 0) && (i == n + 1));\nloop invariant i30: (sn == n) ==> ((sn >= 0) && (i == n + 1));\nloop invariant i31: (sn == n) ==> ((sn == n) && (i == n + 1));\nloop invariant i32: (sn == n) ==> (sn == n);\nloop invariant i33: (sn == n) ==> (i == n + 1);\nloop invariant i34: (sn == n) ==> (sn == i - 1);\nloop invariant i35: (sn == n) ==> (sn == n - i + 1);\nloop invariant i36: (sn == n) ==> (sn == n - (i - 1));\nloop invariant i37: (sn == n) ==> (sn == n - i + i);\nloop invariant i38: sn >= (i - 1);\nloop invariant i39: sn <= (i - 1);\nloop invariant i40: (sn == (i - 1)) ==> (sn == (i - 1));\nloop invariant i41: ( 1 <= i <= n );\nloop invariant i42: ( sn == (i - 1) );\nloop invariant i43: 1 <= i <= n + 1;\nloop invariant i44: i <= n + 1;\nloop invariant i45: sn == (n - (n - i));\nloop invariant i46: sn >= i - 1;\nloop invariant i47: sn <= i;\nloop invariant i48: sn == i - 1 ==> i == n + 1;\nloop invariant i49: sn == i ==> i <= n + 1;\nloop invariant i50: i1;\nloop invariant i51: i2;\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
            "combined_annotation_num_solver_calls": 14,
            "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\n\nloop invariant i4: n == 0 ==> sn == 0;\n\nloop invariant i6: i < n ==> sn < n;\n\nloop invariant i8: 0 <= sn <= i;\n\nloop invariant i10: sn >= 0;\nloop invariant i11: sn <= i - 1;\n\nloop invariant i13: sn == (i - 1);\nloop invariant i14: i >= 1;\n\nloop invariant i16: i == (sn + 1);\nloop invariant i17: i > 0;\nloop invariant i18: sn == i - 1;\n\n\n\nloop invariant i22: 1 <= i <= n ==> sn == (i - 1);\nloop invariant i23: i == sn + 1;\n\n\n\n\n\nloop invariant i29: (sn == n) ==> ((n >= 0) && (i == n + 1));\nloop invariant i30: (sn == n) ==> ((sn >= 0) && (i == n + 1));\nloop invariant i31: (sn == n) ==> ((sn == n) && (i == n + 1));\nloop invariant i32: (sn == n) ==> (sn == n);\nloop invariant i33: (sn == n) ==> (i == n + 1);\nloop invariant i34: (sn == n) ==> (sn == i - 1);\n\n\nloop invariant i37: (sn == n) ==> (sn == n - i + i);\nloop invariant i38: sn >= (i - 1);\nloop invariant i39: sn <= (i - 1);\nloop invariant i40: (sn == (i - 1)) ==> (sn == (i - 1));\n\nloop invariant i42: ( sn == (i - 1) );\n\n\n\nloop invariant i46: sn >= i - 1;\nloop invariant i47: sn <= i;\n\nloop invariant i49: sn == i ==> i <= n + 1;\n\n\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
            "checker_output_after_prune": false
        },
        {
            "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/ddlm2013_true-unreach-call.c",
            "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    while (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;\n//@ assert(a == b);\n}\n\n    }\n    return 0;\n}",
            "success": false,
            "annotation_blocks": [
                "```\n/*@\nloop invariant 1 <= j <= b + 1;\nloop invariant i == 2 * (b + 1) - j;\nloop invariant (a - b) == (j - i);\nloop invariant (j - i) % 2 == 1;\nloop invariant (a - b) >= (j - i);\nloop invariant a >= b;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= 2;\nloop invariant 0 <= j <= (i + 2);\nloop invariant 0 <= a <= (i + 1);\nloop invariant 0 <= b <= (1 + (j - i) * (j - 1) / 2);\nloop invariant a >= b;\nloop invariant flag ==> (i == 0) ==> (j == 1);\nloop invariant !flag ==> (i == 1) ==> (j == 1);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= 2 * j;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= b + 1;\nloop invariant 0 <= j <= a + 1;\nloop invariant i >= 0;\nloop invariant a + b >= j;\nloop invariant i + 1 == j * (i + 2) / 2 + a * (i + 1) / 2;\nloop invariant i + 1 == j * (i + 2) / 2 + a * (i + 1) / 2 ==> a >= 0;\nloop invariant i + 1 == j * (i + 2) / 2 + a * (i + 1) / 2 ==> b >= 0;\nloop invariant i + 1 == j * (i + 2) / 2 + a * (i + 1) / 2 ==> i >= 0;\nloop invariant i + 1 == j * (i + 2) / 2 + a * (i + 1) / 2 ==> a <= b + 1;\nloop invariant i + 1 == j * (i + 2) / 2 + a * (i + 1) / 2 ==> 0 <= j <= a + 1;\nloop invariant i + 1 == j * (i + 2) / 2 + a * (i + 1) / 2 ==> 0 <= i <= 2 * j;\nloop invariant i + 1 == j * (i + 2) / 2 + a * (i + 1) / 2 ==> a + b >= j;\nloop invariant i + 1 == j * (i + 2) / 2 + a * (i + 1) / 2 ==> a >= 0;\nloop invariant i + 1 == j * (i + 2) / 2 + a * (i + 1) / 2 ==> b >= 0;\nloop invariant i + 1 == j * (i + 2) / 2 + a * (i + 1) / 2 ==> i >= 0;\nloop invariant i + 1 == j * (i + 2) / 2 + a * (i + 1) / 2 ==> a <= b + 1;\nloop invariant i + 1 == j * (i + 2) / 2 + a * (i + 1) / 2 ==> 0 <= j <= a + 1;\nloop invariant i + 1 == j * (i + 2) / 2 + a * (i + 1) / 2 ==> 0 <= i <= 2 * j;\nloop invariant i + 1 == j * (i + 2) / 2 + a * (i + 1) / 2 ==> a + b >= j;\nloop invariant i + 1 == j * (i + 2) / 2 + a * (i + 1) / 2 ==> a >= 0;\nloop invariant i + 1 == j * (i + 2) / 2 + a * (i + 1) / 2 ==> b >= 0;\nloop invariant i + 1 == j * (i + 2) / 2 + a * (i + 1) / 2 ==> i >= 0;\nloop invariant i + 1 == j * (i + 2) / 2 + a * (i + 1) / 2 ==> a <= b + 1;\nloop invariant i + 1 == j * (i + 2) / 2 + a * (i + 1) / 2 ==> 0 <= j <= a + 1;\nloop invariant i + 1 == j * (i + 2) / 2 + a * (i + 1) / 2 ==> 0 <= i <= 2 * j;\nloop invariant i + 1 == j * (i + 2) / 2 + a * (i + 1) / 2 ==> a + b >= j;\nloop invariant i + 1 == j * (i + 2) / 2 + a * (i + 1) / 2 ==> a >= 0;\nloop invariant i + 1 == j * (i + 2) / 2 + a * (i + 1) / 2 ==> b >= 0;\nloop invariant i + 1 == j * (i + 2) / 2 + a * (i + 1) / 2 ==> i >= 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= j <= b;\nloop invariant 0 <= i <= b;\nloop invariant j - i <= b;\nloop invariant j - i >= 0;\nloop invariant j - i == b;\nloop invariant b - a <= 0;\nloop invariant b >= 0;\nloop invariant a >= 0;\nloop invariant 0 <= b <= 1073741823;\nloop invariant 0 <= a <= 1073741823;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant b - a <= 1073741823;\nloop invariant b - a >= 0;\nloop invariant a <= b - a;\nloop invariant a >= b - a;\nloop invariant a == b - a;\nloop invariant a <= b;\nloop invariant b >= a;\nloop invariant a <= 1073741823;\nloop invariant b >= 0;\nloop invariant b <= 1073741823;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= 1073741823;\nloop invariant b >= 0;\nloop invariant b <= 1073741823;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= 1073741823;\nloop invariant b >= 0;\nloop invariant b <= 1073741823;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= 1073741823;\nloop invariant b >= 0;\nloop invariant b <= 1073741823;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= 1073741823;\nloop invariant b >= 0;\nloop invariant b <= 1073741823;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= 1073741823;\nloop invariant b >= 0;\nloop invariant b <= 1073741823;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= 1073741823;\nloop invariant b >= 0;\nloop invariant b <= 1073741823;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= 1073741823;\nloop invariant b >= 0;\nloop invariant b <= 1073741823;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= 1073741823;\nloop invariant b >= 0;\nloop invariant b <= 1073741823;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= 1073741823;\nloop invariant b >= 0;\nloop invariant b <= 1073741823;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= 1073741823;\nloop invariant b >= 0;\nloop invariant b <= 1073741823;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= 1073741823;\nloop invariant b >= 0;\nloop invariant b <= 1073741823;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= 1073741823;\nloop invariant b >= 0;\nloop invariant b <= 1073741823;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= 1073741823;\nloop invariant b >= 0;\nloop invariant b <= 1073741823;\nloop invariant a <= b;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= a <= b;\nloop invariant 0 <= b <= 100000;\nloop invariant a >= (1 + (b - 1) * b / 2);\nloop invariant if (flag) { a == b };\nloop invariant if (!flag) { a != b };\n*/\n```",
                "```\n/*@\nloop invariant 0 <= a <= 2147483647;\nloop invariant 0 <= b <= 2147483647;\nloop invariant 1 <= j <= 2147483647;\nloop invariant 0 <= i <= 2147483647;\nloop invariant 0 <= a - b <= 2147483647;\nloop invariant 1 <= j - i <= 2147483647;\nloop invariant a - b ==> j - i;\nloop invariant !flag ==> a == b;\nloop invariant flag ==> a != b;\nloop invariant a, b ==> a >= b;\nloop invariant !flag ==> i == 1;\nloop invariant flag ==> i == 0;\nloop invariant !(flag ==> i%2 == 0) ==> i%2 == 1;\nloop invariant flag ==> i%2 == 0;\nloop invariant flag ==> j%2 == 1;\nloop invariant !(flag ==> i%2 == 0) ==> j%2 == 0;\nloop invariant !(flag ==> i%2 == 0) ==> j%2 == 1;\nloop invariant flag ==> j%2 == 0;\nloop invariant !flag ==> j%2 == 1;\nloop invariant a, b, i, j ==> a >= (j - i) * (j - i + 1) / 2;\nloop invariant a, b, i, j ==> b >= (i - j) * (i - j + 1) / 2;\nloop invariant a, b, i, j ==> a - b >= (j - i) * (j - i + 1) / 2;\nloop invariant a, b, i, j ==> b - a >= (i - j) * (i - j + 1) / 2;\nloop invariant a, b, i, j ==> a - b <= (j - i) * (j - i + 1) / 2;\nloop invariant a, b, i, j ==> b - a <= (i - j) * (i - j + 1) / 2;\nloop invariant a, b, i, j ==> a - b ==> (j - i) * (j - i + 1) / 2;\nloop invariant a, b, i, j ==> b - a ==> (i - j) * (i - j + 1) / 2;\nloop invariant a, b, i, j ==> a - b ==> (j - i) * (j - i + 1) / 2;\nloop invariant a, b, i, j ==> b - a ==> (i - j) * (i - j + 1) / 2;\nloop invariant a, b, i, j ==> a - b ==> (j - i) * (j - i + 1) / 2;\nloop invariant a, b, i, j ==> b - a ==> (i - j) * (i - j + 1) / 2;\nloop invariant a, b, i, j ==> a - b ==> (j - i) * (j - i + 1) / 2;\nloop invariant a, b, i, j ==> b - a ==> (i - j) * (i - j + 1) / 2;\nloop invariant a, b, i, j ==> a - b ==> (j - i) * (j - i + 1) / 2;\nloop invariant a, b, i, j ==> b - a ==> (i - j) * (i - j + 1) / 2;\nloop invariant a, b, i, j ==> a - b ==> (j - i) * (j - i + 1) / 2;\nloop invariant a, b, i, j ==> b - a ==> (i - j) * (i - j + 1) / 2;\nloop invariant a, b, i, j ==> a - b ==> (j - i) * (j - i + 1) / 2;\nloop invariant a, b, i, j ==> b - a ==> (i - j) * (i - j + 1) / 2;\nloop invariant a, b, i, j ==> a - b ==> (j - i) * (j - i + 1) / 2;\nloop invariant a, b, i, j ==> b - a ==> (i - j) * (i - j + 1) / 2;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= a <= b;\nloop invariant 0 <= i <= 1;\nloop invariant 1 <= j;\nloop invariant i == (j - 1) \\* (j - 2) / 2;\nloop invariant i == (j - 2) \\* (j - 1) / 2;\nloop invariant i == (j - 1) \\* (j - 2) / 2;\nloop invariant i == (j - 2) \\* (j - 1) / 2;\nloop invariant i == (j - 1) \\* (j - 2) / 2;\nloop invariant i == (j - 2) \\* (j - 1) / 2;\nloop invariant i == (j - 1) \\* (j - 2) / 2;\nloop invariant i == (j - 2) \\* (j - 1) / 2;\nloop invariant i == (j - 1) \\* (j - 2) / 2;\nloop invariant i == (j - 2) \\* (j - 1) / 2;\nloop invariant i == (j - 1) \\* (j - 2) / 2;\nloop invariant i == (j - 2) \\* (j - 1) / 2;\nloop invariant i == (j - 1) \\* (j - 2) / 2;\nloop invariant i == (j - 2) \\* (j - 1) / 2;\nloop invariant i == (j - 1) \\* (j - 2) / 2;\nloop invariant i == (j - 2) \\* (j - 1) / 2;\nloop invariant i == (j - 1) \\* (j - 2) / 2;\nloop invariant i == (j - 2) \\* (j - 1) / 2;\nloop invariant i == (j - 1) \\* (j - 2) / 2;\nloop invariant i == (j - 2) \\* (j - 1) / 2;\nloop invariant i == (j - 1) \\* (j - 2) / 2;\nloop invariant i == (j - 2) \\* (j - 1) / 2;\nloop invariant i == (j - 1) \\* (j - 2) / 2;\nloop invariant i == (j - 2) \\* (j - 1) / 2;\nloop invariant i == (j - 1) \\* (j - 2) / 2;\nloop invariant i == (j - 2) \\* (j - 1) / 2;\nloop invariant i == (j - 1) \\* (j - 2) / 2;\nloop invariant i == (j - 2) \\* (j - 1) / 2;\nloop invariant i == (j - 1) \\* (j - 2) / 2;\nloop invariant i == (j - 2) \\* (j - 1) / 2;\nloop invariant i == (j - 1) \\* (j - 2) / 2;\nloop invariant i == (j - 2) \\* (j - 1) / 2;\nloop invariant i == (j - 1) \\* (j - 2) / 2;\nloop invariant i == (j - 2) \\* (j - 1) / 2;\nloop invariant i == (j - 1) \\* (j - 2) / 2;\nloop invariant i == (j - 2) \\* (j - 1) / 2;\nloop invariant i == (j - 1) \\* (j - 2) / 2;\nloop invariant i == (j - 2) \\* (j - 1) / 2;\nloop invariant i == (j - 1) \\* (j - 2) / 2;\nloop invariant i == (j - 2) \\* (j - 1) / 2;\nloop invariant i == (j - 1) \\* (j - 2) / 2;\nloop invariant i == (j - 2) \\* (j - 1) / 2;\nloop invariant i == (j - 1) \\* (j - 2) / 2;\nloop invariant i == (j - 2) \\* (j - 1) / 2;\n*/\n```",
                "```\n/*@\nloop invariant a == b && i == 1 && j == 1;\nloop invariant a == b && a >= 0 && b >= 0 && i >= 1 && j >= 1 && i <= 2 * j;\nloop invariant a == b && a >= 0 && b >= 0 && i >= 1 && j >= 1 && i <= 2 * j && i == j && j == 1;\nloop invariant a == b && a >= 0 && b >= 0 && i >= 1 && j >= 1 && i <= 2 * j && i == j && j == 1 && i == 0;\nloop invariant a == b && a >= 0 && b >= 0 && i >= 1 && j >= 1 && i <= 2 * j && i == j && j == 1 && i == 0 && a == 0;\nloop invariant a == b && a >= 0 && b >= 0 && i >= 1 && j >= 1 && i <= 2 * j && i == j && j == 1 && i == 0 && a == 0 && i == 1;\nloop invariant a == b && a >= 0 && b >= 0 && i >= 1 && j >= 1 && i <= 2 * j && i == j && j == 1 && i == 0 && a == 0 && i == 1 && j == 1;\nloop invariant a == b && a >= 0 && b >= 0 && i >= 1 && j >= 1 && i <= 2 * j && i == j && j == 1 && i == 0 && a == 0 && i == 1 && j == 1 && i == j;\nloop invariant a == b && a >= 0 && b >= 0 && i >= 1 && j >= 1 && i <= 2 * j && i == j && j == 1 && i == 0 && a == 0 && i == 1 && j == 1 && i == j && j == 1;\nloop invariant a == b && a >= 0 && b >= 0 && i >= 1 && j >= 1 && i <= 2 * j && i == j && j == 1 && i == 0 && a == 0 && i == 1 && j == 1 && i == j && j == 1 && a == b;\nloop invariant a == b && a >= 0 && b >= 0 && i >= 1 && j >= 1 && i <= 2 * j && i == j && j == 1 && i == 0 && a == 0 && i == 1 && j == 1 && i == j && j == 1 && a == b && a == 0;\nloop invariant a == b && a >= 0 && b >= 0 && i >= 1 && j >= 1 && i <= 2 * j && i == j && j == 1 && i == 0 && a == 0 && i == 1 && j == 1 && i == j && j == 1 && a == b && a == 0 && i == 1;\nloop invariant a == b && a >= 0 && b >= 0 && i >= 1 && j >= 1 && i <= 2 * j && i == j && j == 1 && i == 0 && a == 0 && i == 1 && j == 1 && i == j && j == 1 && a == b && a == 0 && i == 1 && j == 1;\nloop invariant a == b && a >= 0 && b >= 0 && i >= 1 && j >= 1 && i <= 2 * j && i == j && j == 1 && i == 0 && a == 0 && i == 1 && j == 1 && i == j && j == 1 && a == b && a == 0 && i == 1 && j == 1 && i == j;\nloop invariant a == b && a >= 0 && b >= 0 && i >= 1 && j >= 1 && i <= 2 * j && i == j && j == 1 && i == 0 && a == 0 && i == 1 && j == 1 && i == j && j == 1 && a == b && a == 0 && i == 1 && j == 1 && i == j && j == 1;\n*/\n```",
                "```\n/*@\nloop invariant i >= 0 && i <= 1;\nloop invariant j >= 1 && j <= 2;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant flag == 0 || flag == 1;\nloop invariant a - b >= 0;\nloop invariant flag == 1 ==> a == b;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= 2 * j;\nloop invariant 0 <= a <= i * (i - 1) / 2;\nloop invariant 0 <= b <= (j - 1) * j / 2;\nloop invariant a == b ==> i == j;\nloop invariant a == b ==> flag == 1;\nloop invariant a == b ==> i == 0;\nloop invariant a == b ==> j == 1;\nloop invariant a == b ==> flag == 0 ==> i == 1;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= a <= INT_MAX;\nloop invariant 0 <= b <= INT_MAX;\nloop invariant j%2 == 1;\nloop invariant i%2 == 0;\nloop invariant i <= j;\nloop invariant (i <= 1) ==> (a == b);\nloop invariant (i > 1) ==> (a >= b);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= a && a <= b;\nloop invariant 1 <= j;\nloop invariant 0 <= i && i <= 2;\nloop invariant 1 <= i;\nloop invariant 1 <= j;\nloop invariant a <= b;\nloop invariant unknown_int() ==> a == b;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= j <= 100000;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= b;\nloop invariant a == b ==> j == 1;\nloop invariant a < b ==> j > 1;\nloop invariant a > b ==> j == 1;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= a <= b;\nloop invariant a >= b - (j - i);\nloop invariant j >= i;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a >= b - (j - i - 1);\nloop invariant j >= i - 1;\nloop invariant a >= b - (j - i - 1) * 2;\nloop invariant j >= i - 1 + 1;\nloop invariant a >= b - (j - i - 1) * 2 - 1;\nloop invariant j >= i - 1 + 1 - 1;\nloop invariant a >= b - (j - i - 1) * 2 - 1;\nloop invariant j >= i - 1 + 1 - 1 + 1;\nloop invariant a >= b - (j - i - 1) * 2 - 1;\nloop invariant j >= i - 1 + 1 - 1 + 1 - 1;\nloop invariant a >= b - (j - i - 1) * 2 - 1;\nloop invariant j >= i - 1 + 1 - 1 + 1 - 1 + 1;\nloop invariant a >= b - (j - i - 1) * 2 - 1;\nloop invariant j >= i - 1 + 1 - 1 + 1 - 1 + 1 - 1;\nloop invariant a >= b - (j - i - 1) * 2 - 1;\nloop invariant j >= i - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1;\nloop invariant a >= b - (j - i - 1) * 2 - 1;\nloop invariant j >= i - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1;\nloop invariant a >= b - (j - i - 1) * 2 - 1;\nloop invariant j >= i - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1;\nloop invariant a >= b - (j - i - 1) * 2 - 1;\nloop invariant j >= i - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1;\nloop invariant a >= b - (j - i - 1) * 2 - 1;\nloop invariant j >= i - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1;\nloop invariant a >= b - (j - i - 1) * 2 - 1;\nloop invariant j >= i - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1;\nloop invariant a >= b - (j - i - 1) * 2 - 1;\nloop invariant j >= i - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1;\nloop invariant a >= b - (j - i - 1) * 2 - 1;\nloop invariant j >= i - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1;\nloop invariant a >= b - (j - i - 1) * 2 - 1;\nloop invariant j >= i - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1;\nloop invariant a >= b - (j - i - 1) * 2 - 1;\nloop invariant j >= i - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1;\nloop invariant a >= b - (j - i - 1) * 2 - 1;\n*/\n```",
                "```\n/*@\n\n*/\n```"
            ],
            "completions": [
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 1 <= j <= b + 1;\nloop invariant i == 2 * (b + 1) - j;\nloop invariant (a - b) == (j - i);\nloop invariant (j - i) % 2 == 1;\nloop invariant (a - b) >= (j - i);\nloop invariant a >= b;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= j <= b + 1 is partially proven to be inductive.\nloop invariant i == 2 * (b + 1) - j is preserved but not established.\nloop invariant (a - b) == (j - i) is partially proven to be inductive.\nloop invariant (j - i) % 2 == 1 is preserved but not established.\nloop invariant (a - b) >= (j - i) is partially proven to be inductive.\nloop invariant a >= b is partially proven to be inductive.\nAssertion a == b: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    /*@\n\n\n\n\n\n\n*/\nwhile (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;\n//@ assert(a == b);\n}\n\n    }\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= 2;\nloop invariant 0 <= j <= (i + 2);\nloop invariant 0 <= a <= (i + 1);\nloop invariant 0 <= b <= (1 + (j - i) * (j - 1) / 2);\nloop invariant a >= b;\nloop invariant flag ==> (i == 0) ==> (j == 1);\nloop invariant !flag ==> (i == 1) ==> (j == 1);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= 2 is established but not preserved.\nloop invariant 0 <= j <= (i + 2) is partially proven to be inductive.\nloop invariant 0 <= a <= (i + 1) is partially proven to be inductive.\nloop invariant 0 <= b <= (1 + (j - i) * (j - 1) / 2) is partially proven to be inductive.\nloop invariant a >= b is established but not preserved.\nloop invariant flag ==> (i == 0) ==> (j == 1) is partially proven to be inductive.\nloop invariant !flag ==> (i == 1) ==> (j == 1) is partially proven to be inductive.\nAssertion a == b: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    /*@\n\n\n\n\n\n\n\n*/\nwhile (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;\n//@ assert(a == b);\n}\n\n    }\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 6,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= 2 * j;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= b + 1;\nloop invariant 0 <= j <= a + 1;\nloop invariant i >= 0;\nloop invariant a + b >= j;\nloop invariant i + 1 == j * (i + 2) / 2 + a * (i + 1) / 2;\nloop invariant i + 1 == j * (i + 2) / 2 + a * (i + 1) / 2 ==> a >= 0;\nloop invariant i + 1 == j * (i + 2) / 2 + a * (i + 1) / 2 ==> b >= 0;\nloop invariant i + 1 == j * (i + 2) / 2 + a * (i + 1) / 2 ==> i >= 0;\nloop invariant i + 1 == j * (i + 2) / 2 + a * (i + 1) / 2 ==> a <= b + 1;\nloop invariant i + 1 == j * (i + 2) / 2 + a * (i + 1) / 2 ==> 0 <= j <= a + 1;\nloop invariant i + 1 == j * (i + 2) / 2 + a * (i + 1) / 2 ==> 0 <= i <= 2 * j;\nloop invariant i + 1 == j * (i + 2) / 2 + a * (i + 1) / 2 ==> a + b >= j;\nloop invariant i + 1 == j * (i + 2) / 2 + a * (i + 1) / 2 ==> a >= 0;\nloop invariant i + 1 == j * (i + 2) / 2 + a * (i + 1) / 2 ==> b >= 0;\nloop invariant i + 1 == j * (i + 2) / 2 + a * (i + 1) / 2 ==> i >= 0;\nloop invariant i + 1 == j * (i + 2) / 2 + a * (i + 1) / 2 ==> a <= b + 1;\nloop invariant i + 1 == j * (i + 2) / 2 + a * (i + 1) / 2 ==> 0 <= j <= a + 1;\nloop invariant i + 1 == j * (i + 2) / 2 + a * (i + 1) / 2 ==> 0 <= i <= 2 * j;\nloop invariant i + 1 == j * (i + 2) / 2 + a * (i + 1) / 2 ==> a + b >= j;\nloop invariant i + 1 == j * (i + 2) / 2 + a * (i + 1) / 2 ==> a >= 0;\nloop invariant i + 1 == j * (i + 2) / 2 + a * (i + 1) / 2 ==> b >= 0;\nloop invariant i + 1 == j * (i + 2) / 2 + a * (i + 1) / 2 ==> i >= 0;\nloop invariant i + 1 == j * (i + 2) / 2 + a * (i + 1) / 2 ==> a <= b + 1;\nloop invariant i + 1 == j * (i + 2) / 2 + a * (i + 1) / 2 ==> 0 <= j <= a + 1;\nloop invariant i + 1 == j * (i + 2) / 2 + a * (i + 1) / 2 ==> 0 <= i <= 2 * j;\nloop invariant i + 1 == j * (i + 2) / 2 + a * (i + 1) / 2 ==> a + b >= j;\nloop invariant i + 1 == j * (i + 2) / 2 + a * (i + 1) / 2 ==> a >= 0;\nloop invariant i + 1 == j * (i + 2) / 2 + a * (i + 1) / 2 ==> b >= 0;\nloop invariant i + 1 == j * (i + 2) / 2 + a * (i + 1) / 2 ==> i >= 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= 2 * j is partially proven to be inductive.\nloop invariant a >= 0 is partially proven to be inductive.\nloop invariant b >= 0 is partially proven to be inductive.\nloop invariant a <= b + 1 is partially proven to be inductive.\nloop invariant 0 <= j <= a + 1 is partially proven to be inductive.\nloop invariant i >= 0 is partially proven to be inductive.\nloop invariant a + b >= j is preserved but not established.\nloop invariant i + 1 == j * (i + 2) / 2 + a * (i + 1) / 2 is partially proven to be inductive.\nloop invariant i + 1 == j * (i + 2) / 2 + a * (i + 1) / 2 ==> a >= 0 is partially proven to be inductive.\nloop invariant i + 1 == j * (i + 2) / 2 + a * (i + 1) / 2 ==> b >= 0 is partially proven to be inductive.\nloop invariant i + 1 == j * (i + 2) / 2 + a * (i + 1) / 2 ==> i >= 0 is partially proven to be inductive.\nloop invariant i + 1 == j * (i + 2) / 2 + a * (i + 1) / 2 ==> a <= b + 1 is partially proven to be inductive.\nloop invariant i + 1 == j * (i + 2) / 2 + a * (i + 1) / 2 ==> 0 <= j <= a + 1 is partially proven to be inductive.\nloop invariant i + 1 == j * (i + 2) / 2 + a * (i + 1) / 2 ==> 0 <= i <= 2 * j is partially proven to be inductive.\nloop invariant i + 1 == j * (i + 2) / 2 + a * (i + 1) / 2 ==> a + b >= j is partially proven to be inductive.\nAssertion a == b: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    /*@\n\nloop invariant i2: a >= 0;\nloop invariant i3: b >= 0;\n\n\nloop invariant i6: i >= 0;\n\n\nloop invariant i9: i + 1 == j * (i + 2) / 2 + a * (i + 1) / 2 ==> a >= 0;\nloop invariant i10: i + 1 == j * (i + 2) / 2 + a * (i + 1) / 2 ==> b >= 0;\nloop invariant i11: i + 1 == j * (i + 2) / 2 + a * (i + 1) / 2 ==> i >= 0;\n\n\n\n\n*/\nwhile (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;\n//@ assert(a == b);\n}\n\n    }\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 9,
                    "annotations": "```\n/*@\nloop invariant 0 <= j <= b;\nloop invariant 0 <= i <= b;\nloop invariant j - i <= b;\nloop invariant j - i >= 0;\nloop invariant j - i == b;\nloop invariant b - a <= 0;\nloop invariant b >= 0;\nloop invariant a >= 0;\nloop invariant 0 <= b <= 1073741823;\nloop invariant 0 <= a <= 1073741823;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant b - a <= 1073741823;\nloop invariant b - a >= 0;\nloop invariant a <= b - a;\nloop invariant a >= b - a;\nloop invariant a == b - a;\nloop invariant a <= b;\nloop invariant b >= a;\nloop invariant a <= 1073741823;\nloop invariant b >= 0;\nloop invariant b <= 1073741823;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= 1073741823;\nloop invariant b >= 0;\nloop invariant b <= 1073741823;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= 1073741823;\nloop invariant b >= 0;\nloop invariant b <= 1073741823;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= 1073741823;\nloop invariant b >= 0;\nloop invariant b <= 1073741823;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= 1073741823;\nloop invariant b >= 0;\nloop invariant b <= 1073741823;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= 1073741823;\nloop invariant b >= 0;\nloop invariant b <= 1073741823;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= 1073741823;\nloop invariant b >= 0;\nloop invariant b <= 1073741823;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= 1073741823;\nloop invariant b >= 0;\nloop invariant b <= 1073741823;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= 1073741823;\nloop invariant b >= 0;\nloop invariant b <= 1073741823;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= 1073741823;\nloop invariant b >= 0;\nloop invariant b <= 1073741823;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= 1073741823;\nloop invariant b >= 0;\nloop invariant b <= 1073741823;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= 1073741823;\nloop invariant b >= 0;\nloop invariant b <= 1073741823;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= 1073741823;\nloop invariant b >= 0;\nloop invariant b <= 1073741823;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= 1073741823;\nloop invariant b >= 0;\nloop invariant b <= 1073741823;\nloop invariant a <= b;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= j <= b is preserved but not established.\nloop invariant 0 <= i <= b is partially proven to be inductive.\nloop invariant j - i <= b is partially proven to be inductive.\nloop invariant j - i >= 0 is partially proven to be inductive.\nloop invariant j - i == b is partially proven to be inductive.\nloop invariant b - a <= 0 is partially proven to be inductive.\nloop invariant b >= 0 is partially proven to be inductive.\nloop invariant a >= 0 is partially proven to be inductive.\nloop invariant 0 <= b <= 1073741823 is partially proven to be inductive.\nloop invariant 0 <= a <= 1073741823 is partially proven to be inductive.\nloop invariant a <= b is partially proven to be inductive.\nloop invariant b - a <= 1073741823 is partially proven to be inductive.\nloop invariant b - a >= 0 is partially proven to be inductive.\nloop invariant a <= b - a is partially proven to be inductive.\nloop invariant a >= b - a is partially proven to be inductive.\nloop invariant a == b - a is partially proven to be inductive.\nloop invariant b >= a is partially proven to be inductive.\nloop invariant a <= 1073741823 is partially proven to be inductive.\nloop invariant b <= 1073741823 is partially proven to be inductive.\nAssertion a == b: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    /*@\n\n\n\n\n\n\nloop invariant i7: b >= 0;\nloop invariant i8: a >= 0;\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;\n//@ assert(a == b);\n}\n\n    }\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= a <= b;\nloop invariant 0 <= b <= 100000;\nloop invariant a >= (1 + (b - 1) * b / 2);\nloop invariant if (flag) { a == b };\nloop invariant if (!flag) { a != b };\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 25: unexpected token '('",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    /*@\n\n\n\n\n\n*/\nwhile (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;\n//@ assert(a == b);\n}\n\n    }\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 17,
                    "annotations": "```\n/*@\nloop invariant 0 <= a <= 2147483647;\nloop invariant 0 <= b <= 2147483647;\nloop invariant 1 <= j <= 2147483647;\nloop invariant 0 <= i <= 2147483647;\nloop invariant 0 <= a - b <= 2147483647;\nloop invariant 1 <= j - i <= 2147483647;\nloop invariant a - b ==> j - i;\nloop invariant !flag ==> a == b;\nloop invariant flag ==> a != b;\nloop invariant a, b ==> a >= b;\nloop invariant !flag ==> i == 1;\nloop invariant flag ==> i == 0;\nloop invariant !(flag ==> i%2 == 0) ==> i%2 == 1;\nloop invariant flag ==> i%2 == 0;\nloop invariant flag ==> j%2 == 1;\nloop invariant !(flag ==> i%2 == 0) ==> j%2 == 0;\nloop invariant !(flag ==> i%2 == 0) ==> j%2 == 1;\nloop invariant flag ==> j%2 == 0;\nloop invariant !flag ==> j%2 == 1;\nloop invariant a, b, i, j ==> a >= (j - i) * (j - i + 1) / 2;\nloop invariant a, b, i, j ==> b >= (i - j) * (i - j + 1) / 2;\nloop invariant a, b, i, j ==> a - b >= (j - i) * (j - i + 1) / 2;\nloop invariant a, b, i, j ==> b - a >= (i - j) * (i - j + 1) / 2;\nloop invariant a, b, i, j ==> a - b <= (j - i) * (j - i + 1) / 2;\nloop invariant a, b, i, j ==> b - a <= (i - j) * (i - j + 1) / 2;\nloop invariant a, b, i, j ==> a - b ==> (j - i) * (j - i + 1) / 2;\nloop invariant a, b, i, j ==> b - a ==> (i - j) * (i - j + 1) / 2;\nloop invariant a, b, i, j ==> a - b ==> (j - i) * (j - i + 1) / 2;\nloop invariant a, b, i, j ==> b - a ==> (i - j) * (i - j + 1) / 2;\nloop invariant a, b, i, j ==> a - b ==> (j - i) * (j - i + 1) / 2;\nloop invariant a, b, i, j ==> b - a ==> (i - j) * (i - j + 1) / 2;\nloop invariant a, b, i, j ==> a - b ==> (j - i) * (j - i + 1) / 2;\nloop invariant a, b, i, j ==> b - a ==> (i - j) * (i - j + 1) / 2;\nloop invariant a, b, i, j ==> a - b ==> (j - i) * (j - i + 1) / 2;\nloop invariant a, b, i, j ==> b - a ==> (i - j) * (i - j + 1) / 2;\nloop invariant a, b, i, j ==> a - b ==> (j - i) * (j - i + 1) / 2;\nloop invariant a, b, i, j ==> b - a ==> (i - j) * (i - j + 1) / 2;\nloop invariant a, b, i, j ==> a - b ==> (j - i) * (j - i + 1) / 2;\nloop invariant a, b, i, j ==> b - a ==> (i - j) * (i - j + 1) / 2;\nloop invariant a, b, i, j ==> a - b ==> (j - i) * (j - i + 1) / 2;\nloop invariant a, b, i, j ==> b - a ==> (i - j) * (i - j + 1) / 2;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 31: unexpected token ','",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    /*@\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i13: !(flag ==> i%2 == 0) ==> i%2 == 1;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;\n//@ assert(a == b);\n}\n\n    }\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= a <= b;\nloop invariant 0 <= i <= 1;\nloop invariant 1 <= j;\nloop invariant i == (j - 1) \\* (j - 2) / 2;\nloop invariant i == (j - 2) \\* (j - 1) / 2;\nloop invariant i == (j - 1) \\* (j - 2) / 2;\nloop invariant i == (j - 2) \\* (j - 1) / 2;\nloop invariant i == (j - 1) \\* (j - 2) / 2;\nloop invariant i == (j - 2) \\* (j - 1) / 2;\nloop invariant i == (j - 1) \\* (j - 2) / 2;\nloop invariant i == (j - 2) \\* (j - 1) / 2;\nloop invariant i == (j - 1) \\* (j - 2) / 2;\nloop invariant i == (j - 2) \\* (j - 1) / 2;\nloop invariant i == (j - 1) \\* (j - 2) / 2;\nloop invariant i == (j - 2) \\* (j - 1) / 2;\nloop invariant i == (j - 1) \\* (j - 2) / 2;\nloop invariant i == (j - 2) \\* (j - 1) / 2;\nloop invariant i == (j - 1) \\* (j - 2) / 2;\nloop invariant i == (j - 2) \\* (j - 1) / 2;\nloop invariant i == (j - 1) \\* (j - 2) / 2;\nloop invariant i == (j - 2) \\* (j - 1) / 2;\nloop invariant i == (j - 1) \\* (j - 2) / 2;\nloop invariant i == (j - 2) \\* (j - 1) / 2;\nloop invariant i == (j - 1) \\* (j - 2) / 2;\nloop invariant i == (j - 2) \\* (j - 1) / 2;\nloop invariant i == (j - 1) \\* (j - 2) / 2;\nloop invariant i == (j - 2) \\* (j - 1) / 2;\nloop invariant i == (j - 1) \\* (j - 2) / 2;\nloop invariant i == (j - 2) \\* (j - 1) / 2;\nloop invariant i == (j - 1) \\* (j - 2) / 2;\nloop invariant i == (j - 2) \\* (j - 1) / 2;\nloop invariant i == (j - 1) \\* (j - 2) / 2;\nloop invariant i == (j - 2) \\* (j - 1) / 2;\nloop invariant i == (j - 1) \\* (j - 2) / 2;\nloop invariant i == (j - 2) \\* (j - 1) / 2;\nloop invariant i == (j - 1) \\* (j - 2) / 2;\nloop invariant i == (j - 2) \\* (j - 1) / 2;\nloop invariant i == (j - 1) \\* (j - 2) / 2;\nloop invariant i == (j - 2) \\* (j - 1) / 2;\nloop invariant i == (j - 1) \\* (j - 2) / 2;\nloop invariant i == (j - 2) \\* (j - 1) / 2;\nloop invariant i == (j - 1) \\* (j - 2) / 2;\nloop invariant i == (j - 2) \\* (j - 1) / 2;\nloop invariant i == (j - 1) \\* (j - 2) / 2;\nloop invariant i == (j - 2) \\* (j - 1) / 2;\nloop invariant i == (j - 1) \\* (j - 2) / 2;\nloop invariant i == (j - 2) \\* (j - 1) / 2;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 25: lexical error, illegal character \\",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    /*@\n\n\n\n\n\n*/\nwhile (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;\n//@ assert(a == b);\n}\n\n    }\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 13,
                    "annotations": "```\n/*@\nloop invariant a == b && i == 1 && j == 1;\nloop invariant a == b && a >= 0 && b >= 0 && i >= 1 && j >= 1 && i <= 2 * j;\nloop invariant a == b && a >= 0 && b >= 0 && i >= 1 && j >= 1 && i <= 2 * j && i == j && j == 1;\nloop invariant a == b && a >= 0 && b >= 0 && i >= 1 && j >= 1 && i <= 2 * j && i == j && j == 1 && i == 0;\nloop invariant a == b && a >= 0 && b >= 0 && i >= 1 && j >= 1 && i <= 2 * j && i == j && j == 1 && i == 0 && a == 0;\nloop invariant a == b && a >= 0 && b >= 0 && i >= 1 && j >= 1 && i <= 2 * j && i == j && j == 1 && i == 0 && a == 0 && i == 1;\nloop invariant a == b && a >= 0 && b >= 0 && i >= 1 && j >= 1 && i <= 2 * j && i == j && j == 1 && i == 0 && a == 0 && i == 1 && j == 1;\nloop invariant a == b && a >= 0 && b >= 0 && i >= 1 && j >= 1 && i <= 2 * j && i == j && j == 1 && i == 0 && a == 0 && i == 1 && j == 1 && i == j;\nloop invariant a == b && a >= 0 && b >= 0 && i >= 1 && j >= 1 && i <= 2 * j && i == j && j == 1 && i == 0 && a == 0 && i == 1 && j == 1 && i == j && j == 1;\nloop invariant a == b && a >= 0 && b >= 0 && i >= 1 && j >= 1 && i <= 2 * j && i == j && j == 1 && i == 0 && a == 0 && i == 1 && j == 1 && i == j && j == 1 && a == b;\nloop invariant a == b && a >= 0 && b >= 0 && i >= 1 && j >= 1 && i <= 2 * j && i == j && j == 1 && i == 0 && a == 0 && i == 1 && j == 1 && i == j && j == 1 && a == b && a == 0;\nloop invariant a == b && a >= 0 && b >= 0 && i >= 1 && j >= 1 && i <= 2 * j && i == j && j == 1 && i == 0 && a == 0 && i == 1 && j == 1 && i == j && j == 1 && a == b && a == 0 && i == 1;\nloop invariant a == b && a >= 0 && b >= 0 && i >= 1 && j >= 1 && i <= 2 * j && i == j && j == 1 && i == 0 && a == 0 && i == 1 && j == 1 && i == j && j == 1 && a == b && a == 0 && i == 1 && j == 1;\nloop invariant a == b && a >= 0 && b >= 0 && i >= 1 && j >= 1 && i <= 2 * j && i == j && j == 1 && i == 0 && a == 0 && i == 1 && j == 1 && i == j && j == 1 && a == b && a == 0 && i == 1 && j == 1 && i == j;\nloop invariant a == b && a >= 0 && b >= 0 && i >= 1 && j >= 1 && i <= 2 * j && i == j && j == 1 && i == 0 && a == 0 && i == 1 && j == 1 && i == j && j == 1 && a == b && a == 0 && i == 1 && j == 1 && i == j && j == 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant a == b && i == 1 && j == 1 is preserved but not established.\nloop invariant a == b && a >= 0 && b >= 0 && i >= 1 && j >= 1 && i <= 2 * j is partially proven to be inductive.\nloop invariant a == b && a >= 0 && b >= 0 && i >= 1 && j >= 1 && i <= 2 * j && i == j && j == 1 is partially proven to be inductive.\nloop invariant a == b && a >= 0 && b >= 0 && i >= 1 && j >= 1 && i <= 2 * j && i == j && j == 1 && i == 0 is preserved but not established.\nloop invariant a == b && a >= 0 && b >= 0 && i >= 1 && j >= 1 && i <= 2 * j && i == j && j == 1 && i == 0 && a == 0 is partially proven to be inductive.\nloop invariant a == b && a >= 0 && b >= 0 && i >= 1 && j >= 1 && i <= 2 * j && i == j && j == 1 && i == 0 && a == 0 && i == 1 is partially proven to be inductive.\nloop invariant a == b && a >= 0 && b >= 0 && i >= 1 && j >= 1 && i <= 2 * j && i == j && j == 1 && i == 0 && a == 0 && i == 1 && j == 1 is partially proven to be inductive.\nloop invariant a == b && a >= 0 && b >= 0 && i >= 1 && j >= 1 && i <= 2 * j && i == j && j == 1 && i == 0 && a == 0 && i == 1 && j == 1 && i == j is partially proven to be inductive.\nloop invariant a == b && a >= 0 && b >= 0 && i >= 1 && j >= 1 && i <= 2 * j && i == j && j == 1 && i == 0 && a == 0 && i == 1 && j == 1 && i == j && j == 1 is partially proven to be inductive.\nloop invariant a == b && a >= 0 && b >= 0 && i >= 1 && j >= 1 && i <= 2 * j && i == j && j == 1 && i == 0 && a == 0 && i == 1 && j == 1 && i == j && j == 1 && a == b is partially proven to be inductive.\nloop invariant a == b && a >= 0 && b >= 0 && i >= 1 && j >= 1 && i <= 2 * j && i == j && j == 1 && i == 0 && a == 0 && i == 1 && j == 1 && i == j && j == 1 && a == b && a == 0 is partially proven to be inductive.\nloop invariant a == b && a >= 0 && b >= 0 && i >= 1 && j >= 1 && i <= 2 * j && i == j && j == 1 && i == 0 && a == 0 && i == 1 && j == 1 && i == j && j == 1 && a == b && a == 0 && i == 1 is partially proven to be inductive.\nloop invariant a == b && a >= 0 && b >= 0 && i >= 1 && j >= 1 && i <= 2 * j && i == j && j == 1 && i == 0 && a == 0 && i == 1 && j == 1 && i == j && j == 1 && a == b && a == 0 && i == 1 && j == 1 is partially proven to be inductive.\nloop invariant a == b && a >= 0 && b >= 0 && i >= 1 && j >= 1 && i <= 2 * j && i == j && j == 1 && i == 0 && a == 0 && i == 1 && j == 1 && i == j && j == 1 && a == b && a == 0 && i == 1 && j == 1 && i == j is partially proven to be inductive.\nloop invariant a == b && a >= 0 && b >= 0 && i >= 1 && j >= 1 && i <= 2 * j && i == j && j == 1 && i == 0 && a == 0 && i == 1 && j == 1 && i == j && j == 1 && a == b && a == 0 && i == 1 && j == 1 && i == j && j == 1 is partially proven to be inductive.\nAssertion a == b: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;\n//@ assert(a == b);\n}\n\n    }\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant i >= 0 && i <= 1;\nloop invariant j >= 1 && j <= 2;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant flag == 0 || flag == 1;\nloop invariant a - b >= 0;\nloop invariant flag == 1 ==> a == b;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant i >= 0 && i <= 1 is established but not preserved.\nloop invariant j >= 1 && j <= 2 is partially proven to be inductive.\nloop invariant a >= 0 is partially proven to be inductive.\nloop invariant b >= 0 is partially proven to be inductive.\nloop invariant flag == 0 || flag == 1 is preserved but not established.\nloop invariant a - b >= 0 is partially proven to be inductive.\nloop invariant flag == 1 ==> a == b is partially proven to be inductive.\nAssertion a == b: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    /*@\n\n\nloop invariant i3: a >= 0;\nloop invariant i4: b >= 0;\n\n\n\n*/\nwhile (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;\n//@ assert(a == b);\n}\n\n    }\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= 2 * j;\nloop invariant 0 <= a <= i * (i - 1) / 2;\nloop invariant 0 <= b <= (j - 1) * j / 2;\nloop invariant a == b ==> i == j;\nloop invariant a == b ==> flag == 1;\nloop invariant a == b ==> i == 0;\nloop invariant a == b ==> j == 1;\nloop invariant a == b ==> flag == 0 ==> i == 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= 2 * j is partially proven to be inductive.\nloop invariant 0 <= a <= i * (i - 1) / 2 is partially proven to be inductive.\nloop invariant 0 <= b <= (j - 1) * j / 2 is partially proven to be inductive.\nloop invariant a == b ==> i == j is preserved but not established.\nloop invariant a == b ==> flag == 1 is preserved but not established.\nloop invariant a == b ==> i == 0 is partially proven to be inductive.\nloop invariant a == b ==> j == 1 is partially proven to be inductive.\nloop invariant a == b ==> flag == 0 ==> i == 1 is partially proven to be inductive.\nAssertion a == b: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    /*@\n\n\n\n\n\n\n\n\n*/\nwhile (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;\n//@ assert(a == b);\n}\n\n    }\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= a <= INT_MAX;\nloop invariant 0 <= b <= INT_MAX;\nloop invariant j%2 == 1;\nloop invariant i%2 == 0;\nloop invariant i <= j;\nloop invariant (i <= 1) ==> (a == b);\nloop invariant (i > 1) ==> (a >= b);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= a <= INT_MAX is established but not preserved.\nloop invariant 0 <= b <= INT_MAX is established but not preserved.\nloop invariant j%2 == 1 is established but not preserved.\nloop invariant i%2 == 0 is neither established nor preserved.\nloop invariant i <= j is established but not preserved.\nloop invariant (i <= 1) ==> (a == b) is established but not preserved.\nloop invariant (i > 1) ==> (a >= b) is established but not preserved.\nAssertion a == b: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    /*@\n\n\n\n\n\n\n\n*/\nwhile (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;\n//@ assert(a == b);\n}\n\n    }\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= a && a <= b;\nloop invariant 1 <= j;\nloop invariant 0 <= i && i <= 2;\nloop invariant 1 <= i;\nloop invariant 1 <= j;\nloop invariant a <= b;\nloop invariant unknown_int() ==> a == b;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 27: unexpected token ')'",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    /*@\n\n\n\n\n\n\n*/\nwhile (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;\n//@ assert(a == b);\n}\n\n    }\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= j <= 100000;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= b;\nloop invariant a == b ==> j == 1;\nloop invariant a < b ==> j > 1;\nloop invariant a > b ==> j == 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= j <= 100000 is established but not preserved.\nloop invariant a >= 0 is partially proven to be inductive.\nloop invariant b >= 0 is partially proven to be inductive.\nloop invariant a <= b is established but not preserved.\nloop invariant a == b ==> j == 1 is established but not preserved.\nloop invariant a < b ==> j > 1 is partially proven to be inductive.\nloop invariant a > b ==> j == 1 is partially proven to be inductive.\nAssertion a == b: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    /*@\n\nloop invariant i2: a >= 0;\nloop invariant i3: b >= 0;\n\n\n\n\n*/\nwhile (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;\n//@ assert(a == b);\n}\n\n    }\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 13,
                    "annotations": "```\n/*@\nloop invariant 0 <= a <= b;\nloop invariant a >= b - (j - i);\nloop invariant j >= i;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a >= b - (j - i - 1);\nloop invariant j >= i - 1;\nloop invariant a >= b - (j - i - 1) * 2;\nloop invariant j >= i - 1 + 1;\nloop invariant a >= b - (j - i - 1) * 2 - 1;\nloop invariant j >= i - 1 + 1 - 1;\nloop invariant a >= b - (j - i - 1) * 2 - 1;\nloop invariant j >= i - 1 + 1 - 1 + 1;\nloop invariant a >= b - (j - i - 1) * 2 - 1;\nloop invariant j >= i - 1 + 1 - 1 + 1 - 1;\nloop invariant a >= b - (j - i - 1) * 2 - 1;\nloop invariant j >= i - 1 + 1 - 1 + 1 - 1 + 1;\nloop invariant a >= b - (j - i - 1) * 2 - 1;\nloop invariant j >= i - 1 + 1 - 1 + 1 - 1 + 1 - 1;\nloop invariant a >= b - (j - i - 1) * 2 - 1;\nloop invariant j >= i - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1;\nloop invariant a >= b - (j - i - 1) * 2 - 1;\nloop invariant j >= i - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1;\nloop invariant a >= b - (j - i - 1) * 2 - 1;\nloop invariant j >= i - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1;\nloop invariant a >= b - (j - i - 1) * 2 - 1;\nloop invariant j >= i - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1;\nloop invariant a >= b - (j - i - 1) * 2 - 1;\nloop invariant j >= i - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1;\nloop invariant a >= b - (j - i - 1) * 2 - 1;\nloop invariant j >= i - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1;\nloop invariant a >= b - (j - i - 1) * 2 - 1;\nloop invariant j >= i - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1;\nloop invariant a >= b - (j - i - 1) * 2 - 1;\nloop invariant j >= i - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1;\nloop invariant a >= b - (j - i - 1) * 2 - 1;\nloop invariant j >= i - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1;\nloop invariant a >= b - (j - i - 1) * 2 - 1;\nloop invariant j >= i - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1;\nloop invariant a >= b - (j - i - 1) * 2 - 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= a <= b is established but not preserved.\nloop invariant a >= b - (j - i) is established but not preserved.\nloop invariant j >= i is partially proven to be inductive.\nloop invariant a >= 0 is partially proven to be inductive.\nloop invariant b >= 0 is partially proven to be inductive.\nloop invariant a >= b - (j - i - 1) is neither established nor preserved.\nloop invariant j >= i - 1 is partially proven to be inductive.\nloop invariant a >= b - (j - i - 1) * 2 is partially proven to be inductive.\nloop invariant j >= i - 1 + 1 is partially proven to be inductive.\nloop invariant a >= b - (j - i - 1) * 2 - 1 is partially proven to be inductive.\nloop invariant j >= i - 1 + 1 - 1 is partially proven to be inductive.\nloop invariant j >= i - 1 + 1 - 1 + 1 is partially proven to be inductive.\nloop invariant j >= i - 1 + 1 - 1 + 1 - 1 is partially proven to be inductive.\nloop invariant j >= i - 1 + 1 - 1 + 1 - 1 + 1 is partially proven to be inductive.\nloop invariant j >= i - 1 + 1 - 1 + 1 - 1 + 1 - 1 is partially proven to be inductive.\nloop invariant j >= i - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 is partially proven to be inductive.\nloop invariant j >= i - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 is partially proven to be inductive.\nloop invariant j >= i - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 is partially proven to be inductive.\nloop invariant j >= i - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 is partially proven to be inductive.\nloop invariant j >= i - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 is partially proven to be inductive.\nloop invariant j >= i - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 is partially proven to be inductive.\nloop invariant j >= i - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 is partially proven to be inductive.\nloop invariant j >= i - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 is partially proven to be inductive.\nloop invariant j >= i - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 is partially proven to be inductive.\nloop invariant j >= i - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 is partially proven to be inductive.\nAssertion a == b: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    /*@\n\n\n\nloop invariant i4: a >= 0;\nloop invariant i5: b >= 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;\n//@ assert(a == b);\n}\n\n    }\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 1,
                    "annotations": "```\n/*@\n\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 22: unexpected token ''",
                    "houdini_error": "No annotations found"
                }
            ],
            "checker_output_for_combined_annotations": false,
            "checker_message_for_combined_annotations": "Annotation error on line 69: unexpected token '('",
            "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    /*@\nloop invariant i1: 1 <= j <= b + 1;\nloop invariant i2: i == 2 * (b + 1) - j;\nloop invariant i3: (a - b) == (j - i);\nloop invariant i4: (j - i) % 2 == 1;\nloop invariant i5: (a - b) >= (j - i);\nloop invariant i6: a >= b;\nloop invariant i7: 0 <= i <= 2;\nloop invariant i8: 0 <= j <= (i + 2);\nloop invariant i9: 0 <= a <= (i + 1);\nloop invariant i10: 0 <= b <= (1 + (j - i) * (j - 1) / 2);\nloop invariant i11: flag ==> (i == 0) ==> (j == 1);\nloop invariant i12: !flag ==> (i == 1) ==> (j == 1);\nloop invariant i13: 0 <= i <= 2 * j;\nloop invariant i14: a >= 0;\nloop invariant i15: b >= 0;\nloop invariant i16: a <= b + 1;\nloop invariant i17: 0 <= j <= a + 1;\nloop invariant i18: i >= 0;\nloop invariant i19: a + b >= j;\nloop invariant i20: i + 1 == j * (i + 2) / 2 + a * (i + 1) / 2;\nloop invariant i21: i + 1 == j * (i + 2) / 2 + a * (i + 1) / 2 ==> a >= 0;\nloop invariant i22: i + 1 == j * (i + 2) / 2 + a * (i + 1) / 2 ==> b >= 0;\nloop invariant i23: i + 1 == j * (i + 2) / 2 + a * (i + 1) / 2 ==> i >= 0;\nloop invariant i24: i + 1 == j * (i + 2) / 2 + a * (i + 1) / 2 ==> a <= b + 1;\nloop invariant i25: i + 1 == j * (i + 2) / 2 + a * (i + 1) / 2 ==> 0 <= j <= a + 1;\nloop invariant i26: i + 1 == j * (i + 2) / 2 + a * (i + 1) / 2 ==> 0 <= i <= 2 * j;\nloop invariant i27: i + 1 == j * (i + 2) / 2 + a * (i + 1) / 2 ==> a + b >= j;\nloop invariant i28: 0 <= j <= b;\nloop invariant i29: 0 <= i <= b;\nloop invariant i30: j - i <= b;\nloop invariant i31: j - i >= 0;\nloop invariant i32: j - i == b;\nloop invariant i33: b - a <= 0;\nloop invariant i34: 0 <= b <= 1073741823;\nloop invariant i35: 0 <= a <= 1073741823;\nloop invariant i36: a <= b;\nloop invariant i37: b - a <= 1073741823;\nloop invariant i38: b - a >= 0;\nloop invariant i39: a <= b - a;\nloop invariant i40: a >= b - a;\nloop invariant i41: a == b - a;\nloop invariant i42: b >= a;\nloop invariant i43: a <= 1073741823;\nloop invariant i44: b <= 1073741823;\nloop invariant i45: 0 <= a <= b;\nloop invariant i46: 0 <= b <= 100000;\nloop invariant i47: a >= (1 + (b - 1) * b / 2);\nloop invariant i48: if (flag) { a == b };\nloop invariant i49: if (!flag) { a != b };\nloop invariant i50: 0 <= a <= 2147483647;\nloop invariant i51: 0 <= b <= 2147483647;\nloop invariant i52: 1 <= j <= 2147483647;\nloop invariant i53: 0 <= i <= 2147483647;\nloop invariant i54: 0 <= a - b <= 2147483647;\nloop invariant i55: 1 <= j - i <= 2147483647;\nloop invariant i56: a - b ==> j - i;\nloop invariant i57: !flag ==> a == b;\nloop invariant i58: flag ==> a != b;\nloop invariant i59: a, b ==> a >= b;\nloop invariant i60: !flag ==> i == 1;\nloop invariant i61: flag ==> i == 0;\nloop invariant i62: !(flag ==> i%2 == 0) ==> i%2 == 1;\nloop invariant i63: flag ==> i%2 == 0;\nloop invariant i64: flag ==> j%2 == 1;\nloop invariant i65: !(flag ==> i%2 == 0) ==> j%2 == 0;\nloop invariant i66: !(flag ==> i%2 == 0) ==> j%2 == 1;\nloop invariant i67: flag ==> j%2 == 0;\nloop invariant i68: !flag ==> j%2 == 1;\nloop invariant i69: a, b, i, j ==> a >= (j - i) * (j - i + 1) / 2;\nloop invariant i70: a, b, i, j ==> b >= (i - j) * (i - j + 1) / 2;\nloop invariant i71: a, b, i, j ==> a - b >= (j - i) * (j - i + 1) / 2;\nloop invariant i72: a, b, i, j ==> b - a >= (i - j) * (i - j + 1) / 2;\nloop invariant i73: a, b, i, j ==> a - b <= (j - i) * (j - i + 1) / 2;\nloop invariant i74: a, b, i, j ==> b - a <= (i - j) * (i - j + 1) / 2;\nloop invariant i75: a, b, i, j ==> a - b ==> (j - i) * (j - i + 1) / 2;\nloop invariant i76: a, b, i, j ==> b - a ==> (i - j) * (i - j + 1) / 2;\nloop invariant i77: 0 <= i <= 1;\nloop invariant i78: 1 <= j;\nloop invariant i79: i == (j - 1) \\* (j - 2) / 2;\nloop invariant i80: i == (j - 2) \\* (j - 1) / 2;\nloop invariant i81: a == b && i == 1 && j == 1;\nloop invariant i82: a == b && a >= 0 && b >= 0 && i >= 1 && j >= 1 && i <= 2 * j;\nloop invariant i83: a == b && a >= 0 && b >= 0 && i >= 1 && j >= 1 && i <= 2 * j && i == j && j == 1;\nloop invariant i84: a == b && a >= 0 && b >= 0 && i >= 1 && j >= 1 && i <= 2 * j && i == j && j == 1 && i == 0;\nloop invariant i85: a == b && a >= 0 && b >= 0 && i >= 1 && j >= 1 && i <= 2 * j && i == j && j == 1 && i == 0 && a == 0;\nloop invariant i86: a == b && a >= 0 && b >= 0 && i >= 1 && j >= 1 && i <= 2 * j && i == j && j == 1 && i == 0 && a == 0 && i == 1;\nloop invariant i87: a == b && a >= 0 && b >= 0 && i >= 1 && j >= 1 && i <= 2 * j && i == j && j == 1 && i == 0 && a == 0 && i == 1 && j == 1;\nloop invariant i88: a == b && a >= 0 && b >= 0 && i >= 1 && j >= 1 && i <= 2 * j && i == j && j == 1 && i == 0 && a == 0 && i == 1 && j == 1 && i == j;\nloop invariant i89: a == b && a >= 0 && b >= 0 && i >= 1 && j >= 1 && i <= 2 * j && i == j && j == 1 && i == 0 && a == 0 && i == 1 && j == 1 && i == j && j == 1;\nloop invariant i90: a == b && a >= 0 && b >= 0 && i >= 1 && j >= 1 && i <= 2 * j && i == j && j == 1 && i == 0 && a == 0 && i == 1 && j == 1 && i == j && j == 1 && a == b;\nloop invariant i91: a == b && a >= 0 && b >= 0 && i >= 1 && j >= 1 && i <= 2 * j && i == j && j == 1 && i == 0 && a == 0 && i == 1 && j == 1 && i == j && j == 1 && a == b && a == 0;\nloop invariant i92: a == b && a >= 0 && b >= 0 && i >= 1 && j >= 1 && i <= 2 * j && i == j && j == 1 && i == 0 && a == 0 && i == 1 && j == 1 && i == j && j == 1 && a == b && a == 0 && i == 1;\nloop invariant i93: a == b && a >= 0 && b >= 0 && i >= 1 && j >= 1 && i <= 2 * j && i == j && j == 1 && i == 0 && a == 0 && i == 1 && j == 1 && i == j && j == 1 && a == b && a == 0 && i == 1 && j == 1;\nloop invariant i94: a == b && a >= 0 && b >= 0 && i >= 1 && j >= 1 && i <= 2 * j && i == j && j == 1 && i == 0 && a == 0 && i == 1 && j == 1 && i == j && j == 1 && a == b && a == 0 && i == 1 && j == 1 && i == j;\nloop invariant i95: a == b && a >= 0 && b >= 0 && i >= 1 && j >= 1 && i <= 2 * j && i == j && j == 1 && i == 0 && a == 0 && i == 1 && j == 1 && i == j && j == 1 && a == b && a == 0 && i == 1 && j == 1 && i == j && j == 1;\nloop invariant i96: i >= 0 && i <= 1;\nloop invariant i97: j >= 1 && j <= 2;\nloop invariant i98: flag == 0 || flag == 1;\nloop invariant i99: a - b >= 0;\nloop invariant i100: flag == 1 ==> a == b;\nloop invariant i101: 0 <= a <= i * (i - 1) / 2;\nloop invariant i102: 0 <= b <= (j - 1) * j / 2;\nloop invariant i103: a == b ==> i == j;\nloop invariant i104: a == b ==> flag == 1;\nloop invariant i105: a == b ==> i == 0;\nloop invariant i106: a == b ==> j == 1;\nloop invariant i107: a == b ==> flag == 0 ==> i == 1;\nloop invariant i108: 0 <= a <= INT_MAX;\nloop invariant i109: 0 <= b <= INT_MAX;\nloop invariant i110: j%2 == 1;\nloop invariant i111: i%2 == 0;\nloop invariant i112: i <= j;\nloop invariant i113: (i <= 1) ==> (a == b);\nloop invariant i114: (i > 1) ==> (a >= b);\nloop invariant i115: 0 <= a && a <= b;\nloop invariant i116: 0 <= i && i <= 2;\nloop invariant i117: 1 <= i;\nloop invariant i118: unknown_int() ==> a == b;\nloop invariant i119: 0 <= j <= 100000;\nloop invariant i120: a < b ==> j > 1;\nloop invariant i121: a > b ==> j == 1;\nloop invariant i122: a >= b - (j - i);\nloop invariant i123: j >= i;\nloop invariant i124: a >= b - (j - i - 1);\nloop invariant i125: j >= i - 1;\nloop invariant i126: a >= b - (j - i - 1) * 2;\nloop invariant i127: j >= i - 1 + 1;\nloop invariant i128: a >= b - (j - i - 1) * 2 - 1;\nloop invariant i129: j >= i - 1 + 1 - 1;\nloop invariant i130: j >= i - 1 + 1 - 1 + 1;\nloop invariant i131: j >= i - 1 + 1 - 1 + 1 - 1;\nloop invariant i132: j >= i - 1 + 1 - 1 + 1 - 1 + 1;\nloop invariant i133: j >= i - 1 + 1 - 1 + 1 - 1 + 1 - 1;\nloop invariant i134: j >= i - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1;\nloop invariant i135: j >= i - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1;\nloop invariant i136: j >= i - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1;\nloop invariant i137: j >= i - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1;\nloop invariant i138: j >= i - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1;\nloop invariant i139: j >= i - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1;\nloop invariant i140: j >= i - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1;\nloop invariant i141: j >= i - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1;\nloop invariant i142: j >= i - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1;\nloop invariant i143: j >= i - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1;\n*/\nwhile (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;\n//@ assert(a == b);\n}\n\n    }\n    return 0;\n}",
            "combined_annotation_num_solver_calls": 62,
            "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i14: a >= 0;\nloop invariant i15: b >= 0;\n\n\nloop invariant i18: i >= 0;\n\n\nloop invariant i21: i + 1 == j * (i + 2) / 2 + a * (i + 1) / 2 ==> a >= 0;\nloop invariant i22: i + 1 == j * (i + 2) / 2 + a * (i + 1) / 2 ==> b >= 0;\nloop invariant i23: i + 1 == j * (i + 2) / 2 + a * (i + 1) / 2 ==> i >= 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i62: !(flag ==> i%2 == 0) ==> i%2 == 1;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;\n//@ assert(a == b);\n}\n\n    }\n    return 0;\n}",
            "checker_output_after_prune": false
        },
        {
            "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/MADWiFi-encode_ie_ok.c",
            "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len = unknown();\n  int bufsize = unknown();\n  int bufsize_0 = unknown();\n  int ielen = unknown();\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  for (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:;\n}",
            "success": false,
            "annotation_blocks": [
                "```\n/*@\nloop invariant 0 <= p <= bufsize_0;\nloop invariant i >= 0;\nloop invariant i <= ielen;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize <= bufsize_0-2*(ielen-i);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= p <= bufsize_0;\nloop invariant bufsize_0 + leader_len >= bufsize;\nloop invariant 0 <= bufsize <= bufsize_0;\nloop invariant 0 <= i <= ielen;\nloop invariant ielen * 2 >= bufsize;\nloop invariant 0 <= p + 2 * i <= bufsize_0;\nloop invariant p + 2 * i <= bufsize;\nloop invariant bufsize + leader_len >= bufsize_0;\nloop invariant bufsize + leader_len <= bufsize_0;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\n*/\n```",
                "```\n/*@\nloop invariant i <= ielen;\nloop invariant p > 0;\nloop invariant p <= bufsize_0;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2 * i;\nloop invariant bufsize >= 2 * (i + 1);\nloop invariant p >= leader_len;\nloop invariant p <= bufsize_0 - 2;\nloop invariant p <= bufsize_0 - 2 * (i + 1);\nloop invariant p <= bufsize_0 - 2 * ielen;\nloop invariant p >= leader_len + 2 * i;\nloop invariant p >= leader_len + 2 * (i + 1);\nloop invariant p >= leader_len + 2 * ielen;\nloop invariant p >= leader_len + 2 * (i + 1);\nloop invariant p >= leader_len + 2 * ielen;\nloop invariant p >= leader_len + 2 * (i + 1);\nloop invariant p >= leader_len + 2 * ielen;\nloop invariant p >= leader_len + 2 * (i + 1);\nloop invariant p >= leader_len + 2 * ielen;\nloop invariant p >= leader_len + 2 * (i + 1);\nloop invariant p >= leader_len + 2 * ielen;\nloop invariant p >= leader_len + 2 * (i + 1);\nloop invariant p >= leader_len + 2 * ielen;\nloop invariant p >= leader_len + 2 * (i + 1);\nloop invariant p >= leader_len + 2 * ielen;\nloop invariant p >= leader_len + 2 * (i + 1);\nloop invariant p >= leader_len + 2 * ielen;\nloop invariant p >= leader_len + 2 * (i + 1);\nloop invariant p >= leader_len + 2 * ielen;\nloop invariant p >= leader_len + 2 * (i + 1);\nloop invariant p >= leader_len + 2 * ielen;\nloop invariant p >= leader_len + 2 * (i + 1);\nloop invariant p >= leader_len + 2 * ielen;\nloop invariant p >= leader_len + 2 * (i + 1);\nloop invariant p >= leader_len + 2 * ielen;\nloop invariant p >= leader_len + 2 * (i + 1);\nloop invariant p >= leader_len + 2 * ielen;\nloop invariant p >= leader_len + 2 * (i + 1);\nloop invariant p >= leader_len + 2 * ielen;\nloop invariant p >= leader_len + 2 * (i + 1);\nloop invariant p >= leader_len + 2 * ielen;\nloop invariant p >= leader_len + 2 * (i + 1);\nloop invariant p >= leader_len + 2 * ielen;\nloop invariant p >= leader_len + 2 * (i + 1);\nloop invariant p >= leader_len + 2 * ielen;\nloop invariant p >= leader_len + 2 * (i + 1);\nloop invariant p >= leader_len + 2 * ielen;\nloop invariant p >= leader_len + 2 * (i + 1);\nloop invariant p >= leader_len + 2 * ielen;\nloop invariant p >= leader_len + 2 * (i + 1);\nloop invariant p >= leader_len + 2 * ielen;\nloop invariant p >= leader_len + 2 * (i + 1);\nloop invariant p >= leader_len + 2 * ielen;\nloop invariant p >= leader_len + 2 * (i + 1);\nloop invariant p >= leader_len + 2 * ielen;\nloop invariant p >= leader_len + 2 * (i + 1);\nloop invariant p >= leader_len + 2 * ielen;\nloop invariant p >= leader_len + 2 * (i + 1);\nloop invariant p >= leader_len + 2 * ielen;\nloop invariant p >= leader_len + 2 * (i + 1);\nloop invariant p >= leader_len + 2 * ielen;\nloop invariant p >= leader_len + 2 * (i + 1);\nloop invariant p >= leader_len + 2 * ielen;\nloop invariant p >= leader_len + 2 * (i + 1);\nloop invariant p >= leader_len + 2 * ielen;\nloop invariant p >= leader_len + 2 * (i + 1);\nloop invariant p >= leader_len + 2 * ielen;\nloop invariant p >= leader_len + 2 * (i + 1);\nloop invariant p >= leader_len + 2 * ielen;\nloop invariant p >= leader_len + 2 * (i + 1);\nloop invariant p >= leader_len + 2 * ielen;\nloop invariant p >= leader_len + 2 * (i + 1);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= ielen;\nloop invariant 0 <= p <= bufsize_0;\nloop invariant 0 <= bufsize <= bufsize_0;\nloop invariant leader_len <= bufsize_0;\nloop invariant bufsize <= bufsize_0 - leader_len;\nloop invariant bufsize >= 2*i;\nloop invariant p >= leader_len;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize_0 - 2*i;\nloop invariant p <= bufsize_0 - leader_len;\nloop invariant (i == 0 ==> bufsize >= 2*ielen);\nloop invariant (i > 0 ==> bufsize < 2*ielen);\nloop invariant (i == 0 ==> p == leader_len);\nloop invariant (i > 0 ==> p > leader_len);\nloop invariant (i == 0 ==> bufsize >= 2);\nloop invariant (i > 0 ==> bufsize < 2);\nloop invariant (i == 0 ==> bufsize >= 2*ielen);\nloop invariant (i > 0 ==> bufsize < 2*ielen);\nloop invariant (i == 0 ==> p == leader_len);\nloop invariant (i > 0 ==> p > leader_len);\nloop invariant (i == 0 ==> bufsize >= 2);\nloop invariant (i > 0 ==> bufsize < 2);\nloop invariant (i == 0 ==> bufsize >= 2*ielen);\nloop invariant (i > 0 ==> bufsize < 2*ielen);\nloop invariant (i == 0 ==> p == leader_len);\nloop invariant (i > 0 ==> p > leader_len);\nloop invariant (i == 0 ==> bufsize >= 2);\nloop invariant (i > 0 ==> bufsize < 2);\nloop invariant (i == 0 ==> bufsize >= 2*ielen);\nloop invariant (i > 0 ==> bufsize < 2*ielen);\nloop invariant (i == 0 ==> p == leader_len);\nloop invariant (i > 0 ==> p > leader_len);\nloop invariant (i == 0 ==> bufsize >= 2);\nloop invariant (i > 0 ==> bufsize < 2);\nloop invariant (i == 0 ==> bufsize >= 2*ielen);\nloop invariant (i > 0 ==> bufsize < 2*ielen);\nloop invariant (i == 0 ==> p == leader_len);\nloop invariant (i > 0 ==> p > leader_len);\nloop invariant (i == 0 ==> bufsize >= 2);\nloop invariant (i > 0 ==> bufsize < 2);\nloop invariant (i == 0 ==> bufsize >= 2*ielen);\nloop invariant (i > 0 ==> bufsize < 2*ielen);\nloop invariant (i == 0 ==> p == leader_len);\nloop invariant (i > 0 ==> p > leader_len);\nloop invariant (i == 0 ==> bufsize >= 2);\nloop invariant (i > 0 ==> bufsize < 2);\nloop invariant (i == 0 ==> bufsize >= 2*ielen);\nloop invariant (i > 0 ==> bufsize < 2*ielen);\nloop invariant (i == 0 ==> p == leader_len);\nloop invariant (i > 0 ==> p > leader_len);\nloop invariant (i == 0 ==> bufsize >= 2);\nloop invariant (i > 0 ==> bufsize < 2);\nloop invariant (i == 0 ==> bufsize >= 2*ielen);\nloop invariant (i > 0 ==> bufsize < 2*ielen);\nloop invariant (i == 0 ==> p == leader_len);\nloop invariant (i > 0 ==> p > leader_len);\nloop invariant (i == 0 ==> bufsize >= 2);\nloop invariant (i > 0 ==> bufsize < 2);\nloop invariant (i == 0 ==> bufsize >= 2*ielen);\nloop invariant (i > 0 ==> bufsize < 2*ielen);\nloop invariant (i == 0 ==> p == leader_len);\nloop invariant (i > 0 ==> p > leader_len);\nloop invariant (i == 0 ==> bufsize >= 2);\nloop invariant (i > 0 ==> bufsize < 2);\nloop invariant (i == 0 ==> bufsize >= 2*ielen);\nloop invariant (i > 0 ==> bufsize < 2*ielen);\nloop invariant (i == 0 ==> p == leader_len);\nloop invariant (i > 0 ==> p > leader_len);\nloop invariant (i == 0 ==> bufsize >= 2);\nloop invariant (i > 0 ==> bufsize < 2);\nloop invariant (i == 0 ==> bufsize >= 2*ielen);\nloop invariant (i > 0 ==> bufsize < 2*ielen);\nloop invariant (i == 0 ==> p == leader_len);\nloop invariant (i > 0 ==> p > leader_len);\nloop invariant (i == 0 ==> bufsize >= 2);\nloop invariant (i > 0 ==> bufsize < 2);\n*/\n```",
                "```\n/*@\nloop invariant 0 < bufsize_0;\nloop invariant 0 <= p < bufsize_0;\nloop invariant bufsize_0 - (leader_len + ielen*2) <= bufsize;\nloop invariant bufsize <= bufsize_0 - leader_len;\nloop invariant leader_len <= bufsize_0;\nloop invariant 0 <= i < ielen;\nloop invariant bufsize >= 2;\nloop invariant 0 <= p;\nloop invariant 0 < leader_len;\nloop invariant 0 < bufsize;\nloop invariant 0 < ielen;\nloop invariant unknown();\nloop invariant unknown();\nloop invariant unknown();\nloop invariant 0 < bufsize_0;\nloop invariant 0 <= p < bufsize_0;\nloop invariant bufsize_0 - (leader_len + ielen*2) <= bufsize;\nloop invariant bufsize <= bufsize_0 - leader_len;\nloop invariant leader_len <= bufsize_0;\nloop invariant 0 <= i < ielen;\nloop invariant bufsize >= 2;\nloop invariant 0 <= p;\nloop invariant 0 < leader_len;\nloop invariant 0 < bufsize;\nloop invariant 0 < ielen;\nloop invariant unknown();\nloop invariant unknown();\nloop invariant unknown();\nloop invariant 0 < bufsize_0;\nloop invariant 0 <= p < bufsize_0;\nloop invariant bufsize_0 - (leader_len + ielen*2) <= bufsize;\nloop invariant bufsize <= bufsize_0 - leader_len;\nloop invariant leader_len <= bufsize_0;\nloop invariant 0 <= i < ielen;\nloop invariant bufsize >= 2;\nloop invariant 0 <= p;\nloop invariant 0 < leader_len;\nloop invariant 0 < bufsize;\nloop invariant 0 < ielen;\nloop invariant unknown();\nloop invariant unknown();\nloop invariant unknown();\nloop invariant 0 < bufsize_0;\nloop invariant 0 <= p < bufsize_0;\nloop invariant bufsize_0 - (leader_len + ielen*2) <= bufsize;\nloop invariant bufsize <= bufsize_0 - leader_len;\nloop invariant leader_len <= bufsize_0;\nloop invariant 0 <= i < ielen;\nloop invariant bufsize >= 2;\nloop invariant 0 <= p;\nloop invariant 0 < leader_len;\nloop invariant 0 < bufsize;\nloop invariant 0 < ielen;\nloop invariant unknown();\nloop invariant unknown();\nloop invariant unknown();\nloop invariant 0 < bufsize_0;\nloop invariant 0 <= p < bufsize_0;\nloop invariant bufsize_0 - (leader_len + ielen*2) <= bufsize;\nloop invariant bufsize <= bufsize_0 - leader_len;\nloop invariant leader_len <= bufsize_0;\nloop invariant 0 <= i < ielen;\nloop invariant bufsize >= 2;\nloop invariant 0 <= p;\nloop invariant 0 < leader_len;\nloop invariant 0 < bufsize;\nloop invariant 0 < ielen;\nloop invariant unknown();\nloop invariant unknown();\nloop invariant unknown();\nloop invariant 0 < bufsize_0;\nloop invariant 0 <= p < bufsize_0;\nloop invariant bufsize_0 - (leader_len + ielen*2) <= bufsize;\nloop invariant bufsize <= bufsize_0 - leader_len;\nloop invariant leader_len <= bufsize_0;\nloop invariant 0 <= i < ielen;\nloop invariant bufsize >= 2;\nloop invariant 0 <= p;\nloop invariant 0 < leader_len;\nloop invariant 0 < bufsize;\nloop invariant 0 < ielen;\nloop invariant unknown();\nloop invariant unknown();\nloop invariant unknown();\nloop invariant 0 < bufsize_0;\nloop invariant 0 <= p < bufsize_0;\nloop invariant bufsize_0 - (leader_len + ielen*2) <= bufsize;\nloop invariant bufsize <= bufsize_0 - leader_len;\nloop invariant leader_len <= bufsize_0;\nloop invariant 0 <= i < ielen;\nloop invariant bufsize >= 2;\nloop invariant 0 <= p;\nloop invariant 0 < leader_len;\nloop invariant 0 < bufsize;\nloop invariant 0 < ielen;\nloop invariant unknown();\nloop invariant unknown();\nloop invariant unknown();\nloop invariant 0 < bufsize_0;\nloop invariant 0 <= p < bufsize_0;\nloop invariant bufsize_0 - (leader_len + ielen*2) <= bufsize;\nloop invariant bufsize <= bufsize_0 - leader_len;\nloop invariant leader_len <= bufsize_0;\nloop invariant 0 <= i < ielen;\nloop invariant bufsize >= 2;\nloop invariant 0 <= p;\nloop invariant 0 < leader_len;\nloop invariant 0 < bufsize;\nloop invariant 0 < ielen;\nloop invariant unknown();\nloop invariant unknown();\nloop invariant unknown();\nloop invariant 0 < bufsize_0;\nloop invariant 0 <= p < bufsize_0;\nloop invariant bufsize_0 - (leader_len + ielen*2) <= bufsize;\nloop invariant bufsize <= bufsize_0 - leader_len;\nloop invariant leader_len <= bufsize_0;\n*/\n```",
                "```\n/*@\nloop invariant ( 0 <= p <= bufsize_0 ) ==> true;\nloop invariant ( 0 <= i <= ielen ) ==> true;\nloop invariant ( bufsize_0 >= bufsize ) ==> true;\nloop invariant ( bufsize >= leader_len ) ==> true;\nloop invariant ( bufsize >= 2*ielen ) ==> true;\nloop invariant ( i >= 0 ) ==> true;\nloop invariant ( i <= ielen ) ==> true;\nloop invariant ( p >= 0 ) ==> true;\nloop invariant ( p <= bufsize_0 ) ==> true;\nloop invariant ( bufsize + leader_len == bufsize_0 ) ==> true;\nloop invariant ( bufsize == bufsize_0 - leader_len ) ==> true;\nloop invariant ( p == bufsize_0 - bufsize ) ==> true;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= ielen;\nloop invariant leader_len <= p <= bufsize_0;\nloop invariant 0 <= bufsize <= bufsize_0;\nloop invariant 0 <= p <= bufsize_0;\nloop invariant bufsize < leader_len ==> i == 0;\nloop invariant bufsize >= leader_len ==> i >= 0;\nloop invariant bufsize < 2*ielen ==> i == ielen;\nloop invariant bufsize >= 2*ielen ==> i < ielen;\nloop invariant bufsize >= 2 ==> i >= 0;\nloop invariant bufsize < 2 ==> i == ielen;\nloop invariant bufsize >= 2*ielen ==> i >= 0;\nloop invariant bufsize < 2*ielen ==> i < ielen;\nloop invariant bufsize >= 2 ==> i < ielen;\nloop invariant bufsize < 2 ==> i == ielen;\nloop invariant bufsize >= 2*ielen ==> i < ielen;\nloop invariant bufsize < 2*ielen ==> i < ielen;\nloop invariant bufsize >= 2 ==> i < ielen;\nloop invariant bufsize < 2 ==> i == ielen;\nloop invariant bufsize >= 2*ielen ==> i < ielen;\nloop invariant bufsize < 2*ielen ==> i < ielen;\nloop invariant bufsize >= 2 ==> i < ielen;\nloop invariant bufsize < 2 ==> i == ielen;\nloop invariant bufsize >= 2*ielen ==> i < ielen;\nloop invariant bufsize < 2*ielen ==> i < ielen;\nloop invariant bufsize >= 2 ==> i < ielen;\nloop invariant bufsize < 2 ==> i == ielen;\nloop invariant bufsize >= 2*ielen ==> i < ielen;\nloop invariant bufsize < 2*ielen ==> i < ielen;\nloop invariant bufsize >= 2 ==> i < ielen;\nloop invariant bufsize < 2 ==> i == ielen;\nloop invariant bufsize >= 2*ielen ==> i < ielen;\nloop invariant bufsize < 2*ielen ==> i < ielen;\nloop invariant bufsize >= 2 ==> i < ielen;\nloop invariant bufsize < 2 ==> i == ielen;\nloop invariant bufsize >= 2*ielen ==> i < ielen;\nloop invariant bufsize < 2*ielen ==> i < ielen;\nloop invariant bufsize >= 2 ==> i < ielen;\nloop invariant bufsize < 2 ==> i == ielen;\nloop invariant bufsize >= 2*ielen ==> i < ielen;\nloop invariant bufsize < 2*ielen ==> i < ielen;\nloop invariant bufsize >= 2 ==> i < ielen;\nloop invariant bufsize < 2 ==> i == ielen;\nloop invariant bufsize >= 2*ielen ==> i < ielen;\nloop invariant bufsize < 2*ielen ==> i < ielen;\nloop invariant bufsize >= 2 ==> i < ielen;\nloop invariant bufsize < 2 ==> i == ielen;\nloop invariant bufsize >= 2*ielen ==> i < ielen;\nloop invariant bufsize < 2*ielen ==> i < ielen;\nloop invariant bufsize >= 2 ==> i < ielen;\nloop invariant bufsize < 2 ==> i == ielen;\nloop invariant bufsize >= 2*ielen ==> i < ielen;\nloop invariant bufsize < 2*ielen ==> i < ielen;\nloop invariant bufsize >= 2 ==> i < ielen;\nloop invariant bufsize < 2 ==> i == ielen;\nloop invariant bufsize >= 2*ielen ==> i < ielen;\nloop invariant bufsize < 2*ielen ==> i < ielen;\nloop invariant bufsize >= 2 ==> i < ielen;\nloop invariant bufsize < 2 ==> i == ielen;\nloop invariant bufsize >= 2*ielen ==> i < ielen;\nloop invariant bufsize < 2*ielen ==> i < ielen;\nloop invariant bufsize >= 2 ==> i < ielen;\nloop invariant bufsize < 2 ==> i == ielen;\nloop invariant bufsize >= 2*ielen ==> i < ielen;\nloop invariant bufsize < 2*ielen ==> i < ielen;\nloop invariant bufsize >= 2 ==> i < ielen;\nloop invariant bufsize < 2 ==> i == ielen;\nloop invariant bufsize >= 2*ielen ==> i < ielen;\nloop invariant bufsize < 2*ielen ==> i < ielen;\nloop invariant bufsize >= 2 ==> i < ielen;\nloop invariant bufsize < 2 ==> i == ielen;\nloop invariant bufsize >= 2*ielen ==> i < ielen;\nloop invariant bufsize < 2*ielen ==> i < ielen;\nloop invariant bufsize >= 2 ==> i < ielen;\nloop invariant bufsize < 2 ==> i == ielen;\nloop invariant bufsize >= 2*ielen ==> i < ielen;\nloop invariant bufsize < 2*ielen ==> i < ielen;\nloop invariant bufsize >= 2 ==> i < ielen;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= p < bufsize_0;\nloop invariant leader_len <= p <= bufsize_0;\nloop invariant 0 <= i <= ielen;\nloop invariant 2*i <= bufsize;\nloop invariant 2*i <= bufsize - leader_len;\nloop invariant 2*i < bufsize - leader_len;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= p <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant 0 <= i <= ielen;\nloop invariant bufsize - 2 * i >= 0;\nloop invariant bufsize >= bufsize_0 - 2 * i;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= leader_len;\nloop invariant bufsize <= bufsize_0 - leader_len;\nloop invariant bufsize <= bufsize_0 - 2 * ielen;\nloop invariant bufsize >= bufsize_0 - 2 * ielen;\nloop invariant bufsize >= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize <= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize - 2 * (i + 1) >= 0;\nloop invariant bufsize >= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize <= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize >= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize <= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize >= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize <= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize >= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize <= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize >= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize <= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize >= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize <= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize >= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize <= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize >= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize <= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize >= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize <= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize >= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize <= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize >= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize <= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize >= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize <= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize >= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize <= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize >= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize <= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize >= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize <= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize >= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize <= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize >= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize <= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize >= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize <= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize >= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize <= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize >= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize <= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize >= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize <= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize >= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize <= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize >= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize <= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize >= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize <= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize >= bufsize_0 - 2 * (i + 1);\n*/\n```",
                "```\n/*@\n\n*/\n```",
                "```\n/*@\nloop invariant 0 <= bufsize_0 <= bufsize_0;\nloop invariant bufsize > 0;\nloop invariant bufsize_0 > 0;\nloop invariant leader_len > 0;\nloop invariant bufsize < bufsize_0;\nloop invariant p >= 0;\nloop invariant i >= 0;\nloop invariant i <= ielen;\nloop invariant p <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant i >= 0;\nloop invariant p + 1 < bufsize_0;\nloop invariant bufsize >= 2 * i;\nloop invariant i < ielen;\nloop invariant p + 1 < bufsize_0;\nloop invariant p <= bufsize_0;\nloop invariant p >= 0;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= bufsize <= bufsize_0;\nloop invariant 0 <= i <= ielen;\nloop invariant p >= 0;\nloop invariant p <= bufsize_0;\nloop invariant i >= 0;\nloop invariant i < ielen;\nloop invariant bufsize >= 2;\nloop invariant bufsize < bufsize_0;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2*ielen;\nloop invariant bufsize <= bufsize_0 - 2*ielen;\nloop invariant bufsize >= 0;\nloop invariant bufsize < bufsize_0 - 2*ielen;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2*i;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= ielen;\nloop invariant 0 <= p <= bufsize_0;\nloop invariant 0 <= bufsize <= bufsize_0;\nloop invariant 0 <= bufsize_0 <= bufsize + leader_len;\nloop invariant 0 <= leader_len <= bufsize_0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= p <= bufsize_0;\nloop invariant 0 <= i <= ielen;\nloop invariant 0 <= bufsize <= bufsize_0 - leader_len;\nloop invariant bufsize >= 2;\nloop invariant 0 <= bufsize_0 - i * 2 <= bufsize;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant p >= 2 * i;\nloop invariant bufsize >= 2 * i;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize <= bufsize_0 - leader_len;\nloop invariant bufsize >= leader_len;\nloop invariant bufsize >= 2 * ielen;\nloop invariant bufsize_0 >= leader_len + 2 * ielen;\nloop invariant bufsize_0 >= leader_len;\nloop invariant bufsize_0 >= 0;\nloop invariant bufsize_0 >= 2 * ielen;\nloop invariant bufsize_0 >= leader_len + 2 * i;\nloop invariant bufsize_0 >= leader_len + 2 * i + 2;\nloop invariant bufsize_0 >= leader_len + 2 * i + 2 * ielen;\nloop invariant bufsize_0 >= leader_len + 2 * i + 2 * ielen - 2;\nloop invariant bufsize_0 >= leader_len + 2 * i + 2 * ielen - 2 - 2;\nloop invariant bufsize_0 >= leader_len + 2 * i + 2 * ielen - 2 - 2 - 2;\nloop invariant bufsize_0 >= leader_len + 2 * i + 2 * ielen - 2 - 2 - 2 - 2;\nloop invariant bufsize_0 >= leader_len + 2 * i + 2 * ielen - 2 - 2 - 2 - 2 - 2;\nloop invariant bufsize_0 >= leader_len + 2 * i + 2 * ielen - 2 - 2 - 2 - 2 - 2 - 2;\nloop invariant bufsize_0 >= leader_len + 2 * i + 2 * ielen - 2 - 2 - 2 - 2 - 2 - 2 - 2;\nloop invariant bufsize_0 >= leader_len + 2 * i + 2 * ielen - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2;\nloop invariant bufsize_0 >= leader_len + 2 * i + 2 * ielen - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2;\nloop invariant bufsize_0 >= leader_len + 2 * i + 2 * ielen - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2;\nloop invariant bufsize_0 >= leader_len + 2 * i + 2 * ielen - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2;\nloop invariant bufsize_0 >= leader_len + 2 * i + 2 * ielen - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2;\nloop invariant bufsize_0 >= leader_len + 2 * i + 2 * ielen - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2;\nloop invariant bufsize_0 >= leader_len + 2 * i + 2 * ielen - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2;\nloop invariant bufsize_0 >= leader_len + 2 * i + 2 * ielen - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2;\nloop invariant bufsize_0 >= leader_len + 2 * i + 2 * ielen - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= p;\nloop invariant p <= bufsize_0;\nloop invariant i >= 0;\nloop invariant i <= ielen;\nloop invariant 0 <= bufsize;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= leader_len;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize >= 2*i + 2;\nloop invariant bufsize >= bufsize_0 - 2*i - 2;\nloop invariant bufsize >= 2*i + 2 - bufsize_0;\nloop invariant bufsize >= 2*i + 2 - bufsize_0 + 2*i;\nloop invariant bufsize >= 2*i + 2 - bufsize_0 + 2*i - 2*i;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= bufsize_0 - 2*i - 2;\nloop invariant bufsize >= 2*i + 2 - bufsize_0 + 2*i - 2*i;\nloop invariant bufsize >= 2*i + 2 - bufsize_0 + 2*i - 2*i + 2*i;\nloop invariant bufsize >= 2*i + 2 - bufsize_0 + 2*i - 2*i + 2*i - 2*i;\nloop invariant bufsize >= 2*i + 2 - bufsize_0 + 2*i - 2*i + 2*i - 2*i + 2*i;\nloop invariant bufsize >= 2*i + 2 - bufsize_0 + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i;\nloop invariant bufsize >= 2*i + 2 - bufsize_0 + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i;\nloop invariant bufsize >= 2*i + 2 - bufsize_0 + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i;\nloop invariant bufsize >= 2*i + 2 - bufsize_0 + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i;\nloop invariant bufsize >= 2*i + 2 - bufsize_0 + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i;\nloop invariant bufsize >= 2*i + 2 - bufsize_0 + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i;\nloop invariant bufsize >= 2*i + 2 - bufsize_0 + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i;\nloop invariant bufsize >= 2*i + 2 - bufsize_0 + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i;\nloop invariant bufsize >= 2*i + 2 - bufsize_0 + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i;\nloop invariant bufsize >= 2*i + 2 - bufsize_0 + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i;\nloop invariant bufsize >= 2*i + 2 - bufsize_0 + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i;\n*/\n```"
            ],
            "completions": [
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= p <= bufsize_0;\nloop invariant i >= 0;\nloop invariant i <= ielen;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize <= bufsize_0-2*(ielen-i);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= p <= bufsize_0 is partially proven to be inductive.\nloop invariant i >= 0 is partially proven to be inductive.\nloop invariant i <= ielen is partially proven to be inductive.\nloop invariant bufsize >= 2*i is established but not preserved.\nloop invariant bufsize <= bufsize_0-2*(ielen-i) is preserved but not established.\nAssertion 0 <= p: Partially proven\nAssertion p + 1 < bufsize_0: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len = unknown();\n  int bufsize = unknown();\n  int bufsize_0 = unknown();\n  int ielen = unknown();\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= p <= bufsize_0;\nloop invariant i2: i >= 0;\nloop invariant i3: i <= ielen;\n\n\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= p <= bufsize_0;\nloop invariant bufsize_0 + leader_len >= bufsize;\nloop invariant 0 <= bufsize <= bufsize_0;\nloop invariant 0 <= i <= ielen;\nloop invariant ielen * 2 >= bufsize;\nloop invariant 0 <= p + 2 * i <= bufsize_0;\nloop invariant p + 2 * i <= bufsize;\nloop invariant bufsize + leader_len >= bufsize_0;\nloop invariant bufsize + leader_len <= bufsize_0;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= p <= bufsize_0 is partially proven to be inductive.\nloop invariant bufsize_0 + leader_len >= bufsize is partially proven to be inductive.\nloop invariant 0 <= bufsize <= bufsize_0 is partially proven to be inductive.\nloop invariant 0 <= i <= ielen is partially proven to be inductive.\nloop invariant ielen * 2 >= bufsize is preserved but not established.\nloop invariant 0 <= p + 2 * i <= bufsize_0 is established but not preserved.\nloop invariant p + 2 * i <= bufsize is neither established nor preserved.\nloop invariant bufsize + leader_len >= bufsize_0 is partially proven to be inductive.\nloop invariant bufsize + leader_len <= bufsize_0 is partially proven to be inductive.\nloop invariant bufsize_0 - leader_len <= bufsize is partially proven to be inductive.\nAssertion 0 <= p: Partially proven\nAssertion p + 1 < bufsize_0: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len = unknown();\n  int bufsize = unknown();\n  int bufsize_0 = unknown();\n  int ielen = unknown();\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= p <= bufsize_0;\nloop invariant i2: bufsize_0 + leader_len >= bufsize;\nloop invariant i3: 0 <= bufsize <= bufsize_0;\nloop invariant i4: 0 <= i <= ielen;\n\n\n\nloop invariant i8: bufsize + leader_len >= bufsize_0;\nloop invariant i9: bufsize + leader_len <= bufsize_0;\nloop invariant i10: bufsize_0 - leader_len <= bufsize;\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 6,
                    "annotations": "```\n/*@\nloop invariant i <= ielen;\nloop invariant p > 0;\nloop invariant p <= bufsize_0;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2 * i;\nloop invariant bufsize >= 2 * (i + 1);\nloop invariant p >= leader_len;\nloop invariant p <= bufsize_0 - 2;\nloop invariant p <= bufsize_0 - 2 * (i + 1);\nloop invariant p <= bufsize_0 - 2 * ielen;\nloop invariant p >= leader_len + 2 * i;\nloop invariant p >= leader_len + 2 * (i + 1);\nloop invariant p >= leader_len + 2 * ielen;\nloop invariant p >= leader_len + 2 * (i + 1);\nloop invariant p >= leader_len + 2 * ielen;\nloop invariant p >= leader_len + 2 * (i + 1);\nloop invariant p >= leader_len + 2 * ielen;\nloop invariant p >= leader_len + 2 * (i + 1);\nloop invariant p >= leader_len + 2 * ielen;\nloop invariant p >= leader_len + 2 * (i + 1);\nloop invariant p >= leader_len + 2 * ielen;\nloop invariant p >= leader_len + 2 * (i + 1);\nloop invariant p >= leader_len + 2 * ielen;\nloop invariant p >= leader_len + 2 * (i + 1);\nloop invariant p >= leader_len + 2 * ielen;\nloop invariant p >= leader_len + 2 * (i + 1);\nloop invariant p >= leader_len + 2 * ielen;\nloop invariant p >= leader_len + 2 * (i + 1);\nloop invariant p >= leader_len + 2 * ielen;\nloop invariant p >= leader_len + 2 * (i + 1);\nloop invariant p >= leader_len + 2 * ielen;\nloop invariant p >= leader_len + 2 * (i + 1);\nloop invariant p >= leader_len + 2 * ielen;\nloop invariant p >= leader_len + 2 * (i + 1);\nloop invariant p >= leader_len + 2 * ielen;\nloop invariant p >= leader_len + 2 * (i + 1);\nloop invariant p >= leader_len + 2 * ielen;\nloop invariant p >= leader_len + 2 * (i + 1);\nloop invariant p >= leader_len + 2 * ielen;\nloop invariant p >= leader_len + 2 * (i + 1);\nloop invariant p >= leader_len + 2 * ielen;\nloop invariant p >= leader_len + 2 * (i + 1);\nloop invariant p >= leader_len + 2 * ielen;\nloop invariant p >= leader_len + 2 * (i + 1);\nloop invariant p >= leader_len + 2 * ielen;\nloop invariant p >= leader_len + 2 * (i + 1);\nloop invariant p >= leader_len + 2 * ielen;\nloop invariant p >= leader_len + 2 * (i + 1);\nloop invariant p >= leader_len + 2 * ielen;\nloop invariant p >= leader_len + 2 * (i + 1);\nloop invariant p >= leader_len + 2 * ielen;\nloop invariant p >= leader_len + 2 * (i + 1);\nloop invariant p >= leader_len + 2 * ielen;\nloop invariant p >= leader_len + 2 * (i + 1);\nloop invariant p >= leader_len + 2 * ielen;\nloop invariant p >= leader_len + 2 * (i + 1);\nloop invariant p >= leader_len + 2 * ielen;\nloop invariant p >= leader_len + 2 * (i + 1);\nloop invariant p >= leader_len + 2 * ielen;\nloop invariant p >= leader_len + 2 * (i + 1);\nloop invariant p >= leader_len + 2 * ielen;\nloop invariant p >= leader_len + 2 * (i + 1);\nloop invariant p >= leader_len + 2 * ielen;\nloop invariant p >= leader_len + 2 * (i + 1);\nloop invariant p >= leader_len + 2 * ielen;\nloop invariant p >= leader_len + 2 * (i + 1);\nloop invariant p >= leader_len + 2 * ielen;\nloop invariant p >= leader_len + 2 * (i + 1);\nloop invariant p >= leader_len + 2 * ielen;\nloop invariant p >= leader_len + 2 * (i + 1);\nloop invariant p >= leader_len + 2 * ielen;\nloop invariant p >= leader_len + 2 * (i + 1);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant i <= ielen is partially proven to be inductive.\nloop invariant p > 0 is partially proven to be inductive.\nloop invariant p <= bufsize_0 is partially proven to be inductive.\nloop invariant bufsize >= 2 is partially proven to be inductive.\nloop invariant bufsize >= 2 * i is partially proven to be inductive.\nloop invariant bufsize >= 2 * (i + 1) is partially proven to be inductive.\nloop invariant p >= leader_len is partially proven to be inductive.\nloop invariant p <= bufsize_0 - 2 is partially proven to be inductive.\nloop invariant p <= bufsize_0 - 2 * (i + 1) is partially proven to be inductive.\nloop invariant p <= bufsize_0 - 2 * ielen is partially proven to be inductive.\nloop invariant p >= leader_len + 2 * i is partially proven to be inductive.\nloop invariant p >= leader_len + 2 * (i + 1) is preserved but not established.\nloop invariant p >= leader_len + 2 * ielen is partially proven to be inductive.\nAssertion 0 <= p: Partially proven\nAssertion p + 1 < bufsize_0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len = unknown();\n  int bufsize = unknown();\n  int bufsize_0 = unknown();\n  int ielen = unknown();\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: i <= ielen;\nloop invariant i2: p > 0;\nloop invariant i3: p <= bufsize_0;\nloop invariant i4: bufsize >= 2;\n\n\nloop invariant i7: p >= leader_len;\n\n\n\nloop invariant i11: p >= leader_len + 2 * i;\n\n\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= ielen;\nloop invariant 0 <= p <= bufsize_0;\nloop invariant 0 <= bufsize <= bufsize_0;\nloop invariant leader_len <= bufsize_0;\nloop invariant bufsize <= bufsize_0 - leader_len;\nloop invariant bufsize >= 2*i;\nloop invariant p >= leader_len;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize_0 - 2*i;\nloop invariant p <= bufsize_0 - leader_len;\nloop invariant (i == 0 ==> bufsize >= 2*ielen);\nloop invariant (i > 0 ==> bufsize < 2*ielen);\nloop invariant (i == 0 ==> p == leader_len);\nloop invariant (i > 0 ==> p > leader_len);\nloop invariant (i == 0 ==> bufsize >= 2);\nloop invariant (i > 0 ==> bufsize < 2);\nloop invariant (i == 0 ==> bufsize >= 2*ielen);\nloop invariant (i > 0 ==> bufsize < 2*ielen);\nloop invariant (i == 0 ==> p == leader_len);\nloop invariant (i > 0 ==> p > leader_len);\nloop invariant (i == 0 ==> bufsize >= 2);\nloop invariant (i > 0 ==> bufsize < 2);\nloop invariant (i == 0 ==> bufsize >= 2*ielen);\nloop invariant (i > 0 ==> bufsize < 2*ielen);\nloop invariant (i == 0 ==> p == leader_len);\nloop invariant (i > 0 ==> p > leader_len);\nloop invariant (i == 0 ==> bufsize >= 2);\nloop invariant (i > 0 ==> bufsize < 2);\nloop invariant (i == 0 ==> bufsize >= 2*ielen);\nloop invariant (i > 0 ==> bufsize < 2*ielen);\nloop invariant (i == 0 ==> p == leader_len);\nloop invariant (i > 0 ==> p > leader_len);\nloop invariant (i == 0 ==> bufsize >= 2);\nloop invariant (i > 0 ==> bufsize < 2);\nloop invariant (i == 0 ==> bufsize >= 2*ielen);\nloop invariant (i > 0 ==> bufsize < 2*ielen);\nloop invariant (i == 0 ==> p == leader_len);\nloop invariant (i > 0 ==> p > leader_len);\nloop invariant (i == 0 ==> bufsize >= 2);\nloop invariant (i > 0 ==> bufsize < 2);\nloop invariant (i == 0 ==> bufsize >= 2*ielen);\nloop invariant (i > 0 ==> bufsize < 2*ielen);\nloop invariant (i == 0 ==> p == leader_len);\nloop invariant (i > 0 ==> p > leader_len);\nloop invariant (i == 0 ==> bufsize >= 2);\nloop invariant (i > 0 ==> bufsize < 2);\nloop invariant (i == 0 ==> bufsize >= 2*ielen);\nloop invariant (i > 0 ==> bufsize < 2*ielen);\nloop invariant (i == 0 ==> p == leader_len);\nloop invariant (i > 0 ==> p > leader_len);\nloop invariant (i == 0 ==> bufsize >= 2);\nloop invariant (i > 0 ==> bufsize < 2);\nloop invariant (i == 0 ==> bufsize >= 2*ielen);\nloop invariant (i > 0 ==> bufsize < 2*ielen);\nloop invariant (i == 0 ==> p == leader_len);\nloop invariant (i > 0 ==> p > leader_len);\nloop invariant (i == 0 ==> bufsize >= 2);\nloop invariant (i > 0 ==> bufsize < 2);\nloop invariant (i == 0 ==> bufsize >= 2*ielen);\nloop invariant (i > 0 ==> bufsize < 2*ielen);\nloop invariant (i == 0 ==> p == leader_len);\nloop invariant (i > 0 ==> p > leader_len);\nloop invariant (i == 0 ==> bufsize >= 2);\nloop invariant (i > 0 ==> bufsize < 2);\nloop invariant (i == 0 ==> bufsize >= 2*ielen);\nloop invariant (i > 0 ==> bufsize < 2*ielen);\nloop invariant (i == 0 ==> p == leader_len);\nloop invariant (i > 0 ==> p > leader_len);\nloop invariant (i == 0 ==> bufsize >= 2);\nloop invariant (i > 0 ==> bufsize < 2);\nloop invariant (i == 0 ==> bufsize >= 2*ielen);\nloop invariant (i > 0 ==> bufsize < 2*ielen);\nloop invariant (i == 0 ==> p == leader_len);\nloop invariant (i > 0 ==> p > leader_len);\nloop invariant (i == 0 ==> bufsize >= 2);\nloop invariant (i > 0 ==> bufsize < 2);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= ielen is partially proven to be inductive.\nloop invariant 0 <= p <= bufsize_0 is partially proven to be inductive.\nloop invariant 0 <= bufsize <= bufsize_0 is partially proven to be inductive.\nloop invariant leader_len <= bufsize_0 is partially proven to be inductive.\nloop invariant bufsize <= bufsize_0 - leader_len is partially proven to be inductive.\nloop invariant bufsize >= 2*i is partially proven to be inductive.\nloop invariant p >= leader_len is partially proven to be inductive.\nloop invariant p <= bufsize_0 is partially proven to be inductive.\nloop invariant p <= bufsize_0 - 2*i is established but not preserved.\nloop invariant p <= bufsize_0 - leader_len is neither established nor preserved.\nloop invariant (i == 0 ==> bufsize >= 2*ielen) is partially proven to be inductive.\nloop invariant (i > 0 ==> bufsize < 2*ielen) is established but not preserved.\nloop invariant (i == 0 ==> p == leader_len) is partially proven to be inductive.\nloop invariant (i > 0 ==> p > leader_len) is partially proven to be inductive.\nloop invariant (i == 0 ==> bufsize >= 2) is partially proven to be inductive.\nloop invariant (i > 0 ==> bufsize < 2) is partially proven to be inductive.\nAssertion 0 <= p: Partially proven\nAssertion p + 1 < bufsize_0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len = unknown();\n  int bufsize = unknown();\n  int bufsize_0 = unknown();\n  int ielen = unknown();\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= i <= ielen;\nloop invariant i2: 0 <= p <= bufsize_0;\nloop invariant i3: 0 <= bufsize <= bufsize_0;\nloop invariant i4: leader_len <= bufsize_0;\nloop invariant i5: bufsize <= bufsize_0 - leader_len;\n\nloop invariant i7: p >= leader_len;\nloop invariant i8: p <= bufsize_0;\n\n\nloop invariant i11: (i == 0 ==> bufsize >= 2*ielen);\n\nloop invariant i13: (i == 0 ==> p == leader_len);\nloop invariant i14: (i > 0 ==> p > leader_len);\nloop invariant i15: (i == 0 ==> bufsize >= 2);\n\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 < bufsize_0;\nloop invariant 0 <= p < bufsize_0;\nloop invariant bufsize_0 - (leader_len + ielen*2) <= bufsize;\nloop invariant bufsize <= bufsize_0 - leader_len;\nloop invariant leader_len <= bufsize_0;\nloop invariant 0 <= i < ielen;\nloop invariant bufsize >= 2;\nloop invariant 0 <= p;\nloop invariant 0 < leader_len;\nloop invariant 0 < bufsize;\nloop invariant 0 < ielen;\nloop invariant unknown();\nloop invariant unknown();\nloop invariant unknown();\nloop invariant 0 < bufsize_0;\nloop invariant 0 <= p < bufsize_0;\nloop invariant bufsize_0 - (leader_len + ielen*2) <= bufsize;\nloop invariant bufsize <= bufsize_0 - leader_len;\nloop invariant leader_len <= bufsize_0;\nloop invariant 0 <= i < ielen;\nloop invariant bufsize >= 2;\nloop invariant 0 <= p;\nloop invariant 0 < leader_len;\nloop invariant 0 < bufsize;\nloop invariant 0 < ielen;\nloop invariant unknown();\nloop invariant unknown();\nloop invariant unknown();\nloop invariant 0 < bufsize_0;\nloop invariant 0 <= p < bufsize_0;\nloop invariant bufsize_0 - (leader_len + ielen*2) <= bufsize;\nloop invariant bufsize <= bufsize_0 - leader_len;\nloop invariant leader_len <= bufsize_0;\nloop invariant 0 <= i < ielen;\nloop invariant bufsize >= 2;\nloop invariant 0 <= p;\nloop invariant 0 < leader_len;\nloop invariant 0 < bufsize;\nloop invariant 0 < ielen;\nloop invariant unknown();\nloop invariant unknown();\nloop invariant unknown();\nloop invariant 0 < bufsize_0;\nloop invariant 0 <= p < bufsize_0;\nloop invariant bufsize_0 - (leader_len + ielen*2) <= bufsize;\nloop invariant bufsize <= bufsize_0 - leader_len;\nloop invariant leader_len <= bufsize_0;\nloop invariant 0 <= i < ielen;\nloop invariant bufsize >= 2;\nloop invariant 0 <= p;\nloop invariant 0 < leader_len;\nloop invariant 0 < bufsize;\nloop invariant 0 < ielen;\nloop invariant unknown();\nloop invariant unknown();\nloop invariant unknown();\nloop invariant 0 < bufsize_0;\nloop invariant 0 <= p < bufsize_0;\nloop invariant bufsize_0 - (leader_len + ielen*2) <= bufsize;\nloop invariant bufsize <= bufsize_0 - leader_len;\nloop invariant leader_len <= bufsize_0;\nloop invariant 0 <= i < ielen;\nloop invariant bufsize >= 2;\nloop invariant 0 <= p;\nloop invariant 0 < leader_len;\nloop invariant 0 < bufsize;\nloop invariant 0 < ielen;\nloop invariant unknown();\nloop invariant unknown();\nloop invariant unknown();\nloop invariant 0 < bufsize_0;\nloop invariant 0 <= p < bufsize_0;\nloop invariant bufsize_0 - (leader_len + ielen*2) <= bufsize;\nloop invariant bufsize <= bufsize_0 - leader_len;\nloop invariant leader_len <= bufsize_0;\nloop invariant 0 <= i < ielen;\nloop invariant bufsize >= 2;\nloop invariant 0 <= p;\nloop invariant 0 < leader_len;\nloop invariant 0 < bufsize;\nloop invariant 0 < ielen;\nloop invariant unknown();\nloop invariant unknown();\nloop invariant unknown();\nloop invariant 0 < bufsize_0;\nloop invariant 0 <= p < bufsize_0;\nloop invariant bufsize_0 - (leader_len + ielen*2) <= bufsize;\nloop invariant bufsize <= bufsize_0 - leader_len;\nloop invariant leader_len <= bufsize_0;\nloop invariant 0 <= i < ielen;\nloop invariant bufsize >= 2;\nloop invariant 0 <= p;\nloop invariant 0 < leader_len;\nloop invariant 0 < bufsize;\nloop invariant 0 < ielen;\nloop invariant unknown();\nloop invariant unknown();\nloop invariant unknown();\nloop invariant 0 < bufsize_0;\nloop invariant 0 <= p < bufsize_0;\nloop invariant bufsize_0 - (leader_len + ielen*2) <= bufsize;\nloop invariant bufsize <= bufsize_0 - leader_len;\nloop invariant leader_len <= bufsize_0;\nloop invariant 0 <= i < ielen;\nloop invariant bufsize >= 2;\nloop invariant 0 <= p;\nloop invariant 0 < leader_len;\nloop invariant 0 < bufsize;\nloop invariant 0 < ielen;\nloop invariant unknown();\nloop invariant unknown();\nloop invariant unknown();\nloop invariant 0 < bufsize_0;\nloop invariant 0 <= p < bufsize_0;\nloop invariant bufsize_0 - (leader_len + ielen*2) <= bufsize;\nloop invariant bufsize <= bufsize_0 - leader_len;\nloop invariant leader_len <= bufsize_0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 49: unexpected token ')'",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len = unknown();\n  int bufsize = unknown();\n  int bufsize_0 = unknown();\n  int ielen = unknown();\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 < bufsize_0;\n\nloop invariant i3: bufsize_0 - (leader_len + ielen*2) <= bufsize;\nloop invariant i4: bufsize <= bufsize_0 - leader_len;\nloop invariant i5: leader_len <= bufsize_0;\n\nloop invariant i7: bufsize >= 2;\nloop invariant i8: 0 <= p;\nloop invariant i9: 0 < leader_len;\nloop invariant i10: 0 < bufsize;\nloop invariant i11: 0 < ielen;\n\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 13,
                    "annotations": "```\n/*@\nloop invariant ( 0 <= p <= bufsize_0 ) ==> true;\nloop invariant ( 0 <= i <= ielen ) ==> true;\nloop invariant ( bufsize_0 >= bufsize ) ==> true;\nloop invariant ( bufsize >= leader_len ) ==> true;\nloop invariant ( bufsize >= 2*ielen ) ==> true;\nloop invariant ( i >= 0 ) ==> true;\nloop invariant ( i <= ielen ) ==> true;\nloop invariant ( p >= 0 ) ==> true;\nloop invariant ( p <= bufsize_0 ) ==> true;\nloop invariant ( bufsize + leader_len == bufsize_0 ) ==> true;\nloop invariant ( bufsize == bufsize_0 - leader_len ) ==> true;\nloop invariant ( p == bufsize_0 - bufsize ) ==> true;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 38: unbound logic variable true. Ignoring loop annotation",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len = unknown();\n  int bufsize = unknown();\n  int bufsize_0 = unknown();\n  int ielen = unknown();\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= ielen;\nloop invariant leader_len <= p <= bufsize_0;\nloop invariant 0 <= bufsize <= bufsize_0;\nloop invariant 0 <= p <= bufsize_0;\nloop invariant bufsize < leader_len ==> i == 0;\nloop invariant bufsize >= leader_len ==> i >= 0;\nloop invariant bufsize < 2*ielen ==> i == ielen;\nloop invariant bufsize >= 2*ielen ==> i < ielen;\nloop invariant bufsize >= 2 ==> i >= 0;\nloop invariant bufsize < 2 ==> i == ielen;\nloop invariant bufsize >= 2*ielen ==> i >= 0;\nloop invariant bufsize < 2*ielen ==> i < ielen;\nloop invariant bufsize >= 2 ==> i < ielen;\nloop invariant bufsize < 2 ==> i == ielen;\nloop invariant bufsize >= 2*ielen ==> i < ielen;\nloop invariant bufsize < 2*ielen ==> i < ielen;\nloop invariant bufsize >= 2 ==> i < ielen;\nloop invariant bufsize < 2 ==> i == ielen;\nloop invariant bufsize >= 2*ielen ==> i < ielen;\nloop invariant bufsize < 2*ielen ==> i < ielen;\nloop invariant bufsize >= 2 ==> i < ielen;\nloop invariant bufsize < 2 ==> i == ielen;\nloop invariant bufsize >= 2*ielen ==> i < ielen;\nloop invariant bufsize < 2*ielen ==> i < ielen;\nloop invariant bufsize >= 2 ==> i < ielen;\nloop invariant bufsize < 2 ==> i == ielen;\nloop invariant bufsize >= 2*ielen ==> i < ielen;\nloop invariant bufsize < 2*ielen ==> i < ielen;\nloop invariant bufsize >= 2 ==> i < ielen;\nloop invariant bufsize < 2 ==> i == ielen;\nloop invariant bufsize >= 2*ielen ==> i < ielen;\nloop invariant bufsize < 2*ielen ==> i < ielen;\nloop invariant bufsize >= 2 ==> i < ielen;\nloop invariant bufsize < 2 ==> i == ielen;\nloop invariant bufsize >= 2*ielen ==> i < ielen;\nloop invariant bufsize < 2*ielen ==> i < ielen;\nloop invariant bufsize >= 2 ==> i < ielen;\nloop invariant bufsize < 2 ==> i == ielen;\nloop invariant bufsize >= 2*ielen ==> i < ielen;\nloop invariant bufsize < 2*ielen ==> i < ielen;\nloop invariant bufsize >= 2 ==> i < ielen;\nloop invariant bufsize < 2 ==> i == ielen;\nloop invariant bufsize >= 2*ielen ==> i < ielen;\nloop invariant bufsize < 2*ielen ==> i < ielen;\nloop invariant bufsize >= 2 ==> i < ielen;\nloop invariant bufsize < 2 ==> i == ielen;\nloop invariant bufsize >= 2*ielen ==> i < ielen;\nloop invariant bufsize < 2*ielen ==> i < ielen;\nloop invariant bufsize >= 2 ==> i < ielen;\nloop invariant bufsize < 2 ==> i == ielen;\nloop invariant bufsize >= 2*ielen ==> i < ielen;\nloop invariant bufsize < 2*ielen ==> i < ielen;\nloop invariant bufsize >= 2 ==> i < ielen;\nloop invariant bufsize < 2 ==> i == ielen;\nloop invariant bufsize >= 2*ielen ==> i < ielen;\nloop invariant bufsize < 2*ielen ==> i < ielen;\nloop invariant bufsize >= 2 ==> i < ielen;\nloop invariant bufsize < 2 ==> i == ielen;\nloop invariant bufsize >= 2*ielen ==> i < ielen;\nloop invariant bufsize < 2*ielen ==> i < ielen;\nloop invariant bufsize >= 2 ==> i < ielen;\nloop invariant bufsize < 2 ==> i == ielen;\nloop invariant bufsize >= 2*ielen ==> i < ielen;\nloop invariant bufsize < 2*ielen ==> i < ielen;\nloop invariant bufsize >= 2 ==> i < ielen;\nloop invariant bufsize < 2 ==> i == ielen;\nloop invariant bufsize >= 2*ielen ==> i < ielen;\nloop invariant bufsize < 2*ielen ==> i < ielen;\nloop invariant bufsize >= 2 ==> i < ielen;\nloop invariant bufsize < 2 ==> i == ielen;\nloop invariant bufsize >= 2*ielen ==> i < ielen;\nloop invariant bufsize < 2*ielen ==> i < ielen;\nloop invariant bufsize >= 2 ==> i < ielen;\nloop invariant bufsize < 2 ==> i == ielen;\nloop invariant bufsize >= 2*ielen ==> i < ielen;\nloop invariant bufsize < 2*ielen ==> i < ielen;\nloop invariant bufsize >= 2 ==> i < ielen;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= ielen is partially proven to be inductive.\nloop invariant leader_len <= p <= bufsize_0 is partially proven to be inductive.\nloop invariant 0 <= bufsize <= bufsize_0 is partially proven to be inductive.\nloop invariant 0 <= p <= bufsize_0 is partially proven to be inductive.\nloop invariant bufsize < leader_len ==> i == 0 is established but not preserved.\nloop invariant bufsize >= leader_len ==> i >= 0 is partially proven to be inductive.\nloop invariant bufsize < 2*ielen ==> i == ielen is partially proven to be inductive.\nloop invariant bufsize >= 2*ielen ==> i < ielen is established but not preserved.\nloop invariant bufsize >= 2 ==> i >= 0 is partially proven to be inductive.\nloop invariant bufsize < 2 ==> i == ielen is partially proven to be inductive.\nloop invariant bufsize >= 2*ielen ==> i >= 0 is partially proven to be inductive.\nloop invariant bufsize < 2*ielen ==> i < ielen is partially proven to be inductive.\nloop invariant bufsize >= 2 ==> i < ielen is partially proven to be inductive.\nAssertion 0 <= p: Partially proven\nAssertion p + 1 < bufsize_0: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len = unknown();\n  int bufsize = unknown();\n  int bufsize_0 = unknown();\n  int ielen = unknown();\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= i <= ielen;\nloop invariant i2: leader_len <= p <= bufsize_0;\nloop invariant i3: 0 <= bufsize <= bufsize_0;\nloop invariant i4: 0 <= p <= bufsize_0;\n\nloop invariant i6: bufsize >= leader_len ==> i >= 0;\nloop invariant i7: bufsize < 2*ielen ==> i == ielen;\n\nloop invariant i9: bufsize >= 2 ==> i >= 0;\nloop invariant i10: bufsize < 2 ==> i == ielen;\nloop invariant i11: bufsize >= 2*ielen ==> i >= 0;\nloop invariant i12: bufsize < 2*ielen ==> i < ielen;\n\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= p < bufsize_0;\nloop invariant leader_len <= p <= bufsize_0;\nloop invariant 0 <= i <= ielen;\nloop invariant 2*i <= bufsize;\nloop invariant 2*i <= bufsize - leader_len;\nloop invariant 2*i < bufsize - leader_len;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= p < bufsize_0 is established but not preserved.\nloop invariant leader_len <= p <= bufsize_0 is partially proven to be inductive.\nloop invariant 0 <= i <= ielen is partially proven to be inductive.\nloop invariant 2*i <= bufsize is established but not preserved.\nloop invariant 2*i <= bufsize - leader_len is neither established nor preserved.\nloop invariant 2*i < bufsize - leader_len is neither established nor preserved.\nAssertion 0 <= p: Partially proven\nAssertion p + 1 < bufsize_0: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len = unknown();\n  int bufsize = unknown();\n  int bufsize_0 = unknown();\n  int ielen = unknown();\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\n\nloop invariant i2: leader_len <= p <= bufsize_0;\nloop invariant i3: 0 <= i <= ielen;\n\n\n\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 6,
                    "annotations": "```\n/*@\nloop invariant 0 <= p <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant 0 <= i <= ielen;\nloop invariant bufsize - 2 * i >= 0;\nloop invariant bufsize >= bufsize_0 - 2 * i;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= leader_len;\nloop invariant bufsize <= bufsize_0 - leader_len;\nloop invariant bufsize <= bufsize_0 - 2 * ielen;\nloop invariant bufsize >= bufsize_0 - 2 * ielen;\nloop invariant bufsize >= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize <= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize - 2 * (i + 1) >= 0;\nloop invariant bufsize >= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize <= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize >= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize <= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize >= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize <= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize >= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize <= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize >= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize <= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize >= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize <= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize >= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize <= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize >= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize <= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize >= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize <= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize >= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize <= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize >= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize <= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize >= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize <= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize >= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize <= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize >= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize <= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize >= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize <= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize >= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize <= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize >= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize <= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize >= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize <= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize >= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize <= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize >= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize <= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize >= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize <= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize >= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize <= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize >= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize <= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize >= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize <= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize >= bufsize_0 - 2 * (i + 1);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= p <= bufsize_0 is partially proven to be inductive.\nloop invariant bufsize >= 0 is partially proven to be inductive.\nloop invariant 0 <= i <= ielen is partially proven to be inductive.\nloop invariant bufsize - 2 * i >= 0 is partially proven to be inductive.\nloop invariant bufsize >= bufsize_0 - 2 * i is preserved but not established.\nloop invariant bufsize <= bufsize_0 is partially proven to be inductive.\nloop invariant bufsize >= leader_len is partially proven to be inductive.\nloop invariant bufsize <= bufsize_0 - leader_len is partially proven to be inductive.\nloop invariant bufsize <= bufsize_0 - 2 * ielen is partially proven to be inductive.\nloop invariant bufsize >= bufsize_0 - 2 * ielen is partially proven to be inductive.\nloop invariant bufsize >= bufsize_0 - 2 * (i + 1) is partially proven to be inductive.\nloop invariant bufsize <= bufsize_0 - 2 * (i + 1) is partially proven to be inductive.\nloop invariant bufsize - 2 * (i + 1) >= 0 is partially proven to be inductive.\nAssertion 0 <= p: Partially proven\nAssertion p + 1 < bufsize_0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len = unknown();\n  int bufsize = unknown();\n  int bufsize_0 = unknown();\n  int ielen = unknown();\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= p <= bufsize_0;\nloop invariant i2: bufsize >= 0;\nloop invariant i3: 0 <= i <= ielen;\n\n\nloop invariant i6: bufsize <= bufsize_0;\n\nloop invariant i8: bufsize <= bufsize_0 - leader_len;\n\n\n\n\n\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 1,
                    "annotations": "```\n/*@\n\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 38: unexpected token ''",
                    "houdini_error": "No annotations found"
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= bufsize_0 <= bufsize_0;\nloop invariant bufsize > 0;\nloop invariant bufsize_0 > 0;\nloop invariant leader_len > 0;\nloop invariant bufsize < bufsize_0;\nloop invariant p >= 0;\nloop invariant i >= 0;\nloop invariant i <= ielen;\nloop invariant p <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant i >= 0;\nloop invariant p + 1 < bufsize_0;\nloop invariant bufsize >= 2 * i;\nloop invariant i < ielen;\nloop invariant p + 1 < bufsize_0;\nloop invariant p <= bufsize_0;\nloop invariant p >= 0;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= bufsize_0 <= bufsize_0 is partially proven to be inductive.\nloop invariant bufsize > 0 is partially proven to be inductive.\nloop invariant bufsize_0 > 0 is partially proven to be inductive.\nloop invariant leader_len > 0 is partially proven to be inductive.\nloop invariant bufsize < bufsize_0 is partially proven to be inductive.\nloop invariant p >= 0 is partially proven to be inductive.\nloop invariant i >= 0 is partially proven to be inductive.\nloop invariant i <= ielen is partially proven to be inductive.\nloop invariant p <= bufsize_0 is partially proven to be inductive.\nloop invariant p + 1 < bufsize_0 is established but not preserved.\nloop invariant bufsize >= 2 * i is established but not preserved.\nloop invariant i < ielen is established but not preserved.\nloop invariant bufsize >= 2 is partially proven to be inductive.\nAssertion 0 <= p: Partially proven\nAssertion p + 1 < bufsize_0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len = unknown();\n  int bufsize = unknown();\n  int bufsize_0 = unknown();\n  int ielen = unknown();\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= bufsize_0 <= bufsize_0;\nloop invariant i2: bufsize > 0;\nloop invariant i3: bufsize_0 > 0;\nloop invariant i4: leader_len > 0;\nloop invariant i5: bufsize < bufsize_0;\nloop invariant i6: p >= 0;\nloop invariant i7: i >= 0;\nloop invariant i8: i <= ielen;\nloop invariant i9: p <= bufsize_0;\n\n\n\nloop invariant i13: bufsize >= 2;\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= bufsize <= bufsize_0;\nloop invariant 0 <= i <= ielen;\nloop invariant p >= 0;\nloop invariant p <= bufsize_0;\nloop invariant i >= 0;\nloop invariant i < ielen;\nloop invariant bufsize >= 2;\nloop invariant bufsize < bufsize_0;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2*ielen;\nloop invariant bufsize <= bufsize_0 - 2*ielen;\nloop invariant bufsize >= 0;\nloop invariant bufsize < bufsize_0 - 2*ielen;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2*i;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= bufsize <= bufsize_0 is partially proven to be inductive.\nloop invariant 0 <= i <= ielen is partially proven to be inductive.\nloop invariant p >= 0 is partially proven to be inductive.\nloop invariant p <= bufsize_0 is partially proven to be inductive.\nloop invariant i >= 0 is partially proven to be inductive.\nloop invariant i < ielen is established but not preserved.\nloop invariant bufsize >= 2 is partially proven to be inductive.\nloop invariant bufsize < bufsize_0 is partially proven to be inductive.\nloop invariant bufsize >= 2*i is partially proven to be inductive.\nloop invariant bufsize <= bufsize_0 - 2*i is partially proven to be inductive.\nloop invariant bufsize >= 2*ielen is partially proven to be inductive.\nloop invariant bufsize <= bufsize_0 - 2*ielen is preserved but not established.\nloop invariant bufsize >= 0 is partially proven to be inductive.\nloop invariant bufsize < bufsize_0 - 2*ielen is preserved but not established.\nAssertion 0 <= p: Partially proven\nAssertion p + 1 < bufsize_0: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len = unknown();\n  int bufsize = unknown();\n  int bufsize_0 = unknown();\n  int ielen = unknown();\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= bufsize <= bufsize_0;\nloop invariant i2: 0 <= i <= ielen;\nloop invariant i3: p >= 0;\nloop invariant i4: p <= bufsize_0;\nloop invariant i5: i >= 0;\n\nloop invariant i7: bufsize >= 2;\nloop invariant i8: bufsize < bufsize_0;\nloop invariant i9: bufsize >= 2*i;\n\nloop invariant i11: bufsize >= 2*ielen;\n\nloop invariant i13: bufsize >= 0;\n\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= ielen;\nloop invariant 0 <= p <= bufsize_0;\nloop invariant 0 <= bufsize <= bufsize_0;\nloop invariant 0 <= bufsize_0 <= bufsize + leader_len;\nloop invariant 0 <= leader_len <= bufsize_0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= ielen is partially proven to be inductive.\nloop invariant 0 <= p <= bufsize_0 is partially proven to be inductive.\nloop invariant 0 <= bufsize <= bufsize_0 is partially proven to be inductive.\nloop invariant 0 <= bufsize_0 <= bufsize + leader_len is partially proven to be inductive.\nloop invariant 0 <= leader_len <= bufsize_0 is partially proven to be inductive.\nAssertion 0 <= p: Valid\nAssertion p + 1 < bufsize_0: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len = unknown();\n  int bufsize = unknown();\n  int bufsize_0 = unknown();\n  int ielen = unknown();\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= i <= ielen;\nloop invariant i2: 0 <= p <= bufsize_0;\nloop invariant i3: 0 <= bufsize <= bufsize_0;\nloop invariant i4: 0 <= bufsize_0 <= bufsize + leader_len;\nloop invariant i5: 0 <= leader_len <= bufsize_0;\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 20,
                    "annotations": "```\n/*@\nloop invariant 0 <= p <= bufsize_0;\nloop invariant 0 <= i <= ielen;\nloop invariant 0 <= bufsize <= bufsize_0 - leader_len;\nloop invariant bufsize >= 2;\nloop invariant 0 <= bufsize_0 - i * 2 <= bufsize;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant p >= 2 * i;\nloop invariant bufsize >= 2 * i;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize <= bufsize_0 - leader_len;\nloop invariant bufsize >= leader_len;\nloop invariant bufsize >= 2 * ielen;\nloop invariant bufsize_0 >= leader_len + 2 * ielen;\nloop invariant bufsize_0 >= leader_len;\nloop invariant bufsize_0 >= 0;\nloop invariant bufsize_0 >= 2 * ielen;\nloop invariant bufsize_0 >= leader_len + 2 * i;\nloop invariant bufsize_0 >= leader_len + 2 * i + 2;\nloop invariant bufsize_0 >= leader_len + 2 * i + 2 * ielen;\nloop invariant bufsize_0 >= leader_len + 2 * i + 2 * ielen - 2;\nloop invariant bufsize_0 >= leader_len + 2 * i + 2 * ielen - 2 - 2;\nloop invariant bufsize_0 >= leader_len + 2 * i + 2 * ielen - 2 - 2 - 2;\nloop invariant bufsize_0 >= leader_len + 2 * i + 2 * ielen - 2 - 2 - 2 - 2;\nloop invariant bufsize_0 >= leader_len + 2 * i + 2 * ielen - 2 - 2 - 2 - 2 - 2;\nloop invariant bufsize_0 >= leader_len + 2 * i + 2 * ielen - 2 - 2 - 2 - 2 - 2 - 2;\nloop invariant bufsize_0 >= leader_len + 2 * i + 2 * ielen - 2 - 2 - 2 - 2 - 2 - 2 - 2;\nloop invariant bufsize_0 >= leader_len + 2 * i + 2 * ielen - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2;\nloop invariant bufsize_0 >= leader_len + 2 * i + 2 * ielen - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2;\nloop invariant bufsize_0 >= leader_len + 2 * i + 2 * ielen - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2;\nloop invariant bufsize_0 >= leader_len + 2 * i + 2 * ielen - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2;\nloop invariant bufsize_0 >= leader_len + 2 * i + 2 * ielen - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2;\nloop invariant bufsize_0 >= leader_len + 2 * i + 2 * ielen - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2;\nloop invariant bufsize_0 >= leader_len + 2 * i + 2 * ielen - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2;\nloop invariant bufsize_0 >= leader_len + 2 * i + 2 * ielen - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2;\nloop invariant bufsize_0 >= leader_len + 2 * i + 2 * ielen - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= p <= bufsize_0 is partially proven to be inductive.\nloop invariant 0 <= i <= ielen is partially proven to be inductive.\nloop invariant 0 <= bufsize <= bufsize_0 - leader_len is partially proven to be inductive.\nloop invariant bufsize >= 2 is partially proven to be inductive.\nloop invariant 0 <= bufsize_0 - i * 2 <= bufsize is preserved but not established.\nloop invariant p + 2 * i <= bufsize_0 is partially proven to be inductive.\nloop invariant p >= 2 * i is partially proven to be inductive.\nloop invariant bufsize >= 2 * i is partially proven to be inductive.\nloop invariant bufsize >= 0 is partially proven to be inductive.\nloop invariant bufsize <= bufsize_0 is partially proven to be inductive.\nloop invariant bufsize <= bufsize_0 - leader_len is partially proven to be inductive.\nloop invariant bufsize >= leader_len is partially proven to be inductive.\nloop invariant bufsize >= 2 * ielen is partially proven to be inductive.\nloop invariant bufsize_0 >= leader_len + 2 * ielen is partially proven to be inductive.\nloop invariant bufsize_0 >= leader_len is partially proven to be inductive.\nloop invariant bufsize_0 >= 0 is partially proven to be inductive.\nloop invariant bufsize_0 >= 2 * ielen is partially proven to be inductive.\nloop invariant bufsize_0 >= leader_len + 2 * i is partially proven to be inductive.\nloop invariant bufsize_0 >= leader_len + 2 * i + 2 is partially proven to be inductive.\nloop invariant bufsize_0 >= leader_len + 2 * i + 2 * ielen is partially proven to be inductive.\nloop invariant bufsize_0 >= leader_len + 2 * i + 2 * ielen - 2 is partially proven to be inductive.\nloop invariant bufsize_0 >= leader_len + 2 * i + 2 * ielen - 2 - 2 is partially proven to be inductive.\nloop invariant bufsize_0 >= leader_len + 2 * i + 2 * ielen - 2 - 2 - 2 is partially proven to be inductive.\nloop invariant bufsize_0 >= leader_len + 2 * i + 2 * ielen - 2 - 2 - 2 - 2 is partially proven to be inductive.\nloop invariant bufsize_0 >= leader_len + 2 * i + 2 * ielen - 2 - 2 - 2 - 2 - 2 is partially proven to be inductive.\nloop invariant bufsize_0 >= leader_len + 2 * i + 2 * ielen - 2 - 2 - 2 - 2 - 2 - 2 is partially proven to be inductive.\nloop invariant bufsize_0 >= leader_len + 2 * i + 2 * ielen - 2 - 2 - 2 - 2 - 2 - 2 - 2 is partially proven to be inductive.\nloop invariant bufsize_0 >= leader_len + 2 * i + 2 * ielen - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 is partially proven to be inductive.\nloop invariant bufsize_0 >= leader_len + 2 * i + 2 * ielen - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 is partially proven to be inductive.\nloop invariant bufsize_0 >= leader_len + 2 * i + 2 * ielen - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 is partially proven to be inductive.\nloop invariant bufsize_0 >= leader_len + 2 * i + 2 * ielen - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 is partially proven to be inductive.\nloop invariant bufsize_0 >= leader_len + 2 * i + 2 * ielen - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 is partially proven to be inductive.\nloop invariant bufsize_0 >= leader_len + 2 * i + 2 * ielen - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 is partially proven to be inductive.\nloop invariant bufsize_0 >= leader_len + 2 * i + 2 * ielen - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 is partially proven to be inductive.\nloop invariant bufsize_0 >= leader_len + 2 * i + 2 * ielen - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 is partially proven to be inductive.\nloop invariant bufsize_0 >= leader_len + 2 * i + 2 * ielen - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 is partially proven to be inductive.\nAssertion 0 <= p: Partially proven\nAssertion p + 1 < bufsize_0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len = unknown();\n  int bufsize = unknown();\n  int bufsize_0 = unknown();\n  int ielen = unknown();\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= p <= bufsize_0;\nloop invariant i2: 0 <= i <= ielen;\nloop invariant i3: 0 <= bufsize <= bufsize_0 - leader_len;\nloop invariant i4: bufsize >= 2;\n\n\nloop invariant i7: p >= 2 * i;\nloop invariant i8: bufsize >= 2 * i;\nloop invariant i9: bufsize >= 0;\nloop invariant i10: bufsize <= bufsize_0;\nloop invariant i11: bufsize <= bufsize_0 - leader_len;\n\nloop invariant i13: bufsize >= 2 * ielen;\nloop invariant i14: bufsize_0 >= leader_len + 2 * ielen;\nloop invariant i15: bufsize_0 >= leader_len;\nloop invariant i16: bufsize_0 >= 0;\nloop invariant i17: bufsize_0 >= 2 * ielen;\nloop invariant i18: bufsize_0 >= leader_len + 2 * i;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 21,
                    "annotations": "```\n/*@\nloop invariant 0 <= p;\nloop invariant p <= bufsize_0;\nloop invariant i >= 0;\nloop invariant i <= ielen;\nloop invariant 0 <= bufsize;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= leader_len;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize >= 2*i + 2;\nloop invariant bufsize >= bufsize_0 - 2*i - 2;\nloop invariant bufsize >= 2*i + 2 - bufsize_0;\nloop invariant bufsize >= 2*i + 2 - bufsize_0 + 2*i;\nloop invariant bufsize >= 2*i + 2 - bufsize_0 + 2*i - 2*i;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= bufsize_0 - 2*i - 2;\nloop invariant bufsize >= 2*i + 2 - bufsize_0 + 2*i - 2*i;\nloop invariant bufsize >= 2*i + 2 - bufsize_0 + 2*i - 2*i + 2*i;\nloop invariant bufsize >= 2*i + 2 - bufsize_0 + 2*i - 2*i + 2*i - 2*i;\nloop invariant bufsize >= 2*i + 2 - bufsize_0 + 2*i - 2*i + 2*i - 2*i + 2*i;\nloop invariant bufsize >= 2*i + 2 - bufsize_0 + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i;\nloop invariant bufsize >= 2*i + 2 - bufsize_0 + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i;\nloop invariant bufsize >= 2*i + 2 - bufsize_0 + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i;\nloop invariant bufsize >= 2*i + 2 - bufsize_0 + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i;\nloop invariant bufsize >= 2*i + 2 - bufsize_0 + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i;\nloop invariant bufsize >= 2*i + 2 - bufsize_0 + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i;\nloop invariant bufsize >= 2*i + 2 - bufsize_0 + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i;\nloop invariant bufsize >= 2*i + 2 - bufsize_0 + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i;\nloop invariant bufsize >= 2*i + 2 - bufsize_0 + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i;\nloop invariant bufsize >= 2*i + 2 - bufsize_0 + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i;\nloop invariant bufsize >= 2*i + 2 - bufsize_0 + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= p is partially proven to be inductive.\nloop invariant p <= bufsize_0 is partially proven to be inductive.\nloop invariant i >= 0 is partially proven to be inductive.\nloop invariant i <= ielen is partially proven to be inductive.\nloop invariant 0 <= bufsize is partially proven to be inductive.\nloop invariant bufsize <= bufsize_0 is partially proven to be inductive.\nloop invariant bufsize >= 2*i is partially proven to be inductive.\nloop invariant bufsize >= 0 is partially proven to be inductive.\nloop invariant bufsize >= leader_len is preserved but not established.\nloop invariant bufsize >= 2 is partially proven to be inductive.\nloop invariant bufsize >= bufsize_0 - 2*i is preserved but not established.\nloop invariant bufsize >= 2*i + 2 is partially proven to be inductive.\nloop invariant bufsize >= bufsize_0 - 2*i - 2 is partially proven to be inductive.\nloop invariant bufsize >= 2*i + 2 - bufsize_0 is partially proven to be inductive.\nloop invariant bufsize >= 2*i + 2 - bufsize_0 + 2*i is partially proven to be inductive.\nloop invariant bufsize >= 2*i + 2 - bufsize_0 + 2*i - 2*i is partially proven to be inductive.\nloop invariant bufsize >= 2*i + 2 - bufsize_0 + 2*i - 2*i + 2*i is partially proven to be inductive.\nloop invariant bufsize >= 2*i + 2 - bufsize_0 + 2*i - 2*i + 2*i - 2*i is partially proven to be inductive.\nloop invariant bufsize >= 2*i + 2 - bufsize_0 + 2*i - 2*i + 2*i - 2*i + 2*i is partially proven to be inductive.\nloop invariant bufsize >= 2*i + 2 - bufsize_0 + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i is partially proven to be inductive.\nloop invariant bufsize >= 2*i + 2 - bufsize_0 + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i is partially proven to be inductive.\nloop invariant bufsize >= 2*i + 2 - bufsize_0 + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i is partially proven to be inductive.\nloop invariant bufsize >= 2*i + 2 - bufsize_0 + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i is partially proven to be inductive.\nloop invariant bufsize >= 2*i + 2 - bufsize_0 + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i is partially proven to be inductive.\nloop invariant bufsize >= 2*i + 2 - bufsize_0 + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i is partially proven to be inductive.\nloop invariant bufsize >= 2*i + 2 - bufsize_0 + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i is partially proven to be inductive.\nloop invariant bufsize >= 2*i + 2 - bufsize_0 + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i is partially proven to be inductive.\nloop invariant bufsize >= 2*i + 2 - bufsize_0 + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i is partially proven to be inductive.\nloop invariant bufsize >= 2*i + 2 - bufsize_0 + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i is partially proven to be inductive.\nloop invariant bufsize >= 2*i + 2 - bufsize_0 + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i is partially proven to be inductive.\nAssertion 0 <= p: Partially proven\nAssertion p + 1 < bufsize_0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len = unknown();\n  int bufsize = unknown();\n  int bufsize_0 = unknown();\n  int ielen = unknown();\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= p;\nloop invariant i2: p <= bufsize_0;\nloop invariant i3: i >= 0;\nloop invariant i4: i <= ielen;\nloop invariant i5: 0 <= bufsize;\nloop invariant i6: bufsize <= bufsize_0;\n\nloop invariant i8: bufsize >= 0;\n\nloop invariant i10: bufsize >= 2;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:;\n}",
                    "checker_output_after_prune": false
                }
            ],
            "checker_output_for_combined_annotations": false,
            "checker_message_for_combined_annotations": "Annotation error on line 82: unexpected token ')'",
            "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len = unknown();\n  int bufsize = unknown();\n  int bufsize_0 = unknown();\n  int ielen = unknown();\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= p <= bufsize_0;\nloop invariant i2: i >= 0;\nloop invariant i3: i <= ielen;\nloop invariant i4: bufsize >= 2*i;\nloop invariant i5: bufsize <= bufsize_0-2*(ielen-i);\nloop invariant i6: bufsize_0 + leader_len >= bufsize;\nloop invariant i7: 0 <= bufsize <= bufsize_0;\nloop invariant i8: 0 <= i <= ielen;\nloop invariant i9: ielen * 2 >= bufsize;\nloop invariant i10: 0 <= p + 2 * i <= bufsize_0;\nloop invariant i11: p + 2 * i <= bufsize;\nloop invariant i12: bufsize + leader_len >= bufsize_0;\nloop invariant i13: bufsize + leader_len <= bufsize_0;\nloop invariant i14: bufsize_0 - leader_len <= bufsize;\nloop invariant i15: p > 0;\nloop invariant i16: p <= bufsize_0;\nloop invariant i17: bufsize >= 2;\nloop invariant i18: bufsize >= 2 * i;\nloop invariant i19: bufsize >= 2 * (i + 1);\nloop invariant i20: p >= leader_len;\nloop invariant i21: p <= bufsize_0 - 2;\nloop invariant i22: p <= bufsize_0 - 2 * (i + 1);\nloop invariant i23: p <= bufsize_0 - 2 * ielen;\nloop invariant i24: p >= leader_len + 2 * i;\nloop invariant i25: p >= leader_len + 2 * (i + 1);\nloop invariant i26: p >= leader_len + 2 * ielen;\nloop invariant i27: leader_len <= bufsize_0;\nloop invariant i28: bufsize <= bufsize_0 - leader_len;\nloop invariant i29: p <= bufsize_0 - 2*i;\nloop invariant i30: p <= bufsize_0 - leader_len;\nloop invariant i31: (i == 0 ==> bufsize >= 2*ielen);\nloop invariant i32: (i > 0 ==> bufsize < 2*ielen);\nloop invariant i33: (i == 0 ==> p == leader_len);\nloop invariant i34: (i > 0 ==> p > leader_len);\nloop invariant i35: (i == 0 ==> bufsize >= 2);\nloop invariant i36: (i > 0 ==> bufsize < 2);\nloop invariant i37: 0 < bufsize_0;\nloop invariant i38: 0 <= p < bufsize_0;\nloop invariant i39: bufsize_0 - (leader_len + ielen*2) <= bufsize;\nloop invariant i40: 0 <= i < ielen;\nloop invariant i41: 0 <= p;\nloop invariant i42: 0 < leader_len;\nloop invariant i43: 0 < bufsize;\nloop invariant i44: 0 < ielen;\nloop invariant i45: unknown();\nloop invariant i46: ( 0 <= p <= bufsize_0 ) ==> true;\nloop invariant i47: ( 0 <= i <= ielen ) ==> true;\nloop invariant i48: ( bufsize_0 >= bufsize ) ==> true;\nloop invariant i49: ( bufsize >= leader_len ) ==> true;\nloop invariant i50: ( bufsize >= 2*ielen ) ==> true;\nloop invariant i51: ( i >= 0 ) ==> true;\nloop invariant i52: ( i <= ielen ) ==> true;\nloop invariant i53: ( p >= 0 ) ==> true;\nloop invariant i54: ( p <= bufsize_0 ) ==> true;\nloop invariant i55: ( bufsize + leader_len == bufsize_0 ) ==> true;\nloop invariant i56: ( bufsize == bufsize_0 - leader_len ) ==> true;\nloop invariant i57: ( p == bufsize_0 - bufsize ) ==> true;\nloop invariant i58: leader_len <= p <= bufsize_0;\nloop invariant i59: bufsize < leader_len ==> i == 0;\nloop invariant i60: bufsize >= leader_len ==> i >= 0;\nloop invariant i61: bufsize < 2*ielen ==> i == ielen;\nloop invariant i62: bufsize >= 2*ielen ==> i < ielen;\nloop invariant i63: bufsize >= 2 ==> i >= 0;\nloop invariant i64: bufsize < 2 ==> i == ielen;\nloop invariant i65: bufsize >= 2*ielen ==> i >= 0;\nloop invariant i66: bufsize < 2*ielen ==> i < ielen;\nloop invariant i67: bufsize >= 2 ==> i < ielen;\nloop invariant i68: 2*i <= bufsize;\nloop invariant i69: 2*i <= bufsize - leader_len;\nloop invariant i70: 2*i < bufsize - leader_len;\nloop invariant i71: bufsize >= 0;\nloop invariant i72: bufsize - 2 * i >= 0;\nloop invariant i73: bufsize >= bufsize_0 - 2 * i;\nloop invariant i74: bufsize <= bufsize_0;\nloop invariant i75: bufsize >= leader_len;\nloop invariant i76: bufsize <= bufsize_0 - 2 * ielen;\nloop invariant i77: bufsize >= bufsize_0 - 2 * ielen;\nloop invariant i78: bufsize >= bufsize_0 - 2 * (i + 1);\nloop invariant i79: bufsize <= bufsize_0 - 2 * (i + 1);\nloop invariant i80: bufsize - 2 * (i + 1) >= 0;\nloop invariant i81: 0 <= bufsize_0 <= bufsize_0;\nloop invariant i82: bufsize > 0;\nloop invariant i83: bufsize_0 > 0;\nloop invariant i84: leader_len > 0;\nloop invariant i85: bufsize < bufsize_0;\nloop invariant i86: p >= 0;\nloop invariant i87: p + 1 < bufsize_0;\nloop invariant i88: i < ielen;\nloop invariant i89: bufsize <= bufsize_0 - 2*i;\nloop invariant i90: bufsize >= 2*ielen;\nloop invariant i91: bufsize <= bufsize_0 - 2*ielen;\nloop invariant i92: bufsize < bufsize_0 - 2*ielen;\nloop invariant i93: 0 <= bufsize_0 <= bufsize + leader_len;\nloop invariant i94: 0 <= leader_len <= bufsize_0;\nloop invariant i95: 0 <= bufsize <= bufsize_0 - leader_len;\nloop invariant i96: 0 <= bufsize_0 - i * 2 <= bufsize;\nloop invariant i97: p + 2 * i <= bufsize_0;\nloop invariant i98: p >= 2 * i;\nloop invariant i99: bufsize >= 2 * ielen;\nloop invariant i100: bufsize_0 >= leader_len + 2 * ielen;\nloop invariant i101: bufsize_0 >= leader_len;\nloop invariant i102: bufsize_0 >= 0;\nloop invariant i103: bufsize_0 >= 2 * ielen;\nloop invariant i104: bufsize_0 >= leader_len + 2 * i;\nloop invariant i105: bufsize_0 >= leader_len + 2 * i + 2;\nloop invariant i106: bufsize_0 >= leader_len + 2 * i + 2 * ielen;\nloop invariant i107: bufsize_0 >= leader_len + 2 * i + 2 * ielen - 2;\nloop invariant i108: bufsize_0 >= leader_len + 2 * i + 2 * ielen - 2 - 2;\nloop invariant i109: bufsize_0 >= leader_len + 2 * i + 2 * ielen - 2 - 2 - 2;\nloop invariant i110: bufsize_0 >= leader_len + 2 * i + 2 * ielen - 2 - 2 - 2 - 2;\nloop invariant i111: bufsize_0 >= leader_len + 2 * i + 2 * ielen - 2 - 2 - 2 - 2 - 2;\nloop invariant i112: bufsize_0 >= leader_len + 2 * i + 2 * ielen - 2 - 2 - 2 - 2 - 2 - 2;\nloop invariant i113: bufsize_0 >= leader_len + 2 * i + 2 * ielen - 2 - 2 - 2 - 2 - 2 - 2 - 2;\nloop invariant i114: bufsize_0 >= leader_len + 2 * i + 2 * ielen - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2;\nloop invariant i115: bufsize_0 >= leader_len + 2 * i + 2 * ielen - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2;\nloop invariant i116: bufsize_0 >= leader_len + 2 * i + 2 * ielen - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2;\nloop invariant i117: bufsize_0 >= leader_len + 2 * i + 2 * ielen - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2;\nloop invariant i118: bufsize_0 >= leader_len + 2 * i + 2 * ielen - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2;\nloop invariant i119: bufsize_0 >= leader_len + 2 * i + 2 * ielen - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2;\nloop invariant i120: bufsize_0 >= leader_len + 2 * i + 2 * ielen - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2;\nloop invariant i121: bufsize_0 >= leader_len + 2 * i + 2 * ielen - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2;\nloop invariant i122: bufsize_0 >= leader_len + 2 * i + 2 * ielen - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2;\nloop invariant i123: 0 <= bufsize;\nloop invariant i124: bufsize >= bufsize_0 - 2*i;\nloop invariant i125: bufsize >= 2*i + 2;\nloop invariant i126: bufsize >= bufsize_0 - 2*i - 2;\nloop invariant i127: bufsize >= 2*i + 2 - bufsize_0;\nloop invariant i128: bufsize >= 2*i + 2 - bufsize_0 + 2*i;\nloop invariant i129: bufsize >= 2*i + 2 - bufsize_0 + 2*i - 2*i;\nloop invariant i130: bufsize >= 2*i + 2 - bufsize_0 + 2*i - 2*i + 2*i;\nloop invariant i131: bufsize >= 2*i + 2 - bufsize_0 + 2*i - 2*i + 2*i - 2*i;\nloop invariant i132: bufsize >= 2*i + 2 - bufsize_0 + 2*i - 2*i + 2*i - 2*i + 2*i;\nloop invariant i133: bufsize >= 2*i + 2 - bufsize_0 + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i;\nloop invariant i134: bufsize >= 2*i + 2 - bufsize_0 + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i;\nloop invariant i135: bufsize >= 2*i + 2 - bufsize_0 + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i;\nloop invariant i136: bufsize >= 2*i + 2 - bufsize_0 + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i;\nloop invariant i137: bufsize >= 2*i + 2 - bufsize_0 + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i;\nloop invariant i138: bufsize >= 2*i + 2 - bufsize_0 + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i;\nloop invariant i139: bufsize >= 2*i + 2 - bufsize_0 + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i;\nloop invariant i140: bufsize >= 2*i + 2 - bufsize_0 + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i;\nloop invariant i141: bufsize >= 2*i + 2 - bufsize_0 + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i;\nloop invariant i142: bufsize >= 2*i + 2 - bufsize_0 + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i;\nloop invariant i143: bufsize >= 2*i + 2 - bufsize_0 + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i;\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:;\n}",
            "combined_annotation_num_solver_calls": 40,
            "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len = unknown();\n  int bufsize = unknown();\n  int bufsize_0 = unknown();\n  int ielen = unknown();\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= p <= bufsize_0;\nloop invariant i2: i >= 0;\nloop invariant i3: i <= ielen;\nloop invariant i4: bufsize >= 2*i;\n\nloop invariant i6: bufsize_0 + leader_len >= bufsize;\nloop invariant i7: 0 <= bufsize <= bufsize_0;\nloop invariant i8: 0 <= i <= ielen;\n\n\n\nloop invariant i12: bufsize + leader_len >= bufsize_0;\nloop invariant i13: bufsize + leader_len <= bufsize_0;\nloop invariant i14: bufsize_0 - leader_len <= bufsize;\nloop invariant i15: p > 0;\nloop invariant i16: p <= bufsize_0;\nloop invariant i17: bufsize >= 2;\nloop invariant i18: bufsize >= 2 * i;\n\nloop invariant i20: p >= leader_len;\n\n\n\nloop invariant i24: p >= leader_len + 2 * i;\n\n\nloop invariant i27: leader_len <= bufsize_0;\nloop invariant i28: bufsize <= bufsize_0 - leader_len;\n\n\nloop invariant i31: (i == 0 ==> bufsize >= 2*ielen);\n\nloop invariant i33: (i == 0 ==> p == leader_len);\nloop invariant i34: (i > 0 ==> p > leader_len);\nloop invariant i35: (i == 0 ==> bufsize >= 2);\n\nloop invariant i37: 0 < bufsize_0;\n\nloop invariant i39: bufsize_0 - (leader_len + ielen*2) <= bufsize;\n\nloop invariant i41: 0 <= p;\nloop invariant i42: 0 < leader_len;\nloop invariant i43: 0 < bufsize;\nloop invariant i44: 0 < ielen;\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i58: leader_len <= p <= bufsize_0;\n\nloop invariant i60: bufsize >= leader_len ==> i >= 0;\nloop invariant i61: bufsize < 2*ielen ==> i == ielen;\n\nloop invariant i63: bufsize >= 2 ==> i >= 0;\nloop invariant i64: bufsize < 2 ==> i == ielen;\nloop invariant i65: bufsize >= 2*ielen ==> i >= 0;\nloop invariant i66: bufsize < 2*ielen ==> i < ielen;\n\nloop invariant i68: 2*i <= bufsize;\n\n\nloop invariant i71: bufsize >= 0;\nloop invariant i72: bufsize - 2 * i >= 0;\n\nloop invariant i74: bufsize <= bufsize_0;\n\n\n\n\n\n\nloop invariant i81: 0 <= bufsize_0 <= bufsize_0;\nloop invariant i82: bufsize > 0;\nloop invariant i83: bufsize_0 > 0;\nloop invariant i84: leader_len > 0;\nloop invariant i85: bufsize < bufsize_0;\nloop invariant i86: p >= 0;\n\n\n\nloop invariant i90: bufsize >= 2*ielen;\n\n\nloop invariant i93: 0 <= bufsize_0 <= bufsize + leader_len;\nloop invariant i94: 0 <= leader_len <= bufsize_0;\nloop invariant i95: 0 <= bufsize <= bufsize_0 - leader_len;\n\n\nloop invariant i98: p >= 2 * i;\nloop invariant i99: bufsize >= 2 * ielen;\nloop invariant i100: bufsize_0 >= leader_len + 2 * ielen;\nloop invariant i101: bufsize_0 >= leader_len;\nloop invariant i102: bufsize_0 >= 0;\nloop invariant i103: bufsize_0 >= 2 * ielen;\nloop invariant i104: bufsize_0 >= leader_len + 2 * i;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i123: 0 <= bufsize;\n\n\n\nloop invariant i127: bufsize >= 2*i + 2 - bufsize_0;\n\nloop invariant i129: bufsize >= 2*i + 2 - bufsize_0 + 2*i - 2*i;\n\nloop invariant i131: bufsize >= 2*i + 2 - bufsize_0 + 2*i - 2*i + 2*i - 2*i;\n\nloop invariant i133: bufsize >= 2*i + 2 - bufsize_0 + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i;\n\nloop invariant i135: bufsize >= 2*i + 2 - bufsize_0 + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i;\n\nloop invariant i137: bufsize >= 2*i + 2 - bufsize_0 + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i;\n\nloop invariant i139: bufsize >= 2*i + 2 - bufsize_0 + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i;\n\nloop invariant i141: bufsize >= 2*i + 2 - bufsize_0 + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i;\n\nloop invariant i143: bufsize >= 2*i + 2 - bufsize_0 + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i;\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:;\n}",
            "checker_output_after_prune": false
        },
        {
            "file": "../dataset/loop_invariants/code2inv/69.c",
            "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int n, v1, v2, v3;\n    int x = 1;\n    int y;\n\n    while (x <= n) {\n        y = n - x;\n        x = x +1;\n    }\n\n    if (n > 0) {\n      {;\n//@ assert(y >= 0);\n}\n\n    }\n}",
            "success": false,
            "annotation_blocks": [
                "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= y <= n - x;\nloop invariant x + y <= n;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant y == n - x;\nloop invariant x - 1 <= y <= n;\nloop invariant y == n - x ==> y >= 0;\nloop invariant x - 1 <= y <= n ==> y >= 0;\nloop invariant x - 1 <= y <= n ==> y >= 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x <= n + 1;\nloop invariant (if n > 0 then y >= n - x and n - x >= 0 else y >= -1 and n - x >= 0);\nloop invariant (if n > 0 then y <= n else y <= -1);\nloop invariant (if n > 0 then y >= 0 else y >= -1);\nloop invariant (if n > 0 then y <= n else y <= -1);\nloop invariant (if n > 0 then y >= 0 else y >= -1);\nloop invariant (if n > 0 then y >= 0 else y >= -1);\nloop invariant (if n > 0 then y <= n else y <= -1);\nloop invariant (if n > 0 then y >= 0 else y >= -1);\nloop invariant (if n > 0 then y <= n else y <= -1);\nloop invariant (if n > 0 then y >= 0 else y >= -1);\nloop invariant (if n > 0 then y <= n else y <= -1);\nloop invariant (if n > 0 then y >= 0 else y >= -1);\nloop invariant (if n > 0 then y <= n else y <= -1);\nloop invariant (if n > 0 then y >= 0 else y >= -1);\nloop invariant (if n > 0 then y <= n else y <= -1);\nloop invariant (if n > 0 then y >= 0 else y >= -1);\nloop invariant (if n > 0 then y <= n else y <= -1);\nloop invariant (if n > 0 then y >= 0 else y >= -1);\nloop invariant (if n > 0 then y <= n else y <= -1);\nloop invariant (if n > 0 then y >= 0 else y >= -1);\nloop invariant (if n > 0 then y <= n else y <= -1);\nloop invariant (if n > 0 then y >= 0 else y >= -1);\nloop invariant (if n > 0 then y <= n else y <= -1);\nloop invariant (if n > 0 then y >= 0 else y >= -1);\nloop invariant (if n > 0 then y <= n else y <= -1);\nloop invariant (if n > 0 then y >= 0 else y >= -1);\nloop invariant (if n > 0 then y <= n else y <= -1);\nloop invariant (if n > 0 then y >= 0 else y >= -1);\nloop invariant (if n > 0 then y <= n else y <= -1);\nloop invariant (if n > 0 then y >= 0 else y >= -1);\nloop invariant (if n > 0 then y <= n else y <= -1);\nloop invariant (if n > 0 then y >= 0 else y >= -1);\nloop invariant (if n > 0 then y <= n else y <= -1);\nloop invariant (if n > 0 then y >= 0 else y >= -1);\nloop invariant (if n > 0 then y <= n else y <= -1);\nloop invariant (if n > 0 then y >= 0 else y >= -1);\nloop invariant (if n > 0 then y <= n else y <= -1);\nloop invariant (if n > 0 then y >= 0 else y >= -1);\nloop invariant (if n > 0 then y <= n else y <= -1);\nloop invariant (if n > 0 then y >= 0 else y >= -1);\nloop invariant (if n > 0 then y <= n else y <= -1);\nloop invariant (if n > 0 then y >= 0 else y >= -1);\nloop invariant (if n > 0 then y <= n else y <= -1);\nloop invariant (if n > 0 then y >= 0 else y >= -1);\nloop invariant (if n > 0 then y <= n else y <= -1);\nloop invariant (if n > 0 then y >= 0 else y >= -1);\nloop invariant (if n > 0 then y <= n else y <= -1);\nloop invariant (if n > 0 then y >= 0 else y >= -1);\nloop invariant (if n > 0 then y <= n else y <= -1);\nloop invariant (if n > 0 then y >= 0 else y >= -1);\nloop invariant (if n > 0 then y <= n else y <= -1);\nloop invariant (if n > 0 then y >= 0 else y >= -1);\n*/\n```",
                "```\n/*@\nloop invariant x >= 1;\nloop invariant x <= n + 1;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y + x == n + 1;\nloop invariant (n > 0) ==> (y >= 0);\nloop invariant (n > 0) ==> (y <= n);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant y >= 0;\nloop invariant y <= n - x;\nloop invariant 0 <= x <= n;\nloop invariant y >= 0;\nloop invariant y <= n - x;\nloop invariant 0 <= x <= n;\nloop invariant y >= 0;\nloop invariant y <= n - x;\nloop invariant 0 <= x <= n;\nloop invariant y >= 0;\nloop invariant y <= n - x;\nloop invariant 0 <= x <= n;\nloop invariant y >= 0;\nloop invariant y <= n - x;\nloop invariant 0 <= x <= n;\nloop invariant y >= 0;\nloop invariant y <= n - x;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n + 1;\nloop invariant 0 <= y <= n;\nloop invariant y == n - (x - 1);\n*/\n```",
                "```\n/*@\nloop invariant x > 0;\nloop invariant x < n + 1;\nloop invariant y >= 0;\nloop invariant y <= n;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n + 1;\nloop invariant 0 <= y <= n - x;\nloop invariant y == n - x;\nloop invariant x > y ==> n > 0;\nloop invariant x <= n ==> y >= 0;\nloop invariant x <= n ==> y <= n;\nloop invariant x <= n ==> y >= 0 && y <= n;\nloop invariant x <= n ==> y >= 0 && y <= n && n > 0;\nloop invariant x <= n ==> y >= 0 && y <= n && n > 0 && y == n - x;\nloop invariant x <= n ==> y >= 0 && y <= n && n > 0 && y == n - x && y == n - x;\nloop invariant x <= n ==> y >= 0 && y <= n && n > 0 && y == n - x && y == n - x && y >= 0;\nloop invariant x <= n ==> y >= 0 && y <= n && n > 0 && y == n - x && y == n - x && y >= 0 && y <= n;\nloop invariant x <= n ==> y >= 0 && y <= n && n > 0 && y == n - x && y == n - x && y >= 0 && y <= n && y >= 0;\nloop invariant x <= n ==> y >= 0 && y <= n && n > 0 && y == n - x && y == n - x && y >= 0 && y <= n && y >= 0 && y >= 0;\nloop invariant x <= n ==> y >= 0 && y <= n && n > 0 && y == n - x && y == n - x && y >= 0 && y <= n && y >= 0 && y >= 0 && y >= 0;\nloop invariant x <= n ==> y >= 0 && y <= n && n > 0 && y == n - x && y == n - x && y >= 0 && y <= n && y >= 0 && y >= 0 && y >= 0 && y >= 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant n - x <= y;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant n > 0 ==> y >= 0;\n*/\n```",
                "```\n/*@\nloop invariant 1 <= x <= n;\nloop invariant 1 <= y <= n;\nloop invariant y == n - x;\nloop invariant x == n - y + 1;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x + y == n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant x >= 1;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant y >= 0;\nloop invariant y <= n - x;\nloop invariant x * (x - 1) / 2 <= y <= x * (x + 1) / 2;\nloop invariant y >= 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n + 1;\nloop invariant y = n - x;\nloop invariant x <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x > n ==> y >= 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= y <= n;\nloop invariant (x + y) == n;\n*/\n```"
            ],
            "completions": [
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= y <= n - x;\nloop invariant x + y <= n;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= n is neither established nor preserved.\nloop invariant 0 <= y <= n - x is neither established nor preserved.\nloop invariant x + y <= n is partially proven to be inductive.\nAssertion y >= 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int n, v1, v2, v3;\n    int x = 1;\n    int y;\n\n    /*@\n\n\n\n*/\nwhile (x <= n) {\n        y = n - x;\n        x = x +1;\n    }\n\n    if (n > 0) {\n      {;\n//@ assert(y >= 0);\n}\n\n    }\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant y == n - x;\nloop invariant x - 1 <= y <= n;\nloop invariant y == n - x ==> y >= 0;\nloop invariant x - 1 <= y <= n ==> y >= 0;\nloop invariant x - 1 <= y <= n ==> y >= 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= n is neither established nor preserved.\nloop invariant y == n - x is neither established nor preserved.\nloop invariant x - 1 <= y <= n is partially proven to be inductive.\nloop invariant y == n - x ==> y >= 0 is partially proven to be inductive.\nloop invariant x - 1 <= y <= n ==> y >= 0 is partially proven to be inductive.\nAssertion y >= 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int n, v1, v2, v3;\n    int x = 1;\n    int y;\n\n    /*@\n\n\n\n\nloop invariant i5: x - 1 <= y <= n ==> y >= 0;\n*/\nwhile (x <= n) {\n        y = n - x;\n        x = x +1;\n    }\n\n    if (n > 0) {\n      {;\n//@ assert(y >= 0);\n}\n\n    }\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 6,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x <= n + 1;\nloop invariant (if n > 0 then y >= n - x and n - x >= 0 else y >= -1 and n - x >= 0);\nloop invariant (if n > 0 then y <= n else y <= -1);\nloop invariant (if n > 0 then y >= 0 else y >= -1);\nloop invariant (if n > 0 then y <= n else y <= -1);\nloop invariant (if n > 0 then y >= 0 else y >= -1);\nloop invariant (if n > 0 then y >= 0 else y >= -1);\nloop invariant (if n > 0 then y <= n else y <= -1);\nloop invariant (if n > 0 then y >= 0 else y >= -1);\nloop invariant (if n > 0 then y <= n else y <= -1);\nloop invariant (if n > 0 then y >= 0 else y >= -1);\nloop invariant (if n > 0 then y <= n else y <= -1);\nloop invariant (if n > 0 then y >= 0 else y >= -1);\nloop invariant (if n > 0 then y <= n else y <= -1);\nloop invariant (if n > 0 then y >= 0 else y >= -1);\nloop invariant (if n > 0 then y <= n else y <= -1);\nloop invariant (if n > 0 then y >= 0 else y >= -1);\nloop invariant (if n > 0 then y <= n else y <= -1);\nloop invariant (if n > 0 then y >= 0 else y >= -1);\nloop invariant (if n > 0 then y <= n else y <= -1);\nloop invariant (if n > 0 then y >= 0 else y >= -1);\nloop invariant (if n > 0 then y <= n else y <= -1);\nloop invariant (if n > 0 then y >= 0 else y >= -1);\nloop invariant (if n > 0 then y <= n else y <= -1);\nloop invariant (if n > 0 then y >= 0 else y >= -1);\nloop invariant (if n > 0 then y <= n else y <= -1);\nloop invariant (if n > 0 then y >= 0 else y >= -1);\nloop invariant (if n > 0 then y <= n else y <= -1);\nloop invariant (if n > 0 then y >= 0 else y >= -1);\nloop invariant (if n > 0 then y <= n else y <= -1);\nloop invariant (if n > 0 then y >= 0 else y >= -1);\nloop invariant (if n > 0 then y <= n else y <= -1);\nloop invariant (if n > 0 then y >= 0 else y >= -1);\nloop invariant (if n > 0 then y <= n else y <= -1);\nloop invariant (if n > 0 then y >= 0 else y >= -1);\nloop invariant (if n > 0 then y <= n else y <= -1);\nloop invariant (if n > 0 then y >= 0 else y >= -1);\nloop invariant (if n > 0 then y <= n else y <= -1);\nloop invariant (if n > 0 then y >= 0 else y >= -1);\nloop invariant (if n > 0 then y <= n else y <= -1);\nloop invariant (if n > 0 then y >= 0 else y >= -1);\nloop invariant (if n > 0 then y <= n else y <= -1);\nloop invariant (if n > 0 then y >= 0 else y >= -1);\nloop invariant (if n > 0 then y <= n else y <= -1);\nloop invariant (if n > 0 then y >= 0 else y >= -1);\nloop invariant (if n > 0 then y <= n else y <= -1);\nloop invariant (if n > 0 then y >= 0 else y >= -1);\nloop invariant (if n > 0 then y <= n else y <= -1);\nloop invariant (if n > 0 then y >= 0 else y >= -1);\nloop invariant (if n > 0 then y <= n else y <= -1);\nloop invariant (if n > 0 then y >= 0 else y >= -1);\nloop invariant (if n > 0 then y <= n else y <= -1);\nloop invariant (if n > 0 then y >= 0 else y >= -1);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 15: unexpected token 'n'",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int n, v1, v2, v3;\n    int x = 1;\n    int y;\n\n    /*@\n\n\n\n\n\n*/\nwhile (x <= n) {\n        y = n - x;\n        x = x +1;\n    }\n\n    if (n > 0) {\n      {;\n//@ assert(y >= 0);\n}\n\n    }\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant x >= 1;\nloop invariant x <= n + 1;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y + x == n + 1;\nloop invariant (n > 0) ==> (y >= 0);\nloop invariant (n > 0) ==> (y <= n);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant x >= 1 is partially proven to be inductive.\nloop invariant x <= n + 1 is preserved but not established.\nloop invariant y >= 0 is preserved but not established.\nloop invariant y <= n is preserved but not established.\nloop invariant y + x == n + 1 is preserved but not established.\nloop invariant (n > 0) ==> (y >= 0) is partially proven to be inductive.\nloop invariant (n > 0) ==> (y <= n) is partially proven to be inductive.\nAssertion y >= 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int n, v1, v2, v3;\n    int x = 1;\n    int y;\n\n    /*@\nloop invariant i1: x >= 1;\n\n\n\n\n\n\n*/\nwhile (x <= n) {\n        y = n - x;\n        x = x +1;\n    }\n\n    if (n > 0) {\n      {;\n//@ assert(y >= 0);\n}\n\n    }\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant y >= 0;\nloop invariant y <= n - x;\nloop invariant 0 <= x <= n;\nloop invariant y >= 0;\nloop invariant y <= n - x;\nloop invariant 0 <= x <= n;\nloop invariant y >= 0;\nloop invariant y <= n - x;\nloop invariant 0 <= x <= n;\nloop invariant y >= 0;\nloop invariant y <= n - x;\nloop invariant 0 <= x <= n;\nloop invariant y >= 0;\nloop invariant y <= n - x;\nloop invariant 0 <= x <= n;\nloop invariant y >= 0;\nloop invariant y <= n - x;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= n is neither established nor preserved.\nloop invariant y >= 0 is preserved but not established.\nloop invariant y <= n - x is neither established nor preserved.\nAssertion y >= 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int n, v1, v2, v3;\n    int x = 1;\n    int y;\n\n    /*@\n\n\n\n*/\nwhile (x <= n) {\n        y = n - x;\n        x = x +1;\n    }\n\n    if (n > 0) {\n      {;\n//@ assert(y >= 0);\n}\n\n    }\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n + 1;\nloop invariant 0 <= y <= n;\nloop invariant y == n - (x - 1);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= n + 1 is preserved but not established.\nloop invariant 0 <= y <= n is preserved but not established.\nloop invariant y == n - (x - 1) is preserved but not established.\nAssertion y >= 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int n, v1, v2, v3;\n    int x = 1;\n    int y;\n\n    /*@\n\n\n\n*/\nwhile (x <= n) {\n        y = n - x;\n        x = x +1;\n    }\n\n    if (n > 0) {\n      {;\n//@ assert(y >= 0);\n}\n\n    }\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant x > 0;\nloop invariant x < n + 1;\nloop invariant y >= 0;\nloop invariant y <= n;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant x > 0 is partially proven to be inductive.\nloop invariant x < n + 1 is neither established nor preserved.\nloop invariant y >= 0 is preserved but not established.\nloop invariant y <= n is preserved but not established.\nAssertion y >= 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int n, v1, v2, v3;\n    int x = 1;\n    int y;\n\n    /*@\nloop invariant i1: x > 0;\n\n\n\n*/\nwhile (x <= n) {\n        y = n - x;\n        x = x +1;\n    }\n\n    if (n > 0) {\n      {;\n//@ assert(y >= 0);\n}\n\n    }\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 10,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n + 1;\nloop invariant 0 <= y <= n - x;\nloop invariant y == n - x;\nloop invariant x > y ==> n > 0;\nloop invariant x <= n ==> y >= 0;\nloop invariant x <= n ==> y <= n;\nloop invariant x <= n ==> y >= 0 && y <= n;\nloop invariant x <= n ==> y >= 0 && y <= n && n > 0;\nloop invariant x <= n ==> y >= 0 && y <= n && n > 0 && y == n - x;\nloop invariant x <= n ==> y >= 0 && y <= n && n > 0 && y == n - x && y == n - x;\nloop invariant x <= n ==> y >= 0 && y <= n && n > 0 && y == n - x && y == n - x && y >= 0;\nloop invariant x <= n ==> y >= 0 && y <= n && n > 0 && y == n - x && y == n - x && y >= 0 && y <= n;\nloop invariant x <= n ==> y >= 0 && y <= n && n > 0 && y == n - x && y == n - x && y >= 0 && y <= n && y >= 0;\nloop invariant x <= n ==> y >= 0 && y <= n && n > 0 && y == n - x && y == n - x && y >= 0 && y <= n && y >= 0 && y >= 0;\nloop invariant x <= n ==> y >= 0 && y <= n && n > 0 && y == n - x && y == n - x && y >= 0 && y <= n && y >= 0 && y >= 0 && y >= 0;\nloop invariant x <= n ==> y >= 0 && y <= n && n > 0 && y == n - x && y == n - x && y >= 0 && y <= n && y >= 0 && y >= 0 && y >= 0 && y >= 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= n + 1 is preserved but not established.\nloop invariant 0 <= y <= n - x is neither established nor preserved.\nloop invariant y == n - x is preserved but not established.\nloop invariant x > y ==> n > 0 is partially proven to be inductive.\nloop invariant x <= n ==> y >= 0 is partially proven to be inductive.\nloop invariant x <= n ==> y <= n is partially proven to be inductive.\nloop invariant x <= n ==> y >= 0 && y <= n is partially proven to be inductive.\nloop invariant x <= n ==> y >= 0 && y <= n && n > 0 is partially proven to be inductive.\nloop invariant x <= n ==> y >= 0 && y <= n && n > 0 && y == n - x is partially proven to be inductive.\nloop invariant x <= n ==> y >= 0 && y <= n && n > 0 && y == n - x && y == n - x is partially proven to be inductive.\nloop invariant x <= n ==> y >= 0 && y <= n && n > 0 && y == n - x && y == n - x && y >= 0 is partially proven to be inductive.\nloop invariant x <= n ==> y >= 0 && y <= n && n > 0 && y == n - x && y == n - x && y >= 0 && y <= n is partially proven to be inductive.\nloop invariant x <= n ==> y >= 0 && y <= n && n > 0 && y == n - x && y == n - x && y >= 0 && y <= n && y >= 0 is partially proven to be inductive.\nloop invariant x <= n ==> y >= 0 && y <= n && n > 0 && y == n - x && y == n - x && y >= 0 && y <= n && y >= 0 && y >= 0 is partially proven to be inductive.\nloop invariant x <= n ==> y >= 0 && y <= n && n > 0 && y == n - x && y == n - x && y >= 0 && y <= n && y >= 0 && y >= 0 && y >= 0 is partially proven to be inductive.\nloop invariant x <= n ==> y >= 0 && y <= n && n > 0 && y == n - x && y == n - x && y >= 0 && y <= n && y >= 0 && y >= 0 && y >= 0 && y >= 0 is partially proven to be inductive.\nAssertion y >= 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int n, v1, v2, v3;\n    int x = 1;\n    int y;\n\n    /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (x <= n) {\n        y = n - x;\n        x = x +1;\n    }\n\n    if (n > 0) {\n      {;\n//@ assert(y >= 0);\n}\n\n    }\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant n - x <= y;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant n > 0 ==> y >= 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= n is neither established nor preserved.\nloop invariant n - x <= y is preserved but not established.\nloop invariant x >= 1 is partially proven to be inductive.\nloop invariant y >= 0 is partially proven to be inductive.\nloop invariant n > 0 ==> y >= 0 is partially proven to be inductive.\nAssertion y >= 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int n, v1, v2, v3;\n    int x = 1;\n    int y;\n\n    /*@\n\n\nloop invariant i3: x >= 1;\n\n\n*/\nwhile (x <= n) {\n        y = n - x;\n        x = x +1;\n    }\n\n    if (n > 0) {\n      {;\n//@ assert(y >= 0);\n}\n\n    }\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 1 <= x <= n;\nloop invariant 1 <= y <= n;\nloop invariant y == n - x;\nloop invariant x == n - y + 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= x <= n is preserved but not established.\nloop invariant 1 <= y <= n is preserved but not established.\nloop invariant y == n - x is preserved but not established.\nloop invariant x == n - y + 1 is preserved but not established.\nAssertion y >= 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int n, v1, v2, v3;\n    int x = 1;\n    int y;\n\n    /*@\n\n\n\n\n*/\nwhile (x <= n) {\n        y = n - x;\n        x = x +1;\n    }\n\n    if (n > 0) {\n      {;\n//@ assert(y >= 0);\n}\n\n    }\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x + y == n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant x >= 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= n is neither established nor preserved.\nloop invariant x + y == n is neither established nor preserved.\nloop invariant y >= 0 is partially proven to be inductive.\nloop invariant y <= n is partially proven to be inductive.\nloop invariant x >= 1 is partially proven to be inductive.\nloop invariant x <= n is partially proven to be inductive.\nAssertion y >= 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int n, v1, v2, v3;\n    int x = 1;\n    int y;\n\n    /*@\n\n\n\n\nloop invariant i5: x >= 1;\n\n*/\nwhile (x <= n) {\n        y = n - x;\n        x = x +1;\n    }\n\n    if (n > 0) {\n      {;\n//@ assert(y >= 0);\n}\n\n    }\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant y >= 0;\nloop invariant y <= n - x;\nloop invariant x * (x - 1) / 2 <= y <= x * (x + 1) / 2;\nloop invariant y >= 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= n is neither established nor preserved.\nloop invariant x >= 1 is partially proven to be inductive.\nloop invariant x <= n is partially proven to be inductive.\nloop invariant y >= 0 is preserved but not established.\nloop invariant y <= n - x is neither established nor preserved.\nloop invariant x * (x - 1) / 2 <= y <= x * (x + 1) / 2 is preserved but not established.\nAssertion y >= 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int n, v1, v2, v3;\n    int x = 1;\n    int y;\n\n    /*@\n\nloop invariant i2: x >= 1;\n\n\n\n\n*/\nwhile (x <= n) {\n        y = n - x;\n        x = x +1;\n    }\n\n    if (n > 0) {\n      {;\n//@ assert(y >= 0);\n}\n\n    }\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n + 1;\nloop invariant y = n - x;\nloop invariant x <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 14: Assignment operators not allowed in annotations.",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int n, v1, v2, v3;\n    int x = 1;\n    int y;\n\n    /*@\n\n\n\n\n\n*/\nwhile (x <= n) {\n        y = n - x;\n        x = x +1;\n    }\n\n    if (n > 0) {\n      {;\n//@ assert(y >= 0);\n}\n\n    }\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x > n ==> y >= 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= n is neither established nor preserved.\nloop invariant x > n ==> y >= 0 is partially proven to be inductive.\nAssertion y >= 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int n, v1, v2, v3;\n    int x = 1;\n    int y;\n\n    /*@\n\n\n*/\nwhile (x <= n) {\n        y = n - x;\n        x = x +1;\n    }\n\n    if (n > 0) {\n      {;\n//@ assert(y >= 0);\n}\n\n    }\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= y <= n;\nloop invariant (x + y) == n;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= n is neither established nor preserved.\nloop invariant 0 <= y <= n is preserved but not established.\nloop invariant (x + y) == n is neither established nor preserved.\nAssertion y >= 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int n, v1, v2, v3;\n    int x = 1;\n    int y;\n\n    /*@\n\n\n\n*/\nwhile (x <= n) {\n        y = n - x;\n        x = x +1;\n    }\n\n    if (n > 0) {\n      {;\n//@ assert(y >= 0);\n}\n\n    }\n}",
                    "checker_output_after_prune": false
                }
            ],
            "checker_output_for_combined_annotations": false,
            "checker_message_for_combined_annotations": "Annotation error on line 21: unexpected token 'n'",
            "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int n, v1, v2, v3;\n    int x = 1;\n    int y;\n\n    /*@\nloop invariant i1: 0 <= x <= n;\nloop invariant i2: 0 <= y <= n - x;\nloop invariant i3: x + y <= n;\nloop invariant i4: y == n - x;\nloop invariant i5: x - 1 <= y <= n;\nloop invariant i6: y == n - x ==> y >= 0;\nloop invariant i7: x - 1 <= y <= n ==> y >= 0;\nloop invariant i8: x <= n + 1;\nloop invariant i9: (if n > 0 then y >= n - x and n - x >= 0 else y >= -1 and n - x >= 0);\nloop invariant i10: (if n > 0 then y <= n else y <= -1);\nloop invariant i11: (if n > 0 then y >= 0 else y >= -1);\nloop invariant i12: x >= 1;\nloop invariant i13: y >= 0;\nloop invariant i14: y <= n;\nloop invariant i15: y + x == n + 1;\nloop invariant i16: (n > 0) ==> (y >= 0);\nloop invariant i17: (n > 0) ==> (y <= n);\nloop invariant i18: y <= n - x;\nloop invariant i19: 0 <= x <= n + 1;\nloop invariant i20: 0 <= y <= n;\nloop invariant i21: y == n - (x - 1);\nloop invariant i22: x > 0;\nloop invariant i23: x < n + 1;\nloop invariant i24: x > y ==> n > 0;\nloop invariant i25: x <= n ==> y >= 0;\nloop invariant i26: x <= n ==> y <= n;\nloop invariant i27: x <= n ==> y >= 0 && y <= n;\nloop invariant i28: x <= n ==> y >= 0 && y <= n && n > 0;\nloop invariant i29: x <= n ==> y >= 0 && y <= n && n > 0 && y == n - x;\nloop invariant i30: x <= n ==> y >= 0 && y <= n && n > 0 && y == n - x && y == n - x;\nloop invariant i31: x <= n ==> y >= 0 && y <= n && n > 0 && y == n - x && y == n - x && y >= 0;\nloop invariant i32: x <= n ==> y >= 0 && y <= n && n > 0 && y == n - x && y == n - x && y >= 0 && y <= n;\nloop invariant i33: x <= n ==> y >= 0 && y <= n && n > 0 && y == n - x && y == n - x && y >= 0 && y <= n && y >= 0;\nloop invariant i34: x <= n ==> y >= 0 && y <= n && n > 0 && y == n - x && y == n - x && y >= 0 && y <= n && y >= 0 && y >= 0;\nloop invariant i35: x <= n ==> y >= 0 && y <= n && n > 0 && y == n - x && y == n - x && y >= 0 && y <= n && y >= 0 && y >= 0 && y >= 0;\nloop invariant i36: x <= n ==> y >= 0 && y <= n && n > 0 && y == n - x && y == n - x && y >= 0 && y <= n && y >= 0 && y >= 0 && y >= 0 && y >= 0;\nloop invariant i37: n - x <= y;\nloop invariant i38: n > 0 ==> y >= 0;\nloop invariant i39: 1 <= x <= n;\nloop invariant i40: 1 <= y <= n;\nloop invariant i41: x == n - y + 1;\nloop invariant i42: x + y == n;\nloop invariant i43: x <= n;\nloop invariant i44: x * (x - 1) / 2 <= y <= x * (x + 1) / 2;\nloop invariant i45: y = n - x;\nloop invariant i46: x > n ==> y >= 0;\nloop invariant i47: (x + y) == n;\n*/\nwhile (x <= n) {\n        y = n - x;\n        x = x +1;\n    }\n\n    if (n > 0) {\n      {;\n//@ assert(y >= 0);\n}\n\n    }\n}",
            "combined_annotation_num_solver_calls": 17,
            "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int n, v1, v2, v3;\n    int x = 1;\n    int y;\n\n    /*@\n\n\n\n\n\n\nloop invariant i7: x - 1 <= y <= n ==> y >= 0;\n\n\n\n\nloop invariant i12: x >= 1;\n\n\n\n\n\n\n\n\n\nloop invariant i22: x > 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (x <= n) {\n        y = n - x;\n        x = x +1;\n    }\n\n    if (n > 0) {\n      {;\n//@ assert(y >= 0);\n}\n\n    }\n}",
            "checker_output_after_prune": false
        },
        {
            "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/22.c",
            "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nvoid main()\n{\n  int x = 0;\n  int y = 0;\n  int z = 0;\n  int k = 0;\n\n  while(unknown1())\n  {\n     if(k%3 == 0)\n       x++;\n     y++;\n     z++;\n     k = x+y+z;\n  }\n\n  {;\n//@ assert(x==y && y==z);\n}\n \n}",
            "success": true,
            "annotation_blocks": [
                "```\n/*@\nloop invariant 0 <= x <= 1;\nloop invariant x <= y <= x + 1;\nloop invariant z >= x;\nloop invariant x + y + z <= 3 * x + 1;\nloop invariant x + y + z <= 3 * y;\nloop invariant x + y + z <= 3 * z;\nloop invariant x + y + z >= x;\nloop invariant x + y + z >= y;\nloop invariant x + y + z >= z;\nloop invariant x + y + z <= 3 * (x + y + z);\nloop invariant x + y + z >= 0;\nloop invariant x + y + z >= x + y + z;\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= 3 * (x + y + z);\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= 3 * (x + y + z);\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= 3 * (x + y + z);\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= 3 * (x + y + z);\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= 3 * (x + y + z);\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= 3 * (x + y + z);\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= 3 * (x + y + z);\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= 3 * (x + y + z);\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= 3 * (x + y + z);\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= 3 * (x + y + z);\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= 3 * (x + y + z);\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= 3 * (x + y + z);\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= 3 * (x + y + z);\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= 3 * (x + y + z);\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= 3 * (x + y + z);\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= 3 * (x + y + z);\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= 3 * (x + y + z);\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= 3 * (x + y + z);\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= 3 * (x + y + z);\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= 3 * (x + y + z);\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= 3 * (x + y + z);\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= 3 * (x + y + z);\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= 3 * (x + y + z);\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= 3 * (x + y + z);\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= 3 * (x + y + z);\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= 3 * (x + y + z);\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= 3 * (x + y + z);\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= 3 * (x + y + z);\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= 3 * (x + y + z);\nloop invariant x + y + z >= 0;\n*/\n```",
                "```\n/*@\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant z >= 0;\nloop invariant k >= 0;\nloop invariant k <= x+y+z;\nloop invariant k >= x+y+z || unknown1() == 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= z;\nloop invariant 0 <= k;\nloop invariant x <= x + 1;\nloop invariant y <= y + 1;\nloop invariant z <= z + 1;\nloop invariant k <= x + y + z;\nloop invariant k >= x;\nloop invariant k >= y;\nloop invariant k >= z;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant x <= z;\nloop invariant x <= x + 1;\nloop invariant y <= y + 1;\nloop invariant z <= z + 1;\nloop invariant x <= y + 1;\nloop invariant y <= z + 1;\nloop invariant x <= z + 1;\nloop invariant x <= x + 1;\nloop invariant y <= y + 1;\nloop invariant z <= z + 1;\nloop invariant x <= y + 1;\nloop invariant y <= z + 1;\nloop invariant x <= z + 1;\nloop invariant x <= x + 1;\nloop invariant y <= y + 1;\nloop invariant z <= z + 1;\nloop invariant x <= y + 1;\nloop invariant y <= z + 1;\nloop invariant x <= z + 1;\nloop invariant x <= x + 1;\nloop invariant y <= y + 1;\nloop invariant z <= z + 1;\nloop invariant x <= y + 1;\nloop invariant y <= z + 1;\nloop invariant x <= z + 1;\nloop invariant x <= x + 1;\nloop invariant y <= y + 1;\nloop invariant z <= z + 1;\nloop invariant x <= y + 1;\nloop invariant y <= z + 1;\nloop invariant x <= z + 1;\nloop invariant x <= x + 1;\nloop invariant y <= y + 1;\nloop invariant z <= z + 1;\nloop invariant x <= y + 1;\nloop invariant y <= z + 1;\nloop invariant x <= z + 1;\nloop invariant x <= x + 1;\nloop invariant y <= y + 1;\nloop invariant z <= z + 1;\nloop invariant x <= y + 1;\nloop invariant y <= z + 1;\nloop invariant x <= z + 1;\nloop invariant x <= x + 1;\nloop invariant y <= y + 1;\nloop invariant z <= z + 1;\nloop invariant x <= y + 1;\nloop invariant y <= z + 1;\nloop invariant x <= z + 1;\nloop invariant x <= x + 1;\nloop invariant y <= y + 1;\nloop invariant z <= z + 1;\nloop invariant x <= y + 1;\nloop invariant y <= z + 1;\nloop invariant x <= z + 1;\nloop invariant x <= x + 1;\nloop invariant y <= y + 1;\nloop invariant z <= z + 1;\nloop invariant x <= y + 1;\nloop invariant y <= z + 1;\nloop invariant x <= z + 1;\nloop invariant x <= x + 1;\nloop invariant y <= y + 1;\nloop invariant z <= z + 1;\nloop invariant x <= y + 1;\nloop invariant y <= z + 1;\nloop invariant x <= z + 1;\nloop invariant x <= x + 1;\nloop invariant y <= y + 1;\nloop invariant z <= z + 1;\nloop invariant x <= y + 1;\nloop invariant y <= z + 1;\nloop invariant x <= z + 1;\nloop invariant x <= x + 1;\nloop invariant y <= y + 1;\nloop invariant z <= z + 1;\nloop invariant x <= y + 1;\nloop invariant y <= z + 1;\nloop invariant x <= z + 1;\nloop invariant x <= x + 1;\nloop invariant y <= y + 1;\nloop invariant z <= z + 1;\nloop invariant x <= y + 1;\nloop invariant y <= z + 1;\nloop invariant x <= z + 1;\nloop invariant x <= x + 1;\nloop invariant y <= y + 1;\nloop invariant z <= z + 1;\nloop invariant x <= y + 1;\nloop invariant y <= z + 1;\nloop invariant x <= z + 1;\nloop invariant x <= x + 1;\nloop invariant y <= y + 1;\nloop invariant z <= z + 1;\nloop invariant x <= y + 1;\nloop invariant y <= z + 1;\nloop invariant x <= z + 1;\nloop invariant x <= x + 1;\nloop invariant y <= y + 1;\nloop invariant z <= z + 1;\n*/\n```",
                "```\n/*@\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant k >= 0;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= k;\nloop invariant k == x + y + z;\nloop invariant y >= k % 3;\nloop invariant k % 3 < 3;\nloop invariant k % 3 == 0 ==> x == k / 3;\nloop invariant k % 3 == 1 ==> y == (k - 1) / 3;\nloop invariant k % 3 == 2 ==> z == (k - 2) / 3;\nloop invariant k % 3 == 0 ==> x == (k - 2) / 3;\nloop invariant k % 3 == 1 ==> y == (k - 1) / 3;\nloop invariant k % 3 == 2 ==> z == (k - 2) / 3;\nloop invariant k % 3 == 0 ==> x == (k - 2) / 3;\nloop invariant k % 3 == 1 ==> y == (k - 1) / 3;\nloop invariant k % 3 == 2 ==> z == (k - 2) / 3;\nloop invariant k % 3 == 0 ==> x == (k - 2) / 3;\nloop invariant k % 3 == 1 ==> y == (k - 1) / 3;\nloop invariant k % 3 == 2 ==> z == (k - 2) / 3;\nloop invariant k % 3 == 0 ==> x == (k - 2) / 3;\nloop invariant k % 3 == 1 ==> y == (k - 1) / 3;\nloop invariant k % 3 == 2 ==> z == (k - 2) / 3;\nloop invariant k % 3 == 0 ==> x == (k - 2) / 3;\nloop invariant k % 3 == 1 ==> y == (k - 1) / 3;\nloop invariant k % 3 == 2 ==> z == (k - 2) / 3;\nloop invariant k % 3 == 0 ==> x == (k - 2) / 3;\nloop invariant k % 3 == 1 ==> y == (k - 1) / 3;\nloop invariant k % 3 == 2 ==> z == (k - 2) / 3;\nloop invariant k % 3 == 0 ==> x == (k - 2) / 3;\nloop invariant k % 3 == 1 ==> y == (k - 1) / 3;\nloop invariant k % 3 == 2 ==> z == (k - 2) / 3;\nloop invariant k % 3 == 0 ==> x == (k - 2) / 3;\nloop invariant k % 3 == 1 ==> y == (k - 1) / 3;\nloop invariant k % 3 == 2 ==> z == (k - 2) / 3;\nloop invariant k % 3 == 0 ==> x == (k - 2) / 3;\nloop invariant k % 3 == 1 ==> y == (k - 1) / 3;\nloop invariant k % 3 == 2 ==> z == (k - 2) / 3;\nloop invariant k % 3 == 0 ==> x == (k - 2) / 3;\nloop invariant k % 3 == 1 ==> y == (k - 1) / 3;\nloop invariant k % 3 == 2 ==> z == (k - 2) / 3;\nloop invariant k % 3 == 0 ==> x == (k - 2) / 3;\nloop invariant k % 3 == 1 ==> y == (k - 1) / 3;\nloop invariant k % 3 == 2 ==> z == (k - 2) / 3;\nloop invariant k % 3 == 0 ==> x == (k - 2) / 3;\nloop invariant k % 3 == 1 ==> y == (k - 1) / 3;\nloop invariant k % 3 == 2 ==> z == (k - 2) / 3;\nloop invariant k % 3 == 0 ==> x == (k - 2) / 3;\nloop invariant k % 3 == 1 ==> y == (k - 1) / 3;\nloop invariant k % 3 == 2 ==> z == (k - 2) / 3;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= k;\nloop invariant 0 <= x <= k;\nloop invariant 0 <= y <= k;\nloop invariant 0 <= z <= k;\nloop invariant x + y + z == k;\nloop invariant k % 3 == 0 ==> x == y && y == z;\nloop invariant k % 3 != 0 ==> x + y + z == k;\n*/\n```",
                "```\n/*@\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant k >= 0;\nloop invariant x >= 0;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= k;\nloop invariant y <= k;\nloop invariant z <= k;\nloop invariant (k == x + y + z) ==> (k >= x);\nloop invariant (k == x + y + z) ==> (k >= y);\nloop invariant (k == x + y + z) ==> (k >= z);\nloop invariant (k == x + y + z) ==> (x >= 0);\nloop invariant (k == x + y + z) ==> (y >= 0);\nloop invariant (k == x + y + z) ==> (z >= 0);\nloop invariant (k == x + y + z) ==> (x <= y);\nloop invariant (k == x + y + z) ==> (y <= z);\nloop invariant (k == x + y + z) ==> (z <= k);\nloop invariant (k == x + y + z) ==> (y <= k);\nloop invariant (k == x + y + z) ==> (z <= k);\nloop invariant (k == x + y + z) ==> (x == y);\nloop invariant (k == x + y + z) ==> (y == z);\nloop invariant (k == x + y + z) ==> (z == k);\nloop invariant (k == x + y + z) ==> (x >= 0);\nloop invariant (k == x + y + z) ==> (y >= 0);\nloop invariant (k == x + y + z) ==> (z >= 0);\nloop invariant (k == x + y + z) ==> (x <= y);\nloop invariant (k == x + y + z) ==> (y <= z);\nloop invariant (k == x + y + z) ==> (z <= k);\nloop invariant (k == x + y + z) ==> (y <= k);\nloop invariant (k == x + y + z) ==> (z <= k);\nloop invariant (k == x + y + z) ==> (x == y);\nloop invariant (k == x + y + z) ==> (y == z);\nloop invariant (k == x + y + z) ==> (z == k);\nloop invariant (k == x + y + z) ==> (x >= 0);\nloop invariant (k == x + y + z) ==> (y >= 0);\nloop invariant (k == x + y + z) ==> (z >= 0);\nloop invariant (k == x + y + z) ==> (x <= y);\nloop invariant (k == x + y + z) ==> (y <= z);\nloop invariant (k == x + y + z) ==> (z <= k);\nloop invariant (k == x + y + z) ==> (y <= k);\nloop invariant (k == x + y + z) ==> (z <= k);\nloop invariant (k == x + y + z) ==> (x == y);\nloop invariant (k == x + y + z) ==> (y == z);\nloop invariant (k == x + y + z) ==> (z == k);\nloop invariant (k == x + y + z) ==> (x >= 0);\nloop invariant (k == x + y + z) ==> (y >= 0);\nloop invariant (k == x + y + z) ==> (z >= 0);\nloop invariant (k == x + y + z) ==> (x <= y);\nloop invariant (k == x + y + z) ==> (y <= z);\nloop invariant (k == x + y + z) ==> (z <= k);\nloop invariant (k == x + y + z) ==> (y <= k);\nloop invariant (k == x + y + z) ==> (z <= k);\nloop invariant (k == x + y + z) ==> (x == y);\nloop invariant (k == x + y + z) ==> (y == z);\nloop invariant (k == x + y + z) ==> (z == k);\nloop invariant (k == x + y + z) ==> (x >= 0);\nloop invariant (k == x + y + z) ==> (y >= 0);\nloop invariant (k == x + y + z) ==> (z >= 0);\nloop invariant (k == x + y + z) ==> (x <= y);\nloop invariant (k == x + y + z) ==> (y <= z);\nloop invariant (k == x + y + z) ==> (z <= k);\nloop invariant (k == x + y + z) ==> (y <= k);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= z;\nloop invariant 0 <= k;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z == x + y;\nloop invariant k == x + y + z;\nloop invariant x <= y + z;\nloop invariant y <= x + z;\nloop invariant z <= x + y;\nloop invariant x <= y <= z;\nloop invariant y <= x <= z;\nloop invariant z <= y <= x;\nloop invariant k == 2 * x + 2 * y + 2 * z;\nloop invariant k == 3 * (x + y + z);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= y <= z;\nloop invariant x + y + z == k;\nloop invariant k%3 == 0 ==> x == 0;\nloop invariant k%3 == 1 ==> x == 1;\nloop invariant k%3 == 2 ==> x == 2;\nloop invariant unknown1() ==> x + y + z == k;\nloop invariant !unknown1() ==> x + y + z == k;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= y <= z <= INT_MAX;\nloop invariant k = x + y + z;\nloop invariant k % 3 == 0 ==> x <= y <= z;\nloop invariant k % 3 != 0 ==> x <= y <= z;\nloop invariant k % 3 == 0 ==> x == y == z;\nloop invariant k % 3 != 0 ==> x == y == z;\nloop invariant 0 <= x <= y <= z <= INT_MAX;\nloop invariant k = x + y + z;\nloop invariant k % 3 == 0 ==> x <= y <= z;\nloop invariant k % 3 != 0 ==> x <= y <= z;\nloop invariant k % 3 == 0 ==> x == y == z;\nloop invariant k % 3 != 0 ==> x == y == z;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= k;\nloop invariant 0 <= y <= k;\nloop invariant 0 <= z <= k;\nloop invariant x <= y && y <= z;\nloop invariant x <= k;\nloop invariant y <= k;\nloop invariant z <= k;\nloop invariant x + y + z == k;\nloop invariant x == y && y == z ==> k % 3 == 0;\nloop invariant x + y + z == k ==> k % 3 == 0;\nloop invariant x + y + z == k ==> x == y && y == z;\nloop invariant x + y + z == k ==> x == y;\nloop invariant x + y + z == k ==> y == z;\nloop invariant x + y + z == k ==> x == z;\nloop invariant x + y + z == k ==> x == y && y == z;\nloop invariant x + y + z == k ==> x == y || y == z;\nloop invariant x + y + z == k ==> x == y || z == y;\nloop invariant x + y + z == k ==> x == y || y == z || z == y;\nloop invariant x + y + z == k ==> x == y || y == z || z == y || x == z;\nloop invariant x + y + z == k ==> x == y || y == z || z == y || x == z || x == y && y == z;\nloop invariant x + y + z == k ==> x == y || y == z || z == y || x == z || x == y && y == z || x == y || y == z;\nloop invariant x + y + z == k ==> x == y || y == z || z == y || x == z || x == y && y == z || x == y || y == z || x == z;\nloop invariant x + y + z == k ==> x == y || y == z || z == y || x == z || x == y && y == z || x == y || y == z || x == z || x == y && y == z;\nloop invariant x + y + z == k ==> x == y || y == z || z == y || x == z || x == y && y == z || x == y || y == z || x == z || x == y && y == z || x == y || y == z;\nloop invariant x + y + z == k ==> x == y || y == z || z == y || x == z || x == y && y == z || x == y || y == z || x == z || x == y && y == z || x == y || y == z || x == z;\nloop invariant x + y + z == k ==> x == y || y == z || z == y || x == z || x == y && y == z || x == y || y == z || x == z || x == y && y == z || x == y || y == z || x == z || x == y && y == z;\nloop invariant x + y + z == k ==> x == y || y == z || z == y || x == z || x == y && y == z || x == y || y == z || x == z || x == y && y == z || x == y || y == z || x == z || x == y && y == z || x == y || y == z;\nloop invariant x + y + z == k ==> x == y || y == z || z == y || x == z || x == y && y == z || x == y || y == z || x == z || x == y && y == z || x == y || y == z || x == z || x == y && y == z || x == y || y == z || x == z;\nloop invariant x + y + z == k ==> x == y || y == z || z == y || x == z || x == y && y == z || x == y || y == z || x == z || x == y && y == z || x == y || y == z || x == z || x == y && y == z || x == y || y == z || x == z || x == y && y == z;\n*/\n```",
                "```\n/*@\nloop invariant x <= y <= z;\nloop invariant k == x+y+z;\nloop invariant k%3 >= 0 && k%3 <= 2;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant x + y + z == k;\nloop invariant x == y ==> x%3 == y%3;\nloop invariant x == z ==> x%3 == z%3;\nloop invariant y == z ==> y%3 == z%3;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= y <= z <= k;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant 0 <= y <= z;\nloop invariant 0 <= z;\nloop invariant x + y + z = k;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant k >= 0;\nloop invariant x + y + z >= k;\nloop invariant x + y + z <= k;\nloop invariant x + y + z == k;\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= k;\nloop invariant x + y + z == k;\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= k;\nloop invariant x + y + z == k;\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= k;\nloop invariant x + y + z == k;\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= k;\nloop invariant x + y + z == k;\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= k;\nloop invariant x + y + z == k;\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= k;\nloop invariant x + y + z == k;\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= k;\nloop invariant x + y + z == k;\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= k;\nloop invariant x + y + z == k;\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= k;\nloop invariant x + y + z == k;\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= k;\nloop invariant x + y + z == k;\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= k;\nloop invariant x + y + z == k;\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= k;\nloop invariant x + y + z == k;\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= k;\nloop invariant x + y + z == k;\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= k;\nloop invariant x + y + z == k;\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= k;\nloop invariant x + y + z == k;\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= k;\nloop invariant x + y + z == k;\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= k;\nloop invariant x + y + z == k;\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= k;\nloop invariant x + y + z == k;\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= k;\nloop invariant x + y + z == k;\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= k;\nloop invariant x + y + z == k;\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= k;\nloop invariant x + y + z == k;\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= k;\nloop invariant x + y + z == k;\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= k;\nloop invariant x + y + z == k;\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= k;\nloop invariant x + y + z == k;\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= k;\nloop invariant x + y + z == k;\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= k;\nloop invariant x + y + z == k;\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= k;\nloop invariant x + y + z == k;\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= k;\nloop invariant x + y + z == k;\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= k;\nloop invariant x + y + z == k;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= y <= x+y+z;\nloop invariant 0 <= x <= y+z;\nloop invariant 0 <= z <= x+y;\nloop invariant y+z <= x;\nloop invariant x+y <= z;\nloop invariant x+y+z <= k;\n*/\n```",
                "```\n/*@\nloop invariant 1 -> 1 <= k <= x+y+z;\nloop invariant 2 -> k%(3*x+y+z) == 0;\nloop invariant 3 -> x >= 0;\nloop invariant 4 -> y >= 0;\nloop invariant 5 -> z >= 0;\nloop invariant 6 -> k >= 1;\nloop invariant 7 -> x <= y;\nloop invariant 8 -> y <= z;\nloop invariant 9 -> x <= z;\nloop invariant 10 -> x <= k;\nloop invariant 11 -> y <= k;\nloop invariant 12 -> z <= k;\n*/\n```"
            ],
            "completions": [
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 1;\nloop invariant x <= y <= x + 1;\nloop invariant z >= x;\nloop invariant x + y + z <= 3 * x + 1;\nloop invariant x + y + z <= 3 * y;\nloop invariant x + y + z <= 3 * z;\nloop invariant x + y + z >= x;\nloop invariant x + y + z >= y;\nloop invariant x + y + z >= z;\nloop invariant x + y + z <= 3 * (x + y + z);\nloop invariant x + y + z >= 0;\nloop invariant x + y + z >= x + y + z;\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= 3 * (x + y + z);\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= 3 * (x + y + z);\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= 3 * (x + y + z);\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= 3 * (x + y + z);\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= 3 * (x + y + z);\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= 3 * (x + y + z);\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= 3 * (x + y + z);\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= 3 * (x + y + z);\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= 3 * (x + y + z);\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= 3 * (x + y + z);\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= 3 * (x + y + z);\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= 3 * (x + y + z);\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= 3 * (x + y + z);\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= 3 * (x + y + z);\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= 3 * (x + y + z);\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= 3 * (x + y + z);\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= 3 * (x + y + z);\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= 3 * (x + y + z);\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= 3 * (x + y + z);\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= 3 * (x + y + z);\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= 3 * (x + y + z);\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= 3 * (x + y + z);\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= 3 * (x + y + z);\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= 3 * (x + y + z);\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= 3 * (x + y + z);\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= 3 * (x + y + z);\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= 3 * (x + y + z);\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= 3 * (x + y + z);\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= 3 * (x + y + z);\nloop invariant x + y + z >= 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 1 is established but not preserved.\nloop invariant x <= y <= x + 1 is partially proven to be inductive.\nloop invariant z >= x is partially proven to be inductive.\nloop invariant x + y + z <= 3 * x + 1 is established but not preserved.\nloop invariant x + y + z <= 3 * y is partially proven to be inductive.\nloop invariant x + y + z <= 3 * z is partially proven to be inductive.\nloop invariant x + y + z >= x is partially proven to be inductive.\nloop invariant x + y + z >= y is partially proven to be inductive.\nloop invariant x + y + z >= z is partially proven to be inductive.\nloop invariant x + y + z <= 3 * (x + y + z) is partially proven to be inductive.\nloop invariant x + y + z >= 0 is partially proven to be inductive.\nloop invariant x + y + z >= x + y + z is partially proven to be inductive.\nAssertion x == y == z: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nvoid main()\n{\n  int x = 0;\n  int y = 0;\n  int z = 0;\n  int k = 0;\n\n  /*@\n\n\nloop invariant i3: z >= x;\n\nloop invariant i5: x + y + z <= 3 * y;\nloop invariant i6: x + y + z <= 3 * z;\nloop invariant i7: x + y + z >= x;\nloop invariant i8: x + y + z >= y;\nloop invariant i9: x + y + z >= z;\nloop invariant i10: x + y + z <= 3 * (x + y + z);\nloop invariant i11: x + y + z >= 0;\nloop invariant i12: x + y + z >= x + y + z;\n*/\nwhile(unknown1())\n  {\n     if(k%3 == 0)\n       x++;\n     y++;\n     z++;\n     k = x+y+z;\n  }\n\n  {;\n//@ assert(x==y && y==z);\n}\n \n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant z >= 0;\nloop invariant k >= 0;\nloop invariant k <= x+y+z;\nloop invariant k >= x+y+z || unknown1() == 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 22: unexpected token ')'",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nvoid main()\n{\n  int x = 0;\n  int y = 0;\n  int z = 0;\n  int k = 0;\n\n  /*@\nloop invariant i1: y >= 0;\nloop invariant i2: x >= 0;\nloop invariant i3: z >= 0;\nloop invariant i4: k >= 0;\nloop invariant i5: k <= x+y+z;\n\n*/\nwhile(unknown1())\n  {\n     if(k%3 == 0)\n       x++;\n     y++;\n     z++;\n     k = x+y+z;\n  }\n\n  {;\n//@ assert(x==y && y==z);\n}\n \n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= z;\nloop invariant 0 <= k;\nloop invariant x <= x + 1;\nloop invariant y <= y + 1;\nloop invariant z <= z + 1;\nloop invariant k <= x + y + z;\nloop invariant k >= x;\nloop invariant k >= y;\nloop invariant k >= z;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant x <= z;\nloop invariant x <= x + 1;\nloop invariant y <= y + 1;\nloop invariant z <= z + 1;\nloop invariant x <= y + 1;\nloop invariant y <= z + 1;\nloop invariant x <= z + 1;\nloop invariant x <= x + 1;\nloop invariant y <= y + 1;\nloop invariant z <= z + 1;\nloop invariant x <= y + 1;\nloop invariant y <= z + 1;\nloop invariant x <= z + 1;\nloop invariant x <= x + 1;\nloop invariant y <= y + 1;\nloop invariant z <= z + 1;\nloop invariant x <= y + 1;\nloop invariant y <= z + 1;\nloop invariant x <= z + 1;\nloop invariant x <= x + 1;\nloop invariant y <= y + 1;\nloop invariant z <= z + 1;\nloop invariant x <= y + 1;\nloop invariant y <= z + 1;\nloop invariant x <= z + 1;\nloop invariant x <= x + 1;\nloop invariant y <= y + 1;\nloop invariant z <= z + 1;\nloop invariant x <= y + 1;\nloop invariant y <= z + 1;\nloop invariant x <= z + 1;\nloop invariant x <= x + 1;\nloop invariant y <= y + 1;\nloop invariant z <= z + 1;\nloop invariant x <= y + 1;\nloop invariant y <= z + 1;\nloop invariant x <= z + 1;\nloop invariant x <= x + 1;\nloop invariant y <= y + 1;\nloop invariant z <= z + 1;\nloop invariant x <= y + 1;\nloop invariant y <= z + 1;\nloop invariant x <= z + 1;\nloop invariant x <= x + 1;\nloop invariant y <= y + 1;\nloop invariant z <= z + 1;\nloop invariant x <= y + 1;\nloop invariant y <= z + 1;\nloop invariant x <= z + 1;\nloop invariant x <= x + 1;\nloop invariant y <= y + 1;\nloop invariant z <= z + 1;\nloop invariant x <= y + 1;\nloop invariant y <= z + 1;\nloop invariant x <= z + 1;\nloop invariant x <= x + 1;\nloop invariant y <= y + 1;\nloop invariant z <= z + 1;\nloop invariant x <= y + 1;\nloop invariant y <= z + 1;\nloop invariant x <= z + 1;\nloop invariant x <= x + 1;\nloop invariant y <= y + 1;\nloop invariant z <= z + 1;\nloop invariant x <= y + 1;\nloop invariant y <= z + 1;\nloop invariant x <= z + 1;\nloop invariant x <= x + 1;\nloop invariant y <= y + 1;\nloop invariant z <= z + 1;\nloop invariant x <= y + 1;\nloop invariant y <= z + 1;\nloop invariant x <= z + 1;\nloop invariant x <= x + 1;\nloop invariant y <= y + 1;\nloop invariant z <= z + 1;\nloop invariant x <= y + 1;\nloop invariant y <= z + 1;\nloop invariant x <= z + 1;\nloop invariant x <= x + 1;\nloop invariant y <= y + 1;\nloop invariant z <= z + 1;\nloop invariant x <= y + 1;\nloop invariant y <= z + 1;\nloop invariant x <= z + 1;\nloop invariant x <= x + 1;\nloop invariant y <= y + 1;\nloop invariant z <= z + 1;\nloop invariant x <= y + 1;\nloop invariant y <= z + 1;\nloop invariant x <= z + 1;\nloop invariant x <= x + 1;\nloop invariant y <= y + 1;\nloop invariant z <= z + 1;\nloop invariant x <= y + 1;\nloop invariant y <= z + 1;\nloop invariant x <= z + 1;\nloop invariant x <= x + 1;\nloop invariant y <= y + 1;\nloop invariant z <= z + 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x is inductive.\nloop invariant 0 <= y is inductive.\nloop invariant 0 <= z is inductive.\nloop invariant 0 <= k is inductive.\nloop invariant x <= x + 1 is inductive.\nloop invariant y <= y + 1 is inductive.\nloop invariant z <= z + 1 is inductive.\nloop invariant k <= x + y + z is inductive.\nloop invariant k >= x is inductive.\nloop invariant k >= y is inductive.\nloop invariant k >= z is inductive.\nloop invariant x <= y is inductive.\nloop invariant y <= z is inductive.\nloop invariant x <= z is inductive.\nloop invariant x <= y + 1 is inductive.\nloop invariant y <= z + 1 is inductive.\nloop invariant x <= z + 1 is inductive.\nAssertion x == y == z: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nvoid main()\n{\n  int x = 0;\n  int y = 0;\n  int z = 0;\n  int k = 0;\n\n  /*@\nloop invariant i1: 0 <= x;\nloop invariant i2: 0 <= y;\nloop invariant i3: 0 <= z;\nloop invariant i4: 0 <= k;\nloop invariant i5: x <= x + 1;\nloop invariant i6: y <= y + 1;\nloop invariant i7: z <= z + 1;\nloop invariant i8: k <= x + y + z;\nloop invariant i9: k >= x;\nloop invariant i10: k >= y;\nloop invariant i11: k >= z;\nloop invariant i12: x <= y;\nloop invariant i13: y <= z;\nloop invariant i14: x <= z;\nloop invariant i15: x <= y + 1;\nloop invariant i16: y <= z + 1;\nloop invariant i17: x <= z + 1;\n*/\nwhile(unknown1())\n  {\n     if(k%3 == 0)\n       x++;\n     y++;\n     z++;\n     k = x+y+z;\n  }\n\n  {;\n//@ assert(x==y && y==z);\n}\n \n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant k >= 0;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= k;\nloop invariant k == x + y + z;\nloop invariant y >= k % 3;\nloop invariant k % 3 < 3;\nloop invariant k % 3 == 0 ==> x == k / 3;\nloop invariant k % 3 == 1 ==> y == (k - 1) / 3;\nloop invariant k % 3 == 2 ==> z == (k - 2) / 3;\nloop invariant k % 3 == 0 ==> x == (k - 2) / 3;\nloop invariant k % 3 == 1 ==> y == (k - 1) / 3;\nloop invariant k % 3 == 2 ==> z == (k - 2) / 3;\nloop invariant k % 3 == 0 ==> x == (k - 2) / 3;\nloop invariant k % 3 == 1 ==> y == (k - 1) / 3;\nloop invariant k % 3 == 2 ==> z == (k - 2) / 3;\nloop invariant k % 3 == 0 ==> x == (k - 2) / 3;\nloop invariant k % 3 == 1 ==> y == (k - 1) / 3;\nloop invariant k % 3 == 2 ==> z == (k - 2) / 3;\nloop invariant k % 3 == 0 ==> x == (k - 2) / 3;\nloop invariant k % 3 == 1 ==> y == (k - 1) / 3;\nloop invariant k % 3 == 2 ==> z == (k - 2) / 3;\nloop invariant k % 3 == 0 ==> x == (k - 2) / 3;\nloop invariant k % 3 == 1 ==> y == (k - 1) / 3;\nloop invariant k % 3 == 2 ==> z == (k - 2) / 3;\nloop invariant k % 3 == 0 ==> x == (k - 2) / 3;\nloop invariant k % 3 == 1 ==> y == (k - 1) / 3;\nloop invariant k % 3 == 2 ==> z == (k - 2) / 3;\nloop invariant k % 3 == 0 ==> x == (k - 2) / 3;\nloop invariant k % 3 == 1 ==> y == (k - 1) / 3;\nloop invariant k % 3 == 2 ==> z == (k - 2) / 3;\nloop invariant k % 3 == 0 ==> x == (k - 2) / 3;\nloop invariant k % 3 == 1 ==> y == (k - 1) / 3;\nloop invariant k % 3 == 2 ==> z == (k - 2) / 3;\nloop invariant k % 3 == 0 ==> x == (k - 2) / 3;\nloop invariant k % 3 == 1 ==> y == (k - 1) / 3;\nloop invariant k % 3 == 2 ==> z == (k - 2) / 3;\nloop invariant k % 3 == 0 ==> x == (k - 2) / 3;\nloop invariant k % 3 == 1 ==> y == (k - 1) / 3;\nloop invariant k % 3 == 2 ==> z == (k - 2) / 3;\nloop invariant k % 3 == 0 ==> x == (k - 2) / 3;\nloop invariant k % 3 == 1 ==> y == (k - 1) / 3;\nloop invariant k % 3 == 2 ==> z == (k - 2) / 3;\nloop invariant k % 3 == 0 ==> x == (k - 2) / 3;\nloop invariant k % 3 == 1 ==> y == (k - 1) / 3;\nloop invariant k % 3 == 2 ==> z == (k - 2) / 3;\nloop invariant k % 3 == 0 ==> x == (k - 2) / 3;\nloop invariant k % 3 == 1 ==> y == (k - 1) / 3;\nloop invariant k % 3 == 2 ==> z == (k - 2) / 3;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant x >= 0 is partially proven to be inductive.\nloop invariant y >= 0 is partially proven to be inductive.\nloop invariant z >= 0 is partially proven to be inductive.\nloop invariant k >= 0 is partially proven to be inductive.\nloop invariant x <= y is partially proven to be inductive.\nloop invariant y <= z is partially proven to be inductive.\nloop invariant z <= k is partially proven to be inductive.\nloop invariant k == x + y + z is partially proven to be inductive.\nloop invariant y >= k % 3 is partially proven to be inductive.\nloop invariant k % 3 < 3 is partially proven to be inductive.\nloop invariant k % 3 == 0 ==> x == k / 3 is established but not preserved.\nloop invariant k % 3 == 1 ==> y == (k - 1) / 3 is partially proven to be inductive.\nloop invariant k % 3 == 2 ==> z == (k - 2) / 3 is partially proven to be inductive.\nloop invariant k % 3 == 0 ==> x == (k - 2) / 3 is established but not preserved.\nAssertion x == y == z: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nvoid main()\n{\n  int x = 0;\n  int y = 0;\n  int z = 0;\n  int k = 0;\n\n  /*@\nloop invariant i1: x >= 0;\nloop invariant i2: y >= 0;\nloop invariant i3: z >= 0;\nloop invariant i4: k >= 0;\nloop invariant i5: x <= y;\nloop invariant i6: y <= z;\nloop invariant i7: z <= k;\nloop invariant i8: k == x + y + z;\nloop invariant i9: y >= k % 3;\nloop invariant i10: k % 3 < 3;\n\nloop invariant i12: k % 3 == 1 ==> y == (k - 1) / 3;\nloop invariant i13: k % 3 == 2 ==> z == (k - 2) / 3;\n\n*/\nwhile(unknown1())\n  {\n     if(k%3 == 0)\n       x++;\n     y++;\n     z++;\n     k = x+y+z;\n  }\n\n  {;\n//@ assert(x==y && y==z);\n}\n \n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= k;\nloop invariant 0 <= x <= k;\nloop invariant 0 <= y <= k;\nloop invariant 0 <= z <= k;\nloop invariant x + y + z == k;\nloop invariant k % 3 == 0 ==> x == y && y == z;\nloop invariant k % 3 != 0 ==> x + y + z == k;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= k is partially proven to be inductive.\nloop invariant 0 <= x <= k is partially proven to be inductive.\nloop invariant 0 <= y <= k is partially proven to be inductive.\nloop invariant 0 <= z <= k is partially proven to be inductive.\nloop invariant x + y + z == k is partially proven to be inductive.\nloop invariant k % 3 == 0 ==> x == y && y == z is established but not preserved.\nloop invariant k % 3 != 0 ==> x + y + z == k is partially proven to be inductive.\nAssertion x == y == z: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nvoid main()\n{\n  int x = 0;\n  int y = 0;\n  int z = 0;\n  int k = 0;\n\n  /*@\nloop invariant i1: 0 <= k;\nloop invariant i2: 0 <= x <= k;\nloop invariant i3: 0 <= y <= k;\nloop invariant i4: 0 <= z <= k;\nloop invariant i5: x + y + z == k;\n\nloop invariant i7: k % 3 != 0 ==> x + y + z == k;\n*/\nwhile(unknown1())\n  {\n     if(k%3 == 0)\n       x++;\n     y++;\n     z++;\n     k = x+y+z;\n  }\n\n  {;\n//@ assert(x==y && y==z);\n}\n \n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant k >= 0;\nloop invariant x >= 0;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= k;\nloop invariant y <= k;\nloop invariant z <= k;\nloop invariant (k == x + y + z) ==> (k >= x);\nloop invariant (k == x + y + z) ==> (k >= y);\nloop invariant (k == x + y + z) ==> (k >= z);\nloop invariant (k == x + y + z) ==> (x >= 0);\nloop invariant (k == x + y + z) ==> (y >= 0);\nloop invariant (k == x + y + z) ==> (z >= 0);\nloop invariant (k == x + y + z) ==> (x <= y);\nloop invariant (k == x + y + z) ==> (y <= z);\nloop invariant (k == x + y + z) ==> (z <= k);\nloop invariant (k == x + y + z) ==> (y <= k);\nloop invariant (k == x + y + z) ==> (z <= k);\nloop invariant (k == x + y + z) ==> (x == y);\nloop invariant (k == x + y + z) ==> (y == z);\nloop invariant (k == x + y + z) ==> (z == k);\nloop invariant (k == x + y + z) ==> (x >= 0);\nloop invariant (k == x + y + z) ==> (y >= 0);\nloop invariant (k == x + y + z) ==> (z >= 0);\nloop invariant (k == x + y + z) ==> (x <= y);\nloop invariant (k == x + y + z) ==> (y <= z);\nloop invariant (k == x + y + z) ==> (z <= k);\nloop invariant (k == x + y + z) ==> (y <= k);\nloop invariant (k == x + y + z) ==> (z <= k);\nloop invariant (k == x + y + z) ==> (x == y);\nloop invariant (k == x + y + z) ==> (y == z);\nloop invariant (k == x + y + z) ==> (z == k);\nloop invariant (k == x + y + z) ==> (x >= 0);\nloop invariant (k == x + y + z) ==> (y >= 0);\nloop invariant (k == x + y + z) ==> (z >= 0);\nloop invariant (k == x + y + z) ==> (x <= y);\nloop invariant (k == x + y + z) ==> (y <= z);\nloop invariant (k == x + y + z) ==> (z <= k);\nloop invariant (k == x + y + z) ==> (y <= k);\nloop invariant (k == x + y + z) ==> (z <= k);\nloop invariant (k == x + y + z) ==> (x == y);\nloop invariant (k == x + y + z) ==> (y == z);\nloop invariant (k == x + y + z) ==> (z == k);\nloop invariant (k == x + y + z) ==> (x >= 0);\nloop invariant (k == x + y + z) ==> (y >= 0);\nloop invariant (k == x + y + z) ==> (z >= 0);\nloop invariant (k == x + y + z) ==> (x <= y);\nloop invariant (k == x + y + z) ==> (y <= z);\nloop invariant (k == x + y + z) ==> (z <= k);\nloop invariant (k == x + y + z) ==> (y <= k);\nloop invariant (k == x + y + z) ==> (z <= k);\nloop invariant (k == x + y + z) ==> (x == y);\nloop invariant (k == x + y + z) ==> (y == z);\nloop invariant (k == x + y + z) ==> (z == k);\nloop invariant (k == x + y + z) ==> (x >= 0);\nloop invariant (k == x + y + z) ==> (y >= 0);\nloop invariant (k == x + y + z) ==> (z >= 0);\nloop invariant (k == x + y + z) ==> (x <= y);\nloop invariant (k == x + y + z) ==> (y <= z);\nloop invariant (k == x + y + z) ==> (z <= k);\nloop invariant (k == x + y + z) ==> (y <= k);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant y >= 0 is partially proven to be inductive.\nloop invariant z >= 0 is partially proven to be inductive.\nloop invariant k >= 0 is partially proven to be inductive.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant x <= y is partially proven to be inductive.\nloop invariant y <= z is partially proven to be inductive.\nloop invariant z <= k is partially proven to be inductive.\nloop invariant y <= k is partially proven to be inductive.\nloop invariant (k == x + y + z) ==> (k >= x) is partially proven to be inductive.\nloop invariant (k == x + y + z) ==> (k >= y) is partially proven to be inductive.\nloop invariant (k == x + y + z) ==> (k >= z) is partially proven to be inductive.\nloop invariant (k == x + y + z) ==> (x >= 0) is partially proven to be inductive.\nloop invariant (k == x + y + z) ==> (y >= 0) is partially proven to be inductive.\nloop invariant (k == x + y + z) ==> (z >= 0) is partially proven to be inductive.\nloop invariant (k == x + y + z) ==> (x <= y) is partially proven to be inductive.\nloop invariant (k == x + y + z) ==> (y <= z) is partially proven to be inductive.\nloop invariant (k == x + y + z) ==> (z <= k) is partially proven to be inductive.\nloop invariant (k == x + y + z) ==> (y <= k) is partially proven to be inductive.\nloop invariant (k == x + y + z) ==> (x == y) is established but not preserved.\nloop invariant (k == x + y + z) ==> (y == z) is established but not preserved.\nloop invariant (k == x + y + z) ==> (z == k) is established but not preserved.\nAssertion x == y == z: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nvoid main()\n{\n  int x = 0;\n  int y = 0;\n  int z = 0;\n  int k = 0;\n\n  /*@\nloop invariant i1: y >= 0;\nloop invariant i2: z >= 0;\nloop invariant i3: k >= 0;\nloop invariant i4: x >= 0;\nloop invariant i5: x <= y;\nloop invariant i6: y <= z;\nloop invariant i7: z <= k;\nloop invariant i8: y <= k;\nloop invariant i9: (k == x + y + z) ==> (k >= x);\nloop invariant i10: (k == x + y + z) ==> (k >= y);\nloop invariant i11: (k == x + y + z) ==> (k >= z);\nloop invariant i12: (k == x + y + z) ==> (x >= 0);\nloop invariant i13: (k == x + y + z) ==> (y >= 0);\nloop invariant i14: (k == x + y + z) ==> (z >= 0);\nloop invariant i15: (k == x + y + z) ==> (x <= y);\nloop invariant i16: (k == x + y + z) ==> (y <= z);\nloop invariant i17: (k == x + y + z) ==> (z <= k);\nloop invariant i18: (k == x + y + z) ==> (y <= k);\n\n\n\n*/\nwhile(unknown1())\n  {\n     if(k%3 == 0)\n       x++;\n     y++;\n     z++;\n     k = x+y+z;\n  }\n\n  {;\n//@ assert(x==y && y==z);\n}\n \n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= z;\nloop invariant 0 <= k;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z == x + y;\nloop invariant k == x + y + z;\nloop invariant x <= y + z;\nloop invariant y <= x + z;\nloop invariant z <= x + y;\nloop invariant x <= y <= z;\nloop invariant y <= x <= z;\nloop invariant z <= y <= x;\nloop invariant k == 2 * x + 2 * y + 2 * z;\nloop invariant k == 3 * (x + y + z);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x is partially proven to be inductive.\nloop invariant 0 <= y is partially proven to be inductive.\nloop invariant 0 <= z is partially proven to be inductive.\nloop invariant 0 <= k is partially proven to be inductive.\nloop invariant x <= y is partially proven to be inductive.\nloop invariant y <= z is partially proven to be inductive.\nloop invariant z == x + y is established but not preserved.\nloop invariant k == x + y + z is partially proven to be inductive.\nloop invariant x <= y + z is partially proven to be inductive.\nloop invariant y <= x + z is partially proven to be inductive.\nloop invariant z <= x + y is partially proven to be inductive.\nloop invariant x <= y <= z is partially proven to be inductive.\nloop invariant y <= x <= z is partially proven to be inductive.\nloop invariant z <= y <= x is partially proven to be inductive.\nloop invariant k == 2 * x + 2 * y + 2 * z is partially proven to be inductive.\nloop invariant k == 3 * (x + y + z) is partially proven to be inductive.\nAssertion x == y == z: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nvoid main()\n{\n  int x = 0;\n  int y = 0;\n  int z = 0;\n  int k = 0;\n\n  /*@\nloop invariant i1: 0 <= x;\nloop invariant i2: 0 <= y;\nloop invariant i3: 0 <= z;\nloop invariant i4: 0 <= k;\nloop invariant i5: x <= y;\nloop invariant i6: y <= z;\n\nloop invariant i8: k == x + y + z;\nloop invariant i9: x <= y + z;\nloop invariant i10: y <= x + z;\nloop invariant i11: z <= x + y;\nloop invariant i12: x <= y <= z;\nloop invariant i13: y <= x <= z;\nloop invariant i14: z <= y <= x;\n\n\n*/\nwhile(unknown1())\n  {\n     if(k%3 == 0)\n       x++;\n     y++;\n     z++;\n     k = x+y+z;\n  }\n\n  {;\n//@ assert(x==y && y==z);\n}\n \n}",
                    "checker_output_after_prune": true
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= y <= z;\nloop invariant x + y + z == k;\nloop invariant k%3 == 0 ==> x == 0;\nloop invariant k%3 == 1 ==> x == 1;\nloop invariant k%3 == 2 ==> x == 2;\nloop invariant unknown1() ==> x + y + z == k;\nloop invariant !unknown1() ==> x + y + z == k;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 22: unexpected token ')'",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nvoid main()\n{\n  int x = 0;\n  int y = 0;\n  int z = 0;\n  int k = 0;\n\n  /*@\nloop invariant i1: 0 <= x <= y <= z;\nloop invariant i2: x + y + z == k;\n\n\nloop invariant i5: k%3 == 2 ==> x == 2;\n\n\n*/\nwhile(unknown1())\n  {\n     if(k%3 == 0)\n       x++;\n     y++;\n     z++;\n     k = x+y+z;\n  }\n\n  {;\n//@ assert(x==y && y==z);\n}\n \n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= y <= z <= INT_MAX;\nloop invariant k = x + y + z;\nloop invariant k % 3 == 0 ==> x <= y <= z;\nloop invariant k % 3 != 0 ==> x <= y <= z;\nloop invariant k % 3 == 0 ==> x == y == z;\nloop invariant k % 3 != 0 ==> x == y == z;\nloop invariant 0 <= x <= y <= z <= INT_MAX;\nloop invariant k = x + y + z;\nloop invariant k % 3 == 0 ==> x <= y <= z;\nloop invariant k % 3 != 0 ==> x <= y <= z;\nloop invariant k % 3 == 0 ==> x == y == z;\nloop invariant k % 3 != 0 ==> x == y == z;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 18: Assignment operators not allowed in annotations.",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nvoid main()\n{\n  int x = 0;\n  int y = 0;\n  int z = 0;\n  int k = 0;\n\n  /*@\nloop invariant i1: 0 <= x <= y <= z <= INT_MAX;\n\nloop invariant i3: k % 3 == 0 ==> x <= y <= z;\nloop invariant i4: k % 3 != 0 ==> x <= y <= z;\n\n\n*/\nwhile(unknown1())\n  {\n     if(k%3 == 0)\n       x++;\n     y++;\n     z++;\n     k = x+y+z;\n  }\n\n  {;\n//@ assert(x==y && y==z);\n}\n \n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 1,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= k;\nloop invariant 0 <= y <= k;\nloop invariant 0 <= z <= k;\nloop invariant x <= y && y <= z;\nloop invariant x <= k;\nloop invariant y <= k;\nloop invariant z <= k;\nloop invariant x + y + z == k;\nloop invariant x == y && y == z ==> k % 3 == 0;\nloop invariant x + y + z == k ==> k % 3 == 0;\nloop invariant x + y + z == k ==> x == y && y == z;\nloop invariant x + y + z == k ==> x == y;\nloop invariant x + y + z == k ==> y == z;\nloop invariant x + y + z == k ==> x == z;\nloop invariant x + y + z == k ==> x == y && y == z;\nloop invariant x + y + z == k ==> x == y || y == z;\nloop invariant x + y + z == k ==> x == y || z == y;\nloop invariant x + y + z == k ==> x == y || y == z || z == y;\nloop invariant x + y + z == k ==> x == y || y == z || z == y || x == z;\nloop invariant x + y + z == k ==> x == y || y == z || z == y || x == z || x == y && y == z;\nloop invariant x + y + z == k ==> x == y || y == z || z == y || x == z || x == y && y == z || x == y || y == z;\nloop invariant x + y + z == k ==> x == y || y == z || z == y || x == z || x == y && y == z || x == y || y == z || x == z;\nloop invariant x + y + z == k ==> x == y || y == z || z == y || x == z || x == y && y == z || x == y || y == z || x == z || x == y && y == z;\nloop invariant x + y + z == k ==> x == y || y == z || z == y || x == z || x == y && y == z || x == y || y == z || x == z || x == y && y == z || x == y || y == z;\nloop invariant x + y + z == k ==> x == y || y == z || z == y || x == z || x == y && y == z || x == y || y == z || x == z || x == y && y == z || x == y || y == z || x == z;\nloop invariant x + y + z == k ==> x == y || y == z || z == y || x == z || x == y && y == z || x == y || y == z || x == z || x == y && y == z || x == y || y == z || x == z || x == y && y == z;\nloop invariant x + y + z == k ==> x == y || y == z || z == y || x == z || x == y && y == z || x == y || y == z || x == z || x == y && y == z || x == y || y == z || x == z || x == y && y == z || x == y || y == z;\nloop invariant x + y + z == k ==> x == y || y == z || z == y || x == z || x == y && y == z || x == y || y == z || x == z || x == y && y == z || x == y || y == z || x == z || x == y && y == z || x == y || y == z || x == z;\nloop invariant x + y + z == k ==> x == y || y == z || z == y || x == z || x == y && y == z || x == y || y == z || x == z || x == y && y == z || x == y || y == z || x == z || x == y && y == z || x == y || y == z || x == z || x == y && y == z;\n*/\n```",
                    "checker_output_for_annotations": true,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= k is inductive.\nloop invariant 0 <= y <= k is inductive.\nloop invariant 0 <= z <= k is inductive.\nloop invariant x <= y && y <= z is inductive.\nloop invariant x <= k is inductive.\nloop invariant y <= k is inductive.\nloop invariant z <= k is inductive.\nloop invariant x + y + z == k is inductive.\nloop invariant x == y && y == z ==> k % 3 == 0 is inductive.\nloop invariant x + y + z == k ==> k % 3 == 0 is inductive.\nloop invariant x + y + z == k ==> x == y && y == z is inductive.\nloop invariant x + y + z == k ==> x == y is inductive.\nloop invariant x + y + z == k ==> y == z is inductive.\nloop invariant x + y + z == k ==> x == z is inductive.\nloop invariant x + y + z == k ==> x == y || y == z is inductive.\nloop invariant x + y + z == k ==> x == y || z == y is inductive.\nloop invariant x + y + z == k ==> x == y || y == z || z == y is inductive.\nloop invariant x + y + z == k ==> x == y || y == z || z == y || x == z is inductive.\nloop invariant x + y + z == k ==> x == y || y == z || z == y || x == z || x == y && y == z is inductive.\nloop invariant x + y + z == k ==> x == y || y == z || z == y || x == z || x == y && y == z || x == y || y == z is inductive.\nloop invariant x + y + z == k ==> x == y || y == z || z == y || x == z || x == y && y == z || x == y || y == z || x == z is inductive.\nloop invariant x + y + z == k ==> x == y || y == z || z == y || x == z || x == y && y == z || x == y || y == z || x == z || x == y && y == z is inductive.\nloop invariant x + y + z == k ==> x == y || y == z || z == y || x == z || x == y && y == z || x == y || y == z || x == z || x == y && y == z || x == y || y == z is inductive.\nloop invariant x + y + z == k ==> x == y || y == z || z == y || x == z || x == y && y == z || x == y || y == z || x == z || x == y && y == z || x == y || y == z || x == z is inductive.\nloop invariant x + y + z == k ==> x == y || y == z || z == y || x == z || x == y && y == z || x == y || y == z || x == z || x == y && y == z || x == y || y == z || x == z || x == y && y == z is inductive.\nloop invariant x + y + z == k ==> x == y || y == z || z == y || x == z || x == y && y == z || x == y || y == z || x == z || x == y && y == z || x == y || y == z || x == z || x == y && y == z || x == y || y == z is inductive.\nloop invariant x + y + z == k ==> x == y || y == z || z == y || x == z || x == y && y == z || x == y || y == z || x == z || x == y && y == z || x == y || y == z || x == z || x == y && y == z || x == y || y == z || x == z is inductive.\nloop invariant x + y + z == k ==> x == y || y == z || z == y || x == z || x == y && y == z || x == y || y == z || x == z || x == y && y == z || x == y || y == z || x == z || x == y && y == z || x == y || y == z || x == z || x == y && y == z is inductive.\nAssertion x == y == z: Valid"
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant x <= y <= z;\nloop invariant k == x+y+z;\nloop invariant k%3 >= 0 && k%3 <= 2;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant x + y + z == k;\nloop invariant x == y ==> x%3 == y%3;\nloop invariant x == z ==> x%3 == z%3;\nloop invariant y == z ==> y%3 == z%3;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant x <= y <= z is inductive.\nloop invariant k == x+y+z is inductive.\nloop invariant k%3 >= 0 && k%3 <= 2 is inductive.\nloop invariant x >= 0 is inductive.\nloop invariant y >= 0 is inductive.\nloop invariant z >= 0 is inductive.\nloop invariant x + y + z == k is inductive.\nloop invariant x == y ==> x%3 == y%3 is inductive.\nloop invariant x == z ==> x%3 == z%3 is inductive.\nloop invariant y == z ==> y%3 == z%3 is inductive.\nAssertion x == y == z: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nvoid main()\n{\n  int x = 0;\n  int y = 0;\n  int z = 0;\n  int k = 0;\n\n  /*@\nloop invariant i1: x <= y <= z;\nloop invariant i2: k == x+y+z;\nloop invariant i3: k%3 >= 0 && k%3 <= 2;\nloop invariant i4: x >= 0;\nloop invariant i5: y >= 0;\nloop invariant i6: z >= 0;\nloop invariant i7: x + y + z == k;\nloop invariant i8: x == y ==> x%3 == y%3;\nloop invariant i9: x == z ==> x%3 == z%3;\nloop invariant i10: y == z ==> y%3 == z%3;\n*/\nwhile(unknown1())\n  {\n     if(k%3 == 0)\n       x++;\n     y++;\n     z++;\n     k = x+y+z;\n  }\n\n  {;\n//@ assert(x==y && y==z);\n}\n \n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= y <= z <= k;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= y <= z <= k is inductive.\nAssertion x == y == z: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nvoid main()\n{\n  int x = 0;\n  int y = 0;\n  int z = 0;\n  int k = 0;\n\n  /*@\nloop invariant i1: 0 <= x <= y <= z <= k;\n*/\nwhile(unknown1())\n  {\n     if(k%3 == 0)\n       x++;\n     y++;\n     z++;\n     k = x+y+z;\n  }\n\n  {;\n//@ assert(x==y && y==z);\n}\n \n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant 0 <= y <= z;\nloop invariant 0 <= z;\nloop invariant x + y + z = k;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant k >= 0;\nloop invariant x + y + z >= k;\nloop invariant x + y + z <= k;\nloop invariant x + y + z == k;\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= k;\nloop invariant x + y + z == k;\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= k;\nloop invariant x + y + z == k;\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= k;\nloop invariant x + y + z == k;\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= k;\nloop invariant x + y + z == k;\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= k;\nloop invariant x + y + z == k;\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= k;\nloop invariant x + y + z == k;\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= k;\nloop invariant x + y + z == k;\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= k;\nloop invariant x + y + z == k;\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= k;\nloop invariant x + y + z == k;\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= k;\nloop invariant x + y + z == k;\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= k;\nloop invariant x + y + z == k;\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= k;\nloop invariant x + y + z == k;\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= k;\nloop invariant x + y + z == k;\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= k;\nloop invariant x + y + z == k;\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= k;\nloop invariant x + y + z == k;\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= k;\nloop invariant x + y + z == k;\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= k;\nloop invariant x + y + z == k;\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= k;\nloop invariant x + y + z == k;\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= k;\nloop invariant x + y + z == k;\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= k;\nloop invariant x + y + z == k;\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= k;\nloop invariant x + y + z == k;\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= k;\nloop invariant x + y + z == k;\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= k;\nloop invariant x + y + z == k;\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= k;\nloop invariant x + y + z == k;\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= k;\nloop invariant x + y + z == k;\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= k;\nloop invariant x + y + z == k;\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= k;\nloop invariant x + y + z == k;\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= k;\nloop invariant x + y + z == k;\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= k;\nloop invariant x + y + z == k;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 20: Assignment operators not allowed in annotations.",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nvoid main()\n{\n  int x = 0;\n  int y = 0;\n  int z = 0;\n  int k = 0;\n\n  /*@\nloop invariant i1: 0 <= x <= y;\nloop invariant i2: 0 <= y <= z;\nloop invariant i3: 0 <= z;\n\nloop invariant i5: x >= 0;\nloop invariant i6: y >= 0;\nloop invariant i7: z >= 0;\nloop invariant i8: k >= 0;\nloop invariant i9: x + y + z >= k;\nloop invariant i10: x + y + z <= k;\nloop invariant i11: x + y + z == k;\nloop invariant i12: x + y + z >= 0;\n*/\nwhile(unknown1())\n  {\n     if(k%3 == 0)\n       x++;\n     y++;\n     z++;\n     k = x+y+z;\n  }\n\n  {;\n//@ assert(x==y && y==z);\n}\n \n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= y <= x+y+z;\nloop invariant 0 <= x <= y+z;\nloop invariant 0 <= z <= x+y;\nloop invariant y+z <= x;\nloop invariant x+y <= z;\nloop invariant x+y+z <= k;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= y <= x+y+z is partially proven to be inductive.\nloop invariant 0 <= x <= y+z is partially proven to be inductive.\nloop invariant 0 <= z <= x+y is partially proven to be inductive.\nloop invariant y+z <= x is established but not preserved.\nloop invariant x+y <= z is partially proven to be inductive.\nloop invariant x+y+z <= k is partially proven to be inductive.\nAssertion x == y == z: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nvoid main()\n{\n  int x = 0;\n  int y = 0;\n  int z = 0;\n  int k = 0;\n\n  /*@\nloop invariant i1: 0 <= y <= x+y+z;\nloop invariant i2: 0 <= x <= y+z;\nloop invariant i3: 0 <= z <= x+y;\n\n\nloop invariant i6: x+y+z <= k;\n*/\nwhile(unknown1())\n  {\n     if(k%3 == 0)\n       x++;\n     y++;\n     z++;\n     k = x+y+z;\n  }\n\n  {;\n//@ assert(x==y && y==z);\n}\n \n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 13,
                    "annotations": "```\n/*@\nloop invariant 1 -> 1 <= k <= x+y+z;\nloop invariant 2 -> k%(3*x+y+z) == 0;\nloop invariant 3 -> x >= 0;\nloop invariant 4 -> y >= 0;\nloop invariant 5 -> z >= 0;\nloop invariant 6 -> k >= 1;\nloop invariant 7 -> x <= y;\nloop invariant 8 -> y <= z;\nloop invariant 9 -> x <= z;\nloop invariant 10 -> x <= k;\nloop invariant 11 -> y <= k;\nloop invariant 12 -> z <= k;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 17: unexpected token '1'",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nvoid main()\n{\n  int x = 0;\n  int y = 0;\n  int z = 0;\n  int k = 0;\n\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile(unknown1())\n  {\n     if(k%3 == 0)\n       x++;\n     y++;\n     z++;\n     k = x+y+z;\n  }\n\n  {;\n//@ assert(x==y && y==z);\n}\n \n}",
                    "checker_output_after_prune": false
                }
            ],
            "checker_output_for_combined_annotations": false,
            "checker_message_for_combined_annotations": "Annotation error on line 34: unexpected token ')'",
            "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nvoid main()\n{\n  int x = 0;\n  int y = 0;\n  int z = 0;\n  int k = 0;\n\n  /*@\nloop invariant i1: 0 <= x <= 1;\nloop invariant i2: x <= y <= x + 1;\nloop invariant i3: z >= x;\nloop invariant i4: x + y + z <= 3 * x + 1;\nloop invariant i5: x + y + z <= 3 * y;\nloop invariant i6: x + y + z <= 3 * z;\nloop invariant i7: x + y + z >= x;\nloop invariant i8: x + y + z >= y;\nloop invariant i9: x + y + z >= z;\nloop invariant i10: x + y + z <= 3 * (x + y + z);\nloop invariant i11: x + y + z >= 0;\nloop invariant i12: x + y + z >= x + y + z;\nloop invariant i13: y >= 0;\nloop invariant i14: x >= 0;\nloop invariant i15: z >= 0;\nloop invariant i16: k >= 0;\nloop invariant i17: k <= x+y+z;\nloop invariant i18: k >= x+y+z || unknown1() == 0;\nloop invariant i19: 0 <= x;\nloop invariant i20: 0 <= y;\nloop invariant i21: 0 <= z;\nloop invariant i22: 0 <= k;\nloop invariant i23: x <= x + 1;\nloop invariant i24: y <= y + 1;\nloop invariant i25: z <= z + 1;\nloop invariant i26: k <= x + y + z;\nloop invariant i27: k >= x;\nloop invariant i28: k >= y;\nloop invariant i29: k >= z;\nloop invariant i30: x <= y;\nloop invariant i31: y <= z;\nloop invariant i32: x <= z;\nloop invariant i33: x <= y + 1;\nloop invariant i34: y <= z + 1;\nloop invariant i35: x <= z + 1;\nloop invariant i36: z <= k;\nloop invariant i37: k == x + y + z;\nloop invariant i38: y >= k % 3;\nloop invariant i39: k % 3 < 3;\nloop invariant i40: k % 3 == 0 ==> x == k / 3;\nloop invariant i41: k % 3 == 1 ==> y == (k - 1) / 3;\nloop invariant i42: k % 3 == 2 ==> z == (k - 2) / 3;\nloop invariant i43: k % 3 == 0 ==> x == (k - 2) / 3;\nloop invariant i44: 0 <= x <= k;\nloop invariant i45: 0 <= y <= k;\nloop invariant i46: 0 <= z <= k;\nloop invariant i47: x + y + z == k;\nloop invariant i48: k % 3 == 0 ==> x == y && y == z;\nloop invariant i49: k % 3 != 0 ==> x + y + z == k;\nloop invariant i50: y <= k;\nloop invariant i51: (k == x + y + z) ==> (k >= x);\nloop invariant i52: (k == x + y + z) ==> (k >= y);\nloop invariant i53: (k == x + y + z) ==> (k >= z);\nloop invariant i54: (k == x + y + z) ==> (x >= 0);\nloop invariant i55: (k == x + y + z) ==> (y >= 0);\nloop invariant i56: (k == x + y + z) ==> (z >= 0);\nloop invariant i57: (k == x + y + z) ==> (x <= y);\nloop invariant i58: (k == x + y + z) ==> (y <= z);\nloop invariant i59: (k == x + y + z) ==> (z <= k);\nloop invariant i60: (k == x + y + z) ==> (y <= k);\nloop invariant i61: (k == x + y + z) ==> (x == y);\nloop invariant i62: (k == x + y + z) ==> (y == z);\nloop invariant i63: (k == x + y + z) ==> (z == k);\nloop invariant i64: z == x + y;\nloop invariant i65: x <= y + z;\nloop invariant i66: y <= x + z;\nloop invariant i67: z <= x + y;\nloop invariant i68: x <= y <= z;\nloop invariant i69: y <= x <= z;\nloop invariant i70: z <= y <= x;\nloop invariant i71: k == 2 * x + 2 * y + 2 * z;\nloop invariant i72: k == 3 * (x + y + z);\nloop invariant i73: 0 <= x <= y <= z;\nloop invariant i74: k%3 == 0 ==> x == 0;\nloop invariant i75: k%3 == 1 ==> x == 1;\nloop invariant i76: k%3 == 2 ==> x == 2;\nloop invariant i77: unknown1() ==> x + y + z == k;\nloop invariant i78: !unknown1() ==> x + y + z == k;\nloop invariant i79: 0 <= x <= y <= z <= INT_MAX;\nloop invariant i80: k = x + y + z;\nloop invariant i81: k % 3 == 0 ==> x <= y <= z;\nloop invariant i82: k % 3 != 0 ==> x <= y <= z;\nloop invariant i83: k % 3 == 0 ==> x == y == z;\nloop invariant i84: k % 3 != 0 ==> x == y == z;\nloop invariant i85: x <= y && y <= z;\nloop invariant i86: x <= k;\nloop invariant i87: x == y && y == z ==> k % 3 == 0;\nloop invariant i88: x + y + z == k ==> k % 3 == 0;\nloop invariant i89: x + y + z == k ==> x == y && y == z;\nloop invariant i90: x + y + z == k ==> x == y;\nloop invariant i91: x + y + z == k ==> y == z;\nloop invariant i92: x + y + z == k ==> x == z;\nloop invariant i93: x + y + z == k ==> x == y || y == z;\nloop invariant i94: x + y + z == k ==> x == y || z == y;\nloop invariant i95: x + y + z == k ==> x == y || y == z || z == y;\nloop invariant i96: x + y + z == k ==> x == y || y == z || z == y || x == z;\nloop invariant i97: x + y + z == k ==> x == y || y == z || z == y || x == z || x == y && y == z;\nloop invariant i98: x + y + z == k ==> x == y || y == z || z == y || x == z || x == y && y == z || x == y || y == z;\nloop invariant i99: x + y + z == k ==> x == y || y == z || z == y || x == z || x == y && y == z || x == y || y == z || x == z;\nloop invariant i100: x + y + z == k ==> x == y || y == z || z == y || x == z || x == y && y == z || x == y || y == z || x == z || x == y && y == z;\nloop invariant i101: x + y + z == k ==> x == y || y == z || z == y || x == z || x == y && y == z || x == y || y == z || x == z || x == y && y == z || x == y || y == z;\nloop invariant i102: x + y + z == k ==> x == y || y == z || z == y || x == z || x == y && y == z || x == y || y == z || x == z || x == y && y == z || x == y || y == z || x == z;\nloop invariant i103: x + y + z == k ==> x == y || y == z || z == y || x == z || x == y && y == z || x == y || y == z || x == z || x == y && y == z || x == y || y == z || x == z || x == y && y == z;\nloop invariant i104: x + y + z == k ==> x == y || y == z || z == y || x == z || x == y && y == z || x == y || y == z || x == z || x == y && y == z || x == y || y == z || x == z || x == y && y == z || x == y || y == z;\nloop invariant i105: x + y + z == k ==> x == y || y == z || z == y || x == z || x == y && y == z || x == y || y == z || x == z || x == y && y == z || x == y || y == z || x == z || x == y && y == z || x == y || y == z || x == z;\nloop invariant i106: x + y + z == k ==> x == y || y == z || z == y || x == z || x == y && y == z || x == y || y == z || x == z || x == y && y == z || x == y || y == z || x == z || x == y && y == z || x == y || y == z || x == z || x == y && y == z;\nloop invariant i107: k == x+y+z;\nloop invariant i108: k%3 >= 0 && k%3 <= 2;\nloop invariant i109: x == y ==> x%3 == y%3;\nloop invariant i110: x == z ==> x%3 == z%3;\nloop invariant i111: y == z ==> y%3 == z%3;\nloop invariant i112: 0 <= x <= y <= z <= k;\nloop invariant i113: 0 <= x <= y;\nloop invariant i114: 0 <= y <= z;\nloop invariant i115: x + y + z = k;\nloop invariant i116: x + y + z >= k;\nloop invariant i117: x + y + z <= k;\nloop invariant i118: 0 <= y <= x+y+z;\nloop invariant i119: 0 <= x <= y+z;\nloop invariant i120: 0 <= z <= x+y;\nloop invariant i121: y+z <= x;\nloop invariant i122: x+y <= z;\nloop invariant i123: x+y+z <= k;\nloop invariant i124: 1 -> 1 <= k <= x+y+z;\nloop invariant i125: 2 -> k%(3*x+y+z) == 0;\nloop invariant i126: 3 -> x >= 0;\nloop invariant i127: 4 -> y >= 0;\nloop invariant i128: 5 -> z >= 0;\nloop invariant i129: 6 -> k >= 1;\nloop invariant i130: 7 -> x <= y;\nloop invariant i131: 8 -> y <= z;\nloop invariant i132: 9 -> x <= z;\nloop invariant i133: 10 -> x <= k;\nloop invariant i134: 11 -> y <= k;\nloop invariant i135: 12 -> z <= k;\n*/\nwhile(unknown1())\n  {\n     if(k%3 == 0)\n       x++;\n     y++;\n     z++;\n     k = x+y+z;\n  }\n\n  {;\n//@ assert(x==y && y==z);\n}\n \n}",
            "combined_annotation_num_solver_calls": 27,
            "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nvoid main()\n{\n  int x = 0;\n  int y = 0;\n  int z = 0;\n  int k = 0;\n\n  /*@\n\nloop invariant i2: x <= y <= x + 1;\nloop invariant i3: z >= x;\nloop invariant i4: x + y + z <= 3 * x + 1;\nloop invariant i5: x + y + z <= 3 * y;\nloop invariant i6: x + y + z <= 3 * z;\nloop invariant i7: x + y + z >= x;\nloop invariant i8: x + y + z >= y;\nloop invariant i9: x + y + z >= z;\nloop invariant i10: x + y + z <= 3 * (x + y + z);\nloop invariant i11: x + y + z >= 0;\nloop invariant i12: x + y + z >= x + y + z;\nloop invariant i13: y >= 0;\nloop invariant i14: x >= 0;\nloop invariant i15: z >= 0;\nloop invariant i16: k >= 0;\nloop invariant i17: k <= x+y+z;\n\nloop invariant i19: 0 <= x;\nloop invariant i20: 0 <= y;\nloop invariant i21: 0 <= z;\nloop invariant i22: 0 <= k;\nloop invariant i23: x <= x + 1;\nloop invariant i24: y <= y + 1;\nloop invariant i25: z <= z + 1;\nloop invariant i26: k <= x + y + z;\nloop invariant i27: k >= x;\nloop invariant i28: k >= y;\nloop invariant i29: k >= z;\nloop invariant i30: x <= y;\nloop invariant i31: y <= z;\nloop invariant i32: x <= z;\nloop invariant i33: x <= y + 1;\nloop invariant i34: y <= z + 1;\nloop invariant i35: x <= z + 1;\nloop invariant i36: z <= k;\nloop invariant i37: k == x + y + z;\nloop invariant i38: y >= k % 3;\nloop invariant i39: k % 3 < 3;\nloop invariant i40: k % 3 == 0 ==> x == k / 3;\nloop invariant i41: k % 3 == 1 ==> y == (k - 1) / 3;\nloop invariant i42: k % 3 == 2 ==> z == (k - 2) / 3;\n\nloop invariant i44: 0 <= x <= k;\nloop invariant i45: 0 <= y <= k;\nloop invariant i46: 0 <= z <= k;\nloop invariant i47: x + y + z == k;\nloop invariant i48: k % 3 == 0 ==> x == y && y == z;\nloop invariant i49: k % 3 != 0 ==> x + y + z == k;\nloop invariant i50: y <= k;\nloop invariant i51: (k == x + y + z) ==> (k >= x);\nloop invariant i52: (k == x + y + z) ==> (k >= y);\nloop invariant i53: (k == x + y + z) ==> (k >= z);\nloop invariant i54: (k == x + y + z) ==> (x >= 0);\nloop invariant i55: (k == x + y + z) ==> (y >= 0);\nloop invariant i56: (k == x + y + z) ==> (z >= 0);\nloop invariant i57: (k == x + y + z) ==> (x <= y);\nloop invariant i58: (k == x + y + z) ==> (y <= z);\nloop invariant i59: (k == x + y + z) ==> (z <= k);\nloop invariant i60: (k == x + y + z) ==> (y <= k);\nloop invariant i61: (k == x + y + z) ==> (x == y);\nloop invariant i62: (k == x + y + z) ==> (y == z);\n\n\nloop invariant i65: x <= y + z;\nloop invariant i66: y <= x + z;\nloop invariant i67: z <= x + y;\nloop invariant i68: x <= y <= z;\nloop invariant i69: y <= x <= z;\nloop invariant i70: z <= y <= x;\n\n\nloop invariant i73: 0 <= x <= y <= z;\n\nloop invariant i75: k%3 == 1 ==> x == 1;\nloop invariant i76: k%3 == 2 ==> x == 2;\n\n\nloop invariant i79: 0 <= x <= y <= z <= INT_MAX;\n\nloop invariant i81: k % 3 == 0 ==> x <= y <= z;\nloop invariant i82: k % 3 != 0 ==> x <= y <= z;\nloop invariant i83: k % 3 == 0 ==> x == y == z;\nloop invariant i84: k % 3 != 0 ==> x == y == z;\nloop invariant i85: x <= y && y <= z;\nloop invariant i86: x <= k;\nloop invariant i87: x == y && y == z ==> k % 3 == 0;\nloop invariant i88: x + y + z == k ==> k % 3 == 0;\nloop invariant i89: x + y + z == k ==> x == y && y == z;\nloop invariant i90: x + y + z == k ==> x == y;\nloop invariant i91: x + y + z == k ==> y == z;\nloop invariant i92: x + y + z == k ==> x == z;\nloop invariant i93: x + y + z == k ==> x == y || y == z;\nloop invariant i94: x + y + z == k ==> x == y || z == y;\nloop invariant i95: x + y + z == k ==> x == y || y == z || z == y;\nloop invariant i96: x + y + z == k ==> x == y || y == z || z == y || x == z;\nloop invariant i97: x + y + z == k ==> x == y || y == z || z == y || x == z || x == y && y == z;\nloop invariant i98: x + y + z == k ==> x == y || y == z || z == y || x == z || x == y && y == z || x == y || y == z;\nloop invariant i99: x + y + z == k ==> x == y || y == z || z == y || x == z || x == y && y == z || x == y || y == z || x == z;\nloop invariant i100: x + y + z == k ==> x == y || y == z || z == y || x == z || x == y && y == z || x == y || y == z || x == z || x == y && y == z;\nloop invariant i101: x + y + z == k ==> x == y || y == z || z == y || x == z || x == y && y == z || x == y || y == z || x == z || x == y && y == z || x == y || y == z;\nloop invariant i102: x + y + z == k ==> x == y || y == z || z == y || x == z || x == y && y == z || x == y || y == z || x == z || x == y && y == z || x == y || y == z || x == z;\nloop invariant i103: x + y + z == k ==> x == y || y == z || z == y || x == z || x == y && y == z || x == y || y == z || x == z || x == y && y == z || x == y || y == z || x == z || x == y && y == z;\nloop invariant i104: x + y + z == k ==> x == y || y == z || z == y || x == z || x == y && y == z || x == y || y == z || x == z || x == y && y == z || x == y || y == z || x == z || x == y && y == z || x == y || y == z;\nloop invariant i105: x + y + z == k ==> x == y || y == z || z == y || x == z || x == y && y == z || x == y || y == z || x == z || x == y && y == z || x == y || y == z || x == z || x == y && y == z || x == y || y == z || x == z;\nloop invariant i106: x + y + z == k ==> x == y || y == z || z == y || x == z || x == y && y == z || x == y || y == z || x == z || x == y && y == z || x == y || y == z || x == z || x == y && y == z || x == y || y == z || x == z || x == y && y == z;\nloop invariant i107: k == x+y+z;\nloop invariant i108: k%3 >= 0 && k%3 <= 2;\nloop invariant i109: x == y ==> x%3 == y%3;\nloop invariant i110: x == z ==> x%3 == z%3;\nloop invariant i111: y == z ==> y%3 == z%3;\nloop invariant i112: 0 <= x <= y <= z <= k;\nloop invariant i113: 0 <= x <= y;\nloop invariant i114: 0 <= y <= z;\n\nloop invariant i116: x + y + z >= k;\nloop invariant i117: x + y + z <= k;\nloop invariant i118: 0 <= y <= x+y+z;\nloop invariant i119: 0 <= x <= y+z;\nloop invariant i120: 0 <= z <= x+y;\n\n\nloop invariant i123: x+y+z <= k;\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile(unknown1())\n  {\n     if(k%3 == 0)\n       x++;\n     y++;\n     z++;\n     k = x+y+z;\n  }\n\n  {;\n//@ assert(x==y && y==z);\n}\n \n}",
            "checker_output_after_prune": true
        },
        {
            "file": "../dataset/loop_invariants/sv-benchmarks/loop-new/half.c",
            "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int n = 0;\n    int k = unknown_int();\n    if (!(k <= LARGE_INT && k >= -LARGE_INT)) return 0;\n    for(i = 0; i < 2*k; i++) {\n        if (i % 2 == 0) {\n            n ++;\n        }\n    }\n    {;\n//@ assert(k < 0 || n == k);\n}\n\n    return 0;\n}",
            "success": false,
            "annotation_blocks": [
                "```\n/*@\nloop invariant 0 <= i <= 2*k;\nloop invariant i % 2 == (i < 2*k);\nloop invariant i % 2 == (i % 2 == 0) ==> i % 2 == 0;\nloop invariant i % 2 == 0 ==> i % 2 == 0;\nloop invariant i % 2 == 0 ==> i % 2 == 1;\nloop invariant i % 2 == 0 ==> i % 2 == 0;\nloop invariant i % 2 == 0 ==> i % 2 == 1;\nloop invariant i % 2 == 0 ==> i % 2 == 0;\nloop invariant i % 2 == 0 ==> i % 2 == 1;\nloop invariant i % 2 == 0 ==> i % 2 == 0;\nloop invariant i % 2 == 0 ==> i % 2 == 1;\nloop invariant i % 2 == 0 ==> i % 2 == 0;\nloop invariant i % 2 == 0 ==> i % 2 == 1;\nloop invariant i % 2 == 0 ==> i % 2 == 0;\nloop invariant i % 2 == 0 ==> i % 2 == 1;\nloop invariant i % 2 == 0 ==> i % 2 == 0;\nloop invariant i % 2 == 0 ==> i % 2 == 1;\nloop invariant i % 2 == 0 ==> i % 2 == 0;\nloop invariant i % 2 == 0 ==> i % 2 == 1;\nloop invariant i % 2 == 0 ==> i % 2 == 0;\nloop invariant i % 2 == 0 ==> i % 2 == 1;\nloop invariant i % 2 == 0 ==> i % 2 == 0;\nloop invariant i % 2 == 0 ==> i % 2 == 1;\nloop invariant i % 2 == 0 ==> i % 2 == 0;\nloop invariant i % 2 == 0 ==> i % 2 == 1;\nloop invariant i % 2 == 0 ==> i % 2 == 0;\nloop invariant i % 2 == 0 ==> i % 2 == 1;\nloop invariant i % 2 == 0 ==> i % 2 == 0;\nloop invariant i % 2 == 0 ==> i % 2 == 1;\nloop invariant i % 2 == 0 ==> i % 2 == 0;\nloop invariant i % 2 == 0 ==> i % 2 == 1;\nloop invariant i % 2 == 0 ==> i % 2 == 0;\nloop invariant i % 2 == 0 ==> i % 2 == 1;\nloop invariant i % 2 == 0 ==> i % 2 == 0;\nloop invariant i % 2 == 0 ==> i % 2 == 1;\nloop invariant i % 2 == 0 ==> i % 2 == 0;\nloop invariant i % 2 == 0 ==> i % 2 == 1;\nloop invariant i % 2 == 0 ==> i % 2 == 0;\nloop invariant i % 2 == 0 ==> i % 2 == 1;\nloop invariant i % 2 == 0 ==> i % 2 == 0;\nloop invariant i % 2 == 0 ==> i % 2 == 1;\nloop invariant i % 2 == 0 ==> i % 2 == 0;\nloop invariant i % 2 == 0 ==> i % 2 == 1;\nloop invariant i % 2 == 0 ==> i % 2 == 0;\nloop invariant i % 2 == 0 ==> i % 2 == 1;\nloop invariant i % 2 == 0 ==> i % 2 == 0;\nloop invariant i % 2 == 0 ==> i % 2 == 1;\nloop invariant i % 2 == 0 ==> i % 2 == 0;\nloop invariant i % 2 == 0 ==> i % 2 == 1;\nloop invariant i % 2 == 0 ==> i % 2 == 0;\nloop invariant i % 2 == 0 ==> i % 2 == 1;\nloop invariant i % 2 == 0 ==> i % 2 == 0;\nloop invariant i % 2 == 0 ==> i % 2 == 1;\nloop invariant i % 2 == 0 ==> i % 2 == 0;\nloop invariant i % 2 == 0 ==> i % 2 == 1;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= 2 * k;\nloop invariant -k <= n - i / 2 <= k;\n*/\n```",
                "```\n/*@\nloop invariant n <= k;\nloop invariant k >= 0 ==> n == k;\nloop invariant k < 0 ==> n == k;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= 2*k;\nloop invariant 0 <= n <= k;\nloop invariant n == k ==> (i % 2 == 0);\nloop invariant n < k ==> (i % 2 != 0);\n*/\n```",
                "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant i3;\nloop invariant i4;\nloop invariant i1: i >= 0;\nloop invariant i2: i <= 2*k;\nloop invariant i3: n >= 0;\nloop invariant i4: n <= k;\nloop invariant i5: n == k ==> i == 2*k;\nloop invariant i6: n == k ==> i % 2 == 0;\nloop invariant i7: n == k ==> i == 2*k;\nloop invariant i8: n == k ==> i >= 0;\nloop invariant i9: n == k ==> i <= 2*k;\nloop invariant i10: n == k ==> n >= 0;\nloop invariant i11: n == k ==> n <= k;\nloop invariant i12: n == k ==> i >= 0 ==> i <= 2*k;\nloop invariant i13: n == k ==> i >= 0 ==> n >= 0;\nloop invariant i14: n == k ==> i >= 0 ==> n <= k;\nloop invariant i15: n == k ==> i <= 2*k ==> i >= 0;\nloop invariant i16: n == k ==> i <= 2*k ==> n >= 0;\nloop invariant i17: n == k ==> i <= 2*k ==> n <= k;\nloop invariant i18: n == k ==> n >= 0 ==> i >= 0;\nloop invariant i19: n == k ==> n >= 0 ==> i <= 2*k;\nloop invariant i20: n == k ==> n <= k ==> i >= 0;\nloop invariant i21: n == k ==> n <= k ==> i <= 2*k;\nloop invariant i22: n == k ==> i >= 0 ==> i <= 2*k ==> n >= 0;\nloop invariant i23: n == k ==> i >= 0 ==> i <= 2*k ==> n <= k;\nloop invariant i24: n == k ==> i >= 0 ==> n >= 0 ==> i <= 2*k;\nloop invariant i25: n == k ==> i >= 0 ==> n <= k ==> i <= 2*k;\nloop invariant i26: n == k ==> i <= 2*k ==> i >= 0 ==> n >= 0;\nloop invariant i27: n == k ==> i <= 2*k ==> i >= 0 ==> n <= k;\nloop invariant i28: n == k ==> i <= 2*k ==> n >= 0 ==> i >= 0;\nloop invariant i29: n == k ==> i <= 2*k ==> n <= k ==> i >= 0;\nloop invariant i30: n == k ==> n >= 0 ==> i >= 0 ==> i <= 2*k;\nloop invariant i31: n == k ==> n >= 0 ==> i >= 0 ==> n <= k;\nloop invariant i32: n == k ==> n >= 0 ==> i <= 2*k ==> n >= 0;\nloop invariant i33: n == k ==> n >= 0 ==> i <= 2*k ==> n <= k;\nloop invariant i34: n == k ==> n <= k ==> i >= 0 ==> i <= 2*k;\nloop invariant i35: n == k ==> n <= k ==> i >= 0 ==> n >= 0;\nloop invariant i36: n == k ==> n <= k ==> i <= 2*k ==> n >= 0;\nloop invariant i37: n == k ==> n <= k ==> i <= 2*k ==> n <= k;\nloop invariant i38: n == k ==> i >= 0 ==> i <= 2*k ==> n >= 0 ==> n <= k;\nloop invariant i39: n == k ==> i >= 0 ==> i <= 2*k ==> n <= k ==> n >= 0;\nloop invariant i40: n == k ==> i >= 0 ==> n >= 0 ==> i <= 2*k ==> n <= k;\nloop invariant i41: n == k ==> i >= 0 ==> n <= k ==> i <= 2*k ==> n >= 0;\nloop invariant i42: n == k ==> i <= 2*k ==> i >= 0 ==> n >= 0 ==> n <= k;\nloop invariant i43: n == k ==> i <= 2*k ==> i >= 0 ==> n <= k ==> n >= 0;\nloop invariant i44: n == k ==> i <= 2*k ==> n >= 0 ==> i >= 0 ==> n <= k;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= 2*k;\nloop invariant n >= 0;\nloop invariant (i % 2 == 0 ==> n <= k);\nloop invariant (i % 2 != 0 ==> n == k);\n*/\n```",
                "```\n/*@\nloop invariant ( i <= 2*k ) && ( i >= 0 );\nloop invariant ( n <= k ) && ( n >= 0 );\nloop invariant ( i % 2 == 0 ) ==> ( n == i / 2 );\nloop invariant ( i % 2 != 0 ) ==> ( n == ( i - 1 ) / 2 );\nloop invariant ( k <= LARGE_INT ) && ( k >= -LARGE_INT );\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= 2*k;\nloop invariant 0 <= n <= 2*k;\n*/\n```",
                "```\n/*@\nloop invariant i == 0;\nloop invariant n == 0;\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant k >= -LARGE_INT;\nloop invariant i % 2 == 0 ==> n == k;\nloop invariant i % 2 == 1 ==> n == k - 1;\nloop invariant i == 2*k ==> n == k;\nloop invariant n >= k - 1;\nloop invariant k < 0 ==> n == k;\n*/\n```",
                "```\n/*@\nloop invariant i >= 0;\nloop invariant i <= 2 * k;\nloop invariant 0 <= n <= k;\nloop invariant (i % 2 == 0 ==> n == i / 2);\nloop invariant (i % 2 != 0 ==> n == i / 2 + 1);\nloop invariant (i % 2 == 0 ==> n == i / 2);\nloop invariant (i % 2 != 0 ==> n == i / 2 + 1);\nloop invariant (i % 2 == 0 ==> n == i / 2);\nloop invariant (i % 2 != 0 ==> n == i / 2 + 1);\nloop invariant (i % 2 == 0 ==> n == i / 2);\nloop invariant (i % 2 != 0 ==> n == i / 2 + 1);\nloop invariant (i % 2 == 0 ==> n == i / 2);\nloop invariant (i % 2 != 0 ==> n == i / 2 + 1);\nloop invariant (i % 2 == 0 ==> n == i / 2);\nloop invariant (i % 2 != 0 ==> n == i / 2 + 1);\nloop invariant (i % 2 == 0 ==> n == i / 2);\nloop invariant (i % 2 != 0 ==> n == i / 2 + 1);\nloop invariant (i % 2 == 0 ==> n == i / 2);\nloop invariant (i % 2 != 0 ==> n == i / 2 + 1);\nloop invariant (i % 2 == 0 ==> n == i / 2);\nloop invariant (i % 2 != 0 ==> n == i / 2 + 1);\nloop invariant (i % 2 == 0 ==> n == i / 2);\nloop invariant (i % 2 != 0 ==> n == i / 2 + 1);\nloop invariant (i % 2 == 0 ==> n == i / 2);\nloop invariant (i % 2 != 0 ==> n == i / 2 + 1);\nloop invariant (i % 2 == 0 ==> n == i / 2);\nloop invariant (i % 2 != 0 ==> n == i / 2 + 1);\nloop invariant (i % 2 == 0 ==> n == i / 2);\nloop invariant (i % 2 != 0 ==> n == i / 2 + 1);\nloop invariant (i % 2 == 0 ==> n == i / 2);\nloop invariant (i % 2 != 0 ==> n == i / 2 + 1);\nloop invariant (i % 2 == 0 ==> n == i / 2);\nloop invariant (i % 2 != 0 ==> n == i / 2 + 1);\nloop invariant (i % 2 == 0 ==> n == i / 2);\nloop invariant (i % 2 != 0 ==> n == i / 2 + 1);\nloop invariant (i % 2 == 0 ==> n == i / 2);\nloop invariant (i % 2 != 0 ==> n == i / 2 + 1);\nloop invariant (i % 2 == 0 ==> n == i / 2);\nloop invariant (i % 2 != 0 ==> n == i / 2 + 1);\nloop invariant (i % 2 == 0 ==> n == i / 2);\nloop invariant (i % 2 != 0 ==> n == i / 2 + 1);\nloop invariant (i % 2 == 0 ==> n == i / 2);\nloop invariant (i % 2 != 0 ==> n == i / 2 + 1);\nloop invariant (i % 2 == 0 ==> n == i / 2);\nloop invariant (i % 2 != 0 ==> n == i / 2 + 1);\nloop invariant (i % 2 == 0 ==> n == i / 2);\nloop invariant (i % 2 != 0 ==> n == i / 2 + 1);\nloop invariant (i % 2 == 0 ==> n == i / 2);\nloop invariant (i % 2 != 0 ==> n == i / 2 + 1);\nloop invariant (i % 2 == 0 ==> n == i / 2);\nloop invariant (i % 2 != 0 ==> n == i / 2 + 1);\nloop invariant (i % 2 == 0 ==> n == i / 2);\nloop invariant (i % 2 != 0 ==> n == i / 2 + 1);\n*/\n```",
                "```\n/*@\nloop invariant 1 <= i <= 2k;\nloop invariant k < 0 ==> n == k;\nloop invariant k >= 0 ==> n == 2k;\nloop invariant k < 0 ==> n == k;\nloop invariant k >= 0 ==> n == 2k;\nloop invariant k < 0 ==> n == k;\nloop invariant k >= 0 ==> n == 2k;\nloop invariant k < 0 ==> n == k;\nloop invariant k >= 0 ==> n == 2k;\nloop invariant k < 0 ==> n == k;\nloop invariant k >= 0 ==> n == 2k;\n*/\n```",
                "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant i3;\nloop invariant i4;\nloop invariant i5;\nloop invariant i6;\nloop invariant i7;\nloop invariant i8;\nloop invariant i9;\nloop invariant i10;\nloop invariant i11;\nloop invariant i12;\nloop invariant i13;\nloop invariant i14;\nloop invariant i15;\nloop invariant i16;\nloop invariant i17;\nloop invariant i18;\nloop invariant i19;\nloop invariant i20;\nloop invariant i21;\nloop invariant i22;\nloop invariant i23;\nloop invariant i24;\nloop invariant i25;\nloop invariant i26;\nloop invariant i27;\nloop invariant i28;\nloop invariant i29;\nloop invariant i30;\nloop invariant i31;\nloop invariant i32;\nloop invariant i33;\nloop invariant i34;\nloop invariant i35;\nloop invariant i36;\nloop invariant i37;\nloop invariant i38;\nloop invariant i39;\nloop invariant i40;\nloop invariant i41;\nloop invariant i42;\nloop invariant i43;\nloop invariant i44;\nloop invariant i45;\nloop invariant i46;\nloop invariant i47;\nloop invariant i48;\nloop invariant i49;\nloop invariant i50;\nloop invariant i51;\nloop invariant i52;\nloop invariant i53;\nloop invariant i54;\nloop invariant i55;\nloop invariant i56;\nloop invariant i57;\nloop invariant i58;\nloop invariant i59;\nloop invariant i60;\nloop invariant i61;\nloop invariant i62;\nloop invariant i63;\nloop invariant i64;\nloop invariant i65;\nloop invariant i66;\nloop invariant i67;\nloop invariant i68;\nloop invariant i69;\nloop invariant i70;\nloop invariant i71;\nloop invariant i72;\nloop invariant i73;\nloop invariant i74;\nloop invariant i75;\nloop invariant i76;\nloop invariant i77;\nloop invariant i78;\nloop invariant i79;\nloop invariant i80;\nloop invariant i81;\nloop invariant i82;\nloop invariant i83;\nloop invariant i84;\nloop invariant i85;\nloop invariant i86;\nloop invariant i87;\nloop invariant i88;\nloop invariant i89;\nloop invariant i90;\nloop invariant i91;\nloop invariant i92;\nloop invariant i93;\nloop invariant i94;\nloop invariant i95;\nloop invariant i96;\nloop invariant i97;\nloop invariant i98;\nloop invariant i99;\nloop invariant i100;\nloop invariant i101;\nloop invariant i102;\nloop invariant i103;\nloop invariant i104;\nloop invariant i105;\nloop invariant i106;\nloop invariant i107;\nloop invariant i108;\nloop invariant i109;\nloop invariant i110;\nloop invariant i111;\nloop invariant i112;\nloop invariant i113;\nloop invariant i114;\nloop invariant i115;\nloop invariant i116;\nloop invariant i117;\nloop invariant i118;\nloop invariant i119;\nloop invariant i120;\nloop invariant i121;\nloop invariant i122;\nloop invariant i123;\nloop invariant i124;\nloop invariant i125;\nloop invariant i126;\nloop invariant i127;\nloop invariant i128;\nloop invariant i129;\nloop invariant i130;\nloop invariant i131;\nloop invariant i132;\nloop invariant i133;\nloop invariant i134;\nloop invariant i135;\nloop invariant i136;\nloop invariant i137;\nloop invariant i138;\nloop invariant i139;\nloop invariant i140;\nloop invariant i141;\nloop invariant i142;\nloop invariant i143;\nloop invariant i144;\nloop invariant i145;\nloop invariant i146;\nloop invariant i147;\nloop invariant i148;\nloop invariant i149;\nloop invariant i150;\nloop invariant i151;\nloop invariant i152;\nloop invariant i153;\nloop invariant i154;\nloop invariant i155;\nloop invariant i156;\nloop invariant i157;\nloop invariant i158;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i < 2*k;\nloop invariant n >= 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= 2*k;\nloop invariant 0 <= n <= k;\nloop invariant n == (i/2);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= 2*k;\nloop invariant 0 <= n <= k;\nloop invariant n == i/2;\n*/\n```"
            ],
            "completions": [
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= 2*k;\nloop invariant i % 2 == (i < 2*k);\nloop invariant i % 2 == (i % 2 == 0) ==> i % 2 == 0;\nloop invariant i % 2 == 0 ==> i % 2 == 0;\nloop invariant i % 2 == 0 ==> i % 2 == 1;\nloop invariant i % 2 == 0 ==> i % 2 == 0;\nloop invariant i % 2 == 0 ==> i % 2 == 1;\nloop invariant i % 2 == 0 ==> i % 2 == 0;\nloop invariant i % 2 == 0 ==> i % 2 == 1;\nloop invariant i % 2 == 0 ==> i % 2 == 0;\nloop invariant i % 2 == 0 ==> i % 2 == 1;\nloop invariant i % 2 == 0 ==> i % 2 == 0;\nloop invariant i % 2 == 0 ==> i % 2 == 1;\nloop invariant i % 2 == 0 ==> i % 2 == 0;\nloop invariant i % 2 == 0 ==> i % 2 == 1;\nloop invariant i % 2 == 0 ==> i % 2 == 0;\nloop invariant i % 2 == 0 ==> i % 2 == 1;\nloop invariant i % 2 == 0 ==> i % 2 == 0;\nloop invariant i % 2 == 0 ==> i % 2 == 1;\nloop invariant i % 2 == 0 ==> i % 2 == 0;\nloop invariant i % 2 == 0 ==> i % 2 == 1;\nloop invariant i % 2 == 0 ==> i % 2 == 0;\nloop invariant i % 2 == 0 ==> i % 2 == 1;\nloop invariant i % 2 == 0 ==> i % 2 == 0;\nloop invariant i % 2 == 0 ==> i % 2 == 1;\nloop invariant i % 2 == 0 ==> i % 2 == 0;\nloop invariant i % 2 == 0 ==> i % 2 == 1;\nloop invariant i % 2 == 0 ==> i % 2 == 0;\nloop invariant i % 2 == 0 ==> i % 2 == 1;\nloop invariant i % 2 == 0 ==> i % 2 == 0;\nloop invariant i % 2 == 0 ==> i % 2 == 1;\nloop invariant i % 2 == 0 ==> i % 2 == 0;\nloop invariant i % 2 == 0 ==> i % 2 == 1;\nloop invariant i % 2 == 0 ==> i % 2 == 0;\nloop invariant i % 2 == 0 ==> i % 2 == 1;\nloop invariant i % 2 == 0 ==> i % 2 == 0;\nloop invariant i % 2 == 0 ==> i % 2 == 1;\nloop invariant i % 2 == 0 ==> i % 2 == 0;\nloop invariant i % 2 == 0 ==> i % 2 == 1;\nloop invariant i % 2 == 0 ==> i % 2 == 0;\nloop invariant i % 2 == 0 ==> i % 2 == 1;\nloop invariant i % 2 == 0 ==> i % 2 == 0;\nloop invariant i % 2 == 0 ==> i % 2 == 1;\nloop invariant i % 2 == 0 ==> i % 2 == 0;\nloop invariant i % 2 == 0 ==> i % 2 == 1;\nloop invariant i % 2 == 0 ==> i % 2 == 0;\nloop invariant i % 2 == 0 ==> i % 2 == 1;\nloop invariant i % 2 == 0 ==> i % 2 == 0;\nloop invariant i % 2 == 0 ==> i % 2 == 1;\nloop invariant i % 2 == 0 ==> i % 2 == 0;\nloop invariant i % 2 == 0 ==> i % 2 == 1;\nloop invariant i % 2 == 0 ==> i % 2 == 0;\nloop invariant i % 2 == 0 ==> i % 2 == 1;\nloop invariant i % 2 == 0 ==> i % 2 == 0;\nloop invariant i % 2 == 0 ==> i % 2 == 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= 2*k is preserved but not established.\nloop invariant i % 2 == (i < 2*k) is preserved but not established.\nloop invariant i % 2 == (i % 2 == 0) ==> i % 2 == 0 is partially proven to be inductive.\nloop invariant i % 2 == 0 ==> i % 2 == 0 is partially proven to be inductive.\nloop invariant i % 2 == 0 ==> i % 2 == 1 is preserved but not established.\nAssertion k < 0 || n == k: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int n = 0;\n    int k = unknown_int();\n    if (!(k <= LARGE_INT && k >= -LARGE_INT)) return 0;\n    /*@\n\n\nloop invariant i3: i % 2 == (i % 2 == 0) ==> i % 2 == 0;\nloop invariant i4: i % 2 == 0 ==> i % 2 == 0;\n\n*/\nfor(i = 0; i < 2*k; i++) {\n        if (i % 2 == 0) {\n            n ++;\n        }\n    }\n    {;\n//@ assert(k < 0 || n == k);\n}\n\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= 2 * k;\nloop invariant -k <= n - i / 2 <= k;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= 2 * k is preserved but not established.\nloop invariant -k <= n - i / 2 <= k is established but not preserved.\nAssertion k < 0 || n == k: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int n = 0;\n    int k = unknown_int();\n    if (!(k <= LARGE_INT && k >= -LARGE_INT)) return 0;\n    /*@\n\n\n*/\nfor(i = 0; i < 2*k; i++) {\n        if (i % 2 == 0) {\n            n ++;\n        }\n    }\n    {;\n//@ assert(k < 0 || n == k);\n}\n\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant n <= k;\nloop invariant k >= 0 ==> n == k;\nloop invariant k < 0 ==> n == k;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant n <= k is neither established nor preserved.\nloop invariant k >= 0 ==> n == k is preserved but not established.\nloop invariant k < 0 ==> n == k is partially proven to be inductive.\nAssertion k < 0 || n == k: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int n = 0;\n    int k = unknown_int();\n    if (!(k <= LARGE_INT && k >= -LARGE_INT)) return 0;\n    /*@\n\n\n\n*/\nfor(i = 0; i < 2*k; i++) {\n        if (i % 2 == 0) {\n            n ++;\n        }\n    }\n    {;\n//@ assert(k < 0 || n == k);\n}\n\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= 2*k;\nloop invariant 0 <= n <= k;\nloop invariant n == k ==> (i % 2 == 0);\nloop invariant n < k ==> (i % 2 != 0);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= 2*k is preserved but not established.\nloop invariant 0 <= n <= k is established but not preserved.\nloop invariant n == k ==> (i % 2 == 0) is partially proven to be inductive.\nloop invariant n < k ==> (i % 2 != 0) is neither established nor preserved.\nAssertion k < 0 || n == k: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int n = 0;\n    int k = unknown_int();\n    if (!(k <= LARGE_INT && k >= -LARGE_INT)) return 0;\n    /*@\n\n\n\n\n*/\nfor(i = 0; i < 2*k; i++) {\n        if (i % 2 == 0) {\n            n ++;\n        }\n    }\n    {;\n//@ assert(k < 0 || n == k);\n}\n\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 8,
                    "annotations": "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant i3;\nloop invariant i4;\nloop invariant i1: i >= 0;\nloop invariant i2: i <= 2*k;\nloop invariant i3: n >= 0;\nloop invariant i4: n <= k;\nloop invariant i5: n == k ==> i == 2*k;\nloop invariant i6: n == k ==> i % 2 == 0;\nloop invariant i7: n == k ==> i == 2*k;\nloop invariant i8: n == k ==> i >= 0;\nloop invariant i9: n == k ==> i <= 2*k;\nloop invariant i10: n == k ==> n >= 0;\nloop invariant i11: n == k ==> n <= k;\nloop invariant i12: n == k ==> i >= 0 ==> i <= 2*k;\nloop invariant i13: n == k ==> i >= 0 ==> n >= 0;\nloop invariant i14: n == k ==> i >= 0 ==> n <= k;\nloop invariant i15: n == k ==> i <= 2*k ==> i >= 0;\nloop invariant i16: n == k ==> i <= 2*k ==> n >= 0;\nloop invariant i17: n == k ==> i <= 2*k ==> n <= k;\nloop invariant i18: n == k ==> n >= 0 ==> i >= 0;\nloop invariant i19: n == k ==> n >= 0 ==> i <= 2*k;\nloop invariant i20: n == k ==> n <= k ==> i >= 0;\nloop invariant i21: n == k ==> n <= k ==> i <= 2*k;\nloop invariant i22: n == k ==> i >= 0 ==> i <= 2*k ==> n >= 0;\nloop invariant i23: n == k ==> i >= 0 ==> i <= 2*k ==> n <= k;\nloop invariant i24: n == k ==> i >= 0 ==> n >= 0 ==> i <= 2*k;\nloop invariant i25: n == k ==> i >= 0 ==> n <= k ==> i <= 2*k;\nloop invariant i26: n == k ==> i <= 2*k ==> i >= 0 ==> n >= 0;\nloop invariant i27: n == k ==> i <= 2*k ==> i >= 0 ==> n <= k;\nloop invariant i28: n == k ==> i <= 2*k ==> n >= 0 ==> i >= 0;\nloop invariant i29: n == k ==> i <= 2*k ==> n <= k ==> i >= 0;\nloop invariant i30: n == k ==> n >= 0 ==> i >= 0 ==> i <= 2*k;\nloop invariant i31: n == k ==> n >= 0 ==> i >= 0 ==> n <= k;\nloop invariant i32: n == k ==> n >= 0 ==> i <= 2*k ==> n >= 0;\nloop invariant i33: n == k ==> n >= 0 ==> i <= 2*k ==> n <= k;\nloop invariant i34: n == k ==> n <= k ==> i >= 0 ==> i <= 2*k;\nloop invariant i35: n == k ==> n <= k ==> i >= 0 ==> n >= 0;\nloop invariant i36: n == k ==> n <= k ==> i <= 2*k ==> n >= 0;\nloop invariant i37: n == k ==> n <= k ==> i <= 2*k ==> n <= k;\nloop invariant i38: n == k ==> i >= 0 ==> i <= 2*k ==> n >= 0 ==> n <= k;\nloop invariant i39: n == k ==> i >= 0 ==> i <= 2*k ==> n <= k ==> n >= 0;\nloop invariant i40: n == k ==> i >= 0 ==> n >= 0 ==> i <= 2*k ==> n <= k;\nloop invariant i41: n == k ==> i >= 0 ==> n <= k ==> i <= 2*k ==> n >= 0;\nloop invariant i42: n == k ==> i <= 2*k ==> i >= 0 ==> n >= 0 ==> n <= k;\nloop invariant i43: n == k ==> i <= 2*k ==> i >= 0 ==> n <= k ==> n >= 0;\nloop invariant i44: n == k ==> i <= 2*k ==> n >= 0 ==> i >= 0 ==> n <= k;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 17: unbound logic variable i1. Ignoring loop annotation",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int n = 0;\n    int k = unknown_int();\n    if (!(k <= LARGE_INT && k >= -LARGE_INT)) return 0;\n    /*@\n\n\n\n\nloop invariant i5: i >= 0;\n\nloop invariant i7: n >= 0;\n\n\n\nloop invariant i11: n == k ==> i >= 0;\nloop invariant i12: n == k ==> i <= 2*k;\nloop invariant i13: n == k ==> n >= 0;\nloop invariant i14: n == k ==> n <= k;\nloop invariant i15: n == k ==> i >= 0 ==> i <= 2*k;\nloop invariant i16: n == k ==> i >= 0 ==> n >= 0;\nloop invariant i17: n == k ==> i >= 0 ==> n <= k;\nloop invariant i18: n == k ==> i <= 2*k ==> i >= 0;\nloop invariant i19: n == k ==> i <= 2*k ==> n >= 0;\nloop invariant i20: n == k ==> i <= 2*k ==> n <= k;\nloop invariant i21: n == k ==> n >= 0 ==> i >= 0;\nloop invariant i22: n == k ==> n >= 0 ==> i <= 2*k;\nloop invariant i23: n == k ==> n <= k ==> i >= 0;\nloop invariant i24: n == k ==> n <= k ==> i <= 2*k;\nloop invariant i25: n == k ==> i >= 0 ==> i <= 2*k ==> n >= 0;\nloop invariant i26: n == k ==> i >= 0 ==> i <= 2*k ==> n <= k;\nloop invariant i27: n == k ==> i >= 0 ==> n >= 0 ==> i <= 2*k;\nloop invariant i28: n == k ==> i >= 0 ==> n <= k ==> i <= 2*k;\nloop invariant i29: n == k ==> i <= 2*k ==> i >= 0 ==> n >= 0;\nloop invariant i30: n == k ==> i <= 2*k ==> i >= 0 ==> n <= k;\nloop invariant i31: n == k ==> i <= 2*k ==> n >= 0 ==> i >= 0;\nloop invariant i32: n == k ==> i <= 2*k ==> n <= k ==> i >= 0;\nloop invariant i33: n == k ==> n >= 0 ==> i >= 0 ==> i <= 2*k;\nloop invariant i34: n == k ==> n >= 0 ==> i >= 0 ==> n <= k;\nloop invariant i35: n == k ==> n >= 0 ==> i <= 2*k ==> n >= 0;\nloop invariant i36: n == k ==> n >= 0 ==> i <= 2*k ==> n <= k;\nloop invariant i37: n == k ==> n <= k ==> i >= 0 ==> i <= 2*k;\nloop invariant i38: n == k ==> n <= k ==> i >= 0 ==> n >= 0;\nloop invariant i39: n == k ==> n <= k ==> i <= 2*k ==> n >= 0;\nloop invariant i40: n == k ==> n <= k ==> i <= 2*k ==> n <= k;\nloop invariant i41: n == k ==> i >= 0 ==> i <= 2*k ==> n >= 0 ==> n <= k;\nloop invariant i42: n == k ==> i >= 0 ==> i <= 2*k ==> n <= k ==> n >= 0;\nloop invariant i43: n == k ==> i >= 0 ==> n >= 0 ==> i <= 2*k ==> n <= k;\nloop invariant i44: n == k ==> i >= 0 ==> n <= k ==> i <= 2*k ==> n >= 0;\nloop invariant i45: n == k ==> i <= 2*k ==> i >= 0 ==> n >= 0 ==> n <= k;\nloop invariant i46: n == k ==> i <= 2*k ==> i >= 0 ==> n <= k ==> n >= 0;\nloop invariant i47: n == k ==> i <= 2*k ==> n >= 0 ==> i >= 0 ==> n <= k;\n*/\nfor(i = 0; i < 2*k; i++) {\n        if (i % 2 == 0) {\n            n ++;\n        }\n    }\n    {;\n//@ assert(k < 0 || n == k);\n}\n\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= 2*k;\nloop invariant n >= 0;\nloop invariant (i % 2 == 0 ==> n <= k);\nloop invariant (i % 2 != 0 ==> n == k);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= 2*k is preserved but not established.\nloop invariant n >= 0 is partially proven to be inductive.\nloop invariant (i % 2 == 0 ==> n <= k) is partially proven to be inductive.\nloop invariant (i % 2 != 0 ==> n == k) is established but not preserved.\nAssertion k < 0 || n == k: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int n = 0;\n    int k = unknown_int();\n    if (!(k <= LARGE_INT && k >= -LARGE_INT)) return 0;\n    /*@\n\nloop invariant i2: n >= 0;\n\n\n*/\nfor(i = 0; i < 2*k; i++) {\n        if (i % 2 == 0) {\n            n ++;\n        }\n    }\n    {;\n//@ assert(k < 0 || n == k);\n}\n\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant ( i <= 2*k ) && ( i >= 0 );\nloop invariant ( n <= k ) && ( n >= 0 );\nloop invariant ( i % 2 == 0 ) ==> ( n == i / 2 );\nloop invariant ( i % 2 != 0 ) ==> ( n == ( i - 1 ) / 2 );\nloop invariant ( k <= LARGE_INT ) && ( k >= -LARGE_INT );\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant ( i <= 2*k ) && ( i >= 0 ) is preserved but not established.\nloop invariant ( n <= k ) && ( n >= 0 ) is partially proven to be inductive.\nloop invariant ( i % 2 == 0 ) ==> ( n == i / 2 ) is established but not preserved.\nloop invariant ( i % 2 != 0 ) ==> ( n == ( i - 1 ) / 2 ) is established but not preserved.\nloop invariant ( k <= LARGE_INT ) && ( k >= -LARGE_INT ) is partially proven to be inductive.\nAssertion k < 0 || n == k: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int n = 0;\n    int k = unknown_int();\n    if (!(k <= LARGE_INT && k >= -LARGE_INT)) return 0;\n    /*@\n\n\n\n\nloop invariant i5: ( k <= LARGE_INT ) && ( k >= -LARGE_INT );\n*/\nfor(i = 0; i < 2*k; i++) {\n        if (i % 2 == 0) {\n            n ++;\n        }\n    }\n    {;\n//@ assert(k < 0 || n == k);\n}\n\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= 2*k;\nloop invariant 0 <= n <= 2*k;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= 2*k is preserved but not established.\nloop invariant 0 <= n <= 2*k is established but not preserved.\nAssertion k < 0 || n == k: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int n = 0;\n    int k = unknown_int();\n    if (!(k <= LARGE_INT && k >= -LARGE_INT)) return 0;\n    /*@\n\n\n*/\nfor(i = 0; i < 2*k; i++) {\n        if (i % 2 == 0) {\n            n ++;\n        }\n    }\n    {;\n//@ assert(k < 0 || n == k);\n}\n\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 6,
                    "annotations": "```\n/*@\nloop invariant i == 0;\nloop invariant n == 0;\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant k >= -LARGE_INT;\nloop invariant i % 2 == 0 ==> n == k;\nloop invariant i % 2 == 1 ==> n == k - 1;\nloop invariant i == 2*k ==> n == k;\nloop invariant n >= k - 1;\nloop invariant k < 0 ==> n == k;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant i == 0 is partially proven to be inductive.\nloop invariant n == 0 is partially proven to be inductive.\nloop invariant 0 <= k <= LARGE_INT is preserved but not established.\nloop invariant k >= -LARGE_INT is partially proven to be inductive.\nloop invariant i % 2 == 0 ==> n == k is preserved but not established.\nloop invariant i % 2 == 1 ==> n == k - 1 is partially proven to be inductive.\nloop invariant i == 2*k ==> n == k is partially proven to be inductive.\nloop invariant n >= k - 1 is partially proven to be inductive.\nloop invariant k < 0 ==> n == k is partially proven to be inductive.\nAssertion k < 0 || n == k: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int n = 0;\n    int k = unknown_int();\n    if (!(k <= LARGE_INT && k >= -LARGE_INT)) return 0;\n    /*@\n\n\n\nloop invariant i4: k >= -LARGE_INT;\n\n\n\n\n\n*/\nfor(i = 0; i < 2*k; i++) {\n        if (i % 2 == 0) {\n            n ++;\n        }\n    }\n    {;\n//@ assert(k < 0 || n == k);\n}\n\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant i >= 0;\nloop invariant i <= 2 * k;\nloop invariant 0 <= n <= k;\nloop invariant (i % 2 == 0 ==> n == i / 2);\nloop invariant (i % 2 != 0 ==> n == i / 2 + 1);\nloop invariant (i % 2 == 0 ==> n == i / 2);\nloop invariant (i % 2 != 0 ==> n == i / 2 + 1);\nloop invariant (i % 2 == 0 ==> n == i / 2);\nloop invariant (i % 2 != 0 ==> n == i / 2 + 1);\nloop invariant (i % 2 == 0 ==> n == i / 2);\nloop invariant (i % 2 != 0 ==> n == i / 2 + 1);\nloop invariant (i % 2 == 0 ==> n == i / 2);\nloop invariant (i % 2 != 0 ==> n == i / 2 + 1);\nloop invariant (i % 2 == 0 ==> n == i / 2);\nloop invariant (i % 2 != 0 ==> n == i / 2 + 1);\nloop invariant (i % 2 == 0 ==> n == i / 2);\nloop invariant (i % 2 != 0 ==> n == i / 2 + 1);\nloop invariant (i % 2 == 0 ==> n == i / 2);\nloop invariant (i % 2 != 0 ==> n == i / 2 + 1);\nloop invariant (i % 2 == 0 ==> n == i / 2);\nloop invariant (i % 2 != 0 ==> n == i / 2 + 1);\nloop invariant (i % 2 == 0 ==> n == i / 2);\nloop invariant (i % 2 != 0 ==> n == i / 2 + 1);\nloop invariant (i % 2 == 0 ==> n == i / 2);\nloop invariant (i % 2 != 0 ==> n == i / 2 + 1);\nloop invariant (i % 2 == 0 ==> n == i / 2);\nloop invariant (i % 2 != 0 ==> n == i / 2 + 1);\nloop invariant (i % 2 == 0 ==> n == i / 2);\nloop invariant (i % 2 != 0 ==> n == i / 2 + 1);\nloop invariant (i % 2 == 0 ==> n == i / 2);\nloop invariant (i % 2 != 0 ==> n == i / 2 + 1);\nloop invariant (i % 2 == 0 ==> n == i / 2);\nloop invariant (i % 2 != 0 ==> n == i / 2 + 1);\nloop invariant (i % 2 == 0 ==> n == i / 2);\nloop invariant (i % 2 != 0 ==> n == i / 2 + 1);\nloop invariant (i % 2 == 0 ==> n == i / 2);\nloop invariant (i % 2 != 0 ==> n == i / 2 + 1);\nloop invariant (i % 2 == 0 ==> n == i / 2);\nloop invariant (i % 2 != 0 ==> n == i / 2 + 1);\nloop invariant (i % 2 == 0 ==> n == i / 2);\nloop invariant (i % 2 != 0 ==> n == i / 2 + 1);\nloop invariant (i % 2 == 0 ==> n == i / 2);\nloop invariant (i % 2 != 0 ==> n == i / 2 + 1);\nloop invariant (i % 2 == 0 ==> n == i / 2);\nloop invariant (i % 2 != 0 ==> n == i / 2 + 1);\nloop invariant (i % 2 == 0 ==> n == i / 2);\nloop invariant (i % 2 != 0 ==> n == i / 2 + 1);\nloop invariant (i % 2 == 0 ==> n == i / 2);\nloop invariant (i % 2 != 0 ==> n == i / 2 + 1);\nloop invariant (i % 2 == 0 ==> n == i / 2);\nloop invariant (i % 2 != 0 ==> n == i / 2 + 1);\nloop invariant (i % 2 == 0 ==> n == i / 2);\nloop invariant (i % 2 != 0 ==> n == i / 2 + 1);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant i >= 0 is partially proven to be inductive.\nloop invariant i <= 2 * k is preserved but not established.\nloop invariant 0 <= n <= k is partially proven to be inductive.\nloop invariant (i % 2 == 0 ==> n == i / 2) is partially proven to be inductive.\nloop invariant (i % 2 != 0 ==> n == i / 2 + 1) is partially proven to be inductive.\nAssertion k < 0 || n == k: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int n = 0;\n    int k = unknown_int();\n    if (!(k <= LARGE_INT && k >= -LARGE_INT)) return 0;\n    /*@\nloop invariant i1: i >= 0;\n\n\nloop invariant i4: (i % 2 == 0 ==> n == i / 2);\nloop invariant i5: (i % 2 != 0 ==> n == i / 2 + 1);\n*/\nfor(i = 0; i < 2*k; i++) {\n        if (i % 2 == 0) {\n            n ++;\n        }\n    }\n    {;\n//@ assert(k < 0 || n == k);\n}\n\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 1 <= i <= 2k;\nloop invariant k < 0 ==> n == k;\nloop invariant k >= 0 ==> n == 2k;\nloop invariant k < 0 ==> n == k;\nloop invariant k >= 0 ==> n == 2k;\nloop invariant k < 0 ==> n == k;\nloop invariant k >= 0 ==> n == 2k;\nloop invariant k < 0 ==> n == k;\nloop invariant k >= 0 ==> n == 2k;\nloop invariant k < 0 ==> n == k;\nloop invariant k >= 0 ==> n == 2k;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 17: unexpected token 'k'",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int n = 0;\n    int k = unknown_int();\n    if (!(k <= LARGE_INT && k >= -LARGE_INT)) return 0;\n    /*@\n\n\n\n*/\nfor(i = 0; i < 2*k; i++) {\n        if (i % 2 == 0) {\n            n ++;\n        }\n    }\n    {;\n//@ assert(k < 0 || n == k);\n}\n\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 159,
                    "annotations": "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant i3;\nloop invariant i4;\nloop invariant i5;\nloop invariant i6;\nloop invariant i7;\nloop invariant i8;\nloop invariant i9;\nloop invariant i10;\nloop invariant i11;\nloop invariant i12;\nloop invariant i13;\nloop invariant i14;\nloop invariant i15;\nloop invariant i16;\nloop invariant i17;\nloop invariant i18;\nloop invariant i19;\nloop invariant i20;\nloop invariant i21;\nloop invariant i22;\nloop invariant i23;\nloop invariant i24;\nloop invariant i25;\nloop invariant i26;\nloop invariant i27;\nloop invariant i28;\nloop invariant i29;\nloop invariant i30;\nloop invariant i31;\nloop invariant i32;\nloop invariant i33;\nloop invariant i34;\nloop invariant i35;\nloop invariant i36;\nloop invariant i37;\nloop invariant i38;\nloop invariant i39;\nloop invariant i40;\nloop invariant i41;\nloop invariant i42;\nloop invariant i43;\nloop invariant i44;\nloop invariant i45;\nloop invariant i46;\nloop invariant i47;\nloop invariant i48;\nloop invariant i49;\nloop invariant i50;\nloop invariant i51;\nloop invariant i52;\nloop invariant i53;\nloop invariant i54;\nloop invariant i55;\nloop invariant i56;\nloop invariant i57;\nloop invariant i58;\nloop invariant i59;\nloop invariant i60;\nloop invariant i61;\nloop invariant i62;\nloop invariant i63;\nloop invariant i64;\nloop invariant i65;\nloop invariant i66;\nloop invariant i67;\nloop invariant i68;\nloop invariant i69;\nloop invariant i70;\nloop invariant i71;\nloop invariant i72;\nloop invariant i73;\nloop invariant i74;\nloop invariant i75;\nloop invariant i76;\nloop invariant i77;\nloop invariant i78;\nloop invariant i79;\nloop invariant i80;\nloop invariant i81;\nloop invariant i82;\nloop invariant i83;\nloop invariant i84;\nloop invariant i85;\nloop invariant i86;\nloop invariant i87;\nloop invariant i88;\nloop invariant i89;\nloop invariant i90;\nloop invariant i91;\nloop invariant i92;\nloop invariant i93;\nloop invariant i94;\nloop invariant i95;\nloop invariant i96;\nloop invariant i97;\nloop invariant i98;\nloop invariant i99;\nloop invariant i100;\nloop invariant i101;\nloop invariant i102;\nloop invariant i103;\nloop invariant i104;\nloop invariant i105;\nloop invariant i106;\nloop invariant i107;\nloop invariant i108;\nloop invariant i109;\nloop invariant i110;\nloop invariant i111;\nloop invariant i112;\nloop invariant i113;\nloop invariant i114;\nloop invariant i115;\nloop invariant i116;\nloop invariant i117;\nloop invariant i118;\nloop invariant i119;\nloop invariant i120;\nloop invariant i121;\nloop invariant i122;\nloop invariant i123;\nloop invariant i124;\nloop invariant i125;\nloop invariant i126;\nloop invariant i127;\nloop invariant i128;\nloop invariant i129;\nloop invariant i130;\nloop invariant i131;\nloop invariant i132;\nloop invariant i133;\nloop invariant i134;\nloop invariant i135;\nloop invariant i136;\nloop invariant i137;\nloop invariant i138;\nloop invariant i139;\nloop invariant i140;\nloop invariant i141;\nloop invariant i142;\nloop invariant i143;\nloop invariant i144;\nloop invariant i145;\nloop invariant i146;\nloop invariant i147;\nloop invariant i148;\nloop invariant i149;\nloop invariant i150;\nloop invariant i151;\nloop invariant i152;\nloop invariant i153;\nloop invariant i154;\nloop invariant i155;\nloop invariant i156;\nloop invariant i157;\nloop invariant i158;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 17: unbound logic variable i1. Ignoring loop annotation",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int n = 0;\n    int k = unknown_int();\n    if (!(k <= LARGE_INT && k >= -LARGE_INT)) return 0;\n    /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nfor(i = 0; i < 2*k; i++) {\n        if (i % 2 == 0) {\n            n ++;\n        }\n    }\n    {;\n//@ assert(k < 0 || n == k);\n}\n\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= i < 2*k;\nloop invariant n >= 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i < 2*k is neither established nor preserved.\nloop invariant n >= 0 is partially proven to be inductive.\nAssertion k < 0 || n == k: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int n = 0;\n    int k = unknown_int();\n    if (!(k <= LARGE_INT && k >= -LARGE_INT)) return 0;\n    /*@\n\nloop invariant i2: n >= 0;\n*/\nfor(i = 0; i < 2*k; i++) {\n        if (i % 2 == 0) {\n            n ++;\n        }\n    }\n    {;\n//@ assert(k < 0 || n == k);\n}\n\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= 2*k;\nloop invariant 0 <= n <= k;\nloop invariant n == (i/2);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= 2*k is preserved but not established.\nloop invariant 0 <= n <= k is partially proven to be inductive.\nloop invariant n == (i/2) is established but not preserved.\nAssertion k < 0 || n == k: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int n = 0;\n    int k = unknown_int();\n    if (!(k <= LARGE_INT && k >= -LARGE_INT)) return 0;\n    /*@\n\n\n\n*/\nfor(i = 0; i < 2*k; i++) {\n        if (i % 2 == 0) {\n            n ++;\n        }\n    }\n    {;\n//@ assert(k < 0 || n == k);\n}\n\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= 2*k;\nloop invariant 0 <= n <= k;\nloop invariant n == i/2;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= 2*k is preserved but not established.\nloop invariant 0 <= n <= k is partially proven to be inductive.\nloop invariant n == i/2 is established but not preserved.\nAssertion k < 0 || n == k: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int n = 0;\n    int k = unknown_int();\n    if (!(k <= LARGE_INT && k >= -LARGE_INT)) return 0;\n    /*@\n\n\n\n*/\nfor(i = 0; i < 2*k; i++) {\n        if (i % 2 == 0) {\n            n ++;\n        }\n    }\n    {;\n//@ assert(k < 0 || n == k);\n}\n\n    return 0;\n}",
                    "checker_output_after_prune": false
                }
            ],
            "checker_output_for_combined_annotations": false,
            "checker_message_for_combined_annotations": "Annotation error on line 95: unexpected token 'k'",
            "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int n = 0;\n    int k = unknown_int();\n    if (!(k <= LARGE_INT && k >= -LARGE_INT)) return 0;\n    /*@\nloop invariant i1: 0 <= i <= 2*k;\nloop invariant i2: i % 2 == (i < 2*k);\nloop invariant i3: i % 2 == (i % 2 == 0) ==> i % 2 == 0;\nloop invariant i4: i % 2 == 0 ==> i % 2 == 0;\nloop invariant i5: i % 2 == 0 ==> i % 2 == 1;\nloop invariant i6: 0 <= i <= 2 * k;\nloop invariant i7: -k <= n - i / 2 <= k;\nloop invariant i8: n <= k;\nloop invariant i9: k >= 0 ==> n == k;\nloop invariant i10: k < 0 ==> n == k;\nloop invariant i11: 0 <= n <= k;\nloop invariant i12: n == k ==> (i % 2 == 0);\nloop invariant i13: n < k ==> (i % 2 != 0);\nloop invariant i14: i1;\nloop invariant i15: i2;\nloop invariant i16: i3;\nloop invariant i17: i4;\nloop invariant i18: i >= 0;\nloop invariant i19: i <= 2*k;\nloop invariant i20: n >= 0;\nloop invariant i21: n == k ==> i == 2*k;\nloop invariant i22: n == k ==> i % 2 == 0;\nloop invariant i23: n == k ==> i >= 0;\nloop invariant i24: n == k ==> i <= 2*k;\nloop invariant i25: n == k ==> n >= 0;\nloop invariant i26: n == k ==> n <= k;\nloop invariant i27: n == k ==> i >= 0 ==> i <= 2*k;\nloop invariant i28: n == k ==> i >= 0 ==> n >= 0;\nloop invariant i29: n == k ==> i >= 0 ==> n <= k;\nloop invariant i30: n == k ==> i <= 2*k ==> i >= 0;\nloop invariant i31: n == k ==> i <= 2*k ==> n >= 0;\nloop invariant i32: n == k ==> i <= 2*k ==> n <= k;\nloop invariant i33: n == k ==> n >= 0 ==> i >= 0;\nloop invariant i34: n == k ==> n >= 0 ==> i <= 2*k;\nloop invariant i35: n == k ==> n <= k ==> i >= 0;\nloop invariant i36: n == k ==> n <= k ==> i <= 2*k;\nloop invariant i37: n == k ==> i >= 0 ==> i <= 2*k ==> n >= 0;\nloop invariant i38: n == k ==> i >= 0 ==> i <= 2*k ==> n <= k;\nloop invariant i39: n == k ==> i >= 0 ==> n >= 0 ==> i <= 2*k;\nloop invariant i40: n == k ==> i >= 0 ==> n <= k ==> i <= 2*k;\nloop invariant i41: n == k ==> i <= 2*k ==> i >= 0 ==> n >= 0;\nloop invariant i42: n == k ==> i <= 2*k ==> i >= 0 ==> n <= k;\nloop invariant i43: n == k ==> i <= 2*k ==> n >= 0 ==> i >= 0;\nloop invariant i44: n == k ==> i <= 2*k ==> n <= k ==> i >= 0;\nloop invariant i45: n == k ==> n >= 0 ==> i >= 0 ==> i <= 2*k;\nloop invariant i46: n == k ==> n >= 0 ==> i >= 0 ==> n <= k;\nloop invariant i47: n == k ==> n >= 0 ==> i <= 2*k ==> n >= 0;\nloop invariant i48: n == k ==> n >= 0 ==> i <= 2*k ==> n <= k;\nloop invariant i49: n == k ==> n <= k ==> i >= 0 ==> i <= 2*k;\nloop invariant i50: n == k ==> n <= k ==> i >= 0 ==> n >= 0;\nloop invariant i51: n == k ==> n <= k ==> i <= 2*k ==> n >= 0;\nloop invariant i52: n == k ==> n <= k ==> i <= 2*k ==> n <= k;\nloop invariant i53: n == k ==> i >= 0 ==> i <= 2*k ==> n >= 0 ==> n <= k;\nloop invariant i54: n == k ==> i >= 0 ==> i <= 2*k ==> n <= k ==> n >= 0;\nloop invariant i55: n == k ==> i >= 0 ==> n >= 0 ==> i <= 2*k ==> n <= k;\nloop invariant i56: n == k ==> i >= 0 ==> n <= k ==> i <= 2*k ==> n >= 0;\nloop invariant i57: n == k ==> i <= 2*k ==> i >= 0 ==> n >= 0 ==> n <= k;\nloop invariant i58: n == k ==> i <= 2*k ==> i >= 0 ==> n <= k ==> n >= 0;\nloop invariant i59: n == k ==> i <= 2*k ==> n >= 0 ==> i >= 0 ==> n <= k;\nloop invariant i60: (i % 2 == 0 ==> n <= k);\nloop invariant i61: (i % 2 != 0 ==> n == k);\nloop invariant i62: ( i <= 2*k ) && ( i >= 0 );\nloop invariant i63: ( n <= k ) && ( n >= 0 );\nloop invariant i64: ( i % 2 == 0 ) ==> ( n == i / 2 );\nloop invariant i65: ( i % 2 != 0 ) ==> ( n == ( i - 1 ) / 2 );\nloop invariant i66: ( k <= LARGE_INT ) && ( k >= -LARGE_INT );\nloop invariant i67: 0 <= n <= 2*k;\nloop invariant i68: i == 0;\nloop invariant i69: n == 0;\nloop invariant i70: 0 <= k <= LARGE_INT;\nloop invariant i71: k >= -LARGE_INT;\nloop invariant i72: i % 2 == 0 ==> n == k;\nloop invariant i73: i % 2 == 1 ==> n == k - 1;\nloop invariant i74: i == 2*k ==> n == k;\nloop invariant i75: n >= k - 1;\nloop invariant i76: i <= 2 * k;\nloop invariant i77: (i % 2 == 0 ==> n == i / 2);\nloop invariant i78: (i % 2 != 0 ==> n == i / 2 + 1);\nloop invariant i79: 1 <= i <= 2k;\nloop invariant i80: k >= 0 ==> n == 2k;\nloop invariant i81: i5;\nloop invariant i82: i6;\nloop invariant i83: i7;\nloop invariant i84: i8;\nloop invariant i85: i9;\nloop invariant i86: i10;\nloop invariant i87: i11;\nloop invariant i88: i12;\nloop invariant i89: i13;\nloop invariant i90: i14;\nloop invariant i91: i15;\nloop invariant i92: i16;\nloop invariant i93: i17;\nloop invariant i94: i18;\nloop invariant i95: i19;\nloop invariant i96: i20;\nloop invariant i97: i21;\nloop invariant i98: i22;\nloop invariant i99: i23;\nloop invariant i100: i24;\nloop invariant i101: i25;\nloop invariant i102: i26;\nloop invariant i103: i27;\nloop invariant i104: i28;\nloop invariant i105: i29;\nloop invariant i106: i30;\nloop invariant i107: i31;\nloop invariant i108: i32;\nloop invariant i109: i33;\nloop invariant i110: i34;\nloop invariant i111: i35;\nloop invariant i112: i36;\nloop invariant i113: i37;\nloop invariant i114: i38;\nloop invariant i115: i39;\nloop invariant i116: i40;\nloop invariant i117: i41;\nloop invariant i118: i42;\nloop invariant i119: i43;\nloop invariant i120: i44;\nloop invariant i121: i45;\nloop invariant i122: i46;\nloop invariant i123: i47;\nloop invariant i124: i48;\nloop invariant i125: i49;\nloop invariant i126: i50;\nloop invariant i127: i51;\nloop invariant i128: i52;\nloop invariant i129: i53;\nloop invariant i130: i54;\nloop invariant i131: i55;\nloop invariant i132: i56;\nloop invariant i133: i57;\nloop invariant i134: i58;\nloop invariant i135: i59;\nloop invariant i136: i60;\nloop invariant i137: i61;\nloop invariant i138: i62;\nloop invariant i139: i63;\nloop invariant i140: i64;\nloop invariant i141: i65;\nloop invariant i142: i66;\nloop invariant i143: i67;\nloop invariant i144: i68;\nloop invariant i145: i69;\nloop invariant i146: i70;\nloop invariant i147: i71;\nloop invariant i148: i72;\nloop invariant i149: i73;\nloop invariant i150: i74;\nloop invariant i151: i75;\nloop invariant i152: i76;\nloop invariant i153: i77;\nloop invariant i154: i78;\nloop invariant i155: i79;\nloop invariant i156: i80;\nloop invariant i157: i81;\nloop invariant i158: i82;\nloop invariant i159: i83;\nloop invariant i160: i84;\nloop invariant i161: i85;\nloop invariant i162: i86;\nloop invariant i163: i87;\nloop invariant i164: i88;\nloop invariant i165: i89;\nloop invariant i166: i90;\nloop invariant i167: i91;\nloop invariant i168: i92;\nloop invariant i169: i93;\nloop invariant i170: i94;\nloop invariant i171: i95;\nloop invariant i172: i96;\nloop invariant i173: i97;\nloop invariant i174: i98;\nloop invariant i175: i99;\nloop invariant i176: i100;\nloop invariant i177: i101;\nloop invariant i178: i102;\nloop invariant i179: i103;\nloop invariant i180: i104;\nloop invariant i181: i105;\nloop invariant i182: i106;\nloop invariant i183: i107;\nloop invariant i184: i108;\nloop invariant i185: i109;\nloop invariant i186: i110;\nloop invariant i187: i111;\nloop invariant i188: i112;\nloop invariant i189: i113;\nloop invariant i190: i114;\nloop invariant i191: i115;\nloop invariant i192: i116;\nloop invariant i193: i117;\nloop invariant i194: i118;\nloop invariant i195: i119;\nloop invariant i196: i120;\nloop invariant i197: i121;\nloop invariant i198: i122;\nloop invariant i199: i123;\nloop invariant i200: i124;\nloop invariant i201: i125;\nloop invariant i202: i126;\nloop invariant i203: i127;\nloop invariant i204: i128;\nloop invariant i205: i129;\nloop invariant i206: i130;\nloop invariant i207: i131;\nloop invariant i208: i132;\nloop invariant i209: i133;\nloop invariant i210: i134;\nloop invariant i211: i135;\nloop invariant i212: i136;\nloop invariant i213: i137;\nloop invariant i214: i138;\nloop invariant i215: i139;\nloop invariant i216: i140;\nloop invariant i217: i141;\nloop invariant i218: i142;\nloop invariant i219: i143;\nloop invariant i220: i144;\nloop invariant i221: i145;\nloop invariant i222: i146;\nloop invariant i223: i147;\nloop invariant i224: i148;\nloop invariant i225: i149;\nloop invariant i226: i150;\nloop invariant i227: i151;\nloop invariant i228: i152;\nloop invariant i229: i153;\nloop invariant i230: i154;\nloop invariant i231: i155;\nloop invariant i232: i156;\nloop invariant i233: i157;\nloop invariant i234: i158;\nloop invariant i235: 0 <= i < 2*k;\nloop invariant i236: n == (i/2);\nloop invariant i237: n == i/2;\n*/\nfor(i = 0; i < 2*k; i++) {\n        if (i % 2 == 0) {\n            n ++;\n        }\n    }\n    {;\n//@ assert(k < 0 || n == k);\n}\n\n    return 0;\n}",
            "combined_annotation_num_solver_calls": 175,
            "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int n = 0;\n    int k = unknown_int();\n    if (!(k <= LARGE_INT && k >= -LARGE_INT)) return 0;\n    /*@\n\n\nloop invariant i3: i % 2 == (i % 2 == 0) ==> i % 2 == 0;\nloop invariant i4: i % 2 == 0 ==> i % 2 == 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i18: i >= 0;\n\nloop invariant i20: n >= 0;\n\n\nloop invariant i23: n == k ==> i >= 0;\nloop invariant i24: n == k ==> i <= 2*k;\nloop invariant i25: n == k ==> n >= 0;\nloop invariant i26: n == k ==> n <= k;\nloop invariant i27: n == k ==> i >= 0 ==> i <= 2*k;\nloop invariant i28: n == k ==> i >= 0 ==> n >= 0;\nloop invariant i29: n == k ==> i >= 0 ==> n <= k;\nloop invariant i30: n == k ==> i <= 2*k ==> i >= 0;\nloop invariant i31: n == k ==> i <= 2*k ==> n >= 0;\nloop invariant i32: n == k ==> i <= 2*k ==> n <= k;\nloop invariant i33: n == k ==> n >= 0 ==> i >= 0;\nloop invariant i34: n == k ==> n >= 0 ==> i <= 2*k;\nloop invariant i35: n == k ==> n <= k ==> i >= 0;\nloop invariant i36: n == k ==> n <= k ==> i <= 2*k;\nloop invariant i37: n == k ==> i >= 0 ==> i <= 2*k ==> n >= 0;\nloop invariant i38: n == k ==> i >= 0 ==> i <= 2*k ==> n <= k;\nloop invariant i39: n == k ==> i >= 0 ==> n >= 0 ==> i <= 2*k;\nloop invariant i40: n == k ==> i >= 0 ==> n <= k ==> i <= 2*k;\nloop invariant i41: n == k ==> i <= 2*k ==> i >= 0 ==> n >= 0;\nloop invariant i42: n == k ==> i <= 2*k ==> i >= 0 ==> n <= k;\nloop invariant i43: n == k ==> i <= 2*k ==> n >= 0 ==> i >= 0;\nloop invariant i44: n == k ==> i <= 2*k ==> n <= k ==> i >= 0;\nloop invariant i45: n == k ==> n >= 0 ==> i >= 0 ==> i <= 2*k;\nloop invariant i46: n == k ==> n >= 0 ==> i >= 0 ==> n <= k;\nloop invariant i47: n == k ==> n >= 0 ==> i <= 2*k ==> n >= 0;\nloop invariant i48: n == k ==> n >= 0 ==> i <= 2*k ==> n <= k;\nloop invariant i49: n == k ==> n <= k ==> i >= 0 ==> i <= 2*k;\nloop invariant i50: n == k ==> n <= k ==> i >= 0 ==> n >= 0;\nloop invariant i51: n == k ==> n <= k ==> i <= 2*k ==> n >= 0;\nloop invariant i52: n == k ==> n <= k ==> i <= 2*k ==> n <= k;\nloop invariant i53: n == k ==> i >= 0 ==> i <= 2*k ==> n >= 0 ==> n <= k;\nloop invariant i54: n == k ==> i >= 0 ==> i <= 2*k ==> n <= k ==> n >= 0;\nloop invariant i55: n == k ==> i >= 0 ==> n >= 0 ==> i <= 2*k ==> n <= k;\nloop invariant i56: n == k ==> i >= 0 ==> n <= k ==> i <= 2*k ==> n >= 0;\nloop invariant i57: n == k ==> i <= 2*k ==> i >= 0 ==> n >= 0 ==> n <= k;\nloop invariant i58: n == k ==> i <= 2*k ==> i >= 0 ==> n <= k ==> n >= 0;\nloop invariant i59: n == k ==> i <= 2*k ==> n >= 0 ==> i >= 0 ==> n <= k;\n\n\n\n\nloop invariant i64: ( i % 2 == 0 ) ==> ( n == i / 2 );\n\nloop invariant i66: ( k <= LARGE_INT ) && ( k >= -LARGE_INT );\n\n\n\n\nloop invariant i71: k >= -LARGE_INT;\n\n\nloop invariant i74: i == 2*k ==> n == k;\n\n\nloop invariant i77: (i % 2 == 0 ==> n == i / 2);\nloop invariant i78: (i % 2 != 0 ==> n == i / 2 + 1);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nfor(i = 0; i < 2*k; i++) {\n        if (i % 2 == 0) {\n            n ++;\n        }\n    }\n    {;\n//@ assert(k < 0 || n == k);\n}\n\n    return 0;\n}",
            "checker_output_after_prune": false
        },
        {
            "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.v.c",
            "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  int v1, v2, v3;\n  for(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
            "success": false,
            "annotation_blocks": [
                "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant 0 < i ==> v1 == v2 && v2 == v3 ==> v1 == v2 == v3;\nloop invariant sn == i * a;\nloop invariant v1 == v2 == v3 ==> sn == SIZE * a;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant sn >= 0;\nloop invariant sn <= SIZE*a;\nloop invariant sn == (i-1)*a;\nloop invariant v1 >= -1000000;\nloop invariant v1 <= 1000000;\nloop invariant v2 >= -1000000;\nloop invariant v2 <= 1000000;\nloop invariant v3 >= -1000000;\nloop invariant v3 <= 1000000;\nloop invariant v1 == -1000000 ==> sn == 0;\nloop invariant v1 == -1000000 ==> i == 0;\nloop invariant v1 == 1000000 ==> sn == SIZE*a;\nloop invariant v1 == 1000000 ==> i == SIZE+1;\nloop invariant v2 == -1000000 ==> sn == 0;\nloop invariant v2 == -1000000 ==> i == 0;\nloop invariant v2 == 1000000 ==> sn == SIZE*a;\nloop invariant v2 == 1000000 ==> i == SIZE+1;\nloop invariant v3 == -1000000 ==> sn == 0;\nloop invariant v3 == -1000000 ==> i == 0;\nloop invariant v3 == 1000000 ==> sn == SIZE*a;\nloop invariant v3 == 1000000 ==> i == SIZE+1;\nloop invariant sn == SIZE*a ==> v1 == 1000000;\nloop invariant sn == SIZE*a ==> v2 == 1000000;\nloop invariant sn == SIZE*a ==> v3 == 1000000;\nloop invariant sn == 0 ==> v1 == -1000000;\nloop invariant sn == 0 ==> v2 == -1000000;\nloop invariant sn == 0 ==> v3 == -1000000;\nloop invariant sn == SIZE*a ==> i == SIZE+1;\nloop invariant sn == 0 ==> i == 0;\nloop invariant sn == SIZE*a ==> v1 == 1000000;\nloop invariant sn == SIZE*a ==> v2 == 1000000;\nloop invariant sn == SIZE*a ==> v3 == 1000000;\nloop invariant sn == 0 ==> v1 == -1000000;\nloop invariant sn == 0 ==> v2 == -1000000;\nloop invariant sn == 0 ==> v3 == -1000000;\nloop invariant sn == SIZE*a ==> i == SIZE+1;\nloop invariant sn == 0 ==> i == 0;\nloop invariant sn == SIZE*a ==> v1 == 1000000;\nloop invariant sn == SIZE*a ==> v2 == 1000000;\nloop invariant sn == SIZE*a ==> v3 == 1000000;\nloop invariant sn == 0 ==> v1 == -1000000;\nloop invariant sn == 0 ==> v2 == -1000000;\nloop invariant sn == 0 ==> v3 == -1000000;\nloop invariant sn == SIZE*a ==> i == SIZE+1;\nloop invariant sn == 0 ==> i == 0;\nloop invariant sn == SIZE*a ==> v1 == 1000000;\nloop invariant sn == SIZE*a ==> v2 == 1000000;\nloop invariant sn == SIZE*a ==> v3 == 1000000;\nloop invariant sn == 0 ==> v1 == -1000000;\nloop invariant sn == 0 ==> v2 == -1000000;\nloop invariant sn == 0 ==> v3 == -1000000;\nloop invariant sn == SIZE*a ==> i == SIZE+1;\nloop invariant sn == 0 ==> i == 0;\nloop invariant sn == SIZE*a ==> v1 == 1000000;\nloop invariant sn == SIZE*a ==> v2 == 1000000;\nloop invariant sn == SIZE*a ==> v3 == 1000000;\nloop invariant sn == 0 ==> v1 == -1000000;\nloop invariant sn == 0 ==> v2 == -1000000;\n*/\n```",
                "```\n/*@\nloop invariant 1 <= sn <= SIZE * a;\nloop invariant 1 <= i <= SIZE + 1;\nloop invariant 0 <= v1 <= 1;\nloop invariant 0 <= v2 <= 1;\nloop invariant 0 <= v3 <= 1;\nloop invariant a == 1;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= sn <= SIZE*a;\nloop invariant 0 <= SIZE;\nloop invariant 1 <= i <= SIZE+1;\nloop invariant 0 <= v1 <= SIZE*a;\nloop invariant 0 <= v2 <= SIZE*a;\nloop invariant 0 <= v3 <= SIZE*a;\nloop invariant sn == (SIZE+1)*a if i == SIZE+1;\nloop invariant sn == 0 if i == 1;\nloop invariant sn == 0 if SIZE == 0;\nloop invariant sn == 0 if SIZE == -1;\nloop invariant sn == 0 if SIZE == -2;\nloop invariant sn == 0 if SIZE == -3;\nloop invariant sn == 0 if SIZE == -4;\nloop invariant sn == 0 if SIZE == -5;\nloop invariant sn == 0 if SIZE == -6;\nloop invariant sn == 0 if SIZE == -7;\nloop invariant sn == 0 if SIZE == -8;\nloop invariant sn == 0 if SIZE == -9;\nloop invariant sn == 0 if SIZE == -10;\nloop invariant sn == 0 if SIZE == -11;\nloop invariant sn == 0 if SIZE == -12;\nloop invariant sn == 0 if SIZE == -13;\nloop invariant sn == 0 if SIZE == -14;\nloop invariant sn == 0 if SIZE == -15;\nloop invariant sn == 0 if SIZE == -16;\nloop invariant sn == 0 if SIZE == -17;\nloop invariant sn == 0 if SIZE == -18;\nloop invariant sn == 0 if SIZE == -19;\nloop invariant sn == 0 if SIZE == -20;\nloop invariant sn == 0 if SIZE == -21;\nloop invariant sn == 0 if SIZE == -22;\nloop invariant sn == 0 if SIZE == -23;\nloop invariant sn == 0 if SIZE == -24;\nloop invariant sn == 0 if SIZE == -25;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= sn <= SIZE * a; loop invariant v1 >= 0; loop invariant v2 >= 0; loop invariant v3 >= 0; loop invariant SIZE >= 0; loop invariant i >= 1; loop invariant i <= SIZE + 1; loop invariant sn + a == SIZE * a; loop invariant sn == SIZE * a; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant sn == i * a;\nloop invariant 0 <= v1 <= 1;\nloop invariant 0 <= v2 <= 1;\nloop invariant 0 <= v3 <= 1;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant sn == i * a;\nloop invariant -SIZE * a <= sn <= SIZE * a;\nloop invariant v1, v2, v3 are non-deterministic;\nloop invariant v1, v2, v3 are not modified by the loop;\nloop invariant v1 <= v1';\nloop invariant v2 <= v2';\nloop invariant v3 <= v3';\nloop invariant i == SIZE ==> sn == SIZE * a;\nloop invariant i < SIZE ==> sn < SIZE * a;\nloop invariant i == 1 ==> sn == a;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant 0 <= sn <= (SIZE * a);\n*/\n```",
                "```\n/*@\nloop invariant 1 <= i <= SIZE;\nloop invariant 0 <= sn <= SIZE*a;\nloop invariant v1 <= SIZE;\nloop invariant v2 <= SIZE;\nloop invariant v3 <= SIZE;\nloop invariant (sn == SIZE*a) ==> (v1 == SIZE && v2 == SIZE && v3 == SIZE);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= sn <= SIZE * a;\nloop invariant 1 <= i <= SIZE + 1;\nloop invariant v1 = unknown_int();\nloop invariant v2 = unknown_int();\nloop invariant v3 = unknown_int();\nloop invariant sn == i * a - a;\nloop invariant sn == SIZE * a || sn == 0;\nloop invariant sn == i * a - a;\nloop invariant 0 <= sn <= SIZE * a;\nloop invariant 1 <= i <= SIZE + 1;\nloop invariant v1 = unknown_int();\nloop invariant v2 = unknown_int();\nloop invariant v3 = unknown_int();\nloop invariant sn == SIZE * a || sn == 0;\nloop invariant sn == i * a - a;\nloop invariant 0 <= sn <= SIZE * a;\nloop invariant 1 <= i <= SIZE + 1;\nloop invariant v1 = unknown_int();\nloop invariant v2 = unknown_int();\nloop invariant v3 = unknown_int();\n*/\n```",
                "```\n/*@\nloop invariant 1 <= i <= SIZE;\nloop invariant 0 <= v1;\nloop invariant 0 <= v2;\nloop invariant 0 <= v3;\nloop invariant sn == (i - 1) * a;\nloop invariant sn == 0 ==> i == 1;\nloop invariant v1 == 0 ==> i == 1;\nloop invariant v2 == 0 ==> i == 1;\nloop invariant v3 == 0 ==> i == 1;\nloop invariant v1 == 0 ==> sn == 0;\nloop invariant v2 == 0 ==> sn == 0;\nloop invariant v3 == 0 ==> sn == 0;\nloop invariant sn == SIZE * a ==> i == SIZE + 1;\nloop invariant sn == 0 ==> i == 1;\nloop invariant sn == 0 ==> v1 == 0;\nloop invariant sn == 0 ==> v2 == 0;\nloop invariant sn == 0 ==> v3 == 0;\nloop invariant sn == SIZE * a ==> v1 == 0;\nloop invariant sn == SIZE * a ==> v2 == 0;\nloop invariant sn == SIZE * a ==> v3 == 0;\nloop invariant sn == SIZE * a ==> i == SIZE + 1;\nloop invariant v1 == 0 ==> sn == 0;\nloop invariant v2 == 0 ==> sn == 0;\nloop invariant v3 == 0 ==> sn == 0;\nloop invariant sn == SIZE * a ==> v1 == 0;\nloop invariant sn == SIZE * a ==> v2 == 0;\nloop invariant sn == SIZE * a ==> v3 == 0;\nloop invariant sn == 0 ==> i == 1;\nloop invariant sn == 0 ==> v1 == 0;\nloop invariant sn == 0 ==> v2 == 0;\nloop invariant sn == 0 ==> v3 == 0;\nloop invariant sn == SIZE * a ==> i == SIZE + 1;\nloop invariant sn == SIZE * a ==> v1 == 0;\nloop invariant sn == SIZE * a ==> v2 == 0;\nloop invariant sn == SIZE * a ==> v3 == 0;\nloop invariant sn == 0 ==> i == 1;\nloop invariant sn == 0 ==> v1 == 0;\nloop invariant sn == 0 ==> v2 == 0;\nloop invariant sn == 0 ==> v3 == 0;\nloop invariant sn == SIZE * a ==> i == SIZE + 1;\nloop invariant sn == SIZE * a ==> v1 == 0;\nloop invariant sn == SIZE * a ==> v2 == 0;\nloop invariant sn == SIZE * a ==> v3 == 0;\nloop invariant sn == 0 ==> i == 1;\nloop invariant sn == 0 ==> v1 == 0;\nloop invariant sn == 0 ==> v2 == 0;\nloop invariant sn == 0 ==> v3 == 0;\nloop invariant sn == SIZE * a ==> i == SIZE + 1;\nloop invariant sn == SIZE * a ==> v1 == 0;\nloop invariant sn == SIZE * a ==> v2 == 0;\nloop invariant sn == SIZE * a ==> v3 == 0;\nloop invariant sn == 0 ==> i == 1;\nloop invariant sn == 0 ==> v1 == 0;\nloop invariant sn == 0 ==> v2 == 0;\nloop invariant sn == 0 ==> v3 == 0;\nloop invariant sn == SIZE * a ==> i == SIZE + 1;\nloop invariant sn == SIZE * a ==> v1 == 0;\nloop invariant sn == SIZE * a ==> v2 == 0;\nloop invariant sn == SIZE * a ==> v3 == 0;\nloop invariant sn == 0 ==> i == 1;\nloop invariant sn == 0 ==> v1 == 0;\nloop invariant sn == 0 ==> v2 == 0;\nloop invariant sn == 0 ==> v3 == 0;\nloop invariant sn == SIZE * a ==> i == SIZE + 1;\nloop invariant sn == SIZE * a ==> v1 == 0;\nloop invariant sn == SIZE * a ==> v2 == 0;\nloop invariant sn == SIZE * a ==> v3 == 0;\nloop invariant sn == 0 ==> i == 1;\nloop invariant sn == 0 ==> v1 == 0;\nloop invariant sn == 0 ==> v2 == 0;\nloop invariant sn == 0 ==> v3 == 0;\nloop invariant sn == SIZE * a ==> i == SIZE + 1;\nloop invariant sn == SIZE * a ==> v1 == 0;\nloop invariant sn == SIZE * a ==> v2 == 0;\nloop invariant sn == SIZE * a ==> v3 == 0;\nloop invariant sn == 0 ==> i == 1;\n*/\n```",
                "```\n/*@\nloop invariant 1 <= SIZE <= 100000;\nloop invariant 0 <= sn <= SIZE*a;\nloop invariant 0 <= i <= SIZE;\nloop invariant a == 1;\nloop invariant v1 == unknown_int();\nloop invariant v2 == unknown_int();\nloop invariant v3 == unknown_int();\nloop invariant i <= SIZE ==> i > 0;\nloop invariant i > SIZE ==> i == SIZE + 1;\nloop invariant SIZE == 0 ==> sn == 0;\nloop invariant SIZE > 0 ==> sn > 0;\nloop invariant SIZE > 0 ==> a > 0;\n*/\n```",
                "```\n/*@\n\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant sn >= 0;\nloop invariant sn <= SIZE*a;\nloop invariant v1 <= 1;\nloop invariant v2 <= 1;\nloop invariant v3 <= 1;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\n*/\n```",
                "```\n/*@\nloop invariant 1 <= sn <= SIZE*a;\nloop invariant 1 <= i <= SIZE;\nloop invariant v1 <= SIZE;\nloop invariant v2 <= SIZE;\nloop invariant v3 <= SIZE;\nloop invariant sn == SIZE*a* (i/(SIZE+1));\n*/\n```"
            ],
            "completions": [
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant 0 < i ==> v1 == v2 && v2 == v3 ==> v1 == v2 == v3;\nloop invariant sn == i * a;\nloop invariant v1 == v2 == v3 ==> sn == SIZE * a;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= SIZE is preserved but not established.\nloop invariant 0 < i ==> v1 == v2 && v2 == v3 ==> v1 == v2 == v3 is partially proven to be inductive.\nloop invariant sn == i * a is preserved but not established.\nloop invariant v1 == v2 == v3 ==> sn == SIZE * a is partially proven to be inductive.\nAssertion sn == SIZE * 1 || sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  int v1, v2, v3;\n  /*@\n\nloop invariant i2: 0 < i ==> v1 == v2 && v2 == v3 ==> v1 == v2 == v3;\n\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant sn >= 0;\nloop invariant sn <= SIZE*a;\nloop invariant sn == (i-1)*a;\nloop invariant v1 >= -1000000;\nloop invariant v1 <= 1000000;\nloop invariant v2 >= -1000000;\nloop invariant v2 <= 1000000;\nloop invariant v3 >= -1000000;\nloop invariant v3 <= 1000000;\nloop invariant v1 == -1000000 ==> sn == 0;\nloop invariant v1 == -1000000 ==> i == 0;\nloop invariant v1 == 1000000 ==> sn == SIZE*a;\nloop invariant v1 == 1000000 ==> i == SIZE+1;\nloop invariant v2 == -1000000 ==> sn == 0;\nloop invariant v2 == -1000000 ==> i == 0;\nloop invariant v2 == 1000000 ==> sn == SIZE*a;\nloop invariant v2 == 1000000 ==> i == SIZE+1;\nloop invariant v3 == -1000000 ==> sn == 0;\nloop invariant v3 == -1000000 ==> i == 0;\nloop invariant v3 == 1000000 ==> sn == SIZE*a;\nloop invariant v3 == 1000000 ==> i == SIZE+1;\nloop invariant sn == SIZE*a ==> v1 == 1000000;\nloop invariant sn == SIZE*a ==> v2 == 1000000;\nloop invariant sn == SIZE*a ==> v3 == 1000000;\nloop invariant sn == 0 ==> v1 == -1000000;\nloop invariant sn == 0 ==> v2 == -1000000;\nloop invariant sn == 0 ==> v3 == -1000000;\nloop invariant sn == SIZE*a ==> i == SIZE+1;\nloop invariant sn == 0 ==> i == 0;\nloop invariant sn == SIZE*a ==> v1 == 1000000;\nloop invariant sn == SIZE*a ==> v2 == 1000000;\nloop invariant sn == SIZE*a ==> v3 == 1000000;\nloop invariant sn == 0 ==> v1 == -1000000;\nloop invariant sn == 0 ==> v2 == -1000000;\nloop invariant sn == 0 ==> v3 == -1000000;\nloop invariant sn == SIZE*a ==> i == SIZE+1;\nloop invariant sn == 0 ==> i == 0;\nloop invariant sn == SIZE*a ==> v1 == 1000000;\nloop invariant sn == SIZE*a ==> v2 == 1000000;\nloop invariant sn == SIZE*a ==> v3 == 1000000;\nloop invariant sn == 0 ==> v1 == -1000000;\nloop invariant sn == 0 ==> v2 == -1000000;\nloop invariant sn == 0 ==> v3 == -1000000;\nloop invariant sn == SIZE*a ==> i == SIZE+1;\nloop invariant sn == 0 ==> i == 0;\nloop invariant sn == SIZE*a ==> v1 == 1000000;\nloop invariant sn == SIZE*a ==> v2 == 1000000;\nloop invariant sn == SIZE*a ==> v3 == 1000000;\nloop invariant sn == 0 ==> v1 == -1000000;\nloop invariant sn == 0 ==> v2 == -1000000;\nloop invariant sn == 0 ==> v3 == -1000000;\nloop invariant sn == SIZE*a ==> i == SIZE+1;\nloop invariant sn == 0 ==> i == 0;\nloop invariant sn == SIZE*a ==> v1 == 1000000;\nloop invariant sn == SIZE*a ==> v2 == 1000000;\nloop invariant sn == SIZE*a ==> v3 == 1000000;\nloop invariant sn == 0 ==> v1 == -1000000;\nloop invariant sn == 0 ==> v2 == -1000000;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= SIZE is preserved but not established.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn <= SIZE*a is partially proven to be inductive.\nloop invariant sn == (i-1)*a is partially proven to be inductive.\nloop invariant v1 >= -1000000 is preserved but not established.\nloop invariant v1 <= 1000000 is preserved but not established.\nloop invariant v2 >= -1000000 is preserved but not established.\nloop invariant v2 <= 1000000 is preserved but not established.\nloop invariant v3 >= -1000000 is preserved but not established.\nloop invariant v3 <= 1000000 is preserved but not established.\nloop invariant v1 == -1000000 ==> sn == 0 is partially proven to be inductive.\nloop invariant v1 == -1000000 ==> i == 0 is preserved but not established.\nloop invariant v1 == 1000000 ==> sn == SIZE*a is preserved but not established.\nloop invariant v1 == 1000000 ==> i == SIZE+1 is partially proven to be inductive.\nloop invariant v2 == -1000000 ==> sn == 0 is partially proven to be inductive.\nloop invariant v2 == -1000000 ==> i == 0 is preserved but not established.\nloop invariant v2 == 1000000 ==> sn == SIZE*a is preserved but not established.\nloop invariant v2 == 1000000 ==> i == SIZE+1 is partially proven to be inductive.\nloop invariant v3 == -1000000 ==> sn == 0 is partially proven to be inductive.\nloop invariant v3 == -1000000 ==> i == 0 is preserved but not established.\nloop invariant v3 == 1000000 ==> sn == SIZE*a is preserved but not established.\nloop invariant v3 == 1000000 ==> i == SIZE+1 is partially proven to be inductive.\nloop invariant sn == SIZE*a ==> v1 == 1000000 is partially proven to be inductive.\nloop invariant sn == SIZE*a ==> v2 == 1000000 is partially proven to be inductive.\nloop invariant sn == SIZE*a ==> v3 == 1000000 is partially proven to be inductive.\nloop invariant sn == 0 ==> v1 == -1000000 is preserved but not established.\nloop invariant sn == 0 ==> v2 == -1000000 is partially proven to be inductive.\nloop invariant sn == 0 ==> v3 == -1000000 is partially proven to be inductive.\nloop invariant sn == SIZE*a ==> i == SIZE+1 is partially proven to be inductive.\nloop invariant sn == 0 ==> i == 0 is partially proven to be inductive.\nAssertion sn == SIZE * 1 || sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  int v1, v2, v3;\n  /*@\n\nloop invariant i2: sn >= 0;\n\nloop invariant i4: sn == (i-1)*a;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i29: sn == SIZE*a ==> i == SIZE+1;\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 1 <= sn <= SIZE * a;\nloop invariant 1 <= i <= SIZE + 1;\nloop invariant 0 <= v1 <= 1;\nloop invariant 0 <= v2 <= 1;\nloop invariant 0 <= v3 <= 1;\nloop invariant a == 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= sn <= SIZE * a is preserved but not established.\nloop invariant 1 <= i <= SIZE + 1 is partially proven to be inductive.\nloop invariant 0 <= v1 <= 1 is partially proven to be inductive.\nloop invariant 0 <= v2 <= 1 is partially proven to be inductive.\nloop invariant 0 <= v3 <= 1 is partially proven to be inductive.\nloop invariant a == 1 is partially proven to be inductive.\nAssertion sn == SIZE * 1 || sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  int v1, v2, v3;\n  /*@\n\n\n\n\n\nloop invariant i6: a == 1;\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 32,
                    "annotations": "```\n/*@\nloop invariant 0 <= sn <= SIZE*a;\nloop invariant 0 <= SIZE;\nloop invariant 1 <= i <= SIZE+1;\nloop invariant 0 <= v1 <= SIZE*a;\nloop invariant 0 <= v2 <= SIZE*a;\nloop invariant 0 <= v3 <= SIZE*a;\nloop invariant sn == (SIZE+1)*a if i == SIZE+1;\nloop invariant sn == 0 if i == 1;\nloop invariant sn == 0 if SIZE == 0;\nloop invariant sn == 0 if SIZE == -1;\nloop invariant sn == 0 if SIZE == -2;\nloop invariant sn == 0 if SIZE == -3;\nloop invariant sn == 0 if SIZE == -4;\nloop invariant sn == 0 if SIZE == -5;\nloop invariant sn == 0 if SIZE == -6;\nloop invariant sn == 0 if SIZE == -7;\nloop invariant sn == 0 if SIZE == -8;\nloop invariant sn == 0 if SIZE == -9;\nloop invariant sn == 0 if SIZE == -10;\nloop invariant sn == 0 if SIZE == -11;\nloop invariant sn == 0 if SIZE == -12;\nloop invariant sn == 0 if SIZE == -13;\nloop invariant sn == 0 if SIZE == -14;\nloop invariant sn == 0 if SIZE == -15;\nloop invariant sn == 0 if SIZE == -16;\nloop invariant sn == 0 if SIZE == -17;\nloop invariant sn == 0 if SIZE == -18;\nloop invariant sn == 0 if SIZE == -19;\nloop invariant sn == 0 if SIZE == -20;\nloop invariant sn == 0 if SIZE == -21;\nloop invariant sn == 0 if SIZE == -22;\nloop invariant sn == 0 if SIZE == -23;\nloop invariant sn == 0 if SIZE == -24;\nloop invariant sn == 0 if SIZE == -25;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 22: unexpected token 'if'",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  int v1, v2, v3;\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= sn <= SIZE * a; loop invariant v1 >= 0; loop invariant v2 >= 0; loop invariant v3 >= 0; loop invariant SIZE >= 0; loop invariant i >= 1; loop invariant i <= SIZE + 1; loop invariant sn + a == SIZE * a; loop invariant sn == SIZE * a; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= sn <= SIZE * a; loop invariant v1 >= 0; loop invariant v2 >= 0; loop invariant v3 >= 0; loop invariant SIZE >= 0; loop invariant i >= 1; loop invariant i <= SIZE + 1; loop invariant sn + a == SIZE * a; loop invariant sn == SIZE * a; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1 is preserved but not established.\nAssertion sn == SIZE * 1 || sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  int v1, v2, v3;\n  /*@\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant sn == i * a;\nloop invariant 0 <= v1 <= 1;\nloop invariant 0 <= v2 <= 1;\nloop invariant 0 <= v3 <= 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= SIZE is preserved but not established.\nloop invariant sn == i * a is preserved but not established.\nloop invariant 0 <= v1 <= 1 is partially proven to be inductive.\nloop invariant 0 <= v2 <= 1 is partially proven to be inductive.\nloop invariant 0 <= v3 <= 1 is partially proven to be inductive.\nAssertion sn == SIZE * 1 || sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  int v1, v2, v3;\n  /*@\n\n\n\n\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant sn == i * a;\nloop invariant -SIZE * a <= sn <= SIZE * a;\nloop invariant v1, v2, v3 are non-deterministic;\nloop invariant v1, v2, v3 are not modified by the loop;\nloop invariant v1 <= v1';\nloop invariant v2 <= v2';\nloop invariant v3 <= v3';\nloop invariant i == SIZE ==> sn == SIZE * a;\nloop invariant i < SIZE ==> sn < SIZE * a;\nloop invariant i == 1 ==> sn == a;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "No CSV output dump found from Frama-C",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  int v1, v2, v3;\n  /*@\nloop invariant i1: 0 <= i <= SIZE;\nloop invariant i2: sn == i * a;\nloop invariant i3: -SIZE * a <= sn <= SIZE * a;\nloop invariant i4: v1, v2, v3 are non-deterministic;\nloop invariant i5: v1, v2, v3 are not modified by the loop;\nloop invariant i6: v1 <= v1';\nloop invariant i7: v2 <= v2';\nloop invariant i8: v3 <= v3';\nloop invariant i9: i == SIZE ==> sn == SIZE * a;\nloop invariant i10: i < SIZE ==> sn < SIZE * a;\nloop invariant i11: i == 1 ==> sn == a;\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant 0 <= sn <= (SIZE * a);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= SIZE is neither established nor preserved.\nloop invariant 0 <= sn <= (SIZE * a) is established but not preserved.\nAssertion sn == SIZE * 1 || sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  int v1, v2, v3;\n  /*@\n\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 1 <= i <= SIZE;\nloop invariant 0 <= sn <= SIZE*a;\nloop invariant v1 <= SIZE;\nloop invariant v2 <= SIZE;\nloop invariant v3 <= SIZE;\nloop invariant (sn == SIZE*a) ==> (v1 == SIZE && v2 == SIZE && v3 == SIZE);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= i <= SIZE is neither established nor preserved.\nloop invariant 0 <= sn <= SIZE*a is established but not preserved.\nloop invariant v1 <= SIZE is neither established nor preserved.\nloop invariant v2 <= SIZE is neither established nor preserved.\nloop invariant v3 <= SIZE is neither established nor preserved.\nloop invariant (sn == SIZE*a) ==> (v1 == SIZE && v2 == SIZE && v3 == SIZE) is established but not preserved.\nAssertion sn == SIZE * 1 || sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  int v1, v2, v3;\n  /*@\n\n\n\n\n\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 7,
                    "annotations": "```\n/*@\nloop invariant 0 <= sn <= SIZE * a;\nloop invariant 1 <= i <= SIZE + 1;\nloop invariant v1 = unknown_int();\nloop invariant v2 = unknown_int();\nloop invariant v3 = unknown_int();\nloop invariant sn == i * a - a;\nloop invariant sn == SIZE * a || sn == 0;\nloop invariant sn == i * a - a;\nloop invariant 0 <= sn <= SIZE * a;\nloop invariant 1 <= i <= SIZE + 1;\nloop invariant v1 = unknown_int();\nloop invariant v2 = unknown_int();\nloop invariant v3 = unknown_int();\nloop invariant sn == SIZE * a || sn == 0;\nloop invariant sn == i * a - a;\nloop invariant 0 <= sn <= SIZE * a;\nloop invariant 1 <= i <= SIZE + 1;\nloop invariant v1 = unknown_int();\nloop invariant v2 = unknown_int();\nloop invariant v3 = unknown_int();\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 18: Assignment operators not allowed in annotations.",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  int v1, v2, v3;\n  /*@\n\n\n\n\n\nloop invariant i6: sn == i * a - a;\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 1 <= i <= SIZE;\nloop invariant 0 <= v1;\nloop invariant 0 <= v2;\nloop invariant 0 <= v3;\nloop invariant sn == (i - 1) * a;\nloop invariant sn == 0 ==> i == 1;\nloop invariant v1 == 0 ==> i == 1;\nloop invariant v2 == 0 ==> i == 1;\nloop invariant v3 == 0 ==> i == 1;\nloop invariant v1 == 0 ==> sn == 0;\nloop invariant v2 == 0 ==> sn == 0;\nloop invariant v3 == 0 ==> sn == 0;\nloop invariant sn == SIZE * a ==> i == SIZE + 1;\nloop invariant sn == 0 ==> i == 1;\nloop invariant sn == 0 ==> v1 == 0;\nloop invariant sn == 0 ==> v2 == 0;\nloop invariant sn == 0 ==> v3 == 0;\nloop invariant sn == SIZE * a ==> v1 == 0;\nloop invariant sn == SIZE * a ==> v2 == 0;\nloop invariant sn == SIZE * a ==> v3 == 0;\nloop invariant sn == SIZE * a ==> i == SIZE + 1;\nloop invariant v1 == 0 ==> sn == 0;\nloop invariant v2 == 0 ==> sn == 0;\nloop invariant v3 == 0 ==> sn == 0;\nloop invariant sn == SIZE * a ==> v1 == 0;\nloop invariant sn == SIZE * a ==> v2 == 0;\nloop invariant sn == SIZE * a ==> v3 == 0;\nloop invariant sn == 0 ==> i == 1;\nloop invariant sn == 0 ==> v1 == 0;\nloop invariant sn == 0 ==> v2 == 0;\nloop invariant sn == 0 ==> v3 == 0;\nloop invariant sn == SIZE * a ==> i == SIZE + 1;\nloop invariant sn == SIZE * a ==> v1 == 0;\nloop invariant sn == SIZE * a ==> v2 == 0;\nloop invariant sn == SIZE * a ==> v3 == 0;\nloop invariant sn == 0 ==> i == 1;\nloop invariant sn == 0 ==> v1 == 0;\nloop invariant sn == 0 ==> v2 == 0;\nloop invariant sn == 0 ==> v3 == 0;\nloop invariant sn == SIZE * a ==> i == SIZE + 1;\nloop invariant sn == SIZE * a ==> v1 == 0;\nloop invariant sn == SIZE * a ==> v2 == 0;\nloop invariant sn == SIZE * a ==> v3 == 0;\nloop invariant sn == 0 ==> i == 1;\nloop invariant sn == 0 ==> v1 == 0;\nloop invariant sn == 0 ==> v2 == 0;\nloop invariant sn == 0 ==> v3 == 0;\nloop invariant sn == SIZE * a ==> i == SIZE + 1;\nloop invariant sn == SIZE * a ==> v1 == 0;\nloop invariant sn == SIZE * a ==> v2 == 0;\nloop invariant sn == SIZE * a ==> v3 == 0;\nloop invariant sn == 0 ==> i == 1;\nloop invariant sn == 0 ==> v1 == 0;\nloop invariant sn == 0 ==> v2 == 0;\nloop invariant sn == 0 ==> v3 == 0;\nloop invariant sn == SIZE * a ==> i == SIZE + 1;\nloop invariant sn == SIZE * a ==> v1 == 0;\nloop invariant sn == SIZE * a ==> v2 == 0;\nloop invariant sn == SIZE * a ==> v3 == 0;\nloop invariant sn == 0 ==> i == 1;\nloop invariant sn == 0 ==> v1 == 0;\nloop invariant sn == 0 ==> v2 == 0;\nloop invariant sn == 0 ==> v3 == 0;\nloop invariant sn == SIZE * a ==> i == SIZE + 1;\nloop invariant sn == SIZE * a ==> v1 == 0;\nloop invariant sn == SIZE * a ==> v2 == 0;\nloop invariant sn == SIZE * a ==> v3 == 0;\nloop invariant sn == 0 ==> i == 1;\nloop invariant sn == 0 ==> v1 == 0;\nloop invariant sn == 0 ==> v2 == 0;\nloop invariant sn == 0 ==> v3 == 0;\nloop invariant sn == SIZE * a ==> i == SIZE + 1;\nloop invariant sn == SIZE * a ==> v1 == 0;\nloop invariant sn == SIZE * a ==> v2 == 0;\nloop invariant sn == SIZE * a ==> v3 == 0;\nloop invariant sn == 0 ==> i == 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= i <= SIZE is neither established nor preserved.\nloop invariant 0 <= v1 is neither established nor preserved.\nloop invariant 0 <= v2 is neither established nor preserved.\nloop invariant 0 <= v3 is neither established nor preserved.\nloop invariant sn == (i - 1) * a is partially proven to be inductive.\nloop invariant sn == 0 ==> i == 1 is partially proven to be inductive.\nloop invariant v1 == 0 ==> i == 1 is established but not preserved.\nloop invariant v2 == 0 ==> i == 1 is established but not preserved.\nloop invariant v3 == 0 ==> i == 1 is established but not preserved.\nloop invariant v1 == 0 ==> sn == 0 is partially proven to be inductive.\nloop invariant v2 == 0 ==> sn == 0 is partially proven to be inductive.\nloop invariant v3 == 0 ==> sn == 0 is partially proven to be inductive.\nloop invariant sn == SIZE * a ==> i == SIZE + 1 is partially proven to be inductive.\nloop invariant sn == 0 ==> v1 == 0 is preserved but not established.\nloop invariant sn == 0 ==> v2 == 0 is preserved but not established.\nloop invariant sn == 0 ==> v3 == 0 is preserved but not established.\nloop invariant sn == SIZE * a ==> v1 == 0 is partially proven to be inductive.\nloop invariant sn == SIZE * a ==> v2 == 0 is partially proven to be inductive.\nloop invariant sn == SIZE * a ==> v3 == 0 is partially proven to be inductive.\nAssertion sn == SIZE * 1 || sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  int v1, v2, v3;\n  /*@\n\n\n\n\nloop invariant i5: sn == (i - 1) * a;\nloop invariant i6: sn == 0 ==> i == 1;\n\n\n\n\n\n\nloop invariant i13: sn == SIZE * a ==> i == SIZE + 1;\n\n\n\n\n\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 8,
                    "annotations": "```\n/*@\nloop invariant 1 <= SIZE <= 100000;\nloop invariant 0 <= sn <= SIZE*a;\nloop invariant 0 <= i <= SIZE;\nloop invariant a == 1;\nloop invariant v1 == unknown_int();\nloop invariant v2 == unknown_int();\nloop invariant v3 == unknown_int();\nloop invariant i <= SIZE ==> i > 0;\nloop invariant i > SIZE ==> i == SIZE + 1;\nloop invariant SIZE == 0 ==> sn == 0;\nloop invariant SIZE > 0 ==> sn > 0;\nloop invariant SIZE > 0 ==> a > 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 20: unexpected token ')'",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  int v1, v2, v3;\n  /*@\n\n\n\nloop invariant i4: a == 1;\n\n\n\nloop invariant i8: i <= SIZE ==> i > 0;\n\nloop invariant i10: SIZE == 0 ==> sn == 0;\n\nloop invariant i12: SIZE > 0 ==> a > 0;\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 1,
                    "annotations": "```\n/*@\n\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 16: unexpected token ''",
                    "houdini_error": "No annotations found"
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant sn >= 0;\nloop invariant sn <= SIZE*a;\nloop invariant v1 <= 1;\nloop invariant v2 <= 1;\nloop invariant v3 <= 1;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= SIZE is neither established nor preserved.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn <= SIZE*a is established but not preserved.\nloop invariant v1 <= 1 is neither established nor preserved.\nloop invariant v2 <= 1 is neither established nor preserved.\nloop invariant v3 <= 1 is neither established nor preserved.\nloop invariant v1 >= 0 is neither established nor preserved.\nloop invariant v2 >= 0 is neither established nor preserved.\nloop invariant v3 >= 0 is neither established nor preserved.\nAssertion sn == SIZE * 1 || sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  int v1, v2, v3;\n  /*@\n\nloop invariant i2: sn >= 0;\n\n\n\n\n\n\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 1 <= sn <= SIZE*a;\nloop invariant 1 <= i <= SIZE;\nloop invariant v1 <= SIZE;\nloop invariant v2 <= SIZE;\nloop invariant v3 <= SIZE;\nloop invariant sn == SIZE*a* (i/(SIZE+1));\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= sn <= SIZE*a is preserved but not established.\nloop invariant 1 <= i <= SIZE is partially proven to be inductive.\nloop invariant v1 <= SIZE is partially proven to be inductive.\nloop invariant v2 <= SIZE is partially proven to be inductive.\nloop invariant v3 <= SIZE is partially proven to be inductive.\nloop invariant sn == SIZE*a* (i/(SIZE+1)) is partially proven to be inductive.\nAssertion sn == SIZE * 1 || sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  int v1, v2, v3;\n  /*@\n\n\n\n\n\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                }
            ],
            "checker_output_for_combined_annotations": false,
            "checker_message_for_combined_annotations": "No CSV output dump found from Frama-C",
            "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  int v1, v2, v3;\n  /*@\nloop invariant i1: 0 <= i <= SIZE;\nloop invariant i2: 0 < i ==> v1 == v2 && v2 == v3 ==> v1 == v2 == v3;\nloop invariant i3: sn == i * a;\nloop invariant i4: v1 == v2 == v3 ==> sn == SIZE * a;\nloop invariant i5: sn >= 0;\nloop invariant i6: sn <= SIZE*a;\nloop invariant i7: sn == (i-1)*a;\nloop invariant i8: v1 >= -1000000;\nloop invariant i9: v1 <= 1000000;\nloop invariant i10: v2 >= -1000000;\nloop invariant i11: v2 <= 1000000;\nloop invariant i12: v3 >= -1000000;\nloop invariant i13: v3 <= 1000000;\nloop invariant i14: v1 == -1000000 ==> sn == 0;\nloop invariant i15: v1 == -1000000 ==> i == 0;\nloop invariant i16: v1 == 1000000 ==> sn == SIZE*a;\nloop invariant i17: v1 == 1000000 ==> i == SIZE+1;\nloop invariant i18: v2 == -1000000 ==> sn == 0;\nloop invariant i19: v2 == -1000000 ==> i == 0;\nloop invariant i20: v2 == 1000000 ==> sn == SIZE*a;\nloop invariant i21: v2 == 1000000 ==> i == SIZE+1;\nloop invariant i22: v3 == -1000000 ==> sn == 0;\nloop invariant i23: v3 == -1000000 ==> i == 0;\nloop invariant i24: v3 == 1000000 ==> sn == SIZE*a;\nloop invariant i25: v3 == 1000000 ==> i == SIZE+1;\nloop invariant i26: sn == SIZE*a ==> v1 == 1000000;\nloop invariant i27: sn == SIZE*a ==> v2 == 1000000;\nloop invariant i28: sn == SIZE*a ==> v3 == 1000000;\nloop invariant i29: sn == 0 ==> v1 == -1000000;\nloop invariant i30: sn == 0 ==> v2 == -1000000;\nloop invariant i31: sn == 0 ==> v3 == -1000000;\nloop invariant i32: sn == SIZE*a ==> i == SIZE+1;\nloop invariant i33: sn == 0 ==> i == 0;\nloop invariant i34: 1 <= sn <= SIZE * a;\nloop invariant i35: 1 <= i <= SIZE + 1;\nloop invariant i36: 0 <= v1 <= 1;\nloop invariant i37: 0 <= v2 <= 1;\nloop invariant i38: 0 <= v3 <= 1;\nloop invariant i39: a == 1;\nloop invariant i40: 0 <= sn <= SIZE*a;\nloop invariant i41: 0 <= SIZE;\nloop invariant i42: 1 <= i <= SIZE+1;\nloop invariant i43: 0 <= v1 <= SIZE*a;\nloop invariant i44: 0 <= v2 <= SIZE*a;\nloop invariant i45: 0 <= v3 <= SIZE*a;\nloop invariant i46: sn == (SIZE+1)*a if i == SIZE+1;\nloop invariant i47: sn == 0 if i == 1;\nloop invariant i48: sn == 0 if SIZE == 0;\nloop invariant i49: sn == 0 if SIZE == -1;\nloop invariant i50: sn == 0 if SIZE == -2;\nloop invariant i51: sn == 0 if SIZE == -3;\nloop invariant i52: sn == 0 if SIZE == -4;\nloop invariant i53: sn == 0 if SIZE == -5;\nloop invariant i54: sn == 0 if SIZE == -6;\nloop invariant i55: sn == 0 if SIZE == -7;\nloop invariant i56: sn == 0 if SIZE == -8;\nloop invariant i57: sn == 0 if SIZE == -9;\nloop invariant i58: sn == 0 if SIZE == -10;\nloop invariant i59: sn == 0 if SIZE == -11;\nloop invariant i60: sn == 0 if SIZE == -12;\nloop invariant i61: sn == 0 if SIZE == -13;\nloop invariant i62: sn == 0 if SIZE == -14;\nloop invariant i63: sn == 0 if SIZE == -15;\nloop invariant i64: sn == 0 if SIZE == -16;\nloop invariant i65: sn == 0 if SIZE == -17;\nloop invariant i66: sn == 0 if SIZE == -18;\nloop invariant i67: sn == 0 if SIZE == -19;\nloop invariant i68: sn == 0 if SIZE == -20;\nloop invariant i69: sn == 0 if SIZE == -21;\nloop invariant i70: sn == 0 if SIZE == -22;\nloop invariant i71: sn == 0 if SIZE == -23;\nloop invariant i72: sn == 0 if SIZE == -24;\nloop invariant i73: sn == 0 if SIZE == -25;\nloop invariant i74: 0 <= sn <= SIZE * a; loop invariant v1 >= 0; loop invariant v2 >= 0; loop invariant v3 >= 0; loop invariant SIZE >= 0; loop invariant i >= 1; loop invariant i <= SIZE + 1; loop invariant sn + a == SIZE * a; loop invariant sn == SIZE * a; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1;\nloop invariant i75: -SIZE * a <= sn <= SIZE * a;\nloop invariant i76: v1, v2, v3 are non-deterministic;\nloop invariant i77: v1, v2, v3 are not modified by the loop;\nloop invariant i78: v1 <= v1';\nloop invariant i79: v2 <= v2';\nloop invariant i80: v3 <= v3';\nloop invariant i81: i == SIZE ==> sn == SIZE * a;\nloop invariant i82: i < SIZE ==> sn < SIZE * a;\nloop invariant i83: i == 1 ==> sn == a;\nloop invariant i84: 0 <= sn <= (SIZE * a);\nloop invariant i85: 1 <= i <= SIZE;\nloop invariant i86: v1 <= SIZE;\nloop invariant i87: v2 <= SIZE;\nloop invariant i88: v3 <= SIZE;\nloop invariant i89: (sn == SIZE*a) ==> (v1 == SIZE && v2 == SIZE && v3 == SIZE);\nloop invariant i90: 0 <= sn <= SIZE * a;\nloop invariant i91: v1 = unknown_int();\nloop invariant i92: v2 = unknown_int();\nloop invariant i93: v3 = unknown_int();\nloop invariant i94: sn == i * a - a;\nloop invariant i95: sn == SIZE * a || sn == 0;\nloop invariant i96: 0 <= v1;\nloop invariant i97: 0 <= v2;\nloop invariant i98: 0 <= v3;\nloop invariant i99: sn == (i - 1) * a;\nloop invariant i100: sn == 0 ==> i == 1;\nloop invariant i101: v1 == 0 ==> i == 1;\nloop invariant i102: v2 == 0 ==> i == 1;\nloop invariant i103: v3 == 0 ==> i == 1;\nloop invariant i104: v1 == 0 ==> sn == 0;\nloop invariant i105: v2 == 0 ==> sn == 0;\nloop invariant i106: v3 == 0 ==> sn == 0;\nloop invariant i107: sn == SIZE * a ==> i == SIZE + 1;\nloop invariant i108: sn == 0 ==> v1 == 0;\nloop invariant i109: sn == 0 ==> v2 == 0;\nloop invariant i110: sn == 0 ==> v3 == 0;\nloop invariant i111: sn == SIZE * a ==> v1 == 0;\nloop invariant i112: sn == SIZE * a ==> v2 == 0;\nloop invariant i113: sn == SIZE * a ==> v3 == 0;\nloop invariant i114: 1 <= SIZE <= 100000;\nloop invariant i115: v1 == unknown_int();\nloop invariant i116: v2 == unknown_int();\nloop invariant i117: v3 == unknown_int();\nloop invariant i118: i <= SIZE ==> i > 0;\nloop invariant i119: i > SIZE ==> i == SIZE + 1;\nloop invariant i120: SIZE == 0 ==> sn == 0;\nloop invariant i121: SIZE > 0 ==> sn > 0;\nloop invariant i122: SIZE > 0 ==> a > 0;\nloop invariant i123: v1 <= 1;\nloop invariant i124: v2 <= 1;\nloop invariant i125: v3 <= 1;\nloop invariant i126: v1 >= 0;\nloop invariant i127: v2 >= 0;\nloop invariant i128: v3 >= 0;\nloop invariant i129: 1 <= sn <= SIZE*a;\nloop invariant i130: sn == SIZE*a* (i/(SIZE+1));\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
            "combined_annotation_num_solver_calls": 2,
            "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  int v1, v2, v3;\n  /*@\nloop invariant i1: 0 <= i <= SIZE;\nloop invariant i2: 0 < i ==> v1 == v2 && v2 == v3 ==> v1 == v2 == v3;\nloop invariant i3: sn == i * a;\nloop invariant i4: v1 == v2 == v3 ==> sn == SIZE * a;\nloop invariant i5: sn >= 0;\nloop invariant i6: sn <= SIZE*a;\nloop invariant i7: sn == (i-1)*a;\nloop invariant i8: v1 >= -1000000;\nloop invariant i9: v1 <= 1000000;\nloop invariant i10: v2 >= -1000000;\nloop invariant i11: v2 <= 1000000;\nloop invariant i12: v3 >= -1000000;\nloop invariant i13: v3 <= 1000000;\nloop invariant i14: v1 == -1000000 ==> sn == 0;\nloop invariant i15: v1 == -1000000 ==> i == 0;\nloop invariant i16: v1 == 1000000 ==> sn == SIZE*a;\nloop invariant i17: v1 == 1000000 ==> i == SIZE+1;\nloop invariant i18: v2 == -1000000 ==> sn == 0;\nloop invariant i19: v2 == -1000000 ==> i == 0;\nloop invariant i20: v2 == 1000000 ==> sn == SIZE*a;\nloop invariant i21: v2 == 1000000 ==> i == SIZE+1;\nloop invariant i22: v3 == -1000000 ==> sn == 0;\nloop invariant i23: v3 == -1000000 ==> i == 0;\nloop invariant i24: v3 == 1000000 ==> sn == SIZE*a;\nloop invariant i25: v3 == 1000000 ==> i == SIZE+1;\nloop invariant i26: sn == SIZE*a ==> v1 == 1000000;\nloop invariant i27: sn == SIZE*a ==> v2 == 1000000;\nloop invariant i28: sn == SIZE*a ==> v3 == 1000000;\nloop invariant i29: sn == 0 ==> v1 == -1000000;\nloop invariant i30: sn == 0 ==> v2 == -1000000;\nloop invariant i31: sn == 0 ==> v3 == -1000000;\nloop invariant i32: sn == SIZE*a ==> i == SIZE+1;\nloop invariant i33: sn == 0 ==> i == 0;\nloop invariant i34: 1 <= sn <= SIZE * a;\nloop invariant i35: 1 <= i <= SIZE + 1;\nloop invariant i36: 0 <= v1 <= 1;\nloop invariant i37: 0 <= v2 <= 1;\nloop invariant i38: 0 <= v3 <= 1;\nloop invariant i39: a == 1;\nloop invariant i40: 0 <= sn <= SIZE*a;\nloop invariant i41: 0 <= SIZE;\nloop invariant i42: 1 <= i <= SIZE+1;\nloop invariant i43: 0 <= v1 <= SIZE*a;\nloop invariant i44: 0 <= v2 <= SIZE*a;\nloop invariant i45: 0 <= v3 <= SIZE*a;\nloop invariant i46: sn == (SIZE+1)*a if i == SIZE+1;\nloop invariant i47: sn == 0 if i == 1;\nloop invariant i48: sn == 0 if SIZE == 0;\nloop invariant i49: sn == 0 if SIZE == -1;\nloop invariant i50: sn == 0 if SIZE == -2;\nloop invariant i51: sn == 0 if SIZE == -3;\nloop invariant i52: sn == 0 if SIZE == -4;\nloop invariant i53: sn == 0 if SIZE == -5;\nloop invariant i54: sn == 0 if SIZE == -6;\nloop invariant i55: sn == 0 if SIZE == -7;\nloop invariant i56: sn == 0 if SIZE == -8;\nloop invariant i57: sn == 0 if SIZE == -9;\nloop invariant i58: sn == 0 if SIZE == -10;\nloop invariant i59: sn == 0 if SIZE == -11;\nloop invariant i60: sn == 0 if SIZE == -12;\nloop invariant i61: sn == 0 if SIZE == -13;\nloop invariant i62: sn == 0 if SIZE == -14;\nloop invariant i63: sn == 0 if SIZE == -15;\nloop invariant i64: sn == 0 if SIZE == -16;\nloop invariant i65: sn == 0 if SIZE == -17;\nloop invariant i66: sn == 0 if SIZE == -18;\nloop invariant i67: sn == 0 if SIZE == -19;\nloop invariant i68: sn == 0 if SIZE == -20;\nloop invariant i69: sn == 0 if SIZE == -21;\nloop invariant i70: sn == 0 if SIZE == -22;\nloop invariant i71: sn == 0 if SIZE == -23;\nloop invariant i72: sn == 0 if SIZE == -24;\nloop invariant i73: sn == 0 if SIZE == -25;\nloop invariant i74: 0 <= sn <= SIZE * a; loop invariant v1 >= 0; loop invariant v2 >= 0; loop invariant v3 >= 0; loop invariant SIZE >= 0; loop invariant i >= 1; loop invariant i <= SIZE + 1; loop invariant sn + a == SIZE * a; loop invariant sn == SIZE * a; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1;\nloop invariant i75: -SIZE * a <= sn <= SIZE * a;\nloop invariant i76: v1, v2, v3 are non-deterministic;\nloop invariant i77: v1, v2, v3 are not modified by the loop;\nloop invariant i78: v1 <= v1';\nloop invariant i79: v2 <= v2';\nloop invariant i80: v3 <= v3';\nloop invariant i81: i == SIZE ==> sn == SIZE * a;\nloop invariant i82: i < SIZE ==> sn < SIZE * a;\nloop invariant i83: i == 1 ==> sn == a;\nloop invariant i84: 0 <= sn <= (SIZE * a);\nloop invariant i85: 1 <= i <= SIZE;\nloop invariant i86: v1 <= SIZE;\nloop invariant i87: v2 <= SIZE;\nloop invariant i88: v3 <= SIZE;\nloop invariant i89: (sn == SIZE*a) ==> (v1 == SIZE && v2 == SIZE && v3 == SIZE);\nloop invariant i90: 0 <= sn <= SIZE * a;\nloop invariant i91: v1 = unknown_int();\nloop invariant i92: v2 = unknown_int();\nloop invariant i93: v3 = unknown_int();\nloop invariant i94: sn == i * a - a;\nloop invariant i95: sn == SIZE * a || sn == 0;\nloop invariant i96: 0 <= v1;\nloop invariant i97: 0 <= v2;\nloop invariant i98: 0 <= v3;\nloop invariant i99: sn == (i - 1) * a;\nloop invariant i100: sn == 0 ==> i == 1;\nloop invariant i101: v1 == 0 ==> i == 1;\nloop invariant i102: v2 == 0 ==> i == 1;\nloop invariant i103: v3 == 0 ==> i == 1;\nloop invariant i104: v1 == 0 ==> sn == 0;\nloop invariant i105: v2 == 0 ==> sn == 0;\nloop invariant i106: v3 == 0 ==> sn == 0;\nloop invariant i107: sn == SIZE * a ==> i == SIZE + 1;\nloop invariant i108: sn == 0 ==> v1 == 0;\nloop invariant i109: sn == 0 ==> v2 == 0;\nloop invariant i110: sn == 0 ==> v3 == 0;\nloop invariant i111: sn == SIZE * a ==> v1 == 0;\nloop invariant i112: sn == SIZE * a ==> v2 == 0;\nloop invariant i113: sn == SIZE * a ==> v3 == 0;\nloop invariant i114: 1 <= SIZE <= 100000;\nloop invariant i115: v1 == unknown_int();\nloop invariant i116: v2 == unknown_int();\nloop invariant i117: v3 == unknown_int();\nloop invariant i118: i <= SIZE ==> i > 0;\nloop invariant i119: i > SIZE ==> i == SIZE + 1;\nloop invariant i120: SIZE == 0 ==> sn == 0;\nloop invariant i121: SIZE > 0 ==> sn > 0;\nloop invariant i122: SIZE > 0 ==> a > 0;\nloop invariant i123: v1 <= 1;\nloop invariant i124: v2 <= 1;\nloop invariant i125: v3 <= 1;\nloop invariant i126: v1 >= 0;\nloop invariant i127: v2 >= 0;\nloop invariant i128: v3 >= 0;\nloop invariant i129: 1 <= sn <= SIZE*a;\nloop invariant i130: sn == SIZE*a* (i/(SIZE+1));\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
            "checker_output_after_prune": false
        },
        {
            "file": "../dataset/loop_invariants/code2inv/101.c",
            "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int x;\n  \n  (x = 0);\n  \n  while ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (x != n) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
            "success": false,
            "annotation_blocks": [
                "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x == n ==> (n >= 0);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant (x == n) ==> (x >= 0);\nloop invariant (x != n) ==> (x < n);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x <= n;\nloop invariant x >= 0;\n*/\n```",
                "```\n/*@\nloop invariant x >= 0;\nloop invariant x < n;\nloop invariant x == n ==> (n < 0);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n;\n*/\n```",
                "```\n/*@\nloop invariant x >= 0;\nloop invariant x < n;\nloop invariant n >= 0;\nloop invariant n >= x;\nloop invariant n >= 0 ==> (x == n) ==> (x < 0);\nloop invariant n >= 0 ==> (x == n) ==> (x >= 0);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x < n ==> (n >= 0);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n; loop invariant n >= 0; loop invariant x <= n;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x < n;\nloop invariant (x == 0) ==> (n >= 0);\nloop invariant (x > 0) ==> (n > 0);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x >= n ==> (n < 0);\n*/\n```",
                "```\n/*@\nloop invariant i1;\nloop invariant i2;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant (x <= n) ==> (x == n);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x >= n - (n - x);\nloop invariant x <= n + x;\nloop invariant x * x <= 2 * x * n;\nloop invariant x * x <= 2 * n * n;\nloop invariant x * x <= 4 * n * n;\nloop invariant x * x <= 8 * n * n;\nloop invariant x * x <= 16 * n * n;\nloop invariant x * x <= 32 * n * n;\nloop invariant x * x <= 64 * n * n;\nloop invariant x * x <= 128 * n * n;\nloop invariant x * x <= 256 * n * n;\nloop invariant x * x <= 512 * n * n;\nloop invariant x * x <= 1024 * n * n;\nloop invariant x * x <= 2048 * n * n;\nloop invariant x * x <= 4096 * n * n;\nloop invariant x * x <= 8192 * n * n;\nloop invariant x * x <= 16384 * n * n;\nloop invariant x * x <= 32768 * n * n;\nloop invariant x * x <= 65536 * n * n;\nloop invariant x * x <= 131072 * n * n;\nloop invariant x * x <= 262144 * n * n;\nloop invariant x * x <= 524288 * n * n;\nloop invariant x * x <= 1048576 * n * n;\nloop invariant x * x <= 2097152 * n * n;\nloop invariant x * x <= 4194304 * n * n;\nloop invariant x * x <= 8388608 * n * n;\nloop invariant x * x <= 16777216 * n * n;\nloop invariant x * x <= 33554432 * n * n;\nloop invariant x * x <= 67108864 * n * n;\nloop invariant x * x <= 134217728 * n * n;\nloop invariant x * x <= 268435456 * n * n;\nloop invariant x * x <= 536870912 * n * n;\nloop invariant x * x <= 1073741824 * n * n;\nloop invariant x * x <= 2147483648 * n * n;\nloop invariant x * x <= 4294967296 * n * n;\nloop invariant x * x <= 8589934592 * n * n;\nloop invariant x * x <= 17179869184 * n * n;\nloop invariant x * x <= 34359738368 * n * n;\nloop invariant x * x <= 68719476736 * n * n;\nloop invariant x * x <= 137438953472 * n * n;\nloop invariant x * x <= 274877906944 * n * n;\nloop invariant x * x <= 549755813888 * n * n;\nloop invariant x * x <= 1099511627776 * n * n;\nloop invariant x * x <= 2199023255552 * n * n;\nloop invariant x * x <= 4398046511104 * n * n;\nloop invariant x * x <= 8796093022208 * n * n;\nloop invariant x * x <= 17592186044416 * n * n;\nloop invariant x * x <= 35184372088832 * n * n;\nloop invariant x * x <= 70368744177664 * n * n;\nloop invariant x * x <= 140737488355328 * n * n;\nloop invariant x * x <= 281474976710656 * n * n;\n*/\n```"
            ],
            "completions": [
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x == n ==> (n >= 0);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant x == n ==> (n >= 0) is partially proven to be inductive.\nAssertion n < 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int x;\n  \n  (x = 0);\n  \n  /*@\n\n\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (x != n) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nAssertion n < 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int x;\n  \n  (x = 0);\n  \n  /*@\n\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (x != n) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant (x == n) ==> (x >= 0);\nloop invariant (x != n) ==> (x < n);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant (x == n) ==> (x >= 0) is partially proven to be inductive.\nloop invariant (x != n) ==> (x < n) is partially proven to be inductive.\nAssertion n < 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int x;\n  \n  (x = 0);\n  \n  /*@\n\n\n\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (x != n) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x <= n;\nloop invariant x >= 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant x <= n is partially proven to be inductive.\nloop invariant x >= 0 is partially proven to be inductive.\nAssertion n < 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int x;\n  \n  (x = 0);\n  \n  /*@\n\n\nloop invariant i3: x >= 0;\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (x != n) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant x >= 0;\nloop invariant x < n;\nloop invariant x == n ==> (n < 0);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant x >= 0 is partially proven to be inductive.\nloop invariant x < n is neither established nor preserved.\nloop invariant x == n ==> (n < 0) is partially proven to be inductive.\nAssertion n < 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int x;\n  \n  (x = 0);\n  \n  /*@\nloop invariant i1: x >= 0;\n\n\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (x != n) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nAssertion n < 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int x;\n  \n  (x = 0);\n  \n  /*@\n\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (x != n) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant x >= 0;\nloop invariant x < n;\nloop invariant n >= 0;\nloop invariant n >= x;\nloop invariant n >= 0 ==> (x == n) ==> (x < 0);\nloop invariant n >= 0 ==> (x == n) ==> (x >= 0);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant x >= 0 is partially proven to be inductive.\nloop invariant x < n is neither established nor preserved.\nloop invariant n >= 0 is partially proven to be inductive.\nloop invariant n >= x is partially proven to be inductive.\nloop invariant n >= 0 ==> (x == n) ==> (x < 0) is partially proven to be inductive.\nloop invariant n >= 0 ==> (x == n) ==> (x >= 0) is partially proven to be inductive.\nAssertion n < 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int x;\n  \n  (x = 0);\n  \n  /*@\nloop invariant i1: x >= 0;\n\n\n\n\nloop invariant i6: n >= 0 ==> (x == n) ==> (x >= 0);\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (x != n) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x < n ==> (n >= 0);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant x < n ==> (n >= 0) is partially proven to be inductive.\nAssertion n < 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int x;\n  \n  (x = 0);\n  \n  /*@\n\nloop invariant i2: x < n ==> (n >= 0);\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (x != n) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n; loop invariant n >= 0; loop invariant x <= n;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= n; loop invariant n >= 0; loop invariant x <= n is preserved but not established.\nAssertion n < 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int x;\n  \n  (x = 0);\n  \n  /*@\n\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (x != n) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant x <= n is partially proven to be inductive.\nAssertion n < 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int x;\n  \n  (x = 0);\n  \n  /*@\n\n\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (x != n) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= x < n;\nloop invariant (x == 0) ==> (n >= 0);\nloop invariant (x > 0) ==> (n > 0);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x < n is neither established nor preserved.\nloop invariant (x == 0) ==> (n >= 0) is partially proven to be inductive.\nloop invariant (x > 0) ==> (n > 0) is partially proven to be inductive.\nAssertion n < 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int x;\n  \n  (x = 0);\n  \n  /*@\n\n\nloop invariant i3: (x > 0) ==> (n > 0);\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (x != n) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x >= n ==> (n < 0);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant x >= n ==> (n < 0) is neither established nor preserved.\nAssertion n < 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int x;\n  \n  (x = 0);\n  \n  /*@\n\n\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (x != n) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant i1;\nloop invariant i2;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 15: unbound logic variable i1. Ignoring loop annotation",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int x;\n  \n  (x = 0);\n  \n  /*@\n\n\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (x != n) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant (x <= n) ==> (x == n);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant x <= n is partially proven to be inductive.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant (x <= n) ==> (x == n) is preserved but not established.\nAssertion n < 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int x;\n  \n  (x = 0);\n  \n  /*@\n\n\nloop invariant i3: x >= 0;\n\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (x != n) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x >= n - (n - x);\nloop invariant x <= n + x;\nloop invariant x * x <= 2 * x * n;\nloop invariant x * x <= 2 * n * n;\nloop invariant x * x <= 4 * n * n;\nloop invariant x * x <= 8 * n * n;\nloop invariant x * x <= 16 * n * n;\nloop invariant x * x <= 32 * n * n;\nloop invariant x * x <= 64 * n * n;\nloop invariant x * x <= 128 * n * n;\nloop invariant x * x <= 256 * n * n;\nloop invariant x * x <= 512 * n * n;\nloop invariant x * x <= 1024 * n * n;\nloop invariant x * x <= 2048 * n * n;\nloop invariant x * x <= 4096 * n * n;\nloop invariant x * x <= 8192 * n * n;\nloop invariant x * x <= 16384 * n * n;\nloop invariant x * x <= 32768 * n * n;\nloop invariant x * x <= 65536 * n * n;\nloop invariant x * x <= 131072 * n * n;\nloop invariant x * x <= 262144 * n * n;\nloop invariant x * x <= 524288 * n * n;\nloop invariant x * x <= 1048576 * n * n;\nloop invariant x * x <= 2097152 * n * n;\nloop invariant x * x <= 4194304 * n * n;\nloop invariant x * x <= 8388608 * n * n;\nloop invariant x * x <= 16777216 * n * n;\nloop invariant x * x <= 33554432 * n * n;\nloop invariant x * x <= 67108864 * n * n;\nloop invariant x * x <= 134217728 * n * n;\nloop invariant x * x <= 268435456 * n * n;\nloop invariant x * x <= 536870912 * n * n;\nloop invariant x * x <= 1073741824 * n * n;\nloop invariant x * x <= 2147483648 * n * n;\nloop invariant x * x <= 4294967296 * n * n;\nloop invariant x * x <= 8589934592 * n * n;\nloop invariant x * x <= 17179869184 * n * n;\nloop invariant x * x <= 34359738368 * n * n;\nloop invariant x * x <= 68719476736 * n * n;\nloop invariant x * x <= 137438953472 * n * n;\nloop invariant x * x <= 274877906944 * n * n;\nloop invariant x * x <= 549755813888 * n * n;\nloop invariant x * x <= 1099511627776 * n * n;\nloop invariant x * x <= 2199023255552 * n * n;\nloop invariant x * x <= 4398046511104 * n * n;\nloop invariant x * x <= 8796093022208 * n * n;\nloop invariant x * x <= 17592186044416 * n * n;\nloop invariant x * x <= 35184372088832 * n * n;\nloop invariant x * x <= 70368744177664 * n * n;\nloop invariant x * x <= 140737488355328 * n * n;\nloop invariant x * x <= 281474976710656 * n * n;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant x >= n - (n - x) is partially proven to be inductive.\nloop invariant x <= n + x is partially proven to be inductive.\nloop invariant x * x <= 2 * x * n is partially proven to be inductive.\nloop invariant x * x <= 2 * n * n is partially proven to be inductive.\nloop invariant x * x <= 4 * n * n is partially proven to be inductive.\nloop invariant x * x <= 8 * n * n is partially proven to be inductive.\nloop invariant x * x <= 16 * n * n is partially proven to be inductive.\nloop invariant x * x <= 32 * n * n is partially proven to be inductive.\nloop invariant x * x <= 64 * n * n is partially proven to be inductive.\nloop invariant x * x <= 128 * n * n is partially proven to be inductive.\nloop invariant x * x <= 256 * n * n is partially proven to be inductive.\nloop invariant x * x <= 512 * n * n is partially proven to be inductive.\nloop invariant x * x <= 1024 * n * n is partially proven to be inductive.\nloop invariant x * x <= 2048 * n * n is partially proven to be inductive.\nloop invariant x * x <= 4096 * n * n is partially proven to be inductive.\nloop invariant x * x <= 8192 * n * n is partially proven to be inductive.\nloop invariant x * x <= 16384 * n * n is partially proven to be inductive.\nloop invariant x * x <= 32768 * n * n is partially proven to be inductive.\nloop invariant x * x <= 65536 * n * n is partially proven to be inductive.\nloop invariant x * x <= 131072 * n * n is partially proven to be inductive.\nloop invariant x * x <= 262144 * n * n is partially proven to be inductive.\nloop invariant x * x <= 524288 * n * n is partially proven to be inductive.\nloop invariant x * x <= 1048576 * n * n is partially proven to be inductive.\nloop invariant x * x <= 2097152 * n * n is partially proven to be inductive.\nloop invariant x * x <= 4194304 * n * n is partially proven to be inductive.\nloop invariant x * x <= 8388608 * n * n is partially proven to be inductive.\nloop invariant x * x <= 16777216 * n * n is partially proven to be inductive.\nloop invariant x * x <= 33554432 * n * n is partially proven to be inductive.\nloop invariant x * x <= 67108864 * n * n is partially proven to be inductive.\nloop invariant x * x <= 134217728 * n * n is partially proven to be inductive.\nloop invariant x * x <= 268435456 * n * n is partially proven to be inductive.\nloop invariant x * x <= 536870912 * n * n is partially proven to be inductive.\nloop invariant x * x <= 1073741824 * n * n is partially proven to be inductive.\nloop invariant x * x <= 2147483648 * n * n is partially proven to be inductive.\nloop invariant x * x <= 4294967296 * n * n is partially proven to be inductive.\nloop invariant x * x <= 8589934592 * n * n is partially proven to be inductive.\nloop invariant x * x <= 17179869184 * n * n is partially proven to be inductive.\nloop invariant x * x <= 34359738368 * n * n is partially proven to be inductive.\nloop invariant x * x <= 68719476736 * n * n is partially proven to be inductive.\nloop invariant x * x <= 137438953472 * n * n is partially proven to be inductive.\nloop invariant x * x <= 274877906944 * n * n is partially proven to be inductive.\nloop invariant x * x <= 549755813888 * n * n is partially proven to be inductive.\nloop invariant x * x <= 1099511627776 * n * n is partially proven to be inductive.\nloop invariant x * x <= 2199023255552 * n * n is partially proven to be inductive.\nloop invariant x * x <= 4398046511104 * n * n is partially proven to be inductive.\nloop invariant x * x <= 8796093022208 * n * n is partially proven to be inductive.\nloop invariant x * x <= 17592186044416 * n * n is partially proven to be inductive.\nloop invariant x * x <= 35184372088832 * n * n is partially proven to be inductive.\nloop invariant x * x <= 70368744177664 * n * n is partially proven to be inductive.\nloop invariant x * x <= 140737488355328 * n * n is partially proven to be inductive.\nloop invariant x * x <= 281474976710656 * n * n is partially proven to be inductive.\nAssertion n < 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int x;\n  \n  (x = 0);\n  \n  /*@\n\nloop invariant i2: x >= n - (n - x);\n\nloop invariant i4: x * x <= 2 * x * n;\nloop invariant i5: x * x <= 2 * n * n;\nloop invariant i6: x * x <= 4 * n * n;\nloop invariant i7: x * x <= 8 * n * n;\nloop invariant i8: x * x <= 16 * n * n;\nloop invariant i9: x * x <= 32 * n * n;\nloop invariant i10: x * x <= 64 * n * n;\nloop invariant i11: x * x <= 128 * n * n;\nloop invariant i12: x * x <= 256 * n * n;\nloop invariant i13: x * x <= 512 * n * n;\nloop invariant i14: x * x <= 1024 * n * n;\nloop invariant i15: x * x <= 2048 * n * n;\nloop invariant i16: x * x <= 4096 * n * n;\nloop invariant i17: x * x <= 8192 * n * n;\nloop invariant i18: x * x <= 16384 * n * n;\nloop invariant i19: x * x <= 32768 * n * n;\nloop invariant i20: x * x <= 65536 * n * n;\nloop invariant i21: x * x <= 131072 * n * n;\nloop invariant i22: x * x <= 262144 * n * n;\nloop invariant i23: x * x <= 524288 * n * n;\nloop invariant i24: x * x <= 1048576 * n * n;\nloop invariant i25: x * x <= 2097152 * n * n;\nloop invariant i26: x * x <= 4194304 * n * n;\nloop invariant i27: x * x <= 8388608 * n * n;\nloop invariant i28: x * x <= 16777216 * n * n;\nloop invariant i29: x * x <= 33554432 * n * n;\nloop invariant i30: x * x <= 67108864 * n * n;\nloop invariant i31: x * x <= 134217728 * n * n;\nloop invariant i32: x * x <= 268435456 * n * n;\nloop invariant i33: x * x <= 536870912 * n * n;\nloop invariant i34: x * x <= 1073741824 * n * n;\nloop invariant i35: x * x <= 2147483648 * n * n;\nloop invariant i36: x * x <= 4294967296 * n * n;\nloop invariant i37: x * x <= 8589934592 * n * n;\nloop invariant i38: x * x <= 17179869184 * n * n;\nloop invariant i39: x * x <= 34359738368 * n * n;\nloop invariant i40: x * x <= 68719476736 * n * n;\nloop invariant i41: x * x <= 137438953472 * n * n;\nloop invariant i42: x * x <= 274877906944 * n * n;\nloop invariant i43: x * x <= 549755813888 * n * n;\nloop invariant i44: x * x <= 1099511627776 * n * n;\nloop invariant i45: x * x <= 2199023255552 * n * n;\nloop invariant i46: x * x <= 4398046511104 * n * n;\nloop invariant i47: x * x <= 8796093022208 * n * n;\nloop invariant i48: x * x <= 17592186044416 * n * n;\nloop invariant i49: x * x <= 35184372088832 * n * n;\nloop invariant i50: x * x <= 70368744177664 * n * n;\nloop invariant i51: x * x <= 140737488355328 * n * n;\nloop invariant i52: x * x <= 281474976710656 * n * n;\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (x != n) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                }
            ],
            "checker_output_for_combined_annotations": false,
            "checker_message_for_combined_annotations": "Annotation error on line 33: unbound logic variable i1. Ignoring loop annotation",
            "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int x;\n  \n  (x = 0);\n  \n  /*@\nloop invariant i1: 0 <= x <= n;\nloop invariant i2: x == n ==> (n >= 0);\nloop invariant i3: (x == n) ==> (x >= 0);\nloop invariant i4: (x != n) ==> (x < n);\nloop invariant i5: x <= n;\nloop invariant i6: x >= 0;\nloop invariant i7: x < n;\nloop invariant i8: x == n ==> (n < 0);\nloop invariant i9: n >= 0;\nloop invariant i10: n >= x;\nloop invariant i11: n >= 0 ==> (x == n) ==> (x < 0);\nloop invariant i12: n >= 0 ==> (x == n) ==> (x >= 0);\nloop invariant i13: x < n ==> (n >= 0);\nloop invariant i14: 0 <= x <= n; loop invariant n >= 0; loop invariant x <= n;\nloop invariant i15: 0 <= x < n;\nloop invariant i16: (x == 0) ==> (n >= 0);\nloop invariant i17: (x > 0) ==> (n > 0);\nloop invariant i18: x >= n ==> (n < 0);\nloop invariant i19: i1;\nloop invariant i20: i2;\nloop invariant i21: (x <= n) ==> (x == n);\nloop invariant i22: x >= n - (n - x);\nloop invariant i23: x <= n + x;\nloop invariant i24: x * x <= 2 * x * n;\nloop invariant i25: x * x <= 2 * n * n;\nloop invariant i26: x * x <= 4 * n * n;\nloop invariant i27: x * x <= 8 * n * n;\nloop invariant i28: x * x <= 16 * n * n;\nloop invariant i29: x * x <= 32 * n * n;\nloop invariant i30: x * x <= 64 * n * n;\nloop invariant i31: x * x <= 128 * n * n;\nloop invariant i32: x * x <= 256 * n * n;\nloop invariant i33: x * x <= 512 * n * n;\nloop invariant i34: x * x <= 1024 * n * n;\nloop invariant i35: x * x <= 2048 * n * n;\nloop invariant i36: x * x <= 4096 * n * n;\nloop invariant i37: x * x <= 8192 * n * n;\nloop invariant i38: x * x <= 16384 * n * n;\nloop invariant i39: x * x <= 32768 * n * n;\nloop invariant i40: x * x <= 65536 * n * n;\nloop invariant i41: x * x <= 131072 * n * n;\nloop invariant i42: x * x <= 262144 * n * n;\nloop invariant i43: x * x <= 524288 * n * n;\nloop invariant i44: x * x <= 1048576 * n * n;\nloop invariant i45: x * x <= 2097152 * n * n;\nloop invariant i46: x * x <= 4194304 * n * n;\nloop invariant i47: x * x <= 8388608 * n * n;\nloop invariant i48: x * x <= 16777216 * n * n;\nloop invariant i49: x * x <= 33554432 * n * n;\nloop invariant i50: x * x <= 67108864 * n * n;\nloop invariant i51: x * x <= 134217728 * n * n;\nloop invariant i52: x * x <= 268435456 * n * n;\nloop invariant i53: x * x <= 536870912 * n * n;\nloop invariant i54: x * x <= 1073741824 * n * n;\nloop invariant i55: x * x <= 2147483648 * n * n;\nloop invariant i56: x * x <= 4294967296 * n * n;\nloop invariant i57: x * x <= 8589934592 * n * n;\nloop invariant i58: x * x <= 17179869184 * n * n;\nloop invariant i59: x * x <= 34359738368 * n * n;\nloop invariant i60: x * x <= 68719476736 * n * n;\nloop invariant i61: x * x <= 137438953472 * n * n;\nloop invariant i62: x * x <= 274877906944 * n * n;\nloop invariant i63: x * x <= 549755813888 * n * n;\nloop invariant i64: x * x <= 1099511627776 * n * n;\nloop invariant i65: x * x <= 2199023255552 * n * n;\nloop invariant i66: x * x <= 4398046511104 * n * n;\nloop invariant i67: x * x <= 8796093022208 * n * n;\nloop invariant i68: x * x <= 17592186044416 * n * n;\nloop invariant i69: x * x <= 35184372088832 * n * n;\nloop invariant i70: x * x <= 70368744177664 * n * n;\nloop invariant i71: x * x <= 140737488355328 * n * n;\nloop invariant i72: x * x <= 281474976710656 * n * n;\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (x != n) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
            "combined_annotation_num_solver_calls": 12,
            "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int x;\n  \n  (x = 0);\n  \n  /*@\n\nloop invariant i2: x == n ==> (n >= 0);\nloop invariant i3: (x == n) ==> (x >= 0);\n\n\nloop invariant i6: x >= 0;\n\n\n\n\n\nloop invariant i12: n >= 0 ==> (x == n) ==> (x >= 0);\nloop invariant i13: x < n ==> (n >= 0);\n\n\n\nloop invariant i17: (x > 0) ==> (n > 0);\n\n\n\n\nloop invariant i22: x >= n - (n - x);\n\nloop invariant i24: x * x <= 2 * x * n;\nloop invariant i25: x * x <= 2 * n * n;\nloop invariant i26: x * x <= 4 * n * n;\nloop invariant i27: x * x <= 8 * n * n;\nloop invariant i28: x * x <= 16 * n * n;\nloop invariant i29: x * x <= 32 * n * n;\nloop invariant i30: x * x <= 64 * n * n;\nloop invariant i31: x * x <= 128 * n * n;\nloop invariant i32: x * x <= 256 * n * n;\nloop invariant i33: x * x <= 512 * n * n;\nloop invariant i34: x * x <= 1024 * n * n;\nloop invariant i35: x * x <= 2048 * n * n;\nloop invariant i36: x * x <= 4096 * n * n;\nloop invariant i37: x * x <= 8192 * n * n;\nloop invariant i38: x * x <= 16384 * n * n;\nloop invariant i39: x * x <= 32768 * n * n;\nloop invariant i40: x * x <= 65536 * n * n;\nloop invariant i41: x * x <= 131072 * n * n;\nloop invariant i42: x * x <= 262144 * n * n;\nloop invariant i43: x * x <= 524288 * n * n;\nloop invariant i44: x * x <= 1048576 * n * n;\nloop invariant i45: x * x <= 2097152 * n * n;\nloop invariant i46: x * x <= 4194304 * n * n;\nloop invariant i47: x * x <= 8388608 * n * n;\nloop invariant i48: x * x <= 16777216 * n * n;\nloop invariant i49: x * x <= 33554432 * n * n;\nloop invariant i50: x * x <= 67108864 * n * n;\nloop invariant i51: x * x <= 134217728 * n * n;\nloop invariant i52: x * x <= 268435456 * n * n;\nloop invariant i53: x * x <= 536870912 * n * n;\nloop invariant i54: x * x <= 1073741824 * n * n;\nloop invariant i55: x * x <= 2147483648 * n * n;\nloop invariant i56: x * x <= 4294967296 * n * n;\nloop invariant i57: x * x <= 8589934592 * n * n;\nloop invariant i58: x * x <= 17179869184 * n * n;\nloop invariant i59: x * x <= 34359738368 * n * n;\nloop invariant i60: x * x <= 68719476736 * n * n;\nloop invariant i61: x * x <= 137438953472 * n * n;\nloop invariant i62: x * x <= 274877906944 * n * n;\nloop invariant i63: x * x <= 549755813888 * n * n;\nloop invariant i64: x * x <= 1099511627776 * n * n;\nloop invariant i65: x * x <= 2199023255552 * n * n;\nloop invariant i66: x * x <= 4398046511104 * n * n;\nloop invariant i67: x * x <= 8796093022208 * n * n;\nloop invariant i68: x * x <= 17592186044416 * n * n;\nloop invariant i69: x * x <= 35184372088832 * n * n;\nloop invariant i70: x * x <= 70368744177664 * n * n;\nloop invariant i71: x * x <= 140737488355328 * n * n;\nloop invariant i72: x * x <= 281474976710656 * n * n;\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (x != n) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
            "checker_output_after_prune": false
        },
        {
            "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.c",
            "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  for(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
            "success": true,
            "annotation_blocks": [
                "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant sn == i*a;\nloop invariant !(i > SIZE ==> a != 0);\nloop invariant !(i > SIZE ==> sn != 0);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= sn <= SIZE * a;\nloop invariant 0 <= i <= SIZE;\nloop invariant SIZE >= 0;\nloop invariant a >= 0;\nloop invariant sn == (i - 1) * a;\nloop invariant sn == (SIZE * (SIZE + 1) * a) / 2;\nloop invariant SIZE * a >= sn >= 0;\nloop invariant sn == (SIZE * a) * (SIZE + 1) / 2;\nloop invariant SIZE >= 0;\nloop invariant a >= 0;\nloop invariant sn == ((i - 1) * a) * (SIZE - i + 1) / 2;\nloop invariant sn == (SIZE * a) * (SIZE + 1) / 2;\nloop invariant SIZE >= 0;\nloop invariant a >= 0;\nloop invariant sn == ((i - 1) * a) * (SIZE - i + 1) / 2;\nloop invariant sn == (SIZE * a) * (SIZE + 1) / 2;\nloop invariant SIZE >= 0;\nloop invariant a >= 0;\nloop invariant sn == ((i - 1) * a) * (SIZE - i + 1) / 2;\nloop invariant sn == (SIZE * a) * (SIZE + 1) / 2;\nloop invariant SIZE >= 0;\nloop invariant a >= 0;\nloop invariant sn == ((i - 1) * a) * (SIZE - i + 1) / 2;\nloop invariant sn == (SIZE * a) * (SIZE + 1) / 2;\nloop invariant SIZE >= 0;\nloop invariant a >= 0;\nloop invariant sn == ((i - 1) * a) * (SIZE - i + 1) / 2;\nloop invariant sn == (SIZE * a) * (SIZE + 1) / 2;\nloop invariant SIZE >= 0;\nloop invariant a >= 0;\nloop invariant sn == ((i - 1) * a) * (SIZE - i + 1) / 2;\nloop invariant sn == (SIZE * a) * (SIZE + 1) / 2;\nloop invariant SIZE >= 0;\nloop invariant a >= 0;\nloop invariant sn == ((i - 1) * a) * (SIZE - i + 1) / 2;\nloop invariant sn == (SIZE * a) * (SIZE + 1) / 2;\nloop invariant SIZE >= 0;\nloop invariant a >= 0;\nloop invariant sn == ((i - 1) * a) * (SIZE - i + 1) / 2;\nloop invariant sn == (SIZE * a) * (SIZE + 1) / 2;\nloop invariant SIZE >= 0;\nloop invariant a >= 0;\nloop invariant sn == ((i - 1) * a) * (SIZE - i + 1) / 2;\nloop invariant sn == (SIZE * a) * (SIZE + 1) / 2;\nloop invariant SIZE >= 0;\nloop invariant a >= 0;\nloop invariant sn == ((i - 1) * a) * (SIZE - i + 1) / 2;\nloop invariant sn == (SIZE * a) * (SIZE + 1) / 2;\nloop invariant SIZE >= 0;\nloop invariant a >= 0;\nloop invariant sn == ((i - 1) * a) * (SIZE - i + 1) / 2;\nloop invariant sn == (SIZE * a) * (SIZE + 1) / 2;\nloop invariant SIZE >= 0;\nloop invariant a >= 0;\nloop invariant sn == ((i - 1) * a) * (SIZE - i + 1) / 2;\nloop invariant sn == (SIZE * a) * (SIZE + 1) / 2;\nloop invariant SIZE >= 0;\nloop invariant a >= 0;\nloop invariant sn == ((i - 1) * a) * (SIZE - i + 1) / 2;\nloop invariant sn == (SIZE * a) * (SIZE + 1) / 2;\nloop invariant SIZE >= 0;\nloop invariant a >= 0;\nloop invariant sn == ((i - 1) * a) * (SIZE - i + 1) / 2;\nloop invariant sn == (SIZE * a) * (SIZE + 1) / 2;\nloop invariant SIZE >= 0;\nloop invariant a >= 0;\nloop invariant sn == ((i - 1) * a) * (SIZE - i + 1) / 2;\nloop invariant sn == (SIZE * a) * (SIZE + 1) / 2;\n*/\n```",
                "```\n/*@\nloop invariant 1 <= i <= SIZE + 1;\nloop invariant sn >= 0;\nloop invariant sn >= i*a;\nloop invariant sn <= i*a;\nloop invariant i >= 1;\nloop invariant i <= SIZE + 1;\nloop invariant sn <= SIZE*a;\n*/\n```",
                "```\n/*@\n\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= SIZE + 1;\nloop invariant sn == (i - 1) * a;\nloop invariant SIZE >= 0;\nloop invariant a == 1;\nloop invariant sn <= SIZE * a;\nloop invariant SIZE >= i - 1;\nloop invariant sn + a >= sn;\nloop invariant SIZE >= 0;\nloop invariant a == 1;\nloop invariant sn + a <= sn + a;\nloop invariant SIZE >= i - 1;\nloop invariant sn + a >= sn;\nloop invariant SIZE >= 0;\nloop invariant a == 1;\nloop invariant sn + a <= sn + a;\nloop invariant SIZE >= i - 1;\nloop invariant sn + a >= sn;\nloop invariant SIZE >= 0;\nloop invariant a == 1;\nloop invariant sn + a <= sn + a;\nloop invariant SIZE >= i - 1;\nloop invariant sn + a >= sn;\nloop invariant SIZE >= 0;\nloop invariant a == 1;\nloop invariant sn + a <= sn + a;\nloop invariant SIZE >= i - 1;\nloop invariant sn + a >= sn;\nloop invariant SIZE >= 0;\nloop invariant a == 1;\nloop invariant sn + a <= sn + a;\nloop invariant SIZE >= i - 1;\nloop invariant sn + a >= sn;\nloop invariant SIZE >= 0;\nloop invariant a == 1;\nloop invariant sn + a <= sn + a;\nloop invariant SIZE >= i - 1;\nloop invariant sn + a >= sn;\nloop invariant SIZE >= 0;\nloop invariant a == 1;\nloop invariant sn + a <= sn + a;\nloop invariant SIZE >= i - 1;\nloop invariant sn + a >= sn;\nloop invariant SIZE >= 0;\nloop invariant a == 1;\nloop invariant sn + a <= sn + a;\nloop invariant SIZE >= i - 1;\nloop invariant sn + a >= sn;\nloop invariant SIZE >= 0;\nloop invariant a == 1;\nloop invariant sn + a <= sn + a;\nloop invariant SIZE >= i - 1;\nloop invariant sn + a >= sn;\nloop invariant SIZE >= 0;\nloop invariant a == 1;\nloop invariant sn + a <= sn + a;\nloop invariant SIZE >= i - 1;\nloop invariant sn + a >= sn;\nloop invariant SIZE >= 0;\nloop invariant a == 1;\nloop invariant sn + a <= sn + a;\nloop invariant SIZE >= i - 1;\nloop invariant sn + a >= sn;\nloop invariant SIZE >= 0;\nloop invariant a == 1;\nloop invariant sn + a <= sn + a;\nloop invariant SIZE >= i - 1;\nloop invariant sn + a >= sn;\nloop invariant SIZE >= 0;\nloop invariant a == 1;\nloop invariant sn + a <= sn + a;\nloop invariant SIZE >= i - 1;\nloop invariant sn + a >= sn;\nloop invariant SIZE >= 0;\nloop invariant a == 1;\nloop invariant sn + a <= sn + a;\nloop invariant SIZE >= i - 1;\nloop invariant sn + a >= sn;\nloop invariant SIZE >= 0;\nloop invariant a == 1;\nloop invariant sn + a <= sn + a;\nloop invariant SIZE >= i - 1;\nloop invariant sn + a >= sn;\nloop invariant SIZE >= 0;\nloop invariant a == 1;\nloop invariant sn + a <= sn + a;\nloop invariant SIZE >= i - 1;\nloop invariant sn + a >= sn;\nloop invariant SIZE >= 0;\nloop invariant a == 1;\nloop invariant sn + a <= sn + a;\nloop invariant SIZE >= i - 1;\nloop invariant sn + a >= sn;\nloop invariant SIZE >= 0;\nloop invariant a == 1;\nloop invariant sn + a <= sn + a;\nloop invariant SIZE >= i - 1;\nloop invariant sn + a >= sn;\nloop invariant SIZE >= 0;\nloop invariant a == 1;\nloop invariant sn + a <= sn + a;\nloop invariant SIZE >= i - 1;\nloop invariant sn + a >= sn;\nloop invariant SIZE >= 0;\nloop invariant a == 1;\nloop invariant sn + a <= sn + a;\nloop invariant SIZE >= i - 1;\nloop invariant sn + a >= sn;\nloop invariant SIZE >= 0;\nloop invariant a == 1;\nloop invariant sn + a <= sn + a;\nloop invariant SIZE >= i - 1;\nloop invariant sn + a >= sn;\nloop invariant SIZE >= 0;\nloop invariant a == 1;\nloop invariant sn + a <= sn + a;\nloop invariant SIZE >= i - 1;\nloop invariant sn + a >= sn;\nloop invariant SIZE >= 0;\nloop invariant a == 1;\nloop invariant sn + a <= sn + a;\nloop invariant SIZE >= i - 1;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= sn <= SIZE * a;\nloop invariant 1 <= i <= SIZE;\nloop invariant sn = (i - 1) * a;\nloop invariant sn >= 0;\nloop invariant sn <= SIZE * a;\nloop invariant i >= 1;\nloop invariant i <= SIZE;\nloop invariant i <= SIZE - sn / a;\nloop invariant sn >= SIZE * a * (1 - i) / i;\nloop invariant sn <= SIZE * a * (i - 1) / (i - 1);\nloop invariant sn = SIZE * a * (i - 1) / (i - 1);\nloop invariant sn = SIZE * a - SIZE * a / i;\nloop invariant sn = SIZE * a - SIZE * a * (i - 1) / i;\nloop invariant sn = SIZE * a - SIZE * a * (i - 1) / (i - 1);\nloop invariant sn = SIZE * a - SIZE * a * (i - 1) / (i - 1);\nloop invariant sn = SIZE * a - SIZE * a * (i - 1) / (i - 1);\nloop invariant sn = SIZE * a - SIZE * a * (i - 1) / (i - 1);\nloop invariant sn = SIZE * a - SIZE * a * (i - 1) / (i - 1);\nloop invariant sn = SIZE * a - SIZE * a * (i - 1) / (i - 1);\nloop invariant sn = SIZE * a - SIZE * a * (i - 1) / (i - 1);\nloop invariant 0 <= sn <= SIZE * a;\nloop invariant 1 <= i <= SIZE;\nloop invariant sn = (i - 1) * a;\nloop invariant sn >= 0;\nloop invariant sn <= SIZE * a;\nloop invariant i >= 1;\nloop invariant i <= SIZE;\nloop invariant i <= SIZE - sn / a;\nloop invariant sn >= SIZE * a * (1 - i) / i;\nloop invariant sn <= SIZE * a * (i - 1) / (i - 1);\nloop invariant sn = SIZE * a * (i - 1) / (i - 1);\nloop invariant sn = SIZE * a - SIZE * a / i;\nloop invariant sn = SIZE * a - SIZE * a * (i - 1) / i;\nloop invariant sn = SIZE * a - SIZE * a * (i - 1) / (i - 1);\nloop invariant sn = SIZE * a - SIZE * a * (i - 1) / (i - 1);\nloop invariant sn = SIZE * a - SIZE * a * (i - 1) / (i - 1);\nloop invariant sn = SIZE * a - SIZE * a * (i - 1) / (i - 1);\nloop invariant sn = SIZE * a - SIZE * a * (i - 1) / (i - 1);\nloop invariant sn = SIZE * a - SIZE * a * (i - 1) / (i - 1);\nloop invariant sn = SIZE * a - SIZE * a * (i - 1) / (i - 1);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant 0 <= sn <= SIZE * a;\nloop invariant sn == i * a;\nloop invariant i * a <= SIZE * a;\nloop invariant i * a == SIZE * a ==> sn == SIZE * a;\nloop invariant SIZE * a <= SIZE * a;\nloop invariant SIZE * a == SIZE * a ==> sn == SIZE * a;\nloop invariant SIZE * a >= SIZE * a;\nloop invariant SIZE * a == SIZE * a ==> sn == SIZE * a;\n*/\n```",
                "```\n/*@\nloop invariant ( sn >= 0);\nloop invariant ( sn <= SIZE * a );\nloop invariant ( sn + a * i == SIZE * a );\nloop invariant ( sn == SIZE * a * i / i );\n*/\n```",
                "```\n/*@\nloop invariant i >= 1;\nloop invariant i <= SIZE;\nloop invariant sn == i * a;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant (sn == (i - 1) * a || sn == SIZE * a || sn == 0);\nloop invariant (i < SIZE ==> (sn == i * a) || (sn == 0));\nloop invariant (i == SIZE ==> sn == SIZE * a || sn == 0);\nloop invariant (i > SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\n*/\n```",
                "```\n/*@\nloop invariant 1 <= i <= SIZE + 1;\nloop invariant 0 <= sn <= SIZE * a;\nloop invariant sn == (i - 1) * a;\nloop invariant sn >= 0;\nloop invariant sn <= SIZE * a;\nloop invariant sn == i * a || sn == 0;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant 0 <= sn <= SIZE*a;\nloop invariant sn == i*a;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant 1 <= i <= SIZE ==> sn == i * a;\nloop invariant i == SIZE ==> sn == SIZE * a;\nloop invariant i == SIZE ==> sn == 0;\nloop invariant 0 <= SIZE <= SIZE;\nloop invariant 0 <= sn <= SIZE * a;\n*/\n```",
                "```\n/*@\nloop invariant SIZE >= 0;\nloop invariant i >= 1;\nloop invariant i <= SIZE + 1;\nloop invariant sn >= 0;\nloop invariant sn <= SIZE * a;\nloop invariant (i == SIZE + 1) ==> (sn == SIZE * a);\nloop invariant (i == 1) ==> (sn == 0);\nloop invariant (i > 1 && i <= SIZE) ==> (sn == (i - 1) * a);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant 0 <= sn <= (SIZE * a);\nloop invariant i == sn / a;\nloop invariant i * a == sn;\n*/\n```"
            ],
            "completions": [
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant sn == i*a;\nloop invariant !(i > SIZE ==> a != 0);\nloop invariant !(i > SIZE ==> sn != 0);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= SIZE is preserved but not established.\nloop invariant sn == i*a is preserved but not established.\nloop invariant !(i > SIZE ==> a != 0) is partially proven to be inductive.\nloop invariant !(i > SIZE ==> sn != 0) is partially proven to be inductive.\nAssertion sn == SIZE * 1 || sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  /*@\n\n\n\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= sn <= SIZE * a;\nloop invariant 0 <= i <= SIZE;\nloop invariant SIZE >= 0;\nloop invariant a >= 0;\nloop invariant sn == (i - 1) * a;\nloop invariant sn == (SIZE * (SIZE + 1) * a) / 2;\nloop invariant SIZE * a >= sn >= 0;\nloop invariant sn == (SIZE * a) * (SIZE + 1) / 2;\nloop invariant SIZE >= 0;\nloop invariant a >= 0;\nloop invariant sn == ((i - 1) * a) * (SIZE - i + 1) / 2;\nloop invariant sn == (SIZE * a) * (SIZE + 1) / 2;\nloop invariant SIZE >= 0;\nloop invariant a >= 0;\nloop invariant sn == ((i - 1) * a) * (SIZE - i + 1) / 2;\nloop invariant sn == (SIZE * a) * (SIZE + 1) / 2;\nloop invariant SIZE >= 0;\nloop invariant a >= 0;\nloop invariant sn == ((i - 1) * a) * (SIZE - i + 1) / 2;\nloop invariant sn == (SIZE * a) * (SIZE + 1) / 2;\nloop invariant SIZE >= 0;\nloop invariant a >= 0;\nloop invariant sn == ((i - 1) * a) * (SIZE - i + 1) / 2;\nloop invariant sn == (SIZE * a) * (SIZE + 1) / 2;\nloop invariant SIZE >= 0;\nloop invariant a >= 0;\nloop invariant sn == ((i - 1) * a) * (SIZE - i + 1) / 2;\nloop invariant sn == (SIZE * a) * (SIZE + 1) / 2;\nloop invariant SIZE >= 0;\nloop invariant a >= 0;\nloop invariant sn == ((i - 1) * a) * (SIZE - i + 1) / 2;\nloop invariant sn == (SIZE * a) * (SIZE + 1) / 2;\nloop invariant SIZE >= 0;\nloop invariant a >= 0;\nloop invariant sn == ((i - 1) * a) * (SIZE - i + 1) / 2;\nloop invariant sn == (SIZE * a) * (SIZE + 1) / 2;\nloop invariant SIZE >= 0;\nloop invariant a >= 0;\nloop invariant sn == ((i - 1) * a) * (SIZE - i + 1) / 2;\nloop invariant sn == (SIZE * a) * (SIZE + 1) / 2;\nloop invariant SIZE >= 0;\nloop invariant a >= 0;\nloop invariant sn == ((i - 1) * a) * (SIZE - i + 1) / 2;\nloop invariant sn == (SIZE * a) * (SIZE + 1) / 2;\nloop invariant SIZE >= 0;\nloop invariant a >= 0;\nloop invariant sn == ((i - 1) * a) * (SIZE - i + 1) / 2;\nloop invariant sn == (SIZE * a) * (SIZE + 1) / 2;\nloop invariant SIZE >= 0;\nloop invariant a >= 0;\nloop invariant sn == ((i - 1) * a) * (SIZE - i + 1) / 2;\nloop invariant sn == (SIZE * a) * (SIZE + 1) / 2;\nloop invariant SIZE >= 0;\nloop invariant a >= 0;\nloop invariant sn == ((i - 1) * a) * (SIZE - i + 1) / 2;\nloop invariant sn == (SIZE * a) * (SIZE + 1) / 2;\nloop invariant SIZE >= 0;\nloop invariant a >= 0;\nloop invariant sn == ((i - 1) * a) * (SIZE - i + 1) / 2;\nloop invariant sn == (SIZE * a) * (SIZE + 1) / 2;\nloop invariant SIZE >= 0;\nloop invariant a >= 0;\nloop invariant sn == ((i - 1) * a) * (SIZE - i + 1) / 2;\nloop invariant sn == (SIZE * a) * (SIZE + 1) / 2;\nloop invariant SIZE >= 0;\nloop invariant a >= 0;\nloop invariant sn == ((i - 1) * a) * (SIZE - i + 1) / 2;\nloop invariant sn == (SIZE * a) * (SIZE + 1) / 2;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= sn <= SIZE * a is preserved but not established.\nloop invariant 0 <= i <= SIZE is preserved but not established.\nloop invariant SIZE >= 0 is partially proven to be inductive.\nloop invariant a >= 0 is partially proven to be inductive.\nloop invariant sn == (i - 1) * a is partially proven to be inductive.\nloop invariant sn == (SIZE * (SIZE + 1) * a) / 2 is preserved but not established.\nloop invariant SIZE * a >= sn >= 0 is partially proven to be inductive.\nloop invariant sn == (SIZE * a) * (SIZE + 1) / 2 is partially proven to be inductive.\nloop invariant sn == ((i - 1) * a) * (SIZE - i + 1) / 2 is partially proven to be inductive.\nAssertion sn == SIZE * 1 || sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  /*@\n\n\n\nloop invariant i4: a >= 0;\nloop invariant i5: sn == (i - 1) * a;\n\n\n\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 1 <= i <= SIZE + 1;\nloop invariant sn >= 0;\nloop invariant sn >= i*a;\nloop invariant sn <= i*a;\nloop invariant i >= 1;\nloop invariant i <= SIZE + 1;\nloop invariant sn <= SIZE*a;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= i <= SIZE + 1 is preserved but not established.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn >= i*a is preserved but not established.\nloop invariant sn <= i*a is partially proven to be inductive.\nloop invariant i >= 1 is partially proven to be inductive.\nloop invariant i <= SIZE + 1 is partially proven to be inductive.\nloop invariant sn <= SIZE*a is partially proven to be inductive.\nAssertion sn == SIZE * 1 || sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  /*@\n\nloop invariant i2: sn >= 0;\n\nloop invariant i4: sn <= i*a;\nloop invariant i5: i >= 1;\n\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 1,
                    "annotations": "```\n/*@\n\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 15: unexpected token ''",
                    "houdini_error": "No annotations found"
                },
                {
                    "num_solver_calls": 6,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= SIZE + 1;\nloop invariant sn == (i - 1) * a;\nloop invariant SIZE >= 0;\nloop invariant a == 1;\nloop invariant sn <= SIZE * a;\nloop invariant SIZE >= i - 1;\nloop invariant sn + a >= sn;\nloop invariant SIZE >= 0;\nloop invariant a == 1;\nloop invariant sn + a <= sn + a;\nloop invariant SIZE >= i - 1;\nloop invariant sn + a >= sn;\nloop invariant SIZE >= 0;\nloop invariant a == 1;\nloop invariant sn + a <= sn + a;\nloop invariant SIZE >= i - 1;\nloop invariant sn + a >= sn;\nloop invariant SIZE >= 0;\nloop invariant a == 1;\nloop invariant sn + a <= sn + a;\nloop invariant SIZE >= i - 1;\nloop invariant sn + a >= sn;\nloop invariant SIZE >= 0;\nloop invariant a == 1;\nloop invariant sn + a <= sn + a;\nloop invariant SIZE >= i - 1;\nloop invariant sn + a >= sn;\nloop invariant SIZE >= 0;\nloop invariant a == 1;\nloop invariant sn + a <= sn + a;\nloop invariant SIZE >= i - 1;\nloop invariant sn + a >= sn;\nloop invariant SIZE >= 0;\nloop invariant a == 1;\nloop invariant sn + a <= sn + a;\nloop invariant SIZE >= i - 1;\nloop invariant sn + a >= sn;\nloop invariant SIZE >= 0;\nloop invariant a == 1;\nloop invariant sn + a <= sn + a;\nloop invariant SIZE >= i - 1;\nloop invariant sn + a >= sn;\nloop invariant SIZE >= 0;\nloop invariant a == 1;\nloop invariant sn + a <= sn + a;\nloop invariant SIZE >= i - 1;\nloop invariant sn + a >= sn;\nloop invariant SIZE >= 0;\nloop invariant a == 1;\nloop invariant sn + a <= sn + a;\nloop invariant SIZE >= i - 1;\nloop invariant sn + a >= sn;\nloop invariant SIZE >= 0;\nloop invariant a == 1;\nloop invariant sn + a <= sn + a;\nloop invariant SIZE >= i - 1;\nloop invariant sn + a >= sn;\nloop invariant SIZE >= 0;\nloop invariant a == 1;\nloop invariant sn + a <= sn + a;\nloop invariant SIZE >= i - 1;\nloop invariant sn + a >= sn;\nloop invariant SIZE >= 0;\nloop invariant a == 1;\nloop invariant sn + a <= sn + a;\nloop invariant SIZE >= i - 1;\nloop invariant sn + a >= sn;\nloop invariant SIZE >= 0;\nloop invariant a == 1;\nloop invariant sn + a <= sn + a;\nloop invariant SIZE >= i - 1;\nloop invariant sn + a >= sn;\nloop invariant SIZE >= 0;\nloop invariant a == 1;\nloop invariant sn + a <= sn + a;\nloop invariant SIZE >= i - 1;\nloop invariant sn + a >= sn;\nloop invariant SIZE >= 0;\nloop invariant a == 1;\nloop invariant sn + a <= sn + a;\nloop invariant SIZE >= i - 1;\nloop invariant sn + a >= sn;\nloop invariant SIZE >= 0;\nloop invariant a == 1;\nloop invariant sn + a <= sn + a;\nloop invariant SIZE >= i - 1;\nloop invariant sn + a >= sn;\nloop invariant SIZE >= 0;\nloop invariant a == 1;\nloop invariant sn + a <= sn + a;\nloop invariant SIZE >= i - 1;\nloop invariant sn + a >= sn;\nloop invariant SIZE >= 0;\nloop invariant a == 1;\nloop invariant sn + a <= sn + a;\nloop invariant SIZE >= i - 1;\nloop invariant sn + a >= sn;\nloop invariant SIZE >= 0;\nloop invariant a == 1;\nloop invariant sn + a <= sn + a;\nloop invariant SIZE >= i - 1;\nloop invariant sn + a >= sn;\nloop invariant SIZE >= 0;\nloop invariant a == 1;\nloop invariant sn + a <= sn + a;\nloop invariant SIZE >= i - 1;\nloop invariant sn + a >= sn;\nloop invariant SIZE >= 0;\nloop invariant a == 1;\nloop invariant sn + a <= sn + a;\nloop invariant SIZE >= i - 1;\nloop invariant sn + a >= sn;\nloop invariant SIZE >= 0;\nloop invariant a == 1;\nloop invariant sn + a <= sn + a;\nloop invariant SIZE >= i - 1;\nloop invariant sn + a >= sn;\nloop invariant SIZE >= 0;\nloop invariant a == 1;\nloop invariant sn + a <= sn + a;\nloop invariant SIZE >= i - 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= SIZE + 1 is preserved but not established.\nloop invariant sn == (i - 1) * a is partially proven to be inductive.\nloop invariant SIZE >= 0 is partially proven to be inductive.\nloop invariant a == 1 is partially proven to be inductive.\nloop invariant sn <= SIZE * a is partially proven to be inductive.\nloop invariant SIZE >= i - 1 is partially proven to be inductive.\nloop invariant sn + a >= sn is partially proven to be inductive.\nloop invariant sn + a <= sn + a is partially proven to be inductive.\nAssertion sn == SIZE * 1 || sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  /*@\n\nloop invariant i2: sn == (i - 1) * a;\n\nloop invariant i4: a == 1;\n\n\nloop invariant i7: sn + a >= sn;\nloop invariant i8: sn + a <= sn + a;\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 9,
                    "annotations": "```\n/*@\nloop invariant 0 <= sn <= SIZE * a;\nloop invariant 1 <= i <= SIZE;\nloop invariant sn = (i - 1) * a;\nloop invariant sn >= 0;\nloop invariant sn <= SIZE * a;\nloop invariant i >= 1;\nloop invariant i <= SIZE;\nloop invariant i <= SIZE - sn / a;\nloop invariant sn >= SIZE * a * (1 - i) / i;\nloop invariant sn <= SIZE * a * (i - 1) / (i - 1);\nloop invariant sn = SIZE * a * (i - 1) / (i - 1);\nloop invariant sn = SIZE * a - SIZE * a / i;\nloop invariant sn = SIZE * a - SIZE * a * (i - 1) / i;\nloop invariant sn = SIZE * a - SIZE * a * (i - 1) / (i - 1);\nloop invariant sn = SIZE * a - SIZE * a * (i - 1) / (i - 1);\nloop invariant sn = SIZE * a - SIZE * a * (i - 1) / (i - 1);\nloop invariant sn = SIZE * a - SIZE * a * (i - 1) / (i - 1);\nloop invariant sn = SIZE * a - SIZE * a * (i - 1) / (i - 1);\nloop invariant sn = SIZE * a - SIZE * a * (i - 1) / (i - 1);\nloop invariant sn = SIZE * a - SIZE * a * (i - 1) / (i - 1);\nloop invariant 0 <= sn <= SIZE * a;\nloop invariant 1 <= i <= SIZE;\nloop invariant sn = (i - 1) * a;\nloop invariant sn >= 0;\nloop invariant sn <= SIZE * a;\nloop invariant i >= 1;\nloop invariant i <= SIZE;\nloop invariant i <= SIZE - sn / a;\nloop invariant sn >= SIZE * a * (1 - i) / i;\nloop invariant sn <= SIZE * a * (i - 1) / (i - 1);\nloop invariant sn = SIZE * a * (i - 1) / (i - 1);\nloop invariant sn = SIZE * a - SIZE * a / i;\nloop invariant sn = SIZE * a - SIZE * a * (i - 1) / i;\nloop invariant sn = SIZE * a - SIZE * a * (i - 1) / (i - 1);\nloop invariant sn = SIZE * a - SIZE * a * (i - 1) / (i - 1);\nloop invariant sn = SIZE * a - SIZE * a * (i - 1) / (i - 1);\nloop invariant sn = SIZE * a - SIZE * a * (i - 1) / (i - 1);\nloop invariant sn = SIZE * a - SIZE * a * (i - 1) / (i - 1);\nloop invariant sn = SIZE * a - SIZE * a * (i - 1) / (i - 1);\nloop invariant sn = SIZE * a - SIZE * a * (i - 1) / (i - 1);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 17: Assignment operators not allowed in annotations.",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  /*@\n\n\n\nloop invariant i4: sn >= 0;\n\nloop invariant i6: i >= 1;\n\n\nloop invariant i9: sn >= SIZE * a * (1 - i) / i;\n\n\n\n\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant 0 <= sn <= SIZE * a;\nloop invariant sn == i * a;\nloop invariant i * a <= SIZE * a;\nloop invariant i * a == SIZE * a ==> sn == SIZE * a;\nloop invariant SIZE * a <= SIZE * a;\nloop invariant SIZE * a == SIZE * a ==> sn == SIZE * a;\nloop invariant SIZE * a >= SIZE * a;\nloop invariant SIZE * a == SIZE * a ==> sn == SIZE * a;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= SIZE is preserved but not established.\nloop invariant 0 <= sn <= SIZE * a is partially proven to be inductive.\nloop invariant sn == i * a is preserved but not established.\nloop invariant i * a <= SIZE * a is partially proven to be inductive.\nloop invariant i * a == SIZE * a ==> sn == SIZE * a is partially proven to be inductive.\nloop invariant SIZE * a <= SIZE * a is partially proven to be inductive.\nloop invariant SIZE * a == SIZE * a ==> sn == SIZE * a is partially proven to be inductive.\nloop invariant SIZE * a >= SIZE * a is partially proven to be inductive.\nAssertion sn == SIZE * 1 || sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  /*@\n\n\n\n\n\nloop invariant i6: SIZE * a <= SIZE * a;\n\nloop invariant i8: SIZE * a >= SIZE * a;\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant ( sn >= 0);\nloop invariant ( sn <= SIZE * a );\nloop invariant ( sn + a * i == SIZE * a );\nloop invariant ( sn == SIZE * a * i / i );\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant ( sn >= 0) is partially proven to be inductive.\nloop invariant ( sn <= SIZE * a ) is preserved but not established.\nloop invariant ( sn + a * i == SIZE * a ) is preserved but not established.\nloop invariant ( sn == SIZE * a * i / i ) is preserved but not established.\nAssertion sn == SIZE * 1 || sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  /*@\nloop invariant i1: ( sn >= 0);\n\n\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant i >= 1;\nloop invariant i <= SIZE;\nloop invariant sn == i * a;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant i >= 1 is partially proven to be inductive.\nloop invariant i <= SIZE is preserved but not established.\nloop invariant sn == i * a is preserved but not established.\nAssertion sn == SIZE * 1 || sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  /*@\nloop invariant i1: i >= 1;\n\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant (sn == (i - 1) * a || sn == SIZE * a || sn == 0);\nloop invariant (i < SIZE ==> (sn == i * a) || (sn == 0));\nloop invariant (i == SIZE ==> sn == SIZE * a || sn == 0);\nloop invariant (i > SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= SIZE is neither established nor preserved.\nloop invariant (sn == (i - 1) * a || sn == SIZE * a || sn == 0) is established but not preserved.\nloop invariant (i < SIZE ==> (sn == i * a) || (sn == 0)) is established but not preserved.\nloop invariant (i == SIZE ==> sn == SIZE * a || sn == 0) is established but not preserved.\nloop invariant (i > SIZE ==> (sn == SIZE * a) || (sn == 0)) is partially proven to be inductive.\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0)) is partially proven to be inductive.\nAssertion sn == SIZE * 1 || sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  /*@\n\n\n\n\n\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 1 <= i <= SIZE + 1;\nloop invariant 0 <= sn <= SIZE * a;\nloop invariant sn == (i - 1) * a;\nloop invariant sn >= 0;\nloop invariant sn <= SIZE * a;\nloop invariant sn == i * a || sn == 0;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= i <= SIZE + 1 is preserved but not established.\nloop invariant 0 <= sn <= SIZE * a is partially proven to be inductive.\nloop invariant sn == (i - 1) * a is partially proven to be inductive.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn <= SIZE * a is partially proven to be inductive.\nloop invariant sn == i * a || sn == 0 is established but not preserved.\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a is partially proven to be inductive.\nAssertion sn == SIZE * 1 || sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  /*@\n\n\nloop invariant i3: sn == (i - 1) * a;\nloop invariant i4: sn >= 0;\n\n\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant 0 <= sn <= SIZE*a;\nloop invariant sn == i*a;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= SIZE is preserved but not established.\nloop invariant 0 <= sn <= SIZE*a is partially proven to be inductive.\nloop invariant sn == i*a is preserved but not established.\nAssertion sn == SIZE * 1 || sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  /*@\n\n\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant 1 <= i <= SIZE ==> sn == i * a;\nloop invariant i == SIZE ==> sn == SIZE * a;\nloop invariant i == SIZE ==> sn == 0;\nloop invariant 0 <= SIZE <= SIZE;\nloop invariant 0 <= sn <= SIZE * a;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= SIZE is preserved but not established.\nloop invariant 1 <= i <= SIZE ==> sn == i * a is preserved but not established.\nloop invariant i == SIZE ==> sn == SIZE * a is partially proven to be inductive.\nloop invariant i == SIZE ==> sn == 0 is partially proven to be inductive.\nloop invariant 0 <= SIZE <= SIZE is partially proven to be inductive.\nloop invariant 0 <= sn <= SIZE * a is partially proven to be inductive.\nAssertion sn == SIZE * 1 || sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  /*@\n\n\n\n\n\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant SIZE >= 0;\nloop invariant i >= 1;\nloop invariant i <= SIZE + 1;\nloop invariant sn >= 0;\nloop invariant sn <= SIZE * a;\nloop invariant (i == SIZE + 1) ==> (sn == SIZE * a);\nloop invariant (i == 1) ==> (sn == 0);\nloop invariant (i > 1 && i <= SIZE) ==> (sn == (i - 1) * a);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant SIZE >= 0 is preserved but not established.\nloop invariant i >= 1 is partially proven to be inductive.\nloop invariant i <= SIZE + 1 is partially proven to be inductive.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn <= SIZE * a is partially proven to be inductive.\nloop invariant (i == SIZE + 1) ==> (sn == SIZE * a) is partially proven to be inductive.\nloop invariant (i == 1) ==> (sn == 0) is partially proven to be inductive.\nloop invariant (i > 1 && i <= SIZE) ==> (sn == (i - 1) * a) is partially proven to be inductive.\nAssertion sn == SIZE * 1 || sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  /*@\n\nloop invariant i2: i >= 1;\n\nloop invariant i4: sn >= 0;\n\nloop invariant i6: (i == SIZE + 1) ==> (sn == SIZE * a);\nloop invariant i7: (i == 1) ==> (sn == 0);\nloop invariant i8: (i > 1 && i <= SIZE) ==> (sn == (i - 1) * a);\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant 0 <= sn <= (SIZE * a);\nloop invariant i == sn / a;\nloop invariant i * a == sn;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= SIZE is preserved but not established.\nloop invariant 0 <= sn <= (SIZE * a) is partially proven to be inductive.\nloop invariant i == sn / a is preserved but not established.\nloop invariant i * a == sn is partially proven to be inductive.\nAssertion sn == SIZE * 1 || sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  /*@\n\n\n\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                }
            ],
            "checker_output_for_combined_annotations": false,
            "checker_message_for_combined_annotations": "Annotation error on line 41: Assignment operators not allowed in annotations.",
            "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  /*@\nloop invariant i1: 0 <= i <= SIZE;\nloop invariant i2: sn == i*a;\nloop invariant i3: !(i > SIZE ==> a != 0);\nloop invariant i4: !(i > SIZE ==> sn != 0);\nloop invariant i5: 0 <= sn <= SIZE * a;\nloop invariant i6: SIZE >= 0;\nloop invariant i7: a >= 0;\nloop invariant i8: sn == (i - 1) * a;\nloop invariant i9: sn == (SIZE * (SIZE + 1) * a) / 2;\nloop invariant i10: SIZE * a >= sn >= 0;\nloop invariant i11: sn == (SIZE * a) * (SIZE + 1) / 2;\nloop invariant i12: sn == ((i - 1) * a) * (SIZE - i + 1) / 2;\nloop invariant i13: 1 <= i <= SIZE + 1;\nloop invariant i14: sn >= 0;\nloop invariant i15: sn >= i*a;\nloop invariant i16: sn <= i*a;\nloop invariant i17: i >= 1;\nloop invariant i18: i <= SIZE + 1;\nloop invariant i19: sn <= SIZE*a;\nloop invariant i20: 0 <= i <= SIZE + 1;\nloop invariant i21: a == 1;\nloop invariant i22: sn <= SIZE * a;\nloop invariant i23: SIZE >= i - 1;\nloop invariant i24: sn + a >= sn;\nloop invariant i25: sn + a <= sn + a;\nloop invariant i26: 1 <= i <= SIZE;\nloop invariant i27: sn = (i - 1) * a;\nloop invariant i28: i <= SIZE;\nloop invariant i29: i <= SIZE - sn / a;\nloop invariant i30: sn >= SIZE * a * (1 - i) / i;\nloop invariant i31: sn <= SIZE * a * (i - 1) / (i - 1);\nloop invariant i32: sn = SIZE * a * (i - 1) / (i - 1);\nloop invariant i33: sn = SIZE * a - SIZE * a / i;\nloop invariant i34: sn = SIZE * a - SIZE * a * (i - 1) / i;\nloop invariant i35: sn = SIZE * a - SIZE * a * (i - 1) / (i - 1);\nloop invariant i36: sn == i * a;\nloop invariant i37: i * a <= SIZE * a;\nloop invariant i38: i * a == SIZE * a ==> sn == SIZE * a;\nloop invariant i39: SIZE * a <= SIZE * a;\nloop invariant i40: SIZE * a == SIZE * a ==> sn == SIZE * a;\nloop invariant i41: SIZE * a >= SIZE * a;\nloop invariant i42: ( sn >= 0);\nloop invariant i43: ( sn <= SIZE * a );\nloop invariant i44: ( sn + a * i == SIZE * a );\nloop invariant i45: ( sn == SIZE * a * i / i );\nloop invariant i46: (sn == (i - 1) * a || sn == SIZE * a || sn == 0);\nloop invariant i47: (i < SIZE ==> (sn == i * a) || (sn == 0));\nloop invariant i48: (i == SIZE ==> sn == SIZE * a || sn == 0);\nloop invariant i49: (i > SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant i50: (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant i51: sn == i * a || sn == 0;\nloop invariant i52: sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant i53: 0 <= sn <= SIZE*a;\nloop invariant i54: 1 <= i <= SIZE ==> sn == i * a;\nloop invariant i55: i == SIZE ==> sn == SIZE * a;\nloop invariant i56: i == SIZE ==> sn == 0;\nloop invariant i57: 0 <= SIZE <= SIZE;\nloop invariant i58: (i == SIZE + 1) ==> (sn == SIZE * a);\nloop invariant i59: (i == 1) ==> (sn == 0);\nloop invariant i60: (i > 1 && i <= SIZE) ==> (sn == (i - 1) * a);\nloop invariant i61: 0 <= sn <= (SIZE * a);\nloop invariant i62: i == sn / a;\nloop invariant i63: i * a == sn;\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
            "combined_annotation_num_solver_calls": 21,
            "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  /*@\n\n\n\n\n\n\nloop invariant i7: a >= 0;\nloop invariant i8: sn == (i - 1) * a;\n\n\n\n\n\nloop invariant i14: sn >= 0;\n\nloop invariant i16: sn <= i*a;\nloop invariant i17: i >= 1;\n\n\n\nloop invariant i21: a == 1;\n\n\nloop invariant i24: sn + a >= sn;\nloop invariant i25: sn + a <= sn + a;\n\n\n\n\nloop invariant i30: sn >= SIZE * a * (1 - i) / i;\n\n\n\n\n\n\n\n\nloop invariant i39: SIZE * a <= SIZE * a;\n\nloop invariant i41: SIZE * a >= SIZE * a;\nloop invariant i42: ( sn >= 0);\n\n\n\nloop invariant i46: (sn == (i - 1) * a || sn == SIZE * a || sn == 0);\n\n\nloop invariant i49: (i > SIZE ==> (sn == SIZE * a) || (sn == 0));\n\n\n\n\n\n\n\n\nloop invariant i58: (i == SIZE + 1) ==> (sn == SIZE * a);\nloop invariant i59: (i == 1) ==> (sn == 0);\nloop invariant i60: (i > 1 && i <= SIZE) ==> (sn == (i - 1) * a);\n\n\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
            "checker_output_after_prune": true
        },
        {
            "file": "../dataset/loop_invariants/code2inv/86.c",
            "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = -50);\n  \n  while ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
            "success": false,
            "annotation_blocks": [
                "```\n/*@\nloop invariant y >= 0;\nloop invariant x >= -50;\nloop invariant x + y >= -50 + y;\nloop invariant x + y <= -50 + y + y;\nloop invariant x + y <= -50 + 2*y;\nloop invariant x + y <= -50 + 2*y + y;\nloop invariant x + y <= -50 + 3*y;\nloop invariant x + y <= -50 + 3*y + y;\nloop invariant x + y <= -50 + 4*y;\nloop invariant x + y <= -50 + 4*y + y;\nloop invariant x + y <= -50 + 5*y;\nloop invariant x + y <= -50 + 5*y + y;\nloop invariant x + y <= -50 + 6*y;\nloop invariant x + y <= -50 + 6*y + y;\nloop invariant x + y <= -50 + 7*y;\nloop invariant x + y <= -50 + 7*y + y;\nloop invariant x + y <= -50 + 8*y;\nloop invariant x + y <= -50 + 8*y + y;\nloop invariant x + y <= -50 + 9*y;\nloop invariant x + y <= -50 + 9*y + y;\nloop invariant x + y <= -50 + 10*y;\nloop invariant x + y <= -50 + 10*y + y;\nloop invariant x + y <= -50 + 11*y;\nloop invariant x + y <= -50 + 11*y + y;\nloop invariant x + y <= -50 + 12*y;\nloop invariant x + y <= -50 + 12*y + y;\nloop invariant x + y <= -50 + 13*y;\nloop invariant x + y <= -50 + 13*y + y;\nloop invariant x + y <= -50 + 14*y;\nloop invariant x + y <= -50 + 14*y + y;\nloop invariant x + y <= -50 + 15*y;\nloop invariant x + y <= -50 + 15*y + y;\nloop invariant x + y <= -50 + 16*y;\nloop invariant x + y <= -50 + 16*y + y;\nloop invariant x + y <= -50 + 17*y;\nloop invariant x + y <= -50 + 17*y + y;\nloop invariant x + y <= -50 + 18*y;\nloop invariant x + y <= -50 + 18*y + y;\nloop invariant x + y <= -50 + 19*y;\nloop invariant x + y <= -50 + 19*y + y;\nloop invariant x + y <= -50 + 20*y;\nloop invariant x + y <= -50 + 20*y + y;\nloop invariant x + y <= -50 + 21*y;\nloop invariant x + y <= -50 + 21*y + y;\nloop invariant x + y <= -50 + 22*y;\nloop invariant x + y <= -50 + 22*y + y;\nloop invariant x + y <= -50 + 23*y;\nloop invariant x + y <= -50 + 23*y + y;\nloop invariant x + y <= -50 + 24*y;\nloop invariant x + y <= -50 + 24*y + y;\nloop invariant x + y <= -50 + 25*y;\nloop invariant x + y <= -50 + 25*y + y;\nloop invariant x + y <= -50 + 26*y;\nloop invariant x + y <= -50 + 26*y + y;\nloop invariant x + y <= -50 + 27*y;\nloop invariant x + y <= -50 + 27*y + y;\nloop invariant x + y <= -50 + 28*y;\nloop invariant x + y <= -50 + 28*y + y;\nloop invariant x + y <= -50 + 29*y;\nloop invariant x + y <= -50 + 29*y + y;\nloop invariant x + y <= -50 + 30*y;\nloop invariant x + y <= -50 + 30*y + y;\nloop invariant x + y <= -50 + 31*y;\nloop invariant x + y <= -50 + 31*y + y;\nloop invariant x + y <= -50 + 32*y;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= y;\nloop invariant y <= 100000;\nloop invariant -50 <= x;\nloop invariant x <= 50 + y;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= y <= 50;\nloop invariant x <= y;\nloop invariant x >= -50;\nloop invariant x < y;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= y <= -50;\nloop invariant x >= y;\nloop invariant x <= 0;\nloop invariant x + y >= y;\nloop invariant x + y <= 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "```\n/*@\nloop invariant ( x >= -50 );\nloop invariant ( y >= 0 );\nloop invariant ( x < 0 );\nloop invariant ( y <= 100 );\nloop invariant ( x <= -50 );\nloop invariant ( y < 100 );\nloop invariant ( x >= -50 );\nloop invariant ( y >= 0 );\nloop invariant ( x < 0 );\nloop invariant ( y <= 100 );\nloop invariant ( x <= -50 );\nloop invariant ( y < 100 );\nloop invariant ( x >= -50 );\nloop invariant ( y >= 0 );\nloop invariant ( x < 0 );\nloop invariant ( y <= 100 );\nloop invariant ( x <= -50 );\nloop invariant ( y < 100 );\nloop invariant ( x >= -50 );\nloop invariant ( y >= 0 );\nloop invariant ( x < 0 );\nloop invariant ( y <= 100 );\nloop invariant ( x <= -50 );\nloop invariant ( y < 100 );\nloop invariant ( x >= -50 );\nloop invariant ( y >= 0 );\nloop invariant ( x < 0 );\nloop invariant ( y <= 100 );\nloop invariant ( x <= -50 );\nloop invariant ( y < 100 );\nloop invariant ( x >= -50 );\nloop invariant ( y >= 0 );\nloop invariant ( x < 0 );\nloop invariant ( y <= 100 );\nloop invariant ( x <= -50 );\nloop invariant ( y < 100 );\nloop invariant ( x >= -50 );\nloop invariant ( y >= 0 );\nloop invariant ( x < 0 );\nloop invariant ( y <= 100 );\nloop invariant ( x <= -50 );\nloop invariant ( y < 100 );\nloop invariant ( x >= -50 );\nloop invariant ( y >= 0 );\nloop invariant ( x < 0 );\nloop invariant ( y <= 100 );\nloop invariant ( x <= -50 );\nloop invariant ( y < 100 );\nloop invariant ( x >= -50 );\nloop invariant ( y >= 0 );\nloop invariant ( x < 0 );\nloop invariant ( y <= 100 );\nloop invariant ( x <= -50 );\nloop invariant ( y < 100 );\nloop invariant ( x >= -50 );\nloop invariant ( y >= 0 );\nloop invariant ( x < 0 );\nloop invariant ( y <= 100 );\nloop invariant ( x <= -50 );\nloop invariant ( y < 100 );\nloop invariant ( x >= -50 );\nloop invariant ( y >= 0 );\nloop invariant ( x < 0 );\nloop invariant ( y <= 100 );\nloop invariant ( x <= -50 );\nloop invariant ( y < 100 );\nloop invariant ( x >= -50 );\nloop invariant ( y >= 0 );\nloop invariant ( x < 0 );\nloop invariant ( y <= 100 );\nloop invariant ( x <= -50 );\nloop invariant ( y < 100 );\nloop invariant ( x >= -50 );\nloop invariant ( y >= 0 );\nloop invariant ( x < 0 );\nloop invariant ( y <= 100 );\nloop invariant ( x <= -50 );\nloop invariant ( y < 100 );\nloop invariant ( x >= -50 );\nloop invariant ( y >= 0 );\nloop invariant ( x < 0 );\nloop invariant ( y <= 100 );\nloop invariant ( x <= -50 );\nloop invariant ( y < 100 );\nloop invariant ( x >= -50 );\nloop invariant ( y >= 0 );\nloop invariant ( x < 0 );\nloop invariant ( y <= 100 );\nloop invariant ( x <= -50 );\nloop invariant ( y < 100 );\nloop invariant ( x >= -50 );\nloop invariant ( y >= 0 );\nloop invariant ( x < 0 );\nloop invariant ( y <= 100 );\nloop invariant ( x <= -50 );\nloop invariant ( y < 100 );\nloop invariant ( x >= -50 );\nloop invariant ( y >= 0 );\nloop invariant ( x < 0 );\nloop invariant ( y <= 100 );\nloop invariant ( x <= -50 );\nloop invariant ( y < 100 );\nloop invariant ( x >= -50 );\nloop invariant ( y >= 0 );\nloop invariant ( x < 0 );\nloop invariant ( y <= 100 );\nloop invariant ( x <= -50 );\nloop invariant ( y < 100 );\nloop invariant ( x >= -50 );\nloop invariant ( y >= 0 );\nloop invariant ( x < 0 );\n*/\n```",
                "```\n/*@\nloop invariant 0 <= y;\nloop invariant x >= (x + y) ==> x >= -50;\nloop invariant x >= (x + y) ==> y >= 0;\nloop invariant x >= (x + y) ==> x + y >= 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= -50;\nloop invariant y >= 1;\nloop invariant y <= 0;\nloop invariant x <= y;\nloop invariant x + y >= 0;\nloop invariant x + y <= 0;\n*/\n```",
                "```\n/*@\nloop invariant x >= -50;\nloop invariant y >= 0;\nloop invariant x < 0;\nloop invariant y < 100000;\nloop invariant x <= y;\nloop invariant x >= -50 + y;\nloop invariant y >= 0 + y;\nloop invariant y <= 100000 - y;\nloop invariant x <= y - y;\nloop invariant x >= -50 + y - y;\nloop invariant y >= 0 + y - y;\nloop invariant y <= 100000 - y + y;\nloop invariant x <= y - y + y;\nloop invariant x >= -50 + y - y + y;\nloop invariant y >= 0 + y - y + y;\nloop invariant y <= 100000 - y + y - y;\nloop invariant x <= y - y + y - y;\nloop invariant x >= -50 + y - y + y - y;\nloop invariant y >= 0 + y - y + y - y;\nloop invariant y <= 100000 - y + y - y + y;\nloop invariant x <= y - y + y - y + y;\nloop invariant x >= -50 + y - y + y - y + y;\nloop invariant y >= 0 + y - y + y - y + y;\nloop invariant y <= 100000 - y + y - y + y - y;\nloop invariant x <= y - y + y - y + y - y;\nloop invariant x >= -50 + y - y + y - y + y - y;\nloop invariant y >= 0 + y - y + y - y + y - y;\nloop invariant y <= 100000 - y + y - y + y - y + y;\nloop invariant x <= y - y + y - y + y - y + y;\nloop invariant x >= -50 + y - y + y - y + y - y + y;\nloop invariant y >= 0 + y - y + y - y + y - y + y;\nloop invariant y <= 100000 - y + y - y + y - y + y - y;\nloop invariant x <= y - y + y - y + y - y + y - y;\nloop invariant x >= -50 + y - y + y - y + y - y + y - y;\nloop invariant y >= 0 + y - y + y - y + y - y + y - y;\nloop invariant y <= 100000 - y + y - y + y - y + y - y + y;\nloop invariant x <= y - y + y - y + y - y + y - y + y;\nloop invariant x >= -50 + y - y + y - y + y - y + y - y + y;\nloop invariant y >= 0 + y - y + y - y + y - y + y - y + y;\nloop invariant y <= 100000 - y + y - y + y - y + y - y + y - y;\nloop invariant x <= y - y + y - y + y - y + y - y + y - y;\nloop invariant x >= -50 + y - y + y - y + y - y + y - y + y - y;\nloop invariant y >= 0 + y - y + y - y + y - y + y - y + y - y;\nloop invariant y <= 100000 - y + y - y + y - y + y - y + y - y + y;\nloop invariant x <= y - y + y - y + y - y + y - y + y - y + y;\nloop invariant x >= -50 + y - y + y - y + y - y + y - y + y - y + y;\nloop invariant y >= 0 + y - y + y - y + y - y + y - y + y - y + y;\nloop invariant y <= 100000 - y + y - y + y - y + y - y + y - y + y - y;\nloop invariant x <= y - y + y - y + y - y + y - y + y - y + y - y;\nloop invariant x >= -50 + y - y + y - y + y - y + y - y + y - y + y - y;\nloop invariant y >= 0 + y - y + y - y + y - y + y - y + y - y + y - y;\n*/\n```",
                "```\n/*@\nloop invariant y >= 0;\nloop invariant x <= 0;\nloop invariant x + y >= -50;\nloop invariant y <= -x - 50;\nloop invariant x + y >= -50 ==> (y > 0);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= y <= -50;\nloop invariant x >= (x + y);\nloop invariant y >= 1;\nloop invariant x >= -50;\nloop invariant y >= x;\nloop invariant y <= -50;\nloop invariant y >= 1;\nloop invariant y <= -50;\nloop invariant y >= 1;\nloop invariant y <= -50;\nloop invariant y >= 1;\nloop invariant y <= -50;\nloop invariant y >= 1;\nloop invariant y <= -50;\nloop invariant y >= 1;\nloop invariant y <= -50;\nloop invariant y >= 1;\nloop invariant y <= -50;\nloop invariant y >= 1;\nloop invariant y <= -50;\nloop invariant y >= 1;\nloop invariant y <= -50;\nloop invariant y >= 1;\nloop invariant y <= -50;\nloop invariant y >= 1;\nloop invariant y <= -50;\nloop invariant y >= 1;\nloop invariant y <= -50;\nloop invariant y >= 1;\nloop invariant y <= -50;\nloop invariant y >= 1;\nloop invariant y <= -50;\nloop invariant y >= 1;\nloop invariant y <= -50;\nloop invariant y >= 1;\nloop invariant y <= -50;\nloop invariant y >= 1;\nloop invariant y <= -50;\nloop invariant y >= 1;\nloop invariant y <= -50;\nloop invariant y >= 1;\nloop invariant y <= -50;\nloop invariant y >= 1;\nloop invariant y <= -50;\nloop invariant y >= 1;\nloop invariant y <= -50;\nloop invariant y >= 1;\nloop invariant y <= -50;\nloop invariant y >= 1;\nloop invariant y <= -50;\nloop invariant y >= 1;\nloop invariant y <= -50;\nloop invariant y >= 1;\nloop invariant y <= -50;\nloop invariant y >= 1;\nloop invariant y <= -50;\nloop invariant y >= 1;\nloop invariant y <= -50;\nloop invariant y >= 1;\nloop invariant y <= -50;\nloop invariant y >= 1;\nloop invariant y <= -50;\nloop invariant y >= 1;\nloop invariant y <= -50;\nloop invariant y >= 1;\nloop invariant y <= -50;\nloop invariant y >= 1;\nloop invariant y <= -50;\nloop invariant y >= 1;\nloop invariant y <= -50;\nloop invariant y >= 1;\nloop invariant y <= -50;\nloop invariant y >= 1;\nloop invariant y <= -50;\nloop invariant y >= 1;\nloop invariant y <= -50;\nloop invariant y >= 1;\nloop invariant y <= -50;\nloop invariant y >= 1;\nloop invariant y <= -50;\nloop invariant y >= 1;\nloop invariant y <= -50;\nloop invariant y >= 1;\nloop invariant y <= -50;\nloop invariant y >= 1;\nloop invariant y <= -50;\nloop invariant y >= 1;\nloop invariant y <= -50;\nloop invariant y >= 1;\nloop invariant y <= -50;\nloop invariant y >= 1;\nloop invariant y <= -50;\nloop invariant y >= 1;\nloop invariant y <= -50;\nloop invariant y >= 1;\nloop invariant y <= -50;\nloop invariant y >= 1;\nloop invariant y <= -50;\nloop invariant y >= 1;\nloop invariant y <= -50;\nloop invariant y >= 1;\nloop invariant y <= -50;\nloop invariant y >= 1;\nloop invariant y <= -50;\nloop invariant y >= 1;\nloop invariant y <= -50;\nloop invariant y >= 1;\nloop invariant y <= -50;\nloop invariant y >= 1;\nloop invariant y <= -50;\nloop invariant y >= 1;\nloop invariant y <= -50;\nloop invariant y >= 1;\nloop invariant y <= -50;\nloop invariant y >= 1;\nloop invariant y <= -50;\nloop invariant y >= 1;\nloop invariant y <= -50;\nloop invariant y >= 1;\nloop invariant y <= -50;\nloop invariant y >= 1;\nloop invariant y <= -50;\nloop invariant y >= 1;\nloop invariant y <= -50;\nloop invariant y >= 1;\nloop invariant y <= -50;\nloop invariant y >= 1;\nloop invariant y <= -50;\nloop invariant y >= 1;\nloop invariant y <= -50;\nloop invariant y >= 1;\nloop invariant y <= -50;\n*/\n```",
                "```\n/*@\nloop invariant 1 <= x <= 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 0;\nloop invariant y >= 0;\nloop invariant y <= 100000;\nloop invariant x >= -50;\nloop invariant x <= 50;\nloop invariant x >= -50 + (y - 1) * y / 2;\nloop invariant x <= -50 + (y - 1) * y / 2;\nloop invariant x >= -50 + (y - 1) * y / 2;\nloop invariant x <= -50 + (y - 1) * y / 2;\nloop invariant x >= -50 + (y - 1) * y / 2;\nloop invariant x <= -50 + (y - 1) * y / 2;\nloop invariant x >= -50 + (y - 1) * y / 2;\nloop invariant x <= -50 + (y - 1) * y / 2;\nloop invariant x >= -50 + (y - 1) * y / 2;\nloop invariant x <= -50 + (y - 1) * y / 2;\nloop invariant x >= -50 + (y - 1) * y / 2;\nloop invariant x <= -50 + (y - 1) * y / 2;\nloop invariant x >= -50 + (y - 1) * y / 2;\nloop invariant x <= -50 + (y - 1) * y / 2;\nloop invariant x >= -50 + (y - 1) * y / 2;\nloop invariant x <= -50 + (y - 1) * y / 2;\nloop invariant x >= -50 + (y - 1) * y / 2;\nloop invariant x <= -50 + (y - 1) * y / 2;\nloop invariant x >= -50 + (y - 1) * y / 2;\nloop invariant x <= -50 + (y - 1) * y / 2;\nloop invariant x >= -50 + (y - 1) * y / 2;\nloop invariant x <= -50 + (y - 1) * y / 2;\nloop invariant x >= -50 + (y - 1) * y / 2;\nloop invariant x <= -50 + (y - 1) * y / 2;\nloop invariant x >= -50 + (y - 1) * y / 2;\nloop invariant x <= -50 + (y - 1) * y / 2;\nloop invariant x >= -50 + (y - 1) * y / 2;\nloop invariant x <= -50 + (y - 1) * y / 2;\nloop invariant x >= -50 + (y - 1) * y / 2;\nloop invariant x <= -50 + (y - 1) * y / 2;\nloop invariant x >= -50 + (y - 1) * y / 2;\nloop invariant x <= -50 + (y - 1) * y / 2;\nloop invariant x >= -50 + (y - 1) * y / 2;\nloop invariant x <= -50 + (y - 1) * y / 2;\nloop invariant x >= -50 + (y - 1) * y / 2;\nloop invariant x <= -50 + (y - 1) * y / 2;\nloop invariant x >= -50 + (y - 1) * y / 2;\nloop invariant x <= -50 + (y - 1) * y / 2;\nloop invariant x >= -50 + (y - 1) * y / 2;\nloop invariant x <= -50 + (y - 1) * y / 2;\nloop invariant x >= -50 + (y - 1) * y / 2;\nloop invariant x <= -50 + (y - 1) * y / 2;\nloop invariant x >= -50 + (y - 1) * y / 2;\nloop invariant x <= -50 + (y - 1) * y / 2;\nloop invariant x >= -50 + (y - 1) * y / 2;\nloop invariant x <= -50 + (y - 1) * y / 2;\nloop invariant x >= -50 + (y - 1) * y / 2;\n*/\n```"
            ],
            "completions": [
                {
                    "num_solver_calls": 65,
                    "annotations": "```\n/*@\nloop invariant y >= 0;\nloop invariant x >= -50;\nloop invariant x + y >= -50 + y;\nloop invariant x + y <= -50 + y + y;\nloop invariant x + y <= -50 + 2*y;\nloop invariant x + y <= -50 + 2*y + y;\nloop invariant x + y <= -50 + 3*y;\nloop invariant x + y <= -50 + 3*y + y;\nloop invariant x + y <= -50 + 4*y;\nloop invariant x + y <= -50 + 4*y + y;\nloop invariant x + y <= -50 + 5*y;\nloop invariant x + y <= -50 + 5*y + y;\nloop invariant x + y <= -50 + 6*y;\nloop invariant x + y <= -50 + 6*y + y;\nloop invariant x + y <= -50 + 7*y;\nloop invariant x + y <= -50 + 7*y + y;\nloop invariant x + y <= -50 + 8*y;\nloop invariant x + y <= -50 + 8*y + y;\nloop invariant x + y <= -50 + 9*y;\nloop invariant x + y <= -50 + 9*y + y;\nloop invariant x + y <= -50 + 10*y;\nloop invariant x + y <= -50 + 10*y + y;\nloop invariant x + y <= -50 + 11*y;\nloop invariant x + y <= -50 + 11*y + y;\nloop invariant x + y <= -50 + 12*y;\nloop invariant x + y <= -50 + 12*y + y;\nloop invariant x + y <= -50 + 13*y;\nloop invariant x + y <= -50 + 13*y + y;\nloop invariant x + y <= -50 + 14*y;\nloop invariant x + y <= -50 + 14*y + y;\nloop invariant x + y <= -50 + 15*y;\nloop invariant x + y <= -50 + 15*y + y;\nloop invariant x + y <= -50 + 16*y;\nloop invariant x + y <= -50 + 16*y + y;\nloop invariant x + y <= -50 + 17*y;\nloop invariant x + y <= -50 + 17*y + y;\nloop invariant x + y <= -50 + 18*y;\nloop invariant x + y <= -50 + 18*y + y;\nloop invariant x + y <= -50 + 19*y;\nloop invariant x + y <= -50 + 19*y + y;\nloop invariant x + y <= -50 + 20*y;\nloop invariant x + y <= -50 + 20*y + y;\nloop invariant x + y <= -50 + 21*y;\nloop invariant x + y <= -50 + 21*y + y;\nloop invariant x + y <= -50 + 22*y;\nloop invariant x + y <= -50 + 22*y + y;\nloop invariant x + y <= -50 + 23*y;\nloop invariant x + y <= -50 + 23*y + y;\nloop invariant x + y <= -50 + 24*y;\nloop invariant x + y <= -50 + 24*y + y;\nloop invariant x + y <= -50 + 25*y;\nloop invariant x + y <= -50 + 25*y + y;\nloop invariant x + y <= -50 + 26*y;\nloop invariant x + y <= -50 + 26*y + y;\nloop invariant x + y <= -50 + 27*y;\nloop invariant x + y <= -50 + 27*y + y;\nloop invariant x + y <= -50 + 28*y;\nloop invariant x + y <= -50 + 28*y + y;\nloop invariant x + y <= -50 + 29*y;\nloop invariant x + y <= -50 + 29*y + y;\nloop invariant x + y <= -50 + 30*y;\nloop invariant x + y <= -50 + 30*y + y;\nloop invariant x + y <= -50 + 31*y;\nloop invariant x + y <= -50 + 31*y + y;\nloop invariant x + y <= -50 + 32*y;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant y >= 0 is preserved but not established.\nloop invariant x >= -50 is partially proven to be inductive.\nloop invariant x + y >= -50 + y is partially proven to be inductive.\nloop invariant x + y <= -50 + y + y is established but not preserved.\nloop invariant x + y <= -50 + 2*y is partially proven to be inductive.\nloop invariant x + y <= -50 + 2*y + y is partially proven to be inductive.\nloop invariant x + y <= -50 + 3*y is partially proven to be inductive.\nloop invariant x + y <= -50 + 3*y + y is partially proven to be inductive.\nloop invariant x + y <= -50 + 4*y is partially proven to be inductive.\nloop invariant x + y <= -50 + 4*y + y is partially proven to be inductive.\nloop invariant x + y <= -50 + 5*y is partially proven to be inductive.\nloop invariant x + y <= -50 + 5*y + y is partially proven to be inductive.\nloop invariant x + y <= -50 + 6*y is partially proven to be inductive.\nloop invariant x + y <= -50 + 6*y + y is partially proven to be inductive.\nloop invariant x + y <= -50 + 7*y is partially proven to be inductive.\nloop invariant x + y <= -50 + 7*y + y is partially proven to be inductive.\nloop invariant x + y <= -50 + 8*y is partially proven to be inductive.\nloop invariant x + y <= -50 + 8*y + y is partially proven to be inductive.\nloop invariant x + y <= -50 + 9*y is partially proven to be inductive.\nloop invariant x + y <= -50 + 9*y + y is partially proven to be inductive.\nloop invariant x + y <= -50 + 10*y is partially proven to be inductive.\nloop invariant x + y <= -50 + 10*y + y is partially proven to be inductive.\nloop invariant x + y <= -50 + 11*y is partially proven to be inductive.\nloop invariant x + y <= -50 + 11*y + y is partially proven to be inductive.\nloop invariant x + y <= -50 + 12*y is partially proven to be inductive.\nloop invariant x + y <= -50 + 12*y + y is partially proven to be inductive.\nloop invariant x + y <= -50 + 13*y is partially proven to be inductive.\nloop invariant x + y <= -50 + 13*y + y is partially proven to be inductive.\nloop invariant x + y <= -50 + 14*y is partially proven to be inductive.\nloop invariant x + y <= -50 + 14*y + y is partially proven to be inductive.\nloop invariant x + y <= -50 + 15*y is partially proven to be inductive.\nloop invariant x + y <= -50 + 15*y + y is partially proven to be inductive.\nloop invariant x + y <= -50 + 16*y is partially proven to be inductive.\nloop invariant x + y <= -50 + 16*y + y is partially proven to be inductive.\nloop invariant x + y <= -50 + 17*y is partially proven to be inductive.\nloop invariant x + y <= -50 + 17*y + y is partially proven to be inductive.\nloop invariant x + y <= -50 + 18*y is partially proven to be inductive.\nloop invariant x + y <= -50 + 18*y + y is partially proven to be inductive.\nloop invariant x + y <= -50 + 19*y is partially proven to be inductive.\nloop invariant x + y <= -50 + 19*y + y is partially proven to be inductive.\nloop invariant x + y <= -50 + 20*y is partially proven to be inductive.\nloop invariant x + y <= -50 + 20*y + y is partially proven to be inductive.\nloop invariant x + y <= -50 + 21*y is partially proven to be inductive.\nloop invariant x + y <= -50 + 21*y + y is partially proven to be inductive.\nloop invariant x + y <= -50 + 22*y is partially proven to be inductive.\nloop invariant x + y <= -50 + 22*y + y is partially proven to be inductive.\nloop invariant x + y <= -50 + 23*y is partially proven to be inductive.\nloop invariant x + y <= -50 + 23*y + y is partially proven to be inductive.\nloop invariant x + y <= -50 + 24*y is partially proven to be inductive.\nloop invariant x + y <= -50 + 24*y + y is partially proven to be inductive.\nloop invariant x + y <= -50 + 25*y is partially proven to be inductive.\nloop invariant x + y <= -50 + 25*y + y is partially proven to be inductive.\nloop invariant x + y <= -50 + 26*y is partially proven to be inductive.\nloop invariant x + y <= -50 + 26*y + y is partially proven to be inductive.\nloop invariant x + y <= -50 + 27*y is partially proven to be inductive.\nloop invariant x + y <= -50 + 27*y + y is partially proven to be inductive.\nloop invariant x + y <= -50 + 28*y is partially proven to be inductive.\nloop invariant x + y <= -50 + 28*y + y is partially proven to be inductive.\nloop invariant x + y <= -50 + 29*y is partially proven to be inductive.\nloop invariant x + y <= -50 + 29*y + y is partially proven to be inductive.\nloop invariant x + y <= -50 + 30*y is partially proven to be inductive.\nloop invariant x + y <= -50 + 30*y + y is partially proven to be inductive.\nloop invariant x + y <= -50 + 31*y is partially proven to be inductive.\nloop invariant x + y <= -50 + 31*y + y is partially proven to be inductive.\nloop invariant x + y <= -50 + 32*y is partially proven to be inductive.\nAssertion y > 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = -50);\n  \n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= y <= 100000 is preserved but not established.\nloop invariant x >= (1 + (y - 1) * y / 2) is preserved but not established.\nAssertion y > 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = -50);\n  \n  /*@\n\n\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= y;\nloop invariant y <= 100000;\nloop invariant -50 <= x;\nloop invariant x <= 50 + y;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= y is preserved but not established.\nloop invariant y <= 100000 is neither established nor preserved.\nloop invariant -50 <= x is partially proven to be inductive.\nloop invariant x <= 50 + y is partially proven to be inductive.\nAssertion y > 0: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = -50);\n  \n  /*@\n\n\n\n\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= y <= 50;\nloop invariant x <= y;\nloop invariant x >= -50;\nloop invariant x < y;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= y <= 50 is neither established nor preserved.\nloop invariant x <= y is partially proven to be inductive.\nloop invariant x >= -50 is partially proven to be inductive.\nloop invariant x < y is partially proven to be inductive.\nAssertion y > 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = -50);\n  \n  /*@\n\n\n\n\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= y <= -50;\nloop invariant x >= y;\nloop invariant x <= 0;\nloop invariant x + y >= y;\nloop invariant x + y <= 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= y <= -50 is preserved but not established.\nloop invariant x >= y is partially proven to be inductive.\nloop invariant x <= 0 is partially proven to be inductive.\nloop invariant x + y >= y is partially proven to be inductive.\nloop invariant x + y <= 0 is partially proven to be inductive.\nAssertion y > 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = -50);\n  \n  /*@\n\n\n\n\n\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= y <= 100000 is preserved but not established.\nloop invariant x >= (1 + (y - 1) * y / 2) is preserved but not established.\nAssertion y > 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = -50);\n  \n  /*@\n\n\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant ( x >= -50 );\nloop invariant ( y >= 0 );\nloop invariant ( x < 0 );\nloop invariant ( y <= 100 );\nloop invariant ( x <= -50 );\nloop invariant ( y < 100 );\nloop invariant ( x >= -50 );\nloop invariant ( y >= 0 );\nloop invariant ( x < 0 );\nloop invariant ( y <= 100 );\nloop invariant ( x <= -50 );\nloop invariant ( y < 100 );\nloop invariant ( x >= -50 );\nloop invariant ( y >= 0 );\nloop invariant ( x < 0 );\nloop invariant ( y <= 100 );\nloop invariant ( x <= -50 );\nloop invariant ( y < 100 );\nloop invariant ( x >= -50 );\nloop invariant ( y >= 0 );\nloop invariant ( x < 0 );\nloop invariant ( y <= 100 );\nloop invariant ( x <= -50 );\nloop invariant ( y < 100 );\nloop invariant ( x >= -50 );\nloop invariant ( y >= 0 );\nloop invariant ( x < 0 );\nloop invariant ( y <= 100 );\nloop invariant ( x <= -50 );\nloop invariant ( y < 100 );\nloop invariant ( x >= -50 );\nloop invariant ( y >= 0 );\nloop invariant ( x < 0 );\nloop invariant ( y <= 100 );\nloop invariant ( x <= -50 );\nloop invariant ( y < 100 );\nloop invariant ( x >= -50 );\nloop invariant ( y >= 0 );\nloop invariant ( x < 0 );\nloop invariant ( y <= 100 );\nloop invariant ( x <= -50 );\nloop invariant ( y < 100 );\nloop invariant ( x >= -50 );\nloop invariant ( y >= 0 );\nloop invariant ( x < 0 );\nloop invariant ( y <= 100 );\nloop invariant ( x <= -50 );\nloop invariant ( y < 100 );\nloop invariant ( x >= -50 );\nloop invariant ( y >= 0 );\nloop invariant ( x < 0 );\nloop invariant ( y <= 100 );\nloop invariant ( x <= -50 );\nloop invariant ( y < 100 );\nloop invariant ( x >= -50 );\nloop invariant ( y >= 0 );\nloop invariant ( x < 0 );\nloop invariant ( y <= 100 );\nloop invariant ( x <= -50 );\nloop invariant ( y < 100 );\nloop invariant ( x >= -50 );\nloop invariant ( y >= 0 );\nloop invariant ( x < 0 );\nloop invariant ( y <= 100 );\nloop invariant ( x <= -50 );\nloop invariant ( y < 100 );\nloop invariant ( x >= -50 );\nloop invariant ( y >= 0 );\nloop invariant ( x < 0 );\nloop invariant ( y <= 100 );\nloop invariant ( x <= -50 );\nloop invariant ( y < 100 );\nloop invariant ( x >= -50 );\nloop invariant ( y >= 0 );\nloop invariant ( x < 0 );\nloop invariant ( y <= 100 );\nloop invariant ( x <= -50 );\nloop invariant ( y < 100 );\nloop invariant ( x >= -50 );\nloop invariant ( y >= 0 );\nloop invariant ( x < 0 );\nloop invariant ( y <= 100 );\nloop invariant ( x <= -50 );\nloop invariant ( y < 100 );\nloop invariant ( x >= -50 );\nloop invariant ( y >= 0 );\nloop invariant ( x < 0 );\nloop invariant ( y <= 100 );\nloop invariant ( x <= -50 );\nloop invariant ( y < 100 );\nloop invariant ( x >= -50 );\nloop invariant ( y >= 0 );\nloop invariant ( x < 0 );\nloop invariant ( y <= 100 );\nloop invariant ( x <= -50 );\nloop invariant ( y < 100 );\nloop invariant ( x >= -50 );\nloop invariant ( y >= 0 );\nloop invariant ( x < 0 );\nloop invariant ( y <= 100 );\nloop invariant ( x <= -50 );\nloop invariant ( y < 100 );\nloop invariant ( x >= -50 );\nloop invariant ( y >= 0 );\nloop invariant ( x < 0 );\nloop invariant ( y <= 100 );\nloop invariant ( x <= -50 );\nloop invariant ( y < 100 );\nloop invariant ( x >= -50 );\nloop invariant ( y >= 0 );\nloop invariant ( x < 0 );\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant ( x >= -50 ) is partially proven to be inductive.\nloop invariant ( y >= 0 ) is preserved but not established.\nloop invariant ( x < 0 ) is established but not preserved.\nloop invariant ( y <= 100 ) is preserved but not established.\nloop invariant ( x <= -50 ) is established but not preserved.\nloop invariant ( y < 100 ) is preserved but not established.\nAssertion y > 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = -50);\n  \n  /*@\n\n\n\n\n\n\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= y;\nloop invariant x >= (x + y) ==> x >= -50;\nloop invariant x >= (x + y) ==> y >= 0;\nloop invariant x >= (x + y) ==> x + y >= 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= y is preserved but not established.\nloop invariant x >= (x + y) ==> x >= -50 is partially proven to be inductive.\nloop invariant x >= (x + y) ==> y >= 0 is partially proven to be inductive.\nloop invariant x >= (x + y) ==> x + y >= 0 is preserved but not established.\nAssertion y > 0: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = -50);\n  \n  /*@\n\n\n\n\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= -50;\nloop invariant y >= 1;\nloop invariant y <= 0;\nloop invariant x <= y;\nloop invariant x + y >= 0;\nloop invariant x + y <= 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= y <= 100000 is preserved but not established.\nloop invariant x >= (1 + (y - 1) * y / 2) is preserved but not established.\nloop invariant x >= -50 is partially proven to be inductive.\nloop invariant y >= 1 is partially proven to be inductive.\nloop invariant y <= 0 is partially proven to be inductive.\nloop invariant x <= y is partially proven to be inductive.\nloop invariant x + y >= 0 is partially proven to be inductive.\nloop invariant x + y <= 0 is partially proven to be inductive.\nAssertion y > 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = -50);\n  \n  /*@\n\n\n\n\n\n\n\n\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 16,
                    "annotations": "```\n/*@\nloop invariant x >= -50;\nloop invariant y >= 0;\nloop invariant x < 0;\nloop invariant y < 100000;\nloop invariant x <= y;\nloop invariant x >= -50 + y;\nloop invariant y >= 0 + y;\nloop invariant y <= 100000 - y;\nloop invariant x <= y - y;\nloop invariant x >= -50 + y - y;\nloop invariant y >= 0 + y - y;\nloop invariant y <= 100000 - y + y;\nloop invariant x <= y - y + y;\nloop invariant x >= -50 + y - y + y;\nloop invariant y >= 0 + y - y + y;\nloop invariant y <= 100000 - y + y - y;\nloop invariant x <= y - y + y - y;\nloop invariant x >= -50 + y - y + y - y;\nloop invariant y >= 0 + y - y + y - y;\nloop invariant y <= 100000 - y + y - y + y;\nloop invariant x <= y - y + y - y + y;\nloop invariant x >= -50 + y - y + y - y + y;\nloop invariant y >= 0 + y - y + y - y + y;\nloop invariant y <= 100000 - y + y - y + y - y;\nloop invariant x <= y - y + y - y + y - y;\nloop invariant x >= -50 + y - y + y - y + y - y;\nloop invariant y >= 0 + y - y + y - y + y - y;\nloop invariant y <= 100000 - y + y - y + y - y + y;\nloop invariant x <= y - y + y - y + y - y + y;\nloop invariant x >= -50 + y - y + y - y + y - y + y;\nloop invariant y >= 0 + y - y + y - y + y - y + y;\nloop invariant y <= 100000 - y + y - y + y - y + y - y;\nloop invariant x <= y - y + y - y + y - y + y - y;\nloop invariant x >= -50 + y - y + y - y + y - y + y - y;\nloop invariant y >= 0 + y - y + y - y + y - y + y - y;\nloop invariant y <= 100000 - y + y - y + y - y + y - y + y;\nloop invariant x <= y - y + y - y + y - y + y - y + y;\nloop invariant x >= -50 + y - y + y - y + y - y + y - y + y;\nloop invariant y >= 0 + y - y + y - y + y - y + y - y + y;\nloop invariant y <= 100000 - y + y - y + y - y + y - y + y - y;\nloop invariant x <= y - y + y - y + y - y + y - y + y - y;\nloop invariant x >= -50 + y - y + y - y + y - y + y - y + y - y;\nloop invariant y >= 0 + y - y + y - y + y - y + y - y + y - y;\nloop invariant y <= 100000 - y + y - y + y - y + y - y + y - y + y;\nloop invariant x <= y - y + y - y + y - y + y - y + y - y + y;\nloop invariant x >= -50 + y - y + y - y + y - y + y - y + y - y + y;\nloop invariant y >= 0 + y - y + y - y + y - y + y - y + y - y + y;\nloop invariant y <= 100000 - y + y - y + y - y + y - y + y - y + y - y;\nloop invariant x <= y - y + y - y + y - y + y - y + y - y + y - y;\nloop invariant x >= -50 + y - y + y - y + y - y + y - y + y - y + y - y;\nloop invariant y >= 0 + y - y + y - y + y - y + y - y + y - y + y - y;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant x >= -50 is partially proven to be inductive.\nloop invariant y >= 0 is preserved but not established.\nloop invariant x < 0 is established but not preserved.\nloop invariant y < 100000 is preserved but not established.\nloop invariant x <= y is partially proven to be inductive.\nloop invariant x >= -50 + y is neither established nor preserved.\nloop invariant y >= 0 + y is partially proven to be inductive.\nloop invariant y <= 100000 - y is partially proven to be inductive.\nloop invariant x <= y - y is partially proven to be inductive.\nloop invariant x >= -50 + y - y is partially proven to be inductive.\nloop invariant y >= 0 + y - y is partially proven to be inductive.\nloop invariant y <= 100000 - y + y is partially proven to be inductive.\nloop invariant x <= y - y + y is partially proven to be inductive.\nloop invariant x >= -50 + y - y + y is partially proven to be inductive.\nloop invariant y >= 0 + y - y + y is partially proven to be inductive.\nloop invariant y <= 100000 - y + y - y is partially proven to be inductive.\nloop invariant x <= y - y + y - y is partially proven to be inductive.\nloop invariant x >= -50 + y - y + y - y is partially proven to be inductive.\nloop invariant y >= 0 + y - y + y - y is partially proven to be inductive.\nloop invariant y <= 100000 - y + y - y + y is partially proven to be inductive.\nloop invariant x <= y - y + y - y + y is partially proven to be inductive.\nloop invariant x >= -50 + y - y + y - y + y is partially proven to be inductive.\nloop invariant y >= 0 + y - y + y - y + y is partially proven to be inductive.\nloop invariant y <= 100000 - y + y - y + y - y is partially proven to be inductive.\nloop invariant x <= y - y + y - y + y - y is partially proven to be inductive.\nloop invariant x >= -50 + y - y + y - y + y - y is partially proven to be inductive.\nloop invariant y >= 0 + y - y + y - y + y - y is partially proven to be inductive.\nloop invariant y <= 100000 - y + y - y + y - y + y is partially proven to be inductive.\nloop invariant x <= y - y + y - y + y - y + y is partially proven to be inductive.\nloop invariant x >= -50 + y - y + y - y + y - y + y is partially proven to be inductive.\nloop invariant y >= 0 + y - y + y - y + y - y + y is partially proven to be inductive.\nloop invariant y <= 100000 - y + y - y + y - y + y - y is partially proven to be inductive.\nloop invariant x <= y - y + y - y + y - y + y - y is partially proven to be inductive.\nloop invariant x >= -50 + y - y + y - y + y - y + y - y is partially proven to be inductive.\nloop invariant y >= 0 + y - y + y - y + y - y + y - y is partially proven to be inductive.\nloop invariant y <= 100000 - y + y - y + y - y + y - y + y is partially proven to be inductive.\nloop invariant x <= y - y + y - y + y - y + y - y + y is partially proven to be inductive.\nloop invariant x >= -50 + y - y + y - y + y - y + y - y + y is partially proven to be inductive.\nloop invariant y >= 0 + y - y + y - y + y - y + y - y + y is partially proven to be inductive.\nloop invariant y <= 100000 - y + y - y + y - y + y - y + y - y is partially proven to be inductive.\nloop invariant x <= y - y + y - y + y - y + y - y + y - y is partially proven to be inductive.\nloop invariant x >= -50 + y - y + y - y + y - y + y - y + y - y is partially proven to be inductive.\nloop invariant y >= 0 + y - y + y - y + y - y + y - y + y - y is partially proven to be inductive.\nloop invariant y <= 100000 - y + y - y + y - y + y - y + y - y + y is partially proven to be inductive.\nloop invariant x <= y - y + y - y + y - y + y - y + y - y + y is partially proven to be inductive.\nloop invariant x >= -50 + y - y + y - y + y - y + y - y + y - y + y is partially proven to be inductive.\nloop invariant y >= 0 + y - y + y - y + y - y + y - y + y - y + y is partially proven to be inductive.\nloop invariant y <= 100000 - y + y - y + y - y + y - y + y - y + y - y is partially proven to be inductive.\nloop invariant x <= y - y + y - y + y - y + y - y + y - y + y - y is partially proven to be inductive.\nloop invariant x >= -50 + y - y + y - y + y - y + y - y + y - y + y - y is partially proven to be inductive.\nloop invariant y >= 0 + y - y + y - y + y - y + y - y + y - y + y - y is partially proven to be inductive.\nAssertion y > 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = -50);\n  \n  /*@\n\n\n\n\n\n\nloop invariant i7: y >= 0 + y;\n\n\n\n\n\n\n\nloop invariant i15: y >= 0 + y - y + y;\n\n\n\n\n\n\n\nloop invariant i23: y >= 0 + y - y + y - y + y;\n\n\n\n\n\n\n\nloop invariant i31: y >= 0 + y - y + y - y + y - y + y;\n\n\n\n\n\n\n\nloop invariant i39: y >= 0 + y - y + y - y + y - y + y - y + y;\n\n\n\n\n\n\n\nloop invariant i47: y >= 0 + y - y + y - y + y - y + y - y + y - y + y;\n\n\n\n\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant y >= 0;\nloop invariant x <= 0;\nloop invariant x + y >= -50;\nloop invariant y <= -x - 50;\nloop invariant x + y >= -50 ==> (y > 0);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant y >= 0 is preserved but not established.\nloop invariant x <= 0 is partially proven to be inductive.\nloop invariant x + y >= -50 is partially proven to be inductive.\nloop invariant y <= -x - 50 is preserved but not established.\nloop invariant x + y >= -50 ==> (y > 0) is preserved but not established.\nAssertion y > 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = -50);\n  \n  /*@\n\n\n\n\n\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= y <= -50;\nloop invariant x >= (x + y);\nloop invariant y >= 1;\nloop invariant x >= -50;\nloop invariant y >= x;\nloop invariant y <= -50;\nloop invariant y >= 1;\nloop invariant y <= -50;\nloop invariant y >= 1;\nloop invariant y <= -50;\nloop invariant y >= 1;\nloop invariant y <= -50;\nloop invariant y >= 1;\nloop invariant y <= -50;\nloop invariant y >= 1;\nloop invariant y <= -50;\nloop invariant y >= 1;\nloop invariant y <= -50;\nloop invariant y >= 1;\nloop invariant y <= -50;\nloop invariant y >= 1;\nloop invariant y <= -50;\nloop invariant y >= 1;\nloop invariant y <= -50;\nloop invariant y >= 1;\nloop invariant y <= -50;\nloop invariant y >= 1;\nloop invariant y <= -50;\nloop invariant y >= 1;\nloop invariant y <= -50;\nloop invariant y >= 1;\nloop invariant y <= -50;\nloop invariant y >= 1;\nloop invariant y <= -50;\nloop invariant y >= 1;\nloop invariant y <= -50;\nloop invariant y >= 1;\nloop invariant y <= -50;\nloop invariant y >= 1;\nloop invariant y <= -50;\nloop invariant y >= 1;\nloop invariant y <= -50;\nloop invariant y >= 1;\nloop invariant y <= -50;\nloop invariant y >= 1;\nloop invariant y <= -50;\nloop invariant y >= 1;\nloop invariant y <= -50;\nloop invariant y >= 1;\nloop invariant y <= -50;\nloop invariant y >= 1;\nloop invariant y <= -50;\nloop invariant y >= 1;\nloop invariant y <= -50;\nloop invariant y >= 1;\nloop invariant y <= -50;\nloop invariant y >= 1;\nloop invariant y <= -50;\nloop invariant y >= 1;\nloop invariant y <= -50;\nloop invariant y >= 1;\nloop invariant y <= -50;\nloop invariant y >= 1;\nloop invariant y <= -50;\nloop invariant y >= 1;\nloop invariant y <= -50;\nloop invariant y >= 1;\nloop invariant y <= -50;\nloop invariant y >= 1;\nloop invariant y <= -50;\nloop invariant y >= 1;\nloop invariant y <= -50;\nloop invariant y >= 1;\nloop invariant y <= -50;\nloop invariant y >= 1;\nloop invariant y <= -50;\nloop invariant y >= 1;\nloop invariant y <= -50;\nloop invariant y >= 1;\nloop invariant y <= -50;\nloop invariant y >= 1;\nloop invariant y <= -50;\nloop invariant y >= 1;\nloop invariant y <= -50;\nloop invariant y >= 1;\nloop invariant y <= -50;\nloop invariant y >= 1;\nloop invariant y <= -50;\nloop invariant y >= 1;\nloop invariant y <= -50;\nloop invariant y >= 1;\nloop invariant y <= -50;\nloop invariant y >= 1;\nloop invariant y <= -50;\nloop invariant y >= 1;\nloop invariant y <= -50;\nloop invariant y >= 1;\nloop invariant y <= -50;\nloop invariant y >= 1;\nloop invariant y <= -50;\nloop invariant y >= 1;\nloop invariant y <= -50;\nloop invariant y >= 1;\nloop invariant y <= -50;\nloop invariant y >= 1;\nloop invariant y <= -50;\nloop invariant y >= 1;\nloop invariant y <= -50;\nloop invariant y >= 1;\nloop invariant y <= -50;\nloop invariant y >= 1;\nloop invariant y <= -50;\nloop invariant y >= 1;\nloop invariant y <= -50;\nloop invariant y >= 1;\nloop invariant y <= -50;\nloop invariant y >= 1;\nloop invariant y <= -50;\nloop invariant y >= 1;\nloop invariant y <= -50;\nloop invariant y >= 1;\nloop invariant y <= -50;\nloop invariant y >= 1;\nloop invariant y <= -50;\nloop invariant y >= 1;\nloop invariant y <= -50;\nloop invariant y >= 1;\nloop invariant y <= -50;\nloop invariant y >= 1;\nloop invariant y <= -50;\nloop invariant y >= 1;\nloop invariant y <= -50;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= y <= -50 is preserved but not established.\nloop invariant x >= (x + y) is partially proven to be inductive.\nloop invariant y >= 1 is partially proven to be inductive.\nloop invariant x >= -50 is partially proven to be inductive.\nloop invariant y >= x is partially proven to be inductive.\nloop invariant y <= -50 is partially proven to be inductive.\nAssertion y > 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = -50);\n  \n  /*@\n\n\n\n\n\n\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 1 <= x <= 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= x <= 0 is preserved but not established.\nAssertion y > 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = -50);\n  \n  /*@\n\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= y <= 100000 is preserved but not established.\nloop invariant x >= (1 + (y - 1) * y / 2) is preserved but not established.\nAssertion y > 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = -50);\n  \n  /*@\n\n\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 0;\nloop invariant y >= 0;\nloop invariant y <= 100000;\nloop invariant x >= -50;\nloop invariant x <= 50;\nloop invariant x >= -50 + (y - 1) * y / 2;\nloop invariant x <= -50 + (y - 1) * y / 2;\nloop invariant x >= -50 + (y - 1) * y / 2;\nloop invariant x <= -50 + (y - 1) * y / 2;\nloop invariant x >= -50 + (y - 1) * y / 2;\nloop invariant x <= -50 + (y - 1) * y / 2;\nloop invariant x >= -50 + (y - 1) * y / 2;\nloop invariant x <= -50 + (y - 1) * y / 2;\nloop invariant x >= -50 + (y - 1) * y / 2;\nloop invariant x <= -50 + (y - 1) * y / 2;\nloop invariant x >= -50 + (y - 1) * y / 2;\nloop invariant x <= -50 + (y - 1) * y / 2;\nloop invariant x >= -50 + (y - 1) * y / 2;\nloop invariant x <= -50 + (y - 1) * y / 2;\nloop invariant x >= -50 + (y - 1) * y / 2;\nloop invariant x <= -50 + (y - 1) * y / 2;\nloop invariant x >= -50 + (y - 1) * y / 2;\nloop invariant x <= -50 + (y - 1) * y / 2;\nloop invariant x >= -50 + (y - 1) * y / 2;\nloop invariant x <= -50 + (y - 1) * y / 2;\nloop invariant x >= -50 + (y - 1) * y / 2;\nloop invariant x <= -50 + (y - 1) * y / 2;\nloop invariant x >= -50 + (y - 1) * y / 2;\nloop invariant x <= -50 + (y - 1) * y / 2;\nloop invariant x >= -50 + (y - 1) * y / 2;\nloop invariant x <= -50 + (y - 1) * y / 2;\nloop invariant x >= -50 + (y - 1) * y / 2;\nloop invariant x <= -50 + (y - 1) * y / 2;\nloop invariant x >= -50 + (y - 1) * y / 2;\nloop invariant x <= -50 + (y - 1) * y / 2;\nloop invariant x >= -50 + (y - 1) * y / 2;\nloop invariant x <= -50 + (y - 1) * y / 2;\nloop invariant x >= -50 + (y - 1) * y / 2;\nloop invariant x <= -50 + (y - 1) * y / 2;\nloop invariant x >= -50 + (y - 1) * y / 2;\nloop invariant x <= -50 + (y - 1) * y / 2;\nloop invariant x >= -50 + (y - 1) * y / 2;\nloop invariant x <= -50 + (y - 1) * y / 2;\nloop invariant x >= -50 + (y - 1) * y / 2;\nloop invariant x <= -50 + (y - 1) * y / 2;\nloop invariant x >= -50 + (y - 1) * y / 2;\nloop invariant x <= -50 + (y - 1) * y / 2;\nloop invariant x >= -50 + (y - 1) * y / 2;\nloop invariant x <= -50 + (y - 1) * y / 2;\nloop invariant x >= -50 + (y - 1) * y / 2;\nloop invariant x <= -50 + (y - 1) * y / 2;\nloop invariant x >= -50 + (y - 1) * y / 2;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 0 is preserved but not established.\nloop invariant y >= 0 is partially proven to be inductive.\nloop invariant y <= 100000 is partially proven to be inductive.\nloop invariant x >= -50 is partially proven to be inductive.\nloop invariant x <= 50 is partially proven to be inductive.\nloop invariant x >= -50 + (y - 1) * y / 2 is partially proven to be inductive.\nloop invariant x <= -50 + (y - 1) * y / 2 is partially proven to be inductive.\nAssertion y > 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = -50);\n  \n  /*@\n\n\n\n\n\n\nloop invariant i7: x <= -50 + (y - 1) * y / 2;\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                }
            ],
            "checker_output_for_combined_annotations": false,
            "checker_message_for_combined_annotations": "loop invariant y >= 0 is preserved but not established.\nloop invariant x >= -50 is partially proven to be inductive.\nloop invariant x + y >= -50 + y is partially proven to be inductive.\nloop invariant x + y <= -50 + y + y is partially proven to be inductive.\nloop invariant x + y <= -50 + 2*y is partially proven to be inductive.\nloop invariant x + y <= -50 + 2*y + y is partially proven to be inductive.\nloop invariant x + y <= -50 + 3*y is partially proven to be inductive.\nloop invariant x + y <= -50 + 3*y + y is partially proven to be inductive.\nloop invariant x + y <= -50 + 4*y is partially proven to be inductive.\nloop invariant x + y <= -50 + 4*y + y is partially proven to be inductive.\nloop invariant x + y <= -50 + 5*y is partially proven to be inductive.\nloop invariant x + y <= -50 + 5*y + y is partially proven to be inductive.\nloop invariant x + y <= -50 + 6*y is partially proven to be inductive.\nloop invariant x + y <= -50 + 6*y + y is partially proven to be inductive.\nloop invariant x + y <= -50 + 7*y is partially proven to be inductive.\nloop invariant x + y <= -50 + 7*y + y is partially proven to be inductive.\nloop invariant x + y <= -50 + 8*y is partially proven to be inductive.\nloop invariant x + y <= -50 + 8*y + y is partially proven to be inductive.\nloop invariant x + y <= -50 + 9*y is partially proven to be inductive.\nloop invariant x + y <= -50 + 9*y + y is partially proven to be inductive.\nloop invariant x + y <= -50 + 10*y is partially proven to be inductive.\nloop invariant x + y <= -50 + 10*y + y is partially proven to be inductive.\nloop invariant x + y <= -50 + 11*y is partially proven to be inductive.\nloop invariant x + y <= -50 + 11*y + y is partially proven to be inductive.\nloop invariant x + y <= -50 + 12*y is partially proven to be inductive.\nloop invariant x + y <= -50 + 12*y + y is partially proven to be inductive.\nloop invariant x + y <= -50 + 13*y is partially proven to be inductive.\nloop invariant x + y <= -50 + 13*y + y is partially proven to be inductive.\nloop invariant x + y <= -50 + 14*y is partially proven to be inductive.\nloop invariant x + y <= -50 + 14*y + y is partially proven to be inductive.\nloop invariant x + y <= -50 + 15*y is partially proven to be inductive.\nloop invariant x + y <= -50 + 15*y + y is partially proven to be inductive.\nloop invariant x + y <= -50 + 16*y is partially proven to be inductive.\nloop invariant x + y <= -50 + 16*y + y is partially proven to be inductive.\nloop invariant x + y <= -50 + 17*y is partially proven to be inductive.\nloop invariant x + y <= -50 + 17*y + y is partially proven to be inductive.\nloop invariant x + y <= -50 + 18*y is partially proven to be inductive.\nloop invariant x + y <= -50 + 18*y + y is partially proven to be inductive.\nloop invariant x + y <= -50 + 19*y is partially proven to be inductive.\nloop invariant x + y <= -50 + 19*y + y is partially proven to be inductive.\nloop invariant x + y <= -50 + 20*y is partially proven to be inductive.\nloop invariant x + y <= -50 + 20*y + y is partially proven to be inductive.\nloop invariant x + y <= -50 + 21*y is partially proven to be inductive.\nloop invariant x + y <= -50 + 21*y + y is partially proven to be inductive.\nloop invariant x + y <= -50 + 22*y is partially proven to be inductive.\nloop invariant x + y <= -50 + 22*y + y is partially proven to be inductive.\nloop invariant x + y <= -50 + 23*y is partially proven to be inductive.\nloop invariant x + y <= -50 + 23*y + y is partially proven to be inductive.\nloop invariant x + y <= -50 + 24*y is partially proven to be inductive.\nloop invariant x + y <= -50 + 24*y + y is partially proven to be inductive.\nloop invariant x + y <= -50 + 25*y is partially proven to be inductive.\nloop invariant x + y <= -50 + 25*y + y is partially proven to be inductive.\nloop invariant x + y <= -50 + 26*y is partially proven to be inductive.\nloop invariant x + y <= -50 + 26*y + y is partially proven to be inductive.\nloop invariant x + y <= -50 + 27*y is partially proven to be inductive.\nloop invariant x + y <= -50 + 27*y + y is partially proven to be inductive.\nloop invariant x + y <= -50 + 28*y is partially proven to be inductive.\nloop invariant x + y <= -50 + 28*y + y is partially proven to be inductive.\nloop invariant x + y <= -50 + 29*y is partially proven to be inductive.\nloop invariant x + y <= -50 + 29*y + y is partially proven to be inductive.\nloop invariant x + y <= -50 + 30*y is partially proven to be inductive.\nloop invariant x + y <= -50 + 30*y + y is partially proven to be inductive.\nloop invariant x + y <= -50 + 31*y is partially proven to be inductive.\nloop invariant x + y <= -50 + 31*y + y is partially proven to be inductive.\nloop invariant x + y <= -50 + 32*y is partially proven to be inductive.\nloop invariant 0 <= y <= 100000 is preserved but not established.\nloop invariant x >= (1 + (y - 1) * y / 2) is preserved but not established.\nloop invariant 0 <= y is partially proven to be inductive.\nloop invariant y <= 100000 is partially proven to be inductive.\nloop invariant -50 <= x is partially proven to be inductive.\nloop invariant x <= 50 + y is partially proven to be inductive.\nloop invariant 0 <= y <= 50 is partially proven to be inductive.\nloop invariant x <= y is partially proven to be inductive.\nloop invariant x < y is partially proven to be inductive.\nloop invariant 0 <= y <= -50 is partially proven to be inductive.\nloop invariant x >= y is partially proven to be inductive.\nloop invariant x <= 0 is partially proven to be inductive.\nloop invariant x + y >= y is partially proven to be inductive.\nloop invariant x + y <= 0 is partially proven to be inductive.\nloop invariant ( x >= -50 ) is partially proven to be inductive.\nloop invariant ( y >= 0 ) is partially proven to be inductive.\nloop invariant ( x < 0 ) is partially proven to be inductive.\nloop invariant ( y <= 100 ) is partially proven to be inductive.\nloop invariant ( x <= -50 ) is partially proven to be inductive.\nloop invariant ( y < 100 ) is partially proven to be inductive.\nloop invariant x >= (x + y) ==> x >= -50 is partially proven to be inductive.\nloop invariant x >= (x + y) ==> y >= 0 is partially proven to be inductive.\nloop invariant x >= (x + y) ==> x + y >= 0 is partially proven to be inductive.\nloop invariant y >= 1 is partially proven to be inductive.\nloop invariant y <= 0 is partially proven to be inductive.\nloop invariant x + y >= 0 is partially proven to be inductive.\nloop invariant x < 0 is partially proven to be inductive.\nloop invariant y < 100000 is partially proven to be inductive.\nloop invariant x >= -50 + y is partially proven to be inductive.\nloop invariant y >= 0 + y is partially proven to be inductive.\nloop invariant y <= 100000 - y is partially proven to be inductive.\nloop invariant x <= y - y is partially proven to be inductive.\nloop invariant x >= -50 + y - y is partially proven to be inductive.\nloop invariant y >= 0 + y - y is partially proven to be inductive.\nloop invariant y <= 100000 - y + y is partially proven to be inductive.\nloop invariant x <= y - y + y is partially proven to be inductive.\nloop invariant x >= -50 + y - y + y is partially proven to be inductive.\nloop invariant y >= 0 + y - y + y is partially proven to be inductive.\nloop invariant y <= 100000 - y + y - y is partially proven to be inductive.\nloop invariant x <= y - y + y - y is partially proven to be inductive.\nloop invariant x >= -50 + y - y + y - y is partially proven to be inductive.\nloop invariant y >= 0 + y - y + y - y is partially proven to be inductive.\nloop invariant y <= 100000 - y + y - y + y is partially proven to be inductive.\nloop invariant x <= y - y + y - y + y is partially proven to be inductive.\nloop invariant x >= -50 + y - y + y - y + y is partially proven to be inductive.\nloop invariant y >= 0 + y - y + y - y + y is partially proven to be inductive.\nloop invariant y <= 100000 - y + y - y + y - y is partially proven to be inductive.\nloop invariant x <= y - y + y - y + y - y is partially proven to be inductive.\nloop invariant x >= -50 + y - y + y - y + y - y is partially proven to be inductive.\nloop invariant y >= 0 + y - y + y - y + y - y is partially proven to be inductive.\nloop invariant y <= 100000 - y + y - y + y - y + y is partially proven to be inductive.\nloop invariant x <= y - y + y - y + y - y + y is partially proven to be inductive.\nloop invariant x >= -50 + y - y + y - y + y - y + y is partially proven to be inductive.\nloop invariant y >= 0 + y - y + y - y + y - y + y is partially proven to be inductive.\nloop invariant y <= 100000 - y + y - y + y - y + y - y is partially proven to be inductive.\nloop invariant x <= y - y + y - y + y - y + y - y is partially proven to be inductive.\nloop invariant x >= -50 + y - y + y - y + y - y + y - y is partially proven to be inductive.\nloop invariant y >= 0 + y - y + y - y + y - y + y - y is partially proven to be inductive.\nloop invariant y <= 100000 - y + y - y + y - y + y - y + y is partially proven to be inductive.\nloop invariant x <= y - y + y - y + y - y + y - y + y is partially proven to be inductive.\nloop invariant x >= -50 + y - y + y - y + y - y + y - y + y is partially proven to be inductive.\nloop invariant y >= 0 + y - y + y - y + y - y + y - y + y is partially proven to be inductive.\nloop invariant y <= 100000 - y + y - y + y - y + y - y + y - y is partially proven to be inductive.\nloop invariant x <= y - y + y - y + y - y + y - y + y - y is partially proven to be inductive.\nloop invariant x >= -50 + y - y + y - y + y - y + y - y + y - y is partially proven to be inductive.\nloop invariant y >= 0 + y - y + y - y + y - y + y - y + y - y is partially proven to be inductive.\nloop invariant y <= 100000 - y + y - y + y - y + y - y + y - y + y is partially proven to be inductive.\nloop invariant x <= y - y + y - y + y - y + y - y + y - y + y is partially proven to be inductive.\nloop invariant x >= -50 + y - y + y - y + y - y + y - y + y - y + y is partially proven to be inductive.\nloop invariant y >= 0 + y - y + y - y + y - y + y - y + y - y + y is partially proven to be inductive.\nloop invariant y <= 100000 - y + y - y + y - y + y - y + y - y + y - y is partially proven to be inductive.\nloop invariant x <= y - y + y - y + y - y + y - y + y - y + y - y is partially proven to be inductive.\nloop invariant x >= -50 + y - y + y - y + y - y + y - y + y - y + y - y is partially proven to be inductive.\nloop invariant y >= 0 + y - y + y - y + y - y + y - y + y - y + y - y is partially proven to be inductive.\nloop invariant x + y >= -50 is partially proven to be inductive.\nloop invariant y <= -x - 50 is partially proven to be inductive.\nloop invariant x + y >= -50 ==> (y > 0) is partially proven to be inductive.\nloop invariant x >= (x + y) is partially proven to be inductive.\nloop invariant y >= x is partially proven to be inductive.\nloop invariant y <= -50 is partially proven to be inductive.\nloop invariant 1 <= x <= 0 is partially proven to be inductive.\nloop invariant 0 <= x <= 0 is partially proven to be inductive.\nloop invariant x <= 50 is partially proven to be inductive.\nloop invariant x >= -50 + (y - 1) * y / 2 is partially proven to be inductive.\nloop invariant x <= -50 + (y - 1) * y / 2 is partially proven to be inductive.\nAssertion y > 0: Partially proven",
            "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = -50);\n  \n  /*@\nloop invariant i1: y >= 0;\nloop invariant i2: x >= -50;\nloop invariant i3: x + y >= -50 + y;\nloop invariant i4: x + y <= -50 + y + y;\nloop invariant i5: x + y <= -50 + 2*y;\nloop invariant i6: x + y <= -50 + 2*y + y;\nloop invariant i7: x + y <= -50 + 3*y;\nloop invariant i8: x + y <= -50 + 3*y + y;\nloop invariant i9: x + y <= -50 + 4*y;\nloop invariant i10: x + y <= -50 + 4*y + y;\nloop invariant i11: x + y <= -50 + 5*y;\nloop invariant i12: x + y <= -50 + 5*y + y;\nloop invariant i13: x + y <= -50 + 6*y;\nloop invariant i14: x + y <= -50 + 6*y + y;\nloop invariant i15: x + y <= -50 + 7*y;\nloop invariant i16: x + y <= -50 + 7*y + y;\nloop invariant i17: x + y <= -50 + 8*y;\nloop invariant i18: x + y <= -50 + 8*y + y;\nloop invariant i19: x + y <= -50 + 9*y;\nloop invariant i20: x + y <= -50 + 9*y + y;\nloop invariant i21: x + y <= -50 + 10*y;\nloop invariant i22: x + y <= -50 + 10*y + y;\nloop invariant i23: x + y <= -50 + 11*y;\nloop invariant i24: x + y <= -50 + 11*y + y;\nloop invariant i25: x + y <= -50 + 12*y;\nloop invariant i26: x + y <= -50 + 12*y + y;\nloop invariant i27: x + y <= -50 + 13*y;\nloop invariant i28: x + y <= -50 + 13*y + y;\nloop invariant i29: x + y <= -50 + 14*y;\nloop invariant i30: x + y <= -50 + 14*y + y;\nloop invariant i31: x + y <= -50 + 15*y;\nloop invariant i32: x + y <= -50 + 15*y + y;\nloop invariant i33: x + y <= -50 + 16*y;\nloop invariant i34: x + y <= -50 + 16*y + y;\nloop invariant i35: x + y <= -50 + 17*y;\nloop invariant i36: x + y <= -50 + 17*y + y;\nloop invariant i37: x + y <= -50 + 18*y;\nloop invariant i38: x + y <= -50 + 18*y + y;\nloop invariant i39: x + y <= -50 + 19*y;\nloop invariant i40: x + y <= -50 + 19*y + y;\nloop invariant i41: x + y <= -50 + 20*y;\nloop invariant i42: x + y <= -50 + 20*y + y;\nloop invariant i43: x + y <= -50 + 21*y;\nloop invariant i44: x + y <= -50 + 21*y + y;\nloop invariant i45: x + y <= -50 + 22*y;\nloop invariant i46: x + y <= -50 + 22*y + y;\nloop invariant i47: x + y <= -50 + 23*y;\nloop invariant i48: x + y <= -50 + 23*y + y;\nloop invariant i49: x + y <= -50 + 24*y;\nloop invariant i50: x + y <= -50 + 24*y + y;\nloop invariant i51: x + y <= -50 + 25*y;\nloop invariant i52: x + y <= -50 + 25*y + y;\nloop invariant i53: x + y <= -50 + 26*y;\nloop invariant i54: x + y <= -50 + 26*y + y;\nloop invariant i55: x + y <= -50 + 27*y;\nloop invariant i56: x + y <= -50 + 27*y + y;\nloop invariant i57: x + y <= -50 + 28*y;\nloop invariant i58: x + y <= -50 + 28*y + y;\nloop invariant i59: x + y <= -50 + 29*y;\nloop invariant i60: x + y <= -50 + 29*y + y;\nloop invariant i61: x + y <= -50 + 30*y;\nloop invariant i62: x + y <= -50 + 30*y + y;\nloop invariant i63: x + y <= -50 + 31*y;\nloop invariant i64: x + y <= -50 + 31*y + y;\nloop invariant i65: x + y <= -50 + 32*y;\nloop invariant i66: 0 <= y <= 100000;\nloop invariant i67: x >= (1 + (y - 1) * y / 2);\nloop invariant i68: 0 <= y;\nloop invariant i69: y <= 100000;\nloop invariant i70: -50 <= x;\nloop invariant i71: x <= 50 + y;\nloop invariant i72: 0 <= y <= 50;\nloop invariant i73: x <= y;\nloop invariant i74: x < y;\nloop invariant i75: 0 <= y <= -50;\nloop invariant i76: x >= y;\nloop invariant i77: x <= 0;\nloop invariant i78: x + y >= y;\nloop invariant i79: x + y <= 0;\nloop invariant i80: ( x >= -50 );\nloop invariant i81: ( y >= 0 );\nloop invariant i82: ( x < 0 );\nloop invariant i83: ( y <= 100 );\nloop invariant i84: ( x <= -50 );\nloop invariant i85: ( y < 100 );\nloop invariant i86: x >= (x + y) ==> x >= -50;\nloop invariant i87: x >= (x + y) ==> y >= 0;\nloop invariant i88: x >= (x + y) ==> x + y >= 0;\nloop invariant i89: y >= 1;\nloop invariant i90: y <= 0;\nloop invariant i91: x + y >= 0;\nloop invariant i92: x < 0;\nloop invariant i93: y < 100000;\nloop invariant i94: x >= -50 + y;\nloop invariant i95: y >= 0 + y;\nloop invariant i96: y <= 100000 - y;\nloop invariant i97: x <= y - y;\nloop invariant i98: x >= -50 + y - y;\nloop invariant i99: y >= 0 + y - y;\nloop invariant i100: y <= 100000 - y + y;\nloop invariant i101: x <= y - y + y;\nloop invariant i102: x >= -50 + y - y + y;\nloop invariant i103: y >= 0 + y - y + y;\nloop invariant i104: y <= 100000 - y + y - y;\nloop invariant i105: x <= y - y + y - y;\nloop invariant i106: x >= -50 + y - y + y - y;\nloop invariant i107: y >= 0 + y - y + y - y;\nloop invariant i108: y <= 100000 - y + y - y + y;\nloop invariant i109: x <= y - y + y - y + y;\nloop invariant i110: x >= -50 + y - y + y - y + y;\nloop invariant i111: y >= 0 + y - y + y - y + y;\nloop invariant i112: y <= 100000 - y + y - y + y - y;\nloop invariant i113: x <= y - y + y - y + y - y;\nloop invariant i114: x >= -50 + y - y + y - y + y - y;\nloop invariant i115: y >= 0 + y - y + y - y + y - y;\nloop invariant i116: y <= 100000 - y + y - y + y - y + y;\nloop invariant i117: x <= y - y + y - y + y - y + y;\nloop invariant i118: x >= -50 + y - y + y - y + y - y + y;\nloop invariant i119: y >= 0 + y - y + y - y + y - y + y;\nloop invariant i120: y <= 100000 - y + y - y + y - y + y - y;\nloop invariant i121: x <= y - y + y - y + y - y + y - y;\nloop invariant i122: x >= -50 + y - y + y - y + y - y + y - y;\nloop invariant i123: y >= 0 + y - y + y - y + y - y + y - y;\nloop invariant i124: y <= 100000 - y + y - y + y - y + y - y + y;\nloop invariant i125: x <= y - y + y - y + y - y + y - y + y;\nloop invariant i126: x >= -50 + y - y + y - y + y - y + y - y + y;\nloop invariant i127: y >= 0 + y - y + y - y + y - y + y - y + y;\nloop invariant i128: y <= 100000 - y + y - y + y - y + y - y + y - y;\nloop invariant i129: x <= y - y + y - y + y - y + y - y + y - y;\nloop invariant i130: x >= -50 + y - y + y - y + y - y + y - y + y - y;\nloop invariant i131: y >= 0 + y - y + y - y + y - y + y - y + y - y;\nloop invariant i132: y <= 100000 - y + y - y + y - y + y - y + y - y + y;\nloop invariant i133: x <= y - y + y - y + y - y + y - y + y - y + y;\nloop invariant i134: x >= -50 + y - y + y - y + y - y + y - y + y - y + y;\nloop invariant i135: y >= 0 + y - y + y - y + y - y + y - y + y - y + y;\nloop invariant i136: y <= 100000 - y + y - y + y - y + y - y + y - y + y - y;\nloop invariant i137: x <= y - y + y - y + y - y + y - y + y - y + y - y;\nloop invariant i138: x >= -50 + y - y + y - y + y - y + y - y + y - y + y - y;\nloop invariant i139: y >= 0 + y - y + y - y + y - y + y - y + y - y + y - y;\nloop invariant i140: x + y >= -50;\nloop invariant i141: y <= -x - 50;\nloop invariant i142: x + y >= -50 ==> (y > 0);\nloop invariant i143: x >= (x + y);\nloop invariant i144: y >= x;\nloop invariant i145: y <= -50;\nloop invariant i146: 1 <= x <= 0;\nloop invariant i147: 0 <= x <= 0;\nloop invariant i148: x <= 50;\nloop invariant i149: x >= -50 + (y - 1) * y / 2;\nloop invariant i150: x <= -50 + (y - 1) * y / 2;\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
            "combined_annotation_num_solver_calls": 86,
            "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = -50);\n  \n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i95: y >= 0 + y;\n\n\n\n\n\n\n\nloop invariant i103: y >= 0 + y - y + y;\n\n\n\n\n\n\n\nloop invariant i111: y >= 0 + y - y + y - y + y;\n\n\n\n\n\n\n\nloop invariant i119: y >= 0 + y - y + y - y + y - y + y;\n\n\n\n\n\n\n\nloop invariant i127: y >= 0 + y - y + y - y + y - y + y - y + y;\n\n\n\n\n\n\n\nloop invariant i135: y >= 0 + y - y + y - y + y - y + y - y + y - y + y;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i150: x <= -50 + (y - 1) * y / 2;\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
            "checker_output_after_prune": false
        },
        {
            "file": "../dataset/loop_invariants/code2inv/119.c",
            "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  while ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == size) );\n}\n\n}",
            "success": false,
            "annotation_blocks": [
                "```\n/*@\nloop invariant 0 <= sn <= size;\nloop invariant i >= 1;\nloop invariant i <= size + 1;\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant sn == (size - i + 1);\nloop invariant i == (size - sn + 1);\nloop invariant sn + i == size + 1;\nloop invariant sn == i - 1;\nloop invariant i == sn + 1;\nloop invariant sn == size - i + 1;\nloop invariant i == size - sn + 1;\nloop invariant sn + i == size + 1;\nloop invariant sn == size - i + 1;\nloop invariant i == size - sn + 1;\nloop invariant sn + i == size + 1;\nloop invariant sn == size - i + 1;\nloop invariant i == size - sn + 1;\nloop invariant sn + i == size + 1;\nloop invariant sn == size - i + 1;\nloop invariant i == size - sn + 1;\nloop invariant sn + i == size + 1;\nloop invariant sn == size - i + 1;\nloop invariant i == size - sn + 1;\nloop invariant sn + i == size + 1;\nloop invariant sn == size - i + 1;\nloop invariant i == size - sn + 1;\nloop invariant sn + i == size + 1;\nloop invariant sn == size - i + 1;\nloop invariant i == size - sn + 1;\nloop invariant sn + i == size + 1;\nloop invariant sn == size - i + 1;\nloop invariant i == size - sn + 1;\nloop invariant sn + i == size + 1;\nloop invariant sn == size - i + 1;\nloop invariant i == size - sn + 1;\nloop invariant sn + i == size + 1;\nloop invariant sn == size - i + 1;\nloop invariant i == size - sn + 1;\nloop invariant sn + i == size + 1;\nloop invariant sn == size - i + 1;\nloop invariant i == size - sn + 1;\nloop invariant sn + i == size + 1;\nloop invariant sn == size - i + 1;\nloop invariant i == size - sn + 1;\nloop invariant sn + i == size + 1;\nloop invariant sn == size - i + 1;\nloop invariant i == size - sn + 1;\nloop invariant sn + i == size + 1;\nloop invariant sn == size - i + 1;\nloop invariant i == size - sn + 1;\nloop invariant sn + i == size + 1;\nloop invariant sn == size - i + 1;\nloop invariant i == size - sn + 1;\nloop invariant sn + i == size + 1;\nloop invariant sn == size - i + 1;\nloop invariant i == size - sn + 1;\nloop invariant sn + i == size + 1;\nloop invariant sn == size - i + 1;\nloop invariant i == size - sn + 1;\nloop invariant sn + i == size + 1;\nloop invariant sn == size - i + 1;\nloop invariant i == size - sn + 1;\nloop invariant sn + i == size + 1;\nloop invariant sn == size - i + 1;\nloop invariant i == size - sn + 1;\nloop invariant sn + i == size + 1;\nloop invariant sn == size - i + 1;\nloop invariant i == size - sn + 1;\nloop invariant sn + i == size + 1;\nloop invariant sn == size - i + 1;\nloop invariant i == size - sn + 1;\nloop invariant sn + i == size + 1;\nloop invariant sn == size - i + 1;\nloop invariant i == size - sn + 1;\nloop invariant sn + i == size + 1;\nloop invariant sn == size - i + 1;\nloop invariant i == size - sn + 1;\nloop invariant sn + i == size + 1;\nloop invariant sn == size - i + 1;\nloop invariant i == size - sn + 1;\nloop invariant sn + i == size + 1;\nloop invariant sn == size - i + 1;\nloop invariant i == size - sn + 1;\nloop invariant sn + i == size + 1;\nloop invariant sn == size - i + 1;\nloop invariant i == size - sn + 1;\nloop invariant sn + i == size + 1;\nloop invariant sn == size - i + 1;\nloop invariant i == size - sn + 1;\nloop invariant sn + i == size + 1;\nloop invariant sn == size - i + 1;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= size;\nloop invariant sn == (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant sn == size ==> i > size;\nloop invariant sn == size ==> i >= size + 1;\nloop invariant sn == size ==> i > size ==> i >= size + 1;\nloop invariant sn == size ==> i >= size + 1 ==> i > size;\nloop invariant sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1;\nloop invariant sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 ==> i >= size + 1;\nloop invariant sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1;\nloop invariant sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1;\nloop invariant sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1;\nloop invariant sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1;\nloop invariant sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1;\nloop invariant sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1;\nloop invariant sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1;\nloop invariant sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1;\nloop invariant sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1;\nloop invariant sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1;\nloop invariant sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= size + 1;\nloop invariant 0 <= sn <= size;\nloop invariant sn == i - 1;\nloop invariant 0 <= sn <= size ensures that 'sn' will always be within the valid range, which implies that the assertion (assert( (sn == size) );\nloop invariant 0 <= i <= size + 1;\nloop invariant 0 <= sn <= size;\nloop invariant sn == i - 1;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= size + 1;\nloop invariant 0 <= sn <= size;\nloop invariant sn == (i - 1);\nloop invariant i <= size ==> sn <= size;\nloop invariant size != 0 ==> sn != 0;\nloop invariant i <= size ==> sn <= size;\nloop invariant sn == (i - 1) ==> sn <= size;\nloop invariant sn == (i - 1) ==> sn != 0;\nloop invariant size != 0 ==> sn != 0;\nloop invariant 0 <= i <= size + 1;\nloop invariant 0 <= sn <= size;\nloop invariant sn == (i - 1);\nloop invariant i <= size ==> sn <= size;\nloop invariant size != 0 ==> sn != 0;\nloop invariant i <= size ==> sn <= size;\nloop invariant sn == (i - 1) ==> sn <= size;\nloop invariant sn == (i - 1) ==> sn != 0;\nloop invariant size != 0 ==> sn != 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= size + 1;\nloop invariant sn == (i - 1);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= size;\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant sn == i - 1;\nloop invariant sn == size - (size - i);\nloop invariant sn == size - (i - 1);\nloop invariant sn == size - (size - (size - i));\nloop invariant sn == size - (size - (i - 1));\nloop invariant sn == size - (size - (size - (size - i)));\nloop invariant sn == size - (size - (size - (i - 1)));\nloop invariant sn == size - (size - (size - (size - (size - i))));\nloop invariant sn == size - (size - (size - (size - (i - 1))));\nloop invariant sn == size - (size - (size - (size - (size - (size - i)))));\nloop invariant sn == size - (size - (size - (size - (size - (size - (i - 1))))));\nloop invariant sn == size - (size - (size - (size - (size - (size - (size - i))))));\nloop invariant sn == size - (size - (size - (size - (size - (size - (size - (i - 1)))))));\nloop invariant sn == size - (size - (size - (size - (size - (size - (size - (size - i)))))));\nloop invariant sn == size - (size - (size - (size - (size - (size - (size - (size - (i - 1))))))));\nloop invariant sn == size - (size - (size - (size - (size - (size - (size - (size - (size - i))))))));\nloop invariant sn == size - (size - (size - (size - (size - (size - (size - (size - (size - (i - 1)))))))));\nloop invariant sn == size - (size - (size - (size - (size - (size - (size - (size - (size - (size - i)))))))));\nloop invariant sn == size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (i - 1))))))))));\nloop invariant sn == size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - i))))))))));\nloop invariant sn == size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (i - 1))))))))));\nloop invariant sn == size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - i)))))))))));\nloop invariant sn == size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (i - 1))))))))))));\nloop invariant sn == size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - i)))))))))))));\nloop invariant sn == size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (i - 1))))))))))))));\nloop invariant sn == size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - i)))))))))))))));\nloop invariant sn == size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (i - 1))))))))))))))))));\nloop invariant sn == size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - i)))))))))))))))));\nloop invariant sn == size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (i - 1)))))))))))))))))));\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= size;\nloop invariant 0 <= sn <= size;\nloop invariant (sn == (i - 1));\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= size;\nloop invariant sn >= 0;\nloop invariant sn <= i;\nloop invariant i >= 1;\nloop invariant sn >= i - size;\nloop invariant sn <= i - 1;\nloop invariant i <= size + 1;\nloop invariant sn >= 0 ==> sn == size;\nloop invariant sn <= i - 1 ==> sn <= size;\nloop invariant i <= size + 1 ==> i <= size + 1 && sn <= size;\nloop invariant i >= 1 ==> i >= 1 && sn >= 0;\nloop invariant sn >= i - size ==> sn >= 0;\nloop invariant sn <= i - 1 ==> sn <= size;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= sn <= size;\nloop invariant i >= 1;\nloop invariant i <= size + 1;\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant sn == size - (size - i);\nloop invariant i == sn + 1;\nloop invariant sn == size - (size - i);\nloop invariant (i <= size) ==> (sn == size - (size - i));\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= size + 1;\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant i >= 1;\n*/\n```",
                "```\n/*@\nloop invariant ( i <= size + 1 ) ==> ( sn == 0 );\nloop invariant ( i <= size + 1 ) ==> ( i == 1 ) ==> ( sn == 0 );\nloop invariant ( i <= size + 1 ) ==> ( i > 1 ) ==> ( sn > 0 );\nloop invariant ( i <= size + 1 ) ==> ( i == size + 1 ) ==> ( sn == size );\nloop invariant ( i <= size + 1 ) ==> ( i > size ) ==> ( sn == size );\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= size;\nloop invariant sn >= i;\n*/\n```",
                "```\n/*@\nloop invariant 1 <= sn <= size;\nloop invariant 1 <= i <= size+1;\nloop invariant sn <= size;\nloop invariant i <= size+1;\nloop invariant i <= size+1 ==> sn <= size;\nloop invariant i <= size+1 ==> sn == size;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= size + 1;\nloop invariant 0 <= sn <= size;\nloop invariant sn == i - 1;\nloop invariant i == size + 1 ==> sn == size;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= size;\nloop invariant 0 <= sn <= size;\nloop invariant sn == i - 1;\nloop invariant i == sn + 1;\nloop invariant (if (size != 0) then (sn == size) else true);\nloop invariant (if (size != 0) then (sn != 0) else true);\nloop invariant (if (size != 0) then (sn == size) else (sn == 0));\nloop invariant (if (size != 0) then (size == sn + 1) else true);\nloop invariant (if (size != 0) then (size == sn + 1) else (sn == 0));\nloop invariant (if (size != 0) then (size == sn + 1) else (sn == size));\nloop invariant (if (size != 0) then (size == sn + 1) else (sn == 0) ==> (sn == size));\nloop invariant (if (size != 0) then (size == sn + 1) else (sn == 0) ==> (sn == 0));\nloop invariant (if (size != 0) then (size == sn + 1) else (sn == 0) ==> (size == sn + 1));\nloop invariant (if (size != 0) then (size == sn + 1) else (sn == 0) ==> (sn == size) ==> (sn == 0));\nloop invariant (if (size != 0) then (size == sn + 1) else (sn == 0) ==> (sn == size) ==> (size == sn + 1));\nloop invariant (if (size != 0) then (size == sn + 1) else (sn == 0) ==> (sn == size) ==> (sn == 0) ==> (sn == size));\nloop invariant (if (size != 0) then (size == sn + 1) else (sn == 0) ==> (sn == size) ==> (sn == 0) ==> (size == sn + 1));\nloop invariant (if (size != 0) then (size == sn + 1) else (sn == 0) ==> (sn == size) ==> (sn == 0) ==> (sn == size) ==> (sn == 0));\nloop invariant (if (size != 0) then (size == sn + 1) else (sn == 0) ==> (sn == size) ==> (sn == 0) ==> (size == sn + 1) ==> (sn == size));\nloop invariant (if (size != 0) then (size == sn + 1) else (sn == 0) ==> (sn == size) ==> (sn == 0) ==> (sn == size) ==> (size == sn + 1) ==> (sn == 0));\nloop invariant (if (size != 0) then (size == sn + 1) else (sn == 0) ==> (sn == size) ==> (sn == 0) ==> (sn == size) ==> (size == sn + 1) ==> (sn == size) ==> (sn == 0));\nloop invariant (if (size != 0) then (size == sn + 1) else (sn == 0) ==> (sn == size) ==> (sn == 0) ==> (sn == size) ==> (size == sn + 1) ==> (sn == size) ==> (size == sn + 1));\nloop invariant (if (size != 0) then (size == sn + 1) else (sn == 0) ==> (sn == size) ==> (sn == 0) ==> (sn == size) ==> (size == sn + 1) ==> (sn == size) ==> (sn == 0) ==> (sn == size));\nloop invariant (if (size != 0) then (size == sn + 1) else (sn == 0) ==> (sn == size) ==> (sn == 0) ==> (sn == size) ==> (size == sn + 1) ==> (sn == size) ==> (size == sn + 1) ==> (sn == 0));\nloop invariant (if (size != 0) then (size == sn + 1) else (sn == 0) ==> (sn == size) ==> (sn == 0) ==> (sn == size) ==> (size == sn + 1) ==> (sn == size) ==> (sn == 0) ==> (sn == size) ==> (sn == 0));\n*/\n```"
            ],
            "completions": [
                {
                    "num_solver_calls": 7,
                    "annotations": "```\n/*@\nloop invariant 0 <= sn <= size;\nloop invariant i >= 1;\nloop invariant i <= size + 1;\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant sn == (size - i + 1);\nloop invariant i == (size - sn + 1);\nloop invariant sn + i == size + 1;\nloop invariant sn == i - 1;\nloop invariant i == sn + 1;\nloop invariant sn == size - i + 1;\nloop invariant i == size - sn + 1;\nloop invariant sn + i == size + 1;\nloop invariant sn == size - i + 1;\nloop invariant i == size - sn + 1;\nloop invariant sn + i == size + 1;\nloop invariant sn == size - i + 1;\nloop invariant i == size - sn + 1;\nloop invariant sn + i == size + 1;\nloop invariant sn == size - i + 1;\nloop invariant i == size - sn + 1;\nloop invariant sn + i == size + 1;\nloop invariant sn == size - i + 1;\nloop invariant i == size - sn + 1;\nloop invariant sn + i == size + 1;\nloop invariant sn == size - i + 1;\nloop invariant i == size - sn + 1;\nloop invariant sn + i == size + 1;\nloop invariant sn == size - i + 1;\nloop invariant i == size - sn + 1;\nloop invariant sn + i == size + 1;\nloop invariant sn == size - i + 1;\nloop invariant i == size - sn + 1;\nloop invariant sn + i == size + 1;\nloop invariant sn == size - i + 1;\nloop invariant i == size - sn + 1;\nloop invariant sn + i == size + 1;\nloop invariant sn == size - i + 1;\nloop invariant i == size - sn + 1;\nloop invariant sn + i == size + 1;\nloop invariant sn == size - i + 1;\nloop invariant i == size - sn + 1;\nloop invariant sn + i == size + 1;\nloop invariant sn == size - i + 1;\nloop invariant i == size - sn + 1;\nloop invariant sn + i == size + 1;\nloop invariant sn == size - i + 1;\nloop invariant i == size - sn + 1;\nloop invariant sn + i == size + 1;\nloop invariant sn == size - i + 1;\nloop invariant i == size - sn + 1;\nloop invariant sn + i == size + 1;\nloop invariant sn == size - i + 1;\nloop invariant i == size - sn + 1;\nloop invariant sn + i == size + 1;\nloop invariant sn == size - i + 1;\nloop invariant i == size - sn + 1;\nloop invariant sn + i == size + 1;\nloop invariant sn == size - i + 1;\nloop invariant i == size - sn + 1;\nloop invariant sn + i == size + 1;\nloop invariant sn == size - i + 1;\nloop invariant i == size - sn + 1;\nloop invariant sn + i == size + 1;\nloop invariant sn == size - i + 1;\nloop invariant i == size - sn + 1;\nloop invariant sn + i == size + 1;\nloop invariant sn == size - i + 1;\nloop invariant i == size - sn + 1;\nloop invariant sn + i == size + 1;\nloop invariant sn == size - i + 1;\nloop invariant i == size - sn + 1;\nloop invariant sn + i == size + 1;\nloop invariant sn == size - i + 1;\nloop invariant i == size - sn + 1;\nloop invariant sn + i == size + 1;\nloop invariant sn == size - i + 1;\nloop invariant i == size - sn + 1;\nloop invariant sn + i == size + 1;\nloop invariant sn == size - i + 1;\nloop invariant i == size - sn + 1;\nloop invariant sn + i == size + 1;\nloop invariant sn == size - i + 1;\nloop invariant i == size - sn + 1;\nloop invariant sn + i == size + 1;\nloop invariant sn == size - i + 1;\nloop invariant i == size - sn + 1;\nloop invariant sn + i == size + 1;\nloop invariant sn == size - i + 1;\nloop invariant i == size - sn + 1;\nloop invariant sn + i == size + 1;\nloop invariant sn == size - i + 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= sn <= size is preserved but not established.\nloop invariant i >= 1 is partially proven to be inductive.\nloop invariant i <= size + 1 is partially proven to be inductive.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn <= size is partially proven to be inductive.\nloop invariant sn == (size - i + 1) is neither established nor preserved.\nloop invariant i == (size - sn + 1) is partially proven to be inductive.\nloop invariant sn + i == size + 1 is partially proven to be inductive.\nloop invariant sn == i - 1 is partially proven to be inductive.\nloop invariant i == sn + 1 is partially proven to be inductive.\nloop invariant sn == size - i + 1 is partially proven to be inductive.\nloop invariant i == size - sn + 1 is partially proven to be inductive.\nAssertion sn == size: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\nloop invariant i2: i >= 1;\n\nloop invariant i4: sn >= 0;\n\n\n\n\nloop invariant i9: sn == i - 1;\nloop invariant i10: i == sn + 1;\n\n\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == size) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= size;\nloop invariant sn == (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant sn == size ==> i > size;\nloop invariant sn == size ==> i >= size + 1;\nloop invariant sn == size ==> i > size ==> i >= size + 1;\nloop invariant sn == size ==> i >= size + 1 ==> i > size;\nloop invariant sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1;\nloop invariant sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 ==> i >= size + 1;\nloop invariant sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1;\nloop invariant sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1;\nloop invariant sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1;\nloop invariant sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1;\nloop invariant sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1;\nloop invariant sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1;\nloop invariant sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1;\nloop invariant sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1;\nloop invariant sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1;\nloop invariant sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1;\nloop invariant sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= size is neither established nor preserved.\nloop invariant sn == (i - 1) is partially proven to be inductive.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn <= size is partially proven to be inductive.\nloop invariant sn == size ==> i > size is partially proven to be inductive.\nloop invariant sn == size ==> i >= size + 1 is partially proven to be inductive.\nloop invariant sn == size ==> i > size ==> i >= size + 1 is partially proven to be inductive.\nloop invariant sn == size ==> i >= size + 1 ==> i > size is partially proven to be inductive.\nloop invariant sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 is partially proven to be inductive.\nloop invariant sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 ==> i >= size + 1 is partially proven to be inductive.\nloop invariant sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 is partially proven to be inductive.\nloop invariant sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 is partially proven to be inductive.\nloop invariant sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 is partially proven to be inductive.\nloop invariant sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 is partially proven to be inductive.\nloop invariant sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 is partially proven to be inductive.\nloop invariant sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 is partially proven to be inductive.\nloop invariant sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 is partially proven to be inductive.\nloop invariant sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 is partially proven to be inductive.\nloop invariant sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 is partially proven to be inductive.\nloop invariant sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 is partially proven to be inductive.\nloop invariant sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 is partially proven to be inductive.\nAssertion sn == size: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\nloop invariant i2: sn == (i - 1);\nloop invariant i3: sn >= 0;\n\nloop invariant i5: sn == size ==> i > size;\nloop invariant i6: sn == size ==> i >= size + 1;\nloop invariant i7: sn == size ==> i > size ==> i >= size + 1;\nloop invariant i8: sn == size ==> i >= size + 1 ==> i > size;\nloop invariant i9: sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1;\nloop invariant i10: sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 ==> i >= size + 1;\nloop invariant i11: sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1;\nloop invariant i12: sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1;\nloop invariant i13: sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1;\nloop invariant i14: sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1;\nloop invariant i15: sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1;\nloop invariant i16: sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1;\nloop invariant i17: sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1;\nloop invariant i18: sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1;\nloop invariant i19: sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1;\nloop invariant i20: sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1;\nloop invariant i21: sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1;\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == size) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= size + 1;\nloop invariant 0 <= sn <= size;\nloop invariant sn == i - 1;\nloop invariant 0 <= sn <= size ensures that 'sn' will always be within the valid range, which implies that the assertion (assert( (sn == size) );\nloop invariant 0 <= i <= size + 1;\nloop invariant 0 <= sn <= size;\nloop invariant sn == i - 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 20: unexpected token 'ensures'",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: sn == i - 1;\n\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == size) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= size + 1;\nloop invariant 0 <= sn <= size;\nloop invariant sn == (i - 1);\nloop invariant i <= size ==> sn <= size;\nloop invariant size != 0 ==> sn != 0;\nloop invariant i <= size ==> sn <= size;\nloop invariant sn == (i - 1) ==> sn <= size;\nloop invariant sn == (i - 1) ==> sn != 0;\nloop invariant size != 0 ==> sn != 0;\nloop invariant 0 <= i <= size + 1;\nloop invariant 0 <= sn <= size;\nloop invariant sn == (i - 1);\nloop invariant i <= size ==> sn <= size;\nloop invariant size != 0 ==> sn != 0;\nloop invariant i <= size ==> sn <= size;\nloop invariant sn == (i - 1) ==> sn <= size;\nloop invariant sn == (i - 1) ==> sn != 0;\nloop invariant size != 0 ==> sn != 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= size + 1 is preserved but not established.\nloop invariant 0 <= sn <= size is partially proven to be inductive.\nloop invariant sn == (i - 1) is partially proven to be inductive.\nloop invariant i <= size ==> sn <= size is partially proven to be inductive.\nloop invariant size != 0 ==> sn != 0 is preserved but not established.\nloop invariant sn == (i - 1) ==> sn <= size is partially proven to be inductive.\nloop invariant sn == (i - 1) ==> sn != 0 is preserved but not established.\nAssertion sn == size: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: sn == (i - 1);\nloop invariant i4: i <= size ==> sn <= size;\n\n\n\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == size) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= size + 1;\nloop invariant sn == (i - 1);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= size + 1 is preserved but not established.\nloop invariant sn == (i - 1) is partially proven to be inductive.\nAssertion sn == size: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\nloop invariant i2: sn == (i - 1);\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == size) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 19,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= size;\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant sn == i - 1;\nloop invariant sn == size - (size - i);\nloop invariant sn == size - (i - 1);\nloop invariant sn == size - (size - (size - i));\nloop invariant sn == size - (size - (i - 1));\nloop invariant sn == size - (size - (size - (size - i)));\nloop invariant sn == size - (size - (size - (i - 1)));\nloop invariant sn == size - (size - (size - (size - (size - i))));\nloop invariant sn == size - (size - (size - (size - (i - 1))));\nloop invariant sn == size - (size - (size - (size - (size - (size - i)))));\nloop invariant sn == size - (size - (size - (size - (size - (size - (i - 1))))));\nloop invariant sn == size - (size - (size - (size - (size - (size - (size - i))))));\nloop invariant sn == size - (size - (size - (size - (size - (size - (size - (i - 1)))))));\nloop invariant sn == size - (size - (size - (size - (size - (size - (size - (size - i)))))));\nloop invariant sn == size - (size - (size - (size - (size - (size - (size - (size - (i - 1))))))));\nloop invariant sn == size - (size - (size - (size - (size - (size - (size - (size - (size - i))))))));\nloop invariant sn == size - (size - (size - (size - (size - (size - (size - (size - (size - (i - 1)))))))));\nloop invariant sn == size - (size - (size - (size - (size - (size - (size - (size - (size - (size - i)))))))));\nloop invariant sn == size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (i - 1))))))))));\nloop invariant sn == size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - i))))))))));\nloop invariant sn == size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (i - 1))))))))));\nloop invariant sn == size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - i)))))))))));\nloop invariant sn == size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (i - 1))))))))))));\nloop invariant sn == size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - i)))))))))))));\nloop invariant sn == size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (i - 1))))))))))))));\nloop invariant sn == size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - i)))))))))))))));\nloop invariant sn == size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (i - 1))))))))))))))))));\nloop invariant sn == size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - i)))))))))))))))));\nloop invariant sn == size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (i - 1)))))))))))))))))));\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 40: unexpected token ';'",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\nloop invariant i2: sn >= 0;\n\nloop invariant i4: sn == i - 1;\n\n\n\nloop invariant i8: sn == size - (size - (i - 1));\n\n\n\nloop invariant i12: sn == size - (size - (size - (size - (i - 1))));\n\nloop invariant i14: sn == size - (size - (size - (size - (size - (size - (i - 1))))));\n\n\n\nloop invariant i18: sn == size - (size - (size - (size - (size - (size - (size - (size - (i - 1))))))));\n\n\n\nloop invariant i22: sn == size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (i - 1))))))))));\n\n\n\nloop invariant i26: sn == size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (i - 1))))))))))));\n\n\n\n\n\n\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == size) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= size;\nloop invariant 0 <= sn <= size;\nloop invariant (sn == (i - 1));\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= size is neither established nor preserved.\nloop invariant 0 <= sn <= size is partially proven to be inductive.\nloop invariant (sn == (i - 1)) is partially proven to be inductive.\nAssertion sn == size: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: (sn == (i - 1));\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == size) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 6,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= size;\nloop invariant sn >= 0;\nloop invariant sn <= i;\nloop invariant i >= 1;\nloop invariant sn >= i - size;\nloop invariant sn <= i - 1;\nloop invariant i <= size + 1;\nloop invariant sn >= 0 ==> sn == size;\nloop invariant sn <= i - 1 ==> sn <= size;\nloop invariant i <= size + 1 ==> i <= size + 1 && sn <= size;\nloop invariant i >= 1 ==> i >= 1 && sn >= 0;\nloop invariant sn >= i - size ==> sn >= 0;\nloop invariant sn <= i - 1 ==> sn <= size;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= size is preserved but not established.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn <= i is partially proven to be inductive.\nloop invariant i >= 1 is partially proven to be inductive.\nloop invariant sn >= i - size is partially proven to be inductive.\nloop invariant sn <= i - 1 is partially proven to be inductive.\nloop invariant i <= size + 1 is partially proven to be inductive.\nloop invariant sn >= 0 ==> sn == size is preserved but not established.\nloop invariant sn <= i - 1 ==> sn <= size is partially proven to be inductive.\nloop invariant i <= size + 1 ==> i <= size + 1 && sn <= size is partially proven to be inductive.\nloop invariant i >= 1 ==> i >= 1 && sn >= 0 is partially proven to be inductive.\nloop invariant sn >= i - size ==> sn >= 0 is partially proven to be inductive.\nAssertion sn == size: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\nloop invariant i2: sn >= 0;\nloop invariant i3: sn <= i;\nloop invariant i4: i >= 1;\n\nloop invariant i6: sn <= i - 1;\n\n\n\nloop invariant i10: i <= size + 1 ==> i <= size + 1 && sn <= size;\nloop invariant i11: i >= 1 ==> i >= 1 && sn >= 0;\nloop invariant i12: sn >= i - size ==> sn >= 0;\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == size) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= sn <= size;\nloop invariant i >= 1;\nloop invariant i <= size + 1;\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant sn == size - (size - i);\nloop invariant i == sn + 1;\nloop invariant sn == size - (size - i);\nloop invariant (i <= size) ==> (sn == size - (size - i));\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= sn <= size is preserved but not established.\nloop invariant i >= 1 is partially proven to be inductive.\nloop invariant i <= size + 1 is partially proven to be inductive.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn <= size is partially proven to be inductive.\nloop invariant sn == size - (size - i) is preserved but not established.\nloop invariant i == sn + 1 is partially proven to be inductive.\nloop invariant (i <= size) ==> (sn == size - (size - i)) is partially proven to be inductive.\nAssertion sn == size: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\nloop invariant i2: i >= 1;\n\nloop invariant i4: sn >= 0;\n\n\nloop invariant i7: i == sn + 1;\n\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == size) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= size + 1;\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant i >= 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= size + 1 is preserved but not established.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn <= size is established but not preserved.\nloop invariant i >= 1 is partially proven to be inductive.\nAssertion sn == size: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\nloop invariant i2: sn >= 0;\n\nloop invariant i4: i >= 1;\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == size) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant ( i <= size + 1 ) ==> ( sn == 0 );\nloop invariant ( i <= size + 1 ) ==> ( i == 1 ) ==> ( sn == 0 );\nloop invariant ( i <= size + 1 ) ==> ( i > 1 ) ==> ( sn > 0 );\nloop invariant ( i <= size + 1 ) ==> ( i == size + 1 ) ==> ( sn == size );\nloop invariant ( i <= size + 1 ) ==> ( i > size ) ==> ( sn == size );\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant ( i <= size + 1 ) ==> ( sn == 0 ) is established but not preserved.\nloop invariant ( i <= size + 1 ) ==> ( i == 1 ) ==> ( sn == 0 ) is partially proven to be inductive.\nloop invariant ( i <= size + 1 ) ==> ( i > 1 ) ==> ( sn > 0 ) is partially proven to be inductive.\nloop invariant ( i <= size + 1 ) ==> ( i == size + 1 ) ==> ( sn == size ) is partially proven to be inductive.\nloop invariant ( i <= size + 1 ) ==> ( i > size ) ==> ( sn == size ) is partially proven to be inductive.\nAssertion sn == size: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\n\n\n\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == size) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= size;\nloop invariant sn >= i;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= size is preserved but not established.\nloop invariant sn >= i is preserved but not established.\nAssertion sn == size: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == size) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 1 <= sn <= size;\nloop invariant 1 <= i <= size+1;\nloop invariant sn <= size;\nloop invariant i <= size+1;\nloop invariant i <= size+1 ==> sn <= size;\nloop invariant i <= size+1 ==> sn == size;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= sn <= size is preserved but not established.\nloop invariant 1 <= i <= size+1 is partially proven to be inductive.\nloop invariant sn <= size is partially proven to be inductive.\nloop invariant i <= size+1 is partially proven to be inductive.\nloop invariant i <= size+1 ==> sn <= size is partially proven to be inductive.\nloop invariant i <= size+1 ==> sn == size is partially proven to be inductive.\nAssertion sn == size: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\n\n\n\n\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == size) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= size + 1;\nloop invariant 0 <= sn <= size;\nloop invariant sn == i - 1;\nloop invariant i == size + 1 ==> sn == size;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= size + 1 is preserved but not established.\nloop invariant 0 <= sn <= size is partially proven to be inductive.\nloop invariant sn == i - 1 is partially proven to be inductive.\nloop invariant i == size + 1 ==> sn == size is partially proven to be inductive.\nAssertion sn == size: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: sn == i - 1;\nloop invariant i4: i == size + 1 ==> sn == size;\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == size) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 25,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= size;\nloop invariant 0 <= sn <= size;\nloop invariant sn == i - 1;\nloop invariant i == sn + 1;\nloop invariant (if (size != 0) then (sn == size) else true);\nloop invariant (if (size != 0) then (sn != 0) else true);\nloop invariant (if (size != 0) then (sn == size) else (sn == 0));\nloop invariant (if (size != 0) then (size == sn + 1) else true);\nloop invariant (if (size != 0) then (size == sn + 1) else (sn == 0));\nloop invariant (if (size != 0) then (size == sn + 1) else (sn == size));\nloop invariant (if (size != 0) then (size == sn + 1) else (sn == 0) ==> (sn == size));\nloop invariant (if (size != 0) then (size == sn + 1) else (sn == 0) ==> (sn == 0));\nloop invariant (if (size != 0) then (size == sn + 1) else (sn == 0) ==> (size == sn + 1));\nloop invariant (if (size != 0) then (size == sn + 1) else (sn == 0) ==> (sn == size) ==> (sn == 0));\nloop invariant (if (size != 0) then (size == sn + 1) else (sn == 0) ==> (sn == size) ==> (size == sn + 1));\nloop invariant (if (size != 0) then (size == sn + 1) else (sn == 0) ==> (sn == size) ==> (sn == 0) ==> (sn == size));\nloop invariant (if (size != 0) then (size == sn + 1) else (sn == 0) ==> (sn == size) ==> (sn == 0) ==> (size == sn + 1));\nloop invariant (if (size != 0) then (size == sn + 1) else (sn == 0) ==> (sn == size) ==> (sn == 0) ==> (sn == size) ==> (sn == 0));\nloop invariant (if (size != 0) then (size == sn + 1) else (sn == 0) ==> (sn == size) ==> (sn == 0) ==> (size == sn + 1) ==> (sn == size));\nloop invariant (if (size != 0) then (size == sn + 1) else (sn == 0) ==> (sn == size) ==> (sn == 0) ==> (sn == size) ==> (size == sn + 1) ==> (sn == 0));\nloop invariant (if (size != 0) then (size == sn + 1) else (sn == 0) ==> (sn == size) ==> (sn == 0) ==> (sn == size) ==> (size == sn + 1) ==> (sn == size) ==> (sn == 0));\nloop invariant (if (size != 0) then (size == sn + 1) else (sn == 0) ==> (sn == size) ==> (sn == 0) ==> (sn == size) ==> (size == sn + 1) ==> (sn == size) ==> (size == sn + 1));\nloop invariant (if (size != 0) then (size == sn + 1) else (sn == 0) ==> (sn == size) ==> (sn == 0) ==> (sn == size) ==> (size == sn + 1) ==> (sn == size) ==> (sn == 0) ==> (sn == size));\nloop invariant (if (size != 0) then (size == sn + 1) else (sn == 0) ==> (sn == size) ==> (sn == 0) ==> (sn == size) ==> (size == sn + 1) ==> (sn == size) ==> (size == sn + 1) ==> (sn == 0));\nloop invariant (if (size != 0) then (size == sn + 1) else (sn == 0) ==> (sn == size) ==> (sn == 0) ==> (sn == size) ==> (size == sn + 1) ==> (sn == size) ==> (sn == 0) ==> (sn == size) ==> (sn == 0));\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 21: unexpected token '('",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: sn == i - 1;\nloop invariant i4: i == sn + 1;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == size) );\n}\n\n}",
                    "checker_output_after_prune": false
                }
            ],
            "checker_output_for_combined_annotations": false,
            "checker_message_for_combined_annotations": "Annotation error on line 49: unexpected token 'ensures'",
            "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\nloop invariant i1: 0 <= sn <= size;\nloop invariant i2: i >= 1;\nloop invariant i3: i <= size + 1;\nloop invariant i4: sn >= 0;\nloop invariant i5: sn <= size;\nloop invariant i6: sn == (size - i + 1);\nloop invariant i7: i == (size - sn + 1);\nloop invariant i8: sn + i == size + 1;\nloop invariant i9: sn == i - 1;\nloop invariant i10: i == sn + 1;\nloop invariant i11: sn == size - i + 1;\nloop invariant i12: i == size - sn + 1;\nloop invariant i13: 0 <= i <= size;\nloop invariant i14: sn == (i - 1);\nloop invariant i15: sn == size ==> i > size;\nloop invariant i16: sn == size ==> i >= size + 1;\nloop invariant i17: sn == size ==> i > size ==> i >= size + 1;\nloop invariant i18: sn == size ==> i >= size + 1 ==> i > size;\nloop invariant i19: sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1;\nloop invariant i20: sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 ==> i >= size + 1;\nloop invariant i21: sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1;\nloop invariant i22: sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1;\nloop invariant i23: sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1;\nloop invariant i24: sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1;\nloop invariant i25: sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1;\nloop invariant i26: sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1;\nloop invariant i27: sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1;\nloop invariant i28: sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1;\nloop invariant i29: sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1;\nloop invariant i30: sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1;\nloop invariant i31: sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1;\nloop invariant i32: 0 <= i <= size + 1;\nloop invariant i33: 0 <= sn <= size ensures that 'sn' will always be within the valid range, which implies that the assertion (assert( (sn == size) );\nloop invariant i34: i <= size ==> sn <= size;\nloop invariant i35: size != 0 ==> sn != 0;\nloop invariant i36: sn == (i - 1) ==> sn <= size;\nloop invariant i37: sn == (i - 1) ==> sn != 0;\nloop invariant i38: sn == size - (size - i);\nloop invariant i39: sn == size - (i - 1);\nloop invariant i40: sn == size - (size - (size - i));\nloop invariant i41: sn == size - (size - (i - 1));\nloop invariant i42: sn == size - (size - (size - (size - i)));\nloop invariant i43: sn == size - (size - (size - (i - 1)));\nloop invariant i44: sn == size - (size - (size - (size - (size - i))));\nloop invariant i45: sn == size - (size - (size - (size - (i - 1))));\nloop invariant i46: sn == size - (size - (size - (size - (size - (size - i)))));\nloop invariant i47: sn == size - (size - (size - (size - (size - (size - (i - 1))))));\nloop invariant i48: sn == size - (size - (size - (size - (size - (size - (size - i))))));\nloop invariant i49: sn == size - (size - (size - (size - (size - (size - (size - (i - 1)))))));\nloop invariant i50: sn == size - (size - (size - (size - (size - (size - (size - (size - i)))))));\nloop invariant i51: sn == size - (size - (size - (size - (size - (size - (size - (size - (i - 1))))))));\nloop invariant i52: sn == size - (size - (size - (size - (size - (size - (size - (size - (size - i))))))));\nloop invariant i53: sn == size - (size - (size - (size - (size - (size - (size - (size - (size - (i - 1)))))))));\nloop invariant i54: sn == size - (size - (size - (size - (size - (size - (size - (size - (size - (size - i)))))))));\nloop invariant i55: sn == size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (i - 1))))))))));\nloop invariant i56: sn == size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - i))))))))));\nloop invariant i57: sn == size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (i - 1))))))))));\nloop invariant i58: sn == size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - i)))))))))));\nloop invariant i59: sn == size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (i - 1))))))))))));\nloop invariant i60: sn == size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - i)))))))))))));\nloop invariant i61: sn == size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (i - 1))))))))))))));\nloop invariant i62: sn == size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - i)))))))))))))));\nloop invariant i63: sn == size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (i - 1))))))))))))))))));\nloop invariant i64: sn == size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - i)))))))))))))))));\nloop invariant i65: sn == size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (i - 1)))))))))))))))))));\nloop invariant i66: (sn == (i - 1));\nloop invariant i67: sn <= i;\nloop invariant i68: sn >= i - size;\nloop invariant i69: sn <= i - 1;\nloop invariant i70: sn >= 0 ==> sn == size;\nloop invariant i71: sn <= i - 1 ==> sn <= size;\nloop invariant i72: i <= size + 1 ==> i <= size + 1 && sn <= size;\nloop invariant i73: i >= 1 ==> i >= 1 && sn >= 0;\nloop invariant i74: sn >= i - size ==> sn >= 0;\nloop invariant i75: (i <= size) ==> (sn == size - (size - i));\nloop invariant i76: ( i <= size + 1 ) ==> ( sn == 0 );\nloop invariant i77: ( i <= size + 1 ) ==> ( i == 1 ) ==> ( sn == 0 );\nloop invariant i78: ( i <= size + 1 ) ==> ( i > 1 ) ==> ( sn > 0 );\nloop invariant i79: ( i <= size + 1 ) ==> ( i == size + 1 ) ==> ( sn == size );\nloop invariant i80: ( i <= size + 1 ) ==> ( i > size ) ==> ( sn == size );\nloop invariant i81: sn >= i;\nloop invariant i82: 1 <= sn <= size;\nloop invariant i83: 1 <= i <= size+1;\nloop invariant i84: i <= size+1;\nloop invariant i85: i <= size+1 ==> sn <= size;\nloop invariant i86: i <= size+1 ==> sn == size;\nloop invariant i87: i == size + 1 ==> sn == size;\nloop invariant i88: (if (size != 0) then (sn == size) else true);\nloop invariant i89: (if (size != 0) then (sn != 0) else true);\nloop invariant i90: (if (size != 0) then (sn == size) else (sn == 0));\nloop invariant i91: (if (size != 0) then (size == sn + 1) else true);\nloop invariant i92: (if (size != 0) then (size == sn + 1) else (sn == 0));\nloop invariant i93: (if (size != 0) then (size == sn + 1) else (sn == size));\nloop invariant i94: (if (size != 0) then (size == sn + 1) else (sn == 0) ==> (sn == size));\nloop invariant i95: (if (size != 0) then (size == sn + 1) else (sn == 0) ==> (sn == 0));\nloop invariant i96: (if (size != 0) then (size == sn + 1) else (sn == 0) ==> (size == sn + 1));\nloop invariant i97: (if (size != 0) then (size == sn + 1) else (sn == 0) ==> (sn == size) ==> (sn == 0));\nloop invariant i98: (if (size != 0) then (size == sn + 1) else (sn == 0) ==> (sn == size) ==> (size == sn + 1));\nloop invariant i99: (if (size != 0) then (size == sn + 1) else (sn == 0) ==> (sn == size) ==> (sn == 0) ==> (sn == size));\nloop invariant i100: (if (size != 0) then (size == sn + 1) else (sn == 0) ==> (sn == size) ==> (sn == 0) ==> (size == sn + 1));\nloop invariant i101: (if (size != 0) then (size == sn + 1) else (sn == 0) ==> (sn == size) ==> (sn == 0) ==> (sn == size) ==> (sn == 0));\nloop invariant i102: (if (size != 0) then (size == sn + 1) else (sn == 0) ==> (sn == size) ==> (sn == 0) ==> (size == sn + 1) ==> (sn == size));\nloop invariant i103: (if (size != 0) then (size == sn + 1) else (sn == 0) ==> (sn == size) ==> (sn == 0) ==> (sn == size) ==> (size == sn + 1) ==> (sn == 0));\nloop invariant i104: (if (size != 0) then (size == sn + 1) else (sn == 0) ==> (sn == size) ==> (sn == 0) ==> (sn == size) ==> (size == sn + 1) ==> (sn == size) ==> (sn == 0));\nloop invariant i105: (if (size != 0) then (size == sn + 1) else (sn == 0) ==> (sn == size) ==> (sn == 0) ==> (sn == size) ==> (size == sn + 1) ==> (sn == size) ==> (size == sn + 1));\nloop invariant i106: (if (size != 0) then (size == sn + 1) else (sn == 0) ==> (sn == size) ==> (sn == 0) ==> (sn == size) ==> (size == sn + 1) ==> (sn == size) ==> (sn == 0) ==> (sn == size));\nloop invariant i107: (if (size != 0) then (size == sn + 1) else (sn == 0) ==> (sn == size) ==> (sn == 0) ==> (sn == size) ==> (size == sn + 1) ==> (sn == size) ==> (size == sn + 1) ==> (sn == 0));\nloop invariant i108: (if (size != 0) then (size == sn + 1) else (sn == 0) ==> (sn == size) ==> (sn == 0) ==> (sn == size) ==> (size == sn + 1) ==> (sn == size) ==> (sn == 0) ==> (sn == size) ==> (sn == 0));\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == size) );\n}\n\n}",
            "combined_annotation_num_solver_calls": 48,
            "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\nloop invariant i2: i >= 1;\n\nloop invariant i4: sn >= 0;\n\n\n\n\nloop invariant i9: sn == i - 1;\nloop invariant i10: i == sn + 1;\n\n\n\nloop invariant i14: sn == (i - 1);\nloop invariant i15: sn == size ==> i > size;\nloop invariant i16: sn == size ==> i >= size + 1;\nloop invariant i17: sn == size ==> i > size ==> i >= size + 1;\nloop invariant i18: sn == size ==> i >= size + 1 ==> i > size;\nloop invariant i19: sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1;\nloop invariant i20: sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 ==> i >= size + 1;\nloop invariant i21: sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1;\nloop invariant i22: sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1;\nloop invariant i23: sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1;\nloop invariant i24: sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1;\nloop invariant i25: sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1;\nloop invariant i26: sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1;\nloop invariant i27: sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1;\nloop invariant i28: sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1;\nloop invariant i29: sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1;\nloop invariant i30: sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1;\nloop invariant i31: sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1;\n\n\nloop invariant i34: i <= size ==> sn <= size;\n\n\n\n\n\n\nloop invariant i41: sn == size - (size - (i - 1));\n\n\n\nloop invariant i45: sn == size - (size - (size - (size - (i - 1))));\n\nloop invariant i47: sn == size - (size - (size - (size - (size - (size - (i - 1))))));\n\n\n\nloop invariant i51: sn == size - (size - (size - (size - (size - (size - (size - (size - (i - 1))))))));\n\n\n\nloop invariant i55: sn == size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (i - 1))))))))));\n\n\n\nloop invariant i59: sn == size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (i - 1))))))))))));\n\n\n\n\n\n\nloop invariant i66: (sn == (i - 1));\nloop invariant i67: sn <= i;\n\nloop invariant i69: sn <= i - 1;\n\n\nloop invariant i72: i <= size + 1 ==> i <= size + 1 && sn <= size;\nloop invariant i73: i >= 1 ==> i >= 1 && sn >= 0;\nloop invariant i74: sn >= i - size ==> sn >= 0;\n\n\nloop invariant i77: ( i <= size + 1 ) ==> ( i == 1 ) ==> ( sn == 0 );\nloop invariant i78: ( i <= size + 1 ) ==> ( i > 1 ) ==> ( sn > 0 );\nloop invariant i79: ( i <= size + 1 ) ==> ( i == size + 1 ) ==> ( sn == size );\nloop invariant i80: ( i <= size + 1 ) ==> ( i > size ) ==> ( sn == size );\n\n\n\n\nloop invariant i85: i <= size+1 ==> sn <= size;\n\nloop invariant i87: i == size + 1 ==> sn == size;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == size) );\n}\n\n}",
            "checker_output_after_prune": false
        },
        {
            "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop17_VeriMAP_true.c",
            "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n\tint N = unknown_uint();\n  int i, j, k;\n\n  i = 0;\n  j = 0;\n  k = 0;\n\n  assume( N > 1 );\n\n  while (i < N) {\n    if (i<1)\n      k = 1;\n    else\n      k = 0;\n    j++;\n    i++;\n  }\n\n  {;\n//@ assert(!( k>0 ));\n}\n\n  return 0;\n}",
            "success": true,
            "annotation_blocks": [
                "```\n/*@\nloop invariant 0 <= i <= N;\nloop invariant 0 <= j <= N;\nloop invariant 0 <= k <= 1;\nloop invariant !(i < N) ==> (k == 0);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= N;\nloop invariant 0 <= j <= N;\nloop invariant 0 <= k <= 1;\nloop invariant i + j == N;\nloop invariant i == k;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= N;\nloop invariant j == i;\nloop invariant k == (i == 1 ? 1 : 0);\n*/\n```",
                "```\n/*@\nloop invariant 1 <= i <= N;\nloop invariant 0 <= j <= i;\nloop invariant j == (i * (i - 1)) / 2;\nloop invariant i == N;\nloop invariant k == (i < 1);\nloop invariant 1 <= i <= N;\nloop invariant 0 <= j <= i;\nloop invariant j == (i * (i - 1)) / 2;\nloop invariant i == N;\nloop invariant k == (i < 1);\nloop invariant !(k > 0) ==> (i < 1);\nloop invariant (i >= 1) ==> !(k > 0);\nloop invariant 1 <= i <= N;\nloop invariant 0 <= j <= i;\nloop invariant j == (i * (i - 1)) / 2;\nloop invariant i == N;\nloop invariant k == (i < 1);\nloop invariant (i >= 1) ==> !(k > 0);\nloop invariant !(k > 0) ==> (i < 1);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= N;\nloop invariant 0 <= j <= N;\nloop invariant 0 <= k <= 1;\nloop invariant i + j == N;\nloop invariant i == j;\nloop invariant k == 0;\nloop invariant k == 0;\n*/\n```",
                "```\n/*@\nloop invariant i >= 0;\nloop invariant i <= N;\nloop invariant j >= 0;\nloop invariant j <= N;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant (k>0) ==> (i>0);\nloop invariant (k==0) ==> (i==0);\nloop invariant j>=i;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= N;\nloop invariant 0 <= j <= N;\nloop invariant 0 <= k <= 1;\nloop invariant i == j;\nloop invariant k == (i > 0 ? 0 : 1);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= N;\nloop invariant 0 <= j <= N;\nloop invariant 0 <= k <= 1;\nloop invariant i < N ==> k == 0;\nloop invariant i < N ==> j == i;\nloop invariant i < N ==> k == 0 ==> j == i;\nloop invariant i < N ==> k > 0 ==> j == i+1;\nloop invariant i == N ==> k == 0;\nloop invariant i == N ==> j == N;\nloop invariant i == N ==> k == 0 ==> j == N;\nloop invariant i == N ==> k > 0 ==> j == N+1;\nloop invariant 0 <= i <= N;\nloop invariant 0 <= j <= N;\nloop invariant 0 <= k <= 1;\nloop invariant i < N ==> k == 0;\nloop invariant i < N ==> j == i;\nloop invariant i < N ==> k == 0 ==> j == i;\nloop invariant i < N ==> k > 0 ==> j == i+1;\nloop invariant i == N ==> k == 0;\nloop invariant i == N ==> j == N;\nloop invariant i == N ==> k == 0 ==> j == N;\nloop invariant i == N ==> k > 0 ==> j == N+1;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= N;\nloop invariant 0 <= j <= N;\nloop invariant 0 <= k <= 1;\nloop invariant i <= N ==> k == 0;\nloop invariant i == N ==> k == 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= N;\n*/\n```",
                "```\n/*@\nloop invariant i is in the range [0, N-1];\nloop invariant j is in the range [1, N];\nloop invariant k is either 0 or 1;\nloop invariant k is 1 if i < 1, otherwise k is 0;\nloop invariant j is always increasing by 1 for each iteration of the loop;\nloop invariant i is always increasing by 1 for each iteration of the loop;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= k <= 1;\nloop invariant 0 <= i <= N;\nloop invariant 0 <= j <= N;\nloop invariant i + j = N;\nloop invariant i + k = 1;\nloop invariant j + k = N;\nloop invariant i >= k;\nloop invariant j >= k;\nloop invariant i == 1 ==> k == 1;\nloop invariant i < 1 ==> k == 0;\nloop invariant j == i + 1;\nloop invariant k == 1;\nloop invariant k == 0;\nloop invariant i == N;\nloop invariant j == N;\nloop invariant k == 0;\nloop invariant k == 1;\nloop invariant i >= k;\nloop invariant j >= k;\nloop invariant i + j = N;\nloop invariant i == 1;\nloop invariant j == 1;\nloop invariant k == 1;\nloop invariant i == 0;\nloop invariant j == 0;\nloop invariant k == 0;\nloop invariant i == N;\nloop invariant j == N;\nloop invariant k == 0;\nloop invariant k == 1;\nloop invariant i >= k;\nloop invariant j >= k;\nloop invariant i + j = N;\nloop invariant i == 1;\nloop invariant j == 1;\nloop invariant k == 1;\nloop invariant i == 0;\nloop invariant j == 0;\nloop invariant k == 0;\nloop invariant i == N;\nloop invariant j == N;\nloop invariant k == 0;\nloop invariant k == 1;\nloop invariant i >= k;\nloop invariant j >= k;\nloop invariant i + j = N;\nloop invariant i == 1;\nloop invariant j == 1;\nloop invariant k == 1;\nloop invariant i == 0;\nloop invariant j == 0;\nloop invariant k == 0;\nloop invariant i == N;\nloop invariant j == N;\nloop invariant k == 0;\nloop invariant k == 1;\nloop invariant i >= k;\nloop invariant j >= k;\nloop invariant i + j = N;\nloop invariant i == 1;\nloop invariant j == 1;\nloop invariant k == 1;\nloop invariant i == 0;\nloop invariant j == 0;\nloop invariant k == 0;\nloop invariant i == N;\nloop invariant j == N;\nloop invariant k == 0;\nloop invariant k == 1;\nloop invariant i >= k;\nloop invariant j >= k;\nloop invariant i + j = N;\nloop invariant i == 1;\nloop invariant j == 1;\nloop invariant k == 1;\nloop invariant i == 0;\nloop invariant j == 0;\nloop invariant k == 0;\nloop invariant i == N;\nloop invariant j == N;\nloop invariant k == 0;\nloop invariant k == 1;\nloop invariant i >= k;\nloop invariant j >= k;\nloop invariant i + j = N;\nloop invariant i == 1;\nloop invariant j == 1;\nloop invariant k == 1;\nloop invariant i == 0;\nloop invariant j == 0;\nloop invariant k == 0;\nloop invariant i == N;\nloop invariant j == N;\nloop invariant k == 0;\nloop invariant k == 1;\nloop invariant i >= k;\nloop invariant j >= k;\nloop invariant i + j = N;\nloop invariant i == 1;\nloop invariant j == 1;\nloop invariant k == 1;\nloop invariant i == 0;\nloop invariant j == 0;\nloop invariant k == 0;\nloop invariant i == N;\nloop invariant j == N;\nloop invariant k == 0;\nloop invariant k == 1;\nloop invariant i >= k;\nloop invariant j >= k;\nloop invariant i + j = N;\nloop invariant i == 1;\nloop invariant j == 1;\nloop invariant k == 1;\nloop invariant i == 0;\nloop invariant j == 0;\nloop invariant k == 0;\nloop invariant i == N;\nloop invariant j == N;\nloop invariant k == 0;\nloop invariant k == 1;\nloop invariant i >= k;\nloop invariant j >= k;\nloop invariant i + j = N;\nloop invariant i == 1;\nloop invariant j == 1;\nloop invariant k == 1;\nloop invariant i == 0;\nloop invariant j == 0;\nloop invariant k == 0;\nloop invariant i == N;\nloop invariant j == N;\nloop invariant k == 0;\nloop invariant k == 1;\nloop invariant i >= k;\nloop invariant j >= k;\nloop invariant i + j = N;\nloop invariant i == 1;\nloop invariant j == 1;\nloop invariant k == 1;\nloop invariant i == 0;\nloop invariant j == 0;\nloop invariant k == 0;\nloop invariant i == N;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= N;\nloop invariant 0 <= j <= N;\nloop invariant 0 <= k <= 1;\nloop invariant (k == 0) ==> (j == i);\nloop invariant (k == 1) ==> (j == i - 1);\nloop invariant !(N > 1) ==> (i == N && j == N && k == 0);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= N;\nloop invariant 0 <= j <= N;\nloop invariant 0 <= k <= 1;\nloop invariant (i < N) ==> (k == 0);\nloop invariant (i >= N) ==> (k == 1);\n*/\n```",
                "```\n/*@\nloop invariant i > 0;\nloop invariant i < N;\nloop invariant i = j;\nloop invariant i = k;\nloop invariant j > 0;\nloop invariant j <= i;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant k == 0 || k == 1;\n*/\n```"
            ],
            "completions": [
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= N;\nloop invariant 0 <= j <= N;\nloop invariant 0 <= k <= 1;\nloop invariant !(i < N) ==> (k == 0);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= N is partially proven to be inductive.\nloop invariant 0 <= j <= N is established but not preserved.\nloop invariant 0 <= k <= 1 is partially proven to be inductive.\nloop invariant !(i < N) ==> (k == 0) is established but not preserved.\nAssertion !(k > 0): Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n\tint N = unknown_uint();\n  int i, j, k;\n\n  i = 0;\n  j = 0;\n  k = 0;\n\n  assume( N > 1 );\n\n  /*@\nloop invariant i1: 0 <= i <= N;\n\nloop invariant i3: 0 <= k <= 1;\n\n*/\nwhile (i < N) {\n    if (i<1)\n      k = 1;\n    else\n      k = 0;\n    j++;\n    i++;\n  }\n\n  {;\n//@ assert(!( k>0 ));\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= N;\nloop invariant 0 <= j <= N;\nloop invariant 0 <= k <= 1;\nloop invariant i + j == N;\nloop invariant i == k;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= N is partially proven to be inductive.\nloop invariant 0 <= j <= N is partially proven to be inductive.\nloop invariant 0 <= k <= 1 is partially proven to be inductive.\nloop invariant i + j == N is preserved but not established.\nloop invariant i == k is partially proven to be inductive.\nAssertion !(k > 0): Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n\tint N = unknown_uint();\n  int i, j, k;\n\n  i = 0;\n  j = 0;\n  k = 0;\n\n  assume( N > 1 );\n\n  /*@\nloop invariant i1: 0 <= i <= N;\n\nloop invariant i3: 0 <= k <= 1;\n\n\n*/\nwhile (i < N) {\n    if (i<1)\n      k = 1;\n    else\n      k = 0;\n    j++;\n    i++;\n  }\n\n  {;\n//@ assert(!( k>0 ));\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= N;\nloop invariant j == i;\nloop invariant k == (i == 1 ? 1 : 0);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= N is inductive.\nloop invariant j == i is inductive.\nloop invariant k == (i == 1 ? 1 : 0) is inductive.\nAssertion !(k > 0): Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n\tint N = unknown_uint();\n  int i, j, k;\n\n  i = 0;\n  j = 0;\n  k = 0;\n\n  assume( N > 1 );\n\n  /*@\nloop invariant i1: 0 <= i <= N;\nloop invariant i2: j == i;\nloop invariant i3: k == (i == 1 ? 1 : 0);\n*/\nwhile (i < N) {\n    if (i<1)\n      k = 1;\n    else\n      k = 0;\n    j++;\n    i++;\n  }\n\n  {;\n//@ assert(!( k>0 ));\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 8,
                    "annotations": "```\n/*@\nloop invariant 1 <= i <= N;\nloop invariant 0 <= j <= i;\nloop invariant j == (i * (i - 1)) / 2;\nloop invariant i == N;\nloop invariant k == (i < 1);\nloop invariant 1 <= i <= N;\nloop invariant 0 <= j <= i;\nloop invariant j == (i * (i - 1)) / 2;\nloop invariant i == N;\nloop invariant k == (i < 1);\nloop invariant !(k > 0) ==> (i < 1);\nloop invariant (i >= 1) ==> !(k > 0);\nloop invariant 1 <= i <= N;\nloop invariant 0 <= j <= i;\nloop invariant j == (i * (i - 1)) / 2;\nloop invariant i == N;\nloop invariant k == (i < 1);\nloop invariant (i >= 1) ==> !(k > 0);\nloop invariant !(k > 0) ==> (i < 1);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= i <= N is preserved but not established.\nloop invariant 0 <= j <= i is partially proven to be inductive.\nloop invariant j == (i * (i - 1)) / 2 is partially proven to be inductive.\nloop invariant i == N is partially proven to be inductive.\nloop invariant k == (i < 1) is partially proven to be inductive.\nloop invariant !(k > 0) ==> (i < 1) is partially proven to be inductive.\nloop invariant (i >= 1) ==> !(k > 0) is partially proven to be inductive.\nAssertion !(k > 0): Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n\tint N = unknown_uint();\n  int i, j, k;\n\n  i = 0;\n  j = 0;\n  k = 0;\n\n  assume( N > 1 );\n\n  /*@\n\nloop invariant i2: 0 <= j <= i;\n\n\n\n\n\n*/\nwhile (i < N) {\n    if (i<1)\n      k = 1;\n    else\n      k = 0;\n    j++;\n    i++;\n  }\n\n  {;\n//@ assert(!( k>0 ));\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= N;\nloop invariant 0 <= j <= N;\nloop invariant 0 <= k <= 1;\nloop invariant i + j == N;\nloop invariant i == j;\nloop invariant k == 0;\nloop invariant k == 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= N is partially proven to be inductive.\nloop invariant 0 <= j <= N is partially proven to be inductive.\nloop invariant 0 <= k <= 1 is partially proven to be inductive.\nloop invariant i + j == N is preserved but not established.\nloop invariant i == j is partially proven to be inductive.\nloop invariant k == 0 is partially proven to be inductive.\nAssertion !(k > 0): Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n\tint N = unknown_uint();\n  int i, j, k;\n\n  i = 0;\n  j = 0;\n  k = 0;\n\n  assume( N > 1 );\n\n  /*@\nloop invariant i1: 0 <= i <= N;\nloop invariant i2: 0 <= j <= N;\nloop invariant i3: 0 <= k <= 1;\n\nloop invariant i5: i == j;\n\n*/\nwhile (i < N) {\n    if (i<1)\n      k = 1;\n    else\n      k = 0;\n    j++;\n    i++;\n  }\n\n  {;\n//@ assert(!( k>0 ));\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant i >= 0;\nloop invariant i <= N;\nloop invariant j >= 0;\nloop invariant j <= N;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant (k>0) ==> (i>0);\nloop invariant (k==0) ==> (i==0);\nloop invariant j>=i;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant i >= 0 is partially proven to be inductive.\nloop invariant i <= N is partially proven to be inductive.\nloop invariant j >= 0 is partially proven to be inductive.\nloop invariant j <= N is established but not preserved.\nloop invariant k >= 0 is partially proven to be inductive.\nloop invariant k <= 1 is partially proven to be inductive.\nloop invariant (k>0) ==> (i>0) is partially proven to be inductive.\nloop invariant (k==0) ==> (i==0) is established but not preserved.\nloop invariant j>=i is partially proven to be inductive.\nAssertion !(k > 0): Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n\tint N = unknown_uint();\n  int i, j, k;\n\n  i = 0;\n  j = 0;\n  k = 0;\n\n  assume( N > 1 );\n\n  /*@\nloop invariant i1: i >= 0;\nloop invariant i2: i <= N;\nloop invariant i3: j >= 0;\n\nloop invariant i5: k >= 0;\nloop invariant i6: k <= 1;\nloop invariant i7: (k>0) ==> (i>0);\n\nloop invariant i9: j>=i;\n*/\nwhile (i < N) {\n    if (i<1)\n      k = 1;\n    else\n      k = 0;\n    j++;\n    i++;\n  }\n\n  {;\n//@ assert(!( k>0 ));\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= N;\nloop invariant 0 <= j <= N;\nloop invariant 0 <= k <= 1;\nloop invariant i == j;\nloop invariant k == (i > 0 ? 0 : 1);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= N is partially proven to be inductive.\nloop invariant 0 <= j <= N is partially proven to be inductive.\nloop invariant 0 <= k <= 1 is partially proven to be inductive.\nloop invariant i == j is partially proven to be inductive.\nloop invariant k == (i > 0 ? 0 : 1) is preserved but not established.\nAssertion !(k > 0): Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n\tint N = unknown_uint();\n  int i, j, k;\n\n  i = 0;\n  j = 0;\n  k = 0;\n\n  assume( N > 1 );\n\n  /*@\nloop invariant i1: 0 <= i <= N;\nloop invariant i2: 0 <= j <= N;\nloop invariant i3: 0 <= k <= 1;\nloop invariant i4: i == j;\n\n*/\nwhile (i < N) {\n    if (i<1)\n      k = 1;\n    else\n      k = 0;\n    j++;\n    i++;\n  }\n\n  {;\n//@ assert(!( k>0 ));\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= N;\nloop invariant 0 <= j <= N;\nloop invariant 0 <= k <= 1;\nloop invariant i < N ==> k == 0;\nloop invariant i < N ==> j == i;\nloop invariant i < N ==> k == 0 ==> j == i;\nloop invariant i < N ==> k > 0 ==> j == i+1;\nloop invariant i == N ==> k == 0;\nloop invariant i == N ==> j == N;\nloop invariant i == N ==> k == 0 ==> j == N;\nloop invariant i == N ==> k > 0 ==> j == N+1;\nloop invariant 0 <= i <= N;\nloop invariant 0 <= j <= N;\nloop invariant 0 <= k <= 1;\nloop invariant i < N ==> k == 0;\nloop invariant i < N ==> j == i;\nloop invariant i < N ==> k == 0 ==> j == i;\nloop invariant i < N ==> k > 0 ==> j == i+1;\nloop invariant i == N ==> k == 0;\nloop invariant i == N ==> j == N;\nloop invariant i == N ==> k == 0 ==> j == N;\nloop invariant i == N ==> k > 0 ==> j == N+1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= N is partially proven to be inductive.\nloop invariant 0 <= j <= N is partially proven to be inductive.\nloop invariant 0 <= k <= 1 is partially proven to be inductive.\nloop invariant i < N ==> k == 0 is established but not preserved.\nloop invariant i < N ==> j == i is partially proven to be inductive.\nloop invariant i < N ==> k == 0 ==> j == i is partially proven to be inductive.\nloop invariant i < N ==> k > 0 ==> j == i+1 is partially proven to be inductive.\nloop invariant i == N ==> k == 0 is established but not preserved.\nloop invariant i == N ==> j == N is partially proven to be inductive.\nloop invariant i == N ==> k == 0 ==> j == N is partially proven to be inductive.\nloop invariant i == N ==> k > 0 ==> j == N+1 is partially proven to be inductive.\nAssertion !(k > 0): Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n\tint N = unknown_uint();\n  int i, j, k;\n\n  i = 0;\n  j = 0;\n  k = 0;\n\n  assume( N > 1 );\n\n  /*@\nloop invariant i1: 0 <= i <= N;\nloop invariant i2: 0 <= j <= N;\nloop invariant i3: 0 <= k <= 1;\n\nloop invariant i5: i < N ==> j == i;\nloop invariant i6: i < N ==> k == 0 ==> j == i;\n\n\nloop invariant i9: i == N ==> j == N;\nloop invariant i10: i == N ==> k == 0 ==> j == N;\n\n*/\nwhile (i < N) {\n    if (i<1)\n      k = 1;\n    else\n      k = 0;\n    j++;\n    i++;\n  }\n\n  {;\n//@ assert(!( k>0 ));\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= N;\nloop invariant 0 <= j <= N;\nloop invariant 0 <= k <= 1;\nloop invariant i <= N ==> k == 0;\nloop invariant i == N ==> k == 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= N is partially proven to be inductive.\nloop invariant 0 <= j <= N is established but not preserved.\nloop invariant 0 <= k <= 1 is partially proven to be inductive.\nloop invariant i <= N ==> k == 0 is established but not preserved.\nloop invariant i == N ==> k == 0 is partially proven to be inductive.\nAssertion !(k > 0): Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n\tint N = unknown_uint();\n  int i, j, k;\n\n  i = 0;\n  j = 0;\n  k = 0;\n\n  assume( N > 1 );\n\n  /*@\nloop invariant i1: 0 <= i <= N;\n\nloop invariant i3: 0 <= k <= 1;\n\n\n*/\nwhile (i < N) {\n    if (i<1)\n      k = 1;\n    else\n      k = 0;\n    j++;\n    i++;\n  }\n\n  {;\n//@ assert(!( k>0 ));\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= N;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= N is inductive.\nAssertion !(k > 0): Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n\tint N = unknown_uint();\n  int i, j, k;\n\n  i = 0;\n  j = 0;\n  k = 0;\n\n  assume( N > 1 );\n\n  /*@\nloop invariant i1: 0 <= i <= N;\n*/\nwhile (i < N) {\n    if (i<1)\n      k = 1;\n    else\n      k = 0;\n    j++;\n    i++;\n  }\n\n  {;\n//@ assert(!( k>0 ));\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 7,
                    "annotations": "```\n/*@\nloop invariant i is in the range [0, N-1];\nloop invariant j is in the range [1, N];\nloop invariant k is either 0 or 1;\nloop invariant k is 1 if i < 1, otherwise k is 0;\nloop invariant j is always increasing by 1 for each iteration of the loop;\nloop invariant i is always increasing by 1 for each iteration of the loop;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 24: unexpected token 'is'",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n\tint N = unknown_uint();\n  int i, j, k;\n\n  i = 0;\n  j = 0;\n  k = 0;\n\n  assume( N > 1 );\n\n  /*@\n\n\n\n\n\n\n*/\nwhile (i < N) {\n    if (i<1)\n      k = 1;\n    else\n      k = 0;\n    j++;\n    i++;\n  }\n\n  {;\n//@ assert(!( k>0 ));\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 15,
                    "annotations": "```\n/*@\nloop invariant 0 <= k <= 1;\nloop invariant 0 <= i <= N;\nloop invariant 0 <= j <= N;\nloop invariant i + j = N;\nloop invariant i + k = 1;\nloop invariant j + k = N;\nloop invariant i >= k;\nloop invariant j >= k;\nloop invariant i == 1 ==> k == 1;\nloop invariant i < 1 ==> k == 0;\nloop invariant j == i + 1;\nloop invariant k == 1;\nloop invariant k == 0;\nloop invariant i == N;\nloop invariant j == N;\nloop invariant k == 0;\nloop invariant k == 1;\nloop invariant i >= k;\nloop invariant j >= k;\nloop invariant i + j = N;\nloop invariant i == 1;\nloop invariant j == 1;\nloop invariant k == 1;\nloop invariant i == 0;\nloop invariant j == 0;\nloop invariant k == 0;\nloop invariant i == N;\nloop invariant j == N;\nloop invariant k == 0;\nloop invariant k == 1;\nloop invariant i >= k;\nloop invariant j >= k;\nloop invariant i + j = N;\nloop invariant i == 1;\nloop invariant j == 1;\nloop invariant k == 1;\nloop invariant i == 0;\nloop invariant j == 0;\nloop invariant k == 0;\nloop invariant i == N;\nloop invariant j == N;\nloop invariant k == 0;\nloop invariant k == 1;\nloop invariant i >= k;\nloop invariant j >= k;\nloop invariant i + j = N;\nloop invariant i == 1;\nloop invariant j == 1;\nloop invariant k == 1;\nloop invariant i == 0;\nloop invariant j == 0;\nloop invariant k == 0;\nloop invariant i == N;\nloop invariant j == N;\nloop invariant k == 0;\nloop invariant k == 1;\nloop invariant i >= k;\nloop invariant j >= k;\nloop invariant i + j = N;\nloop invariant i == 1;\nloop invariant j == 1;\nloop invariant k == 1;\nloop invariant i == 0;\nloop invariant j == 0;\nloop invariant k == 0;\nloop invariant i == N;\nloop invariant j == N;\nloop invariant k == 0;\nloop invariant k == 1;\nloop invariant i >= k;\nloop invariant j >= k;\nloop invariant i + j = N;\nloop invariant i == 1;\nloop invariant j == 1;\nloop invariant k == 1;\nloop invariant i == 0;\nloop invariant j == 0;\nloop invariant k == 0;\nloop invariant i == N;\nloop invariant j == N;\nloop invariant k == 0;\nloop invariant k == 1;\nloop invariant i >= k;\nloop invariant j >= k;\nloop invariant i + j = N;\nloop invariant i == 1;\nloop invariant j == 1;\nloop invariant k == 1;\nloop invariant i == 0;\nloop invariant j == 0;\nloop invariant k == 0;\nloop invariant i == N;\nloop invariant j == N;\nloop invariant k == 0;\nloop invariant k == 1;\nloop invariant i >= k;\nloop invariant j >= k;\nloop invariant i + j = N;\nloop invariant i == 1;\nloop invariant j == 1;\nloop invariant k == 1;\nloop invariant i == 0;\nloop invariant j == 0;\nloop invariant k == 0;\nloop invariant i == N;\nloop invariant j == N;\nloop invariant k == 0;\nloop invariant k == 1;\nloop invariant i >= k;\nloop invariant j >= k;\nloop invariant i + j = N;\nloop invariant i == 1;\nloop invariant j == 1;\nloop invariant k == 1;\nloop invariant i == 0;\nloop invariant j == 0;\nloop invariant k == 0;\nloop invariant i == N;\nloop invariant j == N;\nloop invariant k == 0;\nloop invariant k == 1;\nloop invariant i >= k;\nloop invariant j >= k;\nloop invariant i + j = N;\nloop invariant i == 1;\nloop invariant j == 1;\nloop invariant k == 1;\nloop invariant i == 0;\nloop invariant j == 0;\nloop invariant k == 0;\nloop invariant i == N;\nloop invariant j == N;\nloop invariant k == 0;\nloop invariant k == 1;\nloop invariant i >= k;\nloop invariant j >= k;\nloop invariant i + j = N;\nloop invariant i == 1;\nloop invariant j == 1;\nloop invariant k == 1;\nloop invariant i == 0;\nloop invariant j == 0;\nloop invariant k == 0;\nloop invariant i == N;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 27: Assignment operators not allowed in annotations.",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n\tint N = unknown_uint();\n  int i, j, k;\n\n  i = 0;\n  j = 0;\n  k = 0;\n\n  assume( N > 1 );\n\n  /*@\nloop invariant i1: 0 <= k <= 1;\nloop invariant i2: 0 <= i <= N;\n\n\n\n\nloop invariant i7: i >= k;\nloop invariant i8: j >= k;\nloop invariant i9: i == 1 ==> k == 1;\nloop invariant i10: i < 1 ==> k == 0;\n\n\n\n\n\n\n\n\n\n*/\nwhile (i < N) {\n    if (i<1)\n      k = 1;\n    else\n      k = 0;\n    j++;\n    i++;\n  }\n\n  {;\n//@ assert(!( k>0 ));\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= N;\nloop invariant 0 <= j <= N;\nloop invariant 0 <= k <= 1;\nloop invariant (k == 0) ==> (j == i);\nloop invariant (k == 1) ==> (j == i - 1);\nloop invariant !(N > 1) ==> (i == N && j == N && k == 0);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= N is partially proven to be inductive.\nloop invariant 0 <= j <= N is partially proven to be inductive.\nloop invariant 0 <= k <= 1 is partially proven to be inductive.\nloop invariant (k == 0) ==> (j == i) is established but not preserved.\nloop invariant (k == 1) ==> (j == i - 1) is established but not preserved.\nloop invariant !(N > 1) ==> (i == N && j == N && k == 0) is partially proven to be inductive.\nAssertion !(k > 0): Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n\tint N = unknown_uint();\n  int i, j, k;\n\n  i = 0;\n  j = 0;\n  k = 0;\n\n  assume( N > 1 );\n\n  /*@\nloop invariant i1: 0 <= i <= N;\n\nloop invariant i3: 0 <= k <= 1;\n\n\nloop invariant i6: !(N > 1) ==> (i == N && j == N && k == 0);\n*/\nwhile (i < N) {\n    if (i<1)\n      k = 1;\n    else\n      k = 0;\n    j++;\n    i++;\n  }\n\n  {;\n//@ assert(!( k>0 ));\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= N;\nloop invariant 0 <= j <= N;\nloop invariant 0 <= k <= 1;\nloop invariant (i < N) ==> (k == 0);\nloop invariant (i >= N) ==> (k == 1);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= N is partially proven to be inductive.\nloop invariant 0 <= j <= N is established but not preserved.\nloop invariant 0 <= k <= 1 is partially proven to be inductive.\nloop invariant (i < N) ==> (k == 0) is established but not preserved.\nloop invariant (i >= N) ==> (k == 1) is established but not preserved.\nAssertion !(k > 0): Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n\tint N = unknown_uint();\n  int i, j, k;\n\n  i = 0;\n  j = 0;\n  k = 0;\n\n  assume( N > 1 );\n\n  /*@\nloop invariant i1: 0 <= i <= N;\n\nloop invariant i3: 0 <= k <= 1;\n\n\n*/\nwhile (i < N) {\n    if (i<1)\n      k = 1;\n    else\n      k = 0;\n    j++;\n    i++;\n  }\n\n  {;\n//@ assert(!( k>0 ));\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 7,
                    "annotations": "```\n/*@\nloop invariant i > 0;\nloop invariant i < N;\nloop invariant i = j;\nloop invariant i = k;\nloop invariant j > 0;\nloop invariant j <= i;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant k == 0 || k == 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 26: Assignment operators not allowed in annotations.",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n\tint N = unknown_uint();\n  int i, j, k;\n\n  i = 0;\n  j = 0;\n  k = 0;\n\n  assume( N > 1 );\n\n  /*@\n\n\n\n\n\nloop invariant i6: j <= i;\nloop invariant i7: k >= 0;\nloop invariant i8: k <= 1;\nloop invariant i9: k == 0 || k == 1;\n*/\nwhile (i < N) {\n    if (i<1)\n      k = 1;\n    else\n      k = 0;\n    j++;\n    i++;\n  }\n\n  {;\n//@ assert(!( k>0 ));\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                }
            ],
            "checker_output_for_combined_annotations": false,
            "checker_message_for_combined_annotations": "Annotation error on line 60: unexpected token 'is'",
            "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n\tint N = unknown_uint();\n  int i, j, k;\n\n  i = 0;\n  j = 0;\n  k = 0;\n\n  assume( N > 1 );\n\n  /*@\nloop invariant i1: 0 <= i <= N;\nloop invariant i2: 0 <= j <= N;\nloop invariant i3: 0 <= k <= 1;\nloop invariant i4: !(i < N) ==> (k == 0);\nloop invariant i5: i + j == N;\nloop invariant i6: i == k;\nloop invariant i7: j == i;\nloop invariant i8: k == (i == 1 ? 1 : 0);\nloop invariant i9: 1 <= i <= N;\nloop invariant i10: 0 <= j <= i;\nloop invariant i11: j == (i * (i - 1)) / 2;\nloop invariant i12: i == N;\nloop invariant i13: k == (i < 1);\nloop invariant i14: !(k > 0) ==> (i < 1);\nloop invariant i15: (i >= 1) ==> !(k > 0);\nloop invariant i16: i == j;\nloop invariant i17: k == 0;\nloop invariant i18: i >= 0;\nloop invariant i19: i <= N;\nloop invariant i20: j >= 0;\nloop invariant i21: j <= N;\nloop invariant i22: k >= 0;\nloop invariant i23: k <= 1;\nloop invariant i24: (k>0) ==> (i>0);\nloop invariant i25: (k==0) ==> (i==0);\nloop invariant i26: j>=i;\nloop invariant i27: k == (i > 0 ? 0 : 1);\nloop invariant i28: i < N ==> k == 0;\nloop invariant i29: i < N ==> j == i;\nloop invariant i30: i < N ==> k == 0 ==> j == i;\nloop invariant i31: i < N ==> k > 0 ==> j == i+1;\nloop invariant i32: i == N ==> k == 0;\nloop invariant i33: i == N ==> j == N;\nloop invariant i34: i == N ==> k == 0 ==> j == N;\nloop invariant i35: i == N ==> k > 0 ==> j == N+1;\nloop invariant i36: i <= N ==> k == 0;\nloop invariant i37: i is in the range [0, N-1];\nloop invariant i38: j is in the range [1, N];\nloop invariant i39: k is either 0 or 1;\nloop invariant i40: k is 1 if i < 1, otherwise k is 0;\nloop invariant i41: j is always increasing by 1 for each iteration of the loop;\nloop invariant i42: i is always increasing by 1 for each iteration of the loop;\nloop invariant i43: i + j = N;\nloop invariant i44: i + k = 1;\nloop invariant i45: j + k = N;\nloop invariant i46: i >= k;\nloop invariant i47: j >= k;\nloop invariant i48: i == 1 ==> k == 1;\nloop invariant i49: i < 1 ==> k == 0;\nloop invariant i50: j == i + 1;\nloop invariant i51: k == 1;\nloop invariant i52: j == N;\nloop invariant i53: i == 1;\nloop invariant i54: j == 1;\nloop invariant i55: i == 0;\nloop invariant i56: j == 0;\nloop invariant i57: (k == 0) ==> (j == i);\nloop invariant i58: (k == 1) ==> (j == i - 1);\nloop invariant i59: !(N > 1) ==> (i == N && j == N && k == 0);\nloop invariant i60: (i < N) ==> (k == 0);\nloop invariant i61: (i >= N) ==> (k == 1);\nloop invariant i62: i > 0;\nloop invariant i63: i < N;\nloop invariant i64: i = j;\nloop invariant i65: i = k;\nloop invariant i66: j > 0;\nloop invariant i67: j <= i;\nloop invariant i68: k == 0 || k == 1;\n*/\nwhile (i < N) {\n    if (i<1)\n      k = 1;\n    else\n      k = 0;\n    j++;\n    i++;\n  }\n\n  {;\n//@ assert(!( k>0 ));\n}\n\n  return 0;\n}",
            "combined_annotation_num_solver_calls": 39,
            "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n\tint N = unknown_uint();\n  int i, j, k;\n\n  i = 0;\n  j = 0;\n  k = 0;\n\n  assume( N > 1 );\n\n  /*@\nloop invariant i1: 0 <= i <= N;\nloop invariant i2: 0 <= j <= N;\nloop invariant i3: 0 <= k <= 1;\nloop invariant i4: !(i < N) ==> (k == 0);\n\n\nloop invariant i7: j == i;\nloop invariant i8: k == (i == 1 ? 1 : 0);\n\nloop invariant i10: 0 <= j <= i;\n\n\n\n\n\nloop invariant i16: i == j;\n\nloop invariant i18: i >= 0;\nloop invariant i19: i <= N;\nloop invariant i20: j >= 0;\nloop invariant i21: j <= N;\nloop invariant i22: k >= 0;\nloop invariant i23: k <= 1;\nloop invariant i24: (k>0) ==> (i>0);\n\nloop invariant i26: j>=i;\n\n\nloop invariant i29: i < N ==> j == i;\nloop invariant i30: i < N ==> k == 0 ==> j == i;\n\nloop invariant i32: i == N ==> k == 0;\nloop invariant i33: i == N ==> j == N;\nloop invariant i34: i == N ==> k == 0 ==> j == N;\nloop invariant i35: i == N ==> k > 0 ==> j == N+1;\n\n\n\n\n\n\n\n\n\n\nloop invariant i46: i >= k;\nloop invariant i47: j >= k;\nloop invariant i48: i == 1 ==> k == 1;\nloop invariant i49: i < 1 ==> k == 0;\n\n\n\n\n\n\n\nloop invariant i57: (k == 0) ==> (j == i);\n\nloop invariant i59: !(N > 1) ==> (i == N && j == N && k == 0);\n\n\n\n\n\n\n\nloop invariant i67: j <= i;\nloop invariant i68: k == 0 || k == 1;\n*/\nwhile (i < N) {\n    if (i<1)\n      k = 1;\n    else\n      k = 0;\n    j++;\n    i++;\n  }\n\n  {;\n//@ assert(!( k>0 ));\n}\n\n  return 0;\n}",
            "checker_output_after_prune": true
        },
        {
            "file": "../dataset/loop_invariants/code2inv/123.c",
            "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  while ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == size) );\n}\n\n}",
            "success": false,
            "annotation_blocks": [
                "```\n/*@\nloop invariant 0 <= i <= size;\nloop invariant 0 <= sn <= size;\nloop invariant sn <= i;\n*/\n```",
                "```\n/*@\nloop invariant 1 <= i <= 2;\nloop invariant 0 <= sn <= 2;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= size;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn == i - 1;\nloop invariant 0 <= i <= size;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn == i - 1;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= size;\nloop invariant sn == i - 1;\nloop invariant sn == size - i;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= size;\nloop invariant 0 <= sn <= size;\nloop invariant sn == i - 1;\nloop invariant size >= 0;\nloop invariant i <= size + 1;\nloop invariant sn <= size;\n*/\n```",
                "```\n/*@\nloop invariant 1 <= i <= size + 1;\nloop invariant 1 <= sn <= size;\nloop invariant sn <= i;\nloop invariant i <= size + sn;\nloop invariant sn < size ==> sn == size;\nloop invariant i <= size + 1 ==> sn == size;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= size;\nloop invariant 0 <= sn <= size;\nloop invariant sn <= size;\nloop invariant (sn == size) ==> (i > size);\n*/\n```",
                "```\n/*@\nloop invariant 1 <= i <= size;\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant sn <= i;\nloop invariant sn == (i - 1);\nloop invariant sn == size;\nloop invariant sn == (i - 1) ==> sn == size;\nloop invariant sn == (i - 1) ==> sn == size ==> sn == size;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= size;\nloop invariant sn >= 1;\nloop invariant sn <= size;\nloop invariant sn == (i - 1);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= size;\nloop invariant 0 <= sn <= size;\nloop invariant sn <= i;\nloop invariant sn <= size;\nloop invariant sn + i == size;\nloop invariant sn + i == size ==> sn == size;\nloop invariant sn + i == size ==> i == size;\nloop invariant sn + i == size ==> sn == size ==> i == size;\nloop invariant sn + i == size ==> sn == size ==> i == size ==> sn == size;\nloop invariant sn + i == size ==> sn == size ==> i == size ==> sn == size ==> sn == size;\nloop invariant sn + i == size ==> sn == size ==> i == size ==> sn == size ==> sn == size ==> sn == size;\nloop invariant sn + i == size ==> sn == size ==> i == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size;\nloop invariant sn + i == size ==> sn == size ==> i == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size;\nloop invariant sn + i == size ==> sn == size ==> i == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size;\nloop invariant sn + i == size ==> sn == size ==> i == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size;\nloop invariant sn + i == size ==> sn == size ==> i == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size;\nloop invariant sn + i == size ==> sn == size ==> i == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size;\nloop invariant sn + i == size ==> sn == size ==> i == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size;\nloop invariant sn + i == size ==> sn == size ==> i == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size;\nloop invariant sn + i == size ==> sn == size ==> i == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size;\nloop invariant sn + i == size ==> sn == size ==> i == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size;\nloop invariant sn + i == size ==> sn == size ==> i == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size;\nloop invariant sn + i == size ==> sn == size ==> i == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size;\nloop invariant sn + i == size ==> sn == size ==> i == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size;\nloop invariant sn + i == size ==> sn == size ==> i == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size;\n*/\n```",
                "```\n/*@\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= size;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= sn <= size;\nloop invariant i >= 1;\nloop invariant i <= size + 1;\nloop invariant sn >= 1;\nloop invariant sn <= size;\nloop invariant sn == (i - 1);\nloop invariant i == (sn + 1);\nloop invariant sn == size ==> i == size + 1;\n*/\n```",
                "```\n/*@\nloop invariant 1 <= i <= size;\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant sn <= i;\n*/\n```",
                "```\n/*@\nloop invariant 1 <= i <= size + 1;\nloop invariant sn == i - 1;\nloop invariant i <= size + 1 ==> sn <= size;\nloop invariant i <= size + 1 ==> sn >= 0;\n*/\n```",
                "```\n/*@\nloop invariant 1 <= i <= size;\nloop invariant 0 <= sn <= size;\nloop invariant sn == i - 1;\nloop invariant sn <= size;\n*/\n```"
            ],
            "completions": [
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= size;\nloop invariant 0 <= sn <= size;\nloop invariant sn <= i;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= size is neither established nor preserved.\nloop invariant 0 <= sn <= size is partially proven to be inductive.\nloop invariant sn <= i is partially proven to be inductive.\nAssertion sn == size: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: sn <= i;\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == size) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 1 <= i <= 2;\nloop invariant 0 <= sn <= 2;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= i <= 2 is established but not preserved.\nloop invariant 0 <= sn <= 2 is established but not preserved.\nAssertion sn == size: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == size) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= size;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn == i - 1;\nloop invariant 0 <= i <= size;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn == i - 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= size is neither established nor preserved.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn <= i - 1 is partially proven to be inductive.\nloop invariant sn == i - 1 is partially proven to be inductive.\nAssertion sn == size: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\nloop invariant i2: sn >= 0;\nloop invariant i3: sn <= i - 1;\nloop invariant i4: sn == i - 1;\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == size) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= size;\nloop invariant sn == i - 1;\nloop invariant sn == size - i;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= size is neither established nor preserved.\nloop invariant sn == i - 1 is partially proven to be inductive.\nloop invariant sn == size - i is neither established nor preserved.\nAssertion sn == size: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\nloop invariant i2: sn == i - 1;\n\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == size) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 7,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= size;\nloop invariant 0 <= sn <= size;\nloop invariant sn == i - 1;\nloop invariant size >= 0;\nloop invariant i <= size + 1;\nloop invariant sn <= size;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= size is neither established nor preserved.\nloop invariant 0 <= sn <= size is partially proven to be inductive.\nloop invariant sn == i - 1 is partially proven to be inductive.\nloop invariant size >= 0 is partially proven to be inductive.\nloop invariant i <= size + 1 is partially proven to be inductive.\nloop invariant sn <= size is partially proven to be inductive.\nAssertion sn == size: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: sn == i - 1;\n\n\n\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == size) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 1 <= i <= size + 1;\nloop invariant 1 <= sn <= size;\nloop invariant sn <= i;\nloop invariant i <= size + sn;\nloop invariant sn < size ==> sn == size;\nloop invariant i <= size + 1 ==> sn == size;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= i <= size + 1 is preserved but not established.\nloop invariant 1 <= sn <= size is preserved but not established.\nloop invariant sn <= i is partially proven to be inductive.\nloop invariant i <= size + sn is partially proven to be inductive.\nloop invariant sn < size ==> sn == size is partially proven to be inductive.\nloop invariant i <= size + 1 ==> sn == size is partially proven to be inductive.\nAssertion sn == size: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: sn <= i;\n\n\n\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == size) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= size;\nloop invariant 0 <= sn <= size;\nloop invariant sn <= size;\nloop invariant (sn == size) ==> (i > size);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= size is neither established nor preserved.\nloop invariant 0 <= sn <= size is partially proven to be inductive.\nloop invariant sn <= size is partially proven to be inductive.\nloop invariant (sn == size) ==> (i > size) is established but not preserved.\nAssertion sn == size: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\n\n\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == size) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 1 <= i <= size;\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant sn <= i;\nloop invariant sn == (i - 1);\nloop invariant sn == size;\nloop invariant sn == (i - 1) ==> sn == size;\nloop invariant sn == (i - 1) ==> sn == size ==> sn == size;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= i <= size is preserved but not established.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn <= size is partially proven to be inductive.\nloop invariant sn <= i is partially proven to be inductive.\nloop invariant sn == (i - 1) is partially proven to be inductive.\nloop invariant sn == size is preserved but not established.\nloop invariant sn == (i - 1) ==> sn == size is partially proven to be inductive.\nloop invariant sn == (i - 1) ==> sn == size ==> sn == size is partially proven to be inductive.\nAssertion sn == size: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\nloop invariant i2: sn >= 0;\n\nloop invariant i4: sn <= i;\nloop invariant i5: sn == (i - 1);\n\n\nloop invariant i8: sn == (i - 1) ==> sn == size ==> sn == size;\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == size) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= size;\nloop invariant sn >= 1;\nloop invariant sn <= size;\nloop invariant sn == (i - 1);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= size is preserved but not established.\nloop invariant sn >= 1 is preserved but not established.\nloop invariant sn <= size is partially proven to be inductive.\nloop invariant sn == (i - 1) is partially proven to be inductive.\nAssertion sn == size: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\n\nloop invariant i4: sn == (i - 1);\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == size) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= size;\nloop invariant 0 <= sn <= size;\nloop invariant sn <= i;\nloop invariant sn <= size;\nloop invariant sn + i == size;\nloop invariant sn + i == size ==> sn == size;\nloop invariant sn + i == size ==> i == size;\nloop invariant sn + i == size ==> sn == size ==> i == size;\nloop invariant sn + i == size ==> sn == size ==> i == size ==> sn == size;\nloop invariant sn + i == size ==> sn == size ==> i == size ==> sn == size ==> sn == size;\nloop invariant sn + i == size ==> sn == size ==> i == size ==> sn == size ==> sn == size ==> sn == size;\nloop invariant sn + i == size ==> sn == size ==> i == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size;\nloop invariant sn + i == size ==> sn == size ==> i == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size;\nloop invariant sn + i == size ==> sn == size ==> i == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size;\nloop invariant sn + i == size ==> sn == size ==> i == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size;\nloop invariant sn + i == size ==> sn == size ==> i == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size;\nloop invariant sn + i == size ==> sn == size ==> i == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size;\nloop invariant sn + i == size ==> sn == size ==> i == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size;\nloop invariant sn + i == size ==> sn == size ==> i == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size;\nloop invariant sn + i == size ==> sn == size ==> i == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size;\nloop invariant sn + i == size ==> sn == size ==> i == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size;\nloop invariant sn + i == size ==> sn == size ==> i == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size;\nloop invariant sn + i == size ==> sn == size ==> i == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size;\nloop invariant sn + i == size ==> sn == size ==> i == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size;\nloop invariant sn + i == size ==> sn == size ==> i == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= size is preserved but not established.\nloop invariant 0 <= sn <= size is partially proven to be inductive.\nloop invariant sn <= i is partially proven to be inductive.\nloop invariant sn <= size is partially proven to be inductive.\nloop invariant sn + i == size is preserved but not established.\nloop invariant sn + i == size ==> sn == size is preserved but not established.\nloop invariant sn + i == size ==> i == size is partially proven to be inductive.\nloop invariant sn + i == size ==> sn == size ==> i == size is partially proven to be inductive.\nloop invariant sn + i == size ==> sn == size ==> i == size ==> sn == size is partially proven to be inductive.\nloop invariant sn + i == size ==> sn == size ==> i == size ==> sn == size ==> sn == size is partially proven to be inductive.\nloop invariant sn + i == size ==> sn == size ==> i == size ==> sn == size ==> sn == size ==> sn == size is partially proven to be inductive.\nloop invariant sn + i == size ==> sn == size ==> i == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size is partially proven to be inductive.\nloop invariant sn + i == size ==> sn == size ==> i == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size is partially proven to be inductive.\nloop invariant sn + i == size ==> sn == size ==> i == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size is partially proven to be inductive.\nloop invariant sn + i == size ==> sn == size ==> i == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size is partially proven to be inductive.\nloop invariant sn + i == size ==> sn == size ==> i == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size is partially proven to be inductive.\nloop invariant sn + i == size ==> sn == size ==> i == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size is partially proven to be inductive.\nloop invariant sn + i == size ==> sn == size ==> i == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size is partially proven to be inductive.\nloop invariant sn + i == size ==> sn == size ==> i == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size is partially proven to be inductive.\nloop invariant sn + i == size ==> sn == size ==> i == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size is partially proven to be inductive.\nloop invariant sn + i == size ==> sn == size ==> i == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size is partially proven to be inductive.\nloop invariant sn + i == size ==> sn == size ==> i == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size is partially proven to be inductive.\nloop invariant sn + i == size ==> sn == size ==> i == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size is partially proven to be inductive.\nloop invariant sn + i == size ==> sn == size ==> i == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size is partially proven to be inductive.\nloop invariant sn + i == size ==> sn == size ==> i == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size is partially proven to be inductive.\nAssertion sn == size: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: sn <= i;\n\n\n\n\n\nloop invariant i9: sn + i == size ==> sn == size ==> i == size ==> sn == size;\nloop invariant i10: sn + i == size ==> sn == size ==> i == size ==> sn == size ==> sn == size;\nloop invariant i11: sn + i == size ==> sn == size ==> i == size ==> sn == size ==> sn == size ==> sn == size;\nloop invariant i12: sn + i == size ==> sn == size ==> i == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size;\nloop invariant i13: sn + i == size ==> sn == size ==> i == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size;\nloop invariant i14: sn + i == size ==> sn == size ==> i == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size;\nloop invariant i15: sn + i == size ==> sn == size ==> i == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size;\nloop invariant i16: sn + i == size ==> sn == size ==> i == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size;\nloop invariant i17: sn + i == size ==> sn == size ==> i == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size;\nloop invariant i18: sn + i == size ==> sn == size ==> i == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size;\nloop invariant i19: sn + i == size ==> sn == size ==> i == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size;\nloop invariant i20: sn + i == size ==> sn == size ==> i == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size;\nloop invariant i21: sn + i == size ==> sn == size ==> i == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size;\nloop invariant i22: sn + i == size ==> sn == size ==> i == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size;\nloop invariant i23: sn + i == size ==> sn == size ==> i == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size;\nloop invariant i24: sn + i == size ==> sn == size ==> i == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size;\nloop invariant i25: sn + i == size ==> sn == size ==> i == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size;\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == size) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= size;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant i >= 1 is partially proven to be inductive.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn <= i - 1 is partially proven to be inductive.\nloop invariant sn <= size is preserved but not established.\nAssertion sn == size: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\nloop invariant i1: i >= 1;\nloop invariant i2: sn >= 0;\nloop invariant i3: sn <= i - 1;\n\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == size) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= sn <= size;\nloop invariant i >= 1;\nloop invariant i <= size + 1;\nloop invariant sn >= 1;\nloop invariant sn <= size;\nloop invariant sn == (i - 1);\nloop invariant i == (sn + 1);\nloop invariant sn == size ==> i == size + 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= sn <= size is preserved but not established.\nloop invariant i >= 1 is partially proven to be inductive.\nloop invariant i <= size + 1 is partially proven to be inductive.\nloop invariant sn >= 1 is preserved but not established.\nloop invariant sn <= size is partially proven to be inductive.\nloop invariant sn == (i - 1) is partially proven to be inductive.\nloop invariant i == (sn + 1) is partially proven to be inductive.\nloop invariant sn == size ==> i == size + 1 is partially proven to be inductive.\nAssertion sn == size: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\nloop invariant i2: i >= 1;\n\n\n\nloop invariant i6: sn == (i - 1);\nloop invariant i7: i == (sn + 1);\nloop invariant i8: sn == size ==> i == size + 1;\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == size) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 1 <= i <= size;\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant sn <= i;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= i <= size is neither established nor preserved.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn <= size is partially proven to be inductive.\nloop invariant sn <= i is partially proven to be inductive.\nAssertion sn == size: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\nloop invariant i2: sn >= 0;\n\nloop invariant i4: sn <= i;\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == size) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 1 <= i <= size + 1;\nloop invariant sn == i - 1;\nloop invariant i <= size + 1 ==> sn <= size;\nloop invariant i <= size + 1 ==> sn >= 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= i <= size + 1 is preserved but not established.\nloop invariant sn == i - 1 is partially proven to be inductive.\nloop invariant i <= size + 1 ==> sn <= size is partially proven to be inductive.\nloop invariant i <= size + 1 ==> sn >= 0 is partially proven to be inductive.\nAssertion sn == size: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\nloop invariant i2: sn == i - 1;\nloop invariant i3: i <= size + 1 ==> sn <= size;\nloop invariant i4: i <= size + 1 ==> sn >= 0;\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == size) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 1 <= i <= size;\nloop invariant 0 <= sn <= size;\nloop invariant sn == i - 1;\nloop invariant sn <= size;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= i <= size is neither established nor preserved.\nloop invariant 0 <= sn <= size is partially proven to be inductive.\nloop invariant sn == i - 1 is partially proven to be inductive.\nloop invariant sn <= size is partially proven to be inductive.\nAssertion sn == size: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: sn == i - 1;\n\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == size) );\n}\n\n}",
                    "checker_output_after_prune": false
                }
            ],
            "checker_output_for_combined_annotations": false,
            "checker_message_for_combined_annotations": "loop invariant 0 <= i <= size is preserved but not established.\nloop invariant 0 <= sn <= size is partially proven to be inductive.\nloop invariant sn <= i is partially proven to be inductive.\nloop invariant 1 <= i <= 2 is partially proven to be inductive.\nloop invariant 0 <= sn <= 2 is partially proven to be inductive.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn <= i - 1 is partially proven to be inductive.\nloop invariant sn == i - 1 is partially proven to be inductive.\nloop invariant sn == size - i is preserved but not established.\nloop invariant size >= 0 is partially proven to be inductive.\nloop invariant i <= size + 1 is partially proven to be inductive.\nloop invariant sn <= size is partially proven to be inductive.\nloop invariant 1 <= i <= size + 1 is partially proven to be inductive.\nloop invariant 1 <= sn <= size is preserved but not established.\nloop invariant i <= size + sn is partially proven to be inductive.\nloop invariant sn < size ==> sn == size is partially proven to be inductive.\nloop invariant i <= size + 1 ==> sn == size is partially proven to be inductive.\nloop invariant (sn == size) ==> (i > size) is partially proven to be inductive.\nloop invariant 1 <= i <= size is partially proven to be inductive.\nloop invariant sn == (i - 1) is partially proven to be inductive.\nloop invariant sn == size is partially proven to be inductive.\nloop invariant sn == (i - 1) ==> sn == size is partially proven to be inductive.\nloop invariant sn == (i - 1) ==> sn == size ==> sn == size is partially proven to be inductive.\nloop invariant sn >= 1 is partially proven to be inductive.\nloop invariant sn + i == size is partially proven to be inductive.\nloop invariant sn + i == size ==> sn == size is partially proven to be inductive.\nloop invariant sn + i == size ==> i == size is partially proven to be inductive.\nloop invariant sn + i == size ==> sn == size ==> i == size is partially proven to be inductive.\nloop invariant sn + i == size ==> sn == size ==> i == size ==> sn == size is partially proven to be inductive.\nloop invariant sn + i == size ==> sn == size ==> i == size ==> sn == size ==> sn == size is partially proven to be inductive.\nloop invariant sn + i == size ==> sn == size ==> i == size ==> sn == size ==> sn == size ==> sn == size is partially proven to be inductive.\nloop invariant sn + i == size ==> sn == size ==> i == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size is partially proven to be inductive.\nloop invariant sn + i == size ==> sn == size ==> i == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size is partially proven to be inductive.\nloop invariant sn + i == size ==> sn == size ==> i == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size is partially proven to be inductive.\nloop invariant sn + i == size ==> sn == size ==> i == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size is partially proven to be inductive.\nloop invariant sn + i == size ==> sn == size ==> i == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size is partially proven to be inductive.\nloop invariant sn + i == size ==> sn == size ==> i == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size is partially proven to be inductive.\nloop invariant sn + i == size ==> sn == size ==> i == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size is partially proven to be inductive.\nloop invariant sn + i == size ==> sn == size ==> i == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size is partially proven to be inductive.\nloop invariant sn + i == size ==> sn == size ==> i == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size is partially proven to be inductive.\nloop invariant sn + i == size ==> sn == size ==> i == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size is partially proven to be inductive.\nloop invariant sn + i == size ==> sn == size ==> i == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size is partially proven to be inductive.\nloop invariant sn + i == size ==> sn == size ==> i == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size is partially proven to be inductive.\nloop invariant sn + i == size ==> sn == size ==> i == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size is partially proven to be inductive.\nloop invariant sn + i == size ==> sn == size ==> i == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size is partially proven to be inductive.\nloop invariant i >= 1 is partially proven to be inductive.\nloop invariant i == (sn + 1) is partially proven to be inductive.\nloop invariant sn == size ==> i == size + 1 is partially proven to be inductive.\nloop invariant i <= size + 1 ==> sn <= size is partially proven to be inductive.\nloop invariant i <= size + 1 ==> sn >= 0 is partially proven to be inductive.\nAssertion sn == size: Partially proven",
            "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\nloop invariant i1: 0 <= i <= size;\nloop invariant i2: 0 <= sn <= size;\nloop invariant i3: sn <= i;\nloop invariant i4: 1 <= i <= 2;\nloop invariant i5: 0 <= sn <= 2;\nloop invariant i6: sn >= 0;\nloop invariant i7: sn <= i - 1;\nloop invariant i8: sn == i - 1;\nloop invariant i9: sn == size - i;\nloop invariant i10: size >= 0;\nloop invariant i11: i <= size + 1;\nloop invariant i12: sn <= size;\nloop invariant i13: 1 <= i <= size + 1;\nloop invariant i14: 1 <= sn <= size;\nloop invariant i15: i <= size + sn;\nloop invariant i16: sn < size ==> sn == size;\nloop invariant i17: i <= size + 1 ==> sn == size;\nloop invariant i18: (sn == size) ==> (i > size);\nloop invariant i19: 1 <= i <= size;\nloop invariant i20: sn == (i - 1);\nloop invariant i21: sn == size;\nloop invariant i22: sn == (i - 1) ==> sn == size;\nloop invariant i23: sn == (i - 1) ==> sn == size ==> sn == size;\nloop invariant i24: sn >= 1;\nloop invariant i25: sn + i == size;\nloop invariant i26: sn + i == size ==> sn == size;\nloop invariant i27: sn + i == size ==> i == size;\nloop invariant i28: sn + i == size ==> sn == size ==> i == size;\nloop invariant i29: sn + i == size ==> sn == size ==> i == size ==> sn == size;\nloop invariant i30: sn + i == size ==> sn == size ==> i == size ==> sn == size ==> sn == size;\nloop invariant i31: sn + i == size ==> sn == size ==> i == size ==> sn == size ==> sn == size ==> sn == size;\nloop invariant i32: sn + i == size ==> sn == size ==> i == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size;\nloop invariant i33: sn + i == size ==> sn == size ==> i == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size;\nloop invariant i34: sn + i == size ==> sn == size ==> i == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size;\nloop invariant i35: sn + i == size ==> sn == size ==> i == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size;\nloop invariant i36: sn + i == size ==> sn == size ==> i == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size;\nloop invariant i37: sn + i == size ==> sn == size ==> i == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size;\nloop invariant i38: sn + i == size ==> sn == size ==> i == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size;\nloop invariant i39: sn + i == size ==> sn == size ==> i == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size;\nloop invariant i40: sn + i == size ==> sn == size ==> i == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size;\nloop invariant i41: sn + i == size ==> sn == size ==> i == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size;\nloop invariant i42: sn + i == size ==> sn == size ==> i == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size;\nloop invariant i43: sn + i == size ==> sn == size ==> i == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size;\nloop invariant i44: sn + i == size ==> sn == size ==> i == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size;\nloop invariant i45: sn + i == size ==> sn == size ==> i == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size;\nloop invariant i46: i >= 1;\nloop invariant i47: i == (sn + 1);\nloop invariant i48: sn == size ==> i == size + 1;\nloop invariant i49: i <= size + 1 ==> sn <= size;\nloop invariant i50: i <= size + 1 ==> sn >= 0;\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == size) );\n}\n\n}",
            "combined_annotation_num_solver_calls": 9,
            "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: sn <= i;\n\n\nloop invariant i6: sn >= 0;\nloop invariant i7: sn <= i - 1;\nloop invariant i8: sn == i - 1;\n\n\n\n\n\n\n\n\n\nloop invariant i18: (sn == size) ==> (i > size);\n\nloop invariant i20: sn == (i - 1);\n\n\nloop invariant i23: sn == (i - 1) ==> sn == size ==> sn == size;\n\n\n\n\nloop invariant i28: sn + i == size ==> sn == size ==> i == size;\nloop invariant i29: sn + i == size ==> sn == size ==> i == size ==> sn == size;\nloop invariant i30: sn + i == size ==> sn == size ==> i == size ==> sn == size ==> sn == size;\nloop invariant i31: sn + i == size ==> sn == size ==> i == size ==> sn == size ==> sn == size ==> sn == size;\nloop invariant i32: sn + i == size ==> sn == size ==> i == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size;\nloop invariant i33: sn + i == size ==> sn == size ==> i == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size;\nloop invariant i34: sn + i == size ==> sn == size ==> i == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size;\nloop invariant i35: sn + i == size ==> sn == size ==> i == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size;\nloop invariant i36: sn + i == size ==> sn == size ==> i == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size;\nloop invariant i37: sn + i == size ==> sn == size ==> i == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size;\nloop invariant i38: sn + i == size ==> sn == size ==> i == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size;\nloop invariant i39: sn + i == size ==> sn == size ==> i == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size;\nloop invariant i40: sn + i == size ==> sn == size ==> i == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size;\nloop invariant i41: sn + i == size ==> sn == size ==> i == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size;\nloop invariant i42: sn + i == size ==> sn == size ==> i == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size;\nloop invariant i43: sn + i == size ==> sn == size ==> i == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size;\nloop invariant i44: sn + i == size ==> sn == size ==> i == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size;\nloop invariant i45: sn + i == size ==> sn == size ==> i == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size ==> sn == size;\nloop invariant i46: i >= 1;\nloop invariant i47: i == (sn + 1);\nloop invariant i48: sn == size ==> i == size + 1;\nloop invariant i49: i <= size + 1 ==> sn <= size;\nloop invariant i50: i <= size + 1 ==> sn >= 0;\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == size) );\n}\n\n}",
            "checker_output_after_prune": false
        },
        {
            "file": "../dataset/loop_invariants/code2inv/105.c",
            "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = 0);\n  \n  while ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (n >= 0) )\n{;\n//@ assert( (x == n) );\n}\n\n}",
            "success": true,
            "annotation_blocks": [
                "```\n/*@\nloop invariant x == (n - (n - x));\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x == n;\n*/\n```",
                "```\n/*@\nloop invariant n >= 0;\nloop invariant x == 0 ==> n >= x;\nloop invariant x == n ==> n >= x;\nloop invariant n >= x ==> x < n;\nloop invariant n >= x ==> x >= 0;\nloop invariant n >= x ==> x >= -1;\nloop invariant n >= x ==> x >= -2;\nloop invariant n >= x ==> x >= -3;\nloop invariant n >= x ==> x >= -4;\nloop invariant n >= x ==> x >= -5;\nloop invariant n >= x ==> x >= -6;\nloop invariant n >= x ==> x >= -7;\nloop invariant n >= x ==> x >= -8;\nloop invariant n >= x ==> x >= -9;\nloop invariant n >= x ==> x >= -10;\nloop invariant n >= x ==> x >= -11;\nloop invariant n >= x ==> x >= -12;\nloop invariant n >= x ==> x >= -13;\nloop invariant n >= x ==> x >= -14;\nloop invariant n >= x ==> x >= -15;\nloop invariant n >= x ==> x >= -16;\nloop invariant n >= x ==> x >= -17;\nloop invariant n >= x ==> x >= -18;\nloop invariant n >= x ==> x >= -19;\nloop invariant n >= x ==> x >= -20;\nloop invariant n >= x ==> x >= -21;\nloop invariant n >= x ==> x >= -22;\nloop invariant n >= x ==> x >= -23;\nloop invariant n >= x ==> x >= -24;\nloop invariant n >= x ==> x >= -25;\nloop invariant n >= x ==> x >= -26;\nloop invariant n >= x ==> x >= -27;\nloop invariant n >= x ==> x >= -28;\nloop invariant n >= x ==> x >= -29;\nloop invariant n >= x ==> x >= -30;\nloop invariant n >= x ==> x >= -31;\nloop invariant n >= x ==> x >= -32;\nloop invariant n >= x ==> x >= -33;\nloop invariant n >= x ==> x >= -34;\nloop invariant n >= x ==> x >= -35;\nloop invariant n >= x ==> x >= -36;\nloop invariant n >= x ==> x >= -37;\nloop invariant n >= x ==> x >= -38;\nloop invariant n >= x ==> x >= -39;\nloop invariant n >= x ==> x >= -40;\nloop invariant n >= x ==> x >= -41;\nloop invariant n >= x ==> x >= -42;\nloop invariant n >= x ==> x >= -43;\nloop invariant n >= x ==> x >= -44;\nloop invariant n >= x ==> x >= -45;\nloop invariant n >= x ==> x >= -46;\nloop invariant n >= x ==> x >= -47;\nloop invariant n >= x ==> x >= -48;\nloop invariant n >= x ==> x >= -49;\nloop invariant n >= x ==> x >= -50;\nloop invariant n >= x ==> x >= -51;\nloop invariant n >= x ==> x >= -52;\nloop invariant n >= x ==> x >= -53;\nloop invariant n >= x ==> x >= -54;\nloop invariant n >= x ==> x >= -55;\nloop invariant n >= x ==> x >= -56;\nloop invariant n >= x ==> x >= -57;\nloop invariant n >= x ==> x >= -58;\nloop invariant n >= x ==> x >= -59;\nloop invariant n >= x ==> x >= -60;\nloop invariant n >= x ==> x >= -61;\nloop invariant n >= x ==> x >= -62;\nloop invariant n >= x ==> x >= -63;\nloop invariant n >= x ==> x >= -64;\nloop invariant n >= x ==> x >= -65;\nloop invariant n >= x ==> x >= -66;\nloop invariant n >= x ==> x >= -67;\nloop invariant n >= x ==> x >= -68;\nloop invariant n >= x ==> x >= -69;\nloop invariant n >= x ==> x >= -70;\nloop invariant n >= x ==> x >= -71;\nloop invariant n >= x ==> x >= -72;\nloop invariant n >= x ==> x >= -73;\nloop invariant n >= x ==> x >= -74;\nloop invariant n >= x ==> x >= -75;\nloop invariant n >= x ==> x >= -76;\nloop invariant n >= x ==> x >= -77;\nloop invariant n >= x ==> x >= -78;\nloop invariant n >= x ==> x >= -79;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x == 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x + 1 >= n ==> x >= n;\n*/\n```",
                "```\n/*@\nloop invariant 1 <= x <= n;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x;\nloop invariant x < n;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant n >= 0 ==> x == n;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x == n;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x == n ==> ((x >= 0) && (x <= n));\nloop invariant x == n ==> (n >= 0);\nloop invariant x < n ==> (n >= 0);\nloop invariant x == n ==> (x == n);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant n >= 0 ==> x == n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant n >= 0 ==> x == n;\nloop invariant n >= 0 ==> x <= n;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x == n;\nloop invariant (n >= 0) ==> (x == n);\nloop invariant (n >= 0) ==> (0 <= x <= n);\nloop invariant (n >= 0) ==> (x <= n);\nloop invariant (n >= 0) ==> (x >= 0);\nloop invariant (n >= 0) ==> (x == n ==> x >= 0);\nloop invariant (n >= 0) ==> (x == n ==> x <= n);\nloop invariant (n >= 0) ==> (x == n ==> x <= n) ==> (x >= 0);\nloop invariant (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n));\nloop invariant (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n);\nloop invariant (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x >= 0);\nloop invariant (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n);\nloop invariant (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n ==> x == n);\nloop invariant (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n ==> x == n ==> x >= 0);\nloop invariant (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n ==> x == n ==> x >= 0 ==> x <= n);\nloop invariant (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n);\nloop invariant (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0);\nloop invariant (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0 ==> x <= n);\nloop invariant (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n);\nloop invariant (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0);\nloop invariant (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0 ==> x <= n);\nloop invariant (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n);\nloop invariant (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0);\nloop invariant (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0 ==> x <= n);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= n <= (2^31 - 1);\nloop invariant x == n;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant n >= 0;\nloop invariant n >= x;\nloop invariant x == n;\nloop invariant true;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x == n;\n*/\n```"
            ],
            "completions": [
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant x == (n - (n - x));\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x == n;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant x == (n - (n - x)) is partially proven to be inductive.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant x <= n is preserved but not established.\nloop invariant x == n is preserved but not established.\nAssertion x == n: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = 0);\n  \n  /*@\nloop invariant i1: x == (n - (n - x));\nloop invariant i2: x >= 0;\n\n\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (n >= 0) )\n{;\n//@ assert( (x == n) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant n >= 0;\nloop invariant x == 0 ==> n >= x;\nloop invariant x == n ==> n >= x;\nloop invariant n >= x ==> x < n;\nloop invariant n >= x ==> x >= 0;\nloop invariant n >= x ==> x >= -1;\nloop invariant n >= x ==> x >= -2;\nloop invariant n >= x ==> x >= -3;\nloop invariant n >= x ==> x >= -4;\nloop invariant n >= x ==> x >= -5;\nloop invariant n >= x ==> x >= -6;\nloop invariant n >= x ==> x >= -7;\nloop invariant n >= x ==> x >= -8;\nloop invariant n >= x ==> x >= -9;\nloop invariant n >= x ==> x >= -10;\nloop invariant n >= x ==> x >= -11;\nloop invariant n >= x ==> x >= -12;\nloop invariant n >= x ==> x >= -13;\nloop invariant n >= x ==> x >= -14;\nloop invariant n >= x ==> x >= -15;\nloop invariant n >= x ==> x >= -16;\nloop invariant n >= x ==> x >= -17;\nloop invariant n >= x ==> x >= -18;\nloop invariant n >= x ==> x >= -19;\nloop invariant n >= x ==> x >= -20;\nloop invariant n >= x ==> x >= -21;\nloop invariant n >= x ==> x >= -22;\nloop invariant n >= x ==> x >= -23;\nloop invariant n >= x ==> x >= -24;\nloop invariant n >= x ==> x >= -25;\nloop invariant n >= x ==> x >= -26;\nloop invariant n >= x ==> x >= -27;\nloop invariant n >= x ==> x >= -28;\nloop invariant n >= x ==> x >= -29;\nloop invariant n >= x ==> x >= -30;\nloop invariant n >= x ==> x >= -31;\nloop invariant n >= x ==> x >= -32;\nloop invariant n >= x ==> x >= -33;\nloop invariant n >= x ==> x >= -34;\nloop invariant n >= x ==> x >= -35;\nloop invariant n >= x ==> x >= -36;\nloop invariant n >= x ==> x >= -37;\nloop invariant n >= x ==> x >= -38;\nloop invariant n >= x ==> x >= -39;\nloop invariant n >= x ==> x >= -40;\nloop invariant n >= x ==> x >= -41;\nloop invariant n >= x ==> x >= -42;\nloop invariant n >= x ==> x >= -43;\nloop invariant n >= x ==> x >= -44;\nloop invariant n >= x ==> x >= -45;\nloop invariant n >= x ==> x >= -46;\nloop invariant n >= x ==> x >= -47;\nloop invariant n >= x ==> x >= -48;\nloop invariant n >= x ==> x >= -49;\nloop invariant n >= x ==> x >= -50;\nloop invariant n >= x ==> x >= -51;\nloop invariant n >= x ==> x >= -52;\nloop invariant n >= x ==> x >= -53;\nloop invariant n >= x ==> x >= -54;\nloop invariant n >= x ==> x >= -55;\nloop invariant n >= x ==> x >= -56;\nloop invariant n >= x ==> x >= -57;\nloop invariant n >= x ==> x >= -58;\nloop invariant n >= x ==> x >= -59;\nloop invariant n >= x ==> x >= -60;\nloop invariant n >= x ==> x >= -61;\nloop invariant n >= x ==> x >= -62;\nloop invariant n >= x ==> x >= -63;\nloop invariant n >= x ==> x >= -64;\nloop invariant n >= x ==> x >= -65;\nloop invariant n >= x ==> x >= -66;\nloop invariant n >= x ==> x >= -67;\nloop invariant n >= x ==> x >= -68;\nloop invariant n >= x ==> x >= -69;\nloop invariant n >= x ==> x >= -70;\nloop invariant n >= x ==> x >= -71;\nloop invariant n >= x ==> x >= -72;\nloop invariant n >= x ==> x >= -73;\nloop invariant n >= x ==> x >= -74;\nloop invariant n >= x ==> x >= -75;\nloop invariant n >= x ==> x >= -76;\nloop invariant n >= x ==> x >= -77;\nloop invariant n >= x ==> x >= -78;\nloop invariant n >= x ==> x >= -79;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant n >= 0 is preserved but not established.\nloop invariant x == 0 ==> n >= x is partially proven to be inductive.\nloop invariant x == n ==> n >= x is partially proven to be inductive.\nloop invariant n >= x ==> x < n is neither established nor preserved.\nloop invariant n >= x ==> x >= 0 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -1 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -2 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -3 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -4 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -5 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -6 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -7 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -8 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -9 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -10 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -11 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -12 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -13 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -14 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -15 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -16 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -17 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -18 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -19 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -20 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -21 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -22 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -23 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -24 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -25 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -26 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -27 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -28 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -29 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -30 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -31 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -32 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -33 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -34 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -35 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -36 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -37 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -38 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -39 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -40 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -41 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -42 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -43 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -44 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -45 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -46 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -47 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -48 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -49 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -50 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -51 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -52 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -53 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -54 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -55 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -56 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -57 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -58 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -59 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -60 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -61 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -62 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -63 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -64 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -65 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -66 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -67 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -68 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -69 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -70 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -71 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -72 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -73 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -74 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -75 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -76 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -77 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -78 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -79 is partially proven to be inductive.\nAssertion x == n: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = 0);\n  \n  /*@\n\n\nloop invariant i3: x == n ==> n >= x;\n\nloop invariant i5: n >= x ==> x >= 0;\nloop invariant i6: n >= x ==> x >= -1;\nloop invariant i7: n >= x ==> x >= -2;\nloop invariant i8: n >= x ==> x >= -3;\nloop invariant i9: n >= x ==> x >= -4;\nloop invariant i10: n >= x ==> x >= -5;\nloop invariant i11: n >= x ==> x >= -6;\nloop invariant i12: n >= x ==> x >= -7;\nloop invariant i13: n >= x ==> x >= -8;\nloop invariant i14: n >= x ==> x >= -9;\nloop invariant i15: n >= x ==> x >= -10;\nloop invariant i16: n >= x ==> x >= -11;\nloop invariant i17: n >= x ==> x >= -12;\nloop invariant i18: n >= x ==> x >= -13;\nloop invariant i19: n >= x ==> x >= -14;\nloop invariant i20: n >= x ==> x >= -15;\nloop invariant i21: n >= x ==> x >= -16;\nloop invariant i22: n >= x ==> x >= -17;\nloop invariant i23: n >= x ==> x >= -18;\nloop invariant i24: n >= x ==> x >= -19;\nloop invariant i25: n >= x ==> x >= -20;\nloop invariant i26: n >= x ==> x >= -21;\nloop invariant i27: n >= x ==> x >= -22;\nloop invariant i28: n >= x ==> x >= -23;\nloop invariant i29: n >= x ==> x >= -24;\nloop invariant i30: n >= x ==> x >= -25;\nloop invariant i31: n >= x ==> x >= -26;\nloop invariant i32: n >= x ==> x >= -27;\nloop invariant i33: n >= x ==> x >= -28;\nloop invariant i34: n >= x ==> x >= -29;\nloop invariant i35: n >= x ==> x >= -30;\nloop invariant i36: n >= x ==> x >= -31;\nloop invariant i37: n >= x ==> x >= -32;\nloop invariant i38: n >= x ==> x >= -33;\nloop invariant i39: n >= x ==> x >= -34;\nloop invariant i40: n >= x ==> x >= -35;\nloop invariant i41: n >= x ==> x >= -36;\nloop invariant i42: n >= x ==> x >= -37;\nloop invariant i43: n >= x ==> x >= -38;\nloop invariant i44: n >= x ==> x >= -39;\nloop invariant i45: n >= x ==> x >= -40;\nloop invariant i46: n >= x ==> x >= -41;\nloop invariant i47: n >= x ==> x >= -42;\nloop invariant i48: n >= x ==> x >= -43;\nloop invariant i49: n >= x ==> x >= -44;\nloop invariant i50: n >= x ==> x >= -45;\nloop invariant i51: n >= x ==> x >= -46;\nloop invariant i52: n >= x ==> x >= -47;\nloop invariant i53: n >= x ==> x >= -48;\nloop invariant i54: n >= x ==> x >= -49;\nloop invariant i55: n >= x ==> x >= -50;\nloop invariant i56: n >= x ==> x >= -51;\nloop invariant i57: n >= x ==> x >= -52;\nloop invariant i58: n >= x ==> x >= -53;\nloop invariant i59: n >= x ==> x >= -54;\nloop invariant i60: n >= x ==> x >= -55;\nloop invariant i61: n >= x ==> x >= -56;\nloop invariant i62: n >= x ==> x >= -57;\nloop invariant i63: n >= x ==> x >= -58;\nloop invariant i64: n >= x ==> x >= -59;\nloop invariant i65: n >= x ==> x >= -60;\nloop invariant i66: n >= x ==> x >= -61;\nloop invariant i67: n >= x ==> x >= -62;\nloop invariant i68: n >= x ==> x >= -63;\nloop invariant i69: n >= x ==> x >= -64;\nloop invariant i70: n >= x ==> x >= -65;\nloop invariant i71: n >= x ==> x >= -66;\nloop invariant i72: n >= x ==> x >= -67;\nloop invariant i73: n >= x ==> x >= -68;\nloop invariant i74: n >= x ==> x >= -69;\nloop invariant i75: n >= x ==> x >= -70;\nloop invariant i76: n >= x ==> x >= -71;\nloop invariant i77: n >= x ==> x >= -72;\nloop invariant i78: n >= x ==> x >= -73;\nloop invariant i79: n >= x ==> x >= -74;\nloop invariant i80: n >= x ==> x >= -75;\nloop invariant i81: n >= x ==> x >= -76;\nloop invariant i82: n >= x ==> x >= -77;\nloop invariant i83: n >= x ==> x >= -78;\nloop invariant i84: n >= x ==> x >= -79;\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (n >= 0) )\n{;\n//@ assert( (x == n) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x == 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant x == 0 is established but not preserved.\nAssertion x == n: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = 0);\n  \n  /*@\n\n\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (n >= 0) )\n{;\n//@ assert( (x == n) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x + 1 >= n ==> x >= n;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant x + 1 >= n ==> x >= n is neither established nor preserved.\nAssertion x == n: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = 0);\n  \n  /*@\n\n\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (n >= 0) )\n{;\n//@ assert( (x == n) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 1 <= x <= n;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= x <= n is preserved but not established.\nAssertion x == n: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = 0);\n  \n  /*@\n\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (n >= 0) )\n{;\n//@ assert( (x == n) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x;\nloop invariant x < n;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x is partially proven to be inductive.\nloop invariant x < n is neither established nor preserved.\nAssertion x == n: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = 0);\n  \n  /*@\nloop invariant i1: 0 <= x;\n\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (n >= 0) )\n{;\n//@ assert( (x == n) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant n >= 0 ==> x == n;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant n >= 0 ==> x == n is preserved but not established.\nAssertion x == n: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = 0);\n  \n  /*@\n\n\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (n >= 0) )\n{;\n//@ assert( (x == n) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x == n;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant x == n is preserved but not established.\nAssertion x == n: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = 0);\n  \n  /*@\n\n\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (n >= 0) )\n{;\n//@ assert( (x == n) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x == n ==> ((x >= 0) && (x <= n));\nloop invariant x == n ==> (n >= 0);\nloop invariant x < n ==> (n >= 0);\nloop invariant x == n ==> (x == n);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant x == n ==> ((x >= 0) && (x <= n)) is partially proven to be inductive.\nloop invariant x == n ==> (n >= 0) is partially proven to be inductive.\nloop invariant x < n ==> (n >= 0) is partially proven to be inductive.\nloop invariant x == n ==> (x == n) is partially proven to be inductive.\nAssertion x == n: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = 0);\n  \n  /*@\n\nloop invariant i2: x == n ==> ((x >= 0) && (x <= n));\nloop invariant i3: x == n ==> (n >= 0);\nloop invariant i4: x < n ==> (n >= 0);\nloop invariant i5: x == n ==> (x == n);\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (n >= 0) )\n{;\n//@ assert( (x == n) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nAssertion x == n: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = 0);\n  \n  /*@\n\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (n >= 0) )\n{;\n//@ assert( (x == n) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant n >= 0 ==> x == n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant n >= 0 ==> x == n;\nloop invariant n >= 0 ==> x <= n;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant n >= 0 ==> x == n is preserved but not established.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant x <= n is partially proven to be inductive.\nloop invariant n >= 0 ==> x <= n is partially proven to be inductive.\nAssertion x == n: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = 0);\n  \n  /*@\n\n\nloop invariant i3: x >= 0;\n\nloop invariant i5: n >= 0 ==> x <= n;\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (n >= 0) )\n{;\n//@ assert( (x == n) );\n}\n\n}",
                    "checker_output_after_prune": true
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x == n;\nloop invariant (n >= 0) ==> (x == n);\nloop invariant (n >= 0) ==> (0 <= x <= n);\nloop invariant (n >= 0) ==> (x <= n);\nloop invariant (n >= 0) ==> (x >= 0);\nloop invariant (n >= 0) ==> (x == n ==> x >= 0);\nloop invariant (n >= 0) ==> (x == n ==> x <= n);\nloop invariant (n >= 0) ==> (x == n ==> x <= n) ==> (x >= 0);\nloop invariant (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n));\nloop invariant (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n);\nloop invariant (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x >= 0);\nloop invariant (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n);\nloop invariant (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n ==> x == n);\nloop invariant (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n ==> x == n ==> x >= 0);\nloop invariant (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n ==> x == n ==> x >= 0 ==> x <= n);\nloop invariant (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n);\nloop invariant (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0);\nloop invariant (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0 ==> x <= n);\nloop invariant (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n);\nloop invariant (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0);\nloop invariant (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0 ==> x <= n);\nloop invariant (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n);\nloop invariant (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0);\nloop invariant (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0 ==> x <= n);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant x == n is preserved but not established.\nloop invariant (n >= 0) ==> (x == n) is partially proven to be inductive.\nloop invariant (n >= 0) ==> (0 <= x <= n) is partially proven to be inductive.\nloop invariant (n >= 0) ==> (x <= n) is partially proven to be inductive.\nloop invariant (n >= 0) ==> (x >= 0) is partially proven to be inductive.\nloop invariant (n >= 0) ==> (x == n ==> x >= 0) is partially proven to be inductive.\nloop invariant (n >= 0) ==> (x == n ==> x <= n) is partially proven to be inductive.\nloop invariant (n >= 0) ==> (x == n ==> x <= n) ==> (x >= 0) is partially proven to be inductive.\nloop invariant (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n)) is partially proven to be inductive.\nloop invariant (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n) is partially proven to be inductive.\nloop invariant (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x >= 0) is partially proven to be inductive.\nloop invariant (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n) is partially proven to be inductive.\nloop invariant (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n ==> x == n) is partially proven to be inductive.\nloop invariant (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n ==> x == n ==> x >= 0) is partially proven to be inductive.\nloop invariant (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n ==> x == n ==> x >= 0 ==> x <= n) is partially proven to be inductive.\nloop invariant (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n) is partially proven to be inductive.\nloop invariant (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0) is partially proven to be inductive.\nloop invariant (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0 ==> x <= n) is partially proven to be inductive.\nloop invariant (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n) is partially proven to be inductive.\nloop invariant (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0) is partially proven to be inductive.\nloop invariant (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0 ==> x <= n) is partially proven to be inductive.\nloop invariant (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n) is partially proven to be inductive.\nloop invariant (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0) is partially proven to be inductive.\nloop invariant (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0 ==> x <= n) is partially proven to be inductive.\nAssertion x == n: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = 0);\n  \n  /*@\n\n\n\nloop invariant i4: (n >= 0) ==> (0 <= x <= n);\nloop invariant i5: (n >= 0) ==> (x <= n);\nloop invariant i6: (n >= 0) ==> (x >= 0);\nloop invariant i7: (n >= 0) ==> (x == n ==> x >= 0);\nloop invariant i8: (n >= 0) ==> (x == n ==> x <= n);\nloop invariant i9: (n >= 0) ==> (x == n ==> x <= n) ==> (x >= 0);\nloop invariant i10: (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n));\nloop invariant i11: (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n);\nloop invariant i12: (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x >= 0);\nloop invariant i13: (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n);\nloop invariant i14: (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n ==> x == n);\nloop invariant i15: (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n ==> x == n ==> x >= 0);\nloop invariant i16: (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n ==> x == n ==> x >= 0 ==> x <= n);\nloop invariant i17: (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n);\nloop invariant i18: (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0);\nloop invariant i19: (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0 ==> x <= n);\nloop invariant i20: (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n);\nloop invariant i21: (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0);\nloop invariant i22: (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0 ==> x <= n);\nloop invariant i23: (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n);\nloop invariant i24: (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0);\nloop invariant i25: (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0 ==> x <= n);\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (n >= 0) )\n{;\n//@ assert( (x == n) );\n}\n\n}",
                    "checker_output_after_prune": true
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= n <= (2^31 - 1);\nloop invariant x == n;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant 0 <= n <= (2^31 - 1) is preserved but not established.\nloop invariant x == n is preserved but not established.\nAssertion x == n: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = 0);\n  \n  /*@\n\n\n\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (n >= 0) )\n{;\n//@ assert( (x == n) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 7,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant n >= 0;\nloop invariant n >= x;\nloop invariant x == n;\nloop invariant true;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 24: unbound logic variable true. Ignoring loop annotation",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = 0);\n  \n  /*@\n\n\nloop invariant i3: x >= 0;\n\n\n\n\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (n >= 0) )\n{;\n//@ assert( (x == n) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x == n;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant x == n is preserved but not established.\nAssertion x == n: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = 0);\n  \n  /*@\n\n\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (n >= 0) )\n{;\n//@ assert( (x == n) );\n}\n\n}",
                    "checker_output_after_prune": false
                }
            ],
            "checker_output_for_combined_annotations": false,
            "checker_message_for_combined_annotations": "Annotation error on line 143: unbound logic variable true. Ignoring loop annotation",
            "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = 0);\n  \n  /*@\nloop invariant i1: x == (n - (n - x));\nloop invariant i2: x >= 0;\nloop invariant i3: x <= n;\nloop invariant i4: x == n;\nloop invariant i5: n >= 0;\nloop invariant i6: x == 0 ==> n >= x;\nloop invariant i7: x == n ==> n >= x;\nloop invariant i8: n >= x ==> x < n;\nloop invariant i9: n >= x ==> x >= 0;\nloop invariant i10: n >= x ==> x >= -1;\nloop invariant i11: n >= x ==> x >= -2;\nloop invariant i12: n >= x ==> x >= -3;\nloop invariant i13: n >= x ==> x >= -4;\nloop invariant i14: n >= x ==> x >= -5;\nloop invariant i15: n >= x ==> x >= -6;\nloop invariant i16: n >= x ==> x >= -7;\nloop invariant i17: n >= x ==> x >= -8;\nloop invariant i18: n >= x ==> x >= -9;\nloop invariant i19: n >= x ==> x >= -10;\nloop invariant i20: n >= x ==> x >= -11;\nloop invariant i21: n >= x ==> x >= -12;\nloop invariant i22: n >= x ==> x >= -13;\nloop invariant i23: n >= x ==> x >= -14;\nloop invariant i24: n >= x ==> x >= -15;\nloop invariant i25: n >= x ==> x >= -16;\nloop invariant i26: n >= x ==> x >= -17;\nloop invariant i27: n >= x ==> x >= -18;\nloop invariant i28: n >= x ==> x >= -19;\nloop invariant i29: n >= x ==> x >= -20;\nloop invariant i30: n >= x ==> x >= -21;\nloop invariant i31: n >= x ==> x >= -22;\nloop invariant i32: n >= x ==> x >= -23;\nloop invariant i33: n >= x ==> x >= -24;\nloop invariant i34: n >= x ==> x >= -25;\nloop invariant i35: n >= x ==> x >= -26;\nloop invariant i36: n >= x ==> x >= -27;\nloop invariant i37: n >= x ==> x >= -28;\nloop invariant i38: n >= x ==> x >= -29;\nloop invariant i39: n >= x ==> x >= -30;\nloop invariant i40: n >= x ==> x >= -31;\nloop invariant i41: n >= x ==> x >= -32;\nloop invariant i42: n >= x ==> x >= -33;\nloop invariant i43: n >= x ==> x >= -34;\nloop invariant i44: n >= x ==> x >= -35;\nloop invariant i45: n >= x ==> x >= -36;\nloop invariant i46: n >= x ==> x >= -37;\nloop invariant i47: n >= x ==> x >= -38;\nloop invariant i48: n >= x ==> x >= -39;\nloop invariant i49: n >= x ==> x >= -40;\nloop invariant i50: n >= x ==> x >= -41;\nloop invariant i51: n >= x ==> x >= -42;\nloop invariant i52: n >= x ==> x >= -43;\nloop invariant i53: n >= x ==> x >= -44;\nloop invariant i54: n >= x ==> x >= -45;\nloop invariant i55: n >= x ==> x >= -46;\nloop invariant i56: n >= x ==> x >= -47;\nloop invariant i57: n >= x ==> x >= -48;\nloop invariant i58: n >= x ==> x >= -49;\nloop invariant i59: n >= x ==> x >= -50;\nloop invariant i60: n >= x ==> x >= -51;\nloop invariant i61: n >= x ==> x >= -52;\nloop invariant i62: n >= x ==> x >= -53;\nloop invariant i63: n >= x ==> x >= -54;\nloop invariant i64: n >= x ==> x >= -55;\nloop invariant i65: n >= x ==> x >= -56;\nloop invariant i66: n >= x ==> x >= -57;\nloop invariant i67: n >= x ==> x >= -58;\nloop invariant i68: n >= x ==> x >= -59;\nloop invariant i69: n >= x ==> x >= -60;\nloop invariant i70: n >= x ==> x >= -61;\nloop invariant i71: n >= x ==> x >= -62;\nloop invariant i72: n >= x ==> x >= -63;\nloop invariant i73: n >= x ==> x >= -64;\nloop invariant i74: n >= x ==> x >= -65;\nloop invariant i75: n >= x ==> x >= -66;\nloop invariant i76: n >= x ==> x >= -67;\nloop invariant i77: n >= x ==> x >= -68;\nloop invariant i78: n >= x ==> x >= -69;\nloop invariant i79: n >= x ==> x >= -70;\nloop invariant i80: n >= x ==> x >= -71;\nloop invariant i81: n >= x ==> x >= -72;\nloop invariant i82: n >= x ==> x >= -73;\nloop invariant i83: n >= x ==> x >= -74;\nloop invariant i84: n >= x ==> x >= -75;\nloop invariant i85: n >= x ==> x >= -76;\nloop invariant i86: n >= x ==> x >= -77;\nloop invariant i87: n >= x ==> x >= -78;\nloop invariant i88: n >= x ==> x >= -79;\nloop invariant i89: 0 <= x <= n;\nloop invariant i90: x == 0;\nloop invariant i91: x + 1 >= n ==> x >= n;\nloop invariant i92: 1 <= x <= n;\nloop invariant i93: 0 <= x;\nloop invariant i94: x < n;\nloop invariant i95: n >= 0 ==> x == n;\nloop invariant i96: x == n ==> ((x >= 0) && (x <= n));\nloop invariant i97: x == n ==> (n >= 0);\nloop invariant i98: x < n ==> (n >= 0);\nloop invariant i99: x == n ==> (x == n);\nloop invariant i100: n >= 0 ==> x <= n;\nloop invariant i101: (n >= 0) ==> (x == n);\nloop invariant i102: (n >= 0) ==> (0 <= x <= n);\nloop invariant i103: (n >= 0) ==> (x <= n);\nloop invariant i104: (n >= 0) ==> (x >= 0);\nloop invariant i105: (n >= 0) ==> (x == n ==> x >= 0);\nloop invariant i106: (n >= 0) ==> (x == n ==> x <= n);\nloop invariant i107: (n >= 0) ==> (x == n ==> x <= n) ==> (x >= 0);\nloop invariant i108: (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n));\nloop invariant i109: (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n);\nloop invariant i110: (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x >= 0);\nloop invariant i111: (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n);\nloop invariant i112: (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n ==> x == n);\nloop invariant i113: (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n ==> x == n ==> x >= 0);\nloop invariant i114: (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n ==> x == n ==> x >= 0 ==> x <= n);\nloop invariant i115: (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n);\nloop invariant i116: (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0);\nloop invariant i117: (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0 ==> x <= n);\nloop invariant i118: (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n);\nloop invariant i119: (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0);\nloop invariant i120: (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0 ==> x <= n);\nloop invariant i121: (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n);\nloop invariant i122: (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0);\nloop invariant i123: (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0 ==> x <= n);\nloop invariant i124: 0 <= n <= (2^31 - 1);\nloop invariant i125: n >= x;\nloop invariant i126: true;\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (n >= 0) )\n{;\n//@ assert( (x == n) );\n}\n\n}",
            "combined_annotation_num_solver_calls": 8,
            "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = 0);\n  \n  /*@\nloop invariant i1: x == (n - (n - x));\nloop invariant i2: x >= 0;\n\n\n\n\nloop invariant i7: x == n ==> n >= x;\n\nloop invariant i9: n >= x ==> x >= 0;\nloop invariant i10: n >= x ==> x >= -1;\nloop invariant i11: n >= x ==> x >= -2;\nloop invariant i12: n >= x ==> x >= -3;\nloop invariant i13: n >= x ==> x >= -4;\nloop invariant i14: n >= x ==> x >= -5;\nloop invariant i15: n >= x ==> x >= -6;\nloop invariant i16: n >= x ==> x >= -7;\nloop invariant i17: n >= x ==> x >= -8;\nloop invariant i18: n >= x ==> x >= -9;\nloop invariant i19: n >= x ==> x >= -10;\nloop invariant i20: n >= x ==> x >= -11;\nloop invariant i21: n >= x ==> x >= -12;\nloop invariant i22: n >= x ==> x >= -13;\nloop invariant i23: n >= x ==> x >= -14;\nloop invariant i24: n >= x ==> x >= -15;\nloop invariant i25: n >= x ==> x >= -16;\nloop invariant i26: n >= x ==> x >= -17;\nloop invariant i27: n >= x ==> x >= -18;\nloop invariant i28: n >= x ==> x >= -19;\nloop invariant i29: n >= x ==> x >= -20;\nloop invariant i30: n >= x ==> x >= -21;\nloop invariant i31: n >= x ==> x >= -22;\nloop invariant i32: n >= x ==> x >= -23;\nloop invariant i33: n >= x ==> x >= -24;\nloop invariant i34: n >= x ==> x >= -25;\nloop invariant i35: n >= x ==> x >= -26;\nloop invariant i36: n >= x ==> x >= -27;\nloop invariant i37: n >= x ==> x >= -28;\nloop invariant i38: n >= x ==> x >= -29;\nloop invariant i39: n >= x ==> x >= -30;\nloop invariant i40: n >= x ==> x >= -31;\nloop invariant i41: n >= x ==> x >= -32;\nloop invariant i42: n >= x ==> x >= -33;\nloop invariant i43: n >= x ==> x >= -34;\nloop invariant i44: n >= x ==> x >= -35;\nloop invariant i45: n >= x ==> x >= -36;\nloop invariant i46: n >= x ==> x >= -37;\nloop invariant i47: n >= x ==> x >= -38;\nloop invariant i48: n >= x ==> x >= -39;\nloop invariant i49: n >= x ==> x >= -40;\nloop invariant i50: n >= x ==> x >= -41;\nloop invariant i51: n >= x ==> x >= -42;\nloop invariant i52: n >= x ==> x >= -43;\nloop invariant i53: n >= x ==> x >= -44;\nloop invariant i54: n >= x ==> x >= -45;\nloop invariant i55: n >= x ==> x >= -46;\nloop invariant i56: n >= x ==> x >= -47;\nloop invariant i57: n >= x ==> x >= -48;\nloop invariant i58: n >= x ==> x >= -49;\nloop invariant i59: n >= x ==> x >= -50;\nloop invariant i60: n >= x ==> x >= -51;\nloop invariant i61: n >= x ==> x >= -52;\nloop invariant i62: n >= x ==> x >= -53;\nloop invariant i63: n >= x ==> x >= -54;\nloop invariant i64: n >= x ==> x >= -55;\nloop invariant i65: n >= x ==> x >= -56;\nloop invariant i66: n >= x ==> x >= -57;\nloop invariant i67: n >= x ==> x >= -58;\nloop invariant i68: n >= x ==> x >= -59;\nloop invariant i69: n >= x ==> x >= -60;\nloop invariant i70: n >= x ==> x >= -61;\nloop invariant i71: n >= x ==> x >= -62;\nloop invariant i72: n >= x ==> x >= -63;\nloop invariant i73: n >= x ==> x >= -64;\nloop invariant i74: n >= x ==> x >= -65;\nloop invariant i75: n >= x ==> x >= -66;\nloop invariant i76: n >= x ==> x >= -67;\nloop invariant i77: n >= x ==> x >= -68;\nloop invariant i78: n >= x ==> x >= -69;\nloop invariant i79: n >= x ==> x >= -70;\nloop invariant i80: n >= x ==> x >= -71;\nloop invariant i81: n >= x ==> x >= -72;\nloop invariant i82: n >= x ==> x >= -73;\nloop invariant i83: n >= x ==> x >= -74;\nloop invariant i84: n >= x ==> x >= -75;\nloop invariant i85: n >= x ==> x >= -76;\nloop invariant i86: n >= x ==> x >= -77;\nloop invariant i87: n >= x ==> x >= -78;\nloop invariant i88: n >= x ==> x >= -79;\n\n\n\n\nloop invariant i93: 0 <= x;\n\n\nloop invariant i96: x == n ==> ((x >= 0) && (x <= n));\nloop invariant i97: x == n ==> (n >= 0);\nloop invariant i98: x < n ==> (n >= 0);\nloop invariant i99: x == n ==> (x == n);\nloop invariant i100: n >= 0 ==> x <= n;\n\nloop invariant i102: (n >= 0) ==> (0 <= x <= n);\nloop invariant i103: (n >= 0) ==> (x <= n);\nloop invariant i104: (n >= 0) ==> (x >= 0);\nloop invariant i105: (n >= 0) ==> (x == n ==> x >= 0);\nloop invariant i106: (n >= 0) ==> (x == n ==> x <= n);\nloop invariant i107: (n >= 0) ==> (x == n ==> x <= n) ==> (x >= 0);\nloop invariant i108: (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n));\nloop invariant i109: (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n);\nloop invariant i110: (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x >= 0);\nloop invariant i111: (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n);\nloop invariant i112: (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n ==> x == n);\nloop invariant i113: (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n ==> x == n ==> x >= 0);\nloop invariant i114: (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n ==> x == n ==> x >= 0 ==> x <= n);\nloop invariant i115: (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n);\nloop invariant i116: (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0);\nloop invariant i117: (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0 ==> x <= n);\nloop invariant i118: (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n);\nloop invariant i119: (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0);\nloop invariant i120: (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0 ==> x <= n);\nloop invariant i121: (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n);\nloop invariant i122: (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0);\nloop invariant i123: (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0 ==> x <= n);\n\n\n\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (n >= 0) )\n{;\n//@ assert( (x == n) );\n}\n\n}",
            "checker_output_after_prune": true
        },
        {
            "file": "../dataset/loop_invariants/sv-benchmarks/loop-lit/ddlm2013.c",
            "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    while (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;\n//@ assert(a == b);\n}\n\n    }\n    return 0;\n}",
            "success": false,
            "annotation_blocks": [
                "```\n/*@\nloop invariant i >= 1;\nloop invariant i <= 2;\nloop invariant a >= 0;\nloop invariant a <= i;\nloop invariant b >= 0;\nloop invariant b <= i;\nloop invariant j >= 1;\nloop invariant j <= i + 1;\nloop invariant (a + b) == (j - i);\nloop invariant (a + b) >= 0;\nloop invariant (a + b) <= i;\nloop invariant (a + b) == (j - i);\nloop invariant (a + b) >= 0;\nloop invariant (a + b) <= i;\nloop invariant (a + b) == (j - i);\nloop invariant (a + b) >= 0;\nloop invariant (a + b) <= i;\nloop invariant (a + b) == (j - i);\nloop invariant (a + b) >= 0;\nloop invariant (a + b) <= i;\nloop invariant (a + b) == (j - i);\nloop invariant (a + b) >= 0;\nloop invariant (a + b) <= i;\nloop invariant (a + b) == (j - i);\nloop invariant (a + b) >= 0;\nloop invariant (a + b) <= i;\nloop invariant (a + b) == (j - i);\nloop invariant (a + b) >= 0;\nloop invariant (a + b) <= i;\nloop invariant (a + b) == (j - i);\nloop invariant (a + b) >= 0;\nloop invariant (a + b) <= i;\nloop invariant (a + b) == (j - i);\nloop invariant (a + b) >= 0;\nloop invariant (a + b) <= i;\nloop invariant (a + b) == (j - i);\nloop invariant (a + b) >= 0;\nloop invariant (a + b) <= i;\nloop invariant (a + b) == (j - i);\nloop invariant (a + b) >= 0;\nloop invariant (a + b) <= i;\nloop invariant (a + b) == (j - i);\nloop invariant (a + b) >= 0;\nloop invariant (a + b) <= i;\nloop invariant (a + b) == (j - i);\nloop invariant (a + b) >= 0;\nloop invariant (a + b) <= i;\nloop invariant (a + b) == (j - i);\nloop invariant (a + b) >= 0;\nloop invariant (a + b) <= i;\nloop invariant (a + b) == (j - i);\nloop invariant (a + b) >= 0;\nloop invariant (a + b) <= i;\nloop invariant (a + b) == (j - i);\nloop invariant (a + b) >= 0;\nloop invariant (a + b) <= i;\nloop invariant (a + b) == (j - i);\nloop invariant (a + b) >= 0;\nloop invariant (a + b) <= i;\nloop invariant (a + b) == (j - i);\nloop invariant (a + b) >= 0;\nloop invariant (a + b) <= i;\nloop invariant (a + b) == (j - i);\nloop invariant (a + b) >= 0;\nloop invariant (a + b) <= i;\nloop invariant (a + b) == (j - i);\nloop invariant (a + b) >= 0;\nloop invariant (a + b) <= i;\nloop invariant (a + b) == (j - i);\nloop invariant (a + b) >= 0;\nloop invariant (a + b) <= i;\nloop invariant (a + b) == (j - i);\nloop invariant (a + b) >= 0;\nloop invariant (a + b) <= i;\nloop invariant (a + b) == (j - i);\nloop invariant (a + b) >= 0;\nloop invariant (a + b) <= i;\nloop invariant (a + b) == (j - i);\nloop invariant (a + b) >= 0;\nloop invariant (a + b) <= i;\nloop invariant (a + b) == (j - i);\nloop invariant (a + b) >= 0;\nloop invariant (a + b) <= i;\nloop invariant (a + b) == (j - i);\nloop invariant (a + b) >= 0;\nloop invariant (a + b) <= i;\nloop invariant (a + b) == (j - i);\nloop invariant (a + b) >= 0;\nloop invariant (a + b) <= i;\nloop invariant (a + b) == (j - i);\nloop invariant (a + b) >= 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= a <= 100000;\nloop invariant 0 <= b <= 100000;\nloop invariant 1 <= j <= 100000;\nloop invariant i%2 == 0 ==> j == i + 1;\nloop invariant i%2 == 1 ==> j == i;\nloop invariant i >= 0;\nloop invariant a >= b;\nloop invariant (i == 0) ==> (j == 1);\nloop invariant (i == 1) ==> (j == 2);\nloop invariant (i >= 2) ==> (j >= 3);\n*/\n```",
                "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= a;\nloop invariant 0 <= b;\nloop invariant 1 <= j;\nloop invariant i <= 2;\nloop invariant i%2 == j%2;\nloop invariant a <= b + (j - i);\nloop invariant b <= a + (j - i);\nloop invariant (i < 2) ==> (b <= a + 0);\nloop invariant (i >= 2) ==> (b <= a + 2);\nloop invariant (j%2 == 0) ==> (b <= a + j);\nloop invariant (j%2 == 1) ==> (b <= a + j - 1);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= a;\nloop invariant 0 <= b;\nloop invariant 0 <= j;\nloop invariant 0 <= i;\nloop invariant 0 <= a <= b;\nloop invariant i%2 == 0 ==> j%2 == 1;\nloop invariant i%2 == 1 ==> j%2 == 0;\n*/\n```",
                "```\n/*@\nloop invariant i = 0 || i = 1;\nloop invariant j = 1;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant b <= a + j;\nloop invariant i = 0 || i = 1;\nloop invariant j = 1;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant b <= a + j;\nloop invariant a == b;\nloop invariant i = 0 || i = 1;\nloop invariant j = 1;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant b <= a + j;\nloop invariant a == b;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= 2;\nloop invariant i%2 == 1 || i%2 == 0;\nloop invariant 0 <= j <= 3;\nloop invariant (i%2 == 0 && j%2 == 0) || (i%2 == 1 && j%2 == 1);\nloop invariant i%2 == 1 || a <= b;\nloop invariant a <= (b + 2);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= a <= b <= 1;\nloop invariant 0 <= b <= 1;\nloop invariant 1 <= b <= 1;\nloop invariant (i == 0) ==> j = 1;\nloop invariant (i == 1) ==> j = 2;\nloop invariant (i == 0) ==> (b = 0);\nloop invariant (i == 1) ==> (b = 1);\nloop invariant (i == 0) ==> (a = 0);\nloop invariant (i == 1) ==> (a = 1);\nloop invariant (i == 0) ==> (b = 1);\nloop invariant (i == 1) ==> (b = 2);\nloop invariant (i == 0) ==> (a = 1);\nloop invariant (i == 1) ==> (a = 2);\nloop invariant (i == 0) ==> (b = 3);\nloop invariant (i == 1) ==> (b = 4);\nloop invariant (i == 0) ==> (a = 3);\nloop invariant (i == 1) ==> (a = 4);\nloop invariant (i == 0) ==> (b = 5);\nloop invariant (i == 1) ==> (b = 6);\nloop invariant (i == 0) ==> (a = 5);\nloop invariant (i == 1) ==> (a = 6);\nloop invariant (i == 0) ==> (b = 7);\nloop invariant (i == 1) ==> (b = 8);\nloop invariant (i == 0) ==> (a = 7);\nloop invariant (i == 1) ==> (a = 8);\nloop invariant (i == 0) ==> (b = 9);\nloop invariant (i == 1) ==> (b = 10);\nloop invariant (i == 0) ==> (a = 9);\nloop invariant (i == 1) ==> (a = 10);\nloop invariant (i == 0) ==> (b = 11);\nloop invariant (i == 1) ==> (b = 12);\nloop invariant (i == 0) ==> (a = 11);\nloop invariant (i == 1) ==> (a = 12);\nloop invariant (i == 0) ==> (b = 13);\nloop invariant (i == 1) ==> (b = 14);\nloop invariant (i == 0) ==> (a = 13);\nloop invariant (i == 1) ==> (a = 14);\nloop invariant (i == 0) ==> (b = 15);\nloop invariant (i == 1) ==> (b = 16);\nloop invariant (i == 0) ==> (a = 15);\nloop invariant (i == 1) ==> (a = 16);\nloop invariant (i == 0) ==> (b = 17);\nloop invariant (i == 1) ==> (b = 18);\nloop invariant (i == 0) ==> (a = 17);\nloop invariant (i == 1) ==> (a = 18);\nloop invariant (i == 0) ==> (b = 19);\nloop invariant (i == 1) ==> (b = 20);\nloop invariant (i == 0) ==> (a = 19);\nloop invariant (i == 1) ==> (a = 20);\nloop invariant (i == 0) ==> (b = 21);\nloop invariant (i == 1) ==> (b = 22);\nloop invariant (i == 0) ==> (a = 21);\nloop invariant (i == 1) ==> (a = 22);\nloop invariant (i == 0) ==> (b = 23);\nloop invariant (i == 1) ==> (b = 24);\nloop invariant (i == 0) ==> (a = 23);\nloop invariant (i == 1) ==> (a = 24);\nloop invariant (i == 0) ==> (b = 25);\nloop invariant (i == 1) ==> (b = 26);\nloop invariant (i == 0) ==> (a = 25);\nloop invariant (i == 1) ==> (a = 26);\nloop invariant (i == 0) ==> (b = 27);\nloop invariant (i == 1) ==> (b = 28);\nloop invariant (i == 0) ==> (a = 27);\nloop invariant (i == 1) ==> (a = 28);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= 2^32 - 1;\nloop invariant 0 <= j <= 2^32 - 1;\nloop invariant 0 <= a <= 2^32 - 1;\nloop invariant 0 <= b <= 2^32 - 1;\nloop invariant j - i >= 1;\nloop invariant j % 2 == i % 2;\nloop invariant (i == 0 && j == 1) || (i == 1 && j == 1);\nloop invariant j == (i + 1);\nloop invariant i == (j - 1);\nloop invariant a == b ==> (i == 0 && j == 1) || (i == 1 && j == 1);\nloop invariant a != b ==> !(i == 0 && j == 1) && !(i == 1 && j == 1);\nloop invariant !(a == b) ==> !(i == 0 && j == 1) && !(i == 1 && j == 1);\nloop invariant !(a != b) ==> (i == 0 && j == 1) || (i == 1 && j == 1);\nloop invariant i % 2 == 0 ==> j % 2 == 0;\nloop invariant i % 2 == 1 ==> j % 2 == 1;\nloop invariant i % 2 == 0 ==> j == (i + 1);\nloop invariant i % 2 == 1 ==> j == (i + 2);\nloop invariant i % 2 == 0 ==> j == (i + 2);\nloop invariant i % 2 == 1 ==> j == (i + 1);\nloop invariant i % 2 == 0 ==> (i + 2) == j;\nloop invariant i % 2 == 1 ==> (i + 1) == j;\nloop invariant i % 2 == 0 ==> i == (j - 1);\nloop invariant i % 2 == 1 ==> i == (j - 2);\nloop invariant i % 2 == 0 ==> j == (i + 1);\nloop invariant i % 2 == 1 ==> j == (i + 2);\nloop invariant i % 2 == 0 ==> j == (i + 2);\nloop invariant i % 2 == 1 ==> j == (i + 1);\nloop invariant i % 2 == 0 ==> (i + 2) == j;\nloop invariant i % 2 == 1 ==> (i + 1) == j;\nloop invariant i % 2 == 0 ==> i == (j - 1);\nloop invariant i % 2 == 1 ==> i == (j - 2);\nloop invariant i % 2 == 0 ==> j == (i + 1);\nloop invariant i % 2 == 1 ==> j == (i + 2);\nloop invariant i % 2 == 0 ==> j == (i + 2);\nloop invariant i % 2 == 1 ==> j == (i + 1);\nloop invariant i % 2 == 0 ==> (i + 2) == j;\nloop invariant i % 2 == 1 ==> (i + 1) == j;\nloop invariant i % 2 == 0 ==> i == (j - 1);\nloop invariant i % 2 == 1 ==> i == (j - 2);\nloop invariant i % 2 == 0 ==> j == (i + 1);\nloop invariant i % 2 == 1 ==> j == (i + 2);\nloop invariant i % 2 == 0 ==> j == (i + 2);\nloop invariant i % 2 == 1 ==> j == (i + 1);\nloop invariant i % 2 == 0 ==> (i + 2) == j;\nloop invariant i % 2 == 1 ==> (i + 1) == j;\nloop invariant i % 2 == 0 ==> i == (j - 1);\nloop invariant i % 2 == 1 ==> i == (j - 2);\nloop invariant i % 2 == 0 ==> j == (i + 1);\nloop invariant i % 2 == 1 ==> j == (i + 2);\nloop invariant i % 2 == 0 ==> j == (i + 2);\nloop invariant i % 2 == 1 ==> j == (i + 1);\nloop invariant i % 2 == 0 ==> (i + 2) == j;\nloop invariant i % 2 == 1 ==> (i + 1) == j;\nloop invariant i % 2 == 0 ==> i == (j - 1);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= 1;\nloop invariant 0 <= j <= 10;\nloop invariant 0 <= a <= 10;\nloop invariant 0 <= b <= 10;\nloop invariant a >= i;\nloop invariant b >= 0;\nloop invariant a + b >= (i + j);\nloop invariant a + b >= 0;\nloop invariant a + b >= i;\nloop invariant a + b >= j;\nloop invariant a + b >= 1;\nloop invariant a + b >= 2;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= b;\nloop invariant a <= 1;\nloop invariant b <= 10;\nloop invariant a <= j;\nloop invariant b <= a;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= j <= 2;\nloop invariant 0 <= i <= 2;\nloop invariant 0 <= a <= b;\nloop invariant (i%2 == 0 ==> j%2 == 0) || (i%2 != 0 ==> j%2 == 1);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= j <= i <= a <= b;\nloop invariant (i + j) % 2 == 0 ==> (j <= i + 1);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= 1;\nloop invariant 1 <= j <= 3;\nloop invariant 0 <= a <= 1;\nloop invariant 0 <= b <= 3;\nloop invariant a == b ==> i == 1;\nloop invariant a == b ==> j == 3;\nloop invariant a == b ==> a == b;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= 2;\nloop invariant 0 <= j;\nloop invariant 0 <= a;\nloop invariant 0 <= b;\nloop invariant a <= b;\nloop invariant (flag ==> i = 1);\nloop invariant ((flag ==> i = 1) ==> (j = 1));\nloop invariant (flag ==> i = 0);\nloop invariant ((flag ==> i = 0) ==> (j = 1));\nloop invariant (flag ==> (a = b));\nloop invariant ((flag ==> (a = b)) ==> (i = 1));\nloop invariant ((flag ==> (a = b)) ==> (j = 1));\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= 1;\nloop invariant 0 <= j <= 2;\nloop invariant a >= b;\nloop invariant b >= i;\nloop invariant b <= j;\nloop invariant a == (i * j);\nloop invariant a == b ==> flag;\nloop invariant i == 0 ==> flag;\nloop invariant i == 1 ==> !flag;\nloop invariant i%2 == 0 ==> j%2 == 0;\nloop invariant i%2 != 0 ==> j%2 != 0;\n*/\n```"
            ],
            "completions": [
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant i >= 1;\nloop invariant i <= 2;\nloop invariant a >= 0;\nloop invariant a <= i;\nloop invariant b >= 0;\nloop invariant b <= i;\nloop invariant j >= 1;\nloop invariant j <= i + 1;\nloop invariant (a + b) == (j - i);\nloop invariant (a + b) >= 0;\nloop invariant (a + b) <= i;\nloop invariant (a + b) == (j - i);\nloop invariant (a + b) >= 0;\nloop invariant (a + b) <= i;\nloop invariant (a + b) == (j - i);\nloop invariant (a + b) >= 0;\nloop invariant (a + b) <= i;\nloop invariant (a + b) == (j - i);\nloop invariant (a + b) >= 0;\nloop invariant (a + b) <= i;\nloop invariant (a + b) == (j - i);\nloop invariant (a + b) >= 0;\nloop invariant (a + b) <= i;\nloop invariant (a + b) == (j - i);\nloop invariant (a + b) >= 0;\nloop invariant (a + b) <= i;\nloop invariant (a + b) == (j - i);\nloop invariant (a + b) >= 0;\nloop invariant (a + b) <= i;\nloop invariant (a + b) == (j - i);\nloop invariant (a + b) >= 0;\nloop invariant (a + b) <= i;\nloop invariant (a + b) == (j - i);\nloop invariant (a + b) >= 0;\nloop invariant (a + b) <= i;\nloop invariant (a + b) == (j - i);\nloop invariant (a + b) >= 0;\nloop invariant (a + b) <= i;\nloop invariant (a + b) == (j - i);\nloop invariant (a + b) >= 0;\nloop invariant (a + b) <= i;\nloop invariant (a + b) == (j - i);\nloop invariant (a + b) >= 0;\nloop invariant (a + b) <= i;\nloop invariant (a + b) == (j - i);\nloop invariant (a + b) >= 0;\nloop invariant (a + b) <= i;\nloop invariant (a + b) == (j - i);\nloop invariant (a + b) >= 0;\nloop invariant (a + b) <= i;\nloop invariant (a + b) == (j - i);\nloop invariant (a + b) >= 0;\nloop invariant (a + b) <= i;\nloop invariant (a + b) == (j - i);\nloop invariant (a + b) >= 0;\nloop invariant (a + b) <= i;\nloop invariant (a + b) == (j - i);\nloop invariant (a + b) >= 0;\nloop invariant (a + b) <= i;\nloop invariant (a + b) == (j - i);\nloop invariant (a + b) >= 0;\nloop invariant (a + b) <= i;\nloop invariant (a + b) == (j - i);\nloop invariant (a + b) >= 0;\nloop invariant (a + b) <= i;\nloop invariant (a + b) == (j - i);\nloop invariant (a + b) >= 0;\nloop invariant (a + b) <= i;\nloop invariant (a + b) == (j - i);\nloop invariant (a + b) >= 0;\nloop invariant (a + b) <= i;\nloop invariant (a + b) == (j - i);\nloop invariant (a + b) >= 0;\nloop invariant (a + b) <= i;\nloop invariant (a + b) == (j - i);\nloop invariant (a + b) >= 0;\nloop invariant (a + b) <= i;\nloop invariant (a + b) == (j - i);\nloop invariant (a + b) >= 0;\nloop invariant (a + b) <= i;\nloop invariant (a + b) == (j - i);\nloop invariant (a + b) >= 0;\nloop invariant (a + b) <= i;\nloop invariant (a + b) == (j - i);\nloop invariant (a + b) >= 0;\nloop invariant (a + b) <= i;\nloop invariant (a + b) == (j - i);\nloop invariant (a + b) >= 0;\nloop invariant (a + b) <= i;\nloop invariant (a + b) == (j - i);\nloop invariant (a + b) >= 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant i >= 1 is preserved but not established.\nloop invariant i <= 2 is established but not preserved.\nloop invariant a >= 0 is partially proven to be inductive.\nloop invariant a <= i is partially proven to be inductive.\nloop invariant b >= 0 is partially proven to be inductive.\nloop invariant b <= i is partially proven to be inductive.\nloop invariant j >= 1 is partially proven to be inductive.\nloop invariant j <= i + 1 is partially proven to be inductive.\nloop invariant (a + b) == (j - i) is partially proven to be inductive.\nloop invariant (a + b) >= 0 is partially proven to be inductive.\nloop invariant (a + b) <= i is partially proven to be inductive.\nAssertion a == b: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    /*@\n\n\nloop invariant i3: a >= 0;\n\nloop invariant i5: b >= 0;\n\n\n\n\nloop invariant i10: (a + b) >= 0;\n\n*/\nwhile (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;\n//@ assert(a == b);\n}\n\n    }\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= a <= 100000;\nloop invariant 0 <= b <= 100000;\nloop invariant 1 <= j <= 100000;\nloop invariant i%2 == 0 ==> j == i + 1;\nloop invariant i%2 == 1 ==> j == i;\nloop invariant i >= 0;\nloop invariant a >= b;\nloop invariant (i == 0) ==> (j == 1);\nloop invariant (i == 1) ==> (j == 2);\nloop invariant (i >= 2) ==> (j >= 3);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= a <= 100000 is established but not preserved.\nloop invariant 0 <= b <= 100000 is partially proven to be inductive.\nloop invariant 1 <= j <= 100000 is established but not preserved.\nloop invariant i%2 == 0 ==> j == i + 1 is partially proven to be inductive.\nloop invariant i%2 == 1 ==> j == i is established but not preserved.\nloop invariant i >= 0 is partially proven to be inductive.\nloop invariant a >= b is partially proven to be inductive.\nloop invariant (i == 0) ==> (j == 1) is partially proven to be inductive.\nloop invariant (i == 1) ==> (j == 2) is preserved but not established.\nloop invariant (i >= 2) ==> (j >= 3) is partially proven to be inductive.\nAssertion a == b: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    /*@\n\n\n\n\n\nloop invariant i6: i >= 0;\n\n\n\n\n*/\nwhile (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;\n//@ assert(a == b);\n}\n\n    }\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 22: unbound logic variable i1. Ignoring loop annotation",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    /*@\n\n\n\n\n*/\nwhile (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;\n//@ assert(a == b);\n}\n\n    }\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= a;\nloop invariant 0 <= b;\nloop invariant 1 <= j;\nloop invariant i <= 2;\nloop invariant i%2 == j%2;\nloop invariant a <= b + (j - i);\nloop invariant b <= a + (j - i);\nloop invariant (i < 2) ==> (b <= a + 0);\nloop invariant (i >= 2) ==> (b <= a + 2);\nloop invariant (j%2 == 0) ==> (b <= a + j);\nloop invariant (j%2 == 1) ==> (b <= a + j - 1);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= a is partially proven to be inductive.\nloop invariant 0 <= b is partially proven to be inductive.\nloop invariant 1 <= j is established but not preserved.\nloop invariant i <= 2 is established but not preserved.\nloop invariant i%2 == j%2 is neither established nor preserved.\nloop invariant a <= b + (j - i) is established but not preserved.\nloop invariant b <= a + (j - i) is established but not preserved.\nloop invariant (i < 2) ==> (b <= a + 0) is partially proven to be inductive.\nloop invariant (i >= 2) ==> (b <= a + 2) is established but not preserved.\nloop invariant (j%2 == 0) ==> (b <= a + j) is partially proven to be inductive.\nloop invariant (j%2 == 1) ==> (b <= a + j - 1) is partially proven to be inductive.\nAssertion a == b: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    /*@\nloop invariant i1: 0 <= a;\nloop invariant i2: 0 <= b;\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;\n//@ assert(a == b);\n}\n\n    }\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= a;\nloop invariant 0 <= b;\nloop invariant 0 <= j;\nloop invariant 0 <= i;\nloop invariant 0 <= a <= b;\nloop invariant i%2 == 0 ==> j%2 == 1;\nloop invariant i%2 == 1 ==> j%2 == 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= a is partially proven to be inductive.\nloop invariant 0 <= b is partially proven to be inductive.\nloop invariant 0 <= j is partially proven to be inductive.\nloop invariant 0 <= i is partially proven to be inductive.\nloop invariant 0 <= a <= b is established but not preserved.\nloop invariant i%2 == 0 ==> j%2 == 1 is established but not preserved.\nloop invariant i%2 == 1 ==> j%2 == 0 is neither established nor preserved.\nAssertion a == b: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    /*@\nloop invariant i1: 0 <= a;\nloop invariant i2: 0 <= b;\nloop invariant i3: 0 <= j;\nloop invariant i4: 0 <= i;\n\n\n\n*/\nwhile (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;\n//@ assert(a == b);\n}\n\n    }\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant i = 0 || i = 1;\nloop invariant j = 1;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant b <= a + j;\nloop invariant i = 0 || i = 1;\nloop invariant j = 1;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant b <= a + j;\nloop invariant a == b;\nloop invariant i = 0 || i = 1;\nloop invariant j = 1;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant b <= a + j;\nloop invariant a == b;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 22: Assignment operators not allowed in annotations.",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    /*@\n\n\nloop invariant i3: a >= 0;\nloop invariant i4: b >= 0;\n\n\n*/\nwhile (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;\n//@ assert(a == b);\n}\n\n    }\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= 2;\nloop invariant i%2 == 1 || i%2 == 0;\nloop invariant 0 <= j <= 3;\nloop invariant (i%2 == 0 && j%2 == 0) || (i%2 == 1 && j%2 == 1);\nloop invariant i%2 == 1 || a <= b;\nloop invariant a <= (b + 2);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= 2 is established but not preserved.\nloop invariant i%2 == 1 || i%2 == 0 is partially proven to be inductive.\nloop invariant 0 <= j <= 3 is established but not preserved.\nloop invariant (i%2 == 0 && j%2 == 0) || (i%2 == 1 && j%2 == 1) is preserved but not established.\nloop invariant i%2 == 1 || a <= b is established but not preserved.\nloop invariant a <= (b + 2) is partially proven to be inductive.\nAssertion a == b: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    /*@\n\nloop invariant i2: i%2 == 1 || i%2 == 0;\n\n\n\n\n*/\nwhile (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;\n//@ assert(a == b);\n}\n\n    }\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 66,
                    "annotations": "```\n/*@\nloop invariant 0 <= a <= b <= 1;\nloop invariant 0 <= b <= 1;\nloop invariant 1 <= b <= 1;\nloop invariant (i == 0) ==> j = 1;\nloop invariant (i == 1) ==> j = 2;\nloop invariant (i == 0) ==> (b = 0);\nloop invariant (i == 1) ==> (b = 1);\nloop invariant (i == 0) ==> (a = 0);\nloop invariant (i == 1) ==> (a = 1);\nloop invariant (i == 0) ==> (b = 1);\nloop invariant (i == 1) ==> (b = 2);\nloop invariant (i == 0) ==> (a = 1);\nloop invariant (i == 1) ==> (a = 2);\nloop invariant (i == 0) ==> (b = 3);\nloop invariant (i == 1) ==> (b = 4);\nloop invariant (i == 0) ==> (a = 3);\nloop invariant (i == 1) ==> (a = 4);\nloop invariant (i == 0) ==> (b = 5);\nloop invariant (i == 1) ==> (b = 6);\nloop invariant (i == 0) ==> (a = 5);\nloop invariant (i == 1) ==> (a = 6);\nloop invariant (i == 0) ==> (b = 7);\nloop invariant (i == 1) ==> (b = 8);\nloop invariant (i == 0) ==> (a = 7);\nloop invariant (i == 1) ==> (a = 8);\nloop invariant (i == 0) ==> (b = 9);\nloop invariant (i == 1) ==> (b = 10);\nloop invariant (i == 0) ==> (a = 9);\nloop invariant (i == 1) ==> (a = 10);\nloop invariant (i == 0) ==> (b = 11);\nloop invariant (i == 1) ==> (b = 12);\nloop invariant (i == 0) ==> (a = 11);\nloop invariant (i == 1) ==> (a = 12);\nloop invariant (i == 0) ==> (b = 13);\nloop invariant (i == 1) ==> (b = 14);\nloop invariant (i == 0) ==> (a = 13);\nloop invariant (i == 1) ==> (a = 14);\nloop invariant (i == 0) ==> (b = 15);\nloop invariant (i == 1) ==> (b = 16);\nloop invariant (i == 0) ==> (a = 15);\nloop invariant (i == 1) ==> (a = 16);\nloop invariant (i == 0) ==> (b = 17);\nloop invariant (i == 1) ==> (b = 18);\nloop invariant (i == 0) ==> (a = 17);\nloop invariant (i == 1) ==> (a = 18);\nloop invariant (i == 0) ==> (b = 19);\nloop invariant (i == 1) ==> (b = 20);\nloop invariant (i == 0) ==> (a = 19);\nloop invariant (i == 1) ==> (a = 20);\nloop invariant (i == 0) ==> (b = 21);\nloop invariant (i == 1) ==> (b = 22);\nloop invariant (i == 0) ==> (a = 21);\nloop invariant (i == 1) ==> (a = 22);\nloop invariant (i == 0) ==> (b = 23);\nloop invariant (i == 1) ==> (b = 24);\nloop invariant (i == 0) ==> (a = 23);\nloop invariant (i == 1) ==> (a = 24);\nloop invariant (i == 0) ==> (b = 25);\nloop invariant (i == 1) ==> (b = 26);\nloop invariant (i == 0) ==> (a = 25);\nloop invariant (i == 1) ==> (a = 26);\nloop invariant (i == 0) ==> (b = 27);\nloop invariant (i == 1) ==> (b = 28);\nloop invariant (i == 0) ==> (a = 27);\nloop invariant (i == 1) ==> (a = 28);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 25: Assignment operators not allowed in annotations.",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;\n//@ assert(a == b);\n}\n\n    }\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 12,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= 2^32 - 1;\nloop invariant 0 <= j <= 2^32 - 1;\nloop invariant 0 <= a <= 2^32 - 1;\nloop invariant 0 <= b <= 2^32 - 1;\nloop invariant j - i >= 1;\nloop invariant j % 2 == i % 2;\nloop invariant (i == 0 && j == 1) || (i == 1 && j == 1);\nloop invariant j == (i + 1);\nloop invariant i == (j - 1);\nloop invariant a == b ==> (i == 0 && j == 1) || (i == 1 && j == 1);\nloop invariant a != b ==> !(i == 0 && j == 1) && !(i == 1 && j == 1);\nloop invariant !(a == b) ==> !(i == 0 && j == 1) && !(i == 1 && j == 1);\nloop invariant !(a != b) ==> (i == 0 && j == 1) || (i == 1 && j == 1);\nloop invariant i % 2 == 0 ==> j % 2 == 0;\nloop invariant i % 2 == 1 ==> j % 2 == 1;\nloop invariant i % 2 == 0 ==> j == (i + 1);\nloop invariant i % 2 == 1 ==> j == (i + 2);\nloop invariant i % 2 == 0 ==> j == (i + 2);\nloop invariant i % 2 == 1 ==> j == (i + 1);\nloop invariant i % 2 == 0 ==> (i + 2) == j;\nloop invariant i % 2 == 1 ==> (i + 1) == j;\nloop invariant i % 2 == 0 ==> i == (j - 1);\nloop invariant i % 2 == 1 ==> i == (j - 2);\nloop invariant i % 2 == 0 ==> j == (i + 1);\nloop invariant i % 2 == 1 ==> j == (i + 2);\nloop invariant i % 2 == 0 ==> j == (i + 2);\nloop invariant i % 2 == 1 ==> j == (i + 1);\nloop invariant i % 2 == 0 ==> (i + 2) == j;\nloop invariant i % 2 == 1 ==> (i + 1) == j;\nloop invariant i % 2 == 0 ==> i == (j - 1);\nloop invariant i % 2 == 1 ==> i == (j - 2);\nloop invariant i % 2 == 0 ==> j == (i + 1);\nloop invariant i % 2 == 1 ==> j == (i + 2);\nloop invariant i % 2 == 0 ==> j == (i + 2);\nloop invariant i % 2 == 1 ==> j == (i + 1);\nloop invariant i % 2 == 0 ==> (i + 2) == j;\nloop invariant i % 2 == 1 ==> (i + 1) == j;\nloop invariant i % 2 == 0 ==> i == (j - 1);\nloop invariant i % 2 == 1 ==> i == (j - 2);\nloop invariant i % 2 == 0 ==> j == (i + 1);\nloop invariant i % 2 == 1 ==> j == (i + 2);\nloop invariant i % 2 == 0 ==> j == (i + 2);\nloop invariant i % 2 == 1 ==> j == (i + 1);\nloop invariant i % 2 == 0 ==> (i + 2) == j;\nloop invariant i % 2 == 1 ==> (i + 1) == j;\nloop invariant i % 2 == 0 ==> i == (j - 1);\nloop invariant i % 2 == 1 ==> i == (j - 2);\nloop invariant i % 2 == 0 ==> j == (i + 1);\nloop invariant i % 2 == 1 ==> j == (i + 2);\nloop invariant i % 2 == 0 ==> j == (i + 2);\nloop invariant i % 2 == 1 ==> j == (i + 1);\nloop invariant i % 2 == 0 ==> (i + 2) == j;\nloop invariant i % 2 == 1 ==> (i + 1) == j;\nloop invariant i % 2 == 0 ==> i == (j - 1);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 22: invalid operands to binary ^; unexpected 𝔹 and ℤ. Ignoring loop annotation",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;\n//@ assert(a == b);\n}\n\n    }\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 10,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= 1;\nloop invariant 0 <= j <= 10;\nloop invariant 0 <= a <= 10;\nloop invariant 0 <= b <= 10;\nloop invariant a >= i;\nloop invariant b >= 0;\nloop invariant a + b >= (i + j);\nloop invariant a + b >= 0;\nloop invariant a + b >= i;\nloop invariant a + b >= j;\nloop invariant a + b >= 1;\nloop invariant a + b >= 2;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= b;\nloop invariant a <= 1;\nloop invariant b <= 10;\nloop invariant a <= j;\nloop invariant b <= a;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= 1 is partially proven to be inductive.\nloop invariant 0 <= j <= 10 is partially proven to be inductive.\nloop invariant 0 <= a <= 10 is partially proven to be inductive.\nloop invariant 0 <= b <= 10 is partially proven to be inductive.\nloop invariant a >= i is preserved but not established.\nloop invariant b >= 0 is partially proven to be inductive.\nloop invariant a + b >= (i + j) is preserved but not established.\nloop invariant a + b >= 0 is partially proven to be inductive.\nloop invariant a + b >= i is partially proven to be inductive.\nloop invariant a + b >= j is partially proven to be inductive.\nloop invariant a + b >= 1 is partially proven to be inductive.\nloop invariant a + b >= 2 is partially proven to be inductive.\nloop invariant a >= 0 is partially proven to be inductive.\nloop invariant a <= b is partially proven to be inductive.\nloop invariant a <= 1 is partially proven to be inductive.\nloop invariant b <= 10 is partially proven to be inductive.\nloop invariant a <= j is partially proven to be inductive.\nloop invariant b <= a is partially proven to be inductive.\nloop invariant a <= 10 is partially proven to be inductive.\nAssertion a == b: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    /*@\n\n\n\n\n\nloop invariant i6: b >= 0;\n\nloop invariant i8: a + b >= 0;\n\n\n\n\nloop invariant i13: a >= 0;\n\n\n\n\n\n\n*/\nwhile (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;\n//@ assert(a == b);\n}\n\n    }\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= j <= 2;\nloop invariant 0 <= i <= 2;\nloop invariant 0 <= a <= b;\nloop invariant (i%2 == 0 ==> j%2 == 0) || (i%2 != 0 ==> j%2 == 1);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= j <= 2 is established but not preserved.\nloop invariant 0 <= i <= 2 is established but not preserved.\nloop invariant 0 <= a <= b is established but not preserved.\nloop invariant (i%2 == 0 ==> j%2 == 0) || (i%2 != 0 ==> j%2 == 1) is partially proven to be inductive.\nAssertion a == b: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    /*@\n\n\n\nloop invariant i4: (i%2 == 0 ==> j%2 == 0) || (i%2 != 0 ==> j%2 == 1);\n*/\nwhile (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;\n//@ assert(a == b);\n}\n\n    }\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= j <= i <= a <= b;\nloop invariant (i + j) % 2 == 0 ==> (j <= i + 1);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= j <= i <= a <= b is preserved but not established.\nloop invariant (i + j) % 2 == 0 ==> (j <= i + 1) is partially proven to be inductive.\nAssertion a == b: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    /*@\n\n\n*/\nwhile (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;\n//@ assert(a == b);\n}\n\n    }\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= 1;\nloop invariant 1 <= j <= 3;\nloop invariant 0 <= a <= 1;\nloop invariant 0 <= b <= 3;\nloop invariant a == b ==> i == 1;\nloop invariant a == b ==> j == 3;\nloop invariant a == b ==> a == b;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= 1 is partially proven to be inductive.\nloop invariant 1 <= j <= 3 is partially proven to be inductive.\nloop invariant 0 <= a <= 1 is partially proven to be inductive.\nloop invariant 0 <= b <= 3 is partially proven to be inductive.\nloop invariant a == b ==> i == 1 is preserved but not established.\nloop invariant a == b ==> j == 3 is preserved but not established.\nloop invariant a == b ==> a == b is partially proven to be inductive.\nAssertion a == b: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    /*@\n\n\n\n\n\n\nloop invariant i7: a == b ==> a == b;\n*/\nwhile (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;\n//@ assert(a == b);\n}\n\n    }\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 10,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= 2;\nloop invariant 0 <= j;\nloop invariant 0 <= a;\nloop invariant 0 <= b;\nloop invariant a <= b;\nloop invariant (flag ==> i = 1);\nloop invariant ((flag ==> i = 1) ==> (j = 1));\nloop invariant (flag ==> i = 0);\nloop invariant ((flag ==> i = 0) ==> (j = 1));\nloop invariant (flag ==> (a = b));\nloop invariant ((flag ==> (a = b)) ==> (i = 1));\nloop invariant ((flag ==> (a = b)) ==> (j = 1));\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 27: Assignment operators not allowed in annotations.",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    /*@\n\nloop invariant i2: 0 <= j;\nloop invariant i3: 0 <= a;\nloop invariant i4: 0 <= b;\n\n\n\n\n\n\n\n\n*/\nwhile (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;\n//@ assert(a == b);\n}\n\n    }\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= 1;\nloop invariant 0 <= j <= 2;\nloop invariant a >= b;\nloop invariant b >= i;\nloop invariant b <= j;\nloop invariant a == (i * j);\nloop invariant a == b ==> flag;\nloop invariant i == 0 ==> flag;\nloop invariant i == 1 ==> !flag;\nloop invariant i%2 == 0 ==> j%2 == 0;\nloop invariant i%2 != 0 ==> j%2 != 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= 1 is partially proven to be inductive.\nloop invariant 0 <= j <= 2 is partially proven to be inductive.\nloop invariant a >= b is partially proven to be inductive.\nloop invariant b >= i is preserved but not established.\nloop invariant b <= j is partially proven to be inductive.\nloop invariant a == (i * j) is partially proven to be inductive.\nloop invariant a == b ==> flag is partially proven to be inductive.\nloop invariant i == 0 ==> flag is partially proven to be inductive.\nloop invariant i == 1 ==> !flag is partially proven to be inductive.\nloop invariant i%2 == 0 ==> j%2 == 0 is preserved but not established.\nloop invariant i%2 != 0 ==> j%2 != 0 is partially proven to be inductive.\nAssertion a == b: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    /*@\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;\n//@ assert(a == b);\n}\n\n    }\n    return 0;\n}",
                    "checker_output_after_prune": false
                }
            ],
            "checker_output_for_combined_annotations": false,
            "checker_message_for_combined_annotations": "Annotation error on line 62: Assignment operators not allowed in annotations.",
            "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    /*@\nloop invariant i1: i >= 1;\nloop invariant i2: i <= 2;\nloop invariant i3: a >= 0;\nloop invariant i4: a <= i;\nloop invariant i5: b >= 0;\nloop invariant i6: b <= i;\nloop invariant i7: j >= 1;\nloop invariant i8: j <= i + 1;\nloop invariant i9: (a + b) == (j - i);\nloop invariant i10: (a + b) >= 0;\nloop invariant i11: (a + b) <= i;\nloop invariant i12: 0 <= a <= 100000;\nloop invariant i13: 0 <= b <= 100000;\nloop invariant i14: 1 <= j <= 100000;\nloop invariant i15: i%2 == 0 ==> j == i + 1;\nloop invariant i16: i%2 == 1 ==> j == i;\nloop invariant i17: i >= 0;\nloop invariant i18: a >= b;\nloop invariant i19: (i == 0) ==> (j == 1);\nloop invariant i20: (i == 1) ==> (j == 2);\nloop invariant i21: (i >= 2) ==> (j >= 3);\nloop invariant i22: i1;\nloop invariant i23: i2;\nloop invariant i24: 0 <= y <= 100000;\nloop invariant i25: x >= (1 + (y - 1) * y / 2);\nloop invariant i26: 0 <= a;\nloop invariant i27: 0 <= b;\nloop invariant i28: 1 <= j;\nloop invariant i29: i%2 == j%2;\nloop invariant i30: a <= b + (j - i);\nloop invariant i31: b <= a + (j - i);\nloop invariant i32: (i < 2) ==> (b <= a + 0);\nloop invariant i33: (i >= 2) ==> (b <= a + 2);\nloop invariant i34: (j%2 == 0) ==> (b <= a + j);\nloop invariant i35: (j%2 == 1) ==> (b <= a + j - 1);\nloop invariant i36: 0 <= j;\nloop invariant i37: 0 <= i;\nloop invariant i38: 0 <= a <= b;\nloop invariant i39: i%2 == 0 ==> j%2 == 1;\nloop invariant i40: i%2 == 1 ==> j%2 == 0;\nloop invariant i41: i = 0 || i = 1;\nloop invariant i42: j = 1;\nloop invariant i43: b <= a + j;\nloop invariant i44: a == b;\nloop invariant i45: 0 <= i <= 2;\nloop invariant i46: i%2 == 1 || i%2 == 0;\nloop invariant i47: 0 <= j <= 3;\nloop invariant i48: (i%2 == 0 && j%2 == 0) || (i%2 == 1 && j%2 == 1);\nloop invariant i49: i%2 == 1 || a <= b;\nloop invariant i50: a <= (b + 2);\nloop invariant i51: 0 <= a <= b <= 1;\nloop invariant i52: 0 <= b <= 1;\nloop invariant i53: 1 <= b <= 1;\nloop invariant i54: (i == 0) ==> j = 1;\nloop invariant i55: (i == 1) ==> j = 2;\nloop invariant i56: (i == 0) ==> (b = 0);\nloop invariant i57: (i == 1) ==> (b = 1);\nloop invariant i58: (i == 0) ==> (a = 0);\nloop invariant i59: (i == 1) ==> (a = 1);\nloop invariant i60: (i == 0) ==> (b = 1);\nloop invariant i61: (i == 1) ==> (b = 2);\nloop invariant i62: (i == 0) ==> (a = 1);\nloop invariant i63: (i == 1) ==> (a = 2);\nloop invariant i64: (i == 0) ==> (b = 3);\nloop invariant i65: (i == 1) ==> (b = 4);\nloop invariant i66: (i == 0) ==> (a = 3);\nloop invariant i67: (i == 1) ==> (a = 4);\nloop invariant i68: (i == 0) ==> (b = 5);\nloop invariant i69: (i == 1) ==> (b = 6);\nloop invariant i70: (i == 0) ==> (a = 5);\nloop invariant i71: (i == 1) ==> (a = 6);\nloop invariant i72: (i == 0) ==> (b = 7);\nloop invariant i73: (i == 1) ==> (b = 8);\nloop invariant i74: (i == 0) ==> (a = 7);\nloop invariant i75: (i == 1) ==> (a = 8);\nloop invariant i76: (i == 0) ==> (b = 9);\nloop invariant i77: (i == 1) ==> (b = 10);\nloop invariant i78: (i == 0) ==> (a = 9);\nloop invariant i79: (i == 1) ==> (a = 10);\nloop invariant i80: (i == 0) ==> (b = 11);\nloop invariant i81: (i == 1) ==> (b = 12);\nloop invariant i82: (i == 0) ==> (a = 11);\nloop invariant i83: (i == 1) ==> (a = 12);\nloop invariant i84: (i == 0) ==> (b = 13);\nloop invariant i85: (i == 1) ==> (b = 14);\nloop invariant i86: (i == 0) ==> (a = 13);\nloop invariant i87: (i == 1) ==> (a = 14);\nloop invariant i88: (i == 0) ==> (b = 15);\nloop invariant i89: (i == 1) ==> (b = 16);\nloop invariant i90: (i == 0) ==> (a = 15);\nloop invariant i91: (i == 1) ==> (a = 16);\nloop invariant i92: (i == 0) ==> (b = 17);\nloop invariant i93: (i == 1) ==> (b = 18);\nloop invariant i94: (i == 0) ==> (a = 17);\nloop invariant i95: (i == 1) ==> (a = 18);\nloop invariant i96: (i == 0) ==> (b = 19);\nloop invariant i97: (i == 1) ==> (b = 20);\nloop invariant i98: (i == 0) ==> (a = 19);\nloop invariant i99: (i == 1) ==> (a = 20);\nloop invariant i100: (i == 0) ==> (b = 21);\nloop invariant i101: (i == 1) ==> (b = 22);\nloop invariant i102: (i == 0) ==> (a = 21);\nloop invariant i103: (i == 1) ==> (a = 22);\nloop invariant i104: (i == 0) ==> (b = 23);\nloop invariant i105: (i == 1) ==> (b = 24);\nloop invariant i106: (i == 0) ==> (a = 23);\nloop invariant i107: (i == 1) ==> (a = 24);\nloop invariant i108: (i == 0) ==> (b = 25);\nloop invariant i109: (i == 1) ==> (b = 26);\nloop invariant i110: (i == 0) ==> (a = 25);\nloop invariant i111: (i == 1) ==> (a = 26);\nloop invariant i112: (i == 0) ==> (b = 27);\nloop invariant i113: (i == 1) ==> (b = 28);\nloop invariant i114: (i == 0) ==> (a = 27);\nloop invariant i115: (i == 1) ==> (a = 28);\nloop invariant i116: 0 <= i <= 2^32 - 1;\nloop invariant i117: 0 <= j <= 2^32 - 1;\nloop invariant i118: 0 <= a <= 2^32 - 1;\nloop invariant i119: 0 <= b <= 2^32 - 1;\nloop invariant i120: j - i >= 1;\nloop invariant i121: j % 2 == i % 2;\nloop invariant i122: (i == 0 && j == 1) || (i == 1 && j == 1);\nloop invariant i123: j == (i + 1);\nloop invariant i124: i == (j - 1);\nloop invariant i125: a == b ==> (i == 0 && j == 1) || (i == 1 && j == 1);\nloop invariant i126: a != b ==> !(i == 0 && j == 1) && !(i == 1 && j == 1);\nloop invariant i127: !(a == b) ==> !(i == 0 && j == 1) && !(i == 1 && j == 1);\nloop invariant i128: !(a != b) ==> (i == 0 && j == 1) || (i == 1 && j == 1);\nloop invariant i129: i % 2 == 0 ==> j % 2 == 0;\nloop invariant i130: i % 2 == 1 ==> j % 2 == 1;\nloop invariant i131: i % 2 == 0 ==> j == (i + 1);\nloop invariant i132: i % 2 == 1 ==> j == (i + 2);\nloop invariant i133: i % 2 == 0 ==> j == (i + 2);\nloop invariant i134: i % 2 == 1 ==> j == (i + 1);\nloop invariant i135: i % 2 == 0 ==> (i + 2) == j;\nloop invariant i136: i % 2 == 1 ==> (i + 1) == j;\nloop invariant i137: i % 2 == 0 ==> i == (j - 1);\nloop invariant i138: i % 2 == 1 ==> i == (j - 2);\nloop invariant i139: 0 <= i <= 1;\nloop invariant i140: 0 <= j <= 10;\nloop invariant i141: 0 <= a <= 10;\nloop invariant i142: 0 <= b <= 10;\nloop invariant i143: a >= i;\nloop invariant i144: a + b >= (i + j);\nloop invariant i145: a + b >= 0;\nloop invariant i146: a + b >= i;\nloop invariant i147: a + b >= j;\nloop invariant i148: a + b >= 1;\nloop invariant i149: a + b >= 2;\nloop invariant i150: a <= b;\nloop invariant i151: a <= 1;\nloop invariant i152: b <= 10;\nloop invariant i153: a <= j;\nloop invariant i154: b <= a;\nloop invariant i155: a <= 10;\nloop invariant i156: 0 <= j <= 2;\nloop invariant i157: (i%2 == 0 ==> j%2 == 0) || (i%2 != 0 ==> j%2 == 1);\nloop invariant i158: 0 <= j <= i <= a <= b;\nloop invariant i159: (i + j) % 2 == 0 ==> (j <= i + 1);\nloop invariant i160: 1 <= j <= 3;\nloop invariant i161: 0 <= a <= 1;\nloop invariant i162: 0 <= b <= 3;\nloop invariant i163: a == b ==> i == 1;\nloop invariant i164: a == b ==> j == 3;\nloop invariant i165: a == b ==> a == b;\nloop invariant i166: (flag ==> i = 1);\nloop invariant i167: ((flag ==> i = 1) ==> (j = 1));\nloop invariant i168: (flag ==> i = 0);\nloop invariant i169: ((flag ==> i = 0) ==> (j = 1));\nloop invariant i170: (flag ==> (a = b));\nloop invariant i171: ((flag ==> (a = b)) ==> (i = 1));\nloop invariant i172: ((flag ==> (a = b)) ==> (j = 1));\nloop invariant i173: b >= i;\nloop invariant i174: b <= j;\nloop invariant i175: a == (i * j);\nloop invariant i176: a == b ==> flag;\nloop invariant i177: i == 0 ==> flag;\nloop invariant i178: i == 1 ==> !flag;\nloop invariant i179: i%2 == 0 ==> j%2 == 0;\nloop invariant i180: i%2 != 0 ==> j%2 != 0;\n*/\nwhile (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;\n//@ assert(a == b);\n}\n\n    }\n    return 0;\n}",
            "combined_annotation_num_solver_calls": 111,
            "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    /*@\n\n\nloop invariant i3: a >= 0;\n\nloop invariant i5: b >= 0;\n\n\n\n\nloop invariant i10: (a + b) >= 0;\n\n\n\n\n\n\nloop invariant i17: i >= 0;\n\n\n\n\n\n\n\n\nloop invariant i26: 0 <= a;\nloop invariant i27: 0 <= b;\n\n\n\n\n\n\n\n\nloop invariant i36: 0 <= j;\nloop invariant i37: 0 <= i;\n\n\n\n\n\n\n\n\nloop invariant i46: i%2 == 1 || i%2 == 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i145: a + b >= 0;\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i157: (i%2 == 0 ==> j%2 == 0) || (i%2 != 0 ==> j%2 == 1);\n\n\n\n\n\n\n\nloop invariant i165: a == b ==> a == b;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;\n//@ assert(a == b);\n}\n\n    }\n    return 0;\n}",
            "checker_output_after_prune": false
        },
        {
            "file": "../dataset/loop_invariants/accelerating_invariant_generation/invgen/split.c",
            "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n  int k = 100;\n  int b;\n  int i;\n  int j;\n  int n;\n  i = j;\n  for( n = 0 ; n < 2*k ; n++ ) {\n        \n    if(b) {\n      i++;\n    } else {\n      j++;\n    }\n    b = !b;\n  }\n  {;\n//@ assert(i == j);\n}\n\n}",
            "success": false,
            "annotation_blocks": [
                "```\n/*@\nloop invariant 0 <= j <= k;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i + j >= n;\nloop invariant i + j <= 2*k;\nloop invariant i + j == n;\nloop invariant i >= j;\nloop invariant j >= i - 2*k + n;\nloop invariant i >= j - k;\nloop invariant j >= i - k;\nloop invariant i >= j - n;\nloop invariant j >= i - n;\nloop invariant i >= j - 2*k;\nloop invariant j >= i - 2*k + 2*n;\nloop invariant i >= j - 2*k + 2*n;\nloop invariant j >= i - 2*k + 2*n;\nloop invariant i >= j - 2*k + 2*n;\nloop invariant j >= i - 2*k + 2*n;\nloop invariant i >= j - 2*k + 2*n;\nloop invariant j >= i - 2*k + 2*n;\nloop invariant i >= j - 2*k + 2*n;\nloop invariant j >= i - 2*k + 2*n;\nloop invariant i >= j - 2*k + 2*n;\nloop invariant j >= i - 2*k + 2*n;\nloop invariant i >= j - 2*k + 2*n;\nloop invariant j >= i - 2*k + 2*n;\nloop invariant i >= j - 2*k + 2*n;\nloop invariant j >= i - 2*k + 2*n;\nloop invariant i >= j - 2*k + 2*n;\nloop invariant j >= i - 2*k + 2*n;\nloop invariant i >= j - 2*k + 2*n;\nloop invariant j >= i - 2*k + 2*n;\nloop invariant i >= j - 2*k + 2*n;\nloop invariant j >= i - 2*k + 2*n;\nloop invariant i >= j - 2*k + 2*n;\nloop invariant j >= i - 2*k + 2*n;\nloop invariant i >= j - 2*k + 2*n;\nloop invariant j >= i - 2*k + 2*n;\nloop invariant i >= j - 2*k + 2*n;\nloop invariant j >= i - 2*k + 2*n;\nloop invariant i >= j - 2*k + 2*n;\nloop invariant j >= i - 2*k + 2*n;\nloop invariant i >= j - 2*k + 2*n;\nloop invariant j >= i - 2*k + 2*n;\nloop invariant i >= j - 2*k + 2*n;\nloop invariant j >= i - 2*k + 2*n;\nloop invariant i >= j - 2*k + 2*n;\nloop invariant j >= i - 2*k + 2*n;\nloop invariant i >= j - 2*k + 2*n;\nloop invariant j >= i - 2*k + 2*n;\nloop invariant i >= j - 2*k + 2*n;\nloop invariant j >= i - 2*k + 2*n;\nloop invariant i >= j - 2*k + 2*n;\nloop invariant j >= i - 2*k + 2*n;\nloop invariant i >= j - 2*k + 2*n;\nloop invariant j >= i - 2*k + 2*n;\nloop invariant i >= j - 2*k + 2*n;\nloop invariant j >= i - 2*k + 2*n;\nloop invariant i >= j - 2*k + 2*n;\nloop invariant j >= i - 2*k + 2*n;\nloop invariant i >= j - 2*k + 2*n;\nloop invariant j >= i - 2*k + 2*n;\nloop invariant i >= j - 2*k + 2*n;\nloop invariant j >= i - 2*k + 2*n;\nloop invariant i >= j - 2*k + 2*n;\nloop invariant j >= i - 2*k + 2*n;\nloop invariant i >= j - 2*k + 2*n;\nloop invariant j >= i - 2*k + 2*n;\nloop invariant i >= j - 2*k + 2*n;\nloop invariant j >= i - 2*k + 2*n;\nloop invariant i >= j - 2*k + 2*n;\nloop invariant j >= i - 2*k + 2*n;\nloop invariant i >= j - 2*k + 2*n;\nloop invariant j >= i - 2*k + 2*n;\nloop invariant i >= j - 2*k + 2*n;\nloop invariant j >= i - 2*k + 2*n;\n*/\n```",
                "```\n/*@\nloop invariant 1 <= i <= 100;\nloop invariant 1 <= j <= 100;\nloop invariant i <= j;\nloop invariant i + j <= 200;\nloop invariant i + j >= 100;\nloop invariant n <= 200;\nloop invariant n >= 0;\nloop invariant b == (n % 2 == 0);\nloop invariant i + j == 2 * n;\nloop invariant i + j <= 200;\nloop invariant i + j >= 100;\nloop invariant i <= j;\nloop invariant i + j <= 200;\nloop invariant i + j >= 100;\nloop invariant b == (n % 2 == 0);\nloop invariant i + j == 2 * n;\nloop invariant i + j <= 200;\nloop invariant i + j >= 100;\nloop invariant i <= j;\nloop invariant i + j <= 200;\nloop invariant i + j >= 100;\nloop invariant b == (n % 2 == 0);\nloop invariant i + j == 2 * n;\nloop invariant i + j <= 200;\nloop invariant i + j >= 100;\nloop invariant i <= j;\nloop invariant i + j <= 200;\nloop invariant i + j >= 100;\nloop invariant b == (n % 2 == 0);\nloop invariant i + j == 2 * n;\nloop invariant i + j <= 200;\nloop invariant i + j >= 100;\nloop invariant i <= j;\nloop invariant i + j <= 200;\nloop invariant i + j >= 100;\nloop invariant b == (n % 2 == 0);\nloop invariant i + j == 2 * n;\nloop invariant i + j <= 200;\nloop invariant i + j >= 100;\nloop invariant i <= j;\nloop invariant i + j <= 200;\nloop invariant i + j >= 100;\nloop invariant b == (n % 2 == 0);\nloop invariant i + j == 2 * n;\nloop invariant i + j <= 200;\nloop invariant i + j >= 100;\nloop invariant i <= j;\nloop invariant i + j <= 200;\nloop invariant i + j >= 100;\nloop invariant b == (n % 2 == 0);\nloop invariant i + j == 2 * n;\nloop invariant i + j <= 200;\nloop invariant i + j >= 100;\nloop invariant i <= j;\nloop invariant i + j <= 200;\nloop invariant i + j >= 100;\nloop invariant b == (n % 2 == 0);\nloop invariant i + j == 2 * n;\nloop invariant i + j <= 200;\nloop invariant i + j >= 100;\nloop invariant i <= j;\nloop invariant i + j <= 200;\nloop invariant i + j >= 100;\nloop invariant b == (n % 2 == 0);\nloop invariant i + j == 2 * n;\nloop invariant i + j <= 200;\nloop invariant i + j >= 100;\nloop invariant i <= j;\nloop invariant i + j <= 200;\nloop invariant i + j >= 100;\nloop invariant b == (n % 2 == 0);\nloop invariant i + j == 2 * n;\nloop invariant i + j <= 200;\nloop invariant i + j >= 100;\nloop invariant i <= j;\nloop invariant i + j <= 200;\nloop invariant i + j >= 100;\nloop invariant b == (n % 2 == 0);\nloop invariant i + j == 2 * n;\nloop invariant i + j <= 200;\nloop invariant i + j >= 100;\nloop invariant i <= j;\nloop invariant i + j <= 200;\nloop invariant i + j >= 100;\nloop invariant b == (n % 2 == 0);\nloop invariant i + j == 2 * n;\nloop invariant i + j <= 200;\nloop invariant i + j >= 100;\nloop invariant i <= j;\nloop invariant i + j <= 200;\nloop invariant i + j >= 100;\nloop invariant b == (n % 2 == 0);\nloop invariant i + j == 2 * n;\nloop invariant i + j <= 200;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= 50;\nloop invariant 0 <= j <= 50;\nloop invariant i + j == n;\nloop invariant b == (n % 2 == 0);\nloop invariant k == 100;\nloop invariant i == j;\nloop invariant i + j == 2*k;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i && i <= k;\nloop invariant 0 <= j && j <= k;\nloop invariant k == j + i;\nloop invariant i <= n && n <= 2*k;\nloop invariant j <= n && n <= 2*k;\nloop invariant n % 2 == 0 ==> i == n/2;\nloop invariant n % 2 != 0 ==> j == n/2;\nloop invariant n % 2 == 0 ==> b == 0;\nloop invariant n % 2 != 0 ==> b == 1;\nloop invariant n % 2 == 0 ==> i == j + n/2;\nloop invariant n % 2 != 0 ==> i == j + n/2 + 1;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant n % 2 == 0 ==> i == j + n/2;\nloop invariant n % 2 != 0 ==> i == j + n/2 + 1;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= k, 0 <= j <= k;\nloop invariant i + j = n;\nloop invariant i == j ==> b == !b;\nloop invariant b == !b ==> i == j;\nloop invariant b == !b ==> i + j == n;\nloop invariant b == !b ==> i + j == 2*k;\nloop invariant b == !b ==> i == j == k;\nloop invariant b == !b ==> i == j == k ==> i + j == 2*k;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= 100;\nloop invariant 0 <= j <= 100;\nloop invariant i + j == k;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant i + j == k;\nloop invariant i == j ==> b == 1;\nloop invariant i != j ==> b == 0;\nloop invariant i >= j ==> b == 1;\nloop invariant i <= j ==> b == 0;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i >= j ==> b == 1;\nloop invariant i <= j ==> b == 0;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i >= j ==> b == 1;\nloop invariant i <= j ==> b == 0;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i >= j ==> b == 1;\nloop invariant i <= j ==> b == 0;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i >= j ==> b == 1;\nloop invariant i <= j ==> b == 0;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i >= j ==> b == 1;\nloop invariant i <= j ==> b == 0;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i >= j ==> b == 1;\nloop invariant i <= j ==> b == 0;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i >= j ==> b == 1;\nloop invariant i <= j ==> b == 0;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i >= j ==> b == 1;\nloop invariant i <= j ==> b == 0;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i >= j ==> b == 1;\nloop invariant i <= j ==> b == 0;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i >= j ==> b == 1;\nloop invariant i <= j ==> b == 0;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i >= j ==> b == 1;\nloop invariant i <= j ==> b == 0;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i >= j ==> b == 1;\nloop invariant i <= j ==> b == 0;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i >= j ==> b == 1;\nloop invariant i <= j ==> b == 0;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i >= j ==> b == 1;\nloop invariant i <= j ==> b == 0;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i >= j ==> b == 1;\nloop invariant i <= j ==> b == 0;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i >= j ==> b == 1;\nloop invariant i <= j ==> b == 0;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i >= j ==> b == 1;\nloop invariant i <= j ==> b == 0;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i >= j ==> b == 1;\nloop invariant i <= j ==> b == 0;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i >= j ==> b == 1;\nloop invariant i <= j ==> b == 0;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i >= j ==> b == 1;\n*/\n```",
                "```\n/*@\nloop invariant 1 <= k <= 100;\nloop invariant 0 <= n <= 2*k;\nloop invariant n % 2 == 0 ==> b == 0;\nloop invariant n % 2 == 1 ==> b == 1;\nloop invariant i == (j + (n / 2));\nloop invariant j == (i - (n / 2));\n*/\n```",
                "```\n/*@\nloop invariant ( 0 <= j <= k ==> i == j ) ==> i == j;\nloop invariant ( j > k ==> j > i ) ==> j > i;\nloop invariant ( j < k ==> i - j < 2*k ) ==> i - j < 2*k;\nloop invariant ( k - j > 0 ==> i - j < 2*k ) ==> i - j < 2*k;\nloop invariant ( b ==> i == j + 1 ) ==> i == j + 1;\nloop invariant ( !b ==> j == i + 1 ) ==> j == i + 1;\nloop invariant ( b ==> i + k - j > k ) ==> i + k - j > k;\nloop invariant ( !b ==> j + k - i > k ) ==> j + k - i > k;\nloop invariant ( b ==> i - j < 2*k ) ==> i - j < 2*k;\nloop invariant ( !b ==> i - j < 2*k ) ==> i - j < 2*k;\nloop invariant ( i + j == 2*k ) ==> i + j == 2*k;\nloop invariant ( i + j == 2*k ) ==> n == 2*k;\nloop invariant ( n == 2*k ) ==> 2*k == 2*k;\nloop invariant ( 2*k == 2*k ) ==> n == 2*k;\nloop invariant ( n == 2*k ) ==> n == 2*k;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\n*/\n```",
                "```\n/*@\nloop invariant 1 <= i <= 100;\nloop invariant 1 <= j <= 100;\nloop invariant i == j;\nloop invariant n == 2*k;\nloop invariant b == !b;\nloop invariant n == 2*k;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= k;\nloop invariant 0 <= j <= k;\nloop invariant i + j == n;\nloop invariant (n % 2) == (b ? 1 : 0);\nloop invariant (n >= 0 && n < 2*k);\nloop invariant (k >= 0);\nloop invariant (i >= 0 && i <= k);\nloop invariant (j >= 0 && j <= k);\nloop invariant (i + j == n);\nloop invariant (n % 2) == (b ? 1 : 0);\nloop invariant (n >= 0 && n < 2*k);\nloop invariant (k >= 0);\nloop invariant (i >= 0 && i <= k);\nloop invariant (j >= 0 && j <= k);\nloop invariant (i + j == n);\nloop invariant (n % 2) == (b ? 1 : 0);\nloop invariant (n >= 0 && n < 2*k);\nloop invariant (k >= 0);\nloop invariant (i >= 0 && i <= k);\nloop invariant (j >= 0 && j <= k);\nloop invariant (i + j == n);\nloop invariant (n % 2) == (b ? 1 : 0);\nloop invariant (n >= 0 && n < 2*k);\nloop invariant (k >= 0);\nloop invariant (i >= 0 && i <= k);\nloop invariant (j >= 0 && j <= k);\nloop invariant (i + j == n);\nloop invariant (n % 2) == (b ? 1 : 0);\nloop invariant (n >= 0 && n < 2*k);\nloop invariant (k >= 0);\nloop invariant (i >= 0 && i <= k);\nloop invariant (j >= 0 && j <= k);\nloop invariant (i + j == n);\nloop invariant (n % 2) == (b ? 1 : 0);\nloop invariant (n >= 0 && n < 2*k);\nloop invariant (k >= 0);\nloop invariant (i >= 0 && i <= k);\nloop invariant (j >= 0 && j <= k);\nloop invariant (i + j == n);\nloop invariant (n % 2) == (b ? 1 : 0);\nloop invariant (n >= 0 && n < 2*k);\nloop invariant (k >= 0);\nloop invariant (i >= 0 && i <= k);\nloop invariant (j >= 0 && j <= k);\nloop invariant (i + j == n);\nloop invariant (n % 2) == (b ? 1 : 0);\nloop invariant (n >= 0 && n < 2*k);\nloop invariant (k >= 0);\nloop invariant (i >= 0 && i <= k);\nloop invariant (j >= 0 && j <= k);\nloop invariant (i + j == n);\nloop invariant (n % 2) == (b ? 1 : 0);\nloop invariant (n >= 0 && n < 2*k);\nloop invariant (k >= 0);\nloop invariant (i >= 0 && i <= k);\nloop invariant (j >= 0 && j <= k);\nloop invariant (i + j == n);\nloop invariant (n % 2) == (b ? 1 : 0);\nloop invariant (n >= 0 && n < 2*k);\nloop invariant (k >= 0);\nloop invariant (i >= 0 && i <= k);\nloop invariant (j >= 0 && j <= k);\nloop invariant (i + j == n);\nloop invariant (n % 2) == (b ? 1 : 0);\nloop invariant (n >= 0 && n < 2*k);\nloop invariant (k >= 0);\nloop invariant (i >= 0 && i <= k);\nloop invariant (j >= 0 && j <= k);\nloop invariant (i + j == n);\nloop invariant (n % 2) == (b ? 1 : 0);\nloop invariant (n >= 0 && n < 2*k);\nloop invariant (k >= 0);\nloop invariant (i >= 0 && i <= k);\nloop invariant (j >= 0 && j <= k);\nloop invariant (i + j == n);\nloop invariant (n % 2) == (b ? 1 : 0);\nloop invariant (n >= 0 && n < 2*k);\nloop invariant (k >= 0);\nloop invariant (i >= 0 && i <= k);\nloop invariant (j >= 0 && j <= k);\nloop invariant (i + j == n);\nloop invariant (n % 2) == (b ? 1 : 0);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= 100; loop invariant 0 <= j <= 100; loop invariant i == j; loop invariant i + j == 2 * k; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200;\n*/\n```",
                "```\n/*@\nloop invariant 1 <= i <= k;\nloop invariant 1 <= j <= k;\nloop invariant i + j = n;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= j <= k;\nloop invariant 0 <= i <= k;\nloop invariant i + j == n;\nloop invariant !b ==> i >= j;\nloop invariant b ==> i <= j;\nloop invariant (n == 0) ==> (i == j);\nloop invariant (n == 2*k) ==> (i == j);\nloop invariant (n == 0) ==> (b == 1);\nloop invariant (n == 2*k) ==> (b == 0);\nloop invariant (n == 0) ==> (i == j);\nloop invariant (n == 2*k) ==> (i == j);\nloop invariant 0 <= j <= k;\nloop invariant 0 <= i <= k;\nloop invariant i + j == n;\nloop invariant !b ==> i >= j;\nloop invariant b ==> i <= j;\nloop invariant (n == 0) ==> (i == j);\nloop invariant (n == 2*k) ==> (i == j);\nloop invariant (n == 0) ==> (b == 1);\nloop invariant (n == 2*k) ==> (b == 0);\nloop invariant (n == 0) ==> (i == j);\nloop invariant (n == 2*k) ==> (i == j);\nloop invariant 0 <= j <= k;\nloop invariant 0 <= i <= k;\nloop invariant i + j == n;\nloop invariant !b ==> i >= j;\nloop invariant b ==> i <= j;\nloop invariant (n == 0) ==> (i == j);\nloop invariant (n == 2*k) ==> (i == j);\nloop invariant (n == 0) ==> (b == 1);\nloop invariant (n == 2*k) ==> (b == 0);\nloop invariant (n == 0) ==> (i == j);\nloop invariant (n == 2*k) ==> (i == j);\nloop invariant 0 <= j <= k;\nloop invariant 0 <= i <= k;\nloop invariant i + j == n;\nloop invariant !b ==> i >= j;\nloop invariant b ==> i <= j;\nloop invariant (n == 0) ==> (i == j);\nloop invariant (n == 2*k) ==> (i == j);\nloop invariant (n == 0) ==> (b == 1);\nloop invariant (n == 2*k) ==> (b == 0);\nloop invariant (n == 0) ==> (i == j);\nloop invariant (n == 2*k) ==> (i == j);\nloop invariant 0 <= j <= k;\nloop invariant 0 <= i <= k;\nloop invariant i + j == n;\nloop invariant !b ==> i >= j;\nloop invariant b ==> i <= j;\nloop invariant (n == 0) ==> (i == j);\nloop invariant (n == 2*k) ==> (i == j);\nloop invariant (n == 0) ==> (b == 1);\nloop invariant (n == 2*k) ==> (b == 0);\nloop invariant (n == 0) ==> (i == j);\nloop invariant (n == 2*k) ==> (i == j);\nloop invariant 0 <= j <= k;\nloop invariant 0 <= i <= k;\nloop invariant i + j == n;\nloop invariant !b ==> i >= j;\nloop invariant b ==> i <= j;\nloop invariant (n == 0) ==> (i == j);\nloop invariant (n == 2*k) ==> (i == j);\nloop invariant (n == 0) ==> (b == 1);\nloop invariant (n == 2*k) ==> (b == 0);\nloop invariant (n == 0) ==> (i == j);\nloop invariant (n == 2*k) ==> (i == j);\nloop invariant 0 <= j <= k;\nloop invariant 0 <= i <= k;\nloop invariant i + j == n;\nloop invariant !b ==> i >= j;\nloop invariant b ==> i <= j;\nloop invariant (n == 0) ==> (i == j);\nloop invariant (n == 2*k) ==> (i == j);\nloop invariant (n == 0) ==> (b == 1);\nloop invariant (n == 2*k) ==> (b == 0);\nloop invariant (n == 0) ==> (i == j);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= 100;\nloop invariant 0 <= j <= 100;\nloop invariant i == j;\nloop invariant 0 <= n <= 200;\nloop invariant n % 2 == 0;\nloop invariant b == !(n % 2);\nloop invariant i == (n / 2);\nloop invariant j == (n / 2);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= b <= 1;\nloop invariant 0 <= i <= 2*k;\nloop invariant 0 <= j <= 2*k;\nloop invariant 0 <= n <= 2*k;\nloop invariant i + j == n;\nloop invariant i >= j;\nloop invariant i + j == n;\nloop invariant b ==> i == j;\nloop invariant !b ==> i == j;\nloop invariant i == j ==> i + j == n;\nloop invariant !b ==> i == j;\nloop invariant i == j ==> i + j == n;\nloop invariant b ==> i == j;\nloop invariant i == j ==> i + j == n;\nloop invariant !b ==> i == j;\nloop invariant i == j ==> i + j == n;\nloop invariant b ==> i == j;\nloop invariant i == j ==> i + j == n;\nloop invariant !b ==> i == j;\nloop invariant i == j ==> i + j == n;\nloop invariant b ==> i == j;\nloop invariant i == j ==> i + j == n;\nloop invariant !b ==> i == j;\nloop invariant i == j ==> i + j == n;\nloop invariant b ==> i == j;\nloop invariant i == j ==> i + j == n;\nloop invariant !b ==> i == j;\nloop invariant i == j ==> i + j == n;\nloop invariant b ==> i == j;\nloop invariant !b ==> i == j;\nloop invariant i == j ==> i + j == n;\nloop invariant b ==> i == j;\nloop invariant !b ==> i == j;\nloop invariant i == j ==> i + j == n;\nloop invariant b ==> i == j;\nloop invariant !b ==> i == j;\nloop invariant i == j ==> i + j == n;\nloop invariant b ==> i == j;\nloop invariant !b ==> i == j;\nloop invariant i == j ==> i + j == n;\nloop invariant b ==> i == j;\nloop invariant !b ==> i == j;\nloop invariant i == j ==> i + j == n;\nloop invariant b ==> i == j;\nloop invariant !b ==> i == j;\nloop invariant i == j ==> i + j == n;\nloop invariant b ==> i == j;\nloop invariant !b ==> i == j;\nloop invariant i == j ==> i + j == n;\nloop invariant b ==> i == j;\nloop invariant !b ==> i == j;\nloop invariant i == j ==> i + j == n;\nloop invariant b ==> i == j;\nloop invariant !b ==> i == j;\nloop invariant i == j ==> i + j == n;\nloop invariant b ==> i == j;\nloop invariant !b ==> i == j;\nloop invariant i == j ==> i + j == n;\nloop invariant b ==> i == j;\nloop invariant !b ==> i == j;\nloop invariant i == j ==> i + j == n;\nloop invariant b ==> i == j;\nloop invariant !b ==> i == j;\nloop invariant i == j ==> i + j == n;\nloop invariant b ==> i == j;\nloop invariant !b ==> i == j;\nloop invariant i == j ==> i + j == n;\nloop invariant b ==> i == j;\nloop invariant !b ==> i == j;\nloop invariant i == j ==> i + j == n;\nloop invariant b ==> i == j;\nloop invariant !b ==> i == j;\nloop invariant i == j ==> i + j == n;\nloop invariant b ==> i == j;\nloop invariant !b ==> i == j;\nloop invariant i == j ==> i + j == n;\nloop invariant b ==> i == j;\nloop invariant !b ==> i == j;\nloop invariant i == j ==> i + j == n;\nloop invariant b ==> i == j;\nloop invariant !b ==> i == j;\nloop invariant i == j ==> i + j == n;\nloop invariant b ==> i == j;\nloop invariant !b ==> i == j;\nloop invariant i == j ==> i + j == n;\nloop invariant b ==> i == j;\nloop invariant !b ==> i == j;\nloop invariant i == j ==> i + j == n;\nloop invariant b ==> i == j;\nloop invariant !b ==> i == j;\nloop invariant i == j ==> i + j == n;\nloop invariant b ==> i == j;\nloop invariant !b ==> i == j;\nloop invariant i == j ==> i + j == n;\nloop invariant b ==> i == j;\nloop invariant !b ==> i == j;\nloop invariant i == j ==> i + j == n;\nloop invariant b ==> i == j;\nloop invariant !b ==> i == j;\nloop invariant i == j ==> i + j == n;\nloop invariant b ==> i == j;\nloop invariant !b ==> i == j;\n*/\n```"
            ],
            "completions": [
                {
                    "num_solver_calls": 6,
                    "annotations": "```\n/*@\nloop invariant 0 <= j <= k;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i + j >= n;\nloop invariant i + j <= 2*k;\nloop invariant i + j == n;\nloop invariant i >= j;\nloop invariant j >= i - 2*k + n;\nloop invariant i >= j - k;\nloop invariant j >= i - k;\nloop invariant i >= j - n;\nloop invariant j >= i - n;\nloop invariant i >= j - 2*k;\nloop invariant j >= i - 2*k + 2*n;\nloop invariant i >= j - 2*k + 2*n;\nloop invariant j >= i - 2*k + 2*n;\nloop invariant i >= j - 2*k + 2*n;\nloop invariant j >= i - 2*k + 2*n;\nloop invariant i >= j - 2*k + 2*n;\nloop invariant j >= i - 2*k + 2*n;\nloop invariant i >= j - 2*k + 2*n;\nloop invariant j >= i - 2*k + 2*n;\nloop invariant i >= j - 2*k + 2*n;\nloop invariant j >= i - 2*k + 2*n;\nloop invariant i >= j - 2*k + 2*n;\nloop invariant j >= i - 2*k + 2*n;\nloop invariant i >= j - 2*k + 2*n;\nloop invariant j >= i - 2*k + 2*n;\nloop invariant i >= j - 2*k + 2*n;\nloop invariant j >= i - 2*k + 2*n;\nloop invariant i >= j - 2*k + 2*n;\nloop invariant j >= i - 2*k + 2*n;\nloop invariant i >= j - 2*k + 2*n;\nloop invariant j >= i - 2*k + 2*n;\nloop invariant i >= j - 2*k + 2*n;\nloop invariant j >= i - 2*k + 2*n;\nloop invariant i >= j - 2*k + 2*n;\nloop invariant j >= i - 2*k + 2*n;\nloop invariant i >= j - 2*k + 2*n;\nloop invariant j >= i - 2*k + 2*n;\nloop invariant i >= j - 2*k + 2*n;\nloop invariant j >= i - 2*k + 2*n;\nloop invariant i >= j - 2*k + 2*n;\nloop invariant j >= i - 2*k + 2*n;\nloop invariant i >= j - 2*k + 2*n;\nloop invariant j >= i - 2*k + 2*n;\nloop invariant i >= j - 2*k + 2*n;\nloop invariant j >= i - 2*k + 2*n;\nloop invariant i >= j - 2*k + 2*n;\nloop invariant j >= i - 2*k + 2*n;\nloop invariant i >= j - 2*k + 2*n;\nloop invariant j >= i - 2*k + 2*n;\nloop invariant i >= j - 2*k + 2*n;\nloop invariant j >= i - 2*k + 2*n;\nloop invariant i >= j - 2*k + 2*n;\nloop invariant j >= i - 2*k + 2*n;\nloop invariant i >= j - 2*k + 2*n;\nloop invariant j >= i - 2*k + 2*n;\nloop invariant i >= j - 2*k + 2*n;\nloop invariant j >= i - 2*k + 2*n;\nloop invariant i >= j - 2*k + 2*n;\nloop invariant j >= i - 2*k + 2*n;\nloop invariant i >= j - 2*k + 2*n;\nloop invariant j >= i - 2*k + 2*n;\nloop invariant i >= j - 2*k + 2*n;\nloop invariant j >= i - 2*k + 2*n;\nloop invariant i >= j - 2*k + 2*n;\nloop invariant j >= i - 2*k + 2*n;\nloop invariant i >= j - 2*k + 2*n;\nloop invariant j >= i - 2*k + 2*n;\nloop invariant i >= j - 2*k + 2*n;\nloop invariant j >= i - 2*k + 2*n;\nloop invariant i >= j - 2*k + 2*n;\nloop invariant j >= i - 2*k + 2*n;\nloop invariant i >= j - 2*k + 2*n;\nloop invariant j >= i - 2*k + 2*n;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= j <= k is preserved but not established.\nloop invariant i >= 0 is partially proven to be inductive.\nloop invariant j >= 0 is partially proven to be inductive.\nloop invariant i + j >= n is partially proven to be inductive.\nloop invariant i + j <= 2*k is partially proven to be inductive.\nloop invariant i + j == n is preserved but not established.\nloop invariant i >= j is established but not preserved.\nloop invariant j >= i - 2*k + n is partially proven to be inductive.\nloop invariant i >= j - k is partially proven to be inductive.\nloop invariant j >= i - k is partially proven to be inductive.\nloop invariant i >= j - n is partially proven to be inductive.\nloop invariant j >= i - n is partially proven to be inductive.\nloop invariant i >= j - 2*k is partially proven to be inductive.\nloop invariant j >= i - 2*k + 2*n is established but not preserved.\nloop invariant i >= j - 2*k + 2*n is partially proven to be inductive.\nAssertion i == j: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n  int k = 100;\n  int b;\n  int i;\n  int j;\n  int n;\n  i = j;\n  /*@\n\n\n\n\n\n\n\n\n\n\nloop invariant i11: i >= j - n;\nloop invariant i12: j >= i - n;\nloop invariant i13: i >= j - 2*k;\n\n\n*/\nfor( n = 0 ; n < 2*k ; n++ ) {\n        \n    if(b) {\n      i++;\n    } else {\n      j++;\n    }\n    b = !b;\n  }\n  {;\n//@ assert(i == j);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 1 <= i <= 100;\nloop invariant 1 <= j <= 100;\nloop invariant i <= j;\nloop invariant i + j <= 200;\nloop invariant i + j >= 100;\nloop invariant n <= 200;\nloop invariant n >= 0;\nloop invariant b == (n % 2 == 0);\nloop invariant i + j == 2 * n;\nloop invariant i + j <= 200;\nloop invariant i + j >= 100;\nloop invariant i <= j;\nloop invariant i + j <= 200;\nloop invariant i + j >= 100;\nloop invariant b == (n % 2 == 0);\nloop invariant i + j == 2 * n;\nloop invariant i + j <= 200;\nloop invariant i + j >= 100;\nloop invariant i <= j;\nloop invariant i + j <= 200;\nloop invariant i + j >= 100;\nloop invariant b == (n % 2 == 0);\nloop invariant i + j == 2 * n;\nloop invariant i + j <= 200;\nloop invariant i + j >= 100;\nloop invariant i <= j;\nloop invariant i + j <= 200;\nloop invariant i + j >= 100;\nloop invariant b == (n % 2 == 0);\nloop invariant i + j == 2 * n;\nloop invariant i + j <= 200;\nloop invariant i + j >= 100;\nloop invariant i <= j;\nloop invariant i + j <= 200;\nloop invariant i + j >= 100;\nloop invariant b == (n % 2 == 0);\nloop invariant i + j == 2 * n;\nloop invariant i + j <= 200;\nloop invariant i + j >= 100;\nloop invariant i <= j;\nloop invariant i + j <= 200;\nloop invariant i + j >= 100;\nloop invariant b == (n % 2 == 0);\nloop invariant i + j == 2 * n;\nloop invariant i + j <= 200;\nloop invariant i + j >= 100;\nloop invariant i <= j;\nloop invariant i + j <= 200;\nloop invariant i + j >= 100;\nloop invariant b == (n % 2 == 0);\nloop invariant i + j == 2 * n;\nloop invariant i + j <= 200;\nloop invariant i + j >= 100;\nloop invariant i <= j;\nloop invariant i + j <= 200;\nloop invariant i + j >= 100;\nloop invariant b == (n % 2 == 0);\nloop invariant i + j == 2 * n;\nloop invariant i + j <= 200;\nloop invariant i + j >= 100;\nloop invariant i <= j;\nloop invariant i + j <= 200;\nloop invariant i + j >= 100;\nloop invariant b == (n % 2 == 0);\nloop invariant i + j == 2 * n;\nloop invariant i + j <= 200;\nloop invariant i + j >= 100;\nloop invariant i <= j;\nloop invariant i + j <= 200;\nloop invariant i + j >= 100;\nloop invariant b == (n % 2 == 0);\nloop invariant i + j == 2 * n;\nloop invariant i + j <= 200;\nloop invariant i + j >= 100;\nloop invariant i <= j;\nloop invariant i + j <= 200;\nloop invariant i + j >= 100;\nloop invariant b == (n % 2 == 0);\nloop invariant i + j == 2 * n;\nloop invariant i + j <= 200;\nloop invariant i + j >= 100;\nloop invariant i <= j;\nloop invariant i + j <= 200;\nloop invariant i + j >= 100;\nloop invariant b == (n % 2 == 0);\nloop invariant i + j == 2 * n;\nloop invariant i + j <= 200;\nloop invariant i + j >= 100;\nloop invariant i <= j;\nloop invariant i + j <= 200;\nloop invariant i + j >= 100;\nloop invariant b == (n % 2 == 0);\nloop invariant i + j == 2 * n;\nloop invariant i + j <= 200;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= i <= 100 is preserved but not established.\nloop invariant 1 <= j <= 100 is partially proven to be inductive.\nloop invariant i <= j is partially proven to be inductive.\nloop invariant i + j <= 200 is partially proven to be inductive.\nloop invariant i + j >= 100 is preserved but not established.\nloop invariant n <= 200 is partially proven to be inductive.\nloop invariant n >= 0 is partially proven to be inductive.\nloop invariant b == (n % 2 == 0) is preserved but not established.\nloop invariant i + j == 2 * n is preserved but not established.\nAssertion i == j: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n  int k = 100;\n  int b;\n  int i;\n  int j;\n  int n;\n  i = j;\n  /*@\n\n\n\n\n\n\nloop invariant i7: n >= 0;\n\n\n*/\nfor( n = 0 ; n < 2*k ; n++ ) {\n        \n    if(b) {\n      i++;\n    } else {\n      j++;\n    }\n    b = !b;\n  }\n  {;\n//@ assert(i == j);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= 50;\nloop invariant 0 <= j <= 50;\nloop invariant i + j == n;\nloop invariant b == (n % 2 == 0);\nloop invariant k == 100;\nloop invariant i == j;\nloop invariant i + j == 2*k;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= 50 is preserved but not established.\nloop invariant 0 <= j <= 50 is partially proven to be inductive.\nloop invariant i + j == n is preserved but not established.\nloop invariant b == (n % 2 == 0) is preserved but not established.\nloop invariant k == 100 is partially proven to be inductive.\nloop invariant i == j is partially proven to be inductive.\nloop invariant i + j == 2*k is preserved but not established.\nAssertion i == j: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n  int k = 100;\n  int b;\n  int i;\n  int j;\n  int n;\n  i = j;\n  /*@\n\n\n\n\nloop invariant i5: k == 100;\n\n\n*/\nfor( n = 0 ; n < 2*k ; n++ ) {\n        \n    if(b) {\n      i++;\n    } else {\n      j++;\n    }\n    b = !b;\n  }\n  {;\n//@ assert(i == j);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= i && i <= k;\nloop invariant 0 <= j && j <= k;\nloop invariant k == j + i;\nloop invariant i <= n && n <= 2*k;\nloop invariant j <= n && n <= 2*k;\nloop invariant n % 2 == 0 ==> i == n/2;\nloop invariant n % 2 != 0 ==> j == n/2;\nloop invariant n % 2 == 0 ==> b == 0;\nloop invariant n % 2 != 0 ==> b == 1;\nloop invariant n % 2 == 0 ==> i == j + n/2;\nloop invariant n % 2 != 0 ==> i == j + n/2 + 1;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant n % 2 == 0 ==> i == j + n/2;\nloop invariant n % 2 != 0 ==> i == j + n/2 + 1;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i && i <= k is preserved but not established.\nloop invariant 0 <= j && j <= k is partially proven to be inductive.\nloop invariant k == j + i is preserved but not established.\nloop invariant i <= n && n <= 2*k is preserved but not established.\nloop invariant j <= n && n <= 2*k is partially proven to be inductive.\nloop invariant n % 2 == 0 ==> i == n/2 is partially proven to be inductive.\nloop invariant n % 2 != 0 ==> j == n/2 is partially proven to be inductive.\nloop invariant n % 2 == 0 ==> b == 0 is partially proven to be inductive.\nloop invariant n % 2 != 0 ==> b == 1 is partially proven to be inductive.\nloop invariant n % 2 == 0 ==> i == j + n/2 is partially proven to be inductive.\nloop invariant n % 2 != 0 ==> i == j + n/2 + 1 is partially proven to be inductive.\nloop invariant i == j + n/2 is partially proven to be inductive.\nloop invariant j == i - n/2 is partially proven to be inductive.\nAssertion i == j: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n  int k = 100;\n  int b;\n  int i;\n  int j;\n  int n;\n  i = j;\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nfor( n = 0 ; n < 2*k ; n++ ) {\n        \n    if(b) {\n      i++;\n    } else {\n      j++;\n    }\n    b = !b;\n  }\n  {;\n//@ assert(i == j);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= k, 0 <= j <= k;\nloop invariant i + j = n;\nloop invariant i == j ==> b == !b;\nloop invariant b == !b ==> i == j;\nloop invariant b == !b ==> i + j == n;\nloop invariant b == !b ==> i + j == 2*k;\nloop invariant b == !b ==> i == j == k;\nloop invariant b == !b ==> i == j == k ==> i + j == 2*k;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 15: unexpected token ','",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n  int k = 100;\n  int b;\n  int i;\n  int j;\n  int n;\n  i = j;\n  /*@\n\n\n\nloop invariant i4: b == !b ==> i == j;\nloop invariant i5: b == !b ==> i + j == n;\nloop invariant i6: b == !b ==> i + j == 2*k;\nloop invariant i7: b == !b ==> i == j == k;\nloop invariant i8: b == !b ==> i == j == k ==> i + j == 2*k;\n*/\nfor( n = 0 ; n < 2*k ; n++ ) {\n        \n    if(b) {\n      i++;\n    } else {\n      j++;\n    }\n    b = !b;\n  }\n  {;\n//@ assert(i == j);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= 100;\nloop invariant 0 <= j <= 100;\nloop invariant i + j == k;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant i + j == k;\nloop invariant i == j ==> b == 1;\nloop invariant i != j ==> b == 0;\nloop invariant i >= j ==> b == 1;\nloop invariant i <= j ==> b == 0;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i >= j ==> b == 1;\nloop invariant i <= j ==> b == 0;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i >= j ==> b == 1;\nloop invariant i <= j ==> b == 0;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i >= j ==> b == 1;\nloop invariant i <= j ==> b == 0;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i >= j ==> b == 1;\nloop invariant i <= j ==> b == 0;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i >= j ==> b == 1;\nloop invariant i <= j ==> b == 0;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i >= j ==> b == 1;\nloop invariant i <= j ==> b == 0;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i >= j ==> b == 1;\nloop invariant i <= j ==> b == 0;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i >= j ==> b == 1;\nloop invariant i <= j ==> b == 0;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i >= j ==> b == 1;\nloop invariant i <= j ==> b == 0;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i >= j ==> b == 1;\nloop invariant i <= j ==> b == 0;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i >= j ==> b == 1;\nloop invariant i <= j ==> b == 0;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i >= j ==> b == 1;\nloop invariant i <= j ==> b == 0;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i >= j ==> b == 1;\nloop invariant i <= j ==> b == 0;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i >= j ==> b == 1;\nloop invariant i <= j ==> b == 0;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i >= j ==> b == 1;\nloop invariant i <= j ==> b == 0;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i >= j ==> b == 1;\nloop invariant i <= j ==> b == 0;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i >= j ==> b == 1;\nloop invariant i <= j ==> b == 0;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i >= j ==> b == 1;\nloop invariant i <= j ==> b == 0;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i >= j ==> b == 1;\nloop invariant i <= j ==> b == 0;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i >= j ==> b == 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= 100 is preserved but not established.\nloop invariant 0 <= j <= 100 is partially proven to be inductive.\nloop invariant i + j == k is preserved but not established.\nloop invariant i >= j is partially proven to be inductive.\nloop invariant j >= i is partially proven to be inductive.\nloop invariant i >= 0 is partially proven to be inductive.\nloop invariant j >= 0 is partially proven to be inductive.\nloop invariant i <= k is partially proven to be inductive.\nloop invariant j <= k is partially proven to be inductive.\nloop invariant i == j ==> b == 1 is preserved but not established.\nloop invariant i != j ==> b == 0 is partially proven to be inductive.\nloop invariant i >= j ==> b == 1 is partially proven to be inductive.\nloop invariant i <= j ==> b == 0 is preserved but not established.\nloop invariant i == j ==> b == 0 is partially proven to be inductive.\nloop invariant i != j ==> b == 1 is partially proven to be inductive.\nAssertion i == j: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n  int k = 100;\n  int b;\n  int i;\n  int j;\n  int n;\n  i = j;\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nfor( n = 0 ; n < 2*k ; n++ ) {\n        \n    if(b) {\n      i++;\n    } else {\n      j++;\n    }\n    b = !b;\n  }\n  {;\n//@ assert(i == j);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 1 <= k <= 100;\nloop invariant 0 <= n <= 2*k;\nloop invariant n % 2 == 0 ==> b == 0;\nloop invariant n % 2 == 1 ==> b == 1;\nloop invariant i == (j + (n / 2));\nloop invariant j == (i - (n / 2));\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= k <= 100 is partially proven to be inductive.\nloop invariant 0 <= n <= 2*k is partially proven to be inductive.\nloop invariant n % 2 == 0 ==> b == 0 is preserved but not established.\nloop invariant n % 2 == 1 ==> b == 1 is partially proven to be inductive.\nloop invariant i == (j + (n / 2)) is established but not preserved.\nloop invariant j == (i - (n / 2)) is partially proven to be inductive.\nAssertion i == j: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n  int k = 100;\n  int b;\n  int i;\n  int j;\n  int n;\n  i = j;\n  /*@\nloop invariant i1: 1 <= k <= 100;\nloop invariant i2: 0 <= n <= 2*k;\n\n\n\n\n*/\nfor( n = 0 ; n < 2*k ; n++ ) {\n        \n    if(b) {\n      i++;\n    } else {\n      j++;\n    }\n    b = !b;\n  }\n  {;\n//@ assert(i == j);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 7,
                    "annotations": "```\n/*@\nloop invariant ( 0 <= j <= k ==> i == j ) ==> i == j;\nloop invariant ( j > k ==> j > i ) ==> j > i;\nloop invariant ( j < k ==> i - j < 2*k ) ==> i - j < 2*k;\nloop invariant ( k - j > 0 ==> i - j < 2*k ) ==> i - j < 2*k;\nloop invariant ( b ==> i == j + 1 ) ==> i == j + 1;\nloop invariant ( !b ==> j == i + 1 ) ==> j == i + 1;\nloop invariant ( b ==> i + k - j > k ) ==> i + k - j > k;\nloop invariant ( !b ==> j + k - i > k ) ==> j + k - i > k;\nloop invariant ( b ==> i - j < 2*k ) ==> i - j < 2*k;\nloop invariant ( !b ==> i - j < 2*k ) ==> i - j < 2*k;\nloop invariant ( i + j == 2*k ) ==> i + j == 2*k;\nloop invariant ( i + j == 2*k ) ==> n == 2*k;\nloop invariant ( n == 2*k ) ==> 2*k == 2*k;\nloop invariant ( 2*k == 2*k ) ==> n == 2*k;\nloop invariant ( n == 2*k ) ==> n == 2*k;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant ( 0 <= j <= k ==> i == j ) ==> i == j is partially proven to be inductive.\nloop invariant ( j > k ==> j > i ) ==> j > i is preserved but not established.\nloop invariant ( j < k ==> i - j < 2*k ) ==> i - j < 2*k is partially proven to be inductive.\nloop invariant ( k - j > 0 ==> i - j < 2*k ) ==> i - j < 2*k is partially proven to be inductive.\nloop invariant ( b ==> i == j + 1 ) ==> i == j + 1 is preserved but not established.\nloop invariant ( !b ==> j == i + 1 ) ==> j == i + 1 is preserved but not established.\nloop invariant ( b ==> i + k - j > k ) ==> i + k - j > k is partially proven to be inductive.\nloop invariant ( !b ==> j + k - i > k ) ==> j + k - i > k is partially proven to be inductive.\nloop invariant ( b ==> i - j < 2*k ) ==> i - j < 2*k is partially proven to be inductive.\nloop invariant ( !b ==> i - j < 2*k ) ==> i - j < 2*k is partially proven to be inductive.\nloop invariant ( i + j == 2*k ) ==> i + j == 2*k is partially proven to be inductive.\nloop invariant ( i + j == 2*k ) ==> n == 2*k is partially proven to be inductive.\nloop invariant ( n == 2*k ) ==> 2*k == 2*k is partially proven to be inductive.\nloop invariant ( 2*k == 2*k ) ==> n == 2*k is partially proven to be inductive.\nloop invariant ( n == 2*k ) ==> n == 2*k is partially proven to be inductive.\nloop invariant ( n == 0 ==> i == j ) ==> i == j is partially proven to be inductive.\nAssertion i == j: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n  int k = 100;\n  int b;\n  int i;\n  int j;\n  int n;\n  i = j;\n  /*@\n\n\n\n\n\n\n\n\n\n\nloop invariant i11: ( i + j == 2*k ) ==> i + j == 2*k;\n\nloop invariant i13: ( n == 2*k ) ==> 2*k == 2*k;\n\nloop invariant i15: ( n == 2*k ) ==> n == 2*k;\n\n*/\nfor( n = 0 ; n < 2*k ; n++ ) {\n        \n    if(b) {\n      i++;\n    } else {\n      j++;\n    }\n    b = !b;\n  }\n  {;\n//@ assert(i == j);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 1 <= i <= 100;\nloop invariant 1 <= j <= 100;\nloop invariant i == j;\nloop invariant n == 2*k;\nloop invariant b == !b;\nloop invariant n == 2*k;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= i <= 100 is preserved but not established.\nloop invariant 1 <= j <= 100 is partially proven to be inductive.\nloop invariant i == j is partially proven to be inductive.\nloop invariant n == 2*k is preserved but not established.\nloop invariant b == !b is partially proven to be inductive.\nAssertion i == j: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n  int k = 100;\n  int b;\n  int i;\n  int j;\n  int n;\n  i = j;\n  /*@\n\n\n\n\n\n*/\nfor( n = 0 ; n < 2*k ; n++ ) {\n        \n    if(b) {\n      i++;\n    } else {\n      j++;\n    }\n    b = !b;\n  }\n  {;\n//@ assert(i == j);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= k;\nloop invariant 0 <= j <= k;\nloop invariant i + j == n;\nloop invariant (n % 2) == (b ? 1 : 0);\nloop invariant (n >= 0 && n < 2*k);\nloop invariant (k >= 0);\nloop invariant (i >= 0 && i <= k);\nloop invariant (j >= 0 && j <= k);\nloop invariant (i + j == n);\nloop invariant (n % 2) == (b ? 1 : 0);\nloop invariant (n >= 0 && n < 2*k);\nloop invariant (k >= 0);\nloop invariant (i >= 0 && i <= k);\nloop invariant (j >= 0 && j <= k);\nloop invariant (i + j == n);\nloop invariant (n % 2) == (b ? 1 : 0);\nloop invariant (n >= 0 && n < 2*k);\nloop invariant (k >= 0);\nloop invariant (i >= 0 && i <= k);\nloop invariant (j >= 0 && j <= k);\nloop invariant (i + j == n);\nloop invariant (n % 2) == (b ? 1 : 0);\nloop invariant (n >= 0 && n < 2*k);\nloop invariant (k >= 0);\nloop invariant (i >= 0 && i <= k);\nloop invariant (j >= 0 && j <= k);\nloop invariant (i + j == n);\nloop invariant (n % 2) == (b ? 1 : 0);\nloop invariant (n >= 0 && n < 2*k);\nloop invariant (k >= 0);\nloop invariant (i >= 0 && i <= k);\nloop invariant (j >= 0 && j <= k);\nloop invariant (i + j == n);\nloop invariant (n % 2) == (b ? 1 : 0);\nloop invariant (n >= 0 && n < 2*k);\nloop invariant (k >= 0);\nloop invariant (i >= 0 && i <= k);\nloop invariant (j >= 0 && j <= k);\nloop invariant (i + j == n);\nloop invariant (n % 2) == (b ? 1 : 0);\nloop invariant (n >= 0 && n < 2*k);\nloop invariant (k >= 0);\nloop invariant (i >= 0 && i <= k);\nloop invariant (j >= 0 && j <= k);\nloop invariant (i + j == n);\nloop invariant (n % 2) == (b ? 1 : 0);\nloop invariant (n >= 0 && n < 2*k);\nloop invariant (k >= 0);\nloop invariant (i >= 0 && i <= k);\nloop invariant (j >= 0 && j <= k);\nloop invariant (i + j == n);\nloop invariant (n % 2) == (b ? 1 : 0);\nloop invariant (n >= 0 && n < 2*k);\nloop invariant (k >= 0);\nloop invariant (i >= 0 && i <= k);\nloop invariant (j >= 0 && j <= k);\nloop invariant (i + j == n);\nloop invariant (n % 2) == (b ? 1 : 0);\nloop invariant (n >= 0 && n < 2*k);\nloop invariant (k >= 0);\nloop invariant (i >= 0 && i <= k);\nloop invariant (j >= 0 && j <= k);\nloop invariant (i + j == n);\nloop invariant (n % 2) == (b ? 1 : 0);\nloop invariant (n >= 0 && n < 2*k);\nloop invariant (k >= 0);\nloop invariant (i >= 0 && i <= k);\nloop invariant (j >= 0 && j <= k);\nloop invariant (i + j == n);\nloop invariant (n % 2) == (b ? 1 : 0);\nloop invariant (n >= 0 && n < 2*k);\nloop invariant (k >= 0);\nloop invariant (i >= 0 && i <= k);\nloop invariant (j >= 0 && j <= k);\nloop invariant (i + j == n);\nloop invariant (n % 2) == (b ? 1 : 0);\nloop invariant (n >= 0 && n < 2*k);\nloop invariant (k >= 0);\nloop invariant (i >= 0 && i <= k);\nloop invariant (j >= 0 && j <= k);\nloop invariant (i + j == n);\nloop invariant (n % 2) == (b ? 1 : 0);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= k is neither established nor preserved.\nloop invariant 0 <= j <= k is established but not preserved.\nloop invariant i + j == n is preserved but not established.\nloop invariant (n % 2) == (b ? 1 : 0) is preserved but not established.\nloop invariant (n >= 0 && n < 2*k) is established but not preserved.\nloop invariant (k >= 0) is partially proven to be inductive.\nloop invariant (i >= 0 && i <= k) is partially proven to be inductive.\nloop invariant (j >= 0 && j <= k) is partially proven to be inductive.\nloop invariant (i + j == n) is partially proven to be inductive.\nAssertion i == j: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n  int k = 100;\n  int b;\n  int i;\n  int j;\n  int n;\n  i = j;\n  /*@\n\n\n\n\n\nloop invariant i6: (k >= 0);\n\n\n\n*/\nfor( n = 0 ; n < 2*k ; n++ ) {\n        \n    if(b) {\n      i++;\n    } else {\n      j++;\n    }\n    b = !b;\n  }\n  {;\n//@ assert(i == j);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= 100; loop invariant 0 <= j <= 100; loop invariant i == j; loop invariant i + j == 2 * k; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= 100; loop invariant 0 <= j <= 100; loop invariant i == j; loop invariant i + j == 2 * k; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200 is neither established nor preserved.\nAssertion i == j: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n  int k = 100;\n  int b;\n  int i;\n  int j;\n  int n;\n  i = j;\n  /*@\n\n*/\nfor( n = 0 ; n < 2*k ; n++ ) {\n        \n    if(b) {\n      i++;\n    } else {\n      j++;\n    }\n    b = !b;\n  }\n  {;\n//@ assert(i == j);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 1 <= i <= k;\nloop invariant 1 <= j <= k;\nloop invariant i + j = n;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 17: Assignment operators not allowed in annotations.",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n  int k = 100;\n  int b;\n  int i;\n  int j;\n  int n;\n  i = j;\n  /*@\n\n\n\n*/\nfor( n = 0 ; n < 2*k ; n++ ) {\n        \n    if(b) {\n      i++;\n    } else {\n      j++;\n    }\n    b = !b;\n  }\n  {;\n//@ assert(i == j);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= j <= k;\nloop invariant 0 <= i <= k;\nloop invariant i + j == n;\nloop invariant !b ==> i >= j;\nloop invariant b ==> i <= j;\nloop invariant (n == 0) ==> (i == j);\nloop invariant (n == 2*k) ==> (i == j);\nloop invariant (n == 0) ==> (b == 1);\nloop invariant (n == 2*k) ==> (b == 0);\nloop invariant (n == 0) ==> (i == j);\nloop invariant (n == 2*k) ==> (i == j);\nloop invariant 0 <= j <= k;\nloop invariant 0 <= i <= k;\nloop invariant i + j == n;\nloop invariant !b ==> i >= j;\nloop invariant b ==> i <= j;\nloop invariant (n == 0) ==> (i == j);\nloop invariant (n == 2*k) ==> (i == j);\nloop invariant (n == 0) ==> (b == 1);\nloop invariant (n == 2*k) ==> (b == 0);\nloop invariant (n == 0) ==> (i == j);\nloop invariant (n == 2*k) ==> (i == j);\nloop invariant 0 <= j <= k;\nloop invariant 0 <= i <= k;\nloop invariant i + j == n;\nloop invariant !b ==> i >= j;\nloop invariant b ==> i <= j;\nloop invariant (n == 0) ==> (i == j);\nloop invariant (n == 2*k) ==> (i == j);\nloop invariant (n == 0) ==> (b == 1);\nloop invariant (n == 2*k) ==> (b == 0);\nloop invariant (n == 0) ==> (i == j);\nloop invariant (n == 2*k) ==> (i == j);\nloop invariant 0 <= j <= k;\nloop invariant 0 <= i <= k;\nloop invariant i + j == n;\nloop invariant !b ==> i >= j;\nloop invariant b ==> i <= j;\nloop invariant (n == 0) ==> (i == j);\nloop invariant (n == 2*k) ==> (i == j);\nloop invariant (n == 0) ==> (b == 1);\nloop invariant (n == 2*k) ==> (b == 0);\nloop invariant (n == 0) ==> (i == j);\nloop invariant (n == 2*k) ==> (i == j);\nloop invariant 0 <= j <= k;\nloop invariant 0 <= i <= k;\nloop invariant i + j == n;\nloop invariant !b ==> i >= j;\nloop invariant b ==> i <= j;\nloop invariant (n == 0) ==> (i == j);\nloop invariant (n == 2*k) ==> (i == j);\nloop invariant (n == 0) ==> (b == 1);\nloop invariant (n == 2*k) ==> (b == 0);\nloop invariant (n == 0) ==> (i == j);\nloop invariant (n == 2*k) ==> (i == j);\nloop invariant 0 <= j <= k;\nloop invariant 0 <= i <= k;\nloop invariant i + j == n;\nloop invariant !b ==> i >= j;\nloop invariant b ==> i <= j;\nloop invariant (n == 0) ==> (i == j);\nloop invariant (n == 2*k) ==> (i == j);\nloop invariant (n == 0) ==> (b == 1);\nloop invariant (n == 2*k) ==> (b == 0);\nloop invariant (n == 0) ==> (i == j);\nloop invariant (n == 2*k) ==> (i == j);\nloop invariant 0 <= j <= k;\nloop invariant 0 <= i <= k;\nloop invariant i + j == n;\nloop invariant !b ==> i >= j;\nloop invariant b ==> i <= j;\nloop invariant (n == 0) ==> (i == j);\nloop invariant (n == 2*k) ==> (i == j);\nloop invariant (n == 0) ==> (b == 1);\nloop invariant (n == 2*k) ==> (b == 0);\nloop invariant (n == 0) ==> (i == j);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= j <= k is preserved but not established.\nloop invariant 0 <= i <= k is partially proven to be inductive.\nloop invariant i + j == n is preserved but not established.\nloop invariant !b ==> i >= j is established but not preserved.\nloop invariant b ==> i <= j is established but not preserved.\nloop invariant (n == 0) ==> (i == j) is partially proven to be inductive.\nloop invariant (n == 2*k) ==> (i == j) is partially proven to be inductive.\nloop invariant (n == 0) ==> (b == 1) is preserved but not established.\nloop invariant (n == 2*k) ==> (b == 0) is established but not preserved.\nAssertion i == j: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n  int k = 100;\n  int b;\n  int i;\n  int j;\n  int n;\n  i = j;\n  /*@\n\n\n\n\n\n\n\n\n\n*/\nfor( n = 0 ; n < 2*k ; n++ ) {\n        \n    if(b) {\n      i++;\n    } else {\n      j++;\n    }\n    b = !b;\n  }\n  {;\n//@ assert(i == j);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= 100;\nloop invariant 0 <= j <= 100;\nloop invariant i == j;\nloop invariant 0 <= n <= 200;\nloop invariant n % 2 == 0;\nloop invariant b == !(n % 2);\nloop invariant i == (n / 2);\nloop invariant j == (n / 2);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= 100 is neither established nor preserved.\nloop invariant 0 <= j <= 100 is partially proven to be inductive.\nloop invariant i == j is established but not preserved.\nloop invariant 0 <= n <= 200 is partially proven to be inductive.\nloop invariant n % 2 == 0 is partially proven to be inductive.\nloop invariant b == !(n % 2) is preserved but not established.\nloop invariant i == (n / 2) is preserved but not established.\nloop invariant j == (n / 2) is partially proven to be inductive.\nAssertion i == j: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n  int k = 100;\n  int b;\n  int i;\n  int j;\n  int n;\n  i = j;\n  /*@\n\n\n\n\n\n\n\n\n*/\nfor( n = 0 ; n < 2*k ; n++ ) {\n        \n    if(b) {\n      i++;\n    } else {\n      j++;\n    }\n    b = !b;\n  }\n  {;\n//@ assert(i == j);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= b <= 1;\nloop invariant 0 <= i <= 2*k;\nloop invariant 0 <= j <= 2*k;\nloop invariant 0 <= n <= 2*k;\nloop invariant i + j == n;\nloop invariant i >= j;\nloop invariant i + j == n;\nloop invariant b ==> i == j;\nloop invariant !b ==> i == j;\nloop invariant i == j ==> i + j == n;\nloop invariant !b ==> i == j;\nloop invariant i == j ==> i + j == n;\nloop invariant b ==> i == j;\nloop invariant i == j ==> i + j == n;\nloop invariant !b ==> i == j;\nloop invariant i == j ==> i + j == n;\nloop invariant b ==> i == j;\nloop invariant i == j ==> i + j == n;\nloop invariant !b ==> i == j;\nloop invariant i == j ==> i + j == n;\nloop invariant b ==> i == j;\nloop invariant i == j ==> i + j == n;\nloop invariant !b ==> i == j;\nloop invariant i == j ==> i + j == n;\nloop invariant b ==> i == j;\nloop invariant i == j ==> i + j == n;\nloop invariant !b ==> i == j;\nloop invariant i == j ==> i + j == n;\nloop invariant b ==> i == j;\nloop invariant !b ==> i == j;\nloop invariant i == j ==> i + j == n;\nloop invariant b ==> i == j;\nloop invariant !b ==> i == j;\nloop invariant i == j ==> i + j == n;\nloop invariant b ==> i == j;\nloop invariant !b ==> i == j;\nloop invariant i == j ==> i + j == n;\nloop invariant b ==> i == j;\nloop invariant !b ==> i == j;\nloop invariant i == j ==> i + j == n;\nloop invariant b ==> i == j;\nloop invariant !b ==> i == j;\nloop invariant i == j ==> i + j == n;\nloop invariant b ==> i == j;\nloop invariant !b ==> i == j;\nloop invariant i == j ==> i + j == n;\nloop invariant b ==> i == j;\nloop invariant !b ==> i == j;\nloop invariant i == j ==> i + j == n;\nloop invariant b ==> i == j;\nloop invariant !b ==> i == j;\nloop invariant i == j ==> i + j == n;\nloop invariant b ==> i == j;\nloop invariant !b ==> i == j;\nloop invariant i == j ==> i + j == n;\nloop invariant b ==> i == j;\nloop invariant !b ==> i == j;\nloop invariant i == j ==> i + j == n;\nloop invariant b ==> i == j;\nloop invariant !b ==> i == j;\nloop invariant i == j ==> i + j == n;\nloop invariant b ==> i == j;\nloop invariant !b ==> i == j;\nloop invariant i == j ==> i + j == n;\nloop invariant b ==> i == j;\nloop invariant !b ==> i == j;\nloop invariant i == j ==> i + j == n;\nloop invariant b ==> i == j;\nloop invariant !b ==> i == j;\nloop invariant i == j ==> i + j == n;\nloop invariant b ==> i == j;\nloop invariant !b ==> i == j;\nloop invariant i == j ==> i + j == n;\nloop invariant b ==> i == j;\nloop invariant !b ==> i == j;\nloop invariant i == j ==> i + j == n;\nloop invariant b ==> i == j;\nloop invariant !b ==> i == j;\nloop invariant i == j ==> i + j == n;\nloop invariant b ==> i == j;\nloop invariant !b ==> i == j;\nloop invariant i == j ==> i + j == n;\nloop invariant b ==> i == j;\nloop invariant !b ==> i == j;\nloop invariant i == j ==> i + j == n;\nloop invariant b ==> i == j;\nloop invariant !b ==> i == j;\nloop invariant i == j ==> i + j == n;\nloop invariant b ==> i == j;\nloop invariant !b ==> i == j;\nloop invariant i == j ==> i + j == n;\nloop invariant b ==> i == j;\nloop invariant !b ==> i == j;\nloop invariant i == j ==> i + j == n;\nloop invariant b ==> i == j;\nloop invariant !b ==> i == j;\nloop invariant i == j ==> i + j == n;\nloop invariant b ==> i == j;\nloop invariant !b ==> i == j;\nloop invariant i == j ==> i + j == n;\nloop invariant b ==> i == j;\nloop invariant !b ==> i == j;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= b <= 1 is preserved but not established.\nloop invariant 0 <= i <= 2*k is preserved but not established.\nloop invariant 0 <= j <= 2*k is partially proven to be inductive.\nloop invariant 0 <= n <= 2*k is partially proven to be inductive.\nloop invariant i + j == n is preserved but not established.\nloop invariant i >= j is established but not preserved.\nloop invariant b ==> i == j is partially proven to be inductive.\nloop invariant !b ==> i == j is established but not preserved.\nloop invariant i == j ==> i + j == n is partially proven to be inductive.\nAssertion i == j: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n  int k = 100;\n  int b;\n  int i;\n  int j;\n  int n;\n  i = j;\n  /*@\n\n\n\nloop invariant i4: 0 <= n <= 2*k;\n\n\n\n\n\n*/\nfor( n = 0 ; n < 2*k ; n++ ) {\n        \n    if(b) {\n      i++;\n    } else {\n      j++;\n    }\n    b = !b;\n  }\n  {;\n//@ assert(i == j);\n}\n\n}",
                    "checker_output_after_prune": false
                }
            ],
            "checker_output_for_combined_annotations": false,
            "checker_message_for_combined_annotations": "Annotation error on line 57: unexpected token ','",
            "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n  int k = 100;\n  int b;\n  int i;\n  int j;\n  int n;\n  i = j;\n  /*@\nloop invariant i1: 0 <= j <= k;\nloop invariant i2: i >= 0;\nloop invariant i3: j >= 0;\nloop invariant i4: i + j >= n;\nloop invariant i5: i + j <= 2*k;\nloop invariant i6: i + j == n;\nloop invariant i7: i >= j;\nloop invariant i8: j >= i - 2*k + n;\nloop invariant i9: i >= j - k;\nloop invariant i10: j >= i - k;\nloop invariant i11: i >= j - n;\nloop invariant i12: j >= i - n;\nloop invariant i13: i >= j - 2*k;\nloop invariant i14: j >= i - 2*k + 2*n;\nloop invariant i15: i >= j - 2*k + 2*n;\nloop invariant i16: 1 <= i <= 100;\nloop invariant i17: 1 <= j <= 100;\nloop invariant i18: i <= j;\nloop invariant i19: i + j <= 200;\nloop invariant i20: i + j >= 100;\nloop invariant i21: n <= 200;\nloop invariant i22: n >= 0;\nloop invariant i23: b == (n % 2 == 0);\nloop invariant i24: i + j == 2 * n;\nloop invariant i25: 0 <= i <= 50;\nloop invariant i26: 0 <= j <= 50;\nloop invariant i27: k == 100;\nloop invariant i28: i == j;\nloop invariant i29: i + j == 2*k;\nloop invariant i30: 0 <= i && i <= k;\nloop invariant i31: 0 <= j && j <= k;\nloop invariant i32: k == j + i;\nloop invariant i33: i <= n && n <= 2*k;\nloop invariant i34: j <= n && n <= 2*k;\nloop invariant i35: n % 2 == 0 ==> i == n/2;\nloop invariant i36: n % 2 != 0 ==> j == n/2;\nloop invariant i37: n % 2 == 0 ==> b == 0;\nloop invariant i38: n % 2 != 0 ==> b == 1;\nloop invariant i39: n % 2 == 0 ==> i == j + n/2;\nloop invariant i40: n % 2 != 0 ==> i == j + n/2 + 1;\nloop invariant i41: i == j + n/2;\nloop invariant i42: j == i - n/2;\nloop invariant i43: 0 <= i <= k, 0 <= j <= k;\nloop invariant i44: i + j = n;\nloop invariant i45: i == j ==> b == !b;\nloop invariant i46: b == !b ==> i == j;\nloop invariant i47: b == !b ==> i + j == n;\nloop invariant i48: b == !b ==> i + j == 2*k;\nloop invariant i49: b == !b ==> i == j == k;\nloop invariant i50: b == !b ==> i == j == k ==> i + j == 2*k;\nloop invariant i51: 0 <= i <= 100;\nloop invariant i52: 0 <= j <= 100;\nloop invariant i53: i + j == k;\nloop invariant i54: j >= i;\nloop invariant i55: i <= k;\nloop invariant i56: j <= k;\nloop invariant i57: i == j ==> b == 1;\nloop invariant i58: i != j ==> b == 0;\nloop invariant i59: i >= j ==> b == 1;\nloop invariant i60: i <= j ==> b == 0;\nloop invariant i61: i == j ==> b == 0;\nloop invariant i62: i != j ==> b == 1;\nloop invariant i63: 1 <= k <= 100;\nloop invariant i64: 0 <= n <= 2*k;\nloop invariant i65: n % 2 == 1 ==> b == 1;\nloop invariant i66: i == (j + (n / 2));\nloop invariant i67: j == (i - (n / 2));\nloop invariant i68: ( 0 <= j <= k ==> i == j ) ==> i == j;\nloop invariant i69: ( j > k ==> j > i ) ==> j > i;\nloop invariant i70: ( j < k ==> i - j < 2*k ) ==> i - j < 2*k;\nloop invariant i71: ( k - j > 0 ==> i - j < 2*k ) ==> i - j < 2*k;\nloop invariant i72: ( b ==> i == j + 1 ) ==> i == j + 1;\nloop invariant i73: ( !b ==> j == i + 1 ) ==> j == i + 1;\nloop invariant i74: ( b ==> i + k - j > k ) ==> i + k - j > k;\nloop invariant i75: ( !b ==> j + k - i > k ) ==> j + k - i > k;\nloop invariant i76: ( b ==> i - j < 2*k ) ==> i - j < 2*k;\nloop invariant i77: ( !b ==> i - j < 2*k ) ==> i - j < 2*k;\nloop invariant i78: ( i + j == 2*k ) ==> i + j == 2*k;\nloop invariant i79: ( i + j == 2*k ) ==> n == 2*k;\nloop invariant i80: ( n == 2*k ) ==> 2*k == 2*k;\nloop invariant i81: ( 2*k == 2*k ) ==> n == 2*k;\nloop invariant i82: ( n == 2*k ) ==> n == 2*k;\nloop invariant i83: ( n == 0 ==> i == j ) ==> i == j;\nloop invariant i84: n == 2*k;\nloop invariant i85: b == !b;\nloop invariant i86: 0 <= i <= k;\nloop invariant i87: (n % 2) == (b ? 1 : 0);\nloop invariant i88: (n >= 0 && n < 2*k);\nloop invariant i89: (k >= 0);\nloop invariant i90: (i >= 0 && i <= k);\nloop invariant i91: (j >= 0 && j <= k);\nloop invariant i92: (i + j == n);\nloop invariant i93: 0 <= i <= 100; loop invariant 0 <= j <= 100; loop invariant i == j; loop invariant i + j == 2 * k; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200;\nloop invariant i94: 1 <= i <= k;\nloop invariant i95: 1 <= j <= k;\nloop invariant i96: !b ==> i >= j;\nloop invariant i97: b ==> i <= j;\nloop invariant i98: (n == 0) ==> (i == j);\nloop invariant i99: (n == 2*k) ==> (i == j);\nloop invariant i100: (n == 0) ==> (b == 1);\nloop invariant i101: (n == 2*k) ==> (b == 0);\nloop invariant i102: 0 <= n <= 200;\nloop invariant i103: n % 2 == 0;\nloop invariant i104: b == !(n % 2);\nloop invariant i105: i == (n / 2);\nloop invariant i106: j == (n / 2);\nloop invariant i107: 0 <= b <= 1;\nloop invariant i108: 0 <= i <= 2*k;\nloop invariant i109: 0 <= j <= 2*k;\nloop invariant i110: b ==> i == j;\nloop invariant i111: !b ==> i == j;\nloop invariant i112: i == j ==> i + j == n;\n*/\nfor( n = 0 ; n < 2*k ; n++ ) {\n        \n    if(b) {\n      i++;\n    } else {\n      j++;\n    }\n    b = !b;\n  }\n  {;\n//@ assert(i == j);\n}\n\n}",
            "combined_annotation_num_solver_calls": 37,
            "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n  int k = 100;\n  int b;\n  int i;\n  int j;\n  int n;\n  i = j;\n  /*@\n\n\n\n\n\n\n\n\n\n\nloop invariant i11: i >= j - n;\nloop invariant i12: j >= i - n;\nloop invariant i13: i >= j - 2*k;\n\n\n\n\n\n\n\nloop invariant i21: n <= 200;\nloop invariant i22: n >= 0;\n\n\n\n\nloop invariant i27: k == 100;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i46: b == !b ==> i == j;\nloop invariant i47: b == !b ==> i + j == n;\nloop invariant i48: b == !b ==> i + j == 2*k;\nloop invariant i49: b == !b ==> i == j == k;\nloop invariant i50: b == !b ==> i == j == k ==> i + j == 2*k;\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i63: 1 <= k <= 100;\nloop invariant i64: 0 <= n <= 2*k;\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i77: ( !b ==> i - j < 2*k ) ==> i - j < 2*k;\nloop invariant i78: ( i + j == 2*k ) ==> i + j == 2*k;\n\nloop invariant i80: ( n == 2*k ) ==> 2*k == 2*k;\n\nloop invariant i82: ( n == 2*k ) ==> n == 2*k;\n\n\n\n\n\n\nloop invariant i89: (k >= 0);\n\n\n\n\n\n\n\n\nloop invariant i98: (n == 0) ==> (i == j);\n\n\n\nloop invariant i102: 0 <= n <= 200;\n\n\n\n\n\n\n\n\n\n\n*/\nfor( n = 0 ; n < 2*k ; n++ ) {\n        \n    if(b) {\n      i++;\n    } else {\n      j++;\n    }\n    b = !b;\n  }\n  {;\n//@ assert(i == j);\n}\n\n}",
            "checker_output_after_prune": false
        }
    ],
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_nondet_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum01_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/22.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop17_VeriMAP_true.c",
            "../dataset/loop_invariants/code2inv/105.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/85.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/ex2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/42.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/diamond_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/odd.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/even.c",
            "../dataset/loop_invariants/code2inv/24.c",
            "../dataset/loop_invariants/code2inv/130.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/diamond_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/overflow_safe1.c",
            "../dataset/loop_invariants/code2inv/113.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/ddlm2013_true-unreach-call.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/MADWiFi-encode_ie_ok.c",
            "../dataset/loop_invariants/code2inv/69.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/half.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.v.c",
            "../dataset/loop_invariants/code2inv/101.c",
            "../dataset/loop_invariants/code2inv/86.c",
            "../dataset/loop_invariants/code2inv/119.c",
            "../dataset/loop_invariants/code2inv/123.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/ddlm2013.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/split.c"
        ],
        "skipped": [],
        "total": 28,
        "success_count": 6,
        "failure_count": 22,
        "success_rate": 0.21428571428571427
    }
}