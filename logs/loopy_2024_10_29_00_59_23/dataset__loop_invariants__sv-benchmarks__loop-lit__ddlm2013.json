{
    "logs": {
        "file": "../dataset/loop_invariants/sv-benchmarks/loop-lit/ddlm2013.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    while (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;\n//@ assert(a == b);\n}\n\n    }\n    return 0;\n}",
        "success": false,
        "annotation_blocks": [
            "```\n/*@\nloop invariant i >= 1;\nloop invariant i <= 2;\nloop invariant a >= 0;\nloop invariant a <= i;\nloop invariant b >= 0;\nloop invariant b <= i;\nloop invariant j >= 1;\nloop invariant j <= i + 1;\nloop invariant (a + b) == (j - i);\nloop invariant (a + b) >= 0;\nloop invariant (a + b) <= i;\nloop invariant (a + b) == (j - i);\nloop invariant (a + b) >= 0;\nloop invariant (a + b) <= i;\nloop invariant (a + b) == (j - i);\nloop invariant (a + b) >= 0;\nloop invariant (a + b) <= i;\nloop invariant (a + b) == (j - i);\nloop invariant (a + b) >= 0;\nloop invariant (a + b) <= i;\nloop invariant (a + b) == (j - i);\nloop invariant (a + b) >= 0;\nloop invariant (a + b) <= i;\nloop invariant (a + b) == (j - i);\nloop invariant (a + b) >= 0;\nloop invariant (a + b) <= i;\nloop invariant (a + b) == (j - i);\nloop invariant (a + b) >= 0;\nloop invariant (a + b) <= i;\nloop invariant (a + b) == (j - i);\nloop invariant (a + b) >= 0;\nloop invariant (a + b) <= i;\nloop invariant (a + b) == (j - i);\nloop invariant (a + b) >= 0;\nloop invariant (a + b) <= i;\nloop invariant (a + b) == (j - i);\nloop invariant (a + b) >= 0;\nloop invariant (a + b) <= i;\nloop invariant (a + b) == (j - i);\nloop invariant (a + b) >= 0;\nloop invariant (a + b) <= i;\nloop invariant (a + b) == (j - i);\nloop invariant (a + b) >= 0;\nloop invariant (a + b) <= i;\nloop invariant (a + b) == (j - i);\nloop invariant (a + b) >= 0;\nloop invariant (a + b) <= i;\nloop invariant (a + b) == (j - i);\nloop invariant (a + b) >= 0;\nloop invariant (a + b) <= i;\nloop invariant (a + b) == (j - i);\nloop invariant (a + b) >= 0;\nloop invariant (a + b) <= i;\nloop invariant (a + b) == (j - i);\nloop invariant (a + b) >= 0;\nloop invariant (a + b) <= i;\nloop invariant (a + b) == (j - i);\nloop invariant (a + b) >= 0;\nloop invariant (a + b) <= i;\nloop invariant (a + b) == (j - i);\nloop invariant (a + b) >= 0;\nloop invariant (a + b) <= i;\nloop invariant (a + b) == (j - i);\nloop invariant (a + b) >= 0;\nloop invariant (a + b) <= i;\nloop invariant (a + b) == (j - i);\nloop invariant (a + b) >= 0;\nloop invariant (a + b) <= i;\nloop invariant (a + b) == (j - i);\nloop invariant (a + b) >= 0;\nloop invariant (a + b) <= i;\nloop invariant (a + b) == (j - i);\nloop invariant (a + b) >= 0;\nloop invariant (a + b) <= i;\nloop invariant (a + b) == (j - i);\nloop invariant (a + b) >= 0;\nloop invariant (a + b) <= i;\nloop invariant (a + b) == (j - i);\nloop invariant (a + b) >= 0;\nloop invariant (a + b) <= i;\nloop invariant (a + b) == (j - i);\nloop invariant (a + b) >= 0;\nloop invariant (a + b) <= i;\nloop invariant (a + b) == (j - i);\nloop invariant (a + b) >= 0;\nloop invariant (a + b) <= i;\nloop invariant (a + b) == (j - i);\nloop invariant (a + b) >= 0;\nloop invariant (a + b) <= i;\nloop invariant (a + b) == (j - i);\nloop invariant (a + b) >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= a <= 100000;\nloop invariant 0 <= b <= 100000;\nloop invariant 1 <= j <= 100000;\nloop invariant i%2 == 0 ==> j == i + 1;\nloop invariant i%2 == 1 ==> j == i;\nloop invariant i >= 0;\nloop invariant a >= b;\nloop invariant (i == 0) ==> (j == 1);\nloop invariant (i == 1) ==> (j == 2);\nloop invariant (i >= 2) ==> (j >= 3);\n*/\n```",
            "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= a;\nloop invariant 0 <= b;\nloop invariant 1 <= j;\nloop invariant i <= 2;\nloop invariant i%2 == j%2;\nloop invariant a <= b + (j - i);\nloop invariant b <= a + (j - i);\nloop invariant (i < 2) ==> (b <= a + 0);\nloop invariant (i >= 2) ==> (b <= a + 2);\nloop invariant (j%2 == 0) ==> (b <= a + j);\nloop invariant (j%2 == 1) ==> (b <= a + j - 1);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= a;\nloop invariant 0 <= b;\nloop invariant 0 <= j;\nloop invariant 0 <= i;\nloop invariant 0 <= a <= b;\nloop invariant i%2 == 0 ==> j%2 == 1;\nloop invariant i%2 == 1 ==> j%2 == 0;\n*/\n```",
            "```\n/*@\nloop invariant i = 0 || i = 1;\nloop invariant j = 1;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant b <= a + j;\nloop invariant i = 0 || i = 1;\nloop invariant j = 1;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant b <= a + j;\nloop invariant a == b;\nloop invariant i = 0 || i = 1;\nloop invariant j = 1;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant b <= a + j;\nloop invariant a == b;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 2;\nloop invariant i%2 == 1 || i%2 == 0;\nloop invariant 0 <= j <= 3;\nloop invariant (i%2 == 0 && j%2 == 0) || (i%2 == 1 && j%2 == 1);\nloop invariant i%2 == 1 || a <= b;\nloop invariant a <= (b + 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= a <= b <= 1;\nloop invariant 0 <= b <= 1;\nloop invariant 1 <= b <= 1;\nloop invariant (i == 0) ==> j = 1;\nloop invariant (i == 1) ==> j = 2;\nloop invariant (i == 0) ==> (b = 0);\nloop invariant (i == 1) ==> (b = 1);\nloop invariant (i == 0) ==> (a = 0);\nloop invariant (i == 1) ==> (a = 1);\nloop invariant (i == 0) ==> (b = 1);\nloop invariant (i == 1) ==> (b = 2);\nloop invariant (i == 0) ==> (a = 1);\nloop invariant (i == 1) ==> (a = 2);\nloop invariant (i == 0) ==> (b = 3);\nloop invariant (i == 1) ==> (b = 4);\nloop invariant (i == 0) ==> (a = 3);\nloop invariant (i == 1) ==> (a = 4);\nloop invariant (i == 0) ==> (b = 5);\nloop invariant (i == 1) ==> (b = 6);\nloop invariant (i == 0) ==> (a = 5);\nloop invariant (i == 1) ==> (a = 6);\nloop invariant (i == 0) ==> (b = 7);\nloop invariant (i == 1) ==> (b = 8);\nloop invariant (i == 0) ==> (a = 7);\nloop invariant (i == 1) ==> (a = 8);\nloop invariant (i == 0) ==> (b = 9);\nloop invariant (i == 1) ==> (b = 10);\nloop invariant (i == 0) ==> (a = 9);\nloop invariant (i == 1) ==> (a = 10);\nloop invariant (i == 0) ==> (b = 11);\nloop invariant (i == 1) ==> (b = 12);\nloop invariant (i == 0) ==> (a = 11);\nloop invariant (i == 1) ==> (a = 12);\nloop invariant (i == 0) ==> (b = 13);\nloop invariant (i == 1) ==> (b = 14);\nloop invariant (i == 0) ==> (a = 13);\nloop invariant (i == 1) ==> (a = 14);\nloop invariant (i == 0) ==> (b = 15);\nloop invariant (i == 1) ==> (b = 16);\nloop invariant (i == 0) ==> (a = 15);\nloop invariant (i == 1) ==> (a = 16);\nloop invariant (i == 0) ==> (b = 17);\nloop invariant (i == 1) ==> (b = 18);\nloop invariant (i == 0) ==> (a = 17);\nloop invariant (i == 1) ==> (a = 18);\nloop invariant (i == 0) ==> (b = 19);\nloop invariant (i == 1) ==> (b = 20);\nloop invariant (i == 0) ==> (a = 19);\nloop invariant (i == 1) ==> (a = 20);\nloop invariant (i == 0) ==> (b = 21);\nloop invariant (i == 1) ==> (b = 22);\nloop invariant (i == 0) ==> (a = 21);\nloop invariant (i == 1) ==> (a = 22);\nloop invariant (i == 0) ==> (b = 23);\nloop invariant (i == 1) ==> (b = 24);\nloop invariant (i == 0) ==> (a = 23);\nloop invariant (i == 1) ==> (a = 24);\nloop invariant (i == 0) ==> (b = 25);\nloop invariant (i == 1) ==> (b = 26);\nloop invariant (i == 0) ==> (a = 25);\nloop invariant (i == 1) ==> (a = 26);\nloop invariant (i == 0) ==> (b = 27);\nloop invariant (i == 1) ==> (b = 28);\nloop invariant (i == 0) ==> (a = 27);\nloop invariant (i == 1) ==> (a = 28);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 2^32 - 1;\nloop invariant 0 <= j <= 2^32 - 1;\nloop invariant 0 <= a <= 2^32 - 1;\nloop invariant 0 <= b <= 2^32 - 1;\nloop invariant j - i >= 1;\nloop invariant j % 2 == i % 2;\nloop invariant (i == 0 && j == 1) || (i == 1 && j == 1);\nloop invariant j == (i + 1);\nloop invariant i == (j - 1);\nloop invariant a == b ==> (i == 0 && j == 1) || (i == 1 && j == 1);\nloop invariant a != b ==> !(i == 0 && j == 1) && !(i == 1 && j == 1);\nloop invariant !(a == b) ==> !(i == 0 && j == 1) && !(i == 1 && j == 1);\nloop invariant !(a != b) ==> (i == 0 && j == 1) || (i == 1 && j == 1);\nloop invariant i % 2 == 0 ==> j % 2 == 0;\nloop invariant i % 2 == 1 ==> j % 2 == 1;\nloop invariant i % 2 == 0 ==> j == (i + 1);\nloop invariant i % 2 == 1 ==> j == (i + 2);\nloop invariant i % 2 == 0 ==> j == (i + 2);\nloop invariant i % 2 == 1 ==> j == (i + 1);\nloop invariant i % 2 == 0 ==> (i + 2) == j;\nloop invariant i % 2 == 1 ==> (i + 1) == j;\nloop invariant i % 2 == 0 ==> i == (j - 1);\nloop invariant i % 2 == 1 ==> i == (j - 2);\nloop invariant i % 2 == 0 ==> j == (i + 1);\nloop invariant i % 2 == 1 ==> j == (i + 2);\nloop invariant i % 2 == 0 ==> j == (i + 2);\nloop invariant i % 2 == 1 ==> j == (i + 1);\nloop invariant i % 2 == 0 ==> (i + 2) == j;\nloop invariant i % 2 == 1 ==> (i + 1) == j;\nloop invariant i % 2 == 0 ==> i == (j - 1);\nloop invariant i % 2 == 1 ==> i == (j - 2);\nloop invariant i % 2 == 0 ==> j == (i + 1);\nloop invariant i % 2 == 1 ==> j == (i + 2);\nloop invariant i % 2 == 0 ==> j == (i + 2);\nloop invariant i % 2 == 1 ==> j == (i + 1);\nloop invariant i % 2 == 0 ==> (i + 2) == j;\nloop invariant i % 2 == 1 ==> (i + 1) == j;\nloop invariant i % 2 == 0 ==> i == (j - 1);\nloop invariant i % 2 == 1 ==> i == (j - 2);\nloop invariant i % 2 == 0 ==> j == (i + 1);\nloop invariant i % 2 == 1 ==> j == (i + 2);\nloop invariant i % 2 == 0 ==> j == (i + 2);\nloop invariant i % 2 == 1 ==> j == (i + 1);\nloop invariant i % 2 == 0 ==> (i + 2) == j;\nloop invariant i % 2 == 1 ==> (i + 1) == j;\nloop invariant i % 2 == 0 ==> i == (j - 1);\nloop invariant i % 2 == 1 ==> i == (j - 2);\nloop invariant i % 2 == 0 ==> j == (i + 1);\nloop invariant i % 2 == 1 ==> j == (i + 2);\nloop invariant i % 2 == 0 ==> j == (i + 2);\nloop invariant i % 2 == 1 ==> j == (i + 1);\nloop invariant i % 2 == 0 ==> (i + 2) == j;\nloop invariant i % 2 == 1 ==> (i + 1) == j;\nloop invariant i % 2 == 0 ==> i == (j - 1);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 1;\nloop invariant 0 <= j <= 10;\nloop invariant 0 <= a <= 10;\nloop invariant 0 <= b <= 10;\nloop invariant a >= i;\nloop invariant b >= 0;\nloop invariant a + b >= (i + j);\nloop invariant a + b >= 0;\nloop invariant a + b >= i;\nloop invariant a + b >= j;\nloop invariant a + b >= 1;\nloop invariant a + b >= 2;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= b;\nloop invariant a <= 1;\nloop invariant b <= 10;\nloop invariant a <= j;\nloop invariant b <= a;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= j <= 2;\nloop invariant 0 <= i <= 2;\nloop invariant 0 <= a <= b;\nloop invariant (i%2 == 0 ==> j%2 == 0) || (i%2 != 0 ==> j%2 == 1);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= j <= i <= a <= b;\nloop invariant (i + j) % 2 == 0 ==> (j <= i + 1);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 1;\nloop invariant 1 <= j <= 3;\nloop invariant 0 <= a <= 1;\nloop invariant 0 <= b <= 3;\nloop invariant a == b ==> i == 1;\nloop invariant a == b ==> j == 3;\nloop invariant a == b ==> a == b;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 2;\nloop invariant 0 <= j;\nloop invariant 0 <= a;\nloop invariant 0 <= b;\nloop invariant a <= b;\nloop invariant (flag ==> i = 1);\nloop invariant ((flag ==> i = 1) ==> (j = 1));\nloop invariant (flag ==> i = 0);\nloop invariant ((flag ==> i = 0) ==> (j = 1));\nloop invariant (flag ==> (a = b));\nloop invariant ((flag ==> (a = b)) ==> (i = 1));\nloop invariant ((flag ==> (a = b)) ==> (j = 1));\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 1;\nloop invariant 0 <= j <= 2;\nloop invariant a >= b;\nloop invariant b >= i;\nloop invariant b <= j;\nloop invariant a == (i * j);\nloop invariant a == b ==> flag;\nloop invariant i == 0 ==> flag;\nloop invariant i == 1 ==> !flag;\nloop invariant i%2 == 0 ==> j%2 == 0;\nloop invariant i%2 != 0 ==> j%2 != 0;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant i >= 1;\nloop invariant i <= 2;\nloop invariant a >= 0;\nloop invariant a <= i;\nloop invariant b >= 0;\nloop invariant b <= i;\nloop invariant j >= 1;\nloop invariant j <= i + 1;\nloop invariant (a + b) == (j - i);\nloop invariant (a + b) >= 0;\nloop invariant (a + b) <= i;\nloop invariant (a + b) == (j - i);\nloop invariant (a + b) >= 0;\nloop invariant (a + b) <= i;\nloop invariant (a + b) == (j - i);\nloop invariant (a + b) >= 0;\nloop invariant (a + b) <= i;\nloop invariant (a + b) == (j - i);\nloop invariant (a + b) >= 0;\nloop invariant (a + b) <= i;\nloop invariant (a + b) == (j - i);\nloop invariant (a + b) >= 0;\nloop invariant (a + b) <= i;\nloop invariant (a + b) == (j - i);\nloop invariant (a + b) >= 0;\nloop invariant (a + b) <= i;\nloop invariant (a + b) == (j - i);\nloop invariant (a + b) >= 0;\nloop invariant (a + b) <= i;\nloop invariant (a + b) == (j - i);\nloop invariant (a + b) >= 0;\nloop invariant (a + b) <= i;\nloop invariant (a + b) == (j - i);\nloop invariant (a + b) >= 0;\nloop invariant (a + b) <= i;\nloop invariant (a + b) == (j - i);\nloop invariant (a + b) >= 0;\nloop invariant (a + b) <= i;\nloop invariant (a + b) == (j - i);\nloop invariant (a + b) >= 0;\nloop invariant (a + b) <= i;\nloop invariant (a + b) == (j - i);\nloop invariant (a + b) >= 0;\nloop invariant (a + b) <= i;\nloop invariant (a + b) == (j - i);\nloop invariant (a + b) >= 0;\nloop invariant (a + b) <= i;\nloop invariant (a + b) == (j - i);\nloop invariant (a + b) >= 0;\nloop invariant (a + b) <= i;\nloop invariant (a + b) == (j - i);\nloop invariant (a + b) >= 0;\nloop invariant (a + b) <= i;\nloop invariant (a + b) == (j - i);\nloop invariant (a + b) >= 0;\nloop invariant (a + b) <= i;\nloop invariant (a + b) == (j - i);\nloop invariant (a + b) >= 0;\nloop invariant (a + b) <= i;\nloop invariant (a + b) == (j - i);\nloop invariant (a + b) >= 0;\nloop invariant (a + b) <= i;\nloop invariant (a + b) == (j - i);\nloop invariant (a + b) >= 0;\nloop invariant (a + b) <= i;\nloop invariant (a + b) == (j - i);\nloop invariant (a + b) >= 0;\nloop invariant (a + b) <= i;\nloop invariant (a + b) == (j - i);\nloop invariant (a + b) >= 0;\nloop invariant (a + b) <= i;\nloop invariant (a + b) == (j - i);\nloop invariant (a + b) >= 0;\nloop invariant (a + b) <= i;\nloop invariant (a + b) == (j - i);\nloop invariant (a + b) >= 0;\nloop invariant (a + b) <= i;\nloop invariant (a + b) == (j - i);\nloop invariant (a + b) >= 0;\nloop invariant (a + b) <= i;\nloop invariant (a + b) == (j - i);\nloop invariant (a + b) >= 0;\nloop invariant (a + b) <= i;\nloop invariant (a + b) == (j - i);\nloop invariant (a + b) >= 0;\nloop invariant (a + b) <= i;\nloop invariant (a + b) == (j - i);\nloop invariant (a + b) >= 0;\nloop invariant (a + b) <= i;\nloop invariant (a + b) == (j - i);\nloop invariant (a + b) >= 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant i >= 1 is preserved but not established.\nloop invariant i <= 2 is established but not preserved.\nloop invariant a >= 0 is partially proven to be inductive.\nloop invariant a <= i is partially proven to be inductive.\nloop invariant b >= 0 is partially proven to be inductive.\nloop invariant b <= i is partially proven to be inductive.\nloop invariant j >= 1 is partially proven to be inductive.\nloop invariant j <= i + 1 is partially proven to be inductive.\nloop invariant (a + b) == (j - i) is partially proven to be inductive.\nloop invariant (a + b) >= 0 is partially proven to be inductive.\nloop invariant (a + b) <= i is partially proven to be inductive.\nAssertion a == b: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    /*@\n\n\nloop invariant i3: a >= 0;\n\nloop invariant i5: b >= 0;\n\n\n\n\nloop invariant i10: (a + b) >= 0;\n\n*/\nwhile (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;\n//@ assert(a == b);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= a <= 100000;\nloop invariant 0 <= b <= 100000;\nloop invariant 1 <= j <= 100000;\nloop invariant i%2 == 0 ==> j == i + 1;\nloop invariant i%2 == 1 ==> j == i;\nloop invariant i >= 0;\nloop invariant a >= b;\nloop invariant (i == 0) ==> (j == 1);\nloop invariant (i == 1) ==> (j == 2);\nloop invariant (i >= 2) ==> (j >= 3);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= a <= 100000 is established but not preserved.\nloop invariant 0 <= b <= 100000 is partially proven to be inductive.\nloop invariant 1 <= j <= 100000 is established but not preserved.\nloop invariant i%2 == 0 ==> j == i + 1 is partially proven to be inductive.\nloop invariant i%2 == 1 ==> j == i is established but not preserved.\nloop invariant i >= 0 is partially proven to be inductive.\nloop invariant a >= b is partially proven to be inductive.\nloop invariant (i == 0) ==> (j == 1) is partially proven to be inductive.\nloop invariant (i == 1) ==> (j == 2) is preserved but not established.\nloop invariant (i >= 2) ==> (j >= 3) is partially proven to be inductive.\nAssertion a == b: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    /*@\n\n\n\n\n\nloop invariant i6: i >= 0;\n\n\n\n\n*/\nwhile (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;\n//@ assert(a == b);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 22: unbound logic variable i1. Ignoring loop annotation",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    /*@\n\n\n\n\n*/\nwhile (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;\n//@ assert(a == b);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= a;\nloop invariant 0 <= b;\nloop invariant 1 <= j;\nloop invariant i <= 2;\nloop invariant i%2 == j%2;\nloop invariant a <= b + (j - i);\nloop invariant b <= a + (j - i);\nloop invariant (i < 2) ==> (b <= a + 0);\nloop invariant (i >= 2) ==> (b <= a + 2);\nloop invariant (j%2 == 0) ==> (b <= a + j);\nloop invariant (j%2 == 1) ==> (b <= a + j - 1);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= a is partially proven to be inductive.\nloop invariant 0 <= b is partially proven to be inductive.\nloop invariant 1 <= j is established but not preserved.\nloop invariant i <= 2 is established but not preserved.\nloop invariant i%2 == j%2 is neither established nor preserved.\nloop invariant a <= b + (j - i) is established but not preserved.\nloop invariant b <= a + (j - i) is established but not preserved.\nloop invariant (i < 2) ==> (b <= a + 0) is partially proven to be inductive.\nloop invariant (i >= 2) ==> (b <= a + 2) is established but not preserved.\nloop invariant (j%2 == 0) ==> (b <= a + j) is partially proven to be inductive.\nloop invariant (j%2 == 1) ==> (b <= a + j - 1) is partially proven to be inductive.\nAssertion a == b: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    /*@\nloop invariant i1: 0 <= a;\nloop invariant i2: 0 <= b;\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;\n//@ assert(a == b);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= a;\nloop invariant 0 <= b;\nloop invariant 0 <= j;\nloop invariant 0 <= i;\nloop invariant 0 <= a <= b;\nloop invariant i%2 == 0 ==> j%2 == 1;\nloop invariant i%2 == 1 ==> j%2 == 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= a is partially proven to be inductive.\nloop invariant 0 <= b is partially proven to be inductive.\nloop invariant 0 <= j is partially proven to be inductive.\nloop invariant 0 <= i is partially proven to be inductive.\nloop invariant 0 <= a <= b is established but not preserved.\nloop invariant i%2 == 0 ==> j%2 == 1 is established but not preserved.\nloop invariant i%2 == 1 ==> j%2 == 0 is neither established nor preserved.\nAssertion a == b: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    /*@\nloop invariant i1: 0 <= a;\nloop invariant i2: 0 <= b;\nloop invariant i3: 0 <= j;\nloop invariant i4: 0 <= i;\n\n\n\n*/\nwhile (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;\n//@ assert(a == b);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant i = 0 || i = 1;\nloop invariant j = 1;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant b <= a + j;\nloop invariant i = 0 || i = 1;\nloop invariant j = 1;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant b <= a + j;\nloop invariant a == b;\nloop invariant i = 0 || i = 1;\nloop invariant j = 1;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant b <= a + j;\nloop invariant a == b;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 22: Assignment operators not allowed in annotations.",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    /*@\n\n\nloop invariant i3: a >= 0;\nloop invariant i4: b >= 0;\n\n\n*/\nwhile (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;\n//@ assert(a == b);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 2;\nloop invariant i%2 == 1 || i%2 == 0;\nloop invariant 0 <= j <= 3;\nloop invariant (i%2 == 0 && j%2 == 0) || (i%2 == 1 && j%2 == 1);\nloop invariant i%2 == 1 || a <= b;\nloop invariant a <= (b + 2);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= 2 is established but not preserved.\nloop invariant i%2 == 1 || i%2 == 0 is partially proven to be inductive.\nloop invariant 0 <= j <= 3 is established but not preserved.\nloop invariant (i%2 == 0 && j%2 == 0) || (i%2 == 1 && j%2 == 1) is preserved but not established.\nloop invariant i%2 == 1 || a <= b is established but not preserved.\nloop invariant a <= (b + 2) is partially proven to be inductive.\nAssertion a == b: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    /*@\n\nloop invariant i2: i%2 == 1 || i%2 == 0;\n\n\n\n\n*/\nwhile (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;\n//@ assert(a == b);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 66,
                "annotations": "```\n/*@\nloop invariant 0 <= a <= b <= 1;\nloop invariant 0 <= b <= 1;\nloop invariant 1 <= b <= 1;\nloop invariant (i == 0) ==> j = 1;\nloop invariant (i == 1) ==> j = 2;\nloop invariant (i == 0) ==> (b = 0);\nloop invariant (i == 1) ==> (b = 1);\nloop invariant (i == 0) ==> (a = 0);\nloop invariant (i == 1) ==> (a = 1);\nloop invariant (i == 0) ==> (b = 1);\nloop invariant (i == 1) ==> (b = 2);\nloop invariant (i == 0) ==> (a = 1);\nloop invariant (i == 1) ==> (a = 2);\nloop invariant (i == 0) ==> (b = 3);\nloop invariant (i == 1) ==> (b = 4);\nloop invariant (i == 0) ==> (a = 3);\nloop invariant (i == 1) ==> (a = 4);\nloop invariant (i == 0) ==> (b = 5);\nloop invariant (i == 1) ==> (b = 6);\nloop invariant (i == 0) ==> (a = 5);\nloop invariant (i == 1) ==> (a = 6);\nloop invariant (i == 0) ==> (b = 7);\nloop invariant (i == 1) ==> (b = 8);\nloop invariant (i == 0) ==> (a = 7);\nloop invariant (i == 1) ==> (a = 8);\nloop invariant (i == 0) ==> (b = 9);\nloop invariant (i == 1) ==> (b = 10);\nloop invariant (i == 0) ==> (a = 9);\nloop invariant (i == 1) ==> (a = 10);\nloop invariant (i == 0) ==> (b = 11);\nloop invariant (i == 1) ==> (b = 12);\nloop invariant (i == 0) ==> (a = 11);\nloop invariant (i == 1) ==> (a = 12);\nloop invariant (i == 0) ==> (b = 13);\nloop invariant (i == 1) ==> (b = 14);\nloop invariant (i == 0) ==> (a = 13);\nloop invariant (i == 1) ==> (a = 14);\nloop invariant (i == 0) ==> (b = 15);\nloop invariant (i == 1) ==> (b = 16);\nloop invariant (i == 0) ==> (a = 15);\nloop invariant (i == 1) ==> (a = 16);\nloop invariant (i == 0) ==> (b = 17);\nloop invariant (i == 1) ==> (b = 18);\nloop invariant (i == 0) ==> (a = 17);\nloop invariant (i == 1) ==> (a = 18);\nloop invariant (i == 0) ==> (b = 19);\nloop invariant (i == 1) ==> (b = 20);\nloop invariant (i == 0) ==> (a = 19);\nloop invariant (i == 1) ==> (a = 20);\nloop invariant (i == 0) ==> (b = 21);\nloop invariant (i == 1) ==> (b = 22);\nloop invariant (i == 0) ==> (a = 21);\nloop invariant (i == 1) ==> (a = 22);\nloop invariant (i == 0) ==> (b = 23);\nloop invariant (i == 1) ==> (b = 24);\nloop invariant (i == 0) ==> (a = 23);\nloop invariant (i == 1) ==> (a = 24);\nloop invariant (i == 0) ==> (b = 25);\nloop invariant (i == 1) ==> (b = 26);\nloop invariant (i == 0) ==> (a = 25);\nloop invariant (i == 1) ==> (a = 26);\nloop invariant (i == 0) ==> (b = 27);\nloop invariant (i == 1) ==> (b = 28);\nloop invariant (i == 0) ==> (a = 27);\nloop invariant (i == 1) ==> (a = 28);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 25: Assignment operators not allowed in annotations.",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;\n//@ assert(a == b);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 12,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 2^32 - 1;\nloop invariant 0 <= j <= 2^32 - 1;\nloop invariant 0 <= a <= 2^32 - 1;\nloop invariant 0 <= b <= 2^32 - 1;\nloop invariant j - i >= 1;\nloop invariant j % 2 == i % 2;\nloop invariant (i == 0 && j == 1) || (i == 1 && j == 1);\nloop invariant j == (i + 1);\nloop invariant i == (j - 1);\nloop invariant a == b ==> (i == 0 && j == 1) || (i == 1 && j == 1);\nloop invariant a != b ==> !(i == 0 && j == 1) && !(i == 1 && j == 1);\nloop invariant !(a == b) ==> !(i == 0 && j == 1) && !(i == 1 && j == 1);\nloop invariant !(a != b) ==> (i == 0 && j == 1) || (i == 1 && j == 1);\nloop invariant i % 2 == 0 ==> j % 2 == 0;\nloop invariant i % 2 == 1 ==> j % 2 == 1;\nloop invariant i % 2 == 0 ==> j == (i + 1);\nloop invariant i % 2 == 1 ==> j == (i + 2);\nloop invariant i % 2 == 0 ==> j == (i + 2);\nloop invariant i % 2 == 1 ==> j == (i + 1);\nloop invariant i % 2 == 0 ==> (i + 2) == j;\nloop invariant i % 2 == 1 ==> (i + 1) == j;\nloop invariant i % 2 == 0 ==> i == (j - 1);\nloop invariant i % 2 == 1 ==> i == (j - 2);\nloop invariant i % 2 == 0 ==> j == (i + 1);\nloop invariant i % 2 == 1 ==> j == (i + 2);\nloop invariant i % 2 == 0 ==> j == (i + 2);\nloop invariant i % 2 == 1 ==> j == (i + 1);\nloop invariant i % 2 == 0 ==> (i + 2) == j;\nloop invariant i % 2 == 1 ==> (i + 1) == j;\nloop invariant i % 2 == 0 ==> i == (j - 1);\nloop invariant i % 2 == 1 ==> i == (j - 2);\nloop invariant i % 2 == 0 ==> j == (i + 1);\nloop invariant i % 2 == 1 ==> j == (i + 2);\nloop invariant i % 2 == 0 ==> j == (i + 2);\nloop invariant i % 2 == 1 ==> j == (i + 1);\nloop invariant i % 2 == 0 ==> (i + 2) == j;\nloop invariant i % 2 == 1 ==> (i + 1) == j;\nloop invariant i % 2 == 0 ==> i == (j - 1);\nloop invariant i % 2 == 1 ==> i == (j - 2);\nloop invariant i % 2 == 0 ==> j == (i + 1);\nloop invariant i % 2 == 1 ==> j == (i + 2);\nloop invariant i % 2 == 0 ==> j == (i + 2);\nloop invariant i % 2 == 1 ==> j == (i + 1);\nloop invariant i % 2 == 0 ==> (i + 2) == j;\nloop invariant i % 2 == 1 ==> (i + 1) == j;\nloop invariant i % 2 == 0 ==> i == (j - 1);\nloop invariant i % 2 == 1 ==> i == (j - 2);\nloop invariant i % 2 == 0 ==> j == (i + 1);\nloop invariant i % 2 == 1 ==> j == (i + 2);\nloop invariant i % 2 == 0 ==> j == (i + 2);\nloop invariant i % 2 == 1 ==> j == (i + 1);\nloop invariant i % 2 == 0 ==> (i + 2) == j;\nloop invariant i % 2 == 1 ==> (i + 1) == j;\nloop invariant i % 2 == 0 ==> i == (j - 1);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 22: invalid operands to binary ^; unexpected 𝔹 and ℤ. Ignoring loop annotation",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;\n//@ assert(a == b);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 10,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 1;\nloop invariant 0 <= j <= 10;\nloop invariant 0 <= a <= 10;\nloop invariant 0 <= b <= 10;\nloop invariant a >= i;\nloop invariant b >= 0;\nloop invariant a + b >= (i + j);\nloop invariant a + b >= 0;\nloop invariant a + b >= i;\nloop invariant a + b >= j;\nloop invariant a + b >= 1;\nloop invariant a + b >= 2;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= b;\nloop invariant a <= 1;\nloop invariant b <= 10;\nloop invariant a <= j;\nloop invariant b <= a;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\nloop invariant b <= 10;\nloop invariant a <= 10;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= 1 is partially proven to be inductive.\nloop invariant 0 <= j <= 10 is partially proven to be inductive.\nloop invariant 0 <= a <= 10 is partially proven to be inductive.\nloop invariant 0 <= b <= 10 is partially proven to be inductive.\nloop invariant a >= i is preserved but not established.\nloop invariant b >= 0 is partially proven to be inductive.\nloop invariant a + b >= (i + j) is preserved but not established.\nloop invariant a + b >= 0 is partially proven to be inductive.\nloop invariant a + b >= i is partially proven to be inductive.\nloop invariant a + b >= j is partially proven to be inductive.\nloop invariant a + b >= 1 is partially proven to be inductive.\nloop invariant a + b >= 2 is partially proven to be inductive.\nloop invariant a >= 0 is partially proven to be inductive.\nloop invariant a <= b is partially proven to be inductive.\nloop invariant a <= 1 is partially proven to be inductive.\nloop invariant b <= 10 is partially proven to be inductive.\nloop invariant a <= j is partially proven to be inductive.\nloop invariant b <= a is partially proven to be inductive.\nloop invariant a <= 10 is partially proven to be inductive.\nAssertion a == b: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    /*@\n\n\n\n\n\nloop invariant i6: b >= 0;\n\nloop invariant i8: a + b >= 0;\n\n\n\n\nloop invariant i13: a >= 0;\n\n\n\n\n\n\n*/\nwhile (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;\n//@ assert(a == b);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= j <= 2;\nloop invariant 0 <= i <= 2;\nloop invariant 0 <= a <= b;\nloop invariant (i%2 == 0 ==> j%2 == 0) || (i%2 != 0 ==> j%2 == 1);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= j <= 2 is established but not preserved.\nloop invariant 0 <= i <= 2 is established but not preserved.\nloop invariant 0 <= a <= b is established but not preserved.\nloop invariant (i%2 == 0 ==> j%2 == 0) || (i%2 != 0 ==> j%2 == 1) is partially proven to be inductive.\nAssertion a == b: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    /*@\n\n\n\nloop invariant i4: (i%2 == 0 ==> j%2 == 0) || (i%2 != 0 ==> j%2 == 1);\n*/\nwhile (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;\n//@ assert(a == b);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= j <= i <= a <= b;\nloop invariant (i + j) % 2 == 0 ==> (j <= i + 1);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= j <= i <= a <= b is preserved but not established.\nloop invariant (i + j) % 2 == 0 ==> (j <= i + 1) is partially proven to be inductive.\nAssertion a == b: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    /*@\n\n\n*/\nwhile (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;\n//@ assert(a == b);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 1;\nloop invariant 1 <= j <= 3;\nloop invariant 0 <= a <= 1;\nloop invariant 0 <= b <= 3;\nloop invariant a == b ==> i == 1;\nloop invariant a == b ==> j == 3;\nloop invariant a == b ==> a == b;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= 1 is partially proven to be inductive.\nloop invariant 1 <= j <= 3 is partially proven to be inductive.\nloop invariant 0 <= a <= 1 is partially proven to be inductive.\nloop invariant 0 <= b <= 3 is partially proven to be inductive.\nloop invariant a == b ==> i == 1 is preserved but not established.\nloop invariant a == b ==> j == 3 is preserved but not established.\nloop invariant a == b ==> a == b is partially proven to be inductive.\nAssertion a == b: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    /*@\n\n\n\n\n\n\nloop invariant i7: a == b ==> a == b;\n*/\nwhile (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;\n//@ assert(a == b);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 10,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 2;\nloop invariant 0 <= j;\nloop invariant 0 <= a;\nloop invariant 0 <= b;\nloop invariant a <= b;\nloop invariant (flag ==> i = 1);\nloop invariant ((flag ==> i = 1) ==> (j = 1));\nloop invariant (flag ==> i = 0);\nloop invariant ((flag ==> i = 0) ==> (j = 1));\nloop invariant (flag ==> (a = b));\nloop invariant ((flag ==> (a = b)) ==> (i = 1));\nloop invariant ((flag ==> (a = b)) ==> (j = 1));\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 27: Assignment operators not allowed in annotations.",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    /*@\n\nloop invariant i2: 0 <= j;\nloop invariant i3: 0 <= a;\nloop invariant i4: 0 <= b;\n\n\n\n\n\n\n\n\n*/\nwhile (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;\n//@ assert(a == b);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 1;\nloop invariant 0 <= j <= 2;\nloop invariant a >= b;\nloop invariant b >= i;\nloop invariant b <= j;\nloop invariant a == (i * j);\nloop invariant a == b ==> flag;\nloop invariant i == 0 ==> flag;\nloop invariant i == 1 ==> !flag;\nloop invariant i%2 == 0 ==> j%2 == 0;\nloop invariant i%2 != 0 ==> j%2 != 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= 1 is partially proven to be inductive.\nloop invariant 0 <= j <= 2 is partially proven to be inductive.\nloop invariant a >= b is partially proven to be inductive.\nloop invariant b >= i is preserved but not established.\nloop invariant b <= j is partially proven to be inductive.\nloop invariant a == (i * j) is partially proven to be inductive.\nloop invariant a == b ==> flag is partially proven to be inductive.\nloop invariant i == 0 ==> flag is partially proven to be inductive.\nloop invariant i == 1 ==> !flag is partially proven to be inductive.\nloop invariant i%2 == 0 ==> j%2 == 0 is preserved but not established.\nloop invariant i%2 != 0 ==> j%2 != 0 is partially proven to be inductive.\nAssertion a == b: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    /*@\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;\n//@ assert(a == b);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 62: Assignment operators not allowed in annotations.",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    /*@\nloop invariant i1: i >= 1;\nloop invariant i2: i <= 2;\nloop invariant i3: a >= 0;\nloop invariant i4: a <= i;\nloop invariant i5: b >= 0;\nloop invariant i6: b <= i;\nloop invariant i7: j >= 1;\nloop invariant i8: j <= i + 1;\nloop invariant i9: (a + b) == (j - i);\nloop invariant i10: (a + b) >= 0;\nloop invariant i11: (a + b) <= i;\nloop invariant i12: 0 <= a <= 100000;\nloop invariant i13: 0 <= b <= 100000;\nloop invariant i14: 1 <= j <= 100000;\nloop invariant i15: i%2 == 0 ==> j == i + 1;\nloop invariant i16: i%2 == 1 ==> j == i;\nloop invariant i17: i >= 0;\nloop invariant i18: a >= b;\nloop invariant i19: (i == 0) ==> (j == 1);\nloop invariant i20: (i == 1) ==> (j == 2);\nloop invariant i21: (i >= 2) ==> (j >= 3);\nloop invariant i22: i1;\nloop invariant i23: i2;\nloop invariant i24: 0 <= y <= 100000;\nloop invariant i25: x >= (1 + (y - 1) * y / 2);\nloop invariant i26: 0 <= a;\nloop invariant i27: 0 <= b;\nloop invariant i28: 1 <= j;\nloop invariant i29: i%2 == j%2;\nloop invariant i30: a <= b + (j - i);\nloop invariant i31: b <= a + (j - i);\nloop invariant i32: (i < 2) ==> (b <= a + 0);\nloop invariant i33: (i >= 2) ==> (b <= a + 2);\nloop invariant i34: (j%2 == 0) ==> (b <= a + j);\nloop invariant i35: (j%2 == 1) ==> (b <= a + j - 1);\nloop invariant i36: 0 <= j;\nloop invariant i37: 0 <= i;\nloop invariant i38: 0 <= a <= b;\nloop invariant i39: i%2 == 0 ==> j%2 == 1;\nloop invariant i40: i%2 == 1 ==> j%2 == 0;\nloop invariant i41: i = 0 || i = 1;\nloop invariant i42: j = 1;\nloop invariant i43: b <= a + j;\nloop invariant i44: a == b;\nloop invariant i45: 0 <= i <= 2;\nloop invariant i46: i%2 == 1 || i%2 == 0;\nloop invariant i47: 0 <= j <= 3;\nloop invariant i48: (i%2 == 0 && j%2 == 0) || (i%2 == 1 && j%2 == 1);\nloop invariant i49: i%2 == 1 || a <= b;\nloop invariant i50: a <= (b + 2);\nloop invariant i51: 0 <= a <= b <= 1;\nloop invariant i52: 0 <= b <= 1;\nloop invariant i53: 1 <= b <= 1;\nloop invariant i54: (i == 0) ==> j = 1;\nloop invariant i55: (i == 1) ==> j = 2;\nloop invariant i56: (i == 0) ==> (b = 0);\nloop invariant i57: (i == 1) ==> (b = 1);\nloop invariant i58: (i == 0) ==> (a = 0);\nloop invariant i59: (i == 1) ==> (a = 1);\nloop invariant i60: (i == 0) ==> (b = 1);\nloop invariant i61: (i == 1) ==> (b = 2);\nloop invariant i62: (i == 0) ==> (a = 1);\nloop invariant i63: (i == 1) ==> (a = 2);\nloop invariant i64: (i == 0) ==> (b = 3);\nloop invariant i65: (i == 1) ==> (b = 4);\nloop invariant i66: (i == 0) ==> (a = 3);\nloop invariant i67: (i == 1) ==> (a = 4);\nloop invariant i68: (i == 0) ==> (b = 5);\nloop invariant i69: (i == 1) ==> (b = 6);\nloop invariant i70: (i == 0) ==> (a = 5);\nloop invariant i71: (i == 1) ==> (a = 6);\nloop invariant i72: (i == 0) ==> (b = 7);\nloop invariant i73: (i == 1) ==> (b = 8);\nloop invariant i74: (i == 0) ==> (a = 7);\nloop invariant i75: (i == 1) ==> (a = 8);\nloop invariant i76: (i == 0) ==> (b = 9);\nloop invariant i77: (i == 1) ==> (b = 10);\nloop invariant i78: (i == 0) ==> (a = 9);\nloop invariant i79: (i == 1) ==> (a = 10);\nloop invariant i80: (i == 0) ==> (b = 11);\nloop invariant i81: (i == 1) ==> (b = 12);\nloop invariant i82: (i == 0) ==> (a = 11);\nloop invariant i83: (i == 1) ==> (a = 12);\nloop invariant i84: (i == 0) ==> (b = 13);\nloop invariant i85: (i == 1) ==> (b = 14);\nloop invariant i86: (i == 0) ==> (a = 13);\nloop invariant i87: (i == 1) ==> (a = 14);\nloop invariant i88: (i == 0) ==> (b = 15);\nloop invariant i89: (i == 1) ==> (b = 16);\nloop invariant i90: (i == 0) ==> (a = 15);\nloop invariant i91: (i == 1) ==> (a = 16);\nloop invariant i92: (i == 0) ==> (b = 17);\nloop invariant i93: (i == 1) ==> (b = 18);\nloop invariant i94: (i == 0) ==> (a = 17);\nloop invariant i95: (i == 1) ==> (a = 18);\nloop invariant i96: (i == 0) ==> (b = 19);\nloop invariant i97: (i == 1) ==> (b = 20);\nloop invariant i98: (i == 0) ==> (a = 19);\nloop invariant i99: (i == 1) ==> (a = 20);\nloop invariant i100: (i == 0) ==> (b = 21);\nloop invariant i101: (i == 1) ==> (b = 22);\nloop invariant i102: (i == 0) ==> (a = 21);\nloop invariant i103: (i == 1) ==> (a = 22);\nloop invariant i104: (i == 0) ==> (b = 23);\nloop invariant i105: (i == 1) ==> (b = 24);\nloop invariant i106: (i == 0) ==> (a = 23);\nloop invariant i107: (i == 1) ==> (a = 24);\nloop invariant i108: (i == 0) ==> (b = 25);\nloop invariant i109: (i == 1) ==> (b = 26);\nloop invariant i110: (i == 0) ==> (a = 25);\nloop invariant i111: (i == 1) ==> (a = 26);\nloop invariant i112: (i == 0) ==> (b = 27);\nloop invariant i113: (i == 1) ==> (b = 28);\nloop invariant i114: (i == 0) ==> (a = 27);\nloop invariant i115: (i == 1) ==> (a = 28);\nloop invariant i116: 0 <= i <= 2^32 - 1;\nloop invariant i117: 0 <= j <= 2^32 - 1;\nloop invariant i118: 0 <= a <= 2^32 - 1;\nloop invariant i119: 0 <= b <= 2^32 - 1;\nloop invariant i120: j - i >= 1;\nloop invariant i121: j % 2 == i % 2;\nloop invariant i122: (i == 0 && j == 1) || (i == 1 && j == 1);\nloop invariant i123: j == (i + 1);\nloop invariant i124: i == (j - 1);\nloop invariant i125: a == b ==> (i == 0 && j == 1) || (i == 1 && j == 1);\nloop invariant i126: a != b ==> !(i == 0 && j == 1) && !(i == 1 && j == 1);\nloop invariant i127: !(a == b) ==> !(i == 0 && j == 1) && !(i == 1 && j == 1);\nloop invariant i128: !(a != b) ==> (i == 0 && j == 1) || (i == 1 && j == 1);\nloop invariant i129: i % 2 == 0 ==> j % 2 == 0;\nloop invariant i130: i % 2 == 1 ==> j % 2 == 1;\nloop invariant i131: i % 2 == 0 ==> j == (i + 1);\nloop invariant i132: i % 2 == 1 ==> j == (i + 2);\nloop invariant i133: i % 2 == 0 ==> j == (i + 2);\nloop invariant i134: i % 2 == 1 ==> j == (i + 1);\nloop invariant i135: i % 2 == 0 ==> (i + 2) == j;\nloop invariant i136: i % 2 == 1 ==> (i + 1) == j;\nloop invariant i137: i % 2 == 0 ==> i == (j - 1);\nloop invariant i138: i % 2 == 1 ==> i == (j - 2);\nloop invariant i139: 0 <= i <= 1;\nloop invariant i140: 0 <= j <= 10;\nloop invariant i141: 0 <= a <= 10;\nloop invariant i142: 0 <= b <= 10;\nloop invariant i143: a >= i;\nloop invariant i144: a + b >= (i + j);\nloop invariant i145: a + b >= 0;\nloop invariant i146: a + b >= i;\nloop invariant i147: a + b >= j;\nloop invariant i148: a + b >= 1;\nloop invariant i149: a + b >= 2;\nloop invariant i150: a <= b;\nloop invariant i151: a <= 1;\nloop invariant i152: b <= 10;\nloop invariant i153: a <= j;\nloop invariant i154: b <= a;\nloop invariant i155: a <= 10;\nloop invariant i156: 0 <= j <= 2;\nloop invariant i157: (i%2 == 0 ==> j%2 == 0) || (i%2 != 0 ==> j%2 == 1);\nloop invariant i158: 0 <= j <= i <= a <= b;\nloop invariant i159: (i + j) % 2 == 0 ==> (j <= i + 1);\nloop invariant i160: 1 <= j <= 3;\nloop invariant i161: 0 <= a <= 1;\nloop invariant i162: 0 <= b <= 3;\nloop invariant i163: a == b ==> i == 1;\nloop invariant i164: a == b ==> j == 3;\nloop invariant i165: a == b ==> a == b;\nloop invariant i166: (flag ==> i = 1);\nloop invariant i167: ((flag ==> i = 1) ==> (j = 1));\nloop invariant i168: (flag ==> i = 0);\nloop invariant i169: ((flag ==> i = 0) ==> (j = 1));\nloop invariant i170: (flag ==> (a = b));\nloop invariant i171: ((flag ==> (a = b)) ==> (i = 1));\nloop invariant i172: ((flag ==> (a = b)) ==> (j = 1));\nloop invariant i173: b >= i;\nloop invariant i174: b <= j;\nloop invariant i175: a == (i * j);\nloop invariant i176: a == b ==> flag;\nloop invariant i177: i == 0 ==> flag;\nloop invariant i178: i == 1 ==> !flag;\nloop invariant i179: i%2 == 0 ==> j%2 == 0;\nloop invariant i180: i%2 != 0 ==> j%2 != 0;\n*/\nwhile (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;\n//@ assert(a == b);\n}\n\n    }\n    return 0;\n}",
        "combined_annotation_num_solver_calls": 111,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    /*@\n\n\nloop invariant i3: a >= 0;\n\nloop invariant i5: b >= 0;\n\n\n\n\nloop invariant i10: (a + b) >= 0;\n\n\n\n\n\n\nloop invariant i17: i >= 0;\n\n\n\n\n\n\n\n\nloop invariant i26: 0 <= a;\nloop invariant i27: 0 <= b;\n\n\n\n\n\n\n\n\nloop invariant i36: 0 <= j;\nloop invariant i37: 0 <= i;\n\n\n\n\n\n\n\n\nloop invariant i46: i%2 == 1 || i%2 == 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i145: a + b >= 0;\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i157: (i%2 == 0 ==> j%2 == 0) || (i%2 != 0 ==> j%2 == 1);\n\n\n\n\n\n\n\nloop invariant i165: a == b ==> a == b;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;\n//@ assert(a == b);\n}\n\n    }\n    return 0;\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_nondet_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum01_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/22.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop17_VeriMAP_true.c",
            "../dataset/loop_invariants/code2inv/105.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/85.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/ex2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/42.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/diamond_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/odd.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/even.c",
            "../dataset/loop_invariants/code2inv/24.c",
            "../dataset/loop_invariants/code2inv/130.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/diamond_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/overflow_safe1.c",
            "../dataset/loop_invariants/code2inv/113.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/ddlm2013_true-unreach-call.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/MADWiFi-encode_ie_ok.c",
            "../dataset/loop_invariants/code2inv/69.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/half.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.v.c",
            "../dataset/loop_invariants/code2inv/101.c",
            "../dataset/loop_invariants/code2inv/86.c",
            "../dataset/loop_invariants/code2inv/119.c",
            "../dataset/loop_invariants/code2inv/123.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/ddlm2013.c"
        ],
        "skipped": [],
        "total": 27,
        "success_count": 6,
        "failure_count": 21,
        "success_rate": 0.2222222222222222
    }
}