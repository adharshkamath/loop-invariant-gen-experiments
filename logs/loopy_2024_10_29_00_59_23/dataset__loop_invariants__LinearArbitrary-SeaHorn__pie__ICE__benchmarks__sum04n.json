{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  for(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant sn == i*a;\nloop invariant !(i > SIZE ==> a != 0);\nloop invariant !(i > SIZE ==> sn != 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= sn <= SIZE * a;\nloop invariant 0 <= i <= SIZE;\nloop invariant SIZE >= 0;\nloop invariant a >= 0;\nloop invariant sn == (i - 1) * a;\nloop invariant sn == (SIZE * (SIZE + 1) * a) / 2;\nloop invariant SIZE * a >= sn >= 0;\nloop invariant sn == (SIZE * a) * (SIZE + 1) / 2;\nloop invariant SIZE >= 0;\nloop invariant a >= 0;\nloop invariant sn == ((i - 1) * a) * (SIZE - i + 1) / 2;\nloop invariant sn == (SIZE * a) * (SIZE + 1) / 2;\nloop invariant SIZE >= 0;\nloop invariant a >= 0;\nloop invariant sn == ((i - 1) * a) * (SIZE - i + 1) / 2;\nloop invariant sn == (SIZE * a) * (SIZE + 1) / 2;\nloop invariant SIZE >= 0;\nloop invariant a >= 0;\nloop invariant sn == ((i - 1) * a) * (SIZE - i + 1) / 2;\nloop invariant sn == (SIZE * a) * (SIZE + 1) / 2;\nloop invariant SIZE >= 0;\nloop invariant a >= 0;\nloop invariant sn == ((i - 1) * a) * (SIZE - i + 1) / 2;\nloop invariant sn == (SIZE * a) * (SIZE + 1) / 2;\nloop invariant SIZE >= 0;\nloop invariant a >= 0;\nloop invariant sn == ((i - 1) * a) * (SIZE - i + 1) / 2;\nloop invariant sn == (SIZE * a) * (SIZE + 1) / 2;\nloop invariant SIZE >= 0;\nloop invariant a >= 0;\nloop invariant sn == ((i - 1) * a) * (SIZE - i + 1) / 2;\nloop invariant sn == (SIZE * a) * (SIZE + 1) / 2;\nloop invariant SIZE >= 0;\nloop invariant a >= 0;\nloop invariant sn == ((i - 1) * a) * (SIZE - i + 1) / 2;\nloop invariant sn == (SIZE * a) * (SIZE + 1) / 2;\nloop invariant SIZE >= 0;\nloop invariant a >= 0;\nloop invariant sn == ((i - 1) * a) * (SIZE - i + 1) / 2;\nloop invariant sn == (SIZE * a) * (SIZE + 1) / 2;\nloop invariant SIZE >= 0;\nloop invariant a >= 0;\nloop invariant sn == ((i - 1) * a) * (SIZE - i + 1) / 2;\nloop invariant sn == (SIZE * a) * (SIZE + 1) / 2;\nloop invariant SIZE >= 0;\nloop invariant a >= 0;\nloop invariant sn == ((i - 1) * a) * (SIZE - i + 1) / 2;\nloop invariant sn == (SIZE * a) * (SIZE + 1) / 2;\nloop invariant SIZE >= 0;\nloop invariant a >= 0;\nloop invariant sn == ((i - 1) * a) * (SIZE - i + 1) / 2;\nloop invariant sn == (SIZE * a) * (SIZE + 1) / 2;\nloop invariant SIZE >= 0;\nloop invariant a >= 0;\nloop invariant sn == ((i - 1) * a) * (SIZE - i + 1) / 2;\nloop invariant sn == (SIZE * a) * (SIZE + 1) / 2;\nloop invariant SIZE >= 0;\nloop invariant a >= 0;\nloop invariant sn == ((i - 1) * a) * (SIZE - i + 1) / 2;\nloop invariant sn == (SIZE * a) * (SIZE + 1) / 2;\nloop invariant SIZE >= 0;\nloop invariant a >= 0;\nloop invariant sn == ((i - 1) * a) * (SIZE - i + 1) / 2;\nloop invariant sn == (SIZE * a) * (SIZE + 1) / 2;\nloop invariant SIZE >= 0;\nloop invariant a >= 0;\nloop invariant sn == ((i - 1) * a) * (SIZE - i + 1) / 2;\nloop invariant sn == (SIZE * a) * (SIZE + 1) / 2;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= SIZE + 1;\nloop invariant sn >= 0;\nloop invariant sn >= i*a;\nloop invariant sn <= i*a;\nloop invariant i >= 1;\nloop invariant i <= SIZE + 1;\nloop invariant sn <= SIZE*a;\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= SIZE + 1;\nloop invariant sn == (i - 1) * a;\nloop invariant SIZE >= 0;\nloop invariant a == 1;\nloop invariant sn <= SIZE * a;\nloop invariant SIZE >= i - 1;\nloop invariant sn + a >= sn;\nloop invariant SIZE >= 0;\nloop invariant a == 1;\nloop invariant sn + a <= sn + a;\nloop invariant SIZE >= i - 1;\nloop invariant sn + a >= sn;\nloop invariant SIZE >= 0;\nloop invariant a == 1;\nloop invariant sn + a <= sn + a;\nloop invariant SIZE >= i - 1;\nloop invariant sn + a >= sn;\nloop invariant SIZE >= 0;\nloop invariant a == 1;\nloop invariant sn + a <= sn + a;\nloop invariant SIZE >= i - 1;\nloop invariant sn + a >= sn;\nloop invariant SIZE >= 0;\nloop invariant a == 1;\nloop invariant sn + a <= sn + a;\nloop invariant SIZE >= i - 1;\nloop invariant sn + a >= sn;\nloop invariant SIZE >= 0;\nloop invariant a == 1;\nloop invariant sn + a <= sn + a;\nloop invariant SIZE >= i - 1;\nloop invariant sn + a >= sn;\nloop invariant SIZE >= 0;\nloop invariant a == 1;\nloop invariant sn + a <= sn + a;\nloop invariant SIZE >= i - 1;\nloop invariant sn + a >= sn;\nloop invariant SIZE >= 0;\nloop invariant a == 1;\nloop invariant sn + a <= sn + a;\nloop invariant SIZE >= i - 1;\nloop invariant sn + a >= sn;\nloop invariant SIZE >= 0;\nloop invariant a == 1;\nloop invariant sn + a <= sn + a;\nloop invariant SIZE >= i - 1;\nloop invariant sn + a >= sn;\nloop invariant SIZE >= 0;\nloop invariant a == 1;\nloop invariant sn + a <= sn + a;\nloop invariant SIZE >= i - 1;\nloop invariant sn + a >= sn;\nloop invariant SIZE >= 0;\nloop invariant a == 1;\nloop invariant sn + a <= sn + a;\nloop invariant SIZE >= i - 1;\nloop invariant sn + a >= sn;\nloop invariant SIZE >= 0;\nloop invariant a == 1;\nloop invariant sn + a <= sn + a;\nloop invariant SIZE >= i - 1;\nloop invariant sn + a >= sn;\nloop invariant SIZE >= 0;\nloop invariant a == 1;\nloop invariant sn + a <= sn + a;\nloop invariant SIZE >= i - 1;\nloop invariant sn + a >= sn;\nloop invariant SIZE >= 0;\nloop invariant a == 1;\nloop invariant sn + a <= sn + a;\nloop invariant SIZE >= i - 1;\nloop invariant sn + a >= sn;\nloop invariant SIZE >= 0;\nloop invariant a == 1;\nloop invariant sn + a <= sn + a;\nloop invariant SIZE >= i - 1;\nloop invariant sn + a >= sn;\nloop invariant SIZE >= 0;\nloop invariant a == 1;\nloop invariant sn + a <= sn + a;\nloop invariant SIZE >= i - 1;\nloop invariant sn + a >= sn;\nloop invariant SIZE >= 0;\nloop invariant a == 1;\nloop invariant sn + a <= sn + a;\nloop invariant SIZE >= i - 1;\nloop invariant sn + a >= sn;\nloop invariant SIZE >= 0;\nloop invariant a == 1;\nloop invariant sn + a <= sn + a;\nloop invariant SIZE >= i - 1;\nloop invariant sn + a >= sn;\nloop invariant SIZE >= 0;\nloop invariant a == 1;\nloop invariant sn + a <= sn + a;\nloop invariant SIZE >= i - 1;\nloop invariant sn + a >= sn;\nloop invariant SIZE >= 0;\nloop invariant a == 1;\nloop invariant sn + a <= sn + a;\nloop invariant SIZE >= i - 1;\nloop invariant sn + a >= sn;\nloop invariant SIZE >= 0;\nloop invariant a == 1;\nloop invariant sn + a <= sn + a;\nloop invariant SIZE >= i - 1;\nloop invariant sn + a >= sn;\nloop invariant SIZE >= 0;\nloop invariant a == 1;\nloop invariant sn + a <= sn + a;\nloop invariant SIZE >= i - 1;\nloop invariant sn + a >= sn;\nloop invariant SIZE >= 0;\nloop invariant a == 1;\nloop invariant sn + a <= sn + a;\nloop invariant SIZE >= i - 1;\nloop invariant sn + a >= sn;\nloop invariant SIZE >= 0;\nloop invariant a == 1;\nloop invariant sn + a <= sn + a;\nloop invariant SIZE >= i - 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= sn <= SIZE * a;\nloop invariant 1 <= i <= SIZE;\nloop invariant sn = (i - 1) * a;\nloop invariant sn >= 0;\nloop invariant sn <= SIZE * a;\nloop invariant i >= 1;\nloop invariant i <= SIZE;\nloop invariant i <= SIZE - sn / a;\nloop invariant sn >= SIZE * a * (1 - i) / i;\nloop invariant sn <= SIZE * a * (i - 1) / (i - 1);\nloop invariant sn = SIZE * a * (i - 1) / (i - 1);\nloop invariant sn = SIZE * a - SIZE * a / i;\nloop invariant sn = SIZE * a - SIZE * a * (i - 1) / i;\nloop invariant sn = SIZE * a - SIZE * a * (i - 1) / (i - 1);\nloop invariant sn = SIZE * a - SIZE * a * (i - 1) / (i - 1);\nloop invariant sn = SIZE * a - SIZE * a * (i - 1) / (i - 1);\nloop invariant sn = SIZE * a - SIZE * a * (i - 1) / (i - 1);\nloop invariant sn = SIZE * a - SIZE * a * (i - 1) / (i - 1);\nloop invariant sn = SIZE * a - SIZE * a * (i - 1) / (i - 1);\nloop invariant sn = SIZE * a - SIZE * a * (i - 1) / (i - 1);\nloop invariant 0 <= sn <= SIZE * a;\nloop invariant 1 <= i <= SIZE;\nloop invariant sn = (i - 1) * a;\nloop invariant sn >= 0;\nloop invariant sn <= SIZE * a;\nloop invariant i >= 1;\nloop invariant i <= SIZE;\nloop invariant i <= SIZE - sn / a;\nloop invariant sn >= SIZE * a * (1 - i) / i;\nloop invariant sn <= SIZE * a * (i - 1) / (i - 1);\nloop invariant sn = SIZE * a * (i - 1) / (i - 1);\nloop invariant sn = SIZE * a - SIZE * a / i;\nloop invariant sn = SIZE * a - SIZE * a * (i - 1) / i;\nloop invariant sn = SIZE * a - SIZE * a * (i - 1) / (i - 1);\nloop invariant sn = SIZE * a - SIZE * a * (i - 1) / (i - 1);\nloop invariant sn = SIZE * a - SIZE * a * (i - 1) / (i - 1);\nloop invariant sn = SIZE * a - SIZE * a * (i - 1) / (i - 1);\nloop invariant sn = SIZE * a - SIZE * a * (i - 1) / (i - 1);\nloop invariant sn = SIZE * a - SIZE * a * (i - 1) / (i - 1);\nloop invariant sn = SIZE * a - SIZE * a * (i - 1) / (i - 1);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant 0 <= sn <= SIZE * a;\nloop invariant sn == i * a;\nloop invariant i * a <= SIZE * a;\nloop invariant i * a == SIZE * a ==> sn == SIZE * a;\nloop invariant SIZE * a <= SIZE * a;\nloop invariant SIZE * a == SIZE * a ==> sn == SIZE * a;\nloop invariant SIZE * a >= SIZE * a;\nloop invariant SIZE * a == SIZE * a ==> sn == SIZE * a;\n*/\n```",
            "```\n/*@\nloop invariant ( sn >= 0);\nloop invariant ( sn <= SIZE * a );\nloop invariant ( sn + a * i == SIZE * a );\nloop invariant ( sn == SIZE * a * i / i );\n*/\n```",
            "```\n/*@\nloop invariant i >= 1;\nloop invariant i <= SIZE;\nloop invariant sn == i * a;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant (sn == (i - 1) * a || sn == SIZE * a || sn == 0);\nloop invariant (i < SIZE ==> (sn == i * a) || (sn == 0));\nloop invariant (i == SIZE ==> sn == SIZE * a || sn == 0);\nloop invariant (i > SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= SIZE + 1;\nloop invariant 0 <= sn <= SIZE * a;\nloop invariant sn == (i - 1) * a;\nloop invariant sn >= 0;\nloop invariant sn <= SIZE * a;\nloop invariant sn == i * a || sn == 0;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant 0 <= sn <= SIZE*a;\nloop invariant sn == i*a;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant 1 <= i <= SIZE ==> sn == i * a;\nloop invariant i == SIZE ==> sn == SIZE * a;\nloop invariant i == SIZE ==> sn == 0;\nloop invariant 0 <= SIZE <= SIZE;\nloop invariant 0 <= sn <= SIZE * a;\n*/\n```",
            "```\n/*@\nloop invariant SIZE >= 0;\nloop invariant i >= 1;\nloop invariant i <= SIZE + 1;\nloop invariant sn >= 0;\nloop invariant sn <= SIZE * a;\nloop invariant (i == SIZE + 1) ==> (sn == SIZE * a);\nloop invariant (i == 1) ==> (sn == 0);\nloop invariant (i > 1 && i <= SIZE) ==> (sn == (i - 1) * a);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant 0 <= sn <= (SIZE * a);\nloop invariant i == sn / a;\nloop invariant i * a == sn;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant sn == i*a;\nloop invariant !(i > SIZE ==> a != 0);\nloop invariant !(i > SIZE ==> sn != 0);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= SIZE is preserved but not established.\nloop invariant sn == i*a is preserved but not established.\nloop invariant !(i > SIZE ==> a != 0) is partially proven to be inductive.\nloop invariant !(i > SIZE ==> sn != 0) is partially proven to be inductive.\nAssertion sn == SIZE * 1 || sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  /*@\n\n\n\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= sn <= SIZE * a;\nloop invariant 0 <= i <= SIZE;\nloop invariant SIZE >= 0;\nloop invariant a >= 0;\nloop invariant sn == (i - 1) * a;\nloop invariant sn == (SIZE * (SIZE + 1) * a) / 2;\nloop invariant SIZE * a >= sn >= 0;\nloop invariant sn == (SIZE * a) * (SIZE + 1) / 2;\nloop invariant SIZE >= 0;\nloop invariant a >= 0;\nloop invariant sn == ((i - 1) * a) * (SIZE - i + 1) / 2;\nloop invariant sn == (SIZE * a) * (SIZE + 1) / 2;\nloop invariant SIZE >= 0;\nloop invariant a >= 0;\nloop invariant sn == ((i - 1) * a) * (SIZE - i + 1) / 2;\nloop invariant sn == (SIZE * a) * (SIZE + 1) / 2;\nloop invariant SIZE >= 0;\nloop invariant a >= 0;\nloop invariant sn == ((i - 1) * a) * (SIZE - i + 1) / 2;\nloop invariant sn == (SIZE * a) * (SIZE + 1) / 2;\nloop invariant SIZE >= 0;\nloop invariant a >= 0;\nloop invariant sn == ((i - 1) * a) * (SIZE - i + 1) / 2;\nloop invariant sn == (SIZE * a) * (SIZE + 1) / 2;\nloop invariant SIZE >= 0;\nloop invariant a >= 0;\nloop invariant sn == ((i - 1) * a) * (SIZE - i + 1) / 2;\nloop invariant sn == (SIZE * a) * (SIZE + 1) / 2;\nloop invariant SIZE >= 0;\nloop invariant a >= 0;\nloop invariant sn == ((i - 1) * a) * (SIZE - i + 1) / 2;\nloop invariant sn == (SIZE * a) * (SIZE + 1) / 2;\nloop invariant SIZE >= 0;\nloop invariant a >= 0;\nloop invariant sn == ((i - 1) * a) * (SIZE - i + 1) / 2;\nloop invariant sn == (SIZE * a) * (SIZE + 1) / 2;\nloop invariant SIZE >= 0;\nloop invariant a >= 0;\nloop invariant sn == ((i - 1) * a) * (SIZE - i + 1) / 2;\nloop invariant sn == (SIZE * a) * (SIZE + 1) / 2;\nloop invariant SIZE >= 0;\nloop invariant a >= 0;\nloop invariant sn == ((i - 1) * a) * (SIZE - i + 1) / 2;\nloop invariant sn == (SIZE * a) * (SIZE + 1) / 2;\nloop invariant SIZE >= 0;\nloop invariant a >= 0;\nloop invariant sn == ((i - 1) * a) * (SIZE - i + 1) / 2;\nloop invariant sn == (SIZE * a) * (SIZE + 1) / 2;\nloop invariant SIZE >= 0;\nloop invariant a >= 0;\nloop invariant sn == ((i - 1) * a) * (SIZE - i + 1) / 2;\nloop invariant sn == (SIZE * a) * (SIZE + 1) / 2;\nloop invariant SIZE >= 0;\nloop invariant a >= 0;\nloop invariant sn == ((i - 1) * a) * (SIZE - i + 1) / 2;\nloop invariant sn == (SIZE * a) * (SIZE + 1) / 2;\nloop invariant SIZE >= 0;\nloop invariant a >= 0;\nloop invariant sn == ((i - 1) * a) * (SIZE - i + 1) / 2;\nloop invariant sn == (SIZE * a) * (SIZE + 1) / 2;\nloop invariant SIZE >= 0;\nloop invariant a >= 0;\nloop invariant sn == ((i - 1) * a) * (SIZE - i + 1) / 2;\nloop invariant sn == (SIZE * a) * (SIZE + 1) / 2;\nloop invariant SIZE >= 0;\nloop invariant a >= 0;\nloop invariant sn == ((i - 1) * a) * (SIZE - i + 1) / 2;\nloop invariant sn == (SIZE * a) * (SIZE + 1) / 2;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= sn <= SIZE * a is preserved but not established.\nloop invariant 0 <= i <= SIZE is preserved but not established.\nloop invariant SIZE >= 0 is partially proven to be inductive.\nloop invariant a >= 0 is partially proven to be inductive.\nloop invariant sn == (i - 1) * a is partially proven to be inductive.\nloop invariant sn == (SIZE * (SIZE + 1) * a) / 2 is preserved but not established.\nloop invariant SIZE * a >= sn >= 0 is partially proven to be inductive.\nloop invariant sn == (SIZE * a) * (SIZE + 1) / 2 is partially proven to be inductive.\nloop invariant sn == ((i - 1) * a) * (SIZE - i + 1) / 2 is partially proven to be inductive.\nAssertion sn == SIZE * 1 || sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  /*@\n\n\n\nloop invariant i4: a >= 0;\nloop invariant i5: sn == (i - 1) * a;\n\n\n\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= SIZE + 1;\nloop invariant sn >= 0;\nloop invariant sn >= i*a;\nloop invariant sn <= i*a;\nloop invariant i >= 1;\nloop invariant i <= SIZE + 1;\nloop invariant sn <= SIZE*a;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= i <= SIZE + 1 is preserved but not established.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn >= i*a is preserved but not established.\nloop invariant sn <= i*a is partially proven to be inductive.\nloop invariant i >= 1 is partially proven to be inductive.\nloop invariant i <= SIZE + 1 is partially proven to be inductive.\nloop invariant sn <= SIZE*a is partially proven to be inductive.\nAssertion sn == SIZE * 1 || sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  /*@\n\nloop invariant i2: sn >= 0;\n\nloop invariant i4: sn <= i*a;\nloop invariant i5: i >= 1;\n\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\n\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 15: unexpected token ''",
                "houdini_error": "No annotations found"
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= SIZE + 1;\nloop invariant sn == (i - 1) * a;\nloop invariant SIZE >= 0;\nloop invariant a == 1;\nloop invariant sn <= SIZE * a;\nloop invariant SIZE >= i - 1;\nloop invariant sn + a >= sn;\nloop invariant SIZE >= 0;\nloop invariant a == 1;\nloop invariant sn + a <= sn + a;\nloop invariant SIZE >= i - 1;\nloop invariant sn + a >= sn;\nloop invariant SIZE >= 0;\nloop invariant a == 1;\nloop invariant sn + a <= sn + a;\nloop invariant SIZE >= i - 1;\nloop invariant sn + a >= sn;\nloop invariant SIZE >= 0;\nloop invariant a == 1;\nloop invariant sn + a <= sn + a;\nloop invariant SIZE >= i - 1;\nloop invariant sn + a >= sn;\nloop invariant SIZE >= 0;\nloop invariant a == 1;\nloop invariant sn + a <= sn + a;\nloop invariant SIZE >= i - 1;\nloop invariant sn + a >= sn;\nloop invariant SIZE >= 0;\nloop invariant a == 1;\nloop invariant sn + a <= sn + a;\nloop invariant SIZE >= i - 1;\nloop invariant sn + a >= sn;\nloop invariant SIZE >= 0;\nloop invariant a == 1;\nloop invariant sn + a <= sn + a;\nloop invariant SIZE >= i - 1;\nloop invariant sn + a >= sn;\nloop invariant SIZE >= 0;\nloop invariant a == 1;\nloop invariant sn + a <= sn + a;\nloop invariant SIZE >= i - 1;\nloop invariant sn + a >= sn;\nloop invariant SIZE >= 0;\nloop invariant a == 1;\nloop invariant sn + a <= sn + a;\nloop invariant SIZE >= i - 1;\nloop invariant sn + a >= sn;\nloop invariant SIZE >= 0;\nloop invariant a == 1;\nloop invariant sn + a <= sn + a;\nloop invariant SIZE >= i - 1;\nloop invariant sn + a >= sn;\nloop invariant SIZE >= 0;\nloop invariant a == 1;\nloop invariant sn + a <= sn + a;\nloop invariant SIZE >= i - 1;\nloop invariant sn + a >= sn;\nloop invariant SIZE >= 0;\nloop invariant a == 1;\nloop invariant sn + a <= sn + a;\nloop invariant SIZE >= i - 1;\nloop invariant sn + a >= sn;\nloop invariant SIZE >= 0;\nloop invariant a == 1;\nloop invariant sn + a <= sn + a;\nloop invariant SIZE >= i - 1;\nloop invariant sn + a >= sn;\nloop invariant SIZE >= 0;\nloop invariant a == 1;\nloop invariant sn + a <= sn + a;\nloop invariant SIZE >= i - 1;\nloop invariant sn + a >= sn;\nloop invariant SIZE >= 0;\nloop invariant a == 1;\nloop invariant sn + a <= sn + a;\nloop invariant SIZE >= i - 1;\nloop invariant sn + a >= sn;\nloop invariant SIZE >= 0;\nloop invariant a == 1;\nloop invariant sn + a <= sn + a;\nloop invariant SIZE >= i - 1;\nloop invariant sn + a >= sn;\nloop invariant SIZE >= 0;\nloop invariant a == 1;\nloop invariant sn + a <= sn + a;\nloop invariant SIZE >= i - 1;\nloop invariant sn + a >= sn;\nloop invariant SIZE >= 0;\nloop invariant a == 1;\nloop invariant sn + a <= sn + a;\nloop invariant SIZE >= i - 1;\nloop invariant sn + a >= sn;\nloop invariant SIZE >= 0;\nloop invariant a == 1;\nloop invariant sn + a <= sn + a;\nloop invariant SIZE >= i - 1;\nloop invariant sn + a >= sn;\nloop invariant SIZE >= 0;\nloop invariant a == 1;\nloop invariant sn + a <= sn + a;\nloop invariant SIZE >= i - 1;\nloop invariant sn + a >= sn;\nloop invariant SIZE >= 0;\nloop invariant a == 1;\nloop invariant sn + a <= sn + a;\nloop invariant SIZE >= i - 1;\nloop invariant sn + a >= sn;\nloop invariant SIZE >= 0;\nloop invariant a == 1;\nloop invariant sn + a <= sn + a;\nloop invariant SIZE >= i - 1;\nloop invariant sn + a >= sn;\nloop invariant SIZE >= 0;\nloop invariant a == 1;\nloop invariant sn + a <= sn + a;\nloop invariant SIZE >= i - 1;\nloop invariant sn + a >= sn;\nloop invariant SIZE >= 0;\nloop invariant a == 1;\nloop invariant sn + a <= sn + a;\nloop invariant SIZE >= i - 1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= SIZE + 1 is preserved but not established.\nloop invariant sn == (i - 1) * a is partially proven to be inductive.\nloop invariant SIZE >= 0 is partially proven to be inductive.\nloop invariant a == 1 is partially proven to be inductive.\nloop invariant sn <= SIZE * a is partially proven to be inductive.\nloop invariant SIZE >= i - 1 is partially proven to be inductive.\nloop invariant sn + a >= sn is partially proven to be inductive.\nloop invariant sn + a <= sn + a is partially proven to be inductive.\nAssertion sn == SIZE * 1 || sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  /*@\n\nloop invariant i2: sn == (i - 1) * a;\n\nloop invariant i4: a == 1;\n\n\nloop invariant i7: sn + a >= sn;\nloop invariant i8: sn + a <= sn + a;\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 9,
                "annotations": "```\n/*@\nloop invariant 0 <= sn <= SIZE * a;\nloop invariant 1 <= i <= SIZE;\nloop invariant sn = (i - 1) * a;\nloop invariant sn >= 0;\nloop invariant sn <= SIZE * a;\nloop invariant i >= 1;\nloop invariant i <= SIZE;\nloop invariant i <= SIZE - sn / a;\nloop invariant sn >= SIZE * a * (1 - i) / i;\nloop invariant sn <= SIZE * a * (i - 1) / (i - 1);\nloop invariant sn = SIZE * a * (i - 1) / (i - 1);\nloop invariant sn = SIZE * a - SIZE * a / i;\nloop invariant sn = SIZE * a - SIZE * a * (i - 1) / i;\nloop invariant sn = SIZE * a - SIZE * a * (i - 1) / (i - 1);\nloop invariant sn = SIZE * a - SIZE * a * (i - 1) / (i - 1);\nloop invariant sn = SIZE * a - SIZE * a * (i - 1) / (i - 1);\nloop invariant sn = SIZE * a - SIZE * a * (i - 1) / (i - 1);\nloop invariant sn = SIZE * a - SIZE * a * (i - 1) / (i - 1);\nloop invariant sn = SIZE * a - SIZE * a * (i - 1) / (i - 1);\nloop invariant sn = SIZE * a - SIZE * a * (i - 1) / (i - 1);\nloop invariant 0 <= sn <= SIZE * a;\nloop invariant 1 <= i <= SIZE;\nloop invariant sn = (i - 1) * a;\nloop invariant sn >= 0;\nloop invariant sn <= SIZE * a;\nloop invariant i >= 1;\nloop invariant i <= SIZE;\nloop invariant i <= SIZE - sn / a;\nloop invariant sn >= SIZE * a * (1 - i) / i;\nloop invariant sn <= SIZE * a * (i - 1) / (i - 1);\nloop invariant sn = SIZE * a * (i - 1) / (i - 1);\nloop invariant sn = SIZE * a - SIZE * a / i;\nloop invariant sn = SIZE * a - SIZE * a * (i - 1) / i;\nloop invariant sn = SIZE * a - SIZE * a * (i - 1) / (i - 1);\nloop invariant sn = SIZE * a - SIZE * a * (i - 1) / (i - 1);\nloop invariant sn = SIZE * a - SIZE * a * (i - 1) / (i - 1);\nloop invariant sn = SIZE * a - SIZE * a * (i - 1) / (i - 1);\nloop invariant sn = SIZE * a - SIZE * a * (i - 1) / (i - 1);\nloop invariant sn = SIZE * a - SIZE * a * (i - 1) / (i - 1);\nloop invariant sn = SIZE * a - SIZE * a * (i - 1) / (i - 1);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 17: Assignment operators not allowed in annotations.",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  /*@\n\n\n\nloop invariant i4: sn >= 0;\n\nloop invariant i6: i >= 1;\n\n\nloop invariant i9: sn >= SIZE * a * (1 - i) / i;\n\n\n\n\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant 0 <= sn <= SIZE * a;\nloop invariant sn == i * a;\nloop invariant i * a <= SIZE * a;\nloop invariant i * a == SIZE * a ==> sn == SIZE * a;\nloop invariant SIZE * a <= SIZE * a;\nloop invariant SIZE * a == SIZE * a ==> sn == SIZE * a;\nloop invariant SIZE * a >= SIZE * a;\nloop invariant SIZE * a == SIZE * a ==> sn == SIZE * a;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= SIZE is preserved but not established.\nloop invariant 0 <= sn <= SIZE * a is partially proven to be inductive.\nloop invariant sn == i * a is preserved but not established.\nloop invariant i * a <= SIZE * a is partially proven to be inductive.\nloop invariant i * a == SIZE * a ==> sn == SIZE * a is partially proven to be inductive.\nloop invariant SIZE * a <= SIZE * a is partially proven to be inductive.\nloop invariant SIZE * a == SIZE * a ==> sn == SIZE * a is partially proven to be inductive.\nloop invariant SIZE * a >= SIZE * a is partially proven to be inductive.\nAssertion sn == SIZE * 1 || sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  /*@\n\n\n\n\n\nloop invariant i6: SIZE * a <= SIZE * a;\n\nloop invariant i8: SIZE * a >= SIZE * a;\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant ( sn >= 0);\nloop invariant ( sn <= SIZE * a );\nloop invariant ( sn + a * i == SIZE * a );\nloop invariant ( sn == SIZE * a * i / i );\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant ( sn >= 0) is partially proven to be inductive.\nloop invariant ( sn <= SIZE * a ) is preserved but not established.\nloop invariant ( sn + a * i == SIZE * a ) is preserved but not established.\nloop invariant ( sn == SIZE * a * i / i ) is preserved but not established.\nAssertion sn == SIZE * 1 || sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  /*@\nloop invariant i1: ( sn >= 0);\n\n\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant i >= 1;\nloop invariant i <= SIZE;\nloop invariant sn == i * a;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant i >= 1 is partially proven to be inductive.\nloop invariant i <= SIZE is preserved but not established.\nloop invariant sn == i * a is preserved but not established.\nAssertion sn == SIZE * 1 || sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  /*@\nloop invariant i1: i >= 1;\n\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant (sn == (i - 1) * a || sn == SIZE * a || sn == 0);\nloop invariant (i < SIZE ==> (sn == i * a) || (sn == 0));\nloop invariant (i == SIZE ==> sn == SIZE * a || sn == 0);\nloop invariant (i > SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= SIZE is neither established nor preserved.\nloop invariant (sn == (i - 1) * a || sn == SIZE * a || sn == 0) is established but not preserved.\nloop invariant (i < SIZE ==> (sn == i * a) || (sn == 0)) is established but not preserved.\nloop invariant (i == SIZE ==> sn == SIZE * a || sn == 0) is established but not preserved.\nloop invariant (i > SIZE ==> (sn == SIZE * a) || (sn == 0)) is partially proven to be inductive.\nloop invariant (i >= SIZE ==> (sn == SIZE * a) || (sn == 0)) is partially proven to be inductive.\nAssertion sn == SIZE * 1 || sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  /*@\n\n\n\n\n\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= SIZE + 1;\nloop invariant 0 <= sn <= SIZE * a;\nloop invariant sn == (i - 1) * a;\nloop invariant sn >= 0;\nloop invariant sn <= SIZE * a;\nloop invariant sn == i * a || sn == 0;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= i <= SIZE + 1 is preserved but not established.\nloop invariant 0 <= sn <= SIZE * a is partially proven to be inductive.\nloop invariant sn == (i - 1) * a is partially proven to be inductive.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn <= SIZE * a is partially proven to be inductive.\nloop invariant sn == i * a || sn == 0 is established but not preserved.\nloop invariant sn == i * a || sn == 0 || sn == SIZE * a is partially proven to be inductive.\nAssertion sn == SIZE * 1 || sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  /*@\n\n\nloop invariant i3: sn == (i - 1) * a;\nloop invariant i4: sn >= 0;\n\n\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant 0 <= sn <= SIZE*a;\nloop invariant sn == i*a;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= SIZE is preserved but not established.\nloop invariant 0 <= sn <= SIZE*a is partially proven to be inductive.\nloop invariant sn == i*a is preserved but not established.\nAssertion sn == SIZE * 1 || sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  /*@\n\n\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant 1 <= i <= SIZE ==> sn == i * a;\nloop invariant i == SIZE ==> sn == SIZE * a;\nloop invariant i == SIZE ==> sn == 0;\nloop invariant 0 <= SIZE <= SIZE;\nloop invariant 0 <= sn <= SIZE * a;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= SIZE is preserved but not established.\nloop invariant 1 <= i <= SIZE ==> sn == i * a is preserved but not established.\nloop invariant i == SIZE ==> sn == SIZE * a is partially proven to be inductive.\nloop invariant i == SIZE ==> sn == 0 is partially proven to be inductive.\nloop invariant 0 <= SIZE <= SIZE is partially proven to be inductive.\nloop invariant 0 <= sn <= SIZE * a is partially proven to be inductive.\nAssertion sn == SIZE * 1 || sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  /*@\n\n\n\n\n\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant SIZE >= 0;\nloop invariant i >= 1;\nloop invariant i <= SIZE + 1;\nloop invariant sn >= 0;\nloop invariant sn <= SIZE * a;\nloop invariant (i == SIZE + 1) ==> (sn == SIZE * a);\nloop invariant (i == 1) ==> (sn == 0);\nloop invariant (i > 1 && i <= SIZE) ==> (sn == (i - 1) * a);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant SIZE >= 0 is preserved but not established.\nloop invariant i >= 1 is partially proven to be inductive.\nloop invariant i <= SIZE + 1 is partially proven to be inductive.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn <= SIZE * a is partially proven to be inductive.\nloop invariant (i == SIZE + 1) ==> (sn == SIZE * a) is partially proven to be inductive.\nloop invariant (i == 1) ==> (sn == 0) is partially proven to be inductive.\nloop invariant (i > 1 && i <= SIZE) ==> (sn == (i - 1) * a) is partially proven to be inductive.\nAssertion sn == SIZE * 1 || sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  /*@\n\nloop invariant i2: i >= 1;\n\nloop invariant i4: sn >= 0;\n\nloop invariant i6: (i == SIZE + 1) ==> (sn == SIZE * a);\nloop invariant i7: (i == 1) ==> (sn == 0);\nloop invariant i8: (i > 1 && i <= SIZE) ==> (sn == (i - 1) * a);\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant 0 <= sn <= (SIZE * a);\nloop invariant i == sn / a;\nloop invariant i * a == sn;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= SIZE is preserved but not established.\nloop invariant 0 <= sn <= (SIZE * a) is partially proven to be inductive.\nloop invariant i == sn / a is preserved but not established.\nloop invariant i * a == sn is partially proven to be inductive.\nAssertion sn == SIZE * 1 || sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  /*@\n\n\n\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 41: Assignment operators not allowed in annotations.",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  /*@\nloop invariant i1: 0 <= i <= SIZE;\nloop invariant i2: sn == i*a;\nloop invariant i3: !(i > SIZE ==> a != 0);\nloop invariant i4: !(i > SIZE ==> sn != 0);\nloop invariant i5: 0 <= sn <= SIZE * a;\nloop invariant i6: SIZE >= 0;\nloop invariant i7: a >= 0;\nloop invariant i8: sn == (i - 1) * a;\nloop invariant i9: sn == (SIZE * (SIZE + 1) * a) / 2;\nloop invariant i10: SIZE * a >= sn >= 0;\nloop invariant i11: sn == (SIZE * a) * (SIZE + 1) / 2;\nloop invariant i12: sn == ((i - 1) * a) * (SIZE - i + 1) / 2;\nloop invariant i13: 1 <= i <= SIZE + 1;\nloop invariant i14: sn >= 0;\nloop invariant i15: sn >= i*a;\nloop invariant i16: sn <= i*a;\nloop invariant i17: i >= 1;\nloop invariant i18: i <= SIZE + 1;\nloop invariant i19: sn <= SIZE*a;\nloop invariant i20: 0 <= i <= SIZE + 1;\nloop invariant i21: a == 1;\nloop invariant i22: sn <= SIZE * a;\nloop invariant i23: SIZE >= i - 1;\nloop invariant i24: sn + a >= sn;\nloop invariant i25: sn + a <= sn + a;\nloop invariant i26: 1 <= i <= SIZE;\nloop invariant i27: sn = (i - 1) * a;\nloop invariant i28: i <= SIZE;\nloop invariant i29: i <= SIZE - sn / a;\nloop invariant i30: sn >= SIZE * a * (1 - i) / i;\nloop invariant i31: sn <= SIZE * a * (i - 1) / (i - 1);\nloop invariant i32: sn = SIZE * a * (i - 1) / (i - 1);\nloop invariant i33: sn = SIZE * a - SIZE * a / i;\nloop invariant i34: sn = SIZE * a - SIZE * a * (i - 1) / i;\nloop invariant i35: sn = SIZE * a - SIZE * a * (i - 1) / (i - 1);\nloop invariant i36: sn == i * a;\nloop invariant i37: i * a <= SIZE * a;\nloop invariant i38: i * a == SIZE * a ==> sn == SIZE * a;\nloop invariant i39: SIZE * a <= SIZE * a;\nloop invariant i40: SIZE * a == SIZE * a ==> sn == SIZE * a;\nloop invariant i41: SIZE * a >= SIZE * a;\nloop invariant i42: ( sn >= 0);\nloop invariant i43: ( sn <= SIZE * a );\nloop invariant i44: ( sn + a * i == SIZE * a );\nloop invariant i45: ( sn == SIZE * a * i / i );\nloop invariant i46: (sn == (i - 1) * a || sn == SIZE * a || sn == 0);\nloop invariant i47: (i < SIZE ==> (sn == i * a) || (sn == 0));\nloop invariant i48: (i == SIZE ==> sn == SIZE * a || sn == 0);\nloop invariant i49: (i > SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant i50: (i >= SIZE ==> (sn == SIZE * a) || (sn == 0));\nloop invariant i51: sn == i * a || sn == 0;\nloop invariant i52: sn == i * a || sn == 0 || sn == SIZE * a;\nloop invariant i53: 0 <= sn <= SIZE*a;\nloop invariant i54: 1 <= i <= SIZE ==> sn == i * a;\nloop invariant i55: i == SIZE ==> sn == SIZE * a;\nloop invariant i56: i == SIZE ==> sn == 0;\nloop invariant i57: 0 <= SIZE <= SIZE;\nloop invariant i58: (i == SIZE + 1) ==> (sn == SIZE * a);\nloop invariant i59: (i == 1) ==> (sn == 0);\nloop invariant i60: (i > 1 && i <= SIZE) ==> (sn == (i - 1) * a);\nloop invariant i61: 0 <= sn <= (SIZE * a);\nloop invariant i62: i == sn / a;\nloop invariant i63: i * a == sn;\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
        "combined_annotation_num_solver_calls": 21,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  /*@\n\n\n\n\n\n\nloop invariant i7: a >= 0;\nloop invariant i8: sn == (i - 1) * a;\n\n\n\n\n\nloop invariant i14: sn >= 0;\n\nloop invariant i16: sn <= i*a;\nloop invariant i17: i >= 1;\n\n\n\nloop invariant i21: a == 1;\n\n\nloop invariant i24: sn + a >= sn;\nloop invariant i25: sn + a <= sn + a;\n\n\n\n\nloop invariant i30: sn >= SIZE * a * (1 - i) / i;\n\n\n\n\n\n\n\n\nloop invariant i39: SIZE * a <= SIZE * a;\n\nloop invariant i41: SIZE * a >= SIZE * a;\nloop invariant i42: ( sn >= 0);\n\n\n\nloop invariant i46: (sn == (i - 1) * a || sn == SIZE * a || sn == 0);\n\n\nloop invariant i49: (i > SIZE ==> (sn == SIZE * a) || (sn == 0));\n\n\n\n\n\n\n\n\nloop invariant i58: (i == SIZE + 1) ==> (sn == SIZE * a);\nloop invariant i59: (i == 1) ==> (sn == 0);\nloop invariant i60: (i > 1 && i <= SIZE) ==> (sn == (i - 1) * a);\n\n\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_nondet_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum01_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/22.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/85.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/ex2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/42.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/diamond_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/odd.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/even.c",
            "../dataset/loop_invariants/code2inv/24.c",
            "../dataset/loop_invariants/code2inv/130.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/diamond_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/overflow_safe1.c",
            "../dataset/loop_invariants/code2inv/113.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/ddlm2013_true-unreach-call.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/MADWiFi-encode_ie_ok.c",
            "../dataset/loop_invariants/code2inv/69.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/half.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.v.c",
            "../dataset/loop_invariants/code2inv/101.c"
        ],
        "skipped": [],
        "total": 21,
        "success_count": 4,
        "failure_count": 17,
        "success_rate": 0.19047619047619047
    }
}