{
    "logs": {
        "file": "../dataset/loop_invariants/accelerating_invariant_generation/crafted/overflow_safe1.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 10;\n\n  while (x >= 10) {\n    x += 2;\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
        "success": false,
        "annotation_blocks": [
            "```\n/*@\nloop invariant x >= 10;\nloop invariant x <= 20;\nloop invariant x % 2 == 0;\nloop invariant x >= 10 ==> x % 2 == 0;\nloop invariant x <= 20 ==> x % 2 == 0;\nloop invariant x >= 10 && x % 2 == 0 ==> x >= 10;\nloop invariant x <= 20 && x % 2 == 0 ==> x <= 20;\nloop invariant x % 2 == 0 ==> x >= 10 && x <= 20;\nloop invariant x >= 10 && x <= 20 ==> x % 2 == 0;\nloop invariant x >= 10 && x <= 20 ==> x % 2 == 0;\nloop invariant x % 2 == 0 ==> x >= 10 && x <= 20;\nloop invariant x >= 10 && x % 2 == 0 ==> x <= 20;\nloop invariant x % 2 == 0 ==> x >= 10 && x <= 20;\nloop invariant x >= 10 && x <= 20 ==> x % 2 == 0;\n*/\n```",
            "```\n/*@\nloop invariant x <= 10;\nloop invariant x >= 10;\nloop invariant x % 2 == 0 ==> x >= 10;\nloop invariant !(x % 2 == 0) ==> x < 10;\nloop invariant x % 2 == 0 ==> x <= 10;\nloop invariant !(x % 2 == 0) ==> x >= 10;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant !(x % 2 == 0) ==> x % 2 != 0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant !(x % 2 == 0) ==> x % 2 != 0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant !(x % 2 == 0) ==> x % 2 != 0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant !(x % 2 == 0) ==> x % 2 != 0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant !(x % 2 == 0) ==> x % 2 != 0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant !(x % 2 == 0) ==> x % 2 != 0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant !(x % 2 == 0) ==> x % 2 != 0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant !(x % 2 == 0) ==> x % 2 != 0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant !(x % 2 == 0) ==> x % 2 != 0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant !(x % 2 == 0) ==> x % 2 != 0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant !(x % 2 == 0) ==> x % 2 != 0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant !(x % 2 == 0) ==> x % 2 != 0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant !(x % 2 == 0) ==> x % 2 != 0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant !(x % 2 == 0) ==> x % 2 != 0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant !(x % 2 == 0) ==> x % 2 != 0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant !(x % 2 == 0) ==> x % 2 != 0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant !(x % 2 == 0) ==> x % 2 != 0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant !(x % 2 == 0) ==> x % 2 != 0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant !(x % 2 == 0) ==> x % 2 != 0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant !(x % 2 == 0) ==> x % 2 != 0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant !(x % 2 == 0) ==> x % 2 != 0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant !(x % 2 == 0) ==> x % 2 != 0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant !(x % 2 == 0) ==> x % 2 != 0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant !(x % 2 == 0) ==> x % 2 != 0;\n*/\n```",
            "```\n/*@\nloop invariant 10 <= x;\nloop invariant x < 12;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= 10;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 2147483647;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 10;\nloop invariant x % 2 == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x;\nloop invariant x >= 10;\nloop invariant (x % 2 == 0);\nloop invariant x <= 2147483647;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 10;\nloop invariant x % 2 == 0 ==> x >= 2;\nloop invariant !(x % 2) ==> x >= 10;\nloop invariant (x % 2) ==> x >= 12;\nloop invariant x % 2 == 0 ==> x >= 10;\nloop invariant x % 2 != 0 ==> x >= 11;\nloop invariant !(x % 2) ==> x >= 10;\nloop invariant (x % 2) ==> x >= 12;\nloop invariant x % 2 == 0 ==> x >= 10;\nloop invariant x % 2 != 0 ==> x >= 11;\nloop invariant !(x % 2) ==> x >= 10;\nloop invariant (x % 2) ==> x >= 12;\nloop invariant x % 2 == 0 ==> x >= 10;\nloop invariant x % 2 != 0 ==> x >= 11;\nloop invariant !(x % 2) ==> x >= 10;\nloop invariant (x % 2) ==> x >= 12;\nloop invariant x % 2 == 0 ==> x >= 10;\nloop invariant x % 2 != 0 ==> x >= 11;\nloop invariant !(x % 2) ==> x >= 10;\nloop invariant (x % 2) ==> x >= 12;\nloop invariant x % 2 == 0 ==> x >= 10;\nloop invariant x % 2 != 0 ==> x >= 11;\nloop invariant !(x % 2) ==> x >= 10;\nloop invariant (x % 2) ==> x >= 12;\nloop invariant x % 2 == 0 ==> x >= 10;\nloop invariant x % 2 != 0 ==> x >= 11;\nloop invariant !(x % 2) ==> x >= 10;\nloop invariant (x % 2) ==> x >= 12;\nloop invariant x % 2 == 0 ==> x >= 10;\nloop invariant x % 2 != 0 ==> x >= 11;\nloop invariant !(x % 2) ==> x >= 10;\nloop invariant (x % 2) ==> x >= 12;\nloop invariant x % 2 == 0 ==> x >= 10;\nloop invariant x % 2 != 0 ==> x >= 11;\nloop invariant !(x % 2) ==> x >= 10;\nloop invariant (x % 2) ==> x >= 12;\nloop invariant x % 2 == 0 ==> x >= 10;\nloop invariant x % 2 != 0 ==> x >= 11;\nloop invariant !(x % 2) ==> x >= 10;\nloop invariant (x % 2) ==> x >= 12;\nloop invariant x % 2 == 0 ==> x >= 10;\nloop invariant x % 2 != 0 ==> x >= 11;\nloop invariant !(x % 2) ==> x >= 10;\nloop invariant (x % 2) ==> x >= 12;\nloop invariant x % 2 == 0 ==> x >= 10;\nloop invariant x % 2 != 0 ==> x >= 11;\nloop invariant !(x % 2) ==> x >= 10;\nloop invariant (x % 2) ==> x >= 12;\nloop invariant x % 2 == 0 ==> x >= 10;\nloop invariant x % 2 != 0 ==> x >= 11;\nloop invariant !(x % 2) ==> x >= 10;\nloop invariant (x % 2) ==> x >= 12;\nloop invariant x % 2 == 0 ==> x >= 10;\nloop invariant x % 2 != 0 ==> x >= 11;\nloop invariant !(x % 2) ==> x >= 10;\nloop invariant (x % 2) ==> x >= 12;\nloop invariant x % 2 == 0 ==> x >= 10;\nloop invariant x % 2 != 0 ==> x >= 11;\nloop invariant !(x % 2) ==> x >= 10;\nloop invariant (x % 2) ==> x >= 12;\nloop invariant x % 2 == 0 ==> x >= 10;\nloop invariant x % 2 != 0 ==> x >= 11;\nloop invariant !(x % 2) ==> x >= 10;\nloop invariant (x % 2) ==> x >= 12;\n*/\n```",
            "```\n/*@\nloop invariant 10 <= x <= 20;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 10;\nloop invariant x % 2 == 0 ==> x >= 10;\nloop invariant x % 2 != 0 ==> x < 10;\nloop invariant x % 2 == 0 ==> x >= 10 ==> x <= 12;\nloop invariant x % 2 == 0 ==> x >= 10 ==> x % 2 == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 10;\nloop invariant (x % 2 == 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x;\nloop invariant x <= UINT_MAX;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 2147483647;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= 12;\nloop invariant x <= 2147483646;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 20;\nloop invariant (x % 2) == 0;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 8,
                "annotations": "```\n/*@\nloop invariant x >= 10;\nloop invariant x <= 20;\nloop invariant x % 2 == 0;\nloop invariant x >= 10 ==> x % 2 == 0;\nloop invariant x <= 20 ==> x % 2 == 0;\nloop invariant x >= 10 && x % 2 == 0 ==> x >= 10;\nloop invariant x <= 20 && x % 2 == 0 ==> x <= 20;\nloop invariant x % 2 == 0 ==> x >= 10 && x <= 20;\nloop invariant x >= 10 && x <= 20 ==> x % 2 == 0;\nloop invariant x >= 10 && x <= 20 ==> x % 2 == 0;\nloop invariant x % 2 == 0 ==> x >= 10 && x <= 20;\nloop invariant x >= 10 && x % 2 == 0 ==> x <= 20;\nloop invariant x % 2 == 0 ==> x >= 10 && x <= 20;\nloop invariant x >= 10 && x <= 20 ==> x % 2 == 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x >= 10 is partially proven to be inductive.\nloop invariant x <= 20 is established but not preserved.\nloop invariant x % 2 == 0 is partially proven to be inductive.\nloop invariant x >= 10 ==> x % 2 == 0 is partially proven to be inductive.\nloop invariant x <= 20 ==> x % 2 == 0 is partially proven to be inductive.\nloop invariant x >= 10 && x % 2 == 0 ==> x >= 10 is partially proven to be inductive.\nloop invariant x <= 20 && x % 2 == 0 ==> x <= 20 is partially proven to be inductive.\nloop invariant x % 2 == 0 ==> x >= 10 && x <= 20 is partially proven to be inductive.\nloop invariant x >= 10 && x <= 20 ==> x % 2 == 0 is partially proven to be inductive.\nloop invariant x >= 10 && x % 2 == 0 ==> x <= 20 is partially proven to be inductive.\nAssertion x % 2 == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 10;\n\n  /*@\n\n\n\n\n\nloop invariant i6: x >= 10 && x % 2 == 0 ==> x >= 10;\nloop invariant i7: x <= 20 && x % 2 == 0 ==> x <= 20;\n\n\n\n*/\nwhile (x >= 10) {\n    x += 2;\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant x <= 10;\nloop invariant x >= 10;\nloop invariant x % 2 == 0 ==> x >= 10;\nloop invariant !(x % 2 == 0) ==> x < 10;\nloop invariant x % 2 == 0 ==> x <= 10;\nloop invariant !(x % 2 == 0) ==> x >= 10;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant !(x % 2 == 0) ==> x % 2 != 0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant !(x % 2 == 0) ==> x % 2 != 0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant !(x % 2 == 0) ==> x % 2 != 0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant !(x % 2 == 0) ==> x % 2 != 0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant !(x % 2 == 0) ==> x % 2 != 0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant !(x % 2 == 0) ==> x % 2 != 0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant !(x % 2 == 0) ==> x % 2 != 0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant !(x % 2 == 0) ==> x % 2 != 0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant !(x % 2 == 0) ==> x % 2 != 0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant !(x % 2 == 0) ==> x % 2 != 0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant !(x % 2 == 0) ==> x % 2 != 0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant !(x % 2 == 0) ==> x % 2 != 0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant !(x % 2 == 0) ==> x % 2 != 0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant !(x % 2 == 0) ==> x % 2 != 0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant !(x % 2 == 0) ==> x % 2 != 0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant !(x % 2 == 0) ==> x % 2 != 0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant !(x % 2 == 0) ==> x % 2 != 0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant !(x % 2 == 0) ==> x % 2 != 0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant !(x % 2 == 0) ==> x % 2 != 0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant !(x % 2 == 0) ==> x % 2 != 0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant !(x % 2 == 0) ==> x % 2 != 0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant !(x % 2 == 0) ==> x % 2 != 0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant !(x % 2 == 0) ==> x % 2 != 0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant !(x % 2 == 0) ==> x % 2 != 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x <= 10 is established but not preserved.\nloop invariant x >= 10 is partially proven to be inductive.\nloop invariant x % 2 == 0 ==> x >= 10 is partially proven to be inductive.\nloop invariant !(x % 2 == 0) ==> x < 10 is partially proven to be inductive.\nloop invariant x % 2 == 0 ==> x <= 10 is partially proven to be inductive.\nloop invariant !(x % 2 == 0) ==> x >= 10 is partially proven to be inductive.\nloop invariant x % 2 == 0 ==> x % 2 == 0 is partially proven to be inductive.\nloop invariant !(x % 2 == 0) ==> x % 2 != 0 is partially proven to be inductive.\nAssertion x % 2 == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 10;\n\n  /*@\n\n\n\n\n\n\nloop invariant i7: x % 2 == 0 ==> x % 2 == 0;\nloop invariant i8: !(x % 2 == 0) ==> x % 2 != 0;\n*/\nwhile (x >= 10) {\n    x += 2;\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 10 <= x;\nloop invariant x < 12;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 10 <= x is partially proven to be inductive.\nloop invariant x < 12 is established but not preserved.\nAssertion x % 2 == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 10;\n\n  /*@\n\n\n*/\nwhile (x >= 10) {\n    x += 2;\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= 10;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 10 is established but not preserved.\nloop invariant x % 2 == 0 is partially proven to be inductive.\nloop invariant x >= 10 is partially proven to be inductive.\nAssertion x % 2 == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 10;\n\n  /*@\n\n\n\n*/\nwhile (x >= 10) {\n    x += 2;\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 2147483647;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 2147483647 is established but not preserved.\nAssertion x % 2 == 0: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 10;\n\n  /*@\n\n*/\nwhile (x >= 10) {\n    x += 2;\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 10;\nloop invariant x % 2 == 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 10 is established but not preserved.\nloop invariant x % 2 == 0 is partially proven to be inductive.\nAssertion x % 2 == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 10;\n\n  /*@\n\n\n*/\nwhile (x >= 10) {\n    x += 2;\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x;\nloop invariant x >= 10;\nloop invariant (x % 2 == 0);\nloop invariant x <= 2147483647;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x is partially proven to be inductive.\nloop invariant x >= 10 is partially proven to be inductive.\nloop invariant (x % 2 == 0) is partially proven to be inductive.\nloop invariant x <= 2147483647 is established but not preserved.\nAssertion x % 2 == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 10;\n\n  /*@\nloop invariant i1: 0 <= x;\n\n\n\n*/\nwhile (x >= 10) {\n    x += 2;\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 12: unbound logic variable y. Ignoring loop annotation",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 10;\n\n  /*@\n\n\n*/\nwhile (x >= 10) {\n    x += 2;\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 10;\nloop invariant x % 2 == 0 ==> x >= 2;\nloop invariant !(x % 2) ==> x >= 10;\nloop invariant (x % 2) ==> x >= 12;\nloop invariant x % 2 == 0 ==> x >= 10;\nloop invariant x % 2 != 0 ==> x >= 11;\nloop invariant !(x % 2) ==> x >= 10;\nloop invariant (x % 2) ==> x >= 12;\nloop invariant x % 2 == 0 ==> x >= 10;\nloop invariant x % 2 != 0 ==> x >= 11;\nloop invariant !(x % 2) ==> x >= 10;\nloop invariant (x % 2) ==> x >= 12;\nloop invariant x % 2 == 0 ==> x >= 10;\nloop invariant x % 2 != 0 ==> x >= 11;\nloop invariant !(x % 2) ==> x >= 10;\nloop invariant (x % 2) ==> x >= 12;\nloop invariant x % 2 == 0 ==> x >= 10;\nloop invariant x % 2 != 0 ==> x >= 11;\nloop invariant !(x % 2) ==> x >= 10;\nloop invariant (x % 2) ==> x >= 12;\nloop invariant x % 2 == 0 ==> x >= 10;\nloop invariant x % 2 != 0 ==> x >= 11;\nloop invariant !(x % 2) ==> x >= 10;\nloop invariant (x % 2) ==> x >= 12;\nloop invariant x % 2 == 0 ==> x >= 10;\nloop invariant x % 2 != 0 ==> x >= 11;\nloop invariant !(x % 2) ==> x >= 10;\nloop invariant (x % 2) ==> x >= 12;\nloop invariant x % 2 == 0 ==> x >= 10;\nloop invariant x % 2 != 0 ==> x >= 11;\nloop invariant !(x % 2) ==> x >= 10;\nloop invariant (x % 2) ==> x >= 12;\nloop invariant x % 2 == 0 ==> x >= 10;\nloop invariant x % 2 != 0 ==> x >= 11;\nloop invariant !(x % 2) ==> x >= 10;\nloop invariant (x % 2) ==> x >= 12;\nloop invariant x % 2 == 0 ==> x >= 10;\nloop invariant x % 2 != 0 ==> x >= 11;\nloop invariant !(x % 2) ==> x >= 10;\nloop invariant (x % 2) ==> x >= 12;\nloop invariant x % 2 == 0 ==> x >= 10;\nloop invariant x % 2 != 0 ==> x >= 11;\nloop invariant !(x % 2) ==> x >= 10;\nloop invariant (x % 2) ==> x >= 12;\nloop invariant x % 2 == 0 ==> x >= 10;\nloop invariant x % 2 != 0 ==> x >= 11;\nloop invariant !(x % 2) ==> x >= 10;\nloop invariant (x % 2) ==> x >= 12;\nloop invariant x % 2 == 0 ==> x >= 10;\nloop invariant x % 2 != 0 ==> x >= 11;\nloop invariant !(x % 2) ==> x >= 10;\nloop invariant (x % 2) ==> x >= 12;\nloop invariant x % 2 == 0 ==> x >= 10;\nloop invariant x % 2 != 0 ==> x >= 11;\nloop invariant !(x % 2) ==> x >= 10;\nloop invariant (x % 2) ==> x >= 12;\nloop invariant x % 2 == 0 ==> x >= 10;\nloop invariant x % 2 != 0 ==> x >= 11;\nloop invariant !(x % 2) ==> x >= 10;\nloop invariant (x % 2) ==> x >= 12;\nloop invariant x % 2 == 0 ==> x >= 10;\nloop invariant x % 2 != 0 ==> x >= 11;\nloop invariant !(x % 2) ==> x >= 10;\nloop invariant (x % 2) ==> x >= 12;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 10 is established but not preserved.\nloop invariant x % 2 == 0 ==> x >= 2 is partially proven to be inductive.\nloop invariant !(x % 2) ==> x >= 10 is partially proven to be inductive.\nloop invariant (x % 2) ==> x >= 12 is partially proven to be inductive.\nloop invariant x % 2 == 0 ==> x >= 10 is partially proven to be inductive.\nloop invariant x % 2 != 0 ==> x >= 11 is partially proven to be inductive.\nAssertion x % 2 == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 10;\n\n  /*@\n\n\n\n\n\n\n*/\nwhile (x >= 10) {\n    x += 2;\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 10 <= x <= 20;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 10 <= x <= 20 is established but not preserved.\nAssertion x % 2 == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 10;\n\n  /*@\n\n*/\nwhile (x >= 10) {\n    x += 2;\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 10;\nloop invariant x % 2 == 0 ==> x >= 10;\nloop invariant x % 2 != 0 ==> x < 10;\nloop invariant x % 2 == 0 ==> x >= 10 ==> x <= 12;\nloop invariant x % 2 == 0 ==> x >= 10 ==> x % 2 == 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 10 is established but not preserved.\nloop invariant x % 2 == 0 ==> x >= 10 is partially proven to be inductive.\nloop invariant x % 2 != 0 ==> x < 10 is partially proven to be inductive.\nloop invariant x % 2 == 0 ==> x >= 10 ==> x <= 12 is partially proven to be inductive.\nloop invariant x % 2 == 0 ==> x >= 10 ==> x % 2 == 0 is partially proven to be inductive.\nAssertion x % 2 == 0: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 10;\n\n  /*@\n\n\n\n\nloop invariant i5: x % 2 == 0 ==> x >= 10 ==> x % 2 == 0;\n*/\nwhile (x >= 10) {\n    x += 2;\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 10;\nloop invariant (x % 2 == 0);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 10 is established but not preserved.\nloop invariant (x % 2 == 0) is partially proven to be inductive.\nAssertion x % 2 == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 10;\n\n  /*@\n\n\n*/\nwhile (x >= 10) {\n    x += 2;\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x;\nloop invariant x <= UINT_MAX;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x is partially proven to be inductive.\nloop invariant x <= UINT_MAX is partially proven to be inductive.\nloop invariant x >= 10 is established but not preserved.\nloop invariant x % 2 == 0 is established but not preserved.\nAssertion x % 2 == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 10;\n\n  /*@\nloop invariant i1: 0 <= x;\nloop invariant i2: x <= UINT_MAX;\n\n\n*/\nwhile (x >= 10) {\n    x += 2;\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 2147483647;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= 12;\nloop invariant x <= 2147483646;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 2147483647 is partially proven to be inductive.\nloop invariant x >= 10 is partially proven to be inductive.\nloop invariant x % 2 == 0 is partially proven to be inductive.\nloop invariant x >= 12 is preserved but not established.\nloop invariant x <= 2147483646 is partially proven to be inductive.\nAssertion x % 2 == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 10;\n\n  /*@\n\n\n\n\n\n*/\nwhile (x >= 10) {\n    x += 2;\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 20;\nloop invariant (x % 2) == 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 20 is established but not preserved.\nloop invariant (x % 2) == 0 is partially proven to be inductive.\nAssertion x % 2 == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 10;\n\n  /*@\n\n\n*/\nwhile (x >= 10) {\n    x += 2;\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 36: unbound logic variable y. Ignoring loop annotation",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 10;\n\n  /*@\nloop invariant i1: x >= 10;\nloop invariant i2: x <= 20;\nloop invariant i3: x % 2 == 0;\nloop invariant i4: x >= 10 ==> x % 2 == 0;\nloop invariant i5: x <= 20 ==> x % 2 == 0;\nloop invariant i6: x >= 10 && x % 2 == 0 ==> x >= 10;\nloop invariant i7: x <= 20 && x % 2 == 0 ==> x <= 20;\nloop invariant i8: x % 2 == 0 ==> x >= 10 && x <= 20;\nloop invariant i9: x >= 10 && x <= 20 ==> x % 2 == 0;\nloop invariant i10: x >= 10 && x % 2 == 0 ==> x <= 20;\nloop invariant i11: x <= 10;\nloop invariant i12: x % 2 == 0 ==> x >= 10;\nloop invariant i13: !(x % 2 == 0) ==> x < 10;\nloop invariant i14: x % 2 == 0 ==> x <= 10;\nloop invariant i15: !(x % 2 == 0) ==> x >= 10;\nloop invariant i16: x % 2 == 0 ==> x % 2 == 0;\nloop invariant i17: !(x % 2 == 0) ==> x % 2 != 0;\nloop invariant i18: 10 <= x;\nloop invariant i19: x < 12;\nloop invariant i20: 0 <= x <= 10;\nloop invariant i21: 0 <= x <= 2147483647;\nloop invariant i22: 0 <= x;\nloop invariant i23: (x % 2 == 0);\nloop invariant i24: x <= 2147483647;\nloop invariant i25: 0 <= x <= 100000;\nloop invariant i26: x >= (1 + (y - 1) * y / 2);\nloop invariant i27: x % 2 == 0 ==> x >= 2;\nloop invariant i28: !(x % 2) ==> x >= 10;\nloop invariant i29: (x % 2) ==> x >= 12;\nloop invariant i30: x % 2 != 0 ==> x >= 11;\nloop invariant i31: 10 <= x <= 20;\nloop invariant i32: x % 2 != 0 ==> x < 10;\nloop invariant i33: x % 2 == 0 ==> x >= 10 ==> x <= 12;\nloop invariant i34: x % 2 == 0 ==> x >= 10 ==> x % 2 == 0;\nloop invariant i35: x <= UINT_MAX;\nloop invariant i36: x >= 12;\nloop invariant i37: x <= 2147483646;\nloop invariant i38: 0 <= x <= 20;\nloop invariant i39: (x % 2) == 0;\n*/\nwhile (x >= 10) {\n    x += 2;\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
        "combined_annotation_num_solver_calls": 24,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 10;\n\n  /*@\n\n\n\n\n\nloop invariant i6: x >= 10 && x % 2 == 0 ==> x >= 10;\nloop invariant i7: x <= 20 && x % 2 == 0 ==> x <= 20;\n\n\n\n\n\n\n\n\nloop invariant i16: x % 2 == 0 ==> x % 2 == 0;\nloop invariant i17: !(x % 2 == 0) ==> x % 2 != 0;\n\n\n\n\nloop invariant i22: 0 <= x;\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i34: x % 2 == 0 ==> x >= 10 ==> x % 2 == 0;\nloop invariant i35: x <= UINT_MAX;\n\n\n\n\n*/\nwhile (x >= 10) {\n    x += 2;\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_nondet_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum01_true-unreach-call_true-termination.i.annot.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/85.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/ex2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/42.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/diamond_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/odd.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/even.c",
            "../dataset/loop_invariants/code2inv/24.c",
            "../dataset/loop_invariants/code2inv/130.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/diamond_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/overflow_safe1.c"
        ],
        "skipped": [],
        "total": 12,
        "success_count": 2,
        "failure_count": 10,
        "success_rate": 0.16666666666666666
    }
}