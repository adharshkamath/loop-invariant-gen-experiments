{
    "logs": {
        "file": "../dataset/loop_invariants/code2inv/101.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int x;\n  \n  (x = 0);\n  \n  while ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (x != n) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
        "success": false,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x == n ==> (n >= 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant (x == n) ==> (x >= 0);\nloop invariant (x != n) ==> (x < n);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x <= n;\nloop invariant x >= 0;\n*/\n```",
            "```\n/*@\nloop invariant x >= 0;\nloop invariant x < n;\nloop invariant x == n ==> (n < 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\n*/\n```",
            "```\n/*@\nloop invariant x >= 0;\nloop invariant x < n;\nloop invariant n >= 0;\nloop invariant n >= x;\nloop invariant n >= 0 ==> (x == n) ==> (x < 0);\nloop invariant n >= 0 ==> (x == n) ==> (x >= 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x < n ==> (n >= 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n; loop invariant n >= 0; loop invariant x <= n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x < n;\nloop invariant (x == 0) ==> (n >= 0);\nloop invariant (x > 0) ==> (n > 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x >= n ==> (n < 0);\n*/\n```",
            "```\n/*@\nloop invariant i1;\nloop invariant i2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant (x <= n) ==> (x == n);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x >= n - (n - x);\nloop invariant x <= n + x;\nloop invariant x * x <= 2 * x * n;\nloop invariant x * x <= 2 * n * n;\nloop invariant x * x <= 4 * n * n;\nloop invariant x * x <= 8 * n * n;\nloop invariant x * x <= 16 * n * n;\nloop invariant x * x <= 32 * n * n;\nloop invariant x * x <= 64 * n * n;\nloop invariant x * x <= 128 * n * n;\nloop invariant x * x <= 256 * n * n;\nloop invariant x * x <= 512 * n * n;\nloop invariant x * x <= 1024 * n * n;\nloop invariant x * x <= 2048 * n * n;\nloop invariant x * x <= 4096 * n * n;\nloop invariant x * x <= 8192 * n * n;\nloop invariant x * x <= 16384 * n * n;\nloop invariant x * x <= 32768 * n * n;\nloop invariant x * x <= 65536 * n * n;\nloop invariant x * x <= 131072 * n * n;\nloop invariant x * x <= 262144 * n * n;\nloop invariant x * x <= 524288 * n * n;\nloop invariant x * x <= 1048576 * n * n;\nloop invariant x * x <= 2097152 * n * n;\nloop invariant x * x <= 4194304 * n * n;\nloop invariant x * x <= 8388608 * n * n;\nloop invariant x * x <= 16777216 * n * n;\nloop invariant x * x <= 33554432 * n * n;\nloop invariant x * x <= 67108864 * n * n;\nloop invariant x * x <= 134217728 * n * n;\nloop invariant x * x <= 268435456 * n * n;\nloop invariant x * x <= 536870912 * n * n;\nloop invariant x * x <= 1073741824 * n * n;\nloop invariant x * x <= 2147483648 * n * n;\nloop invariant x * x <= 4294967296 * n * n;\nloop invariant x * x <= 8589934592 * n * n;\nloop invariant x * x <= 17179869184 * n * n;\nloop invariant x * x <= 34359738368 * n * n;\nloop invariant x * x <= 68719476736 * n * n;\nloop invariant x * x <= 137438953472 * n * n;\nloop invariant x * x <= 274877906944 * n * n;\nloop invariant x * x <= 549755813888 * n * n;\nloop invariant x * x <= 1099511627776 * n * n;\nloop invariant x * x <= 2199023255552 * n * n;\nloop invariant x * x <= 4398046511104 * n * n;\nloop invariant x * x <= 8796093022208 * n * n;\nloop invariant x * x <= 17592186044416 * n * n;\nloop invariant x * x <= 35184372088832 * n * n;\nloop invariant x * x <= 70368744177664 * n * n;\nloop invariant x * x <= 140737488355328 * n * n;\nloop invariant x * x <= 281474976710656 * n * n;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x == n ==> (n >= 0);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant x == n ==> (n >= 0) is partially proven to be inductive.\nAssertion n < 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int x;\n  \n  (x = 0);\n  \n  /*@\n\n\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (x != n) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nAssertion n < 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int x;\n  \n  (x = 0);\n  \n  /*@\n\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (x != n) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant (x == n) ==> (x >= 0);\nloop invariant (x != n) ==> (x < n);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant (x == n) ==> (x >= 0) is partially proven to be inductive.\nloop invariant (x != n) ==> (x < n) is partially proven to be inductive.\nAssertion n < 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int x;\n  \n  (x = 0);\n  \n  /*@\n\n\n\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (x != n) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x <= n;\nloop invariant x >= 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant x <= n is partially proven to be inductive.\nloop invariant x >= 0 is partially proven to be inductive.\nAssertion n < 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int x;\n  \n  (x = 0);\n  \n  /*@\n\n\nloop invariant i3: x >= 0;\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (x != n) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant x >= 0;\nloop invariant x < n;\nloop invariant x == n ==> (n < 0);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x >= 0 is partially proven to be inductive.\nloop invariant x < n is neither established nor preserved.\nloop invariant x == n ==> (n < 0) is partially proven to be inductive.\nAssertion n < 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int x;\n  \n  (x = 0);\n  \n  /*@\nloop invariant i1: x >= 0;\n\n\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (x != n) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nAssertion n < 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int x;\n  \n  (x = 0);\n  \n  /*@\n\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (x != n) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant x >= 0;\nloop invariant x < n;\nloop invariant n >= 0;\nloop invariant n >= x;\nloop invariant n >= 0 ==> (x == n) ==> (x < 0);\nloop invariant n >= 0 ==> (x == n) ==> (x >= 0);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x >= 0 is partially proven to be inductive.\nloop invariant x < n is neither established nor preserved.\nloop invariant n >= 0 is partially proven to be inductive.\nloop invariant n >= x is partially proven to be inductive.\nloop invariant n >= 0 ==> (x == n) ==> (x < 0) is partially proven to be inductive.\nloop invariant n >= 0 ==> (x == n) ==> (x >= 0) is partially proven to be inductive.\nAssertion n < 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int x;\n  \n  (x = 0);\n  \n  /*@\nloop invariant i1: x >= 0;\n\n\n\n\nloop invariant i6: n >= 0 ==> (x == n) ==> (x >= 0);\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (x != n) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x < n ==> (n >= 0);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant x < n ==> (n >= 0) is partially proven to be inductive.\nAssertion n < 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int x;\n  \n  (x = 0);\n  \n  /*@\n\nloop invariant i2: x < n ==> (n >= 0);\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (x != n) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n; loop invariant n >= 0; loop invariant x <= n;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= n; loop invariant n >= 0; loop invariant x <= n is preserved but not established.\nAssertion n < 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int x;\n  \n  (x = 0);\n  \n  /*@\n\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (x != n) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant x <= n is partially proven to be inductive.\nAssertion n < 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int x;\n  \n  (x = 0);\n  \n  /*@\n\n\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (x != n) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x < n;\nloop invariant (x == 0) ==> (n >= 0);\nloop invariant (x > 0) ==> (n > 0);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x < n is neither established nor preserved.\nloop invariant (x == 0) ==> (n >= 0) is partially proven to be inductive.\nloop invariant (x > 0) ==> (n > 0) is partially proven to be inductive.\nAssertion n < 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int x;\n  \n  (x = 0);\n  \n  /*@\n\n\nloop invariant i3: (x > 0) ==> (n > 0);\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (x != n) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x >= n ==> (n < 0);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant x >= n ==> (n < 0) is neither established nor preserved.\nAssertion n < 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int x;\n  \n  (x = 0);\n  \n  /*@\n\n\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (x != n) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant i1;\nloop invariant i2;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 15: unbound logic variable i1. Ignoring loop annotation",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int x;\n  \n  (x = 0);\n  \n  /*@\n\n\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (x != n) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant (x <= n) ==> (x == n);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant x <= n is partially proven to be inductive.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant (x <= n) ==> (x == n) is preserved but not established.\nAssertion n < 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int x;\n  \n  (x = 0);\n  \n  /*@\n\n\nloop invariant i3: x >= 0;\n\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (x != n) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x >= n - (n - x);\nloop invariant x <= n + x;\nloop invariant x * x <= 2 * x * n;\nloop invariant x * x <= 2 * n * n;\nloop invariant x * x <= 4 * n * n;\nloop invariant x * x <= 8 * n * n;\nloop invariant x * x <= 16 * n * n;\nloop invariant x * x <= 32 * n * n;\nloop invariant x * x <= 64 * n * n;\nloop invariant x * x <= 128 * n * n;\nloop invariant x * x <= 256 * n * n;\nloop invariant x * x <= 512 * n * n;\nloop invariant x * x <= 1024 * n * n;\nloop invariant x * x <= 2048 * n * n;\nloop invariant x * x <= 4096 * n * n;\nloop invariant x * x <= 8192 * n * n;\nloop invariant x * x <= 16384 * n * n;\nloop invariant x * x <= 32768 * n * n;\nloop invariant x * x <= 65536 * n * n;\nloop invariant x * x <= 131072 * n * n;\nloop invariant x * x <= 262144 * n * n;\nloop invariant x * x <= 524288 * n * n;\nloop invariant x * x <= 1048576 * n * n;\nloop invariant x * x <= 2097152 * n * n;\nloop invariant x * x <= 4194304 * n * n;\nloop invariant x * x <= 8388608 * n * n;\nloop invariant x * x <= 16777216 * n * n;\nloop invariant x * x <= 33554432 * n * n;\nloop invariant x * x <= 67108864 * n * n;\nloop invariant x * x <= 134217728 * n * n;\nloop invariant x * x <= 268435456 * n * n;\nloop invariant x * x <= 536870912 * n * n;\nloop invariant x * x <= 1073741824 * n * n;\nloop invariant x * x <= 2147483648 * n * n;\nloop invariant x * x <= 4294967296 * n * n;\nloop invariant x * x <= 8589934592 * n * n;\nloop invariant x * x <= 17179869184 * n * n;\nloop invariant x * x <= 34359738368 * n * n;\nloop invariant x * x <= 68719476736 * n * n;\nloop invariant x * x <= 137438953472 * n * n;\nloop invariant x * x <= 274877906944 * n * n;\nloop invariant x * x <= 549755813888 * n * n;\nloop invariant x * x <= 1099511627776 * n * n;\nloop invariant x * x <= 2199023255552 * n * n;\nloop invariant x * x <= 4398046511104 * n * n;\nloop invariant x * x <= 8796093022208 * n * n;\nloop invariant x * x <= 17592186044416 * n * n;\nloop invariant x * x <= 35184372088832 * n * n;\nloop invariant x * x <= 70368744177664 * n * n;\nloop invariant x * x <= 140737488355328 * n * n;\nloop invariant x * x <= 281474976710656 * n * n;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant x >= n - (n - x) is partially proven to be inductive.\nloop invariant x <= n + x is partially proven to be inductive.\nloop invariant x * x <= 2 * x * n is partially proven to be inductive.\nloop invariant x * x <= 2 * n * n is partially proven to be inductive.\nloop invariant x * x <= 4 * n * n is partially proven to be inductive.\nloop invariant x * x <= 8 * n * n is partially proven to be inductive.\nloop invariant x * x <= 16 * n * n is partially proven to be inductive.\nloop invariant x * x <= 32 * n * n is partially proven to be inductive.\nloop invariant x * x <= 64 * n * n is partially proven to be inductive.\nloop invariant x * x <= 128 * n * n is partially proven to be inductive.\nloop invariant x * x <= 256 * n * n is partially proven to be inductive.\nloop invariant x * x <= 512 * n * n is partially proven to be inductive.\nloop invariant x * x <= 1024 * n * n is partially proven to be inductive.\nloop invariant x * x <= 2048 * n * n is partially proven to be inductive.\nloop invariant x * x <= 4096 * n * n is partially proven to be inductive.\nloop invariant x * x <= 8192 * n * n is partially proven to be inductive.\nloop invariant x * x <= 16384 * n * n is partially proven to be inductive.\nloop invariant x * x <= 32768 * n * n is partially proven to be inductive.\nloop invariant x * x <= 65536 * n * n is partially proven to be inductive.\nloop invariant x * x <= 131072 * n * n is partially proven to be inductive.\nloop invariant x * x <= 262144 * n * n is partially proven to be inductive.\nloop invariant x * x <= 524288 * n * n is partially proven to be inductive.\nloop invariant x * x <= 1048576 * n * n is partially proven to be inductive.\nloop invariant x * x <= 2097152 * n * n is partially proven to be inductive.\nloop invariant x * x <= 4194304 * n * n is partially proven to be inductive.\nloop invariant x * x <= 8388608 * n * n is partially proven to be inductive.\nloop invariant x * x <= 16777216 * n * n is partially proven to be inductive.\nloop invariant x * x <= 33554432 * n * n is partially proven to be inductive.\nloop invariant x * x <= 67108864 * n * n is partially proven to be inductive.\nloop invariant x * x <= 134217728 * n * n is partially proven to be inductive.\nloop invariant x * x <= 268435456 * n * n is partially proven to be inductive.\nloop invariant x * x <= 536870912 * n * n is partially proven to be inductive.\nloop invariant x * x <= 1073741824 * n * n is partially proven to be inductive.\nloop invariant x * x <= 2147483648 * n * n is partially proven to be inductive.\nloop invariant x * x <= 4294967296 * n * n is partially proven to be inductive.\nloop invariant x * x <= 8589934592 * n * n is partially proven to be inductive.\nloop invariant x * x <= 17179869184 * n * n is partially proven to be inductive.\nloop invariant x * x <= 34359738368 * n * n is partially proven to be inductive.\nloop invariant x * x <= 68719476736 * n * n is partially proven to be inductive.\nloop invariant x * x <= 137438953472 * n * n is partially proven to be inductive.\nloop invariant x * x <= 274877906944 * n * n is partially proven to be inductive.\nloop invariant x * x <= 549755813888 * n * n is partially proven to be inductive.\nloop invariant x * x <= 1099511627776 * n * n is partially proven to be inductive.\nloop invariant x * x <= 2199023255552 * n * n is partially proven to be inductive.\nloop invariant x * x <= 4398046511104 * n * n is partially proven to be inductive.\nloop invariant x * x <= 8796093022208 * n * n is partially proven to be inductive.\nloop invariant x * x <= 17592186044416 * n * n is partially proven to be inductive.\nloop invariant x * x <= 35184372088832 * n * n is partially proven to be inductive.\nloop invariant x * x <= 70368744177664 * n * n is partially proven to be inductive.\nloop invariant x * x <= 140737488355328 * n * n is partially proven to be inductive.\nloop invariant x * x <= 281474976710656 * n * n is partially proven to be inductive.\nAssertion n < 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int x;\n  \n  (x = 0);\n  \n  /*@\n\nloop invariant i2: x >= n - (n - x);\n\nloop invariant i4: x * x <= 2 * x * n;\nloop invariant i5: x * x <= 2 * n * n;\nloop invariant i6: x * x <= 4 * n * n;\nloop invariant i7: x * x <= 8 * n * n;\nloop invariant i8: x * x <= 16 * n * n;\nloop invariant i9: x * x <= 32 * n * n;\nloop invariant i10: x * x <= 64 * n * n;\nloop invariant i11: x * x <= 128 * n * n;\nloop invariant i12: x * x <= 256 * n * n;\nloop invariant i13: x * x <= 512 * n * n;\nloop invariant i14: x * x <= 1024 * n * n;\nloop invariant i15: x * x <= 2048 * n * n;\nloop invariant i16: x * x <= 4096 * n * n;\nloop invariant i17: x * x <= 8192 * n * n;\nloop invariant i18: x * x <= 16384 * n * n;\nloop invariant i19: x * x <= 32768 * n * n;\nloop invariant i20: x * x <= 65536 * n * n;\nloop invariant i21: x * x <= 131072 * n * n;\nloop invariant i22: x * x <= 262144 * n * n;\nloop invariant i23: x * x <= 524288 * n * n;\nloop invariant i24: x * x <= 1048576 * n * n;\nloop invariant i25: x * x <= 2097152 * n * n;\nloop invariant i26: x * x <= 4194304 * n * n;\nloop invariant i27: x * x <= 8388608 * n * n;\nloop invariant i28: x * x <= 16777216 * n * n;\nloop invariant i29: x * x <= 33554432 * n * n;\nloop invariant i30: x * x <= 67108864 * n * n;\nloop invariant i31: x * x <= 134217728 * n * n;\nloop invariant i32: x * x <= 268435456 * n * n;\nloop invariant i33: x * x <= 536870912 * n * n;\nloop invariant i34: x * x <= 1073741824 * n * n;\nloop invariant i35: x * x <= 2147483648 * n * n;\nloop invariant i36: x * x <= 4294967296 * n * n;\nloop invariant i37: x * x <= 8589934592 * n * n;\nloop invariant i38: x * x <= 17179869184 * n * n;\nloop invariant i39: x * x <= 34359738368 * n * n;\nloop invariant i40: x * x <= 68719476736 * n * n;\nloop invariant i41: x * x <= 137438953472 * n * n;\nloop invariant i42: x * x <= 274877906944 * n * n;\nloop invariant i43: x * x <= 549755813888 * n * n;\nloop invariant i44: x * x <= 1099511627776 * n * n;\nloop invariant i45: x * x <= 2199023255552 * n * n;\nloop invariant i46: x * x <= 4398046511104 * n * n;\nloop invariant i47: x * x <= 8796093022208 * n * n;\nloop invariant i48: x * x <= 17592186044416 * n * n;\nloop invariant i49: x * x <= 35184372088832 * n * n;\nloop invariant i50: x * x <= 70368744177664 * n * n;\nloop invariant i51: x * x <= 140737488355328 * n * n;\nloop invariant i52: x * x <= 281474976710656 * n * n;\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (x != n) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 33: unbound logic variable i1. Ignoring loop annotation",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int x;\n  \n  (x = 0);\n  \n  /*@\nloop invariant i1: 0 <= x <= n;\nloop invariant i2: x == n ==> (n >= 0);\nloop invariant i3: (x == n) ==> (x >= 0);\nloop invariant i4: (x != n) ==> (x < n);\nloop invariant i5: x <= n;\nloop invariant i6: x >= 0;\nloop invariant i7: x < n;\nloop invariant i8: x == n ==> (n < 0);\nloop invariant i9: n >= 0;\nloop invariant i10: n >= x;\nloop invariant i11: n >= 0 ==> (x == n) ==> (x < 0);\nloop invariant i12: n >= 0 ==> (x == n) ==> (x >= 0);\nloop invariant i13: x < n ==> (n >= 0);\nloop invariant i14: 0 <= x <= n; loop invariant n >= 0; loop invariant x <= n;\nloop invariant i15: 0 <= x < n;\nloop invariant i16: (x == 0) ==> (n >= 0);\nloop invariant i17: (x > 0) ==> (n > 0);\nloop invariant i18: x >= n ==> (n < 0);\nloop invariant i19: i1;\nloop invariant i20: i2;\nloop invariant i21: (x <= n) ==> (x == n);\nloop invariant i22: x >= n - (n - x);\nloop invariant i23: x <= n + x;\nloop invariant i24: x * x <= 2 * x * n;\nloop invariant i25: x * x <= 2 * n * n;\nloop invariant i26: x * x <= 4 * n * n;\nloop invariant i27: x * x <= 8 * n * n;\nloop invariant i28: x * x <= 16 * n * n;\nloop invariant i29: x * x <= 32 * n * n;\nloop invariant i30: x * x <= 64 * n * n;\nloop invariant i31: x * x <= 128 * n * n;\nloop invariant i32: x * x <= 256 * n * n;\nloop invariant i33: x * x <= 512 * n * n;\nloop invariant i34: x * x <= 1024 * n * n;\nloop invariant i35: x * x <= 2048 * n * n;\nloop invariant i36: x * x <= 4096 * n * n;\nloop invariant i37: x * x <= 8192 * n * n;\nloop invariant i38: x * x <= 16384 * n * n;\nloop invariant i39: x * x <= 32768 * n * n;\nloop invariant i40: x * x <= 65536 * n * n;\nloop invariant i41: x * x <= 131072 * n * n;\nloop invariant i42: x * x <= 262144 * n * n;\nloop invariant i43: x * x <= 524288 * n * n;\nloop invariant i44: x * x <= 1048576 * n * n;\nloop invariant i45: x * x <= 2097152 * n * n;\nloop invariant i46: x * x <= 4194304 * n * n;\nloop invariant i47: x * x <= 8388608 * n * n;\nloop invariant i48: x * x <= 16777216 * n * n;\nloop invariant i49: x * x <= 33554432 * n * n;\nloop invariant i50: x * x <= 67108864 * n * n;\nloop invariant i51: x * x <= 134217728 * n * n;\nloop invariant i52: x * x <= 268435456 * n * n;\nloop invariant i53: x * x <= 536870912 * n * n;\nloop invariant i54: x * x <= 1073741824 * n * n;\nloop invariant i55: x * x <= 2147483648 * n * n;\nloop invariant i56: x * x <= 4294967296 * n * n;\nloop invariant i57: x * x <= 8589934592 * n * n;\nloop invariant i58: x * x <= 17179869184 * n * n;\nloop invariant i59: x * x <= 34359738368 * n * n;\nloop invariant i60: x * x <= 68719476736 * n * n;\nloop invariant i61: x * x <= 137438953472 * n * n;\nloop invariant i62: x * x <= 274877906944 * n * n;\nloop invariant i63: x * x <= 549755813888 * n * n;\nloop invariant i64: x * x <= 1099511627776 * n * n;\nloop invariant i65: x * x <= 2199023255552 * n * n;\nloop invariant i66: x * x <= 4398046511104 * n * n;\nloop invariant i67: x * x <= 8796093022208 * n * n;\nloop invariant i68: x * x <= 17592186044416 * n * n;\nloop invariant i69: x * x <= 35184372088832 * n * n;\nloop invariant i70: x * x <= 70368744177664 * n * n;\nloop invariant i71: x * x <= 140737488355328 * n * n;\nloop invariant i72: x * x <= 281474976710656 * n * n;\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (x != n) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
        "combined_annotation_num_solver_calls": 12,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int x;\n  \n  (x = 0);\n  \n  /*@\n\nloop invariant i2: x == n ==> (n >= 0);\nloop invariant i3: (x == n) ==> (x >= 0);\n\n\nloop invariant i6: x >= 0;\n\n\n\n\n\nloop invariant i12: n >= 0 ==> (x == n) ==> (x >= 0);\nloop invariant i13: x < n ==> (n >= 0);\n\n\n\nloop invariant i17: (x > 0) ==> (n > 0);\n\n\n\n\nloop invariant i22: x >= n - (n - x);\n\nloop invariant i24: x * x <= 2 * x * n;\nloop invariant i25: x * x <= 2 * n * n;\nloop invariant i26: x * x <= 4 * n * n;\nloop invariant i27: x * x <= 8 * n * n;\nloop invariant i28: x * x <= 16 * n * n;\nloop invariant i29: x * x <= 32 * n * n;\nloop invariant i30: x * x <= 64 * n * n;\nloop invariant i31: x * x <= 128 * n * n;\nloop invariant i32: x * x <= 256 * n * n;\nloop invariant i33: x * x <= 512 * n * n;\nloop invariant i34: x * x <= 1024 * n * n;\nloop invariant i35: x * x <= 2048 * n * n;\nloop invariant i36: x * x <= 4096 * n * n;\nloop invariant i37: x * x <= 8192 * n * n;\nloop invariant i38: x * x <= 16384 * n * n;\nloop invariant i39: x * x <= 32768 * n * n;\nloop invariant i40: x * x <= 65536 * n * n;\nloop invariant i41: x * x <= 131072 * n * n;\nloop invariant i42: x * x <= 262144 * n * n;\nloop invariant i43: x * x <= 524288 * n * n;\nloop invariant i44: x * x <= 1048576 * n * n;\nloop invariant i45: x * x <= 2097152 * n * n;\nloop invariant i46: x * x <= 4194304 * n * n;\nloop invariant i47: x * x <= 8388608 * n * n;\nloop invariant i48: x * x <= 16777216 * n * n;\nloop invariant i49: x * x <= 33554432 * n * n;\nloop invariant i50: x * x <= 67108864 * n * n;\nloop invariant i51: x * x <= 134217728 * n * n;\nloop invariant i52: x * x <= 268435456 * n * n;\nloop invariant i53: x * x <= 536870912 * n * n;\nloop invariant i54: x * x <= 1073741824 * n * n;\nloop invariant i55: x * x <= 2147483648 * n * n;\nloop invariant i56: x * x <= 4294967296 * n * n;\nloop invariant i57: x * x <= 8589934592 * n * n;\nloop invariant i58: x * x <= 17179869184 * n * n;\nloop invariant i59: x * x <= 34359738368 * n * n;\nloop invariant i60: x * x <= 68719476736 * n * n;\nloop invariant i61: x * x <= 137438953472 * n * n;\nloop invariant i62: x * x <= 274877906944 * n * n;\nloop invariant i63: x * x <= 549755813888 * n * n;\nloop invariant i64: x * x <= 1099511627776 * n * n;\nloop invariant i65: x * x <= 2199023255552 * n * n;\nloop invariant i66: x * x <= 4398046511104 * n * n;\nloop invariant i67: x * x <= 8796093022208 * n * n;\nloop invariant i68: x * x <= 17592186044416 * n * n;\nloop invariant i69: x * x <= 35184372088832 * n * n;\nloop invariant i70: x * x <= 70368744177664 * n * n;\nloop invariant i71: x * x <= 140737488355328 * n * n;\nloop invariant i72: x * x <= 281474976710656 * n * n;\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (x != n) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_nondet_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum01_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/22.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/85.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/ex2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/42.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/diamond_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/odd.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/even.c",
            "../dataset/loop_invariants/code2inv/24.c",
            "../dataset/loop_invariants/code2inv/130.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/diamond_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/overflow_safe1.c",
            "../dataset/loop_invariants/code2inv/113.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/ddlm2013_true-unreach-call.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/MADWiFi-encode_ie_ok.c",
            "../dataset/loop_invariants/code2inv/69.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/half.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.v.c",
            "../dataset/loop_invariants/code2inv/101.c"
        ],
        "skipped": [],
        "total": 20,
        "success_count": 3,
        "failure_count": 17,
        "success_rate": 0.15
    }
}