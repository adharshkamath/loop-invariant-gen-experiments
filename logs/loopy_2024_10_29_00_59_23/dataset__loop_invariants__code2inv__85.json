{
    "logs": {
        "file": "../dataset/loop_invariants/code2inv/85.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = -15000);\n  \n  while ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
        "success": false,
        "annotation_blocks": [
            "```\n/*@\nloop invariant ( z1 = 0 );\nloop invariant ( z2 = 0 );\nloop invariant ( z3 = 0 );\nloop invariant ( x = -15000 );\nloop invariant ( y = z2 );\nloop invariant ( z1 = 1 );\nloop invariant ( z2 = z2 + 1 );\nloop invariant ( z1 = 1 + z2 );\nloop invariant ( x = -15000 + z2 );\nloop invariant ( y = z2 + 1 );\nloop invariant ( z1 = 1 + z2 );\nloop invariant ( x = -15000 + z2 + z2 );\nloop invariant ( y = z2 + 1 + 1 );\nloop invariant ( z1 = 1 + z2 + 1 );\nloop invariant ( x = -15000 + z2 + z2 + z2 );\nloop invariant ( y = z2 + 1 + 1 + 1 );\nloop invariant ( z1 = 1 + z2 + 1 + 1 );\nloop invariant ( x = -15000 + z2 + z2 + z2 + z2 );\nloop invariant ( y = z2 + 1 + 1 + 1 + 1 );\nloop invariant ( z1 = 1 + z2 + 1 + 1 + 1 );\nloop invariant ( x = -15000 + z2 + z2 + z2 + z2 + z2 );\nloop invariant ( y = z2 + 1 + 1 + 1 + 1 + 1 );\nloop invariant ( z1 = 1 + z2 + 1 + 1 + 1 + 1 );\nloop invariant ( x = -15000 + z2 + z2 + z2 + z2 + z2 + z2 );\nloop invariant ( y = z2 + 1 + 1 + 1 + 1 + 1 + 1 );\nloop invariant ( z1 = 1 + z2 + 1 + 1 + 1 + 1 + 1 );\nloop invariant ( x = -15000 + z2 + z2 + z2 + z2 + z2 + z2 + z2 );\nloop invariant ( y = z2 + 1 + 1 + 1 + 1 + 1 + 1 + 1 );\nloop invariant ( z1 = 1 + z2 + 1 + 1 + 1 + 1 + 1 + 1 );\nloop invariant ( x = -15000 + z2 + z2 + z2 + z2 + z2 + z2 + z2 + z2 );\nloop invariant ( y = z2 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 );\nloop invariant ( z1 = 1 + z2 + 1 + 1 + 1 + 1 + 1 + 1 + 1 );\nloop invariant ( x = -15000 + z2 + z2 + z2 + z2 + z2 + z2 + z2 + z2 + z2 );\nloop invariant ( y = z2 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 );\nloop invariant ( z1 = 1 + z2 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 );\nloop invariant ( x = -15000 + z2 + z2 + z2 + z2 + z2 + z2 + z2 + z2 + z2 + z2 );\nloop invariant ( y = z2 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 );\nloop invariant ( z1 = 1 + z2 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 );\nloop invariant ( x = -15000 + z2 + z2 + z2 + z2 + z2 + z2 + z2 + z2 + z2 + z2 + z2 );\nloop invariant ( y = z2 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 );\nloop invariant ( z1 = 1 + z2 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 );\n*/\n```",
            "```\n/*@\nloop invariant - y > 0;\nloop invariant x >= -15000;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x < 0;\nloop invariant y > 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x + y < 0;\nloop invariant y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < 0;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 20000;\nloop invariant x <= (20000 - y);\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= -15000;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= 0;\nloop invariant x >= y;\nloop invariant x >= -15000;\nloop invariant x < 0 ==> y > 0;\nloop invariant x < 0 ==> y >= 1;\nloop invariant x < 0 ==> y <= 100000;\nloop invariant x < 0 ==> x >= y;\nloop invariant x < 0 ==> x >= -15000;\nloop invariant x < 0 ==> y >= 1 ==> x >= (1 + (y - 1) * y / 2);\nloop invariant x < 0 ==> y >= 1 ==> x >= (1 + (y - 1) * y / 2) ==> x >= 0;\nloop invariant x < 0 ==> y >= 1 ==> x >= (1 + (y - 1) * y / 2) ==> x >= 0 ==> x >= y;\nloop invariant x < 0 ==> y >= 1 ==> x >= (1 + (y - 1) * y / 2) ==> x >= 0 ==> x >= y ==> x >= -15000;\nloop invariant x < 0 ==> y >= 1 ==> x >= (1 + (y - 1) * y / 2) ==> x >= 0 ==> x >= y ==> x >= -15000 ==> y <= 100000;\nloop invariant x < 0 ==> y >= 1 ==> x >= (1 + (y - 1) * y / 2) ==> x >= 0 ==> x >= y ==> x >= -15000 ==> y <= 100000 ==> x >= y;\nloop invariant x < 0 ==> y >= 1 ==> x >= (1 + (y - 1) * y / 2) ==> x >= 0 ==> x >= y ==> x >= -15000 ==> y <= 100000 ==> x >= y ==> x >= -15000;\nloop invariant x < 0 ==> y >= 1 ==> x >= (1 + (y - 1) * y / 2) ==> x >= 0 ==> x >= y ==> x >= -15000 ==> y <= 100000 ==> x >= y ==> x >= -15000 ==> y >= 1;\nloop invariant x < 0 ==> y >= 1 ==> x >= (1 + (y - 1) * y / 2) ==> x >= 0 ==> x >= y ==> x >= -15000 ==> y <= 100000 ==> x >= y ==> x >= -15000 ==> y >= 1 ==> x >= (1 + (y - 1) * y / 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x + y == y + x;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= -x;loop invariant x <= y;loop invariant x + y <= y + y * y / 2;loop invariant x + y <= y + y * (y + 1) / 2;loop invariant x + y <= y + (y + 1) * (y + 2) / 2;loop invariant x + y <= y + (y + 1) * (y + 2) * (y + 3) / 6;loop invariant x + y <= y + (y + 1) * (y + 2) * (y + 3) * (y + 4) / 24;loop invariant x + y <= y + (y + 1) * (y + 2) * (y + 3) * (y + 4) * (y + 5) / 120;loop invariant x + y <= y + (y + 1) * (y + 2) * (y + 3) * (y + 4) * (y + 5) * (y + 6) / 720;loop invariant x + y <= y + (y + 1) * (y + 2) * (y + 3) * (y + 4) * (y + 5) * (y + 6) * (y + 7) / 5040;loop invariant x + y <= y + (y + 1) * (y + 2) * (y + 3) * (y + 4) * (y + 5) * (y + 6) * (y + 7) * (y + 8) / 40320;loop invariant x + y <= y + (y + 1) * (y + 2) * (y + 3) * (y + 4) * (y + 5) * (y + 6) * (y + 7) * (y + 8) * (y + 9) / 362880;loop invariant x + y <= y + (y + 1) * (y + 2) * (y + 3) * (y + 4) * (y + 5) * (y + 6) * (y + 7) * (y + 8) * (y + 9) * (y + 10) / 3628800;loop invariant x + y <= y + (y + 1) * (y + 2) * (y + 3) * (y + 4) * (y + 5) * (y + 6) * (y + 7) * (y + 8) * (y + 9) * (y + 10) * (y + 11) / 39916800;loop invariant x + y <= y + (y + 1) * (y + 2) * (y + 3) * (y + 4) * (y + 5) * (y + 6) * (y + 7) * (y + 8) * (y + 9) * (y + 10) * (y + 11) * (y + 12) / 479001600;loop invariant x + y <= y + (y + 1) * (y + 2) * (y + 3) * (y + 4) * (y + 5) * (y + 6) * (y + 7) * (y + 8) * (y + 9) * (y + 10) * (y + 11) * (y + 12) * (y + 13) / 6227020800;loop invariant x + y <= y + (y + 1) * (y + 2) * (y + 3) * (y + 4) * (y + 5) * (y + 6) * (y + 7) * (y + 8) * (y + 9) * (y + 10) * (y + 11) * (y + 12) * (y + 13) * (y + 14) / 87178291200;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000; loop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x + y >= 0;\nloop invariant x - y <= 0;\nloop invariant x * y <= 0;\nloop invariant x + 2 * y >= -15000;\nloop invariant x - 2 * y <= -15000;\nloop invariant x + 3 * y >= -15000;\nloop invariant x - 3 * y <= -15000;\nloop invariant x + 4 * y >= -15000;\nloop invariant x - 4 * y <= -15000;\nloop invariant x + 5 * y >= -15000;\nloop invariant x - 5 * y <= -15000;\nloop invariant x + 6 * y >= -15000;\nloop invariant x - 6 * y <= -15000;\nloop invariant x + 7 * y >= -15000;\nloop invariant x - 7 * y <= -15000;\nloop invariant x + 8 * y >= -15000;\nloop invariant x - 8 * y <= -15000;\nloop invariant x + 9 * y >= -15000;\nloop invariant x - 9 * y <= -15000;\nloop invariant x + 10 * y >= -15000;\nloop invariant x - 10 * y <= -15000;\nloop invariant x + 11 * y >= -15000;\nloop invariant x - 11 * y <= -15000;\nloop invariant x + 12 * y >= -15000;\nloop invariant x - 12 * y <= -15000;\nloop invariant x + 13 * y >= -15000;\nloop invariant x - 13 * y <= -15000;\nloop invariant x + 14 * y >= -15000;\nloop invariant x - 14 * y <= -15000;\nloop invariant x + 15 * y >= -15000;\nloop invariant x - 15 * y <= -15000;\nloop invariant x + 16 * y >= -15000;\nloop invariant x - 16 * y <= -15000;\nloop invariant x + 17 * y >= -15000;\nloop invariant x - 17 * y <= -15000;\nloop invariant x + 18 * y >= -15000;\nloop invariant x - 18 * y <= -15000;\nloop invariant x + 19 * y >= -15000;\nloop invariant x - 19 * y <= -15000;\nloop invariant x + 20 * y >= -15000;\nloop invariant x - 20 * y <= -15000;\nloop invariant x + 21 * y >= -15000;\nloop invariant x - 21 * y <= -15000;\nloop invariant x + 22 * y >= -15000;\nloop invariant x - 22 * y <= -15000;\nloop invariant x + 23 * y >= -15000;\nloop invariant x - 23 * y <= -15000;\nloop invariant x + 24 * y >= -15000;\nloop invariant x - 24 * y <= -15000;\nloop invariant x + 25 * y >= -15000;\nloop invariant x - 25 * y <= -15000;\nloop invariant x + 26 * y >= -15000;\nloop invariant x - 26 * y <= -15000;\nloop invariant x + 27 * y >= -15000;\nloop invariant x - 27 * y <= -15000;\nloop invariant x + 28 * y >= -15000;\nloop invariant x - 28 * y <= -15000;\nloop invariant x + 29 * y >= -15000;\nloop invariant x - 29 * y <= -15000;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= -15000;\nloop invariant 0 <= y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 41,
                "annotations": "```\n/*@\nloop invariant ( z1 = 0 );\nloop invariant ( z2 = 0 );\nloop invariant ( z3 = 0 );\nloop invariant ( x = -15000 );\nloop invariant ( y = z2 );\nloop invariant ( z1 = 1 );\nloop invariant ( z2 = z2 + 1 );\nloop invariant ( z1 = 1 + z2 );\nloop invariant ( x = -15000 + z2 );\nloop invariant ( y = z2 + 1 );\nloop invariant ( z1 = 1 + z2 );\nloop invariant ( x = -15000 + z2 + z2 );\nloop invariant ( y = z2 + 1 + 1 );\nloop invariant ( z1 = 1 + z2 + 1 );\nloop invariant ( x = -15000 + z2 + z2 + z2 );\nloop invariant ( y = z2 + 1 + 1 + 1 );\nloop invariant ( z1 = 1 + z2 + 1 + 1 );\nloop invariant ( x = -15000 + z2 + z2 + z2 + z2 );\nloop invariant ( y = z2 + 1 + 1 + 1 + 1 );\nloop invariant ( z1 = 1 + z2 + 1 + 1 + 1 );\nloop invariant ( x = -15000 + z2 + z2 + z2 + z2 + z2 );\nloop invariant ( y = z2 + 1 + 1 + 1 + 1 + 1 );\nloop invariant ( z1 = 1 + z2 + 1 + 1 + 1 + 1 );\nloop invariant ( x = -15000 + z2 + z2 + z2 + z2 + z2 + z2 );\nloop invariant ( y = z2 + 1 + 1 + 1 + 1 + 1 + 1 );\nloop invariant ( z1 = 1 + z2 + 1 + 1 + 1 + 1 + 1 );\nloop invariant ( x = -15000 + z2 + z2 + z2 + z2 + z2 + z2 + z2 );\nloop invariant ( y = z2 + 1 + 1 + 1 + 1 + 1 + 1 + 1 );\nloop invariant ( z1 = 1 + z2 + 1 + 1 + 1 + 1 + 1 + 1 );\nloop invariant ( x = -15000 + z2 + z2 + z2 + z2 + z2 + z2 + z2 + z2 );\nloop invariant ( y = z2 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 );\nloop invariant ( z1 = 1 + z2 + 1 + 1 + 1 + 1 + 1 + 1 + 1 );\nloop invariant ( x = -15000 + z2 + z2 + z2 + z2 + z2 + z2 + z2 + z2 + z2 );\nloop invariant ( y = z2 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 );\nloop invariant ( z1 = 1 + z2 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 );\nloop invariant ( x = -15000 + z2 + z2 + z2 + z2 + z2 + z2 + z2 + z2 + z2 + z2 );\nloop invariant ( y = z2 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 );\nloop invariant ( z1 = 1 + z2 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 );\nloop invariant ( x = -15000 + z2 + z2 + z2 + z2 + z2 + z2 + z2 + z2 + z2 + z2 + z2 );\nloop invariant ( y = z2 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 );\nloop invariant ( z1 = 1 + z2 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 );\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 18: Assignment operators not allowed in annotations.",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = -15000);\n  \n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant - y > 0;\nloop invariant x >= -15000;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant - y > 0 is neither established nor preserved.\nloop invariant x >= -15000 is established but not preserved.\nAssertion y > 0: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = -15000);\n  \n  /*@\n\n\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x < 0;\nloop invariant y > 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x < 0 is preserved but not established.\nloop invariant y > 0 is partially proven to be inductive.\nAssertion y > 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = -15000);\n  \n  /*@\n\n\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= x + y < 0;\nloop invariant y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < 0;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\nloop invariant x + y < -15000;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x + y < 0 is preserved but not established.\nloop invariant y < -15000 is partially proven to be inductive.\nloop invariant x + y < -15000 is partially proven to be inductive.\nloop invariant x + y < 0 is partially proven to be inductive.\nAssertion y > 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = -15000);\n  \n  /*@\n\n\n\n\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 20000;\nloop invariant x <= (20000 - y);\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= -15000;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= y <= 20000 is preserved but not established.\nloop invariant x <= (20000 - y) is partially proven to be inductive.\nloop invariant x >= (1 + (y - 1) * y / 2) is preserved but not established.\nloop invariant x >= -15000 is partially proven to be inductive.\nAssertion y > 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = -15000);\n  \n  /*@\n\n\n\n\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 8,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= 0;\nloop invariant x >= y;\nloop invariant x >= -15000;\nloop invariant x < 0 ==> y > 0;\nloop invariant x < 0 ==> y >= 1;\nloop invariant x < 0 ==> y <= 100000;\nloop invariant x < 0 ==> x >= y;\nloop invariant x < 0 ==> x >= -15000;\nloop invariant x < 0 ==> y >= 1 ==> x >= (1 + (y - 1) * y / 2);\nloop invariant x < 0 ==> y >= 1 ==> x >= (1 + (y - 1) * y / 2) ==> x >= 0;\nloop invariant x < 0 ==> y >= 1 ==> x >= (1 + (y - 1) * y / 2) ==> x >= 0 ==> x >= y;\nloop invariant x < 0 ==> y >= 1 ==> x >= (1 + (y - 1) * y / 2) ==> x >= 0 ==> x >= y ==> x >= -15000;\nloop invariant x < 0 ==> y >= 1 ==> x >= (1 + (y - 1) * y / 2) ==> x >= 0 ==> x >= y ==> x >= -15000 ==> y <= 100000;\nloop invariant x < 0 ==> y >= 1 ==> x >= (1 + (y - 1) * y / 2) ==> x >= 0 ==> x >= y ==> x >= -15000 ==> y <= 100000 ==> x >= y;\nloop invariant x < 0 ==> y >= 1 ==> x >= (1 + (y - 1) * y / 2) ==> x >= 0 ==> x >= y ==> x >= -15000 ==> y <= 100000 ==> x >= y ==> x >= -15000;\nloop invariant x < 0 ==> y >= 1 ==> x >= (1 + (y - 1) * y / 2) ==> x >= 0 ==> x >= y ==> x >= -15000 ==> y <= 100000 ==> x >= y ==> x >= -15000 ==> y >= 1;\nloop invariant x < 0 ==> y >= 1 ==> x >= (1 + (y - 1) * y / 2) ==> x >= 0 ==> x >= y ==> x >= -15000 ==> y <= 100000 ==> x >= y ==> x >= -15000 ==> y >= 1 ==> x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= y <= 100000 is preserved but not established.\nloop invariant x >= (1 + (y - 1) * y / 2) is preserved but not established.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant x >= y is partially proven to be inductive.\nloop invariant x >= -15000 is partially proven to be inductive.\nloop invariant x < 0 ==> y > 0 is partially proven to be inductive.\nloop invariant x < 0 ==> y >= 1 is partially proven to be inductive.\nloop invariant x < 0 ==> y <= 100000 is partially proven to be inductive.\nloop invariant x < 0 ==> x >= y is partially proven to be inductive.\nloop invariant x < 0 ==> x >= -15000 is partially proven to be inductive.\nloop invariant x < 0 ==> y >= 1 ==> x >= (1 + (y - 1) * y / 2) is partially proven to be inductive.\nloop invariant x < 0 ==> y >= 1 ==> x >= (1 + (y - 1) * y / 2) ==> x >= 0 is partially proven to be inductive.\nloop invariant x < 0 ==> y >= 1 ==> x >= (1 + (y - 1) * y / 2) ==> x >= 0 ==> x >= y is partially proven to be inductive.\nloop invariant x < 0 ==> y >= 1 ==> x >= (1 + (y - 1) * y / 2) ==> x >= 0 ==> x >= y ==> x >= -15000 is partially proven to be inductive.\nloop invariant x < 0 ==> y >= 1 ==> x >= (1 + (y - 1) * y / 2) ==> x >= 0 ==> x >= y ==> x >= -15000 ==> y <= 100000 is partially proven to be inductive.\nloop invariant x < 0 ==> y >= 1 ==> x >= (1 + (y - 1) * y / 2) ==> x >= 0 ==> x >= y ==> x >= -15000 ==> y <= 100000 ==> x >= y is partially proven to be inductive.\nloop invariant x < 0 ==> y >= 1 ==> x >= (1 + (y - 1) * y / 2) ==> x >= 0 ==> x >= y ==> x >= -15000 ==> y <= 100000 ==> x >= y ==> x >= -15000 is partially proven to be inductive.\nloop invariant x < 0 ==> y >= 1 ==> x >= (1 + (y - 1) * y / 2) ==> x >= 0 ==> x >= y ==> x >= -15000 ==> y <= 100000 ==> x >= y ==> x >= -15000 ==> y >= 1 is partially proven to be inductive.\nloop invariant x < 0 ==> y >= 1 ==> x >= (1 + (y - 1) * y / 2) ==> x >= 0 ==> x >= y ==> x >= -15000 ==> y <= 100000 ==> x >= y ==> x >= -15000 ==> y >= 1 ==> x >= (1 + (y - 1) * y / 2) is partially proven to be inductive.\nAssertion y > 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = -15000);\n  \n  /*@\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i12: x < 0 ==> y >= 1 ==> x >= (1 + (y - 1) * y / 2) ==> x >= 0;\nloop invariant i13: x < 0 ==> y >= 1 ==> x >= (1 + (y - 1) * y / 2) ==> x >= 0 ==> x >= y;\nloop invariant i14: x < 0 ==> y >= 1 ==> x >= (1 + (y - 1) * y / 2) ==> x >= 0 ==> x >= y ==> x >= -15000;\nloop invariant i15: x < 0 ==> y >= 1 ==> x >= (1 + (y - 1) * y / 2) ==> x >= 0 ==> x >= y ==> x >= -15000 ==> y <= 100000;\nloop invariant i16: x < 0 ==> y >= 1 ==> x >= (1 + (y - 1) * y / 2) ==> x >= 0 ==> x >= y ==> x >= -15000 ==> y <= 100000 ==> x >= y;\nloop invariant i17: x < 0 ==> y >= 1 ==> x >= (1 + (y - 1) * y / 2) ==> x >= 0 ==> x >= y ==> x >= -15000 ==> y <= 100000 ==> x >= y ==> x >= -15000;\nloop invariant i18: x < 0 ==> y >= 1 ==> x >= (1 + (y - 1) * y / 2) ==> x >= 0 ==> x >= y ==> x >= -15000 ==> y <= 100000 ==> x >= y ==> x >= -15000 ==> y >= 1;\nloop invariant i19: x < 0 ==> y >= 1 ==> x >= (1 + (y - 1) * y / 2) ==> x >= 0 ==> x >= y ==> x >= -15000 ==> y <= 100000 ==> x >= y ==> x >= -15000 ==> y >= 1 ==> x >= (1 + (y - 1) * y / 2);\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x + y == y + x;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= y <= 100000 is preserved but not established.\nloop invariant x >= (1 + (y - 1) * y / 2) is preserved but not established.\nloop invariant x + y == y + x is partially proven to be inductive.\nAssertion y > 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = -15000);\n  \n  /*@\n\n\nloop invariant i3: x + y == y + x;\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= y <= 100000 is preserved but not established.\nloop invariant x >= (1 + (y - 1) * y / 2) is preserved but not established.\nAssertion y > 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = -15000);\n  \n  /*@\n\n\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= y <= 100000 is preserved but not established.\nloop invariant x >= (1 + (y - 1) * y / 2) is preserved but not established.\nAssertion y > 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = -15000);\n  \n  /*@\n\n\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= y <= 100000 is preserved but not established.\nloop invariant x >= (1 + (y - 1) * y / 2) is preserved but not established.\nAssertion y > 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = -15000);\n  \n  /*@\n\n\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= y <= 100000 is preserved but not established.\nloop invariant x >= (1 + (y - 1) * y / 2) is preserved but not established.\nAssertion y > 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = -15000);\n  \n  /*@\n\n\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= -x;loop invariant x <= y;loop invariant x + y <= y + y * y / 2;loop invariant x + y <= y + y * (y + 1) / 2;loop invariant x + y <= y + (y + 1) * (y + 2) / 2;loop invariant x + y <= y + (y + 1) * (y + 2) * (y + 3) / 6;loop invariant x + y <= y + (y + 1) * (y + 2) * (y + 3) * (y + 4) / 24;loop invariant x + y <= y + (y + 1) * (y + 2) * (y + 3) * (y + 4) * (y + 5) / 120;loop invariant x + y <= y + (y + 1) * (y + 2) * (y + 3) * (y + 4) * (y + 5) * (y + 6) / 720;loop invariant x + y <= y + (y + 1) * (y + 2) * (y + 3) * (y + 4) * (y + 5) * (y + 6) * (y + 7) / 5040;loop invariant x + y <= y + (y + 1) * (y + 2) * (y + 3) * (y + 4) * (y + 5) * (y + 6) * (y + 7) * (y + 8) / 40320;loop invariant x + y <= y + (y + 1) * (y + 2) * (y + 3) * (y + 4) * (y + 5) * (y + 6) * (y + 7) * (y + 8) * (y + 9) / 362880;loop invariant x + y <= y + (y + 1) * (y + 2) * (y + 3) * (y + 4) * (y + 5) * (y + 6) * (y + 7) * (y + 8) * (y + 9) * (y + 10) / 3628800;loop invariant x + y <= y + (y + 1) * (y + 2) * (y + 3) * (y + 4) * (y + 5) * (y + 6) * (y + 7) * (y + 8) * (y + 9) * (y + 10) * (y + 11) / 39916800;loop invariant x + y <= y + (y + 1) * (y + 2) * (y + 3) * (y + 4) * (y + 5) * (y + 6) * (y + 7) * (y + 8) * (y + 9) * (y + 10) * (y + 11) * (y + 12) / 479001600;loop invariant x + y <= y + (y + 1) * (y + 2) * (y + 3) * (y + 4) * (y + 5) * (y + 6) * (y + 7) * (y + 8) * (y + 9) * (y + 10) * (y + 11) * (y + 12) * (y + 13) / 6227020800;loop invariant x + y <= y + (y + 1) * (y + 2) * (y + 3) * (y + 4) * (y + 5) * (y + 6) * (y + 7) * (y + 8) * (y + 9) * (y + 10) * (y + 11) * (y + 12) * (y + 13) * (y + 14) / 87178291200;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= y <= -x;loop invariant x <= y;loop invariant x + y <= y + y * y / 2;loop invariant x + y <= y + y * (y + 1) / 2;loop invariant x + y <= y + (y + 1) * (y + 2) / 2;loop invariant x + y <= y + (y + 1) * (y + 2) * (y + 3) / 6;loop invariant x + y <= y + (y + 1) * (y + 2) * (y + 3) * (y + 4) / 24;loop invariant x + y <= y + (y + 1) * (y + 2) * (y + 3) * (y + 4) * (y + 5) / 120;loop invariant x + y <= y + (y + 1) * (y + 2) * (y + 3) * (y + 4) * (y + 5) * (y + 6) / 720;loop invariant x + y <= y + (y + 1) * (y + 2) * (y + 3) * (y + 4) * (y + 5) * (y + 6) * (y + 7) / 5040;loop invariant x + y <= y + (y + 1) * (y + 2) * (y + 3) * (y + 4) * (y + 5) * (y + 6) * (y + 7) * (y + 8) / 40320;loop invariant x + y <= y + (y + 1) * (y + 2) * (y + 3) * (y + 4) * (y + 5) * (y + 6) * (y + 7) * (y + 8) * (y + 9) / 362880;loop invariant x + y <= y + (y + 1) * (y + 2) * (y + 3) * (y + 4) * (y + 5) * (y + 6) * (y + 7) * (y + 8) * (y + 9) * (y + 10) / 3628800;loop invariant x + y <= y + (y + 1) * (y + 2) * (y + 3) * (y + 4) * (y + 5) * (y + 6) * (y + 7) * (y + 8) * (y + 9) * (y + 10) * (y + 11) / 39916800;loop invariant x + y <= y + (y + 1) * (y + 2) * (y + 3) * (y + 4) * (y + 5) * (y + 6) * (y + 7) * (y + 8) * (y + 9) * (y + 10) * (y + 11) * (y + 12) / 479001600;loop invariant x + y <= y + (y + 1) * (y + 2) * (y + 3) * (y + 4) * (y + 5) * (y + 6) * (y + 7) * (y + 8) * (y + 9) * (y + 10) * (y + 11) * (y + 12) * (y + 13) / 6227020800;loop invariant x + y <= y + (y + 1) * (y + 2) * (y + 3) * (y + 4) * (y + 5) * (y + 6) * (y + 7) * (y + 8) * (y + 9) * (y + 10) * (y + 11) * (y + 12) * (y + 13) * (y + 14) / 87178291200 is neither established nor preserved.\nAssertion y > 0: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = -15000);\n  \n  /*@\n\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000; loop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= y <= 100000; loop invariant x >= (1 + (y - 1) * y / 2) is preserved but not established.\nAssertion y > 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = -15000);\n  \n  /*@\n\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 31,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x + y >= 0;\nloop invariant x - y <= 0;\nloop invariant x * y <= 0;\nloop invariant x + 2 * y >= -15000;\nloop invariant x - 2 * y <= -15000;\nloop invariant x + 3 * y >= -15000;\nloop invariant x - 3 * y <= -15000;\nloop invariant x + 4 * y >= -15000;\nloop invariant x - 4 * y <= -15000;\nloop invariant x + 5 * y >= -15000;\nloop invariant x - 5 * y <= -15000;\nloop invariant x + 6 * y >= -15000;\nloop invariant x - 6 * y <= -15000;\nloop invariant x + 7 * y >= -15000;\nloop invariant x - 7 * y <= -15000;\nloop invariant x + 8 * y >= -15000;\nloop invariant x - 8 * y <= -15000;\nloop invariant x + 9 * y >= -15000;\nloop invariant x - 9 * y <= -15000;\nloop invariant x + 10 * y >= -15000;\nloop invariant x - 10 * y <= -15000;\nloop invariant x + 11 * y >= -15000;\nloop invariant x - 11 * y <= -15000;\nloop invariant x + 12 * y >= -15000;\nloop invariant x - 12 * y <= -15000;\nloop invariant x + 13 * y >= -15000;\nloop invariant x - 13 * y <= -15000;\nloop invariant x + 14 * y >= -15000;\nloop invariant x - 14 * y <= -15000;\nloop invariant x + 15 * y >= -15000;\nloop invariant x - 15 * y <= -15000;\nloop invariant x + 16 * y >= -15000;\nloop invariant x - 16 * y <= -15000;\nloop invariant x + 17 * y >= -15000;\nloop invariant x - 17 * y <= -15000;\nloop invariant x + 18 * y >= -15000;\nloop invariant x - 18 * y <= -15000;\nloop invariant x + 19 * y >= -15000;\nloop invariant x - 19 * y <= -15000;\nloop invariant x + 20 * y >= -15000;\nloop invariant x - 20 * y <= -15000;\nloop invariant x + 21 * y >= -15000;\nloop invariant x - 21 * y <= -15000;\nloop invariant x + 22 * y >= -15000;\nloop invariant x - 22 * y <= -15000;\nloop invariant x + 23 * y >= -15000;\nloop invariant x - 23 * y <= -15000;\nloop invariant x + 24 * y >= -15000;\nloop invariant x - 24 * y <= -15000;\nloop invariant x + 25 * y >= -15000;\nloop invariant x - 25 * y <= -15000;\nloop invariant x + 26 * y >= -15000;\nloop invariant x - 26 * y <= -15000;\nloop invariant x + 27 * y >= -15000;\nloop invariant x - 27 * y <= -15000;\nloop invariant x + 28 * y >= -15000;\nloop invariant x - 28 * y <= -15000;\nloop invariant x + 29 * y >= -15000;\nloop invariant x - 29 * y <= -15000;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= y <= 100000 is preserved but not established.\nloop invariant x >= (1 + (y - 1) * y / 2) is preserved but not established.\nloop invariant x + y >= 0 is partially proven to be inductive.\nloop invariant x - y <= 0 is partially proven to be inductive.\nloop invariant x * y <= 0 is partially proven to be inductive.\nloop invariant x + 2 * y >= -15000 is partially proven to be inductive.\nloop invariant x - 2 * y <= -15000 is partially proven to be inductive.\nloop invariant x + 3 * y >= -15000 is partially proven to be inductive.\nloop invariant x - 3 * y <= -15000 is partially proven to be inductive.\nloop invariant x + 4 * y >= -15000 is partially proven to be inductive.\nloop invariant x - 4 * y <= -15000 is partially proven to be inductive.\nloop invariant x + 5 * y >= -15000 is partially proven to be inductive.\nloop invariant x - 5 * y <= -15000 is partially proven to be inductive.\nloop invariant x + 6 * y >= -15000 is partially proven to be inductive.\nloop invariant x - 6 * y <= -15000 is partially proven to be inductive.\nloop invariant x + 7 * y >= -15000 is partially proven to be inductive.\nloop invariant x - 7 * y <= -15000 is partially proven to be inductive.\nloop invariant x + 8 * y >= -15000 is partially proven to be inductive.\nloop invariant x - 8 * y <= -15000 is partially proven to be inductive.\nloop invariant x + 9 * y >= -15000 is partially proven to be inductive.\nloop invariant x - 9 * y <= -15000 is partially proven to be inductive.\nloop invariant x + 10 * y >= -15000 is partially proven to be inductive.\nloop invariant x - 10 * y <= -15000 is partially proven to be inductive.\nloop invariant x + 11 * y >= -15000 is partially proven to be inductive.\nloop invariant x - 11 * y <= -15000 is partially proven to be inductive.\nloop invariant x + 12 * y >= -15000 is partially proven to be inductive.\nloop invariant x - 12 * y <= -15000 is partially proven to be inductive.\nloop invariant x + 13 * y >= -15000 is partially proven to be inductive.\nloop invariant x - 13 * y <= -15000 is partially proven to be inductive.\nloop invariant x + 14 * y >= -15000 is partially proven to be inductive.\nloop invariant x - 14 * y <= -15000 is partially proven to be inductive.\nloop invariant x + 15 * y >= -15000 is partially proven to be inductive.\nloop invariant x - 15 * y <= -15000 is partially proven to be inductive.\nloop invariant x + 16 * y >= -15000 is partially proven to be inductive.\nloop invariant x - 16 * y <= -15000 is partially proven to be inductive.\nloop invariant x + 17 * y >= -15000 is partially proven to be inductive.\nloop invariant x - 17 * y <= -15000 is partially proven to be inductive.\nloop invariant x + 18 * y >= -15000 is partially proven to be inductive.\nloop invariant x - 18 * y <= -15000 is partially proven to be inductive.\nloop invariant x + 19 * y >= -15000 is partially proven to be inductive.\nloop invariant x - 19 * y <= -15000 is partially proven to be inductive.\nloop invariant x + 20 * y >= -15000 is partially proven to be inductive.\nloop invariant x - 20 * y <= -15000 is partially proven to be inductive.\nloop invariant x + 21 * y >= -15000 is partially proven to be inductive.\nloop invariant x - 21 * y <= -15000 is partially proven to be inductive.\nloop invariant x + 22 * y >= -15000 is partially proven to be inductive.\nloop invariant x - 22 * y <= -15000 is partially proven to be inductive.\nloop invariant x + 23 * y >= -15000 is partially proven to be inductive.\nloop invariant x - 23 * y <= -15000 is partially proven to be inductive.\nloop invariant x + 24 * y >= -15000 is partially proven to be inductive.\nloop invariant x - 24 * y <= -15000 is partially proven to be inductive.\nloop invariant x + 25 * y >= -15000 is partially proven to be inductive.\nloop invariant x - 25 * y <= -15000 is partially proven to be inductive.\nloop invariant x + 26 * y >= -15000 is partially proven to be inductive.\nloop invariant x - 26 * y <= -15000 is partially proven to be inductive.\nloop invariant x + 27 * y >= -15000 is partially proven to be inductive.\nloop invariant x - 27 * y <= -15000 is partially proven to be inductive.\nloop invariant x + 28 * y >= -15000 is partially proven to be inductive.\nloop invariant x - 28 * y <= -15000 is partially proven to be inductive.\nloop invariant x + 29 * y >= -15000 is partially proven to be inductive.\nloop invariant x - 29 * y <= -15000 is partially proven to be inductive.\nAssertion y > 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = -15000);\n  \n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= -15000;\nloop invariant 0 <= y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\nloop invariant x <= -15000;\nloop invariant y <= 1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= -15000 is preserved but not established.\nloop invariant 0 <= y <= 1 is partially proven to be inductive.\nloop invariant x <= -15000 is partially proven to be inductive.\nloop invariant y <= 1 is partially proven to be inductive.\nAssertion y > 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = -15000);\n  \n  /*@\n\n\n\n\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 18: Assignment operators not allowed in annotations.",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = -15000);\n  \n  /*@\nloop invariant i1: ( z1 = 0 );\nloop invariant i2: ( z2 = 0 );\nloop invariant i3: ( z3 = 0 );\nloop invariant i4: ( x = -15000 );\nloop invariant i5: ( y = z2 );\nloop invariant i6: ( z1 = 1 );\nloop invariant i7: ( z2 = z2 + 1 );\nloop invariant i8: ( z1 = 1 + z2 );\nloop invariant i9: ( x = -15000 + z2 );\nloop invariant i10: ( y = z2 + 1 );\nloop invariant i11: ( x = -15000 + z2 + z2 );\nloop invariant i12: ( y = z2 + 1 + 1 );\nloop invariant i13: ( z1 = 1 + z2 + 1 );\nloop invariant i14: ( x = -15000 + z2 + z2 + z2 );\nloop invariant i15: ( y = z2 + 1 + 1 + 1 );\nloop invariant i16: ( z1 = 1 + z2 + 1 + 1 );\nloop invariant i17: ( x = -15000 + z2 + z2 + z2 + z2 );\nloop invariant i18: ( y = z2 + 1 + 1 + 1 + 1 );\nloop invariant i19: ( z1 = 1 + z2 + 1 + 1 + 1 );\nloop invariant i20: ( x = -15000 + z2 + z2 + z2 + z2 + z2 );\nloop invariant i21: ( y = z2 + 1 + 1 + 1 + 1 + 1 );\nloop invariant i22: ( z1 = 1 + z2 + 1 + 1 + 1 + 1 );\nloop invariant i23: ( x = -15000 + z2 + z2 + z2 + z2 + z2 + z2 );\nloop invariant i24: ( y = z2 + 1 + 1 + 1 + 1 + 1 + 1 );\nloop invariant i25: ( z1 = 1 + z2 + 1 + 1 + 1 + 1 + 1 );\nloop invariant i26: ( x = -15000 + z2 + z2 + z2 + z2 + z2 + z2 + z2 );\nloop invariant i27: ( y = z2 + 1 + 1 + 1 + 1 + 1 + 1 + 1 );\nloop invariant i28: ( z1 = 1 + z2 + 1 + 1 + 1 + 1 + 1 + 1 );\nloop invariant i29: ( x = -15000 + z2 + z2 + z2 + z2 + z2 + z2 + z2 + z2 );\nloop invariant i30: ( y = z2 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 );\nloop invariant i31: ( z1 = 1 + z2 + 1 + 1 + 1 + 1 + 1 + 1 + 1 );\nloop invariant i32: ( x = -15000 + z2 + z2 + z2 + z2 + z2 + z2 + z2 + z2 + z2 );\nloop invariant i33: ( y = z2 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 );\nloop invariant i34: ( z1 = 1 + z2 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 );\nloop invariant i35: ( x = -15000 + z2 + z2 + z2 + z2 + z2 + z2 + z2 + z2 + z2 + z2 );\nloop invariant i36: ( y = z2 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 );\nloop invariant i37: ( z1 = 1 + z2 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 );\nloop invariant i38: ( x = -15000 + z2 + z2 + z2 + z2 + z2 + z2 + z2 + z2 + z2 + z2 + z2 );\nloop invariant i39: ( y = z2 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 );\nloop invariant i40: ( z1 = 1 + z2 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 );\nloop invariant i41: - y > 0;\nloop invariant i42: x >= -15000;\nloop invariant i43: 0 <= x < 0;\nloop invariant i44: y > 0;\nloop invariant i45: 0 <= x + y < 0;\nloop invariant i46: y < -15000;\nloop invariant i47: x + y < -15000;\nloop invariant i48: x + y < 0;\nloop invariant i49: 0 <= y <= 20000;\nloop invariant i50: x <= (20000 - y);\nloop invariant i51: x >= (1 + (y - 1) * y / 2);\nloop invariant i52: 0 <= y <= 100000;\nloop invariant i53: x >= 0;\nloop invariant i54: x >= y;\nloop invariant i55: x < 0 ==> y > 0;\nloop invariant i56: x < 0 ==> y >= 1;\nloop invariant i57: x < 0 ==> y <= 100000;\nloop invariant i58: x < 0 ==> x >= y;\nloop invariant i59: x < 0 ==> x >= -15000;\nloop invariant i60: x < 0 ==> y >= 1 ==> x >= (1 + (y - 1) * y / 2);\nloop invariant i61: x < 0 ==> y >= 1 ==> x >= (1 + (y - 1) * y / 2) ==> x >= 0;\nloop invariant i62: x < 0 ==> y >= 1 ==> x >= (1 + (y - 1) * y / 2) ==> x >= 0 ==> x >= y;\nloop invariant i63: x < 0 ==> y >= 1 ==> x >= (1 + (y - 1) * y / 2) ==> x >= 0 ==> x >= y ==> x >= -15000;\nloop invariant i64: x < 0 ==> y >= 1 ==> x >= (1 + (y - 1) * y / 2) ==> x >= 0 ==> x >= y ==> x >= -15000 ==> y <= 100000;\nloop invariant i65: x < 0 ==> y >= 1 ==> x >= (1 + (y - 1) * y / 2) ==> x >= 0 ==> x >= y ==> x >= -15000 ==> y <= 100000 ==> x >= y;\nloop invariant i66: x < 0 ==> y >= 1 ==> x >= (1 + (y - 1) * y / 2) ==> x >= 0 ==> x >= y ==> x >= -15000 ==> y <= 100000 ==> x >= y ==> x >= -15000;\nloop invariant i67: x < 0 ==> y >= 1 ==> x >= (1 + (y - 1) * y / 2) ==> x >= 0 ==> x >= y ==> x >= -15000 ==> y <= 100000 ==> x >= y ==> x >= -15000 ==> y >= 1;\nloop invariant i68: x < 0 ==> y >= 1 ==> x >= (1 + (y - 1) * y / 2) ==> x >= 0 ==> x >= y ==> x >= -15000 ==> y <= 100000 ==> x >= y ==> x >= -15000 ==> y >= 1 ==> x >= (1 + (y - 1) * y / 2);\nloop invariant i69: x + y == y + x;\nloop invariant i70: 0 <= y <= -x;loop invariant x <= y;loop invariant x + y <= y + y * y / 2;loop invariant x + y <= y + y * (y + 1) / 2;loop invariant x + y <= y + (y + 1) * (y + 2) / 2;loop invariant x + y <= y + (y + 1) * (y + 2) * (y + 3) / 6;loop invariant x + y <= y + (y + 1) * (y + 2) * (y + 3) * (y + 4) / 24;loop invariant x + y <= y + (y + 1) * (y + 2) * (y + 3) * (y + 4) * (y + 5) / 120;loop invariant x + y <= y + (y + 1) * (y + 2) * (y + 3) * (y + 4) * (y + 5) * (y + 6) / 720;loop invariant x + y <= y + (y + 1) * (y + 2) * (y + 3) * (y + 4) * (y + 5) * (y + 6) * (y + 7) / 5040;loop invariant x + y <= y + (y + 1) * (y + 2) * (y + 3) * (y + 4) * (y + 5) * (y + 6) * (y + 7) * (y + 8) / 40320;loop invariant x + y <= y + (y + 1) * (y + 2) * (y + 3) * (y + 4) * (y + 5) * (y + 6) * (y + 7) * (y + 8) * (y + 9) / 362880;loop invariant x + y <= y + (y + 1) * (y + 2) * (y + 3) * (y + 4) * (y + 5) * (y + 6) * (y + 7) * (y + 8) * (y + 9) * (y + 10) / 3628800;loop invariant x + y <= y + (y + 1) * (y + 2) * (y + 3) * (y + 4) * (y + 5) * (y + 6) * (y + 7) * (y + 8) * (y + 9) * (y + 10) * (y + 11) / 39916800;loop invariant x + y <= y + (y + 1) * (y + 2) * (y + 3) * (y + 4) * (y + 5) * (y + 6) * (y + 7) * (y + 8) * (y + 9) * (y + 10) * (y + 11) * (y + 12) / 479001600;loop invariant x + y <= y + (y + 1) * (y + 2) * (y + 3) * (y + 4) * (y + 5) * (y + 6) * (y + 7) * (y + 8) * (y + 9) * (y + 10) * (y + 11) * (y + 12) * (y + 13) / 6227020800;loop invariant x + y <= y + (y + 1) * (y + 2) * (y + 3) * (y + 4) * (y + 5) * (y + 6) * (y + 7) * (y + 8) * (y + 9) * (y + 10) * (y + 11) * (y + 12) * (y + 13) * (y + 14) / 87178291200;\nloop invariant i71: 0 <= y <= 100000; loop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant i72: x + y >= 0;\nloop invariant i73: x - y <= 0;\nloop invariant i74: x * y <= 0;\nloop invariant i75: x + 2 * y >= -15000;\nloop invariant i76: x - 2 * y <= -15000;\nloop invariant i77: x + 3 * y >= -15000;\nloop invariant i78: x - 3 * y <= -15000;\nloop invariant i79: x + 4 * y >= -15000;\nloop invariant i80: x - 4 * y <= -15000;\nloop invariant i81: x + 5 * y >= -15000;\nloop invariant i82: x - 5 * y <= -15000;\nloop invariant i83: x + 6 * y >= -15000;\nloop invariant i84: x - 6 * y <= -15000;\nloop invariant i85: x + 7 * y >= -15000;\nloop invariant i86: x - 7 * y <= -15000;\nloop invariant i87: x + 8 * y >= -15000;\nloop invariant i88: x - 8 * y <= -15000;\nloop invariant i89: x + 9 * y >= -15000;\nloop invariant i90: x - 9 * y <= -15000;\nloop invariant i91: x + 10 * y >= -15000;\nloop invariant i92: x - 10 * y <= -15000;\nloop invariant i93: x + 11 * y >= -15000;\nloop invariant i94: x - 11 * y <= -15000;\nloop invariant i95: x + 12 * y >= -15000;\nloop invariant i96: x - 12 * y <= -15000;\nloop invariant i97: x + 13 * y >= -15000;\nloop invariant i98: x - 13 * y <= -15000;\nloop invariant i99: x + 14 * y >= -15000;\nloop invariant i100: x - 14 * y <= -15000;\nloop invariant i101: x + 15 * y >= -15000;\nloop invariant i102: x - 15 * y <= -15000;\nloop invariant i103: x + 16 * y >= -15000;\nloop invariant i104: x - 16 * y <= -15000;\nloop invariant i105: x + 17 * y >= -15000;\nloop invariant i106: x - 17 * y <= -15000;\nloop invariant i107: x + 18 * y >= -15000;\nloop invariant i108: x - 18 * y <= -15000;\nloop invariant i109: x + 19 * y >= -15000;\nloop invariant i110: x - 19 * y <= -15000;\nloop invariant i111: x + 20 * y >= -15000;\nloop invariant i112: x - 20 * y <= -15000;\nloop invariant i113: x + 21 * y >= -15000;\nloop invariant i114: x - 21 * y <= -15000;\nloop invariant i115: x + 22 * y >= -15000;\nloop invariant i116: x - 22 * y <= -15000;\nloop invariant i117: x + 23 * y >= -15000;\nloop invariant i118: x - 23 * y <= -15000;\nloop invariant i119: x + 24 * y >= -15000;\nloop invariant i120: x - 24 * y <= -15000;\nloop invariant i121: x + 25 * y >= -15000;\nloop invariant i122: x - 25 * y <= -15000;\nloop invariant i123: x + 26 * y >= -15000;\nloop invariant i124: x - 26 * y <= -15000;\nloop invariant i125: x + 27 * y >= -15000;\nloop invariant i126: x - 27 * y <= -15000;\nloop invariant i127: x + 28 * y >= -15000;\nloop invariant i128: x - 28 * y <= -15000;\nloop invariant i129: x + 29 * y >= -15000;\nloop invariant i130: x - 29 * y <= -15000;\nloop invariant i131: 0 <= x <= -15000;\nloop invariant i132: 0 <= y <= 1;\nloop invariant i133: x <= -15000;\nloop invariant i134: y <= 1;\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
        "combined_annotation_num_solver_calls": 84,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = -15000);\n  \n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i61: x < 0 ==> y >= 1 ==> x >= (1 + (y - 1) * y / 2) ==> x >= 0;\nloop invariant i62: x < 0 ==> y >= 1 ==> x >= (1 + (y - 1) * y / 2) ==> x >= 0 ==> x >= y;\nloop invariant i63: x < 0 ==> y >= 1 ==> x >= (1 + (y - 1) * y / 2) ==> x >= 0 ==> x >= y ==> x >= -15000;\nloop invariant i64: x < 0 ==> y >= 1 ==> x >= (1 + (y - 1) * y / 2) ==> x >= 0 ==> x >= y ==> x >= -15000 ==> y <= 100000;\nloop invariant i65: x < 0 ==> y >= 1 ==> x >= (1 + (y - 1) * y / 2) ==> x >= 0 ==> x >= y ==> x >= -15000 ==> y <= 100000 ==> x >= y;\nloop invariant i66: x < 0 ==> y >= 1 ==> x >= (1 + (y - 1) * y / 2) ==> x >= 0 ==> x >= y ==> x >= -15000 ==> y <= 100000 ==> x >= y ==> x >= -15000;\nloop invariant i67: x < 0 ==> y >= 1 ==> x >= (1 + (y - 1) * y / 2) ==> x >= 0 ==> x >= y ==> x >= -15000 ==> y <= 100000 ==> x >= y ==> x >= -15000 ==> y >= 1;\nloop invariant i68: x < 0 ==> y >= 1 ==> x >= (1 + (y - 1) * y / 2) ==> x >= 0 ==> x >= y ==> x >= -15000 ==> y <= 100000 ==> x >= y ==> x >= -15000 ==> y >= 1 ==> x >= (1 + (y - 1) * y / 2);\nloop invariant i69: x + y == y + x;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [],
        "failure": [
            "../dataset/loop_invariants/code2inv/85.c"
        ],
        "skipped": [],
        "total": 1,
        "success_count": 0,
        "failure_count": 1,
        "success_rate": 0.0
    }
}