{
    "logs": {
        "file": "../dataset/loop_invariants/accelerating_invariant_generation/crafted/diamond_safe1.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  while (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
        "success": false,
        "annotation_blocks": [
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant 0 <= y <= 99;\nloop invariant (x % 2) == (y % 2) ==> (x % 2) == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant 99 - x == y % 2;\nloop invariant (y % 2) == 0 ==> (x % 2) == 0;\nloop invariant (y % 2) == 1 ==> (x % 2) == 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant 0 <= y <= 99;\nloop invariant (x % 2) == (y % 2) ==> (x % 2) == 0;\nloop invariant (x % 2) == (y % 2) ==> (y % 2) == 0;\nloop invariant (x % 2) != (y % 2) ==> (x % 2) == 1;\nloop invariant (x % 2) != (y % 2) ==> (y % 2) == 1;\nloop invariant (x % 2) == 0 ==> (y % 2) == 0;\nloop invariant (x % 2) == 1 ==> (y % 2) == 1;\nloop invariant (x % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0;\nloop invariant (x % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1;\nloop invariant (x % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0;\nloop invariant (x % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1;\nloop invariant (x % 2) != (y % 2) ==> (x % 2) == 1 ==> (y % 2) == 0;\nloop invariant (x % 2) != (y % 2) ==> (x % 2) == 0 ==> (y % 2) == 1;\nloop invariant (x % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0;\nloop invariant (x % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1;\nloop invariant (x % 2) != (y % 2) ==> (x % 2) == 1 ==> (y % 2) == 0 ==> (y % 2) == 0;\nloop invariant (x % 2) != (y % 2) ==> (x % 2) == 0 ==> (y % 2) == 1 ==> (y % 2) == 1;\nloop invariant (x % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0;\nloop invariant (x % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1;\nloop invariant (x % 2) != (y % 2) ==> (x % 2) == 1 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0;\nloop invariant (x % 2) != (y % 2) ==> (x % 2) == 0 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1;\nloop invariant (x % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0;\nloop invariant (x % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant x % 2 == 0 ==> y % 2 == 0;\nloop invariant x % 2 == 1 ==> y % 2 == 1;\nloop invariant x % 2 == 0 ==> y % 2 == 0;\nloop invariant x % 2 == 1 ==> y % 2 == 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant 0 <= y <= 99;\nloop invariant (x % 2) == (y % 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant y % 2 == x % 2;\nloop invariant x % 2 == 0 ==> y % 2 == 0;\nloop invariant x % 2 == 1 ==> y % 2 == 1;\n*/\n```",
            "```\n/*@\nloop invariant x <= y <= 99;\nloop invariant x % 2 == y % 2 ==> x % 2 == 0;\nloop invariant x % 2 != y % 2 ==> x % 2 == 1;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant x % 2 == 1 ==> x % 2 == 1;\nloop invariant y % 2 == 0 ==> y % 2 == 0;\nloop invariant y % 2 == 1 ==> y % 2 == 1;\nloop invariant x <= y;\nloop invariant y <= 99;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y;\nloop invariant x >= 0;\nloop invariant (x + 2) % 2 == (y % 2);\nloop invariant x <= 100;\nloop invariant y <= 100;\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant (x % 2) == (y % 2);\nloop invariant 0 <= y <= 99;\nloop invariant ((x % 2) == 0 ? (x >= 2) : (x > 0));\nloop invariant ((y % 2) == 0 ? (y == 0) : (y > 0));\nloop invariant ((x % 2) == 0 ? (x == 2 * x) : (x == 2 * x - 1));\nloop invariant ((y % 2) == 0 ? (y == 2 * y) : (y == 2 * y - 1));\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant 0 <= y <= 100000;\nloop invariant x % 2 == y % 2;\nloop invariant (x % 2) == ((y + 1) % 2);\nloop invariant (x % 2) == ((y + 2) % 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant 0 <= y <= 100000;\nloop invariant (x % 2) == (y % 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant x % 2 == y % 2;\nloop invariant (y % 2 == 0) ==> (x >= 2);\nloop invariant (y % 2 != 0) ==> (x >= 1);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant x % 2 == 0 ==> y % 2 == 0;\nloop invariant x % 2 == 1 ==> y % 2 == 1;\nloop invariant x >= y;\nloop invariant y >= 0;\nloop invariant y <= 99;\nloop invariant x % 2 == 0 ==> x >= 2 * y;\nloop invariant x % 2 == 1 ==> x >= 2 * y + 1;\nloop invariant x % 2 == 0 ==> x <= 2 * y + 80;\nloop invariant x % 2 == 1 ==> x <= 2 * y + 81;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\n\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 12: unexpected token ''",
                "houdini_error": "No annotations found"
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant 0 <= y <= 99;\nloop invariant (x % 2) == (y % 2) ==> (x % 2) == 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is established but not preserved.\nloop invariant 0 <= y <= 99 is preserved but not established.\nloop invariant (x % 2) == (y % 2) ==> (x % 2) == 0 is established but not preserved.\nAssertion x % 2 == y % 2: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  /*@\n\n\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant 99 - x == y % 2;\nloop invariant (y % 2) == 0 ==> (x % 2) == 0;\nloop invariant (y % 2) == 1 ==> (x % 2) == 1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is partially proven to be inductive.\nloop invariant 99 - x == y % 2 is preserved but not established.\nloop invariant (y % 2) == 0 ==> (x % 2) == 0 is partially proven to be inductive.\nloop invariant (y % 2) == 1 ==> (x % 2) == 1 is partially proven to be inductive.\nAssertion x % 2 == y % 2: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  /*@\n\n\nloop invariant i3: (y % 2) == 0 ==> (x % 2) == 0;\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant 0 <= y <= 99;\nloop invariant (x % 2) == (y % 2) ==> (x % 2) == 0;\nloop invariant (x % 2) == (y % 2) ==> (y % 2) == 0;\nloop invariant (x % 2) != (y % 2) ==> (x % 2) == 1;\nloop invariant (x % 2) != (y % 2) ==> (y % 2) == 1;\nloop invariant (x % 2) == 0 ==> (y % 2) == 0;\nloop invariant (x % 2) == 1 ==> (y % 2) == 1;\nloop invariant (x % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0;\nloop invariant (x % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1;\nloop invariant (x % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0;\nloop invariant (x % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1;\nloop invariant (x % 2) != (y % 2) ==> (x % 2) == 1 ==> (y % 2) == 0;\nloop invariant (x % 2) != (y % 2) ==> (x % 2) == 0 ==> (y % 2) == 1;\nloop invariant (x % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0;\nloop invariant (x % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1;\nloop invariant (x % 2) != (y % 2) ==> (x % 2) == 1 ==> (y % 2) == 0 ==> (y % 2) == 0;\nloop invariant (x % 2) != (y % 2) ==> (x % 2) == 0 ==> (y % 2) == 1 ==> (y % 2) == 1;\nloop invariant (x % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0;\nloop invariant (x % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1;\nloop invariant (x % 2) != (y % 2) ==> (x % 2) == 1 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0;\nloop invariant (x % 2) != (y % 2) ==> (x % 2) == 0 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1;\nloop invariant (x % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0;\nloop invariant (x % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is established but not preserved.\nloop invariant 0 <= y <= 99 is preserved but not established.\nloop invariant (x % 2) == (y % 2) ==> (x % 2) == 0 is partially proven to be inductive.\nloop invariant (x % 2) == (y % 2) ==> (y % 2) == 0 is partially proven to be inductive.\nloop invariant (x % 2) != (y % 2) ==> (x % 2) == 1 is preserved but not established.\nloop invariant (x % 2) != (y % 2) ==> (y % 2) == 1 is partially proven to be inductive.\nloop invariant (x % 2) == 0 ==> (y % 2) == 0 is partially proven to be inductive.\nloop invariant (x % 2) == 1 ==> (y % 2) == 1 is partially proven to be inductive.\nloop invariant (x % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 is partially proven to be inductive.\nloop invariant (x % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 is partially proven to be inductive.\nloop invariant (x % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 is partially proven to be inductive.\nloop invariant (x % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 is partially proven to be inductive.\nloop invariant (x % 2) != (y % 2) ==> (x % 2) == 1 ==> (y % 2) == 0 is partially proven to be inductive.\nloop invariant (x % 2) != (y % 2) ==> (x % 2) == 0 ==> (y % 2) == 1 is partially proven to be inductive.\nloop invariant (x % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 is partially proven to be inductive.\nloop invariant (x % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 is partially proven to be inductive.\nloop invariant (x % 2) != (y % 2) ==> (x % 2) == 1 ==> (y % 2) == 0 ==> (y % 2) == 0 is partially proven to be inductive.\nloop invariant (x % 2) != (y % 2) ==> (x % 2) == 0 ==> (y % 2) == 1 ==> (y % 2) == 1 is partially proven to be inductive.\nloop invariant (x % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 is partially proven to be inductive.\nloop invariant (x % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 is partially proven to be inductive.\nloop invariant (x % 2) != (y % 2) ==> (x % 2) == 1 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 is partially proven to be inductive.\nloop invariant (x % 2) != (y % 2) ==> (x % 2) == 0 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 is partially proven to be inductive.\nloop invariant (x % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 is partially proven to be inductive.\nloop invariant (x % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 is partially proven to be inductive.\nAssertion x % 2 == y % 2: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  /*@\n\n\n\n\n\nloop invariant i6: (x % 2) != (y % 2) ==> (y % 2) == 1;\n\nloop invariant i8: (x % 2) == 1 ==> (y % 2) == 1;\nloop invariant i9: (x % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0;\nloop invariant i10: (x % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1;\nloop invariant i11: (x % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0;\nloop invariant i12: (x % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1;\nloop invariant i13: (x % 2) != (y % 2) ==> (x % 2) == 1 ==> (y % 2) == 0;\nloop invariant i14: (x % 2) != (y % 2) ==> (x % 2) == 0 ==> (y % 2) == 1;\nloop invariant i15: (x % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0;\nloop invariant i16: (x % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1;\nloop invariant i17: (x % 2) != (y % 2) ==> (x % 2) == 1 ==> (y % 2) == 0 ==> (y % 2) == 0;\nloop invariant i18: (x % 2) != (y % 2) ==> (x % 2) == 0 ==> (y % 2) == 1 ==> (y % 2) == 1;\nloop invariant i19: (x % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0;\nloop invariant i20: (x % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1;\nloop invariant i21: (x % 2) != (y % 2) ==> (x % 2) == 1 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0;\nloop invariant i22: (x % 2) != (y % 2) ==> (x % 2) == 0 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1;\nloop invariant i23: (x % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0;\nloop invariant i24: (x % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1;\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant x % 2 == 0 ==> y % 2 == 0;\nloop invariant x % 2 == 1 ==> y % 2 == 1;\nloop invariant x % 2 == 0 ==> y % 2 == 0;\nloop invariant x % 2 == 1 ==> y % 2 == 1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is established but not preserved.\nloop invariant x % 2 == 0 ==> y % 2 == 0 is neither established nor preserved.\nloop invariant x % 2 == 1 ==> y % 2 == 1 is partially proven to be inductive.\nAssertion x % 2 == y % 2: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  /*@\n\n\nloop invariant i3: x % 2 == 1 ==> y % 2 == 1;\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant 0 <= y <= 99;\nloop invariant (x % 2) == (y % 2);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is established but not preserved.\nloop invariant 0 <= y <= 99 is preserved but not established.\nloop invariant (x % 2) == (y % 2) is neither established nor preserved.\nAssertion x % 2 == y % 2: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  /*@\n\n\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant y % 2 == x % 2;\nloop invariant x % 2 == 0 ==> y % 2 == 0;\nloop invariant x % 2 == 1 ==> y % 2 == 1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is established but not preserved.\nloop invariant y % 2 == x % 2 is neither established nor preserved.\nloop invariant x % 2 == 0 ==> y % 2 == 0 is partially proven to be inductive.\nloop invariant x % 2 == 1 ==> y % 2 == 1 is partially proven to be inductive.\nAssertion x % 2 == y % 2: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  /*@\n\n\n\nloop invariant i4: x % 2 == 1 ==> y % 2 == 1;\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant x <= y <= 99;\nloop invariant x % 2 == y % 2 ==> x % 2 == 0;\nloop invariant x % 2 != y % 2 ==> x % 2 == 1;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant x % 2 == 1 ==> x % 2 == 1;\nloop invariant y % 2 == 0 ==> y % 2 == 0;\nloop invariant y % 2 == 1 ==> y % 2 == 1;\nloop invariant x <= y;\nloop invariant y <= 99;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x <= y <= 99 is neither established nor preserved.\nloop invariant x % 2 == y % 2 ==> x % 2 == 0 is partially proven to be inductive.\nloop invariant x % 2 != y % 2 ==> x % 2 == 1 is preserved but not established.\nloop invariant x % 2 == 0 ==> x % 2 == 0 is partially proven to be inductive.\nloop invariant x % 2 == 1 ==> x % 2 == 1 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> y % 2 == 0 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> y % 2 == 1 is partially proven to be inductive.\nloop invariant x <= y is partially proven to be inductive.\nloop invariant y <= 99 is partially proven to be inductive.\nAssertion x % 2 == y % 2: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  /*@\n\n\n\nloop invariant i4: x % 2 == 0 ==> x % 2 == 0;\nloop invariant i5: x % 2 == 1 ==> x % 2 == 1;\nloop invariant i6: y % 2 == 0 ==> y % 2 == 0;\nloop invariant i7: y % 2 == 1 ==> y % 2 == 1;\n\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= y;\nloop invariant x >= 0;\nloop invariant (x + 2) % 2 == (y % 2);\nloop invariant x <= 100;\nloop invariant y <= 100;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= y is partially proven to be inductive.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant (x + 2) % 2 == (y % 2) is neither established nor preserved.\nloop invariant x <= 100 is partially proven to be inductive.\nloop invariant y <= 100 is preserved but not established.\nAssertion x % 2 == y % 2: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  /*@\nloop invariant i1: 0 <= y;\nloop invariant i2: x >= 0;\n\nloop invariant i4: x <= 100;\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\n\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 12: unexpected token ''",
                "houdini_error": "No annotations found"
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant (x % 2) == (y % 2);\nloop invariant 0 <= y <= 99;\nloop invariant ((x % 2) == 0 ? (x >= 2) : (x > 0));\nloop invariant ((y % 2) == 0 ? (y == 0) : (y > 0));\nloop invariant ((x % 2) == 0 ? (x == 2 * x) : (x == 2 * x - 1));\nloop invariant ((y % 2) == 0 ? (y == 2 * y) : (y == 2 * y - 1));\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is partially proven to be inductive.\nloop invariant (x % 2) == (y % 2) is preserved but not established.\nloop invariant 0 <= y <= 99 is preserved but not established.\nloop invariant ((x % 2) == 0 ? (x >= 2) : (x > 0)) is preserved but not established.\nloop invariant ((y % 2) == 0 ? (y == 0) : (y > 0)) is partially proven to be inductive.\nloop invariant ((x % 2) == 0 ? (x == 2 * x) : (x == 2 * x - 1)) is partially proven to be inductive.\nloop invariant ((y % 2) == 0 ? (y == 2 * y) : (y == 2 * y - 1)) is partially proven to be inductive.\nAssertion x % 2 == y % 2: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  /*@\n\n\n\n\n\n\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant 0 <= y <= 100000;\nloop invariant x % 2 == y % 2;\nloop invariant (x % 2) == ((y + 1) % 2);\nloop invariant (x % 2) == ((y + 2) % 2);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is partially proven to be inductive.\nloop invariant 0 <= y <= 100000 is preserved but not established.\nloop invariant x % 2 == y % 2 is preserved but not established.\nloop invariant (x % 2) == ((y + 1) % 2) is preserved but not established.\nloop invariant (x % 2) == ((y + 2) % 2) is partially proven to be inductive.\nAssertion x % 2 == y % 2: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  /*@\n\n\n\n\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant 0 <= y <= 100000;\nloop invariant (x % 2) == (y % 2);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is established but not preserved.\nloop invariant 0 <= y <= 100000 is preserved but not established.\nloop invariant (x % 2) == (y % 2) is neither established nor preserved.\nAssertion x % 2 == y % 2: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  /*@\n\n\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant x % 2 == y % 2;\nloop invariant (y % 2 == 0) ==> (x >= 2);\nloop invariant (y % 2 != 0) ==> (x >= 1);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is partially proven to be inductive.\nloop invariant x % 2 == y % 2 is preserved but not established.\nloop invariant (y % 2 == 0) ==> (x >= 2) is preserved but not established.\nloop invariant (y % 2 != 0) ==> (x >= 1) is partially proven to be inductive.\nAssertion x % 2 == y % 2: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  /*@\n\n\n\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant x % 2 == 0 ==> y % 2 == 0;\nloop invariant x % 2 == 1 ==> y % 2 == 1;\nloop invariant x >= y;\nloop invariant y >= 0;\nloop invariant y <= 99;\nloop invariant x % 2 == 0 ==> x >= 2 * y;\nloop invariant x % 2 == 1 ==> x >= 2 * y + 1;\nloop invariant x % 2 == 0 ==> x <= 2 * y + 80;\nloop invariant x % 2 == 1 ==> x <= 2 * y + 81;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is established but not preserved.\nloop invariant x % 2 == 0 ==> y % 2 == 0 is neither established nor preserved.\nloop invariant x % 2 == 1 ==> y % 2 == 1 is partially proven to be inductive.\nloop invariant x >= y is preserved but not established.\nloop invariant y >= 0 is partially proven to be inductive.\nloop invariant y <= 99 is partially proven to be inductive.\nloop invariant x % 2 == 0 ==> x >= 2 * y is partially proven to be inductive.\nloop invariant x % 2 == 1 ==> x >= 2 * y + 1 is partially proven to be inductive.\nloop invariant x % 2 == 0 ==> x <= 2 * y + 80 is established but not preserved.\nloop invariant x % 2 == 1 ==> x <= 2 * y + 81 is partially proven to be inductive.\nAssertion x % 2 == y % 2: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  /*@\n\n\nloop invariant i3: x % 2 == 1 ==> y % 2 == 1;\n\nloop invariant i5: y >= 0;\n\n\n\n\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "loop invariant 0 <= x <= 99 is partially proven to be inductive.\nloop invariant 0 <= y <= 99 is preserved but not established.\nloop invariant (x % 2) == (y % 2) ==> (x % 2) == 0 is partially proven to be inductive.\nloop invariant 99 - x == y % 2 is preserved but not established.\nloop invariant (y % 2) == 0 ==> (x % 2) == 0 is partially proven to be inductive.\nloop invariant (y % 2) == 1 ==> (x % 2) == 1 is partially proven to be inductive.\nloop invariant (x % 2) == (y % 2) ==> (y % 2) == 0 is partially proven to be inductive.\nloop invariant (x % 2) != (y % 2) ==> (x % 2) == 1 is partially proven to be inductive.\nloop invariant (x % 2) != (y % 2) ==> (y % 2) == 1 is partially proven to be inductive.\nloop invariant (x % 2) == 0 ==> (y % 2) == 0 is partially proven to be inductive.\nloop invariant (x % 2) == 1 ==> (y % 2) == 1 is partially proven to be inductive.\nloop invariant (x % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 is partially proven to be inductive.\nloop invariant (x % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 is partially proven to be inductive.\nloop invariant (x % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 is partially proven to be inductive.\nloop invariant (x % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 is partially proven to be inductive.\nloop invariant (x % 2) != (y % 2) ==> (x % 2) == 1 ==> (y % 2) == 0 is partially proven to be inductive.\nloop invariant (x % 2) != (y % 2) ==> (x % 2) == 0 ==> (y % 2) == 1 is partially proven to be inductive.\nloop invariant (x % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 is partially proven to be inductive.\nloop invariant (x % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 is partially proven to be inductive.\nloop invariant (x % 2) != (y % 2) ==> (x % 2) == 1 ==> (y % 2) == 0 ==> (y % 2) == 0 is partially proven to be inductive.\nloop invariant (x % 2) != (y % 2) ==> (x % 2) == 0 ==> (y % 2) == 1 ==> (y % 2) == 1 is partially proven to be inductive.\nloop invariant (x % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 is partially proven to be inductive.\nloop invariant (x % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 is partially proven to be inductive.\nloop invariant (x % 2) != (y % 2) ==> (x % 2) == 1 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 is partially proven to be inductive.\nloop invariant (x % 2) != (y % 2) ==> (x % 2) == 0 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 is partially proven to be inductive.\nloop invariant (x % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 is partially proven to be inductive.\nloop invariant (x % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 is partially proven to be inductive.\nloop invariant x % 2 == 0 ==> y % 2 == 0 is partially proven to be inductive.\nloop invariant x % 2 == 1 ==> y % 2 == 1 is partially proven to be inductive.\nloop invariant (x % 2) == (y % 2) is partially proven to be inductive.\nloop invariant y % 2 == x % 2 is partially proven to be inductive.\nloop invariant x <= y <= 99 is partially proven to be inductive.\nloop invariant x % 2 == y % 2 ==> x % 2 == 0 is partially proven to be inductive.\nloop invariant x % 2 != y % 2 ==> x % 2 == 1 is partially proven to be inductive.\nloop invariant x % 2 == 0 ==> x % 2 == 0 is partially proven to be inductive.\nloop invariant x % 2 == 1 ==> x % 2 == 1 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> y % 2 == 0 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> y % 2 == 1 is partially proven to be inductive.\nloop invariant x <= y is partially proven to be inductive.\nloop invariant y <= 99 is partially proven to be inductive.\nloop invariant 0 <= y is partially proven to be inductive.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant (x + 2) % 2 == (y % 2) is partially proven to be inductive.\nloop invariant x <= 100 is partially proven to be inductive.\nloop invariant y <= 100 is partially proven to be inductive.\nloop invariant ((x % 2) == 0 ? (x >= 2) : (x > 0)) is partially proven to be inductive.\nloop invariant ((y % 2) == 0 ? (y == 0) : (y > 0)) is partially proven to be inductive.\nloop invariant ((x % 2) == 0 ? (x == 2 * x) : (x == 2 * x - 1)) is partially proven to be inductive.\nloop invariant ((y % 2) == 0 ? (y == 2 * y) : (y == 2 * y - 1)) is partially proven to be inductive.\nloop invariant 0 <= y <= 100000 is partially proven to be inductive.\nloop invariant x % 2 == y % 2 is partially proven to be inductive.\nloop invariant (x % 2) == ((y + 1) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((y + 2) % 2) is partially proven to be inductive.\nloop invariant (y % 2 == 0) ==> (x >= 2) is partially proven to be inductive.\nloop invariant (y % 2 != 0) ==> (x >= 1) is partially proven to be inductive.\nloop invariant x >= y is partially proven to be inductive.\nloop invariant y >= 0 is partially proven to be inductive.\nloop invariant x % 2 == 0 ==> x >= 2 * y is partially proven to be inductive.\nloop invariant x % 2 == 1 ==> x >= 2 * y + 1 is partially proven to be inductive.\nloop invariant x % 2 == 0 ==> x <= 2 * y + 80 is partially proven to be inductive.\nloop invariant x % 2 == 1 ==> x <= 2 * y + 81 is partially proven to be inductive.\nAssertion x % 2 == y % 2: Partially proven",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  /*@\nloop invariant i1: 0 <= x <= 99;\nloop invariant i2: 0 <= y <= 99;\nloop invariant i3: (x % 2) == (y % 2) ==> (x % 2) == 0;\nloop invariant i4: 99 - x == y % 2;\nloop invariant i5: (y % 2) == 0 ==> (x % 2) == 0;\nloop invariant i6: (y % 2) == 1 ==> (x % 2) == 1;\nloop invariant i7: (x % 2) == (y % 2) ==> (y % 2) == 0;\nloop invariant i8: (x % 2) != (y % 2) ==> (x % 2) == 1;\nloop invariant i9: (x % 2) != (y % 2) ==> (y % 2) == 1;\nloop invariant i10: (x % 2) == 0 ==> (y % 2) == 0;\nloop invariant i11: (x % 2) == 1 ==> (y % 2) == 1;\nloop invariant i12: (x % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0;\nloop invariant i13: (x % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1;\nloop invariant i14: (x % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0;\nloop invariant i15: (x % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1;\nloop invariant i16: (x % 2) != (y % 2) ==> (x % 2) == 1 ==> (y % 2) == 0;\nloop invariant i17: (x % 2) != (y % 2) ==> (x % 2) == 0 ==> (y % 2) == 1;\nloop invariant i18: (x % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0;\nloop invariant i19: (x % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1;\nloop invariant i20: (x % 2) != (y % 2) ==> (x % 2) == 1 ==> (y % 2) == 0 ==> (y % 2) == 0;\nloop invariant i21: (x % 2) != (y % 2) ==> (x % 2) == 0 ==> (y % 2) == 1 ==> (y % 2) == 1;\nloop invariant i22: (x % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0;\nloop invariant i23: (x % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1;\nloop invariant i24: (x % 2) != (y % 2) ==> (x % 2) == 1 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0;\nloop invariant i25: (x % 2) != (y % 2) ==> (x % 2) == 0 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1;\nloop invariant i26: (x % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0;\nloop invariant i27: (x % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1;\nloop invariant i28: x % 2 == 0 ==> y % 2 == 0;\nloop invariant i29: x % 2 == 1 ==> y % 2 == 1;\nloop invariant i30: (x % 2) == (y % 2);\nloop invariant i31: y % 2 == x % 2;\nloop invariant i32: x <= y <= 99;\nloop invariant i33: x % 2 == y % 2 ==> x % 2 == 0;\nloop invariant i34: x % 2 != y % 2 ==> x % 2 == 1;\nloop invariant i35: x % 2 == 0 ==> x % 2 == 0;\nloop invariant i36: x % 2 == 1 ==> x % 2 == 1;\nloop invariant i37: y % 2 == 0 ==> y % 2 == 0;\nloop invariant i38: y % 2 == 1 ==> y % 2 == 1;\nloop invariant i39: x <= y;\nloop invariant i40: y <= 99;\nloop invariant i41: 0 <= y;\nloop invariant i42: x >= 0;\nloop invariant i43: (x + 2) % 2 == (y % 2);\nloop invariant i44: x <= 100;\nloop invariant i45: y <= 100;\nloop invariant i46: ((x % 2) == 0 ? (x >= 2) : (x > 0));\nloop invariant i47: ((y % 2) == 0 ? (y == 0) : (y > 0));\nloop invariant i48: ((x % 2) == 0 ? (x == 2 * x) : (x == 2 * x - 1));\nloop invariant i49: ((y % 2) == 0 ? (y == 2 * y) : (y == 2 * y - 1));\nloop invariant i50: 0 <= y <= 100000;\nloop invariant i51: x % 2 == y % 2;\nloop invariant i52: (x % 2) == ((y + 1) % 2);\nloop invariant i53: (x % 2) == ((y + 2) % 2);\nloop invariant i54: (y % 2 == 0) ==> (x >= 2);\nloop invariant i55: (y % 2 != 0) ==> (x >= 1);\nloop invariant i56: x >= y;\nloop invariant i57: y >= 0;\nloop invariant i58: x % 2 == 0 ==> x >= 2 * y;\nloop invariant i59: x % 2 == 1 ==> x >= 2 * y + 1;\nloop invariant i60: x % 2 == 0 ==> x <= 2 * y + 80;\nloop invariant i61: x % 2 == 1 ==> x <= 2 * y + 81;\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
        "combined_annotation_num_solver_calls": 17,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  /*@\n\n\n\n\nloop invariant i5: (y % 2) == 0 ==> (x % 2) == 0;\n\n\n\nloop invariant i9: (x % 2) != (y % 2) ==> (y % 2) == 1;\n\nloop invariant i11: (x % 2) == 1 ==> (y % 2) == 1;\nloop invariant i12: (x % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0;\nloop invariant i13: (x % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1;\nloop invariant i14: (x % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0;\nloop invariant i15: (x % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1;\nloop invariant i16: (x % 2) != (y % 2) ==> (x % 2) == 1 ==> (y % 2) == 0;\nloop invariant i17: (x % 2) != (y % 2) ==> (x % 2) == 0 ==> (y % 2) == 1;\nloop invariant i18: (x % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0;\nloop invariant i19: (x % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1;\nloop invariant i20: (x % 2) != (y % 2) ==> (x % 2) == 1 ==> (y % 2) == 0 ==> (y % 2) == 0;\nloop invariant i21: (x % 2) != (y % 2) ==> (x % 2) == 0 ==> (y % 2) == 1 ==> (y % 2) == 1;\nloop invariant i22: (x % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0;\nloop invariant i23: (x % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1;\nloop invariant i24: (x % 2) != (y % 2) ==> (x % 2) == 1 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0;\nloop invariant i25: (x % 2) != (y % 2) ==> (x % 2) == 0 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1;\nloop invariant i26: (x % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0 ==> (y % 2) == 0;\nloop invariant i27: (x % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1 ==> (y % 2) == 1;\n\nloop invariant i29: x % 2 == 1 ==> y % 2 == 1;\n\n\n\n\n\nloop invariant i35: x % 2 == 0 ==> x % 2 == 0;\nloop invariant i36: x % 2 == 1 ==> x % 2 == 1;\nloop invariant i37: y % 2 == 0 ==> y % 2 == 0;\nloop invariant i38: y % 2 == 1 ==> y % 2 == 1;\n\n\nloop invariant i41: 0 <= y;\nloop invariant i42: x >= 0;\n\nloop invariant i44: x <= 100;\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i57: y >= 0;\n\n\n\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_nondet_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum01_true-unreach-call_true-termination.i.annot.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/85.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/ex2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/42.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/diamond_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/odd.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/even.c",
            "../dataset/loop_invariants/code2inv/24.c",
            "../dataset/loop_invariants/code2inv/130.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/diamond_safe1.c"
        ],
        "skipped": [],
        "total": 11,
        "success_count": 2,
        "failure_count": 9,
        "success_rate": 0.18181818181818182
    }
}