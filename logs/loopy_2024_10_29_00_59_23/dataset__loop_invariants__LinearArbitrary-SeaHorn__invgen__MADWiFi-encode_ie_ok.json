{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/MADWiFi-encode_ie_ok.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len = unknown();\n  int bufsize = unknown();\n  int bufsize_0 = unknown();\n  int ielen = unknown();\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  for (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:;\n}",
        "success": false,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= p <= bufsize_0;\nloop invariant i >= 0;\nloop invariant i <= ielen;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize <= bufsize_0-2*(ielen-i);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= p <= bufsize_0;\nloop invariant bufsize_0 + leader_len >= bufsize;\nloop invariant 0 <= bufsize <= bufsize_0;\nloop invariant 0 <= i <= ielen;\nloop invariant ielen * 2 >= bufsize;\nloop invariant 0 <= p + 2 * i <= bufsize_0;\nloop invariant p + 2 * i <= bufsize;\nloop invariant bufsize + leader_len >= bufsize_0;\nloop invariant bufsize + leader_len <= bufsize_0;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\n*/\n```",
            "```\n/*@\nloop invariant i <= ielen;\nloop invariant p > 0;\nloop invariant p <= bufsize_0;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2 * i;\nloop invariant bufsize >= 2 * (i + 1);\nloop invariant p >= leader_len;\nloop invariant p <= bufsize_0 - 2;\nloop invariant p <= bufsize_0 - 2 * (i + 1);\nloop invariant p <= bufsize_0 - 2 * ielen;\nloop invariant p >= leader_len + 2 * i;\nloop invariant p >= leader_len + 2 * (i + 1);\nloop invariant p >= leader_len + 2 * ielen;\nloop invariant p >= leader_len + 2 * (i + 1);\nloop invariant p >= leader_len + 2 * ielen;\nloop invariant p >= leader_len + 2 * (i + 1);\nloop invariant p >= leader_len + 2 * ielen;\nloop invariant p >= leader_len + 2 * (i + 1);\nloop invariant p >= leader_len + 2 * ielen;\nloop invariant p >= leader_len + 2 * (i + 1);\nloop invariant p >= leader_len + 2 * ielen;\nloop invariant p >= leader_len + 2 * (i + 1);\nloop invariant p >= leader_len + 2 * ielen;\nloop invariant p >= leader_len + 2 * (i + 1);\nloop invariant p >= leader_len + 2 * ielen;\nloop invariant p >= leader_len + 2 * (i + 1);\nloop invariant p >= leader_len + 2 * ielen;\nloop invariant p >= leader_len + 2 * (i + 1);\nloop invariant p >= leader_len + 2 * ielen;\nloop invariant p >= leader_len + 2 * (i + 1);\nloop invariant p >= leader_len + 2 * ielen;\nloop invariant p >= leader_len + 2 * (i + 1);\nloop invariant p >= leader_len + 2 * ielen;\nloop invariant p >= leader_len + 2 * (i + 1);\nloop invariant p >= leader_len + 2 * ielen;\nloop invariant p >= leader_len + 2 * (i + 1);\nloop invariant p >= leader_len + 2 * ielen;\nloop invariant p >= leader_len + 2 * (i + 1);\nloop invariant p >= leader_len + 2 * ielen;\nloop invariant p >= leader_len + 2 * (i + 1);\nloop invariant p >= leader_len + 2 * ielen;\nloop invariant p >= leader_len + 2 * (i + 1);\nloop invariant p >= leader_len + 2 * ielen;\nloop invariant p >= leader_len + 2 * (i + 1);\nloop invariant p >= leader_len + 2 * ielen;\nloop invariant p >= leader_len + 2 * (i + 1);\nloop invariant p >= leader_len + 2 * ielen;\nloop invariant p >= leader_len + 2 * (i + 1);\nloop invariant p >= leader_len + 2 * ielen;\nloop invariant p >= leader_len + 2 * (i + 1);\nloop invariant p >= leader_len + 2 * ielen;\nloop invariant p >= leader_len + 2 * (i + 1);\nloop invariant p >= leader_len + 2 * ielen;\nloop invariant p >= leader_len + 2 * (i + 1);\nloop invariant p >= leader_len + 2 * ielen;\nloop invariant p >= leader_len + 2 * (i + 1);\nloop invariant p >= leader_len + 2 * ielen;\nloop invariant p >= leader_len + 2 * (i + 1);\nloop invariant p >= leader_len + 2 * ielen;\nloop invariant p >= leader_len + 2 * (i + 1);\nloop invariant p >= leader_len + 2 * ielen;\nloop invariant p >= leader_len + 2 * (i + 1);\nloop invariant p >= leader_len + 2 * ielen;\nloop invariant p >= leader_len + 2 * (i + 1);\nloop invariant p >= leader_len + 2 * ielen;\nloop invariant p >= leader_len + 2 * (i + 1);\nloop invariant p >= leader_len + 2 * ielen;\nloop invariant p >= leader_len + 2 * (i + 1);\nloop invariant p >= leader_len + 2 * ielen;\nloop invariant p >= leader_len + 2 * (i + 1);\nloop invariant p >= leader_len + 2 * ielen;\nloop invariant p >= leader_len + 2 * (i + 1);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= ielen;\nloop invariant 0 <= p <= bufsize_0;\nloop invariant 0 <= bufsize <= bufsize_0;\nloop invariant leader_len <= bufsize_0;\nloop invariant bufsize <= bufsize_0 - leader_len;\nloop invariant bufsize >= 2*i;\nloop invariant p >= leader_len;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize_0 - 2*i;\nloop invariant p <= bufsize_0 - leader_len;\nloop invariant (i == 0 ==> bufsize >= 2*ielen);\nloop invariant (i > 0 ==> bufsize < 2*ielen);\nloop invariant (i == 0 ==> p == leader_len);\nloop invariant (i > 0 ==> p > leader_len);\nloop invariant (i == 0 ==> bufsize >= 2);\nloop invariant (i > 0 ==> bufsize < 2);\nloop invariant (i == 0 ==> bufsize >= 2*ielen);\nloop invariant (i > 0 ==> bufsize < 2*ielen);\nloop invariant (i == 0 ==> p == leader_len);\nloop invariant (i > 0 ==> p > leader_len);\nloop invariant (i == 0 ==> bufsize >= 2);\nloop invariant (i > 0 ==> bufsize < 2);\nloop invariant (i == 0 ==> bufsize >= 2*ielen);\nloop invariant (i > 0 ==> bufsize < 2*ielen);\nloop invariant (i == 0 ==> p == leader_len);\nloop invariant (i > 0 ==> p > leader_len);\nloop invariant (i == 0 ==> bufsize >= 2);\nloop invariant (i > 0 ==> bufsize < 2);\nloop invariant (i == 0 ==> bufsize >= 2*ielen);\nloop invariant (i > 0 ==> bufsize < 2*ielen);\nloop invariant (i == 0 ==> p == leader_len);\nloop invariant (i > 0 ==> p > leader_len);\nloop invariant (i == 0 ==> bufsize >= 2);\nloop invariant (i > 0 ==> bufsize < 2);\nloop invariant (i == 0 ==> bufsize >= 2*ielen);\nloop invariant (i > 0 ==> bufsize < 2*ielen);\nloop invariant (i == 0 ==> p == leader_len);\nloop invariant (i > 0 ==> p > leader_len);\nloop invariant (i == 0 ==> bufsize >= 2);\nloop invariant (i > 0 ==> bufsize < 2);\nloop invariant (i == 0 ==> bufsize >= 2*ielen);\nloop invariant (i > 0 ==> bufsize < 2*ielen);\nloop invariant (i == 0 ==> p == leader_len);\nloop invariant (i > 0 ==> p > leader_len);\nloop invariant (i == 0 ==> bufsize >= 2);\nloop invariant (i > 0 ==> bufsize < 2);\nloop invariant (i == 0 ==> bufsize >= 2*ielen);\nloop invariant (i > 0 ==> bufsize < 2*ielen);\nloop invariant (i == 0 ==> p == leader_len);\nloop invariant (i > 0 ==> p > leader_len);\nloop invariant (i == 0 ==> bufsize >= 2);\nloop invariant (i > 0 ==> bufsize < 2);\nloop invariant (i == 0 ==> bufsize >= 2*ielen);\nloop invariant (i > 0 ==> bufsize < 2*ielen);\nloop invariant (i == 0 ==> p == leader_len);\nloop invariant (i > 0 ==> p > leader_len);\nloop invariant (i == 0 ==> bufsize >= 2);\nloop invariant (i > 0 ==> bufsize < 2);\nloop invariant (i == 0 ==> bufsize >= 2*ielen);\nloop invariant (i > 0 ==> bufsize < 2*ielen);\nloop invariant (i == 0 ==> p == leader_len);\nloop invariant (i > 0 ==> p > leader_len);\nloop invariant (i == 0 ==> bufsize >= 2);\nloop invariant (i > 0 ==> bufsize < 2);\nloop invariant (i == 0 ==> bufsize >= 2*ielen);\nloop invariant (i > 0 ==> bufsize < 2*ielen);\nloop invariant (i == 0 ==> p == leader_len);\nloop invariant (i > 0 ==> p > leader_len);\nloop invariant (i == 0 ==> bufsize >= 2);\nloop invariant (i > 0 ==> bufsize < 2);\nloop invariant (i == 0 ==> bufsize >= 2*ielen);\nloop invariant (i > 0 ==> bufsize < 2*ielen);\nloop invariant (i == 0 ==> p == leader_len);\nloop invariant (i > 0 ==> p > leader_len);\nloop invariant (i == 0 ==> bufsize >= 2);\nloop invariant (i > 0 ==> bufsize < 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 < bufsize_0;\nloop invariant 0 <= p < bufsize_0;\nloop invariant bufsize_0 - (leader_len + ielen*2) <= bufsize;\nloop invariant bufsize <= bufsize_0 - leader_len;\nloop invariant leader_len <= bufsize_0;\nloop invariant 0 <= i < ielen;\nloop invariant bufsize >= 2;\nloop invariant 0 <= p;\nloop invariant 0 < leader_len;\nloop invariant 0 < bufsize;\nloop invariant 0 < ielen;\nloop invariant unknown();\nloop invariant unknown();\nloop invariant unknown();\nloop invariant 0 < bufsize_0;\nloop invariant 0 <= p < bufsize_0;\nloop invariant bufsize_0 - (leader_len + ielen*2) <= bufsize;\nloop invariant bufsize <= bufsize_0 - leader_len;\nloop invariant leader_len <= bufsize_0;\nloop invariant 0 <= i < ielen;\nloop invariant bufsize >= 2;\nloop invariant 0 <= p;\nloop invariant 0 < leader_len;\nloop invariant 0 < bufsize;\nloop invariant 0 < ielen;\nloop invariant unknown();\nloop invariant unknown();\nloop invariant unknown();\nloop invariant 0 < bufsize_0;\nloop invariant 0 <= p < bufsize_0;\nloop invariant bufsize_0 - (leader_len + ielen*2) <= bufsize;\nloop invariant bufsize <= bufsize_0 - leader_len;\nloop invariant leader_len <= bufsize_0;\nloop invariant 0 <= i < ielen;\nloop invariant bufsize >= 2;\nloop invariant 0 <= p;\nloop invariant 0 < leader_len;\nloop invariant 0 < bufsize;\nloop invariant 0 < ielen;\nloop invariant unknown();\nloop invariant unknown();\nloop invariant unknown();\nloop invariant 0 < bufsize_0;\nloop invariant 0 <= p < bufsize_0;\nloop invariant bufsize_0 - (leader_len + ielen*2) <= bufsize;\nloop invariant bufsize <= bufsize_0 - leader_len;\nloop invariant leader_len <= bufsize_0;\nloop invariant 0 <= i < ielen;\nloop invariant bufsize >= 2;\nloop invariant 0 <= p;\nloop invariant 0 < leader_len;\nloop invariant 0 < bufsize;\nloop invariant 0 < ielen;\nloop invariant unknown();\nloop invariant unknown();\nloop invariant unknown();\nloop invariant 0 < bufsize_0;\nloop invariant 0 <= p < bufsize_0;\nloop invariant bufsize_0 - (leader_len + ielen*2) <= bufsize;\nloop invariant bufsize <= bufsize_0 - leader_len;\nloop invariant leader_len <= bufsize_0;\nloop invariant 0 <= i < ielen;\nloop invariant bufsize >= 2;\nloop invariant 0 <= p;\nloop invariant 0 < leader_len;\nloop invariant 0 < bufsize;\nloop invariant 0 < ielen;\nloop invariant unknown();\nloop invariant unknown();\nloop invariant unknown();\nloop invariant 0 < bufsize_0;\nloop invariant 0 <= p < bufsize_0;\nloop invariant bufsize_0 - (leader_len + ielen*2) <= bufsize;\nloop invariant bufsize <= bufsize_0 - leader_len;\nloop invariant leader_len <= bufsize_0;\nloop invariant 0 <= i < ielen;\nloop invariant bufsize >= 2;\nloop invariant 0 <= p;\nloop invariant 0 < leader_len;\nloop invariant 0 < bufsize;\nloop invariant 0 < ielen;\nloop invariant unknown();\nloop invariant unknown();\nloop invariant unknown();\nloop invariant 0 < bufsize_0;\nloop invariant 0 <= p < bufsize_0;\nloop invariant bufsize_0 - (leader_len + ielen*2) <= bufsize;\nloop invariant bufsize <= bufsize_0 - leader_len;\nloop invariant leader_len <= bufsize_0;\nloop invariant 0 <= i < ielen;\nloop invariant bufsize >= 2;\nloop invariant 0 <= p;\nloop invariant 0 < leader_len;\nloop invariant 0 < bufsize;\nloop invariant 0 < ielen;\nloop invariant unknown();\nloop invariant unknown();\nloop invariant unknown();\nloop invariant 0 < bufsize_0;\nloop invariant 0 <= p < bufsize_0;\nloop invariant bufsize_0 - (leader_len + ielen*2) <= bufsize;\nloop invariant bufsize <= bufsize_0 - leader_len;\nloop invariant leader_len <= bufsize_0;\nloop invariant 0 <= i < ielen;\nloop invariant bufsize >= 2;\nloop invariant 0 <= p;\nloop invariant 0 < leader_len;\nloop invariant 0 < bufsize;\nloop invariant 0 < ielen;\nloop invariant unknown();\nloop invariant unknown();\nloop invariant unknown();\nloop invariant 0 < bufsize_0;\nloop invariant 0 <= p < bufsize_0;\nloop invariant bufsize_0 - (leader_len + ielen*2) <= bufsize;\nloop invariant bufsize <= bufsize_0 - leader_len;\nloop invariant leader_len <= bufsize_0;\n*/\n```",
            "```\n/*@\nloop invariant ( 0 <= p <= bufsize_0 ) ==> true;\nloop invariant ( 0 <= i <= ielen ) ==> true;\nloop invariant ( bufsize_0 >= bufsize ) ==> true;\nloop invariant ( bufsize >= leader_len ) ==> true;\nloop invariant ( bufsize >= 2*ielen ) ==> true;\nloop invariant ( i >= 0 ) ==> true;\nloop invariant ( i <= ielen ) ==> true;\nloop invariant ( p >= 0 ) ==> true;\nloop invariant ( p <= bufsize_0 ) ==> true;\nloop invariant ( bufsize + leader_len == bufsize_0 ) ==> true;\nloop invariant ( bufsize == bufsize_0 - leader_len ) ==> true;\nloop invariant ( p == bufsize_0 - bufsize ) ==> true;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= ielen;\nloop invariant leader_len <= p <= bufsize_0;\nloop invariant 0 <= bufsize <= bufsize_0;\nloop invariant 0 <= p <= bufsize_0;\nloop invariant bufsize < leader_len ==> i == 0;\nloop invariant bufsize >= leader_len ==> i >= 0;\nloop invariant bufsize < 2*ielen ==> i == ielen;\nloop invariant bufsize >= 2*ielen ==> i < ielen;\nloop invariant bufsize >= 2 ==> i >= 0;\nloop invariant bufsize < 2 ==> i == ielen;\nloop invariant bufsize >= 2*ielen ==> i >= 0;\nloop invariant bufsize < 2*ielen ==> i < ielen;\nloop invariant bufsize >= 2 ==> i < ielen;\nloop invariant bufsize < 2 ==> i == ielen;\nloop invariant bufsize >= 2*ielen ==> i < ielen;\nloop invariant bufsize < 2*ielen ==> i < ielen;\nloop invariant bufsize >= 2 ==> i < ielen;\nloop invariant bufsize < 2 ==> i == ielen;\nloop invariant bufsize >= 2*ielen ==> i < ielen;\nloop invariant bufsize < 2*ielen ==> i < ielen;\nloop invariant bufsize >= 2 ==> i < ielen;\nloop invariant bufsize < 2 ==> i == ielen;\nloop invariant bufsize >= 2*ielen ==> i < ielen;\nloop invariant bufsize < 2*ielen ==> i < ielen;\nloop invariant bufsize >= 2 ==> i < ielen;\nloop invariant bufsize < 2 ==> i == ielen;\nloop invariant bufsize >= 2*ielen ==> i < ielen;\nloop invariant bufsize < 2*ielen ==> i < ielen;\nloop invariant bufsize >= 2 ==> i < ielen;\nloop invariant bufsize < 2 ==> i == ielen;\nloop invariant bufsize >= 2*ielen ==> i < ielen;\nloop invariant bufsize < 2*ielen ==> i < ielen;\nloop invariant bufsize >= 2 ==> i < ielen;\nloop invariant bufsize < 2 ==> i == ielen;\nloop invariant bufsize >= 2*ielen ==> i < ielen;\nloop invariant bufsize < 2*ielen ==> i < ielen;\nloop invariant bufsize >= 2 ==> i < ielen;\nloop invariant bufsize < 2 ==> i == ielen;\nloop invariant bufsize >= 2*ielen ==> i < ielen;\nloop invariant bufsize < 2*ielen ==> i < ielen;\nloop invariant bufsize >= 2 ==> i < ielen;\nloop invariant bufsize < 2 ==> i == ielen;\nloop invariant bufsize >= 2*ielen ==> i < ielen;\nloop invariant bufsize < 2*ielen ==> i < ielen;\nloop invariant bufsize >= 2 ==> i < ielen;\nloop invariant bufsize < 2 ==> i == ielen;\nloop invariant bufsize >= 2*ielen ==> i < ielen;\nloop invariant bufsize < 2*ielen ==> i < ielen;\nloop invariant bufsize >= 2 ==> i < ielen;\nloop invariant bufsize < 2 ==> i == ielen;\nloop invariant bufsize >= 2*ielen ==> i < ielen;\nloop invariant bufsize < 2*ielen ==> i < ielen;\nloop invariant bufsize >= 2 ==> i < ielen;\nloop invariant bufsize < 2 ==> i == ielen;\nloop invariant bufsize >= 2*ielen ==> i < ielen;\nloop invariant bufsize < 2*ielen ==> i < ielen;\nloop invariant bufsize >= 2 ==> i < ielen;\nloop invariant bufsize < 2 ==> i == ielen;\nloop invariant bufsize >= 2*ielen ==> i < ielen;\nloop invariant bufsize < 2*ielen ==> i < ielen;\nloop invariant bufsize >= 2 ==> i < ielen;\nloop invariant bufsize < 2 ==> i == ielen;\nloop invariant bufsize >= 2*ielen ==> i < ielen;\nloop invariant bufsize < 2*ielen ==> i < ielen;\nloop invariant bufsize >= 2 ==> i < ielen;\nloop invariant bufsize < 2 ==> i == ielen;\nloop invariant bufsize >= 2*ielen ==> i < ielen;\nloop invariant bufsize < 2*ielen ==> i < ielen;\nloop invariant bufsize >= 2 ==> i < ielen;\nloop invariant bufsize < 2 ==> i == ielen;\nloop invariant bufsize >= 2*ielen ==> i < ielen;\nloop invariant bufsize < 2*ielen ==> i < ielen;\nloop invariant bufsize >= 2 ==> i < ielen;\nloop invariant bufsize < 2 ==> i == ielen;\nloop invariant bufsize >= 2*ielen ==> i < ielen;\nloop invariant bufsize < 2*ielen ==> i < ielen;\nloop invariant bufsize >= 2 ==> i < ielen;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= p < bufsize_0;\nloop invariant leader_len <= p <= bufsize_0;\nloop invariant 0 <= i <= ielen;\nloop invariant 2*i <= bufsize;\nloop invariant 2*i <= bufsize - leader_len;\nloop invariant 2*i < bufsize - leader_len;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= p <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant 0 <= i <= ielen;\nloop invariant bufsize - 2 * i >= 0;\nloop invariant bufsize >= bufsize_0 - 2 * i;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= leader_len;\nloop invariant bufsize <= bufsize_0 - leader_len;\nloop invariant bufsize <= bufsize_0 - 2 * ielen;\nloop invariant bufsize >= bufsize_0 - 2 * ielen;\nloop invariant bufsize >= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize <= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize - 2 * (i + 1) >= 0;\nloop invariant bufsize >= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize <= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize >= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize <= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize >= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize <= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize >= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize <= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize >= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize <= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize >= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize <= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize >= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize <= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize >= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize <= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize >= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize <= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize >= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize <= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize >= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize <= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize >= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize <= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize >= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize <= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize >= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize <= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize >= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize <= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize >= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize <= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize >= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize <= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize >= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize <= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize >= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize <= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize >= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize <= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize >= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize <= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize >= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize <= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize >= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize <= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize >= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize <= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize >= bufsize_0 - 2 * (i + 1);\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= bufsize_0 <= bufsize_0;\nloop invariant bufsize > 0;\nloop invariant bufsize_0 > 0;\nloop invariant leader_len > 0;\nloop invariant bufsize < bufsize_0;\nloop invariant p >= 0;\nloop invariant i >= 0;\nloop invariant i <= ielen;\nloop invariant p <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant i >= 0;\nloop invariant p + 1 < bufsize_0;\nloop invariant bufsize >= 2 * i;\nloop invariant i < ielen;\nloop invariant p + 1 < bufsize_0;\nloop invariant p <= bufsize_0;\nloop invariant p >= 0;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= bufsize <= bufsize_0;\nloop invariant 0 <= i <= ielen;\nloop invariant p >= 0;\nloop invariant p <= bufsize_0;\nloop invariant i >= 0;\nloop invariant i < ielen;\nloop invariant bufsize >= 2;\nloop invariant bufsize < bufsize_0;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2*ielen;\nloop invariant bufsize <= bufsize_0 - 2*ielen;\nloop invariant bufsize >= 0;\nloop invariant bufsize < bufsize_0 - 2*ielen;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2*i;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= ielen;\nloop invariant 0 <= p <= bufsize_0;\nloop invariant 0 <= bufsize <= bufsize_0;\nloop invariant 0 <= bufsize_0 <= bufsize + leader_len;\nloop invariant 0 <= leader_len <= bufsize_0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= p <= bufsize_0;\nloop invariant 0 <= i <= ielen;\nloop invariant 0 <= bufsize <= bufsize_0 - leader_len;\nloop invariant bufsize >= 2;\nloop invariant 0 <= bufsize_0 - i * 2 <= bufsize;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant p >= 2 * i;\nloop invariant bufsize >= 2 * i;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize <= bufsize_0 - leader_len;\nloop invariant bufsize >= leader_len;\nloop invariant bufsize >= 2 * ielen;\nloop invariant bufsize_0 >= leader_len + 2 * ielen;\nloop invariant bufsize_0 >= leader_len;\nloop invariant bufsize_0 >= 0;\nloop invariant bufsize_0 >= 2 * ielen;\nloop invariant bufsize_0 >= leader_len + 2 * i;\nloop invariant bufsize_0 >= leader_len + 2 * i + 2;\nloop invariant bufsize_0 >= leader_len + 2 * i + 2 * ielen;\nloop invariant bufsize_0 >= leader_len + 2 * i + 2 * ielen - 2;\nloop invariant bufsize_0 >= leader_len + 2 * i + 2 * ielen - 2 - 2;\nloop invariant bufsize_0 >= leader_len + 2 * i + 2 * ielen - 2 - 2 - 2;\nloop invariant bufsize_0 >= leader_len + 2 * i + 2 * ielen - 2 - 2 - 2 - 2;\nloop invariant bufsize_0 >= leader_len + 2 * i + 2 * ielen - 2 - 2 - 2 - 2 - 2;\nloop invariant bufsize_0 >= leader_len + 2 * i + 2 * ielen - 2 - 2 - 2 - 2 - 2 - 2;\nloop invariant bufsize_0 >= leader_len + 2 * i + 2 * ielen - 2 - 2 - 2 - 2 - 2 - 2 - 2;\nloop invariant bufsize_0 >= leader_len + 2 * i + 2 * ielen - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2;\nloop invariant bufsize_0 >= leader_len + 2 * i + 2 * ielen - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2;\nloop invariant bufsize_0 >= leader_len + 2 * i + 2 * ielen - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2;\nloop invariant bufsize_0 >= leader_len + 2 * i + 2 * ielen - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2;\nloop invariant bufsize_0 >= leader_len + 2 * i + 2 * ielen - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2;\nloop invariant bufsize_0 >= leader_len + 2 * i + 2 * ielen - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2;\nloop invariant bufsize_0 >= leader_len + 2 * i + 2 * ielen - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2;\nloop invariant bufsize_0 >= leader_len + 2 * i + 2 * ielen - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2;\nloop invariant bufsize_0 >= leader_len + 2 * i + 2 * ielen - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= p;\nloop invariant p <= bufsize_0;\nloop invariant i >= 0;\nloop invariant i <= ielen;\nloop invariant 0 <= bufsize;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= leader_len;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize >= 2*i + 2;\nloop invariant bufsize >= bufsize_0 - 2*i - 2;\nloop invariant bufsize >= 2*i + 2 - bufsize_0;\nloop invariant bufsize >= 2*i + 2 - bufsize_0 + 2*i;\nloop invariant bufsize >= 2*i + 2 - bufsize_0 + 2*i - 2*i;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= bufsize_0 - 2*i - 2;\nloop invariant bufsize >= 2*i + 2 - bufsize_0 + 2*i - 2*i;\nloop invariant bufsize >= 2*i + 2 - bufsize_0 + 2*i - 2*i + 2*i;\nloop invariant bufsize >= 2*i + 2 - bufsize_0 + 2*i - 2*i + 2*i - 2*i;\nloop invariant bufsize >= 2*i + 2 - bufsize_0 + 2*i - 2*i + 2*i - 2*i + 2*i;\nloop invariant bufsize >= 2*i + 2 - bufsize_0 + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i;\nloop invariant bufsize >= 2*i + 2 - bufsize_0 + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i;\nloop invariant bufsize >= 2*i + 2 - bufsize_0 + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i;\nloop invariant bufsize >= 2*i + 2 - bufsize_0 + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i;\nloop invariant bufsize >= 2*i + 2 - bufsize_0 + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i;\nloop invariant bufsize >= 2*i + 2 - bufsize_0 + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i;\nloop invariant bufsize >= 2*i + 2 - bufsize_0 + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i;\nloop invariant bufsize >= 2*i + 2 - bufsize_0 + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i;\nloop invariant bufsize >= 2*i + 2 - bufsize_0 + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i;\nloop invariant bufsize >= 2*i + 2 - bufsize_0 + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i;\nloop invariant bufsize >= 2*i + 2 - bufsize_0 + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= p <= bufsize_0;\nloop invariant i >= 0;\nloop invariant i <= ielen;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize <= bufsize_0-2*(ielen-i);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= p <= bufsize_0 is partially proven to be inductive.\nloop invariant i >= 0 is partially proven to be inductive.\nloop invariant i <= ielen is partially proven to be inductive.\nloop invariant bufsize >= 2*i is established but not preserved.\nloop invariant bufsize <= bufsize_0-2*(ielen-i) is preserved but not established.\nAssertion 0 <= p: Partially proven\nAssertion p + 1 < bufsize_0: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len = unknown();\n  int bufsize = unknown();\n  int bufsize_0 = unknown();\n  int ielen = unknown();\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= p <= bufsize_0;\nloop invariant i2: i >= 0;\nloop invariant i3: i <= ielen;\n\n\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= p <= bufsize_0;\nloop invariant bufsize_0 + leader_len >= bufsize;\nloop invariant 0 <= bufsize <= bufsize_0;\nloop invariant 0 <= i <= ielen;\nloop invariant ielen * 2 >= bufsize;\nloop invariant 0 <= p + 2 * i <= bufsize_0;\nloop invariant p + 2 * i <= bufsize;\nloop invariant bufsize + leader_len >= bufsize_0;\nloop invariant bufsize + leader_len <= bufsize_0;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant bufsize_0 - leader_len <= bufsize;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= p <= bufsize_0 is partially proven to be inductive.\nloop invariant bufsize_0 + leader_len >= bufsize is partially proven to be inductive.\nloop invariant 0 <= bufsize <= bufsize_0 is partially proven to be inductive.\nloop invariant 0 <= i <= ielen is partially proven to be inductive.\nloop invariant ielen * 2 >= bufsize is preserved but not established.\nloop invariant 0 <= p + 2 * i <= bufsize_0 is established but not preserved.\nloop invariant p + 2 * i <= bufsize is neither established nor preserved.\nloop invariant bufsize + leader_len >= bufsize_0 is partially proven to be inductive.\nloop invariant bufsize + leader_len <= bufsize_0 is partially proven to be inductive.\nloop invariant bufsize_0 - leader_len <= bufsize is partially proven to be inductive.\nAssertion 0 <= p: Partially proven\nAssertion p + 1 < bufsize_0: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len = unknown();\n  int bufsize = unknown();\n  int bufsize_0 = unknown();\n  int ielen = unknown();\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= p <= bufsize_0;\nloop invariant i2: bufsize_0 + leader_len >= bufsize;\nloop invariant i3: 0 <= bufsize <= bufsize_0;\nloop invariant i4: 0 <= i <= ielen;\n\n\n\nloop invariant i8: bufsize + leader_len >= bufsize_0;\nloop invariant i9: bufsize + leader_len <= bufsize_0;\nloop invariant i10: bufsize_0 - leader_len <= bufsize;\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant i <= ielen;\nloop invariant p > 0;\nloop invariant p <= bufsize_0;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2 * i;\nloop invariant bufsize >= 2 * (i + 1);\nloop invariant p >= leader_len;\nloop invariant p <= bufsize_0 - 2;\nloop invariant p <= bufsize_0 - 2 * (i + 1);\nloop invariant p <= bufsize_0 - 2 * ielen;\nloop invariant p >= leader_len + 2 * i;\nloop invariant p >= leader_len + 2 * (i + 1);\nloop invariant p >= leader_len + 2 * ielen;\nloop invariant p >= leader_len + 2 * (i + 1);\nloop invariant p >= leader_len + 2 * ielen;\nloop invariant p >= leader_len + 2 * (i + 1);\nloop invariant p >= leader_len + 2 * ielen;\nloop invariant p >= leader_len + 2 * (i + 1);\nloop invariant p >= leader_len + 2 * ielen;\nloop invariant p >= leader_len + 2 * (i + 1);\nloop invariant p >= leader_len + 2 * ielen;\nloop invariant p >= leader_len + 2 * (i + 1);\nloop invariant p >= leader_len + 2 * ielen;\nloop invariant p >= leader_len + 2 * (i + 1);\nloop invariant p >= leader_len + 2 * ielen;\nloop invariant p >= leader_len + 2 * (i + 1);\nloop invariant p >= leader_len + 2 * ielen;\nloop invariant p >= leader_len + 2 * (i + 1);\nloop invariant p >= leader_len + 2 * ielen;\nloop invariant p >= leader_len + 2 * (i + 1);\nloop invariant p >= leader_len + 2 * ielen;\nloop invariant p >= leader_len + 2 * (i + 1);\nloop invariant p >= leader_len + 2 * ielen;\nloop invariant p >= leader_len + 2 * (i + 1);\nloop invariant p >= leader_len + 2 * ielen;\nloop invariant p >= leader_len + 2 * (i + 1);\nloop invariant p >= leader_len + 2 * ielen;\nloop invariant p >= leader_len + 2 * (i + 1);\nloop invariant p >= leader_len + 2 * ielen;\nloop invariant p >= leader_len + 2 * (i + 1);\nloop invariant p >= leader_len + 2 * ielen;\nloop invariant p >= leader_len + 2 * (i + 1);\nloop invariant p >= leader_len + 2 * ielen;\nloop invariant p >= leader_len + 2 * (i + 1);\nloop invariant p >= leader_len + 2 * ielen;\nloop invariant p >= leader_len + 2 * (i + 1);\nloop invariant p >= leader_len + 2 * ielen;\nloop invariant p >= leader_len + 2 * (i + 1);\nloop invariant p >= leader_len + 2 * ielen;\nloop invariant p >= leader_len + 2 * (i + 1);\nloop invariant p >= leader_len + 2 * ielen;\nloop invariant p >= leader_len + 2 * (i + 1);\nloop invariant p >= leader_len + 2 * ielen;\nloop invariant p >= leader_len + 2 * (i + 1);\nloop invariant p >= leader_len + 2 * ielen;\nloop invariant p >= leader_len + 2 * (i + 1);\nloop invariant p >= leader_len + 2 * ielen;\nloop invariant p >= leader_len + 2 * (i + 1);\nloop invariant p >= leader_len + 2 * ielen;\nloop invariant p >= leader_len + 2 * (i + 1);\nloop invariant p >= leader_len + 2 * ielen;\nloop invariant p >= leader_len + 2 * (i + 1);\nloop invariant p >= leader_len + 2 * ielen;\nloop invariant p >= leader_len + 2 * (i + 1);\nloop invariant p >= leader_len + 2 * ielen;\nloop invariant p >= leader_len + 2 * (i + 1);\nloop invariant p >= leader_len + 2 * ielen;\nloop invariant p >= leader_len + 2 * (i + 1);\nloop invariant p >= leader_len + 2 * ielen;\nloop invariant p >= leader_len + 2 * (i + 1);\nloop invariant p >= leader_len + 2 * ielen;\nloop invariant p >= leader_len + 2 * (i + 1);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant i <= ielen is partially proven to be inductive.\nloop invariant p > 0 is partially proven to be inductive.\nloop invariant p <= bufsize_0 is partially proven to be inductive.\nloop invariant bufsize >= 2 is partially proven to be inductive.\nloop invariant bufsize >= 2 * i is partially proven to be inductive.\nloop invariant bufsize >= 2 * (i + 1) is partially proven to be inductive.\nloop invariant p >= leader_len is partially proven to be inductive.\nloop invariant p <= bufsize_0 - 2 is partially proven to be inductive.\nloop invariant p <= bufsize_0 - 2 * (i + 1) is partially proven to be inductive.\nloop invariant p <= bufsize_0 - 2 * ielen is partially proven to be inductive.\nloop invariant p >= leader_len + 2 * i is partially proven to be inductive.\nloop invariant p >= leader_len + 2 * (i + 1) is preserved but not established.\nloop invariant p >= leader_len + 2 * ielen is partially proven to be inductive.\nAssertion 0 <= p: Partially proven\nAssertion p + 1 < bufsize_0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len = unknown();\n  int bufsize = unknown();\n  int bufsize_0 = unknown();\n  int ielen = unknown();\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: i <= ielen;\nloop invariant i2: p > 0;\nloop invariant i3: p <= bufsize_0;\nloop invariant i4: bufsize >= 2;\n\n\nloop invariant i7: p >= leader_len;\n\n\n\nloop invariant i11: p >= leader_len + 2 * i;\n\n\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= ielen;\nloop invariant 0 <= p <= bufsize_0;\nloop invariant 0 <= bufsize <= bufsize_0;\nloop invariant leader_len <= bufsize_0;\nloop invariant bufsize <= bufsize_0 - leader_len;\nloop invariant bufsize >= 2*i;\nloop invariant p >= leader_len;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize_0 - 2*i;\nloop invariant p <= bufsize_0 - leader_len;\nloop invariant (i == 0 ==> bufsize >= 2*ielen);\nloop invariant (i > 0 ==> bufsize < 2*ielen);\nloop invariant (i == 0 ==> p == leader_len);\nloop invariant (i > 0 ==> p > leader_len);\nloop invariant (i == 0 ==> bufsize >= 2);\nloop invariant (i > 0 ==> bufsize < 2);\nloop invariant (i == 0 ==> bufsize >= 2*ielen);\nloop invariant (i > 0 ==> bufsize < 2*ielen);\nloop invariant (i == 0 ==> p == leader_len);\nloop invariant (i > 0 ==> p > leader_len);\nloop invariant (i == 0 ==> bufsize >= 2);\nloop invariant (i > 0 ==> bufsize < 2);\nloop invariant (i == 0 ==> bufsize >= 2*ielen);\nloop invariant (i > 0 ==> bufsize < 2*ielen);\nloop invariant (i == 0 ==> p == leader_len);\nloop invariant (i > 0 ==> p > leader_len);\nloop invariant (i == 0 ==> bufsize >= 2);\nloop invariant (i > 0 ==> bufsize < 2);\nloop invariant (i == 0 ==> bufsize >= 2*ielen);\nloop invariant (i > 0 ==> bufsize < 2*ielen);\nloop invariant (i == 0 ==> p == leader_len);\nloop invariant (i > 0 ==> p > leader_len);\nloop invariant (i == 0 ==> bufsize >= 2);\nloop invariant (i > 0 ==> bufsize < 2);\nloop invariant (i == 0 ==> bufsize >= 2*ielen);\nloop invariant (i > 0 ==> bufsize < 2*ielen);\nloop invariant (i == 0 ==> p == leader_len);\nloop invariant (i > 0 ==> p > leader_len);\nloop invariant (i == 0 ==> bufsize >= 2);\nloop invariant (i > 0 ==> bufsize < 2);\nloop invariant (i == 0 ==> bufsize >= 2*ielen);\nloop invariant (i > 0 ==> bufsize < 2*ielen);\nloop invariant (i == 0 ==> p == leader_len);\nloop invariant (i > 0 ==> p > leader_len);\nloop invariant (i == 0 ==> bufsize >= 2);\nloop invariant (i > 0 ==> bufsize < 2);\nloop invariant (i == 0 ==> bufsize >= 2*ielen);\nloop invariant (i > 0 ==> bufsize < 2*ielen);\nloop invariant (i == 0 ==> p == leader_len);\nloop invariant (i > 0 ==> p > leader_len);\nloop invariant (i == 0 ==> bufsize >= 2);\nloop invariant (i > 0 ==> bufsize < 2);\nloop invariant (i == 0 ==> bufsize >= 2*ielen);\nloop invariant (i > 0 ==> bufsize < 2*ielen);\nloop invariant (i == 0 ==> p == leader_len);\nloop invariant (i > 0 ==> p > leader_len);\nloop invariant (i == 0 ==> bufsize >= 2);\nloop invariant (i > 0 ==> bufsize < 2);\nloop invariant (i == 0 ==> bufsize >= 2*ielen);\nloop invariant (i > 0 ==> bufsize < 2*ielen);\nloop invariant (i == 0 ==> p == leader_len);\nloop invariant (i > 0 ==> p > leader_len);\nloop invariant (i == 0 ==> bufsize >= 2);\nloop invariant (i > 0 ==> bufsize < 2);\nloop invariant (i == 0 ==> bufsize >= 2*ielen);\nloop invariant (i > 0 ==> bufsize < 2*ielen);\nloop invariant (i == 0 ==> p == leader_len);\nloop invariant (i > 0 ==> p > leader_len);\nloop invariant (i == 0 ==> bufsize >= 2);\nloop invariant (i > 0 ==> bufsize < 2);\nloop invariant (i == 0 ==> bufsize >= 2*ielen);\nloop invariant (i > 0 ==> bufsize < 2*ielen);\nloop invariant (i == 0 ==> p == leader_len);\nloop invariant (i > 0 ==> p > leader_len);\nloop invariant (i == 0 ==> bufsize >= 2);\nloop invariant (i > 0 ==> bufsize < 2);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= ielen is partially proven to be inductive.\nloop invariant 0 <= p <= bufsize_0 is partially proven to be inductive.\nloop invariant 0 <= bufsize <= bufsize_0 is partially proven to be inductive.\nloop invariant leader_len <= bufsize_0 is partially proven to be inductive.\nloop invariant bufsize <= bufsize_0 - leader_len is partially proven to be inductive.\nloop invariant bufsize >= 2*i is partially proven to be inductive.\nloop invariant p >= leader_len is partially proven to be inductive.\nloop invariant p <= bufsize_0 is partially proven to be inductive.\nloop invariant p <= bufsize_0 - 2*i is established but not preserved.\nloop invariant p <= bufsize_0 - leader_len is neither established nor preserved.\nloop invariant (i == 0 ==> bufsize >= 2*ielen) is partially proven to be inductive.\nloop invariant (i > 0 ==> bufsize < 2*ielen) is established but not preserved.\nloop invariant (i == 0 ==> p == leader_len) is partially proven to be inductive.\nloop invariant (i > 0 ==> p > leader_len) is partially proven to be inductive.\nloop invariant (i == 0 ==> bufsize >= 2) is partially proven to be inductive.\nloop invariant (i > 0 ==> bufsize < 2) is partially proven to be inductive.\nAssertion 0 <= p: Partially proven\nAssertion p + 1 < bufsize_0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len = unknown();\n  int bufsize = unknown();\n  int bufsize_0 = unknown();\n  int ielen = unknown();\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= i <= ielen;\nloop invariant i2: 0 <= p <= bufsize_0;\nloop invariant i3: 0 <= bufsize <= bufsize_0;\nloop invariant i4: leader_len <= bufsize_0;\nloop invariant i5: bufsize <= bufsize_0 - leader_len;\n\nloop invariant i7: p >= leader_len;\nloop invariant i8: p <= bufsize_0;\n\n\nloop invariant i11: (i == 0 ==> bufsize >= 2*ielen);\n\nloop invariant i13: (i == 0 ==> p == leader_len);\nloop invariant i14: (i > 0 ==> p > leader_len);\nloop invariant i15: (i == 0 ==> bufsize >= 2);\n\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 < bufsize_0;\nloop invariant 0 <= p < bufsize_0;\nloop invariant bufsize_0 - (leader_len + ielen*2) <= bufsize;\nloop invariant bufsize <= bufsize_0 - leader_len;\nloop invariant leader_len <= bufsize_0;\nloop invariant 0 <= i < ielen;\nloop invariant bufsize >= 2;\nloop invariant 0 <= p;\nloop invariant 0 < leader_len;\nloop invariant 0 < bufsize;\nloop invariant 0 < ielen;\nloop invariant unknown();\nloop invariant unknown();\nloop invariant unknown();\nloop invariant 0 < bufsize_0;\nloop invariant 0 <= p < bufsize_0;\nloop invariant bufsize_0 - (leader_len + ielen*2) <= bufsize;\nloop invariant bufsize <= bufsize_0 - leader_len;\nloop invariant leader_len <= bufsize_0;\nloop invariant 0 <= i < ielen;\nloop invariant bufsize >= 2;\nloop invariant 0 <= p;\nloop invariant 0 < leader_len;\nloop invariant 0 < bufsize;\nloop invariant 0 < ielen;\nloop invariant unknown();\nloop invariant unknown();\nloop invariant unknown();\nloop invariant 0 < bufsize_0;\nloop invariant 0 <= p < bufsize_0;\nloop invariant bufsize_0 - (leader_len + ielen*2) <= bufsize;\nloop invariant bufsize <= bufsize_0 - leader_len;\nloop invariant leader_len <= bufsize_0;\nloop invariant 0 <= i < ielen;\nloop invariant bufsize >= 2;\nloop invariant 0 <= p;\nloop invariant 0 < leader_len;\nloop invariant 0 < bufsize;\nloop invariant 0 < ielen;\nloop invariant unknown();\nloop invariant unknown();\nloop invariant unknown();\nloop invariant 0 < bufsize_0;\nloop invariant 0 <= p < bufsize_0;\nloop invariant bufsize_0 - (leader_len + ielen*2) <= bufsize;\nloop invariant bufsize <= bufsize_0 - leader_len;\nloop invariant leader_len <= bufsize_0;\nloop invariant 0 <= i < ielen;\nloop invariant bufsize >= 2;\nloop invariant 0 <= p;\nloop invariant 0 < leader_len;\nloop invariant 0 < bufsize;\nloop invariant 0 < ielen;\nloop invariant unknown();\nloop invariant unknown();\nloop invariant unknown();\nloop invariant 0 < bufsize_0;\nloop invariant 0 <= p < bufsize_0;\nloop invariant bufsize_0 - (leader_len + ielen*2) <= bufsize;\nloop invariant bufsize <= bufsize_0 - leader_len;\nloop invariant leader_len <= bufsize_0;\nloop invariant 0 <= i < ielen;\nloop invariant bufsize >= 2;\nloop invariant 0 <= p;\nloop invariant 0 < leader_len;\nloop invariant 0 < bufsize;\nloop invariant 0 < ielen;\nloop invariant unknown();\nloop invariant unknown();\nloop invariant unknown();\nloop invariant 0 < bufsize_0;\nloop invariant 0 <= p < bufsize_0;\nloop invariant bufsize_0 - (leader_len + ielen*2) <= bufsize;\nloop invariant bufsize <= bufsize_0 - leader_len;\nloop invariant leader_len <= bufsize_0;\nloop invariant 0 <= i < ielen;\nloop invariant bufsize >= 2;\nloop invariant 0 <= p;\nloop invariant 0 < leader_len;\nloop invariant 0 < bufsize;\nloop invariant 0 < ielen;\nloop invariant unknown();\nloop invariant unknown();\nloop invariant unknown();\nloop invariant 0 < bufsize_0;\nloop invariant 0 <= p < bufsize_0;\nloop invariant bufsize_0 - (leader_len + ielen*2) <= bufsize;\nloop invariant bufsize <= bufsize_0 - leader_len;\nloop invariant leader_len <= bufsize_0;\nloop invariant 0 <= i < ielen;\nloop invariant bufsize >= 2;\nloop invariant 0 <= p;\nloop invariant 0 < leader_len;\nloop invariant 0 < bufsize;\nloop invariant 0 < ielen;\nloop invariant unknown();\nloop invariant unknown();\nloop invariant unknown();\nloop invariant 0 < bufsize_0;\nloop invariant 0 <= p < bufsize_0;\nloop invariant bufsize_0 - (leader_len + ielen*2) <= bufsize;\nloop invariant bufsize <= bufsize_0 - leader_len;\nloop invariant leader_len <= bufsize_0;\nloop invariant 0 <= i < ielen;\nloop invariant bufsize >= 2;\nloop invariant 0 <= p;\nloop invariant 0 < leader_len;\nloop invariant 0 < bufsize;\nloop invariant 0 < ielen;\nloop invariant unknown();\nloop invariant unknown();\nloop invariant unknown();\nloop invariant 0 < bufsize_0;\nloop invariant 0 <= p < bufsize_0;\nloop invariant bufsize_0 - (leader_len + ielen*2) <= bufsize;\nloop invariant bufsize <= bufsize_0 - leader_len;\nloop invariant leader_len <= bufsize_0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 49: unexpected token ')'",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len = unknown();\n  int bufsize = unknown();\n  int bufsize_0 = unknown();\n  int ielen = unknown();\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 < bufsize_0;\n\nloop invariant i3: bufsize_0 - (leader_len + ielen*2) <= bufsize;\nloop invariant i4: bufsize <= bufsize_0 - leader_len;\nloop invariant i5: leader_len <= bufsize_0;\n\nloop invariant i7: bufsize >= 2;\nloop invariant i8: 0 <= p;\nloop invariant i9: 0 < leader_len;\nloop invariant i10: 0 < bufsize;\nloop invariant i11: 0 < ielen;\n\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 13,
                "annotations": "```\n/*@\nloop invariant ( 0 <= p <= bufsize_0 ) ==> true;\nloop invariant ( 0 <= i <= ielen ) ==> true;\nloop invariant ( bufsize_0 >= bufsize ) ==> true;\nloop invariant ( bufsize >= leader_len ) ==> true;\nloop invariant ( bufsize >= 2*ielen ) ==> true;\nloop invariant ( i >= 0 ) ==> true;\nloop invariant ( i <= ielen ) ==> true;\nloop invariant ( p >= 0 ) ==> true;\nloop invariant ( p <= bufsize_0 ) ==> true;\nloop invariant ( bufsize + leader_len == bufsize_0 ) ==> true;\nloop invariant ( bufsize == bufsize_0 - leader_len ) ==> true;\nloop invariant ( p == bufsize_0 - bufsize ) ==> true;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 38: unbound logic variable true. Ignoring loop annotation",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len = unknown();\n  int bufsize = unknown();\n  int bufsize_0 = unknown();\n  int ielen = unknown();\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= ielen;\nloop invariant leader_len <= p <= bufsize_0;\nloop invariant 0 <= bufsize <= bufsize_0;\nloop invariant 0 <= p <= bufsize_0;\nloop invariant bufsize < leader_len ==> i == 0;\nloop invariant bufsize >= leader_len ==> i >= 0;\nloop invariant bufsize < 2*ielen ==> i == ielen;\nloop invariant bufsize >= 2*ielen ==> i < ielen;\nloop invariant bufsize >= 2 ==> i >= 0;\nloop invariant bufsize < 2 ==> i == ielen;\nloop invariant bufsize >= 2*ielen ==> i >= 0;\nloop invariant bufsize < 2*ielen ==> i < ielen;\nloop invariant bufsize >= 2 ==> i < ielen;\nloop invariant bufsize < 2 ==> i == ielen;\nloop invariant bufsize >= 2*ielen ==> i < ielen;\nloop invariant bufsize < 2*ielen ==> i < ielen;\nloop invariant bufsize >= 2 ==> i < ielen;\nloop invariant bufsize < 2 ==> i == ielen;\nloop invariant bufsize >= 2*ielen ==> i < ielen;\nloop invariant bufsize < 2*ielen ==> i < ielen;\nloop invariant bufsize >= 2 ==> i < ielen;\nloop invariant bufsize < 2 ==> i == ielen;\nloop invariant bufsize >= 2*ielen ==> i < ielen;\nloop invariant bufsize < 2*ielen ==> i < ielen;\nloop invariant bufsize >= 2 ==> i < ielen;\nloop invariant bufsize < 2 ==> i == ielen;\nloop invariant bufsize >= 2*ielen ==> i < ielen;\nloop invariant bufsize < 2*ielen ==> i < ielen;\nloop invariant bufsize >= 2 ==> i < ielen;\nloop invariant bufsize < 2 ==> i == ielen;\nloop invariant bufsize >= 2*ielen ==> i < ielen;\nloop invariant bufsize < 2*ielen ==> i < ielen;\nloop invariant bufsize >= 2 ==> i < ielen;\nloop invariant bufsize < 2 ==> i == ielen;\nloop invariant bufsize >= 2*ielen ==> i < ielen;\nloop invariant bufsize < 2*ielen ==> i < ielen;\nloop invariant bufsize >= 2 ==> i < ielen;\nloop invariant bufsize < 2 ==> i == ielen;\nloop invariant bufsize >= 2*ielen ==> i < ielen;\nloop invariant bufsize < 2*ielen ==> i < ielen;\nloop invariant bufsize >= 2 ==> i < ielen;\nloop invariant bufsize < 2 ==> i == ielen;\nloop invariant bufsize >= 2*ielen ==> i < ielen;\nloop invariant bufsize < 2*ielen ==> i < ielen;\nloop invariant bufsize >= 2 ==> i < ielen;\nloop invariant bufsize < 2 ==> i == ielen;\nloop invariant bufsize >= 2*ielen ==> i < ielen;\nloop invariant bufsize < 2*ielen ==> i < ielen;\nloop invariant bufsize >= 2 ==> i < ielen;\nloop invariant bufsize < 2 ==> i == ielen;\nloop invariant bufsize >= 2*ielen ==> i < ielen;\nloop invariant bufsize < 2*ielen ==> i < ielen;\nloop invariant bufsize >= 2 ==> i < ielen;\nloop invariant bufsize < 2 ==> i == ielen;\nloop invariant bufsize >= 2*ielen ==> i < ielen;\nloop invariant bufsize < 2*ielen ==> i < ielen;\nloop invariant bufsize >= 2 ==> i < ielen;\nloop invariant bufsize < 2 ==> i == ielen;\nloop invariant bufsize >= 2*ielen ==> i < ielen;\nloop invariant bufsize < 2*ielen ==> i < ielen;\nloop invariant bufsize >= 2 ==> i < ielen;\nloop invariant bufsize < 2 ==> i == ielen;\nloop invariant bufsize >= 2*ielen ==> i < ielen;\nloop invariant bufsize < 2*ielen ==> i < ielen;\nloop invariant bufsize >= 2 ==> i < ielen;\nloop invariant bufsize < 2 ==> i == ielen;\nloop invariant bufsize >= 2*ielen ==> i < ielen;\nloop invariant bufsize < 2*ielen ==> i < ielen;\nloop invariant bufsize >= 2 ==> i < ielen;\nloop invariant bufsize < 2 ==> i == ielen;\nloop invariant bufsize >= 2*ielen ==> i < ielen;\nloop invariant bufsize < 2*ielen ==> i < ielen;\nloop invariant bufsize >= 2 ==> i < ielen;\nloop invariant bufsize < 2 ==> i == ielen;\nloop invariant bufsize >= 2*ielen ==> i < ielen;\nloop invariant bufsize < 2*ielen ==> i < ielen;\nloop invariant bufsize >= 2 ==> i < ielen;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= ielen is partially proven to be inductive.\nloop invariant leader_len <= p <= bufsize_0 is partially proven to be inductive.\nloop invariant 0 <= bufsize <= bufsize_0 is partially proven to be inductive.\nloop invariant 0 <= p <= bufsize_0 is partially proven to be inductive.\nloop invariant bufsize < leader_len ==> i == 0 is established but not preserved.\nloop invariant bufsize >= leader_len ==> i >= 0 is partially proven to be inductive.\nloop invariant bufsize < 2*ielen ==> i == ielen is partially proven to be inductive.\nloop invariant bufsize >= 2*ielen ==> i < ielen is established but not preserved.\nloop invariant bufsize >= 2 ==> i >= 0 is partially proven to be inductive.\nloop invariant bufsize < 2 ==> i == ielen is partially proven to be inductive.\nloop invariant bufsize >= 2*ielen ==> i >= 0 is partially proven to be inductive.\nloop invariant bufsize < 2*ielen ==> i < ielen is partially proven to be inductive.\nloop invariant bufsize >= 2 ==> i < ielen is partially proven to be inductive.\nAssertion 0 <= p: Partially proven\nAssertion p + 1 < bufsize_0: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len = unknown();\n  int bufsize = unknown();\n  int bufsize_0 = unknown();\n  int ielen = unknown();\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= i <= ielen;\nloop invariant i2: leader_len <= p <= bufsize_0;\nloop invariant i3: 0 <= bufsize <= bufsize_0;\nloop invariant i4: 0 <= p <= bufsize_0;\n\nloop invariant i6: bufsize >= leader_len ==> i >= 0;\nloop invariant i7: bufsize < 2*ielen ==> i == ielen;\n\nloop invariant i9: bufsize >= 2 ==> i >= 0;\nloop invariant i10: bufsize < 2 ==> i == ielen;\nloop invariant i11: bufsize >= 2*ielen ==> i >= 0;\nloop invariant i12: bufsize < 2*ielen ==> i < ielen;\n\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= p < bufsize_0;\nloop invariant leader_len <= p <= bufsize_0;\nloop invariant 0 <= i <= ielen;\nloop invariant 2*i <= bufsize;\nloop invariant 2*i <= bufsize - leader_len;\nloop invariant 2*i < bufsize - leader_len;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= p < bufsize_0 is established but not preserved.\nloop invariant leader_len <= p <= bufsize_0 is partially proven to be inductive.\nloop invariant 0 <= i <= ielen is partially proven to be inductive.\nloop invariant 2*i <= bufsize is established but not preserved.\nloop invariant 2*i <= bufsize - leader_len is neither established nor preserved.\nloop invariant 2*i < bufsize - leader_len is neither established nor preserved.\nAssertion 0 <= p: Partially proven\nAssertion p + 1 < bufsize_0: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len = unknown();\n  int bufsize = unknown();\n  int bufsize_0 = unknown();\n  int ielen = unknown();\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\n\nloop invariant i2: leader_len <= p <= bufsize_0;\nloop invariant i3: 0 <= i <= ielen;\n\n\n\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= p <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant 0 <= i <= ielen;\nloop invariant bufsize - 2 * i >= 0;\nloop invariant bufsize >= bufsize_0 - 2 * i;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= leader_len;\nloop invariant bufsize <= bufsize_0 - leader_len;\nloop invariant bufsize <= bufsize_0 - 2 * ielen;\nloop invariant bufsize >= bufsize_0 - 2 * ielen;\nloop invariant bufsize >= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize <= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize - 2 * (i + 1) >= 0;\nloop invariant bufsize >= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize <= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize >= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize <= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize >= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize <= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize >= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize <= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize >= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize <= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize >= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize <= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize >= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize <= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize >= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize <= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize >= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize <= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize >= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize <= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize >= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize <= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize >= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize <= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize >= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize <= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize >= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize <= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize >= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize <= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize >= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize <= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize >= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize <= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize >= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize <= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize >= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize <= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize >= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize <= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize >= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize <= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize >= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize <= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize >= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize <= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize >= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize <= bufsize_0 - 2 * (i + 1);\nloop invariant bufsize >= bufsize_0 - 2 * (i + 1);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= p <= bufsize_0 is partially proven to be inductive.\nloop invariant bufsize >= 0 is partially proven to be inductive.\nloop invariant 0 <= i <= ielen is partially proven to be inductive.\nloop invariant bufsize - 2 * i >= 0 is partially proven to be inductive.\nloop invariant bufsize >= bufsize_0 - 2 * i is preserved but not established.\nloop invariant bufsize <= bufsize_0 is partially proven to be inductive.\nloop invariant bufsize >= leader_len is partially proven to be inductive.\nloop invariant bufsize <= bufsize_0 - leader_len is partially proven to be inductive.\nloop invariant bufsize <= bufsize_0 - 2 * ielen is partially proven to be inductive.\nloop invariant bufsize >= bufsize_0 - 2 * ielen is partially proven to be inductive.\nloop invariant bufsize >= bufsize_0 - 2 * (i + 1) is partially proven to be inductive.\nloop invariant bufsize <= bufsize_0 - 2 * (i + 1) is partially proven to be inductive.\nloop invariant bufsize - 2 * (i + 1) >= 0 is partially proven to be inductive.\nAssertion 0 <= p: Partially proven\nAssertion p + 1 < bufsize_0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len = unknown();\n  int bufsize = unknown();\n  int bufsize_0 = unknown();\n  int ielen = unknown();\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= p <= bufsize_0;\nloop invariant i2: bufsize >= 0;\nloop invariant i3: 0 <= i <= ielen;\n\n\nloop invariant i6: bufsize <= bufsize_0;\n\nloop invariant i8: bufsize <= bufsize_0 - leader_len;\n\n\n\n\n\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\n\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 38: unexpected token ''",
                "houdini_error": "No annotations found"
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= bufsize_0 <= bufsize_0;\nloop invariant bufsize > 0;\nloop invariant bufsize_0 > 0;\nloop invariant leader_len > 0;\nloop invariant bufsize < bufsize_0;\nloop invariant p >= 0;\nloop invariant i >= 0;\nloop invariant i <= ielen;\nloop invariant p <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant i >= 0;\nloop invariant p + 1 < bufsize_0;\nloop invariant bufsize >= 2 * i;\nloop invariant i < ielen;\nloop invariant p + 1 < bufsize_0;\nloop invariant p <= bufsize_0;\nloop invariant p >= 0;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= bufsize_0 <= bufsize_0 is partially proven to be inductive.\nloop invariant bufsize > 0 is partially proven to be inductive.\nloop invariant bufsize_0 > 0 is partially proven to be inductive.\nloop invariant leader_len > 0 is partially proven to be inductive.\nloop invariant bufsize < bufsize_0 is partially proven to be inductive.\nloop invariant p >= 0 is partially proven to be inductive.\nloop invariant i >= 0 is partially proven to be inductive.\nloop invariant i <= ielen is partially proven to be inductive.\nloop invariant p <= bufsize_0 is partially proven to be inductive.\nloop invariant p + 1 < bufsize_0 is established but not preserved.\nloop invariant bufsize >= 2 * i is established but not preserved.\nloop invariant i < ielen is established but not preserved.\nloop invariant bufsize >= 2 is partially proven to be inductive.\nAssertion 0 <= p: Partially proven\nAssertion p + 1 < bufsize_0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len = unknown();\n  int bufsize = unknown();\n  int bufsize_0 = unknown();\n  int ielen = unknown();\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= bufsize_0 <= bufsize_0;\nloop invariant i2: bufsize > 0;\nloop invariant i3: bufsize_0 > 0;\nloop invariant i4: leader_len > 0;\nloop invariant i5: bufsize < bufsize_0;\nloop invariant i6: p >= 0;\nloop invariant i7: i >= 0;\nloop invariant i8: i <= ielen;\nloop invariant i9: p <= bufsize_0;\n\n\n\nloop invariant i13: bufsize >= 2;\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= bufsize <= bufsize_0;\nloop invariant 0 <= i <= ielen;\nloop invariant p >= 0;\nloop invariant p <= bufsize_0;\nloop invariant i >= 0;\nloop invariant i < ielen;\nloop invariant bufsize >= 2;\nloop invariant bufsize < bufsize_0;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2*ielen;\nloop invariant bufsize <= bufsize_0 - 2*ielen;\nloop invariant bufsize >= 0;\nloop invariant bufsize < bufsize_0 - 2*ielen;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2*i;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= bufsize <= bufsize_0 is partially proven to be inductive.\nloop invariant 0 <= i <= ielen is partially proven to be inductive.\nloop invariant p >= 0 is partially proven to be inductive.\nloop invariant p <= bufsize_0 is partially proven to be inductive.\nloop invariant i >= 0 is partially proven to be inductive.\nloop invariant i < ielen is established but not preserved.\nloop invariant bufsize >= 2 is partially proven to be inductive.\nloop invariant bufsize < bufsize_0 is partially proven to be inductive.\nloop invariant bufsize >= 2*i is partially proven to be inductive.\nloop invariant bufsize <= bufsize_0 - 2*i is partially proven to be inductive.\nloop invariant bufsize >= 2*ielen is partially proven to be inductive.\nloop invariant bufsize <= bufsize_0 - 2*ielen is preserved but not established.\nloop invariant bufsize >= 0 is partially proven to be inductive.\nloop invariant bufsize < bufsize_0 - 2*ielen is preserved but not established.\nAssertion 0 <= p: Partially proven\nAssertion p + 1 < bufsize_0: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len = unknown();\n  int bufsize = unknown();\n  int bufsize_0 = unknown();\n  int ielen = unknown();\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= bufsize <= bufsize_0;\nloop invariant i2: 0 <= i <= ielen;\nloop invariant i3: p >= 0;\nloop invariant i4: p <= bufsize_0;\nloop invariant i5: i >= 0;\n\nloop invariant i7: bufsize >= 2;\nloop invariant i8: bufsize < bufsize_0;\nloop invariant i9: bufsize >= 2*i;\n\nloop invariant i11: bufsize >= 2*ielen;\n\nloop invariant i13: bufsize >= 0;\n\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= ielen;\nloop invariant 0 <= p <= bufsize_0;\nloop invariant 0 <= bufsize <= bufsize_0;\nloop invariant 0 <= bufsize_0 <= bufsize + leader_len;\nloop invariant 0 <= leader_len <= bufsize_0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= ielen is partially proven to be inductive.\nloop invariant 0 <= p <= bufsize_0 is partially proven to be inductive.\nloop invariant 0 <= bufsize <= bufsize_0 is partially proven to be inductive.\nloop invariant 0 <= bufsize_0 <= bufsize + leader_len is partially proven to be inductive.\nloop invariant 0 <= leader_len <= bufsize_0 is partially proven to be inductive.\nAssertion 0 <= p: Valid\nAssertion p + 1 < bufsize_0: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len = unknown();\n  int bufsize = unknown();\n  int bufsize_0 = unknown();\n  int ielen = unknown();\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= i <= ielen;\nloop invariant i2: 0 <= p <= bufsize_0;\nloop invariant i3: 0 <= bufsize <= bufsize_0;\nloop invariant i4: 0 <= bufsize_0 <= bufsize + leader_len;\nloop invariant i5: 0 <= leader_len <= bufsize_0;\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 20,
                "annotations": "```\n/*@\nloop invariant 0 <= p <= bufsize_0;\nloop invariant 0 <= i <= ielen;\nloop invariant 0 <= bufsize <= bufsize_0 - leader_len;\nloop invariant bufsize >= 2;\nloop invariant 0 <= bufsize_0 - i * 2 <= bufsize;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant p >= 2 * i;\nloop invariant bufsize >= 2 * i;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize <= bufsize_0 - leader_len;\nloop invariant bufsize >= leader_len;\nloop invariant bufsize >= 2 * ielen;\nloop invariant bufsize_0 >= leader_len + 2 * ielen;\nloop invariant bufsize_0 >= leader_len;\nloop invariant bufsize_0 >= 0;\nloop invariant bufsize_0 >= 2 * ielen;\nloop invariant bufsize_0 >= leader_len + 2 * i;\nloop invariant bufsize_0 >= leader_len + 2 * i + 2;\nloop invariant bufsize_0 >= leader_len + 2 * i + 2 * ielen;\nloop invariant bufsize_0 >= leader_len + 2 * i + 2 * ielen - 2;\nloop invariant bufsize_0 >= leader_len + 2 * i + 2 * ielen - 2 - 2;\nloop invariant bufsize_0 >= leader_len + 2 * i + 2 * ielen - 2 - 2 - 2;\nloop invariant bufsize_0 >= leader_len + 2 * i + 2 * ielen - 2 - 2 - 2 - 2;\nloop invariant bufsize_0 >= leader_len + 2 * i + 2 * ielen - 2 - 2 - 2 - 2 - 2;\nloop invariant bufsize_0 >= leader_len + 2 * i + 2 * ielen - 2 - 2 - 2 - 2 - 2 - 2;\nloop invariant bufsize_0 >= leader_len + 2 * i + 2 * ielen - 2 - 2 - 2 - 2 - 2 - 2 - 2;\nloop invariant bufsize_0 >= leader_len + 2 * i + 2 * ielen - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2;\nloop invariant bufsize_0 >= leader_len + 2 * i + 2 * ielen - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2;\nloop invariant bufsize_0 >= leader_len + 2 * i + 2 * ielen - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2;\nloop invariant bufsize_0 >= leader_len + 2 * i + 2 * ielen - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2;\nloop invariant bufsize_0 >= leader_len + 2 * i + 2 * ielen - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2;\nloop invariant bufsize_0 >= leader_len + 2 * i + 2 * ielen - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2;\nloop invariant bufsize_0 >= leader_len + 2 * i + 2 * ielen - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2;\nloop invariant bufsize_0 >= leader_len + 2 * i + 2 * ielen - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2;\nloop invariant bufsize_0 >= leader_len + 2 * i + 2 * ielen - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= p <= bufsize_0 is partially proven to be inductive.\nloop invariant 0 <= i <= ielen is partially proven to be inductive.\nloop invariant 0 <= bufsize <= bufsize_0 - leader_len is partially proven to be inductive.\nloop invariant bufsize >= 2 is partially proven to be inductive.\nloop invariant 0 <= bufsize_0 - i * 2 <= bufsize is preserved but not established.\nloop invariant p + 2 * i <= bufsize_0 is partially proven to be inductive.\nloop invariant p >= 2 * i is partially proven to be inductive.\nloop invariant bufsize >= 2 * i is partially proven to be inductive.\nloop invariant bufsize >= 0 is partially proven to be inductive.\nloop invariant bufsize <= bufsize_0 is partially proven to be inductive.\nloop invariant bufsize <= bufsize_0 - leader_len is partially proven to be inductive.\nloop invariant bufsize >= leader_len is partially proven to be inductive.\nloop invariant bufsize >= 2 * ielen is partially proven to be inductive.\nloop invariant bufsize_0 >= leader_len + 2 * ielen is partially proven to be inductive.\nloop invariant bufsize_0 >= leader_len is partially proven to be inductive.\nloop invariant bufsize_0 >= 0 is partially proven to be inductive.\nloop invariant bufsize_0 >= 2 * ielen is partially proven to be inductive.\nloop invariant bufsize_0 >= leader_len + 2 * i is partially proven to be inductive.\nloop invariant bufsize_0 >= leader_len + 2 * i + 2 is partially proven to be inductive.\nloop invariant bufsize_0 >= leader_len + 2 * i + 2 * ielen is partially proven to be inductive.\nloop invariant bufsize_0 >= leader_len + 2 * i + 2 * ielen - 2 is partially proven to be inductive.\nloop invariant bufsize_0 >= leader_len + 2 * i + 2 * ielen - 2 - 2 is partially proven to be inductive.\nloop invariant bufsize_0 >= leader_len + 2 * i + 2 * ielen - 2 - 2 - 2 is partially proven to be inductive.\nloop invariant bufsize_0 >= leader_len + 2 * i + 2 * ielen - 2 - 2 - 2 - 2 is partially proven to be inductive.\nloop invariant bufsize_0 >= leader_len + 2 * i + 2 * ielen - 2 - 2 - 2 - 2 - 2 is partially proven to be inductive.\nloop invariant bufsize_0 >= leader_len + 2 * i + 2 * ielen - 2 - 2 - 2 - 2 - 2 - 2 is partially proven to be inductive.\nloop invariant bufsize_0 >= leader_len + 2 * i + 2 * ielen - 2 - 2 - 2 - 2 - 2 - 2 - 2 is partially proven to be inductive.\nloop invariant bufsize_0 >= leader_len + 2 * i + 2 * ielen - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 is partially proven to be inductive.\nloop invariant bufsize_0 >= leader_len + 2 * i + 2 * ielen - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 is partially proven to be inductive.\nloop invariant bufsize_0 >= leader_len + 2 * i + 2 * ielen - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 is partially proven to be inductive.\nloop invariant bufsize_0 >= leader_len + 2 * i + 2 * ielen - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 is partially proven to be inductive.\nloop invariant bufsize_0 >= leader_len + 2 * i + 2 * ielen - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 is partially proven to be inductive.\nloop invariant bufsize_0 >= leader_len + 2 * i + 2 * ielen - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 is partially proven to be inductive.\nloop invariant bufsize_0 >= leader_len + 2 * i + 2 * ielen - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 is partially proven to be inductive.\nloop invariant bufsize_0 >= leader_len + 2 * i + 2 * ielen - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 is partially proven to be inductive.\nloop invariant bufsize_0 >= leader_len + 2 * i + 2 * ielen - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 is partially proven to be inductive.\nAssertion 0 <= p: Partially proven\nAssertion p + 1 < bufsize_0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len = unknown();\n  int bufsize = unknown();\n  int bufsize_0 = unknown();\n  int ielen = unknown();\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= p <= bufsize_0;\nloop invariant i2: 0 <= i <= ielen;\nloop invariant i3: 0 <= bufsize <= bufsize_0 - leader_len;\nloop invariant i4: bufsize >= 2;\n\n\nloop invariant i7: p >= 2 * i;\nloop invariant i8: bufsize >= 2 * i;\nloop invariant i9: bufsize >= 0;\nloop invariant i10: bufsize <= bufsize_0;\nloop invariant i11: bufsize <= bufsize_0 - leader_len;\n\nloop invariant i13: bufsize >= 2 * ielen;\nloop invariant i14: bufsize_0 >= leader_len + 2 * ielen;\nloop invariant i15: bufsize_0 >= leader_len;\nloop invariant i16: bufsize_0 >= 0;\nloop invariant i17: bufsize_0 >= 2 * ielen;\nloop invariant i18: bufsize_0 >= leader_len + 2 * i;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 21,
                "annotations": "```\n/*@\nloop invariant 0 <= p;\nloop invariant p <= bufsize_0;\nloop invariant i >= 0;\nloop invariant i <= ielen;\nloop invariant 0 <= bufsize;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= leader_len;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize >= 2*i + 2;\nloop invariant bufsize >= bufsize_0 - 2*i - 2;\nloop invariant bufsize >= 2*i + 2 - bufsize_0;\nloop invariant bufsize >= 2*i + 2 - bufsize_0 + 2*i;\nloop invariant bufsize >= 2*i + 2 - bufsize_0 + 2*i - 2*i;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= bufsize_0 - 2*i - 2;\nloop invariant bufsize >= 2*i + 2 - bufsize_0 + 2*i - 2*i;\nloop invariant bufsize >= 2*i + 2 - bufsize_0 + 2*i - 2*i + 2*i;\nloop invariant bufsize >= 2*i + 2 - bufsize_0 + 2*i - 2*i + 2*i - 2*i;\nloop invariant bufsize >= 2*i + 2 - bufsize_0 + 2*i - 2*i + 2*i - 2*i + 2*i;\nloop invariant bufsize >= 2*i + 2 - bufsize_0 + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i;\nloop invariant bufsize >= 2*i + 2 - bufsize_0 + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i;\nloop invariant bufsize >= 2*i + 2 - bufsize_0 + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i;\nloop invariant bufsize >= 2*i + 2 - bufsize_0 + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i;\nloop invariant bufsize >= 2*i + 2 - bufsize_0 + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i;\nloop invariant bufsize >= 2*i + 2 - bufsize_0 + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i;\nloop invariant bufsize >= 2*i + 2 - bufsize_0 + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i;\nloop invariant bufsize >= 2*i + 2 - bufsize_0 + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i;\nloop invariant bufsize >= 2*i + 2 - bufsize_0 + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i;\nloop invariant bufsize >= 2*i + 2 - bufsize_0 + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i;\nloop invariant bufsize >= 2*i + 2 - bufsize_0 + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= p is partially proven to be inductive.\nloop invariant p <= bufsize_0 is partially proven to be inductive.\nloop invariant i >= 0 is partially proven to be inductive.\nloop invariant i <= ielen is partially proven to be inductive.\nloop invariant 0 <= bufsize is partially proven to be inductive.\nloop invariant bufsize <= bufsize_0 is partially proven to be inductive.\nloop invariant bufsize >= 2*i is partially proven to be inductive.\nloop invariant bufsize >= 0 is partially proven to be inductive.\nloop invariant bufsize >= leader_len is preserved but not established.\nloop invariant bufsize >= 2 is partially proven to be inductive.\nloop invariant bufsize >= bufsize_0 - 2*i is preserved but not established.\nloop invariant bufsize >= 2*i + 2 is partially proven to be inductive.\nloop invariant bufsize >= bufsize_0 - 2*i - 2 is partially proven to be inductive.\nloop invariant bufsize >= 2*i + 2 - bufsize_0 is partially proven to be inductive.\nloop invariant bufsize >= 2*i + 2 - bufsize_0 + 2*i is partially proven to be inductive.\nloop invariant bufsize >= 2*i + 2 - bufsize_0 + 2*i - 2*i is partially proven to be inductive.\nloop invariant bufsize >= 2*i + 2 - bufsize_0 + 2*i - 2*i + 2*i is partially proven to be inductive.\nloop invariant bufsize >= 2*i + 2 - bufsize_0 + 2*i - 2*i + 2*i - 2*i is partially proven to be inductive.\nloop invariant bufsize >= 2*i + 2 - bufsize_0 + 2*i - 2*i + 2*i - 2*i + 2*i is partially proven to be inductive.\nloop invariant bufsize >= 2*i + 2 - bufsize_0 + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i is partially proven to be inductive.\nloop invariant bufsize >= 2*i + 2 - bufsize_0 + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i is partially proven to be inductive.\nloop invariant bufsize >= 2*i + 2 - bufsize_0 + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i is partially proven to be inductive.\nloop invariant bufsize >= 2*i + 2 - bufsize_0 + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i is partially proven to be inductive.\nloop invariant bufsize >= 2*i + 2 - bufsize_0 + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i is partially proven to be inductive.\nloop invariant bufsize >= 2*i + 2 - bufsize_0 + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i is partially proven to be inductive.\nloop invariant bufsize >= 2*i + 2 - bufsize_0 + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i is partially proven to be inductive.\nloop invariant bufsize >= 2*i + 2 - bufsize_0 + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i is partially proven to be inductive.\nloop invariant bufsize >= 2*i + 2 - bufsize_0 + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i is partially proven to be inductive.\nloop invariant bufsize >= 2*i + 2 - bufsize_0 + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i is partially proven to be inductive.\nloop invariant bufsize >= 2*i + 2 - bufsize_0 + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i is partially proven to be inductive.\nAssertion 0 <= p: Partially proven\nAssertion p + 1 < bufsize_0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len = unknown();\n  int bufsize = unknown();\n  int bufsize_0 = unknown();\n  int ielen = unknown();\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= p;\nloop invariant i2: p <= bufsize_0;\nloop invariant i3: i >= 0;\nloop invariant i4: i <= ielen;\nloop invariant i5: 0 <= bufsize;\nloop invariant i6: bufsize <= bufsize_0;\n\nloop invariant i8: bufsize >= 0;\n\nloop invariant i10: bufsize >= 2;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:;\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 82: unexpected token ')'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len = unknown();\n  int bufsize = unknown();\n  int bufsize_0 = unknown();\n  int ielen = unknown();\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= p <= bufsize_0;\nloop invariant i2: i >= 0;\nloop invariant i3: i <= ielen;\nloop invariant i4: bufsize >= 2*i;\nloop invariant i5: bufsize <= bufsize_0-2*(ielen-i);\nloop invariant i6: bufsize_0 + leader_len >= bufsize;\nloop invariant i7: 0 <= bufsize <= bufsize_0;\nloop invariant i8: 0 <= i <= ielen;\nloop invariant i9: ielen * 2 >= bufsize;\nloop invariant i10: 0 <= p + 2 * i <= bufsize_0;\nloop invariant i11: p + 2 * i <= bufsize;\nloop invariant i12: bufsize + leader_len >= bufsize_0;\nloop invariant i13: bufsize + leader_len <= bufsize_0;\nloop invariant i14: bufsize_0 - leader_len <= bufsize;\nloop invariant i15: p > 0;\nloop invariant i16: p <= bufsize_0;\nloop invariant i17: bufsize >= 2;\nloop invariant i18: bufsize >= 2 * i;\nloop invariant i19: bufsize >= 2 * (i + 1);\nloop invariant i20: p >= leader_len;\nloop invariant i21: p <= bufsize_0 - 2;\nloop invariant i22: p <= bufsize_0 - 2 * (i + 1);\nloop invariant i23: p <= bufsize_0 - 2 * ielen;\nloop invariant i24: p >= leader_len + 2 * i;\nloop invariant i25: p >= leader_len + 2 * (i + 1);\nloop invariant i26: p >= leader_len + 2 * ielen;\nloop invariant i27: leader_len <= bufsize_0;\nloop invariant i28: bufsize <= bufsize_0 - leader_len;\nloop invariant i29: p <= bufsize_0 - 2*i;\nloop invariant i30: p <= bufsize_0 - leader_len;\nloop invariant i31: (i == 0 ==> bufsize >= 2*ielen);\nloop invariant i32: (i > 0 ==> bufsize < 2*ielen);\nloop invariant i33: (i == 0 ==> p == leader_len);\nloop invariant i34: (i > 0 ==> p > leader_len);\nloop invariant i35: (i == 0 ==> bufsize >= 2);\nloop invariant i36: (i > 0 ==> bufsize < 2);\nloop invariant i37: 0 < bufsize_0;\nloop invariant i38: 0 <= p < bufsize_0;\nloop invariant i39: bufsize_0 - (leader_len + ielen*2) <= bufsize;\nloop invariant i40: 0 <= i < ielen;\nloop invariant i41: 0 <= p;\nloop invariant i42: 0 < leader_len;\nloop invariant i43: 0 < bufsize;\nloop invariant i44: 0 < ielen;\nloop invariant i45: unknown();\nloop invariant i46: ( 0 <= p <= bufsize_0 ) ==> true;\nloop invariant i47: ( 0 <= i <= ielen ) ==> true;\nloop invariant i48: ( bufsize_0 >= bufsize ) ==> true;\nloop invariant i49: ( bufsize >= leader_len ) ==> true;\nloop invariant i50: ( bufsize >= 2*ielen ) ==> true;\nloop invariant i51: ( i >= 0 ) ==> true;\nloop invariant i52: ( i <= ielen ) ==> true;\nloop invariant i53: ( p >= 0 ) ==> true;\nloop invariant i54: ( p <= bufsize_0 ) ==> true;\nloop invariant i55: ( bufsize + leader_len == bufsize_0 ) ==> true;\nloop invariant i56: ( bufsize == bufsize_0 - leader_len ) ==> true;\nloop invariant i57: ( p == bufsize_0 - bufsize ) ==> true;\nloop invariant i58: leader_len <= p <= bufsize_0;\nloop invariant i59: bufsize < leader_len ==> i == 0;\nloop invariant i60: bufsize >= leader_len ==> i >= 0;\nloop invariant i61: bufsize < 2*ielen ==> i == ielen;\nloop invariant i62: bufsize >= 2*ielen ==> i < ielen;\nloop invariant i63: bufsize >= 2 ==> i >= 0;\nloop invariant i64: bufsize < 2 ==> i == ielen;\nloop invariant i65: bufsize >= 2*ielen ==> i >= 0;\nloop invariant i66: bufsize < 2*ielen ==> i < ielen;\nloop invariant i67: bufsize >= 2 ==> i < ielen;\nloop invariant i68: 2*i <= bufsize;\nloop invariant i69: 2*i <= bufsize - leader_len;\nloop invariant i70: 2*i < bufsize - leader_len;\nloop invariant i71: bufsize >= 0;\nloop invariant i72: bufsize - 2 * i >= 0;\nloop invariant i73: bufsize >= bufsize_0 - 2 * i;\nloop invariant i74: bufsize <= bufsize_0;\nloop invariant i75: bufsize >= leader_len;\nloop invariant i76: bufsize <= bufsize_0 - 2 * ielen;\nloop invariant i77: bufsize >= bufsize_0 - 2 * ielen;\nloop invariant i78: bufsize >= bufsize_0 - 2 * (i + 1);\nloop invariant i79: bufsize <= bufsize_0 - 2 * (i + 1);\nloop invariant i80: bufsize - 2 * (i + 1) >= 0;\nloop invariant i81: 0 <= bufsize_0 <= bufsize_0;\nloop invariant i82: bufsize > 0;\nloop invariant i83: bufsize_0 > 0;\nloop invariant i84: leader_len > 0;\nloop invariant i85: bufsize < bufsize_0;\nloop invariant i86: p >= 0;\nloop invariant i87: p + 1 < bufsize_0;\nloop invariant i88: i < ielen;\nloop invariant i89: bufsize <= bufsize_0 - 2*i;\nloop invariant i90: bufsize >= 2*ielen;\nloop invariant i91: bufsize <= bufsize_0 - 2*ielen;\nloop invariant i92: bufsize < bufsize_0 - 2*ielen;\nloop invariant i93: 0 <= bufsize_0 <= bufsize + leader_len;\nloop invariant i94: 0 <= leader_len <= bufsize_0;\nloop invariant i95: 0 <= bufsize <= bufsize_0 - leader_len;\nloop invariant i96: 0 <= bufsize_0 - i * 2 <= bufsize;\nloop invariant i97: p + 2 * i <= bufsize_0;\nloop invariant i98: p >= 2 * i;\nloop invariant i99: bufsize >= 2 * ielen;\nloop invariant i100: bufsize_0 >= leader_len + 2 * ielen;\nloop invariant i101: bufsize_0 >= leader_len;\nloop invariant i102: bufsize_0 >= 0;\nloop invariant i103: bufsize_0 >= 2 * ielen;\nloop invariant i104: bufsize_0 >= leader_len + 2 * i;\nloop invariant i105: bufsize_0 >= leader_len + 2 * i + 2;\nloop invariant i106: bufsize_0 >= leader_len + 2 * i + 2 * ielen;\nloop invariant i107: bufsize_0 >= leader_len + 2 * i + 2 * ielen - 2;\nloop invariant i108: bufsize_0 >= leader_len + 2 * i + 2 * ielen - 2 - 2;\nloop invariant i109: bufsize_0 >= leader_len + 2 * i + 2 * ielen - 2 - 2 - 2;\nloop invariant i110: bufsize_0 >= leader_len + 2 * i + 2 * ielen - 2 - 2 - 2 - 2;\nloop invariant i111: bufsize_0 >= leader_len + 2 * i + 2 * ielen - 2 - 2 - 2 - 2 - 2;\nloop invariant i112: bufsize_0 >= leader_len + 2 * i + 2 * ielen - 2 - 2 - 2 - 2 - 2 - 2;\nloop invariant i113: bufsize_0 >= leader_len + 2 * i + 2 * ielen - 2 - 2 - 2 - 2 - 2 - 2 - 2;\nloop invariant i114: bufsize_0 >= leader_len + 2 * i + 2 * ielen - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2;\nloop invariant i115: bufsize_0 >= leader_len + 2 * i + 2 * ielen - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2;\nloop invariant i116: bufsize_0 >= leader_len + 2 * i + 2 * ielen - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2;\nloop invariant i117: bufsize_0 >= leader_len + 2 * i + 2 * ielen - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2;\nloop invariant i118: bufsize_0 >= leader_len + 2 * i + 2 * ielen - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2;\nloop invariant i119: bufsize_0 >= leader_len + 2 * i + 2 * ielen - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2;\nloop invariant i120: bufsize_0 >= leader_len + 2 * i + 2 * ielen - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2;\nloop invariant i121: bufsize_0 >= leader_len + 2 * i + 2 * ielen - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2;\nloop invariant i122: bufsize_0 >= leader_len + 2 * i + 2 * ielen - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2 - 2;\nloop invariant i123: 0 <= bufsize;\nloop invariant i124: bufsize >= bufsize_0 - 2*i;\nloop invariant i125: bufsize >= 2*i + 2;\nloop invariant i126: bufsize >= bufsize_0 - 2*i - 2;\nloop invariant i127: bufsize >= 2*i + 2 - bufsize_0;\nloop invariant i128: bufsize >= 2*i + 2 - bufsize_0 + 2*i;\nloop invariant i129: bufsize >= 2*i + 2 - bufsize_0 + 2*i - 2*i;\nloop invariant i130: bufsize >= 2*i + 2 - bufsize_0 + 2*i - 2*i + 2*i;\nloop invariant i131: bufsize >= 2*i + 2 - bufsize_0 + 2*i - 2*i + 2*i - 2*i;\nloop invariant i132: bufsize >= 2*i + 2 - bufsize_0 + 2*i - 2*i + 2*i - 2*i + 2*i;\nloop invariant i133: bufsize >= 2*i + 2 - bufsize_0 + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i;\nloop invariant i134: bufsize >= 2*i + 2 - bufsize_0 + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i;\nloop invariant i135: bufsize >= 2*i + 2 - bufsize_0 + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i;\nloop invariant i136: bufsize >= 2*i + 2 - bufsize_0 + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i;\nloop invariant i137: bufsize >= 2*i + 2 - bufsize_0 + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i;\nloop invariant i138: bufsize >= 2*i + 2 - bufsize_0 + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i;\nloop invariant i139: bufsize >= 2*i + 2 - bufsize_0 + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i;\nloop invariant i140: bufsize >= 2*i + 2 - bufsize_0 + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i;\nloop invariant i141: bufsize >= 2*i + 2 - bufsize_0 + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i;\nloop invariant i142: bufsize >= 2*i + 2 - bufsize_0 + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i;\nloop invariant i143: bufsize >= 2*i + 2 - bufsize_0 + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i;\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:;\n}",
        "combined_annotation_num_solver_calls": 40,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len = unknown();\n  int bufsize = unknown();\n  int bufsize_0 = unknown();\n  int ielen = unknown();\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= p <= bufsize_0;\nloop invariant i2: i >= 0;\nloop invariant i3: i <= ielen;\nloop invariant i4: bufsize >= 2*i;\n\nloop invariant i6: bufsize_0 + leader_len >= bufsize;\nloop invariant i7: 0 <= bufsize <= bufsize_0;\nloop invariant i8: 0 <= i <= ielen;\n\n\n\nloop invariant i12: bufsize + leader_len >= bufsize_0;\nloop invariant i13: bufsize + leader_len <= bufsize_0;\nloop invariant i14: bufsize_0 - leader_len <= bufsize;\nloop invariant i15: p > 0;\nloop invariant i16: p <= bufsize_0;\nloop invariant i17: bufsize >= 2;\nloop invariant i18: bufsize >= 2 * i;\n\nloop invariant i20: p >= leader_len;\n\n\n\nloop invariant i24: p >= leader_len + 2 * i;\n\n\nloop invariant i27: leader_len <= bufsize_0;\nloop invariant i28: bufsize <= bufsize_0 - leader_len;\n\n\nloop invariant i31: (i == 0 ==> bufsize >= 2*ielen);\n\nloop invariant i33: (i == 0 ==> p == leader_len);\nloop invariant i34: (i > 0 ==> p > leader_len);\nloop invariant i35: (i == 0 ==> bufsize >= 2);\n\nloop invariant i37: 0 < bufsize_0;\n\nloop invariant i39: bufsize_0 - (leader_len + ielen*2) <= bufsize;\n\nloop invariant i41: 0 <= p;\nloop invariant i42: 0 < leader_len;\nloop invariant i43: 0 < bufsize;\nloop invariant i44: 0 < ielen;\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i58: leader_len <= p <= bufsize_0;\n\nloop invariant i60: bufsize >= leader_len ==> i >= 0;\nloop invariant i61: bufsize < 2*ielen ==> i == ielen;\n\nloop invariant i63: bufsize >= 2 ==> i >= 0;\nloop invariant i64: bufsize < 2 ==> i == ielen;\nloop invariant i65: bufsize >= 2*ielen ==> i >= 0;\nloop invariant i66: bufsize < 2*ielen ==> i < ielen;\n\nloop invariant i68: 2*i <= bufsize;\n\n\nloop invariant i71: bufsize >= 0;\nloop invariant i72: bufsize - 2 * i >= 0;\n\nloop invariant i74: bufsize <= bufsize_0;\n\n\n\n\n\n\nloop invariant i81: 0 <= bufsize_0 <= bufsize_0;\nloop invariant i82: bufsize > 0;\nloop invariant i83: bufsize_0 > 0;\nloop invariant i84: leader_len > 0;\nloop invariant i85: bufsize < bufsize_0;\nloop invariant i86: p >= 0;\n\n\n\nloop invariant i90: bufsize >= 2*ielen;\n\n\nloop invariant i93: 0 <= bufsize_0 <= bufsize + leader_len;\nloop invariant i94: 0 <= leader_len <= bufsize_0;\nloop invariant i95: 0 <= bufsize <= bufsize_0 - leader_len;\n\n\nloop invariant i98: p >= 2 * i;\nloop invariant i99: bufsize >= 2 * ielen;\nloop invariant i100: bufsize_0 >= leader_len + 2 * ielen;\nloop invariant i101: bufsize_0 >= leader_len;\nloop invariant i102: bufsize_0 >= 0;\nloop invariant i103: bufsize_0 >= 2 * ielen;\nloop invariant i104: bufsize_0 >= leader_len + 2 * i;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i123: 0 <= bufsize;\n\n\n\nloop invariant i127: bufsize >= 2*i + 2 - bufsize_0;\n\nloop invariant i129: bufsize >= 2*i + 2 - bufsize_0 + 2*i - 2*i;\n\nloop invariant i131: bufsize >= 2*i + 2 - bufsize_0 + 2*i - 2*i + 2*i - 2*i;\n\nloop invariant i133: bufsize >= 2*i + 2 - bufsize_0 + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i;\n\nloop invariant i135: bufsize >= 2*i + 2 - bufsize_0 + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i;\n\nloop invariant i137: bufsize >= 2*i + 2 - bufsize_0 + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i;\n\nloop invariant i139: bufsize >= 2*i + 2 - bufsize_0 + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i;\n\nloop invariant i141: bufsize >= 2*i + 2 - bufsize_0 + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i;\n\nloop invariant i143: bufsize >= 2*i + 2 - bufsize_0 + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i + 2*i - 2*i;\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:;\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_nondet_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum01_true-unreach-call_true-termination.i.annot.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/85.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/ex2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/42.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/diamond_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/odd.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/even.c",
            "../dataset/loop_invariants/code2inv/24.c",
            "../dataset/loop_invariants/code2inv/130.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/diamond_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/overflow_safe1.c",
            "../dataset/loop_invariants/code2inv/113.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/ddlm2013_true-unreach-call.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/MADWiFi-encode_ie_ok.c"
        ],
        "skipped": [],
        "total": 15,
        "success_count": 2,
        "failure_count": 13,
        "success_rate": 0.13333333333333333
    }
}