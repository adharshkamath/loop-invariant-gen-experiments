{
    "logs": {
        "file": "../dataset/loop_invariants/code2inv/105.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = 0);\n  \n  while ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (n >= 0) )\n{;\n//@ assert( (x == n) );\n}\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant x == (n - (n - x));\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x == n;\n*/\n```",
            "```\n/*@\nloop invariant n >= 0;\nloop invariant x == 0 ==> n >= x;\nloop invariant x == n ==> n >= x;\nloop invariant n >= x ==> x < n;\nloop invariant n >= x ==> x >= 0;\nloop invariant n >= x ==> x >= -1;\nloop invariant n >= x ==> x >= -2;\nloop invariant n >= x ==> x >= -3;\nloop invariant n >= x ==> x >= -4;\nloop invariant n >= x ==> x >= -5;\nloop invariant n >= x ==> x >= -6;\nloop invariant n >= x ==> x >= -7;\nloop invariant n >= x ==> x >= -8;\nloop invariant n >= x ==> x >= -9;\nloop invariant n >= x ==> x >= -10;\nloop invariant n >= x ==> x >= -11;\nloop invariant n >= x ==> x >= -12;\nloop invariant n >= x ==> x >= -13;\nloop invariant n >= x ==> x >= -14;\nloop invariant n >= x ==> x >= -15;\nloop invariant n >= x ==> x >= -16;\nloop invariant n >= x ==> x >= -17;\nloop invariant n >= x ==> x >= -18;\nloop invariant n >= x ==> x >= -19;\nloop invariant n >= x ==> x >= -20;\nloop invariant n >= x ==> x >= -21;\nloop invariant n >= x ==> x >= -22;\nloop invariant n >= x ==> x >= -23;\nloop invariant n >= x ==> x >= -24;\nloop invariant n >= x ==> x >= -25;\nloop invariant n >= x ==> x >= -26;\nloop invariant n >= x ==> x >= -27;\nloop invariant n >= x ==> x >= -28;\nloop invariant n >= x ==> x >= -29;\nloop invariant n >= x ==> x >= -30;\nloop invariant n >= x ==> x >= -31;\nloop invariant n >= x ==> x >= -32;\nloop invariant n >= x ==> x >= -33;\nloop invariant n >= x ==> x >= -34;\nloop invariant n >= x ==> x >= -35;\nloop invariant n >= x ==> x >= -36;\nloop invariant n >= x ==> x >= -37;\nloop invariant n >= x ==> x >= -38;\nloop invariant n >= x ==> x >= -39;\nloop invariant n >= x ==> x >= -40;\nloop invariant n >= x ==> x >= -41;\nloop invariant n >= x ==> x >= -42;\nloop invariant n >= x ==> x >= -43;\nloop invariant n >= x ==> x >= -44;\nloop invariant n >= x ==> x >= -45;\nloop invariant n >= x ==> x >= -46;\nloop invariant n >= x ==> x >= -47;\nloop invariant n >= x ==> x >= -48;\nloop invariant n >= x ==> x >= -49;\nloop invariant n >= x ==> x >= -50;\nloop invariant n >= x ==> x >= -51;\nloop invariant n >= x ==> x >= -52;\nloop invariant n >= x ==> x >= -53;\nloop invariant n >= x ==> x >= -54;\nloop invariant n >= x ==> x >= -55;\nloop invariant n >= x ==> x >= -56;\nloop invariant n >= x ==> x >= -57;\nloop invariant n >= x ==> x >= -58;\nloop invariant n >= x ==> x >= -59;\nloop invariant n >= x ==> x >= -60;\nloop invariant n >= x ==> x >= -61;\nloop invariant n >= x ==> x >= -62;\nloop invariant n >= x ==> x >= -63;\nloop invariant n >= x ==> x >= -64;\nloop invariant n >= x ==> x >= -65;\nloop invariant n >= x ==> x >= -66;\nloop invariant n >= x ==> x >= -67;\nloop invariant n >= x ==> x >= -68;\nloop invariant n >= x ==> x >= -69;\nloop invariant n >= x ==> x >= -70;\nloop invariant n >= x ==> x >= -71;\nloop invariant n >= x ==> x >= -72;\nloop invariant n >= x ==> x >= -73;\nloop invariant n >= x ==> x >= -74;\nloop invariant n >= x ==> x >= -75;\nloop invariant n >= x ==> x >= -76;\nloop invariant n >= x ==> x >= -77;\nloop invariant n >= x ==> x >= -78;\nloop invariant n >= x ==> x >= -79;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x + 1 >= n ==> x >= n;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x;\nloop invariant x < n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant n >= 0 ==> x == n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x == n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x == n ==> ((x >= 0) && (x <= n));\nloop invariant x == n ==> (n >= 0);\nloop invariant x < n ==> (n >= 0);\nloop invariant x == n ==> (x == n);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant n >= 0 ==> x == n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant n >= 0 ==> x == n;\nloop invariant n >= 0 ==> x <= n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x == n;\nloop invariant (n >= 0) ==> (x == n);\nloop invariant (n >= 0) ==> (0 <= x <= n);\nloop invariant (n >= 0) ==> (x <= n);\nloop invariant (n >= 0) ==> (x >= 0);\nloop invariant (n >= 0) ==> (x == n ==> x >= 0);\nloop invariant (n >= 0) ==> (x == n ==> x <= n);\nloop invariant (n >= 0) ==> (x == n ==> x <= n) ==> (x >= 0);\nloop invariant (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n));\nloop invariant (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n);\nloop invariant (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x >= 0);\nloop invariant (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n);\nloop invariant (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n ==> x == n);\nloop invariant (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n ==> x == n ==> x >= 0);\nloop invariant (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n ==> x == n ==> x >= 0 ==> x <= n);\nloop invariant (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n);\nloop invariant (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0);\nloop invariant (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0 ==> x <= n);\nloop invariant (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n);\nloop invariant (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0);\nloop invariant (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0 ==> x <= n);\nloop invariant (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n);\nloop invariant (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0);\nloop invariant (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0 ==> x <= n);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= n <= (2^31 - 1);\nloop invariant x == n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant n >= 0;\nloop invariant n >= x;\nloop invariant x == n;\nloop invariant true;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x == n;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant x == (n - (n - x));\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x == n;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x == (n - (n - x)) is partially proven to be inductive.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant x <= n is preserved but not established.\nloop invariant x == n is preserved but not established.\nAssertion x == n: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = 0);\n  \n  /*@\nloop invariant i1: x == (n - (n - x));\nloop invariant i2: x >= 0;\n\n\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (n >= 0) )\n{;\n//@ assert( (x == n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant n >= 0;\nloop invariant x == 0 ==> n >= x;\nloop invariant x == n ==> n >= x;\nloop invariant n >= x ==> x < n;\nloop invariant n >= x ==> x >= 0;\nloop invariant n >= x ==> x >= -1;\nloop invariant n >= x ==> x >= -2;\nloop invariant n >= x ==> x >= -3;\nloop invariant n >= x ==> x >= -4;\nloop invariant n >= x ==> x >= -5;\nloop invariant n >= x ==> x >= -6;\nloop invariant n >= x ==> x >= -7;\nloop invariant n >= x ==> x >= -8;\nloop invariant n >= x ==> x >= -9;\nloop invariant n >= x ==> x >= -10;\nloop invariant n >= x ==> x >= -11;\nloop invariant n >= x ==> x >= -12;\nloop invariant n >= x ==> x >= -13;\nloop invariant n >= x ==> x >= -14;\nloop invariant n >= x ==> x >= -15;\nloop invariant n >= x ==> x >= -16;\nloop invariant n >= x ==> x >= -17;\nloop invariant n >= x ==> x >= -18;\nloop invariant n >= x ==> x >= -19;\nloop invariant n >= x ==> x >= -20;\nloop invariant n >= x ==> x >= -21;\nloop invariant n >= x ==> x >= -22;\nloop invariant n >= x ==> x >= -23;\nloop invariant n >= x ==> x >= -24;\nloop invariant n >= x ==> x >= -25;\nloop invariant n >= x ==> x >= -26;\nloop invariant n >= x ==> x >= -27;\nloop invariant n >= x ==> x >= -28;\nloop invariant n >= x ==> x >= -29;\nloop invariant n >= x ==> x >= -30;\nloop invariant n >= x ==> x >= -31;\nloop invariant n >= x ==> x >= -32;\nloop invariant n >= x ==> x >= -33;\nloop invariant n >= x ==> x >= -34;\nloop invariant n >= x ==> x >= -35;\nloop invariant n >= x ==> x >= -36;\nloop invariant n >= x ==> x >= -37;\nloop invariant n >= x ==> x >= -38;\nloop invariant n >= x ==> x >= -39;\nloop invariant n >= x ==> x >= -40;\nloop invariant n >= x ==> x >= -41;\nloop invariant n >= x ==> x >= -42;\nloop invariant n >= x ==> x >= -43;\nloop invariant n >= x ==> x >= -44;\nloop invariant n >= x ==> x >= -45;\nloop invariant n >= x ==> x >= -46;\nloop invariant n >= x ==> x >= -47;\nloop invariant n >= x ==> x >= -48;\nloop invariant n >= x ==> x >= -49;\nloop invariant n >= x ==> x >= -50;\nloop invariant n >= x ==> x >= -51;\nloop invariant n >= x ==> x >= -52;\nloop invariant n >= x ==> x >= -53;\nloop invariant n >= x ==> x >= -54;\nloop invariant n >= x ==> x >= -55;\nloop invariant n >= x ==> x >= -56;\nloop invariant n >= x ==> x >= -57;\nloop invariant n >= x ==> x >= -58;\nloop invariant n >= x ==> x >= -59;\nloop invariant n >= x ==> x >= -60;\nloop invariant n >= x ==> x >= -61;\nloop invariant n >= x ==> x >= -62;\nloop invariant n >= x ==> x >= -63;\nloop invariant n >= x ==> x >= -64;\nloop invariant n >= x ==> x >= -65;\nloop invariant n >= x ==> x >= -66;\nloop invariant n >= x ==> x >= -67;\nloop invariant n >= x ==> x >= -68;\nloop invariant n >= x ==> x >= -69;\nloop invariant n >= x ==> x >= -70;\nloop invariant n >= x ==> x >= -71;\nloop invariant n >= x ==> x >= -72;\nloop invariant n >= x ==> x >= -73;\nloop invariant n >= x ==> x >= -74;\nloop invariant n >= x ==> x >= -75;\nloop invariant n >= x ==> x >= -76;\nloop invariant n >= x ==> x >= -77;\nloop invariant n >= x ==> x >= -78;\nloop invariant n >= x ==> x >= -79;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant n >= 0 is preserved but not established.\nloop invariant x == 0 ==> n >= x is partially proven to be inductive.\nloop invariant x == n ==> n >= x is partially proven to be inductive.\nloop invariant n >= x ==> x < n is neither established nor preserved.\nloop invariant n >= x ==> x >= 0 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -1 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -2 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -3 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -4 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -5 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -6 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -7 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -8 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -9 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -10 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -11 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -12 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -13 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -14 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -15 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -16 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -17 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -18 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -19 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -20 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -21 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -22 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -23 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -24 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -25 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -26 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -27 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -28 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -29 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -30 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -31 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -32 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -33 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -34 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -35 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -36 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -37 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -38 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -39 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -40 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -41 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -42 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -43 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -44 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -45 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -46 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -47 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -48 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -49 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -50 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -51 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -52 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -53 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -54 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -55 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -56 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -57 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -58 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -59 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -60 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -61 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -62 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -63 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -64 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -65 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -66 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -67 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -68 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -69 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -70 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -71 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -72 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -73 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -74 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -75 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -76 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -77 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -78 is partially proven to be inductive.\nloop invariant n >= x ==> x >= -79 is partially proven to be inductive.\nAssertion x == n: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = 0);\n  \n  /*@\n\n\nloop invariant i3: x == n ==> n >= x;\n\nloop invariant i5: n >= x ==> x >= 0;\nloop invariant i6: n >= x ==> x >= -1;\nloop invariant i7: n >= x ==> x >= -2;\nloop invariant i8: n >= x ==> x >= -3;\nloop invariant i9: n >= x ==> x >= -4;\nloop invariant i10: n >= x ==> x >= -5;\nloop invariant i11: n >= x ==> x >= -6;\nloop invariant i12: n >= x ==> x >= -7;\nloop invariant i13: n >= x ==> x >= -8;\nloop invariant i14: n >= x ==> x >= -9;\nloop invariant i15: n >= x ==> x >= -10;\nloop invariant i16: n >= x ==> x >= -11;\nloop invariant i17: n >= x ==> x >= -12;\nloop invariant i18: n >= x ==> x >= -13;\nloop invariant i19: n >= x ==> x >= -14;\nloop invariant i20: n >= x ==> x >= -15;\nloop invariant i21: n >= x ==> x >= -16;\nloop invariant i22: n >= x ==> x >= -17;\nloop invariant i23: n >= x ==> x >= -18;\nloop invariant i24: n >= x ==> x >= -19;\nloop invariant i25: n >= x ==> x >= -20;\nloop invariant i26: n >= x ==> x >= -21;\nloop invariant i27: n >= x ==> x >= -22;\nloop invariant i28: n >= x ==> x >= -23;\nloop invariant i29: n >= x ==> x >= -24;\nloop invariant i30: n >= x ==> x >= -25;\nloop invariant i31: n >= x ==> x >= -26;\nloop invariant i32: n >= x ==> x >= -27;\nloop invariant i33: n >= x ==> x >= -28;\nloop invariant i34: n >= x ==> x >= -29;\nloop invariant i35: n >= x ==> x >= -30;\nloop invariant i36: n >= x ==> x >= -31;\nloop invariant i37: n >= x ==> x >= -32;\nloop invariant i38: n >= x ==> x >= -33;\nloop invariant i39: n >= x ==> x >= -34;\nloop invariant i40: n >= x ==> x >= -35;\nloop invariant i41: n >= x ==> x >= -36;\nloop invariant i42: n >= x ==> x >= -37;\nloop invariant i43: n >= x ==> x >= -38;\nloop invariant i44: n >= x ==> x >= -39;\nloop invariant i45: n >= x ==> x >= -40;\nloop invariant i46: n >= x ==> x >= -41;\nloop invariant i47: n >= x ==> x >= -42;\nloop invariant i48: n >= x ==> x >= -43;\nloop invariant i49: n >= x ==> x >= -44;\nloop invariant i50: n >= x ==> x >= -45;\nloop invariant i51: n >= x ==> x >= -46;\nloop invariant i52: n >= x ==> x >= -47;\nloop invariant i53: n >= x ==> x >= -48;\nloop invariant i54: n >= x ==> x >= -49;\nloop invariant i55: n >= x ==> x >= -50;\nloop invariant i56: n >= x ==> x >= -51;\nloop invariant i57: n >= x ==> x >= -52;\nloop invariant i58: n >= x ==> x >= -53;\nloop invariant i59: n >= x ==> x >= -54;\nloop invariant i60: n >= x ==> x >= -55;\nloop invariant i61: n >= x ==> x >= -56;\nloop invariant i62: n >= x ==> x >= -57;\nloop invariant i63: n >= x ==> x >= -58;\nloop invariant i64: n >= x ==> x >= -59;\nloop invariant i65: n >= x ==> x >= -60;\nloop invariant i66: n >= x ==> x >= -61;\nloop invariant i67: n >= x ==> x >= -62;\nloop invariant i68: n >= x ==> x >= -63;\nloop invariant i69: n >= x ==> x >= -64;\nloop invariant i70: n >= x ==> x >= -65;\nloop invariant i71: n >= x ==> x >= -66;\nloop invariant i72: n >= x ==> x >= -67;\nloop invariant i73: n >= x ==> x >= -68;\nloop invariant i74: n >= x ==> x >= -69;\nloop invariant i75: n >= x ==> x >= -70;\nloop invariant i76: n >= x ==> x >= -71;\nloop invariant i77: n >= x ==> x >= -72;\nloop invariant i78: n >= x ==> x >= -73;\nloop invariant i79: n >= x ==> x >= -74;\nloop invariant i80: n >= x ==> x >= -75;\nloop invariant i81: n >= x ==> x >= -76;\nloop invariant i82: n >= x ==> x >= -77;\nloop invariant i83: n >= x ==> x >= -78;\nloop invariant i84: n >= x ==> x >= -79;\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (n >= 0) )\n{;\n//@ assert( (x == n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x == 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant x == 0 is established but not preserved.\nAssertion x == n: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = 0);\n  \n  /*@\n\n\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (n >= 0) )\n{;\n//@ assert( (x == n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x + 1 >= n ==> x >= n;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant x + 1 >= n ==> x >= n is neither established nor preserved.\nAssertion x == n: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = 0);\n  \n  /*@\n\n\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (n >= 0) )\n{;\n//@ assert( (x == n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= n;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= x <= n is preserved but not established.\nAssertion x == n: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = 0);\n  \n  /*@\n\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (n >= 0) )\n{;\n//@ assert( (x == n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x;\nloop invariant x < n;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x is partially proven to be inductive.\nloop invariant x < n is neither established nor preserved.\nAssertion x == n: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = 0);\n  \n  /*@\nloop invariant i1: 0 <= x;\n\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (n >= 0) )\n{;\n//@ assert( (x == n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant n >= 0 ==> x == n;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant n >= 0 ==> x == n is preserved but not established.\nAssertion x == n: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = 0);\n  \n  /*@\n\n\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (n >= 0) )\n{;\n//@ assert( (x == n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x == n;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant x == n is preserved but not established.\nAssertion x == n: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = 0);\n  \n  /*@\n\n\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (n >= 0) )\n{;\n//@ assert( (x == n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x == n ==> ((x >= 0) && (x <= n));\nloop invariant x == n ==> (n >= 0);\nloop invariant x < n ==> (n >= 0);\nloop invariant x == n ==> (x == n);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant x == n ==> ((x >= 0) && (x <= n)) is partially proven to be inductive.\nloop invariant x == n ==> (n >= 0) is partially proven to be inductive.\nloop invariant x < n ==> (n >= 0) is partially proven to be inductive.\nloop invariant x == n ==> (x == n) is partially proven to be inductive.\nAssertion x == n: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = 0);\n  \n  /*@\n\nloop invariant i2: x == n ==> ((x >= 0) && (x <= n));\nloop invariant i3: x == n ==> (n >= 0);\nloop invariant i4: x < n ==> (n >= 0);\nloop invariant i5: x == n ==> (x == n);\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (n >= 0) )\n{;\n//@ assert( (x == n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nAssertion x == n: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = 0);\n  \n  /*@\n\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (n >= 0) )\n{;\n//@ assert( (x == n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant n >= 0 ==> x == n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant n >= 0 ==> x == n;\nloop invariant n >= 0 ==> x <= n;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant n >= 0 ==> x == n is preserved but not established.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant x <= n is partially proven to be inductive.\nloop invariant n >= 0 ==> x <= n is partially proven to be inductive.\nAssertion x == n: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = 0);\n  \n  /*@\n\n\nloop invariant i3: x >= 0;\n\nloop invariant i5: n >= 0 ==> x <= n;\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (n >= 0) )\n{;\n//@ assert( (x == n) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x == n;\nloop invariant (n >= 0) ==> (x == n);\nloop invariant (n >= 0) ==> (0 <= x <= n);\nloop invariant (n >= 0) ==> (x <= n);\nloop invariant (n >= 0) ==> (x >= 0);\nloop invariant (n >= 0) ==> (x == n ==> x >= 0);\nloop invariant (n >= 0) ==> (x == n ==> x <= n);\nloop invariant (n >= 0) ==> (x == n ==> x <= n) ==> (x >= 0);\nloop invariant (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n));\nloop invariant (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n);\nloop invariant (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x >= 0);\nloop invariant (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n);\nloop invariant (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n ==> x == n);\nloop invariant (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n ==> x == n ==> x >= 0);\nloop invariant (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n ==> x == n ==> x >= 0 ==> x <= n);\nloop invariant (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n);\nloop invariant (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0);\nloop invariant (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0 ==> x <= n);\nloop invariant (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n);\nloop invariant (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0);\nloop invariant (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0 ==> x <= n);\nloop invariant (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n);\nloop invariant (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0);\nloop invariant (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0 ==> x <= n);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant x == n is preserved but not established.\nloop invariant (n >= 0) ==> (x == n) is partially proven to be inductive.\nloop invariant (n >= 0) ==> (0 <= x <= n) is partially proven to be inductive.\nloop invariant (n >= 0) ==> (x <= n) is partially proven to be inductive.\nloop invariant (n >= 0) ==> (x >= 0) is partially proven to be inductive.\nloop invariant (n >= 0) ==> (x == n ==> x >= 0) is partially proven to be inductive.\nloop invariant (n >= 0) ==> (x == n ==> x <= n) is partially proven to be inductive.\nloop invariant (n >= 0) ==> (x == n ==> x <= n) ==> (x >= 0) is partially proven to be inductive.\nloop invariant (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n)) is partially proven to be inductive.\nloop invariant (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n) is partially proven to be inductive.\nloop invariant (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x >= 0) is partially proven to be inductive.\nloop invariant (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n) is partially proven to be inductive.\nloop invariant (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n ==> x == n) is partially proven to be inductive.\nloop invariant (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n ==> x == n ==> x >= 0) is partially proven to be inductive.\nloop invariant (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n ==> x == n ==> x >= 0 ==> x <= n) is partially proven to be inductive.\nloop invariant (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n) is partially proven to be inductive.\nloop invariant (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0) is partially proven to be inductive.\nloop invariant (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0 ==> x <= n) is partially proven to be inductive.\nloop invariant (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n) is partially proven to be inductive.\nloop invariant (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0) is partially proven to be inductive.\nloop invariant (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0 ==> x <= n) is partially proven to be inductive.\nloop invariant (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n) is partially proven to be inductive.\nloop invariant (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0) is partially proven to be inductive.\nloop invariant (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0 ==> x <= n) is partially proven to be inductive.\nAssertion x == n: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = 0);\n  \n  /*@\n\n\n\nloop invariant i4: (n >= 0) ==> (0 <= x <= n);\nloop invariant i5: (n >= 0) ==> (x <= n);\nloop invariant i6: (n >= 0) ==> (x >= 0);\nloop invariant i7: (n >= 0) ==> (x == n ==> x >= 0);\nloop invariant i8: (n >= 0) ==> (x == n ==> x <= n);\nloop invariant i9: (n >= 0) ==> (x == n ==> x <= n) ==> (x >= 0);\nloop invariant i10: (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n));\nloop invariant i11: (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n);\nloop invariant i12: (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x >= 0);\nloop invariant i13: (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n);\nloop invariant i14: (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n ==> x == n);\nloop invariant i15: (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n ==> x == n ==> x >= 0);\nloop invariant i16: (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n ==> x == n ==> x >= 0 ==> x <= n);\nloop invariant i17: (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n);\nloop invariant i18: (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0);\nloop invariant i19: (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0 ==> x <= n);\nloop invariant i20: (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n);\nloop invariant i21: (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0);\nloop invariant i22: (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0 ==> x <= n);\nloop invariant i23: (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n);\nloop invariant i24: (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0);\nloop invariant i25: (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0 ==> x <= n);\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (n >= 0) )\n{;\n//@ assert( (x == n) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= n <= (2^31 - 1);\nloop invariant x == n;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant 0 <= n <= (2^31 - 1) is preserved but not established.\nloop invariant x == n is preserved but not established.\nAssertion x == n: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = 0);\n  \n  /*@\n\n\n\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (n >= 0) )\n{;\n//@ assert( (x == n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant n >= 0;\nloop invariant n >= x;\nloop invariant x == n;\nloop invariant true;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 24: unbound logic variable true. Ignoring loop annotation",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = 0);\n  \n  /*@\n\n\nloop invariant i3: x >= 0;\n\n\n\n\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (n >= 0) )\n{;\n//@ assert( (x == n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x == n;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant x == n is preserved but not established.\nAssertion x == n: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = 0);\n  \n  /*@\n\n\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (n >= 0) )\n{;\n//@ assert( (x == n) );\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 143: unbound logic variable true. Ignoring loop annotation",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = 0);\n  \n  /*@\nloop invariant i1: x == (n - (n - x));\nloop invariant i2: x >= 0;\nloop invariant i3: x <= n;\nloop invariant i4: x == n;\nloop invariant i5: n >= 0;\nloop invariant i6: x == 0 ==> n >= x;\nloop invariant i7: x == n ==> n >= x;\nloop invariant i8: n >= x ==> x < n;\nloop invariant i9: n >= x ==> x >= 0;\nloop invariant i10: n >= x ==> x >= -1;\nloop invariant i11: n >= x ==> x >= -2;\nloop invariant i12: n >= x ==> x >= -3;\nloop invariant i13: n >= x ==> x >= -4;\nloop invariant i14: n >= x ==> x >= -5;\nloop invariant i15: n >= x ==> x >= -6;\nloop invariant i16: n >= x ==> x >= -7;\nloop invariant i17: n >= x ==> x >= -8;\nloop invariant i18: n >= x ==> x >= -9;\nloop invariant i19: n >= x ==> x >= -10;\nloop invariant i20: n >= x ==> x >= -11;\nloop invariant i21: n >= x ==> x >= -12;\nloop invariant i22: n >= x ==> x >= -13;\nloop invariant i23: n >= x ==> x >= -14;\nloop invariant i24: n >= x ==> x >= -15;\nloop invariant i25: n >= x ==> x >= -16;\nloop invariant i26: n >= x ==> x >= -17;\nloop invariant i27: n >= x ==> x >= -18;\nloop invariant i28: n >= x ==> x >= -19;\nloop invariant i29: n >= x ==> x >= -20;\nloop invariant i30: n >= x ==> x >= -21;\nloop invariant i31: n >= x ==> x >= -22;\nloop invariant i32: n >= x ==> x >= -23;\nloop invariant i33: n >= x ==> x >= -24;\nloop invariant i34: n >= x ==> x >= -25;\nloop invariant i35: n >= x ==> x >= -26;\nloop invariant i36: n >= x ==> x >= -27;\nloop invariant i37: n >= x ==> x >= -28;\nloop invariant i38: n >= x ==> x >= -29;\nloop invariant i39: n >= x ==> x >= -30;\nloop invariant i40: n >= x ==> x >= -31;\nloop invariant i41: n >= x ==> x >= -32;\nloop invariant i42: n >= x ==> x >= -33;\nloop invariant i43: n >= x ==> x >= -34;\nloop invariant i44: n >= x ==> x >= -35;\nloop invariant i45: n >= x ==> x >= -36;\nloop invariant i46: n >= x ==> x >= -37;\nloop invariant i47: n >= x ==> x >= -38;\nloop invariant i48: n >= x ==> x >= -39;\nloop invariant i49: n >= x ==> x >= -40;\nloop invariant i50: n >= x ==> x >= -41;\nloop invariant i51: n >= x ==> x >= -42;\nloop invariant i52: n >= x ==> x >= -43;\nloop invariant i53: n >= x ==> x >= -44;\nloop invariant i54: n >= x ==> x >= -45;\nloop invariant i55: n >= x ==> x >= -46;\nloop invariant i56: n >= x ==> x >= -47;\nloop invariant i57: n >= x ==> x >= -48;\nloop invariant i58: n >= x ==> x >= -49;\nloop invariant i59: n >= x ==> x >= -50;\nloop invariant i60: n >= x ==> x >= -51;\nloop invariant i61: n >= x ==> x >= -52;\nloop invariant i62: n >= x ==> x >= -53;\nloop invariant i63: n >= x ==> x >= -54;\nloop invariant i64: n >= x ==> x >= -55;\nloop invariant i65: n >= x ==> x >= -56;\nloop invariant i66: n >= x ==> x >= -57;\nloop invariant i67: n >= x ==> x >= -58;\nloop invariant i68: n >= x ==> x >= -59;\nloop invariant i69: n >= x ==> x >= -60;\nloop invariant i70: n >= x ==> x >= -61;\nloop invariant i71: n >= x ==> x >= -62;\nloop invariant i72: n >= x ==> x >= -63;\nloop invariant i73: n >= x ==> x >= -64;\nloop invariant i74: n >= x ==> x >= -65;\nloop invariant i75: n >= x ==> x >= -66;\nloop invariant i76: n >= x ==> x >= -67;\nloop invariant i77: n >= x ==> x >= -68;\nloop invariant i78: n >= x ==> x >= -69;\nloop invariant i79: n >= x ==> x >= -70;\nloop invariant i80: n >= x ==> x >= -71;\nloop invariant i81: n >= x ==> x >= -72;\nloop invariant i82: n >= x ==> x >= -73;\nloop invariant i83: n >= x ==> x >= -74;\nloop invariant i84: n >= x ==> x >= -75;\nloop invariant i85: n >= x ==> x >= -76;\nloop invariant i86: n >= x ==> x >= -77;\nloop invariant i87: n >= x ==> x >= -78;\nloop invariant i88: n >= x ==> x >= -79;\nloop invariant i89: 0 <= x <= n;\nloop invariant i90: x == 0;\nloop invariant i91: x + 1 >= n ==> x >= n;\nloop invariant i92: 1 <= x <= n;\nloop invariant i93: 0 <= x;\nloop invariant i94: x < n;\nloop invariant i95: n >= 0 ==> x == n;\nloop invariant i96: x == n ==> ((x >= 0) && (x <= n));\nloop invariant i97: x == n ==> (n >= 0);\nloop invariant i98: x < n ==> (n >= 0);\nloop invariant i99: x == n ==> (x == n);\nloop invariant i100: n >= 0 ==> x <= n;\nloop invariant i101: (n >= 0) ==> (x == n);\nloop invariant i102: (n >= 0) ==> (0 <= x <= n);\nloop invariant i103: (n >= 0) ==> (x <= n);\nloop invariant i104: (n >= 0) ==> (x >= 0);\nloop invariant i105: (n >= 0) ==> (x == n ==> x >= 0);\nloop invariant i106: (n >= 0) ==> (x == n ==> x <= n);\nloop invariant i107: (n >= 0) ==> (x == n ==> x <= n) ==> (x >= 0);\nloop invariant i108: (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n));\nloop invariant i109: (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n);\nloop invariant i110: (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x >= 0);\nloop invariant i111: (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n);\nloop invariant i112: (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n ==> x == n);\nloop invariant i113: (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n ==> x == n ==> x >= 0);\nloop invariant i114: (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n ==> x == n ==> x >= 0 ==> x <= n);\nloop invariant i115: (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n);\nloop invariant i116: (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0);\nloop invariant i117: (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0 ==> x <= n);\nloop invariant i118: (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n);\nloop invariant i119: (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0);\nloop invariant i120: (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0 ==> x <= n);\nloop invariant i121: (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n);\nloop invariant i122: (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0);\nloop invariant i123: (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0 ==> x <= n);\nloop invariant i124: 0 <= n <= (2^31 - 1);\nloop invariant i125: n >= x;\nloop invariant i126: true;\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (n >= 0) )\n{;\n//@ assert( (x == n) );\n}\n\n}",
        "combined_annotation_num_solver_calls": 8,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = 0);\n  \n  /*@\nloop invariant i1: x == (n - (n - x));\nloop invariant i2: x >= 0;\n\n\n\n\nloop invariant i7: x == n ==> n >= x;\n\nloop invariant i9: n >= x ==> x >= 0;\nloop invariant i10: n >= x ==> x >= -1;\nloop invariant i11: n >= x ==> x >= -2;\nloop invariant i12: n >= x ==> x >= -3;\nloop invariant i13: n >= x ==> x >= -4;\nloop invariant i14: n >= x ==> x >= -5;\nloop invariant i15: n >= x ==> x >= -6;\nloop invariant i16: n >= x ==> x >= -7;\nloop invariant i17: n >= x ==> x >= -8;\nloop invariant i18: n >= x ==> x >= -9;\nloop invariant i19: n >= x ==> x >= -10;\nloop invariant i20: n >= x ==> x >= -11;\nloop invariant i21: n >= x ==> x >= -12;\nloop invariant i22: n >= x ==> x >= -13;\nloop invariant i23: n >= x ==> x >= -14;\nloop invariant i24: n >= x ==> x >= -15;\nloop invariant i25: n >= x ==> x >= -16;\nloop invariant i26: n >= x ==> x >= -17;\nloop invariant i27: n >= x ==> x >= -18;\nloop invariant i28: n >= x ==> x >= -19;\nloop invariant i29: n >= x ==> x >= -20;\nloop invariant i30: n >= x ==> x >= -21;\nloop invariant i31: n >= x ==> x >= -22;\nloop invariant i32: n >= x ==> x >= -23;\nloop invariant i33: n >= x ==> x >= -24;\nloop invariant i34: n >= x ==> x >= -25;\nloop invariant i35: n >= x ==> x >= -26;\nloop invariant i36: n >= x ==> x >= -27;\nloop invariant i37: n >= x ==> x >= -28;\nloop invariant i38: n >= x ==> x >= -29;\nloop invariant i39: n >= x ==> x >= -30;\nloop invariant i40: n >= x ==> x >= -31;\nloop invariant i41: n >= x ==> x >= -32;\nloop invariant i42: n >= x ==> x >= -33;\nloop invariant i43: n >= x ==> x >= -34;\nloop invariant i44: n >= x ==> x >= -35;\nloop invariant i45: n >= x ==> x >= -36;\nloop invariant i46: n >= x ==> x >= -37;\nloop invariant i47: n >= x ==> x >= -38;\nloop invariant i48: n >= x ==> x >= -39;\nloop invariant i49: n >= x ==> x >= -40;\nloop invariant i50: n >= x ==> x >= -41;\nloop invariant i51: n >= x ==> x >= -42;\nloop invariant i52: n >= x ==> x >= -43;\nloop invariant i53: n >= x ==> x >= -44;\nloop invariant i54: n >= x ==> x >= -45;\nloop invariant i55: n >= x ==> x >= -46;\nloop invariant i56: n >= x ==> x >= -47;\nloop invariant i57: n >= x ==> x >= -48;\nloop invariant i58: n >= x ==> x >= -49;\nloop invariant i59: n >= x ==> x >= -50;\nloop invariant i60: n >= x ==> x >= -51;\nloop invariant i61: n >= x ==> x >= -52;\nloop invariant i62: n >= x ==> x >= -53;\nloop invariant i63: n >= x ==> x >= -54;\nloop invariant i64: n >= x ==> x >= -55;\nloop invariant i65: n >= x ==> x >= -56;\nloop invariant i66: n >= x ==> x >= -57;\nloop invariant i67: n >= x ==> x >= -58;\nloop invariant i68: n >= x ==> x >= -59;\nloop invariant i69: n >= x ==> x >= -60;\nloop invariant i70: n >= x ==> x >= -61;\nloop invariant i71: n >= x ==> x >= -62;\nloop invariant i72: n >= x ==> x >= -63;\nloop invariant i73: n >= x ==> x >= -64;\nloop invariant i74: n >= x ==> x >= -65;\nloop invariant i75: n >= x ==> x >= -66;\nloop invariant i76: n >= x ==> x >= -67;\nloop invariant i77: n >= x ==> x >= -68;\nloop invariant i78: n >= x ==> x >= -69;\nloop invariant i79: n >= x ==> x >= -70;\nloop invariant i80: n >= x ==> x >= -71;\nloop invariant i81: n >= x ==> x >= -72;\nloop invariant i82: n >= x ==> x >= -73;\nloop invariant i83: n >= x ==> x >= -74;\nloop invariant i84: n >= x ==> x >= -75;\nloop invariant i85: n >= x ==> x >= -76;\nloop invariant i86: n >= x ==> x >= -77;\nloop invariant i87: n >= x ==> x >= -78;\nloop invariant i88: n >= x ==> x >= -79;\n\n\n\n\nloop invariant i93: 0 <= x;\n\n\nloop invariant i96: x == n ==> ((x >= 0) && (x <= n));\nloop invariant i97: x == n ==> (n >= 0);\nloop invariant i98: x < n ==> (n >= 0);\nloop invariant i99: x == n ==> (x == n);\nloop invariant i100: n >= 0 ==> x <= n;\n\nloop invariant i102: (n >= 0) ==> (0 <= x <= n);\nloop invariant i103: (n >= 0) ==> (x <= n);\nloop invariant i104: (n >= 0) ==> (x >= 0);\nloop invariant i105: (n >= 0) ==> (x == n ==> x >= 0);\nloop invariant i106: (n >= 0) ==> (x == n ==> x <= n);\nloop invariant i107: (n >= 0) ==> (x == n ==> x <= n) ==> (x >= 0);\nloop invariant i108: (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n));\nloop invariant i109: (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n);\nloop invariant i110: (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x >= 0);\nloop invariant i111: (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n);\nloop invariant i112: (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n ==> x == n);\nloop invariant i113: (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n ==> x == n ==> x >= 0);\nloop invariant i114: (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n ==> x == n ==> x >= 0 ==> x <= n);\nloop invariant i115: (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n);\nloop invariant i116: (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0);\nloop invariant i117: (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0 ==> x <= n);\nloop invariant i118: (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n);\nloop invariant i119: (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0);\nloop invariant i120: (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0 ==> x <= n);\nloop invariant i121: (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n);\nloop invariant i122: (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0);\nloop invariant i123: (n >= 0) ==> (x == n ==> (x >= 0 ==> x <= n) ==> x == n ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0 ==> x <= n ==> x == n ==> x >= 0 ==> x <= n);\n\n\n\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (n >= 0) )\n{;\n//@ assert( (x == n) );\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_nondet_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum01_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/22.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop17_VeriMAP_true.c",
            "../dataset/loop_invariants/code2inv/105.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/85.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/ex2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/42.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/diamond_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/odd.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/even.c",
            "../dataset/loop_invariants/code2inv/24.c",
            "../dataset/loop_invariants/code2inv/130.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/diamond_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/overflow_safe1.c",
            "../dataset/loop_invariants/code2inv/113.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/ddlm2013_true-unreach-call.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/MADWiFi-encode_ie_ok.c",
            "../dataset/loop_invariants/code2inv/69.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/half.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.v.c",
            "../dataset/loop_invariants/code2inv/101.c",
            "../dataset/loop_invariants/code2inv/86.c",
            "../dataset/loop_invariants/code2inv/119.c",
            "../dataset/loop_invariants/code2inv/123.c"
        ],
        "skipped": [],
        "total": 26,
        "success_count": 6,
        "failure_count": 20,
        "success_rate": 0.23076923076923078
    }
}