{
    "logs": {
        "file": "../dataset/loop_invariants/code2inv/119.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  while ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == size) );\n}\n\n}",
        "success": false,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= sn <= size;\nloop invariant i >= 1;\nloop invariant i <= size + 1;\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant sn == (size - i + 1);\nloop invariant i == (size - sn + 1);\nloop invariant sn + i == size + 1;\nloop invariant sn == i - 1;\nloop invariant i == sn + 1;\nloop invariant sn == size - i + 1;\nloop invariant i == size - sn + 1;\nloop invariant sn + i == size + 1;\nloop invariant sn == size - i + 1;\nloop invariant i == size - sn + 1;\nloop invariant sn + i == size + 1;\nloop invariant sn == size - i + 1;\nloop invariant i == size - sn + 1;\nloop invariant sn + i == size + 1;\nloop invariant sn == size - i + 1;\nloop invariant i == size - sn + 1;\nloop invariant sn + i == size + 1;\nloop invariant sn == size - i + 1;\nloop invariant i == size - sn + 1;\nloop invariant sn + i == size + 1;\nloop invariant sn == size - i + 1;\nloop invariant i == size - sn + 1;\nloop invariant sn + i == size + 1;\nloop invariant sn == size - i + 1;\nloop invariant i == size - sn + 1;\nloop invariant sn + i == size + 1;\nloop invariant sn == size - i + 1;\nloop invariant i == size - sn + 1;\nloop invariant sn + i == size + 1;\nloop invariant sn == size - i + 1;\nloop invariant i == size - sn + 1;\nloop invariant sn + i == size + 1;\nloop invariant sn == size - i + 1;\nloop invariant i == size - sn + 1;\nloop invariant sn + i == size + 1;\nloop invariant sn == size - i + 1;\nloop invariant i == size - sn + 1;\nloop invariant sn + i == size + 1;\nloop invariant sn == size - i + 1;\nloop invariant i == size - sn + 1;\nloop invariant sn + i == size + 1;\nloop invariant sn == size - i + 1;\nloop invariant i == size - sn + 1;\nloop invariant sn + i == size + 1;\nloop invariant sn == size - i + 1;\nloop invariant i == size - sn + 1;\nloop invariant sn + i == size + 1;\nloop invariant sn == size - i + 1;\nloop invariant i == size - sn + 1;\nloop invariant sn + i == size + 1;\nloop invariant sn == size - i + 1;\nloop invariant i == size - sn + 1;\nloop invariant sn + i == size + 1;\nloop invariant sn == size - i + 1;\nloop invariant i == size - sn + 1;\nloop invariant sn + i == size + 1;\nloop invariant sn == size - i + 1;\nloop invariant i == size - sn + 1;\nloop invariant sn + i == size + 1;\nloop invariant sn == size - i + 1;\nloop invariant i == size - sn + 1;\nloop invariant sn + i == size + 1;\nloop invariant sn == size - i + 1;\nloop invariant i == size - sn + 1;\nloop invariant sn + i == size + 1;\nloop invariant sn == size - i + 1;\nloop invariant i == size - sn + 1;\nloop invariant sn + i == size + 1;\nloop invariant sn == size - i + 1;\nloop invariant i == size - sn + 1;\nloop invariant sn + i == size + 1;\nloop invariant sn == size - i + 1;\nloop invariant i == size - sn + 1;\nloop invariant sn + i == size + 1;\nloop invariant sn == size - i + 1;\nloop invariant i == size - sn + 1;\nloop invariant sn + i == size + 1;\nloop invariant sn == size - i + 1;\nloop invariant i == size - sn + 1;\nloop invariant sn + i == size + 1;\nloop invariant sn == size - i + 1;\nloop invariant i == size - sn + 1;\nloop invariant sn + i == size + 1;\nloop invariant sn == size - i + 1;\nloop invariant i == size - sn + 1;\nloop invariant sn + i == size + 1;\nloop invariant sn == size - i + 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= size;\nloop invariant sn == (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant sn == size ==> i > size;\nloop invariant sn == size ==> i >= size + 1;\nloop invariant sn == size ==> i > size ==> i >= size + 1;\nloop invariant sn == size ==> i >= size + 1 ==> i > size;\nloop invariant sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1;\nloop invariant sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 ==> i >= size + 1;\nloop invariant sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1;\nloop invariant sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1;\nloop invariant sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1;\nloop invariant sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1;\nloop invariant sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1;\nloop invariant sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1;\nloop invariant sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1;\nloop invariant sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1;\nloop invariant sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1;\nloop invariant sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1;\nloop invariant sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= size + 1;\nloop invariant 0 <= sn <= size;\nloop invariant sn == i - 1;\nloop invariant 0 <= sn <= size ensures that 'sn' will always be within the valid range, which implies that the assertion (assert( (sn == size) );\nloop invariant 0 <= i <= size + 1;\nloop invariant 0 <= sn <= size;\nloop invariant sn == i - 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= size + 1;\nloop invariant 0 <= sn <= size;\nloop invariant sn == (i - 1);\nloop invariant i <= size ==> sn <= size;\nloop invariant size != 0 ==> sn != 0;\nloop invariant i <= size ==> sn <= size;\nloop invariant sn == (i - 1) ==> sn <= size;\nloop invariant sn == (i - 1) ==> sn != 0;\nloop invariant size != 0 ==> sn != 0;\nloop invariant 0 <= i <= size + 1;\nloop invariant 0 <= sn <= size;\nloop invariant sn == (i - 1);\nloop invariant i <= size ==> sn <= size;\nloop invariant size != 0 ==> sn != 0;\nloop invariant i <= size ==> sn <= size;\nloop invariant sn == (i - 1) ==> sn <= size;\nloop invariant sn == (i - 1) ==> sn != 0;\nloop invariant size != 0 ==> sn != 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= size + 1;\nloop invariant sn == (i - 1);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= size;\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant sn == i - 1;\nloop invariant sn == size - (size - i);\nloop invariant sn == size - (i - 1);\nloop invariant sn == size - (size - (size - i));\nloop invariant sn == size - (size - (i - 1));\nloop invariant sn == size - (size - (size - (size - i)));\nloop invariant sn == size - (size - (size - (i - 1)));\nloop invariant sn == size - (size - (size - (size - (size - i))));\nloop invariant sn == size - (size - (size - (size - (i - 1))));\nloop invariant sn == size - (size - (size - (size - (size - (size - i)))));\nloop invariant sn == size - (size - (size - (size - (size - (size - (i - 1))))));\nloop invariant sn == size - (size - (size - (size - (size - (size - (size - i))))));\nloop invariant sn == size - (size - (size - (size - (size - (size - (size - (i - 1)))))));\nloop invariant sn == size - (size - (size - (size - (size - (size - (size - (size - i)))))));\nloop invariant sn == size - (size - (size - (size - (size - (size - (size - (size - (i - 1))))))));\nloop invariant sn == size - (size - (size - (size - (size - (size - (size - (size - (size - i))))))));\nloop invariant sn == size - (size - (size - (size - (size - (size - (size - (size - (size - (i - 1)))))))));\nloop invariant sn == size - (size - (size - (size - (size - (size - (size - (size - (size - (size - i)))))))));\nloop invariant sn == size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (i - 1))))))))));\nloop invariant sn == size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - i))))))))));\nloop invariant sn == size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (i - 1))))))))));\nloop invariant sn == size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - i)))))))))));\nloop invariant sn == size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (i - 1))))))))))));\nloop invariant sn == size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - i)))))))))))));\nloop invariant sn == size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (i - 1))))))))))))));\nloop invariant sn == size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - i)))))))))))))));\nloop invariant sn == size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (i - 1))))))))))))))))));\nloop invariant sn == size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - i)))))))))))))))));\nloop invariant sn == size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (i - 1)))))))))))))))))));\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= size;\nloop invariant 0 <= sn <= size;\nloop invariant (sn == (i - 1));\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= size;\nloop invariant sn >= 0;\nloop invariant sn <= i;\nloop invariant i >= 1;\nloop invariant sn >= i - size;\nloop invariant sn <= i - 1;\nloop invariant i <= size + 1;\nloop invariant sn >= 0 ==> sn == size;\nloop invariant sn <= i - 1 ==> sn <= size;\nloop invariant i <= size + 1 ==> i <= size + 1 && sn <= size;\nloop invariant i >= 1 ==> i >= 1 && sn >= 0;\nloop invariant sn >= i - size ==> sn >= 0;\nloop invariant sn <= i - 1 ==> sn <= size;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= sn <= size;\nloop invariant i >= 1;\nloop invariant i <= size + 1;\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant sn == size - (size - i);\nloop invariant i == sn + 1;\nloop invariant sn == size - (size - i);\nloop invariant (i <= size) ==> (sn == size - (size - i));\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= size + 1;\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant i >= 1;\n*/\n```",
            "```\n/*@\nloop invariant ( i <= size + 1 ) ==> ( sn == 0 );\nloop invariant ( i <= size + 1 ) ==> ( i == 1 ) ==> ( sn == 0 );\nloop invariant ( i <= size + 1 ) ==> ( i > 1 ) ==> ( sn > 0 );\nloop invariant ( i <= size + 1 ) ==> ( i == size + 1 ) ==> ( sn == size );\nloop invariant ( i <= size + 1 ) ==> ( i > size ) ==> ( sn == size );\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= size;\nloop invariant sn >= i;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= sn <= size;\nloop invariant 1 <= i <= size+1;\nloop invariant sn <= size;\nloop invariant i <= size+1;\nloop invariant i <= size+1 ==> sn <= size;\nloop invariant i <= size+1 ==> sn == size;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= size + 1;\nloop invariant 0 <= sn <= size;\nloop invariant sn == i - 1;\nloop invariant i == size + 1 ==> sn == size;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= size;\nloop invariant 0 <= sn <= size;\nloop invariant sn == i - 1;\nloop invariant i == sn + 1;\nloop invariant (if (size != 0) then (sn == size) else true);\nloop invariant (if (size != 0) then (sn != 0) else true);\nloop invariant (if (size != 0) then (sn == size) else (sn == 0));\nloop invariant (if (size != 0) then (size == sn + 1) else true);\nloop invariant (if (size != 0) then (size == sn + 1) else (sn == 0));\nloop invariant (if (size != 0) then (size == sn + 1) else (sn == size));\nloop invariant (if (size != 0) then (size == sn + 1) else (sn == 0) ==> (sn == size));\nloop invariant (if (size != 0) then (size == sn + 1) else (sn == 0) ==> (sn == 0));\nloop invariant (if (size != 0) then (size == sn + 1) else (sn == 0) ==> (size == sn + 1));\nloop invariant (if (size != 0) then (size == sn + 1) else (sn == 0) ==> (sn == size) ==> (sn == 0));\nloop invariant (if (size != 0) then (size == sn + 1) else (sn == 0) ==> (sn == size) ==> (size == sn + 1));\nloop invariant (if (size != 0) then (size == sn + 1) else (sn == 0) ==> (sn == size) ==> (sn == 0) ==> (sn == size));\nloop invariant (if (size != 0) then (size == sn + 1) else (sn == 0) ==> (sn == size) ==> (sn == 0) ==> (size == sn + 1));\nloop invariant (if (size != 0) then (size == sn + 1) else (sn == 0) ==> (sn == size) ==> (sn == 0) ==> (sn == size) ==> (sn == 0));\nloop invariant (if (size != 0) then (size == sn + 1) else (sn == 0) ==> (sn == size) ==> (sn == 0) ==> (size == sn + 1) ==> (sn == size));\nloop invariant (if (size != 0) then (size == sn + 1) else (sn == 0) ==> (sn == size) ==> (sn == 0) ==> (sn == size) ==> (size == sn + 1) ==> (sn == 0));\nloop invariant (if (size != 0) then (size == sn + 1) else (sn == 0) ==> (sn == size) ==> (sn == 0) ==> (sn == size) ==> (size == sn + 1) ==> (sn == size) ==> (sn == 0));\nloop invariant (if (size != 0) then (size == sn + 1) else (sn == 0) ==> (sn == size) ==> (sn == 0) ==> (sn == size) ==> (size == sn + 1) ==> (sn == size) ==> (size == sn + 1));\nloop invariant (if (size != 0) then (size == sn + 1) else (sn == 0) ==> (sn == size) ==> (sn == 0) ==> (sn == size) ==> (size == sn + 1) ==> (sn == size) ==> (sn == 0) ==> (sn == size));\nloop invariant (if (size != 0) then (size == sn + 1) else (sn == 0) ==> (sn == size) ==> (sn == 0) ==> (sn == size) ==> (size == sn + 1) ==> (sn == size) ==> (size == sn + 1) ==> (sn == 0));\nloop invariant (if (size != 0) then (size == sn + 1) else (sn == 0) ==> (sn == size) ==> (sn == 0) ==> (sn == size) ==> (size == sn + 1) ==> (sn == size) ==> (sn == 0) ==> (sn == size) ==> (sn == 0));\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant 0 <= sn <= size;\nloop invariant i >= 1;\nloop invariant i <= size + 1;\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant sn == (size - i + 1);\nloop invariant i == (size - sn + 1);\nloop invariant sn + i == size + 1;\nloop invariant sn == i - 1;\nloop invariant i == sn + 1;\nloop invariant sn == size - i + 1;\nloop invariant i == size - sn + 1;\nloop invariant sn + i == size + 1;\nloop invariant sn == size - i + 1;\nloop invariant i == size - sn + 1;\nloop invariant sn + i == size + 1;\nloop invariant sn == size - i + 1;\nloop invariant i == size - sn + 1;\nloop invariant sn + i == size + 1;\nloop invariant sn == size - i + 1;\nloop invariant i == size - sn + 1;\nloop invariant sn + i == size + 1;\nloop invariant sn == size - i + 1;\nloop invariant i == size - sn + 1;\nloop invariant sn + i == size + 1;\nloop invariant sn == size - i + 1;\nloop invariant i == size - sn + 1;\nloop invariant sn + i == size + 1;\nloop invariant sn == size - i + 1;\nloop invariant i == size - sn + 1;\nloop invariant sn + i == size + 1;\nloop invariant sn == size - i + 1;\nloop invariant i == size - sn + 1;\nloop invariant sn + i == size + 1;\nloop invariant sn == size - i + 1;\nloop invariant i == size - sn + 1;\nloop invariant sn + i == size + 1;\nloop invariant sn == size - i + 1;\nloop invariant i == size - sn + 1;\nloop invariant sn + i == size + 1;\nloop invariant sn == size - i + 1;\nloop invariant i == size - sn + 1;\nloop invariant sn + i == size + 1;\nloop invariant sn == size - i + 1;\nloop invariant i == size - sn + 1;\nloop invariant sn + i == size + 1;\nloop invariant sn == size - i + 1;\nloop invariant i == size - sn + 1;\nloop invariant sn + i == size + 1;\nloop invariant sn == size - i + 1;\nloop invariant i == size - sn + 1;\nloop invariant sn + i == size + 1;\nloop invariant sn == size - i + 1;\nloop invariant i == size - sn + 1;\nloop invariant sn + i == size + 1;\nloop invariant sn == size - i + 1;\nloop invariant i == size - sn + 1;\nloop invariant sn + i == size + 1;\nloop invariant sn == size - i + 1;\nloop invariant i == size - sn + 1;\nloop invariant sn + i == size + 1;\nloop invariant sn == size - i + 1;\nloop invariant i == size - sn + 1;\nloop invariant sn + i == size + 1;\nloop invariant sn == size - i + 1;\nloop invariant i == size - sn + 1;\nloop invariant sn + i == size + 1;\nloop invariant sn == size - i + 1;\nloop invariant i == size - sn + 1;\nloop invariant sn + i == size + 1;\nloop invariant sn == size - i + 1;\nloop invariant i == size - sn + 1;\nloop invariant sn + i == size + 1;\nloop invariant sn == size - i + 1;\nloop invariant i == size - sn + 1;\nloop invariant sn + i == size + 1;\nloop invariant sn == size - i + 1;\nloop invariant i == size - sn + 1;\nloop invariant sn + i == size + 1;\nloop invariant sn == size - i + 1;\nloop invariant i == size - sn + 1;\nloop invariant sn + i == size + 1;\nloop invariant sn == size - i + 1;\nloop invariant i == size - sn + 1;\nloop invariant sn + i == size + 1;\nloop invariant sn == size - i + 1;\nloop invariant i == size - sn + 1;\nloop invariant sn + i == size + 1;\nloop invariant sn == size - i + 1;\nloop invariant i == size - sn + 1;\nloop invariant sn + i == size + 1;\nloop invariant sn == size - i + 1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= sn <= size is preserved but not established.\nloop invariant i >= 1 is partially proven to be inductive.\nloop invariant i <= size + 1 is partially proven to be inductive.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn <= size is partially proven to be inductive.\nloop invariant sn == (size - i + 1) is neither established nor preserved.\nloop invariant i == (size - sn + 1) is partially proven to be inductive.\nloop invariant sn + i == size + 1 is partially proven to be inductive.\nloop invariant sn == i - 1 is partially proven to be inductive.\nloop invariant i == sn + 1 is partially proven to be inductive.\nloop invariant sn == size - i + 1 is partially proven to be inductive.\nloop invariant i == size - sn + 1 is partially proven to be inductive.\nAssertion sn == size: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\nloop invariant i2: i >= 1;\n\nloop invariant i4: sn >= 0;\n\n\n\n\nloop invariant i9: sn == i - 1;\nloop invariant i10: i == sn + 1;\n\n\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == size) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= size;\nloop invariant sn == (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant sn == size ==> i > size;\nloop invariant sn == size ==> i >= size + 1;\nloop invariant sn == size ==> i > size ==> i >= size + 1;\nloop invariant sn == size ==> i >= size + 1 ==> i > size;\nloop invariant sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1;\nloop invariant sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 ==> i >= size + 1;\nloop invariant sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1;\nloop invariant sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1;\nloop invariant sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1;\nloop invariant sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1;\nloop invariant sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1;\nloop invariant sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1;\nloop invariant sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1;\nloop invariant sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1;\nloop invariant sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1;\nloop invariant sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1;\nloop invariant sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= size is neither established nor preserved.\nloop invariant sn == (i - 1) is partially proven to be inductive.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn <= size is partially proven to be inductive.\nloop invariant sn == size ==> i > size is partially proven to be inductive.\nloop invariant sn == size ==> i >= size + 1 is partially proven to be inductive.\nloop invariant sn == size ==> i > size ==> i >= size + 1 is partially proven to be inductive.\nloop invariant sn == size ==> i >= size + 1 ==> i > size is partially proven to be inductive.\nloop invariant sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 is partially proven to be inductive.\nloop invariant sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 ==> i >= size + 1 is partially proven to be inductive.\nloop invariant sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 is partially proven to be inductive.\nloop invariant sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 is partially proven to be inductive.\nloop invariant sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 is partially proven to be inductive.\nloop invariant sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 is partially proven to be inductive.\nloop invariant sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 is partially proven to be inductive.\nloop invariant sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 is partially proven to be inductive.\nloop invariant sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 is partially proven to be inductive.\nloop invariant sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 is partially proven to be inductive.\nloop invariant sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 is partially proven to be inductive.\nloop invariant sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 is partially proven to be inductive.\nloop invariant sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 is partially proven to be inductive.\nAssertion sn == size: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\nloop invariant i2: sn == (i - 1);\nloop invariant i3: sn >= 0;\n\nloop invariant i5: sn == size ==> i > size;\nloop invariant i6: sn == size ==> i >= size + 1;\nloop invariant i7: sn == size ==> i > size ==> i >= size + 1;\nloop invariant i8: sn == size ==> i >= size + 1 ==> i > size;\nloop invariant i9: sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1;\nloop invariant i10: sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 ==> i >= size + 1;\nloop invariant i11: sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1;\nloop invariant i12: sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1;\nloop invariant i13: sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1;\nloop invariant i14: sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1;\nloop invariant i15: sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1;\nloop invariant i16: sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1;\nloop invariant i17: sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1;\nloop invariant i18: sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1;\nloop invariant i19: sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1;\nloop invariant i20: sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1;\nloop invariant i21: sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1;\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == size) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= size + 1;\nloop invariant 0 <= sn <= size;\nloop invariant sn == i - 1;\nloop invariant 0 <= sn <= size ensures that 'sn' will always be within the valid range, which implies that the assertion (assert( (sn == size) );\nloop invariant 0 <= i <= size + 1;\nloop invariant 0 <= sn <= size;\nloop invariant sn == i - 1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 20: unexpected token 'ensures'",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: sn == i - 1;\n\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == size) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= size + 1;\nloop invariant 0 <= sn <= size;\nloop invariant sn == (i - 1);\nloop invariant i <= size ==> sn <= size;\nloop invariant size != 0 ==> sn != 0;\nloop invariant i <= size ==> sn <= size;\nloop invariant sn == (i - 1) ==> sn <= size;\nloop invariant sn == (i - 1) ==> sn != 0;\nloop invariant size != 0 ==> sn != 0;\nloop invariant 0 <= i <= size + 1;\nloop invariant 0 <= sn <= size;\nloop invariant sn == (i - 1);\nloop invariant i <= size ==> sn <= size;\nloop invariant size != 0 ==> sn != 0;\nloop invariant i <= size ==> sn <= size;\nloop invariant sn == (i - 1) ==> sn <= size;\nloop invariant sn == (i - 1) ==> sn != 0;\nloop invariant size != 0 ==> sn != 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= size + 1 is preserved but not established.\nloop invariant 0 <= sn <= size is partially proven to be inductive.\nloop invariant sn == (i - 1) is partially proven to be inductive.\nloop invariant i <= size ==> sn <= size is partially proven to be inductive.\nloop invariant size != 0 ==> sn != 0 is preserved but not established.\nloop invariant sn == (i - 1) ==> sn <= size is partially proven to be inductive.\nloop invariant sn == (i - 1) ==> sn != 0 is preserved but not established.\nAssertion sn == size: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: sn == (i - 1);\nloop invariant i4: i <= size ==> sn <= size;\n\n\n\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == size) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= size + 1;\nloop invariant sn == (i - 1);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= size + 1 is preserved but not established.\nloop invariant sn == (i - 1) is partially proven to be inductive.\nAssertion sn == size: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\nloop invariant i2: sn == (i - 1);\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == size) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 19,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= size;\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant sn == i - 1;\nloop invariant sn == size - (size - i);\nloop invariant sn == size - (i - 1);\nloop invariant sn == size - (size - (size - i));\nloop invariant sn == size - (size - (i - 1));\nloop invariant sn == size - (size - (size - (size - i)));\nloop invariant sn == size - (size - (size - (i - 1)));\nloop invariant sn == size - (size - (size - (size - (size - i))));\nloop invariant sn == size - (size - (size - (size - (i - 1))));\nloop invariant sn == size - (size - (size - (size - (size - (size - i)))));\nloop invariant sn == size - (size - (size - (size - (size - (size - (i - 1))))));\nloop invariant sn == size - (size - (size - (size - (size - (size - (size - i))))));\nloop invariant sn == size - (size - (size - (size - (size - (size - (size - (i - 1)))))));\nloop invariant sn == size - (size - (size - (size - (size - (size - (size - (size - i)))))));\nloop invariant sn == size - (size - (size - (size - (size - (size - (size - (size - (i - 1))))))));\nloop invariant sn == size - (size - (size - (size - (size - (size - (size - (size - (size - i))))))));\nloop invariant sn == size - (size - (size - (size - (size - (size - (size - (size - (size - (i - 1)))))))));\nloop invariant sn == size - (size - (size - (size - (size - (size - (size - (size - (size - (size - i)))))))));\nloop invariant sn == size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (i - 1))))))))));\nloop invariant sn == size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - i))))))))));\nloop invariant sn == size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (i - 1))))))))));\nloop invariant sn == size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - i)))))))))));\nloop invariant sn == size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (i - 1))))))))))));\nloop invariant sn == size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - i)))))))))))));\nloop invariant sn == size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (i - 1))))))))))))));\nloop invariant sn == size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - i)))))))))))))));\nloop invariant sn == size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (i - 1))))))))))))))))));\nloop invariant sn == size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - i)))))))))))))))));\nloop invariant sn == size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (i - 1)))))))))))))))))));\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 40: unexpected token ';'",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\nloop invariant i2: sn >= 0;\n\nloop invariant i4: sn == i - 1;\n\n\n\nloop invariant i8: sn == size - (size - (i - 1));\n\n\n\nloop invariant i12: sn == size - (size - (size - (size - (i - 1))));\n\nloop invariant i14: sn == size - (size - (size - (size - (size - (size - (i - 1))))));\n\n\n\nloop invariant i18: sn == size - (size - (size - (size - (size - (size - (size - (size - (i - 1))))))));\n\n\n\nloop invariant i22: sn == size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (i - 1))))))))));\n\n\n\nloop invariant i26: sn == size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (i - 1))))))))))));\n\n\n\n\n\n\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == size) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= size;\nloop invariant 0 <= sn <= size;\nloop invariant (sn == (i - 1));\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= size is neither established nor preserved.\nloop invariant 0 <= sn <= size is partially proven to be inductive.\nloop invariant (sn == (i - 1)) is partially proven to be inductive.\nAssertion sn == size: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: (sn == (i - 1));\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == size) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= size;\nloop invariant sn >= 0;\nloop invariant sn <= i;\nloop invariant i >= 1;\nloop invariant sn >= i - size;\nloop invariant sn <= i - 1;\nloop invariant i <= size + 1;\nloop invariant sn >= 0 ==> sn == size;\nloop invariant sn <= i - 1 ==> sn <= size;\nloop invariant i <= size + 1 ==> i <= size + 1 && sn <= size;\nloop invariant i >= 1 ==> i >= 1 && sn >= 0;\nloop invariant sn >= i - size ==> sn >= 0;\nloop invariant sn <= i - 1 ==> sn <= size;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= size is preserved but not established.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn <= i is partially proven to be inductive.\nloop invariant i >= 1 is partially proven to be inductive.\nloop invariant sn >= i - size is partially proven to be inductive.\nloop invariant sn <= i - 1 is partially proven to be inductive.\nloop invariant i <= size + 1 is partially proven to be inductive.\nloop invariant sn >= 0 ==> sn == size is preserved but not established.\nloop invariant sn <= i - 1 ==> sn <= size is partially proven to be inductive.\nloop invariant i <= size + 1 ==> i <= size + 1 && sn <= size is partially proven to be inductive.\nloop invariant i >= 1 ==> i >= 1 && sn >= 0 is partially proven to be inductive.\nloop invariant sn >= i - size ==> sn >= 0 is partially proven to be inductive.\nAssertion sn == size: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\nloop invariant i2: sn >= 0;\nloop invariant i3: sn <= i;\nloop invariant i4: i >= 1;\n\nloop invariant i6: sn <= i - 1;\n\n\n\nloop invariant i10: i <= size + 1 ==> i <= size + 1 && sn <= size;\nloop invariant i11: i >= 1 ==> i >= 1 && sn >= 0;\nloop invariant i12: sn >= i - size ==> sn >= 0;\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == size) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= sn <= size;\nloop invariant i >= 1;\nloop invariant i <= size + 1;\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant sn == size - (size - i);\nloop invariant i == sn + 1;\nloop invariant sn == size - (size - i);\nloop invariant (i <= size) ==> (sn == size - (size - i));\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= sn <= size is preserved but not established.\nloop invariant i >= 1 is partially proven to be inductive.\nloop invariant i <= size + 1 is partially proven to be inductive.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn <= size is partially proven to be inductive.\nloop invariant sn == size - (size - i) is preserved but not established.\nloop invariant i == sn + 1 is partially proven to be inductive.\nloop invariant (i <= size) ==> (sn == size - (size - i)) is partially proven to be inductive.\nAssertion sn == size: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\nloop invariant i2: i >= 1;\n\nloop invariant i4: sn >= 0;\n\n\nloop invariant i7: i == sn + 1;\n\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == size) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= size + 1;\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant i >= 1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= size + 1 is preserved but not established.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn <= size is established but not preserved.\nloop invariant i >= 1 is partially proven to be inductive.\nAssertion sn == size: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\nloop invariant i2: sn >= 0;\n\nloop invariant i4: i >= 1;\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == size) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant ( i <= size + 1 ) ==> ( sn == 0 );\nloop invariant ( i <= size + 1 ) ==> ( i == 1 ) ==> ( sn == 0 );\nloop invariant ( i <= size + 1 ) ==> ( i > 1 ) ==> ( sn > 0 );\nloop invariant ( i <= size + 1 ) ==> ( i == size + 1 ) ==> ( sn == size );\nloop invariant ( i <= size + 1 ) ==> ( i > size ) ==> ( sn == size );\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant ( i <= size + 1 ) ==> ( sn == 0 ) is established but not preserved.\nloop invariant ( i <= size + 1 ) ==> ( i == 1 ) ==> ( sn == 0 ) is partially proven to be inductive.\nloop invariant ( i <= size + 1 ) ==> ( i > 1 ) ==> ( sn > 0 ) is partially proven to be inductive.\nloop invariant ( i <= size + 1 ) ==> ( i == size + 1 ) ==> ( sn == size ) is partially proven to be inductive.\nloop invariant ( i <= size + 1 ) ==> ( i > size ) ==> ( sn == size ) is partially proven to be inductive.\nAssertion sn == size: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\n\n\n\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == size) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= size;\nloop invariant sn >= i;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= size is preserved but not established.\nloop invariant sn >= i is preserved but not established.\nAssertion sn == size: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == size) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 1 <= sn <= size;\nloop invariant 1 <= i <= size+1;\nloop invariant sn <= size;\nloop invariant i <= size+1;\nloop invariant i <= size+1 ==> sn <= size;\nloop invariant i <= size+1 ==> sn == size;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= sn <= size is preserved but not established.\nloop invariant 1 <= i <= size+1 is partially proven to be inductive.\nloop invariant sn <= size is partially proven to be inductive.\nloop invariant i <= size+1 is partially proven to be inductive.\nloop invariant i <= size+1 ==> sn <= size is partially proven to be inductive.\nloop invariant i <= size+1 ==> sn == size is partially proven to be inductive.\nAssertion sn == size: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\n\n\n\n\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == size) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= size + 1;\nloop invariant 0 <= sn <= size;\nloop invariant sn == i - 1;\nloop invariant i == size + 1 ==> sn == size;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= size + 1 is preserved but not established.\nloop invariant 0 <= sn <= size is partially proven to be inductive.\nloop invariant sn == i - 1 is partially proven to be inductive.\nloop invariant i == size + 1 ==> sn == size is partially proven to be inductive.\nAssertion sn == size: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: sn == i - 1;\nloop invariant i4: i == size + 1 ==> sn == size;\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == size) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 25,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= size;\nloop invariant 0 <= sn <= size;\nloop invariant sn == i - 1;\nloop invariant i == sn + 1;\nloop invariant (if (size != 0) then (sn == size) else true);\nloop invariant (if (size != 0) then (sn != 0) else true);\nloop invariant (if (size != 0) then (sn == size) else (sn == 0));\nloop invariant (if (size != 0) then (size == sn + 1) else true);\nloop invariant (if (size != 0) then (size == sn + 1) else (sn == 0));\nloop invariant (if (size != 0) then (size == sn + 1) else (sn == size));\nloop invariant (if (size != 0) then (size == sn + 1) else (sn == 0) ==> (sn == size));\nloop invariant (if (size != 0) then (size == sn + 1) else (sn == 0) ==> (sn == 0));\nloop invariant (if (size != 0) then (size == sn + 1) else (sn == 0) ==> (size == sn + 1));\nloop invariant (if (size != 0) then (size == sn + 1) else (sn == 0) ==> (sn == size) ==> (sn == 0));\nloop invariant (if (size != 0) then (size == sn + 1) else (sn == 0) ==> (sn == size) ==> (size == sn + 1));\nloop invariant (if (size != 0) then (size == sn + 1) else (sn == 0) ==> (sn == size) ==> (sn == 0) ==> (sn == size));\nloop invariant (if (size != 0) then (size == sn + 1) else (sn == 0) ==> (sn == size) ==> (sn == 0) ==> (size == sn + 1));\nloop invariant (if (size != 0) then (size == sn + 1) else (sn == 0) ==> (sn == size) ==> (sn == 0) ==> (sn == size) ==> (sn == 0));\nloop invariant (if (size != 0) then (size == sn + 1) else (sn == 0) ==> (sn == size) ==> (sn == 0) ==> (size == sn + 1) ==> (sn == size));\nloop invariant (if (size != 0) then (size == sn + 1) else (sn == 0) ==> (sn == size) ==> (sn == 0) ==> (sn == size) ==> (size == sn + 1) ==> (sn == 0));\nloop invariant (if (size != 0) then (size == sn + 1) else (sn == 0) ==> (sn == size) ==> (sn == 0) ==> (sn == size) ==> (size == sn + 1) ==> (sn == size) ==> (sn == 0));\nloop invariant (if (size != 0) then (size == sn + 1) else (sn == 0) ==> (sn == size) ==> (sn == 0) ==> (sn == size) ==> (size == sn + 1) ==> (sn == size) ==> (size == sn + 1));\nloop invariant (if (size != 0) then (size == sn + 1) else (sn == 0) ==> (sn == size) ==> (sn == 0) ==> (sn == size) ==> (size == sn + 1) ==> (sn == size) ==> (sn == 0) ==> (sn == size));\nloop invariant (if (size != 0) then (size == sn + 1) else (sn == 0) ==> (sn == size) ==> (sn == 0) ==> (sn == size) ==> (size == sn + 1) ==> (sn == size) ==> (size == sn + 1) ==> (sn == 0));\nloop invariant (if (size != 0) then (size == sn + 1) else (sn == 0) ==> (sn == size) ==> (sn == 0) ==> (sn == size) ==> (size == sn + 1) ==> (sn == size) ==> (sn == 0) ==> (sn == size) ==> (sn == 0));\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 21: unexpected token '('",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: sn == i - 1;\nloop invariant i4: i == sn + 1;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == size) );\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 49: unexpected token 'ensures'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\nloop invariant i1: 0 <= sn <= size;\nloop invariant i2: i >= 1;\nloop invariant i3: i <= size + 1;\nloop invariant i4: sn >= 0;\nloop invariant i5: sn <= size;\nloop invariant i6: sn == (size - i + 1);\nloop invariant i7: i == (size - sn + 1);\nloop invariant i8: sn + i == size + 1;\nloop invariant i9: sn == i - 1;\nloop invariant i10: i == sn + 1;\nloop invariant i11: sn == size - i + 1;\nloop invariant i12: i == size - sn + 1;\nloop invariant i13: 0 <= i <= size;\nloop invariant i14: sn == (i - 1);\nloop invariant i15: sn == size ==> i > size;\nloop invariant i16: sn == size ==> i >= size + 1;\nloop invariant i17: sn == size ==> i > size ==> i >= size + 1;\nloop invariant i18: sn == size ==> i >= size + 1 ==> i > size;\nloop invariant i19: sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1;\nloop invariant i20: sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 ==> i >= size + 1;\nloop invariant i21: sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1;\nloop invariant i22: sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1;\nloop invariant i23: sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1;\nloop invariant i24: sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1;\nloop invariant i25: sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1;\nloop invariant i26: sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1;\nloop invariant i27: sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1;\nloop invariant i28: sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1;\nloop invariant i29: sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1;\nloop invariant i30: sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1;\nloop invariant i31: sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1;\nloop invariant i32: 0 <= i <= size + 1;\nloop invariant i33: 0 <= sn <= size ensures that 'sn' will always be within the valid range, which implies that the assertion (assert( (sn == size) );\nloop invariant i34: i <= size ==> sn <= size;\nloop invariant i35: size != 0 ==> sn != 0;\nloop invariant i36: sn == (i - 1) ==> sn <= size;\nloop invariant i37: sn == (i - 1) ==> sn != 0;\nloop invariant i38: sn == size - (size - i);\nloop invariant i39: sn == size - (i - 1);\nloop invariant i40: sn == size - (size - (size - i));\nloop invariant i41: sn == size - (size - (i - 1));\nloop invariant i42: sn == size - (size - (size - (size - i)));\nloop invariant i43: sn == size - (size - (size - (i - 1)));\nloop invariant i44: sn == size - (size - (size - (size - (size - i))));\nloop invariant i45: sn == size - (size - (size - (size - (i - 1))));\nloop invariant i46: sn == size - (size - (size - (size - (size - (size - i)))));\nloop invariant i47: sn == size - (size - (size - (size - (size - (size - (i - 1))))));\nloop invariant i48: sn == size - (size - (size - (size - (size - (size - (size - i))))));\nloop invariant i49: sn == size - (size - (size - (size - (size - (size - (size - (i - 1)))))));\nloop invariant i50: sn == size - (size - (size - (size - (size - (size - (size - (size - i)))))));\nloop invariant i51: sn == size - (size - (size - (size - (size - (size - (size - (size - (i - 1))))))));\nloop invariant i52: sn == size - (size - (size - (size - (size - (size - (size - (size - (size - i))))))));\nloop invariant i53: sn == size - (size - (size - (size - (size - (size - (size - (size - (size - (i - 1)))))))));\nloop invariant i54: sn == size - (size - (size - (size - (size - (size - (size - (size - (size - (size - i)))))))));\nloop invariant i55: sn == size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (i - 1))))))))));\nloop invariant i56: sn == size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - i))))))))));\nloop invariant i57: sn == size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (i - 1))))))))));\nloop invariant i58: sn == size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - i)))))))))));\nloop invariant i59: sn == size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (i - 1))))))))))));\nloop invariant i60: sn == size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - i)))))))))))));\nloop invariant i61: sn == size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (i - 1))))))))))))));\nloop invariant i62: sn == size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - i)))))))))))))));\nloop invariant i63: sn == size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (i - 1))))))))))))))))));\nloop invariant i64: sn == size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - i)))))))))))))))));\nloop invariant i65: sn == size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (i - 1)))))))))))))))))));\nloop invariant i66: (sn == (i - 1));\nloop invariant i67: sn <= i;\nloop invariant i68: sn >= i - size;\nloop invariant i69: sn <= i - 1;\nloop invariant i70: sn >= 0 ==> sn == size;\nloop invariant i71: sn <= i - 1 ==> sn <= size;\nloop invariant i72: i <= size + 1 ==> i <= size + 1 && sn <= size;\nloop invariant i73: i >= 1 ==> i >= 1 && sn >= 0;\nloop invariant i74: sn >= i - size ==> sn >= 0;\nloop invariant i75: (i <= size) ==> (sn == size - (size - i));\nloop invariant i76: ( i <= size + 1 ) ==> ( sn == 0 );\nloop invariant i77: ( i <= size + 1 ) ==> ( i == 1 ) ==> ( sn == 0 );\nloop invariant i78: ( i <= size + 1 ) ==> ( i > 1 ) ==> ( sn > 0 );\nloop invariant i79: ( i <= size + 1 ) ==> ( i == size + 1 ) ==> ( sn == size );\nloop invariant i80: ( i <= size + 1 ) ==> ( i > size ) ==> ( sn == size );\nloop invariant i81: sn >= i;\nloop invariant i82: 1 <= sn <= size;\nloop invariant i83: 1 <= i <= size+1;\nloop invariant i84: i <= size+1;\nloop invariant i85: i <= size+1 ==> sn <= size;\nloop invariant i86: i <= size+1 ==> sn == size;\nloop invariant i87: i == size + 1 ==> sn == size;\nloop invariant i88: (if (size != 0) then (sn == size) else true);\nloop invariant i89: (if (size != 0) then (sn != 0) else true);\nloop invariant i90: (if (size != 0) then (sn == size) else (sn == 0));\nloop invariant i91: (if (size != 0) then (size == sn + 1) else true);\nloop invariant i92: (if (size != 0) then (size == sn + 1) else (sn == 0));\nloop invariant i93: (if (size != 0) then (size == sn + 1) else (sn == size));\nloop invariant i94: (if (size != 0) then (size == sn + 1) else (sn == 0) ==> (sn == size));\nloop invariant i95: (if (size != 0) then (size == sn + 1) else (sn == 0) ==> (sn == 0));\nloop invariant i96: (if (size != 0) then (size == sn + 1) else (sn == 0) ==> (size == sn + 1));\nloop invariant i97: (if (size != 0) then (size == sn + 1) else (sn == 0) ==> (sn == size) ==> (sn == 0));\nloop invariant i98: (if (size != 0) then (size == sn + 1) else (sn == 0) ==> (sn == size) ==> (size == sn + 1));\nloop invariant i99: (if (size != 0) then (size == sn + 1) else (sn == 0) ==> (sn == size) ==> (sn == 0) ==> (sn == size));\nloop invariant i100: (if (size != 0) then (size == sn + 1) else (sn == 0) ==> (sn == size) ==> (sn == 0) ==> (size == sn + 1));\nloop invariant i101: (if (size != 0) then (size == sn + 1) else (sn == 0) ==> (sn == size) ==> (sn == 0) ==> (sn == size) ==> (sn == 0));\nloop invariant i102: (if (size != 0) then (size == sn + 1) else (sn == 0) ==> (sn == size) ==> (sn == 0) ==> (size == sn + 1) ==> (sn == size));\nloop invariant i103: (if (size != 0) then (size == sn + 1) else (sn == 0) ==> (sn == size) ==> (sn == 0) ==> (sn == size) ==> (size == sn + 1) ==> (sn == 0));\nloop invariant i104: (if (size != 0) then (size == sn + 1) else (sn == 0) ==> (sn == size) ==> (sn == 0) ==> (sn == size) ==> (size == sn + 1) ==> (sn == size) ==> (sn == 0));\nloop invariant i105: (if (size != 0) then (size == sn + 1) else (sn == 0) ==> (sn == size) ==> (sn == 0) ==> (sn == size) ==> (size == sn + 1) ==> (sn == size) ==> (size == sn + 1));\nloop invariant i106: (if (size != 0) then (size == sn + 1) else (sn == 0) ==> (sn == size) ==> (sn == 0) ==> (sn == size) ==> (size == sn + 1) ==> (sn == size) ==> (sn == 0) ==> (sn == size));\nloop invariant i107: (if (size != 0) then (size == sn + 1) else (sn == 0) ==> (sn == size) ==> (sn == 0) ==> (sn == size) ==> (size == sn + 1) ==> (sn == size) ==> (size == sn + 1) ==> (sn == 0));\nloop invariant i108: (if (size != 0) then (size == sn + 1) else (sn == 0) ==> (sn == size) ==> (sn == 0) ==> (sn == size) ==> (size == sn + 1) ==> (sn == size) ==> (sn == 0) ==> (sn == size) ==> (sn == 0));\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == size) );\n}\n\n}",
        "combined_annotation_num_solver_calls": 48,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\nloop invariant i2: i >= 1;\n\nloop invariant i4: sn >= 0;\n\n\n\n\nloop invariant i9: sn == i - 1;\nloop invariant i10: i == sn + 1;\n\n\n\nloop invariant i14: sn == (i - 1);\nloop invariant i15: sn == size ==> i > size;\nloop invariant i16: sn == size ==> i >= size + 1;\nloop invariant i17: sn == size ==> i > size ==> i >= size + 1;\nloop invariant i18: sn == size ==> i >= size + 1 ==> i > size;\nloop invariant i19: sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1;\nloop invariant i20: sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 ==> i >= size + 1;\nloop invariant i21: sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1;\nloop invariant i22: sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1;\nloop invariant i23: sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1;\nloop invariant i24: sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1;\nloop invariant i25: sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1;\nloop invariant i26: sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1;\nloop invariant i27: sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1;\nloop invariant i28: sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1;\nloop invariant i29: sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1;\nloop invariant i30: sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1;\nloop invariant i31: sn == size ==> i >= size + 1 ==> i > size ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1 ==> i >= size + 1;\n\n\nloop invariant i34: i <= size ==> sn <= size;\n\n\n\n\n\n\nloop invariant i41: sn == size - (size - (i - 1));\n\n\n\nloop invariant i45: sn == size - (size - (size - (size - (i - 1))));\n\nloop invariant i47: sn == size - (size - (size - (size - (size - (size - (i - 1))))));\n\n\n\nloop invariant i51: sn == size - (size - (size - (size - (size - (size - (size - (size - (i - 1))))))));\n\n\n\nloop invariant i55: sn == size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (i - 1))))))))));\n\n\n\nloop invariant i59: sn == size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (size - (i - 1))))))))))));\n\n\n\n\n\n\nloop invariant i66: (sn == (i - 1));\nloop invariant i67: sn <= i;\n\nloop invariant i69: sn <= i - 1;\n\n\nloop invariant i72: i <= size + 1 ==> i <= size + 1 && sn <= size;\nloop invariant i73: i >= 1 ==> i >= 1 && sn >= 0;\nloop invariant i74: sn >= i - size ==> sn >= 0;\n\n\nloop invariant i77: ( i <= size + 1 ) ==> ( i == 1 ) ==> ( sn == 0 );\nloop invariant i78: ( i <= size + 1 ) ==> ( i > 1 ) ==> ( sn > 0 );\nloop invariant i79: ( i <= size + 1 ) ==> ( i == size + 1 ) ==> ( sn == size );\nloop invariant i80: ( i <= size + 1 ) ==> ( i > size ) ==> ( sn == size );\n\n\n\n\nloop invariant i85: i <= size+1 ==> sn <= size;\n\nloop invariant i87: i == size + 1 ==> sn == size;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == size) );\n}\n\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_nondet_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum01_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/22.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/85.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/ex2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/42.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/diamond_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/odd.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/even.c",
            "../dataset/loop_invariants/code2inv/24.c",
            "../dataset/loop_invariants/code2inv/130.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/diamond_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/overflow_safe1.c",
            "../dataset/loop_invariants/code2inv/113.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/ddlm2013_true-unreach-call.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/MADWiFi-encode_ie_ok.c",
            "../dataset/loop_invariants/code2inv/69.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/half.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.v.c",
            "../dataset/loop_invariants/code2inv/101.c",
            "../dataset/loop_invariants/code2inv/86.c",
            "../dataset/loop_invariants/code2inv/119.c"
        ],
        "skipped": [],
        "total": 23,
        "success_count": 4,
        "failure_count": 19,
        "success_rate": 0.17391304347826086
    }
}