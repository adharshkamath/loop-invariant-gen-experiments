{
    "logs": {
        "file": "../dataset/loop_invariants/code2inv/130.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int d1 = 1;\n    int d2 = 1;\n    int d3 = 1;\n    int x1 = 1;\n    int x2,x3;\n\n    while( x1 > 0) {\n        if(x2 > 0) {\n            if(x3 > 0) {\n                x1 = x1 - d1;\n                x2 = x2 - d2;\n                x3 = x3 - d3;\n            }\n        }\n    }\n\n    {;\n//@ assert(x2 >= 0);\n}\n\n}",
        "success": false,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= x2 <= 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= d1 <= 100000;\nloop invariant 0 <= d2 <= 100000;\nloop invariant 0 <= d3 <= 100000;\nloop invariant 0 <= x1 <= 100000;\nloop invariant 0 <= x2 <= 100000;\nloop invariant 0 <= x3 <= 100000;\nloop invariant d1 >= 0;\nloop invariant d2 >= 0;\nloop invariant d3 >= 0;\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2;\nloop invariant x1 >= x3;\nloop invariant x2 >= x3;\nloop invariant x1 >= d1;\nloop invariant x2 >= d2;\nloop invariant x3 >= d3;\nloop invariant x1 >= d1 * x2 + d2 * x3;\nloop invariant x2 >= d2 * x3;\nloop invariant x3 >= d3 * x3;\nloop invariant x1 >= d1 * x2 + d2 * x3 + d3 * x3;\nloop invariant x2 >= d2 * x3 + d3 * x3;\nloop invariant x3 >= d3 * x3;\nloop invariant x1 >= d1 * x2 + d2 * x3 + d3 * x3 + d3 * x3;\nloop invariant x2 >= d2 * x3 + d3 * x3 + d3 * x3;\nloop invariant x3 >= d3 * x3 + d3 * x3;\nloop invariant x1 >= d1 * x2 + d2 * x3 + d3 * x3 + d3 * x3 + d3 * x3;\nloop invariant x2 >= d2 * x3 + d3 * x3 + d3 * x3 + d3 * x3;\nloop invariant x3 >= d3 * x3 + d3 * x3 + d3 * x3;\nloop invariant x1 >= d1 * x2 + d2 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3;\nloop invariant x2 >= d2 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3;\nloop invariant x3 >= d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3;\nloop invariant x1 >= d1 * x2 + d2 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3;\nloop invariant x2 >= d2 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3;\nloop invariant x3 >= d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3;\nloop invariant x1 >= d1 * x2 + d2 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3;\nloop invariant x2 >= d2 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3;\nloop invariant x3 >= d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3;\nloop invariant x1 >= d1 * x2 + d2 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3;\nloop invariant x2 >= d2 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3;\nloop invariant x3 >= d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x2 <= 1;\nloop invariant x1 >= x2 + x3;\nloop invariant x3 >= 0;\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant d1 >= 1;\nloop invariant d2 >= 1;\nloop invariant d3 >= 1;\nloop invariant x1 >= x2 + x3;\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant d1 >= 1;\nloop invariant d2 >= 1;\nloop invariant d3 >= 1;\nloop invariant x1 >= x2 + x3;\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant d1 >= 1;\nloop invariant d2 >= 1;\nloop invariant d3 >= 1;\nloop invariant x1 >= x2 + x3;\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant d1 >= 1;\nloop invariant d2 >= 1;\nloop invariant d3 >= 1;\nloop invariant x1 >= x2 + x3;\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant d1 >= 1;\nloop invariant d2 >= 1;\nloop invariant d3 >= 1;\nloop invariant x1 >= x2 + x3;\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant d1 >= 1;\nloop invariant d2 >= 1;\nloop invariant d3 >= 1;\nloop invariant x1 >= x2 + x3;\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant d1 >= 1;\nloop invariant d2 >= 1;\nloop invariant d3 >= 1;\nloop invariant x1 >= x2 + x3;\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant d1 >= 1;\nloop invariant d2 >= 1;\nloop invariant d3 >= 1;\nloop invariant x1 >= x2 + x3;\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant d1 >= 1;\nloop invariant d2 >= 1;\nloop invariant d3 >= 1;\nloop invariant x1 >= x2 + x3;\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant d1 >= 1;\nloop invariant d2 >= 1;\nloop invariant d3 >= 1;\nloop invariant x1 >= x2 + x3;\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant d1 >= 1;\nloop invariant d2 >= 1;\nloop invariant d3 >= 1;\nloop invariant x1 >= x2 + x3;\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant d1 >= 1;\nloop invariant d2 >= 1;\nloop invariant d3 >= 1;\nloop invariant x1 >= x2 + x3;\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant d1 >= 1;\nloop invariant d2 >= 1;\nloop invariant d3 >= 1;\nloop invariant x1 >= x2 + x3;\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant d1 >= 1;\nloop invariant d2 >= 1;\nloop invariant d3 >= 1;\nloop invariant x1 >= x2 + x3;\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant d1 >= 1;\nloop invariant d2 >= 1;\nloop invariant d3 >= 1;\nloop invariant x1 >= x2 + x3;\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant d1 >= 1;\nloop invariant d2 >= 1;\nloop invariant d3 >= 1;\nloop invariant x1 >= x2 + x3;\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= d1 <= 1;\nloop invariant 0 <= d2 <= 1;\nloop invariant 0 <= d3 <= 1;\nloop invariant 1 <= x1 <= 1;\nloop invariant 0 <= x2 <= 1;\nloop invariant 0 <= x3 <= 1;\nloop invariant (x2 == 0) ==> (x1 >= 0);\nloop invariant (x3 == 0) ==> (x2 >= 0);\nloop invariant (x2 >= 0) ==> (x1 >= 0);\nloop invariant (x3 >= 0) ==> (x2 >= 0);\nloop invariant (x2 == 0) ==> (x1 <= 1);\nloop invariant (x3 == 0) ==> (x2 <= 1);\nloop invariant (x2 >= 0) ==> (x1 <= 1);\nloop invariant (x3 >= 0) ==> (x2 <= 1);\nloop invariant (x2 == 0) ==> (x1 == 1);\nloop invariant (x3 == 0) ==> (x2 == 1);\nloop invariant (x2 >= 0) ==> (x1 <= 1);\nloop invariant (x3 >= 0) ==> (x2 <= 1);\nloop invariant (x2 == 0) ==> (x1 <= 1);\nloop invariant (x3 == 0) ==> (x2 <= 1);\nloop invariant (x2 >= 0) ==> (x1 <= 1);\nloop invariant (x3 >= 0) ==> (x2 <= 1);\nloop invariant (x2 == 0) ==> (x1 <= 1);\nloop invariant (x3 == 0) ==> (x2 <= 1);\nloop invariant (x2 >= 0) ==> (x1 <= 1);\nloop invariant (x3 >= 0) ==> (x2 <= 1);\nloop invariant (x2 == 0) ==> (x1 <= 1);\nloop invariant (x3 == 0) ==> (x2 <= 1);\nloop invariant (x2 >= 0) ==> (x1 <= 1);\nloop invariant (x3 >= 0) ==> (x2 <= 1);\nloop invariant (x2 == 0) ==> (x1 <= 1);\nloop invariant (x3 == 0) ==> (x2 <= 1);\nloop invariant (x2 >= 0) ==> (x1 <= 1);\nloop invariant (x3 >= 0) ==> (x2 <= 1);\nloop invariant (x2 == 0) ==> (x1 <= 1);\nloop invariant (x3 == 0) ==> (x2 <= 1);\nloop invariant (x2 >= 0) ==> (x1 <= 1);\nloop invariant (x3 >= 0) ==> (x2 <= 1);\nloop invariant (x2 == 0) ==> (x1 <= 1);\nloop invariant (x3 == 0) ==> (x2 <= 1);\nloop invariant (x2 >= 0) ==> (x1 <= 1);\nloop invariant (x3 >= 0) ==> (x2 <= 1);\nloop invariant (x2 == 0) ==> (x1 <= 1);\nloop invariant (x3 == 0) ==> (x2 <= 1);\nloop invariant (x2 >= 0) ==> (x1 <= 1);\nloop invariant (x3 >= 0) ==> (x2 <= 1);\nloop invariant (x2 == 0) ==> (x1 <= 1);\nloop invariant (x3 == 0) ==> (x2 <= 1);\nloop invariant (x2 >= 0) ==> (x1 <= 1);\nloop invariant (x3 >= 0) ==> (x2 <= 1);\nloop invariant (x2 == 0) ==> (x1 <= 1);\nloop invariant (x3 == 0) ==> (x2 <= 1);\nloop invariant (x2 >= 0) ==> (x1 <= 1);\nloop invariant (x3 >= 0) ==> (x2 <= 1);\nloop invariant (x2 == 0) ==> (x1 <= 1);\nloop invariant (x3 == 0) ==> (x2 <= 1);\nloop invariant (x2 >= 0) ==> (x1 <= 1);\nloop invariant (x3 >= 0) ==> (x2 <= 1);\nloop invariant (x2 == 0) ==> (x1 <= 1);\nloop invariant (x3 == 0) ==> (x2 <= 1);\n*/\n```",
            "```\n/*@\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant ( x1 == 1 ==> ( ( x2 == 1 && x3 == 1 ) ) );\nloop invariant ( x1 < 1 ==> !( x2 > 0 && x3 > 0 ) );\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x1 <= 1;\nloop invariant 0 <= x2 <= 1;\nloop invariant 0 <= x3 <= 1;\nloop invariant d1 >= 1;\nloop invariant d2 >= 1;\nloop invariant d3 >= 1;\nloop invariant x1 >= x2;\nloop invariant x1 >= x3;\nloop invariant x2 >= x3;\nloop invariant (x1 > 0 ==> x2 > 0 ==> x3 > 0);\nloop invariant (x1 <= 0 ==> x2 <= 0 ==> x3 <= 0);\nloop invariant (x1 > 0 ==> x2 > 0 ==> d1 <= x1);\nloop invariant (x1 > 0 ==> x2 > 0 ==> d2 <= x2);\nloop invariant (x1 > 0 ==> x3 > 0 ==> d3 <= x3);\nloop invariant (x1 <= 0 ==> x2 <= 0 ==> x3 <= 0 ==> d1 <= 1);\nloop invariant (x1 <= 0 ==> x2 <= 0 ==> x3 <= 0 ==> d2 <= 1);\nloop invariant (x1 <= 0 ==> x2 <= 0 ==> x3 <= 0 ==> d3 <= 1);\nloop invariant (x1 > 0 ==> x2 > 0 ==> x3 > 0 ==> d1 > 0);\nloop invariant (x1 > 0 ==> x2 > 0 ==> x3 > 0 ==> d2 > 0);\nloop invariant (x1 > 0 ==> x3 > 0 ==> d3 > 0);\nloop invariant (x1 <= 0 ==> x2 <= 0 ==> x3 <= 0 ==> d1 > 0);\nloop invariant (x1 <= 0 ==> x2 <= 0 ==> x3 <= 0 ==> d2 > 0);\nloop invariant (x1 <= 0 ==> x3 <= 0 ==> d3 > 0);\nloop invariant (x1 > 0 ==> x2 > 0 ==> x3 > 0 ==> d1 < x1);\nloop invariant (x1 > 0 ==> x2 > 0 ==> x3 > 0 ==> d2 < x2);\nloop invariant (x1 > 0 ==> x3 > 0 ==> d3 < x3);\nloop invariant (x1 <= 0 ==> x2 <= 0 ==> x3 <= 0 ==> d1 < 1);\nloop invariant (x1 <= 0 ==> x2 <= 0 ==> x3 <= 0 ==> d2 < 1);\nloop invariant (x1 <= 0 ==> x3 <= 0 ==> d3 < 1);\nloop invariant (x1 > 0 ==> x2 > 0 ==> x3 > 0 ==> d1 > 0);\nloop invariant (x1 > 0 ==> x2 > 0 ==> x3 > 0 ==> d2 > 0);\nloop invariant (x1 > 0 ==> x3 > 0 ==> d3 > 0);\nloop invariant (x1 <= 0 ==> x2 <= 0 ==> x3 <= 0 ==> d1 > 0);\nloop invariant (x1 <= 0 ==> x2 <= 0 ==> x3 <= 0 ==> d2 > 0);\nloop invariant (x1 <= 0 ==> x3 <= 0 ==> d3 > 0);\nloop invariant (x1 > 0 ==> x2 > 0 ==> x3 > 0 ==> d1 < x1);\nloop invariant (x1 > 0 ==> x2 > 0 ==> x3 > 0 ==> d2 < x2);\nloop invariant (x1 > 0 ==> x3 > 0 ==> d3 < x3);\nloop invariant (x1 <= 0 ==> x2 <= 0 ==> x3 <= 0 ==> d1 < 1);\nloop invariant (x1 <= 0 ==> x2 <= 0 ==> x3 <= 0 ==> d2 < 1);\nloop invariant (x1 <= 0 ==> x3 <= 0 ==> d3 < 1);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x1;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2;\nloop invariant x1 >= x3;\nloop invariant x2 >= x3;\nloop invariant x1 <= (d1 + x2);\nloop invariant x1 <= (d1 + x3);\nloop invariant x2 <= (d2 + x3);\nloop invariant x1 >= (d1 * (x2 - 1));\nloop invariant x1 >= (d1 * (x3 - 1));\nloop invariant x2 >= (d2 * (x3 - 1));\nloop invariant x1 <= (d1 * x2);\nloop invariant x1 <= (d1 * x3);\nloop invariant x2 <= (d2 * x3);\nloop invariant x1 >= (d1 * (x2 - 1) * (x3 - 1));\nloop invariant x1 <= (d1 * x2 * x3);\nloop invariant x2 >= (d2 * (x3 - 1) * (x1 - 1));\nloop invariant x2 <= (d2 * x3 * x1);\nloop invariant x3 >= (d3 * (x2 - 1) * (x1 - 1));\nloop invariant x3 <= (d3 * x2 * x1);\nloop invariant x1 >= (d1 * x2 * x3);\nloop invariant x2 >= (d2 * x3 * x1);\nloop invariant x3 >= (d3 * x2 * x1);\nloop invariant x1 <= (d1 * (x2 + 1) * (x3 + 1));\nloop invariant x2 <= (d2 * (x3 + 1) * (x1 + 1));\nloop invariant x3 <= (d3 * (x2 + 1) * (x1 + 1));\nloop invariant x1 >= (d1 * (x2 + 1) * (x3 + 1));\nloop invariant x2 >= (d2 * (x3 + 1) * (x1 + 1));\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x2 <= -d2 ==> (x2 >= 0);\nloop invariant 0 <= x2 <= -d2 ==> (x2 >= 0);\nloop invariant x3 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= d1;\nloop invariant x1 >= d1;\nloop invariant d1 > 0;\nloop invariant d1 > 0;\nloop invariant d2 > 0;\nloop invariant d2 > 0;\nloop invariant d3 > 0;\nloop invariant d3 > 0;\nloop invariant x1 >= d1 ==> (x1 >= d1);\nloop invariant x1 >= d1 ==> (x1 >= d1);\nloop invariant x2 >= d2 ==> (x2 >= d2);\nloop invariant x2 >= d2 ==> (x2 >= d2);\nloop invariant x3 >= d3 ==> (x3 >= d3);\nloop invariant x3 >= d3 ==> (x3 >= d3);\nloop invariant d1 > 0 ==> (d1 > 0);\nloop invariant d1 > 0 ==> (d1 > 0);\nloop invariant d2 > 0 ==> (d2 > 0);\nloop invariant d2 > 0 ==> (d2 > 0);\nloop invariant d3 > 0 ==> (d3 > 0);\nloop invariant d3 > 0 ==> (d3 > 0);\nloop invariant x1 >= d1 ==> (x1 >= d1);\nloop invariant x1 >= d1 ==> (x1 >= d1);\nloop invariant x2 >= d2 ==> (x2 >= d2);\nloop invariant x2 >= d2 ==> (x2 >= d2);\nloop invariant x3 >= d3 ==> (x3 >= d3);\nloop invariant x3 >= d3 ==> (x3 >= d3);\nloop invariant d1 > 0 ==> (d1 > 0);\nloop invariant d1 > 0 ==> (d1 > 0);\nloop invariant d2 > 0 ==> (d2 > 0);\nloop invariant d2 > 0 ==> (d2 > 0);\nloop invariant d3 > 0 ==> (d3 > 0);\nloop invariant d3 > 0 ==> (d3 > 0);\nloop invariant x1 >= d1 ==> (x1 >= d1);\nloop invariant x1 >= d1 ==> (x1 >= d1);\nloop invariant x2 >= d2 ==> (x2 >= d2);\nloop invariant x2 >= d2 ==> (x2 >= d2);\nloop invariant x3 >= d3 ==> (x3 >= d3);\nloop invariant x3 >= d3 ==> (x3 >= d3);\nloop invariant d1 > 0 ==> (d1 > 0);\nloop invariant d1 > 0 ==> (d1 > 0);\nloop invariant d2 > 0 ==> (d2 > 0);\nloop invariant d2 > 0 ==> (d2 > 0);\nloop invariant d3 > 0 ==> (d3 > 0);\nloop invariant d3 > 0 ==> (d3 > 0);\nloop invariant x1 >= d1 ==> (x1 >= d1);\nloop invariant x1 >= d1 ==> (x1 >= d1);\nloop invariant x2 >= d2 ==> (x2 >= d2);\nloop invariant x2 >= d2 ==> (x2 >= d2);\nloop invariant x3 >= d3 ==> (x3 >= d3);\nloop invariant x3 >= d3 ==> (x3 >= d3);\nloop invariant d1 > 0 ==> (d1 > 0);\nloop invariant d1 > 0 ==> (d1 > 0);\nloop invariant d2 > 0 ==> (d2 > 0);\nloop invariant d2 > 0 ==> (d2 > 0);\nloop invariant d3 > 0 ==> (d3 > 0);\nloop invariant d3 > 0 ==> (d3 > 0);\nloop invariant x1 >= d1 ==> (x1 >= d1);\nloop invariant x1 >= d1 ==> (x1 >= d1);\nloop invariant x2 >= d2 ==> (x2 >= d2);\nloop invariant x2 >= d2 ==> (x2 >= d2);\nloop invariant x3 >= d3 ==> (x3 >= d3);\nloop invariant x3 >= d3 ==> (x3 >= d3);\nloop invariant d1 > 0 ==> (d1 > 0);\nloop invariant d1 > 0 ==> (d1 > 0);\nloop invariant d2 > 0 ==> (d2 > 0);\nloop invariant d2 > 0 ==> (d2 > 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= d1 <= 1;\nloop invariant 0 <= d2 <= 1;\nloop invariant 0 <= d3 <= 1;\nloop invariant 0 <= x1;\nloop invariant x2 >= d2*(x1/d1);\nloop invariant x3 >= d3*(x1/d1);\nloop invariant x2 >= d2;\nloop invariant x3 >= d3;\nloop invariant x1 >= 1;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant d1 >= 0;\nloop invariant d2 >= 0;\nloop invariant d3 >= 0;\nloop invariant x1 <= (x2 + x3);\nloop invariant x1 <= (x2 + d2);\nloop invariant x1 <= (x3 + d3);\nloop invariant x1 <= (x2 + d2 + x3 + d3);\nloop invariant x1 <= (x2 + x3 + d2 + d3);\nloop invariant x1 <= (x2 + x3 + d2 + d3 + d1);\nloop invariant x1 <= (x2 + x3 + d2 + d3 + d1 + d1);\nloop invariant x1 <= (x2 + x3 + d2 + d3 + d1 + d1 + d1);\nloop invariant x1 <= (x2 + x3 + d2 + d3 + d1 + d1 + d1 + d1);\nloop invariant x1 <= (x2 + x3 + d2 + d3 + d1 + d1 + d1 + d1 + d1);\nloop invariant x1 <= (x2 + x3 + d2 + d3 + d1 + d1 + d1 + d1 + d1 + d1);\nloop invariant x1 <= (x2 + x3 + d2 + d3 + d1 + d1 + d1 + d1 + d1 + d1 + d1);\nloop invariant x1 <= (x2 + x3 + d2 + d3 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1);\nloop invariant x1 <= (x2 + x3 + d2 + d3 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1);\nloop invariant x1 <= (x2 + x3 + d2 + d3 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1);\nloop invariant x1 <= (x2 + x3 + d2 + d3 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1);\nloop invariant x1 <= (x2 + x3 + d2 + d3 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1);\nloop invariant x1 <= (x2 + x3 + d2 + d3 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1);\nloop invariant x1 <= (x2 + x3 + d2 + d3 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1);\nloop invariant x1 <= (x2 + x3 + d2 + d3 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1);\nloop invariant x1 <= (x2 + x3 + d2 + d3 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1);\nloop invariant x1 <= (x2 + x3 + d2 + d3 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x1 <= 1;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant 0 <= x1 <= 1;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant 0 <= x1 <= 1;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant 0 <= x1 <= 1;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant 0 <= x1 <= 1;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant 0 <= x1 <= 1;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant 0 <= x1 <= 1;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant 0 <= x1 <= 1;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant 0 <= x1 <= 1;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant 0 <= x1 <= 1;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant 0 <= x1 <= 1;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant 0 <= x1 <= 1;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant 0 <= x1 <= 1;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant 0 <= x1 <= 1;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant 0 <= x1 <= 1;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant 0 <= x1 <= 1;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant 0 <= x1 <= 1;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x1 <= 100000;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 <= 100000;\nloop invariant x3 <= 100000;\nloop invariant x2 + x3 <= d1 * 100000;\nloop invariant x2 + x3 >= d1 * 100000;\nloop invariant x1 - d1 * 100000 <= 0;\nloop invariant x1 - d1 * 100000 >= 0;\nloop invariant x1 - d1 * 100000 <= 1;\nloop invariant x1 - d1 * 100000 >= 1;\nloop invariant x1 - d1 * 100000 <= 0;\nloop invariant x1 - d1 * 100000 >= 0;\nloop invariant x1 - d1 * 100000 <= 1;\nloop invariant x1 - d1 * 100000 >= 1;\nloop invariant x1 - d1 * 100000 <= 0;\nloop invariant x1 - d1 * 100000 >= 0;\nloop invariant x1 - d1 * 100000 <= 1;\nloop invariant x1 - d1 * 100000 >= 1;\nloop invariant x1 - d1 * 100000 <= 0;\nloop invariant x1 - d1 * 100000 >= 0;\nloop invariant x1 - d1 * 100000 <= 1;\nloop invariant x1 - d1 * 100000 >= 1;\nloop invariant x1 - d1 * 100000 <= 0;\nloop invariant x1 - d1 * 100000 >= 0;\nloop invariant x1 - d1 * 100000 <= 1;\nloop invariant x1 - d1 * 100000 >= 1;\nloop invariant x1 - d1 * 100000 <= 0;\nloop invariant x1 - d1 * 100000 >= 0;\nloop invariant x1 - d1 * 100000 <= 1;\nloop invariant x1 - d1 * 100000 >= 1;\nloop invariant x1 - d1 * 100000 <= 0;\nloop invariant x1 - d1 * 100000 >= 0;\nloop invariant x1 - d1 * 100000 <= 1;\nloop invariant x1 - d1 * 100000 >= 1;\nloop invariant x1 - d1 * 100000 <= 0;\nloop invariant x1 - d1 * 100000 >= 0;\nloop invariant x1 - d1 * 100000 <= 1;\nloop invariant x1 - d1 * 100000 >= 1;\nloop invariant x1 - d1 * 100000 <= 0;\nloop invariant x1 - d1 * 100000 >= 0;\nloop invariant x1 - d1 * 100000 <= 1;\nloop invariant x1 - d1 * 100000 >= 1;\nloop invariant x1 - d1 * 100000 <= 0;\nloop invariant x1 - d1 * 100000 >= 0;\nloop invariant x1 - d1 * 100000 <= 1;\nloop invariant x1 - d1 * 100000 >= 1;\nloop invariant x1 - d1 * 100000 <= 0;\nloop invariant x1 - d1 * 100000 >= 0;\nloop invariant x1 - d1 * 100000 <= 1;\nloop invariant x1 - d1 * 100000 >= 1;\nloop invariant x1 - d1 * 100000 <= 0;\nloop invariant x1 - d1 * 100000 >= 0;\nloop invariant x1 - d1 * 100000 <= 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x2 <= x1;\nloop invariant x2 <= x3;\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2;\nloop invariant d1 >= 0;\nloop invariant d2 >= 0;\nloop invariant d3 >= 0;\nloop invariant x2 >= x2 - d2;\nloop invariant x3 >= x3 - d3;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x2 <= 1;\nloop invariant x1 >= 0;\nloop invariant x2 <= d2 * x1;\nloop invariant x3 <= d3 * x1;\nloop invariant x1 = x1 - d1 * (x2/d2) * (x3/d3);\nloop invariant x2 = x2 - d2 * (x2/d2) * (x3/d3);\nloop invariant x3 = x3 - d3 * (x2/d2) * (x3/d3);\nloop invariant x1 - x2 - x3 >= 0;\nloop invariant x1 - x2 - x3 <= 0;\nloop invariant x1 - x2 - x3 == 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2 + x3;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2 + x3;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2 + x3;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2 + x3;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2 + x3;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2 + x3;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2 + x3;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2 + x3;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2 + x3;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2 + x3;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2 + x3;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2 + x3;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2 + x3;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2 + x3;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2 + x3;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2 + x3;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2 + x3;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2 + x3;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2 + x3;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2 + x3;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2 + x3;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2 + x3;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2 + x3;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2 + x3;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2 + x3;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2 + x3;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2 + x3;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2 + x3;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2 + x3;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2 + x3;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2 + x3;\nloop invariant x2 >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x1 <= 1;\nloop invariant 0 <= x2 <= 1;\nloop invariant 0 <= x3 <= 1;\nloop invariant 0 <= d1 <= 1;\nloop invariant 0 <= d2 <= 1;\nloop invariant 0 <= d3 <= 1;\nloop invariant d1 >= 0;\nloop invariant d2 >= 0;\nloop invariant d3 >= 0;\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2;\nloop invariant x2 >= x3;\nloop invariant x3 >= d3;\nloop invariant x1 >= d1;\nloop invariant x2 >= d2;\nloop invariant x3 >= d3;\nloop invariant x1 >= x2 + x3;\nloop invariant x2 >= x3 + d3;\nloop invariant x3 >= d3 + d3;\nloop invariant x1 >= x2 + d2 + d3;\nloop invariant x2 >= x3 + d3 + d3;\nloop invariant x3 >= d3 + d3 + d3;\nloop invariant x1 >= x2 + d2 + d3 + d3;\nloop invariant x2 >= x3 + d3 + d3 + d3;\nloop invariant x3 >= d3 + d3 + d3 + d3;\nloop invariant x1 >= x2 + d2 + d3 + d3 + d3;\nloop invariant x2 >= x3 + d3 + d3 + d3 + d3;\nloop invariant x3 >= d3 + d3 + d3 + d3 + d3;\nloop invariant x1 >= x2 + d2 + d3 + d3 + d3 + d3;\nloop invariant x2 >= x3 + d3 + d3 + d3 + d3 + d3;\nloop invariant x3 >= d3 + d3 + d3 + d3 + d3 + d3;\nloop invariant x1 >= x2 + d2 + d3 + d3 + d3 + d3 + d3;\nloop invariant x2 >= x3 + d3 + d3 + d3 + d3 + d3 + d3;\nloop invariant x3 >= d3 + d3 + d3 + d3 + d3 + d3 + d3;\nloop invariant x1 >= x2 + d2 + d3 + d3 + d3 + d3 + d3 + d3;\nloop invariant x2 >= x3 + d3 + d3 + d3 + d3 + d3 + d3 + d3;\nloop invariant x3 >= d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3;\nloop invariant x1 >= x2 + d2 + d3 + d3 + d3 + d3 + d3 + d3 + d3;\nloop invariant x2 >= x3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3;\nloop invariant x3 >= d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3;\nloop invariant x1 >= x2 + d2 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3;\nloop invariant x2 >= x3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3;\nloop invariant x3 >= d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3;\nloop invariant x1 >= x2 + d2 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3;\nloop invariant x2 >= x3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3;\nloop invariant x3 >= d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3;\nloop invariant x1 >= x2 + d2 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3;\nloop invariant x2 >= x3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x1;\nloop invariant 0 <= x2;\nloop invariant 0 <= x3;\nloop invariant x1 >= d1;\nloop invariant x2 >= d2;\nloop invariant x3 >= d3;\nloop invariant x1 - d1 * (x2 / d2) <= x3;\nloop invariant x2 - d2 * (x3 / d3) <= x1;\nloop invariant x3 - d3 * (x1 / d1) <= x2;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x2 <= 1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x2 <= 1 is neither established nor preserved.\nAssertion x2 >= 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int d1 = 1;\n    int d2 = 1;\n    int d3 = 1;\n    int x1 = 1;\n    int x2,x3;\n\n    /*@\n\n*/\nwhile( x1 > 0) {\n        if(x2 > 0) {\n            if(x3 > 0) {\n                x1 = x1 - d1;\n                x2 = x2 - d2;\n                x3 = x3 - d3;\n            }\n        }\n    }\n\n    {;\n//@ assert(x2 >= 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 12,
                "annotations": "```\n/*@\nloop invariant 0 <= d1 <= 100000;\nloop invariant 0 <= d2 <= 100000;\nloop invariant 0 <= d3 <= 100000;\nloop invariant 0 <= x1 <= 100000;\nloop invariant 0 <= x2 <= 100000;\nloop invariant 0 <= x3 <= 100000;\nloop invariant d1 >= 0;\nloop invariant d2 >= 0;\nloop invariant d3 >= 0;\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2;\nloop invariant x1 >= x3;\nloop invariant x2 >= x3;\nloop invariant x1 >= d1;\nloop invariant x2 >= d2;\nloop invariant x3 >= d3;\nloop invariant x1 >= d1 * x2 + d2 * x3;\nloop invariant x2 >= d2 * x3;\nloop invariant x3 >= d3 * x3;\nloop invariant x1 >= d1 * x2 + d2 * x3 + d3 * x3;\nloop invariant x2 >= d2 * x3 + d3 * x3;\nloop invariant x3 >= d3 * x3;\nloop invariant x1 >= d1 * x2 + d2 * x3 + d3 * x3 + d3 * x3;\nloop invariant x2 >= d2 * x3 + d3 * x3 + d3 * x3;\nloop invariant x3 >= d3 * x3 + d3 * x3;\nloop invariant x1 >= d1 * x2 + d2 * x3 + d3 * x3 + d3 * x3 + d3 * x3;\nloop invariant x2 >= d2 * x3 + d3 * x3 + d3 * x3 + d3 * x3;\nloop invariant x3 >= d3 * x3 + d3 * x3 + d3 * x3;\nloop invariant x1 >= d1 * x2 + d2 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3;\nloop invariant x2 >= d2 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3;\nloop invariant x3 >= d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3;\nloop invariant x1 >= d1 * x2 + d2 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3;\nloop invariant x2 >= d2 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3;\nloop invariant x3 >= d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3;\nloop invariant x1 >= d1 * x2 + d2 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3;\nloop invariant x2 >= d2 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3;\nloop invariant x3 >= d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3;\nloop invariant x1 >= d1 * x2 + d2 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3;\nloop invariant x2 >= d2 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3;\nloop invariant x3 >= d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= d1 <= 100000 is partially proven to be inductive.\nloop invariant 0 <= d2 <= 100000 is partially proven to be inductive.\nloop invariant 0 <= d3 <= 100000 is partially proven to be inductive.\nloop invariant 0 <= x1 <= 100000 is partially proven to be inductive.\nloop invariant 0 <= x2 <= 100000 is preserved but not established.\nloop invariant 0 <= x3 <= 100000 is preserved but not established.\nloop invariant d1 >= 0 is partially proven to be inductive.\nloop invariant d2 >= 0 is partially proven to be inductive.\nloop invariant d3 >= 0 is partially proven to be inductive.\nloop invariant x1 >= 0 is partially proven to be inductive.\nloop invariant x2 >= 0 is partially proven to be inductive.\nloop invariant x3 >= 0 is partially proven to be inductive.\nloop invariant x1 >= x2 is preserved but not established.\nloop invariant x1 >= x3 is preserved but not established.\nloop invariant x2 >= x3 is preserved but not established.\nloop invariant x1 >= d1 is partially proven to be inductive.\nloop invariant x2 >= d2 is preserved but not established.\nloop invariant x3 >= d3 is preserved but not established.\nloop invariant x1 >= d1 * x2 + d2 * x3 is preserved but not established.\nloop invariant x2 >= d2 * x3 is partially proven to be inductive.\nloop invariant x3 >= d3 * x3 is partially proven to be inductive.\nloop invariant x1 >= d1 * x2 + d2 * x3 + d3 * x3 is partially proven to be inductive.\nloop invariant x2 >= d2 * x3 + d3 * x3 is partially proven to be inductive.\nloop invariant x1 >= d1 * x2 + d2 * x3 + d3 * x3 + d3 * x3 is partially proven to be inductive.\nloop invariant x2 >= d2 * x3 + d3 * x3 + d3 * x3 is partially proven to be inductive.\nloop invariant x3 >= d3 * x3 + d3 * x3 is partially proven to be inductive.\nloop invariant x1 >= d1 * x2 + d2 * x3 + d3 * x3 + d3 * x3 + d3 * x3 is partially proven to be inductive.\nloop invariant x2 >= d2 * x3 + d3 * x3 + d3 * x3 + d3 * x3 is partially proven to be inductive.\nloop invariant x3 >= d3 * x3 + d3 * x3 + d3 * x3 is partially proven to be inductive.\nloop invariant x1 >= d1 * x2 + d2 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 is partially proven to be inductive.\nloop invariant x2 >= d2 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 is partially proven to be inductive.\nloop invariant x3 >= d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 is partially proven to be inductive.\nloop invariant x1 >= d1 * x2 + d2 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 is partially proven to be inductive.\nloop invariant x2 >= d2 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 is partially proven to be inductive.\nloop invariant x3 >= d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 is partially proven to be inductive.\nloop invariant x1 >= d1 * x2 + d2 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 is partially proven to be inductive.\nloop invariant x2 >= d2 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 is partially proven to be inductive.\nloop invariant x3 >= d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 is partially proven to be inductive.\nloop invariant x1 >= d1 * x2 + d2 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 is partially proven to be inductive.\nloop invariant x2 >= d2 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 is partially proven to be inductive.\nloop invariant x3 >= d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 is partially proven to be inductive.\nAssertion x2 >= 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int d1 = 1;\n    int d2 = 1;\n    int d3 = 1;\n    int x1 = 1;\n    int x2,x3;\n\n    /*@\nloop invariant i1: 0 <= d1 <= 100000;\nloop invariant i2: 0 <= d2 <= 100000;\nloop invariant i3: 0 <= d3 <= 100000;\n\n\n\nloop invariant i7: d1 >= 0;\nloop invariant i8: d2 >= 0;\nloop invariant i9: d3 >= 0;\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i21: x3 >= d3 * x3;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile( x1 > 0) {\n        if(x2 > 0) {\n            if(x3 > 0) {\n                x1 = x1 - d1;\n                x2 = x2 - d2;\n                x3 = x3 - d3;\n            }\n        }\n    }\n\n    {;\n//@ assert(x2 >= 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x2 <= 1;\nloop invariant x1 >= x2 + x3;\nloop invariant x3 >= 0;\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant d1 >= 1;\nloop invariant d2 >= 1;\nloop invariant d3 >= 1;\nloop invariant x1 >= x2 + x3;\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant d1 >= 1;\nloop invariant d2 >= 1;\nloop invariant d3 >= 1;\nloop invariant x1 >= x2 + x3;\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant d1 >= 1;\nloop invariant d2 >= 1;\nloop invariant d3 >= 1;\nloop invariant x1 >= x2 + x3;\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant d1 >= 1;\nloop invariant d2 >= 1;\nloop invariant d3 >= 1;\nloop invariant x1 >= x2 + x3;\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant d1 >= 1;\nloop invariant d2 >= 1;\nloop invariant d3 >= 1;\nloop invariant x1 >= x2 + x3;\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant d1 >= 1;\nloop invariant d2 >= 1;\nloop invariant d3 >= 1;\nloop invariant x1 >= x2 + x3;\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant d1 >= 1;\nloop invariant d2 >= 1;\nloop invariant d3 >= 1;\nloop invariant x1 >= x2 + x3;\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant d1 >= 1;\nloop invariant d2 >= 1;\nloop invariant d3 >= 1;\nloop invariant x1 >= x2 + x3;\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant d1 >= 1;\nloop invariant d2 >= 1;\nloop invariant d3 >= 1;\nloop invariant x1 >= x2 + x3;\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant d1 >= 1;\nloop invariant d2 >= 1;\nloop invariant d3 >= 1;\nloop invariant x1 >= x2 + x3;\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant d1 >= 1;\nloop invariant d2 >= 1;\nloop invariant d3 >= 1;\nloop invariant x1 >= x2 + x3;\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant d1 >= 1;\nloop invariant d2 >= 1;\nloop invariant d3 >= 1;\nloop invariant x1 >= x2 + x3;\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant d1 >= 1;\nloop invariant d2 >= 1;\nloop invariant d3 >= 1;\nloop invariant x1 >= x2 + x3;\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant d1 >= 1;\nloop invariant d2 >= 1;\nloop invariant d3 >= 1;\nloop invariant x1 >= x2 + x3;\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant d1 >= 1;\nloop invariant d2 >= 1;\nloop invariant d3 >= 1;\nloop invariant x1 >= x2 + x3;\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant d1 >= 1;\nloop invariant d2 >= 1;\nloop invariant d3 >= 1;\nloop invariant x1 >= x2 + x3;\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x2 <= 1 is neither established nor preserved.\nloop invariant x1 >= x2 + x3 is neither established nor preserved.\nloop invariant x3 >= 0 is neither established nor preserved.\nloop invariant x1 >= 0 is partially proven to be inductive.\nloop invariant x2 >= 0 is partially proven to be inductive.\nloop invariant d1 >= 1 is partially proven to be inductive.\nloop invariant d2 >= 1 is partially proven to be inductive.\nloop invariant d3 >= 1 is partially proven to be inductive.\nAssertion x2 >= 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int d1 = 1;\n    int d2 = 1;\n    int d3 = 1;\n    int x1 = 1;\n    int x2,x3;\n\n    /*@\n\n\n\n\n\nloop invariant i6: d1 >= 1;\nloop invariant i7: d2 >= 1;\nloop invariant i8: d3 >= 1;\n*/\nwhile( x1 > 0) {\n        if(x2 > 0) {\n            if(x3 > 0) {\n                x1 = x1 - d1;\n                x2 = x2 - d2;\n                x3 = x3 - d3;\n            }\n        }\n    }\n\n    {;\n//@ assert(x2 >= 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= d1 <= 1;\nloop invariant 0 <= d2 <= 1;\nloop invariant 0 <= d3 <= 1;\nloop invariant 1 <= x1 <= 1;\nloop invariant 0 <= x2 <= 1;\nloop invariant 0 <= x3 <= 1;\nloop invariant (x2 == 0) ==> (x1 >= 0);\nloop invariant (x3 == 0) ==> (x2 >= 0);\nloop invariant (x2 >= 0) ==> (x1 >= 0);\nloop invariant (x3 >= 0) ==> (x2 >= 0);\nloop invariant (x2 == 0) ==> (x1 <= 1);\nloop invariant (x3 == 0) ==> (x2 <= 1);\nloop invariant (x2 >= 0) ==> (x1 <= 1);\nloop invariant (x3 >= 0) ==> (x2 <= 1);\nloop invariant (x2 == 0) ==> (x1 == 1);\nloop invariant (x3 == 0) ==> (x2 == 1);\nloop invariant (x2 >= 0) ==> (x1 <= 1);\nloop invariant (x3 >= 0) ==> (x2 <= 1);\nloop invariant (x2 == 0) ==> (x1 <= 1);\nloop invariant (x3 == 0) ==> (x2 <= 1);\nloop invariant (x2 >= 0) ==> (x1 <= 1);\nloop invariant (x3 >= 0) ==> (x2 <= 1);\nloop invariant (x2 == 0) ==> (x1 <= 1);\nloop invariant (x3 == 0) ==> (x2 <= 1);\nloop invariant (x2 >= 0) ==> (x1 <= 1);\nloop invariant (x3 >= 0) ==> (x2 <= 1);\nloop invariant (x2 == 0) ==> (x1 <= 1);\nloop invariant (x3 == 0) ==> (x2 <= 1);\nloop invariant (x2 >= 0) ==> (x1 <= 1);\nloop invariant (x3 >= 0) ==> (x2 <= 1);\nloop invariant (x2 == 0) ==> (x1 <= 1);\nloop invariant (x3 == 0) ==> (x2 <= 1);\nloop invariant (x2 >= 0) ==> (x1 <= 1);\nloop invariant (x3 >= 0) ==> (x2 <= 1);\nloop invariant (x2 == 0) ==> (x1 <= 1);\nloop invariant (x3 == 0) ==> (x2 <= 1);\nloop invariant (x2 >= 0) ==> (x1 <= 1);\nloop invariant (x3 >= 0) ==> (x2 <= 1);\nloop invariant (x2 == 0) ==> (x1 <= 1);\nloop invariant (x3 == 0) ==> (x2 <= 1);\nloop invariant (x2 >= 0) ==> (x1 <= 1);\nloop invariant (x3 >= 0) ==> (x2 <= 1);\nloop invariant (x2 == 0) ==> (x1 <= 1);\nloop invariant (x3 == 0) ==> (x2 <= 1);\nloop invariant (x2 >= 0) ==> (x1 <= 1);\nloop invariant (x3 >= 0) ==> (x2 <= 1);\nloop invariant (x2 == 0) ==> (x1 <= 1);\nloop invariant (x3 == 0) ==> (x2 <= 1);\nloop invariant (x2 >= 0) ==> (x1 <= 1);\nloop invariant (x3 >= 0) ==> (x2 <= 1);\nloop invariant (x2 == 0) ==> (x1 <= 1);\nloop invariant (x3 == 0) ==> (x2 <= 1);\nloop invariant (x2 >= 0) ==> (x1 <= 1);\nloop invariant (x3 >= 0) ==> (x2 <= 1);\nloop invariant (x2 == 0) ==> (x1 <= 1);\nloop invariant (x3 == 0) ==> (x2 <= 1);\nloop invariant (x2 >= 0) ==> (x1 <= 1);\nloop invariant (x3 >= 0) ==> (x2 <= 1);\nloop invariant (x2 == 0) ==> (x1 <= 1);\nloop invariant (x3 == 0) ==> (x2 <= 1);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= d1 <= 1 is partially proven to be inductive.\nloop invariant 0 <= d2 <= 1 is partially proven to be inductive.\nloop invariant 0 <= d3 <= 1 is partially proven to be inductive.\nloop invariant 1 <= x1 <= 1 is established but not preserved.\nloop invariant 0 <= x2 <= 1 is preserved but not established.\nloop invariant 0 <= x3 <= 1 is preserved but not established.\nloop invariant (x2 == 0) ==> (x1 >= 0) is partially proven to be inductive.\nloop invariant (x3 == 0) ==> (x2 >= 0) is partially proven to be inductive.\nloop invariant (x2 >= 0) ==> (x1 >= 0) is partially proven to be inductive.\nloop invariant (x3 >= 0) ==> (x2 >= 0) is partially proven to be inductive.\nloop invariant (x2 == 0) ==> (x1 <= 1) is partially proven to be inductive.\nloop invariant (x3 == 0) ==> (x2 <= 1) is partially proven to be inductive.\nloop invariant (x2 >= 0) ==> (x1 <= 1) is partially proven to be inductive.\nloop invariant (x3 >= 0) ==> (x2 <= 1) is partially proven to be inductive.\nloop invariant (x2 == 0) ==> (x1 == 1) is partially proven to be inductive.\nloop invariant (x3 == 0) ==> (x2 == 1) is neither established nor preserved.\nAssertion x2 >= 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int d1 = 1;\n    int d2 = 1;\n    int d3 = 1;\n    int x1 = 1;\n    int x2,x3;\n\n    /*@\nloop invariant i1: 0 <= d1 <= 1;\nloop invariant i2: 0 <= d2 <= 1;\nloop invariant i3: 0 <= d3 <= 1;\n\n\n\nloop invariant i7: (x2 == 0) ==> (x1 >= 0);\n\nloop invariant i9: (x2 >= 0) ==> (x1 >= 0);\n\nloop invariant i11: (x2 == 0) ==> (x1 <= 1);\n\nloop invariant i13: (x2 >= 0) ==> (x1 <= 1);\n\n\n\n*/\nwhile( x1 > 0) {\n        if(x2 > 0) {\n            if(x3 > 0) {\n                x1 = x1 - d1;\n                x2 = x2 - d2;\n                x3 = x3 - d3;\n            }\n        }\n    }\n\n    {;\n//@ assert(x2 >= 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant ( x1 == 1 ==> ( ( x2 == 1 && x3 == 1 ) ) );\nloop invariant ( x1 < 1 ==> !( x2 > 0 && x3 > 0 ) );\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x1 >= 0 is established but not preserved.\nloop invariant x2 >= 0 is neither established nor preserved.\nloop invariant x3 >= 0 is neither established nor preserved.\nloop invariant ( x1 == 1 ==> ( ( x2 == 1 && x3 == 1 ) ) ) is neither established nor preserved.\nloop invariant ( x1 < 1 ==> !( x2 > 0 && x3 > 0 ) ) is established but not preserved.\nAssertion x2 >= 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int d1 = 1;\n    int d2 = 1;\n    int d3 = 1;\n    int x1 = 1;\n    int x2,x3;\n\n    /*@\n\n\n\n\n\n*/\nwhile( x1 > 0) {\n        if(x2 > 0) {\n            if(x3 > 0) {\n                x1 = x1 - d1;\n                x2 = x2 - d2;\n                x3 = x3 - d3;\n            }\n        }\n    }\n\n    {;\n//@ assert(x2 >= 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= x1 <= 1;\nloop invariant 0 <= x2 <= 1;\nloop invariant 0 <= x3 <= 1;\nloop invariant d1 >= 1;\nloop invariant d2 >= 1;\nloop invariant d3 >= 1;\nloop invariant x1 >= x2;\nloop invariant x1 >= x3;\nloop invariant x2 >= x3;\nloop invariant (x1 > 0 ==> x2 > 0 ==> x3 > 0);\nloop invariant (x1 <= 0 ==> x2 <= 0 ==> x3 <= 0);\nloop invariant (x1 > 0 ==> x2 > 0 ==> d1 <= x1);\nloop invariant (x1 > 0 ==> x2 > 0 ==> d2 <= x2);\nloop invariant (x1 > 0 ==> x3 > 0 ==> d3 <= x3);\nloop invariant (x1 <= 0 ==> x2 <= 0 ==> x3 <= 0 ==> d1 <= 1);\nloop invariant (x1 <= 0 ==> x2 <= 0 ==> x3 <= 0 ==> d2 <= 1);\nloop invariant (x1 <= 0 ==> x2 <= 0 ==> x3 <= 0 ==> d3 <= 1);\nloop invariant (x1 > 0 ==> x2 > 0 ==> x3 > 0 ==> d1 > 0);\nloop invariant (x1 > 0 ==> x2 > 0 ==> x3 > 0 ==> d2 > 0);\nloop invariant (x1 > 0 ==> x3 > 0 ==> d3 > 0);\nloop invariant (x1 <= 0 ==> x2 <= 0 ==> x3 <= 0 ==> d1 > 0);\nloop invariant (x1 <= 0 ==> x2 <= 0 ==> x3 <= 0 ==> d2 > 0);\nloop invariant (x1 <= 0 ==> x3 <= 0 ==> d3 > 0);\nloop invariant (x1 > 0 ==> x2 > 0 ==> x3 > 0 ==> d1 < x1);\nloop invariant (x1 > 0 ==> x2 > 0 ==> x3 > 0 ==> d2 < x2);\nloop invariant (x1 > 0 ==> x3 > 0 ==> d3 < x3);\nloop invariant (x1 <= 0 ==> x2 <= 0 ==> x3 <= 0 ==> d1 < 1);\nloop invariant (x1 <= 0 ==> x2 <= 0 ==> x3 <= 0 ==> d2 < 1);\nloop invariant (x1 <= 0 ==> x3 <= 0 ==> d3 < 1);\nloop invariant (x1 > 0 ==> x2 > 0 ==> x3 > 0 ==> d1 > 0);\nloop invariant (x1 > 0 ==> x2 > 0 ==> x3 > 0 ==> d2 > 0);\nloop invariant (x1 > 0 ==> x3 > 0 ==> d3 > 0);\nloop invariant (x1 <= 0 ==> x2 <= 0 ==> x3 <= 0 ==> d1 > 0);\nloop invariant (x1 <= 0 ==> x2 <= 0 ==> x3 <= 0 ==> d2 > 0);\nloop invariant (x1 <= 0 ==> x3 <= 0 ==> d3 > 0);\nloop invariant (x1 > 0 ==> x2 > 0 ==> x3 > 0 ==> d1 < x1);\nloop invariant (x1 > 0 ==> x2 > 0 ==> x3 > 0 ==> d2 < x2);\nloop invariant (x1 > 0 ==> x3 > 0 ==> d3 < x3);\nloop invariant (x1 <= 0 ==> x2 <= 0 ==> x3 <= 0 ==> d1 < 1);\nloop invariant (x1 <= 0 ==> x2 <= 0 ==> x3 <= 0 ==> d2 < 1);\nloop invariant (x1 <= 0 ==> x3 <= 0 ==> d3 < 1);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x1 <= 1 is partially proven to be inductive.\nloop invariant 0 <= x2 <= 1 is preserved but not established.\nloop invariant 0 <= x3 <= 1 is preserved but not established.\nloop invariant d1 >= 1 is partially proven to be inductive.\nloop invariant d2 >= 1 is partially proven to be inductive.\nloop invariant d3 >= 1 is partially proven to be inductive.\nloop invariant x1 >= x2 is partially proven to be inductive.\nloop invariant x1 >= x3 is partially proven to be inductive.\nloop invariant x2 >= x3 is preserved but not established.\nloop invariant (x1 > 0 ==> x2 > 0 ==> x3 > 0) is preserved but not established.\nloop invariant (x1 <= 0 ==> x2 <= 0 ==> x3 <= 0) is partially proven to be inductive.\nloop invariant (x1 > 0 ==> x2 > 0 ==> d1 <= x1) is partially proven to be inductive.\nloop invariant (x1 > 0 ==> x2 > 0 ==> d2 <= x2) is partially proven to be inductive.\nloop invariant (x1 > 0 ==> x3 > 0 ==> d3 <= x3) is partially proven to be inductive.\nloop invariant (x1 <= 0 ==> x2 <= 0 ==> x3 <= 0 ==> d1 <= 1) is partially proven to be inductive.\nloop invariant (x1 <= 0 ==> x2 <= 0 ==> x3 <= 0 ==> d2 <= 1) is partially proven to be inductive.\nloop invariant (x1 <= 0 ==> x2 <= 0 ==> x3 <= 0 ==> d3 <= 1) is partially proven to be inductive.\nloop invariant (x1 > 0 ==> x2 > 0 ==> x3 > 0 ==> d1 > 0) is partially proven to be inductive.\nloop invariant (x1 > 0 ==> x2 > 0 ==> x3 > 0 ==> d2 > 0) is partially proven to be inductive.\nloop invariant (x1 > 0 ==> x3 > 0 ==> d3 > 0) is partially proven to be inductive.\nloop invariant (x1 <= 0 ==> x2 <= 0 ==> x3 <= 0 ==> d1 > 0) is partially proven to be inductive.\nloop invariant (x1 <= 0 ==> x2 <= 0 ==> x3 <= 0 ==> d2 > 0) is partially proven to be inductive.\nloop invariant (x1 <= 0 ==> x3 <= 0 ==> d3 > 0) is partially proven to be inductive.\nloop invariant (x1 > 0 ==> x2 > 0 ==> x3 > 0 ==> d1 < x1) is preserved but not established.\nloop invariant (x1 > 0 ==> x2 > 0 ==> x3 > 0 ==> d2 < x2) is partially proven to be inductive.\nloop invariant (x1 > 0 ==> x3 > 0 ==> d3 < x3) is partially proven to be inductive.\nloop invariant (x1 <= 0 ==> x2 <= 0 ==> x3 <= 0 ==> d1 < 1) is partially proven to be inductive.\nloop invariant (x1 <= 0 ==> x2 <= 0 ==> x3 <= 0 ==> d2 < 1) is partially proven to be inductive.\nloop invariant (x1 <= 0 ==> x3 <= 0 ==> d3 < 1) is partially proven to be inductive.\nAssertion x2 >= 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int d1 = 1;\n    int d2 = 1;\n    int d3 = 1;\n    int x1 = 1;\n    int x2,x3;\n\n    /*@\nloop invariant i1: 0 <= x1 <= 1;\n\n\nloop invariant i4: d1 >= 1;\nloop invariant i5: d2 >= 1;\nloop invariant i6: d3 >= 1;\n\n\n\n\n\nloop invariant i12: (x1 > 0 ==> x2 > 0 ==> d1 <= x1);\nloop invariant i13: (x1 > 0 ==> x2 > 0 ==> d2 <= x2);\nloop invariant i14: (x1 > 0 ==> x3 > 0 ==> d3 <= x3);\nloop invariant i15: (x1 <= 0 ==> x2 <= 0 ==> x3 <= 0 ==> d1 <= 1);\n\n\nloop invariant i18: (x1 > 0 ==> x2 > 0 ==> x3 > 0 ==> d1 > 0);\nloop invariant i19: (x1 > 0 ==> x2 > 0 ==> x3 > 0 ==> d2 > 0);\nloop invariant i20: (x1 > 0 ==> x3 > 0 ==> d3 > 0);\nloop invariant i21: (x1 <= 0 ==> x2 <= 0 ==> x3 <= 0 ==> d1 > 0);\nloop invariant i22: (x1 <= 0 ==> x2 <= 0 ==> x3 <= 0 ==> d2 > 0);\nloop invariant i23: (x1 <= 0 ==> x3 <= 0 ==> d3 > 0);\n\n\n\n\n\n\n*/\nwhile( x1 > 0) {\n        if(x2 > 0) {\n            if(x3 > 0) {\n                x1 = x1 - d1;\n                x2 = x2 - d2;\n                x3 = x3 - d3;\n            }\n        }\n    }\n\n    {;\n//@ assert(x2 >= 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= x1;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2;\nloop invariant x1 >= x3;\nloop invariant x2 >= x3;\nloop invariant x1 <= (d1 + x2);\nloop invariant x1 <= (d1 + x3);\nloop invariant x2 <= (d2 + x3);\nloop invariant x1 >= (d1 * (x2 - 1));\nloop invariant x1 >= (d1 * (x3 - 1));\nloop invariant x2 >= (d2 * (x3 - 1));\nloop invariant x1 <= (d1 * x2);\nloop invariant x1 <= (d1 * x3);\nloop invariant x2 <= (d2 * x3);\nloop invariant x1 >= (d1 * (x2 - 1) * (x3 - 1));\nloop invariant x1 <= (d1 * x2 * x3);\nloop invariant x2 >= (d2 * (x3 - 1) * (x1 - 1));\nloop invariant x2 <= (d2 * x3 * x1);\nloop invariant x3 >= (d3 * (x2 - 1) * (x1 - 1));\nloop invariant x3 <= (d3 * x2 * x1);\nloop invariant x1 >= (d1 * x2 * x3);\nloop invariant x2 >= (d2 * x3 * x1);\nloop invariant x3 >= (d3 * x2 * x1);\nloop invariant x1 <= (d1 * (x2 + 1) * (x3 + 1));\nloop invariant x2 <= (d2 * (x3 + 1) * (x1 + 1));\nloop invariant x3 <= (d3 * (x2 + 1) * (x1 + 1));\nloop invariant x1 >= (d1 * (x2 + 1) * (x3 + 1));\nloop invariant x2 >= (d2 * (x3 + 1) * (x1 + 1));\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x1 is partially proven to be inductive.\nloop invariant x2 >= 0 is preserved but not established.\nloop invariant x3 >= 0 is preserved but not established.\nloop invariant x1 >= x2 is preserved but not established.\nloop invariant x1 >= x3 is preserved but not established.\nloop invariant x2 >= x3 is preserved but not established.\nloop invariant x1 <= (d1 + x2) is partially proven to be inductive.\nloop invariant x1 <= (d1 + x3) is partially proven to be inductive.\nloop invariant x2 <= (d2 + x3) is partially proven to be inductive.\nloop invariant x1 >= (d1 * (x2 - 1)) is partially proven to be inductive.\nloop invariant x1 >= (d1 * (x3 - 1)) is partially proven to be inductive.\nloop invariant x2 >= (d2 * (x3 - 1)) is partially proven to be inductive.\nloop invariant x1 <= (d1 * x2) is preserved but not established.\nloop invariant x1 <= (d1 * x3) is preserved but not established.\nloop invariant x2 <= (d2 * x3) is partially proven to be inductive.\nloop invariant x1 >= (d1 * (x2 - 1) * (x3 - 1)) is partially proven to be inductive.\nloop invariant x1 <= (d1 * x2 * x3) is partially proven to be inductive.\nloop invariant x2 >= (d2 * (x3 - 1) * (x1 - 1)) is partially proven to be inductive.\nloop invariant x2 <= (d2 * x3 * x1) is partially proven to be inductive.\nloop invariant x3 >= (d3 * (x2 - 1) * (x1 - 1)) is partially proven to be inductive.\nloop invariant x3 <= (d3 * x2 * x1) is partially proven to be inductive.\nloop invariant x1 >= (d1 * x2 * x3) is partially proven to be inductive.\nloop invariant x2 >= (d2 * x3 * x1) is partially proven to be inductive.\nloop invariant x3 >= (d3 * x2 * x1) is partially proven to be inductive.\nloop invariant x1 <= (d1 * (x2 + 1) * (x3 + 1)) is partially proven to be inductive.\nloop invariant x2 <= (d2 * (x3 + 1) * (x1 + 1)) is partially proven to be inductive.\nloop invariant x3 <= (d3 * (x2 + 1) * (x1 + 1)) is partially proven to be inductive.\nloop invariant x1 >= (d1 * (x2 + 1) * (x3 + 1)) is preserved but not established.\nloop invariant x2 >= (d2 * (x3 + 1) * (x1 + 1)) is partially proven to be inductive.\nAssertion x2 >= 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int d1 = 1;\n    int d2 = 1;\n    int d3 = 1;\n    int x1 = 1;\n    int x2,x3;\n\n    /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile( x1 > 0) {\n        if(x2 > 0) {\n            if(x3 > 0) {\n                x1 = x1 - d1;\n                x2 = x2 - d2;\n                x3 = x3 - d3;\n            }\n        }\n    }\n\n    {;\n//@ assert(x2 >= 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x2 <= -d2 ==> (x2 >= 0);\nloop invariant 0 <= x2 <= -d2 ==> (x2 >= 0);\nloop invariant x3 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= d1;\nloop invariant x1 >= d1;\nloop invariant d1 > 0;\nloop invariant d1 > 0;\nloop invariant d2 > 0;\nloop invariant d2 > 0;\nloop invariant d3 > 0;\nloop invariant d3 > 0;\nloop invariant x1 >= d1 ==> (x1 >= d1);\nloop invariant x1 >= d1 ==> (x1 >= d1);\nloop invariant x2 >= d2 ==> (x2 >= d2);\nloop invariant x2 >= d2 ==> (x2 >= d2);\nloop invariant x3 >= d3 ==> (x3 >= d3);\nloop invariant x3 >= d3 ==> (x3 >= d3);\nloop invariant d1 > 0 ==> (d1 > 0);\nloop invariant d1 > 0 ==> (d1 > 0);\nloop invariant d2 > 0 ==> (d2 > 0);\nloop invariant d2 > 0 ==> (d2 > 0);\nloop invariant d3 > 0 ==> (d3 > 0);\nloop invariant d3 > 0 ==> (d3 > 0);\nloop invariant x1 >= d1 ==> (x1 >= d1);\nloop invariant x1 >= d1 ==> (x1 >= d1);\nloop invariant x2 >= d2 ==> (x2 >= d2);\nloop invariant x2 >= d2 ==> (x2 >= d2);\nloop invariant x3 >= d3 ==> (x3 >= d3);\nloop invariant x3 >= d3 ==> (x3 >= d3);\nloop invariant d1 > 0 ==> (d1 > 0);\nloop invariant d1 > 0 ==> (d1 > 0);\nloop invariant d2 > 0 ==> (d2 > 0);\nloop invariant d2 > 0 ==> (d2 > 0);\nloop invariant d3 > 0 ==> (d3 > 0);\nloop invariant d3 > 0 ==> (d3 > 0);\nloop invariant x1 >= d1 ==> (x1 >= d1);\nloop invariant x1 >= d1 ==> (x1 >= d1);\nloop invariant x2 >= d2 ==> (x2 >= d2);\nloop invariant x2 >= d2 ==> (x2 >= d2);\nloop invariant x3 >= d3 ==> (x3 >= d3);\nloop invariant x3 >= d3 ==> (x3 >= d3);\nloop invariant d1 > 0 ==> (d1 > 0);\nloop invariant d1 > 0 ==> (d1 > 0);\nloop invariant d2 > 0 ==> (d2 > 0);\nloop invariant d2 > 0 ==> (d2 > 0);\nloop invariant d3 > 0 ==> (d3 > 0);\nloop invariant d3 > 0 ==> (d3 > 0);\nloop invariant x1 >= d1 ==> (x1 >= d1);\nloop invariant x1 >= d1 ==> (x1 >= d1);\nloop invariant x2 >= d2 ==> (x2 >= d2);\nloop invariant x2 >= d2 ==> (x2 >= d2);\nloop invariant x3 >= d3 ==> (x3 >= d3);\nloop invariant x3 >= d3 ==> (x3 >= d3);\nloop invariant d1 > 0 ==> (d1 > 0);\nloop invariant d1 > 0 ==> (d1 > 0);\nloop invariant d2 > 0 ==> (d2 > 0);\nloop invariant d2 > 0 ==> (d2 > 0);\nloop invariant d3 > 0 ==> (d3 > 0);\nloop invariant d3 > 0 ==> (d3 > 0);\nloop invariant x1 >= d1 ==> (x1 >= d1);\nloop invariant x1 >= d1 ==> (x1 >= d1);\nloop invariant x2 >= d2 ==> (x2 >= d2);\nloop invariant x2 >= d2 ==> (x2 >= d2);\nloop invariant x3 >= d3 ==> (x3 >= d3);\nloop invariant x3 >= d3 ==> (x3 >= d3);\nloop invariant d1 > 0 ==> (d1 > 0);\nloop invariant d1 > 0 ==> (d1 > 0);\nloop invariant d2 > 0 ==> (d2 > 0);\nloop invariant d2 > 0 ==> (d2 > 0);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x2 <= -d2 ==> (x2 >= 0) is partially proven to be inductive.\nloop invariant x3 >= 0 is neither established nor preserved.\nloop invariant x1 >= d1 is established but not preserved.\nloop invariant d1 > 0 is partially proven to be inductive.\nloop invariant d2 > 0 is partially proven to be inductive.\nloop invariant d3 > 0 is partially proven to be inductive.\nloop invariant x1 >= d1 ==> (x1 >= d1) is partially proven to be inductive.\nloop invariant x2 >= d2 ==> (x2 >= d2) is partially proven to be inductive.\nloop invariant x3 >= d3 ==> (x3 >= d3) is partially proven to be inductive.\nloop invariant d1 > 0 ==> (d1 > 0) is partially proven to be inductive.\nloop invariant d2 > 0 ==> (d2 > 0) is partially proven to be inductive.\nloop invariant d3 > 0 ==> (d3 > 0) is partially proven to be inductive.\nAssertion x2 >= 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int d1 = 1;\n    int d2 = 1;\n    int d3 = 1;\n    int x1 = 1;\n    int x2,x3;\n\n    /*@\nloop invariant i1: 0 <= x2 <= -d2 ==> (x2 >= 0);\n\n\nloop invariant i4: d1 > 0;\nloop invariant i5: d2 > 0;\nloop invariant i6: d3 > 0;\nloop invariant i7: x1 >= d1 ==> (x1 >= d1);\nloop invariant i8: x2 >= d2 ==> (x2 >= d2);\nloop invariant i9: x3 >= d3 ==> (x3 >= d3);\nloop invariant i10: d1 > 0 ==> (d1 > 0);\nloop invariant i11: d2 > 0 ==> (d2 > 0);\nloop invariant i12: d3 > 0 ==> (d3 > 0);\n*/\nwhile( x1 > 0) {\n        if(x2 > 0) {\n            if(x3 > 0) {\n                x1 = x1 - d1;\n                x2 = x2 - d2;\n                x3 = x3 - d3;\n            }\n        }\n    }\n\n    {;\n//@ assert(x2 >= 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 22,
                "annotations": "```\n/*@\nloop invariant 0 <= d1 <= 1;\nloop invariant 0 <= d2 <= 1;\nloop invariant 0 <= d3 <= 1;\nloop invariant 0 <= x1;\nloop invariant x2 >= d2*(x1/d1);\nloop invariant x3 >= d3*(x1/d1);\nloop invariant x2 >= d2;\nloop invariant x3 >= d3;\nloop invariant x1 >= 1;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant d1 >= 0;\nloop invariant d2 >= 0;\nloop invariant d3 >= 0;\nloop invariant x1 <= (x2 + x3);\nloop invariant x1 <= (x2 + d2);\nloop invariant x1 <= (x3 + d3);\nloop invariant x1 <= (x2 + d2 + x3 + d3);\nloop invariant x1 <= (x2 + x3 + d2 + d3);\nloop invariant x1 <= (x2 + x3 + d2 + d3 + d1);\nloop invariant x1 <= (x2 + x3 + d2 + d3 + d1 + d1);\nloop invariant x1 <= (x2 + x3 + d2 + d3 + d1 + d1 + d1);\nloop invariant x1 <= (x2 + x3 + d2 + d3 + d1 + d1 + d1 + d1);\nloop invariant x1 <= (x2 + x3 + d2 + d3 + d1 + d1 + d1 + d1 + d1);\nloop invariant x1 <= (x2 + x3 + d2 + d3 + d1 + d1 + d1 + d1 + d1 + d1);\nloop invariant x1 <= (x2 + x3 + d2 + d3 + d1 + d1 + d1 + d1 + d1 + d1 + d1);\nloop invariant x1 <= (x2 + x3 + d2 + d3 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1);\nloop invariant x1 <= (x2 + x3 + d2 + d3 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1);\nloop invariant x1 <= (x2 + x3 + d2 + d3 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1);\nloop invariant x1 <= (x2 + x3 + d2 + d3 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1);\nloop invariant x1 <= (x2 + x3 + d2 + d3 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1);\nloop invariant x1 <= (x2 + x3 + d2 + d3 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1);\nloop invariant x1 <= (x2 + x3 + d2 + d3 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1);\nloop invariant x1 <= (x2 + x3 + d2 + d3 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1);\nloop invariant x1 <= (x2 + x3 + d2 + d3 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1);\nloop invariant x1 <= (x2 + x3 + d2 + d3 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= d1 <= 1 is partially proven to be inductive.\nloop invariant 0 <= d2 <= 1 is partially proven to be inductive.\nloop invariant 0 <= d3 <= 1 is partially proven to be inductive.\nloop invariant 0 <= x1 is partially proven to be inductive.\nloop invariant x2 >= d2*(x1/d1) is neither established nor preserved.\nloop invariant x3 >= d3*(x1/d1) is neither established nor preserved.\nloop invariant x2 >= d2 is established but not preserved.\nloop invariant x3 >= d3 is established but not preserved.\nloop invariant x1 >= 1 is established but not preserved.\nloop invariant x2 >= 0 is partially proven to be inductive.\nloop invariant x3 >= 0 is partially proven to be inductive.\nloop invariant d1 >= 0 is partially proven to be inductive.\nloop invariant d2 >= 0 is partially proven to be inductive.\nloop invariant d3 >= 0 is partially proven to be inductive.\nloop invariant x1 <= (x2 + x3) is established but not preserved.\nloop invariant x1 <= (x2 + d2) is established but not preserved.\nloop invariant x1 <= (x3 + d3) is established but not preserved.\nloop invariant x1 <= (x2 + d2 + x3 + d3) is partially proven to be inductive.\nloop invariant x1 <= (x2 + x3 + d2 + d3) is partially proven to be inductive.\nloop invariant x1 <= (x2 + x3 + d2 + d3 + d1) is partially proven to be inductive.\nloop invariant x1 <= (x2 + x3 + d2 + d3 + d1 + d1) is partially proven to be inductive.\nloop invariant x1 <= (x2 + x3 + d2 + d3 + d1 + d1 + d1) is partially proven to be inductive.\nloop invariant x1 <= (x2 + x3 + d2 + d3 + d1 + d1 + d1 + d1) is partially proven to be inductive.\nloop invariant x1 <= (x2 + x3 + d2 + d3 + d1 + d1 + d1 + d1 + d1) is partially proven to be inductive.\nloop invariant x1 <= (x2 + x3 + d2 + d3 + d1 + d1 + d1 + d1 + d1 + d1) is partially proven to be inductive.\nloop invariant x1 <= (x2 + x3 + d2 + d3 + d1 + d1 + d1 + d1 + d1 + d1 + d1) is partially proven to be inductive.\nloop invariant x1 <= (x2 + x3 + d2 + d3 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1) is partially proven to be inductive.\nloop invariant x1 <= (x2 + x3 + d2 + d3 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1) is partially proven to be inductive.\nloop invariant x1 <= (x2 + x3 + d2 + d3 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1) is partially proven to be inductive.\nloop invariant x1 <= (x2 + x3 + d2 + d3 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1) is partially proven to be inductive.\nloop invariant x1 <= (x2 + x3 + d2 + d3 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1) is partially proven to be inductive.\nloop invariant x1 <= (x2 + x3 + d2 + d3 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1) is partially proven to be inductive.\nloop invariant x1 <= (x2 + x3 + d2 + d3 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1) is partially proven to be inductive.\nloop invariant x1 <= (x2 + x3 + d2 + d3 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1) is partially proven to be inductive.\nloop invariant x1 <= (x2 + x3 + d2 + d3 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1) is partially proven to be inductive.\nloop invariant x1 <= (x2 + x3 + d2 + d3 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1) is partially proven to be inductive.\nAssertion x2 >= 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int d1 = 1;\n    int d2 = 1;\n    int d3 = 1;\n    int x1 = 1;\n    int x2,x3;\n\n    /*@\nloop invariant i1: 0 <= d1 <= 1;\nloop invariant i2: 0 <= d2 <= 1;\nloop invariant i3: 0 <= d3 <= 1;\nloop invariant i4: 0 <= x1;\n\n\n\n\n\n\n\nloop invariant i12: d1 >= 0;\nloop invariant i13: d2 >= 0;\nloop invariant i14: d3 >= 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile( x1 > 0) {\n        if(x2 > 0) {\n            if(x3 > 0) {\n                x1 = x1 - d1;\n                x2 = x2 - d2;\n                x3 = x3 - d3;\n            }\n        }\n    }\n\n    {;\n//@ assert(x2 >= 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x1 <= 1;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant 0 <= x1 <= 1;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant 0 <= x1 <= 1;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant 0 <= x1 <= 1;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant 0 <= x1 <= 1;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant 0 <= x1 <= 1;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant 0 <= x1 <= 1;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant 0 <= x1 <= 1;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant 0 <= x1 <= 1;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant 0 <= x1 <= 1;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant 0 <= x1 <= 1;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant 0 <= x1 <= 1;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant 0 <= x1 <= 1;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant 0 <= x1 <= 1;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant 0 <= x1 <= 1;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant 0 <= x1 <= 1;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant 0 <= x1 <= 1;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x1 <= 1 is established but not preserved.\nloop invariant x2 >= 0 is neither established nor preserved.\nloop invariant x3 >= 0 is neither established nor preserved.\nAssertion x2 >= 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int d1 = 1;\n    int d2 = 1;\n    int d3 = 1;\n    int x1 = 1;\n    int x2,x3;\n\n    /*@\n\n\n\n*/\nwhile( x1 > 0) {\n        if(x2 > 0) {\n            if(x3 > 0) {\n                x1 = x1 - d1;\n                x2 = x2 - d2;\n                x3 = x3 - d3;\n            }\n        }\n    }\n\n    {;\n//@ assert(x2 >= 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= x1 <= 100000;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 <= 100000;\nloop invariant x3 <= 100000;\nloop invariant x2 + x3 <= d1 * 100000;\nloop invariant x2 + x3 >= d1 * 100000;\nloop invariant x1 - d1 * 100000 <= 0;\nloop invariant x1 - d1 * 100000 >= 0;\nloop invariant x1 - d1 * 100000 <= 1;\nloop invariant x1 - d1 * 100000 >= 1;\nloop invariant x1 - d1 * 100000 <= 0;\nloop invariant x1 - d1 * 100000 >= 0;\nloop invariant x1 - d1 * 100000 <= 1;\nloop invariant x1 - d1 * 100000 >= 1;\nloop invariant x1 - d1 * 100000 <= 0;\nloop invariant x1 - d1 * 100000 >= 0;\nloop invariant x1 - d1 * 100000 <= 1;\nloop invariant x1 - d1 * 100000 >= 1;\nloop invariant x1 - d1 * 100000 <= 0;\nloop invariant x1 - d1 * 100000 >= 0;\nloop invariant x1 - d1 * 100000 <= 1;\nloop invariant x1 - d1 * 100000 >= 1;\nloop invariant x1 - d1 * 100000 <= 0;\nloop invariant x1 - d1 * 100000 >= 0;\nloop invariant x1 - d1 * 100000 <= 1;\nloop invariant x1 - d1 * 100000 >= 1;\nloop invariant x1 - d1 * 100000 <= 0;\nloop invariant x1 - d1 * 100000 >= 0;\nloop invariant x1 - d1 * 100000 <= 1;\nloop invariant x1 - d1 * 100000 >= 1;\nloop invariant x1 - d1 * 100000 <= 0;\nloop invariant x1 - d1 * 100000 >= 0;\nloop invariant x1 - d1 * 100000 <= 1;\nloop invariant x1 - d1 * 100000 >= 1;\nloop invariant x1 - d1 * 100000 <= 0;\nloop invariant x1 - d1 * 100000 >= 0;\nloop invariant x1 - d1 * 100000 <= 1;\nloop invariant x1 - d1 * 100000 >= 1;\nloop invariant x1 - d1 * 100000 <= 0;\nloop invariant x1 - d1 * 100000 >= 0;\nloop invariant x1 - d1 * 100000 <= 1;\nloop invariant x1 - d1 * 100000 >= 1;\nloop invariant x1 - d1 * 100000 <= 0;\nloop invariant x1 - d1 * 100000 >= 0;\nloop invariant x1 - d1 * 100000 <= 1;\nloop invariant x1 - d1 * 100000 >= 1;\nloop invariant x1 - d1 * 100000 <= 0;\nloop invariant x1 - d1 * 100000 >= 0;\nloop invariant x1 - d1 * 100000 <= 1;\nloop invariant x1 - d1 * 100000 >= 1;\nloop invariant x1 - d1 * 100000 <= 0;\nloop invariant x1 - d1 * 100000 >= 0;\nloop invariant x1 - d1 * 100000 <= 1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x1 <= 100000 is partially proven to be inductive.\nloop invariant x2 >= 0 is preserved but not established.\nloop invariant x3 >= 0 is preserved but not established.\nloop invariant x2 <= 100000 is preserved but not established.\nloop invariant x3 <= 100000 is preserved but not established.\nloop invariant x2 + x3 <= d1 * 100000 is preserved but not established.\nloop invariant x2 + x3 >= d1 * 100000 is preserved but not established.\nloop invariant x1 - d1 * 100000 <= 0 is partially proven to be inductive.\nloop invariant x1 - d1 * 100000 >= 0 is preserved but not established.\nloop invariant x1 - d1 * 100000 <= 1 is partially proven to be inductive.\nloop invariant x1 - d1 * 100000 >= 1 is partially proven to be inductive.\nAssertion x2 >= 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int d1 = 1;\n    int d2 = 1;\n    int d3 = 1;\n    int x1 = 1;\n    int x2,x3;\n\n    /*@\n\n\n\n\n\n\n\nloop invariant i8: x1 - d1 * 100000 <= 0;\n\nloop invariant i10: x1 - d1 * 100000 <= 1;\n\n*/\nwhile( x1 > 0) {\n        if(x2 > 0) {\n            if(x3 > 0) {\n                x1 = x1 - d1;\n                x2 = x2 - d2;\n                x3 = x3 - d3;\n            }\n        }\n    }\n\n    {;\n//@ assert(x2 >= 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x2 <= x1;\nloop invariant x2 <= x3;\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2;\nloop invariant d1 >= 0;\nloop invariant d2 >= 0;\nloop invariant d3 >= 0;\nloop invariant x2 >= x2 - d2;\nloop invariant x3 >= x3 - d3;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x2 <= x1 is neither established nor preserved.\nloop invariant x2 <= x3 is neither established nor preserved.\nloop invariant x1 >= 0 is partially proven to be inductive.\nloop invariant x2 >= 0 is partially proven to be inductive.\nloop invariant x3 >= 0 is partially proven to be inductive.\nloop invariant x1 >= x2 is partially proven to be inductive.\nloop invariant d1 >= 0 is partially proven to be inductive.\nloop invariant d2 >= 0 is partially proven to be inductive.\nloop invariant d3 >= 0 is partially proven to be inductive.\nloop invariant x2 >= x2 - d2 is partially proven to be inductive.\nloop invariant x3 >= x3 - d3 is partially proven to be inductive.\nAssertion x2 >= 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int d1 = 1;\n    int d2 = 1;\n    int d3 = 1;\n    int x1 = 1;\n    int x2,x3;\n\n    /*@\n\n\n\n\n\n\nloop invariant i7: d1 >= 0;\nloop invariant i8: d2 >= 0;\nloop invariant i9: d3 >= 0;\nloop invariant i10: x2 >= x2 - d2;\nloop invariant i11: x3 >= x3 - d3;\n*/\nwhile( x1 > 0) {\n        if(x2 > 0) {\n            if(x3 > 0) {\n                x1 = x1 - d1;\n                x2 = x2 - d2;\n                x3 = x3 - d3;\n            }\n        }\n    }\n\n    {;\n//@ assert(x2 >= 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant 0 <= x2 <= 1;\nloop invariant x1 >= 0;\nloop invariant x2 <= d2 * x1;\nloop invariant x3 <= d3 * x1;\nloop invariant x1 = x1 - d1 * (x2/d2) * (x3/d3);\nloop invariant x2 = x2 - d2 * (x2/d2) * (x3/d3);\nloop invariant x3 = x3 - d3 * (x2/d2) * (x3/d3);\nloop invariant x1 - x2 - x3 >= 0;\nloop invariant x1 - x2 - x3 <= 0;\nloop invariant x1 - x2 - x3 == 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2 + x3;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2 + x3;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2 + x3;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2 + x3;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2 + x3;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2 + x3;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2 + x3;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2 + x3;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2 + x3;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2 + x3;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2 + x3;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2 + x3;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2 + x3;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2 + x3;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2 + x3;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2 + x3;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2 + x3;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2 + x3;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2 + x3;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2 + x3;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2 + x3;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2 + x3;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2 + x3;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2 + x3;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2 + x3;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2 + x3;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2 + x3;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2 + x3;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2 + x3;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2 + x3;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2 + x3;\nloop invariant x2 >= 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 19: Assignment operators not allowed in annotations.",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int d1 = 1;\n    int d2 = 1;\n    int d3 = 1;\n    int x1 = 1;\n    int x2,x3;\n\n    /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile( x1 > 0) {\n        if(x2 > 0) {\n            if(x3 > 0) {\n                x1 = x1 - d1;\n                x2 = x2 - d2;\n                x3 = x3 - d3;\n            }\n        }\n    }\n\n    {;\n//@ assert(x2 >= 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 14,
                "annotations": "```\n/*@\nloop invariant 0 <= x1 <= 1;\nloop invariant 0 <= x2 <= 1;\nloop invariant 0 <= x3 <= 1;\nloop invariant 0 <= d1 <= 1;\nloop invariant 0 <= d2 <= 1;\nloop invariant 0 <= d3 <= 1;\nloop invariant d1 >= 0;\nloop invariant d2 >= 0;\nloop invariant d3 >= 0;\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2;\nloop invariant x2 >= x3;\nloop invariant x3 >= d3;\nloop invariant x1 >= d1;\nloop invariant x2 >= d2;\nloop invariant x3 >= d3;\nloop invariant x1 >= x2 + x3;\nloop invariant x2 >= x3 + d3;\nloop invariant x3 >= d3 + d3;\nloop invariant x1 >= x2 + d2 + d3;\nloop invariant x2 >= x3 + d3 + d3;\nloop invariant x3 >= d3 + d3 + d3;\nloop invariant x1 >= x2 + d2 + d3 + d3;\nloop invariant x2 >= x3 + d3 + d3 + d3;\nloop invariant x3 >= d3 + d3 + d3 + d3;\nloop invariant x1 >= x2 + d2 + d3 + d3 + d3;\nloop invariant x2 >= x3 + d3 + d3 + d3 + d3;\nloop invariant x3 >= d3 + d3 + d3 + d3 + d3;\nloop invariant x1 >= x2 + d2 + d3 + d3 + d3 + d3;\nloop invariant x2 >= x3 + d3 + d3 + d3 + d3 + d3;\nloop invariant x3 >= d3 + d3 + d3 + d3 + d3 + d3;\nloop invariant x1 >= x2 + d2 + d3 + d3 + d3 + d3 + d3;\nloop invariant x2 >= x3 + d3 + d3 + d3 + d3 + d3 + d3;\nloop invariant x3 >= d3 + d3 + d3 + d3 + d3 + d3 + d3;\nloop invariant x1 >= x2 + d2 + d3 + d3 + d3 + d3 + d3 + d3;\nloop invariant x2 >= x3 + d3 + d3 + d3 + d3 + d3 + d3 + d3;\nloop invariant x3 >= d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3;\nloop invariant x1 >= x2 + d2 + d3 + d3 + d3 + d3 + d3 + d3 + d3;\nloop invariant x2 >= x3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3;\nloop invariant x3 >= d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3;\nloop invariant x1 >= x2 + d2 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3;\nloop invariant x2 >= x3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3;\nloop invariant x3 >= d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3;\nloop invariant x1 >= x2 + d2 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3;\nloop invariant x2 >= x3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3;\nloop invariant x3 >= d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3;\nloop invariant x1 >= x2 + d2 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3;\nloop invariant x2 >= x3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x1 <= 1 is partially proven to be inductive.\nloop invariant 0 <= x2 <= 1 is preserved but not established.\nloop invariant 0 <= x3 <= 1 is preserved but not established.\nloop invariant 0 <= d1 <= 1 is partially proven to be inductive.\nloop invariant 0 <= d2 <= 1 is partially proven to be inductive.\nloop invariant 0 <= d3 <= 1 is partially proven to be inductive.\nloop invariant d1 >= 0 is partially proven to be inductive.\nloop invariant d2 >= 0 is partially proven to be inductive.\nloop invariant d3 >= 0 is partially proven to be inductive.\nloop invariant x1 >= 0 is partially proven to be inductive.\nloop invariant x2 >= 0 is partially proven to be inductive.\nloop invariant x3 >= 0 is partially proven to be inductive.\nloop invariant x1 >= x2 is partially proven to be inductive.\nloop invariant x2 >= x3 is preserved but not established.\nloop invariant x3 >= d3 is preserved but not established.\nloop invariant x1 >= d1 is partially proven to be inductive.\nloop invariant x2 >= d2 is partially proven to be inductive.\nloop invariant x1 >= x2 + x3 is preserved but not established.\nloop invariant x2 >= x3 + d3 is partially proven to be inductive.\nloop invariant x3 >= d3 + d3 is partially proven to be inductive.\nloop invariant x1 >= x2 + d2 + d3 is partially proven to be inductive.\nloop invariant x2 >= x3 + d3 + d3 is partially proven to be inductive.\nloop invariant x3 >= d3 + d3 + d3 is partially proven to be inductive.\nloop invariant x1 >= x2 + d2 + d3 + d3 is partially proven to be inductive.\nloop invariant x2 >= x3 + d3 + d3 + d3 is partially proven to be inductive.\nloop invariant x3 >= d3 + d3 + d3 + d3 is partially proven to be inductive.\nloop invariant x1 >= x2 + d2 + d3 + d3 + d3 is partially proven to be inductive.\nloop invariant x2 >= x3 + d3 + d3 + d3 + d3 is partially proven to be inductive.\nloop invariant x3 >= d3 + d3 + d3 + d3 + d3 is partially proven to be inductive.\nloop invariant x1 >= x2 + d2 + d3 + d3 + d3 + d3 is partially proven to be inductive.\nloop invariant x2 >= x3 + d3 + d3 + d3 + d3 + d3 is partially proven to be inductive.\nloop invariant x3 >= d3 + d3 + d3 + d3 + d3 + d3 is partially proven to be inductive.\nloop invariant x1 >= x2 + d2 + d3 + d3 + d3 + d3 + d3 is partially proven to be inductive.\nloop invariant x2 >= x3 + d3 + d3 + d3 + d3 + d3 + d3 is partially proven to be inductive.\nloop invariant x3 >= d3 + d3 + d3 + d3 + d3 + d3 + d3 is partially proven to be inductive.\nloop invariant x1 >= x2 + d2 + d3 + d3 + d3 + d3 + d3 + d3 is partially proven to be inductive.\nloop invariant x2 >= x3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 is partially proven to be inductive.\nloop invariant x3 >= d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 is partially proven to be inductive.\nloop invariant x1 >= x2 + d2 + d3 + d3 + d3 + d3 + d3 + d3 + d3 is partially proven to be inductive.\nloop invariant x2 >= x3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 is partially proven to be inductive.\nloop invariant x3 >= d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 is partially proven to be inductive.\nloop invariant x1 >= x2 + d2 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 is partially proven to be inductive.\nloop invariant x2 >= x3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 is partially proven to be inductive.\nloop invariant x3 >= d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 is partially proven to be inductive.\nloop invariant x1 >= x2 + d2 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 is partially proven to be inductive.\nloop invariant x2 >= x3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 is partially proven to be inductive.\nloop invariant x3 >= d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 is partially proven to be inductive.\nloop invariant x1 >= x2 + d2 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 is partially proven to be inductive.\nloop invariant x2 >= x3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 is partially proven to be inductive.\nAssertion x2 >= 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int d1 = 1;\n    int d2 = 1;\n    int d3 = 1;\n    int x1 = 1;\n    int x2,x3;\n\n    /*@\nloop invariant i1: 0 <= x1 <= 1;\n\n\nloop invariant i4: 0 <= d1 <= 1;\nloop invariant i5: 0 <= d2 <= 1;\nloop invariant i6: 0 <= d3 <= 1;\nloop invariant i7: d1 >= 0;\nloop invariant i8: d2 >= 0;\nloop invariant i9: d3 >= 0;\nloop invariant i10: x1 >= 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile( x1 > 0) {\n        if(x2 > 0) {\n            if(x3 > 0) {\n                x1 = x1 - d1;\n                x2 = x2 - d2;\n                x3 = x3 - d3;\n            }\n        }\n    }\n\n    {;\n//@ assert(x2 >= 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x1;\nloop invariant 0 <= x2;\nloop invariant 0 <= x3;\nloop invariant x1 >= d1;\nloop invariant x2 >= d2;\nloop invariant x3 >= d3;\nloop invariant x1 - d1 * (x2 / d2) <= x3;\nloop invariant x2 - d2 * (x3 / d3) <= x1;\nloop invariant x3 - d3 * (x1 / d1) <= x2;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x1 is partially proven to be inductive.\nloop invariant 0 <= x2 is preserved but not established.\nloop invariant 0 <= x3 is preserved but not established.\nloop invariant x1 >= d1 is established but not preserved.\nloop invariant x2 >= d2 is neither established nor preserved.\nloop invariant x3 >= d3 is neither established nor preserved.\nloop invariant x1 - d1 * (x2 / d2) <= x3 is established but not preserved.\nloop invariant x2 - d2 * (x3 / d3) <= x1 is neither established nor preserved.\nloop invariant x3 - d3 * (x1 / d1) <= x2 is neither established nor preserved.\nAssertion x2 >= 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int d1 = 1;\n    int d2 = 1;\n    int d3 = 1;\n    int x1 = 1;\n    int x2,x3;\n\n    /*@\n\n\n\n\n\n\n\n\n\n*/\nwhile( x1 > 0) {\n        if(x2 > 0) {\n            if(x3 > 0) {\n                x1 = x1 - d1;\n                x2 = x2 - d2;\n                x3 = x3 - d3;\n            }\n        }\n    }\n\n    {;\n//@ assert(x2 >= 0);\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 172: Assignment operators not allowed in annotations.",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int d1 = 1;\n    int d2 = 1;\n    int d3 = 1;\n    int x1 = 1;\n    int x2,x3;\n\n    /*@\nloop invariant i1: 0 <= x2 <= 1;\nloop invariant i2: 0 <= d1 <= 100000;\nloop invariant i3: 0 <= d2 <= 100000;\nloop invariant i4: 0 <= d3 <= 100000;\nloop invariant i5: 0 <= x1 <= 100000;\nloop invariant i6: 0 <= x2 <= 100000;\nloop invariant i7: 0 <= x3 <= 100000;\nloop invariant i8: d1 >= 0;\nloop invariant i9: d2 >= 0;\nloop invariant i10: d3 >= 0;\nloop invariant i11: x1 >= 0;\nloop invariant i12: x2 >= 0;\nloop invariant i13: x3 >= 0;\nloop invariant i14: x1 >= x2;\nloop invariant i15: x1 >= x3;\nloop invariant i16: x2 >= x3;\nloop invariant i17: x1 >= d1;\nloop invariant i18: x2 >= d2;\nloop invariant i19: x3 >= d3;\nloop invariant i20: x1 >= d1 * x2 + d2 * x3;\nloop invariant i21: x2 >= d2 * x3;\nloop invariant i22: x3 >= d3 * x3;\nloop invariant i23: x1 >= d1 * x2 + d2 * x3 + d3 * x3;\nloop invariant i24: x2 >= d2 * x3 + d3 * x3;\nloop invariant i25: x1 >= d1 * x2 + d2 * x3 + d3 * x3 + d3 * x3;\nloop invariant i26: x2 >= d2 * x3 + d3 * x3 + d3 * x3;\nloop invariant i27: x3 >= d3 * x3 + d3 * x3;\nloop invariant i28: x1 >= d1 * x2 + d2 * x3 + d3 * x3 + d3 * x3 + d3 * x3;\nloop invariant i29: x2 >= d2 * x3 + d3 * x3 + d3 * x3 + d3 * x3;\nloop invariant i30: x3 >= d3 * x3 + d3 * x3 + d3 * x3;\nloop invariant i31: x1 >= d1 * x2 + d2 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3;\nloop invariant i32: x2 >= d2 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3;\nloop invariant i33: x3 >= d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3;\nloop invariant i34: x1 >= d1 * x2 + d2 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3;\nloop invariant i35: x2 >= d2 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3;\nloop invariant i36: x3 >= d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3;\nloop invariant i37: x1 >= d1 * x2 + d2 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3;\nloop invariant i38: x2 >= d2 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3;\nloop invariant i39: x3 >= d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3;\nloop invariant i40: x1 >= d1 * x2 + d2 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3;\nloop invariant i41: x2 >= d2 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3;\nloop invariant i42: x3 >= d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3 + d3 * x3;\nloop invariant i43: x1 >= x2 + x3;\nloop invariant i44: d1 >= 1;\nloop invariant i45: d2 >= 1;\nloop invariant i46: d3 >= 1;\nloop invariant i47: 0 <= d1 <= 1;\nloop invariant i48: 0 <= d2 <= 1;\nloop invariant i49: 0 <= d3 <= 1;\nloop invariant i50: 1 <= x1 <= 1;\nloop invariant i51: 0 <= x3 <= 1;\nloop invariant i52: (x2 == 0) ==> (x1 >= 0);\nloop invariant i53: (x3 == 0) ==> (x2 >= 0);\nloop invariant i54: (x2 >= 0) ==> (x1 >= 0);\nloop invariant i55: (x3 >= 0) ==> (x2 >= 0);\nloop invariant i56: (x2 == 0) ==> (x1 <= 1);\nloop invariant i57: (x3 == 0) ==> (x2 <= 1);\nloop invariant i58: (x2 >= 0) ==> (x1 <= 1);\nloop invariant i59: (x3 >= 0) ==> (x2 <= 1);\nloop invariant i60: (x2 == 0) ==> (x1 == 1);\nloop invariant i61: (x3 == 0) ==> (x2 == 1);\nloop invariant i62: ( x1 == 1 ==> ( ( x2 == 1 && x3 == 1 ) ) );\nloop invariant i63: ( x1 < 1 ==> !( x2 > 0 && x3 > 0 ) );\nloop invariant i64: 0 <= x1 <= 1;\nloop invariant i65: (x1 > 0 ==> x2 > 0 ==> x3 > 0);\nloop invariant i66: (x1 <= 0 ==> x2 <= 0 ==> x3 <= 0);\nloop invariant i67: (x1 > 0 ==> x2 > 0 ==> d1 <= x1);\nloop invariant i68: (x1 > 0 ==> x2 > 0 ==> d2 <= x2);\nloop invariant i69: (x1 > 0 ==> x3 > 0 ==> d3 <= x3);\nloop invariant i70: (x1 <= 0 ==> x2 <= 0 ==> x3 <= 0 ==> d1 <= 1);\nloop invariant i71: (x1 <= 0 ==> x2 <= 0 ==> x3 <= 0 ==> d2 <= 1);\nloop invariant i72: (x1 <= 0 ==> x2 <= 0 ==> x3 <= 0 ==> d3 <= 1);\nloop invariant i73: (x1 > 0 ==> x2 > 0 ==> x3 > 0 ==> d1 > 0);\nloop invariant i74: (x1 > 0 ==> x2 > 0 ==> x3 > 0 ==> d2 > 0);\nloop invariant i75: (x1 > 0 ==> x3 > 0 ==> d3 > 0);\nloop invariant i76: (x1 <= 0 ==> x2 <= 0 ==> x3 <= 0 ==> d1 > 0);\nloop invariant i77: (x1 <= 0 ==> x2 <= 0 ==> x3 <= 0 ==> d2 > 0);\nloop invariant i78: (x1 <= 0 ==> x3 <= 0 ==> d3 > 0);\nloop invariant i79: (x1 > 0 ==> x2 > 0 ==> x3 > 0 ==> d1 < x1);\nloop invariant i80: (x1 > 0 ==> x2 > 0 ==> x3 > 0 ==> d2 < x2);\nloop invariant i81: (x1 > 0 ==> x3 > 0 ==> d3 < x3);\nloop invariant i82: (x1 <= 0 ==> x2 <= 0 ==> x3 <= 0 ==> d1 < 1);\nloop invariant i83: (x1 <= 0 ==> x2 <= 0 ==> x3 <= 0 ==> d2 < 1);\nloop invariant i84: (x1 <= 0 ==> x3 <= 0 ==> d3 < 1);\nloop invariant i85: 0 <= x1;\nloop invariant i86: x1 <= (d1 + x2);\nloop invariant i87: x1 <= (d1 + x3);\nloop invariant i88: x2 <= (d2 + x3);\nloop invariant i89: x1 >= (d1 * (x2 - 1));\nloop invariant i90: x1 >= (d1 * (x3 - 1));\nloop invariant i91: x2 >= (d2 * (x3 - 1));\nloop invariant i92: x1 <= (d1 * x2);\nloop invariant i93: x1 <= (d1 * x3);\nloop invariant i94: x2 <= (d2 * x3);\nloop invariant i95: x1 >= (d1 * (x2 - 1) * (x3 - 1));\nloop invariant i96: x1 <= (d1 * x2 * x3);\nloop invariant i97: x2 >= (d2 * (x3 - 1) * (x1 - 1));\nloop invariant i98: x2 <= (d2 * x3 * x1);\nloop invariant i99: x3 >= (d3 * (x2 - 1) * (x1 - 1));\nloop invariant i100: x3 <= (d3 * x2 * x1);\nloop invariant i101: x1 >= (d1 * x2 * x3);\nloop invariant i102: x2 >= (d2 * x3 * x1);\nloop invariant i103: x3 >= (d3 * x2 * x1);\nloop invariant i104: x1 <= (d1 * (x2 + 1) * (x3 + 1));\nloop invariant i105: x2 <= (d2 * (x3 + 1) * (x1 + 1));\nloop invariant i106: x3 <= (d3 * (x2 + 1) * (x1 + 1));\nloop invariant i107: x1 >= (d1 * (x2 + 1) * (x3 + 1));\nloop invariant i108: x2 >= (d2 * (x3 + 1) * (x1 + 1));\nloop invariant i109: 0 <= x2 <= -d2 ==> (x2 >= 0);\nloop invariant i110: d1 > 0;\nloop invariant i111: d2 > 0;\nloop invariant i112: d3 > 0;\nloop invariant i113: x1 >= d1 ==> (x1 >= d1);\nloop invariant i114: x2 >= d2 ==> (x2 >= d2);\nloop invariant i115: x3 >= d3 ==> (x3 >= d3);\nloop invariant i116: d1 > 0 ==> (d1 > 0);\nloop invariant i117: d2 > 0 ==> (d2 > 0);\nloop invariant i118: d3 > 0 ==> (d3 > 0);\nloop invariant i119: x2 >= d2*(x1/d1);\nloop invariant i120: x3 >= d3*(x1/d1);\nloop invariant i121: x1 >= 1;\nloop invariant i122: x1 <= (x2 + x3);\nloop invariant i123: x1 <= (x2 + d2);\nloop invariant i124: x1 <= (x3 + d3);\nloop invariant i125: x1 <= (x2 + d2 + x3 + d3);\nloop invariant i126: x1 <= (x2 + x3 + d2 + d3);\nloop invariant i127: x1 <= (x2 + x3 + d2 + d3 + d1);\nloop invariant i128: x1 <= (x2 + x3 + d2 + d3 + d1 + d1);\nloop invariant i129: x1 <= (x2 + x3 + d2 + d3 + d1 + d1 + d1);\nloop invariant i130: x1 <= (x2 + x3 + d2 + d3 + d1 + d1 + d1 + d1);\nloop invariant i131: x1 <= (x2 + x3 + d2 + d3 + d1 + d1 + d1 + d1 + d1);\nloop invariant i132: x1 <= (x2 + x3 + d2 + d3 + d1 + d1 + d1 + d1 + d1 + d1);\nloop invariant i133: x1 <= (x2 + x3 + d2 + d3 + d1 + d1 + d1 + d1 + d1 + d1 + d1);\nloop invariant i134: x1 <= (x2 + x3 + d2 + d3 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1);\nloop invariant i135: x1 <= (x2 + x3 + d2 + d3 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1);\nloop invariant i136: x1 <= (x2 + x3 + d2 + d3 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1);\nloop invariant i137: x1 <= (x2 + x3 + d2 + d3 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1);\nloop invariant i138: x1 <= (x2 + x3 + d2 + d3 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1);\nloop invariant i139: x1 <= (x2 + x3 + d2 + d3 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1);\nloop invariant i140: x1 <= (x2 + x3 + d2 + d3 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1);\nloop invariant i141: x1 <= (x2 + x3 + d2 + d3 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1);\nloop invariant i142: x1 <= (x2 + x3 + d2 + d3 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1);\nloop invariant i143: x1 <= (x2 + x3 + d2 + d3 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1 + d1);\nloop invariant i144: x2 <= 100000;\nloop invariant i145: x3 <= 100000;\nloop invariant i146: x2 + x3 <= d1 * 100000;\nloop invariant i147: x2 + x3 >= d1 * 100000;\nloop invariant i148: x1 - d1 * 100000 <= 0;\nloop invariant i149: x1 - d1 * 100000 >= 0;\nloop invariant i150: x1 - d1 * 100000 <= 1;\nloop invariant i151: x1 - d1 * 100000 >= 1;\nloop invariant i152: 0 <= x2 <= x1;\nloop invariant i153: x2 <= x3;\nloop invariant i154: x2 >= x2 - d2;\nloop invariant i155: x3 >= x3 - d3;\nloop invariant i156: x2 <= d2 * x1;\nloop invariant i157: x3 <= d3 * x1;\nloop invariant i158: x1 = x1 - d1 * (x2/d2) * (x3/d3);\nloop invariant i159: x2 = x2 - d2 * (x2/d2) * (x3/d3);\nloop invariant i160: x3 = x3 - d3 * (x2/d2) * (x3/d3);\nloop invariant i161: x1 - x2 - x3 >= 0;\nloop invariant i162: x1 - x2 - x3 <= 0;\nloop invariant i163: x1 - x2 - x3 == 0;\nloop invariant i164: x2 >= x3 + d3;\nloop invariant i165: x3 >= d3 + d3;\nloop invariant i166: x1 >= x2 + d2 + d3;\nloop invariant i167: x2 >= x3 + d3 + d3;\nloop invariant i168: x3 >= d3 + d3 + d3;\nloop invariant i169: x1 >= x2 + d2 + d3 + d3;\nloop invariant i170: x2 >= x3 + d3 + d3 + d3;\nloop invariant i171: x3 >= d3 + d3 + d3 + d3;\nloop invariant i172: x1 >= x2 + d2 + d3 + d3 + d3;\nloop invariant i173: x2 >= x3 + d3 + d3 + d3 + d3;\nloop invariant i174: x3 >= d3 + d3 + d3 + d3 + d3;\nloop invariant i175: x1 >= x2 + d2 + d3 + d3 + d3 + d3;\nloop invariant i176: x2 >= x3 + d3 + d3 + d3 + d3 + d3;\nloop invariant i177: x3 >= d3 + d3 + d3 + d3 + d3 + d3;\nloop invariant i178: x1 >= x2 + d2 + d3 + d3 + d3 + d3 + d3;\nloop invariant i179: x2 >= x3 + d3 + d3 + d3 + d3 + d3 + d3;\nloop invariant i180: x3 >= d3 + d3 + d3 + d3 + d3 + d3 + d3;\nloop invariant i181: x1 >= x2 + d2 + d3 + d3 + d3 + d3 + d3 + d3;\nloop invariant i182: x2 >= x3 + d3 + d3 + d3 + d3 + d3 + d3 + d3;\nloop invariant i183: x3 >= d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3;\nloop invariant i184: x1 >= x2 + d2 + d3 + d3 + d3 + d3 + d3 + d3 + d3;\nloop invariant i185: x2 >= x3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3;\nloop invariant i186: x3 >= d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3;\nloop invariant i187: x1 >= x2 + d2 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3;\nloop invariant i188: x2 >= x3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3;\nloop invariant i189: x3 >= d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3;\nloop invariant i190: x1 >= x2 + d2 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3;\nloop invariant i191: x2 >= x3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3;\nloop invariant i192: x3 >= d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3;\nloop invariant i193: x1 >= x2 + d2 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3;\nloop invariant i194: x2 >= x3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3 + d3;\nloop invariant i195: 0 <= x2;\nloop invariant i196: 0 <= x3;\nloop invariant i197: x1 - d1 * (x2 / d2) <= x3;\nloop invariant i198: x2 - d2 * (x3 / d3) <= x1;\nloop invariant i199: x3 - d3 * (x1 / d1) <= x2;\n*/\nwhile( x1 > 0) {\n        if(x2 > 0) {\n            if(x3 > 0) {\n                x1 = x1 - d1;\n                x2 = x2 - d2;\n                x3 = x3 - d3;\n            }\n        }\n    }\n\n    {;\n//@ assert(x2 >= 0);\n}\n\n}",
        "combined_annotation_num_solver_calls": 34,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int d1 = 1;\n    int d2 = 1;\n    int d3 = 1;\n    int x1 = 1;\n    int x2,x3;\n\n    /*@\n\nloop invariant i2: 0 <= d1 <= 100000;\nloop invariant i3: 0 <= d2 <= 100000;\nloop invariant i4: 0 <= d3 <= 100000;\nloop invariant i5: 0 <= x1 <= 100000;\n\n\nloop invariant i8: d1 >= 0;\nloop invariant i9: d2 >= 0;\nloop invariant i10: d3 >= 0;\nloop invariant i11: x1 >= 0;\n\n\n\n\n\n\n\n\n\n\nloop invariant i22: x3 >= d3 * x3;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i44: d1 >= 1;\nloop invariant i45: d2 >= 1;\nloop invariant i46: d3 >= 1;\nloop invariant i47: 0 <= d1 <= 1;\nloop invariant i48: 0 <= d2 <= 1;\nloop invariant i49: 0 <= d3 <= 1;\n\n\nloop invariant i52: (x2 == 0) ==> (x1 >= 0);\n\nloop invariant i54: (x2 >= 0) ==> (x1 >= 0);\n\nloop invariant i56: (x2 == 0) ==> (x1 <= 1);\n\nloop invariant i58: (x2 >= 0) ==> (x1 <= 1);\n\n\n\n\n\nloop invariant i64: 0 <= x1 <= 1;\n\n\nloop invariant i67: (x1 > 0 ==> x2 > 0 ==> d1 <= x1);\nloop invariant i68: (x1 > 0 ==> x2 > 0 ==> d2 <= x2);\nloop invariant i69: (x1 > 0 ==> x3 > 0 ==> d3 <= x3);\nloop invariant i70: (x1 <= 0 ==> x2 <= 0 ==> x3 <= 0 ==> d1 <= 1);\nloop invariant i71: (x1 <= 0 ==> x2 <= 0 ==> x3 <= 0 ==> d2 <= 1);\nloop invariant i72: (x1 <= 0 ==> x2 <= 0 ==> x3 <= 0 ==> d3 <= 1);\nloop invariant i73: (x1 > 0 ==> x2 > 0 ==> x3 > 0 ==> d1 > 0);\nloop invariant i74: (x1 > 0 ==> x2 > 0 ==> x3 > 0 ==> d2 > 0);\nloop invariant i75: (x1 > 0 ==> x3 > 0 ==> d3 > 0);\nloop invariant i76: (x1 <= 0 ==> x2 <= 0 ==> x3 <= 0 ==> d1 > 0);\nloop invariant i77: (x1 <= 0 ==> x2 <= 0 ==> x3 <= 0 ==> d2 > 0);\nloop invariant i78: (x1 <= 0 ==> x3 <= 0 ==> d3 > 0);\n\n\n\n\n\n\nloop invariant i85: 0 <= x1;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i109: 0 <= x2 <= -d2 ==> (x2 >= 0);\nloop invariant i110: d1 > 0;\nloop invariant i111: d2 > 0;\nloop invariant i112: d3 > 0;\nloop invariant i113: x1 >= d1 ==> (x1 >= d1);\nloop invariant i114: x2 >= d2 ==> (x2 >= d2);\nloop invariant i115: x3 >= d3 ==> (x3 >= d3);\nloop invariant i116: d1 > 0 ==> (d1 > 0);\nloop invariant i117: d2 > 0 ==> (d2 > 0);\nloop invariant i118: d3 > 0 ==> (d3 > 0);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i148: x1 - d1 * 100000 <= 0;\n\nloop invariant i150: x1 - d1 * 100000 <= 1;\n\n\n\nloop invariant i154: x2 >= x2 - d2;\nloop invariant i155: x3 >= x3 - d3;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile( x1 > 0) {\n        if(x2 > 0) {\n            if(x3 > 0) {\n                x1 = x1 - d1;\n                x2 = x2 - d2;\n                x3 = x3 - d3;\n            }\n        }\n    }\n\n    {;\n//@ assert(x2 >= 0);\n}\n\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_nondet_true-unreach-call_true-termination.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/85.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/ex2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/42.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/diamond_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/odd.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/even.c",
            "../dataset/loop_invariants/code2inv/24.c",
            "../dataset/loop_invariants/code2inv/130.c"
        ],
        "skipped": [],
        "total": 9,
        "success_count": 1,
        "failure_count": 8,
        "success_rate": 0.1111111111111111
    }
}