{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.v.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  int v1, v2, v3;\n  for(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
        "success": false,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant 0 < i ==> v1 == v2 && v2 == v3 ==> v1 == v2 == v3;\nloop invariant sn == i * a;\nloop invariant v1 == v2 == v3 ==> sn == SIZE * a;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant sn >= 0;\nloop invariant sn <= SIZE*a;\nloop invariant sn == (i-1)*a;\nloop invariant v1 >= -1000000;\nloop invariant v1 <= 1000000;\nloop invariant v2 >= -1000000;\nloop invariant v2 <= 1000000;\nloop invariant v3 >= -1000000;\nloop invariant v3 <= 1000000;\nloop invariant v1 == -1000000 ==> sn == 0;\nloop invariant v1 == -1000000 ==> i == 0;\nloop invariant v1 == 1000000 ==> sn == SIZE*a;\nloop invariant v1 == 1000000 ==> i == SIZE+1;\nloop invariant v2 == -1000000 ==> sn == 0;\nloop invariant v2 == -1000000 ==> i == 0;\nloop invariant v2 == 1000000 ==> sn == SIZE*a;\nloop invariant v2 == 1000000 ==> i == SIZE+1;\nloop invariant v3 == -1000000 ==> sn == 0;\nloop invariant v3 == -1000000 ==> i == 0;\nloop invariant v3 == 1000000 ==> sn == SIZE*a;\nloop invariant v3 == 1000000 ==> i == SIZE+1;\nloop invariant sn == SIZE*a ==> v1 == 1000000;\nloop invariant sn == SIZE*a ==> v2 == 1000000;\nloop invariant sn == SIZE*a ==> v3 == 1000000;\nloop invariant sn == 0 ==> v1 == -1000000;\nloop invariant sn == 0 ==> v2 == -1000000;\nloop invariant sn == 0 ==> v3 == -1000000;\nloop invariant sn == SIZE*a ==> i == SIZE+1;\nloop invariant sn == 0 ==> i == 0;\nloop invariant sn == SIZE*a ==> v1 == 1000000;\nloop invariant sn == SIZE*a ==> v2 == 1000000;\nloop invariant sn == SIZE*a ==> v3 == 1000000;\nloop invariant sn == 0 ==> v1 == -1000000;\nloop invariant sn == 0 ==> v2 == -1000000;\nloop invariant sn == 0 ==> v3 == -1000000;\nloop invariant sn == SIZE*a ==> i == SIZE+1;\nloop invariant sn == 0 ==> i == 0;\nloop invariant sn == SIZE*a ==> v1 == 1000000;\nloop invariant sn == SIZE*a ==> v2 == 1000000;\nloop invariant sn == SIZE*a ==> v3 == 1000000;\nloop invariant sn == 0 ==> v1 == -1000000;\nloop invariant sn == 0 ==> v2 == -1000000;\nloop invariant sn == 0 ==> v3 == -1000000;\nloop invariant sn == SIZE*a ==> i == SIZE+1;\nloop invariant sn == 0 ==> i == 0;\nloop invariant sn == SIZE*a ==> v1 == 1000000;\nloop invariant sn == SIZE*a ==> v2 == 1000000;\nloop invariant sn == SIZE*a ==> v3 == 1000000;\nloop invariant sn == 0 ==> v1 == -1000000;\nloop invariant sn == 0 ==> v2 == -1000000;\nloop invariant sn == 0 ==> v3 == -1000000;\nloop invariant sn == SIZE*a ==> i == SIZE+1;\nloop invariant sn == 0 ==> i == 0;\nloop invariant sn == SIZE*a ==> v1 == 1000000;\nloop invariant sn == SIZE*a ==> v2 == 1000000;\nloop invariant sn == SIZE*a ==> v3 == 1000000;\nloop invariant sn == 0 ==> v1 == -1000000;\nloop invariant sn == 0 ==> v2 == -1000000;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= sn <= SIZE * a;\nloop invariant 1 <= i <= SIZE + 1;\nloop invariant 0 <= v1 <= 1;\nloop invariant 0 <= v2 <= 1;\nloop invariant 0 <= v3 <= 1;\nloop invariant a == 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= sn <= SIZE*a;\nloop invariant 0 <= SIZE;\nloop invariant 1 <= i <= SIZE+1;\nloop invariant 0 <= v1 <= SIZE*a;\nloop invariant 0 <= v2 <= SIZE*a;\nloop invariant 0 <= v3 <= SIZE*a;\nloop invariant sn == (SIZE+1)*a if i == SIZE+1;\nloop invariant sn == 0 if i == 1;\nloop invariant sn == 0 if SIZE == 0;\nloop invariant sn == 0 if SIZE == -1;\nloop invariant sn == 0 if SIZE == -2;\nloop invariant sn == 0 if SIZE == -3;\nloop invariant sn == 0 if SIZE == -4;\nloop invariant sn == 0 if SIZE == -5;\nloop invariant sn == 0 if SIZE == -6;\nloop invariant sn == 0 if SIZE == -7;\nloop invariant sn == 0 if SIZE == -8;\nloop invariant sn == 0 if SIZE == -9;\nloop invariant sn == 0 if SIZE == -10;\nloop invariant sn == 0 if SIZE == -11;\nloop invariant sn == 0 if SIZE == -12;\nloop invariant sn == 0 if SIZE == -13;\nloop invariant sn == 0 if SIZE == -14;\nloop invariant sn == 0 if SIZE == -15;\nloop invariant sn == 0 if SIZE == -16;\nloop invariant sn == 0 if SIZE == -17;\nloop invariant sn == 0 if SIZE == -18;\nloop invariant sn == 0 if SIZE == -19;\nloop invariant sn == 0 if SIZE == -20;\nloop invariant sn == 0 if SIZE == -21;\nloop invariant sn == 0 if SIZE == -22;\nloop invariant sn == 0 if SIZE == -23;\nloop invariant sn == 0 if SIZE == -24;\nloop invariant sn == 0 if SIZE == -25;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= sn <= SIZE * a; loop invariant v1 >= 0; loop invariant v2 >= 0; loop invariant v3 >= 0; loop invariant SIZE >= 0; loop invariant i >= 1; loop invariant i <= SIZE + 1; loop invariant sn + a == SIZE * a; loop invariant sn == SIZE * a; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant sn == i * a;\nloop invariant 0 <= v1 <= 1;\nloop invariant 0 <= v2 <= 1;\nloop invariant 0 <= v3 <= 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant sn == i * a;\nloop invariant -SIZE * a <= sn <= SIZE * a;\nloop invariant v1, v2, v3 are non-deterministic;\nloop invariant v1, v2, v3 are not modified by the loop;\nloop invariant v1 <= v1';\nloop invariant v2 <= v2';\nloop invariant v3 <= v3';\nloop invariant i == SIZE ==> sn == SIZE * a;\nloop invariant i < SIZE ==> sn < SIZE * a;\nloop invariant i == 1 ==> sn == a;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant 0 <= sn <= (SIZE * a);\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= SIZE;\nloop invariant 0 <= sn <= SIZE*a;\nloop invariant v1 <= SIZE;\nloop invariant v2 <= SIZE;\nloop invariant v3 <= SIZE;\nloop invariant (sn == SIZE*a) ==> (v1 == SIZE && v2 == SIZE && v3 == SIZE);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= sn <= SIZE * a;\nloop invariant 1 <= i <= SIZE + 1;\nloop invariant v1 = unknown_int();\nloop invariant v2 = unknown_int();\nloop invariant v3 = unknown_int();\nloop invariant sn == i * a - a;\nloop invariant sn == SIZE * a || sn == 0;\nloop invariant sn == i * a - a;\nloop invariant 0 <= sn <= SIZE * a;\nloop invariant 1 <= i <= SIZE + 1;\nloop invariant v1 = unknown_int();\nloop invariant v2 = unknown_int();\nloop invariant v3 = unknown_int();\nloop invariant sn == SIZE * a || sn == 0;\nloop invariant sn == i * a - a;\nloop invariant 0 <= sn <= SIZE * a;\nloop invariant 1 <= i <= SIZE + 1;\nloop invariant v1 = unknown_int();\nloop invariant v2 = unknown_int();\nloop invariant v3 = unknown_int();\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= SIZE;\nloop invariant 0 <= v1;\nloop invariant 0 <= v2;\nloop invariant 0 <= v3;\nloop invariant sn == (i - 1) * a;\nloop invariant sn == 0 ==> i == 1;\nloop invariant v1 == 0 ==> i == 1;\nloop invariant v2 == 0 ==> i == 1;\nloop invariant v3 == 0 ==> i == 1;\nloop invariant v1 == 0 ==> sn == 0;\nloop invariant v2 == 0 ==> sn == 0;\nloop invariant v3 == 0 ==> sn == 0;\nloop invariant sn == SIZE * a ==> i == SIZE + 1;\nloop invariant sn == 0 ==> i == 1;\nloop invariant sn == 0 ==> v1 == 0;\nloop invariant sn == 0 ==> v2 == 0;\nloop invariant sn == 0 ==> v3 == 0;\nloop invariant sn == SIZE * a ==> v1 == 0;\nloop invariant sn == SIZE * a ==> v2 == 0;\nloop invariant sn == SIZE * a ==> v3 == 0;\nloop invariant sn == SIZE * a ==> i == SIZE + 1;\nloop invariant v1 == 0 ==> sn == 0;\nloop invariant v2 == 0 ==> sn == 0;\nloop invariant v3 == 0 ==> sn == 0;\nloop invariant sn == SIZE * a ==> v1 == 0;\nloop invariant sn == SIZE * a ==> v2 == 0;\nloop invariant sn == SIZE * a ==> v3 == 0;\nloop invariant sn == 0 ==> i == 1;\nloop invariant sn == 0 ==> v1 == 0;\nloop invariant sn == 0 ==> v2 == 0;\nloop invariant sn == 0 ==> v3 == 0;\nloop invariant sn == SIZE * a ==> i == SIZE + 1;\nloop invariant sn == SIZE * a ==> v1 == 0;\nloop invariant sn == SIZE * a ==> v2 == 0;\nloop invariant sn == SIZE * a ==> v3 == 0;\nloop invariant sn == 0 ==> i == 1;\nloop invariant sn == 0 ==> v1 == 0;\nloop invariant sn == 0 ==> v2 == 0;\nloop invariant sn == 0 ==> v3 == 0;\nloop invariant sn == SIZE * a ==> i == SIZE + 1;\nloop invariant sn == SIZE * a ==> v1 == 0;\nloop invariant sn == SIZE * a ==> v2 == 0;\nloop invariant sn == SIZE * a ==> v3 == 0;\nloop invariant sn == 0 ==> i == 1;\nloop invariant sn == 0 ==> v1 == 0;\nloop invariant sn == 0 ==> v2 == 0;\nloop invariant sn == 0 ==> v3 == 0;\nloop invariant sn == SIZE * a ==> i == SIZE + 1;\nloop invariant sn == SIZE * a ==> v1 == 0;\nloop invariant sn == SIZE * a ==> v2 == 0;\nloop invariant sn == SIZE * a ==> v3 == 0;\nloop invariant sn == 0 ==> i == 1;\nloop invariant sn == 0 ==> v1 == 0;\nloop invariant sn == 0 ==> v2 == 0;\nloop invariant sn == 0 ==> v3 == 0;\nloop invariant sn == SIZE * a ==> i == SIZE + 1;\nloop invariant sn == SIZE * a ==> v1 == 0;\nloop invariant sn == SIZE * a ==> v2 == 0;\nloop invariant sn == SIZE * a ==> v3 == 0;\nloop invariant sn == 0 ==> i == 1;\nloop invariant sn == 0 ==> v1 == 0;\nloop invariant sn == 0 ==> v2 == 0;\nloop invariant sn == 0 ==> v3 == 0;\nloop invariant sn == SIZE * a ==> i == SIZE + 1;\nloop invariant sn == SIZE * a ==> v1 == 0;\nloop invariant sn == SIZE * a ==> v2 == 0;\nloop invariant sn == SIZE * a ==> v3 == 0;\nloop invariant sn == 0 ==> i == 1;\nloop invariant sn == 0 ==> v1 == 0;\nloop invariant sn == 0 ==> v2 == 0;\nloop invariant sn == 0 ==> v3 == 0;\nloop invariant sn == SIZE * a ==> i == SIZE + 1;\nloop invariant sn == SIZE * a ==> v1 == 0;\nloop invariant sn == SIZE * a ==> v2 == 0;\nloop invariant sn == SIZE * a ==> v3 == 0;\nloop invariant sn == 0 ==> i == 1;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= SIZE <= 100000;\nloop invariant 0 <= sn <= SIZE*a;\nloop invariant 0 <= i <= SIZE;\nloop invariant a == 1;\nloop invariant v1 == unknown_int();\nloop invariant v2 == unknown_int();\nloop invariant v3 == unknown_int();\nloop invariant i <= SIZE ==> i > 0;\nloop invariant i > SIZE ==> i == SIZE + 1;\nloop invariant SIZE == 0 ==> sn == 0;\nloop invariant SIZE > 0 ==> sn > 0;\nloop invariant SIZE > 0 ==> a > 0;\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant sn >= 0;\nloop invariant sn <= SIZE*a;\nloop invariant v1 <= 1;\nloop invariant v2 <= 1;\nloop invariant v3 <= 1;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= sn <= SIZE*a;\nloop invariant 1 <= i <= SIZE;\nloop invariant v1 <= SIZE;\nloop invariant v2 <= SIZE;\nloop invariant v3 <= SIZE;\nloop invariant sn == SIZE*a* (i/(SIZE+1));\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant 0 < i ==> v1 == v2 && v2 == v3 ==> v1 == v2 == v3;\nloop invariant sn == i * a;\nloop invariant v1 == v2 == v3 ==> sn == SIZE * a;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= SIZE is preserved but not established.\nloop invariant 0 < i ==> v1 == v2 && v2 == v3 ==> v1 == v2 == v3 is partially proven to be inductive.\nloop invariant sn == i * a is preserved but not established.\nloop invariant v1 == v2 == v3 ==> sn == SIZE * a is partially proven to be inductive.\nAssertion sn == SIZE * 1 || sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  int v1, v2, v3;\n  /*@\n\nloop invariant i2: 0 < i ==> v1 == v2 && v2 == v3 ==> v1 == v2 == v3;\n\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant sn >= 0;\nloop invariant sn <= SIZE*a;\nloop invariant sn == (i-1)*a;\nloop invariant v1 >= -1000000;\nloop invariant v1 <= 1000000;\nloop invariant v2 >= -1000000;\nloop invariant v2 <= 1000000;\nloop invariant v3 >= -1000000;\nloop invariant v3 <= 1000000;\nloop invariant v1 == -1000000 ==> sn == 0;\nloop invariant v1 == -1000000 ==> i == 0;\nloop invariant v1 == 1000000 ==> sn == SIZE*a;\nloop invariant v1 == 1000000 ==> i == SIZE+1;\nloop invariant v2 == -1000000 ==> sn == 0;\nloop invariant v2 == -1000000 ==> i == 0;\nloop invariant v2 == 1000000 ==> sn == SIZE*a;\nloop invariant v2 == 1000000 ==> i == SIZE+1;\nloop invariant v3 == -1000000 ==> sn == 0;\nloop invariant v3 == -1000000 ==> i == 0;\nloop invariant v3 == 1000000 ==> sn == SIZE*a;\nloop invariant v3 == 1000000 ==> i == SIZE+1;\nloop invariant sn == SIZE*a ==> v1 == 1000000;\nloop invariant sn == SIZE*a ==> v2 == 1000000;\nloop invariant sn == SIZE*a ==> v3 == 1000000;\nloop invariant sn == 0 ==> v1 == -1000000;\nloop invariant sn == 0 ==> v2 == -1000000;\nloop invariant sn == 0 ==> v3 == -1000000;\nloop invariant sn == SIZE*a ==> i == SIZE+1;\nloop invariant sn == 0 ==> i == 0;\nloop invariant sn == SIZE*a ==> v1 == 1000000;\nloop invariant sn == SIZE*a ==> v2 == 1000000;\nloop invariant sn == SIZE*a ==> v3 == 1000000;\nloop invariant sn == 0 ==> v1 == -1000000;\nloop invariant sn == 0 ==> v2 == -1000000;\nloop invariant sn == 0 ==> v3 == -1000000;\nloop invariant sn == SIZE*a ==> i == SIZE+1;\nloop invariant sn == 0 ==> i == 0;\nloop invariant sn == SIZE*a ==> v1 == 1000000;\nloop invariant sn == SIZE*a ==> v2 == 1000000;\nloop invariant sn == SIZE*a ==> v3 == 1000000;\nloop invariant sn == 0 ==> v1 == -1000000;\nloop invariant sn == 0 ==> v2 == -1000000;\nloop invariant sn == 0 ==> v3 == -1000000;\nloop invariant sn == SIZE*a ==> i == SIZE+1;\nloop invariant sn == 0 ==> i == 0;\nloop invariant sn == SIZE*a ==> v1 == 1000000;\nloop invariant sn == SIZE*a ==> v2 == 1000000;\nloop invariant sn == SIZE*a ==> v3 == 1000000;\nloop invariant sn == 0 ==> v1 == -1000000;\nloop invariant sn == 0 ==> v2 == -1000000;\nloop invariant sn == 0 ==> v3 == -1000000;\nloop invariant sn == SIZE*a ==> i == SIZE+1;\nloop invariant sn == 0 ==> i == 0;\nloop invariant sn == SIZE*a ==> v1 == 1000000;\nloop invariant sn == SIZE*a ==> v2 == 1000000;\nloop invariant sn == SIZE*a ==> v3 == 1000000;\nloop invariant sn == 0 ==> v1 == -1000000;\nloop invariant sn == 0 ==> v2 == -1000000;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= SIZE is preserved but not established.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn <= SIZE*a is partially proven to be inductive.\nloop invariant sn == (i-1)*a is partially proven to be inductive.\nloop invariant v1 >= -1000000 is preserved but not established.\nloop invariant v1 <= 1000000 is preserved but not established.\nloop invariant v2 >= -1000000 is preserved but not established.\nloop invariant v2 <= 1000000 is preserved but not established.\nloop invariant v3 >= -1000000 is preserved but not established.\nloop invariant v3 <= 1000000 is preserved but not established.\nloop invariant v1 == -1000000 ==> sn == 0 is partially proven to be inductive.\nloop invariant v1 == -1000000 ==> i == 0 is preserved but not established.\nloop invariant v1 == 1000000 ==> sn == SIZE*a is preserved but not established.\nloop invariant v1 == 1000000 ==> i == SIZE+1 is partially proven to be inductive.\nloop invariant v2 == -1000000 ==> sn == 0 is partially proven to be inductive.\nloop invariant v2 == -1000000 ==> i == 0 is preserved but not established.\nloop invariant v2 == 1000000 ==> sn == SIZE*a is preserved but not established.\nloop invariant v2 == 1000000 ==> i == SIZE+1 is partially proven to be inductive.\nloop invariant v3 == -1000000 ==> sn == 0 is partially proven to be inductive.\nloop invariant v3 == -1000000 ==> i == 0 is preserved but not established.\nloop invariant v3 == 1000000 ==> sn == SIZE*a is preserved but not established.\nloop invariant v3 == 1000000 ==> i == SIZE+1 is partially proven to be inductive.\nloop invariant sn == SIZE*a ==> v1 == 1000000 is partially proven to be inductive.\nloop invariant sn == SIZE*a ==> v2 == 1000000 is partially proven to be inductive.\nloop invariant sn == SIZE*a ==> v3 == 1000000 is partially proven to be inductive.\nloop invariant sn == 0 ==> v1 == -1000000 is preserved but not established.\nloop invariant sn == 0 ==> v2 == -1000000 is partially proven to be inductive.\nloop invariant sn == 0 ==> v3 == -1000000 is partially proven to be inductive.\nloop invariant sn == SIZE*a ==> i == SIZE+1 is partially proven to be inductive.\nloop invariant sn == 0 ==> i == 0 is partially proven to be inductive.\nAssertion sn == SIZE * 1 || sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  int v1, v2, v3;\n  /*@\n\nloop invariant i2: sn >= 0;\n\nloop invariant i4: sn == (i-1)*a;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i29: sn == SIZE*a ==> i == SIZE+1;\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 1 <= sn <= SIZE * a;\nloop invariant 1 <= i <= SIZE + 1;\nloop invariant 0 <= v1 <= 1;\nloop invariant 0 <= v2 <= 1;\nloop invariant 0 <= v3 <= 1;\nloop invariant a == 1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= sn <= SIZE * a is preserved but not established.\nloop invariant 1 <= i <= SIZE + 1 is partially proven to be inductive.\nloop invariant 0 <= v1 <= 1 is partially proven to be inductive.\nloop invariant 0 <= v2 <= 1 is partially proven to be inductive.\nloop invariant 0 <= v3 <= 1 is partially proven to be inductive.\nloop invariant a == 1 is partially proven to be inductive.\nAssertion sn == SIZE * 1 || sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  int v1, v2, v3;\n  /*@\n\n\n\n\n\nloop invariant i6: a == 1;\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 32,
                "annotations": "```\n/*@\nloop invariant 0 <= sn <= SIZE*a;\nloop invariant 0 <= SIZE;\nloop invariant 1 <= i <= SIZE+1;\nloop invariant 0 <= v1 <= SIZE*a;\nloop invariant 0 <= v2 <= SIZE*a;\nloop invariant 0 <= v3 <= SIZE*a;\nloop invariant sn == (SIZE+1)*a if i == SIZE+1;\nloop invariant sn == 0 if i == 1;\nloop invariant sn == 0 if SIZE == 0;\nloop invariant sn == 0 if SIZE == -1;\nloop invariant sn == 0 if SIZE == -2;\nloop invariant sn == 0 if SIZE == -3;\nloop invariant sn == 0 if SIZE == -4;\nloop invariant sn == 0 if SIZE == -5;\nloop invariant sn == 0 if SIZE == -6;\nloop invariant sn == 0 if SIZE == -7;\nloop invariant sn == 0 if SIZE == -8;\nloop invariant sn == 0 if SIZE == -9;\nloop invariant sn == 0 if SIZE == -10;\nloop invariant sn == 0 if SIZE == -11;\nloop invariant sn == 0 if SIZE == -12;\nloop invariant sn == 0 if SIZE == -13;\nloop invariant sn == 0 if SIZE == -14;\nloop invariant sn == 0 if SIZE == -15;\nloop invariant sn == 0 if SIZE == -16;\nloop invariant sn == 0 if SIZE == -17;\nloop invariant sn == 0 if SIZE == -18;\nloop invariant sn == 0 if SIZE == -19;\nloop invariant sn == 0 if SIZE == -20;\nloop invariant sn == 0 if SIZE == -21;\nloop invariant sn == 0 if SIZE == -22;\nloop invariant sn == 0 if SIZE == -23;\nloop invariant sn == 0 if SIZE == -24;\nloop invariant sn == 0 if SIZE == -25;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 22: unexpected token 'if'",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  int v1, v2, v3;\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= sn <= SIZE * a; loop invariant v1 >= 0; loop invariant v2 >= 0; loop invariant v3 >= 0; loop invariant SIZE >= 0; loop invariant i >= 1; loop invariant i <= SIZE + 1; loop invariant sn + a == SIZE * a; loop invariant sn == SIZE * a; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= sn <= SIZE * a; loop invariant v1 >= 0; loop invariant v2 >= 0; loop invariant v3 >= 0; loop invariant SIZE >= 0; loop invariant i >= 1; loop invariant i <= SIZE + 1; loop invariant sn + a == SIZE * a; loop invariant sn == SIZE * a; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1 is preserved but not established.\nAssertion sn == SIZE * 1 || sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  int v1, v2, v3;\n  /*@\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant sn == i * a;\nloop invariant 0 <= v1 <= 1;\nloop invariant 0 <= v2 <= 1;\nloop invariant 0 <= v3 <= 1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= SIZE is preserved but not established.\nloop invariant sn == i * a is preserved but not established.\nloop invariant 0 <= v1 <= 1 is partially proven to be inductive.\nloop invariant 0 <= v2 <= 1 is partially proven to be inductive.\nloop invariant 0 <= v3 <= 1 is partially proven to be inductive.\nAssertion sn == SIZE * 1 || sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  int v1, v2, v3;\n  /*@\n\n\n\n\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant sn == i * a;\nloop invariant -SIZE * a <= sn <= SIZE * a;\nloop invariant v1, v2, v3 are non-deterministic;\nloop invariant v1, v2, v3 are not modified by the loop;\nloop invariant v1 <= v1';\nloop invariant v2 <= v2';\nloop invariant v3 <= v3';\nloop invariant i == SIZE ==> sn == SIZE * a;\nloop invariant i < SIZE ==> sn < SIZE * a;\nloop invariant i == 1 ==> sn == a;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "No CSV output dump found from Frama-C",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  int v1, v2, v3;\n  /*@\nloop invariant i1: 0 <= i <= SIZE;\nloop invariant i2: sn == i * a;\nloop invariant i3: -SIZE * a <= sn <= SIZE * a;\nloop invariant i4: v1, v2, v3 are non-deterministic;\nloop invariant i5: v1, v2, v3 are not modified by the loop;\nloop invariant i6: v1 <= v1';\nloop invariant i7: v2 <= v2';\nloop invariant i8: v3 <= v3';\nloop invariant i9: i == SIZE ==> sn == SIZE * a;\nloop invariant i10: i < SIZE ==> sn < SIZE * a;\nloop invariant i11: i == 1 ==> sn == a;\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant 0 <= sn <= (SIZE * a);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= SIZE is neither established nor preserved.\nloop invariant 0 <= sn <= (SIZE * a) is established but not preserved.\nAssertion sn == SIZE * 1 || sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  int v1, v2, v3;\n  /*@\n\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= SIZE;\nloop invariant 0 <= sn <= SIZE*a;\nloop invariant v1 <= SIZE;\nloop invariant v2 <= SIZE;\nloop invariant v3 <= SIZE;\nloop invariant (sn == SIZE*a) ==> (v1 == SIZE && v2 == SIZE && v3 == SIZE);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= i <= SIZE is neither established nor preserved.\nloop invariant 0 <= sn <= SIZE*a is established but not preserved.\nloop invariant v1 <= SIZE is neither established nor preserved.\nloop invariant v2 <= SIZE is neither established nor preserved.\nloop invariant v3 <= SIZE is neither established nor preserved.\nloop invariant (sn == SIZE*a) ==> (v1 == SIZE && v2 == SIZE && v3 == SIZE) is established but not preserved.\nAssertion sn == SIZE * 1 || sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  int v1, v2, v3;\n  /*@\n\n\n\n\n\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant 0 <= sn <= SIZE * a;\nloop invariant 1 <= i <= SIZE + 1;\nloop invariant v1 = unknown_int();\nloop invariant v2 = unknown_int();\nloop invariant v3 = unknown_int();\nloop invariant sn == i * a - a;\nloop invariant sn == SIZE * a || sn == 0;\nloop invariant sn == i * a - a;\nloop invariant 0 <= sn <= SIZE * a;\nloop invariant 1 <= i <= SIZE + 1;\nloop invariant v1 = unknown_int();\nloop invariant v2 = unknown_int();\nloop invariant v3 = unknown_int();\nloop invariant sn == SIZE * a || sn == 0;\nloop invariant sn == i * a - a;\nloop invariant 0 <= sn <= SIZE * a;\nloop invariant 1 <= i <= SIZE + 1;\nloop invariant v1 = unknown_int();\nloop invariant v2 = unknown_int();\nloop invariant v3 = unknown_int();\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 18: Assignment operators not allowed in annotations.",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  int v1, v2, v3;\n  /*@\n\n\n\n\n\nloop invariant i6: sn == i * a - a;\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= SIZE;\nloop invariant 0 <= v1;\nloop invariant 0 <= v2;\nloop invariant 0 <= v3;\nloop invariant sn == (i - 1) * a;\nloop invariant sn == 0 ==> i == 1;\nloop invariant v1 == 0 ==> i == 1;\nloop invariant v2 == 0 ==> i == 1;\nloop invariant v3 == 0 ==> i == 1;\nloop invariant v1 == 0 ==> sn == 0;\nloop invariant v2 == 0 ==> sn == 0;\nloop invariant v3 == 0 ==> sn == 0;\nloop invariant sn == SIZE * a ==> i == SIZE + 1;\nloop invariant sn == 0 ==> i == 1;\nloop invariant sn == 0 ==> v1 == 0;\nloop invariant sn == 0 ==> v2 == 0;\nloop invariant sn == 0 ==> v3 == 0;\nloop invariant sn == SIZE * a ==> v1 == 0;\nloop invariant sn == SIZE * a ==> v2 == 0;\nloop invariant sn == SIZE * a ==> v3 == 0;\nloop invariant sn == SIZE * a ==> i == SIZE + 1;\nloop invariant v1 == 0 ==> sn == 0;\nloop invariant v2 == 0 ==> sn == 0;\nloop invariant v3 == 0 ==> sn == 0;\nloop invariant sn == SIZE * a ==> v1 == 0;\nloop invariant sn == SIZE * a ==> v2 == 0;\nloop invariant sn == SIZE * a ==> v3 == 0;\nloop invariant sn == 0 ==> i == 1;\nloop invariant sn == 0 ==> v1 == 0;\nloop invariant sn == 0 ==> v2 == 0;\nloop invariant sn == 0 ==> v3 == 0;\nloop invariant sn == SIZE * a ==> i == SIZE + 1;\nloop invariant sn == SIZE * a ==> v1 == 0;\nloop invariant sn == SIZE * a ==> v2 == 0;\nloop invariant sn == SIZE * a ==> v3 == 0;\nloop invariant sn == 0 ==> i == 1;\nloop invariant sn == 0 ==> v1 == 0;\nloop invariant sn == 0 ==> v2 == 0;\nloop invariant sn == 0 ==> v3 == 0;\nloop invariant sn == SIZE * a ==> i == SIZE + 1;\nloop invariant sn == SIZE * a ==> v1 == 0;\nloop invariant sn == SIZE * a ==> v2 == 0;\nloop invariant sn == SIZE * a ==> v3 == 0;\nloop invariant sn == 0 ==> i == 1;\nloop invariant sn == 0 ==> v1 == 0;\nloop invariant sn == 0 ==> v2 == 0;\nloop invariant sn == 0 ==> v3 == 0;\nloop invariant sn == SIZE * a ==> i == SIZE + 1;\nloop invariant sn == SIZE * a ==> v1 == 0;\nloop invariant sn == SIZE * a ==> v2 == 0;\nloop invariant sn == SIZE * a ==> v3 == 0;\nloop invariant sn == 0 ==> i == 1;\nloop invariant sn == 0 ==> v1 == 0;\nloop invariant sn == 0 ==> v2 == 0;\nloop invariant sn == 0 ==> v3 == 0;\nloop invariant sn == SIZE * a ==> i == SIZE + 1;\nloop invariant sn == SIZE * a ==> v1 == 0;\nloop invariant sn == SIZE * a ==> v2 == 0;\nloop invariant sn == SIZE * a ==> v3 == 0;\nloop invariant sn == 0 ==> i == 1;\nloop invariant sn == 0 ==> v1 == 0;\nloop invariant sn == 0 ==> v2 == 0;\nloop invariant sn == 0 ==> v3 == 0;\nloop invariant sn == SIZE * a ==> i == SIZE + 1;\nloop invariant sn == SIZE * a ==> v1 == 0;\nloop invariant sn == SIZE * a ==> v2 == 0;\nloop invariant sn == SIZE * a ==> v3 == 0;\nloop invariant sn == 0 ==> i == 1;\nloop invariant sn == 0 ==> v1 == 0;\nloop invariant sn == 0 ==> v2 == 0;\nloop invariant sn == 0 ==> v3 == 0;\nloop invariant sn == SIZE * a ==> i == SIZE + 1;\nloop invariant sn == SIZE * a ==> v1 == 0;\nloop invariant sn == SIZE * a ==> v2 == 0;\nloop invariant sn == SIZE * a ==> v3 == 0;\nloop invariant sn == 0 ==> i == 1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= i <= SIZE is neither established nor preserved.\nloop invariant 0 <= v1 is neither established nor preserved.\nloop invariant 0 <= v2 is neither established nor preserved.\nloop invariant 0 <= v3 is neither established nor preserved.\nloop invariant sn == (i - 1) * a is partially proven to be inductive.\nloop invariant sn == 0 ==> i == 1 is partially proven to be inductive.\nloop invariant v1 == 0 ==> i == 1 is established but not preserved.\nloop invariant v2 == 0 ==> i == 1 is established but not preserved.\nloop invariant v3 == 0 ==> i == 1 is established but not preserved.\nloop invariant v1 == 0 ==> sn == 0 is partially proven to be inductive.\nloop invariant v2 == 0 ==> sn == 0 is partially proven to be inductive.\nloop invariant v3 == 0 ==> sn == 0 is partially proven to be inductive.\nloop invariant sn == SIZE * a ==> i == SIZE + 1 is partially proven to be inductive.\nloop invariant sn == 0 ==> v1 == 0 is preserved but not established.\nloop invariant sn == 0 ==> v2 == 0 is preserved but not established.\nloop invariant sn == 0 ==> v3 == 0 is preserved but not established.\nloop invariant sn == SIZE * a ==> v1 == 0 is partially proven to be inductive.\nloop invariant sn == SIZE * a ==> v2 == 0 is partially proven to be inductive.\nloop invariant sn == SIZE * a ==> v3 == 0 is partially proven to be inductive.\nAssertion sn == SIZE * 1 || sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  int v1, v2, v3;\n  /*@\n\n\n\n\nloop invariant i5: sn == (i - 1) * a;\nloop invariant i6: sn == 0 ==> i == 1;\n\n\n\n\n\n\nloop invariant i13: sn == SIZE * a ==> i == SIZE + 1;\n\n\n\n\n\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 8,
                "annotations": "```\n/*@\nloop invariant 1 <= SIZE <= 100000;\nloop invariant 0 <= sn <= SIZE*a;\nloop invariant 0 <= i <= SIZE;\nloop invariant a == 1;\nloop invariant v1 == unknown_int();\nloop invariant v2 == unknown_int();\nloop invariant v3 == unknown_int();\nloop invariant i <= SIZE ==> i > 0;\nloop invariant i > SIZE ==> i == SIZE + 1;\nloop invariant SIZE == 0 ==> sn == 0;\nloop invariant SIZE > 0 ==> sn > 0;\nloop invariant SIZE > 0 ==> a > 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 20: unexpected token ')'",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  int v1, v2, v3;\n  /*@\n\n\n\nloop invariant i4: a == 1;\n\n\n\nloop invariant i8: i <= SIZE ==> i > 0;\n\nloop invariant i10: SIZE == 0 ==> sn == 0;\n\nloop invariant i12: SIZE > 0 ==> a > 0;\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\n\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 16: unexpected token ''",
                "houdini_error": "No annotations found"
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant sn >= 0;\nloop invariant sn <= SIZE*a;\nloop invariant v1 <= 1;\nloop invariant v2 <= 1;\nloop invariant v3 <= 1;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= SIZE is neither established nor preserved.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn <= SIZE*a is established but not preserved.\nloop invariant v1 <= 1 is neither established nor preserved.\nloop invariant v2 <= 1 is neither established nor preserved.\nloop invariant v3 <= 1 is neither established nor preserved.\nloop invariant v1 >= 0 is neither established nor preserved.\nloop invariant v2 >= 0 is neither established nor preserved.\nloop invariant v3 >= 0 is neither established nor preserved.\nAssertion sn == SIZE * 1 || sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  int v1, v2, v3;\n  /*@\n\nloop invariant i2: sn >= 0;\n\n\n\n\n\n\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 1 <= sn <= SIZE*a;\nloop invariant 1 <= i <= SIZE;\nloop invariant v1 <= SIZE;\nloop invariant v2 <= SIZE;\nloop invariant v3 <= SIZE;\nloop invariant sn == SIZE*a* (i/(SIZE+1));\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= sn <= SIZE*a is preserved but not established.\nloop invariant 1 <= i <= SIZE is partially proven to be inductive.\nloop invariant v1 <= SIZE is partially proven to be inductive.\nloop invariant v2 <= SIZE is partially proven to be inductive.\nloop invariant v3 <= SIZE is partially proven to be inductive.\nloop invariant sn == SIZE*a* (i/(SIZE+1)) is partially proven to be inductive.\nAssertion sn == SIZE * 1 || sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  int v1, v2, v3;\n  /*@\n\n\n\n\n\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "No CSV output dump found from Frama-C",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  int v1, v2, v3;\n  /*@\nloop invariant i1: 0 <= i <= SIZE;\nloop invariant i2: 0 < i ==> v1 == v2 && v2 == v3 ==> v1 == v2 == v3;\nloop invariant i3: sn == i * a;\nloop invariant i4: v1 == v2 == v3 ==> sn == SIZE * a;\nloop invariant i5: sn >= 0;\nloop invariant i6: sn <= SIZE*a;\nloop invariant i7: sn == (i-1)*a;\nloop invariant i8: v1 >= -1000000;\nloop invariant i9: v1 <= 1000000;\nloop invariant i10: v2 >= -1000000;\nloop invariant i11: v2 <= 1000000;\nloop invariant i12: v3 >= -1000000;\nloop invariant i13: v3 <= 1000000;\nloop invariant i14: v1 == -1000000 ==> sn == 0;\nloop invariant i15: v1 == -1000000 ==> i == 0;\nloop invariant i16: v1 == 1000000 ==> sn == SIZE*a;\nloop invariant i17: v1 == 1000000 ==> i == SIZE+1;\nloop invariant i18: v2 == -1000000 ==> sn == 0;\nloop invariant i19: v2 == -1000000 ==> i == 0;\nloop invariant i20: v2 == 1000000 ==> sn == SIZE*a;\nloop invariant i21: v2 == 1000000 ==> i == SIZE+1;\nloop invariant i22: v3 == -1000000 ==> sn == 0;\nloop invariant i23: v3 == -1000000 ==> i == 0;\nloop invariant i24: v3 == 1000000 ==> sn == SIZE*a;\nloop invariant i25: v3 == 1000000 ==> i == SIZE+1;\nloop invariant i26: sn == SIZE*a ==> v1 == 1000000;\nloop invariant i27: sn == SIZE*a ==> v2 == 1000000;\nloop invariant i28: sn == SIZE*a ==> v3 == 1000000;\nloop invariant i29: sn == 0 ==> v1 == -1000000;\nloop invariant i30: sn == 0 ==> v2 == -1000000;\nloop invariant i31: sn == 0 ==> v3 == -1000000;\nloop invariant i32: sn == SIZE*a ==> i == SIZE+1;\nloop invariant i33: sn == 0 ==> i == 0;\nloop invariant i34: 1 <= sn <= SIZE * a;\nloop invariant i35: 1 <= i <= SIZE + 1;\nloop invariant i36: 0 <= v1 <= 1;\nloop invariant i37: 0 <= v2 <= 1;\nloop invariant i38: 0 <= v3 <= 1;\nloop invariant i39: a == 1;\nloop invariant i40: 0 <= sn <= SIZE*a;\nloop invariant i41: 0 <= SIZE;\nloop invariant i42: 1 <= i <= SIZE+1;\nloop invariant i43: 0 <= v1 <= SIZE*a;\nloop invariant i44: 0 <= v2 <= SIZE*a;\nloop invariant i45: 0 <= v3 <= SIZE*a;\nloop invariant i46: sn == (SIZE+1)*a if i == SIZE+1;\nloop invariant i47: sn == 0 if i == 1;\nloop invariant i48: sn == 0 if SIZE == 0;\nloop invariant i49: sn == 0 if SIZE == -1;\nloop invariant i50: sn == 0 if SIZE == -2;\nloop invariant i51: sn == 0 if SIZE == -3;\nloop invariant i52: sn == 0 if SIZE == -4;\nloop invariant i53: sn == 0 if SIZE == -5;\nloop invariant i54: sn == 0 if SIZE == -6;\nloop invariant i55: sn == 0 if SIZE == -7;\nloop invariant i56: sn == 0 if SIZE == -8;\nloop invariant i57: sn == 0 if SIZE == -9;\nloop invariant i58: sn == 0 if SIZE == -10;\nloop invariant i59: sn == 0 if SIZE == -11;\nloop invariant i60: sn == 0 if SIZE == -12;\nloop invariant i61: sn == 0 if SIZE == -13;\nloop invariant i62: sn == 0 if SIZE == -14;\nloop invariant i63: sn == 0 if SIZE == -15;\nloop invariant i64: sn == 0 if SIZE == -16;\nloop invariant i65: sn == 0 if SIZE == -17;\nloop invariant i66: sn == 0 if SIZE == -18;\nloop invariant i67: sn == 0 if SIZE == -19;\nloop invariant i68: sn == 0 if SIZE == -20;\nloop invariant i69: sn == 0 if SIZE == -21;\nloop invariant i70: sn == 0 if SIZE == -22;\nloop invariant i71: sn == 0 if SIZE == -23;\nloop invariant i72: sn == 0 if SIZE == -24;\nloop invariant i73: sn == 0 if SIZE == -25;\nloop invariant i74: 0 <= sn <= SIZE * a; loop invariant v1 >= 0; loop invariant v2 >= 0; loop invariant v3 >= 0; loop invariant SIZE >= 0; loop invariant i >= 1; loop invariant i <= SIZE + 1; loop invariant sn + a == SIZE * a; loop invariant sn == SIZE * a; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1;\nloop invariant i75: -SIZE * a <= sn <= SIZE * a;\nloop invariant i76: v1, v2, v3 are non-deterministic;\nloop invariant i77: v1, v2, v3 are not modified by the loop;\nloop invariant i78: v1 <= v1';\nloop invariant i79: v2 <= v2';\nloop invariant i80: v3 <= v3';\nloop invariant i81: i == SIZE ==> sn == SIZE * a;\nloop invariant i82: i < SIZE ==> sn < SIZE * a;\nloop invariant i83: i == 1 ==> sn == a;\nloop invariant i84: 0 <= sn <= (SIZE * a);\nloop invariant i85: 1 <= i <= SIZE;\nloop invariant i86: v1 <= SIZE;\nloop invariant i87: v2 <= SIZE;\nloop invariant i88: v3 <= SIZE;\nloop invariant i89: (sn == SIZE*a) ==> (v1 == SIZE && v2 == SIZE && v3 == SIZE);\nloop invariant i90: 0 <= sn <= SIZE * a;\nloop invariant i91: v1 = unknown_int();\nloop invariant i92: v2 = unknown_int();\nloop invariant i93: v3 = unknown_int();\nloop invariant i94: sn == i * a - a;\nloop invariant i95: sn == SIZE * a || sn == 0;\nloop invariant i96: 0 <= v1;\nloop invariant i97: 0 <= v2;\nloop invariant i98: 0 <= v3;\nloop invariant i99: sn == (i - 1) * a;\nloop invariant i100: sn == 0 ==> i == 1;\nloop invariant i101: v1 == 0 ==> i == 1;\nloop invariant i102: v2 == 0 ==> i == 1;\nloop invariant i103: v3 == 0 ==> i == 1;\nloop invariant i104: v1 == 0 ==> sn == 0;\nloop invariant i105: v2 == 0 ==> sn == 0;\nloop invariant i106: v3 == 0 ==> sn == 0;\nloop invariant i107: sn == SIZE * a ==> i == SIZE + 1;\nloop invariant i108: sn == 0 ==> v1 == 0;\nloop invariant i109: sn == 0 ==> v2 == 0;\nloop invariant i110: sn == 0 ==> v3 == 0;\nloop invariant i111: sn == SIZE * a ==> v1 == 0;\nloop invariant i112: sn == SIZE * a ==> v2 == 0;\nloop invariant i113: sn == SIZE * a ==> v3 == 0;\nloop invariant i114: 1 <= SIZE <= 100000;\nloop invariant i115: v1 == unknown_int();\nloop invariant i116: v2 == unknown_int();\nloop invariant i117: v3 == unknown_int();\nloop invariant i118: i <= SIZE ==> i > 0;\nloop invariant i119: i > SIZE ==> i == SIZE + 1;\nloop invariant i120: SIZE == 0 ==> sn == 0;\nloop invariant i121: SIZE > 0 ==> sn > 0;\nloop invariant i122: SIZE > 0 ==> a > 0;\nloop invariant i123: v1 <= 1;\nloop invariant i124: v2 <= 1;\nloop invariant i125: v3 <= 1;\nloop invariant i126: v1 >= 0;\nloop invariant i127: v2 >= 0;\nloop invariant i128: v3 >= 0;\nloop invariant i129: 1 <= sn <= SIZE*a;\nloop invariant i130: sn == SIZE*a* (i/(SIZE+1));\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
        "combined_annotation_num_solver_calls": 2,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  int v1, v2, v3;\n  /*@\nloop invariant i1: 0 <= i <= SIZE;\nloop invariant i2: 0 < i ==> v1 == v2 && v2 == v3 ==> v1 == v2 == v3;\nloop invariant i3: sn == i * a;\nloop invariant i4: v1 == v2 == v3 ==> sn == SIZE * a;\nloop invariant i5: sn >= 0;\nloop invariant i6: sn <= SIZE*a;\nloop invariant i7: sn == (i-1)*a;\nloop invariant i8: v1 >= -1000000;\nloop invariant i9: v1 <= 1000000;\nloop invariant i10: v2 >= -1000000;\nloop invariant i11: v2 <= 1000000;\nloop invariant i12: v3 >= -1000000;\nloop invariant i13: v3 <= 1000000;\nloop invariant i14: v1 == -1000000 ==> sn == 0;\nloop invariant i15: v1 == -1000000 ==> i == 0;\nloop invariant i16: v1 == 1000000 ==> sn == SIZE*a;\nloop invariant i17: v1 == 1000000 ==> i == SIZE+1;\nloop invariant i18: v2 == -1000000 ==> sn == 0;\nloop invariant i19: v2 == -1000000 ==> i == 0;\nloop invariant i20: v2 == 1000000 ==> sn == SIZE*a;\nloop invariant i21: v2 == 1000000 ==> i == SIZE+1;\nloop invariant i22: v3 == -1000000 ==> sn == 0;\nloop invariant i23: v3 == -1000000 ==> i == 0;\nloop invariant i24: v3 == 1000000 ==> sn == SIZE*a;\nloop invariant i25: v3 == 1000000 ==> i == SIZE+1;\nloop invariant i26: sn == SIZE*a ==> v1 == 1000000;\nloop invariant i27: sn == SIZE*a ==> v2 == 1000000;\nloop invariant i28: sn == SIZE*a ==> v3 == 1000000;\nloop invariant i29: sn == 0 ==> v1 == -1000000;\nloop invariant i30: sn == 0 ==> v2 == -1000000;\nloop invariant i31: sn == 0 ==> v3 == -1000000;\nloop invariant i32: sn == SIZE*a ==> i == SIZE+1;\nloop invariant i33: sn == 0 ==> i == 0;\nloop invariant i34: 1 <= sn <= SIZE * a;\nloop invariant i35: 1 <= i <= SIZE + 1;\nloop invariant i36: 0 <= v1 <= 1;\nloop invariant i37: 0 <= v2 <= 1;\nloop invariant i38: 0 <= v3 <= 1;\nloop invariant i39: a == 1;\nloop invariant i40: 0 <= sn <= SIZE*a;\nloop invariant i41: 0 <= SIZE;\nloop invariant i42: 1 <= i <= SIZE+1;\nloop invariant i43: 0 <= v1 <= SIZE*a;\nloop invariant i44: 0 <= v2 <= SIZE*a;\nloop invariant i45: 0 <= v3 <= SIZE*a;\nloop invariant i46: sn == (SIZE+1)*a if i == SIZE+1;\nloop invariant i47: sn == 0 if i == 1;\nloop invariant i48: sn == 0 if SIZE == 0;\nloop invariant i49: sn == 0 if SIZE == -1;\nloop invariant i50: sn == 0 if SIZE == -2;\nloop invariant i51: sn == 0 if SIZE == -3;\nloop invariant i52: sn == 0 if SIZE == -4;\nloop invariant i53: sn == 0 if SIZE == -5;\nloop invariant i54: sn == 0 if SIZE == -6;\nloop invariant i55: sn == 0 if SIZE == -7;\nloop invariant i56: sn == 0 if SIZE == -8;\nloop invariant i57: sn == 0 if SIZE == -9;\nloop invariant i58: sn == 0 if SIZE == -10;\nloop invariant i59: sn == 0 if SIZE == -11;\nloop invariant i60: sn == 0 if SIZE == -12;\nloop invariant i61: sn == 0 if SIZE == -13;\nloop invariant i62: sn == 0 if SIZE == -14;\nloop invariant i63: sn == 0 if SIZE == -15;\nloop invariant i64: sn == 0 if SIZE == -16;\nloop invariant i65: sn == 0 if SIZE == -17;\nloop invariant i66: sn == 0 if SIZE == -18;\nloop invariant i67: sn == 0 if SIZE == -19;\nloop invariant i68: sn == 0 if SIZE == -20;\nloop invariant i69: sn == 0 if SIZE == -21;\nloop invariant i70: sn == 0 if SIZE == -22;\nloop invariant i71: sn == 0 if SIZE == -23;\nloop invariant i72: sn == 0 if SIZE == -24;\nloop invariant i73: sn == 0 if SIZE == -25;\nloop invariant i74: 0 <= sn <= SIZE * a; loop invariant v1 >= 0; loop invariant v2 >= 0; loop invariant v3 >= 0; loop invariant SIZE >= 0; loop invariant i >= 1; loop invariant i <= SIZE + 1; loop invariant sn + a == SIZE * a; loop invariant sn == SIZE * a; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1; loop invariant sn == SIZE * a; loop invariant i == SIZE + 1; loop invariant sn == 0; loop invariant i == SIZE + 1;\nloop invariant i75: -SIZE * a <= sn <= SIZE * a;\nloop invariant i76: v1, v2, v3 are non-deterministic;\nloop invariant i77: v1, v2, v3 are not modified by the loop;\nloop invariant i78: v1 <= v1';\nloop invariant i79: v2 <= v2';\nloop invariant i80: v3 <= v3';\nloop invariant i81: i == SIZE ==> sn == SIZE * a;\nloop invariant i82: i < SIZE ==> sn < SIZE * a;\nloop invariant i83: i == 1 ==> sn == a;\nloop invariant i84: 0 <= sn <= (SIZE * a);\nloop invariant i85: 1 <= i <= SIZE;\nloop invariant i86: v1 <= SIZE;\nloop invariant i87: v2 <= SIZE;\nloop invariant i88: v3 <= SIZE;\nloop invariant i89: (sn == SIZE*a) ==> (v1 == SIZE && v2 == SIZE && v3 == SIZE);\nloop invariant i90: 0 <= sn <= SIZE * a;\nloop invariant i91: v1 = unknown_int();\nloop invariant i92: v2 = unknown_int();\nloop invariant i93: v3 = unknown_int();\nloop invariant i94: sn == i * a - a;\nloop invariant i95: sn == SIZE * a || sn == 0;\nloop invariant i96: 0 <= v1;\nloop invariant i97: 0 <= v2;\nloop invariant i98: 0 <= v3;\nloop invariant i99: sn == (i - 1) * a;\nloop invariant i100: sn == 0 ==> i == 1;\nloop invariant i101: v1 == 0 ==> i == 1;\nloop invariant i102: v2 == 0 ==> i == 1;\nloop invariant i103: v3 == 0 ==> i == 1;\nloop invariant i104: v1 == 0 ==> sn == 0;\nloop invariant i105: v2 == 0 ==> sn == 0;\nloop invariant i106: v3 == 0 ==> sn == 0;\nloop invariant i107: sn == SIZE * a ==> i == SIZE + 1;\nloop invariant i108: sn == 0 ==> v1 == 0;\nloop invariant i109: sn == 0 ==> v2 == 0;\nloop invariant i110: sn == 0 ==> v3 == 0;\nloop invariant i111: sn == SIZE * a ==> v1 == 0;\nloop invariant i112: sn == SIZE * a ==> v2 == 0;\nloop invariant i113: sn == SIZE * a ==> v3 == 0;\nloop invariant i114: 1 <= SIZE <= 100000;\nloop invariant i115: v1 == unknown_int();\nloop invariant i116: v2 == unknown_int();\nloop invariant i117: v3 == unknown_int();\nloop invariant i118: i <= SIZE ==> i > 0;\nloop invariant i119: i > SIZE ==> i == SIZE + 1;\nloop invariant i120: SIZE == 0 ==> sn == 0;\nloop invariant i121: SIZE > 0 ==> sn > 0;\nloop invariant i122: SIZE > 0 ==> a > 0;\nloop invariant i123: v1 <= 1;\nloop invariant i124: v2 <= 1;\nloop invariant i125: v3 <= 1;\nloop invariant i126: v1 >= 0;\nloop invariant i127: v2 >= 0;\nloop invariant i128: v3 >= 0;\nloop invariant i129: 1 <= sn <= SIZE*a;\nloop invariant i130: sn == SIZE*a* (i/(SIZE+1));\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_nondet_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum01_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/22.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/85.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/ex2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/42.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/diamond_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/odd.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/even.c",
            "../dataset/loop_invariants/code2inv/24.c",
            "../dataset/loop_invariants/code2inv/130.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/diamond_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/overflow_safe1.c",
            "../dataset/loop_invariants/code2inv/113.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/ddlm2013_true-unreach-call.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/MADWiFi-encode_ie_ok.c",
            "../dataset/loop_invariants/code2inv/69.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/half.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.v.c"
        ],
        "skipped": [],
        "total": 19,
        "success_count": 3,
        "failure_count": 16,
        "success_rate": 0.15789473684210525
    }
}