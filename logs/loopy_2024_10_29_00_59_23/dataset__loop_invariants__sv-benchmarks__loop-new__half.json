{
    "logs": {
        "file": "../dataset/loop_invariants/sv-benchmarks/loop-new/half.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int n = 0;\n    int k = unknown_int();\n    if (!(k <= LARGE_INT && k >= -LARGE_INT)) return 0;\n    for(i = 0; i < 2*k; i++) {\n        if (i % 2 == 0) {\n            n ++;\n        }\n    }\n    {;\n//@ assert(k < 0 || n == k);\n}\n\n    return 0;\n}",
        "success": false,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= i <= 2*k;\nloop invariant i % 2 == (i < 2*k);\nloop invariant i % 2 == (i % 2 == 0) ==> i % 2 == 0;\nloop invariant i % 2 == 0 ==> i % 2 == 0;\nloop invariant i % 2 == 0 ==> i % 2 == 1;\nloop invariant i % 2 == 0 ==> i % 2 == 0;\nloop invariant i % 2 == 0 ==> i % 2 == 1;\nloop invariant i % 2 == 0 ==> i % 2 == 0;\nloop invariant i % 2 == 0 ==> i % 2 == 1;\nloop invariant i % 2 == 0 ==> i % 2 == 0;\nloop invariant i % 2 == 0 ==> i % 2 == 1;\nloop invariant i % 2 == 0 ==> i % 2 == 0;\nloop invariant i % 2 == 0 ==> i % 2 == 1;\nloop invariant i % 2 == 0 ==> i % 2 == 0;\nloop invariant i % 2 == 0 ==> i % 2 == 1;\nloop invariant i % 2 == 0 ==> i % 2 == 0;\nloop invariant i % 2 == 0 ==> i % 2 == 1;\nloop invariant i % 2 == 0 ==> i % 2 == 0;\nloop invariant i % 2 == 0 ==> i % 2 == 1;\nloop invariant i % 2 == 0 ==> i % 2 == 0;\nloop invariant i % 2 == 0 ==> i % 2 == 1;\nloop invariant i % 2 == 0 ==> i % 2 == 0;\nloop invariant i % 2 == 0 ==> i % 2 == 1;\nloop invariant i % 2 == 0 ==> i % 2 == 0;\nloop invariant i % 2 == 0 ==> i % 2 == 1;\nloop invariant i % 2 == 0 ==> i % 2 == 0;\nloop invariant i % 2 == 0 ==> i % 2 == 1;\nloop invariant i % 2 == 0 ==> i % 2 == 0;\nloop invariant i % 2 == 0 ==> i % 2 == 1;\nloop invariant i % 2 == 0 ==> i % 2 == 0;\nloop invariant i % 2 == 0 ==> i % 2 == 1;\nloop invariant i % 2 == 0 ==> i % 2 == 0;\nloop invariant i % 2 == 0 ==> i % 2 == 1;\nloop invariant i % 2 == 0 ==> i % 2 == 0;\nloop invariant i % 2 == 0 ==> i % 2 == 1;\nloop invariant i % 2 == 0 ==> i % 2 == 0;\nloop invariant i % 2 == 0 ==> i % 2 == 1;\nloop invariant i % 2 == 0 ==> i % 2 == 0;\nloop invariant i % 2 == 0 ==> i % 2 == 1;\nloop invariant i % 2 == 0 ==> i % 2 == 0;\nloop invariant i % 2 == 0 ==> i % 2 == 1;\nloop invariant i % 2 == 0 ==> i % 2 == 0;\nloop invariant i % 2 == 0 ==> i % 2 == 1;\nloop invariant i % 2 == 0 ==> i % 2 == 0;\nloop invariant i % 2 == 0 ==> i % 2 == 1;\nloop invariant i % 2 == 0 ==> i % 2 == 0;\nloop invariant i % 2 == 0 ==> i % 2 == 1;\nloop invariant i % 2 == 0 ==> i % 2 == 0;\nloop invariant i % 2 == 0 ==> i % 2 == 1;\nloop invariant i % 2 == 0 ==> i % 2 == 0;\nloop invariant i % 2 == 0 ==> i % 2 == 1;\nloop invariant i % 2 == 0 ==> i % 2 == 0;\nloop invariant i % 2 == 0 ==> i % 2 == 1;\nloop invariant i % 2 == 0 ==> i % 2 == 0;\nloop invariant i % 2 == 0 ==> i % 2 == 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 2 * k;\nloop invariant -k <= n - i / 2 <= k;\n*/\n```",
            "```\n/*@\nloop invariant n <= k;\nloop invariant k >= 0 ==> n == k;\nloop invariant k < 0 ==> n == k;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 2*k;\nloop invariant 0 <= n <= k;\nloop invariant n == k ==> (i % 2 == 0);\nloop invariant n < k ==> (i % 2 != 0);\n*/\n```",
            "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant i3;\nloop invariant i4;\nloop invariant i1: i >= 0;\nloop invariant i2: i <= 2*k;\nloop invariant i3: n >= 0;\nloop invariant i4: n <= k;\nloop invariant i5: n == k ==> i == 2*k;\nloop invariant i6: n == k ==> i % 2 == 0;\nloop invariant i7: n == k ==> i == 2*k;\nloop invariant i8: n == k ==> i >= 0;\nloop invariant i9: n == k ==> i <= 2*k;\nloop invariant i10: n == k ==> n >= 0;\nloop invariant i11: n == k ==> n <= k;\nloop invariant i12: n == k ==> i >= 0 ==> i <= 2*k;\nloop invariant i13: n == k ==> i >= 0 ==> n >= 0;\nloop invariant i14: n == k ==> i >= 0 ==> n <= k;\nloop invariant i15: n == k ==> i <= 2*k ==> i >= 0;\nloop invariant i16: n == k ==> i <= 2*k ==> n >= 0;\nloop invariant i17: n == k ==> i <= 2*k ==> n <= k;\nloop invariant i18: n == k ==> n >= 0 ==> i >= 0;\nloop invariant i19: n == k ==> n >= 0 ==> i <= 2*k;\nloop invariant i20: n == k ==> n <= k ==> i >= 0;\nloop invariant i21: n == k ==> n <= k ==> i <= 2*k;\nloop invariant i22: n == k ==> i >= 0 ==> i <= 2*k ==> n >= 0;\nloop invariant i23: n == k ==> i >= 0 ==> i <= 2*k ==> n <= k;\nloop invariant i24: n == k ==> i >= 0 ==> n >= 0 ==> i <= 2*k;\nloop invariant i25: n == k ==> i >= 0 ==> n <= k ==> i <= 2*k;\nloop invariant i26: n == k ==> i <= 2*k ==> i >= 0 ==> n >= 0;\nloop invariant i27: n == k ==> i <= 2*k ==> i >= 0 ==> n <= k;\nloop invariant i28: n == k ==> i <= 2*k ==> n >= 0 ==> i >= 0;\nloop invariant i29: n == k ==> i <= 2*k ==> n <= k ==> i >= 0;\nloop invariant i30: n == k ==> n >= 0 ==> i >= 0 ==> i <= 2*k;\nloop invariant i31: n == k ==> n >= 0 ==> i >= 0 ==> n <= k;\nloop invariant i32: n == k ==> n >= 0 ==> i <= 2*k ==> n >= 0;\nloop invariant i33: n == k ==> n >= 0 ==> i <= 2*k ==> n <= k;\nloop invariant i34: n == k ==> n <= k ==> i >= 0 ==> i <= 2*k;\nloop invariant i35: n == k ==> n <= k ==> i >= 0 ==> n >= 0;\nloop invariant i36: n == k ==> n <= k ==> i <= 2*k ==> n >= 0;\nloop invariant i37: n == k ==> n <= k ==> i <= 2*k ==> n <= k;\nloop invariant i38: n == k ==> i >= 0 ==> i <= 2*k ==> n >= 0 ==> n <= k;\nloop invariant i39: n == k ==> i >= 0 ==> i <= 2*k ==> n <= k ==> n >= 0;\nloop invariant i40: n == k ==> i >= 0 ==> n >= 0 ==> i <= 2*k ==> n <= k;\nloop invariant i41: n == k ==> i >= 0 ==> n <= k ==> i <= 2*k ==> n >= 0;\nloop invariant i42: n == k ==> i <= 2*k ==> i >= 0 ==> n >= 0 ==> n <= k;\nloop invariant i43: n == k ==> i <= 2*k ==> i >= 0 ==> n <= k ==> n >= 0;\nloop invariant i44: n == k ==> i <= 2*k ==> n >= 0 ==> i >= 0 ==> n <= k;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 2*k;\nloop invariant n >= 0;\nloop invariant (i % 2 == 0 ==> n <= k);\nloop invariant (i % 2 != 0 ==> n == k);\n*/\n```",
            "```\n/*@\nloop invariant ( i <= 2*k ) && ( i >= 0 );\nloop invariant ( n <= k ) && ( n >= 0 );\nloop invariant ( i % 2 == 0 ) ==> ( n == i / 2 );\nloop invariant ( i % 2 != 0 ) ==> ( n == ( i - 1 ) / 2 );\nloop invariant ( k <= LARGE_INT ) && ( k >= -LARGE_INT );\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 2*k;\nloop invariant 0 <= n <= 2*k;\n*/\n```",
            "```\n/*@\nloop invariant i == 0;\nloop invariant n == 0;\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant k >= -LARGE_INT;\nloop invariant i % 2 == 0 ==> n == k;\nloop invariant i % 2 == 1 ==> n == k - 1;\nloop invariant i == 2*k ==> n == k;\nloop invariant n >= k - 1;\nloop invariant k < 0 ==> n == k;\n*/\n```",
            "```\n/*@\nloop invariant i >= 0;\nloop invariant i <= 2 * k;\nloop invariant 0 <= n <= k;\nloop invariant (i % 2 == 0 ==> n == i / 2);\nloop invariant (i % 2 != 0 ==> n == i / 2 + 1);\nloop invariant (i % 2 == 0 ==> n == i / 2);\nloop invariant (i % 2 != 0 ==> n == i / 2 + 1);\nloop invariant (i % 2 == 0 ==> n == i / 2);\nloop invariant (i % 2 != 0 ==> n == i / 2 + 1);\nloop invariant (i % 2 == 0 ==> n == i / 2);\nloop invariant (i % 2 != 0 ==> n == i / 2 + 1);\nloop invariant (i % 2 == 0 ==> n == i / 2);\nloop invariant (i % 2 != 0 ==> n == i / 2 + 1);\nloop invariant (i % 2 == 0 ==> n == i / 2);\nloop invariant (i % 2 != 0 ==> n == i / 2 + 1);\nloop invariant (i % 2 == 0 ==> n == i / 2);\nloop invariant (i % 2 != 0 ==> n == i / 2 + 1);\nloop invariant (i % 2 == 0 ==> n == i / 2);\nloop invariant (i % 2 != 0 ==> n == i / 2 + 1);\nloop invariant (i % 2 == 0 ==> n == i / 2);\nloop invariant (i % 2 != 0 ==> n == i / 2 + 1);\nloop invariant (i % 2 == 0 ==> n == i / 2);\nloop invariant (i % 2 != 0 ==> n == i / 2 + 1);\nloop invariant (i % 2 == 0 ==> n == i / 2);\nloop invariant (i % 2 != 0 ==> n == i / 2 + 1);\nloop invariant (i % 2 == 0 ==> n == i / 2);\nloop invariant (i % 2 != 0 ==> n == i / 2 + 1);\nloop invariant (i % 2 == 0 ==> n == i / 2);\nloop invariant (i % 2 != 0 ==> n == i / 2 + 1);\nloop invariant (i % 2 == 0 ==> n == i / 2);\nloop invariant (i % 2 != 0 ==> n == i / 2 + 1);\nloop invariant (i % 2 == 0 ==> n == i / 2);\nloop invariant (i % 2 != 0 ==> n == i / 2 + 1);\nloop invariant (i % 2 == 0 ==> n == i / 2);\nloop invariant (i % 2 != 0 ==> n == i / 2 + 1);\nloop invariant (i % 2 == 0 ==> n == i / 2);\nloop invariant (i % 2 != 0 ==> n == i / 2 + 1);\nloop invariant (i % 2 == 0 ==> n == i / 2);\nloop invariant (i % 2 != 0 ==> n == i / 2 + 1);\nloop invariant (i % 2 == 0 ==> n == i / 2);\nloop invariant (i % 2 != 0 ==> n == i / 2 + 1);\nloop invariant (i % 2 == 0 ==> n == i / 2);\nloop invariant (i % 2 != 0 ==> n == i / 2 + 1);\nloop invariant (i % 2 == 0 ==> n == i / 2);\nloop invariant (i % 2 != 0 ==> n == i / 2 + 1);\nloop invariant (i % 2 == 0 ==> n == i / 2);\nloop invariant (i % 2 != 0 ==> n == i / 2 + 1);\nloop invariant (i % 2 == 0 ==> n == i / 2);\nloop invariant (i % 2 != 0 ==> n == i / 2 + 1);\nloop invariant (i % 2 == 0 ==> n == i / 2);\nloop invariant (i % 2 != 0 ==> n == i / 2 + 1);\nloop invariant (i % 2 == 0 ==> n == i / 2);\nloop invariant (i % 2 != 0 ==> n == i / 2 + 1);\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= 2k;\nloop invariant k < 0 ==> n == k;\nloop invariant k >= 0 ==> n == 2k;\nloop invariant k < 0 ==> n == k;\nloop invariant k >= 0 ==> n == 2k;\nloop invariant k < 0 ==> n == k;\nloop invariant k >= 0 ==> n == 2k;\nloop invariant k < 0 ==> n == k;\nloop invariant k >= 0 ==> n == 2k;\nloop invariant k < 0 ==> n == k;\nloop invariant k >= 0 ==> n == 2k;\n*/\n```",
            "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant i3;\nloop invariant i4;\nloop invariant i5;\nloop invariant i6;\nloop invariant i7;\nloop invariant i8;\nloop invariant i9;\nloop invariant i10;\nloop invariant i11;\nloop invariant i12;\nloop invariant i13;\nloop invariant i14;\nloop invariant i15;\nloop invariant i16;\nloop invariant i17;\nloop invariant i18;\nloop invariant i19;\nloop invariant i20;\nloop invariant i21;\nloop invariant i22;\nloop invariant i23;\nloop invariant i24;\nloop invariant i25;\nloop invariant i26;\nloop invariant i27;\nloop invariant i28;\nloop invariant i29;\nloop invariant i30;\nloop invariant i31;\nloop invariant i32;\nloop invariant i33;\nloop invariant i34;\nloop invariant i35;\nloop invariant i36;\nloop invariant i37;\nloop invariant i38;\nloop invariant i39;\nloop invariant i40;\nloop invariant i41;\nloop invariant i42;\nloop invariant i43;\nloop invariant i44;\nloop invariant i45;\nloop invariant i46;\nloop invariant i47;\nloop invariant i48;\nloop invariant i49;\nloop invariant i50;\nloop invariant i51;\nloop invariant i52;\nloop invariant i53;\nloop invariant i54;\nloop invariant i55;\nloop invariant i56;\nloop invariant i57;\nloop invariant i58;\nloop invariant i59;\nloop invariant i60;\nloop invariant i61;\nloop invariant i62;\nloop invariant i63;\nloop invariant i64;\nloop invariant i65;\nloop invariant i66;\nloop invariant i67;\nloop invariant i68;\nloop invariant i69;\nloop invariant i70;\nloop invariant i71;\nloop invariant i72;\nloop invariant i73;\nloop invariant i74;\nloop invariant i75;\nloop invariant i76;\nloop invariant i77;\nloop invariant i78;\nloop invariant i79;\nloop invariant i80;\nloop invariant i81;\nloop invariant i82;\nloop invariant i83;\nloop invariant i84;\nloop invariant i85;\nloop invariant i86;\nloop invariant i87;\nloop invariant i88;\nloop invariant i89;\nloop invariant i90;\nloop invariant i91;\nloop invariant i92;\nloop invariant i93;\nloop invariant i94;\nloop invariant i95;\nloop invariant i96;\nloop invariant i97;\nloop invariant i98;\nloop invariant i99;\nloop invariant i100;\nloop invariant i101;\nloop invariant i102;\nloop invariant i103;\nloop invariant i104;\nloop invariant i105;\nloop invariant i106;\nloop invariant i107;\nloop invariant i108;\nloop invariant i109;\nloop invariant i110;\nloop invariant i111;\nloop invariant i112;\nloop invariant i113;\nloop invariant i114;\nloop invariant i115;\nloop invariant i116;\nloop invariant i117;\nloop invariant i118;\nloop invariant i119;\nloop invariant i120;\nloop invariant i121;\nloop invariant i122;\nloop invariant i123;\nloop invariant i124;\nloop invariant i125;\nloop invariant i126;\nloop invariant i127;\nloop invariant i128;\nloop invariant i129;\nloop invariant i130;\nloop invariant i131;\nloop invariant i132;\nloop invariant i133;\nloop invariant i134;\nloop invariant i135;\nloop invariant i136;\nloop invariant i137;\nloop invariant i138;\nloop invariant i139;\nloop invariant i140;\nloop invariant i141;\nloop invariant i142;\nloop invariant i143;\nloop invariant i144;\nloop invariant i145;\nloop invariant i146;\nloop invariant i147;\nloop invariant i148;\nloop invariant i149;\nloop invariant i150;\nloop invariant i151;\nloop invariant i152;\nloop invariant i153;\nloop invariant i154;\nloop invariant i155;\nloop invariant i156;\nloop invariant i157;\nloop invariant i158;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i < 2*k;\nloop invariant n >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 2*k;\nloop invariant 0 <= n <= k;\nloop invariant n == (i/2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 2*k;\nloop invariant 0 <= n <= k;\nloop invariant n == i/2;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 2*k;\nloop invariant i % 2 == (i < 2*k);\nloop invariant i % 2 == (i % 2 == 0) ==> i % 2 == 0;\nloop invariant i % 2 == 0 ==> i % 2 == 0;\nloop invariant i % 2 == 0 ==> i % 2 == 1;\nloop invariant i % 2 == 0 ==> i % 2 == 0;\nloop invariant i % 2 == 0 ==> i % 2 == 1;\nloop invariant i % 2 == 0 ==> i % 2 == 0;\nloop invariant i % 2 == 0 ==> i % 2 == 1;\nloop invariant i % 2 == 0 ==> i % 2 == 0;\nloop invariant i % 2 == 0 ==> i % 2 == 1;\nloop invariant i % 2 == 0 ==> i % 2 == 0;\nloop invariant i % 2 == 0 ==> i % 2 == 1;\nloop invariant i % 2 == 0 ==> i % 2 == 0;\nloop invariant i % 2 == 0 ==> i % 2 == 1;\nloop invariant i % 2 == 0 ==> i % 2 == 0;\nloop invariant i % 2 == 0 ==> i % 2 == 1;\nloop invariant i % 2 == 0 ==> i % 2 == 0;\nloop invariant i % 2 == 0 ==> i % 2 == 1;\nloop invariant i % 2 == 0 ==> i % 2 == 0;\nloop invariant i % 2 == 0 ==> i % 2 == 1;\nloop invariant i % 2 == 0 ==> i % 2 == 0;\nloop invariant i % 2 == 0 ==> i % 2 == 1;\nloop invariant i % 2 == 0 ==> i % 2 == 0;\nloop invariant i % 2 == 0 ==> i % 2 == 1;\nloop invariant i % 2 == 0 ==> i % 2 == 0;\nloop invariant i % 2 == 0 ==> i % 2 == 1;\nloop invariant i % 2 == 0 ==> i % 2 == 0;\nloop invariant i % 2 == 0 ==> i % 2 == 1;\nloop invariant i % 2 == 0 ==> i % 2 == 0;\nloop invariant i % 2 == 0 ==> i % 2 == 1;\nloop invariant i % 2 == 0 ==> i % 2 == 0;\nloop invariant i % 2 == 0 ==> i % 2 == 1;\nloop invariant i % 2 == 0 ==> i % 2 == 0;\nloop invariant i % 2 == 0 ==> i % 2 == 1;\nloop invariant i % 2 == 0 ==> i % 2 == 0;\nloop invariant i % 2 == 0 ==> i % 2 == 1;\nloop invariant i % 2 == 0 ==> i % 2 == 0;\nloop invariant i % 2 == 0 ==> i % 2 == 1;\nloop invariant i % 2 == 0 ==> i % 2 == 0;\nloop invariant i % 2 == 0 ==> i % 2 == 1;\nloop invariant i % 2 == 0 ==> i % 2 == 0;\nloop invariant i % 2 == 0 ==> i % 2 == 1;\nloop invariant i % 2 == 0 ==> i % 2 == 0;\nloop invariant i % 2 == 0 ==> i % 2 == 1;\nloop invariant i % 2 == 0 ==> i % 2 == 0;\nloop invariant i % 2 == 0 ==> i % 2 == 1;\nloop invariant i % 2 == 0 ==> i % 2 == 0;\nloop invariant i % 2 == 0 ==> i % 2 == 1;\nloop invariant i % 2 == 0 ==> i % 2 == 0;\nloop invariant i % 2 == 0 ==> i % 2 == 1;\nloop invariant i % 2 == 0 ==> i % 2 == 0;\nloop invariant i % 2 == 0 ==> i % 2 == 1;\nloop invariant i % 2 == 0 ==> i % 2 == 0;\nloop invariant i % 2 == 0 ==> i % 2 == 1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= 2*k is preserved but not established.\nloop invariant i % 2 == (i < 2*k) is preserved but not established.\nloop invariant i % 2 == (i % 2 == 0) ==> i % 2 == 0 is partially proven to be inductive.\nloop invariant i % 2 == 0 ==> i % 2 == 0 is partially proven to be inductive.\nloop invariant i % 2 == 0 ==> i % 2 == 1 is preserved but not established.\nAssertion k < 0 || n == k: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int n = 0;\n    int k = unknown_int();\n    if (!(k <= LARGE_INT && k >= -LARGE_INT)) return 0;\n    /*@\n\n\nloop invariant i3: i % 2 == (i % 2 == 0) ==> i % 2 == 0;\nloop invariant i4: i % 2 == 0 ==> i % 2 == 0;\n\n*/\nfor(i = 0; i < 2*k; i++) {\n        if (i % 2 == 0) {\n            n ++;\n        }\n    }\n    {;\n//@ assert(k < 0 || n == k);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 2 * k;\nloop invariant -k <= n - i / 2 <= k;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= 2 * k is preserved but not established.\nloop invariant -k <= n - i / 2 <= k is established but not preserved.\nAssertion k < 0 || n == k: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int n = 0;\n    int k = unknown_int();\n    if (!(k <= LARGE_INT && k >= -LARGE_INT)) return 0;\n    /*@\n\n\n*/\nfor(i = 0; i < 2*k; i++) {\n        if (i % 2 == 0) {\n            n ++;\n        }\n    }\n    {;\n//@ assert(k < 0 || n == k);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant n <= k;\nloop invariant k >= 0 ==> n == k;\nloop invariant k < 0 ==> n == k;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant n <= k is neither established nor preserved.\nloop invariant k >= 0 ==> n == k is preserved but not established.\nloop invariant k < 0 ==> n == k is partially proven to be inductive.\nAssertion k < 0 || n == k: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int n = 0;\n    int k = unknown_int();\n    if (!(k <= LARGE_INT && k >= -LARGE_INT)) return 0;\n    /*@\n\n\n\n*/\nfor(i = 0; i < 2*k; i++) {\n        if (i % 2 == 0) {\n            n ++;\n        }\n    }\n    {;\n//@ assert(k < 0 || n == k);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 2*k;\nloop invariant 0 <= n <= k;\nloop invariant n == k ==> (i % 2 == 0);\nloop invariant n < k ==> (i % 2 != 0);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= 2*k is preserved but not established.\nloop invariant 0 <= n <= k is established but not preserved.\nloop invariant n == k ==> (i % 2 == 0) is partially proven to be inductive.\nloop invariant n < k ==> (i % 2 != 0) is neither established nor preserved.\nAssertion k < 0 || n == k: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int n = 0;\n    int k = unknown_int();\n    if (!(k <= LARGE_INT && k >= -LARGE_INT)) return 0;\n    /*@\n\n\n\n\n*/\nfor(i = 0; i < 2*k; i++) {\n        if (i % 2 == 0) {\n            n ++;\n        }\n    }\n    {;\n//@ assert(k < 0 || n == k);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 8,
                "annotations": "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant i3;\nloop invariant i4;\nloop invariant i1: i >= 0;\nloop invariant i2: i <= 2*k;\nloop invariant i3: n >= 0;\nloop invariant i4: n <= k;\nloop invariant i5: n == k ==> i == 2*k;\nloop invariant i6: n == k ==> i % 2 == 0;\nloop invariant i7: n == k ==> i == 2*k;\nloop invariant i8: n == k ==> i >= 0;\nloop invariant i9: n == k ==> i <= 2*k;\nloop invariant i10: n == k ==> n >= 0;\nloop invariant i11: n == k ==> n <= k;\nloop invariant i12: n == k ==> i >= 0 ==> i <= 2*k;\nloop invariant i13: n == k ==> i >= 0 ==> n >= 0;\nloop invariant i14: n == k ==> i >= 0 ==> n <= k;\nloop invariant i15: n == k ==> i <= 2*k ==> i >= 0;\nloop invariant i16: n == k ==> i <= 2*k ==> n >= 0;\nloop invariant i17: n == k ==> i <= 2*k ==> n <= k;\nloop invariant i18: n == k ==> n >= 0 ==> i >= 0;\nloop invariant i19: n == k ==> n >= 0 ==> i <= 2*k;\nloop invariant i20: n == k ==> n <= k ==> i >= 0;\nloop invariant i21: n == k ==> n <= k ==> i <= 2*k;\nloop invariant i22: n == k ==> i >= 0 ==> i <= 2*k ==> n >= 0;\nloop invariant i23: n == k ==> i >= 0 ==> i <= 2*k ==> n <= k;\nloop invariant i24: n == k ==> i >= 0 ==> n >= 0 ==> i <= 2*k;\nloop invariant i25: n == k ==> i >= 0 ==> n <= k ==> i <= 2*k;\nloop invariant i26: n == k ==> i <= 2*k ==> i >= 0 ==> n >= 0;\nloop invariant i27: n == k ==> i <= 2*k ==> i >= 0 ==> n <= k;\nloop invariant i28: n == k ==> i <= 2*k ==> n >= 0 ==> i >= 0;\nloop invariant i29: n == k ==> i <= 2*k ==> n <= k ==> i >= 0;\nloop invariant i30: n == k ==> n >= 0 ==> i >= 0 ==> i <= 2*k;\nloop invariant i31: n == k ==> n >= 0 ==> i >= 0 ==> n <= k;\nloop invariant i32: n == k ==> n >= 0 ==> i <= 2*k ==> n >= 0;\nloop invariant i33: n == k ==> n >= 0 ==> i <= 2*k ==> n <= k;\nloop invariant i34: n == k ==> n <= k ==> i >= 0 ==> i <= 2*k;\nloop invariant i35: n == k ==> n <= k ==> i >= 0 ==> n >= 0;\nloop invariant i36: n == k ==> n <= k ==> i <= 2*k ==> n >= 0;\nloop invariant i37: n == k ==> n <= k ==> i <= 2*k ==> n <= k;\nloop invariant i38: n == k ==> i >= 0 ==> i <= 2*k ==> n >= 0 ==> n <= k;\nloop invariant i39: n == k ==> i >= 0 ==> i <= 2*k ==> n <= k ==> n >= 0;\nloop invariant i40: n == k ==> i >= 0 ==> n >= 0 ==> i <= 2*k ==> n <= k;\nloop invariant i41: n == k ==> i >= 0 ==> n <= k ==> i <= 2*k ==> n >= 0;\nloop invariant i42: n == k ==> i <= 2*k ==> i >= 0 ==> n >= 0 ==> n <= k;\nloop invariant i43: n == k ==> i <= 2*k ==> i >= 0 ==> n <= k ==> n >= 0;\nloop invariant i44: n == k ==> i <= 2*k ==> n >= 0 ==> i >= 0 ==> n <= k;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 17: unbound logic variable i1. Ignoring loop annotation",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int n = 0;\n    int k = unknown_int();\n    if (!(k <= LARGE_INT && k >= -LARGE_INT)) return 0;\n    /*@\n\n\n\n\nloop invariant i5: i >= 0;\n\nloop invariant i7: n >= 0;\n\n\n\nloop invariant i11: n == k ==> i >= 0;\nloop invariant i12: n == k ==> i <= 2*k;\nloop invariant i13: n == k ==> n >= 0;\nloop invariant i14: n == k ==> n <= k;\nloop invariant i15: n == k ==> i >= 0 ==> i <= 2*k;\nloop invariant i16: n == k ==> i >= 0 ==> n >= 0;\nloop invariant i17: n == k ==> i >= 0 ==> n <= k;\nloop invariant i18: n == k ==> i <= 2*k ==> i >= 0;\nloop invariant i19: n == k ==> i <= 2*k ==> n >= 0;\nloop invariant i20: n == k ==> i <= 2*k ==> n <= k;\nloop invariant i21: n == k ==> n >= 0 ==> i >= 0;\nloop invariant i22: n == k ==> n >= 0 ==> i <= 2*k;\nloop invariant i23: n == k ==> n <= k ==> i >= 0;\nloop invariant i24: n == k ==> n <= k ==> i <= 2*k;\nloop invariant i25: n == k ==> i >= 0 ==> i <= 2*k ==> n >= 0;\nloop invariant i26: n == k ==> i >= 0 ==> i <= 2*k ==> n <= k;\nloop invariant i27: n == k ==> i >= 0 ==> n >= 0 ==> i <= 2*k;\nloop invariant i28: n == k ==> i >= 0 ==> n <= k ==> i <= 2*k;\nloop invariant i29: n == k ==> i <= 2*k ==> i >= 0 ==> n >= 0;\nloop invariant i30: n == k ==> i <= 2*k ==> i >= 0 ==> n <= k;\nloop invariant i31: n == k ==> i <= 2*k ==> n >= 0 ==> i >= 0;\nloop invariant i32: n == k ==> i <= 2*k ==> n <= k ==> i >= 0;\nloop invariant i33: n == k ==> n >= 0 ==> i >= 0 ==> i <= 2*k;\nloop invariant i34: n == k ==> n >= 0 ==> i >= 0 ==> n <= k;\nloop invariant i35: n == k ==> n >= 0 ==> i <= 2*k ==> n >= 0;\nloop invariant i36: n == k ==> n >= 0 ==> i <= 2*k ==> n <= k;\nloop invariant i37: n == k ==> n <= k ==> i >= 0 ==> i <= 2*k;\nloop invariant i38: n == k ==> n <= k ==> i >= 0 ==> n >= 0;\nloop invariant i39: n == k ==> n <= k ==> i <= 2*k ==> n >= 0;\nloop invariant i40: n == k ==> n <= k ==> i <= 2*k ==> n <= k;\nloop invariant i41: n == k ==> i >= 0 ==> i <= 2*k ==> n >= 0 ==> n <= k;\nloop invariant i42: n == k ==> i >= 0 ==> i <= 2*k ==> n <= k ==> n >= 0;\nloop invariant i43: n == k ==> i >= 0 ==> n >= 0 ==> i <= 2*k ==> n <= k;\nloop invariant i44: n == k ==> i >= 0 ==> n <= k ==> i <= 2*k ==> n >= 0;\nloop invariant i45: n == k ==> i <= 2*k ==> i >= 0 ==> n >= 0 ==> n <= k;\nloop invariant i46: n == k ==> i <= 2*k ==> i >= 0 ==> n <= k ==> n >= 0;\nloop invariant i47: n == k ==> i <= 2*k ==> n >= 0 ==> i >= 0 ==> n <= k;\n*/\nfor(i = 0; i < 2*k; i++) {\n        if (i % 2 == 0) {\n            n ++;\n        }\n    }\n    {;\n//@ assert(k < 0 || n == k);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 2*k;\nloop invariant n >= 0;\nloop invariant (i % 2 == 0 ==> n <= k);\nloop invariant (i % 2 != 0 ==> n == k);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= 2*k is preserved but not established.\nloop invariant n >= 0 is partially proven to be inductive.\nloop invariant (i % 2 == 0 ==> n <= k) is partially proven to be inductive.\nloop invariant (i % 2 != 0 ==> n == k) is established but not preserved.\nAssertion k < 0 || n == k: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int n = 0;\n    int k = unknown_int();\n    if (!(k <= LARGE_INT && k >= -LARGE_INT)) return 0;\n    /*@\n\nloop invariant i2: n >= 0;\n\n\n*/\nfor(i = 0; i < 2*k; i++) {\n        if (i % 2 == 0) {\n            n ++;\n        }\n    }\n    {;\n//@ assert(k < 0 || n == k);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant ( i <= 2*k ) && ( i >= 0 );\nloop invariant ( n <= k ) && ( n >= 0 );\nloop invariant ( i % 2 == 0 ) ==> ( n == i / 2 );\nloop invariant ( i % 2 != 0 ) ==> ( n == ( i - 1 ) / 2 );\nloop invariant ( k <= LARGE_INT ) && ( k >= -LARGE_INT );\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant ( i <= 2*k ) && ( i >= 0 ) is preserved but not established.\nloop invariant ( n <= k ) && ( n >= 0 ) is partially proven to be inductive.\nloop invariant ( i % 2 == 0 ) ==> ( n == i / 2 ) is established but not preserved.\nloop invariant ( i % 2 != 0 ) ==> ( n == ( i - 1 ) / 2 ) is established but not preserved.\nloop invariant ( k <= LARGE_INT ) && ( k >= -LARGE_INT ) is partially proven to be inductive.\nAssertion k < 0 || n == k: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int n = 0;\n    int k = unknown_int();\n    if (!(k <= LARGE_INT && k >= -LARGE_INT)) return 0;\n    /*@\n\n\n\n\nloop invariant i5: ( k <= LARGE_INT ) && ( k >= -LARGE_INT );\n*/\nfor(i = 0; i < 2*k; i++) {\n        if (i % 2 == 0) {\n            n ++;\n        }\n    }\n    {;\n//@ assert(k < 0 || n == k);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 2*k;\nloop invariant 0 <= n <= 2*k;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= 2*k is preserved but not established.\nloop invariant 0 <= n <= 2*k is established but not preserved.\nAssertion k < 0 || n == k: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int n = 0;\n    int k = unknown_int();\n    if (!(k <= LARGE_INT && k >= -LARGE_INT)) return 0;\n    /*@\n\n\n*/\nfor(i = 0; i < 2*k; i++) {\n        if (i % 2 == 0) {\n            n ++;\n        }\n    }\n    {;\n//@ assert(k < 0 || n == k);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant i == 0;\nloop invariant n == 0;\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant k >= -LARGE_INT;\nloop invariant i % 2 == 0 ==> n == k;\nloop invariant i % 2 == 1 ==> n == k - 1;\nloop invariant i == 2*k ==> n == k;\nloop invariant n >= k - 1;\nloop invariant k < 0 ==> n == k;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant i == 0 is partially proven to be inductive.\nloop invariant n == 0 is partially proven to be inductive.\nloop invariant 0 <= k <= LARGE_INT is preserved but not established.\nloop invariant k >= -LARGE_INT is partially proven to be inductive.\nloop invariant i % 2 == 0 ==> n == k is preserved but not established.\nloop invariant i % 2 == 1 ==> n == k - 1 is partially proven to be inductive.\nloop invariant i == 2*k ==> n == k is partially proven to be inductive.\nloop invariant n >= k - 1 is partially proven to be inductive.\nloop invariant k < 0 ==> n == k is partially proven to be inductive.\nAssertion k < 0 || n == k: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int n = 0;\n    int k = unknown_int();\n    if (!(k <= LARGE_INT && k >= -LARGE_INT)) return 0;\n    /*@\n\n\n\nloop invariant i4: k >= -LARGE_INT;\n\n\n\n\n\n*/\nfor(i = 0; i < 2*k; i++) {\n        if (i % 2 == 0) {\n            n ++;\n        }\n    }\n    {;\n//@ assert(k < 0 || n == k);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant i >= 0;\nloop invariant i <= 2 * k;\nloop invariant 0 <= n <= k;\nloop invariant (i % 2 == 0 ==> n == i / 2);\nloop invariant (i % 2 != 0 ==> n == i / 2 + 1);\nloop invariant (i % 2 == 0 ==> n == i / 2);\nloop invariant (i % 2 != 0 ==> n == i / 2 + 1);\nloop invariant (i % 2 == 0 ==> n == i / 2);\nloop invariant (i % 2 != 0 ==> n == i / 2 + 1);\nloop invariant (i % 2 == 0 ==> n == i / 2);\nloop invariant (i % 2 != 0 ==> n == i / 2 + 1);\nloop invariant (i % 2 == 0 ==> n == i / 2);\nloop invariant (i % 2 != 0 ==> n == i / 2 + 1);\nloop invariant (i % 2 == 0 ==> n == i / 2);\nloop invariant (i % 2 != 0 ==> n == i / 2 + 1);\nloop invariant (i % 2 == 0 ==> n == i / 2);\nloop invariant (i % 2 != 0 ==> n == i / 2 + 1);\nloop invariant (i % 2 == 0 ==> n == i / 2);\nloop invariant (i % 2 != 0 ==> n == i / 2 + 1);\nloop invariant (i % 2 == 0 ==> n == i / 2);\nloop invariant (i % 2 != 0 ==> n == i / 2 + 1);\nloop invariant (i % 2 == 0 ==> n == i / 2);\nloop invariant (i % 2 != 0 ==> n == i / 2 + 1);\nloop invariant (i % 2 == 0 ==> n == i / 2);\nloop invariant (i % 2 != 0 ==> n == i / 2 + 1);\nloop invariant (i % 2 == 0 ==> n == i / 2);\nloop invariant (i % 2 != 0 ==> n == i / 2 + 1);\nloop invariant (i % 2 == 0 ==> n == i / 2);\nloop invariant (i % 2 != 0 ==> n == i / 2 + 1);\nloop invariant (i % 2 == 0 ==> n == i / 2);\nloop invariant (i % 2 != 0 ==> n == i / 2 + 1);\nloop invariant (i % 2 == 0 ==> n == i / 2);\nloop invariant (i % 2 != 0 ==> n == i / 2 + 1);\nloop invariant (i % 2 == 0 ==> n == i / 2);\nloop invariant (i % 2 != 0 ==> n == i / 2 + 1);\nloop invariant (i % 2 == 0 ==> n == i / 2);\nloop invariant (i % 2 != 0 ==> n == i / 2 + 1);\nloop invariant (i % 2 == 0 ==> n == i / 2);\nloop invariant (i % 2 != 0 ==> n == i / 2 + 1);\nloop invariant (i % 2 == 0 ==> n == i / 2);\nloop invariant (i % 2 != 0 ==> n == i / 2 + 1);\nloop invariant (i % 2 == 0 ==> n == i / 2);\nloop invariant (i % 2 != 0 ==> n == i / 2 + 1);\nloop invariant (i % 2 == 0 ==> n == i / 2);\nloop invariant (i % 2 != 0 ==> n == i / 2 + 1);\nloop invariant (i % 2 == 0 ==> n == i / 2);\nloop invariant (i % 2 != 0 ==> n == i / 2 + 1);\nloop invariant (i % 2 == 0 ==> n == i / 2);\nloop invariant (i % 2 != 0 ==> n == i / 2 + 1);\nloop invariant (i % 2 == 0 ==> n == i / 2);\nloop invariant (i % 2 != 0 ==> n == i / 2 + 1);\nloop invariant (i % 2 == 0 ==> n == i / 2);\nloop invariant (i % 2 != 0 ==> n == i / 2 + 1);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant i >= 0 is partially proven to be inductive.\nloop invariant i <= 2 * k is preserved but not established.\nloop invariant 0 <= n <= k is partially proven to be inductive.\nloop invariant (i % 2 == 0 ==> n == i / 2) is partially proven to be inductive.\nloop invariant (i % 2 != 0 ==> n == i / 2 + 1) is partially proven to be inductive.\nAssertion k < 0 || n == k: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int n = 0;\n    int k = unknown_int();\n    if (!(k <= LARGE_INT && k >= -LARGE_INT)) return 0;\n    /*@\nloop invariant i1: i >= 0;\n\n\nloop invariant i4: (i % 2 == 0 ==> n == i / 2);\nloop invariant i5: (i % 2 != 0 ==> n == i / 2 + 1);\n*/\nfor(i = 0; i < 2*k; i++) {\n        if (i % 2 == 0) {\n            n ++;\n        }\n    }\n    {;\n//@ assert(k < 0 || n == k);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= 2k;\nloop invariant k < 0 ==> n == k;\nloop invariant k >= 0 ==> n == 2k;\nloop invariant k < 0 ==> n == k;\nloop invariant k >= 0 ==> n == 2k;\nloop invariant k < 0 ==> n == k;\nloop invariant k >= 0 ==> n == 2k;\nloop invariant k < 0 ==> n == k;\nloop invariant k >= 0 ==> n == 2k;\nloop invariant k < 0 ==> n == k;\nloop invariant k >= 0 ==> n == 2k;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 17: unexpected token 'k'",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int n = 0;\n    int k = unknown_int();\n    if (!(k <= LARGE_INT && k >= -LARGE_INT)) return 0;\n    /*@\n\n\n\n*/\nfor(i = 0; i < 2*k; i++) {\n        if (i % 2 == 0) {\n            n ++;\n        }\n    }\n    {;\n//@ assert(k < 0 || n == k);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 159,
                "annotations": "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant i3;\nloop invariant i4;\nloop invariant i5;\nloop invariant i6;\nloop invariant i7;\nloop invariant i8;\nloop invariant i9;\nloop invariant i10;\nloop invariant i11;\nloop invariant i12;\nloop invariant i13;\nloop invariant i14;\nloop invariant i15;\nloop invariant i16;\nloop invariant i17;\nloop invariant i18;\nloop invariant i19;\nloop invariant i20;\nloop invariant i21;\nloop invariant i22;\nloop invariant i23;\nloop invariant i24;\nloop invariant i25;\nloop invariant i26;\nloop invariant i27;\nloop invariant i28;\nloop invariant i29;\nloop invariant i30;\nloop invariant i31;\nloop invariant i32;\nloop invariant i33;\nloop invariant i34;\nloop invariant i35;\nloop invariant i36;\nloop invariant i37;\nloop invariant i38;\nloop invariant i39;\nloop invariant i40;\nloop invariant i41;\nloop invariant i42;\nloop invariant i43;\nloop invariant i44;\nloop invariant i45;\nloop invariant i46;\nloop invariant i47;\nloop invariant i48;\nloop invariant i49;\nloop invariant i50;\nloop invariant i51;\nloop invariant i52;\nloop invariant i53;\nloop invariant i54;\nloop invariant i55;\nloop invariant i56;\nloop invariant i57;\nloop invariant i58;\nloop invariant i59;\nloop invariant i60;\nloop invariant i61;\nloop invariant i62;\nloop invariant i63;\nloop invariant i64;\nloop invariant i65;\nloop invariant i66;\nloop invariant i67;\nloop invariant i68;\nloop invariant i69;\nloop invariant i70;\nloop invariant i71;\nloop invariant i72;\nloop invariant i73;\nloop invariant i74;\nloop invariant i75;\nloop invariant i76;\nloop invariant i77;\nloop invariant i78;\nloop invariant i79;\nloop invariant i80;\nloop invariant i81;\nloop invariant i82;\nloop invariant i83;\nloop invariant i84;\nloop invariant i85;\nloop invariant i86;\nloop invariant i87;\nloop invariant i88;\nloop invariant i89;\nloop invariant i90;\nloop invariant i91;\nloop invariant i92;\nloop invariant i93;\nloop invariant i94;\nloop invariant i95;\nloop invariant i96;\nloop invariant i97;\nloop invariant i98;\nloop invariant i99;\nloop invariant i100;\nloop invariant i101;\nloop invariant i102;\nloop invariant i103;\nloop invariant i104;\nloop invariant i105;\nloop invariant i106;\nloop invariant i107;\nloop invariant i108;\nloop invariant i109;\nloop invariant i110;\nloop invariant i111;\nloop invariant i112;\nloop invariant i113;\nloop invariant i114;\nloop invariant i115;\nloop invariant i116;\nloop invariant i117;\nloop invariant i118;\nloop invariant i119;\nloop invariant i120;\nloop invariant i121;\nloop invariant i122;\nloop invariant i123;\nloop invariant i124;\nloop invariant i125;\nloop invariant i126;\nloop invariant i127;\nloop invariant i128;\nloop invariant i129;\nloop invariant i130;\nloop invariant i131;\nloop invariant i132;\nloop invariant i133;\nloop invariant i134;\nloop invariant i135;\nloop invariant i136;\nloop invariant i137;\nloop invariant i138;\nloop invariant i139;\nloop invariant i140;\nloop invariant i141;\nloop invariant i142;\nloop invariant i143;\nloop invariant i144;\nloop invariant i145;\nloop invariant i146;\nloop invariant i147;\nloop invariant i148;\nloop invariant i149;\nloop invariant i150;\nloop invariant i151;\nloop invariant i152;\nloop invariant i153;\nloop invariant i154;\nloop invariant i155;\nloop invariant i156;\nloop invariant i157;\nloop invariant i158;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 17: unbound logic variable i1. Ignoring loop annotation",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int n = 0;\n    int k = unknown_int();\n    if (!(k <= LARGE_INT && k >= -LARGE_INT)) return 0;\n    /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nfor(i = 0; i < 2*k; i++) {\n        if (i % 2 == 0) {\n            n ++;\n        }\n    }\n    {;\n//@ assert(k < 0 || n == k);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i < 2*k;\nloop invariant n >= 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i < 2*k is neither established nor preserved.\nloop invariant n >= 0 is partially proven to be inductive.\nAssertion k < 0 || n == k: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int n = 0;\n    int k = unknown_int();\n    if (!(k <= LARGE_INT && k >= -LARGE_INT)) return 0;\n    /*@\n\nloop invariant i2: n >= 0;\n*/\nfor(i = 0; i < 2*k; i++) {\n        if (i % 2 == 0) {\n            n ++;\n        }\n    }\n    {;\n//@ assert(k < 0 || n == k);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 2*k;\nloop invariant 0 <= n <= k;\nloop invariant n == (i/2);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= 2*k is preserved but not established.\nloop invariant 0 <= n <= k is partially proven to be inductive.\nloop invariant n == (i/2) is established but not preserved.\nAssertion k < 0 || n == k: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int n = 0;\n    int k = unknown_int();\n    if (!(k <= LARGE_INT && k >= -LARGE_INT)) return 0;\n    /*@\n\n\n\n*/\nfor(i = 0; i < 2*k; i++) {\n        if (i % 2 == 0) {\n            n ++;\n        }\n    }\n    {;\n//@ assert(k < 0 || n == k);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 2*k;\nloop invariant 0 <= n <= k;\nloop invariant n == i/2;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= 2*k is preserved but not established.\nloop invariant 0 <= n <= k is partially proven to be inductive.\nloop invariant n == i/2 is established but not preserved.\nAssertion k < 0 || n == k: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int n = 0;\n    int k = unknown_int();\n    if (!(k <= LARGE_INT && k >= -LARGE_INT)) return 0;\n    /*@\n\n\n\n*/\nfor(i = 0; i < 2*k; i++) {\n        if (i % 2 == 0) {\n            n ++;\n        }\n    }\n    {;\n//@ assert(k < 0 || n == k);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 95: unexpected token 'k'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int n = 0;\n    int k = unknown_int();\n    if (!(k <= LARGE_INT && k >= -LARGE_INT)) return 0;\n    /*@\nloop invariant i1: 0 <= i <= 2*k;\nloop invariant i2: i % 2 == (i < 2*k);\nloop invariant i3: i % 2 == (i % 2 == 0) ==> i % 2 == 0;\nloop invariant i4: i % 2 == 0 ==> i % 2 == 0;\nloop invariant i5: i % 2 == 0 ==> i % 2 == 1;\nloop invariant i6: 0 <= i <= 2 * k;\nloop invariant i7: -k <= n - i / 2 <= k;\nloop invariant i8: n <= k;\nloop invariant i9: k >= 0 ==> n == k;\nloop invariant i10: k < 0 ==> n == k;\nloop invariant i11: 0 <= n <= k;\nloop invariant i12: n == k ==> (i % 2 == 0);\nloop invariant i13: n < k ==> (i % 2 != 0);\nloop invariant i14: i1;\nloop invariant i15: i2;\nloop invariant i16: i3;\nloop invariant i17: i4;\nloop invariant i18: i >= 0;\nloop invariant i19: i <= 2*k;\nloop invariant i20: n >= 0;\nloop invariant i21: n == k ==> i == 2*k;\nloop invariant i22: n == k ==> i % 2 == 0;\nloop invariant i23: n == k ==> i >= 0;\nloop invariant i24: n == k ==> i <= 2*k;\nloop invariant i25: n == k ==> n >= 0;\nloop invariant i26: n == k ==> n <= k;\nloop invariant i27: n == k ==> i >= 0 ==> i <= 2*k;\nloop invariant i28: n == k ==> i >= 0 ==> n >= 0;\nloop invariant i29: n == k ==> i >= 0 ==> n <= k;\nloop invariant i30: n == k ==> i <= 2*k ==> i >= 0;\nloop invariant i31: n == k ==> i <= 2*k ==> n >= 0;\nloop invariant i32: n == k ==> i <= 2*k ==> n <= k;\nloop invariant i33: n == k ==> n >= 0 ==> i >= 0;\nloop invariant i34: n == k ==> n >= 0 ==> i <= 2*k;\nloop invariant i35: n == k ==> n <= k ==> i >= 0;\nloop invariant i36: n == k ==> n <= k ==> i <= 2*k;\nloop invariant i37: n == k ==> i >= 0 ==> i <= 2*k ==> n >= 0;\nloop invariant i38: n == k ==> i >= 0 ==> i <= 2*k ==> n <= k;\nloop invariant i39: n == k ==> i >= 0 ==> n >= 0 ==> i <= 2*k;\nloop invariant i40: n == k ==> i >= 0 ==> n <= k ==> i <= 2*k;\nloop invariant i41: n == k ==> i <= 2*k ==> i >= 0 ==> n >= 0;\nloop invariant i42: n == k ==> i <= 2*k ==> i >= 0 ==> n <= k;\nloop invariant i43: n == k ==> i <= 2*k ==> n >= 0 ==> i >= 0;\nloop invariant i44: n == k ==> i <= 2*k ==> n <= k ==> i >= 0;\nloop invariant i45: n == k ==> n >= 0 ==> i >= 0 ==> i <= 2*k;\nloop invariant i46: n == k ==> n >= 0 ==> i >= 0 ==> n <= k;\nloop invariant i47: n == k ==> n >= 0 ==> i <= 2*k ==> n >= 0;\nloop invariant i48: n == k ==> n >= 0 ==> i <= 2*k ==> n <= k;\nloop invariant i49: n == k ==> n <= k ==> i >= 0 ==> i <= 2*k;\nloop invariant i50: n == k ==> n <= k ==> i >= 0 ==> n >= 0;\nloop invariant i51: n == k ==> n <= k ==> i <= 2*k ==> n >= 0;\nloop invariant i52: n == k ==> n <= k ==> i <= 2*k ==> n <= k;\nloop invariant i53: n == k ==> i >= 0 ==> i <= 2*k ==> n >= 0 ==> n <= k;\nloop invariant i54: n == k ==> i >= 0 ==> i <= 2*k ==> n <= k ==> n >= 0;\nloop invariant i55: n == k ==> i >= 0 ==> n >= 0 ==> i <= 2*k ==> n <= k;\nloop invariant i56: n == k ==> i >= 0 ==> n <= k ==> i <= 2*k ==> n >= 0;\nloop invariant i57: n == k ==> i <= 2*k ==> i >= 0 ==> n >= 0 ==> n <= k;\nloop invariant i58: n == k ==> i <= 2*k ==> i >= 0 ==> n <= k ==> n >= 0;\nloop invariant i59: n == k ==> i <= 2*k ==> n >= 0 ==> i >= 0 ==> n <= k;\nloop invariant i60: (i % 2 == 0 ==> n <= k);\nloop invariant i61: (i % 2 != 0 ==> n == k);\nloop invariant i62: ( i <= 2*k ) && ( i >= 0 );\nloop invariant i63: ( n <= k ) && ( n >= 0 );\nloop invariant i64: ( i % 2 == 0 ) ==> ( n == i / 2 );\nloop invariant i65: ( i % 2 != 0 ) ==> ( n == ( i - 1 ) / 2 );\nloop invariant i66: ( k <= LARGE_INT ) && ( k >= -LARGE_INT );\nloop invariant i67: 0 <= n <= 2*k;\nloop invariant i68: i == 0;\nloop invariant i69: n == 0;\nloop invariant i70: 0 <= k <= LARGE_INT;\nloop invariant i71: k >= -LARGE_INT;\nloop invariant i72: i % 2 == 0 ==> n == k;\nloop invariant i73: i % 2 == 1 ==> n == k - 1;\nloop invariant i74: i == 2*k ==> n == k;\nloop invariant i75: n >= k - 1;\nloop invariant i76: i <= 2 * k;\nloop invariant i77: (i % 2 == 0 ==> n == i / 2);\nloop invariant i78: (i % 2 != 0 ==> n == i / 2 + 1);\nloop invariant i79: 1 <= i <= 2k;\nloop invariant i80: k >= 0 ==> n == 2k;\nloop invariant i81: i5;\nloop invariant i82: i6;\nloop invariant i83: i7;\nloop invariant i84: i8;\nloop invariant i85: i9;\nloop invariant i86: i10;\nloop invariant i87: i11;\nloop invariant i88: i12;\nloop invariant i89: i13;\nloop invariant i90: i14;\nloop invariant i91: i15;\nloop invariant i92: i16;\nloop invariant i93: i17;\nloop invariant i94: i18;\nloop invariant i95: i19;\nloop invariant i96: i20;\nloop invariant i97: i21;\nloop invariant i98: i22;\nloop invariant i99: i23;\nloop invariant i100: i24;\nloop invariant i101: i25;\nloop invariant i102: i26;\nloop invariant i103: i27;\nloop invariant i104: i28;\nloop invariant i105: i29;\nloop invariant i106: i30;\nloop invariant i107: i31;\nloop invariant i108: i32;\nloop invariant i109: i33;\nloop invariant i110: i34;\nloop invariant i111: i35;\nloop invariant i112: i36;\nloop invariant i113: i37;\nloop invariant i114: i38;\nloop invariant i115: i39;\nloop invariant i116: i40;\nloop invariant i117: i41;\nloop invariant i118: i42;\nloop invariant i119: i43;\nloop invariant i120: i44;\nloop invariant i121: i45;\nloop invariant i122: i46;\nloop invariant i123: i47;\nloop invariant i124: i48;\nloop invariant i125: i49;\nloop invariant i126: i50;\nloop invariant i127: i51;\nloop invariant i128: i52;\nloop invariant i129: i53;\nloop invariant i130: i54;\nloop invariant i131: i55;\nloop invariant i132: i56;\nloop invariant i133: i57;\nloop invariant i134: i58;\nloop invariant i135: i59;\nloop invariant i136: i60;\nloop invariant i137: i61;\nloop invariant i138: i62;\nloop invariant i139: i63;\nloop invariant i140: i64;\nloop invariant i141: i65;\nloop invariant i142: i66;\nloop invariant i143: i67;\nloop invariant i144: i68;\nloop invariant i145: i69;\nloop invariant i146: i70;\nloop invariant i147: i71;\nloop invariant i148: i72;\nloop invariant i149: i73;\nloop invariant i150: i74;\nloop invariant i151: i75;\nloop invariant i152: i76;\nloop invariant i153: i77;\nloop invariant i154: i78;\nloop invariant i155: i79;\nloop invariant i156: i80;\nloop invariant i157: i81;\nloop invariant i158: i82;\nloop invariant i159: i83;\nloop invariant i160: i84;\nloop invariant i161: i85;\nloop invariant i162: i86;\nloop invariant i163: i87;\nloop invariant i164: i88;\nloop invariant i165: i89;\nloop invariant i166: i90;\nloop invariant i167: i91;\nloop invariant i168: i92;\nloop invariant i169: i93;\nloop invariant i170: i94;\nloop invariant i171: i95;\nloop invariant i172: i96;\nloop invariant i173: i97;\nloop invariant i174: i98;\nloop invariant i175: i99;\nloop invariant i176: i100;\nloop invariant i177: i101;\nloop invariant i178: i102;\nloop invariant i179: i103;\nloop invariant i180: i104;\nloop invariant i181: i105;\nloop invariant i182: i106;\nloop invariant i183: i107;\nloop invariant i184: i108;\nloop invariant i185: i109;\nloop invariant i186: i110;\nloop invariant i187: i111;\nloop invariant i188: i112;\nloop invariant i189: i113;\nloop invariant i190: i114;\nloop invariant i191: i115;\nloop invariant i192: i116;\nloop invariant i193: i117;\nloop invariant i194: i118;\nloop invariant i195: i119;\nloop invariant i196: i120;\nloop invariant i197: i121;\nloop invariant i198: i122;\nloop invariant i199: i123;\nloop invariant i200: i124;\nloop invariant i201: i125;\nloop invariant i202: i126;\nloop invariant i203: i127;\nloop invariant i204: i128;\nloop invariant i205: i129;\nloop invariant i206: i130;\nloop invariant i207: i131;\nloop invariant i208: i132;\nloop invariant i209: i133;\nloop invariant i210: i134;\nloop invariant i211: i135;\nloop invariant i212: i136;\nloop invariant i213: i137;\nloop invariant i214: i138;\nloop invariant i215: i139;\nloop invariant i216: i140;\nloop invariant i217: i141;\nloop invariant i218: i142;\nloop invariant i219: i143;\nloop invariant i220: i144;\nloop invariant i221: i145;\nloop invariant i222: i146;\nloop invariant i223: i147;\nloop invariant i224: i148;\nloop invariant i225: i149;\nloop invariant i226: i150;\nloop invariant i227: i151;\nloop invariant i228: i152;\nloop invariant i229: i153;\nloop invariant i230: i154;\nloop invariant i231: i155;\nloop invariant i232: i156;\nloop invariant i233: i157;\nloop invariant i234: i158;\nloop invariant i235: 0 <= i < 2*k;\nloop invariant i236: n == (i/2);\nloop invariant i237: n == i/2;\n*/\nfor(i = 0; i < 2*k; i++) {\n        if (i % 2 == 0) {\n            n ++;\n        }\n    }\n    {;\n//@ assert(k < 0 || n == k);\n}\n\n    return 0;\n}",
        "combined_annotation_num_solver_calls": 175,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int n = 0;\n    int k = unknown_int();\n    if (!(k <= LARGE_INT && k >= -LARGE_INT)) return 0;\n    /*@\n\n\nloop invariant i3: i % 2 == (i % 2 == 0) ==> i % 2 == 0;\nloop invariant i4: i % 2 == 0 ==> i % 2 == 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i18: i >= 0;\n\nloop invariant i20: n >= 0;\n\n\nloop invariant i23: n == k ==> i >= 0;\nloop invariant i24: n == k ==> i <= 2*k;\nloop invariant i25: n == k ==> n >= 0;\nloop invariant i26: n == k ==> n <= k;\nloop invariant i27: n == k ==> i >= 0 ==> i <= 2*k;\nloop invariant i28: n == k ==> i >= 0 ==> n >= 0;\nloop invariant i29: n == k ==> i >= 0 ==> n <= k;\nloop invariant i30: n == k ==> i <= 2*k ==> i >= 0;\nloop invariant i31: n == k ==> i <= 2*k ==> n >= 0;\nloop invariant i32: n == k ==> i <= 2*k ==> n <= k;\nloop invariant i33: n == k ==> n >= 0 ==> i >= 0;\nloop invariant i34: n == k ==> n >= 0 ==> i <= 2*k;\nloop invariant i35: n == k ==> n <= k ==> i >= 0;\nloop invariant i36: n == k ==> n <= k ==> i <= 2*k;\nloop invariant i37: n == k ==> i >= 0 ==> i <= 2*k ==> n >= 0;\nloop invariant i38: n == k ==> i >= 0 ==> i <= 2*k ==> n <= k;\nloop invariant i39: n == k ==> i >= 0 ==> n >= 0 ==> i <= 2*k;\nloop invariant i40: n == k ==> i >= 0 ==> n <= k ==> i <= 2*k;\nloop invariant i41: n == k ==> i <= 2*k ==> i >= 0 ==> n >= 0;\nloop invariant i42: n == k ==> i <= 2*k ==> i >= 0 ==> n <= k;\nloop invariant i43: n == k ==> i <= 2*k ==> n >= 0 ==> i >= 0;\nloop invariant i44: n == k ==> i <= 2*k ==> n <= k ==> i >= 0;\nloop invariant i45: n == k ==> n >= 0 ==> i >= 0 ==> i <= 2*k;\nloop invariant i46: n == k ==> n >= 0 ==> i >= 0 ==> n <= k;\nloop invariant i47: n == k ==> n >= 0 ==> i <= 2*k ==> n >= 0;\nloop invariant i48: n == k ==> n >= 0 ==> i <= 2*k ==> n <= k;\nloop invariant i49: n == k ==> n <= k ==> i >= 0 ==> i <= 2*k;\nloop invariant i50: n == k ==> n <= k ==> i >= 0 ==> n >= 0;\nloop invariant i51: n == k ==> n <= k ==> i <= 2*k ==> n >= 0;\nloop invariant i52: n == k ==> n <= k ==> i <= 2*k ==> n <= k;\nloop invariant i53: n == k ==> i >= 0 ==> i <= 2*k ==> n >= 0 ==> n <= k;\nloop invariant i54: n == k ==> i >= 0 ==> i <= 2*k ==> n <= k ==> n >= 0;\nloop invariant i55: n == k ==> i >= 0 ==> n >= 0 ==> i <= 2*k ==> n <= k;\nloop invariant i56: n == k ==> i >= 0 ==> n <= k ==> i <= 2*k ==> n >= 0;\nloop invariant i57: n == k ==> i <= 2*k ==> i >= 0 ==> n >= 0 ==> n <= k;\nloop invariant i58: n == k ==> i <= 2*k ==> i >= 0 ==> n <= k ==> n >= 0;\nloop invariant i59: n == k ==> i <= 2*k ==> n >= 0 ==> i >= 0 ==> n <= k;\n\n\n\n\nloop invariant i64: ( i % 2 == 0 ) ==> ( n == i / 2 );\n\nloop invariant i66: ( k <= LARGE_INT ) && ( k >= -LARGE_INT );\n\n\n\n\nloop invariant i71: k >= -LARGE_INT;\n\n\nloop invariant i74: i == 2*k ==> n == k;\n\n\nloop invariant i77: (i % 2 == 0 ==> n == i / 2);\nloop invariant i78: (i % 2 != 0 ==> n == i / 2 + 1);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nfor(i = 0; i < 2*k; i++) {\n        if (i % 2 == 0) {\n            n ++;\n        }\n    }\n    {;\n//@ assert(k < 0 || n == k);\n}\n\n    return 0;\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_nondet_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum01_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/22.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/85.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/ex2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/42.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/diamond_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/odd.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/even.c",
            "../dataset/loop_invariants/code2inv/24.c",
            "../dataset/loop_invariants/code2inv/130.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/diamond_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/overflow_safe1.c",
            "../dataset/loop_invariants/code2inv/113.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/ddlm2013_true-unreach-call.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/MADWiFi-encode_ie_ok.c",
            "../dataset/loop_invariants/code2inv/69.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/half.c"
        ],
        "skipped": [],
        "total": 18,
        "success_count": 3,
        "failure_count": 15,
        "success_rate": 0.16666666666666666
    }
}