{
    "logs": {
        "file": "../dataset/loop_invariants/accelerating_invariant_generation/invgen/split.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n  int k = 100;\n  int b;\n  int i;\n  int j;\n  int n;\n  i = j;\n  for( n = 0 ; n < 2*k ; n++ ) {\n        \n    if(b) {\n      i++;\n    } else {\n      j++;\n    }\n    b = !b;\n  }\n  {;\n//@ assert(i == j);\n}\n\n}",
        "success": false,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= j <= k;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i + j >= n;\nloop invariant i + j <= 2*k;\nloop invariant i + j == n;\nloop invariant i >= j;\nloop invariant j >= i - 2*k + n;\nloop invariant i >= j - k;\nloop invariant j >= i - k;\nloop invariant i >= j - n;\nloop invariant j >= i - n;\nloop invariant i >= j - 2*k;\nloop invariant j >= i - 2*k + 2*n;\nloop invariant i >= j - 2*k + 2*n;\nloop invariant j >= i - 2*k + 2*n;\nloop invariant i >= j - 2*k + 2*n;\nloop invariant j >= i - 2*k + 2*n;\nloop invariant i >= j - 2*k + 2*n;\nloop invariant j >= i - 2*k + 2*n;\nloop invariant i >= j - 2*k + 2*n;\nloop invariant j >= i - 2*k + 2*n;\nloop invariant i >= j - 2*k + 2*n;\nloop invariant j >= i - 2*k + 2*n;\nloop invariant i >= j - 2*k + 2*n;\nloop invariant j >= i - 2*k + 2*n;\nloop invariant i >= j - 2*k + 2*n;\nloop invariant j >= i - 2*k + 2*n;\nloop invariant i >= j - 2*k + 2*n;\nloop invariant j >= i - 2*k + 2*n;\nloop invariant i >= j - 2*k + 2*n;\nloop invariant j >= i - 2*k + 2*n;\nloop invariant i >= j - 2*k + 2*n;\nloop invariant j >= i - 2*k + 2*n;\nloop invariant i >= j - 2*k + 2*n;\nloop invariant j >= i - 2*k + 2*n;\nloop invariant i >= j - 2*k + 2*n;\nloop invariant j >= i - 2*k + 2*n;\nloop invariant i >= j - 2*k + 2*n;\nloop invariant j >= i - 2*k + 2*n;\nloop invariant i >= j - 2*k + 2*n;\nloop invariant j >= i - 2*k + 2*n;\nloop invariant i >= j - 2*k + 2*n;\nloop invariant j >= i - 2*k + 2*n;\nloop invariant i >= j - 2*k + 2*n;\nloop invariant j >= i - 2*k + 2*n;\nloop invariant i >= j - 2*k + 2*n;\nloop invariant j >= i - 2*k + 2*n;\nloop invariant i >= j - 2*k + 2*n;\nloop invariant j >= i - 2*k + 2*n;\nloop invariant i >= j - 2*k + 2*n;\nloop invariant j >= i - 2*k + 2*n;\nloop invariant i >= j - 2*k + 2*n;\nloop invariant j >= i - 2*k + 2*n;\nloop invariant i >= j - 2*k + 2*n;\nloop invariant j >= i - 2*k + 2*n;\nloop invariant i >= j - 2*k + 2*n;\nloop invariant j >= i - 2*k + 2*n;\nloop invariant i >= j - 2*k + 2*n;\nloop invariant j >= i - 2*k + 2*n;\nloop invariant i >= j - 2*k + 2*n;\nloop invariant j >= i - 2*k + 2*n;\nloop invariant i >= j - 2*k + 2*n;\nloop invariant j >= i - 2*k + 2*n;\nloop invariant i >= j - 2*k + 2*n;\nloop invariant j >= i - 2*k + 2*n;\nloop invariant i >= j - 2*k + 2*n;\nloop invariant j >= i - 2*k + 2*n;\nloop invariant i >= j - 2*k + 2*n;\nloop invariant j >= i - 2*k + 2*n;\nloop invariant i >= j - 2*k + 2*n;\nloop invariant j >= i - 2*k + 2*n;\nloop invariant i >= j - 2*k + 2*n;\nloop invariant j >= i - 2*k + 2*n;\nloop invariant i >= j - 2*k + 2*n;\nloop invariant j >= i - 2*k + 2*n;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= 100;\nloop invariant 1 <= j <= 100;\nloop invariant i <= j;\nloop invariant i + j <= 200;\nloop invariant i + j >= 100;\nloop invariant n <= 200;\nloop invariant n >= 0;\nloop invariant b == (n % 2 == 0);\nloop invariant i + j == 2 * n;\nloop invariant i + j <= 200;\nloop invariant i + j >= 100;\nloop invariant i <= j;\nloop invariant i + j <= 200;\nloop invariant i + j >= 100;\nloop invariant b == (n % 2 == 0);\nloop invariant i + j == 2 * n;\nloop invariant i + j <= 200;\nloop invariant i + j >= 100;\nloop invariant i <= j;\nloop invariant i + j <= 200;\nloop invariant i + j >= 100;\nloop invariant b == (n % 2 == 0);\nloop invariant i + j == 2 * n;\nloop invariant i + j <= 200;\nloop invariant i + j >= 100;\nloop invariant i <= j;\nloop invariant i + j <= 200;\nloop invariant i + j >= 100;\nloop invariant b == (n % 2 == 0);\nloop invariant i + j == 2 * n;\nloop invariant i + j <= 200;\nloop invariant i + j >= 100;\nloop invariant i <= j;\nloop invariant i + j <= 200;\nloop invariant i + j >= 100;\nloop invariant b == (n % 2 == 0);\nloop invariant i + j == 2 * n;\nloop invariant i + j <= 200;\nloop invariant i + j >= 100;\nloop invariant i <= j;\nloop invariant i + j <= 200;\nloop invariant i + j >= 100;\nloop invariant b == (n % 2 == 0);\nloop invariant i + j == 2 * n;\nloop invariant i + j <= 200;\nloop invariant i + j >= 100;\nloop invariant i <= j;\nloop invariant i + j <= 200;\nloop invariant i + j >= 100;\nloop invariant b == (n % 2 == 0);\nloop invariant i + j == 2 * n;\nloop invariant i + j <= 200;\nloop invariant i + j >= 100;\nloop invariant i <= j;\nloop invariant i + j <= 200;\nloop invariant i + j >= 100;\nloop invariant b == (n % 2 == 0);\nloop invariant i + j == 2 * n;\nloop invariant i + j <= 200;\nloop invariant i + j >= 100;\nloop invariant i <= j;\nloop invariant i + j <= 200;\nloop invariant i + j >= 100;\nloop invariant b == (n % 2 == 0);\nloop invariant i + j == 2 * n;\nloop invariant i + j <= 200;\nloop invariant i + j >= 100;\nloop invariant i <= j;\nloop invariant i + j <= 200;\nloop invariant i + j >= 100;\nloop invariant b == (n % 2 == 0);\nloop invariant i + j == 2 * n;\nloop invariant i + j <= 200;\nloop invariant i + j >= 100;\nloop invariant i <= j;\nloop invariant i + j <= 200;\nloop invariant i + j >= 100;\nloop invariant b == (n % 2 == 0);\nloop invariant i + j == 2 * n;\nloop invariant i + j <= 200;\nloop invariant i + j >= 100;\nloop invariant i <= j;\nloop invariant i + j <= 200;\nloop invariant i + j >= 100;\nloop invariant b == (n % 2 == 0);\nloop invariant i + j == 2 * n;\nloop invariant i + j <= 200;\nloop invariant i + j >= 100;\nloop invariant i <= j;\nloop invariant i + j <= 200;\nloop invariant i + j >= 100;\nloop invariant b == (n % 2 == 0);\nloop invariant i + j == 2 * n;\nloop invariant i + j <= 200;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 50;\nloop invariant 0 <= j <= 50;\nloop invariant i + j == n;\nloop invariant b == (n % 2 == 0);\nloop invariant k == 100;\nloop invariant i == j;\nloop invariant i + j == 2*k;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i && i <= k;\nloop invariant 0 <= j && j <= k;\nloop invariant k == j + i;\nloop invariant i <= n && n <= 2*k;\nloop invariant j <= n && n <= 2*k;\nloop invariant n % 2 == 0 ==> i == n/2;\nloop invariant n % 2 != 0 ==> j == n/2;\nloop invariant n % 2 == 0 ==> b == 0;\nloop invariant n % 2 != 0 ==> b == 1;\nloop invariant n % 2 == 0 ==> i == j + n/2;\nloop invariant n % 2 != 0 ==> i == j + n/2 + 1;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant n % 2 == 0 ==> i == j + n/2;\nloop invariant n % 2 != 0 ==> i == j + n/2 + 1;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= k, 0 <= j <= k;\nloop invariant i + j = n;\nloop invariant i == j ==> b == !b;\nloop invariant b == !b ==> i == j;\nloop invariant b == !b ==> i + j == n;\nloop invariant b == !b ==> i + j == 2*k;\nloop invariant b == !b ==> i == j == k;\nloop invariant b == !b ==> i == j == k ==> i + j == 2*k;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 100;\nloop invariant 0 <= j <= 100;\nloop invariant i + j == k;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant i + j == k;\nloop invariant i == j ==> b == 1;\nloop invariant i != j ==> b == 0;\nloop invariant i >= j ==> b == 1;\nloop invariant i <= j ==> b == 0;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i >= j ==> b == 1;\nloop invariant i <= j ==> b == 0;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i >= j ==> b == 1;\nloop invariant i <= j ==> b == 0;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i >= j ==> b == 1;\nloop invariant i <= j ==> b == 0;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i >= j ==> b == 1;\nloop invariant i <= j ==> b == 0;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i >= j ==> b == 1;\nloop invariant i <= j ==> b == 0;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i >= j ==> b == 1;\nloop invariant i <= j ==> b == 0;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i >= j ==> b == 1;\nloop invariant i <= j ==> b == 0;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i >= j ==> b == 1;\nloop invariant i <= j ==> b == 0;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i >= j ==> b == 1;\nloop invariant i <= j ==> b == 0;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i >= j ==> b == 1;\nloop invariant i <= j ==> b == 0;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i >= j ==> b == 1;\nloop invariant i <= j ==> b == 0;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i >= j ==> b == 1;\nloop invariant i <= j ==> b == 0;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i >= j ==> b == 1;\nloop invariant i <= j ==> b == 0;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i >= j ==> b == 1;\nloop invariant i <= j ==> b == 0;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i >= j ==> b == 1;\nloop invariant i <= j ==> b == 0;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i >= j ==> b == 1;\nloop invariant i <= j ==> b == 0;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i >= j ==> b == 1;\nloop invariant i <= j ==> b == 0;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i >= j ==> b == 1;\nloop invariant i <= j ==> b == 0;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i >= j ==> b == 1;\nloop invariant i <= j ==> b == 0;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i >= j ==> b == 1;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= k <= 100;\nloop invariant 0 <= n <= 2*k;\nloop invariant n % 2 == 0 ==> b == 0;\nloop invariant n % 2 == 1 ==> b == 1;\nloop invariant i == (j + (n / 2));\nloop invariant j == (i - (n / 2));\n*/\n```",
            "```\n/*@\nloop invariant ( 0 <= j <= k ==> i == j ) ==> i == j;\nloop invariant ( j > k ==> j > i ) ==> j > i;\nloop invariant ( j < k ==> i - j < 2*k ) ==> i - j < 2*k;\nloop invariant ( k - j > 0 ==> i - j < 2*k ) ==> i - j < 2*k;\nloop invariant ( b ==> i == j + 1 ) ==> i == j + 1;\nloop invariant ( !b ==> j == i + 1 ) ==> j == i + 1;\nloop invariant ( b ==> i + k - j > k ) ==> i + k - j > k;\nloop invariant ( !b ==> j + k - i > k ) ==> j + k - i > k;\nloop invariant ( b ==> i - j < 2*k ) ==> i - j < 2*k;\nloop invariant ( !b ==> i - j < 2*k ) ==> i - j < 2*k;\nloop invariant ( i + j == 2*k ) ==> i + j == 2*k;\nloop invariant ( i + j == 2*k ) ==> n == 2*k;\nloop invariant ( n == 2*k ) ==> 2*k == 2*k;\nloop invariant ( 2*k == 2*k ) ==> n == 2*k;\nloop invariant ( n == 2*k ) ==> n == 2*k;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= 100;\nloop invariant 1 <= j <= 100;\nloop invariant i == j;\nloop invariant n == 2*k;\nloop invariant b == !b;\nloop invariant n == 2*k;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= k;\nloop invariant 0 <= j <= k;\nloop invariant i + j == n;\nloop invariant (n % 2) == (b ? 1 : 0);\nloop invariant (n >= 0 && n < 2*k);\nloop invariant (k >= 0);\nloop invariant (i >= 0 && i <= k);\nloop invariant (j >= 0 && j <= k);\nloop invariant (i + j == n);\nloop invariant (n % 2) == (b ? 1 : 0);\nloop invariant (n >= 0 && n < 2*k);\nloop invariant (k >= 0);\nloop invariant (i >= 0 && i <= k);\nloop invariant (j >= 0 && j <= k);\nloop invariant (i + j == n);\nloop invariant (n % 2) == (b ? 1 : 0);\nloop invariant (n >= 0 && n < 2*k);\nloop invariant (k >= 0);\nloop invariant (i >= 0 && i <= k);\nloop invariant (j >= 0 && j <= k);\nloop invariant (i + j == n);\nloop invariant (n % 2) == (b ? 1 : 0);\nloop invariant (n >= 0 && n < 2*k);\nloop invariant (k >= 0);\nloop invariant (i >= 0 && i <= k);\nloop invariant (j >= 0 && j <= k);\nloop invariant (i + j == n);\nloop invariant (n % 2) == (b ? 1 : 0);\nloop invariant (n >= 0 && n < 2*k);\nloop invariant (k >= 0);\nloop invariant (i >= 0 && i <= k);\nloop invariant (j >= 0 && j <= k);\nloop invariant (i + j == n);\nloop invariant (n % 2) == (b ? 1 : 0);\nloop invariant (n >= 0 && n < 2*k);\nloop invariant (k >= 0);\nloop invariant (i >= 0 && i <= k);\nloop invariant (j >= 0 && j <= k);\nloop invariant (i + j == n);\nloop invariant (n % 2) == (b ? 1 : 0);\nloop invariant (n >= 0 && n < 2*k);\nloop invariant (k >= 0);\nloop invariant (i >= 0 && i <= k);\nloop invariant (j >= 0 && j <= k);\nloop invariant (i + j == n);\nloop invariant (n % 2) == (b ? 1 : 0);\nloop invariant (n >= 0 && n < 2*k);\nloop invariant (k >= 0);\nloop invariant (i >= 0 && i <= k);\nloop invariant (j >= 0 && j <= k);\nloop invariant (i + j == n);\nloop invariant (n % 2) == (b ? 1 : 0);\nloop invariant (n >= 0 && n < 2*k);\nloop invariant (k >= 0);\nloop invariant (i >= 0 && i <= k);\nloop invariant (j >= 0 && j <= k);\nloop invariant (i + j == n);\nloop invariant (n % 2) == (b ? 1 : 0);\nloop invariant (n >= 0 && n < 2*k);\nloop invariant (k >= 0);\nloop invariant (i >= 0 && i <= k);\nloop invariant (j >= 0 && j <= k);\nloop invariant (i + j == n);\nloop invariant (n % 2) == (b ? 1 : 0);\nloop invariant (n >= 0 && n < 2*k);\nloop invariant (k >= 0);\nloop invariant (i >= 0 && i <= k);\nloop invariant (j >= 0 && j <= k);\nloop invariant (i + j == n);\nloop invariant (n % 2) == (b ? 1 : 0);\nloop invariant (n >= 0 && n < 2*k);\nloop invariant (k >= 0);\nloop invariant (i >= 0 && i <= k);\nloop invariant (j >= 0 && j <= k);\nloop invariant (i + j == n);\nloop invariant (n % 2) == (b ? 1 : 0);\nloop invariant (n >= 0 && n < 2*k);\nloop invariant (k >= 0);\nloop invariant (i >= 0 && i <= k);\nloop invariant (j >= 0 && j <= k);\nloop invariant (i + j == n);\nloop invariant (n % 2) == (b ? 1 : 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 100; loop invariant 0 <= j <= 100; loop invariant i == j; loop invariant i + j == 2 * k; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= k;\nloop invariant 1 <= j <= k;\nloop invariant i + j = n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= j <= k;\nloop invariant 0 <= i <= k;\nloop invariant i + j == n;\nloop invariant !b ==> i >= j;\nloop invariant b ==> i <= j;\nloop invariant (n == 0) ==> (i == j);\nloop invariant (n == 2*k) ==> (i == j);\nloop invariant (n == 0) ==> (b == 1);\nloop invariant (n == 2*k) ==> (b == 0);\nloop invariant (n == 0) ==> (i == j);\nloop invariant (n == 2*k) ==> (i == j);\nloop invariant 0 <= j <= k;\nloop invariant 0 <= i <= k;\nloop invariant i + j == n;\nloop invariant !b ==> i >= j;\nloop invariant b ==> i <= j;\nloop invariant (n == 0) ==> (i == j);\nloop invariant (n == 2*k) ==> (i == j);\nloop invariant (n == 0) ==> (b == 1);\nloop invariant (n == 2*k) ==> (b == 0);\nloop invariant (n == 0) ==> (i == j);\nloop invariant (n == 2*k) ==> (i == j);\nloop invariant 0 <= j <= k;\nloop invariant 0 <= i <= k;\nloop invariant i + j == n;\nloop invariant !b ==> i >= j;\nloop invariant b ==> i <= j;\nloop invariant (n == 0) ==> (i == j);\nloop invariant (n == 2*k) ==> (i == j);\nloop invariant (n == 0) ==> (b == 1);\nloop invariant (n == 2*k) ==> (b == 0);\nloop invariant (n == 0) ==> (i == j);\nloop invariant (n == 2*k) ==> (i == j);\nloop invariant 0 <= j <= k;\nloop invariant 0 <= i <= k;\nloop invariant i + j == n;\nloop invariant !b ==> i >= j;\nloop invariant b ==> i <= j;\nloop invariant (n == 0) ==> (i == j);\nloop invariant (n == 2*k) ==> (i == j);\nloop invariant (n == 0) ==> (b == 1);\nloop invariant (n == 2*k) ==> (b == 0);\nloop invariant (n == 0) ==> (i == j);\nloop invariant (n == 2*k) ==> (i == j);\nloop invariant 0 <= j <= k;\nloop invariant 0 <= i <= k;\nloop invariant i + j == n;\nloop invariant !b ==> i >= j;\nloop invariant b ==> i <= j;\nloop invariant (n == 0) ==> (i == j);\nloop invariant (n == 2*k) ==> (i == j);\nloop invariant (n == 0) ==> (b == 1);\nloop invariant (n == 2*k) ==> (b == 0);\nloop invariant (n == 0) ==> (i == j);\nloop invariant (n == 2*k) ==> (i == j);\nloop invariant 0 <= j <= k;\nloop invariant 0 <= i <= k;\nloop invariant i + j == n;\nloop invariant !b ==> i >= j;\nloop invariant b ==> i <= j;\nloop invariant (n == 0) ==> (i == j);\nloop invariant (n == 2*k) ==> (i == j);\nloop invariant (n == 0) ==> (b == 1);\nloop invariant (n == 2*k) ==> (b == 0);\nloop invariant (n == 0) ==> (i == j);\nloop invariant (n == 2*k) ==> (i == j);\nloop invariant 0 <= j <= k;\nloop invariant 0 <= i <= k;\nloop invariant i + j == n;\nloop invariant !b ==> i >= j;\nloop invariant b ==> i <= j;\nloop invariant (n == 0) ==> (i == j);\nloop invariant (n == 2*k) ==> (i == j);\nloop invariant (n == 0) ==> (b == 1);\nloop invariant (n == 2*k) ==> (b == 0);\nloop invariant (n == 0) ==> (i == j);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 100;\nloop invariant 0 <= j <= 100;\nloop invariant i == j;\nloop invariant 0 <= n <= 200;\nloop invariant n % 2 == 0;\nloop invariant b == !(n % 2);\nloop invariant i == (n / 2);\nloop invariant j == (n / 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= b <= 1;\nloop invariant 0 <= i <= 2*k;\nloop invariant 0 <= j <= 2*k;\nloop invariant 0 <= n <= 2*k;\nloop invariant i + j == n;\nloop invariant i >= j;\nloop invariant i + j == n;\nloop invariant b ==> i == j;\nloop invariant !b ==> i == j;\nloop invariant i == j ==> i + j == n;\nloop invariant !b ==> i == j;\nloop invariant i == j ==> i + j == n;\nloop invariant b ==> i == j;\nloop invariant i == j ==> i + j == n;\nloop invariant !b ==> i == j;\nloop invariant i == j ==> i + j == n;\nloop invariant b ==> i == j;\nloop invariant i == j ==> i + j == n;\nloop invariant !b ==> i == j;\nloop invariant i == j ==> i + j == n;\nloop invariant b ==> i == j;\nloop invariant i == j ==> i + j == n;\nloop invariant !b ==> i == j;\nloop invariant i == j ==> i + j == n;\nloop invariant b ==> i == j;\nloop invariant i == j ==> i + j == n;\nloop invariant !b ==> i == j;\nloop invariant i == j ==> i + j == n;\nloop invariant b ==> i == j;\nloop invariant !b ==> i == j;\nloop invariant i == j ==> i + j == n;\nloop invariant b ==> i == j;\nloop invariant !b ==> i == j;\nloop invariant i == j ==> i + j == n;\nloop invariant b ==> i == j;\nloop invariant !b ==> i == j;\nloop invariant i == j ==> i + j == n;\nloop invariant b ==> i == j;\nloop invariant !b ==> i == j;\nloop invariant i == j ==> i + j == n;\nloop invariant b ==> i == j;\nloop invariant !b ==> i == j;\nloop invariant i == j ==> i + j == n;\nloop invariant b ==> i == j;\nloop invariant !b ==> i == j;\nloop invariant i == j ==> i + j == n;\nloop invariant b ==> i == j;\nloop invariant !b ==> i == j;\nloop invariant i == j ==> i + j == n;\nloop invariant b ==> i == j;\nloop invariant !b ==> i == j;\nloop invariant i == j ==> i + j == n;\nloop invariant b ==> i == j;\nloop invariant !b ==> i == j;\nloop invariant i == j ==> i + j == n;\nloop invariant b ==> i == j;\nloop invariant !b ==> i == j;\nloop invariant i == j ==> i + j == n;\nloop invariant b ==> i == j;\nloop invariant !b ==> i == j;\nloop invariant i == j ==> i + j == n;\nloop invariant b ==> i == j;\nloop invariant !b ==> i == j;\nloop invariant i == j ==> i + j == n;\nloop invariant b ==> i == j;\nloop invariant !b ==> i == j;\nloop invariant i == j ==> i + j == n;\nloop invariant b ==> i == j;\nloop invariant !b ==> i == j;\nloop invariant i == j ==> i + j == n;\nloop invariant b ==> i == j;\nloop invariant !b ==> i == j;\nloop invariant i == j ==> i + j == n;\nloop invariant b ==> i == j;\nloop invariant !b ==> i == j;\nloop invariant i == j ==> i + j == n;\nloop invariant b ==> i == j;\nloop invariant !b ==> i == j;\nloop invariant i == j ==> i + j == n;\nloop invariant b ==> i == j;\nloop invariant !b ==> i == j;\nloop invariant i == j ==> i + j == n;\nloop invariant b ==> i == j;\nloop invariant !b ==> i == j;\nloop invariant i == j ==> i + j == n;\nloop invariant b ==> i == j;\nloop invariant !b ==> i == j;\nloop invariant i == j ==> i + j == n;\nloop invariant b ==> i == j;\nloop invariant !b ==> i == j;\nloop invariant i == j ==> i + j == n;\nloop invariant b ==> i == j;\nloop invariant !b ==> i == j;\nloop invariant i == j ==> i + j == n;\nloop invariant b ==> i == j;\nloop invariant !b ==> i == j;\nloop invariant i == j ==> i + j == n;\nloop invariant b ==> i == j;\nloop invariant !b ==> i == j;\nloop invariant i == j ==> i + j == n;\nloop invariant b ==> i == j;\nloop invariant !b ==> i == j;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= j <= k;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i + j >= n;\nloop invariant i + j <= 2*k;\nloop invariant i + j == n;\nloop invariant i >= j;\nloop invariant j >= i - 2*k + n;\nloop invariant i >= j - k;\nloop invariant j >= i - k;\nloop invariant i >= j - n;\nloop invariant j >= i - n;\nloop invariant i >= j - 2*k;\nloop invariant j >= i - 2*k + 2*n;\nloop invariant i >= j - 2*k + 2*n;\nloop invariant j >= i - 2*k + 2*n;\nloop invariant i >= j - 2*k + 2*n;\nloop invariant j >= i - 2*k + 2*n;\nloop invariant i >= j - 2*k + 2*n;\nloop invariant j >= i - 2*k + 2*n;\nloop invariant i >= j - 2*k + 2*n;\nloop invariant j >= i - 2*k + 2*n;\nloop invariant i >= j - 2*k + 2*n;\nloop invariant j >= i - 2*k + 2*n;\nloop invariant i >= j - 2*k + 2*n;\nloop invariant j >= i - 2*k + 2*n;\nloop invariant i >= j - 2*k + 2*n;\nloop invariant j >= i - 2*k + 2*n;\nloop invariant i >= j - 2*k + 2*n;\nloop invariant j >= i - 2*k + 2*n;\nloop invariant i >= j - 2*k + 2*n;\nloop invariant j >= i - 2*k + 2*n;\nloop invariant i >= j - 2*k + 2*n;\nloop invariant j >= i - 2*k + 2*n;\nloop invariant i >= j - 2*k + 2*n;\nloop invariant j >= i - 2*k + 2*n;\nloop invariant i >= j - 2*k + 2*n;\nloop invariant j >= i - 2*k + 2*n;\nloop invariant i >= j - 2*k + 2*n;\nloop invariant j >= i - 2*k + 2*n;\nloop invariant i >= j - 2*k + 2*n;\nloop invariant j >= i - 2*k + 2*n;\nloop invariant i >= j - 2*k + 2*n;\nloop invariant j >= i - 2*k + 2*n;\nloop invariant i >= j - 2*k + 2*n;\nloop invariant j >= i - 2*k + 2*n;\nloop invariant i >= j - 2*k + 2*n;\nloop invariant j >= i - 2*k + 2*n;\nloop invariant i >= j - 2*k + 2*n;\nloop invariant j >= i - 2*k + 2*n;\nloop invariant i >= j - 2*k + 2*n;\nloop invariant j >= i - 2*k + 2*n;\nloop invariant i >= j - 2*k + 2*n;\nloop invariant j >= i - 2*k + 2*n;\nloop invariant i >= j - 2*k + 2*n;\nloop invariant j >= i - 2*k + 2*n;\nloop invariant i >= j - 2*k + 2*n;\nloop invariant j >= i - 2*k + 2*n;\nloop invariant i >= j - 2*k + 2*n;\nloop invariant j >= i - 2*k + 2*n;\nloop invariant i >= j - 2*k + 2*n;\nloop invariant j >= i - 2*k + 2*n;\nloop invariant i >= j - 2*k + 2*n;\nloop invariant j >= i - 2*k + 2*n;\nloop invariant i >= j - 2*k + 2*n;\nloop invariant j >= i - 2*k + 2*n;\nloop invariant i >= j - 2*k + 2*n;\nloop invariant j >= i - 2*k + 2*n;\nloop invariant i >= j - 2*k + 2*n;\nloop invariant j >= i - 2*k + 2*n;\nloop invariant i >= j - 2*k + 2*n;\nloop invariant j >= i - 2*k + 2*n;\nloop invariant i >= j - 2*k + 2*n;\nloop invariant j >= i - 2*k + 2*n;\nloop invariant i >= j - 2*k + 2*n;\nloop invariant j >= i - 2*k + 2*n;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= j <= k is preserved but not established.\nloop invariant i >= 0 is partially proven to be inductive.\nloop invariant j >= 0 is partially proven to be inductive.\nloop invariant i + j >= n is partially proven to be inductive.\nloop invariant i + j <= 2*k is partially proven to be inductive.\nloop invariant i + j == n is preserved but not established.\nloop invariant i >= j is established but not preserved.\nloop invariant j >= i - 2*k + n is partially proven to be inductive.\nloop invariant i >= j - k is partially proven to be inductive.\nloop invariant j >= i - k is partially proven to be inductive.\nloop invariant i >= j - n is partially proven to be inductive.\nloop invariant j >= i - n is partially proven to be inductive.\nloop invariant i >= j - 2*k is partially proven to be inductive.\nloop invariant j >= i - 2*k + 2*n is established but not preserved.\nloop invariant i >= j - 2*k + 2*n is partially proven to be inductive.\nAssertion i == j: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n  int k = 100;\n  int b;\n  int i;\n  int j;\n  int n;\n  i = j;\n  /*@\n\n\n\n\n\n\n\n\n\n\nloop invariant i11: i >= j - n;\nloop invariant i12: j >= i - n;\nloop invariant i13: i >= j - 2*k;\n\n\n*/\nfor( n = 0 ; n < 2*k ; n++ ) {\n        \n    if(b) {\n      i++;\n    } else {\n      j++;\n    }\n    b = !b;\n  }\n  {;\n//@ assert(i == j);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= 100;\nloop invariant 1 <= j <= 100;\nloop invariant i <= j;\nloop invariant i + j <= 200;\nloop invariant i + j >= 100;\nloop invariant n <= 200;\nloop invariant n >= 0;\nloop invariant b == (n % 2 == 0);\nloop invariant i + j == 2 * n;\nloop invariant i + j <= 200;\nloop invariant i + j >= 100;\nloop invariant i <= j;\nloop invariant i + j <= 200;\nloop invariant i + j >= 100;\nloop invariant b == (n % 2 == 0);\nloop invariant i + j == 2 * n;\nloop invariant i + j <= 200;\nloop invariant i + j >= 100;\nloop invariant i <= j;\nloop invariant i + j <= 200;\nloop invariant i + j >= 100;\nloop invariant b == (n % 2 == 0);\nloop invariant i + j == 2 * n;\nloop invariant i + j <= 200;\nloop invariant i + j >= 100;\nloop invariant i <= j;\nloop invariant i + j <= 200;\nloop invariant i + j >= 100;\nloop invariant b == (n % 2 == 0);\nloop invariant i + j == 2 * n;\nloop invariant i + j <= 200;\nloop invariant i + j >= 100;\nloop invariant i <= j;\nloop invariant i + j <= 200;\nloop invariant i + j >= 100;\nloop invariant b == (n % 2 == 0);\nloop invariant i + j == 2 * n;\nloop invariant i + j <= 200;\nloop invariant i + j >= 100;\nloop invariant i <= j;\nloop invariant i + j <= 200;\nloop invariant i + j >= 100;\nloop invariant b == (n % 2 == 0);\nloop invariant i + j == 2 * n;\nloop invariant i + j <= 200;\nloop invariant i + j >= 100;\nloop invariant i <= j;\nloop invariant i + j <= 200;\nloop invariant i + j >= 100;\nloop invariant b == (n % 2 == 0);\nloop invariant i + j == 2 * n;\nloop invariant i + j <= 200;\nloop invariant i + j >= 100;\nloop invariant i <= j;\nloop invariant i + j <= 200;\nloop invariant i + j >= 100;\nloop invariant b == (n % 2 == 0);\nloop invariant i + j == 2 * n;\nloop invariant i + j <= 200;\nloop invariant i + j >= 100;\nloop invariant i <= j;\nloop invariant i + j <= 200;\nloop invariant i + j >= 100;\nloop invariant b == (n % 2 == 0);\nloop invariant i + j == 2 * n;\nloop invariant i + j <= 200;\nloop invariant i + j >= 100;\nloop invariant i <= j;\nloop invariant i + j <= 200;\nloop invariant i + j >= 100;\nloop invariant b == (n % 2 == 0);\nloop invariant i + j == 2 * n;\nloop invariant i + j <= 200;\nloop invariant i + j >= 100;\nloop invariant i <= j;\nloop invariant i + j <= 200;\nloop invariant i + j >= 100;\nloop invariant b == (n % 2 == 0);\nloop invariant i + j == 2 * n;\nloop invariant i + j <= 200;\nloop invariant i + j >= 100;\nloop invariant i <= j;\nloop invariant i + j <= 200;\nloop invariant i + j >= 100;\nloop invariant b == (n % 2 == 0);\nloop invariant i + j == 2 * n;\nloop invariant i + j <= 200;\nloop invariant i + j >= 100;\nloop invariant i <= j;\nloop invariant i + j <= 200;\nloop invariant i + j >= 100;\nloop invariant b == (n % 2 == 0);\nloop invariant i + j == 2 * n;\nloop invariant i + j <= 200;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= i <= 100 is preserved but not established.\nloop invariant 1 <= j <= 100 is partially proven to be inductive.\nloop invariant i <= j is partially proven to be inductive.\nloop invariant i + j <= 200 is partially proven to be inductive.\nloop invariant i + j >= 100 is preserved but not established.\nloop invariant n <= 200 is partially proven to be inductive.\nloop invariant n >= 0 is partially proven to be inductive.\nloop invariant b == (n % 2 == 0) is preserved but not established.\nloop invariant i + j == 2 * n is preserved but not established.\nAssertion i == j: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n  int k = 100;\n  int b;\n  int i;\n  int j;\n  int n;\n  i = j;\n  /*@\n\n\n\n\n\n\nloop invariant i7: n >= 0;\n\n\n*/\nfor( n = 0 ; n < 2*k ; n++ ) {\n        \n    if(b) {\n      i++;\n    } else {\n      j++;\n    }\n    b = !b;\n  }\n  {;\n//@ assert(i == j);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 50;\nloop invariant 0 <= j <= 50;\nloop invariant i + j == n;\nloop invariant b == (n % 2 == 0);\nloop invariant k == 100;\nloop invariant i == j;\nloop invariant i + j == 2*k;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= 50 is preserved but not established.\nloop invariant 0 <= j <= 50 is partially proven to be inductive.\nloop invariant i + j == n is preserved but not established.\nloop invariant b == (n % 2 == 0) is preserved but not established.\nloop invariant k == 100 is partially proven to be inductive.\nloop invariant i == j is partially proven to be inductive.\nloop invariant i + j == 2*k is preserved but not established.\nAssertion i == j: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n  int k = 100;\n  int b;\n  int i;\n  int j;\n  int n;\n  i = j;\n  /*@\n\n\n\n\nloop invariant i5: k == 100;\n\n\n*/\nfor( n = 0 ; n < 2*k ; n++ ) {\n        \n    if(b) {\n      i++;\n    } else {\n      j++;\n    }\n    b = !b;\n  }\n  {;\n//@ assert(i == j);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= i && i <= k;\nloop invariant 0 <= j && j <= k;\nloop invariant k == j + i;\nloop invariant i <= n && n <= 2*k;\nloop invariant j <= n && n <= 2*k;\nloop invariant n % 2 == 0 ==> i == n/2;\nloop invariant n % 2 != 0 ==> j == n/2;\nloop invariant n % 2 == 0 ==> b == 0;\nloop invariant n % 2 != 0 ==> b == 1;\nloop invariant n % 2 == 0 ==> i == j + n/2;\nloop invariant n % 2 != 0 ==> i == j + n/2 + 1;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant n % 2 == 0 ==> i == j + n/2;\nloop invariant n % 2 != 0 ==> i == j + n/2 + 1;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\nloop invariant i == j + n/2;\nloop invariant j == i - n/2;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i && i <= k is preserved but not established.\nloop invariant 0 <= j && j <= k is partially proven to be inductive.\nloop invariant k == j + i is preserved but not established.\nloop invariant i <= n && n <= 2*k is preserved but not established.\nloop invariant j <= n && n <= 2*k is partially proven to be inductive.\nloop invariant n % 2 == 0 ==> i == n/2 is partially proven to be inductive.\nloop invariant n % 2 != 0 ==> j == n/2 is partially proven to be inductive.\nloop invariant n % 2 == 0 ==> b == 0 is partially proven to be inductive.\nloop invariant n % 2 != 0 ==> b == 1 is partially proven to be inductive.\nloop invariant n % 2 == 0 ==> i == j + n/2 is partially proven to be inductive.\nloop invariant n % 2 != 0 ==> i == j + n/2 + 1 is partially proven to be inductive.\nloop invariant i == j + n/2 is partially proven to be inductive.\nloop invariant j == i - n/2 is partially proven to be inductive.\nAssertion i == j: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n  int k = 100;\n  int b;\n  int i;\n  int j;\n  int n;\n  i = j;\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nfor( n = 0 ; n < 2*k ; n++ ) {\n        \n    if(b) {\n      i++;\n    } else {\n      j++;\n    }\n    b = !b;\n  }\n  {;\n//@ assert(i == j);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= k, 0 <= j <= k;\nloop invariant i + j = n;\nloop invariant i == j ==> b == !b;\nloop invariant b == !b ==> i == j;\nloop invariant b == !b ==> i + j == n;\nloop invariant b == !b ==> i + j == 2*k;\nloop invariant b == !b ==> i == j == k;\nloop invariant b == !b ==> i == j == k ==> i + j == 2*k;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 15: unexpected token ','",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n  int k = 100;\n  int b;\n  int i;\n  int j;\n  int n;\n  i = j;\n  /*@\n\n\n\nloop invariant i4: b == !b ==> i == j;\nloop invariant i5: b == !b ==> i + j == n;\nloop invariant i6: b == !b ==> i + j == 2*k;\nloop invariant i7: b == !b ==> i == j == k;\nloop invariant i8: b == !b ==> i == j == k ==> i + j == 2*k;\n*/\nfor( n = 0 ; n < 2*k ; n++ ) {\n        \n    if(b) {\n      i++;\n    } else {\n      j++;\n    }\n    b = !b;\n  }\n  {;\n//@ assert(i == j);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 100;\nloop invariant 0 <= j <= 100;\nloop invariant i + j == k;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant i + j == k;\nloop invariant i == j ==> b == 1;\nloop invariant i != j ==> b == 0;\nloop invariant i >= j ==> b == 1;\nloop invariant i <= j ==> b == 0;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i >= j ==> b == 1;\nloop invariant i <= j ==> b == 0;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i >= j ==> b == 1;\nloop invariant i <= j ==> b == 0;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i >= j ==> b == 1;\nloop invariant i <= j ==> b == 0;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i >= j ==> b == 1;\nloop invariant i <= j ==> b == 0;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i >= j ==> b == 1;\nloop invariant i <= j ==> b == 0;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i >= j ==> b == 1;\nloop invariant i <= j ==> b == 0;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i >= j ==> b == 1;\nloop invariant i <= j ==> b == 0;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i >= j ==> b == 1;\nloop invariant i <= j ==> b == 0;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i >= j ==> b == 1;\nloop invariant i <= j ==> b == 0;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i >= j ==> b == 1;\nloop invariant i <= j ==> b == 0;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i >= j ==> b == 1;\nloop invariant i <= j ==> b == 0;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i >= j ==> b == 1;\nloop invariant i <= j ==> b == 0;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i >= j ==> b == 1;\nloop invariant i <= j ==> b == 0;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i >= j ==> b == 1;\nloop invariant i <= j ==> b == 0;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i >= j ==> b == 1;\nloop invariant i <= j ==> b == 0;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i >= j ==> b == 1;\nloop invariant i <= j ==> b == 0;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i >= j ==> b == 1;\nloop invariant i <= j ==> b == 0;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i >= j ==> b == 1;\nloop invariant i <= j ==> b == 0;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i >= j ==> b == 1;\nloop invariant i <= j ==> b == 0;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i >= j ==> b == 1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= 100 is preserved but not established.\nloop invariant 0 <= j <= 100 is partially proven to be inductive.\nloop invariant i + j == k is preserved but not established.\nloop invariant i >= j is partially proven to be inductive.\nloop invariant j >= i is partially proven to be inductive.\nloop invariant i >= 0 is partially proven to be inductive.\nloop invariant j >= 0 is partially proven to be inductive.\nloop invariant i <= k is partially proven to be inductive.\nloop invariant j <= k is partially proven to be inductive.\nloop invariant i == j ==> b == 1 is preserved but not established.\nloop invariant i != j ==> b == 0 is partially proven to be inductive.\nloop invariant i >= j ==> b == 1 is partially proven to be inductive.\nloop invariant i <= j ==> b == 0 is preserved but not established.\nloop invariant i == j ==> b == 0 is partially proven to be inductive.\nloop invariant i != j ==> b == 1 is partially proven to be inductive.\nAssertion i == j: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n  int k = 100;\n  int b;\n  int i;\n  int j;\n  int n;\n  i = j;\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nfor( n = 0 ; n < 2*k ; n++ ) {\n        \n    if(b) {\n      i++;\n    } else {\n      j++;\n    }\n    b = !b;\n  }\n  {;\n//@ assert(i == j);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 1 <= k <= 100;\nloop invariant 0 <= n <= 2*k;\nloop invariant n % 2 == 0 ==> b == 0;\nloop invariant n % 2 == 1 ==> b == 1;\nloop invariant i == (j + (n / 2));\nloop invariant j == (i - (n / 2));\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= k <= 100 is partially proven to be inductive.\nloop invariant 0 <= n <= 2*k is partially proven to be inductive.\nloop invariant n % 2 == 0 ==> b == 0 is preserved but not established.\nloop invariant n % 2 == 1 ==> b == 1 is partially proven to be inductive.\nloop invariant i == (j + (n / 2)) is established but not preserved.\nloop invariant j == (i - (n / 2)) is partially proven to be inductive.\nAssertion i == j: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n  int k = 100;\n  int b;\n  int i;\n  int j;\n  int n;\n  i = j;\n  /*@\nloop invariant i1: 1 <= k <= 100;\nloop invariant i2: 0 <= n <= 2*k;\n\n\n\n\n*/\nfor( n = 0 ; n < 2*k ; n++ ) {\n        \n    if(b) {\n      i++;\n    } else {\n      j++;\n    }\n    b = !b;\n  }\n  {;\n//@ assert(i == j);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant ( 0 <= j <= k ==> i == j ) ==> i == j;\nloop invariant ( j > k ==> j > i ) ==> j > i;\nloop invariant ( j < k ==> i - j < 2*k ) ==> i - j < 2*k;\nloop invariant ( k - j > 0 ==> i - j < 2*k ) ==> i - j < 2*k;\nloop invariant ( b ==> i == j + 1 ) ==> i == j + 1;\nloop invariant ( !b ==> j == i + 1 ) ==> j == i + 1;\nloop invariant ( b ==> i + k - j > k ) ==> i + k - j > k;\nloop invariant ( !b ==> j + k - i > k ) ==> j + k - i > k;\nloop invariant ( b ==> i - j < 2*k ) ==> i - j < 2*k;\nloop invariant ( !b ==> i - j < 2*k ) ==> i - j < 2*k;\nloop invariant ( i + j == 2*k ) ==> i + j == 2*k;\nloop invariant ( i + j == 2*k ) ==> n == 2*k;\nloop invariant ( n == 2*k ) ==> 2*k == 2*k;\nloop invariant ( 2*k == 2*k ) ==> n == 2*k;\nloop invariant ( n == 2*k ) ==> n == 2*k;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\nloop invariant ( n == 0 ==> i == j ) ==> i == j;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant ( 0 <= j <= k ==> i == j ) ==> i == j is partially proven to be inductive.\nloop invariant ( j > k ==> j > i ) ==> j > i is preserved but not established.\nloop invariant ( j < k ==> i - j < 2*k ) ==> i - j < 2*k is partially proven to be inductive.\nloop invariant ( k - j > 0 ==> i - j < 2*k ) ==> i - j < 2*k is partially proven to be inductive.\nloop invariant ( b ==> i == j + 1 ) ==> i == j + 1 is preserved but not established.\nloop invariant ( !b ==> j == i + 1 ) ==> j == i + 1 is preserved but not established.\nloop invariant ( b ==> i + k - j > k ) ==> i + k - j > k is partially proven to be inductive.\nloop invariant ( !b ==> j + k - i > k ) ==> j + k - i > k is partially proven to be inductive.\nloop invariant ( b ==> i - j < 2*k ) ==> i - j < 2*k is partially proven to be inductive.\nloop invariant ( !b ==> i - j < 2*k ) ==> i - j < 2*k is partially proven to be inductive.\nloop invariant ( i + j == 2*k ) ==> i + j == 2*k is partially proven to be inductive.\nloop invariant ( i + j == 2*k ) ==> n == 2*k is partially proven to be inductive.\nloop invariant ( n == 2*k ) ==> 2*k == 2*k is partially proven to be inductive.\nloop invariant ( 2*k == 2*k ) ==> n == 2*k is partially proven to be inductive.\nloop invariant ( n == 2*k ) ==> n == 2*k is partially proven to be inductive.\nloop invariant ( n == 0 ==> i == j ) ==> i == j is partially proven to be inductive.\nAssertion i == j: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n  int k = 100;\n  int b;\n  int i;\n  int j;\n  int n;\n  i = j;\n  /*@\n\n\n\n\n\n\n\n\n\n\nloop invariant i11: ( i + j == 2*k ) ==> i + j == 2*k;\n\nloop invariant i13: ( n == 2*k ) ==> 2*k == 2*k;\n\nloop invariant i15: ( n == 2*k ) ==> n == 2*k;\n\n*/\nfor( n = 0 ; n < 2*k ; n++ ) {\n        \n    if(b) {\n      i++;\n    } else {\n      j++;\n    }\n    b = !b;\n  }\n  {;\n//@ assert(i == j);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= 100;\nloop invariant 1 <= j <= 100;\nloop invariant i == j;\nloop invariant n == 2*k;\nloop invariant b == !b;\nloop invariant n == 2*k;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\nloop invariant i == j;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= i <= 100 is preserved but not established.\nloop invariant 1 <= j <= 100 is partially proven to be inductive.\nloop invariant i == j is partially proven to be inductive.\nloop invariant n == 2*k is preserved but not established.\nloop invariant b == !b is partially proven to be inductive.\nAssertion i == j: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n  int k = 100;\n  int b;\n  int i;\n  int j;\n  int n;\n  i = j;\n  /*@\n\n\n\n\n\n*/\nfor( n = 0 ; n < 2*k ; n++ ) {\n        \n    if(b) {\n      i++;\n    } else {\n      j++;\n    }\n    b = !b;\n  }\n  {;\n//@ assert(i == j);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= k;\nloop invariant 0 <= j <= k;\nloop invariant i + j == n;\nloop invariant (n % 2) == (b ? 1 : 0);\nloop invariant (n >= 0 && n < 2*k);\nloop invariant (k >= 0);\nloop invariant (i >= 0 && i <= k);\nloop invariant (j >= 0 && j <= k);\nloop invariant (i + j == n);\nloop invariant (n % 2) == (b ? 1 : 0);\nloop invariant (n >= 0 && n < 2*k);\nloop invariant (k >= 0);\nloop invariant (i >= 0 && i <= k);\nloop invariant (j >= 0 && j <= k);\nloop invariant (i + j == n);\nloop invariant (n % 2) == (b ? 1 : 0);\nloop invariant (n >= 0 && n < 2*k);\nloop invariant (k >= 0);\nloop invariant (i >= 0 && i <= k);\nloop invariant (j >= 0 && j <= k);\nloop invariant (i + j == n);\nloop invariant (n % 2) == (b ? 1 : 0);\nloop invariant (n >= 0 && n < 2*k);\nloop invariant (k >= 0);\nloop invariant (i >= 0 && i <= k);\nloop invariant (j >= 0 && j <= k);\nloop invariant (i + j == n);\nloop invariant (n % 2) == (b ? 1 : 0);\nloop invariant (n >= 0 && n < 2*k);\nloop invariant (k >= 0);\nloop invariant (i >= 0 && i <= k);\nloop invariant (j >= 0 && j <= k);\nloop invariant (i + j == n);\nloop invariant (n % 2) == (b ? 1 : 0);\nloop invariant (n >= 0 && n < 2*k);\nloop invariant (k >= 0);\nloop invariant (i >= 0 && i <= k);\nloop invariant (j >= 0 && j <= k);\nloop invariant (i + j == n);\nloop invariant (n % 2) == (b ? 1 : 0);\nloop invariant (n >= 0 && n < 2*k);\nloop invariant (k >= 0);\nloop invariant (i >= 0 && i <= k);\nloop invariant (j >= 0 && j <= k);\nloop invariant (i + j == n);\nloop invariant (n % 2) == (b ? 1 : 0);\nloop invariant (n >= 0 && n < 2*k);\nloop invariant (k >= 0);\nloop invariant (i >= 0 && i <= k);\nloop invariant (j >= 0 && j <= k);\nloop invariant (i + j == n);\nloop invariant (n % 2) == (b ? 1 : 0);\nloop invariant (n >= 0 && n < 2*k);\nloop invariant (k >= 0);\nloop invariant (i >= 0 && i <= k);\nloop invariant (j >= 0 && j <= k);\nloop invariant (i + j == n);\nloop invariant (n % 2) == (b ? 1 : 0);\nloop invariant (n >= 0 && n < 2*k);\nloop invariant (k >= 0);\nloop invariant (i >= 0 && i <= k);\nloop invariant (j >= 0 && j <= k);\nloop invariant (i + j == n);\nloop invariant (n % 2) == (b ? 1 : 0);\nloop invariant (n >= 0 && n < 2*k);\nloop invariant (k >= 0);\nloop invariant (i >= 0 && i <= k);\nloop invariant (j >= 0 && j <= k);\nloop invariant (i + j == n);\nloop invariant (n % 2) == (b ? 1 : 0);\nloop invariant (n >= 0 && n < 2*k);\nloop invariant (k >= 0);\nloop invariant (i >= 0 && i <= k);\nloop invariant (j >= 0 && j <= k);\nloop invariant (i + j == n);\nloop invariant (n % 2) == (b ? 1 : 0);\nloop invariant (n >= 0 && n < 2*k);\nloop invariant (k >= 0);\nloop invariant (i >= 0 && i <= k);\nloop invariant (j >= 0 && j <= k);\nloop invariant (i + j == n);\nloop invariant (n % 2) == (b ? 1 : 0);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= k is neither established nor preserved.\nloop invariant 0 <= j <= k is established but not preserved.\nloop invariant i + j == n is preserved but not established.\nloop invariant (n % 2) == (b ? 1 : 0) is preserved but not established.\nloop invariant (n >= 0 && n < 2*k) is established but not preserved.\nloop invariant (k >= 0) is partially proven to be inductive.\nloop invariant (i >= 0 && i <= k) is partially proven to be inductive.\nloop invariant (j >= 0 && j <= k) is partially proven to be inductive.\nloop invariant (i + j == n) is partially proven to be inductive.\nAssertion i == j: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n  int k = 100;\n  int b;\n  int i;\n  int j;\n  int n;\n  i = j;\n  /*@\n\n\n\n\n\nloop invariant i6: (k >= 0);\n\n\n\n*/\nfor( n = 0 ; n < 2*k ; n++ ) {\n        \n    if(b) {\n      i++;\n    } else {\n      j++;\n    }\n    b = !b;\n  }\n  {;\n//@ assert(i == j);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 100; loop invariant 0 <= j <= 100; loop invariant i == j; loop invariant i + j == 2 * k; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= 100; loop invariant 0 <= j <= 100; loop invariant i == j; loop invariant i + j == 2 * k; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200 is neither established nor preserved.\nAssertion i == j: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n  int k = 100;\n  int b;\n  int i;\n  int j;\n  int n;\n  i = j;\n  /*@\n\n*/\nfor( n = 0 ; n < 2*k ; n++ ) {\n        \n    if(b) {\n      i++;\n    } else {\n      j++;\n    }\n    b = !b;\n  }\n  {;\n//@ assert(i == j);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= k;\nloop invariant 1 <= j <= k;\nloop invariant i + j = n;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 17: Assignment operators not allowed in annotations.",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n  int k = 100;\n  int b;\n  int i;\n  int j;\n  int n;\n  i = j;\n  /*@\n\n\n\n*/\nfor( n = 0 ; n < 2*k ; n++ ) {\n        \n    if(b) {\n      i++;\n    } else {\n      j++;\n    }\n    b = !b;\n  }\n  {;\n//@ assert(i == j);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= j <= k;\nloop invariant 0 <= i <= k;\nloop invariant i + j == n;\nloop invariant !b ==> i >= j;\nloop invariant b ==> i <= j;\nloop invariant (n == 0) ==> (i == j);\nloop invariant (n == 2*k) ==> (i == j);\nloop invariant (n == 0) ==> (b == 1);\nloop invariant (n == 2*k) ==> (b == 0);\nloop invariant (n == 0) ==> (i == j);\nloop invariant (n == 2*k) ==> (i == j);\nloop invariant 0 <= j <= k;\nloop invariant 0 <= i <= k;\nloop invariant i + j == n;\nloop invariant !b ==> i >= j;\nloop invariant b ==> i <= j;\nloop invariant (n == 0) ==> (i == j);\nloop invariant (n == 2*k) ==> (i == j);\nloop invariant (n == 0) ==> (b == 1);\nloop invariant (n == 2*k) ==> (b == 0);\nloop invariant (n == 0) ==> (i == j);\nloop invariant (n == 2*k) ==> (i == j);\nloop invariant 0 <= j <= k;\nloop invariant 0 <= i <= k;\nloop invariant i + j == n;\nloop invariant !b ==> i >= j;\nloop invariant b ==> i <= j;\nloop invariant (n == 0) ==> (i == j);\nloop invariant (n == 2*k) ==> (i == j);\nloop invariant (n == 0) ==> (b == 1);\nloop invariant (n == 2*k) ==> (b == 0);\nloop invariant (n == 0) ==> (i == j);\nloop invariant (n == 2*k) ==> (i == j);\nloop invariant 0 <= j <= k;\nloop invariant 0 <= i <= k;\nloop invariant i + j == n;\nloop invariant !b ==> i >= j;\nloop invariant b ==> i <= j;\nloop invariant (n == 0) ==> (i == j);\nloop invariant (n == 2*k) ==> (i == j);\nloop invariant (n == 0) ==> (b == 1);\nloop invariant (n == 2*k) ==> (b == 0);\nloop invariant (n == 0) ==> (i == j);\nloop invariant (n == 2*k) ==> (i == j);\nloop invariant 0 <= j <= k;\nloop invariant 0 <= i <= k;\nloop invariant i + j == n;\nloop invariant !b ==> i >= j;\nloop invariant b ==> i <= j;\nloop invariant (n == 0) ==> (i == j);\nloop invariant (n == 2*k) ==> (i == j);\nloop invariant (n == 0) ==> (b == 1);\nloop invariant (n == 2*k) ==> (b == 0);\nloop invariant (n == 0) ==> (i == j);\nloop invariant (n == 2*k) ==> (i == j);\nloop invariant 0 <= j <= k;\nloop invariant 0 <= i <= k;\nloop invariant i + j == n;\nloop invariant !b ==> i >= j;\nloop invariant b ==> i <= j;\nloop invariant (n == 0) ==> (i == j);\nloop invariant (n == 2*k) ==> (i == j);\nloop invariant (n == 0) ==> (b == 1);\nloop invariant (n == 2*k) ==> (b == 0);\nloop invariant (n == 0) ==> (i == j);\nloop invariant (n == 2*k) ==> (i == j);\nloop invariant 0 <= j <= k;\nloop invariant 0 <= i <= k;\nloop invariant i + j == n;\nloop invariant !b ==> i >= j;\nloop invariant b ==> i <= j;\nloop invariant (n == 0) ==> (i == j);\nloop invariant (n == 2*k) ==> (i == j);\nloop invariant (n == 0) ==> (b == 1);\nloop invariant (n == 2*k) ==> (b == 0);\nloop invariant (n == 0) ==> (i == j);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= j <= k is preserved but not established.\nloop invariant 0 <= i <= k is partially proven to be inductive.\nloop invariant i + j == n is preserved but not established.\nloop invariant !b ==> i >= j is established but not preserved.\nloop invariant b ==> i <= j is established but not preserved.\nloop invariant (n == 0) ==> (i == j) is partially proven to be inductive.\nloop invariant (n == 2*k) ==> (i == j) is partially proven to be inductive.\nloop invariant (n == 0) ==> (b == 1) is preserved but not established.\nloop invariant (n == 2*k) ==> (b == 0) is established but not preserved.\nAssertion i == j: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n  int k = 100;\n  int b;\n  int i;\n  int j;\n  int n;\n  i = j;\n  /*@\n\n\n\n\n\n\n\n\n\n*/\nfor( n = 0 ; n < 2*k ; n++ ) {\n        \n    if(b) {\n      i++;\n    } else {\n      j++;\n    }\n    b = !b;\n  }\n  {;\n//@ assert(i == j);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 100;\nloop invariant 0 <= j <= 100;\nloop invariant i == j;\nloop invariant 0 <= n <= 200;\nloop invariant n % 2 == 0;\nloop invariant b == !(n % 2);\nloop invariant i == (n / 2);\nloop invariant j == (n / 2);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= 100 is neither established nor preserved.\nloop invariant 0 <= j <= 100 is partially proven to be inductive.\nloop invariant i == j is established but not preserved.\nloop invariant 0 <= n <= 200 is partially proven to be inductive.\nloop invariant n % 2 == 0 is partially proven to be inductive.\nloop invariant b == !(n % 2) is preserved but not established.\nloop invariant i == (n / 2) is preserved but not established.\nloop invariant j == (n / 2) is partially proven to be inductive.\nAssertion i == j: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n  int k = 100;\n  int b;\n  int i;\n  int j;\n  int n;\n  i = j;\n  /*@\n\n\n\n\n\n\n\n\n*/\nfor( n = 0 ; n < 2*k ; n++ ) {\n        \n    if(b) {\n      i++;\n    } else {\n      j++;\n    }\n    b = !b;\n  }\n  {;\n//@ assert(i == j);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= b <= 1;\nloop invariant 0 <= i <= 2*k;\nloop invariant 0 <= j <= 2*k;\nloop invariant 0 <= n <= 2*k;\nloop invariant i + j == n;\nloop invariant i >= j;\nloop invariant i + j == n;\nloop invariant b ==> i == j;\nloop invariant !b ==> i == j;\nloop invariant i == j ==> i + j == n;\nloop invariant !b ==> i == j;\nloop invariant i == j ==> i + j == n;\nloop invariant b ==> i == j;\nloop invariant i == j ==> i + j == n;\nloop invariant !b ==> i == j;\nloop invariant i == j ==> i + j == n;\nloop invariant b ==> i == j;\nloop invariant i == j ==> i + j == n;\nloop invariant !b ==> i == j;\nloop invariant i == j ==> i + j == n;\nloop invariant b ==> i == j;\nloop invariant i == j ==> i + j == n;\nloop invariant !b ==> i == j;\nloop invariant i == j ==> i + j == n;\nloop invariant b ==> i == j;\nloop invariant i == j ==> i + j == n;\nloop invariant !b ==> i == j;\nloop invariant i == j ==> i + j == n;\nloop invariant b ==> i == j;\nloop invariant !b ==> i == j;\nloop invariant i == j ==> i + j == n;\nloop invariant b ==> i == j;\nloop invariant !b ==> i == j;\nloop invariant i == j ==> i + j == n;\nloop invariant b ==> i == j;\nloop invariant !b ==> i == j;\nloop invariant i == j ==> i + j == n;\nloop invariant b ==> i == j;\nloop invariant !b ==> i == j;\nloop invariant i == j ==> i + j == n;\nloop invariant b ==> i == j;\nloop invariant !b ==> i == j;\nloop invariant i == j ==> i + j == n;\nloop invariant b ==> i == j;\nloop invariant !b ==> i == j;\nloop invariant i == j ==> i + j == n;\nloop invariant b ==> i == j;\nloop invariant !b ==> i == j;\nloop invariant i == j ==> i + j == n;\nloop invariant b ==> i == j;\nloop invariant !b ==> i == j;\nloop invariant i == j ==> i + j == n;\nloop invariant b ==> i == j;\nloop invariant !b ==> i == j;\nloop invariant i == j ==> i + j == n;\nloop invariant b ==> i == j;\nloop invariant !b ==> i == j;\nloop invariant i == j ==> i + j == n;\nloop invariant b ==> i == j;\nloop invariant !b ==> i == j;\nloop invariant i == j ==> i + j == n;\nloop invariant b ==> i == j;\nloop invariant !b ==> i == j;\nloop invariant i == j ==> i + j == n;\nloop invariant b ==> i == j;\nloop invariant !b ==> i == j;\nloop invariant i == j ==> i + j == n;\nloop invariant b ==> i == j;\nloop invariant !b ==> i == j;\nloop invariant i == j ==> i + j == n;\nloop invariant b ==> i == j;\nloop invariant !b ==> i == j;\nloop invariant i == j ==> i + j == n;\nloop invariant b ==> i == j;\nloop invariant !b ==> i == j;\nloop invariant i == j ==> i + j == n;\nloop invariant b ==> i == j;\nloop invariant !b ==> i == j;\nloop invariant i == j ==> i + j == n;\nloop invariant b ==> i == j;\nloop invariant !b ==> i == j;\nloop invariant i == j ==> i + j == n;\nloop invariant b ==> i == j;\nloop invariant !b ==> i == j;\nloop invariant i == j ==> i + j == n;\nloop invariant b ==> i == j;\nloop invariant !b ==> i == j;\nloop invariant i == j ==> i + j == n;\nloop invariant b ==> i == j;\nloop invariant !b ==> i == j;\nloop invariant i == j ==> i + j == n;\nloop invariant b ==> i == j;\nloop invariant !b ==> i == j;\nloop invariant i == j ==> i + j == n;\nloop invariant b ==> i == j;\nloop invariant !b ==> i == j;\nloop invariant i == j ==> i + j == n;\nloop invariant b ==> i == j;\nloop invariant !b ==> i == j;\nloop invariant i == j ==> i + j == n;\nloop invariant b ==> i == j;\nloop invariant !b ==> i == j;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= b <= 1 is preserved but not established.\nloop invariant 0 <= i <= 2*k is preserved but not established.\nloop invariant 0 <= j <= 2*k is partially proven to be inductive.\nloop invariant 0 <= n <= 2*k is partially proven to be inductive.\nloop invariant i + j == n is preserved but not established.\nloop invariant i >= j is established but not preserved.\nloop invariant b ==> i == j is partially proven to be inductive.\nloop invariant !b ==> i == j is established but not preserved.\nloop invariant i == j ==> i + j == n is partially proven to be inductive.\nAssertion i == j: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n  int k = 100;\n  int b;\n  int i;\n  int j;\n  int n;\n  i = j;\n  /*@\n\n\n\nloop invariant i4: 0 <= n <= 2*k;\n\n\n\n\n\n*/\nfor( n = 0 ; n < 2*k ; n++ ) {\n        \n    if(b) {\n      i++;\n    } else {\n      j++;\n    }\n    b = !b;\n  }\n  {;\n//@ assert(i == j);\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 57: unexpected token ','",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n  int k = 100;\n  int b;\n  int i;\n  int j;\n  int n;\n  i = j;\n  /*@\nloop invariant i1: 0 <= j <= k;\nloop invariant i2: i >= 0;\nloop invariant i3: j >= 0;\nloop invariant i4: i + j >= n;\nloop invariant i5: i + j <= 2*k;\nloop invariant i6: i + j == n;\nloop invariant i7: i >= j;\nloop invariant i8: j >= i - 2*k + n;\nloop invariant i9: i >= j - k;\nloop invariant i10: j >= i - k;\nloop invariant i11: i >= j - n;\nloop invariant i12: j >= i - n;\nloop invariant i13: i >= j - 2*k;\nloop invariant i14: j >= i - 2*k + 2*n;\nloop invariant i15: i >= j - 2*k + 2*n;\nloop invariant i16: 1 <= i <= 100;\nloop invariant i17: 1 <= j <= 100;\nloop invariant i18: i <= j;\nloop invariant i19: i + j <= 200;\nloop invariant i20: i + j >= 100;\nloop invariant i21: n <= 200;\nloop invariant i22: n >= 0;\nloop invariant i23: b == (n % 2 == 0);\nloop invariant i24: i + j == 2 * n;\nloop invariant i25: 0 <= i <= 50;\nloop invariant i26: 0 <= j <= 50;\nloop invariant i27: k == 100;\nloop invariant i28: i == j;\nloop invariant i29: i + j == 2*k;\nloop invariant i30: 0 <= i && i <= k;\nloop invariant i31: 0 <= j && j <= k;\nloop invariant i32: k == j + i;\nloop invariant i33: i <= n && n <= 2*k;\nloop invariant i34: j <= n && n <= 2*k;\nloop invariant i35: n % 2 == 0 ==> i == n/2;\nloop invariant i36: n % 2 != 0 ==> j == n/2;\nloop invariant i37: n % 2 == 0 ==> b == 0;\nloop invariant i38: n % 2 != 0 ==> b == 1;\nloop invariant i39: n % 2 == 0 ==> i == j + n/2;\nloop invariant i40: n % 2 != 0 ==> i == j + n/2 + 1;\nloop invariant i41: i == j + n/2;\nloop invariant i42: j == i - n/2;\nloop invariant i43: 0 <= i <= k, 0 <= j <= k;\nloop invariant i44: i + j = n;\nloop invariant i45: i == j ==> b == !b;\nloop invariant i46: b == !b ==> i == j;\nloop invariant i47: b == !b ==> i + j == n;\nloop invariant i48: b == !b ==> i + j == 2*k;\nloop invariant i49: b == !b ==> i == j == k;\nloop invariant i50: b == !b ==> i == j == k ==> i + j == 2*k;\nloop invariant i51: 0 <= i <= 100;\nloop invariant i52: 0 <= j <= 100;\nloop invariant i53: i + j == k;\nloop invariant i54: j >= i;\nloop invariant i55: i <= k;\nloop invariant i56: j <= k;\nloop invariant i57: i == j ==> b == 1;\nloop invariant i58: i != j ==> b == 0;\nloop invariant i59: i >= j ==> b == 1;\nloop invariant i60: i <= j ==> b == 0;\nloop invariant i61: i == j ==> b == 0;\nloop invariant i62: i != j ==> b == 1;\nloop invariant i63: 1 <= k <= 100;\nloop invariant i64: 0 <= n <= 2*k;\nloop invariant i65: n % 2 == 1 ==> b == 1;\nloop invariant i66: i == (j + (n / 2));\nloop invariant i67: j == (i - (n / 2));\nloop invariant i68: ( 0 <= j <= k ==> i == j ) ==> i == j;\nloop invariant i69: ( j > k ==> j > i ) ==> j > i;\nloop invariant i70: ( j < k ==> i - j < 2*k ) ==> i - j < 2*k;\nloop invariant i71: ( k - j > 0 ==> i - j < 2*k ) ==> i - j < 2*k;\nloop invariant i72: ( b ==> i == j + 1 ) ==> i == j + 1;\nloop invariant i73: ( !b ==> j == i + 1 ) ==> j == i + 1;\nloop invariant i74: ( b ==> i + k - j > k ) ==> i + k - j > k;\nloop invariant i75: ( !b ==> j + k - i > k ) ==> j + k - i > k;\nloop invariant i76: ( b ==> i - j < 2*k ) ==> i - j < 2*k;\nloop invariant i77: ( !b ==> i - j < 2*k ) ==> i - j < 2*k;\nloop invariant i78: ( i + j == 2*k ) ==> i + j == 2*k;\nloop invariant i79: ( i + j == 2*k ) ==> n == 2*k;\nloop invariant i80: ( n == 2*k ) ==> 2*k == 2*k;\nloop invariant i81: ( 2*k == 2*k ) ==> n == 2*k;\nloop invariant i82: ( n == 2*k ) ==> n == 2*k;\nloop invariant i83: ( n == 0 ==> i == j ) ==> i == j;\nloop invariant i84: n == 2*k;\nloop invariant i85: b == !b;\nloop invariant i86: 0 <= i <= k;\nloop invariant i87: (n % 2) == (b ? 1 : 0);\nloop invariant i88: (n >= 0 && n < 2*k);\nloop invariant i89: (k >= 0);\nloop invariant i90: (i >= 0 && i <= k);\nloop invariant i91: (j >= 0 && j <= k);\nloop invariant i92: (i + j == n);\nloop invariant i93: 0 <= i <= 100; loop invariant 0 <= j <= 100; loop invariant i == j; loop invariant i + j == 2 * k; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200; loop invariant i + j == 200;\nloop invariant i94: 1 <= i <= k;\nloop invariant i95: 1 <= j <= k;\nloop invariant i96: !b ==> i >= j;\nloop invariant i97: b ==> i <= j;\nloop invariant i98: (n == 0) ==> (i == j);\nloop invariant i99: (n == 2*k) ==> (i == j);\nloop invariant i100: (n == 0) ==> (b == 1);\nloop invariant i101: (n == 2*k) ==> (b == 0);\nloop invariant i102: 0 <= n <= 200;\nloop invariant i103: n % 2 == 0;\nloop invariant i104: b == !(n % 2);\nloop invariant i105: i == (n / 2);\nloop invariant i106: j == (n / 2);\nloop invariant i107: 0 <= b <= 1;\nloop invariant i108: 0 <= i <= 2*k;\nloop invariant i109: 0 <= j <= 2*k;\nloop invariant i110: b ==> i == j;\nloop invariant i111: !b ==> i == j;\nloop invariant i112: i == j ==> i + j == n;\n*/\nfor( n = 0 ; n < 2*k ; n++ ) {\n        \n    if(b) {\n      i++;\n    } else {\n      j++;\n    }\n    b = !b;\n  }\n  {;\n//@ assert(i == j);\n}\n\n}",
        "combined_annotation_num_solver_calls": 37,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n  int k = 100;\n  int b;\n  int i;\n  int j;\n  int n;\n  i = j;\n  /*@\n\n\n\n\n\n\n\n\n\n\nloop invariant i11: i >= j - n;\nloop invariant i12: j >= i - n;\nloop invariant i13: i >= j - 2*k;\n\n\n\n\n\n\n\nloop invariant i21: n <= 200;\nloop invariant i22: n >= 0;\n\n\n\n\nloop invariant i27: k == 100;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i46: b == !b ==> i == j;\nloop invariant i47: b == !b ==> i + j == n;\nloop invariant i48: b == !b ==> i + j == 2*k;\nloop invariant i49: b == !b ==> i == j == k;\nloop invariant i50: b == !b ==> i == j == k ==> i + j == 2*k;\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i63: 1 <= k <= 100;\nloop invariant i64: 0 <= n <= 2*k;\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i77: ( !b ==> i - j < 2*k ) ==> i - j < 2*k;\nloop invariant i78: ( i + j == 2*k ) ==> i + j == 2*k;\n\nloop invariant i80: ( n == 2*k ) ==> 2*k == 2*k;\n\nloop invariant i82: ( n == 2*k ) ==> n == 2*k;\n\n\n\n\n\n\nloop invariant i89: (k >= 0);\n\n\n\n\n\n\n\n\nloop invariant i98: (n == 0) ==> (i == j);\n\n\n\nloop invariant i102: 0 <= n <= 200;\n\n\n\n\n\n\n\n\n\n\n*/\nfor( n = 0 ; n < 2*k ; n++ ) {\n        \n    if(b) {\n      i++;\n    } else {\n      j++;\n    }\n    b = !b;\n  }\n  {;\n//@ assert(i == j);\n}\n\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_nondet_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum01_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/22.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop17_VeriMAP_true.c",
            "../dataset/loop_invariants/code2inv/105.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/85.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/ex2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/42.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/diamond_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/odd.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/even.c",
            "../dataset/loop_invariants/code2inv/24.c",
            "../dataset/loop_invariants/code2inv/130.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/diamond_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/overflow_safe1.c",
            "../dataset/loop_invariants/code2inv/113.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/ddlm2013_true-unreach-call.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/MADWiFi-encode_ie_ok.c",
            "../dataset/loop_invariants/code2inv/69.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/half.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.v.c",
            "../dataset/loop_invariants/code2inv/101.c",
            "../dataset/loop_invariants/code2inv/86.c",
            "../dataset/loop_invariants/code2inv/119.c",
            "../dataset/loop_invariants/code2inv/123.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/ddlm2013.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/split.c"
        ],
        "skipped": [],
        "total": 28,
        "success_count": 6,
        "failure_count": 22,
        "success_rate": 0.21428571428571427
    }
}