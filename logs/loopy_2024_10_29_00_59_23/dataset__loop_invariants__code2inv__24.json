{
    "logs": {
        "file": "../dataset/loop_invariants/code2inv/24.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  \n  (i = 1);\n  (j = 10);\n  \n  while ((j >= i)) {\n    {\n    (i  = (i + 2));\n    (j  = (j - 1));\n    }\n\n  }\n  \n{;\n//@ assert( (j == 6) );\n}\n\n}",
        "success": false,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 1 <= i <= j;\nloop invariant i <= j + 1;\nloop invariant j >= 10;\nloop invariant j >= i - 2;\nloop invariant i <= 10;\nloop invariant j <= 10 - (i - 1) * (i - 2) / 2;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= j <= i <= 11;\nloop invariant i + j <= 12;\nloop invariant (j == 6) ==> (i == 6);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= j <= 10;\nloop invariant 1 <= i <= 11;\nloop invariant i <= j;\nloop invariant i % 2 == 1;\nloop invariant j == 10 - (i - 1) / 2;\nloop invariant (j >= i) ==> (i % 2 == 1);\nloop invariant (j >= i) ==> (i <= j);\nloop invariant (j >= i) ==> (i <= 11);\nloop invariant (j >= i) ==> (j <= 10);\nloop invariant (j >= i) ==> (0 <= j);\nloop invariant (j >= i) ==> (0 <= i);\nloop invariant (j >= i) ==> (i % 2 == 1);\nloop invariant (j >= i) ==> (j == 10 - (i - 1) / 2);\nloop invariant (j >= i) ==> (i <= 11);\nloop invariant (j >= i) ==> (j <= 10);\nloop invariant (j >= i) ==> (0 <= j);\nloop invariant (j >= i) ==> (0 <= i);\nloop invariant (j >= i) ==> (i % 2 == 1);\nloop invariant (j >= i) ==> (j == 10 - (i - 1) / 2);\nloop invariant (j >= i) ==> (i <= 11);\nloop invariant (j >= i) ==> (j <= 10);\nloop invariant (j >= i) ==> (0 <= j);\nloop invariant (j >= i) ==> (0 <= i);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= j <= 10;\nloop invariant i >= 1;\nloop invariant (j - i) % 2 == 0;\nloop invariant (i - j) % 2 == 0;\nloop invariant i <= j + 1;\nloop invariant j >= i - 1;\nloop invariant (j - i) <= 9;\nloop invariant (i - j) <= 1;\nloop invariant (i - j) >= -9;\nloop invariant (j - i) >= -1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= j <= 10;\nloop invariant 1 <= i <= 10;\nloop invariant j == 10 - i;\nloop invariant j >= i;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= j <= 10;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\n*/\n```",
            "```\n/*@\nloop invariant i >= 1;\nloop invariant j >= 6;\nloop invariant j <= 10;\nloop invariant i <= 11;\nloop invariant i + j <= 21;\n*/\n```",
            "```\n/*@\nloop invariant i > 0; loop invariant j > i; loop invariant j <= 10; loop invariant i <= 7; loop invariant i <= j; loop invariant j == 6;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= j < i <= 10;\nloop invariant i % 2 == 1;\nloop invariant j == 10 - i;\nloop invariant i <= 9;\nloop invariant j >= 1;\nloop invariant i >= 1;\nloop invariant i % 2 == 1 ==> i == 1 || i == 3 || i == 5 || i == 7 || i == 9;\nloop invariant j == 10 - i ==> j == 9 || j == 8 || j == 7 || j == 6 || j == 5 || j == 4 || j == 3 || j == 2 || j == 1 || j == 0;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= j <= 10;\nloop invariant 1 <= i <= 11;\nloop invariant i <= j;\nloop invariant i <= 2 * i - 2;\nloop invariant j >= 11 - 2 * i;\nloop invariant j <= 10 - 2 * i;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= j;\nloop invariant j >= 10;\nloop invariant i <= 10;\nloop invariant j >= i;\nloop invariant j - i + 1 == 10;\nloop invariant j - i == 9;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i >= 1;\nloop invariant j <= 10;\nloop invariant i <= j;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i >= 1;\nloop invariant j <= 10;\nloop invariant i <= j;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i >= 1;\nloop invariant j <= 10;\nloop invariant i <= j;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i >= 1;\nloop invariant j <= 10;\nloop invariant i <= j;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i >= 1;\nloop invariant j <= 10;\nloop invariant i <= j;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i >= 1;\nloop invariant j <= 10;\nloop invariant i <= j;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i >= 1;\nloop invariant j <= 10;\nloop invariant i <= j;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i >= 1;\nloop invariant j <= 10;\nloop invariant i <= j;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i >= 1;\nloop invariant j <= 10;\nloop invariant i <= j;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i >= 1;\nloop invariant j <= 10;\nloop invariant i <= j;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i >= 1;\nloop invariant j <= 10;\nloop invariant i <= j;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i >= 1;\nloop invariant j <= 10;\nloop invariant i <= j;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i >= 1;\nloop invariant j <= 10;\nloop invariant i <= j;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i >= 1;\nloop invariant j <= 10;\nloop invariant i <= j;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i >= 1;\nloop invariant j <= 10;\nloop invariant i <= j;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i >= 1;\nloop invariant j <= 10;\nloop invariant i <= j;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i >= 1;\nloop invariant j <= 10;\nloop invariant i <= j;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i >= 1;\nloop invariant j <= 10;\nloop invariant i <= j;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i >= 1;\nloop invariant j <= 10;\nloop invariant i <= j;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i >= 1;\nloop invariant j <= 10;\nloop invariant i <= j;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i >= 1;\nloop invariant j <= 10;\nloop invariant i <= j;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i >= 1;\nloop invariant j <= 10;\nloop invariant i <= j;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i >= 1;\nloop invariant j <= 10;\nloop invariant i <= j;\n*/\n```",
            "```\n/*@\nloop invariant i >= j;\nloop invariant i >= 10;\nloop invariant j >= 1;\nloop invariant i >= 2 * j;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= j <= 10;\nloop invariant i >= 1;\nloop invariant i <= 11;\nloop invariant j >= i;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i + j == 11;\nloop invariant 0 <= j <= 10;\nloop invariant i >= 1;\nloop invariant i <= 11;\nloop invariant j >= i;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i + j == 11;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= j <= 10;\nloop invariant 1 <= i <= 10;\nloop invariant i >= j;\nloop invariant j == 6 ==> i == 12;\nloop invariant j != 6 ==> i == 10;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= j <= 10;\nloop invariant i >= 1;\nloop invariant i <= j + 1;\nloop invariant (i % 2) == 1;\nloop invariant (i + j) % 2 == 0;\nloop invariant i <= 11;\nloop invariant j >= 1;\nloop invariant j <= 9;\nloop invariant (j - i + 1) % 2 == 0;\nloop invariant i <= 11;\nloop invariant j >= 1;\nloop invariant j <= 9;\nloop invariant (j - i + 1) % 2 == 0;\nloop invariant i <= 11;\nloop invariant j >= 1;\nloop invariant j <= 9;\nloop invariant (j - i + 1) % 2 == 0;\nloop invariant i <= 11;\nloop invariant j >= 1;\nloop invariant j <= 9;\nloop invariant (j - i + 1) % 2 == 0;\nloop invariant i <= 11;\nloop invariant j >= 1;\nloop invariant j <= 9;\nloop invariant (j - i + 1) % 2 == 0;\nloop invariant i <= 11;\nloop invariant j >= 1;\nloop invariant j <= 9;\nloop invariant (j - i + 1) % 2 == 0;\nloop invariant i <= 11;\nloop invariant j >= 1;\nloop invariant j <= 9;\nloop invariant (j - i + 1) % 2 == 0;\nloop invariant i <= 11;\nloop invariant j >= 1;\nloop invariant j <= 9;\nloop invariant (j - i + 1) % 2 == 0;\nloop invariant i <= 11;\nloop invariant j >= 1;\nloop invariant j <= 9;\nloop invariant (j - i + 1) % 2 == 0;\nloop invariant i <= 11;\nloop invariant j >= 1;\nloop invariant j <= 9;\nloop invariant (j - i + 1) % 2 == 0;\nloop invariant i <= 11;\nloop invariant j >= 1;\nloop invariant j <= 9;\nloop invariant (j - i + 1) % 2 == 0;\nloop invariant i <= 11;\nloop invariant j >= 1;\nloop invariant j <= 9;\nloop invariant (j - i + 1) % 2 == 0;\nloop invariant i <= 11;\nloop invariant j >= 1;\nloop invariant j <= 9;\nloop invariant (j - i + 1) % 2 == 0;\nloop invariant i <= 11;\nloop invariant j >= 1;\nloop invariant j <= 9;\nloop invariant (j - i + 1) % 2 == 0;\nloop invariant i <= 11;\nloop invariant j >= 1;\nloop invariant j <= 9;\nloop invariant (j - i + 1) % 2 == 0;\nloop invariant i <= 11;\nloop invariant j >= 1;\nloop invariant j <= 9;\nloop invariant (j - i + 1) % 2 == 0;\nloop invariant i <= 11;\nloop invariant j >= 1;\nloop invariant j <= 9;\nloop invariant (j - i + 1) % 2 == 0;\nloop invariant i <= 11;\nloop invariant j >= 1;\nloop invariant j <= 9;\nloop invariant (j - i + 1) % 2 == 0;\nloop invariant i <= 11;\nloop invariant j >= 1;\nloop invariant j <= 9;\nloop invariant (j - i + 1) % 2 == 0;\nloop invariant i <= 11;\nloop invariant j >= 1;\nloop invariant j <= 9;\nloop invariant (j - i + 1) % 2 == 0;\nloop invariant i <= 11;\nloop invariant j >= 1;\nloop invariant j <= 9;\nloop invariant (j - i + 1) % 2 == 0;\nloop invariant i <= 11;\nloop invariant j >= 1;\nloop invariant j <= 9;\nloop invariant (j - i + 1) % 2 == 0;\nloop invariant i <= 11;\nloop invariant j >= 1;\nloop invariant j <= 9;\nloop invariant (j - i + 1) % 2 == 0;\nloop invariant i <= 11;\nloop invariant j >= 1;\nloop invariant j <= 9;\nloop invariant (j - i + 1) % 2 == 0;\nloop invariant i <= 11;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= j;\nloop invariant i <= j + 1;\nloop invariant j >= 10;\nloop invariant j >= i - 2;\nloop invariant i <= 10;\nloop invariant j <= 10 - (i - 1) * (i - 2) / 2;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= i <= j is partially proven to be inductive.\nloop invariant i <= j + 1 is partially proven to be inductive.\nloop invariant j >= 10 is established but not preserved.\nloop invariant j >= i - 2 is partially proven to be inductive.\nloop invariant i <= 10 is partially proven to be inductive.\nloop invariant j <= 10 - (i - 1) * (i - 2) / 2 is partially proven to be inductive.\nAssertion j == 6: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  \n  (i = 1);\n  (j = 10);\n  \n  /*@\n\n\n\n\n\n\n*/\nwhile ((j >= i)) {\n    {\n    (i  = (i + 2));\n    (j  = (j - 1));\n    }\n\n  }\n  \n{;\n//@ assert( (j == 6) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 1 <= j <= i <= 11;\nloop invariant i + j <= 12;\nloop invariant (j == 6) ==> (i == 6);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= j <= i <= 11 is preserved but not established.\nloop invariant i + j <= 12 is partially proven to be inductive.\nloop invariant (j == 6) ==> (i == 6) is partially proven to be inductive.\nAssertion j == 6: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  \n  (i = 1);\n  (j = 10);\n  \n  /*@\n\n\n\n*/\nwhile ((j >= i)) {\n    {\n    (i  = (i + 2));\n    (j  = (j - 1));\n    }\n\n  }\n  \n{;\n//@ assert( (j == 6) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= j <= 10;\nloop invariant 1 <= i <= 11;\nloop invariant i <= j;\nloop invariant i % 2 == 1;\nloop invariant j == 10 - (i - 1) / 2;\nloop invariant (j >= i) ==> (i % 2 == 1);\nloop invariant (j >= i) ==> (i <= j);\nloop invariant (j >= i) ==> (i <= 11);\nloop invariant (j >= i) ==> (j <= 10);\nloop invariant (j >= i) ==> (0 <= j);\nloop invariant (j >= i) ==> (0 <= i);\nloop invariant (j >= i) ==> (i % 2 == 1);\nloop invariant (j >= i) ==> (j == 10 - (i - 1) / 2);\nloop invariant (j >= i) ==> (i <= 11);\nloop invariant (j >= i) ==> (j <= 10);\nloop invariant (j >= i) ==> (0 <= j);\nloop invariant (j >= i) ==> (0 <= i);\nloop invariant (j >= i) ==> (i % 2 == 1);\nloop invariant (j >= i) ==> (j == 10 - (i - 1) / 2);\nloop invariant (j >= i) ==> (i <= 11);\nloop invariant (j >= i) ==> (j <= 10);\nloop invariant (j >= i) ==> (0 <= j);\nloop invariant (j >= i) ==> (0 <= i);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= j <= 10 is partially proven to be inductive.\nloop invariant 1 <= i <= 11 is partially proven to be inductive.\nloop invariant i <= j is established but not preserved.\nloop invariant i % 2 == 1 is partially proven to be inductive.\nloop invariant j == 10 - (i - 1) / 2 is partially proven to be inductive.\nloop invariant (j >= i) ==> (i % 2 == 1) is partially proven to be inductive.\nloop invariant (j >= i) ==> (i <= j) is partially proven to be inductive.\nloop invariant (j >= i) ==> (i <= 11) is partially proven to be inductive.\nloop invariant (j >= i) ==> (j <= 10) is partially proven to be inductive.\nloop invariant (j >= i) ==> (0 <= j) is partially proven to be inductive.\nloop invariant (j >= i) ==> (0 <= i) is partially proven to be inductive.\nloop invariant (j >= i) ==> (j == 10 - (i - 1) / 2) is partially proven to be inductive.\nAssertion j == 6: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  \n  (i = 1);\n  (j = 10);\n  \n  /*@\nloop invariant i1: 0 <= j <= 10;\nloop invariant i2: 1 <= i <= 11;\n\nloop invariant i4: i % 2 == 1;\nloop invariant i5: j == 10 - (i - 1) / 2;\nloop invariant i6: (j >= i) ==> (i % 2 == 1);\nloop invariant i7: (j >= i) ==> (i <= j);\nloop invariant i8: (j >= i) ==> (i <= 11);\nloop invariant i9: (j >= i) ==> (j <= 10);\nloop invariant i10: (j >= i) ==> (0 <= j);\nloop invariant i11: (j >= i) ==> (0 <= i);\nloop invariant i12: (j >= i) ==> (j == 10 - (i - 1) / 2);\n*/\nwhile ((j >= i)) {\n    {\n    (i  = (i + 2));\n    (j  = (j - 1));\n    }\n\n  }\n  \n{;\n//@ assert( (j == 6) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 8,
                "annotations": "```\n/*@\nloop invariant 0 <= j <= 10;\nloop invariant i >= 1;\nloop invariant (j - i) % 2 == 0;\nloop invariant (i - j) % 2 == 0;\nloop invariant i <= j + 1;\nloop invariant j >= i - 1;\nloop invariant (j - i) <= 9;\nloop invariant (i - j) <= 1;\nloop invariant (i - j) >= -9;\nloop invariant (j - i) >= -1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= j <= 10 is partially proven to be inductive.\nloop invariant i >= 1 is partially proven to be inductive.\nloop invariant (j - i) % 2 == 0 is preserved but not established.\nloop invariant (i - j) % 2 == 0 is partially proven to be inductive.\nloop invariant i <= j + 1 is partially proven to be inductive.\nloop invariant j >= i - 1 is partially proven to be inductive.\nloop invariant (j - i) <= 9 is partially proven to be inductive.\nloop invariant (i - j) <= 1 is partially proven to be inductive.\nloop invariant (i - j) >= -9 is partially proven to be inductive.\nloop invariant (j - i) >= -1 is partially proven to be inductive.\nAssertion j == 6: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  \n  (i = 1);\n  (j = 10);\n  \n  /*@\nloop invariant i1: 0 <= j <= 10;\nloop invariant i2: i >= 1;\n\n\n\n\nloop invariant i7: (j - i) <= 9;\n\nloop invariant i9: (i - j) >= -9;\n\n*/\nwhile ((j >= i)) {\n    {\n    (i  = (i + 2));\n    (j  = (j - 1));\n    }\n\n  }\n  \n{;\n//@ assert( (j == 6) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= j <= 10;\nloop invariant 1 <= i <= 10;\nloop invariant j == 10 - i;\nloop invariant j >= i;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= j <= 10 is partially proven to be inductive.\nloop invariant 1 <= i <= 10 is partially proven to be inductive.\nloop invariant j == 10 - i is preserved but not established.\nloop invariant j >= i is partially proven to be inductive.\nAssertion j == 6: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  \n  (i = 1);\n  (j = 10);\n  \n  /*@\n\n\n\n\n*/\nwhile ((j >= i)) {\n    {\n    (i  = (i + 2));\n    (j  = (j - 1));\n    }\n\n  }\n  \n{;\n//@ assert( (j == 6) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= j <= 10;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= j <= 10 is established but not preserved.\nloop invariant i % 2 == 1 is partially proven to be inductive.\nloop invariant j % 2 == 0 is established but not preserved.\nAssertion j == 6: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  \n  (i = 1);\n  (j = 10);\n  \n  /*@\n\nloop invariant i2: i % 2 == 1;\n\n*/\nwhile ((j >= i)) {\n    {\n    (i  = (i + 2));\n    (j  = (j - 1));\n    }\n\n  }\n  \n{;\n//@ assert( (j == 6) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant i >= 1;\nloop invariant j >= 6;\nloop invariant j <= 10;\nloop invariant i <= 11;\nloop invariant i + j <= 21;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant i >= 1 is partially proven to be inductive.\nloop invariant j >= 6 is established but not preserved.\nloop invariant j <= 10 is partially proven to be inductive.\nloop invariant i <= 11 is established but not preserved.\nloop invariant i + j <= 21 is partially proven to be inductive.\nAssertion j == 6: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  \n  (i = 1);\n  (j = 10);\n  \n  /*@\nloop invariant i1: i >= 1;\n\nloop invariant i3: j <= 10;\n\nloop invariant i5: i + j <= 21;\n*/\nwhile ((j >= i)) {\n    {\n    (i  = (i + 2));\n    (j  = (j - 1));\n    }\n\n  }\n  \n{;\n//@ assert( (j == 6) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant i > 0; loop invariant j > i; loop invariant j <= 10; loop invariant i <= 7; loop invariant i <= j; loop invariant j == 6;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant i > 0; loop invariant j > i; loop invariant j <= 10; loop invariant i <= 7; loop invariant i <= j; loop invariant j == 6 is partially proven to be inductive.\nAssertion j == 6: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  \n  (i = 1);\n  (j = 10);\n  \n  /*@\nloop invariant i1: i > 0; loop invariant j > i; loop invariant j <= 10; loop invariant i <= 7; loop invariant i <= j; loop invariant j == 6;\n*/\nwhile ((j >= i)) {\n    {\n    (i  = (i + 2));\n    (j  = (j - 1));\n    }\n\n  }\n  \n{;\n//@ assert( (j == 6) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= j < i <= 10;\nloop invariant i % 2 == 1;\nloop invariant j == 10 - i;\nloop invariant i <= 9;\nloop invariant j >= 1;\nloop invariant i >= 1;\nloop invariant i % 2 == 1 ==> i == 1 || i == 3 || i == 5 || i == 7 || i == 9;\nloop invariant j == 10 - i ==> j == 9 || j == 8 || j == 7 || j == 6 || j == 5 || j == 4 || j == 3 || j == 2 || j == 1 || j == 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= j < i <= 10 is preserved but not established.\nloop invariant i % 2 == 1 is partially proven to be inductive.\nloop invariant j == 10 - i is partially proven to be inductive.\nloop invariant i <= 9 is partially proven to be inductive.\nloop invariant j >= 1 is partially proven to be inductive.\nloop invariant i >= 1 is partially proven to be inductive.\nloop invariant i % 2 == 1 ==> i == 1 || i == 3 || i == 5 || i == 7 || i == 9 is partially proven to be inductive.\nloop invariant j == 10 - i ==> j == 9 || j == 8 || j == 7 || j == 6 || j == 5 || j == 4 || j == 3 || j == 2 || j == 1 || j == 0 is partially proven to be inductive.\nAssertion j == 6: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  \n  (i = 1);\n  (j = 10);\n  \n  /*@\n\nloop invariant i2: i % 2 == 1;\n\n\n\nloop invariant i6: i >= 1;\n\nloop invariant i8: j == 10 - i ==> j == 9 || j == 8 || j == 7 || j == 6 || j == 5 || j == 4 || j == 3 || j == 2 || j == 1 || j == 0;\n*/\nwhile ((j >= i)) {\n    {\n    (i  = (i + 2));\n    (j  = (j - 1));\n    }\n\n  }\n  \n{;\n//@ assert( (j == 6) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 1 <= j <= 10;\nloop invariant 1 <= i <= 11;\nloop invariant i <= j;\nloop invariant i <= 2 * i - 2;\nloop invariant j >= 11 - 2 * i;\nloop invariant j <= 10 - 2 * i;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= j <= 10 is partially proven to be inductive.\nloop invariant 1 <= i <= 11 is partially proven to be inductive.\nloop invariant i <= j is partially proven to be inductive.\nloop invariant i <= 2 * i - 2 is preserved but not established.\nloop invariant j >= 11 - 2 * i is partially proven to be inductive.\nloop invariant j <= 10 - 2 * i is partially proven to be inductive.\nAssertion j == 6: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  \n  (i = 1);\n  (j = 10);\n  \n  /*@\nloop invariant i1: 1 <= j <= 10;\n\n\n\nloop invariant i5: j >= 11 - 2 * i;\n\n*/\nwhile ((j >= i)) {\n    {\n    (i  = (i + 2));\n    (j  = (j - 1));\n    }\n\n  }\n  \n{;\n//@ assert( (j == 6) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 8,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= j;\nloop invariant j >= 10;\nloop invariant i <= 10;\nloop invariant j >= i;\nloop invariant j - i + 1 == 10;\nloop invariant j - i == 9;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i >= 1;\nloop invariant j <= 10;\nloop invariant i <= j;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i >= 1;\nloop invariant j <= 10;\nloop invariant i <= j;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i >= 1;\nloop invariant j <= 10;\nloop invariant i <= j;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i >= 1;\nloop invariant j <= 10;\nloop invariant i <= j;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i >= 1;\nloop invariant j <= 10;\nloop invariant i <= j;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i >= 1;\nloop invariant j <= 10;\nloop invariant i <= j;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i >= 1;\nloop invariant j <= 10;\nloop invariant i <= j;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i >= 1;\nloop invariant j <= 10;\nloop invariant i <= j;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i >= 1;\nloop invariant j <= 10;\nloop invariant i <= j;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i >= 1;\nloop invariant j <= 10;\nloop invariant i <= j;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i >= 1;\nloop invariant j <= 10;\nloop invariant i <= j;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i >= 1;\nloop invariant j <= 10;\nloop invariant i <= j;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i >= 1;\nloop invariant j <= 10;\nloop invariant i <= j;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i >= 1;\nloop invariant j <= 10;\nloop invariant i <= j;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i >= 1;\nloop invariant j <= 10;\nloop invariant i <= j;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i >= 1;\nloop invariant j <= 10;\nloop invariant i <= j;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i >= 1;\nloop invariant j <= 10;\nloop invariant i <= j;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i >= 1;\nloop invariant j <= 10;\nloop invariant i <= j;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i >= 1;\nloop invariant j <= 10;\nloop invariant i <= j;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i >= 1;\nloop invariant j <= 10;\nloop invariant i <= j;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i >= 1;\nloop invariant j <= 10;\nloop invariant i <= j;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i >= 1;\nloop invariant j <= 10;\nloop invariant i <= j;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i >= 1;\nloop invariant j <= 10;\nloop invariant i <= j;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= j is partially proven to be inductive.\nloop invariant j >= 10 is established but not preserved.\nloop invariant i <= 10 is partially proven to be inductive.\nloop invariant j >= i is partially proven to be inductive.\nloop invariant j - i + 1 == 10 is partially proven to be inductive.\nloop invariant j - i == 9 is partially proven to be inductive.\nloop invariant i % 2 == 1 is partially proven to be inductive.\nloop invariant j % 2 == 0 is partially proven to be inductive.\nloop invariant i >= 1 is partially proven to be inductive.\nloop invariant j <= 10 is partially proven to be inductive.\nloop invariant i <= j is partially proven to be inductive.\nAssertion j == 6: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  \n  (i = 1);\n  (j = 10);\n  \n  /*@\n\n\n\n\n\n\nloop invariant i7: i % 2 == 1;\n\nloop invariant i9: i >= 1;\nloop invariant i10: j <= 10;\n\n*/\nwhile ((j >= i)) {\n    {\n    (i  = (i + 2));\n    (j  = (j - 1));\n    }\n\n  }\n  \n{;\n//@ assert( (j == 6) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant i >= j;\nloop invariant i >= 10;\nloop invariant j >= 1;\nloop invariant i >= 2 * j;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant i >= j is preserved but not established.\nloop invariant i >= 10 is partially proven to be inductive.\nloop invariant j >= 1 is partially proven to be inductive.\nloop invariant i >= 2 * j is partially proven to be inductive.\nAssertion j == 6: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  \n  (i = 1);\n  (j = 10);\n  \n  /*@\n\n\n\n\n*/\nwhile ((j >= i)) {\n    {\n    (i  = (i + 2));\n    (j  = (j - 1));\n    }\n\n  }\n  \n{;\n//@ assert( (j == 6) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= j <= 10;\nloop invariant i >= 1;\nloop invariant i <= 11;\nloop invariant j >= i;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i + j == 11;\nloop invariant 0 <= j <= 10;\nloop invariant i >= 1;\nloop invariant i <= 11;\nloop invariant j >= i;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i + j == 11;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= j <= 10 is partially proven to be inductive.\nloop invariant i >= 1 is partially proven to be inductive.\nloop invariant i <= 11 is partially proven to be inductive.\nloop invariant j >= i is established but not preserved.\nloop invariant i % 2 == 1 is partially proven to be inductive.\nloop invariant j % 2 == 0 is established but not preserved.\nloop invariant i + j == 11 is partially proven to be inductive.\nAssertion j == 6: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  \n  (i = 1);\n  (j = 10);\n  \n  /*@\nloop invariant i1: 0 <= j <= 10;\nloop invariant i2: i >= 1;\nloop invariant i3: i <= 11;\n\nloop invariant i5: i % 2 == 1;\n\n\n*/\nwhile ((j >= i)) {\n    {\n    (i  = (i + 2));\n    (j  = (j - 1));\n    }\n\n  }\n  \n{;\n//@ assert( (j == 6) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= j <= 10;\nloop invariant 1 <= i <= 10;\nloop invariant i >= j;\nloop invariant j == 6 ==> i == 12;\nloop invariant j != 6 ==> i == 10;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= j <= 10 is partially proven to be inductive.\nloop invariant 1 <= i <= 10 is partially proven to be inductive.\nloop invariant i >= j is preserved but not established.\nloop invariant j == 6 ==> i == 12 is partially proven to be inductive.\nloop invariant j != 6 ==> i == 10 is partially proven to be inductive.\nAssertion j == 6: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  \n  (i = 1);\n  (j = 10);\n  \n  /*@\n\n\n\n\n\n*/\nwhile ((j >= i)) {\n    {\n    (i  = (i + 2));\n    (j  = (j - 1));\n    }\n\n  }\n  \n{;\n//@ assert( (j == 6) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= j <= 10;\nloop invariant i >= 1;\nloop invariant i <= j + 1;\nloop invariant (i % 2) == 1;\nloop invariant (i + j) % 2 == 0;\nloop invariant i <= 11;\nloop invariant j >= 1;\nloop invariant j <= 9;\nloop invariant (j - i + 1) % 2 == 0;\nloop invariant i <= 11;\nloop invariant j >= 1;\nloop invariant j <= 9;\nloop invariant (j - i + 1) % 2 == 0;\nloop invariant i <= 11;\nloop invariant j >= 1;\nloop invariant j <= 9;\nloop invariant (j - i + 1) % 2 == 0;\nloop invariant i <= 11;\nloop invariant j >= 1;\nloop invariant j <= 9;\nloop invariant (j - i + 1) % 2 == 0;\nloop invariant i <= 11;\nloop invariant j >= 1;\nloop invariant j <= 9;\nloop invariant (j - i + 1) % 2 == 0;\nloop invariant i <= 11;\nloop invariant j >= 1;\nloop invariant j <= 9;\nloop invariant (j - i + 1) % 2 == 0;\nloop invariant i <= 11;\nloop invariant j >= 1;\nloop invariant j <= 9;\nloop invariant (j - i + 1) % 2 == 0;\nloop invariant i <= 11;\nloop invariant j >= 1;\nloop invariant j <= 9;\nloop invariant (j - i + 1) % 2 == 0;\nloop invariant i <= 11;\nloop invariant j >= 1;\nloop invariant j <= 9;\nloop invariant (j - i + 1) % 2 == 0;\nloop invariant i <= 11;\nloop invariant j >= 1;\nloop invariant j <= 9;\nloop invariant (j - i + 1) % 2 == 0;\nloop invariant i <= 11;\nloop invariant j >= 1;\nloop invariant j <= 9;\nloop invariant (j - i + 1) % 2 == 0;\nloop invariant i <= 11;\nloop invariant j >= 1;\nloop invariant j <= 9;\nloop invariant (j - i + 1) % 2 == 0;\nloop invariant i <= 11;\nloop invariant j >= 1;\nloop invariant j <= 9;\nloop invariant (j - i + 1) % 2 == 0;\nloop invariant i <= 11;\nloop invariant j >= 1;\nloop invariant j <= 9;\nloop invariant (j - i + 1) % 2 == 0;\nloop invariant i <= 11;\nloop invariant j >= 1;\nloop invariant j <= 9;\nloop invariant (j - i + 1) % 2 == 0;\nloop invariant i <= 11;\nloop invariant j >= 1;\nloop invariant j <= 9;\nloop invariant (j - i + 1) % 2 == 0;\nloop invariant i <= 11;\nloop invariant j >= 1;\nloop invariant j <= 9;\nloop invariant (j - i + 1) % 2 == 0;\nloop invariant i <= 11;\nloop invariant j >= 1;\nloop invariant j <= 9;\nloop invariant (j - i + 1) % 2 == 0;\nloop invariant i <= 11;\nloop invariant j >= 1;\nloop invariant j <= 9;\nloop invariant (j - i + 1) % 2 == 0;\nloop invariant i <= 11;\nloop invariant j >= 1;\nloop invariant j <= 9;\nloop invariant (j - i + 1) % 2 == 0;\nloop invariant i <= 11;\nloop invariant j >= 1;\nloop invariant j <= 9;\nloop invariant (j - i + 1) % 2 == 0;\nloop invariant i <= 11;\nloop invariant j >= 1;\nloop invariant j <= 9;\nloop invariant (j - i + 1) % 2 == 0;\nloop invariant i <= 11;\nloop invariant j >= 1;\nloop invariant j <= 9;\nloop invariant (j - i + 1) % 2 == 0;\nloop invariant i <= 11;\nloop invariant j >= 1;\nloop invariant j <= 9;\nloop invariant (j - i + 1) % 2 == 0;\nloop invariant i <= 11;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= j <= 10 is partially proven to be inductive.\nloop invariant i >= 1 is partially proven to be inductive.\nloop invariant i <= j + 1 is partially proven to be inductive.\nloop invariant (i % 2) == 1 is partially proven to be inductive.\nloop invariant (i + j) % 2 == 0 is preserved but not established.\nloop invariant i <= 11 is partially proven to be inductive.\nloop invariant j >= 1 is partially proven to be inductive.\nloop invariant j <= 9 is partially proven to be inductive.\nloop invariant (j - i + 1) % 2 == 0 is partially proven to be inductive.\nAssertion j == 6: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  \n  (i = 1);\n  (j = 10);\n  \n  /*@\nloop invariant i1: 0 <= j <= 10;\nloop invariant i2: i >= 1;\n\nloop invariant i4: (i % 2) == 1;\n\nloop invariant i6: i <= 11;\n\n\n\n*/\nwhile ((j >= i)) {\n    {\n    (i  = (i + 2));\n    (j  = (j - 1));\n    }\n\n  }\n  \n{;\n//@ assert( (j == 6) );\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "loop invariant 1 <= i <= j is partially proven to be inductive.\nloop invariant i <= j + 1 is partially proven to be inductive.\nloop invariant j >= 10 is partially proven to be inductive.\nloop invariant j >= i - 2 is partially proven to be inductive.\nloop invariant i <= 10 is partially proven to be inductive.\nloop invariant j <= 10 - (i - 1) * (i - 2) / 2 is partially proven to be inductive.\nloop invariant 1 <= j <= i <= 11 is preserved but not established.\nloop invariant i + j <= 12 is partially proven to be inductive.\nloop invariant (j == 6) ==> (i == 6) is partially proven to be inductive.\nloop invariant 0 <= j <= 10 is partially proven to be inductive.\nloop invariant 1 <= i <= 11 is partially proven to be inductive.\nloop invariant i <= j is partially proven to be inductive.\nloop invariant i % 2 == 1 is partially proven to be inductive.\nloop invariant j == 10 - (i - 1) / 2 is partially proven to be inductive.\nloop invariant (j >= i) ==> (i % 2 == 1) is partially proven to be inductive.\nloop invariant (j >= i) ==> (i <= j) is partially proven to be inductive.\nloop invariant (j >= i) ==> (i <= 11) is partially proven to be inductive.\nloop invariant (j >= i) ==> (j <= 10) is partially proven to be inductive.\nloop invariant (j >= i) ==> (0 <= j) is partially proven to be inductive.\nloop invariant (j >= i) ==> (0 <= i) is partially proven to be inductive.\nloop invariant (j >= i) ==> (j == 10 - (i - 1) / 2) is partially proven to be inductive.\nloop invariant i >= 1 is partially proven to be inductive.\nloop invariant (j - i) % 2 == 0 is partially proven to be inductive.\nloop invariant (i - j) % 2 == 0 is partially proven to be inductive.\nloop invariant j >= i - 1 is partially proven to be inductive.\nloop invariant (j - i) <= 9 is partially proven to be inductive.\nloop invariant (i - j) <= 1 is partially proven to be inductive.\nloop invariant (i - j) >= -9 is partially proven to be inductive.\nloop invariant (j - i) >= -1 is partially proven to be inductive.\nloop invariant 1 <= i <= 10 is partially proven to be inductive.\nloop invariant j == 10 - i is partially proven to be inductive.\nloop invariant j >= i is partially proven to be inductive.\nloop invariant 0 <= i <= j <= 10 is partially proven to be inductive.\nloop invariant j % 2 == 0 is partially proven to be inductive.\nloop invariant j >= 6 is partially proven to be inductive.\nloop invariant j <= 10 is partially proven to be inductive.\nloop invariant i <= 11 is partially proven to be inductive.\nloop invariant i + j <= 21 is partially proven to be inductive.\nloop invariant i > 0; loop invariant j > i; loop invariant j <= 10; loop invariant i <= 7; loop invariant i <= j; loop invariant j == 6 is partially proven to be inductive.\nloop invariant 0 <= j < i <= 10 is partially proven to be inductive.\nloop invariant i <= 9 is partially proven to be inductive.\nloop invariant j >= 1 is partially proven to be inductive.\nloop invariant i % 2 == 1 ==> i == 1 || i == 3 || i == 5 || i == 7 || i == 9 is partially proven to be inductive.\nloop invariant j == 10 - i ==> j == 9 || j == 8 || j == 7 || j == 6 || j == 5 || j == 4 || j == 3 || j == 2 || j == 1 || j == 0 is partially proven to be inductive.\nloop invariant 1 <= j <= 10 is partially proven to be inductive.\nloop invariant i <= 2 * i - 2 is partially proven to be inductive.\nloop invariant j >= 11 - 2 * i is partially proven to be inductive.\nloop invariant j <= 10 - 2 * i is partially proven to be inductive.\nloop invariant 0 <= i <= j is partially proven to be inductive.\nloop invariant j - i + 1 == 10 is partially proven to be inductive.\nloop invariant j - i == 9 is partially proven to be inductive.\nloop invariant i >= j is partially proven to be inductive.\nloop invariant i >= 10 is partially proven to be inductive.\nloop invariant i >= 2 * j is partially proven to be inductive.\nloop invariant i + j == 11 is partially proven to be inductive.\nloop invariant j == 6 ==> i == 12 is partially proven to be inductive.\nloop invariant j != 6 ==> i == 10 is partially proven to be inductive.\nloop invariant (i % 2) == 1 is partially proven to be inductive.\nloop invariant (i + j) % 2 == 0 is partially proven to be inductive.\nloop invariant j <= 9 is partially proven to be inductive.\nloop invariant (j - i + 1) % 2 == 0 is partially proven to be inductive.\nAssertion j == 6: Partially proven",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  \n  (i = 1);\n  (j = 10);\n  \n  /*@\nloop invariant i1: 1 <= i <= j;\nloop invariant i2: i <= j + 1;\nloop invariant i3: j >= 10;\nloop invariant i4: j >= i - 2;\nloop invariant i5: i <= 10;\nloop invariant i6: j <= 10 - (i - 1) * (i - 2) / 2;\nloop invariant i7: 1 <= j <= i <= 11;\nloop invariant i8: i + j <= 12;\nloop invariant i9: (j == 6) ==> (i == 6);\nloop invariant i10: 0 <= j <= 10;\nloop invariant i11: 1 <= i <= 11;\nloop invariant i12: i <= j;\nloop invariant i13: i % 2 == 1;\nloop invariant i14: j == 10 - (i - 1) / 2;\nloop invariant i15: (j >= i) ==> (i % 2 == 1);\nloop invariant i16: (j >= i) ==> (i <= j);\nloop invariant i17: (j >= i) ==> (i <= 11);\nloop invariant i18: (j >= i) ==> (j <= 10);\nloop invariant i19: (j >= i) ==> (0 <= j);\nloop invariant i20: (j >= i) ==> (0 <= i);\nloop invariant i21: (j >= i) ==> (j == 10 - (i - 1) / 2);\nloop invariant i22: i >= 1;\nloop invariant i23: (j - i) % 2 == 0;\nloop invariant i24: (i - j) % 2 == 0;\nloop invariant i25: j >= i - 1;\nloop invariant i26: (j - i) <= 9;\nloop invariant i27: (i - j) <= 1;\nloop invariant i28: (i - j) >= -9;\nloop invariant i29: (j - i) >= -1;\nloop invariant i30: 1 <= i <= 10;\nloop invariant i31: j == 10 - i;\nloop invariant i32: j >= i;\nloop invariant i33: 0 <= i <= j <= 10;\nloop invariant i34: j % 2 == 0;\nloop invariant i35: j >= 6;\nloop invariant i36: j <= 10;\nloop invariant i37: i <= 11;\nloop invariant i38: i + j <= 21;\nloop invariant i39: i > 0; loop invariant j > i; loop invariant j <= 10; loop invariant i <= 7; loop invariant i <= j; loop invariant j == 6;\nloop invariant i40: 0 <= j < i <= 10;\nloop invariant i41: i <= 9;\nloop invariant i42: j >= 1;\nloop invariant i43: i % 2 == 1 ==> i == 1 || i == 3 || i == 5 || i == 7 || i == 9;\nloop invariant i44: j == 10 - i ==> j == 9 || j == 8 || j == 7 || j == 6 || j == 5 || j == 4 || j == 3 || j == 2 || j == 1 || j == 0;\nloop invariant i45: 1 <= j <= 10;\nloop invariant i46: i <= 2 * i - 2;\nloop invariant i47: j >= 11 - 2 * i;\nloop invariant i48: j <= 10 - 2 * i;\nloop invariant i49: 0 <= i <= j;\nloop invariant i50: j - i + 1 == 10;\nloop invariant i51: j - i == 9;\nloop invariant i52: i >= j;\nloop invariant i53: i >= 10;\nloop invariant i54: i >= 2 * j;\nloop invariant i55: i + j == 11;\nloop invariant i56: j == 6 ==> i == 12;\nloop invariant i57: j != 6 ==> i == 10;\nloop invariant i58: (i % 2) == 1;\nloop invariant i59: (i + j) % 2 == 0;\nloop invariant i60: j <= 9;\nloop invariant i61: (j - i + 1) % 2 == 0;\n*/\nwhile ((j >= i)) {\n    {\n    (i  = (i + 2));\n    (j  = (j - 1));\n    }\n\n  }\n  \n{;\n//@ assert( (j == 6) );\n}\n\n}",
        "combined_annotation_num_solver_calls": 6,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  \n  (i = 1);\n  (j = 10);\n  \n  /*@\nloop invariant i1: 1 <= i <= j;\nloop invariant i2: i <= j + 1;\nloop invariant i3: j >= 10;\nloop invariant i4: j >= i - 2;\nloop invariant i5: i <= 10;\nloop invariant i6: j <= 10 - (i - 1) * (i - 2) / 2;\n\nloop invariant i8: i + j <= 12;\nloop invariant i9: (j == 6) ==> (i == 6);\nloop invariant i10: 0 <= j <= 10;\nloop invariant i11: 1 <= i <= 11;\nloop invariant i12: i <= j;\nloop invariant i13: i % 2 == 1;\nloop invariant i14: j == 10 - (i - 1) / 2;\nloop invariant i15: (j >= i) ==> (i % 2 == 1);\nloop invariant i16: (j >= i) ==> (i <= j);\nloop invariant i17: (j >= i) ==> (i <= 11);\nloop invariant i18: (j >= i) ==> (j <= 10);\nloop invariant i19: (j >= i) ==> (0 <= j);\nloop invariant i20: (j >= i) ==> (0 <= i);\nloop invariant i21: (j >= i) ==> (j == 10 - (i - 1) / 2);\nloop invariant i22: i >= 1;\n\n\nloop invariant i25: j >= i - 1;\nloop invariant i26: (j - i) <= 9;\nloop invariant i27: (i - j) <= 1;\nloop invariant i28: (i - j) >= -9;\nloop invariant i29: (j - i) >= -1;\nloop invariant i30: 1 <= i <= 10;\n\nloop invariant i32: j >= i;\nloop invariant i33: 0 <= i <= j <= 10;\nloop invariant i34: j % 2 == 0;\nloop invariant i35: j >= 6;\nloop invariant i36: j <= 10;\nloop invariant i37: i <= 11;\nloop invariant i38: i + j <= 21;\nloop invariant i39: i > 0; loop invariant j > i; loop invariant j <= 10; loop invariant i <= 7; loop invariant i <= j; loop invariant j == 6;\nloop invariant i40: 0 <= j < i <= 10;\nloop invariant i41: i <= 9;\nloop invariant i42: j >= 1;\nloop invariant i43: i % 2 == 1 ==> i == 1 || i == 3 || i == 5 || i == 7 || i == 9;\nloop invariant i44: j == 10 - i ==> j == 9 || j == 8 || j == 7 || j == 6 || j == 5 || j == 4 || j == 3 || j == 2 || j == 1 || j == 0;\nloop invariant i45: 1 <= j <= 10;\nloop invariant i46: i <= 2 * i - 2;\nloop invariant i47: j >= 11 - 2 * i;\nloop invariant i48: j <= 10 - 2 * i;\nloop invariant i49: 0 <= i <= j;\nloop invariant i50: j - i + 1 == 10;\nloop invariant i51: j - i == 9;\nloop invariant i52: i >= j;\nloop invariant i53: i >= 10;\nloop invariant i54: i >= 2 * j;\nloop invariant i55: i + j == 11;\nloop invariant i56: j == 6 ==> i == 12;\nloop invariant i57: j != 6 ==> i == 10;\nloop invariant i58: (i % 2) == 1;\nloop invariant i59: (i + j) % 2 == 0;\nloop invariant i60: j <= 9;\nloop invariant i61: (j - i + 1) % 2 == 0;\n*/\nwhile ((j >= i)) {\n    {\n    (i  = (i + 2));\n    (j  = (j - 1));\n    }\n\n  }\n  \n{;\n//@ assert( (j == 6) );\n}\n\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_nondet_true-unreach-call_true-termination.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/85.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/ex2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/42.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/diamond_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/odd.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/even.c",
            "../dataset/loop_invariants/code2inv/24.c"
        ],
        "skipped": [],
        "total": 8,
        "success_count": 1,
        "failure_count": 7,
        "success_rate": 0.125
    }
}