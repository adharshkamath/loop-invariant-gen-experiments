{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/ddlm2013_true-unreach-call.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    while (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;\n//@ assert(a == b);\n}\n\n    }\n    return 0;\n}",
        "success": false,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 1 <= j <= b + 1;\nloop invariant i == 2 * (b + 1) - j;\nloop invariant (a - b) == (j - i);\nloop invariant (j - i) % 2 == 1;\nloop invariant (a - b) >= (j - i);\nloop invariant a >= b;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 2;\nloop invariant 0 <= j <= (i + 2);\nloop invariant 0 <= a <= (i + 1);\nloop invariant 0 <= b <= (1 + (j - i) * (j - 1) / 2);\nloop invariant a >= b;\nloop invariant flag ==> (i == 0) ==> (j == 1);\nloop invariant !flag ==> (i == 1) ==> (j == 1);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 2 * j;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= b + 1;\nloop invariant 0 <= j <= a + 1;\nloop invariant i >= 0;\nloop invariant a + b >= j;\nloop invariant i + 1 == j * (i + 2) / 2 + a * (i + 1) / 2;\nloop invariant i + 1 == j * (i + 2) / 2 + a * (i + 1) / 2 ==> a >= 0;\nloop invariant i + 1 == j * (i + 2) / 2 + a * (i + 1) / 2 ==> b >= 0;\nloop invariant i + 1 == j * (i + 2) / 2 + a * (i + 1) / 2 ==> i >= 0;\nloop invariant i + 1 == j * (i + 2) / 2 + a * (i + 1) / 2 ==> a <= b + 1;\nloop invariant i + 1 == j * (i + 2) / 2 + a * (i + 1) / 2 ==> 0 <= j <= a + 1;\nloop invariant i + 1 == j * (i + 2) / 2 + a * (i + 1) / 2 ==> 0 <= i <= 2 * j;\nloop invariant i + 1 == j * (i + 2) / 2 + a * (i + 1) / 2 ==> a + b >= j;\nloop invariant i + 1 == j * (i + 2) / 2 + a * (i + 1) / 2 ==> a >= 0;\nloop invariant i + 1 == j * (i + 2) / 2 + a * (i + 1) / 2 ==> b >= 0;\nloop invariant i + 1 == j * (i + 2) / 2 + a * (i + 1) / 2 ==> i >= 0;\nloop invariant i + 1 == j * (i + 2) / 2 + a * (i + 1) / 2 ==> a <= b + 1;\nloop invariant i + 1 == j * (i + 2) / 2 + a * (i + 1) / 2 ==> 0 <= j <= a + 1;\nloop invariant i + 1 == j * (i + 2) / 2 + a * (i + 1) / 2 ==> 0 <= i <= 2 * j;\nloop invariant i + 1 == j * (i + 2) / 2 + a * (i + 1) / 2 ==> a + b >= j;\nloop invariant i + 1 == j * (i + 2) / 2 + a * (i + 1) / 2 ==> a >= 0;\nloop invariant i + 1 == j * (i + 2) / 2 + a * (i + 1) / 2 ==> b >= 0;\nloop invariant i + 1 == j * (i + 2) / 2 + a * (i + 1) / 2 ==> i >= 0;\nloop invariant i + 1 == j * (i + 2) / 2 + a * (i + 1) / 2 ==> a <= b + 1;\nloop invariant i + 1 == j * (i + 2) / 2 + a * (i + 1) / 2 ==> 0 <= j <= a + 1;\nloop invariant i + 1 == j * (i + 2) / 2 + a * (i + 1) / 2 ==> 0 <= i <= 2 * j;\nloop invariant i + 1 == j * (i + 2) / 2 + a * (i + 1) / 2 ==> a + b >= j;\nloop invariant i + 1 == j * (i + 2) / 2 + a * (i + 1) / 2 ==> a >= 0;\nloop invariant i + 1 == j * (i + 2) / 2 + a * (i + 1) / 2 ==> b >= 0;\nloop invariant i + 1 == j * (i + 2) / 2 + a * (i + 1) / 2 ==> i >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= j <= b;\nloop invariant 0 <= i <= b;\nloop invariant j - i <= b;\nloop invariant j - i >= 0;\nloop invariant j - i == b;\nloop invariant b - a <= 0;\nloop invariant b >= 0;\nloop invariant a >= 0;\nloop invariant 0 <= b <= 1073741823;\nloop invariant 0 <= a <= 1073741823;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant b - a <= 1073741823;\nloop invariant b - a >= 0;\nloop invariant a <= b - a;\nloop invariant a >= b - a;\nloop invariant a == b - a;\nloop invariant a <= b;\nloop invariant b >= a;\nloop invariant a <= 1073741823;\nloop invariant b >= 0;\nloop invariant b <= 1073741823;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= 1073741823;\nloop invariant b >= 0;\nloop invariant b <= 1073741823;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= 1073741823;\nloop invariant b >= 0;\nloop invariant b <= 1073741823;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= 1073741823;\nloop invariant b >= 0;\nloop invariant b <= 1073741823;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= 1073741823;\nloop invariant b >= 0;\nloop invariant b <= 1073741823;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= 1073741823;\nloop invariant b >= 0;\nloop invariant b <= 1073741823;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= 1073741823;\nloop invariant b >= 0;\nloop invariant b <= 1073741823;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= 1073741823;\nloop invariant b >= 0;\nloop invariant b <= 1073741823;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= 1073741823;\nloop invariant b >= 0;\nloop invariant b <= 1073741823;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= 1073741823;\nloop invariant b >= 0;\nloop invariant b <= 1073741823;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= 1073741823;\nloop invariant b >= 0;\nloop invariant b <= 1073741823;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= 1073741823;\nloop invariant b >= 0;\nloop invariant b <= 1073741823;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= 1073741823;\nloop invariant b >= 0;\nloop invariant b <= 1073741823;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= 1073741823;\nloop invariant b >= 0;\nloop invariant b <= 1073741823;\nloop invariant a <= b;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= a <= b;\nloop invariant 0 <= b <= 100000;\nloop invariant a >= (1 + (b - 1) * b / 2);\nloop invariant if (flag) { a == b };\nloop invariant if (!flag) { a != b };\n*/\n```",
            "```\n/*@\nloop invariant 0 <= a <= 2147483647;\nloop invariant 0 <= b <= 2147483647;\nloop invariant 1 <= j <= 2147483647;\nloop invariant 0 <= i <= 2147483647;\nloop invariant 0 <= a - b <= 2147483647;\nloop invariant 1 <= j - i <= 2147483647;\nloop invariant a - b ==> j - i;\nloop invariant !flag ==> a == b;\nloop invariant flag ==> a != b;\nloop invariant a, b ==> a >= b;\nloop invariant !flag ==> i == 1;\nloop invariant flag ==> i == 0;\nloop invariant !(flag ==> i%2 == 0) ==> i%2 == 1;\nloop invariant flag ==> i%2 == 0;\nloop invariant flag ==> j%2 == 1;\nloop invariant !(flag ==> i%2 == 0) ==> j%2 == 0;\nloop invariant !(flag ==> i%2 == 0) ==> j%2 == 1;\nloop invariant flag ==> j%2 == 0;\nloop invariant !flag ==> j%2 == 1;\nloop invariant a, b, i, j ==> a >= (j - i) * (j - i + 1) / 2;\nloop invariant a, b, i, j ==> b >= (i - j) * (i - j + 1) / 2;\nloop invariant a, b, i, j ==> a - b >= (j - i) * (j - i + 1) / 2;\nloop invariant a, b, i, j ==> b - a >= (i - j) * (i - j + 1) / 2;\nloop invariant a, b, i, j ==> a - b <= (j - i) * (j - i + 1) / 2;\nloop invariant a, b, i, j ==> b - a <= (i - j) * (i - j + 1) / 2;\nloop invariant a, b, i, j ==> a - b ==> (j - i) * (j - i + 1) / 2;\nloop invariant a, b, i, j ==> b - a ==> (i - j) * (i - j + 1) / 2;\nloop invariant a, b, i, j ==> a - b ==> (j - i) * (j - i + 1) / 2;\nloop invariant a, b, i, j ==> b - a ==> (i - j) * (i - j + 1) / 2;\nloop invariant a, b, i, j ==> a - b ==> (j - i) * (j - i + 1) / 2;\nloop invariant a, b, i, j ==> b - a ==> (i - j) * (i - j + 1) / 2;\nloop invariant a, b, i, j ==> a - b ==> (j - i) * (j - i + 1) / 2;\nloop invariant a, b, i, j ==> b - a ==> (i - j) * (i - j + 1) / 2;\nloop invariant a, b, i, j ==> a - b ==> (j - i) * (j - i + 1) / 2;\nloop invariant a, b, i, j ==> b - a ==> (i - j) * (i - j + 1) / 2;\nloop invariant a, b, i, j ==> a - b ==> (j - i) * (j - i + 1) / 2;\nloop invariant a, b, i, j ==> b - a ==> (i - j) * (i - j + 1) / 2;\nloop invariant a, b, i, j ==> a - b ==> (j - i) * (j - i + 1) / 2;\nloop invariant a, b, i, j ==> b - a ==> (i - j) * (i - j + 1) / 2;\nloop invariant a, b, i, j ==> a - b ==> (j - i) * (j - i + 1) / 2;\nloop invariant a, b, i, j ==> b - a ==> (i - j) * (i - j + 1) / 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= a <= b;\nloop invariant 0 <= i <= 1;\nloop invariant 1 <= j;\nloop invariant i == (j - 1) \\* (j - 2) / 2;\nloop invariant i == (j - 2) \\* (j - 1) / 2;\nloop invariant i == (j - 1) \\* (j - 2) / 2;\nloop invariant i == (j - 2) \\* (j - 1) / 2;\nloop invariant i == (j - 1) \\* (j - 2) / 2;\nloop invariant i == (j - 2) \\* (j - 1) / 2;\nloop invariant i == (j - 1) \\* (j - 2) / 2;\nloop invariant i == (j - 2) \\* (j - 1) / 2;\nloop invariant i == (j - 1) \\* (j - 2) / 2;\nloop invariant i == (j - 2) \\* (j - 1) / 2;\nloop invariant i == (j - 1) \\* (j - 2) / 2;\nloop invariant i == (j - 2) \\* (j - 1) / 2;\nloop invariant i == (j - 1) \\* (j - 2) / 2;\nloop invariant i == (j - 2) \\* (j - 1) / 2;\nloop invariant i == (j - 1) \\* (j - 2) / 2;\nloop invariant i == (j - 2) \\* (j - 1) / 2;\nloop invariant i == (j - 1) \\* (j - 2) / 2;\nloop invariant i == (j - 2) \\* (j - 1) / 2;\nloop invariant i == (j - 1) \\* (j - 2) / 2;\nloop invariant i == (j - 2) \\* (j - 1) / 2;\nloop invariant i == (j - 1) \\* (j - 2) / 2;\nloop invariant i == (j - 2) \\* (j - 1) / 2;\nloop invariant i == (j - 1) \\* (j - 2) / 2;\nloop invariant i == (j - 2) \\* (j - 1) / 2;\nloop invariant i == (j - 1) \\* (j - 2) / 2;\nloop invariant i == (j - 2) \\* (j - 1) / 2;\nloop invariant i == (j - 1) \\* (j - 2) / 2;\nloop invariant i == (j - 2) \\* (j - 1) / 2;\nloop invariant i == (j - 1) \\* (j - 2) / 2;\nloop invariant i == (j - 2) \\* (j - 1) / 2;\nloop invariant i == (j - 1) \\* (j - 2) / 2;\nloop invariant i == (j - 2) \\* (j - 1) / 2;\nloop invariant i == (j - 1) \\* (j - 2) / 2;\nloop invariant i == (j - 2) \\* (j - 1) / 2;\nloop invariant i == (j - 1) \\* (j - 2) / 2;\nloop invariant i == (j - 2) \\* (j - 1) / 2;\nloop invariant i == (j - 1) \\* (j - 2) / 2;\nloop invariant i == (j - 2) \\* (j - 1) / 2;\nloop invariant i == (j - 1) \\* (j - 2) / 2;\nloop invariant i == (j - 2) \\* (j - 1) / 2;\nloop invariant i == (j - 1) \\* (j - 2) / 2;\nloop invariant i == (j - 2) \\* (j - 1) / 2;\nloop invariant i == (j - 1) \\* (j - 2) / 2;\nloop invariant i == (j - 2) \\* (j - 1) / 2;\n*/\n```",
            "```\n/*@\nloop invariant a == b && i == 1 && j == 1;\nloop invariant a == b && a >= 0 && b >= 0 && i >= 1 && j >= 1 && i <= 2 * j;\nloop invariant a == b && a >= 0 && b >= 0 && i >= 1 && j >= 1 && i <= 2 * j && i == j && j == 1;\nloop invariant a == b && a >= 0 && b >= 0 && i >= 1 && j >= 1 && i <= 2 * j && i == j && j == 1 && i == 0;\nloop invariant a == b && a >= 0 && b >= 0 && i >= 1 && j >= 1 && i <= 2 * j && i == j && j == 1 && i == 0 && a == 0;\nloop invariant a == b && a >= 0 && b >= 0 && i >= 1 && j >= 1 && i <= 2 * j && i == j && j == 1 && i == 0 && a == 0 && i == 1;\nloop invariant a == b && a >= 0 && b >= 0 && i >= 1 && j >= 1 && i <= 2 * j && i == j && j == 1 && i == 0 && a == 0 && i == 1 && j == 1;\nloop invariant a == b && a >= 0 && b >= 0 && i >= 1 && j >= 1 && i <= 2 * j && i == j && j == 1 && i == 0 && a == 0 && i == 1 && j == 1 && i == j;\nloop invariant a == b && a >= 0 && b >= 0 && i >= 1 && j >= 1 && i <= 2 * j && i == j && j == 1 && i == 0 && a == 0 && i == 1 && j == 1 && i == j && j == 1;\nloop invariant a == b && a >= 0 && b >= 0 && i >= 1 && j >= 1 && i <= 2 * j && i == j && j == 1 && i == 0 && a == 0 && i == 1 && j == 1 && i == j && j == 1 && a == b;\nloop invariant a == b && a >= 0 && b >= 0 && i >= 1 && j >= 1 && i <= 2 * j && i == j && j == 1 && i == 0 && a == 0 && i == 1 && j == 1 && i == j && j == 1 && a == b && a == 0;\nloop invariant a == b && a >= 0 && b >= 0 && i >= 1 && j >= 1 && i <= 2 * j && i == j && j == 1 && i == 0 && a == 0 && i == 1 && j == 1 && i == j && j == 1 && a == b && a == 0 && i == 1;\nloop invariant a == b && a >= 0 && b >= 0 && i >= 1 && j >= 1 && i <= 2 * j && i == j && j == 1 && i == 0 && a == 0 && i == 1 && j == 1 && i == j && j == 1 && a == b && a == 0 && i == 1 && j == 1;\nloop invariant a == b && a >= 0 && b >= 0 && i >= 1 && j >= 1 && i <= 2 * j && i == j && j == 1 && i == 0 && a == 0 && i == 1 && j == 1 && i == j && j == 1 && a == b && a == 0 && i == 1 && j == 1 && i == j;\nloop invariant a == b && a >= 0 && b >= 0 && i >= 1 && j >= 1 && i <= 2 * j && i == j && j == 1 && i == 0 && a == 0 && i == 1 && j == 1 && i == j && j == 1 && a == b && a == 0 && i == 1 && j == 1 && i == j && j == 1;\n*/\n```",
            "```\n/*@\nloop invariant i >= 0 && i <= 1;\nloop invariant j >= 1 && j <= 2;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant flag == 0 || flag == 1;\nloop invariant a - b >= 0;\nloop invariant flag == 1 ==> a == b;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 2 * j;\nloop invariant 0 <= a <= i * (i - 1) / 2;\nloop invariant 0 <= b <= (j - 1) * j / 2;\nloop invariant a == b ==> i == j;\nloop invariant a == b ==> flag == 1;\nloop invariant a == b ==> i == 0;\nloop invariant a == b ==> j == 1;\nloop invariant a == b ==> flag == 0 ==> i == 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= a <= INT_MAX;\nloop invariant 0 <= b <= INT_MAX;\nloop invariant j%2 == 1;\nloop invariant i%2 == 0;\nloop invariant i <= j;\nloop invariant (i <= 1) ==> (a == b);\nloop invariant (i > 1) ==> (a >= b);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= a && a <= b;\nloop invariant 1 <= j;\nloop invariant 0 <= i && i <= 2;\nloop invariant 1 <= i;\nloop invariant 1 <= j;\nloop invariant a <= b;\nloop invariant unknown_int() ==> a == b;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= j <= 100000;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= b;\nloop invariant a == b ==> j == 1;\nloop invariant a < b ==> j > 1;\nloop invariant a > b ==> j == 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= a <= b;\nloop invariant a >= b - (j - i);\nloop invariant j >= i;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a >= b - (j - i - 1);\nloop invariant j >= i - 1;\nloop invariant a >= b - (j - i - 1) * 2;\nloop invariant j >= i - 1 + 1;\nloop invariant a >= b - (j - i - 1) * 2 - 1;\nloop invariant j >= i - 1 + 1 - 1;\nloop invariant a >= b - (j - i - 1) * 2 - 1;\nloop invariant j >= i - 1 + 1 - 1 + 1;\nloop invariant a >= b - (j - i - 1) * 2 - 1;\nloop invariant j >= i - 1 + 1 - 1 + 1 - 1;\nloop invariant a >= b - (j - i - 1) * 2 - 1;\nloop invariant j >= i - 1 + 1 - 1 + 1 - 1 + 1;\nloop invariant a >= b - (j - i - 1) * 2 - 1;\nloop invariant j >= i - 1 + 1 - 1 + 1 - 1 + 1 - 1;\nloop invariant a >= b - (j - i - 1) * 2 - 1;\nloop invariant j >= i - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1;\nloop invariant a >= b - (j - i - 1) * 2 - 1;\nloop invariant j >= i - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1;\nloop invariant a >= b - (j - i - 1) * 2 - 1;\nloop invariant j >= i - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1;\nloop invariant a >= b - (j - i - 1) * 2 - 1;\nloop invariant j >= i - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1;\nloop invariant a >= b - (j - i - 1) * 2 - 1;\nloop invariant j >= i - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1;\nloop invariant a >= b - (j - i - 1) * 2 - 1;\nloop invariant j >= i - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1;\nloop invariant a >= b - (j - i - 1) * 2 - 1;\nloop invariant j >= i - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1;\nloop invariant a >= b - (j - i - 1) * 2 - 1;\nloop invariant j >= i - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1;\nloop invariant a >= b - (j - i - 1) * 2 - 1;\nloop invariant j >= i - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1;\nloop invariant a >= b - (j - i - 1) * 2 - 1;\nloop invariant j >= i - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1;\nloop invariant a >= b - (j - i - 1) * 2 - 1;\n*/\n```",
            "```\n/*@\n\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 1 <= j <= b + 1;\nloop invariant i == 2 * (b + 1) - j;\nloop invariant (a - b) == (j - i);\nloop invariant (j - i) % 2 == 1;\nloop invariant (a - b) >= (j - i);\nloop invariant a >= b;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= j <= b + 1 is partially proven to be inductive.\nloop invariant i == 2 * (b + 1) - j is preserved but not established.\nloop invariant (a - b) == (j - i) is partially proven to be inductive.\nloop invariant (j - i) % 2 == 1 is preserved but not established.\nloop invariant (a - b) >= (j - i) is partially proven to be inductive.\nloop invariant a >= b is partially proven to be inductive.\nAssertion a == b: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    /*@\n\n\n\n\n\n\n*/\nwhile (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;\n//@ assert(a == b);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 2;\nloop invariant 0 <= j <= (i + 2);\nloop invariant 0 <= a <= (i + 1);\nloop invariant 0 <= b <= (1 + (j - i) * (j - 1) / 2);\nloop invariant a >= b;\nloop invariant flag ==> (i == 0) ==> (j == 1);\nloop invariant !flag ==> (i == 1) ==> (j == 1);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= 2 is established but not preserved.\nloop invariant 0 <= j <= (i + 2) is partially proven to be inductive.\nloop invariant 0 <= a <= (i + 1) is partially proven to be inductive.\nloop invariant 0 <= b <= (1 + (j - i) * (j - 1) / 2) is partially proven to be inductive.\nloop invariant a >= b is established but not preserved.\nloop invariant flag ==> (i == 0) ==> (j == 1) is partially proven to be inductive.\nloop invariant !flag ==> (i == 1) ==> (j == 1) is partially proven to be inductive.\nAssertion a == b: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    /*@\n\n\n\n\n\n\n\n*/\nwhile (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;\n//@ assert(a == b);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 2 * j;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= b + 1;\nloop invariant 0 <= j <= a + 1;\nloop invariant i >= 0;\nloop invariant a + b >= j;\nloop invariant i + 1 == j * (i + 2) / 2 + a * (i + 1) / 2;\nloop invariant i + 1 == j * (i + 2) / 2 + a * (i + 1) / 2 ==> a >= 0;\nloop invariant i + 1 == j * (i + 2) / 2 + a * (i + 1) / 2 ==> b >= 0;\nloop invariant i + 1 == j * (i + 2) / 2 + a * (i + 1) / 2 ==> i >= 0;\nloop invariant i + 1 == j * (i + 2) / 2 + a * (i + 1) / 2 ==> a <= b + 1;\nloop invariant i + 1 == j * (i + 2) / 2 + a * (i + 1) / 2 ==> 0 <= j <= a + 1;\nloop invariant i + 1 == j * (i + 2) / 2 + a * (i + 1) / 2 ==> 0 <= i <= 2 * j;\nloop invariant i + 1 == j * (i + 2) / 2 + a * (i + 1) / 2 ==> a + b >= j;\nloop invariant i + 1 == j * (i + 2) / 2 + a * (i + 1) / 2 ==> a >= 0;\nloop invariant i + 1 == j * (i + 2) / 2 + a * (i + 1) / 2 ==> b >= 0;\nloop invariant i + 1 == j * (i + 2) / 2 + a * (i + 1) / 2 ==> i >= 0;\nloop invariant i + 1 == j * (i + 2) / 2 + a * (i + 1) / 2 ==> a <= b + 1;\nloop invariant i + 1 == j * (i + 2) / 2 + a * (i + 1) / 2 ==> 0 <= j <= a + 1;\nloop invariant i + 1 == j * (i + 2) / 2 + a * (i + 1) / 2 ==> 0 <= i <= 2 * j;\nloop invariant i + 1 == j * (i + 2) / 2 + a * (i + 1) / 2 ==> a + b >= j;\nloop invariant i + 1 == j * (i + 2) / 2 + a * (i + 1) / 2 ==> a >= 0;\nloop invariant i + 1 == j * (i + 2) / 2 + a * (i + 1) / 2 ==> b >= 0;\nloop invariant i + 1 == j * (i + 2) / 2 + a * (i + 1) / 2 ==> i >= 0;\nloop invariant i + 1 == j * (i + 2) / 2 + a * (i + 1) / 2 ==> a <= b + 1;\nloop invariant i + 1 == j * (i + 2) / 2 + a * (i + 1) / 2 ==> 0 <= j <= a + 1;\nloop invariant i + 1 == j * (i + 2) / 2 + a * (i + 1) / 2 ==> 0 <= i <= 2 * j;\nloop invariant i + 1 == j * (i + 2) / 2 + a * (i + 1) / 2 ==> a + b >= j;\nloop invariant i + 1 == j * (i + 2) / 2 + a * (i + 1) / 2 ==> a >= 0;\nloop invariant i + 1 == j * (i + 2) / 2 + a * (i + 1) / 2 ==> b >= 0;\nloop invariant i + 1 == j * (i + 2) / 2 + a * (i + 1) / 2 ==> i >= 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= 2 * j is partially proven to be inductive.\nloop invariant a >= 0 is partially proven to be inductive.\nloop invariant b >= 0 is partially proven to be inductive.\nloop invariant a <= b + 1 is partially proven to be inductive.\nloop invariant 0 <= j <= a + 1 is partially proven to be inductive.\nloop invariant i >= 0 is partially proven to be inductive.\nloop invariant a + b >= j is preserved but not established.\nloop invariant i + 1 == j * (i + 2) / 2 + a * (i + 1) / 2 is partially proven to be inductive.\nloop invariant i + 1 == j * (i + 2) / 2 + a * (i + 1) / 2 ==> a >= 0 is partially proven to be inductive.\nloop invariant i + 1 == j * (i + 2) / 2 + a * (i + 1) / 2 ==> b >= 0 is partially proven to be inductive.\nloop invariant i + 1 == j * (i + 2) / 2 + a * (i + 1) / 2 ==> i >= 0 is partially proven to be inductive.\nloop invariant i + 1 == j * (i + 2) / 2 + a * (i + 1) / 2 ==> a <= b + 1 is partially proven to be inductive.\nloop invariant i + 1 == j * (i + 2) / 2 + a * (i + 1) / 2 ==> 0 <= j <= a + 1 is partially proven to be inductive.\nloop invariant i + 1 == j * (i + 2) / 2 + a * (i + 1) / 2 ==> 0 <= i <= 2 * j is partially proven to be inductive.\nloop invariant i + 1 == j * (i + 2) / 2 + a * (i + 1) / 2 ==> a + b >= j is partially proven to be inductive.\nAssertion a == b: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    /*@\n\nloop invariant i2: a >= 0;\nloop invariant i3: b >= 0;\n\n\nloop invariant i6: i >= 0;\n\n\nloop invariant i9: i + 1 == j * (i + 2) / 2 + a * (i + 1) / 2 ==> a >= 0;\nloop invariant i10: i + 1 == j * (i + 2) / 2 + a * (i + 1) / 2 ==> b >= 0;\nloop invariant i11: i + 1 == j * (i + 2) / 2 + a * (i + 1) / 2 ==> i >= 0;\n\n\n\n\n*/\nwhile (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;\n//@ assert(a == b);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 9,
                "annotations": "```\n/*@\nloop invariant 0 <= j <= b;\nloop invariant 0 <= i <= b;\nloop invariant j - i <= b;\nloop invariant j - i >= 0;\nloop invariant j - i == b;\nloop invariant b - a <= 0;\nloop invariant b >= 0;\nloop invariant a >= 0;\nloop invariant 0 <= b <= 1073741823;\nloop invariant 0 <= a <= 1073741823;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant b - a <= 1073741823;\nloop invariant b - a >= 0;\nloop invariant a <= b - a;\nloop invariant a >= b - a;\nloop invariant a == b - a;\nloop invariant a <= b;\nloop invariant b >= a;\nloop invariant a <= 1073741823;\nloop invariant b >= 0;\nloop invariant b <= 1073741823;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= 1073741823;\nloop invariant b >= 0;\nloop invariant b <= 1073741823;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= 1073741823;\nloop invariant b >= 0;\nloop invariant b <= 1073741823;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= 1073741823;\nloop invariant b >= 0;\nloop invariant b <= 1073741823;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= 1073741823;\nloop invariant b >= 0;\nloop invariant b <= 1073741823;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= 1073741823;\nloop invariant b >= 0;\nloop invariant b <= 1073741823;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= 1073741823;\nloop invariant b >= 0;\nloop invariant b <= 1073741823;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= 1073741823;\nloop invariant b >= 0;\nloop invariant b <= 1073741823;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= 1073741823;\nloop invariant b >= 0;\nloop invariant b <= 1073741823;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= 1073741823;\nloop invariant b >= 0;\nloop invariant b <= 1073741823;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= 1073741823;\nloop invariant b >= 0;\nloop invariant b <= 1073741823;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= 1073741823;\nloop invariant b >= 0;\nloop invariant b <= 1073741823;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= 1073741823;\nloop invariant b >= 0;\nloop invariant b <= 1073741823;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= 1073741823;\nloop invariant b >= 0;\nloop invariant b <= 1073741823;\nloop invariant a <= b;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= j <= b is preserved but not established.\nloop invariant 0 <= i <= b is partially proven to be inductive.\nloop invariant j - i <= b is partially proven to be inductive.\nloop invariant j - i >= 0 is partially proven to be inductive.\nloop invariant j - i == b is partially proven to be inductive.\nloop invariant b - a <= 0 is partially proven to be inductive.\nloop invariant b >= 0 is partially proven to be inductive.\nloop invariant a >= 0 is partially proven to be inductive.\nloop invariant 0 <= b <= 1073741823 is partially proven to be inductive.\nloop invariant 0 <= a <= 1073741823 is partially proven to be inductive.\nloop invariant a <= b is partially proven to be inductive.\nloop invariant b - a <= 1073741823 is partially proven to be inductive.\nloop invariant b - a >= 0 is partially proven to be inductive.\nloop invariant a <= b - a is partially proven to be inductive.\nloop invariant a >= b - a is partially proven to be inductive.\nloop invariant a == b - a is partially proven to be inductive.\nloop invariant b >= a is partially proven to be inductive.\nloop invariant a <= 1073741823 is partially proven to be inductive.\nloop invariant b <= 1073741823 is partially proven to be inductive.\nAssertion a == b: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    /*@\n\n\n\n\n\n\nloop invariant i7: b >= 0;\nloop invariant i8: a >= 0;\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;\n//@ assert(a == b);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= a <= b;\nloop invariant 0 <= b <= 100000;\nloop invariant a >= (1 + (b - 1) * b / 2);\nloop invariant if (flag) { a == b };\nloop invariant if (!flag) { a != b };\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 25: unexpected token '('",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    /*@\n\n\n\n\n\n*/\nwhile (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;\n//@ assert(a == b);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 17,
                "annotations": "```\n/*@\nloop invariant 0 <= a <= 2147483647;\nloop invariant 0 <= b <= 2147483647;\nloop invariant 1 <= j <= 2147483647;\nloop invariant 0 <= i <= 2147483647;\nloop invariant 0 <= a - b <= 2147483647;\nloop invariant 1 <= j - i <= 2147483647;\nloop invariant a - b ==> j - i;\nloop invariant !flag ==> a == b;\nloop invariant flag ==> a != b;\nloop invariant a, b ==> a >= b;\nloop invariant !flag ==> i == 1;\nloop invariant flag ==> i == 0;\nloop invariant !(flag ==> i%2 == 0) ==> i%2 == 1;\nloop invariant flag ==> i%2 == 0;\nloop invariant flag ==> j%2 == 1;\nloop invariant !(flag ==> i%2 == 0) ==> j%2 == 0;\nloop invariant !(flag ==> i%2 == 0) ==> j%2 == 1;\nloop invariant flag ==> j%2 == 0;\nloop invariant !flag ==> j%2 == 1;\nloop invariant a, b, i, j ==> a >= (j - i) * (j - i + 1) / 2;\nloop invariant a, b, i, j ==> b >= (i - j) * (i - j + 1) / 2;\nloop invariant a, b, i, j ==> a - b >= (j - i) * (j - i + 1) / 2;\nloop invariant a, b, i, j ==> b - a >= (i - j) * (i - j + 1) / 2;\nloop invariant a, b, i, j ==> a - b <= (j - i) * (j - i + 1) / 2;\nloop invariant a, b, i, j ==> b - a <= (i - j) * (i - j + 1) / 2;\nloop invariant a, b, i, j ==> a - b ==> (j - i) * (j - i + 1) / 2;\nloop invariant a, b, i, j ==> b - a ==> (i - j) * (i - j + 1) / 2;\nloop invariant a, b, i, j ==> a - b ==> (j - i) * (j - i + 1) / 2;\nloop invariant a, b, i, j ==> b - a ==> (i - j) * (i - j + 1) / 2;\nloop invariant a, b, i, j ==> a - b ==> (j - i) * (j - i + 1) / 2;\nloop invariant a, b, i, j ==> b - a ==> (i - j) * (i - j + 1) / 2;\nloop invariant a, b, i, j ==> a - b ==> (j - i) * (j - i + 1) / 2;\nloop invariant a, b, i, j ==> b - a ==> (i - j) * (i - j + 1) / 2;\nloop invariant a, b, i, j ==> a - b ==> (j - i) * (j - i + 1) / 2;\nloop invariant a, b, i, j ==> b - a ==> (i - j) * (i - j + 1) / 2;\nloop invariant a, b, i, j ==> a - b ==> (j - i) * (j - i + 1) / 2;\nloop invariant a, b, i, j ==> b - a ==> (i - j) * (i - j + 1) / 2;\nloop invariant a, b, i, j ==> a - b ==> (j - i) * (j - i + 1) / 2;\nloop invariant a, b, i, j ==> b - a ==> (i - j) * (i - j + 1) / 2;\nloop invariant a, b, i, j ==> a - b ==> (j - i) * (j - i + 1) / 2;\nloop invariant a, b, i, j ==> b - a ==> (i - j) * (i - j + 1) / 2;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 31: unexpected token ','",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    /*@\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i13: !(flag ==> i%2 == 0) ==> i%2 == 1;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;\n//@ assert(a == b);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= a <= b;\nloop invariant 0 <= i <= 1;\nloop invariant 1 <= j;\nloop invariant i == (j - 1) \\* (j - 2) / 2;\nloop invariant i == (j - 2) \\* (j - 1) / 2;\nloop invariant i == (j - 1) \\* (j - 2) / 2;\nloop invariant i == (j - 2) \\* (j - 1) / 2;\nloop invariant i == (j - 1) \\* (j - 2) / 2;\nloop invariant i == (j - 2) \\* (j - 1) / 2;\nloop invariant i == (j - 1) \\* (j - 2) / 2;\nloop invariant i == (j - 2) \\* (j - 1) / 2;\nloop invariant i == (j - 1) \\* (j - 2) / 2;\nloop invariant i == (j - 2) \\* (j - 1) / 2;\nloop invariant i == (j - 1) \\* (j - 2) / 2;\nloop invariant i == (j - 2) \\* (j - 1) / 2;\nloop invariant i == (j - 1) \\* (j - 2) / 2;\nloop invariant i == (j - 2) \\* (j - 1) / 2;\nloop invariant i == (j - 1) \\* (j - 2) / 2;\nloop invariant i == (j - 2) \\* (j - 1) / 2;\nloop invariant i == (j - 1) \\* (j - 2) / 2;\nloop invariant i == (j - 2) \\* (j - 1) / 2;\nloop invariant i == (j - 1) \\* (j - 2) / 2;\nloop invariant i == (j - 2) \\* (j - 1) / 2;\nloop invariant i == (j - 1) \\* (j - 2) / 2;\nloop invariant i == (j - 2) \\* (j - 1) / 2;\nloop invariant i == (j - 1) \\* (j - 2) / 2;\nloop invariant i == (j - 2) \\* (j - 1) / 2;\nloop invariant i == (j - 1) \\* (j - 2) / 2;\nloop invariant i == (j - 2) \\* (j - 1) / 2;\nloop invariant i == (j - 1) \\* (j - 2) / 2;\nloop invariant i == (j - 2) \\* (j - 1) / 2;\nloop invariant i == (j - 1) \\* (j - 2) / 2;\nloop invariant i == (j - 2) \\* (j - 1) / 2;\nloop invariant i == (j - 1) \\* (j - 2) / 2;\nloop invariant i == (j - 2) \\* (j - 1) / 2;\nloop invariant i == (j - 1) \\* (j - 2) / 2;\nloop invariant i == (j - 2) \\* (j - 1) / 2;\nloop invariant i == (j - 1) \\* (j - 2) / 2;\nloop invariant i == (j - 2) \\* (j - 1) / 2;\nloop invariant i == (j - 1) \\* (j - 2) / 2;\nloop invariant i == (j - 2) \\* (j - 1) / 2;\nloop invariant i == (j - 1) \\* (j - 2) / 2;\nloop invariant i == (j - 2) \\* (j - 1) / 2;\nloop invariant i == (j - 1) \\* (j - 2) / 2;\nloop invariant i == (j - 2) \\* (j - 1) / 2;\nloop invariant i == (j - 1) \\* (j - 2) / 2;\nloop invariant i == (j - 2) \\* (j - 1) / 2;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 25: lexical error, illegal character \\",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    /*@\n\n\n\n\n\n*/\nwhile (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;\n//@ assert(a == b);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 13,
                "annotations": "```\n/*@\nloop invariant a == b && i == 1 && j == 1;\nloop invariant a == b && a >= 0 && b >= 0 && i >= 1 && j >= 1 && i <= 2 * j;\nloop invariant a == b && a >= 0 && b >= 0 && i >= 1 && j >= 1 && i <= 2 * j && i == j && j == 1;\nloop invariant a == b && a >= 0 && b >= 0 && i >= 1 && j >= 1 && i <= 2 * j && i == j && j == 1 && i == 0;\nloop invariant a == b && a >= 0 && b >= 0 && i >= 1 && j >= 1 && i <= 2 * j && i == j && j == 1 && i == 0 && a == 0;\nloop invariant a == b && a >= 0 && b >= 0 && i >= 1 && j >= 1 && i <= 2 * j && i == j && j == 1 && i == 0 && a == 0 && i == 1;\nloop invariant a == b && a >= 0 && b >= 0 && i >= 1 && j >= 1 && i <= 2 * j && i == j && j == 1 && i == 0 && a == 0 && i == 1 && j == 1;\nloop invariant a == b && a >= 0 && b >= 0 && i >= 1 && j >= 1 && i <= 2 * j && i == j && j == 1 && i == 0 && a == 0 && i == 1 && j == 1 && i == j;\nloop invariant a == b && a >= 0 && b >= 0 && i >= 1 && j >= 1 && i <= 2 * j && i == j && j == 1 && i == 0 && a == 0 && i == 1 && j == 1 && i == j && j == 1;\nloop invariant a == b && a >= 0 && b >= 0 && i >= 1 && j >= 1 && i <= 2 * j && i == j && j == 1 && i == 0 && a == 0 && i == 1 && j == 1 && i == j && j == 1 && a == b;\nloop invariant a == b && a >= 0 && b >= 0 && i >= 1 && j >= 1 && i <= 2 * j && i == j && j == 1 && i == 0 && a == 0 && i == 1 && j == 1 && i == j && j == 1 && a == b && a == 0;\nloop invariant a == b && a >= 0 && b >= 0 && i >= 1 && j >= 1 && i <= 2 * j && i == j && j == 1 && i == 0 && a == 0 && i == 1 && j == 1 && i == j && j == 1 && a == b && a == 0 && i == 1;\nloop invariant a == b && a >= 0 && b >= 0 && i >= 1 && j >= 1 && i <= 2 * j && i == j && j == 1 && i == 0 && a == 0 && i == 1 && j == 1 && i == j && j == 1 && a == b && a == 0 && i == 1 && j == 1;\nloop invariant a == b && a >= 0 && b >= 0 && i >= 1 && j >= 1 && i <= 2 * j && i == j && j == 1 && i == 0 && a == 0 && i == 1 && j == 1 && i == j && j == 1 && a == b && a == 0 && i == 1 && j == 1 && i == j;\nloop invariant a == b && a >= 0 && b >= 0 && i >= 1 && j >= 1 && i <= 2 * j && i == j && j == 1 && i == 0 && a == 0 && i == 1 && j == 1 && i == j && j == 1 && a == b && a == 0 && i == 1 && j == 1 && i == j && j == 1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant a == b && i == 1 && j == 1 is preserved but not established.\nloop invariant a == b && a >= 0 && b >= 0 && i >= 1 && j >= 1 && i <= 2 * j is partially proven to be inductive.\nloop invariant a == b && a >= 0 && b >= 0 && i >= 1 && j >= 1 && i <= 2 * j && i == j && j == 1 is partially proven to be inductive.\nloop invariant a == b && a >= 0 && b >= 0 && i >= 1 && j >= 1 && i <= 2 * j && i == j && j == 1 && i == 0 is preserved but not established.\nloop invariant a == b && a >= 0 && b >= 0 && i >= 1 && j >= 1 && i <= 2 * j && i == j && j == 1 && i == 0 && a == 0 is partially proven to be inductive.\nloop invariant a == b && a >= 0 && b >= 0 && i >= 1 && j >= 1 && i <= 2 * j && i == j && j == 1 && i == 0 && a == 0 && i == 1 is partially proven to be inductive.\nloop invariant a == b && a >= 0 && b >= 0 && i >= 1 && j >= 1 && i <= 2 * j && i == j && j == 1 && i == 0 && a == 0 && i == 1 && j == 1 is partially proven to be inductive.\nloop invariant a == b && a >= 0 && b >= 0 && i >= 1 && j >= 1 && i <= 2 * j && i == j && j == 1 && i == 0 && a == 0 && i == 1 && j == 1 && i == j is partially proven to be inductive.\nloop invariant a == b && a >= 0 && b >= 0 && i >= 1 && j >= 1 && i <= 2 * j && i == j && j == 1 && i == 0 && a == 0 && i == 1 && j == 1 && i == j && j == 1 is partially proven to be inductive.\nloop invariant a == b && a >= 0 && b >= 0 && i >= 1 && j >= 1 && i <= 2 * j && i == j && j == 1 && i == 0 && a == 0 && i == 1 && j == 1 && i == j && j == 1 && a == b is partially proven to be inductive.\nloop invariant a == b && a >= 0 && b >= 0 && i >= 1 && j >= 1 && i <= 2 * j && i == j && j == 1 && i == 0 && a == 0 && i == 1 && j == 1 && i == j && j == 1 && a == b && a == 0 is partially proven to be inductive.\nloop invariant a == b && a >= 0 && b >= 0 && i >= 1 && j >= 1 && i <= 2 * j && i == j && j == 1 && i == 0 && a == 0 && i == 1 && j == 1 && i == j && j == 1 && a == b && a == 0 && i == 1 is partially proven to be inductive.\nloop invariant a == b && a >= 0 && b >= 0 && i >= 1 && j >= 1 && i <= 2 * j && i == j && j == 1 && i == 0 && a == 0 && i == 1 && j == 1 && i == j && j == 1 && a == b && a == 0 && i == 1 && j == 1 is partially proven to be inductive.\nloop invariant a == b && a >= 0 && b >= 0 && i >= 1 && j >= 1 && i <= 2 * j && i == j && j == 1 && i == 0 && a == 0 && i == 1 && j == 1 && i == j && j == 1 && a == b && a == 0 && i == 1 && j == 1 && i == j is partially proven to be inductive.\nloop invariant a == b && a >= 0 && b >= 0 && i >= 1 && j >= 1 && i <= 2 * j && i == j && j == 1 && i == 0 && a == 0 && i == 1 && j == 1 && i == j && j == 1 && a == b && a == 0 && i == 1 && j == 1 && i == j && j == 1 is partially proven to be inductive.\nAssertion a == b: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;\n//@ assert(a == b);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant i >= 0 && i <= 1;\nloop invariant j >= 1 && j <= 2;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant flag == 0 || flag == 1;\nloop invariant a - b >= 0;\nloop invariant flag == 1 ==> a == b;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant i >= 0 && i <= 1 is established but not preserved.\nloop invariant j >= 1 && j <= 2 is partially proven to be inductive.\nloop invariant a >= 0 is partially proven to be inductive.\nloop invariant b >= 0 is partially proven to be inductive.\nloop invariant flag == 0 || flag == 1 is preserved but not established.\nloop invariant a - b >= 0 is partially proven to be inductive.\nloop invariant flag == 1 ==> a == b is partially proven to be inductive.\nAssertion a == b: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    /*@\n\n\nloop invariant i3: a >= 0;\nloop invariant i4: b >= 0;\n\n\n\n*/\nwhile (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;\n//@ assert(a == b);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 2 * j;\nloop invariant 0 <= a <= i * (i - 1) / 2;\nloop invariant 0 <= b <= (j - 1) * j / 2;\nloop invariant a == b ==> i == j;\nloop invariant a == b ==> flag == 1;\nloop invariant a == b ==> i == 0;\nloop invariant a == b ==> j == 1;\nloop invariant a == b ==> flag == 0 ==> i == 1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= 2 * j is partially proven to be inductive.\nloop invariant 0 <= a <= i * (i - 1) / 2 is partially proven to be inductive.\nloop invariant 0 <= b <= (j - 1) * j / 2 is partially proven to be inductive.\nloop invariant a == b ==> i == j is preserved but not established.\nloop invariant a == b ==> flag == 1 is preserved but not established.\nloop invariant a == b ==> i == 0 is partially proven to be inductive.\nloop invariant a == b ==> j == 1 is partially proven to be inductive.\nloop invariant a == b ==> flag == 0 ==> i == 1 is partially proven to be inductive.\nAssertion a == b: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    /*@\n\n\n\n\n\n\n\n\n*/\nwhile (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;\n//@ assert(a == b);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= a <= INT_MAX;\nloop invariant 0 <= b <= INT_MAX;\nloop invariant j%2 == 1;\nloop invariant i%2 == 0;\nloop invariant i <= j;\nloop invariant (i <= 1) ==> (a == b);\nloop invariant (i > 1) ==> (a >= b);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= a <= INT_MAX is established but not preserved.\nloop invariant 0 <= b <= INT_MAX is established but not preserved.\nloop invariant j%2 == 1 is established but not preserved.\nloop invariant i%2 == 0 is neither established nor preserved.\nloop invariant i <= j is established but not preserved.\nloop invariant (i <= 1) ==> (a == b) is established but not preserved.\nloop invariant (i > 1) ==> (a >= b) is established but not preserved.\nAssertion a == b: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    /*@\n\n\n\n\n\n\n\n*/\nwhile (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;\n//@ assert(a == b);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= a && a <= b;\nloop invariant 1 <= j;\nloop invariant 0 <= i && i <= 2;\nloop invariant 1 <= i;\nloop invariant 1 <= j;\nloop invariant a <= b;\nloop invariant unknown_int() ==> a == b;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 27: unexpected token ')'",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    /*@\n\n\n\n\n\n\n*/\nwhile (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;\n//@ assert(a == b);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= j <= 100000;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= b;\nloop invariant a == b ==> j == 1;\nloop invariant a < b ==> j > 1;\nloop invariant a > b ==> j == 1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= j <= 100000 is established but not preserved.\nloop invariant a >= 0 is partially proven to be inductive.\nloop invariant b >= 0 is partially proven to be inductive.\nloop invariant a <= b is established but not preserved.\nloop invariant a == b ==> j == 1 is established but not preserved.\nloop invariant a < b ==> j > 1 is partially proven to be inductive.\nloop invariant a > b ==> j == 1 is partially proven to be inductive.\nAssertion a == b: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    /*@\n\nloop invariant i2: a >= 0;\nloop invariant i3: b >= 0;\n\n\n\n\n*/\nwhile (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;\n//@ assert(a == b);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 13,
                "annotations": "```\n/*@\nloop invariant 0 <= a <= b;\nloop invariant a >= b - (j - i);\nloop invariant j >= i;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a >= b - (j - i - 1);\nloop invariant j >= i - 1;\nloop invariant a >= b - (j - i - 1) * 2;\nloop invariant j >= i - 1 + 1;\nloop invariant a >= b - (j - i - 1) * 2 - 1;\nloop invariant j >= i - 1 + 1 - 1;\nloop invariant a >= b - (j - i - 1) * 2 - 1;\nloop invariant j >= i - 1 + 1 - 1 + 1;\nloop invariant a >= b - (j - i - 1) * 2 - 1;\nloop invariant j >= i - 1 + 1 - 1 + 1 - 1;\nloop invariant a >= b - (j - i - 1) * 2 - 1;\nloop invariant j >= i - 1 + 1 - 1 + 1 - 1 + 1;\nloop invariant a >= b - (j - i - 1) * 2 - 1;\nloop invariant j >= i - 1 + 1 - 1 + 1 - 1 + 1 - 1;\nloop invariant a >= b - (j - i - 1) * 2 - 1;\nloop invariant j >= i - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1;\nloop invariant a >= b - (j - i - 1) * 2 - 1;\nloop invariant j >= i - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1;\nloop invariant a >= b - (j - i - 1) * 2 - 1;\nloop invariant j >= i - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1;\nloop invariant a >= b - (j - i - 1) * 2 - 1;\nloop invariant j >= i - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1;\nloop invariant a >= b - (j - i - 1) * 2 - 1;\nloop invariant j >= i - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1;\nloop invariant a >= b - (j - i - 1) * 2 - 1;\nloop invariant j >= i - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1;\nloop invariant a >= b - (j - i - 1) * 2 - 1;\nloop invariant j >= i - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1;\nloop invariant a >= b - (j - i - 1) * 2 - 1;\nloop invariant j >= i - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1;\nloop invariant a >= b - (j - i - 1) * 2 - 1;\nloop invariant j >= i - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1;\nloop invariant a >= b - (j - i - 1) * 2 - 1;\nloop invariant j >= i - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1;\nloop invariant a >= b - (j - i - 1) * 2 - 1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= a <= b is established but not preserved.\nloop invariant a >= b - (j - i) is established but not preserved.\nloop invariant j >= i is partially proven to be inductive.\nloop invariant a >= 0 is partially proven to be inductive.\nloop invariant b >= 0 is partially proven to be inductive.\nloop invariant a >= b - (j - i - 1) is neither established nor preserved.\nloop invariant j >= i - 1 is partially proven to be inductive.\nloop invariant a >= b - (j - i - 1) * 2 is partially proven to be inductive.\nloop invariant j >= i - 1 + 1 is partially proven to be inductive.\nloop invariant a >= b - (j - i - 1) * 2 - 1 is partially proven to be inductive.\nloop invariant j >= i - 1 + 1 - 1 is partially proven to be inductive.\nloop invariant j >= i - 1 + 1 - 1 + 1 is partially proven to be inductive.\nloop invariant j >= i - 1 + 1 - 1 + 1 - 1 is partially proven to be inductive.\nloop invariant j >= i - 1 + 1 - 1 + 1 - 1 + 1 is partially proven to be inductive.\nloop invariant j >= i - 1 + 1 - 1 + 1 - 1 + 1 - 1 is partially proven to be inductive.\nloop invariant j >= i - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 is partially proven to be inductive.\nloop invariant j >= i - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 is partially proven to be inductive.\nloop invariant j >= i - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 is partially proven to be inductive.\nloop invariant j >= i - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 is partially proven to be inductive.\nloop invariant j >= i - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 is partially proven to be inductive.\nloop invariant j >= i - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 is partially proven to be inductive.\nloop invariant j >= i - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 is partially proven to be inductive.\nloop invariant j >= i - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 is partially proven to be inductive.\nloop invariant j >= i - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 is partially proven to be inductive.\nloop invariant j >= i - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 is partially proven to be inductive.\nAssertion a == b: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    /*@\n\n\n\nloop invariant i4: a >= 0;\nloop invariant i5: b >= 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;\n//@ assert(a == b);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\n\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 22: unexpected token ''",
                "houdini_error": "No annotations found"
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 69: unexpected token '('",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    /*@\nloop invariant i1: 1 <= j <= b + 1;\nloop invariant i2: i == 2 * (b + 1) - j;\nloop invariant i3: (a - b) == (j - i);\nloop invariant i4: (j - i) % 2 == 1;\nloop invariant i5: (a - b) >= (j - i);\nloop invariant i6: a >= b;\nloop invariant i7: 0 <= i <= 2;\nloop invariant i8: 0 <= j <= (i + 2);\nloop invariant i9: 0 <= a <= (i + 1);\nloop invariant i10: 0 <= b <= (1 + (j - i) * (j - 1) / 2);\nloop invariant i11: flag ==> (i == 0) ==> (j == 1);\nloop invariant i12: !flag ==> (i == 1) ==> (j == 1);\nloop invariant i13: 0 <= i <= 2 * j;\nloop invariant i14: a >= 0;\nloop invariant i15: b >= 0;\nloop invariant i16: a <= b + 1;\nloop invariant i17: 0 <= j <= a + 1;\nloop invariant i18: i >= 0;\nloop invariant i19: a + b >= j;\nloop invariant i20: i + 1 == j * (i + 2) / 2 + a * (i + 1) / 2;\nloop invariant i21: i + 1 == j * (i + 2) / 2 + a * (i + 1) / 2 ==> a >= 0;\nloop invariant i22: i + 1 == j * (i + 2) / 2 + a * (i + 1) / 2 ==> b >= 0;\nloop invariant i23: i + 1 == j * (i + 2) / 2 + a * (i + 1) / 2 ==> i >= 0;\nloop invariant i24: i + 1 == j * (i + 2) / 2 + a * (i + 1) / 2 ==> a <= b + 1;\nloop invariant i25: i + 1 == j * (i + 2) / 2 + a * (i + 1) / 2 ==> 0 <= j <= a + 1;\nloop invariant i26: i + 1 == j * (i + 2) / 2 + a * (i + 1) / 2 ==> 0 <= i <= 2 * j;\nloop invariant i27: i + 1 == j * (i + 2) / 2 + a * (i + 1) / 2 ==> a + b >= j;\nloop invariant i28: 0 <= j <= b;\nloop invariant i29: 0 <= i <= b;\nloop invariant i30: j - i <= b;\nloop invariant i31: j - i >= 0;\nloop invariant i32: j - i == b;\nloop invariant i33: b - a <= 0;\nloop invariant i34: 0 <= b <= 1073741823;\nloop invariant i35: 0 <= a <= 1073741823;\nloop invariant i36: a <= b;\nloop invariant i37: b - a <= 1073741823;\nloop invariant i38: b - a >= 0;\nloop invariant i39: a <= b - a;\nloop invariant i40: a >= b - a;\nloop invariant i41: a == b - a;\nloop invariant i42: b >= a;\nloop invariant i43: a <= 1073741823;\nloop invariant i44: b <= 1073741823;\nloop invariant i45: 0 <= a <= b;\nloop invariant i46: 0 <= b <= 100000;\nloop invariant i47: a >= (1 + (b - 1) * b / 2);\nloop invariant i48: if (flag) { a == b };\nloop invariant i49: if (!flag) { a != b };\nloop invariant i50: 0 <= a <= 2147483647;\nloop invariant i51: 0 <= b <= 2147483647;\nloop invariant i52: 1 <= j <= 2147483647;\nloop invariant i53: 0 <= i <= 2147483647;\nloop invariant i54: 0 <= a - b <= 2147483647;\nloop invariant i55: 1 <= j - i <= 2147483647;\nloop invariant i56: a - b ==> j - i;\nloop invariant i57: !flag ==> a == b;\nloop invariant i58: flag ==> a != b;\nloop invariant i59: a, b ==> a >= b;\nloop invariant i60: !flag ==> i == 1;\nloop invariant i61: flag ==> i == 0;\nloop invariant i62: !(flag ==> i%2 == 0) ==> i%2 == 1;\nloop invariant i63: flag ==> i%2 == 0;\nloop invariant i64: flag ==> j%2 == 1;\nloop invariant i65: !(flag ==> i%2 == 0) ==> j%2 == 0;\nloop invariant i66: !(flag ==> i%2 == 0) ==> j%2 == 1;\nloop invariant i67: flag ==> j%2 == 0;\nloop invariant i68: !flag ==> j%2 == 1;\nloop invariant i69: a, b, i, j ==> a >= (j - i) * (j - i + 1) / 2;\nloop invariant i70: a, b, i, j ==> b >= (i - j) * (i - j + 1) / 2;\nloop invariant i71: a, b, i, j ==> a - b >= (j - i) * (j - i + 1) / 2;\nloop invariant i72: a, b, i, j ==> b - a >= (i - j) * (i - j + 1) / 2;\nloop invariant i73: a, b, i, j ==> a - b <= (j - i) * (j - i + 1) / 2;\nloop invariant i74: a, b, i, j ==> b - a <= (i - j) * (i - j + 1) / 2;\nloop invariant i75: a, b, i, j ==> a - b ==> (j - i) * (j - i + 1) / 2;\nloop invariant i76: a, b, i, j ==> b - a ==> (i - j) * (i - j + 1) / 2;\nloop invariant i77: 0 <= i <= 1;\nloop invariant i78: 1 <= j;\nloop invariant i79: i == (j - 1) \\* (j - 2) / 2;\nloop invariant i80: i == (j - 2) \\* (j - 1) / 2;\nloop invariant i81: a == b && i == 1 && j == 1;\nloop invariant i82: a == b && a >= 0 && b >= 0 && i >= 1 && j >= 1 && i <= 2 * j;\nloop invariant i83: a == b && a >= 0 && b >= 0 && i >= 1 && j >= 1 && i <= 2 * j && i == j && j == 1;\nloop invariant i84: a == b && a >= 0 && b >= 0 && i >= 1 && j >= 1 && i <= 2 * j && i == j && j == 1 && i == 0;\nloop invariant i85: a == b && a >= 0 && b >= 0 && i >= 1 && j >= 1 && i <= 2 * j && i == j && j == 1 && i == 0 && a == 0;\nloop invariant i86: a == b && a >= 0 && b >= 0 && i >= 1 && j >= 1 && i <= 2 * j && i == j && j == 1 && i == 0 && a == 0 && i == 1;\nloop invariant i87: a == b && a >= 0 && b >= 0 && i >= 1 && j >= 1 && i <= 2 * j && i == j && j == 1 && i == 0 && a == 0 && i == 1 && j == 1;\nloop invariant i88: a == b && a >= 0 && b >= 0 && i >= 1 && j >= 1 && i <= 2 * j && i == j && j == 1 && i == 0 && a == 0 && i == 1 && j == 1 && i == j;\nloop invariant i89: a == b && a >= 0 && b >= 0 && i >= 1 && j >= 1 && i <= 2 * j && i == j && j == 1 && i == 0 && a == 0 && i == 1 && j == 1 && i == j && j == 1;\nloop invariant i90: a == b && a >= 0 && b >= 0 && i >= 1 && j >= 1 && i <= 2 * j && i == j && j == 1 && i == 0 && a == 0 && i == 1 && j == 1 && i == j && j == 1 && a == b;\nloop invariant i91: a == b && a >= 0 && b >= 0 && i >= 1 && j >= 1 && i <= 2 * j && i == j && j == 1 && i == 0 && a == 0 && i == 1 && j == 1 && i == j && j == 1 && a == b && a == 0;\nloop invariant i92: a == b && a >= 0 && b >= 0 && i >= 1 && j >= 1 && i <= 2 * j && i == j && j == 1 && i == 0 && a == 0 && i == 1 && j == 1 && i == j && j == 1 && a == b && a == 0 && i == 1;\nloop invariant i93: a == b && a >= 0 && b >= 0 && i >= 1 && j >= 1 && i <= 2 * j && i == j && j == 1 && i == 0 && a == 0 && i == 1 && j == 1 && i == j && j == 1 && a == b && a == 0 && i == 1 && j == 1;\nloop invariant i94: a == b && a >= 0 && b >= 0 && i >= 1 && j >= 1 && i <= 2 * j && i == j && j == 1 && i == 0 && a == 0 && i == 1 && j == 1 && i == j && j == 1 && a == b && a == 0 && i == 1 && j == 1 && i == j;\nloop invariant i95: a == b && a >= 0 && b >= 0 && i >= 1 && j >= 1 && i <= 2 * j && i == j && j == 1 && i == 0 && a == 0 && i == 1 && j == 1 && i == j && j == 1 && a == b && a == 0 && i == 1 && j == 1 && i == j && j == 1;\nloop invariant i96: i >= 0 && i <= 1;\nloop invariant i97: j >= 1 && j <= 2;\nloop invariant i98: flag == 0 || flag == 1;\nloop invariant i99: a - b >= 0;\nloop invariant i100: flag == 1 ==> a == b;\nloop invariant i101: 0 <= a <= i * (i - 1) / 2;\nloop invariant i102: 0 <= b <= (j - 1) * j / 2;\nloop invariant i103: a == b ==> i == j;\nloop invariant i104: a == b ==> flag == 1;\nloop invariant i105: a == b ==> i == 0;\nloop invariant i106: a == b ==> j == 1;\nloop invariant i107: a == b ==> flag == 0 ==> i == 1;\nloop invariant i108: 0 <= a <= INT_MAX;\nloop invariant i109: 0 <= b <= INT_MAX;\nloop invariant i110: j%2 == 1;\nloop invariant i111: i%2 == 0;\nloop invariant i112: i <= j;\nloop invariant i113: (i <= 1) ==> (a == b);\nloop invariant i114: (i > 1) ==> (a >= b);\nloop invariant i115: 0 <= a && a <= b;\nloop invariant i116: 0 <= i && i <= 2;\nloop invariant i117: 1 <= i;\nloop invariant i118: unknown_int() ==> a == b;\nloop invariant i119: 0 <= j <= 100000;\nloop invariant i120: a < b ==> j > 1;\nloop invariant i121: a > b ==> j == 1;\nloop invariant i122: a >= b - (j - i);\nloop invariant i123: j >= i;\nloop invariant i124: a >= b - (j - i - 1);\nloop invariant i125: j >= i - 1;\nloop invariant i126: a >= b - (j - i - 1) * 2;\nloop invariant i127: j >= i - 1 + 1;\nloop invariant i128: a >= b - (j - i - 1) * 2 - 1;\nloop invariant i129: j >= i - 1 + 1 - 1;\nloop invariant i130: j >= i - 1 + 1 - 1 + 1;\nloop invariant i131: j >= i - 1 + 1 - 1 + 1 - 1;\nloop invariant i132: j >= i - 1 + 1 - 1 + 1 - 1 + 1;\nloop invariant i133: j >= i - 1 + 1 - 1 + 1 - 1 + 1 - 1;\nloop invariant i134: j >= i - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1;\nloop invariant i135: j >= i - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1;\nloop invariant i136: j >= i - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1;\nloop invariant i137: j >= i - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1;\nloop invariant i138: j >= i - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1;\nloop invariant i139: j >= i - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1;\nloop invariant i140: j >= i - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1;\nloop invariant i141: j >= i - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1;\nloop invariant i142: j >= i - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1;\nloop invariant i143: j >= i - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1;\n*/\nwhile (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;\n//@ assert(a == b);\n}\n\n    }\n    return 0;\n}",
        "combined_annotation_num_solver_calls": 62,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i14: a >= 0;\nloop invariant i15: b >= 0;\n\n\nloop invariant i18: i >= 0;\n\n\nloop invariant i21: i + 1 == j * (i + 2) / 2 + a * (i + 1) / 2 ==> a >= 0;\nloop invariant i22: i + 1 == j * (i + 2) / 2 + a * (i + 1) / 2 ==> b >= 0;\nloop invariant i23: i + 1 == j * (i + 2) / 2 + a * (i + 1) / 2 ==> i >= 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i62: !(flag ==> i%2 == 0) ==> i%2 == 1;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;\n//@ assert(a == b);\n}\n\n    }\n    return 0;\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_nondet_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum01_true-unreach-call_true-termination.i.annot.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/85.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/ex2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/42.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/diamond_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/odd.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/even.c",
            "../dataset/loop_invariants/code2inv/24.c",
            "../dataset/loop_invariants/code2inv/130.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/diamond_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/overflow_safe1.c",
            "../dataset/loop_invariants/code2inv/113.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/ddlm2013_true-unreach-call.c"
        ],
        "skipped": [],
        "total": 14,
        "success_count": 2,
        "failure_count": 12,
        "success_rate": 0.14285714285714285
    }
}