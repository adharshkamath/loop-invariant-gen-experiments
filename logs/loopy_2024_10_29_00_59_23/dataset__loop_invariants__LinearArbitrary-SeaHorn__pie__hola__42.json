{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/42.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main()\n{\n  int flag = unknown1();\n  int x = 1;\n  int y = 1;\n  int a;\n  \n  if(flag)\n    a = 0;\n  else\n    a = 1;\n\n  while(unknown1()){\n    if(flag)\n    {\n      a = x+y;\n      x++;\n    }\n    else\n    {\n      a = x+y+1;\n      y++;\n    }\n    if(a%2==1)\n      y++;\n    else\n      x++;\t  \n  }\n  \n  if(flag)\n    a++;\n  {;\n//@ assert(a%2==1);\n}\n\n}",
        "success": false,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= a <= 1 and flag == 1 ==> a == 1;\nloop invariant 0 <= a <= 1 and flag == 0 ==> a == 0;\nloop invariant x >= 1 and y >= 1 and a >= 1 and flag == 1 ==> a == x + y;\nloop invariant x >= 1 and y >= 1 and a >= 1 and flag == 0 ==> a == x + y + 1;\nloop invariant x >= 1 and y >= 1 and a >= 1 and flag == 1 ==> x >= y;\nloop invariant x >= 1 and y >= 1 and a >= 1 and flag == 0 ==> x >= y + 1;\nloop invariant x >= 1 and y >= 1 and a >= 1 and flag == 1 ==> x <= a;\nloop invariant x >= 1 and y >= 1 and a >= 1 and flag == 0 ==> x <= a - 1;\nloop invariant flag == 1 ==> x >= 1 and y >= 1 and a >= 1 and x >= y and x <= a;\nloop invariant flag == 0 ==> x >= 1 and y >= 1 and a >= 1 and x >= y + 1 and x <= a - 1;\nloop invariant flag == 1 ==> x >= 1 and y >= 1 and a >= 1 and x >= y and x <= a;\nloop invariant flag == 0 ==> x >= 1 and y >= 1 and a >= 1 and x >= y + 1 and x <= a - 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
            "```\n/*@\nloop invariant x >= y;\nloop invariant flag ==> a = x+y;\nloop invariant !flag ==> a = x+y+1;\nloop invariant x >= 1;\nloop invariant y >= 1;\nloop invariant x <= (a - y);\nloop invariant y <= (a - x);\nloop invariant flag ==> a > 1;\nloop invariant !flag ==> a >= 2;\nloop invariant flag ==> x > 1;\nloop invariant !flag ==> x >= 2;\nloop invariant flag ==> y > 1;\nloop invariant !flag ==> y >= 2;\nloop invariant flag ==> a > 1;\nloop invariant !flag ==> a >= 2;\nloop invariant x = x + 1 ==> a = x + y;\nloop invariant x = x + 1 ==> y = y + 1;\nloop invariant x = x + 1 ==> a = x + y + 1;\nloop invariant x = x + 1 ==> y = y + 1;\nloop invariant y = y + 1 ==> a = x + y;\nloop invariant y = y + 1 ==> x = x + 1;\nloop invariant y = y + 1 ==> a = x + y + 1;\nloop invariant y = y + 1 ==> x = x + 1;\nloop invariant a%2==1 ==> y = y + 1;\nloop invariant a%2==0 ==> x = x + 1;\nloop invariant flag ==> x = x + 1 ==> a = x + y;\nloop invariant flag ==> x = x + 1 ==> y = y + 1;\nloop invariant flag ==> x = x + 1 ==> a = x + y + 1;\nloop invariant flag ==> x = x + 1 ==> y = y + 1;\nloop invariant flag ==> y = y + 1 ==> a = x + y;\nloop invariant flag ==> y = y + 1 ==> x = x + 1;\nloop invariant flag ==> y = y + 1 ==> a = x + y + 1;\nloop invariant flag ==> y = y + 1 ==> x = x + 1;\nloop invariant !flag ==> x = x + 1 ==> a = x + y;\nloop invariant !flag ==> x = x + 1 ==> y = y + 1;\nloop invariant !flag ==> x = x + 1 ==> a = x + y + 1;\nloop invariant !flag ==> x = x + 1 ==> y = y + 1;\nloop invariant !flag ==> y = y + 1 ==> a = x + y;\nloop invariant !flag ==> y = y + 1 ==> x = x + 1;\nloop invariant !flag ==> y = y + 1 ==> a = x + y + 1;\nloop invariant !flag ==> y = y + 1 ==> x = x + 1;\nloop invariant flag ==> x = x + 1 ==> a = x + y;\nloop invariant flag ==> x = x + 1 ==> y = y + 1;\nloop invariant flag ==> x = x + 1 ==> a = x + y + 1;\nloop invariant flag ==> x = x + 1 ==> y = y + 1;\nloop invariant flag ==> y = y + 1 ==> a = x + y;\nloop invariant flag ==> y = y + 1 ==> x = x + 1;\nloop invariant flag ==> y = y + 1 ==> a = x + y + 1;\nloop invariant flag ==> y = y + 1 ==> x = x + 1;\nloop invariant !flag ==> x = x + 1 ==> a = x + y;\nloop invariant !flag ==> x = x + 1 ==> y = y + 1;\nloop invariant !flag ==> x = x + 1 ==> a = x + y + 1;\nloop invariant !flag ==> x = x + 1 ==> y = y + 1;\nloop invariant !flag ==> y = y + 1 ==> a = x + y;\nloop invariant !flag ==> y = y + 1 ==> x = x + 1;\nloop invariant !flag ==> y = y + 1 ==> a = x + y + 1;\nloop invariant !flag ==> y = y + 1 ==> x = x + 1;\nloop invariant flag ==> x = x + 1 ==> a = x + y;\nloop invariant flag ==> x = x + 1 ==> y = y + 1;\nloop invariant flag ==> x = x + 1 ==> a = x + y + 1;\nloop invariant flag ==> x = x + 1 ==> y = y + 1;\nloop invariant flag ==> y = y + 1 ==> a = x + y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= unknown2();\nloop invariant 1 <= y <= unknown2();\nloop invariant a >= 1;\nloop invariant a <= unknown2();\nloop invariant a%2==1 ==> x-a%2==1;\nloop invariant a%2==0 ==> x-a%2==0;\nloop invariant a%2==1 ==> y-a%2==2;\nloop invariant a%2==0 ==> y-a%2==1;\nloop invariant unknown1() ==> x==y;\nloop invariant !unknown1() ==> x!=y;\nloop invariant unknown1() ==> x<=a;\nloop invariant !unknown1() ==> x>=a;\nloop invariant unknown1() ==> y<=a;\nloop invariant !unknown1() ==> y>=a;\nloop invariant unknown1() ==> flag==1;\nloop invariant !unknown1() ==> flag==0;\nloop invariant unknown1() ==> a%2==1;\nloop invariant !unknown1() ==> a%2==0;\nloop invariant unknown1() ==> x%2==0;\nloop invariant !unknown1() ==> x%2==1;\nloop invariant unknown1() ==> y%2==1;\nloop invariant !unknown1() ==> y%2==0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= flag <= 1;\nloop invariant 0 <= x <= unknown1();\nloop invariant 0 <= y <= unknown1();\nloop invariant 1 <= a <= unknown1();\nloop invariant if flag then x+y < unknown1() else x+y+1 < unknown1();\nloop invariant if flag then x+y < unknown1() else x+y+1 < unknown1();\nloop invariant if a%2==1 then y < unknown1() else x < unknown1();\nloop invariant if a%2==1 then y < unknown1() else x < unknown1();\nloop invariant if flag then x+y < unknown1() else x+y+1 < unknown1();\nloop invariant if flag then x+y < unknown1() else x+y+1 < unknown1();\nloop invariant if a%2==1 then y < unknown1() else x < unknown1();\nloop invariant if a%2==1 then y < unknown1() else x < unknown1();\nloop invariant if flag then x+y < unknown1() else x+y+1 < unknown1();\nloop invariant if flag then x+y < unknown1() else x+y+1 < unknown1();\nloop invariant if a%2==1 then y < unknown1() else x < unknown1();\nloop invariant if a%2==1 then y < unknown1() else x < unknown1();\nloop invariant if flag then x+y < unknown1() else x+y+1 < unknown1();\nloop invariant if flag then x+y < unknown1() else x+y+1 < unknown1();\nloop invariant if a%2==1 then y < unknown1() else x < unknown1();\nloop invariant if a%2==1 then y < unknown1() else x < unknown1();\nloop invariant if flag then x+y < unknown1() else x+y+1 < unknown1();\nloop invariant if flag then x+y < unknown1() else x+y+1 < unknown1();\nloop invariant if a%2==1 then y < unknown1() else x < unknown1();\nloop invariant if a%2==1 then y < unknown1() else x < unknown1();\nloop invariant if flag then x+y < unknown1() else x+y+1 < unknown1();\nloop invariant if flag then x+y < unknown1() else x+y+1 < unknown1();\nloop invariant if a%2==1 then y < unknown1() else x < unknown1();\nloop invariant if a%2==1 then y < unknown1() else x < unknown1();\nloop invariant if flag then x+y < unknown1() else x+y+1 < unknown1();\nloop invariant if flag then x+y < unknown1() else x+y+1 < unknown1();\nloop invariant if a%2==1 then y < unknown1() else x < unknown1();\nloop invariant if a%2==1 then y < unknown1() else x < unknown1();\nloop invariant if flag then x+y < unknown1() else x+y+1 < unknown1();\nloop invariant if flag then x+y < unknown1() else x+y+1 < unknown1();\nloop invariant if a%2==1 then y < unknown1() else x < unknown1();\nloop invariant if a%2==1 then y < unknown1() else x < unknown1();\nloop invariant if flag then x+y < unknown1() else x+y+1 < unknown1();\nloop invariant if flag then x+y < unknown1() else x+y+1 < unknown1();\nloop invariant if a%2==1 then y < unknown1() else x < unknown1();\nloop invariant if a%2==1 then y < unknown1() else x < unknown1();\nloop invariant if flag then x+y < unknown1() else x+y+1 < unknown1();\nloop invariant if flag then x+y < unknown1() else x+y+1 < unknown1();\nloop invariant if a%2==1 then y < unknown1() else x < unknown1();\nloop invariant if a%2==1 then y < unknown1() else x < unknown1();\nloop invariant if flag then x+y < unknown1() else x+y+1 < unknown1();\nloop invariant if flag then x+y < unknown1() else x+y+1 < unknown1();\nloop invariant if a%2==1 then y < unknown1() else x < unknown1();\nloop invariant if a%2==1 then y < unknown1() else x < unknown1();\nloop invariant if flag then x+y < unknown1() else x+y+1 < unknown1();\nloop invariant if flag then x+y < unknown1() else x+y+1 < unknown1();\nloop invariant if a%2==1 then y < unknown1() else x < unknown1();\nloop invariant if a%2==1 then y < unknown1() else x < unknown1();\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 1 + y;\nloop invariant 0 <= y <= 1 + x;\nloop invariant a >= x + y;\nloop invariant a <= x + y + 1;\nloop invariant (a + 1) % 2 == 0 ==> x < y;\nloop invariant (a + 1) % 2 == 0 ==> a <= x + y;\nloop invariant (a + 1) % 2 == 0 ==> a >= x + y + 1;\nloop invariant (a + 1) % 2 == 0 ==> y < x;\nloop invariant (a + 1) % 2 == 0 ==> y == x + 1;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= 2;\nloop invariant 1 <= y <= 2;\nloop invariant 1 <= a <= 3;\nloop invariant x <= y;\nloop invariant x == y ==> a == x + y;\nloop invariant x != y ==> a == x + y + 1;\nloop invariant a % 2 == 1 ==> x == y;\nloop invariant a % 2 == 0 ==> x != y;\nloop invariant flag ==> a == x + y + 1;\nloop invariant !flag ==> a == x + y;\nloop invariant flag ==> x <= y;\nloop invariant !flag ==> x < y;\nloop invariant y >= 1;\nloop invariant y <= 2;\nloop invariant a >= 1;\nloop invariant a <= 3;\nloop invariant a % 2 == 1 ==> y == x;\nloop invariant a % 2 == 0 ==> y == x + 1;\nloop invariant flag ==> x == y;\nloop invariant !flag ==> x < y;\nloop invariant y >= 1;\nloop invariant y <= 2;\nloop invariant a >= 1;\nloop invariant a <= 3;\nloop invariant a % 2 == 1 ==> y == x;\nloop invariant a % 2 == 0 ==> y == x + 1;\nloop invariant flag ==> x == y;\nloop invariant !flag ==> x < y;\nloop invariant y >= 1;\nloop invariant y <= 2;\nloop invariant a >= 1;\nloop invariant a <= 3;\nloop invariant a % 2 == 1 ==> y == x;\nloop invariant a % 2 == 0 ==> y == x + 1;\nloop invariant flag ==> x == y;\nloop invariant !flag ==> x < y;\nloop invariant y >= 1;\nloop invariant y <= 2;\nloop invariant a >= 1;\nloop invariant a <= 3;\nloop invariant a % 2 == 1 ==> y == x;\nloop invariant a % 2 == 0 ==> y == x + 1;\nloop invariant flag ==> x == y;\nloop invariant !flag ==> x < y;\nloop invariant y >= 1;\nloop invariant y <= 2;\nloop invariant a >= 1;\nloop invariant a <= 3;\nloop invariant a % 2 == 1 ==> y == x;\nloop invariant a % 2 == 0 ==> y == x + 1;\nloop invariant flag ==> x == y;\nloop invariant !flag ==> x < y;\nloop invariant y >= 1;\nloop invariant y <= 2;\nloop invariant a >= 1;\nloop invariant a <= 3;\nloop invariant a % 2 == 1 ==> y == x;\nloop invariant a % 2 == 0 ==> y == x + 1;\nloop invariant flag ==> x == y;\nloop invariant !flag ==> x < y;\nloop invariant y >= 1;\nloop invariant y <= 2;\nloop invariant a >= 1;\nloop invariant a <= 3;\nloop invariant a % 2 == 1 ==> y == x;\nloop invariant a % 2 == 0 ==> y == x + 1;\nloop invariant flag ==> x == y;\nloop invariant !flag ==> x < y;\nloop invariant y >= 1;\nloop invariant y <= 2;\nloop invariant a >= 1;\nloop invariant a <= 3;\nloop invariant a % 2 == 1 ==> y == x;\nloop invariant a % 2 == 0 ==> y == x + 1;\nloop invariant flag ==> x == y;\nloop invariant !flag ==> x < y;\nloop invariant y >= 1;\nloop invariant y <= 2;\nloop invariant a >= 1;\nloop invariant a <= 3;\nloop invariant a % 2 == 1 ==> y == x;\nloop invariant a % 2 == 0 ==> y == x + 1;\nloop invariant flag ==> x == y;\nloop invariant !flag ==> x < y;\nloop invariant y >= 1;\nloop invariant y <= 2;\nloop invariant a >= 1;\nloop invariant a <= 3;\nloop invariant a % 2 == 1 ==> y == x;\nloop invariant a % 2 == 0 ==> y == x + 1;\nloop invariant flag ==> x == y;\nloop invariant !flag ==> x < y;\nloop invariant y >= 1;\nloop invariant y <= 2;\nloop invariant a >= 1;\nloop invariant a <= 3;\nloop invariant a % 2 == 1 ==> y == x;\nloop invariant a % 2 == 0 ==> y == x + 1;\nloop invariant flag ==> x == y;\nloop invariant !flag ==> x < y;\nloop invariant y >= 1;\nloop invariant y <= 2;\nloop invariant a >= 1;\nloop invariant a <= 3;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 100000;\nloop invariant 0 <= y <= 100000;\nloop invariant 0 <= a <= 100000;\nloop invariant x >= y;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant 1 <= y <= 100000;\nloop invariant a >= x;\nloop invariant a >= y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant x >= 1;\nloop invariant y >= 1;\nloop invariant x + y >= 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= y <= a; loop invariant a % 2 == 1; loop invariant flag ==> x == 1; loop invariant !flag ==> y == 1; loop invariant flag ==> a == x + y; loop invariant !flag ==> a == x + y + 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 100000;\nloop invariant 0 <= y <= 100000;\nloop invariant x + y <= 100000;\nloop invariant a >= 0;\nloop invariant a <= 1000000;\nloop invariant a % 2 == 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= flag <= 1;\nloop invariant 1 <= x <= 2;\nloop invariant 1 <= y <= 2;\nloop invariant 1 <= a <= 3;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 11,
                "annotations": "```\n/*@\nloop invariant 0 <= a <= 1 and flag == 1 ==> a == 1;\nloop invariant 0 <= a <= 1 and flag == 0 ==> a == 0;\nloop invariant x >= 1 and y >= 1 and a >= 1 and flag == 1 ==> a == x + y;\nloop invariant x >= 1 and y >= 1 and a >= 1 and flag == 0 ==> a == x + y + 1;\nloop invariant x >= 1 and y >= 1 and a >= 1 and flag == 1 ==> x >= y;\nloop invariant x >= 1 and y >= 1 and a >= 1 and flag == 0 ==> x >= y + 1;\nloop invariant x >= 1 and y >= 1 and a >= 1 and flag == 1 ==> x <= a;\nloop invariant x >= 1 and y >= 1 and a >= 1 and flag == 0 ==> x <= a - 1;\nloop invariant flag == 1 ==> x >= 1 and y >= 1 and a >= 1 and x >= y and x <= a;\nloop invariant flag == 0 ==> x >= 1 and y >= 1 and a >= 1 and x >= y + 1 and x <= a - 1;\nloop invariant flag == 1 ==> x >= 1 and y >= 1 and a >= 1 and x >= y and x <= a;\nloop invariant flag == 0 ==> x >= 1 and y >= 1 and a >= 1 and x >= y + 1 and x <= a - 1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 23: unexpected token 'and'",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main()\n{\n  int flag = unknown1();\n  int x = 1;\n  int y = 1;\n  int a;\n  \n  if(flag)\n    a = 0;\n  else\n    a = 1;\n\n  /*@\n\n\n\n\n\n\n\n\n\n\n*/\nwhile(unknown1()){\n    if(flag)\n    {\n      a = x+y;\n      x++;\n    }\n    else\n    {\n      a = x+y+1;\n      y++;\n    }\n    if(a%2==1)\n      y++;\n    else\n      x++;\t  \n  }\n  \n  if(flag)\n    a++;\n  {;\n//@ assert(a%2==1);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= y <= 100000 is partially proven to be inductive.\nloop invariant x >= (1 + (y - 1) * y / 2) is established but not preserved.\nAssertion a % 2 == 1: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main()\n{\n  int flag = unknown1();\n  int x = 1;\n  int y = 1;\n  int a;\n  \n  if(flag)\n    a = 0;\n  else\n    a = 1;\n\n  /*@\n\n\n*/\nwhile(unknown1()){\n    if(flag)\n    {\n      a = x+y;\n      x++;\n    }\n    else\n    {\n      a = x+y+1;\n      y++;\n    }\n    if(a%2==1)\n      y++;\n    else\n      x++;\t  \n  }\n  \n  if(flag)\n    a++;\n  {;\n//@ assert(a%2==1);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 30,
                "annotations": "```\n/*@\nloop invariant x >= y;\nloop invariant flag ==> a = x+y;\nloop invariant !flag ==> a = x+y+1;\nloop invariant x >= 1;\nloop invariant y >= 1;\nloop invariant x <= (a - y);\nloop invariant y <= (a - x);\nloop invariant flag ==> a > 1;\nloop invariant !flag ==> a >= 2;\nloop invariant flag ==> x > 1;\nloop invariant !flag ==> x >= 2;\nloop invariant flag ==> y > 1;\nloop invariant !flag ==> y >= 2;\nloop invariant flag ==> a > 1;\nloop invariant !flag ==> a >= 2;\nloop invariant x = x + 1 ==> a = x + y;\nloop invariant x = x + 1 ==> y = y + 1;\nloop invariant x = x + 1 ==> a = x + y + 1;\nloop invariant x = x + 1 ==> y = y + 1;\nloop invariant y = y + 1 ==> a = x + y;\nloop invariant y = y + 1 ==> x = x + 1;\nloop invariant y = y + 1 ==> a = x + y + 1;\nloop invariant y = y + 1 ==> x = x + 1;\nloop invariant a%2==1 ==> y = y + 1;\nloop invariant a%2==0 ==> x = x + 1;\nloop invariant flag ==> x = x + 1 ==> a = x + y;\nloop invariant flag ==> x = x + 1 ==> y = y + 1;\nloop invariant flag ==> x = x + 1 ==> a = x + y + 1;\nloop invariant flag ==> x = x + 1 ==> y = y + 1;\nloop invariant flag ==> y = y + 1 ==> a = x + y;\nloop invariant flag ==> y = y + 1 ==> x = x + 1;\nloop invariant flag ==> y = y + 1 ==> a = x + y + 1;\nloop invariant flag ==> y = y + 1 ==> x = x + 1;\nloop invariant !flag ==> x = x + 1 ==> a = x + y;\nloop invariant !flag ==> x = x + 1 ==> y = y + 1;\nloop invariant !flag ==> x = x + 1 ==> a = x + y + 1;\nloop invariant !flag ==> x = x + 1 ==> y = y + 1;\nloop invariant !flag ==> y = y + 1 ==> a = x + y;\nloop invariant !flag ==> y = y + 1 ==> x = x + 1;\nloop invariant !flag ==> y = y + 1 ==> a = x + y + 1;\nloop invariant !flag ==> y = y + 1 ==> x = x + 1;\nloop invariant flag ==> x = x + 1 ==> a = x + y;\nloop invariant flag ==> x = x + 1 ==> y = y + 1;\nloop invariant flag ==> x = x + 1 ==> a = x + y + 1;\nloop invariant flag ==> x = x + 1 ==> y = y + 1;\nloop invariant flag ==> y = y + 1 ==> a = x + y;\nloop invariant flag ==> y = y + 1 ==> x = x + 1;\nloop invariant flag ==> y = y + 1 ==> a = x + y + 1;\nloop invariant flag ==> y = y + 1 ==> x = x + 1;\nloop invariant !flag ==> x = x + 1 ==> a = x + y;\nloop invariant !flag ==> x = x + 1 ==> y = y + 1;\nloop invariant !flag ==> x = x + 1 ==> a = x + y + 1;\nloop invariant !flag ==> x = x + 1 ==> y = y + 1;\nloop invariant !flag ==> y = y + 1 ==> a = x + y;\nloop invariant !flag ==> y = y + 1 ==> x = x + 1;\nloop invariant !flag ==> y = y + 1 ==> a = x + y + 1;\nloop invariant !flag ==> y = y + 1 ==> x = x + 1;\nloop invariant flag ==> x = x + 1 ==> a = x + y;\nloop invariant flag ==> x = x + 1 ==> y = y + 1;\nloop invariant flag ==> x = x + 1 ==> a = x + y + 1;\nloop invariant flag ==> x = x + 1 ==> y = y + 1;\nloop invariant flag ==> y = y + 1 ==> a = x + y;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 24: Assignment operators not allowed in annotations.",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main()\n{\n  int flag = unknown1();\n  int x = 1;\n  int y = 1;\n  int a;\n  \n  if(flag)\n    a = 0;\n  else\n    a = 1;\n\n  /*@\n\n\n\nloop invariant i4: x >= 1;\nloop invariant i5: y >= 1;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile(unknown1()){\n    if(flag)\n    {\n      a = x+y;\n      x++;\n    }\n    else\n    {\n      a = x+y+1;\n      y++;\n    }\n    if(a%2==1)\n      y++;\n    else\n      x++;\t  \n  }\n  \n  if(flag)\n    a++;\n  {;\n//@ assert(a%2==1);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 21,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= unknown2();\nloop invariant 1 <= y <= unknown2();\nloop invariant a >= 1;\nloop invariant a <= unknown2();\nloop invariant a%2==1 ==> x-a%2==1;\nloop invariant a%2==0 ==> x-a%2==0;\nloop invariant a%2==1 ==> y-a%2==2;\nloop invariant a%2==0 ==> y-a%2==1;\nloop invariant unknown1() ==> x==y;\nloop invariant !unknown1() ==> x!=y;\nloop invariant unknown1() ==> x<=a;\nloop invariant !unknown1() ==> x>=a;\nloop invariant unknown1() ==> y<=a;\nloop invariant !unknown1() ==> y>=a;\nloop invariant unknown1() ==> flag==1;\nloop invariant !unknown1() ==> flag==0;\nloop invariant unknown1() ==> a%2==1;\nloop invariant !unknown1() ==> a%2==0;\nloop invariant unknown1() ==> x%2==0;\nloop invariant !unknown1() ==> x%2==1;\nloop invariant unknown1() ==> y%2==1;\nloop invariant !unknown1() ==> y%2==0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 23: unexpected token ')'",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main()\n{\n  int flag = unknown1();\n  int x = 1;\n  int y = 1;\n  int a;\n  \n  if(flag)\n    a = 0;\n  else\n    a = 1;\n\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile(unknown1()){\n    if(flag)\n    {\n      a = x+y;\n      x++;\n    }\n    else\n    {\n      a = x+y+1;\n      y++;\n    }\n    if(a%2==1)\n      y++;\n    else\n      x++;\t  \n  }\n  \n  if(flag)\n    a++;\n  {;\n//@ assert(a%2==1);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant 0 <= flag <= 1;\nloop invariant 0 <= x <= unknown1();\nloop invariant 0 <= y <= unknown1();\nloop invariant 1 <= a <= unknown1();\nloop invariant if flag then x+y < unknown1() else x+y+1 < unknown1();\nloop invariant if flag then x+y < unknown1() else x+y+1 < unknown1();\nloop invariant if a%2==1 then y < unknown1() else x < unknown1();\nloop invariant if a%2==1 then y < unknown1() else x < unknown1();\nloop invariant if flag then x+y < unknown1() else x+y+1 < unknown1();\nloop invariant if flag then x+y < unknown1() else x+y+1 < unknown1();\nloop invariant if a%2==1 then y < unknown1() else x < unknown1();\nloop invariant if a%2==1 then y < unknown1() else x < unknown1();\nloop invariant if flag then x+y < unknown1() else x+y+1 < unknown1();\nloop invariant if flag then x+y < unknown1() else x+y+1 < unknown1();\nloop invariant if a%2==1 then y < unknown1() else x < unknown1();\nloop invariant if a%2==1 then y < unknown1() else x < unknown1();\nloop invariant if flag then x+y < unknown1() else x+y+1 < unknown1();\nloop invariant if flag then x+y < unknown1() else x+y+1 < unknown1();\nloop invariant if a%2==1 then y < unknown1() else x < unknown1();\nloop invariant if a%2==1 then y < unknown1() else x < unknown1();\nloop invariant if flag then x+y < unknown1() else x+y+1 < unknown1();\nloop invariant if flag then x+y < unknown1() else x+y+1 < unknown1();\nloop invariant if a%2==1 then y < unknown1() else x < unknown1();\nloop invariant if a%2==1 then y < unknown1() else x < unknown1();\nloop invariant if flag then x+y < unknown1() else x+y+1 < unknown1();\nloop invariant if flag then x+y < unknown1() else x+y+1 < unknown1();\nloop invariant if a%2==1 then y < unknown1() else x < unknown1();\nloop invariant if a%2==1 then y < unknown1() else x < unknown1();\nloop invariant if flag then x+y < unknown1() else x+y+1 < unknown1();\nloop invariant if flag then x+y < unknown1() else x+y+1 < unknown1();\nloop invariant if a%2==1 then y < unknown1() else x < unknown1();\nloop invariant if a%2==1 then y < unknown1() else x < unknown1();\nloop invariant if flag then x+y < unknown1() else x+y+1 < unknown1();\nloop invariant if flag then x+y < unknown1() else x+y+1 < unknown1();\nloop invariant if a%2==1 then y < unknown1() else x < unknown1();\nloop invariant if a%2==1 then y < unknown1() else x < unknown1();\nloop invariant if flag then x+y < unknown1() else x+y+1 < unknown1();\nloop invariant if flag then x+y < unknown1() else x+y+1 < unknown1();\nloop invariant if a%2==1 then y < unknown1() else x < unknown1();\nloop invariant if a%2==1 then y < unknown1() else x < unknown1();\nloop invariant if flag then x+y < unknown1() else x+y+1 < unknown1();\nloop invariant if flag then x+y < unknown1() else x+y+1 < unknown1();\nloop invariant if a%2==1 then y < unknown1() else x < unknown1();\nloop invariant if a%2==1 then y < unknown1() else x < unknown1();\nloop invariant if flag then x+y < unknown1() else x+y+1 < unknown1();\nloop invariant if flag then x+y < unknown1() else x+y+1 < unknown1();\nloop invariant if a%2==1 then y < unknown1() else x < unknown1();\nloop invariant if a%2==1 then y < unknown1() else x < unknown1();\nloop invariant if flag then x+y < unknown1() else x+y+1 < unknown1();\nloop invariant if flag then x+y < unknown1() else x+y+1 < unknown1();\nloop invariant if a%2==1 then y < unknown1() else x < unknown1();\nloop invariant if a%2==1 then y < unknown1() else x < unknown1();\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 24: unexpected token ')'",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main()\n{\n  int flag = unknown1();\n  int x = 1;\n  int y = 1;\n  int a;\n  \n  if(flag)\n    a = 0;\n  else\n    a = 1;\n\n  /*@\n\n\n\n\n\n\n*/\nwhile(unknown1()){\n    if(flag)\n    {\n      a = x+y;\n      x++;\n    }\n    else\n    {\n      a = x+y+1;\n      y++;\n    }\n    if(a%2==1)\n      y++;\n    else\n      x++;\t  \n  }\n  \n  if(flag)\n    a++;\n  {;\n//@ assert(a%2==1);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 1 + y;\nloop invariant 0 <= y <= 1 + x;\nloop invariant a >= x + y;\nloop invariant a <= x + y + 1;\nloop invariant (a + 1) % 2 == 0 ==> x < y;\nloop invariant (a + 1) % 2 == 0 ==> a <= x + y;\nloop invariant (a + 1) % 2 == 0 ==> a >= x + y + 1;\nloop invariant (a + 1) % 2 == 0 ==> y < x;\nloop invariant (a + 1) % 2 == 0 ==> y == x + 1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 1 + y is partially proven to be inductive.\nloop invariant 0 <= y <= 1 + x is partially proven to be inductive.\nloop invariant a >= x + y is preserved but not established.\nloop invariant a <= x + y + 1 is partially proven to be inductive.\nloop invariant (a + 1) % 2 == 0 ==> x < y is partially proven to be inductive.\nloop invariant (a + 1) % 2 == 0 ==> a <= x + y is partially proven to be inductive.\nloop invariant (a + 1) % 2 == 0 ==> a >= x + y + 1 is partially proven to be inductive.\nloop invariant (a + 1) % 2 == 0 ==> y < x is partially proven to be inductive.\nloop invariant (a + 1) % 2 == 0 ==> y == x + 1 is partially proven to be inductive.\nAssertion a % 2 == 1: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main()\n{\n  int flag = unknown1();\n  int x = 1;\n  int y = 1;\n  int a;\n  \n  if(flag)\n    a = 0;\n  else\n    a = 1;\n\n  /*@\n\n\n\nloop invariant i4: a <= x + y + 1;\n\nloop invariant i6: (a + 1) % 2 == 0 ==> a <= x + y;\n\n\n\n*/\nwhile(unknown1()){\n    if(flag)\n    {\n      a = x+y;\n      x++;\n    }\n    else\n    {\n      a = x+y+1;\n      y++;\n    }\n    if(a%2==1)\n      y++;\n    else\n      x++;\t  \n  }\n  \n  if(flag)\n    a++;\n  {;\n//@ assert(a%2==1);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 9,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= 2;\nloop invariant 1 <= y <= 2;\nloop invariant 1 <= a <= 3;\nloop invariant x <= y;\nloop invariant x == y ==> a == x + y;\nloop invariant x != y ==> a == x + y + 1;\nloop invariant a % 2 == 1 ==> x == y;\nloop invariant a % 2 == 0 ==> x != y;\nloop invariant flag ==> a == x + y + 1;\nloop invariant !flag ==> a == x + y;\nloop invariant flag ==> x <= y;\nloop invariant !flag ==> x < y;\nloop invariant y >= 1;\nloop invariant y <= 2;\nloop invariant a >= 1;\nloop invariant a <= 3;\nloop invariant a % 2 == 1 ==> y == x;\nloop invariant a % 2 == 0 ==> y == x + 1;\nloop invariant flag ==> x == y;\nloop invariant !flag ==> x < y;\nloop invariant y >= 1;\nloop invariant y <= 2;\nloop invariant a >= 1;\nloop invariant a <= 3;\nloop invariant a % 2 == 1 ==> y == x;\nloop invariant a % 2 == 0 ==> y == x + 1;\nloop invariant flag ==> x == y;\nloop invariant !flag ==> x < y;\nloop invariant y >= 1;\nloop invariant y <= 2;\nloop invariant a >= 1;\nloop invariant a <= 3;\nloop invariant a % 2 == 1 ==> y == x;\nloop invariant a % 2 == 0 ==> y == x + 1;\nloop invariant flag ==> x == y;\nloop invariant !flag ==> x < y;\nloop invariant y >= 1;\nloop invariant y <= 2;\nloop invariant a >= 1;\nloop invariant a <= 3;\nloop invariant a % 2 == 1 ==> y == x;\nloop invariant a % 2 == 0 ==> y == x + 1;\nloop invariant flag ==> x == y;\nloop invariant !flag ==> x < y;\nloop invariant y >= 1;\nloop invariant y <= 2;\nloop invariant a >= 1;\nloop invariant a <= 3;\nloop invariant a % 2 == 1 ==> y == x;\nloop invariant a % 2 == 0 ==> y == x + 1;\nloop invariant flag ==> x == y;\nloop invariant !flag ==> x < y;\nloop invariant y >= 1;\nloop invariant y <= 2;\nloop invariant a >= 1;\nloop invariant a <= 3;\nloop invariant a % 2 == 1 ==> y == x;\nloop invariant a % 2 == 0 ==> y == x + 1;\nloop invariant flag ==> x == y;\nloop invariant !flag ==> x < y;\nloop invariant y >= 1;\nloop invariant y <= 2;\nloop invariant a >= 1;\nloop invariant a <= 3;\nloop invariant a % 2 == 1 ==> y == x;\nloop invariant a % 2 == 0 ==> y == x + 1;\nloop invariant flag ==> x == y;\nloop invariant !flag ==> x < y;\nloop invariant y >= 1;\nloop invariant y <= 2;\nloop invariant a >= 1;\nloop invariant a <= 3;\nloop invariant a % 2 == 1 ==> y == x;\nloop invariant a % 2 == 0 ==> y == x + 1;\nloop invariant flag ==> x == y;\nloop invariant !flag ==> x < y;\nloop invariant y >= 1;\nloop invariant y <= 2;\nloop invariant a >= 1;\nloop invariant a <= 3;\nloop invariant a % 2 == 1 ==> y == x;\nloop invariant a % 2 == 0 ==> y == x + 1;\nloop invariant flag ==> x == y;\nloop invariant !flag ==> x < y;\nloop invariant y >= 1;\nloop invariant y <= 2;\nloop invariant a >= 1;\nloop invariant a <= 3;\nloop invariant a % 2 == 1 ==> y == x;\nloop invariant a % 2 == 0 ==> y == x + 1;\nloop invariant flag ==> x == y;\nloop invariant !flag ==> x < y;\nloop invariant y >= 1;\nloop invariant y <= 2;\nloop invariant a >= 1;\nloop invariant a <= 3;\nloop invariant a % 2 == 1 ==> y == x;\nloop invariant a % 2 == 0 ==> y == x + 1;\nloop invariant flag ==> x == y;\nloop invariant !flag ==> x < y;\nloop invariant y >= 1;\nloop invariant y <= 2;\nloop invariant a >= 1;\nloop invariant a <= 3;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= x <= 2 is partially proven to be inductive.\nloop invariant 1 <= y <= 2 is partially proven to be inductive.\nloop invariant 1 <= a <= 3 is preserved but not established.\nloop invariant x <= y is partially proven to be inductive.\nloop invariant x == y ==> a == x + y is preserved but not established.\nloop invariant x != y ==> a == x + y + 1 is partially proven to be inductive.\nloop invariant a % 2 == 1 ==> x == y is partially proven to be inductive.\nloop invariant a % 2 == 0 ==> x != y is partially proven to be inductive.\nloop invariant flag ==> a == x + y + 1 is partially proven to be inductive.\nloop invariant !flag ==> a == x + y is partially proven to be inductive.\nloop invariant flag ==> x <= y is partially proven to be inductive.\nloop invariant !flag ==> x < y is partially proven to be inductive.\nloop invariant y >= 1 is partially proven to be inductive.\nloop invariant y <= 2 is partially proven to be inductive.\nloop invariant a >= 1 is partially proven to be inductive.\nloop invariant a <= 3 is partially proven to be inductive.\nloop invariant a % 2 == 1 ==> y == x is partially proven to be inductive.\nloop invariant a % 2 == 0 ==> y == x + 1 is partially proven to be inductive.\nloop invariant flag ==> x == y is partially proven to be inductive.\nAssertion a % 2 == 1: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main()\n{\n  int flag = unknown1();\n  int x = 1;\n  int y = 1;\n  int a;\n  \n  if(flag)\n    a = 0;\n  else\n    a = 1;\n\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i13: y >= 1;\n\n\n\n\n\n\n*/\nwhile(unknown1()){\n    if(flag)\n    {\n      a = x+y;\n      x++;\n    }\n    else\n    {\n      a = x+y+1;\n      y++;\n    }\n    if(a%2==1)\n      y++;\n    else\n      x++;\t  \n  }\n  \n  if(flag)\n    a++;\n  {;\n//@ assert(a%2==1);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= y <= 100000 is partially proven to be inductive.\nloop invariant x >= (1 + (y - 1) * y / 2) is established but not preserved.\nAssertion a % 2 == 1: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main()\n{\n  int flag = unknown1();\n  int x = 1;\n  int y = 1;\n  int a;\n  \n  if(flag)\n    a = 0;\n  else\n    a = 1;\n\n  /*@\n\n\n*/\nwhile(unknown1()){\n    if(flag)\n    {\n      a = x+y;\n      x++;\n    }\n    else\n    {\n      a = x+y+1;\n      y++;\n    }\n    if(a%2==1)\n      y++;\n    else\n      x++;\t  \n  }\n  \n  if(flag)\n    a++;\n  {;\n//@ assert(a%2==1);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\n\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 23: unexpected token ''",
                "houdini_error": "No annotations found"
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 100000;\nloop invariant 0 <= y <= 100000;\nloop invariant 0 <= a <= 100000;\nloop invariant x >= y;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\nloop invariant x >= y + 1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 100000 is partially proven to be inductive.\nloop invariant 0 <= y <= 100000 is partially proven to be inductive.\nloop invariant 0 <= a <= 100000 is partially proven to be inductive.\nloop invariant x >= y is partially proven to be inductive.\nloop invariant x >= y + 1 is preserved but not established.\nAssertion a % 2 == 1: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main()\n{\n  int flag = unknown1();\n  int x = 1;\n  int y = 1;\n  int a;\n  \n  if(flag)\n    a = 0;\n  else\n    a = 1;\n\n  /*@\n\n\n\n\n\n*/\nwhile(unknown1()){\n    if(flag)\n    {\n      a = x+y;\n      x++;\n    }\n    else\n    {\n      a = x+y+1;\n      y++;\n    }\n    if(a%2==1)\n      y++;\n    else\n      x++;\t  \n  }\n  \n  if(flag)\n    a++;\n  {;\n//@ assert(a%2==1);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant 1 <= y <= 100000;\nloop invariant a >= x;\nloop invariant a >= y;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= y is established but not preserved.\nloop invariant 1 <= y <= 100000 is established but not preserved.\nloop invariant a >= x is preserved but not established.\nloop invariant a >= y is established but not preserved.\nAssertion a % 2 == 1: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main()\n{\n  int flag = unknown1();\n  int x = 1;\n  int y = 1;\n  int a;\n  \n  if(flag)\n    a = 0;\n  else\n    a = 1;\n\n  /*@\n\n\n\n\n*/\nwhile(unknown1()){\n    if(flag)\n    {\n      a = x+y;\n      x++;\n    }\n    else\n    {\n      a = x+y+1;\n      y++;\n    }\n    if(a%2==1)\n      y++;\n    else\n      x++;\t  \n  }\n  \n  if(flag)\n    a++;\n  {;\n//@ assert(a%2==1);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant x >= 1;\nloop invariant y >= 1;\nloop invariant x + y >= 2;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= y is established but not preserved.\nloop invariant x >= 1 is partially proven to be inductive.\nloop invariant y >= 1 is partially proven to be inductive.\nloop invariant x + y >= 2 is partially proven to be inductive.\nAssertion a % 2 == 1: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main()\n{\n  int flag = unknown1();\n  int x = 1;\n  int y = 1;\n  int a;\n  \n  if(flag)\n    a = 0;\n  else\n    a = 1;\n\n  /*@\n\nloop invariant i2: x >= 1;\nloop invariant i3: y >= 1;\nloop invariant i4: x + y >= 2;\n*/\nwhile(unknown1()){\n    if(flag)\n    {\n      a = x+y;\n      x++;\n    }\n    else\n    {\n      a = x+y+1;\n      y++;\n    }\n    if(a%2==1)\n      y++;\n    else\n      x++;\t  \n  }\n  \n  if(flag)\n    a++;\n  {;\n//@ assert(a%2==1);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= y <= a; loop invariant a % 2 == 1; loop invariant flag ==> x == 1; loop invariant !flag ==> y == 1; loop invariant flag ==> a == x + y; loop invariant !flag ==> a == x + y + 1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= y <= a; loop invariant a % 2 == 1; loop invariant flag ==> x == 1; loop invariant !flag ==> y == 1; loop invariant flag ==> a == x + y; loop invariant !flag ==> a == x + y + 1 is preserved but not established.\nAssertion a % 2 == 1: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main()\n{\n  int flag = unknown1();\n  int x = 1;\n  int y = 1;\n  int a;\n  \n  if(flag)\n    a = 0;\n  else\n    a = 1;\n\n  /*@\n\n*/\nwhile(unknown1()){\n    if(flag)\n    {\n      a = x+y;\n      x++;\n    }\n    else\n    {\n      a = x+y+1;\n      y++;\n    }\n    if(a%2==1)\n      y++;\n    else\n      x++;\t  \n  }\n  \n  if(flag)\n    a++;\n  {;\n//@ assert(a%2==1);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 100000;\nloop invariant 0 <= y <= 100000;\nloop invariant x + y <= 100000;\nloop invariant a >= 0;\nloop invariant a <= 1000000;\nloop invariant a % 2 == 1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 100000 is established but not preserved.\nloop invariant 0 <= y <= 100000 is established but not preserved.\nloop invariant x + y <= 100000 is established but not preserved.\nloop invariant a >= 0 is partially proven to be inductive.\nloop invariant a <= 1000000 is partially proven to be inductive.\nloop invariant a % 2 == 1 is neither established nor preserved.\nAssertion a % 2 == 1: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main()\n{\n  int flag = unknown1();\n  int x = 1;\n  int y = 1;\n  int a;\n  \n  if(flag)\n    a = 0;\n  else\n    a = 1;\n\n  /*@\n\n\n\n\n\n\n*/\nwhile(unknown1()){\n    if(flag)\n    {\n      a = x+y;\n      x++;\n    }\n    else\n    {\n      a = x+y+1;\n      y++;\n    }\n    if(a%2==1)\n      y++;\n    else\n      x++;\t  \n  }\n  \n  if(flag)\n    a++;\n  {;\n//@ assert(a%2==1);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= flag <= 1;\nloop invariant 1 <= x <= 2;\nloop invariant 1 <= y <= 2;\nloop invariant 1 <= a <= 3;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= flag <= 1 is preserved but not established.\nloop invariant 1 <= x <= 2 is established but not preserved.\nloop invariant 1 <= y <= 2 is established but not preserved.\nloop invariant 1 <= a <= 3 is preserved but not established.\nAssertion a % 2 == 1: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main()\n{\n  int flag = unknown1();\n  int x = 1;\n  int y = 1;\n  int a;\n  \n  if(flag)\n    a = 0;\n  else\n    a = 1;\n\n  /*@\n\n\n\n\n*/\nwhile(unknown1()){\n    if(flag)\n    {\n      a = x+y;\n      x++;\n    }\n    else\n    {\n      a = x+y+1;\n      y++;\n    }\n    if(a%2==1)\n      y++;\n    else\n      x++;\t  \n  }\n  \n  if(flag)\n    a++;\n  {;\n//@ assert(a%2==1);\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 23: unexpected token 'and'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main()\n{\n  int flag = unknown1();\n  int x = 1;\n  int y = 1;\n  int a;\n  \n  if(flag)\n    a = 0;\n  else\n    a = 1;\n\n  /*@\nloop invariant i1: 0 <= a <= 1 and flag == 1 ==> a == 1;\nloop invariant i2: 0 <= a <= 1 and flag == 0 ==> a == 0;\nloop invariant i3: x >= 1 and y >= 1 and a >= 1 and flag == 1 ==> a == x + y;\nloop invariant i4: x >= 1 and y >= 1 and a >= 1 and flag == 0 ==> a == x + y + 1;\nloop invariant i5: x >= 1 and y >= 1 and a >= 1 and flag == 1 ==> x >= y;\nloop invariant i6: x >= 1 and y >= 1 and a >= 1 and flag == 0 ==> x >= y + 1;\nloop invariant i7: x >= 1 and y >= 1 and a >= 1 and flag == 1 ==> x <= a;\nloop invariant i8: x >= 1 and y >= 1 and a >= 1 and flag == 0 ==> x <= a - 1;\nloop invariant i9: flag == 1 ==> x >= 1 and y >= 1 and a >= 1 and x >= y and x <= a;\nloop invariant i10: flag == 0 ==> x >= 1 and y >= 1 and a >= 1 and x >= y + 1 and x <= a - 1;\nloop invariant i11: 0 <= y <= 100000;\nloop invariant i12: x >= (1 + (y - 1) * y / 2);\nloop invariant i13: x >= y;\nloop invariant i14: flag ==> a = x+y;\nloop invariant i15: !flag ==> a = x+y+1;\nloop invariant i16: x >= 1;\nloop invariant i17: y >= 1;\nloop invariant i18: x <= (a - y);\nloop invariant i19: y <= (a - x);\nloop invariant i20: flag ==> a > 1;\nloop invariant i21: !flag ==> a >= 2;\nloop invariant i22: flag ==> x > 1;\nloop invariant i23: !flag ==> x >= 2;\nloop invariant i24: flag ==> y > 1;\nloop invariant i25: !flag ==> y >= 2;\nloop invariant i26: x = x + 1 ==> a = x + y;\nloop invariant i27: x = x + 1 ==> y = y + 1;\nloop invariant i28: x = x + 1 ==> a = x + y + 1;\nloop invariant i29: y = y + 1 ==> a = x + y;\nloop invariant i30: y = y + 1 ==> x = x + 1;\nloop invariant i31: y = y + 1 ==> a = x + y + 1;\nloop invariant i32: a%2==1 ==> y = y + 1;\nloop invariant i33: a%2==0 ==> x = x + 1;\nloop invariant i34: flag ==> x = x + 1 ==> a = x + y;\nloop invariant i35: flag ==> x = x + 1 ==> y = y + 1;\nloop invariant i36: flag ==> x = x + 1 ==> a = x + y + 1;\nloop invariant i37: flag ==> y = y + 1 ==> a = x + y;\nloop invariant i38: flag ==> y = y + 1 ==> x = x + 1;\nloop invariant i39: flag ==> y = y + 1 ==> a = x + y + 1;\nloop invariant i40: !flag ==> x = x + 1 ==> a = x + y;\nloop invariant i41: !flag ==> x = x + 1 ==> y = y + 1;\nloop invariant i42: !flag ==> x = x + 1 ==> a = x + y + 1;\nloop invariant i43: !flag ==> y = y + 1 ==> a = x + y;\nloop invariant i44: !flag ==> y = y + 1 ==> x = x + 1;\nloop invariant i45: !flag ==> y = y + 1 ==> a = x + y + 1;\nloop invariant i46: 0 <= x <= unknown2();\nloop invariant i47: 1 <= y <= unknown2();\nloop invariant i48: a >= 1;\nloop invariant i49: a <= unknown2();\nloop invariant i50: a%2==1 ==> x-a%2==1;\nloop invariant i51: a%2==0 ==> x-a%2==0;\nloop invariant i52: a%2==1 ==> y-a%2==2;\nloop invariant i53: a%2==0 ==> y-a%2==1;\nloop invariant i54: unknown1() ==> x==y;\nloop invariant i55: !unknown1() ==> x!=y;\nloop invariant i56: unknown1() ==> x<=a;\nloop invariant i57: !unknown1() ==> x>=a;\nloop invariant i58: unknown1() ==> y<=a;\nloop invariant i59: !unknown1() ==> y>=a;\nloop invariant i60: unknown1() ==> flag==1;\nloop invariant i61: !unknown1() ==> flag==0;\nloop invariant i62: unknown1() ==> a%2==1;\nloop invariant i63: !unknown1() ==> a%2==0;\nloop invariant i64: unknown1() ==> x%2==0;\nloop invariant i65: !unknown1() ==> x%2==1;\nloop invariant i66: unknown1() ==> y%2==1;\nloop invariant i67: !unknown1() ==> y%2==0;\nloop invariant i68: 0 <= flag <= 1;\nloop invariant i69: 0 <= x <= unknown1();\nloop invariant i70: 0 <= y <= unknown1();\nloop invariant i71: 1 <= a <= unknown1();\nloop invariant i72: if flag then x+y < unknown1() else x+y+1 < unknown1();\nloop invariant i73: if a%2==1 then y < unknown1() else x < unknown1();\nloop invariant i74: 0 <= x <= 1 + y;\nloop invariant i75: 0 <= y <= 1 + x;\nloop invariant i76: a >= x + y;\nloop invariant i77: a <= x + y + 1;\nloop invariant i78: (a + 1) % 2 == 0 ==> x < y;\nloop invariant i79: (a + 1) % 2 == 0 ==> a <= x + y;\nloop invariant i80: (a + 1) % 2 == 0 ==> a >= x + y + 1;\nloop invariant i81: (a + 1) % 2 == 0 ==> y < x;\nloop invariant i82: (a + 1) % 2 == 0 ==> y == x + 1;\nloop invariant i83: 1 <= x <= 2;\nloop invariant i84: 1 <= y <= 2;\nloop invariant i85: 1 <= a <= 3;\nloop invariant i86: x <= y;\nloop invariant i87: x == y ==> a == x + y;\nloop invariant i88: x != y ==> a == x + y + 1;\nloop invariant i89: a % 2 == 1 ==> x == y;\nloop invariant i90: a % 2 == 0 ==> x != y;\nloop invariant i91: flag ==> a == x + y + 1;\nloop invariant i92: !flag ==> a == x + y;\nloop invariant i93: flag ==> x <= y;\nloop invariant i94: !flag ==> x < y;\nloop invariant i95: y <= 2;\nloop invariant i96: a <= 3;\nloop invariant i97: a % 2 == 1 ==> y == x;\nloop invariant i98: a % 2 == 0 ==> y == x + 1;\nloop invariant i99: flag ==> x == y;\nloop invariant i100: 0 <= x <= 100000;\nloop invariant i101: 0 <= a <= 100000;\nloop invariant i102: x >= y + 1;\nloop invariant i103: 0 <= x <= y;\nloop invariant i104: 1 <= y <= 100000;\nloop invariant i105: a >= x;\nloop invariant i106: a >= y;\nloop invariant i107: x + y >= 2;\nloop invariant i108: 0 <= x <= y <= a; loop invariant a % 2 == 1; loop invariant flag ==> x == 1; loop invariant !flag ==> y == 1; loop invariant flag ==> a == x + y; loop invariant !flag ==> a == x + y + 1;\nloop invariant i109: x + y <= 100000;\nloop invariant i110: a >= 0;\nloop invariant i111: a <= 1000000;\nloop invariant i112: a % 2 == 1;\n*/\nwhile(unknown1()){\n    if(flag)\n    {\n      a = x+y;\n      x++;\n    }\n    else\n    {\n      a = x+y+1;\n      y++;\n    }\n    if(a%2==1)\n      y++;\n    else\n      x++;\t  \n  }\n  \n  if(flag)\n    a++;\n  {;\n//@ assert(a%2==1);\n}\n\n}",
        "combined_annotation_num_solver_calls": 82,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main()\n{\n  int flag = unknown1();\n  int x = 1;\n  int y = 1;\n  int a;\n  \n  if(flag)\n    a = 0;\n  else\n    a = 1;\n\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i16: x >= 1;\nloop invariant i17: y >= 1;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i77: a <= x + y + 1;\n\nloop invariant i79: (a + 1) % 2 == 0 ==> a <= x + y;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i107: x + y >= 2;\n\n\nloop invariant i110: a >= 0;\n\n\n*/\nwhile(unknown1()){\n    if(flag)\n    {\n      a = x+y;\n      x++;\n    }\n    else\n    {\n      a = x+y+1;\n      y++;\n    }\n    if(a%2==1)\n      y++;\n    else\n      x++;\t  \n  }\n  \n  if(flag)\n    a++;\n  {;\n//@ assert(a%2==1);\n}\n\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [],
        "failure": [
            "../dataset/loop_invariants/code2inv/85.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/ex2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/42.c"
        ],
        "skipped": [],
        "total": 3,
        "success_count": 0,
        "failure_count": 3,
        "success_rate": 0.0
    }
}