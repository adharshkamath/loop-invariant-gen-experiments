{
    "logs": {
        "file": "../dataset/loop_invariants/accelerating_invariant_generation/invgen/NetBSD_g_Ctoc.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint BASE_SZ;\nint __BLAST_NONDET;\nint main ()\n{\n  \n  int i;\n  int j;\n  int len = BASE_SZ;\n\n  if(BASE_SZ > 0 ); else goto END;\n\n  {;\n//@ assert( 0 <= BASE_SZ-1 );\n}\n\n  if (len == 0)\n    goto END; \n  \n  i = 0;\n  j = 0;\n  while (1) {\n    if ( len == 0 ){ \n      goto END;\n    } else {\n      {;\n//@ assert( 0<= j );\n}\n {;\n//@ assert(j < BASE_SZ);\n}\n\n      {;\n//@ assert( 0<= i );\n}\n {;\n//@ assert(i < BASE_SZ );\n}\n\n      if ( __BLAST_NONDET ) {\n        i++;\n        j++;\n        goto END;\n      }\n    }\n    i ++;\n    j ++;\n    len --;\n  }\n\n END:  return 0;\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= j < BASE_SZ;\nloop invariant 0 <= i < BASE_SZ;\nloop invariant len >= 0;\nloop invariant len <= BASE_SZ;\nloop invariant j <= i;\nloop invariant j <= len;\nloop invariant i <= len;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant len >= 0;\nloop invariant j <= i;\nloop invariant j <= len;\nloop invariant i <= len;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant len >= 0;\nloop invariant j <= i;\nloop invariant j <= len;\nloop invariant i <= len;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant len >= 0;\nloop invariant j <= i;\nloop invariant j <= len;\nloop invariant i <= len;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant len >= 0;\nloop invariant j <= i;\nloop invariant j <= len;\nloop invariant i <= len;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant len >= 0;\nloop invariant j <= i;\nloop invariant j <= len;\nloop invariant i <= len;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant len >= 0;\nloop invariant j <= i;\nloop invariant j <= len;\nloop invariant i <= len;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant len >= 0;\nloop invariant j <= i;\nloop invariant j <= len;\nloop invariant i <= len;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant len >= 0;\nloop invariant j <= i;\nloop invariant j <= len;\nloop invariant i <= len;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant len >= 0;\nloop invariant j <= i;\nloop invariant j <= len;\nloop invariant i <= len;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant len >= 0;\nloop invariant j <= i;\nloop invariant j <= len;\nloop invariant i <= len;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant len >= 0;\nloop invariant j <= i;\nloop invariant j <= len;\nloop invariant i <= len;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant len >= 0;\nloop invariant j <= i;\nloop invariant j <= len;\nloop invariant i <= len;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant len >= 0;\nloop invariant j <= i;\nloop invariant j <= len;\nloop invariant i <= len;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant len >= 0;\nloop invariant j <= i;\nloop invariant j <= len;\nloop invariant i <= len;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant len >= 0;\nloop invariant j <= i;\nloop invariant j <= len;\nloop invariant i <= len;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant len >= 0;\nloop invariant j <= i;\nloop invariant j <= len;\nloop invariant i <= len;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant len >= 0;\nloop invariant j <= i;\nloop invariant j <= len;\nloop invariant i <= len;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant len >= 0;\nloop invariant j <= i;\nloop invariant j <= len;\nloop invariant i <= len;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant len >= 0;\nloop invariant j <= i;\nloop invariant j <= len;\nloop invariant i <= len;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant len >= 0;\nloop invariant j <= i;\nloop invariant j <= len;\nloop invariant i <= len;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant len >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= BASE_SZ;\nloop invariant 0 <= j <= BASE_SZ;\nloop invariant i >= j;\nloop invariant len >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= BASE_SZ;\nloop invariant 0 <= j <= BASE_SZ;\nloop invariant len >= 0;\nloop invariant i == j ==> i < BASE_SZ;\nloop invariant i != j ==> i <= BASE_SZ;\nloop invariant j != i ==> j <= BASE_SZ;\nloop invariant i == j ==> len >= 0;\nloop invariant i != j ==> len <= BASE_SZ;\nloop invariant j == i ==> len >= 0;\nloop invariant j != i ==> len <= BASE_SZ;\nloop invariant len >= 0 ==> i == j;\nloop invariant len <= BASE_SZ ==> i != j;\nloop invariant i == j ==> j == i;\nloop invariant i != j ==> i <= j;\nloop invariant j != i ==> j <= i;\nloop invariant len >= 0 ==> i == j ==> i < BASE_SZ;\nloop invariant len <= BASE_SZ ==> i != j ==> i <= BASE_SZ;\nloop invariant i == j ==> len >= 0;\nloop invariant i != j ==> len <= BASE_SZ;\nloop invariant j == i ==> len >= 0;\nloop invariant j != i ==> len <= BASE_SZ;\nloop invariant len >= 0 ==> i == j ==> i < BASE_SZ;\nloop invariant len <= BASE_SZ ==> i != j ==> i <= BASE_SZ;\nloop invariant i == j ==> len >= 0;\nloop invariant i != j ==> len <= BASE_SZ;\nloop invariant j == i ==> len >= 0;\nloop invariant j != i ==> len <= BASE_SZ;\nloop invariant len >= 0 ==> i == j ==> i < BASE_SZ;\nloop invariant len <= BASE_SZ ==> i != j ==> i <= BASE_SZ;\nloop invariant i == j ==> len >= 0;\nloop invariant i != j ==> len <= BASE_SZ;\nloop invariant j == i ==> len >= 0;\nloop invariant j != i ==> len <= BASE_SZ;\nloop invariant len >= 0 ==> i == j ==> i < BASE_SZ;\nloop invariant len <= BASE_SZ ==> i != j ==> i <= BASE_SZ;\nloop invariant i == j ==> len >= 0;\nloop invariant i != j ==> len <= BASE_SZ;\nloop invariant j == i ==> len >= 0;\nloop invariant j != i ==> len <= BASE_SZ;\nloop invariant len >= 0 ==> i == j ==> i < BASE_SZ;\nloop invariant len <= BASE_SZ ==> i != j ==> i <= BASE_SZ;\nloop invariant i == j ==> len >= 0;\nloop invariant i != j ==> len <= BASE_SZ;\nloop invariant j == i ==> len >= 0;\nloop invariant j != i ==> len <= BASE_SZ;\nloop invariant len >= 0 ==> i == j ==> i < BASE_SZ;\nloop invariant len <= BASE_SZ ==> i != j ==> i <= BASE_SZ;\nloop invariant i == j ==> len >= 0;\nloop invariant i != j ==> len <= BASE_SZ;\nloop invariant j == i ==> len >= 0;\nloop invariant j != i ==> len <= BASE_SZ;\nloop invariant len >= 0 ==> i == j ==> i < BASE_SZ;\nloop invariant len <= BASE_SZ ==> i != j ==> i <= BASE_SZ;\nloop invariant i == j ==> len >= 0;\nloop invariant i != j ==> len <= BASE_SZ;\nloop invariant j == i ==> len >= 0;\nloop invariant j != i ==> len <= BASE_SZ;\nloop invariant len >= 0 ==> i == j ==> i < BASE_SZ;\nloop invariant len <= BASE_SZ ==> i != j ==> i <= BASE_SZ;\nloop invariant i == j ==> len >= 0;\nloop invariant i != j ==> len <= BASE_SZ;\nloop invariant j == i ==> len >= 0;\nloop invariant j != i ==> len <= BASE_SZ;\nloop invariant len >= 0 ==> i == j ==> i < BASE_SZ;\nloop invariant len <= BASE_SZ ==> i != j ==> i <= BASE_SZ;\nloop invariant i == j ==> len >= 0;\nloop invariant i != j ==> len <= BASE_SZ;\nloop invariant j == i ==> len >= 0;\nloop invariant j != i ==> len <= BASE_SZ;\nloop invariant len >= 0 ==> i == j ==> i < BASE_SZ;\nloop invariant len <= BASE_SZ ==> i != j ==> i <= BASE_SZ;\nloop invariant i == j ==> len >= 0;\nloop invariant i != j ==> len <= BASE_SZ;\nloop invariant j == i ==> len >= 0;\nloop invariant j != i ==> len <= BASE_SZ;\nloop invariant len >= 0 ==> i == j ==> i < BASE_SZ;\nloop invariant len <= BASE_SZ ==> i != j ==> i <= BASE_SZ;\nloop invariant i == j ==> len >= 0;\nloop invariant i != j ==> len <= BASE_SZ;\nloop invariant j == i ==> len >= 0;\nloop invariant j != i ==> len <= BASE_SZ;\n*/\n```",
            "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant i3;\nloop invariant i4;\nloop invariant i5;\nloop invariant i6;\nloop invariant i7;\nloop invariant i8;\nloop invariant i9;\nloop invariant i10;\nloop invariant i11;\nloop invariant i12;\nloop invariant i13;\nloop invariant i14;\nloop invariant i15;\nloop invariant i16;\nloop invariant i17;\nloop invariant i18;\nloop invariant i19;\nloop invariant i20;\nloop invariant i21;\nloop invariant i22;\nloop invariant i23;\nloop invariant i24;\nloop invariant i25;\nloop invariant i26;\nloop invariant i27;\nloop invariant i28;\nloop invariant i29;\nloop invariant i30;\nloop invariant i31;\nloop invariant i32;\nloop invariant i33;\nloop invariant i34;\nloop invariant i35;\nloop invariant i36;\nloop invariant i37;\nloop invariant i38;\nloop invariant i39;\nloop invariant i40;\nloop invariant i41;\nloop invariant i42;\nloop invariant i43;\nloop invariant i44;\nloop invariant i45;\nloop invariant i46;\nloop invariant i47;\nloop invariant i48;\nloop invariant i49;\nloop invariant i50;\nloop invariant i51;\nloop invariant i52;\nloop invariant i53;\nloop invariant i54;\nloop invariant i55;\nloop invariant i56;\nloop invariant i57;\nloop invariant i58;\nloop invariant i59;\nloop invariant i60;\nloop invariant i61;\nloop invariant i62;\nloop invariant i63;\nloop invariant i64;\nloop invariant i65;\nloop invariant i66;\nloop invariant i67;\nloop invariant i68;\nloop invariant i69;\nloop invariant i70;\nloop invariant i71;\nloop invariant i72;\nloop invariant i73;\nloop invariant i74;\nloop invariant i75;\nloop invariant i76;\nloop invariant i77;\nloop invariant i78;\nloop invariant i79;\nloop invariant i80;\nloop invariant i81;\nloop invariant i82;\nloop invariant i83;\nloop invariant i84;\nloop invariant i85;\nloop invariant i86;\nloop invariant i87;\nloop invariant i88;\nloop invariant i89;\nloop invariant i90;\nloop invariant i91;\nloop invariant i92;\nloop invariant i93;\nloop invariant i94;\nloop invariant i95;\nloop invariant i96;\nloop invariant i97;\nloop invariant i98;\nloop invariant i99;\nloop invariant i100;\nloop invariant i101;\nloop invariant i102;\nloop invariant i103;\nloop invariant i104;\nloop invariant i105;\nloop invariant i106;\nloop invariant i107;\nloop invariant i108;\nloop invariant i109;\nloop invariant i110;\nloop invariant i111;\nloop invariant i112;\nloop invariant i113;\nloop invariant i114;\nloop invariant i115;\nloop invariant i116;\nloop invariant i117;\nloop invariant i118;\nloop invariant i119;\nloop invariant i120;\nloop invariant i121;\nloop invariant i122;\nloop invariant i123;\nloop invariant i124;\nloop invariant i125;\nloop invariant i126;\nloop invariant i127;\nloop invariant i128;\nloop invariant i129;\nloop invariant i130;\nloop invariant i131;\nloop invariant i132;\nloop invariant i133;\nloop invariant i134;\nloop invariant i135;\nloop invariant i136;\nloop invariant i137;\nloop invariant i138;\nloop invariant i139;\nloop invariant i140;\nloop invariant i141;\nloop invariant i142;\nloop invariant i143;\nloop invariant i144;\nloop invariant i145;\nloop invariant i146;\nloop invariant i147;\nloop invariant i148;\nloop invariant i149;\nloop invariant i150;\nloop invariant i151;\nloop invariant i152;\nloop invariant i153;\nloop invariant i154;\nloop invariant i155;\nloop invariant i156;\nloop invariant i157;\nloop invariant i158;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= BASE_SZ;\nloop invariant 0 <= j <= BASE_SZ;\nloop invariant i <= j;\nloop invariant len == BASE_SZ - (i + j);\nloop invariant (i == 0 && j == 0 && len == BASE_SZ) ==> (i + j <= BASE_SZ);\nloop invariant (len == 0) ==> (i + j == BASE_SZ);\nloop invariant (len > 0) ==> (i + j < BASE_SZ);\nloop invariant (len == 0) ==> (len == BASE_SZ - (i + j));\nloop invariant (len > 0) ==> (len > BASE_SZ - (i + j));\nloop invariant (len == 0) ==> (len == BASE_SZ - (i + j));\nloop invariant (len > 0) ==> (len > BASE_SZ - (i + j));\nloop invariant (len == 0) ==> (len == BASE_SZ - (i + j));\nloop invariant (len > 0) ==> (len > BASE_SZ - (i + j));\nloop invariant (len == 0) ==> (len == BASE_SZ - (i + j));\nloop invariant (len > 0) ==> (len > BASE_SZ - (i + j));\nloop invariant (len == 0) ==> (len == BASE_SZ - (i + j));\nloop invariant (len > 0) ==> (len > BASE_SZ - (i + j));\nloop invariant (len == 0) ==> (len == BASE_SZ - (i + j));\nloop invariant (len > 0) ==> (len > BASE_SZ - (i + j));\nloop invariant (len == 0) ==> (len == BASE_SZ - (i + j));\nloop invariant (len > 0) ==> (len > BASE_SZ - (i + j));\nloop invariant (len == 0) ==> (len == BASE_SZ - (i + j));\nloop invariant (len > 0) ==> (len > BASE_SZ - (i + j));\nloop invariant (len == 0) ==> (len == BASE_SZ - (i + j));\nloop invariant (len > 0) ==> (len > BASE_SZ - (i + j));\nloop invariant (len == 0) ==> (len == BASE_SZ - (i + j));\nloop invariant (len > 0) ==> (len > BASE_SZ - (i + j));\nloop invariant (len == 0) ==> (len == BASE_SZ - (i + j));\nloop invariant (len > 0) ==> (len > BASE_SZ - (i + j));\nloop invariant (len == 0) ==> (len == BASE_SZ - (i + j));\nloop invariant (len > 0) ==> (len > BASE_SZ - (i + j));\nloop invariant (len == 0) ==> (len == BASE_SZ - (i + j));\nloop invariant (len > 0) ==> (len > BASE_SZ - (i + j));\nloop invariant (len == 0) ==> (len == BASE_SZ - (i + j));\nloop invariant (len > 0) ==> (len > BASE_SZ - (i + j));\nloop invariant (len == 0) ==> (len == BASE_SZ - (i + j));\nloop invariant (len > 0) ==> (len > BASE_SZ - (i + j));\nloop invariant (len == 0) ==> (len == BASE_SZ - (i + j));\nloop invariant (len > 0) ==> (len > BASE_SZ - (i + j));\nloop invariant (len == 0) ==> (len == BASE_SZ - (i + j));\nloop invariant (len > 0) ==> (len > BASE_SZ - (i + j));\nloop invariant (len == 0) ==> (len == BASE_SZ - (i + j));\nloop invariant (len > 0) ==> (len > BASE_SZ - (i + j));\nloop invariant (len == 0) ==> (len == BASE_SZ - (i + j));\nloop invariant (len > 0) ==> (len > BASE_SZ - (i + j));\nloop invariant (len == 0) ==> (len == BASE_SZ - (i + j));\nloop invariant (len > 0) ==> (len > BASE_SZ - (i + j));\nloop invariant (len == 0) ==> (len == BASE_SZ - (i + j));\nloop invariant (len > 0) ==> (len > BASE_SZ - (i + j));\nloop invariant (len == 0) ==> (len == BASE_SZ - (i + j));\nloop invariant (len > 0) ==> (len > BASE_SZ - (i + j));\nloop invariant (len == 0) ==> (len == BASE_SZ - (i + j));\n*/\n```",
            "```\n/*@\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant len >= 0;\nloop invariant BASE_SZ >= 0;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant i <= j;\nloop invariant len <= BASE_SZ - i;\nloop invariant len <= BASE_SZ - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= j < BASE_SZ;\nloop invariant 0 <= i < BASE_SZ;\nloop invariant len >= 0;\nloop invariant len <= BASE_SZ;\nloop invariant (len == 0) ==> (i == j);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= len <= BASE_SZ;\nloop invariant ( i <= BASE_SZ-1 ==> i >= 0 );\nloop invariant ( j <= BASE_SZ-1 ==> j >= 0 );\nloop invariant ( i <= BASE_SZ-1 ==> j <= i );\nloop invariant ( i <= BASE_SZ-1 ==> i == j ==> len == 0 );\nloop invariant ( i <= BASE_SZ-1 ==> j <= i ==> len == 0 );\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= BASE_SZ;\nloop invariant 0 <= j <= BASE_SZ;\nloop invariant i >= j;\nloop invariant i + j <= BASE_SZ;\nloop invariant len >= 0;\nloop invariant len <= BASE_SZ;\nloop invariant len >= i + j;\nloop invariant len <= BASE_SZ - (i + j);\nloop invariant len >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= len;\nloop invariant 0 <= j <= i;\nloop invariant 0 <= len <= BASE_SZ;\nloop invariant 0 <= BASE_SZ;\nloop invariant 0 <= i + j <= len + j;\nloop invariant 0 <= len - 1 <= BASE_SZ - 1;\nloop invariant 0 <= j <= len - 1;\nloop invariant 0 <= i <= len;\nloop invariant 0 <= len <= BASE_SZ;\nloop invariant 0 <= j <= i;\nloop invariant 0 <= len <= BASE_SZ;\nloop invariant 0 <= i <= len;\nloop invariant 0 <= j <= i;\nloop invariant 0 <= len <= BASE_SZ;\nloop invariant 0 <= j <= len;\nloop invariant 0 <= i <= len;\nloop invariant 0 <= len <= BASE_SZ;\nloop invariant 0 <= j <= len;\nloop invariant 0 <= i <= len;\nloop invariant 0 <= len <= BASE_SZ;\nloop invariant 0 <= j <= len;\nloop invariant 0 <= i <= len;\nloop invariant 0 <= len <= BASE_SZ;\nloop invariant 0 <= i <= len;\nloop invariant 0 <= j <= i;\nloop invariant 0 <= len <= BASE_SZ;\nloop invariant 0 <= i <= len;\nloop invariant 0 <= j <= i;\nloop invariant 0 <= len <= BASE_SZ;\nloop invariant 0 <= j <= len;\nloop invariant 0 <= i <= len;\nloop invariant 0 <= len <= BASE_SZ;\nloop invariant 0 <= i <= len;\nloop invariant 0 <= j <= len;\nloop invariant 0 <= i <= len;\nloop invariant 0 <= len <= BASE_SZ;\nloop invariant 0 <= j <= len;\nloop invariant 0 <= i <= len;\nloop invariant 0 <= len <= BASE_SZ;\nloop invariant 0 <= i <= len;\nloop invariant 0 <= j <= i;\nloop invariant 0 <= len <= BASE_SZ;\nloop invariant 0 <= i <= len;\nloop invariant 0 <= j <= i;\nloop invariant 0 <= len <= BASE_SZ;\nloop invariant 0 <= j <= len;\nloop invariant 0 <= i <= len;\nloop invariant 0 <= len <= BASE_SZ;\nloop invariant 0 <= i <= len;\nloop invariant 0 <= j <= len;\nloop invariant 0 <= i <= len;\nloop invariant 0 <= len <= BASE_SZ;\nloop invariant 0 <= j <= len;\nloop invariant 0 <= i <= len;\nloop invariant 0 <= len <= BASE_SZ;\nloop invariant 0 <= i <= len;\nloop invariant 0 <= j <= i;\nloop invariant 0 <= len <= BASE_SZ;\nloop invariant 0 <= i <= len;\nloop invariant 0 <= j <= i;\nloop invariant 0 <= len <= BASE_SZ;\nloop invariant 0 <= j <= len;\nloop invariant 0 <= i <= len;\nloop invariant 0 <= len <= BASE_SZ;\nloop invariant 0 <= i <= len;\nloop invariant 0 <= j <= len;\nloop invariant 0 <= i <= len;\nloop invariant 0 <= len <= BASE_SZ;\nloop invariant 0 <= j <= len;\nloop invariant 0 <= i <= len;\nloop invariant 0 <= len <= BASE_SZ;\nloop invariant 0 <= i <= len;\nloop invariant 0 <= j <= i;\nloop invariant 0 <= len <= BASE_SZ;\nloop invariant 0 <= i <= len;\nloop invariant 0 <= j <= i;\nloop invariant 0 <= len <= BASE_SZ;\nloop invariant 0 <= j <= len;\nloop invariant 0 <= i <= len;\nloop invariant 0 <= len <= BASE_SZ;\nloop invariant 0 <= i <= len;\nloop invariant 0 <= j <= len;\nloop invariant 0 <= i <= len;\nloop invariant 0 <= len <= BASE_SZ;\nloop invariant 0 <= j <= len;\nloop invariant 0 <= i <= len;\nloop invariant 0 <= len <= BASE_SZ;\nloop invariant 0 <= i <= len;\nloop invariant 0 <= j <= i;\nloop invariant 0 <= len <= BASE_SZ;\nloop invariant 0 <= i <= len;\nloop invariant 0 <= j <= i;\nloop invariant 0 <= len <= BASE_SZ;\nloop invariant 0 <= j <= len;\nloop invariant 0 <= i <= len;\nloop invariant 0 <= len <= BASE_SZ;\nloop invariant 0 <= i <= len;\nloop invariant 0 <= j <= len;\nloop invariant 0 <= i <= len;\nloop invariant 0 <= len <= BASE_SZ;\nloop invariant 0 <= j <= len;\nloop invariant 0 <= i <= len;\nloop invariant 0 <= len <= BASE_SZ;\nloop invariant 0 <= i <= len;\nloop invariant 0 <= j <= i;\nloop invariant 0 <= len <= BASE_SZ;\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= j <= BASE_SZ;\nloop invariant 0 <= i <= BASE_SZ;\nloop invariant j <= i;\nloop invariant i == j + len;\nloop invariant i <= BASE_SZ + len;\nloop invariant j <= BASE_SZ + len;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= j <= BASE_SZ + 1;\nloop invariant 0 <= i <= BASE_SZ + 1;\nloop invariant len >= 0 && len <= BASE_SZ;\nloop invariant (j == 0 && i == 0) ==> (len == BASE_SZ);\nloop invariant (j < BASE_SZ && i < BASE_SZ) ==> (__BLAST_NONDET ==> (j == i && len == 0));\nloop invariant (j >= BASE_SZ) ==> (i == j && len == 0);\nloop invariant (i >= BASE_SZ) ==> (j == i && len == 0);\nloop invariant (len == 0) ==> (j == BASE_SZ && i == BASE_SZ);\nloop invariant (__BLAST_NONDET ==> (j == i && len == 0));\nloop invariant (j == 0 && i == 0) ==> (len == BASE_SZ);\nloop invariant 0 <= j <= BASE_SZ + 1;\nloop invariant 0 <= i <= BASE_SZ + 1;\nloop invariant len >= 0 && len <= BASE_SZ;\nloop invariant (j == 0 && i == 0) ==> (len == BASE_SZ);\nloop invariant (j < BASE_SZ && i < BASE_SZ) ==> (__BLAST_NONDET ==> (j == i && len == 0));\nloop invariant (j >= BASE_SZ) ==> (i == j && len == 0);\nloop invariant (i >= BASE_SZ) ==> (j == i && len == 0);\nloop invariant (len == 0) ==> (j == BASE_SZ && i == BASE_SZ);\nloop invariant (__BLAST_NONDET ==> (j == i && len == 0));\nloop invariant (j == 0 && i == 0) ==> (len == BASE_SZ);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= len <= BASE_SZ;\nloop invariant 0 <= i <= BASE_SZ;\nloop invariant 0 <= j <= BASE_SZ;\nloop invariant i >= j;\nloop invariant i >= len;\nloop invariant j >= len;\nloop invariant len >= 0;\nloop invariant BASE_SZ >= 0;\nloop invariant i + j == 2 * len;\nloop invariant i <= 2 * len;\nloop invariant j <= 2 * len;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant len <= BASE_SZ;\nloop invariant len >= 0;\nloop invariant i + j == 2 * len;\nloop invariant len >= 0;\nloop invariant i + j == 2 * len;\nloop invariant len >= 0;\nloop invariant i + j == 2 * len;\nloop invariant len >= 0;\nloop invariant i + j == 2 * len;\nloop invariant len >= 0;\nloop invariant i + j == 2 * len;\nloop invariant len >= 0;\nloop invariant i + j == 2 * len;\nloop invariant len >= 0;\nloop invariant i + j == 2 * len;\nloop invariant len >= 0;\nloop invariant i + j == 2 * len;\nloop invariant len >= 0;\nloop invariant i + j == 2 * len;\nloop invariant len >= 0;\nloop invariant i + j == 2 * len;\nloop invariant len >= 0;\nloop invariant i + j == 2 * len;\nloop invariant len >= 0;\nloop invariant i + j == 2 * len;\nloop invariant len >= 0;\nloop invariant i + j == 2 * len;\nloop invariant len >= 0;\nloop invariant i + j == 2 * len;\nloop invariant len >= 0;\nloop invariant i + j == 2 * len;\nloop invariant len >= 0;\nloop invariant i + j == 2 * len;\nloop invariant len >= 0;\nloop invariant i + j == 2 * len;\nloop invariant len >= 0;\nloop invariant i + j == 2 * len;\nloop invariant len >= 0;\nloop invariant i + j == 2 * len;\nloop invariant len >= 0;\nloop invariant i + j == 2 * len;\nloop invariant len >= 0;\nloop invariant i + j == 2 * len;\nloop invariant len >= 0;\nloop invariant i + j == 2 * len;\nloop invariant len >= 0;\nloop invariant i + j == 2 * len;\nloop invariant len >= 0;\nloop invariant i + j == 2 * len;\nloop invariant len >= 0;\nloop invariant i + j == 2 * len;\nloop invariant len >= 0;\nloop invariant i + j == 2 * len;\nloop invariant len >= 0;\nloop invariant i + j == 2 * len;\nloop invariant len >= 0;\nloop invariant i + j == 2 * len;\nloop invariant len >= 0;\nloop invariant i + j == 2 * len;\nloop invariant len >= 0;\nloop invariant i + j == 2 * len;\nloop invariant len >= 0;\nloop invariant i + j == 2 * len;\nloop invariant len >= 0;\nloop invariant i + j == 2 * len;\nloop invariant len >= 0;\nloop invariant i + j == 2 * len;\nloop invariant len >= 0;\nloop invariant i + j == 2 * len;\nloop invariant len >= 0;\nloop invariant i + j == 2 * len;\nloop invariant len >= 0;\nloop invariant i + j == 2 * len;\nloop invariant len >= 0;\nloop invariant i + j == 2 * len;\nloop invariant len >= 0;\nloop invariant i + j == 2 * len;\nloop invariant len >= 0;\nloop invariant i + j == 2 * len;\nloop invariant len >= 0;\nloop invariant i + j == 2 * len;\nloop invariant len >= 0;\nloop invariant i + j == 2 * len;\nloop invariant len >= 0;\nloop invariant i + j == 2 * len;\nloop invariant len >= 0;\nloop invariant i + j == 2 * len;\nloop invariant len >= 0;\nloop invariant i + j == 2 * len;\nloop invariant len >= 0;\nloop invariant i + j == 2 * len;\nloop invariant len >= 0;\nloop invariant i + j == 2 * len;\nloop invariant len >= 0;\nloop invariant i + j == 2 * len;\nloop invariant len >= 0;\nloop invariant i + j == 2 * len;\nloop invariant len >= 0;\nloop invariant i + j == 2 * len;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= BASE_SZ;\nloop invariant 0 <= j <= BASE_SZ;\nloop invariant i <= j;\nloop invariant i + j <= BASE_SZ;\nloop invariant i + j >= 0;\nloop invariant i + j <= BASE_SZ;\nloop invariant i + j >= 0;\nloop invariant i + j <= BASE_SZ;\nloop invariant i + j >= 0;\nloop invariant i + j <= BASE_SZ;\nloop invariant i + j >= 0;\nloop invariant i + j <= BASE_SZ;\nloop invariant i + j >= 0;\nloop invariant i + j <= BASE_SZ;\nloop invariant i + j >= 0;\nloop invariant i + j <= BASE_SZ;\nloop invariant i + j >= 0;\nloop invariant i + j <= BASE_SZ;\nloop invariant i + j >= 0;\nloop invariant i + j <= BASE_SZ;\nloop invariant i + j >= 0;\nloop invariant i + j <= BASE_SZ;\nloop invariant i + j >= 0;\nloop invariant i + j <= BASE_SZ;\nloop invariant i + j >= 0;\nloop invariant i + j <= BASE_SZ;\nloop invariant i + j >= 0;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= j < BASE_SZ;\nloop invariant 0 <= i < BASE_SZ;\nloop invariant len >= 0;\nloop invariant len <= BASE_SZ;\nloop invariant j <= i;\nloop invariant j <= len;\nloop invariant i <= len;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant len >= 0;\nloop invariant j <= i;\nloop invariant j <= len;\nloop invariant i <= len;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant len >= 0;\nloop invariant j <= i;\nloop invariant j <= len;\nloop invariant i <= len;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant len >= 0;\nloop invariant j <= i;\nloop invariant j <= len;\nloop invariant i <= len;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant len >= 0;\nloop invariant j <= i;\nloop invariant j <= len;\nloop invariant i <= len;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant len >= 0;\nloop invariant j <= i;\nloop invariant j <= len;\nloop invariant i <= len;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant len >= 0;\nloop invariant j <= i;\nloop invariant j <= len;\nloop invariant i <= len;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant len >= 0;\nloop invariant j <= i;\nloop invariant j <= len;\nloop invariant i <= len;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant len >= 0;\nloop invariant j <= i;\nloop invariant j <= len;\nloop invariant i <= len;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant len >= 0;\nloop invariant j <= i;\nloop invariant j <= len;\nloop invariant i <= len;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant len >= 0;\nloop invariant j <= i;\nloop invariant j <= len;\nloop invariant i <= len;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant len >= 0;\nloop invariant j <= i;\nloop invariant j <= len;\nloop invariant i <= len;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant len >= 0;\nloop invariant j <= i;\nloop invariant j <= len;\nloop invariant i <= len;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant len >= 0;\nloop invariant j <= i;\nloop invariant j <= len;\nloop invariant i <= len;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant len >= 0;\nloop invariant j <= i;\nloop invariant j <= len;\nloop invariant i <= len;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant len >= 0;\nloop invariant j <= i;\nloop invariant j <= len;\nloop invariant i <= len;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant len >= 0;\nloop invariant j <= i;\nloop invariant j <= len;\nloop invariant i <= len;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant len >= 0;\nloop invariant j <= i;\nloop invariant j <= len;\nloop invariant i <= len;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant len >= 0;\nloop invariant j <= i;\nloop invariant j <= len;\nloop invariant i <= len;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant len >= 0;\nloop invariant j <= i;\nloop invariant j <= len;\nloop invariant i <= len;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant len >= 0;\nloop invariant j <= i;\nloop invariant j <= len;\nloop invariant i <= len;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant len >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint BASE_SZ;\nint __BLAST_NONDET;\nint main ()\n{\n  \n  int i;\n  int j;\n  int len = BASE_SZ;\n\n  if(BASE_SZ > 0 ); else goto END;\n\n  {;\n//@ assert( 0 <= BASE_SZ-1 );\n}\n\n  if (len == 0)\n    goto END; \n  \n  i = 0;\n  j = 0;\n  /*@\nloop invariant i1: 0 <= j < BASE_SZ;\nloop invariant i2: 0 <= i < BASE_SZ;\nloop invariant i3: len >= 0;\nloop invariant i4: len <= BASE_SZ;\nloop invariant i5: j <= i;\nloop invariant i6: j <= len;\nloop invariant i7: i <= len;\nloop invariant i8: i <= BASE_SZ;\nloop invariant i9: j <= BASE_SZ;\n*/\nwhile (1) {\n    if ( len == 0 ){ \n      goto END;\n    } else {\n      {;\n//@ assert( 0<= j );\n}\n {;\n//@ assert(j < BASE_SZ);\n}\n\n      {;\n//@ assert( 0<= i );\n}\n {;\n//@ assert(i < BASE_SZ );\n}\n\n      if ( __BLAST_NONDET ) {\n        i++;\n        j++;\n        goto END;\n      }\n    }\n    i ++;\n    j ++;\n    len --;\n  }\n\n END:  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= BASE_SZ;\nloop invariant 0 <= j <= BASE_SZ;\nloop invariant i >= j;\nloop invariant len >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint BASE_SZ;\nint __BLAST_NONDET;\nint main ()\n{\n  \n  int i;\n  int j;\n  int len = BASE_SZ;\n\n  if(BASE_SZ > 0 ); else goto END;\n\n  {;\n//@ assert( 0 <= BASE_SZ-1 );\n}\n\n  if (len == 0)\n    goto END; \n  \n  i = 0;\n  j = 0;\n  /*@\nloop invariant i1: 0 <= i <= BASE_SZ;\nloop invariant i2: 0 <= j <= BASE_SZ;\nloop invariant i3: i >= j;\nloop invariant i4: len >= 0;\n*/\nwhile (1) {\n    if ( len == 0 ){ \n      goto END;\n    } else {\n      {;\n//@ assert( 0<= j );\n}\n {;\n//@ assert(j < BASE_SZ);\n}\n\n      {;\n//@ assert( 0<= i );\n}\n {;\n//@ assert(i < BASE_SZ );\n}\n\n      if ( __BLAST_NONDET ) {\n        i++;\n        j++;\n        goto END;\n      }\n    }\n    i ++;\n    j ++;\n    len --;\n  }\n\n END:  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= BASE_SZ;\nloop invariant 0 <= j <= BASE_SZ;\nloop invariant len >= 0;\nloop invariant i == j ==> i < BASE_SZ;\nloop invariant i != j ==> i <= BASE_SZ;\nloop invariant j != i ==> j <= BASE_SZ;\nloop invariant i == j ==> len >= 0;\nloop invariant i != j ==> len <= BASE_SZ;\nloop invariant j == i ==> len >= 0;\nloop invariant j != i ==> len <= BASE_SZ;\nloop invariant len >= 0 ==> i == j;\nloop invariant len <= BASE_SZ ==> i != j;\nloop invariant i == j ==> j == i;\nloop invariant i != j ==> i <= j;\nloop invariant j != i ==> j <= i;\nloop invariant len >= 0 ==> i == j ==> i < BASE_SZ;\nloop invariant len <= BASE_SZ ==> i != j ==> i <= BASE_SZ;\nloop invariant i == j ==> len >= 0;\nloop invariant i != j ==> len <= BASE_SZ;\nloop invariant j == i ==> len >= 0;\nloop invariant j != i ==> len <= BASE_SZ;\nloop invariant len >= 0 ==> i == j ==> i < BASE_SZ;\nloop invariant len <= BASE_SZ ==> i != j ==> i <= BASE_SZ;\nloop invariant i == j ==> len >= 0;\nloop invariant i != j ==> len <= BASE_SZ;\nloop invariant j == i ==> len >= 0;\nloop invariant j != i ==> len <= BASE_SZ;\nloop invariant len >= 0 ==> i == j ==> i < BASE_SZ;\nloop invariant len <= BASE_SZ ==> i != j ==> i <= BASE_SZ;\nloop invariant i == j ==> len >= 0;\nloop invariant i != j ==> len <= BASE_SZ;\nloop invariant j == i ==> len >= 0;\nloop invariant j != i ==> len <= BASE_SZ;\nloop invariant len >= 0 ==> i == j ==> i < BASE_SZ;\nloop invariant len <= BASE_SZ ==> i != j ==> i <= BASE_SZ;\nloop invariant i == j ==> len >= 0;\nloop invariant i != j ==> len <= BASE_SZ;\nloop invariant j == i ==> len >= 0;\nloop invariant j != i ==> len <= BASE_SZ;\nloop invariant len >= 0 ==> i == j ==> i < BASE_SZ;\nloop invariant len <= BASE_SZ ==> i != j ==> i <= BASE_SZ;\nloop invariant i == j ==> len >= 0;\nloop invariant i != j ==> len <= BASE_SZ;\nloop invariant j == i ==> len >= 0;\nloop invariant j != i ==> len <= BASE_SZ;\nloop invariant len >= 0 ==> i == j ==> i < BASE_SZ;\nloop invariant len <= BASE_SZ ==> i != j ==> i <= BASE_SZ;\nloop invariant i == j ==> len >= 0;\nloop invariant i != j ==> len <= BASE_SZ;\nloop invariant j == i ==> len >= 0;\nloop invariant j != i ==> len <= BASE_SZ;\nloop invariant len >= 0 ==> i == j ==> i < BASE_SZ;\nloop invariant len <= BASE_SZ ==> i != j ==> i <= BASE_SZ;\nloop invariant i == j ==> len >= 0;\nloop invariant i != j ==> len <= BASE_SZ;\nloop invariant j == i ==> len >= 0;\nloop invariant j != i ==> len <= BASE_SZ;\nloop invariant len >= 0 ==> i == j ==> i < BASE_SZ;\nloop invariant len <= BASE_SZ ==> i != j ==> i <= BASE_SZ;\nloop invariant i == j ==> len >= 0;\nloop invariant i != j ==> len <= BASE_SZ;\nloop invariant j == i ==> len >= 0;\nloop invariant j != i ==> len <= BASE_SZ;\nloop invariant len >= 0 ==> i == j ==> i < BASE_SZ;\nloop invariant len <= BASE_SZ ==> i != j ==> i <= BASE_SZ;\nloop invariant i == j ==> len >= 0;\nloop invariant i != j ==> len <= BASE_SZ;\nloop invariant j == i ==> len >= 0;\nloop invariant j != i ==> len <= BASE_SZ;\nloop invariant len >= 0 ==> i == j ==> i < BASE_SZ;\nloop invariant len <= BASE_SZ ==> i != j ==> i <= BASE_SZ;\nloop invariant i == j ==> len >= 0;\nloop invariant i != j ==> len <= BASE_SZ;\nloop invariant j == i ==> len >= 0;\nloop invariant j != i ==> len <= BASE_SZ;\nloop invariant len >= 0 ==> i == j ==> i < BASE_SZ;\nloop invariant len <= BASE_SZ ==> i != j ==> i <= BASE_SZ;\nloop invariant i == j ==> len >= 0;\nloop invariant i != j ==> len <= BASE_SZ;\nloop invariant j == i ==> len >= 0;\nloop invariant j != i ==> len <= BASE_SZ;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint BASE_SZ;\nint __BLAST_NONDET;\nint main ()\n{\n  \n  int i;\n  int j;\n  int len = BASE_SZ;\n\n  if(BASE_SZ > 0 ); else goto END;\n\n  {;\n//@ assert( 0 <= BASE_SZ-1 );\n}\n\n  if (len == 0)\n    goto END; \n  \n  i = 0;\n  j = 0;\n  /*@\nloop invariant i1: 0 <= i <= BASE_SZ;\nloop invariant i2: 0 <= j <= BASE_SZ;\nloop invariant i3: len >= 0;\nloop invariant i4: i == j ==> i < BASE_SZ;\nloop invariant i5: i != j ==> i <= BASE_SZ;\nloop invariant i6: j != i ==> j <= BASE_SZ;\nloop invariant i7: i == j ==> len >= 0;\nloop invariant i8: i != j ==> len <= BASE_SZ;\nloop invariant i9: j == i ==> len >= 0;\nloop invariant i10: j != i ==> len <= BASE_SZ;\nloop invariant i11: len >= 0 ==> i == j;\nloop invariant i12: len <= BASE_SZ ==> i != j;\nloop invariant i13: i == j ==> j == i;\nloop invariant i14: i != j ==> i <= j;\nloop invariant i15: j != i ==> j <= i;\nloop invariant i16: len >= 0 ==> i == j ==> i < BASE_SZ;\nloop invariant i17: len <= BASE_SZ ==> i != j ==> i <= BASE_SZ;\n*/\nwhile (1) {\n    if ( len == 0 ){ \n      goto END;\n    } else {\n      {;\n//@ assert( 0<= j );\n}\n {;\n//@ assert(j < BASE_SZ);\n}\n\n      {;\n//@ assert( 0<= i );\n}\n {;\n//@ assert(i < BASE_SZ );\n}\n\n      if ( __BLAST_NONDET ) {\n        i++;\n        j++;\n        goto END;\n      }\n    }\n    i ++;\n    j ++;\n    len --;\n  }\n\n END:  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 158,
                "annotations": "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant i3;\nloop invariant i4;\nloop invariant i5;\nloop invariant i6;\nloop invariant i7;\nloop invariant i8;\nloop invariant i9;\nloop invariant i10;\nloop invariant i11;\nloop invariant i12;\nloop invariant i13;\nloop invariant i14;\nloop invariant i15;\nloop invariant i16;\nloop invariant i17;\nloop invariant i18;\nloop invariant i19;\nloop invariant i20;\nloop invariant i21;\nloop invariant i22;\nloop invariant i23;\nloop invariant i24;\nloop invariant i25;\nloop invariant i26;\nloop invariant i27;\nloop invariant i28;\nloop invariant i29;\nloop invariant i30;\nloop invariant i31;\nloop invariant i32;\nloop invariant i33;\nloop invariant i34;\nloop invariant i35;\nloop invariant i36;\nloop invariant i37;\nloop invariant i38;\nloop invariant i39;\nloop invariant i40;\nloop invariant i41;\nloop invariant i42;\nloop invariant i43;\nloop invariant i44;\nloop invariant i45;\nloop invariant i46;\nloop invariant i47;\nloop invariant i48;\nloop invariant i49;\nloop invariant i50;\nloop invariant i51;\nloop invariant i52;\nloop invariant i53;\nloop invariant i54;\nloop invariant i55;\nloop invariant i56;\nloop invariant i57;\nloop invariant i58;\nloop invariant i59;\nloop invariant i60;\nloop invariant i61;\nloop invariant i62;\nloop invariant i63;\nloop invariant i64;\nloop invariant i65;\nloop invariant i66;\nloop invariant i67;\nloop invariant i68;\nloop invariant i69;\nloop invariant i70;\nloop invariant i71;\nloop invariant i72;\nloop invariant i73;\nloop invariant i74;\nloop invariant i75;\nloop invariant i76;\nloop invariant i77;\nloop invariant i78;\nloop invariant i79;\nloop invariant i80;\nloop invariant i81;\nloop invariant i82;\nloop invariant i83;\nloop invariant i84;\nloop invariant i85;\nloop invariant i86;\nloop invariant i87;\nloop invariant i88;\nloop invariant i89;\nloop invariant i90;\nloop invariant i91;\nloop invariant i92;\nloop invariant i93;\nloop invariant i94;\nloop invariant i95;\nloop invariant i96;\nloop invariant i97;\nloop invariant i98;\nloop invariant i99;\nloop invariant i100;\nloop invariant i101;\nloop invariant i102;\nloop invariant i103;\nloop invariant i104;\nloop invariant i105;\nloop invariant i106;\nloop invariant i107;\nloop invariant i108;\nloop invariant i109;\nloop invariant i110;\nloop invariant i111;\nloop invariant i112;\nloop invariant i113;\nloop invariant i114;\nloop invariant i115;\nloop invariant i116;\nloop invariant i117;\nloop invariant i118;\nloop invariant i119;\nloop invariant i120;\nloop invariant i121;\nloop invariant i122;\nloop invariant i123;\nloop invariant i124;\nloop invariant i125;\nloop invariant i126;\nloop invariant i127;\nloop invariant i128;\nloop invariant i129;\nloop invariant i130;\nloop invariant i131;\nloop invariant i132;\nloop invariant i133;\nloop invariant i134;\nloop invariant i135;\nloop invariant i136;\nloop invariant i137;\nloop invariant i138;\nloop invariant i139;\nloop invariant i140;\nloop invariant i141;\nloop invariant i142;\nloop invariant i143;\nloop invariant i144;\nloop invariant i145;\nloop invariant i146;\nloop invariant i147;\nloop invariant i148;\nloop invariant i149;\nloop invariant i150;\nloop invariant i151;\nloop invariant i152;\nloop invariant i153;\nloop invariant i154;\nloop invariant i155;\nloop invariant i156;\nloop invariant i157;\nloop invariant i158;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint BASE_SZ;\nint __BLAST_NONDET;\nint main ()\n{\n  \n  int i;\n  int j;\n  int len = BASE_SZ;\n\n  if(BASE_SZ > 0 ); else goto END;\n\n  {;\n//@ assert( 0 <= BASE_SZ-1 );\n}\n\n  if (len == 0)\n    goto END; \n  \n  i = 0;\n  j = 0;\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (1) {\n    if ( len == 0 ){ \n      goto END;\n    } else {\n      {;\n//@ assert( 0<= j );\n}\n {;\n//@ assert(j < BASE_SZ);\n}\n\n      {;\n//@ assert( 0<= i );\n}\n {;\n//@ assert(i < BASE_SZ );\n}\n\n      if ( __BLAST_NONDET ) {\n        i++;\n        j++;\n        goto END;\n      }\n    }\n    i ++;\n    j ++;\n    len --;\n  }\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= BASE_SZ;\nloop invariant 0 <= j <= BASE_SZ;\nloop invariant i <= j;\nloop invariant len == BASE_SZ - (i + j);\nloop invariant (i == 0 && j == 0 && len == BASE_SZ) ==> (i + j <= BASE_SZ);\nloop invariant (len == 0) ==> (i + j == BASE_SZ);\nloop invariant (len > 0) ==> (i + j < BASE_SZ);\nloop invariant (len == 0) ==> (len == BASE_SZ - (i + j));\nloop invariant (len > 0) ==> (len > BASE_SZ - (i + j));\nloop invariant (len == 0) ==> (len == BASE_SZ - (i + j));\nloop invariant (len > 0) ==> (len > BASE_SZ - (i + j));\nloop invariant (len == 0) ==> (len == BASE_SZ - (i + j));\nloop invariant (len > 0) ==> (len > BASE_SZ - (i + j));\nloop invariant (len == 0) ==> (len == BASE_SZ - (i + j));\nloop invariant (len > 0) ==> (len > BASE_SZ - (i + j));\nloop invariant (len == 0) ==> (len == BASE_SZ - (i + j));\nloop invariant (len > 0) ==> (len > BASE_SZ - (i + j));\nloop invariant (len == 0) ==> (len == BASE_SZ - (i + j));\nloop invariant (len > 0) ==> (len > BASE_SZ - (i + j));\nloop invariant (len == 0) ==> (len == BASE_SZ - (i + j));\nloop invariant (len > 0) ==> (len > BASE_SZ - (i + j));\nloop invariant (len == 0) ==> (len == BASE_SZ - (i + j));\nloop invariant (len > 0) ==> (len > BASE_SZ - (i + j));\nloop invariant (len == 0) ==> (len == BASE_SZ - (i + j));\nloop invariant (len > 0) ==> (len > BASE_SZ - (i + j));\nloop invariant (len == 0) ==> (len == BASE_SZ - (i + j));\nloop invariant (len > 0) ==> (len > BASE_SZ - (i + j));\nloop invariant (len == 0) ==> (len == BASE_SZ - (i + j));\nloop invariant (len > 0) ==> (len > BASE_SZ - (i + j));\nloop invariant (len == 0) ==> (len == BASE_SZ - (i + j));\nloop invariant (len > 0) ==> (len > BASE_SZ - (i + j));\nloop invariant (len == 0) ==> (len == BASE_SZ - (i + j));\nloop invariant (len > 0) ==> (len > BASE_SZ - (i + j));\nloop invariant (len == 0) ==> (len == BASE_SZ - (i + j));\nloop invariant (len > 0) ==> (len > BASE_SZ - (i + j));\nloop invariant (len == 0) ==> (len == BASE_SZ - (i + j));\nloop invariant (len > 0) ==> (len > BASE_SZ - (i + j));\nloop invariant (len == 0) ==> (len == BASE_SZ - (i + j));\nloop invariant (len > 0) ==> (len > BASE_SZ - (i + j));\nloop invariant (len == 0) ==> (len == BASE_SZ - (i + j));\nloop invariant (len > 0) ==> (len > BASE_SZ - (i + j));\nloop invariant (len == 0) ==> (len == BASE_SZ - (i + j));\nloop invariant (len > 0) ==> (len > BASE_SZ - (i + j));\nloop invariant (len == 0) ==> (len == BASE_SZ - (i + j));\nloop invariant (len > 0) ==> (len > BASE_SZ - (i + j));\nloop invariant (len == 0) ==> (len == BASE_SZ - (i + j));\nloop invariant (len > 0) ==> (len > BASE_SZ - (i + j));\nloop invariant (len == 0) ==> (len == BASE_SZ - (i + j));\nloop invariant (len > 0) ==> (len > BASE_SZ - (i + j));\nloop invariant (len == 0) ==> (len == BASE_SZ - (i + j));\nloop invariant (len > 0) ==> (len > BASE_SZ - (i + j));\nloop invariant (len == 0) ==> (len == BASE_SZ - (i + j));\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint BASE_SZ;\nint __BLAST_NONDET;\nint main ()\n{\n  \n  int i;\n  int j;\n  int len = BASE_SZ;\n\n  if(BASE_SZ > 0 ); else goto END;\n\n  {;\n//@ assert( 0 <= BASE_SZ-1 );\n}\n\n  if (len == 0)\n    goto END; \n  \n  i = 0;\n  j = 0;\n  /*@\nloop invariant i1: 0 <= i <= BASE_SZ;\nloop invariant i2: 0 <= j <= BASE_SZ;\nloop invariant i3: i <= j;\nloop invariant i4: len == BASE_SZ - (i + j);\nloop invariant i5: (i == 0 && j == 0 && len == BASE_SZ) ==> (i + j <= BASE_SZ);\nloop invariant i6: (len == 0) ==> (i + j == BASE_SZ);\nloop invariant i7: (len > 0) ==> (i + j < BASE_SZ);\nloop invariant i8: (len == 0) ==> (len == BASE_SZ - (i + j));\nloop invariant i9: (len > 0) ==> (len > BASE_SZ - (i + j));\n*/\nwhile (1) {\n    if ( len == 0 ){ \n      goto END;\n    } else {\n      {;\n//@ assert( 0<= j );\n}\n {;\n//@ assert(j < BASE_SZ);\n}\n\n      {;\n//@ assert( 0<= i );\n}\n {;\n//@ assert(i < BASE_SZ );\n}\n\n      if ( __BLAST_NONDET ) {\n        i++;\n        j++;\n        goto END;\n      }\n    }\n    i ++;\n    j ++;\n    len --;\n  }\n\n END:  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant len >= 0;\nloop invariant BASE_SZ >= 0;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant i <= j;\nloop invariant len <= BASE_SZ - i;\nloop invariant len <= BASE_SZ - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\nloop invariant len <= BASE_SZ - i - j;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint BASE_SZ;\nint __BLAST_NONDET;\nint main ()\n{\n  \n  int i;\n  int j;\n  int len = BASE_SZ;\n\n  if(BASE_SZ > 0 ); else goto END;\n\n  {;\n//@ assert( 0 <= BASE_SZ-1 );\n}\n\n  if (len == 0)\n    goto END; \n  \n  i = 0;\n  j = 0;\n  /*@\nloop invariant i1: i >= 0;\nloop invariant i2: j >= 0;\nloop invariant i3: len >= 0;\nloop invariant i4: BASE_SZ >= 0;\nloop invariant i5: i <= BASE_SZ;\nloop invariant i6: j <= BASE_SZ;\nloop invariant i7: len <= BASE_SZ;\nloop invariant i8: i <= j;\nloop invariant i9: len <= BASE_SZ - i;\nloop invariant i10: len <= BASE_SZ - j;\nloop invariant i11: len <= BASE_SZ - i - j;\n*/\nwhile (1) {\n    if ( len == 0 ){ \n      goto END;\n    } else {\n      {;\n//@ assert( 0<= j );\n}\n {;\n//@ assert(j < BASE_SZ);\n}\n\n      {;\n//@ assert( 0<= i );\n}\n {;\n//@ assert(i < BASE_SZ );\n}\n\n      if ( __BLAST_NONDET ) {\n        i++;\n        j++;\n        goto END;\n      }\n    }\n    i ++;\n    j ++;\n    len --;\n  }\n\n END:  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= j < BASE_SZ;\nloop invariant 0 <= i < BASE_SZ;\nloop invariant len >= 0;\nloop invariant len <= BASE_SZ;\nloop invariant (len == 0) ==> (i == j);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint BASE_SZ;\nint __BLAST_NONDET;\nint main ()\n{\n  \n  int i;\n  int j;\n  int len = BASE_SZ;\n\n  if(BASE_SZ > 0 ); else goto END;\n\n  {;\n//@ assert( 0 <= BASE_SZ-1 );\n}\n\n  if (len == 0)\n    goto END; \n  \n  i = 0;\n  j = 0;\n  /*@\nloop invariant i1: 0 <= j < BASE_SZ;\nloop invariant i2: 0 <= i < BASE_SZ;\nloop invariant i3: len >= 0;\nloop invariant i4: len <= BASE_SZ;\nloop invariant i5: (len == 0) ==> (i == j);\n*/\nwhile (1) {\n    if ( len == 0 ){ \n      goto END;\n    } else {\n      {;\n//@ assert( 0<= j );\n}\n {;\n//@ assert(j < BASE_SZ);\n}\n\n      {;\n//@ assert( 0<= i );\n}\n {;\n//@ assert(i < BASE_SZ );\n}\n\n      if ( __BLAST_NONDET ) {\n        i++;\n        j++;\n        goto END;\n      }\n    }\n    i ++;\n    j ++;\n    len --;\n  }\n\n END:  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= len <= BASE_SZ;\nloop invariant ( i <= BASE_SZ-1 ==> i >= 0 );\nloop invariant ( j <= BASE_SZ-1 ==> j >= 0 );\nloop invariant ( i <= BASE_SZ-1 ==> j <= i );\nloop invariant ( i <= BASE_SZ-1 ==> i == j ==> len == 0 );\nloop invariant ( i <= BASE_SZ-1 ==> j <= i ==> len == 0 );\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint BASE_SZ;\nint __BLAST_NONDET;\nint main ()\n{\n  \n  int i;\n  int j;\n  int len = BASE_SZ;\n\n  if(BASE_SZ > 0 ); else goto END;\n\n  {;\n//@ assert( 0 <= BASE_SZ-1 );\n}\n\n  if (len == 0)\n    goto END; \n  \n  i = 0;\n  j = 0;\n  /*@\nloop invariant i1: 0 <= len <= BASE_SZ;\nloop invariant i2: ( i <= BASE_SZ-1 ==> i >= 0 );\nloop invariant i3: ( j <= BASE_SZ-1 ==> j >= 0 );\nloop invariant i4: ( i <= BASE_SZ-1 ==> j <= i );\nloop invariant i5: ( i <= BASE_SZ-1 ==> i == j ==> len == 0 );\nloop invariant i6: ( i <= BASE_SZ-1 ==> j <= i ==> len == 0 );\n*/\nwhile (1) {\n    if ( len == 0 ){ \n      goto END;\n    } else {\n      {;\n//@ assert( 0<= j );\n}\n {;\n//@ assert(j < BASE_SZ);\n}\n\n      {;\n//@ assert( 0<= i );\n}\n {;\n//@ assert(i < BASE_SZ );\n}\n\n      if ( __BLAST_NONDET ) {\n        i++;\n        j++;\n        goto END;\n      }\n    }\n    i ++;\n    j ++;\n    len --;\n  }\n\n END:  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= BASE_SZ;\nloop invariant 0 <= j <= BASE_SZ;\nloop invariant i >= j;\nloop invariant i + j <= BASE_SZ;\nloop invariant len >= 0;\nloop invariant len <= BASE_SZ;\nloop invariant len >= i + j;\nloop invariant len <= BASE_SZ - (i + j);\nloop invariant len >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint BASE_SZ;\nint __BLAST_NONDET;\nint main ()\n{\n  \n  int i;\n  int j;\n  int len = BASE_SZ;\n\n  if(BASE_SZ > 0 ); else goto END;\n\n  {;\n//@ assert( 0 <= BASE_SZ-1 );\n}\n\n  if (len == 0)\n    goto END; \n  \n  i = 0;\n  j = 0;\n  /*@\nloop invariant i1: 0 <= i <= BASE_SZ;\nloop invariant i2: 0 <= j <= BASE_SZ;\nloop invariant i3: i >= j;\nloop invariant i4: i + j <= BASE_SZ;\nloop invariant i5: len >= 0;\nloop invariant i6: len <= BASE_SZ;\nloop invariant i7: len >= i + j;\nloop invariant i8: len <= BASE_SZ - (i + j);\n*/\nwhile (1) {\n    if ( len == 0 ){ \n      goto END;\n    } else {\n      {;\n//@ assert( 0<= j );\n}\n {;\n//@ assert(j < BASE_SZ);\n}\n\n      {;\n//@ assert( 0<= i );\n}\n {;\n//@ assert(i < BASE_SZ );\n}\n\n      if ( __BLAST_NONDET ) {\n        i++;\n        j++;\n        goto END;\n      }\n    }\n    i ++;\n    j ++;\n    len --;\n  }\n\n END:  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= len;\nloop invariant 0 <= j <= i;\nloop invariant 0 <= len <= BASE_SZ;\nloop invariant 0 <= BASE_SZ;\nloop invariant 0 <= i + j <= len + j;\nloop invariant 0 <= len - 1 <= BASE_SZ - 1;\nloop invariant 0 <= j <= len - 1;\nloop invariant 0 <= i <= len;\nloop invariant 0 <= len <= BASE_SZ;\nloop invariant 0 <= j <= i;\nloop invariant 0 <= len <= BASE_SZ;\nloop invariant 0 <= i <= len;\nloop invariant 0 <= j <= i;\nloop invariant 0 <= len <= BASE_SZ;\nloop invariant 0 <= j <= len;\nloop invariant 0 <= i <= len;\nloop invariant 0 <= len <= BASE_SZ;\nloop invariant 0 <= j <= len;\nloop invariant 0 <= i <= len;\nloop invariant 0 <= len <= BASE_SZ;\nloop invariant 0 <= j <= len;\nloop invariant 0 <= i <= len;\nloop invariant 0 <= len <= BASE_SZ;\nloop invariant 0 <= i <= len;\nloop invariant 0 <= j <= i;\nloop invariant 0 <= len <= BASE_SZ;\nloop invariant 0 <= i <= len;\nloop invariant 0 <= j <= i;\nloop invariant 0 <= len <= BASE_SZ;\nloop invariant 0 <= j <= len;\nloop invariant 0 <= i <= len;\nloop invariant 0 <= len <= BASE_SZ;\nloop invariant 0 <= i <= len;\nloop invariant 0 <= j <= len;\nloop invariant 0 <= i <= len;\nloop invariant 0 <= len <= BASE_SZ;\nloop invariant 0 <= j <= len;\nloop invariant 0 <= i <= len;\nloop invariant 0 <= len <= BASE_SZ;\nloop invariant 0 <= i <= len;\nloop invariant 0 <= j <= i;\nloop invariant 0 <= len <= BASE_SZ;\nloop invariant 0 <= i <= len;\nloop invariant 0 <= j <= i;\nloop invariant 0 <= len <= BASE_SZ;\nloop invariant 0 <= j <= len;\nloop invariant 0 <= i <= len;\nloop invariant 0 <= len <= BASE_SZ;\nloop invariant 0 <= i <= len;\nloop invariant 0 <= j <= len;\nloop invariant 0 <= i <= len;\nloop invariant 0 <= len <= BASE_SZ;\nloop invariant 0 <= j <= len;\nloop invariant 0 <= i <= len;\nloop invariant 0 <= len <= BASE_SZ;\nloop invariant 0 <= i <= len;\nloop invariant 0 <= j <= i;\nloop invariant 0 <= len <= BASE_SZ;\nloop invariant 0 <= i <= len;\nloop invariant 0 <= j <= i;\nloop invariant 0 <= len <= BASE_SZ;\nloop invariant 0 <= j <= len;\nloop invariant 0 <= i <= len;\nloop invariant 0 <= len <= BASE_SZ;\nloop invariant 0 <= i <= len;\nloop invariant 0 <= j <= len;\nloop invariant 0 <= i <= len;\nloop invariant 0 <= len <= BASE_SZ;\nloop invariant 0 <= j <= len;\nloop invariant 0 <= i <= len;\nloop invariant 0 <= len <= BASE_SZ;\nloop invariant 0 <= i <= len;\nloop invariant 0 <= j <= i;\nloop invariant 0 <= len <= BASE_SZ;\nloop invariant 0 <= i <= len;\nloop invariant 0 <= j <= i;\nloop invariant 0 <= len <= BASE_SZ;\nloop invariant 0 <= j <= len;\nloop invariant 0 <= i <= len;\nloop invariant 0 <= len <= BASE_SZ;\nloop invariant 0 <= i <= len;\nloop invariant 0 <= j <= len;\nloop invariant 0 <= i <= len;\nloop invariant 0 <= len <= BASE_SZ;\nloop invariant 0 <= j <= len;\nloop invariant 0 <= i <= len;\nloop invariant 0 <= len <= BASE_SZ;\nloop invariant 0 <= i <= len;\nloop invariant 0 <= j <= i;\nloop invariant 0 <= len <= BASE_SZ;\nloop invariant 0 <= i <= len;\nloop invariant 0 <= j <= i;\nloop invariant 0 <= len <= BASE_SZ;\nloop invariant 0 <= j <= len;\nloop invariant 0 <= i <= len;\nloop invariant 0 <= len <= BASE_SZ;\nloop invariant 0 <= i <= len;\nloop invariant 0 <= j <= len;\nloop invariant 0 <= i <= len;\nloop invariant 0 <= len <= BASE_SZ;\nloop invariant 0 <= j <= len;\nloop invariant 0 <= i <= len;\nloop invariant 0 <= len <= BASE_SZ;\nloop invariant 0 <= i <= len;\nloop invariant 0 <= j <= i;\nloop invariant 0 <= len <= BASE_SZ;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint BASE_SZ;\nint __BLAST_NONDET;\nint main ()\n{\n  \n  int i;\n  int j;\n  int len = BASE_SZ;\n\n  if(BASE_SZ > 0 ); else goto END;\n\n  {;\n//@ assert( 0 <= BASE_SZ-1 );\n}\n\n  if (len == 0)\n    goto END; \n  \n  i = 0;\n  j = 0;\n  /*@\nloop invariant i1: 1 <= i <= len;\nloop invariant i2: 0 <= j <= i;\nloop invariant i3: 0 <= len <= BASE_SZ;\nloop invariant i4: 0 <= BASE_SZ;\nloop invariant i5: 0 <= i + j <= len + j;\nloop invariant i6: 0 <= len - 1 <= BASE_SZ - 1;\nloop invariant i7: 0 <= j <= len - 1;\nloop invariant i8: 0 <= i <= len;\nloop invariant i9: 0 <= j <= len;\n*/\nwhile (1) {\n    if ( len == 0 ){ \n      goto END;\n    } else {\n      {;\n//@ assert( 0<= j );\n}\n {;\n//@ assert(j < BASE_SZ);\n}\n\n      {;\n//@ assert( 0<= i );\n}\n {;\n//@ assert(i < BASE_SZ );\n}\n\n      if ( __BLAST_NONDET ) {\n        i++;\n        j++;\n        goto END;\n      }\n    }\n    i ++;\n    j ++;\n    len --;\n  }\n\n END:  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint BASE_SZ;\nint __BLAST_NONDET;\nint main ()\n{\n  \n  int i;\n  int j;\n  int len = BASE_SZ;\n\n  if(BASE_SZ > 0 ); else goto END;\n\n  {;\n//@ assert( 0 <= BASE_SZ-1 );\n}\n\n  if (len == 0)\n    goto END; \n  \n  i = 0;\n  j = 0;\n  /*@\n\n*/\nwhile (1) {\n    if ( len == 0 ){ \n      goto END;\n    } else {\n      {;\n//@ assert( 0<= j );\n}\n {;\n//@ assert(j < BASE_SZ);\n}\n\n      {;\n//@ assert( 0<= i );\n}\n {;\n//@ assert(i < BASE_SZ );\n}\n\n      if ( __BLAST_NONDET ) {\n        i++;\n        j++;\n        goto END;\n      }\n    }\n    i ++;\n    j ++;\n    len --;\n  }\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= j <= BASE_SZ;\nloop invariant 0 <= i <= BASE_SZ;\nloop invariant j <= i;\nloop invariant i == j + len;\nloop invariant i <= BASE_SZ + len;\nloop invariant j <= BASE_SZ + len;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint BASE_SZ;\nint __BLAST_NONDET;\nint main ()\n{\n  \n  int i;\n  int j;\n  int len = BASE_SZ;\n\n  if(BASE_SZ > 0 ); else goto END;\n\n  {;\n//@ assert( 0 <= BASE_SZ-1 );\n}\n\n  if (len == 0)\n    goto END; \n  \n  i = 0;\n  j = 0;\n  /*@\nloop invariant i1: 0 <= j <= BASE_SZ;\nloop invariant i2: 0 <= i <= BASE_SZ;\nloop invariant i3: j <= i;\nloop invariant i4: i == j + len;\nloop invariant i5: i <= BASE_SZ + len;\nloop invariant i6: j <= BASE_SZ + len;\n*/\nwhile (1) {\n    if ( len == 0 ){ \n      goto END;\n    } else {\n      {;\n//@ assert( 0<= j );\n}\n {;\n//@ assert(j < BASE_SZ);\n}\n\n      {;\n//@ assert( 0<= i );\n}\n {;\n//@ assert(i < BASE_SZ );\n}\n\n      if ( __BLAST_NONDET ) {\n        i++;\n        j++;\n        goto END;\n      }\n    }\n    i ++;\n    j ++;\n    len --;\n  }\n\n END:  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= j <= BASE_SZ + 1;\nloop invariant 0 <= i <= BASE_SZ + 1;\nloop invariant len >= 0 && len <= BASE_SZ;\nloop invariant (j == 0 && i == 0) ==> (len == BASE_SZ);\nloop invariant (j < BASE_SZ && i < BASE_SZ) ==> (__BLAST_NONDET ==> (j == i && len == 0));\nloop invariant (j >= BASE_SZ) ==> (i == j && len == 0);\nloop invariant (i >= BASE_SZ) ==> (j == i && len == 0);\nloop invariant (len == 0) ==> (j == BASE_SZ && i == BASE_SZ);\nloop invariant (__BLAST_NONDET ==> (j == i && len == 0));\nloop invariant (j == 0 && i == 0) ==> (len == BASE_SZ);\nloop invariant 0 <= j <= BASE_SZ + 1;\nloop invariant 0 <= i <= BASE_SZ + 1;\nloop invariant len >= 0 && len <= BASE_SZ;\nloop invariant (j == 0 && i == 0) ==> (len == BASE_SZ);\nloop invariant (j < BASE_SZ && i < BASE_SZ) ==> (__BLAST_NONDET ==> (j == i && len == 0));\nloop invariant (j >= BASE_SZ) ==> (i == j && len == 0);\nloop invariant (i >= BASE_SZ) ==> (j == i && len == 0);\nloop invariant (len == 0) ==> (j == BASE_SZ && i == BASE_SZ);\nloop invariant (__BLAST_NONDET ==> (j == i && len == 0));\nloop invariant (j == 0 && i == 0) ==> (len == BASE_SZ);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint BASE_SZ;\nint __BLAST_NONDET;\nint main ()\n{\n  \n  int i;\n  int j;\n  int len = BASE_SZ;\n\n  if(BASE_SZ > 0 ); else goto END;\n\n  {;\n//@ assert( 0 <= BASE_SZ-1 );\n}\n\n  if (len == 0)\n    goto END; \n  \n  i = 0;\n  j = 0;\n  /*@\nloop invariant i1: 0 <= j <= BASE_SZ + 1;\nloop invariant i2: 0 <= i <= BASE_SZ + 1;\nloop invariant i3: len >= 0 && len <= BASE_SZ;\nloop invariant i4: (j == 0 && i == 0) ==> (len == BASE_SZ);\nloop invariant i5: (j < BASE_SZ && i < BASE_SZ) ==> (__BLAST_NONDET ==> (j == i && len == 0));\nloop invariant i6: (j >= BASE_SZ) ==> (i == j && len == 0);\nloop invariant i7: (i >= BASE_SZ) ==> (j == i && len == 0);\nloop invariant i8: (len == 0) ==> (j == BASE_SZ && i == BASE_SZ);\nloop invariant i9: (__BLAST_NONDET ==> (j == i && len == 0));\n*/\nwhile (1) {\n    if ( len == 0 ){ \n      goto END;\n    } else {\n      {;\n//@ assert( 0<= j );\n}\n {;\n//@ assert(j < BASE_SZ);\n}\n\n      {;\n//@ assert( 0<= i );\n}\n {;\n//@ assert(i < BASE_SZ );\n}\n\n      if ( __BLAST_NONDET ) {\n        i++;\n        j++;\n        goto END;\n      }\n    }\n    i ++;\n    j ++;\n    len --;\n  }\n\n END:  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= len <= BASE_SZ;\nloop invariant 0 <= i <= BASE_SZ;\nloop invariant 0 <= j <= BASE_SZ;\nloop invariant i >= j;\nloop invariant i >= len;\nloop invariant j >= len;\nloop invariant len >= 0;\nloop invariant BASE_SZ >= 0;\nloop invariant i + j == 2 * len;\nloop invariant i <= 2 * len;\nloop invariant j <= 2 * len;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant len <= BASE_SZ;\nloop invariant len >= 0;\nloop invariant i + j == 2 * len;\nloop invariant len >= 0;\nloop invariant i + j == 2 * len;\nloop invariant len >= 0;\nloop invariant i + j == 2 * len;\nloop invariant len >= 0;\nloop invariant i + j == 2 * len;\nloop invariant len >= 0;\nloop invariant i + j == 2 * len;\nloop invariant len >= 0;\nloop invariant i + j == 2 * len;\nloop invariant len >= 0;\nloop invariant i + j == 2 * len;\nloop invariant len >= 0;\nloop invariant i + j == 2 * len;\nloop invariant len >= 0;\nloop invariant i + j == 2 * len;\nloop invariant len >= 0;\nloop invariant i + j == 2 * len;\nloop invariant len >= 0;\nloop invariant i + j == 2 * len;\nloop invariant len >= 0;\nloop invariant i + j == 2 * len;\nloop invariant len >= 0;\nloop invariant i + j == 2 * len;\nloop invariant len >= 0;\nloop invariant i + j == 2 * len;\nloop invariant len >= 0;\nloop invariant i + j == 2 * len;\nloop invariant len >= 0;\nloop invariant i + j == 2 * len;\nloop invariant len >= 0;\nloop invariant i + j == 2 * len;\nloop invariant len >= 0;\nloop invariant i + j == 2 * len;\nloop invariant len >= 0;\nloop invariant i + j == 2 * len;\nloop invariant len >= 0;\nloop invariant i + j == 2 * len;\nloop invariant len >= 0;\nloop invariant i + j == 2 * len;\nloop invariant len >= 0;\nloop invariant i + j == 2 * len;\nloop invariant len >= 0;\nloop invariant i + j == 2 * len;\nloop invariant len >= 0;\nloop invariant i + j == 2 * len;\nloop invariant len >= 0;\nloop invariant i + j == 2 * len;\nloop invariant len >= 0;\nloop invariant i + j == 2 * len;\nloop invariant len >= 0;\nloop invariant i + j == 2 * len;\nloop invariant len >= 0;\nloop invariant i + j == 2 * len;\nloop invariant len >= 0;\nloop invariant i + j == 2 * len;\nloop invariant len >= 0;\nloop invariant i + j == 2 * len;\nloop invariant len >= 0;\nloop invariant i + j == 2 * len;\nloop invariant len >= 0;\nloop invariant i + j == 2 * len;\nloop invariant len >= 0;\nloop invariant i + j == 2 * len;\nloop invariant len >= 0;\nloop invariant i + j == 2 * len;\nloop invariant len >= 0;\nloop invariant i + j == 2 * len;\nloop invariant len >= 0;\nloop invariant i + j == 2 * len;\nloop invariant len >= 0;\nloop invariant i + j == 2 * len;\nloop invariant len >= 0;\nloop invariant i + j == 2 * len;\nloop invariant len >= 0;\nloop invariant i + j == 2 * len;\nloop invariant len >= 0;\nloop invariant i + j == 2 * len;\nloop invariant len >= 0;\nloop invariant i + j == 2 * len;\nloop invariant len >= 0;\nloop invariant i + j == 2 * len;\nloop invariant len >= 0;\nloop invariant i + j == 2 * len;\nloop invariant len >= 0;\nloop invariant i + j == 2 * len;\nloop invariant len >= 0;\nloop invariant i + j == 2 * len;\nloop invariant len >= 0;\nloop invariant i + j == 2 * len;\nloop invariant len >= 0;\nloop invariant i + j == 2 * len;\nloop invariant len >= 0;\nloop invariant i + j == 2 * len;\nloop invariant len >= 0;\nloop invariant i + j == 2 * len;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint BASE_SZ;\nint __BLAST_NONDET;\nint main ()\n{\n  \n  int i;\n  int j;\n  int len = BASE_SZ;\n\n  if(BASE_SZ > 0 ); else goto END;\n\n  {;\n//@ assert( 0 <= BASE_SZ-1 );\n}\n\n  if (len == 0)\n    goto END; \n  \n  i = 0;\n  j = 0;\n  /*@\nloop invariant i1: 0 <= len <= BASE_SZ;\nloop invariant i2: 0 <= i <= BASE_SZ;\nloop invariant i3: 0 <= j <= BASE_SZ;\nloop invariant i4: i >= j;\nloop invariant i5: i >= len;\nloop invariant i6: j >= len;\nloop invariant i7: len >= 0;\nloop invariant i8: BASE_SZ >= 0;\nloop invariant i9: i + j == 2 * len;\nloop invariant i10: i <= 2 * len;\nloop invariant i11: j <= 2 * len;\nloop invariant i12: i >= 0;\nloop invariant i13: j >= 0;\nloop invariant i14: len <= BASE_SZ;\n*/\nwhile (1) {\n    if ( len == 0 ){ \n      goto END;\n    } else {\n      {;\n//@ assert( 0<= j );\n}\n {;\n//@ assert(j < BASE_SZ);\n}\n\n      {;\n//@ assert( 0<= i );\n}\n {;\n//@ assert(i < BASE_SZ );\n}\n\n      if ( __BLAST_NONDET ) {\n        i++;\n        j++;\n        goto END;\n      }\n    }\n    i ++;\n    j ++;\n    len --;\n  }\n\n END:  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= BASE_SZ;\nloop invariant 0 <= j <= BASE_SZ;\nloop invariant i <= j;\nloop invariant i + j <= BASE_SZ;\nloop invariant i + j >= 0;\nloop invariant i + j <= BASE_SZ;\nloop invariant i + j >= 0;\nloop invariant i + j <= BASE_SZ;\nloop invariant i + j >= 0;\nloop invariant i + j <= BASE_SZ;\nloop invariant i + j >= 0;\nloop invariant i + j <= BASE_SZ;\nloop invariant i + j >= 0;\nloop invariant i + j <= BASE_SZ;\nloop invariant i + j >= 0;\nloop invariant i + j <= BASE_SZ;\nloop invariant i + j >= 0;\nloop invariant i + j <= BASE_SZ;\nloop invariant i + j >= 0;\nloop invariant i + j <= BASE_SZ;\nloop invariant i + j >= 0;\nloop invariant i + j <= BASE_SZ;\nloop invariant i + j >= 0;\nloop invariant i + j <= BASE_SZ;\nloop invariant i + j >= 0;\nloop invariant i + j <= BASE_SZ;\nloop invariant i + j >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint BASE_SZ;\nint __BLAST_NONDET;\nint main ()\n{\n  \n  int i;\n  int j;\n  int len = BASE_SZ;\n\n  if(BASE_SZ > 0 ); else goto END;\n\n  {;\n//@ assert( 0 <= BASE_SZ-1 );\n}\n\n  if (len == 0)\n    goto END; \n  \n  i = 0;\n  j = 0;\n  /*@\nloop invariant i1: 0 <= i <= BASE_SZ;\nloop invariant i2: 0 <= j <= BASE_SZ;\nloop invariant i3: i <= j;\nloop invariant i4: i + j <= BASE_SZ;\nloop invariant i5: i + j >= 0;\n*/\nwhile (1) {\n    if ( len == 0 ){ \n      goto END;\n    } else {\n      {;\n//@ assert( 0<= j );\n}\n {;\n//@ assert(j < BASE_SZ);\n}\n\n      {;\n//@ assert( 0<= i );\n}\n {;\n//@ assert(i < BASE_SZ );\n}\n\n      if ( __BLAST_NONDET ) {\n        i++;\n        j++;\n        goto END;\n      }\n    }\n    i ++;\n    j ++;\n    len --;\n  }\n\n END:  return 0;\n}",
                "checker_output_after_prune": true
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 54: unbound logic variable i1. Ignoring loop annotation",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint BASE_SZ;\nint __BLAST_NONDET;\nint main ()\n{\n  \n  int i;\n  int j;\n  int len = BASE_SZ;\n\n  if(BASE_SZ > 0 ); else goto END;\n\n  {;\n//@ assert( 0 <= BASE_SZ-1 );\n}\n\n  if (len == 0)\n    goto END; \n  \n  i = 0;\n  j = 0;\n  /*@\nloop invariant i1: 0 <= j < BASE_SZ;\nloop invariant i2: 0 <= i < BASE_SZ;\nloop invariant i3: len >= 0;\nloop invariant i4: len <= BASE_SZ;\nloop invariant i5: j <= i;\nloop invariant i6: j <= len;\nloop invariant i7: i <= len;\nloop invariant i8: i <= BASE_SZ;\nloop invariant i9: j <= BASE_SZ;\nloop invariant i10: 0 <= i <= BASE_SZ;\nloop invariant i11: 0 <= j <= BASE_SZ;\nloop invariant i12: i >= j;\nloop invariant i13: i == j ==> i < BASE_SZ;\nloop invariant i14: i != j ==> i <= BASE_SZ;\nloop invariant i15: j != i ==> j <= BASE_SZ;\nloop invariant i16: i == j ==> len >= 0;\nloop invariant i17: i != j ==> len <= BASE_SZ;\nloop invariant i18: j == i ==> len >= 0;\nloop invariant i19: j != i ==> len <= BASE_SZ;\nloop invariant i20: len >= 0 ==> i == j;\nloop invariant i21: len <= BASE_SZ ==> i != j;\nloop invariant i22: i == j ==> j == i;\nloop invariant i23: i != j ==> i <= j;\nloop invariant i24: j != i ==> j <= i;\nloop invariant i25: len >= 0 ==> i == j ==> i < BASE_SZ;\nloop invariant i26: len <= BASE_SZ ==> i != j ==> i <= BASE_SZ;\nloop invariant i27: i1;\nloop invariant i28: i2;\nloop invariant i29: i3;\nloop invariant i30: i4;\nloop invariant i31: i5;\nloop invariant i32: i6;\nloop invariant i33: i7;\nloop invariant i34: i8;\nloop invariant i35: i9;\nloop invariant i36: i10;\nloop invariant i37: i11;\nloop invariant i38: i12;\nloop invariant i39: i13;\nloop invariant i40: i14;\nloop invariant i41: i15;\nloop invariant i42: i16;\nloop invariant i43: i17;\nloop invariant i44: i18;\nloop invariant i45: i19;\nloop invariant i46: i20;\nloop invariant i47: i21;\nloop invariant i48: i22;\nloop invariant i49: i23;\nloop invariant i50: i24;\nloop invariant i51: i25;\nloop invariant i52: i26;\nloop invariant i53: i27;\nloop invariant i54: i28;\nloop invariant i55: i29;\nloop invariant i56: i30;\nloop invariant i57: i31;\nloop invariant i58: i32;\nloop invariant i59: i33;\nloop invariant i60: i34;\nloop invariant i61: i35;\nloop invariant i62: i36;\nloop invariant i63: i37;\nloop invariant i64: i38;\nloop invariant i65: i39;\nloop invariant i66: i40;\nloop invariant i67: i41;\nloop invariant i68: i42;\nloop invariant i69: i43;\nloop invariant i70: i44;\nloop invariant i71: i45;\nloop invariant i72: i46;\nloop invariant i73: i47;\nloop invariant i74: i48;\nloop invariant i75: i49;\nloop invariant i76: i50;\nloop invariant i77: i51;\nloop invariant i78: i52;\nloop invariant i79: i53;\nloop invariant i80: i54;\nloop invariant i81: i55;\nloop invariant i82: i56;\nloop invariant i83: i57;\nloop invariant i84: i58;\nloop invariant i85: i59;\nloop invariant i86: i60;\nloop invariant i87: i61;\nloop invariant i88: i62;\nloop invariant i89: i63;\nloop invariant i90: i64;\nloop invariant i91: i65;\nloop invariant i92: i66;\nloop invariant i93: i67;\nloop invariant i94: i68;\nloop invariant i95: i69;\nloop invariant i96: i70;\nloop invariant i97: i71;\nloop invariant i98: i72;\nloop invariant i99: i73;\nloop invariant i100: i74;\nloop invariant i101: i75;\nloop invariant i102: i76;\nloop invariant i103: i77;\nloop invariant i104: i78;\nloop invariant i105: i79;\nloop invariant i106: i80;\nloop invariant i107: i81;\nloop invariant i108: i82;\nloop invariant i109: i83;\nloop invariant i110: i84;\nloop invariant i111: i85;\nloop invariant i112: i86;\nloop invariant i113: i87;\nloop invariant i114: i88;\nloop invariant i115: i89;\nloop invariant i116: i90;\nloop invariant i117: i91;\nloop invariant i118: i92;\nloop invariant i119: i93;\nloop invariant i120: i94;\nloop invariant i121: i95;\nloop invariant i122: i96;\nloop invariant i123: i97;\nloop invariant i124: i98;\nloop invariant i125: i99;\nloop invariant i126: i100;\nloop invariant i127: i101;\nloop invariant i128: i102;\nloop invariant i129: i103;\nloop invariant i130: i104;\nloop invariant i131: i105;\nloop invariant i132: i106;\nloop invariant i133: i107;\nloop invariant i134: i108;\nloop invariant i135: i109;\nloop invariant i136: i110;\nloop invariant i137: i111;\nloop invariant i138: i112;\nloop invariant i139: i113;\nloop invariant i140: i114;\nloop invariant i141: i115;\nloop invariant i142: i116;\nloop invariant i143: i117;\nloop invariant i144: i118;\nloop invariant i145: i119;\nloop invariant i146: i120;\nloop invariant i147: i121;\nloop invariant i148: i122;\nloop invariant i149: i123;\nloop invariant i150: i124;\nloop invariant i151: i125;\nloop invariant i152: i126;\nloop invariant i153: i127;\nloop invariant i154: i128;\nloop invariant i155: i129;\nloop invariant i156: i130;\nloop invariant i157: i131;\nloop invariant i158: i132;\nloop invariant i159: i133;\nloop invariant i160: i134;\nloop invariant i161: i135;\nloop invariant i162: i136;\nloop invariant i163: i137;\nloop invariant i164: i138;\nloop invariant i165: i139;\nloop invariant i166: i140;\nloop invariant i167: i141;\nloop invariant i168: i142;\nloop invariant i169: i143;\nloop invariant i170: i144;\nloop invariant i171: i145;\nloop invariant i172: i146;\nloop invariant i173: i147;\nloop invariant i174: i148;\nloop invariant i175: i149;\nloop invariant i176: i150;\nloop invariant i177: i151;\nloop invariant i178: i152;\nloop invariant i179: i153;\nloop invariant i180: i154;\nloop invariant i181: i155;\nloop invariant i182: i156;\nloop invariant i183: i157;\nloop invariant i184: i158;\nloop invariant i185: i <= j;\nloop invariant i186: len == BASE_SZ - (i + j);\nloop invariant i187: (i == 0 && j == 0 && len == BASE_SZ) ==> (i + j <= BASE_SZ);\nloop invariant i188: (len == 0) ==> (i + j == BASE_SZ);\nloop invariant i189: (len > 0) ==> (i + j < BASE_SZ);\nloop invariant i190: (len == 0) ==> (len == BASE_SZ - (i + j));\nloop invariant i191: (len > 0) ==> (len > BASE_SZ - (i + j));\nloop invariant i192: i >= 0;\nloop invariant i193: j >= 0;\nloop invariant i194: BASE_SZ >= 0;\nloop invariant i195: len <= BASE_SZ - i;\nloop invariant i196: len <= BASE_SZ - j;\nloop invariant i197: len <= BASE_SZ - i - j;\nloop invariant i198: (len == 0) ==> (i == j);\nloop invariant i199: 0 <= len <= BASE_SZ;\nloop invariant i200: ( i <= BASE_SZ-1 ==> i >= 0 );\nloop invariant i201: ( j <= BASE_SZ-1 ==> j >= 0 );\nloop invariant i202: ( i <= BASE_SZ-1 ==> j <= i );\nloop invariant i203: ( i <= BASE_SZ-1 ==> i == j ==> len == 0 );\nloop invariant i204: ( i <= BASE_SZ-1 ==> j <= i ==> len == 0 );\nloop invariant i205: i + j <= BASE_SZ;\nloop invariant i206: len >= i + j;\nloop invariant i207: len <= BASE_SZ - (i + j);\nloop invariant i208: 1 <= i <= len;\nloop invariant i209: 0 <= j <= i;\nloop invariant i210: 0 <= BASE_SZ;\nloop invariant i211: 0 <= i + j <= len + j;\nloop invariant i212: 0 <= len - 1 <= BASE_SZ - 1;\nloop invariant i213: 0 <= j <= len - 1;\nloop invariant i214: 0 <= i <= len;\nloop invariant i215: 0 <= j <= len;\nloop invariant i216: i == j + len;\nloop invariant i217: i <= BASE_SZ + len;\nloop invariant i218: j <= BASE_SZ + len;\nloop invariant i219: 0 <= j <= BASE_SZ + 1;\nloop invariant i220: 0 <= i <= BASE_SZ + 1;\nloop invariant i221: len >= 0 && len <= BASE_SZ;\nloop invariant i222: (j == 0 && i == 0) ==> (len == BASE_SZ);\nloop invariant i223: (j < BASE_SZ && i < BASE_SZ) ==> (__BLAST_NONDET ==> (j == i && len == 0));\nloop invariant i224: (j >= BASE_SZ) ==> (i == j && len == 0);\nloop invariant i225: (i >= BASE_SZ) ==> (j == i && len == 0);\nloop invariant i226: (len == 0) ==> (j == BASE_SZ && i == BASE_SZ);\nloop invariant i227: (__BLAST_NONDET ==> (j == i && len == 0));\nloop invariant i228: i >= len;\nloop invariant i229: j >= len;\nloop invariant i230: i + j == 2 * len;\nloop invariant i231: i <= 2 * len;\nloop invariant i232: j <= 2 * len;\nloop invariant i233: i + j >= 0;\n*/\nwhile (1) {\n    if ( len == 0 ){ \n      goto END;\n    } else {\n      {;\n//@ assert( 0<= j );\n}\n {;\n//@ assert(j < BASE_SZ);\n}\n\n      {;\n//@ assert( 0<= i );\n}\n {;\n//@ assert(i < BASE_SZ );\n}\n\n      if ( __BLAST_NONDET ) {\n        i++;\n        j++;\n        goto END;\n      }\n    }\n    i ++;\n    j ++;\n    len --;\n  }\n\n END:  return 0;\n}",
        "combined_annotation_num_solver_calls": 159,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint BASE_SZ;\nint __BLAST_NONDET;\nint main ()\n{\n  \n  int i;\n  int j;\n  int len = BASE_SZ;\n\n  if(BASE_SZ > 0 ); else goto END;\n\n  {;\n//@ assert( 0 <= BASE_SZ-1 );\n}\n\n  if (len == 0)\n    goto END; \n  \n  i = 0;\n  j = 0;\n  /*@\nloop invariant i1: 0 <= j < BASE_SZ;\nloop invariant i2: 0 <= i < BASE_SZ;\nloop invariant i3: len >= 0;\nloop invariant i4: len <= BASE_SZ;\nloop invariant i5: j <= i;\nloop invariant i6: j <= len;\nloop invariant i7: i <= len;\nloop invariant i8: i <= BASE_SZ;\nloop invariant i9: j <= BASE_SZ;\nloop invariant i10: 0 <= i <= BASE_SZ;\nloop invariant i11: 0 <= j <= BASE_SZ;\nloop invariant i12: i >= j;\nloop invariant i13: i == j ==> i < BASE_SZ;\nloop invariant i14: i != j ==> i <= BASE_SZ;\nloop invariant i15: j != i ==> j <= BASE_SZ;\nloop invariant i16: i == j ==> len >= 0;\nloop invariant i17: i != j ==> len <= BASE_SZ;\nloop invariant i18: j == i ==> len >= 0;\nloop invariant i19: j != i ==> len <= BASE_SZ;\nloop invariant i20: len >= 0 ==> i == j;\nloop invariant i21: len <= BASE_SZ ==> i != j;\nloop invariant i22: i == j ==> j == i;\nloop invariant i23: i != j ==> i <= j;\nloop invariant i24: j != i ==> j <= i;\nloop invariant i25: len >= 0 ==> i == j ==> i < BASE_SZ;\nloop invariant i26: len <= BASE_SZ ==> i != j ==> i <= BASE_SZ;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i185: i <= j;\nloop invariant i186: len == BASE_SZ - (i + j);\nloop invariant i187: (i == 0 && j == 0 && len == BASE_SZ) ==> (i + j <= BASE_SZ);\nloop invariant i188: (len == 0) ==> (i + j == BASE_SZ);\nloop invariant i189: (len > 0) ==> (i + j < BASE_SZ);\nloop invariant i190: (len == 0) ==> (len == BASE_SZ - (i + j));\nloop invariant i191: (len > 0) ==> (len > BASE_SZ - (i + j));\nloop invariant i192: i >= 0;\nloop invariant i193: j >= 0;\nloop invariant i194: BASE_SZ >= 0;\nloop invariant i195: len <= BASE_SZ - i;\nloop invariant i196: len <= BASE_SZ - j;\nloop invariant i197: len <= BASE_SZ - i - j;\nloop invariant i198: (len == 0) ==> (i == j);\nloop invariant i199: 0 <= len <= BASE_SZ;\nloop invariant i200: ( i <= BASE_SZ-1 ==> i >= 0 );\nloop invariant i201: ( j <= BASE_SZ-1 ==> j >= 0 );\nloop invariant i202: ( i <= BASE_SZ-1 ==> j <= i );\nloop invariant i203: ( i <= BASE_SZ-1 ==> i == j ==> len == 0 );\nloop invariant i204: ( i <= BASE_SZ-1 ==> j <= i ==> len == 0 );\nloop invariant i205: i + j <= BASE_SZ;\nloop invariant i206: len >= i + j;\nloop invariant i207: len <= BASE_SZ - (i + j);\nloop invariant i208: 1 <= i <= len;\nloop invariant i209: 0 <= j <= i;\nloop invariant i210: 0 <= BASE_SZ;\nloop invariant i211: 0 <= i + j <= len + j;\nloop invariant i212: 0 <= len - 1 <= BASE_SZ - 1;\nloop invariant i213: 0 <= j <= len - 1;\nloop invariant i214: 0 <= i <= len;\nloop invariant i215: 0 <= j <= len;\nloop invariant i216: i == j + len;\nloop invariant i217: i <= BASE_SZ + len;\nloop invariant i218: j <= BASE_SZ + len;\nloop invariant i219: 0 <= j <= BASE_SZ + 1;\nloop invariant i220: 0 <= i <= BASE_SZ + 1;\nloop invariant i221: len >= 0 && len <= BASE_SZ;\nloop invariant i222: (j == 0 && i == 0) ==> (len == BASE_SZ);\nloop invariant i223: (j < BASE_SZ && i < BASE_SZ) ==> (__BLAST_NONDET ==> (j == i && len == 0));\nloop invariant i224: (j >= BASE_SZ) ==> (i == j && len == 0);\nloop invariant i225: (i >= BASE_SZ) ==> (j == i && len == 0);\nloop invariant i226: (len == 0) ==> (j == BASE_SZ && i == BASE_SZ);\nloop invariant i227: (__BLAST_NONDET ==> (j == i && len == 0));\nloop invariant i228: i >= len;\nloop invariant i229: j >= len;\nloop invariant i230: i + j == 2 * len;\nloop invariant i231: i <= 2 * len;\nloop invariant i232: j <= 2 * len;\nloop invariant i233: i + j >= 0;\n*/\nwhile (1) {\n    if ( len == 0 ){ \n      goto END;\n    } else {\n      {;\n//@ assert( 0<= j );\n}\n {;\n//@ assert(j < BASE_SZ);\n}\n\n      {;\n//@ assert( 0<= i );\n}\n {;\n//@ assert(i < BASE_SZ );\n}\n\n      if ( __BLAST_NONDET ) {\n        i++;\n        j++;\n        goto END;\n      }\n    }\n    i ++;\n    j ++;\n    len --;\n  }\n\n END:  return 0;\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/split.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/11.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/15.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/16.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/18.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/23.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/30.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/32.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/37.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/38.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/41.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/43.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/44.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/46.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/popl.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/05.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/07.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/37.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/39.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/gulv_simp.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/substring1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/xy10.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/const_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/multivar_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/phases_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/simple_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/simple_safe2.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/simple_safe3.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/simple_safe4.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/underapprox_safe2.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/barbr.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/barbrprime.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/bk-nat.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/bkley.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/efm.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/ex1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/lifnat.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/lifnatprime.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/lifo.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/seesaw.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/substring1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/swim.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/swim1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/NetBSD_g_Ctoc.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/13.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/14.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/19.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/20.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/39.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/cav.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/19.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/gulv.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/pldi082_unbounded.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/underapprox_unsafe1.c"
        ],
        "skipped": [],
        "total": 159,
        "success_count": 133,
        "failure_count": 26,
        "success_rate": 0.8364779874213837
    }
}