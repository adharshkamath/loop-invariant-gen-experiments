{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int a = unknown_int();\n    int b = unknown_int();\n    int res, cnt;\n    if (!(0 <= b)) return 0;\n    res = a;\n    cnt = b;\n    while (cnt > 0) {\n\tcnt = cnt - 1;\n\tres = res + 1;\n    }\n    {;\n//@ assert(res == a + b);\n}\n\n    return 0;\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= b;\nloop invariant cnt >= 0;\nloop invariant res >= a;\nloop invariant res <= a + b;\nloop invariant cnt <= b;\nloop invariant res == a + (b - cnt);\nloop invariant res == a + (b - cnt) ==> cnt <= b;\nloop invariant res == a + (b - cnt) ==> cnt >= 0;\nloop invariant cnt == 0 ==> res == a + b;\nloop invariant cnt > 0 ==> res == a + (b - cnt);\nloop invariant cnt == b ==> res == a;\nloop invariant cnt < b ==> res < a + b;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= cnt <= b;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= b;\nloop invariant a <= res;\nloop invariant cnt >= 0;\nloop invariant cnt <= b;\nloop invariant res <= a + b;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= cnt <= b;\nloop invariant res == a + (b - cnt);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= cnt;\nloop invariant cnt <= b;\nloop invariant res == a + b - cnt;\nloop invariant res >= a;\nloop invariant res <= a + b;\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= cnt <= b;\nloop invariant a <= res <= a + b;\nloop invariant res == a + cnt;\nloop invariant cnt == b - (res - a);\nloop invariant res == a + (b - cnt);\nloop invariant res == a + (cnt * (cnt + 1) / 2) - (cnt * (cnt + 1) / 2 - cnt);\nloop invariant res == a + (cnt * (cnt + 1) / 2 - cnt);\nloop invariant res == a + (cnt * (cnt + 1) / 2 - cnt);\nloop invariant res == a + (cnt * (cnt + 1) / 2 - cnt);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= b;\nloop invariant a <= res;\nloop invariant cnt >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= a <= MAX_INT;\nloop invariant 0 <= b <= MAX_INT;\nloop invariant cnt >= 0;\nloop invariant res >= a;\nloop invariant res <= a + b;\nloop invariant cnt <= b;\nloop invariant a + cnt <= res <= a + b;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= cnt <= b;\nloop invariant res >= a + (b - cnt);\nloop invariant cnt == b - (res - a);\nloop invariant cnt == b - (res - a) ==> (cnt > 0 ==> cnt - 1 == b - (res - a) - 1);\nloop invariant cnt == b - (res - a) ==> (cnt > 0 ==> res + 1 == (res + 1));\nloop invariant cnt == b - (res - a) ==> (cnt > 0 ==> res == a + (b - cnt));\nloop invariant cnt == b - (res - a) ==> (cnt > 0 ==> res == a + (b - (cnt - 1)));\nloop invariant cnt == b - (res - a) ==> (cnt > 0 ==> res == a + (b - (cnt - 1)));\nloop invariant cnt == b - (res - a) ==> (cnt > 0 ==> res == a + (b - (cnt - 1)));\nloop invariant cnt == b - (res - a) ==> (cnt > 0 ==> res == a + (b - (cnt - 1)));\nloop invariant cnt == b - (res - a) ==> (cnt > 0 ==> res == a + (b - (cnt - 1)));\nloop invariant cnt == b - (res - a) ==> (cnt > 0 ==> res == a + (b - (cnt - 1)));\nloop invariant cnt == b - (res - a) ==> (cnt > 0 ==> res == a + (b - (cnt - 1)));\nloop invariant cnt == b - (res - a) ==> (cnt > 0 ==> res == a + (b - (cnt - 1)));\nloop invariant cnt == b - (res - a) ==> (cnt > 0 ==> res == a + (b - (cnt - 1)));\nloop invariant cnt == b - (res - a) ==> (cnt > 0 ==> res == a + (b - (cnt - 1)));\nloop invariant cnt == b - (res - a) ==> (cnt > 0 ==> res == a + (b - (cnt - 1)));\nloop invariant cnt == b - (res - a) ==> (cnt > 0 ==> res == a + (b - (cnt - 1)));\nloop invariant cnt == b - (res - a) ==> (cnt > 0 ==> res == a + (b - (cnt - 1)));\nloop invariant cnt == b - (res - a) ==> (cnt > 0 ==> res == a + (b - (cnt - 1)));\nloop invariant cnt == b - (res - a) ==> (cnt > 0 ==> res == a + (b - (cnt - 1)));\nloop invariant cnt == b - (res - a) ==> (cnt > 0 ==> res == a + (b - (cnt - 1)));\nloop invariant cnt == b - (res - a) ==> (cnt > 0 ==> res == a + (b - (cnt - 1)));\nloop invariant cnt == b - (res - a) ==> (cnt > 0 ==> res == a + (b - (cnt - 1)));\nloop invariant cnt == b - (res - a) ==> (cnt > 0 ==> res == a + (b - (cnt - 1)));\nloop invariant cnt == b - (res - a) ==> (cnt > 0 ==> res == a + (b - (cnt - 1)));\nloop invariant cnt == b - (res - a) ==> (cnt > 0 ==> res == a + (b - (cnt - 1)));\nloop invariant cnt == b - (res - a) ==> (cnt > 0 ==> res == a + (b - (cnt - 1)));\nloop invariant cnt == b - (res - a) ==> (cnt > 0 ==> res == a + (b - (cnt - 1)));\nloop invariant cnt == b - (res - a) ==> (cnt > 0 ==> res == a + (b - (cnt - 1)));\nloop invariant cnt == b - (res - a) ==> (cnt > 0 ==> res == a + (b - (cnt - 1)));\nloop invariant cnt == b - (res - a) ==> (cnt > 0 ==> res == a + (b - (cnt - 1)));\nloop invariant cnt == b - (res - a) ==> (cnt > 0 ==> res == a + (b - (cnt - 1)));\n*/\n```",
            "```\n/*@\nloop invariant 0 <= cnt <= b;\nloop invariant res >= a;\nloop invariant res <= a + cnt;\nloop invariant res >= a + b - cnt;\nloop invariant cnt >= 0;\nloop invariant res >= a + b - cnt;\nloop invariant res <= a + cnt;\nloop invariant cnt < b;\nloop invariant a + b - cnt <= res <= a + cnt;\nloop invariant (cnt == 0 ==> res == a + b);\nloop invariant (cnt > 0 ==> res == a + b - cnt);\nloop invariant (cnt == 0 ==> res == a + b);\nloop invariant (cnt > 0 ==> res == a + b - cnt);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= a <= 2147483647;\nloop invariant 0 <= b <= 2147483647;\nloop invariant res == a + b;\nloop invariant cnt == b;\nloop invariant cnt >= 0;\nloop invariant cnt <= b;\nloop invariant res >= a;\nloop invariant res <= a + b;\nloop invariant res <= a + cnt;\nloop invariant res >= a + b - cnt;\nloop invariant res <= a + b;\nloop invariant res >= a + b - cnt;\nloop invariant res <= a + b;\nloop invariant res >= a + b - cnt;\nloop invariant res <= a + b;\nloop invariant res >= a + b - cnt;\nloop invariant res <= a + b;\nloop invariant res >= a + b - cnt;\nloop invariant res <= a + b;\nloop invariant res >= a + b - cnt;\nloop invariant res <= a + b;\nloop invariant res >= a + b - cnt;\nloop invariant res <= a + b;\nloop invariant res >= a + b - cnt;\nloop invariant res <= a + b;\nloop invariant res >= a + b - cnt;\nloop invariant res <= a + b;\nloop invariant res >= a + b - cnt;\nloop invariant res <= a + b;\nloop invariant res >= a + b - cnt;\nloop invariant res <= a + b;\nloop invariant res >= a + b - cnt;\nloop invariant res <= a + b;\nloop invariant res >= a + b - cnt;\nloop invariant res <= a + b;\nloop invariant res >= a + b - cnt;\nloop invariant res <= a + b;\nloop invariant res >= a + b - cnt;\nloop invariant res <= a + b;\nloop invariant res >= a + b - cnt;\nloop invariant res <= a + b;\nloop invariant res >= a + b - cnt;\nloop invariant res <= a + b;\nloop invariant res >= a + b - cnt;\nloop invariant res <= a + b;\nloop invariant res >= a + b - cnt;\nloop invariant res <= a + b;\nloop invariant res >= a + b - cnt;\nloop invariant res <= a + b;\nloop invariant res >= a + b - cnt;\nloop invariant res <= a + b;\nloop invariant res >= a + b - cnt;\nloop invariant res <= a + b;\nloop invariant res >= a + b - cnt;\nloop invariant res <= a + b;\nloop invariant res >= a + b - cnt;\nloop invariant res <= a + b;\nloop invariant res >= a + b - cnt;\nloop invariant res <= a + b;\nloop invariant res >= a + b - cnt;\nloop invariant res <= a + b;\nloop invariant res >= a + b - cnt;\nloop invariant res <= a + b;\nloop invariant res >= a + b - cnt;\nloop invariant res <= a + b;\nloop invariant res >= a + b - cnt;\nloop invariant res <= a + b;\nloop invariant res >= a + b - cnt;\nloop invariant res <= a + b;\nloop invariant res >= a + b - cnt;\nloop invariant res <= a + b;\nloop invariant res >= a + b - cnt;\nloop invariant res <= a + b;\nloop invariant res >= a + b - cnt;\nloop invariant res <= a + b;\nloop invariant res >= a + b - cnt;\nloop invariant res <= a + b;\nloop invariant res >= a + b - cnt;\nloop invariant res <= a + b;\nloop invariant res >= a + b - cnt;\nloop invariant res <= a + b;\nloop invariant res >= a + b - cnt;\nloop invariant res <= a + b;\nloop invariant res >= a + b - cnt;\nloop invariant res <= a + b;\nloop invariant res >= a + b - cnt;\nloop invariant res <= a + b;\nloop invariant res >= a + b - cnt;\nloop invariant res <= a + b;\nloop invariant res >= a + b - cnt;\nloop invariant res <= a + b;\nloop invariant res >= a + b - cnt;\nloop invariant res <= a + b;\nloop invariant res >= a + b - cnt;\nloop invariant res <= a + b;\nloop invariant res >= a + b - cnt;\nloop invariant res <= a + b;\nloop invariant res >= a + b - cnt;\nloop invariant res <= a + b;\nloop invariant res >= a + b - cnt;\nloop invariant res <= a + b;\nloop invariant res >= a + b - cnt;\nloop invariant res <= a + b;\nloop invariant res >= a + b - cnt;\nloop invariant res <= a + b;\nloop invariant res >= a + b - cnt;\nloop invariant res <= a + b;\nloop invariant res >= a + b - cnt;\nloop invariant res <= a + b;\nloop invariant res >= a + b - cnt;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= cnt <= b;\nloop invariant 0 <= res - a <= b;\nloop invariant res - a >= 1 ==> 0 <= cnt <= b - 1;\nloop invariant res - a < 1 ==> cnt >= 1;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= b;\nloop invariant a <= res;\nloop invariant cnt >= 0;\nloop invariant res == a + b - cnt;\nloop invariant cnt == b;\nloop invariant res == a + b;\nloop invariant cnt == 0;\nloop invariant res == a + b;\nloop invariant a <= res;\nloop invariant cnt == 0;\nloop invariant res == a + b;\nloop invariant cnt == 0;\nloop invariant res == a + b;\nloop invariant cnt == 0;\nloop invariant res == a + b;\nloop invariant cnt == 0;\nloop invariant res == a + b;\nloop invariant cnt == 0;\nloop invariant res == a + b;\nloop invariant cnt == 0;\nloop invariant res == a + b;\nloop invariant cnt == 0;\nloop invariant res == a + b;\nloop invariant cnt == 0;\nloop invariant res == a + b;\nloop invariant cnt == 0;\nloop invariant res == a + b;\nloop invariant cnt == 0;\nloop invariant res == a + b;\nloop invariant cnt == 0;\nloop invariant res == a + b;\nloop invariant cnt == 0;\nloop invariant res == a + b;\nloop invariant cnt == 0;\nloop invariant res == a + b;\nloop invariant cnt == 0;\nloop invariant res == a + b;\nloop invariant cnt == 0;\nloop invariant res == a + b;\nloop invariant cnt == 0;\nloop invariant res == a + b;\nloop invariant cnt == 0;\nloop invariant res == a + b;\nloop invariant cnt == 0;\nloop invariant res == a + b;\nloop invariant cnt == 0;\nloop invariant res == a + b;\nloop invariant cnt == 0;\nloop invariant res == a + b;\nloop invariant cnt == 0;\nloop invariant res == a + b;\nloop invariant cnt == 0;\nloop invariant res == a + b;\nloop invariant cnt == 0;\nloop invariant res == a + b;\nloop invariant cnt == 0;\nloop invariant res == a + b;\nloop invariant cnt == 0;\nloop invariant res == a + b;\nloop invariant cnt == 0;\nloop invariant res == a + b;\nloop invariant cnt == 0;\nloop invariant res == a + b;\nloop invariant cnt == 0;\nloop invariant res == a + b;\nloop invariant cnt == 0;\nloop invariant res == a + b;\nloop invariant cnt == 0;\nloop invariant res == a + b;\nloop invariant cnt == 0;\nloop invariant res == a + b;\nloop invariant cnt == 0;\nloop invariant res == a + b;\nloop invariant cnt == 0;\nloop invariant res == a + b;\nloop invariant cnt == 0;\nloop invariant res == a + b;\nloop invariant cnt == 0;\nloop invariant res == a + b;\nloop invariant cnt == 0;\nloop invariant res == a + b;\nloop invariant cnt == 0;\nloop invariant res == a + b;\nloop invariant cnt == 0;\nloop invariant res == a + b;\nloop invariant cnt == 0;\nloop invariant res == a + b;\nloop invariant cnt == 0;\nloop invariant res == a + b;\nloop invariant cnt == 0;\nloop invariant res == a + b;\nloop invariant cnt == 0;\nloop invariant res == a + b;\nloop invariant cnt == 0;\nloop invariant res == a + b;\nloop invariant cnt == 0;\nloop invariant res == a + b;\nloop invariant cnt == 0;\nloop invariant res == a + b;\nloop invariant cnt == 0;\nloop invariant res == a + b;\nloop invariant cnt == 0;\nloop invariant res == a + b;\nloop invariant cnt == 0;\nloop invariant res == a + b;\nloop invariant cnt == 0;\nloop invariant res == a + b;\nloop invariant cnt == 0;\nloop invariant res == a + b;\nloop invariant cnt == 0;\nloop invariant res == a + b;\nloop invariant cnt == 0;\nloop invariant res == a + b;\nloop invariant cnt == 0;\nloop invariant res == a + b;\nloop invariant cnt == 0;\nloop invariant res == a + b;\nloop invariant cnt == 0;\nloop invariant res == a + b;\nloop invariant cnt == 0;\nloop invariant res == a + b;\nloop invariant cnt == 0;\nloop invariant res == a + b;\nloop invariant cnt == 0;\nloop invariant res == a + b;\nloop invariant cnt == 0;\nloop invariant res == a + b;\nloop invariant cnt == 0;\nloop invariant res == a + b;\nloop invariant cnt == 0;\nloop invariant res == a + b;\nloop invariant cnt == 0;\nloop invariant res == a + b;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= cnt <= b;\nloop invariant a + cnt <= res <= res + b;\nloop invariant res >= a;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= b;\nloop invariant cnt >= 0;\nloop invariant res >= a;\nloop invariant res <= a + b;\nloop invariant cnt <= b;\nloop invariant res == a + (b - cnt);\nloop invariant res == a + (b - cnt) ==> cnt <= b;\nloop invariant res == a + (b - cnt) ==> cnt >= 0;\nloop invariant cnt == 0 ==> res == a + b;\nloop invariant cnt > 0 ==> res == a + (b - cnt);\nloop invariant cnt == b ==> res == a;\nloop invariant cnt < b ==> res < a + b;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int a = unknown_int();\n    int b = unknown_int();\n    int res, cnt;\n    if (!(0 <= b)) return 0;\n    res = a;\n    cnt = b;\n    /*@\nloop invariant i1: 0 <= b;\nloop invariant i2: cnt >= 0;\nloop invariant i3: res >= a;\nloop invariant i4: res <= a + b;\nloop invariant i5: cnt <= b;\nloop invariant i6: res == a + (b - cnt);\nloop invariant i7: res == a + (b - cnt) ==> cnt <= b;\nloop invariant i8: res == a + (b - cnt) ==> cnt >= 0;\nloop invariant i9: cnt == 0 ==> res == a + b;\nloop invariant i10: cnt > 0 ==> res == a + (b - cnt);\nloop invariant i11: cnt == b ==> res == a;\n\n*/\nwhile (cnt > 0) {\n\tcnt = cnt - 1;\n\tres = res + 1;\n    }\n    {;\n//@ assert(res == a + b);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= cnt <= b;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int a = unknown_int();\n    int b = unknown_int();\n    int res, cnt;\n    if (!(0 <= b)) return 0;\n    res = a;\n    cnt = b;\n    /*@\nloop invariant i1: 0 <= cnt <= b;\n*/\nwhile (cnt > 0) {\n\tcnt = cnt - 1;\n\tres = res + 1;\n    }\n    {;\n//@ assert(res == a + b);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= b;\nloop invariant a <= res;\nloop invariant cnt >= 0;\nloop invariant cnt <= b;\nloop invariant res <= a + b;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int a = unknown_int();\n    int b = unknown_int();\n    int res, cnt;\n    if (!(0 <= b)) return 0;\n    res = a;\n    cnt = b;\n    /*@\nloop invariant i1: 0 <= b;\nloop invariant i2: a <= res;\nloop invariant i3: cnt >= 0;\nloop invariant i4: cnt <= b;\n\n*/\nwhile (cnt > 0) {\n\tcnt = cnt - 1;\n\tres = res + 1;\n    }\n    {;\n//@ assert(res == a + b);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= cnt <= b;\nloop invariant res == a + (b - cnt);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int a = unknown_int();\n    int b = unknown_int();\n    int res, cnt;\n    if (!(0 <= b)) return 0;\n    res = a;\n    cnt = b;\n    /*@\nloop invariant i1: 0 <= cnt <= b;\nloop invariant i2: res == a + (b - cnt);\n*/\nwhile (cnt > 0) {\n\tcnt = cnt - 1;\n\tres = res + 1;\n    }\n    {;\n//@ assert(res == a + b);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= cnt;\nloop invariant cnt <= b;\nloop invariant res == a + b - cnt;\nloop invariant res >= a;\nloop invariant res <= a + b;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int a = unknown_int();\n    int b = unknown_int();\n    int res, cnt;\n    if (!(0 <= b)) return 0;\n    res = a;\n    cnt = b;\n    /*@\nloop invariant i1: 0 <= cnt;\nloop invariant i2: cnt <= b;\nloop invariant i3: res == a + b - cnt;\nloop invariant i4: res >= a;\nloop invariant i5: res <= a + b;\n*/\nwhile (cnt > 0) {\n\tcnt = cnt - 1;\n\tres = res + 1;\n    }\n    {;\n//@ assert(res == a + b);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int a = unknown_int();\n    int b = unknown_int();\n    int res, cnt;\n    if (!(0 <= b)) return 0;\n    res = a;\n    cnt = b;\n    /*@\n\n*/\nwhile (cnt > 0) {\n\tcnt = cnt - 1;\n\tres = res + 1;\n    }\n    {;\n//@ assert(res == a + b);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= cnt <= b;\nloop invariant a <= res <= a + b;\nloop invariant res == a + cnt;\nloop invariant cnt == b - (res - a);\nloop invariant res == a + (b - cnt);\nloop invariant res == a + (cnt * (cnt + 1) / 2) - (cnt * (cnt + 1) / 2 - cnt);\nloop invariant res == a + (cnt * (cnt + 1) / 2 - cnt);\nloop invariant res == a + (cnt * (cnt + 1) / 2 - cnt);\nloop invariant res == a + (cnt * (cnt + 1) / 2 - cnt);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int a = unknown_int();\n    int b = unknown_int();\n    int res, cnt;\n    if (!(0 <= b)) return 0;\n    res = a;\n    cnt = b;\n    /*@\nloop invariant i1: 0 <= cnt <= b;\nloop invariant i2: a <= res <= a + b;\n\nloop invariant i4: cnt == b - (res - a);\nloop invariant i5: res == a + (b - cnt);\n\n\n*/\nwhile (cnt > 0) {\n\tcnt = cnt - 1;\n\tres = res + 1;\n    }\n    {;\n//@ assert(res == a + b);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= b;\nloop invariant a <= res;\nloop invariant cnt >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int a = unknown_int();\n    int b = unknown_int();\n    int res, cnt;\n    if (!(0 <= b)) return 0;\n    res = a;\n    cnt = b;\n    /*@\nloop invariant i1: 0 <= b;\nloop invariant i2: a <= res;\nloop invariant i3: cnt >= 0;\n*/\nwhile (cnt > 0) {\n\tcnt = cnt - 1;\n\tres = res + 1;\n    }\n    {;\n//@ assert(res == a + b);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= a <= MAX_INT;\nloop invariant 0 <= b <= MAX_INT;\nloop invariant cnt >= 0;\nloop invariant res >= a;\nloop invariant res <= a + b;\nloop invariant cnt <= b;\nloop invariant a + cnt <= res <= a + b;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int a = unknown_int();\n    int b = unknown_int();\n    int res, cnt;\n    if (!(0 <= b)) return 0;\n    res = a;\n    cnt = b;\n    /*@\n\n\nloop invariant i3: cnt >= 0;\nloop invariant i4: res >= a;\n\nloop invariant i6: cnt <= b;\n\n*/\nwhile (cnt > 0) {\n\tcnt = cnt - 1;\n\tres = res + 1;\n    }\n    {;\n//@ assert(res == a + b);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= cnt <= b;\nloop invariant res >= a + (b - cnt);\nloop invariant cnt == b - (res - a);\nloop invariant cnt == b - (res - a) ==> (cnt > 0 ==> cnt - 1 == b - (res - a) - 1);\nloop invariant cnt == b - (res - a) ==> (cnt > 0 ==> res + 1 == (res + 1));\nloop invariant cnt == b - (res - a) ==> (cnt > 0 ==> res == a + (b - cnt));\nloop invariant cnt == b - (res - a) ==> (cnt > 0 ==> res == a + (b - (cnt - 1)));\nloop invariant cnt == b - (res - a) ==> (cnt > 0 ==> res == a + (b - (cnt - 1)));\nloop invariant cnt == b - (res - a) ==> (cnt > 0 ==> res == a + (b - (cnt - 1)));\nloop invariant cnt == b - (res - a) ==> (cnt > 0 ==> res == a + (b - (cnt - 1)));\nloop invariant cnt == b - (res - a) ==> (cnt > 0 ==> res == a + (b - (cnt - 1)));\nloop invariant cnt == b - (res - a) ==> (cnt > 0 ==> res == a + (b - (cnt - 1)));\nloop invariant cnt == b - (res - a) ==> (cnt > 0 ==> res == a + (b - (cnt - 1)));\nloop invariant cnt == b - (res - a) ==> (cnt > 0 ==> res == a + (b - (cnt - 1)));\nloop invariant cnt == b - (res - a) ==> (cnt > 0 ==> res == a + (b - (cnt - 1)));\nloop invariant cnt == b - (res - a) ==> (cnt > 0 ==> res == a + (b - (cnt - 1)));\nloop invariant cnt == b - (res - a) ==> (cnt > 0 ==> res == a + (b - (cnt - 1)));\nloop invariant cnt == b - (res - a) ==> (cnt > 0 ==> res == a + (b - (cnt - 1)));\nloop invariant cnt == b - (res - a) ==> (cnt > 0 ==> res == a + (b - (cnt - 1)));\nloop invariant cnt == b - (res - a) ==> (cnt > 0 ==> res == a + (b - (cnt - 1)));\nloop invariant cnt == b - (res - a) ==> (cnt > 0 ==> res == a + (b - (cnt - 1)));\nloop invariant cnt == b - (res - a) ==> (cnt > 0 ==> res == a + (b - (cnt - 1)));\nloop invariant cnt == b - (res - a) ==> (cnt > 0 ==> res == a + (b - (cnt - 1)));\nloop invariant cnt == b - (res - a) ==> (cnt > 0 ==> res == a + (b - (cnt - 1)));\nloop invariant cnt == b - (res - a) ==> (cnt > 0 ==> res == a + (b - (cnt - 1)));\nloop invariant cnt == b - (res - a) ==> (cnt > 0 ==> res == a + (b - (cnt - 1)));\nloop invariant cnt == b - (res - a) ==> (cnt > 0 ==> res == a + (b - (cnt - 1)));\nloop invariant cnt == b - (res - a) ==> (cnt > 0 ==> res == a + (b - (cnt - 1)));\nloop invariant cnt == b - (res - a) ==> (cnt > 0 ==> res == a + (b - (cnt - 1)));\nloop invariant cnt == b - (res - a) ==> (cnt > 0 ==> res == a + (b - (cnt - 1)));\nloop invariant cnt == b - (res - a) ==> (cnt > 0 ==> res == a + (b - (cnt - 1)));\nloop invariant cnt == b - (res - a) ==> (cnt > 0 ==> res == a + (b - (cnt - 1)));\nloop invariant cnt == b - (res - a) ==> (cnt > 0 ==> res == a + (b - (cnt - 1)));\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int a = unknown_int();\n    int b = unknown_int();\n    int res, cnt;\n    if (!(0 <= b)) return 0;\n    res = a;\n    cnt = b;\n    /*@\nloop invariant i1: 0 <= cnt <= b;\nloop invariant i2: res >= a + (b - cnt);\nloop invariant i3: cnt == b - (res - a);\nloop invariant i4: cnt == b - (res - a) ==> (cnt > 0 ==> cnt - 1 == b - (res - a) - 1);\nloop invariant i5: cnt == b - (res - a) ==> (cnt > 0 ==> res + 1 == (res + 1));\nloop invariant i6: cnt == b - (res - a) ==> (cnt > 0 ==> res == a + (b - cnt));\n\n*/\nwhile (cnt > 0) {\n\tcnt = cnt - 1;\n\tres = res + 1;\n    }\n    {;\n//@ assert(res == a + b);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= cnt <= b;\nloop invariant res >= a;\nloop invariant res <= a + cnt;\nloop invariant res >= a + b - cnt;\nloop invariant cnt >= 0;\nloop invariant res >= a + b - cnt;\nloop invariant res <= a + cnt;\nloop invariant cnt < b;\nloop invariant a + b - cnt <= res <= a + cnt;\nloop invariant (cnt == 0 ==> res == a + b);\nloop invariant (cnt > 0 ==> res == a + b - cnt);\nloop invariant (cnt == 0 ==> res == a + b);\nloop invariant (cnt > 0 ==> res == a + b - cnt);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int a = unknown_int();\n    int b = unknown_int();\n    int res, cnt;\n    if (!(0 <= b)) return 0;\n    res = a;\n    cnt = b;\n    /*@\nloop invariant i1: 0 <= cnt <= b;\nloop invariant i2: res >= a;\n\nloop invariant i4: res >= a + b - cnt;\nloop invariant i5: cnt >= 0;\n\n\nloop invariant i8: (cnt == 0 ==> res == a + b);\nloop invariant i9: (cnt > 0 ==> res == a + b - cnt);\n*/\nwhile (cnt > 0) {\n\tcnt = cnt - 1;\n\tres = res + 1;\n    }\n    {;\n//@ assert(res == a + b);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= a <= 2147483647;\nloop invariant 0 <= b <= 2147483647;\nloop invariant res == a + b;\nloop invariant cnt == b;\nloop invariant cnt >= 0;\nloop invariant cnt <= b;\nloop invariant res >= a;\nloop invariant res <= a + b;\nloop invariant res <= a + cnt;\nloop invariant res >= a + b - cnt;\nloop invariant res <= a + b;\nloop invariant res >= a + b - cnt;\nloop invariant res <= a + b;\nloop invariant res >= a + b - cnt;\nloop invariant res <= a + b;\nloop invariant res >= a + b - cnt;\nloop invariant res <= a + b;\nloop invariant res >= a + b - cnt;\nloop invariant res <= a + b;\nloop invariant res >= a + b - cnt;\nloop invariant res <= a + b;\nloop invariant res >= a + b - cnt;\nloop invariant res <= a + b;\nloop invariant res >= a + b - cnt;\nloop invariant res <= a + b;\nloop invariant res >= a + b - cnt;\nloop invariant res <= a + b;\nloop invariant res >= a + b - cnt;\nloop invariant res <= a + b;\nloop invariant res >= a + b - cnt;\nloop invariant res <= a + b;\nloop invariant res >= a + b - cnt;\nloop invariant res <= a + b;\nloop invariant res >= a + b - cnt;\nloop invariant res <= a + b;\nloop invariant res >= a + b - cnt;\nloop invariant res <= a + b;\nloop invariant res >= a + b - cnt;\nloop invariant res <= a + b;\nloop invariant res >= a + b - cnt;\nloop invariant res <= a + b;\nloop invariant res >= a + b - cnt;\nloop invariant res <= a + b;\nloop invariant res >= a + b - cnt;\nloop invariant res <= a + b;\nloop invariant res >= a + b - cnt;\nloop invariant res <= a + b;\nloop invariant res >= a + b - cnt;\nloop invariant res <= a + b;\nloop invariant res >= a + b - cnt;\nloop invariant res <= a + b;\nloop invariant res >= a + b - cnt;\nloop invariant res <= a + b;\nloop invariant res >= a + b - cnt;\nloop invariant res <= a + b;\nloop invariant res >= a + b - cnt;\nloop invariant res <= a + b;\nloop invariant res >= a + b - cnt;\nloop invariant res <= a + b;\nloop invariant res >= a + b - cnt;\nloop invariant res <= a + b;\nloop invariant res >= a + b - cnt;\nloop invariant res <= a + b;\nloop invariant res >= a + b - cnt;\nloop invariant res <= a + b;\nloop invariant res >= a + b - cnt;\nloop invariant res <= a + b;\nloop invariant res >= a + b - cnt;\nloop invariant res <= a + b;\nloop invariant res >= a + b - cnt;\nloop invariant res <= a + b;\nloop invariant res >= a + b - cnt;\nloop invariant res <= a + b;\nloop invariant res >= a + b - cnt;\nloop invariant res <= a + b;\nloop invariant res >= a + b - cnt;\nloop invariant res <= a + b;\nloop invariant res >= a + b - cnt;\nloop invariant res <= a + b;\nloop invariant res >= a + b - cnt;\nloop invariant res <= a + b;\nloop invariant res >= a + b - cnt;\nloop invariant res <= a + b;\nloop invariant res >= a + b - cnt;\nloop invariant res <= a + b;\nloop invariant res >= a + b - cnt;\nloop invariant res <= a + b;\nloop invariant res >= a + b - cnt;\nloop invariant res <= a + b;\nloop invariant res >= a + b - cnt;\nloop invariant res <= a + b;\nloop invariant res >= a + b - cnt;\nloop invariant res <= a + b;\nloop invariant res >= a + b - cnt;\nloop invariant res <= a + b;\nloop invariant res >= a + b - cnt;\nloop invariant res <= a + b;\nloop invariant res >= a + b - cnt;\nloop invariant res <= a + b;\nloop invariant res >= a + b - cnt;\nloop invariant res <= a + b;\nloop invariant res >= a + b - cnt;\nloop invariant res <= a + b;\nloop invariant res >= a + b - cnt;\nloop invariant res <= a + b;\nloop invariant res >= a + b - cnt;\nloop invariant res <= a + b;\nloop invariant res >= a + b - cnt;\nloop invariant res <= a + b;\nloop invariant res >= a + b - cnt;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int a = unknown_int();\n    int b = unknown_int();\n    int res, cnt;\n    if (!(0 <= b)) return 0;\n    res = a;\n    cnt = b;\n    /*@\n\nloop invariant i2: 0 <= b <= 2147483647;\n\n\nloop invariant i5: cnt >= 0;\nloop invariant i6: cnt <= b;\nloop invariant i7: res >= a;\n\n\nloop invariant i10: res >= a + b - cnt;\n*/\nwhile (cnt > 0) {\n\tcnt = cnt - 1;\n\tres = res + 1;\n    }\n    {;\n//@ assert(res == a + b);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= cnt <= b;\nloop invariant 0 <= res - a <= b;\nloop invariant res - a >= 1 ==> 0 <= cnt <= b - 1;\nloop invariant res - a < 1 ==> cnt >= 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int a = unknown_int();\n    int b = unknown_int();\n    int res, cnt;\n    if (!(0 <= b)) return 0;\n    res = a;\n    cnt = b;\n    /*@\nloop invariant i1: 0 <= cnt <= b;\n\nloop invariant i3: res - a >= 1 ==> 0 <= cnt <= b - 1;\n\n*/\nwhile (cnt > 0) {\n\tcnt = cnt - 1;\n\tres = res + 1;\n    }\n    {;\n//@ assert(res == a + b);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 1 <= b;\nloop invariant a <= res;\nloop invariant cnt >= 0;\nloop invariant res == a + b - cnt;\nloop invariant cnt == b;\nloop invariant res == a + b;\nloop invariant cnt == 0;\nloop invariant res == a + b;\nloop invariant a <= res;\nloop invariant cnt == 0;\nloop invariant res == a + b;\nloop invariant cnt == 0;\nloop invariant res == a + b;\nloop invariant cnt == 0;\nloop invariant res == a + b;\nloop invariant cnt == 0;\nloop invariant res == a + b;\nloop invariant cnt == 0;\nloop invariant res == a + b;\nloop invariant cnt == 0;\nloop invariant res == a + b;\nloop invariant cnt == 0;\nloop invariant res == a + b;\nloop invariant cnt == 0;\nloop invariant res == a + b;\nloop invariant cnt == 0;\nloop invariant res == a + b;\nloop invariant cnt == 0;\nloop invariant res == a + b;\nloop invariant cnt == 0;\nloop invariant res == a + b;\nloop invariant cnt == 0;\nloop invariant res == a + b;\nloop invariant cnt == 0;\nloop invariant res == a + b;\nloop invariant cnt == 0;\nloop invariant res == a + b;\nloop invariant cnt == 0;\nloop invariant res == a + b;\nloop invariant cnt == 0;\nloop invariant res == a + b;\nloop invariant cnt == 0;\nloop invariant res == a + b;\nloop invariant cnt == 0;\nloop invariant res == a + b;\nloop invariant cnt == 0;\nloop invariant res == a + b;\nloop invariant cnt == 0;\nloop invariant res == a + b;\nloop invariant cnt == 0;\nloop invariant res == a + b;\nloop invariant cnt == 0;\nloop invariant res == a + b;\nloop invariant cnt == 0;\nloop invariant res == a + b;\nloop invariant cnt == 0;\nloop invariant res == a + b;\nloop invariant cnt == 0;\nloop invariant res == a + b;\nloop invariant cnt == 0;\nloop invariant res == a + b;\nloop invariant cnt == 0;\nloop invariant res == a + b;\nloop invariant cnt == 0;\nloop invariant res == a + b;\nloop invariant cnt == 0;\nloop invariant res == a + b;\nloop invariant cnt == 0;\nloop invariant res == a + b;\nloop invariant cnt == 0;\nloop invariant res == a + b;\nloop invariant cnt == 0;\nloop invariant res == a + b;\nloop invariant cnt == 0;\nloop invariant res == a + b;\nloop invariant cnt == 0;\nloop invariant res == a + b;\nloop invariant cnt == 0;\nloop invariant res == a + b;\nloop invariant cnt == 0;\nloop invariant res == a + b;\nloop invariant cnt == 0;\nloop invariant res == a + b;\nloop invariant cnt == 0;\nloop invariant res == a + b;\nloop invariant cnt == 0;\nloop invariant res == a + b;\nloop invariant cnt == 0;\nloop invariant res == a + b;\nloop invariant cnt == 0;\nloop invariant res == a + b;\nloop invariant cnt == 0;\nloop invariant res == a + b;\nloop invariant cnt == 0;\nloop invariant res == a + b;\nloop invariant cnt == 0;\nloop invariant res == a + b;\nloop invariant cnt == 0;\nloop invariant res == a + b;\nloop invariant cnt == 0;\nloop invariant res == a + b;\nloop invariant cnt == 0;\nloop invariant res == a + b;\nloop invariant cnt == 0;\nloop invariant res == a + b;\nloop invariant cnt == 0;\nloop invariant res == a + b;\nloop invariant cnt == 0;\nloop invariant res == a + b;\nloop invariant cnt == 0;\nloop invariant res == a + b;\nloop invariant cnt == 0;\nloop invariant res == a + b;\nloop invariant cnt == 0;\nloop invariant res == a + b;\nloop invariant cnt == 0;\nloop invariant res == a + b;\nloop invariant cnt == 0;\nloop invariant res == a + b;\nloop invariant cnt == 0;\nloop invariant res == a + b;\nloop invariant cnt == 0;\nloop invariant res == a + b;\nloop invariant cnt == 0;\nloop invariant res == a + b;\nloop invariant cnt == 0;\nloop invariant res == a + b;\nloop invariant cnt == 0;\nloop invariant res == a + b;\nloop invariant cnt == 0;\nloop invariant res == a + b;\nloop invariant cnt == 0;\nloop invariant res == a + b;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int a = unknown_int();\n    int b = unknown_int();\n    int res, cnt;\n    if (!(0 <= b)) return 0;\n    res = a;\n    cnt = b;\n    /*@\n\nloop invariant i2: a <= res;\nloop invariant i3: cnt >= 0;\nloop invariant i4: res == a + b - cnt;\n\n\n\n*/\nwhile (cnt > 0) {\n\tcnt = cnt - 1;\n\tres = res + 1;\n    }\n    {;\n//@ assert(res == a + b);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= cnt <= b;\nloop invariant a + cnt <= res <= res + b;\nloop invariant res >= a;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int a = unknown_int();\n    int b = unknown_int();\n    int res, cnt;\n    if (!(0 <= b)) return 0;\n    res = a;\n    cnt = b;\n    /*@\nloop invariant i1: 0 <= cnt <= b;\n\nloop invariant i3: res >= a;\n*/\nwhile (cnt > 0) {\n\tcnt = cnt - 1;\n\tres = res + 1;\n    }\n    {;\n//@ assert(res == a + b);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 38: unbound logic variable MAX_INT. Ignoring loop annotation",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int a = unknown_int();\n    int b = unknown_int();\n    int res, cnt;\n    if (!(0 <= b)) return 0;\n    res = a;\n    cnt = b;\n    /*@\nloop invariant i1: 0 <= b;\nloop invariant i2: cnt >= 0;\nloop invariant i3: res >= a;\nloop invariant i4: res <= a + b;\nloop invariant i5: cnt <= b;\nloop invariant i6: res == a + (b - cnt);\nloop invariant i7: res == a + (b - cnt) ==> cnt <= b;\nloop invariant i8: res == a + (b - cnt) ==> cnt >= 0;\nloop invariant i9: cnt == 0 ==> res == a + b;\nloop invariant i10: cnt > 0 ==> res == a + (b - cnt);\nloop invariant i11: cnt == b ==> res == a;\nloop invariant i12: cnt < b ==> res < a + b;\nloop invariant i13: 0 <= cnt <= b;\nloop invariant i14: a <= res;\nloop invariant i15: 0 <= cnt;\nloop invariant i16: res == a + b - cnt;\nloop invariant i17: a <= res <= a + b;\nloop invariant i18: res == a + cnt;\nloop invariant i19: cnt == b - (res - a);\nloop invariant i20: res == a + (cnt * (cnt + 1) / 2) - (cnt * (cnt + 1) / 2 - cnt);\nloop invariant i21: res == a + (cnt * (cnt + 1) / 2 - cnt);\nloop invariant i22: 0 <= a <= MAX_INT;\nloop invariant i23: 0 <= b <= MAX_INT;\nloop invariant i24: a + cnt <= res <= a + b;\nloop invariant i25: res >= a + (b - cnt);\nloop invariant i26: cnt == b - (res - a) ==> (cnt > 0 ==> cnt - 1 == b - (res - a) - 1);\nloop invariant i27: cnt == b - (res - a) ==> (cnt > 0 ==> res + 1 == (res + 1));\nloop invariant i28: cnt == b - (res - a) ==> (cnt > 0 ==> res == a + (b - cnt));\nloop invariant i29: cnt == b - (res - a) ==> (cnt > 0 ==> res == a + (b - (cnt - 1)));\nloop invariant i30: res <= a + cnt;\nloop invariant i31: res >= a + b - cnt;\nloop invariant i32: cnt < b;\nloop invariant i33: a + b - cnt <= res <= a + cnt;\nloop invariant i34: (cnt == 0 ==> res == a + b);\nloop invariant i35: (cnt > 0 ==> res == a + b - cnt);\nloop invariant i36: 0 <= a <= 2147483647;\nloop invariant i37: 0 <= b <= 2147483647;\nloop invariant i38: res == a + b;\nloop invariant i39: cnt == b;\nloop invariant i40: 0 <= res - a <= b;\nloop invariant i41: res - a >= 1 ==> 0 <= cnt <= b - 1;\nloop invariant i42: res - a < 1 ==> cnt >= 1;\nloop invariant i43: 1 <= b;\nloop invariant i44: cnt == 0;\nloop invariant i45: a + cnt <= res <= res + b;\n*/\nwhile (cnt > 0) {\n\tcnt = cnt - 1;\n\tres = res + 1;\n    }\n    {;\n//@ assert(res == a + b);\n}\n\n    return 0;\n}",
        "combined_annotation_num_solver_calls": 13,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int a = unknown_int();\n    int b = unknown_int();\n    int res, cnt;\n    if (!(0 <= b)) return 0;\n    res = a;\n    cnt = b;\n    /*@\nloop invariant i1: 0 <= b;\nloop invariant i2: cnt >= 0;\nloop invariant i3: res >= a;\nloop invariant i4: res <= a + b;\nloop invariant i5: cnt <= b;\nloop invariant i6: res == a + (b - cnt);\nloop invariant i7: res == a + (b - cnt) ==> cnt <= b;\nloop invariant i8: res == a + (b - cnt) ==> cnt >= 0;\nloop invariant i9: cnt == 0 ==> res == a + b;\nloop invariant i10: cnt > 0 ==> res == a + (b - cnt);\nloop invariant i11: cnt == b ==> res == a;\n\nloop invariant i13: 0 <= cnt <= b;\nloop invariant i14: a <= res;\nloop invariant i15: 0 <= cnt;\nloop invariant i16: res == a + b - cnt;\nloop invariant i17: a <= res <= a + b;\n\nloop invariant i19: cnt == b - (res - a);\n\n\n\n\n\nloop invariant i25: res >= a + (b - cnt);\nloop invariant i26: cnt == b - (res - a) ==> (cnt > 0 ==> cnt - 1 == b - (res - a) - 1);\nloop invariant i27: cnt == b - (res - a) ==> (cnt > 0 ==> res + 1 == (res + 1));\nloop invariant i28: cnt == b - (res - a) ==> (cnt > 0 ==> res == a + (b - cnt));\n\n\nloop invariant i31: res >= a + b - cnt;\n\n\nloop invariant i34: (cnt == 0 ==> res == a + b);\nloop invariant i35: (cnt > 0 ==> res == a + b - cnt);\n\nloop invariant i37: 0 <= b <= 2147483647;\n\n\nloop invariant i40: 0 <= res - a <= b;\nloop invariant i41: res - a >= 1 ==> 0 <= cnt <= b - 1;\n\n\n\n\n*/\nwhile (cnt > 0) {\n\tcnt = cnt - 1;\n\tres = res + 1;\n    }\n    {;\n//@ assert(res == a + b);\n}\n\n    return 0;\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/split.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c"
        ],
        "skipped": [],
        "total": 52,
        "success_count": 43,
        "failure_count": 9,
        "success_rate": 0.8269230769230769
    }
}