{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/18.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\nextern int unknown3();\n\nint main() {\n   int flag = unknown1();\n   int a = unknown2();\n   int b = unknown3();\n   int j = 0;\n\n   for (b=0; b < 100 ; ++b){\n      if (flag)\n         j = j +1;\n   }\n\n   if(flag)\n      {;\n//@ assert(j==100);\n}\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= b <= 100;\nloop invariant j >= 0;\nloop invariant (flag ==> j >= 1);\nloop invariant (flag ==> j <= 1);\nloop invariant !(flag ==> j >= 2);\nloop invariant !(flag ==> j <= 0);\nloop invariant (flag ==> j == 1);\nloop invariant !(flag ==> j == 0);\nloop invariant !(flag ==> j == 2);\nloop invariant !(flag ==> j == -1);\nloop invariant !(flag ==> j == 3);\nloop invariant !(flag ==> j == -2);\nloop invariant !(flag ==> j == 4);\nloop invariant !(flag ==> j == -3);\nloop invariant !(flag ==> j == 5);\nloop invariant !(flag ==> j == -4);\nloop invariant !(flag ==> j == 6);\nloop invariant !(flag ==> j == -5);\nloop invariant !(flag ==> j == 7);\nloop invariant !(flag ==> j == -6);\nloop invariant !(flag ==> j == 8);\nloop invariant !(flag ==> j == -7);\nloop invariant !(flag ==> j == 9);\nloop invariant !(flag ==> j == -8);\nloop invariant !(flag ==> j == 10);\nloop invariant !(flag ==> j == -9);\nloop invariant !(flag ==> j == 11);\nloop invariant !(flag ==> j == -10);\nloop invariant !(flag ==> j == 12);\nloop invariant !(flag ==> j == -11);\nloop invariant !(flag ==> j == 13);\nloop invariant !(flag ==> j == -12);\nloop invariant !(flag ==> j == 14);\nloop invariant !(flag ==> j == -13);\nloop invariant !(flag ==> j == 15);\nloop invariant !(flag ==> j == -14);\nloop invariant !(flag ==> j == 16);\nloop invariant !(flag ==> j == -15);\nloop invariant !(flag ==> j == 17);\nloop invariant !(flag ==> j == -16);\nloop invariant !(flag ==> j == 18);\nloop invariant !(flag ==> j == -17);\nloop invariant !(flag ==> j == 19);\nloop invariant !(flag ==> j == -18);\nloop invariant !(flag ==> j == 20);\nloop invariant !(flag ==> j == -19);\nloop invariant !(flag ==> j == 21);\nloop invariant !(flag ==> j == -20);\nloop invariant !(flag ==> j == 22);\nloop invariant !(flag ==> j == -21);\nloop invariant !(flag ==> j == 23);\nloop invariant !(flag ==> j == -22);\nloop invariant !(flag ==> j == 24);\nloop invariant !(flag ==> j == -23);\nloop invariant !(flag ==> j == 25);\nloop invariant !(flag ==> j == -24);\nloop invariant !(flag ==> j == 26);\nloop invariant !(flag ==> j == -25);\nloop invariant !(flag ==> j == 27);\nloop invariant !(flag ==> j == -26);\nloop invariant !(flag ==> j == 28);\nloop invariant !(flag ==> j == -27);\nloop invariant !(flag ==> j == 29);\nloop invariant !(flag ==> j == -28);\nloop invariant !(flag ==> j == 30);\nloop invariant !(flag ==> j == -29);\nloop invariant !(flag ==> j == 31);\nloop invariant !(flag ==> j == -30);\nloop invariant !(flag ==> j == 32);\nloop invariant !(flag ==> j == -31);\nloop invariant !(flag ==> j == 33);\nloop invariant !(flag ==> j == -32);\nloop invariant !(flag ==> j == 34);\nloop invariant !(flag ==> j == -33);\nloop invariant !(flag ==> j == 35);\nloop invariant !(flag ==> j == -34);\nloop invariant !(flag ==> j == 36);\nloop invariant !(flag ==> j == -35);\nloop invariant !(flag ==> j == 37);\nloop invariant !(flag ==> j == -36);\nloop invariant !(flag ==> j == 38);\nloop invariant !(flag ==> j == -37);\nloop invariant !(flag ==> j == 39);\nloop invariant !(flag ==> j == -38);\nloop invariant !(flag ==> j == 40);\nloop invariant !(flag ==> j == -39);\nloop invariant !(flag ==> j == 41);\nloop invariant !(flag ==> j == -40);\nloop invariant !(flag ==> j == 42);\nloop invariant !(flag ==> j == -41);\nloop invariant !(flag ==> j == 43);\nloop invariant !(flag ==> j == -42);\nloop invariant !(flag ==> j == 44);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= j <= 100;\nloop invariant if(flag) j == 100 else j == 0;\nloop invariant b >= 0;\nloop invariant b <= 100;\nloop invariant j >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= j <= 100;\nloop invariant j == 0 || j == 100;\nloop invariant j == 0 || j == 100 || (flag && 0 <= j < 100 && j + 1 == 100);\nloop invariant j == 0 || j == 100 || (flag && 0 <= j < 100 && j + 1 < 100 && j == j + 1);\nloop invariant j == 0 || j == 100 || (flag && 0 <= j < 100 && j + 1 < 100);\nloop invariant j == 0 || j == 100 || (flag && 0 <= j < 100 && j + 1 < 100 && j <= j + 1);\nloop invariant j == 0 || j == 100 || (flag && 0 <= j < 100 && j + 1 < 100 && j + 1 <= j + 1);\nloop invariant j == 0 || j == 100 || (flag && 0 <= j < 100 && j + 1 < 100);\n*/\n```",
            "```\n/*@\nloop invariant j >= 0;\nloop invariant j <= 100;\nloop invariant b >= 0;\nloop invariant b <= 100;\nloop invariant flag >= 0;\nloop invariant flag <= 1;\nloop invariant a >= 0;\nloop invariant a <= 2147483647;\nloop invariant b >= 0;\nloop invariant b <= 2147483647;\nloop invariant j <= 100 ==> flag <= 1;\nloop invariant j >= 100 ==> flag >= 1;\nloop invariant j >= 0 ==> flag <= 1;\nloop invariant j <= 0 ==> flag >= 1;\nloop invariant a >= 0 ==> flag <= 1;\nloop invariant a <= 0 ==> flag >= 1;\nloop invariant b >= 0 ==> flag <= 1;\nloop invariant b <= 0 ==> flag >= 1;\nloop invariant flag >= 1 ==> j >= 100;\nloop invariant flag <= 1 ==> j <= 100;\nloop invariant flag >= 1 ==> b <= 100;\nloop invariant flag <= 1 ==> b >= 0;\nloop invariant flag >= 1 ==> a <= 0;\nloop invariant flag <= 1 ==> a >= 0;\nloop invariant flag >= 1 ==> j >= 0;\nloop invariant flag <= 1 ==> j <= 100;\nloop invariant flag >= 1 ==> a >= 0;\nloop invariant flag <= 1 ==> a <= 2147483647;\nloop invariant flag >= 1 ==> b >= 0;\nloop invariant flag <= 1 ==> b <= 2147483647;\nloop invariant flag >= 1 ==> j <= 100;\nloop invariant flag <= 1 ==> j >= 0;\nloop invariant flag >= 1 ==> a <= 0;\nloop invariant flag <= 1 ==> a >= 0;\nloop invariant flag >= 1 ==> b <= 100;\nloop invariant flag <= 1 ==> b >= 0;\nloop invariant flag >= 1 ==> j <= 100;\nloop invariant flag <= 1 ==> j >= 0;\nloop invariant flag >= 1 ==> a <= 0;\nloop invariant flag <= 1 ==> a >= 0;\nloop invariant flag >= 1 ==> b <= 100;\nloop invariant flag <= 1 ==> b >= 0;\nloop invariant flag >= 1 ==> j <= 100;\nloop invariant flag <= 1 ==> j >= 0;\nloop invariant flag >= 1 ==> a <= 0;\nloop invariant flag <= 1 ==> a >= 0;\nloop invariant flag >= 1 ==> b <= 100;\nloop invariant flag <= 1 ==> b >= 0;\nloop invariant flag >= 1 ==> j <= 100;\nloop invariant flag <= 1 ==> j >= 0;\nloop invariant flag >= 1 ==> a <= 0;\nloop invariant flag <= 1 ==> a >= 0;\nloop invariant flag >= 1 ==> b <= 100;\nloop invariant flag <= 1 ==> b >= 0;\nloop invariant flag >= 1 ==> j <= 100;\nloop invariant flag <= 1 ==> j >= 0;\nloop invariant flag >= 1 ==> a <= 0;\nloop invariant flag <= 1 ==> a >= 0;\nloop invariant flag >= 1 ==> b <= 100;\nloop invariant flag <= 1 ==> b >= 0;\nloop invariant flag >= 1 ==> j <= 100;\nloop invariant flag <= 1 ==> j >= 0;\nloop invariant flag >= 1 ==> a <= 0;\nloop invariant flag <= 1 ==> a >= 0;\nloop invariant flag >= 1 ==> b <= 100;\nloop invariant flag <= 1 ==> b >= 0;\nloop invariant flag >= 1 ==> j <= 100;\nloop invariant flag <= 1 ==> j >= 0;\nloop invariant flag >= 1 ==> a <= 0;\nloop invariant flag <= 1 ==> a >= 0;\nloop invariant flag >= 1 ==> b <= 100;\nloop invariant flag <= 1 ==> b >= 0;\nloop invariant flag >= 1 ==> j <= 100;\nloop invariant flag <= 1 ==> j >= 0;\nloop invariant flag >= 1 ==> a <= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= j <= 100;\nloop invariant j <= b;\nloop invariant flag == 1 ==> j == 100;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= j <= 100;\nloop invariant flag ==> a == unknown2();\nloop invariant flag ==> b == unknown3();\nloop invariant flag ==> j == 100;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= b <= 100;\nloop invariant j >= 0;\nloop invariant j <= b;\nloop invariant j == b * flag;\nloop invariant (if flag then j == 100 else j == 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= j <= 100;\nloop invariant j + b >= 100;\nloop invariant b <= 100;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= b <= 100;\nloop invariant j >= 0;\nloop invariant j <= b;\nloop invariant j <= 100;\nloop invariant j == b * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100;\nloop invariant j == 100 ==> flag;\nloop invariant j == 100 ==> !flag;\nloop invariant j == 100 ==> b == 100;\nloop invariant j == 100 ==> b == 100 ==> flag;\nloop invariant j == 100 ==> b == 100 ==> !flag;\nloop invariant j == 100 ==> b == 100 ==> j == 100;\nloop invariant j == 100 ==> b == 100 ==> j == 100 ==> flag;\nloop invariant j == 100 ==> b == 100 ==> j == 100 ==> !flag;\nloop invariant j == 100 ==> b == 100 ==> j == 100 ==> j == 100;\nloop invariant j == 100 ==> b == 100 ==> j == 100 ==> j == 100 ==> flag;\nloop invariant j == 100 ==> b == 100 ==> j == 100 ==> j == 100 ==> !flag;\nloop invariant j == 100 ==> b == 100 ==> j == 100 ==> j == 100 ==> j == 100;\nloop invariant j == 100 ==> b == 100 ==> j == 100 ==> j == 100 ==> j == 100 ==> flag;\nloop invariant j == 100 ==> b == 100 ==> j == 100 ==> j == 100 ==> j == 100 ==> !flag;\nloop invariant j == 100 ==> b == 100 ==> j == 100 ==> j == 100 ==> j == 100 ==> j == 100;\nloop invariant j == 100 ==> b == 100 ==> j == 100 ==> j == 100 ==> j == 100 ==> j == 100 ==> flag;\nloop invariant j == 100 ==> b == 100 ==> j == 100 ==> j == 100 ==> j == 100 ==> j == 100 ==> !flag;\nloop invariant j == 100 ==> b == 100 ==> j == 100 ==> j == 100 ==> j == 100 ==> j == 100 ==> j == 100;\nloop invariant j == 100 ==> b == 100 ==> j == 100 ==> j == 100 ==> j == 100 ==> j == 100 ==> j == 100 ==> flag;\nloop invariant j == 100 ==> b == 100 ==> j == 100 ==> j == 100 ==> j == 100 ==> j == 100 ==> j == 100 ==> !flag;\nloop invariant j == 100 ==> b == 100 ==> j == 100 ==> j == 100 ==> j == 100 ==> j == 100 ==> j == 100 ==> j == 100;\nloop invariant j == 100 ==> b == 100 ==> j == 100 ==> j == 100 ==> j == 100 ==> j == 100 ==> j == 100 ==> j == 100 ==> flag;\nloop invariant j == 100 ==> b == 100 ==> j == 100 ==> j == 100 ==> j == 100 ==> j == 100 ==> j == 100 ==> j == 100 ==> !flag;\nloop invariant j == 100 ==> b == 100 ==> j == 100 ==> j == 100 ==> j == 100 ==> j == 100 ==> j == 100 ==> j == 100 ==> j == 100;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= b <= 100;\nloop invariant j >= 0;\nloop invariant j <= b;\nloop invariant j <= 100;\nloop invariant flag ==> j == b;\nloop invariant !flag ==> j == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= b <= 100;\nloop invariant j <= 100;\nloop invariant b <= 100 ==> j <= 100;\nloop invariant b <= 100 ==> flag ==> j <= 100;\nloop invariant b <= 100 ==> flag ==> j <= 100;\nloop invariant b <= 100 ==> flag ==> j <= 100;\nloop invariant b <= 100 ==> flag ==> j <= 100;\nloop invariant b <= 100 ==> flag ==> j <= 100;\nloop invariant b <= 100 ==> flag ==> j <= 100;\nloop invariant b <= 100 ==> flag ==> j <= 100;\nloop invariant b <= 100 ==> flag ==> j <= 100;\nloop invariant b <= 100 ==> flag ==> j <= 100;\nloop invariant b <= 100 ==> flag ==> j <= 100;\nloop invariant b <= 100 ==> flag ==> j <= 100;\nloop invariant b <= 100 ==> flag ==> j <= 100;\nloop invariant b <= 100 ==> flag ==> j <= 100;\nloop invariant b <= 100 ==> flag ==> j <= 100;\nloop invariant b <= 100 ==> flag ==> j <= 100;\nloop invariant b <= 100 ==> flag ==> j <= 100;\nloop invariant b <= 100 ==> flag ==> j <= 100;\nloop invariant b <= 100 ==> flag ==> j <= 100;\nloop invariant b <= 100 ==> flag ==> j <= 100;\nloop invariant b <= 100 ==> flag ==> j <= 100;\nloop invariant b <= 100 ==> flag ==> j <= 100;\nloop invariant b <= 100 ==> flag ==> j <= 100;\nloop invariant b <= 100 ==> flag ==> j <= 100;\nloop invariant b <= 100 ==> flag ==> j <= 100;\nloop invariant b <= 100 ==> flag ==> j <= 100;\nloop invariant b <= 100 ==> flag ==> j <= 100;\nloop invariant b <= 100 ==> flag ==> j <= 100;\nloop invariant b <= 100 ==> flag ==> j <= 100;\nloop invariant b <= 100 ==> flag ==> j <= 100;\nloop invariant b <= 100 ==> flag ==> j <= 100;\nloop invariant b <= 100 ==> flag ==> j <= 100;\nloop invariant b <= 100 ==> flag ==> j <= 100;\nloop invariant b <= 100 ==> flag ==> j <= 100;\nloop invariant b <= 100 ==> flag ==> j <= 100;\nloop invariant b <= 100 ==> flag ==> j <= 100;\nloop invariant b <= 100 ==> flag ==> j <= 100;\nloop invariant b <= 100 ==> flag ==> j <= 100;\nloop invariant b <= 100 ==> flag ==> j <= 100;\nloop invariant b <= 100 ==> flag ==> j <= 100;\nloop invariant b <= 100 ==> flag ==> j <= 100;\nloop invariant b <= 100 ==> flag ==> j <= 100;\nloop invariant b <= 100 ==> flag ==> j <= 100;\nloop invariant b <= 100 ==> flag ==> j <= 100;\nloop invariant b <= 100 ==> flag ==> j <= 100;\nloop invariant b <= 100 ==> flag ==> j <= 100;\nloop invariant b <= 100 ==> flag ==> j <= 100;\nloop invariant b <= 100 ==> flag ==> j <= 100;\nloop invariant b <= 100 ==> flag ==> j <= 100;\nloop invariant b <= 100 ==> flag ==> j <= 100;\nloop invariant b <= 100 ==> flag ==> j <= 100;\nloop invariant b <= 100 ==> flag ==> j <= 100;\nloop invariant b <= 100 ==> flag ==> j <= 100;\nloop invariant b <= 100 ==> flag ==> j <= 100;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= b <= 100;\nloop invariant 0 <= j <= 100;\nloop invariant (flag == true ==> b == 100);\nloop invariant (flag == false ==> b == 0);\nloop invariant (flag == true ==> j == 100);\nloop invariant (flag == false ==> j == 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= b <= 100;\nloop invariant flag ==> j >= 1;\nloop invariant !flag ==> j == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= b <= 100;\nloop invariant j >= 0;\nloop invariant if(flag) ==> j <= b;\nloop invariant if(!flag) ==> j <= 0;\nloop invariant if(flag) ==> j >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= a <= 2;\nloop invariant 0 <= b <= 100;\nloop invariant j >= 0;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 47,
                "annotations": "```\n/*@\nloop invariant 0 <= b <= 100;\nloop invariant j >= 0;\nloop invariant (flag ==> j >= 1);\nloop invariant (flag ==> j <= 1);\nloop invariant !(flag ==> j >= 2);\nloop invariant !(flag ==> j <= 0);\nloop invariant (flag ==> j == 1);\nloop invariant !(flag ==> j == 0);\nloop invariant !(flag ==> j == 2);\nloop invariant !(flag ==> j == -1);\nloop invariant !(flag ==> j == 3);\nloop invariant !(flag ==> j == -2);\nloop invariant !(flag ==> j == 4);\nloop invariant !(flag ==> j == -3);\nloop invariant !(flag ==> j == 5);\nloop invariant !(flag ==> j == -4);\nloop invariant !(flag ==> j == 6);\nloop invariant !(flag ==> j == -5);\nloop invariant !(flag ==> j == 7);\nloop invariant !(flag ==> j == -6);\nloop invariant !(flag ==> j == 8);\nloop invariant !(flag ==> j == -7);\nloop invariant !(flag ==> j == 9);\nloop invariant !(flag ==> j == -8);\nloop invariant !(flag ==> j == 10);\nloop invariant !(flag ==> j == -9);\nloop invariant !(flag ==> j == 11);\nloop invariant !(flag ==> j == -10);\nloop invariant !(flag ==> j == 12);\nloop invariant !(flag ==> j == -11);\nloop invariant !(flag ==> j == 13);\nloop invariant !(flag ==> j == -12);\nloop invariant !(flag ==> j == 14);\nloop invariant !(flag ==> j == -13);\nloop invariant !(flag ==> j == 15);\nloop invariant !(flag ==> j == -14);\nloop invariant !(flag ==> j == 16);\nloop invariant !(flag ==> j == -15);\nloop invariant !(flag ==> j == 17);\nloop invariant !(flag ==> j == -16);\nloop invariant !(flag ==> j == 18);\nloop invariant !(flag ==> j == -17);\nloop invariant !(flag ==> j == 19);\nloop invariant !(flag ==> j == -18);\nloop invariant !(flag ==> j == 20);\nloop invariant !(flag ==> j == -19);\nloop invariant !(flag ==> j == 21);\nloop invariant !(flag ==> j == -20);\nloop invariant !(flag ==> j == 22);\nloop invariant !(flag ==> j == -21);\nloop invariant !(flag ==> j == 23);\nloop invariant !(flag ==> j == -22);\nloop invariant !(flag ==> j == 24);\nloop invariant !(flag ==> j == -23);\nloop invariant !(flag ==> j == 25);\nloop invariant !(flag ==> j == -24);\nloop invariant !(flag ==> j == 26);\nloop invariant !(flag ==> j == -25);\nloop invariant !(flag ==> j == 27);\nloop invariant !(flag ==> j == -26);\nloop invariant !(flag ==> j == 28);\nloop invariant !(flag ==> j == -27);\nloop invariant !(flag ==> j == 29);\nloop invariant !(flag ==> j == -28);\nloop invariant !(flag ==> j == 30);\nloop invariant !(flag ==> j == -29);\nloop invariant !(flag ==> j == 31);\nloop invariant !(flag ==> j == -30);\nloop invariant !(flag ==> j == 32);\nloop invariant !(flag ==> j == -31);\nloop invariant !(flag ==> j == 33);\nloop invariant !(flag ==> j == -32);\nloop invariant !(flag ==> j == 34);\nloop invariant !(flag ==> j == -33);\nloop invariant !(flag ==> j == 35);\nloop invariant !(flag ==> j == -34);\nloop invariant !(flag ==> j == 36);\nloop invariant !(flag ==> j == -35);\nloop invariant !(flag ==> j == 37);\nloop invariant !(flag ==> j == -36);\nloop invariant !(flag ==> j == 38);\nloop invariant !(flag ==> j == -37);\nloop invariant !(flag ==> j == 39);\nloop invariant !(flag ==> j == -38);\nloop invariant !(flag ==> j == 40);\nloop invariant !(flag ==> j == -39);\nloop invariant !(flag ==> j == 41);\nloop invariant !(flag ==> j == -40);\nloop invariant !(flag ==> j == 42);\nloop invariant !(flag ==> j == -41);\nloop invariant !(flag ==> j == 43);\nloop invariant !(flag ==> j == -42);\nloop invariant !(flag ==> j == 44);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\nextern int unknown3();\n\nint main() {\n   int flag = unknown1();\n   int a = unknown2();\n   int b = unknown3();\n   int j = 0;\n\n   /*@\nloop invariant i1: 0 <= b <= 100;\nloop invariant i2: j >= 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nfor (b=0; b < 100 ; ++b){\n      if (flag)\n         j = j +1;\n   }\n\n   if(flag)\n      {;\n//@ assert(j==100);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= j <= 100;\nloop invariant if(flag) j == 100 else j == 0;\nloop invariant b >= 0;\nloop invariant b <= 100;\nloop invariant j >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\nextern int unknown3();\n\nint main() {\n   int flag = unknown1();\n   int a = unknown2();\n   int b = unknown3();\n   int j = 0;\n\n   /*@\n\n\nloop invariant i3: b >= 0;\nloop invariant i4: b <= 100;\nloop invariant i5: j >= 0;\n*/\nfor (b=0; b < 100 ; ++b){\n      if (flag)\n         j = j +1;\n   }\n\n   if(flag)\n      {;\n//@ assert(j==100);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= j <= 100;\nloop invariant j == 0 || j == 100;\nloop invariant j == 0 || j == 100 || (flag && 0 <= j < 100 && j + 1 == 100);\nloop invariant j == 0 || j == 100 || (flag && 0 <= j < 100 && j + 1 < 100 && j == j + 1);\nloop invariant j == 0 || j == 100 || (flag && 0 <= j < 100 && j + 1 < 100);\nloop invariant j == 0 || j == 100 || (flag && 0 <= j < 100 && j + 1 < 100 && j <= j + 1);\nloop invariant j == 0 || j == 100 || (flag && 0 <= j < 100 && j + 1 < 100 && j + 1 <= j + 1);\nloop invariant j == 0 || j == 100 || (flag && 0 <= j < 100 && j + 1 < 100);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\nextern int unknown3();\n\nint main() {\n   int flag = unknown1();\n   int a = unknown2();\n   int b = unknown3();\n   int j = 0;\n\n   /*@\n\n\n\n\n\n\n\n*/\nfor (b=0; b < 100 ; ++b){\n      if (flag)\n         j = j +1;\n   }\n\n   if(flag)\n      {;\n//@ assert(j==100);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant j >= 0;\nloop invariant j <= 100;\nloop invariant b >= 0;\nloop invariant b <= 100;\nloop invariant flag >= 0;\nloop invariant flag <= 1;\nloop invariant a >= 0;\nloop invariant a <= 2147483647;\nloop invariant b >= 0;\nloop invariant b <= 2147483647;\nloop invariant j <= 100 ==> flag <= 1;\nloop invariant j >= 100 ==> flag >= 1;\nloop invariant j >= 0 ==> flag <= 1;\nloop invariant j <= 0 ==> flag >= 1;\nloop invariant a >= 0 ==> flag <= 1;\nloop invariant a <= 0 ==> flag >= 1;\nloop invariant b >= 0 ==> flag <= 1;\nloop invariant b <= 0 ==> flag >= 1;\nloop invariant flag >= 1 ==> j >= 100;\nloop invariant flag <= 1 ==> j <= 100;\nloop invariant flag >= 1 ==> b <= 100;\nloop invariant flag <= 1 ==> b >= 0;\nloop invariant flag >= 1 ==> a <= 0;\nloop invariant flag <= 1 ==> a >= 0;\nloop invariant flag >= 1 ==> j >= 0;\nloop invariant flag <= 1 ==> j <= 100;\nloop invariant flag >= 1 ==> a >= 0;\nloop invariant flag <= 1 ==> a <= 2147483647;\nloop invariant flag >= 1 ==> b >= 0;\nloop invariant flag <= 1 ==> b <= 2147483647;\nloop invariant flag >= 1 ==> j <= 100;\nloop invariant flag <= 1 ==> j >= 0;\nloop invariant flag >= 1 ==> a <= 0;\nloop invariant flag <= 1 ==> a >= 0;\nloop invariant flag >= 1 ==> b <= 100;\nloop invariant flag <= 1 ==> b >= 0;\nloop invariant flag >= 1 ==> j <= 100;\nloop invariant flag <= 1 ==> j >= 0;\nloop invariant flag >= 1 ==> a <= 0;\nloop invariant flag <= 1 ==> a >= 0;\nloop invariant flag >= 1 ==> b <= 100;\nloop invariant flag <= 1 ==> b >= 0;\nloop invariant flag >= 1 ==> j <= 100;\nloop invariant flag <= 1 ==> j >= 0;\nloop invariant flag >= 1 ==> a <= 0;\nloop invariant flag <= 1 ==> a >= 0;\nloop invariant flag >= 1 ==> b <= 100;\nloop invariant flag <= 1 ==> b >= 0;\nloop invariant flag >= 1 ==> j <= 100;\nloop invariant flag <= 1 ==> j >= 0;\nloop invariant flag >= 1 ==> a <= 0;\nloop invariant flag <= 1 ==> a >= 0;\nloop invariant flag >= 1 ==> b <= 100;\nloop invariant flag <= 1 ==> b >= 0;\nloop invariant flag >= 1 ==> j <= 100;\nloop invariant flag <= 1 ==> j >= 0;\nloop invariant flag >= 1 ==> a <= 0;\nloop invariant flag <= 1 ==> a >= 0;\nloop invariant flag >= 1 ==> b <= 100;\nloop invariant flag <= 1 ==> b >= 0;\nloop invariant flag >= 1 ==> j <= 100;\nloop invariant flag <= 1 ==> j >= 0;\nloop invariant flag >= 1 ==> a <= 0;\nloop invariant flag <= 1 ==> a >= 0;\nloop invariant flag >= 1 ==> b <= 100;\nloop invariant flag <= 1 ==> b >= 0;\nloop invariant flag >= 1 ==> j <= 100;\nloop invariant flag <= 1 ==> j >= 0;\nloop invariant flag >= 1 ==> a <= 0;\nloop invariant flag <= 1 ==> a >= 0;\nloop invariant flag >= 1 ==> b <= 100;\nloop invariant flag <= 1 ==> b >= 0;\nloop invariant flag >= 1 ==> j <= 100;\nloop invariant flag <= 1 ==> j >= 0;\nloop invariant flag >= 1 ==> a <= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\nextern int unknown3();\n\nint main() {\n   int flag = unknown1();\n   int a = unknown2();\n   int b = unknown3();\n   int j = 0;\n\n   /*@\nloop invariant i1: j >= 0;\n\nloop invariant i3: b >= 0;\nloop invariant i4: b <= 100;\n\n\n\nloop invariant i8: a <= 2147483647;\nloop invariant i9: b <= 2147483647;\n\n\n\n\n\n\n\n\n\n\nloop invariant i20: flag >= 1 ==> b <= 100;\nloop invariant i21: flag <= 1 ==> b >= 0;\n\n\nloop invariant i24: flag >= 1 ==> j >= 0;\n\nloop invariant i26: flag <= 1 ==> a <= 2147483647;\nloop invariant i27: flag >= 1 ==> b >= 0;\nloop invariant i28: flag <= 1 ==> b <= 2147483647;\n\nloop invariant i30: flag <= 1 ==> j >= 0;\n*/\nfor (b=0; b < 100 ; ++b){\n      if (flag)\n         j = j +1;\n   }\n\n   if(flag)\n      {;\n//@ assert(j==100);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= j <= 100;\nloop invariant j <= b;\nloop invariant flag == 1 ==> j == 100;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\nextern int unknown3();\n\nint main() {\n   int flag = unknown1();\n   int a = unknown2();\n   int b = unknown3();\n   int j = 0;\n\n   /*@\nloop invariant i1: 0 <= j <= 100;\nloop invariant i2: j <= b;\n\n*/\nfor (b=0; b < 100 ; ++b){\n      if (flag)\n         j = j +1;\n   }\n\n   if(flag)\n      {;\n//@ assert(j==100);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= j <= 100;\nloop invariant flag ==> a == unknown2();\nloop invariant flag ==> b == unknown3();\nloop invariant flag ==> j == 100;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\nextern int unknown3();\n\nint main() {\n   int flag = unknown1();\n   int a = unknown2();\n   int b = unknown3();\n   int j = 0;\n\n   /*@\n\n\n\n\n*/\nfor (b=0; b < 100 ; ++b){\n      if (flag)\n         j = j +1;\n   }\n\n   if(flag)\n      {;\n//@ assert(j==100);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= b <= 100;\nloop invariant j >= 0;\nloop invariant j <= b;\nloop invariant j == b * flag;\nloop invariant (if flag then j == 100 else j == 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\nextern int unknown3();\n\nint main() {\n   int flag = unknown1();\n   int a = unknown2();\n   int b = unknown3();\n   int j = 0;\n\n   /*@\nloop invariant i1: 0 <= b <= 100;\nloop invariant i2: j >= 0;\nloop invariant i3: j <= b;\n\n\n*/\nfor (b=0; b < 100 ; ++b){\n      if (flag)\n         j = j +1;\n   }\n\n   if(flag)\n      {;\n//@ assert(j==100);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= j <= 100;\nloop invariant j + b >= 100;\nloop invariant b <= 100;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\nextern int unknown3();\n\nint main() {\n   int flag = unknown1();\n   int a = unknown2();\n   int b = unknown3();\n   int j = 0;\n\n   /*@\n\n\nloop invariant i3: b <= 100;\n*/\nfor (b=0; b < 100 ; ++b){\n      if (flag)\n         j = j +1;\n   }\n\n   if(flag)\n      {;\n//@ assert(j==100);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 10,
                "annotations": "```\n/*@\nloop invariant 0 <= b <= 100;\nloop invariant j >= 0;\nloop invariant j <= b;\nloop invariant j <= 100;\nloop invariant j == b * flag;\nloop invariant j == 100 * flag;\nloop invariant j == 100;\nloop invariant j == 100 ==> flag;\nloop invariant j == 100 ==> !flag;\nloop invariant j == 100 ==> b == 100;\nloop invariant j == 100 ==> b == 100 ==> flag;\nloop invariant j == 100 ==> b == 100 ==> !flag;\nloop invariant j == 100 ==> b == 100 ==> j == 100;\nloop invariant j == 100 ==> b == 100 ==> j == 100 ==> flag;\nloop invariant j == 100 ==> b == 100 ==> j == 100 ==> !flag;\nloop invariant j == 100 ==> b == 100 ==> j == 100 ==> j == 100;\nloop invariant j == 100 ==> b == 100 ==> j == 100 ==> j == 100 ==> flag;\nloop invariant j == 100 ==> b == 100 ==> j == 100 ==> j == 100 ==> !flag;\nloop invariant j == 100 ==> b == 100 ==> j == 100 ==> j == 100 ==> j == 100;\nloop invariant j == 100 ==> b == 100 ==> j == 100 ==> j == 100 ==> j == 100 ==> flag;\nloop invariant j == 100 ==> b == 100 ==> j == 100 ==> j == 100 ==> j == 100 ==> !flag;\nloop invariant j == 100 ==> b == 100 ==> j == 100 ==> j == 100 ==> j == 100 ==> j == 100;\nloop invariant j == 100 ==> b == 100 ==> j == 100 ==> j == 100 ==> j == 100 ==> j == 100 ==> flag;\nloop invariant j == 100 ==> b == 100 ==> j == 100 ==> j == 100 ==> j == 100 ==> j == 100 ==> !flag;\nloop invariant j == 100 ==> b == 100 ==> j == 100 ==> j == 100 ==> j == 100 ==> j == 100 ==> j == 100;\nloop invariant j == 100 ==> b == 100 ==> j == 100 ==> j == 100 ==> j == 100 ==> j == 100 ==> j == 100 ==> flag;\nloop invariant j == 100 ==> b == 100 ==> j == 100 ==> j == 100 ==> j == 100 ==> j == 100 ==> j == 100 ==> !flag;\nloop invariant j == 100 ==> b == 100 ==> j == 100 ==> j == 100 ==> j == 100 ==> j == 100 ==> j == 100 ==> j == 100;\nloop invariant j == 100 ==> b == 100 ==> j == 100 ==> j == 100 ==> j == 100 ==> j == 100 ==> j == 100 ==> j == 100 ==> flag;\nloop invariant j == 100 ==> b == 100 ==> j == 100 ==> j == 100 ==> j == 100 ==> j == 100 ==> j == 100 ==> j == 100 ==> !flag;\nloop invariant j == 100 ==> b == 100 ==> j == 100 ==> j == 100 ==> j == 100 ==> j == 100 ==> j == 100 ==> j == 100 ==> j == 100;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\nextern int unknown3();\n\nint main() {\n   int flag = unknown1();\n   int a = unknown2();\n   int b = unknown3();\n   int j = 0;\n\n   /*@\nloop invariant i1: 0 <= b <= 100;\nloop invariant i2: j >= 0;\nloop invariant i3: j <= b;\nloop invariant i4: j <= 100;\n\n\n\nloop invariant i8: j == 100 ==> flag;\n\nloop invariant i10: j == 100 ==> b == 100;\nloop invariant i11: j == 100 ==> b == 100 ==> flag;\n\nloop invariant i13: j == 100 ==> b == 100 ==> j == 100;\nloop invariant i14: j == 100 ==> b == 100 ==> j == 100 ==> flag;\n\nloop invariant i16: j == 100 ==> b == 100 ==> j == 100 ==> j == 100;\nloop invariant i17: j == 100 ==> b == 100 ==> j == 100 ==> j == 100 ==> flag;\n\nloop invariant i19: j == 100 ==> b == 100 ==> j == 100 ==> j == 100 ==> j == 100;\nloop invariant i20: j == 100 ==> b == 100 ==> j == 100 ==> j == 100 ==> j == 100 ==> flag;\n\nloop invariant i22: j == 100 ==> b == 100 ==> j == 100 ==> j == 100 ==> j == 100 ==> j == 100;\nloop invariant i23: j == 100 ==> b == 100 ==> j == 100 ==> j == 100 ==> j == 100 ==> j == 100 ==> flag;\n\nloop invariant i25: j == 100 ==> b == 100 ==> j == 100 ==> j == 100 ==> j == 100 ==> j == 100 ==> j == 100;\nloop invariant i26: j == 100 ==> b == 100 ==> j == 100 ==> j == 100 ==> j == 100 ==> j == 100 ==> j == 100 ==> flag;\n\nloop invariant i28: j == 100 ==> b == 100 ==> j == 100 ==> j == 100 ==> j == 100 ==> j == 100 ==> j == 100 ==> j == 100;\nloop invariant i29: j == 100 ==> b == 100 ==> j == 100 ==> j == 100 ==> j == 100 ==> j == 100 ==> j == 100 ==> j == 100 ==> flag;\n\nloop invariant i31: j == 100 ==> b == 100 ==> j == 100 ==> j == 100 ==> j == 100 ==> j == 100 ==> j == 100 ==> j == 100 ==> j == 100;\n*/\nfor (b=0; b < 100 ; ++b){\n      if (flag)\n         j = j +1;\n   }\n\n   if(flag)\n      {;\n//@ assert(j==100);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= b <= 100;\nloop invariant j >= 0;\nloop invariant j <= b;\nloop invariant j <= 100;\nloop invariant flag ==> j == b;\nloop invariant !flag ==> j == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\nextern int unknown3();\n\nint main() {\n   int flag = unknown1();\n   int a = unknown2();\n   int b = unknown3();\n   int j = 0;\n\n   /*@\nloop invariant i1: 0 <= b <= 100;\nloop invariant i2: j >= 0;\nloop invariant i3: j <= b;\nloop invariant i4: j <= 100;\nloop invariant i5: flag ==> j == b;\nloop invariant i6: !flag ==> j == 0;\n*/\nfor (b=0; b < 100 ; ++b){\n      if (flag)\n         j = j +1;\n   }\n\n   if(flag)\n      {;\n//@ assert(j==100);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= b <= 100;\nloop invariant j <= 100;\nloop invariant b <= 100 ==> j <= 100;\nloop invariant b <= 100 ==> flag ==> j <= 100;\nloop invariant b <= 100 ==> flag ==> j <= 100;\nloop invariant b <= 100 ==> flag ==> j <= 100;\nloop invariant b <= 100 ==> flag ==> j <= 100;\nloop invariant b <= 100 ==> flag ==> j <= 100;\nloop invariant b <= 100 ==> flag ==> j <= 100;\nloop invariant b <= 100 ==> flag ==> j <= 100;\nloop invariant b <= 100 ==> flag ==> j <= 100;\nloop invariant b <= 100 ==> flag ==> j <= 100;\nloop invariant b <= 100 ==> flag ==> j <= 100;\nloop invariant b <= 100 ==> flag ==> j <= 100;\nloop invariant b <= 100 ==> flag ==> j <= 100;\nloop invariant b <= 100 ==> flag ==> j <= 100;\nloop invariant b <= 100 ==> flag ==> j <= 100;\nloop invariant b <= 100 ==> flag ==> j <= 100;\nloop invariant b <= 100 ==> flag ==> j <= 100;\nloop invariant b <= 100 ==> flag ==> j <= 100;\nloop invariant b <= 100 ==> flag ==> j <= 100;\nloop invariant b <= 100 ==> flag ==> j <= 100;\nloop invariant b <= 100 ==> flag ==> j <= 100;\nloop invariant b <= 100 ==> flag ==> j <= 100;\nloop invariant b <= 100 ==> flag ==> j <= 100;\nloop invariant b <= 100 ==> flag ==> j <= 100;\nloop invariant b <= 100 ==> flag ==> j <= 100;\nloop invariant b <= 100 ==> flag ==> j <= 100;\nloop invariant b <= 100 ==> flag ==> j <= 100;\nloop invariant b <= 100 ==> flag ==> j <= 100;\nloop invariant b <= 100 ==> flag ==> j <= 100;\nloop invariant b <= 100 ==> flag ==> j <= 100;\nloop invariant b <= 100 ==> flag ==> j <= 100;\nloop invariant b <= 100 ==> flag ==> j <= 100;\nloop invariant b <= 100 ==> flag ==> j <= 100;\nloop invariant b <= 100 ==> flag ==> j <= 100;\nloop invariant b <= 100 ==> flag ==> j <= 100;\nloop invariant b <= 100 ==> flag ==> j <= 100;\nloop invariant b <= 100 ==> flag ==> j <= 100;\nloop invariant b <= 100 ==> flag ==> j <= 100;\nloop invariant b <= 100 ==> flag ==> j <= 100;\nloop invariant b <= 100 ==> flag ==> j <= 100;\nloop invariant b <= 100 ==> flag ==> j <= 100;\nloop invariant b <= 100 ==> flag ==> j <= 100;\nloop invariant b <= 100 ==> flag ==> j <= 100;\nloop invariant b <= 100 ==> flag ==> j <= 100;\nloop invariant b <= 100 ==> flag ==> j <= 100;\nloop invariant b <= 100 ==> flag ==> j <= 100;\nloop invariant b <= 100 ==> flag ==> j <= 100;\nloop invariant b <= 100 ==> flag ==> j <= 100;\nloop invariant b <= 100 ==> flag ==> j <= 100;\nloop invariant b <= 100 ==> flag ==> j <= 100;\nloop invariant b <= 100 ==> flag ==> j <= 100;\nloop invariant b <= 100 ==> flag ==> j <= 100;\nloop invariant b <= 100 ==> flag ==> j <= 100;\nloop invariant b <= 100 ==> flag ==> j <= 100;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\nextern int unknown3();\n\nint main() {\n   int flag = unknown1();\n   int a = unknown2();\n   int b = unknown3();\n   int j = 0;\n\n   /*@\nloop invariant i1: 0 <= b <= 100;\n\n\n\n*/\nfor (b=0; b < 100 ; ++b){\n      if (flag)\n         j = j +1;\n   }\n\n   if(flag)\n      {;\n//@ assert(j==100);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= b <= 100;\nloop invariant 0 <= j <= 100;\nloop invariant (flag == true ==> b == 100);\nloop invariant (flag == false ==> b == 0);\nloop invariant (flag == true ==> j == 100);\nloop invariant (flag == false ==> j == 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\nextern int unknown3();\n\nint main() {\n   int flag = unknown1();\n   int a = unknown2();\n   int b = unknown3();\n   int j = 0;\n\n   /*@\nloop invariant i1: 0 <= b <= 100;\n\n\n\n\n\n*/\nfor (b=0; b < 100 ; ++b){\n      if (flag)\n         j = j +1;\n   }\n\n   if(flag)\n      {;\n//@ assert(j==100);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= b <= 100;\nloop invariant flag ==> j >= 1;\nloop invariant !flag ==> j == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\nextern int unknown3();\n\nint main() {\n   int flag = unknown1();\n   int a = unknown2();\n   int b = unknown3();\n   int j = 0;\n\n   /*@\nloop invariant i1: 0 <= b <= 100;\n\nloop invariant i3: !flag ==> j == 0;\n*/\nfor (b=0; b < 100 ; ++b){\n      if (flag)\n         j = j +1;\n   }\n\n   if(flag)\n      {;\n//@ assert(j==100);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= b <= 100;\nloop invariant j >= 0;\nloop invariant if(flag) ==> j <= b;\nloop invariant if(!flag) ==> j <= 0;\nloop invariant if(flag) ==> j >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\nextern int unknown3();\n\nint main() {\n   int flag = unknown1();\n   int a = unknown2();\n   int b = unknown3();\n   int j = 0;\n\n   /*@\nloop invariant i1: 0 <= b <= 100;\nloop invariant i2: j >= 0;\n\n\n\n*/\nfor (b=0; b < 100 ; ++b){\n      if (flag)\n         j = j +1;\n   }\n\n   if(flag)\n      {;\n//@ assert(j==100);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= a <= 2;\nloop invariant 0 <= b <= 100;\nloop invariant j >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\nextern int unknown3();\n\nint main() {\n   int flag = unknown1();\n   int a = unknown2();\n   int b = unknown3();\n   int j = 0;\n\n   /*@\n\nloop invariant i2: 0 <= b <= 100;\nloop invariant i3: j >= 0;\n*/\nfor (b=0; b < 100 ; ++b){\n      if (flag)\n         j = j +1;\n   }\n\n   if(flag)\n      {;\n//@ assert(j==100);\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 112: unexpected token '('",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\nextern int unknown3();\n\nint main() {\n   int flag = unknown1();\n   int a = unknown2();\n   int b = unknown3();\n   int j = 0;\n\n   /*@\nloop invariant i1: 0 <= b <= 100;\nloop invariant i2: j >= 0;\nloop invariant i3: (flag ==> j >= 1);\nloop invariant i4: (flag ==> j <= 1);\nloop invariant i5: !(flag ==> j >= 2);\nloop invariant i6: !(flag ==> j <= 0);\nloop invariant i7: (flag ==> j == 1);\nloop invariant i8: !(flag ==> j == 0);\nloop invariant i9: !(flag ==> j == 2);\nloop invariant i10: !(flag ==> j == -1);\nloop invariant i11: !(flag ==> j == 3);\nloop invariant i12: !(flag ==> j == -2);\nloop invariant i13: !(flag ==> j == 4);\nloop invariant i14: !(flag ==> j == -3);\nloop invariant i15: !(flag ==> j == 5);\nloop invariant i16: !(flag ==> j == -4);\nloop invariant i17: !(flag ==> j == 6);\nloop invariant i18: !(flag ==> j == -5);\nloop invariant i19: !(flag ==> j == 7);\nloop invariant i20: !(flag ==> j == -6);\nloop invariant i21: !(flag ==> j == 8);\nloop invariant i22: !(flag ==> j == -7);\nloop invariant i23: !(flag ==> j == 9);\nloop invariant i24: !(flag ==> j == -8);\nloop invariant i25: !(flag ==> j == 10);\nloop invariant i26: !(flag ==> j == -9);\nloop invariant i27: !(flag ==> j == 11);\nloop invariant i28: !(flag ==> j == -10);\nloop invariant i29: !(flag ==> j == 12);\nloop invariant i30: !(flag ==> j == -11);\nloop invariant i31: !(flag ==> j == 13);\nloop invariant i32: !(flag ==> j == -12);\nloop invariant i33: !(flag ==> j == 14);\nloop invariant i34: !(flag ==> j == -13);\nloop invariant i35: !(flag ==> j == 15);\nloop invariant i36: !(flag ==> j == -14);\nloop invariant i37: !(flag ==> j == 16);\nloop invariant i38: !(flag ==> j == -15);\nloop invariant i39: !(flag ==> j == 17);\nloop invariant i40: !(flag ==> j == -16);\nloop invariant i41: !(flag ==> j == 18);\nloop invariant i42: !(flag ==> j == -17);\nloop invariant i43: !(flag ==> j == 19);\nloop invariant i44: !(flag ==> j == -18);\nloop invariant i45: !(flag ==> j == 20);\nloop invariant i46: !(flag ==> j == -19);\nloop invariant i47: !(flag ==> j == 21);\nloop invariant i48: !(flag ==> j == -20);\nloop invariant i49: !(flag ==> j == 22);\nloop invariant i50: !(flag ==> j == -21);\nloop invariant i51: !(flag ==> j == 23);\nloop invariant i52: !(flag ==> j == -22);\nloop invariant i53: !(flag ==> j == 24);\nloop invariant i54: !(flag ==> j == -23);\nloop invariant i55: !(flag ==> j == 25);\nloop invariant i56: !(flag ==> j == -24);\nloop invariant i57: !(flag ==> j == 26);\nloop invariant i58: !(flag ==> j == -25);\nloop invariant i59: !(flag ==> j == 27);\nloop invariant i60: !(flag ==> j == -26);\nloop invariant i61: !(flag ==> j == 28);\nloop invariant i62: !(flag ==> j == -27);\nloop invariant i63: !(flag ==> j == 29);\nloop invariant i64: !(flag ==> j == -28);\nloop invariant i65: !(flag ==> j == 30);\nloop invariant i66: !(flag ==> j == -29);\nloop invariant i67: !(flag ==> j == 31);\nloop invariant i68: !(flag ==> j == -30);\nloop invariant i69: !(flag ==> j == 32);\nloop invariant i70: !(flag ==> j == -31);\nloop invariant i71: !(flag ==> j == 33);\nloop invariant i72: !(flag ==> j == -32);\nloop invariant i73: !(flag ==> j == 34);\nloop invariant i74: !(flag ==> j == -33);\nloop invariant i75: !(flag ==> j == 35);\nloop invariant i76: !(flag ==> j == -34);\nloop invariant i77: !(flag ==> j == 36);\nloop invariant i78: !(flag ==> j == -35);\nloop invariant i79: !(flag ==> j == 37);\nloop invariant i80: !(flag ==> j == -36);\nloop invariant i81: !(flag ==> j == 38);\nloop invariant i82: !(flag ==> j == -37);\nloop invariant i83: !(flag ==> j == 39);\nloop invariant i84: !(flag ==> j == -38);\nloop invariant i85: !(flag ==> j == 40);\nloop invariant i86: !(flag ==> j == -39);\nloop invariant i87: !(flag ==> j == 41);\nloop invariant i88: !(flag ==> j == -40);\nloop invariant i89: !(flag ==> j == 42);\nloop invariant i90: !(flag ==> j == -41);\nloop invariant i91: !(flag ==> j == 43);\nloop invariant i92: !(flag ==> j == -42);\nloop invariant i93: !(flag ==> j == 44);\nloop invariant i94: 0 <= j <= 100;\nloop invariant i95: if(flag) j == 100 else j == 0;\nloop invariant i96: b >= 0;\nloop invariant i97: b <= 100;\nloop invariant i98: j == 0 || j == 100;\nloop invariant i99: j == 0 || j == 100 || (flag && 0 <= j < 100 && j + 1 == 100);\nloop invariant i100: j == 0 || j == 100 || (flag && 0 <= j < 100 && j + 1 < 100 && j == j + 1);\nloop invariant i101: j == 0 || j == 100 || (flag && 0 <= j < 100 && j + 1 < 100);\nloop invariant i102: j == 0 || j == 100 || (flag && 0 <= j < 100 && j + 1 < 100 && j <= j + 1);\nloop invariant i103: j == 0 || j == 100 || (flag && 0 <= j < 100 && j + 1 < 100 && j + 1 <= j + 1);\nloop invariant i104: j <= 100;\nloop invariant i105: flag >= 0;\nloop invariant i106: flag <= 1;\nloop invariant i107: a >= 0;\nloop invariant i108: a <= 2147483647;\nloop invariant i109: b <= 2147483647;\nloop invariant i110: j <= 100 ==> flag <= 1;\nloop invariant i111: j >= 100 ==> flag >= 1;\nloop invariant i112: j >= 0 ==> flag <= 1;\nloop invariant i113: j <= 0 ==> flag >= 1;\nloop invariant i114: a >= 0 ==> flag <= 1;\nloop invariant i115: a <= 0 ==> flag >= 1;\nloop invariant i116: b >= 0 ==> flag <= 1;\nloop invariant i117: b <= 0 ==> flag >= 1;\nloop invariant i118: flag >= 1 ==> j >= 100;\nloop invariant i119: flag <= 1 ==> j <= 100;\nloop invariant i120: flag >= 1 ==> b <= 100;\nloop invariant i121: flag <= 1 ==> b >= 0;\nloop invariant i122: flag >= 1 ==> a <= 0;\nloop invariant i123: flag <= 1 ==> a >= 0;\nloop invariant i124: flag >= 1 ==> j >= 0;\nloop invariant i125: flag >= 1 ==> a >= 0;\nloop invariant i126: flag <= 1 ==> a <= 2147483647;\nloop invariant i127: flag >= 1 ==> b >= 0;\nloop invariant i128: flag <= 1 ==> b <= 2147483647;\nloop invariant i129: flag >= 1 ==> j <= 100;\nloop invariant i130: flag <= 1 ==> j >= 0;\nloop invariant i131: j <= b;\nloop invariant i132: flag == 1 ==> j == 100;\nloop invariant i133: flag ==> a == unknown2();\nloop invariant i134: flag ==> b == unknown3();\nloop invariant i135: flag ==> j == 100;\nloop invariant i136: j == b * flag;\nloop invariant i137: (if flag then j == 100 else j == 0);\nloop invariant i138: j + b >= 100;\nloop invariant i139: j == 100 * flag;\nloop invariant i140: j == 100;\nloop invariant i141: j == 100 ==> flag;\nloop invariant i142: j == 100 ==> !flag;\nloop invariant i143: j == 100 ==> b == 100;\nloop invariant i144: j == 100 ==> b == 100 ==> flag;\nloop invariant i145: j == 100 ==> b == 100 ==> !flag;\nloop invariant i146: j == 100 ==> b == 100 ==> j == 100;\nloop invariant i147: j == 100 ==> b == 100 ==> j == 100 ==> flag;\nloop invariant i148: j == 100 ==> b == 100 ==> j == 100 ==> !flag;\nloop invariant i149: j == 100 ==> b == 100 ==> j == 100 ==> j == 100;\nloop invariant i150: j == 100 ==> b == 100 ==> j == 100 ==> j == 100 ==> flag;\nloop invariant i151: j == 100 ==> b == 100 ==> j == 100 ==> j == 100 ==> !flag;\nloop invariant i152: j == 100 ==> b == 100 ==> j == 100 ==> j == 100 ==> j == 100;\nloop invariant i153: j == 100 ==> b == 100 ==> j == 100 ==> j == 100 ==> j == 100 ==> flag;\nloop invariant i154: j == 100 ==> b == 100 ==> j == 100 ==> j == 100 ==> j == 100 ==> !flag;\nloop invariant i155: j == 100 ==> b == 100 ==> j == 100 ==> j == 100 ==> j == 100 ==> j == 100;\nloop invariant i156: j == 100 ==> b == 100 ==> j == 100 ==> j == 100 ==> j == 100 ==> j == 100 ==> flag;\nloop invariant i157: j == 100 ==> b == 100 ==> j == 100 ==> j == 100 ==> j == 100 ==> j == 100 ==> !flag;\nloop invariant i158: j == 100 ==> b == 100 ==> j == 100 ==> j == 100 ==> j == 100 ==> j == 100 ==> j == 100;\nloop invariant i159: j == 100 ==> b == 100 ==> j == 100 ==> j == 100 ==> j == 100 ==> j == 100 ==> j == 100 ==> flag;\nloop invariant i160: j == 100 ==> b == 100 ==> j == 100 ==> j == 100 ==> j == 100 ==> j == 100 ==> j == 100 ==> !flag;\nloop invariant i161: j == 100 ==> b == 100 ==> j == 100 ==> j == 100 ==> j == 100 ==> j == 100 ==> j == 100 ==> j == 100;\nloop invariant i162: j == 100 ==> b == 100 ==> j == 100 ==> j == 100 ==> j == 100 ==> j == 100 ==> j == 100 ==> j == 100 ==> flag;\nloop invariant i163: j == 100 ==> b == 100 ==> j == 100 ==> j == 100 ==> j == 100 ==> j == 100 ==> j == 100 ==> j == 100 ==> !flag;\nloop invariant i164: j == 100 ==> b == 100 ==> j == 100 ==> j == 100 ==> j == 100 ==> j == 100 ==> j == 100 ==> j == 100 ==> j == 100;\nloop invariant i165: flag ==> j == b;\nloop invariant i166: !flag ==> j == 0;\nloop invariant i167: b <= 100 ==> j <= 100;\nloop invariant i168: b <= 100 ==> flag ==> j <= 100;\nloop invariant i169: (flag == true ==> b == 100);\nloop invariant i170: (flag == false ==> b == 0);\nloop invariant i171: (flag == true ==> j == 100);\nloop invariant i172: (flag == false ==> j == 0);\nloop invariant i173: flag ==> j >= 1;\nloop invariant i174: if(flag) ==> j <= b;\nloop invariant i175: if(!flag) ==> j <= 0;\nloop invariant i176: if(flag) ==> j >= 0;\nloop invariant i177: 0 <= a <= 2;\n*/\nfor (b=0; b < 100 ; ++b){\n      if (flag)\n         j = j +1;\n   }\n\n   if(flag)\n      {;\n//@ assert(j==100);\n}\n\n}",
        "combined_annotation_num_solver_calls": 63,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\nextern int unknown3();\n\nint main() {\n   int flag = unknown1();\n   int a = unknown2();\n   int b = unknown3();\n   int j = 0;\n\n   /*@\nloop invariant i1: 0 <= b <= 100;\nloop invariant i2: j >= 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i94: 0 <= j <= 100;\n\nloop invariant i96: b >= 0;\nloop invariant i97: b <= 100;\n\n\n\n\n\n\nloop invariant i104: j <= 100;\n\n\n\nloop invariant i108: a <= 2147483647;\nloop invariant i109: b <= 2147483647;\n\n\n\n\n\n\n\n\n\nloop invariant i119: flag <= 1 ==> j <= 100;\nloop invariant i120: flag >= 1 ==> b <= 100;\nloop invariant i121: flag <= 1 ==> b >= 0;\n\n\nloop invariant i124: flag >= 1 ==> j >= 0;\n\nloop invariant i126: flag <= 1 ==> a <= 2147483647;\nloop invariant i127: flag >= 1 ==> b >= 0;\nloop invariant i128: flag <= 1 ==> b <= 2147483647;\nloop invariant i129: flag >= 1 ==> j <= 100;\nloop invariant i130: flag <= 1 ==> j >= 0;\nloop invariant i131: j <= b;\n\n\n\n\n\n\n\n\n\nloop invariant i141: j == 100 ==> flag;\n\nloop invariant i143: j == 100 ==> b == 100;\nloop invariant i144: j == 100 ==> b == 100 ==> flag;\n\nloop invariant i146: j == 100 ==> b == 100 ==> j == 100;\nloop invariant i147: j == 100 ==> b == 100 ==> j == 100 ==> flag;\n\nloop invariant i149: j == 100 ==> b == 100 ==> j == 100 ==> j == 100;\nloop invariant i150: j == 100 ==> b == 100 ==> j == 100 ==> j == 100 ==> flag;\n\nloop invariant i152: j == 100 ==> b == 100 ==> j == 100 ==> j == 100 ==> j == 100;\nloop invariant i153: j == 100 ==> b == 100 ==> j == 100 ==> j == 100 ==> j == 100 ==> flag;\n\nloop invariant i155: j == 100 ==> b == 100 ==> j == 100 ==> j == 100 ==> j == 100 ==> j == 100;\nloop invariant i156: j == 100 ==> b == 100 ==> j == 100 ==> j == 100 ==> j == 100 ==> j == 100 ==> flag;\n\nloop invariant i158: j == 100 ==> b == 100 ==> j == 100 ==> j == 100 ==> j == 100 ==> j == 100 ==> j == 100;\nloop invariant i159: j == 100 ==> b == 100 ==> j == 100 ==> j == 100 ==> j == 100 ==> j == 100 ==> j == 100 ==> flag;\n\nloop invariant i161: j == 100 ==> b == 100 ==> j == 100 ==> j == 100 ==> j == 100 ==> j == 100 ==> j == 100 ==> j == 100;\nloop invariant i162: j == 100 ==> b == 100 ==> j == 100 ==> j == 100 ==> j == 100 ==> j == 100 ==> j == 100 ==> j == 100 ==> flag;\n\nloop invariant i164: j == 100 ==> b == 100 ==> j == 100 ==> j == 100 ==> j == 100 ==> j == 100 ==> j == 100 ==> j == 100 ==> j == 100;\nloop invariant i165: flag ==> j == b;\nloop invariant i166: !flag ==> j == 0;\nloop invariant i167: b <= 100 ==> j <= 100;\nloop invariant i168: b <= 100 ==> flag ==> j <= 100;\n\n\n\n\n\n\n\n\n\n*/\nfor (b=0; b < 100 ; ++b){\n      if (flag)\n         j = j +1;\n   }\n\n   if(flag)\n      {;\n//@ assert(j==100);\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/split.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/11.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/15.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/16.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/18.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/13.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/14.c"
        ],
        "skipped": [],
        "total": 112,
        "success_count": 94,
        "failure_count": 18,
        "success_rate": 0.8392857142857143
    }
}