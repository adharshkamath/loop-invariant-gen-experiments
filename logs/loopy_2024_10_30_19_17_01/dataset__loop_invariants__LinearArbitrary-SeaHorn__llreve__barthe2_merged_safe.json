{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nvoid main() {\n\tint n = unknown();\n    int x1 = 0;\n    int x2 = 0;\n\n    int i1 = 0; \n    int i2 = 1; \n\twhile (1)\n\t{\n    \tif ( i1 <= n) {\n\t        x1 = x1 + i1;\n    \t    i1++;\n\t    }\n\n\t\tif ( i2 <= n) {\n\t        x2 = x2 + i2;\n    \t    i2++;\n\t\t}\n\n\t\tif (i1>n && i2>n) break;\n\t\t{;\n//@ assert(x2==x1+i1);\n}\n\n    }\n}",
        "success": false,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= i1 <= n;\nloop invariant 0 <= i2 <= n;\nloop invariant x1 == (i1 * (i1 - 1)) / 2;\nloop invariant x2 == (i2 * (i2 - 1)) / 2;\nloop invariant (i1 >= n ==> i2 >= n);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i1 <= n + 1;\nloop invariant 0 <= i2 <= n + 1;\nloop invariant x1 + i1 == x2;\nloop invariant x1 == x1_pre;\nloop invariant x2 == x2_pre;\nloop invariant i1 == i1_pre;\nloop invariant i2 == i2_pre;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= n;\nloop invariant 0 <= i1 <= n;\nloop invariant 1 <= i2 <= n;\nloop invariant x1 == (i1 - 1) * i1 / 2;\nloop invariant x2 == (i2 * (i2 - 1)) / 2;\nloop invariant x1 + i1 == x2;\nloop invariant i1 <= i2;\nloop invariant i2 <= n;\nloop invariant x1 <= x2;\nloop invariant x1 + i1 == x2;\nloop invariant x1 + i1 <= x2;\nloop invariant x1 + i1 == x2;\nloop invariant x1 + i1 == x2;\nloop invariant x1 + i1 == x2;\nloop invariant x1 + i1 == x2;\nloop invariant x1 + i1 == x2;\nloop invariant x1 + i1 == x2;\nloop invariant x1 + i1 == x2;\nloop invariant x1 + i1 == x2;\nloop invariant x1 + i1 == x2;\nloop invariant x1 + i1 == x2;\nloop invariant x1 + i1 == x2;\nloop invariant x1 + i1 == x2;\nloop invariant x1 + i1 == x2;\nloop invariant x1 + i1 == x2;\nloop invariant x1 + i1 == x2;\nloop invariant x1 + i1 == x2;\nloop invariant x1 + i1 == x2;\nloop invariant x1 + i1 == x2;\nloop invariant x1 + i1 == x2;\nloop invariant x1 + i1 == x2;\nloop invariant x1 + i1 == x2;\nloop invariant x1 + i1 == x2;\nloop invariant x1 + i1 == x2;\nloop invariant x1 + i1 == x2;\nloop invariant x1 + i1 == x2;\nloop invariant x1 + i1 == x2;\nloop invariant x1 + i1 == x2;\nloop invariant x1 + i1 == x2;\nloop invariant x1 + i1 == x2;\nloop invariant x1 + i1 == x2;\nloop invariant x1 + i1 == x2;\nloop invariant x1 + i1 == x2;\nloop invariant x1 + i1 == x2;\nloop invariant x1 + i1 == x2;\nloop invariant x1 + i1 == x2;\nloop invariant x1 + i1 == x2;\nloop invariant x1 + i1 == x2;\nloop invariant x1 + i1 == x2;\nloop invariant x1 + i1 == x2;\nloop invariant x1 + i1 == x2;\nloop invariant x1 + i1 == x2;\nloop invariant x1 + i1 == x2;\nloop invariant x1 + i1 == x2;\nloop invariant x1 + i1 == x2;\nloop invariant x1 + i1 == x2;\nloop invariant x1 + i1 == x2;\nloop invariant x1 + i1 == x2;\nloop invariant x1 + i1 == x2;\nloop invariant x1 + i1 == x2;\nloop invariant x1 + i1 == x2;\nloop invariant x1 + i1 == x2;\nloop invariant x1 + i1 == x2;\nloop invariant x1 + i1 == x2;\nloop invariant x1 + i1 == x2;\nloop invariant x1 + i1 == x2;\nloop invariant x1 + i1 == x2;\nloop invariant x1 + i1 == x2;\nloop invariant x1 + i1 == x2;\nloop invariant x1 + i1 == x2;\nloop invariant x1 + i1 == x2;\nloop invariant x1 + i1 == x2;\nloop invariant x1 + i1 == x2;\nloop invariant x1 + i1 == x2;\nloop invariant x1 + i1 == x2;\nloop invariant x1 + i1 == x2;\nloop invariant x1 + i1 == x2;\nloop invariant x1 + i1 == x2;\nloop invariant x1 + i1 == x2;\nloop invariant x1 + i1 == x2;\nloop invariant x1 + i1 == x2;\nloop invariant x1 + i1 == x2;\nloop invariant x1 + i1 == x2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x1 <= x2;\nloop invariant x1 + x2 == i1 + i2;\nloop invariant i1 <= i2 <= n;\nloop invariant i1 <= n;\nloop invariant i2 <= n;\nloop invariant i1 + i2 <= 2*n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i1 <= n;\nloop invariant 0 <= i2 <= n;\nloop invariant 0 <= x1 <= (n * (n + 1) / 2);\nloop invariant 0 <= x2 <= (n * (n + 1) / 2);\nloop invariant x1 <= x2;\nloop invariant x2==x1+(n-i1);\nloop invariant x1==x2-(n-i2);\nloop invariant i1=n ==> x1==n*(n+1)/2;\nloop invariant i2=n ==> x2==n*(n+1)/2;\nloop invariant 0 <= i1 <= n;\nloop invariant 0 <= i2 <= n;\nloop invariant 0 <= x1 <= (n * (n + 1) / 2);\nloop invariant 0 <= x2 <= (n * (n + 1) / 2);\nloop invariant x1 <= x2;\nloop invariant x2==x1+(n-i1);\nloop invariant x1==x2-(n-i2);\nloop invariant i1=n ==> x1==n*(n+1)/2;\nloop invariant i2=n ==> x2==n*(n+1)/2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x1 <= ((n * (n + 1)) / 2);\nloop invariant 0 <= x2 <= ((n * (n + 1)) / 2);\nloop invariant 0 <= i1 <= n;\nloop invariant 0 <= i2 <= n;\nloop invariant i1 <= i2;\nloop invariant (x1 == (x2 + i1));\nloop invariant (x2 == (x1 + i1));\nloop invariant (i1 - i2) <= n;\nloop invariant (i2 - i1) <= n;\nloop invariant (i1 <= n) ==> (x1 == ((n * (n + 1)) / 2));\nloop invariant (i2 <= n) ==> (x2 == ((n * (n + 1)) / 2));\nloop invariant (i1 > n) ==> (x1 == ((n * (n + 1)) / 2));\nloop invariant (i2 > n) ==> (x2 == ((n * (n + 1)) / 2));\nloop invariant 0 <= x1 <= ((n * (n + 1)) / 2);\nloop invariant 0 <= x2 <= ((n * (n + 1)) / 2);\nloop invariant 0 <= i1 <= n;\nloop invariant 0 <= i2 <= n;\nloop invariant i1 <= i2;\nloop invariant (x1 == (x2 + i1));\nloop invariant (x2 == (x1 + i1));\nloop invariant (i1 - i2) <= n;\nloop invariant (i2 - i1) <= n;\nloop invariant (i1 <= n) ==> (x1 == ((n * (n + 1)) / 2));\nloop invariant (i2 <= n) ==> (x2 == ((n * (n + 1)) / 2));\nloop invariant (i1 > n) ==> (x1 == ((n * (n + 1)) / 2));\nloop invariant (i2 > n) ==> (x2 == ((n * (n + 1)) / 2));\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i1 <= n;\nloop invariant 0 <= i2 <= n;\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x2 == x1 + i1 ==> i1 <= n;loop invariant x2 == x1 + i1 ==> i2 + 1 > n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i1 <= n;\nloop invariant 0 <= i2 <= n;\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x1 >= i1;\nloop invariant x2 >= i2;\nloop invariant x1 <= x2 + n;\nloop invariant x2 <= x1 + n;\nloop invariant x1 - x2 <= n;\nloop invariant x2 - x1 <= n;\nloop invariant x1 + i1 == x2 + i2 ==> x1 + i1 == x2 + i2;\nloop invariant x1 + i1 == x2 + i2 ==> x1 >= x2;\nloop invariant x1 + i1 == x2 + i2 ==> x1 <= x2 + n;\nloop invariant x1 + i1 == x2 + i2 ==> x2 <= x1 + n;\nloop invariant x1 + i1 == x2 + i2 ==> x2 - x1 <= n;\nloop invariant x1 + i1 == x2 + i2 ==> x1 - x2 <= n;\nloop invariant x1 + i1 == x2 + i2 ==> x1 - x2 + i1 == x2 - x1 + i2;\nloop invariant x1 + i1 == x2 + i2 ==> x1 - x2 + i1 == x2 - x1 + i2;\nloop invariant x1 + i1 == x2 + i2 ==> x1 - x2 + i1 == x2 - x1 + i2;\nloop invariant x1 + i1 == x2 + i2 ==> x1 - x2 + i1 == x2 - x1 + i2;\nloop invariant x1 + i1 == x2 + i2 ==> x1 - x2 + i1 == x2 - x1 + i2;\nloop invariant x1 + i1 == x2 + i2 ==> x1 - x2 + i1 == x2 - x1 + i2;\nloop invariant x1 + i1 == x2 + i2 ==> x1 - x2 + i1 == x2 - x1 + i2;\nloop invariant x1 + i1 == x2 + i2 ==> x1 - x2 + i1 == x2 - x1 + i2;\nloop invariant x1 + i1 == x2 + i2 ==> x1 - x2 + i1 == x2 - x1 + i2;\nloop invariant x1 + i1 == x2 + i2 ==> x1 - x2 + i1 == x2 - x1 + i2;\nloop invariant x1 + i1 == x2 + i2 ==> x1 - x2 + i1 == x2 - x1 + i2;\nloop invariant x1 + i1 == x2 + i2 ==> x1 - x2 + i1 == x2 - x1 + i2;\nloop invariant x1 + i1 == x2 + i2 ==> x1 - x2 + i1 == x2 - x1 + i2;\nloop invariant x1 + i1 == x2 + i2 ==> x1 - x2 + i1 == x2 - x1 + i2;\nloop invariant x1 + i1 == x2 + i2 ==> x1 - x2 + i1 == x2 - x1 + i2;\nloop invariant x1 + i1 == x2 + i2 ==> x1 - x2 + i1 == x2 - x1 + i2;\nloop invariant x1 + i1 == x2 + i2 ==> x1 - x2 + i1 == x2 - x1 + i2;\nloop invariant x1 + i1 == x2 + i2 ==> x1 - x2 + i1 == x2 - x1 + i2;\nloop invariant x1 + i1 == x2 + i2 ==> x1 - x2 + i1 == x2 - x1 + i2;\nloop invariant x1 + i1 == x2 + i2 ==> x1 - x2 + i1 == x2 - x1 + i2;\nloop invariant x1 + i1 == x2 + i2 ==> x1 - x2 + i1 == x2 - x1 + i2;\nloop invariant x1 + i1 == x2 + i2 ==> x1 - x2 + i1 == x2 - x1 + i2;\nloop invariant x1 + i1 == x2 + i2 ==> x1 - x2 + i1 == x2 - x1 + i2;\nloop invariant x1 + i1 == x2 + i2 ==> x1 - x2 + i1 == x2 - x1 + i2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i1 <= n + 1;\nloop invariant 1 <= i2 <= n + 1;\nloop invariant x1 == (i1 * (i1 - 1)) / 2;\nloop invariant x2 == (i2 * (i2 - 1)) / 2;\nloop invariant x2 <= x1 + i1;\nloop invariant if (i1 == n + 1) then x2 == x1 + i1;\nloop invariant if (i2 == n + 1) then x2 == x1 + i1;\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 1 <= n;\nloop invariant i1 <= n && i2 <= n;\nloop invariant x1 >= 0 && x2 >= 0;\nloop invariant x1 <= n * (n + 1) / 2 && x2 <= n * (n + 1) / 2;\nloop invariant (i1 == i2 ==> x1 == x2 + i1);\nloop invariant (i1 > n ==> x1 == n * (n + 1) / 2);\nloop invariant (i2 > n ==> x2 == n * (n + 1) / 2);\nloop invariant (i1 > n && i2 > n ==> x2 == x1 + i1);\nloop invariant (i1 > n && i2 > n ==> i1 == i2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i1 <= n;\nloop invariant 0 <= i2 <= n;\nloop invariant x1 == (1 + (i1 - 1) * i1 / 2) && x2 == (1 + (i2 - 1) * i2 / 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i1 <= n;loop invariant i2 >= 1;loop invariant i2 <= n + 1;loop invariant x1 + i1 <= x2;loop invariant x1 + i1 == x2 ==> i2 <= i1;loop invariant x1 + i1 == x2 ==> i2 == i1 + 1;loop invariant x2 == x1 + i1 + i2 - 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i1 <= n;\nloop invariant 0 <= i2 <= n;\nloop invariant 0 <= x1 <= n*(n+1)/2;\nloop invariant 0 <= x2 <= n*(n+1)/2;\nloop invariant x2 == x1 + i1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i1 <= n;\nloop invariant 0 <= i2 <= n;\nloop invariant i1 <= i2;\nloop invariant x1 == (i1 * (i1 + 1)) / 2;\nloop invariant x2 == (i2 * (i2 + 1)) / 2;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i1 <= n;\nloop invariant 0 <= i2 <= n;\nloop invariant x1 == (i1 * (i1 - 1)) / 2;\nloop invariant x2 == (i2 * (i2 - 1)) / 2;\nloop invariant (i1 >= n ==> i2 >= n);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nvoid main() {\n\tint n = unknown();\n    int x1 = 0;\n    int x2 = 0;\n\n    int i1 = 0; \n    int i2 = 1; \n\t/*@\n\n\nloop invariant i3: x1 == (i1 * (i1 - 1)) / 2;\nloop invariant i4: x2 == (i2 * (i2 - 1)) / 2;\n\n*/\nwhile (1)\n\t{\n    \tif ( i1 <= n) {\n\t        x1 = x1 + i1;\n    \t    i1++;\n\t    }\n\n\t\tif ( i2 <= n) {\n\t        x2 = x2 + i2;\n    \t    i2++;\n\t\t}\n\n\t\tif (i1>n && i2>n) break;\n\t\t{;\n//@ assert(x2==x1+i1);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= i1 <= n + 1;\nloop invariant 0 <= i2 <= n + 1;\nloop invariant x1 + i1 == x2;\nloop invariant x1 == x1_pre;\nloop invariant x2 == x2_pre;\nloop invariant i1 == i1_pre;\nloop invariant i2 == i2_pre;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nvoid main() {\n\tint n = unknown();\n    int x1 = 0;\n    int x2 = 0;\n\n    int i1 = 0; \n    int i2 = 1; \n\t/*@\n\n\nloop invariant i3: x1 + i1 == x2;\n\n\n\n\n*/\nwhile (1)\n\t{\n    \tif ( i1 <= n) {\n\t        x1 = x1 + i1;\n    \t    i1++;\n\t    }\n\n\t\tif ( i2 <= n) {\n\t        x2 = x2 + i2;\n    \t    i2++;\n\t\t}\n\n\t\tif (i1>n && i2>n) break;\n\t\t{;\n//@ assert(x2==x1+i1);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= n;\nloop invariant 0 <= i1 <= n;\nloop invariant 1 <= i2 <= n;\nloop invariant x1 == (i1 - 1) * i1 / 2;\nloop invariant x2 == (i2 * (i2 - 1)) / 2;\nloop invariant x1 + i1 == x2;\nloop invariant i1 <= i2;\nloop invariant i2 <= n;\nloop invariant x1 <= x2;\nloop invariant x1 + i1 == x2;\nloop invariant x1 + i1 <= x2;\nloop invariant x1 + i1 == x2;\nloop invariant x1 + i1 == x2;\nloop invariant x1 + i1 == x2;\nloop invariant x1 + i1 == x2;\nloop invariant x1 + i1 == x2;\nloop invariant x1 + i1 == x2;\nloop invariant x1 + i1 == x2;\nloop invariant x1 + i1 == x2;\nloop invariant x1 + i1 == x2;\nloop invariant x1 + i1 == x2;\nloop invariant x1 + i1 == x2;\nloop invariant x1 + i1 == x2;\nloop invariant x1 + i1 == x2;\nloop invariant x1 + i1 == x2;\nloop invariant x1 + i1 == x2;\nloop invariant x1 + i1 == x2;\nloop invariant x1 + i1 == x2;\nloop invariant x1 + i1 == x2;\nloop invariant x1 + i1 == x2;\nloop invariant x1 + i1 == x2;\nloop invariant x1 + i1 == x2;\nloop invariant x1 + i1 == x2;\nloop invariant x1 + i1 == x2;\nloop invariant x1 + i1 == x2;\nloop invariant x1 + i1 == x2;\nloop invariant x1 + i1 == x2;\nloop invariant x1 + i1 == x2;\nloop invariant x1 + i1 == x2;\nloop invariant x1 + i1 == x2;\nloop invariant x1 + i1 == x2;\nloop invariant x1 + i1 == x2;\nloop invariant x1 + i1 == x2;\nloop invariant x1 + i1 == x2;\nloop invariant x1 + i1 == x2;\nloop invariant x1 + i1 == x2;\nloop invariant x1 + i1 == x2;\nloop invariant x1 + i1 == x2;\nloop invariant x1 + i1 == x2;\nloop invariant x1 + i1 == x2;\nloop invariant x1 + i1 == x2;\nloop invariant x1 + i1 == x2;\nloop invariant x1 + i1 == x2;\nloop invariant x1 + i1 == x2;\nloop invariant x1 + i1 == x2;\nloop invariant x1 + i1 == x2;\nloop invariant x1 + i1 == x2;\nloop invariant x1 + i1 == x2;\nloop invariant x1 + i1 == x2;\nloop invariant x1 + i1 == x2;\nloop invariant x1 + i1 == x2;\nloop invariant x1 + i1 == x2;\nloop invariant x1 + i1 == x2;\nloop invariant x1 + i1 == x2;\nloop invariant x1 + i1 == x2;\nloop invariant x1 + i1 == x2;\nloop invariant x1 + i1 == x2;\nloop invariant x1 + i1 == x2;\nloop invariant x1 + i1 == x2;\nloop invariant x1 + i1 == x2;\nloop invariant x1 + i1 == x2;\nloop invariant x1 + i1 == x2;\nloop invariant x1 + i1 == x2;\nloop invariant x1 + i1 == x2;\nloop invariant x1 + i1 == x2;\nloop invariant x1 + i1 == x2;\nloop invariant x1 + i1 == x2;\nloop invariant x1 + i1 == x2;\nloop invariant x1 + i1 == x2;\nloop invariant x1 + i1 == x2;\nloop invariant x1 + i1 == x2;\nloop invariant x1 + i1 == x2;\nloop invariant x1 + i1 == x2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nvoid main() {\n\tint n = unknown();\n    int x1 = 0;\n    int x2 = 0;\n\n    int i1 = 0; \n    int i2 = 1; \n\t/*@\n\n\n\nloop invariant i4: x1 == (i1 - 1) * i1 / 2;\nloop invariant i5: x2 == (i2 * (i2 - 1)) / 2;\nloop invariant i6: x1 + i1 == x2;\nloop invariant i7: i1 <= i2;\n\nloop invariant i9: x1 <= x2;\nloop invariant i10: x1 + i1 <= x2;\n*/\nwhile (1)\n\t{\n    \tif ( i1 <= n) {\n\t        x1 = x1 + i1;\n    \t    i1++;\n\t    }\n\n\t\tif ( i2 <= n) {\n\t        x2 = x2 + i2;\n    \t    i2++;\n\t\t}\n\n\t\tif (i1>n && i2>n) break;\n\t\t{;\n//@ assert(x2==x1+i1);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x1 <= x2;\nloop invariant x1 + x2 == i1 + i2;\nloop invariant i1 <= i2 <= n;\nloop invariant i1 <= n;\nloop invariant i2 <= n;\nloop invariant i1 + i2 <= 2*n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nvoid main() {\n\tint n = unknown();\n    int x1 = 0;\n    int x2 = 0;\n\n    int i1 = 0; \n    int i2 = 1; \n\t/*@\n\n\n\n\n\n\n*/\nwhile (1)\n\t{\n    \tif ( i1 <= n) {\n\t        x1 = x1 + i1;\n    \t    i1++;\n\t    }\n\n\t\tif ( i2 <= n) {\n\t        x2 = x2 + i2;\n    \t    i2++;\n\t\t}\n\n\t\tif (i1>n && i2>n) break;\n\t\t{;\n//@ assert(x2==x1+i1);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= i1 <= n;\nloop invariant 0 <= i2 <= n;\nloop invariant 0 <= x1 <= (n * (n + 1) / 2);\nloop invariant 0 <= x2 <= (n * (n + 1) / 2);\nloop invariant x1 <= x2;\nloop invariant x2==x1+(n-i1);\nloop invariant x1==x2-(n-i2);\nloop invariant i1=n ==> x1==n*(n+1)/2;\nloop invariant i2=n ==> x2==n*(n+1)/2;\nloop invariant 0 <= i1 <= n;\nloop invariant 0 <= i2 <= n;\nloop invariant 0 <= x1 <= (n * (n + 1) / 2);\nloop invariant 0 <= x2 <= (n * (n + 1) / 2);\nloop invariant x1 <= x2;\nloop invariant x2==x1+(n-i1);\nloop invariant x1==x2-(n-i2);\nloop invariant i1=n ==> x1==n*(n+1)/2;\nloop invariant i2=n ==> x2==n*(n+1)/2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nvoid main() {\n\tint n = unknown();\n    int x1 = 0;\n    int x2 = 0;\n\n    int i1 = 0; \n    int i2 = 1; \n\t/*@\n\n\n\n\n\n\n\n\n\n*/\nwhile (1)\n\t{\n    \tif ( i1 <= n) {\n\t        x1 = x1 + i1;\n    \t    i1++;\n\t    }\n\n\t\tif ( i2 <= n) {\n\t        x2 = x2 + i2;\n    \t    i2++;\n\t\t}\n\n\t\tif (i1>n && i2>n) break;\n\t\t{;\n//@ assert(x2==x1+i1);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= x1 <= ((n * (n + 1)) / 2);\nloop invariant 0 <= x2 <= ((n * (n + 1)) / 2);\nloop invariant 0 <= i1 <= n;\nloop invariant 0 <= i2 <= n;\nloop invariant i1 <= i2;\nloop invariant (x1 == (x2 + i1));\nloop invariant (x2 == (x1 + i1));\nloop invariant (i1 - i2) <= n;\nloop invariant (i2 - i1) <= n;\nloop invariant (i1 <= n) ==> (x1 == ((n * (n + 1)) / 2));\nloop invariant (i2 <= n) ==> (x2 == ((n * (n + 1)) / 2));\nloop invariant (i1 > n) ==> (x1 == ((n * (n + 1)) / 2));\nloop invariant (i2 > n) ==> (x2 == ((n * (n + 1)) / 2));\nloop invariant 0 <= x1 <= ((n * (n + 1)) / 2);\nloop invariant 0 <= x2 <= ((n * (n + 1)) / 2);\nloop invariant 0 <= i1 <= n;\nloop invariant 0 <= i2 <= n;\nloop invariant i1 <= i2;\nloop invariant (x1 == (x2 + i1));\nloop invariant (x2 == (x1 + i1));\nloop invariant (i1 - i2) <= n;\nloop invariant (i2 - i1) <= n;\nloop invariant (i1 <= n) ==> (x1 == ((n * (n + 1)) / 2));\nloop invariant (i2 <= n) ==> (x2 == ((n * (n + 1)) / 2));\nloop invariant (i1 > n) ==> (x1 == ((n * (n + 1)) / 2));\nloop invariant (i2 > n) ==> (x2 == ((n * (n + 1)) / 2));\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nvoid main() {\n\tint n = unknown();\n    int x1 = 0;\n    int x2 = 0;\n\n    int i1 = 0; \n    int i2 = 1; \n\t/*@\n\n\n\n\nloop invariant i5: i1 <= i2;\n\nloop invariant i7: (x2 == (x1 + i1));\n\n\n\n\n\n\n*/\nwhile (1)\n\t{\n    \tif ( i1 <= n) {\n\t        x1 = x1 + i1;\n    \t    i1++;\n\t    }\n\n\t\tif ( i2 <= n) {\n\t        x2 = x2 + i2;\n    \t    i2++;\n\t\t}\n\n\t\tif (i1>n && i2>n) break;\n\t\t{;\n//@ assert(x2==x1+i1);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i1 <= n;\nloop invariant 0 <= i2 <= n;\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x2 == x1 + i1 ==> i1 <= n;loop invariant x2 == x1 + i1 ==> i2 + 1 > n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nvoid main() {\n\tint n = unknown();\n    int x1 = 0;\n    int x2 = 0;\n\n    int i1 = 0; \n    int i2 = 1; \n\t/*@\n\n\n\n\n\n*/\nwhile (1)\n\t{\n    \tif ( i1 <= n) {\n\t        x1 = x1 + i1;\n    \t    i1++;\n\t    }\n\n\t\tif ( i2 <= n) {\n\t        x2 = x2 + i2;\n    \t    i2++;\n\t\t}\n\n\t\tif (i1>n && i2>n) break;\n\t\t{;\n//@ assert(x2==x1+i1);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant 0 <= i1 <= n;\nloop invariant 0 <= i2 <= n;\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x1 >= i1;\nloop invariant x2 >= i2;\nloop invariant x1 <= x2 + n;\nloop invariant x2 <= x1 + n;\nloop invariant x1 - x2 <= n;\nloop invariant x2 - x1 <= n;\nloop invariant x1 + i1 == x2 + i2 ==> x1 + i1 == x2 + i2;\nloop invariant x1 + i1 == x2 + i2 ==> x1 >= x2;\nloop invariant x1 + i1 == x2 + i2 ==> x1 <= x2 + n;\nloop invariant x1 + i1 == x2 + i2 ==> x2 <= x1 + n;\nloop invariant x1 + i1 == x2 + i2 ==> x2 - x1 <= n;\nloop invariant x1 + i1 == x2 + i2 ==> x1 - x2 <= n;\nloop invariant x1 + i1 == x2 + i2 ==> x1 - x2 + i1 == x2 - x1 + i2;\nloop invariant x1 + i1 == x2 + i2 ==> x1 - x2 + i1 == x2 - x1 + i2;\nloop invariant x1 + i1 == x2 + i2 ==> x1 - x2 + i1 == x2 - x1 + i2;\nloop invariant x1 + i1 == x2 + i2 ==> x1 - x2 + i1 == x2 - x1 + i2;\nloop invariant x1 + i1 == x2 + i2 ==> x1 - x2 + i1 == x2 - x1 + i2;\nloop invariant x1 + i1 == x2 + i2 ==> x1 - x2 + i1 == x2 - x1 + i2;\nloop invariant x1 + i1 == x2 + i2 ==> x1 - x2 + i1 == x2 - x1 + i2;\nloop invariant x1 + i1 == x2 + i2 ==> x1 - x2 + i1 == x2 - x1 + i2;\nloop invariant x1 + i1 == x2 + i2 ==> x1 - x2 + i1 == x2 - x1 + i2;\nloop invariant x1 + i1 == x2 + i2 ==> x1 - x2 + i1 == x2 - x1 + i2;\nloop invariant x1 + i1 == x2 + i2 ==> x1 - x2 + i1 == x2 - x1 + i2;\nloop invariant x1 + i1 == x2 + i2 ==> x1 - x2 + i1 == x2 - x1 + i2;\nloop invariant x1 + i1 == x2 + i2 ==> x1 - x2 + i1 == x2 - x1 + i2;\nloop invariant x1 + i1 == x2 + i2 ==> x1 - x2 + i1 == x2 - x1 + i2;\nloop invariant x1 + i1 == x2 + i2 ==> x1 - x2 + i1 == x2 - x1 + i2;\nloop invariant x1 + i1 == x2 + i2 ==> x1 - x2 + i1 == x2 - x1 + i2;\nloop invariant x1 + i1 == x2 + i2 ==> x1 - x2 + i1 == x2 - x1 + i2;\nloop invariant x1 + i1 == x2 + i2 ==> x1 - x2 + i1 == x2 - x1 + i2;\nloop invariant x1 + i1 == x2 + i2 ==> x1 - x2 + i1 == x2 - x1 + i2;\nloop invariant x1 + i1 == x2 + i2 ==> x1 - x2 + i1 == x2 - x1 + i2;\nloop invariant x1 + i1 == x2 + i2 ==> x1 - x2 + i1 == x2 - x1 + i2;\nloop invariant x1 + i1 == x2 + i2 ==> x1 - x2 + i1 == x2 - x1 + i2;\nloop invariant x1 + i1 == x2 + i2 ==> x1 - x2 + i1 == x2 - x1 + i2;\nloop invariant x1 + i1 == x2 + i2 ==> x1 - x2 + i1 == x2 - x1 + i2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nvoid main() {\n\tint n = unknown();\n    int x1 = 0;\n    int x2 = 0;\n\n    int i1 = 0; \n    int i2 = 1; \n\t/*@\n\n\n\n\n\n\n\n\n\n\nloop invariant i11: x1 + i1 == x2 + i2 ==> x1 + i1 == x2 + i2;\n\n\n\n\n\n\n*/\nwhile (1)\n\t{\n    \tif ( i1 <= n) {\n\t        x1 = x1 + i1;\n    \t    i1++;\n\t    }\n\n\t\tif ( i2 <= n) {\n\t        x2 = x2 + i2;\n    \t    i2++;\n\t\t}\n\n\t\tif (i1>n && i2>n) break;\n\t\t{;\n//@ assert(x2==x1+i1);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i1 <= n + 1;\nloop invariant 1 <= i2 <= n + 1;\nloop invariant x1 == (i1 * (i1 - 1)) / 2;\nloop invariant x2 == (i2 * (i2 - 1)) / 2;\nloop invariant x2 <= x1 + i1;\nloop invariant if (i1 == n + 1) then x2 == x1 + i1;\nloop invariant if (i2 == n + 1) then x2 == x1 + i1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nvoid main() {\n\tint n = unknown();\n    int x1 = 0;\n    int x2 = 0;\n\n    int i1 = 0; \n    int i2 = 1; \n\t/*@\n\n\nloop invariant i3: x1 == (i1 * (i1 - 1)) / 2;\nloop invariant i4: x2 == (i2 * (i2 - 1)) / 2;\nloop invariant i5: x2 <= x1 + i1;\n\n\n*/\nwhile (1)\n\t{\n    \tif ( i1 <= n) {\n\t        x1 = x1 + i1;\n    \t    i1++;\n\t    }\n\n\t\tif ( i2 <= n) {\n\t        x2 = x2 + i2;\n    \t    i2++;\n\t\t}\n\n\t\tif (i1>n && i2>n) break;\n\t\t{;\n//@ assert(x2==x1+i1);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nvoid main() {\n\tint n = unknown();\n    int x1 = 0;\n    int x2 = 0;\n\n    int i1 = 0; \n    int i2 = 1; \n\t/*@\n\n*/\nwhile (1)\n\t{\n    \tif ( i1 <= n) {\n\t        x1 = x1 + i1;\n    \t    i1++;\n\t    }\n\n\t\tif ( i2 <= n) {\n\t        x2 = x2 + i2;\n    \t    i2++;\n\t\t}\n\n\t\tif (i1>n && i2>n) break;\n\t\t{;\n//@ assert(x2==x1+i1);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 1 <= n;\nloop invariant i1 <= n && i2 <= n;\nloop invariant x1 >= 0 && x2 >= 0;\nloop invariant x1 <= n * (n + 1) / 2 && x2 <= n * (n + 1) / 2;\nloop invariant (i1 == i2 ==> x1 == x2 + i1);\nloop invariant (i1 > n ==> x1 == n * (n + 1) / 2);\nloop invariant (i2 > n ==> x2 == n * (n + 1) / 2);\nloop invariant (i1 > n && i2 > n ==> x2 == x1 + i1);\nloop invariant (i1 > n && i2 > n ==> i1 == i2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nvoid main() {\n\tint n = unknown();\n    int x1 = 0;\n    int x2 = 0;\n\n    int i1 = 0; \n    int i2 = 1; \n\t/*@\n\n\n\n\nloop invariant i5: (i1 == i2 ==> x1 == x2 + i1);\n\n\nloop invariant i8: (i1 > n && i2 > n ==> x2 == x1 + i1);\n\n*/\nwhile (1)\n\t{\n    \tif ( i1 <= n) {\n\t        x1 = x1 + i1;\n    \t    i1++;\n\t    }\n\n\t\tif ( i2 <= n) {\n\t        x2 = x2 + i2;\n    \t    i2++;\n\t\t}\n\n\t\tif (i1>n && i2>n) break;\n\t\t{;\n//@ assert(x2==x1+i1);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i1 <= n;\nloop invariant 0 <= i2 <= n;\nloop invariant x1 == (1 + (i1 - 1) * i1 / 2) && x2 == (1 + (i2 - 1) * i2 / 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nvoid main() {\n\tint n = unknown();\n    int x1 = 0;\n    int x2 = 0;\n\n    int i1 = 0; \n    int i2 = 1; \n\t/*@\n\n\n\n*/\nwhile (1)\n\t{\n    \tif ( i1 <= n) {\n\t        x1 = x1 + i1;\n    \t    i1++;\n\t    }\n\n\t\tif ( i2 <= n) {\n\t        x2 = x2 + i2;\n    \t    i2++;\n\t\t}\n\n\t\tif (i1>n && i2>n) break;\n\t\t{;\n//@ assert(x2==x1+i1);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i1 <= n;loop invariant i2 >= 1;loop invariant i2 <= n + 1;loop invariant x1 + i1 <= x2;loop invariant x1 + i1 == x2 ==> i2 <= i1;loop invariant x1 + i1 == x2 ==> i2 == i1 + 1;loop invariant x2 == x1 + i1 + i2 - 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nvoid main() {\n\tint n = unknown();\n    int x1 = 0;\n    int x2 = 0;\n\n    int i1 = 0; \n    int i2 = 1; \n\t/*@\n\n*/\nwhile (1)\n\t{\n    \tif ( i1 <= n) {\n\t        x1 = x1 + i1;\n    \t    i1++;\n\t    }\n\n\t\tif ( i2 <= n) {\n\t        x2 = x2 + i2;\n    \t    i2++;\n\t\t}\n\n\t\tif (i1>n && i2>n) break;\n\t\t{;\n//@ assert(x2==x1+i1);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i1 <= n;\nloop invariant 0 <= i2 <= n;\nloop invariant 0 <= x1 <= n*(n+1)/2;\nloop invariant 0 <= x2 <= n*(n+1)/2;\nloop invariant x2 == x1 + i1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nvoid main() {\n\tint n = unknown();\n    int x1 = 0;\n    int x2 = 0;\n\n    int i1 = 0; \n    int i2 = 1; \n\t/*@\n\n\n\n\nloop invariant i5: x2 == x1 + i1;\n*/\nwhile (1)\n\t{\n    \tif ( i1 <= n) {\n\t        x1 = x1 + i1;\n    \t    i1++;\n\t    }\n\n\t\tif ( i2 <= n) {\n\t        x2 = x2 + i2;\n    \t    i2++;\n\t\t}\n\n\t\tif (i1>n && i2>n) break;\n\t\t{;\n//@ assert(x2==x1+i1);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i1 <= n;\nloop invariant 0 <= i2 <= n;\nloop invariant i1 <= i2;\nloop invariant x1 == (i1 * (i1 + 1)) / 2;\nloop invariant x2 == (i2 * (i2 + 1)) / 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nvoid main() {\n\tint n = unknown();\n    int x1 = 0;\n    int x2 = 0;\n\n    int i1 = 0; \n    int i2 = 1; \n\t/*@\n\n\nloop invariant i3: i1 <= i2;\n\n\n*/\nwhile (1)\n\t{\n    \tif ( i1 <= n) {\n\t        x1 = x1 + i1;\n    \t    i1++;\n\t    }\n\n\t\tif ( i2 <= n) {\n\t        x2 = x2 + i2;\n    \t    i2++;\n\t\t}\n\n\t\tif (i1>n && i2>n) break;\n\t\t{;\n//@ assert(x2==x1+i1);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 45: Assignment operators not allowed in annotations.",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nvoid main() {\n\tint n = unknown();\n    int x1 = 0;\n    int x2 = 0;\n\n    int i1 = 0; \n    int i2 = 1; \n\t/*@\nloop invariant i1: 0 <= i1 <= n;\nloop invariant i2: 0 <= i2 <= n;\nloop invariant i3: x1 == (i1 * (i1 - 1)) / 2;\nloop invariant i4: x2 == (i2 * (i2 - 1)) / 2;\nloop invariant i5: (i1 >= n ==> i2 >= n);\nloop invariant i6: 0 <= i1 <= n + 1;\nloop invariant i7: 0 <= i2 <= n + 1;\nloop invariant i8: x1 + i1 == x2;\nloop invariant i9: x1 == x1_pre;\nloop invariant i10: x2 == x2_pre;\nloop invariant i11: i1 == i1_pre;\nloop invariant i12: i2 == i2_pre;\nloop invariant i13: 0 <= n;\nloop invariant i14: 1 <= i2 <= n;\nloop invariant i15: x1 == (i1 - 1) * i1 / 2;\nloop invariant i16: i1 <= i2;\nloop invariant i17: i2 <= n;\nloop invariant i18: x1 <= x2;\nloop invariant i19: x1 + i1 <= x2;\nloop invariant i20: 0 <= x1 <= x2;\nloop invariant i21: x1 + x2 == i1 + i2;\nloop invariant i22: i1 <= i2 <= n;\nloop invariant i23: i1 <= n;\nloop invariant i24: i1 + i2 <= 2*n;\nloop invariant i25: 0 <= x1 <= (n * (n + 1) / 2);\nloop invariant i26: 0 <= x2 <= (n * (n + 1) / 2);\nloop invariant i27: x2==x1+(n-i1);\nloop invariant i28: x1==x2-(n-i2);\nloop invariant i29: i1=n ==> x1==n*(n+1)/2;\nloop invariant i30: i2=n ==> x2==n*(n+1)/2;\nloop invariant i31: 0 <= x1 <= ((n * (n + 1)) / 2);\nloop invariant i32: 0 <= x2 <= ((n * (n + 1)) / 2);\nloop invariant i33: (x1 == (x2 + i1));\nloop invariant i34: (x2 == (x1 + i1));\nloop invariant i35: (i1 - i2) <= n;\nloop invariant i36: (i2 - i1) <= n;\nloop invariant i37: (i1 <= n) ==> (x1 == ((n * (n + 1)) / 2));\nloop invariant i38: (i2 <= n) ==> (x2 == ((n * (n + 1)) / 2));\nloop invariant i39: (i1 > n) ==> (x1 == ((n * (n + 1)) / 2));\nloop invariant i40: (i2 > n) ==> (x2 == ((n * (n + 1)) / 2));\nloop invariant i41: x1 >= 0;\nloop invariant i42: x2 >= 0;\nloop invariant i43: x2 == x1 + i1 ==> i1 <= n;loop invariant x2 == x1 + i1 ==> i2 + 1 > n;\nloop invariant i44: x1 >= i1;\nloop invariant i45: x2 >= i2;\nloop invariant i46: x1 <= x2 + n;\nloop invariant i47: x2 <= x1 + n;\nloop invariant i48: x1 - x2 <= n;\nloop invariant i49: x2 - x1 <= n;\nloop invariant i50: x1 + i1 == x2 + i2 ==> x1 + i1 == x2 + i2;\nloop invariant i51: x1 + i1 == x2 + i2 ==> x1 >= x2;\nloop invariant i52: x1 + i1 == x2 + i2 ==> x1 <= x2 + n;\nloop invariant i53: x1 + i1 == x2 + i2 ==> x2 <= x1 + n;\nloop invariant i54: x1 + i1 == x2 + i2 ==> x2 - x1 <= n;\nloop invariant i55: x1 + i1 == x2 + i2 ==> x1 - x2 <= n;\nloop invariant i56: x1 + i1 == x2 + i2 ==> x1 - x2 + i1 == x2 - x1 + i2;\nloop invariant i57: 1 <= i2 <= n + 1;\nloop invariant i58: x2 <= x1 + i1;\nloop invariant i59: if (i1 == n + 1) then x2 == x1 + i1;\nloop invariant i60: if (i2 == n + 1) then x2 == x1 + i1;\nloop invariant i61: 1 <= n;\nloop invariant i62: i1 <= n && i2 <= n;\nloop invariant i63: x1 >= 0 && x2 >= 0;\nloop invariant i64: x1 <= n * (n + 1) / 2 && x2 <= n * (n + 1) / 2;\nloop invariant i65: (i1 == i2 ==> x1 == x2 + i1);\nloop invariant i66: (i1 > n ==> x1 == n * (n + 1) / 2);\nloop invariant i67: (i2 > n ==> x2 == n * (n + 1) / 2);\nloop invariant i68: (i1 > n && i2 > n ==> x2 == x1 + i1);\nloop invariant i69: (i1 > n && i2 > n ==> i1 == i2);\nloop invariant i70: x1 == (1 + (i1 - 1) * i1 / 2) && x2 == (1 + (i2 - 1) * i2 / 2);\nloop invariant i71: 0 <= i1 <= n;loop invariant i2 >= 1;loop invariant i2 <= n + 1;loop invariant x1 + i1 <= x2;loop invariant x1 + i1 == x2 ==> i2 <= i1;loop invariant x1 + i1 == x2 ==> i2 == i1 + 1;loop invariant x2 == x1 + i1 + i2 - 1;\nloop invariant i72: 0 <= x1 <= n*(n+1)/2;\nloop invariant i73: 0 <= x2 <= n*(n+1)/2;\nloop invariant i74: x2 == x1 + i1;\nloop invariant i75: x1 == (i1 * (i1 + 1)) / 2;\nloop invariant i76: x2 == (i2 * (i2 + 1)) / 2;\n*/\nwhile (1)\n\t{\n    \tif ( i1 <= n) {\n\t        x1 = x1 + i1;\n    \t    i1++;\n\t    }\n\n\t\tif ( i2 <= n) {\n\t        x2 = x2 + i2;\n    \t    i2++;\n\t\t}\n\n\t\tif (i1>n && i2>n) break;\n\t\t{;\n//@ assert(x2==x1+i1);\n}\n\n    }\n}",
        "combined_annotation_num_solver_calls": 32,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nvoid main() {\n\tint n = unknown();\n    int x1 = 0;\n    int x2 = 0;\n\n    int i1 = 0; \n    int i2 = 1; \n\t/*@\n\n\nloop invariant i3: x1 == (i1 * (i1 - 1)) / 2;\nloop invariant i4: x2 == (i2 * (i2 - 1)) / 2;\nloop invariant i5: (i1 >= n ==> i2 >= n);\n\n\nloop invariant i8: x1 + i1 == x2;\n\n\n\n\n\n\nloop invariant i15: x1 == (i1 - 1) * i1 / 2;\nloop invariant i16: i1 <= i2;\n\nloop invariant i18: x1 <= x2;\nloop invariant i19: x1 + i1 <= x2;\nloop invariant i20: 0 <= x1 <= x2;\n\n\n\n\nloop invariant i25: 0 <= x1 <= (n * (n + 1) / 2);\n\n\n\n\n\nloop invariant i31: 0 <= x1 <= ((n * (n + 1)) / 2);\n\n\nloop invariant i34: (x2 == (x1 + i1));\n\n\n\n\n\n\nloop invariant i41: x1 >= 0;\nloop invariant i42: x2 >= 0;\n\n\n\n\n\n\n\nloop invariant i50: x1 + i1 == x2 + i2 ==> x1 + i1 == x2 + i2;\nloop invariant i51: x1 + i1 == x2 + i2 ==> x1 >= x2;\nloop invariant i52: x1 + i1 == x2 + i2 ==> x1 <= x2 + n;\nloop invariant i53: x1 + i1 == x2 + i2 ==> x2 <= x1 + n;\nloop invariant i54: x1 + i1 == x2 + i2 ==> x2 - x1 <= n;\nloop invariant i55: x1 + i1 == x2 + i2 ==> x1 - x2 <= n;\nloop invariant i56: x1 + i1 == x2 + i2 ==> x1 - x2 + i1 == x2 - x1 + i2;\n\nloop invariant i58: x2 <= x1 + i1;\n\n\n\n\nloop invariant i63: x1 >= 0 && x2 >= 0;\n\nloop invariant i65: (i1 == i2 ==> x1 == x2 + i1);\n\n\nloop invariant i68: (i1 > n && i2 > n ==> x2 == x1 + i1);\n\n\n\nloop invariant i72: 0 <= x1 <= n*(n+1)/2;\n\nloop invariant i74: x2 == x1 + i1;\n\n\n*/\nwhile (1)\n\t{\n    \tif ( i1 <= n) {\n\t        x1 = x1 + i1;\n    \t    i1++;\n\t    }\n\n\t\tif ( i2 <= n) {\n\t        x2 = x2 + i2;\n    \t    i2++;\n\t\t}\n\n\t\tif (i1>n && i2>n) break;\n\t\t{;\n//@ assert(x2==x1+i1);\n}\n\n    }\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/split.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/up-nested.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c"
        ],
        "skipped": [],
        "total": 40,
        "success_count": 36,
        "failure_count": 4,
        "success_rate": 0.9
    }
}