{
    "logs": {
        "file": "../dataset/loop_invariants/accelerating_invariant_generation/invgen/sendmail-mime-fromqp.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint __BLAST_NONDET;\n\nint main (void)\n{\n  int outfilelen;\n  \n  int nchar = 0;\n\n  int out = 0; \n\n  if(outfilelen > 0); else goto RETURN;\n\n  while(__BLAST_NONDET)\n  {\n    \n    if(__BLAST_NONDET)\n    {\n      \n      if(__BLAST_NONDET)\n\t\n\tgoto AFTERLOOP; \n\n      if(__BLAST_NONDET)\n      {\n\tout = 0;\n\tnchar = 0;\n\tgoto LOOPEND;\n      }\n      else\n      {\n\t\n\tif(__BLAST_NONDET)  goto AFTERLOOP;\n\n\tnchar++;\n\tif (nchar >= outfilelen)\n\t  goto AFTERLOOP;\n\n\t{;\n//@ assert(0<=out);\n}\n\n\t{;\n//@ assert(out<outfilelen);\n}\n\n\tout++;\n      }\n    }\n    else\n    {\n      \n      nchar++;\n      if (nchar >= outfilelen)\n\tgoto AFTERLOOP;\n\n      {;\n//@ assert(0<=out);\n}\n\n      {;\n//@ assert(out<outfilelen);\n}\n\n      out++;\n\n      if(__BLAST_NONDET) goto AFTERLOOP;\n    }\n  LOOPEND:;\n  }\n AFTERLOOP:\n\n  {;\n//@ assert(0<=out);\n}\n\n  {;\n//@ assert(out<outfilelen);\n}\n\n  out++;\n RETURN:  return 0;\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= nchar <= outfilelen;\nloop invariant 0 <= out <= outfilelen;\nloop invariant nchar < outfilelen;\nloop invariant out < outfilelen;\nloop invariant out <= outfilelen;\nloop invariant nchar <= outfilelen;\nloop invariant 0 <= nchar;\nloop invariant 0 <= out;\nloop invariant nchar <= nchar + 1;\nloop invariant out <= out + 1;\nloop invariant nchar <= outfilelen - 1;\nloop invariant out <= outfilelen - 1;\nloop invariant nchar <= outfilelen - 1 ==> 0 <= out;\nloop invariant nchar <= outfilelen - 1 ==> out < outfilelen;\nloop invariant nchar <= outfilelen - 1 ==> out <= outfilelen;\nloop invariant nchar <= outfilelen - 1 ==> out <= outfilelen - 1;\nloop invariant nchar <= outfilelen - 1 ==> 0 <= nchar;\nloop invariant nchar <= outfilelen - 1 ==> nchar < outfilelen;\nloop invariant nchar <= outfilelen - 1 ==> nchar <= outfilelen;\nloop invariant nchar <= outfilelen - 1 ==> nchar <= nchar + 1;\nloop invariant nchar <= outfilelen - 1 ==> out <= out + 1;\nloop invariant nchar <= outfilelen - 1 ==> nchar <= outfilelen - 1;\nloop invariant nchar <= outfilelen - 1 ==> out <= outfilelen - 1;\nloop invariant nchar <= outfilelen - 1 ==> 0 <= nchar;\nloop invariant nchar <= outfilelen - 1 ==> nchar < outfilelen;\nloop invariant nchar <= outfilelen - 1 ==> nchar <= outfilelen;\nloop invariant nchar <= outfilelen - 1 ==> out <= outfilelen;\nloop invariant nchar <= outfilelen - 1 ==> out <= outfilelen - 1;\nloop invariant nchar <= outfilelen - 1 ==> 0 <= nchar;\nloop invariant nchar <= outfilelen - 1 ==> nchar < outfilelen;\nloop invariant nchar <= outfilelen - 1 ==> nchar <= outfilelen;\nloop invariant nchar <= outfilelen - 1 ==> out <= outfilelen;\nloop invariant nchar <= outfilelen - 1 ==> out <= outfilelen - 1;\nloop invariant nchar <= outfilelen - 1 ==> 0 <= nchar;\nloop invariant nchar <= outfilelen - 1 ==> nchar < outfilelen;\nloop invariant nchar <= outfilelen - 1 ==> nchar <= outfilelen;\nloop invariant nchar <= outfilelen - 1 ==> out <= outfilelen;\nloop invariant nchar <= outfilelen - 1 ==> out <= outfilelen - 1;\nloop invariant nchar <= outfilelen - 1 ==> 0 <= nchar;\nloop invariant nchar <= outfilelen - 1 ==> nchar < outfilelen;\nloop invariant nchar <= outfilelen - 1 ==> nchar <= outfilelen;\nloop invariant nchar <= outfilelen - 1 ==> out <= outfilelen;\nloop invariant nchar <= outfilelen - 1 ==> out <= outfilelen - 1;\nloop invariant nchar <= outfilelen - 1 ==> 0 <= nchar;\nloop invariant nchar <= outfilelen - 1 ==> nchar < outfilelen;\nloop invariant nchar <= outfilelen - 1 ==> nchar <= outfilelen;\nloop invariant nchar <= outfilelen - 1 ==> out <= outfilelen;\nloop invariant nchar <= outfilelen - 1 ==> out <= outfilelen - 1;\nloop invariant nchar <= outfilelen - 1 ==> 0 <= nchar;\nloop invariant nchar <= outfilelen - 1 ==> nchar < outfilelen;\nloop invariant nchar <= outfilelen - 1 ==> nchar <= outfilelen;\nloop invariant nchar <= outfilelen - 1 ==> out <= outfilelen;\nloop invariant nchar <= outfilelen - 1 ==> out <= outfilelen - 1;\nloop invariant nchar <= outfilelen - 1 ==> 0 <= nchar;\nloop invariant nchar <= outfilelen - 1 ==> nchar < outfilelen;\nloop invariant nchar <= outfilelen - 1 ==> nchar <= outfilelen;\nloop invariant nchar <= outfilelen - 1 ==> out <= outfilelen;\nloop invariant nchar <= outfilelen - 1 ==> out <= outfilelen - 1;\nloop invariant nchar <= outfilelen - 1 ==> 0 <= nchar;\nloop invariant nchar <= outfilelen - 1 ==> nchar < outfilelen;\nloop invariant nchar <= outfilelen - 1 ==> nchar <= outfilelen;\nloop invariant nchar <= outfilelen - 1 ==> out <= outfilelen;\nloop invariant nchar <= outfilelen - 1 ==> out <= outfilelen - 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= out <= outfilelen;\nloop invariant 0 <= nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant nchar < outfilelen;\nloop invariant nchar < outfilelen;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= out <= outfilelen;\nloop invariant 0 <= nchar <= outfilelen;\nloop invariant out == nchar ==> (out == 0 && nchar == 0 && out == 0);\nloop invariant out == nchar ==> (out == 0 && nchar == 0 && out == 0);\nloop invariant out == nchar ==> (out == 0 && nchar == 0 && out == 0);\nloop invariant out == nchar ==> (out == 0 && nchar == 0 && out == 0);\nloop invariant out == nchar ==> (out == 0 && nchar == 0 && out == 0);\nloop invariant out == nchar ==> (out == 0 && nchar == 0 && out == 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= out && out < outfilelen;\nloop invariant 0 <= nchar && nchar <= outfilelen;\nloop invariant nchar <= out;\n*/\n```",
            "```\n/*@\nloop invariant ( nchar <= outfilelen );\nloop invariant ( 0 <= out < outfilelen );\nloop invariant ( out == nchar || out == nchar + 1 );\nloop invariant ( nchar <= outfilelen );\nloop invariant ( out == nchar || out == nchar + 1 );\nloop invariant ( out < outfilelen );\nloop invariant ( nchar <= outfilelen );\nloop invariant ( out == nchar || out == nchar + 1 );\nloop invariant ( nchar <= outfilelen );\nloop invariant ( out == nchar || out == nchar + 1 );\nloop invariant ( out < outfilelen );\nloop invariant ( nchar <= outfilelen );\nloop invariant ( out == nchar || out == nchar + 1 );\nloop invariant ( nchar <= outfilelen );\nloop invariant ( out == nchar || out == nchar + 1 );\nloop invariant ( out < outfilelen );\nloop invariant ( nchar <= outfilelen );\nloop invariant ( out == nchar || out == nchar + 1 );\nloop invariant ( nchar <= outfilelen );\nloop invariant ( out == nchar || out == nchar + 1 );\nloop invariant ( out < outfilelen );\nloop invariant ( nchar <= outfilelen );\nloop invariant ( out == nchar || out == nchar + 1 );\nloop invariant ( nchar <= outfilelen );\nloop invariant ( out == nchar || out == nchar + 1 );\nloop invariant ( out < outfilelen );\nloop invariant ( nchar <= outfilelen );\nloop invariant ( out == nchar || out == nchar + 1 );\nloop invariant ( nchar <= outfilelen );\nloop invariant ( out == nchar || out == nchar + 1 );\nloop invariant ( out < outfilelen );\n*/\n```",
            "```\n/*@\nloop invariant 1 <= nchar <= outfilelen;\nloop invariant 0 <= out <= outfilelen;\nloop invariant (nchar >= outfilelen ==> out == outfilelen);\nloop invariant (nchar < outfilelen ==> out < outfilelen);\nloop invariant (out >= outfilelen ==> nchar == outfilelen);\nloop invariant (out < outfilelen ==> nchar < outfilelen);\nloop invariant (out == 0 ==> nchar == 0);\nloop invariant (out > 0 ==> nchar > 0);\nloop invariant (out == outfilelen ==> nchar == outfilelen);\nloop invariant (out < outfilelen ==> nchar < outfilelen);\nloop invariant (out == 0 ==> nchar == 0);\nloop invariant (out > 0 ==> nchar > 0);\nloop invariant (out == outfilelen ==> nchar == outfilelen);\nloop invariant (out < outfilelen ==> nchar < outfilelen);\nloop invariant (out == 0 ==> nchar == 0);\nloop invariant (out > 0 ==> nchar > 0);\nloop invariant (out == outfilelen ==> nchar == outfilelen);\nloop invariant (out < outfilelen ==> nchar < outfilelen);\nloop invariant (out == 0 ==> nchar == 0);\nloop invariant (out > 0 ==> nchar > 0);\nloop invariant (out == outfilelen ==> nchar == outfilelen);\nloop invariant (out < outfilelen ==> nchar < outfilelen);\nloop invariant (out == 0 ==> nchar == 0);\nloop invariant (out > 0 ==> nchar > 0);\nloop invariant (out == outfilelen ==> nchar == outfilelen);\nloop invariant (out < outfilelen ==> nchar < outfilelen);\nloop invariant (out == 0 ==> nchar == 0);\nloop invariant (out > 0 ==> nchar > 0);\nloop invariant (out == outfilelen ==> nchar == outfilelen);\nloop invariant (out < outfilelen ==> nchar < outfilelen);\nloop invariant (out == 0 ==> nchar == 0);\nloop invariant (out > 0 ==> nchar > 0);\nloop invariant (out == outfilelen ==> nchar == outfilelen);\nloop invariant (out < outfilelen ==> nchar < outfilelen);\nloop invariant (out == 0 ==> nchar == 0);\nloop invariant (out > 0 ==> nchar > 0);\nloop invariant (out == outfilelen ==> nchar == outfilelen);\nloop invariant (out < outfilelen ==> nchar < outfilelen);\nloop invariant (out == 0 ==> nchar == 0);\nloop invariant (out > 0 ==> nchar > 0);\nloop invariant (out == outfilelen ==> nchar == outfilelen);\nloop invariant (out < outfilelen ==> nchar < outfilelen);\nloop invariant (out == 0 ==> nchar == 0);\nloop invariant (out > 0 ==> nchar > 0);\nloop invariant (out == outfilelen ==> nchar == outfilelen);\nloop invariant (out < outfilelen ==> nchar < outfilelen);\nloop invariant (out == 0 ==> nchar == 0);\nloop invariant (out > 0 ==> nchar > 0);\nloop invariant (out == outfilelen ==> nchar == outfilelen);\nloop invariant (out < outfilelen ==> nchar < outfilelen);\nloop invariant (out == 0 ==> nchar == 0);\nloop invariant (out > 0 ==> nchar > 0);\nloop invariant (out == outfilelen ==> nchar == outfilelen);\nloop invariant (out < outfilelen ==> nchar < outfilelen);\nloop invariant (out == 0 ==> nchar == 0);\nloop invariant (out > 0 ==> nchar > 0);\nloop invariant (out == outfilelen ==> nchar == outfilelen);\nloop invariant (out < outfilelen ==> nchar < outfilelen);\nloop invariant (out == 0 ==> nchar == 0);\nloop invariant (out > 0 ==> nchar > 0);\nloop invariant (out == outfilelen ==> nchar == outfilelen);\nloop invariant (out < outfilelen ==> nchar < outfilelen);\nloop invariant (out == 0 ==> nchar == 0);\nloop invariant (out > 0 ==> nchar > 0);\nloop invariant (out == outfilelen ==> nchar == outfilelen);\nloop invariant (out < outfilelen ==> nchar < outfilelen);\nloop invariant (out == 0 ==> nchar == 0);\nloop invariant (out > 0 ==> nchar > 0);\nloop invariant (out == outfilelen ==> nchar == outfilelen);\nloop invariant (out < outfilelen ==> nchar < outfilelen);\nloop invariant (out == 0 ==> nchar == 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= out < outfilelen;\nloop invariant 0 <= nchar <= outfilelen;\nloop invariant 0 <= out <= outfilelen;\nloop invariant if (out < outfilelen) then (nchar >= out) else (nchar >= outfilelen);\nloop invariant if (out < outfilelen) then (nchar < outfilelen) else (nchar < outfilelen);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= out <= outfilelen;\nloop invariant 0 <= nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar == outfilelen ==> out == outfilelen;\nloop invariant out + nchar == outfilelen ==> nchar == outfilelen - out;\nloop invariant out + nchar == outfilelen ==> out == outfilelen - nchar;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= out <= outfilelen;\nloop invariant 0 <= out < outfilelen ==> __BLAST_NONDET;\nloop invariant 0 <= out < outfilelen ==> 0 <= nchar <= outfilelen;\nloop invariant 0 <= out < outfilelen ==> nchar <= outfilelen - 1;\nloop invariant 0 <= out < outfilelen ==> __BLAST_NONDET ==> nchar == outfilelen - 1;\nloop invariant 0 <= out < outfilelen ==> __BLAST_NONDET ==> nchar == outfilelen - 1;\nloop invariant 0 <= out < outfilelen ==> nchar >= 0;\nloop invariant 0 <= out < outfilelen ==> __BLAST_NONDET ==> nchar >= 0;\nloop invariant 0 <= out < outfilelen ==> nchar < outfilelen;\nloop invariant 0 <= out < outfilelen ==> __BLAST_NONDET ==> nchar < outfilelen;\nloop invariant __BLAST_NONDET ==> 0 <= out < outfilelen ==> nchar == outfilelen - 1;\nloop invariant 0 <= out < outfilelen ==> nchar == outfilelen - 1 ==> __BLAST_NONDET;\nloop invariant 0 <= out < outfilelen ==> nchar == outfilelen - 1 ==> __BLAST_NONDET ==> nchar == outfilelen - 1;\nloop invariant 0 <= out < outfilelen ==> nchar == outfilelen - 1 ==> __BLAST_NONDET ==> nchar == outfilelen - 1;\nloop invariant 0 <= out < outfilelen ==> nchar == outfilelen - 1 ==> __BLAST_NONDET ==> nchar == outfilelen - 1;\nloop invariant 0 <= out < outfilelen ==> nchar == outfilelen - 1 ==> __BLAST_NONDET ==> nchar == outfilelen - 1;\nloop invariant 0 <= out < outfilelen ==> nchar == outfilelen - 1 ==> __BLAST_NONDET ==> nchar == outfilelen - 1;\nloop invariant 0 <= out < outfilelen ==> nchar == outfilelen - 1 ==> __BLAST_NONDET ==> nchar == outfilelen - 1;\nloop invariant 0 <= out < outfilelen ==> nchar == outfilelen - 1 ==> __BLAST_NONDET ==> nchar == outfilelen - 1;\nloop invariant 0 <= out < outfilelen ==> nchar == outfilelen - 1 ==> __BLAST_NONDET ==> nchar == outfilelen - 1;\nloop invariant 0 <= out < outfilelen ==> nchar == outfilelen - 1 ==> __BLAST_NONDET ==> nchar == outfilelen - 1;\nloop invariant 0 <= out < outfilelen ==> nchar == outfilelen - 1 ==> __BLAST_NONDET ==> nchar == outfilelen - 1;\nloop invariant 0 <= out < outfilelen ==> nchar == outfilelen - 1 ==> __BLAST_NONDET ==> nchar == outfilelen - 1;\nloop invariant 0 <= out < outfilelen ==> nchar == outfilelen - 1 ==> __BLAST_NONDET ==> nchar == outfilelen - 1;\nloop invariant 0 <= out < outfilelen ==> nchar == outfilelen - 1 ==> __BLAST_NONDET ==> nchar == outfilelen - 1;\nloop invariant 0 <= out < outfilelen ==> nchar == outfilelen - 1 ==> __BLAST_NONDET ==> nchar == outfilelen - 1;\nloop invariant 0 <= out < outfilelen ==> nchar == outfilelen - 1 ==> __BLAST_NONDET ==> nchar == outfilelen - 1;\nloop invariant 0 <= out < outfilelen ==> nchar == outfilelen - 1 ==> __BLAST_NONDET ==> nchar == outfilelen - 1;\nloop invariant 0 <= out < outfilelen ==> nchar == outfilelen - 1 ==> __BLAST_NONDET ==> nchar == outfilelen - 1;\nloop invariant 0 <= out < outfilelen ==> nchar == outfilelen - 1 ==> __BLAST_NONDET ==> nchar == outfilelen - 1;\nloop invariant 0 <= out < outfilelen ==> nchar == outfilelen - 1 ==> __BLAST_NONDET ==> nchar == outfilelen - 1;\nloop invariant 0 <= out < outfilelen ==> nchar == outfilelen - 1 ==> __BLAST_NONDET ==> nchar == outfilelen - 1;\nloop invariant 0 <= out < outfilelen ==> nchar == outfilelen - 1 ==> __BLAST_NONDET ==> nchar == outfilelen - 1;\nloop invariant 0 <= out < outfilelen ==> nchar == outfilelen - 1 ==> __BLAST_NONDET ==> nchar == outfilelen - 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= nchar <= outfilelen;\nloop invariant 0 <= out <= outfilelen;\nloop invariant 0 <= outfilelen <= 100000;\nloop invariant out < outfilelen ==> nchar < outfilelen;\nloop invariant out < outfilelen ==> nchar < outfilelen ==> nchar <= outfilelen;\nloop invariant out < outfilelen ==> nchar < outfilelen ==> nchar <= outfilelen ==> nchar >= 0;\nloop invariant out < outfilelen ==> nchar < outfilelen ==> nchar <= outfilelen ==> nchar >= 0 ==> out >= 0;\nloop invariant out < outfilelen ==> nchar < outfilelen ==> nchar <= outfilelen ==> nchar >= 0 ==> out >= 0 ==> out <= outfilelen;\nloop invariant out < outfilelen ==> nchar < outfilelen ==> nchar <= outfilelen ==> nchar >= 0 ==> out >= 0 ==> out <= outfilelen ==> out >= 0;\nloop invariant out < outfilelen ==> nchar < outfilelen ==> nchar <= outfilelen ==> nchar >= 0 ==> out >= 0 ==> out <= outfilelen ==> out >= 0 ==> out <= outfilelen;\nloop invariant out < outfilelen ==> nchar < outfilelen ==> nchar <= outfilelen ==> nchar >= 0 ==> out >= 0 ==> out <= outfilelen ==> out >= 0 ==> out <= outfilelen ==> nchar >= 0;\nloop invariant out < outfilelen ==> nchar < outfilelen ==> nchar <= outfilelen ==> nchar >= 0 ==> out >= 0 ==> out <= outfilelen ==> out >= 0 ==> out <= outfilelen ==> nchar >= 0 ==> nchar <= outfilelen;\nloop invariant out < outfilelen ==> nchar < outfilelen ==> nchar <= outfilelen ==> nchar >= 0 ==> out >= 0 ==> out <= outfilelen ==> out >= 0 ==> out <= outfilelen ==> nchar >= 0 ==> nchar <= outfilelen ==> out >= 0;\nloop invariant out < outfilelen ==> nchar < outfilelen ==> nchar <= outfilelen ==> nchar >= 0 ==> out >= 0 ==> out <= outfilelen ==> out >= 0 ==> out <= outfilelen ==> nchar >= 0 ==> nchar <= outfilelen ==> out >= 0 ==> out <= outfilelen;\nloop invariant out < outfilelen ==> nchar < outfilelen ==> nchar <= outfilelen ==> nchar >= 0 ==> out >= 0 ==> out <= outfilelen ==> out >= 0 ==> out <= outfilelen ==> nchar >= 0 ==> nchar <= outfilelen ==> out >= 0 ==> out <= outfilelen ==> nchar >= 0;\nloop invariant out < outfilelen ==> nchar < outfilelen ==> nchar <= outfilelen ==> nchar >= 0 ==> out >= 0 ==> out <= outfilelen ==> out >= 0 ==> out <= outfilelen ==> nchar >= 0 ==> nchar <= outfilelen ==> out >= 0 ==> out <= outfilelen ==> nchar >= 0 ==> nchar <= outfilelen;\nloop invariant out < outfilelen ==> nchar < outfilelen ==> nchar <= outfilelen ==> nchar >= 0 ==> out >= 0 ==> out <= outfilelen ==> out >= 0 ==> out <= outfilelen ==> nchar >= 0 ==> nchar <= outfilelen ==> out >= 0 ==> out <= outfilelen ==> nchar >= 0 ==> nchar <= outfilelen ==> nchar >= 0;\nloop invariant out < outfilelen ==> nchar < outfilelen ==> nchar <= outfilelen ==> nchar >= 0 ==> out >= 0 ==> out <= outfilelen ==> out >= 0 ==> out <= outfilelen ==> nchar >= 0 ==> nchar <= outfilelen ==> out >= 0 ==> out <= outfilelen ==> nchar >= 0 ==> nchar <= outfilelen ==> nchar >= 0 ==> nchar <= outfilelen;\nloop invariant out < outfilelen ==> nchar < outfilelen ==> nchar <= outfilelen ==> nchar >= 0 ==> out >= 0 ==> out <= outfilelen ==> out >= 0 ==> out <= outfilelen ==> nchar >= 0 ==> nchar <= outfilelen ==> out >= 0 ==> out <= outfilelen ==> nchar >= 0 ==> nchar <= outfilelen ==> nchar >= 0 ==> nchar <= outfilelen ==> nchar >= 0 ==> nchar <= outfilelen;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= out <= outfilelen;\nloop invariant 0 <= nchar <= outfilelen;\nloop invariant out == 0 ==> nchar == 0;\nloop invariant out == 0 ==> nchar == 0 ==> nchar < outfilelen;\nloop invariant out == 0 ==> nchar == 0 ==> nchar < outfilelen ==> nchar == 0;\nloop invariant out == 0 ==> nchar == 0 ==> nchar < outfilelen ==> nchar == 0 ==> nchar == 0;\nloop invariant out == 0 ==> nchar == 0 ==> nchar < outfilelen ==> nchar == 0 ==> nchar == 0 ==> nchar == 0;\nloop invariant out == 0 ==> nchar == 0 ==> nchar < outfilelen ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0;\nloop invariant out == 0 ==> nchar == 0 ==> nchar < outfilelen ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0;\nloop invariant out == 0 ==> nchar == 0 ==> nchar < outfilelen ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0;\nloop invariant out == 0 ==> nchar == 0 ==> nchar < outfilelen ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0;\nloop invariant out == 0 ==> nchar == 0 ==> nchar < outfilelen ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0;\nloop invariant out == 0 ==> nchar == 0 ==> nchar < outfilelen ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0;\nloop invariant out == 0 ==> nchar == 0 ==> nchar < outfilelen ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0;\nloop invariant out == 0 ==> nchar == 0 ==> nchar < outfilelen ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0;\nloop invariant out == 0 ==> nchar == 0 ==> nchar < outfilelen ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0;\nloop invariant out == 0 ==> nchar == 0 ==> nchar < outfilelen ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0;\nloop invariant out == 0 ==> nchar == 0 ==> nchar < outfilelen ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= out <= outfilelen;\nloop invariant 0 <= nchar <= outfilelen;\nloop invariant out <= nchar;\nloop invariant 0 <= nchar;\nloop invariant nchar <= outfilelen;\nloop invariant out >= 0;\nloop invariant nchar >= 0;\nloop invariant nchar <= outfilelen;\nloop invariant 0 <= out <= outfilelen;\nloop invariant nchar == 0 ==> out == 0;\nloop invariant nchar == 0 ==> out > 0 ==> out == 1;\nloop invariant nchar > 0 ==> out == nchar;\nloop invariant nchar >= 0 ==> out > 0 ==> out == nchar + 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= out < outfilelen;\nloop invariant 0 <= nchar <= outfilelen;\nloop invariant nchar <= outfilelen;\nloop invariant outfilelen > 0;\nloop invariant 0 <= out < outfilelen;\nloop invariant 0 <= nchar <= outfilelen;\nloop invariant nchar <= outfilelen;\nloop invariant outfilelen > 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= out < outfilelen;\nloop invariant 0 <= nchar <= outfilelen;\nloop invariant nchar >= out;\nloop invariant out <= outfilelen;\nloop invariant nchar <= outfilelen;\nloop invariant nchar >= 0;\nloop invariant out >= 0;\nloop invariant 0 <= nchar;\nloop invariant nchar <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant 0 <= nchar;\nloop invariant nchar <= outfilelen;\nloop invariant out >= 0;\nloop invariant 0 <= out;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= nchar <= outfilelen;\nloop invariant 0 <= out <= outfilelen;\nloop invariant nchar >= 0;\nloop invariant out >= 0;\nloop invariant nchar <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant nchar <= out;\nloop invariant nchar >= out;\nloop invariant nchar >= 0;\nloop invariant out >= 0;\nloop invariant nchar <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant nchar >= 0;\nloop invariant out >= 0;\nloop invariant nchar <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant nchar >= 0;\nloop invariant out >= 0;\nloop invariant nchar <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant nchar >= 0;\nloop invariant out >= 0;\nloop invariant nchar <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant nchar >= 0;\nloop invariant out >= 0;\nloop invariant nchar <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant nchar >= 0;\nloop invariant out >= 0;\nloop invariant nchar <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant nchar >= 0;\nloop invariant out >= 0;\nloop invariant nchar <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant nchar >= 0;\nloop invariant out >= 0;\nloop invariant nchar <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant nchar >= 0;\nloop invariant out >= 0;\nloop invariant nchar <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant nchar >= 0;\nloop invariant out >= 0;\nloop invariant nchar <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant nchar >= 0;\nloop invariant out >= 0;\nloop invariant nchar <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant nchar >= 0;\nloop invariant out >= 0;\nloop invariant nchar <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant nchar >= 0;\nloop invariant out >= 0;\nloop invariant nchar <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant nchar >= 0;\nloop invariant out >= 0;\nloop invariant nchar <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant nchar >= 0;\nloop invariant out >= 0;\nloop invariant nchar <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant nchar >= 0;\nloop invariant out >= 0;\nloop invariant nchar <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant nchar >= 0;\nloop invariant out >= 0;\nloop invariant nchar <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant nchar >= 0;\nloop invariant out >= 0;\nloop invariant nchar <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant nchar >= 0;\nloop invariant out >= 0;\nloop invariant nchar <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant nchar >= 0;\nloop invariant out >= 0;\nloop invariant nchar <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant nchar >= 0;\nloop invariant out >= 0;\nloop invariant nchar <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant nchar >= 0;\nloop invariant out >= 0;\nloop invariant nchar <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant nchar >= 0;\nloop invariant out >= 0;\nloop invariant nchar <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant nchar >= 0;\nloop invariant out >= 0;\nloop invariant nchar <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant nchar >= 0;\nloop invariant out >= 0;\nloop invariant nchar <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant nchar >= 0;\nloop invariant out >= 0;\nloop invariant nchar <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant nchar >= 0;\nloop invariant out >= 0;\nloop invariant nchar <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant nchar >= 0;\nloop invariant out >= 0;\nloop invariant nchar <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant nchar >= 0;\nloop invariant out >= 0;\nloop invariant nchar <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant nchar >= 0;\nloop invariant out >= 0;\nloop invariant nchar <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant nchar >= 0;\nloop invariant out >= 0;\nloop invariant nchar <= outfilelen;\nloop invariant out <= outfilelen;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= nchar <= outfilelen;\nloop invariant 0 <= out <= outfilelen;\nloop invariant nchar < outfilelen;\nloop invariant out < outfilelen;\nloop invariant out <= outfilelen;\nloop invariant nchar <= outfilelen;\nloop invariant 0 <= nchar;\nloop invariant 0 <= out;\nloop invariant nchar <= nchar + 1;\nloop invariant out <= out + 1;\nloop invariant nchar <= outfilelen - 1;\nloop invariant out <= outfilelen - 1;\nloop invariant nchar <= outfilelen - 1 ==> 0 <= out;\nloop invariant nchar <= outfilelen - 1 ==> out < outfilelen;\nloop invariant nchar <= outfilelen - 1 ==> out <= outfilelen;\nloop invariant nchar <= outfilelen - 1 ==> out <= outfilelen - 1;\nloop invariant nchar <= outfilelen - 1 ==> 0 <= nchar;\nloop invariant nchar <= outfilelen - 1 ==> nchar < outfilelen;\nloop invariant nchar <= outfilelen - 1 ==> nchar <= outfilelen;\nloop invariant nchar <= outfilelen - 1 ==> nchar <= nchar + 1;\nloop invariant nchar <= outfilelen - 1 ==> out <= out + 1;\nloop invariant nchar <= outfilelen - 1 ==> nchar <= outfilelen - 1;\nloop invariant nchar <= outfilelen - 1 ==> out <= outfilelen - 1;\nloop invariant nchar <= outfilelen - 1 ==> 0 <= nchar;\nloop invariant nchar <= outfilelen - 1 ==> nchar < outfilelen;\nloop invariant nchar <= outfilelen - 1 ==> nchar <= outfilelen;\nloop invariant nchar <= outfilelen - 1 ==> out <= outfilelen;\nloop invariant nchar <= outfilelen - 1 ==> out <= outfilelen - 1;\nloop invariant nchar <= outfilelen - 1 ==> 0 <= nchar;\nloop invariant nchar <= outfilelen - 1 ==> nchar < outfilelen;\nloop invariant nchar <= outfilelen - 1 ==> nchar <= outfilelen;\nloop invariant nchar <= outfilelen - 1 ==> out <= outfilelen;\nloop invariant nchar <= outfilelen - 1 ==> out <= outfilelen - 1;\nloop invariant nchar <= outfilelen - 1 ==> 0 <= nchar;\nloop invariant nchar <= outfilelen - 1 ==> nchar < outfilelen;\nloop invariant nchar <= outfilelen - 1 ==> nchar <= outfilelen;\nloop invariant nchar <= outfilelen - 1 ==> out <= outfilelen;\nloop invariant nchar <= outfilelen - 1 ==> out <= outfilelen - 1;\nloop invariant nchar <= outfilelen - 1 ==> 0 <= nchar;\nloop invariant nchar <= outfilelen - 1 ==> nchar < outfilelen;\nloop invariant nchar <= outfilelen - 1 ==> nchar <= outfilelen;\nloop invariant nchar <= outfilelen - 1 ==> out <= outfilelen;\nloop invariant nchar <= outfilelen - 1 ==> out <= outfilelen - 1;\nloop invariant nchar <= outfilelen - 1 ==> 0 <= nchar;\nloop invariant nchar <= outfilelen - 1 ==> nchar < outfilelen;\nloop invariant nchar <= outfilelen - 1 ==> nchar <= outfilelen;\nloop invariant nchar <= outfilelen - 1 ==> out <= outfilelen;\nloop invariant nchar <= outfilelen - 1 ==> out <= outfilelen - 1;\nloop invariant nchar <= outfilelen - 1 ==> 0 <= nchar;\nloop invariant nchar <= outfilelen - 1 ==> nchar < outfilelen;\nloop invariant nchar <= outfilelen - 1 ==> nchar <= outfilelen;\nloop invariant nchar <= outfilelen - 1 ==> out <= outfilelen;\nloop invariant nchar <= outfilelen - 1 ==> out <= outfilelen - 1;\nloop invariant nchar <= outfilelen - 1 ==> 0 <= nchar;\nloop invariant nchar <= outfilelen - 1 ==> nchar < outfilelen;\nloop invariant nchar <= outfilelen - 1 ==> nchar <= outfilelen;\nloop invariant nchar <= outfilelen - 1 ==> out <= outfilelen;\nloop invariant nchar <= outfilelen - 1 ==> out <= outfilelen - 1;\nloop invariant nchar <= outfilelen - 1 ==> 0 <= nchar;\nloop invariant nchar <= outfilelen - 1 ==> nchar < outfilelen;\nloop invariant nchar <= outfilelen - 1 ==> nchar <= outfilelen;\nloop invariant nchar <= outfilelen - 1 ==> out <= outfilelen;\nloop invariant nchar <= outfilelen - 1 ==> out <= outfilelen - 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint __BLAST_NONDET;\n\nint main (void)\n{\n  int outfilelen;\n  \n  int nchar = 0;\n\n  int out = 0; \n\n  if(outfilelen > 0); else goto RETURN;\n\n  /*@\nloop invariant i1: 0 <= nchar <= outfilelen;\nloop invariant i2: 0 <= out <= outfilelen;\nloop invariant i3: nchar < outfilelen;\nloop invariant i4: out < outfilelen;\nloop invariant i5: out <= outfilelen;\nloop invariant i6: nchar <= outfilelen;\nloop invariant i7: 0 <= nchar;\nloop invariant i8: 0 <= out;\nloop invariant i9: nchar <= nchar + 1;\nloop invariant i10: out <= out + 1;\nloop invariant i11: nchar <= outfilelen - 1;\nloop invariant i12: out <= outfilelen - 1;\nloop invariant i13: nchar <= outfilelen - 1 ==> 0 <= out;\nloop invariant i14: nchar <= outfilelen - 1 ==> out < outfilelen;\nloop invariant i15: nchar <= outfilelen - 1 ==> out <= outfilelen;\nloop invariant i16: nchar <= outfilelen - 1 ==> out <= outfilelen - 1;\nloop invariant i17: nchar <= outfilelen - 1 ==> 0 <= nchar;\nloop invariant i18: nchar <= outfilelen - 1 ==> nchar < outfilelen;\nloop invariant i19: nchar <= outfilelen - 1 ==> nchar <= outfilelen;\nloop invariant i20: nchar <= outfilelen - 1 ==> nchar <= nchar + 1;\nloop invariant i21: nchar <= outfilelen - 1 ==> out <= out + 1;\nloop invariant i22: nchar <= outfilelen - 1 ==> nchar <= outfilelen - 1;\n*/\nwhile(__BLAST_NONDET)\n  {\n    \n    if(__BLAST_NONDET)\n    {\n      \n      if(__BLAST_NONDET)\n\t\n\tgoto AFTERLOOP; \n\n      if(__BLAST_NONDET)\n      {\n\tout = 0;\n\tnchar = 0;\n\tgoto LOOPEND;\n      }\n      else\n      {\n\t\n\tif(__BLAST_NONDET)  goto AFTERLOOP;\n\n\tnchar++;\n\tif (nchar >= outfilelen)\n\t  goto AFTERLOOP;\n\n\t{;\n//@ assert(0<=out);\n}\n\n\t{;\n//@ assert(out<outfilelen);\n}\n\n\tout++;\n      }\n    }\n    else\n    {\n      \n      nchar++;\n      if (nchar >= outfilelen)\n\tgoto AFTERLOOP;\n\n      {;\n//@ assert(0<=out);\n}\n\n      {;\n//@ assert(out<outfilelen);\n}\n\n      out++;\n\n      if(__BLAST_NONDET) goto AFTERLOOP;\n    }\n  LOOPEND:;\n  }\n AFTERLOOP:\n\n  {;\n//@ assert(0<=out);\n}\n\n  {;\n//@ assert(out<outfilelen);\n}\n\n  out++;\n RETURN:  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= out <= outfilelen;\nloop invariant 0 <= nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant nchar < outfilelen;\nloop invariant nchar < outfilelen;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint __BLAST_NONDET;\n\nint main (void)\n{\n  int outfilelen;\n  \n  int nchar = 0;\n\n  int out = 0; \n\n  if(outfilelen > 0); else goto RETURN;\n\n  /*@\nloop invariant i1: 0 <= out <= outfilelen;\nloop invariant i2: 0 <= nchar <= outfilelen;\nloop invariant i3: out + nchar <= outfilelen;\nloop invariant i4: nchar < outfilelen;\n*/\nwhile(__BLAST_NONDET)\n  {\n    \n    if(__BLAST_NONDET)\n    {\n      \n      if(__BLAST_NONDET)\n\t\n\tgoto AFTERLOOP; \n\n      if(__BLAST_NONDET)\n      {\n\tout = 0;\n\tnchar = 0;\n\tgoto LOOPEND;\n      }\n      else\n      {\n\t\n\tif(__BLAST_NONDET)  goto AFTERLOOP;\n\n\tnchar++;\n\tif (nchar >= outfilelen)\n\t  goto AFTERLOOP;\n\n\t{;\n//@ assert(0<=out);\n}\n\n\t{;\n//@ assert(out<outfilelen);\n}\n\n\tout++;\n      }\n    }\n    else\n    {\n      \n      nchar++;\n      if (nchar >= outfilelen)\n\tgoto AFTERLOOP;\n\n      {;\n//@ assert(0<=out);\n}\n\n      {;\n//@ assert(out<outfilelen);\n}\n\n      out++;\n\n      if(__BLAST_NONDET) goto AFTERLOOP;\n    }\n  LOOPEND:;\n  }\n AFTERLOOP:\n\n  {;\n//@ assert(0<=out);\n}\n\n  {;\n//@ assert(out<outfilelen);\n}\n\n  out++;\n RETURN:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= out <= outfilelen;\nloop invariant 0 <= nchar <= outfilelen;\nloop invariant out == nchar ==> (out == 0 && nchar == 0 && out == 0);\nloop invariant out == nchar ==> (out == 0 && nchar == 0 && out == 0);\nloop invariant out == nchar ==> (out == 0 && nchar == 0 && out == 0);\nloop invariant out == nchar ==> (out == 0 && nchar == 0 && out == 0);\nloop invariant out == nchar ==> (out == 0 && nchar == 0 && out == 0);\nloop invariant out == nchar ==> (out == 0 && nchar == 0 && out == 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint __BLAST_NONDET;\n\nint main (void)\n{\n  int outfilelen;\n  \n  int nchar = 0;\n\n  int out = 0; \n\n  if(outfilelen > 0); else goto RETURN;\n\n  /*@\nloop invariant i1: 0 <= out <= outfilelen;\nloop invariant i2: 0 <= nchar <= outfilelen;\nloop invariant i3: out == nchar ==> (out == 0 && nchar == 0 && out == 0);\n*/\nwhile(__BLAST_NONDET)\n  {\n    \n    if(__BLAST_NONDET)\n    {\n      \n      if(__BLAST_NONDET)\n\t\n\tgoto AFTERLOOP; \n\n      if(__BLAST_NONDET)\n      {\n\tout = 0;\n\tnchar = 0;\n\tgoto LOOPEND;\n      }\n      else\n      {\n\t\n\tif(__BLAST_NONDET)  goto AFTERLOOP;\n\n\tnchar++;\n\tif (nchar >= outfilelen)\n\t  goto AFTERLOOP;\n\n\t{;\n//@ assert(0<=out);\n}\n\n\t{;\n//@ assert(out<outfilelen);\n}\n\n\tout++;\n      }\n    }\n    else\n    {\n      \n      nchar++;\n      if (nchar >= outfilelen)\n\tgoto AFTERLOOP;\n\n      {;\n//@ assert(0<=out);\n}\n\n      {;\n//@ assert(out<outfilelen);\n}\n\n      out++;\n\n      if(__BLAST_NONDET) goto AFTERLOOP;\n    }\n  LOOPEND:;\n  }\n AFTERLOOP:\n\n  {;\n//@ assert(0<=out);\n}\n\n  {;\n//@ assert(out<outfilelen);\n}\n\n  out++;\n RETURN:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= out && out < outfilelen;\nloop invariant 0 <= nchar && nchar <= outfilelen;\nloop invariant nchar <= out;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint __BLAST_NONDET;\n\nint main (void)\n{\n  int outfilelen;\n  \n  int nchar = 0;\n\n  int out = 0; \n\n  if(outfilelen > 0); else goto RETURN;\n\n  /*@\nloop invariant i1: 0 <= out && out < outfilelen;\nloop invariant i2: 0 <= nchar && nchar <= outfilelen;\nloop invariant i3: nchar <= out;\n*/\nwhile(__BLAST_NONDET)\n  {\n    \n    if(__BLAST_NONDET)\n    {\n      \n      if(__BLAST_NONDET)\n\t\n\tgoto AFTERLOOP; \n\n      if(__BLAST_NONDET)\n      {\n\tout = 0;\n\tnchar = 0;\n\tgoto LOOPEND;\n      }\n      else\n      {\n\t\n\tif(__BLAST_NONDET)  goto AFTERLOOP;\n\n\tnchar++;\n\tif (nchar >= outfilelen)\n\t  goto AFTERLOOP;\n\n\t{;\n//@ assert(0<=out);\n}\n\n\t{;\n//@ assert(out<outfilelen);\n}\n\n\tout++;\n      }\n    }\n    else\n    {\n      \n      nchar++;\n      if (nchar >= outfilelen)\n\tgoto AFTERLOOP;\n\n      {;\n//@ assert(0<=out);\n}\n\n      {;\n//@ assert(out<outfilelen);\n}\n\n      out++;\n\n      if(__BLAST_NONDET) goto AFTERLOOP;\n    }\n  LOOPEND:;\n  }\n AFTERLOOP:\n\n  {;\n//@ assert(0<=out);\n}\n\n  {;\n//@ assert(out<outfilelen);\n}\n\n  out++;\n RETURN:  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant ( nchar <= outfilelen );\nloop invariant ( 0 <= out < outfilelen );\nloop invariant ( out == nchar || out == nchar + 1 );\nloop invariant ( nchar <= outfilelen );\nloop invariant ( out == nchar || out == nchar + 1 );\nloop invariant ( out < outfilelen );\nloop invariant ( nchar <= outfilelen );\nloop invariant ( out == nchar || out == nchar + 1 );\nloop invariant ( nchar <= outfilelen );\nloop invariant ( out == nchar || out == nchar + 1 );\nloop invariant ( out < outfilelen );\nloop invariant ( nchar <= outfilelen );\nloop invariant ( out == nchar || out == nchar + 1 );\nloop invariant ( nchar <= outfilelen );\nloop invariant ( out == nchar || out == nchar + 1 );\nloop invariant ( out < outfilelen );\nloop invariant ( nchar <= outfilelen );\nloop invariant ( out == nchar || out == nchar + 1 );\nloop invariant ( nchar <= outfilelen );\nloop invariant ( out == nchar || out == nchar + 1 );\nloop invariant ( out < outfilelen );\nloop invariant ( nchar <= outfilelen );\nloop invariant ( out == nchar || out == nchar + 1 );\nloop invariant ( nchar <= outfilelen );\nloop invariant ( out == nchar || out == nchar + 1 );\nloop invariant ( out < outfilelen );\nloop invariant ( nchar <= outfilelen );\nloop invariant ( out == nchar || out == nchar + 1 );\nloop invariant ( nchar <= outfilelen );\nloop invariant ( out == nchar || out == nchar + 1 );\nloop invariant ( out < outfilelen );\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint __BLAST_NONDET;\n\nint main (void)\n{\n  int outfilelen;\n  \n  int nchar = 0;\n\n  int out = 0; \n\n  if(outfilelen > 0); else goto RETURN;\n\n  /*@\nloop invariant i1: ( nchar <= outfilelen );\nloop invariant i2: ( 0 <= out < outfilelen );\nloop invariant i3: ( out == nchar || out == nchar + 1 );\nloop invariant i4: ( out < outfilelen );\n*/\nwhile(__BLAST_NONDET)\n  {\n    \n    if(__BLAST_NONDET)\n    {\n      \n      if(__BLAST_NONDET)\n\t\n\tgoto AFTERLOOP; \n\n      if(__BLAST_NONDET)\n      {\n\tout = 0;\n\tnchar = 0;\n\tgoto LOOPEND;\n      }\n      else\n      {\n\t\n\tif(__BLAST_NONDET)  goto AFTERLOOP;\n\n\tnchar++;\n\tif (nchar >= outfilelen)\n\t  goto AFTERLOOP;\n\n\t{;\n//@ assert(0<=out);\n}\n\n\t{;\n//@ assert(out<outfilelen);\n}\n\n\tout++;\n      }\n    }\n    else\n    {\n      \n      nchar++;\n      if (nchar >= outfilelen)\n\tgoto AFTERLOOP;\n\n      {;\n//@ assert(0<=out);\n}\n\n      {;\n//@ assert(out<outfilelen);\n}\n\n      out++;\n\n      if(__BLAST_NONDET) goto AFTERLOOP;\n    }\n  LOOPEND:;\n  }\n AFTERLOOP:\n\n  {;\n//@ assert(0<=out);\n}\n\n  {;\n//@ assert(out<outfilelen);\n}\n\n  out++;\n RETURN:  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 1 <= nchar <= outfilelen;\nloop invariant 0 <= out <= outfilelen;\nloop invariant (nchar >= outfilelen ==> out == outfilelen);\nloop invariant (nchar < outfilelen ==> out < outfilelen);\nloop invariant (out >= outfilelen ==> nchar == outfilelen);\nloop invariant (out < outfilelen ==> nchar < outfilelen);\nloop invariant (out == 0 ==> nchar == 0);\nloop invariant (out > 0 ==> nchar > 0);\nloop invariant (out == outfilelen ==> nchar == outfilelen);\nloop invariant (out < outfilelen ==> nchar < outfilelen);\nloop invariant (out == 0 ==> nchar == 0);\nloop invariant (out > 0 ==> nchar > 0);\nloop invariant (out == outfilelen ==> nchar == outfilelen);\nloop invariant (out < outfilelen ==> nchar < outfilelen);\nloop invariant (out == 0 ==> nchar == 0);\nloop invariant (out > 0 ==> nchar > 0);\nloop invariant (out == outfilelen ==> nchar == outfilelen);\nloop invariant (out < outfilelen ==> nchar < outfilelen);\nloop invariant (out == 0 ==> nchar == 0);\nloop invariant (out > 0 ==> nchar > 0);\nloop invariant (out == outfilelen ==> nchar == outfilelen);\nloop invariant (out < outfilelen ==> nchar < outfilelen);\nloop invariant (out == 0 ==> nchar == 0);\nloop invariant (out > 0 ==> nchar > 0);\nloop invariant (out == outfilelen ==> nchar == outfilelen);\nloop invariant (out < outfilelen ==> nchar < outfilelen);\nloop invariant (out == 0 ==> nchar == 0);\nloop invariant (out > 0 ==> nchar > 0);\nloop invariant (out == outfilelen ==> nchar == outfilelen);\nloop invariant (out < outfilelen ==> nchar < outfilelen);\nloop invariant (out == 0 ==> nchar == 0);\nloop invariant (out > 0 ==> nchar > 0);\nloop invariant (out == outfilelen ==> nchar == outfilelen);\nloop invariant (out < outfilelen ==> nchar < outfilelen);\nloop invariant (out == 0 ==> nchar == 0);\nloop invariant (out > 0 ==> nchar > 0);\nloop invariant (out == outfilelen ==> nchar == outfilelen);\nloop invariant (out < outfilelen ==> nchar < outfilelen);\nloop invariant (out == 0 ==> nchar == 0);\nloop invariant (out > 0 ==> nchar > 0);\nloop invariant (out == outfilelen ==> nchar == outfilelen);\nloop invariant (out < outfilelen ==> nchar < outfilelen);\nloop invariant (out == 0 ==> nchar == 0);\nloop invariant (out > 0 ==> nchar > 0);\nloop invariant (out == outfilelen ==> nchar == outfilelen);\nloop invariant (out < outfilelen ==> nchar < outfilelen);\nloop invariant (out == 0 ==> nchar == 0);\nloop invariant (out > 0 ==> nchar > 0);\nloop invariant (out == outfilelen ==> nchar == outfilelen);\nloop invariant (out < outfilelen ==> nchar < outfilelen);\nloop invariant (out == 0 ==> nchar == 0);\nloop invariant (out > 0 ==> nchar > 0);\nloop invariant (out == outfilelen ==> nchar == outfilelen);\nloop invariant (out < outfilelen ==> nchar < outfilelen);\nloop invariant (out == 0 ==> nchar == 0);\nloop invariant (out > 0 ==> nchar > 0);\nloop invariant (out == outfilelen ==> nchar == outfilelen);\nloop invariant (out < outfilelen ==> nchar < outfilelen);\nloop invariant (out == 0 ==> nchar == 0);\nloop invariant (out > 0 ==> nchar > 0);\nloop invariant (out == outfilelen ==> nchar == outfilelen);\nloop invariant (out < outfilelen ==> nchar < outfilelen);\nloop invariant (out == 0 ==> nchar == 0);\nloop invariant (out > 0 ==> nchar > 0);\nloop invariant (out == outfilelen ==> nchar == outfilelen);\nloop invariant (out < outfilelen ==> nchar < outfilelen);\nloop invariant (out == 0 ==> nchar == 0);\nloop invariant (out > 0 ==> nchar > 0);\nloop invariant (out == outfilelen ==> nchar == outfilelen);\nloop invariant (out < outfilelen ==> nchar < outfilelen);\nloop invariant (out == 0 ==> nchar == 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint __BLAST_NONDET;\n\nint main (void)\n{\n  int outfilelen;\n  \n  int nchar = 0;\n\n  int out = 0; \n\n  if(outfilelen > 0); else goto RETURN;\n\n  /*@\n\nloop invariant i2: 0 <= out <= outfilelen;\nloop invariant i3: (nchar >= outfilelen ==> out == outfilelen);\nloop invariant i4: (nchar < outfilelen ==> out < outfilelen);\nloop invariant i5: (out >= outfilelen ==> nchar == outfilelen);\nloop invariant i6: (out < outfilelen ==> nchar < outfilelen);\nloop invariant i7: (out == 0 ==> nchar == 0);\nloop invariant i8: (out > 0 ==> nchar > 0);\nloop invariant i9: (out == outfilelen ==> nchar == outfilelen);\n*/\nwhile(__BLAST_NONDET)\n  {\n    \n    if(__BLAST_NONDET)\n    {\n      \n      if(__BLAST_NONDET)\n\t\n\tgoto AFTERLOOP; \n\n      if(__BLAST_NONDET)\n      {\n\tout = 0;\n\tnchar = 0;\n\tgoto LOOPEND;\n      }\n      else\n      {\n\t\n\tif(__BLAST_NONDET)  goto AFTERLOOP;\n\n\tnchar++;\n\tif (nchar >= outfilelen)\n\t  goto AFTERLOOP;\n\n\t{;\n//@ assert(0<=out);\n}\n\n\t{;\n//@ assert(out<outfilelen);\n}\n\n\tout++;\n      }\n    }\n    else\n    {\n      \n      nchar++;\n      if (nchar >= outfilelen)\n\tgoto AFTERLOOP;\n\n      {;\n//@ assert(0<=out);\n}\n\n      {;\n//@ assert(out<outfilelen);\n}\n\n      out++;\n\n      if(__BLAST_NONDET) goto AFTERLOOP;\n    }\n  LOOPEND:;\n  }\n AFTERLOOP:\n\n  {;\n//@ assert(0<=out);\n}\n\n  {;\n//@ assert(out<outfilelen);\n}\n\n  out++;\n RETURN:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= out < outfilelen;\nloop invariant 0 <= nchar <= outfilelen;\nloop invariant 0 <= out <= outfilelen;\nloop invariant if (out < outfilelen) then (nchar >= out) else (nchar >= outfilelen);\nloop invariant if (out < outfilelen) then (nchar < outfilelen) else (nchar < outfilelen);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint __BLAST_NONDET;\n\nint main (void)\n{\n  int outfilelen;\n  \n  int nchar = 0;\n\n  int out = 0; \n\n  if(outfilelen > 0); else goto RETURN;\n\n  /*@\nloop invariant i1: 0 <= out < outfilelen;\nloop invariant i2: 0 <= nchar <= outfilelen;\nloop invariant i3: 0 <= out <= outfilelen;\n\n\n*/\nwhile(__BLAST_NONDET)\n  {\n    \n    if(__BLAST_NONDET)\n    {\n      \n      if(__BLAST_NONDET)\n\t\n\tgoto AFTERLOOP; \n\n      if(__BLAST_NONDET)\n      {\n\tout = 0;\n\tnchar = 0;\n\tgoto LOOPEND;\n      }\n      else\n      {\n\t\n\tif(__BLAST_NONDET)  goto AFTERLOOP;\n\n\tnchar++;\n\tif (nchar >= outfilelen)\n\t  goto AFTERLOOP;\n\n\t{;\n//@ assert(0<=out);\n}\n\n\t{;\n//@ assert(out<outfilelen);\n}\n\n\tout++;\n      }\n    }\n    else\n    {\n      \n      nchar++;\n      if (nchar >= outfilelen)\n\tgoto AFTERLOOP;\n\n      {;\n//@ assert(0<=out);\n}\n\n      {;\n//@ assert(out<outfilelen);\n}\n\n      out++;\n\n      if(__BLAST_NONDET) goto AFTERLOOP;\n    }\n  LOOPEND:;\n  }\n AFTERLOOP:\n\n  {;\n//@ assert(0<=out);\n}\n\n  {;\n//@ assert(out<outfilelen);\n}\n\n  out++;\n RETURN:  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= out <= outfilelen;\nloop invariant 0 <= nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar == outfilelen ==> out == outfilelen;\nloop invariant out + nchar == outfilelen ==> nchar == outfilelen - out;\nloop invariant out + nchar == outfilelen ==> out == outfilelen - nchar;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint __BLAST_NONDET;\n\nint main (void)\n{\n  int outfilelen;\n  \n  int nchar = 0;\n\n  int out = 0; \n\n  if(outfilelen > 0); else goto RETURN;\n\n  /*@\nloop invariant i1: 0 <= out <= outfilelen;\nloop invariant i2: 0 <= nchar <= outfilelen;\nloop invariant i3: out + nchar <= outfilelen;\nloop invariant i4: out + nchar == outfilelen ==> out == outfilelen;\nloop invariant i5: out + nchar == outfilelen ==> nchar == outfilelen - out;\nloop invariant i6: out + nchar == outfilelen ==> out == outfilelen - nchar;\n*/\nwhile(__BLAST_NONDET)\n  {\n    \n    if(__BLAST_NONDET)\n    {\n      \n      if(__BLAST_NONDET)\n\t\n\tgoto AFTERLOOP; \n\n      if(__BLAST_NONDET)\n      {\n\tout = 0;\n\tnchar = 0;\n\tgoto LOOPEND;\n      }\n      else\n      {\n\t\n\tif(__BLAST_NONDET)  goto AFTERLOOP;\n\n\tnchar++;\n\tif (nchar >= outfilelen)\n\t  goto AFTERLOOP;\n\n\t{;\n//@ assert(0<=out);\n}\n\n\t{;\n//@ assert(out<outfilelen);\n}\n\n\tout++;\n      }\n    }\n    else\n    {\n      \n      nchar++;\n      if (nchar >= outfilelen)\n\tgoto AFTERLOOP;\n\n      {;\n//@ assert(0<=out);\n}\n\n      {;\n//@ assert(out<outfilelen);\n}\n\n      out++;\n\n      if(__BLAST_NONDET) goto AFTERLOOP;\n    }\n  LOOPEND:;\n  }\n AFTERLOOP:\n\n  {;\n//@ assert(0<=out);\n}\n\n  {;\n//@ assert(out<outfilelen);\n}\n\n  out++;\n RETURN:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= out <= outfilelen;\nloop invariant 0 <= out < outfilelen ==> __BLAST_NONDET;\nloop invariant 0 <= out < outfilelen ==> 0 <= nchar <= outfilelen;\nloop invariant 0 <= out < outfilelen ==> nchar <= outfilelen - 1;\nloop invariant 0 <= out < outfilelen ==> __BLAST_NONDET ==> nchar == outfilelen - 1;\nloop invariant 0 <= out < outfilelen ==> __BLAST_NONDET ==> nchar == outfilelen - 1;\nloop invariant 0 <= out < outfilelen ==> nchar >= 0;\nloop invariant 0 <= out < outfilelen ==> __BLAST_NONDET ==> nchar >= 0;\nloop invariant 0 <= out < outfilelen ==> nchar < outfilelen;\nloop invariant 0 <= out < outfilelen ==> __BLAST_NONDET ==> nchar < outfilelen;\nloop invariant __BLAST_NONDET ==> 0 <= out < outfilelen ==> nchar == outfilelen - 1;\nloop invariant 0 <= out < outfilelen ==> nchar == outfilelen - 1 ==> __BLAST_NONDET;\nloop invariant 0 <= out < outfilelen ==> nchar == outfilelen - 1 ==> __BLAST_NONDET ==> nchar == outfilelen - 1;\nloop invariant 0 <= out < outfilelen ==> nchar == outfilelen - 1 ==> __BLAST_NONDET ==> nchar == outfilelen - 1;\nloop invariant 0 <= out < outfilelen ==> nchar == outfilelen - 1 ==> __BLAST_NONDET ==> nchar == outfilelen - 1;\nloop invariant 0 <= out < outfilelen ==> nchar == outfilelen - 1 ==> __BLAST_NONDET ==> nchar == outfilelen - 1;\nloop invariant 0 <= out < outfilelen ==> nchar == outfilelen - 1 ==> __BLAST_NONDET ==> nchar == outfilelen - 1;\nloop invariant 0 <= out < outfilelen ==> nchar == outfilelen - 1 ==> __BLAST_NONDET ==> nchar == outfilelen - 1;\nloop invariant 0 <= out < outfilelen ==> nchar == outfilelen - 1 ==> __BLAST_NONDET ==> nchar == outfilelen - 1;\nloop invariant 0 <= out < outfilelen ==> nchar == outfilelen - 1 ==> __BLAST_NONDET ==> nchar == outfilelen - 1;\nloop invariant 0 <= out < outfilelen ==> nchar == outfilelen - 1 ==> __BLAST_NONDET ==> nchar == outfilelen - 1;\nloop invariant 0 <= out < outfilelen ==> nchar == outfilelen - 1 ==> __BLAST_NONDET ==> nchar == outfilelen - 1;\nloop invariant 0 <= out < outfilelen ==> nchar == outfilelen - 1 ==> __BLAST_NONDET ==> nchar == outfilelen - 1;\nloop invariant 0 <= out < outfilelen ==> nchar == outfilelen - 1 ==> __BLAST_NONDET ==> nchar == outfilelen - 1;\nloop invariant 0 <= out < outfilelen ==> nchar == outfilelen - 1 ==> __BLAST_NONDET ==> nchar == outfilelen - 1;\nloop invariant 0 <= out < outfilelen ==> nchar == outfilelen - 1 ==> __BLAST_NONDET ==> nchar == outfilelen - 1;\nloop invariant 0 <= out < outfilelen ==> nchar == outfilelen - 1 ==> __BLAST_NONDET ==> nchar == outfilelen - 1;\nloop invariant 0 <= out < outfilelen ==> nchar == outfilelen - 1 ==> __BLAST_NONDET ==> nchar == outfilelen - 1;\nloop invariant 0 <= out < outfilelen ==> nchar == outfilelen - 1 ==> __BLAST_NONDET ==> nchar == outfilelen - 1;\nloop invariant 0 <= out < outfilelen ==> nchar == outfilelen - 1 ==> __BLAST_NONDET ==> nchar == outfilelen - 1;\nloop invariant 0 <= out < outfilelen ==> nchar == outfilelen - 1 ==> __BLAST_NONDET ==> nchar == outfilelen - 1;\nloop invariant 0 <= out < outfilelen ==> nchar == outfilelen - 1 ==> __BLAST_NONDET ==> nchar == outfilelen - 1;\nloop invariant 0 <= out < outfilelen ==> nchar == outfilelen - 1 ==> __BLAST_NONDET ==> nchar == outfilelen - 1;\nloop invariant 0 <= out < outfilelen ==> nchar == outfilelen - 1 ==> __BLAST_NONDET ==> nchar == outfilelen - 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint __BLAST_NONDET;\n\nint main (void)\n{\n  int outfilelen;\n  \n  int nchar = 0;\n\n  int out = 0; \n\n  if(outfilelen > 0); else goto RETURN;\n\n  /*@\nloop invariant i1: 0 <= out <= outfilelen;\n\nloop invariant i3: 0 <= out < outfilelen ==> 0 <= nchar <= outfilelen;\nloop invariant i4: 0 <= out < outfilelen ==> nchar <= outfilelen - 1;\nloop invariant i5: 0 <= out < outfilelen ==> __BLAST_NONDET ==> nchar == outfilelen - 1;\nloop invariant i6: 0 <= out < outfilelen ==> nchar >= 0;\nloop invariant i7: 0 <= out < outfilelen ==> __BLAST_NONDET ==> nchar >= 0;\nloop invariant i8: 0 <= out < outfilelen ==> nchar < outfilelen;\nloop invariant i9: 0 <= out < outfilelen ==> __BLAST_NONDET ==> nchar < outfilelen;\nloop invariant i10: __BLAST_NONDET ==> 0 <= out < outfilelen ==> nchar == outfilelen - 1;\n\nloop invariant i12: 0 <= out < outfilelen ==> nchar == outfilelen - 1 ==> __BLAST_NONDET ==> nchar == outfilelen - 1;\n*/\nwhile(__BLAST_NONDET)\n  {\n    \n    if(__BLAST_NONDET)\n    {\n      \n      if(__BLAST_NONDET)\n\t\n\tgoto AFTERLOOP; \n\n      if(__BLAST_NONDET)\n      {\n\tout = 0;\n\tnchar = 0;\n\tgoto LOOPEND;\n      }\n      else\n      {\n\t\n\tif(__BLAST_NONDET)  goto AFTERLOOP;\n\n\tnchar++;\n\tif (nchar >= outfilelen)\n\t  goto AFTERLOOP;\n\n\t{;\n//@ assert(0<=out);\n}\n\n\t{;\n//@ assert(out<outfilelen);\n}\n\n\tout++;\n      }\n    }\n    else\n    {\n      \n      nchar++;\n      if (nchar >= outfilelen)\n\tgoto AFTERLOOP;\n\n      {;\n//@ assert(0<=out);\n}\n\n      {;\n//@ assert(out<outfilelen);\n}\n\n      out++;\n\n      if(__BLAST_NONDET) goto AFTERLOOP;\n    }\n  LOOPEND:;\n  }\n AFTERLOOP:\n\n  {;\n//@ assert(0<=out);\n}\n\n  {;\n//@ assert(out<outfilelen);\n}\n\n  out++;\n RETURN:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= nchar <= outfilelen;\nloop invariant 0 <= out <= outfilelen;\nloop invariant 0 <= outfilelen <= 100000;\nloop invariant out < outfilelen ==> nchar < outfilelen;\nloop invariant out < outfilelen ==> nchar < outfilelen ==> nchar <= outfilelen;\nloop invariant out < outfilelen ==> nchar < outfilelen ==> nchar <= outfilelen ==> nchar >= 0;\nloop invariant out < outfilelen ==> nchar < outfilelen ==> nchar <= outfilelen ==> nchar >= 0 ==> out >= 0;\nloop invariant out < outfilelen ==> nchar < outfilelen ==> nchar <= outfilelen ==> nchar >= 0 ==> out >= 0 ==> out <= outfilelen;\nloop invariant out < outfilelen ==> nchar < outfilelen ==> nchar <= outfilelen ==> nchar >= 0 ==> out >= 0 ==> out <= outfilelen ==> out >= 0;\nloop invariant out < outfilelen ==> nchar < outfilelen ==> nchar <= outfilelen ==> nchar >= 0 ==> out >= 0 ==> out <= outfilelen ==> out >= 0 ==> out <= outfilelen;\nloop invariant out < outfilelen ==> nchar < outfilelen ==> nchar <= outfilelen ==> nchar >= 0 ==> out >= 0 ==> out <= outfilelen ==> out >= 0 ==> out <= outfilelen ==> nchar >= 0;\nloop invariant out < outfilelen ==> nchar < outfilelen ==> nchar <= outfilelen ==> nchar >= 0 ==> out >= 0 ==> out <= outfilelen ==> out >= 0 ==> out <= outfilelen ==> nchar >= 0 ==> nchar <= outfilelen;\nloop invariant out < outfilelen ==> nchar < outfilelen ==> nchar <= outfilelen ==> nchar >= 0 ==> out >= 0 ==> out <= outfilelen ==> out >= 0 ==> out <= outfilelen ==> nchar >= 0 ==> nchar <= outfilelen ==> out >= 0;\nloop invariant out < outfilelen ==> nchar < outfilelen ==> nchar <= outfilelen ==> nchar >= 0 ==> out >= 0 ==> out <= outfilelen ==> out >= 0 ==> out <= outfilelen ==> nchar >= 0 ==> nchar <= outfilelen ==> out >= 0 ==> out <= outfilelen;\nloop invariant out < outfilelen ==> nchar < outfilelen ==> nchar <= outfilelen ==> nchar >= 0 ==> out >= 0 ==> out <= outfilelen ==> out >= 0 ==> out <= outfilelen ==> nchar >= 0 ==> nchar <= outfilelen ==> out >= 0 ==> out <= outfilelen ==> nchar >= 0;\nloop invariant out < outfilelen ==> nchar < outfilelen ==> nchar <= outfilelen ==> nchar >= 0 ==> out >= 0 ==> out <= outfilelen ==> out >= 0 ==> out <= outfilelen ==> nchar >= 0 ==> nchar <= outfilelen ==> out >= 0 ==> out <= outfilelen ==> nchar >= 0 ==> nchar <= outfilelen;\nloop invariant out < outfilelen ==> nchar < outfilelen ==> nchar <= outfilelen ==> nchar >= 0 ==> out >= 0 ==> out <= outfilelen ==> out >= 0 ==> out <= outfilelen ==> nchar >= 0 ==> nchar <= outfilelen ==> out >= 0 ==> out <= outfilelen ==> nchar >= 0 ==> nchar <= outfilelen ==> nchar >= 0;\nloop invariant out < outfilelen ==> nchar < outfilelen ==> nchar <= outfilelen ==> nchar >= 0 ==> out >= 0 ==> out <= outfilelen ==> out >= 0 ==> out <= outfilelen ==> nchar >= 0 ==> nchar <= outfilelen ==> out >= 0 ==> out <= outfilelen ==> nchar >= 0 ==> nchar <= outfilelen ==> nchar >= 0 ==> nchar <= outfilelen;\nloop invariant out < outfilelen ==> nchar < outfilelen ==> nchar <= outfilelen ==> nchar >= 0 ==> out >= 0 ==> out <= outfilelen ==> out >= 0 ==> out <= outfilelen ==> nchar >= 0 ==> nchar <= outfilelen ==> out >= 0 ==> out <= outfilelen ==> nchar >= 0 ==> nchar <= outfilelen ==> nchar >= 0 ==> nchar <= outfilelen ==> nchar >= 0 ==> nchar <= outfilelen;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint __BLAST_NONDET;\n\nint main (void)\n{\n  int outfilelen;\n  \n  int nchar = 0;\n\n  int out = 0; \n\n  if(outfilelen > 0); else goto RETURN;\n\n  /*@\nloop invariant i1: 0 <= nchar <= outfilelen;\nloop invariant i2: 0 <= out <= outfilelen;\n\nloop invariant i4: out < outfilelen ==> nchar < outfilelen;\nloop invariant i5: out < outfilelen ==> nchar < outfilelen ==> nchar <= outfilelen;\nloop invariant i6: out < outfilelen ==> nchar < outfilelen ==> nchar <= outfilelen ==> nchar >= 0;\nloop invariant i7: out < outfilelen ==> nchar < outfilelen ==> nchar <= outfilelen ==> nchar >= 0 ==> out >= 0;\nloop invariant i8: out < outfilelen ==> nchar < outfilelen ==> nchar <= outfilelen ==> nchar >= 0 ==> out >= 0 ==> out <= outfilelen;\nloop invariant i9: out < outfilelen ==> nchar < outfilelen ==> nchar <= outfilelen ==> nchar >= 0 ==> out >= 0 ==> out <= outfilelen ==> out >= 0;\nloop invariant i10: out < outfilelen ==> nchar < outfilelen ==> nchar <= outfilelen ==> nchar >= 0 ==> out >= 0 ==> out <= outfilelen ==> out >= 0 ==> out <= outfilelen;\nloop invariant i11: out < outfilelen ==> nchar < outfilelen ==> nchar <= outfilelen ==> nchar >= 0 ==> out >= 0 ==> out <= outfilelen ==> out >= 0 ==> out <= outfilelen ==> nchar >= 0;\nloop invariant i12: out < outfilelen ==> nchar < outfilelen ==> nchar <= outfilelen ==> nchar >= 0 ==> out >= 0 ==> out <= outfilelen ==> out >= 0 ==> out <= outfilelen ==> nchar >= 0 ==> nchar <= outfilelen;\nloop invariant i13: out < outfilelen ==> nchar < outfilelen ==> nchar <= outfilelen ==> nchar >= 0 ==> out >= 0 ==> out <= outfilelen ==> out >= 0 ==> out <= outfilelen ==> nchar >= 0 ==> nchar <= outfilelen ==> out >= 0;\nloop invariant i14: out < outfilelen ==> nchar < outfilelen ==> nchar <= outfilelen ==> nchar >= 0 ==> out >= 0 ==> out <= outfilelen ==> out >= 0 ==> out <= outfilelen ==> nchar >= 0 ==> nchar <= outfilelen ==> out >= 0 ==> out <= outfilelen;\nloop invariant i15: out < outfilelen ==> nchar < outfilelen ==> nchar <= outfilelen ==> nchar >= 0 ==> out >= 0 ==> out <= outfilelen ==> out >= 0 ==> out <= outfilelen ==> nchar >= 0 ==> nchar <= outfilelen ==> out >= 0 ==> out <= outfilelen ==> nchar >= 0;\nloop invariant i16: out < outfilelen ==> nchar < outfilelen ==> nchar <= outfilelen ==> nchar >= 0 ==> out >= 0 ==> out <= outfilelen ==> out >= 0 ==> out <= outfilelen ==> nchar >= 0 ==> nchar <= outfilelen ==> out >= 0 ==> out <= outfilelen ==> nchar >= 0 ==> nchar <= outfilelen;\nloop invariant i17: out < outfilelen ==> nchar < outfilelen ==> nchar <= outfilelen ==> nchar >= 0 ==> out >= 0 ==> out <= outfilelen ==> out >= 0 ==> out <= outfilelen ==> nchar >= 0 ==> nchar <= outfilelen ==> out >= 0 ==> out <= outfilelen ==> nchar >= 0 ==> nchar <= outfilelen ==> nchar >= 0;\nloop invariant i18: out < outfilelen ==> nchar < outfilelen ==> nchar <= outfilelen ==> nchar >= 0 ==> out >= 0 ==> out <= outfilelen ==> out >= 0 ==> out <= outfilelen ==> nchar >= 0 ==> nchar <= outfilelen ==> out >= 0 ==> out <= outfilelen ==> nchar >= 0 ==> nchar <= outfilelen ==> nchar >= 0 ==> nchar <= outfilelen;\nloop invariant i19: out < outfilelen ==> nchar < outfilelen ==> nchar <= outfilelen ==> nchar >= 0 ==> out >= 0 ==> out <= outfilelen ==> out >= 0 ==> out <= outfilelen ==> nchar >= 0 ==> nchar <= outfilelen ==> out >= 0 ==> out <= outfilelen ==> nchar >= 0 ==> nchar <= outfilelen ==> nchar >= 0 ==> nchar <= outfilelen ==> nchar >= 0 ==> nchar <= outfilelen;\n*/\nwhile(__BLAST_NONDET)\n  {\n    \n    if(__BLAST_NONDET)\n    {\n      \n      if(__BLAST_NONDET)\n\t\n\tgoto AFTERLOOP; \n\n      if(__BLAST_NONDET)\n      {\n\tout = 0;\n\tnchar = 0;\n\tgoto LOOPEND;\n      }\n      else\n      {\n\t\n\tif(__BLAST_NONDET)  goto AFTERLOOP;\n\n\tnchar++;\n\tif (nchar >= outfilelen)\n\t  goto AFTERLOOP;\n\n\t{;\n//@ assert(0<=out);\n}\n\n\t{;\n//@ assert(out<outfilelen);\n}\n\n\tout++;\n      }\n    }\n    else\n    {\n      \n      nchar++;\n      if (nchar >= outfilelen)\n\tgoto AFTERLOOP;\n\n      {;\n//@ assert(0<=out);\n}\n\n      {;\n//@ assert(out<outfilelen);\n}\n\n      out++;\n\n      if(__BLAST_NONDET) goto AFTERLOOP;\n    }\n  LOOPEND:;\n  }\n AFTERLOOP:\n\n  {;\n//@ assert(0<=out);\n}\n\n  {;\n//@ assert(out<outfilelen);\n}\n\n  out++;\n RETURN:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= out <= outfilelen;\nloop invariant 0 <= nchar <= outfilelen;\nloop invariant out == 0 ==> nchar == 0;\nloop invariant out == 0 ==> nchar == 0 ==> nchar < outfilelen;\nloop invariant out == 0 ==> nchar == 0 ==> nchar < outfilelen ==> nchar == 0;\nloop invariant out == 0 ==> nchar == 0 ==> nchar < outfilelen ==> nchar == 0 ==> nchar == 0;\nloop invariant out == 0 ==> nchar == 0 ==> nchar < outfilelen ==> nchar == 0 ==> nchar == 0 ==> nchar == 0;\nloop invariant out == 0 ==> nchar == 0 ==> nchar < outfilelen ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0;\nloop invariant out == 0 ==> nchar == 0 ==> nchar < outfilelen ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0;\nloop invariant out == 0 ==> nchar == 0 ==> nchar < outfilelen ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0;\nloop invariant out == 0 ==> nchar == 0 ==> nchar < outfilelen ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0;\nloop invariant out == 0 ==> nchar == 0 ==> nchar < outfilelen ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0;\nloop invariant out == 0 ==> nchar == 0 ==> nchar < outfilelen ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0;\nloop invariant out == 0 ==> nchar == 0 ==> nchar < outfilelen ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0;\nloop invariant out == 0 ==> nchar == 0 ==> nchar < outfilelen ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0;\nloop invariant out == 0 ==> nchar == 0 ==> nchar < outfilelen ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0;\nloop invariant out == 0 ==> nchar == 0 ==> nchar < outfilelen ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0;\nloop invariant out == 0 ==> nchar == 0 ==> nchar < outfilelen ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint __BLAST_NONDET;\n\nint main (void)\n{\n  int outfilelen;\n  \n  int nchar = 0;\n\n  int out = 0; \n\n  if(outfilelen > 0); else goto RETURN;\n\n  /*@\nloop invariant i1: 0 <= out <= outfilelen;\nloop invariant i2: 0 <= nchar <= outfilelen;\nloop invariant i3: out == 0 ==> nchar == 0;\nloop invariant i4: out == 0 ==> nchar == 0 ==> nchar < outfilelen;\nloop invariant i5: out == 0 ==> nchar == 0 ==> nchar < outfilelen ==> nchar == 0;\nloop invariant i6: out == 0 ==> nchar == 0 ==> nchar < outfilelen ==> nchar == 0 ==> nchar == 0;\nloop invariant i7: out == 0 ==> nchar == 0 ==> nchar < outfilelen ==> nchar == 0 ==> nchar == 0 ==> nchar == 0;\nloop invariant i8: out == 0 ==> nchar == 0 ==> nchar < outfilelen ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0;\nloop invariant i9: out == 0 ==> nchar == 0 ==> nchar < outfilelen ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0;\nloop invariant i10: out == 0 ==> nchar == 0 ==> nchar < outfilelen ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0;\nloop invariant i11: out == 0 ==> nchar == 0 ==> nchar < outfilelen ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0;\nloop invariant i12: out == 0 ==> nchar == 0 ==> nchar < outfilelen ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0;\nloop invariant i13: out == 0 ==> nchar == 0 ==> nchar < outfilelen ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0;\nloop invariant i14: out == 0 ==> nchar == 0 ==> nchar < outfilelen ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0;\nloop invariant i15: out == 0 ==> nchar == 0 ==> nchar < outfilelen ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0;\nloop invariant i16: out == 0 ==> nchar == 0 ==> nchar < outfilelen ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0;\nloop invariant i17: out == 0 ==> nchar == 0 ==> nchar < outfilelen ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0;\nloop invariant i18: out == 0 ==> nchar == 0 ==> nchar < outfilelen ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0;\n*/\nwhile(__BLAST_NONDET)\n  {\n    \n    if(__BLAST_NONDET)\n    {\n      \n      if(__BLAST_NONDET)\n\t\n\tgoto AFTERLOOP; \n\n      if(__BLAST_NONDET)\n      {\n\tout = 0;\n\tnchar = 0;\n\tgoto LOOPEND;\n      }\n      else\n      {\n\t\n\tif(__BLAST_NONDET)  goto AFTERLOOP;\n\n\tnchar++;\n\tif (nchar >= outfilelen)\n\t  goto AFTERLOOP;\n\n\t{;\n//@ assert(0<=out);\n}\n\n\t{;\n//@ assert(out<outfilelen);\n}\n\n\tout++;\n      }\n    }\n    else\n    {\n      \n      nchar++;\n      if (nchar >= outfilelen)\n\tgoto AFTERLOOP;\n\n      {;\n//@ assert(0<=out);\n}\n\n      {;\n//@ assert(out<outfilelen);\n}\n\n      out++;\n\n      if(__BLAST_NONDET) goto AFTERLOOP;\n    }\n  LOOPEND:;\n  }\n AFTERLOOP:\n\n  {;\n//@ assert(0<=out);\n}\n\n  {;\n//@ assert(out<outfilelen);\n}\n\n  out++;\n RETURN:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= out <= outfilelen;\nloop invariant 0 <= nchar <= outfilelen;\nloop invariant out <= nchar;\nloop invariant 0 <= nchar;\nloop invariant nchar <= outfilelen;\nloop invariant out >= 0;\nloop invariant nchar >= 0;\nloop invariant nchar <= outfilelen;\nloop invariant 0 <= out <= outfilelen;\nloop invariant nchar == 0 ==> out == 0;\nloop invariant nchar == 0 ==> out > 0 ==> out == 1;\nloop invariant nchar > 0 ==> out == nchar;\nloop invariant nchar >= 0 ==> out > 0 ==> out == nchar + 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint __BLAST_NONDET;\n\nint main (void)\n{\n  int outfilelen;\n  \n  int nchar = 0;\n\n  int out = 0; \n\n  if(outfilelen > 0); else goto RETURN;\n\n  /*@\nloop invariant i1: 0 <= out <= outfilelen;\nloop invariant i2: 0 <= nchar <= outfilelen;\nloop invariant i3: out <= nchar;\nloop invariant i4: 0 <= nchar;\nloop invariant i5: nchar <= outfilelen;\nloop invariant i6: out >= 0;\nloop invariant i7: nchar >= 0;\nloop invariant i8: nchar == 0 ==> out == 0;\nloop invariant i9: nchar == 0 ==> out > 0 ==> out == 1;\nloop invariant i10: nchar > 0 ==> out == nchar;\nloop invariant i11: nchar >= 0 ==> out > 0 ==> out == nchar + 1;\n*/\nwhile(__BLAST_NONDET)\n  {\n    \n    if(__BLAST_NONDET)\n    {\n      \n      if(__BLAST_NONDET)\n\t\n\tgoto AFTERLOOP; \n\n      if(__BLAST_NONDET)\n      {\n\tout = 0;\n\tnchar = 0;\n\tgoto LOOPEND;\n      }\n      else\n      {\n\t\n\tif(__BLAST_NONDET)  goto AFTERLOOP;\n\n\tnchar++;\n\tif (nchar >= outfilelen)\n\t  goto AFTERLOOP;\n\n\t{;\n//@ assert(0<=out);\n}\n\n\t{;\n//@ assert(out<outfilelen);\n}\n\n\tout++;\n      }\n    }\n    else\n    {\n      \n      nchar++;\n      if (nchar >= outfilelen)\n\tgoto AFTERLOOP;\n\n      {;\n//@ assert(0<=out);\n}\n\n      {;\n//@ assert(out<outfilelen);\n}\n\n      out++;\n\n      if(__BLAST_NONDET) goto AFTERLOOP;\n    }\n  LOOPEND:;\n  }\n AFTERLOOP:\n\n  {;\n//@ assert(0<=out);\n}\n\n  {;\n//@ assert(out<outfilelen);\n}\n\n  out++;\n RETURN:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= out < outfilelen;\nloop invariant 0 <= nchar <= outfilelen;\nloop invariant nchar <= outfilelen;\nloop invariant outfilelen > 0;\nloop invariant 0 <= out < outfilelen;\nloop invariant 0 <= nchar <= outfilelen;\nloop invariant nchar <= outfilelen;\nloop invariant outfilelen > 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint __BLAST_NONDET;\n\nint main (void)\n{\n  int outfilelen;\n  \n  int nchar = 0;\n\n  int out = 0; \n\n  if(outfilelen > 0); else goto RETURN;\n\n  /*@\nloop invariant i1: 0 <= out < outfilelen;\nloop invariant i2: 0 <= nchar <= outfilelen;\nloop invariant i3: nchar <= outfilelen;\nloop invariant i4: outfilelen > 0;\n*/\nwhile(__BLAST_NONDET)\n  {\n    \n    if(__BLAST_NONDET)\n    {\n      \n      if(__BLAST_NONDET)\n\t\n\tgoto AFTERLOOP; \n\n      if(__BLAST_NONDET)\n      {\n\tout = 0;\n\tnchar = 0;\n\tgoto LOOPEND;\n      }\n      else\n      {\n\t\n\tif(__BLAST_NONDET)  goto AFTERLOOP;\n\n\tnchar++;\n\tif (nchar >= outfilelen)\n\t  goto AFTERLOOP;\n\n\t{;\n//@ assert(0<=out);\n}\n\n\t{;\n//@ assert(out<outfilelen);\n}\n\n\tout++;\n      }\n    }\n    else\n    {\n      \n      nchar++;\n      if (nchar >= outfilelen)\n\tgoto AFTERLOOP;\n\n      {;\n//@ assert(0<=out);\n}\n\n      {;\n//@ assert(out<outfilelen);\n}\n\n      out++;\n\n      if(__BLAST_NONDET) goto AFTERLOOP;\n    }\n  LOOPEND:;\n  }\n AFTERLOOP:\n\n  {;\n//@ assert(0<=out);\n}\n\n  {;\n//@ assert(out<outfilelen);\n}\n\n  out++;\n RETURN:  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= out < outfilelen;\nloop invariant 0 <= nchar <= outfilelen;\nloop invariant nchar >= out;\nloop invariant out <= outfilelen;\nloop invariant nchar <= outfilelen;\nloop invariant nchar >= 0;\nloop invariant out >= 0;\nloop invariant 0 <= nchar;\nloop invariant nchar <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant 0 <= nchar;\nloop invariant nchar <= outfilelen;\nloop invariant out >= 0;\nloop invariant 0 <= out;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint __BLAST_NONDET;\n\nint main (void)\n{\n  int outfilelen;\n  \n  int nchar = 0;\n\n  int out = 0; \n\n  if(outfilelen > 0); else goto RETURN;\n\n  /*@\nloop invariant i1: 0 <= out < outfilelen;\nloop invariant i2: 0 <= nchar <= outfilelen;\nloop invariant i3: nchar >= out;\nloop invariant i4: out <= outfilelen;\nloop invariant i5: nchar <= outfilelen;\nloop invariant i6: nchar >= 0;\nloop invariant i7: out >= 0;\nloop invariant i8: 0 <= nchar;\nloop invariant i9: 0 <= out;\n*/\nwhile(__BLAST_NONDET)\n  {\n    \n    if(__BLAST_NONDET)\n    {\n      \n      if(__BLAST_NONDET)\n\t\n\tgoto AFTERLOOP; \n\n      if(__BLAST_NONDET)\n      {\n\tout = 0;\n\tnchar = 0;\n\tgoto LOOPEND;\n      }\n      else\n      {\n\t\n\tif(__BLAST_NONDET)  goto AFTERLOOP;\n\n\tnchar++;\n\tif (nchar >= outfilelen)\n\t  goto AFTERLOOP;\n\n\t{;\n//@ assert(0<=out);\n}\n\n\t{;\n//@ assert(out<outfilelen);\n}\n\n\tout++;\n      }\n    }\n    else\n    {\n      \n      nchar++;\n      if (nchar >= outfilelen)\n\tgoto AFTERLOOP;\n\n      {;\n//@ assert(0<=out);\n}\n\n      {;\n//@ assert(out<outfilelen);\n}\n\n      out++;\n\n      if(__BLAST_NONDET) goto AFTERLOOP;\n    }\n  LOOPEND:;\n  }\n AFTERLOOP:\n\n  {;\n//@ assert(0<=out);\n}\n\n  {;\n//@ assert(out<outfilelen);\n}\n\n  out++;\n RETURN:  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= nchar <= outfilelen;\nloop invariant 0 <= out <= outfilelen;\nloop invariant nchar >= 0;\nloop invariant out >= 0;\nloop invariant nchar <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant nchar <= out;\nloop invariant nchar >= out;\nloop invariant nchar >= 0;\nloop invariant out >= 0;\nloop invariant nchar <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant nchar >= 0;\nloop invariant out >= 0;\nloop invariant nchar <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant nchar >= 0;\nloop invariant out >= 0;\nloop invariant nchar <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant nchar >= 0;\nloop invariant out >= 0;\nloop invariant nchar <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant nchar >= 0;\nloop invariant out >= 0;\nloop invariant nchar <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant nchar >= 0;\nloop invariant out >= 0;\nloop invariant nchar <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant nchar >= 0;\nloop invariant out >= 0;\nloop invariant nchar <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant nchar >= 0;\nloop invariant out >= 0;\nloop invariant nchar <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant nchar >= 0;\nloop invariant out >= 0;\nloop invariant nchar <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant nchar >= 0;\nloop invariant out >= 0;\nloop invariant nchar <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant nchar >= 0;\nloop invariant out >= 0;\nloop invariant nchar <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant nchar >= 0;\nloop invariant out >= 0;\nloop invariant nchar <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant nchar >= 0;\nloop invariant out >= 0;\nloop invariant nchar <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant nchar >= 0;\nloop invariant out >= 0;\nloop invariant nchar <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant nchar >= 0;\nloop invariant out >= 0;\nloop invariant nchar <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant nchar >= 0;\nloop invariant out >= 0;\nloop invariant nchar <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant nchar >= 0;\nloop invariant out >= 0;\nloop invariant nchar <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant nchar >= 0;\nloop invariant out >= 0;\nloop invariant nchar <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant nchar >= 0;\nloop invariant out >= 0;\nloop invariant nchar <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant nchar >= 0;\nloop invariant out >= 0;\nloop invariant nchar <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant nchar >= 0;\nloop invariant out >= 0;\nloop invariant nchar <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant nchar >= 0;\nloop invariant out >= 0;\nloop invariant nchar <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant nchar >= 0;\nloop invariant out >= 0;\nloop invariant nchar <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant nchar >= 0;\nloop invariant out >= 0;\nloop invariant nchar <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant nchar >= 0;\nloop invariant out >= 0;\nloop invariant nchar <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant nchar >= 0;\nloop invariant out >= 0;\nloop invariant nchar <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant nchar >= 0;\nloop invariant out >= 0;\nloop invariant nchar <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant nchar >= 0;\nloop invariant out >= 0;\nloop invariant nchar <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant nchar >= 0;\nloop invariant out >= 0;\nloop invariant nchar <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant nchar >= 0;\nloop invariant out >= 0;\nloop invariant nchar <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant nchar >= 0;\nloop invariant out >= 0;\nloop invariant nchar <= outfilelen;\nloop invariant out <= outfilelen;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint __BLAST_NONDET;\n\nint main (void)\n{\n  int outfilelen;\n  \n  int nchar = 0;\n\n  int out = 0; \n\n  if(outfilelen > 0); else goto RETURN;\n\n  /*@\nloop invariant i1: 0 <= nchar <= outfilelen;\nloop invariant i2: 0 <= out <= outfilelen;\nloop invariant i3: nchar >= 0;\nloop invariant i4: out >= 0;\nloop invariant i5: nchar <= outfilelen;\nloop invariant i6: out <= outfilelen;\nloop invariant i7: nchar <= out;\nloop invariant i8: nchar >= out;\n*/\nwhile(__BLAST_NONDET)\n  {\n    \n    if(__BLAST_NONDET)\n    {\n      \n      if(__BLAST_NONDET)\n\t\n\tgoto AFTERLOOP; \n\n      if(__BLAST_NONDET)\n      {\n\tout = 0;\n\tnchar = 0;\n\tgoto LOOPEND;\n      }\n      else\n      {\n\t\n\tif(__BLAST_NONDET)  goto AFTERLOOP;\n\n\tnchar++;\n\tif (nchar >= outfilelen)\n\t  goto AFTERLOOP;\n\n\t{;\n//@ assert(0<=out);\n}\n\n\t{;\n//@ assert(out<outfilelen);\n}\n\n\tout++;\n      }\n    }\n    else\n    {\n      \n      nchar++;\n      if (nchar >= outfilelen)\n\tgoto AFTERLOOP;\n\n      {;\n//@ assert(0<=out);\n}\n\n      {;\n//@ assert(out<outfilelen);\n}\n\n      out++;\n\n      if(__BLAST_NONDET) goto AFTERLOOP;\n    }\n  LOOPEND:;\n  }\n AFTERLOOP:\n\n  {;\n//@ assert(0<=out);\n}\n\n  {;\n//@ assert(out<outfilelen);\n}\n\n  out++;\n RETURN:  return 0;\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 60: unexpected token '('",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint __BLAST_NONDET;\n\nint main (void)\n{\n  int outfilelen;\n  \n  int nchar = 0;\n\n  int out = 0; \n\n  if(outfilelen > 0); else goto RETURN;\n\n  /*@\nloop invariant i1: 0 <= nchar <= outfilelen;\nloop invariant i2: 0 <= out <= outfilelen;\nloop invariant i3: nchar < outfilelen;\nloop invariant i4: out < outfilelen;\nloop invariant i5: out <= outfilelen;\nloop invariant i6: nchar <= outfilelen;\nloop invariant i7: 0 <= nchar;\nloop invariant i8: 0 <= out;\nloop invariant i9: nchar <= nchar + 1;\nloop invariant i10: out <= out + 1;\nloop invariant i11: nchar <= outfilelen - 1;\nloop invariant i12: out <= outfilelen - 1;\nloop invariant i13: nchar <= outfilelen - 1 ==> 0 <= out;\nloop invariant i14: nchar <= outfilelen - 1 ==> out < outfilelen;\nloop invariant i15: nchar <= outfilelen - 1 ==> out <= outfilelen;\nloop invariant i16: nchar <= outfilelen - 1 ==> out <= outfilelen - 1;\nloop invariant i17: nchar <= outfilelen - 1 ==> 0 <= nchar;\nloop invariant i18: nchar <= outfilelen - 1 ==> nchar < outfilelen;\nloop invariant i19: nchar <= outfilelen - 1 ==> nchar <= outfilelen;\nloop invariant i20: nchar <= outfilelen - 1 ==> nchar <= nchar + 1;\nloop invariant i21: nchar <= outfilelen - 1 ==> out <= out + 1;\nloop invariant i22: nchar <= outfilelen - 1 ==> nchar <= outfilelen - 1;\nloop invariant i23: out + nchar <= outfilelen;\nloop invariant i24: out == nchar ==> (out == 0 && nchar == 0 && out == 0);\nloop invariant i25: 0 <= out && out < outfilelen;\nloop invariant i26: 0 <= nchar && nchar <= outfilelen;\nloop invariant i27: nchar <= out;\nloop invariant i28: ( nchar <= outfilelen );\nloop invariant i29: ( 0 <= out < outfilelen );\nloop invariant i30: ( out == nchar || out == nchar + 1 );\nloop invariant i31: ( out < outfilelen );\nloop invariant i32: 1 <= nchar <= outfilelen;\nloop invariant i33: (nchar >= outfilelen ==> out == outfilelen);\nloop invariant i34: (nchar < outfilelen ==> out < outfilelen);\nloop invariant i35: (out >= outfilelen ==> nchar == outfilelen);\nloop invariant i36: (out < outfilelen ==> nchar < outfilelen);\nloop invariant i37: (out == 0 ==> nchar == 0);\nloop invariant i38: (out > 0 ==> nchar > 0);\nloop invariant i39: (out == outfilelen ==> nchar == outfilelen);\nloop invariant i40: 0 <= out < outfilelen;\nloop invariant i41: if (out < outfilelen) then (nchar >= out) else (nchar >= outfilelen);\nloop invariant i42: if (out < outfilelen) then (nchar < outfilelen) else (nchar < outfilelen);\nloop invariant i43: out + nchar == outfilelen ==> out == outfilelen;\nloop invariant i44: out + nchar == outfilelen ==> nchar == outfilelen - out;\nloop invariant i45: out + nchar == outfilelen ==> out == outfilelen - nchar;\nloop invariant i46: 0 <= out < outfilelen ==> __BLAST_NONDET;\nloop invariant i47: 0 <= out < outfilelen ==> 0 <= nchar <= outfilelen;\nloop invariant i48: 0 <= out < outfilelen ==> nchar <= outfilelen - 1;\nloop invariant i49: 0 <= out < outfilelen ==> __BLAST_NONDET ==> nchar == outfilelen - 1;\nloop invariant i50: 0 <= out < outfilelen ==> nchar >= 0;\nloop invariant i51: 0 <= out < outfilelen ==> __BLAST_NONDET ==> nchar >= 0;\nloop invariant i52: 0 <= out < outfilelen ==> nchar < outfilelen;\nloop invariant i53: 0 <= out < outfilelen ==> __BLAST_NONDET ==> nchar < outfilelen;\nloop invariant i54: __BLAST_NONDET ==> 0 <= out < outfilelen ==> nchar == outfilelen - 1;\nloop invariant i55: 0 <= out < outfilelen ==> nchar == outfilelen - 1 ==> __BLAST_NONDET;\nloop invariant i56: 0 <= out < outfilelen ==> nchar == outfilelen - 1 ==> __BLAST_NONDET ==> nchar == outfilelen - 1;\nloop invariant i57: 0 <= outfilelen <= 100000;\nloop invariant i58: out < outfilelen ==> nchar < outfilelen;\nloop invariant i59: out < outfilelen ==> nchar < outfilelen ==> nchar <= outfilelen;\nloop invariant i60: out < outfilelen ==> nchar < outfilelen ==> nchar <= outfilelen ==> nchar >= 0;\nloop invariant i61: out < outfilelen ==> nchar < outfilelen ==> nchar <= outfilelen ==> nchar >= 0 ==> out >= 0;\nloop invariant i62: out < outfilelen ==> nchar < outfilelen ==> nchar <= outfilelen ==> nchar >= 0 ==> out >= 0 ==> out <= outfilelen;\nloop invariant i63: out < outfilelen ==> nchar < outfilelen ==> nchar <= outfilelen ==> nchar >= 0 ==> out >= 0 ==> out <= outfilelen ==> out >= 0;\nloop invariant i64: out < outfilelen ==> nchar < outfilelen ==> nchar <= outfilelen ==> nchar >= 0 ==> out >= 0 ==> out <= outfilelen ==> out >= 0 ==> out <= outfilelen;\nloop invariant i65: out < outfilelen ==> nchar < outfilelen ==> nchar <= outfilelen ==> nchar >= 0 ==> out >= 0 ==> out <= outfilelen ==> out >= 0 ==> out <= outfilelen ==> nchar >= 0;\nloop invariant i66: out < outfilelen ==> nchar < outfilelen ==> nchar <= outfilelen ==> nchar >= 0 ==> out >= 0 ==> out <= outfilelen ==> out >= 0 ==> out <= outfilelen ==> nchar >= 0 ==> nchar <= outfilelen;\nloop invariant i67: out < outfilelen ==> nchar < outfilelen ==> nchar <= outfilelen ==> nchar >= 0 ==> out >= 0 ==> out <= outfilelen ==> out >= 0 ==> out <= outfilelen ==> nchar >= 0 ==> nchar <= outfilelen ==> out >= 0;\nloop invariant i68: out < outfilelen ==> nchar < outfilelen ==> nchar <= outfilelen ==> nchar >= 0 ==> out >= 0 ==> out <= outfilelen ==> out >= 0 ==> out <= outfilelen ==> nchar >= 0 ==> nchar <= outfilelen ==> out >= 0 ==> out <= outfilelen;\nloop invariant i69: out < outfilelen ==> nchar < outfilelen ==> nchar <= outfilelen ==> nchar >= 0 ==> out >= 0 ==> out <= outfilelen ==> out >= 0 ==> out <= outfilelen ==> nchar >= 0 ==> nchar <= outfilelen ==> out >= 0 ==> out <= outfilelen ==> nchar >= 0;\nloop invariant i70: out < outfilelen ==> nchar < outfilelen ==> nchar <= outfilelen ==> nchar >= 0 ==> out >= 0 ==> out <= outfilelen ==> out >= 0 ==> out <= outfilelen ==> nchar >= 0 ==> nchar <= outfilelen ==> out >= 0 ==> out <= outfilelen ==> nchar >= 0 ==> nchar <= outfilelen;\nloop invariant i71: out < outfilelen ==> nchar < outfilelen ==> nchar <= outfilelen ==> nchar >= 0 ==> out >= 0 ==> out <= outfilelen ==> out >= 0 ==> out <= outfilelen ==> nchar >= 0 ==> nchar <= outfilelen ==> out >= 0 ==> out <= outfilelen ==> nchar >= 0 ==> nchar <= outfilelen ==> nchar >= 0;\nloop invariant i72: out < outfilelen ==> nchar < outfilelen ==> nchar <= outfilelen ==> nchar >= 0 ==> out >= 0 ==> out <= outfilelen ==> out >= 0 ==> out <= outfilelen ==> nchar >= 0 ==> nchar <= outfilelen ==> out >= 0 ==> out <= outfilelen ==> nchar >= 0 ==> nchar <= outfilelen ==> nchar >= 0 ==> nchar <= outfilelen;\nloop invariant i73: out < outfilelen ==> nchar < outfilelen ==> nchar <= outfilelen ==> nchar >= 0 ==> out >= 0 ==> out <= outfilelen ==> out >= 0 ==> out <= outfilelen ==> nchar >= 0 ==> nchar <= outfilelen ==> out >= 0 ==> out <= outfilelen ==> nchar >= 0 ==> nchar <= outfilelen ==> nchar >= 0 ==> nchar <= outfilelen ==> nchar >= 0 ==> nchar <= outfilelen;\nloop invariant i74: out == 0 ==> nchar == 0;\nloop invariant i75: out == 0 ==> nchar == 0 ==> nchar < outfilelen;\nloop invariant i76: out == 0 ==> nchar == 0 ==> nchar < outfilelen ==> nchar == 0;\nloop invariant i77: out == 0 ==> nchar == 0 ==> nchar < outfilelen ==> nchar == 0 ==> nchar == 0;\nloop invariant i78: out == 0 ==> nchar == 0 ==> nchar < outfilelen ==> nchar == 0 ==> nchar == 0 ==> nchar == 0;\nloop invariant i79: out == 0 ==> nchar == 0 ==> nchar < outfilelen ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0;\nloop invariant i80: out == 0 ==> nchar == 0 ==> nchar < outfilelen ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0;\nloop invariant i81: out == 0 ==> nchar == 0 ==> nchar < outfilelen ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0;\nloop invariant i82: out == 0 ==> nchar == 0 ==> nchar < outfilelen ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0;\nloop invariant i83: out == 0 ==> nchar == 0 ==> nchar < outfilelen ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0;\nloop invariant i84: out == 0 ==> nchar == 0 ==> nchar < outfilelen ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0;\nloop invariant i85: out == 0 ==> nchar == 0 ==> nchar < outfilelen ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0;\nloop invariant i86: out == 0 ==> nchar == 0 ==> nchar < outfilelen ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0;\nloop invariant i87: out == 0 ==> nchar == 0 ==> nchar < outfilelen ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0;\nloop invariant i88: out == 0 ==> nchar == 0 ==> nchar < outfilelen ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0;\nloop invariant i89: out == 0 ==> nchar == 0 ==> nchar < outfilelen ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0;\nloop invariant i90: out <= nchar;\nloop invariant i91: out >= 0;\nloop invariant i92: nchar >= 0;\nloop invariant i93: nchar == 0 ==> out == 0;\nloop invariant i94: nchar == 0 ==> out > 0 ==> out == 1;\nloop invariant i95: nchar > 0 ==> out == nchar;\nloop invariant i96: nchar >= 0 ==> out > 0 ==> out == nchar + 1;\nloop invariant i97: outfilelen > 0;\nloop invariant i98: nchar >= out;\n*/\nwhile(__BLAST_NONDET)\n  {\n    \n    if(__BLAST_NONDET)\n    {\n      \n      if(__BLAST_NONDET)\n\t\n\tgoto AFTERLOOP; \n\n      if(__BLAST_NONDET)\n      {\n\tout = 0;\n\tnchar = 0;\n\tgoto LOOPEND;\n      }\n      else\n      {\n\t\n\tif(__BLAST_NONDET)  goto AFTERLOOP;\n\n\tnchar++;\n\tif (nchar >= outfilelen)\n\t  goto AFTERLOOP;\n\n\t{;\n//@ assert(0<=out);\n}\n\n\t{;\n//@ assert(out<outfilelen);\n}\n\n\tout++;\n      }\n    }\n    else\n    {\n      \n      nchar++;\n      if (nchar >= outfilelen)\n\tgoto AFTERLOOP;\n\n      {;\n//@ assert(0<=out);\n}\n\n      {;\n//@ assert(out<outfilelen);\n}\n\n      out++;\n\n      if(__BLAST_NONDET) goto AFTERLOOP;\n    }\n  LOOPEND:;\n  }\n AFTERLOOP:\n\n  {;\n//@ assert(0<=out);\n}\n\n  {;\n//@ assert(out<outfilelen);\n}\n\n  out++;\n RETURN:  return 0;\n}",
        "combined_annotation_num_solver_calls": 6,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint __BLAST_NONDET;\n\nint main (void)\n{\n  int outfilelen;\n  \n  int nchar = 0;\n\n  int out = 0; \n\n  if(outfilelen > 0); else goto RETURN;\n\n  /*@\nloop invariant i1: 0 <= nchar <= outfilelen;\nloop invariant i2: 0 <= out <= outfilelen;\nloop invariant i3: nchar < outfilelen;\nloop invariant i4: out < outfilelen;\nloop invariant i5: out <= outfilelen;\nloop invariant i6: nchar <= outfilelen;\nloop invariant i7: 0 <= nchar;\nloop invariant i8: 0 <= out;\nloop invariant i9: nchar <= nchar + 1;\nloop invariant i10: out <= out + 1;\nloop invariant i11: nchar <= outfilelen - 1;\nloop invariant i12: out <= outfilelen - 1;\nloop invariant i13: nchar <= outfilelen - 1 ==> 0 <= out;\nloop invariant i14: nchar <= outfilelen - 1 ==> out < outfilelen;\nloop invariant i15: nchar <= outfilelen - 1 ==> out <= outfilelen;\nloop invariant i16: nchar <= outfilelen - 1 ==> out <= outfilelen - 1;\nloop invariant i17: nchar <= outfilelen - 1 ==> 0 <= nchar;\nloop invariant i18: nchar <= outfilelen - 1 ==> nchar < outfilelen;\nloop invariant i19: nchar <= outfilelen - 1 ==> nchar <= outfilelen;\nloop invariant i20: nchar <= outfilelen - 1 ==> nchar <= nchar + 1;\nloop invariant i21: nchar <= outfilelen - 1 ==> out <= out + 1;\nloop invariant i22: nchar <= outfilelen - 1 ==> nchar <= outfilelen - 1;\nloop invariant i23: out + nchar <= outfilelen;\nloop invariant i24: out == nchar ==> (out == 0 && nchar == 0 && out == 0);\nloop invariant i25: 0 <= out && out < outfilelen;\nloop invariant i26: 0 <= nchar && nchar <= outfilelen;\nloop invariant i27: nchar <= out;\nloop invariant i28: ( nchar <= outfilelen );\nloop invariant i29: ( 0 <= out < outfilelen );\nloop invariant i30: ( out == nchar || out == nchar + 1 );\nloop invariant i31: ( out < outfilelen );\n\nloop invariant i33: (nchar >= outfilelen ==> out == outfilelen);\nloop invariant i34: (nchar < outfilelen ==> out < outfilelen);\nloop invariant i35: (out >= outfilelen ==> nchar == outfilelen);\nloop invariant i36: (out < outfilelen ==> nchar < outfilelen);\nloop invariant i37: (out == 0 ==> nchar == 0);\nloop invariant i38: (out > 0 ==> nchar > 0);\nloop invariant i39: (out == outfilelen ==> nchar == outfilelen);\nloop invariant i40: 0 <= out < outfilelen;\n\n\nloop invariant i43: out + nchar == outfilelen ==> out == outfilelen;\nloop invariant i44: out + nchar == outfilelen ==> nchar == outfilelen - out;\nloop invariant i45: out + nchar == outfilelen ==> out == outfilelen - nchar;\n\nloop invariant i47: 0 <= out < outfilelen ==> 0 <= nchar <= outfilelen;\nloop invariant i48: 0 <= out < outfilelen ==> nchar <= outfilelen - 1;\nloop invariant i49: 0 <= out < outfilelen ==> __BLAST_NONDET ==> nchar == outfilelen - 1;\nloop invariant i50: 0 <= out < outfilelen ==> nchar >= 0;\nloop invariant i51: 0 <= out < outfilelen ==> __BLAST_NONDET ==> nchar >= 0;\nloop invariant i52: 0 <= out < outfilelen ==> nchar < outfilelen;\nloop invariant i53: 0 <= out < outfilelen ==> __BLAST_NONDET ==> nchar < outfilelen;\nloop invariant i54: __BLAST_NONDET ==> 0 <= out < outfilelen ==> nchar == outfilelen - 1;\n\nloop invariant i56: 0 <= out < outfilelen ==> nchar == outfilelen - 1 ==> __BLAST_NONDET ==> nchar == outfilelen - 1;\n\nloop invariant i58: out < outfilelen ==> nchar < outfilelen;\nloop invariant i59: out < outfilelen ==> nchar < outfilelen ==> nchar <= outfilelen;\nloop invariant i60: out < outfilelen ==> nchar < outfilelen ==> nchar <= outfilelen ==> nchar >= 0;\nloop invariant i61: out < outfilelen ==> nchar < outfilelen ==> nchar <= outfilelen ==> nchar >= 0 ==> out >= 0;\nloop invariant i62: out < outfilelen ==> nchar < outfilelen ==> nchar <= outfilelen ==> nchar >= 0 ==> out >= 0 ==> out <= outfilelen;\nloop invariant i63: out < outfilelen ==> nchar < outfilelen ==> nchar <= outfilelen ==> nchar >= 0 ==> out >= 0 ==> out <= outfilelen ==> out >= 0;\nloop invariant i64: out < outfilelen ==> nchar < outfilelen ==> nchar <= outfilelen ==> nchar >= 0 ==> out >= 0 ==> out <= outfilelen ==> out >= 0 ==> out <= outfilelen;\nloop invariant i65: out < outfilelen ==> nchar < outfilelen ==> nchar <= outfilelen ==> nchar >= 0 ==> out >= 0 ==> out <= outfilelen ==> out >= 0 ==> out <= outfilelen ==> nchar >= 0;\nloop invariant i66: out < outfilelen ==> nchar < outfilelen ==> nchar <= outfilelen ==> nchar >= 0 ==> out >= 0 ==> out <= outfilelen ==> out >= 0 ==> out <= outfilelen ==> nchar >= 0 ==> nchar <= outfilelen;\nloop invariant i67: out < outfilelen ==> nchar < outfilelen ==> nchar <= outfilelen ==> nchar >= 0 ==> out >= 0 ==> out <= outfilelen ==> out >= 0 ==> out <= outfilelen ==> nchar >= 0 ==> nchar <= outfilelen ==> out >= 0;\nloop invariant i68: out < outfilelen ==> nchar < outfilelen ==> nchar <= outfilelen ==> nchar >= 0 ==> out >= 0 ==> out <= outfilelen ==> out >= 0 ==> out <= outfilelen ==> nchar >= 0 ==> nchar <= outfilelen ==> out >= 0 ==> out <= outfilelen;\nloop invariant i69: out < outfilelen ==> nchar < outfilelen ==> nchar <= outfilelen ==> nchar >= 0 ==> out >= 0 ==> out <= outfilelen ==> out >= 0 ==> out <= outfilelen ==> nchar >= 0 ==> nchar <= outfilelen ==> out >= 0 ==> out <= outfilelen ==> nchar >= 0;\nloop invariant i70: out < outfilelen ==> nchar < outfilelen ==> nchar <= outfilelen ==> nchar >= 0 ==> out >= 0 ==> out <= outfilelen ==> out >= 0 ==> out <= outfilelen ==> nchar >= 0 ==> nchar <= outfilelen ==> out >= 0 ==> out <= outfilelen ==> nchar >= 0 ==> nchar <= outfilelen;\nloop invariant i71: out < outfilelen ==> nchar < outfilelen ==> nchar <= outfilelen ==> nchar >= 0 ==> out >= 0 ==> out <= outfilelen ==> out >= 0 ==> out <= outfilelen ==> nchar >= 0 ==> nchar <= outfilelen ==> out >= 0 ==> out <= outfilelen ==> nchar >= 0 ==> nchar <= outfilelen ==> nchar >= 0;\nloop invariant i72: out < outfilelen ==> nchar < outfilelen ==> nchar <= outfilelen ==> nchar >= 0 ==> out >= 0 ==> out <= outfilelen ==> out >= 0 ==> out <= outfilelen ==> nchar >= 0 ==> nchar <= outfilelen ==> out >= 0 ==> out <= outfilelen ==> nchar >= 0 ==> nchar <= outfilelen ==> nchar >= 0 ==> nchar <= outfilelen;\nloop invariant i73: out < outfilelen ==> nchar < outfilelen ==> nchar <= outfilelen ==> nchar >= 0 ==> out >= 0 ==> out <= outfilelen ==> out >= 0 ==> out <= outfilelen ==> nchar >= 0 ==> nchar <= outfilelen ==> out >= 0 ==> out <= outfilelen ==> nchar >= 0 ==> nchar <= outfilelen ==> nchar >= 0 ==> nchar <= outfilelen ==> nchar >= 0 ==> nchar <= outfilelen;\nloop invariant i74: out == 0 ==> nchar == 0;\nloop invariant i75: out == 0 ==> nchar == 0 ==> nchar < outfilelen;\nloop invariant i76: out == 0 ==> nchar == 0 ==> nchar < outfilelen ==> nchar == 0;\nloop invariant i77: out == 0 ==> nchar == 0 ==> nchar < outfilelen ==> nchar == 0 ==> nchar == 0;\nloop invariant i78: out == 0 ==> nchar == 0 ==> nchar < outfilelen ==> nchar == 0 ==> nchar == 0 ==> nchar == 0;\nloop invariant i79: out == 0 ==> nchar == 0 ==> nchar < outfilelen ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0;\nloop invariant i80: out == 0 ==> nchar == 0 ==> nchar < outfilelen ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0;\nloop invariant i81: out == 0 ==> nchar == 0 ==> nchar < outfilelen ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0;\nloop invariant i82: out == 0 ==> nchar == 0 ==> nchar < outfilelen ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0;\nloop invariant i83: out == 0 ==> nchar == 0 ==> nchar < outfilelen ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0;\nloop invariant i84: out == 0 ==> nchar == 0 ==> nchar < outfilelen ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0;\nloop invariant i85: out == 0 ==> nchar == 0 ==> nchar < outfilelen ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0;\nloop invariant i86: out == 0 ==> nchar == 0 ==> nchar < outfilelen ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0;\nloop invariant i87: out == 0 ==> nchar == 0 ==> nchar < outfilelen ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0;\nloop invariant i88: out == 0 ==> nchar == 0 ==> nchar < outfilelen ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0;\nloop invariant i89: out == 0 ==> nchar == 0 ==> nchar < outfilelen ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0 ==> nchar == 0;\nloop invariant i90: out <= nchar;\nloop invariant i91: out >= 0;\nloop invariant i92: nchar >= 0;\nloop invariant i93: nchar == 0 ==> out == 0;\nloop invariant i94: nchar == 0 ==> out > 0 ==> out == 1;\nloop invariant i95: nchar > 0 ==> out == nchar;\nloop invariant i96: nchar >= 0 ==> out > 0 ==> out == nchar + 1;\nloop invariant i97: outfilelen > 0;\nloop invariant i98: nchar >= out;\n*/\nwhile(__BLAST_NONDET)\n  {\n    \n    if(__BLAST_NONDET)\n    {\n      \n      if(__BLAST_NONDET)\n\t\n\tgoto AFTERLOOP; \n\n      if(__BLAST_NONDET)\n      {\n\tout = 0;\n\tnchar = 0;\n\tgoto LOOPEND;\n      }\n      else\n      {\n\t\n\tif(__BLAST_NONDET)  goto AFTERLOOP;\n\n\tnchar++;\n\tif (nchar >= outfilelen)\n\t  goto AFTERLOOP;\n\n\t{;\n//@ assert(0<=out);\n}\n\n\t{;\n//@ assert(out<outfilelen);\n}\n\n\tout++;\n      }\n    }\n    else\n    {\n      \n      nchar++;\n      if (nchar >= outfilelen)\n\tgoto AFTERLOOP;\n\n      {;\n//@ assert(0<=out);\n}\n\n      {;\n//@ assert(out<outfilelen);\n}\n\n      out++;\n\n      if(__BLAST_NONDET) goto AFTERLOOP;\n    }\n  LOOPEND:;\n  }\n AFTERLOOP:\n\n  {;\n//@ assert(0<=out);\n}\n\n  {;\n//@ assert(out<outfilelen);\n}\n\n  out++;\n RETURN:  return 0;\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/split.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/11.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/15.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/16.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/18.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/23.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/30.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/32.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/37.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/38.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/41.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/43.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/44.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/46.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/popl.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/05.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/07.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/37.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/39.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/gulv_simp.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/substring1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/xy10.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/const_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/multivar_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/phases_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/simple_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/simple_safe2.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/simple_safe3.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/simple_safe4.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/underapprox_safe2.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/barbr.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/barbrprime.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/bk-nat.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/bkley.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/efm.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/ex1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/lifnat.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/lifnatprime.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/lifo.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/seesaw.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/substring1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/swim.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/swim1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/ken-imp.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/rajamani_1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/sendmail-mime-fromqp.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/13.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/14.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/19.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/20.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/39.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/cav.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/19.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/gulv.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/pldi082_unbounded.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/underapprox_unsafe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/sendmail-close-angle.c"
        ],
        "skipped": [],
        "total": 168,
        "success_count": 141,
        "failure_count": 27,
        "success_rate": 0.8392857142857143
    }
}