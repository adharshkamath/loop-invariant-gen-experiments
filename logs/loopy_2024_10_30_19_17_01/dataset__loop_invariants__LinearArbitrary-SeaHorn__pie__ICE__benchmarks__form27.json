{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main()\n{\n  int x1,x2,x3,x4,x5;\n  int x1p,x2p,x3p,x4p,x5p, input;\n\n  x1 = x2 = x3 = x4 = x5 = 0;\n  input = unknown_int();\n  while(input)\n  {\n    x1p = unknown_int();\n    x2p = unknown_int();\n    x3p = unknown_int();\n    x4p = unknown_int();\n    x5p = unknown_int();\n\n    if (0 <= x1p && x1p <= x4p + 1 && x2p == x3p && (x2p <= -1 || x4p <= x2p + 2) && x5p == 0)\n    {\n\tx1 = x1p;\n\tx2 = x2p;\n\tx3 = x3p;\n\tx4 = x4p;\n\tx5 = x5p;\n    }\n    input = unknown_int();\n  }\n  {;\n//@ assert(0 <= x1 && x1 <= x4 + 1 && x2 == x3 && (x2 <= -1 || x4 <= x2 + 2) && x5 == 0);\n}\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= input <= 1;\nloop invariant 0 <= x1 <= x4 + 1;\nloop invariant x2 == x3;\nloop invariant x2 <= -1 || x4 <= x2 + 2;\nloop invariant x5 == 0;\nloop invariant 0 <= x1p <= x4p + 1;\nloop invariant x2p == x3p;\nloop invariant x2p <= -1 || x4p <= x2p + 2;\nloop invariant x5p == 0;\nloop invariant (0 <= x1p && x1p <= x4p + 1 && x2p == x3p && (x2p <= -1 || x4p <= x2p + 2) && x5p == 0) ==> (x1 == x1p && x2 == x2p && x3 == x3p && x4 == x4p && x5 == x5p);\nloop invariant (x1 == x1p && x2 == x2p && x3 == x3p && x4 == x4p && x5 == x5p) ==> (0 <= x1 <= x4 + 1 && x2 == x3 && (x2 <= -1 || x4 <= x2 + 2) && x5 == 0);\nloop invariant (x1 == x1p && x2 == x2p && x3 == x3p && x4 == x4p && x5 == x5p) ==> (x1p == x1 && x2p == x2 && x3p == x3 && x4p == x4 && x5p == x5);\nloop invariant (x1 == x1p && x2 == x2p && x3 == x3p && x4 == x4p && x5 == x5p) ==> (0 <= x1p && x1p <= x4p + 1 && x2p == x3p && (x2p <= -1 || x4p <= x2p + 2) && x5p == 0);\nloop invariant (x1 == x1p && x2 == x2p && x3 == x3p && x4 == x4p && x5 == x5p) ==> (0 <= x1p && x1p <= x4p + 1 && x2p == x3p && (x2p <= -1 || x4p <= x2p + 2) && x5p == 0);\nloop invariant (x1 == x1p && x2 == x2p && x3 == x3p && x4 == x4p && x5 == x5p) ==> (x1p == x1 && x2p == x2 && x3p == x3 && x4p == x4 && x5p == x5);\nloop invariant (x1 == x1p && x2 == x2p && x3 == x3p && x4 == x4p && x5 == x5p) ==> (0 <= x1p && x1p <= x4p + 1 && x2p == x3p && (x2p <= -1 || x4p <= x2p + 2) && x5p == 0);\nloop invariant (x1 == x1p && x2 == x2p && x3 == x3p && x4 == x4p && x5 == x5p) ==> (0 <= x1p && x1p <= x4p + 1 && x2p == x3p && (x2p <= -1 || x4p <= x2p + 2) && x5p == 0);\nloop invariant (x1 == x1p && x2 == x2p && x3 == x3p && x4 == x4p && x5 == x5p) ==> (x1p == x1 && x2p == x2 && x3p == x3 && x4p == x4 && x5p == x5);\nloop invariant (x1 == x1p && x2 == x2p && x3 == x3p && x4 == x4p && x5 == x5p) ==> (0 <= x1p && x1p <= x4p + 1 && x2p == x3p && (x2p <= -1 || x4p <= x2p + 2) && x5p == 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x1p <= x4p + 1;\nloop invariant x2p == x3p;\nloop invariant 0 <= x5p;\nloop invariant x2p <= -1 || x4p <= x2p + 2;\nloop invariant x1p = x1;\nloop invariant x2p = x2;\nloop invariant x3p = x3;\nloop invariant x4p = x4;\nloop invariant x5p = x5;\nloop invariant input = 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x1p <= x4p + 1;\nloop invariant x2p == x3p;\nloop invariant x2p <= -1 || x4p <= x2p + 2;\nloop invariant x5p == 0;\nloop invariant x1 = x1p;\nloop invariant x2 = x2p;\nloop invariant x3 = x3p;\nloop invariant x4 = x4p;\nloop invariant x5 = x5p;\nloop invariant 0 <= x1p <= x4p + 1 ==> 0 <= x1 <= x4 + 1;\nloop invariant x2p == x3p ==> x2 == x3;\nloop invariant x2p <= -1 || x4p <= x2p + 2 ==> x2 <= -1 || x4 <= x2 + 2;\nloop invariant x5p == 0 ==> x5 == 0;\nloop invariant x1p = x1 ==> x1p = x1 && x2p = x2 && x3p = x3 && x4p = x4 && x5p = x5;\nloop invariant x2p = x2 ==> x1p = x1 && x2p = x2 && x3p = x3 && x4p = x4 && x5p = x5;\nloop invariant x3p = x3 ==> x1p = x1 && x2p = x2 && x3p = x3 && x4p = x4 && x5p = x5;\nloop invariant x4p = x4 ==> x1p = x1 && x2p = x2 && x3p = x3 && x4p = x4 && x5p = x5;\nloop invariant x5p = x5 ==> x1p = x1 && x2p = x2 && x3p = x3 && x4p = x4 && x5p = x5;\nloop invariant x1p = x1 && x2p = x2 && x3p = x3 && x4p = x4 && x5p = x5 ==> 0 <= x1 <= x4 + 1;\nloop invariant x1p = x1 && x2p = x2 && x3p = x3 && x4p = x4 && x5p = x5 ==> x2 == x3;\nloop invariant x1p = x1 && x2p = x2 && x3p = x3 && x4p = x4 && x5p = x5 ==> x2 <= -1 || x4 <= x2 + 2;\nloop invariant x1p = x1 && x2p = x2 && x3p = x3 && x4p = x4 && x5p = x5 ==> x5 == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x1 <= x4 + 1;\nloop invariant x2 == x3;\nloop invariant x2 <= -1 ==> x4 <= x2 + 2;\nloop invariant x5 == 0;\nloop invariant 0 <= x1p <= x4 + 1;\nloop invariant x2p == x3p;\nloop invariant x2p <= -1 ==> x4p <= x2p + 2;\nloop invariant x5p == 0;\nloop invariant input == 1 ==> 0 <= x1 <= x4 + 1;\nloop invariant input == 1 ==> x2 == x3;\nloop invariant input == 1 ==> x2 <= -1 ==> x4 <= x2 + 2;\nloop invariant input == 1 ==> x5 == 0;\nloop invariant input == 1 ==> 0 <= x1p <= x4 + 1;\nloop invariant input == 1 ==> x2p == x3p;\nloop invariant input == 1 ==> x2p <= -1 ==> x4p <= x2p + 2;\nloop invariant input == 1 ==> x5p == 0;\nloop invariant input == 0 ==> 0 <= x1 <= x4 + 1;\nloop invariant input == 0 ==> x2 == x3;\nloop invariant input == 0 ==> x2 <= -1 ==> x4 <= x2 + 2;\nloop invariant input == 0 ==> x5 == 0;\nloop invariant input == 0 ==> 0 <= x1p <= x4 + 1;\nloop invariant input == 0 ==> x2p == x3p;\nloop invariant input == 0 ==> x2p <= -1 ==> x4p <= x2p + 2;\nloop invariant input == 0 ==> x5p == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x1 <= x4 + 1 && x2 == x3 && (x2 <= -1 || x4 <= x2 + 2) && x5 == 0;\nloop invariant 0 <= x1p <= x4p + 1 && x2p == x3p && (x2p <= -1 || x4p <= x2p + 2) && x5p == 0;\nloop invariant x1p >= x1 && x2p >= x2 && x3p >= x3 && x4p >= x4 && x5p >= x5;\nloop invariant x1 <= x4p + 1 && x2 == x3p && (x2 <= -1 || x4p <= x2 + 2) && x5 == 0;\nloop invariant x1 <= x4p + 1 && x2 == x3p && (x2 <= -1 || x4p <= x2 + 2) && x5 == 0;\nloop invariant x1 <= x4p + 1 && x2 == x3p && (x2 <= -1 || x4p <= x2 + 2) && x5 == 0;\nloop invariant x1 <= x4p + 1 && x2 == x3p && (x2 <= -1 || x4p <= x2 + 2) && x5 == 0;\nloop invariant x1 <= x4p + 1 && x2 == x3p && (x2 <= -1 || x4p <= x2 + 2) && x5 == 0;\nloop invariant x1 <= x4p + 1 && x2 == x3p && (x2 <= -1 || x4p <= x2 + 2) && x5 == 0;\nloop invariant x1 <= x4p + 1 && x2 == x3p && (x2 <= -1 || x4p <= x2 + 2) && x5 == 0;\nloop invariant x1 <= x4p + 1 && x2 == x3p && (x2 <= -1 || x4p <= x2 + 2) && x5 == 0;\nloop invariant x1 <= x4p + 1 && x2 == x3p && (x2 <= -1 || x4p <= x2 + 2) && x5 == 0;\nloop invariant x1 <= x4p + 1 && x2 == x3p && (x2 <= -1 || x4p <= x2 + 2) && x5 == 0;\nloop invariant x1 <= x4p + 1 && x2 == x3p && (x2 <= -1 || x4p <= x2 + 2) && x5 == 0;\nloop invariant x1 <= x4p + 1 && x2 == x3p && (x2 <= -1 || x4p <= x2 + 2) && x5 == 0;\nloop invariant x1 <= x4p + 1 && x2 == x3p && (x2 <= -1 || x4p <= x2 + 2) && x5 == 0;\nloop invariant x1 <= x4p + 1 && x2 == x3p && (x2 <= -1 || x4p <= x2 + 2) && x5 == 0;\nloop invariant x1 <= x4p + 1 && x2 == x3p && (x2 <= -1 || x4p <= x2 + 2) && x5 == 0;\nloop invariant x1 <= x4p + 1 && x2 == x3p && (x2 <= -1 || x4p <= x2 + 2) && x5 == 0;\nloop invariant x1 <= x4p + 1 && x2 == x3p && (x2 <= -1 || x4p <= x2 + 2) && x5 == 0;\nloop invariant x1 <= x4p + 1 && x2 == x3p && (x2 <= -1 || x4p <= x2 + 2) && x5 == 0;\nloop invariant x1 <= x4p + 1 && x2 == x3p && (x2 <= -1 || x4p <= x2 + 2) && x5 == 0;\nloop invariant x1 <= x4p + 1 && x2 == x3p && (x2 <= -1 || x4p <= x2 + 2) && x5 == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x1 <= x4 + 1;\nloop invariant x2 == x3;\nloop invariant x2 <= -1 ==> x4 <= x2 + 2;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x1 <= x4 + 1;\nloop invariant x2 == x3;\nloop invariant x2 <= -1 ==> x4 <= x2 + 2;\nloop invariant x5 == 0;\nloop invariant x1p == x1;\nloop invariant x2p == x2;\nloop invariant x3p == x3;\nloop invariant x4p == x4;\nloop invariant x5p == x5;\nloop invariant x1p <= x4p + 1;\nloop invariant x2p == x3p;\nloop invariant (x2p <= -1 ==> x4p <= x2p + 2);\nloop invariant x5p == 0;\nloop invariant x1p == x1;\nloop invariant x2p == x2;\nloop invariant x3p == x3;\nloop invariant x4p == x4;\nloop invariant x5p == x5;\nloop invariant x1p <= x4p + 1;\nloop invariant x2p == x3p;\nloop invariant (x2p <= -1 ==> x4p <= x2p + 2);\nloop invariant x5p == 0;\nloop invariant x1p == x1;\nloop invariant x2p == x2;\nloop invariant x3p == x3;\nloop invariant x4p == x4;\nloop invariant x5p == x5;\nloop invariant x1p <= x4p + 1;\nloop invariant x2p == x3p;\nloop invariant (x2p <= -1 ==> x4p <= x2p + 2);\nloop invariant x5p == 0;\nloop invariant x1p == x1;\nloop invariant x2p == x2;\nloop invariant x3p == x3;\nloop invariant x4p == x4;\nloop invariant x5p == x5;\nloop invariant x1p <= x4p + 1;\nloop invariant x2p == x3p;\nloop invariant (x2p <= -1 ==> x4p <= x2p + 2);\nloop invariant x5p == 0;\nloop invariant x1p == x1;\nloop invariant x2p == x2;\nloop invariant x3p == x3;\nloop invariant x4p == x4;\nloop invariant x5p == x5;\nloop invariant x1p <= x4p + 1;\nloop invariant x2p == x3p;\nloop invariant (x2p <= -1 ==> x4p <= x2p + 2);\nloop invariant x5p == 0;\nloop invariant x1p == x1;\nloop invariant x2p == x2;\nloop invariant x3p == x3;\nloop invariant x4p == x4;\nloop invariant x5p == x5;\nloop invariant x1p <= x4p + 1;\nloop invariant x2p == x3p;\nloop invariant (x2p <= -1 ==> x4p <= x2p + 2);\nloop invariant x5p == 0;\nloop invariant x1p == x1;\nloop invariant x2p == x2;\nloop invariant x3p == x3;\nloop invariant x4p == x4;\nloop invariant x5p == x5;\nloop invariant x1p <= x4p + 1;\nloop invariant x2p == x3p;\nloop invariant (x2p <= -1 ==> x4p <= x2p + 2);\nloop invariant x5p == 0;\nloop invariant x1p == x1;\nloop invariant x2p == x2;\nloop invariant x3p == x3;\nloop invariant x4p == x4;\nloop invariant x5p == x5;\nloop invariant x1p <= x4p + 1;\nloop invariant x2p == x3p;\nloop invariant (x2p <= -1 ==> x4p <= x2p + 2);\nloop invariant x5p == 0;\nloop invariant x1p == x1;\nloop invariant x2p == x2;\nloop invariant x3p == x3;\nloop invariant x4p == x4;\nloop invariant x5p == x5;\nloop invariant x1p <= x4p + 1;\nloop invariant x2p == x3p;\nloop invariant (x2p <= -1 ==> x4p <= x2p + 2);\nloop invariant x5p == 0;\nloop invariant x1p == x1;\nloop invariant x2p == x2;\nloop invariant x3p == x3;\nloop invariant x4p == x4;\nloop invariant x5p == x5;\nloop invariant x1p <= x4p + 1;\nloop invariant x2p == x3p;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x1p <= x4p + 1;\nloop invariant x2p == x3p;\nloop invariant x2p <= -1 || x4p <= x2p + 2;\nloop invariant x5p == 0;\nloop invariant x1 == x1p;\nloop invariant x2 == x2p;\nloop invariant x3 == x3p;\nloop invariant x4 == x4p;\nloop invariant x5 == x5p;\nloop invariant 0 <= x1 <= x4 + 1;\nloop invariant x2 == x3;\nloop invariant x2 <= -1 || x4 <= x2 + 2;\nloop invariant x5 == 0;\nloop invariant input == unknown_int();\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x1p <= x4p + 1;\nloop invariant x2p == x3p;\nloop invariant (x2p <= -1 || x4p <= x2p + 2);\nloop invariant x5p == 0;\nloop invariant 0 <= x1 <= x4 + 1;\nloop invariant x2 == x3;\nloop invariant x2 <= -1 || x4 <= x2 + 2;\nloop invariant x5 == 0;\nloop invariant input == 0;\nloop invariant x1 == 0;\nloop invariant x2 == 0;\nloop invariant x3 == 0;\nloop invariant x4 == 0;\nloop invariant x5 == 0;\nloop invariant input == unknown_int();\nloop invariant x1 == unknown_int();\nloop invariant x2 == unknown_int();\nloop invariant x3 == unknown_int();\nloop invariant x4 == unknown_int();\nloop invariant x5 == unknown_int();\nloop invariant x1p == unknown_int();\nloop invariant x2p == unknown_int();\nloop invariant x3p == unknown_int();\nloop invariant x4p == unknown_int();\nloop invariant x5p == unknown_int();\nloop invariant x1 == x1p;\nloop invariant x2 == x2p;\nloop invariant x3 == x3p;\nloop invariant x4 == x4p;\nloop invariant x5 == x5p;\nloop invariant x1 <= x4p + 1;\nloop invariant x2 <= x3p;\nloop invariant x3 <= x3p;\nloop invariant x4 <= x4p + 1;\nloop invariant x5 <= x5p;\nloop invariant x1 <= x4 + 1;\nloop invariant x2 <= x3;\nloop invariant x3 <= x3;\nloop invariant x4 <= x4 + 1;\nloop invariant x5 <= x5;\nloop invariant x1p <= x4p + 1;\nloop invariant x2p <= x3p;\nloop invariant x3p <= x3p;\nloop invariant x4p <= x4p + 1;\nloop invariant x5p <= x5p;\nloop invariant x1 <= x4 + 1;\nloop invariant x2 <= x3;\nloop invariant x3 <= x3;\nloop invariant x4 <= x4 + 1;\nloop invariant x5 <= x5;\nloop invariant x1p <= x4p + 1;\nloop invariant x2p <= x3p;\nloop invariant x3p <= x3p;\nloop invariant x4p <= x4p + 1;\nloop invariant x5p <= x5p;\nloop invariant x1 <= x4 + 1;\nloop invariant x2 <= x3;\nloop invariant x3 <= x3;\nloop invariant x4 <= x4 + 1;\nloop invariant x5 <= x5;\nloop invariant x1p <= x4p + 1;\nloop invariant x2p <= x3p;\nloop invariant x3p <= x3p;\nloop invariant x4p <= x4p + 1;\nloop invariant x5p <= x5p;\nloop invariant x1 <= x4 + 1;\nloop invariant x2 <= x3;\nloop invariant x3 <= x3;\nloop invariant x4 <= x4 + 1;\nloop invariant x5 <= x5;\nloop invariant x1p <= x4p + 1;\nloop invariant x2p <= x3p;\nloop invariant x3p <= x3p;\nloop invariant x4p <= x4p + 1;\nloop invariant x5p <= x5p;\nloop invariant x1 <= x4 + 1;\nloop invariant x2 <= x3;\nloop invariant x3 <= x3;\nloop invariant x4 <= x4 + 1;\nloop invariant x5 <= x5;\nloop invariant x1p <= x4p + 1;\nloop invariant x2p <= x3p;\nloop invariant x3p <= x3p;\nloop invariant x4p <= x4p + 1;\nloop invariant x5p <= x5p;\nloop invariant x1 <= x4 + 1;\nloop invariant x2 <= x3;\nloop invariant x3 <= x3;\nloop invariant x4 <= x4 + 1;\nloop invariant x5 <= x5;\nloop invariant x1p <= x4p + 1;\nloop invariant x2p <= x3p;\nloop invariant x3p <= x3p;\nloop invariant x4p <= x4p + 1;\nloop invariant x5p <= x5p;\nloop invariant x1 <= x4 + 1;\nloop invariant x2 <= x3;\nloop invariant x3 <= x3;\nloop invariant x4 <= x4 + 1;\nloop invariant x5 <= x5;\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x1 <= x4 + 1;\nloop invariant x2 == x3;\nloop invariant x2 <= -1 ==> x4 <= x2 + 2;\nloop invariant x5 == 0;\nloop invariant x1p == x1;\nloop invariant x2p == x2;\nloop invariant x3p == x3;\nloop invariant x4p == x4;\nloop invariant x5p == x5;\nloop invariant x4p == x4 + 1;\nloop invariant x3p == x3 + 1;\nloop invariant x2p == x2 + 1;\nloop invariant x1p == x1 + 1;\nloop invariant x5p == x5;\nloop invariant x5p == x5 + 1;\nloop invariant x1p == x1 + x4 + 1;\nloop invariant x2p == x2 + x4 + 1;\nloop invariant x3p == x3 + x4 + 1;\nloop invariant x4p == x4 + x4 + 1;\nloop invariant x5p == x5 + x4 + 1;\nloop invariant x1p == x1 + x4 + 1;\nloop invariant x2p == x2 + x4 + 1;\nloop invariant x3p == x3 + x4 + 1;\nloop invariant x4p == x4 + x4 + 1;\nloop invariant x5p == x5 + x4 + 1;\nloop invariant x1p == x1 + x4 + 1;\nloop invariant x2p == x2 + x4 + 1;\nloop invariant x3p == x3 + x4 + 1;\nloop invariant x4p == x4 + x4 + 1;\nloop invariant x5p == x5 + x4 + 1;\nloop invariant x1p == x1 + x4 + 1;\nloop invariant x2p == x2 + x4 + 1;\nloop invariant x3p == x3 + x4 + 1;\nloop invariant x4p == x4 + x4 + 1;\nloop invariant x5p == x5 + x4 + 1;\nloop invariant x1p == x1 + x4 + 1;\nloop invariant x2p == x2 + x4 + 1;\nloop invariant x3p == x3 + x4 + 1;\nloop invariant x4p == x4 + x4 + 1;\nloop invariant x5p == x5 + x4 + 1;\nloop invariant x1p == x1 + x4 + 1;\nloop invariant x2p == x2 + x4 + 1;\nloop invariant x3p == x3 + x4 + 1;\nloop invariant x4p == x4 + x4 + 1;\nloop invariant x5p == x5 + x4 + 1;\nloop invariant x1p == x1 + x4 + 1;\nloop invariant x2p == x2 + x4 + 1;\nloop invariant x3p == x3 + x4 + 1;\nloop invariant x4p == x4 + x4 + 1;\nloop invariant x5p == x5 + x4 + 1;\nloop invariant x1p == x1 + x4 + 1;\nloop invariant x2p == x2 + x4 + 1;\nloop invariant x3p == x3 + x4 + 1;\nloop invariant x4p == x4 + x4 + 1;\nloop invariant x5p == x5 + x4 + 1;\nloop invariant x1p == x1 + x4 + 1;\nloop invariant x2p == x2 + x4 + 1;\nloop invariant x3p == x3 + x4 + 1;\nloop invariant x4p == x4 + x4 + 1;\nloop invariant x5p == x5 + x4 + 1;\nloop invariant x1p == x1 + x4 + 1;\nloop invariant x2p == x2 + x4 + 1;\nloop invariant x3p == x3 + x4 + 1;\nloop invariant x4p == x4 + x4 + 1;\nloop invariant x5p == x5 + x4 + 1;\nloop invariant x1p == x1 + x4 + 1;\nloop invariant x2p == x2 + x4 + 1;\nloop invariant x3p == x3 + x4 + 1;\nloop invariant x4p == x4 + x4 + 1;\nloop invariant x5p == x5 + x4 + 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x1 <= x4 + 1;\nloop invariant x2 == x3;\nloop invariant -2 <= x2 <= x4;\nloop invariant x5 == 0;\nloop invariant 0 <= input <= 1;\nloop invariant 0 <= x1p <= x4 + 1;\nloop invariant x2p == x3p;\nloop invariant -2 <= x2p <= x4;\nloop invariant x5p == 0;\nloop invariant 0 <= input <= 1;\nloop invariant x1p == x1;\nloop invariant x2p == x2;\nloop invariant x3p == x3;\nloop invariant x4p == x4;\nloop invariant x5p == x5;\nloop invariant input == 0;\nloop invariant x1 == x1;\nloop invariant x2 == x2;\nloop invariant x3 == x3;\nloop invariant x4 == x4;\nloop invariant x5 == x5;\nloop invariant input == 0;\nloop invariant x1 == x1;\nloop invariant x2 == x2;\nloop invariant x3 == x3;\nloop invariant x4 == x4;\nloop invariant x5 == x5;\nloop invariant input == 0;\nloop invariant x1 == x1;\nloop invariant x2 == x2;\nloop invariant x3 == x3;\nloop invariant x4 == x4;\nloop invariant x5 == x5;\nloop invariant input == 0;\nloop invariant x1 == x1;\nloop invariant x2 == x2;\nloop invariant x3 == x3;\nloop invariant x4 == x4;\nloop invariant x5 == x5;\nloop invariant input == 0;\nloop invariant x1 == x1;\nloop invariant x2 == x2;\nloop invariant x3 == x3;\nloop invariant x4 == x4;\nloop invariant x5 == x5;\nloop invariant input == 0;\nloop invariant x1 == x1;\nloop invariant x2 == x2;\nloop invariant x3 == x3;\nloop invariant x4 == x4;\nloop invariant x5 == x5;\nloop invariant input == 0;\nloop invariant x1 == x1;\nloop invariant x2 == x2;\nloop invariant x3 == x3;\nloop invariant x4 == x4;\nloop invariant x5 == x5;\nloop invariant input == 0;\nloop invariant x1 == x1;\nloop invariant x2 == x2;\nloop invariant x3 == x3;\nloop invariant x4 == x4;\nloop invariant x5 == x5;\nloop invariant input == 0;\nloop invariant x1 == x1;\nloop invariant x2 == x2;\nloop invariant x3 == x3;\nloop invariant x4 == x4;\nloop invariant x5 == x5;\nloop invariant input == 0;\nloop invariant x1 == x1;\nloop invariant x2 == x2;\nloop invariant x3 == x3;\nloop invariant x4 == x4;\nloop invariant x5 == x5;\nloop invariant input == 0;\nloop invariant x1 == x1;\nloop invariant x2 == x2;\nloop invariant x3 == x3;\nloop invariant x4 == x4;\nloop invariant x5 == x5;\nloop invariant input == 0;\nloop invariant x1 == x1;\nloop invariant x2 == x2;\nloop invariant x3 == x3;\nloop invariant x4 == x4;\nloop invariant x5 == x5;\nloop invariant input == 0;\nloop invariant x1 == x1;\nloop invariant x2 == x2;\nloop invariant x3 == x3;\nloop invariant x4 == x4;\nloop invariant x5 == x5;\nloop invariant input == 0;\nloop invariant x1 == x1;\nloop invariant x2 == x2;\nloop invariant x3 == x3;\nloop invariant x4 == x4;\nloop invariant x5 == x5;\nloop invariant input == 0;\nloop invariant x1 == x1;\nloop invariant x2 == x2;\nloop invariant x3 == x3;\nloop invariant x4 == x4;\nloop invariant x5 == x5;\nloop invariant input == 0;\nloop invariant x1 == x1;\nloop invariant x2 == x2;\nloop invariant x3 == x3;\nloop invariant x4 == x4;\nloop invariant x5 == x5;\nloop invariant input == 0;\nloop invariant x1 == x1;\nloop invariant x2 == x2;\nloop invariant x3 == x3;\nloop invariant x4 == x4;\nloop invariant x5 == x5;\nloop invariant input == 0;\nloop invariant x1 == x1;\nloop invariant x2 == x2;\nloop invariant x3 == x3;\nloop invariant x4 == x4;\nloop invariant x5 == x5;\n*/\n```",
            "```\n/*@\nloop invariant x1p >= 0 && x1p <= x4p + 1 && x2p == x3p && (x2p <= -1 || x4p <= x2p + 2) && x5p == 0 && input == 1;\nloop invariant x1 == x1p && x2 == x2p && x3 == x3p && x4 == x4p && x5 == x5p && input == 0;\nloop invariant x1 >= 0 && x1 <= x4 + 1 && x2 == x3 && (x2 <= -1 || x4 <= x2 + 2) && x5 == 0 && input == 0;\nloop invariant x1p >= 0 && x1p <= x4p + 1 && x2p == x3p && (x2p <= -1 || x4p <= x2p + 2) && x5p == 0 && input == 1;\nloop invariant x1 >= 0 && x1 <= x4 + 1 && x2 == x3 && (x2 <= -1 || x4 <= x2 + 2) && x5 == 0 && input == 0;\nloop invariant x1 >= 0 && x1 <= x4 + 1 && x2 == x3 && (x2 <= -1 || x4 <= x2 + 2) && x5 == 0 && input == 0;\nloop invariant x1 >= 0 && x1 <= x4 + 1 && x2 == x3 && (x2 <= -1 || x4 <= x2 + 2) && x5 == 0 && input == 0;\nloop invariant x1 >= 0 && x1 <= x4 + 1 && x2 == x3 && (x2 <= -1 || x4 <= x2 + 2) && x5 == 0 && input == 0;\nloop invariant x1 >= 0 && x1 <= x4 + 1 && x2 == x3 && (x2 <= -1 || x4 <= x2 + 2) && x5 == 0 && input == 0;\nloop invariant x1 >= 0 && x1 <= x4 + 1 && x2 == x3 && (x2 <= -1 || x4 <= x2 + 2) && x5 == 0 && input == 0;\nloop invariant x1 >= 0 && x1 <= x4 + 1 && x2 == x3 && (x2 <= -1 || x4 <= x2 + 2) && x5 == 0 && input == 0;\nloop invariant x1 >= 0 && x1 <= x4 + 1 && x2 == x3 && (x2 <= -1 || x4 <= x2 + 2) && x5 == 0 && input == 0;\nloop invariant x1 >= 0 && x1 <= x4 + 1 && x2 == x3 && (x2 <= -1 || x4 <= x2 + 2) && x5 == 0 && input == 0;\nloop invariant x1 >= 0 && x1 <= x4 + 1 && x2 == x3 && (x2 <= -1 || x4 <= x2 + 2) && x5 == 0 && input == 0;\nloop invariant x1 >= 0 && x1 <= x4 + 1 && x2 == x3 && (x2 <= -1 || x4 <= x2 + 2) && x5 == 0 && input == 0;\nloop invariant x1 >= 0 && x1 <= x4 + 1 && x2 == x3 && (x2 <= -1 || x4 <= x2 + 2) && x5 == 0 && input == 0;\nloop invariant x1 >= 0 && x1 <= x4 + 1 && x2 == x3 && (x2 <= -1 || x4 <= x2 + 2) && x5 == 0 && input == 0;\nloop invariant x1 >= 0 && x1 <= x4 + 1 && x2 == x3 && (x2 <= -1 || x4 <= x2 + 2) && x5 == 0 && input == 0;\nloop invariant x1 >= 0 && x1 <= x4 + 1 && x2 == x3 && (x2 <= -1 || x4 <= x2 + 2) && x5 == 0 && input == 0;\n*/\n```",
            "```\n/*@\nloop invariant ((input > 0) ==> (x1 == x1p && x2 == x2p && x3 == x3p && x4 == x4p && x5 == x5p));\nloop invariant ((input > 0) ==> (x1p <= x4p + 1 && x1p >= 0));\nloop invariant ((input > 0) ==> (x2p == x3p));\nloop invariant ((input > 0) ==> (x2p <= -1 || x4p <= x2p + 2));\nloop invariant ((input > 0) ==> (x5p == 0));\nloop invariant ((input > 0) ==> (x1 == x1p && x2 == x2p && x3 == x3p && x4 == x4p && x5 == x5p));\nloop invariant ((input > 0) ==> (x2p <= -1 || x4p <= x2p + 2));\nloop invariant ((input > 0) ==> (x5p == 0));\nloop invariant ((input > 0) ==> (x2p <= -1 || x4p <= x2p + 2));\nloop invariant ((input > 0) ==> (x2p <= -1 || x4p <= x2p + 2));\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x1 <= x4 + 1;\nloop invariant x2 == x3;\nloop invariant (x2 <= -1 ==> x4 <= x2 + 2);\nloop invariant 0 <= x1 <= x4 + 1;\nloop invariant x2 == x3;\nloop invariant (x2 <= -1 ==> x4 <= x2 + 2);\nloop invariant x5 == 0;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= input <= 1;\nloop invariant 0 <= x1 <= x4 + 1;\nloop invariant x2 == x3;\nloop invariant x2 <= -1 || x4 <= x2 + 2;\nloop invariant x5 == 0;\nloop invariant 0 <= x1p <= x4p + 1;\nloop invariant x2p == x3p;\nloop invariant x2p <= -1 || x4p <= x2p + 2;\nloop invariant x5p == 0;\nloop invariant (0 <= x1p && x1p <= x4p + 1 && x2p == x3p && (x2p <= -1 || x4p <= x2p + 2) && x5p == 0) ==> (x1 == x1p && x2 == x2p && x3 == x3p && x4 == x4p && x5 == x5p);\nloop invariant (x1 == x1p && x2 == x2p && x3 == x3p && x4 == x4p && x5 == x5p) ==> (0 <= x1 <= x4 + 1 && x2 == x3 && (x2 <= -1 || x4 <= x2 + 2) && x5 == 0);\nloop invariant (x1 == x1p && x2 == x2p && x3 == x3p && x4 == x4p && x5 == x5p) ==> (x1p == x1 && x2p == x2 && x3p == x3 && x4p == x4 && x5p == x5);\nloop invariant (x1 == x1p && x2 == x2p && x3 == x3p && x4 == x4p && x5 == x5p) ==> (0 <= x1p && x1p <= x4p + 1 && x2p == x3p && (x2p <= -1 || x4p <= x2p + 2) && x5p == 0);\nloop invariant (x1 == x1p && x2 == x2p && x3 == x3p && x4 == x4p && x5 == x5p) ==> (0 <= x1p && x1p <= x4p + 1 && x2p == x3p && (x2p <= -1 || x4p <= x2p + 2) && x5p == 0);\nloop invariant (x1 == x1p && x2 == x2p && x3 == x3p && x4 == x4p && x5 == x5p) ==> (x1p == x1 && x2p == x2 && x3p == x3 && x4p == x4 && x5p == x5);\nloop invariant (x1 == x1p && x2 == x2p && x3 == x3p && x4 == x4p && x5 == x5p) ==> (0 <= x1p && x1p <= x4p + 1 && x2p == x3p && (x2p <= -1 || x4p <= x2p + 2) && x5p == 0);\nloop invariant (x1 == x1p && x2 == x2p && x3 == x3p && x4 == x4p && x5 == x5p) ==> (0 <= x1p && x1p <= x4p + 1 && x2p == x3p && (x2p <= -1 || x4p <= x2p + 2) && x5p == 0);\nloop invariant (x1 == x1p && x2 == x2p && x3 == x3p && x4 == x4p && x5 == x5p) ==> (x1p == x1 && x2p == x2 && x3p == x3 && x4p == x4 && x5p == x5);\nloop invariant (x1 == x1p && x2 == x2p && x3 == x3p && x4 == x4p && x5 == x5p) ==> (0 <= x1p && x1p <= x4p + 1 && x2p == x3p && (x2p <= -1 || x4p <= x2p + 2) && x5p == 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main()\n{\n  int x1,x2,x3,x4,x5;\n  int x1p,x2p,x3p,x4p,x5p, input;\n\n  x1 = x2 = x3 = x4 = x5 = 0;\n  input = unknown_int();\n  /*@\n\nloop invariant i2: 0 <= x1 <= x4 + 1;\nloop invariant i3: x2 == x3;\nloop invariant i4: x2 <= -1 || x4 <= x2 + 2;\nloop invariant i5: x5 == 0;\n\n\n\n\n\nloop invariant i11: (x1 == x1p && x2 == x2p && x3 == x3p && x4 == x4p && x5 == x5p) ==> (0 <= x1 <= x4 + 1 && x2 == x3 && (x2 <= -1 || x4 <= x2 + 2) && x5 == 0);\nloop invariant i12: (x1 == x1p && x2 == x2p && x3 == x3p && x4 == x4p && x5 == x5p) ==> (x1p == x1 && x2p == x2 && x3p == x3 && x4p == x4 && x5p == x5);\nloop invariant i13: (x1 == x1p && x2 == x2p && x3 == x3p && x4 == x4p && x5 == x5p) ==> (0 <= x1p && x1p <= x4p + 1 && x2p == x3p && (x2p <= -1 || x4p <= x2p + 2) && x5p == 0);\n*/\nwhile(input)\n  {\n    x1p = unknown_int();\n    x2p = unknown_int();\n    x3p = unknown_int();\n    x4p = unknown_int();\n    x5p = unknown_int();\n\n    if (0 <= x1p && x1p <= x4p + 1 && x2p == x3p && (x2p <= -1 || x4p <= x2p + 2) && x5p == 0)\n    {\n\tx1 = x1p;\n\tx2 = x2p;\n\tx3 = x3p;\n\tx4 = x4p;\n\tx5 = x5p;\n    }\n    input = unknown_int();\n  }\n  {;\n//@ assert(0 <= x1 && x1 <= x4 + 1 && x2 == x3 && (x2 <= -1 || x4 <= x2 + 2) && x5 == 0);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant 0 <= x1p <= x4p + 1;\nloop invariant x2p == x3p;\nloop invariant 0 <= x5p;\nloop invariant x2p <= -1 || x4p <= x2p + 2;\nloop invariant x1p = x1;\nloop invariant x2p = x2;\nloop invariant x3p = x3;\nloop invariant x4p = x4;\nloop invariant x5p = x5;\nloop invariant input = 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main()\n{\n  int x1,x2,x3,x4,x5;\n  int x1p,x2p,x3p,x4p,x5p, input;\n\n  x1 = x2 = x3 = x4 = x5 = 0;\n  input = unknown_int();\n  /*@\n\n\n\n\n\n\n\n\n\n\n*/\nwhile(input)\n  {\n    x1p = unknown_int();\n    x2p = unknown_int();\n    x3p = unknown_int();\n    x4p = unknown_int();\n    x5p = unknown_int();\n\n    if (0 <= x1p && x1p <= x4p + 1 && x2p == x3p && (x2p <= -1 || x4p <= x2p + 2) && x5p == 0)\n    {\n\tx1 = x1p;\n\tx2 = x2p;\n\tx3 = x3p;\n\tx4 = x4p;\n\tx5 = x5p;\n    }\n    input = unknown_int();\n  }\n  {;\n//@ assert(0 <= x1 && x1 <= x4 + 1 && x2 == x3 && (x2 <= -1 || x4 <= x2 + 2) && x5 == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 16,
                "annotations": "```\n/*@\nloop invariant 0 <= x1p <= x4p + 1;\nloop invariant x2p == x3p;\nloop invariant x2p <= -1 || x4p <= x2p + 2;\nloop invariant x5p == 0;\nloop invariant x1 = x1p;\nloop invariant x2 = x2p;\nloop invariant x3 = x3p;\nloop invariant x4 = x4p;\nloop invariant x5 = x5p;\nloop invariant 0 <= x1p <= x4p + 1 ==> 0 <= x1 <= x4 + 1;\nloop invariant x2p == x3p ==> x2 == x3;\nloop invariant x2p <= -1 || x4p <= x2p + 2 ==> x2 <= -1 || x4 <= x2 + 2;\nloop invariant x5p == 0 ==> x5 == 0;\nloop invariant x1p = x1 ==> x1p = x1 && x2p = x2 && x3p = x3 && x4p = x4 && x5p = x5;\nloop invariant x2p = x2 ==> x1p = x1 && x2p = x2 && x3p = x3 && x4p = x4 && x5p = x5;\nloop invariant x3p = x3 ==> x1p = x1 && x2p = x2 && x3p = x3 && x4p = x4 && x5p = x5;\nloop invariant x4p = x4 ==> x1p = x1 && x2p = x2 && x3p = x3 && x4p = x4 && x5p = x5;\nloop invariant x5p = x5 ==> x1p = x1 && x2p = x2 && x3p = x3 && x4p = x4 && x5p = x5;\nloop invariant x1p = x1 && x2p = x2 && x3p = x3 && x4p = x4 && x5p = x5 ==> 0 <= x1 <= x4 + 1;\nloop invariant x1p = x1 && x2p = x2 && x3p = x3 && x4p = x4 && x5p = x5 ==> x2 == x3;\nloop invariant x1p = x1 && x2p = x2 && x3p = x3 && x4p = x4 && x5p = x5 ==> x2 <= -1 || x4 <= x2 + 2;\nloop invariant x1p = x1 && x2p = x2 && x3p = x3 && x4p = x4 && x5p = x5 ==> x5 == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main()\n{\n  int x1,x2,x3,x4,x5;\n  int x1p,x2p,x3p,x4p,x5p, input;\n\n  x1 = x2 = x3 = x4 = x5 = 0;\n  input = unknown_int();\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile(input)\n  {\n    x1p = unknown_int();\n    x2p = unknown_int();\n    x3p = unknown_int();\n    x4p = unknown_int();\n    x5p = unknown_int();\n\n    if (0 <= x1p && x1p <= x4p + 1 && x2p == x3p && (x2p <= -1 || x4p <= x2p + 2) && x5p == 0)\n    {\n\tx1 = x1p;\n\tx2 = x2p;\n\tx3 = x3p;\n\tx4 = x4p;\n\tx5 = x5p;\n    }\n    input = unknown_int();\n  }\n  {;\n//@ assert(0 <= x1 && x1 <= x4 + 1 && x2 == x3 && (x2 <= -1 || x4 <= x2 + 2) && x5 == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x1 <= x4 + 1;\nloop invariant x2 == x3;\nloop invariant x2 <= -1 ==> x4 <= x2 + 2;\nloop invariant x5 == 0;\nloop invariant 0 <= x1p <= x4 + 1;\nloop invariant x2p == x3p;\nloop invariant x2p <= -1 ==> x4p <= x2p + 2;\nloop invariant x5p == 0;\nloop invariant input == 1 ==> 0 <= x1 <= x4 + 1;\nloop invariant input == 1 ==> x2 == x3;\nloop invariant input == 1 ==> x2 <= -1 ==> x4 <= x2 + 2;\nloop invariant input == 1 ==> x5 == 0;\nloop invariant input == 1 ==> 0 <= x1p <= x4 + 1;\nloop invariant input == 1 ==> x2p == x3p;\nloop invariant input == 1 ==> x2p <= -1 ==> x4p <= x2p + 2;\nloop invariant input == 1 ==> x5p == 0;\nloop invariant input == 0 ==> 0 <= x1 <= x4 + 1;\nloop invariant input == 0 ==> x2 == x3;\nloop invariant input == 0 ==> x2 <= -1 ==> x4 <= x2 + 2;\nloop invariant input == 0 ==> x5 == 0;\nloop invariant input == 0 ==> 0 <= x1p <= x4 + 1;\nloop invariant input == 0 ==> x2p == x3p;\nloop invariant input == 0 ==> x2p <= -1 ==> x4p <= x2p + 2;\nloop invariant input == 0 ==> x5p == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main()\n{\n  int x1,x2,x3,x4,x5;\n  int x1p,x2p,x3p,x4p,x5p, input;\n\n  x1 = x2 = x3 = x4 = x5 = 0;\n  input = unknown_int();\n  /*@\nloop invariant i1: 0 <= x1 <= x4 + 1;\nloop invariant i2: x2 == x3;\n\nloop invariant i4: x5 == 0;\n\n\n\n\nloop invariant i9: input == 1 ==> 0 <= x1 <= x4 + 1;\nloop invariant i10: input == 1 ==> x2 == x3;\n\nloop invariant i12: input == 1 ==> x5 == 0;\n\n\n\n\nloop invariant i17: input == 0 ==> 0 <= x1 <= x4 + 1;\nloop invariant i18: input == 0 ==> x2 == x3;\n\nloop invariant i20: input == 0 ==> x5 == 0;\n\n\n\n\n*/\nwhile(input)\n  {\n    x1p = unknown_int();\n    x2p = unknown_int();\n    x3p = unknown_int();\n    x4p = unknown_int();\n    x5p = unknown_int();\n\n    if (0 <= x1p && x1p <= x4p + 1 && x2p == x3p && (x2p <= -1 || x4p <= x2p + 2) && x5p == 0)\n    {\n\tx1 = x1p;\n\tx2 = x2p;\n\tx3 = x3p;\n\tx4 = x4p;\n\tx5 = x5p;\n    }\n    input = unknown_int();\n  }\n  {;\n//@ assert(0 <= x1 && x1 <= x4 + 1 && x2 == x3 && (x2 <= -1 || x4 <= x2 + 2) && x5 == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x1 <= x4 + 1 && x2 == x3 && (x2 <= -1 || x4 <= x2 + 2) && x5 == 0;\nloop invariant 0 <= x1p <= x4p + 1 && x2p == x3p && (x2p <= -1 || x4p <= x2p + 2) && x5p == 0;\nloop invariant x1p >= x1 && x2p >= x2 && x3p >= x3 && x4p >= x4 && x5p >= x5;\nloop invariant x1 <= x4p + 1 && x2 == x3p && (x2 <= -1 || x4p <= x2 + 2) && x5 == 0;\nloop invariant x1 <= x4p + 1 && x2 == x3p && (x2 <= -1 || x4p <= x2 + 2) && x5 == 0;\nloop invariant x1 <= x4p + 1 && x2 == x3p && (x2 <= -1 || x4p <= x2 + 2) && x5 == 0;\nloop invariant x1 <= x4p + 1 && x2 == x3p && (x2 <= -1 || x4p <= x2 + 2) && x5 == 0;\nloop invariant x1 <= x4p + 1 && x2 == x3p && (x2 <= -1 || x4p <= x2 + 2) && x5 == 0;\nloop invariant x1 <= x4p + 1 && x2 == x3p && (x2 <= -1 || x4p <= x2 + 2) && x5 == 0;\nloop invariant x1 <= x4p + 1 && x2 == x3p && (x2 <= -1 || x4p <= x2 + 2) && x5 == 0;\nloop invariant x1 <= x4p + 1 && x2 == x3p && (x2 <= -1 || x4p <= x2 + 2) && x5 == 0;\nloop invariant x1 <= x4p + 1 && x2 == x3p && (x2 <= -1 || x4p <= x2 + 2) && x5 == 0;\nloop invariant x1 <= x4p + 1 && x2 == x3p && (x2 <= -1 || x4p <= x2 + 2) && x5 == 0;\nloop invariant x1 <= x4p + 1 && x2 == x3p && (x2 <= -1 || x4p <= x2 + 2) && x5 == 0;\nloop invariant x1 <= x4p + 1 && x2 == x3p && (x2 <= -1 || x4p <= x2 + 2) && x5 == 0;\nloop invariant x1 <= x4p + 1 && x2 == x3p && (x2 <= -1 || x4p <= x2 + 2) && x5 == 0;\nloop invariant x1 <= x4p + 1 && x2 == x3p && (x2 <= -1 || x4p <= x2 + 2) && x5 == 0;\nloop invariant x1 <= x4p + 1 && x2 == x3p && (x2 <= -1 || x4p <= x2 + 2) && x5 == 0;\nloop invariant x1 <= x4p + 1 && x2 == x3p && (x2 <= -1 || x4p <= x2 + 2) && x5 == 0;\nloop invariant x1 <= x4p + 1 && x2 == x3p && (x2 <= -1 || x4p <= x2 + 2) && x5 == 0;\nloop invariant x1 <= x4p + 1 && x2 == x3p && (x2 <= -1 || x4p <= x2 + 2) && x5 == 0;\nloop invariant x1 <= x4p + 1 && x2 == x3p && (x2 <= -1 || x4p <= x2 + 2) && x5 == 0;\nloop invariant x1 <= x4p + 1 && x2 == x3p && (x2 <= -1 || x4p <= x2 + 2) && x5 == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main()\n{\n  int x1,x2,x3,x4,x5;\n  int x1p,x2p,x3p,x4p,x5p, input;\n\n  x1 = x2 = x3 = x4 = x5 = 0;\n  input = unknown_int();\n  /*@\nloop invariant i1: 0 <= x1 <= x4 + 1 && x2 == x3 && (x2 <= -1 || x4 <= x2 + 2) && x5 == 0;\n\n\n\n*/\nwhile(input)\n  {\n    x1p = unknown_int();\n    x2p = unknown_int();\n    x3p = unknown_int();\n    x4p = unknown_int();\n    x5p = unknown_int();\n\n    if (0 <= x1p && x1p <= x4p + 1 && x2p == x3p && (x2p <= -1 || x4p <= x2p + 2) && x5p == 0)\n    {\n\tx1 = x1p;\n\tx2 = x2p;\n\tx3 = x3p;\n\tx4 = x4p;\n\tx5 = x5p;\n    }\n    input = unknown_int();\n  }\n  {;\n//@ assert(0 <= x1 && x1 <= x4 + 1 && x2 == x3 && (x2 <= -1 || x4 <= x2 + 2) && x5 == 0);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x1 <= x4 + 1;\nloop invariant x2 == x3;\nloop invariant x2 <= -1 ==> x4 <= x2 + 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main()\n{\n  int x1,x2,x3,x4,x5;\n  int x1p,x2p,x3p,x4p,x5p, input;\n\n  x1 = x2 = x3 = x4 = x5 = 0;\n  input = unknown_int();\n  /*@\nloop invariant i1: 0 <= x1 <= x4 + 1;\nloop invariant i2: x2 == x3;\n\n*/\nwhile(input)\n  {\n    x1p = unknown_int();\n    x2p = unknown_int();\n    x3p = unknown_int();\n    x4p = unknown_int();\n    x5p = unknown_int();\n\n    if (0 <= x1p && x1p <= x4p + 1 && x2p == x3p && (x2p <= -1 || x4p <= x2p + 2) && x5p == 0)\n    {\n\tx1 = x1p;\n\tx2 = x2p;\n\tx3 = x3p;\n\tx4 = x4p;\n\tx5 = x5p;\n    }\n    input = unknown_int();\n  }\n  {;\n//@ assert(0 <= x1 && x1 <= x4 + 1 && x2 == x3 && (x2 <= -1 || x4 <= x2 + 2) && x5 == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 1 <= x1 <= x4 + 1;\nloop invariant x2 == x3;\nloop invariant x2 <= -1 ==> x4 <= x2 + 2;\nloop invariant x5 == 0;\nloop invariant x1p == x1;\nloop invariant x2p == x2;\nloop invariant x3p == x3;\nloop invariant x4p == x4;\nloop invariant x5p == x5;\nloop invariant x1p <= x4p + 1;\nloop invariant x2p == x3p;\nloop invariant (x2p <= -1 ==> x4p <= x2p + 2);\nloop invariant x5p == 0;\nloop invariant x1p == x1;\nloop invariant x2p == x2;\nloop invariant x3p == x3;\nloop invariant x4p == x4;\nloop invariant x5p == x5;\nloop invariant x1p <= x4p + 1;\nloop invariant x2p == x3p;\nloop invariant (x2p <= -1 ==> x4p <= x2p + 2);\nloop invariant x5p == 0;\nloop invariant x1p == x1;\nloop invariant x2p == x2;\nloop invariant x3p == x3;\nloop invariant x4p == x4;\nloop invariant x5p == x5;\nloop invariant x1p <= x4p + 1;\nloop invariant x2p == x3p;\nloop invariant (x2p <= -1 ==> x4p <= x2p + 2);\nloop invariant x5p == 0;\nloop invariant x1p == x1;\nloop invariant x2p == x2;\nloop invariant x3p == x3;\nloop invariant x4p == x4;\nloop invariant x5p == x5;\nloop invariant x1p <= x4p + 1;\nloop invariant x2p == x3p;\nloop invariant (x2p <= -1 ==> x4p <= x2p + 2);\nloop invariant x5p == 0;\nloop invariant x1p == x1;\nloop invariant x2p == x2;\nloop invariant x3p == x3;\nloop invariant x4p == x4;\nloop invariant x5p == x5;\nloop invariant x1p <= x4p + 1;\nloop invariant x2p == x3p;\nloop invariant (x2p <= -1 ==> x4p <= x2p + 2);\nloop invariant x5p == 0;\nloop invariant x1p == x1;\nloop invariant x2p == x2;\nloop invariant x3p == x3;\nloop invariant x4p == x4;\nloop invariant x5p == x5;\nloop invariant x1p <= x4p + 1;\nloop invariant x2p == x3p;\nloop invariant (x2p <= -1 ==> x4p <= x2p + 2);\nloop invariant x5p == 0;\nloop invariant x1p == x1;\nloop invariant x2p == x2;\nloop invariant x3p == x3;\nloop invariant x4p == x4;\nloop invariant x5p == x5;\nloop invariant x1p <= x4p + 1;\nloop invariant x2p == x3p;\nloop invariant (x2p <= -1 ==> x4p <= x2p + 2);\nloop invariant x5p == 0;\nloop invariant x1p == x1;\nloop invariant x2p == x2;\nloop invariant x3p == x3;\nloop invariant x4p == x4;\nloop invariant x5p == x5;\nloop invariant x1p <= x4p + 1;\nloop invariant x2p == x3p;\nloop invariant (x2p <= -1 ==> x4p <= x2p + 2);\nloop invariant x5p == 0;\nloop invariant x1p == x1;\nloop invariant x2p == x2;\nloop invariant x3p == x3;\nloop invariant x4p == x4;\nloop invariant x5p == x5;\nloop invariant x1p <= x4p + 1;\nloop invariant x2p == x3p;\nloop invariant (x2p <= -1 ==> x4p <= x2p + 2);\nloop invariant x5p == 0;\nloop invariant x1p == x1;\nloop invariant x2p == x2;\nloop invariant x3p == x3;\nloop invariant x4p == x4;\nloop invariant x5p == x5;\nloop invariant x1p <= x4p + 1;\nloop invariant x2p == x3p;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main()\n{\n  int x1,x2,x3,x4,x5;\n  int x1p,x2p,x3p,x4p,x5p, input;\n\n  x1 = x2 = x3 = x4 = x5 = 0;\n  input = unknown_int();\n  /*@\n\nloop invariant i2: x2 == x3;\n\nloop invariant i4: x5 == 0;\n\n\n\n\n\n\n\n\n\n*/\nwhile(input)\n  {\n    x1p = unknown_int();\n    x2p = unknown_int();\n    x3p = unknown_int();\n    x4p = unknown_int();\n    x5p = unknown_int();\n\n    if (0 <= x1p && x1p <= x4p + 1 && x2p == x3p && (x2p <= -1 || x4p <= x2p + 2) && x5p == 0)\n    {\n\tx1 = x1p;\n\tx2 = x2p;\n\tx3 = x3p;\n\tx4 = x4p;\n\tx5 = x5p;\n    }\n    input = unknown_int();\n  }\n  {;\n//@ assert(0 <= x1 && x1 <= x4 + 1 && x2 == x3 && (x2 <= -1 || x4 <= x2 + 2) && x5 == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x1p <= x4p + 1;\nloop invariant x2p == x3p;\nloop invariant x2p <= -1 || x4p <= x2p + 2;\nloop invariant x5p == 0;\nloop invariant x1 == x1p;\nloop invariant x2 == x2p;\nloop invariant x3 == x3p;\nloop invariant x4 == x4p;\nloop invariant x5 == x5p;\nloop invariant 0 <= x1 <= x4 + 1;\nloop invariant x2 == x3;\nloop invariant x2 <= -1 || x4 <= x2 + 2;\nloop invariant x5 == 0;\nloop invariant input == unknown_int();\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main()\n{\n  int x1,x2,x3,x4,x5;\n  int x1p,x2p,x3p,x4p,x5p, input;\n\n  x1 = x2 = x3 = x4 = x5 = 0;\n  input = unknown_int();\n  /*@\n\n\n\n\n\n\n\n\n\nloop invariant i10: 0 <= x1 <= x4 + 1;\nloop invariant i11: x2 == x3;\nloop invariant i12: x2 <= -1 || x4 <= x2 + 2;\nloop invariant i13: x5 == 0;\n\n*/\nwhile(input)\n  {\n    x1p = unknown_int();\n    x2p = unknown_int();\n    x3p = unknown_int();\n    x4p = unknown_int();\n    x5p = unknown_int();\n\n    if (0 <= x1p && x1p <= x4p + 1 && x2p == x3p && (x2p <= -1 || x4p <= x2p + 2) && x5p == 0)\n    {\n\tx1 = x1p;\n\tx2 = x2p;\n\tx3 = x3p;\n\tx4 = x4p;\n\tx5 = x5p;\n    }\n    input = unknown_int();\n  }\n  {;\n//@ assert(0 <= x1 && x1 <= x4 + 1 && x2 == x3 && (x2 <= -1 || x4 <= x2 + 2) && x5 == 0);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 15,
                "annotations": "```\n/*@\nloop invariant 0 <= x1p <= x4p + 1;\nloop invariant x2p == x3p;\nloop invariant (x2p <= -1 || x4p <= x2p + 2);\nloop invariant x5p == 0;\nloop invariant 0 <= x1 <= x4 + 1;\nloop invariant x2 == x3;\nloop invariant x2 <= -1 || x4 <= x2 + 2;\nloop invariant x5 == 0;\nloop invariant input == 0;\nloop invariant x1 == 0;\nloop invariant x2 == 0;\nloop invariant x3 == 0;\nloop invariant x4 == 0;\nloop invariant x5 == 0;\nloop invariant input == unknown_int();\nloop invariant x1 == unknown_int();\nloop invariant x2 == unknown_int();\nloop invariant x3 == unknown_int();\nloop invariant x4 == unknown_int();\nloop invariant x5 == unknown_int();\nloop invariant x1p == unknown_int();\nloop invariant x2p == unknown_int();\nloop invariant x3p == unknown_int();\nloop invariant x4p == unknown_int();\nloop invariant x5p == unknown_int();\nloop invariant x1 == x1p;\nloop invariant x2 == x2p;\nloop invariant x3 == x3p;\nloop invariant x4 == x4p;\nloop invariant x5 == x5p;\nloop invariant x1 <= x4p + 1;\nloop invariant x2 <= x3p;\nloop invariant x3 <= x3p;\nloop invariant x4 <= x4p + 1;\nloop invariant x5 <= x5p;\nloop invariant x1 <= x4 + 1;\nloop invariant x2 <= x3;\nloop invariant x3 <= x3;\nloop invariant x4 <= x4 + 1;\nloop invariant x5 <= x5;\nloop invariant x1p <= x4p + 1;\nloop invariant x2p <= x3p;\nloop invariant x3p <= x3p;\nloop invariant x4p <= x4p + 1;\nloop invariant x5p <= x5p;\nloop invariant x1 <= x4 + 1;\nloop invariant x2 <= x3;\nloop invariant x3 <= x3;\nloop invariant x4 <= x4 + 1;\nloop invariant x5 <= x5;\nloop invariant x1p <= x4p + 1;\nloop invariant x2p <= x3p;\nloop invariant x3p <= x3p;\nloop invariant x4p <= x4p + 1;\nloop invariant x5p <= x5p;\nloop invariant x1 <= x4 + 1;\nloop invariant x2 <= x3;\nloop invariant x3 <= x3;\nloop invariant x4 <= x4 + 1;\nloop invariant x5 <= x5;\nloop invariant x1p <= x4p + 1;\nloop invariant x2p <= x3p;\nloop invariant x3p <= x3p;\nloop invariant x4p <= x4p + 1;\nloop invariant x5p <= x5p;\nloop invariant x1 <= x4 + 1;\nloop invariant x2 <= x3;\nloop invariant x3 <= x3;\nloop invariant x4 <= x4 + 1;\nloop invariant x5 <= x5;\nloop invariant x1p <= x4p + 1;\nloop invariant x2p <= x3p;\nloop invariant x3p <= x3p;\nloop invariant x4p <= x4p + 1;\nloop invariant x5p <= x5p;\nloop invariant x1 <= x4 + 1;\nloop invariant x2 <= x3;\nloop invariant x3 <= x3;\nloop invariant x4 <= x4 + 1;\nloop invariant x5 <= x5;\nloop invariant x1p <= x4p + 1;\nloop invariant x2p <= x3p;\nloop invariant x3p <= x3p;\nloop invariant x4p <= x4p + 1;\nloop invariant x5p <= x5p;\nloop invariant x1 <= x4 + 1;\nloop invariant x2 <= x3;\nloop invariant x3 <= x3;\nloop invariant x4 <= x4 + 1;\nloop invariant x5 <= x5;\nloop invariant x1p <= x4p + 1;\nloop invariant x2p <= x3p;\nloop invariant x3p <= x3p;\nloop invariant x4p <= x4p + 1;\nloop invariant x5p <= x5p;\nloop invariant x1 <= x4 + 1;\nloop invariant x2 <= x3;\nloop invariant x3 <= x3;\nloop invariant x4 <= x4 + 1;\nloop invariant x5 <= x5;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main()\n{\n  int x1,x2,x3,x4,x5;\n  int x1p,x2p,x3p,x4p,x5p, input;\n\n  x1 = x2 = x3 = x4 = x5 = 0;\n  input = unknown_int();\n  /*@\n\n\n\n\nloop invariant i5: 0 <= x1 <= x4 + 1;\nloop invariant i6: x2 == x3;\nloop invariant i7: x2 <= -1 || x4 <= x2 + 2;\nloop invariant i8: x5 == 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i35: x1 <= x4 + 1;\nloop invariant i36: x2 <= x3;\nloop invariant i37: x3 <= x3;\nloop invariant i38: x4 <= x4 + 1;\nloop invariant i39: x5 <= x5;\n\n\nloop invariant i42: x3p <= x3p;\nloop invariant i43: x4p <= x4p + 1;\nloop invariant i44: x5p <= x5p;\n*/\nwhile(input)\n  {\n    x1p = unknown_int();\n    x2p = unknown_int();\n    x3p = unknown_int();\n    x4p = unknown_int();\n    x5p = unknown_int();\n\n    if (0 <= x1p && x1p <= x4p + 1 && x2p == x3p && (x2p <= -1 || x4p <= x2p + 2) && x5p == 0)\n    {\n\tx1 = x1p;\n\tx2 = x2p;\n\tx3 = x3p;\n\tx4 = x4p;\n\tx5 = x5p;\n    }\n    input = unknown_int();\n  }\n  {;\n//@ assert(0 <= x1 && x1 <= x4 + 1 && x2 == x3 && (x2 <= -1 || x4 <= x2 + 2) && x5 == 0);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main()\n{\n  int x1,x2,x3,x4,x5;\n  int x1p,x2p,x3p,x4p,x5p, input;\n\n  x1 = x2 = x3 = x4 = x5 = 0;\n  input = unknown_int();\n  /*@\n\n*/\nwhile(input)\n  {\n    x1p = unknown_int();\n    x2p = unknown_int();\n    x3p = unknown_int();\n    x4p = unknown_int();\n    x5p = unknown_int();\n\n    if (0 <= x1p && x1p <= x4p + 1 && x2p == x3p && (x2p <= -1 || x4p <= x2p + 2) && x5p == 0)\n    {\n\tx1 = x1p;\n\tx2 = x2p;\n\tx3 = x3p;\n\tx4 = x4p;\n\tx5 = x5p;\n    }\n    input = unknown_int();\n  }\n  {;\n//@ assert(0 <= x1 && x1 <= x4 + 1 && x2 == x3 && (x2 <= -1 || x4 <= x2 + 2) && x5 == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x1 <= x4 + 1;\nloop invariant x2 == x3;\nloop invariant x2 <= -1 ==> x4 <= x2 + 2;\nloop invariant x5 == 0;\nloop invariant x1p == x1;\nloop invariant x2p == x2;\nloop invariant x3p == x3;\nloop invariant x4p == x4;\nloop invariant x5p == x5;\nloop invariant x4p == x4 + 1;\nloop invariant x3p == x3 + 1;\nloop invariant x2p == x2 + 1;\nloop invariant x1p == x1 + 1;\nloop invariant x5p == x5;\nloop invariant x5p == x5 + 1;\nloop invariant x1p == x1 + x4 + 1;\nloop invariant x2p == x2 + x4 + 1;\nloop invariant x3p == x3 + x4 + 1;\nloop invariant x4p == x4 + x4 + 1;\nloop invariant x5p == x5 + x4 + 1;\nloop invariant x1p == x1 + x4 + 1;\nloop invariant x2p == x2 + x4 + 1;\nloop invariant x3p == x3 + x4 + 1;\nloop invariant x4p == x4 + x4 + 1;\nloop invariant x5p == x5 + x4 + 1;\nloop invariant x1p == x1 + x4 + 1;\nloop invariant x2p == x2 + x4 + 1;\nloop invariant x3p == x3 + x4 + 1;\nloop invariant x4p == x4 + x4 + 1;\nloop invariant x5p == x5 + x4 + 1;\nloop invariant x1p == x1 + x4 + 1;\nloop invariant x2p == x2 + x4 + 1;\nloop invariant x3p == x3 + x4 + 1;\nloop invariant x4p == x4 + x4 + 1;\nloop invariant x5p == x5 + x4 + 1;\nloop invariant x1p == x1 + x4 + 1;\nloop invariant x2p == x2 + x4 + 1;\nloop invariant x3p == x3 + x4 + 1;\nloop invariant x4p == x4 + x4 + 1;\nloop invariant x5p == x5 + x4 + 1;\nloop invariant x1p == x1 + x4 + 1;\nloop invariant x2p == x2 + x4 + 1;\nloop invariant x3p == x3 + x4 + 1;\nloop invariant x4p == x4 + x4 + 1;\nloop invariant x5p == x5 + x4 + 1;\nloop invariant x1p == x1 + x4 + 1;\nloop invariant x2p == x2 + x4 + 1;\nloop invariant x3p == x3 + x4 + 1;\nloop invariant x4p == x4 + x4 + 1;\nloop invariant x5p == x5 + x4 + 1;\nloop invariant x1p == x1 + x4 + 1;\nloop invariant x2p == x2 + x4 + 1;\nloop invariant x3p == x3 + x4 + 1;\nloop invariant x4p == x4 + x4 + 1;\nloop invariant x5p == x5 + x4 + 1;\nloop invariant x1p == x1 + x4 + 1;\nloop invariant x2p == x2 + x4 + 1;\nloop invariant x3p == x3 + x4 + 1;\nloop invariant x4p == x4 + x4 + 1;\nloop invariant x5p == x5 + x4 + 1;\nloop invariant x1p == x1 + x4 + 1;\nloop invariant x2p == x2 + x4 + 1;\nloop invariant x3p == x3 + x4 + 1;\nloop invariant x4p == x4 + x4 + 1;\nloop invariant x5p == x5 + x4 + 1;\nloop invariant x1p == x1 + x4 + 1;\nloop invariant x2p == x2 + x4 + 1;\nloop invariant x3p == x3 + x4 + 1;\nloop invariant x4p == x4 + x4 + 1;\nloop invariant x5p == x5 + x4 + 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main()\n{\n  int x1,x2,x3,x4,x5;\n  int x1p,x2p,x3p,x4p,x5p, input;\n\n  x1 = x2 = x3 = x4 = x5 = 0;\n  input = unknown_int();\n  /*@\nloop invariant i1: 0 <= x1 <= x4 + 1;\nloop invariant i2: x2 == x3;\n\nloop invariant i4: x5 == 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile(input)\n  {\n    x1p = unknown_int();\n    x2p = unknown_int();\n    x3p = unknown_int();\n    x4p = unknown_int();\n    x5p = unknown_int();\n\n    if (0 <= x1p && x1p <= x4p + 1 && x2p == x3p && (x2p <= -1 || x4p <= x2p + 2) && x5p == 0)\n    {\n\tx1 = x1p;\n\tx2 = x2p;\n\tx3 = x3p;\n\tx4 = x4p;\n\tx5 = x5p;\n    }\n    input = unknown_int();\n  }\n  {;\n//@ assert(0 <= x1 && x1 <= x4 + 1 && x2 == x3 && (x2 <= -1 || x4 <= x2 + 2) && x5 == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x1 <= x4 + 1;\nloop invariant x2 == x3;\nloop invariant -2 <= x2 <= x4;\nloop invariant x5 == 0;\nloop invariant 0 <= input <= 1;\nloop invariant 0 <= x1p <= x4 + 1;\nloop invariant x2p == x3p;\nloop invariant -2 <= x2p <= x4;\nloop invariant x5p == 0;\nloop invariant 0 <= input <= 1;\nloop invariant x1p == x1;\nloop invariant x2p == x2;\nloop invariant x3p == x3;\nloop invariant x4p == x4;\nloop invariant x5p == x5;\nloop invariant input == 0;\nloop invariant x1 == x1;\nloop invariant x2 == x2;\nloop invariant x3 == x3;\nloop invariant x4 == x4;\nloop invariant x5 == x5;\nloop invariant input == 0;\nloop invariant x1 == x1;\nloop invariant x2 == x2;\nloop invariant x3 == x3;\nloop invariant x4 == x4;\nloop invariant x5 == x5;\nloop invariant input == 0;\nloop invariant x1 == x1;\nloop invariant x2 == x2;\nloop invariant x3 == x3;\nloop invariant x4 == x4;\nloop invariant x5 == x5;\nloop invariant input == 0;\nloop invariant x1 == x1;\nloop invariant x2 == x2;\nloop invariant x3 == x3;\nloop invariant x4 == x4;\nloop invariant x5 == x5;\nloop invariant input == 0;\nloop invariant x1 == x1;\nloop invariant x2 == x2;\nloop invariant x3 == x3;\nloop invariant x4 == x4;\nloop invariant x5 == x5;\nloop invariant input == 0;\nloop invariant x1 == x1;\nloop invariant x2 == x2;\nloop invariant x3 == x3;\nloop invariant x4 == x4;\nloop invariant x5 == x5;\nloop invariant input == 0;\nloop invariant x1 == x1;\nloop invariant x2 == x2;\nloop invariant x3 == x3;\nloop invariant x4 == x4;\nloop invariant x5 == x5;\nloop invariant input == 0;\nloop invariant x1 == x1;\nloop invariant x2 == x2;\nloop invariant x3 == x3;\nloop invariant x4 == x4;\nloop invariant x5 == x5;\nloop invariant input == 0;\nloop invariant x1 == x1;\nloop invariant x2 == x2;\nloop invariant x3 == x3;\nloop invariant x4 == x4;\nloop invariant x5 == x5;\nloop invariant input == 0;\nloop invariant x1 == x1;\nloop invariant x2 == x2;\nloop invariant x3 == x3;\nloop invariant x4 == x4;\nloop invariant x5 == x5;\nloop invariant input == 0;\nloop invariant x1 == x1;\nloop invariant x2 == x2;\nloop invariant x3 == x3;\nloop invariant x4 == x4;\nloop invariant x5 == x5;\nloop invariant input == 0;\nloop invariant x1 == x1;\nloop invariant x2 == x2;\nloop invariant x3 == x3;\nloop invariant x4 == x4;\nloop invariant x5 == x5;\nloop invariant input == 0;\nloop invariant x1 == x1;\nloop invariant x2 == x2;\nloop invariant x3 == x3;\nloop invariant x4 == x4;\nloop invariant x5 == x5;\nloop invariant input == 0;\nloop invariant x1 == x1;\nloop invariant x2 == x2;\nloop invariant x3 == x3;\nloop invariant x4 == x4;\nloop invariant x5 == x5;\nloop invariant input == 0;\nloop invariant x1 == x1;\nloop invariant x2 == x2;\nloop invariant x3 == x3;\nloop invariant x4 == x4;\nloop invariant x5 == x5;\nloop invariant input == 0;\nloop invariant x1 == x1;\nloop invariant x2 == x2;\nloop invariant x3 == x3;\nloop invariant x4 == x4;\nloop invariant x5 == x5;\nloop invariant input == 0;\nloop invariant x1 == x1;\nloop invariant x2 == x2;\nloop invariant x3 == x3;\nloop invariant x4 == x4;\nloop invariant x5 == x5;\nloop invariant input == 0;\nloop invariant x1 == x1;\nloop invariant x2 == x2;\nloop invariant x3 == x3;\nloop invariant x4 == x4;\nloop invariant x5 == x5;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main()\n{\n  int x1,x2,x3,x4,x5;\n  int x1p,x2p,x3p,x4p,x5p, input;\n\n  x1 = x2 = x3 = x4 = x5 = 0;\n  input = unknown_int();\n  /*@\nloop invariant i1: 0 <= x1 <= x4 + 1;\nloop invariant i2: x2 == x3;\n\nloop invariant i4: x5 == 0;\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i16: x1 == x1;\nloop invariant i17: x2 == x2;\nloop invariant i18: x3 == x3;\nloop invariant i19: x4 == x4;\nloop invariant i20: x5 == x5;\n*/\nwhile(input)\n  {\n    x1p = unknown_int();\n    x2p = unknown_int();\n    x3p = unknown_int();\n    x4p = unknown_int();\n    x5p = unknown_int();\n\n    if (0 <= x1p && x1p <= x4p + 1 && x2p == x3p && (x2p <= -1 || x4p <= x2p + 2) && x5p == 0)\n    {\n\tx1 = x1p;\n\tx2 = x2p;\n\tx3 = x3p;\n\tx4 = x4p;\n\tx5 = x5p;\n    }\n    input = unknown_int();\n  }\n  {;\n//@ assert(0 <= x1 && x1 <= x4 + 1 && x2 == x3 && (x2 <= -1 || x4 <= x2 + 2) && x5 == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant x1p >= 0 && x1p <= x4p + 1 && x2p == x3p && (x2p <= -1 || x4p <= x2p + 2) && x5p == 0 && input == 1;\nloop invariant x1 == x1p && x2 == x2p && x3 == x3p && x4 == x4p && x5 == x5p && input == 0;\nloop invariant x1 >= 0 && x1 <= x4 + 1 && x2 == x3 && (x2 <= -1 || x4 <= x2 + 2) && x5 == 0 && input == 0;\nloop invariant x1p >= 0 && x1p <= x4p + 1 && x2p == x3p && (x2p <= -1 || x4p <= x2p + 2) && x5p == 0 && input == 1;\nloop invariant x1 >= 0 && x1 <= x4 + 1 && x2 == x3 && (x2 <= -1 || x4 <= x2 + 2) && x5 == 0 && input == 0;\nloop invariant x1 >= 0 && x1 <= x4 + 1 && x2 == x3 && (x2 <= -1 || x4 <= x2 + 2) && x5 == 0 && input == 0;\nloop invariant x1 >= 0 && x1 <= x4 + 1 && x2 == x3 && (x2 <= -1 || x4 <= x2 + 2) && x5 == 0 && input == 0;\nloop invariant x1 >= 0 && x1 <= x4 + 1 && x2 == x3 && (x2 <= -1 || x4 <= x2 + 2) && x5 == 0 && input == 0;\nloop invariant x1 >= 0 && x1 <= x4 + 1 && x2 == x3 && (x2 <= -1 || x4 <= x2 + 2) && x5 == 0 && input == 0;\nloop invariant x1 >= 0 && x1 <= x4 + 1 && x2 == x3 && (x2 <= -1 || x4 <= x2 + 2) && x5 == 0 && input == 0;\nloop invariant x1 >= 0 && x1 <= x4 + 1 && x2 == x3 && (x2 <= -1 || x4 <= x2 + 2) && x5 == 0 && input == 0;\nloop invariant x1 >= 0 && x1 <= x4 + 1 && x2 == x3 && (x2 <= -1 || x4 <= x2 + 2) && x5 == 0 && input == 0;\nloop invariant x1 >= 0 && x1 <= x4 + 1 && x2 == x3 && (x2 <= -1 || x4 <= x2 + 2) && x5 == 0 && input == 0;\nloop invariant x1 >= 0 && x1 <= x4 + 1 && x2 == x3 && (x2 <= -1 || x4 <= x2 + 2) && x5 == 0 && input == 0;\nloop invariant x1 >= 0 && x1 <= x4 + 1 && x2 == x3 && (x2 <= -1 || x4 <= x2 + 2) && x5 == 0 && input == 0;\nloop invariant x1 >= 0 && x1 <= x4 + 1 && x2 == x3 && (x2 <= -1 || x4 <= x2 + 2) && x5 == 0 && input == 0;\nloop invariant x1 >= 0 && x1 <= x4 + 1 && x2 == x3 && (x2 <= -1 || x4 <= x2 + 2) && x5 == 0 && input == 0;\nloop invariant x1 >= 0 && x1 <= x4 + 1 && x2 == x3 && (x2 <= -1 || x4 <= x2 + 2) && x5 == 0 && input == 0;\nloop invariant x1 >= 0 && x1 <= x4 + 1 && x2 == x3 && (x2 <= -1 || x4 <= x2 + 2) && x5 == 0 && input == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main()\n{\n  int x1,x2,x3,x4,x5;\n  int x1p,x2p,x3p,x4p,x5p, input;\n\n  x1 = x2 = x3 = x4 = x5 = 0;\n  input = unknown_int();\n  /*@\n\n\n\n*/\nwhile(input)\n  {\n    x1p = unknown_int();\n    x2p = unknown_int();\n    x3p = unknown_int();\n    x4p = unknown_int();\n    x5p = unknown_int();\n\n    if (0 <= x1p && x1p <= x4p + 1 && x2p == x3p && (x2p <= -1 || x4p <= x2p + 2) && x5p == 0)\n    {\n\tx1 = x1p;\n\tx2 = x2p;\n\tx3 = x3p;\n\tx4 = x4p;\n\tx5 = x5p;\n    }\n    input = unknown_int();\n  }\n  {;\n//@ assert(0 <= x1 && x1 <= x4 + 1 && x2 == x3 && (x2 <= -1 || x4 <= x2 + 2) && x5 == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant ((input > 0) ==> (x1 == x1p && x2 == x2p && x3 == x3p && x4 == x4p && x5 == x5p));\nloop invariant ((input > 0) ==> (x1p <= x4p + 1 && x1p >= 0));\nloop invariant ((input > 0) ==> (x2p == x3p));\nloop invariant ((input > 0) ==> (x2p <= -1 || x4p <= x2p + 2));\nloop invariant ((input > 0) ==> (x5p == 0));\nloop invariant ((input > 0) ==> (x1 == x1p && x2 == x2p && x3 == x3p && x4 == x4p && x5 == x5p));\nloop invariant ((input > 0) ==> (x2p <= -1 || x4p <= x2p + 2));\nloop invariant ((input > 0) ==> (x5p == 0));\nloop invariant ((input > 0) ==> (x2p <= -1 || x4p <= x2p + 2));\nloop invariant ((input > 0) ==> (x2p <= -1 || x4p <= x2p + 2));\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main()\n{\n  int x1,x2,x3,x4,x5;\n  int x1p,x2p,x3p,x4p,x5p, input;\n\n  x1 = x2 = x3 = x4 = x5 = 0;\n  input = unknown_int();\n  /*@\n\n\n\n\n\n*/\nwhile(input)\n  {\n    x1p = unknown_int();\n    x2p = unknown_int();\n    x3p = unknown_int();\n    x4p = unknown_int();\n    x5p = unknown_int();\n\n    if (0 <= x1p && x1p <= x4p + 1 && x2p == x3p && (x2p <= -1 || x4p <= x2p + 2) && x5p == 0)\n    {\n\tx1 = x1p;\n\tx2 = x2p;\n\tx3 = x3p;\n\tx4 = x4p;\n\tx5 = x5p;\n    }\n    input = unknown_int();\n  }\n  {;\n//@ assert(0 <= x1 && x1 <= x4 + 1 && x2 == x3 && (x2 <= -1 || x4 <= x2 + 2) && x5 == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x1 <= x4 + 1;\nloop invariant x2 == x3;\nloop invariant (x2 <= -1 ==> x4 <= x2 + 2);\nloop invariant 0 <= x1 <= x4 + 1;\nloop invariant x2 == x3;\nloop invariant (x2 <= -1 ==> x4 <= x2 + 2);\nloop invariant x5 == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main()\n{\n  int x1,x2,x3,x4,x5;\n  int x1p,x2p,x3p,x4p,x5p, input;\n\n  x1 = x2 = x3 = x4 = x5 = 0;\n  input = unknown_int();\n  /*@\nloop invariant i1: 0 <= x1 <= x4 + 1;\nloop invariant i2: x2 == x3;\n\nloop invariant i4: x5 == 0;\n*/\nwhile(input)\n  {\n    x1p = unknown_int();\n    x2p = unknown_int();\n    x3p = unknown_int();\n    x4p = unknown_int();\n    x5p = unknown_int();\n\n    if (0 <= x1p && x1p <= x4p + 1 && x2p == x3p && (x2p <= -1 || x4p <= x2p + 2) && x5p == 0)\n    {\n\tx1 = x1p;\n\tx2 = x2p;\n\tx3 = x3p;\n\tx4 = x4p;\n\tx5 = x5p;\n    }\n    input = unknown_int();\n  }\n  {;\n//@ assert(0 <= x1 && x1 <= x4 + 1 && x2 == x3 && (x2 <= -1 || x4 <= x2 + 2) && x5 == 0);\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 31: Assignment operators not allowed in annotations.",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main()\n{\n  int x1,x2,x3,x4,x5;\n  int x1p,x2p,x3p,x4p,x5p, input;\n\n  x1 = x2 = x3 = x4 = x5 = 0;\n  input = unknown_int();\n  /*@\nloop invariant i1: 0 <= input <= 1;\nloop invariant i2: 0 <= x1 <= x4 + 1;\nloop invariant i3: x2 == x3;\nloop invariant i4: x2 <= -1 || x4 <= x2 + 2;\nloop invariant i5: x5 == 0;\nloop invariant i6: 0 <= x1p <= x4p + 1;\nloop invariant i7: x2p == x3p;\nloop invariant i8: x2p <= -1 || x4p <= x2p + 2;\nloop invariant i9: x5p == 0;\nloop invariant i10: (0 <= x1p && x1p <= x4p + 1 && x2p == x3p && (x2p <= -1 || x4p <= x2p + 2) && x5p == 0) ==> (x1 == x1p && x2 == x2p && x3 == x3p && x4 == x4p && x5 == x5p);\nloop invariant i11: (x1 == x1p && x2 == x2p && x3 == x3p && x4 == x4p && x5 == x5p) ==> (0 <= x1 <= x4 + 1 && x2 == x3 && (x2 <= -1 || x4 <= x2 + 2) && x5 == 0);\nloop invariant i12: (x1 == x1p && x2 == x2p && x3 == x3p && x4 == x4p && x5 == x5p) ==> (x1p == x1 && x2p == x2 && x3p == x3 && x4p == x4 && x5p == x5);\nloop invariant i13: (x1 == x1p && x2 == x2p && x3 == x3p && x4 == x4p && x5 == x5p) ==> (0 <= x1p && x1p <= x4p + 1 && x2p == x3p && (x2p <= -1 || x4p <= x2p + 2) && x5p == 0);\nloop invariant i14: 0 <= x5p;\nloop invariant i15: x1p = x1;\nloop invariant i16: x2p = x2;\nloop invariant i17: x3p = x3;\nloop invariant i18: x4p = x4;\nloop invariant i19: x5p = x5;\nloop invariant i20: input = 0;\nloop invariant i21: x1 = x1p;\nloop invariant i22: x2 = x2p;\nloop invariant i23: x3 = x3p;\nloop invariant i24: x4 = x4p;\nloop invariant i25: x5 = x5p;\nloop invariant i26: 0 <= x1p <= x4p + 1 ==> 0 <= x1 <= x4 + 1;\nloop invariant i27: x2p == x3p ==> x2 == x3;\nloop invariant i28: x2p <= -1 || x4p <= x2p + 2 ==> x2 <= -1 || x4 <= x2 + 2;\nloop invariant i29: x5p == 0 ==> x5 == 0;\nloop invariant i30: x1p = x1 ==> x1p = x1 && x2p = x2 && x3p = x3 && x4p = x4 && x5p = x5;\nloop invariant i31: x2p = x2 ==> x1p = x1 && x2p = x2 && x3p = x3 && x4p = x4 && x5p = x5;\nloop invariant i32: x3p = x3 ==> x1p = x1 && x2p = x2 && x3p = x3 && x4p = x4 && x5p = x5;\nloop invariant i33: x4p = x4 ==> x1p = x1 && x2p = x2 && x3p = x3 && x4p = x4 && x5p = x5;\nloop invariant i34: x5p = x5 ==> x1p = x1 && x2p = x2 && x3p = x3 && x4p = x4 && x5p = x5;\nloop invariant i35: x1p = x1 && x2p = x2 && x3p = x3 && x4p = x4 && x5p = x5 ==> 0 <= x1 <= x4 + 1;\nloop invariant i36: x1p = x1 && x2p = x2 && x3p = x3 && x4p = x4 && x5p = x5 ==> x2 == x3;\nloop invariant i37: x1p = x1 && x2p = x2 && x3p = x3 && x4p = x4 && x5p = x5 ==> x2 <= -1 || x4 <= x2 + 2;\nloop invariant i38: x1p = x1 && x2p = x2 && x3p = x3 && x4p = x4 && x5p = x5 ==> x5 == 0;\nloop invariant i39: x2 <= -1 ==> x4 <= x2 + 2;\nloop invariant i40: 0 <= x1p <= x4 + 1;\nloop invariant i41: x2p <= -1 ==> x4p <= x2p + 2;\nloop invariant i42: input == 1 ==> 0 <= x1 <= x4 + 1;\nloop invariant i43: input == 1 ==> x2 == x3;\nloop invariant i44: input == 1 ==> x2 <= -1 ==> x4 <= x2 + 2;\nloop invariant i45: input == 1 ==> x5 == 0;\nloop invariant i46: input == 1 ==> 0 <= x1p <= x4 + 1;\nloop invariant i47: input == 1 ==> x2p == x3p;\nloop invariant i48: input == 1 ==> x2p <= -1 ==> x4p <= x2p + 2;\nloop invariant i49: input == 1 ==> x5p == 0;\nloop invariant i50: input == 0 ==> 0 <= x1 <= x4 + 1;\nloop invariant i51: input == 0 ==> x2 == x3;\nloop invariant i52: input == 0 ==> x2 <= -1 ==> x4 <= x2 + 2;\nloop invariant i53: input == 0 ==> x5 == 0;\nloop invariant i54: input == 0 ==> 0 <= x1p <= x4 + 1;\nloop invariant i55: input == 0 ==> x2p == x3p;\nloop invariant i56: input == 0 ==> x2p <= -1 ==> x4p <= x2p + 2;\nloop invariant i57: input == 0 ==> x5p == 0;\nloop invariant i58: 0 <= x1 <= x4 + 1 && x2 == x3 && (x2 <= -1 || x4 <= x2 + 2) && x5 == 0;\nloop invariant i59: 0 <= x1p <= x4p + 1 && x2p == x3p && (x2p <= -1 || x4p <= x2p + 2) && x5p == 0;\nloop invariant i60: x1p >= x1 && x2p >= x2 && x3p >= x3 && x4p >= x4 && x5p >= x5;\nloop invariant i61: x1 <= x4p + 1 && x2 == x3p && (x2 <= -1 || x4p <= x2 + 2) && x5 == 0;\nloop invariant i62: 1 <= x1 <= x4 + 1;\nloop invariant i63: x1p == x1;\nloop invariant i64: x2p == x2;\nloop invariant i65: x3p == x3;\nloop invariant i66: x4p == x4;\nloop invariant i67: x5p == x5;\nloop invariant i68: x1p <= x4p + 1;\nloop invariant i69: (x2p <= -1 ==> x4p <= x2p + 2);\nloop invariant i70: x1 == x1p;\nloop invariant i71: x2 == x2p;\nloop invariant i72: x3 == x3p;\nloop invariant i73: x4 == x4p;\nloop invariant i74: x5 == x5p;\nloop invariant i75: input == unknown_int();\nloop invariant i76: (x2p <= -1 || x4p <= x2p + 2);\nloop invariant i77: input == 0;\nloop invariant i78: x1 == 0;\nloop invariant i79: x2 == 0;\nloop invariant i80: x3 == 0;\nloop invariant i81: x4 == 0;\nloop invariant i82: x1 == unknown_int();\nloop invariant i83: x2 == unknown_int();\nloop invariant i84: x3 == unknown_int();\nloop invariant i85: x4 == unknown_int();\nloop invariant i86: x5 == unknown_int();\nloop invariant i87: x1p == unknown_int();\nloop invariant i88: x2p == unknown_int();\nloop invariant i89: x3p == unknown_int();\nloop invariant i90: x4p == unknown_int();\nloop invariant i91: x5p == unknown_int();\nloop invariant i92: x1 <= x4p + 1;\nloop invariant i93: x2 <= x3p;\nloop invariant i94: x3 <= x3p;\nloop invariant i95: x4 <= x4p + 1;\nloop invariant i96: x5 <= x5p;\nloop invariant i97: x1 <= x4 + 1;\nloop invariant i98: x2 <= x3;\nloop invariant i99: x3 <= x3;\nloop invariant i100: x4 <= x4 + 1;\nloop invariant i101: x5 <= x5;\nloop invariant i102: x2p <= x3p;\nloop invariant i103: x3p <= x3p;\nloop invariant i104: x4p <= x4p + 1;\nloop invariant i105: x5p <= x5p;\nloop invariant i106: x4p == x4 + 1;\nloop invariant i107: x3p == x3 + 1;\nloop invariant i108: x2p == x2 + 1;\nloop invariant i109: x1p == x1 + 1;\nloop invariant i110: x5p == x5 + 1;\nloop invariant i111: x1p == x1 + x4 + 1;\nloop invariant i112: x2p == x2 + x4 + 1;\nloop invariant i113: x3p == x3 + x4 + 1;\nloop invariant i114: x4p == x4 + x4 + 1;\nloop invariant i115: x5p == x5 + x4 + 1;\nloop invariant i116: -2 <= x2 <= x4;\nloop invariant i117: -2 <= x2p <= x4;\nloop invariant i118: x1 == x1;\nloop invariant i119: x2 == x2;\nloop invariant i120: x3 == x3;\nloop invariant i121: x4 == x4;\nloop invariant i122: x5 == x5;\nloop invariant i123: x1p >= 0 && x1p <= x4p + 1 && x2p == x3p && (x2p <= -1 || x4p <= x2p + 2) && x5p == 0 && input == 1;\nloop invariant i124: x1 == x1p && x2 == x2p && x3 == x3p && x4 == x4p && x5 == x5p && input == 0;\nloop invariant i125: x1 >= 0 && x1 <= x4 + 1 && x2 == x3 && (x2 <= -1 || x4 <= x2 + 2) && x5 == 0 && input == 0;\nloop invariant i126: ((input > 0) ==> (x1 == x1p && x2 == x2p && x3 == x3p && x4 == x4p && x5 == x5p));\nloop invariant i127: ((input > 0) ==> (x1p <= x4p + 1 && x1p >= 0));\nloop invariant i128: ((input > 0) ==> (x2p == x3p));\nloop invariant i129: ((input > 0) ==> (x2p <= -1 || x4p <= x2p + 2));\nloop invariant i130: ((input > 0) ==> (x5p == 0));\nloop invariant i131: (x2 <= -1 ==> x4 <= x2 + 2);\n*/\nwhile(input)\n  {\n    x1p = unknown_int();\n    x2p = unknown_int();\n    x3p = unknown_int();\n    x4p = unknown_int();\n    x5p = unknown_int();\n\n    if (0 <= x1p && x1p <= x4p + 1 && x2p == x3p && (x2p <= -1 || x4p <= x2p + 2) && x5p == 0)\n    {\n\tx1 = x1p;\n\tx2 = x2p;\n\tx3 = x3p;\n\tx4 = x4p;\n\tx5 = x5p;\n    }\n    input = unknown_int();\n  }\n  {;\n//@ assert(0 <= x1 && x1 <= x4 + 1 && x2 == x3 && (x2 <= -1 || x4 <= x2 + 2) && x5 == 0);\n}\n\n}",
        "combined_annotation_num_solver_calls": 43,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main()\n{\n  int x1,x2,x3,x4,x5;\n  int x1p,x2p,x3p,x4p,x5p, input;\n\n  x1 = x2 = x3 = x4 = x5 = 0;\n  input = unknown_int();\n  /*@\n\nloop invariant i2: 0 <= x1 <= x4 + 1;\nloop invariant i3: x2 == x3;\nloop invariant i4: x2 <= -1 || x4 <= x2 + 2;\nloop invariant i5: x5 == 0;\n\n\n\n\n\nloop invariant i11: (x1 == x1p && x2 == x2p && x3 == x3p && x4 == x4p && x5 == x5p) ==> (0 <= x1 <= x4 + 1 && x2 == x3 && (x2 <= -1 || x4 <= x2 + 2) && x5 == 0);\nloop invariant i12: (x1 == x1p && x2 == x2p && x3 == x3p && x4 == x4p && x5 == x5p) ==> (x1p == x1 && x2p == x2 && x3p == x3 && x4p == x4 && x5p == x5);\nloop invariant i13: (x1 == x1p && x2 == x2p && x3 == x3p && x4 == x4p && x5 == x5p) ==> (0 <= x1p && x1p <= x4p + 1 && x2p == x3p && (x2p <= -1 || x4p <= x2p + 2) && x5p == 0);\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i26: 0 <= x1p <= x4p + 1 ==> 0 <= x1 <= x4 + 1;\nloop invariant i27: x2p == x3p ==> x2 == x3;\nloop invariant i28: x2p <= -1 || x4p <= x2p + 2 ==> x2 <= -1 || x4 <= x2 + 2;\nloop invariant i29: x5p == 0 ==> x5 == 0;\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i42: input == 1 ==> 0 <= x1 <= x4 + 1;\nloop invariant i43: input == 1 ==> x2 == x3;\n\nloop invariant i45: input == 1 ==> x5 == 0;\n\n\n\n\nloop invariant i50: input == 0 ==> 0 <= x1 <= x4 + 1;\nloop invariant i51: input == 0 ==> x2 == x3;\n\nloop invariant i53: input == 0 ==> x5 == 0;\n\n\n\n\nloop invariant i58: 0 <= x1 <= x4 + 1 && x2 == x3 && (x2 <= -1 || x4 <= x2 + 2) && x5 == 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i97: x1 <= x4 + 1;\nloop invariant i98: x2 <= x3;\nloop invariant i99: x3 <= x3;\nloop invariant i100: x4 <= x4 + 1;\nloop invariant i101: x5 <= x5;\n\nloop invariant i103: x3p <= x3p;\nloop invariant i104: x4p <= x4p + 1;\nloop invariant i105: x5p <= x5p;\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i118: x1 == x1;\nloop invariant i119: x2 == x2;\nloop invariant i120: x3 == x3;\nloop invariant i121: x4 == x4;\nloop invariant i122: x5 == x5;\n\n\n\n\n\n\n\n\n\n*/\nwhile(input)\n  {\n    x1p = unknown_int();\n    x2p = unknown_int();\n    x3p = unknown_int();\n    x4p = unknown_int();\n    x5p = unknown_int();\n\n    if (0 <= x1p && x1p <= x4p + 1 && x2p == x3p && (x2p <= -1 || x4p <= x2p + 2) && x5p == 0)\n    {\n\tx1 = x1p;\n\tx2 = x2p;\n\tx3 = x3p;\n\tx4 = x4p;\n\tx5 = x5p;\n    }\n    input = unknown_int();\n  }\n  {;\n//@ assert(0 <= x1 && x1 <= x4 + 1 && x2 == x3 && (x2 <= -1 || x4 <= x2 + 2) && x5 == 0);\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/split.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c"
        ],
        "skipped": [],
        "total": 83,
        "success_count": 72,
        "failure_count": 11,
        "success_rate": 0.8674698795180723
    }
}