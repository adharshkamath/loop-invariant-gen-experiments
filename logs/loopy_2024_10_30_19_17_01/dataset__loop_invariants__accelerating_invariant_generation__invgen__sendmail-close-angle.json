{
    "logs": {
        "file": "../dataset/loop_invariants/accelerating_invariant_generation/invgen/sendmail-close-angle.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main (void)\n{\n  \n  int __BLAST_NONDET;\n  int in;\n  int inlen;\n  int bufferlen;\n  int buf;\n  int buflim;\n\n  if(bufferlen >1);else goto END;\n  if(inlen > 0);else goto END;\n  if(bufferlen < inlen);else goto END;\n\n  buf = 0;\n  in = 0;\n  buflim = bufferlen - 2;\n    \n  while (__BLAST_NONDET)\n  {\n    if (buf == buflim)\n      break;\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n \n    buf++;\nout:\n    in++;\n    {;\n//@ assert(0<=in);\n}\n\n    {;\n//@ assert(in<inlen);\n}\n\n  }\n\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n  {;\n//@ assert(0<=buf);\n}\n\n  {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n END:  return 0;\n}",
        "success": false,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= buf <= bufferlen;\nloop invariant 0 <= in < inlen;\nloop invariant buf <= buflim;\nloop invariant buf < bufferlen;\nloop invariant in < inlen;\nloop invariant buflim < bufferlen;\nloop invariant buf + 1 < bufferlen;\nloop invariant buf + 2 < bufferlen;\nloop invariant buf + 3 < bufferlen;\nloop invariant buf + 4 < bufferlen;\nloop invariant buf + 5 < bufferlen;\nloop invariant buf + 6 < bufferlen;\nloop invariant buf + 7 < bufferlen;\nloop invariant buf + 8 < bufferlen;\nloop invariant buf + 9 < bufferlen;\nloop invariant buf + 10 < bufferlen;\nloop invariant buf + 11 < bufferlen;\nloop invariant buf + 12 < bufferlen;\nloop invariant buf + 13 < bufferlen;\nloop invariant buf + 14 < bufferlen;\nloop invariant buf + 15 < bufferlen;\nloop invariant buf + 16 < bufferlen;\nloop invariant buf + 17 < bufferlen;\nloop invariant buf + 18 < bufferlen;\nloop invariant buf + 19 < bufferlen;\nloop invariant buf + 20 < bufferlen;\nloop invariant buf + 21 < bufferlen;\nloop invariant buf + 22 < bufferlen;\nloop invariant buf + 23 < bufferlen;\nloop invariant buf + 24 < bufferlen;\nloop invariant buf + 25 < bufferlen;\nloop invariant buf + 26 < bufferlen;\nloop invariant buf + 27 < bufferlen;\nloop invariant buf + 28 < bufferlen;\nloop invariant buf + 29 < bufferlen;\nloop invariant buf + 30 < bufferlen;\nloop invariant buf + 31 < bufferlen;\nloop invariant buf + 32 < bufferlen;\nloop invariant buf + 33 < bufferlen;\nloop invariant buf + 34 < bufferlen;\nloop invariant buf + 35 < bufferlen;\nloop invariant buf + 36 < bufferlen;\nloop invariant buf + 37 < bufferlen;\nloop invariant buf + 38 < bufferlen;\nloop invariant buf + 39 < bufferlen;\nloop invariant buf + 40 < bufferlen;\nloop invariant buf + 41 < bufferlen;\nloop invariant buf + 42 < bufferlen;\nloop invariant buf + 43 < bufferlen;\nloop invariant buf + 44 < bufferlen;\nloop invariant buf + 45 < bufferlen;\nloop invariant buf + 46 < bufferlen;\nloop invariant buf + 47 < bufferlen;\nloop invariant buf + 48 < bufferlen;\nloop invariant buf + 49 < bufferlen;\nloop invariant buf + 50 < bufferlen;\nloop invariant buf + 51 < bufferlen;\nloop invariant buf + 52 < bufferlen;\nloop invariant buf + 53 < bufferlen;\nloop invariant buf + 54 < bufferlen;\nloop invariant buf + 55 < bufferlen;\nloop invariant buf + 56 < bufferlen;\nloop invariant buf + 57 < bufferlen;\nloop invariant buf + 58 < bufferlen;\nloop invariant buf + 59 < bufferlen;\nloop invariant buf + 60 < bufferlen;\nloop invariant buf + 61 < bufferlen;\nloop invariant buf + 62 < bufferlen;\nloop invariant buf + 63 < bufferlen;\nloop invariant buf + 64 < bufferlen;\nloop invariant buf + 65 < bufferlen;\nloop invariant buf + 66 < bufferlen;\nloop invariant buf + 67 < bufferlen;\nloop invariant buf + 68 < bufferlen;\nloop invariant buf + 69 < bufferlen;\nloop invariant buf + 70 < bufferlen;\nloop invariant buf + 71 < bufferlen;\nloop invariant buf + 72 < bufferlen;\nloop invariant buf + 73 < bufferlen;\nloop invariant buf + 74 < bufferlen;\nloop invariant buf + 75 < bufferlen;\nloop invariant buf + 76 < bufferlen;\nloop invariant buf + 77 < bufferlen;\nloop invariant buf + 78 < bufferlen;\nloop invariant buf + 79 < bufferlen;\nloop invariant buf + 80 < bufferlen;\nloop invariant buf + 81 < bufferlen;\nloop invariant buf + 82 < bufferlen;\nloop invariant buf + 83 < bufferlen;\nloop invariant buf + 84 < bufferlen;\nloop invariant buf + 85 < bufferlen;\nloop invariant buf + 86 < bufferlen;\nloop invariant buf + 87 < bufferlen;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= buf <= bufferlen;\nloop invariant buf <= buflim;\nloop invariant 0 <= in <= inlen;\nloop invariant in <= bufferlen - 2;\nloop invariant buflim <= bufferlen - 2;\nloop invariant (buf == buflim) ==> (in == inlen - 1);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= buf <= buflim;\nloop invariant 0 <= in <= inlen;\nloop invariant buf <= buflim;\nloop invariant in <= inlen;\nloop invariant (buf < bufferlen);\nloop invariant (in < inlen);\nloop invariant (in <= inlen);\nloop invariant (buf <= buflim);\nloop invariant (buf < bufferlen);\nloop invariant (buf <= buflim);\nloop invariant (buf <= buflim);\nloop invariant (buf < bufferlen);\nloop invariant (in <= inlen);\nloop invariant (buf <= buflim);\nloop invariant (buf < bufferlen);\nloop invariant (buf <= buflim);\nloop invariant (buf < bufferlen);\nloop invariant (in <= inlen);\nloop invariant (buf <= buflim);\nloop invariant (buf < bufferlen);\nloop invariant (buf <= buflim);\nloop invariant (buf < bufferlen);\nloop invariant (in <= inlen);\nloop invariant (buf <= buflim);\nloop invariant (buf < bufferlen);\nloop invariant (buf <= buflim);\nloop invariant (buf < bufferlen);\nloop invariant (in <= inlen);\nloop invariant (buf <= buflim);\nloop invariant (buf < bufferlen);\nloop invariant (buf <= buflim);\nloop invariant (buf < bufferlen);\nloop invariant (in <= inlen);\nloop invariant (buf <= buflim);\nloop invariant (buf < bufferlen);\nloop invariant (buf <= buflim);\nloop invariant (buf < bufferlen);\nloop invariant (in <= inlen);\nloop invariant (buf <= buflim);\nloop invariant (buf < bufferlen);\nloop invariant (buf <= buflim);\nloop invariant (buf < bufferlen);\nloop invariant (in <= inlen);\nloop invariant (buf <= buflim);\nloop invariant (buf < bufferlen);\nloop invariant (buf <= buflim);\nloop invariant (buf < bufferlen);\nloop invariant (in <= inlen);\nloop invariant (buf <= buflim);\nloop invariant (buf < bufferlen);\nloop invariant (buf <= buflim);\nloop invariant (buf < bufferlen);\nloop invariant (in <= inlen);\nloop invariant (buf <= buflim);\nloop invariant (buf < bufferlen);\nloop invariant (buf <= buflim);\nloop invariant (buf < bufferlen);\nloop invariant (in <= inlen);\nloop invariant (buf <= buflim);\nloop invariant (buf < bufferlen);\nloop invariant (buf <= buflim);\nloop invariant (buf < bufferlen);\nloop invariant (in <= inlen);\nloop invariant (buf <= buflim);\nloop invariant (buf < bufferlen);\nloop invariant (buf <= buflim);\nloop invariant (buf < bufferlen);\nloop invariant (in <= inlen);\nloop invariant (buf <= buflim);\nloop invariant (buf < bufferlen);\nloop invariant (buf <= buflim);\nloop invariant (buf < bufferlen);\nloop invariant (in <= inlen);\nloop invariant (buf <= buflim);\nloop invariant (buf < bufferlen);\nloop invariant (buf <= buflim);\nloop invariant (buf < bufferlen);\nloop invariant (in <= inlen);\nloop invariant (buf <= buflim);\nloop invariant (buf < bufferlen);\nloop invariant (buf <= buflim);\nloop invariant (buf < bufferlen);\nloop invariant (in <= inlen);\nloop invariant (buf <= buflim);\nloop invariant (buf < bufferlen);\nloop invariant (buf <= buflim);\nloop invariant (buf < bufferlen);\nloop invariant (in <= inlen);\nloop invariant (buf <= buflim);\nloop invariant (buf < bufferlen);\nloop invariant (buf <= buflim);\nloop invariant (buf < bufferlen);\nloop invariant (in <= inlen);\nloop invariant (buf <= buflim);\nloop invariant (buf < bufferlen);\nloop invariant (buf <= buflim);\nloop invariant (buf < bufferlen);\nloop invariant (in <= inlen);\nloop invariant (buf <= buflim);\nloop invariant (buf < bufferlen);\nloop invariant (buf <= buflim);\nloop invariant (buf < bufferlen);\nloop invariant (in <= inlen);\nloop invariant (buf <= buflim);\nloop invariant (buf < bufferlen);\nloop invariant (buf <= buflim);\nloop invariant (buf < bufferlen);\nloop invariant (in <= inlen);\nloop invariant (buf <= buflim);\nloop invariant (buf < bufferlen);\nloop invariant (buf <= buflim);\nloop invariant (buf < bufferlen);\nloop invariant (in <= inlen);\nloop invariant (buf <= buflim);\nloop invariant (buf < bufferlen);\nloop invariant (buf <= buflim);\nloop invariant (buf < bufferlen);\nloop invariant (in <= inlen);\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= buf <= buflim + 1;\nloop invariant 0 <= in <= inlen;\nloop invariant __BLAST_NONDET ==> buf <= buflim;\nloop invariant !__BLAST_NONDET ==> (buf < bufferlen);\nloop invariant !__BLAST_NONDET ==> (in < inlen);\nloop invariant __BLAST_NONDET ==> (in == inlen);\nloop invariant !__BLAST_NONDET ==> (buf == buflim + 1);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= buf <= bufferlen - 1;\nloop invariant 0 <= in <= inlen - 1;\nloop invariant buf < buflim ==> buf == buflim;\nloop invariant buf < buflim ==> buf <= buflim;\nloop invariant buf < buflim ==> buf >= 0;\nloop invariant buf <= buflim ==> buf == buflim;\nloop invariant buf <= buflim ==> buf <= buflim;\nloop invariant buf <= buflim ==> buf >= 0;\nloop invariant buf >= 0 ==> buf < buflim;\nloop invariant buf >= 0 ==> buf <= buflim;\nloop invariant buf >= 0 ==> buf >= 0;\nloop invariant 0 <= in ==> in < inlen;\nloop invariant 0 <= in ==> in <= inlen;\nloop invariant 0 <= in ==> in >= 0;\nloop invariant in < inlen ==> in <= inlen;\nloop invariant in < inlen ==> in >= 0;\nloop invariant in <= inlen ==> in < inlen;\nloop invariant in <= inlen ==> in <= inlen;\nloop invariant in <= inlen ==> in >= 0;\nloop invariant in >= 0 ==> in < inlen;\nloop invariant in >= 0 ==> in <= inlen;\nloop invariant in >= 0 ==> in >= 0;\nloop invariant buflim == bufferlen - 2;\nloop invariant bufferlen < inlen ==> buflim == bufferlen - 2;\nloop invariant inlen <= bufferlen ==> buflim == bufferlen - 2;\nloop invariant buflim == bufferlen - 2 ==> bufferlen < inlen;\nloop invariant buflim == bufferlen - 2 ==> inlen <= bufferlen;\nloop invariant buflim == bufferlen - 2 ==> buflim == bufferlen - 2;\nloop invariant (__BLAST_NONDET) ==> buf == buflim;\nloop invariant (__BLAST_NONDET) ==> buf <= buflim;\nloop invariant (__BLAST_NONDET) ==> buf >= 0;\nloop invariant (__BLAST_NONDET) ==> buf < buflim;\nloop invariant (__BLAST_NONDET) ==> buf <= buflim;\nloop invariant (__BLAST_NONDET) ==> buf >= 0;\nloop invariant (__BLAST_NONDET) ==> in < inlen;\nloop invariant (__BLAST_NONDET) ==> in <= inlen;\nloop invariant (__BLAST_NONDET) ==> in >= 0;\nloop invariant (__BLAST_NONDET) ==> buflim == bufferlen - 2;\nloop invariant (__BLAST_NONDET) ==> bufferlen < inlen;\nloop invariant (__BLAST_NONDET) ==> inlen <= bufferlen;\nloop invariant (__BLAST_NONDET) ==> buflim == bufferlen - 2;\nloop invariant (__BLAST_NONDET) ==> (__BLAST_NONDET) ==> buf == buflim;\nloop invariant (__BLAST_NONDET) ==> (__BLAST_NONDET) ==> buf <= buflim;\nloop invariant (__BLAST_NONDET) ==> (__BLAST_NONDET) ==> buf >= 0;\nloop invariant (__BLAST_NONDET) ==> (__BLAST_NONDET) ==> buf < buflim;\nloop invariant (__BLAST_NONDET) ==> (__BLAST_NONDET) ==> buf <= buflim;\nloop invariant (__BLAST_NONDET) ==> (__BLAST_NONDET) ==> buf >= 0;\nloop invariant (__BLAST_NONDET) ==> (__BLAST_NONDET) ==> in < inlen;\nloop invariant (__BLAST_NONDET) ==> (__BLAST_NONDET) ==> in <= inlen;\nloop invariant (__BLAST_NONDET) ==> (__BLAST_NONDET) ==> in >= 0;\nloop invariant (__BLAST_NONDET) ==> (__BLAST_NONDET) ==> buflim == bufferlen - 2;\nloop invariant (__BLAST_NONDET) ==> (__BLAST_NONDET) ==> bufferlen < inlen;\nloop invariant (__BLAST_NONDET) ==> (__BLAST_NONDET) ==> inlen <= bufferlen;\nloop invariant (__BLAST_NONDET) ==> (__BLAST_NONDET) ==> buflim == bufferlen - 2;\nloop invariant (__BLAST_NONDET) ==> (__BLAST_NONDET) ==> (__BLAST_NONDET) ==> buf == buflim;\nloop invariant (__BLAST_NONDET) ==> (__BLAST_NONDET) ==> (__BLAST_NONDET) ==> buf <= buflim;\nloop invariant (__BLAST_NONDET) ==> (__BLAST_NONDET) ==> (__BLAST_NONDET) ==> buf >= 0;\nloop invariant (__BLAST_NONDET) ==> (__BLAST_NONDET) ==> (__BLAST_NONDET) ==> buf < buflim;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= buf <= bufferlen - 2;\nloop invariant 0 <= in <= inlen - 1;\nloop invariant (buf == buflim) ==> in == inlen - 1;\nloop invariant !(buf == buflim) ==> in < inlen - 1;\nloop invariant buf < buflim ==> buf < bufferlen - 2;\nloop invariant buf < buflim ==> in < inlen - 1;\nloop invariant in < inlen - 1 ==> buf < bufferlen - 2;\nloop invariant in < inlen - 1 ==> in < inlen - 1;\nloop invariant buf < buflim ==> buf + 1 < bufferlen - 2;\nloop invariant in < inlen - 1 ==> in + 1 < inlen - 1;\nloop invariant buf + 1 < buflim ==> buf + 1 < bufferlen - 2;\nloop invariant in + 1 < inlen - 1 ==> in + 1 < inlen - 1;\nloop invariant buf + 1 < buflim ==> buf + 1 < bufferlen - 1;\nloop invariant in + 1 < inlen - 1 ==> in + 1 < inlen;\nloop invariant buf + 1 < bufferlen - 2 ==> buf + 1 < bufferlen - 1;\nloop invariant in + 1 < inlen - 1 ==> in + 1 < inlen;\nloop invariant buf + 1 < bufferlen - 1 ==> buf + 1 < buflim;\nloop invariant in + 1 < inlen ==> in + 1 < inlen - 1;\nloop invariant buf + 1 < buflim ==> buf + 1 < inlen - 1;\nloop invariant in + 1 < inlen - 1 ==> in + 1 < buflim;\nloop invariant buf + 1 < buflim ==> buf + 1 < buflim;\nloop invariant in + 1 < inlen - 1 ==> in + 1 < buflim;\nloop invariant buf + 1 < bufferlen - 2 ==> buf + 1 < inlen - 1;\nloop invariant in + 1 < inlen - 1 ==> in + 1 < buflim;\nloop invariant buf + 1 < bufferlen - 2 ==> buf + 1 < buflim;\nloop invariant in + 1 < inlen - 1 ==> in + 1 < buflim;\nloop invariant buf + 1 < bufferlen - 2 ==> buf + 1 < buflim;\nloop invariant in + 1 < inlen - 1 ==> in + 1 < buflim;\nloop invariant buf + 1 < bufferlen - 2 ==> buf + 1 < buflim;\nloop invariant in + 1 < inlen - 1 ==> in + 1 < buflim;\nloop invariant buf + 1 < bufferlen - 2 ==> buf + 1 < buflim;\nloop invariant in + 1 < inlen - 1 ==> in + 1 < buflim;\nloop invariant buf + 1 < bufferlen - 2 ==> buf + 1 < buflim;\nloop invariant in + 1 < inlen - 1 ==> in + 1 < buflim;\nloop invariant buf + 1 < bufferlen - 2 ==> buf + 1 < buflim;\nloop invariant in + 1 < inlen - 1 ==> in + 1 < buflim;\nloop invariant buf + 1 < bufferlen - 2 ==> buf + 1 < buflim;\nloop invariant in + 1 < inlen - 1 ==> in + 1 < buflim;\nloop invariant buf + 1 < bufferlen - 2 ==> buf + 1 < buflim;\nloop invariant in + 1 < inlen - 1 ==> in + 1 < buflim;\nloop invariant buf + 1 < bufferlen - 2 ==> buf + 1 < buflim;\nloop invariant in + 1 < inlen - 1 ==> in + 1 < buflim;\nloop invariant buf + 1 < bufferlen - 2 ==> buf + 1 < buflim;\nloop invariant in + 1 < inlen - 1 ==> in + 1 < buflim;\nloop invariant buf + 1 < bufferlen - 2 ==> buf + 1 < buflim;\nloop invariant in + 1 < inlen - 1 ==> in + 1 < buflim;\nloop invariant buf + 1 < bufferlen - 2 ==> buf + 1 < buflim;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= __BLAST_NONDET;\nloop invariant 0 <= in;\nloop invariant in < inlen;\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant bufferlen > 1;\nloop invariant inlen > 0;\nloop invariant bufferlen < inlen;\nloop invariant buf == buflim ==> __BLAST_NONDET == 0;\nloop invariant __BLAST_NONDET == 0 ==> buf != buflim;\nloop invariant __BLAST_NONDET ==> buf < bufferlen;\nloop invariant __BLAST_NONDET ==> buf < inlen;\nloop invariant __BLAST_NONDET ==> in < bufferlen;\nloop invariant __BLAST_NONDET ==> in < inlen;\nloop invariant __BLAST_NONDET ==> 0 <= buf;\nloop invariant __BLAST_NONDET ==> 0 <= in;\nloop invariant __BLAST_NONDET ==> 0 <= buflim;\nloop invariant __BLAST_NONDET ==> 0 <= bufferlen;\nloop invariant __BLAST_NONDET ==> 0 <= inlen;\nloop invariant __BLAST_NONDET ==> 0 <= bufferlen;\nloop invariant __BLAST_NONDET ==> 0 <= inlen;\nloop invariant __BLAST_NONDET ==> bufferlen > 1;\nloop invariant __BLAST_NONDET ==> inlen > 0;\nloop invariant __BLAST_NONDET ==> bufferlen < inlen;\nloop invariant __BLAST_NONDET ==> buf == buflim;\nloop invariant __BLAST_NONDET ==> buf < bufferlen;\nloop invariant __BLAST_NONDET ==> buf < inlen;\nloop invariant __BLAST_NONDET ==> in < bufferlen;\nloop invariant __BLAST_NONDET ==> in < inlen;\nloop invariant __BLAST_NONDET ==> 0 <= buf;\nloop invariant __BLAST_NONDET ==> 0 <= in;\nloop invariant __BLAST_NONDET ==> 0 <= buflim;\nloop invariant __BLAST_NONDET ==> 0 <= bufferlen;\nloop invariant __BLAST_NONDET ==> 0 <= inlen;\nloop invariant __BLAST_NONDET ==> bufferlen > 1;\nloop invariant __BLAST_NONDET ==> inlen > 0;\nloop invariant __BLAST_NONDET ==> bufferlen < inlen;\nloop invariant __BLAST_NONDET ==> buf == buflim;\nloop invariant __BLAST_NONDET ==> buf < bufferlen;\nloop invariant __BLAST_NONDET ==> buf < inlen;\nloop invariant __BLAST_NONDET ==> in < bufferlen;\nloop invariant __BLAST_NONDET ==> in < inlen;\nloop invariant __BLAST_NONDET ==> 0 <= buf;\nloop invariant __BLAST_NONDET ==> 0 <= in;\nloop invariant __BLAST_NONDET ==> 0 <= buflim;\nloop invariant __BLAST_NONDET ==> 0 <= bufferlen;\nloop invariant __BLAST_NONDET ==> 0 <= inlen;\nloop invariant __BLAST_NONDET ==> bufferlen > 1;\nloop invariant __BLAST_NONDET ==> inlen > 0;\nloop invariant __BLAST_NONDET ==> bufferlen < inlen;\nloop invariant __BLAST_NONDET ==> buf == buflim;\nloop invariant __BLAST_NONDET ==> buf < bufferlen;\nloop invariant __BLAST_NONDET ==> buf < inlen;\nloop invariant __BLAST_NONDET ==> in < bufferlen;\nloop invariant __BLAST_NONDET ==> in < inlen;\nloop invariant __BLAST_NONDET ==> 0 <= buf;\nloop invariant __BLAST_NONDET ==> 0 <= in;\nloop invariant __BLAST_NONDET ==> 0 <= buflim;\nloop invariant __BLAST_NONDET ==> 0 <= bufferlen;\nloop invariant __BLAST_NONDET ==> 0 <= inlen;\nloop invariant __BLAST_NONDET ==> bufferlen > 1;\nloop invariant __BLAST_NONDET ==> inlen > 0;\nloop invariant __BLAST_NONDET ==> bufferlen < inlen;\nloop invariant __BLAST_NONDET ==> buf == buflim;\nloop invariant __BLAST_NONDET ==> buf < bufferlen;\nloop invariant __BLAST_NONDET ==> buf < inlen;\nloop invariant __BLAST_NONDET ==> in < bufferlen;\nloop invariant __BLAST_NONDET ==> in < inlen;\nloop invariant __BLAST_NONDET ==> 0 <= buf;\nloop invariant __BLAST_NONDET ==> 0 <= in;\nloop invariant __BLAST_NONDET ==> 0 <= buflim;\nloop invariant __BLAST_NONDET ==> 0 <= bufferlen;\nloop invariant __BLAST_NONDET ==> 0 <= inlen;\nloop invariant __BLAST_NONDET ==> bufferlen > 1;\nloop invariant __BLAST_NONDET ==> inlen > 0;\nloop invariant __BLAST_NONDET ==> bufferlen < inlen;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= buf < bufferlen;\nloop invariant 0 <= in <= inlen;\nloop invariant 0 <= buf <= buflim;\nloop invariant buf < buflim ==> in < inlen;\nloop invariant (buf == buflim) ==> (in == inlen-1);\n*/\n```",
            "```\n/*@\nloop invariant 1 <= buf <= buflim + 2;\nloop invariant 1 <= in <= inlen;\nloop invariant buf <= buflim;\nloop invariant in < inlen;\nloop invariant buflim < bufferlen;\nloop invariant inlen <= bufferlen;\nloop invariant __BLAST_NONDET ==> buf <= buflim;\nloop invariant __BLAST_NONDET ==> in < inlen;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= buf <= bufferlen - 1;\nloop invariant 0 <= in <= inlen - 1;\nloop invariant 0 <= buflim < bufferlen - 2;\nloop invariant (buf < buflim ==> buflim < bufferlen - 2);\nloop invariant (buf == buflim ==> buf < bufferlen - 1);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= buf <= buflim;\nloop invariant 0 <= in <= inlen;\nloop invariant buf <= buflim;\nloop invariant in <= inlen;\nloop invariant buf < bufferlen;\nloop invariant in < inlen;\nloop invariant 0 <= buf < bufferlen;\nloop invariant 0 <= in < inlen;\nloop invariant buf < buflim + 2;\nloop invariant in < inlen;\nloop invariant buf < bufferlen - 2;\nloop invariant in < inlen;\nloop invariant buf < bufferlen - 2;\nloop invariant in < inlen;\nloop invariant buf < bufferlen - 2;\nloop invariant in < inlen;\nloop invariant buf < bufferlen - 2;\nloop invariant in < inlen;\nloop invariant buf < bufferlen - 2;\nloop invariant in < inlen;\nloop invariant buf < bufferlen - 2;\nloop invariant in < inlen;\nloop invariant buf < bufferlen - 2;\nloop invariant in < inlen;\nloop invariant buf < bufferlen - 2;\nloop invariant in < inlen;\nloop invariant buf < bufferlen - 2;\nloop invariant in < inlen;\nloop invariant buf < bufferlen - 2;\nloop invariant in < inlen;\nloop invariant buf < bufferlen - 2;\nloop invariant in < inlen;\nloop invariant buf < bufferlen - 2;\nloop invariant in < inlen;\nloop invariant buf < bufferlen - 2;\nloop invariant in < inlen;\nloop invariant buf < bufferlen - 2;\nloop invariant in < inlen;\nloop invariant buf < bufferlen - 2;\nloop invariant in < inlen;\nloop invariant buf < bufferlen - 2;\nloop invariant in < inlen;\nloop invariant buf < bufferlen - 2;\nloop invariant in < inlen;\nloop invariant buf < bufferlen - 2;\nloop invariant in < inlen;\nloop invariant buf < bufferlen - 2;\nloop invariant in < inlen;\nloop invariant buf < bufferlen - 2;\nloop invariant in < inlen;\nloop invariant buf < bufferlen - 2;\nloop invariant in < inlen;\nloop invariant buf < bufferlen - 2;\nloop invariant in < inlen;\nloop invariant buf < bufferlen - 2;\nloop invariant in < inlen;\nloop invariant buf < bufferlen - 2;\nloop invariant in < inlen;\nloop invariant buf < bufferlen - 2;\nloop invariant in < inlen;\nloop invariant buf < bufferlen - 2;\nloop invariant in < inlen;\nloop invariant buf < bufferlen - 2;\nloop invariant in < inlen;\nloop invariant buf < bufferlen - 2;\nloop invariant in < inlen;\nloop invariant buf < bufferlen - 2;\nloop invariant in < inlen;\nloop invariant buf < bufferlen - 2;\nloop invariant in < inlen;\nloop invariant buf < bufferlen - 2;\nloop invariant in < inlen;\nloop invariant buf < bufferlen - 2;\nloop invariant in < inlen;\nloop invariant buf < bufferlen - 2;\nloop invariant in < inlen;\nloop invariant buf < bufferlen - 2;\nloop invariant in < inlen;\nloop invariant buf < bufferlen - 2;\nloop invariant in < inlen;\nloop invariant buf < bufferlen - 2;\nloop invariant in < inlen;\nloop invariant buf < bufferlen - 2;\nloop invariant in < inlen;\nloop invariant buf < bufferlen - 2;\nloop invariant in < inlen;\nloop invariant buf < bufferlen - 2;\nloop invariant in < inlen;\nloop invariant buf < bufferlen - 2;\nloop invariant in < inlen;\nloop invariant buf < bufferlen - 2;\nloop invariant in < inlen;\nloop invariant buf < bufferlen - 2;\nloop invariant in < inlen;\nloop invariant buf < bufferlen - 2;\nloop invariant in < inlen;\nloop invariant buf < bufferlen - 2;\nloop invariant in < inlen;\nloop invariant buf < bufferlen - 2;\nloop invariant in < inlen;\nloop invariant buf < bufferlen - 2;\nloop invariant in < inlen;\nloop invariant buf < bufferlen - 2;\nloop invariant in < inlen;\nloop invariant buf < bufferlen - 2;\nloop invariant in < inlen;\nloop invariant buf < bufferlen - 2;\nloop invariant in < inlen;\nloop invariant buf < bufferlen - 2;\nloop invariant in < inlen;\nloop invariant buf < bufferlen - 2;\nloop invariant in < inlen;\nloop invariant buf < bufferlen - 2;\nloop invariant in < inlen;\nloop invariant buf < bufferlen - 2;\nloop invariant in < inlen;\nloop invariant buf < bufferlen - 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= buf < bufferlen;\nloop invariant 0 <= in < inlen;\nloop invariant buf <= buflim;\nloop invariant buf == buflim ==> 0 <= in < inlen;\nloop invariant !(__BLAST_NONDET) ==> 0 <= buf < bufferlen;\nloop invariant !(__BLAST_NONDET) ==> 0 <= in < inlen;\nloop invariant !(__BLAST_NONDET) ==> buf <= buflim;\nloop invariant !(__BLAST_NONDET) ==> buf == buflim ==> 0 <= in < inlen;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= buf <= bufferlen;\nloop invariant 0 <= in <= inlen;\nloop invariant buf < buflim ==> in < inlen;\nloop invariant buf == buflim ==> in == inlen;\nloop invariant (buf == 0 && in == 0) ==> (inlen >= 0);\nloop invariant (buf == buflim && in == inlen) ==> (bufferlen >= 0);\nloop invariant (buf == buflim && in == inlen) ==> (inlen >= 0);\nloop invariant (buf == buflim && in == inlen) ==> (bufferlen >= inlen);\nloop invariant (buf == buflim && in == inlen) ==> (bufferlen >= 0);\nloop invariant (buf == buflim && in == inlen) ==> (inlen >= 0);\nloop invariant (buf == buflim && in == inlen) ==> (bufferlen >= 0);\nloop invariant (buf == buflim && in == inlen) ==> (inlen >= 0);\nloop invariant (buf == buflim && in == inlen) ==> (bufferlen >= 0);\nloop invariant (buf == buflim && in == inlen) ==> (inlen >= 0);\nloop invariant (buf == buflim && in == inlen) ==> (bufferlen >= 0);\nloop invariant (buf == buflim && in == inlen) ==> (inlen >= 0);\nloop invariant (buf == buflim && in == inlen) ==> (bufferlen >= 0);\nloop invariant (buf == buflim && in == inlen) ==> (inlen >= 0);\nloop invariant (buf == buflim && in == inlen) ==> (bufferlen >= 0);\nloop invariant (buf == buflim && in == inlen) ==> (inlen >= 0);\nloop invariant (buf == buflim && in == inlen) ==> (bufferlen >= 0);\nloop invariant (buf == buflim && in == inlen) ==> (inlen >= 0);\nloop invariant (buf == buflim && in == inlen) ==> (bufferlen >= 0);\nloop invariant (buf == buflim && in == inlen) ==> (inlen >= 0);\nloop invariant (buf == buflim && in == inlen) ==> (bufferlen >= 0);\nloop invariant (buf == buflim && in == inlen) ==> (inlen >= 0);\nloop invariant (buf == buflim && in == inlen) ==> (bufferlen >= 0);\nloop invariant (buf == buflim && in == inlen) ==> (inlen >= 0);\nloop invariant (buf == buflim && in == inlen) ==> (bufferlen >= 0);\nloop invariant (buf == buflim && in == inlen) ==> (inlen >= 0);\nloop invariant (buf == buflim && in == inlen) ==> (bufferlen >= 0);\nloop invariant (buf == buflim && in == inlen) ==> (inlen >= 0);\nloop invariant (buf == buflim && in == inlen) ==> (bufferlen >= 0);\nloop invariant (buf == buflim && in == inlen) ==> (inlen >= 0);\nloop invariant (buf == buflim && in == inlen) ==> (bufferlen >= 0);\nloop invariant (buf == buflim && in == inlen) ==> (inlen >= 0);\nloop invariant (buf == buflim && in == inlen) ==> (bufferlen >= 0);\nloop invariant (buf == buflim && in == inlen) ==> (inlen >= 0);\nloop invariant (buf == buflim && in == inlen) ==> (bufferlen >= 0);\nloop invariant (buf == buflim && in == inlen) ==> (inlen >= 0);\nloop invariant (buf == buflim && in == inlen) ==> (bufferlen >= 0);\nloop invariant (buf == buflim && in == inlen) ==> (inlen >= 0);\nloop invariant (buf == buflim && in == inlen) ==> (bufferlen >= 0);\nloop invariant (buf == buflim && in == inlen) ==> (inlen >= 0);\nloop invariant (buf == buflim && in == inlen) ==> (bufferlen >= 0);\nloop invariant (buf == buflim && in == inlen) ==> (inlen >= 0);\nloop invariant (buf == buflim && in == inlen) ==> (bufferlen >= 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= in <= inlen;\nloop invariant 0 <= buf <= buflim;\nloop invariant buf <= buflim;\nloop invariant buf == buflim ==> in == inlen;\nloop invariant in == inlen ==> buf == buflim;\nloop invariant buf <= buflim ==> in < inlen;\nloop invariant in < inlen ==> buf <= buflim;\nloop invariant buf <= buflim ==> in <= inlen;\nloop invariant in <= inlen ==> buf <= buflim;\nloop invariant buf <= buflim ==> in <= inlen;\nloop invariant in <= inlen ==> buf <= buflim;\nloop invariant buf <= buflim ==> in <= inlen;\nloop invariant in <= inlen ==> buf <= buflim;\nloop invariant buf <= buflim ==> in <= inlen;\nloop invariant in <= inlen ==> buf <= buflim;\nloop invariant buf <= buflim ==> in <= inlen;\nloop invariant in <= inlen ==> buf <= buflim;\nloop invariant buf <= buflim ==> in <= inlen;\nloop invariant in <= inlen ==> buf <= buflim;\nloop invariant buf <= buflim ==> in <= inlen;\nloop invariant in <= inlen ==> buf <= buflim;\nloop invariant buf <= buflim ==> in <= inlen;\nloop invariant in <= inlen ==> buf <= buflim;\nloop invariant buf <= buflim ==> in <= inlen;\nloop invariant in <= inlen ==> buf <= buflim;\nloop invariant buf <= buflim ==> in <= inlen;\nloop invariant in <= inlen ==> buf <= buflim;\nloop invariant buf <= buflim ==> in <= inlen;\nloop invariant in <= inlen ==> buf <= buflim;\nloop invariant buf <= buflim ==> in <= inlen;\nloop invariant in <= inlen ==> buf <= buflim;\nloop invariant buf <= buflim ==> in <= inlen;\nloop invariant in <= inlen ==> buf <= buflim;\nloop invariant buf <= buflim ==> in <= inlen;\nloop invariant in <= inlen ==> buf <= buflim;\nloop invariant buf <= buflim ==> in <= inlen;\nloop invariant in <= inlen ==> buf <= buflim;\nloop invariant buf <= buflim ==> in <= inlen;\nloop invariant in <= inlen ==> buf <= buflim;\nloop invariant buf <= buflim ==> in <= inlen;\nloop invariant in <= inlen ==> buf <= buflim;\nloop invariant buf <= buflim ==> in <= inlen;\nloop invariant in <= inlen ==> buf <= buflim;\nloop invariant buf <= buflim ==> in <= inlen;\nloop invariant in <= inlen ==> buf <= buflim;\nloop invariant buf <= buflim ==> in <= inlen;\nloop invariant in <= inlen ==> buf <= buflim;\nloop invariant buf <= buflim ==> in <= inlen;\nloop invariant in <= inlen ==> buf <= buflim;\nloop invariant buf <= buflim ==> in <= inlen;\nloop invariant in <= inlen ==> buf <= buflim;\nloop invariant buf <= buflim ==> in <= inlen;\nloop invariant in <= inlen ==> buf <= buflim;\nloop invariant buf <= buflim ==> in <= inlen;\nloop invariant in <= inlen ==> buf <= buflim;\nloop invariant buf <= buflim ==> in <= inlen;\nloop invariant in <= inlen ==> buf <= buflim;\nloop invariant buf <= buflim ==> in <= inlen;\nloop invariant in <= inlen ==> buf <= buflim;\nloop invariant buf <= buflim ==> in <= inlen;\nloop invariant in <= inlen ==> buf <= buflim;\nloop invariant buf <= buflim ==> in <= inlen;\nloop invariant in <= inlen ==> buf <= buflim;\nloop invariant buf <= buflim ==> in <= inlen;\nloop invariant in <= inlen ==> buf <= buflim;\nloop invariant buf <= buflim ==> in <= inlen;\nloop invariant in <= inlen ==> buf <= buflim;\nloop invariant buf <= buflim ==> in <= inlen;\nloop invariant in <= inlen ==> buf <= buflim;\nloop invariant buf <= buflim ==> in <= inlen;\nloop invariant in <= inlen ==> buf <= buflim;\nloop invariant buf <= buflim ==> in <= inlen;\nloop invariant in <= inlen ==> buf <= buflim;\nloop invariant buf <= buflim ==> in <= inlen;\nloop invariant in <= inlen ==> buf <= buflim;\nloop invariant buf <= buflim ==> in <= inlen;\nloop invariant in <= inlen ==> buf <= buflim;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= buf <= bufferlen;\nloop invariant 0 <= in < inlen;\nloop invariant buf <= buflim;\nloop invariant buf < bufferlen;\nloop invariant in < inlen;\nloop invariant buflim < bufferlen;\nloop invariant buf + 1 < bufferlen;\nloop invariant buf + 2 < bufferlen;\nloop invariant buf + 3 < bufferlen;\nloop invariant buf + 4 < bufferlen;\nloop invariant buf + 5 < bufferlen;\nloop invariant buf + 6 < bufferlen;\nloop invariant buf + 7 < bufferlen;\nloop invariant buf + 8 < bufferlen;\nloop invariant buf + 9 < bufferlen;\nloop invariant buf + 10 < bufferlen;\nloop invariant buf + 11 < bufferlen;\nloop invariant buf + 12 < bufferlen;\nloop invariant buf + 13 < bufferlen;\nloop invariant buf + 14 < bufferlen;\nloop invariant buf + 15 < bufferlen;\nloop invariant buf + 16 < bufferlen;\nloop invariant buf + 17 < bufferlen;\nloop invariant buf + 18 < bufferlen;\nloop invariant buf + 19 < bufferlen;\nloop invariant buf + 20 < bufferlen;\nloop invariant buf + 21 < bufferlen;\nloop invariant buf + 22 < bufferlen;\nloop invariant buf + 23 < bufferlen;\nloop invariant buf + 24 < bufferlen;\nloop invariant buf + 25 < bufferlen;\nloop invariant buf + 26 < bufferlen;\nloop invariant buf + 27 < bufferlen;\nloop invariant buf + 28 < bufferlen;\nloop invariant buf + 29 < bufferlen;\nloop invariant buf + 30 < bufferlen;\nloop invariant buf + 31 < bufferlen;\nloop invariant buf + 32 < bufferlen;\nloop invariant buf + 33 < bufferlen;\nloop invariant buf + 34 < bufferlen;\nloop invariant buf + 35 < bufferlen;\nloop invariant buf + 36 < bufferlen;\nloop invariant buf + 37 < bufferlen;\nloop invariant buf + 38 < bufferlen;\nloop invariant buf + 39 < bufferlen;\nloop invariant buf + 40 < bufferlen;\nloop invariant buf + 41 < bufferlen;\nloop invariant buf + 42 < bufferlen;\nloop invariant buf + 43 < bufferlen;\nloop invariant buf + 44 < bufferlen;\nloop invariant buf + 45 < bufferlen;\nloop invariant buf + 46 < bufferlen;\nloop invariant buf + 47 < bufferlen;\nloop invariant buf + 48 < bufferlen;\nloop invariant buf + 49 < bufferlen;\nloop invariant buf + 50 < bufferlen;\nloop invariant buf + 51 < bufferlen;\nloop invariant buf + 52 < bufferlen;\nloop invariant buf + 53 < bufferlen;\nloop invariant buf + 54 < bufferlen;\nloop invariant buf + 55 < bufferlen;\nloop invariant buf + 56 < bufferlen;\nloop invariant buf + 57 < bufferlen;\nloop invariant buf + 58 < bufferlen;\nloop invariant buf + 59 < bufferlen;\nloop invariant buf + 60 < bufferlen;\nloop invariant buf + 61 < bufferlen;\nloop invariant buf + 62 < bufferlen;\nloop invariant buf + 63 < bufferlen;\nloop invariant buf + 64 < bufferlen;\nloop invariant buf + 65 < bufferlen;\nloop invariant buf + 66 < bufferlen;\nloop invariant buf + 67 < bufferlen;\nloop invariant buf + 68 < bufferlen;\nloop invariant buf + 69 < bufferlen;\nloop invariant buf + 70 < bufferlen;\nloop invariant buf + 71 < bufferlen;\nloop invariant buf + 72 < bufferlen;\nloop invariant buf + 73 < bufferlen;\nloop invariant buf + 74 < bufferlen;\nloop invariant buf + 75 < bufferlen;\nloop invariant buf + 76 < bufferlen;\nloop invariant buf + 77 < bufferlen;\nloop invariant buf + 78 < bufferlen;\nloop invariant buf + 79 < bufferlen;\nloop invariant buf + 80 < bufferlen;\nloop invariant buf + 81 < bufferlen;\nloop invariant buf + 82 < bufferlen;\nloop invariant buf + 83 < bufferlen;\nloop invariant buf + 84 < bufferlen;\nloop invariant buf + 85 < bufferlen;\nloop invariant buf + 86 < bufferlen;\nloop invariant buf + 87 < bufferlen;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main (void)\n{\n  \n  int __BLAST_NONDET;\n  int in;\n  int inlen;\n  int bufferlen;\n  int buf;\n  int buflim;\n\n  if(bufferlen >1);else goto END;\n  if(inlen > 0);else goto END;\n  if(bufferlen < inlen);else goto END;\n\n  buf = 0;\n  in = 0;\n  buflim = bufferlen - 2;\n    \n  /*@\nloop invariant i1: 0 <= buf <= bufferlen;\nloop invariant i2: 0 <= in < inlen;\nloop invariant i3: buf <= buflim;\nloop invariant i4: buf < bufferlen;\nloop invariant i5: in < inlen;\nloop invariant i6: buflim < bufferlen;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (__BLAST_NONDET)\n  {\n    if (buf == buflim)\n      break;\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n \n    buf++;\nout:\n    in++;\n    {;\n//@ assert(0<=in);\n}\n\n    {;\n//@ assert(in<inlen);\n}\n\n  }\n\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n  {;\n//@ assert(0<=buf);\n}\n\n  {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= buf <= bufferlen;\nloop invariant buf <= buflim;\nloop invariant 0 <= in <= inlen;\nloop invariant in <= bufferlen - 2;\nloop invariant buflim <= bufferlen - 2;\nloop invariant (buf == buflim) ==> (in == inlen - 1);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main (void)\n{\n  \n  int __BLAST_NONDET;\n  int in;\n  int inlen;\n  int bufferlen;\n  int buf;\n  int buflim;\n\n  if(bufferlen >1);else goto END;\n  if(inlen > 0);else goto END;\n  if(bufferlen < inlen);else goto END;\n\n  buf = 0;\n  in = 0;\n  buflim = bufferlen - 2;\n    \n  /*@\nloop invariant i1: 0 <= buf <= bufferlen;\nloop invariant i2: buf <= buflim;\nloop invariant i3: 0 <= in <= inlen;\n\nloop invariant i5: buflim <= bufferlen - 2;\n\n*/\nwhile (__BLAST_NONDET)\n  {\n    if (buf == buflim)\n      break;\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n \n    buf++;\nout:\n    in++;\n    {;\n//@ assert(0<=in);\n}\n\n    {;\n//@ assert(in<inlen);\n}\n\n  }\n\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n  {;\n//@ assert(0<=buf);\n}\n\n  {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= buf <= buflim;\nloop invariant 0 <= in <= inlen;\nloop invariant buf <= buflim;\nloop invariant in <= inlen;\nloop invariant (buf < bufferlen);\nloop invariant (in < inlen);\nloop invariant (in <= inlen);\nloop invariant (buf <= buflim);\nloop invariant (buf < bufferlen);\nloop invariant (buf <= buflim);\nloop invariant (buf <= buflim);\nloop invariant (buf < bufferlen);\nloop invariant (in <= inlen);\nloop invariant (buf <= buflim);\nloop invariant (buf < bufferlen);\nloop invariant (buf <= buflim);\nloop invariant (buf < bufferlen);\nloop invariant (in <= inlen);\nloop invariant (buf <= buflim);\nloop invariant (buf < bufferlen);\nloop invariant (buf <= buflim);\nloop invariant (buf < bufferlen);\nloop invariant (in <= inlen);\nloop invariant (buf <= buflim);\nloop invariant (buf < bufferlen);\nloop invariant (buf <= buflim);\nloop invariant (buf < bufferlen);\nloop invariant (in <= inlen);\nloop invariant (buf <= buflim);\nloop invariant (buf < bufferlen);\nloop invariant (buf <= buflim);\nloop invariant (buf < bufferlen);\nloop invariant (in <= inlen);\nloop invariant (buf <= buflim);\nloop invariant (buf < bufferlen);\nloop invariant (buf <= buflim);\nloop invariant (buf < bufferlen);\nloop invariant (in <= inlen);\nloop invariant (buf <= buflim);\nloop invariant (buf < bufferlen);\nloop invariant (buf <= buflim);\nloop invariant (buf < bufferlen);\nloop invariant (in <= inlen);\nloop invariant (buf <= buflim);\nloop invariant (buf < bufferlen);\nloop invariant (buf <= buflim);\nloop invariant (buf < bufferlen);\nloop invariant (in <= inlen);\nloop invariant (buf <= buflim);\nloop invariant (buf < bufferlen);\nloop invariant (buf <= buflim);\nloop invariant (buf < bufferlen);\nloop invariant (in <= inlen);\nloop invariant (buf <= buflim);\nloop invariant (buf < bufferlen);\nloop invariant (buf <= buflim);\nloop invariant (buf < bufferlen);\nloop invariant (in <= inlen);\nloop invariant (buf <= buflim);\nloop invariant (buf < bufferlen);\nloop invariant (buf <= buflim);\nloop invariant (buf < bufferlen);\nloop invariant (in <= inlen);\nloop invariant (buf <= buflim);\nloop invariant (buf < bufferlen);\nloop invariant (buf <= buflim);\nloop invariant (buf < bufferlen);\nloop invariant (in <= inlen);\nloop invariant (buf <= buflim);\nloop invariant (buf < bufferlen);\nloop invariant (buf <= buflim);\nloop invariant (buf < bufferlen);\nloop invariant (in <= inlen);\nloop invariant (buf <= buflim);\nloop invariant (buf < bufferlen);\nloop invariant (buf <= buflim);\nloop invariant (buf < bufferlen);\nloop invariant (in <= inlen);\nloop invariant (buf <= buflim);\nloop invariant (buf < bufferlen);\nloop invariant (buf <= buflim);\nloop invariant (buf < bufferlen);\nloop invariant (in <= inlen);\nloop invariant (buf <= buflim);\nloop invariant (buf < bufferlen);\nloop invariant (buf <= buflim);\nloop invariant (buf < bufferlen);\nloop invariant (in <= inlen);\nloop invariant (buf <= buflim);\nloop invariant (buf < bufferlen);\nloop invariant (buf <= buflim);\nloop invariant (buf < bufferlen);\nloop invariant (in <= inlen);\nloop invariant (buf <= buflim);\nloop invariant (buf < bufferlen);\nloop invariant (buf <= buflim);\nloop invariant (buf < bufferlen);\nloop invariant (in <= inlen);\nloop invariant (buf <= buflim);\nloop invariant (buf < bufferlen);\nloop invariant (buf <= buflim);\nloop invariant (buf < bufferlen);\nloop invariant (in <= inlen);\nloop invariant (buf <= buflim);\nloop invariant (buf < bufferlen);\nloop invariant (buf <= buflim);\nloop invariant (buf < bufferlen);\nloop invariant (in <= inlen);\nloop invariant (buf <= buflim);\nloop invariant (buf < bufferlen);\nloop invariant (buf <= buflim);\nloop invariant (buf < bufferlen);\nloop invariant (in <= inlen);\nloop invariant (buf <= buflim);\nloop invariant (buf < bufferlen);\nloop invariant (buf <= buflim);\nloop invariant (buf < bufferlen);\nloop invariant (in <= inlen);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main (void)\n{\n  \n  int __BLAST_NONDET;\n  int in;\n  int inlen;\n  int bufferlen;\n  int buf;\n  int buflim;\n\n  if(bufferlen >1);else goto END;\n  if(inlen > 0);else goto END;\n  if(bufferlen < inlen);else goto END;\n\n  buf = 0;\n  in = 0;\n  buflim = bufferlen - 2;\n    \n  /*@\nloop invariant i1: 0 <= buf <= buflim;\nloop invariant i2: 0 <= in <= inlen;\nloop invariant i3: buf <= buflim;\nloop invariant i4: in <= inlen;\n\nloop invariant i6: (in < inlen);\nloop invariant i7: (in <= inlen);\nloop invariant i8: (buf <= buflim);\n*/\nwhile (__BLAST_NONDET)\n  {\n    if (buf == buflim)\n      break;\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n \n    buf++;\nout:\n    in++;\n    {;\n//@ assert(0<=in);\n}\n\n    {;\n//@ assert(in<inlen);\n}\n\n  }\n\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n  {;\n//@ assert(0<=buf);\n}\n\n  {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main (void)\n{\n  \n  int __BLAST_NONDET;\n  int in;\n  int inlen;\n  int bufferlen;\n  int buf;\n  int buflim;\n\n  if(bufferlen >1);else goto END;\n  if(inlen > 0);else goto END;\n  if(bufferlen < inlen);else goto END;\n\n  buf = 0;\n  in = 0;\n  buflim = bufferlen - 2;\n    \n  /*@\n\n*/\nwhile (__BLAST_NONDET)\n  {\n    if (buf == buflim)\n      break;\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n \n    buf++;\nout:\n    in++;\n    {;\n//@ assert(0<=in);\n}\n\n    {;\n//@ assert(in<inlen);\n}\n\n  }\n\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n  {;\n//@ assert(0<=buf);\n}\n\n  {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= buf <= buflim + 1;\nloop invariant 0 <= in <= inlen;\nloop invariant __BLAST_NONDET ==> buf <= buflim;\nloop invariant !__BLAST_NONDET ==> (buf < bufferlen);\nloop invariant !__BLAST_NONDET ==> (in < inlen);\nloop invariant __BLAST_NONDET ==> (in == inlen);\nloop invariant !__BLAST_NONDET ==> (buf == buflim + 1);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main (void)\n{\n  \n  int __BLAST_NONDET;\n  int in;\n  int inlen;\n  int bufferlen;\n  int buf;\n  int buflim;\n\n  if(bufferlen >1);else goto END;\n  if(inlen > 0);else goto END;\n  if(bufferlen < inlen);else goto END;\n\n  buf = 0;\n  in = 0;\n  buflim = bufferlen - 2;\n    \n  /*@\nloop invariant i1: 0 <= buf <= buflim + 1;\nloop invariant i2: 0 <= in <= inlen;\nloop invariant i3: __BLAST_NONDET ==> buf <= buflim;\nloop invariant i4: !__BLAST_NONDET ==> (buf < bufferlen);\nloop invariant i5: !__BLAST_NONDET ==> (in < inlen);\n\n\n*/\nwhile (__BLAST_NONDET)\n  {\n    if (buf == buflim)\n      break;\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n \n    buf++;\nout:\n    in++;\n    {;\n//@ assert(0<=in);\n}\n\n    {;\n//@ assert(in<inlen);\n}\n\n  }\n\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n  {;\n//@ assert(0<=buf);\n}\n\n  {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 8,
                "annotations": "```\n/*@\nloop invariant 0 <= buf <= bufferlen - 1;\nloop invariant 0 <= in <= inlen - 1;\nloop invariant buf < buflim ==> buf == buflim;\nloop invariant buf < buflim ==> buf <= buflim;\nloop invariant buf < buflim ==> buf >= 0;\nloop invariant buf <= buflim ==> buf == buflim;\nloop invariant buf <= buflim ==> buf <= buflim;\nloop invariant buf <= buflim ==> buf >= 0;\nloop invariant buf >= 0 ==> buf < buflim;\nloop invariant buf >= 0 ==> buf <= buflim;\nloop invariant buf >= 0 ==> buf >= 0;\nloop invariant 0 <= in ==> in < inlen;\nloop invariant 0 <= in ==> in <= inlen;\nloop invariant 0 <= in ==> in >= 0;\nloop invariant in < inlen ==> in <= inlen;\nloop invariant in < inlen ==> in >= 0;\nloop invariant in <= inlen ==> in < inlen;\nloop invariant in <= inlen ==> in <= inlen;\nloop invariant in <= inlen ==> in >= 0;\nloop invariant in >= 0 ==> in < inlen;\nloop invariant in >= 0 ==> in <= inlen;\nloop invariant in >= 0 ==> in >= 0;\nloop invariant buflim == bufferlen - 2;\nloop invariant bufferlen < inlen ==> buflim == bufferlen - 2;\nloop invariant inlen <= bufferlen ==> buflim == bufferlen - 2;\nloop invariant buflim == bufferlen - 2 ==> bufferlen < inlen;\nloop invariant buflim == bufferlen - 2 ==> inlen <= bufferlen;\nloop invariant buflim == bufferlen - 2 ==> buflim == bufferlen - 2;\nloop invariant (__BLAST_NONDET) ==> buf == buflim;\nloop invariant (__BLAST_NONDET) ==> buf <= buflim;\nloop invariant (__BLAST_NONDET) ==> buf >= 0;\nloop invariant (__BLAST_NONDET) ==> buf < buflim;\nloop invariant (__BLAST_NONDET) ==> buf <= buflim;\nloop invariant (__BLAST_NONDET) ==> buf >= 0;\nloop invariant (__BLAST_NONDET) ==> in < inlen;\nloop invariant (__BLAST_NONDET) ==> in <= inlen;\nloop invariant (__BLAST_NONDET) ==> in >= 0;\nloop invariant (__BLAST_NONDET) ==> buflim == bufferlen - 2;\nloop invariant (__BLAST_NONDET) ==> bufferlen < inlen;\nloop invariant (__BLAST_NONDET) ==> inlen <= bufferlen;\nloop invariant (__BLAST_NONDET) ==> buflim == bufferlen - 2;\nloop invariant (__BLAST_NONDET) ==> (__BLAST_NONDET) ==> buf == buflim;\nloop invariant (__BLAST_NONDET) ==> (__BLAST_NONDET) ==> buf <= buflim;\nloop invariant (__BLAST_NONDET) ==> (__BLAST_NONDET) ==> buf >= 0;\nloop invariant (__BLAST_NONDET) ==> (__BLAST_NONDET) ==> buf < buflim;\nloop invariant (__BLAST_NONDET) ==> (__BLAST_NONDET) ==> buf <= buflim;\nloop invariant (__BLAST_NONDET) ==> (__BLAST_NONDET) ==> buf >= 0;\nloop invariant (__BLAST_NONDET) ==> (__BLAST_NONDET) ==> in < inlen;\nloop invariant (__BLAST_NONDET) ==> (__BLAST_NONDET) ==> in <= inlen;\nloop invariant (__BLAST_NONDET) ==> (__BLAST_NONDET) ==> in >= 0;\nloop invariant (__BLAST_NONDET) ==> (__BLAST_NONDET) ==> buflim == bufferlen - 2;\nloop invariant (__BLAST_NONDET) ==> (__BLAST_NONDET) ==> bufferlen < inlen;\nloop invariant (__BLAST_NONDET) ==> (__BLAST_NONDET) ==> inlen <= bufferlen;\nloop invariant (__BLAST_NONDET) ==> (__BLAST_NONDET) ==> buflim == bufferlen - 2;\nloop invariant (__BLAST_NONDET) ==> (__BLAST_NONDET) ==> (__BLAST_NONDET) ==> buf == buflim;\nloop invariant (__BLAST_NONDET) ==> (__BLAST_NONDET) ==> (__BLAST_NONDET) ==> buf <= buflim;\nloop invariant (__BLAST_NONDET) ==> (__BLAST_NONDET) ==> (__BLAST_NONDET) ==> buf >= 0;\nloop invariant (__BLAST_NONDET) ==> (__BLAST_NONDET) ==> (__BLAST_NONDET) ==> buf < buflim;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main (void)\n{\n  \n  int __BLAST_NONDET;\n  int in;\n  int inlen;\n  int bufferlen;\n  int buf;\n  int buflim;\n\n  if(bufferlen >1);else goto END;\n  if(inlen > 0);else goto END;\n  if(bufferlen < inlen);else goto END;\n\n  buf = 0;\n  in = 0;\n  buflim = bufferlen - 2;\n    \n  /*@\nloop invariant i1: 0 <= buf <= bufferlen - 1;\nloop invariant i2: 0 <= in <= inlen - 1;\n\nloop invariant i4: buf < buflim ==> buf <= buflim;\nloop invariant i5: buf < buflim ==> buf >= 0;\n\nloop invariant i7: buf <= buflim ==> buf <= buflim;\nloop invariant i8: buf <= buflim ==> buf >= 0;\n\nloop invariant i10: buf >= 0 ==> buf <= buflim;\nloop invariant i11: buf >= 0 ==> buf >= 0;\nloop invariant i12: 0 <= in ==> in < inlen;\nloop invariant i13: 0 <= in ==> in <= inlen;\nloop invariant i14: 0 <= in ==> in >= 0;\nloop invariant i15: in < inlen ==> in <= inlen;\nloop invariant i16: in < inlen ==> in >= 0;\nloop invariant i17: in <= inlen ==> in < inlen;\nloop invariant i18: in <= inlen ==> in <= inlen;\nloop invariant i19: in <= inlen ==> in >= 0;\nloop invariant i20: in >= 0 ==> in < inlen;\nloop invariant i21: in >= 0 ==> in <= inlen;\nloop invariant i22: in >= 0 ==> in >= 0;\nloop invariant i23: buflim == bufferlen - 2;\nloop invariant i24: bufferlen < inlen ==> buflim == bufferlen - 2;\nloop invariant i25: inlen <= bufferlen ==> buflim == bufferlen - 2;\nloop invariant i26: buflim == bufferlen - 2 ==> bufferlen < inlen;\n\nloop invariant i28: buflim == bufferlen - 2 ==> buflim == bufferlen - 2;\n\nloop invariant i30: (__BLAST_NONDET) ==> buf <= buflim;\nloop invariant i31: (__BLAST_NONDET) ==> buf >= 0;\n\nloop invariant i33: (__BLAST_NONDET) ==> in < inlen;\nloop invariant i34: (__BLAST_NONDET) ==> in <= inlen;\nloop invariant i35: (__BLAST_NONDET) ==> in >= 0;\nloop invariant i36: (__BLAST_NONDET) ==> buflim == bufferlen - 2;\nloop invariant i37: (__BLAST_NONDET) ==> bufferlen < inlen;\n\n\nloop invariant i40: (__BLAST_NONDET) ==> (__BLAST_NONDET) ==> buf <= buflim;\nloop invariant i41: (__BLAST_NONDET) ==> (__BLAST_NONDET) ==> buf >= 0;\n\nloop invariant i43: (__BLAST_NONDET) ==> (__BLAST_NONDET) ==> in < inlen;\nloop invariant i44: (__BLAST_NONDET) ==> (__BLAST_NONDET) ==> in <= inlen;\nloop invariant i45: (__BLAST_NONDET) ==> (__BLAST_NONDET) ==> in >= 0;\nloop invariant i46: (__BLAST_NONDET) ==> (__BLAST_NONDET) ==> buflim == bufferlen - 2;\nloop invariant i47: (__BLAST_NONDET) ==> (__BLAST_NONDET) ==> bufferlen < inlen;\n\n\nloop invariant i50: (__BLAST_NONDET) ==> (__BLAST_NONDET) ==> (__BLAST_NONDET) ==> buf <= buflim;\nloop invariant i51: (__BLAST_NONDET) ==> (__BLAST_NONDET) ==> (__BLAST_NONDET) ==> buf >= 0;\n\n*/\nwhile (__BLAST_NONDET)\n  {\n    if (buf == buflim)\n      break;\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n \n    buf++;\nout:\n    in++;\n    {;\n//@ assert(0<=in);\n}\n\n    {;\n//@ assert(in<inlen);\n}\n\n  }\n\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n  {;\n//@ assert(0<=buf);\n}\n\n  {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= buf <= bufferlen - 2;\nloop invariant 0 <= in <= inlen - 1;\nloop invariant (buf == buflim) ==> in == inlen - 1;\nloop invariant !(buf == buflim) ==> in < inlen - 1;\nloop invariant buf < buflim ==> buf < bufferlen - 2;\nloop invariant buf < buflim ==> in < inlen - 1;\nloop invariant in < inlen - 1 ==> buf < bufferlen - 2;\nloop invariant in < inlen - 1 ==> in < inlen - 1;\nloop invariant buf < buflim ==> buf + 1 < bufferlen - 2;\nloop invariant in < inlen - 1 ==> in + 1 < inlen - 1;\nloop invariant buf + 1 < buflim ==> buf + 1 < bufferlen - 2;\nloop invariant in + 1 < inlen - 1 ==> in + 1 < inlen - 1;\nloop invariant buf + 1 < buflim ==> buf + 1 < bufferlen - 1;\nloop invariant in + 1 < inlen - 1 ==> in + 1 < inlen;\nloop invariant buf + 1 < bufferlen - 2 ==> buf + 1 < bufferlen - 1;\nloop invariant in + 1 < inlen - 1 ==> in + 1 < inlen;\nloop invariant buf + 1 < bufferlen - 1 ==> buf + 1 < buflim;\nloop invariant in + 1 < inlen ==> in + 1 < inlen - 1;\nloop invariant buf + 1 < buflim ==> buf + 1 < inlen - 1;\nloop invariant in + 1 < inlen - 1 ==> in + 1 < buflim;\nloop invariant buf + 1 < buflim ==> buf + 1 < buflim;\nloop invariant in + 1 < inlen - 1 ==> in + 1 < buflim;\nloop invariant buf + 1 < bufferlen - 2 ==> buf + 1 < inlen - 1;\nloop invariant in + 1 < inlen - 1 ==> in + 1 < buflim;\nloop invariant buf + 1 < bufferlen - 2 ==> buf + 1 < buflim;\nloop invariant in + 1 < inlen - 1 ==> in + 1 < buflim;\nloop invariant buf + 1 < bufferlen - 2 ==> buf + 1 < buflim;\nloop invariant in + 1 < inlen - 1 ==> in + 1 < buflim;\nloop invariant buf + 1 < bufferlen - 2 ==> buf + 1 < buflim;\nloop invariant in + 1 < inlen - 1 ==> in + 1 < buflim;\nloop invariant buf + 1 < bufferlen - 2 ==> buf + 1 < buflim;\nloop invariant in + 1 < inlen - 1 ==> in + 1 < buflim;\nloop invariant buf + 1 < bufferlen - 2 ==> buf + 1 < buflim;\nloop invariant in + 1 < inlen - 1 ==> in + 1 < buflim;\nloop invariant buf + 1 < bufferlen - 2 ==> buf + 1 < buflim;\nloop invariant in + 1 < inlen - 1 ==> in + 1 < buflim;\nloop invariant buf + 1 < bufferlen - 2 ==> buf + 1 < buflim;\nloop invariant in + 1 < inlen - 1 ==> in + 1 < buflim;\nloop invariant buf + 1 < bufferlen - 2 ==> buf + 1 < buflim;\nloop invariant in + 1 < inlen - 1 ==> in + 1 < buflim;\nloop invariant buf + 1 < bufferlen - 2 ==> buf + 1 < buflim;\nloop invariant in + 1 < inlen - 1 ==> in + 1 < buflim;\nloop invariant buf + 1 < bufferlen - 2 ==> buf + 1 < buflim;\nloop invariant in + 1 < inlen - 1 ==> in + 1 < buflim;\nloop invariant buf + 1 < bufferlen - 2 ==> buf + 1 < buflim;\nloop invariant in + 1 < inlen - 1 ==> in + 1 < buflim;\nloop invariant buf + 1 < bufferlen - 2 ==> buf + 1 < buflim;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main (void)\n{\n  \n  int __BLAST_NONDET;\n  int in;\n  int inlen;\n  int bufferlen;\n  int buf;\n  int buflim;\n\n  if(bufferlen >1);else goto END;\n  if(inlen > 0);else goto END;\n  if(bufferlen < inlen);else goto END;\n\n  buf = 0;\n  in = 0;\n  buflim = bufferlen - 2;\n    \n  /*@\n\nloop invariant i2: 0 <= in <= inlen - 1;\n\n\n\n\n\nloop invariant i8: in < inlen - 1 ==> in < inlen - 1;\n\n\n\nloop invariant i12: in + 1 < inlen - 1 ==> in + 1 < inlen - 1;\n\nloop invariant i14: in + 1 < inlen - 1 ==> in + 1 < inlen;\nloop invariant i15: buf + 1 < bufferlen - 2 ==> buf + 1 < bufferlen - 1;\n\n\n\n\nloop invariant i20: buf + 1 < buflim ==> buf + 1 < buflim;\n\n\n*/\nwhile (__BLAST_NONDET)\n  {\n    if (buf == buflim)\n      break;\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n \n    buf++;\nout:\n    in++;\n    {;\n//@ assert(0<=in);\n}\n\n    {;\n//@ assert(in<inlen);\n}\n\n  }\n\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n  {;\n//@ assert(0<=buf);\n}\n\n  {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= __BLAST_NONDET;\nloop invariant 0 <= in;\nloop invariant in < inlen;\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant bufferlen > 1;\nloop invariant inlen > 0;\nloop invariant bufferlen < inlen;\nloop invariant buf == buflim ==> __BLAST_NONDET == 0;\nloop invariant __BLAST_NONDET == 0 ==> buf != buflim;\nloop invariant __BLAST_NONDET ==> buf < bufferlen;\nloop invariant __BLAST_NONDET ==> buf < inlen;\nloop invariant __BLAST_NONDET ==> in < bufferlen;\nloop invariant __BLAST_NONDET ==> in < inlen;\nloop invariant __BLAST_NONDET ==> 0 <= buf;\nloop invariant __BLAST_NONDET ==> 0 <= in;\nloop invariant __BLAST_NONDET ==> 0 <= buflim;\nloop invariant __BLAST_NONDET ==> 0 <= bufferlen;\nloop invariant __BLAST_NONDET ==> 0 <= inlen;\nloop invariant __BLAST_NONDET ==> 0 <= bufferlen;\nloop invariant __BLAST_NONDET ==> 0 <= inlen;\nloop invariant __BLAST_NONDET ==> bufferlen > 1;\nloop invariant __BLAST_NONDET ==> inlen > 0;\nloop invariant __BLAST_NONDET ==> bufferlen < inlen;\nloop invariant __BLAST_NONDET ==> buf == buflim;\nloop invariant __BLAST_NONDET ==> buf < bufferlen;\nloop invariant __BLAST_NONDET ==> buf < inlen;\nloop invariant __BLAST_NONDET ==> in < bufferlen;\nloop invariant __BLAST_NONDET ==> in < inlen;\nloop invariant __BLAST_NONDET ==> 0 <= buf;\nloop invariant __BLAST_NONDET ==> 0 <= in;\nloop invariant __BLAST_NONDET ==> 0 <= buflim;\nloop invariant __BLAST_NONDET ==> 0 <= bufferlen;\nloop invariant __BLAST_NONDET ==> 0 <= inlen;\nloop invariant __BLAST_NONDET ==> bufferlen > 1;\nloop invariant __BLAST_NONDET ==> inlen > 0;\nloop invariant __BLAST_NONDET ==> bufferlen < inlen;\nloop invariant __BLAST_NONDET ==> buf == buflim;\nloop invariant __BLAST_NONDET ==> buf < bufferlen;\nloop invariant __BLAST_NONDET ==> buf < inlen;\nloop invariant __BLAST_NONDET ==> in < bufferlen;\nloop invariant __BLAST_NONDET ==> in < inlen;\nloop invariant __BLAST_NONDET ==> 0 <= buf;\nloop invariant __BLAST_NONDET ==> 0 <= in;\nloop invariant __BLAST_NONDET ==> 0 <= buflim;\nloop invariant __BLAST_NONDET ==> 0 <= bufferlen;\nloop invariant __BLAST_NONDET ==> 0 <= inlen;\nloop invariant __BLAST_NONDET ==> bufferlen > 1;\nloop invariant __BLAST_NONDET ==> inlen > 0;\nloop invariant __BLAST_NONDET ==> bufferlen < inlen;\nloop invariant __BLAST_NONDET ==> buf == buflim;\nloop invariant __BLAST_NONDET ==> buf < bufferlen;\nloop invariant __BLAST_NONDET ==> buf < inlen;\nloop invariant __BLAST_NONDET ==> in < bufferlen;\nloop invariant __BLAST_NONDET ==> in < inlen;\nloop invariant __BLAST_NONDET ==> 0 <= buf;\nloop invariant __BLAST_NONDET ==> 0 <= in;\nloop invariant __BLAST_NONDET ==> 0 <= buflim;\nloop invariant __BLAST_NONDET ==> 0 <= bufferlen;\nloop invariant __BLAST_NONDET ==> 0 <= inlen;\nloop invariant __BLAST_NONDET ==> bufferlen > 1;\nloop invariant __BLAST_NONDET ==> inlen > 0;\nloop invariant __BLAST_NONDET ==> bufferlen < inlen;\nloop invariant __BLAST_NONDET ==> buf == buflim;\nloop invariant __BLAST_NONDET ==> buf < bufferlen;\nloop invariant __BLAST_NONDET ==> buf < inlen;\nloop invariant __BLAST_NONDET ==> in < bufferlen;\nloop invariant __BLAST_NONDET ==> in < inlen;\nloop invariant __BLAST_NONDET ==> 0 <= buf;\nloop invariant __BLAST_NONDET ==> 0 <= in;\nloop invariant __BLAST_NONDET ==> 0 <= buflim;\nloop invariant __BLAST_NONDET ==> 0 <= bufferlen;\nloop invariant __BLAST_NONDET ==> 0 <= inlen;\nloop invariant __BLAST_NONDET ==> bufferlen > 1;\nloop invariant __BLAST_NONDET ==> inlen > 0;\nloop invariant __BLAST_NONDET ==> bufferlen < inlen;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main (void)\n{\n  \n  int __BLAST_NONDET;\n  int in;\n  int inlen;\n  int bufferlen;\n  int buf;\n  int buflim;\n\n  if(bufferlen >1);else goto END;\n  if(inlen > 0);else goto END;\n  if(bufferlen < inlen);else goto END;\n\n  buf = 0;\n  in = 0;\n  buflim = bufferlen - 2;\n    \n  /*@\n\nloop invariant i2: 0 <= in;\nloop invariant i3: in < inlen;\nloop invariant i4: 0 <= buf;\n\nloop invariant i6: bufferlen > 1;\nloop invariant i7: inlen > 0;\nloop invariant i8: bufferlen < inlen;\n\n\n\nloop invariant i12: __BLAST_NONDET ==> buf < inlen;\n\nloop invariant i14: __BLAST_NONDET ==> in < inlen;\nloop invariant i15: __BLAST_NONDET ==> 0 <= buf;\nloop invariant i16: __BLAST_NONDET ==> 0 <= in;\nloop invariant i17: __BLAST_NONDET ==> 0 <= buflim;\nloop invariant i18: __BLAST_NONDET ==> 0 <= bufferlen;\nloop invariant i19: __BLAST_NONDET ==> 0 <= inlen;\nloop invariant i20: __BLAST_NONDET ==> bufferlen > 1;\nloop invariant i21: __BLAST_NONDET ==> inlen > 0;\nloop invariant i22: __BLAST_NONDET ==> bufferlen < inlen;\n\n*/\nwhile (__BLAST_NONDET)\n  {\n    if (buf == buflim)\n      break;\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n \n    buf++;\nout:\n    in++;\n    {;\n//@ assert(0<=in);\n}\n\n    {;\n//@ assert(in<inlen);\n}\n\n  }\n\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n  {;\n//@ assert(0<=buf);\n}\n\n  {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= buf < bufferlen;\nloop invariant 0 <= in <= inlen;\nloop invariant 0 <= buf <= buflim;\nloop invariant buf < buflim ==> in < inlen;\nloop invariant (buf == buflim) ==> (in == inlen-1);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main (void)\n{\n  \n  int __BLAST_NONDET;\n  int in;\n  int inlen;\n  int bufferlen;\n  int buf;\n  int buflim;\n\n  if(bufferlen >1);else goto END;\n  if(inlen > 0);else goto END;\n  if(bufferlen < inlen);else goto END;\n\n  buf = 0;\n  in = 0;\n  buflim = bufferlen - 2;\n    \n  /*@\n\nloop invariant i2: 0 <= in <= inlen;\nloop invariant i3: 0 <= buf <= buflim;\nloop invariant i4: buf < buflim ==> in < inlen;\n\n*/\nwhile (__BLAST_NONDET)\n  {\n    if (buf == buflim)\n      break;\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n \n    buf++;\nout:\n    in++;\n    {;\n//@ assert(0<=in);\n}\n\n    {;\n//@ assert(in<inlen);\n}\n\n  }\n\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n  {;\n//@ assert(0<=buf);\n}\n\n  {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 1 <= buf <= buflim + 2;\nloop invariant 1 <= in <= inlen;\nloop invariant buf <= buflim;\nloop invariant in < inlen;\nloop invariant buflim < bufferlen;\nloop invariant inlen <= bufferlen;\nloop invariant __BLAST_NONDET ==> buf <= buflim;\nloop invariant __BLAST_NONDET ==> in < inlen;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main (void)\n{\n  \n  int __BLAST_NONDET;\n  int in;\n  int inlen;\n  int bufferlen;\n  int buf;\n  int buflim;\n\n  if(bufferlen >1);else goto END;\n  if(inlen > 0);else goto END;\n  if(bufferlen < inlen);else goto END;\n\n  buf = 0;\n  in = 0;\n  buflim = bufferlen - 2;\n    \n  /*@\n\n\nloop invariant i3: buf <= buflim;\nloop invariant i4: in < inlen;\nloop invariant i5: buflim < bufferlen;\n\nloop invariant i7: __BLAST_NONDET ==> buf <= buflim;\nloop invariant i8: __BLAST_NONDET ==> in < inlen;\n*/\nwhile (__BLAST_NONDET)\n  {\n    if (buf == buflim)\n      break;\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n \n    buf++;\nout:\n    in++;\n    {;\n//@ assert(0<=in);\n}\n\n    {;\n//@ assert(in<inlen);\n}\n\n  }\n\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n  {;\n//@ assert(0<=buf);\n}\n\n  {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= buf <= bufferlen - 1;\nloop invariant 0 <= in <= inlen - 1;\nloop invariant 0 <= buflim < bufferlen - 2;\nloop invariant (buf < buflim ==> buflim < bufferlen - 2);\nloop invariant (buf == buflim ==> buf < bufferlen - 1);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main (void)\n{\n  \n  int __BLAST_NONDET;\n  int in;\n  int inlen;\n  int bufferlen;\n  int buf;\n  int buflim;\n\n  if(bufferlen >1);else goto END;\n  if(inlen > 0);else goto END;\n  if(bufferlen < inlen);else goto END;\n\n  buf = 0;\n  in = 0;\n  buflim = bufferlen - 2;\n    \n  /*@\n\nloop invariant i2: 0 <= in <= inlen - 1;\n\n\n\n*/\nwhile (__BLAST_NONDET)\n  {\n    if (buf == buflim)\n      break;\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n \n    buf++;\nout:\n    in++;\n    {;\n//@ assert(0<=in);\n}\n\n    {;\n//@ assert(in<inlen);\n}\n\n  }\n\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n  {;\n//@ assert(0<=buf);\n}\n\n  {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= buf <= buflim;\nloop invariant 0 <= in <= inlen;\nloop invariant buf <= buflim;\nloop invariant in <= inlen;\nloop invariant buf < bufferlen;\nloop invariant in < inlen;\nloop invariant 0 <= buf < bufferlen;\nloop invariant 0 <= in < inlen;\nloop invariant buf < buflim + 2;\nloop invariant in < inlen;\nloop invariant buf < bufferlen - 2;\nloop invariant in < inlen;\nloop invariant buf < bufferlen - 2;\nloop invariant in < inlen;\nloop invariant buf < bufferlen - 2;\nloop invariant in < inlen;\nloop invariant buf < bufferlen - 2;\nloop invariant in < inlen;\nloop invariant buf < bufferlen - 2;\nloop invariant in < inlen;\nloop invariant buf < bufferlen - 2;\nloop invariant in < inlen;\nloop invariant buf < bufferlen - 2;\nloop invariant in < inlen;\nloop invariant buf < bufferlen - 2;\nloop invariant in < inlen;\nloop invariant buf < bufferlen - 2;\nloop invariant in < inlen;\nloop invariant buf < bufferlen - 2;\nloop invariant in < inlen;\nloop invariant buf < bufferlen - 2;\nloop invariant in < inlen;\nloop invariant buf < bufferlen - 2;\nloop invariant in < inlen;\nloop invariant buf < bufferlen - 2;\nloop invariant in < inlen;\nloop invariant buf < bufferlen - 2;\nloop invariant in < inlen;\nloop invariant buf < bufferlen - 2;\nloop invariant in < inlen;\nloop invariant buf < bufferlen - 2;\nloop invariant in < inlen;\nloop invariant buf < bufferlen - 2;\nloop invariant in < inlen;\nloop invariant buf < bufferlen - 2;\nloop invariant in < inlen;\nloop invariant buf < bufferlen - 2;\nloop invariant in < inlen;\nloop invariant buf < bufferlen - 2;\nloop invariant in < inlen;\nloop invariant buf < bufferlen - 2;\nloop invariant in < inlen;\nloop invariant buf < bufferlen - 2;\nloop invariant in < inlen;\nloop invariant buf < bufferlen - 2;\nloop invariant in < inlen;\nloop invariant buf < bufferlen - 2;\nloop invariant in < inlen;\nloop invariant buf < bufferlen - 2;\nloop invariant in < inlen;\nloop invariant buf < bufferlen - 2;\nloop invariant in < inlen;\nloop invariant buf < bufferlen - 2;\nloop invariant in < inlen;\nloop invariant buf < bufferlen - 2;\nloop invariant in < inlen;\nloop invariant buf < bufferlen - 2;\nloop invariant in < inlen;\nloop invariant buf < bufferlen - 2;\nloop invariant in < inlen;\nloop invariant buf < bufferlen - 2;\nloop invariant in < inlen;\nloop invariant buf < bufferlen - 2;\nloop invariant in < inlen;\nloop invariant buf < bufferlen - 2;\nloop invariant in < inlen;\nloop invariant buf < bufferlen - 2;\nloop invariant in < inlen;\nloop invariant buf < bufferlen - 2;\nloop invariant in < inlen;\nloop invariant buf < bufferlen - 2;\nloop invariant in < inlen;\nloop invariant buf < bufferlen - 2;\nloop invariant in < inlen;\nloop invariant buf < bufferlen - 2;\nloop invariant in < inlen;\nloop invariant buf < bufferlen - 2;\nloop invariant in < inlen;\nloop invariant buf < bufferlen - 2;\nloop invariant in < inlen;\nloop invariant buf < bufferlen - 2;\nloop invariant in < inlen;\nloop invariant buf < bufferlen - 2;\nloop invariant in < inlen;\nloop invariant buf < bufferlen - 2;\nloop invariant in < inlen;\nloop invariant buf < bufferlen - 2;\nloop invariant in < inlen;\nloop invariant buf < bufferlen - 2;\nloop invariant in < inlen;\nloop invariant buf < bufferlen - 2;\nloop invariant in < inlen;\nloop invariant buf < bufferlen - 2;\nloop invariant in < inlen;\nloop invariant buf < bufferlen - 2;\nloop invariant in < inlen;\nloop invariant buf < bufferlen - 2;\nloop invariant in < inlen;\nloop invariant buf < bufferlen - 2;\nloop invariant in < inlen;\nloop invariant buf < bufferlen - 2;\nloop invariant in < inlen;\nloop invariant buf < bufferlen - 2;\nloop invariant in < inlen;\nloop invariant buf < bufferlen - 2;\nloop invariant in < inlen;\nloop invariant buf < bufferlen - 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main (void)\n{\n  \n  int __BLAST_NONDET;\n  int in;\n  int inlen;\n  int bufferlen;\n  int buf;\n  int buflim;\n\n  if(bufferlen >1);else goto END;\n  if(inlen > 0);else goto END;\n  if(bufferlen < inlen);else goto END;\n\n  buf = 0;\n  in = 0;\n  buflim = bufferlen - 2;\n    \n  /*@\nloop invariant i1: 0 <= buf <= buflim;\nloop invariant i2: 0 <= in <= inlen;\nloop invariant i3: buf <= buflim;\nloop invariant i4: in <= inlen;\n\nloop invariant i6: in < inlen;\n\nloop invariant i8: 0 <= in < inlen;\nloop invariant i9: buf < buflim + 2;\n\n*/\nwhile (__BLAST_NONDET)\n  {\n    if (buf == buflim)\n      break;\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n \n    buf++;\nout:\n    in++;\n    {;\n//@ assert(0<=in);\n}\n\n    {;\n//@ assert(in<inlen);\n}\n\n  }\n\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n  {;\n//@ assert(0<=buf);\n}\n\n  {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= buf < bufferlen;\nloop invariant 0 <= in < inlen;\nloop invariant buf <= buflim;\nloop invariant buf == buflim ==> 0 <= in < inlen;\nloop invariant !(__BLAST_NONDET) ==> 0 <= buf < bufferlen;\nloop invariant !(__BLAST_NONDET) ==> 0 <= in < inlen;\nloop invariant !(__BLAST_NONDET) ==> buf <= buflim;\nloop invariant !(__BLAST_NONDET) ==> buf == buflim ==> 0 <= in < inlen;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main (void)\n{\n  \n  int __BLAST_NONDET;\n  int in;\n  int inlen;\n  int bufferlen;\n  int buf;\n  int buflim;\n\n  if(bufferlen >1);else goto END;\n  if(inlen > 0);else goto END;\n  if(bufferlen < inlen);else goto END;\n\n  buf = 0;\n  in = 0;\n  buflim = bufferlen - 2;\n    \n  /*@\n\nloop invariant i2: 0 <= in < inlen;\nloop invariant i3: buf <= buflim;\nloop invariant i4: buf == buflim ==> 0 <= in < inlen;\nloop invariant i5: !(__BLAST_NONDET) ==> 0 <= buf < bufferlen;\nloop invariant i6: !(__BLAST_NONDET) ==> 0 <= in < inlen;\nloop invariant i7: !(__BLAST_NONDET) ==> buf <= buflim;\nloop invariant i8: !(__BLAST_NONDET) ==> buf == buflim ==> 0 <= in < inlen;\n*/\nwhile (__BLAST_NONDET)\n  {\n    if (buf == buflim)\n      break;\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n \n    buf++;\nout:\n    in++;\n    {;\n//@ assert(0<=in);\n}\n\n    {;\n//@ assert(in<inlen);\n}\n\n  }\n\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n  {;\n//@ assert(0<=buf);\n}\n\n  {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= buf <= bufferlen;\nloop invariant 0 <= in <= inlen;\nloop invariant buf < buflim ==> in < inlen;\nloop invariant buf == buflim ==> in == inlen;\nloop invariant (buf == 0 && in == 0) ==> (inlen >= 0);\nloop invariant (buf == buflim && in == inlen) ==> (bufferlen >= 0);\nloop invariant (buf == buflim && in == inlen) ==> (inlen >= 0);\nloop invariant (buf == buflim && in == inlen) ==> (bufferlen >= inlen);\nloop invariant (buf == buflim && in == inlen) ==> (bufferlen >= 0);\nloop invariant (buf == buflim && in == inlen) ==> (inlen >= 0);\nloop invariant (buf == buflim && in == inlen) ==> (bufferlen >= 0);\nloop invariant (buf == buflim && in == inlen) ==> (inlen >= 0);\nloop invariant (buf == buflim && in == inlen) ==> (bufferlen >= 0);\nloop invariant (buf == buflim && in == inlen) ==> (inlen >= 0);\nloop invariant (buf == buflim && in == inlen) ==> (bufferlen >= 0);\nloop invariant (buf == buflim && in == inlen) ==> (inlen >= 0);\nloop invariant (buf == buflim && in == inlen) ==> (bufferlen >= 0);\nloop invariant (buf == buflim && in == inlen) ==> (inlen >= 0);\nloop invariant (buf == buflim && in == inlen) ==> (bufferlen >= 0);\nloop invariant (buf == buflim && in == inlen) ==> (inlen >= 0);\nloop invariant (buf == buflim && in == inlen) ==> (bufferlen >= 0);\nloop invariant (buf == buflim && in == inlen) ==> (inlen >= 0);\nloop invariant (buf == buflim && in == inlen) ==> (bufferlen >= 0);\nloop invariant (buf == buflim && in == inlen) ==> (inlen >= 0);\nloop invariant (buf == buflim && in == inlen) ==> (bufferlen >= 0);\nloop invariant (buf == buflim && in == inlen) ==> (inlen >= 0);\nloop invariant (buf == buflim && in == inlen) ==> (bufferlen >= 0);\nloop invariant (buf == buflim && in == inlen) ==> (inlen >= 0);\nloop invariant (buf == buflim && in == inlen) ==> (bufferlen >= 0);\nloop invariant (buf == buflim && in == inlen) ==> (inlen >= 0);\nloop invariant (buf == buflim && in == inlen) ==> (bufferlen >= 0);\nloop invariant (buf == buflim && in == inlen) ==> (inlen >= 0);\nloop invariant (buf == buflim && in == inlen) ==> (bufferlen >= 0);\nloop invariant (buf == buflim && in == inlen) ==> (inlen >= 0);\nloop invariant (buf == buflim && in == inlen) ==> (bufferlen >= 0);\nloop invariant (buf == buflim && in == inlen) ==> (inlen >= 0);\nloop invariant (buf == buflim && in == inlen) ==> (bufferlen >= 0);\nloop invariant (buf == buflim && in == inlen) ==> (inlen >= 0);\nloop invariant (buf == buflim && in == inlen) ==> (bufferlen >= 0);\nloop invariant (buf == buflim && in == inlen) ==> (inlen >= 0);\nloop invariant (buf == buflim && in == inlen) ==> (bufferlen >= 0);\nloop invariant (buf == buflim && in == inlen) ==> (inlen >= 0);\nloop invariant (buf == buflim && in == inlen) ==> (bufferlen >= 0);\nloop invariant (buf == buflim && in == inlen) ==> (inlen >= 0);\nloop invariant (buf == buflim && in == inlen) ==> (bufferlen >= 0);\nloop invariant (buf == buflim && in == inlen) ==> (inlen >= 0);\nloop invariant (buf == buflim && in == inlen) ==> (bufferlen >= 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main (void)\n{\n  \n  int __BLAST_NONDET;\n  int in;\n  int inlen;\n  int bufferlen;\n  int buf;\n  int buflim;\n\n  if(bufferlen >1);else goto END;\n  if(inlen > 0);else goto END;\n  if(bufferlen < inlen);else goto END;\n\n  buf = 0;\n  in = 0;\n  buflim = bufferlen - 2;\n    \n  /*@\nloop invariant i1: 0 <= buf <= bufferlen;\nloop invariant i2: 0 <= in <= inlen;\nloop invariant i3: buf < buflim ==> in < inlen;\n\nloop invariant i5: (buf == 0 && in == 0) ==> (inlen >= 0);\nloop invariant i6: (buf == buflim && in == inlen) ==> (bufferlen >= 0);\nloop invariant i7: (buf == buflim && in == inlen) ==> (inlen >= 0);\nloop invariant i8: (buf == buflim && in == inlen) ==> (bufferlen >= inlen);\n*/\nwhile (__BLAST_NONDET)\n  {\n    if (buf == buflim)\n      break;\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n \n    buf++;\nout:\n    in++;\n    {;\n//@ assert(0<=in);\n}\n\n    {;\n//@ assert(in<inlen);\n}\n\n  }\n\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n  {;\n//@ assert(0<=buf);\n}\n\n  {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= in <= inlen;\nloop invariant 0 <= buf <= buflim;\nloop invariant buf <= buflim;\nloop invariant buf == buflim ==> in == inlen;\nloop invariant in == inlen ==> buf == buflim;\nloop invariant buf <= buflim ==> in < inlen;\nloop invariant in < inlen ==> buf <= buflim;\nloop invariant buf <= buflim ==> in <= inlen;\nloop invariant in <= inlen ==> buf <= buflim;\nloop invariant buf <= buflim ==> in <= inlen;\nloop invariant in <= inlen ==> buf <= buflim;\nloop invariant buf <= buflim ==> in <= inlen;\nloop invariant in <= inlen ==> buf <= buflim;\nloop invariant buf <= buflim ==> in <= inlen;\nloop invariant in <= inlen ==> buf <= buflim;\nloop invariant buf <= buflim ==> in <= inlen;\nloop invariant in <= inlen ==> buf <= buflim;\nloop invariant buf <= buflim ==> in <= inlen;\nloop invariant in <= inlen ==> buf <= buflim;\nloop invariant buf <= buflim ==> in <= inlen;\nloop invariant in <= inlen ==> buf <= buflim;\nloop invariant buf <= buflim ==> in <= inlen;\nloop invariant in <= inlen ==> buf <= buflim;\nloop invariant buf <= buflim ==> in <= inlen;\nloop invariant in <= inlen ==> buf <= buflim;\nloop invariant buf <= buflim ==> in <= inlen;\nloop invariant in <= inlen ==> buf <= buflim;\nloop invariant buf <= buflim ==> in <= inlen;\nloop invariant in <= inlen ==> buf <= buflim;\nloop invariant buf <= buflim ==> in <= inlen;\nloop invariant in <= inlen ==> buf <= buflim;\nloop invariant buf <= buflim ==> in <= inlen;\nloop invariant in <= inlen ==> buf <= buflim;\nloop invariant buf <= buflim ==> in <= inlen;\nloop invariant in <= inlen ==> buf <= buflim;\nloop invariant buf <= buflim ==> in <= inlen;\nloop invariant in <= inlen ==> buf <= buflim;\nloop invariant buf <= buflim ==> in <= inlen;\nloop invariant in <= inlen ==> buf <= buflim;\nloop invariant buf <= buflim ==> in <= inlen;\nloop invariant in <= inlen ==> buf <= buflim;\nloop invariant buf <= buflim ==> in <= inlen;\nloop invariant in <= inlen ==> buf <= buflim;\nloop invariant buf <= buflim ==> in <= inlen;\nloop invariant in <= inlen ==> buf <= buflim;\nloop invariant buf <= buflim ==> in <= inlen;\nloop invariant in <= inlen ==> buf <= buflim;\nloop invariant buf <= buflim ==> in <= inlen;\nloop invariant in <= inlen ==> buf <= buflim;\nloop invariant buf <= buflim ==> in <= inlen;\nloop invariant in <= inlen ==> buf <= buflim;\nloop invariant buf <= buflim ==> in <= inlen;\nloop invariant in <= inlen ==> buf <= buflim;\nloop invariant buf <= buflim ==> in <= inlen;\nloop invariant in <= inlen ==> buf <= buflim;\nloop invariant buf <= buflim ==> in <= inlen;\nloop invariant in <= inlen ==> buf <= buflim;\nloop invariant buf <= buflim ==> in <= inlen;\nloop invariant in <= inlen ==> buf <= buflim;\nloop invariant buf <= buflim ==> in <= inlen;\nloop invariant in <= inlen ==> buf <= buflim;\nloop invariant buf <= buflim ==> in <= inlen;\nloop invariant in <= inlen ==> buf <= buflim;\nloop invariant buf <= buflim ==> in <= inlen;\nloop invariant in <= inlen ==> buf <= buflim;\nloop invariant buf <= buflim ==> in <= inlen;\nloop invariant in <= inlen ==> buf <= buflim;\nloop invariant buf <= buflim ==> in <= inlen;\nloop invariant in <= inlen ==> buf <= buflim;\nloop invariant buf <= buflim ==> in <= inlen;\nloop invariant in <= inlen ==> buf <= buflim;\nloop invariant buf <= buflim ==> in <= inlen;\nloop invariant in <= inlen ==> buf <= buflim;\nloop invariant buf <= buflim ==> in <= inlen;\nloop invariant in <= inlen ==> buf <= buflim;\nloop invariant buf <= buflim ==> in <= inlen;\nloop invariant in <= inlen ==> buf <= buflim;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main (void)\n{\n  \n  int __BLAST_NONDET;\n  int in;\n  int inlen;\n  int bufferlen;\n  int buf;\n  int buflim;\n\n  if(bufferlen >1);else goto END;\n  if(inlen > 0);else goto END;\n  if(bufferlen < inlen);else goto END;\n\n  buf = 0;\n  in = 0;\n  buflim = bufferlen - 2;\n    \n  /*@\nloop invariant i1: 0 <= in <= inlen;\nloop invariant i2: 0 <= buf <= buflim;\nloop invariant i3: buf <= buflim;\n\nloop invariant i5: in == inlen ==> buf == buflim;\nloop invariant i6: buf <= buflim ==> in < inlen;\nloop invariant i7: in < inlen ==> buf <= buflim;\nloop invariant i8: buf <= buflim ==> in <= inlen;\nloop invariant i9: in <= inlen ==> buf <= buflim;\n*/\nwhile (__BLAST_NONDET)\n  {\n    if (buf == buflim)\n      break;\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n \n    buf++;\nout:\n    in++;\n    {;\n//@ assert(0<=in);\n}\n\n    {;\n//@ assert(in<inlen);\n}\n\n  }\n\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n  {;\n//@ assert(0<=buf);\n}\n\n  {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "loop invariant 0 <= buf <= bufferlen is partially proven to be inductive.\nloop invariant 0 <= in < inlen is partially proven to be inductive.\nloop invariant buf <= buflim is partially proven to be inductive.\nloop invariant buf < bufferlen is partially proven to be inductive.\nloop invariant in < inlen is partially proven to be inductive.\nloop invariant buflim < bufferlen is partially proven to be inductive.\nloop invariant buf + 1 < bufferlen is partially proven to be inductive.\nloop invariant buf + 2 < bufferlen is preserved but not established.\nloop invariant buf + 3 < bufferlen is preserved but not established.\nloop invariant buf + 4 < bufferlen is preserved but not established.\nloop invariant buf + 5 < bufferlen is preserved but not established.\nloop invariant buf + 6 < bufferlen is preserved but not established.\nloop invariant buf + 7 < bufferlen is preserved but not established.\nloop invariant buf + 8 < bufferlen is preserved but not established.\nloop invariant buf + 9 < bufferlen is preserved but not established.\nloop invariant buf + 10 < bufferlen is preserved but not established.\nloop invariant buf + 11 < bufferlen is preserved but not established.\nloop invariant buf + 12 < bufferlen is preserved but not established.\nloop invariant buf + 13 < bufferlen is preserved but not established.\nloop invariant buf + 14 < bufferlen is preserved but not established.\nloop invariant buf + 15 < bufferlen is preserved but not established.\nloop invariant buf + 16 < bufferlen is preserved but not established.\nloop invariant buf + 17 < bufferlen is preserved but not established.\nloop invariant buf + 18 < bufferlen is preserved but not established.\nloop invariant buf + 19 < bufferlen is preserved but not established.\nloop invariant buf + 20 < bufferlen is preserved but not established.\nloop invariant buf + 21 < bufferlen is preserved but not established.\nloop invariant buf + 22 < bufferlen is preserved but not established.\nloop invariant buf + 23 < bufferlen is preserved but not established.\nloop invariant buf + 24 < bufferlen is preserved but not established.\nloop invariant buf + 25 < bufferlen is preserved but not established.\nloop invariant buf + 26 < bufferlen is preserved but not established.\nloop invariant buf + 27 < bufferlen is preserved but not established.\nloop invariant buf + 28 < bufferlen is preserved but not established.\nloop invariant buf + 29 < bufferlen is preserved but not established.\nloop invariant buf + 30 < bufferlen is preserved but not established.\nloop invariant buf + 31 < bufferlen is preserved but not established.\nloop invariant buf + 32 < bufferlen is preserved but not established.\nloop invariant buf + 33 < bufferlen is preserved but not established.\nloop invariant buf + 34 < bufferlen is preserved but not established.\nloop invariant buf + 35 < bufferlen is preserved but not established.\nloop invariant buf + 36 < bufferlen is preserved but not established.\nloop invariant buf + 37 < bufferlen is preserved but not established.\nloop invariant buf + 38 < bufferlen is preserved but not established.\nloop invariant buf + 39 < bufferlen is preserved but not established.\nloop invariant buf + 40 < bufferlen is preserved but not established.\nloop invariant buf + 41 < bufferlen is preserved but not established.\nloop invariant buf + 42 < bufferlen is preserved but not established.\nloop invariant buf + 43 < bufferlen is preserved but not established.\nloop invariant buf + 44 < bufferlen is preserved but not established.\nloop invariant buf + 45 < bufferlen is preserved but not established.\nloop invariant buf + 46 < bufferlen is preserved but not established.\nloop invariant buf + 47 < bufferlen is preserved but not established.\nloop invariant buf + 48 < bufferlen is preserved but not established.\nloop invariant buf + 49 < bufferlen is preserved but not established.\nloop invariant buf + 50 < bufferlen is preserved but not established.\nloop invariant buf + 51 < bufferlen is preserved but not established.\nloop invariant buf + 52 < bufferlen is preserved but not established.\nloop invariant buf + 53 < bufferlen is preserved but not established.\nloop invariant buf + 54 < bufferlen is preserved but not established.\nloop invariant buf + 55 < bufferlen is preserved but not established.\nloop invariant buf + 56 < bufferlen is preserved but not established.\nloop invariant buf + 57 < bufferlen is preserved but not established.\nloop invariant buf + 58 < bufferlen is preserved but not established.\nloop invariant buf + 59 < bufferlen is preserved but not established.\nloop invariant buf + 60 < bufferlen is preserved but not established.\nloop invariant buf + 61 < bufferlen is preserved but not established.\nloop invariant buf + 62 < bufferlen is preserved but not established.\nloop invariant buf + 63 < bufferlen is preserved but not established.\nloop invariant buf + 64 < bufferlen is preserved but not established.\nloop invariant buf + 65 < bufferlen is preserved but not established.\nloop invariant buf + 66 < bufferlen is preserved but not established.\nloop invariant buf + 67 < bufferlen is preserved but not established.\nloop invariant buf + 68 < bufferlen is preserved but not established.\nloop invariant buf + 69 < bufferlen is preserved but not established.\nloop invariant buf + 70 < bufferlen is preserved but not established.\nloop invariant buf + 71 < bufferlen is preserved but not established.\nloop invariant buf + 72 < bufferlen is preserved but not established.\nloop invariant buf + 73 < bufferlen is preserved but not established.\nloop invariant buf + 74 < bufferlen is preserved but not established.\nloop invariant buf + 75 < bufferlen is preserved but not established.\nloop invariant buf + 76 < bufferlen is preserved but not established.\nloop invariant buf + 77 < bufferlen is preserved but not established.\nloop invariant buf + 78 < bufferlen is preserved but not established.\nloop invariant buf + 79 < bufferlen is preserved but not established.\nloop invariant buf + 80 < bufferlen is preserved but not established.\nloop invariant buf + 81 < bufferlen is preserved but not established.\nloop invariant buf + 82 < bufferlen is preserved but not established.\nloop invariant buf + 83 < bufferlen is preserved but not established.\nloop invariant buf + 84 < bufferlen is preserved but not established.\nloop invariant buf + 85 < bufferlen is preserved but not established.\nloop invariant buf + 86 < bufferlen is preserved but not established.\nloop invariant buf + 87 < bufferlen is preserved but not established.\nloop invariant 0 <= in <= inlen is partially proven to be inductive.\nloop invariant in <= bufferlen - 2 is partially proven to be inductive.\nloop invariant buflim <= bufferlen - 2 is partially proven to be inductive.\nloop invariant (buf == buflim) ==> (in == inlen - 1) is partially proven to be inductive.\nloop invariant 0 <= buf <= buflim is partially proven to be inductive.\nloop invariant in <= inlen is partially proven to be inductive.\nloop invariant (buf < bufferlen) is partially proven to be inductive.\nloop invariant (in < inlen) is partially proven to be inductive.\nloop invariant (in <= inlen) is partially proven to be inductive.\nloop invariant (buf <= buflim) is partially proven to be inductive.\nloop invariant 0 <= buf <= buflim + 1 is partially proven to be inductive.\nloop invariant __BLAST_NONDET ==> buf <= buflim is partially proven to be inductive.\nloop invariant !__BLAST_NONDET ==> (buf < bufferlen) is partially proven to be inductive.\nloop invariant !__BLAST_NONDET ==> (in < inlen) is partially proven to be inductive.\nloop invariant __BLAST_NONDET ==> (in == inlen) is preserved but not established.\nloop invariant !__BLAST_NONDET ==> (buf == buflim + 1) is preserved but not established.\nloop invariant 0 <= buf <= bufferlen - 1 is partially proven to be inductive.\nloop invariant 0 <= in <= inlen - 1 is partially proven to be inductive.\nloop invariant buf < buflim ==> buf == buflim is partially proven to be inductive.\nloop invariant buf < buflim ==> buf <= buflim is partially proven to be inductive.\nloop invariant buf < buflim ==> buf >= 0 is partially proven to be inductive.\nloop invariant buf <= buflim ==> buf == buflim is partially proven to be inductive.\nloop invariant buf <= buflim ==> buf <= buflim is partially proven to be inductive.\nloop invariant buf <= buflim ==> buf >= 0 is partially proven to be inductive.\nloop invariant buf >= 0 ==> buf < buflim is partially proven to be inductive.\nloop invariant buf >= 0 ==> buf <= buflim is partially proven to be inductive.\nloop invariant buf >= 0 ==> buf >= 0 is partially proven to be inductive.\nloop invariant 0 <= in ==> in < inlen is partially proven to be inductive.\nloop invariant 0 <= in ==> in <= inlen is partially proven to be inductive.\nloop invariant 0 <= in ==> in >= 0 is partially proven to be inductive.\nloop invariant in < inlen ==> in <= inlen is partially proven to be inductive.\nloop invariant in < inlen ==> in >= 0 is partially proven to be inductive.\nloop invariant in <= inlen ==> in < inlen is partially proven to be inductive.\nloop invariant in <= inlen ==> in <= inlen is partially proven to be inductive.\nloop invariant in <= inlen ==> in >= 0 is partially proven to be inductive.\nloop invariant in >= 0 ==> in < inlen is partially proven to be inductive.\nloop invariant in >= 0 ==> in <= inlen is partially proven to be inductive.\nloop invariant in >= 0 ==> in >= 0 is partially proven to be inductive.\nloop invariant buflim == bufferlen - 2 is partially proven to be inductive.\nloop invariant bufferlen < inlen ==> buflim == bufferlen - 2 is partially proven to be inductive.\nloop invariant inlen <= bufferlen ==> buflim == bufferlen - 2 is partially proven to be inductive.\nloop invariant buflim == bufferlen - 2 ==> bufferlen < inlen is partially proven to be inductive.\nloop invariant buflim == bufferlen - 2 ==> inlen <= bufferlen is partially proven to be inductive.\nloop invariant buflim == bufferlen - 2 ==> buflim == bufferlen - 2 is partially proven to be inductive.\nloop invariant (__BLAST_NONDET) ==> buf == buflim is partially proven to be inductive.\nloop invariant (__BLAST_NONDET) ==> buf <= buflim is partially proven to be inductive.\nloop invariant (__BLAST_NONDET) ==> buf >= 0 is partially proven to be inductive.\nloop invariant (__BLAST_NONDET) ==> buf < buflim is partially proven to be inductive.\nloop invariant (__BLAST_NONDET) ==> in < inlen is partially proven to be inductive.\nloop invariant (__BLAST_NONDET) ==> in <= inlen is partially proven to be inductive.\nloop invariant (__BLAST_NONDET) ==> in >= 0 is partially proven to be inductive.\nloop invariant (__BLAST_NONDET) ==> buflim == bufferlen - 2 is partially proven to be inductive.\nloop invariant (__BLAST_NONDET) ==> bufferlen < inlen is partially proven to be inductive.\nloop invariant (__BLAST_NONDET) ==> inlen <= bufferlen is partially proven to be inductive.\nloop invariant (__BLAST_NONDET) ==> (__BLAST_NONDET) ==> buf == buflim is partially proven to be inductive.\nloop invariant (__BLAST_NONDET) ==> (__BLAST_NONDET) ==> buf <= buflim is partially proven to be inductive.\nloop invariant (__BLAST_NONDET) ==> (__BLAST_NONDET) ==> buf >= 0 is partially proven to be inductive.\nloop invariant (__BLAST_NONDET) ==> (__BLAST_NONDET) ==> buf < buflim is partially proven to be inductive.\nloop invariant (__BLAST_NONDET) ==> (__BLAST_NONDET) ==> in < inlen is partially proven to be inductive.\nloop invariant (__BLAST_NONDET) ==> (__BLAST_NONDET) ==> in <= inlen is partially proven to be inductive.\nloop invariant (__BLAST_NONDET) ==> (__BLAST_NONDET) ==> in >= 0 is partially proven to be inductive.\nloop invariant (__BLAST_NONDET) ==> (__BLAST_NONDET) ==> buflim == bufferlen - 2 is partially proven to be inductive.\nloop invariant (__BLAST_NONDET) ==> (__BLAST_NONDET) ==> bufferlen < inlen is partially proven to be inductive.\nloop invariant (__BLAST_NONDET) ==> (__BLAST_NONDET) ==> inlen <= bufferlen is partially proven to be inductive.\nloop invariant (__BLAST_NONDET) ==> (__BLAST_NONDET) ==> (__BLAST_NONDET) ==> buf == buflim is partially proven to be inductive.\nloop invariant (__BLAST_NONDET) ==> (__BLAST_NONDET) ==> (__BLAST_NONDET) ==> buf <= buflim is partially proven to be inductive.\nloop invariant (__BLAST_NONDET) ==> (__BLAST_NONDET) ==> (__BLAST_NONDET) ==> buf >= 0 is partially proven to be inductive.\nloop invariant (__BLAST_NONDET) ==> (__BLAST_NONDET) ==> (__BLAST_NONDET) ==> buf < buflim is partially proven to be inductive.\nloop invariant 0 <= buf <= bufferlen - 2 is partially proven to be inductive.\nloop invariant (buf == buflim) ==> in == inlen - 1 is partially proven to be inductive.\nloop invariant !(buf == buflim) ==> in < inlen - 1 is partially proven to be inductive.\nloop invariant buf < buflim ==> buf < bufferlen - 2 is partially proven to be inductive.\nloop invariant buf < buflim ==> in < inlen - 1 is partially proven to be inductive.\nloop invariant in < inlen - 1 ==> buf < bufferlen - 2 is partially proven to be inductive.\nloop invariant in < inlen - 1 ==> in < inlen - 1 is partially proven to be inductive.\nloop invariant buf < buflim ==> buf + 1 < bufferlen - 2 is partially proven to be inductive.\nloop invariant in < inlen - 1 ==> in + 1 < inlen - 1 is partially proven to be inductive.\nloop invariant buf + 1 < buflim ==> buf + 1 < bufferlen - 2 is partially proven to be inductive.\nloop invariant in + 1 < inlen - 1 ==> in + 1 < inlen - 1 is partially proven to be inductive.\nloop invariant buf + 1 < buflim ==> buf + 1 < bufferlen - 1 is partially proven to be inductive.\nloop invariant in + 1 < inlen - 1 ==> in + 1 < inlen is partially proven to be inductive.\nloop invariant buf + 1 < bufferlen - 2 ==> buf + 1 < bufferlen - 1 is partially proven to be inductive.\nloop invariant buf + 1 < bufferlen - 1 ==> buf + 1 < buflim is partially proven to be inductive.\nloop invariant in + 1 < inlen ==> in + 1 < inlen - 1 is partially proven to be inductive.\nloop invariant buf + 1 < buflim ==> buf + 1 < inlen - 1 is partially proven to be inductive.\nloop invariant in + 1 < inlen - 1 ==> in + 1 < buflim is partially proven to be inductive.\nloop invariant buf + 1 < buflim ==> buf + 1 < buflim is partially proven to be inductive.\nloop invariant buf + 1 < bufferlen - 2 ==> buf + 1 < inlen - 1 is partially proven to be inductive.\nloop invariant buf + 1 < bufferlen - 2 ==> buf + 1 < buflim is partially proven to be inductive.\nloop invariant 0 <= __BLAST_NONDET is partially proven to be inductive.\nloop invariant 0 <= in is partially proven to be inductive.\nloop invariant 0 <= buf is partially proven to be inductive.\nloop invariant bufferlen > 1 is partially proven to be inductive.\nloop invariant inlen > 0 is partially proven to be inductive.\nloop invariant bufferlen < inlen is partially proven to be inductive.\nloop invariant buf == buflim ==> __BLAST_NONDET == 0 is partially proven to be inductive.\nloop invariant __BLAST_NONDET == 0 ==> buf != buflim is partially proven to be inductive.\nloop invariant __BLAST_NONDET ==> buf < bufferlen is partially proven to be inductive.\nloop invariant __BLAST_NONDET ==> buf < inlen is partially proven to be inductive.\nloop invariant __BLAST_NONDET ==> in < bufferlen is partially proven to be inductive.\nloop invariant __BLAST_NONDET ==> in < inlen is partially proven to be inductive.\nloop invariant __BLAST_NONDET ==> 0 <= buf is partially proven to be inductive.\nloop invariant __BLAST_NONDET ==> 0 <= in is partially proven to be inductive.\nloop invariant __BLAST_NONDET ==> 0 <= buflim is partially proven to be inductive.\nloop invariant __BLAST_NONDET ==> 0 <= bufferlen is partially proven to be inductive.\nloop invariant __BLAST_NONDET ==> 0 <= inlen is partially proven to be inductive.\nloop invariant __BLAST_NONDET ==> bufferlen > 1 is partially proven to be inductive.\nloop invariant __BLAST_NONDET ==> inlen > 0 is partially proven to be inductive.\nloop invariant __BLAST_NONDET ==> bufferlen < inlen is partially proven to be inductive.\nloop invariant __BLAST_NONDET ==> buf == buflim is partially proven to be inductive.\nloop invariant 0 <= buf < bufferlen is partially proven to be inductive.\nloop invariant buf < buflim ==> in < inlen is partially proven to be inductive.\nloop invariant (buf == buflim) ==> (in == inlen-1) is partially proven to be inductive.\nloop invariant 1 <= buf <= buflim + 2 is partially proven to be inductive.\nloop invariant 1 <= in <= inlen is partially proven to be inductive.\nloop invariant inlen <= bufferlen is partially proven to be inductive.\nloop invariant 0 <= buflim < bufferlen - 2 is partially proven to be inductive.\nloop invariant (buf < buflim ==> buflim < bufferlen - 2) is partially proven to be inductive.\nloop invariant (buf == buflim ==> buf < bufferlen - 1) is partially proven to be inductive.\nloop invariant buf < buflim + 2 is partially proven to be inductive.\nloop invariant buf < bufferlen - 2 is partially proven to be inductive.\nloop invariant buf == buflim ==> 0 <= in < inlen is partially proven to be inductive.\nloop invariant !(__BLAST_NONDET) ==> 0 <= buf < bufferlen is partially proven to be inductive.\nloop invariant !(__BLAST_NONDET) ==> 0 <= in < inlen is partially proven to be inductive.\nloop invariant !(__BLAST_NONDET) ==> buf <= buflim is partially proven to be inductive.\nloop invariant !(__BLAST_NONDET) ==> buf == buflim ==> 0 <= in < inlen is partially proven to be inductive.\nloop invariant buf == buflim ==> in == inlen is partially proven to be inductive.\nloop invariant (buf == 0 && in == 0) ==> (inlen >= 0) is partially proven to be inductive.\nloop invariant (buf == buflim && in == inlen) ==> (bufferlen >= 0) is partially proven to be inductive.\nloop invariant (buf == buflim && in == inlen) ==> (inlen >= 0) is partially proven to be inductive.\nloop invariant (buf == buflim && in == inlen) ==> (bufferlen >= inlen) is partially proven to be inductive.\nloop invariant in == inlen ==> buf == buflim is partially proven to be inductive.\nloop invariant buf <= buflim ==> in < inlen is partially proven to be inductive.\nloop invariant in < inlen ==> buf <= buflim is partially proven to be inductive.\nloop invariant buf <= buflim ==> in <= inlen is partially proven to be inductive.\nloop invariant in <= inlen ==> buf <= buflim is partially proven to be inductive.\nAssertion 0 <= buf: Partially proven\nAssertion buf < bufferlen: Partially proven\nAssertion 0 <= in: Partially proven\nAssertion in < inlen: Partially proven\nAssertion 0 <= buf: Partially proven\nAssertion buf < bufferlen: Partially proven\nAssertion 0 <= buf: Partially proven\nAssertion buf < bufferlen: Partially proven",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main (void)\n{\n  \n  int __BLAST_NONDET;\n  int in;\n  int inlen;\n  int bufferlen;\n  int buf;\n  int buflim;\n\n  if(bufferlen >1);else goto END;\n  if(inlen > 0);else goto END;\n  if(bufferlen < inlen);else goto END;\n\n  buf = 0;\n  in = 0;\n  buflim = bufferlen - 2;\n    \n  /*@\nloop invariant i1: 0 <= buf <= bufferlen;\nloop invariant i2: 0 <= in < inlen;\nloop invariant i3: buf <= buflim;\nloop invariant i4: buf < bufferlen;\nloop invariant i5: in < inlen;\nloop invariant i6: buflim < bufferlen;\nloop invariant i7: buf + 1 < bufferlen;\nloop invariant i8: buf + 2 < bufferlen;\nloop invariant i9: buf + 3 < bufferlen;\nloop invariant i10: buf + 4 < bufferlen;\nloop invariant i11: buf + 5 < bufferlen;\nloop invariant i12: buf + 6 < bufferlen;\nloop invariant i13: buf + 7 < bufferlen;\nloop invariant i14: buf + 8 < bufferlen;\nloop invariant i15: buf + 9 < bufferlen;\nloop invariant i16: buf + 10 < bufferlen;\nloop invariant i17: buf + 11 < bufferlen;\nloop invariant i18: buf + 12 < bufferlen;\nloop invariant i19: buf + 13 < bufferlen;\nloop invariant i20: buf + 14 < bufferlen;\nloop invariant i21: buf + 15 < bufferlen;\nloop invariant i22: buf + 16 < bufferlen;\nloop invariant i23: buf + 17 < bufferlen;\nloop invariant i24: buf + 18 < bufferlen;\nloop invariant i25: buf + 19 < bufferlen;\nloop invariant i26: buf + 20 < bufferlen;\nloop invariant i27: buf + 21 < bufferlen;\nloop invariant i28: buf + 22 < bufferlen;\nloop invariant i29: buf + 23 < bufferlen;\nloop invariant i30: buf + 24 < bufferlen;\nloop invariant i31: buf + 25 < bufferlen;\nloop invariant i32: buf + 26 < bufferlen;\nloop invariant i33: buf + 27 < bufferlen;\nloop invariant i34: buf + 28 < bufferlen;\nloop invariant i35: buf + 29 < bufferlen;\nloop invariant i36: buf + 30 < bufferlen;\nloop invariant i37: buf + 31 < bufferlen;\nloop invariant i38: buf + 32 < bufferlen;\nloop invariant i39: buf + 33 < bufferlen;\nloop invariant i40: buf + 34 < bufferlen;\nloop invariant i41: buf + 35 < bufferlen;\nloop invariant i42: buf + 36 < bufferlen;\nloop invariant i43: buf + 37 < bufferlen;\nloop invariant i44: buf + 38 < bufferlen;\nloop invariant i45: buf + 39 < bufferlen;\nloop invariant i46: buf + 40 < bufferlen;\nloop invariant i47: buf + 41 < bufferlen;\nloop invariant i48: buf + 42 < bufferlen;\nloop invariant i49: buf + 43 < bufferlen;\nloop invariant i50: buf + 44 < bufferlen;\nloop invariant i51: buf + 45 < bufferlen;\nloop invariant i52: buf + 46 < bufferlen;\nloop invariant i53: buf + 47 < bufferlen;\nloop invariant i54: buf + 48 < bufferlen;\nloop invariant i55: buf + 49 < bufferlen;\nloop invariant i56: buf + 50 < bufferlen;\nloop invariant i57: buf + 51 < bufferlen;\nloop invariant i58: buf + 52 < bufferlen;\nloop invariant i59: buf + 53 < bufferlen;\nloop invariant i60: buf + 54 < bufferlen;\nloop invariant i61: buf + 55 < bufferlen;\nloop invariant i62: buf + 56 < bufferlen;\nloop invariant i63: buf + 57 < bufferlen;\nloop invariant i64: buf + 58 < bufferlen;\nloop invariant i65: buf + 59 < bufferlen;\nloop invariant i66: buf + 60 < bufferlen;\nloop invariant i67: buf + 61 < bufferlen;\nloop invariant i68: buf + 62 < bufferlen;\nloop invariant i69: buf + 63 < bufferlen;\nloop invariant i70: buf + 64 < bufferlen;\nloop invariant i71: buf + 65 < bufferlen;\nloop invariant i72: buf + 66 < bufferlen;\nloop invariant i73: buf + 67 < bufferlen;\nloop invariant i74: buf + 68 < bufferlen;\nloop invariant i75: buf + 69 < bufferlen;\nloop invariant i76: buf + 70 < bufferlen;\nloop invariant i77: buf + 71 < bufferlen;\nloop invariant i78: buf + 72 < bufferlen;\nloop invariant i79: buf + 73 < bufferlen;\nloop invariant i80: buf + 74 < bufferlen;\nloop invariant i81: buf + 75 < bufferlen;\nloop invariant i82: buf + 76 < bufferlen;\nloop invariant i83: buf + 77 < bufferlen;\nloop invariant i84: buf + 78 < bufferlen;\nloop invariant i85: buf + 79 < bufferlen;\nloop invariant i86: buf + 80 < bufferlen;\nloop invariant i87: buf + 81 < bufferlen;\nloop invariant i88: buf + 82 < bufferlen;\nloop invariant i89: buf + 83 < bufferlen;\nloop invariant i90: buf + 84 < bufferlen;\nloop invariant i91: buf + 85 < bufferlen;\nloop invariant i92: buf + 86 < bufferlen;\nloop invariant i93: buf + 87 < bufferlen;\nloop invariant i94: 0 <= in <= inlen;\nloop invariant i95: in <= bufferlen - 2;\nloop invariant i96: buflim <= bufferlen - 2;\nloop invariant i97: (buf == buflim) ==> (in == inlen - 1);\nloop invariant i98: 0 <= buf <= buflim;\nloop invariant i99: in <= inlen;\nloop invariant i100: (buf < bufferlen);\nloop invariant i101: (in < inlen);\nloop invariant i102: (in <= inlen);\nloop invariant i103: (buf <= buflim);\nloop invariant i104: 0 <= buf <= buflim + 1;\nloop invariant i105: __BLAST_NONDET ==> buf <= buflim;\nloop invariant i106: !__BLAST_NONDET ==> (buf < bufferlen);\nloop invariant i107: !__BLAST_NONDET ==> (in < inlen);\nloop invariant i108: __BLAST_NONDET ==> (in == inlen);\nloop invariant i109: !__BLAST_NONDET ==> (buf == buflim + 1);\nloop invariant i110: 0 <= buf <= bufferlen - 1;\nloop invariant i111: 0 <= in <= inlen - 1;\nloop invariant i112: buf < buflim ==> buf == buflim;\nloop invariant i113: buf < buflim ==> buf <= buflim;\nloop invariant i114: buf < buflim ==> buf >= 0;\nloop invariant i115: buf <= buflim ==> buf == buflim;\nloop invariant i116: buf <= buflim ==> buf <= buflim;\nloop invariant i117: buf <= buflim ==> buf >= 0;\nloop invariant i118: buf >= 0 ==> buf < buflim;\nloop invariant i119: buf >= 0 ==> buf <= buflim;\nloop invariant i120: buf >= 0 ==> buf >= 0;\nloop invariant i121: 0 <= in ==> in < inlen;\nloop invariant i122: 0 <= in ==> in <= inlen;\nloop invariant i123: 0 <= in ==> in >= 0;\nloop invariant i124: in < inlen ==> in <= inlen;\nloop invariant i125: in < inlen ==> in >= 0;\nloop invariant i126: in <= inlen ==> in < inlen;\nloop invariant i127: in <= inlen ==> in <= inlen;\nloop invariant i128: in <= inlen ==> in >= 0;\nloop invariant i129: in >= 0 ==> in < inlen;\nloop invariant i130: in >= 0 ==> in <= inlen;\nloop invariant i131: in >= 0 ==> in >= 0;\nloop invariant i132: buflim == bufferlen - 2;\nloop invariant i133: bufferlen < inlen ==> buflim == bufferlen - 2;\nloop invariant i134: inlen <= bufferlen ==> buflim == bufferlen - 2;\nloop invariant i135: buflim == bufferlen - 2 ==> bufferlen < inlen;\nloop invariant i136: buflim == bufferlen - 2 ==> inlen <= bufferlen;\nloop invariant i137: buflim == bufferlen - 2 ==> buflim == bufferlen - 2;\nloop invariant i138: (__BLAST_NONDET) ==> buf == buflim;\nloop invariant i139: (__BLAST_NONDET) ==> buf <= buflim;\nloop invariant i140: (__BLAST_NONDET) ==> buf >= 0;\nloop invariant i141: (__BLAST_NONDET) ==> buf < buflim;\nloop invariant i142: (__BLAST_NONDET) ==> in < inlen;\nloop invariant i143: (__BLAST_NONDET) ==> in <= inlen;\nloop invariant i144: (__BLAST_NONDET) ==> in >= 0;\nloop invariant i145: (__BLAST_NONDET) ==> buflim == bufferlen - 2;\nloop invariant i146: (__BLAST_NONDET) ==> bufferlen < inlen;\nloop invariant i147: (__BLAST_NONDET) ==> inlen <= bufferlen;\nloop invariant i148: (__BLAST_NONDET) ==> (__BLAST_NONDET) ==> buf == buflim;\nloop invariant i149: (__BLAST_NONDET) ==> (__BLAST_NONDET) ==> buf <= buflim;\nloop invariant i150: (__BLAST_NONDET) ==> (__BLAST_NONDET) ==> buf >= 0;\nloop invariant i151: (__BLAST_NONDET) ==> (__BLAST_NONDET) ==> buf < buflim;\nloop invariant i152: (__BLAST_NONDET) ==> (__BLAST_NONDET) ==> in < inlen;\nloop invariant i153: (__BLAST_NONDET) ==> (__BLAST_NONDET) ==> in <= inlen;\nloop invariant i154: (__BLAST_NONDET) ==> (__BLAST_NONDET) ==> in >= 0;\nloop invariant i155: (__BLAST_NONDET) ==> (__BLAST_NONDET) ==> buflim == bufferlen - 2;\nloop invariant i156: (__BLAST_NONDET) ==> (__BLAST_NONDET) ==> bufferlen < inlen;\nloop invariant i157: (__BLAST_NONDET) ==> (__BLAST_NONDET) ==> inlen <= bufferlen;\nloop invariant i158: (__BLAST_NONDET) ==> (__BLAST_NONDET) ==> (__BLAST_NONDET) ==> buf == buflim;\nloop invariant i159: (__BLAST_NONDET) ==> (__BLAST_NONDET) ==> (__BLAST_NONDET) ==> buf <= buflim;\nloop invariant i160: (__BLAST_NONDET) ==> (__BLAST_NONDET) ==> (__BLAST_NONDET) ==> buf >= 0;\nloop invariant i161: (__BLAST_NONDET) ==> (__BLAST_NONDET) ==> (__BLAST_NONDET) ==> buf < buflim;\nloop invariant i162: 0 <= buf <= bufferlen - 2;\nloop invariant i163: (buf == buflim) ==> in == inlen - 1;\nloop invariant i164: !(buf == buflim) ==> in < inlen - 1;\nloop invariant i165: buf < buflim ==> buf < bufferlen - 2;\nloop invariant i166: buf < buflim ==> in < inlen - 1;\nloop invariant i167: in < inlen - 1 ==> buf < bufferlen - 2;\nloop invariant i168: in < inlen - 1 ==> in < inlen - 1;\nloop invariant i169: buf < buflim ==> buf + 1 < bufferlen - 2;\nloop invariant i170: in < inlen - 1 ==> in + 1 < inlen - 1;\nloop invariant i171: buf + 1 < buflim ==> buf + 1 < bufferlen - 2;\nloop invariant i172: in + 1 < inlen - 1 ==> in + 1 < inlen - 1;\nloop invariant i173: buf + 1 < buflim ==> buf + 1 < bufferlen - 1;\nloop invariant i174: in + 1 < inlen - 1 ==> in + 1 < inlen;\nloop invariant i175: buf + 1 < bufferlen - 2 ==> buf + 1 < bufferlen - 1;\nloop invariant i176: buf + 1 < bufferlen - 1 ==> buf + 1 < buflim;\nloop invariant i177: in + 1 < inlen ==> in + 1 < inlen - 1;\nloop invariant i178: buf + 1 < buflim ==> buf + 1 < inlen - 1;\nloop invariant i179: in + 1 < inlen - 1 ==> in + 1 < buflim;\nloop invariant i180: buf + 1 < buflim ==> buf + 1 < buflim;\nloop invariant i181: buf + 1 < bufferlen - 2 ==> buf + 1 < inlen - 1;\nloop invariant i182: buf + 1 < bufferlen - 2 ==> buf + 1 < buflim;\nloop invariant i183: 0 <= __BLAST_NONDET;\nloop invariant i184: 0 <= in;\nloop invariant i185: 0 <= buf;\nloop invariant i186: bufferlen > 1;\nloop invariant i187: inlen > 0;\nloop invariant i188: bufferlen < inlen;\nloop invariant i189: buf == buflim ==> __BLAST_NONDET == 0;\nloop invariant i190: __BLAST_NONDET == 0 ==> buf != buflim;\nloop invariant i191: __BLAST_NONDET ==> buf < bufferlen;\nloop invariant i192: __BLAST_NONDET ==> buf < inlen;\nloop invariant i193: __BLAST_NONDET ==> in < bufferlen;\nloop invariant i194: __BLAST_NONDET ==> in < inlen;\nloop invariant i195: __BLAST_NONDET ==> 0 <= buf;\nloop invariant i196: __BLAST_NONDET ==> 0 <= in;\nloop invariant i197: __BLAST_NONDET ==> 0 <= buflim;\nloop invariant i198: __BLAST_NONDET ==> 0 <= bufferlen;\nloop invariant i199: __BLAST_NONDET ==> 0 <= inlen;\nloop invariant i200: __BLAST_NONDET ==> bufferlen > 1;\nloop invariant i201: __BLAST_NONDET ==> inlen > 0;\nloop invariant i202: __BLAST_NONDET ==> bufferlen < inlen;\nloop invariant i203: __BLAST_NONDET ==> buf == buflim;\nloop invariant i204: 0 <= buf < bufferlen;\nloop invariant i205: buf < buflim ==> in < inlen;\nloop invariant i206: (buf == buflim) ==> (in == inlen-1);\nloop invariant i207: 1 <= buf <= buflim + 2;\nloop invariant i208: 1 <= in <= inlen;\nloop invariant i209: inlen <= bufferlen;\nloop invariant i210: 0 <= buflim < bufferlen - 2;\nloop invariant i211: (buf < buflim ==> buflim < bufferlen - 2);\nloop invariant i212: (buf == buflim ==> buf < bufferlen - 1);\nloop invariant i213: buf < buflim + 2;\nloop invariant i214: buf < bufferlen - 2;\nloop invariant i215: buf == buflim ==> 0 <= in < inlen;\nloop invariant i216: !(__BLAST_NONDET) ==> 0 <= buf < bufferlen;\nloop invariant i217: !(__BLAST_NONDET) ==> 0 <= in < inlen;\nloop invariant i218: !(__BLAST_NONDET) ==> buf <= buflim;\nloop invariant i219: !(__BLAST_NONDET) ==> buf == buflim ==> 0 <= in < inlen;\nloop invariant i220: buf == buflim ==> in == inlen;\nloop invariant i221: (buf == 0 && in == 0) ==> (inlen >= 0);\nloop invariant i222: (buf == buflim && in == inlen) ==> (bufferlen >= 0);\nloop invariant i223: (buf == buflim && in == inlen) ==> (inlen >= 0);\nloop invariant i224: (buf == buflim && in == inlen) ==> (bufferlen >= inlen);\nloop invariant i225: in == inlen ==> buf == buflim;\nloop invariant i226: buf <= buflim ==> in < inlen;\nloop invariant i227: in < inlen ==> buf <= buflim;\nloop invariant i228: buf <= buflim ==> in <= inlen;\nloop invariant i229: in <= inlen ==> buf <= buflim;\n*/\nwhile (__BLAST_NONDET)\n  {\n    if (buf == buflim)\n      break;\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n \n    buf++;\nout:\n    in++;\n    {;\n//@ assert(0<=in);\n}\n\n    {;\n//@ assert(in<inlen);\n}\n\n  }\n\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n  {;\n//@ assert(0<=buf);\n}\n\n  {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n END:  return 0;\n}",
        "combined_annotation_num_solver_calls": 17,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main (void)\n{\n  \n  int __BLAST_NONDET;\n  int in;\n  int inlen;\n  int bufferlen;\n  int buf;\n  int buflim;\n\n  if(bufferlen >1);else goto END;\n  if(inlen > 0);else goto END;\n  if(bufferlen < inlen);else goto END;\n\n  buf = 0;\n  in = 0;\n  buflim = bufferlen - 2;\n    \n  /*@\nloop invariant i1: 0 <= buf <= bufferlen;\nloop invariant i2: 0 <= in < inlen;\nloop invariant i3: buf <= buflim;\nloop invariant i4: buf < bufferlen;\nloop invariant i5: in < inlen;\nloop invariant i6: buflim < bufferlen;\nloop invariant i7: buf + 1 < bufferlen;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i94: 0 <= in <= inlen;\n\nloop invariant i96: buflim <= bufferlen - 2;\n\nloop invariant i98: 0 <= buf <= buflim;\nloop invariant i99: in <= inlen;\nloop invariant i100: (buf < bufferlen);\nloop invariant i101: (in < inlen);\nloop invariant i102: (in <= inlen);\nloop invariant i103: (buf <= buflim);\nloop invariant i104: 0 <= buf <= buflim + 1;\nloop invariant i105: __BLAST_NONDET ==> buf <= buflim;\nloop invariant i106: !__BLAST_NONDET ==> (buf < bufferlen);\nloop invariant i107: !__BLAST_NONDET ==> (in < inlen);\n\n\nloop invariant i110: 0 <= buf <= bufferlen - 1;\nloop invariant i111: 0 <= in <= inlen - 1;\n\nloop invariant i113: buf < buflim ==> buf <= buflim;\nloop invariant i114: buf < buflim ==> buf >= 0;\n\nloop invariant i116: buf <= buflim ==> buf <= buflim;\nloop invariant i117: buf <= buflim ==> buf >= 0;\n\nloop invariant i119: buf >= 0 ==> buf <= buflim;\nloop invariant i120: buf >= 0 ==> buf >= 0;\nloop invariant i121: 0 <= in ==> in < inlen;\nloop invariant i122: 0 <= in ==> in <= inlen;\nloop invariant i123: 0 <= in ==> in >= 0;\nloop invariant i124: in < inlen ==> in <= inlen;\nloop invariant i125: in < inlen ==> in >= 0;\nloop invariant i126: in <= inlen ==> in < inlen;\nloop invariant i127: in <= inlen ==> in <= inlen;\nloop invariant i128: in <= inlen ==> in >= 0;\nloop invariant i129: in >= 0 ==> in < inlen;\nloop invariant i130: in >= 0 ==> in <= inlen;\nloop invariant i131: in >= 0 ==> in >= 0;\nloop invariant i132: buflim == bufferlen - 2;\nloop invariant i133: bufferlen < inlen ==> buflim == bufferlen - 2;\nloop invariant i134: inlen <= bufferlen ==> buflim == bufferlen - 2;\nloop invariant i135: buflim == bufferlen - 2 ==> bufferlen < inlen;\n\nloop invariant i137: buflim == bufferlen - 2 ==> buflim == bufferlen - 2;\n\nloop invariant i139: (__BLAST_NONDET) ==> buf <= buflim;\nloop invariant i140: (__BLAST_NONDET) ==> buf >= 0;\n\nloop invariant i142: (__BLAST_NONDET) ==> in < inlen;\nloop invariant i143: (__BLAST_NONDET) ==> in <= inlen;\nloop invariant i144: (__BLAST_NONDET) ==> in >= 0;\nloop invariant i145: (__BLAST_NONDET) ==> buflim == bufferlen - 2;\nloop invariant i146: (__BLAST_NONDET) ==> bufferlen < inlen;\n\n\nloop invariant i149: (__BLAST_NONDET) ==> (__BLAST_NONDET) ==> buf <= buflim;\nloop invariant i150: (__BLAST_NONDET) ==> (__BLAST_NONDET) ==> buf >= 0;\n\nloop invariant i152: (__BLAST_NONDET) ==> (__BLAST_NONDET) ==> in < inlen;\nloop invariant i153: (__BLAST_NONDET) ==> (__BLAST_NONDET) ==> in <= inlen;\nloop invariant i154: (__BLAST_NONDET) ==> (__BLAST_NONDET) ==> in >= 0;\nloop invariant i155: (__BLAST_NONDET) ==> (__BLAST_NONDET) ==> buflim == bufferlen - 2;\nloop invariant i156: (__BLAST_NONDET) ==> (__BLAST_NONDET) ==> bufferlen < inlen;\n\n\nloop invariant i159: (__BLAST_NONDET) ==> (__BLAST_NONDET) ==> (__BLAST_NONDET) ==> buf <= buflim;\nloop invariant i160: (__BLAST_NONDET) ==> (__BLAST_NONDET) ==> (__BLAST_NONDET) ==> buf >= 0;\n\nloop invariant i162: 0 <= buf <= bufferlen - 2;\n\n\nloop invariant i165: buf < buflim ==> buf < bufferlen - 2;\n\n\nloop invariant i168: in < inlen - 1 ==> in < inlen - 1;\n\n\nloop invariant i171: buf + 1 < buflim ==> buf + 1 < bufferlen - 2;\nloop invariant i172: in + 1 < inlen - 1 ==> in + 1 < inlen - 1;\nloop invariant i173: buf + 1 < buflim ==> buf + 1 < bufferlen - 1;\nloop invariant i174: in + 1 < inlen - 1 ==> in + 1 < inlen;\nloop invariant i175: buf + 1 < bufferlen - 2 ==> buf + 1 < bufferlen - 1;\n\n\nloop invariant i178: buf + 1 < buflim ==> buf + 1 < inlen - 1;\n\nloop invariant i180: buf + 1 < buflim ==> buf + 1 < buflim;\nloop invariant i181: buf + 1 < bufferlen - 2 ==> buf + 1 < inlen - 1;\nloop invariant i182: buf + 1 < bufferlen - 2 ==> buf + 1 < buflim;\n\nloop invariant i184: 0 <= in;\nloop invariant i185: 0 <= buf;\nloop invariant i186: bufferlen > 1;\nloop invariant i187: inlen > 0;\nloop invariant i188: bufferlen < inlen;\n\n\nloop invariant i191: __BLAST_NONDET ==> buf < bufferlen;\nloop invariant i192: __BLAST_NONDET ==> buf < inlen;\n\nloop invariant i194: __BLAST_NONDET ==> in < inlen;\nloop invariant i195: __BLAST_NONDET ==> 0 <= buf;\nloop invariant i196: __BLAST_NONDET ==> 0 <= in;\nloop invariant i197: __BLAST_NONDET ==> 0 <= buflim;\nloop invariant i198: __BLAST_NONDET ==> 0 <= bufferlen;\nloop invariant i199: __BLAST_NONDET ==> 0 <= inlen;\nloop invariant i200: __BLAST_NONDET ==> bufferlen > 1;\nloop invariant i201: __BLAST_NONDET ==> inlen > 0;\nloop invariant i202: __BLAST_NONDET ==> bufferlen < inlen;\n\nloop invariant i204: 0 <= buf < bufferlen;\nloop invariant i205: buf < buflim ==> in < inlen;\n\n\n\n\n\n\nloop invariant i212: (buf == buflim ==> buf < bufferlen - 1);\nloop invariant i213: buf < buflim + 2;\n\nloop invariant i215: buf == buflim ==> 0 <= in < inlen;\nloop invariant i216: !(__BLAST_NONDET) ==> 0 <= buf < bufferlen;\nloop invariant i217: !(__BLAST_NONDET) ==> 0 <= in < inlen;\nloop invariant i218: !(__BLAST_NONDET) ==> buf <= buflim;\nloop invariant i219: !(__BLAST_NONDET) ==> buf == buflim ==> 0 <= in < inlen;\n\nloop invariant i221: (buf == 0 && in == 0) ==> (inlen >= 0);\nloop invariant i222: (buf == buflim && in == inlen) ==> (bufferlen >= 0);\nloop invariant i223: (buf == buflim && in == inlen) ==> (inlen >= 0);\nloop invariant i224: (buf == buflim && in == inlen) ==> (bufferlen >= inlen);\nloop invariant i225: in == inlen ==> buf == buflim;\nloop invariant i226: buf <= buflim ==> in < inlen;\nloop invariant i227: in < inlen ==> buf <= buflim;\nloop invariant i228: buf <= buflim ==> in <= inlen;\nloop invariant i229: in <= inlen ==> buf <= buflim;\n*/\nwhile (__BLAST_NONDET)\n  {\n    if (buf == buflim)\n      break;\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n \n    buf++;\nout:\n    in++;\n    {;\n//@ assert(0<=in);\n}\n\n    {;\n//@ assert(in<inlen);\n}\n\n  }\n\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n  {;\n//@ assert(0<=buf);\n}\n\n  {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n END:  return 0;\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/split.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/11.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/15.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/16.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/18.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/23.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/30.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/32.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/37.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/38.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/41.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/43.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/44.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/46.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/popl.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/05.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/07.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/37.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/39.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/gulv_simp.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/substring1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/xy10.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/const_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/multivar_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/phases_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/simple_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/simple_safe2.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/simple_safe3.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/simple_safe4.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/underapprox_safe2.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/barbr.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/barbrprime.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/bk-nat.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/bkley.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/efm.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/ex1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/lifnat.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/lifnatprime.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/lifo.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/seesaw.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/substring1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/swim.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/swim1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/ken-imp.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/rajamani_1.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/13.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/14.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/19.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/20.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/39.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/cav.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/19.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/gulv.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/pldi082_unbounded.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/underapprox_unsafe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/sendmail-close-angle.c"
        ],
        "skipped": [],
        "total": 167,
        "success_count": 140,
        "failure_count": 27,
        "success_rate": 0.8383233532934131
    }
}