{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n    if (!(i >= 0 && j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    while(x != 0) {\n        x--;\n        y--;\n    }\n\n    if (i == j) {\n        {;\n//@ assert(y == 0);\n}\n\n    }\n    return 0;\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= i <= j;\nloop invariant 0 <= x <= i;\nloop invariant 0 <= y <= j;\nloop invariant x + y >= i;\nloop invariant x + y <= j;\nloop invariant x = i - y;\nloop invariant y = j - x;\nloop invariant x >= 0 ==> y >= 0;\nloop invariant x = 0 ==> y = 0;\nloop invariant x = 0 ==> y = j;\nloop invariant x = i ==> y = 0;\nloop invariant x = i ==> y = i;\nloop invariant 0 <= i <= j;\nloop invariant 0 <= x <= i;\nloop invariant 0 <= y <= j;\nloop invariant x + y >= i;\nloop invariant x + y <= j;\nloop invariant x = i - y;\nloop invariant y = j - x;\nloop invariant x >= 0 ==> y >= 0;\nloop invariant x = 0 ==> y >= 0;\nloop invariant x = 0 ==> y = j;\nloop invariant x = i ==> y = 0;\nloop invariant x = i ==> y = i;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= i;\nloop invariant 0 <= y <= j;\nloop invariant x + y == i + j;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant 0 <= x <= i;\nloop invariant 0 <= y <= j;\nloop invariant x + y == i + j;\nloop invariant x >= 0;\nloop invariant y >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= i;loop invariant 0 <= y <= j;loop invariant (i >= j) ==> (y == 0);\n*/\n```",
            "```\n/*@\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x <= y;\nloop invariant (x != 0) ==> (y == j);\nloop invariant (x != 0) ==> (i != j);\nloop invariant (x == 0) ==> (y == 0);\nloop invariant (x == 0) ==> (i == 0);\nloop invariant (x == 0) ==> (j == 0);\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x <= y;\nloop invariant (x != 0) ==> (y == j);\nloop invariant (x != 0) ==> (i != j);\nloop invariant (x == 0) ==> (y == 0);\nloop invariant (x == 0) ==> (i == 0);\nloop invariant (x == 0) ==> (j == 0);\n*/\n```",
            "```\n/*@\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant (x == 0) ==> (y == 0);\nloop invariant (!(x == 0)) ==> (y == j - i);\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant (x == 0) ==> (y == 0);\nloop invariant (!(x == 0)) ==> (y == j - i);\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant (x == 0) ==> (y == 0);\nloop invariant (!(x == 0)) ==> (y == j - i);\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant (x == 0) ==> (y == 0);\nloop invariant (!(x == 0)) ==> (y == j - i);\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant (x == 0) ==> (y == 0);\nloop invariant (!(x == 0)) ==> (y == j - i);\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant (x == 0) ==> (y == 0);\nloop invariant (!(x == 0)) ==> (y == j - i);\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant (x == 0) ==> (y == 0);\nloop invariant (!(x == 0)) ==> (y == j - i);\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant (x == 0) ==> (y == 0);\nloop invariant (!(x == 0)) ==> (y == j - i);\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant (x == 0) ==> (y == 0);\nloop invariant (!(x == 0)) ==> (y == j - i);\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant (x == 0) ==> (y == 0);\nloop invariant (!(x == 0)) ==> (y == j - i);\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant (x == 0) ==> (y == 0);\nloop invariant (!(x == 0)) ==> (y == j - i);\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant (x == 0) ==> (y == 0);\nloop invariant (!(x == 0)) ==> (y == j - i);\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant (x == 0) ==> (y == 0);\nloop invariant (!(x == 0)) ==> (y == j - i);\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant (x == 0) ==> (y == 0);\nloop invariant (!(x == 0)) ==> (y == j - i);\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant (x == 0) ==> (y == 0);\nloop invariant (!(x == 0)) ==> (y == j - i);\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant (x == 0) ==> (y == 0);\nloop invariant (!(x == 0)) ==> (y == j - i);\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant (x == 0) ==> (y == 0);\nloop invariant (!(x == 0)) ==> (y == j - i);\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant (x == 0) ==> (y == 0);\nloop invariant (!(x == 0)) ==> (y == j - i);\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant (x == 0) ==> (y == 0);\nloop invariant (!(x == 0)) ==> (y == j - i);\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant (x == 0) ==> (y == 0);\nloop invariant (!(x == 0)) ==> (y == j - i);\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant (x == 0) ==> (y == 0);\nloop invariant (!(x == 0)) ==> (y == j - i);\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant (x == 0) ==> (y == 0);\nloop invariant (!(x == 0)) ==> (y == j - i);\nloop invariant x >= 0;\n*/\n```",
            "```\n/*@\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant x >= 0 ==> y >= 0;\nloop invariant i >= 0 ==> j >= 0;\nloop invariant x >= 0 ==> i >= 0;\nloop invariant y >= 0 ==> j >= 0;\nloop invariant x >= 0 ==> x == 0;\nloop invariant y >= 0 ==> y == 0;\nloop invariant i >= 0 ==> i == j;\nloop invariant j >= 0 ==> j == i;\nloop invariant x >= 0 ==> x == j;\nloop invariant y >= 0 ==> y == i;\nloop invariant x >= 0 ==> x == i;\nloop invariant y >= 0 ==> y == j;\nloop invariant x >= 0 ==> i >= j;\nloop invariant y >= 0 ==> j >= i;\nloop invariant x >= 0 ==> i == j;\nloop invariant y >= 0 ==> j == i;\nloop invariant x >= 0 ==> i == x;\nloop invariant y >= 0 ==> j == y;\nloop invariant x >= 0 ==> i == y;\nloop invariant y >= 0 ==> j == x;\nloop invariant x >= 0 ==> x == j;\nloop invariant y >= 0 ==> y == i;\nloop invariant x >= 0 ==> x == i;\nloop invariant y >= 0 ==> y == j;\nloop invariant x >= 0 ==> i == j;\nloop invariant y >= 0 ==> j == i;\nloop invariant x >= 0 ==> i == x;\nloop invariant y >= 0 ==> j == y;\nloop invariant x >= 0 ==> i == y;\nloop invariant y >= 0 ==> j == x;\nloop invariant x >= 0 ==> x == j;\nloop invariant y >= 0 ==> y == i;\nloop invariant x >= 0 ==> x == i;\nloop invariant y >= 0 ==> y == j;\nloop invariant x >= 0 ==> i == j;\nloop invariant y >= 0 ==> j == i;\nloop invariant x >= 0 ==> i == x;\nloop invariant y >= 0 ==> j == y;\nloop invariant x >= 0 ==> i == y;\nloop invariant y >= 0 ==> j == x;\nloop invariant x >= 0 ==> x == j;\nloop invariant y >= 0 ==> y == i;\nloop invariant x >= 0 ==> x == i;\nloop invariant y >= 0 ==> y == j;\nloop invariant x >= 0 ==> i == j;\nloop invariant y >= 0 ==> j == i;\nloop invariant x >= 0 ==> i == x;\nloop invariant y >= 0 ==> j == y;\nloop invariant x >= 0 ==> i == y;\nloop invariant y >= 0 ==> j == x;\nloop invariant x >= 0 ==> x == j;\nloop invariant y >= 0 ==> y == i;\nloop invariant x >= 0 ==> x == i;\nloop invariant y >= 0 ==> y == j;\nloop invariant x >= 0 ==> i == j;\nloop invariant y >= 0 ==> j == i;\nloop invariant x >= 0 ==> i == x;\nloop invariant y >= 0 ==> j == y;\nloop invariant x >= 0 ==> i == y;\nloop invariant y >= 0 ==> j == x;\nloop invariant x >= 0 ==> x == j;\nloop invariant y >= 0 ==> y == i;\nloop invariant x >= 0 ==> x == i;\nloop invariant y >= 0 ==> y == j;\nloop invariant x >= 0 ==> i == j;\nloop invariant y >= 0 ==> j == i;\nloop invariant x >= 0 ==> i == x;\nloop invariant y >= 0 ==> j == y;\nloop invariant x >= 0 ==> i == y;\nloop invariant y >= 0 ==> j == x;\nloop invariant x >= 0 ==> x == j;\nloop invariant y >= 0 ==> y == i;\nloop invariant x >= 0 ==> x == i;\nloop invariant y >= 0 ==> y == j;\nloop invariant x >= 0 ==> i == j;\nloop invariant y >= 0 ==> j == i;\nloop invariant x >= 0 ==> i == x;\nloop invariant y >= 0 ==> j == y;\nloop invariant x >= 0 ==> i == y;\nloop invariant y >= 0 ==> j == x;\nloop invariant x >= 0 ==> x == j;\nloop invariant y >= 0 ==> y == i;\nloop invariant x >= 0 ==> x == i;\nloop invariant y >= 0 ==> y == j;\nloop invariant x >= 0 ==> i == j;\nloop invariant y >= 0 ==> j == i;\nloop invariant x >= 0 ==> i == x;\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= i;\nloop invariant 0 <= y <= j;\nloop invariant x >= (i - (j - y));\nloop invariant y >= (j - (i - x));\nloop invariant (i == j) ==> (y == 0);\nloop invariant 0 <= x <= i;\nloop invariant 0 <= y <= j;\nloop invariant x >= (i - (j - y));\nloop invariant y >= (j - (i - x));\nloop invariant (i == j) ==> (y == 0);\n*/\n```",
            "```\n/*@\nloop invariant i >= 0 && i <= 100000;\nloop invariant j >= 0 && j <= 100000;\nloop invariant x >= 0 && x <= i;\nloop invariant y >= 0 && y <= j;\nloop invariant x - y == i - j;\nloop invariant x + y == i + j;\nloop invariant x * y == i * j;\nloop invariant x / y == i / j;\nloop invariant x % y == i % j;\nloop invariant x ^ y == i ^ j;\nloop invariant x & y == i & j;\nloop invariant x | y == i | j;\nloop invariant x << y == i << j;\nloop invariant x >> y == i >> j;\nloop invariant x + y == i + j;\nloop invariant x - y == i - j;\nloop invariant x * y == i * j;\nloop invariant x / y == i / j;\nloop invariant x % y == i % j;\nloop invariant x ^ y == i ^ j;\nloop invariant x & y == i & j;\nloop invariant x | y == i | j;\nloop invariant x << y == i << j;\nloop invariant x >> y == i >> j;\nloop invariant x + y == i + j;\nloop invariant x - y == i - j;\nloop invariant x * y == i * j;\nloop invariant x / y == i / j;\nloop invariant x % y == i % j;\nloop invariant x ^ y == i ^ j;\nloop invariant x & y == i & j;\nloop invariant x | y == i | j;\nloop invariant x << y == i << j;\nloop invariant x >> y == i >> j;\nloop invariant x + y == i + j;\nloop invariant x - y == i - j;\nloop invariant x * y == i * j;\nloop invariant x / y == i / j;\nloop invariant x % y == i % j;\nloop invariant x ^ y == i ^ j;\nloop invariant x & y == i & j;\nloop invariant x | y == i | j;\nloop invariant x << y == i << j;\nloop invariant x >> y == i >> j;\nloop invariant x + y == i + j;\nloop invariant x - y == i - j;\nloop invariant x * y == i * j;\nloop invariant x / y == i / j;\nloop invariant x % y == i % j;\nloop invariant x ^ y == i ^ j;\nloop invariant x & y == i & j;\nloop invariant x | y == i | j;\nloop invariant x << y == i << j;\nloop invariant x >> y == i >> j;\nloop invariant x + y == i + j;\nloop invariant x - y == i - j;\nloop invariant x * y == i * j;\nloop invariant x / y == i / j;\nloop invariant x % y == i % j;\nloop invariant x ^ y == i ^ j;\nloop invariant x & y == i & j;\nloop invariant x | y == i | j;\nloop invariant x << y == i << j;\nloop invariant x >> y == i >> j;\nloop invariant x + y == i + j;\nloop invariant x - y == i - j;\nloop invariant x * y == i * j;\nloop invariant x / y == i / j;\nloop invariant x % y == i % j;\nloop invariant x ^ y == i ^ j;\nloop invariant x & y == i & j;\nloop invariant x | y == i | j;\nloop invariant x << y == i << j;\nloop invariant x >> y == i >> j;\nloop invariant x + y == i + j;\nloop invariant x - y == i - j;\nloop invariant x * y == i * j;\nloop invariant x / y == i / j;\nloop invariant x % y == i % j;\nloop invariant x ^ y == i ^ j;\nloop invariant x & y == i & j;\nloop invariant x | y == i | j;\nloop invariant x << y == i << j;\nloop invariant x >> y == i >> j;\nloop invariant x + y == i + j;\nloop invariant x - y == i - j;\nloop invariant x * y == i * j;\nloop invariant x / y == i / j;\nloop invariant x % y == i % j;\nloop invariant x ^ y == i ^ j;\nloop invariant x & y == i & j;\nloop invariant x | y == i | j;\nloop invariant x << y == i << j;\nloop invariant x >> y == i >> j;\nloop invariant x + y == i + j;\nloop invariant x - y == i - j;\nloop invariant x * y == i * j;\nloop invariant x / y == i / j;\n*/\n```",
            "```\n/*@\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x >= y;\nloop invariant x == y ==> x == 0;\nloop invariant x != y ==> x != 0;\nloop invariant x >= 1 ==> x <= i;\nloop invariant y >= 1 ==> y <= j;\nloop invariant x >= 2 ==> x <= i - 1;\nloop invariant y >= 2 ==> y <= j - 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= i;\nloop invariant 0 <= y <= j;\nloop invariant i - x = j - y;\nloop invariant (x == i) ==> (y == j);\nloop invariant (x == i) ==> (y == j);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= INT_MAX;\nloop invariant 0 <= j <= INT_MAX;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant y >= 0;\nloop invariant y <= i;\nloop invariant y <= j;\nloop invariant i >= j;\nloop invariant x == i;\nloop invariant y == j;\nloop invariant 0 <= i <= INT_MAX;\nloop invariant 0 <= j <= INT_MAX;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant y >= 0;\nloop invariant y <= i;\nloop invariant y <= j;\nloop invariant i >= j;\nloop invariant x == i;\nloop invariant y == j;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= j;\nloop invariant i >= x;\nloop invariant i >= j;\n*/\n```",
            "```\n/*@\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i >= j;\nloop invariant x >= i;\nloop invariant y >= j;\nloop invariant x > 0 ==> y > 0;\nloop invariant x == 0 ==> y == 0;\nloop invariant x == 0 ==> i == j;\nloop invariant x == 0 ==> y == 0;\nloop invariant x == 0 ==> i == j;\nloop invariant x == 0 ==> y == 0;\nloop invariant x == 0 ==> i == j;\nloop invariant x == 0 ==> y == 0;\nloop invariant x == 0 ==> i == j;\nloop invariant x == 0 ==> y == 0;\nloop invariant x == 0 ==> i == j;\nloop invariant x == 0 ==> y == 0;\nloop invariant x == 0 ==> i == j;\nloop invariant x == 0 ==> y == 0;\nloop invariant x == 0 ==> i == j;\nloop invariant x == 0 ==> y == 0;\nloop invariant x == 0 ==> i == j;\nloop invariant x == 0 ==> y == 0;\nloop invariant x == 0 ==> i == j;\nloop invariant x == 0 ==> y == 0;\nloop invariant x == 0 ==> i == j;\nloop invariant x == 0 ==> y == 0;\nloop invariant x == 0 ==> i == j;\nloop invariant x == 0 ==> y == 0;\nloop invariant x == 0 ==> i == j;\nloop invariant x == 0 ==> y == 0;\nloop invariant x == 0 ==> i == j;\nloop invariant x == 0 ==> y == 0;\nloop invariant x == 0 ==> i == j;\nloop invariant x == 0 ==> y == 0;\nloop invariant x == 0 ==> i == j;\nloop invariant x == 0 ==> y == 0;\nloop invariant x == 0 ==> i == j;\nloop invariant x == 0 ==> y == 0;\nloop invariant x == 0 ==> i == j;\nloop invariant x == 0 ==> y == 0;\nloop invariant x == 0 ==> i == j;\nloop invariant x == 0 ==> y == 0;\nloop invariant x == 0 ==> i == j;\nloop invariant x == 0 ==> y == 0;\nloop invariant x == 0 ==> i == j;\nloop invariant x == 0 ==> y == 0;\nloop invariant x == 0 ==> i == j;\nloop invariant x == 0 ==> y == 0;\nloop invariant x == 0 ==> i == j;\nloop invariant x == 0 ==> y == 0;\nloop invariant x == 0 ==> i == j;\nloop invariant x == 0 ==> y == 0;\nloop invariant x == 0 ==> i == j;\nloop invariant x == 0 ==> y == 0;\nloop invariant x == 0 ==> i == j;\nloop invariant x == 0 ==> y == 0;\nloop invariant x == 0 ==> i == j;\nloop invariant x == 0 ==> y == 0;\nloop invariant x == 0 ==> i == j;\nloop invariant x == 0 ==> y == 0;\nloop invariant x == 0 ==> i == j;\nloop invariant x == 0 ==> y == 0;\nloop invariant x == 0 ==> i == j;\nloop invariant x == 0 ==> y == 0;\nloop invariant x == 0 ==> i == j;\nloop invariant x == 0 ==> y == 0;\nloop invariant x == 0 ==> i == j;\nloop invariant x == 0 ==> y == 0;\nloop invariant x == 0 ==> i == j;\nloop invariant x == 0 ==> y == 0;\nloop invariant x == 0 ==> i == j;\nloop invariant x == 0 ==> y == 0;\nloop invariant x == 0 ==> i == j;\nloop invariant x == 0 ==> y == 0;\nloop invariant x == 0 ==> i == j;\nloop invariant x == 0 ==> y == 0;\nloop invariant x == 0 ==> i == j;\nloop invariant x == 0 ==> y == 0;\nloop invariant x == 0 ==> i == j;\nloop invariant x == 0 ==> y == 0;\nloop invariant x == 0 ==> i == j;\nloop invariant x == 0 ==> y == 0;\nloop invariant x == 0 ==> i == j;\nloop invariant x == 0 ==> y == 0;\nloop invariant x == 0 ==> i == j;\nloop invariant x == 0 ==> y == 0;\nloop invariant x == 0 ==> i == j;\nloop invariant x == 0 ==> y == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= i;\nloop invariant 0 <= y <= j;\nloop invariant x + y == i + j;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x + y == i + j ==> x == 0 ==> y == 0;\nloop invariant x + y == i + j ==> x == 0 ==> y == 0 ==> y == 0;\nloop invariant x + y == i + j ==> x == 0 ==> y == 0 ==> y == 0 ==> y == 0;\nloop invariant x + y == i + j ==> x == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0;\nloop invariant x + y == i + j ==> x == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0;\nloop invariant x + y == i + j ==> x == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0;\nloop invariant x + y == i + j ==> x == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0;\nloop invariant x + y == i + j ==> x == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0;\nloop invariant x + y == i + j ==> x == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0;\nloop invariant x + y == i + j ==> x == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0;\nloop invariant x + y == i + j ==> x == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0;\nloop invariant x + y == i + j ==> x == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0;\nloop invariant x + y == i + j ==> x == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0;\nloop invariant x + y == i + j ==> x == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0;\nloop invariant x + y == i + j ==> x == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0;\nloop invariant x + y == i + j ==> x == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 10,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= j;\nloop invariant 0 <= x <= i;\nloop invariant 0 <= y <= j;\nloop invariant x + y >= i;\nloop invariant x + y <= j;\nloop invariant x = i - y;\nloop invariant y = j - x;\nloop invariant x >= 0 ==> y >= 0;\nloop invariant x = 0 ==> y = 0;\nloop invariant x = 0 ==> y = j;\nloop invariant x = i ==> y = 0;\nloop invariant x = i ==> y = i;\nloop invariant 0 <= i <= j;\nloop invariant 0 <= x <= i;\nloop invariant 0 <= y <= j;\nloop invariant x + y >= i;\nloop invariant x + y <= j;\nloop invariant x = i - y;\nloop invariant y = j - x;\nloop invariant x >= 0 ==> y >= 0;\nloop invariant x = 0 ==> y >= 0;\nloop invariant x = 0 ==> y = j;\nloop invariant x = i ==> y = 0;\nloop invariant x = i ==> y = i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n    if (!(i >= 0 && j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    /*@\n\nloop invariant i2: 0 <= x <= i;\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile(x != 0) {\n        x--;\n        y--;\n    }\n\n    if (i == j) {\n        {;\n//@ assert(y == 0);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= i;\nloop invariant 0 <= y <= j;\nloop invariant x + y == i + j;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant 0 <= x <= i;\nloop invariant 0 <= y <= j;\nloop invariant x + y == i + j;\nloop invariant x >= 0;\nloop invariant y >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n    if (!(i >= 0 && j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    /*@\nloop invariant i1: 0 <= x <= i;\n\n\nloop invariant i4: x >= 0;\n\n*/\nwhile(x != 0) {\n        x--;\n        y--;\n    }\n\n    if (i == j) {\n        {;\n//@ assert(y == 0);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= i;loop invariant 0 <= y <= j;loop invariant (i >= j) ==> (y == 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n    if (!(i >= 0 && j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    /*@\nloop invariant i1: 0 <= x <= i;loop invariant 0 <= y <= j;loop invariant (i >= j) ==> (y == 0);\n*/\nwhile(x != 0) {\n        x--;\n        y--;\n    }\n\n    if (i == j) {\n        {;\n//@ assert(y == 0);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x <= y;\nloop invariant (x != 0) ==> (y == j);\nloop invariant (x != 0) ==> (i != j);\nloop invariant (x == 0) ==> (y == 0);\nloop invariant (x == 0) ==> (i == 0);\nloop invariant (x == 0) ==> (j == 0);\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x <= y;\nloop invariant (x != 0) ==> (y == j);\nloop invariant (x != 0) ==> (i != j);\nloop invariant (x == 0) ==> (y == 0);\nloop invariant (x == 0) ==> (i == 0);\nloop invariant (x == 0) ==> (j == 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n    if (!(i >= 0 && j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    /*@\nloop invariant i1: i >= 0;\nloop invariant i2: j >= 0;\nloop invariant i3: x >= 0;\n\nloop invariant i5: x <= i;\nloop invariant i6: y <= j;\n\n\n\n\n\n\n*/\nwhile(x != 0) {\n        x--;\n        y--;\n    }\n\n    if (i == j) {\n        {;\n//@ assert(y == 0);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant (x == 0) ==> (y == 0);\nloop invariant (!(x == 0)) ==> (y == j - i);\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant (x == 0) ==> (y == 0);\nloop invariant (!(x == 0)) ==> (y == j - i);\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant (x == 0) ==> (y == 0);\nloop invariant (!(x == 0)) ==> (y == j - i);\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant (x == 0) ==> (y == 0);\nloop invariant (!(x == 0)) ==> (y == j - i);\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant (x == 0) ==> (y == 0);\nloop invariant (!(x == 0)) ==> (y == j - i);\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant (x == 0) ==> (y == 0);\nloop invariant (!(x == 0)) ==> (y == j - i);\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant (x == 0) ==> (y == 0);\nloop invariant (!(x == 0)) ==> (y == j - i);\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant (x == 0) ==> (y == 0);\nloop invariant (!(x == 0)) ==> (y == j - i);\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant (x == 0) ==> (y == 0);\nloop invariant (!(x == 0)) ==> (y == j - i);\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant (x == 0) ==> (y == 0);\nloop invariant (!(x == 0)) ==> (y == j - i);\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant (x == 0) ==> (y == 0);\nloop invariant (!(x == 0)) ==> (y == j - i);\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant (x == 0) ==> (y == 0);\nloop invariant (!(x == 0)) ==> (y == j - i);\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant (x == 0) ==> (y == 0);\nloop invariant (!(x == 0)) ==> (y == j - i);\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant (x == 0) ==> (y == 0);\nloop invariant (!(x == 0)) ==> (y == j - i);\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant (x == 0) ==> (y == 0);\nloop invariant (!(x == 0)) ==> (y == j - i);\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant (x == 0) ==> (y == 0);\nloop invariant (!(x == 0)) ==> (y == j - i);\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant (x == 0) ==> (y == 0);\nloop invariant (!(x == 0)) ==> (y == j - i);\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant (x == 0) ==> (y == 0);\nloop invariant (!(x == 0)) ==> (y == j - i);\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant (x == 0) ==> (y == 0);\nloop invariant (!(x == 0)) ==> (y == j - i);\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant (x == 0) ==> (y == 0);\nloop invariant (!(x == 0)) ==> (y == j - i);\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant (x == 0) ==> (y == 0);\nloop invariant (!(x == 0)) ==> (y == j - i);\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant (x == 0) ==> (y == 0);\nloop invariant (!(x == 0)) ==> (y == j - i);\nloop invariant x >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n    if (!(i >= 0 && j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    /*@\nloop invariant i1: x >= 0;\n\n\n\n*/\nwhile(x != 0) {\n        x--;\n        y--;\n    }\n\n    if (i == j) {\n        {;\n//@ assert(y == 0);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 10,
                "annotations": "```\n/*@\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant x >= 0 ==> y >= 0;\nloop invariant i >= 0 ==> j >= 0;\nloop invariant x >= 0 ==> i >= 0;\nloop invariant y >= 0 ==> j >= 0;\nloop invariant x >= 0 ==> x == 0;\nloop invariant y >= 0 ==> y == 0;\nloop invariant i >= 0 ==> i == j;\nloop invariant j >= 0 ==> j == i;\nloop invariant x >= 0 ==> x == j;\nloop invariant y >= 0 ==> y == i;\nloop invariant x >= 0 ==> x == i;\nloop invariant y >= 0 ==> y == j;\nloop invariant x >= 0 ==> i >= j;\nloop invariant y >= 0 ==> j >= i;\nloop invariant x >= 0 ==> i == j;\nloop invariant y >= 0 ==> j == i;\nloop invariant x >= 0 ==> i == x;\nloop invariant y >= 0 ==> j == y;\nloop invariant x >= 0 ==> i == y;\nloop invariant y >= 0 ==> j == x;\nloop invariant x >= 0 ==> x == j;\nloop invariant y >= 0 ==> y == i;\nloop invariant x >= 0 ==> x == i;\nloop invariant y >= 0 ==> y == j;\nloop invariant x >= 0 ==> i == j;\nloop invariant y >= 0 ==> j == i;\nloop invariant x >= 0 ==> i == x;\nloop invariant y >= 0 ==> j == y;\nloop invariant x >= 0 ==> i == y;\nloop invariant y >= 0 ==> j == x;\nloop invariant x >= 0 ==> x == j;\nloop invariant y >= 0 ==> y == i;\nloop invariant x >= 0 ==> x == i;\nloop invariant y >= 0 ==> y == j;\nloop invariant x >= 0 ==> i == j;\nloop invariant y >= 0 ==> j == i;\nloop invariant x >= 0 ==> i == x;\nloop invariant y >= 0 ==> j == y;\nloop invariant x >= 0 ==> i == y;\nloop invariant y >= 0 ==> j == x;\nloop invariant x >= 0 ==> x == j;\nloop invariant y >= 0 ==> y == i;\nloop invariant x >= 0 ==> x == i;\nloop invariant y >= 0 ==> y == j;\nloop invariant x >= 0 ==> i == j;\nloop invariant y >= 0 ==> j == i;\nloop invariant x >= 0 ==> i == x;\nloop invariant y >= 0 ==> j == y;\nloop invariant x >= 0 ==> i == y;\nloop invariant y >= 0 ==> j == x;\nloop invariant x >= 0 ==> x == j;\nloop invariant y >= 0 ==> y == i;\nloop invariant x >= 0 ==> x == i;\nloop invariant y >= 0 ==> y == j;\nloop invariant x >= 0 ==> i == j;\nloop invariant y >= 0 ==> j == i;\nloop invariant x >= 0 ==> i == x;\nloop invariant y >= 0 ==> j == y;\nloop invariant x >= 0 ==> i == y;\nloop invariant y >= 0 ==> j == x;\nloop invariant x >= 0 ==> x == j;\nloop invariant y >= 0 ==> y == i;\nloop invariant x >= 0 ==> x == i;\nloop invariant y >= 0 ==> y == j;\nloop invariant x >= 0 ==> i == j;\nloop invariant y >= 0 ==> j == i;\nloop invariant x >= 0 ==> i == x;\nloop invariant y >= 0 ==> j == y;\nloop invariant x >= 0 ==> i == y;\nloop invariant y >= 0 ==> j == x;\nloop invariant x >= 0 ==> x == j;\nloop invariant y >= 0 ==> y == i;\nloop invariant x >= 0 ==> x == i;\nloop invariant y >= 0 ==> y == j;\nloop invariant x >= 0 ==> i == j;\nloop invariant y >= 0 ==> j == i;\nloop invariant x >= 0 ==> i == x;\nloop invariant y >= 0 ==> j == y;\nloop invariant x >= 0 ==> i == y;\nloop invariant y >= 0 ==> j == x;\nloop invariant x >= 0 ==> x == j;\nloop invariant y >= 0 ==> y == i;\nloop invariant x >= 0 ==> x == i;\nloop invariant y >= 0 ==> y == j;\nloop invariant x >= 0 ==> i == j;\nloop invariant y >= 0 ==> j == i;\nloop invariant x >= 0 ==> i == x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n    if (!(i >= 0 && j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    /*@\nloop invariant i1: x >= 0;\n\nloop invariant i3: i >= 0;\nloop invariant i4: j >= 0;\n\nloop invariant i6: i >= 0 ==> j >= 0;\nloop invariant i7: x >= 0 ==> i >= 0;\nloop invariant i8: y >= 0 ==> j >= 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile(x != 0) {\n        x--;\n        y--;\n    }\n\n    if (i == j) {\n        {;\n//@ assert(y == 0);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n    if (!(i >= 0 && j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    /*@\n\n*/\nwhile(x != 0) {\n        x--;\n        y--;\n    }\n\n    if (i == j) {\n        {;\n//@ assert(y == 0);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= i;\nloop invariant 0 <= y <= j;\nloop invariant x >= (i - (j - y));\nloop invariant y >= (j - (i - x));\nloop invariant (i == j) ==> (y == 0);\nloop invariant 0 <= x <= i;\nloop invariant 0 <= y <= j;\nloop invariant x >= (i - (j - y));\nloop invariant y >= (j - (i - x));\nloop invariant (i == j) ==> (y == 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n    if (!(i >= 0 && j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    /*@\nloop invariant i1: 0 <= x <= i;\n\nloop invariant i3: x >= (i - (j - y));\nloop invariant i4: y >= (j - (i - x));\n\n*/\nwhile(x != 0) {\n        x--;\n        y--;\n    }\n\n    if (i == j) {\n        {;\n//@ assert(y == 0);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant i >= 0 && i <= 100000;\nloop invariant j >= 0 && j <= 100000;\nloop invariant x >= 0 && x <= i;\nloop invariant y >= 0 && y <= j;\nloop invariant x - y == i - j;\nloop invariant x + y == i + j;\nloop invariant x * y == i * j;\nloop invariant x / y == i / j;\nloop invariant x % y == i % j;\nloop invariant x ^ y == i ^ j;\nloop invariant x & y == i & j;\nloop invariant x | y == i | j;\nloop invariant x << y == i << j;\nloop invariant x >> y == i >> j;\nloop invariant x + y == i + j;\nloop invariant x - y == i - j;\nloop invariant x * y == i * j;\nloop invariant x / y == i / j;\nloop invariant x % y == i % j;\nloop invariant x ^ y == i ^ j;\nloop invariant x & y == i & j;\nloop invariant x | y == i | j;\nloop invariant x << y == i << j;\nloop invariant x >> y == i >> j;\nloop invariant x + y == i + j;\nloop invariant x - y == i - j;\nloop invariant x * y == i * j;\nloop invariant x / y == i / j;\nloop invariant x % y == i % j;\nloop invariant x ^ y == i ^ j;\nloop invariant x & y == i & j;\nloop invariant x | y == i | j;\nloop invariant x << y == i << j;\nloop invariant x >> y == i >> j;\nloop invariant x + y == i + j;\nloop invariant x - y == i - j;\nloop invariant x * y == i * j;\nloop invariant x / y == i / j;\nloop invariant x % y == i % j;\nloop invariant x ^ y == i ^ j;\nloop invariant x & y == i & j;\nloop invariant x | y == i | j;\nloop invariant x << y == i << j;\nloop invariant x >> y == i >> j;\nloop invariant x + y == i + j;\nloop invariant x - y == i - j;\nloop invariant x * y == i * j;\nloop invariant x / y == i / j;\nloop invariant x % y == i % j;\nloop invariant x ^ y == i ^ j;\nloop invariant x & y == i & j;\nloop invariant x | y == i | j;\nloop invariant x << y == i << j;\nloop invariant x >> y == i >> j;\nloop invariant x + y == i + j;\nloop invariant x - y == i - j;\nloop invariant x * y == i * j;\nloop invariant x / y == i / j;\nloop invariant x % y == i % j;\nloop invariant x ^ y == i ^ j;\nloop invariant x & y == i & j;\nloop invariant x | y == i | j;\nloop invariant x << y == i << j;\nloop invariant x >> y == i >> j;\nloop invariant x + y == i + j;\nloop invariant x - y == i - j;\nloop invariant x * y == i * j;\nloop invariant x / y == i / j;\nloop invariant x % y == i % j;\nloop invariant x ^ y == i ^ j;\nloop invariant x & y == i & j;\nloop invariant x | y == i | j;\nloop invariant x << y == i << j;\nloop invariant x >> y == i >> j;\nloop invariant x + y == i + j;\nloop invariant x - y == i - j;\nloop invariant x * y == i * j;\nloop invariant x / y == i / j;\nloop invariant x % y == i % j;\nloop invariant x ^ y == i ^ j;\nloop invariant x & y == i & j;\nloop invariant x | y == i | j;\nloop invariant x << y == i << j;\nloop invariant x >> y == i >> j;\nloop invariant x + y == i + j;\nloop invariant x - y == i - j;\nloop invariant x * y == i * j;\nloop invariant x / y == i / j;\nloop invariant x % y == i % j;\nloop invariant x ^ y == i ^ j;\nloop invariant x & y == i & j;\nloop invariant x | y == i | j;\nloop invariant x << y == i << j;\nloop invariant x >> y == i >> j;\nloop invariant x + y == i + j;\nloop invariant x - y == i - j;\nloop invariant x * y == i * j;\nloop invariant x / y == i / j;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n    if (!(i >= 0 && j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    /*@\n\n\nloop invariant i3: x >= 0 && x <= i;\n\nloop invariant i5: x - y == i - j;\n\n\n\n\n\n\n\n\n\n*/\nwhile(x != 0) {\n        x--;\n        y--;\n    }\n\n    if (i == j) {\n        {;\n//@ assert(y == 0);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x >= y;\nloop invariant x == y ==> x == 0;\nloop invariant x != y ==> x != 0;\nloop invariant x >= 1 ==> x <= i;\nloop invariant y >= 1 ==> y <= j;\nloop invariant x >= 2 ==> x <= i - 1;\nloop invariant y >= 2 ==> y <= j - 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n    if (!(i >= 0 && j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    /*@\nloop invariant i1: i >= 0;\nloop invariant i2: j >= 0;\nloop invariant i3: x >= 0;\n\nloop invariant i5: x <= i;\nloop invariant i6: y <= j;\n\n\n\nloop invariant i10: x >= 1 ==> x <= i;\nloop invariant i11: y >= 1 ==> y <= j;\n\n\n*/\nwhile(x != 0) {\n        x--;\n        y--;\n    }\n\n    if (i == j) {\n        {;\n//@ assert(y == 0);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= i;\nloop invariant 0 <= y <= j;\nloop invariant i - x = j - y;\nloop invariant (x == i) ==> (y == j);\nloop invariant (x == i) ==> (y == j);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n    if (!(i >= 0 && j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    /*@\nloop invariant i1: 0 <= x <= i;\n\n\nloop invariant i4: (x == i) ==> (y == j);\n*/\nwhile(x != 0) {\n        x--;\n        y--;\n    }\n\n    if (i == j) {\n        {;\n//@ assert(y == 0);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= INT_MAX;\nloop invariant 0 <= j <= INT_MAX;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant y >= 0;\nloop invariant y <= i;\nloop invariant y <= j;\nloop invariant i >= j;\nloop invariant x == i;\nloop invariant y == j;\nloop invariant 0 <= i <= INT_MAX;\nloop invariant 0 <= j <= INT_MAX;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant y >= 0;\nloop invariant y <= i;\nloop invariant y <= j;\nloop invariant i >= j;\nloop invariant x == i;\nloop invariant y == j;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n    if (!(i >= 0 && j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    /*@\nloop invariant i1: 0 <= i <= INT_MAX;\nloop invariant i2: 0 <= j <= INT_MAX;\nloop invariant i3: i >= 0;\nloop invariant i4: j >= 0;\n\n\nloop invariant i7: y <= j;\n\n\n\n*/\nwhile(x != 0) {\n        x--;\n        y--;\n    }\n\n    if (i == j) {\n        {;\n//@ assert(y == 0);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= j;\nloop invariant i >= x;\nloop invariant i >= j;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n    if (!(i >= 0 && j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    /*@\n\nloop invariant i2: i >= x;\n\n*/\nwhile(x != 0) {\n        x--;\n        y--;\n    }\n\n    if (i == j) {\n        {;\n//@ assert(y == 0);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i >= j;\nloop invariant x >= i;\nloop invariant y >= j;\nloop invariant x > 0 ==> y > 0;\nloop invariant x == 0 ==> y == 0;\nloop invariant x == 0 ==> i == j;\nloop invariant x == 0 ==> y == 0;\nloop invariant x == 0 ==> i == j;\nloop invariant x == 0 ==> y == 0;\nloop invariant x == 0 ==> i == j;\nloop invariant x == 0 ==> y == 0;\nloop invariant x == 0 ==> i == j;\nloop invariant x == 0 ==> y == 0;\nloop invariant x == 0 ==> i == j;\nloop invariant x == 0 ==> y == 0;\nloop invariant x == 0 ==> i == j;\nloop invariant x == 0 ==> y == 0;\nloop invariant x == 0 ==> i == j;\nloop invariant x == 0 ==> y == 0;\nloop invariant x == 0 ==> i == j;\nloop invariant x == 0 ==> y == 0;\nloop invariant x == 0 ==> i == j;\nloop invariant x == 0 ==> y == 0;\nloop invariant x == 0 ==> i == j;\nloop invariant x == 0 ==> y == 0;\nloop invariant x == 0 ==> i == j;\nloop invariant x == 0 ==> y == 0;\nloop invariant x == 0 ==> i == j;\nloop invariant x == 0 ==> y == 0;\nloop invariant x == 0 ==> i == j;\nloop invariant x == 0 ==> y == 0;\nloop invariant x == 0 ==> i == j;\nloop invariant x == 0 ==> y == 0;\nloop invariant x == 0 ==> i == j;\nloop invariant x == 0 ==> y == 0;\nloop invariant x == 0 ==> i == j;\nloop invariant x == 0 ==> y == 0;\nloop invariant x == 0 ==> i == j;\nloop invariant x == 0 ==> y == 0;\nloop invariant x == 0 ==> i == j;\nloop invariant x == 0 ==> y == 0;\nloop invariant x == 0 ==> i == j;\nloop invariant x == 0 ==> y == 0;\nloop invariant x == 0 ==> i == j;\nloop invariant x == 0 ==> y == 0;\nloop invariant x == 0 ==> i == j;\nloop invariant x == 0 ==> y == 0;\nloop invariant x == 0 ==> i == j;\nloop invariant x == 0 ==> y == 0;\nloop invariant x == 0 ==> i == j;\nloop invariant x == 0 ==> y == 0;\nloop invariant x == 0 ==> i == j;\nloop invariant x == 0 ==> y == 0;\nloop invariant x == 0 ==> i == j;\nloop invariant x == 0 ==> y == 0;\nloop invariant x == 0 ==> i == j;\nloop invariant x == 0 ==> y == 0;\nloop invariant x == 0 ==> i == j;\nloop invariant x == 0 ==> y == 0;\nloop invariant x == 0 ==> i == j;\nloop invariant x == 0 ==> y == 0;\nloop invariant x == 0 ==> i == j;\nloop invariant x == 0 ==> y == 0;\nloop invariant x == 0 ==> i == j;\nloop invariant x == 0 ==> y == 0;\nloop invariant x == 0 ==> i == j;\nloop invariant x == 0 ==> y == 0;\nloop invariant x == 0 ==> i == j;\nloop invariant x == 0 ==> y == 0;\nloop invariant x == 0 ==> i == j;\nloop invariant x == 0 ==> y == 0;\nloop invariant x == 0 ==> i == j;\nloop invariant x == 0 ==> y == 0;\nloop invariant x == 0 ==> i == j;\nloop invariant x == 0 ==> y == 0;\nloop invariant x == 0 ==> i == j;\nloop invariant x == 0 ==> y == 0;\nloop invariant x == 0 ==> i == j;\nloop invariant x == 0 ==> y == 0;\nloop invariant x == 0 ==> i == j;\nloop invariant x == 0 ==> y == 0;\nloop invariant x == 0 ==> i == j;\nloop invariant x == 0 ==> y == 0;\nloop invariant x == 0 ==> i == j;\nloop invariant x == 0 ==> y == 0;\nloop invariant x == 0 ==> i == j;\nloop invariant x == 0 ==> y == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n    if (!(i >= 0 && j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    /*@\nloop invariant i1: i >= 0;\nloop invariant i2: j >= 0;\n\n\n\n\n\n\n*/\nwhile(x != 0) {\n        x--;\n        y--;\n    }\n\n    if (i == j) {\n        {;\n//@ assert(y == 0);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= i;\nloop invariant 0 <= y <= j;\nloop invariant x + y == i + j;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x + y == i + j ==> x == 0 ==> y == 0;\nloop invariant x + y == i + j ==> x == 0 ==> y == 0 ==> y == 0;\nloop invariant x + y == i + j ==> x == 0 ==> y == 0 ==> y == 0 ==> y == 0;\nloop invariant x + y == i + j ==> x == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0;\nloop invariant x + y == i + j ==> x == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0;\nloop invariant x + y == i + j ==> x == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0;\nloop invariant x + y == i + j ==> x == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0;\nloop invariant x + y == i + j ==> x == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0;\nloop invariant x + y == i + j ==> x == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0;\nloop invariant x + y == i + j ==> x == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0;\nloop invariant x + y == i + j ==> x == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0;\nloop invariant x + y == i + j ==> x == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0;\nloop invariant x + y == i + j ==> x == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0;\nloop invariant x + y == i + j ==> x == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0;\nloop invariant x + y == i + j ==> x == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0;\nloop invariant x + y == i + j ==> x == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n    if (!(i >= 0 && j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    /*@\nloop invariant i1: 0 <= x <= i;\n\n\nloop invariant i4: x >= 0;\n\n\nloop invariant i7: x + y == i + j ==> x == 0 ==> y == 0 ==> y == 0;\nloop invariant i8: x + y == i + j ==> x == 0 ==> y == 0 ==> y == 0 ==> y == 0;\nloop invariant i9: x + y == i + j ==> x == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0;\nloop invariant i10: x + y == i + j ==> x == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0;\nloop invariant i11: x + y == i + j ==> x == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0;\nloop invariant i12: x + y == i + j ==> x == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0;\nloop invariant i13: x + y == i + j ==> x == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0;\nloop invariant i14: x + y == i + j ==> x == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0;\nloop invariant i15: x + y == i + j ==> x == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0;\nloop invariant i16: x + y == i + j ==> x == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0;\nloop invariant i17: x + y == i + j ==> x == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0;\nloop invariant i18: x + y == i + j ==> x == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0;\nloop invariant i19: x + y == i + j ==> x == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0;\nloop invariant i20: x + y == i + j ==> x == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0;\nloop invariant i21: x + y == i + j ==> x == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0;\n*/\nwhile(x != 0) {\n        x--;\n        y--;\n    }\n\n    if (i == j) {\n        {;\n//@ assert(y == 0);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 22: Assignment operators not allowed in annotations.",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n    if (!(i >= 0 && j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    /*@\nloop invariant i1: 0 <= i <= j;\nloop invariant i2: 0 <= x <= i;\nloop invariant i3: 0 <= y <= j;\nloop invariant i4: x + y >= i;\nloop invariant i5: x + y <= j;\nloop invariant i6: x = i - y;\nloop invariant i7: y = j - x;\nloop invariant i8: x >= 0 ==> y >= 0;\nloop invariant i9: x = 0 ==> y = 0;\nloop invariant i10: x = 0 ==> y = j;\nloop invariant i11: x = i ==> y = 0;\nloop invariant i12: x = i ==> y = i;\nloop invariant i13: x = 0 ==> y >= 0;\nloop invariant i14: x + y == i + j;\nloop invariant i15: x >= 0;\nloop invariant i16: y >= 0;\nloop invariant i17: 0 <= x <= i;loop invariant 0 <= y <= j;loop invariant (i >= j) ==> (y == 0);\nloop invariant i18: i >= 0;\nloop invariant i19: j >= 0;\nloop invariant i20: x <= i;\nloop invariant i21: y <= j;\nloop invariant i22: x <= y;\nloop invariant i23: (x != 0) ==> (y == j);\nloop invariant i24: (x != 0) ==> (i != j);\nloop invariant i25: (x == 0) ==> (y == 0);\nloop invariant i26: (x == 0) ==> (i == 0);\nloop invariant i27: (x == 0) ==> (j == 0);\nloop invariant i28: (!(x == 0)) ==> (y == j - i);\nloop invariant i29: i >= 0 ==> j >= 0;\nloop invariant i30: x >= 0 ==> i >= 0;\nloop invariant i31: y >= 0 ==> j >= 0;\nloop invariant i32: x >= 0 ==> x == 0;\nloop invariant i33: y >= 0 ==> y == 0;\nloop invariant i34: i >= 0 ==> i == j;\nloop invariant i35: j >= 0 ==> j == i;\nloop invariant i36: x >= 0 ==> x == j;\nloop invariant i37: y >= 0 ==> y == i;\nloop invariant i38: x >= 0 ==> x == i;\nloop invariant i39: y >= 0 ==> y == j;\nloop invariant i40: x >= 0 ==> i >= j;\nloop invariant i41: y >= 0 ==> j >= i;\nloop invariant i42: x >= 0 ==> i == j;\nloop invariant i43: y >= 0 ==> j == i;\nloop invariant i44: x >= 0 ==> i == x;\nloop invariant i45: y >= 0 ==> j == y;\nloop invariant i46: x >= 0 ==> i == y;\nloop invariant i47: y >= 0 ==> j == x;\nloop invariant i48: x >= (i - (j - y));\nloop invariant i49: y >= (j - (i - x));\nloop invariant i50: (i == j) ==> (y == 0);\nloop invariant i51: i >= 0 && i <= 100000;\nloop invariant i52: j >= 0 && j <= 100000;\nloop invariant i53: x >= 0 && x <= i;\nloop invariant i54: y >= 0 && y <= j;\nloop invariant i55: x - y == i - j;\nloop invariant i56: x * y == i * j;\nloop invariant i57: x / y == i / j;\nloop invariant i58: x % y == i % j;\nloop invariant i59: x ^ y == i ^ j;\nloop invariant i60: x & y == i & j;\nloop invariant i61: x | y == i | j;\nloop invariant i62: x << y == i << j;\nloop invariant i63: x >> y == i >> j;\nloop invariant i64: x >= y;\nloop invariant i65: x == y ==> x == 0;\nloop invariant i66: x != y ==> x != 0;\nloop invariant i67: x >= 1 ==> x <= i;\nloop invariant i68: y >= 1 ==> y <= j;\nloop invariant i69: x >= 2 ==> x <= i - 1;\nloop invariant i70: y >= 2 ==> y <= j - 1;\nloop invariant i71: i - x = j - y;\nloop invariant i72: (x == i) ==> (y == j);\nloop invariant i73: 0 <= i <= INT_MAX;\nloop invariant i74: 0 <= j <= INT_MAX;\nloop invariant i75: y <= i;\nloop invariant i76: i >= j;\nloop invariant i77: x == i;\nloop invariant i78: y == j;\nloop invariant i79: i >= x;\nloop invariant i80: x >= i;\nloop invariant i81: y >= j;\nloop invariant i82: x > 0 ==> y > 0;\nloop invariant i83: x == 0 ==> y == 0;\nloop invariant i84: x == 0 ==> i == j;\nloop invariant i85: x + y == i + j ==> x == 0 ==> y == 0;\nloop invariant i86: x + y == i + j ==> x == 0 ==> y == 0 ==> y == 0;\nloop invariant i87: x + y == i + j ==> x == 0 ==> y == 0 ==> y == 0 ==> y == 0;\nloop invariant i88: x + y == i + j ==> x == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0;\nloop invariant i89: x + y == i + j ==> x == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0;\nloop invariant i90: x + y == i + j ==> x == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0;\nloop invariant i91: x + y == i + j ==> x == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0;\nloop invariant i92: x + y == i + j ==> x == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0;\nloop invariant i93: x + y == i + j ==> x == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0;\nloop invariant i94: x + y == i + j ==> x == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0;\nloop invariant i95: x + y == i + j ==> x == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0;\nloop invariant i96: x + y == i + j ==> x == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0;\nloop invariant i97: x + y == i + j ==> x == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0;\nloop invariant i98: x + y == i + j ==> x == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0;\nloop invariant i99: x + y == i + j ==> x == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0;\nloop invariant i100: x + y == i + j ==> x == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0;\n*/\nwhile(x != 0) {\n        x--;\n        y--;\n    }\n\n    if (i == j) {\n        {;\n//@ assert(y == 0);\n}\n\n    }\n    return 0;\n}",
        "combined_annotation_num_solver_calls": 41,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n    if (!(i >= 0 && j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    /*@\n\nloop invariant i2: 0 <= x <= i;\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i15: x >= 0;\n\nloop invariant i17: 0 <= x <= i;loop invariant 0 <= y <= j;loop invariant (i >= j) ==> (y == 0);\nloop invariant i18: i >= 0;\nloop invariant i19: j >= 0;\nloop invariant i20: x <= i;\nloop invariant i21: y <= j;\n\n\nloop invariant i24: (x != 0) ==> (i != j);\n\n\n\n\nloop invariant i29: i >= 0 ==> j >= 0;\nloop invariant i30: x >= 0 ==> i >= 0;\nloop invariant i31: y >= 0 ==> j >= 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i48: x >= (i - (j - y));\nloop invariant i49: y >= (j - (i - x));\nloop invariant i50: (i == j) ==> (y == 0);\n\n\nloop invariant i53: x >= 0 && x <= i;\nloop invariant i54: y >= 0 && y <= j;\nloop invariant i55: x - y == i - j;\n\nloop invariant i57: x / y == i / j;\n\n\n\n\n\n\n\nloop invariant i65: x == y ==> x == 0;\n\nloop invariant i67: x >= 1 ==> x <= i;\nloop invariant i68: y >= 1 ==> y <= j;\n\n\n\nloop invariant i72: (x == i) ==> (y == j);\nloop invariant i73: 0 <= i <= INT_MAX;\nloop invariant i74: 0 <= j <= INT_MAX;\n\n\n\n\nloop invariant i79: i >= x;\n\n\n\n\n\n\nloop invariant i86: x + y == i + j ==> x == 0 ==> y == 0 ==> y == 0;\nloop invariant i87: x + y == i + j ==> x == 0 ==> y == 0 ==> y == 0 ==> y == 0;\nloop invariant i88: x + y == i + j ==> x == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0;\nloop invariant i89: x + y == i + j ==> x == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0;\nloop invariant i90: x + y == i + j ==> x == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0;\nloop invariant i91: x + y == i + j ==> x == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0;\nloop invariant i92: x + y == i + j ==> x == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0;\nloop invariant i93: x + y == i + j ==> x == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0;\nloop invariant i94: x + y == i + j ==> x == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0;\nloop invariant i95: x + y == i + j ==> x == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0;\nloop invariant i96: x + y == i + j ==> x == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0;\nloop invariant i97: x + y == i + j ==> x == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0;\nloop invariant i98: x + y == i + j ==> x == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0;\nloop invariant i99: x + y == i + j ==> x == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0;\nloop invariant i100: x + y == i + j ==> x == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0;\n*/\nwhile(x != 0) {\n        x--;\n        y--;\n    }\n\n    if (i == j) {\n        {;\n//@ assert(y == 0);\n}\n\n    }\n    return 0;\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/split.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c"
        ],
        "skipped": [],
        "total": 53,
        "success_count": 44,
        "failure_count": 9,
        "success_rate": 0.8301886792452831
    }
}