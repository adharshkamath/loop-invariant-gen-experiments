{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nvoid main()\n{\n  int x, N;\n  x = 0;\n  N = unknown_int();\n  if (N < 0)\n    \nreturn;\n\n  while(x < N)\n  {\n    x = x + 1;\n  }\n  {;\n//@ assert(x == N);\n}\n    \nreturn;\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= x <= N;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant x <= N;\nloop invariant x >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant x + 1 == N ==> x == N - 1;\nloop invariant x < N ==> x >= 0;\nloop invariant x + 1 == N ==> x < N;\nloop invariant (x + 1) == N ==> x == N - 1;\nloop invariant (x + 1) == N ==> (x + 1) == N;\nloop invariant (x + 1) == N ==> (x + 1) == N - 1;\nloop invariant (x + 1) == N ==> (x + 1) == N - 2;\nloop invariant (x + 1) == N ==> (x + 1) == N - 3;\nloop invariant (x + 1) == N ==> (x + 1) == N - 4;\nloop invariant (x + 1) == N ==> (x + 1) == N - 5;\nloop invariant (x + 1) == N ==> (x + 1) == N - 6;\nloop invariant (x + 1) == N ==> (x + 1) == N - 7;\nloop invariant (x + 1) == N ==> (x + 1) == N - 8;\nloop invariant (x + 1) == N ==> (x + 1) == N - 9;\nloop invariant (x + 1) == N ==> (x + 1) == N - 10;\nloop invariant (x + 1) == N ==> (x + 1) == N - 11;\nloop invariant (x + 1) == N ==> (x + 1) == N - 12;\nloop invariant (x + 1) == N ==> (x + 1) == N - 13;\nloop invariant (x + 1) == N ==> (x + 1) == N - 14;\nloop invariant (x + 1) == N ==> (x + 1) == N - 15;\nloop invariant (x + 1) == N ==> (x + 1) == N - 16;\nloop invariant (x + 1) == N ==> (x + 1) == N - 17;\nloop invariant (x + 1) == N ==> (x + 1) == N - 18;\nloop invariant (x + 1) == N ==> (x + 1) == N - 19;\nloop invariant (x + 1) == N ==> (x + 1) == N - 20;\nloop invariant (x + 1) == N ==> (x + 1) == N - 21;\nloop invariant (x + 1) == N ==> (x + 1) == N - 22;\nloop invariant (x + 1) == N ==> (x + 1) == N - 23;\nloop invariant (x + 1) == N ==> (x + 1) == N - 24;\nloop invariant (x + 1) == N ==> (x + 1) == N - 25;\nloop invariant (x + 1) == N ==> (x + 1) == N - 26;\nloop invariant (x + 1) == N ==> (x + 1) == N - 27;\nloop invariant (x + 1) == N ==> (x + 1) == N - 28;\nloop invariant (x + 1) == N ==> (x + 1) == N - 29;\nloop invariant (x + 1) == N ==> (x + 1) == N - 30;\nloop invariant (x + 1) == N ==> (x + 1) == N - 31;\nloop invariant (x + 1) == N ==> (x + 1) == N - 32;\nloop invariant (x + 1) == N ==> (x + 1) == N - 33;\nloop invariant (x + 1) == N ==> (x + 1) == N - 34;\nloop invariant (x + 1) == N ==> (x + 1) == N - 35;\nloop invariant (x + 1) == N ==> (x + 1) == N - 36;\nloop invariant (x + 1) == N ==> (x + 1) == N - 37;\nloop invariant (x + 1) == N ==> (x + 1) == N - 38;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= N;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant (x < N) ==> (N > 0);\nloop invariant (x < N) ==> (x >= 0);\nloop invariant (x < N) ==> (x < N);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant x <= N;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant x <= N;\nloop invariant x >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant x >= 0;\nloop invariant x <= N;\nloop invariant x == x;\nloop invariant N >= 0;\nloop invariant N <= 0;\nloop invariant N >= 0;\nloop invariant x >= 0;\nloop invariant x <= N;\nloop invariant x == x;\nloop invariant N >= 0;\nloop invariant N <= 0;\nloop invariant N >= 0;\nloop invariant x >= 0;\nloop invariant x <= N;\nloop invariant x == x;\nloop invariant N >= 0;\nloop invariant N <= 0;\nloop invariant N >= 0;\nloop invariant x >= 0;\nloop invariant x <= N;\nloop invariant x == x;\nloop invariant N >= 0;\nloop invariant N <= 0;\nloop invariant N >= 0;\nloop invariant x >= 0;\nloop invariant x <= N;\nloop invariant x == x;\nloop invariant N >= 0;\nloop invariant N <= 0;\nloop invariant N >= 0;\nloop invariant x >= 0;\nloop invariant x <= N;\nloop invariant x == x;\nloop invariant N >= 0;\nloop invariant N <= 0;\nloop invariant N >= 0;\nloop invariant x >= 0;\nloop invariant x <= N;\nloop invariant x == x;\nloop invariant N >= 0;\nloop invariant N <= 0;\nloop invariant N >= 0;\nloop invariant x >= 0;\nloop invariant x <= N;\nloop invariant x == x;\nloop invariant N >= 0;\nloop invariant N <= 0;\nloop invariant N >= 0;\nloop invariant x >= 0;\nloop invariant x <= N;\nloop invariant x == x;\nloop invariant N >= 0;\nloop invariant N <= 0;\nloop invariant N >= 0;\nloop invariant x >= 0;\nloop invariant x <= N;\nloop invariant x == x;\nloop invariant N >= 0;\nloop invariant N <= 0;\nloop invariant N >= 0;\nloop invariant x >= 0;\nloop invariant x <= N;\nloop invariant x == x;\nloop invariant N >= 0;\nloop invariant N <= 0;\nloop invariant N >= 0;\nloop invariant x >= 0;\nloop invariant x <= N;\nloop invariant x == x;\nloop invariant N >= 0;\nloop invariant N <= 0;\nloop invariant N >= 0;\nloop invariant x >= 0;\nloop invariant x <= N;\nloop invariant x == x;\nloop invariant N >= 0;\nloop invariant N <= 0;\nloop invariant N >= 0;\nloop invariant x >= 0;\nloop invariant x <= N;\nloop invariant x == x;\nloop invariant N >= 0;\nloop invariant N <= 0;\nloop invariant N >= 0;\nloop invariant x >= 0;\nloop invariant x <= N;\nloop invariant x == x;\nloop invariant N >= 0;\nloop invariant N <= 0;\nloop invariant N >= 0;\nloop invariant x >= 0;\nloop invariant x <= N;\nloop invariant x == x;\nloop invariant N >= 0;\nloop invariant N <= 0;\nloop invariant N >= 0;\nloop invariant x >= 0;\nloop invariant x <= N;\nloop invariant x == x;\nloop invariant N >= 0;\nloop invariant N <= 0;\nloop invariant N >= 0;\nloop invariant x >= 0;\nloop invariant x <= N;\nloop invariant x == x;\nloop invariant N >= 0;\nloop invariant N <= 0;\nloop invariant N >= 0;\nloop invariant x >= 0;\nloop invariant x <= N;\nloop invariant x == x;\nloop invariant N >= 0;\nloop invariant N <= 0;\nloop invariant N >= 0;\nloop invariant x >= 0;\nloop invariant x <= N;\nloop invariant x == x;\nloop invariant N >= 0;\nloop invariant N <= 0;\nloop invariant N >= 0;\nloop invariant x >= 0;\nloop invariant x <= N;\nloop invariant x == x;\nloop invariant N >= 0;\nloop invariant N <= 0;\nloop invariant N >= 0;\nloop invariant x >= 0;\nloop invariant x <= N;\nloop invariant x == x;\nloop invariant N >= 0;\nloop invariant N <= 0;\nloop invariant N >= 0;\nloop invariant x >= 0;\nloop invariant x <= N;\nloop invariant x == x;\nloop invariant N >= 0;\nloop invariant N <= 0;\nloop invariant N >= 0;\nloop invariant x >= 0;\nloop invariant x <= N;\nloop invariant x == x;\nloop invariant N >= 0;\nloop invariant N <= 0;\nloop invariant N >= 0;\nloop invariant x >= 0;\nloop invariant x <= N;\nloop invariant x == x;\nloop invariant N >= 0;\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant x >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant x <= N;\nloop invariant x >= 0;\nloop invariant x >= 0;\nloop invariant x == N;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= N;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant x <= N;\nloop invariant x >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= N;\n*/\n```",
            "```\n/*@\nloop invariant x == N;\nloop invariant 0 <= x <= N;\nloop invariant 0 <= N <= INT_MAX;\nloop invariant N >= 0;\nloop invariant N == unknown_int();\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= N;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nvoid main()\n{\n  int x, N;\n  x = 0;\n  N = unknown_int();\n  if (N < 0)\n    \nreturn;\n\n  /*@\nloop invariant i1: 0 <= x <= N;\n*/\nwhile(x < N)\n  {\n    x = x + 1;\n  }\n  {;\n//@ assert(x == N);\n}\n    \nreturn;\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant x <= N;\nloop invariant x >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nvoid main()\n{\n  int x, N;\n  x = 0;\n  N = unknown_int();\n  if (N < 0)\n    \nreturn;\n\n  /*@\nloop invariant i1: 0 <= x <= N;\nloop invariant i2: x <= N;\nloop invariant i3: x >= 0;\n*/\nwhile(x < N)\n  {\n    x = x + 1;\n  }\n  {;\n//@ assert(x == N);\n}\n    \nreturn;\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 38,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant x + 1 == N ==> x == N - 1;\nloop invariant x < N ==> x >= 0;\nloop invariant x + 1 == N ==> x < N;\nloop invariant (x + 1) == N ==> x == N - 1;\nloop invariant (x + 1) == N ==> (x + 1) == N;\nloop invariant (x + 1) == N ==> (x + 1) == N - 1;\nloop invariant (x + 1) == N ==> (x + 1) == N - 2;\nloop invariant (x + 1) == N ==> (x + 1) == N - 3;\nloop invariant (x + 1) == N ==> (x + 1) == N - 4;\nloop invariant (x + 1) == N ==> (x + 1) == N - 5;\nloop invariant (x + 1) == N ==> (x + 1) == N - 6;\nloop invariant (x + 1) == N ==> (x + 1) == N - 7;\nloop invariant (x + 1) == N ==> (x + 1) == N - 8;\nloop invariant (x + 1) == N ==> (x + 1) == N - 9;\nloop invariant (x + 1) == N ==> (x + 1) == N - 10;\nloop invariant (x + 1) == N ==> (x + 1) == N - 11;\nloop invariant (x + 1) == N ==> (x + 1) == N - 12;\nloop invariant (x + 1) == N ==> (x + 1) == N - 13;\nloop invariant (x + 1) == N ==> (x + 1) == N - 14;\nloop invariant (x + 1) == N ==> (x + 1) == N - 15;\nloop invariant (x + 1) == N ==> (x + 1) == N - 16;\nloop invariant (x + 1) == N ==> (x + 1) == N - 17;\nloop invariant (x + 1) == N ==> (x + 1) == N - 18;\nloop invariant (x + 1) == N ==> (x + 1) == N - 19;\nloop invariant (x + 1) == N ==> (x + 1) == N - 20;\nloop invariant (x + 1) == N ==> (x + 1) == N - 21;\nloop invariant (x + 1) == N ==> (x + 1) == N - 22;\nloop invariant (x + 1) == N ==> (x + 1) == N - 23;\nloop invariant (x + 1) == N ==> (x + 1) == N - 24;\nloop invariant (x + 1) == N ==> (x + 1) == N - 25;\nloop invariant (x + 1) == N ==> (x + 1) == N - 26;\nloop invariant (x + 1) == N ==> (x + 1) == N - 27;\nloop invariant (x + 1) == N ==> (x + 1) == N - 28;\nloop invariant (x + 1) == N ==> (x + 1) == N - 29;\nloop invariant (x + 1) == N ==> (x + 1) == N - 30;\nloop invariant (x + 1) == N ==> (x + 1) == N - 31;\nloop invariant (x + 1) == N ==> (x + 1) == N - 32;\nloop invariant (x + 1) == N ==> (x + 1) == N - 33;\nloop invariant (x + 1) == N ==> (x + 1) == N - 34;\nloop invariant (x + 1) == N ==> (x + 1) == N - 35;\nloop invariant (x + 1) == N ==> (x + 1) == N - 36;\nloop invariant (x + 1) == N ==> (x + 1) == N - 37;\nloop invariant (x + 1) == N ==> (x + 1) == N - 38;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nvoid main()\n{\n  int x, N;\n  x = 0;\n  N = unknown_int();\n  if (N < 0)\n    \nreturn;\n\n  /*@\nloop invariant i1: 0 <= x <= N;\nloop invariant i2: x + 1 == N ==> x == N - 1;\nloop invariant i3: x < N ==> x >= 0;\nloop invariant i4: x + 1 == N ==> x < N;\nloop invariant i5: (x + 1) == N ==> x == N - 1;\nloop invariant i6: (x + 1) == N ==> (x + 1) == N;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile(x < N)\n  {\n    x = x + 1;\n  }\n  {;\n//@ assert(x == N);\n}\n    \nreturn;\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= N;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nvoid main()\n{\n  int x, N;\n  x = 0;\n  N = unknown_int();\n  if (N < 0)\n    \nreturn;\n\n  /*@\nloop invariant i1: 0 <= x <= N;\n*/\nwhile(x < N)\n  {\n    x = x + 1;\n  }\n  {;\n//@ assert(x == N);\n}\n    \nreturn;\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant (x < N) ==> (N > 0);\nloop invariant (x < N) ==> (x >= 0);\nloop invariant (x < N) ==> (x < N);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nvoid main()\n{\n  int x, N;\n  x = 0;\n  N = unknown_int();\n  if (N < 0)\n    \nreturn;\n\n  /*@\nloop invariant i1: 0 <= x <= N;\nloop invariant i2: (x < N) ==> (N > 0);\nloop invariant i3: (x < N) ==> (x >= 0);\nloop invariant i4: (x < N) ==> (x < N);\n*/\nwhile(x < N)\n  {\n    x = x + 1;\n  }\n  {;\n//@ assert(x == N);\n}\n    \nreturn;\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant x <= N;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nvoid main()\n{\n  int x, N;\n  x = 0;\n  N = unknown_int();\n  if (N < 0)\n    \nreturn;\n\n  /*@\nloop invariant i1: 0 <= x <= N;\nloop invariant i2: x <= N;\n*/\nwhile(x < N)\n  {\n    x = x + 1;\n  }\n  {;\n//@ assert(x == N);\n}\n    \nreturn;\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant x <= N;\nloop invariant x >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nvoid main()\n{\n  int x, N;\n  x = 0;\n  N = unknown_int();\n  if (N < 0)\n    \nreturn;\n\n  /*@\nloop invariant i1: 0 <= x <= N;\nloop invariant i2: x <= N;\nloop invariant i3: x >= 0;\n*/\nwhile(x < N)\n  {\n    x = x + 1;\n  }\n  {;\n//@ assert(x == N);\n}\n    \nreturn;\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant x >= 0;\nloop invariant x <= N;\nloop invariant x == x;\nloop invariant N >= 0;\nloop invariant N <= 0;\nloop invariant N >= 0;\nloop invariant x >= 0;\nloop invariant x <= N;\nloop invariant x == x;\nloop invariant N >= 0;\nloop invariant N <= 0;\nloop invariant N >= 0;\nloop invariant x >= 0;\nloop invariant x <= N;\nloop invariant x == x;\nloop invariant N >= 0;\nloop invariant N <= 0;\nloop invariant N >= 0;\nloop invariant x >= 0;\nloop invariant x <= N;\nloop invariant x == x;\nloop invariant N >= 0;\nloop invariant N <= 0;\nloop invariant N >= 0;\nloop invariant x >= 0;\nloop invariant x <= N;\nloop invariant x == x;\nloop invariant N >= 0;\nloop invariant N <= 0;\nloop invariant N >= 0;\nloop invariant x >= 0;\nloop invariant x <= N;\nloop invariant x == x;\nloop invariant N >= 0;\nloop invariant N <= 0;\nloop invariant N >= 0;\nloop invariant x >= 0;\nloop invariant x <= N;\nloop invariant x == x;\nloop invariant N >= 0;\nloop invariant N <= 0;\nloop invariant N >= 0;\nloop invariant x >= 0;\nloop invariant x <= N;\nloop invariant x == x;\nloop invariant N >= 0;\nloop invariant N <= 0;\nloop invariant N >= 0;\nloop invariant x >= 0;\nloop invariant x <= N;\nloop invariant x == x;\nloop invariant N >= 0;\nloop invariant N <= 0;\nloop invariant N >= 0;\nloop invariant x >= 0;\nloop invariant x <= N;\nloop invariant x == x;\nloop invariant N >= 0;\nloop invariant N <= 0;\nloop invariant N >= 0;\nloop invariant x >= 0;\nloop invariant x <= N;\nloop invariant x == x;\nloop invariant N >= 0;\nloop invariant N <= 0;\nloop invariant N >= 0;\nloop invariant x >= 0;\nloop invariant x <= N;\nloop invariant x == x;\nloop invariant N >= 0;\nloop invariant N <= 0;\nloop invariant N >= 0;\nloop invariant x >= 0;\nloop invariant x <= N;\nloop invariant x == x;\nloop invariant N >= 0;\nloop invariant N <= 0;\nloop invariant N >= 0;\nloop invariant x >= 0;\nloop invariant x <= N;\nloop invariant x == x;\nloop invariant N >= 0;\nloop invariant N <= 0;\nloop invariant N >= 0;\nloop invariant x >= 0;\nloop invariant x <= N;\nloop invariant x == x;\nloop invariant N >= 0;\nloop invariant N <= 0;\nloop invariant N >= 0;\nloop invariant x >= 0;\nloop invariant x <= N;\nloop invariant x == x;\nloop invariant N >= 0;\nloop invariant N <= 0;\nloop invariant N >= 0;\nloop invariant x >= 0;\nloop invariant x <= N;\nloop invariant x == x;\nloop invariant N >= 0;\nloop invariant N <= 0;\nloop invariant N >= 0;\nloop invariant x >= 0;\nloop invariant x <= N;\nloop invariant x == x;\nloop invariant N >= 0;\nloop invariant N <= 0;\nloop invariant N >= 0;\nloop invariant x >= 0;\nloop invariant x <= N;\nloop invariant x == x;\nloop invariant N >= 0;\nloop invariant N <= 0;\nloop invariant N >= 0;\nloop invariant x >= 0;\nloop invariant x <= N;\nloop invariant x == x;\nloop invariant N >= 0;\nloop invariant N <= 0;\nloop invariant N >= 0;\nloop invariant x >= 0;\nloop invariant x <= N;\nloop invariant x == x;\nloop invariant N >= 0;\nloop invariant N <= 0;\nloop invariant N >= 0;\nloop invariant x >= 0;\nloop invariant x <= N;\nloop invariant x == x;\nloop invariant N >= 0;\nloop invariant N <= 0;\nloop invariant N >= 0;\nloop invariant x >= 0;\nloop invariant x <= N;\nloop invariant x == x;\nloop invariant N >= 0;\nloop invariant N <= 0;\nloop invariant N >= 0;\nloop invariant x >= 0;\nloop invariant x <= N;\nloop invariant x == x;\nloop invariant N >= 0;\nloop invariant N <= 0;\nloop invariant N >= 0;\nloop invariant x >= 0;\nloop invariant x <= N;\nloop invariant x == x;\nloop invariant N >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nvoid main()\n{\n  int x, N;\n  x = 0;\n  N = unknown_int();\n  if (N < 0)\n    \nreturn;\n\n  /*@\nloop invariant i1: 0 <= x <= N;\nloop invariant i2: x >= 0;\nloop invariant i3: x <= N;\nloop invariant i4: x == x;\nloop invariant i5: N >= 0;\n\n*/\nwhile(x < N)\n  {\n    x = x + 1;\n  }\n  {;\n//@ assert(x == N);\n}\n    \nreturn;\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nvoid main()\n{\n  int x, N;\n  x = 0;\n  N = unknown_int();\n  if (N < 0)\n    \nreturn;\n\n  /*@\n\n*/\nwhile(x < N)\n  {\n    x = x + 1;\n  }\n  {;\n//@ assert(x == N);\n}\n    \nreturn;\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant x >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nvoid main()\n{\n  int x, N;\n  x = 0;\n  N = unknown_int();\n  if (N < 0)\n    \nreturn;\n\n  /*@\nloop invariant i1: 0 <= x <= N;\nloop invariant i2: x >= 0;\n*/\nwhile(x < N)\n  {\n    x = x + 1;\n  }\n  {;\n//@ assert(x == N);\n}\n    \nreturn;\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant x <= N;\nloop invariant x >= 0;\nloop invariant x >= 0;\nloop invariant x == N;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nvoid main()\n{\n  int x, N;\n  x = 0;\n  N = unknown_int();\n  if (N < 0)\n    \nreturn;\n\n  /*@\nloop invariant i1: 0 <= x <= N;\nloop invariant i2: x <= N;\nloop invariant i3: x >= 0;\n\n*/\nwhile(x < N)\n  {\n    x = x + 1;\n  }\n  {;\n//@ assert(x == N);\n}\n    \nreturn;\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= N;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nvoid main()\n{\n  int x, N;\n  x = 0;\n  N = unknown_int();\n  if (N < 0)\n    \nreturn;\n\n  /*@\nloop invariant i1: 0 <= x <= N;\n*/\nwhile(x < N)\n  {\n    x = x + 1;\n  }\n  {;\n//@ assert(x == N);\n}\n    \nreturn;\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant x <= N;\nloop invariant x >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nvoid main()\n{\n  int x, N;\n  x = 0;\n  N = unknown_int();\n  if (N < 0)\n    \nreturn;\n\n  /*@\nloop invariant i1: 0 <= x <= N;\nloop invariant i2: x <= N;\nloop invariant i3: x >= 0;\n*/\nwhile(x < N)\n  {\n    x = x + 1;\n  }\n  {;\n//@ assert(x == N);\n}\n    \nreturn;\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= N;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nvoid main()\n{\n  int x, N;\n  x = 0;\n  N = unknown_int();\n  if (N < 0)\n    \nreturn;\n\n  /*@\nloop invariant i1: 0 <= x <= N;\n*/\nwhile(x < N)\n  {\n    x = x + 1;\n  }\n  {;\n//@ assert(x == N);\n}\n    \nreturn;\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant x == N;\nloop invariant 0 <= x <= N;\nloop invariant 0 <= N <= INT_MAX;\nloop invariant N >= 0;\nloop invariant N == unknown_int();\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nvoid main()\n{\n  int x, N;\n  x = 0;\n  N = unknown_int();\n  if (N < 0)\n    \nreturn;\n\n  /*@\n\nloop invariant i2: 0 <= x <= N;\nloop invariant i3: 0 <= N <= INT_MAX;\nloop invariant i4: N >= 0;\n\n*/\nwhile(x < N)\n  {\n    x = x + 1;\n  }\n  {;\n//@ assert(x == N);\n}\n    \nreturn;\n\n}",
                "checker_output_after_prune": true
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 73: unexpected token ')'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nvoid main()\n{\n  int x, N;\n  x = 0;\n  N = unknown_int();\n  if (N < 0)\n    \nreturn;\n\n  /*@\nloop invariant i1: 0 <= x <= N;\nloop invariant i2: x <= N;\nloop invariant i3: x >= 0;\nloop invariant i4: x + 1 == N ==> x == N - 1;\nloop invariant i5: x < N ==> x >= 0;\nloop invariant i6: x + 1 == N ==> x < N;\nloop invariant i7: (x + 1) == N ==> x == N - 1;\nloop invariant i8: (x + 1) == N ==> (x + 1) == N;\nloop invariant i9: (x + 1) == N ==> (x + 1) == N - 1;\nloop invariant i10: (x + 1) == N ==> (x + 1) == N - 2;\nloop invariant i11: (x + 1) == N ==> (x + 1) == N - 3;\nloop invariant i12: (x + 1) == N ==> (x + 1) == N - 4;\nloop invariant i13: (x + 1) == N ==> (x + 1) == N - 5;\nloop invariant i14: (x + 1) == N ==> (x + 1) == N - 6;\nloop invariant i15: (x + 1) == N ==> (x + 1) == N - 7;\nloop invariant i16: (x + 1) == N ==> (x + 1) == N - 8;\nloop invariant i17: (x + 1) == N ==> (x + 1) == N - 9;\nloop invariant i18: (x + 1) == N ==> (x + 1) == N - 10;\nloop invariant i19: (x + 1) == N ==> (x + 1) == N - 11;\nloop invariant i20: (x + 1) == N ==> (x + 1) == N - 12;\nloop invariant i21: (x + 1) == N ==> (x + 1) == N - 13;\nloop invariant i22: (x + 1) == N ==> (x + 1) == N - 14;\nloop invariant i23: (x + 1) == N ==> (x + 1) == N - 15;\nloop invariant i24: (x + 1) == N ==> (x + 1) == N - 16;\nloop invariant i25: (x + 1) == N ==> (x + 1) == N - 17;\nloop invariant i26: (x + 1) == N ==> (x + 1) == N - 18;\nloop invariant i27: (x + 1) == N ==> (x + 1) == N - 19;\nloop invariant i28: (x + 1) == N ==> (x + 1) == N - 20;\nloop invariant i29: (x + 1) == N ==> (x + 1) == N - 21;\nloop invariant i30: (x + 1) == N ==> (x + 1) == N - 22;\nloop invariant i31: (x + 1) == N ==> (x + 1) == N - 23;\nloop invariant i32: (x + 1) == N ==> (x + 1) == N - 24;\nloop invariant i33: (x + 1) == N ==> (x + 1) == N - 25;\nloop invariant i34: (x + 1) == N ==> (x + 1) == N - 26;\nloop invariant i35: (x + 1) == N ==> (x + 1) == N - 27;\nloop invariant i36: (x + 1) == N ==> (x + 1) == N - 28;\nloop invariant i37: (x + 1) == N ==> (x + 1) == N - 29;\nloop invariant i38: (x + 1) == N ==> (x + 1) == N - 30;\nloop invariant i39: (x + 1) == N ==> (x + 1) == N - 31;\nloop invariant i40: (x + 1) == N ==> (x + 1) == N - 32;\nloop invariant i41: (x + 1) == N ==> (x + 1) == N - 33;\nloop invariant i42: (x + 1) == N ==> (x + 1) == N - 34;\nloop invariant i43: (x + 1) == N ==> (x + 1) == N - 35;\nloop invariant i44: (x + 1) == N ==> (x + 1) == N - 36;\nloop invariant i45: (x + 1) == N ==> (x + 1) == N - 37;\nloop invariant i46: (x + 1) == N ==> (x + 1) == N - 38;\nloop invariant i47: (x < N) ==> (N > 0);\nloop invariant i48: (x < N) ==> (x >= 0);\nloop invariant i49: (x < N) ==> (x < N);\nloop invariant i50: x == x;\nloop invariant i51: N >= 0;\nloop invariant i52: N <= 0;\nloop invariant i53: x == N;\nloop invariant i54: 0 <= N <= INT_MAX;\nloop invariant i55: N == unknown_int();\n*/\nwhile(x < N)\n  {\n    x = x + 1;\n  }\n  {;\n//@ assert(x == N);\n}\n    \nreturn;\n\n}",
        "combined_annotation_num_solver_calls": 40,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nvoid main()\n{\n  int x, N;\n  x = 0;\n  N = unknown_int();\n  if (N < 0)\n    \nreturn;\n\n  /*@\nloop invariant i1: 0 <= x <= N;\nloop invariant i2: x <= N;\nloop invariant i3: x >= 0;\nloop invariant i4: x + 1 == N ==> x == N - 1;\nloop invariant i5: x < N ==> x >= 0;\nloop invariant i6: x + 1 == N ==> x < N;\nloop invariant i7: (x + 1) == N ==> x == N - 1;\nloop invariant i8: (x + 1) == N ==> (x + 1) == N;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i47: (x < N) ==> (N > 0);\nloop invariant i48: (x < N) ==> (x >= 0);\nloop invariant i49: (x < N) ==> (x < N);\nloop invariant i50: x == x;\nloop invariant i51: N >= 0;\n\n\nloop invariant i54: 0 <= N <= INT_MAX;\n\n*/\nwhile(x < N)\n  {\n    x = x + 1;\n  }\n  {;\n//@ assert(x == N);\n}\n    \nreturn;\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/split.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c"
        ],
        "skipped": [],
        "total": 85,
        "success_count": 74,
        "failure_count": 11,
        "success_rate": 0.8705882352941177
    }
}