{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  unsigned int x1=unknown_uint(), x2=unknown_uint(), x3=unknown_uint();\n  unsigned int d1=1, d2=1, d3=1;\n  _Bool c1=unknown_bool(), c2=unknown_bool();\n  \n  while(x1>0 && x2>0 && x3>0)\n  {\n    if (c1) x1=x1-d1;\n    else if (c2) x2=x2-d2;\n    else x3=x3-d3;\n    c1=unknown_bool();\n    c2=unknown_bool();\n  }\n\n  {;\n//@ assert(x1==0 || x2==0 || x3==0);\n}\n\n  return 0;\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x1 <= x1;\nloop invariant 0 <= x2 <= x2;\nloop invariant 0 <= x3 <= x3;\nloop invariant 0 <= d1 <= d1;\nloop invariant 0 <= d2 <= d2;\nloop invariant 0 <= d3 <= d3;\nloop invariant c1 = c1;\nloop invariant c2 = c2;\nloop invariant x1 > 0;\nloop invariant x2 > 0;\nloop invariant x3 > 0;\nloop invariant x1 >= x1;\nloop invariant x2 >= x2;\nloop invariant x3 >= x3;\nloop invariant d1 >= 1;\nloop invariant d2 >= 1;\nloop invariant d3 >= 1;\nloop invariant c1 ==> c1;\nloop invariant c2 ==> c2;\nloop invariant c1 == unknown_bool();\nloop invariant c2 == unknown_bool();\nloop invariant x1 == x1;\nloop invariant x2 == x2;\nloop invariant x3 == x3;\nloop invariant d1 == 1;\nloop invariant d2 == 1;\nloop invariant d3 == 1;\nloop invariant c1 == unknown_bool();\nloop invariant c2 == unknown_bool();\nloop invariant x1 >= x1;\nloop invariant x2 >= x2;\nloop invariant x3 >= x3;\nloop invariant d1 >= 1;\nloop invariant d2 >= 1;\nloop invariant d3 >= 1;\nloop invariant c1 ==> c1;\nloop invariant c2 ==> c2;\nloop invariant c1 == unknown_bool();\nloop invariant c2 == unknown_bool();\nloop invariant x1 >= x1;\nloop invariant x2 >= x2;\nloop invariant x3 >= x3;\nloop invariant d1 >= 1;\nloop invariant d2 >= 1;\nloop invariant d3 >= 1;\nloop invariant c1 ==> c1;\nloop invariant c2 ==> c2;\nloop invariant c1 == unknown_bool();\nloop invariant c2 == unknown_bool();\nloop invariant x1 >= x1;\nloop invariant x2 >= x2;\nloop invariant x3 >= x3;\nloop invariant d1 >= 1;\nloop invariant d2 >= 1;\nloop invariant d3 >= 1;\nloop invariant c1 ==> c1;\nloop invariant c2 ==> c2;\nloop invariant c1 == unknown_bool();\nloop invariant c2 == unknown_bool();\nloop invariant x1 >= x1;\nloop invariant x2 >= x2;\nloop invariant x3 >= x3;\nloop invariant d1 >= 1;\nloop invariant d2 >= 1;\nloop invariant d3 >= 1;\nloop invariant c1 ==> c1;\nloop invariant c2 ==> c2;\nloop invariant c1 == unknown_bool();\nloop invariant c2 == unknown_bool();\nloop invariant x1 >= x1;\nloop invariant x2 >= x2;\nloop invariant x3 >= x3;\nloop invariant d1 >= 1;\nloop invariant d2 >= 1;\nloop invariant d3 >= 1;\nloop invariant c1 ==> c1;\nloop invariant c2 ==> c2;\nloop invariant c1 == unknown_bool();\nloop invariant c2 == unknown_bool();\nloop invariant x1 >= x1;\nloop invariant x2 >= x2;\nloop invariant x3 >= x3;\nloop invariant d1 >= 1;\nloop invariant d2 >= 1;\nloop invariant d3 >= 1;\nloop invariant c1 ==> c1;\nloop invariant c2 ==> c2;\nloop invariant c1 == unknown_bool();\nloop invariant c2 == unknown_bool();\nloop invariant x1 >= x1;\nloop invariant x2 >= x2;\nloop invariant x3 >= x3;\nloop invariant d1 >= 1;\nloop invariant d2 >= 1;\nloop invariant d3 >= 1;\nloop invariant c1 ==> c1;\nloop invariant c2 ==> c2;\nloop invariant c1 == unknown_bool();\nloop invariant c2 == unknown_bool();\nloop invariant x1 >= x1;\nloop invariant x2 >= x2;\nloop invariant x3 >= x3;\nloop invariant d1 >= 1;\nloop invariant d2 >= 1;\nloop invariant d3 >= 1;\nloop invariant c1 ==> c1;\nloop invariant c2 ==> c2;\nloop invariant c1 == unknown_bool();\nloop invariant c2 == unknown_bool();\nloop invariant x1 >= x1;\nloop invariant x2 >= x2;\nloop invariant x3 >= x3;\nloop invariant d1 >= 1;\nloop invariant d2 >= 1;\nloop invariant d3 >= 1;\nloop invariant c1 ==> c1;\nloop invariant c2 ==> c2;\nloop invariant c1 == unknown_bool();\nloop invariant c2 == unknown_bool();\nloop invariant x1 >= x1;\nloop invariant x2 >= x2;\nloop invariant x3 >= x3;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x1;\nloop invariant 0 <= x2;\nloop invariant 0 <= x3;\nloop invariant x1 + x2 + x3 <= x1 + x2 + x3;\nloop invariant d1 >= 1;\nloop invariant d2 >= 1;\nloop invariant d3 >= 1;\nloop invariant c1 || c2;\nloop invariant x1 > 0 || x2 > 0 || x3 > 0;\nloop invariant c1 || c2 ==> d1 == 1 || d2 == 1 || d3 == 1;\nloop invariant c1 || c2 ==> x1 - d1 >= 0 || x2 - d2 >= 0 || x3 - d3 >= 0;\nloop invariant x1 + x2 + x3 >= x1 + x2 + x3;\nloop invariant x1 > 0 ==> x1 >= d1;\nloop invariant x2 > 0 ==> x2 >= d2;\nloop invariant x3 > 0 ==> x3 >= d3;\nloop invariant x1 >= x1;\nloop invariant x2 >= x2;\nloop invariant x3 >= x3;\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 <= x1;\nloop invariant x2 <= x2;\nloop invariant x3 <= x3;\nloop invariant x1 <= x1 + x2 + x3;\nloop invariant x2 <= x1 + x2 + x3;\nloop invariant x3 <= x1 + x2 + x3;\nloop invariant x1 <= x1 + x2 + x3;\nloop invariant x2 <= x1 + x2 + x3;\nloop invariant x3 <= x1 + x2 + x3;\nloop invariant x1 <= x1 + x2 + x3;\nloop invariant x2 <= x1 + x2 + x3;\nloop invariant x3 <= x1 + x2 + x3;\nloop invariant x1 <= x1 + x2 + x3;\nloop invariant x2 <= x1 + x2 + x3;\nloop invariant x3 <= x1 + x2 + x3;\nloop invariant x1 <= x1 + x2 + x3;\nloop invariant x2 <= x1 + x2 + x3;\nloop invariant x3 <= x1 + x2 + x3;\nloop invariant x1 <= x1 + x2 + x3;\nloop invariant x2 <= x1 + x2 + x3;\nloop invariant x3 <= x1 + x2 + x3;\nloop invariant x1 <= x1 + x2 + x3;\nloop invariant x2 <= x1 + x2 + x3;\nloop invariant x3 <= x1 + x2 + x3;\nloop invariant x1 <= x1 + x2 + x3;\nloop invariant x2 <= x1 + x2 + x3;\nloop invariant x3 <= x1 + x2 + x3;\nloop invariant x1 <= x1 + x2 + x3;\nloop invariant x2 <= x1 + x2 + x3;\nloop invariant x3 <= x1 + x2 + x3;\nloop invariant x1 <= x1 + x2 + x3;\nloop invariant x2 <= x1 + x2 + x3;\nloop invariant x3 <= x1 + x2 + x3;\nloop invariant x1 <= x1 + x2 + x3;\nloop invariant x2 <= x1 + x2 + x3;\nloop invariant x3 <= x1 + x2 + x3;\nloop invariant x1 <= x1 + x2 + x3;\nloop invariant x2 <= x1 + x2 + x3;\nloop invariant x3 <= x1 + x2 + x3;\nloop invariant x1 <= x1 + x2 + x3;\nloop invariant x2 <= x1 + x2 + x3;\nloop invariant x3 <= x1 + x2 + x3;\nloop invariant x1 <= x1 + x2 + x3;\nloop invariant x2 <= x1 + x2 + x3;\nloop invariant x3 <= x1 + x2 + x3;\nloop invariant x1 <= x1 + x2 + x3;\nloop invariant x2 <= x1 + x2 + x3;\nloop invariant x3 <= x1 + x2 + x3;\nloop invariant x1 <= x1 + x2 + x3;\nloop invariant x2 <= x1 + x2 + x3;\nloop invariant x3 <= x1 + x2 + x3;\nloop invariant x1 <= x1 + x2 + x3;\nloop invariant x2 <= x1 + x2 + x3;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x1 <= 4294967295;\nloop invariant 0 <= x2 <= 4294967295;\nloop invariant 0 <= x3 <= 4294967295;\nloop invariant 1 <= d1 <= 4294967295;\nloop invariant 1 <= d2 <= 4294967295;\nloop invariant 1 <= d3 <= 4294967295;\nloop invariant c1 == 0 || c1 == 1;\nloop invariant c2 == 0 || c2 == 1;\nloop invariant x1 <= x1 + d1 ==> c1 == 1;\nloop invariant x2 <= x2 + d2 ==> c2 == 1;\nloop invariant x3 <= x3 + d3 ==> c1 == 0 && c2 == 0;\nloop invariant x1 >= x1 - d1 ==> c1 == 0;\nloop invariant x2 >= x2 - d2 ==> c2 == 0;\nloop invariant x3 >= x3 - d3 ==> c1 == 1 || c2 == 1;\nloop invariant x1 >= 0 && x2 >= 0 && x3 >= 0 ==> c1 == 1 || c2 == 1;\nloop invariant x1 >= 0 && x2 >= 0 && x3 >= 0 ==> c1 == 0 && c2 == 0;\nloop invariant x1 >= 0 && x2 >= 0 && x3 >= 0 ==> c1 == 1 && c2 == 0;\nloop invariant x1 >= 0 && x2 >= 0 && x3 >= 0 ==> c1 == 0 && c2 == 1;\nloop invariant x1 >= 0 && x2 >= 0 && x3 >= 0 ==> c1 == 1 && c2 == 1;\nloop invariant x1 >= 0 && x2 >= 0 && x3 >= 0 ==> x1 >= 0 && x2 >= 0 && x3 >= 0;\nloop invariant x1 >= 0 && x2 >= 0 && x3 >= 0 ==> x1 >= 0 && x2 >= 0 && x3 >= 0;\nloop invariant x1 >= 0 && x2 >= 0 && x3 >= 0 ==> x1 >= 0 && x2 >= 0 && x3 >= 0;\nloop invariant x1 >= 0 && x2 >= 0 && x3 >= 0 ==> x1 >= 0 && x2 >= 0 && x3 >= 0;\nloop invariant x1 >= 0 && x2 >= 0 && x3 >= 0 ==> x1 >= 0 && x2 >= 0 && x3 >= 0;\nloop invariant x1 >= 0 && x2 >= 0 && x3 >= 0 ==> x1 >= 0 && x2 >= 0 && x3 >= 0;\nloop invariant x1 >= 0 && x2 >= 0 && x3 >= 0 ==> x1 >= 0 && x2 >= 0 && x3 >= 0;\nloop invariant x1 >= 0 && x2 >= 0 && x3 >= 0 ==> x1 >= 0 && x2 >= 0 && x3 >= 0;\nloop invariant x1 >= 0 && x2 >= 0 && x3 >= 0 ==> x1 >= 0 && x2 >= 0 && x3 >= 0;\nloop invariant x1 >= 0 && x2 >= 0 && x3 >= 0 ==> x1 >= 0 && x2 >= 0 && x3 >= 0;\nloop invariant x1 >= 0 && x2 >= 0 && x3 >= 0 ==> x1 >= 0 && x2 >= 0 && x3 >= 0;\nloop invariant x1 >= 0 && x2 >= 0 && x3 >= 0 ==> x1 >= 0 && x2 >= 0 && x3 >= 0;\nloop invariant x1 >= 0 && x2 >= 0 && x3 >= 0 ==> x1 >= 0 && x2 >= 0 && x3 >= 0;\nloop invariant x1 >= 0 && x2 >= 0 && x3 >= 0 ==> x1 >= 0 && x2 >= 0 && x3 >= 0;\nloop invariant x1 >= 0 && x2 >= 0 && x3 >= 0 ==> x1 >= 0 && x2 >= 0 && x3 >= 0;\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x1 <= unknown_uint();\nloop invariant 0 <= x2 <= unknown_uint();\nloop invariant 0 <= x3 <= unknown_uint();\nloop invariant 0 <= d1 <= unknown_uint();\nloop invariant 0 <= d2 <= unknown_uint();\nloop invariant 0 <= d3 <= unknown_uint();\nloop invariant c1 == unknown_bool();\nloop invariant c2 == unknown_bool();\nloop invariant x1 >= 0 ==> x1 <= unknown_uint();\nloop invariant x2 >= 0 ==> x2 <= unknown_uint();\nloop invariant x3 >= 0 ==> x3 <= unknown_uint();\nloop invariant d1 >= 0 ==> d1 <= unknown_uint();\nloop invariant d2 >= 0 ==> d2 <= unknown_uint();\nloop invariant d3 >= 0 ==> d3 <= unknown_uint();\nloop invariant c1 == unknown_bool();\nloop invariant c2 == unknown_bool();\nloop invariant x1 >= 0 ==> x1 <= unknown_uint();\nloop invariant x2 >= 0 ==> x2 <= unknown_uint();\nloop invariant x3 >= 0 ==> x3 <= unknown_uint();\nloop invariant d1 >= 0 ==> d1 <= unknown_uint();\nloop invariant d2 >= 0 ==> d2 <= unknown_uint();\nloop invariant d3 >= 0 ==> d3 <= unknown_uint();\nloop invariant c1 == unknown_bool();\nloop invariant c2 == unknown_bool();\nloop invariant x1 >= 0 ==> x1 <= unknown_uint();\nloop invariant x2 >= 0 ==> x2 <= unknown_uint();\nloop invariant x3 >= 0 ==> x3 <= unknown_uint();\nloop invariant d1 >= 0 ==> d1 <= unknown_uint();\nloop invariant d2 >= 0 ==> d2 <= unknown_uint();\nloop invariant d3 >= 0 ==> d3 <= unknown_uint();\nloop invariant c1 == unknown_bool();\nloop invariant c2 == unknown_bool();\nloop invariant x1 >= 0 ==> x1 <= unknown_uint();\nloop invariant x2 >= 0 ==> x2 <= unknown_uint();\nloop invariant x3 >= 0 ==> x3 <= unknown_uint();\nloop invariant d1 >= 0 ==> d1 <= unknown_uint();\nloop invariant d2 >= 0 ==> d2 <= unknown_uint();\nloop invariant d3 >= 0 ==> d3 <= unknown_uint();\nloop invariant c1 == unknown_bool();\nloop invariant c2 == unknown_bool();\nloop invariant x1 >= 0 ==> x1 <= unknown_uint();\nloop invariant x2 >= 0 ==> x2 <= unknown_uint();\nloop invariant x3 >= 0 ==> x3 <= unknown_uint();\nloop invariant d1 >= 0 ==> d1 <= unknown_uint();\nloop invariant d2 >= 0 ==> d2 <= unknown_uint();\nloop invariant d3 >= 0 ==> d3 <= unknown_uint();\nloop invariant c1 == unknown_bool();\nloop invariant c2 == unknown_bool();\nloop invariant x1 >= 0 ==> x1 <= unknown_uint();\nloop invariant x2 >= 0 ==> x2 <= unknown_uint();\nloop invariant x3 >= 0 ==> x3 <= unknown_uint();\nloop invariant d1 >= 0 ==> d1 <= unknown_uint();\nloop invariant d2 >= 0 ==> d2 <= unknown_uint();\nloop invariant d3 >= 0 ==> d3 <= unknown_uint();\nloop invariant c1 == unknown_bool();\nloop invariant c2 == unknown_bool();\nloop invariant x1 >= 0 ==> x1 <= unknown_uint();\nloop invariant x2 >= 0 ==> x2 <= unknown_uint();\nloop invariant x3 >= 0 ==> x3 <= unknown_uint();\nloop invariant d1 >= 0 ==> d1 <= unknown_uint();\nloop invariant d2 >= 0 ==> d2 <= unknown_uint();\nloop invariant d3 >= 0 ==> d3 <= unknown_uint();\nloop invariant c1 == unknown_bool();\nloop invariant c2 == unknown_bool();\nloop invariant x1 >= 0 ==> x1 <= unknown_uint();\nloop invariant x2 >= 0 ==> x2 <= unknown_uint();\nloop invariant x3 >= 0 ==> x3 <= unknown_uint();\nloop invariant d1 >= 0 ==> d1 <= unknown_uint();\nloop invariant d2 >= 0 ==> d2 <= unknown_uint();\nloop invariant d3 >= 0 ==> d3 <= unknown_uint();\nloop invariant c1 == unknown_bool();\nloop invariant c2 == unknown_bool();\nloop invariant x1 >= 0 ==> x1 <= unknown_uint();\nloop invariant x2 >= 0 ==> x2 <= unknown_uint();\nloop invariant x3 >= 0 ==> x3 <= unknown_uint();\nloop invariant d1 >= 0 ==> d1 <= unknown_uint();\nloop invariant d2 >= 0 ==> d2 <= unknown_uint();\nloop invariant d3 >= 0 ==> d3 <= unknown_uint();\nloop invariant c1 == unknown_bool();\nloop invariant c2 == unknown_bool();\nloop invariant x1 >= 0 ==> x1 <= unknown_uint();\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x1 <= 4294967295;\nloop invariant 1 <= x2 <= 4294967295;\nloop invariant 1 <= x3 <= 4294967295;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x1 <= x2 <= x3;\nloop invariant (x2 - x1) <= d1 + d2 + d3;\nloop invariant c1 == (x1 > 0 && d1 > 0);\nloop invariant c2 == (x2 > 0 && d2 > 0);\n*/\n```",
            "```\n/*@\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 + x2 + x3 >= 0;\nloop invariant x1 + x2 + x3 >= x1 - d1;\nloop invariant x1 + x2 + x3 >= x2 - d2;\nloop invariant x1 + x2 + x3 >= x3 - d3;\nloop invariant x1 + x2 + x3 >= d1;\nloop invariant x1 + x2 + x3 >= d2;\nloop invariant x1 + x2 + x3 >= d3;\nloop invariant d1 >= 0;\nloop invariant d2 >= 0;\nloop invariant d3 >= 0;\nloop invariant 1 <= d1;\nloop invariant 1 <= d2;\nloop invariant 1 <= d3;\nloop invariant (c1 ==> x1 >= d1);\nloop invariant (c2 ==> x2 >= d2);\nloop invariant (c1 ==> x2 >= 0);\nloop invariant (c2 ==> x1 >= 0);\nloop invariant (c1 ==> x3 >= 0);\nloop invariant (c2 ==> x3 >= 0);\nloop invariant (x1 == 0 ==> !c1);\nloop invariant (x2 == 0 ==> !c2);\nloop invariant (x3 == 0 ==> !c1 && !c2);\nloop invariant (x1 == 0 ==> x2 >= 0);\nloop invariant (x2 == 0 ==> x1 >= 0);\nloop invariant (x1 == 0 ==> x3 >= 0);\nloop invariant (x2 == 0 ==> x3 >= 0);\nloop invariant (x3 == 0 ==> x1 >= 0);\nloop invariant (x3 == 0 ==> x2 >= 0);\nloop invariant (x1 == 0 ==> x1 == x2);\nloop invariant (x2 == 0 ==> x2 == x1);\nloop invariant (x3 == 0 ==> x1 == x3);\nloop invariant (x3 == 0 ==> x2 == x3);\nloop invariant (x1 == 0 ==> x1 == x2 && x1 == x3);\nloop invariant (x2 == 0 ==> x2 == x1 && x2 == x3);\nloop invariant (x3 == 0 ==> x3 == x1 && x3 == x2);\nloop invariant (x1 == 0 ==> c1 == false && c2 == false);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x1 <= unknown_uint();\nloop invariant 0 <= x2 <= unknown_uint();\nloop invariant 0 <= x3 <= unknown_uint();\nloop invariant d1 > 0;\nloop invariant d2 > 0;\nloop invariant d3 > 0;\nloop invariant c1 == unknown_bool();\nloop invariant c2 == unknown_bool();\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x1 <= 4294967295;\nloop invariant 0 <= x2 <= 4294967295;\nloop invariant 0 <= x3 <= 4294967295;\nloop invariant 0 <= d1 <= 4294967295;\nloop invariant 0 <= d2 <= 4294967295;\nloop invariant 0 <= d3 <= 4294967295;\nloop invariant 0 <= c1 <= 1;\nloop invariant 0 <= c2 <= 1;\nloop invariant x1 >= x2;\nloop invariant x2 >= x3;\nloop invariant x1 >= x3;\nloop invariant x1 >= x2 - d1;\nloop invariant x2 >= x3 - d2;\nloop invariant x3 >= x1 - d3;\nloop invariant x1 >= x2 - d1 * (1 + 0) / 2;\nloop invariant x2 >= x3 - d2 * (1 + 0) / 2;\nloop invariant x3 >= x1 - d3 * (1 + 0) / 2;\nloop invariant x1 >= x2 - d1 * (1 + 1) / 2;\nloop invariant x2 >= x3 - d2 * (1 + 1) / 2;\nloop invariant x3 >= x1 - d3 * (1 + 1) / 2;\nloop invariant x1 >= x2 - d1 * (1 + 2) / 2;\nloop invariant x2 >= x3 - d2 * (1 + 2) / 2;\nloop invariant x3 >= x1 - d3 * (1 + 2) / 2;\nloop invariant x1 >= x2 - d1 * (1 + 3) / 2;\nloop invariant x2 >= x3 - d2 * (1 + 3) / 2;\nloop invariant x3 >= x1 - d3 * (1 + 3) / 2;\nloop invariant x1 >= x2 - d1 * (1 + 4) / 2;\nloop invariant x2 >= x3 - d2 * (1 + 4) / 2;\nloop invariant x3 >= x1 - d3 * (1 + 4) / 2;\nloop invariant x1 >= x2 - d1 * (1 + 5) / 2;\nloop invariant x2 >= x3 - d2 * (1 + 5) / 2;\nloop invariant x3 >= x1 - d3 * (1 + 5) / 2;\nloop invariant x1 >= x2 - d1 * (1 + 6) / 2;\nloop invariant x2 >= x3 - d2 * (1 + 6) / 2;\nloop invariant x3 >= x1 - d3 * (1 + 6) / 2;\nloop invariant x1 >= x2 - d1 * (1 + 7) / 2;\nloop invariant x2 >= x3 - d2 * (1 + 7) / 2;\nloop invariant x3 >= x1 - d3 * (1 + 7) / 2;\nloop invariant x1 >= x2 - d1 * (1 + 8) / 2;\nloop invariant x2 >= x3 - d2 * (1 + 8) / 2;\nloop invariant x3 >= x1 - d3 * (1 + 8) / 2;\nloop invariant x1 >= x2 - d1 * (1 + 9) / 2;\nloop invariant x2 >= x3 - d2 * (1 + 9) / 2;\nloop invariant x3 >= x1 - d3 * (1 + 9) / 2;\nloop invariant x1 >= x2 - d1 * (1 + 10) / 2;\nloop invariant x2 >= x3 - d2 * (1 + 10) / 2;\nloop invariant x3 >= x1 - d3 * (1 + 10) / 2;\nloop invariant x1 >= x2 - d1 * (1 + 11) / 2;\nloop invariant x2 >= x3 - d2 * (1 + 11) / 2;\nloop invariant x3 >= x1 - d3 * (1 + 11) / 2;\nloop invariant x1 >= x2 - d1 * (1 + 12) / 2;\n*/\n```",
            "```\n/*@\nloop invariant x1 >= 0 && x2 >= 0 && x3 >= 0;\nloop invariant x1 <= x2 && x1 <= x3 && x2 <= x3;\nloop invariant (if (x1 > 0) then x1 >= d1 else x1 == 0);\nloop invariant (if (x2 > 0) then x2 >= d2 else x2 == 0);\nloop invariant (if (x3 > 0) then x3 >= d3 else x3 == 0);\nloop invariant (if (x1 > 0) then x1 == x2 - d2 * (x2 - x1) / (x2 - d2) else x1 == 0);\nloop invariant (if (x2 > 0) then x2 == x3 - d3 * (x3 - x2) / (x3 - d3) else x2 == 0);\nloop invariant (if (x3 > 0) then x3 == x3 else x3 == 0);\nloop invariant (if (x1 > 0) then x1 == x3 - d3 * (x3 - x1) / (x3 - d3) else x1 == 0);\nloop invariant (if (x2 > 0) then x2 == x3 - d3 * (x3 - x2) / (x3 - d3) else x2 == 0);\nloop invariant (if (x3 > 0) then x3 == x3 else x3 == 0);\nloop invariant (if (x1 > 0) then x1 == x3 - d3 * (x3 - x1) / (x3 - d3) else x1 == 0);\nloop invariant (if (x2 > 0) then x2 == x3 - d3 * (x3 - x2) / (x3 - d3) else x2 == 0);\nloop invariant (if (x3 > 0) then x3 == x3 else x3 == 0);\nloop invariant (if (x1 > 0) then x1 == x3 - d3 * (x3 - x1) / (x3 - d3) else x1 == 0);\nloop invariant (if (x2 > 0) then x2 == x3 - d3 * (x3 - x2) / (x3 - d3) else x2 == 0);\nloop invariant (if (x3 > 0) then x3 == x3 else x3 == 0);\nloop invariant (if (x1 > 0) then x1 == x3 - d3 * (x3 - x1) / (x3 - d3) else x1 == 0);\nloop invariant (if (x2 > 0) then x2 == x3 - d3 * (x3 - x2) / (x3 - d3) else x2 == 0);\nloop invariant (if (x3 > 0) then x3 == x3 else x3 == 0);\nloop invariant (if (x1 > 0) then x1 == x3 - d3 * (x3 - x1) / (x3 - d3) else x1 == 0);\nloop invariant (if (x2 > 0) then x2 == x3 - d3 * (x3 - x2) / (x3 - d3) else x2 == 0);\nloop invariant (if (x3 > 0) then x3 == x3 else x3 == 0);\nloop invariant (if (x1 > 0) then x1 == x3 - d3 * (x3 - x1) / (x3 - d3) else x1 == 0);\nloop invariant (if (x2 > 0) then x2 == x3 - d3 * (x3 - x2) / (x3 - d3) else x2 == 0);\nloop invariant (if (x3 > 0) then x3 == x3 else x3 == 0);\nloop invariant (if (x1 > 0) then x1 == x3 - d3 * (x3 - x1) / (x3 - d3) else x1 == 0);\nloop invariant (if (x2 > 0) then x2 == x3 - d3 * (x3 - x2) / (x3 - d3) else x2 == 0);\nloop invariant (if (x3 > 0) then x3 == x3 else x3 == 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x1 <= unknown_uint();\nloop invariant 0 <= x2 <= unknown_uint();\nloop invariant 0 <= x3 <= unknown_uint();\nloop invariant 0 <= d1 <= unknown_uint();\nloop invariant 0 <= d2 <= unknown_uint();\nloop invariant 0 <= d3 <= unknown_uint();\nloop invariant c1 == unknown_bool();\nloop invariant c2 == unknown_bool();\nloop invariant x1 >= x2 ==> x1 >= x3;\nloop invariant x2 >= x3 ==> x2 >= x1;\nloop invariant x3 >= x1 ==> x3 >= x2;\nloop invariant c1 == unknown_bool() ==> (x1 == 0 || x2 == 0 || x3 == 0);\nloop invariant c2 == unknown_bool() ==> (x1 == 0 || x2 == 0 || x3 == 0);\n*/\n```",
            "```\n/*@\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant d1 >= 0;\nloop invariant d2 >= 0;\nloop invariant d3 >= 0;\nloop invariant x1 == 0 || x2 == 0 || x3 == 0;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  unsigned int x1=unknown_uint(), x2=unknown_uint(), x3=unknown_uint();\n  unsigned int d1=1, d2=1, d3=1;\n  _Bool c1=unknown_bool(), c2=unknown_bool();\n  \n  /*@\n\n*/\nwhile(x1>0 && x2>0 && x3>0)\n  {\n    if (c1) x1=x1-d1;\n    else if (c2) x2=x2-d2;\n    else x3=x3-d3;\n    c1=unknown_bool();\n    c2=unknown_bool();\n  }\n\n  {;\n//@ assert(x1==0 || x2==0 || x3==0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= x1 <= x1;\nloop invariant 0 <= x2 <= x2;\nloop invariant 0 <= x3 <= x3;\nloop invariant 0 <= d1 <= d1;\nloop invariant 0 <= d2 <= d2;\nloop invariant 0 <= d3 <= d3;\nloop invariant c1 = c1;\nloop invariant c2 = c2;\nloop invariant x1 > 0;\nloop invariant x2 > 0;\nloop invariant x3 > 0;\nloop invariant x1 >= x1;\nloop invariant x2 >= x2;\nloop invariant x3 >= x3;\nloop invariant d1 >= 1;\nloop invariant d2 >= 1;\nloop invariant d3 >= 1;\nloop invariant c1 ==> c1;\nloop invariant c2 ==> c2;\nloop invariant c1 == unknown_bool();\nloop invariant c2 == unknown_bool();\nloop invariant x1 == x1;\nloop invariant x2 == x2;\nloop invariant x3 == x3;\nloop invariant d1 == 1;\nloop invariant d2 == 1;\nloop invariant d3 == 1;\nloop invariant c1 == unknown_bool();\nloop invariant c2 == unknown_bool();\nloop invariant x1 >= x1;\nloop invariant x2 >= x2;\nloop invariant x3 >= x3;\nloop invariant d1 >= 1;\nloop invariant d2 >= 1;\nloop invariant d3 >= 1;\nloop invariant c1 ==> c1;\nloop invariant c2 ==> c2;\nloop invariant c1 == unknown_bool();\nloop invariant c2 == unknown_bool();\nloop invariant x1 >= x1;\nloop invariant x2 >= x2;\nloop invariant x3 >= x3;\nloop invariant d1 >= 1;\nloop invariant d2 >= 1;\nloop invariant d3 >= 1;\nloop invariant c1 ==> c1;\nloop invariant c2 ==> c2;\nloop invariant c1 == unknown_bool();\nloop invariant c2 == unknown_bool();\nloop invariant x1 >= x1;\nloop invariant x2 >= x2;\nloop invariant x3 >= x3;\nloop invariant d1 >= 1;\nloop invariant d2 >= 1;\nloop invariant d3 >= 1;\nloop invariant c1 ==> c1;\nloop invariant c2 ==> c2;\nloop invariant c1 == unknown_bool();\nloop invariant c2 == unknown_bool();\nloop invariant x1 >= x1;\nloop invariant x2 >= x2;\nloop invariant x3 >= x3;\nloop invariant d1 >= 1;\nloop invariant d2 >= 1;\nloop invariant d3 >= 1;\nloop invariant c1 ==> c1;\nloop invariant c2 ==> c2;\nloop invariant c1 == unknown_bool();\nloop invariant c2 == unknown_bool();\nloop invariant x1 >= x1;\nloop invariant x2 >= x2;\nloop invariant x3 >= x3;\nloop invariant d1 >= 1;\nloop invariant d2 >= 1;\nloop invariant d3 >= 1;\nloop invariant c1 ==> c1;\nloop invariant c2 ==> c2;\nloop invariant c1 == unknown_bool();\nloop invariant c2 == unknown_bool();\nloop invariant x1 >= x1;\nloop invariant x2 >= x2;\nloop invariant x3 >= x3;\nloop invariant d1 >= 1;\nloop invariant d2 >= 1;\nloop invariant d3 >= 1;\nloop invariant c1 ==> c1;\nloop invariant c2 ==> c2;\nloop invariant c1 == unknown_bool();\nloop invariant c2 == unknown_bool();\nloop invariant x1 >= x1;\nloop invariant x2 >= x2;\nloop invariant x3 >= x3;\nloop invariant d1 >= 1;\nloop invariant d2 >= 1;\nloop invariant d3 >= 1;\nloop invariant c1 ==> c1;\nloop invariant c2 ==> c2;\nloop invariant c1 == unknown_bool();\nloop invariant c2 == unknown_bool();\nloop invariant x1 >= x1;\nloop invariant x2 >= x2;\nloop invariant x3 >= x3;\nloop invariant d1 >= 1;\nloop invariant d2 >= 1;\nloop invariant d3 >= 1;\nloop invariant c1 ==> c1;\nloop invariant c2 ==> c2;\nloop invariant c1 == unknown_bool();\nloop invariant c2 == unknown_bool();\nloop invariant x1 >= x1;\nloop invariant x2 >= x2;\nloop invariant x3 >= x3;\nloop invariant d1 >= 1;\nloop invariant d2 >= 1;\nloop invariant d3 >= 1;\nloop invariant c1 ==> c1;\nloop invariant c2 ==> c2;\nloop invariant c1 == unknown_bool();\nloop invariant c2 == unknown_bool();\nloop invariant x1 >= x1;\nloop invariant x2 >= x2;\nloop invariant x3 >= x3;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  unsigned int x1=unknown_uint(), x2=unknown_uint(), x3=unknown_uint();\n  unsigned int d1=1, d2=1, d3=1;\n  _Bool c1=unknown_bool(), c2=unknown_bool();\n  \n  /*@\nloop invariant i1: 0 <= x1 <= x1;\nloop invariant i2: 0 <= x2 <= x2;\nloop invariant i3: 0 <= x3 <= x3;\nloop invariant i4: 0 <= d1 <= d1;\nloop invariant i5: 0 <= d2 <= d2;\nloop invariant i6: 0 <= d3 <= d3;\n\n\n\n\n\nloop invariant i12: x1 >= x1;\nloop invariant i13: x2 >= x2;\nloop invariant i14: x3 >= x3;\nloop invariant i15: d1 >= 1;\nloop invariant i16: d2 >= 1;\nloop invariant i17: d3 >= 1;\nloop invariant i18: c1 ==> c1;\nloop invariant i19: c2 ==> c2;\n\n\nloop invariant i22: x1 == x1;\nloop invariant i23: x2 == x2;\nloop invariant i24: x3 == x3;\nloop invariant i25: d1 == 1;\nloop invariant i26: d2 == 1;\nloop invariant i27: d3 == 1;\n*/\nwhile(x1>0 && x2>0 && x3>0)\n  {\n    if (c1) x1=x1-d1;\n    else if (c2) x2=x2-d2;\n    else x3=x3-d3;\n    c1=unknown_bool();\n    c2=unknown_bool();\n  }\n\n  {;\n//@ assert(x1==0 || x2==0 || x3==0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x1;\nloop invariant 0 <= x2;\nloop invariant 0 <= x3;\nloop invariant x1 + x2 + x3 <= x1 + x2 + x3;\nloop invariant d1 >= 1;\nloop invariant d2 >= 1;\nloop invariant d3 >= 1;\nloop invariant c1 || c2;\nloop invariant x1 > 0 || x2 > 0 || x3 > 0;\nloop invariant c1 || c2 ==> d1 == 1 || d2 == 1 || d3 == 1;\nloop invariant c1 || c2 ==> x1 - d1 >= 0 || x2 - d2 >= 0 || x3 - d3 >= 0;\nloop invariant x1 + x2 + x3 >= x1 + x2 + x3;\nloop invariant x1 > 0 ==> x1 >= d1;\nloop invariant x2 > 0 ==> x2 >= d2;\nloop invariant x3 > 0 ==> x3 >= d3;\nloop invariant x1 >= x1;\nloop invariant x2 >= x2;\nloop invariant x3 >= x3;\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 <= x1;\nloop invariant x2 <= x2;\nloop invariant x3 <= x3;\nloop invariant x1 <= x1 + x2 + x3;\nloop invariant x2 <= x1 + x2 + x3;\nloop invariant x3 <= x1 + x2 + x3;\nloop invariant x1 <= x1 + x2 + x3;\nloop invariant x2 <= x1 + x2 + x3;\nloop invariant x3 <= x1 + x2 + x3;\nloop invariant x1 <= x1 + x2 + x3;\nloop invariant x2 <= x1 + x2 + x3;\nloop invariant x3 <= x1 + x2 + x3;\nloop invariant x1 <= x1 + x2 + x3;\nloop invariant x2 <= x1 + x2 + x3;\nloop invariant x3 <= x1 + x2 + x3;\nloop invariant x1 <= x1 + x2 + x3;\nloop invariant x2 <= x1 + x2 + x3;\nloop invariant x3 <= x1 + x2 + x3;\nloop invariant x1 <= x1 + x2 + x3;\nloop invariant x2 <= x1 + x2 + x3;\nloop invariant x3 <= x1 + x2 + x3;\nloop invariant x1 <= x1 + x2 + x3;\nloop invariant x2 <= x1 + x2 + x3;\nloop invariant x3 <= x1 + x2 + x3;\nloop invariant x1 <= x1 + x2 + x3;\nloop invariant x2 <= x1 + x2 + x3;\nloop invariant x3 <= x1 + x2 + x3;\nloop invariant x1 <= x1 + x2 + x3;\nloop invariant x2 <= x1 + x2 + x3;\nloop invariant x3 <= x1 + x2 + x3;\nloop invariant x1 <= x1 + x2 + x3;\nloop invariant x2 <= x1 + x2 + x3;\nloop invariant x3 <= x1 + x2 + x3;\nloop invariant x1 <= x1 + x2 + x3;\nloop invariant x2 <= x1 + x2 + x3;\nloop invariant x3 <= x1 + x2 + x3;\nloop invariant x1 <= x1 + x2 + x3;\nloop invariant x2 <= x1 + x2 + x3;\nloop invariant x3 <= x1 + x2 + x3;\nloop invariant x1 <= x1 + x2 + x3;\nloop invariant x2 <= x1 + x2 + x3;\nloop invariant x3 <= x1 + x2 + x3;\nloop invariant x1 <= x1 + x2 + x3;\nloop invariant x2 <= x1 + x2 + x3;\nloop invariant x3 <= x1 + x2 + x3;\nloop invariant x1 <= x1 + x2 + x3;\nloop invariant x2 <= x1 + x2 + x3;\nloop invariant x3 <= x1 + x2 + x3;\nloop invariant x1 <= x1 + x2 + x3;\nloop invariant x2 <= x1 + x2 + x3;\nloop invariant x3 <= x1 + x2 + x3;\nloop invariant x1 <= x1 + x2 + x3;\nloop invariant x2 <= x1 + x2 + x3;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  unsigned int x1=unknown_uint(), x2=unknown_uint(), x3=unknown_uint();\n  unsigned int d1=1, d2=1, d3=1;\n  _Bool c1=unknown_bool(), c2=unknown_bool();\n  \n  /*@\nloop invariant i1: 0 <= x1;\nloop invariant i2: 0 <= x2;\nloop invariant i3: 0 <= x3;\nloop invariant i4: x1 + x2 + x3 <= x1 + x2 + x3;\nloop invariant i5: d1 >= 1;\nloop invariant i6: d2 >= 1;\nloop invariant i7: d3 >= 1;\n\n\n\n\nloop invariant i12: x1 + x2 + x3 >= x1 + x2 + x3;\n\n\n\nloop invariant i16: x1 >= x1;\nloop invariant i17: x2 >= x2;\nloop invariant i18: x3 >= x3;\nloop invariant i19: x1 >= 0;\nloop invariant i20: x2 >= 0;\nloop invariant i21: x3 >= 0;\nloop invariant i22: x1 <= x1;\nloop invariant i23: x2 <= x2;\nloop invariant i24: x3 <= x3;\nloop invariant i25: x1 <= x1 + x2 + x3;\nloop invariant i26: x2 <= x1 + x2 + x3;\nloop invariant i27: x3 <= x1 + x2 + x3;\n*/\nwhile(x1>0 && x2>0 && x3>0)\n  {\n    if (c1) x1=x1-d1;\n    else if (c2) x2=x2-d2;\n    else x3=x3-d3;\n    c1=unknown_bool();\n    c2=unknown_bool();\n  }\n\n  {;\n//@ assert(x1==0 || x2==0 || x3==0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= x1 <= 4294967295;\nloop invariant 0 <= x2 <= 4294967295;\nloop invariant 0 <= x3 <= 4294967295;\nloop invariant 1 <= d1 <= 4294967295;\nloop invariant 1 <= d2 <= 4294967295;\nloop invariant 1 <= d3 <= 4294967295;\nloop invariant c1 == 0 || c1 == 1;\nloop invariant c2 == 0 || c2 == 1;\nloop invariant x1 <= x1 + d1 ==> c1 == 1;\nloop invariant x2 <= x2 + d2 ==> c2 == 1;\nloop invariant x3 <= x3 + d3 ==> c1 == 0 && c2 == 0;\nloop invariant x1 >= x1 - d1 ==> c1 == 0;\nloop invariant x2 >= x2 - d2 ==> c2 == 0;\nloop invariant x3 >= x3 - d3 ==> c1 == 1 || c2 == 1;\nloop invariant x1 >= 0 && x2 >= 0 && x3 >= 0 ==> c1 == 1 || c2 == 1;\nloop invariant x1 >= 0 && x2 >= 0 && x3 >= 0 ==> c1 == 0 && c2 == 0;\nloop invariant x1 >= 0 && x2 >= 0 && x3 >= 0 ==> c1 == 1 && c2 == 0;\nloop invariant x1 >= 0 && x2 >= 0 && x3 >= 0 ==> c1 == 0 && c2 == 1;\nloop invariant x1 >= 0 && x2 >= 0 && x3 >= 0 ==> c1 == 1 && c2 == 1;\nloop invariant x1 >= 0 && x2 >= 0 && x3 >= 0 ==> x1 >= 0 && x2 >= 0 && x3 >= 0;\nloop invariant x1 >= 0 && x2 >= 0 && x3 >= 0 ==> x1 >= 0 && x2 >= 0 && x3 >= 0;\nloop invariant x1 >= 0 && x2 >= 0 && x3 >= 0 ==> x1 >= 0 && x2 >= 0 && x3 >= 0;\nloop invariant x1 >= 0 && x2 >= 0 && x3 >= 0 ==> x1 >= 0 && x2 >= 0 && x3 >= 0;\nloop invariant x1 >= 0 && x2 >= 0 && x3 >= 0 ==> x1 >= 0 && x2 >= 0 && x3 >= 0;\nloop invariant x1 >= 0 && x2 >= 0 && x3 >= 0 ==> x1 >= 0 && x2 >= 0 && x3 >= 0;\nloop invariant x1 >= 0 && x2 >= 0 && x3 >= 0 ==> x1 >= 0 && x2 >= 0 && x3 >= 0;\nloop invariant x1 >= 0 && x2 >= 0 && x3 >= 0 ==> x1 >= 0 && x2 >= 0 && x3 >= 0;\nloop invariant x1 >= 0 && x2 >= 0 && x3 >= 0 ==> x1 >= 0 && x2 >= 0 && x3 >= 0;\nloop invariant x1 >= 0 && x2 >= 0 && x3 >= 0 ==> x1 >= 0 && x2 >= 0 && x3 >= 0;\nloop invariant x1 >= 0 && x2 >= 0 && x3 >= 0 ==> x1 >= 0 && x2 >= 0 && x3 >= 0;\nloop invariant x1 >= 0 && x2 >= 0 && x3 >= 0 ==> x1 >= 0 && x2 >= 0 && x3 >= 0;\nloop invariant x1 >= 0 && x2 >= 0 && x3 >= 0 ==> x1 >= 0 && x2 >= 0 && x3 >= 0;\nloop invariant x1 >= 0 && x2 >= 0 && x3 >= 0 ==> x1 >= 0 && x2 >= 0 && x3 >= 0;\nloop invariant x1 >= 0 && x2 >= 0 && x3 >= 0 ==> x1 >= 0 && x2 >= 0 && x3 >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  unsigned int x1=unknown_uint(), x2=unknown_uint(), x3=unknown_uint();\n  unsigned int d1=1, d2=1, d3=1;\n  _Bool c1=unknown_bool(), c2=unknown_bool();\n  \n  /*@\nloop invariant i1: 0 <= x1 <= 4294967295;\nloop invariant i2: 0 <= x2 <= 4294967295;\nloop invariant i3: 0 <= x3 <= 4294967295;\nloop invariant i4: 1 <= d1 <= 4294967295;\nloop invariant i5: 1 <= d2 <= 4294967295;\nloop invariant i6: 1 <= d3 <= 4294967295;\nloop invariant i7: c1 == 0 || c1 == 1;\nloop invariant i8: c2 == 0 || c2 == 1;\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i20: x1 >= 0 && x2 >= 0 && x3 >= 0 ==> x1 >= 0 && x2 >= 0 && x3 >= 0;\n*/\nwhile(x1>0 && x2>0 && x3>0)\n  {\n    if (c1) x1=x1-d1;\n    else if (c2) x2=x2-d2;\n    else x3=x3-d3;\n    c1=unknown_bool();\n    c2=unknown_bool();\n  }\n\n  {;\n//@ assert(x1==0 || x2==0 || x3==0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  unsigned int x1=unknown_uint(), x2=unknown_uint(), x3=unknown_uint();\n  unsigned int d1=1, d2=1, d3=1;\n  _Bool c1=unknown_bool(), c2=unknown_bool();\n  \n  /*@\n\n*/\nwhile(x1>0 && x2>0 && x3>0)\n  {\n    if (c1) x1=x1-d1;\n    else if (c2) x2=x2-d2;\n    else x3=x3-d3;\n    c1=unknown_bool();\n    c2=unknown_bool();\n  }\n\n  {;\n//@ assert(x1==0 || x2==0 || x3==0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 14,
                "annotations": "```\n/*@\nloop invariant 0 <= x1 <= unknown_uint();\nloop invariant 0 <= x2 <= unknown_uint();\nloop invariant 0 <= x3 <= unknown_uint();\nloop invariant 0 <= d1 <= unknown_uint();\nloop invariant 0 <= d2 <= unknown_uint();\nloop invariant 0 <= d3 <= unknown_uint();\nloop invariant c1 == unknown_bool();\nloop invariant c2 == unknown_bool();\nloop invariant x1 >= 0 ==> x1 <= unknown_uint();\nloop invariant x2 >= 0 ==> x2 <= unknown_uint();\nloop invariant x3 >= 0 ==> x3 <= unknown_uint();\nloop invariant d1 >= 0 ==> d1 <= unknown_uint();\nloop invariant d2 >= 0 ==> d2 <= unknown_uint();\nloop invariant d3 >= 0 ==> d3 <= unknown_uint();\nloop invariant c1 == unknown_bool();\nloop invariant c2 == unknown_bool();\nloop invariant x1 >= 0 ==> x1 <= unknown_uint();\nloop invariant x2 >= 0 ==> x2 <= unknown_uint();\nloop invariant x3 >= 0 ==> x3 <= unknown_uint();\nloop invariant d1 >= 0 ==> d1 <= unknown_uint();\nloop invariant d2 >= 0 ==> d2 <= unknown_uint();\nloop invariant d3 >= 0 ==> d3 <= unknown_uint();\nloop invariant c1 == unknown_bool();\nloop invariant c2 == unknown_bool();\nloop invariant x1 >= 0 ==> x1 <= unknown_uint();\nloop invariant x2 >= 0 ==> x2 <= unknown_uint();\nloop invariant x3 >= 0 ==> x3 <= unknown_uint();\nloop invariant d1 >= 0 ==> d1 <= unknown_uint();\nloop invariant d2 >= 0 ==> d2 <= unknown_uint();\nloop invariant d3 >= 0 ==> d3 <= unknown_uint();\nloop invariant c1 == unknown_bool();\nloop invariant c2 == unknown_bool();\nloop invariant x1 >= 0 ==> x1 <= unknown_uint();\nloop invariant x2 >= 0 ==> x2 <= unknown_uint();\nloop invariant x3 >= 0 ==> x3 <= unknown_uint();\nloop invariant d1 >= 0 ==> d1 <= unknown_uint();\nloop invariant d2 >= 0 ==> d2 <= unknown_uint();\nloop invariant d3 >= 0 ==> d3 <= unknown_uint();\nloop invariant c1 == unknown_bool();\nloop invariant c2 == unknown_bool();\nloop invariant x1 >= 0 ==> x1 <= unknown_uint();\nloop invariant x2 >= 0 ==> x2 <= unknown_uint();\nloop invariant x3 >= 0 ==> x3 <= unknown_uint();\nloop invariant d1 >= 0 ==> d1 <= unknown_uint();\nloop invariant d2 >= 0 ==> d2 <= unknown_uint();\nloop invariant d3 >= 0 ==> d3 <= unknown_uint();\nloop invariant c1 == unknown_bool();\nloop invariant c2 == unknown_bool();\nloop invariant x1 >= 0 ==> x1 <= unknown_uint();\nloop invariant x2 >= 0 ==> x2 <= unknown_uint();\nloop invariant x3 >= 0 ==> x3 <= unknown_uint();\nloop invariant d1 >= 0 ==> d1 <= unknown_uint();\nloop invariant d2 >= 0 ==> d2 <= unknown_uint();\nloop invariant d3 >= 0 ==> d3 <= unknown_uint();\nloop invariant c1 == unknown_bool();\nloop invariant c2 == unknown_bool();\nloop invariant x1 >= 0 ==> x1 <= unknown_uint();\nloop invariant x2 >= 0 ==> x2 <= unknown_uint();\nloop invariant x3 >= 0 ==> x3 <= unknown_uint();\nloop invariant d1 >= 0 ==> d1 <= unknown_uint();\nloop invariant d2 >= 0 ==> d2 <= unknown_uint();\nloop invariant d3 >= 0 ==> d3 <= unknown_uint();\nloop invariant c1 == unknown_bool();\nloop invariant c2 == unknown_bool();\nloop invariant x1 >= 0 ==> x1 <= unknown_uint();\nloop invariant x2 >= 0 ==> x2 <= unknown_uint();\nloop invariant x3 >= 0 ==> x3 <= unknown_uint();\nloop invariant d1 >= 0 ==> d1 <= unknown_uint();\nloop invariant d2 >= 0 ==> d2 <= unknown_uint();\nloop invariant d3 >= 0 ==> d3 <= unknown_uint();\nloop invariant c1 == unknown_bool();\nloop invariant c2 == unknown_bool();\nloop invariant x1 >= 0 ==> x1 <= unknown_uint();\nloop invariant x2 >= 0 ==> x2 <= unknown_uint();\nloop invariant x3 >= 0 ==> x3 <= unknown_uint();\nloop invariant d1 >= 0 ==> d1 <= unknown_uint();\nloop invariant d2 >= 0 ==> d2 <= unknown_uint();\nloop invariant d3 >= 0 ==> d3 <= unknown_uint();\nloop invariant c1 == unknown_bool();\nloop invariant c2 == unknown_bool();\nloop invariant x1 >= 0 ==> x1 <= unknown_uint();\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  unsigned int x1=unknown_uint(), x2=unknown_uint(), x3=unknown_uint();\n  unsigned int d1=1, d2=1, d3=1;\n  _Bool c1=unknown_bool(), c2=unknown_bool();\n  \n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile(x1>0 && x2>0 && x3>0)\n  {\n    if (c1) x1=x1-d1;\n    else if (c2) x2=x2-d2;\n    else x3=x3-d3;\n    c1=unknown_bool();\n    c2=unknown_bool();\n  }\n\n  {;\n//@ assert(x1==0 || x2==0 || x3==0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 1 <= x1 <= 4294967295;\nloop invariant 1 <= x2 <= 4294967295;\nloop invariant 1 <= x3 <= 4294967295;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  unsigned int x1=unknown_uint(), x2=unknown_uint(), x3=unknown_uint();\n  unsigned int d1=1, d2=1, d3=1;\n  _Bool c1=unknown_bool(), c2=unknown_bool();\n  \n  /*@\n\n\n\n*/\nwhile(x1>0 && x2>0 && x3>0)\n  {\n    if (c1) x1=x1-d1;\n    else if (c2) x2=x2-d2;\n    else x3=x3-d3;\n    c1=unknown_bool();\n    c2=unknown_bool();\n  }\n\n  {;\n//@ assert(x1==0 || x2==0 || x3==0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x1 <= x2 <= x3;\nloop invariant (x2 - x1) <= d1 + d2 + d3;\nloop invariant c1 == (x1 > 0 && d1 > 0);\nloop invariant c2 == (x2 > 0 && d2 > 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  unsigned int x1=unknown_uint(), x2=unknown_uint(), x3=unknown_uint();\n  unsigned int d1=1, d2=1, d3=1;\n  _Bool c1=unknown_bool(), c2=unknown_bool();\n  \n  /*@\n\n\n\n\n*/\nwhile(x1>0 && x2>0 && x3>0)\n  {\n    if (c1) x1=x1-d1;\n    else if (c2) x2=x2-d2;\n    else x3=x3-d3;\n    c1=unknown_bool();\n    c2=unknown_bool();\n  }\n\n  {;\n//@ assert(x1==0 || x2==0 || x3==0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 + x2 + x3 >= 0;\nloop invariant x1 + x2 + x3 >= x1 - d1;\nloop invariant x1 + x2 + x3 >= x2 - d2;\nloop invariant x1 + x2 + x3 >= x3 - d3;\nloop invariant x1 + x2 + x3 >= d1;\nloop invariant x1 + x2 + x3 >= d2;\nloop invariant x1 + x2 + x3 >= d3;\nloop invariant d1 >= 0;\nloop invariant d2 >= 0;\nloop invariant d3 >= 0;\nloop invariant 1 <= d1;\nloop invariant 1 <= d2;\nloop invariant 1 <= d3;\nloop invariant (c1 ==> x1 >= d1);\nloop invariant (c2 ==> x2 >= d2);\nloop invariant (c1 ==> x2 >= 0);\nloop invariant (c2 ==> x1 >= 0);\nloop invariant (c1 ==> x3 >= 0);\nloop invariant (c2 ==> x3 >= 0);\nloop invariant (x1 == 0 ==> !c1);\nloop invariant (x2 == 0 ==> !c2);\nloop invariant (x3 == 0 ==> !c1 && !c2);\nloop invariant (x1 == 0 ==> x2 >= 0);\nloop invariant (x2 == 0 ==> x1 >= 0);\nloop invariant (x1 == 0 ==> x3 >= 0);\nloop invariant (x2 == 0 ==> x3 >= 0);\nloop invariant (x3 == 0 ==> x1 >= 0);\nloop invariant (x3 == 0 ==> x2 >= 0);\nloop invariant (x1 == 0 ==> x1 == x2);\nloop invariant (x2 == 0 ==> x2 == x1);\nloop invariant (x3 == 0 ==> x1 == x3);\nloop invariant (x3 == 0 ==> x2 == x3);\nloop invariant (x1 == 0 ==> x1 == x2 && x1 == x3);\nloop invariant (x2 == 0 ==> x2 == x1 && x2 == x3);\nloop invariant (x3 == 0 ==> x3 == x1 && x3 == x2);\nloop invariant (x1 == 0 ==> c1 == false && c2 == false);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  unsigned int x1=unknown_uint(), x2=unknown_uint(), x3=unknown_uint();\n  unsigned int d1=1, d2=1, d3=1;\n  _Bool c1=unknown_bool(), c2=unknown_bool();\n  \n  /*@\nloop invariant i1: x1 >= 0;\nloop invariant i2: x2 >= 0;\nloop invariant i3: x3 >= 0;\nloop invariant i4: x1 + x2 + x3 >= 0;\nloop invariant i5: x1 + x2 + x3 >= x1 - d1;\nloop invariant i6: x1 + x2 + x3 >= x2 - d2;\nloop invariant i7: x1 + x2 + x3 >= x3 - d3;\n\n\n\nloop invariant i11: d1 >= 0;\nloop invariant i12: d2 >= 0;\nloop invariant i13: d3 >= 0;\nloop invariant i14: 1 <= d1;\nloop invariant i15: 1 <= d2;\nloop invariant i16: 1 <= d3;\n\n\nloop invariant i19: (c1 ==> x2 >= 0);\nloop invariant i20: (c2 ==> x1 >= 0);\nloop invariant i21: (c1 ==> x3 >= 0);\nloop invariant i22: (c2 ==> x3 >= 0);\n\n\n\nloop invariant i26: (x1 == 0 ==> x2 >= 0);\nloop invariant i27: (x2 == 0 ==> x1 >= 0);\nloop invariant i28: (x1 == 0 ==> x3 >= 0);\nloop invariant i29: (x2 == 0 ==> x3 >= 0);\nloop invariant i30: (x3 == 0 ==> x1 >= 0);\nloop invariant i31: (x3 == 0 ==> x2 >= 0);\n\n\n\n\n\n\n\n\n*/\nwhile(x1>0 && x2>0 && x3>0)\n  {\n    if (c1) x1=x1-d1;\n    else if (c2) x2=x2-d2;\n    else x3=x3-d3;\n    c1=unknown_bool();\n    c2=unknown_bool();\n  }\n\n  {;\n//@ assert(x1==0 || x2==0 || x3==0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= x1 <= unknown_uint();\nloop invariant 0 <= x2 <= unknown_uint();\nloop invariant 0 <= x3 <= unknown_uint();\nloop invariant d1 > 0;\nloop invariant d2 > 0;\nloop invariant d3 > 0;\nloop invariant c1 == unknown_bool();\nloop invariant c2 == unknown_bool();\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  unsigned int x1=unknown_uint(), x2=unknown_uint(), x3=unknown_uint();\n  unsigned int d1=1, d2=1, d3=1;\n  _Bool c1=unknown_bool(), c2=unknown_bool();\n  \n  /*@\n\n\n\nloop invariant i4: d1 > 0;\nloop invariant i5: d2 > 0;\nloop invariant i6: d3 > 0;\n\n\n*/\nwhile(x1>0 && x2>0 && x3>0)\n  {\n    if (c1) x1=x1-d1;\n    else if (c2) x2=x2-d2;\n    else x3=x3-d3;\n    c1=unknown_bool();\n    c2=unknown_bool();\n  }\n\n  {;\n//@ assert(x1==0 || x2==0 || x3==0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  unsigned int x1=unknown_uint(), x2=unknown_uint(), x3=unknown_uint();\n  unsigned int d1=1, d2=1, d3=1;\n  _Bool c1=unknown_bool(), c2=unknown_bool();\n  \n  /*@\n\n*/\nwhile(x1>0 && x2>0 && x3>0)\n  {\n    if (c1) x1=x1-d1;\n    else if (c2) x2=x2-d2;\n    else x3=x3-d3;\n    c1=unknown_bool();\n    c2=unknown_bool();\n  }\n\n  {;\n//@ assert(x1==0 || x2==0 || x3==0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 14,
                "annotations": "```\n/*@\nloop invariant 0 <= x1 <= 4294967295;\nloop invariant 0 <= x2 <= 4294967295;\nloop invariant 0 <= x3 <= 4294967295;\nloop invariant 0 <= d1 <= 4294967295;\nloop invariant 0 <= d2 <= 4294967295;\nloop invariant 0 <= d3 <= 4294967295;\nloop invariant 0 <= c1 <= 1;\nloop invariant 0 <= c2 <= 1;\nloop invariant x1 >= x2;\nloop invariant x2 >= x3;\nloop invariant x1 >= x3;\nloop invariant x1 >= x2 - d1;\nloop invariant x2 >= x3 - d2;\nloop invariant x3 >= x1 - d3;\nloop invariant x1 >= x2 - d1 * (1 + 0) / 2;\nloop invariant x2 >= x3 - d2 * (1 + 0) / 2;\nloop invariant x3 >= x1 - d3 * (1 + 0) / 2;\nloop invariant x1 >= x2 - d1 * (1 + 1) / 2;\nloop invariant x2 >= x3 - d2 * (1 + 1) / 2;\nloop invariant x3 >= x1 - d3 * (1 + 1) / 2;\nloop invariant x1 >= x2 - d1 * (1 + 2) / 2;\nloop invariant x2 >= x3 - d2 * (1 + 2) / 2;\nloop invariant x3 >= x1 - d3 * (1 + 2) / 2;\nloop invariant x1 >= x2 - d1 * (1 + 3) / 2;\nloop invariant x2 >= x3 - d2 * (1 + 3) / 2;\nloop invariant x3 >= x1 - d3 * (1 + 3) / 2;\nloop invariant x1 >= x2 - d1 * (1 + 4) / 2;\nloop invariant x2 >= x3 - d2 * (1 + 4) / 2;\nloop invariant x3 >= x1 - d3 * (1 + 4) / 2;\nloop invariant x1 >= x2 - d1 * (1 + 5) / 2;\nloop invariant x2 >= x3 - d2 * (1 + 5) / 2;\nloop invariant x3 >= x1 - d3 * (1 + 5) / 2;\nloop invariant x1 >= x2 - d1 * (1 + 6) / 2;\nloop invariant x2 >= x3 - d2 * (1 + 6) / 2;\nloop invariant x3 >= x1 - d3 * (1 + 6) / 2;\nloop invariant x1 >= x2 - d1 * (1 + 7) / 2;\nloop invariant x2 >= x3 - d2 * (1 + 7) / 2;\nloop invariant x3 >= x1 - d3 * (1 + 7) / 2;\nloop invariant x1 >= x2 - d1 * (1 + 8) / 2;\nloop invariant x2 >= x3 - d2 * (1 + 8) / 2;\nloop invariant x3 >= x1 - d3 * (1 + 8) / 2;\nloop invariant x1 >= x2 - d1 * (1 + 9) / 2;\nloop invariant x2 >= x3 - d2 * (1 + 9) / 2;\nloop invariant x3 >= x1 - d3 * (1 + 9) / 2;\nloop invariant x1 >= x2 - d1 * (1 + 10) / 2;\nloop invariant x2 >= x3 - d2 * (1 + 10) / 2;\nloop invariant x3 >= x1 - d3 * (1 + 10) / 2;\nloop invariant x1 >= x2 - d1 * (1 + 11) / 2;\nloop invariant x2 >= x3 - d2 * (1 + 11) / 2;\nloop invariant x3 >= x1 - d3 * (1 + 11) / 2;\nloop invariant x1 >= x2 - d1 * (1 + 12) / 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  unsigned int x1=unknown_uint(), x2=unknown_uint(), x3=unknown_uint();\n  unsigned int d1=1, d2=1, d3=1;\n  _Bool c1=unknown_bool(), c2=unknown_bool();\n  \n  /*@\nloop invariant i1: 0 <= x1 <= 4294967295;\nloop invariant i2: 0 <= x2 <= 4294967295;\nloop invariant i3: 0 <= x3 <= 4294967295;\nloop invariant i4: 0 <= d1 <= 4294967295;\nloop invariant i5: 0 <= d2 <= 4294967295;\nloop invariant i6: 0 <= d3 <= 4294967295;\nloop invariant i7: 0 <= c1 <= 1;\nloop invariant i8: 0 <= c2 <= 1;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile(x1>0 && x2>0 && x3>0)\n  {\n    if (c1) x1=x1-d1;\n    else if (c2) x2=x2-d2;\n    else x3=x3-d3;\n    c1=unknown_bool();\n    c2=unknown_bool();\n  }\n\n  {;\n//@ assert(x1==0 || x2==0 || x3==0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 8,
                "annotations": "```\n/*@\nloop invariant x1 >= 0 && x2 >= 0 && x3 >= 0;\nloop invariant x1 <= x2 && x1 <= x3 && x2 <= x3;\nloop invariant (if (x1 > 0) then x1 >= d1 else x1 == 0);\nloop invariant (if (x2 > 0) then x2 >= d2 else x2 == 0);\nloop invariant (if (x3 > 0) then x3 >= d3 else x3 == 0);\nloop invariant (if (x1 > 0) then x1 == x2 - d2 * (x2 - x1) / (x2 - d2) else x1 == 0);\nloop invariant (if (x2 > 0) then x2 == x3 - d3 * (x3 - x2) / (x3 - d3) else x2 == 0);\nloop invariant (if (x3 > 0) then x3 == x3 else x3 == 0);\nloop invariant (if (x1 > 0) then x1 == x3 - d3 * (x3 - x1) / (x3 - d3) else x1 == 0);\nloop invariant (if (x2 > 0) then x2 == x3 - d3 * (x3 - x2) / (x3 - d3) else x2 == 0);\nloop invariant (if (x3 > 0) then x3 == x3 else x3 == 0);\nloop invariant (if (x1 > 0) then x1 == x3 - d3 * (x3 - x1) / (x3 - d3) else x1 == 0);\nloop invariant (if (x2 > 0) then x2 == x3 - d3 * (x3 - x2) / (x3 - d3) else x2 == 0);\nloop invariant (if (x3 > 0) then x3 == x3 else x3 == 0);\nloop invariant (if (x1 > 0) then x1 == x3 - d3 * (x3 - x1) / (x3 - d3) else x1 == 0);\nloop invariant (if (x2 > 0) then x2 == x3 - d3 * (x3 - x2) / (x3 - d3) else x2 == 0);\nloop invariant (if (x3 > 0) then x3 == x3 else x3 == 0);\nloop invariant (if (x1 > 0) then x1 == x3 - d3 * (x3 - x1) / (x3 - d3) else x1 == 0);\nloop invariant (if (x2 > 0) then x2 == x3 - d3 * (x3 - x2) / (x3 - d3) else x2 == 0);\nloop invariant (if (x3 > 0) then x3 == x3 else x3 == 0);\nloop invariant (if (x1 > 0) then x1 == x3 - d3 * (x3 - x1) / (x3 - d3) else x1 == 0);\nloop invariant (if (x2 > 0) then x2 == x3 - d3 * (x3 - x2) / (x3 - d3) else x2 == 0);\nloop invariant (if (x3 > 0) then x3 == x3 else x3 == 0);\nloop invariant (if (x1 > 0) then x1 == x3 - d3 * (x3 - x1) / (x3 - d3) else x1 == 0);\nloop invariant (if (x2 > 0) then x2 == x3 - d3 * (x3 - x2) / (x3 - d3) else x2 == 0);\nloop invariant (if (x3 > 0) then x3 == x3 else x3 == 0);\nloop invariant (if (x1 > 0) then x1 == x3 - d3 * (x3 - x1) / (x3 - d3) else x1 == 0);\nloop invariant (if (x2 > 0) then x2 == x3 - d3 * (x3 - x2) / (x3 - d3) else x2 == 0);\nloop invariant (if (x3 > 0) then x3 == x3 else x3 == 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  unsigned int x1=unknown_uint(), x2=unknown_uint(), x3=unknown_uint();\n  unsigned int d1=1, d2=1, d3=1;\n  _Bool c1=unknown_bool(), c2=unknown_bool();\n  \n  /*@\nloop invariant i1: x1 >= 0 && x2 >= 0 && x3 >= 0;\n\n\n\n\n\n\n\n\n*/\nwhile(x1>0 && x2>0 && x3>0)\n  {\n    if (c1) x1=x1-d1;\n    else if (c2) x2=x2-d2;\n    else x3=x3-d3;\n    c1=unknown_bool();\n    c2=unknown_bool();\n  }\n\n  {;\n//@ assert(x1==0 || x2==0 || x3==0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 11,
                "annotations": "```\n/*@\nloop invariant 0 <= x1 <= unknown_uint();\nloop invariant 0 <= x2 <= unknown_uint();\nloop invariant 0 <= x3 <= unknown_uint();\nloop invariant 0 <= d1 <= unknown_uint();\nloop invariant 0 <= d2 <= unknown_uint();\nloop invariant 0 <= d3 <= unknown_uint();\nloop invariant c1 == unknown_bool();\nloop invariant c2 == unknown_bool();\nloop invariant x1 >= x2 ==> x1 >= x3;\nloop invariant x2 >= x3 ==> x2 >= x1;\nloop invariant x3 >= x1 ==> x3 >= x2;\nloop invariant c1 == unknown_bool() ==> (x1 == 0 || x2 == 0 || x3 == 0);\nloop invariant c2 == unknown_bool() ==> (x1 == 0 || x2 == 0 || x3 == 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  unsigned int x1=unknown_uint(), x2=unknown_uint(), x3=unknown_uint();\n  unsigned int d1=1, d2=1, d3=1;\n  _Bool c1=unknown_bool(), c2=unknown_bool();\n  \n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile(x1>0 && x2>0 && x3>0)\n  {\n    if (c1) x1=x1-d1;\n    else if (c2) x2=x2-d2;\n    else x3=x3-d3;\n    c1=unknown_bool();\n    c2=unknown_bool();\n  }\n\n  {;\n//@ assert(x1==0 || x2==0 || x3==0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant d1 >= 0;\nloop invariant d2 >= 0;\nloop invariant d3 >= 0;\nloop invariant x1 == 0 || x2 == 0 || x3 == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  unsigned int x1=unknown_uint(), x2=unknown_uint(), x3=unknown_uint();\n  unsigned int d1=1, d2=1, d3=1;\n  _Bool c1=unknown_bool(), c2=unknown_bool();\n  \n  /*@\nloop invariant i1: x1 >= 0;\nloop invariant i2: x2 >= 0;\nloop invariant i3: x3 >= 0;\nloop invariant i4: d1 >= 0;\nloop invariant i5: d2 >= 0;\nloop invariant i6: d3 >= 0;\n\n*/\nwhile(x1>0 && x2>0 && x3>0)\n  {\n    if (c1) x1=x1-d1;\n    else if (c2) x2=x2-d2;\n    else x3=x3-d3;\n    c1=unknown_bool();\n    c2=unknown_bool();\n  }\n\n  {;\n//@ assert(x1==0 || x2==0 || x3==0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 24: Assignment operators not allowed in annotations.",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  unsigned int x1=unknown_uint(), x2=unknown_uint(), x3=unknown_uint();\n  unsigned int d1=1, d2=1, d3=1;\n  _Bool c1=unknown_bool(), c2=unknown_bool();\n  \n  /*@\nloop invariant i1: 0 <= x1 <= x1;\nloop invariant i2: 0 <= x2 <= x2;\nloop invariant i3: 0 <= x3 <= x3;\nloop invariant i4: 0 <= d1 <= d1;\nloop invariant i5: 0 <= d2 <= d2;\nloop invariant i6: 0 <= d3 <= d3;\nloop invariant i7: c1 = c1;\nloop invariant i8: c2 = c2;\nloop invariant i9: x1 > 0;\nloop invariant i10: x2 > 0;\nloop invariant i11: x3 > 0;\nloop invariant i12: x1 >= x1;\nloop invariant i13: x2 >= x2;\nloop invariant i14: x3 >= x3;\nloop invariant i15: d1 >= 1;\nloop invariant i16: d2 >= 1;\nloop invariant i17: d3 >= 1;\nloop invariant i18: c1 ==> c1;\nloop invariant i19: c2 ==> c2;\nloop invariant i20: c1 == unknown_bool();\nloop invariant i21: c2 == unknown_bool();\nloop invariant i22: x1 == x1;\nloop invariant i23: x2 == x2;\nloop invariant i24: x3 == x3;\nloop invariant i25: d1 == 1;\nloop invariant i26: d2 == 1;\nloop invariant i27: d3 == 1;\nloop invariant i28: 0 <= x1;\nloop invariant i29: 0 <= x2;\nloop invariant i30: 0 <= x3;\nloop invariant i31: x1 + x2 + x3 <= x1 + x2 + x3;\nloop invariant i32: c1 || c2;\nloop invariant i33: x1 > 0 || x2 > 0 || x3 > 0;\nloop invariant i34: c1 || c2 ==> d1 == 1 || d2 == 1 || d3 == 1;\nloop invariant i35: c1 || c2 ==> x1 - d1 >= 0 || x2 - d2 >= 0 || x3 - d3 >= 0;\nloop invariant i36: x1 + x2 + x3 >= x1 + x2 + x3;\nloop invariant i37: x1 > 0 ==> x1 >= d1;\nloop invariant i38: x2 > 0 ==> x2 >= d2;\nloop invariant i39: x3 > 0 ==> x3 >= d3;\nloop invariant i40: x1 >= 0;\nloop invariant i41: x2 >= 0;\nloop invariant i42: x3 >= 0;\nloop invariant i43: x1 <= x1;\nloop invariant i44: x2 <= x2;\nloop invariant i45: x3 <= x3;\nloop invariant i46: x1 <= x1 + x2 + x3;\nloop invariant i47: x2 <= x1 + x2 + x3;\nloop invariant i48: x3 <= x1 + x2 + x3;\nloop invariant i49: 0 <= x1 <= 4294967295;\nloop invariant i50: 0 <= x2 <= 4294967295;\nloop invariant i51: 0 <= x3 <= 4294967295;\nloop invariant i52: 1 <= d1 <= 4294967295;\nloop invariant i53: 1 <= d2 <= 4294967295;\nloop invariant i54: 1 <= d3 <= 4294967295;\nloop invariant i55: c1 == 0 || c1 == 1;\nloop invariant i56: c2 == 0 || c2 == 1;\nloop invariant i57: x1 <= x1 + d1 ==> c1 == 1;\nloop invariant i58: x2 <= x2 + d2 ==> c2 == 1;\nloop invariant i59: x3 <= x3 + d3 ==> c1 == 0 && c2 == 0;\nloop invariant i60: x1 >= x1 - d1 ==> c1 == 0;\nloop invariant i61: x2 >= x2 - d2 ==> c2 == 0;\nloop invariant i62: x3 >= x3 - d3 ==> c1 == 1 || c2 == 1;\nloop invariant i63: x1 >= 0 && x2 >= 0 && x3 >= 0 ==> c1 == 1 || c2 == 1;\nloop invariant i64: x1 >= 0 && x2 >= 0 && x3 >= 0 ==> c1 == 0 && c2 == 0;\nloop invariant i65: x1 >= 0 && x2 >= 0 && x3 >= 0 ==> c1 == 1 && c2 == 0;\nloop invariant i66: x1 >= 0 && x2 >= 0 && x3 >= 0 ==> c1 == 0 && c2 == 1;\nloop invariant i67: x1 >= 0 && x2 >= 0 && x3 >= 0 ==> c1 == 1 && c2 == 1;\nloop invariant i68: x1 >= 0 && x2 >= 0 && x3 >= 0 ==> x1 >= 0 && x2 >= 0 && x3 >= 0;\nloop invariant i69: 0 <= x1 <= unknown_uint();\nloop invariant i70: 0 <= x2 <= unknown_uint();\nloop invariant i71: 0 <= x3 <= unknown_uint();\nloop invariant i72: 0 <= d1 <= unknown_uint();\nloop invariant i73: 0 <= d2 <= unknown_uint();\nloop invariant i74: 0 <= d3 <= unknown_uint();\nloop invariant i75: x1 >= 0 ==> x1 <= unknown_uint();\nloop invariant i76: x2 >= 0 ==> x2 <= unknown_uint();\nloop invariant i77: x3 >= 0 ==> x3 <= unknown_uint();\nloop invariant i78: d1 >= 0 ==> d1 <= unknown_uint();\nloop invariant i79: d2 >= 0 ==> d2 <= unknown_uint();\nloop invariant i80: d3 >= 0 ==> d3 <= unknown_uint();\nloop invariant i81: 1 <= x1 <= 4294967295;\nloop invariant i82: 1 <= x2 <= 4294967295;\nloop invariant i83: 1 <= x3 <= 4294967295;\nloop invariant i84: 0 <= x1 <= x2 <= x3;\nloop invariant i85: (x2 - x1) <= d1 + d2 + d3;\nloop invariant i86: c1 == (x1 > 0 && d1 > 0);\nloop invariant i87: c2 == (x2 > 0 && d2 > 0);\nloop invariant i88: x1 + x2 + x3 >= 0;\nloop invariant i89: x1 + x2 + x3 >= x1 - d1;\nloop invariant i90: x1 + x2 + x3 >= x2 - d2;\nloop invariant i91: x1 + x2 + x3 >= x3 - d3;\nloop invariant i92: x1 + x2 + x3 >= d1;\nloop invariant i93: x1 + x2 + x3 >= d2;\nloop invariant i94: x1 + x2 + x3 >= d3;\nloop invariant i95: d1 >= 0;\nloop invariant i96: d2 >= 0;\nloop invariant i97: d3 >= 0;\nloop invariant i98: 1 <= d1;\nloop invariant i99: 1 <= d2;\nloop invariant i100: 1 <= d3;\nloop invariant i101: (c1 ==> x1 >= d1);\nloop invariant i102: (c2 ==> x2 >= d2);\nloop invariant i103: (c1 ==> x2 >= 0);\nloop invariant i104: (c2 ==> x1 >= 0);\nloop invariant i105: (c1 ==> x3 >= 0);\nloop invariant i106: (c2 ==> x3 >= 0);\nloop invariant i107: (x1 == 0 ==> !c1);\nloop invariant i108: (x2 == 0 ==> !c2);\nloop invariant i109: (x3 == 0 ==> !c1 && !c2);\nloop invariant i110: (x1 == 0 ==> x2 >= 0);\nloop invariant i111: (x2 == 0 ==> x1 >= 0);\nloop invariant i112: (x1 == 0 ==> x3 >= 0);\nloop invariant i113: (x2 == 0 ==> x3 >= 0);\nloop invariant i114: (x3 == 0 ==> x1 >= 0);\nloop invariant i115: (x3 == 0 ==> x2 >= 0);\nloop invariant i116: (x1 == 0 ==> x1 == x2);\nloop invariant i117: (x2 == 0 ==> x2 == x1);\nloop invariant i118: (x3 == 0 ==> x1 == x3);\nloop invariant i119: (x3 == 0 ==> x2 == x3);\nloop invariant i120: (x1 == 0 ==> x1 == x2 && x1 == x3);\nloop invariant i121: (x2 == 0 ==> x2 == x1 && x2 == x3);\nloop invariant i122: (x3 == 0 ==> x3 == x1 && x3 == x2);\nloop invariant i123: (x1 == 0 ==> c1 == false && c2 == false);\nloop invariant i124: d1 > 0;\nloop invariant i125: d2 > 0;\nloop invariant i126: d3 > 0;\nloop invariant i127: 0 <= d1 <= 4294967295;\nloop invariant i128: 0 <= d2 <= 4294967295;\nloop invariant i129: 0 <= d3 <= 4294967295;\nloop invariant i130: 0 <= c1 <= 1;\nloop invariant i131: 0 <= c2 <= 1;\nloop invariant i132: x1 >= x2;\nloop invariant i133: x2 >= x3;\nloop invariant i134: x1 >= x3;\nloop invariant i135: x1 >= x2 - d1;\nloop invariant i136: x2 >= x3 - d2;\nloop invariant i137: x3 >= x1 - d3;\nloop invariant i138: x1 >= x2 - d1 * (1 + 0) / 2;\nloop invariant i139: x2 >= x3 - d2 * (1 + 0) / 2;\nloop invariant i140: x3 >= x1 - d3 * (1 + 0) / 2;\nloop invariant i141: x1 >= x2 - d1 * (1 + 1) / 2;\nloop invariant i142: x2 >= x3 - d2 * (1 + 1) / 2;\nloop invariant i143: x3 >= x1 - d3 * (1 + 1) / 2;\nloop invariant i144: x1 >= x2 - d1 * (1 + 2) / 2;\nloop invariant i145: x2 >= x3 - d2 * (1 + 2) / 2;\nloop invariant i146: x3 >= x1 - d3 * (1 + 2) / 2;\nloop invariant i147: x1 >= x2 - d1 * (1 + 3) / 2;\nloop invariant i148: x2 >= x3 - d2 * (1 + 3) / 2;\nloop invariant i149: x3 >= x1 - d3 * (1 + 3) / 2;\nloop invariant i150: x1 >= x2 - d1 * (1 + 4) / 2;\nloop invariant i151: x2 >= x3 - d2 * (1 + 4) / 2;\nloop invariant i152: x3 >= x1 - d3 * (1 + 4) / 2;\nloop invariant i153: x1 >= x2 - d1 * (1 + 5) / 2;\nloop invariant i154: x2 >= x3 - d2 * (1 + 5) / 2;\nloop invariant i155: x3 >= x1 - d3 * (1 + 5) / 2;\nloop invariant i156: x1 >= x2 - d1 * (1 + 6) / 2;\nloop invariant i157: x2 >= x3 - d2 * (1 + 6) / 2;\nloop invariant i158: x3 >= x1 - d3 * (1 + 6) / 2;\nloop invariant i159: x1 >= x2 - d1 * (1 + 7) / 2;\nloop invariant i160: x2 >= x3 - d2 * (1 + 7) / 2;\nloop invariant i161: x3 >= x1 - d3 * (1 + 7) / 2;\nloop invariant i162: x1 >= x2 - d1 * (1 + 8) / 2;\nloop invariant i163: x2 >= x3 - d2 * (1 + 8) / 2;\nloop invariant i164: x3 >= x1 - d3 * (1 + 8) / 2;\nloop invariant i165: x1 >= x2 - d1 * (1 + 9) / 2;\nloop invariant i166: x2 >= x3 - d2 * (1 + 9) / 2;\nloop invariant i167: x3 >= x1 - d3 * (1 + 9) / 2;\nloop invariant i168: x1 >= x2 - d1 * (1 + 10) / 2;\nloop invariant i169: x2 >= x3 - d2 * (1 + 10) / 2;\nloop invariant i170: x3 >= x1 - d3 * (1 + 10) / 2;\nloop invariant i171: x1 >= x2 - d1 * (1 + 11) / 2;\nloop invariant i172: x2 >= x3 - d2 * (1 + 11) / 2;\nloop invariant i173: x3 >= x1 - d3 * (1 + 11) / 2;\nloop invariant i174: x1 >= x2 - d1 * (1 + 12) / 2;\nloop invariant i175: x1 >= 0 && x2 >= 0 && x3 >= 0;\nloop invariant i176: x1 <= x2 && x1 <= x3 && x2 <= x3;\nloop invariant i177: (if (x1 > 0) then x1 >= d1 else x1 == 0);\nloop invariant i178: (if (x2 > 0) then x2 >= d2 else x2 == 0);\nloop invariant i179: (if (x3 > 0) then x3 >= d3 else x3 == 0);\nloop invariant i180: (if (x1 > 0) then x1 == x2 - d2 * (x2 - x1) / (x2 - d2) else x1 == 0);\nloop invariant i181: (if (x2 > 0) then x2 == x3 - d3 * (x3 - x2) / (x3 - d3) else x2 == 0);\nloop invariant i182: (if (x3 > 0) then x3 == x3 else x3 == 0);\nloop invariant i183: (if (x1 > 0) then x1 == x3 - d3 * (x3 - x1) / (x3 - d3) else x1 == 0);\nloop invariant i184: x1 >= x2 ==> x1 >= x3;\nloop invariant i185: x2 >= x3 ==> x2 >= x1;\nloop invariant i186: x3 >= x1 ==> x3 >= x2;\nloop invariant i187: c1 == unknown_bool() ==> (x1 == 0 || x2 == 0 || x3 == 0);\nloop invariant i188: c2 == unknown_bool() ==> (x1 == 0 || x2 == 0 || x3 == 0);\nloop invariant i189: x1 == 0 || x2 == 0 || x3 == 0;\n*/\nwhile(x1>0 && x2>0 && x3>0)\n  {\n    if (c1) x1=x1-d1;\n    else if (c2) x2=x2-d2;\n    else x3=x3-d3;\n    c1=unknown_bool();\n    c2=unknown_bool();\n  }\n\n  {;\n//@ assert(x1==0 || x2==0 || x3==0);\n}\n\n  return 0;\n}",
        "combined_annotation_num_solver_calls": 45,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  unsigned int x1=unknown_uint(), x2=unknown_uint(), x3=unknown_uint();\n  unsigned int d1=1, d2=1, d3=1;\n  _Bool c1=unknown_bool(), c2=unknown_bool();\n  \n  /*@\nloop invariant i1: 0 <= x1 <= x1;\nloop invariant i2: 0 <= x2 <= x2;\nloop invariant i3: 0 <= x3 <= x3;\nloop invariant i4: 0 <= d1 <= d1;\nloop invariant i5: 0 <= d2 <= d2;\nloop invariant i6: 0 <= d3 <= d3;\n\n\n\n\n\nloop invariant i12: x1 >= x1;\nloop invariant i13: x2 >= x2;\nloop invariant i14: x3 >= x3;\nloop invariant i15: d1 >= 1;\nloop invariant i16: d2 >= 1;\nloop invariant i17: d3 >= 1;\nloop invariant i18: c1 ==> c1;\nloop invariant i19: c2 ==> c2;\n\n\nloop invariant i22: x1 == x1;\nloop invariant i23: x2 == x2;\nloop invariant i24: x3 == x3;\nloop invariant i25: d1 == 1;\nloop invariant i26: d2 == 1;\nloop invariant i27: d3 == 1;\nloop invariant i28: 0 <= x1;\nloop invariant i29: 0 <= x2;\nloop invariant i30: 0 <= x3;\nloop invariant i31: x1 + x2 + x3 <= x1 + x2 + x3;\n\n\nloop invariant i34: c1 || c2 ==> d1 == 1 || d2 == 1 || d3 == 1;\n\nloop invariant i36: x1 + x2 + x3 >= x1 + x2 + x3;\nloop invariant i37: x1 > 0 ==> x1 >= d1;\nloop invariant i38: x2 > 0 ==> x2 >= d2;\nloop invariant i39: x3 > 0 ==> x3 >= d3;\nloop invariant i40: x1 >= 0;\nloop invariant i41: x2 >= 0;\nloop invariant i42: x3 >= 0;\nloop invariant i43: x1 <= x1;\nloop invariant i44: x2 <= x2;\nloop invariant i45: x3 <= x3;\nloop invariant i46: x1 <= x1 + x2 + x3;\nloop invariant i47: x2 <= x1 + x2 + x3;\nloop invariant i48: x3 <= x1 + x2 + x3;\nloop invariant i49: 0 <= x1 <= 4294967295;\nloop invariant i50: 0 <= x2 <= 4294967295;\nloop invariant i51: 0 <= x3 <= 4294967295;\nloop invariant i52: 1 <= d1 <= 4294967295;\nloop invariant i53: 1 <= d2 <= 4294967295;\nloop invariant i54: 1 <= d3 <= 4294967295;\nloop invariant i55: c1 == 0 || c1 == 1;\nloop invariant i56: c2 == 0 || c2 == 1;\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i68: x1 >= 0 && x2 >= 0 && x3 >= 0 ==> x1 >= 0 && x2 >= 0 && x3 >= 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i88: x1 + x2 + x3 >= 0;\nloop invariant i89: x1 + x2 + x3 >= x1 - d1;\nloop invariant i90: x1 + x2 + x3 >= x2 - d2;\nloop invariant i91: x1 + x2 + x3 >= x3 - d3;\n\n\n\nloop invariant i95: d1 >= 0;\nloop invariant i96: d2 >= 0;\nloop invariant i97: d3 >= 0;\nloop invariant i98: 1 <= d1;\nloop invariant i99: 1 <= d2;\nloop invariant i100: 1 <= d3;\n\n\nloop invariant i103: (c1 ==> x2 >= 0);\nloop invariant i104: (c2 ==> x1 >= 0);\nloop invariant i105: (c1 ==> x3 >= 0);\nloop invariant i106: (c2 ==> x3 >= 0);\n\n\n\nloop invariant i110: (x1 == 0 ==> x2 >= 0);\nloop invariant i111: (x2 == 0 ==> x1 >= 0);\nloop invariant i112: (x1 == 0 ==> x3 >= 0);\nloop invariant i113: (x2 == 0 ==> x3 >= 0);\nloop invariant i114: (x3 == 0 ==> x1 >= 0);\nloop invariant i115: (x3 == 0 ==> x2 >= 0);\n\n\n\n\n\n\n\n\nloop invariant i124: d1 > 0;\nloop invariant i125: d2 > 0;\nloop invariant i126: d3 > 0;\nloop invariant i127: 0 <= d1 <= 4294967295;\nloop invariant i128: 0 <= d2 <= 4294967295;\nloop invariant i129: 0 <= d3 <= 4294967295;\nloop invariant i130: 0 <= c1 <= 1;\nloop invariant i131: 0 <= c2 <= 1;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i175: x1 >= 0 && x2 >= 0 && x3 >= 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile(x1>0 && x2>0 && x3>0)\n  {\n    if (c1) x1=x1-d1;\n    else if (c2) x2=x2-d2;\n    else x3=x3-d3;\n    c1=unknown_bool();\n    c2=unknown_bool();\n  }\n\n  {;\n//@ assert(x1==0 || x2==0 || x3==0);\n}\n\n  return 0;\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/split.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c"
        ],
        "skipped": [],
        "total": 95,
        "success_count": 81,
        "failure_count": 14,
        "success_rate": 0.8526315789473684
    }
}