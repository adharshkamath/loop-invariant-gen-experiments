{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int lo, mid, hi;\n    lo = 0;\n    mid = unknown_int();\n    if (!(mid > 0 && mid <= LARGE_INT)) return 0;\n    hi = 2*mid;\n    \n    while (mid > 0) {\n        lo = lo + 1;\n        hi = hi - 1;\n        mid = mid - 1;\n    }\n    {;\n//@ assert(lo == hi);\n}\n\n    return 0;\n}",
        "success": false,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= mid <= LARGE_INT;\nloop invariant 0 <= lo <= hi;\nloop invariant mid == 0;\nloop invariant lo + mid == hi;\nloop invariant lo + mid + 1 == hi;\nloop invariant lo + mid + 2 == hi;\nloop invariant lo + mid + 3 == hi;\nloop invariant lo + mid + 4 == hi;\nloop invariant lo + mid + 5 == hi;\nloop invariant lo + mid + 6 == hi;\nloop invariant lo + mid + 7 == hi;\nloop invariant lo + mid + 8 == hi;\nloop invariant lo + mid + 9 == hi;\nloop invariant lo + mid + 10 == hi;\nloop invariant lo + mid + 11 == hi;\nloop invariant lo + mid + 12 == hi;\nloop invariant lo + mid + 13 == hi;\nloop invariant lo + mid + 14 == hi;\nloop invariant lo + mid + 15 == hi;\nloop invariant lo + mid + 16 == hi;\nloop invariant lo + mid + 17 == hi;\nloop invariant lo + mid + 18 == hi;\nloop invariant lo + mid + 19 == hi;\nloop invariant lo + mid + 20 == hi;\nloop invariant lo + mid + 21 == hi;\nloop invariant lo + mid + 22 == hi;\nloop invariant lo + mid + 23 == hi;\nloop invariant lo + mid + 24 == hi;\nloop invariant lo + mid + 25 == hi;\nloop invariant lo + mid + 26 == hi;\nloop invariant lo + mid + 27 == hi;\nloop invariant lo + mid + 28 == hi;\nloop invariant lo + mid + 29 == hi;\nloop invariant lo + mid + 30 == hi;\nloop invariant lo + mid + 31 == hi;\nloop invariant lo + mid + 32 == hi;\nloop invariant lo + mid + 33 == hi;\nloop invariant lo + mid + 34 == hi;\nloop invariant lo + mid + 35 == hi;\nloop invariant lo + mid + 36 == hi;\nloop invariant lo + mid + 37 == hi;\nloop invariant lo + mid + 38 == hi;\nloop invariant lo + mid + 39 == hi;\nloop invariant lo + mid + 40 == hi;\nloop invariant lo + mid + 41 == hi;\nloop invariant lo + mid + 42 == hi;\nloop invariant lo + mid + 43 == hi;\nloop invariant lo + mid + 44 == hi;\nloop invariant lo + mid + 45 == hi;\nloop invariant lo + mid + 46 == hi;\nloop invariant lo + mid + 47 == hi;\nloop invariant lo + mid + 48 == hi;\nloop invariant lo + mid + 49 == hi;\nloop invariant lo + mid + 50 == hi;\nloop invariant lo + mid + 51 == hi;\nloop invariant lo + mid + 52 == hi;\nloop invariant lo + mid + 53 == hi;\nloop invariant lo + mid + 54 == hi;\nloop invariant lo + mid + 55 == hi;\nloop invariant lo + mid + 56 == hi;\nloop invariant lo + mid + 57 == hi;\nloop invariant lo + mid + 58 == hi;\nloop invariant lo + mid + 59 == hi;\nloop invariant lo + mid + 60 == hi;\nloop invariant lo + mid + 61 == hi;\nloop invariant lo + mid + 62 == hi;\nloop invariant lo + mid + 63 == hi;\nloop invariant lo + mid + 64 == hi;\nloop invariant lo + mid + 65 == hi;\nloop invariant lo + mid + 66 == hi;\nloop invariant lo + mid + 67 == hi;\nloop invariant lo + mid + 68 == hi;\nloop invariant lo + mid + 69 == hi;\nloop invariant lo + mid + 70 == hi;\nloop invariant lo + mid + 71 == hi;\nloop invariant lo + mid + 72 == hi;\nloop invariant lo + mid + 73 == hi;\nloop invariant lo + mid + 74 == hi;\nloop invariant lo + mid + 75 == hi;\nloop invariant lo + mid + 76 == hi;\nloop invariant lo + mid + 77 == hi;\nloop invariant lo + mid + 78 == hi;\nloop invariant lo + mid + 79 == hi;\nloop invariant lo + mid + 80 == hi;\nloop invariant lo + mid + 81 == hi;\n*/\n```",
            "```\n/*@\nloop invariant lo <= lo + 1;\nloop invariant hi >= hi - 1;\nloop invariant mid >= mid - 1;\nloop invariant lo == hi ==> mid <= 0;\n*/\n```",
            "```\n/*@\nloop invariant lo <= hi;\nloop invariant mid == 0;\nloop invariant lo >= 0;\nloop invariant lo <= LARGE_INT;\nloop invariant hi >= 0;\nloop invariant hi <= LARGE_INT;\nloop invariant lo == hi ==> mid == 0;\nloop invariant lo == hi ==> lo == mid;\nloop invariant lo == hi ==> hi == mid;\nloop invariant lo == hi ==> lo == hi - mid;\nloop invariant lo == hi ==> hi == lo + mid;\nloop invariant lo == hi ==> lo == mid + hi - mid;\nloop invariant lo == hi ==> hi == mid + lo - mid;\nloop invariant lo == hi ==> lo == (LARGE_INT - (LARGE_INT - hi));\nloop invariant lo == hi ==> hi == (LARGE_INT - (LARGE_INT - lo));\nloop invariant lo == hi ==> lo == (LARGE_INT - (LARGE_INT - lo) + mid - mid);\nloop invariant lo == hi ==> hi == (LARGE_INT - (LARGE_INT - hi) + mid - mid);\nloop invariant lo == hi ==> lo == (LARGE_INT - (LARGE_INT - lo) + (LARGE_INT - hi));\nloop invariant lo == hi ==> hi == (LARGE_INT - (LARGE_INT - hi) + (LARGE_INT - lo));\nloop invariant lo == hi ==> lo == (LARGE_INT - (LARGE_INT - lo) + (LARGE_INT - (LARGE_INT - hi)));\nloop invariant lo == hi ==> hi == (LARGE_INT - (LARGE_INT - hi) + (LARGE_INT - (LARGE_INT - lo)));\nloop invariant lo == hi ==> lo == (LARGE_INT - (LARGE_INT - lo) + (LARGE_INT - (LARGE_INT - lo) + mid - mid));\nloop invariant lo == hi ==> hi == (LARGE_INT - (LARGE_INT - hi) + (LARGE_INT - (LARGE_INT - hi) + mid - mid));\nloop invariant lo == hi ==> lo == (LARGE_INT - (LARGE_INT - lo) + (LARGE_INT - (LARGE_INT - hi) + mid - mid));\nloop invariant lo == hi ==> hi == (LARGE_INT - (LARGE_INT - hi) + (LARGE_INT - (LARGE_INT - lo) + mid - mid));\nloop invariant lo == hi ==> lo == (LARGE_INT - (LARGE_INT - lo) + (LARGE_INT - (LARGE_INT - hi) + mid - mid));\nloop invariant lo == hi ==> lo == (LARGE_INT - (LARGE_INT - lo) + (LARGE_INT - (LARGE_INT - lo)));\nloop invariant lo == hi ==> hi == (LARGE_INT - (LARGE_INT - hi) + (LARGE_INT - (LARGE_INT - hi)));\nloop invariant lo == hi ==> lo == (LARGE_INT - (LARGE_INT - lo) + (LARGE_INT - (LARGE_INT - lo)));\nloop invariant lo == hi ==> hi == (LARGE_INT - (LARGE_INT - hi) + (LARGE_INT - (LARGE_INT - hi)));\nloop invariant lo == hi ==> lo == (LARGE_INT - (LARGE_INT - lo) + (LARGE_INT - (LARGE_INT - lo)));\nloop invariant lo == hi ==> lo == (LARGE_INT - (LARGE_INT - lo) + (LARGE_INT - (LARGE_INT - lo)));\nloop invariant lo == hi ==> lo == (LARGE_INT - (LARGE_INT - lo) + (LARGE_INT - (LARGE_INT - lo)));\nloop invariant lo == hi ==> hi == (LARGE_INT - (LARGE_INT - hi) + (LARGE_INT - (LARGE_INT - hi)));\nloop invariant lo == hi ==> lo == (LARGE_INT - (LARGE_INT - lo) + (LARGE_INT - (LARGE_INT - lo)));\nloop invariant lo == hi ==> lo == (LARGE_INT - (LARGE_INT - lo) + (LARGE_INT - (LARGE_INT - lo)));\nloop invariant lo == hi ==> lo == (LARGE_INT - (LARGE_INT - lo) + (LARGE_INT - (LARGE_INT - lo)));\nloop invariant lo == hi ==> lo == (LARGE_INT - (LARGE_INT - lo) + (LARGE_INT - (LARGE_INT - lo)));\nloop invariant lo == hi ==> lo == (LARGE_INT - (LARGE_INT - lo) + (LARGE_INT - (LARGE_INT - lo)));\nloop invariant lo == hi ==> lo == (LARGE_INT - (LARGE_INT - lo) + (LARGE_INT - (LARGE_INT - lo)));\n*/\n```",
            "```\n/*@\nloop invariant 0 <= mid <= LARGE_INT;\nloop invariant lo == hi ==> lo == mid;\nloop invariant lo == hi ==> hi == mid;\nloop invariant lo == mid ==> lo == hi;\nloop invariant hi == mid ==> lo == hi;\nloop invariant lo == hi ==> lo == mid;\nloop invariant hi == mid ==> lo == hi;\nloop invariant lo == mid;\nloop invariant hi == mid;\nloop invariant lo + mid == hi;\nloop invariant hi + mid == lo;\nloop invariant lo == hi == mid;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= lo <= hi;\nloop invariant mid <= 0;\nloop invariant mid <= hi;\nloop invariant mid <= LARGE_INT;\nloop invariant mid > 0;\nloop invariant lo >= mid;\nloop invariant hi <= 2*mid;\nloop invariant hi >= mid;\nloop invariant lo <= hi;\nloop invariant lo + mid + hi <= 2*mid;\nloop invariant lo + mid + hi >= mid;\nloop invariant lo + mid + hi >= lo;\nloop invariant lo + mid + hi >= hi;\nloop invariant lo + mid + hi <= 2*mid;\nloop invariant lo + mid + hi >= 0;\nloop invariant lo + mid + hi <= LARGE_INT;\nloop invariant lo + mid + hi >= 0;\nloop invariant lo + mid + hi <= LARGE_INT;\nloop invariant lo + mid + hi >= 0;\nloop invariant lo + mid + hi <= LARGE_INT;\nloop invariant lo + mid + hi >= 0;\nloop invariant lo + mid + hi <= LARGE_INT;\nloop invariant lo + mid + hi >= 0;\nloop invariant lo + mid + hi <= LARGE_INT;\nloop invariant lo + mid + hi >= 0;\nloop invariant lo + mid + hi <= LARGE_INT;\nloop invariant lo + mid + hi >= 0;\nloop invariant lo + mid + hi <= LARGE_INT;\nloop invariant lo + mid + hi >= 0;\nloop invariant lo + mid + hi <= LARGE_INT;\nloop invariant lo + mid + hi >= 0;\nloop invariant lo + mid + hi <= LARGE_INT;\nloop invariant lo + mid + hi >= 0;\nloop invariant lo + mid + hi <= LARGE_INT;\nloop invariant lo + mid + hi >= 0;\nloop invariant lo + mid + hi <= LARGE_INT;\nloop invariant lo + mid + hi >= 0;\nloop invariant lo + mid + hi <= LARGE_INT;\nloop invariant lo + mid + hi >= 0;\nloop invariant lo + mid + hi <= LARGE_INT;\nloop invariant lo + mid + hi >= 0;\nloop invariant lo + mid + hi <= LARGE_INT;\nloop invariant lo + mid + hi >= 0;\nloop invariant lo + mid + hi <= LARGE_INT;\nloop invariant lo + mid + hi >= 0;\nloop invariant lo + mid + hi <= LARGE_INT;\nloop invariant lo + mid + hi >= 0;\nloop invariant lo + mid + hi <= LARGE_INT;\nloop invariant lo + mid + hi >= 0;\nloop invariant lo + mid + hi <= LARGE_INT;\nloop invariant lo + mid + hi >= 0;\nloop invariant lo + mid + hi <= LARGE_INT;\nloop invariant lo + mid + hi >= 0;\nloop invariant lo + mid + hi <= LARGE_INT;\nloop invariant lo + mid + hi >= 0;\nloop invariant lo + mid + hi <= LARGE_INT;\nloop invariant lo + mid + hi >= 0;\nloop invariant lo + mid + hi <= LARGE_INT;\nloop invariant lo + mid + hi >= 0;\nloop invariant lo + mid + hi <= LARGE_INT;\nloop invariant lo + mid + hi >= 0;\nloop invariant lo + mid + hi <= LARGE_INT;\nloop invariant lo + mid + hi >= 0;\nloop invariant lo + mid + hi <= LARGE_INT;\nloop invariant lo + mid + hi >= 0;\nloop invariant lo + mid + hi <= LARGE_INT;\nloop invariant lo + mid + hi >= 0;\nloop invariant lo + mid + hi <= LARGE_INT;\nloop invariant lo + mid + hi >= 0;\nloop invariant lo + mid + hi <= LARGE_INT;\nloop invariant lo + mid + hi >= 0;\nloop invariant lo + mid + hi <= LARGE_INT;\nloop invariant lo + mid + hi >= 0;\nloop invariant lo + mid + hi <= LARGE_INT;\nloop invariant lo + mid + hi >= 0;\nloop invariant lo + mid + hi <= LARGE_INT;\nloop invariant lo + mid + hi >= 0;\nloop invariant lo + mid + hi <= LARGE_INT;\nloop invariant lo + mid + hi >= 0;\nloop invariant lo + mid + hi <= LARGE_INT;\nloop invariant lo + mid + hi >= 0;\nloop invariant lo + mid + hi <= LARGE_INT;\nloop invariant lo + mid + hi >= 0;\nloop invariant lo + mid + hi <= LARGE_INT;\nloop invariant lo + mid + hi >= 0;\nloop invariant lo + mid + hi <= LARGE_INT;\nloop invariant lo + mid + hi >= 0;\nloop invariant lo + mid + hi <= LARGE_INT;\nloop invariant lo + mid + hi >= 0;\nloop invariant lo + mid + hi <= LARGE_INT;\nloop invariant lo + mid + hi >= 0;\nloop invariant lo + mid + hi <= LARGE_INT;\nloop invariant lo + mid + hi >= 0;\nloop invariant lo + mid + hi <= LARGE_INT;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= lo <= hi;\nloop invariant lo <= hi;\nloop invariant lo <= mid;\nloop invariant hi >= lo;\nloop invariant hi >= mid;\nloop invariant lo <= LARGE_INT;\nloop invariant hi <= 2*LARGE_INT;\nloop invariant mid <= 2*LARGE_INT;\nloop invariant mid >= 0;\nloop invariant mid == hi - lo;\nloop invariant mid == 2*LARGE_INT - hi;\nloop invariant mid == hi - lo ==> lo == hi;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= lo <= hi <= mid <= LARGE_INT;\nloop invariant mid >= 0;\nloop invariant lo <= hi;\nloop invariant lo + hi == mid * 2;\nloop invariant lo = mid + 1;\nloop invariant lo = hi + 1;\nloop invariant mid = lo + hi / 2;\nloop invariant mid = hi + lo / 2;\nloop invariant mid = hi + lo / 2;\nloop invariant mid = lo + hi / 2;\nloop invariant lo = hi + (mid - 1) / 2;\nloop invariant lo = hi + (mid - 1) / 2;\nloop invariant mid = hi + lo / 2;\nloop invariant mid = lo + hi / 2;\nloop invariant lo = hi + 1;\nloop invariant lo = mid + 1;\nloop invariant lo = mid + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= lo <= mid <= hi <= 2 * mid;\nloop invariant hi - lo == mid;\nloop invariant mid > 0;\nloop invariant lo <= hi;\nloop invariant lo >= 0;\nloop invariant hi <= 2 * mid;\nloop invariant mid <= LARGE_INT;\nloop invariant lo <= mid;\nloop invariant hi >= mid;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= lo <= 2*mid;\nloop invariant 0 <= mid <= LARGE_INT;\nloop invariant 2*mid <= hi <= 2*mid;\nloop invariant lo <= hi;\nloop invariant (mid == 0) ==> lo == hi;\nloop invariant (mid == 0) ==> mid == 0;\nloop invariant (mid == 0) ==> lo == hi;\nloop invariant lo == mid;\nloop invariant hi == 2*mid;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> mid == 0;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= lo <= hi;\nloop invariant 0 <= mid <= LARGE_INT;\nloop invariant lo + mid == hi;\nloop invariant mid - 1 <= mid <= mid + 1;\nloop invariant hi - 1 <= hi <= hi + 1;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant mid <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= lo <= LARGE_INT;\nloop invariant 0 <= mid <= LARGE_INT;\nloop invariant LARGE_INT <= hi <= 2 * LARGE_INT;\nloop invariant (mid <= LARGE_INT) ==> (lo + mid == hi);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= lo <= hi <= 2*mid;\nloop invariant lo + mid = hi;\nloop invariant lo >= 0;\nloop invariant hi <= 2*mid;\nloop invariant mid <= hi;\nloop invariant mid >= 0;\nloop invariant lo <= mid;\nloop invariant hi >= mid;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= lo <= mid;\nloop invariant 0 <= hi <= 2*mid;\nloop invariant lo + mid == hi;\nloop invariant lo + hi == 2*mid;\nloop invariant lo >= 0;\nloop invariant mid >= 0;\nloop invariant hi >= 0;\nloop invariant lo <= mid;\nloop invariant lo <= hi;\nloop invariant hi <= 2*mid;\n*/\n```",
            "```\n/*@\nloop invariant lo >= 0;\nloop invariant mid >= 0;\nloop invariant hi >= 0;\nloop invariant lo <= hi;\nloop invariant lo <= mid;\nloop invariant mid <= hi;\nloop invariant lo <= 2*mid;\nloop invariant mid <= hi;\nloop invariant lo <= hi;\nloop invariant lo <= 2*mid;\nloop invariant mid <= hi;\nloop invariant lo <= 2*mid;\nloop invariant mid <= hi;\nloop invariant lo <= 2*mid;\nloop invariant mid <= hi;\nloop invariant lo <= 2*mid;\nloop invariant mid <= hi;\nloop invariant lo <= 2*mid;\nloop invariant mid <= hi;\nloop invariant lo <= 2*mid;\nloop invariant mid <= hi;\nloop invariant lo <= 2*mid;\nloop invariant mid <= hi;\nloop invariant lo <= 2*mid;\nloop invariant mid <= hi;\nloop invariant lo <= 2*mid;\nloop invariant mid <= hi;\nloop invariant lo <= 2*mid;\nloop invariant mid <= hi;\nloop invariant lo <= 2*mid;\nloop invariant mid <= hi;\nloop invariant lo <= 2*mid;\nloop invariant mid <= hi;\nloop invariant lo <= 2*mid;\nloop invariant mid <= hi;\nloop invariant lo <= 2*mid;\nloop invariant mid <= hi;\nloop invariant lo <= 2*mid;\nloop invariant mid <= hi;\nloop invariant lo <= 2*mid;\nloop invariant mid <= hi;\nloop invariant lo <= 2*mid;\nloop invariant mid <= hi;\nloop invariant lo <= 2*mid;\nloop invariant mid <= hi;\nloop invariant lo <= 2*mid;\nloop invariant mid <= hi;\nloop invariant lo <= 2*mid;\nloop invariant mid <= hi;\nloop invariant lo <= 2*mid;\nloop invariant mid <= hi;\nloop invariant lo <= 2*mid;\nloop invariant mid <= hi;\nloop invariant lo <= 2*mid;\nloop invariant mid <= hi;\nloop invariant lo <= 2*mid;\nloop invariant mid <= hi;\nloop invariant lo <= 2*mid;\nloop invariant mid <= hi;\nloop invariant lo <= 2*mid;\nloop invariant mid <= hi;\nloop invariant lo <= 2*mid;\nloop invariant mid <= hi;\nloop invariant lo <= 2*mid;\nloop invariant mid <= hi;\nloop invariant lo <= 2*mid;\nloop invariant mid <= hi;\nloop invariant lo <= 2*mid;\nloop invariant mid <= hi;\nloop invariant lo <= 2*mid;\nloop invariant mid <= hi;\nloop invariant lo <= 2*mid;\nloop invariant mid <= hi;\nloop invariant lo <= 2*mid;\nloop invariant mid <= hi;\nloop invariant lo <= 2*mid;\nloop invariant mid <= hi;\nloop invariant lo <= 2*mid;\nloop invariant mid <= hi;\nloop invariant lo <= 2*mid;\nloop invariant mid <= hi;\nloop invariant lo <= 2*mid;\nloop invariant mid <= hi;\nloop invariant lo <= 2*mid;\nloop invariant mid <= hi;\nloop invariant lo <= 2*mid;\nloop invariant mid <= hi;\nloop invariant lo <= 2*mid;\nloop invariant mid <= hi;\nloop invariant lo <= 2*mid;\nloop invariant mid <= hi;\nloop invariant lo <= 2*mid;\nloop invariant mid <= hi;\nloop invariant lo <= 2*mid;\nloop invariant mid <= hi;\nloop invariant lo <= 2*mid;\nloop invariant mid <= hi;\nloop invariant lo <= 2*mid;\nloop invariant mid <= hi;\nloop invariant lo <= 2*mid;\nloop invariant mid <= hi;\nloop invariant lo <= 2*mid;\nloop invariant mid <= hi;\nloop invariant lo <= 2*mid;\nloop invariant mid <= hi;\nloop invariant lo <= 2*mid;\nloop invariant mid <= hi;\nloop invariant lo <= 2*mid;\nloop invariant mid <= hi;\nloop invariant lo <= 2*mid;\nloop invariant mid <= hi;\nloop invariant lo <= 2*mid;\nloop invariant mid <= hi;\nloop invariant lo <= 2*mid;\nloop invariant mid <= hi;\nloop invariant lo <= 2*mid;\nloop invariant mid <= hi;\nloop invariant lo <= 2*mid;\nloop invariant mid <= hi;\nloop invariant lo <= 2*mid;\nloop invariant mid <= hi;\nloop invariant lo <= 2*mid;\nloop invariant mid <= hi;\nloop invariant lo <= 2*mid;\nloop invariant mid <= hi;\nloop invariant lo <= 2*mid;\nloop invariant mid <= hi;\nloop invariant lo <= 2*mid;\nloop invariant mid <= hi;\nloop invariant lo <= 2*mid;\nloop invariant mid <= hi;\nloop invariant lo <= 2*mid;\nloop invariant mid <= hi;\nloop invariant lo <= 2*mid;\n*/\n```",
            "```\n/*@\n\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 45,
                "annotations": "```\n/*@\nloop invariant 0 <= mid <= LARGE_INT;\nloop invariant 0 <= lo <= hi;\nloop invariant mid == 0;\nloop invariant lo + mid == hi;\nloop invariant lo + mid + 1 == hi;\nloop invariant lo + mid + 2 == hi;\nloop invariant lo + mid + 3 == hi;\nloop invariant lo + mid + 4 == hi;\nloop invariant lo + mid + 5 == hi;\nloop invariant lo + mid + 6 == hi;\nloop invariant lo + mid + 7 == hi;\nloop invariant lo + mid + 8 == hi;\nloop invariant lo + mid + 9 == hi;\nloop invariant lo + mid + 10 == hi;\nloop invariant lo + mid + 11 == hi;\nloop invariant lo + mid + 12 == hi;\nloop invariant lo + mid + 13 == hi;\nloop invariant lo + mid + 14 == hi;\nloop invariant lo + mid + 15 == hi;\nloop invariant lo + mid + 16 == hi;\nloop invariant lo + mid + 17 == hi;\nloop invariant lo + mid + 18 == hi;\nloop invariant lo + mid + 19 == hi;\nloop invariant lo + mid + 20 == hi;\nloop invariant lo + mid + 21 == hi;\nloop invariant lo + mid + 22 == hi;\nloop invariant lo + mid + 23 == hi;\nloop invariant lo + mid + 24 == hi;\nloop invariant lo + mid + 25 == hi;\nloop invariant lo + mid + 26 == hi;\nloop invariant lo + mid + 27 == hi;\nloop invariant lo + mid + 28 == hi;\nloop invariant lo + mid + 29 == hi;\nloop invariant lo + mid + 30 == hi;\nloop invariant lo + mid + 31 == hi;\nloop invariant lo + mid + 32 == hi;\nloop invariant lo + mid + 33 == hi;\nloop invariant lo + mid + 34 == hi;\nloop invariant lo + mid + 35 == hi;\nloop invariant lo + mid + 36 == hi;\nloop invariant lo + mid + 37 == hi;\nloop invariant lo + mid + 38 == hi;\nloop invariant lo + mid + 39 == hi;\nloop invariant lo + mid + 40 == hi;\nloop invariant lo + mid + 41 == hi;\nloop invariant lo + mid + 42 == hi;\nloop invariant lo + mid + 43 == hi;\nloop invariant lo + mid + 44 == hi;\nloop invariant lo + mid + 45 == hi;\nloop invariant lo + mid + 46 == hi;\nloop invariant lo + mid + 47 == hi;\nloop invariant lo + mid + 48 == hi;\nloop invariant lo + mid + 49 == hi;\nloop invariant lo + mid + 50 == hi;\nloop invariant lo + mid + 51 == hi;\nloop invariant lo + mid + 52 == hi;\nloop invariant lo + mid + 53 == hi;\nloop invariant lo + mid + 54 == hi;\nloop invariant lo + mid + 55 == hi;\nloop invariant lo + mid + 56 == hi;\nloop invariant lo + mid + 57 == hi;\nloop invariant lo + mid + 58 == hi;\nloop invariant lo + mid + 59 == hi;\nloop invariant lo + mid + 60 == hi;\nloop invariant lo + mid + 61 == hi;\nloop invariant lo + mid + 62 == hi;\nloop invariant lo + mid + 63 == hi;\nloop invariant lo + mid + 64 == hi;\nloop invariant lo + mid + 65 == hi;\nloop invariant lo + mid + 66 == hi;\nloop invariant lo + mid + 67 == hi;\nloop invariant lo + mid + 68 == hi;\nloop invariant lo + mid + 69 == hi;\nloop invariant lo + mid + 70 == hi;\nloop invariant lo + mid + 71 == hi;\nloop invariant lo + mid + 72 == hi;\nloop invariant lo + mid + 73 == hi;\nloop invariant lo + mid + 74 == hi;\nloop invariant lo + mid + 75 == hi;\nloop invariant lo + mid + 76 == hi;\nloop invariant lo + mid + 77 == hi;\nloop invariant lo + mid + 78 == hi;\nloop invariant lo + mid + 79 == hi;\nloop invariant lo + mid + 80 == hi;\nloop invariant lo + mid + 81 == hi;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int lo, mid, hi;\n    lo = 0;\n    mid = unknown_int();\n    if (!(mid > 0 && mid <= LARGE_INT)) return 0;\n    hi = 2*mid;\n    \n    /*@\nloop invariant i1: 0 <= mid <= LARGE_INT;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (mid > 0) {\n        lo = lo + 1;\n        hi = hi - 1;\n        mid = mid - 1;\n    }\n    {;\n//@ assert(lo == hi);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant lo <= lo + 1;\nloop invariant hi >= hi - 1;\nloop invariant mid >= mid - 1;\nloop invariant lo == hi ==> mid <= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int lo, mid, hi;\n    lo = 0;\n    mid = unknown_int();\n    if (!(mid > 0 && mid <= LARGE_INT)) return 0;\n    hi = 2*mid;\n    \n    /*@\nloop invariant i1: lo <= lo + 1;\nloop invariant i2: hi >= hi - 1;\nloop invariant i3: mid >= mid - 1;\n\n*/\nwhile (mid > 0) {\n        lo = lo + 1;\n        hi = hi - 1;\n        mid = mid - 1;\n    }\n    {;\n//@ assert(lo == hi);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 12,
                "annotations": "```\n/*@\nloop invariant lo <= hi;\nloop invariant mid == 0;\nloop invariant lo >= 0;\nloop invariant lo <= LARGE_INT;\nloop invariant hi >= 0;\nloop invariant hi <= LARGE_INT;\nloop invariant lo == hi ==> mid == 0;\nloop invariant lo == hi ==> lo == mid;\nloop invariant lo == hi ==> hi == mid;\nloop invariant lo == hi ==> lo == hi - mid;\nloop invariant lo == hi ==> hi == lo + mid;\nloop invariant lo == hi ==> lo == mid + hi - mid;\nloop invariant lo == hi ==> hi == mid + lo - mid;\nloop invariant lo == hi ==> lo == (LARGE_INT - (LARGE_INT - hi));\nloop invariant lo == hi ==> hi == (LARGE_INT - (LARGE_INT - lo));\nloop invariant lo == hi ==> lo == (LARGE_INT - (LARGE_INT - lo) + mid - mid);\nloop invariant lo == hi ==> hi == (LARGE_INT - (LARGE_INT - hi) + mid - mid);\nloop invariant lo == hi ==> lo == (LARGE_INT - (LARGE_INT - lo) + (LARGE_INT - hi));\nloop invariant lo == hi ==> hi == (LARGE_INT - (LARGE_INT - hi) + (LARGE_INT - lo));\nloop invariant lo == hi ==> lo == (LARGE_INT - (LARGE_INT - lo) + (LARGE_INT - (LARGE_INT - hi)));\nloop invariant lo == hi ==> hi == (LARGE_INT - (LARGE_INT - hi) + (LARGE_INT - (LARGE_INT - lo)));\nloop invariant lo == hi ==> lo == (LARGE_INT - (LARGE_INT - lo) + (LARGE_INT - (LARGE_INT - lo) + mid - mid));\nloop invariant lo == hi ==> hi == (LARGE_INT - (LARGE_INT - hi) + (LARGE_INT - (LARGE_INT - hi) + mid - mid));\nloop invariant lo == hi ==> lo == (LARGE_INT - (LARGE_INT - lo) + (LARGE_INT - (LARGE_INT - hi) + mid - mid));\nloop invariant lo == hi ==> hi == (LARGE_INT - (LARGE_INT - hi) + (LARGE_INT - (LARGE_INT - lo) + mid - mid));\nloop invariant lo == hi ==> lo == (LARGE_INT - (LARGE_INT - lo) + (LARGE_INT - (LARGE_INT - hi) + mid - mid));\nloop invariant lo == hi ==> lo == (LARGE_INT - (LARGE_INT - lo) + (LARGE_INT - (LARGE_INT - lo)));\nloop invariant lo == hi ==> hi == (LARGE_INT - (LARGE_INT - hi) + (LARGE_INT - (LARGE_INT - hi)));\nloop invariant lo == hi ==> lo == (LARGE_INT - (LARGE_INT - lo) + (LARGE_INT - (LARGE_INT - lo)));\nloop invariant lo == hi ==> hi == (LARGE_INT - (LARGE_INT - hi) + (LARGE_INT - (LARGE_INT - hi)));\nloop invariant lo == hi ==> lo == (LARGE_INT - (LARGE_INT - lo) + (LARGE_INT - (LARGE_INT - lo)));\nloop invariant lo == hi ==> lo == (LARGE_INT - (LARGE_INT - lo) + (LARGE_INT - (LARGE_INT - lo)));\nloop invariant lo == hi ==> lo == (LARGE_INT - (LARGE_INT - lo) + (LARGE_INT - (LARGE_INT - lo)));\nloop invariant lo == hi ==> hi == (LARGE_INT - (LARGE_INT - hi) + (LARGE_INT - (LARGE_INT - hi)));\nloop invariant lo == hi ==> lo == (LARGE_INT - (LARGE_INT - lo) + (LARGE_INT - (LARGE_INT - lo)));\nloop invariant lo == hi ==> lo == (LARGE_INT - (LARGE_INT - lo) + (LARGE_INT - (LARGE_INT - lo)));\nloop invariant lo == hi ==> lo == (LARGE_INT - (LARGE_INT - lo) + (LARGE_INT - (LARGE_INT - lo)));\nloop invariant lo == hi ==> lo == (LARGE_INT - (LARGE_INT - lo) + (LARGE_INT - (LARGE_INT - lo)));\nloop invariant lo == hi ==> lo == (LARGE_INT - (LARGE_INT - lo) + (LARGE_INT - (LARGE_INT - lo)));\nloop invariant lo == hi ==> lo == (LARGE_INT - (LARGE_INT - lo) + (LARGE_INT - (LARGE_INT - lo)));\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int lo, mid, hi;\n    lo = 0;\n    mid = unknown_int();\n    if (!(mid > 0 && mid <= LARGE_INT)) return 0;\n    hi = 2*mid;\n    \n    /*@\n\n\nloop invariant i3: lo >= 0;\n\n\n\n\n\n\n\n\nloop invariant i12: lo == hi ==> lo == mid + hi - mid;\nloop invariant i13: lo == hi ==> hi == mid + lo - mid;\nloop invariant i14: lo == hi ==> lo == (LARGE_INT - (LARGE_INT - hi));\nloop invariant i15: lo == hi ==> hi == (LARGE_INT - (LARGE_INT - lo));\nloop invariant i16: lo == hi ==> lo == (LARGE_INT - (LARGE_INT - lo) + mid - mid);\nloop invariant i17: lo == hi ==> hi == (LARGE_INT - (LARGE_INT - hi) + mid - mid);\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (mid > 0) {\n        lo = lo + 1;\n        hi = hi - 1;\n        mid = mid - 1;\n    }\n    {;\n//@ assert(lo == hi);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 8,
                "annotations": "```\n/*@\nloop invariant 0 <= mid <= LARGE_INT;\nloop invariant lo == hi ==> lo == mid;\nloop invariant lo == hi ==> hi == mid;\nloop invariant lo == mid ==> lo == hi;\nloop invariant hi == mid ==> lo == hi;\nloop invariant lo == hi ==> lo == mid;\nloop invariant hi == mid ==> lo == hi;\nloop invariant lo == mid;\nloop invariant hi == mid;\nloop invariant lo + mid == hi;\nloop invariant hi + mid == lo;\nloop invariant lo == hi == mid;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int lo, mid, hi;\n    lo = 0;\n    mid = unknown_int();\n    if (!(mid > 0 && mid <= LARGE_INT)) return 0;\n    hi = 2*mid;\n    \n    /*@\nloop invariant i1: 0 <= mid <= LARGE_INT;\n\n\n\n\n\n\n\n\n\n*/\nwhile (mid > 0) {\n        lo = lo + 1;\n        hi = hi - 1;\n        mid = mid - 1;\n    }\n    {;\n//@ assert(lo == hi);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= lo <= hi;\nloop invariant mid <= 0;\nloop invariant mid <= hi;\nloop invariant mid <= LARGE_INT;\nloop invariant mid > 0;\nloop invariant lo >= mid;\nloop invariant hi <= 2*mid;\nloop invariant hi >= mid;\nloop invariant lo <= hi;\nloop invariant lo + mid + hi <= 2*mid;\nloop invariant lo + mid + hi >= mid;\nloop invariant lo + mid + hi >= lo;\nloop invariant lo + mid + hi >= hi;\nloop invariant lo + mid + hi <= 2*mid;\nloop invariant lo + mid + hi >= 0;\nloop invariant lo + mid + hi <= LARGE_INT;\nloop invariant lo + mid + hi >= 0;\nloop invariant lo + mid + hi <= LARGE_INT;\nloop invariant lo + mid + hi >= 0;\nloop invariant lo + mid + hi <= LARGE_INT;\nloop invariant lo + mid + hi >= 0;\nloop invariant lo + mid + hi <= LARGE_INT;\nloop invariant lo + mid + hi >= 0;\nloop invariant lo + mid + hi <= LARGE_INT;\nloop invariant lo + mid + hi >= 0;\nloop invariant lo + mid + hi <= LARGE_INT;\nloop invariant lo + mid + hi >= 0;\nloop invariant lo + mid + hi <= LARGE_INT;\nloop invariant lo + mid + hi >= 0;\nloop invariant lo + mid + hi <= LARGE_INT;\nloop invariant lo + mid + hi >= 0;\nloop invariant lo + mid + hi <= LARGE_INT;\nloop invariant lo + mid + hi >= 0;\nloop invariant lo + mid + hi <= LARGE_INT;\nloop invariant lo + mid + hi >= 0;\nloop invariant lo + mid + hi <= LARGE_INT;\nloop invariant lo + mid + hi >= 0;\nloop invariant lo + mid + hi <= LARGE_INT;\nloop invariant lo + mid + hi >= 0;\nloop invariant lo + mid + hi <= LARGE_INT;\nloop invariant lo + mid + hi >= 0;\nloop invariant lo + mid + hi <= LARGE_INT;\nloop invariant lo + mid + hi >= 0;\nloop invariant lo + mid + hi <= LARGE_INT;\nloop invariant lo + mid + hi >= 0;\nloop invariant lo + mid + hi <= LARGE_INT;\nloop invariant lo + mid + hi >= 0;\nloop invariant lo + mid + hi <= LARGE_INT;\nloop invariant lo + mid + hi >= 0;\nloop invariant lo + mid + hi <= LARGE_INT;\nloop invariant lo + mid + hi >= 0;\nloop invariant lo + mid + hi <= LARGE_INT;\nloop invariant lo + mid + hi >= 0;\nloop invariant lo + mid + hi <= LARGE_INT;\nloop invariant lo + mid + hi >= 0;\nloop invariant lo + mid + hi <= LARGE_INT;\nloop invariant lo + mid + hi >= 0;\nloop invariant lo + mid + hi <= LARGE_INT;\nloop invariant lo + mid + hi >= 0;\nloop invariant lo + mid + hi <= LARGE_INT;\nloop invariant lo + mid + hi >= 0;\nloop invariant lo + mid + hi <= LARGE_INT;\nloop invariant lo + mid + hi >= 0;\nloop invariant lo + mid + hi <= LARGE_INT;\nloop invariant lo + mid + hi >= 0;\nloop invariant lo + mid + hi <= LARGE_INT;\nloop invariant lo + mid + hi >= 0;\nloop invariant lo + mid + hi <= LARGE_INT;\nloop invariant lo + mid + hi >= 0;\nloop invariant lo + mid + hi <= LARGE_INT;\nloop invariant lo + mid + hi >= 0;\nloop invariant lo + mid + hi <= LARGE_INT;\nloop invariant lo + mid + hi >= 0;\nloop invariant lo + mid + hi <= LARGE_INT;\nloop invariant lo + mid + hi >= 0;\nloop invariant lo + mid + hi <= LARGE_INT;\nloop invariant lo + mid + hi >= 0;\nloop invariant lo + mid + hi <= LARGE_INT;\nloop invariant lo + mid + hi >= 0;\nloop invariant lo + mid + hi <= LARGE_INT;\nloop invariant lo + mid + hi >= 0;\nloop invariant lo + mid + hi <= LARGE_INT;\nloop invariant lo + mid + hi >= 0;\nloop invariant lo + mid + hi <= LARGE_INT;\nloop invariant lo + mid + hi >= 0;\nloop invariant lo + mid + hi <= LARGE_INT;\nloop invariant lo + mid + hi >= 0;\nloop invariant lo + mid + hi <= LARGE_INT;\nloop invariant lo + mid + hi >= 0;\nloop invariant lo + mid + hi <= LARGE_INT;\nloop invariant lo + mid + hi >= 0;\nloop invariant lo + mid + hi <= LARGE_INT;\nloop invariant lo + mid + hi >= 0;\nloop invariant lo + mid + hi <= LARGE_INT;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int lo, mid, hi;\n    lo = 0;\n    mid = unknown_int();\n    if (!(mid > 0 && mid <= LARGE_INT)) return 0;\n    hi = 2*mid;\n    \n    /*@\n\n\nloop invariant i3: mid <= hi;\nloop invariant i4: mid <= LARGE_INT;\n\n\n\nloop invariant i8: hi >= mid;\n\n\nloop invariant i11: lo + mid + hi >= mid;\nloop invariant i12: lo + mid + hi >= lo;\nloop invariant i13: lo + mid + hi >= hi;\nloop invariant i14: lo + mid + hi >= 0;\n\n*/\nwhile (mid > 0) {\n        lo = lo + 1;\n        hi = hi - 1;\n        mid = mid - 1;\n    }\n    {;\n//@ assert(lo == hi);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= lo <= hi;\nloop invariant lo <= hi;\nloop invariant lo <= mid;\nloop invariant hi >= lo;\nloop invariant hi >= mid;\nloop invariant lo <= LARGE_INT;\nloop invariant hi <= 2*LARGE_INT;\nloop invariant mid <= 2*LARGE_INT;\nloop invariant mid >= 0;\nloop invariant mid == hi - lo;\nloop invariant mid == 2*LARGE_INT - hi;\nloop invariant mid == hi - lo ==> lo == hi;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int lo, mid, hi;\n    lo = 0;\n    mid = unknown_int();\n    if (!(mid > 0 && mid <= LARGE_INT)) return 0;\n    hi = 2*mid;\n    \n    /*@\n\n\n\n\nloop invariant i5: hi >= mid;\n\nloop invariant i7: hi <= 2*LARGE_INT;\nloop invariant i8: mid <= 2*LARGE_INT;\nloop invariant i9: mid >= 0;\n\n\n\n*/\nwhile (mid > 0) {\n        lo = lo + 1;\n        hi = hi - 1;\n        mid = mid - 1;\n    }\n    {;\n//@ assert(lo == hi);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 8,
                "annotations": "```\n/*@\nloop invariant 0 <= lo <= hi <= mid <= LARGE_INT;\nloop invariant mid >= 0;\nloop invariant lo <= hi;\nloop invariant lo + hi == mid * 2;\nloop invariant lo = mid + 1;\nloop invariant lo = hi + 1;\nloop invariant mid = lo + hi / 2;\nloop invariant mid = hi + lo / 2;\nloop invariant mid = hi + lo / 2;\nloop invariant mid = lo + hi / 2;\nloop invariant lo = hi + (mid - 1) / 2;\nloop invariant lo = hi + (mid - 1) / 2;\nloop invariant mid = hi + lo / 2;\nloop invariant mid = lo + hi / 2;\nloop invariant lo = hi + 1;\nloop invariant lo = mid + 1;\nloop invariant lo = mid + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\nloop invariant lo = hi + 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int lo, mid, hi;\n    lo = 0;\n    mid = unknown_int();\n    if (!(mid > 0 && mid <= LARGE_INT)) return 0;\n    hi = 2*mid;\n    \n    /*@\n\nloop invariant i2: mid >= 0;\n\n\n\n\n\n\n\n*/\nwhile (mid > 0) {\n        lo = lo + 1;\n        hi = hi - 1;\n        mid = mid - 1;\n    }\n    {;\n//@ assert(lo == hi);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= lo <= mid <= hi <= 2 * mid;\nloop invariant hi - lo == mid;\nloop invariant mid > 0;\nloop invariant lo <= hi;\nloop invariant lo >= 0;\nloop invariant hi <= 2 * mid;\nloop invariant mid <= LARGE_INT;\nloop invariant lo <= mid;\nloop invariant hi >= mid;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int lo, mid, hi;\n    lo = 0;\n    mid = unknown_int();\n    if (!(mid > 0 && mid <= LARGE_INT)) return 0;\n    hi = 2*mid;\n    \n    /*@\n\n\n\n\nloop invariant i5: lo >= 0;\n\nloop invariant i7: mid <= LARGE_INT;\n\nloop invariant i9: hi >= mid;\n*/\nwhile (mid > 0) {\n        lo = lo + 1;\n        hi = hi - 1;\n        mid = mid - 1;\n    }\n    {;\n//@ assert(lo == hi);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= lo <= 2*mid;\nloop invariant 0 <= mid <= LARGE_INT;\nloop invariant 2*mid <= hi <= 2*mid;\nloop invariant lo <= hi;\nloop invariant (mid == 0) ==> lo == hi;\nloop invariant (mid == 0) ==> mid == 0;\nloop invariant (mid == 0) ==> lo == hi;\nloop invariant lo == mid;\nloop invariant hi == 2*mid;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> mid == 0;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid == 0 ==> lo == hi;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int lo, mid, hi;\n    lo = 0;\n    mid = unknown_int();\n    if (!(mid > 0 && mid <= LARGE_INT)) return 0;\n    hi = 2*mid;\n    \n    /*@\n\nloop invariant i2: 0 <= mid <= LARGE_INT;\n\n\n\nloop invariant i6: (mid == 0) ==> mid == 0;\n\n\n\nloop invariant i10: mid == 0 ==> mid == 0;\n*/\nwhile (mid > 0) {\n        lo = lo + 1;\n        hi = hi - 1;\n        mid = mid - 1;\n    }\n    {;\n//@ assert(lo == hi);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= lo <= hi;\nloop invariant 0 <= mid <= LARGE_INT;\nloop invariant lo + mid == hi;\nloop invariant mid - 1 <= mid <= mid + 1;\nloop invariant hi - 1 <= hi <= hi + 1;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant mid <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\nloop invariant lo <= hi <= LARGE_INT;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int lo, mid, hi;\n    lo = 0;\n    mid = unknown_int();\n    if (!(mid > 0 && mid <= LARGE_INT)) return 0;\n    hi = 2*mid;\n    \n    /*@\n\nloop invariant i2: 0 <= mid <= LARGE_INT;\n\nloop invariant i4: mid - 1 <= mid <= mid + 1;\nloop invariant i5: hi - 1 <= hi <= hi + 1;\n\n\n*/\nwhile (mid > 0) {\n        lo = lo + 1;\n        hi = hi - 1;\n        mid = mid - 1;\n    }\n    {;\n//@ assert(lo == hi);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= lo <= LARGE_INT;\nloop invariant 0 <= mid <= LARGE_INT;\nloop invariant LARGE_INT <= hi <= 2 * LARGE_INT;\nloop invariant (mid <= LARGE_INT) ==> (lo + mid == hi);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int lo, mid, hi;\n    lo = 0;\n    mid = unknown_int();\n    if (!(mid > 0 && mid <= LARGE_INT)) return 0;\n    hi = 2*mid;\n    \n    /*@\n\nloop invariant i2: 0 <= mid <= LARGE_INT;\n\n\n*/\nwhile (mid > 0) {\n        lo = lo + 1;\n        hi = hi - 1;\n        mid = mid - 1;\n    }\n    {;\n//@ assert(lo == hi);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= lo <= hi <= 2*mid;\nloop invariant lo + mid = hi;\nloop invariant lo >= 0;\nloop invariant hi <= 2*mid;\nloop invariant mid <= hi;\nloop invariant mid >= 0;\nloop invariant lo <= mid;\nloop invariant hi >= mid;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int lo, mid, hi;\n    lo = 0;\n    mid = unknown_int();\n    if (!(mid > 0 && mid <= LARGE_INT)) return 0;\n    hi = 2*mid;\n    \n    /*@\n\n\nloop invariant i3: lo >= 0;\n\nloop invariant i5: mid <= hi;\nloop invariant i6: mid >= 0;\n\nloop invariant i8: hi >= mid;\n*/\nwhile (mid > 0) {\n        lo = lo + 1;\n        hi = hi - 1;\n        mid = mid - 1;\n    }\n    {;\n//@ assert(lo == hi);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 1 <= lo <= mid;\nloop invariant 0 <= hi <= 2*mid;\nloop invariant lo + mid == hi;\nloop invariant lo + hi == 2*mid;\nloop invariant lo >= 0;\nloop invariant mid >= 0;\nloop invariant hi >= 0;\nloop invariant lo <= mid;\nloop invariant lo <= hi;\nloop invariant hi <= 2*mid;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int lo, mid, hi;\n    lo = 0;\n    mid = unknown_int();\n    if (!(mid > 0 && mid <= LARGE_INT)) return 0;\n    hi = 2*mid;\n    \n    /*@\n\n\n\n\nloop invariant i5: lo >= 0;\nloop invariant i6: mid >= 0;\n\n\n\n\n*/\nwhile (mid > 0) {\n        lo = lo + 1;\n        hi = hi - 1;\n        mid = mid - 1;\n    }\n    {;\n//@ assert(lo == hi);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant lo >= 0;\nloop invariant mid >= 0;\nloop invariant hi >= 0;\nloop invariant lo <= hi;\nloop invariant lo <= mid;\nloop invariant mid <= hi;\nloop invariant lo <= 2*mid;\nloop invariant mid <= hi;\nloop invariant lo <= hi;\nloop invariant lo <= 2*mid;\nloop invariant mid <= hi;\nloop invariant lo <= 2*mid;\nloop invariant mid <= hi;\nloop invariant lo <= 2*mid;\nloop invariant mid <= hi;\nloop invariant lo <= 2*mid;\nloop invariant mid <= hi;\nloop invariant lo <= 2*mid;\nloop invariant mid <= hi;\nloop invariant lo <= 2*mid;\nloop invariant mid <= hi;\nloop invariant lo <= 2*mid;\nloop invariant mid <= hi;\nloop invariant lo <= 2*mid;\nloop invariant mid <= hi;\nloop invariant lo <= 2*mid;\nloop invariant mid <= hi;\nloop invariant lo <= 2*mid;\nloop invariant mid <= hi;\nloop invariant lo <= 2*mid;\nloop invariant mid <= hi;\nloop invariant lo <= 2*mid;\nloop invariant mid <= hi;\nloop invariant lo <= 2*mid;\nloop invariant mid <= hi;\nloop invariant lo <= 2*mid;\nloop invariant mid <= hi;\nloop invariant lo <= 2*mid;\nloop invariant mid <= hi;\nloop invariant lo <= 2*mid;\nloop invariant mid <= hi;\nloop invariant lo <= 2*mid;\nloop invariant mid <= hi;\nloop invariant lo <= 2*mid;\nloop invariant mid <= hi;\nloop invariant lo <= 2*mid;\nloop invariant mid <= hi;\nloop invariant lo <= 2*mid;\nloop invariant mid <= hi;\nloop invariant lo <= 2*mid;\nloop invariant mid <= hi;\nloop invariant lo <= 2*mid;\nloop invariant mid <= hi;\nloop invariant lo <= 2*mid;\nloop invariant mid <= hi;\nloop invariant lo <= 2*mid;\nloop invariant mid <= hi;\nloop invariant lo <= 2*mid;\nloop invariant mid <= hi;\nloop invariant lo <= 2*mid;\nloop invariant mid <= hi;\nloop invariant lo <= 2*mid;\nloop invariant mid <= hi;\nloop invariant lo <= 2*mid;\nloop invariant mid <= hi;\nloop invariant lo <= 2*mid;\nloop invariant mid <= hi;\nloop invariant lo <= 2*mid;\nloop invariant mid <= hi;\nloop invariant lo <= 2*mid;\nloop invariant mid <= hi;\nloop invariant lo <= 2*mid;\nloop invariant mid <= hi;\nloop invariant lo <= 2*mid;\nloop invariant mid <= hi;\nloop invariant lo <= 2*mid;\nloop invariant mid <= hi;\nloop invariant lo <= 2*mid;\nloop invariant mid <= hi;\nloop invariant lo <= 2*mid;\nloop invariant mid <= hi;\nloop invariant lo <= 2*mid;\nloop invariant mid <= hi;\nloop invariant lo <= 2*mid;\nloop invariant mid <= hi;\nloop invariant lo <= 2*mid;\nloop invariant mid <= hi;\nloop invariant lo <= 2*mid;\nloop invariant mid <= hi;\nloop invariant lo <= 2*mid;\nloop invariant mid <= hi;\nloop invariant lo <= 2*mid;\nloop invariant mid <= hi;\nloop invariant lo <= 2*mid;\nloop invariant mid <= hi;\nloop invariant lo <= 2*mid;\nloop invariant mid <= hi;\nloop invariant lo <= 2*mid;\nloop invariant mid <= hi;\nloop invariant lo <= 2*mid;\nloop invariant mid <= hi;\nloop invariant lo <= 2*mid;\nloop invariant mid <= hi;\nloop invariant lo <= 2*mid;\nloop invariant mid <= hi;\nloop invariant lo <= 2*mid;\nloop invariant mid <= hi;\nloop invariant lo <= 2*mid;\nloop invariant mid <= hi;\nloop invariant lo <= 2*mid;\nloop invariant mid <= hi;\nloop invariant lo <= 2*mid;\nloop invariant mid <= hi;\nloop invariant lo <= 2*mid;\nloop invariant mid <= hi;\nloop invariant lo <= 2*mid;\nloop invariant mid <= hi;\nloop invariant lo <= 2*mid;\nloop invariant mid <= hi;\nloop invariant lo <= 2*mid;\nloop invariant mid <= hi;\nloop invariant lo <= 2*mid;\nloop invariant mid <= hi;\nloop invariant lo <= 2*mid;\nloop invariant mid <= hi;\nloop invariant lo <= 2*mid;\nloop invariant mid <= hi;\nloop invariant lo <= 2*mid;\nloop invariant mid <= hi;\nloop invariant lo <= 2*mid;\nloop invariant mid <= hi;\nloop invariant lo <= 2*mid;\nloop invariant mid <= hi;\nloop invariant lo <= 2*mid;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int lo, mid, hi;\n    lo = 0;\n    mid = unknown_int();\n    if (!(mid > 0 && mid <= LARGE_INT)) return 0;\n    hi = 2*mid;\n    \n    /*@\nloop invariant i1: lo >= 0;\nloop invariant i2: mid >= 0;\nloop invariant i3: hi >= 0;\n\n\nloop invariant i6: mid <= hi;\n\n*/\nwhile (mid > 0) {\n        lo = lo + 1;\n        hi = hi - 1;\n        mid = mid - 1;\n    }\n    {;\n//@ assert(lo == hi);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int lo, mid, hi;\n    lo = 0;\n    mid = unknown_int();\n    if (!(mid > 0 && mid <= LARGE_INT)) return 0;\n    hi = 2*mid;\n    \n    /*@\n\n*/\nwhile (mid > 0) {\n        lo = lo + 1;\n        hi = hi - 1;\n        mid = mid - 1;\n    }\n    {;\n//@ assert(lo == hi);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 163: Assignment operators not allowed in annotations.",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int lo, mid, hi;\n    lo = 0;\n    mid = unknown_int();\n    if (!(mid > 0 && mid <= LARGE_INT)) return 0;\n    hi = 2*mid;\n    \n    /*@\nloop invariant i1: 0 <= mid <= LARGE_INT;\nloop invariant i2: 0 <= lo <= hi;\nloop invariant i3: mid == 0;\nloop invariant i4: lo + mid == hi;\nloop invariant i5: lo + mid + 1 == hi;\nloop invariant i6: lo + mid + 2 == hi;\nloop invariant i7: lo + mid + 3 == hi;\nloop invariant i8: lo + mid + 4 == hi;\nloop invariant i9: lo + mid + 5 == hi;\nloop invariant i10: lo + mid + 6 == hi;\nloop invariant i11: lo + mid + 7 == hi;\nloop invariant i12: lo + mid + 8 == hi;\nloop invariant i13: lo + mid + 9 == hi;\nloop invariant i14: lo + mid + 10 == hi;\nloop invariant i15: lo + mid + 11 == hi;\nloop invariant i16: lo + mid + 12 == hi;\nloop invariant i17: lo + mid + 13 == hi;\nloop invariant i18: lo + mid + 14 == hi;\nloop invariant i19: lo + mid + 15 == hi;\nloop invariant i20: lo + mid + 16 == hi;\nloop invariant i21: lo + mid + 17 == hi;\nloop invariant i22: lo + mid + 18 == hi;\nloop invariant i23: lo + mid + 19 == hi;\nloop invariant i24: lo + mid + 20 == hi;\nloop invariant i25: lo + mid + 21 == hi;\nloop invariant i26: lo + mid + 22 == hi;\nloop invariant i27: lo + mid + 23 == hi;\nloop invariant i28: lo + mid + 24 == hi;\nloop invariant i29: lo + mid + 25 == hi;\nloop invariant i30: lo + mid + 26 == hi;\nloop invariant i31: lo + mid + 27 == hi;\nloop invariant i32: lo + mid + 28 == hi;\nloop invariant i33: lo + mid + 29 == hi;\nloop invariant i34: lo + mid + 30 == hi;\nloop invariant i35: lo + mid + 31 == hi;\nloop invariant i36: lo + mid + 32 == hi;\nloop invariant i37: lo + mid + 33 == hi;\nloop invariant i38: lo + mid + 34 == hi;\nloop invariant i39: lo + mid + 35 == hi;\nloop invariant i40: lo + mid + 36 == hi;\nloop invariant i41: lo + mid + 37 == hi;\nloop invariant i42: lo + mid + 38 == hi;\nloop invariant i43: lo + mid + 39 == hi;\nloop invariant i44: lo + mid + 40 == hi;\nloop invariant i45: lo + mid + 41 == hi;\nloop invariant i46: lo + mid + 42 == hi;\nloop invariant i47: lo + mid + 43 == hi;\nloop invariant i48: lo + mid + 44 == hi;\nloop invariant i49: lo + mid + 45 == hi;\nloop invariant i50: lo + mid + 46 == hi;\nloop invariant i51: lo + mid + 47 == hi;\nloop invariant i52: lo + mid + 48 == hi;\nloop invariant i53: lo + mid + 49 == hi;\nloop invariant i54: lo + mid + 50 == hi;\nloop invariant i55: lo + mid + 51 == hi;\nloop invariant i56: lo + mid + 52 == hi;\nloop invariant i57: lo + mid + 53 == hi;\nloop invariant i58: lo + mid + 54 == hi;\nloop invariant i59: lo + mid + 55 == hi;\nloop invariant i60: lo + mid + 56 == hi;\nloop invariant i61: lo + mid + 57 == hi;\nloop invariant i62: lo + mid + 58 == hi;\nloop invariant i63: lo + mid + 59 == hi;\nloop invariant i64: lo + mid + 60 == hi;\nloop invariant i65: lo + mid + 61 == hi;\nloop invariant i66: lo + mid + 62 == hi;\nloop invariant i67: lo + mid + 63 == hi;\nloop invariant i68: lo + mid + 64 == hi;\nloop invariant i69: lo + mid + 65 == hi;\nloop invariant i70: lo + mid + 66 == hi;\nloop invariant i71: lo + mid + 67 == hi;\nloop invariant i72: lo + mid + 68 == hi;\nloop invariant i73: lo + mid + 69 == hi;\nloop invariant i74: lo + mid + 70 == hi;\nloop invariant i75: lo + mid + 71 == hi;\nloop invariant i76: lo + mid + 72 == hi;\nloop invariant i77: lo + mid + 73 == hi;\nloop invariant i78: lo + mid + 74 == hi;\nloop invariant i79: lo + mid + 75 == hi;\nloop invariant i80: lo + mid + 76 == hi;\nloop invariant i81: lo + mid + 77 == hi;\nloop invariant i82: lo + mid + 78 == hi;\nloop invariant i83: lo + mid + 79 == hi;\nloop invariant i84: lo + mid + 80 == hi;\nloop invariant i85: lo + mid + 81 == hi;\nloop invariant i86: lo <= lo + 1;\nloop invariant i87: hi >= hi - 1;\nloop invariant i88: mid >= mid - 1;\nloop invariant i89: lo == hi ==> mid <= 0;\nloop invariant i90: lo <= hi;\nloop invariant i91: lo >= 0;\nloop invariant i92: lo <= LARGE_INT;\nloop invariant i93: hi >= 0;\nloop invariant i94: hi <= LARGE_INT;\nloop invariant i95: lo == hi ==> mid == 0;\nloop invariant i96: lo == hi ==> lo == mid;\nloop invariant i97: lo == hi ==> hi == mid;\nloop invariant i98: lo == hi ==> lo == hi - mid;\nloop invariant i99: lo == hi ==> hi == lo + mid;\nloop invariant i100: lo == hi ==> lo == mid + hi - mid;\nloop invariant i101: lo == hi ==> hi == mid + lo - mid;\nloop invariant i102: lo == hi ==> lo == (LARGE_INT - (LARGE_INT - hi));\nloop invariant i103: lo == hi ==> hi == (LARGE_INT - (LARGE_INT - lo));\nloop invariant i104: lo == hi ==> lo == (LARGE_INT - (LARGE_INT - lo) + mid - mid);\nloop invariant i105: lo == hi ==> hi == (LARGE_INT - (LARGE_INT - hi) + mid - mid);\nloop invariant i106: lo == hi ==> lo == (LARGE_INT - (LARGE_INT - lo) + (LARGE_INT - hi));\nloop invariant i107: lo == hi ==> hi == (LARGE_INT - (LARGE_INT - hi) + (LARGE_INT - lo));\nloop invariant i108: lo == hi ==> lo == (LARGE_INT - (LARGE_INT - lo) + (LARGE_INT - (LARGE_INT - hi)));\nloop invariant i109: lo == hi ==> hi == (LARGE_INT - (LARGE_INT - hi) + (LARGE_INT - (LARGE_INT - lo)));\nloop invariant i110: lo == hi ==> lo == (LARGE_INT - (LARGE_INT - lo) + (LARGE_INT - (LARGE_INT - lo) + mid - mid));\nloop invariant i111: lo == hi ==> hi == (LARGE_INT - (LARGE_INT - hi) + (LARGE_INT - (LARGE_INT - hi) + mid - mid));\nloop invariant i112: lo == hi ==> lo == (LARGE_INT - (LARGE_INT - lo) + (LARGE_INT - (LARGE_INT - hi) + mid - mid));\nloop invariant i113: lo == hi ==> hi == (LARGE_INT - (LARGE_INT - hi) + (LARGE_INT - (LARGE_INT - lo) + mid - mid));\nloop invariant i114: lo == hi ==> lo == (LARGE_INT - (LARGE_INT - lo) + (LARGE_INT - (LARGE_INT - lo)));\nloop invariant i115: lo == hi ==> hi == (LARGE_INT - (LARGE_INT - hi) + (LARGE_INT - (LARGE_INT - hi)));\nloop invariant i116: lo == mid ==> lo == hi;\nloop invariant i117: hi == mid ==> lo == hi;\nloop invariant i118: lo == mid;\nloop invariant i119: hi == mid;\nloop invariant i120: hi + mid == lo;\nloop invariant i121: lo == hi == mid;\nloop invariant i122: mid <= 0;\nloop invariant i123: mid <= hi;\nloop invariant i124: mid <= LARGE_INT;\nloop invariant i125: mid > 0;\nloop invariant i126: lo >= mid;\nloop invariant i127: hi <= 2*mid;\nloop invariant i128: hi >= mid;\nloop invariant i129: lo + mid + hi <= 2*mid;\nloop invariant i130: lo + mid + hi >= mid;\nloop invariant i131: lo + mid + hi >= lo;\nloop invariant i132: lo + mid + hi >= hi;\nloop invariant i133: lo + mid + hi >= 0;\nloop invariant i134: lo + mid + hi <= LARGE_INT;\nloop invariant i135: lo <= mid;\nloop invariant i136: hi >= lo;\nloop invariant i137: hi <= 2*LARGE_INT;\nloop invariant i138: mid <= 2*LARGE_INT;\nloop invariant i139: mid >= 0;\nloop invariant i140: mid == hi - lo;\nloop invariant i141: mid == 2*LARGE_INT - hi;\nloop invariant i142: mid == hi - lo ==> lo == hi;\nloop invariant i143: 0 <= lo <= hi <= mid <= LARGE_INT;\nloop invariant i144: lo + hi == mid * 2;\nloop invariant i145: lo = mid + 1;\nloop invariant i146: lo = hi + 1;\nloop invariant i147: mid = lo + hi / 2;\nloop invariant i148: mid = hi + lo / 2;\nloop invariant i149: lo = hi + (mid - 1) / 2;\nloop invariant i150: 0 <= lo <= mid <= hi <= 2 * mid;\nloop invariant i151: hi - lo == mid;\nloop invariant i152: hi <= 2 * mid;\nloop invariant i153: 0 <= lo <= 2*mid;\nloop invariant i154: 2*mid <= hi <= 2*mid;\nloop invariant i155: (mid == 0) ==> lo == hi;\nloop invariant i156: (mid == 0) ==> mid == 0;\nloop invariant i157: hi == 2*mid;\nloop invariant i158: mid == 0 ==> lo == hi;\nloop invariant i159: mid == 0 ==> mid == 0;\nloop invariant i160: mid - 1 <= mid <= mid + 1;\nloop invariant i161: hi - 1 <= hi <= hi + 1;\nloop invariant i162: lo <= hi <= LARGE_INT;\nloop invariant i163: mid <= hi <= LARGE_INT;\nloop invariant i164: 0 <= lo <= LARGE_INT;\nloop invariant i165: LARGE_INT <= hi <= 2 * LARGE_INT;\nloop invariant i166: (mid <= LARGE_INT) ==> (lo + mid == hi);\nloop invariant i167: 0 <= lo <= hi <= 2*mid;\nloop invariant i168: lo + mid = hi;\nloop invariant i169: 1 <= lo <= mid;\nloop invariant i170: 0 <= hi <= 2*mid;\nloop invariant i171: lo + hi == 2*mid;\nloop invariant i172: lo <= 2*mid;\n*/\nwhile (mid > 0) {\n        lo = lo + 1;\n        hi = hi - 1;\n        mid = mid - 1;\n    }\n    {;\n//@ assert(lo == hi);\n}\n\n    return 0;\n}",
        "combined_annotation_num_solver_calls": 76,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int lo, mid, hi;\n    lo = 0;\n    mid = unknown_int();\n    if (!(mid > 0 && mid <= LARGE_INT)) return 0;\n    hi = 2*mid;\n    \n    /*@\nloop invariant i1: 0 <= mid <= LARGE_INT;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i86: lo <= lo + 1;\nloop invariant i87: hi >= hi - 1;\nloop invariant i88: mid >= mid - 1;\n\n\nloop invariant i91: lo >= 0;\n\nloop invariant i93: hi >= 0;\n\n\n\n\n\n\nloop invariant i100: lo == hi ==> lo == mid + hi - mid;\nloop invariant i101: lo == hi ==> hi == mid + lo - mid;\nloop invariant i102: lo == hi ==> lo == (LARGE_INT - (LARGE_INT - hi));\nloop invariant i103: lo == hi ==> hi == (LARGE_INT - (LARGE_INT - lo));\nloop invariant i104: lo == hi ==> lo == (LARGE_INT - (LARGE_INT - lo) + mid - mid);\nloop invariant i105: lo == hi ==> hi == (LARGE_INT - (LARGE_INT - hi) + mid - mid);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i123: mid <= hi;\nloop invariant i124: mid <= LARGE_INT;\n\n\n\nloop invariant i128: hi >= mid;\n\nloop invariant i130: lo + mid + hi >= mid;\nloop invariant i131: lo + mid + hi >= lo;\nloop invariant i132: lo + mid + hi >= hi;\nloop invariant i133: lo + mid + hi >= 0;\n\n\n\nloop invariant i137: hi <= 2*LARGE_INT;\nloop invariant i138: mid <= 2*LARGE_INT;\nloop invariant i139: mid >= 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i156: (mid == 0) ==> mid == 0;\n\n\nloop invariant i159: mid == 0 ==> mid == 0;\nloop invariant i160: mid - 1 <= mid <= mid + 1;\nloop invariant i161: hi - 1 <= hi <= hi + 1;\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (mid > 0) {\n        lo = lo + 1;\n        hi = hi - 1;\n        mid = mid - 1;\n    }\n    {;\n//@ assert(lo == hi);\n}\n\n    return 0;\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/split.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c"
        ],
        "skipped": [],
        "total": 48,
        "success_count": 41,
        "failure_count": 7,
        "success_rate": 0.8541666666666666
    }
}