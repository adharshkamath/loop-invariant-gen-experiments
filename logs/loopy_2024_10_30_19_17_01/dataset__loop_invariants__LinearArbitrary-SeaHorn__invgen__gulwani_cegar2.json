{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int x,m,n;\n  n = unknown();\n  x = 0;\n  m = 0;\n  while( x < n ) {\n    if(unknown())\n\tm = x;\n\tx++;\n  }\n  if( n > 0 )\n    {\n      {;\n//@ assert( 0<=m);\n}\n\n      {;\n//@ assert(m<n);\n}\n\n    }\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m <= x;\nloop invariant m >= 0;\nloop invariant m <= n;\n*/\n```",
            "```\n/*@\nloop invariant n > 0 ==> m <= n;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m <= x;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m <= x;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m <= x;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m <= x;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m <= x;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m <= x;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m <= x;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m <= x;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m <= x;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m <= x;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m <= x;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m <= x;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m <= x;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m <= x;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m <= x;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m <= x;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m <= x;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m <= x;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m <= x;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m <= x;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m <= x;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m <= x;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m <= x;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m <= x;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m <= x;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m <= x;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m <= x;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m <= x;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m <= x;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m <= x;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m <= x;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m <= x;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m <= x;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m <= x;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m <= x;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m <= x;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m <= x;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m <= x;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m <= x;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m <= x;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m <= x;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m <= x;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m <= x;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m <= x <= n;\nloop invariant m >= 0;\nloop invariant m < n;\nloop invariant m == 0 ==> n == 0;\nloop invariant m > 0 ==> n > 0;\nloop invariant m == 0 ==> x == 0;\nloop invariant m > 0 ==> x > 0;\nloop invariant m == 0 ==> unknown() == 0;\nloop invariant m > 0 ==> unknown() == 1;\nloop invariant m == 0 ==> m == 0;\nloop invariant m > 0 ==> m == x;\nloop invariant m == 0 ==> m == 0;\nloop invariant m > 0 ==> m == x;\nloop invariant m == 0 ==> m == 0;\nloop invariant m > 0 ==> m == x;\nloop invariant m == 0 ==> m == 0;\nloop invariant m > 0 ==> m == x;\nloop invariant m == 0 ==> m == 0;\nloop invariant m > 0 ==> m == x;\nloop invariant m == 0 ==> m == 0;\nloop invariant m > 0 ==> m == x;\nloop invariant m == 0 ==> m == 0;\nloop invariant m > 0 ==> m == x;\nloop invariant m == 0 ==> m == 0;\nloop invariant m > 0 ==> m == x;\nloop invariant m == 0 ==> m == 0;\nloop invariant m > 0 ==> m == x;\nloop invariant m == 0 ==> m == 0;\nloop invariant m > 0 ==> m == x;\nloop invariant m == 0 ==> m == 0;\nloop invariant m > 0 ==> m == x;\nloop invariant m == 0 ==> m == 0;\nloop invariant m > 0 ==> m == x;\nloop invariant m == 0 ==> m == 0;\nloop invariant m > 0 ==> m == x;\nloop invariant m == 0 ==> m == 0;\nloop invariant m > 0 ==> m == x;\nloop invariant m == 0 ==> m == 0;\nloop invariant m > 0 ==> m == x;\nloop invariant m == 0 ==> m == 0;\nloop invariant m > 0 ==> m == x;\nloop invariant m == 0 ==> m == 0;\nloop invariant m > 0 ==> m == x;\nloop invariant m == 0 ==> m == 0;\nloop invariant m > 0 ==> m == x;\nloop invariant m == 0 ==> m == 0;\nloop invariant m > 0 ==> m == x;\nloop invariant m == 0 ==> m == 0;\nloop invariant m > 0 ==> m == x;\nloop invariant m == 0 ==> m == 0;\nloop invariant m > 0 ==> m == x;\nloop invariant m == 0 ==> m == 0;\nloop invariant m > 0 ==> m == x;\nloop invariant m == 0 ==> m == 0;\nloop invariant m > 0 ==> m == x;\nloop invariant m == 0 ==> m == 0;\nloop invariant m > 0 ==> m == x;\nloop invariant m == 0 ==> m == 0;\nloop invariant m > 0 ==> m == x;\nloop invariant m == 0 ==> m == 0;\nloop invariant m > 0 ==> m == x;\nloop invariant m == 0 ==> m == 0;\nloop invariant m > 0 ==> m == x;\nloop invariant m == 0 ==> m == 0;\nloop invariant m > 0 ==> m == x;\nloop invariant m == 0 ==> m == 0;\nloop invariant m > 0 ==> m == x;\nloop invariant m == 0 ==> m == 0;\nloop invariant m > 0 ==> m == x;\nloop invariant m == 0 ==> m == 0;\nloop invariant m > 0 ==> m == x;\nloop invariant m == 0 ==> m == 0;\nloop invariant m > 0 ==> m == x;\nloop invariant m == 0 ==> m == 0;\nloop invariant m > 0 ==> m == x;\nloop invariant m == 0 ==> m == 0;\nloop invariant m > 0 ==> m == x;\nloop invariant m == 0 ==> m == 0;\nloop invariant m > 0 ==> m == x;\nloop invariant m == 0 ==> m == 0;\nloop invariant m > 0 ==> m == x;\nloop invariant m == 0 ==> m == 0;\nloop invariant m > 0 ==> m == x;\nloop invariant m == 0 ==> m == 0;\nloop invariant m > 0 ==> m == x;\nloop invariant m == 0 ==> m == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m <= x;\nloop invariant (x < n) ==> (0 <= m);\nloop invariant (x < n) ==> (m < n);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= m <= n;\nloop invariant m <= x;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= n;\nloop invariant 0 <= m <= n;\nloop invariant (x == n) ==> (m == x);\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x == n ==> m == n;\nloop invariant m <= x;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant m >= 0;\nloop invariant n > 0 ==> m < n;\nloop invariant n > 0 ==> x > 0;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n <= 0 ==> m <= 0;\nloop invariant n <= 0 ==> x <= 0;\nloop invariant n <= 0 ==> m <= x;\nloop invariant n <= 0 ==> x <= n;\nloop invariant x == n ==> m == x;\nloop invariant x == n ==> x == m;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= m <= n;\nloop invariant 0 <= x <= n;\nloop invariant m <= x;\nloop invariant m <= n;\nloop invariant x <= n;\nloop invariant m <= x;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x <= n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m <= x;\nloop invariant m >= 0;\nloop invariant m <= n;\nloop invariant x >= m;\nloop invariant x <= n;\nloop invariant m < x ==> m < n;\nloop invariant m == x ==> m < n;\nloop invariant m == x ==> m > 0;\nloop invariant m < x ==> m > 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= m <= n;\nloop invariant m <= x;\nloop invariant if (n > 0) then m <= n - 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= m <= x <= n;\nloop invariant m <= n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= m <= x;\nloop invariant 0 <= n;\nloop invariant x <= n;\nloop invariant m <= n;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= n;\nloop invariant 0 <= m <= n;\nloop invariant m <= x;\nloop invariant m <= n;\nloop invariant m < n ==> x < n;\nloop invariant 0 < x ==> m < x;\nloop invariant m < x ==> m < n;\nloop invariant m == x ==> m == n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\n*/\n```",
            "```\n/*@\nloop invariant n >= 0;\nloop invariant 0 <= x <= n;\nloop invariant m <= x;\nloop invariant m >= 0;\nloop invariant m < n;\nloop invariant (m == 0 || unknown() == 0);\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m <= x;\nloop invariant m >= 0;\nloop invariant m <= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int x,m,n;\n  n = unknown();\n  x = 0;\n  m = 0;\n  /*@\n\nloop invariant i2: m <= x;\nloop invariant i3: m >= 0;\n\n*/\nwhile( x < n ) {\n    if(unknown())\n\tm = x;\n\tx++;\n  }\n  if( n > 0 )\n    {\n      {;\n//@ assert( 0<=m);\n}\n\n      {;\n//@ assert(m<n);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant n > 0 ==> m <= n;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m <= x;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m <= x;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m <= x;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m <= x;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m <= x;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m <= x;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m <= x;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m <= x;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m <= x;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m <= x;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m <= x;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m <= x;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m <= x;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m <= x;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m <= x;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m <= x;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m <= x;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m <= x;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m <= x;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m <= x;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m <= x;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m <= x;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m <= x;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m <= x;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m <= x;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m <= x;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m <= x;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m <= x;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m <= x;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m <= x;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m <= x;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m <= x;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m <= x;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m <= x;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m <= x;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m <= x;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m <= x;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m <= x;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m <= x;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m <= x;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m <= x;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m <= x;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m <= x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int x,m,n;\n  n = unknown();\n  x = 0;\n  m = 0;\n  /*@\nloop invariant i1: n > 0 ==> m <= n;\nloop invariant i2: n > 0 ==> m >= 0;\nloop invariant i3: n > 0 ==> m <= x;\n*/\nwhile( x < n ) {\n    if(unknown())\n\tm = x;\n\tx++;\n  }\n  if( n > 0 )\n    {\n      {;\n//@ assert( 0<=m);\n}\n\n      {;\n//@ assert(m<n);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m <= x <= n;\nloop invariant m >= 0;\nloop invariant m < n;\nloop invariant m == 0 ==> n == 0;\nloop invariant m > 0 ==> n > 0;\nloop invariant m == 0 ==> x == 0;\nloop invariant m > 0 ==> x > 0;\nloop invariant m == 0 ==> unknown() == 0;\nloop invariant m > 0 ==> unknown() == 1;\nloop invariant m == 0 ==> m == 0;\nloop invariant m > 0 ==> m == x;\nloop invariant m == 0 ==> m == 0;\nloop invariant m > 0 ==> m == x;\nloop invariant m == 0 ==> m == 0;\nloop invariant m > 0 ==> m == x;\nloop invariant m == 0 ==> m == 0;\nloop invariant m > 0 ==> m == x;\nloop invariant m == 0 ==> m == 0;\nloop invariant m > 0 ==> m == x;\nloop invariant m == 0 ==> m == 0;\nloop invariant m > 0 ==> m == x;\nloop invariant m == 0 ==> m == 0;\nloop invariant m > 0 ==> m == x;\nloop invariant m == 0 ==> m == 0;\nloop invariant m > 0 ==> m == x;\nloop invariant m == 0 ==> m == 0;\nloop invariant m > 0 ==> m == x;\nloop invariant m == 0 ==> m == 0;\nloop invariant m > 0 ==> m == x;\nloop invariant m == 0 ==> m == 0;\nloop invariant m > 0 ==> m == x;\nloop invariant m == 0 ==> m == 0;\nloop invariant m > 0 ==> m == x;\nloop invariant m == 0 ==> m == 0;\nloop invariant m > 0 ==> m == x;\nloop invariant m == 0 ==> m == 0;\nloop invariant m > 0 ==> m == x;\nloop invariant m == 0 ==> m == 0;\nloop invariant m > 0 ==> m == x;\nloop invariant m == 0 ==> m == 0;\nloop invariant m > 0 ==> m == x;\nloop invariant m == 0 ==> m == 0;\nloop invariant m > 0 ==> m == x;\nloop invariant m == 0 ==> m == 0;\nloop invariant m > 0 ==> m == x;\nloop invariant m == 0 ==> m == 0;\nloop invariant m > 0 ==> m == x;\nloop invariant m == 0 ==> m == 0;\nloop invariant m > 0 ==> m == x;\nloop invariant m == 0 ==> m == 0;\nloop invariant m > 0 ==> m == x;\nloop invariant m == 0 ==> m == 0;\nloop invariant m > 0 ==> m == x;\nloop invariant m == 0 ==> m == 0;\nloop invariant m > 0 ==> m == x;\nloop invariant m == 0 ==> m == 0;\nloop invariant m > 0 ==> m == x;\nloop invariant m == 0 ==> m == 0;\nloop invariant m > 0 ==> m == x;\nloop invariant m == 0 ==> m == 0;\nloop invariant m > 0 ==> m == x;\nloop invariant m == 0 ==> m == 0;\nloop invariant m > 0 ==> m == x;\nloop invariant m == 0 ==> m == 0;\nloop invariant m > 0 ==> m == x;\nloop invariant m == 0 ==> m == 0;\nloop invariant m > 0 ==> m == x;\nloop invariant m == 0 ==> m == 0;\nloop invariant m > 0 ==> m == x;\nloop invariant m == 0 ==> m == 0;\nloop invariant m > 0 ==> m == x;\nloop invariant m == 0 ==> m == 0;\nloop invariant m > 0 ==> m == x;\nloop invariant m == 0 ==> m == 0;\nloop invariant m > 0 ==> m == x;\nloop invariant m == 0 ==> m == 0;\nloop invariant m > 0 ==> m == x;\nloop invariant m == 0 ==> m == 0;\nloop invariant m > 0 ==> m == x;\nloop invariant m == 0 ==> m == 0;\nloop invariant m > 0 ==> m == x;\nloop invariant m == 0 ==> m == 0;\nloop invariant m > 0 ==> m == x;\nloop invariant m == 0 ==> m == 0;\nloop invariant m > 0 ==> m == x;\nloop invariant m == 0 ==> m == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int x,m,n;\n  n = unknown();\n  x = 0;\n  m = 0;\n  /*@\n\n\n\n\n\nloop invariant i6: m > 0 ==> n > 0;\n\nloop invariant i8: m > 0 ==> x > 0;\n\n\nloop invariant i11: m == 0 ==> m == 0;\n\n*/\nwhile( x < n ) {\n    if(unknown())\n\tm = x;\n\tx++;\n  }\n  if( n > 0 )\n    {\n      {;\n//@ assert( 0<=m);\n}\n\n      {;\n//@ assert(m<n);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m <= x;\nloop invariant (x < n) ==> (0 <= m);\nloop invariant (x < n) ==> (m < n);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int x,m,n;\n  n = unknown();\n  x = 0;\n  m = 0;\n  /*@\n\nloop invariant i2: m <= x;\nloop invariant i3: (x < n) ==> (0 <= m);\nloop invariant i4: (x < n) ==> (m < n);\n*/\nwhile( x < n ) {\n    if(unknown())\n\tm = x;\n\tx++;\n  }\n  if( n > 0 )\n    {\n      {;\n//@ assert( 0<=m);\n}\n\n      {;\n//@ assert(m<n);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= m <= n;\nloop invariant m <= x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int x,m,n;\n  n = unknown();\n  x = 0;\n  m = 0;\n  /*@\n\n\nloop invariant i3: m <= x;\n*/\nwhile( x < n ) {\n    if(unknown())\n\tm = x;\n\tx++;\n  }\n  if( n > 0 )\n    {\n      {;\n//@ assert( 0<=m);\n}\n\n      {;\n//@ assert(m<n);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= n;\nloop invariant 0 <= m <= n;\nloop invariant (x == n) ==> (m == x);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int x,m,n;\n  n = unknown();\n  x = 0;\n  m = 0;\n  /*@\n\n\n\n*/\nwhile( x < n ) {\n    if(unknown())\n\tm = x;\n\tx++;\n  }\n  if( n > 0 )\n    {\n      {;\n//@ assert( 0<=m);\n}\n\n      {;\n//@ assert(m<n);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int x,m,n;\n  n = unknown();\n  x = 0;\n  m = 0;\n  /*@\n\n*/\nwhile( x < n ) {\n    if(unknown())\n\tm = x;\n\tx++;\n  }\n  if( n > 0 )\n    {\n      {;\n//@ assert( 0<=m);\n}\n\n      {;\n//@ assert(m<n);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x == n ==> m == n;\nloop invariant m <= x;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant m >= 0;\nloop invariant n > 0 ==> m < n;\nloop invariant n > 0 ==> x > 0;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n <= 0 ==> m <= 0;\nloop invariant n <= 0 ==> x <= 0;\nloop invariant n <= 0 ==> m <= x;\nloop invariant n <= 0 ==> x <= n;\nloop invariant x == n ==> m == x;\nloop invariant x == n ==> x == m;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int x,m,n;\n  n = unknown();\n  x = 0;\n  m = 0;\n  /*@\n\n\nloop invariant i3: m <= x;\nloop invariant i4: x >= 0;\n\n\nloop invariant i7: m >= 0;\nloop invariant i8: n > 0 ==> m < n;\n\nloop invariant i10: n > 0 ==> m >= 0;\nloop invariant i11: n <= 0 ==> m <= 0;\nloop invariant i12: n <= 0 ==> x <= 0;\nloop invariant i13: n <= 0 ==> m <= x;\n\n\n\n*/\nwhile( x < n ) {\n    if(unknown())\n\tm = x;\n\tx++;\n  }\n  if( n > 0 )\n    {\n      {;\n//@ assert( 0<=m);\n}\n\n      {;\n//@ assert(m<n);\n}\n\n    }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= m <= n;\nloop invariant 0 <= x <= n;\nloop invariant m <= x;\nloop invariant m <= n;\nloop invariant x <= n;\nloop invariant m <= x;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x <= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int x,m,n;\n  n = unknown();\n  x = 0;\n  m = 0;\n  /*@\n\n\nloop invariant i3: m <= x;\n\n\n*/\nwhile( x < n ) {\n    if(unknown())\n\tm = x;\n\tx++;\n  }\n  if( n > 0 )\n    {\n      {;\n//@ assert( 0<=m);\n}\n\n      {;\n//@ assert(m<n);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m <= x;\nloop invariant m >= 0;\nloop invariant m <= n;\nloop invariant x >= m;\nloop invariant x <= n;\nloop invariant m < x ==> m < n;\nloop invariant m == x ==> m < n;\nloop invariant m == x ==> m > 0;\nloop invariant m < x ==> m > 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int x,m,n;\n  n = unknown();\n  x = 0;\n  m = 0;\n  /*@\n\nloop invariant i2: m <= x;\nloop invariant i3: m >= 0;\n\nloop invariant i5: x >= m;\n\nloop invariant i7: m < x ==> m < n;\n\n\n\n*/\nwhile( x < n ) {\n    if(unknown())\n\tm = x;\n\tx++;\n  }\n  if( n > 0 )\n    {\n      {;\n//@ assert( 0<=m);\n}\n\n      {;\n//@ assert(m<n);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= m <= n;\nloop invariant m <= x;\nloop invariant if (n > 0) then m <= n - 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int x,m,n;\n  n = unknown();\n  x = 0;\n  m = 0;\n  /*@\n\n\nloop invariant i3: m <= x;\n\n*/\nwhile( x < n ) {\n    if(unknown())\n\tm = x;\n\tx++;\n  }\n  if( n > 0 )\n    {\n      {;\n//@ assert( 0<=m);\n}\n\n      {;\n//@ assert(m<n);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= m <= x <= n;\nloop invariant m <= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int x,m,n;\n  n = unknown();\n  x = 0;\n  m = 0;\n  /*@\n\n\n\n*/\nwhile( x < n ) {\n    if(unknown())\n\tm = x;\n\tx++;\n  }\n  if( n > 0 )\n    {\n      {;\n//@ assert( 0<=m);\n}\n\n      {;\n//@ assert(m<n);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= m <= x;\nloop invariant 0 <= n;\nloop invariant x <= n;\nloop invariant m <= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int x,m,n;\n  n = unknown();\n  x = 0;\n  m = 0;\n  /*@\nloop invariant i1: 0 <= m <= x;\n\n\n\n*/\nwhile( x < n ) {\n    if(unknown())\n\tm = x;\n\tx++;\n  }\n  if( n > 0 )\n    {\n      {;\n//@ assert( 0<=m);\n}\n\n      {;\n//@ assert(m<n);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= n;\nloop invariant 0 <= m <= n;\nloop invariant m <= x;\nloop invariant m <= n;\nloop invariant m < n ==> x < n;\nloop invariant 0 < x ==> m < x;\nloop invariant m < x ==> m < n;\nloop invariant m == x ==> m == n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int x,m,n;\n  n = unknown();\n  x = 0;\n  m = 0;\n  /*@\n\n\nloop invariant i3: m <= x;\n\n\nloop invariant i6: 0 < x ==> m < x;\nloop invariant i7: m < x ==> m < n;\n\n*/\nwhile( x < n ) {\n    if(unknown())\n\tm = x;\n\tx++;\n  }\n  if( n > 0 )\n    {\n      {;\n//@ assert( 0<=m);\n}\n\n      {;\n//@ assert(m<n);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant n >= 0;\nloop invariant 0 <= x <= n;\nloop invariant m <= x;\nloop invariant m >= 0;\nloop invariant m < n;\nloop invariant (m == 0 || unknown() == 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int x,m,n;\n  n = unknown();\n  x = 0;\n  m = 0;\n  /*@\n\n\nloop invariant i3: m <= x;\nloop invariant i4: m >= 0;\n\n\n*/\nwhile( x < n ) {\n    if(unknown())\n\tm = x;\n\tx++;\n  }\n  if( n > 0 )\n    {\n      {;\n//@ assert( 0<=m);\n}\n\n      {;\n//@ assert(m<n);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 30: unexpected token ')'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int x,m,n;\n  n = unknown();\n  x = 0;\n  m = 0;\n  /*@\nloop invariant i1: 0 <= x <= n;\nloop invariant i2: m <= x;\nloop invariant i3: m >= 0;\nloop invariant i4: m <= n;\nloop invariant i5: n > 0 ==> m <= n;\nloop invariant i6: n > 0 ==> m >= 0;\nloop invariant i7: n > 0 ==> m <= x;\nloop invariant i8: m <= x <= n;\nloop invariant i9: m < n;\nloop invariant i10: m == 0 ==> n == 0;\nloop invariant i11: m > 0 ==> n > 0;\nloop invariant i12: m == 0 ==> x == 0;\nloop invariant i13: m > 0 ==> x > 0;\nloop invariant i14: m == 0 ==> unknown() == 0;\nloop invariant i15: m > 0 ==> unknown() == 1;\nloop invariant i16: m == 0 ==> m == 0;\nloop invariant i17: m > 0 ==> m == x;\nloop invariant i18: (x < n) ==> (0 <= m);\nloop invariant i19: (x < n) ==> (m < n);\nloop invariant i20: 0 <= m <= n;\nloop invariant i21: 1 <= x <= n;\nloop invariant i22: (x == n) ==> (m == x);\nloop invariant i23: x == n ==> m == n;\nloop invariant i24: x >= 0;\nloop invariant i25: x <= n;\nloop invariant i26: n >= 0;\nloop invariant i27: n > 0 ==> m < n;\nloop invariant i28: n > 0 ==> x > 0;\nloop invariant i29: n <= 0 ==> m <= 0;\nloop invariant i30: n <= 0 ==> x <= 0;\nloop invariant i31: n <= 0 ==> m <= x;\nloop invariant i32: n <= 0 ==> x <= n;\nloop invariant i33: x == n ==> m == x;\nloop invariant i34: x == n ==> x == m;\nloop invariant i35: x >= m;\nloop invariant i36: m < x ==> m < n;\nloop invariant i37: m == x ==> m < n;\nloop invariant i38: m == x ==> m > 0;\nloop invariant i39: m < x ==> m > 0;\nloop invariant i40: if (n > 0) then m <= n - 1;\nloop invariant i41: 0 <= m <= x <= n;\nloop invariant i42: 0 <= m <= x;\nloop invariant i43: 0 <= n;\nloop invariant i44: m < n ==> x < n;\nloop invariant i45: 0 < x ==> m < x;\nloop invariant i46: m == x ==> m == n;\nloop invariant i47: (m == 0 || unknown() == 0);\n*/\nwhile( x < n ) {\n    if(unknown())\n\tm = x;\n\tx++;\n  }\n  if( n > 0 )\n    {\n      {;\n//@ assert( 0<=m);\n}\n\n      {;\n//@ assert(m<n);\n}\n\n    }\n}",
        "combined_annotation_num_solver_calls": 16,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int x,m,n;\n  n = unknown();\n  x = 0;\n  m = 0;\n  /*@\n\nloop invariant i2: m <= x;\nloop invariant i3: m >= 0;\n\nloop invariant i5: n > 0 ==> m <= n;\nloop invariant i6: n > 0 ==> m >= 0;\nloop invariant i7: n > 0 ==> m <= x;\n\n\n\nloop invariant i11: m > 0 ==> n > 0;\n\nloop invariant i13: m > 0 ==> x > 0;\n\n\nloop invariant i16: m == 0 ==> m == 0;\n\nloop invariant i18: (x < n) ==> (0 <= m);\nloop invariant i19: (x < n) ==> (m < n);\n\n\n\n\nloop invariant i24: x >= 0;\n\n\nloop invariant i27: n > 0 ==> m < n;\n\nloop invariant i29: n <= 0 ==> m <= 0;\nloop invariant i30: n <= 0 ==> x <= 0;\nloop invariant i31: n <= 0 ==> m <= x;\n\n\n\nloop invariant i35: x >= m;\nloop invariant i36: m < x ==> m < n;\n\n\n\n\n\nloop invariant i42: 0 <= m <= x;\n\n\nloop invariant i45: 0 < x ==> m < x;\n\n\n*/\nwhile( x < n ) {\n    if(unknown())\n\tm = x;\n\tx++;\n  }\n  if( n > 0 )\n    {\n      {;\n//@ assert( 0<=m);\n}\n\n      {;\n//@ assert(m<n);\n}\n\n    }\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c"
        ],
        "skipped": [],
        "total": 29,
        "success_count": 28,
        "failure_count": 1,
        "success_rate": 0.9655172413793104
    }
}