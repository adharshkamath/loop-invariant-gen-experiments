{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(){\n    int  x=unknown_int();\n    int  y=unknown_int();\nassume(y <= 1000000);\n    if(y>0){\n        while(x<100){\n            x=x+y;\n        }\n    }\n    {;\n//@ assert(y<=0 ||(y>0 && x>=100));\n}\n\n    return 0;\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant y >= 0;\nloop invariant y <= 1000000;\nloop invariant x <= 100 + y;\nloop invariant x >= y;\nloop invariant y > 0 ==> x == 100;\nloop invariant y <= 0 ==> x == 0;\nloop invariant y <= 0 ==> y <= 1000000;\nloop invariant y <= 0 ==> y >= 0;\nloop invariant y <= 0 ==> x >= 0;\nloop invariant y <= 0 ==> x <= 100;\nloop invariant y <= 0 ==> x >= y;\nloop invariant y <= 0 ==> x <= y;\nloop invariant y <= 0 ==> x == y;\nloop invariant y <= 0 ==> x == x;\nloop invariant y <= 0 ==> y == y;\nloop invariant y <= 0 ==> x <= y;\nloop invariant y <= 0 ==> x >= y;\nloop invariant y <= 0 ==> x == y;\nloop invariant y <= 0 ==> x == x;\nloop invariant y <= 0 ==> y == y;\nloop invariant y <= 0 ==> x <= y;\nloop invariant y <= 0 ==> x >= y;\nloop invariant y <= 0 ==> x == y;\nloop invariant y <= 0 ==> x == x;\nloop invariant y <= 0 ==> y == y;\nloop invariant y <= 0 ==> x <= y;\nloop invariant y <= 0 ==> x >= y;\nloop invariant y <= 0 ==> x == y;\nloop invariant y <= 0 ==> x == x;\nloop invariant y <= 0 ==> y == y;\nloop invariant y <= 0 ==> x <= y;\nloop invariant y <= 0 ==> x >= y;\nloop invariant y <= 0 ==> x == y;\nloop invariant y <= 0 ==> x == x;\nloop invariant y <= 0 ==> y == y;\nloop invariant y <= 0 ==> x <= y;\nloop invariant y <= 0 ==> x >= y;\nloop invariant y <= 0 ==> x == y;\nloop invariant y <= 0 ==> x == x;\nloop invariant y <= 0 ==> y == y;\nloop invariant y <= 0 ==> x <= y;\nloop invariant y <= 0 ==> x >= y;\nloop invariant y <= 0 ==> x == y;\nloop invariant y <= 0 ==> x == x;\nloop invariant y <= 0 ==> y == y;\nloop invariant y <= 0 ==> x <= y;\nloop invariant y <= 0 ==> x >= y;\nloop invariant y <= 0 ==> x == y;\nloop invariant y <= 0 ==> x == x;\nloop invariant y <= 0 ==> y == y;\nloop invariant y <= 0 ==> x <= y;\nloop invariant y <= 0 ==> x >= y;\nloop invariant y <= 0 ==> x == y;\nloop invariant y <= 0 ==> x == x;\nloop invariant y <= 0 ==> y == y;\nloop invariant y <= 0 ==> x <= y;\nloop invariant y <= 0 ==> x >= y;\nloop invariant y <= 0 ==> x == y;\nloop invariant y <= 0 ==> x == x;\nloop invariant y <= 0 ==> y == y;\nloop invariant y <= 0 ==> x <= y;\nloop invariant y <= 0 ==> x >= y;\nloop invariant y <= 0 ==> x == y;\nloop invariant y <= 0 ==> x == x;\nloop invariant y <= 0 ==> y == y;\nloop invariant y <= 0 ==> x <= y;\nloop invariant y <= 0 ==> x >= y;\nloop invariant y <= 0 ==> x == y;\nloop invariant y <= 0 ==> x == x;\nloop invariant y <= 0 ==> y == y;\nloop invariant y <= 0 ==> x <= y;\nloop invariant y <= 0 ==> x >= y;\nloop invariant y <= 0 ==> x == y;\nloop invariant y <= 0 ==> x == x;\nloop invariant y <= 0 ==> y == y;\nloop invariant y <= 0 ==> x <= y;\nloop invariant y <= 0 ==> x >= y;\nloop invariant y <= 0 ==> x == y;\nloop invariant y <= 0 ==> x == x;\nloop invariant y <= 0 ==> y == y;\nloop invariant y <= 0 ==> x <= y;\nloop invariant y <= 0 ==> x >= y;\nloop invariant y <= 0 ==> x == y;\nloop invariant y <= 0 ==> x == x;\nloop invariant y <= 0 ==> y == y;\nloop invariant y <= 0 ==> x <= y;\nloop invariant y <= 0 ==> x >= y;\nloop invariant y <= 0 ==> x == y;\nloop invariant y <= 0 ==> x == x;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant 0 <= y <= 1000000;\nloop invariant (x + y) * (x + y - 1) / 2 >= 0;\nloop invariant x + y >= 100;\nloop invariant y <= 1000000;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant y <= 1000000;\nloop invariant x <= 100 + y * (100 - x) / y;\nloop invariant y <= 1000000 ==> x >= 100;\nloop invariant x >= 100 ==> y <= 1000000;\nloop invariant x < 100 ==> y > 0;\nloop invariant x >= 100 ==> y > 0;\nloop invariant y <= 1000000 ==> x < 100;\nloop invariant x >= 100 ==> x >= 100;\nloop invariant x < 100 ==> x < 100;\nloop invariant y <= 1000000 ==> x <= 100 + y * (100 - x) / y;\nloop invariant y > 0 ==> x < 100 + y * (100 - x) / y;\nloop invariant x >= 100 ==> x >= 100 + y * (100 - x) / y;\nloop invariant x < 100 ==> x < 100 + y * (100 - x) / y;\nloop invariant x >= 100 ==> y <= 1000000;\nloop invariant x < 100 ==> y <= 1000000;\nloop invariant x >= 100 ==> y > 0;\nloop invariant x < 100 ==> y > 0;\nloop invariant x >= 100 ==> y <= 1000000;\nloop invariant x < 100 ==> y <= 1000000;\nloop invariant x >= 100 ==> y > 0;\nloop invariant x < 100 ==> y > 0;\nloop invariant x >= 100 ==> y <= 1000000;\nloop invariant x < 100 ==> y <= 1000000;\nloop invariant x >= 100 ==> y > 0;\nloop invariant x < 100 ==> y > 0;\nloop invariant x >= 100 ==> y <= 1000000;\nloop invariant x < 100 ==> y <= 1000000;\nloop invariant x >= 100 ==> y > 0;\nloop invariant x < 100 ==> y > 0;\nloop invariant x >= 100 ==> y <= 1000000;\nloop invariant x < 100 ==> y <= 1000000;\nloop invariant x >= 100 ==> y > 0;\nloop invariant x < 100 ==> y > 0;\nloop invariant x >= 100 ==> y <= 1000000;\nloop invariant x < 100 ==> y <= 1000000;\nloop invariant x >= 100 ==> y > 0;\nloop invariant x < 100 ==> y > 0;\nloop invariant x >= 100 ==> y <= 1000000;\nloop invariant x < 100 ==> y <= 1000000;\nloop invariant x >= 100 ==> y > 0;\nloop invariant x < 100 ==> y > 0;\nloop invariant x >= 100 ==> y <= 1000000;\nloop invariant x < 100 ==> y <= 1000000;\nloop invariant x >= 100 ==> y > 0;\nloop invariant x < 100 ==> y > 0;\nloop invariant x >= 100 ==> y <= 1000000;\nloop invariant x < 100 ==> y <= 1000000;\nloop invariant x >= 100 ==> y > 0;\nloop invariant x < 100 ==> y > 0;\nloop invariant x >= 100 ==> y <= 1000000;\nloop invariant x < 100 ==> y <= 1000000;\nloop invariant x >= 100 ==> y > 0;\nloop invariant x < 100 ==> y > 0;\nloop invariant x >= 100 ==> y <= 1000000;\nloop invariant x < 100 ==> y <= 1000000;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 100; y > 0 ==> x >= 100; y <= 1000000;\n*/\n```",
            "```\n/*@\nloop invariant y > 0 ==> x >= 100;\nloop invariant y <= 0 ==> true;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= 100;\nloop invariant y >= 1 && y <= 1000000;\nloop invariant y > 0 ==> (x >= 100);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant y > 0;\nloop invariant y <= 1000000;\nloop invariant (x >= 100) ==> (x >= y);\nloop invariant (x < 100) ==> (x < y);\nloop invariant (x < 100) ==> (y <= 1000000);\nloop invariant (x >= 100) ==> (y > 0);\nloop invariant (x >= 100) ==> (y <= 1000000);\nloop invariant (x < 100) ==> (y > 0);\nloop invariant (x < 100) ==> (y <= 1000000);\n*/\n```",
            "```\n/*@\nloop invariant 1 <= y <= 1000000;\nloop invariant x >= 100;\nloop invariant x >= y;\nloop invariant y >= 0;\nloop invariant x >= 1;\nloop invariant x <= (1 + (y - 1) * y / 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x;\nloop invariant y > 0;\nloop invariant x < 100;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 1000000;\nloop invariant y <= x <= 100 + y;\nloop invariant if( y > 0 ) then x >= 100 else x < 100;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant x == (y + (y-1) * (y-100) / 2);\nloop invariant y == (unknown_int() + (unknown_int() - 1) * (unknown_int() - 100) / 2);\nloop invariant (unknown_int() <= 1000000) ==> (y <= 1000000);\nloop invariant (unknown_int() <= 1000000) ==> (x >= y);\nloop invariant (unknown_int() <= 1000000) ==> (x >= (y + (y-1) * (y-100) / 2));\n*/\n```",
            "```\n/*@\nloop invariant y <= 1000000;\nloop invariant 0 <= x <= 100;\nloop invariant (y > 0 ==> x >= 100);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant y <= 1000000;\nloop invariant y > 0;\nloop invariant x >= 100 * y;\nloop invariant x >= 100;\nloop invariant y >= 0;\nloop invariant x >= y;\nloop invariant x >= 0;\nloop invariant x <= 100;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= 100;\nloop invariant y <= 1000000;\nloop invariant x >= y;\nloop invariant (y > 0 ==> x >= 100);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 1000000;\nloop invariant x >= 100;\nloop invariant y > 0 ==> x >= 100;\nloop invariant y <= 0 ==> x < 100;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant y >= 0;\nloop invariant y <= 1000000;\nloop invariant x <= 100 + y;\nloop invariant x >= y;\nloop invariant y > 0 ==> x == 100;\nloop invariant y <= 0 ==> x == 0;\nloop invariant y <= 0 ==> y <= 1000000;\nloop invariant y <= 0 ==> y >= 0;\nloop invariant y <= 0 ==> x >= 0;\nloop invariant y <= 0 ==> x <= 100;\nloop invariant y <= 0 ==> x >= y;\nloop invariant y <= 0 ==> x <= y;\nloop invariant y <= 0 ==> x == y;\nloop invariant y <= 0 ==> x == x;\nloop invariant y <= 0 ==> y == y;\nloop invariant y <= 0 ==> x <= y;\nloop invariant y <= 0 ==> x >= y;\nloop invariant y <= 0 ==> x == y;\nloop invariant y <= 0 ==> x == x;\nloop invariant y <= 0 ==> y == y;\nloop invariant y <= 0 ==> x <= y;\nloop invariant y <= 0 ==> x >= y;\nloop invariant y <= 0 ==> x == y;\nloop invariant y <= 0 ==> x == x;\nloop invariant y <= 0 ==> y == y;\nloop invariant y <= 0 ==> x <= y;\nloop invariant y <= 0 ==> x >= y;\nloop invariant y <= 0 ==> x == y;\nloop invariant y <= 0 ==> x == x;\nloop invariant y <= 0 ==> y == y;\nloop invariant y <= 0 ==> x <= y;\nloop invariant y <= 0 ==> x >= y;\nloop invariant y <= 0 ==> x == y;\nloop invariant y <= 0 ==> x == x;\nloop invariant y <= 0 ==> y == y;\nloop invariant y <= 0 ==> x <= y;\nloop invariant y <= 0 ==> x >= y;\nloop invariant y <= 0 ==> x == y;\nloop invariant y <= 0 ==> x == x;\nloop invariant y <= 0 ==> y == y;\nloop invariant y <= 0 ==> x <= y;\nloop invariant y <= 0 ==> x >= y;\nloop invariant y <= 0 ==> x == y;\nloop invariant y <= 0 ==> x == x;\nloop invariant y <= 0 ==> y == y;\nloop invariant y <= 0 ==> x <= y;\nloop invariant y <= 0 ==> x >= y;\nloop invariant y <= 0 ==> x == y;\nloop invariant y <= 0 ==> x == x;\nloop invariant y <= 0 ==> y == y;\nloop invariant y <= 0 ==> x <= y;\nloop invariant y <= 0 ==> x >= y;\nloop invariant y <= 0 ==> x == y;\nloop invariant y <= 0 ==> x == x;\nloop invariant y <= 0 ==> y == y;\nloop invariant y <= 0 ==> x <= y;\nloop invariant y <= 0 ==> x >= y;\nloop invariant y <= 0 ==> x == y;\nloop invariant y <= 0 ==> x == x;\nloop invariant y <= 0 ==> y == y;\nloop invariant y <= 0 ==> x <= y;\nloop invariant y <= 0 ==> x >= y;\nloop invariant y <= 0 ==> x == y;\nloop invariant y <= 0 ==> x == x;\nloop invariant y <= 0 ==> y == y;\nloop invariant y <= 0 ==> x <= y;\nloop invariant y <= 0 ==> x >= y;\nloop invariant y <= 0 ==> x == y;\nloop invariant y <= 0 ==> x == x;\nloop invariant y <= 0 ==> y == y;\nloop invariant y <= 0 ==> x <= y;\nloop invariant y <= 0 ==> x >= y;\nloop invariant y <= 0 ==> x == y;\nloop invariant y <= 0 ==> x == x;\nloop invariant y <= 0 ==> y == y;\nloop invariant y <= 0 ==> x <= y;\nloop invariant y <= 0 ==> x >= y;\nloop invariant y <= 0 ==> x == y;\nloop invariant y <= 0 ==> x == x;\nloop invariant y <= 0 ==> y == y;\nloop invariant y <= 0 ==> x <= y;\nloop invariant y <= 0 ==> x >= y;\nloop invariant y <= 0 ==> x == y;\nloop invariant y <= 0 ==> x == x;\nloop invariant y <= 0 ==> y == y;\nloop invariant y <= 0 ==> x <= y;\nloop invariant y <= 0 ==> x >= y;\nloop invariant y <= 0 ==> x == y;\nloop invariant y <= 0 ==> x == x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(){\n    int  x=unknown_int();\n    int  y=unknown_int();\nassume(y <= 1000000);\n    if(y>0){\n        /*@\n\nloop invariant i2: y >= 0;\nloop invariant i3: y <= 1000000;\n\n\n\nloop invariant i7: y <= 0 ==> x == 0;\nloop invariant i8: y <= 0 ==> y <= 1000000;\nloop invariant i9: y <= 0 ==> y >= 0;\nloop invariant i10: y <= 0 ==> x >= 0;\nloop invariant i11: y <= 0 ==> x <= 100;\nloop invariant i12: y <= 0 ==> x >= y;\nloop invariant i13: y <= 0 ==> x <= y;\nloop invariant i14: y <= 0 ==> x == y;\nloop invariant i15: y <= 0 ==> x == x;\nloop invariant i16: y <= 0 ==> y == y;\n*/\nwhile(x<100){\n            x=x+y;\n        }\n    }\n    {;\n//@ assert(y<=0 ||(y>0 && x>=100));\n}\n\n    return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant 0 <= y <= 1000000;\nloop invariant (x + y) * (x + y - 1) / 2 >= 0;\nloop invariant x + y >= 100;\nloop invariant y <= 1000000;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(){\n    int  x=unknown_int();\n    int  y=unknown_int();\nassume(y <= 1000000);\n    if(y>0){\n        /*@\n\nloop invariant i2: 0 <= y <= 1000000;\nloop invariant i3: (x + y) * (x + y - 1) / 2 >= 0;\n\nloop invariant i5: y <= 1000000;\n*/\nwhile(x<100){\n            x=x+y;\n        }\n    }\n    {;\n//@ assert(y<=0 ||(y>0 && x>=100));\n}\n\n    return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant y <= 1000000;\nloop invariant x <= 100 + y * (100 - x) / y;\nloop invariant y <= 1000000 ==> x >= 100;\nloop invariant x >= 100 ==> y <= 1000000;\nloop invariant x < 100 ==> y > 0;\nloop invariant x >= 100 ==> y > 0;\nloop invariant y <= 1000000 ==> x < 100;\nloop invariant x >= 100 ==> x >= 100;\nloop invariant x < 100 ==> x < 100;\nloop invariant y <= 1000000 ==> x <= 100 + y * (100 - x) / y;\nloop invariant y > 0 ==> x < 100 + y * (100 - x) / y;\nloop invariant x >= 100 ==> x >= 100 + y * (100 - x) / y;\nloop invariant x < 100 ==> x < 100 + y * (100 - x) / y;\nloop invariant x >= 100 ==> y <= 1000000;\nloop invariant x < 100 ==> y <= 1000000;\nloop invariant x >= 100 ==> y > 0;\nloop invariant x < 100 ==> y > 0;\nloop invariant x >= 100 ==> y <= 1000000;\nloop invariant x < 100 ==> y <= 1000000;\nloop invariant x >= 100 ==> y > 0;\nloop invariant x < 100 ==> y > 0;\nloop invariant x >= 100 ==> y <= 1000000;\nloop invariant x < 100 ==> y <= 1000000;\nloop invariant x >= 100 ==> y > 0;\nloop invariant x < 100 ==> y > 0;\nloop invariant x >= 100 ==> y <= 1000000;\nloop invariant x < 100 ==> y <= 1000000;\nloop invariant x >= 100 ==> y > 0;\nloop invariant x < 100 ==> y > 0;\nloop invariant x >= 100 ==> y <= 1000000;\nloop invariant x < 100 ==> y <= 1000000;\nloop invariant x >= 100 ==> y > 0;\nloop invariant x < 100 ==> y > 0;\nloop invariant x >= 100 ==> y <= 1000000;\nloop invariant x < 100 ==> y <= 1000000;\nloop invariant x >= 100 ==> y > 0;\nloop invariant x < 100 ==> y > 0;\nloop invariant x >= 100 ==> y <= 1000000;\nloop invariant x < 100 ==> y <= 1000000;\nloop invariant x >= 100 ==> y > 0;\nloop invariant x < 100 ==> y > 0;\nloop invariant x >= 100 ==> y <= 1000000;\nloop invariant x < 100 ==> y <= 1000000;\nloop invariant x >= 100 ==> y > 0;\nloop invariant x < 100 ==> y > 0;\nloop invariant x >= 100 ==> y <= 1000000;\nloop invariant x < 100 ==> y <= 1000000;\nloop invariant x >= 100 ==> y > 0;\nloop invariant x < 100 ==> y > 0;\nloop invariant x >= 100 ==> y <= 1000000;\nloop invariant x < 100 ==> y <= 1000000;\nloop invariant x >= 100 ==> y > 0;\nloop invariant x < 100 ==> y > 0;\nloop invariant x >= 100 ==> y <= 1000000;\nloop invariant x < 100 ==> y <= 1000000;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(){\n    int  x=unknown_int();\n    int  y=unknown_int();\nassume(y <= 1000000);\n    if(y>0){\n        /*@\n\nloop invariant i2: y <= 1000000;\n\n\nloop invariant i5: x >= 100 ==> y <= 1000000;\nloop invariant i6: x < 100 ==> y > 0;\nloop invariant i7: x >= 100 ==> y > 0;\n\nloop invariant i9: x >= 100 ==> x >= 100;\nloop invariant i10: x < 100 ==> x < 100;\n\n\nloop invariant i13: x >= 100 ==> x >= 100 + y * (100 - x) / y;\nloop invariant i14: x < 100 ==> x < 100 + y * (100 - x) / y;\nloop invariant i15: x < 100 ==> y <= 1000000;\n*/\nwhile(x<100){\n            x=x+y;\n        }\n    }\n    {;\n//@ assert(y<=0 ||(y>0 && x>=100));\n}\n\n    return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 100; y > 0 ==> x >= 100; y <= 1000000;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(){\n    int  x=unknown_int();\n    int  y=unknown_int();\nassume(y <= 1000000);\n    if(y>0){\n        /*@\n\n*/\nwhile(x<100){\n            x=x+y;\n        }\n    }\n    {;\n//@ assert(y<=0 ||(y>0 && x>=100));\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant y > 0 ==> x >= 100;\nloop invariant y <= 0 ==> true;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(){\n    int  x=unknown_int();\n    int  y=unknown_int();\nassume(y <= 1000000);\n    if(y>0){\n        /*@\n\n\n*/\nwhile(x<100){\n            x=x+y;\n        }\n    }\n    {;\n//@ assert(y<=0 ||(y>0 && x>=100));\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= 100;\nloop invariant y >= 1 && y <= 1000000;\nloop invariant y > 0 ==> (x >= 100);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(){\n    int  x=unknown_int();\n    int  y=unknown_int();\nassume(y <= 1000000);\n    if(y>0){\n        /*@\n\nloop invariant i2: y >= 1 && y <= 1000000;\n\n*/\nwhile(x<100){\n            x=x+y;\n        }\n    }\n    {;\n//@ assert(y<=0 ||(y>0 && x>=100));\n}\n\n    return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant y > 0;\nloop invariant y <= 1000000;\nloop invariant (x >= 100) ==> (x >= y);\nloop invariant (x < 100) ==> (x < y);\nloop invariant (x < 100) ==> (y <= 1000000);\nloop invariant (x >= 100) ==> (y > 0);\nloop invariant (x >= 100) ==> (y <= 1000000);\nloop invariant (x < 100) ==> (y > 0);\nloop invariant (x < 100) ==> (y <= 1000000);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(){\n    int  x=unknown_int();\n    int  y=unknown_int();\nassume(y <= 1000000);\n    if(y>0){\n        /*@\n\nloop invariant i2: y > 0;\nloop invariant i3: y <= 1000000;\n\n\nloop invariant i6: (x < 100) ==> (y <= 1000000);\nloop invariant i7: (x >= 100) ==> (y > 0);\nloop invariant i8: (x >= 100) ==> (y <= 1000000);\nloop invariant i9: (x < 100) ==> (y > 0);\n*/\nwhile(x<100){\n            x=x+y;\n        }\n    }\n    {;\n//@ assert(y<=0 ||(y>0 && x>=100));\n}\n\n    return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 1 <= y <= 1000000;\nloop invariant x >= 100;\nloop invariant x >= y;\nloop invariant y >= 0;\nloop invariant x >= 1;\nloop invariant x <= (1 + (y - 1) * y / 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(){\n    int  x=unknown_int();\n    int  y=unknown_int();\nassume(y <= 1000000);\n    if(y>0){\n        /*@\nloop invariant i1: 1 <= y <= 1000000;\n\n\nloop invariant i4: y >= 0;\n\n\n*/\nwhile(x<100){\n            x=x+y;\n        }\n    }\n    {;\n//@ assert(y<=0 ||(y>0 && x>=100));\n}\n\n    return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x;\nloop invariant y > 0;\nloop invariant x < 100;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(){\n    int  x=unknown_int();\n    int  y=unknown_int();\nassume(y <= 1000000);\n    if(y>0){\n        /*@\n\nloop invariant i2: y > 0;\n\n*/\nwhile(x<100){\n            x=x+y;\n        }\n    }\n    {;\n//@ assert(y<=0 ||(y>0 && x>=100));\n}\n\n    return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 1000000;\nloop invariant y <= x <= 100 + y;\nloop invariant if( y > 0 ) then x >= 100 else x < 100;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(){\n    int  x=unknown_int();\n    int  y=unknown_int();\nassume(y <= 1000000);\n    if(y>0){\n        /*@\nloop invariant i1: 0 <= y <= 1000000;\n\n\n*/\nwhile(x<100){\n            x=x+y;\n        }\n    }\n    {;\n//@ assert(y<=0 ||(y>0 && x>=100));\n}\n\n    return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant x == (y + (y-1) * (y-100) / 2);\nloop invariant y == (unknown_int() + (unknown_int() - 1) * (unknown_int() - 100) / 2);\nloop invariant (unknown_int() <= 1000000) ==> (y <= 1000000);\nloop invariant (unknown_int() <= 1000000) ==> (x >= y);\nloop invariant (unknown_int() <= 1000000) ==> (x >= (y + (y-1) * (y-100) / 2));\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(){\n    int  x=unknown_int();\n    int  y=unknown_int();\nassume(y <= 1000000);\n    if(y>0){\n        /*@\n\n\n\n\n\n\n*/\nwhile(x<100){\n            x=x+y;\n        }\n    }\n    {;\n//@ assert(y<=0 ||(y>0 && x>=100));\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant y <= 1000000;\nloop invariant 0 <= x <= 100;\nloop invariant (y > 0 ==> x >= 100);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(){\n    int  x=unknown_int();\n    int  y=unknown_int();\nassume(y <= 1000000);\n    if(y>0){\n        /*@\nloop invariant i1: y <= 1000000;\n\n\n*/\nwhile(x<100){\n            x=x+y;\n        }\n    }\n    {;\n//@ assert(y<=0 ||(y>0 && x>=100));\n}\n\n    return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant y <= 1000000;\nloop invariant y > 0;\nloop invariant x >= 100 * y;\nloop invariant x >= 100;\nloop invariant y >= 0;\nloop invariant x >= y;\nloop invariant x >= 0;\nloop invariant x <= 100;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(){\n    int  x=unknown_int();\n    int  y=unknown_int();\nassume(y <= 1000000);\n    if(y>0){\n        /*@\n\nloop invariant i2: y <= 1000000;\nloop invariant i3: y > 0;\n\n\nloop invariant i6: y >= 0;\n\n\n\n*/\nwhile(x<100){\n            x=x+y;\n        }\n    }\n    {;\n//@ assert(y<=0 ||(y>0 && x>=100));\n}\n\n    return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= 100;\nloop invariant y <= 1000000;\nloop invariant x >= y;\nloop invariant (y > 0 ==> x >= 100);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(){\n    int  x=unknown_int();\n    int  y=unknown_int();\nassume(y <= 1000000);\n    if(y>0){\n        /*@\n\nloop invariant i2: y <= 1000000;\n\n\n*/\nwhile(x<100){\n            x=x+y;\n        }\n    }\n    {;\n//@ assert(y<=0 ||(y>0 && x>=100));\n}\n\n    return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 1000000;\nloop invariant x >= 100;\nloop invariant y > 0 ==> x >= 100;\nloop invariant y <= 0 ==> x < 100;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(){\n    int  x=unknown_int();\n    int  y=unknown_int();\nassume(y <= 1000000);\n    if(y>0){\n        /*@\nloop invariant i1: 0 <= y <= 1000000;\n\n\nloop invariant i4: y <= 0 ==> x < 100;\n*/\nwhile(x<100){\n            x=x+y;\n        }\n    }\n    {;\n//@ assert(y<=0 ||(y>0 && x>=100));\n}\n\n    return 0;\n}",
                "checker_output_after_prune": true
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 47: unexpected token 'y'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(){\n    int  x=unknown_int();\n    int  y=unknown_int();\nassume(y <= 1000000);\n    if(y>0){\n        /*@\nloop invariant i1: 0 <= x <= 100;\nloop invariant i2: y >= 0;\nloop invariant i3: y <= 1000000;\nloop invariant i4: x <= 100 + y;\nloop invariant i5: x >= y;\nloop invariant i6: y > 0 ==> x == 100;\nloop invariant i7: y <= 0 ==> x == 0;\nloop invariant i8: y <= 0 ==> y <= 1000000;\nloop invariant i9: y <= 0 ==> y >= 0;\nloop invariant i10: y <= 0 ==> x >= 0;\nloop invariant i11: y <= 0 ==> x <= 100;\nloop invariant i12: y <= 0 ==> x >= y;\nloop invariant i13: y <= 0 ==> x <= y;\nloop invariant i14: y <= 0 ==> x == y;\nloop invariant i15: y <= 0 ==> x == x;\nloop invariant i16: y <= 0 ==> y == y;\nloop invariant i17: 0 <= y <= 1000000;\nloop invariant i18: (x + y) * (x + y - 1) / 2 >= 0;\nloop invariant i19: x + y >= 100;\nloop invariant i20: x <= 100 + y * (100 - x) / y;\nloop invariant i21: y <= 1000000 ==> x >= 100;\nloop invariant i22: x >= 100 ==> y <= 1000000;\nloop invariant i23: x < 100 ==> y > 0;\nloop invariant i24: x >= 100 ==> y > 0;\nloop invariant i25: y <= 1000000 ==> x < 100;\nloop invariant i26: x >= 100 ==> x >= 100;\nloop invariant i27: x < 100 ==> x < 100;\nloop invariant i28: y <= 1000000 ==> x <= 100 + y * (100 - x) / y;\nloop invariant i29: y > 0 ==> x < 100 + y * (100 - x) / y;\nloop invariant i30: x >= 100 ==> x >= 100 + y * (100 - x) / y;\nloop invariant i31: x < 100 ==> x < 100 + y * (100 - x) / y;\nloop invariant i32: x < 100 ==> y <= 1000000;\nloop invariant i33: 0 <= x <= 100; y > 0 ==> x >= 100; y <= 1000000;\nloop invariant i34: y > 0 ==> x >= 100;\nloop invariant i35: y <= 0 ==> true;\nloop invariant i36: 1 <= x <= 100;\nloop invariant i37: y >= 1 && y <= 1000000;\nloop invariant i38: y > 0 ==> (x >= 100);\nloop invariant i39: y > 0;\nloop invariant i40: (x >= 100) ==> (x >= y);\nloop invariant i41: (x < 100) ==> (x < y);\nloop invariant i42: (x < 100) ==> (y <= 1000000);\nloop invariant i43: (x >= 100) ==> (y > 0);\nloop invariant i44: (x >= 100) ==> (y <= 1000000);\nloop invariant i45: (x < 100) ==> (y > 0);\nloop invariant i46: 1 <= y <= 1000000;\nloop invariant i47: x >= 100;\nloop invariant i48: x >= 1;\nloop invariant i49: x <= (1 + (y - 1) * y / 2);\nloop invariant i50: 0 <= x;\nloop invariant i51: x < 100;\nloop invariant i52: y <= x <= 100 + y;\nloop invariant i53: if( y > 0 ) then x >= 100 else x < 100;\nloop invariant i54: x == (y + (y-1) * (y-100) / 2);\nloop invariant i55: y == (unknown_int() + (unknown_int() - 1) * (unknown_int() - 100) / 2);\nloop invariant i56: (unknown_int() <= 1000000) ==> (y <= 1000000);\nloop invariant i57: (unknown_int() <= 1000000) ==> (x >= y);\nloop invariant i58: (unknown_int() <= 1000000) ==> (x >= (y + (y-1) * (y-100) / 2));\nloop invariant i59: (y > 0 ==> x >= 100);\nloop invariant i60: x >= 100 * y;\nloop invariant i61: x >= 0;\nloop invariant i62: x <= 100;\nloop invariant i63: y <= 0 ==> x < 100;\n*/\nwhile(x<100){\n            x=x+y;\n        }\n    }\n    {;\n//@ assert(y<=0 ||(y>0 && x>=100));\n}\n\n    return 0;\n}",
        "combined_annotation_num_solver_calls": 17,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(){\n    int  x=unknown_int();\n    int  y=unknown_int();\nassume(y <= 1000000);\n    if(y>0){\n        /*@\n\nloop invariant i2: y >= 0;\nloop invariant i3: y <= 1000000;\n\n\n\nloop invariant i7: y <= 0 ==> x == 0;\nloop invariant i8: y <= 0 ==> y <= 1000000;\nloop invariant i9: y <= 0 ==> y >= 0;\nloop invariant i10: y <= 0 ==> x >= 0;\nloop invariant i11: y <= 0 ==> x <= 100;\nloop invariant i12: y <= 0 ==> x >= y;\nloop invariant i13: y <= 0 ==> x <= y;\nloop invariant i14: y <= 0 ==> x == y;\nloop invariant i15: y <= 0 ==> x == x;\nloop invariant i16: y <= 0 ==> y == y;\nloop invariant i17: 0 <= y <= 1000000;\n\n\n\n\nloop invariant i22: x >= 100 ==> y <= 1000000;\nloop invariant i23: x < 100 ==> y > 0;\nloop invariant i24: x >= 100 ==> y > 0;\n\nloop invariant i26: x >= 100 ==> x >= 100;\nloop invariant i27: x < 100 ==> x < 100;\n\n\nloop invariant i30: x >= 100 ==> x >= 100 + y * (100 - x) / y;\nloop invariant i31: x < 100 ==> x < 100 + y * (100 - x) / y;\nloop invariant i32: x < 100 ==> y <= 1000000;\n\n\n\n\nloop invariant i37: y >= 1 && y <= 1000000;\n\nloop invariant i39: y > 0;\n\n\nloop invariant i42: (x < 100) ==> (y <= 1000000);\nloop invariant i43: (x >= 100) ==> (y > 0);\nloop invariant i44: (x >= 100) ==> (y <= 1000000);\nloop invariant i45: (x < 100) ==> (y > 0);\nloop invariant i46: 1 <= y <= 1000000;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i63: y <= 0 ==> x < 100;\n*/\nwhile(x<100){\n            x=x+y;\n        }\n    }\n    {;\n//@ assert(y<=0 ||(y>0 && x>=100));\n}\n\n    return 0;\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/split.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c"
        ],
        "skipped": [],
        "total": 66,
        "success_count": 56,
        "failure_count": 10,
        "success_rate": 0.8484848484848485
    }
}