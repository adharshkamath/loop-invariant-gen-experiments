{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  int i = 0;\n  int a = 0;\n\n  while (1) {\n    if (i == 20) {\n       goto LOOPEND;\n    } else {\n       i++;\n       a++;\n    }\n\n    if (i != a) {\n      goto ERROR;\n    }\n  }\n\n  LOOPEND:\n\n  if (a != 20) {\n     goto ERROR;\n  }\n\n  return (0);\n  { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n  return (-1);\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= i <= 20;\nloop invariant 0 <= a <= 20;\nloop invariant a >= i;\nloop invariant i == a ==> i != 20;\nloop invariant i != 20 ==> i == a;\nloop invariant a >= i ==> i != 20;\nloop invariant i != 20 ==> a >= i;\nloop invariant a == 20 ==> i == a;\nloop invariant a == 20 ==> i == 20;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 20;\nloop invariant a == i;\nloop invariant a <= 20;\n*/\n```",
            "```\n/*@\nloop invariant i <= 20;\nloop invariant a == i;\nloop invariant a <= 20;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 20;\nloop invariant 0 <= a <= 20;\nloop invariant i <= a;\nloop invariant (i == 0) ==> (a == 0);\nloop invariant (i == 1) ==> (a == 1);\nloop invariant (i == 2) ==> (a == 2);\nloop invariant (i == 3) ==> (a == 3);\nloop invariant (i == 4) ==> (a == 4);\nloop invariant (i == 5) ==> (a == 5);\nloop invariant (i == 6) ==> (a == 6);\nloop invariant (i == 7) ==> (a == 7);\nloop invariant (i == 8) ==> (a == 8);\nloop invariant (i == 9) ==> (a == 9);\nloop invariant (i == 10) ==> (a == 10);\nloop invariant (i == 11) ==> (a == 11);\nloop invariant (i == 12) ==> (a == 12);\nloop invariant (i == 13) ==> (a == 13);\nloop invariant (i == 14) ==> (a == 14);\nloop invariant (i == 15) ==> (a == 15);\nloop invariant (i == 16) ==> (a == 16);\nloop invariant (i == 17) ==> (a == 17);\nloop invariant (i == 18) ==> (a == 18);\nloop invariant (i == 19) ==> (a == 19);\nloop invariant (i == 20) ==> (a == 20);\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= a <= 20;\nloop invariant 0 <= i <= 20;\nloop invariant i == a;\nloop invariant i != 20 ==> i < 20;\nloop invariant a != 20 ==> a < 20;\nloop invariant i == 20 ==> i <= 20;\nloop invariant i == 20 ==> a <= 20;\nloop invariant i == 20 ==> a == 20;\nloop invariant a == 20 ==> a <= 20;\nloop invariant a == 20 ==> i <= 20;\nloop invariant a == 20 ==> i == 20;\nloop invariant i <= 20 ==> a <= i;\nloop invariant a <= 20 ==> i <= a;\nloop invariant i <= 20 ==> a <= a;\nloop invariant a <= 20 ==> i <= i;\nloop invariant i <= 20 ==> i <= 20;\nloop invariant a <= 20 ==> a <= 20;\nloop invariant i <= 20 ==> a <= a;\nloop invariant a <= 20 ==> i <= i;\nloop invariant i <= 20 ==> i <= 20;\nloop invariant a <= 20 ==> a <= 20;\nloop invariant i <= 20 ==> a <= a;\nloop invariant a <= 20 ==> i <= i;\nloop invariant i <= 20 ==> i <= 20;\nloop invariant a <= 20 ==> a <= 20;\nloop invariant i <= 20 ==> a <= a;\nloop invariant a <= 20 ==> i <= i;\nloop invariant i <= 20 ==> i <= 20;\nloop invariant a <= 20 ==> a <= 20;\nloop invariant i <= 20 ==> a <= a;\nloop invariant a <= 20 ==> i <= i;\nloop invariant i <= 20 ==> i <= 20;\nloop invariant a <= 20 ==> a <= 20;\nloop invariant i <= 20 ==> a <= a;\nloop invariant a <= 20 ==> i <= i;\nloop invariant i <= 20 ==> i <= 20;\nloop invariant a <= 20 ==> a <= 20;\nloop invariant i <= 20 ==> a <= a;\nloop invariant a <= 20 ==> i <= i;\nloop invariant i <= 20 ==> i <= 20;\nloop invariant a <= 20 ==> a <= 20;\nloop invariant i <= 20 ==> a <= a;\nloop invariant a <= 20 ==> i <= i;\nloop invariant i <= 20 ==> i <= 20;\nloop invariant a <= 20 ==> a <= 20;\nloop invariant i <= 20 ==> a <= a;\nloop invariant a <= 20 ==> i <= i;\nloop invariant i <= 20 ==> i <= 20;\nloop invariant a <= 20 ==> a <= 20;\nloop invariant i <= 20 ==> a <= a;\nloop invariant a <= 20 ==> i <= i;\nloop invariant i <= 20 ==> i <= 20;\nloop invariant a <= 20 ==> a <= 20;\nloop invariant i <= 20 ==> a <= a;\nloop invariant a <= 20 ==> i <= i;\nloop invariant i <= 20 ==> i <= 20;\nloop invariant a <= 20 ==> a <= 20;\nloop invariant i <= 20 ==> a <= a;\nloop invariant a <= 20 ==> i <= i;\nloop invariant i <= 20 ==> i <= 20;\nloop invariant a <= 20 ==> a <= 20;\nloop invariant i <= 20 ==> a <= a;\nloop invariant a <= 20 ==> i <= i;\nloop invariant i <= 20 ==> i <= 20;\nloop invariant a <= 20 ==> a <= 20;\nloop invariant i <= 20 ==> a <= a;\nloop invariant a <= 20 ==> i <= i;\nloop invariant i <= 20 ==> i <= 20;\nloop invariant a <= 20 ==> a <= 20;\nloop invariant i <= 20 ==> a <= a;\nloop invariant a <= 20 ==> i <= i;\nloop invariant i <= 20 ==> i <= 20;\nloop invariant a <= 20 ==> a <= 20;\nloop invariant i <= 20 ==> a <= a;\nloop invariant a <= 20 ==> i <= i;\nloop invariant i <= 20 ==> i <= 20;\nloop invariant a <= 20 ==> a <= 20;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 20;\nloop invariant 0 <= a <= i;\nloop invariant a = i;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 20;\nloop invariant 0 <= a <= 20;\nloop invariant i == a;\nloop invariant i == 0 || i == 1 || i == 2 || i == 3 || i == 4 || i == 5 || i == 6 || i == 7 || i == 8 || i == 9 || i == 10 || i == 11 || i == 12 || i == 13 || i == 14 || i == 15 || i == 16 || i == 17 || i == 18 || i == 19 || i == 20;\nloop invariant a == 0 || a == 1 || a == 2 || a == 3 || a == 4 || a == 5 || a == 6 || a == 7 || a == 8 || a == 9 || a == 10 || a == 11 || a == 12 || a == 13 || a == 14 || a == 15 || a == 16 || a == 17 || a == 18 || a == 19 || a == 20;\nloop invariant i == a ==> (i == 0 || i == 1 || i == 2 || i == 3 || i == 4 || i == 5 || i == 6 || i == 7 || i == 8 || i == 9 || i == 10 || i == 11 || i == 12 || i == 13 || i == 14 || i == 15 || i == 16 || i == 17 || i == 18 || i == 19 || i == 20);\nloop invariant i == a ==> (a == 0 || a == 1 || a == 2 || a == 3 || a == 4 || a == 5 || a == 6 || a == 7 || a == 8 || a == 9 || a == 10 || a == 11 || a == 12 || a == 13 || a == 14 || a == 15 || a == 16 || a == 17 || a == 18 || a == 19 || a == 20);\nloop invariant i == a ==> (i == a);\nloop invariant i == a ==> (i == 0 || i == 1 || i == 2 || i == 3 || i == 4 || i == 5 || i == 6 || i == 7 || i == 8 || i == 9 || i == 10 || i == 11 || i == 12 || i == 13 || i == 14 || i == 15 || i == 16 || i == 17 || i == 18 || i == 19 || i == 20) ==> (a == 0 || a == 1 || a == 2 || a == 3 || a == 4 || a == 5 || a == 6 || a == 7 || a == 8 || a == 9 || a == 10 || a == 11 || a == 12 || a == 13 || a == 14 || a == 15 || a == 16 || a == 17 || a == 18 || a == 19 || a == 20);\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 20;\nloop invariant 0 <= a <= i;\nloop invariant a == i;\nloop invariant i >= 0;\nloop invariant a >= 0;\nloop invariant a <= 20;\nloop invariant i <= 20;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 20;\nloop invariant 0 <= a <= 20;\nloop invariant a = i;\nloop invariant (if i == 20 then a == 20 else a < 20);\nloop invariant (if a == 20 then i == 20 else a <= i);\nloop invariant (if i == 20 then a == 20 else a < 20 ==> i <= a);\nloop invariant (if a == 20 then i == 20 else a <= i ==> i <= a);\nloop invariant (if i == 20 then a == 20 else a < 20 ==> a <= i);\nloop invariant (if a == 20 then i == 20 else a <= i ==> a <= i);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 20;\nloop invariant 0 <= a <= 20;\nloop invariant i == a;\nloop invariant i == 20 ==> a == 20;\nloop invariant a == 20 ==> i == 20;\nloop invariant i == 20 ==> a == i;\nloop invariant a == 20 ==> i == a;\nloop invariant i == 20 ==> i == a;\nloop invariant a == 20 ==> i == a;\nloop invariant i == 20 ==> i == 20;\nloop invariant a == 20 ==> a == 20;\nloop invariant i == 20 ==> a == 20;\nloop invariant a == 20 ==> i == 20;\nloop invariant i == 20 ==> i == a;\nloop invariant a == 20 ==> a == i;\nloop invariant i == 20 ==> i == a;\nloop invariant a == 20 ==> a == i;\nloop invariant i == 20 ==> i == 20;\nloop invariant a == 20 ==> a == 20;\nloop invariant i == 20 ==> i == 20;\nloop invariant a == 20 ==> a == 20;\nloop invariant i == 20 ==> i == 20;\nloop invariant a == 20 ==> a == 20;\nloop invariant i == 20 ==> i == 20;\nloop invariant a == 20 ==> a == 20;\nloop invariant i == 20 ==> i == 20;\nloop invariant a == 20 ==> a == 20;\nloop invariant i == 20 ==> i == 20;\nloop invariant a == 20 ==> a == 20;\nloop invariant i == 20 ==> i == 20;\nloop invariant a == 20 ==> a == 20;\nloop invariant i == 20 ==> i == 20;\nloop invariant a == 20 ==> a == 20;\nloop invariant i == 20 ==> i == 20;\nloop invariant a == 20 ==> a == 20;\nloop invariant i == 20 ==> i == 20;\nloop invariant a == 20 ==> a == 20;\nloop invariant i == 20 ==> i == 20;\nloop invariant a == 20 ==> a == 20;\nloop invariant i == 20 ==> i == 20;\nloop invariant a == 20 ==> a == 20;\nloop invariant i == 20 ==> i == 20;\nloop invariant a == 20 ==> a == 20;\nloop invariant i == 20 ==> i == 20;\nloop invariant a == 20 ==> a == 20;\nloop invariant i == 20 ==> i == 20;\nloop invariant a == 20 ==> a == 20;\nloop invariant i == 20 ==> i == 20;\nloop invariant a == 20 ==> a == 20;\nloop invariant i == 20 ==> i == 20;\nloop invariant a == 20 ==> a == 20;\nloop invariant i == 20 ==> i == 20;\nloop invariant a == 20 ==> a == 20;\nloop invariant i == 20 ==> i == 20;\nloop invariant a == 20 ==> a == 20;\nloop invariant i == 20 ==> i == 20;\nloop invariant a == 20 ==> a == 20;\nloop invariant i == 20 ==> i == 20;\nloop invariant a == 20 ==> a == 20;\nloop invariant i == 20 ==> i == 20;\nloop invariant a == 20 ==> a == 20;\nloop invariant i == 20 ==> i == 20;\nloop invariant a == 20 ==> a == 20;\nloop invariant i == 20 ==> i == 20;\nloop invariant a == 20 ==> a == 20;\nloop invariant i == 20 ==> i == 20;\nloop invariant a == 20 ==> a == 20;\nloop invariant i == 20 ==> i == 20;\nloop invariant a == 20 ==> a == 20;\nloop invariant i == 20 ==> i == 20;\nloop invariant a == 20 ==> a == 20;\nloop invariant i == 20 ==> i == 20;\nloop invariant a == 20 ==> a == 20;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 20;\nloop invariant 0 <= a <= 20;\nloop invariant i <= a;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 20;\nloop invariant 0 <= a <= 20;\nloop invariant a == i;\nloop invariant i == a;\nloop invariant i == 20 ==> a == 20;\nloop invariant a == 20 ==> i == 20;\n*/\n```",
            "```\n/*@\nloop invariant i <= 20;\nloop invariant a >= 0 && a <= i;\nloop invariant (a == i ==> (i == 20) && (a == 20));\nloop invariant (a != i ==> (i != 20));\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 20;\nloop invariant 0 <= a <= 20;\nloop invariant a >= i;\nloop invariant i == a ==> i != 20;\nloop invariant i != 20 ==> i == a;\nloop invariant a >= i ==> i != 20;\nloop invariant i != 20 ==> a >= i;\nloop invariant a == 20 ==> i == a;\nloop invariant a == 20 ==> i == 20;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  int i = 0;\n  int a = 0;\n\n  /*@\nloop invariant i1: 0 <= i <= 20;\nloop invariant i2: 0 <= a <= 20;\nloop invariant i3: a >= i;\n\nloop invariant i5: i != 20 ==> i == a;\n\nloop invariant i7: i != 20 ==> a >= i;\nloop invariant i8: a == 20 ==> i == a;\nloop invariant i9: a == 20 ==> i == 20;\n*/\nwhile (1) {\n    if (i == 20) {\n       goto LOOPEND;\n    } else {\n       i++;\n       a++;\n    }\n\n    if (i != a) {\n      goto ERROR;\n    }\n  }\n\n  LOOPEND:\n\n  if (a != 20) {\n     goto ERROR;\n  }\n\n  return (0);\n  { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n  return (-1);\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 20;\nloop invariant a == i;\nloop invariant a <= 20;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  int i = 0;\n  int a = 0;\n\n  /*@\nloop invariant i1: 0 <= i <= 20;\nloop invariant i2: a == i;\nloop invariant i3: a <= 20;\n*/\nwhile (1) {\n    if (i == 20) {\n       goto LOOPEND;\n    } else {\n       i++;\n       a++;\n    }\n\n    if (i != a) {\n      goto ERROR;\n    }\n  }\n\n  LOOPEND:\n\n  if (a != 20) {\n     goto ERROR;\n  }\n\n  return (0);\n  { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n  return (-1);\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant i <= 20;\nloop invariant a == i;\nloop invariant a <= 20;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  int i = 0;\n  int a = 0;\n\n  /*@\nloop invariant i1: i <= 20;\nloop invariant i2: a == i;\nloop invariant i3: a <= 20;\n*/\nwhile (1) {\n    if (i == 20) {\n       goto LOOPEND;\n    } else {\n       i++;\n       a++;\n    }\n\n    if (i != a) {\n      goto ERROR;\n    }\n  }\n\n  LOOPEND:\n\n  if (a != 20) {\n     goto ERROR;\n  }\n\n  return (0);\n  { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n  return (-1);\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 20;\nloop invariant 0 <= a <= 20;\nloop invariant i <= a;\nloop invariant (i == 0) ==> (a == 0);\nloop invariant (i == 1) ==> (a == 1);\nloop invariant (i == 2) ==> (a == 2);\nloop invariant (i == 3) ==> (a == 3);\nloop invariant (i == 4) ==> (a == 4);\nloop invariant (i == 5) ==> (a == 5);\nloop invariant (i == 6) ==> (a == 6);\nloop invariant (i == 7) ==> (a == 7);\nloop invariant (i == 8) ==> (a == 8);\nloop invariant (i == 9) ==> (a == 9);\nloop invariant (i == 10) ==> (a == 10);\nloop invariant (i == 11) ==> (a == 11);\nloop invariant (i == 12) ==> (a == 12);\nloop invariant (i == 13) ==> (a == 13);\nloop invariant (i == 14) ==> (a == 14);\nloop invariant (i == 15) ==> (a == 15);\nloop invariant (i == 16) ==> (a == 16);\nloop invariant (i == 17) ==> (a == 17);\nloop invariant (i == 18) ==> (a == 18);\nloop invariant (i == 19) ==> (a == 19);\nloop invariant (i == 20) ==> (a == 20);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  int i = 0;\n  int a = 0;\n\n  /*@\nloop invariant i1: 0 <= i <= 20;\nloop invariant i2: 0 <= a <= 20;\nloop invariant i3: i <= a;\nloop invariant i4: (i == 0) ==> (a == 0);\nloop invariant i5: (i == 1) ==> (a == 1);\nloop invariant i6: (i == 2) ==> (a == 2);\nloop invariant i7: (i == 3) ==> (a == 3);\nloop invariant i8: (i == 4) ==> (a == 4);\nloop invariant i9: (i == 5) ==> (a == 5);\nloop invariant i10: (i == 6) ==> (a == 6);\nloop invariant i11: (i == 7) ==> (a == 7);\nloop invariant i12: (i == 8) ==> (a == 8);\nloop invariant i13: (i == 9) ==> (a == 9);\nloop invariant i14: (i == 10) ==> (a == 10);\nloop invariant i15: (i == 11) ==> (a == 11);\nloop invariant i16: (i == 12) ==> (a == 12);\nloop invariant i17: (i == 13) ==> (a == 13);\nloop invariant i18: (i == 14) ==> (a == 14);\nloop invariant i19: (i == 15) ==> (a == 15);\nloop invariant i20: (i == 16) ==> (a == 16);\nloop invariant i21: (i == 17) ==> (a == 17);\nloop invariant i22: (i == 18) ==> (a == 18);\nloop invariant i23: (i == 19) ==> (a == 19);\nloop invariant i24: (i == 20) ==> (a == 20);\n*/\nwhile (1) {\n    if (i == 20) {\n       goto LOOPEND;\n    } else {\n       i++;\n       a++;\n    }\n\n    if (i != a) {\n      goto ERROR;\n    }\n  }\n\n  LOOPEND:\n\n  if (a != 20) {\n     goto ERROR;\n  }\n\n  return (0);\n  { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n  return (-1);\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  int i = 0;\n  int a = 0;\n\n  /*@\n\n*/\nwhile (1) {\n    if (i == 20) {\n       goto LOOPEND;\n    } else {\n       i++;\n       a++;\n    }\n\n    if (i != a) {\n      goto ERROR;\n    }\n  }\n\n  LOOPEND:\n\n  if (a != 20) {\n     goto ERROR;\n  }\n\n  return (0);\n  { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n  return (-1);\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= a <= 20;\nloop invariant 0 <= i <= 20;\nloop invariant i == a;\nloop invariant i != 20 ==> i < 20;\nloop invariant a != 20 ==> a < 20;\nloop invariant i == 20 ==> i <= 20;\nloop invariant i == 20 ==> a <= 20;\nloop invariant i == 20 ==> a == 20;\nloop invariant a == 20 ==> a <= 20;\nloop invariant a == 20 ==> i <= 20;\nloop invariant a == 20 ==> i == 20;\nloop invariant i <= 20 ==> a <= i;\nloop invariant a <= 20 ==> i <= a;\nloop invariant i <= 20 ==> a <= a;\nloop invariant a <= 20 ==> i <= i;\nloop invariant i <= 20 ==> i <= 20;\nloop invariant a <= 20 ==> a <= 20;\nloop invariant i <= 20 ==> a <= a;\nloop invariant a <= 20 ==> i <= i;\nloop invariant i <= 20 ==> i <= 20;\nloop invariant a <= 20 ==> a <= 20;\nloop invariant i <= 20 ==> a <= a;\nloop invariant a <= 20 ==> i <= i;\nloop invariant i <= 20 ==> i <= 20;\nloop invariant a <= 20 ==> a <= 20;\nloop invariant i <= 20 ==> a <= a;\nloop invariant a <= 20 ==> i <= i;\nloop invariant i <= 20 ==> i <= 20;\nloop invariant a <= 20 ==> a <= 20;\nloop invariant i <= 20 ==> a <= a;\nloop invariant a <= 20 ==> i <= i;\nloop invariant i <= 20 ==> i <= 20;\nloop invariant a <= 20 ==> a <= 20;\nloop invariant i <= 20 ==> a <= a;\nloop invariant a <= 20 ==> i <= i;\nloop invariant i <= 20 ==> i <= 20;\nloop invariant a <= 20 ==> a <= 20;\nloop invariant i <= 20 ==> a <= a;\nloop invariant a <= 20 ==> i <= i;\nloop invariant i <= 20 ==> i <= 20;\nloop invariant a <= 20 ==> a <= 20;\nloop invariant i <= 20 ==> a <= a;\nloop invariant a <= 20 ==> i <= i;\nloop invariant i <= 20 ==> i <= 20;\nloop invariant a <= 20 ==> a <= 20;\nloop invariant i <= 20 ==> a <= a;\nloop invariant a <= 20 ==> i <= i;\nloop invariant i <= 20 ==> i <= 20;\nloop invariant a <= 20 ==> a <= 20;\nloop invariant i <= 20 ==> a <= a;\nloop invariant a <= 20 ==> i <= i;\nloop invariant i <= 20 ==> i <= 20;\nloop invariant a <= 20 ==> a <= 20;\nloop invariant i <= 20 ==> a <= a;\nloop invariant a <= 20 ==> i <= i;\nloop invariant i <= 20 ==> i <= 20;\nloop invariant a <= 20 ==> a <= 20;\nloop invariant i <= 20 ==> a <= a;\nloop invariant a <= 20 ==> i <= i;\nloop invariant i <= 20 ==> i <= 20;\nloop invariant a <= 20 ==> a <= 20;\nloop invariant i <= 20 ==> a <= a;\nloop invariant a <= 20 ==> i <= i;\nloop invariant i <= 20 ==> i <= 20;\nloop invariant a <= 20 ==> a <= 20;\nloop invariant i <= 20 ==> a <= a;\nloop invariant a <= 20 ==> i <= i;\nloop invariant i <= 20 ==> i <= 20;\nloop invariant a <= 20 ==> a <= 20;\nloop invariant i <= 20 ==> a <= a;\nloop invariant a <= 20 ==> i <= i;\nloop invariant i <= 20 ==> i <= 20;\nloop invariant a <= 20 ==> a <= 20;\nloop invariant i <= 20 ==> a <= a;\nloop invariant a <= 20 ==> i <= i;\nloop invariant i <= 20 ==> i <= 20;\nloop invariant a <= 20 ==> a <= 20;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  int i = 0;\n  int a = 0;\n\n  /*@\nloop invariant i1: 0 <= a <= 20;\nloop invariant i2: 0 <= i <= 20;\nloop invariant i3: i == a;\nloop invariant i4: i != 20 ==> i < 20;\nloop invariant i5: a != 20 ==> a < 20;\nloop invariant i6: i == 20 ==> i <= 20;\nloop invariant i7: i == 20 ==> a <= 20;\nloop invariant i8: i == 20 ==> a == 20;\nloop invariant i9: a == 20 ==> a <= 20;\nloop invariant i10: a == 20 ==> i <= 20;\nloop invariant i11: a == 20 ==> i == 20;\nloop invariant i12: i <= 20 ==> a <= i;\nloop invariant i13: a <= 20 ==> i <= a;\nloop invariant i14: i <= 20 ==> a <= a;\nloop invariant i15: a <= 20 ==> i <= i;\nloop invariant i16: i <= 20 ==> i <= 20;\nloop invariant i17: a <= 20 ==> a <= 20;\n*/\nwhile (1) {\n    if (i == 20) {\n       goto LOOPEND;\n    } else {\n       i++;\n       a++;\n    }\n\n    if (i != a) {\n      goto ERROR;\n    }\n  }\n\n  LOOPEND:\n\n  if (a != 20) {\n     goto ERROR;\n  }\n\n  return (0);\n  { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n  return (-1);\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 20;\nloop invariant 0 <= a <= i;\nloop invariant a = i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  int i = 0;\n  int a = 0;\n\n  /*@\nloop invariant i1: 0 <= i <= 20;\nloop invariant i2: 0 <= a <= i;\n\n*/\nwhile (1) {\n    if (i == 20) {\n       goto LOOPEND;\n    } else {\n       i++;\n       a++;\n    }\n\n    if (i != a) {\n      goto ERROR;\n    }\n  }\n\n  LOOPEND:\n\n  if (a != 20) {\n     goto ERROR;\n  }\n\n  return (0);\n  { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n  return (-1);\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 20;\nloop invariant 0 <= a <= 20;\nloop invariant i == a;\nloop invariant i == 0 || i == 1 || i == 2 || i == 3 || i == 4 || i == 5 || i == 6 || i == 7 || i == 8 || i == 9 || i == 10 || i == 11 || i == 12 || i == 13 || i == 14 || i == 15 || i == 16 || i == 17 || i == 18 || i == 19 || i == 20;\nloop invariant a == 0 || a == 1 || a == 2 || a == 3 || a == 4 || a == 5 || a == 6 || a == 7 || a == 8 || a == 9 || a == 10 || a == 11 || a == 12 || a == 13 || a == 14 || a == 15 || a == 16 || a == 17 || a == 18 || a == 19 || a == 20;\nloop invariant i == a ==> (i == 0 || i == 1 || i == 2 || i == 3 || i == 4 || i == 5 || i == 6 || i == 7 || i == 8 || i == 9 || i == 10 || i == 11 || i == 12 || i == 13 || i == 14 || i == 15 || i == 16 || i == 17 || i == 18 || i == 19 || i == 20);\nloop invariant i == a ==> (a == 0 || a == 1 || a == 2 || a == 3 || a == 4 || a == 5 || a == 6 || a == 7 || a == 8 || a == 9 || a == 10 || a == 11 || a == 12 || a == 13 || a == 14 || a == 15 || a == 16 || a == 17 || a == 18 || a == 19 || a == 20);\nloop invariant i == a ==> (i == a);\nloop invariant i == a ==> (i == 0 || i == 1 || i == 2 || i == 3 || i == 4 || i == 5 || i == 6 || i == 7 || i == 8 || i == 9 || i == 10 || i == 11 || i == 12 || i == 13 || i == 14 || i == 15 || i == 16 || i == 17 || i == 18 || i == 19 || i == 20) ==> (a == 0 || a == 1 || a == 2 || a == 3 || a == 4 || a == 5 || a == 6 || a == 7 || a == 8 || a == 9 || a == 10 || a == 11 || a == 12 || a == 13 || a == 14 || a == 15 || a == 16 || a == 17 || a == 18 || a == 19 || a == 20);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  int i = 0;\n  int a = 0;\n\n  /*@\nloop invariant i1: 0 <= i <= 20;\nloop invariant i2: 0 <= a <= 20;\nloop invariant i3: i == a;\nloop invariant i4: i == 0 || i == 1 || i == 2 || i == 3 || i == 4 || i == 5 || i == 6 || i == 7 || i == 8 || i == 9 || i == 10 || i == 11 || i == 12 || i == 13 || i == 14 || i == 15 || i == 16 || i == 17 || i == 18 || i == 19 || i == 20;\nloop invariant i5: a == 0 || a == 1 || a == 2 || a == 3 || a == 4 || a == 5 || a == 6 || a == 7 || a == 8 || a == 9 || a == 10 || a == 11 || a == 12 || a == 13 || a == 14 || a == 15 || a == 16 || a == 17 || a == 18 || a == 19 || a == 20;\nloop invariant i6: i == a ==> (i == 0 || i == 1 || i == 2 || i == 3 || i == 4 || i == 5 || i == 6 || i == 7 || i == 8 || i == 9 || i == 10 || i == 11 || i == 12 || i == 13 || i == 14 || i == 15 || i == 16 || i == 17 || i == 18 || i == 19 || i == 20);\nloop invariant i7: i == a ==> (a == 0 || a == 1 || a == 2 || a == 3 || a == 4 || a == 5 || a == 6 || a == 7 || a == 8 || a == 9 || a == 10 || a == 11 || a == 12 || a == 13 || a == 14 || a == 15 || a == 16 || a == 17 || a == 18 || a == 19 || a == 20);\nloop invariant i8: i == a ==> (i == a);\nloop invariant i9: i == a ==> (i == 0 || i == 1 || i == 2 || i == 3 || i == 4 || i == 5 || i == 6 || i == 7 || i == 8 || i == 9 || i == 10 || i == 11 || i == 12 || i == 13 || i == 14 || i == 15 || i == 16 || i == 17 || i == 18 || i == 19 || i == 20) ==> (a == 0 || a == 1 || a == 2 || a == 3 || a == 4 || a == 5 || a == 6 || a == 7 || a == 8 || a == 9 || a == 10 || a == 11 || a == 12 || a == 13 || a == 14 || a == 15 || a == 16 || a == 17 || a == 18 || a == 19 || a == 20);\n*/\nwhile (1) {\n    if (i == 20) {\n       goto LOOPEND;\n    } else {\n       i++;\n       a++;\n    }\n\n    if (i != a) {\n      goto ERROR;\n    }\n  }\n\n  LOOPEND:\n\n  if (a != 20) {\n     goto ERROR;\n  }\n\n  return (0);\n  { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n  return (-1);\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  int i = 0;\n  int a = 0;\n\n  /*@\n\n*/\nwhile (1) {\n    if (i == 20) {\n       goto LOOPEND;\n    } else {\n       i++;\n       a++;\n    }\n\n    if (i != a) {\n      goto ERROR;\n    }\n  }\n\n  LOOPEND:\n\n  if (a != 20) {\n     goto ERROR;\n  }\n\n  return (0);\n  { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n  return (-1);\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 20;\nloop invariant 0 <= a <= i;\nloop invariant a == i;\nloop invariant i >= 0;\nloop invariant a >= 0;\nloop invariant a <= 20;\nloop invariant i <= 20;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  int i = 0;\n  int a = 0;\n\n  /*@\nloop invariant i1: 0 <= i <= 20;\nloop invariant i2: 0 <= a <= i;\nloop invariant i3: a == i;\nloop invariant i4: i >= 0;\nloop invariant i5: a >= 0;\nloop invariant i6: a <= 20;\nloop invariant i7: i <= 20;\n*/\nwhile (1) {\n    if (i == 20) {\n       goto LOOPEND;\n    } else {\n       i++;\n       a++;\n    }\n\n    if (i != a) {\n      goto ERROR;\n    }\n  }\n\n  LOOPEND:\n\n  if (a != 20) {\n     goto ERROR;\n  }\n\n  return (0);\n  { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n  return (-1);\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 8,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 20;\nloop invariant 0 <= a <= 20;\nloop invariant a = i;\nloop invariant (if i == 20 then a == 20 else a < 20);\nloop invariant (if a == 20 then i == 20 else a <= i);\nloop invariant (if i == 20 then a == 20 else a < 20 ==> i <= a);\nloop invariant (if a == 20 then i == 20 else a <= i ==> i <= a);\nloop invariant (if i == 20 then a == 20 else a < 20 ==> a <= i);\nloop invariant (if a == 20 then i == 20 else a <= i ==> a <= i);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  int i = 0;\n  int a = 0;\n\n  /*@\nloop invariant i1: 0 <= i <= 20;\nloop invariant i2: 0 <= a <= 20;\n\n\n\n\n\n\n\n*/\nwhile (1) {\n    if (i == 20) {\n       goto LOOPEND;\n    } else {\n       i++;\n       a++;\n    }\n\n    if (i != a) {\n      goto ERROR;\n    }\n  }\n\n  LOOPEND:\n\n  if (a != 20) {\n     goto ERROR;\n  }\n\n  return (0);\n  { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n  return (-1);\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 20;\nloop invariant 0 <= a <= 20;\nloop invariant i == a;\nloop invariant i == 20 ==> a == 20;\nloop invariant a == 20 ==> i == 20;\nloop invariant i == 20 ==> a == i;\nloop invariant a == 20 ==> i == a;\nloop invariant i == 20 ==> i == a;\nloop invariant a == 20 ==> i == a;\nloop invariant i == 20 ==> i == 20;\nloop invariant a == 20 ==> a == 20;\nloop invariant i == 20 ==> a == 20;\nloop invariant a == 20 ==> i == 20;\nloop invariant i == 20 ==> i == a;\nloop invariant a == 20 ==> a == i;\nloop invariant i == 20 ==> i == a;\nloop invariant a == 20 ==> a == i;\nloop invariant i == 20 ==> i == 20;\nloop invariant a == 20 ==> a == 20;\nloop invariant i == 20 ==> i == 20;\nloop invariant a == 20 ==> a == 20;\nloop invariant i == 20 ==> i == 20;\nloop invariant a == 20 ==> a == 20;\nloop invariant i == 20 ==> i == 20;\nloop invariant a == 20 ==> a == 20;\nloop invariant i == 20 ==> i == 20;\nloop invariant a == 20 ==> a == 20;\nloop invariant i == 20 ==> i == 20;\nloop invariant a == 20 ==> a == 20;\nloop invariant i == 20 ==> i == 20;\nloop invariant a == 20 ==> a == 20;\nloop invariant i == 20 ==> i == 20;\nloop invariant a == 20 ==> a == 20;\nloop invariant i == 20 ==> i == 20;\nloop invariant a == 20 ==> a == 20;\nloop invariant i == 20 ==> i == 20;\nloop invariant a == 20 ==> a == 20;\nloop invariant i == 20 ==> i == 20;\nloop invariant a == 20 ==> a == 20;\nloop invariant i == 20 ==> i == 20;\nloop invariant a == 20 ==> a == 20;\nloop invariant i == 20 ==> i == 20;\nloop invariant a == 20 ==> a == 20;\nloop invariant i == 20 ==> i == 20;\nloop invariant a == 20 ==> a == 20;\nloop invariant i == 20 ==> i == 20;\nloop invariant a == 20 ==> a == 20;\nloop invariant i == 20 ==> i == 20;\nloop invariant a == 20 ==> a == 20;\nloop invariant i == 20 ==> i == 20;\nloop invariant a == 20 ==> a == 20;\nloop invariant i == 20 ==> i == 20;\nloop invariant a == 20 ==> a == 20;\nloop invariant i == 20 ==> i == 20;\nloop invariant a == 20 ==> a == 20;\nloop invariant i == 20 ==> i == 20;\nloop invariant a == 20 ==> a == 20;\nloop invariant i == 20 ==> i == 20;\nloop invariant a == 20 ==> a == 20;\nloop invariant i == 20 ==> i == 20;\nloop invariant a == 20 ==> a == 20;\nloop invariant i == 20 ==> i == 20;\nloop invariant a == 20 ==> a == 20;\nloop invariant i == 20 ==> i == 20;\nloop invariant a == 20 ==> a == 20;\nloop invariant i == 20 ==> i == 20;\nloop invariant a == 20 ==> a == 20;\nloop invariant i == 20 ==> i == 20;\nloop invariant a == 20 ==> a == 20;\nloop invariant i == 20 ==> i == 20;\nloop invariant a == 20 ==> a == 20;\nloop invariant i == 20 ==> i == 20;\nloop invariant a == 20 ==> a == 20;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  int i = 0;\n  int a = 0;\n\n  /*@\nloop invariant i1: 0 <= i <= 20;\nloop invariant i2: 0 <= a <= 20;\nloop invariant i3: i == a;\nloop invariant i4: i == 20 ==> a == 20;\nloop invariant i5: a == 20 ==> i == 20;\nloop invariant i6: i == 20 ==> a == i;\nloop invariant i7: a == 20 ==> i == a;\nloop invariant i8: i == 20 ==> i == a;\nloop invariant i9: i == 20 ==> i == 20;\nloop invariant i10: a == 20 ==> a == 20;\nloop invariant i11: a == 20 ==> a == i;\n*/\nwhile (1) {\n    if (i == 20) {\n       goto LOOPEND;\n    } else {\n       i++;\n       a++;\n    }\n\n    if (i != a) {\n      goto ERROR;\n    }\n  }\n\n  LOOPEND:\n\n  if (a != 20) {\n     goto ERROR;\n  }\n\n  return (0);\n  { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n  return (-1);\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 20;\nloop invariant 0 <= a <= 20;\nloop invariant i <= a;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  int i = 0;\n  int a = 0;\n\n  /*@\nloop invariant i1: 0 <= i <= 20;\nloop invariant i2: 0 <= a <= 20;\nloop invariant i3: i <= a;\n*/\nwhile (1) {\n    if (i == 20) {\n       goto LOOPEND;\n    } else {\n       i++;\n       a++;\n    }\n\n    if (i != a) {\n      goto ERROR;\n    }\n  }\n\n  LOOPEND:\n\n  if (a != 20) {\n     goto ERROR;\n  }\n\n  return (0);\n  { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n  return (-1);\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 20;\nloop invariant 0 <= a <= 20;\nloop invariant a == i;\nloop invariant i == a;\nloop invariant i == 20 ==> a == 20;\nloop invariant a == 20 ==> i == 20;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  int i = 0;\n  int a = 0;\n\n  /*@\nloop invariant i1: 0 <= i <= 20;\nloop invariant i2: 0 <= a <= 20;\nloop invariant i3: a == i;\nloop invariant i4: i == a;\nloop invariant i5: i == 20 ==> a == 20;\nloop invariant i6: a == 20 ==> i == 20;\n*/\nwhile (1) {\n    if (i == 20) {\n       goto LOOPEND;\n    } else {\n       i++;\n       a++;\n    }\n\n    if (i != a) {\n      goto ERROR;\n    }\n  }\n\n  LOOPEND:\n\n  if (a != 20) {\n     goto ERROR;\n  }\n\n  return (0);\n  { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n  return (-1);\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant i <= 20;\nloop invariant a >= 0 && a <= i;\nloop invariant (a == i ==> (i == 20) && (a == 20));\nloop invariant (a != i ==> (i != 20));\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  int i = 0;\n  int a = 0;\n\n  /*@\nloop invariant i1: i <= 20;\nloop invariant i2: a >= 0 && a <= i;\n\nloop invariant i4: (a != i ==> (i != 20));\n*/\nwhile (1) {\n    if (i == 20) {\n       goto LOOPEND;\n    } else {\n       i++;\n       a++;\n    }\n\n    if (i != a) {\n      goto ERROR;\n    }\n  }\n\n  LOOPEND:\n\n  if (a != 20) {\n     goto ERROR;\n  }\n\n  return (0);\n  { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n  return (-1);\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 61: Assignment operators not allowed in annotations.",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  int i = 0;\n  int a = 0;\n\n  /*@\nloop invariant i1: 0 <= i <= 20;\nloop invariant i2: 0 <= a <= 20;\nloop invariant i3: a >= i;\nloop invariant i4: i == a ==> i != 20;\nloop invariant i5: i != 20 ==> i == a;\nloop invariant i6: a >= i ==> i != 20;\nloop invariant i7: i != 20 ==> a >= i;\nloop invariant i8: a == 20 ==> i == a;\nloop invariant i9: a == 20 ==> i == 20;\nloop invariant i10: a == i;\nloop invariant i11: a <= 20;\nloop invariant i12: i <= 20;\nloop invariant i13: i <= a;\nloop invariant i14: (i == 0) ==> (a == 0);\nloop invariant i15: (i == 1) ==> (a == 1);\nloop invariant i16: (i == 2) ==> (a == 2);\nloop invariant i17: (i == 3) ==> (a == 3);\nloop invariant i18: (i == 4) ==> (a == 4);\nloop invariant i19: (i == 5) ==> (a == 5);\nloop invariant i20: (i == 6) ==> (a == 6);\nloop invariant i21: (i == 7) ==> (a == 7);\nloop invariant i22: (i == 8) ==> (a == 8);\nloop invariant i23: (i == 9) ==> (a == 9);\nloop invariant i24: (i == 10) ==> (a == 10);\nloop invariant i25: (i == 11) ==> (a == 11);\nloop invariant i26: (i == 12) ==> (a == 12);\nloop invariant i27: (i == 13) ==> (a == 13);\nloop invariant i28: (i == 14) ==> (a == 14);\nloop invariant i29: (i == 15) ==> (a == 15);\nloop invariant i30: (i == 16) ==> (a == 16);\nloop invariant i31: (i == 17) ==> (a == 17);\nloop invariant i32: (i == 18) ==> (a == 18);\nloop invariant i33: (i == 19) ==> (a == 19);\nloop invariant i34: (i == 20) ==> (a == 20);\nloop invariant i35: i == a;\nloop invariant i36: i != 20 ==> i < 20;\nloop invariant i37: a != 20 ==> a < 20;\nloop invariant i38: i == 20 ==> i <= 20;\nloop invariant i39: i == 20 ==> a <= 20;\nloop invariant i40: i == 20 ==> a == 20;\nloop invariant i41: a == 20 ==> a <= 20;\nloop invariant i42: a == 20 ==> i <= 20;\nloop invariant i43: i <= 20 ==> a <= i;\nloop invariant i44: a <= 20 ==> i <= a;\nloop invariant i45: i <= 20 ==> a <= a;\nloop invariant i46: a <= 20 ==> i <= i;\nloop invariant i47: i <= 20 ==> i <= 20;\nloop invariant i48: a <= 20 ==> a <= 20;\nloop invariant i49: 0 <= a <= i;\nloop invariant i50: a = i;\nloop invariant i51: i == 0 || i == 1 || i == 2 || i == 3 || i == 4 || i == 5 || i == 6 || i == 7 || i == 8 || i == 9 || i == 10 || i == 11 || i == 12 || i == 13 || i == 14 || i == 15 || i == 16 || i == 17 || i == 18 || i == 19 || i == 20;\nloop invariant i52: a == 0 || a == 1 || a == 2 || a == 3 || a == 4 || a == 5 || a == 6 || a == 7 || a == 8 || a == 9 || a == 10 || a == 11 || a == 12 || a == 13 || a == 14 || a == 15 || a == 16 || a == 17 || a == 18 || a == 19 || a == 20;\nloop invariant i53: i == a ==> (i == 0 || i == 1 || i == 2 || i == 3 || i == 4 || i == 5 || i == 6 || i == 7 || i == 8 || i == 9 || i == 10 || i == 11 || i == 12 || i == 13 || i == 14 || i == 15 || i == 16 || i == 17 || i == 18 || i == 19 || i == 20);\nloop invariant i54: i == a ==> (a == 0 || a == 1 || a == 2 || a == 3 || a == 4 || a == 5 || a == 6 || a == 7 || a == 8 || a == 9 || a == 10 || a == 11 || a == 12 || a == 13 || a == 14 || a == 15 || a == 16 || a == 17 || a == 18 || a == 19 || a == 20);\nloop invariant i55: i == a ==> (i == a);\nloop invariant i56: i == a ==> (i == 0 || i == 1 || i == 2 || i == 3 || i == 4 || i == 5 || i == 6 || i == 7 || i == 8 || i == 9 || i == 10 || i == 11 || i == 12 || i == 13 || i == 14 || i == 15 || i == 16 || i == 17 || i == 18 || i == 19 || i == 20) ==> (a == 0 || a == 1 || a == 2 || a == 3 || a == 4 || a == 5 || a == 6 || a == 7 || a == 8 || a == 9 || a == 10 || a == 11 || a == 12 || a == 13 || a == 14 || a == 15 || a == 16 || a == 17 || a == 18 || a == 19 || a == 20);\nloop invariant i57: i >= 0;\nloop invariant i58: a >= 0;\nloop invariant i59: (if i == 20 then a == 20 else a < 20);\nloop invariant i60: (if a == 20 then i == 20 else a <= i);\nloop invariant i61: (if i == 20 then a == 20 else a < 20 ==> i <= a);\nloop invariant i62: (if a == 20 then i == 20 else a <= i ==> i <= a);\nloop invariant i63: (if i == 20 then a == 20 else a < 20 ==> a <= i);\nloop invariant i64: (if a == 20 then i == 20 else a <= i ==> a <= i);\nloop invariant i65: i == 20 ==> a == i;\nloop invariant i66: i == 20 ==> i == a;\nloop invariant i67: i == 20 ==> i == 20;\nloop invariant i68: a == 20 ==> a == 20;\nloop invariant i69: a == 20 ==> a == i;\nloop invariant i70: a >= 0 && a <= i;\nloop invariant i71: (a == i ==> (i == 20) && (a == 20));\nloop invariant i72: (a != i ==> (i != 20));\n*/\nwhile (1) {\n    if (i == 20) {\n       goto LOOPEND;\n    } else {\n       i++;\n       a++;\n    }\n\n    if (i != a) {\n      goto ERROR;\n    }\n  }\n\n  LOOPEND:\n\n  if (a != 20) {\n     goto ERROR;\n  }\n\n  return (0);\n  { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n  return (-1);\n}",
        "combined_annotation_num_solver_calls": 11,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  int i = 0;\n  int a = 0;\n\n  /*@\nloop invariant i1: 0 <= i <= 20;\nloop invariant i2: 0 <= a <= 20;\nloop invariant i3: a >= i;\n\nloop invariant i5: i != 20 ==> i == a;\n\nloop invariant i7: i != 20 ==> a >= i;\nloop invariant i8: a == 20 ==> i == a;\nloop invariant i9: a == 20 ==> i == 20;\nloop invariant i10: a == i;\nloop invariant i11: a <= 20;\nloop invariant i12: i <= 20;\nloop invariant i13: i <= a;\nloop invariant i14: (i == 0) ==> (a == 0);\nloop invariant i15: (i == 1) ==> (a == 1);\nloop invariant i16: (i == 2) ==> (a == 2);\nloop invariant i17: (i == 3) ==> (a == 3);\nloop invariant i18: (i == 4) ==> (a == 4);\nloop invariant i19: (i == 5) ==> (a == 5);\nloop invariant i20: (i == 6) ==> (a == 6);\nloop invariant i21: (i == 7) ==> (a == 7);\nloop invariant i22: (i == 8) ==> (a == 8);\nloop invariant i23: (i == 9) ==> (a == 9);\nloop invariant i24: (i == 10) ==> (a == 10);\nloop invariant i25: (i == 11) ==> (a == 11);\nloop invariant i26: (i == 12) ==> (a == 12);\nloop invariant i27: (i == 13) ==> (a == 13);\nloop invariant i28: (i == 14) ==> (a == 14);\nloop invariant i29: (i == 15) ==> (a == 15);\nloop invariant i30: (i == 16) ==> (a == 16);\nloop invariant i31: (i == 17) ==> (a == 17);\nloop invariant i32: (i == 18) ==> (a == 18);\nloop invariant i33: (i == 19) ==> (a == 19);\nloop invariant i34: (i == 20) ==> (a == 20);\nloop invariant i35: i == a;\nloop invariant i36: i != 20 ==> i < 20;\nloop invariant i37: a != 20 ==> a < 20;\nloop invariant i38: i == 20 ==> i <= 20;\nloop invariant i39: i == 20 ==> a <= 20;\nloop invariant i40: i == 20 ==> a == 20;\nloop invariant i41: a == 20 ==> a <= 20;\nloop invariant i42: a == 20 ==> i <= 20;\nloop invariant i43: i <= 20 ==> a <= i;\nloop invariant i44: a <= 20 ==> i <= a;\nloop invariant i45: i <= 20 ==> a <= a;\nloop invariant i46: a <= 20 ==> i <= i;\nloop invariant i47: i <= 20 ==> i <= 20;\nloop invariant i48: a <= 20 ==> a <= 20;\nloop invariant i49: 0 <= a <= i;\n\nloop invariant i51: i == 0 || i == 1 || i == 2 || i == 3 || i == 4 || i == 5 || i == 6 || i == 7 || i == 8 || i == 9 || i == 10 || i == 11 || i == 12 || i == 13 || i == 14 || i == 15 || i == 16 || i == 17 || i == 18 || i == 19 || i == 20;\nloop invariant i52: a == 0 || a == 1 || a == 2 || a == 3 || a == 4 || a == 5 || a == 6 || a == 7 || a == 8 || a == 9 || a == 10 || a == 11 || a == 12 || a == 13 || a == 14 || a == 15 || a == 16 || a == 17 || a == 18 || a == 19 || a == 20;\nloop invariant i53: i == a ==> (i == 0 || i == 1 || i == 2 || i == 3 || i == 4 || i == 5 || i == 6 || i == 7 || i == 8 || i == 9 || i == 10 || i == 11 || i == 12 || i == 13 || i == 14 || i == 15 || i == 16 || i == 17 || i == 18 || i == 19 || i == 20);\nloop invariant i54: i == a ==> (a == 0 || a == 1 || a == 2 || a == 3 || a == 4 || a == 5 || a == 6 || a == 7 || a == 8 || a == 9 || a == 10 || a == 11 || a == 12 || a == 13 || a == 14 || a == 15 || a == 16 || a == 17 || a == 18 || a == 19 || a == 20);\nloop invariant i55: i == a ==> (i == a);\nloop invariant i56: i == a ==> (i == 0 || i == 1 || i == 2 || i == 3 || i == 4 || i == 5 || i == 6 || i == 7 || i == 8 || i == 9 || i == 10 || i == 11 || i == 12 || i == 13 || i == 14 || i == 15 || i == 16 || i == 17 || i == 18 || i == 19 || i == 20) ==> (a == 0 || a == 1 || a == 2 || a == 3 || a == 4 || a == 5 || a == 6 || a == 7 || a == 8 || a == 9 || a == 10 || a == 11 || a == 12 || a == 13 || a == 14 || a == 15 || a == 16 || a == 17 || a == 18 || a == 19 || a == 20);\nloop invariant i57: i >= 0;\nloop invariant i58: a >= 0;\n\n\n\n\n\n\nloop invariant i65: i == 20 ==> a == i;\nloop invariant i66: i == 20 ==> i == a;\nloop invariant i67: i == 20 ==> i == 20;\nloop invariant i68: a == 20 ==> a == 20;\nloop invariant i69: a == 20 ==> a == i;\nloop invariant i70: a >= 0 && a <= i;\n\nloop invariant i72: (a != i ==> (i != 20));\n*/\nwhile (1) {\n    if (i == 20) {\n       goto LOOPEND;\n    } else {\n       i++;\n       a++;\n    }\n\n    if (i != a) {\n      goto ERROR;\n    }\n  }\n\n  LOOPEND:\n\n  if (a != 20) {\n     goto ERROR;\n  }\n\n  return (0);\n  { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n  return (-1);\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c"
        ],
        "failure": [],
        "skipped": [],
        "total": 1,
        "success_count": 1,
        "failure_count": 0,
        "success_rate": 1.0
    }
}