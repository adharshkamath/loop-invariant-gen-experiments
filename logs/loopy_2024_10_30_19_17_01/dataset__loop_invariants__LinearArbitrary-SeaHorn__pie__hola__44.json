{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/44.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nint main()\n{\n  int k = unknown1();\n  int flag = unknown1();\n  int i=0;\n  int j=0;\n  int n = unknown1();\n\n  if (flag == 1){\n     n=1;\n  } else {\n     n=2;\n  }\n\n  i=0;\n\n  while ( i <= k){\n    i++;\n    j= j +n;\n  }\n  if(flag == 1)\n      {;\n//@ assert(j == i);\n}\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= i <= k;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= k;\nloop invariant 0 <= i <= k;\nloop invariant 0 <= j <= i * n;\nloop invariant flag == 1 ==> n == 1;\nloop invariant flag == 0 ==> n == 2;\nloop invariant flag == 1 ==> i == j;\nloop invariant flag == 0 ==> j == i * n;\n*/\n```",
            "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant i3;\nloop invariant i4;\nloop invariant i5;\nloop invariant i6;\nloop invariant i7;\nloop invariant i8;\nloop invariant i9;\nloop invariant i10;\nloop invariant i11;\nloop invariant i12;\nloop invariant i13;\nloop invariant i14;\nloop invariant i15;\nloop invariant i16;\nloop invariant i17;\nloop invariant i18;\nloop invariant i19;\nloop invariant i20;\nloop invariant i21;\nloop invariant i22;\nloop invariant i23;\nloop invariant i24;\nloop invariant i25;\nloop invariant i26;\nloop invariant i27;\nloop invariant i28;\nloop invariant i29;\nloop invariant i30;\nloop invariant i31;\nloop invariant i32;\nloop invariant i33;\nloop invariant i34;\nloop invariant i35;\nloop invariant i36;\nloop invariant i37;\nloop invariant i38;\nloop invariant i39;\nloop invariant i40;\nloop invariant i41;\nloop invariant i42;\nloop invariant i43;\nloop invariant i44;\nloop invariant i45;\nloop invariant i46;\nloop invariant i47;\nloop invariant i48;\nloop invariant i49;\nloop invariant i50;\nloop invariant i51;\nloop invariant i52;\nloop invariant i53;\nloop invariant i54;\nloop invariant i55;\nloop invariant i56;\nloop invariant i57;\nloop invariant i58;\nloop invariant i59;\nloop invariant i60;\nloop invariant i61;\nloop invariant i62;\nloop invariant i63;\nloop invariant i64;\nloop invariant i65;\nloop invariant i66;\nloop invariant i67;\nloop invariant i68;\nloop invariant i69;\nloop invariant i70;\nloop invariant i71;\nloop invariant i72;\nloop invariant i73;\nloop invariant i74;\nloop invariant i75;\nloop invariant i76;\nloop invariant i77;\nloop invariant i78;\nloop invariant i79;\nloop invariant i80;\nloop invariant i81;\nloop invariant i82;\nloop invariant i83;\nloop invariant i84;\nloop invariant i85;\nloop invariant i86;\nloop invariant i87;\nloop invariant i88;\nloop invariant i89;\nloop invariant i90;\nloop invariant i91;\nloop invariant i92;\nloop invariant i93;\nloop invariant i94;\nloop invariant i95;\nloop invariant i96;\nloop invariant i97;\nloop invariant i98;\nloop invariant i99;\nloop invariant i100;\nloop invariant i101;\nloop invariant i102;\nloop invariant i103;\nloop invariant i104;\nloop invariant i105;\nloop invariant i106;\nloop invariant i107;\nloop invariant i108;\nloop invariant i109;\nloop invariant i110;\nloop invariant i111;\nloop invariant i112;\nloop invariant i113;\nloop invariant i114;\nloop invariant i115;\nloop invariant i116;\nloop invariant i117;\nloop invariant i118;\nloop invariant i119;\nloop invariant i120;\nloop invariant i121;\nloop invariant i122;\nloop invariant i123;\nloop invariant i124;\nloop invariant i125;\nloop invariant i126;\nloop invariant i127;\nloop invariant i128;\nloop invariant i129;\nloop invariant i130;\nloop invariant i131;\nloop invariant i132;\nloop invariant i133;\nloop invariant i134;\nloop invariant i135;\nloop invariant i136;\nloop invariant i137;\nloop invariant i138;\nloop invariant i139;\nloop invariant i140;\nloop invariant i141;\nloop invariant i142;\nloop invariant i143;\nloop invariant i144;\nloop invariant i145;\nloop invariant i146;\nloop invariant i147;\nloop invariant i148;\nloop invariant i149;\nloop invariant i150;\nloop invariant i151;\nloop invariant i152;\nloop invariant i153;\nloop invariant i154;\nloop invariant i155;\nloop invariant i156;\nloop invariant i157;\nloop invariant i158;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= k;\nloop invariant 0 <= j <= i*n;\nloop invariant if flag == 1 then j == i else j == 2*i;\nloop invariant if flag == 1 then k == 1 else k == 2;\n*/\n```",
            "```\n/*@\nloop invariant flag ==> (i <= k);\nloop invariant !(flag ==> (i <= k)) ==> (i <= k);\nloop invariant !(flag ==> (i <= k)) ==> (i <= k + 1);\nloop invariant flag ==> (j == i * n);\nloop invariant !(flag ==> (j == i * n)) ==> (j == i * n);\nloop invariant !(flag ==> (j == i * n)) ==> (j == (i + 1) * n);\nloop invariant flag ==> (j == i * n);\nloop invariant !(flag ==> (j == i * n)) ==> (j == i * n);\nloop invariant !(flag ==> (j == i * n)) ==> (j == (i + 1) * n);\nloop invariant flag ==> (i <= k);\nloop invariant !(flag ==> (i <= k)) ==> (i <= k + 1);\nloop invariant flag ==> (j == i * n);\nloop invariant !(flag ==> (j == i * n)) ==> (j == i * n);\nloop invariant !(flag ==> (j == i * n)) ==> (j == (i + 1) * n);\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= k+1;\nloop invariant j == n * i;\nloop invariant (i <= k) ==> (j <= n * (k+1));\nloop invariant (i > k) ==> (j == n * (k+1));\nloop invariant (i <= k) ==> (j < n * (k+1));\nloop invariant (i > k) ==> (j >= n * (k+1));\nloop invariant 1 <= i <= k+1;\nloop invariant j == n * i;\nloop invariant (i <= k) ==> (j <= n * (k+1));\nloop invariant (i > k) ==> (j == n * (k+1));\nloop invariant (i <= k) ==> (j < n * (k+1));\nloop invariant (i > k) ==> (j >= n * (k+1));\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= k;\nloop invariant 0 <= j <= n*k + 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= n <= 2;\nloop invariant 0 <= i <= k;\nloop invariant 0 <= j <= i*n;\nloop invariant j == i*n;\nloop invariant k >= i-1;\nloop invariant k >= i;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= k;\nloop invariant 0 <= j <= (k+1) * n;\nloop invariant flag ==> (j == i);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= k;\nloop invariant j == i * n;\nloop invariant k >= i;\nloop invariant n == 1 ==> flag == 1;\nloop invariant n == 2 ==> flag == 0;\nloop invariant flag == 0 ==> i <= k;\nloop invariant flag == 1 ==> i == k;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= k + 1;\nloop invariant 0 <= j <= (k * (k + 1)) / 2 * n;\nloop invariant i <= k;\nloop invariant j <= (k * (k + 1)) / 2 * n;\nloop invariant if flag == 1 then j == i;\nloop invariant if flag == 0 then j == 2 * i;\nloop invariant 0 <= i <= k + 1;\nloop invariant 0 <= j <= (k * (k + 1)) / 2 * n;\nloop invariant i <= k;\nloop invariant j <= (k * (k + 1)) / 2 * n;\nloop invariant if flag == 1 then j == i;\nloop invariant if flag == 0 then j == 2 * i;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= k;\nloop invariant j >= i * n;\nloop invariant j <= k * n;\nloop invariant j <= i * n + n;\nloop invariant j >= i * n - n;\nloop invariant j <= i * n + n - 1;\nloop invariant j >= i * n - n + 1;\nloop invariant j <= i * n + n - 2;\nloop invariant j >= i * n - n + 2;\nloop invariant j <= i * n + n - 3;\nloop invariant j >= i * n - n + 3;\nloop invariant j <= i * n + n - 4;\nloop invariant j >= i * n - n + 4;\nloop invariant j <= i * n + n - 5;\nloop invariant j >= i * n - n + 5;\nloop invariant j <= i * n + n - 6;\nloop invariant j >= i * n - n + 6;\nloop invariant j <= i * n + n - 7;\nloop invariant j >= i * n - n + 7;\nloop invariant j <= i * n + n - 8;\nloop invariant j >= i * n - n + 8;\nloop invariant j <= i * n + n - 9;\nloop invariant j >= i * n - n + 9;\nloop invariant j <= i * n + n - 10;\nloop invariant j >= i * n - n + 10;\nloop invariant j <= i * n + n - 11;\nloop invariant j >= i * n - n + 11;\nloop invariant j <= i * n + n - 12;\nloop invariant j >= i * n - n + 12;\nloop invariant j <= i * n + n - 13;\nloop invariant j >= i * n - n + 13;\nloop invariant j <= i * n + n - 14;\nloop invariant j >= i * n - n + 14;\nloop invariant j <= i * n + n - 15;\nloop invariant j >= i * n - n + 15;\nloop invariant j <= i * n + n - 16;\nloop invariant j >= i * n - n + 16;\nloop invariant j <= i * n + n - 17;\nloop invariant j >= i * n - n + 17;\nloop invariant j <= i * n + n - 18;\nloop invariant j >= i * n - n + 18;\nloop invariant j <= i * n + n - 19;\nloop invariant j >= i * n - n + 19;\nloop invariant j <= i * n + n - 20;\nloop invariant j >= i * n - n + 20;\nloop invariant j <= i * n + n - 21;\nloop invariant j >= i * n - n + 21;\nloop invariant j <= i * n + n - 22;\nloop invariant j >= i * n - n + 22;\nloop invariant j <= i * n + n - 23;\nloop invariant j >= i * n - n + 23;\nloop invariant j <= i * n + n - 24;\nloop invariant j >= i * n - n + 24;\nloop invariant j <= i * n + n - 25;\nloop invariant j >= i * n - n + 25;\nloop invariant j <= i * n + n - 26;\nloop invariant j >= i * n - n + 26;\nloop invariant j <= i * n + n - 27;\nloop invariant j >= i * n - n + 27;\nloop invariant j <= i * n + n - 28;\nloop invariant j >= i * n - n + 28;\nloop invariant j <= i * n + n - 29;\nloop invariant j >= i * n - n + 29;\nloop invariant j <= i * n + n - 30;\nloop invariant j >= i * n - n + 30;\nloop invariant j <= i * n + n - 31;\nloop invariant j >= i * n - n + 31;\nloop invariant j <= i * n + n - 32;\nloop invariant j >= i * n - n + 32;\nloop invariant j <= i * n + n - 33;\nloop invariant j >= i * n - n + 33;\nloop invariant j <= i * n + n - 34;\nloop invariant j >= i * n - n + 34;\nloop invariant j <= i * n + n - 35;\n*/\n```",
            "```\n/*@\nloop invariant k >= 0;\nloop invariant flag == 0 || flag == 1;\nloop invariant n == 1 || n == 2;\nloop invariant n >= 2 ==> i <= k;\nloop invariant n == 2 ==> (j == i * i - i) && (i == 0 || i == k);\nloop invariant n == 1 ==> (j == i) && (i == 0 || i == k);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= k;\nloop invariant 0 <= j <= i * n;\nloop invariant j == i * n;\nloop invariant i <= k ==> j == i;\nloop invariant i <= k ==> j == i * n;\nloop invariant i <= k ==> j == i * n ==> j == i;\nloop invariant i <= k ==> j == i * n ==> j == i;\nloop invariant i <= k ==> j == i * n ==> j == i;\nloop invariant i <= k ==> j == i * n ==> j == i;\nloop invariant i <= k ==> j == i * n ==> j == i;\nloop invariant i <= k ==> j == i * n ==> j == i;\nloop invariant i <= k ==> j == i * n ==> j == i;\nloop invariant i <= k ==> j == i * n ==> j == i;\nloop invariant i <= k ==> j == i * n ==> j == i;\nloop invariant i <= k ==> j == i * n ==> j == i;\nloop invariant i <= k ==> j == i * n ==> j == i;\nloop invariant i <= k ==> j == i * n ==> j == i;\nloop invariant i <= k ==> j == i * n ==> j == i;\nloop invariant i <= k ==> j == i * n ==> j == i;\nloop invariant i <= k ==> j == i * n ==> j == i;\nloop invariant i <= k ==> j == i * n ==> j == i;\nloop invariant i <= k ==> j == i * n ==> j == i;\nloop invariant i <= k ==> j == i * n ==> j == i;\nloop invariant i <= k ==> j == i * n ==> j == i;\nloop invariant i <= k ==> j == i * n ==> j == i;\nloop invariant i <= k ==> j == i * n ==> j == i;\nloop invariant i <= k ==> j == i * n ==> j == i;\nloop invariant i <= k ==> j == i * n ==> j == i;\nloop invariant i <= k ==> j == i * n ==> j == i;\nloop invariant i <= k ==> j == i * n ==> j == i;\nloop invariant i <= k ==> j == i * n ==> j == i;\nloop invariant i <= k ==> j == i * n ==> j == i;\nloop invariant i <= k ==> j == i * n ==> j == i;\nloop invariant i <= k ==> j == i * n ==> j == i;\nloop invariant i <= k ==> j == i * n ==> j == i;\nloop invariant i <= k ==> j == i * n ==> j == i;\nloop invariant i <= k ==> j == i * n ==> j == i;\nloop invariant i <= k ==> j == i * n ==> j == i;\nloop invariant i <= k ==> j == i * n ==> j == i;\nloop invariant i <= k ==> j == i * n ==> j == i;\nloop invariant i <= k ==> j == i * n ==> j == i;\nloop invariant i <= k ==> j == i * n ==> j == i;\nloop invariant i <= k ==> j == i * n ==> j == i;\nloop invariant i <= k ==> j == i * n ==> j == i;\nloop invariant i <= k ==> j == i * n ==> j == i;\nloop invariant i <= k ==> j == i * n ==> j == i;\nloop invariant i <= k ==> j == i * n ==> j == i;\nloop invariant i <= k ==> j == i * n ==> j == i;\nloop invariant i <= k ==> j == i * n ==> j == i;\nloop invariant i <= k ==> j == i * n ==> j == i;\nloop invariant i <= k ==> j == i * n ==> j == i;\nloop invariant i <= k ==> j == i * n ==> j == i;\nloop invariant i <= k ==> j == i * n ==> j == i;\nloop invariant i <= k ==> j == i * n ==> j == i;\nloop invariant i <= k ==> j == i * n ==> j == i;\nloop invariant i <= k ==> j == i * n ==> j == i;\nloop invariant i <= k ==> j == i * n ==> j == i;\nloop invariant i <= k ==> j == i * n ==> j == i;\nloop invariant i <= k ==> j == i * n ==> j == i;\nloop invariant i <= k ==> j == i * n ==> j == i;\nloop invariant i <= k ==> j == i * n ==> j == i;\nloop invariant i <= k ==> j == i * n ==> j == i;\nloop invariant i <= k ==> j == i * n ==> j == i;\nloop invariant i <= k ==> j == i * n ==> j == i;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= k;\nloop invariant 0 <= j <= n*k;\nloop invariant i <= k ==> j <= i*n;\nloop invariant i <= k ==> j >= 0;\nloop invariant i <= k ==> j <= n*k;\nloop invariant i <= k ==> j >= i;\nloop invariant i <= k ==> j <= i*n;\nloop invariant i <= k ==> j >= 0;\nloop invariant i <= k ==> j <= n*k;\nloop invariant i <= k ==> j >= i;\nloop invariant i <= k ==> j <= i*n;\nloop invariant i <= k ==> j >= 0;\nloop invariant i <= k ==> j <= n*k;\nloop invariant i <= k ==> j >= i;\nloop invariant i <= k ==> j <= i*n;\nloop invariant i <= k ==> j >= 0;\nloop invariant i <= k ==> j <= n*k;\nloop invariant i <= k ==> j >= i;\nloop invariant i <= k ==> j <= i*n;\nloop invariant i <= k ==> j >= 0;\nloop invariant i <= k ==> j <= n*k;\nloop invariant i <= k ==> j >= i;\nloop invariant i <= k ==> j <= i*n;\nloop invariant i <= k ==> j >= 0;\nloop invariant i <= k ==> j <= n*k;\nloop invariant i <= k ==> j >= i;\nloop invariant i <= k ==> j <= i*n;\nloop invariant i <= k ==> j >= 0;\nloop invariant i <= k ==> j <= n*k;\nloop invariant i <= k ==> j >= i;\nloop invariant i <= k ==> j <= i*n;\nloop invariant i <= k ==> j >= 0;\nloop invariant i <= k ==> j <= n*k;\nloop invariant i <= k ==> j >= i;\nloop invariant i <= k ==> j <= i*n;\nloop invariant i <= k ==> j >= 0;\nloop invariant i <= k ==> j <= n*k;\nloop invariant i <= k ==> j >= i;\nloop invariant i <= k ==> j <= i*n;\nloop invariant i <= k ==> j >= 0;\nloop invariant i <= k ==> j <= n*k;\nloop invariant i <= k ==> j >= i;\nloop invariant i <= k ==> j <= i*n;\nloop invariant i <= k ==> j >= 0;\nloop invariant i <= k ==> j <= n*k;\nloop invariant i <= k ==> j >= i;\nloop invariant i <= k ==> j <= i*n;\nloop invariant i <= k ==> j >= 0;\nloop invariant i <= k ==> j <= n*k;\nloop invariant i <= k ==> j >= i;\nloop invariant i <= k ==> j <= i*n;\nloop invariant i <= k ==> j >= 0;\nloop invariant i <= k ==> j <= n*k;\nloop invariant i <= k ==> j >= i;\nloop invariant i <= k ==> j <= i*n;\nloop invariant i <= k ==> j >= 0;\nloop invariant i <= k ==> j <= n*k;\nloop invariant i <= k ==> j >= i;\nloop invariant i <= k ==> j <= i*n;\nloop invariant i <= k ==> j >= 0;\nloop invariant i <= k ==> j <= n*k;\nloop invariant i <= k ==> j >= i;\nloop invariant i <= k ==> j <= i*n;\nloop invariant i <= k ==> j >= 0;\nloop invariant i <= k ==> j <= n*k;\nloop invariant i <= k ==> j >= i;\nloop invariant i <= k ==> j <= i*n;\nloop invariant i <= k ==> j >= 0;\nloop invariant i <= k ==> j <= n*k;\nloop invariant i <= k ==> j >= i;\nloop invariant i <= k ==> j <= i*n;\nloop invariant i <= k ==> j >= 0;\nloop invariant i <= k ==> j <= n*k;\nloop invariant i <= k ==> j >= i;\nloop invariant i <= k ==> j <= i*n;\nloop invariant i <= k ==> j >= 0;\nloop invariant i <= k ==> j <= n*k;\nloop invariant i <= k ==> j >= i;\nloop invariant i <= k ==> j <= i*n;\nloop invariant i <= k ==> j >= 0;\nloop invariant i <= k ==> j <= n*k;\nloop invariant i <= k ==> j >= i;\nloop invariant i <= k ==> j <= i*n;\nloop invariant i <= k ==> j >= 0;\nloop invariant i <= k ==> j <= n*k;\nloop invariant i <= k ==> j >= i;\nloop invariant i <= k ==> j <= i*n;\nloop invariant i <= k ==> j >= 0;\nloop invariant i <= k ==> j <= n*k;\nloop invariant i <= k ==> j >= i;\nloop invariant i <= k ==> j <= i*n;\nloop invariant i <= k ==> j >= 0;\nloop invariant i <= k ==> j <= n*k;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= k;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nint main()\n{\n  int k = unknown1();\n  int flag = unknown1();\n  int i=0;\n  int j=0;\n  int n = unknown1();\n\n  if (flag == 1){\n     n=1;\n  } else {\n     n=2;\n  }\n\n  i=0;\n\n  /*@\n\n*/\nwhile ( i <= k){\n    i++;\n    j= j +n;\n  }\n  if(flag == 1)\n      {;\n//@ assert(j == i);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 1 <= k;\nloop invariant 0 <= i <= k;\nloop invariant 0 <= j <= i * n;\nloop invariant flag == 1 ==> n == 1;\nloop invariant flag == 0 ==> n == 2;\nloop invariant flag == 1 ==> i == j;\nloop invariant flag == 0 ==> j == i * n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nint main()\n{\n  int k = unknown1();\n  int flag = unknown1();\n  int i=0;\n  int j=0;\n  int n = unknown1();\n\n  if (flag == 1){\n     n=1;\n  } else {\n     n=2;\n  }\n\n  i=0;\n\n  /*@\n\n\n\nloop invariant i4: flag == 1 ==> n == 1;\nloop invariant i5: flag == 0 ==> n == 2;\nloop invariant i6: flag == 1 ==> i == j;\nloop invariant i7: flag == 0 ==> j == i * n;\n*/\nwhile ( i <= k){\n    i++;\n    j= j +n;\n  }\n  if(flag == 1)\n      {;\n//@ assert(j == i);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 158,
                "annotations": "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant i3;\nloop invariant i4;\nloop invariant i5;\nloop invariant i6;\nloop invariant i7;\nloop invariant i8;\nloop invariant i9;\nloop invariant i10;\nloop invariant i11;\nloop invariant i12;\nloop invariant i13;\nloop invariant i14;\nloop invariant i15;\nloop invariant i16;\nloop invariant i17;\nloop invariant i18;\nloop invariant i19;\nloop invariant i20;\nloop invariant i21;\nloop invariant i22;\nloop invariant i23;\nloop invariant i24;\nloop invariant i25;\nloop invariant i26;\nloop invariant i27;\nloop invariant i28;\nloop invariant i29;\nloop invariant i30;\nloop invariant i31;\nloop invariant i32;\nloop invariant i33;\nloop invariant i34;\nloop invariant i35;\nloop invariant i36;\nloop invariant i37;\nloop invariant i38;\nloop invariant i39;\nloop invariant i40;\nloop invariant i41;\nloop invariant i42;\nloop invariant i43;\nloop invariant i44;\nloop invariant i45;\nloop invariant i46;\nloop invariant i47;\nloop invariant i48;\nloop invariant i49;\nloop invariant i50;\nloop invariant i51;\nloop invariant i52;\nloop invariant i53;\nloop invariant i54;\nloop invariant i55;\nloop invariant i56;\nloop invariant i57;\nloop invariant i58;\nloop invariant i59;\nloop invariant i60;\nloop invariant i61;\nloop invariant i62;\nloop invariant i63;\nloop invariant i64;\nloop invariant i65;\nloop invariant i66;\nloop invariant i67;\nloop invariant i68;\nloop invariant i69;\nloop invariant i70;\nloop invariant i71;\nloop invariant i72;\nloop invariant i73;\nloop invariant i74;\nloop invariant i75;\nloop invariant i76;\nloop invariant i77;\nloop invariant i78;\nloop invariant i79;\nloop invariant i80;\nloop invariant i81;\nloop invariant i82;\nloop invariant i83;\nloop invariant i84;\nloop invariant i85;\nloop invariant i86;\nloop invariant i87;\nloop invariant i88;\nloop invariant i89;\nloop invariant i90;\nloop invariant i91;\nloop invariant i92;\nloop invariant i93;\nloop invariant i94;\nloop invariant i95;\nloop invariant i96;\nloop invariant i97;\nloop invariant i98;\nloop invariant i99;\nloop invariant i100;\nloop invariant i101;\nloop invariant i102;\nloop invariant i103;\nloop invariant i104;\nloop invariant i105;\nloop invariant i106;\nloop invariant i107;\nloop invariant i108;\nloop invariant i109;\nloop invariant i110;\nloop invariant i111;\nloop invariant i112;\nloop invariant i113;\nloop invariant i114;\nloop invariant i115;\nloop invariant i116;\nloop invariant i117;\nloop invariant i118;\nloop invariant i119;\nloop invariant i120;\nloop invariant i121;\nloop invariant i122;\nloop invariant i123;\nloop invariant i124;\nloop invariant i125;\nloop invariant i126;\nloop invariant i127;\nloop invariant i128;\nloop invariant i129;\nloop invariant i130;\nloop invariant i131;\nloop invariant i132;\nloop invariant i133;\nloop invariant i134;\nloop invariant i135;\nloop invariant i136;\nloop invariant i137;\nloop invariant i138;\nloop invariant i139;\nloop invariant i140;\nloop invariant i141;\nloop invariant i142;\nloop invariant i143;\nloop invariant i144;\nloop invariant i145;\nloop invariant i146;\nloop invariant i147;\nloop invariant i148;\nloop invariant i149;\nloop invariant i150;\nloop invariant i151;\nloop invariant i152;\nloop invariant i153;\nloop invariant i154;\nloop invariant i155;\nloop invariant i156;\nloop invariant i157;\nloop invariant i158;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nint main()\n{\n  int k = unknown1();\n  int flag = unknown1();\n  int i=0;\n  int j=0;\n  int n = unknown1();\n\n  if (flag == 1){\n     n=1;\n  } else {\n     n=2;\n  }\n\n  i=0;\n\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile ( i <= k){\n    i++;\n    j= j +n;\n  }\n  if(flag == 1)\n      {;\n//@ assert(j == i);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= k;\nloop invariant 0 <= j <= i*n;\nloop invariant if flag == 1 then j == i else j == 2*i;\nloop invariant if flag == 1 then k == 1 else k == 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nint main()\n{\n  int k = unknown1();\n  int flag = unknown1();\n  int i=0;\n  int j=0;\n  int n = unknown1();\n\n  if (flag == 1){\n     n=1;\n  } else {\n     n=2;\n  }\n\n  i=0;\n\n  /*@\n\n\n\n\n*/\nwhile ( i <= k){\n    i++;\n    j= j +n;\n  }\n  if(flag == 1)\n      {;\n//@ assert(j == i);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant flag ==> (i <= k);\nloop invariant !(flag ==> (i <= k)) ==> (i <= k);\nloop invariant !(flag ==> (i <= k)) ==> (i <= k + 1);\nloop invariant flag ==> (j == i * n);\nloop invariant !(flag ==> (j == i * n)) ==> (j == i * n);\nloop invariant !(flag ==> (j == i * n)) ==> (j == (i + 1) * n);\nloop invariant flag ==> (j == i * n);\nloop invariant !(flag ==> (j == i * n)) ==> (j == i * n);\nloop invariant !(flag ==> (j == i * n)) ==> (j == (i + 1) * n);\nloop invariant flag ==> (i <= k);\nloop invariant !(flag ==> (i <= k)) ==> (i <= k + 1);\nloop invariant flag ==> (j == i * n);\nloop invariant !(flag ==> (j == i * n)) ==> (j == i * n);\nloop invariant !(flag ==> (j == i * n)) ==> (j == (i + 1) * n);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nint main()\n{\n  int k = unknown1();\n  int flag = unknown1();\n  int i=0;\n  int j=0;\n  int n = unknown1();\n\n  if (flag == 1){\n     n=1;\n  } else {\n     n=2;\n  }\n\n  i=0;\n\n  /*@\n\n\n\nloop invariant i4: flag ==> (j == i * n);\nloop invariant i5: !(flag ==> (j == i * n)) ==> (j == i * n);\nloop invariant i6: !(flag ==> (j == i * n)) ==> (j == (i + 1) * n);\n*/\nwhile ( i <= k){\n    i++;\n    j= j +n;\n  }\n  if(flag == 1)\n      {;\n//@ assert(j == i);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= k+1;\nloop invariant j == n * i;\nloop invariant (i <= k) ==> (j <= n * (k+1));\nloop invariant (i > k) ==> (j == n * (k+1));\nloop invariant (i <= k) ==> (j < n * (k+1));\nloop invariant (i > k) ==> (j >= n * (k+1));\nloop invariant 1 <= i <= k+1;\nloop invariant j == n * i;\nloop invariant (i <= k) ==> (j <= n * (k+1));\nloop invariant (i > k) ==> (j == n * (k+1));\nloop invariant (i <= k) ==> (j < n * (k+1));\nloop invariant (i > k) ==> (j >= n * (k+1));\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nint main()\n{\n  int k = unknown1();\n  int flag = unknown1();\n  int i=0;\n  int j=0;\n  int n = unknown1();\n\n  if (flag == 1){\n     n=1;\n  } else {\n     n=2;\n  }\n\n  i=0;\n\n  /*@\n\nloop invariant i2: j == n * i;\nloop invariant i3: (i <= k) ==> (j <= n * (k+1));\n\nloop invariant i5: (i <= k) ==> (j < n * (k+1));\nloop invariant i6: (i > k) ==> (j >= n * (k+1));\n*/\nwhile ( i <= k){\n    i++;\n    j= j +n;\n  }\n  if(flag == 1)\n      {;\n//@ assert(j == i);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= k;\nloop invariant 0 <= j <= n*k + 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nint main()\n{\n  int k = unknown1();\n  int flag = unknown1();\n  int i=0;\n  int j=0;\n  int n = unknown1();\n\n  if (flag == 1){\n     n=1;\n  } else {\n     n=2;\n  }\n\n  i=0;\n\n  /*@\n\n\n*/\nwhile ( i <= k){\n    i++;\n    j= j +n;\n  }\n  if(flag == 1)\n      {;\n//@ assert(j == i);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= n <= 2;\nloop invariant 0 <= i <= k;\nloop invariant 0 <= j <= i*n;\nloop invariant j == i*n;\nloop invariant k >= i-1;\nloop invariant k >= i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nint main()\n{\n  int k = unknown1();\n  int flag = unknown1();\n  int i=0;\n  int j=0;\n  int n = unknown1();\n\n  if (flag == 1){\n     n=1;\n  } else {\n     n=2;\n  }\n\n  i=0;\n\n  /*@\nloop invariant i1: 0 <= n <= 2;\n\nloop invariant i3: 0 <= j <= i*n;\nloop invariant i4: j == i*n;\n\n\n*/\nwhile ( i <= k){\n    i++;\n    j= j +n;\n  }\n  if(flag == 1)\n      {;\n//@ assert(j == i);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= k;\nloop invariant 0 <= j <= (k+1) * n;\nloop invariant flag ==> (j == i);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nint main()\n{\n  int k = unknown1();\n  int flag = unknown1();\n  int i=0;\n  int j=0;\n  int n = unknown1();\n\n  if (flag == 1){\n     n=1;\n  } else {\n     n=2;\n  }\n\n  i=0;\n\n  /*@\n\n\n\n*/\nwhile ( i <= k){\n    i++;\n    j= j +n;\n  }\n  if(flag == 1)\n      {;\n//@ assert(j == i);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= k;\nloop invariant j == i * n;\nloop invariant k >= i;\nloop invariant n == 1 ==> flag == 1;\nloop invariant n == 2 ==> flag == 0;\nloop invariant flag == 0 ==> i <= k;\nloop invariant flag == 1 ==> i == k;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nint main()\n{\n  int k = unknown1();\n  int flag = unknown1();\n  int i=0;\n  int j=0;\n  int n = unknown1();\n\n  if (flag == 1){\n     n=1;\n  } else {\n     n=2;\n  }\n\n  i=0;\n\n  /*@\n\nloop invariant i2: j == i * n;\n\nloop invariant i4: n == 1 ==> flag == 1;\n\n\n\n*/\nwhile ( i <= k){\n    i++;\n    j= j +n;\n  }\n  if(flag == 1)\n      {;\n//@ assert(j == i);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= k + 1;\nloop invariant 0 <= j <= (k * (k + 1)) / 2 * n;\nloop invariant i <= k;\nloop invariant j <= (k * (k + 1)) / 2 * n;\nloop invariant if flag == 1 then j == i;\nloop invariant if flag == 0 then j == 2 * i;\nloop invariant 0 <= i <= k + 1;\nloop invariant 0 <= j <= (k * (k + 1)) / 2 * n;\nloop invariant i <= k;\nloop invariant j <= (k * (k + 1)) / 2 * n;\nloop invariant if flag == 1 then j == i;\nloop invariant if flag == 0 then j == 2 * i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nint main()\n{\n  int k = unknown1();\n  int flag = unknown1();\n  int i=0;\n  int j=0;\n  int n = unknown1();\n\n  if (flag == 1){\n     n=1;\n  } else {\n     n=2;\n  }\n\n  i=0;\n\n  /*@\n\n\n\n\n\n\n*/\nwhile ( i <= k){\n    i++;\n    j= j +n;\n  }\n  if(flag == 1)\n      {;\n//@ assert(j == i);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 66,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= k;\nloop invariant j >= i * n;\nloop invariant j <= k * n;\nloop invariant j <= i * n + n;\nloop invariant j >= i * n - n;\nloop invariant j <= i * n + n - 1;\nloop invariant j >= i * n - n + 1;\nloop invariant j <= i * n + n - 2;\nloop invariant j >= i * n - n + 2;\nloop invariant j <= i * n + n - 3;\nloop invariant j >= i * n - n + 3;\nloop invariant j <= i * n + n - 4;\nloop invariant j >= i * n - n + 4;\nloop invariant j <= i * n + n - 5;\nloop invariant j >= i * n - n + 5;\nloop invariant j <= i * n + n - 6;\nloop invariant j >= i * n - n + 6;\nloop invariant j <= i * n + n - 7;\nloop invariant j >= i * n - n + 7;\nloop invariant j <= i * n + n - 8;\nloop invariant j >= i * n - n + 8;\nloop invariant j <= i * n + n - 9;\nloop invariant j >= i * n - n + 9;\nloop invariant j <= i * n + n - 10;\nloop invariant j >= i * n - n + 10;\nloop invariant j <= i * n + n - 11;\nloop invariant j >= i * n - n + 11;\nloop invariant j <= i * n + n - 12;\nloop invariant j >= i * n - n + 12;\nloop invariant j <= i * n + n - 13;\nloop invariant j >= i * n - n + 13;\nloop invariant j <= i * n + n - 14;\nloop invariant j >= i * n - n + 14;\nloop invariant j <= i * n + n - 15;\nloop invariant j >= i * n - n + 15;\nloop invariant j <= i * n + n - 16;\nloop invariant j >= i * n - n + 16;\nloop invariant j <= i * n + n - 17;\nloop invariant j >= i * n - n + 17;\nloop invariant j <= i * n + n - 18;\nloop invariant j >= i * n - n + 18;\nloop invariant j <= i * n + n - 19;\nloop invariant j >= i * n - n + 19;\nloop invariant j <= i * n + n - 20;\nloop invariant j >= i * n - n + 20;\nloop invariant j <= i * n + n - 21;\nloop invariant j >= i * n - n + 21;\nloop invariant j <= i * n + n - 22;\nloop invariant j >= i * n - n + 22;\nloop invariant j <= i * n + n - 23;\nloop invariant j >= i * n - n + 23;\nloop invariant j <= i * n + n - 24;\nloop invariant j >= i * n - n + 24;\nloop invariant j <= i * n + n - 25;\nloop invariant j >= i * n - n + 25;\nloop invariant j <= i * n + n - 26;\nloop invariant j >= i * n - n + 26;\nloop invariant j <= i * n + n - 27;\nloop invariant j >= i * n - n + 27;\nloop invariant j <= i * n + n - 28;\nloop invariant j >= i * n - n + 28;\nloop invariant j <= i * n + n - 29;\nloop invariant j >= i * n - n + 29;\nloop invariant j <= i * n + n - 30;\nloop invariant j >= i * n - n + 30;\nloop invariant j <= i * n + n - 31;\nloop invariant j >= i * n - n + 31;\nloop invariant j <= i * n + n - 32;\nloop invariant j >= i * n - n + 32;\nloop invariant j <= i * n + n - 33;\nloop invariant j >= i * n - n + 33;\nloop invariant j <= i * n + n - 34;\nloop invariant j >= i * n - n + 34;\nloop invariant j <= i * n + n - 35;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nint main()\n{\n  int k = unknown1();\n  int flag = unknown1();\n  int i=0;\n  int j=0;\n  int n = unknown1();\n\n  if (flag == 1){\n     n=1;\n  } else {\n     n=2;\n  }\n\n  i=0;\n\n  /*@\n\nloop invariant i2: j >= i * n;\n\nloop invariant i4: j <= i * n + n;\nloop invariant i5: j >= i * n - n;\nloop invariant i6: j <= i * n + n - 1;\nloop invariant i7: j >= i * n - n + 1;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile ( i <= k){\n    i++;\n    j= j +n;\n  }\n  if(flag == 1)\n      {;\n//@ assert(j == i);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant k >= 0;\nloop invariant flag == 0 || flag == 1;\nloop invariant n == 1 || n == 2;\nloop invariant n >= 2 ==> i <= k;\nloop invariant n == 2 ==> (j == i * i - i) && (i == 0 || i == k);\nloop invariant n == 1 ==> (j == i) && (i == 0 || i == k);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nint main()\n{\n  int k = unknown1();\n  int flag = unknown1();\n  int i=0;\n  int j=0;\n  int n = unknown1();\n\n  if (flag == 1){\n     n=1;\n  } else {\n     n=2;\n  }\n\n  i=0;\n\n  /*@\n\n\nloop invariant i3: n == 1 || n == 2;\n\n\n\n*/\nwhile ( i <= k){\n    i++;\n    j= j +n;\n  }\n  if(flag == 1)\n      {;\n//@ assert(j == i);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= k;\nloop invariant 0 <= j <= i * n;\nloop invariant j == i * n;\nloop invariant i <= k ==> j == i;\nloop invariant i <= k ==> j == i * n;\nloop invariant i <= k ==> j == i * n ==> j == i;\nloop invariant i <= k ==> j == i * n ==> j == i;\nloop invariant i <= k ==> j == i * n ==> j == i;\nloop invariant i <= k ==> j == i * n ==> j == i;\nloop invariant i <= k ==> j == i * n ==> j == i;\nloop invariant i <= k ==> j == i * n ==> j == i;\nloop invariant i <= k ==> j == i * n ==> j == i;\nloop invariant i <= k ==> j == i * n ==> j == i;\nloop invariant i <= k ==> j == i * n ==> j == i;\nloop invariant i <= k ==> j == i * n ==> j == i;\nloop invariant i <= k ==> j == i * n ==> j == i;\nloop invariant i <= k ==> j == i * n ==> j == i;\nloop invariant i <= k ==> j == i * n ==> j == i;\nloop invariant i <= k ==> j == i * n ==> j == i;\nloop invariant i <= k ==> j == i * n ==> j == i;\nloop invariant i <= k ==> j == i * n ==> j == i;\nloop invariant i <= k ==> j == i * n ==> j == i;\nloop invariant i <= k ==> j == i * n ==> j == i;\nloop invariant i <= k ==> j == i * n ==> j == i;\nloop invariant i <= k ==> j == i * n ==> j == i;\nloop invariant i <= k ==> j == i * n ==> j == i;\nloop invariant i <= k ==> j == i * n ==> j == i;\nloop invariant i <= k ==> j == i * n ==> j == i;\nloop invariant i <= k ==> j == i * n ==> j == i;\nloop invariant i <= k ==> j == i * n ==> j == i;\nloop invariant i <= k ==> j == i * n ==> j == i;\nloop invariant i <= k ==> j == i * n ==> j == i;\nloop invariant i <= k ==> j == i * n ==> j == i;\nloop invariant i <= k ==> j == i * n ==> j == i;\nloop invariant i <= k ==> j == i * n ==> j == i;\nloop invariant i <= k ==> j == i * n ==> j == i;\nloop invariant i <= k ==> j == i * n ==> j == i;\nloop invariant i <= k ==> j == i * n ==> j == i;\nloop invariant i <= k ==> j == i * n ==> j == i;\nloop invariant i <= k ==> j == i * n ==> j == i;\nloop invariant i <= k ==> j == i * n ==> j == i;\nloop invariant i <= k ==> j == i * n ==> j == i;\nloop invariant i <= k ==> j == i * n ==> j == i;\nloop invariant i <= k ==> j == i * n ==> j == i;\nloop invariant i <= k ==> j == i * n ==> j == i;\nloop invariant i <= k ==> j == i * n ==> j == i;\nloop invariant i <= k ==> j == i * n ==> j == i;\nloop invariant i <= k ==> j == i * n ==> j == i;\nloop invariant i <= k ==> j == i * n ==> j == i;\nloop invariant i <= k ==> j == i * n ==> j == i;\nloop invariant i <= k ==> j == i * n ==> j == i;\nloop invariant i <= k ==> j == i * n ==> j == i;\nloop invariant i <= k ==> j == i * n ==> j == i;\nloop invariant i <= k ==> j == i * n ==> j == i;\nloop invariant i <= k ==> j == i * n ==> j == i;\nloop invariant i <= k ==> j == i * n ==> j == i;\nloop invariant i <= k ==> j == i * n ==> j == i;\nloop invariant i <= k ==> j == i * n ==> j == i;\nloop invariant i <= k ==> j == i * n ==> j == i;\nloop invariant i <= k ==> j == i * n ==> j == i;\nloop invariant i <= k ==> j == i * n ==> j == i;\nloop invariant i <= k ==> j == i * n ==> j == i;\nloop invariant i <= k ==> j == i * n ==> j == i;\nloop invariant i <= k ==> j == i * n ==> j == i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nint main()\n{\n  int k = unknown1();\n  int flag = unknown1();\n  int i=0;\n  int j=0;\n  int n = unknown1();\n\n  if (flag == 1){\n     n=1;\n  } else {\n     n=2;\n  }\n\n  i=0;\n\n  /*@\n\n\nloop invariant i3: j == i * n;\n\nloop invariant i5: i <= k ==> j == i * n;\n\n*/\nwhile ( i <= k){\n    i++;\n    j= j +n;\n  }\n  if(flag == 1)\n      {;\n//@ assert(j == i);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= k;\nloop invariant 0 <= j <= n*k;\nloop invariant i <= k ==> j <= i*n;\nloop invariant i <= k ==> j >= 0;\nloop invariant i <= k ==> j <= n*k;\nloop invariant i <= k ==> j >= i;\nloop invariant i <= k ==> j <= i*n;\nloop invariant i <= k ==> j >= 0;\nloop invariant i <= k ==> j <= n*k;\nloop invariant i <= k ==> j >= i;\nloop invariant i <= k ==> j <= i*n;\nloop invariant i <= k ==> j >= 0;\nloop invariant i <= k ==> j <= n*k;\nloop invariant i <= k ==> j >= i;\nloop invariant i <= k ==> j <= i*n;\nloop invariant i <= k ==> j >= 0;\nloop invariant i <= k ==> j <= n*k;\nloop invariant i <= k ==> j >= i;\nloop invariant i <= k ==> j <= i*n;\nloop invariant i <= k ==> j >= 0;\nloop invariant i <= k ==> j <= n*k;\nloop invariant i <= k ==> j >= i;\nloop invariant i <= k ==> j <= i*n;\nloop invariant i <= k ==> j >= 0;\nloop invariant i <= k ==> j <= n*k;\nloop invariant i <= k ==> j >= i;\nloop invariant i <= k ==> j <= i*n;\nloop invariant i <= k ==> j >= 0;\nloop invariant i <= k ==> j <= n*k;\nloop invariant i <= k ==> j >= i;\nloop invariant i <= k ==> j <= i*n;\nloop invariant i <= k ==> j >= 0;\nloop invariant i <= k ==> j <= n*k;\nloop invariant i <= k ==> j >= i;\nloop invariant i <= k ==> j <= i*n;\nloop invariant i <= k ==> j >= 0;\nloop invariant i <= k ==> j <= n*k;\nloop invariant i <= k ==> j >= i;\nloop invariant i <= k ==> j <= i*n;\nloop invariant i <= k ==> j >= 0;\nloop invariant i <= k ==> j <= n*k;\nloop invariant i <= k ==> j >= i;\nloop invariant i <= k ==> j <= i*n;\nloop invariant i <= k ==> j >= 0;\nloop invariant i <= k ==> j <= n*k;\nloop invariant i <= k ==> j >= i;\nloop invariant i <= k ==> j <= i*n;\nloop invariant i <= k ==> j >= 0;\nloop invariant i <= k ==> j <= n*k;\nloop invariant i <= k ==> j >= i;\nloop invariant i <= k ==> j <= i*n;\nloop invariant i <= k ==> j >= 0;\nloop invariant i <= k ==> j <= n*k;\nloop invariant i <= k ==> j >= i;\nloop invariant i <= k ==> j <= i*n;\nloop invariant i <= k ==> j >= 0;\nloop invariant i <= k ==> j <= n*k;\nloop invariant i <= k ==> j >= i;\nloop invariant i <= k ==> j <= i*n;\nloop invariant i <= k ==> j >= 0;\nloop invariant i <= k ==> j <= n*k;\nloop invariant i <= k ==> j >= i;\nloop invariant i <= k ==> j <= i*n;\nloop invariant i <= k ==> j >= 0;\nloop invariant i <= k ==> j <= n*k;\nloop invariant i <= k ==> j >= i;\nloop invariant i <= k ==> j <= i*n;\nloop invariant i <= k ==> j >= 0;\nloop invariant i <= k ==> j <= n*k;\nloop invariant i <= k ==> j >= i;\nloop invariant i <= k ==> j <= i*n;\nloop invariant i <= k ==> j >= 0;\nloop invariant i <= k ==> j <= n*k;\nloop invariant i <= k ==> j >= i;\nloop invariant i <= k ==> j <= i*n;\nloop invariant i <= k ==> j >= 0;\nloop invariant i <= k ==> j <= n*k;\nloop invariant i <= k ==> j >= i;\nloop invariant i <= k ==> j <= i*n;\nloop invariant i <= k ==> j >= 0;\nloop invariant i <= k ==> j <= n*k;\nloop invariant i <= k ==> j >= i;\nloop invariant i <= k ==> j <= i*n;\nloop invariant i <= k ==> j >= 0;\nloop invariant i <= k ==> j <= n*k;\nloop invariant i <= k ==> j >= i;\nloop invariant i <= k ==> j <= i*n;\nloop invariant i <= k ==> j >= 0;\nloop invariant i <= k ==> j <= n*k;\nloop invariant i <= k ==> j >= i;\nloop invariant i <= k ==> j <= i*n;\nloop invariant i <= k ==> j >= 0;\nloop invariant i <= k ==> j <= n*k;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nint main()\n{\n  int k = unknown1();\n  int flag = unknown1();\n  int i=0;\n  int j=0;\n  int n = unknown1();\n\n  if (flag == 1){\n     n=1;\n  } else {\n     n=2;\n  }\n\n  i=0;\n\n  /*@\n\n\nloop invariant i3: i <= k ==> j <= i*n;\n\nloop invariant i5: i <= k ==> j <= n*k;\n\n*/\nwhile ( i <= k){\n    i++;\n    j= j +n;\n  }\n  if(flag == 1)\n      {;\n//@ assert(j == i);\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 192: unexpected token 'flag'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nint main()\n{\n  int k = unknown1();\n  int flag = unknown1();\n  int i=0;\n  int j=0;\n  int n = unknown1();\n\n  if (flag == 1){\n     n=1;\n  } else {\n     n=2;\n  }\n\n  i=0;\n\n  /*@\nloop invariant i1: 0 <= i <= k;\nloop invariant i2: 1 <= k;\nloop invariant i3: 0 <= j <= i * n;\nloop invariant i4: flag == 1 ==> n == 1;\nloop invariant i5: flag == 0 ==> n == 2;\nloop invariant i6: flag == 1 ==> i == j;\nloop invariant i7: flag == 0 ==> j == i * n;\nloop invariant i8: i1;\nloop invariant i9: i2;\nloop invariant i10: i3;\nloop invariant i11: i4;\nloop invariant i12: i5;\nloop invariant i13: i6;\nloop invariant i14: i7;\nloop invariant i15: i8;\nloop invariant i16: i9;\nloop invariant i17: i10;\nloop invariant i18: i11;\nloop invariant i19: i12;\nloop invariant i20: i13;\nloop invariant i21: i14;\nloop invariant i22: i15;\nloop invariant i23: i16;\nloop invariant i24: i17;\nloop invariant i25: i18;\nloop invariant i26: i19;\nloop invariant i27: i20;\nloop invariant i28: i21;\nloop invariant i29: i22;\nloop invariant i30: i23;\nloop invariant i31: i24;\nloop invariant i32: i25;\nloop invariant i33: i26;\nloop invariant i34: i27;\nloop invariant i35: i28;\nloop invariant i36: i29;\nloop invariant i37: i30;\nloop invariant i38: i31;\nloop invariant i39: i32;\nloop invariant i40: i33;\nloop invariant i41: i34;\nloop invariant i42: i35;\nloop invariant i43: i36;\nloop invariant i44: i37;\nloop invariant i45: i38;\nloop invariant i46: i39;\nloop invariant i47: i40;\nloop invariant i48: i41;\nloop invariant i49: i42;\nloop invariant i50: i43;\nloop invariant i51: i44;\nloop invariant i52: i45;\nloop invariant i53: i46;\nloop invariant i54: i47;\nloop invariant i55: i48;\nloop invariant i56: i49;\nloop invariant i57: i50;\nloop invariant i58: i51;\nloop invariant i59: i52;\nloop invariant i60: i53;\nloop invariant i61: i54;\nloop invariant i62: i55;\nloop invariant i63: i56;\nloop invariant i64: i57;\nloop invariant i65: i58;\nloop invariant i66: i59;\nloop invariant i67: i60;\nloop invariant i68: i61;\nloop invariant i69: i62;\nloop invariant i70: i63;\nloop invariant i71: i64;\nloop invariant i72: i65;\nloop invariant i73: i66;\nloop invariant i74: i67;\nloop invariant i75: i68;\nloop invariant i76: i69;\nloop invariant i77: i70;\nloop invariant i78: i71;\nloop invariant i79: i72;\nloop invariant i80: i73;\nloop invariant i81: i74;\nloop invariant i82: i75;\nloop invariant i83: i76;\nloop invariant i84: i77;\nloop invariant i85: i78;\nloop invariant i86: i79;\nloop invariant i87: i80;\nloop invariant i88: i81;\nloop invariant i89: i82;\nloop invariant i90: i83;\nloop invariant i91: i84;\nloop invariant i92: i85;\nloop invariant i93: i86;\nloop invariant i94: i87;\nloop invariant i95: i88;\nloop invariant i96: i89;\nloop invariant i97: i90;\nloop invariant i98: i91;\nloop invariant i99: i92;\nloop invariant i100: i93;\nloop invariant i101: i94;\nloop invariant i102: i95;\nloop invariant i103: i96;\nloop invariant i104: i97;\nloop invariant i105: i98;\nloop invariant i106: i99;\nloop invariant i107: i100;\nloop invariant i108: i101;\nloop invariant i109: i102;\nloop invariant i110: i103;\nloop invariant i111: i104;\nloop invariant i112: i105;\nloop invariant i113: i106;\nloop invariant i114: i107;\nloop invariant i115: i108;\nloop invariant i116: i109;\nloop invariant i117: i110;\nloop invariant i118: i111;\nloop invariant i119: i112;\nloop invariant i120: i113;\nloop invariant i121: i114;\nloop invariant i122: i115;\nloop invariant i123: i116;\nloop invariant i124: i117;\nloop invariant i125: i118;\nloop invariant i126: i119;\nloop invariant i127: i120;\nloop invariant i128: i121;\nloop invariant i129: i122;\nloop invariant i130: i123;\nloop invariant i131: i124;\nloop invariant i132: i125;\nloop invariant i133: i126;\nloop invariant i134: i127;\nloop invariant i135: i128;\nloop invariant i136: i129;\nloop invariant i137: i130;\nloop invariant i138: i131;\nloop invariant i139: i132;\nloop invariant i140: i133;\nloop invariant i141: i134;\nloop invariant i142: i135;\nloop invariant i143: i136;\nloop invariant i144: i137;\nloop invariant i145: i138;\nloop invariant i146: i139;\nloop invariant i147: i140;\nloop invariant i148: i141;\nloop invariant i149: i142;\nloop invariant i150: i143;\nloop invariant i151: i144;\nloop invariant i152: i145;\nloop invariant i153: i146;\nloop invariant i154: i147;\nloop invariant i155: i148;\nloop invariant i156: i149;\nloop invariant i157: i150;\nloop invariant i158: i151;\nloop invariant i159: i152;\nloop invariant i160: i153;\nloop invariant i161: i154;\nloop invariant i162: i155;\nloop invariant i163: i156;\nloop invariant i164: i157;\nloop invariant i165: i158;\nloop invariant i166: 0 <= j <= i*n;\nloop invariant i167: if flag == 1 then j == i else j == 2*i;\nloop invariant i168: if flag == 1 then k == 1 else k == 2;\nloop invariant i169: flag ==> (i <= k);\nloop invariant i170: !(flag ==> (i <= k)) ==> (i <= k);\nloop invariant i171: !(flag ==> (i <= k)) ==> (i <= k + 1);\nloop invariant i172: flag ==> (j == i * n);\nloop invariant i173: !(flag ==> (j == i * n)) ==> (j == i * n);\nloop invariant i174: !(flag ==> (j == i * n)) ==> (j == (i + 1) * n);\nloop invariant i175: 1 <= i <= k+1;\nloop invariant i176: j == n * i;\nloop invariant i177: (i <= k) ==> (j <= n * (k+1));\nloop invariant i178: (i > k) ==> (j == n * (k+1));\nloop invariant i179: (i <= k) ==> (j < n * (k+1));\nloop invariant i180: (i > k) ==> (j >= n * (k+1));\nloop invariant i181: 0 <= j <= n*k + 1;\nloop invariant i182: 0 <= n <= 2;\nloop invariant i183: j == i*n;\nloop invariant i184: k >= i-1;\nloop invariant i185: k >= i;\nloop invariant i186: 0 <= j <= (k+1) * n;\nloop invariant i187: flag ==> (j == i);\nloop invariant i188: j == i * n;\nloop invariant i189: n == 1 ==> flag == 1;\nloop invariant i190: n == 2 ==> flag == 0;\nloop invariant i191: flag == 0 ==> i <= k;\nloop invariant i192: flag == 1 ==> i == k;\nloop invariant i193: 0 <= i <= k + 1;\nloop invariant i194: 0 <= j <= (k * (k + 1)) / 2 * n;\nloop invariant i195: i <= k;\nloop invariant i196: j <= (k * (k + 1)) / 2 * n;\nloop invariant i197: if flag == 1 then j == i;\nloop invariant i198: if flag == 0 then j == 2 * i;\nloop invariant i199: j >= i * n;\nloop invariant i200: j <= k * n;\nloop invariant i201: j <= i * n + n;\nloop invariant i202: j >= i * n - n;\nloop invariant i203: j <= i * n + n - 1;\nloop invariant i204: j >= i * n - n + 1;\nloop invariant i205: j <= i * n + n - 2;\nloop invariant i206: j >= i * n - n + 2;\nloop invariant i207: j <= i * n + n - 3;\nloop invariant i208: j >= i * n - n + 3;\nloop invariant i209: j <= i * n + n - 4;\nloop invariant i210: j >= i * n - n + 4;\nloop invariant i211: j <= i * n + n - 5;\nloop invariant i212: j >= i * n - n + 5;\nloop invariant i213: j <= i * n + n - 6;\nloop invariant i214: j >= i * n - n + 6;\nloop invariant i215: j <= i * n + n - 7;\nloop invariant i216: j >= i * n - n + 7;\nloop invariant i217: j <= i * n + n - 8;\nloop invariant i218: j >= i * n - n + 8;\nloop invariant i219: j <= i * n + n - 9;\nloop invariant i220: j >= i * n - n + 9;\nloop invariant i221: j <= i * n + n - 10;\nloop invariant i222: j >= i * n - n + 10;\nloop invariant i223: j <= i * n + n - 11;\nloop invariant i224: j >= i * n - n + 11;\nloop invariant i225: j <= i * n + n - 12;\nloop invariant i226: j >= i * n - n + 12;\nloop invariant i227: j <= i * n + n - 13;\nloop invariant i228: j >= i * n - n + 13;\nloop invariant i229: j <= i * n + n - 14;\nloop invariant i230: j >= i * n - n + 14;\nloop invariant i231: j <= i * n + n - 15;\nloop invariant i232: j >= i * n - n + 15;\nloop invariant i233: j <= i * n + n - 16;\nloop invariant i234: j >= i * n - n + 16;\nloop invariant i235: j <= i * n + n - 17;\nloop invariant i236: j >= i * n - n + 17;\nloop invariant i237: j <= i * n + n - 18;\nloop invariant i238: j >= i * n - n + 18;\nloop invariant i239: j <= i * n + n - 19;\nloop invariant i240: j >= i * n - n + 19;\nloop invariant i241: j <= i * n + n - 20;\nloop invariant i242: j >= i * n - n + 20;\nloop invariant i243: j <= i * n + n - 21;\nloop invariant i244: j >= i * n - n + 21;\nloop invariant i245: j <= i * n + n - 22;\nloop invariant i246: j >= i * n - n + 22;\nloop invariant i247: j <= i * n + n - 23;\nloop invariant i248: j >= i * n - n + 23;\nloop invariant i249: j <= i * n + n - 24;\nloop invariant i250: j >= i * n - n + 24;\nloop invariant i251: j <= i * n + n - 25;\nloop invariant i252: j >= i * n - n + 25;\nloop invariant i253: j <= i * n + n - 26;\nloop invariant i254: j >= i * n - n + 26;\nloop invariant i255: j <= i * n + n - 27;\nloop invariant i256: j >= i * n - n + 27;\nloop invariant i257: j <= i * n + n - 28;\nloop invariant i258: j >= i * n - n + 28;\nloop invariant i259: j <= i * n + n - 29;\nloop invariant i260: j >= i * n - n + 29;\nloop invariant i261: j <= i * n + n - 30;\nloop invariant i262: j >= i * n - n + 30;\nloop invariant i263: j <= i * n + n - 31;\nloop invariant i264: j >= i * n - n + 31;\nloop invariant i265: j <= i * n + n - 32;\nloop invariant i266: j >= i * n - n + 32;\nloop invariant i267: j <= i * n + n - 33;\nloop invariant i268: j >= i * n - n + 33;\nloop invariant i269: j <= i * n + n - 34;\nloop invariant i270: j >= i * n - n + 34;\nloop invariant i271: j <= i * n + n - 35;\nloop invariant i272: k >= 0;\nloop invariant i273: flag == 0 || flag == 1;\nloop invariant i274: n == 1 || n == 2;\nloop invariant i275: n >= 2 ==> i <= k;\nloop invariant i276: n == 2 ==> (j == i * i - i) && (i == 0 || i == k);\nloop invariant i277: n == 1 ==> (j == i) && (i == 0 || i == k);\nloop invariant i278: i <= k ==> j == i;\nloop invariant i279: i <= k ==> j == i * n;\nloop invariant i280: i <= k ==> j == i * n ==> j == i;\nloop invariant i281: 0 <= j <= n*k;\nloop invariant i282: i <= k ==> j <= i*n;\nloop invariant i283: i <= k ==> j >= 0;\nloop invariant i284: i <= k ==> j <= n*k;\nloop invariant i285: i <= k ==> j >= i;\n*/\nwhile ( i <= k){\n    i++;\n    j= j +n;\n  }\n  if(flag == 1)\n      {;\n//@ assert(j == i);\n}\n\n}",
        "combined_annotation_num_solver_calls": 232,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nint main()\n{\n  int k = unknown1();\n  int flag = unknown1();\n  int i=0;\n  int j=0;\n  int n = unknown1();\n\n  if (flag == 1){\n     n=1;\n  } else {\n     n=2;\n  }\n\n  i=0;\n\n  /*@\n\n\nloop invariant i3: 0 <= j <= i * n;\nloop invariant i4: flag == 1 ==> n == 1;\nloop invariant i5: flag == 0 ==> n == 2;\nloop invariant i6: flag == 1 ==> i == j;\nloop invariant i7: flag == 0 ==> j == i * n;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i166: 0 <= j <= i*n;\n\n\n\n\n\nloop invariant i172: flag ==> (j == i * n);\nloop invariant i173: !(flag ==> (j == i * n)) ==> (j == i * n);\nloop invariant i174: !(flag ==> (j == i * n)) ==> (j == (i + 1) * n);\n\nloop invariant i176: j == n * i;\nloop invariant i177: (i <= k) ==> (j <= n * (k+1));\n\nloop invariant i179: (i <= k) ==> (j < n * (k+1));\nloop invariant i180: (i > k) ==> (j >= n * (k+1));\n\nloop invariant i182: 0 <= n <= 2;\nloop invariant i183: j == i*n;\n\n\n\n\nloop invariant i188: j == i * n;\nloop invariant i189: n == 1 ==> flag == 1;\n\n\n\n\n\n\n\n\n\nloop invariant i199: j >= i * n;\n\nloop invariant i201: j <= i * n + n;\nloop invariant i202: j >= i * n - n;\nloop invariant i203: j <= i * n + n - 1;\nloop invariant i204: j >= i * n - n + 1;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i274: n == 1 || n == 2;\n\n\n\n\nloop invariant i279: i <= k ==> j == i * n;\n\n\nloop invariant i282: i <= k ==> j <= i*n;\nloop invariant i283: i <= k ==> j >= 0;\nloop invariant i284: i <= k ==> j <= n*k;\nloop invariant i285: i <= k ==> j >= i;\n*/\nwhile ( i <= k){\n    i++;\n    j= j +n;\n  }\n  if(flag == 1)\n      {;\n//@ assert(j == i);\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/split.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/11.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/15.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/16.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/18.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/23.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/30.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/32.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/37.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/38.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/41.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/43.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/44.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/13.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/14.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/19.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/20.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/39.c"
        ],
        "skipped": [],
        "total": 123,
        "success_count": 102,
        "failure_count": 21,
        "success_rate": 0.8292682926829268
    }
}