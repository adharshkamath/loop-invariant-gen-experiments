{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\nint main() { \n  int i, n=unknown_int(), sn=0;\n  for(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
        "success": false,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn == a * i;\nloop invariant sn >= 0;\nloop invariant sn <= a * n;\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant a == 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= sn <= n * a;\nloop invariant sn == i * a;\nloop invariant sn == 0 ==> i == 0;\nloop invariant sn == n * a ==> i == n;\nloop invariant sn == i * a ==> sn == n * a ==> i == n;\nloop invariant sn == i * a ==> sn == 0 ==> i == 0;\nloop invariant sn == i * a ==> sn == n * a ==> i == n;\nloop invariant sn == i * a ==> sn == 0 ==> i == 0;\nloop invariant sn == i * a ==> sn == n * a ==> i == n;\nloop invariant sn == i * a ==> sn == 0 ==> i == 0;\nloop invariant sn == i * a ==> sn == n * a ==> i == n;\nloop invariant sn == i * a ==> sn == 0 ==> i == 0;\nloop invariant sn == i * a ==> sn == n * a ==> i == n;\nloop invariant sn == i * a ==> sn == 0 ==> i == 0;\nloop invariant sn == i * a ==> sn == n * a ==> i == n;\nloop invariant sn == i * a ==> sn == 0 ==> i == 0;\nloop invariant sn == i * a ==> sn == n * a ==> i == n;\nloop invariant sn == i * a ==> sn == 0 ==> i == 0;\nloop invariant sn == i * a ==> sn == n * a ==> i == n;\nloop invariant sn == i * a ==> sn == 0 ==> i == 0;\nloop invariant sn == i * a ==> sn == n * a ==> i == n;\nloop invariant sn == i * a ==> sn == 0 ==> i == 0;\nloop invariant sn == i * a ==> sn == n * a ==> i == n;\nloop invariant sn == i * a ==> sn == 0 ==> i == 0;\nloop invariant sn == i * a ==> sn == n * a ==> i == n;\nloop invariant sn == i * a ==> sn == 0 ==> i == 0;\nloop invariant sn == i * a ==> sn == n * a ==> i == n;\nloop invariant sn == i * a ==> sn == 0 ==> i == 0;\nloop invariant sn == i * a ==> sn == n * a ==> i == n;\nloop invariant sn == i * a ==> sn == 0 ==> i == 0;\nloop invariant sn == i * a ==> sn == n * a ==> i == n;\nloop invariant sn == i * a ==> sn == 0 ==> i == 0;\nloop invariant sn == i * a ==> sn == n * a ==> i == n;\nloop invariant sn == i * a ==> sn == 0 ==> i == 0;\nloop invariant sn == i * a ==> sn == n * a ==> i == n;\nloop invariant sn == i * a ==> sn == 0 ==> i == 0;\nloop invariant sn == i * a ==> sn == n * a ==> i == n;\nloop invariant sn == i * a ==> sn == 0 ==> i == 0;\nloop invariant sn == i * a ==> sn == n * a ==> i == n;\nloop invariant sn == i * a ==> sn == 0 ==> i == 0;\nloop invariant sn == i * a ==> sn == n * a ==> i == n;\nloop invariant sn == i * a ==> sn == 0 ==> i == 0;\nloop invariant sn == i * a ==> sn == n * a ==> i == n;\nloop invariant sn == i * a ==> sn == 0 ==> i == 0;\nloop invariant sn == i * a ==> sn == n * a ==> i == n;\nloop invariant sn == i * a ==> sn == 0 ==> i == 0;\nloop invariant sn == i * a ==> sn == n * a ==> i == n;\nloop invariant sn == i * a ==> sn == 0 ==> i == 0;\nloop invariant sn == i * a ==> sn == n * a ==> i == n;\nloop invariant sn == i * a ==> sn == 0 ==> i == 0;\nloop invariant sn == i * a ==> sn == n * a ==> i == n;\nloop invariant sn == i * a ==> sn == 0 ==> i == 0;\nloop invariant sn == i * a ==> sn == n * a ==> i == n;\nloop invariant sn == i * a ==> sn == 0 ==> i == 0;\nloop invariant sn == i * a ==> sn == n * a ==> i == n;\nloop invariant sn == i * a ==> sn == 0 ==> i == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= n;\nloop invariant 0 <= i <= n;\nloop invariant 0 <= sn <= n;\nloop invariant sn == (i-1)*a;\nloop invariant i < n ==> sn == (i-1)*a;\nloop invariant i == n ==> sn == n*a;\nloop invariant i == 0 ==> sn == 0;\nloop invariant i > 0 ==> sn != 0;\nloop invariant i == 0 ==> sn == 0;\nloop invariant i == n ==> sn == n*a;\nloop invariant i < n ==> sn != n*a;\nloop invariant sn == (i-1)*a ==> sn <= n*a;\nloop invariant sn == (i-1)*a ==> sn >= 0;\nloop invariant sn == (i-1)*a ==> sn == (i-1)*a;\nloop invariant sn == (i-1)*a ==> sn <= n*a;\nloop invariant sn == (i-1)*a ==> sn >= 0;\nloop invariant sn == (i-1)*a ==> sn == (i-1)*a;\nloop invariant sn == (i-1)*a ==> sn <= n*a;\nloop invariant sn == (i-1)*a ==> sn >= 0;\nloop invariant sn == (i-1)*a ==> sn == (i-1)*a;\nloop invariant sn == (i-1)*a ==> sn <= n*a;\nloop invariant sn == (i-1)*a ==> sn >= 0;\nloop invariant sn == (i-1)*a ==> sn == (i-1)*a;\nloop invariant sn == (i-1)*a ==> sn <= n*a;\nloop invariant sn == (i-1)*a ==> sn >= 0;\nloop invariant sn == (i-1)*a ==> sn == (i-1)*a;\nloop invariant sn == (i-1)*a ==> sn <= n*a;\nloop invariant sn == (i-1)*a ==> sn >= 0;\nloop invariant sn == (i-1)*a ==> sn == (i-1)*a;\nloop invariant sn == (i-1)*a ==> sn <= n*a;\nloop invariant sn == (i-1)*a ==> sn >= 0;\nloop invariant sn == (i-1)*a ==> sn == (i-1)*a;\nloop invariant sn == (i-1)*a ==> sn <= n*a;\nloop invariant sn == (i-1)*a ==> sn >= 0;\nloop invariant sn == (i-1)*a ==> sn == (i-1)*a;\nloop invariant sn == (i-1)*a ==> sn <= n*a;\nloop invariant sn == (i-1)*a ==> sn >= 0;\nloop invariant sn == (i-1)*a ==> sn == (i-1)*a;\nloop invariant sn == (i-1)*a ==> sn <= n*a;\nloop invariant sn == (i-1)*a ==> sn >= 0;\nloop invariant sn == (i-1)*a ==> sn == (i-1)*a;\nloop invariant sn == (i-1)*a ==> sn <= n*a;\nloop invariant sn == (i-1)*a ==> sn >= 0;\nloop invariant sn == (i-1)*a ==> sn == (i-1)*a;\nloop invariant sn == (i-1)*a ==> sn <= n*a;\nloop invariant sn == (i-1)*a ==> sn >= 0;\nloop invariant sn == (i-1)*a ==> sn == (i-1)*a;\nloop invariant sn == (i-1)*a ==> sn <= n*a;\nloop invariant sn == (i-1)*a ==> sn >= 0;\nloop invariant sn == (i-1)*a ==> sn == (i-1)*a;\nloop invariant sn == (i-1)*a ==> sn <= n*a;\nloop invariant sn == (i-1)*a ==> sn >= 0;\nloop invariant sn == (i-1)*a ==> sn == (i-1)*a;\nloop invariant sn == (i-1)*a ==> sn <= n*a;\nloop invariant sn == (i-1)*a ==> sn >= 0;\nloop invariant sn == (i-1)*a ==> sn == (i-1)*a;\nloop invariant sn == (i-1)*a ==> sn <= n*a;\nloop invariant sn == (i-1)*a ==> sn >= 0;\nloop invariant sn == (i-1)*a ==> sn == (i-1)*a;\nloop invariant sn == (i-1)*a ==> sn <= n*a;\nloop invariant sn == (i-1)*a ==> sn >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= sn <= (a*n);\nloop invariant sn >= 0;\nloop invariant sn <= (a*n);\nloop invariant sn >= (a*(i-1));\nloop invariant sn <= (a*i);\nloop invariant sn >= (a*(i+1));\nloop invariant sn <= (a*(i+2));\nloop invariant sn >= (a*(i+3));\nloop invariant sn <= (a*(i+4));\nloop invariant sn >= (a*(i+5));\nloop invariant sn <= (a*(i+6));\nloop invariant sn >= (a*(i+7));\nloop invariant sn <= (a*(i+8));\nloop invariant sn >= (a*(i+9));\nloop invariant sn <= (a*(i+10));\nloop invariant sn >= (a*(i+11));\nloop invariant sn <= (a*(i+12));\nloop invariant sn >= (a*(i+13));\nloop invariant sn <= (a*(i+14));\nloop invariant sn >= (a*(i+15));\nloop invariant sn <= (a*(i+16));\nloop invariant sn >= (a*(i+17));\nloop invariant sn <= (a*(i+18));\nloop invariant sn >= (a*(i+19));\nloop invariant sn <= (a*(i+20));\nloop invariant sn >= (a*(i+21));\nloop invariant sn <= (a*(i+22));\nloop invariant sn >= (a*(i+23));\nloop invariant sn <= (a*(i+24));\nloop invariant sn >= (a*(i+25));\nloop invariant sn <= (a*(i+26));\nloop invariant sn >= (a*(i+27));\nloop invariant sn <= (a*(i+28));\nloop invariant sn >= (a*(i+29));\nloop invariant sn <= (a*(i+30));\nloop invariant sn >= (a*(i+31));\nloop invariant sn <= (a*(i+32));\nloop invariant sn >= (a*(i+33));\nloop invariant sn <= (a*(i+34));\nloop invariant sn >= (a*(i+35));\nloop invariant sn <= (a*(i+36));\nloop invariant sn >= (a*(i+37));\nloop invariant sn <= (a*(i+38));\nloop invariant sn >= (a*(i+39));\nloop invariant sn <= (a*(i+40));\nloop invariant sn >= (a*(i+41));\nloop invariant sn <= (a*(i+42));\nloop invariant sn >= (a*(i+43));\nloop invariant sn <= (a*(i+44));\nloop invariant sn >= (a*(i+45));\nloop invariant sn <= (a*(i+46));\nloop invariant sn >= (a*(i+47));\nloop invariant sn <= (a*(i+48));\nloop invariant sn >= (a*(i+49));\nloop invariant sn <= (a*(i+50));\nloop invariant sn >= (a*(i+51));\nloop invariant sn <= (a*(i+52));\nloop invariant sn >= (a*(i+53));\nloop invariant sn <= (a*(i+54));\nloop invariant sn >= (a*(i+55));\nloop invariant sn <= (a*(i+56));\nloop invariant sn >= (a*(i+57));\nloop invariant sn <= (a*(i+58));\nloop invariant sn >= (a*(i+59));\nloop invariant sn <= (a*(i+60));\nloop invariant sn >= (a*(i+61));\nloop invariant sn <= (a*(i+62));\nloop invariant sn >= (a*(i+63));\nloop invariant sn <= (a*(i+64));\nloop invariant sn >= (a*(i+65));\nloop invariant sn <= (a*(i+66));\nloop invariant sn >= (a*(i+67));\nloop invariant sn <= (a*(i+68));\nloop invariant sn >= (a*(i+69));\nloop invariant sn <= (a*(i+70));\nloop invariant sn >= (a*(i+71));\nloop invariant sn <= (a*(i+72));\nloop invariant sn >= (a*(i+73));\nloop invariant sn <= (a*(i+74));\nloop invariant sn >= (a*(i+75));\nloop invariant sn <= (a*(i+76));\nloop invariant sn >= (a*(i+77));\nloop invariant sn <= (a*(i+78));\nloop invariant sn >= (a*(i+79));\nloop invariant sn <= (a*(i+80));\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= n+1; loop invariant sn == (i-1)*a; loop invariant a == 1; loop invariant n == sn / a; loop invariant i <= n+1 ==> n*a == sn; loop invariant i <= n+1 ==> sn == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn >= 0;\nloop invariant sn == i * a;\nloop invariant sn == (1 + (i - 1) * i / 2) * a;\nloop invariant sn == (i * (i + 1) / 2) * a;\nloop invariant sn == (i * (i + 1) / 2) * a;\nloop invariant sn == (i * (i + 1) / 2) * a;\nloop invariant sn == (i * (i + 1) / 2) * a;\nloop invariant sn == (i * (i + 1) / 2) * a;\nloop invariant sn == (i * (i + 1) / 2) * a;\nloop invariant sn == (i * (i + 1) / 2) * a;\nloop invariant sn == (i * (i + 1) / 2) * a;\nloop invariant sn == (i * (i + 1) / 2) * a;\nloop invariant sn == (i * (i + 1) / 2) * a;\nloop invariant sn == (i * (i + 1) / 2) * a;\nloop invariant sn == (i * (i + 1) / 2) * a;\nloop invariant sn == (i * (i + 1) / 2) * a;\nloop invariant sn == (i * (i + 1) / 2) * a;\nloop invariant sn == (i * (i + 1) / 2) * a;\nloop invariant sn == (i * (i + 1) / 2) * a;\nloop invariant sn == (i * (i + 1) / 2) * a;\nloop invariant sn == (i * (i + 1) / 2) * a;\nloop invariant sn == (i * (i + 1) / 2) * a;\nloop invariant sn == (i * (i + 1) / 2) * a;\nloop invariant sn == (i * (i + 1) / 2) * a;\nloop invariant sn == (i * (i + 1) / 2) * a;\nloop invariant sn == (i * (i + 1) / 2) * a;\nloop invariant sn == (i * (i + 1) / 2) * a;\nloop invariant sn == (i * (i + 1) / 2) * a;\nloop invariant sn == (i * (i + 1) / 2) * a;\nloop invariant sn == (i * (i + 1) / 2) * a;\nloop invariant sn == (i * (i + 1) / 2) * a;\nloop invariant sn == (i * (i + 1) / 2) * a;\nloop invariant sn == (i * (i + 1) / 2) * a;\nloop invariant sn == (i * (i + 1) / 2) * a;\nloop invariant sn == (i * (i + 1) / 2) * a;\nloop invariant sn == (i * (i + 1) / 2) * a;\nloop invariant sn == (i * (i + 1) / 2) * a;\nloop invariant sn == (i * (i + 1) / 2) * a;\nloop invariant sn == (i * (i + 1) / 2) * a;\nloop invariant sn == (i * (i + 1) / 2) * a;\nloop invariant sn == (i * (i + 1) / 2) * a;\nloop invariant sn == (i * (i + 1) / 2) * a;\nloop invariant sn == (i * (i + 1) / 2) * a;\nloop invariant sn == (i * (i + 1) / 2) * a;\nloop invariant sn == (i * (i + 1) / 2) * a;\nloop invariant sn == (i * (i + 1) / 2) * a;\nloop invariant sn == (i * (i + 1) / 2) * a;\nloop invariant sn == (i * (i + 1) / 2) * a;\nloop invariant sn == (i * (i + 1) / 2) * a;\nloop invariant sn == (i * (i + 1) / 2) * a;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn >= 0;\nloop invariant sn == (a * i);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n+1;\nloop invariant sn >= 0;\nloop invariant sn <= n*a;\nloop invariant sn == 0;\nloop invariant sn == (a*i + sn - a);\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant sn >= 0;\nloop invariant sn <= n * a;\nloop invariant a >= 0;\nloop invariant sn == i * a;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= sn <= n*a;\nloop invariant sn == i*a;\nloop invariant a == 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn >= a * i;\nloop invariant sn <= a * n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= sn <= n * a;\nloop invariant sn == i * a;\nloop invariant sn == n * a || n == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn >= 0;\nloop invariant (i == n) ==> (sn == n*a);\nloop invariant (i == 0) ==> (sn == 0);\nloop invariant (i <= n) ==> (sn <= n*a);\nloop invariant (i >= 0) ==> (sn >= 0);\n*/\n```",
            "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant i1: 1 <= i <= n;\nloop invariant i2: sn == i * a;\nloop invariant i1: 1 <= i <= n;\nloop invariant i2: sn == i * a;\n*/\n```",
            "```\n/*@\nloop invariant i <= n;\nloop invariant sn == i * a;\nloop invariant i <= n;\nloop invariant sn == i * a;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn == a * i;\nloop invariant sn >= 0;\nloop invariant sn <= a * n;\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant a == 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\nint main() { \n  int i, n=unknown_int(), sn=0;\n  /*@\n\n\nloop invariant i3: sn >= 0;\n\nloop invariant i5: i >= 1;\n\nloop invariant i7: a == 1;\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= sn <= n * a;\nloop invariant sn == i * a;\nloop invariant sn == 0 ==> i == 0;\nloop invariant sn == n * a ==> i == n;\nloop invariant sn == i * a ==> sn == n * a ==> i == n;\nloop invariant sn == i * a ==> sn == 0 ==> i == 0;\nloop invariant sn == i * a ==> sn == n * a ==> i == n;\nloop invariant sn == i * a ==> sn == 0 ==> i == 0;\nloop invariant sn == i * a ==> sn == n * a ==> i == n;\nloop invariant sn == i * a ==> sn == 0 ==> i == 0;\nloop invariant sn == i * a ==> sn == n * a ==> i == n;\nloop invariant sn == i * a ==> sn == 0 ==> i == 0;\nloop invariant sn == i * a ==> sn == n * a ==> i == n;\nloop invariant sn == i * a ==> sn == 0 ==> i == 0;\nloop invariant sn == i * a ==> sn == n * a ==> i == n;\nloop invariant sn == i * a ==> sn == 0 ==> i == 0;\nloop invariant sn == i * a ==> sn == n * a ==> i == n;\nloop invariant sn == i * a ==> sn == 0 ==> i == 0;\nloop invariant sn == i * a ==> sn == n * a ==> i == n;\nloop invariant sn == i * a ==> sn == 0 ==> i == 0;\nloop invariant sn == i * a ==> sn == n * a ==> i == n;\nloop invariant sn == i * a ==> sn == 0 ==> i == 0;\nloop invariant sn == i * a ==> sn == n * a ==> i == n;\nloop invariant sn == i * a ==> sn == 0 ==> i == 0;\nloop invariant sn == i * a ==> sn == n * a ==> i == n;\nloop invariant sn == i * a ==> sn == 0 ==> i == 0;\nloop invariant sn == i * a ==> sn == n * a ==> i == n;\nloop invariant sn == i * a ==> sn == 0 ==> i == 0;\nloop invariant sn == i * a ==> sn == n * a ==> i == n;\nloop invariant sn == i * a ==> sn == 0 ==> i == 0;\nloop invariant sn == i * a ==> sn == n * a ==> i == n;\nloop invariant sn == i * a ==> sn == 0 ==> i == 0;\nloop invariant sn == i * a ==> sn == n * a ==> i == n;\nloop invariant sn == i * a ==> sn == 0 ==> i == 0;\nloop invariant sn == i * a ==> sn == n * a ==> i == n;\nloop invariant sn == i * a ==> sn == 0 ==> i == 0;\nloop invariant sn == i * a ==> sn == n * a ==> i == n;\nloop invariant sn == i * a ==> sn == 0 ==> i == 0;\nloop invariant sn == i * a ==> sn == n * a ==> i == n;\nloop invariant sn == i * a ==> sn == 0 ==> i == 0;\nloop invariant sn == i * a ==> sn == n * a ==> i == n;\nloop invariant sn == i * a ==> sn == 0 ==> i == 0;\nloop invariant sn == i * a ==> sn == n * a ==> i == n;\nloop invariant sn == i * a ==> sn == 0 ==> i == 0;\nloop invariant sn == i * a ==> sn == n * a ==> i == n;\nloop invariant sn == i * a ==> sn == 0 ==> i == 0;\nloop invariant sn == i * a ==> sn == n * a ==> i == n;\nloop invariant sn == i * a ==> sn == 0 ==> i == 0;\nloop invariant sn == i * a ==> sn == n * a ==> i == n;\nloop invariant sn == i * a ==> sn == 0 ==> i == 0;\nloop invariant sn == i * a ==> sn == n * a ==> i == n;\nloop invariant sn == i * a ==> sn == 0 ==> i == 0;\nloop invariant sn == i * a ==> sn == n * a ==> i == n;\nloop invariant sn == i * a ==> sn == 0 ==> i == 0;\nloop invariant sn == i * a ==> sn == n * a ==> i == n;\nloop invariant sn == i * a ==> sn == 0 ==> i == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\nint main() { \n  int i, n=unknown_int(), sn=0;\n  /*@\n\n\n\n\n\nloop invariant i6: sn == i * a ==> sn == n * a ==> i == n;\nloop invariant i7: sn == i * a ==> sn == 0 ==> i == 0;\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= n;\nloop invariant 0 <= i <= n;\nloop invariant 0 <= sn <= n;\nloop invariant sn == (i-1)*a;\nloop invariant i < n ==> sn == (i-1)*a;\nloop invariant i == n ==> sn == n*a;\nloop invariant i == 0 ==> sn == 0;\nloop invariant i > 0 ==> sn != 0;\nloop invariant i == 0 ==> sn == 0;\nloop invariant i == n ==> sn == n*a;\nloop invariant i < n ==> sn != n*a;\nloop invariant sn == (i-1)*a ==> sn <= n*a;\nloop invariant sn == (i-1)*a ==> sn >= 0;\nloop invariant sn == (i-1)*a ==> sn == (i-1)*a;\nloop invariant sn == (i-1)*a ==> sn <= n*a;\nloop invariant sn == (i-1)*a ==> sn >= 0;\nloop invariant sn == (i-1)*a ==> sn == (i-1)*a;\nloop invariant sn == (i-1)*a ==> sn <= n*a;\nloop invariant sn == (i-1)*a ==> sn >= 0;\nloop invariant sn == (i-1)*a ==> sn == (i-1)*a;\nloop invariant sn == (i-1)*a ==> sn <= n*a;\nloop invariant sn == (i-1)*a ==> sn >= 0;\nloop invariant sn == (i-1)*a ==> sn == (i-1)*a;\nloop invariant sn == (i-1)*a ==> sn <= n*a;\nloop invariant sn == (i-1)*a ==> sn >= 0;\nloop invariant sn == (i-1)*a ==> sn == (i-1)*a;\nloop invariant sn == (i-1)*a ==> sn <= n*a;\nloop invariant sn == (i-1)*a ==> sn >= 0;\nloop invariant sn == (i-1)*a ==> sn == (i-1)*a;\nloop invariant sn == (i-1)*a ==> sn <= n*a;\nloop invariant sn == (i-1)*a ==> sn >= 0;\nloop invariant sn == (i-1)*a ==> sn == (i-1)*a;\nloop invariant sn == (i-1)*a ==> sn <= n*a;\nloop invariant sn == (i-1)*a ==> sn >= 0;\nloop invariant sn == (i-1)*a ==> sn == (i-1)*a;\nloop invariant sn == (i-1)*a ==> sn <= n*a;\nloop invariant sn == (i-1)*a ==> sn >= 0;\nloop invariant sn == (i-1)*a ==> sn == (i-1)*a;\nloop invariant sn == (i-1)*a ==> sn <= n*a;\nloop invariant sn == (i-1)*a ==> sn >= 0;\nloop invariant sn == (i-1)*a ==> sn == (i-1)*a;\nloop invariant sn == (i-1)*a ==> sn <= n*a;\nloop invariant sn == (i-1)*a ==> sn >= 0;\nloop invariant sn == (i-1)*a ==> sn == (i-1)*a;\nloop invariant sn == (i-1)*a ==> sn <= n*a;\nloop invariant sn == (i-1)*a ==> sn >= 0;\nloop invariant sn == (i-1)*a ==> sn == (i-1)*a;\nloop invariant sn == (i-1)*a ==> sn <= n*a;\nloop invariant sn == (i-1)*a ==> sn >= 0;\nloop invariant sn == (i-1)*a ==> sn == (i-1)*a;\nloop invariant sn == (i-1)*a ==> sn <= n*a;\nloop invariant sn == (i-1)*a ==> sn >= 0;\nloop invariant sn == (i-1)*a ==> sn == (i-1)*a;\nloop invariant sn == (i-1)*a ==> sn <= n*a;\nloop invariant sn == (i-1)*a ==> sn >= 0;\nloop invariant sn == (i-1)*a ==> sn == (i-1)*a;\nloop invariant sn == (i-1)*a ==> sn <= n*a;\nloop invariant sn == (i-1)*a ==> sn >= 0;\nloop invariant sn == (i-1)*a ==> sn == (i-1)*a;\nloop invariant sn == (i-1)*a ==> sn <= n*a;\nloop invariant sn == (i-1)*a ==> sn >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\nint main() { \n  int i, n=unknown_int(), sn=0;\n  /*@\n\n\n\nloop invariant i4: sn == (i-1)*a;\nloop invariant i5: i < n ==> sn == (i-1)*a;\n\nloop invariant i7: i == 0 ==> sn == 0;\n\nloop invariant i9: i < n ==> sn != n*a;\n\nloop invariant i11: sn == (i-1)*a ==> sn >= 0;\nloop invariant i12: sn == (i-1)*a ==> sn == (i-1)*a;\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 41,
                "annotations": "```\n/*@\nloop invariant 0 <= sn <= (a*n);\nloop invariant sn >= 0;\nloop invariant sn <= (a*n);\nloop invariant sn >= (a*(i-1));\nloop invariant sn <= (a*i);\nloop invariant sn >= (a*(i+1));\nloop invariant sn <= (a*(i+2));\nloop invariant sn >= (a*(i+3));\nloop invariant sn <= (a*(i+4));\nloop invariant sn >= (a*(i+5));\nloop invariant sn <= (a*(i+6));\nloop invariant sn >= (a*(i+7));\nloop invariant sn <= (a*(i+8));\nloop invariant sn >= (a*(i+9));\nloop invariant sn <= (a*(i+10));\nloop invariant sn >= (a*(i+11));\nloop invariant sn <= (a*(i+12));\nloop invariant sn >= (a*(i+13));\nloop invariant sn <= (a*(i+14));\nloop invariant sn >= (a*(i+15));\nloop invariant sn <= (a*(i+16));\nloop invariant sn >= (a*(i+17));\nloop invariant sn <= (a*(i+18));\nloop invariant sn >= (a*(i+19));\nloop invariant sn <= (a*(i+20));\nloop invariant sn >= (a*(i+21));\nloop invariant sn <= (a*(i+22));\nloop invariant sn >= (a*(i+23));\nloop invariant sn <= (a*(i+24));\nloop invariant sn >= (a*(i+25));\nloop invariant sn <= (a*(i+26));\nloop invariant sn >= (a*(i+27));\nloop invariant sn <= (a*(i+28));\nloop invariant sn >= (a*(i+29));\nloop invariant sn <= (a*(i+30));\nloop invariant sn >= (a*(i+31));\nloop invariant sn <= (a*(i+32));\nloop invariant sn >= (a*(i+33));\nloop invariant sn <= (a*(i+34));\nloop invariant sn >= (a*(i+35));\nloop invariant sn <= (a*(i+36));\nloop invariant sn >= (a*(i+37));\nloop invariant sn <= (a*(i+38));\nloop invariant sn >= (a*(i+39));\nloop invariant sn <= (a*(i+40));\nloop invariant sn >= (a*(i+41));\nloop invariant sn <= (a*(i+42));\nloop invariant sn >= (a*(i+43));\nloop invariant sn <= (a*(i+44));\nloop invariant sn >= (a*(i+45));\nloop invariant sn <= (a*(i+46));\nloop invariant sn >= (a*(i+47));\nloop invariant sn <= (a*(i+48));\nloop invariant sn >= (a*(i+49));\nloop invariant sn <= (a*(i+50));\nloop invariant sn >= (a*(i+51));\nloop invariant sn <= (a*(i+52));\nloop invariant sn >= (a*(i+53));\nloop invariant sn <= (a*(i+54));\nloop invariant sn >= (a*(i+55));\nloop invariant sn <= (a*(i+56));\nloop invariant sn >= (a*(i+57));\nloop invariant sn <= (a*(i+58));\nloop invariant sn >= (a*(i+59));\nloop invariant sn <= (a*(i+60));\nloop invariant sn >= (a*(i+61));\nloop invariant sn <= (a*(i+62));\nloop invariant sn >= (a*(i+63));\nloop invariant sn <= (a*(i+64));\nloop invariant sn >= (a*(i+65));\nloop invariant sn <= (a*(i+66));\nloop invariant sn >= (a*(i+67));\nloop invariant sn <= (a*(i+68));\nloop invariant sn >= (a*(i+69));\nloop invariant sn <= (a*(i+70));\nloop invariant sn >= (a*(i+71));\nloop invariant sn <= (a*(i+72));\nloop invariant sn >= (a*(i+73));\nloop invariant sn <= (a*(i+74));\nloop invariant sn >= (a*(i+75));\nloop invariant sn <= (a*(i+76));\nloop invariant sn >= (a*(i+77));\nloop invariant sn <= (a*(i+78));\nloop invariant sn >= (a*(i+79));\nloop invariant sn <= (a*(i+80));\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\nint main() { \n  int i, n=unknown_int(), sn=0;\n  /*@\n\nloop invariant i2: sn >= 0;\n\nloop invariant i4: sn >= (a*(i-1));\nloop invariant i5: sn <= (a*i);\n\nloop invariant i7: sn <= (a*(i+2));\n\nloop invariant i9: sn <= (a*(i+4));\n\nloop invariant i11: sn <= (a*(i+6));\n\nloop invariant i13: sn <= (a*(i+8));\n\nloop invariant i15: sn <= (a*(i+10));\n\nloop invariant i17: sn <= (a*(i+12));\n\nloop invariant i19: sn <= (a*(i+14));\n\nloop invariant i21: sn <= (a*(i+16));\n\nloop invariant i23: sn <= (a*(i+18));\n\nloop invariant i25: sn <= (a*(i+20));\n\nloop invariant i27: sn <= (a*(i+22));\n\nloop invariant i29: sn <= (a*(i+24));\n\nloop invariant i31: sn <= (a*(i+26));\n\nloop invariant i33: sn <= (a*(i+28));\n\nloop invariant i35: sn <= (a*(i+30));\n\nloop invariant i37: sn <= (a*(i+32));\n\nloop invariant i39: sn <= (a*(i+34));\n\nloop invariant i41: sn <= (a*(i+36));\n\nloop invariant i43: sn <= (a*(i+38));\n\nloop invariant i45: sn <= (a*(i+40));\n\nloop invariant i47: sn <= (a*(i+42));\n\nloop invariant i49: sn <= (a*(i+44));\n\nloop invariant i51: sn <= (a*(i+46));\n\nloop invariant i53: sn <= (a*(i+48));\n\nloop invariant i55: sn <= (a*(i+50));\n\nloop invariant i57: sn <= (a*(i+52));\n\nloop invariant i59: sn <= (a*(i+54));\n\nloop invariant i61: sn <= (a*(i+56));\n\nloop invariant i63: sn <= (a*(i+58));\n\nloop invariant i65: sn <= (a*(i+60));\n\nloop invariant i67: sn <= (a*(i+62));\n\nloop invariant i69: sn <= (a*(i+64));\n\nloop invariant i71: sn <= (a*(i+66));\n\nloop invariant i73: sn <= (a*(i+68));\n\nloop invariant i75: sn <= (a*(i+70));\n\nloop invariant i77: sn <= (a*(i+72));\n\nloop invariant i79: sn <= (a*(i+74));\n\nloop invariant i81: sn <= (a*(i+76));\n\nloop invariant i83: sn <= (a*(i+78));\n\nloop invariant i85: sn <= (a*(i+80));\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= n+1; loop invariant sn == (i-1)*a; loop invariant a == 1; loop invariant n == sn / a; loop invariant i <= n+1 ==> n*a == sn; loop invariant i <= n+1 ==> sn == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\nint main() { \n  int i, n=unknown_int(), sn=0;\n  /*@\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn >= 0;\nloop invariant sn == i * a;\nloop invariant sn == (1 + (i - 1) * i / 2) * a;\nloop invariant sn == (i * (i + 1) / 2) * a;\nloop invariant sn == (i * (i + 1) / 2) * a;\nloop invariant sn == (i * (i + 1) / 2) * a;\nloop invariant sn == (i * (i + 1) / 2) * a;\nloop invariant sn == (i * (i + 1) / 2) * a;\nloop invariant sn == (i * (i + 1) / 2) * a;\nloop invariant sn == (i * (i + 1) / 2) * a;\nloop invariant sn == (i * (i + 1) / 2) * a;\nloop invariant sn == (i * (i + 1) / 2) * a;\nloop invariant sn == (i * (i + 1) / 2) * a;\nloop invariant sn == (i * (i + 1) / 2) * a;\nloop invariant sn == (i * (i + 1) / 2) * a;\nloop invariant sn == (i * (i + 1) / 2) * a;\nloop invariant sn == (i * (i + 1) / 2) * a;\nloop invariant sn == (i * (i + 1) / 2) * a;\nloop invariant sn == (i * (i + 1) / 2) * a;\nloop invariant sn == (i * (i + 1) / 2) * a;\nloop invariant sn == (i * (i + 1) / 2) * a;\nloop invariant sn == (i * (i + 1) / 2) * a;\nloop invariant sn == (i * (i + 1) / 2) * a;\nloop invariant sn == (i * (i + 1) / 2) * a;\nloop invariant sn == (i * (i + 1) / 2) * a;\nloop invariant sn == (i * (i + 1) / 2) * a;\nloop invariant sn == (i * (i + 1) / 2) * a;\nloop invariant sn == (i * (i + 1) / 2) * a;\nloop invariant sn == (i * (i + 1) / 2) * a;\nloop invariant sn == (i * (i + 1) / 2) * a;\nloop invariant sn == (i * (i + 1) / 2) * a;\nloop invariant sn == (i * (i + 1) / 2) * a;\nloop invariant sn == (i * (i + 1) / 2) * a;\nloop invariant sn == (i * (i + 1) / 2) * a;\nloop invariant sn == (i * (i + 1) / 2) * a;\nloop invariant sn == (i * (i + 1) / 2) * a;\nloop invariant sn == (i * (i + 1) / 2) * a;\nloop invariant sn == (i * (i + 1) / 2) * a;\nloop invariant sn == (i * (i + 1) / 2) * a;\nloop invariant sn == (i * (i + 1) / 2) * a;\nloop invariant sn == (i * (i + 1) / 2) * a;\nloop invariant sn == (i * (i + 1) / 2) * a;\nloop invariant sn == (i * (i + 1) / 2) * a;\nloop invariant sn == (i * (i + 1) / 2) * a;\nloop invariant sn == (i * (i + 1) / 2) * a;\nloop invariant sn == (i * (i + 1) / 2) * a;\nloop invariant sn == (i * (i + 1) / 2) * a;\nloop invariant sn == (i * (i + 1) / 2) * a;\nloop invariant sn == (i * (i + 1) / 2) * a;\nloop invariant sn == (i * (i + 1) / 2) * a;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\nint main() { \n  int i, n=unknown_int(), sn=0;\n  /*@\n\nloop invariant i2: sn >= 0;\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn >= 0;\nloop invariant sn == (a * i);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\nint main() { \n  int i, n=unknown_int(), sn=0;\n  /*@\n\nloop invariant i2: sn >= 0;\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n+1;\nloop invariant sn >= 0;\nloop invariant sn <= n*a;\nloop invariant sn == 0;\nloop invariant sn == (a*i + sn - a);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\nint main() { \n  int i, n=unknown_int(), sn=0;\n  /*@\n\nloop invariant i2: sn >= 0;\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant sn >= 0;\nloop invariant sn <= n * a;\nloop invariant a >= 0;\nloop invariant sn == i * a;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\nint main() { \n  int i, n=unknown_int(), sn=0;\n  /*@\n\nloop invariant i2: sn >= 0;\n\nloop invariant i4: a >= 0;\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= sn <= n*a;\nloop invariant sn == i*a;\nloop invariant a == 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\nint main() { \n  int i, n=unknown_int(), sn=0;\n  /*@\n\n\n\nloop invariant i4: a == 1;\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn >= a * i;\nloop invariant sn <= a * n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\nint main() { \n  int i, n=unknown_int(), sn=0;\n  /*@\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= sn <= n * a;\nloop invariant sn == i * a;\nloop invariant sn == n * a || n == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\nint main() { \n  int i, n=unknown_int(), sn=0;\n  /*@\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn >= 0;\nloop invariant (i == n) ==> (sn == n*a);\nloop invariant (i == 0) ==> (sn == 0);\nloop invariant (i <= n) ==> (sn <= n*a);\nloop invariant (i >= 0) ==> (sn >= 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\nint main() { \n  int i, n=unknown_int(), sn=0;\n  /*@\n\nloop invariant i2: sn >= 0;\n\n\n\nloop invariant i6: (i >= 0) ==> (sn >= 0);\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant i1: 1 <= i <= n;\nloop invariant i2: sn == i * a;\nloop invariant i1: 1 <= i <= n;\nloop invariant i2: sn == i * a;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\nint main() { \n  int i, n=unknown_int(), sn=0;\n  /*@\n\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant i <= n;\nloop invariant sn == i * a;\nloop invariant i <= n;\nloop invariant sn == i * a;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\nint main() { \n  int i, n=unknown_int(), sn=0;\n  /*@\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 140: unbound logic variable i1. Ignoring loop annotation",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\nint main() { \n  int i, n=unknown_int(), sn=0;\n  /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: sn == a * i;\nloop invariant i3: sn >= 0;\nloop invariant i4: sn <= a * n;\nloop invariant i5: i >= 1;\nloop invariant i6: i <= n;\nloop invariant i7: a == 1;\nloop invariant i8: 0 <= sn <= n * a;\nloop invariant i9: sn == i * a;\nloop invariant i10: sn == 0 ==> i == 0;\nloop invariant i11: sn == n * a ==> i == n;\nloop invariant i12: sn == i * a ==> sn == n * a ==> i == n;\nloop invariant i13: sn == i * a ==> sn == 0 ==> i == 0;\nloop invariant i14: 0 <= n;\nloop invariant i15: 0 <= sn <= n;\nloop invariant i16: sn == (i-1)*a;\nloop invariant i17: i < n ==> sn == (i-1)*a;\nloop invariant i18: i == n ==> sn == n*a;\nloop invariant i19: i == 0 ==> sn == 0;\nloop invariant i20: i > 0 ==> sn != 0;\nloop invariant i21: i < n ==> sn != n*a;\nloop invariant i22: sn == (i-1)*a ==> sn <= n*a;\nloop invariant i23: sn == (i-1)*a ==> sn >= 0;\nloop invariant i24: sn == (i-1)*a ==> sn == (i-1)*a;\nloop invariant i25: 0 <= sn <= (a*n);\nloop invariant i26: sn <= (a*n);\nloop invariant i27: sn >= (a*(i-1));\nloop invariant i28: sn <= (a*i);\nloop invariant i29: sn >= (a*(i+1));\nloop invariant i30: sn <= (a*(i+2));\nloop invariant i31: sn >= (a*(i+3));\nloop invariant i32: sn <= (a*(i+4));\nloop invariant i33: sn >= (a*(i+5));\nloop invariant i34: sn <= (a*(i+6));\nloop invariant i35: sn >= (a*(i+7));\nloop invariant i36: sn <= (a*(i+8));\nloop invariant i37: sn >= (a*(i+9));\nloop invariant i38: sn <= (a*(i+10));\nloop invariant i39: sn >= (a*(i+11));\nloop invariant i40: sn <= (a*(i+12));\nloop invariant i41: sn >= (a*(i+13));\nloop invariant i42: sn <= (a*(i+14));\nloop invariant i43: sn >= (a*(i+15));\nloop invariant i44: sn <= (a*(i+16));\nloop invariant i45: sn >= (a*(i+17));\nloop invariant i46: sn <= (a*(i+18));\nloop invariant i47: sn >= (a*(i+19));\nloop invariant i48: sn <= (a*(i+20));\nloop invariant i49: sn >= (a*(i+21));\nloop invariant i50: sn <= (a*(i+22));\nloop invariant i51: sn >= (a*(i+23));\nloop invariant i52: sn <= (a*(i+24));\nloop invariant i53: sn >= (a*(i+25));\nloop invariant i54: sn <= (a*(i+26));\nloop invariant i55: sn >= (a*(i+27));\nloop invariant i56: sn <= (a*(i+28));\nloop invariant i57: sn >= (a*(i+29));\nloop invariant i58: sn <= (a*(i+30));\nloop invariant i59: sn >= (a*(i+31));\nloop invariant i60: sn <= (a*(i+32));\nloop invariant i61: sn >= (a*(i+33));\nloop invariant i62: sn <= (a*(i+34));\nloop invariant i63: sn >= (a*(i+35));\nloop invariant i64: sn <= (a*(i+36));\nloop invariant i65: sn >= (a*(i+37));\nloop invariant i66: sn <= (a*(i+38));\nloop invariant i67: sn >= (a*(i+39));\nloop invariant i68: sn <= (a*(i+40));\nloop invariant i69: sn >= (a*(i+41));\nloop invariant i70: sn <= (a*(i+42));\nloop invariant i71: sn >= (a*(i+43));\nloop invariant i72: sn <= (a*(i+44));\nloop invariant i73: sn >= (a*(i+45));\nloop invariant i74: sn <= (a*(i+46));\nloop invariant i75: sn >= (a*(i+47));\nloop invariant i76: sn <= (a*(i+48));\nloop invariant i77: sn >= (a*(i+49));\nloop invariant i78: sn <= (a*(i+50));\nloop invariant i79: sn >= (a*(i+51));\nloop invariant i80: sn <= (a*(i+52));\nloop invariant i81: sn >= (a*(i+53));\nloop invariant i82: sn <= (a*(i+54));\nloop invariant i83: sn >= (a*(i+55));\nloop invariant i84: sn <= (a*(i+56));\nloop invariant i85: sn >= (a*(i+57));\nloop invariant i86: sn <= (a*(i+58));\nloop invariant i87: sn >= (a*(i+59));\nloop invariant i88: sn <= (a*(i+60));\nloop invariant i89: sn >= (a*(i+61));\nloop invariant i90: sn <= (a*(i+62));\nloop invariant i91: sn >= (a*(i+63));\nloop invariant i92: sn <= (a*(i+64));\nloop invariant i93: sn >= (a*(i+65));\nloop invariant i94: sn <= (a*(i+66));\nloop invariant i95: sn >= (a*(i+67));\nloop invariant i96: sn <= (a*(i+68));\nloop invariant i97: sn >= (a*(i+69));\nloop invariant i98: sn <= (a*(i+70));\nloop invariant i99: sn >= (a*(i+71));\nloop invariant i100: sn <= (a*(i+72));\nloop invariant i101: sn >= (a*(i+73));\nloop invariant i102: sn <= (a*(i+74));\nloop invariant i103: sn >= (a*(i+75));\nloop invariant i104: sn <= (a*(i+76));\nloop invariant i105: sn >= (a*(i+77));\nloop invariant i106: sn <= (a*(i+78));\nloop invariant i107: sn >= (a*(i+79));\nloop invariant i108: sn <= (a*(i+80));\nloop invariant i109: 1 <= i <= n+1; loop invariant sn == (i-1)*a; loop invariant a == 1; loop invariant n == sn / a; loop invariant i <= n+1 ==> n*a == sn; loop invariant i <= n+1 ==> sn == 0;\nloop invariant i110: sn == (1 + (i - 1) * i / 2) * a;\nloop invariant i111: sn == (i * (i + 1) / 2) * a;\nloop invariant i112: sn == (a * i);\nloop invariant i113: 0 <= i <= n+1;\nloop invariant i114: sn <= n*a;\nloop invariant i115: sn == 0;\nloop invariant i116: sn == (a*i + sn - a);\nloop invariant i117: 1 <= i <= n;\nloop invariant i118: sn <= n * a;\nloop invariant i119: a >= 0;\nloop invariant i120: 0 <= sn <= n*a;\nloop invariant i121: sn == i*a;\nloop invariant i122: sn >= a * i;\nloop invariant i123: sn == n * a || n == 0;\nloop invariant i124: (i == n) ==> (sn == n*a);\nloop invariant i125: (i == 0) ==> (sn == 0);\nloop invariant i126: (i <= n) ==> (sn <= n*a);\nloop invariant i127: (i >= 0) ==> (sn >= 0);\nloop invariant i128: i1;\nloop invariant i129: i2;\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
        "combined_annotation_num_solver_calls": 56,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\nint main() { \n  int i, n=unknown_int(), sn=0;\n  /*@\n\n\nloop invariant i3: sn >= 0;\n\nloop invariant i5: i >= 1;\n\nloop invariant i7: a == 1;\n\n\n\n\nloop invariant i12: sn == i * a ==> sn == n * a ==> i == n;\nloop invariant i13: sn == i * a ==> sn == 0 ==> i == 0;\n\n\nloop invariant i16: sn == (i-1)*a;\nloop invariant i17: i < n ==> sn == (i-1)*a;\n\nloop invariant i19: i == 0 ==> sn == 0;\n\nloop invariant i21: i < n ==> sn != n*a;\n\nloop invariant i23: sn == (i-1)*a ==> sn >= 0;\nloop invariant i24: sn == (i-1)*a ==> sn == (i-1)*a;\n\n\nloop invariant i27: sn >= (a*(i-1));\nloop invariant i28: sn <= (a*i);\n\nloop invariant i30: sn <= (a*(i+2));\n\nloop invariant i32: sn <= (a*(i+4));\n\nloop invariant i34: sn <= (a*(i+6));\n\nloop invariant i36: sn <= (a*(i+8));\n\nloop invariant i38: sn <= (a*(i+10));\n\nloop invariant i40: sn <= (a*(i+12));\n\nloop invariant i42: sn <= (a*(i+14));\n\nloop invariant i44: sn <= (a*(i+16));\n\nloop invariant i46: sn <= (a*(i+18));\n\nloop invariant i48: sn <= (a*(i+20));\n\nloop invariant i50: sn <= (a*(i+22));\n\nloop invariant i52: sn <= (a*(i+24));\n\nloop invariant i54: sn <= (a*(i+26));\n\nloop invariant i56: sn <= (a*(i+28));\n\nloop invariant i58: sn <= (a*(i+30));\n\nloop invariant i60: sn <= (a*(i+32));\n\nloop invariant i62: sn <= (a*(i+34));\n\nloop invariant i64: sn <= (a*(i+36));\n\nloop invariant i66: sn <= (a*(i+38));\n\nloop invariant i68: sn <= (a*(i+40));\n\nloop invariant i70: sn <= (a*(i+42));\n\nloop invariant i72: sn <= (a*(i+44));\n\nloop invariant i74: sn <= (a*(i+46));\n\nloop invariant i76: sn <= (a*(i+48));\n\nloop invariant i78: sn <= (a*(i+50));\n\nloop invariant i80: sn <= (a*(i+52));\n\nloop invariant i82: sn <= (a*(i+54));\n\nloop invariant i84: sn <= (a*(i+56));\n\nloop invariant i86: sn <= (a*(i+58));\n\nloop invariant i88: sn <= (a*(i+60));\n\nloop invariant i90: sn <= (a*(i+62));\n\nloop invariant i92: sn <= (a*(i+64));\n\nloop invariant i94: sn <= (a*(i+66));\n\nloop invariant i96: sn <= (a*(i+68));\n\nloop invariant i98: sn <= (a*(i+70));\n\nloop invariant i100: sn <= (a*(i+72));\n\nloop invariant i102: sn <= (a*(i+74));\n\nloop invariant i104: sn <= (a*(i+76));\n\nloop invariant i106: sn <= (a*(i+78));\n\nloop invariant i108: sn <= (a*(i+80));\n\n\n\n\n\n\n\n\n\n\nloop invariant i119: a >= 0;\n\n\n\n\n\nloop invariant i125: (i == 0) ==> (sn == 0);\nloop invariant i126: (i <= n) ==> (sn <= n*a);\nloop invariant i127: (i >= 0) ==> (sn >= 0);\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/split.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c"
        ],
        "skipped": [],
        "total": 87,
        "success_count": 74,
        "failure_count": 13,
        "success_rate": 0.8505747126436781
    }
}