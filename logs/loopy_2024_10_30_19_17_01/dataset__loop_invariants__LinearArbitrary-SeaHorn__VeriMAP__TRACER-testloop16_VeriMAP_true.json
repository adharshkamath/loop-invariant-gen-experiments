{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(int N)\n{\n  int i, x;\n\n  x = 1;\n  i = 0;\n\n  while (i<N) {\n    if (x==1) {\n      x=2;\n    } else {\n      x=1;\n    }\n    i++;\n  }\n\n  {;\n//@ assert(!( x>2 ));\n}\n\nreturn;\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= i <= N;\nloop invariant 1 <= x <= 2;\nloop invariant !(x > 2);\n*/\n```",
            "```\n/*@\nloop invariant i >= 0;\nloop invariant i <= N;\nloop invariant x == (i % 2) + 1;\n*/\n```",
            "```\n/*@\nloop invariant i >= 0;\nloop invariant i < N;\nloop invariant (x == 1) ==> (0 <= i <= N/2);\nloop invariant (x == 1) ==> (0 <= i <= N/2);\nloop invariant (x == 2) ==> (N/2 < i < N);\nloop invariant (x == 2) ==> (N/2 < i < N);\nloop invariant (x == 1) ==> (i%2 == 0);\nloop invariant (x == 2) ==> (i%2 == 1);\nloop invariant (x == 1) ==> (i%2 == 0);\nloop invariant (x == 2) ==> (i%2 == 1);\nloop invariant (x == 1) ==> (i%2 == 0);\nloop invariant (x == 2) ==> (i%2 == 1);\nloop invariant (x == 1) ==> (i%2 == 0);\nloop invariant (x == 2) ==> (i%2 == 1);\nloop invariant (x == 1) ==> (i%2 == 0);\nloop invariant (x == 2) ==> (i%2 == 1);\nloop invariant (x == 1) ==> (i%2 == 0);\nloop invariant (x == 2) ==> (i%2 == 1);\nloop invariant (x == 1) ==> (i%2 == 0);\nloop invariant (x == 2) ==> (i%2 == 1);\nloop invariant (x == 1) ==> (i%2 == 0);\nloop invariant (x == 2) ==> (i%2 == 1);\nloop invariant (x == 1) ==> (i%2 == 0);\nloop invariant (x == 2) ==> (i%2 == 1);\nloop invariant (x == 1) ==> (i%2 == 0);\nloop invariant (x == 2) ==> (i%2 == 1);\nloop invariant (x == 1) ==> (i%2 == 0);\nloop invariant (x == 2) ==> (i%2 == 1);\nloop invariant (x == 1) ==> (i%2 == 0);\nloop invariant (x == 2) ==> (i%2 == 1);\nloop invariant (x == 1) ==> (i%2 == 0);\nloop invariant (x == 2) ==> (i%2 == 1);\nloop invariant (x == 1) ==> (i%2 == 0);\nloop invariant (x == 2) ==> (i%2 == 1);\nloop invariant (x == 1) ==> (i%2 == 0);\nloop invariant (x == 2) ==> (i%2 == 1);\nloop invariant (x == 1) ==> (i%2 == 0);\nloop invariant (x == 2) ==> (i%2 == 1);\nloop invariant (x == 1) ==> (i%2 == 0);\nloop invariant (x == 2) ==> (i%2 == 1);\nloop invariant (x == 1) ==> (i%2 == 0);\nloop invariant (x == 2) ==> (i%2 == 1);\nloop invariant (x == 1) ==> (i%2 == 0);\nloop invariant (x == 2) ==> (i%2 == 1);\nloop invariant (x == 1) ==> (i%2 == 0);\nloop invariant (x == 2) ==> (i%2 == 1);\nloop invariant (x == 1) ==> (i%2 == 0);\nloop invariant (x == 2) ==> (i%2 == 1);\nloop invariant (x == 1) ==> (i%2 == 0);\nloop invariant (x == 2) ==> (i%2 == 1);\nloop invariant (x == 1) ==> (i%2 == 0);\nloop invariant (x == 2) ==> (i%2 == 1);\nloop invariant (x == 1) ==> (i%2 == 0);\nloop invariant (x == 2) ==> (i%2 == 1);\nloop invariant (x == 1) ==> (i%2 == 0);\nloop invariant (x == 2) ==> (i%2 == 1);\nloop invariant (x == 1) ==> (i%2 == 0);\nloop invariant (x == 2) ==> (i%2 == 1);\nloop invariant (x == 1) ==> (i%2 == 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= N;\nloop invariant x == 1 || x == 2;\nloop invariant (i == N ==> x == 1);\nloop invariant (i < N ==> x == (i % 2 + 1));\n*/\n```",
            "```\n/*@\nloop invariant i >= 0;\nloop invariant i <= N;\nloop invariant x == 1 || x == 2;\nloop invariant x == 1 ==> (i % 2 == 0);\nloop invariant x == 2 ==> (i % 2 == 1);\nloop invariant !(x > 2);\n*/\n```",
            "```\n/*@\nloop invariant i >= 0;\nloop invariant i <= N;\nloop invariant x == 1 || x == 2;\nloop invariant i == N ==> x == 1;\nloop invariant i == 0 ==> x == 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= N;\nloop invariant 1 <= x <= 2;\nloop invariant (x==1 ==> i%2==0);\nloop invariant (x==2 ==> i%2==1);\n*/\n```",
            "```\n/*@\nloop invariant i >= 0;\nloop invariant i <= N;\nloop invariant x == (i % 2) + 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= N;\nloop invariant x == (N % 2);\nloop invariant x >= 1;\nloop invariant x <= 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= N;\nloop invariant x == (i%2 + 1);\nloop invariant !(x>2);\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= N;\nloop invariant (x == 1) || (x == 2);\nloop invariant (x == 1) ==> (i % 2 == 0);\nloop invariant (x == 2) ==> (i % 2 == 1);\nloop invariant (x == 1) ==> (i <= N);\nloop invariant (x == 2) ==> (i < N);\nloop invariant (x == 1) ==> (i >= 0);\nloop invariant (x == 2) ==> (i > 0);\nloop invariant (x == 1) ==> (i % 2 == 0);\nloop invariant (x == 1) ==> (i % 2 == 0);\nloop invariant (x == 2) ==> (i % 2 == 1);\nloop invariant (x == 2) ==> (i % 2 == 1);\nloop invariant (x == 1) ==> (i <= N);\nloop invariant (x == 1) ==> (i <= N);\nloop invariant (x == 2) ==> (i < N);\nloop invariant (x == 2) ==> (i < N);\nloop invariant (x == 1) ==> (i >= 0);\nloop invariant (x == 1) ==> (i >= 0);\nloop invariant (x == 2) ==> (i > 0);\nloop invariant (x == 2) ==> (i > 0);\nloop invariant (x == 1) ==> (i % 2 == 0);\nloop invariant (x == 1) ==> (i % 2 == 0);\nloop invariant (x == 2) ==> (i % 2 == 1);\nloop invariant (x == 2) ==> (i % 2 == 1);\nloop invariant (x == 1) ==> (i <= N);\nloop invariant (x == 1) ==> (i <= N);\nloop invariant (x == 2) ==> (i < N);\nloop invariant (x == 2) ==> (i < N);\nloop invariant (x == 1) ==> (i >= 0);\nloop invariant (x == 1) ==> (i >= 0);\nloop invariant (x == 2) ==> (i > 0);\nloop invariant (x == 2) ==> (i > 0);\nloop invariant (x == 1) ==> (i % 2 == 0);\nloop invariant (x == 1) ==> (i % 2 == 0);\nloop invariant (x == 2) ==> (i % 2 == 1);\nloop invariant (x == 2) ==> (i % 2 == 1);\nloop invariant (x == 1) ==> (i <= N);\nloop invariant (x == 1) ==> (i <= N);\nloop invariant (x == 2) ==> (i < N);\nloop invariant (x == 2) ==> (i < N);\nloop invariant (x == 1) ==> (i >= 0);\nloop invariant (x == 1) ==> (i >= 0);\nloop invariant (x == 2) ==> (i > 0);\nloop invariant (x == 2) ==> (i > 0);\nloop invariant (x == 1) ==> (i % 2 == 0);\nloop invariant (x == 1) ==> (i % 2 == 0);\nloop invariant (x == 2) ==> (i % 2 == 1);\nloop invariant (x == 2) ==> (i % 2 == 1);\nloop invariant (x == 1) ==> (i <= N);\nloop invariant (x == 1) ==> (i <= N);\nloop invariant (x == 2) ==> (i < N);\nloop invariant (x == 2) ==> (i < N);\nloop invariant (x == 1) ==> (i >= 0);\nloop invariant (x == 1) ==> (i >= 0);\nloop invariant (x == 2) ==> (i > 0);\nloop invariant (x == 2) ==> (i > 0);\nloop invariant (x == 1) ==> (i % 2 == 0);\nloop invariant (x == 1) ==> (i % 2 == 0);\nloop invariant (x == 2) ==> (i % 2 == 1);\nloop invariant (x == 2) ==> (i % 2 == 1);\nloop invariant (x == 1) ==> (i <= N);\nloop invariant (x == 1) ==> (i <= N);\nloop invariant (x == 2) ==> (i < N);\nloop invariant (x == 2) ==> (i < N);\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= 2;\nloop invariant 0 <= i <= N;\nloop invariant i <= N;\nloop invariant 0 <= i;\nloop invariant x == 2 ==> i % 2 == 1;\nloop invariant x == 1 ==> i % 2 == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= N;\nloop invariant 1 <= x <= 2;\nloop invariant x == ((i + 1) % 2) + 1;\nloop invariant x == 2 || x == 1;\nloop invariant x == (i % 2) + 1;\nloop invariant x == (i % 2) + 1;\nloop invariant i == N - 1 || x == 2;\nloop invariant i == N - 1 || x == 1;\nloop invariant i == N - 1 || x == 2;\nloop invariant i == N - 1 || x == 1;\nloop invariant i == N - 1 || x == 2;\nloop invariant i == N - 1 || x == 1;\nloop invariant i == N - 1 || x == 2;\nloop invariant i == N - 1 || x == 1;\nloop invariant i == N - 1 || x == 2;\nloop invariant i == N - 1 || x == 1;\nloop invariant i == N - 1 || x == 2;\nloop invariant i == N - 1 || x == 1;\nloop invariant i == N - 1 || x == 2;\nloop invariant i == N - 1 || x == 1;\nloop invariant i == N - 1 || x == 2;\nloop invariant i == N - 1 || x == 1;\nloop invariant i == N - 1 || x == 2;\nloop invariant i == N - 1 || x == 1;\nloop invariant i == N - 1 || x == 2;\nloop invariant i == N - 1 || x == 1;\nloop invariant i == N - 1 || x == 2;\nloop invariant i == N - 1 || x == 1;\nloop invariant i == N - 1 || x == 2;\nloop invariant i == N - 1 || x == 1;\nloop invariant i == N - 1 || x == 2;\nloop invariant i == N - 1 || x == 1;\nloop invariant i == N - 1 || x == 2;\nloop invariant i == N - 1 || x == 1;\nloop invariant i == N - 1 || x == 2;\nloop invariant i == N - 1 || x == 1;\nloop invariant i == N - 1 || x == 2;\nloop invariant i == N - 1 || x == 1;\nloop invariant i == N - 1 || x == 2;\nloop invariant i == N - 1 || x == 1;\nloop invariant i == N - 1 || x == 2;\nloop invariant i == N - 1 || x == 1;\nloop invariant i == N - 1 || x == 2;\nloop invariant i == N - 1 || x == 1;\nloop invariant i == N - 1 || x == 2;\nloop invariant i == N - 1 || x == 1;\nloop invariant i == N - 1 || x == 2;\nloop invariant i == N - 1 || x == 1;\nloop invariant i == N - 1 || x == 2;\nloop invariant i == N - 1 || x == 1;\nloop invariant i == N - 1 || x == 2;\nloop invariant i == N - 1 || x == 1;\nloop invariant i == N - 1 || x == 2;\nloop invariant i == N - 1 || x == 1;\nloop invariant i == N - 1 || x == 2;\nloop invariant i == N - 1 || x == 1;\nloop invariant i == N - 1 || x == 2;\nloop invariant i == N - 1 || x == 1;\nloop invariant i == N - 1 || x == 2;\nloop invariant i == N - 1 || x == 1;\nloop invariant i == N - 1 || x == 2;\nloop invariant i == N - 1 || x == 1;\nloop invariant i == N - 1 || x == 2;\nloop invariant i == N - 1 || x == 1;\nloop invariant i == N - 1 || x == 2;\nloop invariant i == N - 1 || x == 1;\nloop invariant i == N - 1 || x == 2;\nloop invariant i == N - 1 || x == 1;\nloop invariant i == N - 1 || x == 2;\nloop invariant i == N - 1 || x == 1;\nloop invariant i == N - 1 || x == 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= N;\nloop invariant (i == N ==> x == 1);\nloop invariant (i < N ==> x == 1 || x == 2);\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= N;\nloop invariant 1 <= x <= 2;\nloop invariant !(x > 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(int N)\n{\n  int i, x;\n\n  x = 1;\n  i = 0;\n\n  /*@\n\nloop invariant i2: 1 <= x <= 2;\nloop invariant i3: !(x > 2);\n*/\nwhile (i<N) {\n    if (x==1) {\n      x=2;\n    } else {\n      x=1;\n    }\n    i++;\n  }\n\n  {;\n//@ assert(!( x>2 ));\n}\n\nreturn;\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant i >= 0;\nloop invariant i <= N;\nloop invariant x == (i % 2) + 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(int N)\n{\n  int i, x;\n\n  x = 1;\n  i = 0;\n\n  /*@\nloop invariant i1: i >= 0;\n\nloop invariant i3: x == (i % 2) + 1;\n*/\nwhile (i<N) {\n    if (x==1) {\n      x=2;\n    } else {\n      x=1;\n    }\n    i++;\n  }\n\n  {;\n//@ assert(!( x>2 ));\n}\n\nreturn;\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant i >= 0;\nloop invariant i < N;\nloop invariant (x == 1) ==> (0 <= i <= N/2);\nloop invariant (x == 1) ==> (0 <= i <= N/2);\nloop invariant (x == 2) ==> (N/2 < i < N);\nloop invariant (x == 2) ==> (N/2 < i < N);\nloop invariant (x == 1) ==> (i%2 == 0);\nloop invariant (x == 2) ==> (i%2 == 1);\nloop invariant (x == 1) ==> (i%2 == 0);\nloop invariant (x == 2) ==> (i%2 == 1);\nloop invariant (x == 1) ==> (i%2 == 0);\nloop invariant (x == 2) ==> (i%2 == 1);\nloop invariant (x == 1) ==> (i%2 == 0);\nloop invariant (x == 2) ==> (i%2 == 1);\nloop invariant (x == 1) ==> (i%2 == 0);\nloop invariant (x == 2) ==> (i%2 == 1);\nloop invariant (x == 1) ==> (i%2 == 0);\nloop invariant (x == 2) ==> (i%2 == 1);\nloop invariant (x == 1) ==> (i%2 == 0);\nloop invariant (x == 2) ==> (i%2 == 1);\nloop invariant (x == 1) ==> (i%2 == 0);\nloop invariant (x == 2) ==> (i%2 == 1);\nloop invariant (x == 1) ==> (i%2 == 0);\nloop invariant (x == 2) ==> (i%2 == 1);\nloop invariant (x == 1) ==> (i%2 == 0);\nloop invariant (x == 2) ==> (i%2 == 1);\nloop invariant (x == 1) ==> (i%2 == 0);\nloop invariant (x == 2) ==> (i%2 == 1);\nloop invariant (x == 1) ==> (i%2 == 0);\nloop invariant (x == 2) ==> (i%2 == 1);\nloop invariant (x == 1) ==> (i%2 == 0);\nloop invariant (x == 2) ==> (i%2 == 1);\nloop invariant (x == 1) ==> (i%2 == 0);\nloop invariant (x == 2) ==> (i%2 == 1);\nloop invariant (x == 1) ==> (i%2 == 0);\nloop invariant (x == 2) ==> (i%2 == 1);\nloop invariant (x == 1) ==> (i%2 == 0);\nloop invariant (x == 2) ==> (i%2 == 1);\nloop invariant (x == 1) ==> (i%2 == 0);\nloop invariant (x == 2) ==> (i%2 == 1);\nloop invariant (x == 1) ==> (i%2 == 0);\nloop invariant (x == 2) ==> (i%2 == 1);\nloop invariant (x == 1) ==> (i%2 == 0);\nloop invariant (x == 2) ==> (i%2 == 1);\nloop invariant (x == 1) ==> (i%2 == 0);\nloop invariant (x == 2) ==> (i%2 == 1);\nloop invariant (x == 1) ==> (i%2 == 0);\nloop invariant (x == 2) ==> (i%2 == 1);\nloop invariant (x == 1) ==> (i%2 == 0);\nloop invariant (x == 2) ==> (i%2 == 1);\nloop invariant (x == 1) ==> (i%2 == 0);\nloop invariant (x == 2) ==> (i%2 == 1);\nloop invariant (x == 1) ==> (i%2 == 0);\nloop invariant (x == 2) ==> (i%2 == 1);\nloop invariant (x == 1) ==> (i%2 == 0);\nloop invariant (x == 2) ==> (i%2 == 1);\nloop invariant (x == 1) ==> (i%2 == 0);\nloop invariant (x == 2) ==> (i%2 == 1);\nloop invariant (x == 1) ==> (i%2 == 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(int N)\n{\n  int i, x;\n\n  x = 1;\n  i = 0;\n\n  /*@\nloop invariant i1: i >= 0;\n\n\n\n\n\n*/\nwhile (i<N) {\n    if (x==1) {\n      x=2;\n    } else {\n      x=1;\n    }\n    i++;\n  }\n\n  {;\n//@ assert(!( x>2 ));\n}\n\nreturn;\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= N;\nloop invariant x == 1 || x == 2;\nloop invariant (i == N ==> x == 1);\nloop invariant (i < N ==> x == (i % 2 + 1));\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(int N)\n{\n  int i, x;\n\n  x = 1;\n  i = 0;\n\n  /*@\n\nloop invariant i2: x == 1 || x == 2;\n\n\n*/\nwhile (i<N) {\n    if (x==1) {\n      x=2;\n    } else {\n      x=1;\n    }\n    i++;\n  }\n\n  {;\n//@ assert(!( x>2 ));\n}\n\nreturn;\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant i >= 0;\nloop invariant i <= N;\nloop invariant x == 1 || x == 2;\nloop invariant x == 1 ==> (i % 2 == 0);\nloop invariant x == 2 ==> (i % 2 == 1);\nloop invariant !(x > 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(int N)\n{\n  int i, x;\n\n  x = 1;\n  i = 0;\n\n  /*@\nloop invariant i1: i >= 0;\n\nloop invariant i3: x == 1 || x == 2;\nloop invariant i4: x == 1 ==> (i % 2 == 0);\nloop invariant i5: x == 2 ==> (i % 2 == 1);\nloop invariant i6: !(x > 2);\n*/\nwhile (i<N) {\n    if (x==1) {\n      x=2;\n    } else {\n      x=1;\n    }\n    i++;\n  }\n\n  {;\n//@ assert(!( x>2 ));\n}\n\nreturn;\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant i >= 0;\nloop invariant i <= N;\nloop invariant x == 1 || x == 2;\nloop invariant i == N ==> x == 1;\nloop invariant i == 0 ==> x == 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(int N)\n{\n  int i, x;\n\n  x = 1;\n  i = 0;\n\n  /*@\nloop invariant i1: i >= 0;\n\nloop invariant i3: x == 1 || x == 2;\n\nloop invariant i5: i == 0 ==> x == 1;\n*/\nwhile (i<N) {\n    if (x==1) {\n      x=2;\n    } else {\n      x=1;\n    }\n    i++;\n  }\n\n  {;\n//@ assert(!( x>2 ));\n}\n\nreturn;\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= N;\nloop invariant 1 <= x <= 2;\nloop invariant (x==1 ==> i%2==0);\nloop invariant (x==2 ==> i%2==1);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(int N)\n{\n  int i, x;\n\n  x = 1;\n  i = 0;\n\n  /*@\n\nloop invariant i2: 1 <= x <= 2;\n\n\n*/\nwhile (i<N) {\n    if (x==1) {\n      x=2;\n    } else {\n      x=1;\n    }\n    i++;\n  }\n\n  {;\n//@ assert(!( x>2 ));\n}\n\nreturn;\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant i >= 0;\nloop invariant i <= N;\nloop invariant x == (i % 2) + 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(int N)\n{\n  int i, x;\n\n  x = 1;\n  i = 0;\n\n  /*@\nloop invariant i1: i >= 0;\n\nloop invariant i3: x == (i % 2) + 1;\n*/\nwhile (i<N) {\n    if (x==1) {\n      x=2;\n    } else {\n      x=1;\n    }\n    i++;\n  }\n\n  {;\n//@ assert(!( x>2 ));\n}\n\nreturn;\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= N;\nloop invariant x == (N % 2);\nloop invariant x >= 1;\nloop invariant x <= 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(int N)\n{\n  int i, x;\n\n  x = 1;\n  i = 0;\n\n  /*@\n\n\nloop invariant i3: x >= 1;\nloop invariant i4: x <= 2;\n*/\nwhile (i<N) {\n    if (x==1) {\n      x=2;\n    } else {\n      x=1;\n    }\n    i++;\n  }\n\n  {;\n//@ assert(!( x>2 ));\n}\n\nreturn;\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= N;\nloop invariant x == (i%2 + 1);\nloop invariant !(x>2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(int N)\n{\n  int i, x;\n\n  x = 1;\n  i = 0;\n\n  /*@\n\n\nloop invariant i3: !(x>2);\n*/\nwhile (i<N) {\n    if (x==1) {\n      x=2;\n    } else {\n      x=1;\n    }\n    i++;\n  }\n\n  {;\n//@ assert(!( x>2 ));\n}\n\nreturn;\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(int N)\n{\n  int i, x;\n\n  x = 1;\n  i = 0;\n\n  /*@\n\n*/\nwhile (i<N) {\n    if (x==1) {\n      x=2;\n    } else {\n      x=1;\n    }\n    i++;\n  }\n\n  {;\n//@ assert(!( x>2 ));\n}\n\nreturn;\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= N;\nloop invariant (x == 1) || (x == 2);\nloop invariant (x == 1) ==> (i % 2 == 0);\nloop invariant (x == 2) ==> (i % 2 == 1);\nloop invariant (x == 1) ==> (i <= N);\nloop invariant (x == 2) ==> (i < N);\nloop invariant (x == 1) ==> (i >= 0);\nloop invariant (x == 2) ==> (i > 0);\nloop invariant (x == 1) ==> (i % 2 == 0);\nloop invariant (x == 1) ==> (i % 2 == 0);\nloop invariant (x == 2) ==> (i % 2 == 1);\nloop invariant (x == 2) ==> (i % 2 == 1);\nloop invariant (x == 1) ==> (i <= N);\nloop invariant (x == 1) ==> (i <= N);\nloop invariant (x == 2) ==> (i < N);\nloop invariant (x == 2) ==> (i < N);\nloop invariant (x == 1) ==> (i >= 0);\nloop invariant (x == 1) ==> (i >= 0);\nloop invariant (x == 2) ==> (i > 0);\nloop invariant (x == 2) ==> (i > 0);\nloop invariant (x == 1) ==> (i % 2 == 0);\nloop invariant (x == 1) ==> (i % 2 == 0);\nloop invariant (x == 2) ==> (i % 2 == 1);\nloop invariant (x == 2) ==> (i % 2 == 1);\nloop invariant (x == 1) ==> (i <= N);\nloop invariant (x == 1) ==> (i <= N);\nloop invariant (x == 2) ==> (i < N);\nloop invariant (x == 2) ==> (i < N);\nloop invariant (x == 1) ==> (i >= 0);\nloop invariant (x == 1) ==> (i >= 0);\nloop invariant (x == 2) ==> (i > 0);\nloop invariant (x == 2) ==> (i > 0);\nloop invariant (x == 1) ==> (i % 2 == 0);\nloop invariant (x == 1) ==> (i % 2 == 0);\nloop invariant (x == 2) ==> (i % 2 == 1);\nloop invariant (x == 2) ==> (i % 2 == 1);\nloop invariant (x == 1) ==> (i <= N);\nloop invariant (x == 1) ==> (i <= N);\nloop invariant (x == 2) ==> (i < N);\nloop invariant (x == 2) ==> (i < N);\nloop invariant (x == 1) ==> (i >= 0);\nloop invariant (x == 1) ==> (i >= 0);\nloop invariant (x == 2) ==> (i > 0);\nloop invariant (x == 2) ==> (i > 0);\nloop invariant (x == 1) ==> (i % 2 == 0);\nloop invariant (x == 1) ==> (i % 2 == 0);\nloop invariant (x == 2) ==> (i % 2 == 1);\nloop invariant (x == 2) ==> (i % 2 == 1);\nloop invariant (x == 1) ==> (i <= N);\nloop invariant (x == 1) ==> (i <= N);\nloop invariant (x == 2) ==> (i < N);\nloop invariant (x == 2) ==> (i < N);\nloop invariant (x == 1) ==> (i >= 0);\nloop invariant (x == 1) ==> (i >= 0);\nloop invariant (x == 2) ==> (i > 0);\nloop invariant (x == 2) ==> (i > 0);\nloop invariant (x == 1) ==> (i % 2 == 0);\nloop invariant (x == 1) ==> (i % 2 == 0);\nloop invariant (x == 2) ==> (i % 2 == 1);\nloop invariant (x == 2) ==> (i % 2 == 1);\nloop invariant (x == 1) ==> (i <= N);\nloop invariant (x == 1) ==> (i <= N);\nloop invariant (x == 2) ==> (i < N);\nloop invariant (x == 2) ==> (i < N);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(int N)\n{\n  int i, x;\n\n  x = 1;\n  i = 0;\n\n  /*@\n\nloop invariant i2: (x == 1) || (x == 2);\nloop invariant i3: (x == 1) ==> (i % 2 == 0);\nloop invariant i4: (x == 2) ==> (i % 2 == 1);\n\n\nloop invariant i7: (x == 1) ==> (i >= 0);\nloop invariant i8: (x == 2) ==> (i > 0);\n*/\nwhile (i<N) {\n    if (x==1) {\n      x=2;\n    } else {\n      x=1;\n    }\n    i++;\n  }\n\n  {;\n//@ assert(!( x>2 ));\n}\n\nreturn;\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= 2;\nloop invariant 0 <= i <= N;\nloop invariant i <= N;\nloop invariant 0 <= i;\nloop invariant x == 2 ==> i % 2 == 1;\nloop invariant x == 1 ==> i % 2 == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(int N)\n{\n  int i, x;\n\n  x = 1;\n  i = 0;\n\n  /*@\nloop invariant i1: 1 <= x <= 2;\n\n\nloop invariant i4: 0 <= i;\nloop invariant i5: x == 2 ==> i % 2 == 1;\nloop invariant i6: x == 1 ==> i % 2 == 0;\n*/\nwhile (i<N) {\n    if (x==1) {\n      x=2;\n    } else {\n      x=1;\n    }\n    i++;\n  }\n\n  {;\n//@ assert(!( x>2 ));\n}\n\nreturn;\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= N;\nloop invariant 1 <= x <= 2;\nloop invariant x == ((i + 1) % 2) + 1;\nloop invariant x == 2 || x == 1;\nloop invariant x == (i % 2) + 1;\nloop invariant x == (i % 2) + 1;\nloop invariant i == N - 1 || x == 2;\nloop invariant i == N - 1 || x == 1;\nloop invariant i == N - 1 || x == 2;\nloop invariant i == N - 1 || x == 1;\nloop invariant i == N - 1 || x == 2;\nloop invariant i == N - 1 || x == 1;\nloop invariant i == N - 1 || x == 2;\nloop invariant i == N - 1 || x == 1;\nloop invariant i == N - 1 || x == 2;\nloop invariant i == N - 1 || x == 1;\nloop invariant i == N - 1 || x == 2;\nloop invariant i == N - 1 || x == 1;\nloop invariant i == N - 1 || x == 2;\nloop invariant i == N - 1 || x == 1;\nloop invariant i == N - 1 || x == 2;\nloop invariant i == N - 1 || x == 1;\nloop invariant i == N - 1 || x == 2;\nloop invariant i == N - 1 || x == 1;\nloop invariant i == N - 1 || x == 2;\nloop invariant i == N - 1 || x == 1;\nloop invariant i == N - 1 || x == 2;\nloop invariant i == N - 1 || x == 1;\nloop invariant i == N - 1 || x == 2;\nloop invariant i == N - 1 || x == 1;\nloop invariant i == N - 1 || x == 2;\nloop invariant i == N - 1 || x == 1;\nloop invariant i == N - 1 || x == 2;\nloop invariant i == N - 1 || x == 1;\nloop invariant i == N - 1 || x == 2;\nloop invariant i == N - 1 || x == 1;\nloop invariant i == N - 1 || x == 2;\nloop invariant i == N - 1 || x == 1;\nloop invariant i == N - 1 || x == 2;\nloop invariant i == N - 1 || x == 1;\nloop invariant i == N - 1 || x == 2;\nloop invariant i == N - 1 || x == 1;\nloop invariant i == N - 1 || x == 2;\nloop invariant i == N - 1 || x == 1;\nloop invariant i == N - 1 || x == 2;\nloop invariant i == N - 1 || x == 1;\nloop invariant i == N - 1 || x == 2;\nloop invariant i == N - 1 || x == 1;\nloop invariant i == N - 1 || x == 2;\nloop invariant i == N - 1 || x == 1;\nloop invariant i == N - 1 || x == 2;\nloop invariant i == N - 1 || x == 1;\nloop invariant i == N - 1 || x == 2;\nloop invariant i == N - 1 || x == 1;\nloop invariant i == N - 1 || x == 2;\nloop invariant i == N - 1 || x == 1;\nloop invariant i == N - 1 || x == 2;\nloop invariant i == N - 1 || x == 1;\nloop invariant i == N - 1 || x == 2;\nloop invariant i == N - 1 || x == 1;\nloop invariant i == N - 1 || x == 2;\nloop invariant i == N - 1 || x == 1;\nloop invariant i == N - 1 || x == 2;\nloop invariant i == N - 1 || x == 1;\nloop invariant i == N - 1 || x == 2;\nloop invariant i == N - 1 || x == 1;\nloop invariant i == N - 1 || x == 2;\nloop invariant i == N - 1 || x == 1;\nloop invariant i == N - 1 || x == 2;\nloop invariant i == N - 1 || x == 1;\nloop invariant i == N - 1 || x == 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(int N)\n{\n  int i, x;\n\n  x = 1;\n  i = 0;\n\n  /*@\n\nloop invariant i2: 1 <= x <= 2;\n\nloop invariant i4: x == 2 || x == 1;\n\n\n\n*/\nwhile (i<N) {\n    if (x==1) {\n      x=2;\n    } else {\n      x=1;\n    }\n    i++;\n  }\n\n  {;\n//@ assert(!( x>2 ));\n}\n\nreturn;\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= N;\nloop invariant (i == N ==> x == 1);\nloop invariant (i < N ==> x == 1 || x == 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(int N)\n{\n  int i, x;\n\n  x = 1;\n  i = 0;\n\n  /*@\n\n\nloop invariant i3: (i < N ==> x == 1 || x == 2);\n*/\nwhile (i<N) {\n    if (x==1) {\n      x=2;\n    } else {\n      x=1;\n    }\n    i++;\n  }\n\n  {;\n//@ assert(!( x>2 ));\n}\n\nreturn;\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "loop invariant 0 <= i <= N is preserved but not established.\nloop invariant 1 <= x <= 2 is partially proven to be inductive.\nloop invariant !(x > 2) is partially proven to be inductive.\nloop invariant i >= 0 is partially proven to be inductive.\nloop invariant i <= N is partially proven to be inductive.\nloop invariant x == (i % 2) + 1 is partially proven to be inductive.\nloop invariant i < N is preserved but not established.\nloop invariant (x == 1) ==> (0 <= i <= N/2) is partially proven to be inductive.\nloop invariant (x == 2) ==> (N/2 < i < N) is partially proven to be inductive.\nloop invariant (x == 1) ==> (i%2 == 0) is partially proven to be inductive.\nloop invariant (x == 2) ==> (i%2 == 1) is partially proven to be inductive.\nloop invariant x == 1 || x == 2 is partially proven to be inductive.\nloop invariant (i == N ==> x == 1) is partially proven to be inductive.\nloop invariant (i < N ==> x == (i % 2 + 1)) is partially proven to be inductive.\nloop invariant x == 1 ==> (i % 2 == 0) is partially proven to be inductive.\nloop invariant x == 2 ==> (i % 2 == 1) is partially proven to be inductive.\nloop invariant i == N ==> x == 1 is partially proven to be inductive.\nloop invariant i == 0 ==> x == 1 is partially proven to be inductive.\nloop invariant (x==1 ==> i%2==0) is partially proven to be inductive.\nloop invariant (x==2 ==> i%2==1) is partially proven to be inductive.\nloop invariant x == (N % 2) is preserved but not established.\nloop invariant x >= 1 is partially proven to be inductive.\nloop invariant x <= 2 is partially proven to be inductive.\nloop invariant x == (i%2 + 1) is partially proven to be inductive.\nloop invariant !(x>2) is partially proven to be inductive.\nloop invariant (x == 1) || (x == 2) is partially proven to be inductive.\nloop invariant (x == 1) ==> (i % 2 == 0) is partially proven to be inductive.\nloop invariant (x == 2) ==> (i % 2 == 1) is partially proven to be inductive.\nloop invariant (x == 1) ==> (i <= N) is partially proven to be inductive.\nloop invariant (x == 2) ==> (i < N) is partially proven to be inductive.\nloop invariant (x == 1) ==> (i >= 0) is partially proven to be inductive.\nloop invariant (x == 2) ==> (i > 0) is partially proven to be inductive.\nloop invariant 0 <= i is partially proven to be inductive.\nloop invariant x == 2 ==> i % 2 == 1 is partially proven to be inductive.\nloop invariant x == 1 ==> i % 2 == 0 is partially proven to be inductive.\nloop invariant x == ((i + 1) % 2) + 1 is preserved but not established.\nloop invariant x == 2 || x == 1 is partially proven to be inductive.\nloop invariant i == N - 1 || x == 2 is partially proven to be inductive.\nloop invariant i == N - 1 || x == 1 is partially proven to be inductive.\nloop invariant (i < N ==> x == 1 || x == 2) is partially proven to be inductive.\nAssertion !(x > 2): Partially proven",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(int N)\n{\n  int i, x;\n\n  x = 1;\n  i = 0;\n\n  /*@\nloop invariant i1: 0 <= i <= N;\nloop invariant i2: 1 <= x <= 2;\nloop invariant i3: !(x > 2);\nloop invariant i4: i >= 0;\nloop invariant i5: i <= N;\nloop invariant i6: x == (i % 2) + 1;\nloop invariant i7: i < N;\nloop invariant i8: (x == 1) ==> (0 <= i <= N/2);\nloop invariant i9: (x == 2) ==> (N/2 < i < N);\nloop invariant i10: (x == 1) ==> (i%2 == 0);\nloop invariant i11: (x == 2) ==> (i%2 == 1);\nloop invariant i12: x == 1 || x == 2;\nloop invariant i13: (i == N ==> x == 1);\nloop invariant i14: (i < N ==> x == (i % 2 + 1));\nloop invariant i15: x == 1 ==> (i % 2 == 0);\nloop invariant i16: x == 2 ==> (i % 2 == 1);\nloop invariant i17: i == N ==> x == 1;\nloop invariant i18: i == 0 ==> x == 1;\nloop invariant i19: (x==1 ==> i%2==0);\nloop invariant i20: (x==2 ==> i%2==1);\nloop invariant i21: x == (N % 2);\nloop invariant i22: x >= 1;\nloop invariant i23: x <= 2;\nloop invariant i24: x == (i%2 + 1);\nloop invariant i25: !(x>2);\nloop invariant i26: (x == 1) || (x == 2);\nloop invariant i27: (x == 1) ==> (i % 2 == 0);\nloop invariant i28: (x == 2) ==> (i % 2 == 1);\nloop invariant i29: (x == 1) ==> (i <= N);\nloop invariant i30: (x == 2) ==> (i < N);\nloop invariant i31: (x == 1) ==> (i >= 0);\nloop invariant i32: (x == 2) ==> (i > 0);\nloop invariant i33: 0 <= i;\nloop invariant i34: x == 2 ==> i % 2 == 1;\nloop invariant i35: x == 1 ==> i % 2 == 0;\nloop invariant i36: x == ((i + 1) % 2) + 1;\nloop invariant i37: x == 2 || x == 1;\nloop invariant i38: i == N - 1 || x == 2;\nloop invariant i39: i == N - 1 || x == 1;\nloop invariant i40: (i < N ==> x == 1 || x == 2);\n*/\nwhile (i<N) {\n    if (x==1) {\n      x=2;\n    } else {\n      x=1;\n    }\n    i++;\n  }\n\n  {;\n//@ assert(!( x>2 ));\n}\n\nreturn;\n\n}",
        "combined_annotation_num_solver_calls": 6,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(int N)\n{\n  int i, x;\n\n  x = 1;\n  i = 0;\n\n  /*@\n\nloop invariant i2: 1 <= x <= 2;\nloop invariant i3: !(x > 2);\nloop invariant i4: i >= 0;\n\nloop invariant i6: x == (i % 2) + 1;\n\n\n\nloop invariant i10: (x == 1) ==> (i%2 == 0);\nloop invariant i11: (x == 2) ==> (i%2 == 1);\nloop invariant i12: x == 1 || x == 2;\n\nloop invariant i14: (i < N ==> x == (i % 2 + 1));\nloop invariant i15: x == 1 ==> (i % 2 == 0);\nloop invariant i16: x == 2 ==> (i % 2 == 1);\n\nloop invariant i18: i == 0 ==> x == 1;\nloop invariant i19: (x==1 ==> i%2==0);\nloop invariant i20: (x==2 ==> i%2==1);\n\nloop invariant i22: x >= 1;\nloop invariant i23: x <= 2;\nloop invariant i24: x == (i%2 + 1);\nloop invariant i25: !(x>2);\nloop invariant i26: (x == 1) || (x == 2);\nloop invariant i27: (x == 1) ==> (i % 2 == 0);\nloop invariant i28: (x == 2) ==> (i % 2 == 1);\n\n\nloop invariant i31: (x == 1) ==> (i >= 0);\nloop invariant i32: (x == 2) ==> (i > 0);\nloop invariant i33: 0 <= i;\nloop invariant i34: x == 2 ==> i % 2 == 1;\nloop invariant i35: x == 1 ==> i % 2 == 0;\n\nloop invariant i37: x == 2 || x == 1;\n\n\nloop invariant i40: (i < N ==> x == 1 || x == 2);\n*/\nwhile (i<N) {\n    if (x==1) {\n      x=2;\n    } else {\n      x=1;\n    }\n    i++;\n  }\n\n  {;\n//@ assert(!( x>2 ));\n}\n\nreturn;\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c"
        ],
        "skipped": [],
        "total": 17,
        "success_count": 16,
        "failure_count": 1,
        "success_rate": 0.9411764705882353
    }
}