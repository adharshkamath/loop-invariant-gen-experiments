{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(){\nint y = unknown_uint();\nint x=0;\n\n    assume(y>=0);\n\n\twhile ( x < 10000) {\n\t\ty = y + 1;\n\t\tx = x + 1;\n\t}\n\n\tif( y + x < 10000)\t\t\n\t\tgoto ERROR;\n\n\treturn 0;\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\treturn -1;\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 10000;\nloop invariant y >= 0;\nloop invariant x == y + x;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 10000;\nloop invariant y >= x;\nloop invariant y + x >= 10000;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 10000;\nloop invariant x >= 0;\nloop invariant x <= 10000;\nloop invariant x <= y;\nloop invariant x >= y - 10000;\nloop invariant x < y;\nloop invariant x >= y - 10000;\nloop invariant x < y;\nloop invariant 0 <= y <= 10000;\nloop invariant x >= 0;\nloop invariant x <= 10000;\nloop invariant x <= y;\nloop invariant x >= y - 10000;\nloop invariant x < y;\nloop invariant x >= y - 10000;\nloop invariant x < y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 10000;\nloop invariant y >= 0;\nloop invariant x + y >= 10000;\nloop invariant x + y == 10000 ==> x == 10000 && y == 0;\nloop invariant x + y < 10000 ==> x < 10000 && y < 10000;\nloop invariant x + y >= 10000 ==> x >= 10000 && y >= 0;\nloop invariant x + y < 10000 ==> x < 10000 && y < 10000;\n*/\n```",
            "```\n/*@\nloop invariant y + x <= 10000;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y <= 10000;\nloop invariant x <= 10000;\nloop invariant x <= y - 1;\n*/\n```",
            "```\n/*@\nloop invariant x <= 10000;\nloop invariant y >= 0;\nloop invariant x + y >= 0;\nloop invariant x <= y + 10000;\nloop invariant x + y <= 20000;\nloop invariant x + y >= 10000;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x + y <= 10000;\nloop invariant x <= y;\nloop invariant x + y >= 10000;\nloop invariant x >= 0;\nloop invariant x + y <= 10000;\nloop invariant x <= y;\nloop invariant x + y >= 10000;\nloop invariant x >= 0;\nloop invariant x + y <= 10000;\nloop invariant x <= y;\nloop invariant x + y >= 10000;\nloop invariant x >= 0;\nloop invariant x + y <= 10000;\nloop invariant x <= y;\nloop invariant x + y >= 10000;\nloop invariant x >= 0;\nloop invariant x + y <= 10000;\nloop invariant x <= y;\nloop invariant x + y >= 10000;\nloop invariant x >= 0;\nloop invariant x + y <= 10000;\nloop invariant x <= y;\nloop invariant x + y >= 10000;\nloop invariant x >= 0;\nloop invariant x + y <= 10000;\nloop invariant x <= y;\nloop invariant x + y >= 10000;\nloop invariant x >= 0;\nloop invariant x + y <= 10000;\nloop invariant x <= y;\nloop invariant x + y >= 10000;\nloop invariant x >= 0;\nloop invariant x + y <= 10000;\nloop invariant x <= y;\nloop invariant x + y >= 10000;\nloop invariant x >= 0;\nloop invariant x + y <= 10000;\nloop invariant x <= y;\nloop invariant x + y >= 10000;\nloop invariant x >= 0;\nloop invariant x + y <= 10000;\nloop invariant x <= y;\nloop invariant x + y >= 10000;\nloop invariant x >= 0;\nloop invariant x + y <= 10000;\nloop invariant x <= y;\nloop invariant x + y >= 10000;\nloop invariant x >= 0;\nloop invariant x + y <= 10000;\nloop invariant x <= y;\nloop invariant x + y >= 10000;\nloop invariant x >= 0;\nloop invariant x + y <= 10000;\nloop invariant x <= y;\nloop invariant x + y >= 10000;\nloop invariant x >= 0;\nloop invariant x + y <= 10000;\nloop invariant x <= y;\nloop invariant x + y >= 10000;\nloop invariant x >= 0;\nloop invariant x + y <= 10000;\nloop invariant x <= y;\nloop invariant x + y >= 10000;\nloop invariant x >= 0;\nloop invariant x + y <= 10000;\nloop invariant x <= y;\nloop invariant x + y >= 10000;\nloop invariant x >= 0;\nloop invariant x + y <= 10000;\nloop invariant x <= y;\nloop invariant x + y >= 10000;\nloop invariant x >= 0;\nloop invariant x + y <= 10000;\nloop invariant x <= y;\nloop invariant x + y >= 10000;\nloop invariant x >= 0;\nloop invariant x + y <= 10000;\nloop invariant x <= y;\nloop invariant x + y >= 10000;\nloop invariant x >= 0;\nloop invariant x + y <= 10000;\nloop invariant x <= y;\nloop invariant x + y >= 10000;\nloop invariant x >= 0;\nloop invariant x + y <= 10000;\nloop invariant x <= y;\nloop invariant x + y >= 10000;\nloop invariant x >= 0;\nloop invariant x + y <= 10000;\nloop invariant x <= y;\nloop invariant x + y >= 10000;\nloop invariant x >= 0;\nloop invariant x + y <= 10000;\nloop invariant x <= y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 10000;\nloop invariant x <= y;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= 10000;\nloop invariant 0 <= y <= 10000;\nloop invariant x + y >= 2;\nloop invariant x + y <= 20000;\nloop invariant x + y == 10000;\nloop invariant x + y >= x;\nloop invariant x + y >= y;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20000;\nloop invariant x + y == 10000;\nloop invariant x + y >= x;\nloop invariant x + y >= y;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20000;\nloop invariant x + y == 10000;\nloop invariant x + y >= x;\nloop invariant x + y >= y;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20000;\nloop invariant x + y == 10000;\nloop invariant x + y >= x;\nloop invariant x + y >= y;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20000;\nloop invariant x + y == 10000;\nloop invariant x + y >= x;\nloop invariant x + y >= y;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20000;\nloop invariant x + y == 10000;\nloop invariant x + y >= x;\nloop invariant x + y >= y;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20000;\nloop invariant x + y == 10000;\nloop invariant x + y >= x;\nloop invariant x + y >= y;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20000;\nloop invariant x + y == 10000;\nloop invariant x + y >= x;\nloop invariant x + y >= y;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20000;\nloop invariant x + y == 10000;\nloop invariant x + y >= x;\nloop invariant x + y >= y;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20000;\nloop invariant x + y == 10000;\nloop invariant x + y >= x;\nloop invariant x + y >= y;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20000;\nloop invariant x + y == 10000;\nloop invariant x + y >= x;\nloop invariant x + y >= y;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20000;\nloop invariant x + y == 10000;\nloop invariant x + y >= x;\nloop invariant x + y >= y;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20000;\nloop invariant x + y == 10000;\nloop invariant x + y >= x;\nloop invariant x + y >= y;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20000;\nloop invariant x + y == 10000;\nloop invariant x + y >= x;\nloop invariant x + y >= y;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20000;\nloop invariant x + y == 10000;\nloop invariant x + y >= x;\nloop invariant x + y >= y;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20000;\nloop invariant x + y == 10000;\nloop invariant x + y >= x;\nloop invariant x + y >= y;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20000;\nloop invariant x + y == 10000;\nloop invariant x + y >= x;\nloop invariant x + y >= y;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20000;\nloop invariant x + y == 10000;\nloop invariant x + y >= x;\nloop invariant x + y >= y;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20000;\nloop invariant x + y == 10000;\nloop invariant x + y >= x;\nloop invariant x + y >= y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 10000;\nloop invariant x >= 0;\nloop invariant x + y <= 10000;\nloop invariant x <= y;\nloop invariant x + y >= 10000 ==> y + x < 10000 ==> x < 10000;\nloop invariant x + y >= 10000 ==> y + x < 10000 ==> x >= 0;\nloop invariant x + y >= 10000 ==> y + x < 10000 ==> y - x < 10000;\nloop invariant x + y >= 10000 ==> y + x < 10000 ==> y - x >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y < 10000; loop invariant x + y == 10000;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 10000;\nloop invariant 1 <= y <= 100000;\nloop invariant x + y >= 10000;\nloop invariant x + y <= 20000;\nloop invariant x + y == 20000 ==> x == 10000 && y == 10000;\nloop invariant x + y != 20000 ==> x < 10000 || y > 10000;\n*/\n```",
            "```\n/*@\nloop invariant x <= 10000;\nloop invariant y >=0 && y <= 10000 && y <= x;\nloop invariant (y + x) >= 10000 ==> y + x >= 10000;\n*/\n```",
            "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant 0 <= x <= 10000;\nloop invariant y >= 0;\nloop invariant x == y;\nloop invariant 0 <= x <= 10000;\nloop invariant y >= 0;\nloop invariant x == y;\n*/\n```",
            "```\n/*@\nloop invariant y >= x + 1;\nloop invariant y < 10000;\nloop invariant x >= 0;\nloop invariant x <= 10000;\nloop invariant 0 <= y <= 10000;\nloop invariant x == y - 1;\nloop invariant y == x + 1;\nloop invariant y == x + 1 ==> x <= y;\nloop invariant x <= y ==> x == y - 1;\nloop invariant x <= y ==> y == x + 1;\nloop invariant x <= y ==> x <= y;\nloop invariant x <= y ==> y <= x + 1;\nloop invariant x <= y ==> 0 <= y <= 10000;\nloop invariant x <= y ==> x >= 0;\nloop invariant x <= y ==> x <= 10000;\nloop invariant y >= x + 1 ==> x <= y;\nloop invariant x <= y ==> x <= y;\nloop invariant x <= y ==> y <= x + 1;\nloop invariant x <= y ==> 0 <= y <= 10000;\nloop invariant x <= y ==> x >= 0;\nloop invariant x <= y ==> x <= 10000;\nloop invariant x <= y ==> y == x + 1;\nloop invariant x <= y ==> 0 <= y <= 10000;\nloop invariant x <= y ==> x >= 0;\nloop invariant x <= y ==> x <= 10000;\nloop invariant x <= y ==> x == y - 1;\nloop invariant x <= y ==> 0 <= y <= 10000;\nloop invariant x <= y ==> x >= 0;\nloop invariant x <= y ==> x <= 10000;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(){\nint y = unknown_uint();\nint x=0;\n\n    assume(y>=0);\n\n\t/*@\n\n*/\nwhile ( x < 10000) {\n\t\ty = y + 1;\n\t\tx = x + 1;\n\t}\n\n\tif( y + x < 10000)\t\t\n\t\tgoto ERROR;\n\n\treturn 0;\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 10000;\nloop invariant y >= 0;\nloop invariant x == y + x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(){\nint y = unknown_uint();\nint x=0;\n\n    assume(y>=0);\n\n\t/*@\nloop invariant i1: 0 <= x <= 10000;\nloop invariant i2: y >= 0;\n\n*/\nwhile ( x < 10000) {\n\t\ty = y + 1;\n\t\tx = x + 1;\n\t}\n\n\tif( y + x < 10000)\t\t\n\t\tgoto ERROR;\n\n\treturn 0;\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 10000;\nloop invariant y >= x;\nloop invariant y + x >= 10000;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(){\nint y = unknown_uint();\nint x=0;\n\n    assume(y>=0);\n\n\t/*@\nloop invariant i1: 0 <= x <= 10000;\nloop invariant i2: y >= x;\n\n*/\nwhile ( x < 10000) {\n\t\ty = y + 1;\n\t\tx = x + 1;\n\t}\n\n\tif( y + x < 10000)\t\t\n\t\tgoto ERROR;\n\n\treturn 0;\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 10000;\nloop invariant x >= 0;\nloop invariant x <= 10000;\nloop invariant x <= y;\nloop invariant x >= y - 10000;\nloop invariant x < y;\nloop invariant x >= y - 10000;\nloop invariant x < y;\nloop invariant 0 <= y <= 10000;\nloop invariant x >= 0;\nloop invariant x <= 10000;\nloop invariant x <= y;\nloop invariant x >= y - 10000;\nloop invariant x < y;\nloop invariant x >= y - 10000;\nloop invariant x < y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(){\nint y = unknown_uint();\nint x=0;\n\n    assume(y>=0);\n\n\t/*@\n\nloop invariant i2: x >= 0;\nloop invariant i3: x <= 10000;\nloop invariant i4: x <= y;\n\n\n*/\nwhile ( x < 10000) {\n\t\ty = y + 1;\n\t\tx = x + 1;\n\t}\n\n\tif( y + x < 10000)\t\t\n\t\tgoto ERROR;\n\n\treturn 0;\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 10000;\nloop invariant y >= 0;\nloop invariant x + y >= 10000;\nloop invariant x + y == 10000 ==> x == 10000 && y == 0;\nloop invariant x + y < 10000 ==> x < 10000 && y < 10000;\nloop invariant x + y >= 10000 ==> x >= 10000 && y >= 0;\nloop invariant x + y < 10000 ==> x < 10000 && y < 10000;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(){\nint y = unknown_uint();\nint x=0;\n\n    assume(y>=0);\n\n\t/*@\nloop invariant i1: 0 <= x <= 10000;\nloop invariant i2: y >= 0;\n\n\nloop invariant i5: x + y < 10000 ==> x < 10000 && y < 10000;\n\n*/\nwhile ( x < 10000) {\n\t\ty = y + 1;\n\t\tx = x + 1;\n\t}\n\n\tif( y + x < 10000)\t\t\n\t\tgoto ERROR;\n\n\treturn 0;\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant y + x <= 10000;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y <= 10000;\nloop invariant x <= 10000;\nloop invariant x <= y - 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(){\nint y = unknown_uint();\nint x=0;\n\n    assume(y>=0);\n\n\t/*@\n\nloop invariant i2: x >= 0;\nloop invariant i3: y >= 0;\n\nloop invariant i5: x <= 10000;\n\n*/\nwhile ( x < 10000) {\n\t\ty = y + 1;\n\t\tx = x + 1;\n\t}\n\n\tif( y + x < 10000)\t\t\n\t\tgoto ERROR;\n\n\treturn 0;\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant x <= 10000;\nloop invariant y >= 0;\nloop invariant x + y >= 0;\nloop invariant x <= y + 10000;\nloop invariant x + y <= 20000;\nloop invariant x + y >= 10000;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x + y <= 10000;\nloop invariant x <= y;\nloop invariant x + y >= 10000;\nloop invariant x >= 0;\nloop invariant x + y <= 10000;\nloop invariant x <= y;\nloop invariant x + y >= 10000;\nloop invariant x >= 0;\nloop invariant x + y <= 10000;\nloop invariant x <= y;\nloop invariant x + y >= 10000;\nloop invariant x >= 0;\nloop invariant x + y <= 10000;\nloop invariant x <= y;\nloop invariant x + y >= 10000;\nloop invariant x >= 0;\nloop invariant x + y <= 10000;\nloop invariant x <= y;\nloop invariant x + y >= 10000;\nloop invariant x >= 0;\nloop invariant x + y <= 10000;\nloop invariant x <= y;\nloop invariant x + y >= 10000;\nloop invariant x >= 0;\nloop invariant x + y <= 10000;\nloop invariant x <= y;\nloop invariant x + y >= 10000;\nloop invariant x >= 0;\nloop invariant x + y <= 10000;\nloop invariant x <= y;\nloop invariant x + y >= 10000;\nloop invariant x >= 0;\nloop invariant x + y <= 10000;\nloop invariant x <= y;\nloop invariant x + y >= 10000;\nloop invariant x >= 0;\nloop invariant x + y <= 10000;\nloop invariant x <= y;\nloop invariant x + y >= 10000;\nloop invariant x >= 0;\nloop invariant x + y <= 10000;\nloop invariant x <= y;\nloop invariant x + y >= 10000;\nloop invariant x >= 0;\nloop invariant x + y <= 10000;\nloop invariant x <= y;\nloop invariant x + y >= 10000;\nloop invariant x >= 0;\nloop invariant x + y <= 10000;\nloop invariant x <= y;\nloop invariant x + y >= 10000;\nloop invariant x >= 0;\nloop invariant x + y <= 10000;\nloop invariant x <= y;\nloop invariant x + y >= 10000;\nloop invariant x >= 0;\nloop invariant x + y <= 10000;\nloop invariant x <= y;\nloop invariant x + y >= 10000;\nloop invariant x >= 0;\nloop invariant x + y <= 10000;\nloop invariant x <= y;\nloop invariant x + y >= 10000;\nloop invariant x >= 0;\nloop invariant x + y <= 10000;\nloop invariant x <= y;\nloop invariant x + y >= 10000;\nloop invariant x >= 0;\nloop invariant x + y <= 10000;\nloop invariant x <= y;\nloop invariant x + y >= 10000;\nloop invariant x >= 0;\nloop invariant x + y <= 10000;\nloop invariant x <= y;\nloop invariant x + y >= 10000;\nloop invariant x >= 0;\nloop invariant x + y <= 10000;\nloop invariant x <= y;\nloop invariant x + y >= 10000;\nloop invariant x >= 0;\nloop invariant x + y <= 10000;\nloop invariant x <= y;\nloop invariant x + y >= 10000;\nloop invariant x >= 0;\nloop invariant x + y <= 10000;\nloop invariant x <= y;\nloop invariant x + y >= 10000;\nloop invariant x >= 0;\nloop invariant x + y <= 10000;\nloop invariant x <= y;\nloop invariant x + y >= 10000;\nloop invariant x >= 0;\nloop invariant x + y <= 10000;\nloop invariant x <= y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(){\nint y = unknown_uint();\nint x=0;\n\n    assume(y>=0);\n\n\t/*@\nloop invariant i1: x <= 10000;\nloop invariant i2: y >= 0;\nloop invariant i3: x + y >= 0;\nloop invariant i4: x <= y + 10000;\n\n\nloop invariant i7: x >= 0;\n\nloop invariant i9: x <= y;\n*/\nwhile ( x < 10000) {\n\t\ty = y + 1;\n\t\tx = x + 1;\n\t}\n\n\tif( y + x < 10000)\t\t\n\t\tgoto ERROR;\n\n\treturn 0;\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 10000;\nloop invariant x <= y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(){\nint y = unknown_uint();\nint x=0;\n\n    assume(y>=0);\n\n\t/*@\nloop invariant i1: 0 <= x <= 10000;\nloop invariant i2: x <= y;\n*/\nwhile ( x < 10000) {\n\t\ty = y + 1;\n\t\tx = x + 1;\n\t}\n\n\tif( y + x < 10000)\t\t\n\t\tgoto ERROR;\n\n\treturn 0;\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= 10000;\nloop invariant 0 <= y <= 10000;\nloop invariant x + y >= 2;\nloop invariant x + y <= 20000;\nloop invariant x + y == 10000;\nloop invariant x + y >= x;\nloop invariant x + y >= y;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20000;\nloop invariant x + y == 10000;\nloop invariant x + y >= x;\nloop invariant x + y >= y;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20000;\nloop invariant x + y == 10000;\nloop invariant x + y >= x;\nloop invariant x + y >= y;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20000;\nloop invariant x + y == 10000;\nloop invariant x + y >= x;\nloop invariant x + y >= y;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20000;\nloop invariant x + y == 10000;\nloop invariant x + y >= x;\nloop invariant x + y >= y;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20000;\nloop invariant x + y == 10000;\nloop invariant x + y >= x;\nloop invariant x + y >= y;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20000;\nloop invariant x + y == 10000;\nloop invariant x + y >= x;\nloop invariant x + y >= y;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20000;\nloop invariant x + y == 10000;\nloop invariant x + y >= x;\nloop invariant x + y >= y;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20000;\nloop invariant x + y == 10000;\nloop invariant x + y >= x;\nloop invariant x + y >= y;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20000;\nloop invariant x + y == 10000;\nloop invariant x + y >= x;\nloop invariant x + y >= y;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20000;\nloop invariant x + y == 10000;\nloop invariant x + y >= x;\nloop invariant x + y >= y;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20000;\nloop invariant x + y == 10000;\nloop invariant x + y >= x;\nloop invariant x + y >= y;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20000;\nloop invariant x + y == 10000;\nloop invariant x + y >= x;\nloop invariant x + y >= y;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20000;\nloop invariant x + y == 10000;\nloop invariant x + y >= x;\nloop invariant x + y >= y;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20000;\nloop invariant x + y == 10000;\nloop invariant x + y >= x;\nloop invariant x + y >= y;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20000;\nloop invariant x + y == 10000;\nloop invariant x + y >= x;\nloop invariant x + y >= y;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20000;\nloop invariant x + y == 10000;\nloop invariant x + y >= x;\nloop invariant x + y >= y;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20000;\nloop invariant x + y == 10000;\nloop invariant x + y >= x;\nloop invariant x + y >= y;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20000;\nloop invariant x + y == 10000;\nloop invariant x + y >= x;\nloop invariant x + y >= y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(){\nint y = unknown_uint();\nint x=0;\n\n    assume(y>=0);\n\n\t/*@\n\n\n\n\n\nloop invariant i6: x + y >= x;\nloop invariant i7: x + y >= y;\nloop invariant i8: x + y >= 0;\n*/\nwhile ( x < 10000) {\n\t\ty = y + 1;\n\t\tx = x + 1;\n\t}\n\n\tif( y + x < 10000)\t\t\n\t\tgoto ERROR;\n\n\treturn 0;\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 10000;\nloop invariant x >= 0;\nloop invariant x + y <= 10000;\nloop invariant x <= y;\nloop invariant x + y >= 10000 ==> y + x < 10000 ==> x < 10000;\nloop invariant x + y >= 10000 ==> y + x < 10000 ==> x >= 0;\nloop invariant x + y >= 10000 ==> y + x < 10000 ==> y - x < 10000;\nloop invariant x + y >= 10000 ==> y + x < 10000 ==> y - x >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(){\nint y = unknown_uint();\nint x=0;\n\n    assume(y>=0);\n\n\t/*@\n\nloop invariant i2: x >= 0;\n\nloop invariant i4: x <= y;\nloop invariant i5: x + y >= 10000 ==> y + x < 10000 ==> x < 10000;\nloop invariant i6: x + y >= 10000 ==> y + x < 10000 ==> x >= 0;\nloop invariant i7: x + y >= 10000 ==> y + x < 10000 ==> y - x < 10000;\nloop invariant i8: x + y >= 10000 ==> y + x < 10000 ==> y - x >= 0;\n*/\nwhile ( x < 10000) {\n\t\ty = y + 1;\n\t\tx = x + 1;\n\t}\n\n\tif( y + x < 10000)\t\t\n\t\tgoto ERROR;\n\n\treturn 0;\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= y < 10000; loop invariant x + y == 10000;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(){\nint y = unknown_uint();\nint x=0;\n\n    assume(y>=0);\n\n\t/*@\n\n*/\nwhile ( x < 10000) {\n\t\ty = y + 1;\n\t\tx = x + 1;\n\t}\n\n\tif( y + x < 10000)\t\t\n\t\tgoto ERROR;\n\n\treturn 0;\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 10000;\nloop invariant 1 <= y <= 100000;\nloop invariant x + y >= 10000;\nloop invariant x + y <= 20000;\nloop invariant x + y == 20000 ==> x == 10000 && y == 10000;\nloop invariant x + y != 20000 ==> x < 10000 || y > 10000;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(){\nint y = unknown_uint();\nint x=0;\n\n    assume(y>=0);\n\n\t/*@\nloop invariant i1: 0 <= x <= 10000;\n\n\n\n\n\n*/\nwhile ( x < 10000) {\n\t\ty = y + 1;\n\t\tx = x + 1;\n\t}\n\n\tif( y + x < 10000)\t\t\n\t\tgoto ERROR;\n\n\treturn 0;\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant x <= 10000;\nloop invariant y >=0 && y <= 10000 && y <= x;\nloop invariant (y + x) >= 10000 ==> y + x >= 10000;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(){\nint y = unknown_uint();\nint x=0;\n\n    assume(y>=0);\n\n\t/*@\nloop invariant i1: x <= 10000;\n\nloop invariant i3: (y + x) >= 10000 ==> y + x >= 10000;\n*/\nwhile ( x < 10000) {\n\t\ty = y + 1;\n\t\tx = x + 1;\n\t}\n\n\tif( y + x < 10000)\t\t\n\t\tgoto ERROR;\n\n\treturn 0;\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant 0 <= x <= 10000;\nloop invariant y >= 0;\nloop invariant x == y;\nloop invariant 0 <= x <= 10000;\nloop invariant y >= 0;\nloop invariant x == y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(){\nint y = unknown_uint();\nint x=0;\n\n    assume(y>=0);\n\n\t/*@\n\n\nloop invariant i3: 0 <= x <= 10000;\nloop invariant i4: y >= 0;\n\n*/\nwhile ( x < 10000) {\n\t\ty = y + 1;\n\t\tx = x + 1;\n\t}\n\n\tif( y + x < 10000)\t\t\n\t\tgoto ERROR;\n\n\treturn 0;\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant y >= x + 1;\nloop invariant y < 10000;\nloop invariant x >= 0;\nloop invariant x <= 10000;\nloop invariant 0 <= y <= 10000;\nloop invariant x == y - 1;\nloop invariant y == x + 1;\nloop invariant y == x + 1 ==> x <= y;\nloop invariant x <= y ==> x == y - 1;\nloop invariant x <= y ==> y == x + 1;\nloop invariant x <= y ==> x <= y;\nloop invariant x <= y ==> y <= x + 1;\nloop invariant x <= y ==> 0 <= y <= 10000;\nloop invariant x <= y ==> x >= 0;\nloop invariant x <= y ==> x <= 10000;\nloop invariant y >= x + 1 ==> x <= y;\nloop invariant x <= y ==> x <= y;\nloop invariant x <= y ==> y <= x + 1;\nloop invariant x <= y ==> 0 <= y <= 10000;\nloop invariant x <= y ==> x >= 0;\nloop invariant x <= y ==> x <= 10000;\nloop invariant x <= y ==> y == x + 1;\nloop invariant x <= y ==> 0 <= y <= 10000;\nloop invariant x <= y ==> x >= 0;\nloop invariant x <= y ==> x <= 10000;\nloop invariant x <= y ==> x == y - 1;\nloop invariant x <= y ==> 0 <= y <= 10000;\nloop invariant x <= y ==> x >= 0;\nloop invariant x <= y ==> x <= 10000;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(){\nint y = unknown_uint();\nint x=0;\n\n    assume(y>=0);\n\n\t/*@\n\n\nloop invariant i3: x >= 0;\nloop invariant i4: x <= 10000;\n\n\n\nloop invariant i8: y == x + 1 ==> x <= y;\n\n\nloop invariant i11: x <= y ==> x <= y;\n\n\nloop invariant i14: x <= y ==> x >= 0;\nloop invariant i15: x <= y ==> x <= 10000;\nloop invariant i16: y >= x + 1 ==> x <= y;\n*/\nwhile ( x < 10000) {\n\t\ty = y + 1;\n\t\tx = x + 1;\n\t}\n\n\tif( y + x < 10000)\t\t\n\t\tgoto ERROR;\n\n\treturn 0;\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 56: unbound logic variable i1. Ignoring loop annotation",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(){\nint y = unknown_uint();\nint x=0;\n\n    assume(y>=0);\n\n\t/*@\nloop invariant i1: 0 <= x <= 10000;\nloop invariant i2: y >= 0;\nloop invariant i3: x == y + x;\nloop invariant i4: y >= x;\nloop invariant i5: y + x >= 10000;\nloop invariant i6: 0 <= y <= 10000;\nloop invariant i7: x >= 0;\nloop invariant i8: x <= 10000;\nloop invariant i9: x <= y;\nloop invariant i10: x >= y - 10000;\nloop invariant i11: x < y;\nloop invariant i12: x + y >= 10000;\nloop invariant i13: x + y == 10000 ==> x == 10000 && y == 0;\nloop invariant i14: x + y < 10000 ==> x < 10000 && y < 10000;\nloop invariant i15: x + y >= 10000 ==> x >= 10000 && y >= 0;\nloop invariant i16: y + x <= 10000;\nloop invariant i17: y <= 10000;\nloop invariant i18: x <= y - 1;\nloop invariant i19: x + y >= 0;\nloop invariant i20: x <= y + 10000;\nloop invariant i21: x + y <= 20000;\nloop invariant i22: x + y <= 10000;\nloop invariant i23: 1 <= x <= 10000;\nloop invariant i24: x + y >= 2;\nloop invariant i25: x + y == 10000;\nloop invariant i26: x + y >= x;\nloop invariant i27: x + y >= y;\nloop invariant i28: x + y >= 10000 ==> y + x < 10000 ==> x < 10000;\nloop invariant i29: x + y >= 10000 ==> y + x < 10000 ==> x >= 0;\nloop invariant i30: x + y >= 10000 ==> y + x < 10000 ==> y - x < 10000;\nloop invariant i31: x + y >= 10000 ==> y + x < 10000 ==> y - x >= 0;\nloop invariant i32: 0 <= y < 10000; loop invariant x + y == 10000;\nloop invariant i33: 1 <= y <= 100000;\nloop invariant i34: x + y == 20000 ==> x == 10000 && y == 10000;\nloop invariant i35: x + y != 20000 ==> x < 10000 || y > 10000;\nloop invariant i36: y >=0 && y <= 10000 && y <= x;\nloop invariant i37: (y + x) >= 10000 ==> y + x >= 10000;\nloop invariant i38: i1;\nloop invariant i39: i2;\nloop invariant i40: x == y;\nloop invariant i41: y >= x + 1;\nloop invariant i42: y < 10000;\nloop invariant i43: x == y - 1;\nloop invariant i44: y == x + 1;\nloop invariant i45: y == x + 1 ==> x <= y;\nloop invariant i46: x <= y ==> x == y - 1;\nloop invariant i47: x <= y ==> y == x + 1;\nloop invariant i48: x <= y ==> x <= y;\nloop invariant i49: x <= y ==> y <= x + 1;\nloop invariant i50: x <= y ==> 0 <= y <= 10000;\nloop invariant i51: x <= y ==> x >= 0;\nloop invariant i52: x <= y ==> x <= 10000;\nloop invariant i53: y >= x + 1 ==> x <= y;\n*/\nwhile ( x < 10000) {\n\t\ty = y + 1;\n\t\tx = x + 1;\n\t}\n\n\tif( y + x < 10000)\t\t\n\t\tgoto ERROR;\n\n\treturn 0;\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\treturn -1;\n}",
        "combined_annotation_num_solver_calls": 14,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(){\nint y = unknown_uint();\nint x=0;\n\n    assume(y>=0);\n\n\t/*@\nloop invariant i1: 0 <= x <= 10000;\nloop invariant i2: y >= 0;\n\nloop invariant i4: y >= x;\n\n\nloop invariant i7: x >= 0;\nloop invariant i8: x <= 10000;\nloop invariant i9: x <= y;\n\n\n\n\nloop invariant i14: x + y < 10000 ==> x < 10000 && y < 10000;\n\n\n\n\nloop invariant i19: x + y >= 0;\nloop invariant i20: x <= y + 10000;\n\n\n\n\n\nloop invariant i26: x + y >= x;\nloop invariant i27: x + y >= y;\nloop invariant i28: x + y >= 10000 ==> y + x < 10000 ==> x < 10000;\nloop invariant i29: x + y >= 10000 ==> y + x < 10000 ==> x >= 0;\nloop invariant i30: x + y >= 10000 ==> y + x < 10000 ==> y - x < 10000;\nloop invariant i31: x + y >= 10000 ==> y + x < 10000 ==> y - x >= 0;\n\n\n\nloop invariant i35: x + y != 20000 ==> x < 10000 || y > 10000;\n\nloop invariant i37: (y + x) >= 10000 ==> y + x >= 10000;\n\n\n\n\n\n\n\nloop invariant i45: y == x + 1 ==> x <= y;\n\n\nloop invariant i48: x <= y ==> x <= y;\n\n\nloop invariant i51: x <= y ==> x >= 0;\nloop invariant i52: x <= y ==> x <= 10000;\nloop invariant i53: y >= x + 1 ==> x <= y;\n*/\nwhile ( x < 10000) {\n\t\ty = y + 1;\n\t\tx = x + 1;\n\t}\n\n\tif( y + x < 10000)\t\t\n\t\tgoto ERROR;\n\n\treturn 0;\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\treturn -1;\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c"
        ],
        "skipped": [],
        "total": 6,
        "success_count": 5,
        "failure_count": 1,
        "success_rate": 0.8333333333333334
    }
}