{
    "logs": {
        "file": "../dataset/loop_invariants/accelerating_invariant_generation/invgen/gulwani_cegar1.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint __BLAST_NONDET;\nvoid main() {\n  int x,y;\n\n  assume(0 <= x);  assume(x <= 2);\n  assume(0 <= y);  assume(y <= 2);\n  while( __BLAST_NONDET ) {\n\tx+=2;\n\ty+=2;\n  }\n  if( y >= 0 ) \n    if( y <= 0 ) \n      if( 4 <= x ) \n\t{;\n//@ assert( x < 4 );\n}\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= y <= 2;\nloop invariant x%2 == y%2;\nloop invariant (x >= 0) ==> (x <= 4);\nloop invariant (y >= 0) ==> (y <= 4);\nloop invariant (x >= 0) ==> (x <= 4) ==> (x == y);\nloop invariant (x >= 0) ==> (x <= 4) ==> (x%2 == 0);\nloop invariant (x >= 0) ==> (x <= 4) ==> (y%2 == 0);\nloop invariant (x >= 0) ==> (x <= 4) ==> (x%2 == y%2);\nloop invariant (x >= 0) ==> (x <= 4) ==> (x%2 == y%2) ==> (x == y);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 2;\nloop invariant 0 <= y <= 2;\nloop invariant x <= y;\nloop invariant x <= 4;\nloop invariant (x == 4) ==> (y >= 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 2; loop invariant 0 <= y <= 2; loop invariant x <= y; loop invariant x >= (2 + (y - 2) * (y - 1) / 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 4;\nloop invariant (y >= 0 ==> 4 <= x);\n*/\n```",
            "```\n/*@\nloop invariant y >= 0;\nloop invariant y <= 0;\nloop invariant 0 <= x;\nloop invariant x <= 2;\nloop invariant y >= x;\nloop invariant x <= 4 ==> y >= 4;\nloop invariant y >= 0 ==> x <= 2;\nloop invariant y <= 0 ==> x <= 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 4;\nloop invariant x >= y;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y >= -2;\nloop invariant x <= 4;\nloop invariant y <= 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 2;\nloop invariant 0 <= y <= 2;\nloop invariant y >= 0 ==> x < 4;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 2;\nloop invariant 0 <= y <= 2;\nloop invariant __BLAST_NONDET ==> x < 4;\nloop invariant __BLAST_NONDET ==> y >= 0;\nloop invariant __BLAST_NONDET ==> y <= 0;\nloop invariant __BLAST_NONDET ==> 4 <= x;\n*/\n```",
            "```\n/*@\nloop invariant 4 <= x ==> 0 <= y <= 2;\nloop invariant y >= 0 ==> y <= 2;\nloop invariant y >= 0 ==> x >= 4;\nloop invariant y <= 0 ==> x <= 2;\nloop invariant y >= 0 ==> 4 <= x ==> x >= 4;\nloop invariant y <= 0 ==> x <= 2 ==> x <= 2;\nloop invariant y >= 0 ==> y <= 0 ==> x >= 4;\nloop invariant y <= 0 ==> x <= 2 ==> x <= 2;\nloop invariant y >= 0 ==> y <= 0 ==> y <= 0;\nloop invariant y <= 0 ==> x <= 2 ==> x <= 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 2;\nloop invariant 0 <= x <= 2;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant ( (0 <= y <= 2) ==> (x >= 0) );\nloop invariant ( (0 <= x <= 2) ==> (y >= 0) );\nloop invariant 0 <= y <= 2;\nloop invariant 0 <= x <= 2;\nloop invariant ( (0 <= y <= 2) ==> (x >= 0) );\nloop invariant ( (0 <= x <= 2) ==> (y >= 0) );\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 4;\nloop invariant y >= 0;\nloop invariant y <= 0;\nloop invariant 4 <= x ==> x < 4;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 2;\nloop invariant 0 <= y <= 2;\nloop invariant y >= 0;\nloop invariant x >= 4 ==> x < 4;\nloop invariant y == 0 ==> y <= 0;\nloop invariant y <= 0 ==> 4 <= x;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 2;\nloop invariant 0 <= y <= 2;\nloop invariant (2 * x + y * y) <= 8;\nloop invariant (x + y) >= 0;\nloop invariant (x + y) <= 4;\nloop invariant (x >= 0) ==> (x <= 2);\nloop invariant (y >= 0) ==> (y <= 2);\nloop invariant (2 * x + y * y) ==> (x + y) >= 0;\nloop invariant (2 * x + y * y) ==> (x + y) <= 4;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 2;\nloop invariant 0 <= y <= 2;\nloop invariant x <= y;\nloop invariant y >= 0 ==> x < 4;\nloop invariant y < 0 ==> x < 4;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 2;\nloop invariant 0 <= y <= 2;\nloop invariant ((0 <= x) ==> (x <= 2));\nloop invariant ((0 <= y) ==> (y <= 2));\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 2;\nloop invariant x%2 == y%2;\nloop invariant (x >= 0) ==> (x <= 4);\nloop invariant (y >= 0) ==> (y <= 4);\nloop invariant (x >= 0) ==> (x <= 4) ==> (x == y);\nloop invariant (x >= 0) ==> (x <= 4) ==> (x%2 == 0);\nloop invariant (x >= 0) ==> (x <= 4) ==> (y%2 == 0);\nloop invariant (x >= 0) ==> (x <= 4) ==> (x%2 == y%2);\nloop invariant (x >= 0) ==> (x <= 4) ==> (x%2 == y%2) ==> (x == y);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint __BLAST_NONDET;\nvoid main() {\n  int x,y;\n\n  assume(0 <= x);  assume(x <= 2);\n  assume(0 <= y);  assume(y <= 2);\n  /*@\n\n\n\n\n\n\n\n\n\n*/\nwhile( __BLAST_NONDET ) {\n\tx+=2;\n\ty+=2;\n  }\n  if( y >= 0 ) \n    if( y <= 0 ) \n      if( 4 <= x ) \n\t{;\n//@ assert( x < 4 );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 2;\nloop invariant 0 <= y <= 2;\nloop invariant x <= y;\nloop invariant x <= 4;\nloop invariant (x == 4) ==> (y >= 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint __BLAST_NONDET;\nvoid main() {\n  int x,y;\n\n  assume(0 <= x);  assume(x <= 2);\n  assume(0 <= y);  assume(y <= 2);\n  /*@\n\n\n\n\n\n*/\nwhile( __BLAST_NONDET ) {\n\tx+=2;\n\ty+=2;\n  }\n  if( y >= 0 ) \n    if( y <= 0 ) \n      if( 4 <= x ) \n\t{;\n//@ assert( x < 4 );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 2; loop invariant 0 <= y <= 2; loop invariant x <= y; loop invariant x >= (2 + (y - 2) * (y - 1) / 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint __BLAST_NONDET;\nvoid main() {\n  int x,y;\n\n  assume(0 <= x);  assume(x <= 2);\n  assume(0 <= y);  assume(y <= 2);\n  /*@\n\n*/\nwhile( __BLAST_NONDET ) {\n\tx+=2;\n\ty+=2;\n  }\n  if( y >= 0 ) \n    if( y <= 0 ) \n      if( 4 <= x ) \n\t{;\n//@ assert( x < 4 );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 4;\nloop invariant (y >= 0 ==> 4 <= x);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint __BLAST_NONDET;\nvoid main() {\n  int x,y;\n\n  assume(0 <= x);  assume(x <= 2);\n  assume(0 <= y);  assume(y <= 2);\n  /*@\n\n\n\n*/\nwhile( __BLAST_NONDET ) {\n\tx+=2;\n\ty+=2;\n  }\n  if( y >= 0 ) \n    if( y <= 0 ) \n      if( 4 <= x ) \n\t{;\n//@ assert( x < 4 );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant y >= 0;\nloop invariant y <= 0;\nloop invariant 0 <= x;\nloop invariant x <= 2;\nloop invariant y >= x;\nloop invariant x <= 4 ==> y >= 4;\nloop invariant y >= 0 ==> x <= 2;\nloop invariant y <= 0 ==> x <= 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint __BLAST_NONDET;\nvoid main() {\n  int x,y;\n\n  assume(0 <= x);  assume(x <= 2);\n  assume(0 <= y);  assume(y <= 2);\n  /*@\nloop invariant i1: y >= 0;\n\nloop invariant i3: 0 <= x;\n\n\n\n\nloop invariant i8: y <= 0 ==> x <= 2;\n*/\nwhile( __BLAST_NONDET ) {\n\tx+=2;\n\ty+=2;\n  }\n  if( y >= 0 ) \n    if( y <= 0 ) \n      if( 4 <= x ) \n\t{;\n//@ assert( x < 4 );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 4;\nloop invariant x >= y;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y >= -2;\nloop invariant x <= 4;\nloop invariant y <= 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint __BLAST_NONDET;\nvoid main() {\n  int x,y;\n\n  assume(0 <= x);  assume(x <= 2);\n  assume(0 <= y);  assume(y <= 2);\n  /*@\n\n\n\nloop invariant i4: y >= 0;\nloop invariant i5: x >= 0;\nloop invariant i6: y >= -2;\n\n\n*/\nwhile( __BLAST_NONDET ) {\n\tx+=2;\n\ty+=2;\n  }\n  if( y >= 0 ) \n    if( y <= 0 ) \n      if( 4 <= x ) \n\t{;\n//@ assert( x < 4 );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 2;\nloop invariant 0 <= y <= 2;\nloop invariant y >= 0 ==> x < 4;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint __BLAST_NONDET;\nvoid main() {\n  int x,y;\n\n  assume(0 <= x);  assume(x <= 2);\n  assume(0 <= y);  assume(y <= 2);\n  /*@\n\n\n\n*/\nwhile( __BLAST_NONDET ) {\n\tx+=2;\n\ty+=2;\n  }\n  if( y >= 0 ) \n    if( y <= 0 ) \n      if( 4 <= x ) \n\t{;\n//@ assert( x < 4 );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 2;\nloop invariant 0 <= y <= 2;\nloop invariant __BLAST_NONDET ==> x < 4;\nloop invariant __BLAST_NONDET ==> y >= 0;\nloop invariant __BLAST_NONDET ==> y <= 0;\nloop invariant __BLAST_NONDET ==> 4 <= x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint __BLAST_NONDET;\nvoid main() {\n  int x,y;\n\n  assume(0 <= x);  assume(x <= 2);\n  assume(0 <= y);  assume(y <= 2);\n  /*@\nloop invariant i1: 0 <= x <= 2;\nloop invariant i2: 0 <= y <= 2;\nloop invariant i3: __BLAST_NONDET ==> x < 4;\nloop invariant i4: __BLAST_NONDET ==> y >= 0;\nloop invariant i5: __BLAST_NONDET ==> y <= 0;\nloop invariant i6: __BLAST_NONDET ==> 4 <= x;\n*/\nwhile( __BLAST_NONDET ) {\n\tx+=2;\n\ty+=2;\n  }\n  if( y >= 0 ) \n    if( y <= 0 ) \n      if( 4 <= x ) \n\t{;\n//@ assert( x < 4 );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 4 <= x ==> 0 <= y <= 2;\nloop invariant y >= 0 ==> y <= 2;\nloop invariant y >= 0 ==> x >= 4;\nloop invariant y <= 0 ==> x <= 2;\nloop invariant y >= 0 ==> 4 <= x ==> x >= 4;\nloop invariant y <= 0 ==> x <= 2 ==> x <= 2;\nloop invariant y >= 0 ==> y <= 0 ==> x >= 4;\nloop invariant y <= 0 ==> x <= 2 ==> x <= 2;\nloop invariant y >= 0 ==> y <= 0 ==> y <= 0;\nloop invariant y <= 0 ==> x <= 2 ==> x <= 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint __BLAST_NONDET;\nvoid main() {\n  int x,y;\n\n  assume(0 <= x);  assume(x <= 2);\n  assume(0 <= y);  assume(y <= 2);\n  /*@\n\n\n\n\nloop invariant i5: y >= 0 ==> 4 <= x ==> x >= 4;\nloop invariant i6: y <= 0 ==> x <= 2 ==> x <= 2;\n\nloop invariant i8: y >= 0 ==> y <= 0 ==> y <= 0;\n*/\nwhile( __BLAST_NONDET ) {\n\tx+=2;\n\ty+=2;\n  }\n  if( y >= 0 ) \n    if( y <= 0 ) \n      if( 4 <= x ) \n\t{;\n//@ assert( x < 4 );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 2;\nloop invariant 0 <= x <= 2;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant ( (0 <= y <= 2) ==> (x >= 0) );\nloop invariant ( (0 <= x <= 2) ==> (y >= 0) );\nloop invariant 0 <= y <= 2;\nloop invariant 0 <= x <= 2;\nloop invariant ( (0 <= y <= 2) ==> (x >= 0) );\nloop invariant ( (0 <= x <= 2) ==> (y >= 0) );\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint __BLAST_NONDET;\nvoid main() {\n  int x,y;\n\n  assume(0 <= x);  assume(x <= 2);\n  assume(0 <= y);  assume(y <= 2);\n  /*@\n\n\nloop invariant i3: x >= 0;\nloop invariant i4: y >= 0;\nloop invariant i5: ( (0 <= y <= 2) ==> (x >= 0) );\nloop invariant i6: ( (0 <= x <= 2) ==> (y >= 0) );\n*/\nwhile( __BLAST_NONDET ) {\n\tx+=2;\n\ty+=2;\n  }\n  if( y >= 0 ) \n    if( y <= 0 ) \n      if( 4 <= x ) \n\t{;\n//@ assert( x < 4 );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 4;\nloop invariant y >= 0;\nloop invariant y <= 0;\nloop invariant 4 <= x ==> x < 4;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint __BLAST_NONDET;\nvoid main() {\n  int x,y;\n\n  assume(0 <= x);  assume(x <= 2);\n  assume(0 <= y);  assume(y <= 2);\n  /*@\n\n\nloop invariant i3: y >= 0;\n\n\n*/\nwhile( __BLAST_NONDET ) {\n\tx+=2;\n\ty+=2;\n  }\n  if( y >= 0 ) \n    if( y <= 0 ) \n      if( 4 <= x ) \n\t{;\n//@ assert( x < 4 );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 2;\nloop invariant 0 <= y <= 2;\nloop invariant y >= 0;\nloop invariant x >= 4 ==> x < 4;\nloop invariant y == 0 ==> y <= 0;\nloop invariant y <= 0 ==> 4 <= x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint __BLAST_NONDET;\nvoid main() {\n  int x,y;\n\n  assume(0 <= x);  assume(x <= 2);\n  assume(0 <= y);  assume(y <= 2);\n  /*@\n\n\nloop invariant i3: y >= 0;\n\nloop invariant i5: y == 0 ==> y <= 0;\n\n*/\nwhile( __BLAST_NONDET ) {\n\tx+=2;\n\ty+=2;\n  }\n  if( y >= 0 ) \n    if( y <= 0 ) \n      if( 4 <= x ) \n\t{;\n//@ assert( x < 4 );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 2;\nloop invariant 0 <= y <= 2;\nloop invariant (2 * x + y * y) <= 8;\nloop invariant (x + y) >= 0;\nloop invariant (x + y) <= 4;\nloop invariant (x >= 0) ==> (x <= 2);\nloop invariant (y >= 0) ==> (y <= 2);\nloop invariant (2 * x + y * y) ==> (x + y) >= 0;\nloop invariant (2 * x + y * y) ==> (x + y) <= 4;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint __BLAST_NONDET;\nvoid main() {\n  int x,y;\n\n  assume(0 <= x);  assume(x <= 2);\n  assume(0 <= y);  assume(y <= 2);\n  /*@\n\n\n\nloop invariant i4: (x + y) >= 0;\n\n\n\nloop invariant i8: (2 * x + y * y) ==> (x + y) >= 0;\n\n*/\nwhile( __BLAST_NONDET ) {\n\tx+=2;\n\ty+=2;\n  }\n  if( y >= 0 ) \n    if( y <= 0 ) \n      if( 4 <= x ) \n\t{;\n//@ assert( x < 4 );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 2;\nloop invariant 0 <= y <= 2;\nloop invariant x <= y;\nloop invariant y >= 0 ==> x < 4;\nloop invariant y < 0 ==> x < 4;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint __BLAST_NONDET;\nvoid main() {\n  int x,y;\n\n  assume(0 <= x);  assume(x <= 2);\n  assume(0 <= y);  assume(y <= 2);\n  /*@\n\n\n\n\n\n*/\nwhile( __BLAST_NONDET ) {\n\tx+=2;\n\ty+=2;\n  }\n  if( y >= 0 ) \n    if( y <= 0 ) \n      if( 4 <= x ) \n\t{;\n//@ assert( x < 4 );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 2;\nloop invariant 0 <= y <= 2;\nloop invariant ((0 <= x) ==> (x <= 2));\nloop invariant ((0 <= y) ==> (y <= 2));\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint __BLAST_NONDET;\nvoid main() {\n  int x,y;\n\n  assume(0 <= x);  assume(x <= 2);\n  assume(0 <= y);  assume(y <= 2);\n  /*@\n\n\n\n\n*/\nwhile( __BLAST_NONDET ) {\n\tx+=2;\n\ty+=2;\n  }\n  if( y >= 0 ) \n    if( y <= 0 ) \n      if( 4 <= x ) \n\t{;\n//@ assert( x < 4 );\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "loop invariant 0 <= y <= 2 is partially proven to be inductive.\nloop invariant x%2 == y%2 is preserved but not established.\nloop invariant (x >= 0) ==> (x <= 4) is partially proven to be inductive.\nloop invariant (y >= 0) ==> (y <= 4) is partially proven to be inductive.\nloop invariant (x >= 0) ==> (x <= 4) ==> (x == y) is preserved but not established.\nloop invariant (x >= 0) ==> (x <= 4) ==> (x%2 == 0) is preserved but not established.\nloop invariant (x >= 0) ==> (x <= 4) ==> (y%2 == 0) is partially proven to be inductive.\nloop invariant (x >= 0) ==> (x <= 4) ==> (x%2 == y%2) is partially proven to be inductive.\nloop invariant (x >= 0) ==> (x <= 4) ==> (x%2 == y%2) ==> (x == y) is partially proven to be inductive.\nloop invariant 0 <= x <= 2 is partially proven to be inductive.\nloop invariant x <= y is partially proven to be inductive.\nloop invariant x <= 4 is partially proven to be inductive.\nloop invariant (x == 4) ==> (y >= 0) is partially proven to be inductive.\nloop invariant 0 <= x <= 2; loop invariant 0 <= y <= 2; loop invariant x <= y; loop invariant x >= (2 + (y - 2) * (y - 1) / 2) is partially proven to be inductive.\nloop invariant 0 <= x <= 4 is partially proven to be inductive.\nloop invariant 0 <= y <= 4 is partially proven to be inductive.\nloop invariant (y >= 0 ==> 4 <= x) is preserved but not established.\nloop invariant y >= 0 is partially proven to be inductive.\nloop invariant y <= 0 is partially proven to be inductive.\nloop invariant 0 <= x is partially proven to be inductive.\nloop invariant x <= 2 is partially proven to be inductive.\nloop invariant y >= x is partially proven to be inductive.\nloop invariant x <= 4 ==> y >= 4 is partially proven to be inductive.\nloop invariant y >= 0 ==> x <= 2 is partially proven to be inductive.\nloop invariant y <= 0 ==> x <= 2 is partially proven to be inductive.\nloop invariant x >= y is partially proven to be inductive.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant y >= -2 is partially proven to be inductive.\nloop invariant y <= 2 is partially proven to be inductive.\nloop invariant y >= 0 ==> x < 4 is partially proven to be inductive.\nloop invariant __BLAST_NONDET ==> x < 4 is partially proven to be inductive.\nloop invariant __BLAST_NONDET ==> y >= 0 is partially proven to be inductive.\nloop invariant __BLAST_NONDET ==> y <= 0 is partially proven to be inductive.\nloop invariant __BLAST_NONDET ==> 4 <= x is partially proven to be inductive.\nloop invariant 4 <= x ==> 0 <= y <= 2 is partially proven to be inductive.\nloop invariant y >= 0 ==> y <= 2 is partially proven to be inductive.\nloop invariant y >= 0 ==> x >= 4 is partially proven to be inductive.\nloop invariant y >= 0 ==> 4 <= x ==> x >= 4 is partially proven to be inductive.\nloop invariant y <= 0 ==> x <= 2 ==> x <= 2 is partially proven to be inductive.\nloop invariant y >= 0 ==> y <= 0 ==> x >= 4 is partially proven to be inductive.\nloop invariant y >= 0 ==> y <= 0 ==> y <= 0 is partially proven to be inductive.\nloop invariant ( (0 <= y <= 2) ==> (x >= 0) ) is partially proven to be inductive.\nloop invariant ( (0 <= x <= 2) ==> (y >= 0) ) is partially proven to be inductive.\nloop invariant 4 <= x ==> x < 4 is partially proven to be inductive.\nloop invariant x >= 4 ==> x < 4 is partially proven to be inductive.\nloop invariant y == 0 ==> y <= 0 is partially proven to be inductive.\nloop invariant y <= 0 ==> 4 <= x is partially proven to be inductive.\nloop invariant (2 * x + y * y) <= 8 is partially proven to be inductive.\nloop invariant (x + y) >= 0 is partially proven to be inductive.\nloop invariant (x + y) <= 4 is partially proven to be inductive.\nloop invariant (x >= 0) ==> (x <= 2) is partially proven to be inductive.\nloop invariant (y >= 0) ==> (y <= 2) is partially proven to be inductive.\nloop invariant (2 * x + y * y) ==> (x + y) >= 0 is partially proven to be inductive.\nloop invariant (2 * x + y * y) ==> (x + y) <= 4 is partially proven to be inductive.\nloop invariant y < 0 ==> x < 4 is partially proven to be inductive.\nloop invariant ((0 <= x) ==> (x <= 2)) is partially proven to be inductive.\nloop invariant ((0 <= y) ==> (y <= 2)) is partially proven to be inductive.\nAssertion x < 4: Partially proven",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint __BLAST_NONDET;\nvoid main() {\n  int x,y;\n\n  assume(0 <= x);  assume(x <= 2);\n  assume(0 <= y);  assume(y <= 2);\n  /*@\nloop invariant i1: 0 <= y <= 2;\nloop invariant i2: x%2 == y%2;\nloop invariant i3: (x >= 0) ==> (x <= 4);\nloop invariant i4: (y >= 0) ==> (y <= 4);\nloop invariant i5: (x >= 0) ==> (x <= 4) ==> (x == y);\nloop invariant i6: (x >= 0) ==> (x <= 4) ==> (x%2 == 0);\nloop invariant i7: (x >= 0) ==> (x <= 4) ==> (y%2 == 0);\nloop invariant i8: (x >= 0) ==> (x <= 4) ==> (x%2 == y%2);\nloop invariant i9: (x >= 0) ==> (x <= 4) ==> (x%2 == y%2) ==> (x == y);\nloop invariant i10: 0 <= x <= 2;\nloop invariant i11: x <= y;\nloop invariant i12: x <= 4;\nloop invariant i13: (x == 4) ==> (y >= 0);\nloop invariant i14: 0 <= x <= 2; loop invariant 0 <= y <= 2; loop invariant x <= y; loop invariant x >= (2 + (y - 2) * (y - 1) / 2);\nloop invariant i15: 0 <= x <= 4;\nloop invariant i16: 0 <= y <= 4;\nloop invariant i17: (y >= 0 ==> 4 <= x);\nloop invariant i18: y >= 0;\nloop invariant i19: y <= 0;\nloop invariant i20: 0 <= x;\nloop invariant i21: x <= 2;\nloop invariant i22: y >= x;\nloop invariant i23: x <= 4 ==> y >= 4;\nloop invariant i24: y >= 0 ==> x <= 2;\nloop invariant i25: y <= 0 ==> x <= 2;\nloop invariant i26: x >= y;\nloop invariant i27: x >= 0;\nloop invariant i28: y >= -2;\nloop invariant i29: y <= 2;\nloop invariant i30: y >= 0 ==> x < 4;\nloop invariant i31: __BLAST_NONDET ==> x < 4;\nloop invariant i32: __BLAST_NONDET ==> y >= 0;\nloop invariant i33: __BLAST_NONDET ==> y <= 0;\nloop invariant i34: __BLAST_NONDET ==> 4 <= x;\nloop invariant i35: 4 <= x ==> 0 <= y <= 2;\nloop invariant i36: y >= 0 ==> y <= 2;\nloop invariant i37: y >= 0 ==> x >= 4;\nloop invariant i38: y >= 0 ==> 4 <= x ==> x >= 4;\nloop invariant i39: y <= 0 ==> x <= 2 ==> x <= 2;\nloop invariant i40: y >= 0 ==> y <= 0 ==> x >= 4;\nloop invariant i41: y >= 0 ==> y <= 0 ==> y <= 0;\nloop invariant i42: ( (0 <= y <= 2) ==> (x >= 0) );\nloop invariant i43: ( (0 <= x <= 2) ==> (y >= 0) );\nloop invariant i44: 4 <= x ==> x < 4;\nloop invariant i45: x >= 4 ==> x < 4;\nloop invariant i46: y == 0 ==> y <= 0;\nloop invariant i47: y <= 0 ==> 4 <= x;\nloop invariant i48: (2 * x + y * y) <= 8;\nloop invariant i49: (x + y) >= 0;\nloop invariant i50: (x + y) <= 4;\nloop invariant i51: (x >= 0) ==> (x <= 2);\nloop invariant i52: (y >= 0) ==> (y <= 2);\nloop invariant i53: (2 * x + y * y) ==> (x + y) >= 0;\nloop invariant i54: (2 * x + y * y) ==> (x + y) <= 4;\nloop invariant i55: y < 0 ==> x < 4;\nloop invariant i56: ((0 <= x) ==> (x <= 2));\nloop invariant i57: ((0 <= y) ==> (y <= 2));\n*/\nwhile( __BLAST_NONDET ) {\n\tx+=2;\n\ty+=2;\n  }\n  if( y >= 0 ) \n    if( y <= 0 ) \n      if( 4 <= x ) \n\t{;\n//@ assert( x < 4 );\n}\n\n}",
        "combined_annotation_num_solver_calls": 6,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint __BLAST_NONDET;\nvoid main() {\n  int x,y;\n\n  assume(0 <= x);  assume(x <= 2);\n  assume(0 <= y);  assume(y <= 2);\n  /*@\nloop invariant i1: 0 <= y <= 2;\n\nloop invariant i3: (x >= 0) ==> (x <= 4);\nloop invariant i4: (y >= 0) ==> (y <= 4);\n\n\n\n\n\nloop invariant i10: 0 <= x <= 2;\n\nloop invariant i12: x <= 4;\nloop invariant i13: (x == 4) ==> (y >= 0);\nloop invariant i14: 0 <= x <= 2; loop invariant 0 <= y <= 2; loop invariant x <= y; loop invariant x >= (2 + (y - 2) * (y - 1) / 2);\nloop invariant i15: 0 <= x <= 4;\nloop invariant i16: 0 <= y <= 4;\n\nloop invariant i18: y >= 0;\n\nloop invariant i20: 0 <= x;\nloop invariant i21: x <= 2;\nloop invariant i22: y >= x;\n\nloop invariant i24: y >= 0 ==> x <= 2;\nloop invariant i25: y <= 0 ==> x <= 2;\nloop invariant i26: x >= y;\nloop invariant i27: x >= 0;\nloop invariant i28: y >= -2;\nloop invariant i29: y <= 2;\nloop invariant i30: y >= 0 ==> x < 4;\nloop invariant i31: __BLAST_NONDET ==> x < 4;\nloop invariant i32: __BLAST_NONDET ==> y >= 0;\nloop invariant i33: __BLAST_NONDET ==> y <= 0;\nloop invariant i34: __BLAST_NONDET ==> 4 <= x;\nloop invariant i35: 4 <= x ==> 0 <= y <= 2;\nloop invariant i36: y >= 0 ==> y <= 2;\n\nloop invariant i38: y >= 0 ==> 4 <= x ==> x >= 4;\nloop invariant i39: y <= 0 ==> x <= 2 ==> x <= 2;\nloop invariant i40: y >= 0 ==> y <= 0 ==> x >= 4;\nloop invariant i41: y >= 0 ==> y <= 0 ==> y <= 0;\nloop invariant i42: ( (0 <= y <= 2) ==> (x >= 0) );\nloop invariant i43: ( (0 <= x <= 2) ==> (y >= 0) );\nloop invariant i44: 4 <= x ==> x < 4;\nloop invariant i45: x >= 4 ==> x < 4;\nloop invariant i46: y == 0 ==> y <= 0;\nloop invariant i47: y <= 0 ==> 4 <= x;\nloop invariant i48: (2 * x + y * y) <= 8;\nloop invariant i49: (x + y) >= 0;\nloop invariant i50: (x + y) <= 4;\nloop invariant i51: (x >= 0) ==> (x <= 2);\nloop invariant i52: (y >= 0) ==> (y <= 2);\nloop invariant i53: (2 * x + y * y) ==> (x + y) >= 0;\nloop invariant i54: (2 * x + y * y) ==> (x + y) <= 4;\nloop invariant i55: y < 0 ==> x < 4;\nloop invariant i56: ((0 <= x) ==> (x <= 2));\nloop invariant i57: ((0 <= y) ==> (y <= 2));\n*/\nwhile( __BLAST_NONDET ) {\n\tx+=2;\n\ty+=2;\n  }\n  if( y >= 0 ) \n    if( y <= 0 ) \n      if( 4 <= x ) \n\t{;\n//@ assert( x < 4 );\n}\n\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/split.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/11.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/15.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/16.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/18.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/23.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/30.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/32.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/37.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/38.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/41.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/43.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/44.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/46.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/popl.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/05.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/07.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/37.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/39.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/gulv_simp.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/substring1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/xy10.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/const_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/multivar_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/phases_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/simple_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/simple_safe2.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/simple_safe3.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/simple_safe4.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/underapprox_safe2.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/barbr.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/barbrprime.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/bk-nat.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/bkley.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/efm.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/ex1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/lifnat.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/lifnatprime.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/lifo.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/seesaw.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/substring1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/swim.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/swim1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/gulwani_cegar1.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/13.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/14.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/19.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/20.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/39.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/cav.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/19.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/gulv.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/pldi082_unbounded.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/underapprox_unsafe1.c"
        ],
        "skipped": [],
        "total": 163,
        "success_count": 137,
        "failure_count": 26,
        "success_rate": 0.8404907975460123
    }
}