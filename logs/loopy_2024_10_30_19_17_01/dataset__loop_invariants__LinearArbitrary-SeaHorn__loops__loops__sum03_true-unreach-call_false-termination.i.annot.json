{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(){\n  int  sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int  x=0;\n  while(x < 1000000){\n    sn = sn +(2);\n    x++;\n    {;\n//@ assert(sn==x*(2)|| sn == 0);\n}\n\n  }\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= x <= 1000000;\nloop invariant sn == x * 2 || sn == 0;\nloop invariant x <= loop1 || x == 0;\nloop invariant sn <= x * 2 || sn == 0;\nloop invariant sn + (2) == x * 2 || sn == 0;\nloop invariant sn + (2) == x * 2 || sn == 0 && x <= loop1;\nloop invariant sn + (2) == x * 2 || sn == 0 && x <= loop1 && sn <= x * 2;\nloop invariant sn + (2) == x * 2 || sn == 0 && x <= loop1 && sn <= x * 2 && x <= n1;\nloop invariant sn + (2) == x * 2 || sn == 0 && x <= loop1 && sn <= x * 2 && x <= n1 && sn <= n1 * 2;\nloop invariant sn + (2) == x * 2 || sn == 0 && x <= loop1 && sn <= x * 2 && x <= n1 && sn <= n1 * 2 && sn >= 0;\nloop invariant sn + (2) == x * 2 || sn == 0 && x <= loop1 && sn <= x * 2 && x <= n1 && sn <= n1 * 2 && sn >= 0 && sn <= 2000000;\nloop invariant sn + (2) == x * 2 || sn == 0 && x <= loop1 && sn <= x * 2 && x <= n1 && sn <= n1 * 2 && sn >= 0 && sn <= 2000000 && x <= 1000000;\nloop invariant sn + (2) == x * 2 || sn == 0 && x <= loop1 && sn <= x * 2 && x <= n1 && sn <= n1 * 2 && sn >= 0 && sn <= 2000000 && x <= 1000000 && sn <= 2000000;\nloop invariant sn + (2) == x * 2 || sn == 0 && x <= loop1 && sn <= x * 2 && x <= n1 && sn <= n1 * 2 && sn >= 0 && sn <= 2000000 && x <= 1000000 && sn <= 2000000 && x == 1000000;\nloop invariant sn + (2) == x * 2 || sn == 0 && x <= loop1 && sn <= x * 2 && x <= n1 && sn <= n1 * 2 && sn >= 0 && sn <= 2000000 && x <= 1000000 && sn <= 2000000 && x == 1000000 && sn == 2000000;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 1000000;\nloop invariant sn >= x * 2 || sn == 0;\nloop invariant 0 <= x <= 1000000;\nloop invariant sn >= x * 2 || sn == 0;\n*/\n```",
            "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant i1 ==> i2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= sn <= 2000000;\nloop invariant 0 <= sn <= x*(2);\nloop invariant x <= 1000000;\nloop invariant sn >= (2);\nloop invariant sn >= (2*x);\nloop invariant sn <= (2*x);\nloop invariant sn >= 0;\nloop invariant 0 <= x <= 1000000;\nloop invariant 0 <= sn <= 2000000;\nloop invariant 0 <= sn <= x*(2);\nloop invariant x <= 1000000;\nloop invariant sn >= (2);\nloop invariant sn >= (2*x);\nloop invariant sn <= (2*x);\nloop invariant sn >= 0;\nloop invariant 0 <= x <= 1000000;\nloop invariant 0 <= sn <= 2000000;\nloop invariant 0 <= sn <= x*(2);\nloop invariant x <= 1000000;\nloop invariant sn >= (2);\nloop invariant sn >= (2*x);\nloop invariant sn <= (2*x);\nloop invariant sn >= 0;\nloop invariant 0 <= x <= 1000000;\nloop invariant 0 <= sn <= 2000000;\nloop invariant 0 <= sn <= x*(2);\nloop invariant x <= 1000000;\nloop invariant sn >= (2);\nloop invariant sn >= (2*x);\nloop invariant sn <= (2*x);\nloop invariant sn >= 0;\nloop invariant 0 <= x <= 1000000;\nloop invariant 0 <= sn <= 2000000;\nloop invariant 0 <= sn <= x*(2);\nloop invariant x <= 1000000;\nloop invariant sn >= (2);\nloop invariant sn >= (2*x);\nloop invariant sn <= (2*x);\nloop invariant sn >= 0;\nloop invariant 0 <= x <= 1000000;\nloop invariant 0 <= sn <= 2000000;\nloop invariant 0 <= sn <= x*(2);\nloop invariant x <= 1000000;\nloop invariant sn >= (2);\nloop invariant sn >= (2*x);\nloop invariant sn <= (2*x);\nloop invariant sn >= 0;\nloop invariant 0 <= x <= 1000000;\nloop invariant 0 <= sn <= 2000000;\nloop invariant 0 <= sn <= x*(2);\nloop invariant x <= 1000000;\nloop invariant sn >= (2);\nloop invariant sn >= (2*x);\nloop invariant sn <= (2*x);\nloop invariant sn >= 0;\nloop invariant 0 <= x <= 1000000;\nloop invariant 0 <= sn <= 2000000;\nloop invariant 0 <= sn <= x*(2);\nloop invariant x <= 1000000;\nloop invariant sn >= (2);\nloop invariant sn >= (2*x);\nloop invariant sn <= (2*x);\nloop invariant sn >= 0;\nloop invariant 0 <= x <= 1000000;\nloop invariant 0 <= sn <= 2000000;\nloop invariant 0 <= sn <= x*(2);\nloop invariant x <= 1000000;\nloop invariant sn >= (2);\nloop invariant sn >= (2*x);\nloop invariant sn <= (2*x);\nloop invariant sn >= 0;\nloop invariant 0 <= x <= 1000000;\nloop invariant 0 <= sn <= 2000000;\nloop invariant 0 <= sn <= x*(2);\nloop invariant x <= 1000000;\nloop invariant sn >= (2);\nloop invariant sn >= (2*x);\nloop invariant sn <= (2*x);\nloop invariant sn >= 0;\nloop invariant 0 <= x <= 1000000;\nloop invariant 0 <= sn <= 2000000;\nloop invariant 0 <= sn <= x*(2);\nloop invariant x <= 1000000;\nloop invariant sn >= (2);\nloop invariant sn >= (2*x);\nloop invariant sn <= (2*x);\nloop invariant sn >= 0;\nloop invariant 0 <= x <= 1000000;\nloop invariant 0 <= sn <= 2000000;\nloop invariant 0 <= sn <= x*(2);\nloop invariant x <= 1000000;\nloop invariant sn >= (2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 1000000;\nloop invariant sn >= 2*(x-1);\nloop invariant sn <= 2*x;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 1000000;\nloop invariant 0 <= sn <= 2*x;\nloop invariant sn == x*(2) || sn == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 1000000;\nloop invariant sn >= 0;\nloop invariant sn <= 2*x;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 1000000;\nloop invariant sn == x*(2) || sn == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= sn <= 2 * 1000000;\nloop invariant sn == x * 2;\nloop invariant 0 <= x <= 1000000;\nloop invariant x == sn / 2;\nloop invariant sn >= x * 2;\nloop invariant sn <= 2 * 1000000;\nloop invariant x <= 1000000;\nloop invariant sn == 0;\nloop invariant x == 0;\nloop invariant sn == 0 || x == 0;\nloop invariant sn == 0 || x == 0 || sn == x * 2;\nloop invariant sn == 0 || x == 0 || sn == x * 2 || sn == 2 * 1000000;\nloop invariant sn == 0 || x == 0 || sn == x * 2 || sn == 2 * 1000000 || sn <= 2 * 1000000;\nloop invariant sn == 0 || x == 0 || sn == x * 2 || sn == 2 * 1000000 || sn <= 2 * 1000000 || x <= 1000000;\nloop invariant sn == 0 || x == 0 || sn == x * 2 || sn == 2 * 1000000 || sn <= 2 * 1000000 || x <= 1000000 || sn >= x * 2;\nloop invariant sn == 0 || x == 0 || sn == x * 2 || sn == 2 * 1000000 || sn <= 2 * 1000000 || x <= 1000000 || sn >= x * 2 || sn == 0;\nloop invariant sn == 0 || x == 0 || sn == x * 2 || sn == 2 * 1000000 || sn <= 2 * 1000000 || x <= 1000000 || sn >= x * 2 || sn == 0 || x == 0;\nloop invariant sn == 0 || x == 0 || sn == x * 2 || sn == 2 * 1000000 || sn <= 2 * 1000000 || x <= 1000000 || sn >= x * 2 || sn == 0 || x == 0 || sn == x * 2;\nloop invariant sn == 0 || x == 0 || sn == x * 2 || sn == 2 * 1000000 || sn <= 2 * 1000000 || x <= 1000000 || sn >= x * 2 || sn == 0 || x == 0 || sn == x * 2 || sn == 2 * 1000000;\nloop invariant sn == 0 || x == 0 || sn == x * 2 || sn == 2 * 1000000 || sn <= 2 * 1000000 || x <= 1000000 || sn >= x * 2 || sn == 0 || x == 0 || sn == x * 2 || sn == 2 * 1000000 || sn <= 2 * 1000000;\nloop invariant sn == 0 || x == 0 || sn == x * 2 || sn == 2 * 1000000 || sn <= 2 * 1000000 || x <= 1000000 || sn >= x * 2 || sn == 0 || x == 0 || sn == x * 2 || sn == 2 * 1000000 || sn <= 2 * 1000000 || x <= 1000000;\n*/\n```",
            "```\n/*@\nloop invariant sn == 0 || sn == 2 * x;loop invariant x <= 1000000;loop invariant x >= 0;loop invariant sn >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 1000000;\nloop invariant sn == x * 2;\nloop invariant sn == 0 || sn == 2 * x;\nloop invariant x <= 1000000;\nloop invariant sn == x * 2 || sn == 0;\nloop invariant 0 <= x <= 1000000;\nloop invariant sn == x * 2;\nloop invariant sn == 0 || sn == 2 * x;\nloop invariant x <= 1000000;\nloop invariant sn == x * 2 || sn == 0;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= 1000000;\nloop invariant sn == x * 2;\nloop invariant sn >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 1000000;\nloop invariant sn == x * 2;\nloop invariant 0 <= x <= 1000000;\nloop invariant sn == x * 2;\n*/\n```",
            "```\n/*@\nloop invariant sn == (2 * x);\nloop invariant x <= 1000000;\nloop invariant sn <= (2 * 1000000);\nloop invariant 0 <= sn <= (2 * 1000000);\nloop invariant 0 <= x <= 1000000;\nloop invariant x == (sn / 2);\nloop invariant sn == (x * 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 1000000;\nloop invariant sn >= 0;\nloop invariant sn >= x*2;\nloop invariant sn <= x*2 + 2*(x-1);\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 12,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 1000000;\nloop invariant sn == x * 2 || sn == 0;\nloop invariant x <= loop1 || x == 0;\nloop invariant sn <= x * 2 || sn == 0;\nloop invariant sn + (2) == x * 2 || sn == 0;\nloop invariant sn + (2) == x * 2 || sn == 0 && x <= loop1;\nloop invariant sn + (2) == x * 2 || sn == 0 && x <= loop1 && sn <= x * 2;\nloop invariant sn + (2) == x * 2 || sn == 0 && x <= loop1 && sn <= x * 2 && x <= n1;\nloop invariant sn + (2) == x * 2 || sn == 0 && x <= loop1 && sn <= x * 2 && x <= n1 && sn <= n1 * 2;\nloop invariant sn + (2) == x * 2 || sn == 0 && x <= loop1 && sn <= x * 2 && x <= n1 && sn <= n1 * 2 && sn >= 0;\nloop invariant sn + (2) == x * 2 || sn == 0 && x <= loop1 && sn <= x * 2 && x <= n1 && sn <= n1 * 2 && sn >= 0 && sn <= 2000000;\nloop invariant sn + (2) == x * 2 || sn == 0 && x <= loop1 && sn <= x * 2 && x <= n1 && sn <= n1 * 2 && sn >= 0 && sn <= 2000000 && x <= 1000000;\nloop invariant sn + (2) == x * 2 || sn == 0 && x <= loop1 && sn <= x * 2 && x <= n1 && sn <= n1 * 2 && sn >= 0 && sn <= 2000000 && x <= 1000000 && sn <= 2000000;\nloop invariant sn + (2) == x * 2 || sn == 0 && x <= loop1 && sn <= x * 2 && x <= n1 && sn <= n1 * 2 && sn >= 0 && sn <= 2000000 && x <= 1000000 && sn <= 2000000 && x == 1000000;\nloop invariant sn + (2) == x * 2 || sn == 0 && x <= loop1 && sn <= x * 2 && x <= n1 && sn <= n1 * 2 && sn >= 0 && sn <= 2000000 && x <= 1000000 && sn <= 2000000 && x == 1000000 && sn == 2000000;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(){\n  int  sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int  x=0;\n  /*@\nloop invariant i1: 0 <= x <= 1000000;\nloop invariant i2: sn == x * 2 || sn == 0;\n\nloop invariant i4: sn <= x * 2 || sn == 0;\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile(x < 1000000){\n    sn = sn +(2);\n    x++;\n    {;\n//@ assert(sn==x*(2)|| sn == 0);\n}\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 1000000;\nloop invariant sn >= x * 2 || sn == 0;\nloop invariant 0 <= x <= 1000000;\nloop invariant sn >= x * 2 || sn == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(){\n  int  sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int  x=0;\n  /*@\nloop invariant i1: 0 <= x <= 1000000;\nloop invariant i2: sn >= x * 2 || sn == 0;\n*/\nwhile(x < 1000000){\n    sn = sn +(2);\n    x++;\n    {;\n//@ assert(sn==x*(2)|| sn == 0);\n}\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant i1 ==> i2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(){\n  int  sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int  x=0;\n  /*@\n\n\n\n*/\nwhile(x < 1000000){\n    sn = sn +(2);\n    x++;\n    {;\n//@ assert(sn==x*(2)|| sn == 0);\n}\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= sn <= 2000000;\nloop invariant 0 <= sn <= x*(2);\nloop invariant x <= 1000000;\nloop invariant sn >= (2);\nloop invariant sn >= (2*x);\nloop invariant sn <= (2*x);\nloop invariant sn >= 0;\nloop invariant 0 <= x <= 1000000;\nloop invariant 0 <= sn <= 2000000;\nloop invariant 0 <= sn <= x*(2);\nloop invariant x <= 1000000;\nloop invariant sn >= (2);\nloop invariant sn >= (2*x);\nloop invariant sn <= (2*x);\nloop invariant sn >= 0;\nloop invariant 0 <= x <= 1000000;\nloop invariant 0 <= sn <= 2000000;\nloop invariant 0 <= sn <= x*(2);\nloop invariant x <= 1000000;\nloop invariant sn >= (2);\nloop invariant sn >= (2*x);\nloop invariant sn <= (2*x);\nloop invariant sn >= 0;\nloop invariant 0 <= x <= 1000000;\nloop invariant 0 <= sn <= 2000000;\nloop invariant 0 <= sn <= x*(2);\nloop invariant x <= 1000000;\nloop invariant sn >= (2);\nloop invariant sn >= (2*x);\nloop invariant sn <= (2*x);\nloop invariant sn >= 0;\nloop invariant 0 <= x <= 1000000;\nloop invariant 0 <= sn <= 2000000;\nloop invariant 0 <= sn <= x*(2);\nloop invariant x <= 1000000;\nloop invariant sn >= (2);\nloop invariant sn >= (2*x);\nloop invariant sn <= (2*x);\nloop invariant sn >= 0;\nloop invariant 0 <= x <= 1000000;\nloop invariant 0 <= sn <= 2000000;\nloop invariant 0 <= sn <= x*(2);\nloop invariant x <= 1000000;\nloop invariant sn >= (2);\nloop invariant sn >= (2*x);\nloop invariant sn <= (2*x);\nloop invariant sn >= 0;\nloop invariant 0 <= x <= 1000000;\nloop invariant 0 <= sn <= 2000000;\nloop invariant 0 <= sn <= x*(2);\nloop invariant x <= 1000000;\nloop invariant sn >= (2);\nloop invariant sn >= (2*x);\nloop invariant sn <= (2*x);\nloop invariant sn >= 0;\nloop invariant 0 <= x <= 1000000;\nloop invariant 0 <= sn <= 2000000;\nloop invariant 0 <= sn <= x*(2);\nloop invariant x <= 1000000;\nloop invariant sn >= (2);\nloop invariant sn >= (2*x);\nloop invariant sn <= (2*x);\nloop invariant sn >= 0;\nloop invariant 0 <= x <= 1000000;\nloop invariant 0 <= sn <= 2000000;\nloop invariant 0 <= sn <= x*(2);\nloop invariant x <= 1000000;\nloop invariant sn >= (2);\nloop invariant sn >= (2*x);\nloop invariant sn <= (2*x);\nloop invariant sn >= 0;\nloop invariant 0 <= x <= 1000000;\nloop invariant 0 <= sn <= 2000000;\nloop invariant 0 <= sn <= x*(2);\nloop invariant x <= 1000000;\nloop invariant sn >= (2);\nloop invariant sn >= (2*x);\nloop invariant sn <= (2*x);\nloop invariant sn >= 0;\nloop invariant 0 <= x <= 1000000;\nloop invariant 0 <= sn <= 2000000;\nloop invariant 0 <= sn <= x*(2);\nloop invariant x <= 1000000;\nloop invariant sn >= (2);\nloop invariant sn >= (2*x);\nloop invariant sn <= (2*x);\nloop invariant sn >= 0;\nloop invariant 0 <= x <= 1000000;\nloop invariant 0 <= sn <= 2000000;\nloop invariant 0 <= sn <= x*(2);\nloop invariant x <= 1000000;\nloop invariant sn >= (2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(){\n  int  sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int  x=0;\n  /*@\nloop invariant i1: 0 <= sn <= 2000000;\nloop invariant i2: 0 <= sn <= x*(2);\nloop invariant i3: x <= 1000000;\n\nloop invariant i5: sn >= (2*x);\nloop invariant i6: sn <= (2*x);\nloop invariant i7: sn >= 0;\nloop invariant i8: 0 <= x <= 1000000;\n*/\nwhile(x < 1000000){\n    sn = sn +(2);\n    x++;\n    {;\n//@ assert(sn==x*(2)|| sn == 0);\n}\n\n  }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 1000000;\nloop invariant sn >= 2*(x-1);\nloop invariant sn <= 2*x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(){\n  int  sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int  x=0;\n  /*@\nloop invariant i1: 0 <= x <= 1000000;\nloop invariant i2: sn >= 2*(x-1);\nloop invariant i3: sn <= 2*x;\n*/\nwhile(x < 1000000){\n    sn = sn +(2);\n    x++;\n    {;\n//@ assert(sn==x*(2)|| sn == 0);\n}\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 1000000;\nloop invariant 0 <= sn <= 2*x;\nloop invariant sn == x*(2) || sn == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(){\n  int  sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int  x=0;\n  /*@\nloop invariant i1: 0 <= x <= 1000000;\nloop invariant i2: 0 <= sn <= 2*x;\nloop invariant i3: sn == x*(2) || sn == 0;\n*/\nwhile(x < 1000000){\n    sn = sn +(2);\n    x++;\n    {;\n//@ assert(sn==x*(2)|| sn == 0);\n}\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 1000000;\nloop invariant sn >= 0;\nloop invariant sn <= 2*x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(){\n  int  sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int  x=0;\n  /*@\nloop invariant i1: 0 <= x <= 1000000;\nloop invariant i2: sn >= 0;\nloop invariant i3: sn <= 2*x;\n*/\nwhile(x < 1000000){\n    sn = sn +(2);\n    x++;\n    {;\n//@ assert(sn==x*(2)|| sn == 0);\n}\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 1000000;\nloop invariant sn == x*(2) || sn == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(){\n  int  sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int  x=0;\n  /*@\nloop invariant i1: 0 <= x <= 1000000;\nloop invariant i2: sn == x*(2) || sn == 0;\n*/\nwhile(x < 1000000){\n    sn = sn +(2);\n    x++;\n    {;\n//@ assert(sn==x*(2)|| sn == 0);\n}\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= sn <= 2 * 1000000;\nloop invariant sn == x * 2;\nloop invariant 0 <= x <= 1000000;\nloop invariant x == sn / 2;\nloop invariant sn >= x * 2;\nloop invariant sn <= 2 * 1000000;\nloop invariant x <= 1000000;\nloop invariant sn == 0;\nloop invariant x == 0;\nloop invariant sn == 0 || x == 0;\nloop invariant sn == 0 || x == 0 || sn == x * 2;\nloop invariant sn == 0 || x == 0 || sn == x * 2 || sn == 2 * 1000000;\nloop invariant sn == 0 || x == 0 || sn == x * 2 || sn == 2 * 1000000 || sn <= 2 * 1000000;\nloop invariant sn == 0 || x == 0 || sn == x * 2 || sn == 2 * 1000000 || sn <= 2 * 1000000 || x <= 1000000;\nloop invariant sn == 0 || x == 0 || sn == x * 2 || sn == 2 * 1000000 || sn <= 2 * 1000000 || x <= 1000000 || sn >= x * 2;\nloop invariant sn == 0 || x == 0 || sn == x * 2 || sn == 2 * 1000000 || sn <= 2 * 1000000 || x <= 1000000 || sn >= x * 2 || sn == 0;\nloop invariant sn == 0 || x == 0 || sn == x * 2 || sn == 2 * 1000000 || sn <= 2 * 1000000 || x <= 1000000 || sn >= x * 2 || sn == 0 || x == 0;\nloop invariant sn == 0 || x == 0 || sn == x * 2 || sn == 2 * 1000000 || sn <= 2 * 1000000 || x <= 1000000 || sn >= x * 2 || sn == 0 || x == 0 || sn == x * 2;\nloop invariant sn == 0 || x == 0 || sn == x * 2 || sn == 2 * 1000000 || sn <= 2 * 1000000 || x <= 1000000 || sn >= x * 2 || sn == 0 || x == 0 || sn == x * 2 || sn == 2 * 1000000;\nloop invariant sn == 0 || x == 0 || sn == x * 2 || sn == 2 * 1000000 || sn <= 2 * 1000000 || x <= 1000000 || sn >= x * 2 || sn == 0 || x == 0 || sn == x * 2 || sn == 2 * 1000000 || sn <= 2 * 1000000;\nloop invariant sn == 0 || x == 0 || sn == x * 2 || sn == 2 * 1000000 || sn <= 2 * 1000000 || x <= 1000000 || sn >= x * 2 || sn == 0 || x == 0 || sn == x * 2 || sn == 2 * 1000000 || sn <= 2 * 1000000 || x <= 1000000;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(){\n  int  sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int  x=0;\n  /*@\nloop invariant i1: 0 <= sn <= 2 * 1000000;\nloop invariant i2: sn == x * 2;\nloop invariant i3: 0 <= x <= 1000000;\nloop invariant i4: x == sn / 2;\nloop invariant i5: sn >= x * 2;\nloop invariant i6: sn <= 2 * 1000000;\nloop invariant i7: x <= 1000000;\n\n\n\nloop invariant i11: sn == 0 || x == 0 || sn == x * 2;\nloop invariant i12: sn == 0 || x == 0 || sn == x * 2 || sn == 2 * 1000000;\nloop invariant i13: sn == 0 || x == 0 || sn == x * 2 || sn == 2 * 1000000 || sn <= 2 * 1000000;\nloop invariant i14: sn == 0 || x == 0 || sn == x * 2 || sn == 2 * 1000000 || sn <= 2 * 1000000 || x <= 1000000;\nloop invariant i15: sn == 0 || x == 0 || sn == x * 2 || sn == 2 * 1000000 || sn <= 2 * 1000000 || x <= 1000000 || sn >= x * 2;\nloop invariant i16: sn == 0 || x == 0 || sn == x * 2 || sn == 2 * 1000000 || sn <= 2 * 1000000 || x <= 1000000 || sn >= x * 2 || sn == 0;\nloop invariant i17: sn == 0 || x == 0 || sn == x * 2 || sn == 2 * 1000000 || sn <= 2 * 1000000 || x <= 1000000 || sn >= x * 2 || sn == 0 || x == 0;\nloop invariant i18: sn == 0 || x == 0 || sn == x * 2 || sn == 2 * 1000000 || sn <= 2 * 1000000 || x <= 1000000 || sn >= x * 2 || sn == 0 || x == 0 || sn == x * 2;\nloop invariant i19: sn == 0 || x == 0 || sn == x * 2 || sn == 2 * 1000000 || sn <= 2 * 1000000 || x <= 1000000 || sn >= x * 2 || sn == 0 || x == 0 || sn == x * 2 || sn == 2 * 1000000;\nloop invariant i20: sn == 0 || x == 0 || sn == x * 2 || sn == 2 * 1000000 || sn <= 2 * 1000000 || x <= 1000000 || sn >= x * 2 || sn == 0 || x == 0 || sn == x * 2 || sn == 2 * 1000000 || sn <= 2 * 1000000;\nloop invariant i21: sn == 0 || x == 0 || sn == x * 2 || sn == 2 * 1000000 || sn <= 2 * 1000000 || x <= 1000000 || sn >= x * 2 || sn == 0 || x == 0 || sn == x * 2 || sn == 2 * 1000000 || sn <= 2 * 1000000 || x <= 1000000;\n*/\nwhile(x < 1000000){\n    sn = sn +(2);\n    x++;\n    {;\n//@ assert(sn==x*(2)|| sn == 0);\n}\n\n  }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant sn == 0 || sn == 2 * x;loop invariant x <= 1000000;loop invariant x >= 0;loop invariant sn >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(){\n  int  sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int  x=0;\n  /*@\nloop invariant i1: sn == 0 || sn == 2 * x;loop invariant x <= 1000000;loop invariant x >= 0;loop invariant sn >= 0;\n*/\nwhile(x < 1000000){\n    sn = sn +(2);\n    x++;\n    {;\n//@ assert(sn==x*(2)|| sn == 0);\n}\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 1000000;\nloop invariant sn == x * 2;\nloop invariant sn == 0 || sn == 2 * x;\nloop invariant x <= 1000000;\nloop invariant sn == x * 2 || sn == 0;\nloop invariant 0 <= x <= 1000000;\nloop invariant sn == x * 2;\nloop invariant sn == 0 || sn == 2 * x;\nloop invariant x <= 1000000;\nloop invariant sn == x * 2 || sn == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(){\n  int  sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int  x=0;\n  /*@\nloop invariant i1: 0 <= x <= 1000000;\nloop invariant i2: sn == x * 2;\nloop invariant i3: sn == 0 || sn == 2 * x;\nloop invariant i4: x <= 1000000;\nloop invariant i5: sn == x * 2 || sn == 0;\n*/\nwhile(x < 1000000){\n    sn = sn +(2);\n    x++;\n    {;\n//@ assert(sn==x*(2)|| sn == 0);\n}\n\n  }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= 1000000;\nloop invariant sn == x * 2;\nloop invariant sn >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(){\n  int  sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int  x=0;\n  /*@\n\nloop invariant i2: sn == x * 2;\nloop invariant i3: sn >= 0;\n*/\nwhile(x < 1000000){\n    sn = sn +(2);\n    x++;\n    {;\n//@ assert(sn==x*(2)|| sn == 0);\n}\n\n  }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 1000000;\nloop invariant sn == x * 2;\nloop invariant 0 <= x <= 1000000;\nloop invariant sn == x * 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(){\n  int  sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int  x=0;\n  /*@\nloop invariant i1: 0 <= x <= 1000000;\nloop invariant i2: sn == x * 2;\n*/\nwhile(x < 1000000){\n    sn = sn +(2);\n    x++;\n    {;\n//@ assert(sn==x*(2)|| sn == 0);\n}\n\n  }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant sn == (2 * x);\nloop invariant x <= 1000000;\nloop invariant sn <= (2 * 1000000);\nloop invariant 0 <= sn <= (2 * 1000000);\nloop invariant 0 <= x <= 1000000;\nloop invariant x == (sn / 2);\nloop invariant sn == (x * 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(){\n  int  sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int  x=0;\n  /*@\nloop invariant i1: sn == (2 * x);\nloop invariant i2: x <= 1000000;\nloop invariant i3: sn <= (2 * 1000000);\nloop invariant i4: 0 <= sn <= (2 * 1000000);\nloop invariant i5: 0 <= x <= 1000000;\nloop invariant i6: x == (sn / 2);\nloop invariant i7: sn == (x * 2);\n*/\nwhile(x < 1000000){\n    sn = sn +(2);\n    x++;\n    {;\n//@ assert(sn==x*(2)|| sn == 0);\n}\n\n  }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 1000000;\nloop invariant sn >= 0;\nloop invariant sn >= x*2;\nloop invariant sn <= x*2 + 2*(x-1);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(){\n  int  sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int  x=0;\n  /*@\nloop invariant i1: 0 <= x <= 1000000;\nloop invariant i2: sn >= 0;\nloop invariant i3: sn >= x*2;\n\n*/\nwhile(x < 1000000){\n    sn = sn +(2);\n    x++;\n    {;\n//@ assert(sn==x*(2)|| sn == 0);\n}\n\n  }\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 30: unbound logic variable i1. Ignoring loop annotation",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(){\n  int  sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int  x=0;\n  /*@\nloop invariant i1: 0 <= x <= 1000000;\nloop invariant i2: sn == x * 2 || sn == 0;\nloop invariant i3: x <= loop1 || x == 0;\nloop invariant i4: sn <= x * 2 || sn == 0;\nloop invariant i5: sn + (2) == x * 2 || sn == 0;\nloop invariant i6: sn + (2) == x * 2 || sn == 0 && x <= loop1;\nloop invariant i7: sn + (2) == x * 2 || sn == 0 && x <= loop1 && sn <= x * 2;\nloop invariant i8: sn + (2) == x * 2 || sn == 0 && x <= loop1 && sn <= x * 2 && x <= n1;\nloop invariant i9: sn + (2) == x * 2 || sn == 0 && x <= loop1 && sn <= x * 2 && x <= n1 && sn <= n1 * 2;\nloop invariant i10: sn + (2) == x * 2 || sn == 0 && x <= loop1 && sn <= x * 2 && x <= n1 && sn <= n1 * 2 && sn >= 0;\nloop invariant i11: sn + (2) == x * 2 || sn == 0 && x <= loop1 && sn <= x * 2 && x <= n1 && sn <= n1 * 2 && sn >= 0 && sn <= 2000000;\nloop invariant i12: sn + (2) == x * 2 || sn == 0 && x <= loop1 && sn <= x * 2 && x <= n1 && sn <= n1 * 2 && sn >= 0 && sn <= 2000000 && x <= 1000000;\nloop invariant i13: sn + (2) == x * 2 || sn == 0 && x <= loop1 && sn <= x * 2 && x <= n1 && sn <= n1 * 2 && sn >= 0 && sn <= 2000000 && x <= 1000000 && sn <= 2000000;\nloop invariant i14: sn + (2) == x * 2 || sn == 0 && x <= loop1 && sn <= x * 2 && x <= n1 && sn <= n1 * 2 && sn >= 0 && sn <= 2000000 && x <= 1000000 && sn <= 2000000 && x == 1000000;\nloop invariant i15: sn + (2) == x * 2 || sn == 0 && x <= loop1 && sn <= x * 2 && x <= n1 && sn <= n1 * 2 && sn >= 0 && sn <= 2000000 && x <= 1000000 && sn <= 2000000 && x == 1000000 && sn == 2000000;\nloop invariant i16: sn >= x * 2 || sn == 0;\nloop invariant i17: i1;\nloop invariant i18: i2;\nloop invariant i19: i1 ==> i2;\nloop invariant i20: 0 <= sn <= 2000000;\nloop invariant i21: 0 <= sn <= x*(2);\nloop invariant i22: x <= 1000000;\nloop invariant i23: sn >= (2);\nloop invariant i24: sn >= (2*x);\nloop invariant i25: sn <= (2*x);\nloop invariant i26: sn >= 0;\nloop invariant i27: sn >= 2*(x-1);\nloop invariant i28: sn <= 2*x;\nloop invariant i29: 0 <= sn <= 2*x;\nloop invariant i30: sn == x*(2) || sn == 0;\nloop invariant i31: 0 <= sn <= 2 * 1000000;\nloop invariant i32: sn == x * 2;\nloop invariant i33: x == sn / 2;\nloop invariant i34: sn >= x * 2;\nloop invariant i35: sn <= 2 * 1000000;\nloop invariant i36: sn == 0;\nloop invariant i37: x == 0;\nloop invariant i38: sn == 0 || x == 0;\nloop invariant i39: sn == 0 || x == 0 || sn == x * 2;\nloop invariant i40: sn == 0 || x == 0 || sn == x * 2 || sn == 2 * 1000000;\nloop invariant i41: sn == 0 || x == 0 || sn == x * 2 || sn == 2 * 1000000 || sn <= 2 * 1000000;\nloop invariant i42: sn == 0 || x == 0 || sn == x * 2 || sn == 2 * 1000000 || sn <= 2 * 1000000 || x <= 1000000;\nloop invariant i43: sn == 0 || x == 0 || sn == x * 2 || sn == 2 * 1000000 || sn <= 2 * 1000000 || x <= 1000000 || sn >= x * 2;\nloop invariant i44: sn == 0 || x == 0 || sn == x * 2 || sn == 2 * 1000000 || sn <= 2 * 1000000 || x <= 1000000 || sn >= x * 2 || sn == 0;\nloop invariant i45: sn == 0 || x == 0 || sn == x * 2 || sn == 2 * 1000000 || sn <= 2 * 1000000 || x <= 1000000 || sn >= x * 2 || sn == 0 || x == 0;\nloop invariant i46: sn == 0 || x == 0 || sn == x * 2 || sn == 2 * 1000000 || sn <= 2 * 1000000 || x <= 1000000 || sn >= x * 2 || sn == 0 || x == 0 || sn == x * 2;\nloop invariant i47: sn == 0 || x == 0 || sn == x * 2 || sn == 2 * 1000000 || sn <= 2 * 1000000 || x <= 1000000 || sn >= x * 2 || sn == 0 || x == 0 || sn == x * 2 || sn == 2 * 1000000;\nloop invariant i48: sn == 0 || x == 0 || sn == x * 2 || sn == 2 * 1000000 || sn <= 2 * 1000000 || x <= 1000000 || sn >= x * 2 || sn == 0 || x == 0 || sn == x * 2 || sn == 2 * 1000000 || sn <= 2 * 1000000;\nloop invariant i49: sn == 0 || x == 0 || sn == x * 2 || sn == 2 * 1000000 || sn <= 2 * 1000000 || x <= 1000000 || sn >= x * 2 || sn == 0 || x == 0 || sn == x * 2 || sn == 2 * 1000000 || sn <= 2 * 1000000 || x <= 1000000;\nloop invariant i50: sn == 0 || sn == 2 * x;loop invariant x <= 1000000;loop invariant x >= 0;loop invariant sn >= 0;\nloop invariant i51: sn == 0 || sn == 2 * x;\nloop invariant i52: 1 <= x <= 1000000;\nloop invariant i53: sn == (2 * x);\nloop invariant i54: sn <= (2 * 1000000);\nloop invariant i55: 0 <= sn <= (2 * 1000000);\nloop invariant i56: x == (sn / 2);\nloop invariant i57: sn == (x * 2);\nloop invariant i58: sn >= x*2;\nloop invariant i59: sn <= x*2 + 2*(x-1);\n*/\nwhile(x < 1000000){\n    sn = sn +(2);\n    x++;\n    {;\n//@ assert(sn==x*(2)|| sn == 0);\n}\n\n  }\n}",
        "combined_annotation_num_solver_calls": 21,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(){\n  int  sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int  x=0;\n  /*@\nloop invariant i1: 0 <= x <= 1000000;\nloop invariant i2: sn == x * 2 || sn == 0;\n\nloop invariant i4: sn <= x * 2 || sn == 0;\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i16: sn >= x * 2 || sn == 0;\n\n\n\nloop invariant i20: 0 <= sn <= 2000000;\nloop invariant i21: 0 <= sn <= x*(2);\nloop invariant i22: x <= 1000000;\n\nloop invariant i24: sn >= (2*x);\nloop invariant i25: sn <= (2*x);\nloop invariant i26: sn >= 0;\nloop invariant i27: sn >= 2*(x-1);\nloop invariant i28: sn <= 2*x;\nloop invariant i29: 0 <= sn <= 2*x;\nloop invariant i30: sn == x*(2) || sn == 0;\nloop invariant i31: 0 <= sn <= 2 * 1000000;\nloop invariant i32: sn == x * 2;\nloop invariant i33: x == sn / 2;\nloop invariant i34: sn >= x * 2;\nloop invariant i35: sn <= 2 * 1000000;\n\n\n\nloop invariant i39: sn == 0 || x == 0 || sn == x * 2;\nloop invariant i40: sn == 0 || x == 0 || sn == x * 2 || sn == 2 * 1000000;\nloop invariant i41: sn == 0 || x == 0 || sn == x * 2 || sn == 2 * 1000000 || sn <= 2 * 1000000;\nloop invariant i42: sn == 0 || x == 0 || sn == x * 2 || sn == 2 * 1000000 || sn <= 2 * 1000000 || x <= 1000000;\nloop invariant i43: sn == 0 || x == 0 || sn == x * 2 || sn == 2 * 1000000 || sn <= 2 * 1000000 || x <= 1000000 || sn >= x * 2;\nloop invariant i44: sn == 0 || x == 0 || sn == x * 2 || sn == 2 * 1000000 || sn <= 2 * 1000000 || x <= 1000000 || sn >= x * 2 || sn == 0;\nloop invariant i45: sn == 0 || x == 0 || sn == x * 2 || sn == 2 * 1000000 || sn <= 2 * 1000000 || x <= 1000000 || sn >= x * 2 || sn == 0 || x == 0;\nloop invariant i46: sn == 0 || x == 0 || sn == x * 2 || sn == 2 * 1000000 || sn <= 2 * 1000000 || x <= 1000000 || sn >= x * 2 || sn == 0 || x == 0 || sn == x * 2;\nloop invariant i47: sn == 0 || x == 0 || sn == x * 2 || sn == 2 * 1000000 || sn <= 2 * 1000000 || x <= 1000000 || sn >= x * 2 || sn == 0 || x == 0 || sn == x * 2 || sn == 2 * 1000000;\nloop invariant i48: sn == 0 || x == 0 || sn == x * 2 || sn == 2 * 1000000 || sn <= 2 * 1000000 || x <= 1000000 || sn >= x * 2 || sn == 0 || x == 0 || sn == x * 2 || sn == 2 * 1000000 || sn <= 2 * 1000000;\nloop invariant i49: sn == 0 || x == 0 || sn == x * 2 || sn == 2 * 1000000 || sn <= 2 * 1000000 || x <= 1000000 || sn >= x * 2 || sn == 0 || x == 0 || sn == x * 2 || sn == 2 * 1000000 || sn <= 2 * 1000000 || x <= 1000000;\nloop invariant i50: sn == 0 || sn == 2 * x;loop invariant x <= 1000000;loop invariant x >= 0;loop invariant sn >= 0;\nloop invariant i51: sn == 0 || sn == 2 * x;\n\nloop invariant i53: sn == (2 * x);\nloop invariant i54: sn <= (2 * 1000000);\nloop invariant i55: 0 <= sn <= (2 * 1000000);\nloop invariant i56: x == (sn / 2);\nloop invariant i57: sn == (x * 2);\nloop invariant i58: sn >= x*2;\n\n*/\nwhile(x < 1000000){\n    sn = sn +(2);\n    x++;\n    {;\n//@ assert(sn==x*(2)|| sn == 0);\n}\n\n  }\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/split.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c"
        ],
        "skipped": [],
        "total": 63,
        "success_count": 53,
        "failure_count": 10,
        "success_rate": 0.8412698412698413
    }
}