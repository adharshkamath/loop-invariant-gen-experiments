{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(int n){\n  int i, a, b;\n  int TRACER_NONDET;\n\n  if(n >=0){\n\n    i=0; a=0; b=0;\n\n    while (i < n){\n      if (TRACER_NONDET){\n a=a+1;\n b=b+2;\n      }\n      else{\n a=a+2;\n b=b+1;\n      }\n      i++;\n    }\n    {;\n//@ assert(!( a+b != 3*n ));\n}\n\n  }\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= 2*i + a;\nloop invariant b <= 2*i + b;\nloop invariant a + b <= 3*i + a + b;\nloop invariant a + b <= 3*n;\nloop invariant a + b == 3*n ==> i == n;\nloop invariant a + b != 3*n ==> i < n;\nloop invariant a + b != 3*n ==> (TRACER_NONDET) ==> a == 1 && b == 2;\nloop invariant a + b != 3*n ==> (!(TRACER_NONDET)) ==> a == 2 && b == 1;\nloop invariant a + b != 3*n ==> (TRACER_NONDET) ==> a >= 1 && b >= 2 && a <= i+1 && b <= 2*i+2;\nloop invariant a + b != 3*n ==> (!(TRACER_NONDET)) ==> a >= 2 && b >= 1 && a <= 2*i+2 && b <= i+1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 3*n;\nloop invariant 0 <= b <= 3*n;\nloop invariant a + b <= 3*n;\nloop invariant a <= b;\n*/\n```",
            "```\n/*@\nloop invariant max(a,b) <= 3*n;\nloop invariant min(a,b) >= n;\nloop invariant a >= b;\nloop invariant i <= n;\nloop invariant a*n <= a+b <= a*n+2;\nloop invariant b*n <= a+b <= b*n+2;\nloop invariant a == n or b == n;\nloop invariant i == n or a+b == 3*n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= a <= 2*n;\nloop invariant 0 <= b <= 2*n;\nloop invariant a + b >= 3*n;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant a + b == 3*n ==> i == n;\nloop invariant a + b < 3*n ==> i < n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a + b = 2*i;\nloop invariant a >= b;\nloop invariant a <= 2*n;\nloop invariant b <= n;\nloop invariant a + b <= 3*n;\nloop invariant a >= i;\nloop invariant b >= i;\nloop invariant a + b >= 3*i;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 2*n;\nloop invariant 0 <= b <= 2*n;\nloop invariant a + b <= 3*n;\nloop invariant a <= 2*i;\nloop invariant b <= 2*i;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 2*n;\nloop invariant 0 <= b <= 2*n;\nloop invariant TRACER_NONDET ==> i == n;\nloop invariant !TRACER_NONDET ==> i == n;\nloop invariant TRACER_NONDET ==> a == n;\nloop invariant !TRACER_NONDET ==> a == 2*n;\nloop invariant TRACER_NONDET ==> b == 2*n;\nloop invariant !TRACER_NONDET ==> b == n;\nloop invariant TRACER_NONDET ==> i <= n;\nloop invariant !TRACER_NONDET ==> i <= n;\nloop invariant TRACER_NONDET ==> a <= 2*n;\nloop invariant !TRACER_NONDET ==> a <= 2*n;\nloop invariant TRACER_NONDET ==> b <= 2*n;\nloop invariant !TRACER_NONDET ==> b <= 2*n;\nloop invariant TRACER_NONDET ==> i >= 0;\nloop invariant !TRACER_NONDET ==> i >= 0;\nloop invariant TRACER_NONDET ==> a >= 0;\nloop invariant !TRACER_NONDET ==> a >= 0;\nloop invariant TRACER_NONDET ==> b >= 0;\nloop invariant !TRACER_NONDET ==> b >= 0;\nloop invariant TRACER_NONDET ==> i <= a;\nloop invariant !TRACER_NONDET ==> a <= i;\nloop invariant TRACER_NONDET ==> i <= b;\nloop invariant !TRACER_NONDET ==> b <= i;\nloop invariant TRACER_NONDET ==> a <= 2*n;\nloop invariant !TRACER_NONDET ==> 2*n <= a;\nloop invariant TRACER_NONDET ==> b <= 2*n;\nloop invariant !TRACER_NONDET ==> 2*n <= b;\nloop invariant TRACER_NONDET ==> i <= n;\nloop invariant !TRACER_NONDET ==> n <= i;\nloop invariant TRACER_NONDET ==> a <= 2*n;\nloop invariant !TRACER_NONDET ==> 2*n <= a;\nloop invariant TRACER_NONDET ==> b <= 2*n;\nloop invariant !TRACER_NONDET ==> 2*n <= b;\nloop invariant TRACER_NONDET ==> i <= n;\nloop invariant !TRACER_NONDET ==> n <= i;\nloop invariant TRACER_NONDET ==> a <= 2*n;\nloop invariant !TRACER_NONDET ==> 2*n <= a;\nloop invariant TRACER_NONDET ==> b <= 2*n;\nloop invariant !TRACER_NONDET ==> 2*n <= b;\nloop invariant TRACER_NONDET ==> i <= n;\nloop invariant !TRACER_NONDET ==> n <= i;\nloop invariant TRACER_NONDET ==> a <= 2*n;\nloop invariant !TRACER_NONDET ==> 2*n <= a;\nloop invariant TRACER_NONDET ==> b <= 2*n;\nloop invariant !TRACER_NONDET ==> 2*n <= b;\nloop invariant TRACER_NONDET ==> i <= n;\nloop invariant !TRACER_NONDET ==> n <= i;\nloop invariant TRACER_NONDET ==> a <= 2*n;\nloop invariant !TRACER_NONDET ==> 2*n <= a;\nloop invariant TRACER_NONDET ==> b <= 2*n;\nloop invariant !TRACER_NONDET ==> 2*n <= b;\nloop invariant TRACER_NONDET ==> i <= n;\nloop invariant !TRACER_NONDET ==> n <= i;\nloop invariant TRACER_NONDET ==> a <= 2*n;\nloop invariant !TRACER_NONDET ==> 2*n <= a;\nloop invariant TRACER_NONDET ==> b <= 2*n;\nloop invariant !TRACER_NONDET ==> 2*n <= b;\nloop invariant TRACER_NONDET ==> i <= n;\nloop invariant !TRACER_NONDET ==> n <= i;\nloop invariant TRACER_NONDET ==> a <= 2*n;\nloop invariant !TRACER_NONDET ==> 2*n <= a;\nloop invariant TRACER_NONDET ==> b <= 2*n;\nloop invariant !TRACER_NONDET ==> 2*n <= b;\nloop invariant TRACER_NONDET ==> i <= n;\nloop invariant !TRACER_NONDET ==> n <= i;\nloop invariant TRACER_NONDET ==> a <= 2*n;\nloop invariant !TRACER_NONDET ==> 2*n <= a;\nloop invariant TRACER_NONDET ==> b <= 2*n;\nloop invariant !TRACER_NONDET ==> 2*n <= b;\nloop invariant TRACER_NONDET ==> i <= n;\nloop invariant !TRACER_NONDET ==> n <= i;\n*/\n```",
            "```\n/*@\nloop invariant - ( i <= n && i >= 0 );\nloop invariant - ( a + b == n );\nloop invariant - ( a >= 0 && a <= 2*n );\nloop invariant - ( b >= 0 && b <= 2*n );\nloop invariant - ( a + b == 3*n );\nloop invariant - ( a >= 0 && a <= 3*n );\nloop invariant - ( b >= 0 && b <= 3*n );\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 2*n;\nloop invariant 0 <= b <= 2*n;\nloop invariant a + b == 3*n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a >= b;\nloop invariant a <= 2*n;\nloop invariant b <= 2*n;\nloop invariant (TRACER_NONDET ==> a >= 2*n + i);\nloop invariant (TRACER_NONDET ==> b >= n + i);\nloop invariant (!TRACER_NONDET ==> a >= n + i);\nloop invariant (!TRACER_NONDET ==> b >= 2*n + i);\nloop invariant (TRACER_NONDET ==> a <= 2*TRACER_NONDET*n + 2*i);\nloop invariant (TRACER_NONDET ==> b <= 2*i);\nloop invariant (!TRACER_NONDET ==> a <= 2*i);\nloop invariant (!TRACER_NONDET ==> b <= 2*TRACER_NONDET*n + 2*i);\nloop invariant (TRACER_NONDET ==> a + b >= 3*n + i);\nloop invariant (!TRACER_NONDET ==> a + b >= 3*n + i);\nloop invariant (i < n ==> (TRACER_NONDET ==> a + b >= 3*n));\nloop invariant (i < n ==> (!TRACER_NONDET ==> a + b >= 3*n));\nloop invariant (i < n ==> (TRACER_NONDET ==> a + b <= 3*n));\nloop invariant (i < n ==> (!TRACER_NONDET ==> a + b <= 3*n));\nloop invariant (i == n ==> a + b == 3*n);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 2*n;\nloop invariant 0 <= b <= 2*n;\nloop invariant a + b <= 3*n;\nloop invariant (TRACER_NONDET ==> a == a + 1 && b == b + 2);\nloop invariant (!TRACER_NONDET ==> a == a + 2 && b == b + 1);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= 2*n;\nloop invariant b <= 2*n;\nloop invariant a + b >= 0;\nloop invariant a + b <= 6*n;\nloop invariant (a+b) % 3 == 0;\nloop invariant i <= n ==> a <= 2*i;\nloop invariant i <= n ==> b <= 2*i;\nloop invariant i <= n ==> a >= 2*i - 2*n;\nloop invariant i <= n ==> b >= 2*i - 2*n;\nloop invariant i <= n ==> a + b >= 3*i - 2*n;\nloop invariant i <= n ==> a + b <= 3*i + 2*n;\nloop invariant i <= n ==> (a+b) % 3 == 0;\nloop invariant i < n ==> a + b != 3*n;\nloop invariant i = n ==> a + b == 3*n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 2*n;\nloop invariant 0 <= b <= 2*n;\nloop invariant a + b <= 3*n;\nloop invariant (TRACER_NONDET ==> a >= b) && (!TRACER_NONDET ==> a <= b);\nloop invariant (TRACER_NONDET ==> b >= a) && (!TRACER_NONDET ==> b <= a);\nloop invariant (TRACER_NONDET ==> a >= 0) && (!TRACER_NONDET ==> a >= 0);\nloop invariant (TRACER_NONDET ==> b >= 0) && (!TRACER_NONDET ==> b >= 0);\nloop invariant (TRACER_NONDET ==> a <= 2*n) && (!TRACER_NONDET ==> a <= 2*n);\nloop invariant (TRACER_NONDET ==> b <= 2*n) && (!TRACER_NONDET ==> b <= 2*n);\nloop invariant (TRACER_NONDET ==> a <= b) && (!TRACER_NONDET ==> a <= b);\nloop invariant (TRACER_NONDET ==> b <= a) && (!TRACER_NONDET ==> b <= a);\nloop invariant (TRACER_NONDET ==> a >= 0) && (!TRACER_NONDET ==> a >= 0);\nloop invariant (TRACER_NONDET ==> b >= 0) && (!TRACER_NONDET ==> b >= 0);\nloop invariant (TRACER_NONDET ==> a <= 2*n) && (!TRACER_NONDET ==> a <= 2*n);\nloop invariant (TRACER_NONDET ==> b <= 2*n) && (!TRACER_NONDET ==> b <= 2*n);\nloop invariant (TRACER_NONDET ==> a <= b) && (!TRACER_NONDET ==> a <= b);\nloop invariant (TRACER_NONDET ==> b <= a) && (!TRACER_NONDET ==> b <= a);\nloop invariant (TRACER_NONDET ==> a >= 0) && (!TRACER_NONDET ==> a >= 0);\nloop invariant (TRACER_NONDET ==> b >= 0) && (!TRACER_NONDET ==> b >= 0);\nloop invariant (TRACER_NONDET ==> a <= 2*n) && (!TRACER_NONDET ==> a <= 2*n);\nloop invariant (TRACER_NONDET ==> b <= 2*n) && (!TRACER_NONDET ==> b <= 2*n);\nloop invariant (TRACER_NONDET ==> a <= b) && (!TRACER_NONDET ==> a <= b);\nloop invariant (TRACER_NONDET ==> b <= a) && (!TRACER_NONDET ==> b <= a);\nloop invariant (TRACER_NONDET ==> a >= 0) && (!TRACER_NONDET ==> a >= 0);\nloop invariant (TRACER_NONDET ==> b >= 0) && (!TRACER_NONDET ==> b >= 0);\nloop invariant (TRACER_NONDET ==> a <= 2*n) && (!TRACER_NONDET ==> a <= 2*n);\nloop invariant (TRACER_NONDET ==> b <= 2*n) && (!TRACER_NONDET ==> b <= 2*n);\nloop invariant (TRACER_NONDET ==> a <= b) && (!TRACER_NONDET ==> a <= b);\nloop invariant (TRACER_NONDET ==> b <= a) && (!TRACER_NONDET ==> b <= a);\nloop invariant (TRACER_NONDET ==> a >= 0) && (!TRACER_NONDET ==> a >= 0);\nloop invariant (TRACER_NONDET ==> b >= 0) && (!TRACER_NONDET ==> b >= 0);\nloop invariant (TRACER_NONDET ==> a <= 2*n) && (!TRACER_NONDET ==> a <= 2*n);\nloop invariant (TRACER_NONDET ==> b <= 2*n) && (!TRACER_NONDET ==> b <= 2*n);\nloop invariant (TRACER_NONDET ==> a <= b) && (!TRACER_NONDET ==> a <= b);\nloop invariant (TRACER_NONDET ==> b <= a) && (!TRACER_NONDET ==> b <= a);\nloop invariant (TRACER_NONDET ==> a >= 0) && (!TRACER_NONDET ==> a >= 0);\nloop invariant (TRACER_NONDET ==> b >= 0) && (!TRACER_NONDET ==> b >= 0);\nloop invariant (TRACER_NONDET ==> a <= 2*n) && (!TRACER_NONDET ==> a <= 2*n);\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 2*n;\nloop invariant 0 <= b <= 3*n;\nloop invariant a + b == 3*i;\nloop invariant (TRACER_NONDET == 1 ==> a == i + (i*(i-1))/2);\nloop invariant (TRACER_NONDET == 0 ==> b == i + (i*(i-1))/2);\nloop invariant (TRACER_NONDET == 1 ==> b == 2*i);\nloop invariant (TRACER_NONDET == 0 ==> a == 2*i);\nloop invariant (i == n ==> !(TRACER_NONDET == 1));\nloop invariant (i == n ==> !(TRACER_NONDET == 0));\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= 2*i + a;\nloop invariant b <= 2*i + b;\nloop invariant a + b <= 3*i + a + b;\nloop invariant a + b <= 3*n;\nloop invariant a + b == 3*n ==> i == n;\nloop invariant a + b != 3*n ==> i < n;\nloop invariant a + b != 3*n ==> (TRACER_NONDET) ==> a == 1 && b == 2;\nloop invariant a + b != 3*n ==> (!(TRACER_NONDET)) ==> a == 2 && b == 1;\nloop invariant a + b != 3*n ==> (TRACER_NONDET) ==> a >= 1 && b >= 2 && a <= i+1 && b <= 2*i+2;\nloop invariant a + b != 3*n ==> (!(TRACER_NONDET)) ==> a >= 2 && b >= 1 && a <= 2*i+2 && b <= i+1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(int n){\n  int i, a, b;\n  int TRACER_NONDET;\n\n  if(n >=0){\n\n    i=0; a=0; b=0;\n\n    /*@\nloop invariant i1: i >= 0;\nloop invariant i2: i <= n;\nloop invariant i3: a >= 0;\nloop invariant i4: b >= 0;\nloop invariant i5: a <= 2*i + a;\nloop invariant i6: b <= 2*i + b;\nloop invariant i7: a + b <= 3*i + a + b;\n\n\n\n\n\n\n\n*/\nwhile (i < n){\n      if (TRACER_NONDET){\n a=a+1;\n b=b+2;\n      }\n      else{\n a=a+2;\n b=b+1;\n      }\n      i++;\n    }\n    {;\n//@ assert(!( a+b != 3*n ));\n}\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 3*n;\nloop invariant 0 <= b <= 3*n;\nloop invariant a + b <= 3*n;\nloop invariant a <= b;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(int n){\n  int i, a, b;\n  int TRACER_NONDET;\n\n  if(n >=0){\n\n    i=0; a=0; b=0;\n\n    /*@\nloop invariant i1: 0 <= i <= n;\n\n\n\n\n*/\nwhile (i < n){\n      if (TRACER_NONDET){\n a=a+1;\n b=b+2;\n      }\n      else{\n a=a+2;\n b=b+1;\n      }\n      i++;\n    }\n    {;\n//@ assert(!( a+b != 3*n ));\n}\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant max(a,b) <= 3*n;\nloop invariant min(a,b) >= n;\nloop invariant a >= b;\nloop invariant i <= n;\nloop invariant a*n <= a+b <= a*n+2;\nloop invariant b*n <= a+b <= b*n+2;\nloop invariant a == n or b == n;\nloop invariant i == n or a+b == 3*n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(int n){\n  int i, a, b;\n  int TRACER_NONDET;\n\n  if(n >=0){\n\n    i=0; a=0; b=0;\n\n    /*@\n\n\n\nloop invariant i4: i <= n;\n\n\n\n\n*/\nwhile (i < n){\n      if (TRACER_NONDET){\n a=a+1;\n b=b+2;\n      }\n      else{\n a=a+2;\n b=b+1;\n      }\n      i++;\n    }\n    {;\n//@ assert(!( a+b != 3*n ));\n}\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= a <= 2*n;\nloop invariant 0 <= b <= 2*n;\nloop invariant a + b >= 3*n;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant a + b == 3*n ==> i == n;\nloop invariant a + b < 3*n ==> i < n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(int n){\n  int i, a, b;\n  int TRACER_NONDET;\n\n  if(n >=0){\n\n    i=0; a=0; b=0;\n\n    /*@\n\n\n\nloop invariant i4: i >= 0;\nloop invariant i5: i <= n;\n\n\n*/\nwhile (i < n){\n      if (TRACER_NONDET){\n a=a+1;\n b=b+2;\n      }\n      else{\n a=a+2;\n b=b+1;\n      }\n      i++;\n    }\n    {;\n//@ assert(!( a+b != 3*n ));\n}\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a + b = 2*i;\nloop invariant a >= b;\nloop invariant a <= 2*n;\nloop invariant b <= n;\nloop invariant a + b <= 3*n;\nloop invariant a >= i;\nloop invariant b >= i;\nloop invariant a + b >= 3*i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(int n){\n  int i, a, b;\n  int TRACER_NONDET;\n\n  if(n >=0){\n\n    i=0; a=0; b=0;\n\n    /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: a >= 0;\nloop invariant i3: b >= 0;\n\n\n\n\n\nloop invariant i9: a >= i;\nloop invariant i10: b >= i;\nloop invariant i11: a + b >= 3*i;\n*/\nwhile (i < n){\n      if (TRACER_NONDET){\n a=a+1;\n b=b+2;\n      }\n      else{\n a=a+2;\n b=b+1;\n      }\n      i++;\n    }\n    {;\n//@ assert(!( a+b != 3*n ));\n}\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 2*n;\nloop invariant 0 <= b <= 2*n;\nloop invariant a + b <= 3*n;\nloop invariant a <= 2*i;\nloop invariant b <= 2*i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(int n){\n  int i, a, b;\n  int TRACER_NONDET;\n\n  if(n >=0){\n\n    i=0; a=0; b=0;\n\n    /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= a <= 2*n;\nloop invariant i3: 0 <= b <= 2*n;\n\nloop invariant i5: a <= 2*i;\nloop invariant i6: b <= 2*i;\n*/\nwhile (i < n){\n      if (TRACER_NONDET){\n a=a+1;\n b=b+2;\n      }\n      else{\n a=a+2;\n b=b+1;\n      }\n      i++;\n    }\n    {;\n//@ assert(!( a+b != 3*n ));\n}\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 9,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 2*n;\nloop invariant 0 <= b <= 2*n;\nloop invariant TRACER_NONDET ==> i == n;\nloop invariant !TRACER_NONDET ==> i == n;\nloop invariant TRACER_NONDET ==> a == n;\nloop invariant !TRACER_NONDET ==> a == 2*n;\nloop invariant TRACER_NONDET ==> b == 2*n;\nloop invariant !TRACER_NONDET ==> b == n;\nloop invariant TRACER_NONDET ==> i <= n;\nloop invariant !TRACER_NONDET ==> i <= n;\nloop invariant TRACER_NONDET ==> a <= 2*n;\nloop invariant !TRACER_NONDET ==> a <= 2*n;\nloop invariant TRACER_NONDET ==> b <= 2*n;\nloop invariant !TRACER_NONDET ==> b <= 2*n;\nloop invariant TRACER_NONDET ==> i >= 0;\nloop invariant !TRACER_NONDET ==> i >= 0;\nloop invariant TRACER_NONDET ==> a >= 0;\nloop invariant !TRACER_NONDET ==> a >= 0;\nloop invariant TRACER_NONDET ==> b >= 0;\nloop invariant !TRACER_NONDET ==> b >= 0;\nloop invariant TRACER_NONDET ==> i <= a;\nloop invariant !TRACER_NONDET ==> a <= i;\nloop invariant TRACER_NONDET ==> i <= b;\nloop invariant !TRACER_NONDET ==> b <= i;\nloop invariant TRACER_NONDET ==> a <= 2*n;\nloop invariant !TRACER_NONDET ==> 2*n <= a;\nloop invariant TRACER_NONDET ==> b <= 2*n;\nloop invariant !TRACER_NONDET ==> 2*n <= b;\nloop invariant TRACER_NONDET ==> i <= n;\nloop invariant !TRACER_NONDET ==> n <= i;\nloop invariant TRACER_NONDET ==> a <= 2*n;\nloop invariant !TRACER_NONDET ==> 2*n <= a;\nloop invariant TRACER_NONDET ==> b <= 2*n;\nloop invariant !TRACER_NONDET ==> 2*n <= b;\nloop invariant TRACER_NONDET ==> i <= n;\nloop invariant !TRACER_NONDET ==> n <= i;\nloop invariant TRACER_NONDET ==> a <= 2*n;\nloop invariant !TRACER_NONDET ==> 2*n <= a;\nloop invariant TRACER_NONDET ==> b <= 2*n;\nloop invariant !TRACER_NONDET ==> 2*n <= b;\nloop invariant TRACER_NONDET ==> i <= n;\nloop invariant !TRACER_NONDET ==> n <= i;\nloop invariant TRACER_NONDET ==> a <= 2*n;\nloop invariant !TRACER_NONDET ==> 2*n <= a;\nloop invariant TRACER_NONDET ==> b <= 2*n;\nloop invariant !TRACER_NONDET ==> 2*n <= b;\nloop invariant TRACER_NONDET ==> i <= n;\nloop invariant !TRACER_NONDET ==> n <= i;\nloop invariant TRACER_NONDET ==> a <= 2*n;\nloop invariant !TRACER_NONDET ==> 2*n <= a;\nloop invariant TRACER_NONDET ==> b <= 2*n;\nloop invariant !TRACER_NONDET ==> 2*n <= b;\nloop invariant TRACER_NONDET ==> i <= n;\nloop invariant !TRACER_NONDET ==> n <= i;\nloop invariant TRACER_NONDET ==> a <= 2*n;\nloop invariant !TRACER_NONDET ==> 2*n <= a;\nloop invariant TRACER_NONDET ==> b <= 2*n;\nloop invariant !TRACER_NONDET ==> 2*n <= b;\nloop invariant TRACER_NONDET ==> i <= n;\nloop invariant !TRACER_NONDET ==> n <= i;\nloop invariant TRACER_NONDET ==> a <= 2*n;\nloop invariant !TRACER_NONDET ==> 2*n <= a;\nloop invariant TRACER_NONDET ==> b <= 2*n;\nloop invariant !TRACER_NONDET ==> 2*n <= b;\nloop invariant TRACER_NONDET ==> i <= n;\nloop invariant !TRACER_NONDET ==> n <= i;\nloop invariant TRACER_NONDET ==> a <= 2*n;\nloop invariant !TRACER_NONDET ==> 2*n <= a;\nloop invariant TRACER_NONDET ==> b <= 2*n;\nloop invariant !TRACER_NONDET ==> 2*n <= b;\nloop invariant TRACER_NONDET ==> i <= n;\nloop invariant !TRACER_NONDET ==> n <= i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(int n){\n  int i, a, b;\n  int TRACER_NONDET;\n\n  if(n >=0){\n\n    i=0; a=0; b=0;\n\n    /*@\nloop invariant i1: 0 <= i <= n;\n\n\n\n\n\n\n\n\nloop invariant i10: TRACER_NONDET ==> i <= n;\nloop invariant i11: !TRACER_NONDET ==> i <= n;\n\n\n\nloop invariant i15: !TRACER_NONDET ==> b <= 2*n;\nloop invariant i16: TRACER_NONDET ==> i >= 0;\nloop invariant i17: !TRACER_NONDET ==> i >= 0;\nloop invariant i18: TRACER_NONDET ==> a >= 0;\nloop invariant i19: !TRACER_NONDET ==> a >= 0;\nloop invariant i20: TRACER_NONDET ==> b >= 0;\nloop invariant i21: !TRACER_NONDET ==> b >= 0;\nloop invariant i22: TRACER_NONDET ==> i <= a;\n\nloop invariant i24: TRACER_NONDET ==> i <= b;\nloop invariant i25: !TRACER_NONDET ==> b <= i;\n\n\n\n*/\nwhile (i < n){\n      if (TRACER_NONDET){\n a=a+1;\n b=b+2;\n      }\n      else{\n a=a+2;\n b=b+1;\n      }\n      i++;\n    }\n    {;\n//@ assert(!( a+b != 3*n ));\n}\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant - ( i <= n && i >= 0 );\nloop invariant - ( a + b == n );\nloop invariant - ( a >= 0 && a <= 2*n );\nloop invariant - ( b >= 0 && b <= 2*n );\nloop invariant - ( a + b == 3*n );\nloop invariant - ( a >= 0 && a <= 3*n );\nloop invariant - ( b >= 0 && b <= 3*n );\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(int n){\n  int i, a, b;\n  int TRACER_NONDET;\n\n  if(n >=0){\n\n    i=0; a=0; b=0;\n\n    /*@\n\n\n\n\n\n\n\n*/\nwhile (i < n){\n      if (TRACER_NONDET){\n a=a+1;\n b=b+2;\n      }\n      else{\n a=a+2;\n b=b+1;\n      }\n      i++;\n    }\n    {;\n//@ assert(!( a+b != 3*n ));\n}\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 2*n;\nloop invariant 0 <= b <= 2*n;\nloop invariant a + b == 3*n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(int n){\n  int i, a, b;\n  int TRACER_NONDET;\n\n  if(n >=0){\n\n    i=0; a=0; b=0;\n\n    /*@\nloop invariant i1: 0 <= i <= n;\n\n\n\n*/\nwhile (i < n){\n      if (TRACER_NONDET){\n a=a+1;\n b=b+2;\n      }\n      else{\n a=a+2;\n b=b+1;\n      }\n      i++;\n    }\n    {;\n//@ assert(!( a+b != 3*n ));\n}\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a >= b;\nloop invariant a <= 2*n;\nloop invariant b <= 2*n;\nloop invariant (TRACER_NONDET ==> a >= 2*n + i);\nloop invariant (TRACER_NONDET ==> b >= n + i);\nloop invariant (!TRACER_NONDET ==> a >= n + i);\nloop invariant (!TRACER_NONDET ==> b >= 2*n + i);\nloop invariant (TRACER_NONDET ==> a <= 2*TRACER_NONDET*n + 2*i);\nloop invariant (TRACER_NONDET ==> b <= 2*i);\nloop invariant (!TRACER_NONDET ==> a <= 2*i);\nloop invariant (!TRACER_NONDET ==> b <= 2*TRACER_NONDET*n + 2*i);\nloop invariant (TRACER_NONDET ==> a + b >= 3*n + i);\nloop invariant (!TRACER_NONDET ==> a + b >= 3*n + i);\nloop invariant (i < n ==> (TRACER_NONDET ==> a + b >= 3*n));\nloop invariant (i < n ==> (!TRACER_NONDET ==> a + b >= 3*n));\nloop invariant (i < n ==> (TRACER_NONDET ==> a + b <= 3*n));\nloop invariant (i < n ==> (!TRACER_NONDET ==> a + b <= 3*n));\nloop invariant (i == n ==> a + b == 3*n);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(int n){\n  int i, a, b;\n  int TRACER_NONDET;\n\n  if(n >=0){\n\n    i=0; a=0; b=0;\n\n    /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: a >= 0;\nloop invariant i3: b >= 0;\n\n\nloop invariant i6: b <= 2*n;\n\n\n\n\n\nloop invariant i12: (TRACER_NONDET ==> b <= 2*i);\nloop invariant i13: (!TRACER_NONDET ==> a <= 2*i);\nloop invariant i14: (!TRACER_NONDET ==> b <= 2*TRACER_NONDET*n + 2*i);\n\n\n\n\n\n\n\n*/\nwhile (i < n){\n      if (TRACER_NONDET){\n a=a+1;\n b=b+2;\n      }\n      else{\n a=a+2;\n b=b+1;\n      }\n      i++;\n    }\n    {;\n//@ assert(!( a+b != 3*n ));\n}\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 2*n;\nloop invariant 0 <= b <= 2*n;\nloop invariant a + b <= 3*n;\nloop invariant (TRACER_NONDET ==> a == a + 1 && b == b + 2);\nloop invariant (!TRACER_NONDET ==> a == a + 2 && b == b + 1);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(int n){\n  int i, a, b;\n  int TRACER_NONDET;\n\n  if(n >=0){\n\n    i=0; a=0; b=0;\n\n    /*@\nloop invariant i1: 0 <= i <= n;\n\n\n\n\n\n*/\nwhile (i < n){\n      if (TRACER_NONDET){\n a=a+1;\n b=b+2;\n      }\n      else{\n a=a+2;\n b=b+1;\n      }\n      i++;\n    }\n    {;\n//@ assert(!( a+b != 3*n ));\n}\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= 2*n;\nloop invariant b <= 2*n;\nloop invariant a + b >= 0;\nloop invariant a + b <= 6*n;\nloop invariant (a+b) % 3 == 0;\nloop invariant i <= n ==> a <= 2*i;\nloop invariant i <= n ==> b <= 2*i;\nloop invariant i <= n ==> a >= 2*i - 2*n;\nloop invariant i <= n ==> b >= 2*i - 2*n;\nloop invariant i <= n ==> a + b >= 3*i - 2*n;\nloop invariant i <= n ==> a + b <= 3*i + 2*n;\nloop invariant i <= n ==> (a+b) % 3 == 0;\nloop invariant i < n ==> a + b != 3*n;\nloop invariant i = n ==> a + b == 3*n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(int n){\n  int i, a, b;\n  int TRACER_NONDET;\n\n  if(n >=0){\n\n    i=0; a=0; b=0;\n\n    /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: a >= 0;\nloop invariant i3: b >= 0;\nloop invariant i4: a <= 2*n;\nloop invariant i5: b <= 2*n;\nloop invariant i6: a + b >= 0;\nloop invariant i7: a + b <= 6*n;\nloop invariant i8: (a+b) % 3 == 0;\nloop invariant i9: i <= n ==> a <= 2*i;\nloop invariant i10: i <= n ==> b <= 2*i;\nloop invariant i11: i <= n ==> a >= 2*i - 2*n;\nloop invariant i12: i <= n ==> b >= 2*i - 2*n;\nloop invariant i13: i <= n ==> a + b >= 3*i - 2*n;\nloop invariant i14: i <= n ==> a + b <= 3*i + 2*n;\nloop invariant i15: i <= n ==> (a+b) % 3 == 0;\n\n\n*/\nwhile (i < n){\n      if (TRACER_NONDET){\n a=a+1;\n b=b+2;\n      }\n      else{\n a=a+2;\n b=b+1;\n      }\n      i++;\n    }\n    {;\n//@ assert(!( a+b != 3*n ));\n}\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 2*n;\nloop invariant 0 <= b <= 2*n;\nloop invariant a + b <= 3*n;\nloop invariant (TRACER_NONDET ==> a >= b) && (!TRACER_NONDET ==> a <= b);\nloop invariant (TRACER_NONDET ==> b >= a) && (!TRACER_NONDET ==> b <= a);\nloop invariant (TRACER_NONDET ==> a >= 0) && (!TRACER_NONDET ==> a >= 0);\nloop invariant (TRACER_NONDET ==> b >= 0) && (!TRACER_NONDET ==> b >= 0);\nloop invariant (TRACER_NONDET ==> a <= 2*n) && (!TRACER_NONDET ==> a <= 2*n);\nloop invariant (TRACER_NONDET ==> b <= 2*n) && (!TRACER_NONDET ==> b <= 2*n);\nloop invariant (TRACER_NONDET ==> a <= b) && (!TRACER_NONDET ==> a <= b);\nloop invariant (TRACER_NONDET ==> b <= a) && (!TRACER_NONDET ==> b <= a);\nloop invariant (TRACER_NONDET ==> a >= 0) && (!TRACER_NONDET ==> a >= 0);\nloop invariant (TRACER_NONDET ==> b >= 0) && (!TRACER_NONDET ==> b >= 0);\nloop invariant (TRACER_NONDET ==> a <= 2*n) && (!TRACER_NONDET ==> a <= 2*n);\nloop invariant (TRACER_NONDET ==> b <= 2*n) && (!TRACER_NONDET ==> b <= 2*n);\nloop invariant (TRACER_NONDET ==> a <= b) && (!TRACER_NONDET ==> a <= b);\nloop invariant (TRACER_NONDET ==> b <= a) && (!TRACER_NONDET ==> b <= a);\nloop invariant (TRACER_NONDET ==> a >= 0) && (!TRACER_NONDET ==> a >= 0);\nloop invariant (TRACER_NONDET ==> b >= 0) && (!TRACER_NONDET ==> b >= 0);\nloop invariant (TRACER_NONDET ==> a <= 2*n) && (!TRACER_NONDET ==> a <= 2*n);\nloop invariant (TRACER_NONDET ==> b <= 2*n) && (!TRACER_NONDET ==> b <= 2*n);\nloop invariant (TRACER_NONDET ==> a <= b) && (!TRACER_NONDET ==> a <= b);\nloop invariant (TRACER_NONDET ==> b <= a) && (!TRACER_NONDET ==> b <= a);\nloop invariant (TRACER_NONDET ==> a >= 0) && (!TRACER_NONDET ==> a >= 0);\nloop invariant (TRACER_NONDET ==> b >= 0) && (!TRACER_NONDET ==> b >= 0);\nloop invariant (TRACER_NONDET ==> a <= 2*n) && (!TRACER_NONDET ==> a <= 2*n);\nloop invariant (TRACER_NONDET ==> b <= 2*n) && (!TRACER_NONDET ==> b <= 2*n);\nloop invariant (TRACER_NONDET ==> a <= b) && (!TRACER_NONDET ==> a <= b);\nloop invariant (TRACER_NONDET ==> b <= a) && (!TRACER_NONDET ==> b <= a);\nloop invariant (TRACER_NONDET ==> a >= 0) && (!TRACER_NONDET ==> a >= 0);\nloop invariant (TRACER_NONDET ==> b >= 0) && (!TRACER_NONDET ==> b >= 0);\nloop invariant (TRACER_NONDET ==> a <= 2*n) && (!TRACER_NONDET ==> a <= 2*n);\nloop invariant (TRACER_NONDET ==> b <= 2*n) && (!TRACER_NONDET ==> b <= 2*n);\nloop invariant (TRACER_NONDET ==> a <= b) && (!TRACER_NONDET ==> a <= b);\nloop invariant (TRACER_NONDET ==> b <= a) && (!TRACER_NONDET ==> b <= a);\nloop invariant (TRACER_NONDET ==> a >= 0) && (!TRACER_NONDET ==> a >= 0);\nloop invariant (TRACER_NONDET ==> b >= 0) && (!TRACER_NONDET ==> b >= 0);\nloop invariant (TRACER_NONDET ==> a <= 2*n) && (!TRACER_NONDET ==> a <= 2*n);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(int n){\n  int i, a, b;\n  int TRACER_NONDET;\n\n  if(n >=0){\n\n    i=0; a=0; b=0;\n\n    /*@\nloop invariant i1: 0 <= i <= n;\n\n\n\n\nloop invariant i6: (TRACER_NONDET ==> b >= a) && (!TRACER_NONDET ==> b <= a);\nloop invariant i7: (TRACER_NONDET ==> a >= 0) && (!TRACER_NONDET ==> a >= 0);\nloop invariant i8: (TRACER_NONDET ==> b >= 0) && (!TRACER_NONDET ==> b >= 0);\n\n\n\n\n*/\nwhile (i < n){\n      if (TRACER_NONDET){\n a=a+1;\n b=b+2;\n      }\n      else{\n a=a+2;\n b=b+1;\n      }\n      i++;\n    }\n    {;\n//@ assert(!( a+b != 3*n ));\n}\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(int n){\n  int i, a, b;\n  int TRACER_NONDET;\n\n  if(n >=0){\n\n    i=0; a=0; b=0;\n\n    /*@\n\n*/\nwhile (i < n){\n      if (TRACER_NONDET){\n a=a+1;\n b=b+2;\n      }\n      else{\n a=a+2;\n b=b+1;\n      }\n      i++;\n    }\n    {;\n//@ assert(!( a+b != 3*n ));\n}\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 2*n;\nloop invariant 0 <= b <= 3*n;\nloop invariant a + b == 3*i;\nloop invariant (TRACER_NONDET == 1 ==> a == i + (i*(i-1))/2);\nloop invariant (TRACER_NONDET == 0 ==> b == i + (i*(i-1))/2);\nloop invariant (TRACER_NONDET == 1 ==> b == 2*i);\nloop invariant (TRACER_NONDET == 0 ==> a == 2*i);\nloop invariant (i == n ==> !(TRACER_NONDET == 1));\nloop invariant (i == n ==> !(TRACER_NONDET == 0));\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(int n){\n  int i, a, b;\n  int TRACER_NONDET;\n\n  if(n >=0){\n\n    i=0; a=0; b=0;\n\n    /*@\nloop invariant i1: 0 <= i <= n;\n\n\nloop invariant i4: a + b == 3*i;\n\n\nloop invariant i7: (TRACER_NONDET == 1 ==> b == 2*i);\nloop invariant i8: (TRACER_NONDET == 0 ==> a == 2*i);\n\n\n*/\nwhile (i < n){\n      if (TRACER_NONDET){\n a=a+1;\n b=b+2;\n      }\n      else{\n a=a+2;\n b=b+1;\n      }\n      i++;\n    }\n    {;\n//@ assert(!( a+b != 3*n ));\n}\n\n  }\n}",
                "checker_output_after_prune": true
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 40: unexpected token 'or'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(int n){\n  int i, a, b;\n  int TRACER_NONDET;\n\n  if(n >=0){\n\n    i=0; a=0; b=0;\n\n    /*@\nloop invariant i1: i >= 0;\nloop invariant i2: i <= n;\nloop invariant i3: a >= 0;\nloop invariant i4: b >= 0;\nloop invariant i5: a <= 2*i + a;\nloop invariant i6: b <= 2*i + b;\nloop invariant i7: a + b <= 3*i + a + b;\nloop invariant i8: a + b <= 3*n;\nloop invariant i9: a + b == 3*n ==> i == n;\nloop invariant i10: a + b != 3*n ==> i < n;\nloop invariant i11: a + b != 3*n ==> (TRACER_NONDET) ==> a == 1 && b == 2;\nloop invariant i12: a + b != 3*n ==> (!(TRACER_NONDET)) ==> a == 2 && b == 1;\nloop invariant i13: a + b != 3*n ==> (TRACER_NONDET) ==> a >= 1 && b >= 2 && a <= i+1 && b <= 2*i+2;\nloop invariant i14: a + b != 3*n ==> (!(TRACER_NONDET)) ==> a >= 2 && b >= 1 && a <= 2*i+2 && b <= i+1;\nloop invariant i15: 0 <= i <= n;\nloop invariant i16: 0 <= a <= 3*n;\nloop invariant i17: 0 <= b <= 3*n;\nloop invariant i18: a <= b;\nloop invariant i19: max(a,b) <= 3*n;\nloop invariant i20: min(a,b) >= n;\nloop invariant i21: a >= b;\nloop invariant i22: a*n <= a+b <= a*n+2;\nloop invariant i23: b*n <= a+b <= b*n+2;\nloop invariant i24: a == n or b == n;\nloop invariant i25: i == n or a+b == 3*n;\nloop invariant i26: 0 <= a <= 2*n;\nloop invariant i27: 0 <= b <= 2*n;\nloop invariant i28: a + b >= 3*n;\nloop invariant i29: a + b < 3*n ==> i < n;\nloop invariant i30: a + b = 2*i;\nloop invariant i31: a <= 2*n;\nloop invariant i32: b <= n;\nloop invariant i33: a >= i;\nloop invariant i34: b >= i;\nloop invariant i35: a + b >= 3*i;\nloop invariant i36: a <= 2*i;\nloop invariant i37: b <= 2*i;\nloop invariant i38: TRACER_NONDET ==> i == n;\nloop invariant i39: !TRACER_NONDET ==> i == n;\nloop invariant i40: TRACER_NONDET ==> a == n;\nloop invariant i41: !TRACER_NONDET ==> a == 2*n;\nloop invariant i42: TRACER_NONDET ==> b == 2*n;\nloop invariant i43: !TRACER_NONDET ==> b == n;\nloop invariant i44: TRACER_NONDET ==> i <= n;\nloop invariant i45: !TRACER_NONDET ==> i <= n;\nloop invariant i46: TRACER_NONDET ==> a <= 2*n;\nloop invariant i47: !TRACER_NONDET ==> a <= 2*n;\nloop invariant i48: TRACER_NONDET ==> b <= 2*n;\nloop invariant i49: !TRACER_NONDET ==> b <= 2*n;\nloop invariant i50: TRACER_NONDET ==> i >= 0;\nloop invariant i51: !TRACER_NONDET ==> i >= 0;\nloop invariant i52: TRACER_NONDET ==> a >= 0;\nloop invariant i53: !TRACER_NONDET ==> a >= 0;\nloop invariant i54: TRACER_NONDET ==> b >= 0;\nloop invariant i55: !TRACER_NONDET ==> b >= 0;\nloop invariant i56: TRACER_NONDET ==> i <= a;\nloop invariant i57: !TRACER_NONDET ==> a <= i;\nloop invariant i58: TRACER_NONDET ==> i <= b;\nloop invariant i59: !TRACER_NONDET ==> b <= i;\nloop invariant i60: !TRACER_NONDET ==> 2*n <= a;\nloop invariant i61: !TRACER_NONDET ==> 2*n <= b;\nloop invariant i62: !TRACER_NONDET ==> n <= i;\nloop invariant i63: - ( i <= n && i >= 0 );\nloop invariant i64: - ( a + b == n );\nloop invariant i65: - ( a >= 0 && a <= 2*n );\nloop invariant i66: - ( b >= 0 && b <= 2*n );\nloop invariant i67: - ( a + b == 3*n );\nloop invariant i68: - ( a >= 0 && a <= 3*n );\nloop invariant i69: - ( b >= 0 && b <= 3*n );\nloop invariant i70: a + b == 3*n;\nloop invariant i71: b <= 2*n;\nloop invariant i72: (TRACER_NONDET ==> a >= 2*n + i);\nloop invariant i73: (TRACER_NONDET ==> b >= n + i);\nloop invariant i74: (!TRACER_NONDET ==> a >= n + i);\nloop invariant i75: (!TRACER_NONDET ==> b >= 2*n + i);\nloop invariant i76: (TRACER_NONDET ==> a <= 2*TRACER_NONDET*n + 2*i);\nloop invariant i77: (TRACER_NONDET ==> b <= 2*i);\nloop invariant i78: (!TRACER_NONDET ==> a <= 2*i);\nloop invariant i79: (!TRACER_NONDET ==> b <= 2*TRACER_NONDET*n + 2*i);\nloop invariant i80: (TRACER_NONDET ==> a + b >= 3*n + i);\nloop invariant i81: (!TRACER_NONDET ==> a + b >= 3*n + i);\nloop invariant i82: (i < n ==> (TRACER_NONDET ==> a + b >= 3*n));\nloop invariant i83: (i < n ==> (!TRACER_NONDET ==> a + b >= 3*n));\nloop invariant i84: (i < n ==> (TRACER_NONDET ==> a + b <= 3*n));\nloop invariant i85: (i < n ==> (!TRACER_NONDET ==> a + b <= 3*n));\nloop invariant i86: (i == n ==> a + b == 3*n);\nloop invariant i87: (TRACER_NONDET ==> a == a + 1 && b == b + 2);\nloop invariant i88: (!TRACER_NONDET ==> a == a + 2 && b == b + 1);\nloop invariant i89: a + b >= 0;\nloop invariant i90: a + b <= 6*n;\nloop invariant i91: (a+b) % 3 == 0;\nloop invariant i92: i <= n ==> a <= 2*i;\nloop invariant i93: i <= n ==> b <= 2*i;\nloop invariant i94: i <= n ==> a >= 2*i - 2*n;\nloop invariant i95: i <= n ==> b >= 2*i - 2*n;\nloop invariant i96: i <= n ==> a + b >= 3*i - 2*n;\nloop invariant i97: i <= n ==> a + b <= 3*i + 2*n;\nloop invariant i98: i <= n ==> (a+b) % 3 == 0;\nloop invariant i99: i < n ==> a + b != 3*n;\nloop invariant i100: i = n ==> a + b == 3*n;\nloop invariant i101: (TRACER_NONDET ==> a >= b) && (!TRACER_NONDET ==> a <= b);\nloop invariant i102: (TRACER_NONDET ==> b >= a) && (!TRACER_NONDET ==> b <= a);\nloop invariant i103: (TRACER_NONDET ==> a >= 0) && (!TRACER_NONDET ==> a >= 0);\nloop invariant i104: (TRACER_NONDET ==> b >= 0) && (!TRACER_NONDET ==> b >= 0);\nloop invariant i105: (TRACER_NONDET ==> a <= 2*n) && (!TRACER_NONDET ==> a <= 2*n);\nloop invariant i106: (TRACER_NONDET ==> b <= 2*n) && (!TRACER_NONDET ==> b <= 2*n);\nloop invariant i107: (TRACER_NONDET ==> a <= b) && (!TRACER_NONDET ==> a <= b);\nloop invariant i108: (TRACER_NONDET ==> b <= a) && (!TRACER_NONDET ==> b <= a);\nloop invariant i109: a + b == 3*i;\nloop invariant i110: (TRACER_NONDET == 1 ==> a == i + (i*(i-1))/2);\nloop invariant i111: (TRACER_NONDET == 0 ==> b == i + (i*(i-1))/2);\nloop invariant i112: (TRACER_NONDET == 1 ==> b == 2*i);\nloop invariant i113: (TRACER_NONDET == 0 ==> a == 2*i);\nloop invariant i114: (i == n ==> !(TRACER_NONDET == 1));\nloop invariant i115: (i == n ==> !(TRACER_NONDET == 0));\n*/\nwhile (i < n){\n      if (TRACER_NONDET){\n a=a+1;\n b=b+2;\n      }\n      else{\n a=a+2;\n b=b+1;\n      }\n      i++;\n    }\n    {;\n//@ assert(!( a+b != 3*n ));\n}\n\n  }\n}",
        "combined_annotation_num_solver_calls": 31,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(int n){\n  int i, a, b;\n  int TRACER_NONDET;\n\n  if(n >=0){\n\n    i=0; a=0; b=0;\n\n    /*@\nloop invariant i1: i >= 0;\nloop invariant i2: i <= n;\nloop invariant i3: a >= 0;\nloop invariant i4: b >= 0;\nloop invariant i5: a <= 2*i + a;\nloop invariant i6: b <= 2*i + b;\nloop invariant i7: a + b <= 3*i + a + b;\nloop invariant i8: a + b <= 3*n;\nloop invariant i9: a + b == 3*n ==> i == n;\nloop invariant i10: a + b != 3*n ==> i < n;\n\n\n\n\nloop invariant i15: 0 <= i <= n;\nloop invariant i16: 0 <= a <= 3*n;\nloop invariant i17: 0 <= b <= 3*n;\n\n\n\n\n\n\n\n\nloop invariant i26: 0 <= a <= 2*n;\nloop invariant i27: 0 <= b <= 2*n;\n\nloop invariant i29: a + b < 3*n ==> i < n;\n\nloop invariant i31: a <= 2*n;\n\nloop invariant i33: a >= i;\nloop invariant i34: b >= i;\nloop invariant i35: a + b >= 3*i;\nloop invariant i36: a <= 2*i;\nloop invariant i37: b <= 2*i;\n\n\n\n\n\n\nloop invariant i44: TRACER_NONDET ==> i <= n;\nloop invariant i45: !TRACER_NONDET ==> i <= n;\nloop invariant i46: TRACER_NONDET ==> a <= 2*n;\nloop invariant i47: !TRACER_NONDET ==> a <= 2*n;\nloop invariant i48: TRACER_NONDET ==> b <= 2*n;\nloop invariant i49: !TRACER_NONDET ==> b <= 2*n;\nloop invariant i50: TRACER_NONDET ==> i >= 0;\nloop invariant i51: !TRACER_NONDET ==> i >= 0;\nloop invariant i52: TRACER_NONDET ==> a >= 0;\nloop invariant i53: !TRACER_NONDET ==> a >= 0;\nloop invariant i54: TRACER_NONDET ==> b >= 0;\nloop invariant i55: !TRACER_NONDET ==> b >= 0;\nloop invariant i56: TRACER_NONDET ==> i <= a;\n\nloop invariant i58: TRACER_NONDET ==> i <= b;\nloop invariant i59: !TRACER_NONDET ==> b <= i;\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i71: b <= 2*n;\n\n\n\n\n\nloop invariant i77: (TRACER_NONDET ==> b <= 2*i);\nloop invariant i78: (!TRACER_NONDET ==> a <= 2*i);\nloop invariant i79: (!TRACER_NONDET ==> b <= 2*TRACER_NONDET*n + 2*i);\n\n\n\n\nloop invariant i84: (i < n ==> (TRACER_NONDET ==> a + b <= 3*n));\nloop invariant i85: (i < n ==> (!TRACER_NONDET ==> a + b <= 3*n));\nloop invariant i86: (i == n ==> a + b == 3*n);\n\n\nloop invariant i89: a + b >= 0;\nloop invariant i90: a + b <= 6*n;\nloop invariant i91: (a+b) % 3 == 0;\nloop invariant i92: i <= n ==> a <= 2*i;\nloop invariant i93: i <= n ==> b <= 2*i;\nloop invariant i94: i <= n ==> a >= 2*i - 2*n;\nloop invariant i95: i <= n ==> b >= 2*i - 2*n;\nloop invariant i96: i <= n ==> a + b >= 3*i - 2*n;\nloop invariant i97: i <= n ==> a + b <= 3*i + 2*n;\nloop invariant i98: i <= n ==> (a+b) % 3 == 0;\nloop invariant i99: i < n ==> a + b != 3*n;\n\n\nloop invariant i102: (TRACER_NONDET ==> b >= a) && (!TRACER_NONDET ==> b <= a);\nloop invariant i103: (TRACER_NONDET ==> a >= 0) && (!TRACER_NONDET ==> a >= 0);\nloop invariant i104: (TRACER_NONDET ==> b >= 0) && (!TRACER_NONDET ==> b >= 0);\nloop invariant i105: (TRACER_NONDET ==> a <= 2*n) && (!TRACER_NONDET ==> a <= 2*n);\nloop invariant i106: (TRACER_NONDET ==> b <= 2*n) && (!TRACER_NONDET ==> b <= 2*n);\n\n\nloop invariant i109: a + b == 3*i;\n\n\nloop invariant i112: (TRACER_NONDET == 1 ==> b == 2*i);\nloop invariant i113: (TRACER_NONDET == 0 ==> a == 2*i);\n\n\n*/\nwhile (i < n){\n      if (TRACER_NONDET){\n a=a+1;\n b=b+2;\n      }\n      else{\n a=a+2;\n b=b+1;\n      }\n      i++;\n    }\n    {;\n//@ assert(!( a+b != 3*n ));\n}\n\n  }\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c"
        ],
        "skipped": [],
        "total": 9,
        "success_count": 8,
        "failure_count": 1,
        "success_rate": 0.8888888888888888
    }
}