{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(){\n\n  int NONDET;\n  int i,N;\n  int a;\n  int x;\n\n  x=0;\n  i=0;\n\n  if (NONDET > 0) a=1; else a=2;\n\n  while (i<N){\n    i=i+1;\n  }\n\n  {;\n//@ assert(!( x >0 ));\n}\n\nreturn;\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= i <= N;\nloop invariant x == 0;\nloop invariant a in {1, 2};\nloop invariant NONDET in {0, 1};\nloop invariant NONDET > 0 ==> a == 1;\nloop invariant NONDET <= 0 ==> a == 2;\nloop invariant i == N ==> x == 0;\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= N;\nloop invariant a == (if NONDET > 0 then 1 else 2);\nloop invariant x == (if i == 0 then 0 else x + a * i);\nloop invariant x == (if i == 0 then 0 else a * (i * (i + 1) / 2));\nloop invariant x == (if i == 0 then 0 else a * (i * (i + 1) / 2) + a * i);\nloop invariant x == (if i == 0 then 0 else a * (i * (i + 1) / 2 + i));\nloop invariant x == (if i == 0 then 0 else a * (i * (i + 1) / 2 + i));\nloop invariant x == (if i == 0 then 0 else a * (i * (i + 1) / 2 + i));\nloop invariant x == (if i == 0 then 0 else a * (i * (i + 1) / 2 + i));\nloop invariant x == (if i == 0 then 0 else a * (i * (i + 1) / 2 + i));\nloop invariant x == (if i == 0 then 0 else a * (i * (i + 1) / 2 + i));\nloop invariant x == (if i == 0 then 0 else a * (i * (i + 1) / 2 + i));\nloop invariant x == (if i == 0 then 0 else a * (i * (i + 1) / 2 + i));\nloop invariant x == (if i == 0 then 0 else a * (i * (i + 1) / 2 + i));\nloop invariant x == (if i == 0 then 0 else a * (i * (i + 1) / 2 + i));\nloop invariant x == (if i == 0 then 0 else a * (i * (i + 1) / 2 + i));\nloop invariant x == (if i == 0 then 0 else a * (i * (i + 1) / 2 + i));\nloop invariant x == (if i == 0 then 0 else a * (i * (i + 1) / 2 + i));\nloop invariant x == (if i == 0 then 0 else a * (i * (i + 1) / 2 + i));\nloop invariant x == (if i == 0 then 0 else a * (i * (i + 1) / 2 + i));\nloop invariant x == (if i == 0 then 0 else a * (i * (i + 1) / 2 + i));\nloop invariant x == (if i == 0 then 0 else a * (i * (i + 1) / 2 + i));\nloop invariant x == (if i == 0 then 0 else a * (i * (i + 1) / 2 + i));\nloop invariant x == (if i == 0 then 0 else a * (i * (i + 1) / 2 + i));\nloop invariant x == (if i == 0 then 0 else a * (i * (i + 1) / 2 + i));\nloop invariant x == (if i == 0 then 0 else a * (i * (i + 1) / 2 + i));\nloop invariant x == (if i == 0 then 0 else a * (i * (i + 1) / 2 + i));\nloop invariant x == (if i == 0 then 0 else a * (i * (i + 1) / 2 + i));\nloop invariant x == (if i == 0 then 0 else a * (i * (i + 1) / 2 + i));\nloop invariant x == (if i == 0 then 0 else a * (i * (i + 1) / 2 + i));\nloop invariant x == (if i == 0 then 0 else a * (i * (i + 1) / 2 + i));\nloop invariant x == (if i == 0 then 0 else a * (i * (i + 1) / 2 + i));\nloop invariant x == (if i == 0 then 0 else a * (i * (i + 1) / 2 + i));\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= N;\nloop invariant x == i*a;\nloop invariant N >= 0;\nloop invariant a == 1 ==> NONDET > 0;\nloop invariant a == 2 ==> NONDET <= 0;\nloop invariant a >= 1;\nloop invariant a <= 2;\nloop invariant i >= 0;\nloop invariant i <= N;\nloop invariant x >= 0;\nloop invariant x <= N*a;\nloop invariant x <= N+1;\nloop invariant x >= N;\nloop invariant x >= 0;\nloop invariant x <= N;\nloop invariant x == 0 ==> N == 0;\nloop invariant x == N ==> N == N;\nloop invariant x == 0 ==> a == 1;\nloop invariant x == N ==> a == 1;\nloop invariant x == 0 ==> NONDET > 0;\nloop invariant x == N ==> NONDET > 0;\nloop invariant x == 0 ==> a == 1;\nloop invariant x == N ==> a == 1;\nloop invariant x == 0 ==> i == 0;\nloop invariant x == N ==> i == N;\nloop invariant x == 0 ==> i == 0;\nloop invariant x == N ==> i == N;\nloop invariant x == 0 ==> i == 0;\nloop invariant x == N ==> i == N;\nloop invariant x == 0 ==> i == 0;\nloop invariant x == N ==> i == N;\nloop invariant x == 0 ==> i == 0;\nloop invariant x == N ==> i == N;\nloop invariant x == 0 ==> i == 0;\nloop invariant x == N ==> i == N;\nloop invariant x == 0 ==> i == 0;\nloop invariant x == N ==> i == N;\nloop invariant x == 0 ==> i == 0;\nloop invariant x == N ==> i == N;\nloop invariant x == 0 ==> i == 0;\nloop invariant x == N ==> i == N;\nloop invariant x == 0 ==> i == 0;\nloop invariant x == N ==> i == N;\nloop invariant x == 0 ==> i == 0;\nloop invariant x == N ==> i == N;\nloop invariant x == 0 ==> i == 0;\nloop invariant x == N ==> i == N;\nloop invariant x == 0 ==> i == 0;\nloop invariant x == N ==> i == N;\nloop invariant x == 0 ==> i == 0;\nloop invariant x == N ==> i == N;\nloop invariant x == 0 ==> i == 0;\nloop invariant x == N ==> i == N;\nloop invariant x == 0 ==> i == 0;\nloop invariant x == N ==> i == N;\nloop invariant x == 0 ==> i == 0;\nloop invariant x == N ==> i == N;\nloop invariant x == 0 ==> i == 0;\nloop invariant x == N ==> i == N;\nloop invariant x == 0 ==> i == 0;\nloop invariant x == N ==> i == N;\nloop invariant x == 0 ==> i == 0;\nloop invariant x == N ==> i == N;\nloop invariant x == 0 ==> i == 0;\nloop invariant x == N ==> i == N;\nloop invariant x == 0 ==> i == 0;\nloop invariant x == N ==> i == N;\nloop invariant x == 0 ==> i == 0;\nloop invariant x == N ==> i == N;\nloop invariant x == 0 ==> i == 0;\nloop invariant x == N ==> i == N;\nloop invariant x == 0 ==> i == 0;\nloop invariant x == N ==> i == N;\nloop invariant x == 0 ==> i == 0;\nloop invariant x == N ==> i == N;\nloop invariant x == 0 ==> i == 0;\nloop invariant x == N ==> i == N;\nloop invariant x == 0 ==> i == 0;\nloop invariant x == N ==> i == N;\nloop invariant x == 0 ==> i == 0;\nloop invariant x == N ==> i == N;\nloop invariant x == 0 ==> i == 0;\nloop invariant x == N ==> i == N;\nloop invariant x == 0 ==> i == 0;\nloop invariant x == N ==> i == N;\nloop invariant x == 0 ==> i == 0;\nloop invariant x == N ==> i == N;\nloop invariant x == 0 ==> i == 0;\nloop invariant x == N ==> i == N;\nloop invariant x == 0 ==> i == 0;\nloop invariant x == N ==> i == N;\nloop invariant x == 0 ==> i == 0;\nloop invariant x == N ==> i == N;\nloop invariant x == 0 ==> i == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= N;\nloop invariant x == 0;\nloop invariant 1 <= a <= 2;\nloop invariant N == 0;\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= N;\nloop invariant (i == N) ==> (x == 0);\nloop invariant (i < N) ==> (x == (a * i));\nloop invariant (i < N) ==> (i == 0 ==> a >= 1);\nloop invariant (i < N) ==> (i > 0 ==> a >= 2);\nloop invariant (i < N) ==> (i > 0 ==> a <= 2);\nloop invariant (i < N) ==> (i > 0 ==> x == (a * (i - 1)));\nloop invariant 0 <= i <= N;\nloop invariant (i == N) ==> (x == 0);\nloop invariant (i < N) ==> (x == (a * i));\nloop invariant (i < N) ==> (i == 0 ==> a >= 1);\nloop invariant (i < N) ==> (i > 0 ==> a >= 2);\nloop invariant (i < N) ==> (i > 0 ==> a <= 2);\nloop invariant (i < N) ==> (i > 0 ==> x == (a * (i - 1)));\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= N;\nloop invariant x <= 1;\nloop invariant a == 1 || a == 2;\nloop invariant i <= N ==> x == 0;\nloop invariant !(NONDET > 0) ==> x == 0;\nloop invariant (NONDET > 0) ==> a == 1 || a == 2;\nloop invariant i == N ==> x == 0;\nloop invariant i == N ==> a == 1 || a == 2;\nloop invariant i == N ==> x <= 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= N; loop invariant 0 <= a <= 2; loop invariant if (NONDET > 0) then a == 1 else a == 2; loop invariant x == 0; loop invariant i == 0; loop invariant !(x > 0); loop invariant !(a > 2); loop invariant !(a < 0); loop invariant !(i < 0); loop invariant !(i > N); loop invariant !(x > 0); loop invariant !(a > 2); loop invariant !(a < 0); loop invariant !(i < 0); loop invariant !(i > N); loop invariant !(x > 0); loop invariant !(a > 2); loop invariant !(a < 0); loop invariant !(i < 0); loop invariant !(i > N); loop invariant !(x > 0); loop invariant !(a > 2); loop invariant !(a < 0); loop invariant !(i < 0); loop invariant !(i > N); loop invariant !(x > 0); loop invariant !(a > 2); loop invariant !(a < 0); loop invariant !(i < 0); loop invariant !(i > N); loop invariant !(x > 0); loop invariant !(a > 2); loop invariant !(a < 0); loop invariant !(i < 0); loop invariant !(i > N); loop invariant !(x > 0); loop invariant !(a > 2); loop invariant !(a < 0); loop invariant !(i < 0); loop invariant !(i > N); loop invariant !(x > 0); loop invariant !(a > 2); loop invariant !(a < 0); loop invariant !(i < 0); loop invariant !(i > N); loop invariant !(x > 0); loop invariant !(a > 2); loop invariant !(a < 0); loop invariant !(i < 0); loop invariant !(i > N); loop invariant !(x > 0); loop invariant !(a > 2); loop invariant !(a < 0); loop invariant !(i < 0); loop invariant !(i > N); loop invariant !(x > 0); loop invariant !(a > 2); loop invariant !(a < 0); loop invariant !(i < 0); loop invariant !(i > N); loop invariant !(x > 0); loop invariant !(a > 2); loop invariant !(a < 0); loop invariant !(i < 0); loop invariant !(i > N); loop invariant !(x > 0); loop invariant !(a > 2); loop invariant !(a < 0); loop invariant !(i < 0); loop invariant !(i > N); loop invariant !(x > 0); loop invariant !(a > 2); loop invariant !(a < 0); loop invariant !(i < 0); loop invariant !(i > N); loop invariant !(x > 0); loop invariant !(a > 2); loop invariant !(a < 0); loop invariant !(i < 0); loop invariant !(i > N); loop invariant !(x > 0); loop invariant !(a > 2); loop invariant !(a < 0); loop invariant !(i < 0); loop invariant !(i > N); loop invariant !(x > 0); loop invariant !(a > 2); loop invariant !(a < 0); loop invariant !(i < 0); loop invariant !(i > N); loop invariant !(x > 0); loop invariant !(a > 2); loop invariant !(a < 0); loop invariant !(i < 0); loop invariant !(i > N); loop invariant !(x > 0); loop invariant !(a > 2); loop invariant !(a < 0); loop invariant !(i < 0); loop invariant !(i > N); loop invariant !(x > 0); loop invariant !(a > 2); loop invariant !(a < 0); loop invariant !(i < 0); loop invariant !(i > N); loop invariant !(x > 0); loop invariant !(a > 2); loop invariant !(a < 0); loop invariant !(i < 0); loop invariant !(i > N); loop invariant !(x > 0); loop invariant !(a > 2); loop invariant !(a < 0); loop invariant !(i < 0); loop invariant !(i > N); loop invariant !(x > 0); loop invariant !(a > 2); loop invariant !(a < 0); loop invariant !(i < 0); loop invariant !(i > N); loop invariant !(x > 0); loop invariant !(a > 2); loop invariant !(a < 0); loop invariant !(i < 0); loop invariant !(i > N); loop invariant !(x > 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= N;\nloop invariant x = i * a;\nloop invariant x >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= N;\nloop invariant x == 0;\nloop invariant i >= 0;\nloop invariant i <= N;\nloop invariant 0 <= x;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= N;\nloop invariant x == i;\nloop invariant a == 1 ==> N >= i;\nloop invariant a == 2 ==> N <= i;\nloop invariant a == 1 ==> i <= N;\nloop invariant a == 2 ==> i >= N;\nloop invariant a == 1 ==> i == N;\nloop invariant a == 2 ==> i == N;\nloop invariant a == 1 ==> i == i;\nloop invariant a == 2 ==> i == i;\nloop invariant a == 1 ==> i == i;\nloop invariant a == 2 ==> i == i;\nloop invariant a == 1 ==> i == i;\nloop invariant a == 2 ==> i == i;\nloop invariant a == 1 ==> i == i;\nloop invariant a == 2 ==> i == i;\nloop invariant a == 1 ==> i == i;\nloop invariant a == 2 ==> i == i;\nloop invariant a == 1 ==> i == i;\nloop invariant a == 2 ==> i == i;\nloop invariant a == 1 ==> i == i;\nloop invariant a == 2 ==> i == i;\nloop invariant a == 1 ==> i == i;\nloop invariant a == 2 ==> i == i;\nloop invariant a == 1 ==> i == i;\nloop invariant a == 2 ==> i == i;\nloop invariant a == 1 ==> i == i;\nloop invariant a == 2 ==> i == i;\nloop invariant a == 1 ==> i == i;\nloop invariant a == 2 ==> i == i;\nloop invariant a == 1 ==> i == i;\nloop invariant a == 2 ==> i == i;\nloop invariant a == 1 ==> i == i;\nloop invariant a == 2 ==> i == i;\nloop invariant a == 1 ==> i == i;\nloop invariant a == 2 ==> i == i;\nloop invariant a == 1 ==> i == i;\nloop invariant a == 2 ==> i == i;\nloop invariant a == 1 ==> i == i;\nloop invariant a == 2 ==> i == i;\nloop invariant a == 1 ==> i == i;\nloop invariant a == 2 ==> i == i;\nloop invariant a == 1 ==> i == i;\nloop invariant a == 2 ==> i == i;\nloop invariant a == 1 ==> i == i;\nloop invariant a == 2 ==> i == i;\nloop invariant a == 1 ==> i == i;\nloop invariant a == 2 ==> i == i;\nloop invariant a == 1 ==> i == i;\nloop invariant a == 2 ==> i == i;\nloop invariant a == 1 ==> i == i;\nloop invariant a == 2 ==> i == i;\nloop invariant a == 1 ==> i == i;\nloop invariant a == 2 ==> i == i;\nloop invariant a == 1 ==> i == i;\nloop invariant a == 2 ==> i == i;\nloop invariant a == 1 ==> i == i;\nloop invariant a == 2 ==> i == i;\nloop invariant a == 1 ==> i == i;\nloop invariant a == 2 ==> i == i;\nloop invariant a == 1 ==> i == i;\nloop invariant a == 2 ==> i == i;\nloop invariant a == 1 ==> i == i;\nloop invariant a == 2 ==> i == i;\nloop invariant a == 1 ==> i == i;\nloop invariant a == 2 ==> i == i;\nloop invariant a == 1 ==> i == i;\nloop invariant a == 2 ==> i == i;\nloop invariant a == 1 ==> i == i;\nloop invariant a == 2 ==> i == i;\nloop invariant a == 1 ==> i == i;\nloop invariant a == 2 ==> i == i;\nloop invariant a == 1 ==> i == i;\nloop invariant a == 2 ==> i == i;\nloop invariant a == 1 ==> i == i;\nloop invariant a == 2 ==> i == i;\nloop invariant a == 1 ==> i == i;\nloop invariant a == 2 ==> i == i;\nloop invariant a == 1 ==> i == i;\nloop invariant a == 2 ==> i == i;\nloop invariant a == 1 ==> i == i;\nloop invariant a == 2 ==> i == i;\nloop invariant a == 1 ==> i == i;\nloop invariant a == 2 ==> i == i;\nloop invariant a == 1 ==> i == i;\nloop invariant a == 2 ==> i == i;\nloop invariant a == 1 ==> i == i;\nloop invariant a == 2 ==> i == i;\nloop invariant a == 1 ==> i == i;\nloop invariant a == 2 ==> i == i;\nloop invariant a == 1 ==> i == i;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= N;\nloop invariant x == 0;\nloop invariant i == N;\nloop invariant x <= 0;\nloop invariant x >= 0;\nloop invariant 0 <= i <= N;\nloop invariant x == 0;\nloop invariant i == N;\nloop invariant x <= 0;\nloop invariant x >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= N;\nloop invariant x = 0;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= N;\nloop invariant x == 0;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= N;\nloop invariant x == 0;\nloop invariant a in {1, 2};\nloop invariant NONDET in {0, 1};\nloop invariant NONDET > 0 ==> a == 1;\nloop invariant NONDET <= 0 ==> a == 2;\nloop invariant i == N ==> x == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(){\n\n  int NONDET;\n  int i,N;\n  int a;\n  int x;\n\n  x=0;\n  i=0;\n\n  if (NONDET > 0) a=1; else a=2;\n\n  /*@\n\nloop invariant i2: x == 0;\n\n\nloop invariant i5: NONDET > 0 ==> a == 1;\nloop invariant i6: NONDET <= 0 ==> a == 2;\nloop invariant i7: i == N ==> x == 0;\n*/\nwhile (i<N){\n    i=i+1;\n  }\n\n  {;\n//@ assert(!( x >0 ));\n}\n\nreturn;\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(){\n\n  int NONDET;\n  int i,N;\n  int a;\n  int x;\n\n  x=0;\n  i=0;\n\n  if (NONDET > 0) a=1; else a=2;\n\n  /*@\n\n*/\nwhile (i<N){\n    i=i+1;\n  }\n\n  {;\n//@ assert(!( x >0 ));\n}\n\nreturn;\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= N;\nloop invariant a == (if NONDET > 0 then 1 else 2);\nloop invariant x == (if i == 0 then 0 else x + a * i);\nloop invariant x == (if i == 0 then 0 else a * (i * (i + 1) / 2));\nloop invariant x == (if i == 0 then 0 else a * (i * (i + 1) / 2) + a * i);\nloop invariant x == (if i == 0 then 0 else a * (i * (i + 1) / 2 + i));\nloop invariant x == (if i == 0 then 0 else a * (i * (i + 1) / 2 + i));\nloop invariant x == (if i == 0 then 0 else a * (i * (i + 1) / 2 + i));\nloop invariant x == (if i == 0 then 0 else a * (i * (i + 1) / 2 + i));\nloop invariant x == (if i == 0 then 0 else a * (i * (i + 1) / 2 + i));\nloop invariant x == (if i == 0 then 0 else a * (i * (i + 1) / 2 + i));\nloop invariant x == (if i == 0 then 0 else a * (i * (i + 1) / 2 + i));\nloop invariant x == (if i == 0 then 0 else a * (i * (i + 1) / 2 + i));\nloop invariant x == (if i == 0 then 0 else a * (i * (i + 1) / 2 + i));\nloop invariant x == (if i == 0 then 0 else a * (i * (i + 1) / 2 + i));\nloop invariant x == (if i == 0 then 0 else a * (i * (i + 1) / 2 + i));\nloop invariant x == (if i == 0 then 0 else a * (i * (i + 1) / 2 + i));\nloop invariant x == (if i == 0 then 0 else a * (i * (i + 1) / 2 + i));\nloop invariant x == (if i == 0 then 0 else a * (i * (i + 1) / 2 + i));\nloop invariant x == (if i == 0 then 0 else a * (i * (i + 1) / 2 + i));\nloop invariant x == (if i == 0 then 0 else a * (i * (i + 1) / 2 + i));\nloop invariant x == (if i == 0 then 0 else a * (i * (i + 1) / 2 + i));\nloop invariant x == (if i == 0 then 0 else a * (i * (i + 1) / 2 + i));\nloop invariant x == (if i == 0 then 0 else a * (i * (i + 1) / 2 + i));\nloop invariant x == (if i == 0 then 0 else a * (i * (i + 1) / 2 + i));\nloop invariant x == (if i == 0 then 0 else a * (i * (i + 1) / 2 + i));\nloop invariant x == (if i == 0 then 0 else a * (i * (i + 1) / 2 + i));\nloop invariant x == (if i == 0 then 0 else a * (i * (i + 1) / 2 + i));\nloop invariant x == (if i == 0 then 0 else a * (i * (i + 1) / 2 + i));\nloop invariant x == (if i == 0 then 0 else a * (i * (i + 1) / 2 + i));\nloop invariant x == (if i == 0 then 0 else a * (i * (i + 1) / 2 + i));\nloop invariant x == (if i == 0 then 0 else a * (i * (i + 1) / 2 + i));\nloop invariant x == (if i == 0 then 0 else a * (i * (i + 1) / 2 + i));\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(){\n\n  int NONDET;\n  int i,N;\n  int a;\n  int x;\n\n  x=0;\n  i=0;\n\n  if (NONDET > 0) a=1; else a=2;\n\n  /*@\n\n\n\n\n\n\n*/\nwhile (i<N){\n    i=i+1;\n  }\n\n  {;\n//@ assert(!( x >0 ));\n}\n\nreturn;\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= N;\nloop invariant x == i*a;\nloop invariant N >= 0;\nloop invariant a == 1 ==> NONDET > 0;\nloop invariant a == 2 ==> NONDET <= 0;\nloop invariant a >= 1;\nloop invariant a <= 2;\nloop invariant i >= 0;\nloop invariant i <= N;\nloop invariant x >= 0;\nloop invariant x <= N*a;\nloop invariant x <= N+1;\nloop invariant x >= N;\nloop invariant x >= 0;\nloop invariant x <= N;\nloop invariant x == 0 ==> N == 0;\nloop invariant x == N ==> N == N;\nloop invariant x == 0 ==> a == 1;\nloop invariant x == N ==> a == 1;\nloop invariant x == 0 ==> NONDET > 0;\nloop invariant x == N ==> NONDET > 0;\nloop invariant x == 0 ==> a == 1;\nloop invariant x == N ==> a == 1;\nloop invariant x == 0 ==> i == 0;\nloop invariant x == N ==> i == N;\nloop invariant x == 0 ==> i == 0;\nloop invariant x == N ==> i == N;\nloop invariant x == 0 ==> i == 0;\nloop invariant x == N ==> i == N;\nloop invariant x == 0 ==> i == 0;\nloop invariant x == N ==> i == N;\nloop invariant x == 0 ==> i == 0;\nloop invariant x == N ==> i == N;\nloop invariant x == 0 ==> i == 0;\nloop invariant x == N ==> i == N;\nloop invariant x == 0 ==> i == 0;\nloop invariant x == N ==> i == N;\nloop invariant x == 0 ==> i == 0;\nloop invariant x == N ==> i == N;\nloop invariant x == 0 ==> i == 0;\nloop invariant x == N ==> i == N;\nloop invariant x == 0 ==> i == 0;\nloop invariant x == N ==> i == N;\nloop invariant x == 0 ==> i == 0;\nloop invariant x == N ==> i == N;\nloop invariant x == 0 ==> i == 0;\nloop invariant x == N ==> i == N;\nloop invariant x == 0 ==> i == 0;\nloop invariant x == N ==> i == N;\nloop invariant x == 0 ==> i == 0;\nloop invariant x == N ==> i == N;\nloop invariant x == 0 ==> i == 0;\nloop invariant x == N ==> i == N;\nloop invariant x == 0 ==> i == 0;\nloop invariant x == N ==> i == N;\nloop invariant x == 0 ==> i == 0;\nloop invariant x == N ==> i == N;\nloop invariant x == 0 ==> i == 0;\nloop invariant x == N ==> i == N;\nloop invariant x == 0 ==> i == 0;\nloop invariant x == N ==> i == N;\nloop invariant x == 0 ==> i == 0;\nloop invariant x == N ==> i == N;\nloop invariant x == 0 ==> i == 0;\nloop invariant x == N ==> i == N;\nloop invariant x == 0 ==> i == 0;\nloop invariant x == N ==> i == N;\nloop invariant x == 0 ==> i == 0;\nloop invariant x == N ==> i == N;\nloop invariant x == 0 ==> i == 0;\nloop invariant x == N ==> i == N;\nloop invariant x == 0 ==> i == 0;\nloop invariant x == N ==> i == N;\nloop invariant x == 0 ==> i == 0;\nloop invariant x == N ==> i == N;\nloop invariant x == 0 ==> i == 0;\nloop invariant x == N ==> i == N;\nloop invariant x == 0 ==> i == 0;\nloop invariant x == N ==> i == N;\nloop invariant x == 0 ==> i == 0;\nloop invariant x == N ==> i == N;\nloop invariant x == 0 ==> i == 0;\nloop invariant x == N ==> i == N;\nloop invariant x == 0 ==> i == 0;\nloop invariant x == N ==> i == N;\nloop invariant x == 0 ==> i == 0;\nloop invariant x == N ==> i == N;\nloop invariant x == 0 ==> i == 0;\nloop invariant x == N ==> i == N;\nloop invariant x == 0 ==> i == 0;\nloop invariant x == N ==> i == N;\nloop invariant x == 0 ==> i == 0;\nloop invariant x == N ==> i == N;\nloop invariant x == 0 ==> i == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(){\n\n  int NONDET;\n  int i,N;\n  int a;\n  int x;\n\n  x=0;\n  i=0;\n\n  if (NONDET > 0) a=1; else a=2;\n\n  /*@\n\n\n\nloop invariant i4: a == 1 ==> NONDET > 0;\nloop invariant i5: a == 2 ==> NONDET <= 0;\nloop invariant i6: a >= 1;\nloop invariant i7: a <= 2;\nloop invariant i8: i >= 0;\n\nloop invariant i10: x >= 0;\n\n\n\n\n\nloop invariant i16: x == N ==> N == N;\n\n\n\n\n\nloop invariant i22: x == N ==> i == N;\n*/\nwhile (i<N){\n    i=i+1;\n  }\n\n  {;\n//@ assert(!( x >0 ));\n}\n\nreturn;\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= N;\nloop invariant x == 0;\nloop invariant 1 <= a <= 2;\nloop invariant N == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(){\n\n  int NONDET;\n  int i,N;\n  int a;\n  int x;\n\n  x=0;\n  i=0;\n\n  if (NONDET > 0) a=1; else a=2;\n\n  /*@\n\nloop invariant i2: x == 0;\nloop invariant i3: 1 <= a <= 2;\n\n*/\nwhile (i<N){\n    i=i+1;\n  }\n\n  {;\n//@ assert(!( x >0 ));\n}\n\nreturn;\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(){\n\n  int NONDET;\n  int i,N;\n  int a;\n  int x;\n\n  x=0;\n  i=0;\n\n  if (NONDET > 0) a=1; else a=2;\n\n  /*@\n\n*/\nwhile (i<N){\n    i=i+1;\n  }\n\n  {;\n//@ assert(!( x >0 ));\n}\n\nreturn;\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= N;\nloop invariant (i == N) ==> (x == 0);\nloop invariant (i < N) ==> (x == (a * i));\nloop invariant (i < N) ==> (i == 0 ==> a >= 1);\nloop invariant (i < N) ==> (i > 0 ==> a >= 2);\nloop invariant (i < N) ==> (i > 0 ==> a <= 2);\nloop invariant (i < N) ==> (i > 0 ==> x == (a * (i - 1)));\nloop invariant 0 <= i <= N;\nloop invariant (i == N) ==> (x == 0);\nloop invariant (i < N) ==> (x == (a * i));\nloop invariant (i < N) ==> (i == 0 ==> a >= 1);\nloop invariant (i < N) ==> (i > 0 ==> a >= 2);\nloop invariant (i < N) ==> (i > 0 ==> a <= 2);\nloop invariant (i < N) ==> (i > 0 ==> x == (a * (i - 1)));\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(){\n\n  int NONDET;\n  int i,N;\n  int a;\n  int x;\n\n  x=0;\n  i=0;\n\n  if (NONDET > 0) a=1; else a=2;\n\n  /*@\n\n\n\n\n\n\n\n*/\nwhile (i<N){\n    i=i+1;\n  }\n\n  {;\n//@ assert(!( x >0 ));\n}\n\nreturn;\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= N;\nloop invariant x <= 1;\nloop invariant a == 1 || a == 2;\nloop invariant i <= N ==> x == 0;\nloop invariant !(NONDET > 0) ==> x == 0;\nloop invariant (NONDET > 0) ==> a == 1 || a == 2;\nloop invariant i == N ==> x == 0;\nloop invariant i == N ==> a == 1 || a == 2;\nloop invariant i == N ==> x <= 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(){\n\n  int NONDET;\n  int i,N;\n  int a;\n  int x;\n\n  x=0;\n  i=0;\n\n  if (NONDET > 0) a=1; else a=2;\n\n  /*@\n\nloop invariant i2: x <= 1;\nloop invariant i3: a == 1 || a == 2;\nloop invariant i4: i <= N ==> x == 0;\nloop invariant i5: !(NONDET > 0) ==> x == 0;\nloop invariant i6: (NONDET > 0) ==> a == 1 || a == 2;\nloop invariant i7: i == N ==> x == 0;\nloop invariant i8: i == N ==> a == 1 || a == 2;\nloop invariant i9: i == N ==> x <= 1;\n*/\nwhile (i<N){\n    i=i+1;\n  }\n\n  {;\n//@ assert(!( x >0 ));\n}\n\nreturn;\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= N; loop invariant 0 <= a <= 2; loop invariant if (NONDET > 0) then a == 1 else a == 2; loop invariant x == 0; loop invariant i == 0; loop invariant !(x > 0); loop invariant !(a > 2); loop invariant !(a < 0); loop invariant !(i < 0); loop invariant !(i > N); loop invariant !(x > 0); loop invariant !(a > 2); loop invariant !(a < 0); loop invariant !(i < 0); loop invariant !(i > N); loop invariant !(x > 0); loop invariant !(a > 2); loop invariant !(a < 0); loop invariant !(i < 0); loop invariant !(i > N); loop invariant !(x > 0); loop invariant !(a > 2); loop invariant !(a < 0); loop invariant !(i < 0); loop invariant !(i > N); loop invariant !(x > 0); loop invariant !(a > 2); loop invariant !(a < 0); loop invariant !(i < 0); loop invariant !(i > N); loop invariant !(x > 0); loop invariant !(a > 2); loop invariant !(a < 0); loop invariant !(i < 0); loop invariant !(i > N); loop invariant !(x > 0); loop invariant !(a > 2); loop invariant !(a < 0); loop invariant !(i < 0); loop invariant !(i > N); loop invariant !(x > 0); loop invariant !(a > 2); loop invariant !(a < 0); loop invariant !(i < 0); loop invariant !(i > N); loop invariant !(x > 0); loop invariant !(a > 2); loop invariant !(a < 0); loop invariant !(i < 0); loop invariant !(i > N); loop invariant !(x > 0); loop invariant !(a > 2); loop invariant !(a < 0); loop invariant !(i < 0); loop invariant !(i > N); loop invariant !(x > 0); loop invariant !(a > 2); loop invariant !(a < 0); loop invariant !(i < 0); loop invariant !(i > N); loop invariant !(x > 0); loop invariant !(a > 2); loop invariant !(a < 0); loop invariant !(i < 0); loop invariant !(i > N); loop invariant !(x > 0); loop invariant !(a > 2); loop invariant !(a < 0); loop invariant !(i < 0); loop invariant !(i > N); loop invariant !(x > 0); loop invariant !(a > 2); loop invariant !(a < 0); loop invariant !(i < 0); loop invariant !(i > N); loop invariant !(x > 0); loop invariant !(a > 2); loop invariant !(a < 0); loop invariant !(i < 0); loop invariant !(i > N); loop invariant !(x > 0); loop invariant !(a > 2); loop invariant !(a < 0); loop invariant !(i < 0); loop invariant !(i > N); loop invariant !(x > 0); loop invariant !(a > 2); loop invariant !(a < 0); loop invariant !(i < 0); loop invariant !(i > N); loop invariant !(x > 0); loop invariant !(a > 2); loop invariant !(a < 0); loop invariant !(i < 0); loop invariant !(i > N); loop invariant !(x > 0); loop invariant !(a > 2); loop invariant !(a < 0); loop invariant !(i < 0); loop invariant !(i > N); loop invariant !(x > 0); loop invariant !(a > 2); loop invariant !(a < 0); loop invariant !(i < 0); loop invariant !(i > N); loop invariant !(x > 0); loop invariant !(a > 2); loop invariant !(a < 0); loop invariant !(i < 0); loop invariant !(i > N); loop invariant !(x > 0); loop invariant !(a > 2); loop invariant !(a < 0); loop invariant !(i < 0); loop invariant !(i > N); loop invariant !(x > 0); loop invariant !(a > 2); loop invariant !(a < 0); loop invariant !(i < 0); loop invariant !(i > N); loop invariant !(x > 0); loop invariant !(a > 2); loop invariant !(a < 0); loop invariant !(i < 0); loop invariant !(i > N); loop invariant !(x > 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(){\n\n  int NONDET;\n  int i,N;\n  int a;\n  int x;\n\n  x=0;\n  i=0;\n\n  if (NONDET > 0) a=1; else a=2;\n\n  /*@\n\n*/\nwhile (i<N){\n    i=i+1;\n  }\n\n  {;\n//@ assert(!( x >0 ));\n}\n\nreturn;\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= N;\nloop invariant x = i * a;\nloop invariant x >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(){\n\n  int NONDET;\n  int i,N;\n  int a;\n  int x;\n\n  x=0;\n  i=0;\n\n  if (NONDET > 0) a=1; else a=2;\n\n  /*@\n\n\nloop invariant i3: x >= 0;\n*/\nwhile (i<N){\n    i=i+1;\n  }\n\n  {;\n//@ assert(!( x >0 ));\n}\n\nreturn;\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= N;\nloop invariant x == 0;\nloop invariant i >= 0;\nloop invariant i <= N;\nloop invariant 0 <= x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(){\n\n  int NONDET;\n  int i,N;\n  int a;\n  int x;\n\n  x=0;\n  i=0;\n\n  if (NONDET > 0) a=1; else a=2;\n\n  /*@\n\nloop invariant i2: x == 0;\nloop invariant i3: i >= 0;\n\nloop invariant i5: 0 <= x;\n*/\nwhile (i<N){\n    i=i+1;\n  }\n\n  {;\n//@ assert(!( x >0 ));\n}\n\nreturn;\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= N;\nloop invariant x == i;\nloop invariant a == 1 ==> N >= i;\nloop invariant a == 2 ==> N <= i;\nloop invariant a == 1 ==> i <= N;\nloop invariant a == 2 ==> i >= N;\nloop invariant a == 1 ==> i == N;\nloop invariant a == 2 ==> i == N;\nloop invariant a == 1 ==> i == i;\nloop invariant a == 2 ==> i == i;\nloop invariant a == 1 ==> i == i;\nloop invariant a == 2 ==> i == i;\nloop invariant a == 1 ==> i == i;\nloop invariant a == 2 ==> i == i;\nloop invariant a == 1 ==> i == i;\nloop invariant a == 2 ==> i == i;\nloop invariant a == 1 ==> i == i;\nloop invariant a == 2 ==> i == i;\nloop invariant a == 1 ==> i == i;\nloop invariant a == 2 ==> i == i;\nloop invariant a == 1 ==> i == i;\nloop invariant a == 2 ==> i == i;\nloop invariant a == 1 ==> i == i;\nloop invariant a == 2 ==> i == i;\nloop invariant a == 1 ==> i == i;\nloop invariant a == 2 ==> i == i;\nloop invariant a == 1 ==> i == i;\nloop invariant a == 2 ==> i == i;\nloop invariant a == 1 ==> i == i;\nloop invariant a == 2 ==> i == i;\nloop invariant a == 1 ==> i == i;\nloop invariant a == 2 ==> i == i;\nloop invariant a == 1 ==> i == i;\nloop invariant a == 2 ==> i == i;\nloop invariant a == 1 ==> i == i;\nloop invariant a == 2 ==> i == i;\nloop invariant a == 1 ==> i == i;\nloop invariant a == 2 ==> i == i;\nloop invariant a == 1 ==> i == i;\nloop invariant a == 2 ==> i == i;\nloop invariant a == 1 ==> i == i;\nloop invariant a == 2 ==> i == i;\nloop invariant a == 1 ==> i == i;\nloop invariant a == 2 ==> i == i;\nloop invariant a == 1 ==> i == i;\nloop invariant a == 2 ==> i == i;\nloop invariant a == 1 ==> i == i;\nloop invariant a == 2 ==> i == i;\nloop invariant a == 1 ==> i == i;\nloop invariant a == 2 ==> i == i;\nloop invariant a == 1 ==> i == i;\nloop invariant a == 2 ==> i == i;\nloop invariant a == 1 ==> i == i;\nloop invariant a == 2 ==> i == i;\nloop invariant a == 1 ==> i == i;\nloop invariant a == 2 ==> i == i;\nloop invariant a == 1 ==> i == i;\nloop invariant a == 2 ==> i == i;\nloop invariant a == 1 ==> i == i;\nloop invariant a == 2 ==> i == i;\nloop invariant a == 1 ==> i == i;\nloop invariant a == 2 ==> i == i;\nloop invariant a == 1 ==> i == i;\nloop invariant a == 2 ==> i == i;\nloop invariant a == 1 ==> i == i;\nloop invariant a == 2 ==> i == i;\nloop invariant a == 1 ==> i == i;\nloop invariant a == 2 ==> i == i;\nloop invariant a == 1 ==> i == i;\nloop invariant a == 2 ==> i == i;\nloop invariant a == 1 ==> i == i;\nloop invariant a == 2 ==> i == i;\nloop invariant a == 1 ==> i == i;\nloop invariant a == 2 ==> i == i;\nloop invariant a == 1 ==> i == i;\nloop invariant a == 2 ==> i == i;\nloop invariant a == 1 ==> i == i;\nloop invariant a == 2 ==> i == i;\nloop invariant a == 1 ==> i == i;\nloop invariant a == 2 ==> i == i;\nloop invariant a == 1 ==> i == i;\nloop invariant a == 2 ==> i == i;\nloop invariant a == 1 ==> i == i;\nloop invariant a == 2 ==> i == i;\nloop invariant a == 1 ==> i == i;\nloop invariant a == 2 ==> i == i;\nloop invariant a == 1 ==> i == i;\nloop invariant a == 2 ==> i == i;\nloop invariant a == 1 ==> i == i;\nloop invariant a == 2 ==> i == i;\nloop invariant a == 1 ==> i == i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(){\n\n  int NONDET;\n  int i,N;\n  int a;\n  int x;\n\n  x=0;\n  i=0;\n\n  if (NONDET > 0) a=1; else a=2;\n\n  /*@\n\n\n\n\n\n\n\n\nloop invariant i9: a == 1 ==> i == i;\nloop invariant i10: a == 2 ==> i == i;\n*/\nwhile (i<N){\n    i=i+1;\n  }\n\n  {;\n//@ assert(!( x >0 ));\n}\n\nreturn;\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= N;\nloop invariant x == 0;\nloop invariant i == N;\nloop invariant x <= 0;\nloop invariant x >= 0;\nloop invariant 0 <= i <= N;\nloop invariant x == 0;\nloop invariant i == N;\nloop invariant x <= 0;\nloop invariant x >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(){\n\n  int NONDET;\n  int i,N;\n  int a;\n  int x;\n\n  x=0;\n  i=0;\n\n  if (NONDET > 0) a=1; else a=2;\n\n  /*@\n\nloop invariant i2: x == 0;\n\nloop invariant i4: x <= 0;\nloop invariant i5: x >= 0;\n*/\nwhile (i<N){\n    i=i+1;\n  }\n\n  {;\n//@ assert(!( x >0 ));\n}\n\nreturn;\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= N;\nloop invariant x = 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(){\n\n  int NONDET;\n  int i,N;\n  int a;\n  int x;\n\n  x=0;\n  i=0;\n\n  if (NONDET > 0) a=1; else a=2;\n\n  /*@\n\n\n*/\nwhile (i<N){\n    i=i+1;\n  }\n\n  {;\n//@ assert(!( x >0 ));\n}\n\nreturn;\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= N;\nloop invariant x == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(){\n\n  int NONDET;\n  int i,N;\n  int a;\n  int x;\n\n  x=0;\n  i=0;\n\n  if (NONDET > 0) a=1; else a=2;\n\n  /*@\n\nloop invariant i2: x == 0;\n*/\nwhile (i<N){\n    i=i+1;\n  }\n\n  {;\n//@ assert(!( x >0 ));\n}\n\nreturn;\n\n}",
                "checker_output_after_prune": true
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 23: unexpected token 'in'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(){\n\n  int NONDET;\n  int i,N;\n  int a;\n  int x;\n\n  x=0;\n  i=0;\n\n  if (NONDET > 0) a=1; else a=2;\n\n  /*@\nloop invariant i1: 0 <= i <= N;\nloop invariant i2: x == 0;\nloop invariant i3: a in {1, 2};\nloop invariant i4: NONDET in {0, 1};\nloop invariant i5: NONDET > 0 ==> a == 1;\nloop invariant i6: NONDET <= 0 ==> a == 2;\nloop invariant i7: i == N ==> x == 0;\nloop invariant i8: a == (if NONDET > 0 then 1 else 2);\nloop invariant i9: x == (if i == 0 then 0 else x + a * i);\nloop invariant i10: x == (if i == 0 then 0 else a * (i * (i + 1) / 2));\nloop invariant i11: x == (if i == 0 then 0 else a * (i * (i + 1) / 2) + a * i);\nloop invariant i12: x == (if i == 0 then 0 else a * (i * (i + 1) / 2 + i));\nloop invariant i13: x == i*a;\nloop invariant i14: N >= 0;\nloop invariant i15: a == 1 ==> NONDET > 0;\nloop invariant i16: a == 2 ==> NONDET <= 0;\nloop invariant i17: a >= 1;\nloop invariant i18: a <= 2;\nloop invariant i19: i >= 0;\nloop invariant i20: i <= N;\nloop invariant i21: x >= 0;\nloop invariant i22: x <= N*a;\nloop invariant i23: x <= N+1;\nloop invariant i24: x >= N;\nloop invariant i25: x <= N;\nloop invariant i26: x == 0 ==> N == 0;\nloop invariant i27: x == N ==> N == N;\nloop invariant i28: x == 0 ==> a == 1;\nloop invariant i29: x == N ==> a == 1;\nloop invariant i30: x == 0 ==> NONDET > 0;\nloop invariant i31: x == N ==> NONDET > 0;\nloop invariant i32: x == 0 ==> i == 0;\nloop invariant i33: x == N ==> i == N;\nloop invariant i34: 1 <= a <= 2;\nloop invariant i35: N == 0;\nloop invariant i36: (i == N) ==> (x == 0);\nloop invariant i37: (i < N) ==> (x == (a * i));\nloop invariant i38: (i < N) ==> (i == 0 ==> a >= 1);\nloop invariant i39: (i < N) ==> (i > 0 ==> a >= 2);\nloop invariant i40: (i < N) ==> (i > 0 ==> a <= 2);\nloop invariant i41: (i < N) ==> (i > 0 ==> x == (a * (i - 1)));\nloop invariant i42: 1 <= i <= N;\nloop invariant i43: x <= 1;\nloop invariant i44: a == 1 || a == 2;\nloop invariant i45: i <= N ==> x == 0;\nloop invariant i46: !(NONDET > 0) ==> x == 0;\nloop invariant i47: (NONDET > 0) ==> a == 1 || a == 2;\nloop invariant i48: i == N ==> a == 1 || a == 2;\nloop invariant i49: i == N ==> x <= 1;\nloop invariant i50: 0 <= i <= N; loop invariant 0 <= a <= 2; loop invariant if (NONDET > 0) then a == 1 else a == 2; loop invariant x == 0; loop invariant i == 0; loop invariant !(x > 0); loop invariant !(a > 2); loop invariant !(a < 0); loop invariant !(i < 0); loop invariant !(i > N); loop invariant !(x > 0); loop invariant !(a > 2); loop invariant !(a < 0); loop invariant !(i < 0); loop invariant !(i > N); loop invariant !(x > 0); loop invariant !(a > 2); loop invariant !(a < 0); loop invariant !(i < 0); loop invariant !(i > N); loop invariant !(x > 0); loop invariant !(a > 2); loop invariant !(a < 0); loop invariant !(i < 0); loop invariant !(i > N); loop invariant !(x > 0); loop invariant !(a > 2); loop invariant !(a < 0); loop invariant !(i < 0); loop invariant !(i > N); loop invariant !(x > 0); loop invariant !(a > 2); loop invariant !(a < 0); loop invariant !(i < 0); loop invariant !(i > N); loop invariant !(x > 0); loop invariant !(a > 2); loop invariant !(a < 0); loop invariant !(i < 0); loop invariant !(i > N); loop invariant !(x > 0); loop invariant !(a > 2); loop invariant !(a < 0); loop invariant !(i < 0); loop invariant !(i > N); loop invariant !(x > 0); loop invariant !(a > 2); loop invariant !(a < 0); loop invariant !(i < 0); loop invariant !(i > N); loop invariant !(x > 0); loop invariant !(a > 2); loop invariant !(a < 0); loop invariant !(i < 0); loop invariant !(i > N); loop invariant !(x > 0); loop invariant !(a > 2); loop invariant !(a < 0); loop invariant !(i < 0); loop invariant !(i > N); loop invariant !(x > 0); loop invariant !(a > 2); loop invariant !(a < 0); loop invariant !(i < 0); loop invariant !(i > N); loop invariant !(x > 0); loop invariant !(a > 2); loop invariant !(a < 0); loop invariant !(i < 0); loop invariant !(i > N); loop invariant !(x > 0); loop invariant !(a > 2); loop invariant !(a < 0); loop invariant !(i < 0); loop invariant !(i > N); loop invariant !(x > 0); loop invariant !(a > 2); loop invariant !(a < 0); loop invariant !(i < 0); loop invariant !(i > N); loop invariant !(x > 0); loop invariant !(a > 2); loop invariant !(a < 0); loop invariant !(i < 0); loop invariant !(i > N); loop invariant !(x > 0); loop invariant !(a > 2); loop invariant !(a < 0); loop invariant !(i < 0); loop invariant !(i > N); loop invariant !(x > 0); loop invariant !(a > 2); loop invariant !(a < 0); loop invariant !(i < 0); loop invariant !(i > N); loop invariant !(x > 0); loop invariant !(a > 2); loop invariant !(a < 0); loop invariant !(i < 0); loop invariant !(i > N); loop invariant !(x > 0); loop invariant !(a > 2); loop invariant !(a < 0); loop invariant !(i < 0); loop invariant !(i > N); loop invariant !(x > 0); loop invariant !(a > 2); loop invariant !(a < 0); loop invariant !(i < 0); loop invariant !(i > N); loop invariant !(x > 0); loop invariant !(a > 2); loop invariant !(a < 0); loop invariant !(i < 0); loop invariant !(i > N); loop invariant !(x > 0); loop invariant !(a > 2); loop invariant !(a < 0); loop invariant !(i < 0); loop invariant !(i > N); loop invariant !(x > 0); loop invariant !(a > 2); loop invariant !(a < 0); loop invariant !(i < 0); loop invariant !(i > N); loop invariant !(x > 0);\nloop invariant i51: x = i * a;\nloop invariant i52: 0 <= x;\nloop invariant i53: x == i;\nloop invariant i54: a == 1 ==> N >= i;\nloop invariant i55: a == 2 ==> N <= i;\nloop invariant i56: a == 1 ==> i <= N;\nloop invariant i57: a == 2 ==> i >= N;\nloop invariant i58: a == 1 ==> i == N;\nloop invariant i59: a == 2 ==> i == N;\nloop invariant i60: a == 1 ==> i == i;\nloop invariant i61: a == 2 ==> i == i;\nloop invariant i62: i == N;\nloop invariant i63: x <= 0;\nloop invariant i64: x = 0;\n*/\nwhile (i<N){\n    i=i+1;\n  }\n\n  {;\n//@ assert(!( x >0 ));\n}\n\nreturn;\n\n}",
        "combined_annotation_num_solver_calls": 20,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(){\n\n  int NONDET;\n  int i,N;\n  int a;\n  int x;\n\n  x=0;\n  i=0;\n\n  if (NONDET > 0) a=1; else a=2;\n\n  /*@\n\nloop invariant i2: x == 0;\n\n\nloop invariant i5: NONDET > 0 ==> a == 1;\nloop invariant i6: NONDET <= 0 ==> a == 2;\nloop invariant i7: i == N ==> x == 0;\n\n\n\n\n\n\n\nloop invariant i15: a == 1 ==> NONDET > 0;\nloop invariant i16: a == 2 ==> NONDET <= 0;\nloop invariant i17: a >= 1;\nloop invariant i18: a <= 2;\nloop invariant i19: i >= 0;\n\nloop invariant i21: x >= 0;\n\n\n\n\n\nloop invariant i27: x == N ==> N == N;\n\n\n\n\n\nloop invariant i33: x == N ==> i == N;\nloop invariant i34: 1 <= a <= 2;\n\nloop invariant i36: (i == N) ==> (x == 0);\n\nloop invariant i38: (i < N) ==> (i == 0 ==> a >= 1);\n\nloop invariant i40: (i < N) ==> (i > 0 ==> a <= 2);\n\n\nloop invariant i43: x <= 1;\nloop invariant i44: a == 1 || a == 2;\nloop invariant i45: i <= N ==> x == 0;\nloop invariant i46: !(NONDET > 0) ==> x == 0;\nloop invariant i47: (NONDET > 0) ==> a == 1 || a == 2;\nloop invariant i48: i == N ==> a == 1 || a == 2;\nloop invariant i49: i == N ==> x <= 1;\n\n\nloop invariant i52: 0 <= x;\n\n\n\n\n\n\n\nloop invariant i60: a == 1 ==> i == i;\nloop invariant i61: a == 2 ==> i == i;\n\nloop invariant i63: x <= 0;\n\n*/\nwhile (i<N){\n    i=i+1;\n  }\n\n  {;\n//@ assert(!( x >0 ));\n}\n\nreturn;\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c"
        ],
        "skipped": [],
        "total": 18,
        "success_count": 17,
        "failure_count": 1,
        "success_rate": 0.9444444444444444
    }
}