{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n  int  i,  sn=0;\n  for(i=1; i<=8; i++){\n    sn = sn +(2);\n  }\n  {;\n//@ assert(sn==8*(2)|| sn == 0);\n}\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= i <= 8;\nloop invariant 0 <= sn <= 16;\nloop invariant sn == (i - 1) * 2;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= 8;\nloop invariant sn == i * (2 - 1) + (i - 1) * i / 2;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= 9;\nloop invariant 10*i <= sn <= 18*i;\nloop invariant sn == (2 * i);\nloop invariant sn >= 0;\nloop invariant sn <= 16;\nloop invariant sn == 8*(2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 8;\nloop invariant 0 <= sn <= 8*2;\nloop invariant sn == i*2;\nloop invariant 0 <= i <= 8;\nloop invariant 0 <= sn <= 8*2;\nloop invariant sn == i*2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 8;\nloop invariant sn == (i - 1) * 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= sn <= 8*(2);\nloop invariant sn == 2*i;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= 8;\nloop invariant sn == (2 * i) - 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 8;\nloop invariant sn >= 0;\nloop invariant i == 8 ==> sn == 8*(2);\nloop invariant i <= 8 ==> sn == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 8;\nloop invariant 0 <= sn <= 8 * 2;\nloop invariant sn >= 2 * i - 2;\nloop invariant sn == 2 * i - 2;\nloop invariant sn == 2 * i - 2;\nloop invariant sn == 2 * i - 2;\nloop invariant sn == 2 * i - 2;\nloop invariant sn == 2 * i - 2;\nloop invariant sn == 2 * i - 2;\nloop invariant sn == 8 * 2;\nloop invariant sn == 0;\nloop invariant sn == 8 * 2;\nloop invariant sn == 0;\nloop invariant sn == 8 * 2;\nloop invariant sn == 0;\nloop invariant sn == 8 * 2;\nloop invariant sn == 0;\nloop invariant sn == 8 * 2;\nloop invariant sn == 0;\nloop invariant sn == 8 * 2;\nloop invariant sn == 0;\nloop invariant sn == 8 * 2;\nloop invariant sn == 0;\nloop invariant sn == 8 * 2;\nloop invariant sn == 0;\nloop invariant sn == 8 * 2;\nloop invariant sn == 0;\nloop invariant sn == 8 * 2;\nloop invariant sn == 0;\nloop invariant sn == 8 * 2;\nloop invariant sn == 0;\nloop invariant sn == 8 * 2;\nloop invariant sn == 0;\nloop invariant sn == 8 * 2;\nloop invariant sn == 0;\nloop invariant sn == 8 * 2;\nloop invariant sn == 0;\nloop invariant sn == 8 * 2;\nloop invariant sn == 0;\nloop invariant sn == 8 * 2;\nloop invariant sn == 0;\nloop invariant sn == 8 * 2;\nloop invariant sn == 0;\nloop invariant sn == 8 * 2;\nloop invariant sn == 0;\nloop invariant sn == 8 * 2;\nloop invariant sn == 0;\nloop invariant sn == 8 * 2;\nloop invariant sn == 0;\nloop invariant sn == 8 * 2;\nloop invariant sn == 0;\nloop invariant sn == 8 * 2;\nloop invariant sn == 0;\nloop invariant sn == 8 * 2;\nloop invariant sn == 0;\nloop invariant sn == 8 * 2;\nloop invariant sn == 0;\nloop invariant sn == 8 * 2;\nloop invariant sn == 0;\nloop invariant sn == 8 * 2;\nloop invariant sn == 0;\nloop invariant sn == 8 * 2;\nloop invariant sn == 0;\nloop invariant sn == 8 * 2;\nloop invariant sn == 0;\nloop invariant sn == 8 * 2;\nloop invariant sn == 0;\nloop invariant sn == 8 * 2;\nloop invariant sn == 0;\nloop invariant sn == 8 * 2;\nloop invariant sn == 0;\nloop invariant sn == 8 * 2;\nloop invariant sn == 0;\nloop invariant sn == 8 * 2;\nloop invariant sn == 0;\nloop invariant sn == 8 * 2;\nloop invariant sn == 0;\nloop invariant sn == 8 * 2;\nloop invariant sn == 0;\nloop invariant sn == 8 * 2;\nloop invariant sn == 0;\nloop invariant sn == 8 * 2;\nloop invariant sn == 0;\nloop invariant sn == 8 * 2;\nloop invariant sn == 0;\nloop invariant sn == 8 * 2;\nloop invariant sn == 0;\nloop invariant sn == 8 * 2;\nloop invariant sn == 0;\nloop invariant sn == 8 * 2;\nloop invariant sn == 0;\nloop invariant sn == 8 * 2;\nloop invariant sn == 0;\nloop invariant sn == 8 * 2;\nloop invariant sn == 0;\nloop invariant sn == 8 * 2;\nloop invariant sn == 0;\nloop invariant sn == 8 * 2;\nloop invariant sn == 0;\nloop invariant sn == 8 * 2;\nloop invariant sn == 0;\nloop invariant sn == 8 * 2;\nloop invariant sn == 0;\nloop invariant sn == 8 * 2;\nloop invariant sn == 0;\nloop invariant sn == 8 * 2;\nloop invariant sn == 0;\nloop invariant sn == 8 * 2;\nloop invariant sn == 0;\nloop invariant sn == 8 * 2;\nloop invariant sn == 0;\nloop invariant sn == 8 * 2;\nloop invariant sn == 0;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= 9;\nloop invariant 8 <= sn <= 80;\nloop invariant sn == (2 * (i - 1));\nloop invariant i >= 1;\nloop invariant (sn == (2 * (i - 1))) ==> (sn == 8 * (2) || sn == 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 8;\nloop invariant i - 1 <= sn <= i * (2);\nloop invariant i - 1 <= sn <= i * (2);\nloop invariant sn == (2) * (i - 1) + (i - 1) * (i - 2) / 2;\nloop invariant sn == (2) * (i - 1) + (i - 1) * (i - 2) / 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 8;\nloop invariant sn == (2 * i);\nloop invariant sn <= 16;\nloop invariant sn >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 8;\nloop invariant sn = i * 2;\nloop invariant i * 2 <= sn;\nloop invariant sn + 2 * (8 - i) <= 8 * 2;\nloop invariant sn + 2 * (8 - i) == 0 || sn + 2 * (8 - i) == 8 * 2;\nloop invariant sn + 2 * (8 - i) == 0 || sn + 2 * (8 - i) == 8 * 2;\nloop invariant sn == 8 * 2 || sn == 0;\nloop invariant (sn == 8 * 2 || sn == 0) ==> sn == 8 * 2 || sn == 0;\nloop invariant sn == 8 * 2 || sn == 0;\nloop invariant 0 <= i <= 8;\nloop invariant sn = i * 2;\nloop invariant i * 2 <= sn;\nloop invariant sn + 2 * (8 - i) <= 8 * 2;\nloop invariant sn + 2 * (8 - i) == 0 || sn + 2 * (8 - i) == 8 * 2;\nloop invariant sn + 2 * (8 - i) == 0 || sn + 2 * (8 - i) == 8 * 2;\nloop invariant sn == 8 * 2 || sn == 0;\nloop invariant (sn == 8 * 2 || sn == 0) ==> sn == 8 * 2 || sn == 0;\nloop invariant sn == 8 * 2 || sn == 0;\nloop invariant sn == 8 * 2 || sn == 0;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= 9;\nloop invariant 0 <= sn <= 8;\nloop invariant sn == i * 2;\nloop invariant i == sn / 2;\nloop invariant (i <= 8 ==> sn == i * 2);\nloop invariant (i > 8 ==> sn == 0);\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= 8;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 8;\nloop invariant 0 <= sn <= 16;\nloop invariant sn == (i - 1) * 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n  int  i,  sn=0;\n  /*@\n\nloop invariant i2: 0 <= sn <= 16;\nloop invariant i3: sn == (i - 1) * 2;\n*/\nfor(i=1; i<=8; i++){\n    sn = sn +(2);\n  }\n  {;\n//@ assert(sn==8*(2)|| sn == 0);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= 8;\nloop invariant sn == i * (2 - 1) + (i - 1) * i / 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n  int  i,  sn=0;\n  /*@\n\n\n*/\nfor(i=1; i<=8; i++){\n    sn = sn +(2);\n  }\n  {;\n//@ assert(sn==8*(2)|| sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= 9;\nloop invariant 10*i <= sn <= 18*i;\nloop invariant sn == (2 * i);\nloop invariant sn >= 0;\nloop invariant sn <= 16;\nloop invariant sn == 8*(2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n  int  i,  sn=0;\n  /*@\nloop invariant i1: 1 <= i <= 9;\n\n\nloop invariant i4: sn >= 0;\n\n\n*/\nfor(i=1; i<=8; i++){\n    sn = sn +(2);\n  }\n  {;\n//@ assert(sn==8*(2)|| sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 8;\nloop invariant 0 <= sn <= 8*2;\nloop invariant sn == i*2;\nloop invariant 0 <= i <= 8;\nloop invariant 0 <= sn <= 8*2;\nloop invariant sn == i*2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n  int  i,  sn=0;\n  /*@\n\n\n\n*/\nfor(i=1; i<=8; i++){\n    sn = sn +(2);\n  }\n  {;\n//@ assert(sn==8*(2)|| sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 8;\nloop invariant sn == (i - 1) * 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n  int  i,  sn=0;\n  /*@\n\nloop invariant i2: sn == (i - 1) * 2;\n*/\nfor(i=1; i<=8; i++){\n    sn = sn +(2);\n  }\n  {;\n//@ assert(sn==8*(2)|| sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= sn <= 8*(2);\nloop invariant sn == 2*i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n  int  i,  sn=0;\n  /*@\n\n\n*/\nfor(i=1; i<=8; i++){\n    sn = sn +(2);\n  }\n  {;\n//@ assert(sn==8*(2)|| sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= 8;\nloop invariant sn == (2 * i) - 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n  int  i,  sn=0;\n  /*@\n\nloop invariant i2: sn == (2 * i) - 2;\n*/\nfor(i=1; i<=8; i++){\n    sn = sn +(2);\n  }\n  {;\n//@ assert(sn==8*(2)|| sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 8;\nloop invariant sn >= 0;\nloop invariant i == 8 ==> sn == 8*(2);\nloop invariant i <= 8 ==> sn == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n  int  i,  sn=0;\n  /*@\n\nloop invariant i2: sn >= 0;\n\n\n*/\nfor(i=1; i<=8; i++){\n    sn = sn +(2);\n  }\n  {;\n//@ assert(sn==8*(2)|| sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 8;\nloop invariant 0 <= sn <= 8 * 2;\nloop invariant sn >= 2 * i - 2;\nloop invariant sn == 2 * i - 2;\nloop invariant sn == 2 * i - 2;\nloop invariant sn == 2 * i - 2;\nloop invariant sn == 2 * i - 2;\nloop invariant sn == 2 * i - 2;\nloop invariant sn == 2 * i - 2;\nloop invariant sn == 8 * 2;\nloop invariant sn == 0;\nloop invariant sn == 8 * 2;\nloop invariant sn == 0;\nloop invariant sn == 8 * 2;\nloop invariant sn == 0;\nloop invariant sn == 8 * 2;\nloop invariant sn == 0;\nloop invariant sn == 8 * 2;\nloop invariant sn == 0;\nloop invariant sn == 8 * 2;\nloop invariant sn == 0;\nloop invariant sn == 8 * 2;\nloop invariant sn == 0;\nloop invariant sn == 8 * 2;\nloop invariant sn == 0;\nloop invariant sn == 8 * 2;\nloop invariant sn == 0;\nloop invariant sn == 8 * 2;\nloop invariant sn == 0;\nloop invariant sn == 8 * 2;\nloop invariant sn == 0;\nloop invariant sn == 8 * 2;\nloop invariant sn == 0;\nloop invariant sn == 8 * 2;\nloop invariant sn == 0;\nloop invariant sn == 8 * 2;\nloop invariant sn == 0;\nloop invariant sn == 8 * 2;\nloop invariant sn == 0;\nloop invariant sn == 8 * 2;\nloop invariant sn == 0;\nloop invariant sn == 8 * 2;\nloop invariant sn == 0;\nloop invariant sn == 8 * 2;\nloop invariant sn == 0;\nloop invariant sn == 8 * 2;\nloop invariant sn == 0;\nloop invariant sn == 8 * 2;\nloop invariant sn == 0;\nloop invariant sn == 8 * 2;\nloop invariant sn == 0;\nloop invariant sn == 8 * 2;\nloop invariant sn == 0;\nloop invariant sn == 8 * 2;\nloop invariant sn == 0;\nloop invariant sn == 8 * 2;\nloop invariant sn == 0;\nloop invariant sn == 8 * 2;\nloop invariant sn == 0;\nloop invariant sn == 8 * 2;\nloop invariant sn == 0;\nloop invariant sn == 8 * 2;\nloop invariant sn == 0;\nloop invariant sn == 8 * 2;\nloop invariant sn == 0;\nloop invariant sn == 8 * 2;\nloop invariant sn == 0;\nloop invariant sn == 8 * 2;\nloop invariant sn == 0;\nloop invariant sn == 8 * 2;\nloop invariant sn == 0;\nloop invariant sn == 8 * 2;\nloop invariant sn == 0;\nloop invariant sn == 8 * 2;\nloop invariant sn == 0;\nloop invariant sn == 8 * 2;\nloop invariant sn == 0;\nloop invariant sn == 8 * 2;\nloop invariant sn == 0;\nloop invariant sn == 8 * 2;\nloop invariant sn == 0;\nloop invariant sn == 8 * 2;\nloop invariant sn == 0;\nloop invariant sn == 8 * 2;\nloop invariant sn == 0;\nloop invariant sn == 8 * 2;\nloop invariant sn == 0;\nloop invariant sn == 8 * 2;\nloop invariant sn == 0;\nloop invariant sn == 8 * 2;\nloop invariant sn == 0;\nloop invariant sn == 8 * 2;\nloop invariant sn == 0;\nloop invariant sn == 8 * 2;\nloop invariant sn == 0;\nloop invariant sn == 8 * 2;\nloop invariant sn == 0;\nloop invariant sn == 8 * 2;\nloop invariant sn == 0;\nloop invariant sn == 8 * 2;\nloop invariant sn == 0;\nloop invariant sn == 8 * 2;\nloop invariant sn == 0;\nloop invariant sn == 8 * 2;\nloop invariant sn == 0;\nloop invariant sn == 8 * 2;\nloop invariant sn == 0;\nloop invariant sn == 8 * 2;\nloop invariant sn == 0;\nloop invariant sn == 8 * 2;\nloop invariant sn == 0;\nloop invariant sn == 8 * 2;\nloop invariant sn == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n  int  i,  sn=0;\n  /*@\n\nloop invariant i2: 0 <= sn <= 8 * 2;\nloop invariant i3: sn >= 2 * i - 2;\nloop invariant i4: sn == 2 * i - 2;\n\n\n*/\nfor(i=1; i<=8; i++){\n    sn = sn +(2);\n  }\n  {;\n//@ assert(sn==8*(2)|| sn == 0);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= 9;\nloop invariant 8 <= sn <= 80;\nloop invariant sn == (2 * (i - 1));\nloop invariant i >= 1;\nloop invariant (sn == (2 * (i - 1))) ==> (sn == 8 * (2) || sn == 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n  int  i,  sn=0;\n  /*@\nloop invariant i1: 1 <= i <= 9;\n\nloop invariant i3: sn == (2 * (i - 1));\nloop invariant i4: i >= 1;\n\n*/\nfor(i=1; i<=8; i++){\n    sn = sn +(2);\n  }\n  {;\n//@ assert(sn==8*(2)|| sn == 0);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 8;\nloop invariant i - 1 <= sn <= i * (2);\nloop invariant i - 1 <= sn <= i * (2);\nloop invariant sn == (2) * (i - 1) + (i - 1) * (i - 2) / 2;\nloop invariant sn == (2) * (i - 1) + (i - 1) * (i - 2) / 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n  int  i,  sn=0;\n  /*@\n\nloop invariant i2: i - 1 <= sn <= i * (2);\n\n*/\nfor(i=1; i<=8; i++){\n    sn = sn +(2);\n  }\n  {;\n//@ assert(sn==8*(2)|| sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 8;\nloop invariant sn == (2 * i);\nloop invariant sn <= 16;\nloop invariant sn >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n  int  i,  sn=0;\n  /*@\n\n\n\nloop invariant i4: sn >= 0;\n*/\nfor(i=1; i<=8; i++){\n    sn = sn +(2);\n  }\n  {;\n//@ assert(sn==8*(2)|| sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 8;\nloop invariant sn = i * 2;\nloop invariant i * 2 <= sn;\nloop invariant sn + 2 * (8 - i) <= 8 * 2;\nloop invariant sn + 2 * (8 - i) == 0 || sn + 2 * (8 - i) == 8 * 2;\nloop invariant sn + 2 * (8 - i) == 0 || sn + 2 * (8 - i) == 8 * 2;\nloop invariant sn == 8 * 2 || sn == 0;\nloop invariant (sn == 8 * 2 || sn == 0) ==> sn == 8 * 2 || sn == 0;\nloop invariant sn == 8 * 2 || sn == 0;\nloop invariant 0 <= i <= 8;\nloop invariant sn = i * 2;\nloop invariant i * 2 <= sn;\nloop invariant sn + 2 * (8 - i) <= 8 * 2;\nloop invariant sn + 2 * (8 - i) == 0 || sn + 2 * (8 - i) == 8 * 2;\nloop invariant sn + 2 * (8 - i) == 0 || sn + 2 * (8 - i) == 8 * 2;\nloop invariant sn == 8 * 2 || sn == 0;\nloop invariant (sn == 8 * 2 || sn == 0) ==> sn == 8 * 2 || sn == 0;\nloop invariant sn == 8 * 2 || sn == 0;\nloop invariant sn == 8 * 2 || sn == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n  int  i,  sn=0;\n  /*@\n\n\n\nloop invariant i4: sn + 2 * (8 - i) <= 8 * 2;\n\n\nloop invariant i7: (sn == 8 * 2 || sn == 0) ==> sn == 8 * 2 || sn == 0;\n*/\nfor(i=1; i<=8; i++){\n    sn = sn +(2);\n  }\n  {;\n//@ assert(sn==8*(2)|| sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= 9;\nloop invariant 0 <= sn <= 8;\nloop invariant sn == i * 2;\nloop invariant i == sn / 2;\nloop invariant (i <= 8 ==> sn == i * 2);\nloop invariant (i > 8 ==> sn == 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n  int  i,  sn=0;\n  /*@\nloop invariant i1: 1 <= i <= 9;\n\n\n\n\n\n*/\nfor(i=1; i<=8; i++){\n    sn = sn +(2);\n  }\n  {;\n//@ assert(sn==8*(2)|| sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= 8;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n  int  i,  sn=0;\n  /*@\n\n*/\nfor(i=1; i<=8; i++){\n    sn = sn +(2);\n  }\n  {;\n//@ assert(sn==8*(2)|| sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 39: Assignment operators not allowed in annotations.",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n  int  i,  sn=0;\n  /*@\nloop invariant i1: 0 <= i <= 8;\nloop invariant i2: 0 <= sn <= 16;\nloop invariant i3: sn == (i - 1) * 2;\nloop invariant i4: 1 <= i <= 8;\nloop invariant i5: sn == i * (2 - 1) + (i - 1) * i / 2;\nloop invariant i6: 1 <= i <= 9;\nloop invariant i7: 10*i <= sn <= 18*i;\nloop invariant i8: sn == (2 * i);\nloop invariant i9: sn >= 0;\nloop invariant i10: sn <= 16;\nloop invariant i11: sn == 8*(2);\nloop invariant i12: 0 <= sn <= 8*2;\nloop invariant i13: sn == i*2;\nloop invariant i14: 0 <= sn <= 8*(2);\nloop invariant i15: sn == 2*i;\nloop invariant i16: sn == (2 * i) - 2;\nloop invariant i17: i == 8 ==> sn == 8*(2);\nloop invariant i18: i <= 8 ==> sn == 0;\nloop invariant i19: 0 <= sn <= 8 * 2;\nloop invariant i20: sn >= 2 * i - 2;\nloop invariant i21: sn == 2 * i - 2;\nloop invariant i22: sn == 8 * 2;\nloop invariant i23: sn == 0;\nloop invariant i24: 8 <= sn <= 80;\nloop invariant i25: sn == (2 * (i - 1));\nloop invariant i26: i >= 1;\nloop invariant i27: (sn == (2 * (i - 1))) ==> (sn == 8 * (2) || sn == 0);\nloop invariant i28: i - 1 <= sn <= i * (2);\nloop invariant i29: sn == (2) * (i - 1) + (i - 1) * (i - 2) / 2;\nloop invariant i30: sn = i * 2;\nloop invariant i31: i * 2 <= sn;\nloop invariant i32: sn + 2 * (8 - i) <= 8 * 2;\nloop invariant i33: sn + 2 * (8 - i) == 0 || sn + 2 * (8 - i) == 8 * 2;\nloop invariant i34: sn == 8 * 2 || sn == 0;\nloop invariant i35: (sn == 8 * 2 || sn == 0) ==> sn == 8 * 2 || sn == 0;\nloop invariant i36: 0 <= sn <= 8;\nloop invariant i37: sn == i * 2;\nloop invariant i38: i == sn / 2;\nloop invariant i39: (i <= 8 ==> sn == i * 2);\nloop invariant i40: (i > 8 ==> sn == 0);\n*/\nfor(i=1; i<=8; i++){\n    sn = sn +(2);\n  }\n  {;\n//@ assert(sn==8*(2)|| sn == 0);\n}\n\n}",
        "combined_annotation_num_solver_calls": 25,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n  int  i,  sn=0;\n  /*@\n\nloop invariant i2: 0 <= sn <= 16;\nloop invariant i3: sn == (i - 1) * 2;\n\n\nloop invariant i6: 1 <= i <= 9;\n\n\nloop invariant i9: sn >= 0;\nloop invariant i10: sn <= 16;\n\nloop invariant i12: 0 <= sn <= 8*2;\n\nloop invariant i14: 0 <= sn <= 8*(2);\n\nloop invariant i16: sn == (2 * i) - 2;\n\n\nloop invariant i19: 0 <= sn <= 8 * 2;\nloop invariant i20: sn >= 2 * i - 2;\nloop invariant i21: sn == 2 * i - 2;\n\n\n\nloop invariant i25: sn == (2 * (i - 1));\nloop invariant i26: i >= 1;\n\nloop invariant i28: i - 1 <= sn <= i * (2);\n\n\n\nloop invariant i32: sn + 2 * (8 - i) <= 8 * 2;\n\n\nloop invariant i35: (sn == 8 * 2 || sn == 0) ==> sn == 8 * 2 || sn == 0;\n\n\n\n\n\n*/\nfor(i=1; i<=8; i++){\n    sn = sn +(2);\n  }\n  {;\n//@ assert(sn==8*(2)|| sn == 0);\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/split.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c"
        ],
        "skipped": [],
        "total": 64,
        "success_count": 54,
        "failure_count": 10,
        "success_rate": 0.84375
    }
}