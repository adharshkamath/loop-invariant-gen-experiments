{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/41.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nint main() {\n   int n = unknown1();\n   int flag = unknown1();\n\n   if(n>=0){\n   int k = 1;\n   if(flag) {\n\tk = unknown1();\n\tif(k>=0) ; else return 0;\n   }\n   int i = 0, j = 0;\n   while(i <= n) {\n     i++;\n     j+=i;\n   }\n   int z = k + i + j;\n   {;\n//@ assert(z > 2*n);\n}\n\n   }\n   return 0;\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= j <= ((n * (n + 1)) / 2);\nloop invariant 1 <= k <= n;\nloop invariant z >= k + i + ((n * (n + 1)) / 2);\n*/\n```",
            "```\n/*@\nloop invariant j >= 0;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant (j == ((i * (i - 1)) / 2));\nloop invariant z >= (k + i + j);\nloop invariant z >= (k + i + ((i * (i - 1)) / 2));\nloop invariant z >= (k + i + ((i * (i - 1)) / 2) + i);\nloop invariant z >= (k + i + ((i * (i - 1)) / 2) + i + j);\nloop invariant z >= (k + i + ((i * (i - 1)) / 2) + i + ((i * (i - 1)) / 2));\nloop invariant z >= (k + i + ((i * (i - 1)) / 2) + i + ((i * (i - 1)) / 2) + i);\nloop invariant z >= (k + i + ((i * (i - 1)) / 2) + i + ((i * (i - 1)) / 2) + i + j);\nloop invariant z >= (k + i + ((i * (i - 1)) / 2) + i + ((i * (i - 1)) / 2) + i + ((i * (i - 1)) / 2));\nloop invariant z >= (k + i + ((i * (i - 1)) / 2) + i + ((i * (i - 1)) / 2) + i + ((i * (i - 1)) / 2) + i);\nloop invariant z >= (k + i + ((i * (i - 1)) / 2) + i + ((i * (i - 1)) / 2) + i + ((i * (i - 1)) / 2) + i + j);\nloop invariant z >= (k + i + ((i * (i - 1)) / 2) + i + ((i * (i - 1)) / 2) + i + ((i * (i - 1)) / 2) + i + ((i * (i - 1)) / 2));\nloop invariant z >= (k + i + ((i * (i - 1)) / 2) + i + ((i * (i - 1)) / 2) + i + ((i * (i - 1)) / 2) + i + ((i * (i - 1)) / 2) + i);\nloop invariant z >= (k + i + ((i * (i - 1)) / 2) + i + ((i * (i - 1)) / 2) + i + ((i * (i - 1)) / 2) + i + ((i * (i - 1)) / 2) + i + j);\nloop invariant z >= (k + i + ((i * (i - 1)) / 2) + i + ((i * (i - 1)) / 2) + i + ((i * (i - 1)) / 2) + i + ((i * (i - 1)) / 2) + i + ((i * (i - 1)) / 2));\nloop invariant z >= (k + i + ((i * (i - 1)) / 2) + i + ((i * (i - 1)) / 2) + i + ((i * (i - 1)) / 2) + i + ((i * (i - 1)) / 2) + i + ((i * (i - 1)) / 2) + i);\nloop invariant z >= (k + i + ((i * (i - 1)) / 2) + i + ((i * (i - 1)) / 2) + i + ((i * (i - 1)) / 2) + i + ((i * (i - 1)) / 2) + i + ((i * (i - 1)) / 2) + i + j);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= n;\nloop invariant 0 <= i <= n+1;\nloop invariant 0 <= j <= (n+1)*n/2;\nloop invariant k >= 0;\nloop invariant k <= n;\nloop invariant z >= 0;\nloop invariant z > 2*n;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= n;\nloop invariant 1 <= k <= n;\nloop invariant 0 <= i <= n;\nloop invariant 0 <= j <= n*(n+1)/2;\nloop invariant i + j = n*(n+1)/2;\nloop invariant 0 <= k + i + j <= 3*(n^2 + n)/2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= k <= n;\nloop invariant 0 <= i <= n;\nloop invariant 0 <= j <= i * (i + 1) / 2;\nloop invariant z >= k + i + j;\nloop invariant z <= k + i + (n * (n + 1)) / 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant j >= 0;\nloop invariant j <= (i * (i + 1)) / 2;\nloop invariant i <= n + 1;\nloop invariant j <= (n * (n + 1)) / 2;\nloop invariant z >= k + i + j;\nloop invariant z <= k + n + (n * (n + 1)) / 2;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant 0 <= j <= n*(n+1)/2;\nloop invariant (if flag then k >= 0 else true);\nloop invariant (if flag then k <= n else true);\nloop invariant (if flag then k == unknown1() else true);\nloop invariant (if flag then n >= 0 else true);\nloop invariant (if flag then k <= i else true);\nloop invariant z == (k + i + j);\nloop invariant (if flag then k + i + j > 2*n else true);\nloop invariant (if flag then k <= i else true);\nloop invariant (if flag then k + i + j > 2*n else true);\nloop invariant (if flag then k <= i else true);\nloop invariant (if flag then k + i + j > 2*n else true);\nloop invariant (if flag then k <= i else true);\nloop invariant (if flag then k + i + j > 2*n else true);\nloop invariant (if flag then k <= i else true);\nloop invariant (if flag then k + i + j > 2*n else true);\nloop invariant (if flag then k <= i else true);\nloop invariant (if flag then k + i + j > 2*n else true);\nloop invariant (if flag then k <= i else true);\nloop invariant (if flag then k + i + j > 2*n else true);\nloop invariant (if flag then k <= i else true);\nloop invariant (if flag then k + i + j > 2*n else true);\nloop invariant (if flag then k <= i else true);\nloop invariant (if flag then k + i + j > 2*n else true);\nloop invariant (if flag then k <= i else true);\nloop invariant (if flag then k + i + j > 2*n else true);\nloop invariant (if flag then k <= i else true);\nloop invariant (if flag then k + i + j > 2*n else true);\nloop invariant (if flag then k <= i else true);\nloop invariant (if flag then k + i + j > 2*n else true);\nloop invariant (if flag then k <= i else true);\nloop invariant (if flag then k + i + j > 2*n else true);\nloop invariant (if flag then k <= i else true);\nloop invariant (if flag then k + i + j > 2*n else true);\nloop invariant (if flag then k <= i else true);\nloop invariant (if flag then k + i + j > 2*n else true);\nloop invariant (if flag then k <= i else true);\nloop invariant (if flag then k + i + j > 2*n else true);\nloop invariant (if flag then k <= i else true);\nloop invariant (if flag then k + i + j > 2*n else true);\nloop invariant (if flag then k <= i else true);\nloop invariant (if flag then k + i + j > 2*n else true);\nloop invariant (if flag then k <= i else true);\nloop invariant (if flag then k + i + j > 2*n else true);\nloop invariant (if flag then k <= i else true);\nloop invariant (if flag then k + i + j > 2*n else true);\nloop invariant (if flag then k <= i else true);\nloop invariant (if flag then k + i + j > 2*n else true);\nloop invariant (if flag then k <= i else true);\nloop invariant (if flag then k + i + j > 2*n else true);\nloop invariant (if flag then k <= i else true);\nloop invariant (if flag then k + i + j > 2*n else true);\nloop invariant (if flag then k <= i else true);\nloop invariant (if flag then k + i + j > 2*n else true);\nloop invariant (if flag then k <= i else true);\nloop invariant (if flag then k + i + j > 2*n else true);\nloop invariant (if flag then k <= i else true);\nloop invariant (if flag then k + i + j > 2*n else true);\nloop invariant (if flag then k <= i else true);\nloop invariant (if flag then k + i + j > 2*n else true);\nloop invariant (if flag then k <= i else true);\nloop invariant (if flag then k + i + j > 2*n else true);\nloop invariant (if flag then k <= i else true);\nloop invariant (if flag then k + i + j > 2*n else true);\nloop invariant (if flag then k <= i else true);\nloop invariant (if flag then k + i + j > 2*n else true);\nloop invariant (if flag then k <= i else true);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= j <= (n*(n+1))/2;\nloop invariant (k + i + j) > 2*n ==> z > 2*n;\nloop invariant 0 <= k <= n ==> k + i + j > 2*n;\nloop invariant 0 <= i <= n ==> k + i + j > 2*n;\nloop invariant 0 <= j <= (n*(n+1))/2 ==> k + i + j > 2*n;\nloop invariant 0 <= i <= n ==> k + i + j > 2*n;\nloop invariant 0 <= j <= (n*(n+1))/2 ==> k + i + j > 2*n;\nloop invariant 0 <= k <= n ==> k + i + j > 2*n;\nloop invariant k + i + j > 2*n;\nloop invariant 0 <= k <= n ==> k + i + j > 2*n;\nloop invariant k + i + j > 2*n;\nloop invariant 0 <= k <= n ==> k + i + j > 2*n;\nloop invariant k + i + j > 2*n;\nloop invariant 0 <= k <= n ==> k + i + j > 2*n;\nloop invariant k + i + j > 2*n;\nloop invariant 0 <= k <= n ==> k + i + j > 2*n;\nloop invariant k + i + j > 2*n;\nloop invariant 0 <= k <= n ==> k + i + j > 2*n;\nloop invariant k + i + j > 2*n;\nloop invariant 0 <= k <= n ==> k + i + j > 2*n;\nloop invariant k + i + j > 2*n;\nloop invariant 0 <= k <= n ==> k + i + j > 2*n;\nloop invariant k + i + j > 2*n;\nloop invariant 0 <= k <= n ==> k + i + j > 2*n;\nloop invariant k + i + j > 2*n;\nloop invariant 0 <= k <= n ==> k + i + j > 2*n;\nloop invariant k + i + j > 2*n;\nloop invariant 0 <= k <= n ==> k + i + j > 2*n;\nloop invariant k + i + j > 2*n;\nloop invariant 0 <= k <= n ==> k + i + j > 2*n;\nloop invariant k + i + j > 2*n;\nloop invariant 0 <= k <= n ==> k + i + j > 2*n;\nloop invariant k + i + j > 2*n;\nloop invariant 0 <= k <= n ==> k + i + j > 2*n;\nloop invariant k + i + j > 2*n;\nloop invariant 0 <= k <= n ==> k + i + j > 2*n;\nloop invariant k + i + j > 2*n;\nloop invariant 0 <= k <= n ==> k + i + j > 2*n;\nloop invariant k + i + j > 2*n;\nloop invariant 0 <= k <= n ==> k + i + j > 2*n;\nloop invariant k + i + j > 2*n;\nloop invariant 0 <= k <= n ==> k + i + j > 2*n;\nloop invariant k + i + j > 2*n;\nloop invariant 0 <= k <= n ==> k + i + j > 2*n;\nloop invariant k + i + j > 2*n;\nloop invariant 0 <= k <= n ==> k + i + j > 2*n;\nloop invariant k + i + j > 2*n;\nloop invariant 0 <= k <= n ==> k + i + j > 2*n;\nloop invariant k + i + j > 2*n;\nloop invariant 0 <= k <= n ==> k + i + j > 2*n;\nloop invariant k + i + j > 2*n;\nloop invariant 0 <= k <= n ==> k + i + j > 2*n;\nloop invariant k + i + j > 2*n;\nloop invariant 0 <= k <= n ==> k + i + j > 2*n;\nloop invariant k + i + j > 2*n;\nloop invariant 0 <= k <= n ==> k + i + j > 2*n;\nloop invariant k + i + j > 2*n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= n;\nloop invariant 0 <= flag;\nloop invariant 0 <= i <= n;\nloop invariant 0 <= j <= (n * (n + 1) / 2);\nloop invariant k >= 0;\nloop invariant k <= n;\nloop invariant z >= k + i + j;\nloop invariant z <= (k + n + (n * (n + 1) / 2));\nloop invariant z > 2 * n ==> k != 0;\nloop invariant z > 2 * n ==> i != n;\nloop invariant z > 2 * n ==> j != (n * (n + 1) / 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n + 1;\nloop invariant 0 <= j <= n * (n + 1) / 2;\nloop invariant k >= 0;\nloop invariant k <= n * (n + 1) / 2;\nloop invariant z >= 2 * n;\nloop invariant z <= 3 * n * (n + 1) / 2 + k;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= j <= (n * (n + 1)) / 2;\nloop invariant 0 <= i <= n;\nloop invariant 0 <= k <= n;\nloop invariant z == k + i + j;\nloop invariant i <= n;\n*/\n```",
            "```\n/*@\nloop invariant j = (i * (i - 1) / 2);\nloop invariant i <= n + 1;\nloop invariant j >= 0;\nloop invariant i >= 0;\nloop invariant n >= 0;\nloop invariant k >= 0;\nloop invariant flag >= 0;\nloop invariant k <= n;\nloop invariant j <= (n * (n - 1) / 2);\nloop invariant i >= (j - (n * (n - 1) / 2)) / n;\nloop invariant k >= (j - (n * (n - 1) / 2)) / (n + 1);\nloop invariant j <= (n * (n + 1) / 2);\nloop invariant i <= (j - (n * (n + 1) / 2)) / (n + 1);\nloop invariant k <= (j - (n * (n + 1) / 2)) / (n + 2);\nloop invariant j >= (n * (n + 1) / 2) - k;\nloop invariant j <= (n * (n + 1) / 2) + k;\nloop invariant i >= (j - (n * (n + 1) / 2)) / (n + 2);\nloop invariant k >= (j - (n * (n + 1) / 2)) / (n + 3);\nloop invariant j >= (n * (n + 1) / 2) - k - flag;\nloop invariant j <= (n * (n + 1) / 2) + k + flag;\nloop invariant i >= (j - (n * (n + 1) / 2)) / (n + 3);\nloop invariant k >= (j - (n * (n + 1) / 2)) / (n + 4);\nloop invariant j >= (n * (n + 1) / 2) - k - flag;\nloop invariant j <= (n * (n + 1) / 2) + k + flag;\nloop invariant i >= (j - (n * (n + 1) / 2)) / (n + 4);\nloop invariant k >= (j - (n * (n + 1) / 2)) / (n + 5);\nloop invariant j >= (n * (n + 1) / 2) - k - flag;\nloop invariant j <= (n * (n + 1) / 2) + k + flag;\nloop invariant i >= (j - (n * (n + 1) / 2)) / (n + 5);\nloop invariant k >= (j - (n * (n + 1) / 2)) / (n + 6);\nloop invariant j >= (n * (n + 1) / 2) - k - flag;\nloop invariant j <= (n * (n + 1) / 2) + k + flag;\nloop invariant i >= (j - (n * (n + 1) / 2)) / (n + 6);\nloop invariant k >= (j - (n * (n + 1) / 2)) / (n + 7);\nloop invariant j >= (n * (n + 1) / 2) - k - flag;\nloop invariant j <= (n * (n + 1) / 2) + k + flag;\nloop invariant i >= (j - (n * (n + 1) / 2)) / (n + 7);\nloop invariant k >= (j - (n * (n + 1) / 2)) / (n + 8);\nloop invariant j >= (n * (n + 1) / 2) - k - flag;\nloop invariant j <= (n * (n + 1) / 2) + k + flag;\nloop invariant i >= (j - (n * (n + 1) / 2)) / (n + 8);\nloop invariant k >= (j - (n * (n + 1) / 2)) / (n + 9);\nloop invariant j >= (n * (n + 1) / 2) - k - flag;\nloop invariant j <= (n * (n + 1) / 2) + k + flag;\nloop invariant i >= (j - (n * (n + 1) / 2)) / (n + 9);\nloop invariant k >= (j - (n * (n + 1) / 2)) / (n + 10);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n + 1;\nloop invariant 0 <= j <= (n * (n + 1)) / 2;\nloop invariant z = k + i + j;\nloop invariant z > 2 * n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n + 1;\nloop invariant 0 <= j <= i * (n + 1) / 2;\nloop invariant k >= 0;\nloop invariant n >= 0;\nloop invariant j >= (i * (i - 1)) / 2;\nloop invariant n >= i - 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= n <= 100000;\nloop invariant 0 <= flag <= 1;\nloop invariant 0 <= k <= 100000;\nloop invariant 0 <= i <= n;\nloop invariant 0 <= j <= n*(n+1)/2;\nloop invariant 0 <= z <= 3*n + 100000;\nloop invariant j == i*(i+1)/2;\nloop invariant z == k + i + j;\nloop invariant z > 2*n ==> i > n;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= j <= ((n * (n + 1)) / 2);\nloop invariant 1 <= k <= n;\nloop invariant z >= k + i + ((n * (n + 1)) / 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nint main() {\n   int n = unknown1();\n   int flag = unknown1();\n\n   if(n>=0){\n   int k = 1;\n   if(flag) {\n\tk = unknown1();\n\tif(k>=0) ; else return 0;\n   }\n   int i = 0, j = 0;\n   /*@\n\n\n\n\n*/\nwhile(i <= n) {\n     i++;\n     j+=i;\n   }\n   int z = k + i + j;\n   {;\n//@ assert(z > 2*n);\n}\n\n   }\n   return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 18,
                "annotations": "```\n/*@\nloop invariant j >= 0;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant (j == ((i * (i - 1)) / 2));\nloop invariant z >= (k + i + j);\nloop invariant z >= (k + i + ((i * (i - 1)) / 2));\nloop invariant z >= (k + i + ((i * (i - 1)) / 2) + i);\nloop invariant z >= (k + i + ((i * (i - 1)) / 2) + i + j);\nloop invariant z >= (k + i + ((i * (i - 1)) / 2) + i + ((i * (i - 1)) / 2));\nloop invariant z >= (k + i + ((i * (i - 1)) / 2) + i + ((i * (i - 1)) / 2) + i);\nloop invariant z >= (k + i + ((i * (i - 1)) / 2) + i + ((i * (i - 1)) / 2) + i + j);\nloop invariant z >= (k + i + ((i * (i - 1)) / 2) + i + ((i * (i - 1)) / 2) + i + ((i * (i - 1)) / 2));\nloop invariant z >= (k + i + ((i * (i - 1)) / 2) + i + ((i * (i - 1)) / 2) + i + ((i * (i - 1)) / 2) + i);\nloop invariant z >= (k + i + ((i * (i - 1)) / 2) + i + ((i * (i - 1)) / 2) + i + ((i * (i - 1)) / 2) + i + j);\nloop invariant z >= (k + i + ((i * (i - 1)) / 2) + i + ((i * (i - 1)) / 2) + i + ((i * (i - 1)) / 2) + i + ((i * (i - 1)) / 2));\nloop invariant z >= (k + i + ((i * (i - 1)) / 2) + i + ((i * (i - 1)) / 2) + i + ((i * (i - 1)) / 2) + i + ((i * (i - 1)) / 2) + i);\nloop invariant z >= (k + i + ((i * (i - 1)) / 2) + i + ((i * (i - 1)) / 2) + i + ((i * (i - 1)) / 2) + i + ((i * (i - 1)) / 2) + i + j);\nloop invariant z >= (k + i + ((i * (i - 1)) / 2) + i + ((i * (i - 1)) / 2) + i + ((i * (i - 1)) / 2) + i + ((i * (i - 1)) / 2) + i + ((i * (i - 1)) / 2));\nloop invariant z >= (k + i + ((i * (i - 1)) / 2) + i + ((i * (i - 1)) / 2) + i + ((i * (i - 1)) / 2) + i + ((i * (i - 1)) / 2) + i + ((i * (i - 1)) / 2) + i);\nloop invariant z >= (k + i + ((i * (i - 1)) / 2) + i + ((i * (i - 1)) / 2) + i + ((i * (i - 1)) / 2) + i + ((i * (i - 1)) / 2) + i + ((i * (i - 1)) / 2) + i + j);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nint main() {\n   int n = unknown1();\n   int flag = unknown1();\n\n   if(n>=0){\n   int k = 1;\n   if(flag) {\n\tk = unknown1();\n\tif(k>=0) ; else return 0;\n   }\n   int i = 0, j = 0;\n   /*@\nloop invariant i1: j >= 0;\nloop invariant i2: i >= 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile(i <= n) {\n     i++;\n     j+=i;\n   }\n   int z = k + i + j;\n   {;\n//@ assert(z > 2*n);\n}\n\n   }\n   return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= n;\nloop invariant 0 <= i <= n+1;\nloop invariant 0 <= j <= (n+1)*n/2;\nloop invariant k >= 0;\nloop invariant k <= n;\nloop invariant z >= 0;\nloop invariant z > 2*n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nint main() {\n   int n = unknown1();\n   int flag = unknown1();\n\n   if(n>=0){\n   int k = 1;\n   if(flag) {\n\tk = unknown1();\n\tif(k>=0) ; else return 0;\n   }\n   int i = 0, j = 0;\n   /*@\nloop invariant i1: 0 <= n;\nloop invariant i2: 0 <= i <= n+1;\n\nloop invariant i4: k >= 0;\n\n\n\n*/\nwhile(i <= n) {\n     i++;\n     j+=i;\n   }\n   int z = k + i + j;\n   {;\n//@ assert(z > 2*n);\n}\n\n   }\n   return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 1 <= n;\nloop invariant 1 <= k <= n;\nloop invariant 0 <= i <= n;\nloop invariant 0 <= j <= n*(n+1)/2;\nloop invariant i + j = n*(n+1)/2;\nloop invariant 0 <= k + i + j <= 3*(n^2 + n)/2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nint main() {\n   int n = unknown1();\n   int flag = unknown1();\n\n   if(n>=0){\n   int k = 1;\n   if(flag) {\n\tk = unknown1();\n\tif(k>=0) ; else return 0;\n   }\n   int i = 0, j = 0;\n   /*@\n\n\n\n\n\n\n*/\nwhile(i <= n) {\n     i++;\n     j+=i;\n   }\n   int z = k + i + j;\n   {;\n//@ assert(z > 2*n);\n}\n\n   }\n   return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= k <= n;\nloop invariant 0 <= i <= n;\nloop invariant 0 <= j <= i * (i + 1) / 2;\nloop invariant z >= k + i + j;\nloop invariant z <= k + i + (n * (n + 1)) / 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nint main() {\n   int n = unknown1();\n   int flag = unknown1();\n\n   if(n>=0){\n   int k = 1;\n   if(flag) {\n\tk = unknown1();\n\tif(k>=0) ; else return 0;\n   }\n   int i = 0, j = 0;\n   /*@\n\n\n\n\n\n*/\nwhile(i <= n) {\n     i++;\n     j+=i;\n   }\n   int z = k + i + j;\n   {;\n//@ assert(z > 2*n);\n}\n\n   }\n   return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant j >= 0;\nloop invariant j <= (i * (i + 1)) / 2;\nloop invariant i <= n + 1;\nloop invariant j <= (n * (n + 1)) / 2;\nloop invariant z >= k + i + j;\nloop invariant z <= k + n + (n * (n + 1)) / 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nint main() {\n   int n = unknown1();\n   int flag = unknown1();\n\n   if(n>=0){\n   int k = 1;\n   if(flag) {\n\tk = unknown1();\n\tif(k>=0) ; else return 0;\n   }\n   int i = 0, j = 0;\n   /*@\n\n\nloop invariant i3: j <= (i * (i + 1)) / 2;\nloop invariant i4: i <= n + 1;\n\n\n\n*/\nwhile(i <= n) {\n     i++;\n     j+=i;\n   }\n   int z = k + i + j;\n   {;\n//@ assert(z > 2*n);\n}\n\n   }\n   return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 9,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant 0 <= j <= n*(n+1)/2;\nloop invariant (if flag then k >= 0 else true);\nloop invariant (if flag then k <= n else true);\nloop invariant (if flag then k == unknown1() else true);\nloop invariant (if flag then n >= 0 else true);\nloop invariant (if flag then k <= i else true);\nloop invariant z == (k + i + j);\nloop invariant (if flag then k + i + j > 2*n else true);\nloop invariant (if flag then k <= i else true);\nloop invariant (if flag then k + i + j > 2*n else true);\nloop invariant (if flag then k <= i else true);\nloop invariant (if flag then k + i + j > 2*n else true);\nloop invariant (if flag then k <= i else true);\nloop invariant (if flag then k + i + j > 2*n else true);\nloop invariant (if flag then k <= i else true);\nloop invariant (if flag then k + i + j > 2*n else true);\nloop invariant (if flag then k <= i else true);\nloop invariant (if flag then k + i + j > 2*n else true);\nloop invariant (if flag then k <= i else true);\nloop invariant (if flag then k + i + j > 2*n else true);\nloop invariant (if flag then k <= i else true);\nloop invariant (if flag then k + i + j > 2*n else true);\nloop invariant (if flag then k <= i else true);\nloop invariant (if flag then k + i + j > 2*n else true);\nloop invariant (if flag then k <= i else true);\nloop invariant (if flag then k + i + j > 2*n else true);\nloop invariant (if flag then k <= i else true);\nloop invariant (if flag then k + i + j > 2*n else true);\nloop invariant (if flag then k <= i else true);\nloop invariant (if flag then k + i + j > 2*n else true);\nloop invariant (if flag then k <= i else true);\nloop invariant (if flag then k + i + j > 2*n else true);\nloop invariant (if flag then k <= i else true);\nloop invariant (if flag then k + i + j > 2*n else true);\nloop invariant (if flag then k <= i else true);\nloop invariant (if flag then k + i + j > 2*n else true);\nloop invariant (if flag then k <= i else true);\nloop invariant (if flag then k + i + j > 2*n else true);\nloop invariant (if flag then k <= i else true);\nloop invariant (if flag then k + i + j > 2*n else true);\nloop invariant (if flag then k <= i else true);\nloop invariant (if flag then k + i + j > 2*n else true);\nloop invariant (if flag then k <= i else true);\nloop invariant (if flag then k + i + j > 2*n else true);\nloop invariant (if flag then k <= i else true);\nloop invariant (if flag then k + i + j > 2*n else true);\nloop invariant (if flag then k <= i else true);\nloop invariant (if flag then k + i + j > 2*n else true);\nloop invariant (if flag then k <= i else true);\nloop invariant (if flag then k + i + j > 2*n else true);\nloop invariant (if flag then k <= i else true);\nloop invariant (if flag then k + i + j > 2*n else true);\nloop invariant (if flag then k <= i else true);\nloop invariant (if flag then k + i + j > 2*n else true);\nloop invariant (if flag then k <= i else true);\nloop invariant (if flag then k + i + j > 2*n else true);\nloop invariant (if flag then k <= i else true);\nloop invariant (if flag then k + i + j > 2*n else true);\nloop invariant (if flag then k <= i else true);\nloop invariant (if flag then k + i + j > 2*n else true);\nloop invariant (if flag then k <= i else true);\nloop invariant (if flag then k + i + j > 2*n else true);\nloop invariant (if flag then k <= i else true);\nloop invariant (if flag then k + i + j > 2*n else true);\nloop invariant (if flag then k <= i else true);\nloop invariant (if flag then k + i + j > 2*n else true);\nloop invariant (if flag then k <= i else true);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nint main() {\n   int n = unknown1();\n   int flag = unknown1();\n\n   if(n>=0){\n   int k = 1;\n   if(flag) {\n\tk = unknown1();\n\tif(k>=0) ; else return 0;\n   }\n   int i = 0, j = 0;\n   /*@\n\n\n\n\n\n\n\n\n\n*/\nwhile(i <= n) {\n     i++;\n     j+=i;\n   }\n   int z = k + i + j;\n   {;\n//@ assert(z > 2*n);\n}\n\n   }\n   return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= j <= (n*(n+1))/2;\nloop invariant (k + i + j) > 2*n ==> z > 2*n;\nloop invariant 0 <= k <= n ==> k + i + j > 2*n;\nloop invariant 0 <= i <= n ==> k + i + j > 2*n;\nloop invariant 0 <= j <= (n*(n+1))/2 ==> k + i + j > 2*n;\nloop invariant 0 <= i <= n ==> k + i + j > 2*n;\nloop invariant 0 <= j <= (n*(n+1))/2 ==> k + i + j > 2*n;\nloop invariant 0 <= k <= n ==> k + i + j > 2*n;\nloop invariant k + i + j > 2*n;\nloop invariant 0 <= k <= n ==> k + i + j > 2*n;\nloop invariant k + i + j > 2*n;\nloop invariant 0 <= k <= n ==> k + i + j > 2*n;\nloop invariant k + i + j > 2*n;\nloop invariant 0 <= k <= n ==> k + i + j > 2*n;\nloop invariant k + i + j > 2*n;\nloop invariant 0 <= k <= n ==> k + i + j > 2*n;\nloop invariant k + i + j > 2*n;\nloop invariant 0 <= k <= n ==> k + i + j > 2*n;\nloop invariant k + i + j > 2*n;\nloop invariant 0 <= k <= n ==> k + i + j > 2*n;\nloop invariant k + i + j > 2*n;\nloop invariant 0 <= k <= n ==> k + i + j > 2*n;\nloop invariant k + i + j > 2*n;\nloop invariant 0 <= k <= n ==> k + i + j > 2*n;\nloop invariant k + i + j > 2*n;\nloop invariant 0 <= k <= n ==> k + i + j > 2*n;\nloop invariant k + i + j > 2*n;\nloop invariant 0 <= k <= n ==> k + i + j > 2*n;\nloop invariant k + i + j > 2*n;\nloop invariant 0 <= k <= n ==> k + i + j > 2*n;\nloop invariant k + i + j > 2*n;\nloop invariant 0 <= k <= n ==> k + i + j > 2*n;\nloop invariant k + i + j > 2*n;\nloop invariant 0 <= k <= n ==> k + i + j > 2*n;\nloop invariant k + i + j > 2*n;\nloop invariant 0 <= k <= n ==> k + i + j > 2*n;\nloop invariant k + i + j > 2*n;\nloop invariant 0 <= k <= n ==> k + i + j > 2*n;\nloop invariant k + i + j > 2*n;\nloop invariant 0 <= k <= n ==> k + i + j > 2*n;\nloop invariant k + i + j > 2*n;\nloop invariant 0 <= k <= n ==> k + i + j > 2*n;\nloop invariant k + i + j > 2*n;\nloop invariant 0 <= k <= n ==> k + i + j > 2*n;\nloop invariant k + i + j > 2*n;\nloop invariant 0 <= k <= n ==> k + i + j > 2*n;\nloop invariant k + i + j > 2*n;\nloop invariant 0 <= k <= n ==> k + i + j > 2*n;\nloop invariant k + i + j > 2*n;\nloop invariant 0 <= k <= n ==> k + i + j > 2*n;\nloop invariant k + i + j > 2*n;\nloop invariant 0 <= k <= n ==> k + i + j > 2*n;\nloop invariant k + i + j > 2*n;\nloop invariant 0 <= k <= n ==> k + i + j > 2*n;\nloop invariant k + i + j > 2*n;\nloop invariant 0 <= k <= n ==> k + i + j > 2*n;\nloop invariant k + i + j > 2*n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nint main() {\n   int n = unknown1();\n   int flag = unknown1();\n\n   if(n>=0){\n   int k = 1;\n   if(flag) {\n\tk = unknown1();\n\tif(k>=0) ; else return 0;\n   }\n   int i = 0, j = 0;\n   /*@\n\n\n\n\n\n\n\n*/\nwhile(i <= n) {\n     i++;\n     j+=i;\n   }\n   int z = k + i + j;\n   {;\n//@ assert(z > 2*n);\n}\n\n   }\n   return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant 0 <= n;\nloop invariant 0 <= flag;\nloop invariant 0 <= i <= n;\nloop invariant 0 <= j <= (n * (n + 1) / 2);\nloop invariant k >= 0;\nloop invariant k <= n;\nloop invariant z >= k + i + j;\nloop invariant z <= (k + n + (n * (n + 1) / 2));\nloop invariant z > 2 * n ==> k != 0;\nloop invariant z > 2 * n ==> i != n;\nloop invariant z > 2 * n ==> j != (n * (n + 1) / 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nint main() {\n   int n = unknown1();\n   int flag = unknown1();\n\n   if(n>=0){\n   int k = 1;\n   if(flag) {\n\tk = unknown1();\n\tif(k>=0) ; else return 0;\n   }\n   int i = 0, j = 0;\n   /*@\nloop invariant i1: 0 <= n;\n\n\n\nloop invariant i5: k >= 0;\n\n\n\n\n\n\n*/\nwhile(i <= n) {\n     i++;\n     j+=i;\n   }\n   int z = k + i + j;\n   {;\n//@ assert(z > 2*n);\n}\n\n   }\n   return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n + 1;\nloop invariant 0 <= j <= n * (n + 1) / 2;\nloop invariant k >= 0;\nloop invariant k <= n * (n + 1) / 2;\nloop invariant z >= 2 * n;\nloop invariant z <= 3 * n * (n + 1) / 2 + k;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nint main() {\n   int n = unknown1();\n   int flag = unknown1();\n\n   if(n>=0){\n   int k = 1;\n   if(flag) {\n\tk = unknown1();\n\tif(k>=0) ; else return 0;\n   }\n   int i = 0, j = 0;\n   /*@\nloop invariant i1: 0 <= i <= n + 1;\n\nloop invariant i3: k >= 0;\n\n\n\n*/\nwhile(i <= n) {\n     i++;\n     j+=i;\n   }\n   int z = k + i + j;\n   {;\n//@ assert(z > 2*n);\n}\n\n   }\n   return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= j <= (n * (n + 1)) / 2;\nloop invariant 0 <= i <= n;\nloop invariant 0 <= k <= n;\nloop invariant z == k + i + j;\nloop invariant i <= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nint main() {\n   int n = unknown1();\n   int flag = unknown1();\n\n   if(n>=0){\n   int k = 1;\n   if(flag) {\n\tk = unknown1();\n\tif(k>=0) ; else return 0;\n   }\n   int i = 0, j = 0;\n   /*@\n\n\n\n\n\n*/\nwhile(i <= n) {\n     i++;\n     j+=i;\n   }\n   int z = k + i + j;\n   {;\n//@ assert(z > 2*n);\n}\n\n   }\n   return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant j = (i * (i - 1) / 2);\nloop invariant i <= n + 1;\nloop invariant j >= 0;\nloop invariant i >= 0;\nloop invariant n >= 0;\nloop invariant k >= 0;\nloop invariant flag >= 0;\nloop invariant k <= n;\nloop invariant j <= (n * (n - 1) / 2);\nloop invariant i >= (j - (n * (n - 1) / 2)) / n;\nloop invariant k >= (j - (n * (n - 1) / 2)) / (n + 1);\nloop invariant j <= (n * (n + 1) / 2);\nloop invariant i <= (j - (n * (n + 1) / 2)) / (n + 1);\nloop invariant k <= (j - (n * (n + 1) / 2)) / (n + 2);\nloop invariant j >= (n * (n + 1) / 2) - k;\nloop invariant j <= (n * (n + 1) / 2) + k;\nloop invariant i >= (j - (n * (n + 1) / 2)) / (n + 2);\nloop invariant k >= (j - (n * (n + 1) / 2)) / (n + 3);\nloop invariant j >= (n * (n + 1) / 2) - k - flag;\nloop invariant j <= (n * (n + 1) / 2) + k + flag;\nloop invariant i >= (j - (n * (n + 1) / 2)) / (n + 3);\nloop invariant k >= (j - (n * (n + 1) / 2)) / (n + 4);\nloop invariant j >= (n * (n + 1) / 2) - k - flag;\nloop invariant j <= (n * (n + 1) / 2) + k + flag;\nloop invariant i >= (j - (n * (n + 1) / 2)) / (n + 4);\nloop invariant k >= (j - (n * (n + 1) / 2)) / (n + 5);\nloop invariant j >= (n * (n + 1) / 2) - k - flag;\nloop invariant j <= (n * (n + 1) / 2) + k + flag;\nloop invariant i >= (j - (n * (n + 1) / 2)) / (n + 5);\nloop invariant k >= (j - (n * (n + 1) / 2)) / (n + 6);\nloop invariant j >= (n * (n + 1) / 2) - k - flag;\nloop invariant j <= (n * (n + 1) / 2) + k + flag;\nloop invariant i >= (j - (n * (n + 1) / 2)) / (n + 6);\nloop invariant k >= (j - (n * (n + 1) / 2)) / (n + 7);\nloop invariant j >= (n * (n + 1) / 2) - k - flag;\nloop invariant j <= (n * (n + 1) / 2) + k + flag;\nloop invariant i >= (j - (n * (n + 1) / 2)) / (n + 7);\nloop invariant k >= (j - (n * (n + 1) / 2)) / (n + 8);\nloop invariant j >= (n * (n + 1) / 2) - k - flag;\nloop invariant j <= (n * (n + 1) / 2) + k + flag;\nloop invariant i >= (j - (n * (n + 1) / 2)) / (n + 8);\nloop invariant k >= (j - (n * (n + 1) / 2)) / (n + 9);\nloop invariant j >= (n * (n + 1) / 2) - k - flag;\nloop invariant j <= (n * (n + 1) / 2) + k + flag;\nloop invariant i >= (j - (n * (n + 1) / 2)) / (n + 9);\nloop invariant k >= (j - (n * (n + 1) / 2)) / (n + 10);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nint main() {\n   int n = unknown1();\n   int flag = unknown1();\n\n   if(n>=0){\n   int k = 1;\n   if(flag) {\n\tk = unknown1();\n\tif(k>=0) ; else return 0;\n   }\n   int i = 0, j = 0;\n   /*@\n\nloop invariant i2: i <= n + 1;\nloop invariant i3: j >= 0;\nloop invariant i4: i >= 0;\nloop invariant i5: n >= 0;\nloop invariant i6: k >= 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile(i <= n) {\n     i++;\n     j+=i;\n   }\n   int z = k + i + j;\n   {;\n//@ assert(z > 2*n);\n}\n\n   }\n   return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n + 1;\nloop invariant 0 <= j <= (n * (n + 1)) / 2;\nloop invariant z = k + i + j;\nloop invariant z > 2 * n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nint main() {\n   int n = unknown1();\n   int flag = unknown1();\n\n   if(n>=0){\n   int k = 1;\n   if(flag) {\n\tk = unknown1();\n\tif(k>=0) ; else return 0;\n   }\n   int i = 0, j = 0;\n   /*@\nloop invariant i1: 0 <= i <= n + 1;\n\n\n\n*/\nwhile(i <= n) {\n     i++;\n     j+=i;\n   }\n   int z = k + i + j;\n   {;\n//@ assert(z > 2*n);\n}\n\n   }\n   return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n + 1;\nloop invariant 0 <= j <= i * (n + 1) / 2;\nloop invariant k >= 0;\nloop invariant n >= 0;\nloop invariant j >= (i * (i - 1)) / 2;\nloop invariant n >= i - 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nint main() {\n   int n = unknown1();\n   int flag = unknown1();\n\n   if(n>=0){\n   int k = 1;\n   if(flag) {\n\tk = unknown1();\n\tif(k>=0) ; else return 0;\n   }\n   int i = 0, j = 0;\n   /*@\nloop invariant i1: 0 <= i <= n + 1;\n\nloop invariant i3: k >= 0;\nloop invariant i4: n >= 0;\nloop invariant i5: j >= (i * (i - 1)) / 2;\nloop invariant i6: n >= i - 1;\n*/\nwhile(i <= n) {\n     i++;\n     j+=i;\n   }\n   int z = k + i + j;\n   {;\n//@ assert(z > 2*n);\n}\n\n   }\n   return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= n <= 100000;\nloop invariant 0 <= flag <= 1;\nloop invariant 0 <= k <= 100000;\nloop invariant 0 <= i <= n;\nloop invariant 0 <= j <= n*(n+1)/2;\nloop invariant 0 <= z <= 3*n + 100000;\nloop invariant j == i*(i+1)/2;\nloop invariant z == k + i + j;\nloop invariant z > 2*n ==> i > n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nint main() {\n   int n = unknown1();\n   int flag = unknown1();\n\n   if(n>=0){\n   int k = 1;\n   if(flag) {\n\tk = unknown1();\n\tif(k>=0) ; else return 0;\n   }\n   int i = 0, j = 0;\n   /*@\n\n\n\n\n\n\nloop invariant i7: j == i*(i+1)/2;\n\n\n*/\nwhile(i <= n) {\n     i++;\n     j+=i;\n   }\n   int z = k + i + j;\n   {;\n//@ assert(z > 2*n);\n}\n\n   }\n   return 0;\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 54: Assignment operators not allowed in annotations.",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nint main() {\n   int n = unknown1();\n   int flag = unknown1();\n\n   if(n>=0){\n   int k = 1;\n   if(flag) {\n\tk = unknown1();\n\tif(k>=0) ; else return 0;\n   }\n   int i = 0, j = 0;\n   /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= j <= ((n * (n + 1)) / 2);\nloop invariant i3: 1 <= k <= n;\nloop invariant i4: z >= k + i + ((n * (n + 1)) / 2);\nloop invariant i5: j >= 0;\nloop invariant i6: i >= 0;\nloop invariant i7: i <= n;\nloop invariant i8: (j == ((i * (i - 1)) / 2));\nloop invariant i9: z >= (k + i + j);\nloop invariant i10: z >= (k + i + ((i * (i - 1)) / 2));\nloop invariant i11: z >= (k + i + ((i * (i - 1)) / 2) + i);\nloop invariant i12: z >= (k + i + ((i * (i - 1)) / 2) + i + j);\nloop invariant i13: z >= (k + i + ((i * (i - 1)) / 2) + i + ((i * (i - 1)) / 2));\nloop invariant i14: z >= (k + i + ((i * (i - 1)) / 2) + i + ((i * (i - 1)) / 2) + i);\nloop invariant i15: z >= (k + i + ((i * (i - 1)) / 2) + i + ((i * (i - 1)) / 2) + i + j);\nloop invariant i16: z >= (k + i + ((i * (i - 1)) / 2) + i + ((i * (i - 1)) / 2) + i + ((i * (i - 1)) / 2));\nloop invariant i17: z >= (k + i + ((i * (i - 1)) / 2) + i + ((i * (i - 1)) / 2) + i + ((i * (i - 1)) / 2) + i);\nloop invariant i18: z >= (k + i + ((i * (i - 1)) / 2) + i + ((i * (i - 1)) / 2) + i + ((i * (i - 1)) / 2) + i + j);\nloop invariant i19: z >= (k + i + ((i * (i - 1)) / 2) + i + ((i * (i - 1)) / 2) + i + ((i * (i - 1)) / 2) + i + ((i * (i - 1)) / 2));\nloop invariant i20: z >= (k + i + ((i * (i - 1)) / 2) + i + ((i * (i - 1)) / 2) + i + ((i * (i - 1)) / 2) + i + ((i * (i - 1)) / 2) + i);\nloop invariant i21: z >= (k + i + ((i * (i - 1)) / 2) + i + ((i * (i - 1)) / 2) + i + ((i * (i - 1)) / 2) + i + ((i * (i - 1)) / 2) + i + j);\nloop invariant i22: z >= (k + i + ((i * (i - 1)) / 2) + i + ((i * (i - 1)) / 2) + i + ((i * (i - 1)) / 2) + i + ((i * (i - 1)) / 2) + i + ((i * (i - 1)) / 2));\nloop invariant i23: z >= (k + i + ((i * (i - 1)) / 2) + i + ((i * (i - 1)) / 2) + i + ((i * (i - 1)) / 2) + i + ((i * (i - 1)) / 2) + i + ((i * (i - 1)) / 2) + i);\nloop invariant i24: z >= (k + i + ((i * (i - 1)) / 2) + i + ((i * (i - 1)) / 2) + i + ((i * (i - 1)) / 2) + i + ((i * (i - 1)) / 2) + i + ((i * (i - 1)) / 2) + i + j);\nloop invariant i25: 0 <= n;\nloop invariant i26: 0 <= i <= n+1;\nloop invariant i27: 0 <= j <= (n+1)*n/2;\nloop invariant i28: k >= 0;\nloop invariant i29: k <= n;\nloop invariant i30: z >= 0;\nloop invariant i31: z > 2*n;\nloop invariant i32: 1 <= n;\nloop invariant i33: 0 <= j <= n*(n+1)/2;\nloop invariant i34: i + j = n*(n+1)/2;\nloop invariant i35: 0 <= k + i + j <= 3*(n^2 + n)/2;\nloop invariant i36: 0 <= k <= n;\nloop invariant i37: 0 <= j <= i * (i + 1) / 2;\nloop invariant i38: z >= k + i + j;\nloop invariant i39: z <= k + i + (n * (n + 1)) / 2;\nloop invariant i40: j <= (i * (i + 1)) / 2;\nloop invariant i41: i <= n + 1;\nloop invariant i42: j <= (n * (n + 1)) / 2;\nloop invariant i43: z <= k + n + (n * (n + 1)) / 2;\nloop invariant i44: 1 <= i <= n;\nloop invariant i45: (if flag then k >= 0 else true);\nloop invariant i46: (if flag then k <= n else true);\nloop invariant i47: (if flag then k == unknown1() else true);\nloop invariant i48: (if flag then n >= 0 else true);\nloop invariant i49: (if flag then k <= i else true);\nloop invariant i50: z == (k + i + j);\nloop invariant i51: (if flag then k + i + j > 2*n else true);\nloop invariant i52: 0 <= j <= (n*(n+1))/2;\nloop invariant i53: (k + i + j) > 2*n ==> z > 2*n;\nloop invariant i54: 0 <= k <= n ==> k + i + j > 2*n;\nloop invariant i55: 0 <= i <= n ==> k + i + j > 2*n;\nloop invariant i56: 0 <= j <= (n*(n+1))/2 ==> k + i + j > 2*n;\nloop invariant i57: k + i + j > 2*n;\nloop invariant i58: 0 <= flag;\nloop invariant i59: 0 <= j <= (n * (n + 1) / 2);\nloop invariant i60: z <= (k + n + (n * (n + 1) / 2));\nloop invariant i61: z > 2 * n ==> k != 0;\nloop invariant i62: z > 2 * n ==> i != n;\nloop invariant i63: z > 2 * n ==> j != (n * (n + 1) / 2);\nloop invariant i64: 0 <= i <= n + 1;\nloop invariant i65: 0 <= j <= n * (n + 1) / 2;\nloop invariant i66: k <= n * (n + 1) / 2;\nloop invariant i67: z >= 2 * n;\nloop invariant i68: z <= 3 * n * (n + 1) / 2 + k;\nloop invariant i69: 0 <= j <= (n * (n + 1)) / 2;\nloop invariant i70: z == k + i + j;\nloop invariant i71: j = (i * (i - 1) / 2);\nloop invariant i72: n >= 0;\nloop invariant i73: flag >= 0;\nloop invariant i74: j <= (n * (n - 1) / 2);\nloop invariant i75: i >= (j - (n * (n - 1) / 2)) / n;\nloop invariant i76: k >= (j - (n * (n - 1) / 2)) / (n + 1);\nloop invariant i77: j <= (n * (n + 1) / 2);\nloop invariant i78: i <= (j - (n * (n + 1) / 2)) / (n + 1);\nloop invariant i79: k <= (j - (n * (n + 1) / 2)) / (n + 2);\nloop invariant i80: j >= (n * (n + 1) / 2) - k;\nloop invariant i81: j <= (n * (n + 1) / 2) + k;\nloop invariant i82: i >= (j - (n * (n + 1) / 2)) / (n + 2);\nloop invariant i83: k >= (j - (n * (n + 1) / 2)) / (n + 3);\nloop invariant i84: j >= (n * (n + 1) / 2) - k - flag;\nloop invariant i85: j <= (n * (n + 1) / 2) + k + flag;\nloop invariant i86: i >= (j - (n * (n + 1) / 2)) / (n + 3);\nloop invariant i87: k >= (j - (n * (n + 1) / 2)) / (n + 4);\nloop invariant i88: i >= (j - (n * (n + 1) / 2)) / (n + 4);\nloop invariant i89: k >= (j - (n * (n + 1) / 2)) / (n + 5);\nloop invariant i90: i >= (j - (n * (n + 1) / 2)) / (n + 5);\nloop invariant i91: k >= (j - (n * (n + 1) / 2)) / (n + 6);\nloop invariant i92: i >= (j - (n * (n + 1) / 2)) / (n + 6);\nloop invariant i93: k >= (j - (n * (n + 1) / 2)) / (n + 7);\nloop invariant i94: i >= (j - (n * (n + 1) / 2)) / (n + 7);\nloop invariant i95: k >= (j - (n * (n + 1) / 2)) / (n + 8);\nloop invariant i96: i >= (j - (n * (n + 1) / 2)) / (n + 8);\nloop invariant i97: k >= (j - (n * (n + 1) / 2)) / (n + 9);\nloop invariant i98: i >= (j - (n * (n + 1) / 2)) / (n + 9);\nloop invariant i99: k >= (j - (n * (n + 1) / 2)) / (n + 10);\nloop invariant i100: z = k + i + j;\nloop invariant i101: z > 2 * n;\nloop invariant i102: 0 <= j <= i * (n + 1) / 2;\nloop invariant i103: j >= (i * (i - 1)) / 2;\nloop invariant i104: n >= i - 1;\nloop invariant i105: 0 <= n <= 100000;\nloop invariant i106: 0 <= flag <= 1;\nloop invariant i107: 0 <= k <= 100000;\nloop invariant i108: 0 <= z <= 3*n + 100000;\nloop invariant i109: j == i*(i+1)/2;\nloop invariant i110: z > 2*n ==> i > n;\n*/\nwhile(i <= n) {\n     i++;\n     j+=i;\n   }\n   int z = k + i + j;\n   {;\n//@ assert(z > 2*n);\n}\n\n   }\n   return 0;\n}",
        "combined_annotation_num_solver_calls": 61,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nint main() {\n   int n = unknown1();\n   int flag = unknown1();\n\n   if(n>=0){\n   int k = 1;\n   if(flag) {\n\tk = unknown1();\n\tif(k>=0) ; else return 0;\n   }\n   int i = 0, j = 0;\n   /*@\n\n\n\n\nloop invariant i5: j >= 0;\nloop invariant i6: i >= 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i25: 0 <= n;\nloop invariant i26: 0 <= i <= n+1;\n\nloop invariant i28: k >= 0;\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i41: i <= n + 1;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i64: 0 <= i <= n + 1;\n\n\n\n\n\n\n\nloop invariant i72: n >= 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i103: j >= (i * (i - 1)) / 2;\nloop invariant i104: n >= i - 1;\n\n\n\n\n\n\n*/\nwhile(i <= n) {\n     i++;\n     j+=i;\n   }\n   int z = k + i + j;\n   {;\n//@ assert(z > 2*n);\n}\n\n   }\n   return 0;\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/split.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/11.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/15.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/16.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/18.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/23.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/30.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/32.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/37.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/38.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/41.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/13.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/14.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/19.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/20.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/39.c"
        ],
        "skipped": [],
        "total": 121,
        "success_count": 100,
        "failure_count": 21,
        "success_rate": 0.8264462809917356
    }
}