{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint N = unknown_int();\n\tint x = 0;\n\tint m = 0;\n\tint input;\n\n \twhile (x < N) {\n\n\t\tinput = unknown_int();\n\t\tif( input ) {\n\n\t\t\tm = x;\n\t\t}\n\n\t\tx = x + 1;\n\n\t}\n\n\tif (N > 0) {\n\t\t{;\n//@ assert((0 <= m) && (m < N));\n}\n\n\t}\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant x > 0 ==> 0 <= m < x;\nloop invariant x > 0 ==> m < N;\nloop invariant x > 0 ==> m >= 0;\nloop invariant x > 0 ==> m < N;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= N;\nloop invariant 1 <= N;\nloop invariant 1 <= m <= N;\nloop invariant x > m ==> input > 0;\n*/\n```",
            "```\n/*@\nloop invariant ( m <= x ) && ( x > 0) && ( x <= N ) && ( m >= 0) && ( m <= N ) && ( N >= 0) && ( N <= 2147483647) && ( x >= 0);\nloop invariant ( m <= x ) && ( x > 0) && ( x <= N ) && ( m >= 0) && ( m <= N ) && ( N >= 0) && ( N <= 2147483647) && ( x >= 0);\nloop invariant ( m <= x ) && ( x > 0) && ( x <= N ) && ( m >= 0) && ( m <= N ) && ( N >= 0) && ( N <= 2147483647) && ( x >= 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant 0 <= m <= N;\nloop invariant x == N ==> m == x;\nloop invariant m == x ==> x == N;\nloop invariant x == N ==> m == N;\nloop invariant m == N ==> x == N;\nloop invariant x == N ==> m == 0;\nloop invariant m == 0 ==> x == N;\nloop invariant m == x ==> m >= 0;\nloop invariant m == x ==> m < N;\nloop invariant m == x ==> x >= 0;\nloop invariant m == x ==> x < N;\nloop invariant m == x ==> N >= 0;\nloop invariant m == x ==> N > 0;\nloop invariant m == x ==> N > x;\nloop invariant m == x ==> N < x;\nloop invariant m == x ==> N != x;\nloop invariant m == x ==> N == x;\nloop invariant m == x ==> m != x;\nloop invariant m == x ==> m == 0;\nloop invariant m == x ==> m < N;\nloop invariant m == x ==> m <= N;\nloop invariant m == x ==> m > 0;\nloop invariant m == x ==> m >= 0;\nloop invariant m == x ==> m != 0;\nloop invariant m == x ==> m == N;\nloop invariant m == x ==> m <= N;\nloop invariant m == x ==> m >= N;\nloop invariant m == x ==> m != N;\nloop invariant m == x ==> m == x;\nloop invariant m == x ==> m != x;\nloop invariant m == x ==> m == 0;\nloop invariant m == x ==> m < N;\nloop invariant m == x ==> m <= N;\nloop invariant m == x ==> m > 0;\nloop invariant m == x ==> m >= 0;\nloop invariant m == x ==> m != 0;\nloop invariant m == x ==> m == N;\nloop invariant m == x ==> m <= N;\nloop invariant m == x ==> m >= N;\nloop invariant m == x ==> m != N;\nloop invariant m == x ==> m == x;\nloop invariant m == x ==> m != x;\nloop invariant m == x ==> m == 0;\nloop invariant m == x ==> m < N;\nloop invariant m == x ==> m <= N;\nloop invariant m == x ==> m > 0;\nloop invariant m == x ==> m >= 0;\nloop invariant m == x ==> m != 0;\nloop invariant m == x ==> m == N;\nloop invariant m == x ==> m <= N;\nloop invariant m == x ==> m >= N;\nloop invariant m == x ==> m != N;\nloop invariant m == x ==> m == x;\nloop invariant m == x ==> m != x;\nloop invariant m == x ==> m == 0;\nloop invariant m == x ==> m < N;\nloop invariant m == x ==> m <= N;\nloop invariant m == x ==> m > 0;\nloop invariant m == x ==> m >= 0;\nloop invariant m == x ==> m != 0;\nloop invariant m == x ==> m == N;\nloop invariant m == x ==> m <= N;\nloop invariant m == x ==> m >= N;\nloop invariant m == x ==> m != N;\nloop invariant m == x ==> m == x;\nloop invariant m == x ==> m != x;\nloop invariant m == x ==> m == 0;\nloop invariant m == x ==> m < N;\nloop invariant m == x ==> m <= N;\nloop invariant m == x ==> m > 0;\nloop invariant m == x ==> m >= 0;\nloop invariant m == x ==> m != 0;\nloop invariant m == x ==> m == N;\nloop invariant m == x ==> m <= N;\nloop invariant m == x ==> m >= N;\nloop invariant m == x ==> m != N;\nloop invariant m == x ==> m == x;\nloop invariant m == x ==> m != x;\nloop invariant m == x ==> m == 0;\nloop invariant m == x ==> m < N;\nloop invariant m == x ==> m <= N;\nloop invariant m == x ==> m > 0;\nloop invariant m == x ==> m >= 0;\nloop invariant m == x ==> m != 0;\nloop invariant m == x ==> m == N;\nloop invariant m == x ==> m <= N;\nloop invariant m == x ==> m >= N;\nloop invariant m == x ==> m != N;\nloop invariant m == x ==> m == x;\nloop invariant m == x ==> m != x;\nloop invariant m == x ==> m == 0;\nloop invariant m == x ==> m < N;\nloop invariant m == x ==> m <= N;\nloop invariant m == x ==> m > 0;\nloop invariant m == x ==> m >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant 0 <= m <= N;\nloop invariant x <= N;\nloop invariant m <= N;\nloop invariant input >= 0;\nloop invariant input <= 1;\nloop invariant m <= x;\nloop invariant m <= N;\nloop invariant m >= 0;\nloop invariant m <= N;\nloop invariant m <= x;\nloop invariant m <= N;\nloop invariant m >= 0;\nloop invariant m <= N;\nloop invariant m <= x;\nloop invariant m <= N;\nloop invariant m >= 0;\nloop invariant m <= N;\nloop invariant m <= x;\nloop invariant m <= N;\nloop invariant m >= 0;\nloop invariant m <= N;\nloop invariant m <= x;\nloop invariant m <= N;\nloop invariant m >= 0;\nloop invariant m <= N;\nloop invariant m <= x;\nloop invariant m <= N;\nloop invariant m >= 0;\nloop invariant m <= N;\nloop invariant m <= x;\nloop invariant m <= N;\nloop invariant m >= 0;\nloop invariant m <= N;\nloop invariant m <= x;\nloop invariant m <= N;\nloop invariant m >= 0;\nloop invariant m <= N;\nloop invariant m <= x;\nloop invariant m <= N;\nloop invariant m >= 0;\nloop invariant m <= N;\nloop invariant m <= x;\nloop invariant m <= N;\nloop invariant m >= 0;\nloop invariant m <= N;\nloop invariant m <= x;\nloop invariant m <= N;\nloop invariant m >= 0;\nloop invariant m <= N;\nloop invariant m <= x;\nloop invariant m <= N;\nloop invariant m >= 0;\nloop invariant m <= N;\nloop invariant m <= x;\nloop invariant m <= N;\nloop invariant m >= 0;\nloop invariant m <= N;\nloop invariant m <= x;\nloop invariant m <= N;\nloop invariant m >= 0;\nloop invariant m <= N;\nloop invariant m <= x;\nloop invariant m <= N;\nloop invariant m >= 0;\nloop invariant m <= N;\nloop invariant m <= x;\nloop invariant m <= N;\nloop invariant m >= 0;\nloop invariant m <= N;\nloop invariant m <= x;\nloop invariant m <= N;\nloop invariant m >= 0;\nloop invariant m <= N;\nloop invariant m <= x;\nloop invariant m <= N;\nloop invariant m >= 0;\nloop invariant m <= N;\nloop invariant m <= x;\nloop invariant m <= N;\nloop invariant m >= 0;\nloop invariant m <= N;\nloop invariant m <= x;\nloop invariant m <= N;\nloop invariant m >= 0;\nloop invariant m <= N;\nloop invariant m <= x;\nloop invariant m <= N;\nloop invariant m >= 0;\nloop invariant m <= N;\nloop invariant m <= x;\nloop invariant m <= N;\nloop invariant m >= 0;\nloop invariant m <= N;\nloop invariant m <= x;\nloop invariant m <= N;\nloop invariant m >= 0;\nloop invariant m <= N;\nloop invariant m <= x;\nloop invariant m <= N;\nloop invariant m >= 0;\nloop invariant m <= N;\nloop invariant m <= x;\nloop invariant m <= N;\nloop invariant m >= 0;\nloop invariant m <= N;\nloop invariant m <= x;\nloop invariant m <= N;\nloop invariant m >= 0;\nloop invariant m <= N;\nloop invariant m <= x;\nloop invariant m <= N;\nloop invariant m >= 0;\nloop invariant m <= N;\nloop invariant m <= x;\nloop invariant m <= N;\nloop invariant m >= 0;\nloop invariant m <= N;\nloop invariant m <= x;\nloop invariant m <= N;\nloop invariant m >= 0;\nloop invariant m <= N;\nloop invariant m <= x;\nloop invariant m <= N;\nloop invariant m >= 0;\nloop invariant m <= N;\nloop invariant m <= x;\nloop invariant m <= N;\nloop invariant m >= 0;\nloop invariant m <= N;\nloop invariant m <= x;\nloop invariant m <= N;\nloop invariant m >= 0;\nloop invariant m <= N;\nloop invariant m <= x;\nloop invariant m <= N;\nloop invariant m >= 0;\nloop invariant m <= N;\nloop invariant m <= x;\nloop invariant m <= N;\nloop invariant m >= 0;\nloop invariant m <= N;\nloop invariant m <= x;\nloop invariant m <= N;\nloop invariant m >= 0;\nloop invariant m <= N;\nloop invariant m <= x;\nloop invariant m <= N;\nloop invariant m >= 0;\nloop invariant m <= N;\nloop invariant m <= x;\nloop invariant m <= N;\nloop invariant m >= 0;\nloop invariant m <= N;\nloop invariant m <= x;\nloop invariant m <= N;\nloop invariant m >= 0;\nloop invariant m <= N;\nloop invariant m <= x;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant 0 <= m <= x;\nloop invariant x < N ==> (0 <= m < N);\n*/\n```",
            "```\n/*@\nloop invariant N >= 0;\nloop invariant -1 <= m <= N;\nloop invariant (N <= 0 ==> m == 0);\nloop invariant (N > 0 ==> m <= x);\nloop invariant (x <= N ==> x == m || m == 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant 0 <= m <= N;\nloop invariant (x == N) ==> (m == N);\nloop invariant (x < N) ==> (m <= x);\nloop invariant N > 0 ==> (m >= 0);\nloop invariant N > 0 ==> (m < N);\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant 0 <= m <= N;\nloop invariant input >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant 0 <= m <= N;\nloop invariant 0 <= x <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x;\nloop invariant x <= N;\nloop invariant (x > 0) ==> (0 <= m);\nloop invariant (x > 0) ==> (m < N);\nloop invariant (x > 0) ==> (m <= x);\nloop invariant (x > 0) ==> (m == x);\nloop invariant (x > 0) ==> (m == (x - 1));\nloop invariant (x > 0) ==> (m == (x - 2));\nloop invariant (x > 0) ==> (m == (x - 3));\nloop invariant (x > 0) ==> (m == (x - 4));\nloop invariant (x > 0) ==> (m == (x - 5));\nloop invariant (x > 0) ==> (m == (x - 6));\nloop invariant (x > 0) ==> (m == (x - 7));\nloop invariant (x > 0) ==> (m == (x - 8));\nloop invariant (x > 0) ==> (m == (x - 9));\nloop invariant (x > 0) ==> (m == (x - 10));\nloop invariant (x > 0) ==> (m == (x - 11));\nloop invariant (x > 0) ==> (m == (x - 12));\nloop invariant (x > 0) ==> (m == (x - 13));\nloop invariant (x > 0) ==> (m == (x - 14));\nloop invariant (x > 0) ==> (m == (x - 15));\nloop invariant (x > 0) ==> (m == (x - 16));\nloop invariant (x > 0) ==> (m == (x - 17));\nloop invariant (x > 0) ==> (m == (x - 18));\nloop invariant (x > 0) ==> (m == (x - 19));\nloop invariant (x > 0) ==> (m == (x - 20));\nloop invariant (x > 0) ==> (m == (x - 21));\nloop invariant (x > 0) ==> (m == (x - 22));\nloop invariant (x > 0) ==> (m == (x - 23));\nloop invariant (x > 0) ==> (m == (x - 24));\nloop invariant (x > 0) ==> (m == (x - 25));\nloop invariant (x > 0) ==> (m == (x - 26));\nloop invariant (x > 0) ==> (m == (x - 27));\nloop invariant (x > 0) ==> (m == (x - 28));\nloop invariant (x > 0) ==> (m == (x - 29));\nloop invariant (x > 0) ==> (m == (x - 30));\nloop invariant (x > 0) ==> (m == (x - 31));\nloop invariant (x > 0) ==> (m == (x - 32));\nloop invariant (x > 0) ==> (m == (x - 33));\nloop invariant (x > 0) ==> (m == (x - 34));\nloop invariant (x > 0) ==> (m == (x - 35));\nloop invariant (x > 0) ==> (m == (x - 36));\nloop invariant (x > 0) ==> (m == (x - 37));\nloop invariant (x > 0) ==> (m == (x - 38));\nloop invariant (x > 0) ==> (m == (x - 39));\nloop invariant (x > 0) ==> (m == (x - 40));\nloop invariant (x > 0) ==> (m == (x - 41));\nloop invariant (x > 0) ==> (m == (x - 42));\nloop invariant (x > 0) ==> (m == (x - 43));\nloop invariant (x > 0) ==> (m == (x - 44));\nloop invariant (x > 0) ==> (m == (x - 45));\nloop invariant (x > 0) ==> (m == (x - 46));\nloop invariant (x > 0) ==> (m == (x - 47));\nloop invariant (x > 0) ==> (m == (x - 48));\nloop invariant (x > 0) ==> (m == (x - 49));\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant N > 0 ==> m < N;\nloop invariant N > 0 ==> 0 <= m <= N;\nloop invariant N <= 0 ==> m == N;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant 0 <= m <= N;\nloop invariant (if N > 0 then 0 <= m <= N else 0 <= m <= 0);\nloop invariant (if N > 0 then m < N else m <= 0);\nloop invariant (if N > 0 then x == m + 1 else m == 0);\nloop invariant (if N > 0 then input == 1 else input <= 0);\nloop invariant (if N > 0 then m == N - 1 else m == 0);\nloop invariant (if N > 0 then x == N else m < N);\nloop invariant (if N > 0 then input == 1 else input <= 0);\nloop invariant (if N > 0 then m == N - 1 else m == 0);\nloop invariant (if N > 0 then x == N else m < N);\nloop invariant (if N > 0 then input == 1 else input <= 0);\nloop invariant (if N > 0 then m == N - 1 else m == 0);\nloop invariant (if N > 0 then x == N else m < N);\nloop invariant (if N > 0 then input == 1 else input <= 0);\nloop invariant (if N > 0 then m == N - 1 else m == 0);\nloop invariant (if N > 0 then x == N else m < N);\nloop invariant (if N > 0 then input == 1 else input <= 0);\nloop invariant (if N > 0 then m == N - 1 else m == 0);\nloop invariant (if N > 0 then x == N else m < N);\nloop invariant (if N > 0 then input == 1 else input <= 0);\nloop invariant (if N > 0 then m == N - 1 else m == 0);\nloop invariant (if N > 0 then x == N else m < N);\nloop invariant (if N > 0 then input == 1 else input <= 0);\nloop invariant (if N > 0 then m == N - 1 else m == 0);\nloop invariant (if N > 0 then x == N else m < N);\nloop invariant (if N > 0 then input == 1 else input <= 0);\nloop invariant (if N > 0 then m == N - 1 else m == 0);\nloop invariant (if N > 0 then x == N else m < N);\nloop invariant (if N > 0 then input == 1 else input <= 0);\nloop invariant (if N > 0 then m == N - 1 else m == 0);\nloop invariant (if N > 0 then x == N else m < N);\nloop invariant (if N > 0 then input == 1 else input <= 0);\nloop invariant (if N > 0 then m == N - 1 else m == 0);\nloop invariant (if N > 0 then x == N else m < N);\nloop invariant (if N > 0 then input == 1 else input <= 0);\nloop invariant (if N > 0 then m == N - 1 else m == 0);\nloop invariant (if N > 0 then x == N else m < N);\nloop invariant (if N > 0 then input == 1 else input <= 0);\nloop invariant (if N > 0 then m == N - 1 else m == 0);\nloop invariant (if N > 0 then x == N else m < N);\nloop invariant (if N > 0 then input == 1 else input <= 0);\nloop invariant (if N > 0 then m == N - 1 else m == 0);\nloop invariant (if N > 0 then x == N else m < N);\nloop invariant (if N > 0 then input == 1 else input <= 0);\nloop invariant (if N > 0 then m == N - 1 else m == 0);\nloop invariant (if N > 0 then x == N else m < N);\nloop invariant (if N > 0 then input == 1 else input <= 0);\nloop invariant (if N > 0 then m == N - 1 else m == 0);\nloop invariant (if N > 0 then x == N else m < N);\nloop invariant (if N > 0 then input == 1 else input <= 0);\nloop invariant (if N > 0 then m == N - 1 else m == 0);\nloop invariant (if N > 0 then x == N else m < N);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant 0 <= m <= x;\nloop invariant 0 <= input <= 1;\nloop invariant (N > 0) ==> (0 <= m) && (m < N);\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant x > 0 ==> 0 <= m < x;\nloop invariant x > 0 ==> m < N;\nloop invariant x > 0 ==> m >= 0;\nloop invariant x > 0 ==> m < N;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint N = unknown_int();\n\tint x = 0;\n\tint m = 0;\n\tint input;\n\n \t/*@\n\n\n\n\n*/\nwhile (x < N) {\n\n\t\tinput = unknown_int();\n\t\tif( input ) {\n\n\t\t\tm = x;\n\t\t}\n\n\t\tx = x + 1;\n\n\t}\n\n\tif (N > 0) {\n\t\t{;\n//@ assert((0 <= m) && (m < N));\n}\n\n\t}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= N;\nloop invariant 1 <= N;\nloop invariant 1 <= m <= N;\nloop invariant x > m ==> input > 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint N = unknown_int();\n\tint x = 0;\n\tint m = 0;\n\tint input;\n\n \t/*@\n\n\n\n\n*/\nwhile (x < N) {\n\n\t\tinput = unknown_int();\n\t\tif( input ) {\n\n\t\t\tm = x;\n\t\t}\n\n\t\tx = x + 1;\n\n\t}\n\n\tif (N > 0) {\n\t\t{;\n//@ assert((0 <= m) && (m < N));\n}\n\n\t}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant ( m <= x ) && ( x > 0) && ( x <= N ) && ( m >= 0) && ( m <= N ) && ( N >= 0) && ( N <= 2147483647) && ( x >= 0);\nloop invariant ( m <= x ) && ( x > 0) && ( x <= N ) && ( m >= 0) && ( m <= N ) && ( N >= 0) && ( N <= 2147483647) && ( x >= 0);\nloop invariant ( m <= x ) && ( x > 0) && ( x <= N ) && ( m >= 0) && ( m <= N ) && ( N >= 0) && ( N <= 2147483647) && ( x >= 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint N = unknown_int();\n\tint x = 0;\n\tint m = 0;\n\tint input;\n\n \t/*@\n\n*/\nwhile (x < N) {\n\n\t\tinput = unknown_int();\n\t\tif( input ) {\n\n\t\t\tm = x;\n\t\t}\n\n\t\tx = x + 1;\n\n\t}\n\n\tif (N > 0) {\n\t\t{;\n//@ assert((0 <= m) && (m < N));\n}\n\n\t}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 12,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant 0 <= m <= N;\nloop invariant x == N ==> m == x;\nloop invariant m == x ==> x == N;\nloop invariant x == N ==> m == N;\nloop invariant m == N ==> x == N;\nloop invariant x == N ==> m == 0;\nloop invariant m == 0 ==> x == N;\nloop invariant m == x ==> m >= 0;\nloop invariant m == x ==> m < N;\nloop invariant m == x ==> x >= 0;\nloop invariant m == x ==> x < N;\nloop invariant m == x ==> N >= 0;\nloop invariant m == x ==> N > 0;\nloop invariant m == x ==> N > x;\nloop invariant m == x ==> N < x;\nloop invariant m == x ==> N != x;\nloop invariant m == x ==> N == x;\nloop invariant m == x ==> m != x;\nloop invariant m == x ==> m == 0;\nloop invariant m == x ==> m < N;\nloop invariant m == x ==> m <= N;\nloop invariant m == x ==> m > 0;\nloop invariant m == x ==> m >= 0;\nloop invariant m == x ==> m != 0;\nloop invariant m == x ==> m == N;\nloop invariant m == x ==> m <= N;\nloop invariant m == x ==> m >= N;\nloop invariant m == x ==> m != N;\nloop invariant m == x ==> m == x;\nloop invariant m == x ==> m != x;\nloop invariant m == x ==> m == 0;\nloop invariant m == x ==> m < N;\nloop invariant m == x ==> m <= N;\nloop invariant m == x ==> m > 0;\nloop invariant m == x ==> m >= 0;\nloop invariant m == x ==> m != 0;\nloop invariant m == x ==> m == N;\nloop invariant m == x ==> m <= N;\nloop invariant m == x ==> m >= N;\nloop invariant m == x ==> m != N;\nloop invariant m == x ==> m == x;\nloop invariant m == x ==> m != x;\nloop invariant m == x ==> m == 0;\nloop invariant m == x ==> m < N;\nloop invariant m == x ==> m <= N;\nloop invariant m == x ==> m > 0;\nloop invariant m == x ==> m >= 0;\nloop invariant m == x ==> m != 0;\nloop invariant m == x ==> m == N;\nloop invariant m == x ==> m <= N;\nloop invariant m == x ==> m >= N;\nloop invariant m == x ==> m != N;\nloop invariant m == x ==> m == x;\nloop invariant m == x ==> m != x;\nloop invariant m == x ==> m == 0;\nloop invariant m == x ==> m < N;\nloop invariant m == x ==> m <= N;\nloop invariant m == x ==> m > 0;\nloop invariant m == x ==> m >= 0;\nloop invariant m == x ==> m != 0;\nloop invariant m == x ==> m == N;\nloop invariant m == x ==> m <= N;\nloop invariant m == x ==> m >= N;\nloop invariant m == x ==> m != N;\nloop invariant m == x ==> m == x;\nloop invariant m == x ==> m != x;\nloop invariant m == x ==> m == 0;\nloop invariant m == x ==> m < N;\nloop invariant m == x ==> m <= N;\nloop invariant m == x ==> m > 0;\nloop invariant m == x ==> m >= 0;\nloop invariant m == x ==> m != 0;\nloop invariant m == x ==> m == N;\nloop invariant m == x ==> m <= N;\nloop invariant m == x ==> m >= N;\nloop invariant m == x ==> m != N;\nloop invariant m == x ==> m == x;\nloop invariant m == x ==> m != x;\nloop invariant m == x ==> m == 0;\nloop invariant m == x ==> m < N;\nloop invariant m == x ==> m <= N;\nloop invariant m == x ==> m > 0;\nloop invariant m == x ==> m >= 0;\nloop invariant m == x ==> m != 0;\nloop invariant m == x ==> m == N;\nloop invariant m == x ==> m <= N;\nloop invariant m == x ==> m >= N;\nloop invariant m == x ==> m != N;\nloop invariant m == x ==> m == x;\nloop invariant m == x ==> m != x;\nloop invariant m == x ==> m == 0;\nloop invariant m == x ==> m < N;\nloop invariant m == x ==> m <= N;\nloop invariant m == x ==> m > 0;\nloop invariant m == x ==> m >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint N = unknown_int();\n\tint x = 0;\n\tint m = 0;\n\tint input;\n\n \t/*@\n\n\n\n\n\nloop invariant i6: m == N ==> x == N;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i27: m == x ==> m == x;\n*/\nwhile (x < N) {\n\n\t\tinput = unknown_int();\n\t\tif( input ) {\n\n\t\t\tm = x;\n\t\t}\n\n\t\tx = x + 1;\n\n\t}\n\n\tif (N > 0) {\n\t\t{;\n//@ assert((0 <= m) && (m < N));\n}\n\n\t}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant 0 <= m <= N;\nloop invariant x <= N;\nloop invariant m <= N;\nloop invariant input >= 0;\nloop invariant input <= 1;\nloop invariant m <= x;\nloop invariant m <= N;\nloop invariant m >= 0;\nloop invariant m <= N;\nloop invariant m <= x;\nloop invariant m <= N;\nloop invariant m >= 0;\nloop invariant m <= N;\nloop invariant m <= x;\nloop invariant m <= N;\nloop invariant m >= 0;\nloop invariant m <= N;\nloop invariant m <= x;\nloop invariant m <= N;\nloop invariant m >= 0;\nloop invariant m <= N;\nloop invariant m <= x;\nloop invariant m <= N;\nloop invariant m >= 0;\nloop invariant m <= N;\nloop invariant m <= x;\nloop invariant m <= N;\nloop invariant m >= 0;\nloop invariant m <= N;\nloop invariant m <= x;\nloop invariant m <= N;\nloop invariant m >= 0;\nloop invariant m <= N;\nloop invariant m <= x;\nloop invariant m <= N;\nloop invariant m >= 0;\nloop invariant m <= N;\nloop invariant m <= x;\nloop invariant m <= N;\nloop invariant m >= 0;\nloop invariant m <= N;\nloop invariant m <= x;\nloop invariant m <= N;\nloop invariant m >= 0;\nloop invariant m <= N;\nloop invariant m <= x;\nloop invariant m <= N;\nloop invariant m >= 0;\nloop invariant m <= N;\nloop invariant m <= x;\nloop invariant m <= N;\nloop invariant m >= 0;\nloop invariant m <= N;\nloop invariant m <= x;\nloop invariant m <= N;\nloop invariant m >= 0;\nloop invariant m <= N;\nloop invariant m <= x;\nloop invariant m <= N;\nloop invariant m >= 0;\nloop invariant m <= N;\nloop invariant m <= x;\nloop invariant m <= N;\nloop invariant m >= 0;\nloop invariant m <= N;\nloop invariant m <= x;\nloop invariant m <= N;\nloop invariant m >= 0;\nloop invariant m <= N;\nloop invariant m <= x;\nloop invariant m <= N;\nloop invariant m >= 0;\nloop invariant m <= N;\nloop invariant m <= x;\nloop invariant m <= N;\nloop invariant m >= 0;\nloop invariant m <= N;\nloop invariant m <= x;\nloop invariant m <= N;\nloop invariant m >= 0;\nloop invariant m <= N;\nloop invariant m <= x;\nloop invariant m <= N;\nloop invariant m >= 0;\nloop invariant m <= N;\nloop invariant m <= x;\nloop invariant m <= N;\nloop invariant m >= 0;\nloop invariant m <= N;\nloop invariant m <= x;\nloop invariant m <= N;\nloop invariant m >= 0;\nloop invariant m <= N;\nloop invariant m <= x;\nloop invariant m <= N;\nloop invariant m >= 0;\nloop invariant m <= N;\nloop invariant m <= x;\nloop invariant m <= N;\nloop invariant m >= 0;\nloop invariant m <= N;\nloop invariant m <= x;\nloop invariant m <= N;\nloop invariant m >= 0;\nloop invariant m <= N;\nloop invariant m <= x;\nloop invariant m <= N;\nloop invariant m >= 0;\nloop invariant m <= N;\nloop invariant m <= x;\nloop invariant m <= N;\nloop invariant m >= 0;\nloop invariant m <= N;\nloop invariant m <= x;\nloop invariant m <= N;\nloop invariant m >= 0;\nloop invariant m <= N;\nloop invariant m <= x;\nloop invariant m <= N;\nloop invariant m >= 0;\nloop invariant m <= N;\nloop invariant m <= x;\nloop invariant m <= N;\nloop invariant m >= 0;\nloop invariant m <= N;\nloop invariant m <= x;\nloop invariant m <= N;\nloop invariant m >= 0;\nloop invariant m <= N;\nloop invariant m <= x;\nloop invariant m <= N;\nloop invariant m >= 0;\nloop invariant m <= N;\nloop invariant m <= x;\nloop invariant m <= N;\nloop invariant m >= 0;\nloop invariant m <= N;\nloop invariant m <= x;\nloop invariant m <= N;\nloop invariant m >= 0;\nloop invariant m <= N;\nloop invariant m <= x;\nloop invariant m <= N;\nloop invariant m >= 0;\nloop invariant m <= N;\nloop invariant m <= x;\nloop invariant m <= N;\nloop invariant m >= 0;\nloop invariant m <= N;\nloop invariant m <= x;\nloop invariant m <= N;\nloop invariant m >= 0;\nloop invariant m <= N;\nloop invariant m <= x;\nloop invariant m <= N;\nloop invariant m >= 0;\nloop invariant m <= N;\nloop invariant m <= x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint N = unknown_int();\n\tint x = 0;\n\tint m = 0;\n\tint input;\n\n \t/*@\n\n\n\n\n\n\nloop invariant i7: m <= x;\nloop invariant i8: m >= 0;\n*/\nwhile (x < N) {\n\n\t\tinput = unknown_int();\n\t\tif( input ) {\n\n\t\t\tm = x;\n\t\t}\n\n\t\tx = x + 1;\n\n\t}\n\n\tif (N > 0) {\n\t\t{;\n//@ assert((0 <= m) && (m < N));\n}\n\n\t}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant 0 <= m <= x;\nloop invariant x < N ==> (0 <= m < N);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint N = unknown_int();\n\tint x = 0;\n\tint m = 0;\n\tint input;\n\n \t/*@\n\nloop invariant i2: 0 <= m <= x;\nloop invariant i3: x < N ==> (0 <= m < N);\n*/\nwhile (x < N) {\n\n\t\tinput = unknown_int();\n\t\tif( input ) {\n\n\t\t\tm = x;\n\t\t}\n\n\t\tx = x + 1;\n\n\t}\n\n\tif (N > 0) {\n\t\t{;\n//@ assert((0 <= m) && (m < N));\n}\n\n\t}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant N >= 0;\nloop invariant -1 <= m <= N;\nloop invariant (N <= 0 ==> m == 0);\nloop invariant (N > 0 ==> m <= x);\nloop invariant (x <= N ==> x == m || m == 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint N = unknown_int();\n\tint x = 0;\n\tint m = 0;\n\tint input;\n\n \t/*@\n\n\n\nloop invariant i4: (N > 0 ==> m <= x);\n\n*/\nwhile (x < N) {\n\n\t\tinput = unknown_int();\n\t\tif( input ) {\n\n\t\t\tm = x;\n\t\t}\n\n\t\tx = x + 1;\n\n\t}\n\n\tif (N > 0) {\n\t\t{;\n//@ assert((0 <= m) && (m < N));\n}\n\n\t}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant 0 <= m <= N;\nloop invariant (x == N) ==> (m == N);\nloop invariant (x < N) ==> (m <= x);\nloop invariant N > 0 ==> (m >= 0);\nloop invariant N > 0 ==> (m < N);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint N = unknown_int();\n\tint x = 0;\n\tint m = 0;\n\tint input;\n\n \t/*@\n\n\n\nloop invariant i4: (x < N) ==> (m <= x);\nloop invariant i5: N > 0 ==> (m >= 0);\nloop invariant i6: N > 0 ==> (m < N);\n*/\nwhile (x < N) {\n\n\t\tinput = unknown_int();\n\t\tif( input ) {\n\n\t\t\tm = x;\n\t\t}\n\n\t\tx = x + 1;\n\n\t}\n\n\tif (N > 0) {\n\t\t{;\n//@ assert((0 <= m) && (m < N));\n}\n\n\t}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint N = unknown_int();\n\tint x = 0;\n\tint m = 0;\n\tint input;\n\n \t/*@\n\n*/\nwhile (x < N) {\n\n\t\tinput = unknown_int();\n\t\tif( input ) {\n\n\t\t\tm = x;\n\t\t}\n\n\t\tx = x + 1;\n\n\t}\n\n\tif (N > 0) {\n\t\t{;\n//@ assert((0 <= m) && (m < N));\n}\n\n\t}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant 0 <= m <= N;\nloop invariant input >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint N = unknown_int();\n\tint x = 0;\n\tint m = 0;\n\tint input;\n\n \t/*@\n\n\n\n*/\nwhile (x < N) {\n\n\t\tinput = unknown_int();\n\t\tif( input ) {\n\n\t\t\tm = x;\n\t\t}\n\n\t\tx = x + 1;\n\n\t}\n\n\tif (N > 0) {\n\t\t{;\n//@ assert((0 <= m) && (m < N));\n}\n\n\t}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant 0 <= m <= N;\nloop invariant 0 <= x <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\nloop invariant 0 <= m <= N ==> m <= x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint N = unknown_int();\n\tint x = 0;\n\tint m = 0;\n\tint input;\n\n \t/*@\n\n\n\nloop invariant i4: 0 <= m <= N ==> m <= x;\n*/\nwhile (x < N) {\n\n\t\tinput = unknown_int();\n\t\tif( input ) {\n\n\t\t\tm = x;\n\t\t}\n\n\t\tx = x + 1;\n\n\t}\n\n\tif (N > 0) {\n\t\t{;\n//@ assert((0 <= m) && (m < N));\n}\n\n\t}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 26,
                "annotations": "```\n/*@\nloop invariant 0 <= x;\nloop invariant x <= N;\nloop invariant (x > 0) ==> (0 <= m);\nloop invariant (x > 0) ==> (m < N);\nloop invariant (x > 0) ==> (m <= x);\nloop invariant (x > 0) ==> (m == x);\nloop invariant (x > 0) ==> (m == (x - 1));\nloop invariant (x > 0) ==> (m == (x - 2));\nloop invariant (x > 0) ==> (m == (x - 3));\nloop invariant (x > 0) ==> (m == (x - 4));\nloop invariant (x > 0) ==> (m == (x - 5));\nloop invariant (x > 0) ==> (m == (x - 6));\nloop invariant (x > 0) ==> (m == (x - 7));\nloop invariant (x > 0) ==> (m == (x - 8));\nloop invariant (x > 0) ==> (m == (x - 9));\nloop invariant (x > 0) ==> (m == (x - 10));\nloop invariant (x > 0) ==> (m == (x - 11));\nloop invariant (x > 0) ==> (m == (x - 12));\nloop invariant (x > 0) ==> (m == (x - 13));\nloop invariant (x > 0) ==> (m == (x - 14));\nloop invariant (x > 0) ==> (m == (x - 15));\nloop invariant (x > 0) ==> (m == (x - 16));\nloop invariant (x > 0) ==> (m == (x - 17));\nloop invariant (x > 0) ==> (m == (x - 18));\nloop invariant (x > 0) ==> (m == (x - 19));\nloop invariant (x > 0) ==> (m == (x - 20));\nloop invariant (x > 0) ==> (m == (x - 21));\nloop invariant (x > 0) ==> (m == (x - 22));\nloop invariant (x > 0) ==> (m == (x - 23));\nloop invariant (x > 0) ==> (m == (x - 24));\nloop invariant (x > 0) ==> (m == (x - 25));\nloop invariant (x > 0) ==> (m == (x - 26));\nloop invariant (x > 0) ==> (m == (x - 27));\nloop invariant (x > 0) ==> (m == (x - 28));\nloop invariant (x > 0) ==> (m == (x - 29));\nloop invariant (x > 0) ==> (m == (x - 30));\nloop invariant (x > 0) ==> (m == (x - 31));\nloop invariant (x > 0) ==> (m == (x - 32));\nloop invariant (x > 0) ==> (m == (x - 33));\nloop invariant (x > 0) ==> (m == (x - 34));\nloop invariant (x > 0) ==> (m == (x - 35));\nloop invariant (x > 0) ==> (m == (x - 36));\nloop invariant (x > 0) ==> (m == (x - 37));\nloop invariant (x > 0) ==> (m == (x - 38));\nloop invariant (x > 0) ==> (m == (x - 39));\nloop invariant (x > 0) ==> (m == (x - 40));\nloop invariant (x > 0) ==> (m == (x - 41));\nloop invariant (x > 0) ==> (m == (x - 42));\nloop invariant (x > 0) ==> (m == (x - 43));\nloop invariant (x > 0) ==> (m == (x - 44));\nloop invariant (x > 0) ==> (m == (x - 45));\nloop invariant (x > 0) ==> (m == (x - 46));\nloop invariant (x > 0) ==> (m == (x - 47));\nloop invariant (x > 0) ==> (m == (x - 48));\nloop invariant (x > 0) ==> (m == (x - 49));\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint N = unknown_int();\n\tint x = 0;\n\tint m = 0;\n\tint input;\n\n \t/*@\nloop invariant i1: 0 <= x;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (x < N) {\n\n\t\tinput = unknown_int();\n\t\tif( input ) {\n\n\t\t\tm = x;\n\t\t}\n\n\t\tx = x + 1;\n\n\t}\n\n\tif (N > 0) {\n\t\t{;\n//@ assert((0 <= m) && (m < N));\n}\n\n\t}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant N > 0 ==> m < N;\nloop invariant N > 0 ==> 0 <= m <= N;\nloop invariant N <= 0 ==> m == N;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint N = unknown_int();\n\tint x = 0;\n\tint m = 0;\n\tint input;\n\n \t/*@\n\nloop invariant i2: N > 0 ==> m < N;\n\n\n*/\nwhile (x < N) {\n\n\t\tinput = unknown_int();\n\t\tif( input ) {\n\n\t\t\tm = x;\n\t\t}\n\n\t\tx = x + 1;\n\n\t}\n\n\tif (N > 0) {\n\t\t{;\n//@ assert((0 <= m) && (m < N));\n}\n\n\t}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 8,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant 0 <= m <= N;\nloop invariant (if N > 0 then 0 <= m <= N else 0 <= m <= 0);\nloop invariant (if N > 0 then m < N else m <= 0);\nloop invariant (if N > 0 then x == m + 1 else m == 0);\nloop invariant (if N > 0 then input == 1 else input <= 0);\nloop invariant (if N > 0 then m == N - 1 else m == 0);\nloop invariant (if N > 0 then x == N else m < N);\nloop invariant (if N > 0 then input == 1 else input <= 0);\nloop invariant (if N > 0 then m == N - 1 else m == 0);\nloop invariant (if N > 0 then x == N else m < N);\nloop invariant (if N > 0 then input == 1 else input <= 0);\nloop invariant (if N > 0 then m == N - 1 else m == 0);\nloop invariant (if N > 0 then x == N else m < N);\nloop invariant (if N > 0 then input == 1 else input <= 0);\nloop invariant (if N > 0 then m == N - 1 else m == 0);\nloop invariant (if N > 0 then x == N else m < N);\nloop invariant (if N > 0 then input == 1 else input <= 0);\nloop invariant (if N > 0 then m == N - 1 else m == 0);\nloop invariant (if N > 0 then x == N else m < N);\nloop invariant (if N > 0 then input == 1 else input <= 0);\nloop invariant (if N > 0 then m == N - 1 else m == 0);\nloop invariant (if N > 0 then x == N else m < N);\nloop invariant (if N > 0 then input == 1 else input <= 0);\nloop invariant (if N > 0 then m == N - 1 else m == 0);\nloop invariant (if N > 0 then x == N else m < N);\nloop invariant (if N > 0 then input == 1 else input <= 0);\nloop invariant (if N > 0 then m == N - 1 else m == 0);\nloop invariant (if N > 0 then x == N else m < N);\nloop invariant (if N > 0 then input == 1 else input <= 0);\nloop invariant (if N > 0 then m == N - 1 else m == 0);\nloop invariant (if N > 0 then x == N else m < N);\nloop invariant (if N > 0 then input == 1 else input <= 0);\nloop invariant (if N > 0 then m == N - 1 else m == 0);\nloop invariant (if N > 0 then x == N else m < N);\nloop invariant (if N > 0 then input == 1 else input <= 0);\nloop invariant (if N > 0 then m == N - 1 else m == 0);\nloop invariant (if N > 0 then x == N else m < N);\nloop invariant (if N > 0 then input == 1 else input <= 0);\nloop invariant (if N > 0 then m == N - 1 else m == 0);\nloop invariant (if N > 0 then x == N else m < N);\nloop invariant (if N > 0 then input == 1 else input <= 0);\nloop invariant (if N > 0 then m == N - 1 else m == 0);\nloop invariant (if N > 0 then x == N else m < N);\nloop invariant (if N > 0 then input == 1 else input <= 0);\nloop invariant (if N > 0 then m == N - 1 else m == 0);\nloop invariant (if N > 0 then x == N else m < N);\nloop invariant (if N > 0 then input == 1 else input <= 0);\nloop invariant (if N > 0 then m == N - 1 else m == 0);\nloop invariant (if N > 0 then x == N else m < N);\nloop invariant (if N > 0 then input == 1 else input <= 0);\nloop invariant (if N > 0 then m == N - 1 else m == 0);\nloop invariant (if N > 0 then x == N else m < N);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint N = unknown_int();\n\tint x = 0;\n\tint m = 0;\n\tint input;\n\n \t/*@\n\n\n\n\n\n\n\n\n*/\nwhile (x < N) {\n\n\t\tinput = unknown_int();\n\t\tif( input ) {\n\n\t\t\tm = x;\n\t\t}\n\n\t\tx = x + 1;\n\n\t}\n\n\tif (N > 0) {\n\t\t{;\n//@ assert((0 <= m) && (m < N));\n}\n\n\t}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant 0 <= m <= x;\nloop invariant 0 <= input <= 1;\nloop invariant (N > 0) ==> (0 <= m) && (m < N);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint N = unknown_int();\n\tint x = 0;\n\tint m = 0;\n\tint input;\n\n \t/*@\n\nloop invariant i2: 0 <= m <= x;\n\nloop invariant i4: (N > 0) ==> (0 <= m) && (m < N);\n*/\nwhile (x < N) {\n\n\t\tinput = unknown_int();\n\t\tif( input ) {\n\n\t\t\tm = x;\n\t\t}\n\n\t\tx = x + 1;\n\n\t}\n\n\tif (N > 0) {\n\t\t{;\n//@ assert((0 <= m) && (m < N));\n}\n\n\t}\n\n}",
                "checker_output_after_prune": true
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 128: unexpected token 'N'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint N = unknown_int();\n\tint x = 0;\n\tint m = 0;\n\tint input;\n\n \t/*@\nloop invariant i1: 0 <= x <= N;\nloop invariant i2: x > 0 ==> 0 <= m < x;\nloop invariant i3: x > 0 ==> m < N;\nloop invariant i4: x > 0 ==> m >= 0;\nloop invariant i5: 1 <= x <= N;\nloop invariant i6: 1 <= N;\nloop invariant i7: 1 <= m <= N;\nloop invariant i8: x > m ==> input > 0;\nloop invariant i9: ( m <= x ) && ( x > 0) && ( x <= N ) && ( m >= 0) && ( m <= N ) && ( N >= 0) && ( N <= 2147483647) && ( x >= 0);\nloop invariant i10: 0 <= m <= N;\nloop invariant i11: x == N ==> m == x;\nloop invariant i12: m == x ==> x == N;\nloop invariant i13: x == N ==> m == N;\nloop invariant i14: m == N ==> x == N;\nloop invariant i15: x == N ==> m == 0;\nloop invariant i16: m == 0 ==> x == N;\nloop invariant i17: m == x ==> m >= 0;\nloop invariant i18: m == x ==> m < N;\nloop invariant i19: m == x ==> x >= 0;\nloop invariant i20: m == x ==> x < N;\nloop invariant i21: m == x ==> N >= 0;\nloop invariant i22: m == x ==> N > 0;\nloop invariant i23: m == x ==> N > x;\nloop invariant i24: m == x ==> N < x;\nloop invariant i25: m == x ==> N != x;\nloop invariant i26: m == x ==> N == x;\nloop invariant i27: m == x ==> m != x;\nloop invariant i28: m == x ==> m == 0;\nloop invariant i29: m == x ==> m <= N;\nloop invariant i30: m == x ==> m > 0;\nloop invariant i31: m == x ==> m != 0;\nloop invariant i32: m == x ==> m == N;\nloop invariant i33: m == x ==> m >= N;\nloop invariant i34: m == x ==> m != N;\nloop invariant i35: m == x ==> m == x;\nloop invariant i36: x <= N;\nloop invariant i37: m <= N;\nloop invariant i38: input >= 0;\nloop invariant i39: input <= 1;\nloop invariant i40: m <= x;\nloop invariant i41: m >= 0;\nloop invariant i42: 0 <= m <= x;\nloop invariant i43: x < N ==> (0 <= m < N);\nloop invariant i44: N >= 0;\nloop invariant i45: -1 <= m <= N;\nloop invariant i46: (N <= 0 ==> m == 0);\nloop invariant i47: (N > 0 ==> m <= x);\nloop invariant i48: (x <= N ==> x == m || m == 0);\nloop invariant i49: (x == N) ==> (m == N);\nloop invariant i50: (x < N) ==> (m <= x);\nloop invariant i51: N > 0 ==> (m >= 0);\nloop invariant i52: N > 0 ==> (m < N);\nloop invariant i53: 0 <= x <= N ==> m <= x;\nloop invariant i54: 0 <= m <= N ==> m <= x;\nloop invariant i55: 0 <= x;\nloop invariant i56: (x > 0) ==> (0 <= m);\nloop invariant i57: (x > 0) ==> (m < N);\nloop invariant i58: (x > 0) ==> (m <= x);\nloop invariant i59: (x > 0) ==> (m == x);\nloop invariant i60: (x > 0) ==> (m == (x - 1));\nloop invariant i61: (x > 0) ==> (m == (x - 2));\nloop invariant i62: (x > 0) ==> (m == (x - 3));\nloop invariant i63: (x > 0) ==> (m == (x - 4));\nloop invariant i64: (x > 0) ==> (m == (x - 5));\nloop invariant i65: (x > 0) ==> (m == (x - 6));\nloop invariant i66: (x > 0) ==> (m == (x - 7));\nloop invariant i67: (x > 0) ==> (m == (x - 8));\nloop invariant i68: (x > 0) ==> (m == (x - 9));\nloop invariant i69: (x > 0) ==> (m == (x - 10));\nloop invariant i70: (x > 0) ==> (m == (x - 11));\nloop invariant i71: (x > 0) ==> (m == (x - 12));\nloop invariant i72: (x > 0) ==> (m == (x - 13));\nloop invariant i73: (x > 0) ==> (m == (x - 14));\nloop invariant i74: (x > 0) ==> (m == (x - 15));\nloop invariant i75: (x > 0) ==> (m == (x - 16));\nloop invariant i76: (x > 0) ==> (m == (x - 17));\nloop invariant i77: (x > 0) ==> (m == (x - 18));\nloop invariant i78: (x > 0) ==> (m == (x - 19));\nloop invariant i79: (x > 0) ==> (m == (x - 20));\nloop invariant i80: (x > 0) ==> (m == (x - 21));\nloop invariant i81: (x > 0) ==> (m == (x - 22));\nloop invariant i82: (x > 0) ==> (m == (x - 23));\nloop invariant i83: (x > 0) ==> (m == (x - 24));\nloop invariant i84: (x > 0) ==> (m == (x - 25));\nloop invariant i85: (x > 0) ==> (m == (x - 26));\nloop invariant i86: (x > 0) ==> (m == (x - 27));\nloop invariant i87: (x > 0) ==> (m == (x - 28));\nloop invariant i88: (x > 0) ==> (m == (x - 29));\nloop invariant i89: (x > 0) ==> (m == (x - 30));\nloop invariant i90: (x > 0) ==> (m == (x - 31));\nloop invariant i91: (x > 0) ==> (m == (x - 32));\nloop invariant i92: (x > 0) ==> (m == (x - 33));\nloop invariant i93: (x > 0) ==> (m == (x - 34));\nloop invariant i94: (x > 0) ==> (m == (x - 35));\nloop invariant i95: (x > 0) ==> (m == (x - 36));\nloop invariant i96: (x > 0) ==> (m == (x - 37));\nloop invariant i97: (x > 0) ==> (m == (x - 38));\nloop invariant i98: (x > 0) ==> (m == (x - 39));\nloop invariant i99: (x > 0) ==> (m == (x - 40));\nloop invariant i100: (x > 0) ==> (m == (x - 41));\nloop invariant i101: (x > 0) ==> (m == (x - 42));\nloop invariant i102: (x > 0) ==> (m == (x - 43));\nloop invariant i103: (x > 0) ==> (m == (x - 44));\nloop invariant i104: (x > 0) ==> (m == (x - 45));\nloop invariant i105: (x > 0) ==> (m == (x - 46));\nloop invariant i106: (x > 0) ==> (m == (x - 47));\nloop invariant i107: (x > 0) ==> (m == (x - 48));\nloop invariant i108: (x > 0) ==> (m == (x - 49));\nloop invariant i109: N > 0 ==> m < N;\nloop invariant i110: N > 0 ==> 0 <= m <= N;\nloop invariant i111: N <= 0 ==> m == N;\nloop invariant i112: (if N > 0 then 0 <= m <= N else 0 <= m <= 0);\nloop invariant i113: (if N > 0 then m < N else m <= 0);\nloop invariant i114: (if N > 0 then x == m + 1 else m == 0);\nloop invariant i115: (if N > 0 then input == 1 else input <= 0);\nloop invariant i116: (if N > 0 then m == N - 1 else m == 0);\nloop invariant i117: (if N > 0 then x == N else m < N);\nloop invariant i118: 0 <= input <= 1;\nloop invariant i119: (N > 0) ==> (0 <= m) && (m < N);\n*/\nwhile (x < N) {\n\n\t\tinput = unknown_int();\n\t\tif( input ) {\n\n\t\t\tm = x;\n\t\t}\n\n\t\tx = x + 1;\n\n\t}\n\n\tif (N > 0) {\n\t\t{;\n//@ assert((0 <= m) && (m < N));\n}\n\n\t}\n\n}",
        "combined_annotation_num_solver_calls": 69,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint N = unknown_int();\n\tint x = 0;\n\tint m = 0;\n\tint input;\n\n \t/*@\n\nloop invariant i2: x > 0 ==> 0 <= m < x;\nloop invariant i3: x > 0 ==> m < N;\nloop invariant i4: x > 0 ==> m >= 0;\n\n\n\n\n\n\n\n\n\nloop invariant i14: m == N ==> x == N;\n\n\nloop invariant i17: m == x ==> m >= 0;\n\nloop invariant i19: m == x ==> x >= 0;\n\n\n\n\n\n\n\n\nloop invariant i28: m == x ==> m == 0;\n\n\n\n\n\n\nloop invariant i35: m == x ==> m == x;\n\n\n\n\nloop invariant i40: m <= x;\nloop invariant i41: m >= 0;\nloop invariant i42: 0 <= m <= x;\nloop invariant i43: x < N ==> (0 <= m < N);\n\n\nloop invariant i46: (N <= 0 ==> m == 0);\nloop invariant i47: (N > 0 ==> m <= x);\n\n\nloop invariant i50: (x < N) ==> (m <= x);\nloop invariant i51: N > 0 ==> (m >= 0);\nloop invariant i52: N > 0 ==> (m < N);\nloop invariant i53: 0 <= x <= N ==> m <= x;\nloop invariant i54: 0 <= m <= N ==> m <= x;\nloop invariant i55: 0 <= x;\nloop invariant i56: (x > 0) ==> (0 <= m);\nloop invariant i57: (x > 0) ==> (m < N);\nloop invariant i58: (x > 0) ==> (m <= x);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i109: N > 0 ==> m < N;\nloop invariant i110: N > 0 ==> 0 <= m <= N;\n\n\n\n\n\n\n\n\nloop invariant i119: (N > 0) ==> (0 <= m) && (m < N);\n*/\nwhile (x < N) {\n\n\t\tinput = unknown_int();\n\t\tif( input ) {\n\n\t\t\tm = x;\n\t\t}\n\n\t\tx = x + 1;\n\n\t}\n\n\tif (N > 0) {\n\t\t{;\n//@ assert((0 <= m) && (m < N));\n}\n\n\t}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/split.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c"
        ],
        "skipped": [],
        "total": 71,
        "success_count": 61,
        "failure_count": 10,
        "success_rate": 0.8591549295774648
    }
}