{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int i = unknown();\n  int j = unknown();\n  int x = i;\n  int y = j;\n  while(x!=0) {\n\tx--;\n\ty--;\n  }\n  if(i==j)\n\tif(y != 0) { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= x <= i;\nloop invariant 0 <= y <= j;\nloop invariant x == (i - j + y);\nloop invariant x >= y;\nloop invariant x == (i - j + y);\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x == (i - j + y);\nloop invariant x >= y;\nloop invariant x == (i - j + y);\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x == (i - j + y);\nloop invariant x >= y;\nloop invariant x == (i - j + y);\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x == (i - j + y);\nloop invariant x >= y;\nloop invariant x == (i - j + y);\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x == (i - j + y);\nloop invariant x >= y;\nloop invariant x == (i - j + y);\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x == (i - j + y);\nloop invariant x >= y;\nloop invariant x == (i - j + y);\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x == (i - j + y);\nloop invariant x >= y;\nloop invariant x == (i - j + y);\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x == (i - j + y);\nloop invariant x >= y;\nloop invariant x == (i - j + y);\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x == (i - j + y);\nloop invariant x >= y;\nloop invariant x == (i - j + y);\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x == (i - j + y);\nloop invariant x >= y;\nloop invariant x == (i - j + y);\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x == (i - j + y);\nloop invariant x >= y;\nloop invariant x == (i - j + y);\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x == (i - j + y);\nloop invariant x >= y;\nloop invariant x == (i - j + y);\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x == (i - j + y);\nloop invariant x >= y;\nloop invariant x == (i - j + y);\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x == (i - j + y);\nloop invariant x >= y;\nloop invariant x == (i - j + y);\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x == (i - j + y);\nloop invariant x >= y;\nloop invariant x == (i - j + y);\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x == (i - j + y);\nloop invariant x >= y;\nloop invariant x == (i - j + y);\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x == (i - j + y);\nloop invariant x >= y;\nloop invariant x == (i - j + y);\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x == (i - j + y);\nloop invariant x >= y;\nloop invariant x == (i - j + y);\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x == (i - j + y);\nloop invariant x >= y;\nloop invariant x == (i - j + y);\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x == (i - j + y);\nloop invariant x >= y;\nloop invariant x == (i - j + y);\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x == (i - j + y);\nloop invariant x >= y;\nloop invariant x == (i - j + y);\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x == (i - j + y);\nloop invariant x >= y;\nloop invariant x == (i - j + y);\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x == (i - j + y);\nloop invariant x >= y;\nloop invariant x == (i - j + y);\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x == (i - j + y);\nloop invariant x >= y;\nloop invariant x == (i - j + y);\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x == (i - j + y);\nloop invariant x >= y;\n*/\n```",
            "```\n/*@\nloop invariant i;\nloop invariant j;\nloop invariant i >= x;\nloop invariant j >= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant i >= j;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= i;\nloop invariant 0 <= y <= j;\nloop invariant x = i - y;\nloop invariant y = j - x;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x <= j;\nloop invariant y <= i;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant \\at(y, Post) == 0 ==> \\at(i, Post) == \\at(j, Post);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 2147483647;\nloop invariant 0 <= j <= 2147483647;\nloop invariant 0 <= x <= 2147483647;\nloop invariant 0 <= y <= 2147483647;\nloop invariant i >= x;\nloop invariant j >= y;\nloop invariant (i==j ==> y != 0);\n*/\n```",
            "```\n/*@\nloop invariant y >= 0;\nloop invariant y <= i;\nloop invariant i >= 0;\nloop invariant x <= j;\nloop invariant x <= i;\nloop invariant i <= j;\nloop invariant x >= 0;\nloop invariant x >= y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= i;\nloop invariant 0 <= y <= j;\nloop invariant x + y == i + j;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant (i >= j) ==> (x == 0 && y == 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= j;\nloop invariant x == i - j;\nloop invariant y == j - i;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= j;\nloop invariant y <= j;\nloop invariant i + j == x + y;\nloop invariant i * j + i == x * y;\nloop invariant i * j + j == x * y;\nloop invariant i * i + i * j == x * x + y * y;\nloop invariant i * i + j * j == x * x + y * y;\nloop invariant i * i + j * j == x * x + y * y;\nloop invariant i * i + i * j == x * x + y * y;\nloop invariant i * i + j * j == x * x + y * y;\nloop invariant i * i + j * j == x * x + y * y;\nloop invariant i * i + i * j == x * x + y * y;\nloop invariant i * i + j * j == x * x + y * y;\nloop invariant i * i + j * j == x * x + y * y;\nloop invariant i * i + i * j == x * x + y * y;\nloop invariant i * i + j * j == x * x + y * y;\nloop invariant i * i + j * j == x * x + y * y;\nloop invariant i * i + i * j == x * x + y * y;\nloop invariant i * i + j * j == x * x + y * y;\nloop invariant i * i + j * j == x * x + y * y;\nloop invariant i * i + i * j == x * x + y * y;\nloop invariant i * i + j * j == x * x + y * y;\nloop invariant i * i + j * j == x * x + y * y;\nloop invariant i * i + i * j == x * x + y * y;\nloop invariant i * i + j * j == x * x + y * y;\nloop invariant i * i + j * j == x * x + y * y;\nloop invariant i * i + i * j == x * x + y * y;\nloop invariant i * i + j * j == x * x + y * y;\nloop invariant i * i + j * j == x * x + y * y;\nloop invariant i * i + i * j == x * x + y * y;\nloop invariant i * i + j * j == x * x + y * y;\nloop invariant i * i + j * j == x * x + y * y;\nloop invariant i * i + i * j == x * x + y * y;\nloop invariant i * i + j * j == x * x + y * y;\nloop invariant i * i + j * j == x * x + y * y;\nloop invariant i * i + i * j == x * x + y * y;\nloop invariant i * i + j * j == x * x + y * y;\nloop invariant i * i + j * j == x * x + y * y;\nloop invariant i * i + i * j == x * x + y * y;\nloop invariant i * i + j * j == x * x + y * y;\nloop invariant i * i + j * j == x * x + y * y;\nloop invariant i * i + i * j == x * x + y * y;\nloop invariant i * i + j * j == x * x + y * y;\nloop invariant i * i + j * j == x * x + y * y;\nloop invariant i * i + i * j == x * x + y * y;\nloop invariant i * i + j * j == x * x + y * y;\nloop invariant i * i + j * j == x * x + y * y;\nloop invariant i * i + i * j == x * x + y * y;\nloop invariant i * i + j * j == x * x + y * y;\nloop invariant i * i + j * j == x * x + y * y;\nloop invariant i * i + i * j == x * x + y * y;\nloop invariant i * i + j * j == x * x + y * y;\nloop invariant i * i + j * j == x * x + y * y;\nloop invariant i * i + i * j == x * x + y * y;\nloop invariant i * i + j * j == x * x + y * y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= i;\nloop invariant 0 <= y <= j;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x + y == i + j;\nloop invariant x == i - 1;\nloop invariant y == j - 1;\nloop invariant x == 0;\nloop invariant y == 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x + y == i + j;\nloop invariant x == i - 1;\nloop invariant y == j - 1;\nloop invariant x == 0;\nloop invariant y == 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x + y == i + j;\nloop invariant x == i - 1;\nloop invariant y == j - 1;\nloop invariant x == 0;\nloop invariant y == 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x + y == i + j;\nloop invariant x == i - 1;\nloop invariant y == j - 1;\nloop invariant x == 0;\nloop invariant y == 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x + y == i + j;\nloop invariant x == i - 1;\nloop invariant y == j - 1;\nloop invariant x == 0;\nloop invariant y == 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x + y == i + j;\nloop invariant x == i - 1;\nloop invariant y == j - 1;\nloop invariant x == 0;\nloop invariant y == 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x + y == i + j;\nloop invariant x == i - 1;\nloop invariant y == j - 1;\nloop invariant x == 0;\nloop invariant y == 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x + y == i + j;\nloop invariant x == i - 1;\nloop invariant y == j - 1;\nloop invariant x == 0;\nloop invariant y == 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x + y == i + j;\nloop invariant x == i - 1;\nloop invariant y == j - 1;\nloop invariant x == 0;\nloop invariant y == 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x + y == i + j;\nloop invariant x == i - 1;\nloop invariant y == j - 1;\nloop invariant x == 0;\nloop invariant y == 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x + y == i + j;\nloop invariant x == i - 1;\nloop invariant y == j - 1;\nloop invariant x == 0;\nloop invariant y == 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x + y == i + j;\nloop invariant x == i - 1;\nloop invariant y == j - 1;\nloop invariant x == 0;\nloop invariant y == 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x + y == i + j;\nloop invariant x == i - 1;\nloop invariant y == j - 1;\nloop invariant x == 0;\nloop invariant y == 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x + y == i + j;\nloop invariant x == i - 1;\nloop invariant y == j - 1;\nloop invariant x == 0;\nloop invariant y == 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\n*/\n```",
            "```\n/*@\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x >= i - j;\nloop invariant y >= j - i;\nloop invariant x - y == i - j;\nloop invariant i <= 2 * x and i >= 2 * y;\nloop invariant j <= 2 * x and j >= 2 * y;\nloop invariant x >= (i + j) / 2;\nloop invariant y >= (i + j) / 2;\nloop invariant i >= 2 * x or j >= 2 * y;\nloop invariant i <= 2 * x or j <= 2 * y;\nloop invariant not (i == j and y != 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= i; loop invariant 0 <= y <= j; loop invariant x >= 0; loop invariant y >= 0; loop invariant x + y == i + j; loop invariant y == j - x;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= i;\nloop invariant 0 <= y <= j;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x == i - j;\nloop invariant y == j - j;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x == i;\nloop invariant y == 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x == i;\nloop invariant y == 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x == i;\nloop invariant y == 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x == i;\nloop invariant y == 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x == i;\nloop invariant y == 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x == i;\nloop invariant y == 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x == i;\nloop invariant y == 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x == i;\nloop invariant y == 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x == i;\nloop invariant y == 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x == i;\nloop invariant y == 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x == i;\nloop invariant y == 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x == i;\nloop invariant y == 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x == i;\nloop invariant y == 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x == i;\nloop invariant y == 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x == i;\nloop invariant y == 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x == i;\nloop invariant y == 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x == i;\nloop invariant y == 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x == i;\nloop invariant y == 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x == i;\nloop invariant y == 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x == i;\nloop invariant y == 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x == i;\nloop invariant y == 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x == i;\nloop invariant y == 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x == i;\nloop invariant y == 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x == i;\nloop invariant y == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= i;\nloop invariant 0 <= y <= j;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x >= y;\nloop invariant x >= i-j;\nloop invariant y <= j-i;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x <= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x >= y;\nloop invariant x >= i-j;\nloop invariant y <= j-i;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x <= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x >= y;\nloop invariant x >= i-j;\nloop invariant y <= j-i;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x <= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x >= y;\nloop invariant x >= i-j;\nloop invariant y <= j-i;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x <= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x >= y;\nloop invariant x >= i-j;\nloop invariant y <= j-i;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x <= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x >= y;\nloop invariant x >= i-j;\nloop invariant y <= j-i;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x <= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x >= y;\nloop invariant x >= i-j;\nloop invariant y <= j-i;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x <= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x >= y;\nloop invariant x >= i-j;\nloop invariant y <= j-i;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x <= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x >= y;\nloop invariant x >= i-j;\nloop invariant y <= j-i;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x <= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x >= y;\nloop invariant x >= i-j;\nloop invariant y <= j-i;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x <= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x >= y;\nloop invariant x >= i-j;\nloop invariant y <= j-i;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x <= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x >= y;\nloop invariant x >= i-j;\nloop invariant y <= j-i;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x <= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x >= y;\nloop invariant x >= i-j;\nloop invariant y <= j-i;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x <= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x >= y;\nloop invariant x >= i-j;\nloop invariant y <= j-i;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x <= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x >= y;\nloop invariant x >= i-j;\nloop invariant y <= j-i;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x <= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x >= y;\nloop invariant x >= i-j;\nloop invariant y <= j-i;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x <= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x >= y;\nloop invariant x >= i-j;\nloop invariant y <= j-i;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x <= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x >= y;\nloop invariant x >= i-j;\nloop invariant y <= j-i;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x <= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x >= y;\nloop invariant x >= i-j;\nloop invariant y <= j-i;\nloop invariant x <= i;\nloop invariant y <= j;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i;\nloop invariant 0 <= j;\nloop invariant i == x + 1;\nloop invariant j == y + 1;\nloop invariant i == j ==> y == 0;\nloop invariant i != j ==> y != 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= i;\nloop invariant 0 <= y <= j;\nloop invariant i == j ==> x == 0;\nloop invariant i == j ==> y == 0;\nloop invariant ! (i == j) ==> x > 0;\nloop invariant ! (i == j) ==> y > 0;\nloop invariant i == j ==>> x == 0;\nloop invariant i == j ==>> y == 0;\nloop invariant ! (i == j) ==>> x > 0;\nloop invariant ! (i == j) ==>> y > 0;\nloop invariant i >= j ==> x >= 0;\nloop invariant i >= j ==> y >= 0;\nloop invariant i < j ==> x >= 0;\nloop invariant i < j ==> y >= 0;\nloop invariant i <= j ==> x <= 0;\nloop invariant i <= j ==> y <= 0;\nloop invariant i >= j ==>> x >= 0;\nloop invariant i >= j ==>> y >= 0;\nloop invariant i < j ==>> x >= 0;\nloop invariant i < j ==>> y >= 0;\nloop invariant i <= j ==>> x <= 0;\nloop invariant i <= j ==>> y <= 0;\nloop invariant i >= j ==>> x >= 0;\nloop invariant i >= j ==>> y >= 0;\nloop invariant i < j ==>> x >= 0;\nloop invariant i < j ==>> y >= 0;\nloop invariant i <= j ==>> x <= 0;\nloop invariant i <= j ==>> y <= 0;\nloop invariant i >= j ==>> x >= 0;\nloop invariant i >= j ==>> y >= 0;\nloop invariant i < j ==>> x >= 0;\nloop invariant i < j ==>> y >= 0;\nloop invariant i <= j ==>> x <= 0;\nloop invariant i <= j ==>> y <= 0;\nloop invariant i >= j ==>> x >= 0;\nloop invariant i >= j ==>> y >= 0;\nloop invariant i < j ==>> x >= 0;\nloop invariant i < j ==>> y >= 0;\nloop invariant i <= j ==>> x <= 0;\nloop invariant i <= j ==>> y <= 0;\nloop invariant i >= j ==>> x >= 0;\nloop invariant i >= j ==>> y >= 0;\nloop invariant i < j ==>> x >= 0;\nloop invariant i < j ==>> y >= 0;\nloop invariant i <= j ==>> x <= 0;\nloop invariant i <= j ==>> y <= 0;\nloop invariant i >= j ==>> x >= 0;\nloop invariant i >= j ==>> y >= 0;\nloop invariant i < j ==>> x >= 0;\nloop invariant i < j ==>> y >= 0;\nloop invariant i <= j ==>> x <= 0;\nloop invariant i <= j ==>> y <= 0;\nloop invariant i >= j ==>> x >= 0;\nloop invariant i >= j ==>> y >= 0;\nloop invariant i < j ==>> x >= 0;\nloop invariant i < j ==>> y >= 0;\nloop invariant i <= j ==>> x <= 0;\nloop invariant i <= j ==>> y <= 0;\nloop invariant i >= j ==>> x >= 0;\nloop invariant i >= j ==>> y >= 0;\nloop invariant i < j ==>> x >= 0;\nloop invariant i < j ==>> y >= 0;\nloop invariant i <= j ==>> x <= 0;\nloop invariant i <= j ==>> y <= 0;\nloop invariant i >= j ==>> x >= 0;\nloop invariant i >= j ==>> y >= 0;\nloop invariant i < j ==>> x >= 0;\nloop invariant i < j ==>> y >= 0;\nloop invariant i <= j ==>> x <= 0;\nloop invariant i <= j ==>> y <= 0;\nloop invariant i >= j ==>> x >= 0;\nloop invariant i >= j ==>> y >= 0;\nloop invariant i < j ==>> x >= 0;\nloop invariant i < j ==>> y >= 0;\nloop invariant i <= j ==>> x <= 0;\nloop invariant i <= j ==>> y <= 0;\nloop invariant i >= j ==>> x >= 0;\nloop invariant i >= j ==>> y >= 0;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= i;\nloop invariant 0 <= y <= j;\nloop invariant x == (i - j + y);\nloop invariant x >= y;\nloop invariant x == (i - j + y);\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x == (i - j + y);\nloop invariant x >= y;\nloop invariant x == (i - j + y);\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x == (i - j + y);\nloop invariant x >= y;\nloop invariant x == (i - j + y);\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x == (i - j + y);\nloop invariant x >= y;\nloop invariant x == (i - j + y);\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x == (i - j + y);\nloop invariant x >= y;\nloop invariant x == (i - j + y);\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x == (i - j + y);\nloop invariant x >= y;\nloop invariant x == (i - j + y);\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x == (i - j + y);\nloop invariant x >= y;\nloop invariant x == (i - j + y);\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x == (i - j + y);\nloop invariant x >= y;\nloop invariant x == (i - j + y);\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x == (i - j + y);\nloop invariant x >= y;\nloop invariant x == (i - j + y);\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x == (i - j + y);\nloop invariant x >= y;\nloop invariant x == (i - j + y);\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x == (i - j + y);\nloop invariant x >= y;\nloop invariant x == (i - j + y);\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x == (i - j + y);\nloop invariant x >= y;\nloop invariant x == (i - j + y);\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x == (i - j + y);\nloop invariant x >= y;\nloop invariant x == (i - j + y);\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x == (i - j + y);\nloop invariant x >= y;\nloop invariant x == (i - j + y);\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x == (i - j + y);\nloop invariant x >= y;\nloop invariant x == (i - j + y);\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x == (i - j + y);\nloop invariant x >= y;\nloop invariant x == (i - j + y);\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x == (i - j + y);\nloop invariant x >= y;\nloop invariant x == (i - j + y);\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x == (i - j + y);\nloop invariant x >= y;\nloop invariant x == (i - j + y);\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x == (i - j + y);\nloop invariant x >= y;\nloop invariant x == (i - j + y);\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x == (i - j + y);\nloop invariant x >= y;\nloop invariant x == (i - j + y);\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x == (i - j + y);\nloop invariant x >= y;\nloop invariant x == (i - j + y);\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x == (i - j + y);\nloop invariant x >= y;\nloop invariant x == (i - j + y);\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x == (i - j + y);\nloop invariant x >= y;\nloop invariant x == (i - j + y);\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x == (i - j + y);\nloop invariant x >= y;\nloop invariant x == (i - j + y);\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x == (i - j + y);\nloop invariant x >= y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int i = unknown();\n  int j = unknown();\n  int x = i;\n  int y = j;\n  /*@\n\n\nloop invariant i3: x == (i - j + y);\n\nloop invariant i5: x <= i;\nloop invariant i6: y <= j;\n*/\nwhile(x!=0) {\n\tx--;\n\ty--;\n  }\n  if(i==j)\n\tif(y != 0) { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant i;\nloop invariant j;\nloop invariant i >= x;\nloop invariant j >= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant i >= j;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\nloop invariant i <= j;\nloop invariant x >= y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int i = unknown();\n  int j = unknown();\n  int x = i;\n  int y = j;\n  /*@\n\n\nloop invariant i3: i >= x;\nloop invariant i4: j >= y;\n\n\n\nloop invariant i8: x <= i;\nloop invariant i9: y <= j;\n\n\n*/\nwhile(x!=0) {\n\tx--;\n\ty--;\n  }\n  if(i==j)\n\tif(y != 0) { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= i;\nloop invariant 0 <= y <= j;\nloop invariant x = i - y;\nloop invariant y = j - x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int i = unknown();\n  int j = unknown();\n  int x = i;\n  int y = j;\n  /*@\n\n\n\n\n*/\nwhile(x!=0) {\n\tx--;\n\ty--;\n  }\n  if(i==j)\n\tif(y != 0) { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x <= j;\nloop invariant y <= i;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant \\at(y, Post) == 0 ==> \\at(i, Post) == \\at(j, Post);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int i = unknown();\n  int j = unknown();\n  int x = i;\n  int y = j;\n  /*@\n\n\n\n\n\n\n\n*/\nwhile(x!=0) {\n\tx--;\n\ty--;\n  }\n  if(i==j)\n\tif(y != 0) { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 2147483647;\nloop invariant 0 <= j <= 2147483647;\nloop invariant 0 <= x <= 2147483647;\nloop invariant 0 <= y <= 2147483647;\nloop invariant i >= x;\nloop invariant j >= y;\nloop invariant (i==j ==> y != 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int i = unknown();\n  int j = unknown();\n  int x = i;\n  int y = j;\n  /*@\n\n\n\n\nloop invariant i5: i >= x;\nloop invariant i6: j >= y;\n\n*/\nwhile(x!=0) {\n\tx--;\n\ty--;\n  }\n  if(i==j)\n\tif(y != 0) { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant y >= 0;\nloop invariant y <= i;\nloop invariant i >= 0;\nloop invariant x <= j;\nloop invariant x <= i;\nloop invariant i <= j;\nloop invariant x >= 0;\nloop invariant x >= y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int i = unknown();\n  int j = unknown();\n  int x = i;\n  int y = j;\n  /*@\n\n\n\n\nloop invariant i5: x <= i;\n\n\n\n*/\nwhile(x!=0) {\n\tx--;\n\ty--;\n  }\n  if(i==j)\n\tif(y != 0) { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= i;\nloop invariant 0 <= y <= j;\nloop invariant x + y == i + j;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant (i >= j) ==> (x == 0 && y == 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int i = unknown();\n  int j = unknown();\n  int x = i;\n  int y = j;\n  /*@\n\n\n\n\n\n\n*/\nwhile(x!=0) {\n\tx--;\n\ty--;\n  }\n  if(i==j)\n\tif(y != 0) { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= j;\nloop invariant x == i - j;\nloop invariant y == j - i;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= j;\nloop invariant y <= j;\nloop invariant i + j == x + y;\nloop invariant i * j + i == x * y;\nloop invariant i * j + j == x * y;\nloop invariant i * i + i * j == x * x + y * y;\nloop invariant i * i + j * j == x * x + y * y;\nloop invariant i * i + j * j == x * x + y * y;\nloop invariant i * i + i * j == x * x + y * y;\nloop invariant i * i + j * j == x * x + y * y;\nloop invariant i * i + j * j == x * x + y * y;\nloop invariant i * i + i * j == x * x + y * y;\nloop invariant i * i + j * j == x * x + y * y;\nloop invariant i * i + j * j == x * x + y * y;\nloop invariant i * i + i * j == x * x + y * y;\nloop invariant i * i + j * j == x * x + y * y;\nloop invariant i * i + j * j == x * x + y * y;\nloop invariant i * i + i * j == x * x + y * y;\nloop invariant i * i + j * j == x * x + y * y;\nloop invariant i * i + j * j == x * x + y * y;\nloop invariant i * i + i * j == x * x + y * y;\nloop invariant i * i + j * j == x * x + y * y;\nloop invariant i * i + j * j == x * x + y * y;\nloop invariant i * i + i * j == x * x + y * y;\nloop invariant i * i + j * j == x * x + y * y;\nloop invariant i * i + j * j == x * x + y * y;\nloop invariant i * i + i * j == x * x + y * y;\nloop invariant i * i + j * j == x * x + y * y;\nloop invariant i * i + j * j == x * x + y * y;\nloop invariant i * i + i * j == x * x + y * y;\nloop invariant i * i + j * j == x * x + y * y;\nloop invariant i * i + j * j == x * x + y * y;\nloop invariant i * i + i * j == x * x + y * y;\nloop invariant i * i + j * j == x * x + y * y;\nloop invariant i * i + j * j == x * x + y * y;\nloop invariant i * i + i * j == x * x + y * y;\nloop invariant i * i + j * j == x * x + y * y;\nloop invariant i * i + j * j == x * x + y * y;\nloop invariant i * i + i * j == x * x + y * y;\nloop invariant i * i + j * j == x * x + y * y;\nloop invariant i * i + j * j == x * x + y * y;\nloop invariant i * i + i * j == x * x + y * y;\nloop invariant i * i + j * j == x * x + y * y;\nloop invariant i * i + j * j == x * x + y * y;\nloop invariant i * i + i * j == x * x + y * y;\nloop invariant i * i + j * j == x * x + y * y;\nloop invariant i * i + j * j == x * x + y * y;\nloop invariant i * i + i * j == x * x + y * y;\nloop invariant i * i + j * j == x * x + y * y;\nloop invariant i * i + j * j == x * x + y * y;\nloop invariant i * i + i * j == x * x + y * y;\nloop invariant i * i + j * j == x * x + y * y;\nloop invariant i * i + j * j == x * x + y * y;\nloop invariant i * i + i * j == x * x + y * y;\nloop invariant i * i + j * j == x * x + y * y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int i = unknown();\n  int j = unknown();\n  int x = i;\n  int y = j;\n  /*@\n\n\n\n\n\n\nloop invariant i7: y <= j;\n\n\n\n\n\n*/\nwhile(x!=0) {\n\tx--;\n\ty--;\n  }\n  if(i==j)\n\tif(y != 0) { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= i;\nloop invariant 0 <= y <= j;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x + y == i + j;\nloop invariant x == i - 1;\nloop invariant y == j - 1;\nloop invariant x == 0;\nloop invariant y == 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x + y == i + j;\nloop invariant x == i - 1;\nloop invariant y == j - 1;\nloop invariant x == 0;\nloop invariant y == 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x + y == i + j;\nloop invariant x == i - 1;\nloop invariant y == j - 1;\nloop invariant x == 0;\nloop invariant y == 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x + y == i + j;\nloop invariant x == i - 1;\nloop invariant y == j - 1;\nloop invariant x == 0;\nloop invariant y == 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x + y == i + j;\nloop invariant x == i - 1;\nloop invariant y == j - 1;\nloop invariant x == 0;\nloop invariant y == 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x + y == i + j;\nloop invariant x == i - 1;\nloop invariant y == j - 1;\nloop invariant x == 0;\nloop invariant y == 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x + y == i + j;\nloop invariant x == i - 1;\nloop invariant y == j - 1;\nloop invariant x == 0;\nloop invariant y == 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x + y == i + j;\nloop invariant x == i - 1;\nloop invariant y == j - 1;\nloop invariant x == 0;\nloop invariant y == 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x + y == i + j;\nloop invariant x == i - 1;\nloop invariant y == j - 1;\nloop invariant x == 0;\nloop invariant y == 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x + y == i + j;\nloop invariant x == i - 1;\nloop invariant y == j - 1;\nloop invariant x == 0;\nloop invariant y == 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x + y == i + j;\nloop invariant x == i - 1;\nloop invariant y == j - 1;\nloop invariant x == 0;\nloop invariant y == 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x + y == i + j;\nloop invariant x == i - 1;\nloop invariant y == j - 1;\nloop invariant x == 0;\nloop invariant y == 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x + y == i + j;\nloop invariant x == i - 1;\nloop invariant y == j - 1;\nloop invariant x == 0;\nloop invariant y == 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x + y == i + j;\nloop invariant x == i - 1;\nloop invariant y == j - 1;\nloop invariant x == 0;\nloop invariant y == 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int i = unknown();\n  int j = unknown();\n  int x = i;\n  int y = j;\n  /*@\n\n\n\n\nloop invariant i5: x <= i;\nloop invariant i6: y <= j;\n\n\n\n\n\n*/\nwhile(x!=0) {\n\tx--;\n\ty--;\n  }\n  if(i==j)\n\tif(y != 0) { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x >= i - j;\nloop invariant y >= j - i;\nloop invariant x - y == i - j;\nloop invariant i <= 2 * x and i >= 2 * y;\nloop invariant j <= 2 * x and j >= 2 * y;\nloop invariant x >= (i + j) / 2;\nloop invariant y >= (i + j) / 2;\nloop invariant i >= 2 * x or j >= 2 * y;\nloop invariant i <= 2 * x or j <= 2 * y;\nloop invariant not (i == j and y != 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int i = unknown();\n  int j = unknown();\n  int x = i;\n  int y = j;\n  /*@\n\n\nloop invariant i3: x <= i;\nloop invariant i4: y <= j;\n\n\nloop invariant i7: x - y == i - j;\n\n\n\n\n\n\n\n*/\nwhile(x!=0) {\n\tx--;\n\ty--;\n  }\n  if(i==j)\n\tif(y != 0) { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= i; loop invariant 0 <= y <= j; loop invariant x >= 0; loop invariant y >= 0; loop invariant x + y == i + j; loop invariant y == j - x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int i = unknown();\n  int j = unknown();\n  int x = i;\n  int y = j;\n  /*@\n\n*/\nwhile(x!=0) {\n\tx--;\n\ty--;\n  }\n  if(i==j)\n\tif(y != 0) { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= i;\nloop invariant 0 <= y <= j;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x == i - j;\nloop invariant y == j - j;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x == i;\nloop invariant y == 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x == i;\nloop invariant y == 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x == i;\nloop invariant y == 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x == i;\nloop invariant y == 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x == i;\nloop invariant y == 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x == i;\nloop invariant y == 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x == i;\nloop invariant y == 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x == i;\nloop invariant y == 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x == i;\nloop invariant y == 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x == i;\nloop invariant y == 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x == i;\nloop invariant y == 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x == i;\nloop invariant y == 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x == i;\nloop invariant y == 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x == i;\nloop invariant y == 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x == i;\nloop invariant y == 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x == i;\nloop invariant y == 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x == i;\nloop invariant y == 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x == i;\nloop invariant y == 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x == i;\nloop invariant y == 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x == i;\nloop invariant y == 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x == i;\nloop invariant y == 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x == i;\nloop invariant y == 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x == i;\nloop invariant y == 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x == i;\nloop invariant y == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int i = unknown();\n  int j = unknown();\n  int x = i;\n  int y = j;\n  /*@\n\n\n\n\nloop invariant i5: x <= i;\nloop invariant i6: y <= j;\n\n\n\n\n*/\nwhile(x!=0) {\n\tx--;\n\ty--;\n  }\n  if(i==j)\n\tif(y != 0) { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= i;\nloop invariant 0 <= y <= j;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x >= y;\nloop invariant x >= i-j;\nloop invariant y <= j-i;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x <= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x >= y;\nloop invariant x >= i-j;\nloop invariant y <= j-i;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x <= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x >= y;\nloop invariant x >= i-j;\nloop invariant y <= j-i;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x <= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x >= y;\nloop invariant x >= i-j;\nloop invariant y <= j-i;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x <= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x >= y;\nloop invariant x >= i-j;\nloop invariant y <= j-i;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x <= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x >= y;\nloop invariant x >= i-j;\nloop invariant y <= j-i;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x <= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x >= y;\nloop invariant x >= i-j;\nloop invariant y <= j-i;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x <= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x >= y;\nloop invariant x >= i-j;\nloop invariant y <= j-i;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x <= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x >= y;\nloop invariant x >= i-j;\nloop invariant y <= j-i;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x <= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x >= y;\nloop invariant x >= i-j;\nloop invariant y <= j-i;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x <= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x >= y;\nloop invariant x >= i-j;\nloop invariant y <= j-i;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x <= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x >= y;\nloop invariant x >= i-j;\nloop invariant y <= j-i;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x <= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x >= y;\nloop invariant x >= i-j;\nloop invariant y <= j-i;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x <= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x >= y;\nloop invariant x >= i-j;\nloop invariant y <= j-i;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x <= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x >= y;\nloop invariant x >= i-j;\nloop invariant y <= j-i;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x <= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x >= y;\nloop invariant x >= i-j;\nloop invariant y <= j-i;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x <= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x >= y;\nloop invariant x >= i-j;\nloop invariant y <= j-i;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x <= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x >= y;\nloop invariant x >= i-j;\nloop invariant y <= j-i;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x <= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x >= y;\nloop invariant x >= i-j;\nloop invariant y <= j-i;\nloop invariant x <= i;\nloop invariant y <= j;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int i = unknown();\n  int j = unknown();\n  int x = i;\n  int y = j;\n  /*@\n\n\n\n\n\n\n\nloop invariant i8: x <= i;\nloop invariant i9: y <= j;\n\n*/\nwhile(x!=0) {\n\tx--;\n\ty--;\n  }\n  if(i==j)\n\tif(y != 0) { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i;\nloop invariant 0 <= j;\nloop invariant i == x + 1;\nloop invariant j == y + 1;\nloop invariant i == j ==> y == 0;\nloop invariant i != j ==> y != 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int i = unknown();\n  int j = unknown();\n  int x = i;\n  int y = j;\n  /*@\n\n\n\n\n\n\n*/\nwhile(x!=0) {\n\tx--;\n\ty--;\n  }\n  if(i==j)\n\tif(y != 0) { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 12,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= i;\nloop invariant 0 <= y <= j;\nloop invariant i == j ==> x == 0;\nloop invariant i == j ==> y == 0;\nloop invariant ! (i == j) ==> x > 0;\nloop invariant ! (i == j) ==> y > 0;\nloop invariant i == j ==>> x == 0;\nloop invariant i == j ==>> y == 0;\nloop invariant ! (i == j) ==>> x > 0;\nloop invariant ! (i == j) ==>> y > 0;\nloop invariant i >= j ==> x >= 0;\nloop invariant i >= j ==> y >= 0;\nloop invariant i < j ==> x >= 0;\nloop invariant i < j ==> y >= 0;\nloop invariant i <= j ==> x <= 0;\nloop invariant i <= j ==> y <= 0;\nloop invariant i >= j ==>> x >= 0;\nloop invariant i >= j ==>> y >= 0;\nloop invariant i < j ==>> x >= 0;\nloop invariant i < j ==>> y >= 0;\nloop invariant i <= j ==>> x <= 0;\nloop invariant i <= j ==>> y <= 0;\nloop invariant i >= j ==>> x >= 0;\nloop invariant i >= j ==>> y >= 0;\nloop invariant i < j ==>> x >= 0;\nloop invariant i < j ==>> y >= 0;\nloop invariant i <= j ==>> x <= 0;\nloop invariant i <= j ==>> y <= 0;\nloop invariant i >= j ==>> x >= 0;\nloop invariant i >= j ==>> y >= 0;\nloop invariant i < j ==>> x >= 0;\nloop invariant i < j ==>> y >= 0;\nloop invariant i <= j ==>> x <= 0;\nloop invariant i <= j ==>> y <= 0;\nloop invariant i >= j ==>> x >= 0;\nloop invariant i >= j ==>> y >= 0;\nloop invariant i < j ==>> x >= 0;\nloop invariant i < j ==>> y >= 0;\nloop invariant i <= j ==>> x <= 0;\nloop invariant i <= j ==>> y <= 0;\nloop invariant i >= j ==>> x >= 0;\nloop invariant i >= j ==>> y >= 0;\nloop invariant i < j ==>> x >= 0;\nloop invariant i < j ==>> y >= 0;\nloop invariant i <= j ==>> x <= 0;\nloop invariant i <= j ==>> y <= 0;\nloop invariant i >= j ==>> x >= 0;\nloop invariant i >= j ==>> y >= 0;\nloop invariant i < j ==>> x >= 0;\nloop invariant i < j ==>> y >= 0;\nloop invariant i <= j ==>> x <= 0;\nloop invariant i <= j ==>> y <= 0;\nloop invariant i >= j ==>> x >= 0;\nloop invariant i >= j ==>> y >= 0;\nloop invariant i < j ==>> x >= 0;\nloop invariant i < j ==>> y >= 0;\nloop invariant i <= j ==>> x <= 0;\nloop invariant i <= j ==>> y <= 0;\nloop invariant i >= j ==>> x >= 0;\nloop invariant i >= j ==>> y >= 0;\nloop invariant i < j ==>> x >= 0;\nloop invariant i < j ==>> y >= 0;\nloop invariant i <= j ==>> x <= 0;\nloop invariant i <= j ==>> y <= 0;\nloop invariant i >= j ==>> x >= 0;\nloop invariant i >= j ==>> y >= 0;\nloop invariant i < j ==>> x >= 0;\nloop invariant i < j ==>> y >= 0;\nloop invariant i <= j ==>> x <= 0;\nloop invariant i <= j ==>> y <= 0;\nloop invariant i >= j ==>> x >= 0;\nloop invariant i >= j ==>> y >= 0;\nloop invariant i < j ==>> x >= 0;\nloop invariant i < j ==>> y >= 0;\nloop invariant i <= j ==>> x <= 0;\nloop invariant i <= j ==>> y <= 0;\nloop invariant i >= j ==>> x >= 0;\nloop invariant i >= j ==>> y >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int i = unknown();\n  int j = unknown();\n  int x = i;\n  int y = j;\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile(x!=0) {\n\tx--;\n\ty--;\n  }\n  if(i==j)\n\tif(y != 0) { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 31: Assignment operators not allowed in annotations.",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int i = unknown();\n  int j = unknown();\n  int x = i;\n  int y = j;\n  /*@\nloop invariant i1: 0 <= x <= i;\nloop invariant i2: 0 <= y <= j;\nloop invariant i3: x == (i - j + y);\nloop invariant i4: x >= y;\nloop invariant i5: x <= i;\nloop invariant i6: y <= j;\nloop invariant i7: i;\nloop invariant i8: j;\nloop invariant i9: i >= x;\nloop invariant i10: j >= y;\nloop invariant i11: x >= 0;\nloop invariant i12: y >= 0;\nloop invariant i13: i >= j;\nloop invariant i14: i <= j;\nloop invariant i15: x = i - y;\nloop invariant i16: y = j - x;\nloop invariant i17: 0 <= y <= 100000;\nloop invariant i18: x >= (1 + (y - 1) * y / 2);\nloop invariant i19: x <= j;\nloop invariant i20: y <= i;\nloop invariant i21: \\at(y, Post) == 0 ==> \\at(i, Post) == \\at(j, Post);\nloop invariant i22: 0 <= i <= 2147483647;\nloop invariant i23: 0 <= j <= 2147483647;\nloop invariant i24: 0 <= x <= 2147483647;\nloop invariant i25: 0 <= y <= 2147483647;\nloop invariant i26: (i==j ==> y != 0);\nloop invariant i27: i >= 0;\nloop invariant i28: x + y == i + j;\nloop invariant i29: (i >= j) ==> (x == 0 && y == 0);\nloop invariant i30: 0 <= i <= j;\nloop invariant i31: x == i - j;\nloop invariant i32: y == j - i;\nloop invariant i33: i + j == x + y;\nloop invariant i34: i * j + i == x * y;\nloop invariant i35: i * j + j == x * y;\nloop invariant i36: i * i + i * j == x * x + y * y;\nloop invariant i37: i * i + j * j == x * x + y * y;\nloop invariant i38: x == i - 1;\nloop invariant i39: y == j - 1;\nloop invariant i40: x == 0;\nloop invariant i41: y == 0;\nloop invariant i42: x >= i - j;\nloop invariant i43: y >= j - i;\nloop invariant i44: x - y == i - j;\nloop invariant i45: i <= 2 * x and i >= 2 * y;\nloop invariant i46: j <= 2 * x and j >= 2 * y;\nloop invariant i47: x >= (i + j) / 2;\nloop invariant i48: y >= (i + j) / 2;\nloop invariant i49: i >= 2 * x or j >= 2 * y;\nloop invariant i50: i <= 2 * x or j <= 2 * y;\nloop invariant i51: not (i == j and y != 0);\nloop invariant i52: 0 <= x <= i; loop invariant 0 <= y <= j; loop invariant x >= 0; loop invariant y >= 0; loop invariant x + y == i + j; loop invariant y == j - x;\nloop invariant i53: y == j - j;\nloop invariant i54: x == i;\nloop invariant i55: x >= i-j;\nloop invariant i56: y <= j-i;\nloop invariant i57: x <= y;\nloop invariant i58: 0 <= i;\nloop invariant i59: 0 <= j;\nloop invariant i60: i == x + 1;\nloop invariant i61: j == y + 1;\nloop invariant i62: i == j ==> y == 0;\nloop invariant i63: i != j ==> y != 0;\nloop invariant i64: i == j ==> x == 0;\nloop invariant i65: ! (i == j) ==> x > 0;\nloop invariant i66: ! (i == j) ==> y > 0;\nloop invariant i67: i == j ==>> x == 0;\nloop invariant i68: i == j ==>> y == 0;\nloop invariant i69: ! (i == j) ==>> x > 0;\nloop invariant i70: ! (i == j) ==>> y > 0;\nloop invariant i71: i >= j ==> x >= 0;\nloop invariant i72: i >= j ==> y >= 0;\nloop invariant i73: i < j ==> x >= 0;\nloop invariant i74: i < j ==> y >= 0;\nloop invariant i75: i <= j ==> x <= 0;\nloop invariant i76: i <= j ==> y <= 0;\nloop invariant i77: i >= j ==>> x >= 0;\nloop invariant i78: i >= j ==>> y >= 0;\nloop invariant i79: i < j ==>> x >= 0;\nloop invariant i80: i < j ==>> y >= 0;\nloop invariant i81: i <= j ==>> x <= 0;\nloop invariant i82: i <= j ==>> y <= 0;\n*/\nwhile(x!=0) {\n\tx--;\n\ty--;\n  }\n  if(i==j)\n\tif(y != 0) { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
        "combined_annotation_num_solver_calls": 32,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int i = unknown();\n  int j = unknown();\n  int x = i;\n  int y = j;\n  /*@\n\n\nloop invariant i3: x == (i - j + y);\n\nloop invariant i5: x <= i;\nloop invariant i6: y <= j;\n\n\nloop invariant i9: i >= x;\nloop invariant i10: j >= y;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i44: x - y == i - j;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile(x!=0) {\n\tx--;\n\ty--;\n  }\n  if(i==j)\n\tif(y != 0) { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c"
        ],
        "skipped": [],
        "total": 31,
        "success_count": 29,
        "failure_count": 2,
        "success_rate": 0.9354838709677419
    }
}