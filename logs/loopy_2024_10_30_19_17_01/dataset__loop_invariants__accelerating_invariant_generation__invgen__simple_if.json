{
    "logs": {
        "file": "../dataset/loop_invariants/accelerating_invariant_generation/invgen/simple_if.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n  int n,m;\n  int i = 1;\n   \n  while( i < n ) {\n    if( m > 0 ) {\n      i = 2*i;\n    } else {\n      i = 3*i;\n    }\n    \n  }\n  {;\n//@ assert(i > 0 );\n}\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant i > 0;\nloop invariant i <= n * 2;\nloop invariant i <= n * 3;\n*/\n```",
            "```\n/*@\nloop invariant 0 < i;\nloop invariant i <= n;\nloop invariant i % 2 == 1 || i % 3 == 0;\nloop invariant m <= 0 || m > 0;\nloop invariant m <= 0 || i % 2 == 0;\nloop invariant m > 0 || i % 3 == 0;\nloop invariant (m <= 0 && i % 3 == 0) ==> (i == n && i % 2 == 0);\nloop invariant (m > 0 && i % 3 == 0) ==> (i == n && i % 2 == 0);\nloop invariant (m <= 0 && i % 2 == 0) ==> (i == n && i % 3 == 0);\nloop invariant (m > 0 && i % 2 == 0) ==> (i == n && i % 3 == 0);\nloop invariant (m > 0 && (i % 2 == 0 || i % 3 == 0)) ==> (i == n && (i % 2 == 0 && i % 3 == 0));\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant i is always equal to 2*i or 3*i;\nloop invariant i is always equal to 1;\nloop invariant i is always equal to 2;\nloop invariant i is always equal to 3;\nloop invariant i is always equal to 4;\nloop invariant i is always equal to 5;\nloop invariant i is always equal to 6;\nloop invariant i is always equal to 7;\nloop invariant i is always equal to 8;\nloop invariant i is always equal to 9;\nloop invariant i is always equal to 10;\nloop invariant i is always equal to 11;\nloop invariant i is always equal to 12;\nloop invariant i is always equal to 13;\nloop invariant i is always equal to 14;\nloop invariant i is always equal to 15;\nloop invariant i is always equal to 16;\nloop invariant i is always equal to 17;\nloop invariant i is always equal to 18;\nloop invariant i is always equal to 19;\nloop invariant i is always equal to 20;\nloop invariant i is always equal to 21;\nloop invariant i is always equal to 22;\nloop invariant i is always equal to 23;\nloop invariant i is always equal to 24;\nloop invariant i is always equal to 25;\nloop invariant i is always equal to 26;\nloop invariant i is always equal to 27;\nloop invariant i is always equal to 28;\nloop invariant i is always equal to 29;\nloop invariant i is always equal to 30;\nloop invariant i is always equal to 31;\nloop invariant i is always equal to 32;\nloop invariant i is always equal to 33;\nloop invariant i is always equal to 34;\nloop invariant i is always equal to 35;\nloop invariant i is always equal to 36;\nloop invariant i is always equal to 37;\nloop invariant i is always equal to 38;\nloop invariant i is always equal to 39;\nloop invariant i is always equal to 40;\nloop invariant i is always equal to 41;\nloop invariant i is always equal to 42;\nloop invariant i is always equal to 43;\nloop invariant i is always equal to 44;\nloop invariant i is always equal to 45;\nloop invariant i is always equal to 46;\nloop invariant i is always equal to 47;\nloop invariant i is always equal to 48;\nloop invariant i is always equal to 49;\nloop invariant i is always equal to 50;\nloop invariant i is always equal to 51;\nloop invariant i is always equal to 52;\nloop invariant i is always equal to 53;\nloop invariant i is always equal to 54;\nloop invariant i is always equal to 55;\nloop invariant i is always equal to 56;\nloop invariant i is always equal to 57;\nloop invariant i is always equal to 58;\nloop invariant i is always equal to 59;\nloop invariant i is always equal to 60;\nloop invariant i is always equal to 61;\nloop invariant i is always equal to 62;\nloop invariant i is always equal to 63;\nloop invariant i is always equal to 64;\nloop invariant i is always equal to 65;\nloop invariant i is always equal to 66;\nloop invariant i is always equal to 67;\nloop invariant i is always equal to 68;\nloop invariant i is always equal to 69;\nloop invariant i is always equal to 70;\nloop invariant i is always equal to 71;\nloop invariant i is always equal to 72;\nloop invariant i is always equal to 73;\nloop invariant i is always equal to 74;\nloop invariant i is always equal to 75;\nloop invariant i is always equal to 76;\nloop invariant i is always equal to 77;\nloop invariant i is always equal to 78;\nloop invariant i is always equal to 79;\nloop invariant i is always equal to 80;\nloop invariant i is always equal to 81;\nloop invariant i is always equal to 82;\nloop invariant i is always equal to 83;\nloop invariant i is always equal to 84;\nloop invariant i is always equal to 85;\nloop invariant i is always equal to 86;\nloop invariant i is always equal to 87;\nloop invariant i is always equal to 88;\nloop invariant i is always equal to 89;\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 2^n; loop invariant m > 0 ==> i > 0; loop invariant m <= 0 ==> i > 0;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant i >= 1;\nloop invariant i <= n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant i % 2 == 0 ==> m <= 0;\nloop invariant i % 3 == 0 ==> m > 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant m <= 0 ==> i % 2 == 0;\nloop invariant m > 0 ==> i % 3 == 0;\nloop invariant i >= 1;\n*/\n```",
            "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant i3;\nloop invariant i4;\nloop invariant i5;\nloop invariant i6;\nloop invariant i7;\nloop invariant i8;\nloop invariant i9;\nloop invariant i10;\nloop invariant i11;\nloop invariant i12;\nloop invariant i13;\nloop invariant i14;\nloop invariant i15;\nloop invariant i16;\nloop invariant i17;\nloop invariant i18;\nloop invariant i19;\nloop invariant i20;\nloop invariant i21;\nloop invariant i22;\nloop invariant i23;\nloop invariant i24;\nloop invariant i25;\nloop invariant i26;\nloop invariant i27;\nloop invariant i28;\nloop invariant i29;\nloop invariant i30;\nloop invariant i31;\nloop invariant i32;\nloop invariant i33;\nloop invariant i34;\nloop invariant i35;\nloop invariant i36;\nloop invariant i37;\nloop invariant i38;\nloop invariant i39;\nloop invariant i40;\nloop invariant i41;\nloop invariant i42;\nloop invariant i43;\nloop invariant i44;\nloop invariant i45;\nloop invariant i46;\nloop invariant i47;\nloop invariant i48;\nloop invariant i49;\nloop invariant i50;\nloop invariant i51;\nloop invariant i52;\nloop invariant i53;\nloop invariant i54;\nloop invariant i55;\nloop invariant i56;\nloop invariant i57;\nloop invariant i58;\nloop invariant i59;\nloop invariant i60;\nloop invariant i61;\nloop invariant i62;\nloop invariant i63;\nloop invariant i64;\nloop invariant i65;\nloop invariant i66;\nloop invariant i67;\nloop invariant i68;\nloop invariant i69;\nloop invariant i70;\nloop invariant i71;\nloop invariant i72;\nloop invariant i73;\nloop invariant i74;\nloop invariant i75;\nloop invariant i76;\nloop invariant i77;\nloop invariant i78;\nloop invariant i79;\nloop invariant i80;\nloop invariant i81;\nloop invariant i82;\nloop invariant i83;\nloop invariant i84;\nloop invariant i85;\nloop invariant i86;\nloop invariant i87;\nloop invariant i88;\nloop invariant i89;\nloop invariant i90;\nloop invariant i91;\nloop invariant i92;\nloop invariant i93;\nloop invariant i94;\nloop invariant i95;\nloop invariant i96;\nloop invariant i97;\nloop invariant i98;\nloop invariant i99;\nloop invariant i100;\nloop invariant i101;\nloop invariant i102;\nloop invariant i103;\nloop invariant i104;\nloop invariant i105;\nloop invariant i106;\nloop invariant i107;\nloop invariant i108;\nloop invariant i109;\nloop invariant i110;\nloop invariant i111;\nloop invariant i112;\nloop invariant i113;\nloop invariant i114;\nloop invariant i115;\nloop invariant i116;\nloop invariant i117;\nloop invariant i118;\nloop invariant i119;\nloop invariant i120;\nloop invariant i121;\nloop invariant i122;\nloop invariant i123;\nloop invariant i124;\nloop invariant i125;\nloop invariant i126;\nloop invariant i127;\nloop invariant i128;\nloop invariant i129;\nloop invariant i130;\nloop invariant i131;\nloop invariant i132;\nloop invariant i133;\nloop invariant i134;\nloop invariant i135;\nloop invariant i136;\nloop invariant i137;\nloop invariant i138;\nloop invariant i139;\nloop invariant i140;\nloop invariant i141;\nloop invariant i142;\nloop invariant i143;\nloop invariant i144;\nloop invariant i145;\nloop invariant i146;\nloop invariant i147;\nloop invariant i148;\nloop invariant i149;\nloop invariant i150;\nloop invariant i151;\nloop invariant i152;\nloop invariant i153;\nloop invariant i154;\nloop invariant i155;\nloop invariant i156;\nloop invariant i157;\nloop invariant i158;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= n;\nloop invariant 0 <= m;\nloop invariant 0 <= i <= n;\nloop invariant i > 0 ==> (m <= 0 ==> i == 3*i) || (m > 0 ==> i == 2*i);\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant i <= 0;\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant i <= 0;\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant i <= 0;\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant i <= 0;\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant i <= 0;\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant i <= 0;\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant i <= 0;\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant i <= 0;\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant i <= 0;\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant i <= 0;\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant i <= 0;\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant i <= 0;\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant i <= 0;\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant i <= 0;\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant i <= 0;\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant i <= 0;\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant i <= 0;\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant i <= 0;\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant i <= 0;\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant i <= 0;\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant i <= 0;\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant i <= 0;\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant i <= 0;\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant i <= 0;\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant i <= 0;\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant i <= 0;\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant i <= 0;\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant i <= 0;\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant i <= 0;\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant i <= 0;\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant i <= 0;\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant i <= 0;\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant i <= 0;\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant i <= 0;\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant i <= 0;\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant i <= 0;\nloop invariant i >= 1;\nloop invariant i <= n;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i;\nloop invariant i <= 2^n * i;\nloop invariant i <= 3^n * i;\nloop invariant i >= 0;\nloop invariant n >= 0;\nloop invariant m >= 0;\nloop invariant m <= 0;\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 < i;\nloop invariant i < n;\nloop invariant i < 2 * i ==> m <= 0;\nloop invariant i < 3 * i ==> m > 0;\nloop invariant i > 0;\nloop invariant i <= n;\nloop invariant i >= 1;\nloop invariant i < 2 * i ==> m <= 0;\nloop invariant i < 3 * i ==> m > 0;\nloop invariant i > 0;\nloop invariant i <= n;\nloop invariant i >= 1;\nloop invariant i < 2 * i ==> m <= 0;\nloop invariant i < 3 * i ==> m > 0;\nloop invariant i > 0;\nloop invariant i <= n;\nloop invariant i >= 1;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant (i < n ==> m = 0);\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant i > 0;\nloop invariant i <= n * 2;\nloop invariant i <= n * 3;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n  int n,m;\n  int i = 1;\n   \n  /*@\nloop invariant i1: i > 0;\n\n\n*/\nwhile( i < n ) {\n    if( m > 0 ) {\n      i = 2*i;\n    } else {\n      i = 3*i;\n    }\n    \n  }\n  {;\n//@ assert(i > 0 );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 < i;\nloop invariant i <= n;\nloop invariant i % 2 == 1 || i % 3 == 0;\nloop invariant m <= 0 || m > 0;\nloop invariant m <= 0 || i % 2 == 0;\nloop invariant m > 0 || i % 3 == 0;\nloop invariant (m <= 0 && i % 3 == 0) ==> (i == n && i % 2 == 0);\nloop invariant (m > 0 && i % 3 == 0) ==> (i == n && i % 2 == 0);\nloop invariant (m <= 0 && i % 2 == 0) ==> (i == n && i % 3 == 0);\nloop invariant (m > 0 && i % 2 == 0) ==> (i == n && i % 3 == 0);\nloop invariant (m > 0 && (i % 2 == 0 || i % 3 == 0)) ==> (i == n && (i % 2 == 0 && i % 3 == 0));\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n  int n,m;\n  int i = 1;\n   \n  /*@\nloop invariant i1: 0 < i;\n\n\nloop invariant i4: m <= 0 || m > 0;\n\n\n\nloop invariant i8: (m > 0 && i % 3 == 0) ==> (i == n && i % 2 == 0);\nloop invariant i9: (m <= 0 && i % 2 == 0) ==> (i == n && i % 3 == 0);\n\n\n*/\nwhile( i < n ) {\n    if( m > 0 ) {\n      i = 2*i;\n    } else {\n      i = 3*i;\n    }\n    \n  }\n  {;\n//@ assert(i > 0 );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 91,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant i is always equal to 2*i or 3*i;\nloop invariant i is always equal to 1;\nloop invariant i is always equal to 2;\nloop invariant i is always equal to 3;\nloop invariant i is always equal to 4;\nloop invariant i is always equal to 5;\nloop invariant i is always equal to 6;\nloop invariant i is always equal to 7;\nloop invariant i is always equal to 8;\nloop invariant i is always equal to 9;\nloop invariant i is always equal to 10;\nloop invariant i is always equal to 11;\nloop invariant i is always equal to 12;\nloop invariant i is always equal to 13;\nloop invariant i is always equal to 14;\nloop invariant i is always equal to 15;\nloop invariant i is always equal to 16;\nloop invariant i is always equal to 17;\nloop invariant i is always equal to 18;\nloop invariant i is always equal to 19;\nloop invariant i is always equal to 20;\nloop invariant i is always equal to 21;\nloop invariant i is always equal to 22;\nloop invariant i is always equal to 23;\nloop invariant i is always equal to 24;\nloop invariant i is always equal to 25;\nloop invariant i is always equal to 26;\nloop invariant i is always equal to 27;\nloop invariant i is always equal to 28;\nloop invariant i is always equal to 29;\nloop invariant i is always equal to 30;\nloop invariant i is always equal to 31;\nloop invariant i is always equal to 32;\nloop invariant i is always equal to 33;\nloop invariant i is always equal to 34;\nloop invariant i is always equal to 35;\nloop invariant i is always equal to 36;\nloop invariant i is always equal to 37;\nloop invariant i is always equal to 38;\nloop invariant i is always equal to 39;\nloop invariant i is always equal to 40;\nloop invariant i is always equal to 41;\nloop invariant i is always equal to 42;\nloop invariant i is always equal to 43;\nloop invariant i is always equal to 44;\nloop invariant i is always equal to 45;\nloop invariant i is always equal to 46;\nloop invariant i is always equal to 47;\nloop invariant i is always equal to 48;\nloop invariant i is always equal to 49;\nloop invariant i is always equal to 50;\nloop invariant i is always equal to 51;\nloop invariant i is always equal to 52;\nloop invariant i is always equal to 53;\nloop invariant i is always equal to 54;\nloop invariant i is always equal to 55;\nloop invariant i is always equal to 56;\nloop invariant i is always equal to 57;\nloop invariant i is always equal to 58;\nloop invariant i is always equal to 59;\nloop invariant i is always equal to 60;\nloop invariant i is always equal to 61;\nloop invariant i is always equal to 62;\nloop invariant i is always equal to 63;\nloop invariant i is always equal to 64;\nloop invariant i is always equal to 65;\nloop invariant i is always equal to 66;\nloop invariant i is always equal to 67;\nloop invariant i is always equal to 68;\nloop invariant i is always equal to 69;\nloop invariant i is always equal to 70;\nloop invariant i is always equal to 71;\nloop invariant i is always equal to 72;\nloop invariant i is always equal to 73;\nloop invariant i is always equal to 74;\nloop invariant i is always equal to 75;\nloop invariant i is always equal to 76;\nloop invariant i is always equal to 77;\nloop invariant i is always equal to 78;\nloop invariant i is always equal to 79;\nloop invariant i is always equal to 80;\nloop invariant i is always equal to 81;\nloop invariant i is always equal to 82;\nloop invariant i is always equal to 83;\nloop invariant i is always equal to 84;\nloop invariant i is always equal to 85;\nloop invariant i is always equal to 86;\nloop invariant i is always equal to 87;\nloop invariant i is always equal to 88;\nloop invariant i is always equal to 89;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n  int n,m;\n  int i = 1;\n   \n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile( i < n ) {\n    if( m > 0 ) {\n      i = 2*i;\n    } else {\n      i = 3*i;\n    }\n    \n  }\n  {;\n//@ assert(i > 0 );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n  int n,m;\n  int i = 1;\n   \n  /*@\n\n*/\nwhile( i < n ) {\n    if( m > 0 ) {\n      i = 2*i;\n    } else {\n      i = 3*i;\n    }\n    \n  }\n  {;\n//@ assert(i > 0 );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 2^n; loop invariant m > 0 ==> i > 0; loop invariant m <= 0 ==> i > 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n  int n,m;\n  int i = 1;\n   \n  /*@\n\n*/\nwhile( i < n ) {\n    if( m > 0 ) {\n      i = 2*i;\n    } else {\n      i = 3*i;\n    }\n    \n  }\n  {;\n//@ assert(i > 0 );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant i >= 1;\nloop invariant i <= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n  int n,m;\n  int i = 1;\n   \n  /*@\n\nloop invariant i2: i >= 1;\n\n*/\nwhile( i < n ) {\n    if( m > 0 ) {\n      i = 2*i;\n    } else {\n      i = 3*i;\n    }\n    \n  }\n  {;\n//@ assert(i > 0 );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant i % 2 == 0 ==> m <= 0;\nloop invariant i % 3 == 0 ==> m > 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n  int n,m;\n  int i = 1;\n   \n  /*@\n\n\n\n*/\nwhile( i < n ) {\n    if( m > 0 ) {\n      i = 2*i;\n    } else {\n      i = 3*i;\n    }\n    \n  }\n  {;\n//@ assert(i > 0 );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant m <= 0 ==> i % 2 == 0;\nloop invariant m > 0 ==> i % 3 == 0;\nloop invariant i >= 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n  int n,m;\n  int i = 1;\n   \n  /*@\n\n\n\nloop invariant i4: i >= 1;\n*/\nwhile( i < n ) {\n    if( m > 0 ) {\n      i = 2*i;\n    } else {\n      i = 3*i;\n    }\n    \n  }\n  {;\n//@ assert(i > 0 );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 158,
                "annotations": "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant i3;\nloop invariant i4;\nloop invariant i5;\nloop invariant i6;\nloop invariant i7;\nloop invariant i8;\nloop invariant i9;\nloop invariant i10;\nloop invariant i11;\nloop invariant i12;\nloop invariant i13;\nloop invariant i14;\nloop invariant i15;\nloop invariant i16;\nloop invariant i17;\nloop invariant i18;\nloop invariant i19;\nloop invariant i20;\nloop invariant i21;\nloop invariant i22;\nloop invariant i23;\nloop invariant i24;\nloop invariant i25;\nloop invariant i26;\nloop invariant i27;\nloop invariant i28;\nloop invariant i29;\nloop invariant i30;\nloop invariant i31;\nloop invariant i32;\nloop invariant i33;\nloop invariant i34;\nloop invariant i35;\nloop invariant i36;\nloop invariant i37;\nloop invariant i38;\nloop invariant i39;\nloop invariant i40;\nloop invariant i41;\nloop invariant i42;\nloop invariant i43;\nloop invariant i44;\nloop invariant i45;\nloop invariant i46;\nloop invariant i47;\nloop invariant i48;\nloop invariant i49;\nloop invariant i50;\nloop invariant i51;\nloop invariant i52;\nloop invariant i53;\nloop invariant i54;\nloop invariant i55;\nloop invariant i56;\nloop invariant i57;\nloop invariant i58;\nloop invariant i59;\nloop invariant i60;\nloop invariant i61;\nloop invariant i62;\nloop invariant i63;\nloop invariant i64;\nloop invariant i65;\nloop invariant i66;\nloop invariant i67;\nloop invariant i68;\nloop invariant i69;\nloop invariant i70;\nloop invariant i71;\nloop invariant i72;\nloop invariant i73;\nloop invariant i74;\nloop invariant i75;\nloop invariant i76;\nloop invariant i77;\nloop invariant i78;\nloop invariant i79;\nloop invariant i80;\nloop invariant i81;\nloop invariant i82;\nloop invariant i83;\nloop invariant i84;\nloop invariant i85;\nloop invariant i86;\nloop invariant i87;\nloop invariant i88;\nloop invariant i89;\nloop invariant i90;\nloop invariant i91;\nloop invariant i92;\nloop invariant i93;\nloop invariant i94;\nloop invariant i95;\nloop invariant i96;\nloop invariant i97;\nloop invariant i98;\nloop invariant i99;\nloop invariant i100;\nloop invariant i101;\nloop invariant i102;\nloop invariant i103;\nloop invariant i104;\nloop invariant i105;\nloop invariant i106;\nloop invariant i107;\nloop invariant i108;\nloop invariant i109;\nloop invariant i110;\nloop invariant i111;\nloop invariant i112;\nloop invariant i113;\nloop invariant i114;\nloop invariant i115;\nloop invariant i116;\nloop invariant i117;\nloop invariant i118;\nloop invariant i119;\nloop invariant i120;\nloop invariant i121;\nloop invariant i122;\nloop invariant i123;\nloop invariant i124;\nloop invariant i125;\nloop invariant i126;\nloop invariant i127;\nloop invariant i128;\nloop invariant i129;\nloop invariant i130;\nloop invariant i131;\nloop invariant i132;\nloop invariant i133;\nloop invariant i134;\nloop invariant i135;\nloop invariant i136;\nloop invariant i137;\nloop invariant i138;\nloop invariant i139;\nloop invariant i140;\nloop invariant i141;\nloop invariant i142;\nloop invariant i143;\nloop invariant i144;\nloop invariant i145;\nloop invariant i146;\nloop invariant i147;\nloop invariant i148;\nloop invariant i149;\nloop invariant i150;\nloop invariant i151;\nloop invariant i152;\nloop invariant i153;\nloop invariant i154;\nloop invariant i155;\nloop invariant i156;\nloop invariant i157;\nloop invariant i158;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n  int n,m;\n  int i = 1;\n   \n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile( i < n ) {\n    if( m > 0 ) {\n      i = 2*i;\n    } else {\n      i = 3*i;\n    }\n    \n  }\n  {;\n//@ assert(i > 0 );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= n;\nloop invariant 0 <= m;\nloop invariant 0 <= i <= n;\nloop invariant i > 0 ==> (m <= 0 ==> i == 3*i) || (m > 0 ==> i == 2*i);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n  int n,m;\n  int i = 1;\n   \n  /*@\n\n\n\nloop invariant i4: i > 0 ==> (m <= 0 ==> i == 3*i) || (m > 0 ==> i == 2*i);\n*/\nwhile( i < n ) {\n    if( m > 0 ) {\n      i = 2*i;\n    } else {\n      i = 3*i;\n    }\n    \n  }\n  {;\n//@ assert(i > 0 );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant i <= 0;\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant i <= 0;\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant i <= 0;\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant i <= 0;\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant i <= 0;\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant i <= 0;\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant i <= 0;\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant i <= 0;\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant i <= 0;\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant i <= 0;\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant i <= 0;\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant i <= 0;\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant i <= 0;\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant i <= 0;\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant i <= 0;\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant i <= 0;\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant i <= 0;\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant i <= 0;\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant i <= 0;\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant i <= 0;\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant i <= 0;\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant i <= 0;\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant i <= 0;\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant i <= 0;\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant i <= 0;\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant i <= 0;\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant i <= 0;\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant i <= 0;\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant i <= 0;\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant i <= 0;\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant i <= 0;\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant i <= 0;\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant i <= 0;\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant i <= 0;\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant i <= 0;\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant i <= 0;\nloop invariant i >= 1;\nloop invariant i <= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n  int n,m;\n  int i = 1;\n   \n  /*@\n\nloop invariant i2: i >= 1;\n\nloop invariant i4: i >= 0;\n\n*/\nwhile( i < n ) {\n    if( m > 0 ) {\n      i = 2*i;\n    } else {\n      i = 3*i;\n    }\n    \n  }\n  {;\n//@ assert(i > 0 );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 1 <= i;\nloop invariant i <= 2^n * i;\nloop invariant i <= 3^n * i;\nloop invariant i >= 0;\nloop invariant n >= 0;\nloop invariant m >= 0;\nloop invariant m <= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n  int n,m;\n  int i = 1;\n   \n  /*@\nloop invariant i1: 1 <= i;\n\n\nloop invariant i4: i >= 0;\n\n\n\n*/\nwhile( i < n ) {\n    if( m > 0 ) {\n      i = 2*i;\n    } else {\n      i = 3*i;\n    }\n    \n  }\n  {;\n//@ assert(i > 0 );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n  int n,m;\n  int i = 1;\n   \n  /*@\n\n*/\nwhile( i < n ) {\n    if( m > 0 ) {\n      i = 2*i;\n    } else {\n      i = 3*i;\n    }\n    \n  }\n  {;\n//@ assert(i > 0 );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 < i;\nloop invariant i < n;\nloop invariant i < 2 * i ==> m <= 0;\nloop invariant i < 3 * i ==> m > 0;\nloop invariant i > 0;\nloop invariant i <= n;\nloop invariant i >= 1;\nloop invariant i < 2 * i ==> m <= 0;\nloop invariant i < 3 * i ==> m > 0;\nloop invariant i > 0;\nloop invariant i <= n;\nloop invariant i >= 1;\nloop invariant i < 2 * i ==> m <= 0;\nloop invariant i < 3 * i ==> m > 0;\nloop invariant i > 0;\nloop invariant i <= n;\nloop invariant i >= 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n  int n,m;\n  int i = 1;\n   \n  /*@\nloop invariant i1: 0 < i;\n\n\n\nloop invariant i5: i > 0;\n\nloop invariant i7: i >= 1;\n*/\nwhile( i < n ) {\n    if( m > 0 ) {\n      i = 2*i;\n    } else {\n      i = 3*i;\n    }\n    \n  }\n  {;\n//@ assert(i > 0 );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant (i < n ==> m = 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n  int n,m;\n  int i = 1;\n   \n  /*@\n\n\n*/\nwhile( i < n ) {\n    if( m > 0 ) {\n      i = 2*i;\n    } else {\n      i = 3*i;\n    }\n    \n  }\n  {;\n//@ assert(i > 0 );\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 27: unexpected token 'is'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n  int n,m;\n  int i = 1;\n   \n  /*@\nloop invariant i1: i > 0;\nloop invariant i2: i <= n * 2;\nloop invariant i3: i <= n * 3;\nloop invariant i4: 0 < i;\nloop invariant i5: i <= n;\nloop invariant i6: i % 2 == 1 || i % 3 == 0;\nloop invariant i7: m <= 0 || m > 0;\nloop invariant i8: m <= 0 || i % 2 == 0;\nloop invariant i9: m > 0 || i % 3 == 0;\nloop invariant i10: (m <= 0 && i % 3 == 0) ==> (i == n && i % 2 == 0);\nloop invariant i11: (m > 0 && i % 3 == 0) ==> (i == n && i % 2 == 0);\nloop invariant i12: (m <= 0 && i % 2 == 0) ==> (i == n && i % 3 == 0);\nloop invariant i13: (m > 0 && i % 2 == 0) ==> (i == n && i % 3 == 0);\nloop invariant i14: (m > 0 && (i % 2 == 0 || i % 3 == 0)) ==> (i == n && (i % 2 == 0 && i % 3 == 0));\nloop invariant i15: 1 <= i <= n;\nloop invariant i16: i is always equal to 2*i or 3*i;\nloop invariant i17: i is always equal to 1;\nloop invariant i18: i is always equal to 2;\nloop invariant i19: i is always equal to 3;\nloop invariant i20: i is always equal to 4;\nloop invariant i21: i is always equal to 5;\nloop invariant i22: i is always equal to 6;\nloop invariant i23: i is always equal to 7;\nloop invariant i24: i is always equal to 8;\nloop invariant i25: i is always equal to 9;\nloop invariant i26: i is always equal to 10;\nloop invariant i27: i is always equal to 11;\nloop invariant i28: i is always equal to 12;\nloop invariant i29: i is always equal to 13;\nloop invariant i30: i is always equal to 14;\nloop invariant i31: i is always equal to 15;\nloop invariant i32: i is always equal to 16;\nloop invariant i33: i is always equal to 17;\nloop invariant i34: i is always equal to 18;\nloop invariant i35: i is always equal to 19;\nloop invariant i36: i is always equal to 20;\nloop invariant i37: i is always equal to 21;\nloop invariant i38: i is always equal to 22;\nloop invariant i39: i is always equal to 23;\nloop invariant i40: i is always equal to 24;\nloop invariant i41: i is always equal to 25;\nloop invariant i42: i is always equal to 26;\nloop invariant i43: i is always equal to 27;\nloop invariant i44: i is always equal to 28;\nloop invariant i45: i is always equal to 29;\nloop invariant i46: i is always equal to 30;\nloop invariant i47: i is always equal to 31;\nloop invariant i48: i is always equal to 32;\nloop invariant i49: i is always equal to 33;\nloop invariant i50: i is always equal to 34;\nloop invariant i51: i is always equal to 35;\nloop invariant i52: i is always equal to 36;\nloop invariant i53: i is always equal to 37;\nloop invariant i54: i is always equal to 38;\nloop invariant i55: i is always equal to 39;\nloop invariant i56: i is always equal to 40;\nloop invariant i57: i is always equal to 41;\nloop invariant i58: i is always equal to 42;\nloop invariant i59: i is always equal to 43;\nloop invariant i60: i is always equal to 44;\nloop invariant i61: i is always equal to 45;\nloop invariant i62: i is always equal to 46;\nloop invariant i63: i is always equal to 47;\nloop invariant i64: i is always equal to 48;\nloop invariant i65: i is always equal to 49;\nloop invariant i66: i is always equal to 50;\nloop invariant i67: i is always equal to 51;\nloop invariant i68: i is always equal to 52;\nloop invariant i69: i is always equal to 53;\nloop invariant i70: i is always equal to 54;\nloop invariant i71: i is always equal to 55;\nloop invariant i72: i is always equal to 56;\nloop invariant i73: i is always equal to 57;\nloop invariant i74: i is always equal to 58;\nloop invariant i75: i is always equal to 59;\nloop invariant i76: i is always equal to 60;\nloop invariant i77: i is always equal to 61;\nloop invariant i78: i is always equal to 62;\nloop invariant i79: i is always equal to 63;\nloop invariant i80: i is always equal to 64;\nloop invariant i81: i is always equal to 65;\nloop invariant i82: i is always equal to 66;\nloop invariant i83: i is always equal to 67;\nloop invariant i84: i is always equal to 68;\nloop invariant i85: i is always equal to 69;\nloop invariant i86: i is always equal to 70;\nloop invariant i87: i is always equal to 71;\nloop invariant i88: i is always equal to 72;\nloop invariant i89: i is always equal to 73;\nloop invariant i90: i is always equal to 74;\nloop invariant i91: i is always equal to 75;\nloop invariant i92: i is always equal to 76;\nloop invariant i93: i is always equal to 77;\nloop invariant i94: i is always equal to 78;\nloop invariant i95: i is always equal to 79;\nloop invariant i96: i is always equal to 80;\nloop invariant i97: i is always equal to 81;\nloop invariant i98: i is always equal to 82;\nloop invariant i99: i is always equal to 83;\nloop invariant i100: i is always equal to 84;\nloop invariant i101: i is always equal to 85;\nloop invariant i102: i is always equal to 86;\nloop invariant i103: i is always equal to 87;\nloop invariant i104: i is always equal to 88;\nloop invariant i105: i is always equal to 89;\nloop invariant i106: 0 <= i <= 2^n; loop invariant m > 0 ==> i > 0; loop invariant m <= 0 ==> i > 0;\nloop invariant i107: i >= 1;\nloop invariant i108: 0 <= i <= n;\nloop invariant i109: i % 2 == 0 ==> m <= 0;\nloop invariant i110: i % 3 == 0 ==> m > 0;\nloop invariant i111: m <= 0 ==> i % 2 == 0;\nloop invariant i112: m > 0 ==> i % 3 == 0;\nloop invariant i113: i1;\nloop invariant i114: i2;\nloop invariant i115: i3;\nloop invariant i116: i4;\nloop invariant i117: i5;\nloop invariant i118: i6;\nloop invariant i119: i7;\nloop invariant i120: i8;\nloop invariant i121: i9;\nloop invariant i122: i10;\nloop invariant i123: i11;\nloop invariant i124: i12;\nloop invariant i125: i13;\nloop invariant i126: i14;\nloop invariant i127: i15;\nloop invariant i128: i16;\nloop invariant i129: i17;\nloop invariant i130: i18;\nloop invariant i131: i19;\nloop invariant i132: i20;\nloop invariant i133: i21;\nloop invariant i134: i22;\nloop invariant i135: i23;\nloop invariant i136: i24;\nloop invariant i137: i25;\nloop invariant i138: i26;\nloop invariant i139: i27;\nloop invariant i140: i28;\nloop invariant i141: i29;\nloop invariant i142: i30;\nloop invariant i143: i31;\nloop invariant i144: i32;\nloop invariant i145: i33;\nloop invariant i146: i34;\nloop invariant i147: i35;\nloop invariant i148: i36;\nloop invariant i149: i37;\nloop invariant i150: i38;\nloop invariant i151: i39;\nloop invariant i152: i40;\nloop invariant i153: i41;\nloop invariant i154: i42;\nloop invariant i155: i43;\nloop invariant i156: i44;\nloop invariant i157: i45;\nloop invariant i158: i46;\nloop invariant i159: i47;\nloop invariant i160: i48;\nloop invariant i161: i49;\nloop invariant i162: i50;\nloop invariant i163: i51;\nloop invariant i164: i52;\nloop invariant i165: i53;\nloop invariant i166: i54;\nloop invariant i167: i55;\nloop invariant i168: i56;\nloop invariant i169: i57;\nloop invariant i170: i58;\nloop invariant i171: i59;\nloop invariant i172: i60;\nloop invariant i173: i61;\nloop invariant i174: i62;\nloop invariant i175: i63;\nloop invariant i176: i64;\nloop invariant i177: i65;\nloop invariant i178: i66;\nloop invariant i179: i67;\nloop invariant i180: i68;\nloop invariant i181: i69;\nloop invariant i182: i70;\nloop invariant i183: i71;\nloop invariant i184: i72;\nloop invariant i185: i73;\nloop invariant i186: i74;\nloop invariant i187: i75;\nloop invariant i188: i76;\nloop invariant i189: i77;\nloop invariant i190: i78;\nloop invariant i191: i79;\nloop invariant i192: i80;\nloop invariant i193: i81;\nloop invariant i194: i82;\nloop invariant i195: i83;\nloop invariant i196: i84;\nloop invariant i197: i85;\nloop invariant i198: i86;\nloop invariant i199: i87;\nloop invariant i200: i88;\nloop invariant i201: i89;\nloop invariant i202: i90;\nloop invariant i203: i91;\nloop invariant i204: i92;\nloop invariant i205: i93;\nloop invariant i206: i94;\nloop invariant i207: i95;\nloop invariant i208: i96;\nloop invariant i209: i97;\nloop invariant i210: i98;\nloop invariant i211: i99;\nloop invariant i212: i100;\nloop invariant i213: i101;\nloop invariant i214: i102;\nloop invariant i215: i103;\nloop invariant i216: i104;\nloop invariant i217: i105;\nloop invariant i218: i106;\nloop invariant i219: i107;\nloop invariant i220: i108;\nloop invariant i221: i109;\nloop invariant i222: i110;\nloop invariant i223: i111;\nloop invariant i224: i112;\nloop invariant i225: i113;\nloop invariant i226: i114;\nloop invariant i227: i115;\nloop invariant i228: i116;\nloop invariant i229: i117;\nloop invariant i230: i118;\nloop invariant i231: i119;\nloop invariant i232: i120;\nloop invariant i233: i121;\nloop invariant i234: i122;\nloop invariant i235: i123;\nloop invariant i236: i124;\nloop invariant i237: i125;\nloop invariant i238: i126;\nloop invariant i239: i127;\nloop invariant i240: i128;\nloop invariant i241: i129;\nloop invariant i242: i130;\nloop invariant i243: i131;\nloop invariant i244: i132;\nloop invariant i245: i133;\nloop invariant i246: i134;\nloop invariant i247: i135;\nloop invariant i248: i136;\nloop invariant i249: i137;\nloop invariant i250: i138;\nloop invariant i251: i139;\nloop invariant i252: i140;\nloop invariant i253: i141;\nloop invariant i254: i142;\nloop invariant i255: i143;\nloop invariant i256: i144;\nloop invariant i257: i145;\nloop invariant i258: i146;\nloop invariant i259: i147;\nloop invariant i260: i148;\nloop invariant i261: i149;\nloop invariant i262: i150;\nloop invariant i263: i151;\nloop invariant i264: i152;\nloop invariant i265: i153;\nloop invariant i266: i154;\nloop invariant i267: i155;\nloop invariant i268: i156;\nloop invariant i269: i157;\nloop invariant i270: i158;\nloop invariant i271: 0 <= n;\nloop invariant i272: 0 <= m;\nloop invariant i273: i > 0 ==> (m <= 0 ==> i == 3*i) || (m > 0 ==> i == 2*i);\nloop invariant i274: i >= 0;\nloop invariant i275: i <= 0;\nloop invariant i276: 1 <= i;\nloop invariant i277: i <= 2^n * i;\nloop invariant i278: i <= 3^n * i;\nloop invariant i279: n >= 0;\nloop invariant i280: m >= 0;\nloop invariant i281: m <= 0;\nloop invariant i282: i < n;\nloop invariant i283: i < 2 * i ==> m <= 0;\nloop invariant i284: i < 3 * i ==> m > 0;\nloop invariant i285: (i < n ==> m = 0);\n*/\nwhile( i < n ) {\n    if( m > 0 ) {\n      i = 2*i;\n    } else {\n      i = 3*i;\n    }\n    \n  }\n  {;\n//@ assert(i > 0 );\n}\n\n}",
        "combined_annotation_num_solver_calls": 262,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n  int n,m;\n  int i = 1;\n   \n  /*@\nloop invariant i1: i > 0;\n\n\nloop invariant i4: 0 < i;\n\n\nloop invariant i7: m <= 0 || m > 0;\n\n\n\nloop invariant i11: (m > 0 && i % 3 == 0) ==> (i == n && i % 2 == 0);\nloop invariant i12: (m <= 0 && i % 2 == 0) ==> (i == n && i % 3 == 0);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i107: i >= 1;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i273: i > 0 ==> (m <= 0 ==> i == 3*i) || (m > 0 ==> i == 2*i);\nloop invariant i274: i >= 0;\n\nloop invariant i276: 1 <= i;\n\n\n\n\n\n\n\n\n\n*/\nwhile( i < n ) {\n    if( m > 0 ) {\n      i = 2*i;\n    } else {\n      i = 3*i;\n    }\n    \n  }\n  {;\n//@ assert(i > 0 );\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/split.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/11.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/15.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/16.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/18.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/23.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/30.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/32.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/37.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/38.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/41.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/43.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/44.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/46.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/popl.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/05.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/07.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/37.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/39.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/gulv_simp.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/substring1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/xy10.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/const_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/multivar_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/phases_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/simple_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/simple_safe2.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/simple_safe3.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/simple_safe4.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/underapprox_safe2.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/barbr.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/barbrprime.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/bk-nat.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/bkley.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/efm.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/ex1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/lifnat.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/lifnatprime.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/lifo.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/seesaw.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/substring1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/swim.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/swim1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/ken-imp.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/rajamani_1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/simple.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/simple_if.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/13.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/14.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/19.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/20.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/39.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/cav.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/19.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/gulv.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/pldi082_unbounded.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/underapprox_unsafe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/sendmail-close-angle.c"
        ],
        "skipped": [],
        "total": 171,
        "success_count": 144,
        "failure_count": 27,
        "success_rate": 0.8421052631578947
    }
}