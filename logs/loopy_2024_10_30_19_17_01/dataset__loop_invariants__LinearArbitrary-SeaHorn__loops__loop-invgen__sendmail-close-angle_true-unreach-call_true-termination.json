{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main ()\n{\n  int in;\n  int inlen = unknown_int();\n  int bufferlen = unknown_int();\n  int buf;\n  int buflim;\n\n  if(bufferlen >1);else goto END;\n  if(inlen > 0);else goto END;\n  if(bufferlen < inlen);else goto END;\n\n  buf = 0;\n  in = 0;\n  buflim = bufferlen - 2;\n\n  while (unknown_int())\n  {\n    if (buf == buflim)\n      break;\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n \n    buf++;\nout:\n    in++;\n    {;\n//@ assert(0<=in);\n}\n\n    {;\n//@ assert(in<inlen);\n}\n\n  }\n\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n\n    buf++;\n\n  {;\n//@ assert(0<=buf);\n}\n\n  {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n END:  return 0;\n}",
        "success": false,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= buf <= buflim + 2;\nloop invariant 0 <= in <= inlen;\nloop invariant buf <= buflim;\nloop invariant in <= inlen;\nloop invariant bufferlen > 1;\nloop invariant inlen > 0;\nloop invariant bufferlen > inlen;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= buf <= bufferlen;\nloop invariant 0 <= in <= inlen;\nloop invariant buf <= buflim;\nloop invariant buf <= in;\nloop invariant buf <= buflim - 2;\nloop invariant buf == buflim ==> in == inlen;\nloop invariant buf != buflim || in != inlen ==> buf < buflim;\nloop invariant buf != buflim || in != inlen ==> in < inlen;\nloop invariant buf == buflim && in != inlen ==> buf == inlen;\nloop invariant buf == buflim && in == inlen ==> buf == buflim;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= buf <= buflim;\nloop invariant 0 <= in <= inlen;\nloop invariant buf + in <= bufferlen;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= buf <= buflim;\nloop invariant 0 <= in <= inlen;\nloop invariant buf < bufferlen;\nloop invariant in < inlen;\nloop invariant 0 <= buflim <= bufferlen - 2;\nloop invariant buf <= buflim;\nloop invariant in <= inlen - 1;\nloop invariant buf <= buflim + 1;\nloop invariant buf <= buflim + 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= in <= inlen;\nloop invariant 0 <= buf <= buflim;\nloop invariant buf < bufferlen;\nloop invariant buflim < bufferlen;\nloop invariant buflim == bufferlen - 2;\nloop invariant in < inlen;\nloop invariant buf == buflim;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= buf <= bufferlen;\nloop invariant 0 <= in <= inlen;\nloop invariant 0 <= buflim <= bufferlen;\nloop invariant buf <= buflim;\nloop invariant buf < in;\nloop invariant in < inlen;\nloop invariant (0 <= buf && buf <= bufferlen && 0 <= in && in <= inlen && 0 <= buflim && buflim <= bufferlen && buf <= buflim && buf < in && in < inlen);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= buf <= buflim; loop invariant 0 <= in <= inlen - 1; loop invariant !unknown_int() ==> buf == buflim; loop invariant !unknown_int() ==> in == inlen; loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int();\n*/\n```",
            "```\n/*@\nloop invariant 0 <= in <= inlen;\nloop invariant 0 <= buf <= buflim;\nloop invariant buf < buflim ==> in < inlen;\nloop invariant buflim + 1 <= buf ==> in == inlen;\nloop invariant buf < buflim ==> 0 <= buf;\nloop invariant buflim + 1 <= buf ==> 0 <= buf;\nloop invariant buf < buflim ==> buf < bufferlen;\nloop invariant buflim + 1 <= buf ==> buf < bufferlen;\nloop invariant buf < buflim ==> 0 <= in;\nloop invariant buflim + 1 <= buf ==> 0 <= in;\nloop invariant buf < buflim ==> in < inlen;\nloop invariant buflim + 1 <= buf ==> in == inlen;\nloop invariant buf < buflim ==> 0 <= buf;\nloop invariant buflim + 1 <= buf ==> 0 <= buf;\nloop invariant buf < buflim ==> buf < bufferlen;\nloop invariant buflim + 1 <= buf ==> buf < bufferlen;\nloop invariant buf < buflim ==> 0 <= in;\nloop invariant buflim + 1 <= buf ==> 0 <= in;\nloop invariant buf < buflim ==> in < inlen;\nloop invariant buflim + 1 <= buf ==> in == inlen;\nloop invariant buf < buflim ==> 0 <= buf;\nloop invariant buflim + 1 <= buf ==> 0 <= buf;\nloop invariant buf < buflim ==> buf < bufferlen;\nloop invariant buflim + 1 <= buf ==> buf < bufferlen;\nloop invariant buf < buflim ==> 0 <= in;\nloop invariant buflim + 1 <= buf ==> 0 <= in;\nloop invariant buf < buflim ==> in < inlen;\nloop invariant buflim + 1 <= buf ==> in == inlen;\nloop invariant buf < buflim ==> 0 <= buf;\nloop invariant buflim + 1 <= buf ==> 0 <= buf;\nloop invariant buf < buflim ==> buf < bufferlen;\nloop invariant buflim + 1 <= buf ==> buf < bufferlen;\nloop invariant buf < buflim ==> 0 <= in;\nloop invariant buflim + 1 <= buf ==> 0 <= in;\nloop invariant buf < buflim ==> in < inlen;\nloop invariant buflim + 1 <= buf ==> in == inlen;\nloop invariant buf < buflim ==> 0 <= buf;\nloop invariant buflim + 1 <= buf ==> 0 <= buf;\nloop invariant buf < buflim ==> buf < bufferlen;\nloop invariant buflim + 1 <= buf ==> buf < bufferlen;\nloop invariant buf < buflim ==> 0 <= in;\nloop invariant buflim + 1 <= buf ==> 0 <= in;\nloop invariant buf < buflim ==> in < inlen;\nloop invariant buflim + 1 <= buf ==> in == inlen;\nloop invariant buf < buflim ==> 0 <= buf;\nloop invariant buflim + 1 <= buf ==> 0 <= buf;\nloop invariant buf < buflim ==> buf < bufferlen;\nloop invariant buflim + 1 <= buf ==> buf < bufferlen;\nloop invariant buf < buflim ==> 0 <= in;\nloop invariant buflim + 1 <= buf ==> 0 <= in;\nloop invariant buf < buflim ==> in < inlen;\nloop invariant buflim + 1 <= buf ==> in == inlen;\nloop invariant buf < buflim ==> 0 <= buf;\nloop invariant buflim + 1 <= buf ==> 0 <= buf;\nloop invariant buf < buflim ==> buf < bufferlen;\nloop invariant buflim + 1 <= buf ==> buf < bufferlen;\nloop invariant buf < buflim ==> 0 <= in;\nloop invariant buflim + 1 <= buf ==> 0 <= in;\nloop invariant buf < buflim ==> in < inlen;\nloop invariant buflim + 1 <= buf ==> in == inlen;\nloop invariant buf < buflim ==> 0 <= buf;\nloop invariant buflim + 1 <= buf ==> 0 <= buf;\nloop invariant buf < buflim ==> buf < bufferlen;\nloop invariant buflim + 1 <= buf ==> buf < bufferlen;\nloop invariant buf < buflim ==> 0 <= in;\nloop invariant buflim + 1 <= buf ==> 0 <= in;\nloop invariant buf < buflim ==> in < inlen;\nloop invariant buflim + 1 <= buf ==> in == inlen;\nloop invariant buf < buflim ==> 0 <= buf;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= buflim < bufferlen;\nloop invariant 0 <= buf <= buflim;\nloop invariant 0 <= in <= inlen;\nloop invariant 0 <= buf <= in;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= buf <= bufferlen;\nloop invariant 0 <= in <= inlen;\nloop invariant buf < buflim;\nloop invariant buf < bufferlen - 2;\nloop invariant buf < bufferlen - 1;\nloop invariant buf < bufferlen;\nloop invariant buf < buflim + 1;\nloop invariant buf < buflim + 2;\nloop invariant buf < buflim + 3;\nloop invariant buf < buflim + 4;\nloop invariant buf < buflim + 5;\nloop invariant buf < buflim + 6;\nloop invariant buf < buflim + 7;\nloop invariant buf < buflim + 8;\nloop invariant buf < buflim + 9;\nloop invariant buf < buflim + 10;\nloop invariant buf < buflim + 11;\nloop invariant buf < buflim + 12;\nloop invariant buf < buflim + 13;\nloop invariant buf < buflim + 14;\nloop invariant buf < buflim + 15;\nloop invariant buf < buflim + 16;\nloop invariant buf < buflim + 17;\nloop invariant buf < buflim + 18;\nloop invariant buf < buflim + 19;\nloop invariant buf < buflim + 20;\nloop invariant buf < buflim + 21;\nloop invariant buf < buflim + 22;\nloop invariant buf < buflim + 23;\nloop invariant buf < buflim + 24;\nloop invariant buf < buflim + 25;\nloop invariant buf < buflim + 26;\nloop invariant buf < buflim + 27;\nloop invariant buf < buflim + 28;\nloop invariant buf < buflim + 29;\nloop invariant buf < buflim + 30;\nloop invariant buf < buflim + 31;\nloop invariant buf < buflim + 32;\nloop invariant buf < buflim + 33;\nloop invariant buf < buflim + 34;\nloop invariant buf < buflim + 35;\nloop invariant buf < buflim + 36;\nloop invariant buf < buflim + 37;\nloop invariant buf < buflim + 38;\nloop invariant buf < buflim + 39;\nloop invariant buf < buflim + 40;\nloop invariant buf < buflim + 41;\nloop invariant buf < buflim + 42;\nloop invariant buf < buflim + 43;\nloop invariant buf < buflim + 44;\nloop invariant buf < buflim + 45;\nloop invariant buf < buflim + 46;\nloop invariant buf < buflim + 47;\nloop invariant buf < buflim + 48;\nloop invariant buf < buflim + 49;\nloop invariant buf < buflim + 50;\nloop invariant buf < buflim + 51;\nloop invariant buf < buflim + 52;\nloop invariant buf < buflim + 53;\nloop invariant buf < buflim + 54;\nloop invariant buf < buflim + 55;\nloop invariant buf < buflim + 56;\nloop invariant buf < buflim + 57;\nloop invariant buf < buflim + 58;\nloop invariant buf < buflim + 59;\nloop invariant buf < buflim + 60;\nloop invariant buf < buflim + 61;\nloop invariant buf < buflim + 62;\nloop invariant buf < buflim + 63;\nloop invariant buf < buflim + 64;\nloop invariant buf < buflim + 65;\nloop invariant buf < buflim + 66;\nloop invariant buf < buflim + 67;\nloop invariant buf < buflim + 68;\nloop invariant buf < buflim + 69;\nloop invariant buf < buflim + 70;\nloop invariant buf < buflim + 71;\nloop invariant buf < buflim + 72;\nloop invariant buf < buflim + 73;\nloop invariant buf < buflim + 74;\nloop invariant buf < buflim + 75;\nloop invariant buf < buflim + 76;\nloop invariant buf < buflim + 77;\nloop invariant buf < buflim + 78;\nloop invariant buf < buflim + 79;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= buf <= buflim;\nloop invariant 0 <= in <= inlen;\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= buf <= bufferlen;\nloop invariant 0 <= in <= inlen;\nloop invariant buflim = bufferlen - 2;\nloop invariant buf <= buflim;\nloop invariant (buf == buflim) ==> (unknown_int() == 0);\nloop invariant (buf != buflim) ==> (unknown_int() == 1);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= buf <= buflim;\nloop invariant 0 <= in <= inlen;\nloop invariant 0 <= buflim <= bufferlen - 2;\nloop invariant 0 <= buf <= buflim;\nloop invariant buf < bufferlen;\nloop invariant in < inlen;\nloop invariant buflim < bufferlen - 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= in <= inlen;loop invariant 0 <= buf <= buflim;loop invariant 0 <= buflim <= bufferlen - 2;loop invariant buf < bufferlen;loop invariant in < inlen;loop invariant buf <= buflim;loop invariant bufferlen - 2 <= buflim;loop invariant bufferlen - 1 <= buf;loop invariant bufferlen <= buf;loop invariant inlen <= in;loop invariant inlen - 1 <= in;loop invariant in <= inlen - 1;loop invariant in <= inlen;loop invariant buflim <= buf;loop invariant buflim <= bufferlen - 2;loop invariant buf <= buflim;loop invariant buflim <= bufferlen - 1;loop invariant bufferlen <= buf;loop invariant buflim <= bufferlen;loop invariant buflim <= bufferlen - 1;loop invariant bufferlen - 1 <= buflim;loop invariant bufferlen <= buflim;loop invariant bufferlen - 1 <= buf;loop invariant bufferlen <= buf;loop invariant buflim <= buflim;loop invariant buflim <= bufferlen - 2;loop invariant bufferlen - 2 <= buflim;loop invariant bufferlen - 1 <= buf;loop invariant bufferlen <= buf;loop invariant buflim <= buflim;loop invariant buflim <= bufferlen - 1;loop invariant bufferlen - 1 <= buflim;loop invariant bufferlen <= buflim;loop invariant bufferlen - 1 <= buf;loop invariant bufferlen <= buf;loop invariant buflim <= buflim;loop invariant buflim <= bufferlen - 1;loop invariant bufferlen - 1 <= buflim;loop invariant bufferlen <= buflim;loop invariant bufferlen - 1 <= buf;loop invariant bufferlen <= buf;loop invariant buflim <= buflim;loop invariant buflim <= bufferlen - 1;loop invariant bufferlen - 1 <= buflim;loop invariant bufferlen <= buflim;loop invariant bufferlen - 1 <= buf;loop invariant bufferlen <= buf;loop invariant buflim <= buflim;loop invariant buflim <= bufferlen - 1;loop invariant bufferlen - 1 <= buflim;loop invariant bufferlen <= buflim;loop invariant bufferlen - 1 <= buf;loop invariant bufferlen <= buf;loop invariant buflim <= buflim;loop invariant buflim <= bufferlen - 1;loop invariant bufferlen - 1 <= buflim;loop invariant bufferlen <= buflim;loop invariant bufferlen - 1 <= buf;loop invariant bufferlen <= buf;loop invariant buflim <= buflim;loop invariant buflim <= bufferlen - 1;loop invariant bufferlen - 1 <= buflim;loop invariant bufferlen <= buflim;loop invariant bufferlen - 1 <= buf;loop invariant bufferlen <= buf;loop invariant buflim <= buflim;loop invariant buflim <= bufferlen - 1;loop invariant bufferlen - 1 <= buflim;loop invariant bufferlen <= buflim;loop invariant bufferlen - 1 <= buf;loop invariant bufferlen <= buf;loop invariant buflim <= buflim;loop invariant buflim <= bufferlen - 1;loop invariant bufferlen - 1 <= buflim;loop invariant bufferlen <= buflim;loop invariant bufferlen - 1 <= buf;loop invariant bufferlen <= buf;loop invariant buflim <= buflim;loop invariant buflim <= bufferlen - 1;loop invariant bufferlen - 1 <= buflim;loop invariant bufferlen <= buflim;loop invariant bufferlen - 1 <= buf;loop invariant bufferlen <= buf;loop invariant buflim <= buflim;loop invariant buflim <= bufferlen - 1;loop invariant bufferlen - 1 <= buflim;loop invariant bufferlen <= buflim;loop invariant bufferlen - 1 <= buf;loop invariant bufferlen <= buf;loop invariant buflim <= buflim;loop invariant buflim <= bufferlen - 1;loop invariant bufferlen - 1 <= buflim;loop invariant bufferlen <= buflim;loop invariant bufferlen - 1 <= buf;loop invariant bufferlen <= buf;loop invariant buflim <= buflim;loop invariant buflim <= bufferlen - 1;loop invariant bufferlen - 1 <= buflim;loop invariant bufferlen <= buflim;loop invariant bufferlen - 1 <= buf;loop invariant bufferlen <= buf;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= buf <= buflim + 2;\nloop invariant 0 <= in <= inlen;\nloop invariant buf <= buflim;\nloop invariant in <= inlen;\nloop invariant bufferlen > 1;\nloop invariant inlen > 0;\nloop invariant bufferlen > inlen;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main ()\n{\n  int in;\n  int inlen = unknown_int();\n  int bufferlen = unknown_int();\n  int buf;\n  int buflim;\n\n  if(bufferlen >1);else goto END;\n  if(inlen > 0);else goto END;\n  if(bufferlen < inlen);else goto END;\n\n  buf = 0;\n  in = 0;\n  buflim = bufferlen - 2;\n\n  /*@\nloop invariant i1: 0 <= buf <= buflim + 2;\nloop invariant i2: 0 <= in <= inlen;\nloop invariant i3: buf <= buflim;\nloop invariant i4: in <= inlen;\nloop invariant i5: bufferlen > 1;\nloop invariant i6: inlen > 0;\n\n*/\nwhile (unknown_int())\n  {\n    if (buf == buflim)\n      break;\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n \n    buf++;\nout:\n    in++;\n    {;\n//@ assert(0<=in);\n}\n\n    {;\n//@ assert(in<inlen);\n}\n\n  }\n\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n\n    buf++;\n\n  {;\n//@ assert(0<=buf);\n}\n\n  {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= buf <= bufferlen;\nloop invariant 0 <= in <= inlen;\nloop invariant buf <= buflim;\nloop invariant buf <= in;\nloop invariant buf <= buflim - 2;\nloop invariant buf == buflim ==> in == inlen;\nloop invariant buf != buflim || in != inlen ==> buf < buflim;\nloop invariant buf != buflim || in != inlen ==> in < inlen;\nloop invariant buf == buflim && in != inlen ==> buf == inlen;\nloop invariant buf == buflim && in == inlen ==> buf == buflim;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main ()\n{\n  int in;\n  int inlen = unknown_int();\n  int bufferlen = unknown_int();\n  int buf;\n  int buflim;\n\n  if(bufferlen >1);else goto END;\n  if(inlen > 0);else goto END;\n  if(bufferlen < inlen);else goto END;\n\n  buf = 0;\n  in = 0;\n  buflim = bufferlen - 2;\n\n  /*@\nloop invariant i1: 0 <= buf <= bufferlen;\nloop invariant i2: 0 <= in <= inlen;\nloop invariant i3: buf <= buflim;\nloop invariant i4: buf <= in;\n\n\n\nloop invariant i8: buf != buflim || in != inlen ==> in < inlen;\n\nloop invariant i10: buf == buflim && in == inlen ==> buf == buflim;\n*/\nwhile (unknown_int())\n  {\n    if (buf == buflim)\n      break;\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n \n    buf++;\nout:\n    in++;\n    {;\n//@ assert(0<=in);\n}\n\n    {;\n//@ assert(in<inlen);\n}\n\n  }\n\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n\n    buf++;\n\n  {;\n//@ assert(0<=buf);\n}\n\n  {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= buf <= buflim;\nloop invariant 0 <= in <= inlen;\nloop invariant buf + in <= bufferlen;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main ()\n{\n  int in;\n  int inlen = unknown_int();\n  int bufferlen = unknown_int();\n  int buf;\n  int buflim;\n\n  if(bufferlen >1);else goto END;\n  if(inlen > 0);else goto END;\n  if(bufferlen < inlen);else goto END;\n\n  buf = 0;\n  in = 0;\n  buflim = bufferlen - 2;\n\n  /*@\nloop invariant i1: 0 <= buf <= buflim;\nloop invariant i2: 0 <= in <= inlen;\n\n*/\nwhile (unknown_int())\n  {\n    if (buf == buflim)\n      break;\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n \n    buf++;\nout:\n    in++;\n    {;\n//@ assert(0<=in);\n}\n\n    {;\n//@ assert(in<inlen);\n}\n\n  }\n\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n\n    buf++;\n\n  {;\n//@ assert(0<=buf);\n}\n\n  {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= buf <= buflim;\nloop invariant 0 <= in <= inlen;\nloop invariant buf < bufferlen;\nloop invariant in < inlen;\nloop invariant 0 <= buflim <= bufferlen - 2;\nloop invariant buf <= buflim;\nloop invariant in <= inlen - 1;\nloop invariant buf <= buflim + 1;\nloop invariant buf <= buflim + 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main ()\n{\n  int in;\n  int inlen = unknown_int();\n  int bufferlen = unknown_int();\n  int buf;\n  int buflim;\n\n  if(bufferlen >1);else goto END;\n  if(inlen > 0);else goto END;\n  if(bufferlen < inlen);else goto END;\n\n  buf = 0;\n  in = 0;\n  buflim = bufferlen - 2;\n\n  /*@\nloop invariant i1: 0 <= buf <= buflim;\nloop invariant i2: 0 <= in <= inlen;\nloop invariant i3: buf < bufferlen;\nloop invariant i4: in < inlen;\nloop invariant i5: 0 <= buflim <= bufferlen - 2;\nloop invariant i6: buf <= buflim;\nloop invariant i7: in <= inlen - 1;\nloop invariant i8: buf <= buflim + 1;\nloop invariant i9: buf <= buflim + 2;\n*/\nwhile (unknown_int())\n  {\n    if (buf == buflim)\n      break;\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n \n    buf++;\nout:\n    in++;\n    {;\n//@ assert(0<=in);\n}\n\n    {;\n//@ assert(in<inlen);\n}\n\n  }\n\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n\n    buf++;\n\n  {;\n//@ assert(0<=buf);\n}\n\n  {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= in <= inlen;\nloop invariant 0 <= buf <= buflim;\nloop invariant buf < bufferlen;\nloop invariant buflim < bufferlen;\nloop invariant buflim == bufferlen - 2;\nloop invariant in < inlen;\nloop invariant buf == buflim;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main ()\n{\n  int in;\n  int inlen = unknown_int();\n  int bufferlen = unknown_int();\n  int buf;\n  int buflim;\n\n  if(bufferlen >1);else goto END;\n  if(inlen > 0);else goto END;\n  if(bufferlen < inlen);else goto END;\n\n  buf = 0;\n  in = 0;\n  buflim = bufferlen - 2;\n\n  /*@\nloop invariant i1: 0 <= in <= inlen;\nloop invariant i2: 0 <= buf <= buflim;\nloop invariant i3: buf < bufferlen;\nloop invariant i4: buflim < bufferlen;\nloop invariant i5: buflim == bufferlen - 2;\nloop invariant i6: in < inlen;\n\n*/\nwhile (unknown_int())\n  {\n    if (buf == buflim)\n      break;\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n \n    buf++;\nout:\n    in++;\n    {;\n//@ assert(0<=in);\n}\n\n    {;\n//@ assert(in<inlen);\n}\n\n  }\n\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n\n    buf++;\n\n  {;\n//@ assert(0<=buf);\n}\n\n  {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= buf <= bufferlen;\nloop invariant 0 <= in <= inlen;\nloop invariant 0 <= buflim <= bufferlen;\nloop invariant buf <= buflim;\nloop invariant buf < in;\nloop invariant in < inlen;\nloop invariant (0 <= buf && buf <= bufferlen && 0 <= in && in <= inlen && 0 <= buflim && buflim <= bufferlen && buf <= buflim && buf < in && in < inlen);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main ()\n{\n  int in;\n  int inlen = unknown_int();\n  int bufferlen = unknown_int();\n  int buf;\n  int buflim;\n\n  if(bufferlen >1);else goto END;\n  if(inlen > 0);else goto END;\n  if(bufferlen < inlen);else goto END;\n\n  buf = 0;\n  in = 0;\n  buflim = bufferlen - 2;\n\n  /*@\nloop invariant i1: 0 <= buf <= bufferlen;\nloop invariant i2: 0 <= in <= inlen;\nloop invariant i3: 0 <= buflim <= bufferlen;\nloop invariant i4: buf <= buflim;\n\nloop invariant i6: in < inlen;\n\n*/\nwhile (unknown_int())\n  {\n    if (buf == buflim)\n      break;\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n \n    buf++;\nout:\n    in++;\n    {;\n//@ assert(0<=in);\n}\n\n    {;\n//@ assert(in<inlen);\n}\n\n  }\n\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n\n    buf++;\n\n  {;\n//@ assert(0<=buf);\n}\n\n  {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= buf <= buflim; loop invariant 0 <= in <= inlen - 1; loop invariant !unknown_int() ==> buf == buflim; loop invariant !unknown_int() ==> in == inlen; loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int();\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main ()\n{\n  int in;\n  int inlen = unknown_int();\n  int bufferlen = unknown_int();\n  int buf;\n  int buflim;\n\n  if(bufferlen >1);else goto END;\n  if(inlen > 0);else goto END;\n  if(bufferlen < inlen);else goto END;\n\n  buf = 0;\n  in = 0;\n  buflim = bufferlen - 2;\n\n  /*@\n\n*/\nwhile (unknown_int())\n  {\n    if (buf == buflim)\n      break;\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n \n    buf++;\nout:\n    in++;\n    {;\n//@ assert(0<=in);\n}\n\n    {;\n//@ assert(in<inlen);\n}\n\n  }\n\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n\n    buf++;\n\n  {;\n//@ assert(0<=buf);\n}\n\n  {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= in <= inlen;\nloop invariant 0 <= buf <= buflim;\nloop invariant buf < buflim ==> in < inlen;\nloop invariant buflim + 1 <= buf ==> in == inlen;\nloop invariant buf < buflim ==> 0 <= buf;\nloop invariant buflim + 1 <= buf ==> 0 <= buf;\nloop invariant buf < buflim ==> buf < bufferlen;\nloop invariant buflim + 1 <= buf ==> buf < bufferlen;\nloop invariant buf < buflim ==> 0 <= in;\nloop invariant buflim + 1 <= buf ==> 0 <= in;\nloop invariant buf < buflim ==> in < inlen;\nloop invariant buflim + 1 <= buf ==> in == inlen;\nloop invariant buf < buflim ==> 0 <= buf;\nloop invariant buflim + 1 <= buf ==> 0 <= buf;\nloop invariant buf < buflim ==> buf < bufferlen;\nloop invariant buflim + 1 <= buf ==> buf < bufferlen;\nloop invariant buf < buflim ==> 0 <= in;\nloop invariant buflim + 1 <= buf ==> 0 <= in;\nloop invariant buf < buflim ==> in < inlen;\nloop invariant buflim + 1 <= buf ==> in == inlen;\nloop invariant buf < buflim ==> 0 <= buf;\nloop invariant buflim + 1 <= buf ==> 0 <= buf;\nloop invariant buf < buflim ==> buf < bufferlen;\nloop invariant buflim + 1 <= buf ==> buf < bufferlen;\nloop invariant buf < buflim ==> 0 <= in;\nloop invariant buflim + 1 <= buf ==> 0 <= in;\nloop invariant buf < buflim ==> in < inlen;\nloop invariant buflim + 1 <= buf ==> in == inlen;\nloop invariant buf < buflim ==> 0 <= buf;\nloop invariant buflim + 1 <= buf ==> 0 <= buf;\nloop invariant buf < buflim ==> buf < bufferlen;\nloop invariant buflim + 1 <= buf ==> buf < bufferlen;\nloop invariant buf < buflim ==> 0 <= in;\nloop invariant buflim + 1 <= buf ==> 0 <= in;\nloop invariant buf < buflim ==> in < inlen;\nloop invariant buflim + 1 <= buf ==> in == inlen;\nloop invariant buf < buflim ==> 0 <= buf;\nloop invariant buflim + 1 <= buf ==> 0 <= buf;\nloop invariant buf < buflim ==> buf < bufferlen;\nloop invariant buflim + 1 <= buf ==> buf < bufferlen;\nloop invariant buf < buflim ==> 0 <= in;\nloop invariant buflim + 1 <= buf ==> 0 <= in;\nloop invariant buf < buflim ==> in < inlen;\nloop invariant buflim + 1 <= buf ==> in == inlen;\nloop invariant buf < buflim ==> 0 <= buf;\nloop invariant buflim + 1 <= buf ==> 0 <= buf;\nloop invariant buf < buflim ==> buf < bufferlen;\nloop invariant buflim + 1 <= buf ==> buf < bufferlen;\nloop invariant buf < buflim ==> 0 <= in;\nloop invariant buflim + 1 <= buf ==> 0 <= in;\nloop invariant buf < buflim ==> in < inlen;\nloop invariant buflim + 1 <= buf ==> in == inlen;\nloop invariant buf < buflim ==> 0 <= buf;\nloop invariant buflim + 1 <= buf ==> 0 <= buf;\nloop invariant buf < buflim ==> buf < bufferlen;\nloop invariant buflim + 1 <= buf ==> buf < bufferlen;\nloop invariant buf < buflim ==> 0 <= in;\nloop invariant buflim + 1 <= buf ==> 0 <= in;\nloop invariant buf < buflim ==> in < inlen;\nloop invariant buflim + 1 <= buf ==> in == inlen;\nloop invariant buf < buflim ==> 0 <= buf;\nloop invariant buflim + 1 <= buf ==> 0 <= buf;\nloop invariant buf < buflim ==> buf < bufferlen;\nloop invariant buflim + 1 <= buf ==> buf < bufferlen;\nloop invariant buf < buflim ==> 0 <= in;\nloop invariant buflim + 1 <= buf ==> 0 <= in;\nloop invariant buf < buflim ==> in < inlen;\nloop invariant buflim + 1 <= buf ==> in == inlen;\nloop invariant buf < buflim ==> 0 <= buf;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main ()\n{\n  int in;\n  int inlen = unknown_int();\n  int bufferlen = unknown_int();\n  int buf;\n  int buflim;\n\n  if(bufferlen >1);else goto END;\n  if(inlen > 0);else goto END;\n  if(bufferlen < inlen);else goto END;\n\n  buf = 0;\n  in = 0;\n  buflim = bufferlen - 2;\n\n  /*@\nloop invariant i1: 0 <= in <= inlen;\nloop invariant i2: 0 <= buf <= buflim;\nloop invariant i3: buf < buflim ==> in < inlen;\nloop invariant i4: buflim + 1 <= buf ==> in == inlen;\nloop invariant i5: buf < buflim ==> 0 <= buf;\nloop invariant i6: buflim + 1 <= buf ==> 0 <= buf;\n\nloop invariant i8: buflim + 1 <= buf ==> buf < bufferlen;\nloop invariant i9: buf < buflim ==> 0 <= in;\nloop invariant i10: buflim + 1 <= buf ==> 0 <= in;\n*/\nwhile (unknown_int())\n  {\n    if (buf == buflim)\n      break;\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n \n    buf++;\nout:\n    in++;\n    {;\n//@ assert(0<=in);\n}\n\n    {;\n//@ assert(in<inlen);\n}\n\n  }\n\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n\n    buf++;\n\n  {;\n//@ assert(0<=buf);\n}\n\n  {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= buflim < bufferlen;\nloop invariant 0 <= buf <= buflim;\nloop invariant 0 <= in <= inlen;\nloop invariant 0 <= buf <= in;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main ()\n{\n  int in;\n  int inlen = unknown_int();\n  int bufferlen = unknown_int();\n  int buf;\n  int buflim;\n\n  if(bufferlen >1);else goto END;\n  if(inlen > 0);else goto END;\n  if(bufferlen < inlen);else goto END;\n\n  buf = 0;\n  in = 0;\n  buflim = bufferlen - 2;\n\n  /*@\nloop invariant i1: 0 <= buflim < bufferlen;\nloop invariant i2: 0 <= buf <= buflim;\nloop invariant i3: 0 <= in <= inlen;\nloop invariant i4: 0 <= buf <= in;\n*/\nwhile (unknown_int())\n  {\n    if (buf == buflim)\n      break;\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n \n    buf++;\nout:\n    in++;\n    {;\n//@ assert(0<=in);\n}\n\n    {;\n//@ assert(in<inlen);\n}\n\n  }\n\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n\n    buf++;\n\n  {;\n//@ assert(0<=buf);\n}\n\n  {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= buf <= bufferlen;\nloop invariant 0 <= in <= inlen;\nloop invariant buf < buflim;\nloop invariant buf < bufferlen - 2;\nloop invariant buf < bufferlen - 1;\nloop invariant buf < bufferlen;\nloop invariant buf < buflim + 1;\nloop invariant buf < buflim + 2;\nloop invariant buf < buflim + 3;\nloop invariant buf < buflim + 4;\nloop invariant buf < buflim + 5;\nloop invariant buf < buflim + 6;\nloop invariant buf < buflim + 7;\nloop invariant buf < buflim + 8;\nloop invariant buf < buflim + 9;\nloop invariant buf < buflim + 10;\nloop invariant buf < buflim + 11;\nloop invariant buf < buflim + 12;\nloop invariant buf < buflim + 13;\nloop invariant buf < buflim + 14;\nloop invariant buf < buflim + 15;\nloop invariant buf < buflim + 16;\nloop invariant buf < buflim + 17;\nloop invariant buf < buflim + 18;\nloop invariant buf < buflim + 19;\nloop invariant buf < buflim + 20;\nloop invariant buf < buflim + 21;\nloop invariant buf < buflim + 22;\nloop invariant buf < buflim + 23;\nloop invariant buf < buflim + 24;\nloop invariant buf < buflim + 25;\nloop invariant buf < buflim + 26;\nloop invariant buf < buflim + 27;\nloop invariant buf < buflim + 28;\nloop invariant buf < buflim + 29;\nloop invariant buf < buflim + 30;\nloop invariant buf < buflim + 31;\nloop invariant buf < buflim + 32;\nloop invariant buf < buflim + 33;\nloop invariant buf < buflim + 34;\nloop invariant buf < buflim + 35;\nloop invariant buf < buflim + 36;\nloop invariant buf < buflim + 37;\nloop invariant buf < buflim + 38;\nloop invariant buf < buflim + 39;\nloop invariant buf < buflim + 40;\nloop invariant buf < buflim + 41;\nloop invariant buf < buflim + 42;\nloop invariant buf < buflim + 43;\nloop invariant buf < buflim + 44;\nloop invariant buf < buflim + 45;\nloop invariant buf < buflim + 46;\nloop invariant buf < buflim + 47;\nloop invariant buf < buflim + 48;\nloop invariant buf < buflim + 49;\nloop invariant buf < buflim + 50;\nloop invariant buf < buflim + 51;\nloop invariant buf < buflim + 52;\nloop invariant buf < buflim + 53;\nloop invariant buf < buflim + 54;\nloop invariant buf < buflim + 55;\nloop invariant buf < buflim + 56;\nloop invariant buf < buflim + 57;\nloop invariant buf < buflim + 58;\nloop invariant buf < buflim + 59;\nloop invariant buf < buflim + 60;\nloop invariant buf < buflim + 61;\nloop invariant buf < buflim + 62;\nloop invariant buf < buflim + 63;\nloop invariant buf < buflim + 64;\nloop invariant buf < buflim + 65;\nloop invariant buf < buflim + 66;\nloop invariant buf < buflim + 67;\nloop invariant buf < buflim + 68;\nloop invariant buf < buflim + 69;\nloop invariant buf < buflim + 70;\nloop invariant buf < buflim + 71;\nloop invariant buf < buflim + 72;\nloop invariant buf < buflim + 73;\nloop invariant buf < buflim + 74;\nloop invariant buf < buflim + 75;\nloop invariant buf < buflim + 76;\nloop invariant buf < buflim + 77;\nloop invariant buf < buflim + 78;\nloop invariant buf < buflim + 79;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main ()\n{\n  int in;\n  int inlen = unknown_int();\n  int bufferlen = unknown_int();\n  int buf;\n  int buflim;\n\n  if(bufferlen >1);else goto END;\n  if(inlen > 0);else goto END;\n  if(bufferlen < inlen);else goto END;\n\n  buf = 0;\n  in = 0;\n  buflim = bufferlen - 2;\n\n  /*@\nloop invariant i1: 0 <= buf <= bufferlen;\nloop invariant i2: 0 <= in <= inlen;\n\n\n\n\nloop invariant i7: buf < buflim + 1;\nloop invariant i8: buf < buflim + 2;\nloop invariant i9: buf < buflim + 3;\nloop invariant i10: buf < buflim + 4;\nloop invariant i11: buf < buflim + 5;\nloop invariant i12: buf < buflim + 6;\nloop invariant i13: buf < buflim + 7;\nloop invariant i14: buf < buflim + 8;\nloop invariant i15: buf < buflim + 9;\nloop invariant i16: buf < buflim + 10;\nloop invariant i17: buf < buflim + 11;\nloop invariant i18: buf < buflim + 12;\nloop invariant i19: buf < buflim + 13;\nloop invariant i20: buf < buflim + 14;\nloop invariant i21: buf < buflim + 15;\nloop invariant i22: buf < buflim + 16;\nloop invariant i23: buf < buflim + 17;\nloop invariant i24: buf < buflim + 18;\nloop invariant i25: buf < buflim + 19;\nloop invariant i26: buf < buflim + 20;\nloop invariant i27: buf < buflim + 21;\nloop invariant i28: buf < buflim + 22;\nloop invariant i29: buf < buflim + 23;\nloop invariant i30: buf < buflim + 24;\nloop invariant i31: buf < buflim + 25;\nloop invariant i32: buf < buflim + 26;\nloop invariant i33: buf < buflim + 27;\nloop invariant i34: buf < buflim + 28;\nloop invariant i35: buf < buflim + 29;\nloop invariant i36: buf < buflim + 30;\nloop invariant i37: buf < buflim + 31;\nloop invariant i38: buf < buflim + 32;\nloop invariant i39: buf < buflim + 33;\nloop invariant i40: buf < buflim + 34;\nloop invariant i41: buf < buflim + 35;\nloop invariant i42: buf < buflim + 36;\nloop invariant i43: buf < buflim + 37;\nloop invariant i44: buf < buflim + 38;\nloop invariant i45: buf < buflim + 39;\nloop invariant i46: buf < buflim + 40;\nloop invariant i47: buf < buflim + 41;\nloop invariant i48: buf < buflim + 42;\nloop invariant i49: buf < buflim + 43;\nloop invariant i50: buf < buflim + 44;\nloop invariant i51: buf < buflim + 45;\nloop invariant i52: buf < buflim + 46;\nloop invariant i53: buf < buflim + 47;\nloop invariant i54: buf < buflim + 48;\nloop invariant i55: buf < buflim + 49;\nloop invariant i56: buf < buflim + 50;\nloop invariant i57: buf < buflim + 51;\nloop invariant i58: buf < buflim + 52;\nloop invariant i59: buf < buflim + 53;\nloop invariant i60: buf < buflim + 54;\nloop invariant i61: buf < buflim + 55;\nloop invariant i62: buf < buflim + 56;\nloop invariant i63: buf < buflim + 57;\nloop invariant i64: buf < buflim + 58;\nloop invariant i65: buf < buflim + 59;\nloop invariant i66: buf < buflim + 60;\nloop invariant i67: buf < buflim + 61;\nloop invariant i68: buf < buflim + 62;\nloop invariant i69: buf < buflim + 63;\nloop invariant i70: buf < buflim + 64;\nloop invariant i71: buf < buflim + 65;\nloop invariant i72: buf < buflim + 66;\nloop invariant i73: buf < buflim + 67;\nloop invariant i74: buf < buflim + 68;\nloop invariant i75: buf < buflim + 69;\nloop invariant i76: buf < buflim + 70;\nloop invariant i77: buf < buflim + 71;\nloop invariant i78: buf < buflim + 72;\nloop invariant i79: buf < buflim + 73;\nloop invariant i80: buf < buflim + 74;\nloop invariant i81: buf < buflim + 75;\nloop invariant i82: buf < buflim + 76;\nloop invariant i83: buf < buflim + 77;\nloop invariant i84: buf < buflim + 78;\nloop invariant i85: buf < buflim + 79;\n*/\nwhile (unknown_int())\n  {\n    if (buf == buflim)\n      break;\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n \n    buf++;\nout:\n    in++;\n    {;\n//@ assert(0<=in);\n}\n\n    {;\n//@ assert(in<inlen);\n}\n\n  }\n\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n\n    buf++;\n\n  {;\n//@ assert(0<=buf);\n}\n\n  {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= buf <= buflim;\nloop invariant 0 <= in <= inlen;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main ()\n{\n  int in;\n  int inlen = unknown_int();\n  int bufferlen = unknown_int();\n  int buf;\n  int buflim;\n\n  if(bufferlen >1);else goto END;\n  if(inlen > 0);else goto END;\n  if(bufferlen < inlen);else goto END;\n\n  buf = 0;\n  in = 0;\n  buflim = bufferlen - 2;\n\n  /*@\nloop invariant i1: 0 <= buf <= buflim;\nloop invariant i2: 0 <= in <= inlen;\n*/\nwhile (unknown_int())\n  {\n    if (buf == buflim)\n      break;\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n \n    buf++;\nout:\n    in++;\n    {;\n//@ assert(0<=in);\n}\n\n    {;\n//@ assert(in<inlen);\n}\n\n  }\n\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n\n    buf++;\n\n  {;\n//@ assert(0<=buf);\n}\n\n  {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main ()\n{\n  int in;\n  int inlen = unknown_int();\n  int bufferlen = unknown_int();\n  int buf;\n  int buflim;\n\n  if(bufferlen >1);else goto END;\n  if(inlen > 0);else goto END;\n  if(bufferlen < inlen);else goto END;\n\n  buf = 0;\n  in = 0;\n  buflim = bufferlen - 2;\n\n  /*@\n\n*/\nwhile (unknown_int())\n  {\n    if (buf == buflim)\n      break;\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n \n    buf++;\nout:\n    in++;\n    {;\n//@ assert(0<=in);\n}\n\n    {;\n//@ assert(in<inlen);\n}\n\n  }\n\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n\n    buf++;\n\n  {;\n//@ assert(0<=buf);\n}\n\n  {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= buf <= bufferlen;\nloop invariant 0 <= in <= inlen;\nloop invariant buflim = bufferlen - 2;\nloop invariant buf <= buflim;\nloop invariant (buf == buflim) ==> (unknown_int() == 0);\nloop invariant (buf != buflim) ==> (unknown_int() == 1);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main ()\n{\n  int in;\n  int inlen = unknown_int();\n  int bufferlen = unknown_int();\n  int buf;\n  int buflim;\n\n  if(bufferlen >1);else goto END;\n  if(inlen > 0);else goto END;\n  if(bufferlen < inlen);else goto END;\n\n  buf = 0;\n  in = 0;\n  buflim = bufferlen - 2;\n\n  /*@\nloop invariant i1: 0 <= buf <= bufferlen;\nloop invariant i2: 0 <= in <= inlen;\n\nloop invariant i4: buf <= buflim;\n\n\n*/\nwhile (unknown_int())\n  {\n    if (buf == buflim)\n      break;\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n \n    buf++;\nout:\n    in++;\n    {;\n//@ assert(0<=in);\n}\n\n    {;\n//@ assert(in<inlen);\n}\n\n  }\n\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n\n    buf++;\n\n  {;\n//@ assert(0<=buf);\n}\n\n  {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= buf <= buflim;\nloop invariant 0 <= in <= inlen;\nloop invariant 0 <= buflim <= bufferlen - 2;\nloop invariant 0 <= buf <= buflim;\nloop invariant buf < bufferlen;\nloop invariant in < inlen;\nloop invariant buflim < bufferlen - 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main ()\n{\n  int in;\n  int inlen = unknown_int();\n  int bufferlen = unknown_int();\n  int buf;\n  int buflim;\n\n  if(bufferlen >1);else goto END;\n  if(inlen > 0);else goto END;\n  if(bufferlen < inlen);else goto END;\n\n  buf = 0;\n  in = 0;\n  buflim = bufferlen - 2;\n\n  /*@\nloop invariant i1: 0 <= buf <= buflim;\nloop invariant i2: 0 <= in <= inlen;\nloop invariant i3: 0 <= buflim <= bufferlen - 2;\nloop invariant i4: buf < bufferlen;\nloop invariant i5: in < inlen;\nloop invariant i6: buflim < bufferlen - 1;\n*/\nwhile (unknown_int())\n  {\n    if (buf == buflim)\n      break;\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n \n    buf++;\nout:\n    in++;\n    {;\n//@ assert(0<=in);\n}\n\n    {;\n//@ assert(in<inlen);\n}\n\n  }\n\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n\n    buf++;\n\n  {;\n//@ assert(0<=buf);\n}\n\n  {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= in <= inlen;loop invariant 0 <= buf <= buflim;loop invariant 0 <= buflim <= bufferlen - 2;loop invariant buf < bufferlen;loop invariant in < inlen;loop invariant buf <= buflim;loop invariant bufferlen - 2 <= buflim;loop invariant bufferlen - 1 <= buf;loop invariant bufferlen <= buf;loop invariant inlen <= in;loop invariant inlen - 1 <= in;loop invariant in <= inlen - 1;loop invariant in <= inlen;loop invariant buflim <= buf;loop invariant buflim <= bufferlen - 2;loop invariant buf <= buflim;loop invariant buflim <= bufferlen - 1;loop invariant bufferlen <= buf;loop invariant buflim <= bufferlen;loop invariant buflim <= bufferlen - 1;loop invariant bufferlen - 1 <= buflim;loop invariant bufferlen <= buflim;loop invariant bufferlen - 1 <= buf;loop invariant bufferlen <= buf;loop invariant buflim <= buflim;loop invariant buflim <= bufferlen - 2;loop invariant bufferlen - 2 <= buflim;loop invariant bufferlen - 1 <= buf;loop invariant bufferlen <= buf;loop invariant buflim <= buflim;loop invariant buflim <= bufferlen - 1;loop invariant bufferlen - 1 <= buflim;loop invariant bufferlen <= buflim;loop invariant bufferlen - 1 <= buf;loop invariant bufferlen <= buf;loop invariant buflim <= buflim;loop invariant buflim <= bufferlen - 1;loop invariant bufferlen - 1 <= buflim;loop invariant bufferlen <= buflim;loop invariant bufferlen - 1 <= buf;loop invariant bufferlen <= buf;loop invariant buflim <= buflim;loop invariant buflim <= bufferlen - 1;loop invariant bufferlen - 1 <= buflim;loop invariant bufferlen <= buflim;loop invariant bufferlen - 1 <= buf;loop invariant bufferlen <= buf;loop invariant buflim <= buflim;loop invariant buflim <= bufferlen - 1;loop invariant bufferlen - 1 <= buflim;loop invariant bufferlen <= buflim;loop invariant bufferlen - 1 <= buf;loop invariant bufferlen <= buf;loop invariant buflim <= buflim;loop invariant buflim <= bufferlen - 1;loop invariant bufferlen - 1 <= buflim;loop invariant bufferlen <= buflim;loop invariant bufferlen - 1 <= buf;loop invariant bufferlen <= buf;loop invariant buflim <= buflim;loop invariant buflim <= bufferlen - 1;loop invariant bufferlen - 1 <= buflim;loop invariant bufferlen <= buflim;loop invariant bufferlen - 1 <= buf;loop invariant bufferlen <= buf;loop invariant buflim <= buflim;loop invariant buflim <= bufferlen - 1;loop invariant bufferlen - 1 <= buflim;loop invariant bufferlen <= buflim;loop invariant bufferlen - 1 <= buf;loop invariant bufferlen <= buf;loop invariant buflim <= buflim;loop invariant buflim <= bufferlen - 1;loop invariant bufferlen - 1 <= buflim;loop invariant bufferlen <= buflim;loop invariant bufferlen - 1 <= buf;loop invariant bufferlen <= buf;loop invariant buflim <= buflim;loop invariant buflim <= bufferlen - 1;loop invariant bufferlen - 1 <= buflim;loop invariant bufferlen <= buflim;loop invariant bufferlen - 1 <= buf;loop invariant bufferlen <= buf;loop invariant buflim <= buflim;loop invariant buflim <= bufferlen - 1;loop invariant bufferlen - 1 <= buflim;loop invariant bufferlen <= buflim;loop invariant bufferlen - 1 <= buf;loop invariant bufferlen <= buf;loop invariant buflim <= buflim;loop invariant buflim <= bufferlen - 1;loop invariant bufferlen - 1 <= buflim;loop invariant bufferlen <= buflim;loop invariant bufferlen - 1 <= buf;loop invariant bufferlen <= buf;loop invariant buflim <= buflim;loop invariant buflim <= bufferlen - 1;loop invariant bufferlen - 1 <= buflim;loop invariant bufferlen <= buflim;loop invariant bufferlen - 1 <= buf;loop invariant bufferlen <= buf;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main ()\n{\n  int in;\n  int inlen = unknown_int();\n  int bufferlen = unknown_int();\n  int buf;\n  int buflim;\n\n  if(bufferlen >1);else goto END;\n  if(inlen > 0);else goto END;\n  if(bufferlen < inlen);else goto END;\n\n  buf = 0;\n  in = 0;\n  buflim = bufferlen - 2;\n\n  /*@\nloop invariant i1: 0 <= in <= inlen;loop invariant 0 <= buf <= buflim;loop invariant 0 <= buflim <= bufferlen - 2;loop invariant buf < bufferlen;loop invariant in < inlen;loop invariant buf <= buflim;loop invariant bufferlen - 2 <= buflim;loop invariant bufferlen - 1 <= buf;loop invariant bufferlen <= buf;loop invariant inlen <= in;loop invariant inlen - 1 <= in;loop invariant in <= inlen - 1;loop invariant in <= inlen;loop invariant buflim <= buf;loop invariant buflim <= bufferlen - 2;loop invariant buf <= buflim;loop invariant buflim <= bufferlen - 1;loop invariant bufferlen <= buf;loop invariant buflim <= bufferlen;loop invariant buflim <= bufferlen - 1;loop invariant bufferlen - 1 <= buflim;loop invariant bufferlen <= buflim;loop invariant bufferlen - 1 <= buf;loop invariant bufferlen <= buf;loop invariant buflim <= buflim;loop invariant buflim <= bufferlen - 2;loop invariant bufferlen - 2 <= buflim;loop invariant bufferlen - 1 <= buf;loop invariant bufferlen <= buf;loop invariant buflim <= buflim;loop invariant buflim <= bufferlen - 1;loop invariant bufferlen - 1 <= buflim;loop invariant bufferlen <= buflim;loop invariant bufferlen - 1 <= buf;loop invariant bufferlen <= buf;loop invariant buflim <= buflim;loop invariant buflim <= bufferlen - 1;loop invariant bufferlen - 1 <= buflim;loop invariant bufferlen <= buflim;loop invariant bufferlen - 1 <= buf;loop invariant bufferlen <= buf;loop invariant buflim <= buflim;loop invariant buflim <= bufferlen - 1;loop invariant bufferlen - 1 <= buflim;loop invariant bufferlen <= buflim;loop invariant bufferlen - 1 <= buf;loop invariant bufferlen <= buf;loop invariant buflim <= buflim;loop invariant buflim <= bufferlen - 1;loop invariant bufferlen - 1 <= buflim;loop invariant bufferlen <= buflim;loop invariant bufferlen - 1 <= buf;loop invariant bufferlen <= buf;loop invariant buflim <= buflim;loop invariant buflim <= bufferlen - 1;loop invariant bufferlen - 1 <= buflim;loop invariant bufferlen <= buflim;loop invariant bufferlen - 1 <= buf;loop invariant bufferlen <= buf;loop invariant buflim <= buflim;loop invariant buflim <= bufferlen - 1;loop invariant bufferlen - 1 <= buflim;loop invariant bufferlen <= buflim;loop invariant bufferlen - 1 <= buf;loop invariant bufferlen <= buf;loop invariant buflim <= buflim;loop invariant buflim <= bufferlen - 1;loop invariant bufferlen - 1 <= buflim;loop invariant bufferlen <= buflim;loop invariant bufferlen - 1 <= buf;loop invariant bufferlen <= buf;loop invariant buflim <= buflim;loop invariant buflim <= bufferlen - 1;loop invariant bufferlen - 1 <= buflim;loop invariant bufferlen <= buflim;loop invariant bufferlen - 1 <= buf;loop invariant bufferlen <= buf;loop invariant buflim <= buflim;loop invariant buflim <= bufferlen - 1;loop invariant bufferlen - 1 <= buflim;loop invariant bufferlen <= buflim;loop invariant bufferlen - 1 <= buf;loop invariant bufferlen <= buf;loop invariant buflim <= buflim;loop invariant buflim <= bufferlen - 1;loop invariant bufferlen - 1 <= buflim;loop invariant bufferlen <= buflim;loop invariant bufferlen - 1 <= buf;loop invariant bufferlen <= buf;loop invariant buflim <= buflim;loop invariant buflim <= bufferlen - 1;loop invariant bufferlen - 1 <= buflim;loop invariant bufferlen <= buflim;loop invariant bufferlen - 1 <= buf;loop invariant bufferlen <= buf;loop invariant buflim <= buflim;loop invariant buflim <= bufferlen - 1;loop invariant bufferlen - 1 <= buflim;loop invariant bufferlen <= buflim;loop invariant bufferlen - 1 <= buf;loop invariant bufferlen <= buf;\n*/\nwhile (unknown_int())\n  {\n    if (buf == buflim)\n      break;\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n \n    buf++;\nout:\n    in++;\n    {;\n//@ assert(0<=in);\n}\n\n    {;\n//@ assert(in<inlen);\n}\n\n  }\n\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n\n    buf++;\n\n  {;\n//@ assert(0<=buf);\n}\n\n  {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 55: unexpected token ')'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main ()\n{\n  int in;\n  int inlen = unknown_int();\n  int bufferlen = unknown_int();\n  int buf;\n  int buflim;\n\n  if(bufferlen >1);else goto END;\n  if(inlen > 0);else goto END;\n  if(bufferlen < inlen);else goto END;\n\n  buf = 0;\n  in = 0;\n  buflim = bufferlen - 2;\n\n  /*@\nloop invariant i1: 0 <= buf <= buflim + 2;\nloop invariant i2: 0 <= in <= inlen;\nloop invariant i3: buf <= buflim;\nloop invariant i4: in <= inlen;\nloop invariant i5: bufferlen > 1;\nloop invariant i6: inlen > 0;\nloop invariant i7: bufferlen > inlen;\nloop invariant i8: 0 <= buf <= bufferlen;\nloop invariant i9: buf <= in;\nloop invariant i10: buf <= buflim - 2;\nloop invariant i11: buf == buflim ==> in == inlen;\nloop invariant i12: buf != buflim || in != inlen ==> buf < buflim;\nloop invariant i13: buf != buflim || in != inlen ==> in < inlen;\nloop invariant i14: buf == buflim && in != inlen ==> buf == inlen;\nloop invariant i15: buf == buflim && in == inlen ==> buf == buflim;\nloop invariant i16: 0 <= buf <= buflim;\nloop invariant i17: buf + in <= bufferlen;\nloop invariant i18: buf < bufferlen;\nloop invariant i19: in < inlen;\nloop invariant i20: 0 <= buflim <= bufferlen - 2;\nloop invariant i21: in <= inlen - 1;\nloop invariant i22: buf <= buflim + 1;\nloop invariant i23: buf <= buflim + 2;\nloop invariant i24: buflim < bufferlen;\nloop invariant i25: buflim == bufferlen - 2;\nloop invariant i26: buf == buflim;\nloop invariant i27: 0 <= buflim <= bufferlen;\nloop invariant i28: buf < in;\nloop invariant i29: (0 <= buf && buf <= bufferlen && 0 <= in && in <= inlen && 0 <= buflim && buflim <= bufferlen && buf <= buflim && buf < in && in < inlen);\nloop invariant i30: 0 <= buf <= buflim; loop invariant 0 <= in <= inlen - 1; loop invariant !unknown_int() ==> buf == buflim; loop invariant !unknown_int() ==> in == inlen; loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int(); loop invariant !unknown_int() ==> !unknown_int();\nloop invariant i31: buf < buflim ==> in < inlen;\nloop invariant i32: buflim + 1 <= buf ==> in == inlen;\nloop invariant i33: buf < buflim ==> 0 <= buf;\nloop invariant i34: buflim + 1 <= buf ==> 0 <= buf;\nloop invariant i35: buf < buflim ==> buf < bufferlen;\nloop invariant i36: buflim + 1 <= buf ==> buf < bufferlen;\nloop invariant i37: buf < buflim ==> 0 <= in;\nloop invariant i38: buflim + 1 <= buf ==> 0 <= in;\nloop invariant i39: 0 <= buflim < bufferlen;\nloop invariant i40: 0 <= buf <= in;\nloop invariant i41: buf < buflim;\nloop invariant i42: buf < bufferlen - 2;\nloop invariant i43: buf < bufferlen - 1;\nloop invariant i44: buf < buflim + 1;\nloop invariant i45: buf < buflim + 2;\nloop invariant i46: buf < buflim + 3;\nloop invariant i47: buf < buflim + 4;\nloop invariant i48: buf < buflim + 5;\nloop invariant i49: buf < buflim + 6;\nloop invariant i50: buf < buflim + 7;\nloop invariant i51: buf < buflim + 8;\nloop invariant i52: buf < buflim + 9;\nloop invariant i53: buf < buflim + 10;\nloop invariant i54: buf < buflim + 11;\nloop invariant i55: buf < buflim + 12;\nloop invariant i56: buf < buflim + 13;\nloop invariant i57: buf < buflim + 14;\nloop invariant i58: buf < buflim + 15;\nloop invariant i59: buf < buflim + 16;\nloop invariant i60: buf < buflim + 17;\nloop invariant i61: buf < buflim + 18;\nloop invariant i62: buf < buflim + 19;\nloop invariant i63: buf < buflim + 20;\nloop invariant i64: buf < buflim + 21;\nloop invariant i65: buf < buflim + 22;\nloop invariant i66: buf < buflim + 23;\nloop invariant i67: buf < buflim + 24;\nloop invariant i68: buf < buflim + 25;\nloop invariant i69: buf < buflim + 26;\nloop invariant i70: buf < buflim + 27;\nloop invariant i71: buf < buflim + 28;\nloop invariant i72: buf < buflim + 29;\nloop invariant i73: buf < buflim + 30;\nloop invariant i74: buf < buflim + 31;\nloop invariant i75: buf < buflim + 32;\nloop invariant i76: buf < buflim + 33;\nloop invariant i77: buf < buflim + 34;\nloop invariant i78: buf < buflim + 35;\nloop invariant i79: buf < buflim + 36;\nloop invariant i80: buf < buflim + 37;\nloop invariant i81: buf < buflim + 38;\nloop invariant i82: buf < buflim + 39;\nloop invariant i83: buf < buflim + 40;\nloop invariant i84: buf < buflim + 41;\nloop invariant i85: buf < buflim + 42;\nloop invariant i86: buf < buflim + 43;\nloop invariant i87: buf < buflim + 44;\nloop invariant i88: buf < buflim + 45;\nloop invariant i89: buf < buflim + 46;\nloop invariant i90: buf < buflim + 47;\nloop invariant i91: buf < buflim + 48;\nloop invariant i92: buf < buflim + 49;\nloop invariant i93: buf < buflim + 50;\nloop invariant i94: buf < buflim + 51;\nloop invariant i95: buf < buflim + 52;\nloop invariant i96: buf < buflim + 53;\nloop invariant i97: buf < buflim + 54;\nloop invariant i98: buf < buflim + 55;\nloop invariant i99: buf < buflim + 56;\nloop invariant i100: buf < buflim + 57;\nloop invariant i101: buf < buflim + 58;\nloop invariant i102: buf < buflim + 59;\nloop invariant i103: buf < buflim + 60;\nloop invariant i104: buf < buflim + 61;\nloop invariant i105: buf < buflim + 62;\nloop invariant i106: buf < buflim + 63;\nloop invariant i107: buf < buflim + 64;\nloop invariant i108: buf < buflim + 65;\nloop invariant i109: buf < buflim + 66;\nloop invariant i110: buf < buflim + 67;\nloop invariant i111: buf < buflim + 68;\nloop invariant i112: buf < buflim + 69;\nloop invariant i113: buf < buflim + 70;\nloop invariant i114: buf < buflim + 71;\nloop invariant i115: buf < buflim + 72;\nloop invariant i116: buf < buflim + 73;\nloop invariant i117: buf < buflim + 74;\nloop invariant i118: buf < buflim + 75;\nloop invariant i119: buf < buflim + 76;\nloop invariant i120: buf < buflim + 77;\nloop invariant i121: buf < buflim + 78;\nloop invariant i122: buf < buflim + 79;\nloop invariant i123: buflim = bufferlen - 2;\nloop invariant i124: (buf == buflim) ==> (unknown_int() == 0);\nloop invariant i125: (buf != buflim) ==> (unknown_int() == 1);\nloop invariant i126: buflim < bufferlen - 1;\nloop invariant i127: 0 <= in <= inlen;loop invariant 0 <= buf <= buflim;loop invariant 0 <= buflim <= bufferlen - 2;loop invariant buf < bufferlen;loop invariant in < inlen;loop invariant buf <= buflim;loop invariant bufferlen - 2 <= buflim;loop invariant bufferlen - 1 <= buf;loop invariant bufferlen <= buf;loop invariant inlen <= in;loop invariant inlen - 1 <= in;loop invariant in <= inlen - 1;loop invariant in <= inlen;loop invariant buflim <= buf;loop invariant buflim <= bufferlen - 2;loop invariant buf <= buflim;loop invariant buflim <= bufferlen - 1;loop invariant bufferlen <= buf;loop invariant buflim <= bufferlen;loop invariant buflim <= bufferlen - 1;loop invariant bufferlen - 1 <= buflim;loop invariant bufferlen <= buflim;loop invariant bufferlen - 1 <= buf;loop invariant bufferlen <= buf;loop invariant buflim <= buflim;loop invariant buflim <= bufferlen - 2;loop invariant bufferlen - 2 <= buflim;loop invariant bufferlen - 1 <= buf;loop invariant bufferlen <= buf;loop invariant buflim <= buflim;loop invariant buflim <= bufferlen - 1;loop invariant bufferlen - 1 <= buflim;loop invariant bufferlen <= buflim;loop invariant bufferlen - 1 <= buf;loop invariant bufferlen <= buf;loop invariant buflim <= buflim;loop invariant buflim <= bufferlen - 1;loop invariant bufferlen - 1 <= buflim;loop invariant bufferlen <= buflim;loop invariant bufferlen - 1 <= buf;loop invariant bufferlen <= buf;loop invariant buflim <= buflim;loop invariant buflim <= bufferlen - 1;loop invariant bufferlen - 1 <= buflim;loop invariant bufferlen <= buflim;loop invariant bufferlen - 1 <= buf;loop invariant bufferlen <= buf;loop invariant buflim <= buflim;loop invariant buflim <= bufferlen - 1;loop invariant bufferlen - 1 <= buflim;loop invariant bufferlen <= buflim;loop invariant bufferlen - 1 <= buf;loop invariant bufferlen <= buf;loop invariant buflim <= buflim;loop invariant buflim <= bufferlen - 1;loop invariant bufferlen - 1 <= buflim;loop invariant bufferlen <= buflim;loop invariant bufferlen - 1 <= buf;loop invariant bufferlen <= buf;loop invariant buflim <= buflim;loop invariant buflim <= bufferlen - 1;loop invariant bufferlen - 1 <= buflim;loop invariant bufferlen <= buflim;loop invariant bufferlen - 1 <= buf;loop invariant bufferlen <= buf;loop invariant buflim <= buflim;loop invariant buflim <= bufferlen - 1;loop invariant bufferlen - 1 <= buflim;loop invariant bufferlen <= buflim;loop invariant bufferlen - 1 <= buf;loop invariant bufferlen <= buf;loop invariant buflim <= buflim;loop invariant buflim <= bufferlen - 1;loop invariant bufferlen - 1 <= buflim;loop invariant bufferlen <= buflim;loop invariant bufferlen - 1 <= buf;loop invariant bufferlen <= buf;loop invariant buflim <= buflim;loop invariant buflim <= bufferlen - 1;loop invariant bufferlen - 1 <= buflim;loop invariant bufferlen <= buflim;loop invariant bufferlen - 1 <= buf;loop invariant bufferlen <= buf;loop invariant buflim <= buflim;loop invariant buflim <= bufferlen - 1;loop invariant bufferlen - 1 <= buflim;loop invariant bufferlen <= buflim;loop invariant bufferlen - 1 <= buf;loop invariant bufferlen <= buf;loop invariant buflim <= buflim;loop invariant buflim <= bufferlen - 1;loop invariant bufferlen - 1 <= buflim;loop invariant bufferlen <= buflim;loop invariant bufferlen - 1 <= buf;loop invariant bufferlen <= buf;loop invariant buflim <= buflim;loop invariant buflim <= bufferlen - 1;loop invariant bufferlen - 1 <= buflim;loop invariant bufferlen <= buflim;loop invariant bufferlen - 1 <= buf;loop invariant bufferlen <= buf;\n*/\nwhile (unknown_int())\n  {\n    if (buf == buflim)\n      break;\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n \n    buf++;\nout:\n    in++;\n    {;\n//@ assert(0<=in);\n}\n\n    {;\n//@ assert(in<inlen);\n}\n\n  }\n\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n\n    buf++;\n\n  {;\n//@ assert(0<=buf);\n}\n\n  {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n END:  return 0;\n}",
        "combined_annotation_num_solver_calls": 13,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main ()\n{\n  int in;\n  int inlen = unknown_int();\n  int bufferlen = unknown_int();\n  int buf;\n  int buflim;\n\n  if(bufferlen >1);else goto END;\n  if(inlen > 0);else goto END;\n  if(bufferlen < inlen);else goto END;\n\n  buf = 0;\n  in = 0;\n  buflim = bufferlen - 2;\n\n  /*@\nloop invariant i1: 0 <= buf <= buflim + 2;\nloop invariant i2: 0 <= in <= inlen;\nloop invariant i3: buf <= buflim;\nloop invariant i4: in <= inlen;\nloop invariant i5: bufferlen > 1;\nloop invariant i6: inlen > 0;\n\nloop invariant i8: 0 <= buf <= bufferlen;\nloop invariant i9: buf <= in;\n\n\n\nloop invariant i13: buf != buflim || in != inlen ==> in < inlen;\n\nloop invariant i15: buf == buflim && in == inlen ==> buf == buflim;\nloop invariant i16: 0 <= buf <= buflim;\nloop invariant i17: buf + in <= bufferlen;\nloop invariant i18: buf < bufferlen;\nloop invariant i19: in < inlen;\nloop invariant i20: 0 <= buflim <= bufferlen - 2;\nloop invariant i21: in <= inlen - 1;\nloop invariant i22: buf <= buflim + 1;\nloop invariant i23: buf <= buflim + 2;\nloop invariant i24: buflim < bufferlen;\nloop invariant i25: buflim == bufferlen - 2;\n\nloop invariant i27: 0 <= buflim <= bufferlen;\n\n\n\nloop invariant i31: buf < buflim ==> in < inlen;\nloop invariant i32: buflim + 1 <= buf ==> in == inlen;\nloop invariant i33: buf < buflim ==> 0 <= buf;\nloop invariant i34: buflim + 1 <= buf ==> 0 <= buf;\nloop invariant i35: buf < buflim ==> buf < bufferlen;\nloop invariant i36: buflim + 1 <= buf ==> buf < bufferlen;\nloop invariant i37: buf < buflim ==> 0 <= in;\nloop invariant i38: buflim + 1 <= buf ==> 0 <= in;\nloop invariant i39: 0 <= buflim < bufferlen;\nloop invariant i40: 0 <= buf <= in;\n\n\nloop invariant i43: buf < bufferlen - 1;\nloop invariant i44: buf < buflim + 1;\nloop invariant i45: buf < buflim + 2;\nloop invariant i46: buf < buflim + 3;\nloop invariant i47: buf < buflim + 4;\nloop invariant i48: buf < buflim + 5;\nloop invariant i49: buf < buflim + 6;\nloop invariant i50: buf < buflim + 7;\nloop invariant i51: buf < buflim + 8;\nloop invariant i52: buf < buflim + 9;\nloop invariant i53: buf < buflim + 10;\nloop invariant i54: buf < buflim + 11;\nloop invariant i55: buf < buflim + 12;\nloop invariant i56: buf < buflim + 13;\nloop invariant i57: buf < buflim + 14;\nloop invariant i58: buf < buflim + 15;\nloop invariant i59: buf < buflim + 16;\nloop invariant i60: buf < buflim + 17;\nloop invariant i61: buf < buflim + 18;\nloop invariant i62: buf < buflim + 19;\nloop invariant i63: buf < buflim + 20;\nloop invariant i64: buf < buflim + 21;\nloop invariant i65: buf < buflim + 22;\nloop invariant i66: buf < buflim + 23;\nloop invariant i67: buf < buflim + 24;\nloop invariant i68: buf < buflim + 25;\nloop invariant i69: buf < buflim + 26;\nloop invariant i70: buf < buflim + 27;\nloop invariant i71: buf < buflim + 28;\nloop invariant i72: buf < buflim + 29;\nloop invariant i73: buf < buflim + 30;\nloop invariant i74: buf < buflim + 31;\nloop invariant i75: buf < buflim + 32;\nloop invariant i76: buf < buflim + 33;\nloop invariant i77: buf < buflim + 34;\nloop invariant i78: buf < buflim + 35;\nloop invariant i79: buf < buflim + 36;\nloop invariant i80: buf < buflim + 37;\nloop invariant i81: buf < buflim + 38;\nloop invariant i82: buf < buflim + 39;\nloop invariant i83: buf < buflim + 40;\nloop invariant i84: buf < buflim + 41;\nloop invariant i85: buf < buflim + 42;\nloop invariant i86: buf < buflim + 43;\nloop invariant i87: buf < buflim + 44;\nloop invariant i88: buf < buflim + 45;\nloop invariant i89: buf < buflim + 46;\nloop invariant i90: buf < buflim + 47;\nloop invariant i91: buf < buflim + 48;\nloop invariant i92: buf < buflim + 49;\nloop invariant i93: buf < buflim + 50;\nloop invariant i94: buf < buflim + 51;\nloop invariant i95: buf < buflim + 52;\nloop invariant i96: buf < buflim + 53;\nloop invariant i97: buf < buflim + 54;\nloop invariant i98: buf < buflim + 55;\nloop invariant i99: buf < buflim + 56;\nloop invariant i100: buf < buflim + 57;\nloop invariant i101: buf < buflim + 58;\nloop invariant i102: buf < buflim + 59;\nloop invariant i103: buf < buflim + 60;\nloop invariant i104: buf < buflim + 61;\nloop invariant i105: buf < buflim + 62;\nloop invariant i106: buf < buflim + 63;\nloop invariant i107: buf < buflim + 64;\nloop invariant i108: buf < buflim + 65;\nloop invariant i109: buf < buflim + 66;\nloop invariant i110: buf < buflim + 67;\nloop invariant i111: buf < buflim + 68;\nloop invariant i112: buf < buflim + 69;\nloop invariant i113: buf < buflim + 70;\nloop invariant i114: buf < buflim + 71;\nloop invariant i115: buf < buflim + 72;\nloop invariant i116: buf < buflim + 73;\nloop invariant i117: buf < buflim + 74;\nloop invariant i118: buf < buflim + 75;\nloop invariant i119: buf < buflim + 76;\nloop invariant i120: buf < buflim + 77;\nloop invariant i121: buf < buflim + 78;\nloop invariant i122: buf < buflim + 79;\n\n\n\nloop invariant i126: buflim < bufferlen - 1;\nloop invariant i127: 0 <= in <= inlen;loop invariant 0 <= buf <= buflim;loop invariant 0 <= buflim <= bufferlen - 2;loop invariant buf < bufferlen;loop invariant in < inlen;loop invariant buf <= buflim;loop invariant bufferlen - 2 <= buflim;loop invariant bufferlen - 1 <= buf;loop invariant bufferlen <= buf;loop invariant inlen <= in;loop invariant inlen - 1 <= in;loop invariant in <= inlen - 1;loop invariant in <= inlen;loop invariant buflim <= buf;loop invariant buflim <= bufferlen - 2;loop invariant buf <= buflim;loop invariant buflim <= bufferlen - 1;loop invariant bufferlen <= buf;loop invariant buflim <= bufferlen;loop invariant buflim <= bufferlen - 1;loop invariant bufferlen - 1 <= buflim;loop invariant bufferlen <= buflim;loop invariant bufferlen - 1 <= buf;loop invariant bufferlen <= buf;loop invariant buflim <= buflim;loop invariant buflim <= bufferlen - 2;loop invariant bufferlen - 2 <= buflim;loop invariant bufferlen - 1 <= buf;loop invariant bufferlen <= buf;loop invariant buflim <= buflim;loop invariant buflim <= bufferlen - 1;loop invariant bufferlen - 1 <= buflim;loop invariant bufferlen <= buflim;loop invariant bufferlen - 1 <= buf;loop invariant bufferlen <= buf;loop invariant buflim <= buflim;loop invariant buflim <= bufferlen - 1;loop invariant bufferlen - 1 <= buflim;loop invariant bufferlen <= buflim;loop invariant bufferlen - 1 <= buf;loop invariant bufferlen <= buf;loop invariant buflim <= buflim;loop invariant buflim <= bufferlen - 1;loop invariant bufferlen - 1 <= buflim;loop invariant bufferlen <= buflim;loop invariant bufferlen - 1 <= buf;loop invariant bufferlen <= buf;loop invariant buflim <= buflim;loop invariant buflim <= bufferlen - 1;loop invariant bufferlen - 1 <= buflim;loop invariant bufferlen <= buflim;loop invariant bufferlen - 1 <= buf;loop invariant bufferlen <= buf;loop invariant buflim <= buflim;loop invariant buflim <= bufferlen - 1;loop invariant bufferlen - 1 <= buflim;loop invariant bufferlen <= buflim;loop invariant bufferlen - 1 <= buf;loop invariant bufferlen <= buf;loop invariant buflim <= buflim;loop invariant buflim <= bufferlen - 1;loop invariant bufferlen - 1 <= buflim;loop invariant bufferlen <= buflim;loop invariant bufferlen - 1 <= buf;loop invariant bufferlen <= buf;loop invariant buflim <= buflim;loop invariant buflim <= bufferlen - 1;loop invariant bufferlen - 1 <= buflim;loop invariant bufferlen <= buflim;loop invariant bufferlen - 1 <= buf;loop invariant bufferlen <= buf;loop invariant buflim <= buflim;loop invariant buflim <= bufferlen - 1;loop invariant bufferlen - 1 <= buflim;loop invariant bufferlen <= buflim;loop invariant bufferlen - 1 <= buf;loop invariant bufferlen <= buf;loop invariant buflim <= buflim;loop invariant buflim <= bufferlen - 1;loop invariant bufferlen - 1 <= buflim;loop invariant bufferlen <= buflim;loop invariant bufferlen - 1 <= buf;loop invariant bufferlen <= buf;loop invariant buflim <= buflim;loop invariant buflim <= bufferlen - 1;loop invariant bufferlen - 1 <= buflim;loop invariant bufferlen <= buflim;loop invariant bufferlen - 1 <= buf;loop invariant bufferlen <= buf;loop invariant buflim <= buflim;loop invariant buflim <= bufferlen - 1;loop invariant bufferlen - 1 <= buflim;loop invariant bufferlen <= buflim;loop invariant bufferlen - 1 <= buf;loop invariant bufferlen <= buf;loop invariant buflim <= buflim;loop invariant buflim <= bufferlen - 1;loop invariant bufferlen - 1 <= buflim;loop invariant bufferlen <= buflim;loop invariant bufferlen - 1 <= buf;loop invariant bufferlen <= buf;\n*/\nwhile (unknown_int())\n  {\n    if (buf == buflim)\n      break;\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n \n    buf++;\nout:\n    in++;\n    {;\n//@ assert(0<=in);\n}\n\n    {;\n//@ assert(in<inlen);\n}\n\n  }\n\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n\n    buf++;\n\n  {;\n//@ assert(0<=buf);\n}\n\n  {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n END:  return 0;\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/split.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c"
        ],
        "skipped": [],
        "total": 44,
        "success_count": 39,
        "failure_count": 5,
        "success_rate": 0.8863636363636364
    }
}