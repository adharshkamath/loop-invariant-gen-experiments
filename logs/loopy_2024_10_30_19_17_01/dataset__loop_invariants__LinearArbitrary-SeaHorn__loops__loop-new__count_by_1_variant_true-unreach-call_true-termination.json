{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\n\nint main() {\n    int i;\n    for (i = 0; i != LARGE_INT; i++) {\n\t{;\n//@ assert(i <= LARGE_INT);\n}\n\n    }\n    return 0;\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= i;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant i <= LARGE_INT ==> i < LARGE_INT;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i < LARGE_INT;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant i == 0 ==> i == 0;\nloop invariant i != 0 ==> i == (LARGE_INT - 1);\nloop invariant i == 0 ==> i < LARGE_INT;\nloop invariant i != 0 ==> i <= LARGE_INT;\nloop invariant i == 0 ==> i == 0;\nloop invariant i != 0 ==> i == (LARGE_INT - 1);\nloop invariant i == 0 ==> i == 0;\nloop invariant i != 0 ==> i == (LARGE_INT - 1);\nloop invariant i == 0 ==> i == 0;\nloop invariant i != 0 ==> i == (LARGE_INT - 1);\nloop invariant i == 0 ==> i == 0;\nloop invariant i != 0 ==> i == (LARGE_INT - 1);\nloop invariant i == 0 ==> i == 0;\nloop invariant i != 0 ==> i == (LARGE_INT - 1);\nloop invariant i == 0 ==> i == 0;\nloop invariant i != 0 ==> i == (LARGE_INT - 1);\nloop invariant i == 0 ==> i == 0;\nloop invariant i != 0 ==> i == (LARGE_INT - 1);\nloop invariant i == 0 ==> i == 0;\nloop invariant i != 0 ==> i == (LARGE_INT - 1);\nloop invariant i == 0 ==> i == 0;\nloop invariant i != 0 ==> i == (LARGE_INT - 1);\nloop invariant i == 0 ==> i == 0;\nloop invariant i != 0 ==> i == (LARGE_INT - 1);\nloop invariant i == 0 ==> i == 0;\nloop invariant i != 0 ==> i == (LARGE_INT - 1);\nloop invariant i == 0 ==> i == 0;\nloop invariant i != 0 ==> i == (LARGE_INT - 1);\nloop invariant i == 0 ==> i == 0;\nloop invariant i != 0 ==> i == (LARGE_INT - 1);\nloop invariant i == 0 ==> i == 0;\nloop invariant i != 0 ==> i == (LARGE_INT - 1);\nloop invariant i == 0 ==> i == 0;\nloop invariant i != 0 ==> i == (LARGE_INT - 1);\nloop invariant i == 0 ==> i == 0;\nloop invariant i != 0 ==> i == (LARGE_INT - 1);\nloop invariant i == 0 ==> i == 0;\nloop invariant i != 0 ==> i == (LARGE_INT - 1);\nloop invariant i == 0 ==> i == 0;\nloop invariant i != 0 ==> i == (LARGE_INT - 1);\nloop invariant i == 0 ==> i == 0;\nloop invariant i != 0 ==> i == (LARGE_INT - 1);\nloop invariant i == 0 ==> i == 0;\nloop invariant i != 0 ==> i == (LARGE_INT - 1);\nloop invariant i == 0 ==> i == 0;\nloop invariant i != 0 ==> i == (LARGE_INT - 1);\nloop invariant i == 0 ==> i == 0;\nloop invariant i != 0 ==> i == (LARGE_INT - 1);\nloop invariant i == 0 ==> i == 0;\nloop invariant i != 0 ==> i == (LARGE_INT - 1);\nloop invariant i == 0 ==> i == 0;\nloop invariant i != 0 ==> i == (LARGE_INT - 1);\nloop invariant i == 0 ==> i == 0;\nloop invariant i != 0 ==> i == (LARGE_INT - 1);\nloop invariant i == 0 ==> i == 0;\nloop invariant i != 0 ==> i == (LARGE_INT - 1);\nloop invariant i == 0 ==> i == 0;\nloop invariant i != 0 ==> i == (LARGE_INT - 1);\nloop invariant i == 0 ==> i == 0;\nloop invariant i != 0 ==> i == (LARGE_INT - 1);\nloop invariant i == 0 ==> i == 0;\nloop invariant i != 0 ==> i == (LARGE_INT - 1);\nloop invariant i == 0 ==> i == 0;\nloop invariant i != 0 ==> i == (LARGE_INT - 1);\nloop invariant i == 0 ==> i == 0;\nloop invariant i != 0 ==> i == (LARGE_INT - 1);\nloop invariant i == 0 ==> i == 0;\nloop invariant i != 0 ==> i == (LARGE_INT - 1);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i;\nloop invariant i <= LARGE_INT;\nloop invariant (i + 1) > LARGE_INT ==> i == LARGE_INT - 1;\nloop invariant (i + 1) <= LARGE_INT ==> i < LARGE_INT;\nloop invariant (i + 1) < LARGE_INT ==> i < LARGE_INT - 1;\nloop invariant (i + 1) > LARGE_INT ==> i == LARGE_INT;\nloop invariant (i + 1) <= LARGE_INT ==> i <= LARGE_INT - 1;\nloop invariant (i + 1) < LARGE_INT ==> i <= LARGE_INT - 2;\nloop invariant (i + 1) > LARGE_INT ==> i == LARGE_INT - 1;\nloop invariant (i + 1) <= LARGE_INT ==> i < LARGE_INT;\nloop invariant (i + 1) < LARGE_INT ==> i < LARGE_INT - 1;\nloop invariant (i + 1) > LARGE_INT ==> i == LARGE_INT;\nloop invariant (i + 1) <= LARGE_INT ==> i <= LARGE_INT - 1;\nloop invariant (i + 1) < LARGE_INT ==> i <= LARGE_INT - 2;\nloop invariant (i + 1) > LARGE_INT ==> i == LARGE_INT - 1;\nloop invariant (i + 1) <= LARGE_INT ==> i < LARGE_INT;\nloop invariant (i + 1) < LARGE_INT ==> i < LARGE_INT - 1;\nloop invariant (i + 1) > LARGE_INT ==> i == LARGE_INT;\nloop invariant (i + 1) <= LARGE_INT ==> i <= LARGE_INT - 1;\nloop invariant (i + 1) < LARGE_INT ==> i <= LARGE_INT - 2;\nloop invariant (i + 1) > LARGE_INT ==> i == LARGE_INT - 1;\nloop invariant (i + 1) <= LARGE_INT ==> i < LARGE_INT;\nloop invariant (i + 1) < LARGE_INT ==> i < LARGE_INT - 1;\nloop invariant (i + 1) > LARGE_INT ==> i == LARGE_INT;\nloop invariant (i + 1) <= LARGE_INT ==> i <= LARGE_INT - 1;\nloop invariant (i + 1) < LARGE_INT ==> i <= LARGE_INT - 2;\nloop invariant (i + 1) > LARGE_INT ==> i == LARGE_INT - 1;\nloop invariant (i + 1) <= LARGE_INT ==> i < LARGE_INT;\nloop invariant (i + 1) < LARGE_INT ==> i < LARGE_INT - 1;\nloop invariant (i + 1) > LARGE_INT ==> i == LARGE_INT;\nloop invariant (i + 1) <= LARGE_INT ==> i <= LARGE_INT - 1;\nloop invariant (i + 1) < LARGE_INT ==> i <= LARGE_INT - 2;\nloop invariant (i + 1) > LARGE_INT ==> i == LARGE_INT - 1;\nloop invariant (i + 1) <= LARGE_INT ==> i < LARGE_INT;\nloop invariant (i + 1) < LARGE_INT ==> i < LARGE_INT - 1;\nloop invariant (i + 1) > LARGE_INT ==> i == LARGE_INT;\nloop invariant (i + 1) <= LARGE_INT ==> i <= LARGE_INT - 1;\nloop invariant (i + 1) < LARGE_INT ==> i <= LARGE_INT - 2;\nloop invariant (i + 1) > LARGE_INT ==> i == LARGE_INT - 1;\nloop invariant (i + 1) <= LARGE_INT ==> i < LARGE_INT;\nloop invariant (i + 1) < LARGE_INT ==> i < LARGE_INT - 1;\nloop invariant (i + 1) > LARGE_INT ==> i == LARGE_INT;\nloop invariant (i + 1) <= LARGE_INT ==> i <= LARGE_INT - 1;\nloop invariant (i + 1) < LARGE_INT ==> i <= LARGE_INT - 2;\nloop invariant (i + 1) > LARGE_INT ==> i == LARGE_INT - 1;\nloop invariant (i + 1) <= LARGE_INT ==> i < LARGE_INT;\nloop invariant (i + 1) < LARGE_INT ==> i < LARGE_INT - 1;\nloop invariant (i + 1) > LARGE_INT ==> i == LARGE_INT;\nloop invariant (i + 1) <= LARGE_INT ==> i <= LARGE_INT - 1;\nloop invariant (i + 1) < LARGE_INT ==> i <= LARGE_INT - 2;\nloop invariant (i + 1) > LARGE_INT ==> i == LARGE_INT - 1;\nloop invariant (i + 1) <= LARGE_INT ==> i < LARGE_INT;\nloop invariant (i + 1) < LARGE_INT ==> i < LARGE_INT - 1;\nloop invariant (i + 1) > LARGE_INT ==> i == LARGE_INT;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant i == LARGE_INT;\nloop invariant LARGE_INT == 1000000;\nloop invariant 1000000 == 1000000;\nloop invariant 1000000 <= 1000000;\nloop invariant 1000000 == 1000000;\nloop invariant 1000000 => 1000000;\nloop invariant 1000000 == 1000000;\nloop invariant 1000000 <= 1000000;\nloop invariant 1000000 == 1000000;\nloop invariant 1000000 => 1000000;\nloop invariant 1000000 == 1000000;\nloop invariant 1000000 <= 1000000;\nloop invariant 1000000 == 1000000;\nloop invariant 1000000 => 1000000;\nloop invariant 1000000 == 1000000;\nloop invariant 1000000 <= 1000000;\nloop invariant 1000000 == 1000000;\nloop invariant 1000000 => 1000000;\nloop invariant 1000000 == 1000000;\nloop invariant 1000000 <= 1000000;\nloop invariant 1000000 == 1000000;\nloop invariant 1000000 => 1000000;\nloop invariant 1000000 == 1000000;\nloop invariant 1000000 <= 1000000;\nloop invariant 1000000 == 1000000;\nloop invariant 1000000 => 1000000;\nloop invariant 1000000 == 1000000;\nloop invariant 1000000 <= 1000000;\nloop invariant 1000000 == 1000000;\nloop invariant 1000000 => 1000000;\nloop invariant 1000000 == 1000000;\nloop invariant 1000000 <= 1000000;\nloop invariant 1000000 == 1000000;\nloop invariant 1000000 => 1000000;\nloop invariant 1000000 == 1000000;\nloop invariant 1000000 <= 1000000;\nloop invariant 1000000 == 1000000;\nloop invariant 1000000 => 1000000;\nloop invariant 1000000 == 1000000;\nloop invariant 1000000 <= 1000000;\nloop invariant 1000000 == 1000000;\nloop invariant 1000000 => 1000000;\nloop invariant 1000000 == 1000000;\nloop invariant 1000000 <= 1000000;\nloop invariant 1000000 == 1000000;\nloop invariant 1000000 => 1000000;\nloop invariant 1000000 == 1000000;\nloop invariant 1000000 <= 1000000;\nloop invariant 1000000 == 1000000;\nloop invariant 1000000 => 1000000;\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i;\nloop invariant i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i == LARGE_INT ==> i == LARGE_INT;\nloop invariant i != LARGE_INT ==> i < LARGE_INT;\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant i >= 0;\nloop invariant i <= LARGE_INT;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= LARGE_INT + 1;\nloop invariant i < LARGE_INT ==> i < LARGE_INT;\nloop invariant i == LARGE_INT ==> i == LARGE_INT;\nloop invariant i < LARGE_INT ==> i <= LARGE_INT;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant i <= LARGE_INT ==> i == LARGE_INT;\nloop invariant i <= LARGE_INT ==> i != LARGE_INT;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\n\nint main() {\n    int i;\n    /*@\nloop invariant i1: 0 <= i;\nloop invariant i2: i <= LARGE_INT;\nloop invariant i3: i >= 0;\n\n*/\nfor (i = 0; i != LARGE_INT; i++) {\n\t{;\n//@ assert(i <= LARGE_INT);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant i <= LARGE_INT ==> i < LARGE_INT;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\n\nint main() {\n    int i;\n    /*@\nloop invariant i1: 0 <= i <= LARGE_INT;\n\n*/\nfor (i = 0; i != LARGE_INT; i++) {\n\t{;\n//@ assert(i <= LARGE_INT);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i < LARGE_INT;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\n\nint main() {\n    int i;\n    /*@\n\n*/\nfor (i = 0; i != LARGE_INT; i++) {\n\t{;\n//@ assert(i <= LARGE_INT);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant i == 0 ==> i == 0;\nloop invariant i != 0 ==> i == (LARGE_INT - 1);\nloop invariant i == 0 ==> i < LARGE_INT;\nloop invariant i != 0 ==> i <= LARGE_INT;\nloop invariant i == 0 ==> i == 0;\nloop invariant i != 0 ==> i == (LARGE_INT - 1);\nloop invariant i == 0 ==> i == 0;\nloop invariant i != 0 ==> i == (LARGE_INT - 1);\nloop invariant i == 0 ==> i == 0;\nloop invariant i != 0 ==> i == (LARGE_INT - 1);\nloop invariant i == 0 ==> i == 0;\nloop invariant i != 0 ==> i == (LARGE_INT - 1);\nloop invariant i == 0 ==> i == 0;\nloop invariant i != 0 ==> i == (LARGE_INT - 1);\nloop invariant i == 0 ==> i == 0;\nloop invariant i != 0 ==> i == (LARGE_INT - 1);\nloop invariant i == 0 ==> i == 0;\nloop invariant i != 0 ==> i == (LARGE_INT - 1);\nloop invariant i == 0 ==> i == 0;\nloop invariant i != 0 ==> i == (LARGE_INT - 1);\nloop invariant i == 0 ==> i == 0;\nloop invariant i != 0 ==> i == (LARGE_INT - 1);\nloop invariant i == 0 ==> i == 0;\nloop invariant i != 0 ==> i == (LARGE_INT - 1);\nloop invariant i == 0 ==> i == 0;\nloop invariant i != 0 ==> i == (LARGE_INT - 1);\nloop invariant i == 0 ==> i == 0;\nloop invariant i != 0 ==> i == (LARGE_INT - 1);\nloop invariant i == 0 ==> i == 0;\nloop invariant i != 0 ==> i == (LARGE_INT - 1);\nloop invariant i == 0 ==> i == 0;\nloop invariant i != 0 ==> i == (LARGE_INT - 1);\nloop invariant i == 0 ==> i == 0;\nloop invariant i != 0 ==> i == (LARGE_INT - 1);\nloop invariant i == 0 ==> i == 0;\nloop invariant i != 0 ==> i == (LARGE_INT - 1);\nloop invariant i == 0 ==> i == 0;\nloop invariant i != 0 ==> i == (LARGE_INT - 1);\nloop invariant i == 0 ==> i == 0;\nloop invariant i != 0 ==> i == (LARGE_INT - 1);\nloop invariant i == 0 ==> i == 0;\nloop invariant i != 0 ==> i == (LARGE_INT - 1);\nloop invariant i == 0 ==> i == 0;\nloop invariant i != 0 ==> i == (LARGE_INT - 1);\nloop invariant i == 0 ==> i == 0;\nloop invariant i != 0 ==> i == (LARGE_INT - 1);\nloop invariant i == 0 ==> i == 0;\nloop invariant i != 0 ==> i == (LARGE_INT - 1);\nloop invariant i == 0 ==> i == 0;\nloop invariant i != 0 ==> i == (LARGE_INT - 1);\nloop invariant i == 0 ==> i == 0;\nloop invariant i != 0 ==> i == (LARGE_INT - 1);\nloop invariant i == 0 ==> i == 0;\nloop invariant i != 0 ==> i == (LARGE_INT - 1);\nloop invariant i == 0 ==> i == 0;\nloop invariant i != 0 ==> i == (LARGE_INT - 1);\nloop invariant i == 0 ==> i == 0;\nloop invariant i != 0 ==> i == (LARGE_INT - 1);\nloop invariant i == 0 ==> i == 0;\nloop invariant i != 0 ==> i == (LARGE_INT - 1);\nloop invariant i == 0 ==> i == 0;\nloop invariant i != 0 ==> i == (LARGE_INT - 1);\nloop invariant i == 0 ==> i == 0;\nloop invariant i != 0 ==> i == (LARGE_INT - 1);\nloop invariant i == 0 ==> i == 0;\nloop invariant i != 0 ==> i == (LARGE_INT - 1);\nloop invariant i == 0 ==> i == 0;\nloop invariant i != 0 ==> i == (LARGE_INT - 1);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\n\nint main() {\n    int i;\n    /*@\nloop invariant i1: 0 <= i <= LARGE_INT;\nloop invariant i2: i == 0 ==> i == 0;\n\nloop invariant i4: i == 0 ==> i < LARGE_INT;\nloop invariant i5: i != 0 ==> i <= LARGE_INT;\n*/\nfor (i = 0; i != LARGE_INT; i++) {\n\t{;\n//@ assert(i <= LARGE_INT);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i;\nloop invariant i <= LARGE_INT;\nloop invariant (i + 1) > LARGE_INT ==> i == LARGE_INT - 1;\nloop invariant (i + 1) <= LARGE_INT ==> i < LARGE_INT;\nloop invariant (i + 1) < LARGE_INT ==> i < LARGE_INT - 1;\nloop invariant (i + 1) > LARGE_INT ==> i == LARGE_INT;\nloop invariant (i + 1) <= LARGE_INT ==> i <= LARGE_INT - 1;\nloop invariant (i + 1) < LARGE_INT ==> i <= LARGE_INT - 2;\nloop invariant (i + 1) > LARGE_INT ==> i == LARGE_INT - 1;\nloop invariant (i + 1) <= LARGE_INT ==> i < LARGE_INT;\nloop invariant (i + 1) < LARGE_INT ==> i < LARGE_INT - 1;\nloop invariant (i + 1) > LARGE_INT ==> i == LARGE_INT;\nloop invariant (i + 1) <= LARGE_INT ==> i <= LARGE_INT - 1;\nloop invariant (i + 1) < LARGE_INT ==> i <= LARGE_INT - 2;\nloop invariant (i + 1) > LARGE_INT ==> i == LARGE_INT - 1;\nloop invariant (i + 1) <= LARGE_INT ==> i < LARGE_INT;\nloop invariant (i + 1) < LARGE_INT ==> i < LARGE_INT - 1;\nloop invariant (i + 1) > LARGE_INT ==> i == LARGE_INT;\nloop invariant (i + 1) <= LARGE_INT ==> i <= LARGE_INT - 1;\nloop invariant (i + 1) < LARGE_INT ==> i <= LARGE_INT - 2;\nloop invariant (i + 1) > LARGE_INT ==> i == LARGE_INT - 1;\nloop invariant (i + 1) <= LARGE_INT ==> i < LARGE_INT;\nloop invariant (i + 1) < LARGE_INT ==> i < LARGE_INT - 1;\nloop invariant (i + 1) > LARGE_INT ==> i == LARGE_INT;\nloop invariant (i + 1) <= LARGE_INT ==> i <= LARGE_INT - 1;\nloop invariant (i + 1) < LARGE_INT ==> i <= LARGE_INT - 2;\nloop invariant (i + 1) > LARGE_INT ==> i == LARGE_INT - 1;\nloop invariant (i + 1) <= LARGE_INT ==> i < LARGE_INT;\nloop invariant (i + 1) < LARGE_INT ==> i < LARGE_INT - 1;\nloop invariant (i + 1) > LARGE_INT ==> i == LARGE_INT;\nloop invariant (i + 1) <= LARGE_INT ==> i <= LARGE_INT - 1;\nloop invariant (i + 1) < LARGE_INT ==> i <= LARGE_INT - 2;\nloop invariant (i + 1) > LARGE_INT ==> i == LARGE_INT - 1;\nloop invariant (i + 1) <= LARGE_INT ==> i < LARGE_INT;\nloop invariant (i + 1) < LARGE_INT ==> i < LARGE_INT - 1;\nloop invariant (i + 1) > LARGE_INT ==> i == LARGE_INT;\nloop invariant (i + 1) <= LARGE_INT ==> i <= LARGE_INT - 1;\nloop invariant (i + 1) < LARGE_INT ==> i <= LARGE_INT - 2;\nloop invariant (i + 1) > LARGE_INT ==> i == LARGE_INT - 1;\nloop invariant (i + 1) <= LARGE_INT ==> i < LARGE_INT;\nloop invariant (i + 1) < LARGE_INT ==> i < LARGE_INT - 1;\nloop invariant (i + 1) > LARGE_INT ==> i == LARGE_INT;\nloop invariant (i + 1) <= LARGE_INT ==> i <= LARGE_INT - 1;\nloop invariant (i + 1) < LARGE_INT ==> i <= LARGE_INT - 2;\nloop invariant (i + 1) > LARGE_INT ==> i == LARGE_INT - 1;\nloop invariant (i + 1) <= LARGE_INT ==> i < LARGE_INT;\nloop invariant (i + 1) < LARGE_INT ==> i < LARGE_INT - 1;\nloop invariant (i + 1) > LARGE_INT ==> i == LARGE_INT;\nloop invariant (i + 1) <= LARGE_INT ==> i <= LARGE_INT - 1;\nloop invariant (i + 1) < LARGE_INT ==> i <= LARGE_INT - 2;\nloop invariant (i + 1) > LARGE_INT ==> i == LARGE_INT - 1;\nloop invariant (i + 1) <= LARGE_INT ==> i < LARGE_INT;\nloop invariant (i + 1) < LARGE_INT ==> i < LARGE_INT - 1;\nloop invariant (i + 1) > LARGE_INT ==> i == LARGE_INT;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\n\nint main() {\n    int i;\n    /*@\nloop invariant i1: 0 <= i;\nloop invariant i2: i <= LARGE_INT;\n\nloop invariant i4: (i + 1) <= LARGE_INT ==> i < LARGE_INT;\nloop invariant i5: (i + 1) < LARGE_INT ==> i < LARGE_INT - 1;\nloop invariant i6: (i + 1) > LARGE_INT ==> i == LARGE_INT;\nloop invariant i7: (i + 1) <= LARGE_INT ==> i <= LARGE_INT - 1;\nloop invariant i8: (i + 1) < LARGE_INT ==> i <= LARGE_INT - 2;\n*/\nfor (i = 0; i != LARGE_INT; i++) {\n\t{;\n//@ assert(i <= LARGE_INT);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant i == LARGE_INT;\nloop invariant LARGE_INT == 1000000;\nloop invariant 1000000 == 1000000;\nloop invariant 1000000 <= 1000000;\nloop invariant 1000000 == 1000000;\nloop invariant 1000000 => 1000000;\nloop invariant 1000000 == 1000000;\nloop invariant 1000000 <= 1000000;\nloop invariant 1000000 == 1000000;\nloop invariant 1000000 => 1000000;\nloop invariant 1000000 == 1000000;\nloop invariant 1000000 <= 1000000;\nloop invariant 1000000 == 1000000;\nloop invariant 1000000 => 1000000;\nloop invariant 1000000 == 1000000;\nloop invariant 1000000 <= 1000000;\nloop invariant 1000000 == 1000000;\nloop invariant 1000000 => 1000000;\nloop invariant 1000000 == 1000000;\nloop invariant 1000000 <= 1000000;\nloop invariant 1000000 == 1000000;\nloop invariant 1000000 => 1000000;\nloop invariant 1000000 == 1000000;\nloop invariant 1000000 <= 1000000;\nloop invariant 1000000 == 1000000;\nloop invariant 1000000 => 1000000;\nloop invariant 1000000 == 1000000;\nloop invariant 1000000 <= 1000000;\nloop invariant 1000000 == 1000000;\nloop invariant 1000000 => 1000000;\nloop invariant 1000000 == 1000000;\nloop invariant 1000000 <= 1000000;\nloop invariant 1000000 == 1000000;\nloop invariant 1000000 => 1000000;\nloop invariant 1000000 == 1000000;\nloop invariant 1000000 <= 1000000;\nloop invariant 1000000 == 1000000;\nloop invariant 1000000 => 1000000;\nloop invariant 1000000 == 1000000;\nloop invariant 1000000 <= 1000000;\nloop invariant 1000000 == 1000000;\nloop invariant 1000000 => 1000000;\nloop invariant 1000000 == 1000000;\nloop invariant 1000000 <= 1000000;\nloop invariant 1000000 == 1000000;\nloop invariant 1000000 => 1000000;\nloop invariant 1000000 == 1000000;\nloop invariant 1000000 <= 1000000;\nloop invariant 1000000 == 1000000;\nloop invariant 1000000 => 1000000;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\n\nint main() {\n    int i;\n    /*@\nloop invariant i1: 0 <= i <= LARGE_INT;\n\nloop invariant i3: LARGE_INT == 1000000;\nloop invariant i4: 1000000 == 1000000;\nloop invariant i5: 1000000 <= 1000000;\n\n*/\nfor (i = 0; i != LARGE_INT; i++) {\n\t{;\n//@ assert(i <= LARGE_INT);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\n\nint main() {\n    int i;\n    /*@\n\n*/\nfor (i = 0; i != LARGE_INT; i++) {\n\t{;\n//@ assert(i <= LARGE_INT);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\n\nint main() {\n    int i;\n    /*@\nloop invariant i1: 0 <= i <= LARGE_INT;\n*/\nfor (i = 0; i != LARGE_INT; i++) {\n\t{;\n//@ assert(i <= LARGE_INT);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\n\nint main() {\n    int i;\n    /*@\nloop invariant i1: 0 <= i <= LARGE_INT;\n*/\nfor (i = 0; i != LARGE_INT; i++) {\n\t{;\n//@ assert(i <= LARGE_INT);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\n\nint main() {\n    int i;\n    /*@\nloop invariant i1: 0 <= i <= LARGE_INT;\n*/\nfor (i = 0; i != LARGE_INT; i++) {\n\t{;\n//@ assert(i <= LARGE_INT);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= i;\nloop invariant i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i == LARGE_INT ==> i == LARGE_INT;\nloop invariant i != LARGE_INT ==> i < LARGE_INT;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\n\nint main() {\n    int i;\n    /*@\nloop invariant i1: 0 <= i;\nloop invariant i2: i <= LARGE_INT;\nloop invariant i3: i == LARGE_INT ==> i == LARGE_INT;\nloop invariant i4: i != LARGE_INT ==> i < LARGE_INT;\n*/\nfor (i = 0; i != LARGE_INT; i++) {\n\t{;\n//@ assert(i <= LARGE_INT);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\n\nint main() {\n    int i;\n    /*@\n\n*/\nfor (i = 0; i != LARGE_INT; i++) {\n\t{;\n//@ assert(i <= LARGE_INT);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant i >= 0;\nloop invariant i <= LARGE_INT;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\n\nint main() {\n    int i;\n    /*@\nloop invariant i1: i >= 0;\nloop invariant i2: i <= LARGE_INT;\n*/\nfor (i = 0; i != LARGE_INT; i++) {\n\t{;\n//@ assert(i <= LARGE_INT);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= LARGE_INT + 1;\nloop invariant i < LARGE_INT ==> i < LARGE_INT;\nloop invariant i == LARGE_INT ==> i == LARGE_INT;\nloop invariant i < LARGE_INT ==> i <= LARGE_INT;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\n\nint main() {\n    int i;\n    /*@\nloop invariant i1: 0 <= i <= LARGE_INT + 1;\nloop invariant i2: i < LARGE_INT ==> i < LARGE_INT;\nloop invariant i3: i == LARGE_INT ==> i == LARGE_INT;\nloop invariant i4: i < LARGE_INT ==> i <= LARGE_INT;\n*/\nfor (i = 0; i != LARGE_INT; i++) {\n\t{;\n//@ assert(i <= LARGE_INT);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant i <= LARGE_INT ==> i == LARGE_INT;\nloop invariant i <= LARGE_INT ==> i != LARGE_INT;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\n\nint main() {\n    int i;\n    /*@\nloop invariant i1: 0 <= i <= LARGE_INT;\n\n\n*/\nfor (i = 0; i != LARGE_INT; i++) {\n\t{;\n//@ assert(i <= LARGE_INT);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": true
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 33: Assignment operators not allowed in annotations.",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\n\nint main() {\n    int i;\n    /*@\nloop invariant i1: 0 <= i;\nloop invariant i2: i <= LARGE_INT;\nloop invariant i3: i >= 0;\nloop invariant i4: i < LARGE_INT;\nloop invariant i5: 0 <= i <= LARGE_INT;\nloop invariant i6: i <= LARGE_INT ==> i < LARGE_INT;\nloop invariant i7: 0 <= i < LARGE_INT;\nloop invariant i8: i == 0 ==> i == 0;\nloop invariant i9: i != 0 ==> i == (LARGE_INT - 1);\nloop invariant i10: i == 0 ==> i < LARGE_INT;\nloop invariant i11: i != 0 ==> i <= LARGE_INT;\nloop invariant i12: (i + 1) > LARGE_INT ==> i == LARGE_INT - 1;\nloop invariant i13: (i + 1) <= LARGE_INT ==> i < LARGE_INT;\nloop invariant i14: (i + 1) < LARGE_INT ==> i < LARGE_INT - 1;\nloop invariant i15: (i + 1) > LARGE_INT ==> i == LARGE_INT;\nloop invariant i16: (i + 1) <= LARGE_INT ==> i <= LARGE_INT - 1;\nloop invariant i17: (i + 1) < LARGE_INT ==> i <= LARGE_INT - 2;\nloop invariant i18: i == LARGE_INT;\nloop invariant i19: LARGE_INT == 1000000;\nloop invariant i20: 1000000 == 1000000;\nloop invariant i21: 1000000 <= 1000000;\nloop invariant i22: 1000000 => 1000000;\nloop invariant i23: i == LARGE_INT ==> i == LARGE_INT;\nloop invariant i24: i != LARGE_INT ==> i < LARGE_INT;\nloop invariant i25: 0 <= i <= LARGE_INT + 1;\nloop invariant i26: i < LARGE_INT ==> i < LARGE_INT;\nloop invariant i27: i < LARGE_INT ==> i <= LARGE_INT;\nloop invariant i28: i <= LARGE_INT ==> i == LARGE_INT;\nloop invariant i29: i <= LARGE_INT ==> i != LARGE_INT;\n*/\nfor (i = 0; i != LARGE_INT; i++) {\n\t{;\n//@ assert(i <= LARGE_INT);\n}\n\n    }\n    return 0;\n}",
        "combined_annotation_num_solver_calls": 9,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\n\nint main() {\n    int i;\n    /*@\nloop invariant i1: 0 <= i;\nloop invariant i2: i <= LARGE_INT;\nloop invariant i3: i >= 0;\n\nloop invariant i5: 0 <= i <= LARGE_INT;\n\n\nloop invariant i8: i == 0 ==> i == 0;\n\nloop invariant i10: i == 0 ==> i < LARGE_INT;\nloop invariant i11: i != 0 ==> i <= LARGE_INT;\n\nloop invariant i13: (i + 1) <= LARGE_INT ==> i < LARGE_INT;\nloop invariant i14: (i + 1) < LARGE_INT ==> i < LARGE_INT - 1;\nloop invariant i15: (i + 1) > LARGE_INT ==> i == LARGE_INT;\nloop invariant i16: (i + 1) <= LARGE_INT ==> i <= LARGE_INT - 1;\nloop invariant i17: (i + 1) < LARGE_INT ==> i <= LARGE_INT - 2;\n\nloop invariant i19: LARGE_INT == 1000000;\nloop invariant i20: 1000000 == 1000000;\nloop invariant i21: 1000000 <= 1000000;\n\nloop invariant i23: i == LARGE_INT ==> i == LARGE_INT;\nloop invariant i24: i != LARGE_INT ==> i < LARGE_INT;\nloop invariant i25: 0 <= i <= LARGE_INT + 1;\nloop invariant i26: i < LARGE_INT ==> i < LARGE_INT;\nloop invariant i27: i < LARGE_INT ==> i <= LARGE_INT;\n\n\n*/\nfor (i = 0; i != LARGE_INT; i++) {\n\t{;\n//@ assert(i <= LARGE_INT);\n}\n\n    }\n    return 0;\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/split.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c"
        ],
        "skipped": [],
        "total": 56,
        "success_count": 47,
        "failure_count": 9,
        "success_rate": 0.8392857142857143
    }
}