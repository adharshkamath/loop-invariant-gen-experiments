{
    "logs": {
        "file": "../dataset/loop_invariants/accelerating_invariant_generation/crafted/phases_safe1.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n\n  while (x < 0x0fffffff) {\n    if (x < 0xfff0) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= x <= 0x0fffffff;\nloop invariant x % 2 == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 0x0fffffff;\nloop invariant x < 0xfff0 ==> x % 2 == 1;\nloop invariant x >= 0xfff0 ==> x % 2 == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x < 0x0fffffff;\nloop invariant (x % 2) == 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 0x0fffffff;\nloop invariant (x % 2) == 0;\nloop invariant x >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 0x0fffffff;\nloop invariant (x % 2) == 0;\nloop invariant (x < 0xfff0) ==> (x % 2 == 1);\nloop invariant (x >= 0xfff0) ==> (x % 2 == 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 0x0fffffff;\nloop invariant x % 2 == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 0x0fffffff;\nloop invariant (x % 2) == 0 ==> (x < 0xfff0) ==> (x + 1) >= 0xfff0;\nloop invariant (x % 2) == 0 ==> (x >= 0xfff0) ==> (x + 2) <= 0x0fffffff;\nloop invariant (x % 2) == 1 ==> (x < 0xfff0) ==> (x + 1) <= 0xfff0;\nloop invariant (x % 2) == 1 ==> (x >= 0xfff0) ==> (x + 2) >= 0x0fffffff;\n*/\n```",
            "```\n/*@\nloop invariant x >= 0;\nloop invariant x <= 0x0fffffff;\nloop invariant ((x % 2) == 0 ==> x >= 0x0fffffff);\nloop invariant ((x % 2) == 0 ==> x <= 0x0fffffff);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 0x0fffffff;\nloop invariant x >= 0;\nloop invariant x % 2 == 0;\nloop invariant 0 <= x <= 0x0fffffff;\nloop invariant x >= 0;\nloop invariant x % 2 == 0;\n*/\n```",
            "```\n/*@\nloop invariant x >= 0;\nloop invariant x <= 0x0fffffff;\nloop invariant x % 2 == 0 ==> x >= 2;\nloop invariant x % 2 == 0 ==> x <= 0x0fffffff - 1;\nloop invariant x % 2 == 1 ==> x >= 1;\nloop invariant x % 2 == 1 ==> x <= 0x0fffffff - 2;\nloop invariant x % 2 == 0 ==> x < 0xfff0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x < 0xfff0 ==> x <= 0xfff1;\nloop invariant x % 2 == 0 ==> x < 0xfff0 ==> x >= 2;\nloop invariant x % 2 == 0 ==> x < 0xfff0 ==> x <= 0x0fffffff - 1;\nloop invariant x % 2 == 0 ==> x >= 0xfff0 ==> x >= 0xfff0;\nloop invariant x % 2 == 0 ==> x >= 0xfff0 ==> x <= 0x0fffffff;\nloop invariant x % 2 == 1 ==> x >= 1 ==> x >= 1;\nloop invariant x % 2 == 1 ==> x >= 1 ==> x <= 0x0fffffff - 2;\nloop invariant x % 2 == 1 ==> x >= 1 ==> x >= 2;\nloop invariant x % 2 == 1 ==> x >= 1 ==> x <= 0x0fffffff - 1;\nloop invariant x % 2 == 1 ==> x >= 1 ==> x >= 2;\nloop invariant x % 2 == 1 ==> x >= 1 ==> x <= 0x0fffffff - 1;\nloop invariant x % 2 == 1 ==> x >= 1 ==> x >= 2;\nloop invariant x % 2 == 1 ==> x >= 1 ==> x <= 0x0fffffff - 1;\nloop invariant x % 2 == 1 ==> x >= 1 ==> x >= 2;\nloop invariant x % 2 == 1 ==> x >= 1 ==> x <= 0x0fffffff - 1;\nloop invariant x % 2 == 1 ==> x >= 1 ==> x >= 2;\nloop invariant x % 2 == 1 ==> x >= 1 ==> x <= 0x0fffffff - 1;\nloop invariant x % 2 == 1 ==> x >= 1 ==> x >= 2;\nloop invariant x % 2 == 1 ==> x >= 1 ==> x <= 0x0fffffff - 1;\nloop invariant x % 2 == 1 ==> x >= 1 ==> x >= 2;\nloop invariant x % 2 == 1 ==> x >= 1 ==> x <= 0x0fffffff - 1;\nloop invariant x % 2 == 1 ==> x >= 1 ==> x >= 2;\nloop invariant x % 2 == 1 ==> x >= 1 ==> x <= 0x0fffffff - 1;\nloop invariant x % 2 == 1 ==> x >= 1 ==> x >= 2;\nloop invariant x % 2 == 1 ==> x >= 1 ==> x <= 0x0fffffff - 1;\nloop invariant x % 2 == 1 ==> x >= 1 ==> x >= 2;\nloop invariant x % 2 == 1 ==> x >= 1 ==> x <= 0x0fffffff - 1;\nloop invariant x % 2 == 1 ==> x >= 1 ==> x >= 2;\nloop invariant x % 2 == 1 ==> x >= 1 ==> x <= 0x0fffffff - 1;\nloop invariant x % 2 == 1 ==> x >= 1 ==> x >= 2;\nloop invariant x % 2 == 1 ==> x >= 1 ==> x <= 0x0fffffff - 1;\nloop invariant x % 2 == 1 ==> x >= 1 ==> x >= 2;\nloop invariant x % 2 == 1 ==> x >= 1 ==> x <= 0x0fffffff - 1;\nloop invariant x % 2 == 1 ==> x >= 1 ==> x >= 2;\nloop invariant x % 2 == 1 ==> x >= 1 ==> x <= 0x0fffffff - 1;\nloop invariant x % 2 == 1 ==> x >= 1 ==> x >= 2;\nloop invariant x % 2 == 1 ==> x >= 1 ==> x <= 0x0fffffff - 1;\nloop invariant x % 2 == 1 ==> x >= 1 ==> x >= 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 0x0fffffff;\nloop invariant x % 2 == 0;\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 0x0fffffff;\nloop invariant (x >= 0xfff0 ==> (x - 0xfff0) % 2 == 0);\nloop invariant (x < 0xfff0 ==> (x % 2) == 1);\nloop invariant (x >= 0xfff0 ==> (x % 2) == 0);\nloop invariant (x < 0xfff0 ==> (x - 1) % 2 == 1);\nloop invariant (x >= 0xfff0 ==> (x - 2) % 2 == 0);\nloop invariant (x < 0xfff0 ==> (x - 1) % 2 == 0);\nloop invariant (x >= 0xfff0 ==> (x - 2) % 2 == 1);\nloop invariant (x < 0xfff0 ==> (x - 1) % 2 == 1);\nloop invariant (x >= 0xfff0 ==> (x - 3) % 2 == 1);\nloop invariant (x < 0xfff0 ==> (x - 2) % 2 == 1);\nloop invariant (x >= 0xfff0 ==> (x - 4) % 2 == 1);\nloop invariant (x < 0xfff0 ==> (x - 3) % 2 == 1);\nloop invariant (x >= 0xfff0 ==> (x - 5) % 2 == 1);\nloop invariant (x < 0xfff0 ==> (x - 4) % 2 == 1);\nloop invariant (x >= 0xfff0 ==> (x - 6) % 2 == 1);\nloop invariant (x < 0xfff0 ==> (x - 5) % 2 == 1);\nloop invariant (x >= 0xfff0 ==> (x - 7) % 2 == 1);\nloop invariant (x < 0xfff0 ==> (x - 6) % 2 == 1);\nloop invariant (x >= 0xfff0 ==> (x - 8) % 2 == 1);\nloop invariant (x < 0xfff0 ==> (x - 7) % 2 == 1);\nloop invariant (x >= 0xfff0 ==> (x - 9) % 2 == 1);\nloop invariant (x < 0xfff0 ==> (x - 8) % 2 == 1);\nloop invariant (x >= 0xfff0 ==> (x - 10) % 2 == 1);\nloop invariant (x < 0xfff0 ==> (x - 9) % 2 == 1);\nloop invariant (x >= 0xfff0 ==> (x - 11) % 2 == 1);\nloop invariant (x < 0xfff0 ==> (x - 10) % 2 == 1);\nloop invariant (x >= 0xfff0 ==> (x - 12) % 2 == 1);\nloop invariant (x < 0xfff0 ==> (x - 11) % 2 == 1);\nloop invariant (x >= 0xfff0 ==> (x - 13) % 2 == 1);\nloop invariant (x < 0xfff0 ==> (x - 12) % 2 == 1);\nloop invariant (x >= 0xfff0 ==> (x - 14) % 2 == 1);\nloop invariant (x < 0xfff0 ==> (x - 13) % 2 == 1);\nloop invariant (x >= 0xfff0 ==> (x - 15) % 2 == 1);\nloop invariant (x < 0xfff0 ==> (x - 14) % 2 == 1);\nloop invariant (x >= 0xfff0 ==> (x - 16) % 2 == 1);\nloop invariant (x < 0xfff0 ==> (x - 15) % 2 == 1);\nloop invariant (x >= 0xfff0 ==> (x - 17) % 2 == 1);\nloop invariant (x < 0xfff0 ==> (x - 16) % 2 == 1);\nloop invariant (x >= 0xfff0 ==> (x - 18) % 2 == 1);\nloop invariant (x < 0xfff0 ==> (x - 17) % 2 == 1);\nloop invariant (x >= 0xfff0 ==> (x - 19) % 2 == 1);\nloop invariant (x < 0xfff0 ==> (x - 18) % 2 == 1);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 0x0fffffff;\nloop invariant (x % 2) == 0;\nloop invariant (x < 0xfff0) ==> (x == 0);\nloop invariant (x >= 0xfff0) ==> (x == 2);\nloop invariant (x < 0xfff0) ==> (x + 1 == 0xfff0);\nloop invariant (x >= 0xfff0) ==> (x + 2 == 0x0fffffff);\nloop invariant (x % 2) == 0 ==> (x + 2 == x + 1);\nloop invariant (x % 2) == 1 ==> (x + 1 == x + 2);\nloop invariant (x + 1) % 2 == 0 ==> (x + 1 == x);\nloop invariant (x + 2) % 2 == 0 ==> (x + 2 == x);\nloop invariant (x + 1) % 2 == 1 ==> (x + 1 == x + 1);\nloop invariant (x + 2) % 2 == 1 ==> (x + 2 == x + 1);\nloop invariant (x + 3) % 2 == 1 ==> (x + 3 == x + 2);\nloop invariant (x + 3) % 2 == 0 ==> (x + 3 == x + 3);\nloop invariant (x + 4) % 2 == 0 ==> (x + 4 == x + 2);\nloop invariant (x + 4) % 2 == 1 ==> (x + 4 == x + 3);\nloop invariant (x + 5) % 2 == 1 ==> (x + 5 == x + 4);\nloop invariant (x + 5) % 2 == 0 ==> (x + 5 == x + 5);\nloop invariant (x + 6) % 2 == 0 ==> (x + 6 == x + 4);\nloop invariant (x + 6) % 2 == 1 ==> (x + 6 == x + 5);\nloop invariant (x + 7) % 2 == 1 ==> (x + 7 == x + 6);\nloop invariant (x + 7) % 2 == 0 ==> (x + 7 == x + 7);\nloop invariant (x + 8) % 2 == 0 ==> (x + 8 == x + 6);\nloop invariant (x + 8) % 2 == 1 ==> (x + 8 == x + 7);\nloop invariant (x + 9) % 2 == 1 ==> (x + 9 == x + 8);\nloop invariant (x + 9) % 2 == 0 ==> (x + 9 == x + 9);\nloop invariant (x + 10) % 2 == 0 ==> (x + 10 == x + 8);\nloop invariant (x + 10) % 2 == 1 ==> (x + 10 == x + 9);\nloop invariant (x + 11) % 2 == 1 ==> (x + 11 == x + 10);\nloop invariant (x + 11) % 2 == 0 ==> (x + 11 == x + 11);\nloop invariant (x + 12) % 2 == 0 ==> (x + 12 == x + 10);\nloop invariant (x + 12) % 2 == 1 ==> (x + 12 == x + 11);\nloop invariant (x + 13) % 2 == 1 ==> (x + 13 == x + 12);\nloop invariant (x + 13) % 2 == 0 ==> (x + 13 == x + 13);\nloop invariant (x + 14) % 2 == 0 ==> (x + 14 == x + 12);\nloop invariant (x + 14) % 2 == 1 ==> (x + 14 == x + 13);\nloop invariant (x + 15) % 2 == 1 ==> (x + 15 == x + 14);\nloop invariant (x + 15) % 2 == 0 ==> (x + 15 == x + 15);\nloop invariant (x + 16) % 2 == 0 ==> (x + 16 == x + 14);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 0x0fffffff;\nloop invariant x % 2 == 0 ==> x < 0xfff0;\nloop invariant x >= 0xfff0 ==> x % 2 == 0;\nloop invariant x % 2 == 0 ==> x % 4 == 0;\nloop invariant x % 4 == 0 ==> x % 8 == 0;\nloop invariant x % 8 == 0 ==> x % 16 == 0;\nloop invariant x % 16 == 0 ==> x % 32 == 0;\nloop invariant x % 32 == 0 ==> x % 64 == 0;\nloop invariant x % 64 == 0 ==> x % 128 == 0;\nloop invariant x % 128 == 0 ==> x % 256 == 0;\nloop invariant x % 256 == 0 ==> x % 512 == 0;\nloop invariant x % 512 == 0 ==> x % 1024 == 0;\nloop invariant x % 1024 == 0 ==> x % 2048 == 0;\nloop invariant x % 2048 == 0 ==> x % 4096 == 0;\nloop invariant x % 4096 == 0 ==> x % 8192 == 0;\nloop invariant x % 8192 == 0 ==> x % 16384 == 0;\nloop invariant x % 16384 == 0 ==> x % 32768 == 0;\nloop invariant x % 32768 == 0 ==> x % 65536 == 0;\nloop invariant x % 65536 == 0 ==> x % 131072 == 0;\nloop invariant x % 131072 == 0 ==> x % 262144 == 0;\nloop invariant x % 262144 == 0 ==> x % 524288 == 0;\nloop invariant x % 524288 == 0 ==> x % 1048576 == 0;\nloop invariant x % 1048576 == 0 ==> x % 2097152 == 0;\nloop invariant x % 2097152 == 0 ==> x % 4194304 == 0;\nloop invariant x % 4194304 == 0 ==> x % 8388608 == 0;\nloop invariant x % 8388608 == 0 ==> x % 16777216 == 0;\nloop invariant x % 16777216 == 0 ==> x % 33554432 == 0;\nloop invariant x % 33554432 == 0 ==> x % 67108864 == 0;\nloop invariant x % 67108864 == 0 ==> x % 134217728 == 0;\nloop invariant x % 134217728 == 0 ==> x % 268435456 == 0;\nloop invariant x % 268435456 == 0 ==> x % 536870912 == 0;\nloop invariant x % 536870912 == 0 ==> x % 1073741824 == 0;\nloop invariant x % 2 == 0;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 0x0fffffff;\nloop invariant x % 2 == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n\n  /*@\n\n\n*/\nwhile (x < 0x0fffffff) {\n    if (x < 0xfff0) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 0x0fffffff;\nloop invariant x < 0xfff0 ==> x % 2 == 1;\nloop invariant x >= 0xfff0 ==> x % 2 == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n\n  /*@\n\n\nloop invariant i3: x >= 0xfff0 ==> x % 2 == 0;\n*/\nwhile (x < 0x0fffffff) {\n    if (x < 0xfff0) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x < 0x0fffffff;\nloop invariant (x % 2) == 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n\n  /*@\n\n\n*/\nwhile (x < 0x0fffffff) {\n    if (x < 0xfff0) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 0x0fffffff;\nloop invariant (x % 2) == 0;\nloop invariant x >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n\n  /*@\n\n\nloop invariant i3: x >= 0;\n*/\nwhile (x < 0x0fffffff) {\n    if (x < 0xfff0) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 0x0fffffff;\nloop invariant (x % 2) == 0;\nloop invariant (x < 0xfff0) ==> (x % 2 == 1);\nloop invariant (x >= 0xfff0) ==> (x % 2 == 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n\n  /*@\n\n\n\nloop invariant i4: (x >= 0xfff0) ==> (x % 2 == 0);\n*/\nwhile (x < 0x0fffffff) {\n    if (x < 0xfff0) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 0x0fffffff;\nloop invariant x % 2 == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n\n  /*@\n\n\n*/\nwhile (x < 0x0fffffff) {\n    if (x < 0xfff0) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 0x0fffffff;\nloop invariant (x % 2) == 0 ==> (x < 0xfff0) ==> (x + 1) >= 0xfff0;\nloop invariant (x % 2) == 0 ==> (x >= 0xfff0) ==> (x + 2) <= 0x0fffffff;\nloop invariant (x % 2) == 1 ==> (x < 0xfff0) ==> (x + 1) <= 0xfff0;\nloop invariant (x % 2) == 1 ==> (x >= 0xfff0) ==> (x + 2) >= 0x0fffffff;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n\n  /*@\n\n\n\nloop invariant i4: (x % 2) == 1 ==> (x < 0xfff0) ==> (x + 1) <= 0xfff0;\nloop invariant i5: (x % 2) == 1 ==> (x >= 0xfff0) ==> (x + 2) >= 0x0fffffff;\n*/\nwhile (x < 0x0fffffff) {\n    if (x < 0xfff0) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant x >= 0;\nloop invariant x <= 0x0fffffff;\nloop invariant ((x % 2) == 0 ==> x >= 0x0fffffff);\nloop invariant ((x % 2) == 0 ==> x <= 0x0fffffff);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n\n  /*@\nloop invariant i1: x >= 0;\n\n\n\n*/\nwhile (x < 0x0fffffff) {\n    if (x < 0xfff0) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 0x0fffffff;\nloop invariant x >= 0;\nloop invariant x % 2 == 0;\nloop invariant 0 <= x <= 0x0fffffff;\nloop invariant x >= 0;\nloop invariant x % 2 == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n\n  /*@\n\nloop invariant i2: x >= 0;\n\n*/\nwhile (x < 0x0fffffff) {\n    if (x < 0xfff0) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant x >= 0;\nloop invariant x <= 0x0fffffff;\nloop invariant x % 2 == 0 ==> x >= 2;\nloop invariant x % 2 == 0 ==> x <= 0x0fffffff - 1;\nloop invariant x % 2 == 1 ==> x >= 1;\nloop invariant x % 2 == 1 ==> x <= 0x0fffffff - 2;\nloop invariant x % 2 == 0 ==> x < 0xfff0 ==> x >= 0;\nloop invariant x % 2 == 0 ==> x < 0xfff0 ==> x <= 0xfff1;\nloop invariant x % 2 == 0 ==> x < 0xfff0 ==> x >= 2;\nloop invariant x % 2 == 0 ==> x < 0xfff0 ==> x <= 0x0fffffff - 1;\nloop invariant x % 2 == 0 ==> x >= 0xfff0 ==> x >= 0xfff0;\nloop invariant x % 2 == 0 ==> x >= 0xfff0 ==> x <= 0x0fffffff;\nloop invariant x % 2 == 1 ==> x >= 1 ==> x >= 1;\nloop invariant x % 2 == 1 ==> x >= 1 ==> x <= 0x0fffffff - 2;\nloop invariant x % 2 == 1 ==> x >= 1 ==> x >= 2;\nloop invariant x % 2 == 1 ==> x >= 1 ==> x <= 0x0fffffff - 1;\nloop invariant x % 2 == 1 ==> x >= 1 ==> x >= 2;\nloop invariant x % 2 == 1 ==> x >= 1 ==> x <= 0x0fffffff - 1;\nloop invariant x % 2 == 1 ==> x >= 1 ==> x >= 2;\nloop invariant x % 2 == 1 ==> x >= 1 ==> x <= 0x0fffffff - 1;\nloop invariant x % 2 == 1 ==> x >= 1 ==> x >= 2;\nloop invariant x % 2 == 1 ==> x >= 1 ==> x <= 0x0fffffff - 1;\nloop invariant x % 2 == 1 ==> x >= 1 ==> x >= 2;\nloop invariant x % 2 == 1 ==> x >= 1 ==> x <= 0x0fffffff - 1;\nloop invariant x % 2 == 1 ==> x >= 1 ==> x >= 2;\nloop invariant x % 2 == 1 ==> x >= 1 ==> x <= 0x0fffffff - 1;\nloop invariant x % 2 == 1 ==> x >= 1 ==> x >= 2;\nloop invariant x % 2 == 1 ==> x >= 1 ==> x <= 0x0fffffff - 1;\nloop invariant x % 2 == 1 ==> x >= 1 ==> x >= 2;\nloop invariant x % 2 == 1 ==> x >= 1 ==> x <= 0x0fffffff - 1;\nloop invariant x % 2 == 1 ==> x >= 1 ==> x >= 2;\nloop invariant x % 2 == 1 ==> x >= 1 ==> x <= 0x0fffffff - 1;\nloop invariant x % 2 == 1 ==> x >= 1 ==> x >= 2;\nloop invariant x % 2 == 1 ==> x >= 1 ==> x <= 0x0fffffff - 1;\nloop invariant x % 2 == 1 ==> x >= 1 ==> x >= 2;\nloop invariant x % 2 == 1 ==> x >= 1 ==> x <= 0x0fffffff - 1;\nloop invariant x % 2 == 1 ==> x >= 1 ==> x >= 2;\nloop invariant x % 2 == 1 ==> x >= 1 ==> x <= 0x0fffffff - 1;\nloop invariant x % 2 == 1 ==> x >= 1 ==> x >= 2;\nloop invariant x % 2 == 1 ==> x >= 1 ==> x <= 0x0fffffff - 1;\nloop invariant x % 2 == 1 ==> x >= 1 ==> x >= 2;\nloop invariant x % 2 == 1 ==> x >= 1 ==> x <= 0x0fffffff - 1;\nloop invariant x % 2 == 1 ==> x >= 1 ==> x >= 2;\nloop invariant x % 2 == 1 ==> x >= 1 ==> x <= 0x0fffffff - 1;\nloop invariant x % 2 == 1 ==> x >= 1 ==> x >= 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n\n  /*@\nloop invariant i1: x >= 0;\n\n\n\nloop invariant i5: x % 2 == 1 ==> x >= 1;\n\nloop invariant i7: x % 2 == 0 ==> x < 0xfff0 ==> x >= 0;\nloop invariant i8: x % 2 == 0 ==> x < 0xfff0 ==> x <= 0xfff1;\n\nloop invariant i10: x % 2 == 0 ==> x < 0xfff0 ==> x <= 0x0fffffff - 1;\nloop invariant i11: x % 2 == 0 ==> x >= 0xfff0 ==> x >= 0xfff0;\n\nloop invariant i13: x % 2 == 1 ==> x >= 1 ==> x >= 1;\n\n\n\n*/\nwhile (x < 0x0fffffff) {\n    if (x < 0xfff0) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 0x0fffffff;\nloop invariant x % 2 == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n\n  /*@\n\n\n*/\nwhile (x < 0x0fffffff) {\n    if (x < 0xfff0) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n\n  /*@\n\n*/\nwhile (x < 0x0fffffff) {\n    if (x < 0xfff0) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 30,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 0x0fffffff;\nloop invariant (x >= 0xfff0 ==> (x - 0xfff0) % 2 == 0);\nloop invariant (x < 0xfff0 ==> (x % 2) == 1);\nloop invariant (x >= 0xfff0 ==> (x % 2) == 0);\nloop invariant (x < 0xfff0 ==> (x - 1) % 2 == 1);\nloop invariant (x >= 0xfff0 ==> (x - 2) % 2 == 0);\nloop invariant (x < 0xfff0 ==> (x - 1) % 2 == 0);\nloop invariant (x >= 0xfff0 ==> (x - 2) % 2 == 1);\nloop invariant (x < 0xfff0 ==> (x - 1) % 2 == 1);\nloop invariant (x >= 0xfff0 ==> (x - 3) % 2 == 1);\nloop invariant (x < 0xfff0 ==> (x - 2) % 2 == 1);\nloop invariant (x >= 0xfff0 ==> (x - 4) % 2 == 1);\nloop invariant (x < 0xfff0 ==> (x - 3) % 2 == 1);\nloop invariant (x >= 0xfff0 ==> (x - 5) % 2 == 1);\nloop invariant (x < 0xfff0 ==> (x - 4) % 2 == 1);\nloop invariant (x >= 0xfff0 ==> (x - 6) % 2 == 1);\nloop invariant (x < 0xfff0 ==> (x - 5) % 2 == 1);\nloop invariant (x >= 0xfff0 ==> (x - 7) % 2 == 1);\nloop invariant (x < 0xfff0 ==> (x - 6) % 2 == 1);\nloop invariant (x >= 0xfff0 ==> (x - 8) % 2 == 1);\nloop invariant (x < 0xfff0 ==> (x - 7) % 2 == 1);\nloop invariant (x >= 0xfff0 ==> (x - 9) % 2 == 1);\nloop invariant (x < 0xfff0 ==> (x - 8) % 2 == 1);\nloop invariant (x >= 0xfff0 ==> (x - 10) % 2 == 1);\nloop invariant (x < 0xfff0 ==> (x - 9) % 2 == 1);\nloop invariant (x >= 0xfff0 ==> (x - 11) % 2 == 1);\nloop invariant (x < 0xfff0 ==> (x - 10) % 2 == 1);\nloop invariant (x >= 0xfff0 ==> (x - 12) % 2 == 1);\nloop invariant (x < 0xfff0 ==> (x - 11) % 2 == 1);\nloop invariant (x >= 0xfff0 ==> (x - 13) % 2 == 1);\nloop invariant (x < 0xfff0 ==> (x - 12) % 2 == 1);\nloop invariant (x >= 0xfff0 ==> (x - 14) % 2 == 1);\nloop invariant (x < 0xfff0 ==> (x - 13) % 2 == 1);\nloop invariant (x >= 0xfff0 ==> (x - 15) % 2 == 1);\nloop invariant (x < 0xfff0 ==> (x - 14) % 2 == 1);\nloop invariant (x >= 0xfff0 ==> (x - 16) % 2 == 1);\nloop invariant (x < 0xfff0 ==> (x - 15) % 2 == 1);\nloop invariant (x >= 0xfff0 ==> (x - 17) % 2 == 1);\nloop invariant (x < 0xfff0 ==> (x - 16) % 2 == 1);\nloop invariant (x >= 0xfff0 ==> (x - 18) % 2 == 1);\nloop invariant (x < 0xfff0 ==> (x - 17) % 2 == 1);\nloop invariant (x >= 0xfff0 ==> (x - 19) % 2 == 1);\nloop invariant (x < 0xfff0 ==> (x - 18) % 2 == 1);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n\n  /*@\n\nloop invariant i2: (x >= 0xfff0 ==> (x - 0xfff0) % 2 == 0);\n\nloop invariant i4: (x >= 0xfff0 ==> (x % 2) == 0);\n\nloop invariant i6: (x >= 0xfff0 ==> (x - 2) % 2 == 0);\n\n\nloop invariant i9: (x >= 0xfff0 ==> (x - 3) % 2 == 1);\n\n\n\nloop invariant i13: (x >= 0xfff0 ==> (x - 5) % 2 == 1);\n\n\n\nloop invariant i17: (x >= 0xfff0 ==> (x - 7) % 2 == 1);\n\n\n\nloop invariant i21: (x >= 0xfff0 ==> (x - 9) % 2 == 1);\n\n\n\nloop invariant i25: (x >= 0xfff0 ==> (x - 11) % 2 == 1);\n\n\n\nloop invariant i29: (x >= 0xfff0 ==> (x - 13) % 2 == 1);\n\n\n\nloop invariant i33: (x >= 0xfff0 ==> (x - 15) % 2 == 1);\n\n\n\nloop invariant i37: (x >= 0xfff0 ==> (x - 17) % 2 == 1);\n\n\n\nloop invariant i41: (x >= 0xfff0 ==> (x - 19) % 2 == 1);\n\n*/\nwhile (x < 0x0fffffff) {\n    if (x < 0xfff0) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 32,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 0x0fffffff;\nloop invariant (x % 2) == 0;\nloop invariant (x < 0xfff0) ==> (x == 0);\nloop invariant (x >= 0xfff0) ==> (x == 2);\nloop invariant (x < 0xfff0) ==> (x + 1 == 0xfff0);\nloop invariant (x >= 0xfff0) ==> (x + 2 == 0x0fffffff);\nloop invariant (x % 2) == 0 ==> (x + 2 == x + 1);\nloop invariant (x % 2) == 1 ==> (x + 1 == x + 2);\nloop invariant (x + 1) % 2 == 0 ==> (x + 1 == x);\nloop invariant (x + 2) % 2 == 0 ==> (x + 2 == x);\nloop invariant (x + 1) % 2 == 1 ==> (x + 1 == x + 1);\nloop invariant (x + 2) % 2 == 1 ==> (x + 2 == x + 1);\nloop invariant (x + 3) % 2 == 1 ==> (x + 3 == x + 2);\nloop invariant (x + 3) % 2 == 0 ==> (x + 3 == x + 3);\nloop invariant (x + 4) % 2 == 0 ==> (x + 4 == x + 2);\nloop invariant (x + 4) % 2 == 1 ==> (x + 4 == x + 3);\nloop invariant (x + 5) % 2 == 1 ==> (x + 5 == x + 4);\nloop invariant (x + 5) % 2 == 0 ==> (x + 5 == x + 5);\nloop invariant (x + 6) % 2 == 0 ==> (x + 6 == x + 4);\nloop invariant (x + 6) % 2 == 1 ==> (x + 6 == x + 5);\nloop invariant (x + 7) % 2 == 1 ==> (x + 7 == x + 6);\nloop invariant (x + 7) % 2 == 0 ==> (x + 7 == x + 7);\nloop invariant (x + 8) % 2 == 0 ==> (x + 8 == x + 6);\nloop invariant (x + 8) % 2 == 1 ==> (x + 8 == x + 7);\nloop invariant (x + 9) % 2 == 1 ==> (x + 9 == x + 8);\nloop invariant (x + 9) % 2 == 0 ==> (x + 9 == x + 9);\nloop invariant (x + 10) % 2 == 0 ==> (x + 10 == x + 8);\nloop invariant (x + 10) % 2 == 1 ==> (x + 10 == x + 9);\nloop invariant (x + 11) % 2 == 1 ==> (x + 11 == x + 10);\nloop invariant (x + 11) % 2 == 0 ==> (x + 11 == x + 11);\nloop invariant (x + 12) % 2 == 0 ==> (x + 12 == x + 10);\nloop invariant (x + 12) % 2 == 1 ==> (x + 12 == x + 11);\nloop invariant (x + 13) % 2 == 1 ==> (x + 13 == x + 12);\nloop invariant (x + 13) % 2 == 0 ==> (x + 13 == x + 13);\nloop invariant (x + 14) % 2 == 0 ==> (x + 14 == x + 12);\nloop invariant (x + 14) % 2 == 1 ==> (x + 14 == x + 13);\nloop invariant (x + 15) % 2 == 1 ==> (x + 15 == x + 14);\nloop invariant (x + 15) % 2 == 0 ==> (x + 15 == x + 15);\nloop invariant (x + 16) % 2 == 0 ==> (x + 16 == x + 14);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n\n  /*@\n\n\n\n\n\n\n\n\n\n\nloop invariant i11: (x + 1) % 2 == 1 ==> (x + 1 == x + 1);\n\n\nloop invariant i14: (x + 3) % 2 == 0 ==> (x + 3 == x + 3);\n\n\n\nloop invariant i18: (x + 5) % 2 == 0 ==> (x + 5 == x + 5);\n\n\n\nloop invariant i22: (x + 7) % 2 == 0 ==> (x + 7 == x + 7);\n\n\n\nloop invariant i26: (x + 9) % 2 == 0 ==> (x + 9 == x + 9);\n\n\n\nloop invariant i30: (x + 11) % 2 == 0 ==> (x + 11 == x + 11);\n\n\n\nloop invariant i34: (x + 13) % 2 == 0 ==> (x + 13 == x + 13);\n\n\n\nloop invariant i38: (x + 15) % 2 == 0 ==> (x + 15 == x + 15);\n\n*/\nwhile (x < 0x0fffffff) {\n    if (x < 0xfff0) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 0x0fffffff;\nloop invariant x % 2 == 0 ==> x < 0xfff0;\nloop invariant x >= 0xfff0 ==> x % 2 == 0;\nloop invariant x % 2 == 0 ==> x % 4 == 0;\nloop invariant x % 4 == 0 ==> x % 8 == 0;\nloop invariant x % 8 == 0 ==> x % 16 == 0;\nloop invariant x % 16 == 0 ==> x % 32 == 0;\nloop invariant x % 32 == 0 ==> x % 64 == 0;\nloop invariant x % 64 == 0 ==> x % 128 == 0;\nloop invariant x % 128 == 0 ==> x % 256 == 0;\nloop invariant x % 256 == 0 ==> x % 512 == 0;\nloop invariant x % 512 == 0 ==> x % 1024 == 0;\nloop invariant x % 1024 == 0 ==> x % 2048 == 0;\nloop invariant x % 2048 == 0 ==> x % 4096 == 0;\nloop invariant x % 4096 == 0 ==> x % 8192 == 0;\nloop invariant x % 8192 == 0 ==> x % 16384 == 0;\nloop invariant x % 16384 == 0 ==> x % 32768 == 0;\nloop invariant x % 32768 == 0 ==> x % 65536 == 0;\nloop invariant x % 65536 == 0 ==> x % 131072 == 0;\nloop invariant x % 131072 == 0 ==> x % 262144 == 0;\nloop invariant x % 262144 == 0 ==> x % 524288 == 0;\nloop invariant x % 524288 == 0 ==> x % 1048576 == 0;\nloop invariant x % 1048576 == 0 ==> x % 2097152 == 0;\nloop invariant x % 2097152 == 0 ==> x % 4194304 == 0;\nloop invariant x % 4194304 == 0 ==> x % 8388608 == 0;\nloop invariant x % 8388608 == 0 ==> x % 16777216 == 0;\nloop invariant x % 16777216 == 0 ==> x % 33554432 == 0;\nloop invariant x % 33554432 == 0 ==> x % 67108864 == 0;\nloop invariant x % 67108864 == 0 ==> x % 134217728 == 0;\nloop invariant x % 134217728 == 0 ==> x % 268435456 == 0;\nloop invariant x % 268435456 == 0 ==> x % 536870912 == 0;\nloop invariant x % 536870912 == 0 ==> x % 1073741824 == 0;\nloop invariant x % 2 == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n\n  /*@\n\n\nloop invariant i3: x >= 0xfff0 ==> x % 2 == 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i32: x % 536870912 == 0 ==> x % 1073741824 == 0;\n\n*/\nwhile (x < 0x0fffffff) {\n    if (x < 0xfff0) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                "checker_output_after_prune": true
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "loop invariant 0 <= x <= 0x0fffffff is partially proven to be inductive.\nloop invariant x % 2 == 0 is partially proven to be inductive.\nloop invariant x < 0xfff0 ==> x % 2 == 1 is preserved but not established.\nloop invariant x >= 0xfff0 ==> x % 2 == 0 is partially proven to be inductive.\nloop invariant 0 <= x < 0x0fffffff is partially proven to be inductive.\nloop invariant (x % 2) == 1 is partially proven to be inductive.\nloop invariant (x % 2) == 0 is partially proven to be inductive.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant (x < 0xfff0) ==> (x % 2 == 1) is partially proven to be inductive.\nloop invariant (x >= 0xfff0) ==> (x % 2 == 0) is partially proven to be inductive.\nloop invariant (x % 2) == 0 ==> (x < 0xfff0) ==> (x + 1) >= 0xfff0 is partially proven to be inductive.\nloop invariant (x % 2) == 0 ==> (x >= 0xfff0) ==> (x + 2) <= 0x0fffffff is partially proven to be inductive.\nloop invariant (x % 2) == 1 ==> (x < 0xfff0) ==> (x + 1) <= 0xfff0 is partially proven to be inductive.\nloop invariant (x % 2) == 1 ==> (x >= 0xfff0) ==> (x + 2) >= 0x0fffffff is partially proven to be inductive.\nloop invariant x <= 0x0fffffff is partially proven to be inductive.\nloop invariant ((x % 2) == 0 ==> x >= 0x0fffffff) is partially proven to be inductive.\nloop invariant ((x % 2) == 0 ==> x <= 0x0fffffff) is partially proven to be inductive.\nloop invariant x % 2 == 0 ==> x >= 2 is partially proven to be inductive.\nloop invariant x % 2 == 0 ==> x <= 0x0fffffff - 1 is partially proven to be inductive.\nloop invariant x % 2 == 1 ==> x >= 1 is partially proven to be inductive.\nloop invariant x % 2 == 1 ==> x <= 0x0fffffff - 2 is partially proven to be inductive.\nloop invariant x % 2 == 0 ==> x < 0xfff0 ==> x >= 0 is partially proven to be inductive.\nloop invariant x % 2 == 0 ==> x < 0xfff0 ==> x <= 0xfff1 is partially proven to be inductive.\nloop invariant x % 2 == 0 ==> x < 0xfff0 ==> x >= 2 is partially proven to be inductive.\nloop invariant x % 2 == 0 ==> x < 0xfff0 ==> x <= 0x0fffffff - 1 is partially proven to be inductive.\nloop invariant x % 2 == 0 ==> x >= 0xfff0 ==> x >= 0xfff0 is partially proven to be inductive.\nloop invariant x % 2 == 0 ==> x >= 0xfff0 ==> x <= 0x0fffffff is partially proven to be inductive.\nloop invariant x % 2 == 1 ==> x >= 1 ==> x >= 1 is partially proven to be inductive.\nloop invariant x % 2 == 1 ==> x >= 1 ==> x <= 0x0fffffff - 2 is partially proven to be inductive.\nloop invariant x % 2 == 1 ==> x >= 1 ==> x >= 2 is partially proven to be inductive.\nloop invariant x % 2 == 1 ==> x >= 1 ==> x <= 0x0fffffff - 1 is partially proven to be inductive.\nloop invariant (x >= 0xfff0 ==> (x - 0xfff0) % 2 == 0) is partially proven to be inductive.\nloop invariant (x < 0xfff0 ==> (x % 2) == 1) is partially proven to be inductive.\nloop invariant (x >= 0xfff0 ==> (x % 2) == 0) is partially proven to be inductive.\nloop invariant (x < 0xfff0 ==> (x - 1) % 2 == 1) is partially proven to be inductive.\nloop invariant (x >= 0xfff0 ==> (x - 2) % 2 == 0) is partially proven to be inductive.\nloop invariant (x < 0xfff0 ==> (x - 1) % 2 == 0) is partially proven to be inductive.\nloop invariant (x >= 0xfff0 ==> (x - 2) % 2 == 1) is partially proven to be inductive.\nloop invariant (x >= 0xfff0 ==> (x - 3) % 2 == 1) is partially proven to be inductive.\nloop invariant (x < 0xfff0 ==> (x - 2) % 2 == 1) is partially proven to be inductive.\nloop invariant (x >= 0xfff0 ==> (x - 4) % 2 == 1) is partially proven to be inductive.\nloop invariant (x < 0xfff0 ==> (x - 3) % 2 == 1) is partially proven to be inductive.\nloop invariant (x >= 0xfff0 ==> (x - 5) % 2 == 1) is partially proven to be inductive.\nloop invariant (x < 0xfff0 ==> (x - 4) % 2 == 1) is partially proven to be inductive.\nloop invariant (x >= 0xfff0 ==> (x - 6) % 2 == 1) is partially proven to be inductive.\nloop invariant (x < 0xfff0 ==> (x - 5) % 2 == 1) is partially proven to be inductive.\nloop invariant (x >= 0xfff0 ==> (x - 7) % 2 == 1) is partially proven to be inductive.\nloop invariant (x < 0xfff0 ==> (x - 6) % 2 == 1) is partially proven to be inductive.\nloop invariant (x >= 0xfff0 ==> (x - 8) % 2 == 1) is partially proven to be inductive.\nloop invariant (x < 0xfff0 ==> (x - 7) % 2 == 1) is partially proven to be inductive.\nloop invariant (x >= 0xfff0 ==> (x - 9) % 2 == 1) is partially proven to be inductive.\nloop invariant (x < 0xfff0 ==> (x - 8) % 2 == 1) is partially proven to be inductive.\nloop invariant (x >= 0xfff0 ==> (x - 10) % 2 == 1) is partially proven to be inductive.\nloop invariant (x < 0xfff0 ==> (x - 9) % 2 == 1) is partially proven to be inductive.\nloop invariant (x >= 0xfff0 ==> (x - 11) % 2 == 1) is partially proven to be inductive.\nloop invariant (x < 0xfff0 ==> (x - 10) % 2 == 1) is partially proven to be inductive.\nloop invariant (x >= 0xfff0 ==> (x - 12) % 2 == 1) is partially proven to be inductive.\nloop invariant (x < 0xfff0 ==> (x - 11) % 2 == 1) is partially proven to be inductive.\nloop invariant (x >= 0xfff0 ==> (x - 13) % 2 == 1) is partially proven to be inductive.\nloop invariant (x < 0xfff0 ==> (x - 12) % 2 == 1) is partially proven to be inductive.\nloop invariant (x >= 0xfff0 ==> (x - 14) % 2 == 1) is partially proven to be inductive.\nloop invariant (x < 0xfff0 ==> (x - 13) % 2 == 1) is partially proven to be inductive.\nloop invariant (x >= 0xfff0 ==> (x - 15) % 2 == 1) is partially proven to be inductive.\nloop invariant (x < 0xfff0 ==> (x - 14) % 2 == 1) is partially proven to be inductive.\nloop invariant (x >= 0xfff0 ==> (x - 16) % 2 == 1) is partially proven to be inductive.\nloop invariant (x < 0xfff0 ==> (x - 15) % 2 == 1) is partially proven to be inductive.\nloop invariant (x >= 0xfff0 ==> (x - 17) % 2 == 1) is partially proven to be inductive.\nloop invariant (x < 0xfff0 ==> (x - 16) % 2 == 1) is partially proven to be inductive.\nloop invariant (x >= 0xfff0 ==> (x - 18) % 2 == 1) is partially proven to be inductive.\nloop invariant (x < 0xfff0 ==> (x - 17) % 2 == 1) is partially proven to be inductive.\nloop invariant (x >= 0xfff0 ==> (x - 19) % 2 == 1) is partially proven to be inductive.\nloop invariant (x < 0xfff0 ==> (x - 18) % 2 == 1) is partially proven to be inductive.\nloop invariant (x < 0xfff0) ==> (x == 0) is partially proven to be inductive.\nloop invariant (x >= 0xfff0) ==> (x == 2) is partially proven to be inductive.\nloop invariant (x < 0xfff0) ==> (x + 1 == 0xfff0) is partially proven to be inductive.\nloop invariant (x >= 0xfff0) ==> (x + 2 == 0x0fffffff) is partially proven to be inductive.\nloop invariant (x % 2) == 0 ==> (x + 2 == x + 1) is partially proven to be inductive.\nloop invariant (x % 2) == 1 ==> (x + 1 == x + 2) is partially proven to be inductive.\nloop invariant (x + 1) % 2 == 0 ==> (x + 1 == x) is partially proven to be inductive.\nloop invariant (x + 2) % 2 == 0 ==> (x + 2 == x) is partially proven to be inductive.\nloop invariant (x + 1) % 2 == 1 ==> (x + 1 == x + 1) is partially proven to be inductive.\nloop invariant (x + 2) % 2 == 1 ==> (x + 2 == x + 1) is partially proven to be inductive.\nloop invariant (x + 3) % 2 == 1 ==> (x + 3 == x + 2) is partially proven to be inductive.\nloop invariant (x + 3) % 2 == 0 ==> (x + 3 == x + 3) is partially proven to be inductive.\nloop invariant (x + 4) % 2 == 0 ==> (x + 4 == x + 2) is partially proven to be inductive.\nloop invariant (x + 4) % 2 == 1 ==> (x + 4 == x + 3) is partially proven to be inductive.\nloop invariant (x + 5) % 2 == 1 ==> (x + 5 == x + 4) is partially proven to be inductive.\nloop invariant (x + 5) % 2 == 0 ==> (x + 5 == x + 5) is partially proven to be inductive.\nloop invariant (x + 6) % 2 == 0 ==> (x + 6 == x + 4) is partially proven to be inductive.\nloop invariant (x + 6) % 2 == 1 ==> (x + 6 == x + 5) is partially proven to be inductive.\nloop invariant (x + 7) % 2 == 1 ==> (x + 7 == x + 6) is partially proven to be inductive.\nloop invariant (x + 7) % 2 == 0 ==> (x + 7 == x + 7) is partially proven to be inductive.\nloop invariant (x + 8) % 2 == 0 ==> (x + 8 == x + 6) is partially proven to be inductive.\nloop invariant (x + 8) % 2 == 1 ==> (x + 8 == x + 7) is partially proven to be inductive.\nloop invariant (x + 9) % 2 == 1 ==> (x + 9 == x + 8) is partially proven to be inductive.\nloop invariant (x + 9) % 2 == 0 ==> (x + 9 == x + 9) is partially proven to be inductive.\nloop invariant (x + 10) % 2 == 0 ==> (x + 10 == x + 8) is partially proven to be inductive.\nloop invariant (x + 10) % 2 == 1 ==> (x + 10 == x + 9) is partially proven to be inductive.\nloop invariant (x + 11) % 2 == 1 ==> (x + 11 == x + 10) is partially proven to be inductive.\nloop invariant (x + 11) % 2 == 0 ==> (x + 11 == x + 11) is partially proven to be inductive.\nloop invariant (x + 12) % 2 == 0 ==> (x + 12 == x + 10) is partially proven to be inductive.\nloop invariant (x + 12) % 2 == 1 ==> (x + 12 == x + 11) is partially proven to be inductive.\nloop invariant (x + 13) % 2 == 1 ==> (x + 13 == x + 12) is partially proven to be inductive.\nloop invariant (x + 13) % 2 == 0 ==> (x + 13 == x + 13) is partially proven to be inductive.\nloop invariant (x + 14) % 2 == 0 ==> (x + 14 == x + 12) is partially proven to be inductive.\nloop invariant (x + 14) % 2 == 1 ==> (x + 14 == x + 13) is partially proven to be inductive.\nloop invariant (x + 15) % 2 == 1 ==> (x + 15 == x + 14) is partially proven to be inductive.\nloop invariant (x + 15) % 2 == 0 ==> (x + 15 == x + 15) is partially proven to be inductive.\nloop invariant (x + 16) % 2 == 0 ==> (x + 16 == x + 14) is partially proven to be inductive.\nloop invariant x % 2 == 0 ==> x < 0xfff0 is partially proven to be inductive.\nloop invariant x % 2 == 0 ==> x % 4 == 0 is partially proven to be inductive.\nloop invariant x % 4 == 0 ==> x % 8 == 0 is partially proven to be inductive.\nloop invariant x % 8 == 0 ==> x % 16 == 0 is partially proven to be inductive.\nloop invariant x % 16 == 0 ==> x % 32 == 0 is partially proven to be inductive.\nloop invariant x % 32 == 0 ==> x % 64 == 0 is partially proven to be inductive.\nloop invariant x % 64 == 0 ==> x % 128 == 0 is partially proven to be inductive.\nloop invariant x % 128 == 0 ==> x % 256 == 0 is partially proven to be inductive.\nloop invariant x % 256 == 0 ==> x % 512 == 0 is partially proven to be inductive.\nloop invariant x % 512 == 0 ==> x % 1024 == 0 is partially proven to be inductive.\nloop invariant x % 1024 == 0 ==> x % 2048 == 0 is partially proven to be inductive.\nloop invariant x % 2048 == 0 ==> x % 4096 == 0 is partially proven to be inductive.\nloop invariant x % 4096 == 0 ==> x % 8192 == 0 is partially proven to be inductive.\nloop invariant x % 8192 == 0 ==> x % 16384 == 0 is partially proven to be inductive.\nloop invariant x % 16384 == 0 ==> x % 32768 == 0 is partially proven to be inductive.\nloop invariant x % 32768 == 0 ==> x % 65536 == 0 is partially proven to be inductive.\nloop invariant x % 65536 == 0 ==> x % 131072 == 0 is partially proven to be inductive.\nloop invariant x % 131072 == 0 ==> x % 262144 == 0 is partially proven to be inductive.\nloop invariant x % 262144 == 0 ==> x % 524288 == 0 is partially proven to be inductive.\nloop invariant x % 524288 == 0 ==> x % 1048576 == 0 is partially proven to be inductive.\nloop invariant x % 1048576 == 0 ==> x % 2097152 == 0 is partially proven to be inductive.\nloop invariant x % 2097152 == 0 ==> x % 4194304 == 0 is partially proven to be inductive.\nloop invariant x % 4194304 == 0 ==> x % 8388608 == 0 is partially proven to be inductive.\nloop invariant x % 8388608 == 0 ==> x % 16777216 == 0 is partially proven to be inductive.\nloop invariant x % 16777216 == 0 ==> x % 33554432 == 0 is partially proven to be inductive.\nloop invariant x % 33554432 == 0 ==> x % 67108864 == 0 is partially proven to be inductive.\nloop invariant x % 67108864 == 0 ==> x % 134217728 == 0 is partially proven to be inductive.\nloop invariant x % 134217728 == 0 ==> x % 268435456 == 0 is partially proven to be inductive.\nloop invariant x % 268435456 == 0 ==> x % 536870912 == 0 is partially proven to be inductive.\nloop invariant x % 536870912 == 0 ==> x % 1073741824 == 0 is partially proven to be inductive.\nAssertion x % 2 == 0: Partially proven",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n\n  /*@\nloop invariant i1: 0 <= x <= 0x0fffffff;\nloop invariant i2: x % 2 == 0;\nloop invariant i3: x < 0xfff0 ==> x % 2 == 1;\nloop invariant i4: x >= 0xfff0 ==> x % 2 == 0;\nloop invariant i5: 0 <= x < 0x0fffffff;\nloop invariant i6: (x % 2) == 1;\nloop invariant i7: (x % 2) == 0;\nloop invariant i8: x >= 0;\nloop invariant i9: (x < 0xfff0) ==> (x % 2 == 1);\nloop invariant i10: (x >= 0xfff0) ==> (x % 2 == 0);\nloop invariant i11: (x % 2) == 0 ==> (x < 0xfff0) ==> (x + 1) >= 0xfff0;\nloop invariant i12: (x % 2) == 0 ==> (x >= 0xfff0) ==> (x + 2) <= 0x0fffffff;\nloop invariant i13: (x % 2) == 1 ==> (x < 0xfff0) ==> (x + 1) <= 0xfff0;\nloop invariant i14: (x % 2) == 1 ==> (x >= 0xfff0) ==> (x + 2) >= 0x0fffffff;\nloop invariant i15: x <= 0x0fffffff;\nloop invariant i16: ((x % 2) == 0 ==> x >= 0x0fffffff);\nloop invariant i17: ((x % 2) == 0 ==> x <= 0x0fffffff);\nloop invariant i18: x % 2 == 0 ==> x >= 2;\nloop invariant i19: x % 2 == 0 ==> x <= 0x0fffffff - 1;\nloop invariant i20: x % 2 == 1 ==> x >= 1;\nloop invariant i21: x % 2 == 1 ==> x <= 0x0fffffff - 2;\nloop invariant i22: x % 2 == 0 ==> x < 0xfff0 ==> x >= 0;\nloop invariant i23: x % 2 == 0 ==> x < 0xfff0 ==> x <= 0xfff1;\nloop invariant i24: x % 2 == 0 ==> x < 0xfff0 ==> x >= 2;\nloop invariant i25: x % 2 == 0 ==> x < 0xfff0 ==> x <= 0x0fffffff - 1;\nloop invariant i26: x % 2 == 0 ==> x >= 0xfff0 ==> x >= 0xfff0;\nloop invariant i27: x % 2 == 0 ==> x >= 0xfff0 ==> x <= 0x0fffffff;\nloop invariant i28: x % 2 == 1 ==> x >= 1 ==> x >= 1;\nloop invariant i29: x % 2 == 1 ==> x >= 1 ==> x <= 0x0fffffff - 2;\nloop invariant i30: x % 2 == 1 ==> x >= 1 ==> x >= 2;\nloop invariant i31: x % 2 == 1 ==> x >= 1 ==> x <= 0x0fffffff - 1;\nloop invariant i32: (x >= 0xfff0 ==> (x - 0xfff0) % 2 == 0);\nloop invariant i33: (x < 0xfff0 ==> (x % 2) == 1);\nloop invariant i34: (x >= 0xfff0 ==> (x % 2) == 0);\nloop invariant i35: (x < 0xfff0 ==> (x - 1) % 2 == 1);\nloop invariant i36: (x >= 0xfff0 ==> (x - 2) % 2 == 0);\nloop invariant i37: (x < 0xfff0 ==> (x - 1) % 2 == 0);\nloop invariant i38: (x >= 0xfff0 ==> (x - 2) % 2 == 1);\nloop invariant i39: (x >= 0xfff0 ==> (x - 3) % 2 == 1);\nloop invariant i40: (x < 0xfff0 ==> (x - 2) % 2 == 1);\nloop invariant i41: (x >= 0xfff0 ==> (x - 4) % 2 == 1);\nloop invariant i42: (x < 0xfff0 ==> (x - 3) % 2 == 1);\nloop invariant i43: (x >= 0xfff0 ==> (x - 5) % 2 == 1);\nloop invariant i44: (x < 0xfff0 ==> (x - 4) % 2 == 1);\nloop invariant i45: (x >= 0xfff0 ==> (x - 6) % 2 == 1);\nloop invariant i46: (x < 0xfff0 ==> (x - 5) % 2 == 1);\nloop invariant i47: (x >= 0xfff0 ==> (x - 7) % 2 == 1);\nloop invariant i48: (x < 0xfff0 ==> (x - 6) % 2 == 1);\nloop invariant i49: (x >= 0xfff0 ==> (x - 8) % 2 == 1);\nloop invariant i50: (x < 0xfff0 ==> (x - 7) % 2 == 1);\nloop invariant i51: (x >= 0xfff0 ==> (x - 9) % 2 == 1);\nloop invariant i52: (x < 0xfff0 ==> (x - 8) % 2 == 1);\nloop invariant i53: (x >= 0xfff0 ==> (x - 10) % 2 == 1);\nloop invariant i54: (x < 0xfff0 ==> (x - 9) % 2 == 1);\nloop invariant i55: (x >= 0xfff0 ==> (x - 11) % 2 == 1);\nloop invariant i56: (x < 0xfff0 ==> (x - 10) % 2 == 1);\nloop invariant i57: (x >= 0xfff0 ==> (x - 12) % 2 == 1);\nloop invariant i58: (x < 0xfff0 ==> (x - 11) % 2 == 1);\nloop invariant i59: (x >= 0xfff0 ==> (x - 13) % 2 == 1);\nloop invariant i60: (x < 0xfff0 ==> (x - 12) % 2 == 1);\nloop invariant i61: (x >= 0xfff0 ==> (x - 14) % 2 == 1);\nloop invariant i62: (x < 0xfff0 ==> (x - 13) % 2 == 1);\nloop invariant i63: (x >= 0xfff0 ==> (x - 15) % 2 == 1);\nloop invariant i64: (x < 0xfff0 ==> (x - 14) % 2 == 1);\nloop invariant i65: (x >= 0xfff0 ==> (x - 16) % 2 == 1);\nloop invariant i66: (x < 0xfff0 ==> (x - 15) % 2 == 1);\nloop invariant i67: (x >= 0xfff0 ==> (x - 17) % 2 == 1);\nloop invariant i68: (x < 0xfff0 ==> (x - 16) % 2 == 1);\nloop invariant i69: (x >= 0xfff0 ==> (x - 18) % 2 == 1);\nloop invariant i70: (x < 0xfff0 ==> (x - 17) % 2 == 1);\nloop invariant i71: (x >= 0xfff0 ==> (x - 19) % 2 == 1);\nloop invariant i72: (x < 0xfff0 ==> (x - 18) % 2 == 1);\nloop invariant i73: (x < 0xfff0) ==> (x == 0);\nloop invariant i74: (x >= 0xfff0) ==> (x == 2);\nloop invariant i75: (x < 0xfff0) ==> (x + 1 == 0xfff0);\nloop invariant i76: (x >= 0xfff0) ==> (x + 2 == 0x0fffffff);\nloop invariant i77: (x % 2) == 0 ==> (x + 2 == x + 1);\nloop invariant i78: (x % 2) == 1 ==> (x + 1 == x + 2);\nloop invariant i79: (x + 1) % 2 == 0 ==> (x + 1 == x);\nloop invariant i80: (x + 2) % 2 == 0 ==> (x + 2 == x);\nloop invariant i81: (x + 1) % 2 == 1 ==> (x + 1 == x + 1);\nloop invariant i82: (x + 2) % 2 == 1 ==> (x + 2 == x + 1);\nloop invariant i83: (x + 3) % 2 == 1 ==> (x + 3 == x + 2);\nloop invariant i84: (x + 3) % 2 == 0 ==> (x + 3 == x + 3);\nloop invariant i85: (x + 4) % 2 == 0 ==> (x + 4 == x + 2);\nloop invariant i86: (x + 4) % 2 == 1 ==> (x + 4 == x + 3);\nloop invariant i87: (x + 5) % 2 == 1 ==> (x + 5 == x + 4);\nloop invariant i88: (x + 5) % 2 == 0 ==> (x + 5 == x + 5);\nloop invariant i89: (x + 6) % 2 == 0 ==> (x + 6 == x + 4);\nloop invariant i90: (x + 6) % 2 == 1 ==> (x + 6 == x + 5);\nloop invariant i91: (x + 7) % 2 == 1 ==> (x + 7 == x + 6);\nloop invariant i92: (x + 7) % 2 == 0 ==> (x + 7 == x + 7);\nloop invariant i93: (x + 8) % 2 == 0 ==> (x + 8 == x + 6);\nloop invariant i94: (x + 8) % 2 == 1 ==> (x + 8 == x + 7);\nloop invariant i95: (x + 9) % 2 == 1 ==> (x + 9 == x + 8);\nloop invariant i96: (x + 9) % 2 == 0 ==> (x + 9 == x + 9);\nloop invariant i97: (x + 10) % 2 == 0 ==> (x + 10 == x + 8);\nloop invariant i98: (x + 10) % 2 == 1 ==> (x + 10 == x + 9);\nloop invariant i99: (x + 11) % 2 == 1 ==> (x + 11 == x + 10);\nloop invariant i100: (x + 11) % 2 == 0 ==> (x + 11 == x + 11);\nloop invariant i101: (x + 12) % 2 == 0 ==> (x + 12 == x + 10);\nloop invariant i102: (x + 12) % 2 == 1 ==> (x + 12 == x + 11);\nloop invariant i103: (x + 13) % 2 == 1 ==> (x + 13 == x + 12);\nloop invariant i104: (x + 13) % 2 == 0 ==> (x + 13 == x + 13);\nloop invariant i105: (x + 14) % 2 == 0 ==> (x + 14 == x + 12);\nloop invariant i106: (x + 14) % 2 == 1 ==> (x + 14 == x + 13);\nloop invariant i107: (x + 15) % 2 == 1 ==> (x + 15 == x + 14);\nloop invariant i108: (x + 15) % 2 == 0 ==> (x + 15 == x + 15);\nloop invariant i109: (x + 16) % 2 == 0 ==> (x + 16 == x + 14);\nloop invariant i110: x % 2 == 0 ==> x < 0xfff0;\nloop invariant i111: x % 2 == 0 ==> x % 4 == 0;\nloop invariant i112: x % 4 == 0 ==> x % 8 == 0;\nloop invariant i113: x % 8 == 0 ==> x % 16 == 0;\nloop invariant i114: x % 16 == 0 ==> x % 32 == 0;\nloop invariant i115: x % 32 == 0 ==> x % 64 == 0;\nloop invariant i116: x % 64 == 0 ==> x % 128 == 0;\nloop invariant i117: x % 128 == 0 ==> x % 256 == 0;\nloop invariant i118: x % 256 == 0 ==> x % 512 == 0;\nloop invariant i119: x % 512 == 0 ==> x % 1024 == 0;\nloop invariant i120: x % 1024 == 0 ==> x % 2048 == 0;\nloop invariant i121: x % 2048 == 0 ==> x % 4096 == 0;\nloop invariant i122: x % 4096 == 0 ==> x % 8192 == 0;\nloop invariant i123: x % 8192 == 0 ==> x % 16384 == 0;\nloop invariant i124: x % 16384 == 0 ==> x % 32768 == 0;\nloop invariant i125: x % 32768 == 0 ==> x % 65536 == 0;\nloop invariant i126: x % 65536 == 0 ==> x % 131072 == 0;\nloop invariant i127: x % 131072 == 0 ==> x % 262144 == 0;\nloop invariant i128: x % 262144 == 0 ==> x % 524288 == 0;\nloop invariant i129: x % 524288 == 0 ==> x % 1048576 == 0;\nloop invariant i130: x % 1048576 == 0 ==> x % 2097152 == 0;\nloop invariant i131: x % 2097152 == 0 ==> x % 4194304 == 0;\nloop invariant i132: x % 4194304 == 0 ==> x % 8388608 == 0;\nloop invariant i133: x % 8388608 == 0 ==> x % 16777216 == 0;\nloop invariant i134: x % 16777216 == 0 ==> x % 33554432 == 0;\nloop invariant i135: x % 33554432 == 0 ==> x % 67108864 == 0;\nloop invariant i136: x % 67108864 == 0 ==> x % 134217728 == 0;\nloop invariant i137: x % 134217728 == 0 ==> x % 268435456 == 0;\nloop invariant i138: x % 268435456 == 0 ==> x % 536870912 == 0;\nloop invariant i139: x % 536870912 == 0 ==> x % 1073741824 == 0;\n*/\nwhile (x < 0x0fffffff) {\n    if (x < 0xfff0) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
        "combined_annotation_num_solver_calls": 78,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n\n  /*@\n\n\n\nloop invariant i4: x >= 0xfff0 ==> x % 2 == 0;\n\n\n\nloop invariant i8: x >= 0;\n\nloop invariant i10: (x >= 0xfff0) ==> (x % 2 == 0);\n\n\nloop invariant i13: (x % 2) == 1 ==> (x < 0xfff0) ==> (x + 1) <= 0xfff0;\nloop invariant i14: (x % 2) == 1 ==> (x >= 0xfff0) ==> (x + 2) >= 0x0fffffff;\n\n\n\n\n\nloop invariant i20: x % 2 == 1 ==> x >= 1;\nloop invariant i21: x % 2 == 1 ==> x <= 0x0fffffff - 2;\nloop invariant i22: x % 2 == 0 ==> x < 0xfff0 ==> x >= 0;\nloop invariant i23: x % 2 == 0 ==> x < 0xfff0 ==> x <= 0xfff1;\n\nloop invariant i25: x % 2 == 0 ==> x < 0xfff0 ==> x <= 0x0fffffff - 1;\nloop invariant i26: x % 2 == 0 ==> x >= 0xfff0 ==> x >= 0xfff0;\n\nloop invariant i28: x % 2 == 1 ==> x >= 1 ==> x >= 1;\nloop invariant i29: x % 2 == 1 ==> x >= 1 ==> x <= 0x0fffffff - 2;\n\nloop invariant i31: x % 2 == 1 ==> x >= 1 ==> x <= 0x0fffffff - 1;\nloop invariant i32: (x >= 0xfff0 ==> (x - 0xfff0) % 2 == 0);\n\nloop invariant i34: (x >= 0xfff0 ==> (x % 2) == 0);\n\nloop invariant i36: (x >= 0xfff0 ==> (x - 2) % 2 == 0);\n\n\nloop invariant i39: (x >= 0xfff0 ==> (x - 3) % 2 == 1);\n\n\n\nloop invariant i43: (x >= 0xfff0 ==> (x - 5) % 2 == 1);\n\n\n\nloop invariant i47: (x >= 0xfff0 ==> (x - 7) % 2 == 1);\n\n\n\nloop invariant i51: (x >= 0xfff0 ==> (x - 9) % 2 == 1);\n\n\n\nloop invariant i55: (x >= 0xfff0 ==> (x - 11) % 2 == 1);\n\n\n\nloop invariant i59: (x >= 0xfff0 ==> (x - 13) % 2 == 1);\n\n\n\nloop invariant i63: (x >= 0xfff0 ==> (x - 15) % 2 == 1);\n\n\n\nloop invariant i67: (x >= 0xfff0 ==> (x - 17) % 2 == 1);\n\n\n\nloop invariant i71: (x >= 0xfff0 ==> (x - 19) % 2 == 1);\n\n\n\n\n\n\n\n\n\nloop invariant i81: (x + 1) % 2 == 1 ==> (x + 1 == x + 1);\n\n\nloop invariant i84: (x + 3) % 2 == 0 ==> (x + 3 == x + 3);\n\n\n\nloop invariant i88: (x + 5) % 2 == 0 ==> (x + 5 == x + 5);\n\n\n\nloop invariant i92: (x + 7) % 2 == 0 ==> (x + 7 == x + 7);\n\n\n\nloop invariant i96: (x + 9) % 2 == 0 ==> (x + 9 == x + 9);\n\n\n\nloop invariant i100: (x + 11) % 2 == 0 ==> (x + 11 == x + 11);\n\n\n\nloop invariant i104: (x + 13) % 2 == 0 ==> (x + 13 == x + 13);\n\n\n\nloop invariant i108: (x + 15) % 2 == 0 ==> (x + 15 == x + 15);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i139: x % 536870912 == 0 ==> x % 1073741824 == 0;\n*/\nwhile (x < 0x0fffffff) {\n    if (x < 0xfff0) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/split.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/11.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/15.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/16.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/18.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/23.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/30.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/32.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/37.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/38.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/41.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/43.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/44.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/46.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/popl.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/05.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/07.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/37.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/39.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/gulv_simp.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/substring1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/xy10.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/const_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/multivar_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/phases_safe1.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/13.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/14.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/19.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/20.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/39.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/cav.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/19.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/gulv.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/pldi082_unbounded.c"
        ],
        "skipped": [],
        "total": 139,
        "success_count": 114,
        "failure_count": 25,
        "success_rate": 0.8201438848920863
    }
}