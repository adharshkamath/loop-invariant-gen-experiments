{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/46.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown2();\n\nvoid main()\n{\n\n\tint w = 1;\n\tint z = 0;\n\tint x= 0;\n\tint y=0;\n\n         while(unknown2()){\n\t    if(w%2 == 1) {x++; w++;};\n\t    if(z%2==0) {y++; z++;};\n\t}\n\n\t{;\n//@ assert(x<=1);\n}\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= x <= 1;\nloop invariant 0 <= y <= 1;\nloop invariant 0 <= z <= 1;\nloop invariant 0 <= w <= 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= z <= INT_MAX;\nloop invariant 0 <= w <= INT_MAX;\nloop invariant 0 <= x <= INT_MAX;\nloop invariant 0 <= y <= INT_MAX;\nloop invariant z == w;\nloop invariant x == y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 1; loop invariant 0 <= y <= z; loop invariant 1 <= w <= 2; loop invariant 0 <= z <= 100000; loop invariant x == y; loop invariant x == w - 1; loop invariant y == z - 1; loop invariant w == 1; loop invariant 0 <= x <= 1; loop invariant 0 <= y <= z; loop invariant 1 <= w <= 2; loop invariant 0 <= z <= 100000; loop invariant x == y; loop invariant x == w - 1; loop invariant y == z - 1; loop invariant w == 1; loop invariant 0 <= x <= 1; loop invariant 0 <= y <= z; loop invariant 1 <= w <= 2; loop invariant 0 <= z <= 100000; loop invariant x == y; loop invariant x == w - 1; loop invariant y == z - 1; loop invariant w == 1; loop invariant 0 <= x <= 1; loop invariant 0 <= y <= z; loop invariant 1 <= w <= 2; loop invariant 0 <= z <= 100000; loop invariant x == y; loop invariant x == w - 1; loop invariant y == z - 1; loop invariant w == 1; loop invariant 0 <= x <= 1; loop invariant 0 <= y <= z; loop invariant 1 <= w <= 2; loop invariant 0 <= z <= 100000; loop invariant x == y; loop invariant x == w - 1; loop invariant y == z - 1; loop invariant w == 1; loop invariant 0 <= x <= 1; loop invariant 0 <= y <= z; loop invariant 1 <= w <= 2; loop invariant 0 <= z <= 100000; loop invariant x == y; loop invariant x == w - 1; loop invariant y == z - 1; loop invariant w == 1; loop invariant 0 <= x <= 1; loop invariant 0 <= y <= z; loop invariant 1 <= w <= 2; loop invariant 0 <= z <= 100000; loop invariant x == y; loop invariant x == w - 1; loop invariant y == z - 1; loop invariant w == 1; loop invariant 0 <= x <= 1; loop invariant 0 <= y <= z; loop invariant 1 <= w <= 2; loop invariant 0 <= z <= 100000; loop invariant x == y; loop invariant x == w - 1; loop invariant y == z - 1; loop invariant w == 1; loop invariant 0 <= x <= 1; loop invariant 0 <= y <= z; loop invariant 1 <= w <= 2; loop invariant 0 <= z <= 100000; loop invariant x == y; loop invariant x == w - 1; loop invariant y == z - 1; loop invariant w == 1; loop invariant 0 <= x <= 1; loop invariant 0 <= y <= z; loop invariant 1 <= w <= 2; loop invariant 0 <= z <= 100000; loop invariant x == y; loop invariant x == w - 1; loop invariant y == z - 1; loop invariant w == 1; loop invariant 0 <= x <= 1; loop invariant 0 <= y <= z; loop invariant 1 <= w <= 2; loop invariant 0 <= z <= 100000; loop invariant x == y; loop invariant x == w - 1; loop invariant y == z - 1; loop invariant w == 1; loop invariant 0 <= x <= 1; loop invariant 0 <= y <= z; loop invariant 1 <= w <= 2; loop invariant 0 <= z <= 100000; loop invariant x == y; loop invariant x == w - 1; loop invariant y == z - 1; loop invariant w == 1; loop invariant 0 <= x <= 1; loop invariant 0 <= y <= z; loop invariant 1 <= w <= 2; loop invariant 0 <= z <= 100000; loop invariant x == y; loop invariant x == w - 1; loop invariant y == z - 1; loop invariant w == 1; loop invariant 0 <= x <= 1; loop invariant 0 <= y <= z;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 1;\nloop invariant 0 <= y <= z;\nloop invariant w == z + 1;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= w <= unknown2();\nloop invariant 1 <= z <= unknown2();\nloop invariant x <= unknown2() - 1;\nloop invariant y <= unknown2() - 1;\nloop invariant x + y <= unknown2() - 1;\nloop invariant 0 <= x <= unknown2() - 1;\nloop invariant 0 <= y <= unknown2() - 1;\nloop invariant x <= y;\nloop invariant x + y <= unknown2();\nloop invariant 1 <= w;\nloop invariant 1 <= z;\nloop invariant x + y <= unknown2() - 1;\nloop invariant x <= unknown2() - 1;\nloop invariant y <= unknown2() - 1;\nloop invariant x <= y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 1;\nloop invariant z%2 == 0;\nloop invariant w%2 == 1;\nloop invariant x==w/2;\nloop invariant y==z/2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= w;\nloop invariant 0 <= z;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant w == z;\nloop invariant w%2 == z%2;\nloop invariant x <= 1;\nloop invariant y <= 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= w <= 2;\nloop invariant 0 <= z <= 2;\nloop invariant 0 <= x <= 1;\nloop invariant 0 <= y <= 1;\nloop invariant (w%2 == 1) ==> (x >= 1);\nloop invariant (w%2 == 1) ==> (w >= 2);\nloop invariant (z%2 == 0) ==> (y >= 1);\nloop invariant (z%2 == 0) ==> (z >= 2);\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= 100000;\nloop invariant 0 <= y <= 100000;\nloop invariant x <= y;\nloop invariant x >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= w <= 2;\nloop invariant 0 <= z <= 2;\nloop invariant 0 <= x <= 1;\nloop invariant 0 <= y <= 1;\nloop invariant ((w%2 == 1) ==> (x >= 0));\nloop invariant ((z%2 == 0) ==> (y >= 0));\nloop invariant ((w%2 == 1) ==> (w >= 1));\nloop invariant ((z%2 == 0) ==> (z >= 0));\nloop invariant ((w%2 == 1) ==> (w <= 2));\nloop invariant ((z%2 == 0) ==> (z <= 2));\nloop invariant ((w%2 == 1) ==> (x <= 1));\nloop invariant ((z%2 == 0) ==> (y <= 1));\n*/\n```",
            "```\n/*@\nloop invariant 1 <= w <= 2;\nloop invariant 0 <= z <= 2;\nloop invariant 0 <= x <= w/2;\nloop invariant 0 <= y <= z/2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= w;\nloop invariant 0 <= z;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant w % 2 == 1 implies x % 2 == 0;\nloop invariant z % 2 == 0 implies y % 2 == 1;\nloop invariant w % 2 == 1 implies w == x + 1;\nloop invariant z % 2 == 0 implies z == y + 1;\nloop invariant w % 2 == 1 implies w >= x + 1;\nloop invariant z % 2 == 0 implies z >= y + 1;\nloop invariant w % 2 == 1 implies w <= 2 * x;\nloop invariant z % 2 == 0 implies z <= 2 * y;\nloop invariant w % 2 == 1 implies x <= w;\nloop invariant z % 2 == 0 implies y <= z;\nloop invariant w % 2 == 1 implies x >= 0;\nloop invariant z % 2 == 0 implies y >= 0;\nloop invariant w % 2 == 1 implies x == w / 2;\nloop invariant z % 2 == 0 implies y == z / 2;\nloop invariant w % 2 == 1 implies x <= w / 2;\nloop invariant z % 2 == 0 implies y <= z / 2;\nloop invariant w % 2 == 1 implies x >= w / 2;\nloop invariant z % 2 == 0 implies y >= z / 2;\nloop invariant w % 2 == 1 implies w <= 2 * x;\nloop invariant z % 2 == 0 implies z <= 2 * y;\nloop invariant w % 2 == 1 implies w >= x + 1;\nloop invariant z % 2 == 0 implies z >= y + 1;\nloop invariant w % 2 == 1 implies w <= 2 * x;\nloop invariant z % 2 == 0 implies z <= 2 * y;\nloop invariant w % 2 == 1 implies w >= x + 1;\nloop invariant z % 2 == 0 implies z >= y + 1;\nloop invariant w % 2 == 1 implies w <= 2 * x;\nloop invariant z % 2 == 0 implies z <= 2 * y;\nloop invariant w % 2 == 1 implies w >= x + 1;\nloop invariant z % 2 == 0 implies z >= y + 1;\nloop invariant w % 2 == 1 implies w <= 2 * x;\nloop invariant z % 2 == 0 implies z <= 2 * y;\nloop invariant w % 2 == 1 implies w >= x + 1;\nloop invariant z % 2 == 0 implies z >= y + 1;\nloop invariant w % 2 == 1 implies w <= 2 * x;\nloop invariant z % 2 == 0 implies z <= 2 * y;\nloop invariant w % 2 == 1 implies w >= x + 1;\nloop invariant z % 2 == 0 implies z >= y + 1;\nloop invariant w % 2 == 1 implies w <= 2 * x;\nloop invariant z % 2 == 0 implies z <= 2 * y;\nloop invariant w % 2 == 1 implies w >= x + 1;\nloop invariant z % 2 == 0 implies z >= y + 1;\nloop invariant w % 2 == 1 implies w <= 2 * x;\nloop invariant z % 2 == 0 implies z <= 2 * y;\nloop invariant w % 2 == 1 implies w >= x + 1;\nloop invariant z % 2 == 0 implies z >= y + 1;\nloop invariant w % 2 == 1 implies w <= 2 * x;\nloop invariant z % 2 == 0 implies z <= 2 * y;\nloop invariant w % 2 == 1 implies w >= x + 1;\nloop invariant z % 2 == 0 implies z >= y + 1;\nloop invariant w % 2 == 1 implies w <= 2 * x;\nloop invariant z % 2 == 0 implies z <= 2 * y;\nloop invariant w % 2 == 1 implies w >= x + 1;\nloop invariant z % 2 == 0 implies z >= y + 1;\nloop invariant w % 2 == 1 implies w <= 2 * x;\nloop invariant z % 2 == 0 implies z <= 2 * y;\nloop invariant w % 2 == 1 implies w >= x + 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 2; loop invariant 0 <= y <= 1; loop invariant 1 <= w <= 2; loop invariant 0 <= z <= 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= w;\nloop invariant w % 2 == 1;\nloop invariant w % 2 == 0;\nloop invariant 0 <= z;\nloop invariant z % 2 == 0;\nloop invariant 0 <= x;\nloop invariant x <= 1;\nloop invariant 0 <= y;\nloop invariant y <= z;\nloop invariant x <= z;\nloop invariant z <= y;\nloop invariant y <= x;\nloop invariant x <= y;\nloop invariant y <= w;\nloop invariant x <= w;\nloop invariant w <= y;\nloop invariant z <= w;\nloop invariant x <= z;\nloop invariant w <= z;\nloop invariant w <= x;\nloop invariant x <= w;\nloop invariant x <= z;\nloop invariant z <= y;\nloop invariant y <= x;\nloop invariant x <= y;\nloop invariant y <= w;\nloop invariant x <= w;\nloop invariant w <= y;\nloop invariant z <= w;\nloop invariant x <= z;\nloop invariant w <= z;\nloop invariant w <= x;\nloop invariant x <= w;\nloop invariant x <= z;\nloop invariant z <= y;\nloop invariant y <= x;\nloop invariant x <= y;\nloop invariant y <= w;\nloop invariant x <= w;\nloop invariant w <= y;\nloop invariant z <= w;\nloop invariant x <= z;\nloop invariant w <= z;\nloop invariant w <= x;\nloop invariant x <= w;\nloop invariant x <= z;\nloop invariant z <= y;\nloop invariant y <= x;\nloop invariant x <= y;\nloop invariant y <= w;\nloop invariant x <= w;\nloop invariant w <= y;\nloop invariant z <= w;\nloop invariant x <= z;\nloop invariant w <= z;\nloop invariant w <= x;\nloop invariant x <= w;\nloop invariant x <= z;\nloop invariant z <= y;\nloop invariant y <= x;\nloop invariant x <= y;\nloop invariant y <= w;\nloop invariant x <= w;\nloop invariant w <= y;\nloop invariant z <= w;\nloop invariant x <= z;\nloop invariant w <= z;\nloop invariant w <= x;\nloop invariant x <= w;\nloop invariant x <= z;\nloop invariant z <= y;\nloop invariant y <= x;\nloop invariant x <= y;\nloop invariant y <= w;\nloop invariant x <= w;\nloop invariant w <= y;\nloop invariant z <= w;\nloop invariant x <= z;\nloop invariant w <= z;\nloop invariant w <= x;\nloop invariant x <= w;\nloop invariant x <= z;\nloop invariant z <= y;\nloop invariant y <= x;\nloop invariant x <= y;\nloop invariant y <= w;\nloop invariant x <= w;\nloop invariant w <= y;\nloop invariant z <= w;\nloop invariant x <= z;\nloop invariant w <= z;\nloop invariant w <= x;\nloop invariant x <= w;\nloop invariant x <= z;\nloop invariant z <= y;\nloop invariant y <= x;\nloop invariant x <= y;\nloop invariant y <= w;\nloop invariant x <= w;\nloop invariant w <= y;\nloop invariant z <= w;\nloop invariant x <= z;\nloop invariant w <= z;\nloop invariant w <= x;\nloop invariant x <= w;\nloop invariant x <= z;\nloop invariant z <= y;\nloop invariant y <= x;\nloop invariant x <= y;\nloop invariant y <= w;\nloop invariant x <= w;\nloop invariant w <= y;\nloop invariant z <= w;\nloop invariant x <= z;\nloop invariant w <= z;\nloop invariant w <= x;\nloop invariant x <= w;\nloop invariant x <= z;\nloop invariant z <= y;\nloop invariant y <= x;\nloop invariant x <= y;\nloop invariant y <= w;\nloop invariant x <= w;\nloop invariant w <= y;\nloop invariant z <= w;\nloop invariant x <= z;\nloop invariant w <= z;\nloop invariant w <= x;\nloop invariant x <= w;\nloop invariant x <= z;\nloop invariant z <= y;\nloop invariant y <= x;\nloop invariant x <= y;\nloop invariant y <= w;\nloop invariant x <= w;\nloop invariant w <= y;\nloop invariant z <= w;\nloop invariant x <= z;\nloop invariant w <= z;\nloop invariant w <= x;\nloop invariant x <= w;\nloop invariant x <= z;\nloop invariant z <= y;\nloop invariant y <= x;\nloop invariant x <= y;\nloop invariant y <= w;\nloop invariant x <= w;\nloop invariant w <= y;\nloop invariant z <= w;\nloop invariant x <= z;\nloop invariant w <= z;\nloop invariant w <= x;\nloop invariant x <= w;\nloop invariant x <= z;\nloop invariant z <= y;\nloop invariant y <= x;\nloop invariant x <= y;\nloop invariant y <= w;\nloop invariant x <= w;\nloop invariant w <= y;\nloop invariant z <= w;\nloop invariant x <= z;\nloop invariant w <= z;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= z <= w + 1;\nloop invariant 0 <= x <= 1;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 1;\nloop invariant 0 <= y <= 1;\nloop invariant 0 <= z <= 1;\nloop invariant 0 <= w <= 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown2();\n\nvoid main()\n{\n\n\tint w = 1;\n\tint z = 0;\n\tint x= 0;\n\tint y=0;\n\n         /*@\n\n\nloop invariant i3: 0 <= z <= 1;\nloop invariant i4: 0 <= w <= 2;\n*/\nwhile(unknown2()){\n\t    if(w%2 == 1) {x++; w++;};\n\t    if(z%2==0) {y++; z++;};\n\t}\n\n\t{;\n//@ assert(x<=1);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= z <= INT_MAX;\nloop invariant 0 <= w <= INT_MAX;\nloop invariant 0 <= x <= INT_MAX;\nloop invariant 0 <= y <= INT_MAX;\nloop invariant z == w;\nloop invariant x == y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown2();\n\nvoid main()\n{\n\n\tint w = 1;\n\tint z = 0;\n\tint x= 0;\n\tint y=0;\n\n         /*@\nloop invariant i1: 0 <= z <= INT_MAX;\nloop invariant i2: 0 <= w <= INT_MAX;\nloop invariant i3: 0 <= x <= INT_MAX;\nloop invariant i4: 0 <= y <= INT_MAX;\n\n\n*/\nwhile(unknown2()){\n\t    if(w%2 == 1) {x++; w++;};\n\t    if(z%2==0) {y++; z++;};\n\t}\n\n\t{;\n//@ assert(x<=1);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 1; loop invariant 0 <= y <= z; loop invariant 1 <= w <= 2; loop invariant 0 <= z <= 100000; loop invariant x == y; loop invariant x == w - 1; loop invariant y == z - 1; loop invariant w == 1; loop invariant 0 <= x <= 1; loop invariant 0 <= y <= z; loop invariant 1 <= w <= 2; loop invariant 0 <= z <= 100000; loop invariant x == y; loop invariant x == w - 1; loop invariant y == z - 1; loop invariant w == 1; loop invariant 0 <= x <= 1; loop invariant 0 <= y <= z; loop invariant 1 <= w <= 2; loop invariant 0 <= z <= 100000; loop invariant x == y; loop invariant x == w - 1; loop invariant y == z - 1; loop invariant w == 1; loop invariant 0 <= x <= 1; loop invariant 0 <= y <= z; loop invariant 1 <= w <= 2; loop invariant 0 <= z <= 100000; loop invariant x == y; loop invariant x == w - 1; loop invariant y == z - 1; loop invariant w == 1; loop invariant 0 <= x <= 1; loop invariant 0 <= y <= z; loop invariant 1 <= w <= 2; loop invariant 0 <= z <= 100000; loop invariant x == y; loop invariant x == w - 1; loop invariant y == z - 1; loop invariant w == 1; loop invariant 0 <= x <= 1; loop invariant 0 <= y <= z; loop invariant 1 <= w <= 2; loop invariant 0 <= z <= 100000; loop invariant x == y; loop invariant x == w - 1; loop invariant y == z - 1; loop invariant w == 1; loop invariant 0 <= x <= 1; loop invariant 0 <= y <= z; loop invariant 1 <= w <= 2; loop invariant 0 <= z <= 100000; loop invariant x == y; loop invariant x == w - 1; loop invariant y == z - 1; loop invariant w == 1; loop invariant 0 <= x <= 1; loop invariant 0 <= y <= z; loop invariant 1 <= w <= 2; loop invariant 0 <= z <= 100000; loop invariant x == y; loop invariant x == w - 1; loop invariant y == z - 1; loop invariant w == 1; loop invariant 0 <= x <= 1; loop invariant 0 <= y <= z; loop invariant 1 <= w <= 2; loop invariant 0 <= z <= 100000; loop invariant x == y; loop invariant x == w - 1; loop invariant y == z - 1; loop invariant w == 1; loop invariant 0 <= x <= 1; loop invariant 0 <= y <= z; loop invariant 1 <= w <= 2; loop invariant 0 <= z <= 100000; loop invariant x == y; loop invariant x == w - 1; loop invariant y == z - 1; loop invariant w == 1; loop invariant 0 <= x <= 1; loop invariant 0 <= y <= z; loop invariant 1 <= w <= 2; loop invariant 0 <= z <= 100000; loop invariant x == y; loop invariant x == w - 1; loop invariant y == z - 1; loop invariant w == 1; loop invariant 0 <= x <= 1; loop invariant 0 <= y <= z; loop invariant 1 <= w <= 2; loop invariant 0 <= z <= 100000; loop invariant x == y; loop invariant x == w - 1; loop invariant y == z - 1; loop invariant w == 1; loop invariant 0 <= x <= 1; loop invariant 0 <= y <= z; loop invariant 1 <= w <= 2; loop invariant 0 <= z <= 100000; loop invariant x == y; loop invariant x == w - 1; loop invariant y == z - 1; loop invariant w == 1; loop invariant 0 <= x <= 1; loop invariant 0 <= y <= z;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown2();\n\nvoid main()\n{\n\n\tint w = 1;\n\tint z = 0;\n\tint x= 0;\n\tint y=0;\n\n         /*@\nloop invariant i1: 0 <= x <= 1; loop invariant 0 <= y <= z; loop invariant 1 <= w <= 2; loop invariant 0 <= z <= 100000; loop invariant x == y; loop invariant x == w - 1; loop invariant y == z - 1; loop invariant w == 1; loop invariant 0 <= x <= 1; loop invariant 0 <= y <= z; loop invariant 1 <= w <= 2; loop invariant 0 <= z <= 100000; loop invariant x == y; loop invariant x == w - 1; loop invariant y == z - 1; loop invariant w == 1; loop invariant 0 <= x <= 1; loop invariant 0 <= y <= z; loop invariant 1 <= w <= 2; loop invariant 0 <= z <= 100000; loop invariant x == y; loop invariant x == w - 1; loop invariant y == z - 1; loop invariant w == 1; loop invariant 0 <= x <= 1; loop invariant 0 <= y <= z; loop invariant 1 <= w <= 2; loop invariant 0 <= z <= 100000; loop invariant x == y; loop invariant x == w - 1; loop invariant y == z - 1; loop invariant w == 1; loop invariant 0 <= x <= 1; loop invariant 0 <= y <= z; loop invariant 1 <= w <= 2; loop invariant 0 <= z <= 100000; loop invariant x == y; loop invariant x == w - 1; loop invariant y == z - 1; loop invariant w == 1; loop invariant 0 <= x <= 1; loop invariant 0 <= y <= z; loop invariant 1 <= w <= 2; loop invariant 0 <= z <= 100000; loop invariant x == y; loop invariant x == w - 1; loop invariant y == z - 1; loop invariant w == 1; loop invariant 0 <= x <= 1; loop invariant 0 <= y <= z; loop invariant 1 <= w <= 2; loop invariant 0 <= z <= 100000; loop invariant x == y; loop invariant x == w - 1; loop invariant y == z - 1; loop invariant w == 1; loop invariant 0 <= x <= 1; loop invariant 0 <= y <= z; loop invariant 1 <= w <= 2; loop invariant 0 <= z <= 100000; loop invariant x == y; loop invariant x == w - 1; loop invariant y == z - 1; loop invariant w == 1; loop invariant 0 <= x <= 1; loop invariant 0 <= y <= z; loop invariant 1 <= w <= 2; loop invariant 0 <= z <= 100000; loop invariant x == y; loop invariant x == w - 1; loop invariant y == z - 1; loop invariant w == 1; loop invariant 0 <= x <= 1; loop invariant 0 <= y <= z; loop invariant 1 <= w <= 2; loop invariant 0 <= z <= 100000; loop invariant x == y; loop invariant x == w - 1; loop invariant y == z - 1; loop invariant w == 1; loop invariant 0 <= x <= 1; loop invariant 0 <= y <= z; loop invariant 1 <= w <= 2; loop invariant 0 <= z <= 100000; loop invariant x == y; loop invariant x == w - 1; loop invariant y == z - 1; loop invariant w == 1; loop invariant 0 <= x <= 1; loop invariant 0 <= y <= z; loop invariant 1 <= w <= 2; loop invariant 0 <= z <= 100000; loop invariant x == y; loop invariant x == w - 1; loop invariant y == z - 1; loop invariant w == 1; loop invariant 0 <= x <= 1; loop invariant 0 <= y <= z; loop invariant 1 <= w <= 2; loop invariant 0 <= z <= 100000; loop invariant x == y; loop invariant x == w - 1; loop invariant y == z - 1; loop invariant w == 1; loop invariant 0 <= x <= 1; loop invariant 0 <= y <= z;\n*/\nwhile(unknown2()){\n\t    if(w%2 == 1) {x++; w++;};\n\t    if(z%2==0) {y++; z++;};\n\t}\n\n\t{;\n//@ assert(x<=1);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 1;\nloop invariant 0 <= y <= z;\nloop invariant w == z + 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown2();\n\nvoid main()\n{\n\n\tint w = 1;\n\tint z = 0;\n\tint x= 0;\n\tint y=0;\n\n         /*@\n\nloop invariant i2: 0 <= y <= z;\nloop invariant i3: w == z + 1;\n*/\nwhile(unknown2()){\n\t    if(w%2 == 1) {x++; w++;};\n\t    if(z%2==0) {y++; z++;};\n\t}\n\n\t{;\n//@ assert(x<=1);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 11,
                "annotations": "```\n/*@\nloop invariant 1 <= w <= unknown2();\nloop invariant 1 <= z <= unknown2();\nloop invariant x <= unknown2() - 1;\nloop invariant y <= unknown2() - 1;\nloop invariant x + y <= unknown2() - 1;\nloop invariant 0 <= x <= unknown2() - 1;\nloop invariant 0 <= y <= unknown2() - 1;\nloop invariant x <= y;\nloop invariant x + y <= unknown2();\nloop invariant 1 <= w;\nloop invariant 1 <= z;\nloop invariant x + y <= unknown2() - 1;\nloop invariant x <= unknown2() - 1;\nloop invariant y <= unknown2() - 1;\nloop invariant x <= y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown2();\n\nvoid main()\n{\n\n\tint w = 1;\n\tint z = 0;\n\tint x= 0;\n\tint y=0;\n\n         /*@\n\n\n\n\n\n\n\n\n\nloop invariant i10: 1 <= w;\n\n*/\nwhile(unknown2()){\n\t    if(w%2 == 1) {x++; w++;};\n\t    if(z%2==0) {y++; z++;};\n\t}\n\n\t{;\n//@ assert(x<=1);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 1;\nloop invariant z%2 == 0;\nloop invariant w%2 == 1;\nloop invariant x==w/2;\nloop invariant y==z/2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown2();\n\nvoid main()\n{\n\n\tint w = 1;\n\tint z = 0;\n\tint x= 0;\n\tint y=0;\n\n         /*@\n\n\n\nloop invariant i4: x==w/2;\n\n*/\nwhile(unknown2()){\n\t    if(w%2 == 1) {x++; w++;};\n\t    if(z%2==0) {y++; z++;};\n\t}\n\n\t{;\n//@ assert(x<=1);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= w;\nloop invariant 0 <= z;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant w == z;\nloop invariant w%2 == z%2;\nloop invariant x <= 1;\nloop invariant y <= 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown2();\n\nvoid main()\n{\n\n\tint w = 1;\n\tint z = 0;\n\tint x= 0;\n\tint y=0;\n\n         /*@\nloop invariant i1: 0 <= w;\nloop invariant i2: 0 <= z;\nloop invariant i3: 0 <= x;\nloop invariant i4: 0 <= y;\n\n\n\n\n*/\nwhile(unknown2()){\n\t    if(w%2 == 1) {x++; w++;};\n\t    if(z%2==0) {y++; z++;};\n\t}\n\n\t{;\n//@ assert(x<=1);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= w <= 2;\nloop invariant 0 <= z <= 2;\nloop invariant 0 <= x <= 1;\nloop invariant 0 <= y <= 1;\nloop invariant (w%2 == 1) ==> (x >= 1);\nloop invariant (w%2 == 1) ==> (w >= 2);\nloop invariant (z%2 == 0) ==> (y >= 1);\nloop invariant (z%2 == 0) ==> (z >= 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown2();\n\nvoid main()\n{\n\n\tint w = 1;\n\tint z = 0;\n\tint x= 0;\n\tint y=0;\n\n         /*@\nloop invariant i1: 0 <= w <= 2;\n\n\n\n\n\n\n\n*/\nwhile(unknown2()){\n\t    if(w%2 == 1) {x++; w++;};\n\t    if(z%2==0) {y++; z++;};\n\t}\n\n\t{;\n//@ assert(x<=1);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= 100000;\nloop invariant 0 <= y <= 100000;\nloop invariant x <= y;\nloop invariant x >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown2();\n\nvoid main()\n{\n\n\tint w = 1;\n\tint z = 0;\n\tint x= 0;\n\tint y=0;\n\n         /*@\n\n\n\nloop invariant i4: x >= 0;\n*/\nwhile(unknown2()){\n\t    if(w%2 == 1) {x++; w++;};\n\t    if(z%2==0) {y++; z++;};\n\t}\n\n\t{;\n//@ assert(x<=1);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= w <= 2;\nloop invariant 0 <= z <= 2;\nloop invariant 0 <= x <= 1;\nloop invariant 0 <= y <= 1;\nloop invariant ((w%2 == 1) ==> (x >= 0));\nloop invariant ((z%2 == 0) ==> (y >= 0));\nloop invariant ((w%2 == 1) ==> (w >= 1));\nloop invariant ((z%2 == 0) ==> (z >= 0));\nloop invariant ((w%2 == 1) ==> (w <= 2));\nloop invariant ((z%2 == 0) ==> (z <= 2));\nloop invariant ((w%2 == 1) ==> (x <= 1));\nloop invariant ((z%2 == 0) ==> (y <= 1));\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown2();\n\nvoid main()\n{\n\n\tint w = 1;\n\tint z = 0;\n\tint x= 0;\n\tint y=0;\n\n         /*@\nloop invariant i1: 0 <= w <= 2;\n\n\n\nloop invariant i5: ((w%2 == 1) ==> (x >= 0));\nloop invariant i6: ((z%2 == 0) ==> (y >= 0));\nloop invariant i7: ((w%2 == 1) ==> (w >= 1));\nloop invariant i8: ((z%2 == 0) ==> (z >= 0));\nloop invariant i9: ((w%2 == 1) ==> (w <= 2));\nloop invariant i10: ((z%2 == 0) ==> (z <= 2));\nloop invariant i11: ((w%2 == 1) ==> (x <= 1));\nloop invariant i12: ((z%2 == 0) ==> (y <= 1));\n*/\nwhile(unknown2()){\n\t    if(w%2 == 1) {x++; w++;};\n\t    if(z%2==0) {y++; z++;};\n\t}\n\n\t{;\n//@ assert(x<=1);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 1 <= w <= 2;\nloop invariant 0 <= z <= 2;\nloop invariant 0 <= x <= w/2;\nloop invariant 0 <= y <= z/2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown2();\n\nvoid main()\n{\n\n\tint w = 1;\n\tint z = 0;\n\tint x= 0;\n\tint y=0;\n\n         /*@\nloop invariant i1: 1 <= w <= 2;\n\nloop invariant i3: 0 <= x <= w/2;\n\n*/\nwhile(unknown2()){\n\t    if(w%2 == 1) {x++; w++;};\n\t    if(z%2==0) {y++; z++;};\n\t}\n\n\t{;\n//@ assert(x<=1);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 19,
                "annotations": "```\n/*@\nloop invariant 0 <= w;\nloop invariant 0 <= z;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant w % 2 == 1 implies x % 2 == 0;\nloop invariant z % 2 == 0 implies y % 2 == 1;\nloop invariant w % 2 == 1 implies w == x + 1;\nloop invariant z % 2 == 0 implies z == y + 1;\nloop invariant w % 2 == 1 implies w >= x + 1;\nloop invariant z % 2 == 0 implies z >= y + 1;\nloop invariant w % 2 == 1 implies w <= 2 * x;\nloop invariant z % 2 == 0 implies z <= 2 * y;\nloop invariant w % 2 == 1 implies x <= w;\nloop invariant z % 2 == 0 implies y <= z;\nloop invariant w % 2 == 1 implies x >= 0;\nloop invariant z % 2 == 0 implies y >= 0;\nloop invariant w % 2 == 1 implies x == w / 2;\nloop invariant z % 2 == 0 implies y == z / 2;\nloop invariant w % 2 == 1 implies x <= w / 2;\nloop invariant z % 2 == 0 implies y <= z / 2;\nloop invariant w % 2 == 1 implies x >= w / 2;\nloop invariant z % 2 == 0 implies y >= z / 2;\nloop invariant w % 2 == 1 implies w <= 2 * x;\nloop invariant z % 2 == 0 implies z <= 2 * y;\nloop invariant w % 2 == 1 implies w >= x + 1;\nloop invariant z % 2 == 0 implies z >= y + 1;\nloop invariant w % 2 == 1 implies w <= 2 * x;\nloop invariant z % 2 == 0 implies z <= 2 * y;\nloop invariant w % 2 == 1 implies w >= x + 1;\nloop invariant z % 2 == 0 implies z >= y + 1;\nloop invariant w % 2 == 1 implies w <= 2 * x;\nloop invariant z % 2 == 0 implies z <= 2 * y;\nloop invariant w % 2 == 1 implies w >= x + 1;\nloop invariant z % 2 == 0 implies z >= y + 1;\nloop invariant w % 2 == 1 implies w <= 2 * x;\nloop invariant z % 2 == 0 implies z <= 2 * y;\nloop invariant w % 2 == 1 implies w >= x + 1;\nloop invariant z % 2 == 0 implies z >= y + 1;\nloop invariant w % 2 == 1 implies w <= 2 * x;\nloop invariant z % 2 == 0 implies z <= 2 * y;\nloop invariant w % 2 == 1 implies w >= x + 1;\nloop invariant z % 2 == 0 implies z >= y + 1;\nloop invariant w % 2 == 1 implies w <= 2 * x;\nloop invariant z % 2 == 0 implies z <= 2 * y;\nloop invariant w % 2 == 1 implies w >= x + 1;\nloop invariant z % 2 == 0 implies z >= y + 1;\nloop invariant w % 2 == 1 implies w <= 2 * x;\nloop invariant z % 2 == 0 implies z <= 2 * y;\nloop invariant w % 2 == 1 implies w >= x + 1;\nloop invariant z % 2 == 0 implies z >= y + 1;\nloop invariant w % 2 == 1 implies w <= 2 * x;\nloop invariant z % 2 == 0 implies z <= 2 * y;\nloop invariant w % 2 == 1 implies w >= x + 1;\nloop invariant z % 2 == 0 implies z >= y + 1;\nloop invariant w % 2 == 1 implies w <= 2 * x;\nloop invariant z % 2 == 0 implies z <= 2 * y;\nloop invariant w % 2 == 1 implies w >= x + 1;\nloop invariant z % 2 == 0 implies z >= y + 1;\nloop invariant w % 2 == 1 implies w <= 2 * x;\nloop invariant z % 2 == 0 implies z <= 2 * y;\nloop invariant w % 2 == 1 implies w >= x + 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown2();\n\nvoid main()\n{\n\n\tint w = 1;\n\tint z = 0;\n\tint x= 0;\n\tint y=0;\n\n         /*@\nloop invariant i1: 0 <= w;\nloop invariant i2: 0 <= z;\nloop invariant i3: 0 <= x;\nloop invariant i4: 0 <= y;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile(unknown2()){\n\t    if(w%2 == 1) {x++; w++;};\n\t    if(z%2==0) {y++; z++;};\n\t}\n\n\t{;\n//@ assert(x<=1);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 2; loop invariant 0 <= y <= 1; loop invariant 1 <= w <= 2; loop invariant 0 <= z <= 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown2();\n\nvoid main()\n{\n\n\tint w = 1;\n\tint z = 0;\n\tint x= 0;\n\tint y=0;\n\n         /*@\n\n*/\nwhile(unknown2()){\n\t    if(w%2 == 1) {x++; w++;};\n\t    if(z%2==0) {y++; z++;};\n\t}\n\n\t{;\n//@ assert(x<=1);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 10,
                "annotations": "```\n/*@\nloop invariant 0 <= w;\nloop invariant w % 2 == 1;\nloop invariant w % 2 == 0;\nloop invariant 0 <= z;\nloop invariant z % 2 == 0;\nloop invariant 0 <= x;\nloop invariant x <= 1;\nloop invariant 0 <= y;\nloop invariant y <= z;\nloop invariant x <= z;\nloop invariant z <= y;\nloop invariant y <= x;\nloop invariant x <= y;\nloop invariant y <= w;\nloop invariant x <= w;\nloop invariant w <= y;\nloop invariant z <= w;\nloop invariant x <= z;\nloop invariant w <= z;\nloop invariant w <= x;\nloop invariant x <= w;\nloop invariant x <= z;\nloop invariant z <= y;\nloop invariant y <= x;\nloop invariant x <= y;\nloop invariant y <= w;\nloop invariant x <= w;\nloop invariant w <= y;\nloop invariant z <= w;\nloop invariant x <= z;\nloop invariant w <= z;\nloop invariant w <= x;\nloop invariant x <= w;\nloop invariant x <= z;\nloop invariant z <= y;\nloop invariant y <= x;\nloop invariant x <= y;\nloop invariant y <= w;\nloop invariant x <= w;\nloop invariant w <= y;\nloop invariant z <= w;\nloop invariant x <= z;\nloop invariant w <= z;\nloop invariant w <= x;\nloop invariant x <= w;\nloop invariant x <= z;\nloop invariant z <= y;\nloop invariant y <= x;\nloop invariant x <= y;\nloop invariant y <= w;\nloop invariant x <= w;\nloop invariant w <= y;\nloop invariant z <= w;\nloop invariant x <= z;\nloop invariant w <= z;\nloop invariant w <= x;\nloop invariant x <= w;\nloop invariant x <= z;\nloop invariant z <= y;\nloop invariant y <= x;\nloop invariant x <= y;\nloop invariant y <= w;\nloop invariant x <= w;\nloop invariant w <= y;\nloop invariant z <= w;\nloop invariant x <= z;\nloop invariant w <= z;\nloop invariant w <= x;\nloop invariant x <= w;\nloop invariant x <= z;\nloop invariant z <= y;\nloop invariant y <= x;\nloop invariant x <= y;\nloop invariant y <= w;\nloop invariant x <= w;\nloop invariant w <= y;\nloop invariant z <= w;\nloop invariant x <= z;\nloop invariant w <= z;\nloop invariant w <= x;\nloop invariant x <= w;\nloop invariant x <= z;\nloop invariant z <= y;\nloop invariant y <= x;\nloop invariant x <= y;\nloop invariant y <= w;\nloop invariant x <= w;\nloop invariant w <= y;\nloop invariant z <= w;\nloop invariant x <= z;\nloop invariant w <= z;\nloop invariant w <= x;\nloop invariant x <= w;\nloop invariant x <= z;\nloop invariant z <= y;\nloop invariant y <= x;\nloop invariant x <= y;\nloop invariant y <= w;\nloop invariant x <= w;\nloop invariant w <= y;\nloop invariant z <= w;\nloop invariant x <= z;\nloop invariant w <= z;\nloop invariant w <= x;\nloop invariant x <= w;\nloop invariant x <= z;\nloop invariant z <= y;\nloop invariant y <= x;\nloop invariant x <= y;\nloop invariant y <= w;\nloop invariant x <= w;\nloop invariant w <= y;\nloop invariant z <= w;\nloop invariant x <= z;\nloop invariant w <= z;\nloop invariant w <= x;\nloop invariant x <= w;\nloop invariant x <= z;\nloop invariant z <= y;\nloop invariant y <= x;\nloop invariant x <= y;\nloop invariant y <= w;\nloop invariant x <= w;\nloop invariant w <= y;\nloop invariant z <= w;\nloop invariant x <= z;\nloop invariant w <= z;\nloop invariant w <= x;\nloop invariant x <= w;\nloop invariant x <= z;\nloop invariant z <= y;\nloop invariant y <= x;\nloop invariant x <= y;\nloop invariant y <= w;\nloop invariant x <= w;\nloop invariant w <= y;\nloop invariant z <= w;\nloop invariant x <= z;\nloop invariant w <= z;\nloop invariant w <= x;\nloop invariant x <= w;\nloop invariant x <= z;\nloop invariant z <= y;\nloop invariant y <= x;\nloop invariant x <= y;\nloop invariant y <= w;\nloop invariant x <= w;\nloop invariant w <= y;\nloop invariant z <= w;\nloop invariant x <= z;\nloop invariant w <= z;\nloop invariant w <= x;\nloop invariant x <= w;\nloop invariant x <= z;\nloop invariant z <= y;\nloop invariant y <= x;\nloop invariant x <= y;\nloop invariant y <= w;\nloop invariant x <= w;\nloop invariant w <= y;\nloop invariant z <= w;\nloop invariant x <= z;\nloop invariant w <= z;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown2();\n\nvoid main()\n{\n\n\tint w = 1;\n\tint z = 0;\n\tint x= 0;\n\tint y=0;\n\n         /*@\nloop invariant i1: 0 <= w;\n\n\nloop invariant i4: 0 <= z;\n\nloop invariant i6: 0 <= x;\n\nloop invariant i8: 0 <= y;\nloop invariant i9: y <= z;\n\nloop invariant i11: z <= y;\n\n\n\nloop invariant i15: x <= w;\n\n\n\n\n*/\nwhile(unknown2()){\n\t    if(w%2 == 1) {x++; w++;};\n\t    if(z%2==0) {y++; z++;};\n\t}\n\n\t{;\n//@ assert(x<=1);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= z <= w + 1;\nloop invariant 0 <= x <= 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown2();\n\nvoid main()\n{\n\n\tint w = 1;\n\tint z = 0;\n\tint x= 0;\n\tint y=0;\n\n         /*@\n\n\n*/\nwhile(unknown2()){\n\t    if(w%2 == 1) {x++; w++;};\n\t    if(z%2==0) {y++; z++;};\n\t}\n\n\t{;\n//@ assert(x<=1);\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 31: unexpected token ')'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown2();\n\nvoid main()\n{\n\n\tint w = 1;\n\tint z = 0;\n\tint x= 0;\n\tint y=0;\n\n         /*@\nloop invariant i1: 0 <= x <= 1;\nloop invariant i2: 0 <= y <= 1;\nloop invariant i3: 0 <= z <= 1;\nloop invariant i4: 0 <= w <= 2;\nloop invariant i5: 0 <= z <= INT_MAX;\nloop invariant i6: 0 <= w <= INT_MAX;\nloop invariant i7: 0 <= x <= INT_MAX;\nloop invariant i8: 0 <= y <= INT_MAX;\nloop invariant i9: z == w;\nloop invariant i10: x == y;\nloop invariant i11: 0 <= x <= 1; loop invariant 0 <= y <= z; loop invariant 1 <= w <= 2; loop invariant 0 <= z <= 100000; loop invariant x == y; loop invariant x == w - 1; loop invariant y == z - 1; loop invariant w == 1; loop invariant 0 <= x <= 1; loop invariant 0 <= y <= z; loop invariant 1 <= w <= 2; loop invariant 0 <= z <= 100000; loop invariant x == y; loop invariant x == w - 1; loop invariant y == z - 1; loop invariant w == 1; loop invariant 0 <= x <= 1; loop invariant 0 <= y <= z; loop invariant 1 <= w <= 2; loop invariant 0 <= z <= 100000; loop invariant x == y; loop invariant x == w - 1; loop invariant y == z - 1; loop invariant w == 1; loop invariant 0 <= x <= 1; loop invariant 0 <= y <= z; loop invariant 1 <= w <= 2; loop invariant 0 <= z <= 100000; loop invariant x == y; loop invariant x == w - 1; loop invariant y == z - 1; loop invariant w == 1; loop invariant 0 <= x <= 1; loop invariant 0 <= y <= z; loop invariant 1 <= w <= 2; loop invariant 0 <= z <= 100000; loop invariant x == y; loop invariant x == w - 1; loop invariant y == z - 1; loop invariant w == 1; loop invariant 0 <= x <= 1; loop invariant 0 <= y <= z; loop invariant 1 <= w <= 2; loop invariant 0 <= z <= 100000; loop invariant x == y; loop invariant x == w - 1; loop invariant y == z - 1; loop invariant w == 1; loop invariant 0 <= x <= 1; loop invariant 0 <= y <= z; loop invariant 1 <= w <= 2; loop invariant 0 <= z <= 100000; loop invariant x == y; loop invariant x == w - 1; loop invariant y == z - 1; loop invariant w == 1; loop invariant 0 <= x <= 1; loop invariant 0 <= y <= z; loop invariant 1 <= w <= 2; loop invariant 0 <= z <= 100000; loop invariant x == y; loop invariant x == w - 1; loop invariant y == z - 1; loop invariant w == 1; loop invariant 0 <= x <= 1; loop invariant 0 <= y <= z; loop invariant 1 <= w <= 2; loop invariant 0 <= z <= 100000; loop invariant x == y; loop invariant x == w - 1; loop invariant y == z - 1; loop invariant w == 1; loop invariant 0 <= x <= 1; loop invariant 0 <= y <= z; loop invariant 1 <= w <= 2; loop invariant 0 <= z <= 100000; loop invariant x == y; loop invariant x == w - 1; loop invariant y == z - 1; loop invariant w == 1; loop invariant 0 <= x <= 1; loop invariant 0 <= y <= z; loop invariant 1 <= w <= 2; loop invariant 0 <= z <= 100000; loop invariant x == y; loop invariant x == w - 1; loop invariant y == z - 1; loop invariant w == 1; loop invariant 0 <= x <= 1; loop invariant 0 <= y <= z; loop invariant 1 <= w <= 2; loop invariant 0 <= z <= 100000; loop invariant x == y; loop invariant x == w - 1; loop invariant y == z - 1; loop invariant w == 1; loop invariant 0 <= x <= 1; loop invariant 0 <= y <= z; loop invariant 1 <= w <= 2; loop invariant 0 <= z <= 100000; loop invariant x == y; loop invariant x == w - 1; loop invariant y == z - 1; loop invariant w == 1; loop invariant 0 <= x <= 1; loop invariant 0 <= y <= z;\nloop invariant i12: 0 <= y <= z;\nloop invariant i13: w == z + 1;\nloop invariant i14: 1 <= w <= unknown2();\nloop invariant i15: 1 <= z <= unknown2();\nloop invariant i16: x <= unknown2() - 1;\nloop invariant i17: y <= unknown2() - 1;\nloop invariant i18: x + y <= unknown2() - 1;\nloop invariant i19: 0 <= x <= unknown2() - 1;\nloop invariant i20: 0 <= y <= unknown2() - 1;\nloop invariant i21: x <= y;\nloop invariant i22: x + y <= unknown2();\nloop invariant i23: 1 <= w;\nloop invariant i24: 1 <= z;\nloop invariant i25: z%2 == 0;\nloop invariant i26: w%2 == 1;\nloop invariant i27: x==w/2;\nloop invariant i28: y==z/2;\nloop invariant i29: 0 <= w;\nloop invariant i30: 0 <= z;\nloop invariant i31: 0 <= x;\nloop invariant i32: 0 <= y;\nloop invariant i33: w == z;\nloop invariant i34: w%2 == z%2;\nloop invariant i35: x <= 1;\nloop invariant i36: y <= 1;\nloop invariant i37: 0 <= z <= 2;\nloop invariant i38: (w%2 == 1) ==> (x >= 1);\nloop invariant i39: (w%2 == 1) ==> (w >= 2);\nloop invariant i40: (z%2 == 0) ==> (y >= 1);\nloop invariant i41: (z%2 == 0) ==> (z >= 2);\nloop invariant i42: 1 <= x <= 100000;\nloop invariant i43: 0 <= y <= 100000;\nloop invariant i44: x >= 0;\nloop invariant i45: ((w%2 == 1) ==> (x >= 0));\nloop invariant i46: ((z%2 == 0) ==> (y >= 0));\nloop invariant i47: ((w%2 == 1) ==> (w >= 1));\nloop invariant i48: ((z%2 == 0) ==> (z >= 0));\nloop invariant i49: ((w%2 == 1) ==> (w <= 2));\nloop invariant i50: ((z%2 == 0) ==> (z <= 2));\nloop invariant i51: ((w%2 == 1) ==> (x <= 1));\nloop invariant i52: ((z%2 == 0) ==> (y <= 1));\nloop invariant i53: 1 <= w <= 2;\nloop invariant i54: 0 <= x <= w/2;\nloop invariant i55: 0 <= y <= z/2;\nloop invariant i56: w % 2 == 1 implies x % 2 == 0;\nloop invariant i57: z % 2 == 0 implies y % 2 == 1;\nloop invariant i58: w % 2 == 1 implies w == x + 1;\nloop invariant i59: z % 2 == 0 implies z == y + 1;\nloop invariant i60: w % 2 == 1 implies w >= x + 1;\nloop invariant i61: z % 2 == 0 implies z >= y + 1;\nloop invariant i62: w % 2 == 1 implies w <= 2 * x;\nloop invariant i63: z % 2 == 0 implies z <= 2 * y;\nloop invariant i64: w % 2 == 1 implies x <= w;\nloop invariant i65: z % 2 == 0 implies y <= z;\nloop invariant i66: w % 2 == 1 implies x >= 0;\nloop invariant i67: z % 2 == 0 implies y >= 0;\nloop invariant i68: w % 2 == 1 implies x == w / 2;\nloop invariant i69: z % 2 == 0 implies y == z / 2;\nloop invariant i70: w % 2 == 1 implies x <= w / 2;\nloop invariant i71: z % 2 == 0 implies y <= z / 2;\nloop invariant i72: w % 2 == 1 implies x >= w / 2;\nloop invariant i73: z % 2 == 0 implies y >= z / 2;\nloop invariant i74: 0 <= x <= 2; loop invariant 0 <= y <= 1; loop invariant 1 <= w <= 2; loop invariant 0 <= z <= 1;\nloop invariant i75: w % 2 == 1;\nloop invariant i76: w % 2 == 0;\nloop invariant i77: z % 2 == 0;\nloop invariant i78: y <= z;\nloop invariant i79: x <= z;\nloop invariant i80: z <= y;\nloop invariant i81: y <= x;\nloop invariant i82: y <= w;\nloop invariant i83: x <= w;\nloop invariant i84: w <= y;\nloop invariant i85: z <= w;\nloop invariant i86: w <= z;\nloop invariant i87: w <= x;\nloop invariant i88: 0 <= z <= w + 1;\n*/\nwhile(unknown2()){\n\t    if(w%2 == 1) {x++; w++;};\n\t    if(z%2==0) {y++; z++;};\n\t}\n\n\t{;\n//@ assert(x<=1);\n}\n\n}",
        "combined_annotation_num_solver_calls": 29,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown2();\n\nvoid main()\n{\n\n\tint w = 1;\n\tint z = 0;\n\tint x= 0;\n\tint y=0;\n\n         /*@\nloop invariant i1: 0 <= x <= 1;\nloop invariant i2: 0 <= y <= 1;\nloop invariant i3: 0 <= z <= 1;\nloop invariant i4: 0 <= w <= 2;\nloop invariant i5: 0 <= z <= INT_MAX;\nloop invariant i6: 0 <= w <= INT_MAX;\nloop invariant i7: 0 <= x <= INT_MAX;\nloop invariant i8: 0 <= y <= INT_MAX;\n\nloop invariant i10: x == y;\nloop invariant i11: 0 <= x <= 1; loop invariant 0 <= y <= z; loop invariant 1 <= w <= 2; loop invariant 0 <= z <= 100000; loop invariant x == y; loop invariant x == w - 1; loop invariant y == z - 1; loop invariant w == 1; loop invariant 0 <= x <= 1; loop invariant 0 <= y <= z; loop invariant 1 <= w <= 2; loop invariant 0 <= z <= 100000; loop invariant x == y; loop invariant x == w - 1; loop invariant y == z - 1; loop invariant w == 1; loop invariant 0 <= x <= 1; loop invariant 0 <= y <= z; loop invariant 1 <= w <= 2; loop invariant 0 <= z <= 100000; loop invariant x == y; loop invariant x == w - 1; loop invariant y == z - 1; loop invariant w == 1; loop invariant 0 <= x <= 1; loop invariant 0 <= y <= z; loop invariant 1 <= w <= 2; loop invariant 0 <= z <= 100000; loop invariant x == y; loop invariant x == w - 1; loop invariant y == z - 1; loop invariant w == 1; loop invariant 0 <= x <= 1; loop invariant 0 <= y <= z; loop invariant 1 <= w <= 2; loop invariant 0 <= z <= 100000; loop invariant x == y; loop invariant x == w - 1; loop invariant y == z - 1; loop invariant w == 1; loop invariant 0 <= x <= 1; loop invariant 0 <= y <= z; loop invariant 1 <= w <= 2; loop invariant 0 <= z <= 100000; loop invariant x == y; loop invariant x == w - 1; loop invariant y == z - 1; loop invariant w == 1; loop invariant 0 <= x <= 1; loop invariant 0 <= y <= z; loop invariant 1 <= w <= 2; loop invariant 0 <= z <= 100000; loop invariant x == y; loop invariant x == w - 1; loop invariant y == z - 1; loop invariant w == 1; loop invariant 0 <= x <= 1; loop invariant 0 <= y <= z; loop invariant 1 <= w <= 2; loop invariant 0 <= z <= 100000; loop invariant x == y; loop invariant x == w - 1; loop invariant y == z - 1; loop invariant w == 1; loop invariant 0 <= x <= 1; loop invariant 0 <= y <= z; loop invariant 1 <= w <= 2; loop invariant 0 <= z <= 100000; loop invariant x == y; loop invariant x == w - 1; loop invariant y == z - 1; loop invariant w == 1; loop invariant 0 <= x <= 1; loop invariant 0 <= y <= z; loop invariant 1 <= w <= 2; loop invariant 0 <= z <= 100000; loop invariant x == y; loop invariant x == w - 1; loop invariant y == z - 1; loop invariant w == 1; loop invariant 0 <= x <= 1; loop invariant 0 <= y <= z; loop invariant 1 <= w <= 2; loop invariant 0 <= z <= 100000; loop invariant x == y; loop invariant x == w - 1; loop invariant y == z - 1; loop invariant w == 1; loop invariant 0 <= x <= 1; loop invariant 0 <= y <= z; loop invariant 1 <= w <= 2; loop invariant 0 <= z <= 100000; loop invariant x == y; loop invariant x == w - 1; loop invariant y == z - 1; loop invariant w == 1; loop invariant 0 <= x <= 1; loop invariant 0 <= y <= z; loop invariant 1 <= w <= 2; loop invariant 0 <= z <= 100000; loop invariant x == y; loop invariant x == w - 1; loop invariant y == z - 1; loop invariant w == 1; loop invariant 0 <= x <= 1; loop invariant 0 <= y <= z;\nloop invariant i12: 0 <= y <= z;\nloop invariant i13: w == z + 1;\n\n\n\n\n\n\n\nloop invariant i21: x <= y;\n\nloop invariant i23: 1 <= w;\nloop invariant i24: 1 <= z;\nloop invariant i25: z%2 == 0;\nloop invariant i26: w%2 == 1;\nloop invariant i27: x==w/2;\nloop invariant i28: y==z/2;\nloop invariant i29: 0 <= w;\nloop invariant i30: 0 <= z;\nloop invariant i31: 0 <= x;\nloop invariant i32: 0 <= y;\nloop invariant i33: w == z;\nloop invariant i34: w%2 == z%2;\nloop invariant i35: x <= 1;\nloop invariant i36: y <= 1;\nloop invariant i37: 0 <= z <= 2;\nloop invariant i38: (w%2 == 1) ==> (x >= 1);\nloop invariant i39: (w%2 == 1) ==> (w >= 2);\nloop invariant i40: (z%2 == 0) ==> (y >= 1);\nloop invariant i41: (z%2 == 0) ==> (z >= 2);\nloop invariant i42: 1 <= x <= 100000;\nloop invariant i43: 0 <= y <= 100000;\nloop invariant i44: x >= 0;\nloop invariant i45: ((w%2 == 1) ==> (x >= 0));\nloop invariant i46: ((z%2 == 0) ==> (y >= 0));\nloop invariant i47: ((w%2 == 1) ==> (w >= 1));\nloop invariant i48: ((z%2 == 0) ==> (z >= 0));\nloop invariant i49: ((w%2 == 1) ==> (w <= 2));\nloop invariant i50: ((z%2 == 0) ==> (z <= 2));\nloop invariant i51: ((w%2 == 1) ==> (x <= 1));\nloop invariant i52: ((z%2 == 0) ==> (y <= 1));\nloop invariant i53: 1 <= w <= 2;\nloop invariant i54: 0 <= x <= w/2;\nloop invariant i55: 0 <= y <= z/2;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i74: 0 <= x <= 2; loop invariant 0 <= y <= 1; loop invariant 1 <= w <= 2; loop invariant 0 <= z <= 1;\nloop invariant i75: w % 2 == 1;\nloop invariant i76: w % 2 == 0;\nloop invariant i77: z % 2 == 0;\nloop invariant i78: y <= z;\nloop invariant i79: x <= z;\nloop invariant i80: z <= y;\nloop invariant i81: y <= x;\nloop invariant i82: y <= w;\nloop invariant i83: x <= w;\nloop invariant i84: w <= y;\nloop invariant i85: z <= w;\nloop invariant i86: w <= z;\nloop invariant i87: w <= x;\nloop invariant i88: 0 <= z <= w + 1;\n*/\nwhile(unknown2()){\n\t    if(w%2 == 1) {x++; w++;};\n\t    if(z%2==0) {y++; z++;};\n\t}\n\n\t{;\n//@ assert(x<=1);\n}\n\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/split.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/11.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/15.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/16.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/18.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/23.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/30.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/32.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/37.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/38.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/41.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/43.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/44.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/46.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/13.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/14.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/19.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/20.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/39.c"
        ],
        "skipped": [],
        "total": 124,
        "success_count": 103,
        "failure_count": 21,
        "success_rate": 0.8306451612903226
    }
}