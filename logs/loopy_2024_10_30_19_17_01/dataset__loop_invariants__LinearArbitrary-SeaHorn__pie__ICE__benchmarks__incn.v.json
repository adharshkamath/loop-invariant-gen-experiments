{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main()\n{\n  int x, N, v1,v2,v3;\n  x = 0;\n  N = unknown_int();\n  while(x < N)\n  {\n    x = x + 1;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(N < 0 || x == N);\n}\n    \n}",
        "success": false,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant v1 is non-deterministic;\nloop invariant v2 is non-deterministic;\nloop invariant v3 is non-deterministic;\nloop invariant x + 1 == (x + 1);\nloop invariant unknown_int() == unknown_int();\nloop invariant N == N;\nloop invariant x + 1 <= N;\nloop invariant x <= N;\nloop invariant x + 1 == x + 1;\nloop invariant x == x;\nloop invariant x == x + 1;\nloop invariant x + 1 == x + 1;\nloop invariant x + 1 <= N;\nloop invariant x <= N;\nloop invariant x == x;\nloop invariant x == x + 1;\nloop invariant x + 1 == x + 1;\nloop invariant x + 1 <= N;\nloop invariant x <= N;\nloop invariant x == x;\nloop invariant x == x + 1;\nloop invariant x + 1 == x + 1;\nloop invariant x + 1 <= N;\nloop invariant x <= N;\nloop invariant x == x;\nloop invariant x == x + 1;\nloop invariant x + 1 == x + 1;\nloop invariant x + 1 <= N;\nloop invariant x <= N;\nloop invariant x == x;\nloop invariant x == x + 1;\nloop invariant x + 1 == x + 1;\nloop invariant x + 1 <= N;\nloop invariant x <= N;\nloop invariant x == x;\nloop invariant x == x + 1;\nloop invariant x + 1 == x + 1;\nloop invariant x + 1 <= N;\nloop invariant x <= N;\nloop invariant x == x;\nloop invariant x == x + 1;\nloop invariant x + 1 == x + 1;\nloop invariant x + 1 <= N;\nloop invariant x <= N;\nloop invariant x == x;\nloop invariant x == x + 1;\nloop invariant x + 1 == x + 1;\nloop invariant x + 1 <= N;\nloop invariant x <= N;\nloop invariant x == x;\nloop invariant x == x + 1;\nloop invariant x + 1 == x + 1;\nloop invariant x + 1 <= N;\nloop invariant x <= N;\nloop invariant x == x;\nloop invariant x == x + 1;\nloop invariant x + 1 == x + 1;\nloop invariant x + 1 <= N;\nloop invariant x <= N;\nloop invariant x == x;\nloop invariant x == x + 1;\nloop invariant x + 1 == x + 1;\nloop invariant x + 1 <= N;\nloop invariant x <= N;\nloop invariant x == x;\nloop invariant x == x + 1;\nloop invariant x + 1 == x + 1;\nloop invariant x + 1 <= N;\nloop invariant x <= N;\nloop invariant x == x;\nloop invariant x == x + 1;\nloop invariant x + 1 == x + 1;\nloop invariant x + 1 <= N;\nloop invariant x <= N;\nloop invariant x == x;\nloop invariant x == x + 1;\nloop invariant x + 1 == x + 1;\nloop invariant x + 1 <= N;\nloop invariant x <= N;\nloop invariant x == x;\nloop invariant x == x + 1;\nloop invariant x + 1 == x + 1;\nloop invariant x + 1 <= N;\nloop invariant x <= N;\nloop invariant x == x;\nloop invariant x == x + 1;\nloop invariant x + 1 == x + 1;\nloop invariant x + 1 <= N;\nloop invariant x <= N;\nloop invariant x == x;\nloop invariant x == x + 1;\nloop invariant x + 1 == x + 1;\nloop invariant x + 1 <= N;\nloop invariant x <= N;\nloop invariant x == x;\nloop invariant x == x + 1;\nloop invariant x + 1 == x + 1;\nloop invariant x + 1 <= N;\nloop invariant x <= N;\nloop invariant x == x;\nloop invariant x == x + 1;\nloop invariant x + 1 == x + 1;\nloop invariant x + 1 <= N;\nloop invariant x <= N;\nloop invariant x == x;\nloop invariant x == x + 1;\nloop invariant x + 1 == x + 1;\nloop invariant x + 1 <= N;\nloop invariant x <= N;\nloop invariant x == x;\nloop invariant x == x + 1;\nloop invariant x + 1 == x + 1;\nloop invariant x + 1 <= N;\nloop invariant x <= N;\nloop invariant x == x;\nloop invariant x == x + 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant 0 <= v1 <= 2147483647;\nloop invariant 0 <= v2 <= 2147483647;\nloop invariant 0 <= v3 <= 2147483647;\nloop invariant N = unknown_int();\nloop invariant v1 = unknown_int();\nloop invariant v2 = unknown_int();\nloop invariant v3 = unknown_int();\nloop invariant (x == N) ==> (v1 <= 2147483647);\nloop invariant (x == N) ==> (v2 <= 2147483647);\nloop invariant (x == N) ==> (v3 <= 2147483647);\nloop invariant (x == N) ==> (x >= 0);\nloop invariant (x == N) ==> (v1 >= 0);\nloop invariant (x == N) ==> (v2 >= 0);\nloop invariant (x == N) ==> (v3 >= 0);\nloop invariant (x < N) ==> (v1 >= 0);\nloop invariant (x < N) ==> (v2 >= 0);\nloop invariant (x < N) ==> (v3 >= 0);\nloop invariant (x < N) ==> (v1 <= 2147483647);\nloop invariant (x < N) ==> (v2 <= 2147483647);\nloop invariant (x < N) ==> (v3 <= 2147483647);\nloop invariant (x < N) ==> (x >= 0);\nloop invariant (x < N) ==> (v1 == unknown_int());\nloop invariant (x < N) ==> (v2 == unknown_int());\nloop invariant (x < N) ==> (v3 == unknown_int());\nloop invariant (x < N) ==> (N == unknown_int());\nloop invariant (x < N) ==> (x < unknown_int());\nloop invariant (x < N) ==> (v1 <= unknown_int());\nloop invariant (x < N) ==> (v2 <= unknown_int());\nloop invariant (x < N) ==> (v3 <= unknown_int());\nloop invariant (x < N) ==> (v1 >= 0);\nloop invariant (x < N) ==> (v2 >= 0);\nloop invariant (x < N) ==> (v3 >= 0);\nloop invariant (x < N) ==> (x >= 0);\nloop invariant (x < N) ==> (v1 <= 2147483647);\nloop invariant (x < N) ==> (v2 <= 2147483647);\nloop invariant (x < N) ==> (v3 <= 2147483647);\nloop invariant (x < N) ==> (v1 >= 0);\nloop invariant (x < N) ==> (v2 >= 0);\nloop invariant (x < N) ==> (v3 >= 0);\nloop invariant (x < N) ==> (x >= 0);\nloop invariant (x < N) ==> (v1 <= 2147483647);\nloop invariant (x < N) ==> (v2 <= 2147483647);\nloop invariant (x < N) ==> (v3 <= 2147483647);\nloop invariant (x < N) ==> (v1 >= 0);\nloop invariant (x < N) ==> (v2 >= 0);\nloop invariant (x < N) ==> (v3 >= 0);\nloop invariant (x < N) ==> (x >= 0);\nloop invariant (x < N) ==> (v1 <= 2147483647);\nloop invariant (x < N) ==> (v2 <= 2147483647);\nloop invariant (x < N) ==> (v3 <= 2147483647);\nloop invariant (x < N) ==> (v1 >= 0);\nloop invariant (x < N) ==> (v2 >= 0);\nloop invariant (x < N) ==> (v3 >= 0);\nloop invariant (x < N) ==> (x >= 0);\nloop invariant (x < N) ==> (v1 <= 2147483647);\nloop invariant (x < N) ==> (v2 <= 2147483647);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant v1 = unknown_int();\nloop invariant v2 = unknown_int();\nloop invariant v3 = unknown_int();\nloop invariant x + 1 == N ==> x = N;\nloop invariant x + 1 != N ==> x < N;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant v1 and v2 and v3 are non-deterministic at the start of the loop;\nloop invariant x >= 0;\nloop invariant N >= 0;\nloop invariant v1, v2, v3 <= INT_MAX;\n*/\n```",
            "```\n/*@\nloop invariant v1 <= v2 <= v3;\nloop invariant v1 + v2 + v3 = 3;\nloop invariant v1 + v2 + v3 = N;\nloop invariant v1 + v2 + v3 = 3N;\nloop invariant v1 + v2 + v3 = N;\nloop invariant v1 + v2 + v3 = 3N;\nloop invariant v1 + v2 + v3 = N;\nloop invariant v1 + v2 + v3 = 3N;\nloop invariant v1 + v2 + v3 = N;\nloop invariant v1 + v2 + v3 = 3N;\nloop invariant v1 + v2 + v3 = N;\nloop invariant v1 + v2 + v3 = 3N;\nloop invariant v1 + v2 + v3 = N;\nloop invariant v1 + v2 + v3 = 3N;\nloop invariant v1 + v2 + v3 = N;\nloop invariant v1 + v2 + v3 = 3N;\nloop invariant v1 + v2 + v3 = N;\nloop invariant v1 + v2 + v3 = 3N;\nloop invariant v1 + v2 + v3 = N;\nloop invariant v1 + v2 + v3 = 3N;\nloop invariant v1 + v2 + v3 = N;\nloop invariant v1 + v2 + v3 = 3N;\nloop invariant v1 + v2 + v3 = N;\nloop invariant v1 + v2 + v3 = 3N;\nloop invariant v1 + v2 + v3 = N;\nloop invariant v1 + v2 + v3 = 3N;\nloop invariant v1 + v2 + v3 = N;\nloop invariant v1 + v2 + v3 = 3N;\nloop invariant v1 + v2 + v3 = N;\nloop invariant v1 + v2 + v3 = 3N;\nloop invariant v1 + v2 + v3 = N;\nloop invariant v1 + v2 + v3 = 3N;\nloop invariant v1 + v2 + v3 = N;\nloop invariant v1 + v2 + v3 = 3N;\nloop invariant v1 + v2 + v3 = N;\nloop invariant v1 + v2 + v3 = 3N;\nloop invariant v1 + v2 + v3 = N;\nloop invariant v1 + v2 + v3 = 3N;\nloop invariant v1 + v2 + v3 = N;\nloop invariant v1 + v2 + v3 = 3N;\nloop invariant v1 + v2 + v3 = N;\nloop invariant v1 + v2 + v3 = 3N;\nloop invariant v1 + v2 + v3 = N;\nloop invariant v1 + v2 + v3 = 3N;\nloop invariant v1 + v2 + v3 = N;\nloop invariant v1 + v2 + v3 = 3N;\nloop invariant v1 + v2 + v3 = N;\nloop invariant v1 + v2 + v3 = 3N;\nloop invariant v1 + v2 + v3 = N;\nloop invariant v1 + v2 + v3 = 3N;\nloop invariant v1 + v2 + v3 = N;\nloop invariant v1 + v2 + v3 = 3N;\nloop invariant v1 + v2 + v3 = N;\nloop invariant v1 + v2 + v3 = 3N;\nloop invariant v1 + v2 + v3 = N;\nloop invariant v1 + v2 + v3 = 3N;\nloop invariant v1 + v2 + v3 = N;\nloop invariant v1 + v2 + v3 = 3N;\nloop invariant v1 + v2 + v3 = N;\nloop invariant v1 + v2 + v3 = 3N;\nloop invariant v1 + v2 + v3 = N;\nloop invariant v1 + v2 + v3 = 3N;\nloop invariant v1 + v2 + v3 = N;\nloop invariant v1 + v2 + v3 = 3N;\nloop invariant v1 + v2 + v3 = N;\nloop invariant v1 + v2 + v3 = 3N;\nloop invariant v1 + v2 + v3 = N;\nloop invariant v1 + v2 + v3 = 3N;\nloop invariant v1 + v2 + v3 = N;\nloop invariant v1 + v2 + v3 = 3N;\nloop invariant v1 + v2 + v3 = N;\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant x >= N ==> x == N;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x;\nloop invariant x <= N;\nloop invariant v1 == v1;\nloop invariant v2 == v2;\nloop invariant v3 == v3;\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant 0 <= v1;\nloop invariant 0 <= v2;\nloop invariant 0 <= v3;\nloop invariant v1 <= 2147483647;\nloop invariant v2 <= 2147483647;\nloop invariant v3 <= 2147483647;\nloop invariant v1 >= -2147483648;\nloop invariant v2 >= -2147483648;\nloop invariant v3 >= -2147483648;\nloop invariant v1 == v1 ==> unknown_int() == unknown_int();\nloop invariant v2 == v2 ==> unknown_int() == unknown_int();\nloop invariant v3 == v3 ==> unknown_int() == unknown_int();\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant (x < N ==> v1 >= 0 && v2 >= 0 && v3 >= 0);\nloop invariant (x < N ==> v1 <= v2 && v2 <= v3);\n*/\n```",
            "```\n/*@\nloop invariant i1;\nloop invariant i2;\n*/\n```",
            "```\n/*@\nloop invariant x >= 0;\nloop invariant x <= N;\nloop invariant v1 is non-deterministic;\nloop invariant v2 is non-deterministic;\nloop invariant v3 is non-deterministic;\nloop invariant N is non-deterministic;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant v1 = v2 = v3;\n*/\n```",
            "```\n/*@\nloop invariant x <= N;\nloop invariant x >= 0;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant v1 <= v2;\nloop invariant v2 <= v3;\nloop invariant v1 <= v3;\nloop invariant v1 <= x;\nloop invariant v2 <= x;\nloop invariant v3 <= x;\nloop invariant x = N ==> v1 = N;\nloop invariant x = N ==> v2 = N;\nloop invariant x = N ==> v3 = N;\nloop invariant x = N ==> v1 <= v2;\nloop invariant x = N ==> v2 <= v3;\nloop invariant x = N ==> v1 <= v3;\nloop invariant x = N ==> v1 <= x;\nloop invariant x = N ==> v2 <= x;\nloop invariant x = N ==> v3 <= x;\nloop invariant x = N ==> N >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant 0 <= v1 <= N*v1;\nloop invariant 0 <= v2 <= N*v2;\nloop invariant 0 <= v3 <= N*v3;\nloop invariant v1 < N || x == N;\nloop invariant v2 < N || x == N;\nloop invariant v3 < N || x == N;\nloop invariant v1 == 0 || v2 == 0 || v3 == 0 || x == N;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant v1 == unknown_int();\nloop invariant v2 == unknown_int();\nloop invariant v3 == unknown_int();\nloop invariant N >= 0;\nloop invariant N <= 2147483647;\nloop invariant x >= 0;\nloop invariant x <= N;\nloop invariant v1 >= -2147483648;\nloop invariant v1 <= 2147483647;\nloop invariant v2 >= -2147483648;\nloop invariant v2 <= 2147483647;\nloop invariant v3 >= -2147483648;\nloop invariant v3 <= 2147483647;\nloop invariant v1 < v2 < v3 ==> v2 - v1 == 1 && v3 - v2 == 1;\nloop invariant x = N ==> (x >= 0 && x <= N && v1 == unknown_int() && v2 == unknown_int() && v3 == unknown_int() && N >= 0 && N <= 2147483647 && v1 >= -2147483648 && v1 <= 2147483647 && v2 >= -2147483648 && v2 <= 2147483647 && v3 >= -2147483648 && v3 <= 2147483647 && v1 < v2 < v3 ==> v2 - v1 == 1 && v3 - v2 == 1);\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant v1 is non-deterministic;\nloop invariant v2 is non-deterministic;\nloop invariant v3 is non-deterministic;\nloop invariant x + 1 == (x + 1);\nloop invariant unknown_int() == unknown_int();\nloop invariant N == N;\nloop invariant x + 1 <= N;\nloop invariant x <= N;\nloop invariant x + 1 == x + 1;\nloop invariant x == x;\nloop invariant x == x + 1;\nloop invariant x + 1 == x + 1;\nloop invariant x + 1 <= N;\nloop invariant x <= N;\nloop invariant x == x;\nloop invariant x == x + 1;\nloop invariant x + 1 == x + 1;\nloop invariant x + 1 <= N;\nloop invariant x <= N;\nloop invariant x == x;\nloop invariant x == x + 1;\nloop invariant x + 1 == x + 1;\nloop invariant x + 1 <= N;\nloop invariant x <= N;\nloop invariant x == x;\nloop invariant x == x + 1;\nloop invariant x + 1 == x + 1;\nloop invariant x + 1 <= N;\nloop invariant x <= N;\nloop invariant x == x;\nloop invariant x == x + 1;\nloop invariant x + 1 == x + 1;\nloop invariant x + 1 <= N;\nloop invariant x <= N;\nloop invariant x == x;\nloop invariant x == x + 1;\nloop invariant x + 1 == x + 1;\nloop invariant x + 1 <= N;\nloop invariant x <= N;\nloop invariant x == x;\nloop invariant x == x + 1;\nloop invariant x + 1 == x + 1;\nloop invariant x + 1 <= N;\nloop invariant x <= N;\nloop invariant x == x;\nloop invariant x == x + 1;\nloop invariant x + 1 == x + 1;\nloop invariant x + 1 <= N;\nloop invariant x <= N;\nloop invariant x == x;\nloop invariant x == x + 1;\nloop invariant x + 1 == x + 1;\nloop invariant x + 1 <= N;\nloop invariant x <= N;\nloop invariant x == x;\nloop invariant x == x + 1;\nloop invariant x + 1 == x + 1;\nloop invariant x + 1 <= N;\nloop invariant x <= N;\nloop invariant x == x;\nloop invariant x == x + 1;\nloop invariant x + 1 == x + 1;\nloop invariant x + 1 <= N;\nloop invariant x <= N;\nloop invariant x == x;\nloop invariant x == x + 1;\nloop invariant x + 1 == x + 1;\nloop invariant x + 1 <= N;\nloop invariant x <= N;\nloop invariant x == x;\nloop invariant x == x + 1;\nloop invariant x + 1 == x + 1;\nloop invariant x + 1 <= N;\nloop invariant x <= N;\nloop invariant x == x;\nloop invariant x == x + 1;\nloop invariant x + 1 == x + 1;\nloop invariant x + 1 <= N;\nloop invariant x <= N;\nloop invariant x == x;\nloop invariant x == x + 1;\nloop invariant x + 1 == x + 1;\nloop invariant x + 1 <= N;\nloop invariant x <= N;\nloop invariant x == x;\nloop invariant x == x + 1;\nloop invariant x + 1 == x + 1;\nloop invariant x + 1 <= N;\nloop invariant x <= N;\nloop invariant x == x;\nloop invariant x == x + 1;\nloop invariant x + 1 == x + 1;\nloop invariant x + 1 <= N;\nloop invariant x <= N;\nloop invariant x == x;\nloop invariant x == x + 1;\nloop invariant x + 1 == x + 1;\nloop invariant x + 1 <= N;\nloop invariant x <= N;\nloop invariant x == x;\nloop invariant x == x + 1;\nloop invariant x + 1 == x + 1;\nloop invariant x + 1 <= N;\nloop invariant x <= N;\nloop invariant x == x;\nloop invariant x == x + 1;\nloop invariant x + 1 == x + 1;\nloop invariant x + 1 <= N;\nloop invariant x <= N;\nloop invariant x == x;\nloop invariant x == x + 1;\nloop invariant x + 1 == x + 1;\nloop invariant x + 1 <= N;\nloop invariant x <= N;\nloop invariant x == x;\nloop invariant x == x + 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main()\n{\n  int x, N, v1,v2,v3;\n  x = 0;\n  N = unknown_int();\n  /*@\n\n\n\n\nloop invariant i5: x + 1 == (x + 1);\n\nloop invariant i7: N == N;\n\n\nloop invariant i10: x + 1 == x + 1;\nloop invariant i11: x == x;\n\n*/\nwhile(x < N)\n  {\n    x = x + 1;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(N < 0 || x == N);\n}\n    \n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 15,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant 0 <= v1 <= 2147483647;\nloop invariant 0 <= v2 <= 2147483647;\nloop invariant 0 <= v3 <= 2147483647;\nloop invariant N = unknown_int();\nloop invariant v1 = unknown_int();\nloop invariant v2 = unknown_int();\nloop invariant v3 = unknown_int();\nloop invariant (x == N) ==> (v1 <= 2147483647);\nloop invariant (x == N) ==> (v2 <= 2147483647);\nloop invariant (x == N) ==> (v3 <= 2147483647);\nloop invariant (x == N) ==> (x >= 0);\nloop invariant (x == N) ==> (v1 >= 0);\nloop invariant (x == N) ==> (v2 >= 0);\nloop invariant (x == N) ==> (v3 >= 0);\nloop invariant (x < N) ==> (v1 >= 0);\nloop invariant (x < N) ==> (v2 >= 0);\nloop invariant (x < N) ==> (v3 >= 0);\nloop invariant (x < N) ==> (v1 <= 2147483647);\nloop invariant (x < N) ==> (v2 <= 2147483647);\nloop invariant (x < N) ==> (v3 <= 2147483647);\nloop invariant (x < N) ==> (x >= 0);\nloop invariant (x < N) ==> (v1 == unknown_int());\nloop invariant (x < N) ==> (v2 == unknown_int());\nloop invariant (x < N) ==> (v3 == unknown_int());\nloop invariant (x < N) ==> (N == unknown_int());\nloop invariant (x < N) ==> (x < unknown_int());\nloop invariant (x < N) ==> (v1 <= unknown_int());\nloop invariant (x < N) ==> (v2 <= unknown_int());\nloop invariant (x < N) ==> (v3 <= unknown_int());\nloop invariant (x < N) ==> (v1 >= 0);\nloop invariant (x < N) ==> (v2 >= 0);\nloop invariant (x < N) ==> (v3 >= 0);\nloop invariant (x < N) ==> (x >= 0);\nloop invariant (x < N) ==> (v1 <= 2147483647);\nloop invariant (x < N) ==> (v2 <= 2147483647);\nloop invariant (x < N) ==> (v3 <= 2147483647);\nloop invariant (x < N) ==> (v1 >= 0);\nloop invariant (x < N) ==> (v2 >= 0);\nloop invariant (x < N) ==> (v3 >= 0);\nloop invariant (x < N) ==> (x >= 0);\nloop invariant (x < N) ==> (v1 <= 2147483647);\nloop invariant (x < N) ==> (v2 <= 2147483647);\nloop invariant (x < N) ==> (v3 <= 2147483647);\nloop invariant (x < N) ==> (v1 >= 0);\nloop invariant (x < N) ==> (v2 >= 0);\nloop invariant (x < N) ==> (v3 >= 0);\nloop invariant (x < N) ==> (x >= 0);\nloop invariant (x < N) ==> (v1 <= 2147483647);\nloop invariant (x < N) ==> (v2 <= 2147483647);\nloop invariant (x < N) ==> (v3 <= 2147483647);\nloop invariant (x < N) ==> (v1 >= 0);\nloop invariant (x < N) ==> (v2 >= 0);\nloop invariant (x < N) ==> (v3 >= 0);\nloop invariant (x < N) ==> (x >= 0);\nloop invariant (x < N) ==> (v1 <= 2147483647);\nloop invariant (x < N) ==> (v2 <= 2147483647);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main()\n{\n  int x, N, v1,v2,v3;\n  x = 0;\n  N = unknown_int();\n  /*@\n\n\n\n\n\n\n\n\nloop invariant i9: (x == N) ==> (v1 <= 2147483647);\nloop invariant i10: (x == N) ==> (v2 <= 2147483647);\nloop invariant i11: (x == N) ==> (v3 <= 2147483647);\nloop invariant i12: (x == N) ==> (x >= 0);\n\n\n\n\n\n\nloop invariant i19: (x < N) ==> (v1 <= 2147483647);\nloop invariant i20: (x < N) ==> (v2 <= 2147483647);\nloop invariant i21: (x < N) ==> (v3 <= 2147483647);\nloop invariant i22: (x < N) ==> (x >= 0);\n\n\n\n\n\n\n\n\n*/\nwhile(x < N)\n  {\n    x = x + 1;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(N < 0 || x == N);\n}\n    \n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant v1 = unknown_int();\nloop invariant v2 = unknown_int();\nloop invariant v3 = unknown_int();\nloop invariant x + 1 == N ==> x = N;\nloop invariant x + 1 != N ==> x < N;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main()\n{\n  int x, N, v1,v2,v3;\n  x = 0;\n  N = unknown_int();\n  /*@\n\n\n\n\n\n\n*/\nwhile(x < N)\n  {\n    x = x + 1;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(N < 0 || x == N);\n}\n    \n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant v1 and v2 and v3 are non-deterministic at the start of the loop;\nloop invariant x >= 0;\nloop invariant N >= 0;\nloop invariant v1, v2, v3 <= INT_MAX;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main()\n{\n  int x, N, v1,v2,v3;\n  x = 0;\n  N = unknown_int();\n  /*@\n\n\nloop invariant i3: x >= 0;\n\n\n*/\nwhile(x < N)\n  {\n    x = x + 1;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(N < 0 || x == N);\n}\n    \n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant v1 <= v2 <= v3;\nloop invariant v1 + v2 + v3 = 3;\nloop invariant v1 + v2 + v3 = N;\nloop invariant v1 + v2 + v3 = 3N;\nloop invariant v1 + v2 + v3 = N;\nloop invariant v1 + v2 + v3 = 3N;\nloop invariant v1 + v2 + v3 = N;\nloop invariant v1 + v2 + v3 = 3N;\nloop invariant v1 + v2 + v3 = N;\nloop invariant v1 + v2 + v3 = 3N;\nloop invariant v1 + v2 + v3 = N;\nloop invariant v1 + v2 + v3 = 3N;\nloop invariant v1 + v2 + v3 = N;\nloop invariant v1 + v2 + v3 = 3N;\nloop invariant v1 + v2 + v3 = N;\nloop invariant v1 + v2 + v3 = 3N;\nloop invariant v1 + v2 + v3 = N;\nloop invariant v1 + v2 + v3 = 3N;\nloop invariant v1 + v2 + v3 = N;\nloop invariant v1 + v2 + v3 = 3N;\nloop invariant v1 + v2 + v3 = N;\nloop invariant v1 + v2 + v3 = 3N;\nloop invariant v1 + v2 + v3 = N;\nloop invariant v1 + v2 + v3 = 3N;\nloop invariant v1 + v2 + v3 = N;\nloop invariant v1 + v2 + v3 = 3N;\nloop invariant v1 + v2 + v3 = N;\nloop invariant v1 + v2 + v3 = 3N;\nloop invariant v1 + v2 + v3 = N;\nloop invariant v1 + v2 + v3 = 3N;\nloop invariant v1 + v2 + v3 = N;\nloop invariant v1 + v2 + v3 = 3N;\nloop invariant v1 + v2 + v3 = N;\nloop invariant v1 + v2 + v3 = 3N;\nloop invariant v1 + v2 + v3 = N;\nloop invariant v1 + v2 + v3 = 3N;\nloop invariant v1 + v2 + v3 = N;\nloop invariant v1 + v2 + v3 = 3N;\nloop invariant v1 + v2 + v3 = N;\nloop invariant v1 + v2 + v3 = 3N;\nloop invariant v1 + v2 + v3 = N;\nloop invariant v1 + v2 + v3 = 3N;\nloop invariant v1 + v2 + v3 = N;\nloop invariant v1 + v2 + v3 = 3N;\nloop invariant v1 + v2 + v3 = N;\nloop invariant v1 + v2 + v3 = 3N;\nloop invariant v1 + v2 + v3 = N;\nloop invariant v1 + v2 + v3 = 3N;\nloop invariant v1 + v2 + v3 = N;\nloop invariant v1 + v2 + v3 = 3N;\nloop invariant v1 + v2 + v3 = N;\nloop invariant v1 + v2 + v3 = 3N;\nloop invariant v1 + v2 + v3 = N;\nloop invariant v1 + v2 + v3 = 3N;\nloop invariant v1 + v2 + v3 = N;\nloop invariant v1 + v2 + v3 = 3N;\nloop invariant v1 + v2 + v3 = N;\nloop invariant v1 + v2 + v3 = 3N;\nloop invariant v1 + v2 + v3 = N;\nloop invariant v1 + v2 + v3 = 3N;\nloop invariant v1 + v2 + v3 = N;\nloop invariant v1 + v2 + v3 = 3N;\nloop invariant v1 + v2 + v3 = N;\nloop invariant v1 + v2 + v3 = 3N;\nloop invariant v1 + v2 + v3 = N;\nloop invariant v1 + v2 + v3 = 3N;\nloop invariant v1 + v2 + v3 = N;\nloop invariant v1 + v2 + v3 = 3N;\nloop invariant v1 + v2 + v3 = N;\nloop invariant v1 + v2 + v3 = 3N;\nloop invariant v1 + v2 + v3 = N;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main()\n{\n  int x, N, v1,v2,v3;\n  x = 0;\n  N = unknown_int();\n  /*@\n\n\n\n\n*/\nwhile(x < N)\n  {\n    x = x + 1;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(N < 0 || x == N);\n}\n    \n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main()\n{\n  int x, N, v1,v2,v3;\n  x = 0;\n  N = unknown_int();\n  /*@\n\n*/\nwhile(x < N)\n  {\n    x = x + 1;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(N < 0 || x == N);\n}\n    \n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant x >= N ==> x == N;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main()\n{\n  int x, N, v1,v2,v3;\n  x = 0;\n  N = unknown_int();\n  /*@\n\n\n*/\nwhile(x < N)\n  {\n    x = x + 1;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(N < 0 || x == N);\n}\n    \n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= x;\nloop invariant x <= N;\nloop invariant v1 == v1;\nloop invariant v2 == v2;\nloop invariant v3 == v3;\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant unknown_int() == unknown_int();\nloop invariant 0 <= v1;\nloop invariant 0 <= v2;\nloop invariant 0 <= v3;\nloop invariant v1 <= 2147483647;\nloop invariant v2 <= 2147483647;\nloop invariant v3 <= 2147483647;\nloop invariant v1 >= -2147483648;\nloop invariant v2 >= -2147483648;\nloop invariant v3 >= -2147483648;\nloop invariant v1 == v1 ==> unknown_int() == unknown_int();\nloop invariant v2 == v2 ==> unknown_int() == unknown_int();\nloop invariant v3 == v3 ==> unknown_int() == unknown_int();\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main()\n{\n  int x, N, v1,v2,v3;\n  x = 0;\n  N = unknown_int();\n  /*@\nloop invariant i1: 0 <= x;\n\nloop invariant i3: v1 == v1;\nloop invariant i4: v2 == v2;\nloop invariant i5: v3 == v3;\n\n\n\n\nloop invariant i10: v1 <= 2147483647;\nloop invariant i11: v2 <= 2147483647;\nloop invariant i12: v3 <= 2147483647;\nloop invariant i13: v1 >= -2147483648;\nloop invariant i14: v2 >= -2147483648;\nloop invariant i15: v3 >= -2147483648;\n\n\n\n*/\nwhile(x < N)\n  {\n    x = x + 1;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(N < 0 || x == N);\n}\n    \n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant (x < N ==> v1 >= 0 && v2 >= 0 && v3 >= 0);\nloop invariant (x < N ==> v1 <= v2 && v2 <= v3);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main()\n{\n  int x, N, v1,v2,v3;\n  x = 0;\n  N = unknown_int();\n  /*@\n\n\n\n*/\nwhile(x < N)\n  {\n    x = x + 1;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(N < 0 || x == N);\n}\n    \n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant i1;\nloop invariant i2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main()\n{\n  int x, N, v1,v2,v3;\n  x = 0;\n  N = unknown_int();\n  /*@\n\n\n*/\nwhile(x < N)\n  {\n    x = x + 1;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(N < 0 || x == N);\n}\n    \n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant x >= 0;\nloop invariant x <= N;\nloop invariant v1 is non-deterministic;\nloop invariant v2 is non-deterministic;\nloop invariant v3 is non-deterministic;\nloop invariant N is non-deterministic;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main()\n{\n  int x, N, v1,v2,v3;\n  x = 0;\n  N = unknown_int();\n  /*@\nloop invariant i1: x >= 0;\n\n\n\n\n\n*/\nwhile(x < N)\n  {\n    x = x + 1;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(N < 0 || x == N);\n}\n    \n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant v1 = v2 = v3;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main()\n{\n  int x, N, v1,v2,v3;\n  x = 0;\n  N = unknown_int();\n  /*@\n\n\n*/\nwhile(x < N)\n  {\n    x = x + 1;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(N < 0 || x == N);\n}\n    \n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 13,
                "annotations": "```\n/*@\nloop invariant x <= N;\nloop invariant x >= 0;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant v1 <= v2;\nloop invariant v2 <= v3;\nloop invariant v1 <= v3;\nloop invariant v1 <= x;\nloop invariant v2 <= x;\nloop invariant v3 <= x;\nloop invariant x = N ==> v1 = N;\nloop invariant x = N ==> v2 = N;\nloop invariant x = N ==> v3 = N;\nloop invariant x = N ==> v1 <= v2;\nloop invariant x = N ==> v2 <= v3;\nloop invariant x = N ==> v1 <= v3;\nloop invariant x = N ==> v1 <= x;\nloop invariant x = N ==> v2 <= x;\nloop invariant x = N ==> v3 <= x;\nloop invariant x = N ==> N >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main()\n{\n  int x, N, v1,v2,v3;\n  x = 0;\n  N = unknown_int();\n  /*@\n\nloop invariant i2: x >= 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile(x < N)\n  {\n    x = x + 1;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(N < 0 || x == N);\n}\n    \n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant 0 <= v1 <= N*v1;\nloop invariant 0 <= v2 <= N*v2;\nloop invariant 0 <= v3 <= N*v3;\nloop invariant v1 < N || x == N;\nloop invariant v2 < N || x == N;\nloop invariant v3 < N || x == N;\nloop invariant v1 == 0 || v2 == 0 || v3 == 0 || x == N;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main()\n{\n  int x, N, v1,v2,v3;\n  x = 0;\n  N = unknown_int();\n  /*@\n\n\n\n\n\n\n\n\n*/\nwhile(x < N)\n  {\n    x = x + 1;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(N < 0 || x == N);\n}\n    \n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 8,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant v1 == unknown_int();\nloop invariant v2 == unknown_int();\nloop invariant v3 == unknown_int();\nloop invariant N >= 0;\nloop invariant N <= 2147483647;\nloop invariant x >= 0;\nloop invariant x <= N;\nloop invariant v1 >= -2147483648;\nloop invariant v1 <= 2147483647;\nloop invariant v2 >= -2147483648;\nloop invariant v2 <= 2147483647;\nloop invariant v3 >= -2147483648;\nloop invariant v3 <= 2147483647;\nloop invariant v1 < v2 < v3 ==> v2 - v1 == 1 && v3 - v2 == 1;\nloop invariant x = N ==> (x >= 0 && x <= N && v1 == unknown_int() && v2 == unknown_int() && v3 == unknown_int() && N >= 0 && N <= 2147483647 && v1 >= -2147483648 && v1 <= 2147483647 && v2 >= -2147483648 && v2 <= 2147483647 && v3 >= -2147483648 && v3 <= 2147483647 && v1 < v2 < v3 ==> v2 - v1 == 1 && v3 - v2 == 1);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main()\n{\n  int x, N, v1,v2,v3;\n  x = 0;\n  N = unknown_int();\n  /*@\n\n\n\n\n\nloop invariant i6: N <= 2147483647;\nloop invariant i7: x >= 0;\n\nloop invariant i9: v1 >= -2147483648;\nloop invariant i10: v1 <= 2147483647;\nloop invariant i11: v2 >= -2147483648;\nloop invariant i12: v2 <= 2147483647;\nloop invariant i13: v3 >= -2147483648;\nloop invariant i14: v3 <= 2147483647;\n\n\n*/\nwhile(x < N)\n  {\n    x = x + 1;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(N < 0 || x == N);\n}\n    \n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 16: unexpected token 'is'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main()\n{\n  int x, N, v1,v2,v3;\n  x = 0;\n  N = unknown_int();\n  /*@\nloop invariant i1: 0 <= x <= N;\nloop invariant i2: v1 is non-deterministic;\nloop invariant i3: v2 is non-deterministic;\nloop invariant i4: v3 is non-deterministic;\nloop invariant i5: x + 1 == (x + 1);\nloop invariant i6: unknown_int() == unknown_int();\nloop invariant i7: N == N;\nloop invariant i8: x + 1 <= N;\nloop invariant i9: x <= N;\nloop invariant i10: x + 1 == x + 1;\nloop invariant i11: x == x;\nloop invariant i12: x == x + 1;\nloop invariant i13: 0 <= v1 <= 2147483647;\nloop invariant i14: 0 <= v2 <= 2147483647;\nloop invariant i15: 0 <= v3 <= 2147483647;\nloop invariant i16: N = unknown_int();\nloop invariant i17: v1 = unknown_int();\nloop invariant i18: v2 = unknown_int();\nloop invariant i19: v3 = unknown_int();\nloop invariant i20: (x == N) ==> (v1 <= 2147483647);\nloop invariant i21: (x == N) ==> (v2 <= 2147483647);\nloop invariant i22: (x == N) ==> (v3 <= 2147483647);\nloop invariant i23: (x == N) ==> (x >= 0);\nloop invariant i24: (x == N) ==> (v1 >= 0);\nloop invariant i25: (x == N) ==> (v2 >= 0);\nloop invariant i26: (x == N) ==> (v3 >= 0);\nloop invariant i27: (x < N) ==> (v1 >= 0);\nloop invariant i28: (x < N) ==> (v2 >= 0);\nloop invariant i29: (x < N) ==> (v3 >= 0);\nloop invariant i30: (x < N) ==> (v1 <= 2147483647);\nloop invariant i31: (x < N) ==> (v2 <= 2147483647);\nloop invariant i32: (x < N) ==> (v3 <= 2147483647);\nloop invariant i33: (x < N) ==> (x >= 0);\nloop invariant i34: (x < N) ==> (v1 == unknown_int());\nloop invariant i35: (x < N) ==> (v2 == unknown_int());\nloop invariant i36: (x < N) ==> (v3 == unknown_int());\nloop invariant i37: (x < N) ==> (N == unknown_int());\nloop invariant i38: (x < N) ==> (x < unknown_int());\nloop invariant i39: (x < N) ==> (v1 <= unknown_int());\nloop invariant i40: (x < N) ==> (v2 <= unknown_int());\nloop invariant i41: (x < N) ==> (v3 <= unknown_int());\nloop invariant i42: x + 1 == N ==> x = N;\nloop invariant i43: x + 1 != N ==> x < N;\nloop invariant i44: v1 and v2 and v3 are non-deterministic at the start of the loop;\nloop invariant i45: x >= 0;\nloop invariant i46: N >= 0;\nloop invariant i47: v1, v2, v3 <= INT_MAX;\nloop invariant i48: v1 <= v2 <= v3;\nloop invariant i49: v1 + v2 + v3 = 3;\nloop invariant i50: v1 + v2 + v3 = N;\nloop invariant i51: v1 + v2 + v3 = 3N;\nloop invariant i52: x >= N ==> x == N;\nloop invariant i53: 0 <= x;\nloop invariant i54: v1 == v1;\nloop invariant i55: v2 == v2;\nloop invariant i56: v3 == v3;\nloop invariant i57: 0 <= v1;\nloop invariant i58: 0 <= v2;\nloop invariant i59: 0 <= v3;\nloop invariant i60: v1 <= 2147483647;\nloop invariant i61: v2 <= 2147483647;\nloop invariant i62: v3 <= 2147483647;\nloop invariant i63: v1 >= -2147483648;\nloop invariant i64: v2 >= -2147483648;\nloop invariant i65: v3 >= -2147483648;\nloop invariant i66: v1 == v1 ==> unknown_int() == unknown_int();\nloop invariant i67: v2 == v2 ==> unknown_int() == unknown_int();\nloop invariant i68: v3 == v3 ==> unknown_int() == unknown_int();\nloop invariant i69: (x < N ==> v1 >= 0 && v2 >= 0 && v3 >= 0);\nloop invariant i70: (x < N ==> v1 <= v2 && v2 <= v3);\nloop invariant i71: i1;\nloop invariant i72: i2;\nloop invariant i73: N is non-deterministic;\nloop invariant i74: v1 = v2 = v3;\nloop invariant i75: v1 >= 0;\nloop invariant i76: v2 >= 0;\nloop invariant i77: v3 >= 0;\nloop invariant i78: v1 <= v2;\nloop invariant i79: v2 <= v3;\nloop invariant i80: v1 <= v3;\nloop invariant i81: v1 <= x;\nloop invariant i82: v2 <= x;\nloop invariant i83: v3 <= x;\nloop invariant i84: x = N ==> v1 = N;\nloop invariant i85: x = N ==> v2 = N;\nloop invariant i86: x = N ==> v3 = N;\nloop invariant i87: x = N ==> v1 <= v2;\nloop invariant i88: x = N ==> v2 <= v3;\nloop invariant i89: x = N ==> v1 <= v3;\nloop invariant i90: x = N ==> v1 <= x;\nloop invariant i91: x = N ==> v2 <= x;\nloop invariant i92: x = N ==> v3 <= x;\nloop invariant i93: x = N ==> N >= 0;\nloop invariant i94: 0 <= v1 <= N*v1;\nloop invariant i95: 0 <= v2 <= N*v2;\nloop invariant i96: 0 <= v3 <= N*v3;\nloop invariant i97: v1 < N || x == N;\nloop invariant i98: v2 < N || x == N;\nloop invariant i99: v3 < N || x == N;\nloop invariant i100: v1 == 0 || v2 == 0 || v3 == 0 || x == N;\nloop invariant i101: v1 == unknown_int();\nloop invariant i102: v2 == unknown_int();\nloop invariant i103: v3 == unknown_int();\nloop invariant i104: N <= 2147483647;\nloop invariant i105: v1 < v2 < v3 ==> v2 - v1 == 1 && v3 - v2 == 1;\nloop invariant i106: x = N ==> (x >= 0 && x <= N && v1 == unknown_int() && v2 == unknown_int() && v3 == unknown_int() && N >= 0 && N <= 2147483647 && v1 >= -2147483648 && v1 <= 2147483647 && v2 >= -2147483648 && v2 <= 2147483647 && v3 >= -2147483648 && v3 <= 2147483647 && v1 < v2 < v3 ==> v2 - v1 == 1 && v3 - v2 == 1);\n*/\nwhile(x < N)\n  {\n    x = x + 1;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(N < 0 || x == N);\n}\n    \n}",
        "combined_annotation_num_solver_calls": 50,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main()\n{\n  int x, N, v1,v2,v3;\n  x = 0;\n  N = unknown_int();\n  /*@\n\n\n\n\nloop invariant i5: x + 1 == (x + 1);\n\nloop invariant i7: N == N;\n\n\nloop invariant i10: x + 1 == x + 1;\nloop invariant i11: x == x;\n\n\n\n\n\n\n\n\nloop invariant i20: (x == N) ==> (v1 <= 2147483647);\nloop invariant i21: (x == N) ==> (v2 <= 2147483647);\nloop invariant i22: (x == N) ==> (v3 <= 2147483647);\nloop invariant i23: (x == N) ==> (x >= 0);\n\n\n\n\n\n\nloop invariant i30: (x < N) ==> (v1 <= 2147483647);\nloop invariant i31: (x < N) ==> (v2 <= 2147483647);\nloop invariant i32: (x < N) ==> (v3 <= 2147483647);\nloop invariant i33: (x < N) ==> (x >= 0);\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i45: x >= 0;\n\n\n\n\n\n\n\nloop invariant i53: 0 <= x;\nloop invariant i54: v1 == v1;\nloop invariant i55: v2 == v2;\nloop invariant i56: v3 == v3;\n\n\n\nloop invariant i60: v1 <= 2147483647;\nloop invariant i61: v2 <= 2147483647;\nloop invariant i62: v3 <= 2147483647;\nloop invariant i63: v1 >= -2147483648;\nloop invariant i64: v2 >= -2147483648;\nloop invariant i65: v3 >= -2147483648;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i104: N <= 2147483647;\n\n\n*/\nwhile(x < N)\n  {\n    x = x + 1;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(N < 0 || x == N);\n}\n    \n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/split.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c"
        ],
        "skipped": [],
        "total": 86,
        "success_count": 74,
        "failure_count": 12,
        "success_rate": 0.8604651162790697
    }
}