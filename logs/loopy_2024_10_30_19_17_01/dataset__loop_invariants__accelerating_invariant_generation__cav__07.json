{
    "logs": {
        "file": "../dataset/loop_invariants/accelerating_invariant_generation/cav/07.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1(){\n    int x; return x;\n}\n\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main()\n{\n  int n = unknown1();\n  int i=0, j=0;\n  if(!(n >= 0)) \n\nreturn;\n\n  while(i<n) {\n    i++;\n    j++;\n  }\t\n  if(j >= n+1)\n  { goto ERROR;\n    { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n  }\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant n >= 0;\nloop invariant i >= 0;\nloop invariant i < n;\nloop invariant j >= 0;\nloop invariant j == i + 1;\nloop invariant j <= n;\nloop invariant j < n+1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= j <= n;\nloop invariant j == i;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= j <= i;\n*/\n```",
            "```\n/*@\nloop invariant i >= 0;\nloop invariant j >= 1;\nloop invariant j <= i + 1;\nloop invariant i <= n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= j <= i;\nloop invariant i + j == n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= j <= n;\nloop invariant i <= j;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i + j <= 2 * n;\nloop invariant i + j >= n;\nloop invariant i * (i + 1) / 2 <= j;\nloop invariant i * (i + 1) / 2 >= 0;\nloop invariant j >= i + (i + 1) * i / 2;\nloop invariant j <= 2 * n;\n*/\n```",
            "```\n/*@\nloop invariant i < n;\nloop invariant j <= i;\nloop invariant j <= n;\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i == j;\n*/\n```",
            "```\n/*@\nloop invariant ( j <= i ) ==> ( i <= n );\nloop invariant j == (i + (n - i) * i / 2 );\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant (i <= unknown1() && n >= 0 && 0 <= i && i <= unknown1() && 0 <= j && i <= j);\nloop invariant (0 <= i && i <= unknown1() && 0 <= j && i <= j);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\n*/\n```",
            "```\n/*@\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant j == i;\nloop invariant i < n;\nloop invariant j < n+1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= j <= n;\nloop invariant i == j;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant 0 <= j <= i;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant j = i;\nloop invariant j = i + 1;\nloop invariant j = i - 1;\nloop invariant j = i * 2;\nloop invariant j = i / 2;\nloop invariant j = i % 2;\nloop invariant j = i + 1;\nloop invariant j = i - 1;\nloop invariant j = i * 2;\nloop invariant j = i / 2;\nloop invariant j = i % 2;\nloop invariant j = i + 1;\nloop invariant j = i - 1;\nloop invariant j = i * 2;\nloop invariant j = i / 2;\nloop invariant j = i % 2;\nloop invariant j = i + 1;\nloop invariant j = i - 1;\nloop invariant j = i * 2;\nloop invariant j = i / 2;\nloop invariant j = i % 2;\nloop invariant j = i + 1;\nloop invariant j = i - 1;\nloop invariant j = i * 2;\nloop invariant j = i / 2;\nloop invariant j = i % 2;\nloop invariant j = i + 1;\nloop invariant j = i - 1;\nloop invariant j = i * 2;\nloop invariant j = i / 2;\nloop invariant j = i % 2;\nloop invariant j = i + 1;\nloop invariant j = i - 1;\nloop invariant j = i * 2;\nloop invariant j = i / 2;\nloop invariant j = i % 2;\nloop invariant j = i + 1;\nloop invariant j = i - 1;\nloop invariant j = i * 2;\nloop invariant j = i / 2;\nloop invariant j = i % 2;\nloop invariant j = i + 1;\nloop invariant j = i - 1;\nloop invariant j = i * 2;\nloop invariant j = i / 2;\nloop invariant j = i % 2;\nloop invariant j = i + 1;\nloop invariant j = i - 1;\nloop invariant j = i * 2;\nloop invariant j = i / 2;\nloop invariant j = i % 2;\nloop invariant j = i + 1;\nloop invariant j = i - 1;\nloop invariant j = i * 2;\nloop invariant j = i / 2;\nloop invariant j = i % 2;\nloop invariant j = i + 1;\nloop invariant j = i - 1;\nloop invariant j = i * 2;\nloop invariant j = i / 2;\nloop invariant j = i % 2;\nloop invariant j = i + 1;\nloop invariant j = i - 1;\nloop invariant j = i * 2;\nloop invariant j = i / 2;\nloop invariant j = i % 2;\nloop invariant j = i + 1;\nloop invariant j = i - 1;\nloop invariant j = i * 2;\nloop invariant j = i / 2;\nloop invariant j = i % 2;\nloop invariant j = i + 1;\nloop invariant j = i - 1;\nloop invariant j = i * 2;\nloop invariant j = i / 2;\nloop invariant j = i % 2;\nloop invariant j = i + 1;\nloop invariant j = i - 1;\nloop invariant j = i * 2;\nloop invariant j = i / 2;\nloop invariant j = i % 2;\nloop invariant j = i + 1;\nloop invariant j = i - 1;\nloop invariant j = i * 2;\nloop invariant j = i / 2;\nloop invariant j = i % 2;\nloop invariant j = i + 1;\nloop invariant j = i - 1;\nloop invariant j = i * 2;\nloop invariant j = i / 2;\nloop invariant j = i % 2;\nloop invariant j = i + 1;\nloop invariant j = i - 1;\nloop invariant j = i * 2;\nloop invariant j = i / 2;\nloop invariant j = i % 2;\nloop invariant j = i + 1;\nloop invariant j = i - 1;\nloop invariant j = i * 2;\nloop invariant j = i / 2;\nloop invariant j = i % 2;\nloop invariant j = i + 1;\nloop invariant j = i - 1;\nloop invariant j = i * 2;\nloop invariant j = i / 2;\nloop invariant j = i % 2;\nloop invariant j = i + 1;\nloop invariant j = i - 1;\n*/\n```",
            "```\n/*@\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant j >= 0;\nloop invariant j <= n;\nloop invariant i + j >= n;\nloop invariant i + j <= n + 1;\nloop invariant j >= i;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant n >= 0;\nloop invariant i >= 0;\nloop invariant i < n;\nloop invariant j >= 0;\nloop invariant j == i + 1;\nloop invariant j <= n;\nloop invariant j < n+1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1(){\n    int x; return x;\n}\n\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main()\n{\n  int n = unknown1();\n  int i=0, j=0;\n  if(!(n >= 0)) \n\nreturn;\n\n  /*@\nloop invariant i1: n >= 0;\nloop invariant i2: i >= 0;\n\nloop invariant i4: j >= 0;\n\n\n\n*/\nwhile(i<n) {\n    i++;\n    j++;\n  }\t\n  if(j >= n+1)\n  { goto ERROR;\n    { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= j <= n;\nloop invariant j == i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1(){\n    int x; return x;\n}\n\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main()\n{\n  int n = unknown1();\n  int i=0, j=0;\n  if(!(n >= 0)) \n\nreturn;\n\n  /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= j <= n;\nloop invariant i3: j == i;\n*/\nwhile(i<n) {\n    i++;\n    j++;\n  }\t\n  if(j >= n+1)\n  { goto ERROR;\n    { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n  }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= j <= i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1(){\n    int x; return x;\n}\n\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main()\n{\n  int n = unknown1();\n  int i=0, j=0;\n  if(!(n >= 0)) \n\nreturn;\n\n  /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= j <= i;\n*/\nwhile(i<n) {\n    i++;\n    j++;\n  }\t\n  if(j >= n+1)\n  { goto ERROR;\n    { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n  }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant i >= 0;\nloop invariant j >= 1;\nloop invariant j <= i + 1;\nloop invariant i <= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1(){\n    int x; return x;\n}\n\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main()\n{\n  int n = unknown1();\n  int i=0, j=0;\n  if(!(n >= 0)) \n\nreturn;\n\n  /*@\nloop invariant i1: i >= 0;\n\nloop invariant i3: j <= i + 1;\nloop invariant i4: i <= n;\n*/\nwhile(i<n) {\n    i++;\n    j++;\n  }\t\n  if(j >= n+1)\n  { goto ERROR;\n    { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= j <= i;\nloop invariant i + j == n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1(){\n    int x; return x;\n}\n\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main()\n{\n  int n = unknown1();\n  int i=0, j=0;\n  if(!(n >= 0)) \n\nreturn;\n\n  /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= j <= i;\n\n*/\nwhile(i<n) {\n    i++;\n    j++;\n  }\t\n  if(j >= n+1)\n  { goto ERROR;\n    { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n  }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= j <= n;\nloop invariant i <= j;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i + j <= 2 * n;\nloop invariant i + j >= n;\nloop invariant i * (i + 1) / 2 <= j;\nloop invariant i * (i + 1) / 2 >= 0;\nloop invariant j >= i + (i + 1) * i / 2;\nloop invariant j <= 2 * n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1(){\n    int x; return x;\n}\n\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main()\n{\n  int n = unknown1();\n  int i=0, j=0;\n  if(!(n >= 0)) \n\nreturn;\n\n  /*@\nloop invariant i1: 0 <= i <= n;\n\nloop invariant i3: i <= j;\nloop invariant i4: i >= 0;\nloop invariant i5: j >= 0;\n\n\n\nloop invariant i9: i * (i + 1) / 2 >= 0;\n\n\n*/\nwhile(i<n) {\n    i++;\n    j++;\n  }\t\n  if(j >= n+1)\n  { goto ERROR;\n    { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant i < n;\nloop invariant j <= i;\nloop invariant j <= n;\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i == j;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1(){\n    int x; return x;\n}\n\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main()\n{\n  int n = unknown1();\n  int i=0, j=0;\n  if(!(n >= 0)) \n\nreturn;\n\n  /*@\n\nloop invariant i2: j <= i;\nloop invariant i3: j <= n;\nloop invariant i4: i <= n;\nloop invariant i5: i >= 0;\nloop invariant i6: j >= 0;\nloop invariant i7: i == j;\n*/\nwhile(i<n) {\n    i++;\n    j++;\n  }\t\n  if(j >= n+1)\n  { goto ERROR;\n    { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n  }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant ( j <= i ) ==> ( i <= n );\nloop invariant j == (i + (n - i) * i / 2 );\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1(){\n    int x; return x;\n}\n\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main()\n{\n  int n = unknown1();\n  int i=0, j=0;\n  if(!(n >= 0)) \n\nreturn;\n\n  /*@\nloop invariant i1: ( j <= i ) ==> ( i <= n );\n\n*/\nwhile(i<n) {\n    i++;\n    j++;\n  }\t\n  if(j >= n+1)\n  { goto ERROR;\n    { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1(){\n    int x; return x;\n}\n\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main()\n{\n  int n = unknown1();\n  int i=0, j=0;\n  if(!(n >= 0)) \n\nreturn;\n\n  /*@\n\n*/\nwhile(i<n) {\n    i++;\n    j++;\n  }\t\n  if(j >= n+1)\n  { goto ERROR;\n    { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant (i <= unknown1() && n >= 0 && 0 <= i && i <= unknown1() && 0 <= j && i <= j);\nloop invariant (0 <= i && i <= unknown1() && 0 <= j && i <= j);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1(){\n    int x; return x;\n}\n\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main()\n{\n  int n = unknown1();\n  int i=0, j=0;\n  if(!(n >= 0)) \n\nreturn;\n\n  /*@\n\n\n*/\nwhile(i<n) {\n    i++;\n    j++;\n  }\t\n  if(j >= n+1)\n  { goto ERROR;\n    { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1(){\n    int x; return x;\n}\n\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main()\n{\n  int n = unknown1();\n  int i=0, j=0;\n  if(!(n >= 0)) \n\nreturn;\n\n  /*@\nloop invariant i1: 0 <= i <= n;\n*/\nwhile(i<n) {\n    i++;\n    j++;\n  }\t\n  if(j >= n+1)\n  { goto ERROR;\n    { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant j == i;\nloop invariant i < n;\nloop invariant j < n+1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1(){\n    int x; return x;\n}\n\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main()\n{\n  int n = unknown1();\n  int i=0, j=0;\n  if(!(n >= 0)) \n\nreturn;\n\n  /*@\nloop invariant i1: i >= 0;\nloop invariant i2: j >= 0;\nloop invariant i3: j == i;\n\nloop invariant i5: j < n+1;\n*/\nwhile(i<n) {\n    i++;\n    j++;\n  }\t\n  if(j >= n+1)\n  { goto ERROR;\n    { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n  }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= j <= n;\nloop invariant i == j;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1(){\n    int x; return x;\n}\n\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main()\n{\n  int n = unknown1();\n  int i=0, j=0;\n  if(!(n >= 0)) \n\nreturn;\n\n  /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= j <= n;\nloop invariant i3: i == j;\n*/\nwhile(i<n) {\n    i++;\n    j++;\n  }\t\n  if(j >= n+1)\n  { goto ERROR;\n    { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n  }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant 0 <= j <= i;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant j = i;\nloop invariant j = i + 1;\nloop invariant j = i - 1;\nloop invariant j = i * 2;\nloop invariant j = i / 2;\nloop invariant j = i % 2;\nloop invariant j = i + 1;\nloop invariant j = i - 1;\nloop invariant j = i * 2;\nloop invariant j = i / 2;\nloop invariant j = i % 2;\nloop invariant j = i + 1;\nloop invariant j = i - 1;\nloop invariant j = i * 2;\nloop invariant j = i / 2;\nloop invariant j = i % 2;\nloop invariant j = i + 1;\nloop invariant j = i - 1;\nloop invariant j = i * 2;\nloop invariant j = i / 2;\nloop invariant j = i % 2;\nloop invariant j = i + 1;\nloop invariant j = i - 1;\nloop invariant j = i * 2;\nloop invariant j = i / 2;\nloop invariant j = i % 2;\nloop invariant j = i + 1;\nloop invariant j = i - 1;\nloop invariant j = i * 2;\nloop invariant j = i / 2;\nloop invariant j = i % 2;\nloop invariant j = i + 1;\nloop invariant j = i - 1;\nloop invariant j = i * 2;\nloop invariant j = i / 2;\nloop invariant j = i % 2;\nloop invariant j = i + 1;\nloop invariant j = i - 1;\nloop invariant j = i * 2;\nloop invariant j = i / 2;\nloop invariant j = i % 2;\nloop invariant j = i + 1;\nloop invariant j = i - 1;\nloop invariant j = i * 2;\nloop invariant j = i / 2;\nloop invariant j = i % 2;\nloop invariant j = i + 1;\nloop invariant j = i - 1;\nloop invariant j = i * 2;\nloop invariant j = i / 2;\nloop invariant j = i % 2;\nloop invariant j = i + 1;\nloop invariant j = i - 1;\nloop invariant j = i * 2;\nloop invariant j = i / 2;\nloop invariant j = i % 2;\nloop invariant j = i + 1;\nloop invariant j = i - 1;\nloop invariant j = i * 2;\nloop invariant j = i / 2;\nloop invariant j = i % 2;\nloop invariant j = i + 1;\nloop invariant j = i - 1;\nloop invariant j = i * 2;\nloop invariant j = i / 2;\nloop invariant j = i % 2;\nloop invariant j = i + 1;\nloop invariant j = i - 1;\nloop invariant j = i * 2;\nloop invariant j = i / 2;\nloop invariant j = i % 2;\nloop invariant j = i + 1;\nloop invariant j = i - 1;\nloop invariant j = i * 2;\nloop invariant j = i / 2;\nloop invariant j = i % 2;\nloop invariant j = i + 1;\nloop invariant j = i - 1;\nloop invariant j = i * 2;\nloop invariant j = i / 2;\nloop invariant j = i % 2;\nloop invariant j = i + 1;\nloop invariant j = i - 1;\nloop invariant j = i * 2;\nloop invariant j = i / 2;\nloop invariant j = i % 2;\nloop invariant j = i + 1;\nloop invariant j = i - 1;\nloop invariant j = i * 2;\nloop invariant j = i / 2;\nloop invariant j = i % 2;\nloop invariant j = i + 1;\nloop invariant j = i - 1;\nloop invariant j = i * 2;\nloop invariant j = i / 2;\nloop invariant j = i % 2;\nloop invariant j = i + 1;\nloop invariant j = i - 1;\nloop invariant j = i * 2;\nloop invariant j = i / 2;\nloop invariant j = i % 2;\nloop invariant j = i + 1;\nloop invariant j = i - 1;\nloop invariant j = i * 2;\nloop invariant j = i / 2;\nloop invariant j = i % 2;\nloop invariant j = i + 1;\nloop invariant j = i - 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1(){\n    int x; return x;\n}\n\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main()\n{\n  int n = unknown1();\n  int i=0, j=0;\n  if(!(n >= 0)) \n\nreturn;\n\n  /*@\n\nloop invariant i2: 0 <= j <= i;\nloop invariant i3: i <= n;\nloop invariant i4: j <= n;\n\n\n\n\n\n\n*/\nwhile(i<n) {\n    i++;\n    j++;\n  }\t\n  if(j >= n+1)\n  { goto ERROR;\n    { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n  }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant j >= 0;\nloop invariant j <= n;\nloop invariant i + j >= n;\nloop invariant i + j <= n + 1;\nloop invariant j >= i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1(){\n    int x; return x;\n}\n\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main()\n{\n  int n = unknown1();\n  int i=0, j=0;\n  if(!(n >= 0)) \n\nreturn;\n\n  /*@\nloop invariant i1: i >= 0;\nloop invariant i2: i <= n;\nloop invariant i3: j >= 0;\n\n\n\nloop invariant i7: j >= i;\n*/\nwhile(i<n) {\n    i++;\n    j++;\n  }\t\n  if(j >= n+1)\n  { goto ERROR;\n    { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n  }\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 50: unexpected token ')'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1(){\n    int x; return x;\n}\n\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main()\n{\n  int n = unknown1();\n  int i=0, j=0;\n  if(!(n >= 0)) \n\nreturn;\n\n  /*@\nloop invariant i1: n >= 0;\nloop invariant i2: i >= 0;\nloop invariant i3: i < n;\nloop invariant i4: j >= 0;\nloop invariant i5: j == i + 1;\nloop invariant i6: j <= n;\nloop invariant i7: j < n+1;\nloop invariant i8: 0 <= i <= n;\nloop invariant i9: 0 <= j <= n;\nloop invariant i10: j == i;\nloop invariant i11: 0 <= j <= i;\nloop invariant i12: j >= 1;\nloop invariant i13: j <= i + 1;\nloop invariant i14: i <= n;\nloop invariant i15: i + j == n;\nloop invariant i16: i <= j;\nloop invariant i17: i + j <= 2 * n;\nloop invariant i18: i + j >= n;\nloop invariant i19: i * (i + 1) / 2 <= j;\nloop invariant i20: i * (i + 1) / 2 >= 0;\nloop invariant i21: j >= i + (i + 1) * i / 2;\nloop invariant i22: j <= 2 * n;\nloop invariant i23: j <= i;\nloop invariant i24: i == j;\nloop invariant i25: ( j <= i ) ==> ( i <= n );\nloop invariant i26: j == (i + (n - i) * i / 2 );\nloop invariant i27: (i <= unknown1() && n >= 0 && 0 <= i && i <= unknown1() && 0 <= j && i <= j);\nloop invariant i28: (0 <= i && i <= unknown1() && 0 <= j && i <= j);\nloop invariant i29: 1 <= i <= n;\nloop invariant i30: j = i;\nloop invariant i31: j = i + 1;\nloop invariant i32: j = i - 1;\nloop invariant i33: j = i * 2;\nloop invariant i34: j = i / 2;\nloop invariant i35: j = i % 2;\nloop invariant i36: i + j <= n + 1;\nloop invariant i37: j >= i;\n*/\nwhile(i<n) {\n    i++;\n    j++;\n  }\t\n  if(j >= n+1)\n  { goto ERROR;\n    { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n  }\n}",
        "combined_annotation_num_solver_calls": 16,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1(){\n    int x; return x;\n}\n\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main()\n{\n  int n = unknown1();\n  int i=0, j=0;\n  if(!(n >= 0)) \n\nreturn;\n\n  /*@\nloop invariant i1: n >= 0;\nloop invariant i2: i >= 0;\n\nloop invariant i4: j >= 0;\n\nloop invariant i6: j <= n;\nloop invariant i7: j < n+1;\nloop invariant i8: 0 <= i <= n;\nloop invariant i9: 0 <= j <= n;\nloop invariant i10: j == i;\nloop invariant i11: 0 <= j <= i;\n\nloop invariant i13: j <= i + 1;\nloop invariant i14: i <= n;\n\nloop invariant i16: i <= j;\nloop invariant i17: i + j <= 2 * n;\n\n\nloop invariant i20: i * (i + 1) / 2 >= 0;\n\nloop invariant i22: j <= 2 * n;\nloop invariant i23: j <= i;\nloop invariant i24: i == j;\nloop invariant i25: ( j <= i ) ==> ( i <= n );\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i37: j >= i;\n*/\nwhile(i<n) {\n    i++;\n    j++;\n  }\t\n  if(j >= n+1)\n  { goto ERROR;\n    { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n  }\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/split.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/11.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/15.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/16.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/18.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/23.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/30.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/32.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/37.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/38.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/41.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/43.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/44.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/46.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/popl.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/05.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/07.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/13.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/14.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/19.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/20.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/39.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/cav.c"
        ],
        "skipped": [],
        "total": 128,
        "success_count": 106,
        "failure_count": 22,
        "success_rate": 0.828125
    }
}