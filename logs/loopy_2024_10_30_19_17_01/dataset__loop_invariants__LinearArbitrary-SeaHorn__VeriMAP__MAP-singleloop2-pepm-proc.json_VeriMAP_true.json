{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n;\nint main() {\nint x=0;\nint y=0;\nint n = unknown_int();\n\n\tassume(n>=1);\n\n\twhile(x < 2*n){\n\t   x = x + 1;\n\n\t   if ( x > n )\n\t\t  y = y - 1;\n\t   else\n\t\t  y = y + 2;\n\t}\n\n\tif(x < y)\n\t\tgoto ERROR;\n\n\treturn 0;\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\treturn -1;\n}",
        "success": false,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= x <= 2*n;\nloop invariant -n <= y <= 2*n;\nloop invariant x >= 0;\nloop invariant y >= -n;\nloop invariant x <= 2*n;\nloop invariant y <= 2*n;\nloop invariant 0 <= y <= n;\nloop invariant n <= x <= 2*n;\nloop invariant x == y;\nloop invariant x >= 2*n;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= 2*n;\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 2*n;\nloop invariant 0 <= y <= 2*n;\nloop invariant x <= 2*y;\nloop invariant x >= 2*n - y;\nloop invariant x >= 0;\nloop invariant 0 <= y <= 2*n;\nloop invariant x <= 2*n;\nloop invariant x >= 0;\nloop invariant x <= 2*y;\nloop invariant x >= 2*n - y;\nloop invariant x >= 0;\nloop invariant 0 <= y <= 2*n;\nloop invariant x <= 2*n;\nloop invariant x >= 0;\nloop invariant x <= 2*y;\nloop invariant x >= 2*n - y;\nloop invariant x >= 0;\nloop invariant 0 <= y <= 2*n;\nloop invariant x <= 2*n;\nloop invariant x >= 0;\nloop invariant x <= 2*y;\nloop invariant x >= 2*n - y;\nloop invariant x >= 0;\nloop invariant 0 <= y <= 2*n;\nloop invariant x <= 2*n;\nloop invariant x >= 0;\nloop invariant x <= 2*y;\nloop invariant x >= 2*n - y;\nloop invariant x >= 0;\nloop invariant 0 <= y <= 2*n;\nloop invariant x <= 2*n;\nloop invariant x >= 0;\nloop invariant x <= 2*y;\nloop invariant x >= 2*n - y;\nloop invariant x >= 0;\nloop invariant 0 <= y <= 2*n;\nloop invariant x <= 2*n;\nloop invariant x >= 0;\nloop invariant x <= 2*y;\nloop invariant x >= 2*n - y;\nloop invariant x >= 0;\nloop invariant 0 <= y <= 2*n;\nloop invariant x <= 2*n;\nloop invariant x >= 0;\nloop invariant x <= 2*y;\nloop invariant x >= 2*n - y;\nloop invariant x >= 0;\nloop invariant 0 <= y <= 2*n;\nloop invariant x <= 2*n;\nloop invariant x >= 0;\nloop invariant x <= 2*y;\nloop invariant x >= 2*n - y;\nloop invariant x >= 0;\nloop invariant 0 <= y <= 2*n;\nloop invariant x <= 2*n;\nloop invariant x >= 0;\nloop invariant x <= 2*y;\nloop invariant x >= 2*n - y;\nloop invariant x >= 0;\nloop invariant 0 <= y <= 2*n;\nloop invariant x <= 2*n;\nloop invariant x >= 0;\nloop invariant x <= 2*y;\nloop invariant x >= 2*n - y;\nloop invariant x >= 0;\nloop invariant 0 <= y <= 2*n;\nloop invariant x <= 2*n;\nloop invariant x >= 0;\nloop invariant x <= 2*y;\nloop invariant x >= 2*n - y;\nloop invariant x >= 0;\nloop invariant 0 <= y <= 2*n;\nloop invariant x <= 2*n;\nloop invariant x >= 0;\nloop invariant x <= 2*y;\nloop invariant x >= 2*n - y;\nloop invariant x >= 0;\nloop invariant 0 <= y <= 2*n;\nloop invariant x <= 2*n;\nloop invariant x >= 0;\nloop invariant x <= 2*y;\nloop invariant x >= 2*n - y;\nloop invariant x >= 0;\nloop invariant 0 <= y <= 2*n;\nloop invariant x <= 2*n;\nloop invariant x >= 0;\nloop invariant x <= 2*y;\nloop invariant x >= 2*n - y;\nloop invariant x >= 0;\nloop invariant 0 <= y <= 2*n;\nloop invariant x <= 2*n;\nloop invariant x >= 0;\nloop invariant x <= 2*y;\nloop invariant x >= 2*n - y;\nloop invariant x >= 0;\nloop invariant 0 <= y <= 2*n;\nloop invariant x <= 2*n;\nloop invariant x >= 0;\nloop invariant x <= 2*y;\nloop invariant x >= 2*n - y;\nloop invariant x >= 0;\nloop invariant 0 <= y <= 2*n;\nloop invariant x <= 2*n;\nloop invariant x >= 0;\nloop invariant x <= 2*y;\nloop invariant x >= 2*n - y;\nloop invariant x >= 0;\nloop invariant 0 <= y <= 2*n;\nloop invariant x <= 2*n;\nloop invariant x >= 0;\nloop invariant x <= 2*y;\nloop invariant x >= 2*n - y;\nloop invariant x >= 0;\nloop invariant 0 <= y <= 2*n;\nloop invariant x <= 2*n;\nloop invariant x >= 0;\nloop invariant x <= 2*y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 2*n;\nloop invariant -n <= y <= n;\nloop invariant (x == y + 1) ==> (y >= n) ==> (x <= 2*n);\nloop invariant (x == y + 1) ==> (y <= n) ==> (x <= n);\nloop invariant (x == y + 2) ==> (y >= n) ==> (x <= 2*n);\nloop invariant (x == y + 2) ==> (y <= n) ==> (x <= n + 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 2*n;\nloop invariant -n <= y <= n;\nloop invariant (x >= n && y <= -1) ==> (x == y);\nloop invariant (x <= n && y >= 1) ==> (x == y);\nloop invariant (x > n && y < -1) ==> (x == y);\nloop invariant (x < n && y > 1) ==> (x == y);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 2*n;\nloop invariant x <= y;\nloop invariant n <= y <= 2*n;\nloop invariant 2*x - n <= y <= 2*x;\nloop invariant y <= 3*x - n;\nloop invariant x <= 2*n - y;\nloop invariant 3*x - 2*n <= y <= 3*x - n;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 2*n;\nloop invariant 0 <= y <= 2*n;\nloop invariant x >= y;\nloop invariant (x >= n) ==> (y <= n);\nloop invariant (x < n) ==> (y >= n);\nloop invariant (x >= n) ==> (y <= n);\nloop invariant (x < n) ==> (y >= n);\nloop invariant x + y <= 2*n;\nloop invariant x + y >= 0;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 2 * n;\nloop invariant 0 <= y <= 2 * n;\nloop invariant x >= y;\nloop invariant x <= 2 * n;\nloop invariant y >= 0;\nloop invariant y <= 2 * n;\nloop invariant x <= 2 * n;\nloop invariant y >= 0;\nloop invariant x >= y;\nloop invariant x <= 2 * n;\nloop invariant y >= 0;\nloop invariant y <= 2 * n;\nloop invariant x >= y;\nloop invariant x <= 2 * n;\nloop invariant y >= 0;\nloop invariant y <= 2 * n;\nloop invariant x >= y;\nloop invariant x <= 2 * n;\nloop invariant y >= 0;\nloop invariant y <= 2 * n;\nloop invariant x >= y;\nloop invariant x <= 2 * n;\nloop invariant y >= 0;\nloop invariant y <= 2 * n;\nloop invariant x >= y;\nloop invariant x <= 2 * n;\nloop invariant y >= 0;\nloop invariant y <= 2 * n;\nloop invariant x >= y;\nloop invariant x <= 2 * n;\nloop invariant y >= 0;\nloop invariant y <= 2 * n;\nloop invariant x >= y;\nloop invariant x <= 2 * n;\nloop invariant y >= 0;\nloop invariant y <= 2 * n;\nloop invariant x >= y;\nloop invariant x <= 2 * n;\nloop invariant y >= 0;\nloop invariant y <= 2 * n;\nloop invariant x >= y;\nloop invariant x <= 2 * n;\nloop invariant y >= 0;\nloop invariant y <= 2 * n;\nloop invariant x >= y;\nloop invariant x <= 2 * n;\nloop invariant y >= 0;\nloop invariant y <= 2 * n;\nloop invariant x >= y;\nloop invariant x <= 2 * n;\nloop invariant y >= 0;\nloop invariant y <= 2 * n;\nloop invariant x >= y;\nloop invariant x <= 2 * n;\nloop invariant y >= 0;\nloop invariant y <= 2 * n;\nloop invariant x >= y;\nloop invariant x <= 2 * n;\nloop invariant y >= 0;\nloop invariant y <= 2 * n;\nloop invariant x >= y;\nloop invariant x <= 2 * n;\nloop invariant y >= 0;\nloop invariant y <= 2 * n;\nloop invariant x >= y;\nloop invariant x <= 2 * n;\nloop invariant y >= 0;\nloop invariant y <= 2 * n;\nloop invariant x >= y;\nloop invariant x <= 2 * n;\nloop invariant y >= 0;\nloop invariant y <= 2 * n;\nloop invariant x >= y;\nloop invariant x <= 2 * n;\nloop invariant y >= 0;\nloop invariant y <= 2 * n;\nloop invariant x >= y;\nloop invariant x <= 2 * n;\nloop invariant y >= 0;\nloop invariant y <= 2 * n;\nloop invariant x >= y;\nloop invariant x <= 2 * n;\nloop invariant y >= 0;\nloop invariant y <= 2 * n;\nloop invariant x >= y;\nloop invariant x <= 2 * n;\nloop invariant y >= 0;\nloop invariant y <= 2 * n;\nloop invariant x >= y;\nloop invariant x <= 2 * n;\nloop invariant y >= 0;\nloop invariant y <= 2 * n;\nloop invariant x >= y;\nloop invariant x <= 2 * n;\nloop invariant y >= 0;\nloop invariant y <= 2 * n;\nloop invariant x >= y;\nloop invariant x <= 2 * n;\nloop invariant y >= 0;\nloop invariant y <= 2 * n;\nloop invariant x >= y;\nloop invariant x <= 2 * n;\nloop invariant y >= 0;\nloop invariant y <= 2 * n;\nloop invariant x >= y;\nloop invariant x <= 2 * n;\nloop invariant y >= 0;\nloop invariant y <= 2 * n;\nloop invariant x >= y;\nloop invariant x <= 2 * n;\nloop invariant y >= 0;\nloop invariant y <= 2 * n;\nloop invariant x >= y;\nloop invariant x <= 2 * n;\nloop invariant y >= 0;\nloop invariant y <= 2 * n;\nloop invariant x >= y;\nloop invariant x <= 2 * n;\nloop invariant y >= 0;\nloop invariant y <= 2 * n;\nloop invariant x >= y;\nloop invariant x <= 2 * n;\nloop invariant y >= 0;\nloop invariant y <= 2 * n;\nloop invariant x >= y;\nloop invariant x <= 2 * n;\nloop invariant y >= 0;\n*/\n```",
            "```\n/*@\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2*n;\nloop invariant y <= 2*n;\nloop invariant x == y ==> x == 2*n ==> y == 2*n;\nloop invariant x != y ==> x <= n ==> y >= 2*n;\nloop invariant x != y ==> x > n ==> y <= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 2*n;\nloop invariant 0 <= y <= 2*n;\nloop invariant (n >= 1);\nloop invariant (x <= 2*n);\nloop invariant (y <= 2*n);\nloop invariant (x >= y ==> x < 2*n);\nloop invariant (x < y ==> x >= n);\nloop invariant 0 <= x <= 2*n;\nloop invariant 0 <= y <= 2*n;\nloop invariant (n >= 1);\nloop invariant (x <= 2*n);\nloop invariant (y <= 2*n);\nloop invariant (x >= y ==> x < 2*n);\nloop invariant (x < y ==> x >= n);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 2*n;\nloop invariant x >= 0;\nloop invariant x <= 2*n;\nloop invariant y >= 0;\nloop invariant y <= 2*n;\nloop invariant x >= n;\nloop invariant y <= n;\nloop invariant x + y >= 2*n;\nloop invariant x + y <= 4*n;\nloop invariant x + y == 2*n;\n*/\n```",
            "```\n/*@\nloop invariant x >= 0;\nloop invariant x <= 2*n;\nloop invariant y >= -n;\nloop invariant y <= n;\nloop invariant x <= y ==> x == y;\nloop invariant !(x <= y) ==> x == y - 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 2*n;\nloop invariant -2*n <= y <= 2*n;\nloop invariant x >= y;\nloop invariant (-n) <= y <= n;\nloop invariant x <= y + 2*n;\nloop invariant x >= y - 2*n;\nloop invariant x >= y;\nloop invariant x <= y;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant x >= y + n;\nloop invariant x <= y + n;\nloop invariant x >= y + n;\nloop invariant x <= y + n;\nloop invariant x >= y + n;\nloop invariant x <= y + n;\nloop invariant x >= y + n;\nloop invariant x <= y + n;\nloop invariant x >= y + n;\nloop invariant x <= y + n;\nloop invariant x >= y + n;\nloop invariant x <= y + n;\nloop invariant x >= y + n;\nloop invariant x <= y + n;\nloop invariant x >= y + n;\nloop invariant x <= y + n;\nloop invariant x >= y + n;\nloop invariant x <= y + n;\nloop invariant x >= y + n;\nloop invariant x <= y + n;\nloop invariant x >= y + n;\nloop invariant x <= y + n;\nloop invariant x >= y + n;\nloop invariant x <= y + n;\nloop invariant x >= y + n;\nloop invariant x <= y + n;\nloop invariant x >= y + n;\nloop invariant x <= y + n;\nloop invariant x >= y + n;\nloop invariant x <= y + n;\nloop invariant x >= y + n;\nloop invariant x <= y + n;\nloop invariant x >= y + n;\nloop invariant x <= y + n;\nloop invariant x >= y + n;\nloop invariant x <= y + n;\nloop invariant x >= y + n;\nloop invariant x <= y + n;\nloop invariant x >= y + n;\nloop invariant x <= y + n;\nloop invariant x >= y + n;\nloop invariant x <= y + n;\nloop invariant x >= y + n;\nloop invariant x <= y + n;\nloop invariant x >= y + n;\nloop invariant x <= y + n;\nloop invariant x >= y + n;\nloop invariant x <= y + n;\nloop invariant x >= y + n;\nloop invariant x <= y + n;\nloop invariant x >= y + n;\nloop invariant x <= y + n;\nloop invariant x >= y + n;\nloop invariant x <= y + n;\nloop invariant x >= y + n;\nloop invariant x <= y + n;\nloop invariant x >= y + n;\nloop invariant x <= y + n;\nloop invariant x >= y + n;\nloop invariant x <= y + n;\nloop invariant x >= y + n;\nloop invariant x <= y + n;\nloop invariant x >= y + n;\nloop invariant x <= y + n;\nloop invariant x >= y + n;\nloop invariant x <= y + n;\nloop invariant x >= y + n;\nloop invariant x <= y + n;\nloop invariant x >= y + n;\nloop invariant x <= y + n;\nloop invariant x >= y + n;\nloop invariant x <= y + n;\nloop invariant x >= y + n;\nloop invariant x <= y + n;\nloop invariant x >= y + n;\nloop invariant x <= y + n;\nloop invariant x >= y + n;\nloop invariant x <= y + n;\nloop invariant x >= y + n;\nloop invariant x <= y + n;\nloop invariant x >= y + n;\nloop invariant x <= y + n;\nloop invariant x >= y + n;\nloop invariant x <= y + n;\nloop invariant x >= y + n;\nloop invariant x <= y + n;\nloop invariant x >= y + n;\nloop invariant x <= y + n;\nloop invariant x >= y + n;\nloop invariant x <= y + n;\nloop invariant x >= y + n;\nloop invariant x <= y + n;\nloop invariant x >= y + n;\nloop invariant x <= y + n;\nloop invariant x >= y + n;\nloop invariant x <= y + n;\nloop invariant x >= y + n;\nloop invariant x <= y + n;\nloop invariant x >= y + n;\nloop invariant x <= y + n;\nloop invariant x >= y + n;\nloop invariant x <= y + n;\nloop invariant x >= y + n;\nloop invariant x <= y + n;\nloop invariant x >= y + n;\nloop invariant x <= y + n;\nloop invariant x >= y + n;\nloop invariant x <= y + n;\nloop invariant x >= y + n;\nloop invariant x <= y + n;\nloop invariant x >= y + n;\nloop invariant x <= y + n;\nloop invariant x >= y + n;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= 2*n;\nloop invariant (x - n) * (x - n - 1) / 2 <= y <= (x - n) * (x - n + 1) / 2;\nloop invariant x >= n ==> y == (x - n) * (x - n - 1) / 2 + (x - n) * 2;\nloop invariant x < n ==> y == (x - n) * (x - n - 1) / 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= n;\nloop invariant 0 <= x <= 2*n;\nloop invariant x < y ==> (x >= y);\nloop invariant x < y ==> (x + 1) > n;\nloop invariant x < y ==> (y - 1) <= n;\nloop invariant x < y ==> (y - 1) < (x + 1);\nloop invariant x < y ==> (y - 1) < (x + 1) ==> (x - y) < -1;\nloop invariant x < y ==> (x - y) < -1 ==> (x - y) <= -1;\nloop invariant x < y ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1;\nloop invariant x < y ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1;\nloop invariant x < y ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1;\nloop invariant x < y ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1;\nloop invariant x < y ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1;\nloop invariant x < y ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1;\nloop invariant x < y ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1;\nloop invariant x < y ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1;\nloop invariant x < y ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1;\nloop invariant x < y ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1;\nloop invariant x < y ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 2*n;\nloop invariant -n <= y <= 2*n;\nloop invariant x >= 0;\nloop invariant y >= -n;\nloop invariant x <= 2*n;\nloop invariant y <= 2*n;\nloop invariant 0 <= y <= n;\nloop invariant n <= x <= 2*n;\nloop invariant x == y;\nloop invariant x >= 2*n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n;\nint main() {\nint x=0;\nint y=0;\nint n = unknown_int();\n\n\tassume(n>=1);\n\n\t/*@\nloop invariant i1: 0 <= x <= 2*n;\n\nloop invariant i3: x >= 0;\n\nloop invariant i5: x <= 2*n;\n\n\n\n\n\n*/\nwhile(x < 2*n){\n\t   x = x + 1;\n\n\t   if ( x > n )\n\t\t  y = y - 1;\n\t   else\n\t\t  y = y + 2;\n\t}\n\n\tif(x < y)\n\t\tgoto ERROR;\n\n\treturn 0;\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= 2*n;\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n;\nint main() {\nint x=0;\nint y=0;\nint n = unknown_int();\n\n\tassume(n>=1);\n\n\t/*@\n\n\n\n*/\nwhile(x < 2*n){\n\t   x = x + 1;\n\n\t   if ( x > n )\n\t\t  y = y - 1;\n\t   else\n\t\t  y = y + 2;\n\t}\n\n\tif(x < y)\n\t\tgoto ERROR;\n\n\treturn 0;\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 2*n;\nloop invariant 0 <= y <= 2*n;\nloop invariant x <= 2*y;\nloop invariant x >= 2*n - y;\nloop invariant x >= 0;\nloop invariant 0 <= y <= 2*n;\nloop invariant x <= 2*n;\nloop invariant x >= 0;\nloop invariant x <= 2*y;\nloop invariant x >= 2*n - y;\nloop invariant x >= 0;\nloop invariant 0 <= y <= 2*n;\nloop invariant x <= 2*n;\nloop invariant x >= 0;\nloop invariant x <= 2*y;\nloop invariant x >= 2*n - y;\nloop invariant x >= 0;\nloop invariant 0 <= y <= 2*n;\nloop invariant x <= 2*n;\nloop invariant x >= 0;\nloop invariant x <= 2*y;\nloop invariant x >= 2*n - y;\nloop invariant x >= 0;\nloop invariant 0 <= y <= 2*n;\nloop invariant x <= 2*n;\nloop invariant x >= 0;\nloop invariant x <= 2*y;\nloop invariant x >= 2*n - y;\nloop invariant x >= 0;\nloop invariant 0 <= y <= 2*n;\nloop invariant x <= 2*n;\nloop invariant x >= 0;\nloop invariant x <= 2*y;\nloop invariant x >= 2*n - y;\nloop invariant x >= 0;\nloop invariant 0 <= y <= 2*n;\nloop invariant x <= 2*n;\nloop invariant x >= 0;\nloop invariant x <= 2*y;\nloop invariant x >= 2*n - y;\nloop invariant x >= 0;\nloop invariant 0 <= y <= 2*n;\nloop invariant x <= 2*n;\nloop invariant x >= 0;\nloop invariant x <= 2*y;\nloop invariant x >= 2*n - y;\nloop invariant x >= 0;\nloop invariant 0 <= y <= 2*n;\nloop invariant x <= 2*n;\nloop invariant x >= 0;\nloop invariant x <= 2*y;\nloop invariant x >= 2*n - y;\nloop invariant x >= 0;\nloop invariant 0 <= y <= 2*n;\nloop invariant x <= 2*n;\nloop invariant x >= 0;\nloop invariant x <= 2*y;\nloop invariant x >= 2*n - y;\nloop invariant x >= 0;\nloop invariant 0 <= y <= 2*n;\nloop invariant x <= 2*n;\nloop invariant x >= 0;\nloop invariant x <= 2*y;\nloop invariant x >= 2*n - y;\nloop invariant x >= 0;\nloop invariant 0 <= y <= 2*n;\nloop invariant x <= 2*n;\nloop invariant x >= 0;\nloop invariant x <= 2*y;\nloop invariant x >= 2*n - y;\nloop invariant x >= 0;\nloop invariant 0 <= y <= 2*n;\nloop invariant x <= 2*n;\nloop invariant x >= 0;\nloop invariant x <= 2*y;\nloop invariant x >= 2*n - y;\nloop invariant x >= 0;\nloop invariant 0 <= y <= 2*n;\nloop invariant x <= 2*n;\nloop invariant x >= 0;\nloop invariant x <= 2*y;\nloop invariant x >= 2*n - y;\nloop invariant x >= 0;\nloop invariant 0 <= y <= 2*n;\nloop invariant x <= 2*n;\nloop invariant x >= 0;\nloop invariant x <= 2*y;\nloop invariant x >= 2*n - y;\nloop invariant x >= 0;\nloop invariant 0 <= y <= 2*n;\nloop invariant x <= 2*n;\nloop invariant x >= 0;\nloop invariant x <= 2*y;\nloop invariant x >= 2*n - y;\nloop invariant x >= 0;\nloop invariant 0 <= y <= 2*n;\nloop invariant x <= 2*n;\nloop invariant x >= 0;\nloop invariant x <= 2*y;\nloop invariant x >= 2*n - y;\nloop invariant x >= 0;\nloop invariant 0 <= y <= 2*n;\nloop invariant x <= 2*n;\nloop invariant x >= 0;\nloop invariant x <= 2*y;\nloop invariant x >= 2*n - y;\nloop invariant x >= 0;\nloop invariant 0 <= y <= 2*n;\nloop invariant x <= 2*n;\nloop invariant x >= 0;\nloop invariant x <= 2*y;\nloop invariant x >= 2*n - y;\nloop invariant x >= 0;\nloop invariant 0 <= y <= 2*n;\nloop invariant x <= 2*n;\nloop invariant x >= 0;\nloop invariant x <= 2*y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n;\nint main() {\nint x=0;\nint y=0;\nint n = unknown_int();\n\n\tassume(n>=1);\n\n\t/*@\nloop invariant i1: 0 <= x <= 2*n;\n\n\n\nloop invariant i5: x >= 0;\nloop invariant i6: x <= 2*n;\n*/\nwhile(x < 2*n){\n\t   x = x + 1;\n\n\t   if ( x > n )\n\t\t  y = y - 1;\n\t   else\n\t\t  y = y + 2;\n\t}\n\n\tif(x < y)\n\t\tgoto ERROR;\n\n\treturn 0;\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 2*n;\nloop invariant -n <= y <= n;\nloop invariant (x == y + 1) ==> (y >= n) ==> (x <= 2*n);\nloop invariant (x == y + 1) ==> (y <= n) ==> (x <= n);\nloop invariant (x == y + 2) ==> (y >= n) ==> (x <= 2*n);\nloop invariant (x == y + 2) ==> (y <= n) ==> (x <= n + 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n;\nint main() {\nint x=0;\nint y=0;\nint n = unknown_int();\n\n\tassume(n>=1);\n\n\t/*@\nloop invariant i1: 0 <= x <= 2*n;\n\nloop invariant i3: (x == y + 1) ==> (y >= n) ==> (x <= 2*n);\n\nloop invariant i5: (x == y + 2) ==> (y >= n) ==> (x <= 2*n);\nloop invariant i6: (x == y + 2) ==> (y <= n) ==> (x <= n + 2);\n*/\nwhile(x < 2*n){\n\t   x = x + 1;\n\n\t   if ( x > n )\n\t\t  y = y - 1;\n\t   else\n\t\t  y = y + 2;\n\t}\n\n\tif(x < y)\n\t\tgoto ERROR;\n\n\treturn 0;\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 2*n;\nloop invariant -n <= y <= n;\nloop invariant (x >= n && y <= -1) ==> (x == y);\nloop invariant (x <= n && y >= 1) ==> (x == y);\nloop invariant (x > n && y < -1) ==> (x == y);\nloop invariant (x < n && y > 1) ==> (x == y);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n;\nint main() {\nint x=0;\nint y=0;\nint n = unknown_int();\n\n\tassume(n>=1);\n\n\t/*@\nloop invariant i1: 0 <= x <= 2*n;\n\n\n\n\n\n*/\nwhile(x < 2*n){\n\t   x = x + 1;\n\n\t   if ( x > n )\n\t\t  y = y - 1;\n\t   else\n\t\t  y = y + 2;\n\t}\n\n\tif(x < y)\n\t\tgoto ERROR;\n\n\treturn 0;\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 2*n;\nloop invariant x <= y;\nloop invariant n <= y <= 2*n;\nloop invariant 2*x - n <= y <= 2*x;\nloop invariant y <= 3*x - n;\nloop invariant x <= 2*n - y;\nloop invariant 3*x - 2*n <= y <= 3*x - n;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\nloop invariant x <= 3*n - 2*y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n;\nint main() {\nint x=0;\nint y=0;\nint n = unknown_int();\n\n\tassume(n>=1);\n\n\t/*@\nloop invariant i1: 0 <= x <= 2*n;\n\n\n\n\n\n\n\n*/\nwhile(x < 2*n){\n\t   x = x + 1;\n\n\t   if ( x > n )\n\t\t  y = y - 1;\n\t   else\n\t\t  y = y + 2;\n\t}\n\n\tif(x < y)\n\t\tgoto ERROR;\n\n\treturn 0;\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 2*n;\nloop invariant 0 <= y <= 2*n;\nloop invariant x >= y;\nloop invariant (x >= n) ==> (y <= n);\nloop invariant (x < n) ==> (y >= n);\nloop invariant (x >= n) ==> (y <= n);\nloop invariant (x < n) ==> (y >= n);\nloop invariant x + y <= 2*n;\nloop invariant x + y >= 0;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n;\nint main() {\nint x=0;\nint y=0;\nint n = unknown_int();\n\n\tassume(n>=1);\n\n\t/*@\nloop invariant i1: 0 <= x <= 2*n;\n\n\n\n\n\nloop invariant i7: x + y >= 0;\n*/\nwhile(x < 2*n){\n\t   x = x + 1;\n\n\t   if ( x > n )\n\t\t  y = y - 1;\n\t   else\n\t\t  y = y + 2;\n\t}\n\n\tif(x < y)\n\t\tgoto ERROR;\n\n\treturn 0;\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 2 * n;\nloop invariant 0 <= y <= 2 * n;\nloop invariant x >= y;\nloop invariant x <= 2 * n;\nloop invariant y >= 0;\nloop invariant y <= 2 * n;\nloop invariant x <= 2 * n;\nloop invariant y >= 0;\nloop invariant x >= y;\nloop invariant x <= 2 * n;\nloop invariant y >= 0;\nloop invariant y <= 2 * n;\nloop invariant x >= y;\nloop invariant x <= 2 * n;\nloop invariant y >= 0;\nloop invariant y <= 2 * n;\nloop invariant x >= y;\nloop invariant x <= 2 * n;\nloop invariant y >= 0;\nloop invariant y <= 2 * n;\nloop invariant x >= y;\nloop invariant x <= 2 * n;\nloop invariant y >= 0;\nloop invariant y <= 2 * n;\nloop invariant x >= y;\nloop invariant x <= 2 * n;\nloop invariant y >= 0;\nloop invariant y <= 2 * n;\nloop invariant x >= y;\nloop invariant x <= 2 * n;\nloop invariant y >= 0;\nloop invariant y <= 2 * n;\nloop invariant x >= y;\nloop invariant x <= 2 * n;\nloop invariant y >= 0;\nloop invariant y <= 2 * n;\nloop invariant x >= y;\nloop invariant x <= 2 * n;\nloop invariant y >= 0;\nloop invariant y <= 2 * n;\nloop invariant x >= y;\nloop invariant x <= 2 * n;\nloop invariant y >= 0;\nloop invariant y <= 2 * n;\nloop invariant x >= y;\nloop invariant x <= 2 * n;\nloop invariant y >= 0;\nloop invariant y <= 2 * n;\nloop invariant x >= y;\nloop invariant x <= 2 * n;\nloop invariant y >= 0;\nloop invariant y <= 2 * n;\nloop invariant x >= y;\nloop invariant x <= 2 * n;\nloop invariant y >= 0;\nloop invariant y <= 2 * n;\nloop invariant x >= y;\nloop invariant x <= 2 * n;\nloop invariant y >= 0;\nloop invariant y <= 2 * n;\nloop invariant x >= y;\nloop invariant x <= 2 * n;\nloop invariant y >= 0;\nloop invariant y <= 2 * n;\nloop invariant x >= y;\nloop invariant x <= 2 * n;\nloop invariant y >= 0;\nloop invariant y <= 2 * n;\nloop invariant x >= y;\nloop invariant x <= 2 * n;\nloop invariant y >= 0;\nloop invariant y <= 2 * n;\nloop invariant x >= y;\nloop invariant x <= 2 * n;\nloop invariant y >= 0;\nloop invariant y <= 2 * n;\nloop invariant x >= y;\nloop invariant x <= 2 * n;\nloop invariant y >= 0;\nloop invariant y <= 2 * n;\nloop invariant x >= y;\nloop invariant x <= 2 * n;\nloop invariant y >= 0;\nloop invariant y <= 2 * n;\nloop invariant x >= y;\nloop invariant x <= 2 * n;\nloop invariant y >= 0;\nloop invariant y <= 2 * n;\nloop invariant x >= y;\nloop invariant x <= 2 * n;\nloop invariant y >= 0;\nloop invariant y <= 2 * n;\nloop invariant x >= y;\nloop invariant x <= 2 * n;\nloop invariant y >= 0;\nloop invariant y <= 2 * n;\nloop invariant x >= y;\nloop invariant x <= 2 * n;\nloop invariant y >= 0;\nloop invariant y <= 2 * n;\nloop invariant x >= y;\nloop invariant x <= 2 * n;\nloop invariant y >= 0;\nloop invariant y <= 2 * n;\nloop invariant x >= y;\nloop invariant x <= 2 * n;\nloop invariant y >= 0;\nloop invariant y <= 2 * n;\nloop invariant x >= y;\nloop invariant x <= 2 * n;\nloop invariant y >= 0;\nloop invariant y <= 2 * n;\nloop invariant x >= y;\nloop invariant x <= 2 * n;\nloop invariant y >= 0;\nloop invariant y <= 2 * n;\nloop invariant x >= y;\nloop invariant x <= 2 * n;\nloop invariant y >= 0;\nloop invariant y <= 2 * n;\nloop invariant x >= y;\nloop invariant x <= 2 * n;\nloop invariant y >= 0;\nloop invariant y <= 2 * n;\nloop invariant x >= y;\nloop invariant x <= 2 * n;\nloop invariant y >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n;\nint main() {\nint x=0;\nint y=0;\nint n = unknown_int();\n\n\tassume(n>=1);\n\n\t/*@\nloop invariant i1: 0 <= x <= 2 * n;\n\n\nloop invariant i4: x <= 2 * n;\n\n\n*/\nwhile(x < 2*n){\n\t   x = x + 1;\n\n\t   if ( x > n )\n\t\t  y = y - 1;\n\t   else\n\t\t  y = y + 2;\n\t}\n\n\tif(x < y)\n\t\tgoto ERROR;\n\n\treturn 0;\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2*n;\nloop invariant y <= 2*n;\nloop invariant x == y ==> x == 2*n ==> y == 2*n;\nloop invariant x != y ==> x <= n ==> y >= 2*n;\nloop invariant x != y ==> x > n ==> y <= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n;\nint main() {\nint x=0;\nint y=0;\nint n = unknown_int();\n\n\tassume(n>=1);\n\n\t/*@\nloop invariant i1: x >= 0;\n\nloop invariant i3: x <= 2*n;\n\nloop invariant i5: x == y ==> x == 2*n ==> y == 2*n;\n\n\n*/\nwhile(x < 2*n){\n\t   x = x + 1;\n\n\t   if ( x > n )\n\t\t  y = y - 1;\n\t   else\n\t\t  y = y + 2;\n\t}\n\n\tif(x < y)\n\t\tgoto ERROR;\n\n\treturn 0;\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 2*n;\nloop invariant 0 <= y <= 2*n;\nloop invariant (n >= 1);\nloop invariant (x <= 2*n);\nloop invariant (y <= 2*n);\nloop invariant (x >= y ==> x < 2*n);\nloop invariant (x < y ==> x >= n);\nloop invariant 0 <= x <= 2*n;\nloop invariant 0 <= y <= 2*n;\nloop invariant (n >= 1);\nloop invariant (x <= 2*n);\nloop invariant (y <= 2*n);\nloop invariant (x >= y ==> x < 2*n);\nloop invariant (x < y ==> x >= n);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n;\nint main() {\nint x=0;\nint y=0;\nint n = unknown_int();\n\n\tassume(n>=1);\n\n\t/*@\nloop invariant i1: 0 <= x <= 2*n;\n\nloop invariant i3: (n >= 1);\nloop invariant i4: (x <= 2*n);\n\n\n\n*/\nwhile(x < 2*n){\n\t   x = x + 1;\n\n\t   if ( x > n )\n\t\t  y = y - 1;\n\t   else\n\t\t  y = y + 2;\n\t}\n\n\tif(x < y)\n\t\tgoto ERROR;\n\n\treturn 0;\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 2*n;\nloop invariant x >= 0;\nloop invariant x <= 2*n;\nloop invariant y >= 0;\nloop invariant y <= 2*n;\nloop invariant x >= n;\nloop invariant y <= n;\nloop invariant x + y >= 2*n;\nloop invariant x + y <= 4*n;\nloop invariant x + y == 2*n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n;\nint main() {\nint x=0;\nint y=0;\nint n = unknown_int();\n\n\tassume(n>=1);\n\n\t/*@\nloop invariant i1: 0 <= x <= 2*n;\nloop invariant i2: x >= 0;\nloop invariant i3: x <= 2*n;\n\n\n\n\n\n\n\n*/\nwhile(x < 2*n){\n\t   x = x + 1;\n\n\t   if ( x > n )\n\t\t  y = y - 1;\n\t   else\n\t\t  y = y + 2;\n\t}\n\n\tif(x < y)\n\t\tgoto ERROR;\n\n\treturn 0;\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant x >= 0;\nloop invariant x <= 2*n;\nloop invariant y >= -n;\nloop invariant y <= n;\nloop invariant x <= y ==> x == y;\nloop invariant !(x <= y) ==> x == y - 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n;\nint main() {\nint x=0;\nint y=0;\nint n = unknown_int();\n\n\tassume(n>=1);\n\n\t/*@\nloop invariant i1: x >= 0;\nloop invariant i2: x <= 2*n;\n\n\n\n\n*/\nwhile(x < 2*n){\n\t   x = x + 1;\n\n\t   if ( x > n )\n\t\t  y = y - 1;\n\t   else\n\t\t  y = y + 2;\n\t}\n\n\tif(x < y)\n\t\tgoto ERROR;\n\n\treturn 0;\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 2*n;\nloop invariant -2*n <= y <= 2*n;\nloop invariant x >= y;\nloop invariant (-n) <= y <= n;\nloop invariant x <= y + 2*n;\nloop invariant x >= y - 2*n;\nloop invariant x >= y;\nloop invariant x <= y;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant x >= y + n;\nloop invariant x <= y + n;\nloop invariant x >= y + n;\nloop invariant x <= y + n;\nloop invariant x >= y + n;\nloop invariant x <= y + n;\nloop invariant x >= y + n;\nloop invariant x <= y + n;\nloop invariant x >= y + n;\nloop invariant x <= y + n;\nloop invariant x >= y + n;\nloop invariant x <= y + n;\nloop invariant x >= y + n;\nloop invariant x <= y + n;\nloop invariant x >= y + n;\nloop invariant x <= y + n;\nloop invariant x >= y + n;\nloop invariant x <= y + n;\nloop invariant x >= y + n;\nloop invariant x <= y + n;\nloop invariant x >= y + n;\nloop invariant x <= y + n;\nloop invariant x >= y + n;\nloop invariant x <= y + n;\nloop invariant x >= y + n;\nloop invariant x <= y + n;\nloop invariant x >= y + n;\nloop invariant x <= y + n;\nloop invariant x >= y + n;\nloop invariant x <= y + n;\nloop invariant x >= y + n;\nloop invariant x <= y + n;\nloop invariant x >= y + n;\nloop invariant x <= y + n;\nloop invariant x >= y + n;\nloop invariant x <= y + n;\nloop invariant x >= y + n;\nloop invariant x <= y + n;\nloop invariant x >= y + n;\nloop invariant x <= y + n;\nloop invariant x >= y + n;\nloop invariant x <= y + n;\nloop invariant x >= y + n;\nloop invariant x <= y + n;\nloop invariant x >= y + n;\nloop invariant x <= y + n;\nloop invariant x >= y + n;\nloop invariant x <= y + n;\nloop invariant x >= y + n;\nloop invariant x <= y + n;\nloop invariant x >= y + n;\nloop invariant x <= y + n;\nloop invariant x >= y + n;\nloop invariant x <= y + n;\nloop invariant x >= y + n;\nloop invariant x <= y + n;\nloop invariant x >= y + n;\nloop invariant x <= y + n;\nloop invariant x >= y + n;\nloop invariant x <= y + n;\nloop invariant x >= y + n;\nloop invariant x <= y + n;\nloop invariant x >= y + n;\nloop invariant x <= y + n;\nloop invariant x >= y + n;\nloop invariant x <= y + n;\nloop invariant x >= y + n;\nloop invariant x <= y + n;\nloop invariant x >= y + n;\nloop invariant x <= y + n;\nloop invariant x >= y + n;\nloop invariant x <= y + n;\nloop invariant x >= y + n;\nloop invariant x <= y + n;\nloop invariant x >= y + n;\nloop invariant x <= y + n;\nloop invariant x >= y + n;\nloop invariant x <= y + n;\nloop invariant x >= y + n;\nloop invariant x <= y + n;\nloop invariant x >= y + n;\nloop invariant x <= y + n;\nloop invariant x >= y + n;\nloop invariant x <= y + n;\nloop invariant x >= y + n;\nloop invariant x <= y + n;\nloop invariant x >= y + n;\nloop invariant x <= y + n;\nloop invariant x >= y + n;\nloop invariant x <= y + n;\nloop invariant x >= y + n;\nloop invariant x <= y + n;\nloop invariant x >= y + n;\nloop invariant x <= y + n;\nloop invariant x >= y + n;\nloop invariant x <= y + n;\nloop invariant x >= y + n;\nloop invariant x <= y + n;\nloop invariant x >= y + n;\nloop invariant x <= y + n;\nloop invariant x >= y + n;\nloop invariant x <= y + n;\nloop invariant x >= y + n;\nloop invariant x <= y + n;\nloop invariant x >= y + n;\nloop invariant x <= y + n;\nloop invariant x >= y + n;\nloop invariant x <= y + n;\nloop invariant x >= y + n;\nloop invariant x <= y + n;\nloop invariant x >= y + n;\nloop invariant x <= y + n;\nloop invariant x >= y + n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n;\nint main() {\nint x=0;\nint y=0;\nint n = unknown_int();\n\n\tassume(n>=1);\n\n\t/*@\nloop invariant i1: 0 <= x <= 2*n;\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile(x < 2*n){\n\t   x = x + 1;\n\n\t   if ( x > n )\n\t\t  y = y - 1;\n\t   else\n\t\t  y = y + 2;\n\t}\n\n\tif(x < y)\n\t\tgoto ERROR;\n\n\treturn 0;\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= 2*n;\nloop invariant (x - n) * (x - n - 1) / 2 <= y <= (x - n) * (x - n + 1) / 2;\nloop invariant x >= n ==> y == (x - n) * (x - n - 1) / 2 + (x - n) * 2;\nloop invariant x < n ==> y == (x - n) * (x - n - 1) / 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n;\nint main() {\nint x=0;\nint y=0;\nint n = unknown_int();\n\n\tassume(n>=1);\n\n\t/*@\n\n\n\n\n*/\nwhile(x < 2*n){\n\t   x = x + 1;\n\n\t   if ( x > n )\n\t\t  y = y - 1;\n\t   else\n\t\t  y = y + 2;\n\t}\n\n\tif(x < y)\n\t\tgoto ERROR;\n\n\treturn 0;\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= n;\nloop invariant 0 <= x <= 2*n;\nloop invariant x < y ==> (x >= y);\nloop invariant x < y ==> (x + 1) > n;\nloop invariant x < y ==> (y - 1) <= n;\nloop invariant x < y ==> (y - 1) < (x + 1);\nloop invariant x < y ==> (y - 1) < (x + 1) ==> (x - y) < -1;\nloop invariant x < y ==> (x - y) < -1 ==> (x - y) <= -1;\nloop invariant x < y ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1;\nloop invariant x < y ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1;\nloop invariant x < y ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1;\nloop invariant x < y ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1;\nloop invariant x < y ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1;\nloop invariant x < y ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1;\nloop invariant x < y ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1;\nloop invariant x < y ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1;\nloop invariant x < y ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1;\nloop invariant x < y ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1;\nloop invariant x < y ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n;\nint main() {\nint x=0;\nint y=0;\nint n = unknown_int();\n\n\tassume(n>=1);\n\n\t/*@\n\nloop invariant i2: 0 <= x <= 2*n;\n\n\n\n\n\nloop invariant i8: x < y ==> (x - y) < -1 ==> (x - y) <= -1;\nloop invariant i9: x < y ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1;\nloop invariant i10: x < y ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1;\nloop invariant i11: x < y ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1;\nloop invariant i12: x < y ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1;\nloop invariant i13: x < y ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1;\nloop invariant i14: x < y ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1;\nloop invariant i15: x < y ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1;\nloop invariant i16: x < y ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1;\nloop invariant i17: x < y ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1;\nloop invariant i18: x < y ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1;\nloop invariant i19: x < y ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1;\n*/\nwhile(x < 2*n){\n\t   x = x + 1;\n\n\t   if ( x > n )\n\t\t  y = y - 1;\n\t   else\n\t\t  y = y + 2;\n\t}\n\n\tif(x < y)\n\t\tgoto ERROR;\n\n\treturn 0;\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "loop invariant 0 <= x <= 2*n is partially proven to be inductive.\nloop invariant -n <= y <= 2*n is partially proven to be inductive.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant y >= -n is partially proven to be inductive.\nloop invariant x <= 2*n is partially proven to be inductive.\nloop invariant y <= 2*n is partially proven to be inductive.\nloop invariant 0 <= y <= n is partially proven to be inductive.\nloop invariant n <= x <= 2*n is preserved but not established.\nloop invariant x == y is partially proven to be inductive.\nloop invariant x >= 2*n is partially proven to be inductive.\nloop invariant 1 <= x <= 2*n is partially proven to be inductive.\nloop invariant 0 <= y <= 100000 is partially proven to be inductive.\nloop invariant x >= (1 + (y - 1) * y / 2) is partially proven to be inductive.\nloop invariant 0 <= y <= 2*n is partially proven to be inductive.\nloop invariant x <= 2*y is partially proven to be inductive.\nloop invariant x >= 2*n - y is partially proven to be inductive.\nloop invariant -n <= y <= n is partially proven to be inductive.\nloop invariant (x == y + 1) ==> (y >= n) ==> (x <= 2*n) is partially proven to be inductive.\nloop invariant (x == y + 1) ==> (y <= n) ==> (x <= n) is partially proven to be inductive.\nloop invariant (x == y + 2) ==> (y >= n) ==> (x <= 2*n) is partially proven to be inductive.\nloop invariant (x == y + 2) ==> (y <= n) ==> (x <= n + 2) is partially proven to be inductive.\nloop invariant (x >= n && y <= -1) ==> (x == y) is partially proven to be inductive.\nloop invariant (x <= n && y >= 1) ==> (x == y) is partially proven to be inductive.\nloop invariant (x > n && y < -1) ==> (x == y) is partially proven to be inductive.\nloop invariant (x < n && y > 1) ==> (x == y) is partially proven to be inductive.\nloop invariant x <= y is partially proven to be inductive.\nloop invariant n <= y <= 2*n is partially proven to be inductive.\nloop invariant 2*x - n <= y <= 2*x is partially proven to be inductive.\nloop invariant y <= 3*x - n is partially proven to be inductive.\nloop invariant x <= 2*n - y is partially proven to be inductive.\nloop invariant 3*x - 2*n <= y <= 3*x - n is partially proven to be inductive.\nloop invariant x <= 3*n - 2*y is partially proven to be inductive.\nloop invariant x >= y is partially proven to be inductive.\nloop invariant (x >= n) ==> (y <= n) is partially proven to be inductive.\nloop invariant (x < n) ==> (y >= n) is partially proven to be inductive.\nloop invariant x + y <= 2*n is partially proven to be inductive.\nloop invariant x + y >= 0 is partially proven to be inductive.\nloop invariant 0 <= x <= 2 * n is partially proven to be inductive.\nloop invariant 0 <= y <= 2 * n is partially proven to be inductive.\nloop invariant x <= 2 * n is partially proven to be inductive.\nloop invariant y >= 0 is partially proven to be inductive.\nloop invariant y <= 2 * n is partially proven to be inductive.\nloop invariant x == y ==> x == 2*n ==> y == 2*n is partially proven to be inductive.\nloop invariant x != y ==> x <= n ==> y >= 2*n is partially proven to be inductive.\nloop invariant x != y ==> x > n ==> y <= 0 is partially proven to be inductive.\nloop invariant (n >= 1) is partially proven to be inductive.\nloop invariant (x <= 2*n) is partially proven to be inductive.\nloop invariant (y <= 2*n) is partially proven to be inductive.\nloop invariant (x >= y ==> x < 2*n) is partially proven to be inductive.\nloop invariant (x < y ==> x >= n) is partially proven to be inductive.\nloop invariant x >= n is partially proven to be inductive.\nloop invariant y <= n is partially proven to be inductive.\nloop invariant x + y >= 2*n is partially proven to be inductive.\nloop invariant x + y <= 4*n is partially proven to be inductive.\nloop invariant x + y == 2*n is partially proven to be inductive.\nloop invariant x <= y ==> x == y is partially proven to be inductive.\nloop invariant !(x <= y) ==> x == y - 1 is partially proven to be inductive.\nloop invariant -2*n <= y <= 2*n is partially proven to be inductive.\nloop invariant (-n) <= y <= n is partially proven to be inductive.\nloop invariant x <= y + 2*n is partially proven to be inductive.\nloop invariant x >= y - 2*n is partially proven to be inductive.\nloop invariant x >= 1 is partially proven to be inductive.\nloop invariant x >= y + n is partially proven to be inductive.\nloop invariant x <= y + n is partially proven to be inductive.\nloop invariant (x - n) * (x - n - 1) / 2 <= y <= (x - n) * (x - n + 1) / 2 is partially proven to be inductive.\nloop invariant x >= n ==> y == (x - n) * (x - n - 1) / 2 + (x - n) * 2 is partially proven to be inductive.\nloop invariant x < n ==> y == (x - n) * (x - n - 1) / 2 is partially proven to be inductive.\nloop invariant x < y ==> (x >= y) is partially proven to be inductive.\nloop invariant x < y ==> (x + 1) > n is partially proven to be inductive.\nloop invariant x < y ==> (y - 1) <= n is partially proven to be inductive.\nloop invariant x < y ==> (y - 1) < (x + 1) is partially proven to be inductive.\nloop invariant x < y ==> (y - 1) < (x + 1) ==> (x - y) < -1 is partially proven to be inductive.\nloop invariant x < y ==> (x - y) < -1 ==> (x - y) <= -1 is partially proven to be inductive.\nloop invariant x < y ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 is partially proven to be inductive.\nloop invariant x < y ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 is partially proven to be inductive.\nloop invariant x < y ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 is partially proven to be inductive.\nloop invariant x < y ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 is partially proven to be inductive.\nloop invariant x < y ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 is partially proven to be inductive.\nloop invariant x < y ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 is partially proven to be inductive.\nloop invariant x < y ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 is partially proven to be inductive.\nloop invariant x < y ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 is partially proven to be inductive.\nloop invariant x < y ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 is partially proven to be inductive.\nloop invariant x < y ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 is partially proven to be inductive.\nloop invariant x < y ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 is partially proven to be inductive.\nAssertion \\false: Partially proven",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n;\nint main() {\nint x=0;\nint y=0;\nint n = unknown_int();\n\n\tassume(n>=1);\n\n\t/*@\nloop invariant i1: 0 <= x <= 2*n;\nloop invariant i2: -n <= y <= 2*n;\nloop invariant i3: x >= 0;\nloop invariant i4: y >= -n;\nloop invariant i5: x <= 2*n;\nloop invariant i6: y <= 2*n;\nloop invariant i7: 0 <= y <= n;\nloop invariant i8: n <= x <= 2*n;\nloop invariant i9: x == y;\nloop invariant i10: x >= 2*n;\nloop invariant i11: 1 <= x <= 2*n;\nloop invariant i12: 0 <= y <= 100000;\nloop invariant i13: x >= (1 + (y - 1) * y / 2);\nloop invariant i14: 0 <= y <= 2*n;\nloop invariant i15: x <= 2*y;\nloop invariant i16: x >= 2*n - y;\nloop invariant i17: -n <= y <= n;\nloop invariant i18: (x == y + 1) ==> (y >= n) ==> (x <= 2*n);\nloop invariant i19: (x == y + 1) ==> (y <= n) ==> (x <= n);\nloop invariant i20: (x == y + 2) ==> (y >= n) ==> (x <= 2*n);\nloop invariant i21: (x == y + 2) ==> (y <= n) ==> (x <= n + 2);\nloop invariant i22: (x >= n && y <= -1) ==> (x == y);\nloop invariant i23: (x <= n && y >= 1) ==> (x == y);\nloop invariant i24: (x > n && y < -1) ==> (x == y);\nloop invariant i25: (x < n && y > 1) ==> (x == y);\nloop invariant i26: x <= y;\nloop invariant i27: n <= y <= 2*n;\nloop invariant i28: 2*x - n <= y <= 2*x;\nloop invariant i29: y <= 3*x - n;\nloop invariant i30: x <= 2*n - y;\nloop invariant i31: 3*x - 2*n <= y <= 3*x - n;\nloop invariant i32: x <= 3*n - 2*y;\nloop invariant i33: x >= y;\nloop invariant i34: (x >= n) ==> (y <= n);\nloop invariant i35: (x < n) ==> (y >= n);\nloop invariant i36: x + y <= 2*n;\nloop invariant i37: x + y >= 0;\nloop invariant i38: 0 <= x <= 2 * n;\nloop invariant i39: 0 <= y <= 2 * n;\nloop invariant i40: x <= 2 * n;\nloop invariant i41: y >= 0;\nloop invariant i42: y <= 2 * n;\nloop invariant i43: x == y ==> x == 2*n ==> y == 2*n;\nloop invariant i44: x != y ==> x <= n ==> y >= 2*n;\nloop invariant i45: x != y ==> x > n ==> y <= 0;\nloop invariant i46: (n >= 1);\nloop invariant i47: (x <= 2*n);\nloop invariant i48: (y <= 2*n);\nloop invariant i49: (x >= y ==> x < 2*n);\nloop invariant i50: (x < y ==> x >= n);\nloop invariant i51: x >= n;\nloop invariant i52: y <= n;\nloop invariant i53: x + y >= 2*n;\nloop invariant i54: x + y <= 4*n;\nloop invariant i55: x + y == 2*n;\nloop invariant i56: x <= y ==> x == y;\nloop invariant i57: !(x <= y) ==> x == y - 1;\nloop invariant i58: -2*n <= y <= 2*n;\nloop invariant i59: (-n) <= y <= n;\nloop invariant i60: x <= y + 2*n;\nloop invariant i61: x >= y - 2*n;\nloop invariant i62: x >= 1;\nloop invariant i63: x >= y + n;\nloop invariant i64: x <= y + n;\nloop invariant i65: (x - n) * (x - n - 1) / 2 <= y <= (x - n) * (x - n + 1) / 2;\nloop invariant i66: x >= n ==> y == (x - n) * (x - n - 1) / 2 + (x - n) * 2;\nloop invariant i67: x < n ==> y == (x - n) * (x - n - 1) / 2;\nloop invariant i68: x < y ==> (x >= y);\nloop invariant i69: x < y ==> (x + 1) > n;\nloop invariant i70: x < y ==> (y - 1) <= n;\nloop invariant i71: x < y ==> (y - 1) < (x + 1);\nloop invariant i72: x < y ==> (y - 1) < (x + 1) ==> (x - y) < -1;\nloop invariant i73: x < y ==> (x - y) < -1 ==> (x - y) <= -1;\nloop invariant i74: x < y ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1;\nloop invariant i75: x < y ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1;\nloop invariant i76: x < y ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1;\nloop invariant i77: x < y ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1;\nloop invariant i78: x < y ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1;\nloop invariant i79: x < y ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1;\nloop invariant i80: x < y ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1;\nloop invariant i81: x < y ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1;\nloop invariant i82: x < y ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1;\nloop invariant i83: x < y ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1;\nloop invariant i84: x < y ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1;\n*/\nwhile(x < 2*n){\n\t   x = x + 1;\n\n\t   if ( x > n )\n\t\t  y = y - 1;\n\t   else\n\t\t  y = y + 2;\n\t}\n\n\tif(x < y)\n\t\tgoto ERROR;\n\n\treturn 0;\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\treturn -1;\n}",
        "combined_annotation_num_solver_calls": 37,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n;\nint main() {\nint x=0;\nint y=0;\nint n = unknown_int();\n\n\tassume(n>=1);\n\n\t/*@\nloop invariant i1: 0 <= x <= 2*n;\n\nloop invariant i3: x >= 0;\n\nloop invariant i5: x <= 2*n;\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i18: (x == y + 1) ==> (y >= n) ==> (x <= 2*n);\n\nloop invariant i20: (x == y + 2) ==> (y >= n) ==> (x <= 2*n);\nloop invariant i21: (x == y + 2) ==> (y <= n) ==> (x <= n + 2);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i37: x + y >= 0;\nloop invariant i38: 0 <= x <= 2 * n;\n\nloop invariant i40: x <= 2 * n;\n\n\nloop invariant i43: x == y ==> x == 2*n ==> y == 2*n;\n\n\nloop invariant i46: (n >= 1);\nloop invariant i47: (x <= 2*n);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i73: x < y ==> (x - y) < -1 ==> (x - y) <= -1;\nloop invariant i74: x < y ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1;\nloop invariant i75: x < y ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1;\nloop invariant i76: x < y ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1;\nloop invariant i77: x < y ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1;\nloop invariant i78: x < y ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1;\nloop invariant i79: x < y ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1;\nloop invariant i80: x < y ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1;\nloop invariant i81: x < y ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1;\nloop invariant i82: x < y ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1;\nloop invariant i83: x < y ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1;\nloop invariant i84: x < y ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1 ==> (x - y) <= -1;\n*/\nwhile(x < 2*n){\n\t   x = x + 1;\n\n\t   if ( x > n )\n\t\t  y = y - 1;\n\t   else\n\t\t  y = y + 2;\n\t}\n\n\tif(x < y)\n\t\tgoto ERROR;\n\n\treturn 0;\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\treturn -1;\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c"
        ],
        "skipped": [],
        "total": 5,
        "success_count": 4,
        "failure_count": 1,
        "success_rate": 0.8
    }
}