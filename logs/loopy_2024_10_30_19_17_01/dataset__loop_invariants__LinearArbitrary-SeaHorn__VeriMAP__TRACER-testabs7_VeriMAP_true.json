{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(int n){\n  int i;\n\n  i=0;n=10;\n  while (i < n){ i++; }\n\n  {;\n//@ assert(!( i>10 ));\n}\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant i < n ==> n >= 10;\nloop invariant n >= 10 ==> i <= n;\n*/\n```",
            "```\n/*@\nloop invariant i < n;\nloop invariant i >= 0;\nloop invariant n == 10;\nloop invariant i <= n;\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant i = i + 1;\n*/\n```",
            "```\n/*@\nloop invariant i <= n;\nloop invariant n == 10;\nloop invariant i >= 0;\nloop invariant i < n;\nloop invariant n >= 1;\nloop invariant n <= 10;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant i < n;\nloop invariant n >= 1;\nloop invariant n <= 10;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant i < n;\nloop invariant n >= 1;\nloop invariant n <= 10;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant i < n;\nloop invariant n >= 1;\nloop invariant n <= 10;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant i < n;\nloop invariant n >= 1;\nloop invariant n <= 10;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant i < n;\nloop invariant n >= 1;\nloop invariant n <= 10;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant i < n;\nloop invariant n >= 1;\nloop invariant n <= 10;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant i < n;\nloop invariant n >= 1;\nloop invariant n <= 10;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant i < n;\nloop invariant n >= 1;\nloop invariant n <= 10;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant i < n;\nloop invariant n >= 1;\nloop invariant n <= 10;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant i < n;\nloop invariant n >= 1;\nloop invariant n <= 10;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant i < n;\nloop invariant n >= 1;\nloop invariant n <= 10;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant i < n;\nloop invariant n >= 1;\nloop invariant n <= 10;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant i < n;\nloop invariant n >= 1;\nloop invariant n <= 10;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant i < n;\nloop invariant n >= 1;\nloop invariant n <= 10;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant i < n;\nloop invariant n >= 1;\nloop invariant n <= 10;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant i < n;\nloop invariant n >= 1;\nloop invariant n <= 10;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant i < n;\nloop invariant n >= 1;\nloop invariant n <= 10;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant i < n;\nloop invariant n >= 1;\nloop invariant n <= 10;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant i < n;\nloop invariant n >= 1;\nloop invariant n <= 10;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant i < n;\nloop invariant n >= 1;\nloop invariant n <= 10;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant i < n;\nloop invariant n >= 1;\nloop invariant n <= 10;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant i < n;\nloop invariant n >= 1;\nloop invariant n <= 10;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant i < n;\nloop invariant n >= 1;\nloop invariant n <= 10;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant i < n;\nloop invariant n >= 1;\nloop invariant n <= 10;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant i < n;\nloop invariant n >= 1;\nloop invariant n <= 10;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant i < n;\nloop invariant n >= 1;\nloop invariant n <= 10;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant i < n;\nloop invariant n >= 1;\nloop invariant n <= 10;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant i < n;\nloop invariant n >= 1;\nloop invariant n <= 10;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant i < n;\nloop invariant 0 <= i <= n;\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant i < n;\nloop invariant 0 <= i <= n;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant i < n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant i == n;\nloop invariant i >= 0;\nloop invariant i > 0 ==> i <= n;\nloop invariant i == 0 ==> i < n;\nloop invariant n == 10;\nloop invariant n > 0;\nloop invariant i >= 0 ==> i <= n;\nloop invariant i > 0 ==> i < n;\nloop invariant i == 0 ==> i <= n;\nloop invariant i > 0 ==> n > 0;\nloop invariant i == 0 ==> n > 0;\nloop invariant i > 0 ==> n > 0;\nloop invariant i > 0 ==> i <= n;\nloop invariant i == 0 ==> i < n;\nloop invariant i > 0 ==> n > 0;\nloop invariant i == 0 ==> n > 0;\nloop invariant i > 0 ==> n > 0;\nloop invariant i > 0 ==> i <= n;\nloop invariant i == 0 ==> i < n;\nloop invariant i > 0 ==> n > 0;\nloop invariant i == 0 ==> n > 0;\nloop invariant i > 0 ==> n > 0;\nloop invariant i > 0 ==> i <= n;\nloop invariant i == 0 ==> i < n;\nloop invariant i > 0 ==> n > 0;\nloop invariant i == 0 ==> n > 0;\nloop invariant i > 0 ==> n > 0;\nloop invariant i > 0 ==> i <= n;\nloop invariant i == 0 ==> i < n;\nloop invariant i > 0 ==> n > 0;\nloop invariant i == 0 ==> n > 0;\nloop invariant i > 0 ==> n > 0;\nloop invariant i > 0 ==> i <= n;\nloop invariant i == 0 ==> i < n;\nloop invariant i > 0 ==> n > 0;\nloop invariant i == 0 ==> n > 0;\nloop invariant i > 0 ==> n > 0;\nloop invariant i > 0 ==> i <= n;\nloop invariant i == 0 ==> i < n;\nloop invariant i > 0 ==> n > 0;\nloop invariant i == 0 ==> n > 0;\nloop invariant i > 0 ==> n > 0;\nloop invariant i > 0 ==> i <= n;\nloop invariant i == 0 ==> i < n;\nloop invariant i > 0 ==> n > 0;\nloop invariant i == 0 ==> n > 0;\nloop invariant i > 0 ==> n > 0;\nloop invariant i > 0 ==> i <= n;\nloop invariant i == 0 ==> i < n;\nloop invariant i > 0 ==> n > 0;\nloop invariant i == 0 ==> n > 0;\nloop invariant i > 0 ==> n > 0;\nloop invariant i > 0 ==> i <= n;\nloop invariant i == 0 ==> i < n;\nloop invariant i > 0 ==> n > 0;\nloop invariant i == 0 ==> n > 0;\nloop invariant i > 0 ==> n > 0;\nloop invariant i > 0 ==> i <= n;\nloop invariant i == 0 ==> i < n;\nloop invariant i > 0 ==> n > 0;\nloop invariant i == 0 ==> n > 0;\nloop invariant i > 0 ==> n > 0;\nloop invariant i > 0 ==> i <= n;\nloop invariant i == 0 ==> i < n;\nloop invariant i > 0 ==> n > 0;\nloop invariant i == 0 ==> n > 0;\nloop invariant i > 0 ==> n > 0;\nloop invariant i > 0 ==> i <= n;\nloop invariant i == 0 ==> i < n;\nloop invariant i > 0 ==> n > 0;\nloop invariant i == 0 ==> n > 0;\nloop invariant i > 0 ==> n > 0;\nloop invariant i > 0 ==> i <= n;\nloop invariant i == 0 ==> i < n;\nloop invariant i > 0 ==> n > 0;\nloop invariant i == 0 ==> n > 0;\nloop invariant i > 0 ==> n > 0;\nloop invariant i > 0 ==> i <= n;\nloop invariant i == 0 ==> i < n;\nloop invariant i > 0 ==> n > 0;\nloop invariant i == 0 ==> n > 0;\nloop invariant i > 0 ==> n > 0;\nloop invariant i > 0 ==> i <= n;\nloop invariant i == 0 ==> i < n;\nloop invariant i > 0 ==> n > 0;\nloop invariant i == 0 ==> n > 0;\nloop invariant i > 0 ==> n > 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant i >= 0;\n*/\n```",
            "```\n/*@\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant i == (n - (n-i)) - 1;\nloop invariant i == (n - (n-i)) + 1;\nloop invariant i == (n - (n-i)) - 1 ==> i == (n - (n-i)) + 1;\nloop invariant i == (n - (n-i)) + 1 ==> i == (n - (n-i)) - 1;\nloop invariant i == (n - (n-i)) - 1 ==> i == (n - (n-i)) + 1 ==> i == (n - (n-i)) - 1;\nloop invariant i == (n - (n-i)) + 1 ==> i == (n - (n-i)) - 1 ==> i == (n - (n-i)) + 1;\nloop invariant i == (n - (n-i)) - 1 ==> i == (n - (n-i)) + 1 ==> i == (n - (n-i)) - 1 ==> i == (n - (n-i)) + 1;\nloop invariant i == (n - (n-i)) + 1 ==> i == (n - (n-i)) - 1 ==> i == (n - (n-i)) + 1 ==> i == (n - (n-i)) - 1 ==> i == (n - (n-i)) + 1;\nloop invariant i == (n - (n-i)) - 1 ==> i == (n - (n-i)) + 1 ==> i == (n - (n-i)) - 1 ==> i == (n - (n-i)) + 1 ==> i == (n - (n-i)) - 1 ==> i == (n - (n-i)) + 1;\nloop invariant i == (n - (n-i)) + 1 ==> i == (n - (n-i)) - 1 ==> i == (n - (n-i)) + 1 ==> i == (n - (n-i)) - 1 ==> i == (n - (n-i)) + 1 ==> i == (n - (n-i)) - 1 ==> i == (n - (n-i)) + 1;\nloop invariant i == (n - (n-i)) - 1 ==> i == (n - (n-i)) + 1 ==> i == (n - (n-i)) - 1 ==> i == (n - (n-i)) + 1 ==> i == (n - (n-i)) - 1 ==> i == (n - (n-i)) + 1 ==> i == (n - (n-i)) - 1 ==> i == (n - (n-i)) + 1;\nloop invariant i == (n - (n-i)) + 1 ==> i == (n - (n-i)) - 1 ==> i == (n - (n-i)) + 1 ==> i == (n - (n-i)) - 1 ==> i == (n - (n-i)) + 1 ==> i == (n - (n-i)) - 1 ==> i == (n - (n-i)) + 1 ==> i == (n - (n-i)) - 1 ==> i == (n - (n-i)) + 1;\nloop invariant i == (n - (n-i)) + 1 ==> i == (n - (n-i)) - 1 ==> i == (n - (n-i)) + 1 ==> i == (n - (n-i)) - 1 ==> i == (n - (n-i)) + 1 ==> i == (n - (n-i)) - 1 ==> i == (n - (n-i)) + 1 ==> i == (n - (n-i)) - 1 ==> i == (n - (n-i)) + 1 ==> i == (n - (n-i)) + 1 ==> i == (n - (n-i)) - 1 ==> i == (n - (n-i)) + 1 ==> i == (n - (n-i)) - 1 ==> i == (n - (n-i)) + 1 ==> i == (n - (n-i)) - 1 ==> i == (n - (n-i)) + 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant i >= 0;\nloop invariant i <= 10;\nloop invariant i <= n;\nloop invariant i <= n ==> i < n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant i <= n;\nloop invariant !(i > 10) ==> !(n != 10);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 10;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant i < n ==> n >= 10;\nloop invariant n >= 10 ==> i <= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(int n){\n  int i;\n\n  i=0;n=10;\n  /*@\n\nloop invariant i2: i < n ==> n >= 10;\nloop invariant i3: n >= 10 ==> i <= n;\n*/\nwhile (i < n){ i++; }\n\n  {;\n//@ assert(!( i>10 ));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant i < n;\nloop invariant i >= 0;\nloop invariant n == 10;\nloop invariant i <= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(int n){\n  int i;\n\n  i=0;n=10;\n  /*@\n\nloop invariant i2: i >= 0;\nloop invariant i3: n == 10;\nloop invariant i4: i <= n;\n*/\nwhile (i < n){ i++; }\n\n  {;\n//@ assert(!( i>10 ));\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(int n){\n  int i;\n\n  i=0;n=10;\n  /*@\n\n*/\nwhile (i < n){ i++; }\n\n  {;\n//@ assert(!( i>10 ));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant i = i + 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(int n){\n  int i;\n\n  i=0;n=10;\n  /*@\n\n*/\nwhile (i < n){ i++; }\n\n  {;\n//@ assert(!( i>10 ));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant i <= n;\nloop invariant n == 10;\nloop invariant i >= 0;\nloop invariant i < n;\nloop invariant n >= 1;\nloop invariant n <= 10;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant i < n;\nloop invariant n >= 1;\nloop invariant n <= 10;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant i < n;\nloop invariant n >= 1;\nloop invariant n <= 10;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant i < n;\nloop invariant n >= 1;\nloop invariant n <= 10;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant i < n;\nloop invariant n >= 1;\nloop invariant n <= 10;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant i < n;\nloop invariant n >= 1;\nloop invariant n <= 10;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant i < n;\nloop invariant n >= 1;\nloop invariant n <= 10;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant i < n;\nloop invariant n >= 1;\nloop invariant n <= 10;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant i < n;\nloop invariant n >= 1;\nloop invariant n <= 10;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant i < n;\nloop invariant n >= 1;\nloop invariant n <= 10;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant i < n;\nloop invariant n >= 1;\nloop invariant n <= 10;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant i < n;\nloop invariant n >= 1;\nloop invariant n <= 10;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant i < n;\nloop invariant n >= 1;\nloop invariant n <= 10;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant i < n;\nloop invariant n >= 1;\nloop invariant n <= 10;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant i < n;\nloop invariant n >= 1;\nloop invariant n <= 10;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant i < n;\nloop invariant n >= 1;\nloop invariant n <= 10;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant i < n;\nloop invariant n >= 1;\nloop invariant n <= 10;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant i < n;\nloop invariant n >= 1;\nloop invariant n <= 10;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant i < n;\nloop invariant n >= 1;\nloop invariant n <= 10;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant i < n;\nloop invariant n >= 1;\nloop invariant n <= 10;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant i < n;\nloop invariant n >= 1;\nloop invariant n <= 10;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant i < n;\nloop invariant n >= 1;\nloop invariant n <= 10;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant i < n;\nloop invariant n >= 1;\nloop invariant n <= 10;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant i < n;\nloop invariant n >= 1;\nloop invariant n <= 10;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant i < n;\nloop invariant n >= 1;\nloop invariant n <= 10;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant i < n;\nloop invariant n >= 1;\nloop invariant n <= 10;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant i < n;\nloop invariant n >= 1;\nloop invariant n <= 10;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant i < n;\nloop invariant n >= 1;\nloop invariant n <= 10;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant i < n;\nloop invariant n >= 1;\nloop invariant n <= 10;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(int n){\n  int i;\n\n  i=0;n=10;\n  /*@\nloop invariant i1: i <= n;\nloop invariant i2: n == 10;\nloop invariant i3: i >= 0;\n\nloop invariant i5: n >= 1;\nloop invariant i6: n <= 10;\n*/\nwhile (i < n){ i++; }\n\n  {;\n//@ assert(!( i>10 ));\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(int n){\n  int i;\n\n  i=0;n=10;\n  /*@\nloop invariant i1: 0 <= i <= n;\n*/\nwhile (i < n){ i++; }\n\n  {;\n//@ assert(!( i>10 ));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant i < n;\nloop invariant 0 <= i <= n;\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant i < n;\nloop invariant 0 <= i <= n;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant i < n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(int n){\n  int i;\n\n  i=0;n=10;\n  /*@\nloop invariant i1: 0 <= i <= n;\n\nloop invariant i3: i <= n;\nloop invariant i4: i >= 0;\n\n*/\nwhile (i < n){ i++; }\n\n  {;\n//@ assert(!( i>10 ));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(int n){\n  int i;\n\n  i=0;n=10;\n  /*@\nloop invariant i1: 0 <= i <= n;\n*/\nwhile (i < n){ i++; }\n\n  {;\n//@ assert(!( i>10 ));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant i == n;\nloop invariant i >= 0;\nloop invariant i > 0 ==> i <= n;\nloop invariant i == 0 ==> i < n;\nloop invariant n == 10;\nloop invariant n > 0;\nloop invariant i >= 0 ==> i <= n;\nloop invariant i > 0 ==> i < n;\nloop invariant i == 0 ==> i <= n;\nloop invariant i > 0 ==> n > 0;\nloop invariant i == 0 ==> n > 0;\nloop invariant i > 0 ==> n > 0;\nloop invariant i > 0 ==> i <= n;\nloop invariant i == 0 ==> i < n;\nloop invariant i > 0 ==> n > 0;\nloop invariant i == 0 ==> n > 0;\nloop invariant i > 0 ==> n > 0;\nloop invariant i > 0 ==> i <= n;\nloop invariant i == 0 ==> i < n;\nloop invariant i > 0 ==> n > 0;\nloop invariant i == 0 ==> n > 0;\nloop invariant i > 0 ==> n > 0;\nloop invariant i > 0 ==> i <= n;\nloop invariant i == 0 ==> i < n;\nloop invariant i > 0 ==> n > 0;\nloop invariant i == 0 ==> n > 0;\nloop invariant i > 0 ==> n > 0;\nloop invariant i > 0 ==> i <= n;\nloop invariant i == 0 ==> i < n;\nloop invariant i > 0 ==> n > 0;\nloop invariant i == 0 ==> n > 0;\nloop invariant i > 0 ==> n > 0;\nloop invariant i > 0 ==> i <= n;\nloop invariant i == 0 ==> i < n;\nloop invariant i > 0 ==> n > 0;\nloop invariant i == 0 ==> n > 0;\nloop invariant i > 0 ==> n > 0;\nloop invariant i > 0 ==> i <= n;\nloop invariant i == 0 ==> i < n;\nloop invariant i > 0 ==> n > 0;\nloop invariant i == 0 ==> n > 0;\nloop invariant i > 0 ==> n > 0;\nloop invariant i > 0 ==> i <= n;\nloop invariant i == 0 ==> i < n;\nloop invariant i > 0 ==> n > 0;\nloop invariant i == 0 ==> n > 0;\nloop invariant i > 0 ==> n > 0;\nloop invariant i > 0 ==> i <= n;\nloop invariant i == 0 ==> i < n;\nloop invariant i > 0 ==> n > 0;\nloop invariant i == 0 ==> n > 0;\nloop invariant i > 0 ==> n > 0;\nloop invariant i > 0 ==> i <= n;\nloop invariant i == 0 ==> i < n;\nloop invariant i > 0 ==> n > 0;\nloop invariant i == 0 ==> n > 0;\nloop invariant i > 0 ==> n > 0;\nloop invariant i > 0 ==> i <= n;\nloop invariant i == 0 ==> i < n;\nloop invariant i > 0 ==> n > 0;\nloop invariant i == 0 ==> n > 0;\nloop invariant i > 0 ==> n > 0;\nloop invariant i > 0 ==> i <= n;\nloop invariant i == 0 ==> i < n;\nloop invariant i > 0 ==> n > 0;\nloop invariant i == 0 ==> n > 0;\nloop invariant i > 0 ==> n > 0;\nloop invariant i > 0 ==> i <= n;\nloop invariant i == 0 ==> i < n;\nloop invariant i > 0 ==> n > 0;\nloop invariant i == 0 ==> n > 0;\nloop invariant i > 0 ==> n > 0;\nloop invariant i > 0 ==> i <= n;\nloop invariant i == 0 ==> i < n;\nloop invariant i > 0 ==> n > 0;\nloop invariant i == 0 ==> n > 0;\nloop invariant i > 0 ==> n > 0;\nloop invariant i > 0 ==> i <= n;\nloop invariant i == 0 ==> i < n;\nloop invariant i > 0 ==> n > 0;\nloop invariant i == 0 ==> n > 0;\nloop invariant i > 0 ==> n > 0;\nloop invariant i > 0 ==> i <= n;\nloop invariant i == 0 ==> i < n;\nloop invariant i > 0 ==> n > 0;\nloop invariant i == 0 ==> n > 0;\nloop invariant i > 0 ==> n > 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(int n){\n  int i;\n\n  i=0;n=10;\n  /*@\nloop invariant i1: 0 <= i <= 10;\n\nloop invariant i3: i >= 0;\nloop invariant i4: i > 0 ==> i <= n;\nloop invariant i5: i == 0 ==> i < n;\nloop invariant i6: n == 10;\nloop invariant i7: n > 0;\nloop invariant i8: i >= 0 ==> i <= n;\n\nloop invariant i10: i == 0 ==> i <= n;\nloop invariant i11: i > 0 ==> n > 0;\nloop invariant i12: i == 0 ==> n > 0;\n*/\nwhile (i < n){ i++; }\n\n  {;\n//@ assert(!( i>10 ));\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant i >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(int n){\n  int i;\n\n  i=0;n=10;\n  /*@\n\nloop invariant i2: i >= 0;\n*/\nwhile (i < n){ i++; }\n\n  {;\n//@ assert(!( i>10 ));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant i == (n - (n-i)) - 1;\nloop invariant i == (n - (n-i)) + 1;\nloop invariant i == (n - (n-i)) - 1 ==> i == (n - (n-i)) + 1;\nloop invariant i == (n - (n-i)) + 1 ==> i == (n - (n-i)) - 1;\nloop invariant i == (n - (n-i)) - 1 ==> i == (n - (n-i)) + 1 ==> i == (n - (n-i)) - 1;\nloop invariant i == (n - (n-i)) + 1 ==> i == (n - (n-i)) - 1 ==> i == (n - (n-i)) + 1;\nloop invariant i == (n - (n-i)) - 1 ==> i == (n - (n-i)) + 1 ==> i == (n - (n-i)) - 1 ==> i == (n - (n-i)) + 1;\nloop invariant i == (n - (n-i)) + 1 ==> i == (n - (n-i)) - 1 ==> i == (n - (n-i)) + 1 ==> i == (n - (n-i)) - 1 ==> i == (n - (n-i)) + 1;\nloop invariant i == (n - (n-i)) - 1 ==> i == (n - (n-i)) + 1 ==> i == (n - (n-i)) - 1 ==> i == (n - (n-i)) + 1 ==> i == (n - (n-i)) - 1 ==> i == (n - (n-i)) + 1;\nloop invariant i == (n - (n-i)) + 1 ==> i == (n - (n-i)) - 1 ==> i == (n - (n-i)) + 1 ==> i == (n - (n-i)) - 1 ==> i == (n - (n-i)) + 1 ==> i == (n - (n-i)) - 1 ==> i == (n - (n-i)) + 1;\nloop invariant i == (n - (n-i)) - 1 ==> i == (n - (n-i)) + 1 ==> i == (n - (n-i)) - 1 ==> i == (n - (n-i)) + 1 ==> i == (n - (n-i)) - 1 ==> i == (n - (n-i)) + 1 ==> i == (n - (n-i)) - 1 ==> i == (n - (n-i)) + 1;\nloop invariant i == (n - (n-i)) + 1 ==> i == (n - (n-i)) - 1 ==> i == (n - (n-i)) + 1 ==> i == (n - (n-i)) - 1 ==> i == (n - (n-i)) + 1 ==> i == (n - (n-i)) - 1 ==> i == (n - (n-i)) + 1 ==> i == (n - (n-i)) - 1 ==> i == (n - (n-i)) + 1;\nloop invariant i == (n - (n-i)) + 1 ==> i == (n - (n-i)) - 1 ==> i == (n - (n-i)) + 1 ==> i == (n - (n-i)) - 1 ==> i == (n - (n-i)) + 1 ==> i == (n - (n-i)) - 1 ==> i == (n - (n-i)) + 1 ==> i == (n - (n-i)) - 1 ==> i == (n - (n-i)) + 1 ==> i == (n - (n-i)) + 1 ==> i == (n - (n-i)) - 1 ==> i == (n - (n-i)) + 1 ==> i == (n - (n-i)) - 1 ==> i == (n - (n-i)) + 1 ==> i == (n - (n-i)) - 1 ==> i == (n - (n-i)) + 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(int n){\n  int i;\n\n  i=0;n=10;\n  /*@\nloop invariant i1: i >= 0;\nloop invariant i2: i <= n;\n\n\nloop invariant i5: i == (n - (n-i)) - 1 ==> i == (n - (n-i)) + 1;\nloop invariant i6: i == (n - (n-i)) + 1 ==> i == (n - (n-i)) - 1;\nloop invariant i7: i == (n - (n-i)) - 1 ==> i == (n - (n-i)) + 1 ==> i == (n - (n-i)) - 1;\nloop invariant i8: i == (n - (n-i)) + 1 ==> i == (n - (n-i)) - 1 ==> i == (n - (n-i)) + 1;\nloop invariant i9: i == (n - (n-i)) - 1 ==> i == (n - (n-i)) + 1 ==> i == (n - (n-i)) - 1 ==> i == (n - (n-i)) + 1;\nloop invariant i10: i == (n - (n-i)) + 1 ==> i == (n - (n-i)) - 1 ==> i == (n - (n-i)) + 1 ==> i == (n - (n-i)) - 1 ==> i == (n - (n-i)) + 1;\nloop invariant i11: i == (n - (n-i)) - 1 ==> i == (n - (n-i)) + 1 ==> i == (n - (n-i)) - 1 ==> i == (n - (n-i)) + 1 ==> i == (n - (n-i)) - 1 ==> i == (n - (n-i)) + 1;\nloop invariant i12: i == (n - (n-i)) + 1 ==> i == (n - (n-i)) - 1 ==> i == (n - (n-i)) + 1 ==> i == (n - (n-i)) - 1 ==> i == (n - (n-i)) + 1 ==> i == (n - (n-i)) - 1 ==> i == (n - (n-i)) + 1;\nloop invariant i13: i == (n - (n-i)) - 1 ==> i == (n - (n-i)) + 1 ==> i == (n - (n-i)) - 1 ==> i == (n - (n-i)) + 1 ==> i == (n - (n-i)) - 1 ==> i == (n - (n-i)) + 1 ==> i == (n - (n-i)) - 1 ==> i == (n - (n-i)) + 1;\nloop invariant i14: i == (n - (n-i)) + 1 ==> i == (n - (n-i)) - 1 ==> i == (n - (n-i)) + 1 ==> i == (n - (n-i)) - 1 ==> i == (n - (n-i)) + 1 ==> i == (n - (n-i)) - 1 ==> i == (n - (n-i)) + 1 ==> i == (n - (n-i)) - 1 ==> i == (n - (n-i)) + 1;\nloop invariant i15: i == (n - (n-i)) + 1 ==> i == (n - (n-i)) - 1 ==> i == (n - (n-i)) + 1 ==> i == (n - (n-i)) - 1 ==> i == (n - (n-i)) + 1 ==> i == (n - (n-i)) - 1 ==> i == (n - (n-i)) + 1 ==> i == (n - (n-i)) - 1 ==> i == (n - (n-i)) + 1 ==> i == (n - (n-i)) + 1 ==> i == (n - (n-i)) - 1 ==> i == (n - (n-i)) + 1 ==> i == (n - (n-i)) - 1 ==> i == (n - (n-i)) + 1 ==> i == (n - (n-i)) - 1 ==> i == (n - (n-i)) + 1;\n*/\nwhile (i < n){ i++; }\n\n  {;\n//@ assert(!( i>10 ));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant i >= 0;\nloop invariant i <= 10;\nloop invariant i <= n;\nloop invariant i <= n ==> i < n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(int n){\n  int i;\n\n  i=0;n=10;\n  /*@\n\nloop invariant i2: i >= 0;\n\nloop invariant i4: i <= n;\n\n*/\nwhile (i < n){ i++; }\n\n  {;\n//@ assert(!( i>10 ));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant i <= n;\nloop invariant !(i > 10) ==> !(n != 10);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(int n){\n  int i;\n\n  i=0;n=10;\n  /*@\nloop invariant i1: 0 <= i <= 10;\nloop invariant i2: i <= n;\nloop invariant i3: !(i > 10) ==> !(n != 10);\n*/\nwhile (i < n){ i++; }\n\n  {;\n//@ assert(!( i>10 ));\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(int n){\n  int i;\n\n  i=0;n=10;\n  /*@\nloop invariant i1: 0 <= i <= n;\n*/\nwhile (i < n){ i++; }\n\n  {;\n//@ assert(!( i>10 ));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 10;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(int n){\n  int i;\n\n  i=0;n=10;\n  /*@\n\n*/\nwhile (i < n){ i++; }\n\n  {;\n//@ assert(!( i>10 ));\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 20: Assignment operators not allowed in annotations.",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(int n){\n  int i;\n\n  i=0;n=10;\n  /*@\nloop invariant i1: 0 <= i <= 10;\nloop invariant i2: i < n ==> n >= 10;\nloop invariant i3: n >= 10 ==> i <= n;\nloop invariant i4: i < n;\nloop invariant i5: i >= 0;\nloop invariant i6: n == 10;\nloop invariant i7: i <= n;\nloop invariant i8: i = i + 1;\nloop invariant i9: n >= 1;\nloop invariant i10: n <= 10;\nloop invariant i11: 0 <= i <= n;\nloop invariant i12: i >= 1;\nloop invariant i13: i == n;\nloop invariant i14: i > 0 ==> i <= n;\nloop invariant i15: i == 0 ==> i < n;\nloop invariant i16: n > 0;\nloop invariant i17: i >= 0 ==> i <= n;\nloop invariant i18: i > 0 ==> i < n;\nloop invariant i19: i == 0 ==> i <= n;\nloop invariant i20: i > 0 ==> n > 0;\nloop invariant i21: i == 0 ==> n > 0;\nloop invariant i22: i == (n - (n-i)) - 1;\nloop invariant i23: i == (n - (n-i)) + 1;\nloop invariant i24: i == (n - (n-i)) - 1 ==> i == (n - (n-i)) + 1;\nloop invariant i25: i == (n - (n-i)) + 1 ==> i == (n - (n-i)) - 1;\nloop invariant i26: i == (n - (n-i)) - 1 ==> i == (n - (n-i)) + 1 ==> i == (n - (n-i)) - 1;\nloop invariant i27: i == (n - (n-i)) + 1 ==> i == (n - (n-i)) - 1 ==> i == (n - (n-i)) + 1;\nloop invariant i28: i == (n - (n-i)) - 1 ==> i == (n - (n-i)) + 1 ==> i == (n - (n-i)) - 1 ==> i == (n - (n-i)) + 1;\nloop invariant i29: i == (n - (n-i)) + 1 ==> i == (n - (n-i)) - 1 ==> i == (n - (n-i)) + 1 ==> i == (n - (n-i)) - 1 ==> i == (n - (n-i)) + 1;\nloop invariant i30: i == (n - (n-i)) - 1 ==> i == (n - (n-i)) + 1 ==> i == (n - (n-i)) - 1 ==> i == (n - (n-i)) + 1 ==> i == (n - (n-i)) - 1 ==> i == (n - (n-i)) + 1;\nloop invariant i31: i == (n - (n-i)) + 1 ==> i == (n - (n-i)) - 1 ==> i == (n - (n-i)) + 1 ==> i == (n - (n-i)) - 1 ==> i == (n - (n-i)) + 1 ==> i == (n - (n-i)) - 1 ==> i == (n - (n-i)) + 1;\nloop invariant i32: i == (n - (n-i)) - 1 ==> i == (n - (n-i)) + 1 ==> i == (n - (n-i)) - 1 ==> i == (n - (n-i)) + 1 ==> i == (n - (n-i)) - 1 ==> i == (n - (n-i)) + 1 ==> i == (n - (n-i)) - 1 ==> i == (n - (n-i)) + 1;\nloop invariant i33: i == (n - (n-i)) + 1 ==> i == (n - (n-i)) - 1 ==> i == (n - (n-i)) + 1 ==> i == (n - (n-i)) - 1 ==> i == (n - (n-i)) + 1 ==> i == (n - (n-i)) - 1 ==> i == (n - (n-i)) + 1 ==> i == (n - (n-i)) - 1 ==> i == (n - (n-i)) + 1;\nloop invariant i34: i == (n - (n-i)) + 1 ==> i == (n - (n-i)) - 1 ==> i == (n - (n-i)) + 1 ==> i == (n - (n-i)) - 1 ==> i == (n - (n-i)) + 1 ==> i == (n - (n-i)) - 1 ==> i == (n - (n-i)) + 1 ==> i == (n - (n-i)) - 1 ==> i == (n - (n-i)) + 1 ==> i == (n - (n-i)) + 1 ==> i == (n - (n-i)) - 1 ==> i == (n - (n-i)) + 1 ==> i == (n - (n-i)) - 1 ==> i == (n - (n-i)) + 1 ==> i == (n - (n-i)) - 1 ==> i == (n - (n-i)) + 1;\nloop invariant i35: i <= 10;\nloop invariant i36: i <= n ==> i < n;\nloop invariant i37: !(i > 10) ==> !(n != 10);\n*/\nwhile (i < n){ i++; }\n\n  {;\n//@ assert(!( i>10 ));\n}\n\n}",
        "combined_annotation_num_solver_calls": 9,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(int n){\n  int i;\n\n  i=0;n=10;\n  /*@\nloop invariant i1: 0 <= i <= 10;\nloop invariant i2: i < n ==> n >= 10;\nloop invariant i3: n >= 10 ==> i <= n;\n\nloop invariant i5: i >= 0;\nloop invariant i6: n == 10;\nloop invariant i7: i <= n;\n\nloop invariant i9: n >= 1;\nloop invariant i10: n <= 10;\nloop invariant i11: 0 <= i <= n;\n\n\nloop invariant i14: i > 0 ==> i <= n;\nloop invariant i15: i == 0 ==> i < n;\nloop invariant i16: n > 0;\nloop invariant i17: i >= 0 ==> i <= n;\n\nloop invariant i19: i == 0 ==> i <= n;\nloop invariant i20: i > 0 ==> n > 0;\nloop invariant i21: i == 0 ==> n > 0;\n\n\nloop invariant i24: i == (n - (n-i)) - 1 ==> i == (n - (n-i)) + 1;\nloop invariant i25: i == (n - (n-i)) + 1 ==> i == (n - (n-i)) - 1;\nloop invariant i26: i == (n - (n-i)) - 1 ==> i == (n - (n-i)) + 1 ==> i == (n - (n-i)) - 1;\nloop invariant i27: i == (n - (n-i)) + 1 ==> i == (n - (n-i)) - 1 ==> i == (n - (n-i)) + 1;\nloop invariant i28: i == (n - (n-i)) - 1 ==> i == (n - (n-i)) + 1 ==> i == (n - (n-i)) - 1 ==> i == (n - (n-i)) + 1;\nloop invariant i29: i == (n - (n-i)) + 1 ==> i == (n - (n-i)) - 1 ==> i == (n - (n-i)) + 1 ==> i == (n - (n-i)) - 1 ==> i == (n - (n-i)) + 1;\nloop invariant i30: i == (n - (n-i)) - 1 ==> i == (n - (n-i)) + 1 ==> i == (n - (n-i)) - 1 ==> i == (n - (n-i)) + 1 ==> i == (n - (n-i)) - 1 ==> i == (n - (n-i)) + 1;\nloop invariant i31: i == (n - (n-i)) + 1 ==> i == (n - (n-i)) - 1 ==> i == (n - (n-i)) + 1 ==> i == (n - (n-i)) - 1 ==> i == (n - (n-i)) + 1 ==> i == (n - (n-i)) - 1 ==> i == (n - (n-i)) + 1;\nloop invariant i32: i == (n - (n-i)) - 1 ==> i == (n - (n-i)) + 1 ==> i == (n - (n-i)) - 1 ==> i == (n - (n-i)) + 1 ==> i == (n - (n-i)) - 1 ==> i == (n - (n-i)) + 1 ==> i == (n - (n-i)) - 1 ==> i == (n - (n-i)) + 1;\nloop invariant i33: i == (n - (n-i)) + 1 ==> i == (n - (n-i)) - 1 ==> i == (n - (n-i)) + 1 ==> i == (n - (n-i)) - 1 ==> i == (n - (n-i)) + 1 ==> i == (n - (n-i)) - 1 ==> i == (n - (n-i)) + 1 ==> i == (n - (n-i)) - 1 ==> i == (n - (n-i)) + 1;\nloop invariant i34: i == (n - (n-i)) + 1 ==> i == (n - (n-i)) - 1 ==> i == (n - (n-i)) + 1 ==> i == (n - (n-i)) - 1 ==> i == (n - (n-i)) + 1 ==> i == (n - (n-i)) - 1 ==> i == (n - (n-i)) + 1 ==> i == (n - (n-i)) - 1 ==> i == (n - (n-i)) + 1 ==> i == (n - (n-i)) + 1 ==> i == (n - (n-i)) - 1 ==> i == (n - (n-i)) + 1 ==> i == (n - (n-i)) - 1 ==> i == (n - (n-i)) + 1 ==> i == (n - (n-i)) - 1 ==> i == (n - (n-i)) + 1;\nloop invariant i35: i <= 10;\n\nloop invariant i37: !(i > 10) ==> !(n != 10);\n*/\nwhile (i < n){ i++; }\n\n  {;\n//@ assert(!( i>10 ));\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c"
        ],
        "skipped": [],
        "total": 10,
        "success_count": 9,
        "failure_count": 1,
        "success_rate": 0.9
    }
}