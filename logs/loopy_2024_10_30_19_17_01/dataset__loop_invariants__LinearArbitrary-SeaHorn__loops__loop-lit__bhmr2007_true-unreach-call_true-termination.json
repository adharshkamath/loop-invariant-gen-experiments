{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, n, a, b;\n    i = 0; a = 0; b = 0; n = unknown_int();\n    if (!(n >= 0 && n <= LARGE_INT)) return 0;\n    while (i < n) {\n        if (unknown_int()) {\n            a = a + 1;\n            b = b + 2;\n        } else {\n            a = a + 2;\n            b = b + 1;\n        }\n        i = i + 1;\n    }\n    {;\n//@ assert(a + b == 3*n);\n}\n\n    return 0;\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 3*n;\nloop invariant 0 <= b <= 3*n;\nloop invariant a + b == 3*i;\nloop invariant a == 2 * (n - i) + (n <= i ? n - i : 0);\nloop invariant b == n - i + (i <= n ? i : 0);\nloop invariant a + b == 3*n;\nloop invariant (n >= 0 && n <= LARGE_INT);\nloop invariant (a + b == 3*n);\nloop invariant (i >= 0 && i <= n);\nloop invariant (a >= 0 && a <= 3*n);\nloop invariant (b >= 0 && b <= 3*n);\nloop invariant (i <= n);\nloop invariant (i >= 0);\nloop invariant (a <= 3*n);\nloop invariant (b <= 3*n);\nloop invariant (a + b == 3*i);\nloop invariant (a == 2 * (n - i) + (n <= i ? n - i : 0));\nloop invariant (b == n - i + (i <= n ? i : 0));\nloop invariant (a + b == 3*n);\nloop invariant (n >= 0 && n <= LARGE_INT);\nloop invariant (a + b == 3*n);\nloop invariant (i >= 0 && i <= n);\nloop invariant (a >= 0 && a <= 3*n);\nloop invariant (b >= 0 && b <= 3*n);\nloop invariant (i <= n);\nloop invariant (i >= 0);\nloop invariant (a <= 3*n);\nloop invariant (b <= 3*n);\nloop invariant (a + b == 3*i);\nloop invariant (a == 2 * (n - i) + (n <= i ? n - i : 0));\nloop invariant (b == n - i + (i <= n ? i : 0));\nloop invariant (a + b == 3*n);\nloop invariant (n >= 0 && n <= LARGE_INT);\nloop invariant (a + b == 3*n);\nloop invariant (i >= 0 && i <= n);\nloop invariant (a >= 0 && a <= 3*n);\nloop invariant (b >= 0 && b <= 3*n);\nloop invariant (i <= n);\nloop invariant (i >= 0);\nloop invariant (a <= 3*n);\nloop invariant (b <= 3*n);\nloop invariant (a + b == 3*i);\nloop invariant (a == 2 * (n - i) + (n <= i ? n - i : 0));\nloop invariant (b == n - i + (i <= n ? i : 0));\nloop invariant (a + b == 3*n);\nloop invariant (n >= 0 && n <= LARGE_INT);\nloop invariant (a + b == 3*n);\nloop invariant (i >= 0 && i <= n);\nloop invariant (a >= 0 && a <= 3*n);\nloop invariant (b >= 0 && b <= 3*n);\nloop invariant (i <= n);\nloop invariant (i >= 0);\nloop invariant (a <= 3*n);\nloop invariant (b <= 3*n);\nloop invariant (a + b == 3*i);\nloop invariant (a == 2 * (n - i) + (n <= i ? n - i : 0));\nloop invariant (b == n - i + (i <= n ? i : 0));\nloop invariant (a + b == 3*n);\nloop invariant (n >= 0 && n <= LARGE_INT);\nloop invariant (a + b == 3*n);\nloop invariant (i >= 0 && i <= n);\nloop invariant (a >= 0 && a <= 3*n);\nloop invariant (b >= 0 && b <= 3*n);\nloop invariant (i <= n);\nloop invariant (i >= 0);\nloop invariant (a <= 3*n);\nloop invariant (b <= 3*n);\nloop invariant (a + b == 3*i);\nloop invariant (a == 2 * (n - i) + (n <= i ? n - i : 0));\nloop invariant (b == n - i + (i <= n ? i : 0));\nloop invariant (a + b == 3*n);\nloop invariant (n >= 0 && n <= LARGE_INT);\nloop invariant (a + b == 3*n);\nloop invariant (i >= 0 && i <= n);\nloop invariant (a >= 0 && a <= 3*n);\nloop invariant (b >= 0 && b <= 3*n);\nloop invariant (i <= n);\nloop invariant (i >= 0);\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 3*n;\nloop invariant 0 <= b <= 3*n;\nloop invariant a + b == 3*i;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= 3*n;\nloop invariant b <= 3*n;\nloop invariant a + b == 3*i ==> a >= i;\nloop invariant a + b == 3*i ==> b >= i;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant a >= i;\nloop invariant b >= 2 * i;\nloop invariant a + b <= 3 * n;\nloop invariant (a + b) == 3 * n ==> i == n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 3*n;\nloop invariant 0 <= b <= 3*n;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= 3*n ==> n == i;\nloop invariant a + b <= 3*n ==> n > i;\nloop invariant a + b >= 3*n ==> n < i;\nloop invariant (i == n) ==> a + b == 3*n;\nloop invariant (i < n) ==> a + b <= 3*n;\nloop invariant (i > n) ==> a + b >= 3*n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 3*n;\nloop invariant 0 <= b <= 3*n;\nloop invariant a + b <= 3*n;\nloop invariant a + b <= 3*i;\nloop invariant a + b <= 3*n;\nloop invariant a + b <= 3*i;\nloop invariant a + b <= 3*n;\nloop invariant a + b <= 3*i;\nloop invariant a + b <= 3*n;\nloop invariant a + b <= 3*i;\nloop invariant a + b <= 3*n;\nloop invariant a + b <= 3*i;\nloop invariant a + b <= 3*n;\nloop invariant a + b <= 3*i;\nloop invariant a + b <= 3*n;\nloop invariant a + b <= 3*i;\nloop invariant a + b <= 3*n;\nloop invariant a + b <= 3*i;\nloop invariant a + b <= 3*n;\nloop invariant a + b <= 3*i;\nloop invariant a + b <= 3*n;\nloop invariant a + b <= 3*i;\nloop invariant a + b <= 3*n;\nloop invariant a + b <= 3*i;\nloop invariant a + b <= 3*n;\nloop invariant a + b <= 3*i;\nloop invariant a + b <= 3*n;\nloop invariant a + b <= 3*i;\nloop invariant a + b <= 3*n;\nloop invariant a + b <= 3*i;\nloop invariant a + b <= 3*n;\nloop invariant a + b <= 3*i;\nloop invariant a + b <= 3*n;\nloop invariant a + b <= 3*i;\nloop invariant a + b <= 3*n;\nloop invariant a + b <= 3*i;\nloop invariant a + b <= 3*n;\nloop invariant a + b <= 3*i;\nloop invariant a + b <= 3*n;\nloop invariant a + b <= 3*i;\nloop invariant a + b <= 3*n;\nloop invariant a + b <= 3*i;\nloop invariant a + b <= 3*n;\nloop invariant a + b <= 3*i;\nloop invariant a + b <= 3*n;\nloop invariant a + b <= 3*i;\nloop invariant a + b <= 3*n;\nloop invariant a + b <= 3*i;\nloop invariant a + b <= 3*n;\nloop invariant a + b <= 3*i;\nloop invariant a + b <= 3*n;\nloop invariant a + b <= 3*i;\nloop invariant a + b <= 3*n;\nloop invariant a + b <= 3*i;\nloop invariant a + b <= 3*n;\nloop invariant a + b <= 3*i;\nloop invariant a + b <= 3*n;\nloop invariant a + b <= 3*i;\nloop invariant a + b <= 3*n;\nloop invariant a + b <= 3*i;\nloop invariant a + b <= 3*n;\nloop invariant a + b <= 3*i;\nloop invariant a + b <= 3*n;\nloop invariant a + b <= 3*i;\nloop invariant a + b <= 3*n;\nloop invariant a + b <= 3*i;\nloop invariant a + b <= 3*n;\nloop invariant a + b <= 3*i;\nloop invariant a + b <= 3*n;\nloop invariant a + b <= 3*i;\nloop invariant a + b <= 3*n;\nloop invariant a + b <= 3*i;\nloop invariant a + b <= 3*n;\nloop invariant a + b <= 3*i;\nloop invariant a + b <= 3*n;\nloop invariant a + b <= 3*i;\nloop invariant a + b <= 3*n;\nloop invariant a + b <= 3*i;\nloop invariant a + b <= 3*n;\nloop invariant a + b <= 3*i;\nloop invariant a + b <= 3*n;\nloop invariant a + b <= 3*i;\nloop invariant a + b <= 3*n;\nloop invariant a + b <= 3*i;\nloop invariant a + b <= 3*n;\nloop invariant a + b <= 3*i;\nloop invariant a + b <= 3*n;\nloop invariant a + b <= 3*i;\nloop invariant a + b <= 3*n;\nloop invariant a + b <= 3*i;\nloop invariant a + b <= 3*n;\nloop invariant a + b <= 3*i;\nloop invariant a + b <= 3*n;\nloop invariant a + b <= 3*i;\nloop invariant a + b <= 3*n;\nloop invariant a + b <= 3*i;\nloop invariant a + b <= 3*n;\nloop invariant a + b <= 3*i;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 3*n;\nloop invariant 0 <= b <= 3*n;\nloop invariant a + b == 3*i;\nloop invariant i == 0 ==> a == 0;\nloop invariant i == 0 ==> b == 0;\nloop invariant i == n ==> a + b == 3*n;\nloop invariant i == n ==> a <= 3*n;\nloop invariant i == n ==> b <= 3*n;\nloop invariant i == n ==> a + b == 3*n;\nloop invariant i == n ==> a + b == 3*n;\nloop invariant 0 <= a <= 3*n;\nloop invariant 0 <= b <= 3*n;\nloop invariant a + b == 3*i;\nloop invariant a + b == 3*i;\nloop invariant 0 <= a <= 3*n;\nloop invariant 0 <= b <= 3*n;\nloop invariant a + b == 3*i;\nloop invariant a + b == 3*i;\nloop invariant 0 <= a <= 3*n;\nloop invariant 0 <= b <= 3*n;\nloop invariant a + b == 3*i;\nloop invariant a + b == 3*i;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= 3 * i;\nloop invariant b <= 3 * i;\nloop invariant a + b <= 3 * i;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a + b >= 3*i;\nloop invariant a + b <= 3*(n - i);\nloop invariant a <= 2*n;\nloop invariant b <= 2*n;\nloop invariant a <= b + n;\nloop invariant b <= a + n;\nloop invariant a <= 3*n;\nloop invariant b <= 3*n;\nloop invariant a + b >= 0;\nloop invariant a + b <= 3*n;\nloop invariant a + b == 3*n ==> i == n;\nloop invariant a + b != 3*n ==> i < n;\nloop invariant a + b == 3*n ==> b >= a;\nloop invariant a + b == 3*n ==> b >= a + 1;\nloop invariant a + b == 3*n ==> a >= b;\nloop invariant a + b == 3*n ==> a >= b + 1;\nloop invariant a + b != 3*n ==> b < a;\nloop invariant a + b != 3*n ==> b < a + 1;\nloop invariant a + b != 3*n ==> a < b;\nloop invariant a + b != 3*n ==> a < b + 1;\nloop invariant a + b == 3*n ==> a + b == 3*n;\nloop invariant a + b != 3*n ==> a + b != 3*n;\nloop invariant a + b == 3*n ==> a + b == 3*n;\nloop invariant a + b != 3*n ==> a + b != 3*n;\nloop invariant a + b == 3*n ==> a + b == 3*n;\nloop invariant a + b != 3*n ==> a + b != 3*n;\nloop invariant a + b == 3*n ==> a + b == 3*n;\nloop invariant a + b != 3*n ==> a + b != 3*n;\nloop invariant a + b == 3*n ==> a + b == 3*n;\nloop invariant a + b != 3*n ==> a + b != 3*n;\nloop invariant a + b == 3*n ==> a + b == 3*n;\nloop invariant a + b != 3*n ==> a + b != 3*n;\nloop invariant a + b == 3*n ==> a + b == 3*n;\nloop invariant a + b != 3*n ==> a + b != 3*n;\nloop invariant a + b == 3*n ==> a + b == 3*n;\nloop invariant a + b != 3*n ==> a + b != 3*n;\nloop invariant a + b == 3*n ==> a + b == 3*n;\nloop invariant a + b != 3*n ==> a + b != 3*n;\nloop invariant a + b == 3*n ==> a + b == 3*n;\nloop invariant a + b != 3*n ==> a + b != 3*n;\nloop invariant a + b == 3*n ==> a + b == 3*n;\nloop invariant a + b != 3*n ==> a + b != 3*n;\nloop invariant a + b == 3*n ==> a + b == 3*n;\nloop invariant a + b != 3*n ==> a + b != 3*n;\nloop invariant a + b == 3*n ==> a + b == 3*n;\nloop invariant a + b != 3*n ==> a + b != 3*n;\nloop invariant a + b == 3*n ==> a + b == 3*n;\nloop invariant a + b != 3*n ==> a + b != 3*n;\nloop invariant a + b == 3*n ==> a + b == 3*n;\nloop invariant a + b != 3*n ==> a + b != 3*n;\nloop invariant a + b == 3*n ==> a + b == 3*n;\nloop invariant a + b != 3*n ==> a + b != 3*n;\nloop invariant a + b == 3*n ==> a + b == 3*n;\nloop invariant a + b != 3*n ==> a + b != 3*n;\nloop invariant a + b == 3*n ==> a + b == 3*n;\nloop invariant a + b != 3*n ==> a + b != 3*n;\nloop invariant a + b == 3*n ==> a + b == 3*n;\nloop invariant a + b != 3*n ==> a + b != 3*n;\nloop invariant a + b == 3*n ==> a + b == 3*n;\nloop invariant a + b != 3*n ==> a + b != 3*n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 3*n;\nloop invariant 0 <= b <= 3*n;\nloop invariant a + b == 3*i;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= 3*i;\nloop invariant a >= 0;\nloop invariant b >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 3*n;\nloop invariant 0 <= b <= 3*n;\nloop invariant a + b == 3*i;\nloop invariant a >= b;\nloop invariant a >= i;\nloop invariant b >= i;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant n >= 0;\nloop invariant n <= LARGE_INT;\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant a <= 3*n;\nloop invariant b <= 3*n;\nloop invariant a + b == 3*i;\nloop invariant a >= b;\nloop invariant a >= i;\nloop invariant b >= i;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant n >= 0;\nloop invariant n <= LARGE_INT;\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant a <= 3*n;\nloop invariant b <= 3*n;\nloop invariant a + b == 3*i;\nloop invariant a >= b;\nloop invariant a >= i;\nloop invariant b >= i;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant n >= 0;\nloop invariant n <= LARGE_INT;\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant a <= 3*n;\nloop invariant b <= 3*n;\nloop invariant a + b == 3*i;\nloop invariant a >= b;\nloop invariant a >= i;\nloop invariant b >= i;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant n >= 0;\nloop invariant n <= LARGE_INT;\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant a <= 3*n;\nloop invariant b <= 3*n;\nloop invariant a + b == 3*i;\nloop invariant a >= b;\nloop invariant a >= i;\nloop invariant b >= i;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant n >= 0;\nloop invariant n <= LARGE_INT;\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant a <= 3*n;\nloop invariant b <= 3*n;\nloop invariant a + b == 3*i;\nloop invariant a >= b;\nloop invariant a >= i;\nloop invariant b >= i;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant n >= 0;\nloop invariant n <= LARGE_INT;\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant a <= 3*n;\nloop invariant b <= 3*n;\nloop invariant a + b == 3*i;\nloop invariant a >= b;\nloop invariant a >= i;\nloop invariant b >= i;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant n >= 0;\nloop invariant n <= LARGE_INT;\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant a <= 3*n;\nloop invariant b <= 3*n;\nloop invariant a + b == 3*i;\nloop invariant a >= b;\nloop invariant a >= i;\nloop invariant b >= i;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant n >= 0;\nloop invariant n <= LARGE_INT;\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant a <= 3*n;\nloop invariant b <= 3*n;\nloop invariant a + b == 3*i;\nloop invariant a >= b;\nloop invariant a >= i;\nloop invariant b >= i;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant n >= 0;\nloop invariant n <= LARGE_INT;\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant a <= 3*n;\nloop invariant b <= 3*n;\nloop invariant a + b == 3*i;\nloop invariant a >= b;\nloop invariant a >= i;\nloop invariant b >= i;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant n >= 0;\nloop invariant n <= LARGE_INT;\nloop invariant i <= n;\nloop invariant i >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 3 * n;\nloop invariant 0 <= b <= 3 * n;\nloop invariant (i == 0 ==> a == 0) && (i == 0 ==> b == 0) && (i == n ==> a + b == 3 * n);\nloop invariant a >= 0 && b >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= n;\nloop invariant 0 <= b <= n;\nloop invariant a + b == 2*i;\nloop invariant a + b + i == 3*i;\nloop invariant a + b + i + n == 3*n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= n;\nloop invariant 0 <= b <= 2*n;\nloop invariant a + b == 2*i;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= i;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= i;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= i;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= i;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= i;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= i;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= i;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= i;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= i;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= i;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= i;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= i;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= i;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= i;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= i;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= i;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= i;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= i;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= i;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= i;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= i;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= i;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= i;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= i;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= i;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= i;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= i;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= i;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= i;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= i;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= i;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= i;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= i;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= i;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= i;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= i;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= i;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= i;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= i;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= i;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= i;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= i;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= i;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= i;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= i;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= i;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= i;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= i;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= i;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= i;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= i;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= i;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= i;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 3*n;\nloop invariant 0 <= b <= 3*n;\nloop invariant a + b == 3*i;\nloop invariant i <= b;\nloop invariant i <= a;\nloop invariant a <= 2*b;\nloop invariant b <= 2*a;\nloop invariant a + b == 3*n ==> i == n;\nloop invariant a + b != 3*n ==> i < n;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 3*n;\nloop invariant 0 <= b <= 3*n;\nloop invariant a + b == 3*i;\nloop invariant a == 2 * (n - i) + (n <= i ? n - i : 0);\nloop invariant b == n - i + (i <= n ? i : 0);\nloop invariant a + b == 3*n;\nloop invariant (n >= 0 && n <= LARGE_INT);\nloop invariant (a + b == 3*n);\nloop invariant (i >= 0 && i <= n);\nloop invariant (a >= 0 && a <= 3*n);\nloop invariant (b >= 0 && b <= 3*n);\nloop invariant (i <= n);\nloop invariant (i >= 0);\nloop invariant (a <= 3*n);\nloop invariant (b <= 3*n);\nloop invariant (a + b == 3*i);\nloop invariant (a == 2 * (n - i) + (n <= i ? n - i : 0));\nloop invariant (b == n - i + (i <= n ? i : 0));\nloop invariant (a + b == 3*n);\nloop invariant (n >= 0 && n <= LARGE_INT);\nloop invariant (a + b == 3*n);\nloop invariant (i >= 0 && i <= n);\nloop invariant (a >= 0 && a <= 3*n);\nloop invariant (b >= 0 && b <= 3*n);\nloop invariant (i <= n);\nloop invariant (i >= 0);\nloop invariant (a <= 3*n);\nloop invariant (b <= 3*n);\nloop invariant (a + b == 3*i);\nloop invariant (a == 2 * (n - i) + (n <= i ? n - i : 0));\nloop invariant (b == n - i + (i <= n ? i : 0));\nloop invariant (a + b == 3*n);\nloop invariant (n >= 0 && n <= LARGE_INT);\nloop invariant (a + b == 3*n);\nloop invariant (i >= 0 && i <= n);\nloop invariant (a >= 0 && a <= 3*n);\nloop invariant (b >= 0 && b <= 3*n);\nloop invariant (i <= n);\nloop invariant (i >= 0);\nloop invariant (a <= 3*n);\nloop invariant (b <= 3*n);\nloop invariant (a + b == 3*i);\nloop invariant (a == 2 * (n - i) + (n <= i ? n - i : 0));\nloop invariant (b == n - i + (i <= n ? i : 0));\nloop invariant (a + b == 3*n);\nloop invariant (n >= 0 && n <= LARGE_INT);\nloop invariant (a + b == 3*n);\nloop invariant (i >= 0 && i <= n);\nloop invariant (a >= 0 && a <= 3*n);\nloop invariant (b >= 0 && b <= 3*n);\nloop invariant (i <= n);\nloop invariant (i >= 0);\nloop invariant (a <= 3*n);\nloop invariant (b <= 3*n);\nloop invariant (a + b == 3*i);\nloop invariant (a == 2 * (n - i) + (n <= i ? n - i : 0));\nloop invariant (b == n - i + (i <= n ? i : 0));\nloop invariant (a + b == 3*n);\nloop invariant (n >= 0 && n <= LARGE_INT);\nloop invariant (a + b == 3*n);\nloop invariant (i >= 0 && i <= n);\nloop invariant (a >= 0 && a <= 3*n);\nloop invariant (b >= 0 && b <= 3*n);\nloop invariant (i <= n);\nloop invariant (i >= 0);\nloop invariant (a <= 3*n);\nloop invariant (b <= 3*n);\nloop invariant (a + b == 3*i);\nloop invariant (a == 2 * (n - i) + (n <= i ? n - i : 0));\nloop invariant (b == n - i + (i <= n ? i : 0));\nloop invariant (a + b == 3*n);\nloop invariant (n >= 0 && n <= LARGE_INT);\nloop invariant (a + b == 3*n);\nloop invariant (i >= 0 && i <= n);\nloop invariant (a >= 0 && a <= 3*n);\nloop invariant (b >= 0 && b <= 3*n);\nloop invariant (i <= n);\nloop invariant (i >= 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, n, a, b;\n    i = 0; a = 0; b = 0; n = unknown_int();\n    if (!(n >= 0 && n <= LARGE_INT)) return 0;\n    /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= a <= 3*n;\nloop invariant i3: 0 <= b <= 3*n;\nloop invariant i4: a + b == 3*i;\n\n\n\nloop invariant i8: (n >= 0 && n <= LARGE_INT);\n\nloop invariant i10: (i >= 0 && i <= n);\nloop invariant i11: (a >= 0 && a <= 3*n);\nloop invariant i12: (b >= 0 && b <= 3*n);\nloop invariant i13: (i <= n);\nloop invariant i14: (i >= 0);\nloop invariant i15: (a <= 3*n);\nloop invariant i16: (b <= 3*n);\nloop invariant i17: (a + b == 3*i);\n\n\n*/\nwhile (i < n) {\n        if (unknown_int()) {\n            a = a + 1;\n            b = b + 2;\n        } else {\n            a = a + 2;\n            b = b + 1;\n        }\n        i = i + 1;\n    }\n    {;\n//@ assert(a + b == 3*n);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, n, a, b;\n    i = 0; a = 0; b = 0; n = unknown_int();\n    if (!(n >= 0 && n <= LARGE_INT)) return 0;\n    /*@\n\n*/\nwhile (i < n) {\n        if (unknown_int()) {\n            a = a + 1;\n            b = b + 2;\n        } else {\n            a = a + 2;\n            b = b + 1;\n        }\n        i = i + 1;\n    }\n    {;\n//@ assert(a + b == 3*n);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 3*n;\nloop invariant 0 <= b <= 3*n;\nloop invariant a + b == 3*i;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= 3*n;\nloop invariant b <= 3*n;\nloop invariant a + b == 3*i ==> a >= i;\nloop invariant a + b == 3*i ==> b >= i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, n, a, b;\n    i = 0; a = 0; b = 0; n = unknown_int();\n    if (!(n >= 0 && n <= LARGE_INT)) return 0;\n    /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= a <= 3*n;\nloop invariant i3: 0 <= b <= 3*n;\nloop invariant i4: a + b == 3*i;\nloop invariant i5: a >= 0;\nloop invariant i6: b >= 0;\nloop invariant i7: a <= 3*n;\nloop invariant i8: b <= 3*n;\nloop invariant i9: a + b == 3*i ==> a >= i;\nloop invariant i10: a + b == 3*i ==> b >= i;\n*/\nwhile (i < n) {\n        if (unknown_int()) {\n            a = a + 1;\n            b = b + 2;\n        } else {\n            a = a + 2;\n            b = b + 1;\n        }\n        i = i + 1;\n    }\n    {;\n//@ assert(a + b == 3*n);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant a >= i;\nloop invariant b >= 2 * i;\nloop invariant a + b <= 3 * n;\nloop invariant (a + b) == 3 * n ==> i == n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, n, a, b;\n    i = 0; a = 0; b = 0; n = unknown_int();\n    if (!(n >= 0 && n <= LARGE_INT)) return 0;\n    /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: a >= i;\n\n\n\n*/\nwhile (i < n) {\n        if (unknown_int()) {\n            a = a + 1;\n            b = b + 2;\n        } else {\n            a = a + 2;\n            b = b + 1;\n        }\n        i = i + 1;\n    }\n    {;\n//@ assert(a + b == 3*n);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 3*n;\nloop invariant 0 <= b <= 3*n;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= 3*n ==> n == i;\nloop invariant a + b <= 3*n ==> n > i;\nloop invariant a + b >= 3*n ==> n < i;\nloop invariant (i == n) ==> a + b == 3*n;\nloop invariant (i < n) ==> a + b <= 3*n;\nloop invariant (i > n) ==> a + b >= 3*n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, n, a, b;\n    i = 0; a = 0; b = 0; n = unknown_int();\n    if (!(n >= 0 && n <= LARGE_INT)) return 0;\n    /*@\nloop invariant i1: 0 <= i <= n;\n\n\n\n\n\n\n\n\nloop invariant i10: (i > n) ==> a + b >= 3*n;\n*/\nwhile (i < n) {\n        if (unknown_int()) {\n            a = a + 1;\n            b = b + 2;\n        } else {\n            a = a + 2;\n            b = b + 1;\n        }\n        i = i + 1;\n    }\n    {;\n//@ assert(a + b == 3*n);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 3*n;\nloop invariant 0 <= b <= 3*n;\nloop invariant a + b <= 3*n;\nloop invariant a + b <= 3*i;\nloop invariant a + b <= 3*n;\nloop invariant a + b <= 3*i;\nloop invariant a + b <= 3*n;\nloop invariant a + b <= 3*i;\nloop invariant a + b <= 3*n;\nloop invariant a + b <= 3*i;\nloop invariant a + b <= 3*n;\nloop invariant a + b <= 3*i;\nloop invariant a + b <= 3*n;\nloop invariant a + b <= 3*i;\nloop invariant a + b <= 3*n;\nloop invariant a + b <= 3*i;\nloop invariant a + b <= 3*n;\nloop invariant a + b <= 3*i;\nloop invariant a + b <= 3*n;\nloop invariant a + b <= 3*i;\nloop invariant a + b <= 3*n;\nloop invariant a + b <= 3*i;\nloop invariant a + b <= 3*n;\nloop invariant a + b <= 3*i;\nloop invariant a + b <= 3*n;\nloop invariant a + b <= 3*i;\nloop invariant a + b <= 3*n;\nloop invariant a + b <= 3*i;\nloop invariant a + b <= 3*n;\nloop invariant a + b <= 3*i;\nloop invariant a + b <= 3*n;\nloop invariant a + b <= 3*i;\nloop invariant a + b <= 3*n;\nloop invariant a + b <= 3*i;\nloop invariant a + b <= 3*n;\nloop invariant a + b <= 3*i;\nloop invariant a + b <= 3*n;\nloop invariant a + b <= 3*i;\nloop invariant a + b <= 3*n;\nloop invariant a + b <= 3*i;\nloop invariant a + b <= 3*n;\nloop invariant a + b <= 3*i;\nloop invariant a + b <= 3*n;\nloop invariant a + b <= 3*i;\nloop invariant a + b <= 3*n;\nloop invariant a + b <= 3*i;\nloop invariant a + b <= 3*n;\nloop invariant a + b <= 3*i;\nloop invariant a + b <= 3*n;\nloop invariant a + b <= 3*i;\nloop invariant a + b <= 3*n;\nloop invariant a + b <= 3*i;\nloop invariant a + b <= 3*n;\nloop invariant a + b <= 3*i;\nloop invariant a + b <= 3*n;\nloop invariant a + b <= 3*i;\nloop invariant a + b <= 3*n;\nloop invariant a + b <= 3*i;\nloop invariant a + b <= 3*n;\nloop invariant a + b <= 3*i;\nloop invariant a + b <= 3*n;\nloop invariant a + b <= 3*i;\nloop invariant a + b <= 3*n;\nloop invariant a + b <= 3*i;\nloop invariant a + b <= 3*n;\nloop invariant a + b <= 3*i;\nloop invariant a + b <= 3*n;\nloop invariant a + b <= 3*i;\nloop invariant a + b <= 3*n;\nloop invariant a + b <= 3*i;\nloop invariant a + b <= 3*n;\nloop invariant a + b <= 3*i;\nloop invariant a + b <= 3*n;\nloop invariant a + b <= 3*i;\nloop invariant a + b <= 3*n;\nloop invariant a + b <= 3*i;\nloop invariant a + b <= 3*n;\nloop invariant a + b <= 3*i;\nloop invariant a + b <= 3*n;\nloop invariant a + b <= 3*i;\nloop invariant a + b <= 3*n;\nloop invariant a + b <= 3*i;\nloop invariant a + b <= 3*n;\nloop invariant a + b <= 3*i;\nloop invariant a + b <= 3*n;\nloop invariant a + b <= 3*i;\nloop invariant a + b <= 3*n;\nloop invariant a + b <= 3*i;\nloop invariant a + b <= 3*n;\nloop invariant a + b <= 3*i;\nloop invariant a + b <= 3*n;\nloop invariant a + b <= 3*i;\nloop invariant a + b <= 3*n;\nloop invariant a + b <= 3*i;\nloop invariant a + b <= 3*n;\nloop invariant a + b <= 3*i;\nloop invariant a + b <= 3*n;\nloop invariant a + b <= 3*i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, n, a, b;\n    i = 0; a = 0; b = 0; n = unknown_int();\n    if (!(n >= 0 && n <= LARGE_INT)) return 0;\n    /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= a <= 3*n;\nloop invariant i3: 0 <= b <= 3*n;\nloop invariant i4: a + b <= 3*n;\nloop invariant i5: a + b <= 3*i;\n*/\nwhile (i < n) {\n        if (unknown_int()) {\n            a = a + 1;\n            b = b + 2;\n        } else {\n            a = a + 2;\n            b = b + 1;\n        }\n        i = i + 1;\n    }\n    {;\n//@ assert(a + b == 3*n);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 3*n;\nloop invariant 0 <= b <= 3*n;\nloop invariant a + b == 3*i;\nloop invariant i == 0 ==> a == 0;\nloop invariant i == 0 ==> b == 0;\nloop invariant i == n ==> a + b == 3*n;\nloop invariant i == n ==> a <= 3*n;\nloop invariant i == n ==> b <= 3*n;\nloop invariant i == n ==> a + b == 3*n;\nloop invariant i == n ==> a + b == 3*n;\nloop invariant 0 <= a <= 3*n;\nloop invariant 0 <= b <= 3*n;\nloop invariant a + b == 3*i;\nloop invariant a + b == 3*i;\nloop invariant 0 <= a <= 3*n;\nloop invariant 0 <= b <= 3*n;\nloop invariant a + b == 3*i;\nloop invariant a + b == 3*i;\nloop invariant 0 <= a <= 3*n;\nloop invariant 0 <= b <= 3*n;\nloop invariant a + b == 3*i;\nloop invariant a + b == 3*i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, n, a, b;\n    i = 0; a = 0; b = 0; n = unknown_int();\n    if (!(n >= 0 && n <= LARGE_INT)) return 0;\n    /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= a <= 3*n;\nloop invariant i3: 0 <= b <= 3*n;\nloop invariant i4: a + b == 3*i;\nloop invariant i5: i == 0 ==> a == 0;\nloop invariant i6: i == 0 ==> b == 0;\nloop invariant i7: i == n ==> a + b == 3*n;\nloop invariant i8: i == n ==> a <= 3*n;\nloop invariant i9: i == n ==> b <= 3*n;\n*/\nwhile (i < n) {\n        if (unknown_int()) {\n            a = a + 1;\n            b = b + 2;\n        } else {\n            a = a + 2;\n            b = b + 1;\n        }\n        i = i + 1;\n    }\n    {;\n//@ assert(a + b == 3*n);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= 3 * i;\nloop invariant b <= 3 * i;\nloop invariant a + b <= 3 * i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, n, a, b;\n    i = 0; a = 0; b = 0; n = unknown_int();\n    if (!(n >= 0 && n <= LARGE_INT)) return 0;\n    /*@\n\nloop invariant i2: a >= 0;\nloop invariant i3: b >= 0;\nloop invariant i4: a <= 3 * i;\nloop invariant i5: b <= 3 * i;\nloop invariant i6: a + b <= 3 * i;\n*/\nwhile (i < n) {\n        if (unknown_int()) {\n            a = a + 1;\n            b = b + 2;\n        } else {\n            a = a + 2;\n            b = b + 1;\n        }\n        i = i + 1;\n    }\n    {;\n//@ assert(a + b == 3*n);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a + b >= 3*i;\nloop invariant a + b <= 3*(n - i);\nloop invariant a <= 2*n;\nloop invariant b <= 2*n;\nloop invariant a <= b + n;\nloop invariant b <= a + n;\nloop invariant a <= 3*n;\nloop invariant b <= 3*n;\nloop invariant a + b >= 0;\nloop invariant a + b <= 3*n;\nloop invariant a + b == 3*n ==> i == n;\nloop invariant a + b != 3*n ==> i < n;\nloop invariant a + b == 3*n ==> b >= a;\nloop invariant a + b == 3*n ==> b >= a + 1;\nloop invariant a + b == 3*n ==> a >= b;\nloop invariant a + b == 3*n ==> a >= b + 1;\nloop invariant a + b != 3*n ==> b < a;\nloop invariant a + b != 3*n ==> b < a + 1;\nloop invariant a + b != 3*n ==> a < b;\nloop invariant a + b != 3*n ==> a < b + 1;\nloop invariant a + b == 3*n ==> a + b == 3*n;\nloop invariant a + b != 3*n ==> a + b != 3*n;\nloop invariant a + b == 3*n ==> a + b == 3*n;\nloop invariant a + b != 3*n ==> a + b != 3*n;\nloop invariant a + b == 3*n ==> a + b == 3*n;\nloop invariant a + b != 3*n ==> a + b != 3*n;\nloop invariant a + b == 3*n ==> a + b == 3*n;\nloop invariant a + b != 3*n ==> a + b != 3*n;\nloop invariant a + b == 3*n ==> a + b == 3*n;\nloop invariant a + b != 3*n ==> a + b != 3*n;\nloop invariant a + b == 3*n ==> a + b == 3*n;\nloop invariant a + b != 3*n ==> a + b != 3*n;\nloop invariant a + b == 3*n ==> a + b == 3*n;\nloop invariant a + b != 3*n ==> a + b != 3*n;\nloop invariant a + b == 3*n ==> a + b == 3*n;\nloop invariant a + b != 3*n ==> a + b != 3*n;\nloop invariant a + b == 3*n ==> a + b == 3*n;\nloop invariant a + b != 3*n ==> a + b != 3*n;\nloop invariant a + b == 3*n ==> a + b == 3*n;\nloop invariant a + b != 3*n ==> a + b != 3*n;\nloop invariant a + b == 3*n ==> a + b == 3*n;\nloop invariant a + b != 3*n ==> a + b != 3*n;\nloop invariant a + b == 3*n ==> a + b == 3*n;\nloop invariant a + b != 3*n ==> a + b != 3*n;\nloop invariant a + b == 3*n ==> a + b == 3*n;\nloop invariant a + b != 3*n ==> a + b != 3*n;\nloop invariant a + b == 3*n ==> a + b == 3*n;\nloop invariant a + b != 3*n ==> a + b != 3*n;\nloop invariant a + b == 3*n ==> a + b == 3*n;\nloop invariant a + b != 3*n ==> a + b != 3*n;\nloop invariant a + b == 3*n ==> a + b == 3*n;\nloop invariant a + b != 3*n ==> a + b != 3*n;\nloop invariant a + b == 3*n ==> a + b == 3*n;\nloop invariant a + b != 3*n ==> a + b != 3*n;\nloop invariant a + b == 3*n ==> a + b == 3*n;\nloop invariant a + b != 3*n ==> a + b != 3*n;\nloop invariant a + b == 3*n ==> a + b == 3*n;\nloop invariant a + b != 3*n ==> a + b != 3*n;\nloop invariant a + b == 3*n ==> a + b == 3*n;\nloop invariant a + b != 3*n ==> a + b != 3*n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, n, a, b;\n    i = 0; a = 0; b = 0; n = unknown_int();\n    if (!(n >= 0 && n <= LARGE_INT)) return 0;\n    /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: a >= 0;\nloop invariant i3: b >= 0;\nloop invariant i4: a + b >= 3*i;\n\n\n\n\n\n\n\nloop invariant i12: a + b >= 0;\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i24: a + b == 3*n ==> a + b == 3*n;\nloop invariant i25: a + b != 3*n ==> a + b != 3*n;\n*/\nwhile (i < n) {\n        if (unknown_int()) {\n            a = a + 1;\n            b = b + 2;\n        } else {\n            a = a + 2;\n            b = b + 1;\n        }\n        i = i + 1;\n    }\n    {;\n//@ assert(a + b == 3*n);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 3*n;\nloop invariant 0 <= b <= 3*n;\nloop invariant a + b == 3*i;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= 3*i;\nloop invariant a >= 0;\nloop invariant b >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, n, a, b;\n    i = 0; a = 0; b = 0; n = unknown_int();\n    if (!(n >= 0 && n <= LARGE_INT)) return 0;\n    /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= a <= 3*n;\nloop invariant i3: 0 <= b <= 3*n;\nloop invariant i4: a + b == 3*i;\nloop invariant i5: a + b <= 3*n;\nloop invariant i6: a + b >= 3*i;\nloop invariant i7: a >= 0;\nloop invariant i8: b >= 0;\n*/\nwhile (i < n) {\n        if (unknown_int()) {\n            a = a + 1;\n            b = b + 2;\n        } else {\n            a = a + 2;\n            b = b + 1;\n        }\n        i = i + 1;\n    }\n    {;\n//@ assert(a + b == 3*n);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 3*n;\nloop invariant 0 <= b <= 3*n;\nloop invariant a + b == 3*i;\nloop invariant a >= b;\nloop invariant a >= i;\nloop invariant b >= i;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant n >= 0;\nloop invariant n <= LARGE_INT;\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant a <= 3*n;\nloop invariant b <= 3*n;\nloop invariant a + b == 3*i;\nloop invariant a >= b;\nloop invariant a >= i;\nloop invariant b >= i;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant n >= 0;\nloop invariant n <= LARGE_INT;\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant a <= 3*n;\nloop invariant b <= 3*n;\nloop invariant a + b == 3*i;\nloop invariant a >= b;\nloop invariant a >= i;\nloop invariant b >= i;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant n >= 0;\nloop invariant n <= LARGE_INT;\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant a <= 3*n;\nloop invariant b <= 3*n;\nloop invariant a + b == 3*i;\nloop invariant a >= b;\nloop invariant a >= i;\nloop invariant b >= i;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant n >= 0;\nloop invariant n <= LARGE_INT;\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant a <= 3*n;\nloop invariant b <= 3*n;\nloop invariant a + b == 3*i;\nloop invariant a >= b;\nloop invariant a >= i;\nloop invariant b >= i;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant n >= 0;\nloop invariant n <= LARGE_INT;\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant a <= 3*n;\nloop invariant b <= 3*n;\nloop invariant a + b == 3*i;\nloop invariant a >= b;\nloop invariant a >= i;\nloop invariant b >= i;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant n >= 0;\nloop invariant n <= LARGE_INT;\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant a <= 3*n;\nloop invariant b <= 3*n;\nloop invariant a + b == 3*i;\nloop invariant a >= b;\nloop invariant a >= i;\nloop invariant b >= i;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant n >= 0;\nloop invariant n <= LARGE_INT;\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant a <= 3*n;\nloop invariant b <= 3*n;\nloop invariant a + b == 3*i;\nloop invariant a >= b;\nloop invariant a >= i;\nloop invariant b >= i;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant n >= 0;\nloop invariant n <= LARGE_INT;\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant a <= 3*n;\nloop invariant b <= 3*n;\nloop invariant a + b == 3*i;\nloop invariant a >= b;\nloop invariant a >= i;\nloop invariant b >= i;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant n >= 0;\nloop invariant n <= LARGE_INT;\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant a <= 3*n;\nloop invariant b <= 3*n;\nloop invariant a + b == 3*i;\nloop invariant a >= b;\nloop invariant a >= i;\nloop invariant b >= i;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant n >= 0;\nloop invariant n <= LARGE_INT;\nloop invariant i <= n;\nloop invariant i >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, n, a, b;\n    i = 0; a = 0; b = 0; n = unknown_int();\n    if (!(n >= 0 && n <= LARGE_INT)) return 0;\n    /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= a <= 3*n;\nloop invariant i3: 0 <= b <= 3*n;\nloop invariant i4: a + b == 3*i;\n\nloop invariant i6: a >= i;\nloop invariant i7: b >= i;\nloop invariant i8: i >= 0;\nloop invariant i9: i <= n;\nloop invariant i10: a >= 0;\nloop invariant i11: b >= 0;\nloop invariant i12: n >= 0;\nloop invariant i13: n <= LARGE_INT;\nloop invariant i14: a <= 3*n;\nloop invariant i15: b <= 3*n;\n*/\nwhile (i < n) {\n        if (unknown_int()) {\n            a = a + 1;\n            b = b + 2;\n        } else {\n            a = a + 2;\n            b = b + 1;\n        }\n        i = i + 1;\n    }\n    {;\n//@ assert(a + b == 3*n);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 3 * n;\nloop invariant 0 <= b <= 3 * n;\nloop invariant (i == 0 ==> a == 0) && (i == 0 ==> b == 0) && (i == n ==> a + b == 3 * n);\nloop invariant a >= 0 && b >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, n, a, b;\n    i = 0; a = 0; b = 0; n = unknown_int();\n    if (!(n >= 0 && n <= LARGE_INT)) return 0;\n    /*@\nloop invariant i1: 0 <= i <= n;\n\n\n\nloop invariant i5: a >= 0 && b >= 0;\n*/\nwhile (i < n) {\n        if (unknown_int()) {\n            a = a + 1;\n            b = b + 2;\n        } else {\n            a = a + 2;\n            b = b + 1;\n        }\n        i = i + 1;\n    }\n    {;\n//@ assert(a + b == 3*n);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= n;\nloop invariant 0 <= b <= n;\nloop invariant a + b == 2*i;\nloop invariant a + b + i == 3*i;\nloop invariant a + b + i + n == 3*n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, n, a, b;\n    i = 0; a = 0; b = 0; n = unknown_int();\n    if (!(n >= 0 && n <= LARGE_INT)) return 0;\n    /*@\nloop invariant i1: 0 <= i <= n;\n\n\n\n\n\n*/\nwhile (i < n) {\n        if (unknown_int()) {\n            a = a + 1;\n            b = b + 2;\n        } else {\n            a = a + 2;\n            b = b + 1;\n        }\n        i = i + 1;\n    }\n    {;\n//@ assert(a + b == 3*n);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= n;\nloop invariant 0 <= b <= 2*n;\nloop invariant a + b == 2*i;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= i;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= i;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= i;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= i;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= i;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= i;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= i;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= i;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= i;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= i;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= i;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= i;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= i;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= i;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= i;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= i;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= i;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= i;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= i;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= i;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= i;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= i;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= i;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= i;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= i;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= i;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= i;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= i;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= i;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= i;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= i;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= i;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= i;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= i;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= i;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= i;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= i;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= i;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= i;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= i;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= i;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= i;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= i;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= i;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= i;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= i;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= i;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= i;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= i;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= i;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= i;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= i;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, n, a, b;\n    i = 0; a = 0; b = 0; n = unknown_int();\n    if (!(n >= 0 && n <= LARGE_INT)) return 0;\n    /*@\nloop invariant i1: 0 <= i <= n;\n\n\n\n\nloop invariant i6: a + b >= i;\n*/\nwhile (i < n) {\n        if (unknown_int()) {\n            a = a + 1;\n            b = b + 2;\n        } else {\n            a = a + 2;\n            b = b + 1;\n        }\n        i = i + 1;\n    }\n    {;\n//@ assert(a + b == 3*n);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 3*n;\nloop invariant 0 <= b <= 3*n;\nloop invariant a + b == 3*i;\nloop invariant i <= b;\nloop invariant i <= a;\nloop invariant a <= 2*b;\nloop invariant b <= 2*a;\nloop invariant a + b == 3*n ==> i == n;\nloop invariant a + b != 3*n ==> i < n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, n, a, b;\n    i = 0; a = 0; b = 0; n = unknown_int();\n    if (!(n >= 0 && n <= LARGE_INT)) return 0;\n    /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= a <= 3*n;\nloop invariant i3: 0 <= b <= 3*n;\nloop invariant i4: a + b == 3*i;\nloop invariant i5: i <= b;\nloop invariant i6: i <= a;\nloop invariant i7: a <= 2*b;\nloop invariant i8: b <= 2*a;\nloop invariant i9: a + b == 3*n ==> i == n;\nloop invariant i10: a + b != 3*n ==> i < n;\n*/\nwhile (i < n) {\n        if (unknown_int()) {\n            a = a + 1;\n            b = b + 2;\n        } else {\n            a = a + 2;\n            b = b + 1;\n        }\n        i = i + 1;\n    }\n    {;\n//@ assert(a + b == 3*n);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": true
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "loop invariant 0 <= i <= n is partially proven to be inductive.\nloop invariant 0 <= a <= 3*n is partially proven to be inductive.\nloop invariant 0 <= b <= 3*n is partially proven to be inductive.\nloop invariant a + b == 3*i is partially proven to be inductive.\nloop invariant a == 2 * (n - i) + (n <= i ? n - i : 0) is preserved but not established.\nloop invariant b == n - i + (i <= n ? i : 0) is partially proven to be inductive.\nloop invariant a + b == 3*n is partially proven to be inductive.\nloop invariant (n >= 0 && n <= LARGE_INT) is partially proven to be inductive.\nloop invariant (a + b == 3*n) is partially proven to be inductive.\nloop invariant (i >= 0 && i <= n) is partially proven to be inductive.\nloop invariant (a >= 0 && a <= 3*n) is partially proven to be inductive.\nloop invariant (b >= 0 && b <= 3*n) is partially proven to be inductive.\nloop invariant (i <= n) is partially proven to be inductive.\nloop invariant (i >= 0) is partially proven to be inductive.\nloop invariant (a <= 3*n) is partially proven to be inductive.\nloop invariant (b <= 3*n) is partially proven to be inductive.\nloop invariant (a + b == 3*i) is partially proven to be inductive.\nloop invariant (a == 2 * (n - i) + (n <= i ? n - i : 0)) is partially proven to be inductive.\nloop invariant (b == n - i + (i <= n ? i : 0)) is partially proven to be inductive.\nloop invariant a >= 0 is partially proven to be inductive.\nloop invariant b >= 0 is partially proven to be inductive.\nloop invariant a <= 3*n is partially proven to be inductive.\nloop invariant b <= 3*n is partially proven to be inductive.\nloop invariant a + b == 3*i ==> a >= i is partially proven to be inductive.\nloop invariant a + b == 3*i ==> b >= i is partially proven to be inductive.\nloop invariant a >= i is partially proven to be inductive.\nloop invariant b >= 2 * i is partially proven to be inductive.\nloop invariant a + b <= 3 * n is partially proven to be inductive.\nloop invariant (a + b) == 3 * n ==> i == n is partially proven to be inductive.\nloop invariant a + b <= 3*n is partially proven to be inductive.\nloop invariant a + b >= 3*n ==> n == i is partially proven to be inductive.\nloop invariant a + b <= 3*n ==> n > i is preserved but not established.\nloop invariant a + b >= 3*n ==> n < i is partially proven to be inductive.\nloop invariant (i == n) ==> a + b == 3*n is partially proven to be inductive.\nloop invariant (i < n) ==> a + b <= 3*n is partially proven to be inductive.\nloop invariant (i > n) ==> a + b >= 3*n is partially proven to be inductive.\nloop invariant a + b <= 3*i is partially proven to be inductive.\nloop invariant i == 0 ==> a == 0 is partially proven to be inductive.\nloop invariant i == 0 ==> b == 0 is partially proven to be inductive.\nloop invariant i == n ==> a + b == 3*n is partially proven to be inductive.\nloop invariant i == n ==> a <= 3*n is partially proven to be inductive.\nloop invariant i == n ==> b <= 3*n is partially proven to be inductive.\nloop invariant 1 <= i <= n is partially proven to be inductive.\nloop invariant a <= 3 * i is partially proven to be inductive.\nloop invariant b <= 3 * i is partially proven to be inductive.\nloop invariant a + b <= 3 * i is partially proven to be inductive.\nloop invariant a + b >= 3*i is partially proven to be inductive.\nloop invariant a + b <= 3*(n - i) is partially proven to be inductive.\nloop invariant a <= 2*n is partially proven to be inductive.\nloop invariant b <= 2*n is partially proven to be inductive.\nloop invariant a <= b + n is partially proven to be inductive.\nloop invariant b <= a + n is partially proven to be inductive.\nloop invariant a + b >= 0 is partially proven to be inductive.\nloop invariant a + b == 3*n ==> i == n is partially proven to be inductive.\nloop invariant a + b != 3*n ==> i < n is partially proven to be inductive.\nloop invariant a + b == 3*n ==> b >= a is partially proven to be inductive.\nloop invariant a + b == 3*n ==> b >= a + 1 is partially proven to be inductive.\nloop invariant a + b == 3*n ==> a >= b is partially proven to be inductive.\nloop invariant a + b == 3*n ==> a >= b + 1 is partially proven to be inductive.\nloop invariant a + b != 3*n ==> b < a is partially proven to be inductive.\nloop invariant a + b != 3*n ==> b < a + 1 is partially proven to be inductive.\nloop invariant a + b != 3*n ==> a < b is partially proven to be inductive.\nloop invariant a + b != 3*n ==> a < b + 1 is partially proven to be inductive.\nloop invariant a + b == 3*n ==> a + b == 3*n is partially proven to be inductive.\nloop invariant a + b != 3*n ==> a + b != 3*n is partially proven to be inductive.\nloop invariant a >= b is partially proven to be inductive.\nloop invariant b >= i is partially proven to be inductive.\nloop invariant i >= 0 is partially proven to be inductive.\nloop invariant i <= n is partially proven to be inductive.\nloop invariant n >= 0 is partially proven to be inductive.\nloop invariant n <= LARGE_INT is partially proven to be inductive.\nloop invariant 0 <= a <= 3 * n is partially proven to be inductive.\nloop invariant 0 <= b <= 3 * n is partially proven to be inductive.\nloop invariant (i == 0 ==> a == 0) && (i == 0 ==> b == 0) && (i == n ==> a + b == 3 * n) is partially proven to be inductive.\nloop invariant a >= 0 && b >= 0 is partially proven to be inductive.\nloop invariant 0 <= a <= n is partially proven to be inductive.\nloop invariant 0 <= b <= n is partially proven to be inductive.\nloop invariant a + b == 2*i is partially proven to be inductive.\nloop invariant a + b + i == 3*i is partially proven to be inductive.\nloop invariant a + b + i + n == 3*n is partially proven to be inductive.\nloop invariant 0 <= b <= 2*n is partially proven to be inductive.\nloop invariant a + b >= i is partially proven to be inductive.\nloop invariant i <= b is partially proven to be inductive.\nloop invariant i <= a is partially proven to be inductive.\nloop invariant a <= 2*b is partially proven to be inductive.\nloop invariant b <= 2*a is partially proven to be inductive.\nAssertion a + b == 3 * n: Partially proven",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, n, a, b;\n    i = 0; a = 0; b = 0; n = unknown_int();\n    if (!(n >= 0 && n <= LARGE_INT)) return 0;\n    /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= a <= 3*n;\nloop invariant i3: 0 <= b <= 3*n;\nloop invariant i4: a + b == 3*i;\nloop invariant i5: a == 2 * (n - i) + (n <= i ? n - i : 0);\nloop invariant i6: b == n - i + (i <= n ? i : 0);\nloop invariant i7: a + b == 3*n;\nloop invariant i8: (n >= 0 && n <= LARGE_INT);\nloop invariant i9: (a + b == 3*n);\nloop invariant i10: (i >= 0 && i <= n);\nloop invariant i11: (a >= 0 && a <= 3*n);\nloop invariant i12: (b >= 0 && b <= 3*n);\nloop invariant i13: (i <= n);\nloop invariant i14: (i >= 0);\nloop invariant i15: (a <= 3*n);\nloop invariant i16: (b <= 3*n);\nloop invariant i17: (a + b == 3*i);\nloop invariant i18: (a == 2 * (n - i) + (n <= i ? n - i : 0));\nloop invariant i19: (b == n - i + (i <= n ? i : 0));\nloop invariant i20: a >= 0;\nloop invariant i21: b >= 0;\nloop invariant i22: a <= 3*n;\nloop invariant i23: b <= 3*n;\nloop invariant i24: a + b == 3*i ==> a >= i;\nloop invariant i25: a + b == 3*i ==> b >= i;\nloop invariant i26: a >= i;\nloop invariant i27: b >= 2 * i;\nloop invariant i28: a + b <= 3 * n;\nloop invariant i29: (a + b) == 3 * n ==> i == n;\nloop invariant i30: a + b <= 3*n;\nloop invariant i31: a + b >= 3*n ==> n == i;\nloop invariant i32: a + b <= 3*n ==> n > i;\nloop invariant i33: a + b >= 3*n ==> n < i;\nloop invariant i34: (i == n) ==> a + b == 3*n;\nloop invariant i35: (i < n) ==> a + b <= 3*n;\nloop invariant i36: (i > n) ==> a + b >= 3*n;\nloop invariant i37: a + b <= 3*i;\nloop invariant i38: i == 0 ==> a == 0;\nloop invariant i39: i == 0 ==> b == 0;\nloop invariant i40: i == n ==> a + b == 3*n;\nloop invariant i41: i == n ==> a <= 3*n;\nloop invariant i42: i == n ==> b <= 3*n;\nloop invariant i43: 1 <= i <= n;\nloop invariant i44: a <= 3 * i;\nloop invariant i45: b <= 3 * i;\nloop invariant i46: a + b <= 3 * i;\nloop invariant i47: a + b >= 3*i;\nloop invariant i48: a + b <= 3*(n - i);\nloop invariant i49: a <= 2*n;\nloop invariant i50: b <= 2*n;\nloop invariant i51: a <= b + n;\nloop invariant i52: b <= a + n;\nloop invariant i53: a + b >= 0;\nloop invariant i54: a + b == 3*n ==> i == n;\nloop invariant i55: a + b != 3*n ==> i < n;\nloop invariant i56: a + b == 3*n ==> b >= a;\nloop invariant i57: a + b == 3*n ==> b >= a + 1;\nloop invariant i58: a + b == 3*n ==> a >= b;\nloop invariant i59: a + b == 3*n ==> a >= b + 1;\nloop invariant i60: a + b != 3*n ==> b < a;\nloop invariant i61: a + b != 3*n ==> b < a + 1;\nloop invariant i62: a + b != 3*n ==> a < b;\nloop invariant i63: a + b != 3*n ==> a < b + 1;\nloop invariant i64: a + b == 3*n ==> a + b == 3*n;\nloop invariant i65: a + b != 3*n ==> a + b != 3*n;\nloop invariant i66: a >= b;\nloop invariant i67: b >= i;\nloop invariant i68: i >= 0;\nloop invariant i69: i <= n;\nloop invariant i70: n >= 0;\nloop invariant i71: n <= LARGE_INT;\nloop invariant i72: 0 <= a <= 3 * n;\nloop invariant i73: 0 <= b <= 3 * n;\nloop invariant i74: (i == 0 ==> a == 0) && (i == 0 ==> b == 0) && (i == n ==> a + b == 3 * n);\nloop invariant i75: a >= 0 && b >= 0;\nloop invariant i76: 0 <= a <= n;\nloop invariant i77: 0 <= b <= n;\nloop invariant i78: a + b == 2*i;\nloop invariant i79: a + b + i == 3*i;\nloop invariant i80: a + b + i + n == 3*n;\nloop invariant i81: 0 <= b <= 2*n;\nloop invariant i82: a + b >= i;\nloop invariant i83: i <= b;\nloop invariant i84: i <= a;\nloop invariant i85: a <= 2*b;\nloop invariant i86: b <= 2*a;\n*/\nwhile (i < n) {\n        if (unknown_int()) {\n            a = a + 1;\n            b = b + 2;\n        } else {\n            a = a + 2;\n            b = b + 1;\n        }\n        i = i + 1;\n    }\n    {;\n//@ assert(a + b == 3*n);\n}\n\n    return 0;\n}",
        "combined_annotation_num_solver_calls": 14,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, n, a, b;\n    i = 0; a = 0; b = 0; n = unknown_int();\n    if (!(n >= 0 && n <= LARGE_INT)) return 0;\n    /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= a <= 3*n;\nloop invariant i3: 0 <= b <= 3*n;\nloop invariant i4: a + b == 3*i;\n\n\n\nloop invariant i8: (n >= 0 && n <= LARGE_INT);\n\nloop invariant i10: (i >= 0 && i <= n);\nloop invariant i11: (a >= 0 && a <= 3*n);\nloop invariant i12: (b >= 0 && b <= 3*n);\nloop invariant i13: (i <= n);\nloop invariant i14: (i >= 0);\nloop invariant i15: (a <= 3*n);\nloop invariant i16: (b <= 3*n);\nloop invariant i17: (a + b == 3*i);\n\n\nloop invariant i20: a >= 0;\nloop invariant i21: b >= 0;\nloop invariant i22: a <= 3*n;\nloop invariant i23: b <= 3*n;\nloop invariant i24: a + b == 3*i ==> a >= i;\nloop invariant i25: a + b == 3*i ==> b >= i;\nloop invariant i26: a >= i;\n\nloop invariant i28: a + b <= 3 * n;\nloop invariant i29: (a + b) == 3 * n ==> i == n;\nloop invariant i30: a + b <= 3*n;\nloop invariant i31: a + b >= 3*n ==> n == i;\n\n\nloop invariant i34: (i == n) ==> a + b == 3*n;\nloop invariant i35: (i < n) ==> a + b <= 3*n;\nloop invariant i36: (i > n) ==> a + b >= 3*n;\nloop invariant i37: a + b <= 3*i;\nloop invariant i38: i == 0 ==> a == 0;\nloop invariant i39: i == 0 ==> b == 0;\nloop invariant i40: i == n ==> a + b == 3*n;\nloop invariant i41: i == n ==> a <= 3*n;\nloop invariant i42: i == n ==> b <= 3*n;\n\nloop invariant i44: a <= 3 * i;\nloop invariant i45: b <= 3 * i;\nloop invariant i46: a + b <= 3 * i;\nloop invariant i47: a + b >= 3*i;\n\nloop invariant i49: a <= 2*n;\nloop invariant i50: b <= 2*n;\nloop invariant i51: a <= b + n;\nloop invariant i52: b <= a + n;\nloop invariant i53: a + b >= 0;\nloop invariant i54: a + b == 3*n ==> i == n;\nloop invariant i55: a + b != 3*n ==> i < n;\n\n\n\n\n\n\n\n\nloop invariant i64: a + b == 3*n ==> a + b == 3*n;\nloop invariant i65: a + b != 3*n ==> a + b != 3*n;\n\nloop invariant i67: b >= i;\nloop invariant i68: i >= 0;\nloop invariant i69: i <= n;\nloop invariant i70: n >= 0;\nloop invariant i71: n <= LARGE_INT;\nloop invariant i72: 0 <= a <= 3 * n;\nloop invariant i73: 0 <= b <= 3 * n;\nloop invariant i74: (i == 0 ==> a == 0) && (i == 0 ==> b == 0) && (i == n ==> a + b == 3 * n);\nloop invariant i75: a >= 0 && b >= 0;\n\n\n\n\n\nloop invariant i81: 0 <= b <= 2*n;\nloop invariant i82: a + b >= i;\nloop invariant i83: i <= b;\nloop invariant i84: i <= a;\nloop invariant i85: a <= 2*b;\nloop invariant i86: b <= 2*a;\n*/\nwhile (i < n) {\n        if (unknown_int()) {\n            a = a + 1;\n            b = b + 2;\n        } else {\n            a = a + 2;\n            b = b + 1;\n        }\n        i = i + 1;\n    }\n    {;\n//@ assert(a + b == 3*n);\n}\n\n    return 0;\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/split.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c"
        ],
        "skipped": [],
        "total": 46,
        "success_count": 41,
        "failure_count": 5,
        "success_rate": 0.8913043478260869
    }
}