{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main(){\n  int x=0;\n  int y=0;\n  int z=0;\n  int w=0;\n\n  while ( unknown() ){\n    if ( unknown() ) {\n      x++; y = y+100;\n    } else if  ( unknown() ) {\n      if( x >= 4)\n\t{ x=x+1; y=y+1;}\n    } else if  ( y >10*w)\n      if (z>=100*x )\n      y = -y;\n    w=w+1; \n    z=z+10;\n  }\n  if ( x >=4 )\n    {;\n//@ assert(y>2);\n}\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant i1;\nloop invariant i2;\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 100000;\nloop invariant 0 <= z <= 40000;\nloop invariant 0 <= w <= 100000;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= y <= 100000;\nloop invariant 0 <= x <= 100000;\nloop invariant 0 <= z <= 100000;\nloop invariant 0 <= w <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant w >= 0;\nloop invariant x >= 4 ==> x >= 4;\nloop invariant x >= 4 ==> y >= 2;\nloop invariant x >= 4 ==> z >= 400;\nloop invariant x >= 4 ==> w >= 1;\nloop invariant x >= 4 ==> y >= 2 ==> x >= 4;\nloop invariant x >= 4 ==> x >= 4 ==> y >= 2;\nloop invariant x >= 4 ==> x >= 4 ==> z >= 400;\n*/\n```",
            "```\n/*@\nloop invariant y >= 0;\nloop invariant y <= 100;\nloop invariant y <= w;\nloop invariant y <= 10*w;\nloop invariant z >= 0;\nloop invariant z <= 10*w;\nloop invariant w >= 0;\nloop invariant x >= 0;\nloop invariant x <= 4;\nloop invariant unknown ==> y > 2;\nloop invariant unknown ==> x >= 4;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant w >= 0;\nloop invariant x >= y;\nloop invariant x >= w;\nloop invariant y >= z;\nloop invariant y >= w;\nloop invariant z >= w;\nloop invariant x >= 4 ==> y >= 2;\nloop invariant x >= 4 ==> y >= 100;\nloop invariant x >= 4 ==> z >= 100 * x;\nloop invariant x >= 4 ==> y >= 10 * w;\nloop invariant x >= 4 ==> z >= 100 * x;\nloop invariant x >= 4 ==> y >= 10 * w;\nloop invariant x >= 4 ==> z >= 100 * x;\nloop invariant x >= 4 ==> y >= 10 * w;\nloop invariant x >= 4 ==> z >= 100 * x;\nloop invariant x >= 4 ==> y >= 10 * w;\nloop invariant x >= 4 ==> z >= 100 * x;\nloop invariant x >= 4 ==> y >= 10 * w;\nloop invariant x >= 4 ==> z >= 100 * x;\nloop invariant x >= 4 ==> y >= 10 * w;\nloop invariant x >= 4 ==> z >= 100 * x;\nloop invariant x >= 4 ==> y >= 10 * w;\nloop invariant x >= 4 ==> z >= 100 * x;\nloop invariant x >= 4 ==> y >= 10 * w;\nloop invariant x >= 4 ==> z >= 100 * x;\nloop invariant x >= 4 ==> y >= 10 * w;\nloop invariant x >= 4 ==> z >= 100 * x;\nloop invariant x >= 4 ==> y >= 10 * w;\nloop invariant x >= 4 ==> z >= 100 * x;\nloop invariant x >= 4 ==> y >= 10 * w;\nloop invariant x >= 4 ==> z >= 100 * x;\nloop invariant x >= 4 ==> y >= 10 * w;\nloop invariant x >= 4 ==> z >= 100 * x;\nloop invariant x >= 4 ==> y >= 10 * w;\nloop invariant x >= 4 ==> z >= 100 * x;\nloop invariant x >= 4 ==> y >= 10 * w;\nloop invariant x >= 4 ==> z >= 100 * x;\nloop invariant x >= 4 ==> y >= 10 * w;\nloop invariant x >= 4 ==> z >= 100 * x;\nloop invariant x >= 4 ==> y >= 10 * w;\nloop invariant x >= 4 ==> z >= 100 * x;\nloop invariant x >= 4 ==> y >= 10 * w;\nloop invariant x >= 4 ==> z >= 100 * x;\nloop invariant x >= 4 ==> y >= 10 * w;\nloop invariant x >= 4 ==> z >= 100 * x;\nloop invariant x >= 4 ==> y >= 10 * w;\nloop invariant x >= 4 ==> z >= 100 * x;\nloop invariant x >= 4 ==> y >= 10 * w;\nloop invariant x >= 4 ==> z >= 100 * x;\nloop invariant x >= 4 ==> y >= 10 * w;\nloop invariant x >= 4 ==> z >= 100 * x;\nloop invariant x >= 4 ==> y >= 10 * w;\nloop invariant x >= 4 ==> z >= 100 * x;\nloop invariant x >= 4 ==> y >= 10 * w;\nloop invariant x >= 4 ==> z >= 100 * x;\nloop invariant x >= 4 ==> y >= 10 * w;\nloop invariant x >= 4 ==> z >= 100 * x;\nloop invariant x >= 4 ==> y >= 10 * w;\nloop invariant x >= 4 ==> z >= 100 * x;\nloop invariant x >= 4 ==> y >= 10 * w;\nloop invariant x >= 4 ==> z >= 100 * x;\nloop invariant x >= 4 ==> y >= 10 * w;\nloop invariant x >= 4 ==> z >= 100 * x;\nloop invariant x >= 4 ==> y >= 10 * w;\nloop invariant x >= 4 ==> z >= 100 * x;\nloop invariant x >= 4 ==> y >= 10 * w;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= w <= 10;\nloop invariant 0 <= z <= 1000;\nloop invariant (x >= 4 ==> y > 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant z >= 10 * w;\nloop invariant x >= 4 ==> y > 2;\n*/\n```",
            "```\n/*@\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant w >= 0;\nloop invariant w <= x;\nloop invariant z <= x + 200 * w;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant w >= 0;\nloop invariant w <= x;\nloop invariant z <= x + 200 * w;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant 0 <= x <= 100000;\nloop invariant y >= 0;\nloop invariant w >= 0;\nloop invariant z >= 0;\nloop invariant x >= 0;\nloop invariant z >= (10*w);\nloop invariant z >= (100*x);\nloop invariant z >= (100*w);\nloop invariant x >= (1 + (w - 1) * w / 2);\nloop invariant x >= (1 + (w - 1) * w / 2) + (10*w);\nloop invariant x >= (1 + (w - 1) * w / 2) + (100*x);\nloop invariant x >= (1 + (w - 1) * w / 2) + (100*w);\nloop invariant x >= (1 + (w - 1) * w / 2) + (10*w) + (100*x);\nloop invariant x >= (1 + (w - 1) * w / 2) + (10*w) + (100*w);\nloop invariant x >= (1 + (w - 1) * w / 2) + (10*w) + (100*w) + (100*x);\nloop invariant x >= (1 + (w - 1) * w / 2) + (10*w) + (100*w) + (100*w);\nloop invariant x >= (1 + (w - 1) * w / 2) + (10*w) + (100*w) + (100*w) + (100*x);\nloop invariant x >= (1 + (w - 1) * w / 2) + (10*w) + (100*w) + (100*w) + (100*w);\nloop invariant x >= (1 + (w - 1) * w / 2) + (10*w) + (100*w) + (100*w) + (100*w) + (100*x);\nloop invariant x >= (1 + (w - 1) * w / 2) + (10*w) + (100*w) + (100*w) + (100*w) + (100*w);\nloop invariant x >= (1 + (w - 1) * w / 2) + (10*w) + (100*w) + (100*w) + (100*w) + (100*w) + (100*x);\nloop invariant x >= (1 + (w - 1) * w / 2) + (10*w) + (100*w) + (100*w) + (100*w) + (100*w) + (100*w);\nloop invariant x >= (1 + (w - 1) * w / 2) + (10*w) + (100*w) + (100*w) + (100*w) + (100*w) + (100*w) + (100*x);\nloop invariant x >= (1 + (w - 1) * w / 2) + (10*w) + (100*w) + (100*w) + (100*w) + (100*w) + (100*w) + (100*w);\nloop invariant x >= (1 + (w - 1) * w / 2) + (10*w) + (100*w) + (100*w) + (100*w) + (100*w) + (100*w) + (100*w) + (100*x);\nloop invariant x >= (1 + (w - 1) * w / 2) + (10*w) + (100*w) + (100*w) + (100*w) + (100*w) + (100*w) + (100*w) + (100*w);\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= 4;\nloop invariant 0 <= z <= 10*x;\nloop invariant 1 <= w <= 10*x;\nloop invariant 0 <= y <= 100*x;\nloop invariant 100*x >= y >= (1 - 10*w);\nloop invariant 10*(x-1) >= z >= 10*(x-1);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 1000;\nloop invariant 0 <= z <= 400;\nloop invariant 0 <= w <= 100;\nloop invariant x < 4 ==> y >= 0;\nloop invariant x >= 4 ==> y >= 2;\nloop invariant x >= 4 ==> x >= y - 100;\nloop invariant x >= 4 ==> x >= z / 10;\nloop invariant x < 4 ==> y >= z / 10;\nloop invariant x < 4 ==> y >= x * 100;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 400;\nloop invariant 0 <= w <= 4;\nloop invariant 0 <= z <= 400;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 100000;\nloop invariant 0 <= z <= 100000;\nloop invariant w >= 0;\nloop invariant x <= w;\nloop invariant y <= z;\nloop invariant (-1) <= y;\nloop invariant x >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main(){\n  int x=0;\n  int y=0;\n  int z=0;\n  int w=0;\n\n  /*@\n\n\n*/\nwhile ( unknown() ){\n    if ( unknown() ) {\n      x++; y = y+100;\n    } else if  ( unknown() ) {\n      if( x >= 4)\n\t{ x=x+1; y=y+1;}\n    } else if  ( y >10*w)\n      if (z>=100*x )\n      y = -y;\n    w=w+1; \n    z=z+10;\n  }\n  if ( x >=4 )\n    {;\n//@ assert(y>2);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant i1;\nloop invariant i2;\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 100000;\nloop invariant 0 <= z <= 40000;\nloop invariant 0 <= w <= 100000;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main(){\n  int x=0;\n  int y=0;\n  int z=0;\n  int w=0;\n\n  /*@\n\n\n\n\n\n\n\n*/\nwhile ( unknown() ){\n    if ( unknown() ) {\n      x++; y = y+100;\n    } else if  ( unknown() ) {\n      if( x >= 4)\n\t{ x=x+1; y=y+1;}\n    } else if  ( y >10*w)\n      if (z>=100*x )\n      y = -y;\n    w=w+1; \n    z=z+10;\n  }\n  if ( x >=4 )\n    {;\n//@ assert(y>2);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 1 <= y <= 100000;\nloop invariant 0 <= x <= 100000;\nloop invariant 0 <= z <= 100000;\nloop invariant 0 <= w <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant w >= 0;\nloop invariant x >= 4 ==> x >= 4;\nloop invariant x >= 4 ==> y >= 2;\nloop invariant x >= 4 ==> z >= 400;\nloop invariant x >= 4 ==> w >= 1;\nloop invariant x >= 4 ==> y >= 2 ==> x >= 4;\nloop invariant x >= 4 ==> x >= 4 ==> y >= 2;\nloop invariant x >= 4 ==> x >= 4 ==> z >= 400;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main(){\n  int x=0;\n  int y=0;\n  int z=0;\n  int w=0;\n\n  /*@\n\n\n\n\n\n\nloop invariant i7: z >= 0;\nloop invariant i8: w >= 0;\nloop invariant i9: x >= 4 ==> x >= 4;\n\n\nloop invariant i12: x >= 4 ==> w >= 1;\nloop invariant i13: x >= 4 ==> y >= 2 ==> x >= 4;\n\n\n*/\nwhile ( unknown() ){\n    if ( unknown() ) {\n      x++; y = y+100;\n    } else if  ( unknown() ) {\n      if( x >= 4)\n\t{ x=x+1; y=y+1;}\n    } else if  ( y >10*w)\n      if (z>=100*x )\n      y = -y;\n    w=w+1; \n    z=z+10;\n  }\n  if ( x >=4 )\n    {;\n//@ assert(y>2);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant y >= 0;\nloop invariant y <= 100;\nloop invariant y <= w;\nloop invariant y <= 10*w;\nloop invariant z >= 0;\nloop invariant z <= 10*w;\nloop invariant w >= 0;\nloop invariant x >= 0;\nloop invariant x <= 4;\nloop invariant unknown ==> y > 2;\nloop invariant unknown ==> x >= 4;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main(){\n  int x=0;\n  int y=0;\n  int z=0;\n  int w=0;\n\n  /*@\n\n\n\n\nloop invariant i5: z >= 0;\nloop invariant i6: z <= 10*w;\nloop invariant i7: w >= 0;\nloop invariant i8: x >= 0;\n\n\n\n*/\nwhile ( unknown() ){\n    if ( unknown() ) {\n      x++; y = y+100;\n    } else if  ( unknown() ) {\n      if( x >= 4)\n\t{ x=x+1; y=y+1;}\n    } else if  ( y >10*w)\n      if (z>=100*x )\n      y = -y;\n    w=w+1; \n    z=z+10;\n  }\n  if ( x >=4 )\n    {;\n//@ assert(y>2);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant w >= 0;\nloop invariant x >= y;\nloop invariant x >= w;\nloop invariant y >= z;\nloop invariant y >= w;\nloop invariant z >= w;\nloop invariant x >= 4 ==> y >= 2;\nloop invariant x >= 4 ==> y >= 100;\nloop invariant x >= 4 ==> z >= 100 * x;\nloop invariant x >= 4 ==> y >= 10 * w;\nloop invariant x >= 4 ==> z >= 100 * x;\nloop invariant x >= 4 ==> y >= 10 * w;\nloop invariant x >= 4 ==> z >= 100 * x;\nloop invariant x >= 4 ==> y >= 10 * w;\nloop invariant x >= 4 ==> z >= 100 * x;\nloop invariant x >= 4 ==> y >= 10 * w;\nloop invariant x >= 4 ==> z >= 100 * x;\nloop invariant x >= 4 ==> y >= 10 * w;\nloop invariant x >= 4 ==> z >= 100 * x;\nloop invariant x >= 4 ==> y >= 10 * w;\nloop invariant x >= 4 ==> z >= 100 * x;\nloop invariant x >= 4 ==> y >= 10 * w;\nloop invariant x >= 4 ==> z >= 100 * x;\nloop invariant x >= 4 ==> y >= 10 * w;\nloop invariant x >= 4 ==> z >= 100 * x;\nloop invariant x >= 4 ==> y >= 10 * w;\nloop invariant x >= 4 ==> z >= 100 * x;\nloop invariant x >= 4 ==> y >= 10 * w;\nloop invariant x >= 4 ==> z >= 100 * x;\nloop invariant x >= 4 ==> y >= 10 * w;\nloop invariant x >= 4 ==> z >= 100 * x;\nloop invariant x >= 4 ==> y >= 10 * w;\nloop invariant x >= 4 ==> z >= 100 * x;\nloop invariant x >= 4 ==> y >= 10 * w;\nloop invariant x >= 4 ==> z >= 100 * x;\nloop invariant x >= 4 ==> y >= 10 * w;\nloop invariant x >= 4 ==> z >= 100 * x;\nloop invariant x >= 4 ==> y >= 10 * w;\nloop invariant x >= 4 ==> z >= 100 * x;\nloop invariant x >= 4 ==> y >= 10 * w;\nloop invariant x >= 4 ==> z >= 100 * x;\nloop invariant x >= 4 ==> y >= 10 * w;\nloop invariant x >= 4 ==> z >= 100 * x;\nloop invariant x >= 4 ==> y >= 10 * w;\nloop invariant x >= 4 ==> z >= 100 * x;\nloop invariant x >= 4 ==> y >= 10 * w;\nloop invariant x >= 4 ==> z >= 100 * x;\nloop invariant x >= 4 ==> y >= 10 * w;\nloop invariant x >= 4 ==> z >= 100 * x;\nloop invariant x >= 4 ==> y >= 10 * w;\nloop invariant x >= 4 ==> z >= 100 * x;\nloop invariant x >= 4 ==> y >= 10 * w;\nloop invariant x >= 4 ==> z >= 100 * x;\nloop invariant x >= 4 ==> y >= 10 * w;\nloop invariant x >= 4 ==> z >= 100 * x;\nloop invariant x >= 4 ==> y >= 10 * w;\nloop invariant x >= 4 ==> z >= 100 * x;\nloop invariant x >= 4 ==> y >= 10 * w;\nloop invariant x >= 4 ==> z >= 100 * x;\nloop invariant x >= 4 ==> y >= 10 * w;\nloop invariant x >= 4 ==> z >= 100 * x;\nloop invariant x >= 4 ==> y >= 10 * w;\nloop invariant x >= 4 ==> z >= 100 * x;\nloop invariant x >= 4 ==> y >= 10 * w;\nloop invariant x >= 4 ==> z >= 100 * x;\nloop invariant x >= 4 ==> y >= 10 * w;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main(){\n  int x=0;\n  int y=0;\n  int z=0;\n  int w=0;\n\n  /*@\n\nloop invariant i2: x >= 0;\n\nloop invariant i4: z >= 0;\nloop invariant i5: w >= 0;\n\n\n\n\nloop invariant i10: z >= w;\n\n\n\n\n*/\nwhile ( unknown() ){\n    if ( unknown() ) {\n      x++; y = y+100;\n    } else if  ( unknown() ) {\n      if( x >= 4)\n\t{ x=x+1; y=y+1;}\n    } else if  ( y >10*w)\n      if (z>=100*x )\n      y = -y;\n    w=w+1; \n    z=z+10;\n  }\n  if ( x >=4 )\n    {;\n//@ assert(y>2);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= w <= 10;\nloop invariant 0 <= z <= 1000;\nloop invariant (x >= 4 ==> y > 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main(){\n  int x=0;\n  int y=0;\n  int z=0;\n  int w=0;\n\n  /*@\n\n\n\n\n*/\nwhile ( unknown() ){\n    if ( unknown() ) {\n      x++; y = y+100;\n    } else if  ( unknown() ) {\n      if( x >= 4)\n\t{ x=x+1; y=y+1;}\n    } else if  ( y >10*w)\n      if (z>=100*x )\n      y = -y;\n    w=w+1; \n    z=z+10;\n  }\n  if ( x >=4 )\n    {;\n//@ assert(y>2);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant z >= 10 * w;\nloop invariant x >= 4 ==> y > 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main(){\n  int x=0;\n  int y=0;\n  int z=0;\n  int w=0;\n\n  /*@\n\n\nloop invariant i3: z >= 10 * w;\n\n*/\nwhile ( unknown() ){\n    if ( unknown() ) {\n      x++; y = y+100;\n    } else if  ( unknown() ) {\n      if( x >= 4)\n\t{ x=x+1; y=y+1;}\n    } else if  ( y >10*w)\n      if (z>=100*x )\n      y = -y;\n    w=w+1; \n    z=z+10;\n  }\n  if ( x >=4 )\n    {;\n//@ assert(y>2);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant w >= 0;\nloop invariant w <= x;\nloop invariant z <= x + 200 * w;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant w >= 0;\nloop invariant w <= x;\nloop invariant z <= x + 200 * w;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main(){\n  int x=0;\n  int y=0;\n  int z=0;\n  int w=0;\n\n  /*@\nloop invariant i1: x >= 0;\n\nloop invariant i3: z >= 0;\nloop invariant i4: w >= 0;\n\nloop invariant i6: z <= x + 200 * w;\n*/\nwhile ( unknown() ){\n    if ( unknown() ) {\n      x++; y = y+100;\n    } else if  ( unknown() ) {\n      if( x >= 4)\n\t{ x=x+1; y=y+1;}\n    } else if  ( y >10*w)\n      if (z>=100*x )\n      y = -y;\n    w=w+1; \n    z=z+10;\n  }\n  if ( x >=4 )\n    {;\n//@ assert(y>2);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main(){\n  int x=0;\n  int y=0;\n  int z=0;\n  int w=0;\n\n  /*@\n\n\n*/\nwhile ( unknown() ){\n    if ( unknown() ) {\n      x++; y = y+100;\n    } else if  ( unknown() ) {\n      if( x >= 4)\n\t{ x=x+1; y=y+1;}\n    } else if  ( y >10*w)\n      if (z>=100*x )\n      y = -y;\n    w=w+1; \n    z=z+10;\n  }\n  if ( x >=4 )\n    {;\n//@ assert(y>2);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 22,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant 0 <= x <= 100000;\nloop invariant y >= 0;\nloop invariant w >= 0;\nloop invariant z >= 0;\nloop invariant x >= 0;\nloop invariant z >= (10*w);\nloop invariant z >= (100*x);\nloop invariant z >= (100*w);\nloop invariant x >= (1 + (w - 1) * w / 2);\nloop invariant x >= (1 + (w - 1) * w / 2) + (10*w);\nloop invariant x >= (1 + (w - 1) * w / 2) + (100*x);\nloop invariant x >= (1 + (w - 1) * w / 2) + (100*w);\nloop invariant x >= (1 + (w - 1) * w / 2) + (10*w) + (100*x);\nloop invariant x >= (1 + (w - 1) * w / 2) + (10*w) + (100*w);\nloop invariant x >= (1 + (w - 1) * w / 2) + (10*w) + (100*w) + (100*x);\nloop invariant x >= (1 + (w - 1) * w / 2) + (10*w) + (100*w) + (100*w);\nloop invariant x >= (1 + (w - 1) * w / 2) + (10*w) + (100*w) + (100*w) + (100*x);\nloop invariant x >= (1 + (w - 1) * w / 2) + (10*w) + (100*w) + (100*w) + (100*w);\nloop invariant x >= (1 + (w - 1) * w / 2) + (10*w) + (100*w) + (100*w) + (100*w) + (100*x);\nloop invariant x >= (1 + (w - 1) * w / 2) + (10*w) + (100*w) + (100*w) + (100*w) + (100*w);\nloop invariant x >= (1 + (w - 1) * w / 2) + (10*w) + (100*w) + (100*w) + (100*w) + (100*w) + (100*x);\nloop invariant x >= (1 + (w - 1) * w / 2) + (10*w) + (100*w) + (100*w) + (100*w) + (100*w) + (100*w);\nloop invariant x >= (1 + (w - 1) * w / 2) + (10*w) + (100*w) + (100*w) + (100*w) + (100*w) + (100*w) + (100*x);\nloop invariant x >= (1 + (w - 1) * w / 2) + (10*w) + (100*w) + (100*w) + (100*w) + (100*w) + (100*w) + (100*w);\nloop invariant x >= (1 + (w - 1) * w / 2) + (10*w) + (100*w) + (100*w) + (100*w) + (100*w) + (100*w) + (100*w) + (100*x);\nloop invariant x >= (1 + (w - 1) * w / 2) + (10*w) + (100*w) + (100*w) + (100*w) + (100*w) + (100*w) + (100*w) + (100*w);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main(){\n  int x=0;\n  int y=0;\n  int z=0;\n  int w=0;\n\n  /*@\n\n\n\n\nloop invariant i5: w >= 0;\nloop invariant i6: z >= 0;\nloop invariant i7: x >= 0;\nloop invariant i8: z >= (10*w);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile ( unknown() ){\n    if ( unknown() ) {\n      x++; y = y+100;\n    } else if  ( unknown() ) {\n      if( x >= 4)\n\t{ x=x+1; y=y+1;}\n    } else if  ( y >10*w)\n      if (z>=100*x )\n      y = -y;\n    w=w+1; \n    z=z+10;\n  }\n  if ( x >=4 )\n    {;\n//@ assert(y>2);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= 4;\nloop invariant 0 <= z <= 10*x;\nloop invariant 1 <= w <= 10*x;\nloop invariant 0 <= y <= 100*x;\nloop invariant 100*x >= y >= (1 - 10*w);\nloop invariant 10*(x-1) >= z >= 10*(x-1);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main(){\n  int x=0;\n  int y=0;\n  int z=0;\n  int w=0;\n\n  /*@\n\n\n\n\n\n\n*/\nwhile ( unknown() ){\n    if ( unknown() ) {\n      x++; y = y+100;\n    } else if  ( unknown() ) {\n      if( x >= 4)\n\t{ x=x+1; y=y+1;}\n    } else if  ( y >10*w)\n      if (z>=100*x )\n      y = -y;\n    w=w+1; \n    z=z+10;\n  }\n  if ( x >=4 )\n    {;\n//@ assert(y>2);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 1000;\nloop invariant 0 <= z <= 400;\nloop invariant 0 <= w <= 100;\nloop invariant x < 4 ==> y >= 0;\nloop invariant x >= 4 ==> y >= 2;\nloop invariant x >= 4 ==> x >= y - 100;\nloop invariant x >= 4 ==> x >= z / 10;\nloop invariant x < 4 ==> y >= z / 10;\nloop invariant x < 4 ==> y >= x * 100;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main(){\n  int x=0;\n  int y=0;\n  int z=0;\n  int w=0;\n\n  /*@\n\n\n\n\n\n\n\n\n\n\n*/\nwhile ( unknown() ){\n    if ( unknown() ) {\n      x++; y = y+100;\n    } else if  ( unknown() ) {\n      if( x >= 4)\n\t{ x=x+1; y=y+1;}\n    } else if  ( y >10*w)\n      if (z>=100*x )\n      y = -y;\n    w=w+1; \n    z=z+10;\n  }\n  if ( x >=4 )\n    {;\n//@ assert(y>2);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 400;\nloop invariant 0 <= w <= 4;\nloop invariant 0 <= z <= 400;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main(){\n  int x=0;\n  int y=0;\n  int z=0;\n  int w=0;\n\n  /*@\n\n\n\n\n*/\nwhile ( unknown() ){\n    if ( unknown() ) {\n      x++; y = y+100;\n    } else if  ( unknown() ) {\n      if( x >= 4)\n\t{ x=x+1; y=y+1;}\n    } else if  ( y >10*w)\n      if (z>=100*x )\n      y = -y;\n    w=w+1; \n    z=z+10;\n  }\n  if ( x >=4 )\n    {;\n//@ assert(y>2);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 100000;\nloop invariant 0 <= z <= 100000;\nloop invariant w >= 0;\nloop invariant x <= w;\nloop invariant y <= z;\nloop invariant (-1) <= y;\nloop invariant x >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main(){\n  int x=0;\n  int y=0;\n  int z=0;\n  int w=0;\n\n  /*@\n\n\n\nloop invariant i4: w >= 0;\nloop invariant i5: x <= w;\n\n\nloop invariant i8: x >= 0;\n*/\nwhile ( unknown() ){\n    if ( unknown() ) {\n      x++; y = y+100;\n    } else if  ( unknown() ) {\n      if( x >= 4)\n\t{ x=x+1; y=y+1;}\n    } else if  ( y >10*w)\n      if (z>=100*x )\n      y = -y;\n    w=w+1; \n    z=z+10;\n  }\n  if ( x >=4 )\n    {;\n//@ assert(y>2);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main(){\n  int x=0;\n  int y=0;\n  int z=0;\n  int w=0;\n\n  /*@\n\n\n*/\nwhile ( unknown() ){\n    if ( unknown() ) {\n      x++; y = y+100;\n    } else if  ( unknown() ) {\n      if( x >= 4)\n\t{ x=x+1; y=y+1;}\n    } else if  ( y >10*w)\n      if (z>=100*x )\n      y = -y;\n    w=w+1; \n    z=z+10;\n  }\n  if ( x >=4 )\n    {;\n//@ assert(y>2);\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 20: unbound logic variable i1. Ignoring loop annotation",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main(){\n  int x=0;\n  int y=0;\n  int z=0;\n  int w=0;\n\n  /*@\nloop invariant i1: 0 <= y <= 100000;\nloop invariant i2: x >= (1 + (y - 1) * y / 2);\nloop invariant i3: i1;\nloop invariant i4: i2;\nloop invariant i5: 0 <= x <= 4;\nloop invariant i6: 0 <= z <= 40000;\nloop invariant i7: 0 <= w <= 100000;\nloop invariant i8: 1 <= y <= 100000;\nloop invariant i9: 0 <= x <= 100000;\nloop invariant i10: 0 <= z <= 100000;\nloop invariant i11: y >= 0;\nloop invariant i12: z >= 0;\nloop invariant i13: w >= 0;\nloop invariant i14: x >= 4 ==> x >= 4;\nloop invariant i15: x >= 4 ==> y >= 2;\nloop invariant i16: x >= 4 ==> z >= 400;\nloop invariant i17: x >= 4 ==> w >= 1;\nloop invariant i18: x >= 4 ==> y >= 2 ==> x >= 4;\nloop invariant i19: x >= 4 ==> x >= 4 ==> y >= 2;\nloop invariant i20: x >= 4 ==> x >= 4 ==> z >= 400;\nloop invariant i21: y <= 100;\nloop invariant i22: y <= w;\nloop invariant i23: y <= 10*w;\nloop invariant i24: z <= 10*w;\nloop invariant i25: x >= 0;\nloop invariant i26: x <= 4;\nloop invariant i27: unknown ==> y > 2;\nloop invariant i28: unknown ==> x >= 4;\nloop invariant i29: 0 <= y <= 100;\nloop invariant i30: x >= y;\nloop invariant i31: x >= w;\nloop invariant i32: y >= z;\nloop invariant i33: y >= w;\nloop invariant i34: z >= w;\nloop invariant i35: x >= 4 ==> y >= 100;\nloop invariant i36: x >= 4 ==> z >= 100 * x;\nloop invariant i37: x >= 4 ==> y >= 10 * w;\nloop invariant i38: 0 <= w <= 10;\nloop invariant i39: 0 <= z <= 1000;\nloop invariant i40: (x >= 4 ==> y > 2);\nloop invariant i41: z >= 10 * w;\nloop invariant i42: x >= 4 ==> y > 2;\nloop invariant i43: w <= x;\nloop invariant i44: z <= x + 200 * w;\nloop invariant i45: z >= (10*w);\nloop invariant i46: z >= (100*x);\nloop invariant i47: z >= (100*w);\nloop invariant i48: x >= (1 + (w - 1) * w / 2);\nloop invariant i49: x >= (1 + (w - 1) * w / 2) + (10*w);\nloop invariant i50: x >= (1 + (w - 1) * w / 2) + (100*x);\nloop invariant i51: x >= (1 + (w - 1) * w / 2) + (100*w);\nloop invariant i52: x >= (1 + (w - 1) * w / 2) + (10*w) + (100*x);\nloop invariant i53: x >= (1 + (w - 1) * w / 2) + (10*w) + (100*w);\nloop invariant i54: x >= (1 + (w - 1) * w / 2) + (10*w) + (100*w) + (100*x);\nloop invariant i55: x >= (1 + (w - 1) * w / 2) + (10*w) + (100*w) + (100*w);\nloop invariant i56: x >= (1 + (w - 1) * w / 2) + (10*w) + (100*w) + (100*w) + (100*x);\nloop invariant i57: x >= (1 + (w - 1) * w / 2) + (10*w) + (100*w) + (100*w) + (100*w);\nloop invariant i58: x >= (1 + (w - 1) * w / 2) + (10*w) + (100*w) + (100*w) + (100*w) + (100*x);\nloop invariant i59: x >= (1 + (w - 1) * w / 2) + (10*w) + (100*w) + (100*w) + (100*w) + (100*w);\nloop invariant i60: x >= (1 + (w - 1) * w / 2) + (10*w) + (100*w) + (100*w) + (100*w) + (100*w) + (100*x);\nloop invariant i61: x >= (1 + (w - 1) * w / 2) + (10*w) + (100*w) + (100*w) + (100*w) + (100*w) + (100*w);\nloop invariant i62: x >= (1 + (w - 1) * w / 2) + (10*w) + (100*w) + (100*w) + (100*w) + (100*w) + (100*w) + (100*x);\nloop invariant i63: x >= (1 + (w - 1) * w / 2) + (10*w) + (100*w) + (100*w) + (100*w) + (100*w) + (100*w) + (100*w);\nloop invariant i64: x >= (1 + (w - 1) * w / 2) + (10*w) + (100*w) + (100*w) + (100*w) + (100*w) + (100*w) + (100*w) + (100*x);\nloop invariant i65: x >= (1 + (w - 1) * w / 2) + (10*w) + (100*w) + (100*w) + (100*w) + (100*w) + (100*w) + (100*w) + (100*w);\nloop invariant i66: 1 <= x <= 4;\nloop invariant i67: 0 <= z <= 10*x;\nloop invariant i68: 1 <= w <= 10*x;\nloop invariant i69: 0 <= y <= 100*x;\nloop invariant i70: 100*x >= y >= (1 - 10*w);\nloop invariant i71: 10*(x-1) >= z >= 10*(x-1);\nloop invariant i72: 0 <= y <= 1000;\nloop invariant i73: 0 <= z <= 400;\nloop invariant i74: 0 <= w <= 100;\nloop invariant i75: x < 4 ==> y >= 0;\nloop invariant i76: x >= 4 ==> x >= y - 100;\nloop invariant i77: x >= 4 ==> x >= z / 10;\nloop invariant i78: x < 4 ==> y >= z / 10;\nloop invariant i79: x < 4 ==> y >= x * 100;\nloop invariant i80: 0 <= y <= 400;\nloop invariant i81: 0 <= w <= 4;\nloop invariant i82: x <= w;\nloop invariant i83: y <= z;\nloop invariant i84: (-1) <= y;\n*/\nwhile ( unknown() ){\n    if ( unknown() ) {\n      x++; y = y+100;\n    } else if  ( unknown() ) {\n      if( x >= 4)\n\t{ x=x+1; y=y+1;}\n    } else if  ( y >10*w)\n      if (z>=100*x )\n      y = -y;\n    w=w+1; \n    z=z+10;\n  }\n  if ( x >=4 )\n    {;\n//@ assert(y>2);\n}\n\n}",
        "combined_annotation_num_solver_calls": 44,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main(){\n  int x=0;\n  int y=0;\n  int z=0;\n  int w=0;\n\n  /*@\n\n\n\n\n\n\n\n\n\n\nloop invariant i11: y >= 0;\nloop invariant i12: z >= 0;\nloop invariant i13: w >= 0;\nloop invariant i14: x >= 4 ==> x >= 4;\nloop invariant i15: x >= 4 ==> y >= 2;\n\nloop invariant i17: x >= 4 ==> w >= 1;\nloop invariant i18: x >= 4 ==> y >= 2 ==> x >= 4;\nloop invariant i19: x >= 4 ==> x >= 4 ==> y >= 2;\n\n\n\n\nloop invariant i24: z <= 10*w;\nloop invariant i25: x >= 0;\n\n\n\n\n\n\n\n\nloop invariant i34: z >= w;\nloop invariant i35: x >= 4 ==> y >= 100;\n\n\n\n\nloop invariant i40: (x >= 4 ==> y > 2);\nloop invariant i41: z >= 10 * w;\nloop invariant i42: x >= 4 ==> y > 2;\n\nloop invariant i44: z <= x + 200 * w;\nloop invariant i45: z >= (10*w);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i69: 0 <= y <= 100*x;\n\n\n\n\n\nloop invariant i75: x < 4 ==> y >= 0;\n\n\n\nloop invariant i79: x < 4 ==> y >= x * 100;\n\n\nloop invariant i82: x <= w;\n\nloop invariant i84: (-1) <= y;\n*/\nwhile ( unknown() ){\n    if ( unknown() ) {\n      x++; y = y+100;\n    } else if  ( unknown() ) {\n      if( x >= 4)\n\t{ x=x+1; y=y+1;}\n    } else if  ( y >10*w)\n      if (z>=100*x )\n      y = -y;\n    w=w+1; \n    z=z+10;\n  }\n  if ( x >=4 )\n    {;\n//@ assert(y>2);\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/rajamani_1.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c"
        ],
        "skipped": [],
        "total": 32,
        "success_count": 30,
        "failure_count": 2,
        "success_rate": 0.9375
    }
}