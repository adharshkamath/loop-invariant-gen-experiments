{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04_safe.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#define a (1)\n#define SIZE 8\nint main() { \n  int i, sn=0;\n  for(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 1 <= i <= SIZE;\nloop invariant sn >= 0;\nloop invariant sn == (i - 1) * a;\nloop invariant a == 1;\nloop invariant SIZE == 8;\nloop invariant a == 1 ==> sn == (i - 1) * a;\nloop invariant sn == 0 ==> sn == (i - 1) * a;\nloop invariant sn == SIZE * a ==> sn == (i - 1) * a;\nloop invariant sn == SIZE * a ==> sn == (i - 1) * a;\nloop invariant sn == SIZE * a ==> sn == (i - 1) * a;\nloop invariant sn == SIZE * a ==> sn == (i - 1) * a;\nloop invariant sn == SIZE * a ==> sn == (i - 1) * a;\nloop invariant sn == SIZE * a ==> sn == (i - 1) * a;\nloop invariant sn == SIZE * a ==> sn == (i - 1) * a;\nloop invariant sn == SIZE * a ==> sn == (i - 1) * a;\nloop invariant sn == SIZE * a ==> sn == (i - 1) * a;\nloop invariant sn == SIZE * a ==> sn == (i - 1) * a;\nloop invariant sn == SIZE * a ==> sn == (i - 1) * a;\nloop invariant sn == SIZE * a ==> sn == (i - 1) * a;\nloop invariant sn == SIZE * a ==> sn == (i - 1) * a;\nloop invariant sn == SIZE * a ==> sn == (i - 1) * a;\nloop invariant sn == SIZE * a ==> sn == (i - 1) * a;\nloop invariant sn == SIZE * a ==> sn == (i - 1) * a;\nloop invariant sn == SIZE * a ==> sn == (i - 1) * a;\nloop invariant sn == SIZE * a ==> sn == (i - 1) * a;\nloop invariant sn == SIZE * a ==> sn == (i - 1) * a;\nloop invariant sn == SIZE * a ==> sn == (i - 1) * a;\nloop invariant sn == SIZE * a ==> sn == (i - 1) * a;\nloop invariant sn == SIZE * a ==> sn == (i - 1) * a;\nloop invariant sn == SIZE * a ==> sn == (i - 1) * a;\nloop invariant sn == SIZE * a ==> sn == (i - 1) * a;\nloop invariant sn == SIZE * a ==> sn == (i - 1) * a;\nloop invariant sn == SIZE * a ==> sn == (i - 1) * a;\nloop invariant sn == SIZE * a ==> sn == (i - 1) * a;\nloop invariant sn == SIZE * a ==> sn == (i - 1) * a;\nloop invariant sn == SIZE * a ==> sn == (i - 1) * a;\nloop invariant sn == SIZE * a ==> sn == (i - 1) * a;\nloop invariant sn == SIZE * a ==> sn == (i - 1) * a;\nloop invariant sn == SIZE * a ==> sn == (i - 1) * a;\nloop invariant sn == SIZE * a ==> sn == (i - 1) * a;\nloop invariant sn == SIZE * a ==> sn == (i - 1) * a;\nloop invariant sn == SIZE * a ==> sn == (i - 1) * a;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= sn <= SIZE*a;\nloop invariant sn == i*a;\nloop invariant i >= 1 && i <= SIZE;\nloop invariant sn == SIZE*a || sn == 0;\nloop invariant sn == i*a || sn == 0;\nloop invariant sn == SIZE*a || sn == 0;\nloop invariant sn == SIZE*a || sn == 0;\nloop invariant sn == SIZE*a || sn == 0;\nloop invariant sn == SIZE*a || sn == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= sn <= SIZE * a;\nloop invariant i >= 1;\nloop invariant i <= SIZE + 1;\nloop invariant sn == i * a - a;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= SIZE + 1;\nloop invariant sn = a * i;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant sn == a * (i - 1);\nloop invariant a * (i - 1) == sn;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= sn <= SIZE * a;\nloop invariant i == 1 || i == 2 || ... || i == SIZE + 1;\nloop invariant sn == a * (i - 1);\nloop invariant i <= SIZE;\nloop invariant sn <= SIZE * a;\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant a == 1;\nloop invariant SIZE == 8;\n*/\n```",
            "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant i3;\nloop invariant i4;\nloop invariant i5;\nloop invariant i6;\nloop invariant i7;\nloop invariant i8;\nloop invariant i9;\nloop invariant i10;\nloop invariant i11;\nloop invariant i12;\nloop invariant i13;\nloop invariant i14;\nloop invariant i15;\nloop invariant i16;\nloop invariant i17;\nloop invariant i18;\nloop invariant i19;\nloop invariant i20;\nloop invariant i21;\nloop invariant i22;\nloop invariant i23;\nloop invariant i24;\nloop invariant i25;\nloop invariant i26;\nloop invariant i27;\nloop invariant i28;\nloop invariant i29;\nloop invariant i30;\nloop invariant i31;\nloop invariant i32;\nloop invariant i33;\nloop invariant i34;\nloop invariant i35;\nloop invariant i36;\nloop invariant i37;\nloop invariant i38;\nloop invariant i39;\nloop invariant i40;\nloop invariant i41;\nloop invariant i42;\nloop invariant i43;\nloop invariant i44;\nloop invariant i45;\nloop invariant i46;\nloop invariant i47;\nloop invariant i48;\nloop invariant i49;\nloop invariant i50;\nloop invariant i51;\nloop invariant i52;\nloop invariant i53;\nloop invariant i54;\nloop invariant i55;\nloop invariant i56;\nloop invariant i57;\nloop invariant i58;\nloop invariant i59;\nloop invariant i60;\nloop invariant i61;\nloop invariant i62;\nloop invariant i63;\nloop invariant i64;\nloop invariant i65;\nloop invariant i66;\nloop invariant i67;\nloop invariant i68;\nloop invariant i69;\nloop invariant i70;\nloop invariant i71;\nloop invariant i72;\nloop invariant i73;\nloop invariant i74;\nloop invariant i75;\nloop invariant i76;\nloop invariant i77;\nloop invariant i78;\nloop invariant i79;\nloop invariant i80;\nloop invariant i81;\nloop invariant i82;\nloop invariant i83;\nloop invariant i84;\nloop invariant i85;\nloop invariant i86;\nloop invariant i87;\nloop invariant i88;\nloop invariant i89;\nloop invariant i90;\nloop invariant i91;\nloop invariant i92;\nloop invariant i93;\nloop invariant i94;\nloop invariant i95;\nloop invariant i96;\nloop invariant i97;\nloop invariant i98;\nloop invariant i99;\nloop invariant i100;\nloop invariant i101;\nloop invariant i102;\nloop invariant i103;\nloop invariant i104;\nloop invariant i105;\nloop invariant i106;\nloop invariant i107;\nloop invariant i108;\nloop invariant i109;\nloop invariant i110;\nloop invariant i111;\nloop invariant i112;\nloop invariant i113;\nloop invariant i114;\nloop invariant i115;\nloop invariant i116;\nloop invariant i117;\nloop invariant i118;\nloop invariant i119;\nloop invariant i120;\nloop invariant i121;\nloop invariant i122;\nloop invariant i123;\nloop invariant i124;\nloop invariant i125;\nloop invariant i126;\nloop invariant i127;\nloop invariant i128;\nloop invariant i129;\nloop invariant i130;\nloop invariant i131;\nloop invariant i132;\nloop invariant i133;\nloop invariant i134;\nloop invariant i135;\nloop invariant i136;\nloop invariant i137;\nloop invariant i138;\nloop invariant i139;\nloop invariant i140;\nloop invariant i141;\nloop invariant i142;\nloop invariant i143;\nloop invariant i144;\nloop invariant i145;\nloop invariant i146;\nloop invariant i147;\nloop invariant i148;\nloop invariant i149;\nloop invariant i150;\nloop invariant i151;\nloop invariant i152;\nloop invariant i153;\nloop invariant i154;\nloop invariant i155;\nloop invariant i156;\nloop invariant i157;\nloop invariant i158;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant sn == a * i;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant sn == (i-1)*a;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant sn >= 0;\nloop invariant sn <= SIZE*a;\nloop invariant sn == (i - 1)*a;\n*/\n```",
            "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant i3;\nloop invariant i4;\nloop invariant i5;\nloop invariant i6;\nloop invariant i7;\nloop invariant i8;\nloop invariant i9;\nloop invariant i10;\nloop invariant i11;\nloop invariant i12;\nloop invariant i13;\nloop invariant i14;\nloop invariant i15;\nloop invariant i16;\nloop invariant i17;\nloop invariant i18;\nloop invariant i19;\nloop invariant i20;\nloop invariant i21;\nloop invariant i22;\nloop invariant i23;\nloop invariant i24;\nloop invariant i25;\nloop invariant i26;\nloop invariant i27;\nloop invariant i28;\nloop invariant i29;\nloop invariant i30;\nloop invariant i31;\nloop invariant i32;\nloop invariant i33;\nloop invariant i34;\nloop invariant i35;\nloop invariant i36;\nloop invariant i37;\nloop invariant i38;\nloop invariant i39;\nloop invariant i40;\nloop invariant i41;\nloop invariant i42;\nloop invariant i43;\nloop invariant i44;\nloop invariant i45;\nloop invariant i46;\nloop invariant i47;\nloop invariant i48;\nloop invariant i49;\nloop invariant i50;\nloop invariant i51;\nloop invariant i52;\nloop invariant i53;\nloop invariant i54;\nloop invariant i55;\nloop invariant i56;\nloop invariant i57;\nloop invariant i58;\nloop invariant i59;\nloop invariant i60;\nloop invariant i61;\nloop invariant i62;\nloop invariant i63;\nloop invariant i64;\nloop invariant i65;\nloop invariant i66;\nloop invariant i67;\nloop invariant i68;\nloop invariant i69;\nloop invariant i70;\nloop invariant i71;\nloop invariant i72;\nloop invariant i73;\nloop invariant i74;\nloop invariant i75;\nloop invariant i76;\nloop invariant i77;\nloop invariant i78;\nloop invariant i79;\nloop invariant i80;\nloop invariant i81;\nloop invariant i82;\nloop invariant i83;\nloop invariant i84;\nloop invariant i85;\nloop invariant i86;\nloop invariant i87;\nloop invariant i88;\nloop invariant i89;\nloop invariant i90;\nloop invariant i91;\nloop invariant i92;\nloop invariant i93;\nloop invariant i94;\nloop invariant i95;\nloop invariant i96;\nloop invariant i97;\nloop invariant i98;\nloop invariant i99;\nloop invariant i100;\nloop invariant i101;\nloop invariant i102;\nloop invariant i103;\nloop invariant i104;\nloop invariant i105;\nloop invariant i106;\nloop invariant i107;\nloop invariant i108;\nloop invariant i109;\nloop invariant i110;\nloop invariant i111;\nloop invariant i112;\nloop invariant i113;\nloop invariant i114;\nloop invariant i115;\nloop invariant i116;\nloop invariant i117;\nloop invariant i118;\nloop invariant i119;\nloop invariant i120;\nloop invariant i121;\nloop invariant i122;\nloop invariant i123;\nloop invariant i124;\nloop invariant i125;\nloop invariant i126;\nloop invariant i127;\nloop invariant i128;\nloop invariant i129;\nloop invariant i130;\nloop invariant i131;\nloop invariant i132;\nloop invariant i133;\nloop invariant i134;\nloop invariant i135;\nloop invariant i136;\nloop invariant i137;\nloop invariant i138;\nloop invariant i139;\nloop invariant i140;\nloop invariant i141;\nloop invariant i142;\nloop invariant i143;\nloop invariant i144;\nloop invariant i145;\nloop invariant i146;\nloop invariant i147;\nloop invariant i148;\nloop invariant i149;\nloop invariant i150;\nloop invariant i151;\nloop invariant i152;\nloop invariant i153;\nloop invariant i154;\nloop invariant i155;\nloop invariant i156;\nloop invariant i157;\nloop invariant i158;\n*/\n```",
            "```\n/*@\nloop invariant (i <= SIZE ==> sn >= 0);\nloop invariant (i <= SIZE ==> sn <= SIZE*a);\nloop invariant (i == SIZE + 1 ==> sn == SIZE*a);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant 1 <= a <= SIZE;\nloop invariant 0 <= sn <= SIZE * a;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= SIZE + 1;\nloop invariant sn = a * i;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= SIZE;\nloop invariant 0 <= sn <= SIZE*a;\nloop invariant sn == (a * i) ==> sn == SIZE*a;\nloop invariant sn == 0 ==> sn == 0;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= SIZE;\nloop invariant sn >= 0;\nloop invariant sn == (i - 1) * a;\nloop invariant a == 1;\nloop invariant SIZE == 8;\nloop invariant a == 1 ==> sn == (i - 1) * a;\nloop invariant sn == 0 ==> sn == (i - 1) * a;\nloop invariant sn == SIZE * a ==> sn == (i - 1) * a;\nloop invariant sn == SIZE * a ==> sn == (i - 1) * a;\nloop invariant sn == SIZE * a ==> sn == (i - 1) * a;\nloop invariant sn == SIZE * a ==> sn == (i - 1) * a;\nloop invariant sn == SIZE * a ==> sn == (i - 1) * a;\nloop invariant sn == SIZE * a ==> sn == (i - 1) * a;\nloop invariant sn == SIZE * a ==> sn == (i - 1) * a;\nloop invariant sn == SIZE * a ==> sn == (i - 1) * a;\nloop invariant sn == SIZE * a ==> sn == (i - 1) * a;\nloop invariant sn == SIZE * a ==> sn == (i - 1) * a;\nloop invariant sn == SIZE * a ==> sn == (i - 1) * a;\nloop invariant sn == SIZE * a ==> sn == (i - 1) * a;\nloop invariant sn == SIZE * a ==> sn == (i - 1) * a;\nloop invariant sn == SIZE * a ==> sn == (i - 1) * a;\nloop invariant sn == SIZE * a ==> sn == (i - 1) * a;\nloop invariant sn == SIZE * a ==> sn == (i - 1) * a;\nloop invariant sn == SIZE * a ==> sn == (i - 1) * a;\nloop invariant sn == SIZE * a ==> sn == (i - 1) * a;\nloop invariant sn == SIZE * a ==> sn == (i - 1) * a;\nloop invariant sn == SIZE * a ==> sn == (i - 1) * a;\nloop invariant sn == SIZE * a ==> sn == (i - 1) * a;\nloop invariant sn == SIZE * a ==> sn == (i - 1) * a;\nloop invariant sn == SIZE * a ==> sn == (i - 1) * a;\nloop invariant sn == SIZE * a ==> sn == (i - 1) * a;\nloop invariant sn == SIZE * a ==> sn == (i - 1) * a;\nloop invariant sn == SIZE * a ==> sn == (i - 1) * a;\nloop invariant sn == SIZE * a ==> sn == (i - 1) * a;\nloop invariant sn == SIZE * a ==> sn == (i - 1) * a;\nloop invariant sn == SIZE * a ==> sn == (i - 1) * a;\nloop invariant sn == SIZE * a ==> sn == (i - 1) * a;\nloop invariant sn == SIZE * a ==> sn == (i - 1) * a;\nloop invariant sn == SIZE * a ==> sn == (i - 1) * a;\nloop invariant sn == SIZE * a ==> sn == (i - 1) * a;\nloop invariant sn == SIZE * a ==> sn == (i - 1) * a;\nloop invariant sn == SIZE * a ==> sn == (i - 1) * a;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#define a (1)\n#define SIZE 8\nint main() { \n  int i, sn=0;\n  /*@\n\nloop invariant i2: sn >= 0;\nloop invariant i3: sn == (i - 1) * a;\nloop invariant i4: a == 1;\nloop invariant i5: SIZE == 8;\nloop invariant i6: a == 1 ==> sn == (i - 1) * a;\nloop invariant i7: sn == 0 ==> sn == (i - 1) * a;\nloop invariant i8: sn == SIZE * a ==> sn == (i - 1) * a;\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= sn <= SIZE*a;\nloop invariant sn == i*a;\nloop invariant i >= 1 && i <= SIZE;\nloop invariant sn == SIZE*a || sn == 0;\nloop invariant sn == i*a || sn == 0;\nloop invariant sn == SIZE*a || sn == 0;\nloop invariant sn == SIZE*a || sn == 0;\nloop invariant sn == SIZE*a || sn == 0;\nloop invariant sn == SIZE*a || sn == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#define a (1)\n#define SIZE 8\nint main() { \n  int i, sn=0;\n  /*@\n\n\n\n\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= sn <= SIZE * a;\nloop invariant i >= 1;\nloop invariant i <= SIZE + 1;\nloop invariant sn == i * a - a;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#define a (1)\n#define SIZE 8\nint main() { \n  int i, sn=0;\n  /*@\nloop invariant i1: 0 <= sn <= SIZE * a;\nloop invariant i2: i >= 1;\nloop invariant i3: i <= SIZE + 1;\nloop invariant i4: sn == i * a - a;\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= SIZE + 1;\nloop invariant sn = a * i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#define a (1)\n#define SIZE 8\nint main() { \n  int i, sn=0;\n  /*@\nloop invariant i1: 1 <= i <= SIZE + 1;\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant sn == a * (i - 1);\nloop invariant a * (i - 1) == sn;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#define a (1)\n#define SIZE 8\nint main() { \n  int i, sn=0;\n  /*@\n\nloop invariant i2: sn == a * (i - 1);\nloop invariant i3: a * (i - 1) == sn;\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= sn <= SIZE * a;\nloop invariant i == 1 || i == 2 || ... || i == SIZE + 1;\nloop invariant sn == a * (i - 1);\nloop invariant i <= SIZE;\nloop invariant sn <= SIZE * a;\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant a == 1;\nloop invariant SIZE == 8;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#define a (1)\n#define SIZE 8\nint main() { \n  int i, sn=0;\n  /*@\nloop invariant i1: 0 <= sn <= SIZE * a;\n\nloop invariant i3: sn == a * (i - 1);\n\nloop invariant i5: sn <= SIZE * a;\nloop invariant i6: i >= 1;\nloop invariant i7: sn >= 0;\nloop invariant i8: a == 1;\nloop invariant i9: SIZE == 8;\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 158,
                "annotations": "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant i3;\nloop invariant i4;\nloop invariant i5;\nloop invariant i6;\nloop invariant i7;\nloop invariant i8;\nloop invariant i9;\nloop invariant i10;\nloop invariant i11;\nloop invariant i12;\nloop invariant i13;\nloop invariant i14;\nloop invariant i15;\nloop invariant i16;\nloop invariant i17;\nloop invariant i18;\nloop invariant i19;\nloop invariant i20;\nloop invariant i21;\nloop invariant i22;\nloop invariant i23;\nloop invariant i24;\nloop invariant i25;\nloop invariant i26;\nloop invariant i27;\nloop invariant i28;\nloop invariant i29;\nloop invariant i30;\nloop invariant i31;\nloop invariant i32;\nloop invariant i33;\nloop invariant i34;\nloop invariant i35;\nloop invariant i36;\nloop invariant i37;\nloop invariant i38;\nloop invariant i39;\nloop invariant i40;\nloop invariant i41;\nloop invariant i42;\nloop invariant i43;\nloop invariant i44;\nloop invariant i45;\nloop invariant i46;\nloop invariant i47;\nloop invariant i48;\nloop invariant i49;\nloop invariant i50;\nloop invariant i51;\nloop invariant i52;\nloop invariant i53;\nloop invariant i54;\nloop invariant i55;\nloop invariant i56;\nloop invariant i57;\nloop invariant i58;\nloop invariant i59;\nloop invariant i60;\nloop invariant i61;\nloop invariant i62;\nloop invariant i63;\nloop invariant i64;\nloop invariant i65;\nloop invariant i66;\nloop invariant i67;\nloop invariant i68;\nloop invariant i69;\nloop invariant i70;\nloop invariant i71;\nloop invariant i72;\nloop invariant i73;\nloop invariant i74;\nloop invariant i75;\nloop invariant i76;\nloop invariant i77;\nloop invariant i78;\nloop invariant i79;\nloop invariant i80;\nloop invariant i81;\nloop invariant i82;\nloop invariant i83;\nloop invariant i84;\nloop invariant i85;\nloop invariant i86;\nloop invariant i87;\nloop invariant i88;\nloop invariant i89;\nloop invariant i90;\nloop invariant i91;\nloop invariant i92;\nloop invariant i93;\nloop invariant i94;\nloop invariant i95;\nloop invariant i96;\nloop invariant i97;\nloop invariant i98;\nloop invariant i99;\nloop invariant i100;\nloop invariant i101;\nloop invariant i102;\nloop invariant i103;\nloop invariant i104;\nloop invariant i105;\nloop invariant i106;\nloop invariant i107;\nloop invariant i108;\nloop invariant i109;\nloop invariant i110;\nloop invariant i111;\nloop invariant i112;\nloop invariant i113;\nloop invariant i114;\nloop invariant i115;\nloop invariant i116;\nloop invariant i117;\nloop invariant i118;\nloop invariant i119;\nloop invariant i120;\nloop invariant i121;\nloop invariant i122;\nloop invariant i123;\nloop invariant i124;\nloop invariant i125;\nloop invariant i126;\nloop invariant i127;\nloop invariant i128;\nloop invariant i129;\nloop invariant i130;\nloop invariant i131;\nloop invariant i132;\nloop invariant i133;\nloop invariant i134;\nloop invariant i135;\nloop invariant i136;\nloop invariant i137;\nloop invariant i138;\nloop invariant i139;\nloop invariant i140;\nloop invariant i141;\nloop invariant i142;\nloop invariant i143;\nloop invariant i144;\nloop invariant i145;\nloop invariant i146;\nloop invariant i147;\nloop invariant i148;\nloop invariant i149;\nloop invariant i150;\nloop invariant i151;\nloop invariant i152;\nloop invariant i153;\nloop invariant i154;\nloop invariant i155;\nloop invariant i156;\nloop invariant i157;\nloop invariant i158;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#define a (1)\n#define SIZE 8\nint main() { \n  int i, sn=0;\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant sn == a * i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#define a (1)\n#define SIZE 8\nint main() { \n  int i, sn=0;\n  /*@\n\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant sn == (i-1)*a;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#define a (1)\n#define SIZE 8\nint main() { \n  int i, sn=0;\n  /*@\n\nloop invariant i2: sn == (i-1)*a;\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant sn >= 0;\nloop invariant sn <= SIZE*a;\nloop invariant sn == (i - 1)*a;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#define a (1)\n#define SIZE 8\nint main() { \n  int i, sn=0;\n  /*@\n\nloop invariant i2: sn >= 0;\nloop invariant i3: sn <= SIZE*a;\nloop invariant i4: sn == (i - 1)*a;\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 158,
                "annotations": "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant i3;\nloop invariant i4;\nloop invariant i5;\nloop invariant i6;\nloop invariant i7;\nloop invariant i8;\nloop invariant i9;\nloop invariant i10;\nloop invariant i11;\nloop invariant i12;\nloop invariant i13;\nloop invariant i14;\nloop invariant i15;\nloop invariant i16;\nloop invariant i17;\nloop invariant i18;\nloop invariant i19;\nloop invariant i20;\nloop invariant i21;\nloop invariant i22;\nloop invariant i23;\nloop invariant i24;\nloop invariant i25;\nloop invariant i26;\nloop invariant i27;\nloop invariant i28;\nloop invariant i29;\nloop invariant i30;\nloop invariant i31;\nloop invariant i32;\nloop invariant i33;\nloop invariant i34;\nloop invariant i35;\nloop invariant i36;\nloop invariant i37;\nloop invariant i38;\nloop invariant i39;\nloop invariant i40;\nloop invariant i41;\nloop invariant i42;\nloop invariant i43;\nloop invariant i44;\nloop invariant i45;\nloop invariant i46;\nloop invariant i47;\nloop invariant i48;\nloop invariant i49;\nloop invariant i50;\nloop invariant i51;\nloop invariant i52;\nloop invariant i53;\nloop invariant i54;\nloop invariant i55;\nloop invariant i56;\nloop invariant i57;\nloop invariant i58;\nloop invariant i59;\nloop invariant i60;\nloop invariant i61;\nloop invariant i62;\nloop invariant i63;\nloop invariant i64;\nloop invariant i65;\nloop invariant i66;\nloop invariant i67;\nloop invariant i68;\nloop invariant i69;\nloop invariant i70;\nloop invariant i71;\nloop invariant i72;\nloop invariant i73;\nloop invariant i74;\nloop invariant i75;\nloop invariant i76;\nloop invariant i77;\nloop invariant i78;\nloop invariant i79;\nloop invariant i80;\nloop invariant i81;\nloop invariant i82;\nloop invariant i83;\nloop invariant i84;\nloop invariant i85;\nloop invariant i86;\nloop invariant i87;\nloop invariant i88;\nloop invariant i89;\nloop invariant i90;\nloop invariant i91;\nloop invariant i92;\nloop invariant i93;\nloop invariant i94;\nloop invariant i95;\nloop invariant i96;\nloop invariant i97;\nloop invariant i98;\nloop invariant i99;\nloop invariant i100;\nloop invariant i101;\nloop invariant i102;\nloop invariant i103;\nloop invariant i104;\nloop invariant i105;\nloop invariant i106;\nloop invariant i107;\nloop invariant i108;\nloop invariant i109;\nloop invariant i110;\nloop invariant i111;\nloop invariant i112;\nloop invariant i113;\nloop invariant i114;\nloop invariant i115;\nloop invariant i116;\nloop invariant i117;\nloop invariant i118;\nloop invariant i119;\nloop invariant i120;\nloop invariant i121;\nloop invariant i122;\nloop invariant i123;\nloop invariant i124;\nloop invariant i125;\nloop invariant i126;\nloop invariant i127;\nloop invariant i128;\nloop invariant i129;\nloop invariant i130;\nloop invariant i131;\nloop invariant i132;\nloop invariant i133;\nloop invariant i134;\nloop invariant i135;\nloop invariant i136;\nloop invariant i137;\nloop invariant i138;\nloop invariant i139;\nloop invariant i140;\nloop invariant i141;\nloop invariant i142;\nloop invariant i143;\nloop invariant i144;\nloop invariant i145;\nloop invariant i146;\nloop invariant i147;\nloop invariant i148;\nloop invariant i149;\nloop invariant i150;\nloop invariant i151;\nloop invariant i152;\nloop invariant i153;\nloop invariant i154;\nloop invariant i155;\nloop invariant i156;\nloop invariant i157;\nloop invariant i158;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#define a (1)\n#define SIZE 8\nint main() { \n  int i, sn=0;\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant (i <= SIZE ==> sn >= 0);\nloop invariant (i <= SIZE ==> sn <= SIZE*a);\nloop invariant (i == SIZE + 1 ==> sn == SIZE*a);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#define a (1)\n#define SIZE 8\nint main() { \n  int i, sn=0;\n  /*@\nloop invariant i1: (i <= SIZE ==> sn >= 0);\n\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant 1 <= a <= SIZE;\nloop invariant 0 <= sn <= SIZE * a;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#define a (1)\n#define SIZE 8\nint main() { \n  int i, sn=0;\n  /*@\n\nloop invariant i2: 1 <= a <= SIZE;\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= SIZE + 1;\nloop invariant sn = a * i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#define a (1)\n#define SIZE 8\nint main() { \n  int i, sn=0;\n  /*@\nloop invariant i1: 1 <= i <= SIZE + 1;\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= SIZE;\nloop invariant 0 <= sn <= SIZE*a;\nloop invariant sn == (a * i) ==> sn == SIZE*a;\nloop invariant sn == 0 ==> sn == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#define a (1)\n#define SIZE 8\nint main() { \n  int i, sn=0;\n  /*@\n\n\n\nloop invariant i4: sn == 0 ==> sn == 0;\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 30: Assignment operators not allowed in annotations.",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#define a (1)\n#define SIZE 8\nint main() { \n  int i, sn=0;\n  /*@\nloop invariant i1: 1 <= i <= SIZE;\nloop invariant i2: sn >= 0;\nloop invariant i3: sn == (i - 1) * a;\nloop invariant i4: a == 1;\nloop invariant i5: SIZE == 8;\nloop invariant i6: a == 1 ==> sn == (i - 1) * a;\nloop invariant i7: sn == 0 ==> sn == (i - 1) * a;\nloop invariant i8: sn == SIZE * a ==> sn == (i - 1) * a;\nloop invariant i9: 0 <= sn <= SIZE*a;\nloop invariant i10: sn == i*a;\nloop invariant i11: i >= 1 && i <= SIZE;\nloop invariant i12: sn == SIZE*a || sn == 0;\nloop invariant i13: sn == i*a || sn == 0;\nloop invariant i14: 0 <= sn <= SIZE * a;\nloop invariant i15: i >= 1;\nloop invariant i16: i <= SIZE + 1;\nloop invariant i17: sn == i * a - a;\nloop invariant i18: 1 <= i <= SIZE + 1;\nloop invariant i19: sn = a * i;\nloop invariant i20: 0 <= i <= SIZE;\nloop invariant i21: sn == a * (i - 1);\nloop invariant i22: a * (i - 1) == sn;\nloop invariant i23: i == 1 || i == 2 || ... || i == SIZE + 1;\nloop invariant i24: i <= SIZE;\nloop invariant i25: sn <= SIZE * a;\nloop invariant i26: i1;\nloop invariant i27: i2;\nloop invariant i28: i3;\nloop invariant i29: i4;\nloop invariant i30: i5;\nloop invariant i31: i6;\nloop invariant i32: i7;\nloop invariant i33: i8;\nloop invariant i34: i9;\nloop invariant i35: i10;\nloop invariant i36: i11;\nloop invariant i37: i12;\nloop invariant i38: i13;\nloop invariant i39: i14;\nloop invariant i40: i15;\nloop invariant i41: i16;\nloop invariant i42: i17;\nloop invariant i43: i18;\nloop invariant i44: i19;\nloop invariant i45: i20;\nloop invariant i46: i21;\nloop invariant i47: i22;\nloop invariant i48: i23;\nloop invariant i49: i24;\nloop invariant i50: i25;\nloop invariant i51: i26;\nloop invariant i52: i27;\nloop invariant i53: i28;\nloop invariant i54: i29;\nloop invariant i55: i30;\nloop invariant i56: i31;\nloop invariant i57: i32;\nloop invariant i58: i33;\nloop invariant i59: i34;\nloop invariant i60: i35;\nloop invariant i61: i36;\nloop invariant i62: i37;\nloop invariant i63: i38;\nloop invariant i64: i39;\nloop invariant i65: i40;\nloop invariant i66: i41;\nloop invariant i67: i42;\nloop invariant i68: i43;\nloop invariant i69: i44;\nloop invariant i70: i45;\nloop invariant i71: i46;\nloop invariant i72: i47;\nloop invariant i73: i48;\nloop invariant i74: i49;\nloop invariant i75: i50;\nloop invariant i76: i51;\nloop invariant i77: i52;\nloop invariant i78: i53;\nloop invariant i79: i54;\nloop invariant i80: i55;\nloop invariant i81: i56;\nloop invariant i82: i57;\nloop invariant i83: i58;\nloop invariant i84: i59;\nloop invariant i85: i60;\nloop invariant i86: i61;\nloop invariant i87: i62;\nloop invariant i88: i63;\nloop invariant i89: i64;\nloop invariant i90: i65;\nloop invariant i91: i66;\nloop invariant i92: i67;\nloop invariant i93: i68;\nloop invariant i94: i69;\nloop invariant i95: i70;\nloop invariant i96: i71;\nloop invariant i97: i72;\nloop invariant i98: i73;\nloop invariant i99: i74;\nloop invariant i100: i75;\nloop invariant i101: i76;\nloop invariant i102: i77;\nloop invariant i103: i78;\nloop invariant i104: i79;\nloop invariant i105: i80;\nloop invariant i106: i81;\nloop invariant i107: i82;\nloop invariant i108: i83;\nloop invariant i109: i84;\nloop invariant i110: i85;\nloop invariant i111: i86;\nloop invariant i112: i87;\nloop invariant i113: i88;\nloop invariant i114: i89;\nloop invariant i115: i90;\nloop invariant i116: i91;\nloop invariant i117: i92;\nloop invariant i118: i93;\nloop invariant i119: i94;\nloop invariant i120: i95;\nloop invariant i121: i96;\nloop invariant i122: i97;\nloop invariant i123: i98;\nloop invariant i124: i99;\nloop invariant i125: i100;\nloop invariant i126: i101;\nloop invariant i127: i102;\nloop invariant i128: i103;\nloop invariant i129: i104;\nloop invariant i130: i105;\nloop invariant i131: i106;\nloop invariant i132: i107;\nloop invariant i133: i108;\nloop invariant i134: i109;\nloop invariant i135: i110;\nloop invariant i136: i111;\nloop invariant i137: i112;\nloop invariant i138: i113;\nloop invariant i139: i114;\nloop invariant i140: i115;\nloop invariant i141: i116;\nloop invariant i142: i117;\nloop invariant i143: i118;\nloop invariant i144: i119;\nloop invariant i145: i120;\nloop invariant i146: i121;\nloop invariant i147: i122;\nloop invariant i148: i123;\nloop invariant i149: i124;\nloop invariant i150: i125;\nloop invariant i151: i126;\nloop invariant i152: i127;\nloop invariant i153: i128;\nloop invariant i154: i129;\nloop invariant i155: i130;\nloop invariant i156: i131;\nloop invariant i157: i132;\nloop invariant i158: i133;\nloop invariant i159: i134;\nloop invariant i160: i135;\nloop invariant i161: i136;\nloop invariant i162: i137;\nloop invariant i163: i138;\nloop invariant i164: i139;\nloop invariant i165: i140;\nloop invariant i166: i141;\nloop invariant i167: i142;\nloop invariant i168: i143;\nloop invariant i169: i144;\nloop invariant i170: i145;\nloop invariant i171: i146;\nloop invariant i172: i147;\nloop invariant i173: i148;\nloop invariant i174: i149;\nloop invariant i175: i150;\nloop invariant i176: i151;\nloop invariant i177: i152;\nloop invariant i178: i153;\nloop invariant i179: i154;\nloop invariant i180: i155;\nloop invariant i181: i156;\nloop invariant i182: i157;\nloop invariant i183: i158;\nloop invariant i184: sn == a * i;\nloop invariant i185: sn == (i-1)*a;\nloop invariant i186: sn <= SIZE*a;\nloop invariant i187: sn == (i - 1)*a;\nloop invariant i188: (i <= SIZE ==> sn >= 0);\nloop invariant i189: (i <= SIZE ==> sn <= SIZE*a);\nloop invariant i190: (i == SIZE + 1 ==> sn == SIZE*a);\nloop invariant i191: 1 <= a <= SIZE;\nloop invariant i192: sn == (a * i) ==> sn == SIZE*a;\nloop invariant i193: sn == 0 ==> sn == 0;\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
        "combined_annotation_num_solver_calls": 169,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#define a (1)\n#define SIZE 8\nint main() { \n  int i, sn=0;\n  /*@\n\nloop invariant i2: sn >= 0;\nloop invariant i3: sn == (i - 1) * a;\nloop invariant i4: a == 1;\nloop invariant i5: SIZE == 8;\nloop invariant i6: a == 1 ==> sn == (i - 1) * a;\nloop invariant i7: sn == 0 ==> sn == (i - 1) * a;\nloop invariant i8: sn == SIZE * a ==> sn == (i - 1) * a;\nloop invariant i9: 0 <= sn <= SIZE*a;\n\n\n\n\nloop invariant i14: 0 <= sn <= SIZE * a;\nloop invariant i15: i >= 1;\nloop invariant i16: i <= SIZE + 1;\nloop invariant i17: sn == i * a - a;\nloop invariant i18: 1 <= i <= SIZE + 1;\n\n\nloop invariant i21: sn == a * (i - 1);\nloop invariant i22: a * (i - 1) == sn;\n\n\nloop invariant i25: sn <= SIZE * a;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i185: sn == (i-1)*a;\nloop invariant i186: sn <= SIZE*a;\nloop invariant i187: sn == (i - 1)*a;\nloop invariant i188: (i <= SIZE ==> sn >= 0);\nloop invariant i189: (i <= SIZE ==> sn <= SIZE*a);\nloop invariant i190: (i == SIZE + 1 ==> sn == SIZE*a);\nloop invariant i191: 1 <= a <= SIZE;\nloop invariant i192: sn == (a * i) ==> sn == SIZE*a;\nloop invariant i193: sn == 0 ==> sn == 0;\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/split.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04_safe.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c"
        ],
        "skipped": [],
        "total": 94,
        "success_count": 80,
        "failure_count": 14,
        "success_rate": 0.851063829787234
    }
}