{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/14.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nint main() {\n  int a = 0;\n  int j = unknown1();\n  int m = unknown1();\n  if(m<=0)\n    return 0;\n  for(j = 1; j <= m ; j++){\n    if(unknown1()) \n       a++;\n    else\n       a--; \n  }\n  {;\n//@ assert(a>=-m && a<=m);\n}\n\n}",
        "success": false,
        "annotation_blocks": [
            "```\n/*@\nloop invariant a >= -m ;\nloop invariant a <= m ;\nloop invariant j >= 1 ;\nloop invariant j <= m ;\nloop invariant m > 0 ;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= j <= m;\nloop invariant -m <= a <= m;\nloop invariant a >= -j && a <= j;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= j <= m;loop invariant 0 <= a <= m;loop invariant a >= -m;loop invariant a <= m;loop invariant a == (a + (unknown1() ? 1 : -1));\n*/\n```",
            "```\n/*@\nloop invariant 0 <= a <= m;\nloop invariant j >= 1;\nloop invariant j <= m;\nloop invariant j <= m ==> a >= -m;\nloop invariant j <= m ==> a <= m;\nloop invariant j <= m ==> a >= -m ==> a + j <= m;\nloop invariant j <= m ==> a <= m ==> a + j >= -m;\nloop invariant j <= m ==> a >= -m ==> a + j >= -m ==> a + j <= m;\nloop invariant j <= m ==> a <= m ==> a + j <= m ==> a + j >= -m;\nloop invariant j <= m ==> a >= -m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m;\nloop invariant j <= m ==> a <= m ==> a + j <= m ==> a + j >= -m ==> a + j <= m;\nloop invariant j <= m ==> a >= -m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m ==> a + j <= m;\nloop invariant j <= m ==> a <= m ==> a + j <= m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m;\nloop invariant j <= m ==> a >= -m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m;\nloop invariant j <= m ==> a <= m ==> a + j <= m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m ==> a + j <= m;\nloop invariant j <= m ==> a >= -m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m ==> a + j <= m;\nloop invariant j <= m ==> a <= m ==> a + j <= m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m;\nloop invariant j <= m ==> a >= -m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m;\nloop invariant j <= m ==> a <= m ==> a + j <= m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m ==> a + j <= m;\nloop invariant j <= m ==> a >= -m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m ==> a + j <= m;\nloop invariant j <= m ==> a <= m ==> a + j <= m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m;\nloop invariant j <= m ==> a >= -m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m;\nloop invariant j <= m ==> a <= m ==> a + j <= m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m ==> a + j <= m;\nloop invariant j <= m ==> a >= -m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m ==> a + j <= m;\nloop invariant j <= m ==> a <= m ==> a + j <= m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= j <= m;\nloop invariant -m <= a <= m;\nloop invariant 0 <= a + j <= m;\nloop invariant -m <= a - j <= m;\nloop invariant a + j == -m ==> j == m;\nloop invariant a - j == m ==> j == 0;\nloop invariant a + j == m ==> j == m;\nloop invariant a - j == -m ==> j == m;\nloop invariant a + j == -m ==> j == m;\nloop invariant a - j == m ==> j == 0;\nloop invariant a + j == m ==> j == m;\nloop invariant a - j == -m ==> j == m;\nloop invariant a + j == -m ==> j == m;\nloop invariant a - j == m ==> j == 0;\nloop invariant a + j == m ==> j == m;\nloop invariant a - j == -m ==> j == m;\nloop invariant a + j == -m ==> j == m;\nloop invariant a - j == m ==> j == 0;\nloop invariant a + j == m ==> j == m;\nloop invariant a - j == -m ==> j == m;\nloop invariant a + j == -m ==> j == m;\nloop invariant a - j == m ==> j == 0;\nloop invariant a + j == m ==> j == m;\nloop invariant a - j == -m ==> j == m;\nloop invariant a + j == -m ==> j == m;\nloop invariant a - j == m ==> j == 0;\nloop invariant a + j == m ==> j == m;\nloop invariant a - j == -m ==> j == m;\nloop invariant a + j == -m ==> j == m;\nloop invariant a - j == m ==> j == 0;\nloop invariant a + j == m ==> j == m;\nloop invariant a - j == -m ==> j == m;\nloop invariant a + j == -m ==> j == m;\nloop invariant a - j == m ==> j == 0;\nloop invariant a + j == m ==> j == m;\nloop invariant a - j == -m ==> j == m;\nloop invariant a + j == -m ==> j == m;\nloop invariant a - j == m ==> j == 0;\nloop invariant a + j == m ==> j == m;\nloop invariant a - j == -m ==> j == m;\nloop invariant a + j == -m ==> j == m;\nloop invariant a - j == m ==> j == 0;\nloop invariant a + j == m ==> j == m;\nloop invariant a - j == -m ==> j == m;\nloop invariant a + j == -m ==> j == m;\nloop invariant a - j == m ==> j == 0;\nloop invariant a + j == m ==> j == m;\nloop invariant a - j == -m ==> j == m;\nloop invariant a + j == -m ==> j == m;\nloop invariant a - j == m ==> j == 0;\nloop invariant a + j == m ==> j == m;\nloop invariant a - j == -m ==> j == m;\nloop invariant a + j == -m ==> j == m;\nloop invariant a - j == m ==> j == 0;\nloop invariant a + j == m ==> j == m;\nloop invariant a - j == -m ==> j == m;\nloop invariant a + j == -m ==> j == m;\nloop invariant a - j == m ==> j == 0;\nloop invariant a + j == m ==> j == m;\nloop invariant a - j == -m ==> j == m;\nloop invariant a + j == -m ==> j == m;\nloop invariant a - j == m ==> j == 0;\nloop invariant a + j == m ==> j == m;\nloop invariant a - j == -m ==> j == m;\nloop invariant a + j == -m ==> j == m;\nloop invariant a - j == m ==> j == 0;\nloop invariant a + j == m ==> j == m;\nloop invariant a - j == -m ==> j == m;\nloop invariant a + j == -m ==> j == m;\nloop invariant a - j == m ==> j == 0;\nloop invariant a + j == m ==> j == m;\nloop invariant a - j == -m ==> j == m;\nloop invariant a + j == -m ==> j == m;\nloop invariant a - j == m ==> j == 0;\nloop invariant a + j == m ==> j == m;\nloop invariant a - j == -m ==> j == m;\nloop invariant a + j == -m ==> j == m;\nloop invariant a - j == m ==> j == 0;\nloop invariant a + j == m ==> j == m;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= j <= m;\nloop invariant -m <= a <= m;\nloop invariant a >= -j;\nloop invariant a <= j;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= j <= m;\nloop invariant a >= -m;\nloop invariant a <= m;\nloop invariant a >= a - m;\nloop invariant a >= a + m;\nloop invariant a <= a - m;\nloop invariant a <= a + m;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= j <= m;\nloop invariant j == m ==> a == 0;\nloop invariant j < m ==> a >= -m;\nloop invariant j < m ==> a <= m;\nloop invariant j < m ==> a == a + unknown1() - unknown1();\nloop invariant j < m ==> a == a + unknown1();\nloop invariant j < m ==> a == a + unknown1();\nloop invariant j < m ==> a == a + unknown1();\nloop invariant j < m ==> a == a + unknown1();\nloop invariant j < m ==> a == a + unknown1();\nloop invariant j < m ==> a == a + unknown1();\nloop invariant j < m ==> a == a + unknown1();\nloop invariant j < m ==> a == a + unknown1();\nloop invariant j < m ==> a == a + unknown1();\nloop invariant j < m ==> a == a + unknown1();\nloop invariant j < m ==> a == a + unknown1();\nloop invariant j < m ==> a == a + unknown1();\nloop invariant j < m ==> a == a + unknown1();\nloop invariant j < m ==> a == a + unknown1();\nloop invariant j < m ==> a == a + unknown1();\nloop invariant j < m ==> a == a + unknown1();\nloop invariant j < m ==> a == a + unknown1();\nloop invariant j < m ==> a == a + unknown1();\nloop invariant j < m ==> a == a + unknown1();\nloop invariant j < m ==> a == a + unknown1();\nloop invariant j < m ==> a == a + unknown1();\nloop invariant j < m ==> a == a + unknown1();\nloop invariant j < m ==> a == a + unknown1();\nloop invariant j < m ==> a == a + unknown1();\nloop invariant j < m ==> a == a + unknown1();\nloop invariant j < m ==> a == a + unknown1();\nloop invariant j < m ==> a == a + unknown1();\nloop invariant j < m ==> a == a + unknown1();\nloop invariant j < m ==> a == a + unknown1();\nloop invariant j < m ==> a == a + unknown1();\nloop invariant j < m ==> a == a + unknown1();\nloop invariant j < m ==> a == a + unknown1();\nloop invariant j < m ==> a == a + unknown1();\nloop invariant j < m ==> a == a + unknown1();\nloop invariant j < m ==> a == a + unknown1();\nloop invariant j < m ==> a == a + unknown1();\nloop invariant j < m ==> a == a + unknown1();\nloop invariant j < m ==> a == a + unknown1();\nloop invariant j < m ==> a == a + unknown1();\nloop invariant j < m ==> a == a + unknown1();\nloop invariant j < m ==> a == a + unknown1();\nloop invariant j < m ==> a == a + unknown1();\nloop invariant j < m ==> a == a + unknown1();\nloop invariant j < m ==> a == a + unknown1();\nloop invariant j < m ==> a == a + unknown1();\nloop invariant j < m ==> a == a + unknown1();\nloop invariant j < m ==> a == a + unknown1();\nloop invariant j < m ==> a == a + unknown1();\nloop invariant j < m ==> a == a + unknown1();\nloop invariant j < m ==> a == a + unknown1();\nloop invariant j < m ==> a == a + unknown1();\nloop invariant j < m ==> a == a + unknown1();\nloop invariant j < m ==> a == a + unknown1();\nloop invariant j < m ==> a == a + unknown1();\nloop invariant j < m ==> a == a + unknown1();\nloop invariant j < m ==> a == a + unknown1();\nloop invariant j < m ==> a == a + unknown1();\nloop invariant j < m ==> a == a + unknown1();\nloop invariant j < m ==> a == a + unknown1();\nloop invariant j < m ==> a == a + unknown1();\nloop invariant j < m ==> a == a + unknown1();\nloop invariant j < m ==> a == a + unknown1();\nloop invariant j < m ==> a == a + unknown1();\nloop invariant j < m ==> a == a + unknown1();\nloop invariant j < m ==> a == a + unknown1();\nloop invariant j < m ==> a == a + unknown1();\nloop invariant j < m ==> a == a + unknown1();\nloop invariant j < m ==> a == a + unknown1();\nloop invariant j < m ==> a == a + unknown1();\nloop invariant j < m ==> a == a + unknown1();\nloop invariant j < m ==> a == a + unknown1();\nloop invariant j < m ==> a == a + unknown1();\n*/\n```",
            "```\n/*@\nloop invariant 0 <= a <= m;\nloop invariant a >= -m;\nloop invariant for all j, 1 <= j <= m;\nloop invariant for all k, 0 <= k < j;\nloop invariant for all l, j < l <= m;\nloop invariant a <= l;\nloop invariant a >= k;\nloop invariant j == l;\nloop invariant j == k;\nloop invariant a == a;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= j <= m;\nloop invariant -m <= a <= m;\nloop invariant (j <= m ==> a >= -m);\nloop invariant (j >= 1 ==> a <= m);\nloop invariant (j <= m ==> a <= j);\n*/\n```",
            "```\n/*@\nloop invariant 1 <= j <= m;\nloop invariant 0 <= a <= m;\nloop invariant if (j > 1) then (a >= -m + j - 1) else (a >= 0);\nloop invariant if (j < m) then (a <= m - j + 1) else (a <= m);\nloop invariant if (a >= 0) then (j >= 1) else (j <= m);\nloop invariant if (a <= m) then (j <= m) else (j >= 1);\nloop invariant if (a >= -m) then (j >= 1) else (j <= m);\nloop invariant if (a <= m) then (j <= m) else (j >= 1);\nloop invariant if (a >= 0) then (j >= 1) else (j <= m);\nloop invariant if (a <= m) then (j <= m) else (j >= 1);\nloop invariant if (a >= -m) then (j >= 1) else (j <= m);\nloop invariant if (a <= m) then (j <= m) else (j >= 1);\nloop invariant if (a >= 0) then (j >= 1) else (j <= m);\nloop invariant if (a <= m) then (j <= m) else (j >= 1);\nloop invariant if (a >= -m) then (j >= 1) else (j <= m);\nloop invariant if (a <= m) then (j <= m) else (j >= 1);\nloop invariant if (a >= 0) then (j >= 1) else (j <= m);\nloop invariant if (a <= m) then (j <= m) else (j >= 1);\nloop invariant if (a >= -m) then (j >= 1) else (j <= m);\nloop invariant if (a <= m) then (j <= m) else (j >= 1);\nloop invariant if (a >= 0) then (j >= 1) else (j <= m);\nloop invariant if (a <= m) then (j <= m) else (j >= 1);\nloop invariant if (a >= -m) then (j >= 1) else (j <= m);\nloop invariant if (a <= m) then (j <= m) else (j >= 1);\nloop invariant if (a >= 0) then (j >= 1) else (j <= m);\nloop invariant if (a <= m) then (j <= m) else (j >= 1);\nloop invariant if (a >= -m) then (j >= 1) else (j <= m);\nloop invariant if (a <= m) then (j <= m) else (j >= 1);\nloop invariant if (a >= 0) then (j >= 1) else (j <= m);\nloop invariant if (a <= m) then (j <= m) else (j >= 1);\nloop invariant if (a >= -m) then (j >= 1) else (j <= m);\nloop invariant if (a <= m) then (j <= m) else (j >= 1);\nloop invariant if (a >= 0) then (j >= 1) else (j <= m);\nloop invariant if (a <= m) then (j <= m) else (j >= 1);\nloop invariant if (a >= -m) then (j >= 1) else (j <= m);\nloop invariant if (a <= m) then (j <= m) else (j >= 1);\nloop invariant if (a >= 0) then (j >= 1) else (j <= m);\nloop invariant if (a <= m) then (j <= m) else (j >= 1);\nloop invariant if (a >= -m) then (j >= 1) else (j <= m);\nloop invariant if (a <= m) then (j <= m) else (j >= 1);\nloop invariant if (a >= 0) then (j >= 1) else (j <= m);\nloop invariant if (a <= m) then (j <= m) else (j >= 1);\nloop invariant if (a >= -m) then (j >= 1) else (j <= m);\nloop invariant if (a <= m) then (j <= m) else (j >= 1);\nloop invariant if (a >= 0) then (j >= 1) else (j <= m);\nloop invariant if (a <= m) then (j <= m) else (j >= 1);\nloop invariant if (a >= -m) then (j >= 1) else (j <= m);\n*/\n```",
            "```\n/*@\nloop invariant 1 <= j <= m;\nloop invariant -m <= a <= m;\nloop invariant (j == 1 ==> a + m <= m);\nloop invariant (j == 1 ==> a - m >= -m);\nloop invariant (j == 2 ==> a + m - 1 <= m);\nloop invariant (j == 2 ==> a - m + 1 >= -m);\nloop invariant (j == 3 ==> a + m - 2 <= m);\nloop invariant (j == 3 ==> a - m + 2 >= -m);\nloop invariant (j == m ==> a + 1 <= m);\nloop invariant (j == m ==> a - m >= -m);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= j <= m;\nloop invariant -m <= a <= m;\nloop invariant a >= -m;\nloop invariant a <= m;\nloop invariant a == a + unknown1() * (unknown1() - 1) / 2 + unknown1() * (unknown1() - 1) / 2;\nloop invariant 0 <= j <= m;\nloop invariant -m <= a <= m;\nloop invariant a >= -m;\nloop invariant a <= m;\nloop invariant a == a + (unknown1() - 1) * (unknown1() - 1) / 2 + (unknown1() - 1) * (unknown1() - 1) / 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= j <= m;\nloop invariant -m <= a <= m;\nloop invariant a <= j;\nloop invariant a >= -j;\nloop invariant a <= m;\nloop invariant a >= -m;\nloop invariant a == j - m;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= j <= m;\nloop invariant a >= -m;\nloop invariant a <= m;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant a >= -m ;\nloop invariant a <= m ;\nloop invariant j >= 1 ;\nloop invariant j <= m ;\nloop invariant m > 0 ;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nint main() {\n  int a = 0;\n  int j = unknown1();\n  int m = unknown1();\n  if(m<=0)\n    return 0;\n  /*@\nloop invariant i1: a >= -m ;\nloop invariant i2: a <= m ;\nloop invariant i3: j >= 1 ;\nloop invariant i4: j <= m ;\nloop invariant i5: m > 0 ;\n*/\nfor(j = 1; j <= m ; j++){\n    if(unknown1()) \n       a++;\n    else\n       a--; \n  }\n  {;\n//@ assert(a>=-m && a<=m);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= j <= m;\nloop invariant -m <= a <= m;\nloop invariant a >= -j && a <= j;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nint main() {\n  int a = 0;\n  int j = unknown1();\n  int m = unknown1();\n  if(m<=0)\n    return 0;\n  /*@\n\n\nloop invariant i3: a >= -j && a <= j;\n*/\nfor(j = 1; j <= m ; j++){\n    if(unknown1()) \n       a++;\n    else\n       a--; \n  }\n  {;\n//@ assert(a>=-m && a<=m);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= j <= m;loop invariant 0 <= a <= m;loop invariant a >= -m;loop invariant a <= m;loop invariant a == (a + (unknown1() ? 1 : -1));\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nint main() {\n  int a = 0;\n  int j = unknown1();\n  int m = unknown1();\n  if(m<=0)\n    return 0;\n  /*@\n\n*/\nfor(j = 1; j <= m ; j++){\n    if(unknown1()) \n       a++;\n    else\n       a--; \n  }\n  {;\n//@ assert(a>=-m && a<=m);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= a <= m;\nloop invariant j >= 1;\nloop invariant j <= m;\nloop invariant j <= m ==> a >= -m;\nloop invariant j <= m ==> a <= m;\nloop invariant j <= m ==> a >= -m ==> a + j <= m;\nloop invariant j <= m ==> a <= m ==> a + j >= -m;\nloop invariant j <= m ==> a >= -m ==> a + j >= -m ==> a + j <= m;\nloop invariant j <= m ==> a <= m ==> a + j <= m ==> a + j >= -m;\nloop invariant j <= m ==> a >= -m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m;\nloop invariant j <= m ==> a <= m ==> a + j <= m ==> a + j >= -m ==> a + j <= m;\nloop invariant j <= m ==> a >= -m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m ==> a + j <= m;\nloop invariant j <= m ==> a <= m ==> a + j <= m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m;\nloop invariant j <= m ==> a >= -m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m;\nloop invariant j <= m ==> a <= m ==> a + j <= m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m ==> a + j <= m;\nloop invariant j <= m ==> a >= -m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m ==> a + j <= m;\nloop invariant j <= m ==> a <= m ==> a + j <= m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m;\nloop invariant j <= m ==> a >= -m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m;\nloop invariant j <= m ==> a <= m ==> a + j <= m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m ==> a + j <= m;\nloop invariant j <= m ==> a >= -m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m ==> a + j <= m;\nloop invariant j <= m ==> a <= m ==> a + j <= m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m;\nloop invariant j <= m ==> a >= -m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m;\nloop invariant j <= m ==> a <= m ==> a + j <= m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m ==> a + j <= m;\nloop invariant j <= m ==> a >= -m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m ==> a + j <= m;\nloop invariant j <= m ==> a <= m ==> a + j <= m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nint main() {\n  int a = 0;\n  int j = unknown1();\n  int m = unknown1();\n  if(m<=0)\n    return 0;\n  /*@\n\nloop invariant i2: j >= 1;\n\n\n\n\nloop invariant i7: j <= m ==> a <= m ==> a + j >= -m;\n\nloop invariant i9: j <= m ==> a <= m ==> a + j <= m ==> a + j >= -m;\nloop invariant i10: j <= m ==> a >= -m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m;\nloop invariant i11: j <= m ==> a <= m ==> a + j <= m ==> a + j >= -m ==> a + j <= m;\nloop invariant i12: j <= m ==> a >= -m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m ==> a + j <= m;\nloop invariant i13: j <= m ==> a <= m ==> a + j <= m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m;\nloop invariant i14: j <= m ==> a >= -m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m;\nloop invariant i15: j <= m ==> a <= m ==> a + j <= m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m ==> a + j <= m;\nloop invariant i16: j <= m ==> a >= -m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m ==> a + j <= m;\nloop invariant i17: j <= m ==> a <= m ==> a + j <= m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m;\nloop invariant i18: j <= m ==> a >= -m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m;\nloop invariant i19: j <= m ==> a <= m ==> a + j <= m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m ==> a + j <= m;\nloop invariant i20: j <= m ==> a >= -m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m ==> a + j <= m;\nloop invariant i21: j <= m ==> a <= m ==> a + j <= m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m;\nloop invariant i22: j <= m ==> a >= -m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m;\nloop invariant i23: j <= m ==> a <= m ==> a + j <= m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m ==> a + j <= m;\nloop invariant i24: j <= m ==> a >= -m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m ==> a + j <= m;\nloop invariant i25: j <= m ==> a <= m ==> a + j <= m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m;\n*/\nfor(j = 1; j <= m ; j++){\n    if(unknown1()) \n       a++;\n    else\n       a--; \n  }\n  {;\n//@ assert(a>=-m && a<=m);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= j <= m;\nloop invariant -m <= a <= m;\nloop invariant 0 <= a + j <= m;\nloop invariant -m <= a - j <= m;\nloop invariant a + j == -m ==> j == m;\nloop invariant a - j == m ==> j == 0;\nloop invariant a + j == m ==> j == m;\nloop invariant a - j == -m ==> j == m;\nloop invariant a + j == -m ==> j == m;\nloop invariant a - j == m ==> j == 0;\nloop invariant a + j == m ==> j == m;\nloop invariant a - j == -m ==> j == m;\nloop invariant a + j == -m ==> j == m;\nloop invariant a - j == m ==> j == 0;\nloop invariant a + j == m ==> j == m;\nloop invariant a - j == -m ==> j == m;\nloop invariant a + j == -m ==> j == m;\nloop invariant a - j == m ==> j == 0;\nloop invariant a + j == m ==> j == m;\nloop invariant a - j == -m ==> j == m;\nloop invariant a + j == -m ==> j == m;\nloop invariant a - j == m ==> j == 0;\nloop invariant a + j == m ==> j == m;\nloop invariant a - j == -m ==> j == m;\nloop invariant a + j == -m ==> j == m;\nloop invariant a - j == m ==> j == 0;\nloop invariant a + j == m ==> j == m;\nloop invariant a - j == -m ==> j == m;\nloop invariant a + j == -m ==> j == m;\nloop invariant a - j == m ==> j == 0;\nloop invariant a + j == m ==> j == m;\nloop invariant a - j == -m ==> j == m;\nloop invariant a + j == -m ==> j == m;\nloop invariant a - j == m ==> j == 0;\nloop invariant a + j == m ==> j == m;\nloop invariant a - j == -m ==> j == m;\nloop invariant a + j == -m ==> j == m;\nloop invariant a - j == m ==> j == 0;\nloop invariant a + j == m ==> j == m;\nloop invariant a - j == -m ==> j == m;\nloop invariant a + j == -m ==> j == m;\nloop invariant a - j == m ==> j == 0;\nloop invariant a + j == m ==> j == m;\nloop invariant a - j == -m ==> j == m;\nloop invariant a + j == -m ==> j == m;\nloop invariant a - j == m ==> j == 0;\nloop invariant a + j == m ==> j == m;\nloop invariant a - j == -m ==> j == m;\nloop invariant a + j == -m ==> j == m;\nloop invariant a - j == m ==> j == 0;\nloop invariant a + j == m ==> j == m;\nloop invariant a - j == -m ==> j == m;\nloop invariant a + j == -m ==> j == m;\nloop invariant a - j == m ==> j == 0;\nloop invariant a + j == m ==> j == m;\nloop invariant a - j == -m ==> j == m;\nloop invariant a + j == -m ==> j == m;\nloop invariant a - j == m ==> j == 0;\nloop invariant a + j == m ==> j == m;\nloop invariant a - j == -m ==> j == m;\nloop invariant a + j == -m ==> j == m;\nloop invariant a - j == m ==> j == 0;\nloop invariant a + j == m ==> j == m;\nloop invariant a - j == -m ==> j == m;\nloop invariant a + j == -m ==> j == m;\nloop invariant a - j == m ==> j == 0;\nloop invariant a + j == m ==> j == m;\nloop invariant a - j == -m ==> j == m;\nloop invariant a + j == -m ==> j == m;\nloop invariant a - j == m ==> j == 0;\nloop invariant a + j == m ==> j == m;\nloop invariant a - j == -m ==> j == m;\nloop invariant a + j == -m ==> j == m;\nloop invariant a - j == m ==> j == 0;\nloop invariant a + j == m ==> j == m;\nloop invariant a - j == -m ==> j == m;\nloop invariant a + j == -m ==> j == m;\nloop invariant a - j == m ==> j == 0;\nloop invariant a + j == m ==> j == m;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nint main() {\n  int a = 0;\n  int j = unknown1();\n  int m = unknown1();\n  if(m<=0)\n    return 0;\n  /*@\n\n\n\n\n\n\n\n\n*/\nfor(j = 1; j <= m ; j++){\n    if(unknown1()) \n       a++;\n    else\n       a--; \n  }\n  {;\n//@ assert(a>=-m && a<=m);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= j <= m;\nloop invariant -m <= a <= m;\nloop invariant a >= -j;\nloop invariant a <= j;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nint main() {\n  int a = 0;\n  int j = unknown1();\n  int m = unknown1();\n  if(m<=0)\n    return 0;\n  /*@\n\n\nloop invariant i3: a >= -j;\nloop invariant i4: a <= j;\n*/\nfor(j = 1; j <= m ; j++){\n    if(unknown1()) \n       a++;\n    else\n       a--; \n  }\n  {;\n//@ assert(a>=-m && a<=m);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 1 <= j <= m;\nloop invariant a >= -m;\nloop invariant a <= m;\nloop invariant a >= a - m;\nloop invariant a >= a + m;\nloop invariant a <= a - m;\nloop invariant a <= a + m;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nint main() {\n  int a = 0;\n  int j = unknown1();\n  int m = unknown1();\n  if(m<=0)\n    return 0;\n  /*@\n\n\n\nloop invariant i4: a >= a - m;\n\n\nloop invariant i7: a <= a + m;\n*/\nfor(j = 1; j <= m ; j++){\n    if(unknown1()) \n       a++;\n    else\n       a--; \n  }\n  {;\n//@ assert(a>=-m && a<=m);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= j <= m;\nloop invariant j == m ==> a == 0;\nloop invariant j < m ==> a >= -m;\nloop invariant j < m ==> a <= m;\nloop invariant j < m ==> a == a + unknown1() - unknown1();\nloop invariant j < m ==> a == a + unknown1();\nloop invariant j < m ==> a == a + unknown1();\nloop invariant j < m ==> a == a + unknown1();\nloop invariant j < m ==> a == a + unknown1();\nloop invariant j < m ==> a == a + unknown1();\nloop invariant j < m ==> a == a + unknown1();\nloop invariant j < m ==> a == a + unknown1();\nloop invariant j < m ==> a == a + unknown1();\nloop invariant j < m ==> a == a + unknown1();\nloop invariant j < m ==> a == a + unknown1();\nloop invariant j < m ==> a == a + unknown1();\nloop invariant j < m ==> a == a + unknown1();\nloop invariant j < m ==> a == a + unknown1();\nloop invariant j < m ==> a == a + unknown1();\nloop invariant j < m ==> a == a + unknown1();\nloop invariant j < m ==> a == a + unknown1();\nloop invariant j < m ==> a == a + unknown1();\nloop invariant j < m ==> a == a + unknown1();\nloop invariant j < m ==> a == a + unknown1();\nloop invariant j < m ==> a == a + unknown1();\nloop invariant j < m ==> a == a + unknown1();\nloop invariant j < m ==> a == a + unknown1();\nloop invariant j < m ==> a == a + unknown1();\nloop invariant j < m ==> a == a + unknown1();\nloop invariant j < m ==> a == a + unknown1();\nloop invariant j < m ==> a == a + unknown1();\nloop invariant j < m ==> a == a + unknown1();\nloop invariant j < m ==> a == a + unknown1();\nloop invariant j < m ==> a == a + unknown1();\nloop invariant j < m ==> a == a + unknown1();\nloop invariant j < m ==> a == a + unknown1();\nloop invariant j < m ==> a == a + unknown1();\nloop invariant j < m ==> a == a + unknown1();\nloop invariant j < m ==> a == a + unknown1();\nloop invariant j < m ==> a == a + unknown1();\nloop invariant j < m ==> a == a + unknown1();\nloop invariant j < m ==> a == a + unknown1();\nloop invariant j < m ==> a == a + unknown1();\nloop invariant j < m ==> a == a + unknown1();\nloop invariant j < m ==> a == a + unknown1();\nloop invariant j < m ==> a == a + unknown1();\nloop invariant j < m ==> a == a + unknown1();\nloop invariant j < m ==> a == a + unknown1();\nloop invariant j < m ==> a == a + unknown1();\nloop invariant j < m ==> a == a + unknown1();\nloop invariant j < m ==> a == a + unknown1();\nloop invariant j < m ==> a == a + unknown1();\nloop invariant j < m ==> a == a + unknown1();\nloop invariant j < m ==> a == a + unknown1();\nloop invariant j < m ==> a == a + unknown1();\nloop invariant j < m ==> a == a + unknown1();\nloop invariant j < m ==> a == a + unknown1();\nloop invariant j < m ==> a == a + unknown1();\nloop invariant j < m ==> a == a + unknown1();\nloop invariant j < m ==> a == a + unknown1();\nloop invariant j < m ==> a == a + unknown1();\nloop invariant j < m ==> a == a + unknown1();\nloop invariant j < m ==> a == a + unknown1();\nloop invariant j < m ==> a == a + unknown1();\nloop invariant j < m ==> a == a + unknown1();\nloop invariant j < m ==> a == a + unknown1();\nloop invariant j < m ==> a == a + unknown1();\nloop invariant j < m ==> a == a + unknown1();\nloop invariant j < m ==> a == a + unknown1();\nloop invariant j < m ==> a == a + unknown1();\nloop invariant j < m ==> a == a + unknown1();\nloop invariant j < m ==> a == a + unknown1();\nloop invariant j < m ==> a == a + unknown1();\nloop invariant j < m ==> a == a + unknown1();\nloop invariant j < m ==> a == a + unknown1();\nloop invariant j < m ==> a == a + unknown1();\nloop invariant j < m ==> a == a + unknown1();\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nint main() {\n  int a = 0;\n  int j = unknown1();\n  int m = unknown1();\n  if(m<=0)\n    return 0;\n  /*@\n\n\n\n\n\n\n*/\nfor(j = 1; j <= m ; j++){\n    if(unknown1()) \n       a++;\n    else\n       a--; \n  }\n  {;\n//@ assert(a>=-m && a<=m);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 10,
                "annotations": "```\n/*@\nloop invariant 0 <= a <= m;\nloop invariant a >= -m;\nloop invariant for all j, 1 <= j <= m;\nloop invariant for all k, 0 <= k < j;\nloop invariant for all l, j < l <= m;\nloop invariant a <= l;\nloop invariant a >= k;\nloop invariant j == l;\nloop invariant j == k;\nloop invariant a == a;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nint main() {\n  int a = 0;\n  int j = unknown1();\n  int m = unknown1();\n  if(m<=0)\n    return 0;\n  /*@\n\n\n\n\n\n\n\n\n\nloop invariant i10: a == a;\n*/\nfor(j = 1; j <= m ; j++){\n    if(unknown1()) \n       a++;\n    else\n       a--; \n  }\n  {;\n//@ assert(a>=-m && a<=m);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= j <= m;\nloop invariant -m <= a <= m;\nloop invariant (j <= m ==> a >= -m);\nloop invariant (j >= 1 ==> a <= m);\nloop invariant (j <= m ==> a <= j);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nint main() {\n  int a = 0;\n  int j = unknown1();\n  int m = unknown1();\n  if(m<=0)\n    return 0;\n  /*@\n\n\n\n\nloop invariant i5: (j <= m ==> a <= j);\n*/\nfor(j = 1; j <= m ; j++){\n    if(unknown1()) \n       a++;\n    else\n       a--; \n  }\n  {;\n//@ assert(a>=-m && a<=m);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 1 <= j <= m;\nloop invariant 0 <= a <= m;\nloop invariant if (j > 1) then (a >= -m + j - 1) else (a >= 0);\nloop invariant if (j < m) then (a <= m - j + 1) else (a <= m);\nloop invariant if (a >= 0) then (j >= 1) else (j <= m);\nloop invariant if (a <= m) then (j <= m) else (j >= 1);\nloop invariant if (a >= -m) then (j >= 1) else (j <= m);\nloop invariant if (a <= m) then (j <= m) else (j >= 1);\nloop invariant if (a >= 0) then (j >= 1) else (j <= m);\nloop invariant if (a <= m) then (j <= m) else (j >= 1);\nloop invariant if (a >= -m) then (j >= 1) else (j <= m);\nloop invariant if (a <= m) then (j <= m) else (j >= 1);\nloop invariant if (a >= 0) then (j >= 1) else (j <= m);\nloop invariant if (a <= m) then (j <= m) else (j >= 1);\nloop invariant if (a >= -m) then (j >= 1) else (j <= m);\nloop invariant if (a <= m) then (j <= m) else (j >= 1);\nloop invariant if (a >= 0) then (j >= 1) else (j <= m);\nloop invariant if (a <= m) then (j <= m) else (j >= 1);\nloop invariant if (a >= -m) then (j >= 1) else (j <= m);\nloop invariant if (a <= m) then (j <= m) else (j >= 1);\nloop invariant if (a >= 0) then (j >= 1) else (j <= m);\nloop invariant if (a <= m) then (j <= m) else (j >= 1);\nloop invariant if (a >= -m) then (j >= 1) else (j <= m);\nloop invariant if (a <= m) then (j <= m) else (j >= 1);\nloop invariant if (a >= 0) then (j >= 1) else (j <= m);\nloop invariant if (a <= m) then (j <= m) else (j >= 1);\nloop invariant if (a >= -m) then (j >= 1) else (j <= m);\nloop invariant if (a <= m) then (j <= m) else (j >= 1);\nloop invariant if (a >= 0) then (j >= 1) else (j <= m);\nloop invariant if (a <= m) then (j <= m) else (j >= 1);\nloop invariant if (a >= -m) then (j >= 1) else (j <= m);\nloop invariant if (a <= m) then (j <= m) else (j >= 1);\nloop invariant if (a >= 0) then (j >= 1) else (j <= m);\nloop invariant if (a <= m) then (j <= m) else (j >= 1);\nloop invariant if (a >= -m) then (j >= 1) else (j <= m);\nloop invariant if (a <= m) then (j <= m) else (j >= 1);\nloop invariant if (a >= 0) then (j >= 1) else (j <= m);\nloop invariant if (a <= m) then (j <= m) else (j >= 1);\nloop invariant if (a >= -m) then (j >= 1) else (j <= m);\nloop invariant if (a <= m) then (j <= m) else (j >= 1);\nloop invariant if (a >= 0) then (j >= 1) else (j <= m);\nloop invariant if (a <= m) then (j <= m) else (j >= 1);\nloop invariant if (a >= -m) then (j >= 1) else (j <= m);\nloop invariant if (a <= m) then (j <= m) else (j >= 1);\nloop invariant if (a >= 0) then (j >= 1) else (j <= m);\nloop invariant if (a <= m) then (j <= m) else (j >= 1);\nloop invariant if (a >= -m) then (j >= 1) else (j <= m);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nint main() {\n  int a = 0;\n  int j = unknown1();\n  int m = unknown1();\n  if(m<=0)\n    return 0;\n  /*@\n\n\n\n\n\n\n\n*/\nfor(j = 1; j <= m ; j++){\n    if(unknown1()) \n       a++;\n    else\n       a--; \n  }\n  {;\n//@ assert(a>=-m && a<=m);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 1 <= j <= m;\nloop invariant -m <= a <= m;\nloop invariant (j == 1 ==> a + m <= m);\nloop invariant (j == 1 ==> a - m >= -m);\nloop invariant (j == 2 ==> a + m - 1 <= m);\nloop invariant (j == 2 ==> a - m + 1 >= -m);\nloop invariant (j == 3 ==> a + m - 2 <= m);\nloop invariant (j == 3 ==> a - m + 2 >= -m);\nloop invariant (j == m ==> a + 1 <= m);\nloop invariant (j == m ==> a - m >= -m);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nint main() {\n  int a = 0;\n  int j = unknown1();\n  int m = unknown1();\n  if(m<=0)\n    return 0;\n  /*@\n\n\n\n\n\n\n\n\n\n\n*/\nfor(j = 1; j <= m ; j++){\n    if(unknown1()) \n       a++;\n    else\n       a--; \n  }\n  {;\n//@ assert(a>=-m && a<=m);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= j <= m;\nloop invariant -m <= a <= m;\nloop invariant a >= -m;\nloop invariant a <= m;\nloop invariant a == a + unknown1() * (unknown1() - 1) / 2 + unknown1() * (unknown1() - 1) / 2;\nloop invariant 0 <= j <= m;\nloop invariant -m <= a <= m;\nloop invariant a >= -m;\nloop invariant a <= m;\nloop invariant a == a + (unknown1() - 1) * (unknown1() - 1) / 2 + (unknown1() - 1) * (unknown1() - 1) / 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nint main() {\n  int a = 0;\n  int j = unknown1();\n  int m = unknown1();\n  if(m<=0)\n    return 0;\n  /*@\n\n\n\n\n\n\n*/\nfor(j = 1; j <= m ; j++){\n    if(unknown1()) \n       a++;\n    else\n       a--; \n  }\n  {;\n//@ assert(a>=-m && a<=m);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= j <= m;\nloop invariant -m <= a <= m;\nloop invariant a <= j;\nloop invariant a >= -j;\nloop invariant a <= m;\nloop invariant a >= -m;\nloop invariant a == j - m;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nint main() {\n  int a = 0;\n  int j = unknown1();\n  int m = unknown1();\n  if(m<=0)\n    return 0;\n  /*@\n\n\nloop invariant i3: a <= j;\nloop invariant i4: a >= -j;\n\n\n\n*/\nfor(j = 1; j <= m ; j++){\n    if(unknown1()) \n       a++;\n    else\n       a--; \n  }\n  {;\n//@ assert(a>=-m && a<=m);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 1 <= j <= m;\nloop invariant a >= -m;\nloop invariant a <= m;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nint main() {\n  int a = 0;\n  int j = unknown1();\n  int m = unknown1();\n  if(m<=0)\n    return 0;\n  /*@\n\n\n\n*/\nfor(j = 1; j <= m ; j++){\n    if(unknown1()) \n       a++;\n    else\n       a--; \n  }\n  {;\n//@ assert(a>=-m && a<=m);\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 24: unexpected token ')'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nint main() {\n  int a = 0;\n  int j = unknown1();\n  int m = unknown1();\n  if(m<=0)\n    return 0;\n  /*@\nloop invariant i1: a >= -m ;\nloop invariant i2: a <= m ;\nloop invariant i3: j >= 1 ;\nloop invariant i4: j <= m ;\nloop invariant i5: m > 0 ;\nloop invariant i6: 0 <= j <= m;\nloop invariant i7: -m <= a <= m;\nloop invariant i8: a >= -j && a <= j;\nloop invariant i9: 0 <= j <= m;loop invariant 0 <= a <= m;loop invariant a >= -m;loop invariant a <= m;loop invariant a == (a + (unknown1() ? 1 : -1));\nloop invariant i10: 0 <= a <= m;\nloop invariant i11: j >= 1;\nloop invariant i12: j <= m;\nloop invariant i13: j <= m ==> a >= -m;\nloop invariant i14: j <= m ==> a <= m;\nloop invariant i15: j <= m ==> a >= -m ==> a + j <= m;\nloop invariant i16: j <= m ==> a <= m ==> a + j >= -m;\nloop invariant i17: j <= m ==> a >= -m ==> a + j >= -m ==> a + j <= m;\nloop invariant i18: j <= m ==> a <= m ==> a + j <= m ==> a + j >= -m;\nloop invariant i19: j <= m ==> a >= -m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m;\nloop invariant i20: j <= m ==> a <= m ==> a + j <= m ==> a + j >= -m ==> a + j <= m;\nloop invariant i21: j <= m ==> a >= -m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m ==> a + j <= m;\nloop invariant i22: j <= m ==> a <= m ==> a + j <= m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m;\nloop invariant i23: j <= m ==> a >= -m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m;\nloop invariant i24: j <= m ==> a <= m ==> a + j <= m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m ==> a + j <= m;\nloop invariant i25: j <= m ==> a >= -m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m ==> a + j <= m;\nloop invariant i26: j <= m ==> a <= m ==> a + j <= m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m;\nloop invariant i27: j <= m ==> a >= -m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m;\nloop invariant i28: j <= m ==> a <= m ==> a + j <= m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m ==> a + j <= m;\nloop invariant i29: j <= m ==> a >= -m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m ==> a + j <= m;\nloop invariant i30: j <= m ==> a <= m ==> a + j <= m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m;\nloop invariant i31: j <= m ==> a >= -m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m;\nloop invariant i32: j <= m ==> a <= m ==> a + j <= m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m ==> a + j <= m;\nloop invariant i33: j <= m ==> a >= -m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m ==> a + j <= m;\nloop invariant i34: j <= m ==> a <= m ==> a + j <= m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m;\nloop invariant i35: 0 <= a + j <= m;\nloop invariant i36: -m <= a - j <= m;\nloop invariant i37: a + j == -m ==> j == m;\nloop invariant i38: a - j == m ==> j == 0;\nloop invariant i39: a + j == m ==> j == m;\nloop invariant i40: a - j == -m ==> j == m;\nloop invariant i41: a >= -j;\nloop invariant i42: a <= j;\nloop invariant i43: 1 <= j <= m;\nloop invariant i44: a >= -m;\nloop invariant i45: a <= m;\nloop invariant i46: a >= a - m;\nloop invariant i47: a >= a + m;\nloop invariant i48: a <= a - m;\nloop invariant i49: a <= a + m;\nloop invariant i50: j == m ==> a == 0;\nloop invariant i51: j < m ==> a >= -m;\nloop invariant i52: j < m ==> a <= m;\nloop invariant i53: j < m ==> a == a + unknown1() - unknown1();\nloop invariant i54: j < m ==> a == a + unknown1();\nloop invariant i55: for all j, 1 <= j <= m;\nloop invariant i56: for all k, 0 <= k < j;\nloop invariant i57: for all l, j < l <= m;\nloop invariant i58: a <= l;\nloop invariant i59: a >= k;\nloop invariant i60: j == l;\nloop invariant i61: j == k;\nloop invariant i62: a == a;\nloop invariant i63: (j <= m ==> a >= -m);\nloop invariant i64: (j >= 1 ==> a <= m);\nloop invariant i65: (j <= m ==> a <= j);\nloop invariant i66: if (j > 1) then (a >= -m + j - 1) else (a >= 0);\nloop invariant i67: if (j < m) then (a <= m - j + 1) else (a <= m);\nloop invariant i68: if (a >= 0) then (j >= 1) else (j <= m);\nloop invariant i69: if (a <= m) then (j <= m) else (j >= 1);\nloop invariant i70: if (a >= -m) then (j >= 1) else (j <= m);\nloop invariant i71: (j == 1 ==> a + m <= m);\nloop invariant i72: (j == 1 ==> a - m >= -m);\nloop invariant i73: (j == 2 ==> a + m - 1 <= m);\nloop invariant i74: (j == 2 ==> a - m + 1 >= -m);\nloop invariant i75: (j == 3 ==> a + m - 2 <= m);\nloop invariant i76: (j == 3 ==> a - m + 2 >= -m);\nloop invariant i77: (j == m ==> a + 1 <= m);\nloop invariant i78: (j == m ==> a - m >= -m);\nloop invariant i79: a == a + unknown1() * (unknown1() - 1) / 2 + unknown1() * (unknown1() - 1) / 2;\nloop invariant i80: a == a + (unknown1() - 1) * (unknown1() - 1) / 2 + (unknown1() - 1) * (unknown1() - 1) / 2;\nloop invariant i81: a == j - m;\n*/\nfor(j = 1; j <= m ; j++){\n    if(unknown1()) \n       a++;\n    else\n       a--; \n  }\n  {;\n//@ assert(a>=-m && a<=m);\n}\n\n}",
        "combined_annotation_num_solver_calls": 27,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nint main() {\n  int a = 0;\n  int j = unknown1();\n  int m = unknown1();\n  if(m<=0)\n    return 0;\n  /*@\nloop invariant i1: a >= -m ;\nloop invariant i2: a <= m ;\nloop invariant i3: j >= 1 ;\nloop invariant i4: j <= m ;\nloop invariant i5: m > 0 ;\nloop invariant i6: 0 <= j <= m;\nloop invariant i7: -m <= a <= m;\nloop invariant i8: a >= -j && a <= j;\n\n\nloop invariant i11: j >= 1;\n\nloop invariant i13: j <= m ==> a >= -m;\nloop invariant i14: j <= m ==> a <= m;\n\nloop invariant i16: j <= m ==> a <= m ==> a + j >= -m;\n\nloop invariant i18: j <= m ==> a <= m ==> a + j <= m ==> a + j >= -m;\nloop invariant i19: j <= m ==> a >= -m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m;\nloop invariant i20: j <= m ==> a <= m ==> a + j <= m ==> a + j >= -m ==> a + j <= m;\nloop invariant i21: j <= m ==> a >= -m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m ==> a + j <= m;\nloop invariant i22: j <= m ==> a <= m ==> a + j <= m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m;\nloop invariant i23: j <= m ==> a >= -m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m;\nloop invariant i24: j <= m ==> a <= m ==> a + j <= m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m ==> a + j <= m;\nloop invariant i25: j <= m ==> a >= -m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m ==> a + j <= m;\nloop invariant i26: j <= m ==> a <= m ==> a + j <= m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m;\nloop invariant i27: j <= m ==> a >= -m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m;\nloop invariant i28: j <= m ==> a <= m ==> a + j <= m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m ==> a + j <= m;\nloop invariant i29: j <= m ==> a >= -m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m ==> a + j <= m;\nloop invariant i30: j <= m ==> a <= m ==> a + j <= m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m;\nloop invariant i31: j <= m ==> a >= -m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m;\nloop invariant i32: j <= m ==> a <= m ==> a + j <= m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m ==> a + j <= m;\nloop invariant i33: j <= m ==> a >= -m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m ==> a + j <= m;\nloop invariant i34: j <= m ==> a <= m ==> a + j <= m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m ==> a + j <= m ==> a + j >= -m;\n\n\nloop invariant i37: a + j == -m ==> j == m;\nloop invariant i38: a - j == m ==> j == 0;\n\n\nloop invariant i41: a >= -j;\nloop invariant i42: a <= j;\nloop invariant i43: 1 <= j <= m;\n\n\nloop invariant i46: a >= a - m;\n\n\nloop invariant i49: a <= a + m;\n\nloop invariant i51: j < m ==> a >= -m;\nloop invariant i52: j < m ==> a <= m;\n\n\n\n\n\n\n\n\n\nloop invariant i62: a == a;\nloop invariant i63: (j <= m ==> a >= -m);\nloop invariant i64: (j >= 1 ==> a <= m);\nloop invariant i65: (j <= m ==> a <= j);\n\n\n\n\n\nloop invariant i71: (j == 1 ==> a + m <= m);\nloop invariant i72: (j == 1 ==> a - m >= -m);\nloop invariant i73: (j == 2 ==> a + m - 1 <= m);\nloop invariant i74: (j == 2 ==> a - m + 1 >= -m);\nloop invariant i75: (j == 3 ==> a + m - 2 <= m);\nloop invariant i76: (j == 3 ==> a - m + 2 >= -m);\n\n\n\n\n\n*/\nfor(j = 1; j <= m ; j++){\n    if(unknown1()) \n       a++;\n    else\n       a--; \n  }\n  {;\n//@ assert(a>=-m && a<=m);\n}\n\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/split.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/11.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/13.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/14.c"
        ],
        "skipped": [],
        "total": 109,
        "success_count": 91,
        "failure_count": 18,
        "success_rate": 0.8348623853211009
    }
}