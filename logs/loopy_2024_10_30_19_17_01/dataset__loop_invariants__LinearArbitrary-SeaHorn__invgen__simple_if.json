{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple_if.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n  int n,m;\n  n = unknown ();\n  m = unknown ();\n  int i = 1;\n   \n  while( i < n ) {\n    if( m > 0 ) {\n      i = 2*i;\n    } else {\n      i = 3*i;\n    }\n    \n  }\n  {;\n//@ assert(i > 0 );\n}\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 < n;\nloop invariant i > 0;\nloop invariant i < n;\nloop invariant i == 2^m * i_0, where i_0 is the initial value of i;\nloop invariant i_0 == 1;\nloop invariant m <= floor(log_2(n-1));\nloop invariant m >= 0;\nloop invariant i_0 == 1 ==> m == 0;\nloop invariant i_0 == 1 ==> m == 0 ==> i == n;\nloop invariant m > 0 ==> i == 2^m;\nloop invariant m > 0 ==> i == 2^m ==> i > 0;\nloop invariant m > 0 ==> i == 2^m ==> i < n;\nloop invariant m > 0 ==> i == 2^m ==> i == 2^m * i_0;\nloop invariant m > 0 ==> i == 2^m ==> i_0 == 1;\nloop invariant m > 0 ==> i == 2^m ==> m == log_2(i);\nloop invariant m > 0 ==> i == 2^m ==> i > 0;\nloop invariant m > 0 ==> i == 2^m ==> i < n;\nloop invariant m > 0 ==> i == 2^m ==> i == 2^m * i_0;\nloop invariant m > 0 ==> i == 2^m ==> i_0 == 1;\nloop invariant m > 0 ==> i == 2^m ==> m == log_2(i);\nloop invariant m > 0 ==> i == 2^m ==> i > 0;\nloop invariant m > 0 ==> i == 2^m ==> i < n;\nloop invariant m > 0 ==> i == 2^m ==> i == 2^m * i_0;\nloop invariant m > 0 ==> i == 2^m ==> i_0 == 1;\nloop invariant m > 0 ==> i == 2^m ==> m == log_2(i);\nloop invariant m > 0 ==> i == 2^m ==> i > 0;\nloop invariant m > 0 ==> i == 2^m ==> i < n;\nloop invariant m > 0 ==> i == 2^m ==> i == 2^m * i_0;\nloop invariant m > 0 ==> i == 2^m ==> i_0 == 1;\nloop invariant m > 0 ==> i == 2^m ==> m == log_2(i);\nloop invariant m > 0 ==> i == 2^m ==> i > 0;\nloop invariant m > 0 ==> i == 2^m ==> i < n;\nloop invariant m > 0 ==> i == 2^m ==> i == 2^m * i_0;\nloop invariant m > 0 ==> i == 2^m ==> i_0 == 1;\nloop invariant m > 0 ==> i == 2^m ==> m == log_2(i);\nloop invariant m > 0 ==> i == 2^m ==> i > 0;\nloop invariant m > 0 ==> i == 2^m ==> i < n;\nloop invariant m > 0 ==> i == 2^m ==> i == 2^m * i_0;\nloop invariant m > 0 ==> i == 2^m ==> i_0 == 1;\nloop invariant m > 0 ==> i == 2^m ==> m == log_2(i);\nloop invariant m > 0 ==> i == 2^m ==> i > 0;\nloop invariant m > 0 ==> i == 2^m ==> i < n;\nloop invariant m > 0 ==> i == 2^m ==> i == 2^m * i_0;\nloop invariant m > 0 ==> i == 2^m ==> i_0 == 1;\nloop invariant m > 0 ==> i == 2^m ==> m == log_2(i);\nloop invariant m > 0 ==> i == 2^m ==> i > 0;\nloop invariant m > 0 ==> i == 2^m ==> i < n;\nloop invariant m > 0 ==> i == 2^m ==> i == 2^m * i_0;\nloop invariant m > 0 ==> i == 2^m ==> i_0 == 1;\nloop invariant m > 0 ==> i == 2^m ==> m == log_2(i);\nloop invariant m > 0 ==> i == 2^m ==> i > 0;\nloop invariant m > 0 ==> i == 2^m ==> i < n;\n*/\n```",
            "```\n/*@\nloop invariant i >= 1;\nloop invariant ((m > 0) ==> (i <= 2^n)) && ((m <= 0) ==> (i <= 3^n));\nloop invariant ((m > 0) ==> (i >= 2^(n-1))) && ((m <= 0) ==> (i >= 3^(n-1)));\nloop invariant ((m > 0) ==> (i <= 2^(n-1))) && ((m <= 0) ==> (i <= 3^(n-1)));\nloop invariant ((m > 0) ==> (i >= 2^(n-1))) && ((m <= 0) ==> (i >= 3^(n-1)));\nloop invariant ((m > 0) ==> (i <= 2^(n-2))) && ((m <= 0) ==> (i <= 3^(n-2)));\nloop invariant ((m > 0) ==> (i >= 2^(n-2))) && ((m <= 0) ==> (i >= 3^(n-2)));\nloop invariant ((m > 0) ==> (i <= 2^(n-3))) && ((m <= 0) ==> (i <= 3^(n-3)));\nloop invariant ((m > 0) ==> (i >= 2^(n-3))) && ((m <= 0) ==> (i >= 3^(n-3)));\nloop invariant ((m > 0) ==> (i <= 2^(n-4))) && ((m <= 0) ==> (i <= 3^(n-4)));\nloop invariant ((m > 0) ==> (i >= 2^(n-4))) && ((m <= 0) ==> (i >= 3^(n-4)));\nloop invariant ((m > 0) ==> (i <= 2^(n-5))) && ((m <= 0) ==> (i <= 3^(n-5)));\nloop invariant ((m > 0) ==> (i >= 2^(n-5))) && ((m <= 0) ==> (i >= 3^(n-5)));\nloop invariant ((m > 0) ==> (i <= 2^(n-6))) && ((m <= 0) ==> (i <= 3^(n-6)));\nloop invariant ((m > 0) ==> (i >= 2^(n-6))) && ((m <= 0) ==> (i >= 3^(n-6)));\nloop invariant ((m > 0) ==> (i <= 2^(n-7))) && ((m <= 0) ==> (i <= 3^(n-7)));\nloop invariant ((m > 0) ==> (i >= 2^(n-7))) && ((m <= 0) ==> (i >= 3^(n-7)));\nloop invariant ((m > 0) ==> (i <= 2^(n-8))) && ((m <= 0) ==> (i <= 3^(n-8)));\nloop invariant ((m > 0) ==> (i >= 2^(n-8))) && ((m <= 0) ==> (i >= 3^(n-8)));\nloop invariant ((m > 0) ==> (i <= 2^(n-9))) && ((m <= 0) ==> (i <= 3^(n-9)));\nloop invariant ((m > 0) ==> (i >= 2^(n-9))) && ((m <= 0) ==> (i >= 3^(n-9)));\nloop invariant ((m > 0) ==> (i <= 2^(n-10))) && ((m <= 0) ==> (i <= 3^(n-10)));\nloop invariant ((m > 0) ==> (i >= 2^(n-10))) && ((m <= 0) ==> (i >= 3^(n-10)));\nloop invariant ((m > 0) ==> (i <= 2^(n-11))) && ((m <= 0) ==> (i <= 3^(n-11)));\nloop invariant ((m > 0) ==> (i >= 2^(n-11))) && ((m <= 0) ==> (i >= 3^(n-11)));\nloop invariant ((m > 0) ==> (i <= 2^(n-12))) && ((m <= 0) ==> (i <= 3^(n-12)));\nloop invariant ((m > 0) ==> (i >= 2^(n-12))) && ((m <= 0) ==> (i >= 3^(n-12)));\n*/\n```",
            "```\n/*@\nloop invariant 0 < i <= n;\nloop invariant if m > 0 then i = 2^k for some k else i = 3^k for some k;\n*/\n```",
            "```\n/*@\nloop invariant i > 0;\nloop invariant i <= n * 2;\nloop invariant i <= n * 3;\nloop invariant i % 2 == 0 || i % 3 == 0;\nloop invariant i >= 1;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant (if m > 0 then i = 2^k else i = 3^k) ==> k >= 0;\nloop invariant (i = 2^k) ==> k >= 0;\nloop invariant (i = 3^k) ==> k >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= 2^(n+1);\nloop invariant m < 0 ==> i <= 3^(n+1);\nloop invariant m > 0 ==> i <= 2^(n+1);\nloop invariant m < 0 ==> i > 0;\nloop invariant m > 0 ==> i > 0;\nloop invariant m < 0 ==> i > 3^(n+1);\nloop invariant m > 0 ==> i > 2^(n+1);\nloop invariant m < 0 ==> i > 3^(n+1);\nloop invariant m > 0 ==> i > 2^(n+1);\nloop invariant m < 0 ==> i > 3^(n+1);\nloop invariant m > 0 ==> i > 2^(n+1);\nloop invariant m < 0 ==> i > 3^(n+1);\nloop invariant m > 0 ==> i > 2^(n+1);\nloop invariant m < 0 ==> i > 3^(n+1);\nloop invariant m > 0 ==> i > 2^(n+1);\nloop invariant m < 0 ==> i > 3^(n+1);\nloop invariant m > 0 ==> i > 2^(n+1);\nloop invariant m < 0 ==> i > 3^(n+1);\nloop invariant m > 0 ==> i > 2^(n+1);\nloop invariant m < 0 ==> i > 3^(n+1);\nloop invariant m > 0 ==> i > 2^(n+1);\nloop invariant m < 0 ==> i > 3^(n+1);\nloop invariant m > 0 ==> i > 2^(n+1);\nloop invariant m < 0 ==> i > 3^(n+1);\nloop invariant m > 0 ==> i > 2^(n+1);\nloop invariant m < 0 ==> i > 3^(n+1);\nloop invariant m > 0 ==> i > 2^(n+1);\nloop invariant m < 0 ==> i > 3^(n+1);\nloop invariant m > 0 ==> i > 2^(n+1);\nloop invariant m < 0 ==> i > 3^(n+1);\nloop invariant m > 0 ==> i > 2^(n+1);\nloop invariant m < 0 ==> i > 3^(n+1);\nloop invariant m > 0 ==> i > 2^(n+1);\nloop invariant m < 0 ==> i > 3^(n+1);\nloop invariant m > 0 ==> i > 2^(n+1);\nloop invariant m < 0 ==> i > 3^(n+1);\nloop invariant m > 0 ==> i > 2^(n+1);\nloop invariant m < 0 ==> i > 3^(n+1);\nloop invariant m > 0 ==> i > 2^(n+1);\nloop invariant m < 0 ==> i > 3^(n+1);\nloop invariant m > 0 ==> i > 2^(n+1);\nloop invariant m < 0 ==> i > 3^(n+1);\nloop invariant m > 0 ==> i > 2^(n+1);\nloop invariant m < 0 ==> i > 3^(n+1);\nloop invariant m > 0 ==> i > 2^(n+1);\nloop invariant m < 0 ==> i > 3^(n+1);\nloop invariant m > 0 ==> i > 2^(n+1);\nloop invariant m < 0 ==> i > 3^(n+1);\nloop invariant m > 0 ==> i > 2^(n+1);\nloop invariant m < 0 ==> i > 3^(n+1);\nloop invariant m > 0 ==> i > 2^(n+1);\nloop invariant m < 0 ==> i > 3^(n+1);\nloop invariant m > 0 ==> i > 2^(n+1);\nloop invariant m < 0 ==> i > 3^(n+1);\nloop invariant m > 0 ==> i > 2^(n+1);\nloop invariant m < 0 ==> i > 3^(n+1);\nloop invariant m > 0 ==> i > 2^(n+1);\nloop invariant m < 0 ==> i > 3^(n+1);\nloop invariant m > 0 ==> i > 2^(n+1);\nloop invariant m < 0 ==> i > 3^(n+1);\nloop invariant m > 0 ==> i > 2^(n+1);\nloop invariant m < 0 ==> i > 3^(n+1);\nloop invariant m > 0 ==> i > 2^(n+1);\n*/\n```",
            "```\n/*@\nloop invariant 1 <= n;\nloop invariant 0 <= m;\nloop invariant 1 <= i <= n;\nloop invariant (if i < n then m > 0 ==> i * 2 <= n else m <= 0 ==> i * 3 <= n);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant i > 0;\nloop invariant m >= 0 ==> i <= 2^(n-1);\nloop invariant m < 0 ==> i <= 3^(n-1);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i < n;\nloop invariant i > 0;\nloop invariant i > 1;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant i == 2^k * i' for some 0 <= k <= log2(n);\nloop invariant i' == 3^j * i'' for some 0 <= j <= log3(n);\nloop invariant i'' >= 0;\nloop invariant n > 0;\nloop invariant m >= 0;\nloop invariant i' >= 0;\nloop invariant i'' >= 0;\nloop invariant 1 <= i <= n;\nloop invariant i == 2^k * i' for some 0 <= k <= log2(n);\nloop invariant i' == 3^j * i'' for some 0 <= j <= log3(n);\nloop invariant i'' >= 0;\nloop invariant n > 0;\nloop invariant m >= 0;\nloop invariant i' >= 0;\nloop invariant i'' >= 0;\nloop invariant 1 <= i <= n;\nloop invariant i == 2^k * i' for some 0 <= k <= log2(n);\nloop invariant i' == 3^j * i'' for some 0 <= j <= log3(n);\nloop invariant i'' >= 0;\nloop invariant n > 0;\nloop invariant m >= 0;\nloop invariant i' >= 0;\nloop invariant i'' >= 0;\nloop invariant 1 <= i <= n;\nloop invariant i == 2^k * i' for some 0 <= k <= log2(n);\nloop invariant i' == 3^j * i'' for some 0 <= j <= log3(n);\nloop invariant i'' >= 0;\nloop invariant n > 0;\nloop invariant m >= 0;\nloop invariant i' >= 0;\nloop invariant i'' >= 0;\nloop invariant 1 <= i <= n;\nloop invariant i == 2^k * i' for some 0 <= k <= log2(n);\nloop invariant i' == 3^j * i'' for some 0 <= j <= log3(n);\nloop invariant i'' >= 0;\nloop invariant n > 0;\nloop invariant m >= 0;\nloop invariant i' >= 0;\nloop invariant i'' >= 0;\nloop invariant 1 <= i <= n;\nloop invariant i == 2^k * i' for some 0 <= k <= log2(n);\nloop invariant i' == 3^j * i'' for some 0 <= j <= log3(n);\nloop invariant i'' >= 0;\nloop invariant n > 0;\nloop invariant m >= 0;\nloop invariant i' >= 0;\nloop invariant i'' >= 0;\nloop invariant 1 <= i <= n;\nloop invariant i == 2^k * i' for some 0 <= k <= log2(n);\nloop invariant i' == 3^j * i'' for some 0 <= j <= log3(n);\nloop invariant i'' >= 0;\nloop invariant n > 0;\nloop invariant m >= 0;\nloop invariant i' >= 0;\nloop invariant i'' >= 0;\nloop invariant 1 <= i <= n;\nloop invariant i == 2^k * i' for some 0 <= k <= log2(n);\nloop invariant i' == 3^j * i'' for some 0 <= j <= log3(n);\nloop invariant i'' >= 0;\nloop invariant n > 0;\nloop invariant m >= 0;\nloop invariant i' >= 0;\nloop invariant i'' >= 0;\nloop invariant 1 <= i <= n;\nloop invariant i == 2^k * i' for some 0 <= k <= log2(n);\nloop invariant i' == 3^j * i'' for some 0 <= j <= log3(n);\nloop invariant i'' >= 0;\nloop invariant n > 0;\nloop invariant m >= 0;\nloop invariant i' >= 0;\nloop invariant i'' >= 0;\nloop invariant 1 <= i <= n;\nloop invariant i == 2^k * i' for some 0 <= k <= log2(n);\nloop invariant i' == 3^j * i'' for some 0 <= j <= log3(n);\nloop invariant i'' >= 0;\nloop invariant n > 0;\nloop invariant m >= 0;\nloop invariant i' >= 0;\nloop invariant i'' >= 0;\nloop invariant 1 <= i <= n;\nloop invariant i == 2^k * i' for some 0 <= k <= log2(n);\nloop invariant i' == 3^j * i'' for some 0 <= j <= log3(n);\nloop invariant i'' >= 0;\nloop invariant n > 0;\nloop invariant m >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= n;\nloop invariant 0 <= m;\nloop invariant 1 <= i <= n;\nloop invariant i == 2^k * j, where k is the number of times the loop has executed and j is an integer between 1 and n/2^k;\nloop invariant if m > 0 then i == 2^k * j, where k is the number of times the loop has executed and j is an integer between 1 and n/2^k;\nloop invariant if m <= 0 then i == 3^k * j, where k is the number of times the loop has executed and j is an integer between 1 and n/3^k;\nloop invariant if m > 0 then i == 2^k * j, where k is the number of times the loop has executed and j is an integer between 1 and n/2^k;\nloop invariant if m <= 0 then i == 3^k * j, where k is the number of times the loop has executed and j is an integer between 1 and n/3^k;\nloop invariant if m > 0 then i == 2^k * j, where k is the number of times the loop has executed and j is an integer between 1 and n/2^k;\nloop invariant if m <= 0 then i == 3^k * j, where k is the number of times the loop has executed and j is an integer between 1 and n/3^k;\nloop invariant if m > 0 then i == 2^k * j, where k is the number of times the loop has executed and j is an integer between 1 and n/2^k;\nloop invariant if m <= 0 then i == 3^k * j, where k is the number of times the loop has executed and j is an integer between 1 and n/3^k;\nloop invariant if m > 0 then i == 2^k * j, where k is the number of times the loop has executed and j is an integer between 1 and n/2^k;\nloop invariant if m <= 0 then i == 3^k * j, where k is the number of times the loop has executed and j is an integer between 1 and n/3^k;\nloop invariant if m > 0 then i == 2^k * j, where k is the number of times the loop has executed and j is an integer between 1 and n/2^k;\nloop invariant if m <= 0 then i == 3^k * j, where k is the number of times the loop has executed and j is an integer between 1 and n/3^k;\nloop invariant if m > 0 then i == 2^k * j, where k is the number of times the loop has executed and j is an integer between 1 and n/2^k;\nloop invariant if m <= 0 then i == 3^k * j, where k is the number of times the loop has executed and j is an integer between 1 and n/3^k;\nloop invariant if m > 0 then i == 2^k * j, where k is the number of times the loop has executed and j is an integer between 1 and n/2^k;\nloop invariant if m <= 0 then i == 3^k * j, where k is the number of times the loop has executed and j is an integer between 1 and n/3^k;\nloop invariant if m > 0 then i == 2^k * j, where k is the number of times the loop has executed and j is an integer between 1 and n/2^k;\nloop invariant if m <= 0 then i == 3^k * j, where k is the number of times the loop has executed and j is an integer between 1 and n/3^k;\nloop invariant if m > 0 then i == 2^k * j, where k is the number of times the loop has executed and j is an integer between 1 and n/2^k;\nloop invariant if m <= 0 then i == 3^k * j, where k is the number of times the loop has executed and j is an integer between 1 and n/3^k;\nloop invariant if m > 0 then i == 2^k * j, where k is the number of times the loop has executed and j is an integer between 1 and n/2^k;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant i <= 2*i;\nloop invariant i <= 3*i;\nloop invariant i > 0;\nloop invariant i < n;\nloop invariant i < 2*i;\nloop invariant i < 3*i;\nloop invariant i > 0;\nloop invariant i < n;\nloop invariant i < 2*i;\nloop invariant i < 3*i;\nloop invariant i > 0;\nloop invariant i < n;\nloop invariant i < 2*i;\nloop invariant i < 3*i;\nloop invariant i > 0;\nloop invariant i < n;\nloop invariant i < 2*i;\nloop invariant i < 3*i;\nloop invariant i > 0;\nloop invariant i < n;\nloop invariant i < 2*i;\nloop invariant i < 3*i;\nloop invariant i > 0;\nloop invariant i < n;\nloop invariant i < 2*i;\nloop invariant i < 3*i;\nloop invariant i > 0;\nloop invariant i < n;\nloop invariant i < 2*i;\nloop invariant i < 3*i;\nloop invariant i > 0;\nloop invariant i < n;\nloop invariant i < 2*i;\nloop invariant i < 3*i;\nloop invariant i > 0;\nloop invariant i < n;\nloop invariant i < 2*i;\nloop invariant i < 3*i;\nloop invariant i > 0;\nloop invariant i < n;\nloop invariant i < 2*i;\nloop invariant i < 3*i;\nloop invariant i > 0;\nloop invariant i < n;\nloop invariant i < 2*i;\nloop invariant i < 3*i;\nloop invariant i > 0;\nloop invariant i < n;\nloop invariant i < 2*i;\nloop invariant i < 3*i;\nloop invariant i > 0;\nloop invariant i < n;\nloop invariant i < 2*i;\nloop invariant i < 3*i;\nloop invariant i > 0;\nloop invariant i < n;\nloop invariant i < 2*i;\nloop invariant i < 3*i;\nloop invariant i > 0;\nloop invariant i < n;\nloop invariant i < 2*i;\nloop invariant i < 3*i;\nloop invariant i > 0;\nloop invariant i < n;\nloop invariant i < 2*i;\nloop invariant i < 3*i;\nloop invariant i > 0;\nloop invariant i < n;\nloop invariant i < 2*i;\nloop invariant i < 3*i;\nloop invariant i > 0;\nloop invariant i < n;\nloop invariant i < 2*i;\nloop invariant i < 3*i;\nloop invariant i > 0;\nloop invariant i < n;\nloop invariant i < 2*i;\nloop invariant i < 3*i;\nloop invariant i > 0;\nloop invariant i < n;\nloop invariant i < 2*i;\nloop invariant i < 3*i;\nloop invariant i > 0;\nloop invariant i < n;\nloop invariant i < 2*i;\nloop invariant i < 3*i;\nloop invariant i > 0;\nloop invariant i < n;\nloop invariant i < 2*i;\nloop invariant i < 3*i;\nloop invariant i > 0;\nloop invariant i < n;\nloop invariant i < 2*i;\nloop invariant i < 3*i;\nloop invariant i > 0;\nloop invariant i < n;\nloop invariant i < 2*i;\nloop invariant i < 3*i;\nloop invariant i > 0;\nloop invariant i < n;\nloop invariant i < 2*i;\nloop invariant i < 3*i;\nloop invariant i > 0;\nloop invariant i < n;\nloop invariant i < 2*i;\nloop invariant i < 3*i;\nloop invariant i > 0;\nloop invariant i < n;\nloop invariant i < 2*i;\nloop invariant i < 3*i;\nloop invariant i > 0;\nloop invariant i < n;\nloop invariant i < 2*i;\nloop invariant i < 3*i;\nloop invariant i > 0;\nloop invariant i < n;\nloop invariant i < 2*i;\nloop invariant i < 3*i;\nloop invariant i > 0;\nloop invariant i < n;\nloop invariant i < 2*i;\nloop invariant i < 3*i;\nloop invariant i > 0;\nloop invariant i < n;\nloop invariant i < 2*i;\nloop invariant i < 3*i;\nloop invariant i > 0;\nloop invariant i < n;\nloop invariant i < 2*i;\nloop invariant i < 3*i;\nloop invariant i > 0;\nloop invariant i < n;\nloop invariant i < 2*i;\nloop invariant i < 3*i;\nloop invariant i > 0;\nloop invariant i < n;\n*/\n```",
            "```\n/*@\nloop invariant n > 0;\nloop invariant m >= 0;\nloop invariant 1 <= i <= n;\nloop invariant if m > 0 then i = 2^k for some k;\nloop invariant else i = 3^k for some k;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant i > 0;\nloop invariant i == 2*i ==> m <= 0;\nloop invariant i == 3*i ==> m > 0;\nloop invariant i == 2*i ==> i <= n;\nloop invariant i == 3*i ==> i <= n;\nloop invariant i == 2*i ==> i > 0;\nloop invariant i == 3*i ==> i > 0;\nloop invariant i == 2*i ==> m <= 0 ==> i <= n;\nloop invariant i == 3*i ==> m > 0 ==> i <= n;\nloop invariant i == 2*i ==> m <= 0 ==> i > 0;\nloop invariant i == 3*i ==> m > 0 ==> i > 0;\nloop invariant i == 2*i ==> m <= 0 ==> i <= n ==> i > 0;\nloop invariant i == 3*i ==> m > 0 ==> i <= n ==> i > 0;\nloop invariant i == 2*i ==> m <= 0 ==> i <= n ==> i > 0 ==> i == 2*i;\nloop invariant i == 3*i ==> m > 0 ==> i <= n ==> i > 0 ==> i == 3*i;\nloop invariant i == 2*i ==> m <= 0 ==> i <= n ==> i > 0 ==> i == 2*i ==> i == 3*i;\nloop invariant i == 3*i ==> m > 0 ==> i <= n ==> i > 0 ==> i == 3*i ==> i == 2*i;\nloop invariant i == 2*i ==> m <= 0 ==> i <= n ==> i > 0 ==> i == 2*i ==> i == 3*i ==> i == 2*i;\nloop invariant i == 3*i ==> m > 0 ==> i <= n ==> i > 0 ==> i == 3*i ==> i == 2*i ==> i == 3*i;\nloop invariant i == 2*i ==> m <= 0 ==> i <= n ==> i > 0 ==> i == 2*i ==> i == 3*i ==> i == 2*i ==> i == 3*i;\nloop invariant i == 3*i ==> m > 0 ==> i <= n ==> i > 0 ==> i == 3*i ==> i == 2*i ==> i == 3*i ==> i == 2*i;\nloop invariant i == 2*i ==> m <= 0 ==> i <= n ==> i > 0 ==> i == 2*i ==> i == 3*i ==> i == 2*i ==> i == 3*i ==> i == 2*i;\nloop invariant i == 3*i ==> m > 0 ==> i <= n ==> i > 0 ==> i == 3*i ==> i == 2*i ==> i == 3*i ==> i == 2*i ==> i == 3*i;\nloop invariant i == 2*i ==> m <= 0 ==> i <= n ==> i > 0 ==> i == 2*i ==> i == 3*i ==> i == 2*i ==> i == 3*i ==> i == 2*i ==> i == 3*i;\nloop invariant i == 3*i ==> m > 0 ==> i <= n ==> i > 0 ==> i == 3*i ==> i == 2*i ==> i == 3*i ==> i == 2*i ==> i == 3*i ==> i == 2*i;\nloop invariant i == 2*i ==> m <= 0 ==> i <= n ==> i > 0 ==> i == 2*i ==> i == 3*i ==> i == 2*i ==> i == 3*i ==> i == 2*i ==> i == 3*i ==> i == 2*i;\nloop invariant i == 3*i ==> m > 0 ==> i <= n ==> i > 0 ==> i == 3*i ==> i == 2*i ==> i == 3*i ==> i == 2*i ==> i == 3*i ==> i == 2*i ==> i == 3*i;\nloop invariant i == 2*i ==> m <= 0 ==> i <= n ==> i > 0 ==> i == 2*i ==> i == 3*i ==> i == 2*i ==> i == 3*i ==> i == 2*i ==> i == 3*i ==> i == 2*i ==> i == 3*i;\nloop invariant i == 3*i ==> m > 0 ==> i <= n ==> i > 0 ==> i == 3*i ==> i == 2*i ==> i == 3*i ==> i == 2*i ==> i == 3*i ==> i == 2*i ==> i == 3*i ==> i == 2*i;\n*/\n```",
            "```\n/*@\nloop invariant 0 < i <= n;\nloop invariant (i % 2) == (m > 0 ? 0 : 1);\nloop invariant (i % 3) == (m <= 0 ? 0 : 1);\nloop invariant i > 1;\nloop invariant i < n;\nloop invariant i >= 1;\nloop invariant i <= 2;\nloop invariant i >= 3;\nloop invariant i <= 3;\nloop invariant i >= 4;\nloop invariant i <= 4;\nloop invariant i >= 5;\nloop invariant i <= 5;\nloop invariant i >= 6;\nloop invariant i <= 6;\nloop invariant i >= 7;\nloop invariant i <= 7;\nloop invariant i >= 8;\nloop invariant i <= 8;\nloop invariant i >= 9;\nloop invariant i <= 9;\nloop invariant i >= 10;\nloop invariant i <= 10;\nloop invariant i >= 11;\nloop invariant i <= 11;\nloop invariant i >= 12;\nloop invariant i <= 12;\nloop invariant i >= 13;\nloop invariant i <= 13;\nloop invariant i >= 14;\nloop invariant i <= 14;\nloop invariant i >= 15;\nloop invariant i <= 15;\nloop invariant i >= 16;\nloop invariant i <= 16;\nloop invariant i >= 17;\nloop invariant i <= 17;\nloop invariant i >= 18;\nloop invariant i <= 18;\nloop invariant i >= 19;\nloop invariant i <= 19;\nloop invariant i >= 20;\nloop invariant i <= 20;\nloop invariant i >= 21;\nloop invariant i <= 21;\nloop invariant i >= 22;\nloop invariant i <= 22;\nloop invariant i >= 23;\nloop invariant i <= 23;\nloop invariant i >= 24;\nloop invariant i <= 24;\nloop invariant i >= 25;\nloop invariant i <= 25;\nloop invariant i >= 26;\nloop invariant i <= 26;\nloop invariant i >= 27;\nloop invariant i <= 27;\nloop invariant i >= 28;\nloop invariant i <= 28;\nloop invariant i >= 29;\nloop invariant i <= 29;\nloop invariant i >= 30;\nloop invariant i <= 30;\nloop invariant i >= 31;\nloop invariant i <= 31;\nloop invariant i >= 32;\nloop invariant i <= 32;\nloop invariant i >= 33;\nloop invariant i <= 33;\nloop invariant i >= 34;\nloop invariant i <= 34;\nloop invariant i >= 35;\nloop invariant i <= 35;\nloop invariant i >= 36;\nloop invariant i <= 36;\nloop invariant i >= 37;\nloop invariant i <= 37;\nloop invariant i >= 38;\nloop invariant i <= 38;\nloop invariant i >= 39;\nloop invariant i <= 39;\nloop invariant i >= 40;\nloop invariant i <= 40;\nloop invariant i >= 41;\nloop invariant i <= 41;\nloop invariant i >= 42;\nloop invariant i <= 42;\nloop invariant i >= 43;\nloop invariant i <= 43;\nloop invariant i >= 44;\nloop invariant i <= 44;\nloop invariant i >= 45;\nloop invariant i <= 45;\nloop invariant i >= 46;\nloop invariant i <= 46;\nloop invariant i >= 47;\nloop invariant i <= 47;\nloop invariant i >= 48;\nloop invariant i <= 48;\nloop invariant i >= 49;\nloop invariant i <= 49;\nloop invariant i >= 50;\nloop invariant i <= 50;\nloop invariant i >= 51;\nloop invariant i <= 51;\nloop invariant i >= 52;\nloop invariant i <= 52;\nloop invariant i >= 53;\nloop invariant i <= 53;\nloop invariant i >= 54;\nloop invariant i <= 54;\nloop invariant i >= 55;\nloop invariant i <= 55;\nloop invariant i >= 56;\nloop invariant i <= 56;\nloop invariant i >= 57;\nloop invariant i <= 57;\nloop invariant i >= 58;\nloop invariant i <= 58;\nloop invariant i >= 59;\nloop invariant i <= 59;\nloop invariant i >= 60;\nloop invariant i <= 60;\nloop invariant i >= 61;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 12,
                "annotations": "```\n/*@\nloop invariant 0 < n;\nloop invariant i > 0;\nloop invariant i < n;\nloop invariant i == 2^m * i_0, where i_0 is the initial value of i;\nloop invariant i_0 == 1;\nloop invariant m <= floor(log_2(n-1));\nloop invariant m >= 0;\nloop invariant i_0 == 1 ==> m == 0;\nloop invariant i_0 == 1 ==> m == 0 ==> i == n;\nloop invariant m > 0 ==> i == 2^m;\nloop invariant m > 0 ==> i == 2^m ==> i > 0;\nloop invariant m > 0 ==> i == 2^m ==> i < n;\nloop invariant m > 0 ==> i == 2^m ==> i == 2^m * i_0;\nloop invariant m > 0 ==> i == 2^m ==> i_0 == 1;\nloop invariant m > 0 ==> i == 2^m ==> m == log_2(i);\nloop invariant m > 0 ==> i == 2^m ==> i > 0;\nloop invariant m > 0 ==> i == 2^m ==> i < n;\nloop invariant m > 0 ==> i == 2^m ==> i == 2^m * i_0;\nloop invariant m > 0 ==> i == 2^m ==> i_0 == 1;\nloop invariant m > 0 ==> i == 2^m ==> m == log_2(i);\nloop invariant m > 0 ==> i == 2^m ==> i > 0;\nloop invariant m > 0 ==> i == 2^m ==> i < n;\nloop invariant m > 0 ==> i == 2^m ==> i == 2^m * i_0;\nloop invariant m > 0 ==> i == 2^m ==> i_0 == 1;\nloop invariant m > 0 ==> i == 2^m ==> m == log_2(i);\nloop invariant m > 0 ==> i == 2^m ==> i > 0;\nloop invariant m > 0 ==> i == 2^m ==> i < n;\nloop invariant m > 0 ==> i == 2^m ==> i == 2^m * i_0;\nloop invariant m > 0 ==> i == 2^m ==> i_0 == 1;\nloop invariant m > 0 ==> i == 2^m ==> m == log_2(i);\nloop invariant m > 0 ==> i == 2^m ==> i > 0;\nloop invariant m > 0 ==> i == 2^m ==> i < n;\nloop invariant m > 0 ==> i == 2^m ==> i == 2^m * i_0;\nloop invariant m > 0 ==> i == 2^m ==> i_0 == 1;\nloop invariant m > 0 ==> i == 2^m ==> m == log_2(i);\nloop invariant m > 0 ==> i == 2^m ==> i > 0;\nloop invariant m > 0 ==> i == 2^m ==> i < n;\nloop invariant m > 0 ==> i == 2^m ==> i == 2^m * i_0;\nloop invariant m > 0 ==> i == 2^m ==> i_0 == 1;\nloop invariant m > 0 ==> i == 2^m ==> m == log_2(i);\nloop invariant m > 0 ==> i == 2^m ==> i > 0;\nloop invariant m > 0 ==> i == 2^m ==> i < n;\nloop invariant m > 0 ==> i == 2^m ==> i == 2^m * i_0;\nloop invariant m > 0 ==> i == 2^m ==> i_0 == 1;\nloop invariant m > 0 ==> i == 2^m ==> m == log_2(i);\nloop invariant m > 0 ==> i == 2^m ==> i > 0;\nloop invariant m > 0 ==> i == 2^m ==> i < n;\nloop invariant m > 0 ==> i == 2^m ==> i == 2^m * i_0;\nloop invariant m > 0 ==> i == 2^m ==> i_0 == 1;\nloop invariant m > 0 ==> i == 2^m ==> m == log_2(i);\nloop invariant m > 0 ==> i == 2^m ==> i > 0;\nloop invariant m > 0 ==> i == 2^m ==> i < n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n  int n,m;\n  n = unknown ();\n  m = unknown ();\n  int i = 1;\n   \n  /*@\n\nloop invariant i2: i > 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile( i < n ) {\n    if( m > 0 ) {\n      i = 2*i;\n    } else {\n      i = 3*i;\n    }\n    \n  }\n  {;\n//@ assert(i > 0 );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 25,
                "annotations": "```\n/*@\nloop invariant i >= 1;\nloop invariant ((m > 0) ==> (i <= 2^n)) && ((m <= 0) ==> (i <= 3^n));\nloop invariant ((m > 0) ==> (i >= 2^(n-1))) && ((m <= 0) ==> (i >= 3^(n-1)));\nloop invariant ((m > 0) ==> (i <= 2^(n-1))) && ((m <= 0) ==> (i <= 3^(n-1)));\nloop invariant ((m > 0) ==> (i >= 2^(n-1))) && ((m <= 0) ==> (i >= 3^(n-1)));\nloop invariant ((m > 0) ==> (i <= 2^(n-2))) && ((m <= 0) ==> (i <= 3^(n-2)));\nloop invariant ((m > 0) ==> (i >= 2^(n-2))) && ((m <= 0) ==> (i >= 3^(n-2)));\nloop invariant ((m > 0) ==> (i <= 2^(n-3))) && ((m <= 0) ==> (i <= 3^(n-3)));\nloop invariant ((m > 0) ==> (i >= 2^(n-3))) && ((m <= 0) ==> (i >= 3^(n-3)));\nloop invariant ((m > 0) ==> (i <= 2^(n-4))) && ((m <= 0) ==> (i <= 3^(n-4)));\nloop invariant ((m > 0) ==> (i >= 2^(n-4))) && ((m <= 0) ==> (i >= 3^(n-4)));\nloop invariant ((m > 0) ==> (i <= 2^(n-5))) && ((m <= 0) ==> (i <= 3^(n-5)));\nloop invariant ((m > 0) ==> (i >= 2^(n-5))) && ((m <= 0) ==> (i >= 3^(n-5)));\nloop invariant ((m > 0) ==> (i <= 2^(n-6))) && ((m <= 0) ==> (i <= 3^(n-6)));\nloop invariant ((m > 0) ==> (i >= 2^(n-6))) && ((m <= 0) ==> (i >= 3^(n-6)));\nloop invariant ((m > 0) ==> (i <= 2^(n-7))) && ((m <= 0) ==> (i <= 3^(n-7)));\nloop invariant ((m > 0) ==> (i >= 2^(n-7))) && ((m <= 0) ==> (i >= 3^(n-7)));\nloop invariant ((m > 0) ==> (i <= 2^(n-8))) && ((m <= 0) ==> (i <= 3^(n-8)));\nloop invariant ((m > 0) ==> (i >= 2^(n-8))) && ((m <= 0) ==> (i >= 3^(n-8)));\nloop invariant ((m > 0) ==> (i <= 2^(n-9))) && ((m <= 0) ==> (i <= 3^(n-9)));\nloop invariant ((m > 0) ==> (i >= 2^(n-9))) && ((m <= 0) ==> (i >= 3^(n-9)));\nloop invariant ((m > 0) ==> (i <= 2^(n-10))) && ((m <= 0) ==> (i <= 3^(n-10)));\nloop invariant ((m > 0) ==> (i >= 2^(n-10))) && ((m <= 0) ==> (i >= 3^(n-10)));\nloop invariant ((m > 0) ==> (i <= 2^(n-11))) && ((m <= 0) ==> (i <= 3^(n-11)));\nloop invariant ((m > 0) ==> (i >= 2^(n-11))) && ((m <= 0) ==> (i >= 3^(n-11)));\nloop invariant ((m > 0) ==> (i <= 2^(n-12))) && ((m <= 0) ==> (i <= 3^(n-12)));\nloop invariant ((m > 0) ==> (i >= 2^(n-12))) && ((m <= 0) ==> (i >= 3^(n-12)));\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n  int n,m;\n  n = unknown ();\n  m = unknown ();\n  int i = 1;\n   \n  /*@\nloop invariant i1: i >= 1;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile( i < n ) {\n    if( m > 0 ) {\n      i = 2*i;\n    } else {\n      i = 3*i;\n    }\n    \n  }\n  {;\n//@ assert(i > 0 );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 < i <= n;\nloop invariant if m > 0 then i = 2^k for some k else i = 3^k for some k;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n  int n,m;\n  n = unknown ();\n  m = unknown ();\n  int i = 1;\n   \n  /*@\n\n\n*/\nwhile( i < n ) {\n    if( m > 0 ) {\n      i = 2*i;\n    } else {\n      i = 3*i;\n    }\n    \n  }\n  {;\n//@ assert(i > 0 );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant i > 0;\nloop invariant i <= n * 2;\nloop invariant i <= n * 3;\nloop invariant i % 2 == 0 || i % 3 == 0;\nloop invariant i >= 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n  int n,m;\n  n = unknown ();\n  m = unknown ();\n  int i = 1;\n   \n  /*@\nloop invariant i1: i > 0;\n\n\n\nloop invariant i5: i >= 1;\n*/\nwhile( i < n ) {\n    if( m > 0 ) {\n      i = 2*i;\n    } else {\n      i = 3*i;\n    }\n    \n  }\n  {;\n//@ assert(i > 0 );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant (if m > 0 then i = 2^k else i = 3^k) ==> k >= 0;\nloop invariant (i = 2^k) ==> k >= 0;\nloop invariant (i = 3^k) ==> k >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n  int n,m;\n  n = unknown ();\n  m = unknown ();\n  int i = 1;\n   \n  /*@\n\n\n\n\n*/\nwhile( i < n ) {\n    if( m > 0 ) {\n      i = 2*i;\n    } else {\n      i = 3*i;\n    }\n    \n  }\n  {;\n//@ assert(i > 0 );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= 2^(n+1);\nloop invariant m < 0 ==> i <= 3^(n+1);\nloop invariant m > 0 ==> i <= 2^(n+1);\nloop invariant m < 0 ==> i > 0;\nloop invariant m > 0 ==> i > 0;\nloop invariant m < 0 ==> i > 3^(n+1);\nloop invariant m > 0 ==> i > 2^(n+1);\nloop invariant m < 0 ==> i > 3^(n+1);\nloop invariant m > 0 ==> i > 2^(n+1);\nloop invariant m < 0 ==> i > 3^(n+1);\nloop invariant m > 0 ==> i > 2^(n+1);\nloop invariant m < 0 ==> i > 3^(n+1);\nloop invariant m > 0 ==> i > 2^(n+1);\nloop invariant m < 0 ==> i > 3^(n+1);\nloop invariant m > 0 ==> i > 2^(n+1);\nloop invariant m < 0 ==> i > 3^(n+1);\nloop invariant m > 0 ==> i > 2^(n+1);\nloop invariant m < 0 ==> i > 3^(n+1);\nloop invariant m > 0 ==> i > 2^(n+1);\nloop invariant m < 0 ==> i > 3^(n+1);\nloop invariant m > 0 ==> i > 2^(n+1);\nloop invariant m < 0 ==> i > 3^(n+1);\nloop invariant m > 0 ==> i > 2^(n+1);\nloop invariant m < 0 ==> i > 3^(n+1);\nloop invariant m > 0 ==> i > 2^(n+1);\nloop invariant m < 0 ==> i > 3^(n+1);\nloop invariant m > 0 ==> i > 2^(n+1);\nloop invariant m < 0 ==> i > 3^(n+1);\nloop invariant m > 0 ==> i > 2^(n+1);\nloop invariant m < 0 ==> i > 3^(n+1);\nloop invariant m > 0 ==> i > 2^(n+1);\nloop invariant m < 0 ==> i > 3^(n+1);\nloop invariant m > 0 ==> i > 2^(n+1);\nloop invariant m < 0 ==> i > 3^(n+1);\nloop invariant m > 0 ==> i > 2^(n+1);\nloop invariant m < 0 ==> i > 3^(n+1);\nloop invariant m > 0 ==> i > 2^(n+1);\nloop invariant m < 0 ==> i > 3^(n+1);\nloop invariant m > 0 ==> i > 2^(n+1);\nloop invariant m < 0 ==> i > 3^(n+1);\nloop invariant m > 0 ==> i > 2^(n+1);\nloop invariant m < 0 ==> i > 3^(n+1);\nloop invariant m > 0 ==> i > 2^(n+1);\nloop invariant m < 0 ==> i > 3^(n+1);\nloop invariant m > 0 ==> i > 2^(n+1);\nloop invariant m < 0 ==> i > 3^(n+1);\nloop invariant m > 0 ==> i > 2^(n+1);\nloop invariant m < 0 ==> i > 3^(n+1);\nloop invariant m > 0 ==> i > 2^(n+1);\nloop invariant m < 0 ==> i > 3^(n+1);\nloop invariant m > 0 ==> i > 2^(n+1);\nloop invariant m < 0 ==> i > 3^(n+1);\nloop invariant m > 0 ==> i > 2^(n+1);\nloop invariant m < 0 ==> i > 3^(n+1);\nloop invariant m > 0 ==> i > 2^(n+1);\nloop invariant m < 0 ==> i > 3^(n+1);\nloop invariant m > 0 ==> i > 2^(n+1);\nloop invariant m < 0 ==> i > 3^(n+1);\nloop invariant m > 0 ==> i > 2^(n+1);\nloop invariant m < 0 ==> i > 3^(n+1);\nloop invariant m > 0 ==> i > 2^(n+1);\nloop invariant m < 0 ==> i > 3^(n+1);\nloop invariant m > 0 ==> i > 2^(n+1);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n  int n,m;\n  n = unknown ();\n  m = unknown ();\n  int i = 1;\n   \n  /*@\n\n\n\nloop invariant i4: m < 0 ==> i > 0;\nloop invariant i5: m > 0 ==> i > 0;\n\n\n*/\nwhile( i < n ) {\n    if( m > 0 ) {\n      i = 2*i;\n    } else {\n      i = 3*i;\n    }\n    \n  }\n  {;\n//@ assert(i > 0 );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 1 <= n;\nloop invariant 0 <= m;\nloop invariant 1 <= i <= n;\nloop invariant (if i < n then m > 0 ==> i * 2 <= n else m <= 0 ==> i * 3 <= n);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n  int n,m;\n  n = unknown ();\n  m = unknown ();\n  int i = 1;\n   \n  /*@\n\n\n\n\n*/\nwhile( i < n ) {\n    if( m > 0 ) {\n      i = 2*i;\n    } else {\n      i = 3*i;\n    }\n    \n  }\n  {;\n//@ assert(i > 0 );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant i > 0;\nloop invariant m >= 0 ==> i <= 2^(n-1);\nloop invariant m < 0 ==> i <= 3^(n-1);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n  int n,m;\n  n = unknown ();\n  m = unknown ();\n  int i = 1;\n   \n  /*@\n\nloop invariant i2: i > 0;\n\n\n*/\nwhile( i < n ) {\n    if( m > 0 ) {\n      i = 2*i;\n    } else {\n      i = 3*i;\n    }\n    \n  }\n  {;\n//@ assert(i > 0 );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i < n;\nloop invariant i > 0;\nloop invariant i > 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n  int n,m;\n  n = unknown ();\n  m = unknown ();\n  int i = 1;\n   \n  /*@\n\nloop invariant i2: i > 0;\n\n*/\nwhile( i < n ) {\n    if( m > 0 ) {\n      i = 2*i;\n    } else {\n      i = 3*i;\n    }\n    \n  }\n  {;\n//@ assert(i > 0 );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant i == 2^k * i' for some 0 <= k <= log2(n);\nloop invariant i' == 3^j * i'' for some 0 <= j <= log3(n);\nloop invariant i'' >= 0;\nloop invariant n > 0;\nloop invariant m >= 0;\nloop invariant i' >= 0;\nloop invariant i'' >= 0;\nloop invariant 1 <= i <= n;\nloop invariant i == 2^k * i' for some 0 <= k <= log2(n);\nloop invariant i' == 3^j * i'' for some 0 <= j <= log3(n);\nloop invariant i'' >= 0;\nloop invariant n > 0;\nloop invariant m >= 0;\nloop invariant i' >= 0;\nloop invariant i'' >= 0;\nloop invariant 1 <= i <= n;\nloop invariant i == 2^k * i' for some 0 <= k <= log2(n);\nloop invariant i' == 3^j * i'' for some 0 <= j <= log3(n);\nloop invariant i'' >= 0;\nloop invariant n > 0;\nloop invariant m >= 0;\nloop invariant i' >= 0;\nloop invariant i'' >= 0;\nloop invariant 1 <= i <= n;\nloop invariant i == 2^k * i' for some 0 <= k <= log2(n);\nloop invariant i' == 3^j * i'' for some 0 <= j <= log3(n);\nloop invariant i'' >= 0;\nloop invariant n > 0;\nloop invariant m >= 0;\nloop invariant i' >= 0;\nloop invariant i'' >= 0;\nloop invariant 1 <= i <= n;\nloop invariant i == 2^k * i' for some 0 <= k <= log2(n);\nloop invariant i' == 3^j * i'' for some 0 <= j <= log3(n);\nloop invariant i'' >= 0;\nloop invariant n > 0;\nloop invariant m >= 0;\nloop invariant i' >= 0;\nloop invariant i'' >= 0;\nloop invariant 1 <= i <= n;\nloop invariant i == 2^k * i' for some 0 <= k <= log2(n);\nloop invariant i' == 3^j * i'' for some 0 <= j <= log3(n);\nloop invariant i'' >= 0;\nloop invariant n > 0;\nloop invariant m >= 0;\nloop invariant i' >= 0;\nloop invariant i'' >= 0;\nloop invariant 1 <= i <= n;\nloop invariant i == 2^k * i' for some 0 <= k <= log2(n);\nloop invariant i' == 3^j * i'' for some 0 <= j <= log3(n);\nloop invariant i'' >= 0;\nloop invariant n > 0;\nloop invariant m >= 0;\nloop invariant i' >= 0;\nloop invariant i'' >= 0;\nloop invariant 1 <= i <= n;\nloop invariant i == 2^k * i' for some 0 <= k <= log2(n);\nloop invariant i' == 3^j * i'' for some 0 <= j <= log3(n);\nloop invariant i'' >= 0;\nloop invariant n > 0;\nloop invariant m >= 0;\nloop invariant i' >= 0;\nloop invariant i'' >= 0;\nloop invariant 1 <= i <= n;\nloop invariant i == 2^k * i' for some 0 <= k <= log2(n);\nloop invariant i' == 3^j * i'' for some 0 <= j <= log3(n);\nloop invariant i'' >= 0;\nloop invariant n > 0;\nloop invariant m >= 0;\nloop invariant i' >= 0;\nloop invariant i'' >= 0;\nloop invariant 1 <= i <= n;\nloop invariant i == 2^k * i' for some 0 <= k <= log2(n);\nloop invariant i' == 3^j * i'' for some 0 <= j <= log3(n);\nloop invariant i'' >= 0;\nloop invariant n > 0;\nloop invariant m >= 0;\nloop invariant i' >= 0;\nloop invariant i'' >= 0;\nloop invariant 1 <= i <= n;\nloop invariant i == 2^k * i' for some 0 <= k <= log2(n);\nloop invariant i' == 3^j * i'' for some 0 <= j <= log3(n);\nloop invariant i'' >= 0;\nloop invariant n > 0;\nloop invariant m >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n  int n,m;\n  n = unknown ();\n  m = unknown ();\n  int i = 1;\n   \n  /*@\nloop invariant i1: 1 <= i <= n;\nloop invariant i2: i == 2^k * i' for some 0 <= k <= log2(n);\nloop invariant i3: i' == 3^j * i'' for some 0 <= j <= log3(n);\nloop invariant i4: i'' >= 0;\nloop invariant i5: n > 0;\nloop invariant i6: m >= 0;\nloop invariant i7: i' >= 0;\n*/\nwhile( i < n ) {\n    if( m > 0 ) {\n      i = 2*i;\n    } else {\n      i = 3*i;\n    }\n    \n  }\n  {;\n//@ assert(i > 0 );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= n;\nloop invariant 0 <= m;\nloop invariant 1 <= i <= n;\nloop invariant i == 2^k * j, where k is the number of times the loop has executed and j is an integer between 1 and n/2^k;\nloop invariant if m > 0 then i == 2^k * j, where k is the number of times the loop has executed and j is an integer between 1 and n/2^k;\nloop invariant if m <= 0 then i == 3^k * j, where k is the number of times the loop has executed and j is an integer between 1 and n/3^k;\nloop invariant if m > 0 then i == 2^k * j, where k is the number of times the loop has executed and j is an integer between 1 and n/2^k;\nloop invariant if m <= 0 then i == 3^k * j, where k is the number of times the loop has executed and j is an integer between 1 and n/3^k;\nloop invariant if m > 0 then i == 2^k * j, where k is the number of times the loop has executed and j is an integer between 1 and n/2^k;\nloop invariant if m <= 0 then i == 3^k * j, where k is the number of times the loop has executed and j is an integer between 1 and n/3^k;\nloop invariant if m > 0 then i == 2^k * j, where k is the number of times the loop has executed and j is an integer between 1 and n/2^k;\nloop invariant if m <= 0 then i == 3^k * j, where k is the number of times the loop has executed and j is an integer between 1 and n/3^k;\nloop invariant if m > 0 then i == 2^k * j, where k is the number of times the loop has executed and j is an integer between 1 and n/2^k;\nloop invariant if m <= 0 then i == 3^k * j, where k is the number of times the loop has executed and j is an integer between 1 and n/3^k;\nloop invariant if m > 0 then i == 2^k * j, where k is the number of times the loop has executed and j is an integer between 1 and n/2^k;\nloop invariant if m <= 0 then i == 3^k * j, where k is the number of times the loop has executed and j is an integer between 1 and n/3^k;\nloop invariant if m > 0 then i == 2^k * j, where k is the number of times the loop has executed and j is an integer between 1 and n/2^k;\nloop invariant if m <= 0 then i == 3^k * j, where k is the number of times the loop has executed and j is an integer between 1 and n/3^k;\nloop invariant if m > 0 then i == 2^k * j, where k is the number of times the loop has executed and j is an integer between 1 and n/2^k;\nloop invariant if m <= 0 then i == 3^k * j, where k is the number of times the loop has executed and j is an integer between 1 and n/3^k;\nloop invariant if m > 0 then i == 2^k * j, where k is the number of times the loop has executed and j is an integer between 1 and n/2^k;\nloop invariant if m <= 0 then i == 3^k * j, where k is the number of times the loop has executed and j is an integer between 1 and n/3^k;\nloop invariant if m > 0 then i == 2^k * j, where k is the number of times the loop has executed and j is an integer between 1 and n/2^k;\nloop invariant if m <= 0 then i == 3^k * j, where k is the number of times the loop has executed and j is an integer between 1 and n/3^k;\nloop invariant if m > 0 then i == 2^k * j, where k is the number of times the loop has executed and j is an integer between 1 and n/2^k;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n  int n,m;\n  n = unknown ();\n  m = unknown ();\n  int i = 1;\n   \n  /*@\n\n\n\n\n\n\n*/\nwhile( i < n ) {\n    if( m > 0 ) {\n      i = 2*i;\n    } else {\n      i = 3*i;\n    }\n    \n  }\n  {;\n//@ assert(i > 0 );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant i <= 2*i;\nloop invariant i <= 3*i;\nloop invariant i > 0;\nloop invariant i < n;\nloop invariant i < 2*i;\nloop invariant i < 3*i;\nloop invariant i > 0;\nloop invariant i < n;\nloop invariant i < 2*i;\nloop invariant i < 3*i;\nloop invariant i > 0;\nloop invariant i < n;\nloop invariant i < 2*i;\nloop invariant i < 3*i;\nloop invariant i > 0;\nloop invariant i < n;\nloop invariant i < 2*i;\nloop invariant i < 3*i;\nloop invariant i > 0;\nloop invariant i < n;\nloop invariant i < 2*i;\nloop invariant i < 3*i;\nloop invariant i > 0;\nloop invariant i < n;\nloop invariant i < 2*i;\nloop invariant i < 3*i;\nloop invariant i > 0;\nloop invariant i < n;\nloop invariant i < 2*i;\nloop invariant i < 3*i;\nloop invariant i > 0;\nloop invariant i < n;\nloop invariant i < 2*i;\nloop invariant i < 3*i;\nloop invariant i > 0;\nloop invariant i < n;\nloop invariant i < 2*i;\nloop invariant i < 3*i;\nloop invariant i > 0;\nloop invariant i < n;\nloop invariant i < 2*i;\nloop invariant i < 3*i;\nloop invariant i > 0;\nloop invariant i < n;\nloop invariant i < 2*i;\nloop invariant i < 3*i;\nloop invariant i > 0;\nloop invariant i < n;\nloop invariant i < 2*i;\nloop invariant i < 3*i;\nloop invariant i > 0;\nloop invariant i < n;\nloop invariant i < 2*i;\nloop invariant i < 3*i;\nloop invariant i > 0;\nloop invariant i < n;\nloop invariant i < 2*i;\nloop invariant i < 3*i;\nloop invariant i > 0;\nloop invariant i < n;\nloop invariant i < 2*i;\nloop invariant i < 3*i;\nloop invariant i > 0;\nloop invariant i < n;\nloop invariant i < 2*i;\nloop invariant i < 3*i;\nloop invariant i > 0;\nloop invariant i < n;\nloop invariant i < 2*i;\nloop invariant i < 3*i;\nloop invariant i > 0;\nloop invariant i < n;\nloop invariant i < 2*i;\nloop invariant i < 3*i;\nloop invariant i > 0;\nloop invariant i < n;\nloop invariant i < 2*i;\nloop invariant i < 3*i;\nloop invariant i > 0;\nloop invariant i < n;\nloop invariant i < 2*i;\nloop invariant i < 3*i;\nloop invariant i > 0;\nloop invariant i < n;\nloop invariant i < 2*i;\nloop invariant i < 3*i;\nloop invariant i > 0;\nloop invariant i < n;\nloop invariant i < 2*i;\nloop invariant i < 3*i;\nloop invariant i > 0;\nloop invariant i < n;\nloop invariant i < 2*i;\nloop invariant i < 3*i;\nloop invariant i > 0;\nloop invariant i < n;\nloop invariant i < 2*i;\nloop invariant i < 3*i;\nloop invariant i > 0;\nloop invariant i < n;\nloop invariant i < 2*i;\nloop invariant i < 3*i;\nloop invariant i > 0;\nloop invariant i < n;\nloop invariant i < 2*i;\nloop invariant i < 3*i;\nloop invariant i > 0;\nloop invariant i < n;\nloop invariant i < 2*i;\nloop invariant i < 3*i;\nloop invariant i > 0;\nloop invariant i < n;\nloop invariant i < 2*i;\nloop invariant i < 3*i;\nloop invariant i > 0;\nloop invariant i < n;\nloop invariant i < 2*i;\nloop invariant i < 3*i;\nloop invariant i > 0;\nloop invariant i < n;\nloop invariant i < 2*i;\nloop invariant i < 3*i;\nloop invariant i > 0;\nloop invariant i < n;\nloop invariant i < 2*i;\nloop invariant i < 3*i;\nloop invariant i > 0;\nloop invariant i < n;\nloop invariant i < 2*i;\nloop invariant i < 3*i;\nloop invariant i > 0;\nloop invariant i < n;\nloop invariant i < 2*i;\nloop invariant i < 3*i;\nloop invariant i > 0;\nloop invariant i < n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n  int n,m;\n  n = unknown ();\n  m = unknown ();\n  int i = 1;\n   \n  /*@\n\nloop invariant i2: i <= 2*i;\nloop invariant i3: i <= 3*i;\nloop invariant i4: i > 0;\n\nloop invariant i6: i < 2*i;\nloop invariant i7: i < 3*i;\n*/\nwhile( i < n ) {\n    if( m > 0 ) {\n      i = 2*i;\n    } else {\n      i = 3*i;\n    }\n    \n  }\n  {;\n//@ assert(i > 0 );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant n > 0;\nloop invariant m >= 0;\nloop invariant 1 <= i <= n;\nloop invariant if m > 0 then i = 2^k for some k;\nloop invariant else i = 3^k for some k;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n  int n,m;\n  n = unknown ();\n  m = unknown ();\n  int i = 1;\n   \n  /*@\n\n\n\n\n\n*/\nwhile( i < n ) {\n    if( m > 0 ) {\n      i = 2*i;\n    } else {\n      i = 3*i;\n    }\n    \n  }\n  {;\n//@ assert(i > 0 );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant i > 0;\nloop invariant i == 2*i ==> m <= 0;\nloop invariant i == 3*i ==> m > 0;\nloop invariant i == 2*i ==> i <= n;\nloop invariant i == 3*i ==> i <= n;\nloop invariant i == 2*i ==> i > 0;\nloop invariant i == 3*i ==> i > 0;\nloop invariant i == 2*i ==> m <= 0 ==> i <= n;\nloop invariant i == 3*i ==> m > 0 ==> i <= n;\nloop invariant i == 2*i ==> m <= 0 ==> i > 0;\nloop invariant i == 3*i ==> m > 0 ==> i > 0;\nloop invariant i == 2*i ==> m <= 0 ==> i <= n ==> i > 0;\nloop invariant i == 3*i ==> m > 0 ==> i <= n ==> i > 0;\nloop invariant i == 2*i ==> m <= 0 ==> i <= n ==> i > 0 ==> i == 2*i;\nloop invariant i == 3*i ==> m > 0 ==> i <= n ==> i > 0 ==> i == 3*i;\nloop invariant i == 2*i ==> m <= 0 ==> i <= n ==> i > 0 ==> i == 2*i ==> i == 3*i;\nloop invariant i == 3*i ==> m > 0 ==> i <= n ==> i > 0 ==> i == 3*i ==> i == 2*i;\nloop invariant i == 2*i ==> m <= 0 ==> i <= n ==> i > 0 ==> i == 2*i ==> i == 3*i ==> i == 2*i;\nloop invariant i == 3*i ==> m > 0 ==> i <= n ==> i > 0 ==> i == 3*i ==> i == 2*i ==> i == 3*i;\nloop invariant i == 2*i ==> m <= 0 ==> i <= n ==> i > 0 ==> i == 2*i ==> i == 3*i ==> i == 2*i ==> i == 3*i;\nloop invariant i == 3*i ==> m > 0 ==> i <= n ==> i > 0 ==> i == 3*i ==> i == 2*i ==> i == 3*i ==> i == 2*i;\nloop invariant i == 2*i ==> m <= 0 ==> i <= n ==> i > 0 ==> i == 2*i ==> i == 3*i ==> i == 2*i ==> i == 3*i ==> i == 2*i;\nloop invariant i == 3*i ==> m > 0 ==> i <= n ==> i > 0 ==> i == 3*i ==> i == 2*i ==> i == 3*i ==> i == 2*i ==> i == 3*i;\nloop invariant i == 2*i ==> m <= 0 ==> i <= n ==> i > 0 ==> i == 2*i ==> i == 3*i ==> i == 2*i ==> i == 3*i ==> i == 2*i ==> i == 3*i;\nloop invariant i == 3*i ==> m > 0 ==> i <= n ==> i > 0 ==> i == 3*i ==> i == 2*i ==> i == 3*i ==> i == 2*i ==> i == 3*i ==> i == 2*i;\nloop invariant i == 2*i ==> m <= 0 ==> i <= n ==> i > 0 ==> i == 2*i ==> i == 3*i ==> i == 2*i ==> i == 3*i ==> i == 2*i ==> i == 3*i ==> i == 2*i;\nloop invariant i == 3*i ==> m > 0 ==> i <= n ==> i > 0 ==> i == 3*i ==> i == 2*i ==> i == 3*i ==> i == 2*i ==> i == 3*i ==> i == 2*i ==> i == 3*i;\nloop invariant i == 2*i ==> m <= 0 ==> i <= n ==> i > 0 ==> i == 2*i ==> i == 3*i ==> i == 2*i ==> i == 3*i ==> i == 2*i ==> i == 3*i ==> i == 2*i ==> i == 3*i;\nloop invariant i == 3*i ==> m > 0 ==> i <= n ==> i > 0 ==> i == 3*i ==> i == 2*i ==> i == 3*i ==> i == 2*i ==> i == 3*i ==> i == 2*i ==> i == 3*i ==> i == 2*i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n  int n,m;\n  n = unknown ();\n  m = unknown ();\n  int i = 1;\n   \n  /*@\n\nloop invariant i2: i > 0;\nloop invariant i3: i == 2*i ==> m <= 0;\nloop invariant i4: i == 3*i ==> m > 0;\nloop invariant i5: i == 2*i ==> i <= n;\nloop invariant i6: i == 3*i ==> i <= n;\nloop invariant i7: i == 2*i ==> i > 0;\nloop invariant i8: i == 3*i ==> i > 0;\nloop invariant i9: i == 2*i ==> m <= 0 ==> i <= n;\nloop invariant i10: i == 3*i ==> m > 0 ==> i <= n;\nloop invariant i11: i == 2*i ==> m <= 0 ==> i > 0;\nloop invariant i12: i == 3*i ==> m > 0 ==> i > 0;\nloop invariant i13: i == 2*i ==> m <= 0 ==> i <= n ==> i > 0;\nloop invariant i14: i == 3*i ==> m > 0 ==> i <= n ==> i > 0;\nloop invariant i15: i == 2*i ==> m <= 0 ==> i <= n ==> i > 0 ==> i == 2*i;\nloop invariant i16: i == 3*i ==> m > 0 ==> i <= n ==> i > 0 ==> i == 3*i;\nloop invariant i17: i == 2*i ==> m <= 0 ==> i <= n ==> i > 0 ==> i == 2*i ==> i == 3*i;\nloop invariant i18: i == 3*i ==> m > 0 ==> i <= n ==> i > 0 ==> i == 3*i ==> i == 2*i;\nloop invariant i19: i == 2*i ==> m <= 0 ==> i <= n ==> i > 0 ==> i == 2*i ==> i == 3*i ==> i == 2*i;\nloop invariant i20: i == 3*i ==> m > 0 ==> i <= n ==> i > 0 ==> i == 3*i ==> i == 2*i ==> i == 3*i;\nloop invariant i21: i == 2*i ==> m <= 0 ==> i <= n ==> i > 0 ==> i == 2*i ==> i == 3*i ==> i == 2*i ==> i == 3*i;\nloop invariant i22: i == 3*i ==> m > 0 ==> i <= n ==> i > 0 ==> i == 3*i ==> i == 2*i ==> i == 3*i ==> i == 2*i;\nloop invariant i23: i == 2*i ==> m <= 0 ==> i <= n ==> i > 0 ==> i == 2*i ==> i == 3*i ==> i == 2*i ==> i == 3*i ==> i == 2*i;\nloop invariant i24: i == 3*i ==> m > 0 ==> i <= n ==> i > 0 ==> i == 3*i ==> i == 2*i ==> i == 3*i ==> i == 2*i ==> i == 3*i;\nloop invariant i25: i == 2*i ==> m <= 0 ==> i <= n ==> i > 0 ==> i == 2*i ==> i == 3*i ==> i == 2*i ==> i == 3*i ==> i == 2*i ==> i == 3*i;\nloop invariant i26: i == 3*i ==> m > 0 ==> i <= n ==> i > 0 ==> i == 3*i ==> i == 2*i ==> i == 3*i ==> i == 2*i ==> i == 3*i ==> i == 2*i;\nloop invariant i27: i == 2*i ==> m <= 0 ==> i <= n ==> i > 0 ==> i == 2*i ==> i == 3*i ==> i == 2*i ==> i == 3*i ==> i == 2*i ==> i == 3*i ==> i == 2*i;\nloop invariant i28: i == 3*i ==> m > 0 ==> i <= n ==> i > 0 ==> i == 3*i ==> i == 2*i ==> i == 3*i ==> i == 2*i ==> i == 3*i ==> i == 2*i ==> i == 3*i;\nloop invariant i29: i == 2*i ==> m <= 0 ==> i <= n ==> i > 0 ==> i == 2*i ==> i == 3*i ==> i == 2*i ==> i == 3*i ==> i == 2*i ==> i == 3*i ==> i == 2*i ==> i == 3*i;\nloop invariant i30: i == 3*i ==> m > 0 ==> i <= n ==> i > 0 ==> i == 3*i ==> i == 2*i ==> i == 3*i ==> i == 2*i ==> i == 3*i ==> i == 2*i ==> i == 3*i ==> i == 2*i;\n*/\nwhile( i < n ) {\n    if( m > 0 ) {\n      i = 2*i;\n    } else {\n      i = 3*i;\n    }\n    \n  }\n  {;\n//@ assert(i > 0 );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 120,
                "annotations": "```\n/*@\nloop invariant 0 < i <= n;\nloop invariant (i % 2) == (m > 0 ? 0 : 1);\nloop invariant (i % 3) == (m <= 0 ? 0 : 1);\nloop invariant i > 1;\nloop invariant i < n;\nloop invariant i >= 1;\nloop invariant i <= 2;\nloop invariant i >= 3;\nloop invariant i <= 3;\nloop invariant i >= 4;\nloop invariant i <= 4;\nloop invariant i >= 5;\nloop invariant i <= 5;\nloop invariant i >= 6;\nloop invariant i <= 6;\nloop invariant i >= 7;\nloop invariant i <= 7;\nloop invariant i >= 8;\nloop invariant i <= 8;\nloop invariant i >= 9;\nloop invariant i <= 9;\nloop invariant i >= 10;\nloop invariant i <= 10;\nloop invariant i >= 11;\nloop invariant i <= 11;\nloop invariant i >= 12;\nloop invariant i <= 12;\nloop invariant i >= 13;\nloop invariant i <= 13;\nloop invariant i >= 14;\nloop invariant i <= 14;\nloop invariant i >= 15;\nloop invariant i <= 15;\nloop invariant i >= 16;\nloop invariant i <= 16;\nloop invariant i >= 17;\nloop invariant i <= 17;\nloop invariant i >= 18;\nloop invariant i <= 18;\nloop invariant i >= 19;\nloop invariant i <= 19;\nloop invariant i >= 20;\nloop invariant i <= 20;\nloop invariant i >= 21;\nloop invariant i <= 21;\nloop invariant i >= 22;\nloop invariant i <= 22;\nloop invariant i >= 23;\nloop invariant i <= 23;\nloop invariant i >= 24;\nloop invariant i <= 24;\nloop invariant i >= 25;\nloop invariant i <= 25;\nloop invariant i >= 26;\nloop invariant i <= 26;\nloop invariant i >= 27;\nloop invariant i <= 27;\nloop invariant i >= 28;\nloop invariant i <= 28;\nloop invariant i >= 29;\nloop invariant i <= 29;\nloop invariant i >= 30;\nloop invariant i <= 30;\nloop invariant i >= 31;\nloop invariant i <= 31;\nloop invariant i >= 32;\nloop invariant i <= 32;\nloop invariant i >= 33;\nloop invariant i <= 33;\nloop invariant i >= 34;\nloop invariant i <= 34;\nloop invariant i >= 35;\nloop invariant i <= 35;\nloop invariant i >= 36;\nloop invariant i <= 36;\nloop invariant i >= 37;\nloop invariant i <= 37;\nloop invariant i >= 38;\nloop invariant i <= 38;\nloop invariant i >= 39;\nloop invariant i <= 39;\nloop invariant i >= 40;\nloop invariant i <= 40;\nloop invariant i >= 41;\nloop invariant i <= 41;\nloop invariant i >= 42;\nloop invariant i <= 42;\nloop invariant i >= 43;\nloop invariant i <= 43;\nloop invariant i >= 44;\nloop invariant i <= 44;\nloop invariant i >= 45;\nloop invariant i <= 45;\nloop invariant i >= 46;\nloop invariant i <= 46;\nloop invariant i >= 47;\nloop invariant i <= 47;\nloop invariant i >= 48;\nloop invariant i <= 48;\nloop invariant i >= 49;\nloop invariant i <= 49;\nloop invariant i >= 50;\nloop invariant i <= 50;\nloop invariant i >= 51;\nloop invariant i <= 51;\nloop invariant i >= 52;\nloop invariant i <= 52;\nloop invariant i >= 53;\nloop invariant i <= 53;\nloop invariant i >= 54;\nloop invariant i <= 54;\nloop invariant i >= 55;\nloop invariant i <= 55;\nloop invariant i >= 56;\nloop invariant i <= 56;\nloop invariant i >= 57;\nloop invariant i <= 57;\nloop invariant i >= 58;\nloop invariant i <= 58;\nloop invariant i >= 59;\nloop invariant i <= 59;\nloop invariant i >= 60;\nloop invariant i <= 60;\nloop invariant i >= 61;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n  int n,m;\n  n = unknown ();\n  m = unknown ();\n  int i = 1;\n   \n  /*@\n\n\n\n\n\nloop invariant i6: i >= 1;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile( i < n ) {\n    if( m > 0 ) {\n      i = 2*i;\n    } else {\n      i = 3*i;\n    }\n    \n  }\n  {;\n//@ assert(i > 0 );\n}\n\n}",
                "checker_output_after_prune": true
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "No CSV output dump found from Frama-C",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n  int n,m;\n  n = unknown ();\n  m = unknown ();\n  int i = 1;\n   \n  /*@\nloop invariant i1: 0 < n;\nloop invariant i2: i > 0;\nloop invariant i3: i < n;\nloop invariant i4: i == 2^m * i_0, where i_0 is the initial value of i;\nloop invariant i5: i_0 == 1;\nloop invariant i6: m <= floor(log_2(n-1));\nloop invariant i7: m >= 0;\nloop invariant i8: i_0 == 1 ==> m == 0;\nloop invariant i9: i_0 == 1 ==> m == 0 ==> i == n;\nloop invariant i10: m > 0 ==> i == 2^m;\nloop invariant i11: m > 0 ==> i == 2^m ==> i > 0;\nloop invariant i12: m > 0 ==> i == 2^m ==> i < n;\nloop invariant i13: m > 0 ==> i == 2^m ==> i == 2^m * i_0;\nloop invariant i14: m > 0 ==> i == 2^m ==> i_0 == 1;\nloop invariant i15: m > 0 ==> i == 2^m ==> m == log_2(i);\nloop invariant i16: i >= 1;\nloop invariant i17: ((m > 0) ==> (i <= 2^n)) && ((m <= 0) ==> (i <= 3^n));\nloop invariant i18: ((m > 0) ==> (i >= 2^(n-1))) && ((m <= 0) ==> (i >= 3^(n-1)));\nloop invariant i19: ((m > 0) ==> (i <= 2^(n-1))) && ((m <= 0) ==> (i <= 3^(n-1)));\nloop invariant i20: ((m > 0) ==> (i <= 2^(n-2))) && ((m <= 0) ==> (i <= 3^(n-2)));\nloop invariant i21: ((m > 0) ==> (i >= 2^(n-2))) && ((m <= 0) ==> (i >= 3^(n-2)));\nloop invariant i22: ((m > 0) ==> (i <= 2^(n-3))) && ((m <= 0) ==> (i <= 3^(n-3)));\nloop invariant i23: ((m > 0) ==> (i >= 2^(n-3))) && ((m <= 0) ==> (i >= 3^(n-3)));\nloop invariant i24: ((m > 0) ==> (i <= 2^(n-4))) && ((m <= 0) ==> (i <= 3^(n-4)));\nloop invariant i25: ((m > 0) ==> (i >= 2^(n-4))) && ((m <= 0) ==> (i >= 3^(n-4)));\nloop invariant i26: ((m > 0) ==> (i <= 2^(n-5))) && ((m <= 0) ==> (i <= 3^(n-5)));\nloop invariant i27: ((m > 0) ==> (i >= 2^(n-5))) && ((m <= 0) ==> (i >= 3^(n-5)));\nloop invariant i28: ((m > 0) ==> (i <= 2^(n-6))) && ((m <= 0) ==> (i <= 3^(n-6)));\nloop invariant i29: ((m > 0) ==> (i >= 2^(n-6))) && ((m <= 0) ==> (i >= 3^(n-6)));\nloop invariant i30: ((m > 0) ==> (i <= 2^(n-7))) && ((m <= 0) ==> (i <= 3^(n-7)));\nloop invariant i31: ((m > 0) ==> (i >= 2^(n-7))) && ((m <= 0) ==> (i >= 3^(n-7)));\nloop invariant i32: ((m > 0) ==> (i <= 2^(n-8))) && ((m <= 0) ==> (i <= 3^(n-8)));\nloop invariant i33: ((m > 0) ==> (i >= 2^(n-8))) && ((m <= 0) ==> (i >= 3^(n-8)));\nloop invariant i34: ((m > 0) ==> (i <= 2^(n-9))) && ((m <= 0) ==> (i <= 3^(n-9)));\nloop invariant i35: ((m > 0) ==> (i >= 2^(n-9))) && ((m <= 0) ==> (i >= 3^(n-9)));\nloop invariant i36: ((m > 0) ==> (i <= 2^(n-10))) && ((m <= 0) ==> (i <= 3^(n-10)));\nloop invariant i37: ((m > 0) ==> (i >= 2^(n-10))) && ((m <= 0) ==> (i >= 3^(n-10)));\nloop invariant i38: ((m > 0) ==> (i <= 2^(n-11))) && ((m <= 0) ==> (i <= 3^(n-11)));\nloop invariant i39: ((m > 0) ==> (i >= 2^(n-11))) && ((m <= 0) ==> (i >= 3^(n-11)));\nloop invariant i40: ((m > 0) ==> (i <= 2^(n-12))) && ((m <= 0) ==> (i <= 3^(n-12)));\nloop invariant i41: ((m > 0) ==> (i >= 2^(n-12))) && ((m <= 0) ==> (i >= 3^(n-12)));\nloop invariant i42: 0 < i <= n;\nloop invariant i43: if m > 0 then i = 2^k for some k else i = 3^k for some k;\nloop invariant i44: i <= n * 2;\nloop invariant i45: i <= n * 3;\nloop invariant i46: i % 2 == 0 || i % 3 == 0;\nloop invariant i47: 1 <= i <= n;\nloop invariant i48: (if m > 0 then i = 2^k else i = 3^k) ==> k >= 0;\nloop invariant i49: (i = 2^k) ==> k >= 0;\nloop invariant i50: (i = 3^k) ==> k >= 0;\nloop invariant i51: 1 <= i <= 2^(n+1);\nloop invariant i52: m < 0 ==> i <= 3^(n+1);\nloop invariant i53: m > 0 ==> i <= 2^(n+1);\nloop invariant i54: m < 0 ==> i > 0;\nloop invariant i55: m > 0 ==> i > 0;\nloop invariant i56: m < 0 ==> i > 3^(n+1);\nloop invariant i57: m > 0 ==> i > 2^(n+1);\nloop invariant i58: 1 <= n;\nloop invariant i59: 0 <= m;\nloop invariant i60: (if i < n then m > 0 ==> i * 2 <= n else m <= 0 ==> i * 3 <= n);\nloop invariant i61: 0 <= i <= n;\nloop invariant i62: m >= 0 ==> i <= 2^(n-1);\nloop invariant i63: m < 0 ==> i <= 3^(n-1);\nloop invariant i64: 0 <= i < n;\nloop invariant i65: i > 1;\nloop invariant i66: i == 2^k * i' for some 0 <= k <= log2(n);\nloop invariant i67: i' == 3^j * i'' for some 0 <= j <= log3(n);\nloop invariant i68: i'' >= 0;\nloop invariant i69: n > 0;\nloop invariant i70: i' >= 0;\nloop invariant i71: 0 <= n;\nloop invariant i72: i == 2^k * j, where k is the number of times the loop has executed and j is an integer between 1 and n/2^k;\nloop invariant i73: if m > 0 then i == 2^k * j, where k is the number of times the loop has executed and j is an integer between 1 and n/2^k;\nloop invariant i74: if m <= 0 then i == 3^k * j, where k is the number of times the loop has executed and j is an integer between 1 and n/3^k;\nloop invariant i75: i <= 2*i;\nloop invariant i76: i <= 3*i;\nloop invariant i77: i < 2*i;\nloop invariant i78: i < 3*i;\nloop invariant i79: if m > 0 then i = 2^k for some k;\nloop invariant i80: else i = 3^k for some k;\nloop invariant i81: i == 2*i ==> m <= 0;\nloop invariant i82: i == 3*i ==> m > 0;\nloop invariant i83: i == 2*i ==> i <= n;\nloop invariant i84: i == 3*i ==> i <= n;\nloop invariant i85: i == 2*i ==> i > 0;\nloop invariant i86: i == 3*i ==> i > 0;\nloop invariant i87: i == 2*i ==> m <= 0 ==> i <= n;\nloop invariant i88: i == 3*i ==> m > 0 ==> i <= n;\nloop invariant i89: i == 2*i ==> m <= 0 ==> i > 0;\nloop invariant i90: i == 3*i ==> m > 0 ==> i > 0;\nloop invariant i91: i == 2*i ==> m <= 0 ==> i <= n ==> i > 0;\nloop invariant i92: i == 3*i ==> m > 0 ==> i <= n ==> i > 0;\nloop invariant i93: i == 2*i ==> m <= 0 ==> i <= n ==> i > 0 ==> i == 2*i;\nloop invariant i94: i == 3*i ==> m > 0 ==> i <= n ==> i > 0 ==> i == 3*i;\nloop invariant i95: i == 2*i ==> m <= 0 ==> i <= n ==> i > 0 ==> i == 2*i ==> i == 3*i;\nloop invariant i96: i == 3*i ==> m > 0 ==> i <= n ==> i > 0 ==> i == 3*i ==> i == 2*i;\nloop invariant i97: i == 2*i ==> m <= 0 ==> i <= n ==> i > 0 ==> i == 2*i ==> i == 3*i ==> i == 2*i;\nloop invariant i98: i == 3*i ==> m > 0 ==> i <= n ==> i > 0 ==> i == 3*i ==> i == 2*i ==> i == 3*i;\nloop invariant i99: i == 2*i ==> m <= 0 ==> i <= n ==> i > 0 ==> i == 2*i ==> i == 3*i ==> i == 2*i ==> i == 3*i;\nloop invariant i100: i == 3*i ==> m > 0 ==> i <= n ==> i > 0 ==> i == 3*i ==> i == 2*i ==> i == 3*i ==> i == 2*i;\nloop invariant i101: i == 2*i ==> m <= 0 ==> i <= n ==> i > 0 ==> i == 2*i ==> i == 3*i ==> i == 2*i ==> i == 3*i ==> i == 2*i;\nloop invariant i102: i == 3*i ==> m > 0 ==> i <= n ==> i > 0 ==> i == 3*i ==> i == 2*i ==> i == 3*i ==> i == 2*i ==> i == 3*i;\nloop invariant i103: i == 2*i ==> m <= 0 ==> i <= n ==> i > 0 ==> i == 2*i ==> i == 3*i ==> i == 2*i ==> i == 3*i ==> i == 2*i ==> i == 3*i;\nloop invariant i104: i == 3*i ==> m > 0 ==> i <= n ==> i > 0 ==> i == 3*i ==> i == 2*i ==> i == 3*i ==> i == 2*i ==> i == 3*i ==> i == 2*i;\nloop invariant i105: i == 2*i ==> m <= 0 ==> i <= n ==> i > 0 ==> i == 2*i ==> i == 3*i ==> i == 2*i ==> i == 3*i ==> i == 2*i ==> i == 3*i ==> i == 2*i;\nloop invariant i106: i == 3*i ==> m > 0 ==> i <= n ==> i > 0 ==> i == 3*i ==> i == 2*i ==> i == 3*i ==> i == 2*i ==> i == 3*i ==> i == 2*i ==> i == 3*i;\nloop invariant i107: i == 2*i ==> m <= 0 ==> i <= n ==> i > 0 ==> i == 2*i ==> i == 3*i ==> i == 2*i ==> i == 3*i ==> i == 2*i ==> i == 3*i ==> i == 2*i ==> i == 3*i;\nloop invariant i108: i == 3*i ==> m > 0 ==> i <= n ==> i > 0 ==> i == 3*i ==> i == 2*i ==> i == 3*i ==> i == 2*i ==> i == 3*i ==> i == 2*i ==> i == 3*i ==> i == 2*i;\nloop invariant i109: (i % 2) == (m > 0 ? 0 : 1);\nloop invariant i110: (i % 3) == (m <= 0 ? 0 : 1);\nloop invariant i111: i <= 2;\nloop invariant i112: i >= 3;\nloop invariant i113: i <= 3;\nloop invariant i114: i >= 4;\nloop invariant i115: i <= 4;\nloop invariant i116: i >= 5;\nloop invariant i117: i <= 5;\nloop invariant i118: i >= 6;\nloop invariant i119: i <= 6;\nloop invariant i120: i >= 7;\nloop invariant i121: i <= 7;\nloop invariant i122: i >= 8;\nloop invariant i123: i <= 8;\nloop invariant i124: i >= 9;\nloop invariant i125: i <= 9;\nloop invariant i126: i >= 10;\nloop invariant i127: i <= 10;\nloop invariant i128: i >= 11;\nloop invariant i129: i <= 11;\nloop invariant i130: i >= 12;\nloop invariant i131: i <= 12;\nloop invariant i132: i >= 13;\nloop invariant i133: i <= 13;\nloop invariant i134: i >= 14;\nloop invariant i135: i <= 14;\nloop invariant i136: i >= 15;\nloop invariant i137: i <= 15;\nloop invariant i138: i >= 16;\nloop invariant i139: i <= 16;\nloop invariant i140: i >= 17;\nloop invariant i141: i <= 17;\nloop invariant i142: i >= 18;\nloop invariant i143: i <= 18;\nloop invariant i144: i >= 19;\nloop invariant i145: i <= 19;\nloop invariant i146: i >= 20;\nloop invariant i147: i <= 20;\nloop invariant i148: i >= 21;\nloop invariant i149: i <= 21;\nloop invariant i150: i >= 22;\nloop invariant i151: i <= 22;\nloop invariant i152: i >= 23;\nloop invariant i153: i <= 23;\nloop invariant i154: i >= 24;\nloop invariant i155: i <= 24;\nloop invariant i156: i >= 25;\nloop invariant i157: i <= 25;\nloop invariant i158: i >= 26;\nloop invariant i159: i <= 26;\nloop invariant i160: i >= 27;\nloop invariant i161: i <= 27;\nloop invariant i162: i >= 28;\nloop invariant i163: i <= 28;\nloop invariant i164: i >= 29;\nloop invariant i165: i <= 29;\nloop invariant i166: i >= 30;\nloop invariant i167: i <= 30;\nloop invariant i168: i >= 31;\nloop invariant i169: i <= 31;\nloop invariant i170: i >= 32;\nloop invariant i171: i <= 32;\nloop invariant i172: i >= 33;\nloop invariant i173: i <= 33;\nloop invariant i174: i >= 34;\nloop invariant i175: i <= 34;\nloop invariant i176: i >= 35;\nloop invariant i177: i <= 35;\nloop invariant i178: i >= 36;\nloop invariant i179: i <= 36;\nloop invariant i180: i >= 37;\nloop invariant i181: i <= 37;\nloop invariant i182: i >= 38;\nloop invariant i183: i <= 38;\nloop invariant i184: i >= 39;\nloop invariant i185: i <= 39;\nloop invariant i186: i >= 40;\nloop invariant i187: i <= 40;\nloop invariant i188: i >= 41;\nloop invariant i189: i <= 41;\nloop invariant i190: i >= 42;\nloop invariant i191: i <= 42;\nloop invariant i192: i >= 43;\nloop invariant i193: i <= 43;\nloop invariant i194: i >= 44;\nloop invariant i195: i <= 44;\nloop invariant i196: i >= 45;\nloop invariant i197: i <= 45;\nloop invariant i198: i >= 46;\nloop invariant i199: i <= 46;\nloop invariant i200: i >= 47;\nloop invariant i201: i <= 47;\nloop invariant i202: i >= 48;\nloop invariant i203: i <= 48;\nloop invariant i204: i >= 49;\nloop invariant i205: i <= 49;\nloop invariant i206: i >= 50;\nloop invariant i207: i <= 50;\nloop invariant i208: i >= 51;\nloop invariant i209: i <= 51;\nloop invariant i210: i >= 52;\nloop invariant i211: i <= 52;\nloop invariant i212: i >= 53;\nloop invariant i213: i <= 53;\nloop invariant i214: i >= 54;\nloop invariant i215: i <= 54;\nloop invariant i216: i >= 55;\nloop invariant i217: i <= 55;\nloop invariant i218: i >= 56;\nloop invariant i219: i <= 56;\nloop invariant i220: i >= 57;\nloop invariant i221: i <= 57;\nloop invariant i222: i >= 58;\nloop invariant i223: i <= 58;\nloop invariant i224: i >= 59;\nloop invariant i225: i <= 59;\nloop invariant i226: i >= 60;\nloop invariant i227: i <= 60;\nloop invariant i228: i >= 61;\n*/\nwhile( i < n ) {\n    if( m > 0 ) {\n      i = 2*i;\n    } else {\n      i = 3*i;\n    }\n    \n  }\n  {;\n//@ assert(i > 0 );\n}\n\n}",
        "combined_annotation_num_solver_calls": 2,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n  int n,m;\n  n = unknown ();\n  m = unknown ();\n  int i = 1;\n   \n  /*@\nloop invariant i1: 0 < n;\nloop invariant i2: i > 0;\nloop invariant i3: i < n;\nloop invariant i4: i == 2^m * i_0, where i_0 is the initial value of i;\nloop invariant i5: i_0 == 1;\nloop invariant i6: m <= floor(log_2(n-1));\nloop invariant i7: m >= 0;\nloop invariant i8: i_0 == 1 ==> m == 0;\nloop invariant i9: i_0 == 1 ==> m == 0 ==> i == n;\nloop invariant i10: m > 0 ==> i == 2^m;\nloop invariant i11: m > 0 ==> i == 2^m ==> i > 0;\nloop invariant i12: m > 0 ==> i == 2^m ==> i < n;\nloop invariant i13: m > 0 ==> i == 2^m ==> i == 2^m * i_0;\nloop invariant i14: m > 0 ==> i == 2^m ==> i_0 == 1;\nloop invariant i15: m > 0 ==> i == 2^m ==> m == log_2(i);\nloop invariant i16: i >= 1;\nloop invariant i17: ((m > 0) ==> (i <= 2^n)) && ((m <= 0) ==> (i <= 3^n));\nloop invariant i18: ((m > 0) ==> (i >= 2^(n-1))) && ((m <= 0) ==> (i >= 3^(n-1)));\nloop invariant i19: ((m > 0) ==> (i <= 2^(n-1))) && ((m <= 0) ==> (i <= 3^(n-1)));\nloop invariant i20: ((m > 0) ==> (i <= 2^(n-2))) && ((m <= 0) ==> (i <= 3^(n-2)));\nloop invariant i21: ((m > 0) ==> (i >= 2^(n-2))) && ((m <= 0) ==> (i >= 3^(n-2)));\nloop invariant i22: ((m > 0) ==> (i <= 2^(n-3))) && ((m <= 0) ==> (i <= 3^(n-3)));\nloop invariant i23: ((m > 0) ==> (i >= 2^(n-3))) && ((m <= 0) ==> (i >= 3^(n-3)));\nloop invariant i24: ((m > 0) ==> (i <= 2^(n-4))) && ((m <= 0) ==> (i <= 3^(n-4)));\nloop invariant i25: ((m > 0) ==> (i >= 2^(n-4))) && ((m <= 0) ==> (i >= 3^(n-4)));\nloop invariant i26: ((m > 0) ==> (i <= 2^(n-5))) && ((m <= 0) ==> (i <= 3^(n-5)));\nloop invariant i27: ((m > 0) ==> (i >= 2^(n-5))) && ((m <= 0) ==> (i >= 3^(n-5)));\nloop invariant i28: ((m > 0) ==> (i <= 2^(n-6))) && ((m <= 0) ==> (i <= 3^(n-6)));\nloop invariant i29: ((m > 0) ==> (i >= 2^(n-6))) && ((m <= 0) ==> (i >= 3^(n-6)));\nloop invariant i30: ((m > 0) ==> (i <= 2^(n-7))) && ((m <= 0) ==> (i <= 3^(n-7)));\nloop invariant i31: ((m > 0) ==> (i >= 2^(n-7))) && ((m <= 0) ==> (i >= 3^(n-7)));\nloop invariant i32: ((m > 0) ==> (i <= 2^(n-8))) && ((m <= 0) ==> (i <= 3^(n-8)));\nloop invariant i33: ((m > 0) ==> (i >= 2^(n-8))) && ((m <= 0) ==> (i >= 3^(n-8)));\nloop invariant i34: ((m > 0) ==> (i <= 2^(n-9))) && ((m <= 0) ==> (i <= 3^(n-9)));\nloop invariant i35: ((m > 0) ==> (i >= 2^(n-9))) && ((m <= 0) ==> (i >= 3^(n-9)));\nloop invariant i36: ((m > 0) ==> (i <= 2^(n-10))) && ((m <= 0) ==> (i <= 3^(n-10)));\nloop invariant i37: ((m > 0) ==> (i >= 2^(n-10))) && ((m <= 0) ==> (i >= 3^(n-10)));\nloop invariant i38: ((m > 0) ==> (i <= 2^(n-11))) && ((m <= 0) ==> (i <= 3^(n-11)));\nloop invariant i39: ((m > 0) ==> (i >= 2^(n-11))) && ((m <= 0) ==> (i >= 3^(n-11)));\nloop invariant i40: ((m > 0) ==> (i <= 2^(n-12))) && ((m <= 0) ==> (i <= 3^(n-12)));\nloop invariant i41: ((m > 0) ==> (i >= 2^(n-12))) && ((m <= 0) ==> (i >= 3^(n-12)));\nloop invariant i42: 0 < i <= n;\nloop invariant i43: if m > 0 then i = 2^k for some k else i = 3^k for some k;\nloop invariant i44: i <= n * 2;\nloop invariant i45: i <= n * 3;\nloop invariant i46: i % 2 == 0 || i % 3 == 0;\nloop invariant i47: 1 <= i <= n;\nloop invariant i48: (if m > 0 then i = 2^k else i = 3^k) ==> k >= 0;\nloop invariant i49: (i = 2^k) ==> k >= 0;\nloop invariant i50: (i = 3^k) ==> k >= 0;\nloop invariant i51: 1 <= i <= 2^(n+1);\nloop invariant i52: m < 0 ==> i <= 3^(n+1);\nloop invariant i53: m > 0 ==> i <= 2^(n+1);\nloop invariant i54: m < 0 ==> i > 0;\nloop invariant i55: m > 0 ==> i > 0;\nloop invariant i56: m < 0 ==> i > 3^(n+1);\nloop invariant i57: m > 0 ==> i > 2^(n+1);\nloop invariant i58: 1 <= n;\nloop invariant i59: 0 <= m;\nloop invariant i60: (if i < n then m > 0 ==> i * 2 <= n else m <= 0 ==> i * 3 <= n);\nloop invariant i61: 0 <= i <= n;\nloop invariant i62: m >= 0 ==> i <= 2^(n-1);\nloop invariant i63: m < 0 ==> i <= 3^(n-1);\nloop invariant i64: 0 <= i < n;\nloop invariant i65: i > 1;\nloop invariant i66: i == 2^k * i' for some 0 <= k <= log2(n);\nloop invariant i67: i' == 3^j * i'' for some 0 <= j <= log3(n);\nloop invariant i68: i'' >= 0;\nloop invariant i69: n > 0;\nloop invariant i70: i' >= 0;\nloop invariant i71: 0 <= n;\nloop invariant i72: i == 2^k * j, where k is the number of times the loop has executed and j is an integer between 1 and n/2^k;\nloop invariant i73: if m > 0 then i == 2^k * j, where k is the number of times the loop has executed and j is an integer between 1 and n/2^k;\nloop invariant i74: if m <= 0 then i == 3^k * j, where k is the number of times the loop has executed and j is an integer between 1 and n/3^k;\nloop invariant i75: i <= 2*i;\nloop invariant i76: i <= 3*i;\nloop invariant i77: i < 2*i;\nloop invariant i78: i < 3*i;\nloop invariant i79: if m > 0 then i = 2^k for some k;\nloop invariant i80: else i = 3^k for some k;\nloop invariant i81: i == 2*i ==> m <= 0;\nloop invariant i82: i == 3*i ==> m > 0;\nloop invariant i83: i == 2*i ==> i <= n;\nloop invariant i84: i == 3*i ==> i <= n;\nloop invariant i85: i == 2*i ==> i > 0;\nloop invariant i86: i == 3*i ==> i > 0;\nloop invariant i87: i == 2*i ==> m <= 0 ==> i <= n;\nloop invariant i88: i == 3*i ==> m > 0 ==> i <= n;\nloop invariant i89: i == 2*i ==> m <= 0 ==> i > 0;\nloop invariant i90: i == 3*i ==> m > 0 ==> i > 0;\nloop invariant i91: i == 2*i ==> m <= 0 ==> i <= n ==> i > 0;\nloop invariant i92: i == 3*i ==> m > 0 ==> i <= n ==> i > 0;\nloop invariant i93: i == 2*i ==> m <= 0 ==> i <= n ==> i > 0 ==> i == 2*i;\nloop invariant i94: i == 3*i ==> m > 0 ==> i <= n ==> i > 0 ==> i == 3*i;\nloop invariant i95: i == 2*i ==> m <= 0 ==> i <= n ==> i > 0 ==> i == 2*i ==> i == 3*i;\nloop invariant i96: i == 3*i ==> m > 0 ==> i <= n ==> i > 0 ==> i == 3*i ==> i == 2*i;\nloop invariant i97: i == 2*i ==> m <= 0 ==> i <= n ==> i > 0 ==> i == 2*i ==> i == 3*i ==> i == 2*i;\nloop invariant i98: i == 3*i ==> m > 0 ==> i <= n ==> i > 0 ==> i == 3*i ==> i == 2*i ==> i == 3*i;\nloop invariant i99: i == 2*i ==> m <= 0 ==> i <= n ==> i > 0 ==> i == 2*i ==> i == 3*i ==> i == 2*i ==> i == 3*i;\nloop invariant i100: i == 3*i ==> m > 0 ==> i <= n ==> i > 0 ==> i == 3*i ==> i == 2*i ==> i == 3*i ==> i == 2*i;\nloop invariant i101: i == 2*i ==> m <= 0 ==> i <= n ==> i > 0 ==> i == 2*i ==> i == 3*i ==> i == 2*i ==> i == 3*i ==> i == 2*i;\nloop invariant i102: i == 3*i ==> m > 0 ==> i <= n ==> i > 0 ==> i == 3*i ==> i == 2*i ==> i == 3*i ==> i == 2*i ==> i == 3*i;\nloop invariant i103: i == 2*i ==> m <= 0 ==> i <= n ==> i > 0 ==> i == 2*i ==> i == 3*i ==> i == 2*i ==> i == 3*i ==> i == 2*i ==> i == 3*i;\nloop invariant i104: i == 3*i ==> m > 0 ==> i <= n ==> i > 0 ==> i == 3*i ==> i == 2*i ==> i == 3*i ==> i == 2*i ==> i == 3*i ==> i == 2*i;\nloop invariant i105: i == 2*i ==> m <= 0 ==> i <= n ==> i > 0 ==> i == 2*i ==> i == 3*i ==> i == 2*i ==> i == 3*i ==> i == 2*i ==> i == 3*i ==> i == 2*i;\nloop invariant i106: i == 3*i ==> m > 0 ==> i <= n ==> i > 0 ==> i == 3*i ==> i == 2*i ==> i == 3*i ==> i == 2*i ==> i == 3*i ==> i == 2*i ==> i == 3*i;\nloop invariant i107: i == 2*i ==> m <= 0 ==> i <= n ==> i > 0 ==> i == 2*i ==> i == 3*i ==> i == 2*i ==> i == 3*i ==> i == 2*i ==> i == 3*i ==> i == 2*i ==> i == 3*i;\nloop invariant i108: i == 3*i ==> m > 0 ==> i <= n ==> i > 0 ==> i == 3*i ==> i == 2*i ==> i == 3*i ==> i == 2*i ==> i == 3*i ==> i == 2*i ==> i == 3*i ==> i == 2*i;\nloop invariant i109: (i % 2) == (m > 0 ? 0 : 1);\nloop invariant i110: (i % 3) == (m <= 0 ? 0 : 1);\nloop invariant i111: i <= 2;\nloop invariant i112: i >= 3;\nloop invariant i113: i <= 3;\nloop invariant i114: i >= 4;\nloop invariant i115: i <= 4;\nloop invariant i116: i >= 5;\nloop invariant i117: i <= 5;\nloop invariant i118: i >= 6;\nloop invariant i119: i <= 6;\nloop invariant i120: i >= 7;\nloop invariant i121: i <= 7;\nloop invariant i122: i >= 8;\nloop invariant i123: i <= 8;\nloop invariant i124: i >= 9;\nloop invariant i125: i <= 9;\nloop invariant i126: i >= 10;\nloop invariant i127: i <= 10;\nloop invariant i128: i >= 11;\nloop invariant i129: i <= 11;\nloop invariant i130: i >= 12;\nloop invariant i131: i <= 12;\nloop invariant i132: i >= 13;\nloop invariant i133: i <= 13;\nloop invariant i134: i >= 14;\nloop invariant i135: i <= 14;\nloop invariant i136: i >= 15;\nloop invariant i137: i <= 15;\nloop invariant i138: i >= 16;\nloop invariant i139: i <= 16;\nloop invariant i140: i >= 17;\nloop invariant i141: i <= 17;\nloop invariant i142: i >= 18;\nloop invariant i143: i <= 18;\nloop invariant i144: i >= 19;\nloop invariant i145: i <= 19;\nloop invariant i146: i >= 20;\nloop invariant i147: i <= 20;\nloop invariant i148: i >= 21;\nloop invariant i149: i <= 21;\nloop invariant i150: i >= 22;\nloop invariant i151: i <= 22;\nloop invariant i152: i >= 23;\nloop invariant i153: i <= 23;\nloop invariant i154: i >= 24;\nloop invariant i155: i <= 24;\nloop invariant i156: i >= 25;\nloop invariant i157: i <= 25;\nloop invariant i158: i >= 26;\nloop invariant i159: i <= 26;\nloop invariant i160: i >= 27;\nloop invariant i161: i <= 27;\nloop invariant i162: i >= 28;\nloop invariant i163: i <= 28;\nloop invariant i164: i >= 29;\nloop invariant i165: i <= 29;\nloop invariant i166: i >= 30;\nloop invariant i167: i <= 30;\nloop invariant i168: i >= 31;\nloop invariant i169: i <= 31;\nloop invariant i170: i >= 32;\nloop invariant i171: i <= 32;\nloop invariant i172: i >= 33;\nloop invariant i173: i <= 33;\nloop invariant i174: i >= 34;\nloop invariant i175: i <= 34;\nloop invariant i176: i >= 35;\nloop invariant i177: i <= 35;\nloop invariant i178: i >= 36;\nloop invariant i179: i <= 36;\nloop invariant i180: i >= 37;\nloop invariant i181: i <= 37;\nloop invariant i182: i >= 38;\nloop invariant i183: i <= 38;\nloop invariant i184: i >= 39;\nloop invariant i185: i <= 39;\nloop invariant i186: i >= 40;\nloop invariant i187: i <= 40;\nloop invariant i188: i >= 41;\nloop invariant i189: i <= 41;\nloop invariant i190: i >= 42;\nloop invariant i191: i <= 42;\nloop invariant i192: i >= 43;\nloop invariant i193: i <= 43;\nloop invariant i194: i >= 44;\nloop invariant i195: i <= 44;\nloop invariant i196: i >= 45;\nloop invariant i197: i <= 45;\nloop invariant i198: i >= 46;\nloop invariant i199: i <= 46;\nloop invariant i200: i >= 47;\nloop invariant i201: i <= 47;\nloop invariant i202: i >= 48;\nloop invariant i203: i <= 48;\nloop invariant i204: i >= 49;\nloop invariant i205: i <= 49;\nloop invariant i206: i >= 50;\nloop invariant i207: i <= 50;\nloop invariant i208: i >= 51;\nloop invariant i209: i <= 51;\nloop invariant i210: i >= 52;\nloop invariant i211: i <= 52;\nloop invariant i212: i >= 53;\nloop invariant i213: i <= 53;\nloop invariant i214: i >= 54;\nloop invariant i215: i <= 54;\nloop invariant i216: i >= 55;\nloop invariant i217: i <= 55;\nloop invariant i218: i >= 56;\nloop invariant i219: i <= 56;\nloop invariant i220: i >= 57;\nloop invariant i221: i <= 57;\nloop invariant i222: i >= 58;\nloop invariant i223: i <= 58;\nloop invariant i224: i >= 59;\nloop invariant i225: i <= 59;\nloop invariant i226: i >= 60;\nloop invariant i227: i <= 60;\nloop invariant i228: i >= 61;\n*/\nwhile( i < n ) {\n    if( m > 0 ) {\n      i = 2*i;\n    } else {\n      i = 3*i;\n    }\n    \n  }\n  {;\n//@ assert(i > 0 );\n}\n\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple_if.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c"
        ],
        "skipped": [],
        "total": 37,
        "success_count": 34,
        "failure_count": 3,
        "success_rate": 0.918918918918919
    }
}