{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main ()\n{\n  int BASE_SZ = unknown();\n  int __BLAST_NONDET = unknown();\n  \n  int i;\n  int j;\n  int len = BASE_SZ;\n\n  if(BASE_SZ > 0 ); else goto END;\n\n  {;\n//@ assert( 0 <= BASE_SZ-1 );\n}\n\n  if (len == 0)\n    goto END; \n  \n  i = 0;\n  j = 0;\n  while (1) {\n    if ( len == 0 ){ \n      goto END;\n    } else {\n      {;\n//@ assert( 0<= j );\n}\n {;\n//@ assert(j < BASE_SZ);\n}\n\n      {;\n//@ assert( 0<= i );\n}\n {;\n//@ assert(i < BASE_SZ );\n}\n\n      if ( __BLAST_NONDET ) {\n        i++;\n        j++;\n        goto END;\n      }\n    }\n    i ++;\n    j ++;\n    len --;\n  }\n\n END:  return 0;\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= i <= BASE_SZ;\nloop invariant 0 <= j <= BASE_SZ;\nloop invariant 0 <= len <= BASE_SZ;\nloop invariant i <= j;\nloop invariant i + j <= BASE_SZ;\nloop invariant i + j <= len;\nloop invariant i + j >= 0;\nloop invariant i + j >= BASE_SZ - len;\nloop invariant i + j >= BASE_SZ - BASE_SZ + 1;\nloop invariant i + j >= 1;\nloop invariant i + j >= BASE_SZ - BASE_SZ;\nloop invariant i + j >= 0;\nloop invariant i + j >= BASE_SZ - len;\nloop invariant i + j >= BASE_SZ - BASE_SZ + 1;\nloop invariant i + j >= 1;\nloop invariant i + j >= BASE_SZ - BASE_SZ;\nloop invariant i + j >= 0;\nloop invariant i + j >= BASE_SZ - len;\nloop invariant i + j >= BASE_SZ - BASE_SZ + 1;\nloop invariant i + j >= 1;\nloop invariant i + j >= BASE_SZ - BASE_SZ;\nloop invariant i + j >= 0;\nloop invariant i + j >= BASE_SZ - len;\nloop invariant i + j >= BASE_SZ - BASE_SZ + 1;\nloop invariant i + j >= 1;\nloop invariant i + j >= BASE_SZ - BASE_SZ;\nloop invariant i + j >= 0;\nloop invariant i + j >= BASE_SZ - len;\nloop invariant i + j >= BASE_SZ - BASE_SZ + 1;\nloop invariant i + j >= 1;\nloop invariant i + j >= BASE_SZ - BASE_SZ;\nloop invariant i + j >= 0;\nloop invariant i + j >= BASE_SZ - len;\nloop invariant i + j >= BASE_SZ - BASE_SZ + 1;\nloop invariant i + j >= 1;\nloop invariant i + j >= BASE_SZ - BASE_SZ;\nloop invariant i + j >= 0;\nloop invariant i + j >= BASE_SZ - len;\nloop invariant i + j >= BASE_SZ - BASE_SZ + 1;\nloop invariant i + j >= 1;\nloop invariant i + j >= BASE_SZ - BASE_SZ;\nloop invariant i + j >= 0;\nloop invariant i + j >= BASE_SZ - len;\nloop invariant i + j >= BASE_SZ - BASE_SZ + 1;\nloop invariant i + j >= 1;\nloop invariant i + j >= BASE_SZ - BASE_SZ;\nloop invariant i + j >= 0;\nloop invariant i + j >= BASE_SZ - len;\nloop invariant i + j >= BASE_SZ - BASE_SZ + 1;\nloop invariant i + j >= 1;\nloop invariant i + j >= BASE_SZ - BASE_SZ;\nloop invariant i + j >= 0;\nloop invariant i + j >= BASE_SZ - len;\nloop invariant i + j >= BASE_SZ - BASE_SZ + 1;\nloop invariant i + j >= 1;\nloop invariant i + j >= BASE_SZ - BASE_SZ;\nloop invariant i + j >= 0;\nloop invariant i + j >= BASE_SZ - len;\nloop invariant i + j >= BASE_SZ - BASE_SZ + 1;\nloop invariant i + j >= 1;\nloop invariant i + j >= BASE_SZ - BASE_SZ;\nloop invariant i + j >= 0;\nloop invariant i + j >= BASE_SZ - len;\nloop invariant i + j >= BASE_SZ - BASE_SZ + 1;\nloop invariant i + j >= 1;\nloop invariant i + j >= BASE_SZ - BASE_SZ;\nloop invariant i + j >= 0;\nloop invariant i + j >= BASE_SZ - len;\nloop invariant i + j >= BASE_SZ - BASE_SZ + 1;\nloop invariant i + j >= 1;\nloop invariant i + j >= BASE_SZ - BASE_SZ;\nloop invariant i + j >= 0;\nloop invariant i + j >= BASE_SZ - len;\nloop invariant i + j >= BASE_SZ - BASE_SZ + 1;\nloop invariant i + j >= 1;\nloop invariant i + j >= BASE_SZ - BASE_SZ;\nloop invariant i + j >= 0;\nloop invariant i + j >= BASE_SZ - len;\nloop invariant i + j >= BASE_SZ - BASE_SZ + 1;\nloop invariant i + j >= 1;\nloop invariant i + j >= BASE_SZ - BASE_SZ;\nloop invariant i + j >= 0;\nloop invariant i + j >= BASE_SZ - len;\nloop invariant i + j >= BASE_SZ - BASE_SZ + 1;\nloop invariant i + j >= 1;\nloop invariant i + j >= BASE_SZ - BASE_SZ;\nloop invariant i + j >= 0;\nloop invariant i + j >= BASE_SZ - len;\nloop invariant i + j >= BASE_SZ - BASE_SZ + 1;\nloop invariant i + j >= 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= BASE_SZ;\nloop invariant 0 <= j <= BASE_SZ;\nloop invariant i >= j;\nloop invariant len >= 0;\nloop invariant len <= BASE_SZ;\nloop invariant len == BASE_SZ - (i + j);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= j <= BASE_SZ;\nloop invariant 0 <= i <= BASE_SZ;\nloop invariant j <= i;\nloop invariant j <= len;\nloop invariant i <= len;\nloop invariant j <= BASE_SZ - len;\nloop invariant i <= BASE_SZ - len;\nloop invariant 0 <= len <= BASE_SZ;\nloop invariant __BLAST_NONDET ==> (i == j);\nloop invariant __BLAST_NONDET ==> (len == 0);\nloop invariant __BLAST_NONDET ==> (j == BASE_SZ);\nloop invariant __BLAST_NONDET ==> (i == BASE_SZ);\nloop invariant __BLAST_NONDET ==> (j == len);\nloop invariant __BLAST_NONDET ==> (i == len);\n*/\n```",
            "```\n/*@\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant len >= 0;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len >= 0;\nloop invariant len <= BASE_SZ;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant len >= 0;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant len >= 0;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant len >= 0;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant len >= 0;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant len >= 0;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant len >= 0;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant len >= 0;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant len >= 0;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant len >= 0;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant len >= 0;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant len >= 0;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant len >= 0;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant len >= 0;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant len >= 0;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant len >= 0;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant len >= 0;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant len >= 0;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant len >= 0;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant len >= 0;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant i >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= BASE_SZ - 1;\nloop invariant 0 <= j <= BASE_SZ - 1;\nloop invariant len >= 0;\nloop invariant len <= BASE_SZ;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= BASE_SZ;\nloop invariant 0 <= j <= i;\nloop invariant len >= 0;\nloop invariant len <= BASE_SZ;\nloop invariant (len == 0) ==> (i == j);\nloop invariant 0 <= i <= BASE_SZ;\nloop invariant 0 <= j <= i;\nloop invariant len >= 0;\nloop invariant len <= BASE_SZ;\nloop invariant (len == 0) ==> (i == j);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= BASE_SZ - 1;\nloop invariant 0 <= j <= BASE_SZ - 1;\nloop invariant len >= 0;\nloop invariant len <= BASE_SZ;\nloop invariant i - j <= 0;\nloop invariant len == 0 ==> i == BASE_SZ;\nloop invariant len == 0 ==> j == BASE_SZ;\nloop invariant i > 0 ==> i - j >= 0;\nloop invariant i > 0 ==> j < BASE_SZ;\nloop invariant j > 0 ==> i < BASE_SZ;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= BASE_SZ && i <= len;\nloop invariant 0 <= j <= BASE_SZ && j <= len;\nloop invariant i <= j;\nloop invariant i == j || i == j + 1;\nloop invariant i <= BASE_SZ - 1;\nloop invariant j <= BASE_SZ - 1;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i <= len;\nloop invariant j <= len;\nloop invariant len >= 0;\nloop invariant len <= BASE_SZ;\nloop invariant BASE_SZ > 0;\nloop invariant len == 0 || __BLAST_NONDET;\nloop invariant i == BASE_SZ && j == BASE_SZ && len == 0;\nloop invariant i == BASE_SZ && j == BASE_SZ && len == 0 ==> len == 0;\nloop invariant i == BASE_SZ && j == BASE_SZ && len == 0 ==> __BLAST_NONDET;\nloop invariant i == BASE_SZ && j == BASE_SZ && len == 0 ==> i == len;\nloop invariant i == BASE_SZ && j == BASE_SZ && len == 0 ==> j == len;\nloop invariant i == BASE_SZ && j == BASE_SZ && len == 0 ==> i == j;\nloop invariant i == BASE_SZ && j == BASE_SZ && len == 0 ==> i == j + 1;\nloop invariant i == BASE_SZ && j == BASE_SZ && len == 0 ==> i <= BASE_SZ;\nloop invariant i == BASE_SZ && j == BASE_SZ && len == 0 ==> j <= BASE_SZ;\nloop invariant i == BASE_SZ && j == BASE_SZ && len == 0 ==> i >= 0;\nloop invariant i == BASE_SZ && j == BASE_SZ && len == 0 ==> j >= 0;\nloop invariant i == BASE_SZ && j == BASE_SZ && len == 0 ==> i <= len;\nloop invariant i == BASE_SZ && j == BASE_SZ && len == 0 ==> j <= len;\nloop invariant i == BASE_SZ && j == BASE_SZ && len == 0 ==> len >= 0;\nloop invariant i == BASE_SZ && j == BASE_SZ && len == 0 ==> len <= BASE_SZ;\nloop invariant i == BASE_SZ && j == BASE_SZ && len == 0 ==> BASE_SZ > 0;\nloop invariant i == BASE_SZ && j == BASE_SZ && len == 0 ==> __BLAST_NONDET;\nloop invariant i == BASE_SZ && j == BASE_SZ && len == 0 ==> len == 0;\nloop invariant i == BASE_SZ && j == BASE_SZ && len == 0 ==> i == len;\nloop invariant i == BASE_SZ && j == BASE_SZ && len == 0 ==> j == len;\nloop invariant i == BASE_SZ && j == BASE_SZ && len == 0 ==> i == j;\nloop invariant i == BASE_SZ && j == BASE_SZ && len == 0 ==> i == j + 1;\nloop invariant i == BASE_SZ && j == BASE_SZ && len == 0 ==> i <= BASE_SZ;\nloop invariant i == BASE_SZ && j == BASE_SZ && len == 0 ==> j <= BASE_SZ;\nloop invariant i == BASE_SZ && j == BASE_SZ && len == 0 ==> i >= 0;\nloop invariant i == BASE_SZ && j == BASE_SZ && len == 0 ==> j >= 0;\nloop invariant i == BASE_SZ && j == BASE_SZ && len == 0 ==> i <= len;\nloop invariant i == BASE_SZ && j == BASE_SZ && len == 0 ==> j <= len;\nloop invariant i == BASE_SZ && j == BASE_SZ && len == 0 ==> len >= 0;\nloop invariant i == BASE_SZ && j == BASE_SZ && len == 0 ==> len <= BASE_SZ;\nloop invariant i == BASE_SZ && j == BASE_SZ && len == 0 ==> BASE_SZ > 0;\nloop invariant i == BASE_SZ && j == BASE_SZ && len == 0 ==> __BLAST_NONDET;\nloop invariant i == BASE_SZ && j == BASE_SZ && len == 0 ==> len == 0;\nloop invariant i == BASE_SZ && j == BASE_SZ && len == 0 ==> i == len;\nloop invariant i == BASE_SZ && j == BASE_SZ && len == 0 ==> j == len;\nloop invariant i == BASE_SZ && j == BASE_SZ && len == 0 ==> i == j;\nloop invariant i == BASE_SZ && j == BASE_SZ && len == 0 ==> i == j + 1;\nloop invariant i == BASE_SZ && j == BASE_SZ && len == 0 ==> i <= BASE_SZ;\nloop invariant i == BASE_SZ && j == BASE_SZ && len == 0 ==> j <= BASE_SZ;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= j <= BASE_SZ - 1;\nloop invariant 0 <= i <= BASE_SZ - 1;\nloop invariant len = BASE_SZ - j - i;\nloop invariant (i = 0) ==> (j = 0);\nloop invariant (j = 0) ==> (i = 0);\nloop invariant (i = BASE_SZ - 1) ==> (j = BASE_SZ - 1);\nloop invariant (j = BASE_SZ - 1) ==> (i = BASE_SZ - 1);\nloop invariant (i = BASE_SZ - 1) ==> (len = 0);\nloop invariant (j = BASE_SZ - 1) ==> (len = 0);\nloop invariant (len = 0) ==> (i = BASE_SZ - 1);\nloop invariant (len = 0) ==> (j = BASE_SZ - 1);\nloop invariant (len = 0) ==> (i = 0);\nloop invariant (len = 0) ==> (j = 0);\nloop invariant (len = BASE_SZ - 1) ==> (i = 0);\nloop invariant (len = BASE_SZ - 1) ==> (j = 0);\nloop invariant (len = BASE_SZ - 1) ==> (i = BASE_SZ - 1);\nloop invariant (len = BASE_SZ - 1) ==> (j = BASE_SZ - 1);\nloop invariant (i = 0) ==> (len = BASE_SZ - 1);\nloop invariant (j = 0) ==> (len = BASE_SZ - 1);\nloop invariant (i = BASE_SZ - 1) ==> (len = 1);\nloop invariant (j = BASE_SZ - 1) ==> (len = 1);\nloop invariant (len = 1) ==> (i = BASE_SZ - 1);\nloop invariant (len = 1) ==> (j = BASE_SZ - 1);\nloop invariant (len = 1) ==> (i = 0);\nloop invariant (len = 1) ==> (j = 0);\nloop invariant (len = BASE_SZ - 1) ==> (i = 1);\nloop invariant (len = BASE_SZ - 1) ==> (j = 1);\nloop invariant (len = BASE_SZ - 1) ==> (i = BASE_SZ - 2);\nloop invariant (len = BASE_SZ - 1) ==> (j = BASE_SZ - 2);\nloop invariant (len = 0) ==> (i = BASE_SZ - 2);\nloop invariant (len = 0) ==> (j = BASE_SZ - 2);\nloop invariant (len = BASE_SZ - 1) ==> (i = 0);\nloop invariant (len = BASE_SZ - 1) ==> (j = 0);\nloop invariant (len = BASE_SZ - 1) ==> (i = BASE_SZ - 1);\nloop invariant (len = BASE_SZ - 1) ==> (j = BASE_SZ - 1);\nloop invariant (len = BASE_SZ - 1) ==> (i = BASE_SZ - 2);\nloop invariant (len = BASE_SZ - 1) ==> (j = BASE_SZ - 2);\nloop invariant (len = BASE_SZ - 1) ==> (i = 1);\nloop invariant (len = BASE_SZ - 1) ==> (j = 1);\nloop invariant (len = BASE_SZ - 1) ==> (i = 0);\nloop invariant (len = BASE_SZ - 1) ==> (j = 0);\nloop invariant (len = BASE_SZ - 1) ==> (i = BASE_SZ - 1);\nloop invariant (len = BASE_SZ - 1) ==> (j = BASE_SZ - 1);\nloop invariant (len = BASE_SZ - 1) ==> (i = BASE_SZ - 2);\nloop invariant (len = BASE_SZ - 1) ==> (j = BASE_SZ - 2);\nloop invariant (len = BASE_SZ - 1) ==> (i = 0);\nloop invariant (len = BASE_SZ - 1) ==> (j = 0);\nloop invariant (len = BASE_SZ - 1) ==> (i = BASE_SZ - 1);\nloop invariant (len = BASE_SZ - 1) ==> (j = BASE_SZ - 1);\nloop invariant (len = BASE_SZ - 1) ==> (i = BASE_SZ - 2);\nloop invariant (len = BASE_SZ - 1) ==> (j = BASE_SZ - 2);\nloop invariant (len = BASE_SZ - 1) ==> (i = 1);\nloop invariant (len = BASE_SZ - 1) ==> (j = 1);\nloop invariant (len = BASE_SZ - 1) ==> (i = 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= j <= BASE_SZ;\nloop invariant 0 <= i <= BASE_SZ;\nloop invariant 0 <= BASE_SZ <= 100000;\nloop invariant 0 <= len <= BASE_SZ;\nloop invariant len == BASE_SZ - (j - i);\nloop invariant j <= BASE_SZ - 1;\nloop invariant i <= BASE_SZ - 1;\nloop invariant j <= i;\nloop invariant i <= len;\nloop invariant j <= len;\nloop invariant i == j || (i > j && __BLAST_NONDET);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= len <= BASE_SZ;\nloop invariant 0 <= i <= BASE_SZ;\nloop invariant 0 <= j <= BASE_SZ;\nloop invariant i <= j;\nloop invariant len >= 0;\nloop invariant len <= BASE_SZ;\nloop invariant i <= len;\nloop invariant j <= len;\nloop invariant i == j ==> len == 0;\nloop invariant len > 0 ==> i < len;\nloop invariant len > 0 ==> j < len;\nloop invariant len == 0 ==> i == len;\nloop invariant len == 0 ==> j == len;\nloop invariant (len == 0) ==> (i == len && j == len);\nloop invariant (len > 0) ==> (i == j ==> i == len && j == len);\nloop invariant (len > 0) ==> (i == j ==> i == len - 1 && j == len - 1);\nloop invariant (len > 0) ==> (i == j ==> i == len - 2 && j == len - 2);\nloop invariant (len > 0) ==> (i == j ==> i == len - 3 && j == len - 3);\nloop invariant (len > 0) ==> (i == j ==> i == len - 4 && j == len - 4);\nloop invariant (len > 0) ==> (i == j ==> i == len - 5 && j == len - 5);\nloop invariant (len > 0) ==> (i == j ==> i == len - 6 && j == len - 6);\nloop invariant (len > 0) ==> (i == j ==> i == len - 7 && j == len - 7);\nloop invariant (len > 0) ==> (i == j ==> i == len - 8 && j == len - 8);\nloop invariant (len > 0) ==> (i == j ==> i == len - 9 && j == len - 9);\nloop invariant (len > 0) ==> (i == j ==> i == len - 10 && j == len - 10);\nloop invariant (len > 0) ==> (i == j ==> i == len - 11 && j == len - 11);\nloop invariant (len > 0) ==> (i == j ==> i == len - 12 && j == len - 12);\nloop invariant (len > 0) ==> (i == j ==> i == len - 13 && j == len - 13);\nloop invariant (len > 0) ==> (i == j ==> i == len - 14 && j == len - 14);\nloop invariant (len > 0) ==> (i == j ==> i == len - 15 && j == len - 15);\nloop invariant (len > 0) ==> (i == j ==> i == len - 16 && j == len - 16);\nloop invariant (len > 0) ==> (i == j ==> i == len - 17 && j == len - 17);\nloop invariant (len > 0) ==> (i == j ==> i == len - 18 && j == len - 18);\nloop invariant (len > 0) ==> (i == j ==> i == len - 19 && j == len - 19);\nloop invariant (len > 0) ==> (i == j ==> i == len - 20 && j == len - 20);\nloop invariant (len > 0) ==> (i == j ==> i == len - 21 && j == len - 21);\nloop invariant (len > 0) ==> (i == j ==> i == len - 22 && j == len - 22);\nloop invariant (len > 0) ==> (i == j ==> i == len - 23 && j == len - 23);\nloop invariant (len > 0) ==> (i == j ==> i == len - 24 && j == len - 24);\nloop invariant (len > 0) ==> (i == j ==> i == len - 25 && j == len - 25);\nloop invariant (len > 0) ==> (i == j ==> i == len - 26 && j == len - 26);\nloop invariant (len > 0) ==> (i == j ==> i == len - 27 && j == len - 27);\nloop invariant (len > 0) ==> (i == j ==> i == len - 28 && j == len - 28);\n*/\n```",
            "```\n/*@\nloop invariant i == j;loop invariant i >= 0;loop invariant i < BASE_SZ;loop invariant j >= 0;loop invariant j < BASE_SZ;loop invariant len >= 0;loop invariant len <= BASE_SZ;loop invariant len == BASE_SZ - i - j;if (len == 0) { loop invariant i == len; loop invariant j == 0;}else { loop invariant i < len;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= j <= BASE_SZ;\nloop invariant 0 <= i <= BASE_SZ;\nloop invariant j <= i;\nloop invariant len >= 0;\nloop invariant len <= BASE_SZ;\nloop invariant i <= len + j;\nloop invariant j <= len + i;\nloop invariant i <= BASE_SZ + j;\nloop invariant j <= BASE_SZ + i;\nloop invariant i <= BASE_SZ + BASE_SZ;\nloop invariant j <= BASE_SZ + BASE_SZ;\nloop invariant i <= 2 * BASE_SZ;\nloop invariant j <= 2 * BASE_SZ;\nloop invariant i <= 2 * BASE_SZ + BASE_SZ;\nloop invariant j <= 2 * BASE_SZ + BASE_SZ;\nloop invariant i <= 3 * BASE_SZ;\nloop invariant j <= 3 * BASE_SZ;\nloop invariant i <= 3 * BASE_SZ + BASE_SZ;\nloop invariant j <= 3 * BASE_SZ + BASE_SZ;\nloop invariant i <= 4 * BASE_SZ;\nloop invariant j <= 4 * BASE_SZ;\nloop invariant i <= 4 * BASE_SZ + BASE_SZ;\nloop invariant j <= 4 * BASE_SZ + BASE_SZ;\nloop invariant i <= 5 * BASE_SZ;\nloop invariant j <= 5 * BASE_SZ;\nloop invariant i <= 5 * BASE_SZ + BASE_SZ;\nloop invariant j <= 5 * BASE_SZ + BASE_SZ;\nloop invariant i <= 6 * BASE_SZ;\nloop invariant j <= 6 * BASE_SZ;\nloop invariant i <= 6 * BASE_SZ + BASE_SZ;\nloop invariant j <= 6 * BASE_SZ + BASE_SZ;\nloop invariant i <= 7 * BASE_SZ;\nloop invariant j <= 7 * BASE_SZ;\nloop invariant i <= 7 * BASE_SZ + BASE_SZ;\nloop invariant j <= 7 * BASE_SZ + BASE_SZ;\nloop invariant i <= 8 * BASE_SZ;\nloop invariant j <= 8 * BASE_SZ;\nloop invariant i <= 8 * BASE_SZ + BASE_SZ;\nloop invariant j <= 8 * BASE_SZ + BASE_SZ;\nloop invariant i <= 9 * BASE_SZ;\nloop invariant j <= 9 * BASE_SZ;\nloop invariant i <= 9 * BASE_SZ + BASE_SZ;\nloop invariant j <= 9 * BASE_SZ + BASE_SZ;\nloop invariant i <= 10 * BASE_SZ;\nloop invariant j <= 10 * BASE_SZ;\nloop invariant i <= 10 * BASE_SZ + BASE_SZ;\nloop invariant j <= 10 * BASE_SZ + BASE_SZ;\nloop invariant i <= 11 * BASE_SZ;\nloop invariant j <= 11 * BASE_SZ;\nloop invariant i <= 11 * BASE_SZ + BASE_SZ;\nloop invariant j <= 11 * BASE_SZ + BASE_SZ;\nloop invariant i <= 12 * BASE_SZ;\nloop invariant j <= 12 * BASE_SZ;\nloop invariant i <= 12 * BASE_SZ + BASE_SZ;\nloop invariant j <= 12 * BASE_SZ + BASE_SZ;\nloop invariant i <= 13 * BASE_SZ;\nloop invariant j <= 13 * BASE_SZ;\nloop invariant i <= 13 * BASE_SZ + BASE_SZ;\nloop invariant j <= 13 * BASE_SZ + BASE_SZ;\nloop invariant i <= 14 * BASE_SZ;\nloop invariant j <= 14 * BASE_SZ;\nloop invariant i <= 14 * BASE_SZ + BASE_SZ;\nloop invariant j <= 14 * BASE_SZ + BASE_SZ;\nloop invariant i <= 15 * BASE_SZ;\nloop invariant j <= 15 * BASE_SZ;\nloop invariant i <= 15 * BASE_SZ + BASE_SZ;\nloop invariant j <= 15 * BASE_SZ + BASE_SZ;\nloop invariant i <= 16 * BASE_SZ;\nloop invariant j <= 16 * BASE_SZ;\nloop invariant i <= 16 * BASE_SZ + BASE_SZ;\nloop invariant j <= 16 * BASE_SZ + BASE_SZ;\nloop invariant i <= 17 * BASE_SZ;\nloop invariant j <= 17 * BASE_SZ;\nloop invariant i <= 17 * BASE_SZ + BASE_SZ;\nloop invariant j <= 17 * BASE_SZ + BASE_SZ;\nloop invariant i <= 18 * BASE_SZ;\nloop invariant j <= 18 * BASE_SZ;\nloop invariant i <= 18 * BASE_SZ + BASE_SZ;\nloop invariant j <= 18 * BASE_SZ + BASE_SZ;\nloop invariant i <= 19 * BASE_SZ;\nloop invariant j <= 19 * BASE_SZ;\nloop invariant i <= 19 * BASE_SZ + BASE_SZ;\nloop invariant j <= 19 * BASE_SZ + BASE_SZ;\nloop invariant i <= 20 * BASE_SZ;\nloop invariant j <= 20 * BASE_SZ;\nloop invariant i <= 20 * BASE_SZ + BASE_SZ;\n*/\n```",
            "```\n/*@\nloop invariant i >= 0;\nloop invariant i < BASE_SZ;\nloop invariant j >= 0;\nloop invariant j < BASE_SZ;\nloop invariant len >= 0;\nloop invariant (len == 0) ==> (i == j);\nloop invariant (len > 0) ==> (i == j - len);\nloop invariant (len > 0) ==> (j == i + len);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= j <= BASE_SZ;\nloop invariant 0 <= i <= BASE_SZ;\nloop invariant len >= 0;\nloop invariant i == j;\nloop invariant len == BASE_SZ;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= BASE_SZ;\nloop invariant 0 <= j <= BASE_SZ;\nloop invariant 0 <= len <= BASE_SZ;\nloop invariant i <= j;\nloop invariant i + j <= BASE_SZ;\nloop invariant i + j <= len;\nloop invariant i + j >= 0;\nloop invariant i + j >= BASE_SZ - len;\nloop invariant i + j >= BASE_SZ - BASE_SZ + 1;\nloop invariant i + j >= 1;\nloop invariant i + j >= BASE_SZ - BASE_SZ;\nloop invariant i + j >= 0;\nloop invariant i + j >= BASE_SZ - len;\nloop invariant i + j >= BASE_SZ - BASE_SZ + 1;\nloop invariant i + j >= 1;\nloop invariant i + j >= BASE_SZ - BASE_SZ;\nloop invariant i + j >= 0;\nloop invariant i + j >= BASE_SZ - len;\nloop invariant i + j >= BASE_SZ - BASE_SZ + 1;\nloop invariant i + j >= 1;\nloop invariant i + j >= BASE_SZ - BASE_SZ;\nloop invariant i + j >= 0;\nloop invariant i + j >= BASE_SZ - len;\nloop invariant i + j >= BASE_SZ - BASE_SZ + 1;\nloop invariant i + j >= 1;\nloop invariant i + j >= BASE_SZ - BASE_SZ;\nloop invariant i + j >= 0;\nloop invariant i + j >= BASE_SZ - len;\nloop invariant i + j >= BASE_SZ - BASE_SZ + 1;\nloop invariant i + j >= 1;\nloop invariant i + j >= BASE_SZ - BASE_SZ;\nloop invariant i + j >= 0;\nloop invariant i + j >= BASE_SZ - len;\nloop invariant i + j >= BASE_SZ - BASE_SZ + 1;\nloop invariant i + j >= 1;\nloop invariant i + j >= BASE_SZ - BASE_SZ;\nloop invariant i + j >= 0;\nloop invariant i + j >= BASE_SZ - len;\nloop invariant i + j >= BASE_SZ - BASE_SZ + 1;\nloop invariant i + j >= 1;\nloop invariant i + j >= BASE_SZ - BASE_SZ;\nloop invariant i + j >= 0;\nloop invariant i + j >= BASE_SZ - len;\nloop invariant i + j >= BASE_SZ - BASE_SZ + 1;\nloop invariant i + j >= 1;\nloop invariant i + j >= BASE_SZ - BASE_SZ;\nloop invariant i + j >= 0;\nloop invariant i + j >= BASE_SZ - len;\nloop invariant i + j >= BASE_SZ - BASE_SZ + 1;\nloop invariant i + j >= 1;\nloop invariant i + j >= BASE_SZ - BASE_SZ;\nloop invariant i + j >= 0;\nloop invariant i + j >= BASE_SZ - len;\nloop invariant i + j >= BASE_SZ - BASE_SZ + 1;\nloop invariant i + j >= 1;\nloop invariant i + j >= BASE_SZ - BASE_SZ;\nloop invariant i + j >= 0;\nloop invariant i + j >= BASE_SZ - len;\nloop invariant i + j >= BASE_SZ - BASE_SZ + 1;\nloop invariant i + j >= 1;\nloop invariant i + j >= BASE_SZ - BASE_SZ;\nloop invariant i + j >= 0;\nloop invariant i + j >= BASE_SZ - len;\nloop invariant i + j >= BASE_SZ - BASE_SZ + 1;\nloop invariant i + j >= 1;\nloop invariant i + j >= BASE_SZ - BASE_SZ;\nloop invariant i + j >= 0;\nloop invariant i + j >= BASE_SZ - len;\nloop invariant i + j >= BASE_SZ - BASE_SZ + 1;\nloop invariant i + j >= 1;\nloop invariant i + j >= BASE_SZ - BASE_SZ;\nloop invariant i + j >= 0;\nloop invariant i + j >= BASE_SZ - len;\nloop invariant i + j >= BASE_SZ - BASE_SZ + 1;\nloop invariant i + j >= 1;\nloop invariant i + j >= BASE_SZ - BASE_SZ;\nloop invariant i + j >= 0;\nloop invariant i + j >= BASE_SZ - len;\nloop invariant i + j >= BASE_SZ - BASE_SZ + 1;\nloop invariant i + j >= 1;\nloop invariant i + j >= BASE_SZ - BASE_SZ;\nloop invariant i + j >= 0;\nloop invariant i + j >= BASE_SZ - len;\nloop invariant i + j >= BASE_SZ - BASE_SZ + 1;\nloop invariant i + j >= 1;\nloop invariant i + j >= BASE_SZ - BASE_SZ;\nloop invariant i + j >= 0;\nloop invariant i + j >= BASE_SZ - len;\nloop invariant i + j >= BASE_SZ - BASE_SZ + 1;\nloop invariant i + j >= 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main ()\n{\n  int BASE_SZ = unknown();\n  int __BLAST_NONDET = unknown();\n  \n  int i;\n  int j;\n  int len = BASE_SZ;\n\n  if(BASE_SZ > 0 ); else goto END;\n\n  {;\n//@ assert( 0 <= BASE_SZ-1 );\n}\n\n  if (len == 0)\n    goto END; \n  \n  i = 0;\n  j = 0;\n  /*@\nloop invariant i1: 0 <= i <= BASE_SZ;\nloop invariant i2: 0 <= j <= BASE_SZ;\nloop invariant i3: 0 <= len <= BASE_SZ;\nloop invariant i4: i <= j;\n\n\nloop invariant i7: i + j >= 0;\nloop invariant i8: i + j >= BASE_SZ - len;\n\n\nloop invariant i11: i + j >= BASE_SZ - BASE_SZ;\n*/\nwhile (1) {\n    if ( len == 0 ){ \n      goto END;\n    } else {\n      {;\n//@ assert( 0<= j );\n}\n {;\n//@ assert(j < BASE_SZ);\n}\n\n      {;\n//@ assert( 0<= i );\n}\n {;\n//@ assert(i < BASE_SZ );\n}\n\n      if ( __BLAST_NONDET ) {\n        i++;\n        j++;\n        goto END;\n      }\n    }\n    i ++;\n    j ++;\n    len --;\n  }\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= BASE_SZ;\nloop invariant 0 <= j <= BASE_SZ;\nloop invariant i >= j;\nloop invariant len >= 0;\nloop invariant len <= BASE_SZ;\nloop invariant len == BASE_SZ - (i + j);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main ()\n{\n  int BASE_SZ = unknown();\n  int __BLAST_NONDET = unknown();\n  \n  int i;\n  int j;\n  int len = BASE_SZ;\n\n  if(BASE_SZ > 0 ); else goto END;\n\n  {;\n//@ assert( 0 <= BASE_SZ-1 );\n}\n\n  if (len == 0)\n    goto END; \n  \n  i = 0;\n  j = 0;\n  /*@\nloop invariant i1: 0 <= i <= BASE_SZ;\nloop invariant i2: 0 <= j <= BASE_SZ;\nloop invariant i3: i >= j;\nloop invariant i4: len >= 0;\nloop invariant i5: len <= BASE_SZ;\n\n*/\nwhile (1) {\n    if ( len == 0 ){ \n      goto END;\n    } else {\n      {;\n//@ assert( 0<= j );\n}\n {;\n//@ assert(j < BASE_SZ);\n}\n\n      {;\n//@ assert( 0<= i );\n}\n {;\n//@ assert(i < BASE_SZ );\n}\n\n      if ( __BLAST_NONDET ) {\n        i++;\n        j++;\n        goto END;\n      }\n    }\n    i ++;\n    j ++;\n    len --;\n  }\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= j <= BASE_SZ;\nloop invariant 0 <= i <= BASE_SZ;\nloop invariant j <= i;\nloop invariant j <= len;\nloop invariant i <= len;\nloop invariant j <= BASE_SZ - len;\nloop invariant i <= BASE_SZ - len;\nloop invariant 0 <= len <= BASE_SZ;\nloop invariant __BLAST_NONDET ==> (i == j);\nloop invariant __BLAST_NONDET ==> (len == 0);\nloop invariant __BLAST_NONDET ==> (j == BASE_SZ);\nloop invariant __BLAST_NONDET ==> (i == BASE_SZ);\nloop invariant __BLAST_NONDET ==> (j == len);\nloop invariant __BLAST_NONDET ==> (i == len);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main ()\n{\n  int BASE_SZ = unknown();\n  int __BLAST_NONDET = unknown();\n  \n  int i;\n  int j;\n  int len = BASE_SZ;\n\n  if(BASE_SZ > 0 ); else goto END;\n\n  {;\n//@ assert( 0 <= BASE_SZ-1 );\n}\n\n  if (len == 0)\n    goto END; \n  \n  i = 0;\n  j = 0;\n  /*@\nloop invariant i1: 0 <= j <= BASE_SZ;\nloop invariant i2: 0 <= i <= BASE_SZ;\nloop invariant i3: j <= i;\n\n\nloop invariant i6: j <= BASE_SZ - len;\nloop invariant i7: i <= BASE_SZ - len;\nloop invariant i8: 0 <= len <= BASE_SZ;\nloop invariant i9: __BLAST_NONDET ==> (i == j);\n\n\n\n\n\n*/\nwhile (1) {\n    if ( len == 0 ){ \n      goto END;\n    } else {\n      {;\n//@ assert( 0<= j );\n}\n {;\n//@ assert(j < BASE_SZ);\n}\n\n      {;\n//@ assert( 0<= i );\n}\n {;\n//@ assert(i < BASE_SZ );\n}\n\n      if ( __BLAST_NONDET ) {\n        i++;\n        j++;\n        goto END;\n      }\n    }\n    i ++;\n    j ++;\n    len --;\n  }\n\n END:  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant len >= 0;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len >= 0;\nloop invariant len <= BASE_SZ;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant len >= 0;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant len >= 0;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant len >= 0;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant len >= 0;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant len >= 0;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant len >= 0;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant len >= 0;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant len >= 0;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant len >= 0;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant len >= 0;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant len >= 0;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant len >= 0;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant len >= 0;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant len >= 0;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant len >= 0;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant len >= 0;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant len >= 0;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant len >= 0;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant len >= 0;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant i >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main ()\n{\n  int BASE_SZ = unknown();\n  int __BLAST_NONDET = unknown();\n  \n  int i;\n  int j;\n  int len = BASE_SZ;\n\n  if(BASE_SZ > 0 ); else goto END;\n\n  {;\n//@ assert( 0 <= BASE_SZ-1 );\n}\n\n  if (len == 0)\n    goto END; \n  \n  i = 0;\n  j = 0;\n  /*@\nloop invariant i1: i >= 0;\nloop invariant i2: j >= 0;\nloop invariant i3: len >= 0;\nloop invariant i4: i <= BASE_SZ;\nloop invariant i5: j <= BASE_SZ;\nloop invariant i6: len <= BASE_SZ;\n*/\nwhile (1) {\n    if ( len == 0 ){ \n      goto END;\n    } else {\n      {;\n//@ assert( 0<= j );\n}\n {;\n//@ assert(j < BASE_SZ);\n}\n\n      {;\n//@ assert( 0<= i );\n}\n {;\n//@ assert(i < BASE_SZ );\n}\n\n      if ( __BLAST_NONDET ) {\n        i++;\n        j++;\n        goto END;\n      }\n    }\n    i ++;\n    j ++;\n    len --;\n  }\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= BASE_SZ - 1;\nloop invariant 0 <= j <= BASE_SZ - 1;\nloop invariant len >= 0;\nloop invariant len <= BASE_SZ;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main ()\n{\n  int BASE_SZ = unknown();\n  int __BLAST_NONDET = unknown();\n  \n  int i;\n  int j;\n  int len = BASE_SZ;\n\n  if(BASE_SZ > 0 ); else goto END;\n\n  {;\n//@ assert( 0 <= BASE_SZ-1 );\n}\n\n  if (len == 0)\n    goto END; \n  \n  i = 0;\n  j = 0;\n  /*@\n\n\nloop invariant i3: len >= 0;\nloop invariant i4: len <= BASE_SZ;\n*/\nwhile (1) {\n    if ( len == 0 ){ \n      goto END;\n    } else {\n      {;\n//@ assert( 0<= j );\n}\n {;\n//@ assert(j < BASE_SZ);\n}\n\n      {;\n//@ assert( 0<= i );\n}\n {;\n//@ assert(i < BASE_SZ );\n}\n\n      if ( __BLAST_NONDET ) {\n        i++;\n        j++;\n        goto END;\n      }\n    }\n    i ++;\n    j ++;\n    len --;\n  }\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= BASE_SZ;\nloop invariant 0 <= j <= i;\nloop invariant len >= 0;\nloop invariant len <= BASE_SZ;\nloop invariant (len == 0) ==> (i == j);\nloop invariant 0 <= i <= BASE_SZ;\nloop invariant 0 <= j <= i;\nloop invariant len >= 0;\nloop invariant len <= BASE_SZ;\nloop invariant (len == 0) ==> (i == j);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main ()\n{\n  int BASE_SZ = unknown();\n  int __BLAST_NONDET = unknown();\n  \n  int i;\n  int j;\n  int len = BASE_SZ;\n\n  if(BASE_SZ > 0 ); else goto END;\n\n  {;\n//@ assert( 0 <= BASE_SZ-1 );\n}\n\n  if (len == 0)\n    goto END; \n  \n  i = 0;\n  j = 0;\n  /*@\nloop invariant i1: 0 <= i <= BASE_SZ;\nloop invariant i2: 0 <= j <= i;\nloop invariant i3: len >= 0;\nloop invariant i4: len <= BASE_SZ;\n\n*/\nwhile (1) {\n    if ( len == 0 ){ \n      goto END;\n    } else {\n      {;\n//@ assert( 0<= j );\n}\n {;\n//@ assert(j < BASE_SZ);\n}\n\n      {;\n//@ assert( 0<= i );\n}\n {;\n//@ assert(i < BASE_SZ );\n}\n\n      if ( __BLAST_NONDET ) {\n        i++;\n        j++;\n        goto END;\n      }\n    }\n    i ++;\n    j ++;\n    len --;\n  }\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= BASE_SZ - 1;\nloop invariant 0 <= j <= BASE_SZ - 1;\nloop invariant len >= 0;\nloop invariant len <= BASE_SZ;\nloop invariant i - j <= 0;\nloop invariant len == 0 ==> i == BASE_SZ;\nloop invariant len == 0 ==> j == BASE_SZ;\nloop invariant i > 0 ==> i - j >= 0;\nloop invariant i > 0 ==> j < BASE_SZ;\nloop invariant j > 0 ==> i < BASE_SZ;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main ()\n{\n  int BASE_SZ = unknown();\n  int __BLAST_NONDET = unknown();\n  \n  int i;\n  int j;\n  int len = BASE_SZ;\n\n  if(BASE_SZ > 0 ); else goto END;\n\n  {;\n//@ assert( 0 <= BASE_SZ-1 );\n}\n\n  if (len == 0)\n    goto END; \n  \n  i = 0;\n  j = 0;\n  /*@\n\n\nloop invariant i3: len >= 0;\nloop invariant i4: len <= BASE_SZ;\nloop invariant i5: i - j <= 0;\n\n\n\n\n\n*/\nwhile (1) {\n    if ( len == 0 ){ \n      goto END;\n    } else {\n      {;\n//@ assert( 0<= j );\n}\n {;\n//@ assert(j < BASE_SZ);\n}\n\n      {;\n//@ assert( 0<= i );\n}\n {;\n//@ assert(i < BASE_SZ );\n}\n\n      if ( __BLAST_NONDET ) {\n        i++;\n        j++;\n        goto END;\n      }\n    }\n    i ++;\n    j ++;\n    len --;\n  }\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 12,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= BASE_SZ && i <= len;\nloop invariant 0 <= j <= BASE_SZ && j <= len;\nloop invariant i <= j;\nloop invariant i == j || i == j + 1;\nloop invariant i <= BASE_SZ - 1;\nloop invariant j <= BASE_SZ - 1;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i <= len;\nloop invariant j <= len;\nloop invariant len >= 0;\nloop invariant len <= BASE_SZ;\nloop invariant BASE_SZ > 0;\nloop invariant len == 0 || __BLAST_NONDET;\nloop invariant i == BASE_SZ && j == BASE_SZ && len == 0;\nloop invariant i == BASE_SZ && j == BASE_SZ && len == 0 ==> len == 0;\nloop invariant i == BASE_SZ && j == BASE_SZ && len == 0 ==> __BLAST_NONDET;\nloop invariant i == BASE_SZ && j == BASE_SZ && len == 0 ==> i == len;\nloop invariant i == BASE_SZ && j == BASE_SZ && len == 0 ==> j == len;\nloop invariant i == BASE_SZ && j == BASE_SZ && len == 0 ==> i == j;\nloop invariant i == BASE_SZ && j == BASE_SZ && len == 0 ==> i == j + 1;\nloop invariant i == BASE_SZ && j == BASE_SZ && len == 0 ==> i <= BASE_SZ;\nloop invariant i == BASE_SZ && j == BASE_SZ && len == 0 ==> j <= BASE_SZ;\nloop invariant i == BASE_SZ && j == BASE_SZ && len == 0 ==> i >= 0;\nloop invariant i == BASE_SZ && j == BASE_SZ && len == 0 ==> j >= 0;\nloop invariant i == BASE_SZ && j == BASE_SZ && len == 0 ==> i <= len;\nloop invariant i == BASE_SZ && j == BASE_SZ && len == 0 ==> j <= len;\nloop invariant i == BASE_SZ && j == BASE_SZ && len == 0 ==> len >= 0;\nloop invariant i == BASE_SZ && j == BASE_SZ && len == 0 ==> len <= BASE_SZ;\nloop invariant i == BASE_SZ && j == BASE_SZ && len == 0 ==> BASE_SZ > 0;\nloop invariant i == BASE_SZ && j == BASE_SZ && len == 0 ==> __BLAST_NONDET;\nloop invariant i == BASE_SZ && j == BASE_SZ && len == 0 ==> len == 0;\nloop invariant i == BASE_SZ && j == BASE_SZ && len == 0 ==> i == len;\nloop invariant i == BASE_SZ && j == BASE_SZ && len == 0 ==> j == len;\nloop invariant i == BASE_SZ && j == BASE_SZ && len == 0 ==> i == j;\nloop invariant i == BASE_SZ && j == BASE_SZ && len == 0 ==> i == j + 1;\nloop invariant i == BASE_SZ && j == BASE_SZ && len == 0 ==> i <= BASE_SZ;\nloop invariant i == BASE_SZ && j == BASE_SZ && len == 0 ==> j <= BASE_SZ;\nloop invariant i == BASE_SZ && j == BASE_SZ && len == 0 ==> i >= 0;\nloop invariant i == BASE_SZ && j == BASE_SZ && len == 0 ==> j >= 0;\nloop invariant i == BASE_SZ && j == BASE_SZ && len == 0 ==> i <= len;\nloop invariant i == BASE_SZ && j == BASE_SZ && len == 0 ==> j <= len;\nloop invariant i == BASE_SZ && j == BASE_SZ && len == 0 ==> len >= 0;\nloop invariant i == BASE_SZ && j == BASE_SZ && len == 0 ==> len <= BASE_SZ;\nloop invariant i == BASE_SZ && j == BASE_SZ && len == 0 ==> BASE_SZ > 0;\nloop invariant i == BASE_SZ && j == BASE_SZ && len == 0 ==> __BLAST_NONDET;\nloop invariant i == BASE_SZ && j == BASE_SZ && len == 0 ==> len == 0;\nloop invariant i == BASE_SZ && j == BASE_SZ && len == 0 ==> i == len;\nloop invariant i == BASE_SZ && j == BASE_SZ && len == 0 ==> j == len;\nloop invariant i == BASE_SZ && j == BASE_SZ && len == 0 ==> i == j;\nloop invariant i == BASE_SZ && j == BASE_SZ && len == 0 ==> i == j + 1;\nloop invariant i == BASE_SZ && j == BASE_SZ && len == 0 ==> i <= BASE_SZ;\nloop invariant i == BASE_SZ && j == BASE_SZ && len == 0 ==> j <= BASE_SZ;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main ()\n{\n  int BASE_SZ = unknown();\n  int __BLAST_NONDET = unknown();\n  \n  int i;\n  int j;\n  int len = BASE_SZ;\n\n  if(BASE_SZ > 0 ); else goto END;\n\n  {;\n//@ assert( 0 <= BASE_SZ-1 );\n}\n\n  if (len == 0)\n    goto END; \n  \n  i = 0;\n  j = 0;\n  /*@\n\n\nloop invariant i3: i <= j;\nloop invariant i4: i == j || i == j + 1;\n\n\nloop invariant i7: i >= 0;\nloop invariant i8: j >= 0;\n\n\nloop invariant i11: len >= 0;\nloop invariant i12: len <= BASE_SZ;\nloop invariant i13: BASE_SZ > 0;\n\n\nloop invariant i16: i == BASE_SZ && j == BASE_SZ && len == 0 ==> len == 0;\n\n\n\nloop invariant i20: i == BASE_SZ && j == BASE_SZ && len == 0 ==> i == j;\n\nloop invariant i22: i == BASE_SZ && j == BASE_SZ && len == 0 ==> i <= BASE_SZ;\nloop invariant i23: i == BASE_SZ && j == BASE_SZ && len == 0 ==> j <= BASE_SZ;\nloop invariant i24: i == BASE_SZ && j == BASE_SZ && len == 0 ==> i >= 0;\nloop invariant i25: i == BASE_SZ && j == BASE_SZ && len == 0 ==> j >= 0;\n\n\nloop invariant i28: i == BASE_SZ && j == BASE_SZ && len == 0 ==> len >= 0;\nloop invariant i29: i == BASE_SZ && j == BASE_SZ && len == 0 ==> len <= BASE_SZ;\nloop invariant i30: i == BASE_SZ && j == BASE_SZ && len == 0 ==> BASE_SZ > 0;\n*/\nwhile (1) {\n    if ( len == 0 ){ \n      goto END;\n    } else {\n      {;\n//@ assert( 0<= j );\n}\n {;\n//@ assert(j < BASE_SZ);\n}\n\n      {;\n//@ assert( 0<= i );\n}\n {;\n//@ assert(i < BASE_SZ );\n}\n\n      if ( __BLAST_NONDET ) {\n        i++;\n        j++;\n        goto END;\n      }\n    }\n    i ++;\n    j ++;\n    len --;\n  }\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 30,
                "annotations": "```\n/*@\nloop invariant 0 <= j <= BASE_SZ - 1;\nloop invariant 0 <= i <= BASE_SZ - 1;\nloop invariant len = BASE_SZ - j - i;\nloop invariant (i = 0) ==> (j = 0);\nloop invariant (j = 0) ==> (i = 0);\nloop invariant (i = BASE_SZ - 1) ==> (j = BASE_SZ - 1);\nloop invariant (j = BASE_SZ - 1) ==> (i = BASE_SZ - 1);\nloop invariant (i = BASE_SZ - 1) ==> (len = 0);\nloop invariant (j = BASE_SZ - 1) ==> (len = 0);\nloop invariant (len = 0) ==> (i = BASE_SZ - 1);\nloop invariant (len = 0) ==> (j = BASE_SZ - 1);\nloop invariant (len = 0) ==> (i = 0);\nloop invariant (len = 0) ==> (j = 0);\nloop invariant (len = BASE_SZ - 1) ==> (i = 0);\nloop invariant (len = BASE_SZ - 1) ==> (j = 0);\nloop invariant (len = BASE_SZ - 1) ==> (i = BASE_SZ - 1);\nloop invariant (len = BASE_SZ - 1) ==> (j = BASE_SZ - 1);\nloop invariant (i = 0) ==> (len = BASE_SZ - 1);\nloop invariant (j = 0) ==> (len = BASE_SZ - 1);\nloop invariant (i = BASE_SZ - 1) ==> (len = 1);\nloop invariant (j = BASE_SZ - 1) ==> (len = 1);\nloop invariant (len = 1) ==> (i = BASE_SZ - 1);\nloop invariant (len = 1) ==> (j = BASE_SZ - 1);\nloop invariant (len = 1) ==> (i = 0);\nloop invariant (len = 1) ==> (j = 0);\nloop invariant (len = BASE_SZ - 1) ==> (i = 1);\nloop invariant (len = BASE_SZ - 1) ==> (j = 1);\nloop invariant (len = BASE_SZ - 1) ==> (i = BASE_SZ - 2);\nloop invariant (len = BASE_SZ - 1) ==> (j = BASE_SZ - 2);\nloop invariant (len = 0) ==> (i = BASE_SZ - 2);\nloop invariant (len = 0) ==> (j = BASE_SZ - 2);\nloop invariant (len = BASE_SZ - 1) ==> (i = 0);\nloop invariant (len = BASE_SZ - 1) ==> (j = 0);\nloop invariant (len = BASE_SZ - 1) ==> (i = BASE_SZ - 1);\nloop invariant (len = BASE_SZ - 1) ==> (j = BASE_SZ - 1);\nloop invariant (len = BASE_SZ - 1) ==> (i = BASE_SZ - 2);\nloop invariant (len = BASE_SZ - 1) ==> (j = BASE_SZ - 2);\nloop invariant (len = BASE_SZ - 1) ==> (i = 1);\nloop invariant (len = BASE_SZ - 1) ==> (j = 1);\nloop invariant (len = BASE_SZ - 1) ==> (i = 0);\nloop invariant (len = BASE_SZ - 1) ==> (j = 0);\nloop invariant (len = BASE_SZ - 1) ==> (i = BASE_SZ - 1);\nloop invariant (len = BASE_SZ - 1) ==> (j = BASE_SZ - 1);\nloop invariant (len = BASE_SZ - 1) ==> (i = BASE_SZ - 2);\nloop invariant (len = BASE_SZ - 1) ==> (j = BASE_SZ - 2);\nloop invariant (len = BASE_SZ - 1) ==> (i = 0);\nloop invariant (len = BASE_SZ - 1) ==> (j = 0);\nloop invariant (len = BASE_SZ - 1) ==> (i = BASE_SZ - 1);\nloop invariant (len = BASE_SZ - 1) ==> (j = BASE_SZ - 1);\nloop invariant (len = BASE_SZ - 1) ==> (i = BASE_SZ - 2);\nloop invariant (len = BASE_SZ - 1) ==> (j = BASE_SZ - 2);\nloop invariant (len = BASE_SZ - 1) ==> (i = 1);\nloop invariant (len = BASE_SZ - 1) ==> (j = 1);\nloop invariant (len = BASE_SZ - 1) ==> (i = 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main ()\n{\n  int BASE_SZ = unknown();\n  int __BLAST_NONDET = unknown();\n  \n  int i;\n  int j;\n  int len = BASE_SZ;\n\n  if(BASE_SZ > 0 ); else goto END;\n\n  {;\n//@ assert( 0 <= BASE_SZ-1 );\n}\n\n  if (len == 0)\n    goto END; \n  \n  i = 0;\n  j = 0;\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (1) {\n    if ( len == 0 ){ \n      goto END;\n    } else {\n      {;\n//@ assert( 0<= j );\n}\n {;\n//@ assert(j < BASE_SZ);\n}\n\n      {;\n//@ assert( 0<= i );\n}\n {;\n//@ assert(i < BASE_SZ );\n}\n\n      if ( __BLAST_NONDET ) {\n        i++;\n        j++;\n        goto END;\n      }\n    }\n    i ++;\n    j ++;\n    len --;\n  }\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= j <= BASE_SZ;\nloop invariant 0 <= i <= BASE_SZ;\nloop invariant 0 <= BASE_SZ <= 100000;\nloop invariant 0 <= len <= BASE_SZ;\nloop invariant len == BASE_SZ - (j - i);\nloop invariant j <= BASE_SZ - 1;\nloop invariant i <= BASE_SZ - 1;\nloop invariant j <= i;\nloop invariant i <= len;\nloop invariant j <= len;\nloop invariant i == j || (i > j && __BLAST_NONDET);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main ()\n{\n  int BASE_SZ = unknown();\n  int __BLAST_NONDET = unknown();\n  \n  int i;\n  int j;\n  int len = BASE_SZ;\n\n  if(BASE_SZ > 0 ); else goto END;\n\n  {;\n//@ assert( 0 <= BASE_SZ-1 );\n}\n\n  if (len == 0)\n    goto END; \n  \n  i = 0;\n  j = 0;\n  /*@\nloop invariant i1: 0 <= j <= BASE_SZ;\nloop invariant i2: 0 <= i <= BASE_SZ;\n\nloop invariant i4: 0 <= len <= BASE_SZ;\n\n\n\nloop invariant i8: j <= i;\n\n\nloop invariant i11: i == j || (i > j && __BLAST_NONDET);\n*/\nwhile (1) {\n    if ( len == 0 ){ \n      goto END;\n    } else {\n      {;\n//@ assert( 0<= j );\n}\n {;\n//@ assert(j < BASE_SZ);\n}\n\n      {;\n//@ assert( 0<= i );\n}\n {;\n//@ assert(i < BASE_SZ );\n}\n\n      if ( __BLAST_NONDET ) {\n        i++;\n        j++;\n        goto END;\n      }\n    }\n    i ++;\n    j ++;\n    len --;\n  }\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 21,
                "annotations": "```\n/*@\nloop invariant 0 <= len <= BASE_SZ;\nloop invariant 0 <= i <= BASE_SZ;\nloop invariant 0 <= j <= BASE_SZ;\nloop invariant i <= j;\nloop invariant len >= 0;\nloop invariant len <= BASE_SZ;\nloop invariant i <= len;\nloop invariant j <= len;\nloop invariant i == j ==> len == 0;\nloop invariant len > 0 ==> i < len;\nloop invariant len > 0 ==> j < len;\nloop invariant len == 0 ==> i == len;\nloop invariant len == 0 ==> j == len;\nloop invariant (len == 0) ==> (i == len && j == len);\nloop invariant (len > 0) ==> (i == j ==> i == len && j == len);\nloop invariant (len > 0) ==> (i == j ==> i == len - 1 && j == len - 1);\nloop invariant (len > 0) ==> (i == j ==> i == len - 2 && j == len - 2);\nloop invariant (len > 0) ==> (i == j ==> i == len - 3 && j == len - 3);\nloop invariant (len > 0) ==> (i == j ==> i == len - 4 && j == len - 4);\nloop invariant (len > 0) ==> (i == j ==> i == len - 5 && j == len - 5);\nloop invariant (len > 0) ==> (i == j ==> i == len - 6 && j == len - 6);\nloop invariant (len > 0) ==> (i == j ==> i == len - 7 && j == len - 7);\nloop invariant (len > 0) ==> (i == j ==> i == len - 8 && j == len - 8);\nloop invariant (len > 0) ==> (i == j ==> i == len - 9 && j == len - 9);\nloop invariant (len > 0) ==> (i == j ==> i == len - 10 && j == len - 10);\nloop invariant (len > 0) ==> (i == j ==> i == len - 11 && j == len - 11);\nloop invariant (len > 0) ==> (i == j ==> i == len - 12 && j == len - 12);\nloop invariant (len > 0) ==> (i == j ==> i == len - 13 && j == len - 13);\nloop invariant (len > 0) ==> (i == j ==> i == len - 14 && j == len - 14);\nloop invariant (len > 0) ==> (i == j ==> i == len - 15 && j == len - 15);\nloop invariant (len > 0) ==> (i == j ==> i == len - 16 && j == len - 16);\nloop invariant (len > 0) ==> (i == j ==> i == len - 17 && j == len - 17);\nloop invariant (len > 0) ==> (i == j ==> i == len - 18 && j == len - 18);\nloop invariant (len > 0) ==> (i == j ==> i == len - 19 && j == len - 19);\nloop invariant (len > 0) ==> (i == j ==> i == len - 20 && j == len - 20);\nloop invariant (len > 0) ==> (i == j ==> i == len - 21 && j == len - 21);\nloop invariant (len > 0) ==> (i == j ==> i == len - 22 && j == len - 22);\nloop invariant (len > 0) ==> (i == j ==> i == len - 23 && j == len - 23);\nloop invariant (len > 0) ==> (i == j ==> i == len - 24 && j == len - 24);\nloop invariant (len > 0) ==> (i == j ==> i == len - 25 && j == len - 25);\nloop invariant (len > 0) ==> (i == j ==> i == len - 26 && j == len - 26);\nloop invariant (len > 0) ==> (i == j ==> i == len - 27 && j == len - 27);\nloop invariant (len > 0) ==> (i == j ==> i == len - 28 && j == len - 28);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main ()\n{\n  int BASE_SZ = unknown();\n  int __BLAST_NONDET = unknown();\n  \n  int i;\n  int j;\n  int len = BASE_SZ;\n\n  if(BASE_SZ > 0 ); else goto END;\n\n  {;\n//@ assert( 0 <= BASE_SZ-1 );\n}\n\n  if (len == 0)\n    goto END; \n  \n  i = 0;\n  j = 0;\n  /*@\nloop invariant i1: 0 <= len <= BASE_SZ;\nloop invariant i2: 0 <= i <= BASE_SZ;\nloop invariant i3: 0 <= j <= BASE_SZ;\nloop invariant i4: i <= j;\nloop invariant i5: len >= 0;\nloop invariant i6: len <= BASE_SZ;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (1) {\n    if ( len == 0 ){ \n      goto END;\n    } else {\n      {;\n//@ assert( 0<= j );\n}\n {;\n//@ assert(j < BASE_SZ);\n}\n\n      {;\n//@ assert( 0<= i );\n}\n {;\n//@ assert(i < BASE_SZ );\n}\n\n      if ( __BLAST_NONDET ) {\n        i++;\n        j++;\n        goto END;\n      }\n    }\n    i ++;\n    j ++;\n    len --;\n  }\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant i == j;loop invariant i >= 0;loop invariant i < BASE_SZ;loop invariant j >= 0;loop invariant j < BASE_SZ;loop invariant len >= 0;loop invariant len <= BASE_SZ;loop invariant len == BASE_SZ - i - j;if (len == 0) { loop invariant i == len; loop invariant j == 0;}else { loop invariant i < len;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main ()\n{\n  int BASE_SZ = unknown();\n  int __BLAST_NONDET = unknown();\n  \n  int i;\n  int j;\n  int len = BASE_SZ;\n\n  if(BASE_SZ > 0 ); else goto END;\n\n  {;\n//@ assert( 0 <= BASE_SZ-1 );\n}\n\n  if (len == 0)\n    goto END; \n  \n  i = 0;\n  j = 0;\n  /*@\n\n*/\nwhile (1) {\n    if ( len == 0 ){ \n      goto END;\n    } else {\n      {;\n//@ assert( 0<= j );\n}\n {;\n//@ assert(j < BASE_SZ);\n}\n\n      {;\n//@ assert( 0<= i );\n}\n {;\n//@ assert(i < BASE_SZ );\n}\n\n      if ( __BLAST_NONDET ) {\n        i++;\n        j++;\n        goto END;\n      }\n    }\n    i ++;\n    j ++;\n    len --;\n  }\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= j <= BASE_SZ;\nloop invariant 0 <= i <= BASE_SZ;\nloop invariant j <= i;\nloop invariant len >= 0;\nloop invariant len <= BASE_SZ;\nloop invariant i <= len + j;\nloop invariant j <= len + i;\nloop invariant i <= BASE_SZ + j;\nloop invariant j <= BASE_SZ + i;\nloop invariant i <= BASE_SZ + BASE_SZ;\nloop invariant j <= BASE_SZ + BASE_SZ;\nloop invariant i <= 2 * BASE_SZ;\nloop invariant j <= 2 * BASE_SZ;\nloop invariant i <= 2 * BASE_SZ + BASE_SZ;\nloop invariant j <= 2 * BASE_SZ + BASE_SZ;\nloop invariant i <= 3 * BASE_SZ;\nloop invariant j <= 3 * BASE_SZ;\nloop invariant i <= 3 * BASE_SZ + BASE_SZ;\nloop invariant j <= 3 * BASE_SZ + BASE_SZ;\nloop invariant i <= 4 * BASE_SZ;\nloop invariant j <= 4 * BASE_SZ;\nloop invariant i <= 4 * BASE_SZ + BASE_SZ;\nloop invariant j <= 4 * BASE_SZ + BASE_SZ;\nloop invariant i <= 5 * BASE_SZ;\nloop invariant j <= 5 * BASE_SZ;\nloop invariant i <= 5 * BASE_SZ + BASE_SZ;\nloop invariant j <= 5 * BASE_SZ + BASE_SZ;\nloop invariant i <= 6 * BASE_SZ;\nloop invariant j <= 6 * BASE_SZ;\nloop invariant i <= 6 * BASE_SZ + BASE_SZ;\nloop invariant j <= 6 * BASE_SZ + BASE_SZ;\nloop invariant i <= 7 * BASE_SZ;\nloop invariant j <= 7 * BASE_SZ;\nloop invariant i <= 7 * BASE_SZ + BASE_SZ;\nloop invariant j <= 7 * BASE_SZ + BASE_SZ;\nloop invariant i <= 8 * BASE_SZ;\nloop invariant j <= 8 * BASE_SZ;\nloop invariant i <= 8 * BASE_SZ + BASE_SZ;\nloop invariant j <= 8 * BASE_SZ + BASE_SZ;\nloop invariant i <= 9 * BASE_SZ;\nloop invariant j <= 9 * BASE_SZ;\nloop invariant i <= 9 * BASE_SZ + BASE_SZ;\nloop invariant j <= 9 * BASE_SZ + BASE_SZ;\nloop invariant i <= 10 * BASE_SZ;\nloop invariant j <= 10 * BASE_SZ;\nloop invariant i <= 10 * BASE_SZ + BASE_SZ;\nloop invariant j <= 10 * BASE_SZ + BASE_SZ;\nloop invariant i <= 11 * BASE_SZ;\nloop invariant j <= 11 * BASE_SZ;\nloop invariant i <= 11 * BASE_SZ + BASE_SZ;\nloop invariant j <= 11 * BASE_SZ + BASE_SZ;\nloop invariant i <= 12 * BASE_SZ;\nloop invariant j <= 12 * BASE_SZ;\nloop invariant i <= 12 * BASE_SZ + BASE_SZ;\nloop invariant j <= 12 * BASE_SZ + BASE_SZ;\nloop invariant i <= 13 * BASE_SZ;\nloop invariant j <= 13 * BASE_SZ;\nloop invariant i <= 13 * BASE_SZ + BASE_SZ;\nloop invariant j <= 13 * BASE_SZ + BASE_SZ;\nloop invariant i <= 14 * BASE_SZ;\nloop invariant j <= 14 * BASE_SZ;\nloop invariant i <= 14 * BASE_SZ + BASE_SZ;\nloop invariant j <= 14 * BASE_SZ + BASE_SZ;\nloop invariant i <= 15 * BASE_SZ;\nloop invariant j <= 15 * BASE_SZ;\nloop invariant i <= 15 * BASE_SZ + BASE_SZ;\nloop invariant j <= 15 * BASE_SZ + BASE_SZ;\nloop invariant i <= 16 * BASE_SZ;\nloop invariant j <= 16 * BASE_SZ;\nloop invariant i <= 16 * BASE_SZ + BASE_SZ;\nloop invariant j <= 16 * BASE_SZ + BASE_SZ;\nloop invariant i <= 17 * BASE_SZ;\nloop invariant j <= 17 * BASE_SZ;\nloop invariant i <= 17 * BASE_SZ + BASE_SZ;\nloop invariant j <= 17 * BASE_SZ + BASE_SZ;\nloop invariant i <= 18 * BASE_SZ;\nloop invariant j <= 18 * BASE_SZ;\nloop invariant i <= 18 * BASE_SZ + BASE_SZ;\nloop invariant j <= 18 * BASE_SZ + BASE_SZ;\nloop invariant i <= 19 * BASE_SZ;\nloop invariant j <= 19 * BASE_SZ;\nloop invariant i <= 19 * BASE_SZ + BASE_SZ;\nloop invariant j <= 19 * BASE_SZ + BASE_SZ;\nloop invariant i <= 20 * BASE_SZ;\nloop invariant j <= 20 * BASE_SZ;\nloop invariant i <= 20 * BASE_SZ + BASE_SZ;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main ()\n{\n  int BASE_SZ = unknown();\n  int __BLAST_NONDET = unknown();\n  \n  int i;\n  int j;\n  int len = BASE_SZ;\n\n  if(BASE_SZ > 0 ); else goto END;\n\n  {;\n//@ assert( 0 <= BASE_SZ-1 );\n}\n\n  if (len == 0)\n    goto END; \n  \n  i = 0;\n  j = 0;\n  /*@\nloop invariant i1: 0 <= j <= BASE_SZ;\nloop invariant i2: 0 <= i <= BASE_SZ;\nloop invariant i3: j <= i;\nloop invariant i4: len >= 0;\nloop invariant i5: len <= BASE_SZ;\n\nloop invariant i7: j <= len + i;\nloop invariant i8: i <= BASE_SZ + j;\nloop invariant i9: j <= BASE_SZ + i;\nloop invariant i10: i <= BASE_SZ + BASE_SZ;\nloop invariant i11: j <= BASE_SZ + BASE_SZ;\nloop invariant i12: i <= 2 * BASE_SZ;\nloop invariant i13: j <= 2 * BASE_SZ;\nloop invariant i14: i <= 2 * BASE_SZ + BASE_SZ;\nloop invariant i15: j <= 2 * BASE_SZ + BASE_SZ;\nloop invariant i16: i <= 3 * BASE_SZ;\nloop invariant i17: j <= 3 * BASE_SZ;\nloop invariant i18: i <= 3 * BASE_SZ + BASE_SZ;\nloop invariant i19: j <= 3 * BASE_SZ + BASE_SZ;\nloop invariant i20: i <= 4 * BASE_SZ;\nloop invariant i21: j <= 4 * BASE_SZ;\nloop invariant i22: i <= 4 * BASE_SZ + BASE_SZ;\nloop invariant i23: j <= 4 * BASE_SZ + BASE_SZ;\nloop invariant i24: i <= 5 * BASE_SZ;\nloop invariant i25: j <= 5 * BASE_SZ;\nloop invariant i26: i <= 5 * BASE_SZ + BASE_SZ;\nloop invariant i27: j <= 5 * BASE_SZ + BASE_SZ;\nloop invariant i28: i <= 6 * BASE_SZ;\nloop invariant i29: j <= 6 * BASE_SZ;\nloop invariant i30: i <= 6 * BASE_SZ + BASE_SZ;\nloop invariant i31: j <= 6 * BASE_SZ + BASE_SZ;\nloop invariant i32: i <= 7 * BASE_SZ;\nloop invariant i33: j <= 7 * BASE_SZ;\nloop invariant i34: i <= 7 * BASE_SZ + BASE_SZ;\nloop invariant i35: j <= 7 * BASE_SZ + BASE_SZ;\nloop invariant i36: i <= 8 * BASE_SZ;\nloop invariant i37: j <= 8 * BASE_SZ;\nloop invariant i38: i <= 8 * BASE_SZ + BASE_SZ;\nloop invariant i39: j <= 8 * BASE_SZ + BASE_SZ;\nloop invariant i40: i <= 9 * BASE_SZ;\nloop invariant i41: j <= 9 * BASE_SZ;\nloop invariant i42: i <= 9 * BASE_SZ + BASE_SZ;\nloop invariant i43: j <= 9 * BASE_SZ + BASE_SZ;\nloop invariant i44: i <= 10 * BASE_SZ;\nloop invariant i45: j <= 10 * BASE_SZ;\nloop invariant i46: i <= 10 * BASE_SZ + BASE_SZ;\nloop invariant i47: j <= 10 * BASE_SZ + BASE_SZ;\nloop invariant i48: i <= 11 * BASE_SZ;\nloop invariant i49: j <= 11 * BASE_SZ;\nloop invariant i50: i <= 11 * BASE_SZ + BASE_SZ;\nloop invariant i51: j <= 11 * BASE_SZ + BASE_SZ;\nloop invariant i52: i <= 12 * BASE_SZ;\nloop invariant i53: j <= 12 * BASE_SZ;\nloop invariant i54: i <= 12 * BASE_SZ + BASE_SZ;\nloop invariant i55: j <= 12 * BASE_SZ + BASE_SZ;\nloop invariant i56: i <= 13 * BASE_SZ;\nloop invariant i57: j <= 13 * BASE_SZ;\nloop invariant i58: i <= 13 * BASE_SZ + BASE_SZ;\nloop invariant i59: j <= 13 * BASE_SZ + BASE_SZ;\nloop invariant i60: i <= 14 * BASE_SZ;\nloop invariant i61: j <= 14 * BASE_SZ;\nloop invariant i62: i <= 14 * BASE_SZ + BASE_SZ;\nloop invariant i63: j <= 14 * BASE_SZ + BASE_SZ;\nloop invariant i64: i <= 15 * BASE_SZ;\nloop invariant i65: j <= 15 * BASE_SZ;\nloop invariant i66: i <= 15 * BASE_SZ + BASE_SZ;\nloop invariant i67: j <= 15 * BASE_SZ + BASE_SZ;\nloop invariant i68: i <= 16 * BASE_SZ;\nloop invariant i69: j <= 16 * BASE_SZ;\nloop invariant i70: i <= 16 * BASE_SZ + BASE_SZ;\nloop invariant i71: j <= 16 * BASE_SZ + BASE_SZ;\nloop invariant i72: i <= 17 * BASE_SZ;\nloop invariant i73: j <= 17 * BASE_SZ;\nloop invariant i74: i <= 17 * BASE_SZ + BASE_SZ;\nloop invariant i75: j <= 17 * BASE_SZ + BASE_SZ;\nloop invariant i76: i <= 18 * BASE_SZ;\nloop invariant i77: j <= 18 * BASE_SZ;\nloop invariant i78: i <= 18 * BASE_SZ + BASE_SZ;\nloop invariant i79: j <= 18 * BASE_SZ + BASE_SZ;\nloop invariant i80: i <= 19 * BASE_SZ;\nloop invariant i81: j <= 19 * BASE_SZ;\nloop invariant i82: i <= 19 * BASE_SZ + BASE_SZ;\nloop invariant i83: j <= 19 * BASE_SZ + BASE_SZ;\nloop invariant i84: i <= 20 * BASE_SZ;\nloop invariant i85: j <= 20 * BASE_SZ;\nloop invariant i86: i <= 20 * BASE_SZ + BASE_SZ;\n*/\nwhile (1) {\n    if ( len == 0 ){ \n      goto END;\n    } else {\n      {;\n//@ assert( 0<= j );\n}\n {;\n//@ assert(j < BASE_SZ);\n}\n\n      {;\n//@ assert( 0<= i );\n}\n {;\n//@ assert(i < BASE_SZ );\n}\n\n      if ( __BLAST_NONDET ) {\n        i++;\n        j++;\n        goto END;\n      }\n    }\n    i ++;\n    j ++;\n    len --;\n  }\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant i >= 0;\nloop invariant i < BASE_SZ;\nloop invariant j >= 0;\nloop invariant j < BASE_SZ;\nloop invariant len >= 0;\nloop invariant (len == 0) ==> (i == j);\nloop invariant (len > 0) ==> (i == j - len);\nloop invariant (len > 0) ==> (j == i + len);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main ()\n{\n  int BASE_SZ = unknown();\n  int __BLAST_NONDET = unknown();\n  \n  int i;\n  int j;\n  int len = BASE_SZ;\n\n  if(BASE_SZ > 0 ); else goto END;\n\n  {;\n//@ assert( 0 <= BASE_SZ-1 );\n}\n\n  if (len == 0)\n    goto END; \n  \n  i = 0;\n  j = 0;\n  /*@\nloop invariant i1: i >= 0;\n\nloop invariant i3: j >= 0;\n\nloop invariant i5: len >= 0;\n\n\n\n*/\nwhile (1) {\n    if ( len == 0 ){ \n      goto END;\n    } else {\n      {;\n//@ assert( 0<= j );\n}\n {;\n//@ assert(j < BASE_SZ);\n}\n\n      {;\n//@ assert( 0<= i );\n}\n {;\n//@ assert(i < BASE_SZ );\n}\n\n      if ( __BLAST_NONDET ) {\n        i++;\n        j++;\n        goto END;\n      }\n    }\n    i ++;\n    j ++;\n    len --;\n  }\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= j <= BASE_SZ;\nloop invariant 0 <= i <= BASE_SZ;\nloop invariant len >= 0;\nloop invariant i == j;\nloop invariant len == BASE_SZ;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main ()\n{\n  int BASE_SZ = unknown();\n  int __BLAST_NONDET = unknown();\n  \n  int i;\n  int j;\n  int len = BASE_SZ;\n\n  if(BASE_SZ > 0 ); else goto END;\n\n  {;\n//@ assert( 0 <= BASE_SZ-1 );\n}\n\n  if (len == 0)\n    goto END; \n  \n  i = 0;\n  j = 0;\n  /*@\nloop invariant i1: 0 <= j <= BASE_SZ;\nloop invariant i2: 0 <= i <= BASE_SZ;\nloop invariant i3: len >= 0;\nloop invariant i4: i == j;\n\n*/\nwhile (1) {\n    if ( len == 0 ){ \n      goto END;\n    } else {\n      {;\n//@ assert( 0<= j );\n}\n {;\n//@ assert(j < BASE_SZ);\n}\n\n      {;\n//@ assert( 0<= i );\n}\n {;\n//@ assert(i < BASE_SZ );\n}\n\n      if ( __BLAST_NONDET ) {\n        i++;\n        j++;\n        goto END;\n      }\n    }\n    i ++;\n    j ++;\n    len --;\n  }\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 95: Assignment operators not allowed in annotations.",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main ()\n{\n  int BASE_SZ = unknown();\n  int __BLAST_NONDET = unknown();\n  \n  int i;\n  int j;\n  int len = BASE_SZ;\n\n  if(BASE_SZ > 0 ); else goto END;\n\n  {;\n//@ assert( 0 <= BASE_SZ-1 );\n}\n\n  if (len == 0)\n    goto END; \n  \n  i = 0;\n  j = 0;\n  /*@\nloop invariant i1: 0 <= i <= BASE_SZ;\nloop invariant i2: 0 <= j <= BASE_SZ;\nloop invariant i3: 0 <= len <= BASE_SZ;\nloop invariant i4: i <= j;\nloop invariant i5: i + j <= BASE_SZ;\nloop invariant i6: i + j <= len;\nloop invariant i7: i + j >= 0;\nloop invariant i8: i + j >= BASE_SZ - len;\nloop invariant i9: i + j >= BASE_SZ - BASE_SZ + 1;\nloop invariant i10: i + j >= 1;\nloop invariant i11: i + j >= BASE_SZ - BASE_SZ;\nloop invariant i12: i >= j;\nloop invariant i13: len >= 0;\nloop invariant i14: len <= BASE_SZ;\nloop invariant i15: len == BASE_SZ - (i + j);\nloop invariant i16: j <= i;\nloop invariant i17: j <= len;\nloop invariant i18: i <= len;\nloop invariant i19: j <= BASE_SZ - len;\nloop invariant i20: i <= BASE_SZ - len;\nloop invariant i21: __BLAST_NONDET ==> (i == j);\nloop invariant i22: __BLAST_NONDET ==> (len == 0);\nloop invariant i23: __BLAST_NONDET ==> (j == BASE_SZ);\nloop invariant i24: __BLAST_NONDET ==> (i == BASE_SZ);\nloop invariant i25: __BLAST_NONDET ==> (j == len);\nloop invariant i26: __BLAST_NONDET ==> (i == len);\nloop invariant i27: i >= 0;\nloop invariant i28: j >= 0;\nloop invariant i29: i <= BASE_SZ;\nloop invariant i30: j <= BASE_SZ;\nloop invariant i31: 0 <= i <= BASE_SZ - 1;\nloop invariant i32: 0 <= j <= BASE_SZ - 1;\nloop invariant i33: 0 <= j <= i;\nloop invariant i34: (len == 0) ==> (i == j);\nloop invariant i35: i - j <= 0;\nloop invariant i36: len == 0 ==> i == BASE_SZ;\nloop invariant i37: len == 0 ==> j == BASE_SZ;\nloop invariant i38: i > 0 ==> i - j >= 0;\nloop invariant i39: i > 0 ==> j < BASE_SZ;\nloop invariant i40: j > 0 ==> i < BASE_SZ;\nloop invariant i41: 0 <= i <= BASE_SZ && i <= len;\nloop invariant i42: 0 <= j <= BASE_SZ && j <= len;\nloop invariant i43: i == j || i == j + 1;\nloop invariant i44: i <= BASE_SZ - 1;\nloop invariant i45: j <= BASE_SZ - 1;\nloop invariant i46: BASE_SZ > 0;\nloop invariant i47: len == 0 || __BLAST_NONDET;\nloop invariant i48: i == BASE_SZ && j == BASE_SZ && len == 0;\nloop invariant i49: i == BASE_SZ && j == BASE_SZ && len == 0 ==> len == 0;\nloop invariant i50: i == BASE_SZ && j == BASE_SZ && len == 0 ==> __BLAST_NONDET;\nloop invariant i51: i == BASE_SZ && j == BASE_SZ && len == 0 ==> i == len;\nloop invariant i52: i == BASE_SZ && j == BASE_SZ && len == 0 ==> j == len;\nloop invariant i53: i == BASE_SZ && j == BASE_SZ && len == 0 ==> i == j;\nloop invariant i54: i == BASE_SZ && j == BASE_SZ && len == 0 ==> i == j + 1;\nloop invariant i55: i == BASE_SZ && j == BASE_SZ && len == 0 ==> i <= BASE_SZ;\nloop invariant i56: i == BASE_SZ && j == BASE_SZ && len == 0 ==> j <= BASE_SZ;\nloop invariant i57: i == BASE_SZ && j == BASE_SZ && len == 0 ==> i >= 0;\nloop invariant i58: i == BASE_SZ && j == BASE_SZ && len == 0 ==> j >= 0;\nloop invariant i59: i == BASE_SZ && j == BASE_SZ && len == 0 ==> i <= len;\nloop invariant i60: i == BASE_SZ && j == BASE_SZ && len == 0 ==> j <= len;\nloop invariant i61: i == BASE_SZ && j == BASE_SZ && len == 0 ==> len >= 0;\nloop invariant i62: i == BASE_SZ && j == BASE_SZ && len == 0 ==> len <= BASE_SZ;\nloop invariant i63: i == BASE_SZ && j == BASE_SZ && len == 0 ==> BASE_SZ > 0;\nloop invariant i64: len = BASE_SZ - j - i;\nloop invariant i65: (i = 0) ==> (j = 0);\nloop invariant i66: (j = 0) ==> (i = 0);\nloop invariant i67: (i = BASE_SZ - 1) ==> (j = BASE_SZ - 1);\nloop invariant i68: (j = BASE_SZ - 1) ==> (i = BASE_SZ - 1);\nloop invariant i69: (i = BASE_SZ - 1) ==> (len = 0);\nloop invariant i70: (j = BASE_SZ - 1) ==> (len = 0);\nloop invariant i71: (len = 0) ==> (i = BASE_SZ - 1);\nloop invariant i72: (len = 0) ==> (j = BASE_SZ - 1);\nloop invariant i73: (len = 0) ==> (i = 0);\nloop invariant i74: (len = 0) ==> (j = 0);\nloop invariant i75: (len = BASE_SZ - 1) ==> (i = 0);\nloop invariant i76: (len = BASE_SZ - 1) ==> (j = 0);\nloop invariant i77: (len = BASE_SZ - 1) ==> (i = BASE_SZ - 1);\nloop invariant i78: (len = BASE_SZ - 1) ==> (j = BASE_SZ - 1);\nloop invariant i79: (i = 0) ==> (len = BASE_SZ - 1);\nloop invariant i80: (j = 0) ==> (len = BASE_SZ - 1);\nloop invariant i81: (i = BASE_SZ - 1) ==> (len = 1);\nloop invariant i82: (j = BASE_SZ - 1) ==> (len = 1);\nloop invariant i83: (len = 1) ==> (i = BASE_SZ - 1);\nloop invariant i84: (len = 1) ==> (j = BASE_SZ - 1);\nloop invariant i85: (len = 1) ==> (i = 0);\nloop invariant i86: (len = 1) ==> (j = 0);\nloop invariant i87: (len = BASE_SZ - 1) ==> (i = 1);\nloop invariant i88: (len = BASE_SZ - 1) ==> (j = 1);\nloop invariant i89: (len = BASE_SZ - 1) ==> (i = BASE_SZ - 2);\nloop invariant i90: (len = BASE_SZ - 1) ==> (j = BASE_SZ - 2);\nloop invariant i91: (len = 0) ==> (i = BASE_SZ - 2);\nloop invariant i92: (len = 0) ==> (j = BASE_SZ - 2);\nloop invariant i93: 0 <= BASE_SZ <= 100000;\nloop invariant i94: len == BASE_SZ - (j - i);\nloop invariant i95: i == j || (i > j && __BLAST_NONDET);\nloop invariant i96: i == j ==> len == 0;\nloop invariant i97: len > 0 ==> i < len;\nloop invariant i98: len > 0 ==> j < len;\nloop invariant i99: len == 0 ==> i == len;\nloop invariant i100: len == 0 ==> j == len;\nloop invariant i101: (len == 0) ==> (i == len && j == len);\nloop invariant i102: (len > 0) ==> (i == j ==> i == len && j == len);\nloop invariant i103: (len > 0) ==> (i == j ==> i == len - 1 && j == len - 1);\nloop invariant i104: (len > 0) ==> (i == j ==> i == len - 2 && j == len - 2);\nloop invariant i105: (len > 0) ==> (i == j ==> i == len - 3 && j == len - 3);\nloop invariant i106: (len > 0) ==> (i == j ==> i == len - 4 && j == len - 4);\nloop invariant i107: (len > 0) ==> (i == j ==> i == len - 5 && j == len - 5);\nloop invariant i108: (len > 0) ==> (i == j ==> i == len - 6 && j == len - 6);\nloop invariant i109: (len > 0) ==> (i == j ==> i == len - 7 && j == len - 7);\nloop invariant i110: (len > 0) ==> (i == j ==> i == len - 8 && j == len - 8);\nloop invariant i111: (len > 0) ==> (i == j ==> i == len - 9 && j == len - 9);\nloop invariant i112: (len > 0) ==> (i == j ==> i == len - 10 && j == len - 10);\nloop invariant i113: (len > 0) ==> (i == j ==> i == len - 11 && j == len - 11);\nloop invariant i114: (len > 0) ==> (i == j ==> i == len - 12 && j == len - 12);\nloop invariant i115: (len > 0) ==> (i == j ==> i == len - 13 && j == len - 13);\nloop invariant i116: (len > 0) ==> (i == j ==> i == len - 14 && j == len - 14);\nloop invariant i117: (len > 0) ==> (i == j ==> i == len - 15 && j == len - 15);\nloop invariant i118: (len > 0) ==> (i == j ==> i == len - 16 && j == len - 16);\nloop invariant i119: (len > 0) ==> (i == j ==> i == len - 17 && j == len - 17);\nloop invariant i120: (len > 0) ==> (i == j ==> i == len - 18 && j == len - 18);\nloop invariant i121: (len > 0) ==> (i == j ==> i == len - 19 && j == len - 19);\nloop invariant i122: (len > 0) ==> (i == j ==> i == len - 20 && j == len - 20);\nloop invariant i123: (len > 0) ==> (i == j ==> i == len - 21 && j == len - 21);\nloop invariant i124: (len > 0) ==> (i == j ==> i == len - 22 && j == len - 22);\nloop invariant i125: (len > 0) ==> (i == j ==> i == len - 23 && j == len - 23);\nloop invariant i126: (len > 0) ==> (i == j ==> i == len - 24 && j == len - 24);\nloop invariant i127: (len > 0) ==> (i == j ==> i == len - 25 && j == len - 25);\nloop invariant i128: (len > 0) ==> (i == j ==> i == len - 26 && j == len - 26);\nloop invariant i129: (len > 0) ==> (i == j ==> i == len - 27 && j == len - 27);\nloop invariant i130: (len > 0) ==> (i == j ==> i == len - 28 && j == len - 28);\nloop invariant i131: i == j;loop invariant i >= 0;loop invariant i < BASE_SZ;loop invariant j >= 0;loop invariant j < BASE_SZ;loop invariant len >= 0;loop invariant len <= BASE_SZ;loop invariant len == BASE_SZ - i - j;if (len == 0) { loop invariant i == len; loop invariant j == 0;}else { loop invariant i < len;\nloop invariant i132: i <= len + j;\nloop invariant i133: j <= len + i;\nloop invariant i134: i <= BASE_SZ + j;\nloop invariant i135: j <= BASE_SZ + i;\nloop invariant i136: i <= BASE_SZ + BASE_SZ;\nloop invariant i137: j <= BASE_SZ + BASE_SZ;\nloop invariant i138: i <= 2 * BASE_SZ;\nloop invariant i139: j <= 2 * BASE_SZ;\nloop invariant i140: i <= 2 * BASE_SZ + BASE_SZ;\nloop invariant i141: j <= 2 * BASE_SZ + BASE_SZ;\nloop invariant i142: i <= 3 * BASE_SZ;\nloop invariant i143: j <= 3 * BASE_SZ;\nloop invariant i144: i <= 3 * BASE_SZ + BASE_SZ;\nloop invariant i145: j <= 3 * BASE_SZ + BASE_SZ;\nloop invariant i146: i <= 4 * BASE_SZ;\nloop invariant i147: j <= 4 * BASE_SZ;\nloop invariant i148: i <= 4 * BASE_SZ + BASE_SZ;\nloop invariant i149: j <= 4 * BASE_SZ + BASE_SZ;\nloop invariant i150: i <= 5 * BASE_SZ;\nloop invariant i151: j <= 5 * BASE_SZ;\nloop invariant i152: i <= 5 * BASE_SZ + BASE_SZ;\nloop invariant i153: j <= 5 * BASE_SZ + BASE_SZ;\nloop invariant i154: i <= 6 * BASE_SZ;\nloop invariant i155: j <= 6 * BASE_SZ;\nloop invariant i156: i <= 6 * BASE_SZ + BASE_SZ;\nloop invariant i157: j <= 6 * BASE_SZ + BASE_SZ;\nloop invariant i158: i <= 7 * BASE_SZ;\nloop invariant i159: j <= 7 * BASE_SZ;\nloop invariant i160: i <= 7 * BASE_SZ + BASE_SZ;\nloop invariant i161: j <= 7 * BASE_SZ + BASE_SZ;\nloop invariant i162: i <= 8 * BASE_SZ;\nloop invariant i163: j <= 8 * BASE_SZ;\nloop invariant i164: i <= 8 * BASE_SZ + BASE_SZ;\nloop invariant i165: j <= 8 * BASE_SZ + BASE_SZ;\nloop invariant i166: i <= 9 * BASE_SZ;\nloop invariant i167: j <= 9 * BASE_SZ;\nloop invariant i168: i <= 9 * BASE_SZ + BASE_SZ;\nloop invariant i169: j <= 9 * BASE_SZ + BASE_SZ;\nloop invariant i170: i <= 10 * BASE_SZ;\nloop invariant i171: j <= 10 * BASE_SZ;\nloop invariant i172: i <= 10 * BASE_SZ + BASE_SZ;\nloop invariant i173: j <= 10 * BASE_SZ + BASE_SZ;\nloop invariant i174: i <= 11 * BASE_SZ;\nloop invariant i175: j <= 11 * BASE_SZ;\nloop invariant i176: i <= 11 * BASE_SZ + BASE_SZ;\nloop invariant i177: j <= 11 * BASE_SZ + BASE_SZ;\nloop invariant i178: i <= 12 * BASE_SZ;\nloop invariant i179: j <= 12 * BASE_SZ;\nloop invariant i180: i <= 12 * BASE_SZ + BASE_SZ;\nloop invariant i181: j <= 12 * BASE_SZ + BASE_SZ;\nloop invariant i182: i <= 13 * BASE_SZ;\nloop invariant i183: j <= 13 * BASE_SZ;\nloop invariant i184: i <= 13 * BASE_SZ + BASE_SZ;\nloop invariant i185: j <= 13 * BASE_SZ + BASE_SZ;\nloop invariant i186: i <= 14 * BASE_SZ;\nloop invariant i187: j <= 14 * BASE_SZ;\nloop invariant i188: i <= 14 * BASE_SZ + BASE_SZ;\nloop invariant i189: j <= 14 * BASE_SZ + BASE_SZ;\nloop invariant i190: i <= 15 * BASE_SZ;\nloop invariant i191: j <= 15 * BASE_SZ;\nloop invariant i192: i <= 15 * BASE_SZ + BASE_SZ;\nloop invariant i193: j <= 15 * BASE_SZ + BASE_SZ;\nloop invariant i194: i <= 16 * BASE_SZ;\nloop invariant i195: j <= 16 * BASE_SZ;\nloop invariant i196: i <= 16 * BASE_SZ + BASE_SZ;\nloop invariant i197: j <= 16 * BASE_SZ + BASE_SZ;\nloop invariant i198: i <= 17 * BASE_SZ;\nloop invariant i199: j <= 17 * BASE_SZ;\nloop invariant i200: i <= 17 * BASE_SZ + BASE_SZ;\nloop invariant i201: j <= 17 * BASE_SZ + BASE_SZ;\nloop invariant i202: i <= 18 * BASE_SZ;\nloop invariant i203: j <= 18 * BASE_SZ;\nloop invariant i204: i <= 18 * BASE_SZ + BASE_SZ;\nloop invariant i205: j <= 18 * BASE_SZ + BASE_SZ;\nloop invariant i206: i <= 19 * BASE_SZ;\nloop invariant i207: j <= 19 * BASE_SZ;\nloop invariant i208: i <= 19 * BASE_SZ + BASE_SZ;\nloop invariant i209: j <= 19 * BASE_SZ + BASE_SZ;\nloop invariant i210: i <= 20 * BASE_SZ;\nloop invariant i211: j <= 20 * BASE_SZ;\nloop invariant i212: i <= 20 * BASE_SZ + BASE_SZ;\nloop invariant i213: i < BASE_SZ;\nloop invariant i214: j < BASE_SZ;\nloop invariant i215: (len > 0) ==> (i == j - len);\nloop invariant i216: (len > 0) ==> (j == i + len);\nloop invariant i217: i == j;\nloop invariant i218: len == BASE_SZ;\n*/\nwhile (1) {\n    if ( len == 0 ){ \n      goto END;\n    } else {\n      {;\n//@ assert( 0<= j );\n}\n {;\n//@ assert(j < BASE_SZ);\n}\n\n      {;\n//@ assert( 0<= i );\n}\n {;\n//@ assert(i < BASE_SZ );\n}\n\n      if ( __BLAST_NONDET ) {\n        i++;\n        j++;\n        goto END;\n      }\n    }\n    i ++;\n    j ++;\n    len --;\n  }\n\n END:  return 0;\n}",
        "combined_annotation_num_solver_calls": 70,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main ()\n{\n  int BASE_SZ = unknown();\n  int __BLAST_NONDET = unknown();\n  \n  int i;\n  int j;\n  int len = BASE_SZ;\n\n  if(BASE_SZ > 0 ); else goto END;\n\n  {;\n//@ assert( 0 <= BASE_SZ-1 );\n}\n\n  if (len == 0)\n    goto END; \n  \n  i = 0;\n  j = 0;\n  /*@\nloop invariant i1: 0 <= i <= BASE_SZ;\nloop invariant i2: 0 <= j <= BASE_SZ;\nloop invariant i3: 0 <= len <= BASE_SZ;\nloop invariant i4: i <= j;\n\n\nloop invariant i7: i + j >= 0;\nloop invariant i8: i + j >= BASE_SZ - len;\n\n\nloop invariant i11: i + j >= BASE_SZ - BASE_SZ;\nloop invariant i12: i >= j;\nloop invariant i13: len >= 0;\nloop invariant i14: len <= BASE_SZ;\n\nloop invariant i16: j <= i;\n\n\nloop invariant i19: j <= BASE_SZ - len;\nloop invariant i20: i <= BASE_SZ - len;\nloop invariant i21: __BLAST_NONDET ==> (i == j);\n\n\n\n\n\nloop invariant i27: i >= 0;\nloop invariant i28: j >= 0;\nloop invariant i29: i <= BASE_SZ;\nloop invariant i30: j <= BASE_SZ;\n\n\nloop invariant i33: 0 <= j <= i;\nloop invariant i34: (len == 0) ==> (i == j);\nloop invariant i35: i - j <= 0;\n\n\nloop invariant i38: i > 0 ==> i - j >= 0;\n\n\n\n\nloop invariant i43: i == j || i == j + 1;\n\n\nloop invariant i46: BASE_SZ > 0;\n\n\nloop invariant i49: i == BASE_SZ && j == BASE_SZ && len == 0 ==> len == 0;\n\n\n\nloop invariant i53: i == BASE_SZ && j == BASE_SZ && len == 0 ==> i == j;\n\nloop invariant i55: i == BASE_SZ && j == BASE_SZ && len == 0 ==> i <= BASE_SZ;\nloop invariant i56: i == BASE_SZ && j == BASE_SZ && len == 0 ==> j <= BASE_SZ;\nloop invariant i57: i == BASE_SZ && j == BASE_SZ && len == 0 ==> i >= 0;\nloop invariant i58: i == BASE_SZ && j == BASE_SZ && len == 0 ==> j >= 0;\n\n\nloop invariant i61: i == BASE_SZ && j == BASE_SZ && len == 0 ==> len >= 0;\nloop invariant i62: i == BASE_SZ && j == BASE_SZ && len == 0 ==> len <= BASE_SZ;\nloop invariant i63: i == BASE_SZ && j == BASE_SZ && len == 0 ==> BASE_SZ > 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i95: i == j || (i > j && __BLAST_NONDET);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i132: i <= len + j;\nloop invariant i133: j <= len + i;\nloop invariant i134: i <= BASE_SZ + j;\nloop invariant i135: j <= BASE_SZ + i;\nloop invariant i136: i <= BASE_SZ + BASE_SZ;\nloop invariant i137: j <= BASE_SZ + BASE_SZ;\nloop invariant i138: i <= 2 * BASE_SZ;\nloop invariant i139: j <= 2 * BASE_SZ;\nloop invariant i140: i <= 2 * BASE_SZ + BASE_SZ;\nloop invariant i141: j <= 2 * BASE_SZ + BASE_SZ;\nloop invariant i142: i <= 3 * BASE_SZ;\nloop invariant i143: j <= 3 * BASE_SZ;\nloop invariant i144: i <= 3 * BASE_SZ + BASE_SZ;\nloop invariant i145: j <= 3 * BASE_SZ + BASE_SZ;\nloop invariant i146: i <= 4 * BASE_SZ;\nloop invariant i147: j <= 4 * BASE_SZ;\nloop invariant i148: i <= 4 * BASE_SZ + BASE_SZ;\nloop invariant i149: j <= 4 * BASE_SZ + BASE_SZ;\nloop invariant i150: i <= 5 * BASE_SZ;\nloop invariant i151: j <= 5 * BASE_SZ;\nloop invariant i152: i <= 5 * BASE_SZ + BASE_SZ;\nloop invariant i153: j <= 5 * BASE_SZ + BASE_SZ;\nloop invariant i154: i <= 6 * BASE_SZ;\nloop invariant i155: j <= 6 * BASE_SZ;\nloop invariant i156: i <= 6 * BASE_SZ + BASE_SZ;\nloop invariant i157: j <= 6 * BASE_SZ + BASE_SZ;\nloop invariant i158: i <= 7 * BASE_SZ;\nloop invariant i159: j <= 7 * BASE_SZ;\nloop invariant i160: i <= 7 * BASE_SZ + BASE_SZ;\nloop invariant i161: j <= 7 * BASE_SZ + BASE_SZ;\nloop invariant i162: i <= 8 * BASE_SZ;\nloop invariant i163: j <= 8 * BASE_SZ;\nloop invariant i164: i <= 8 * BASE_SZ + BASE_SZ;\nloop invariant i165: j <= 8 * BASE_SZ + BASE_SZ;\nloop invariant i166: i <= 9 * BASE_SZ;\nloop invariant i167: j <= 9 * BASE_SZ;\nloop invariant i168: i <= 9 * BASE_SZ + BASE_SZ;\nloop invariant i169: j <= 9 * BASE_SZ + BASE_SZ;\nloop invariant i170: i <= 10 * BASE_SZ;\nloop invariant i171: j <= 10 * BASE_SZ;\nloop invariant i172: i <= 10 * BASE_SZ + BASE_SZ;\nloop invariant i173: j <= 10 * BASE_SZ + BASE_SZ;\nloop invariant i174: i <= 11 * BASE_SZ;\nloop invariant i175: j <= 11 * BASE_SZ;\nloop invariant i176: i <= 11 * BASE_SZ + BASE_SZ;\nloop invariant i177: j <= 11 * BASE_SZ + BASE_SZ;\nloop invariant i178: i <= 12 * BASE_SZ;\nloop invariant i179: j <= 12 * BASE_SZ;\nloop invariant i180: i <= 12 * BASE_SZ + BASE_SZ;\nloop invariant i181: j <= 12 * BASE_SZ + BASE_SZ;\nloop invariant i182: i <= 13 * BASE_SZ;\nloop invariant i183: j <= 13 * BASE_SZ;\nloop invariant i184: i <= 13 * BASE_SZ + BASE_SZ;\nloop invariant i185: j <= 13 * BASE_SZ + BASE_SZ;\nloop invariant i186: i <= 14 * BASE_SZ;\nloop invariant i187: j <= 14 * BASE_SZ;\nloop invariant i188: i <= 14 * BASE_SZ + BASE_SZ;\nloop invariant i189: j <= 14 * BASE_SZ + BASE_SZ;\nloop invariant i190: i <= 15 * BASE_SZ;\nloop invariant i191: j <= 15 * BASE_SZ;\nloop invariant i192: i <= 15 * BASE_SZ + BASE_SZ;\nloop invariant i193: j <= 15 * BASE_SZ + BASE_SZ;\nloop invariant i194: i <= 16 * BASE_SZ;\nloop invariant i195: j <= 16 * BASE_SZ;\nloop invariant i196: i <= 16 * BASE_SZ + BASE_SZ;\nloop invariant i197: j <= 16 * BASE_SZ + BASE_SZ;\nloop invariant i198: i <= 17 * BASE_SZ;\nloop invariant i199: j <= 17 * BASE_SZ;\nloop invariant i200: i <= 17 * BASE_SZ + BASE_SZ;\nloop invariant i201: j <= 17 * BASE_SZ + BASE_SZ;\nloop invariant i202: i <= 18 * BASE_SZ;\nloop invariant i203: j <= 18 * BASE_SZ;\nloop invariant i204: i <= 18 * BASE_SZ + BASE_SZ;\nloop invariant i205: j <= 18 * BASE_SZ + BASE_SZ;\nloop invariant i206: i <= 19 * BASE_SZ;\nloop invariant i207: j <= 19 * BASE_SZ;\nloop invariant i208: i <= 19 * BASE_SZ + BASE_SZ;\nloop invariant i209: j <= 19 * BASE_SZ + BASE_SZ;\nloop invariant i210: i <= 20 * BASE_SZ;\nloop invariant i211: j <= 20 * BASE_SZ;\nloop invariant i212: i <= 20 * BASE_SZ + BASE_SZ;\n\n\n\n\nloop invariant i217: i == j;\n\n*/\nwhile (1) {\n    if ( len == 0 ){ \n      goto END;\n    } else {\n      {;\n//@ assert( 0<= j );\n}\n {;\n//@ assert(j < BASE_SZ);\n}\n\n      {;\n//@ assert( 0<= i );\n}\n {;\n//@ assert(i < BASE_SZ );\n}\n\n      if ( __BLAST_NONDET ) {\n        i++;\n        j++;\n        goto END;\n      }\n    }\n    i ++;\n    j ++;\n    len --;\n  }\n\n END:  return 0;\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c"
        ],
        "skipped": [],
        "total": 24,
        "success_count": 23,
        "failure_count": 1,
        "success_rate": 0.9583333333333334
    }
}