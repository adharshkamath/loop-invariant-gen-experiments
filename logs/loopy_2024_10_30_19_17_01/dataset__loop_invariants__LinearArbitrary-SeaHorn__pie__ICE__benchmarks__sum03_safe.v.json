{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n  int v1, v2, v3;\n\n  while(1){\n    sn = sn + 1;\n    x++;\n    {;\n//@ assert(sn==x*1 || sn == 0);\n}\n\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n\n  }\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 1 <= sn <= x;\nloop invariant sn == x;\nloop invariant 1 <= x;\nloop invariant x <= loop1;\nloop invariant v1 <= loop1;\nloop invariant v2 <= loop1;\nloop invariant v3 <= loop1;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant sn >= 0;\nloop invariant sn <= loop1;\nloop invariant x >= 0;\nloop invariant sn <= x;\nloop invariant sn >= x;\nloop invariant sn == (x + 1);\nloop invariant sn == (x - 1);\nloop invariant sn == (x * 2);\nloop invariant sn == (x / 2);\nloop invariant sn == (x % 2);\nloop invariant sn == (x + n1);\nloop invariant sn == (x - n1);\nloop invariant sn == (x * n1);\nloop invariant sn == (x / n1);\nloop invariant sn == (x % n1);\nloop invariant sn == (x + loop1);\nloop invariant sn == (x - loop1);\nloop invariant sn == (x * loop1);\nloop invariant sn == (x / loop1);\nloop invariant sn == (x % loop1);\nloop invariant sn == (x + unknown_int());\nloop invariant sn == (x - unknown_int());\nloop invariant sn == (x * unknown_int());\nloop invariant sn == (x / unknown_int());\nloop invariant sn == (x % unknown_int());\nloop invariant sn == (x + unknown_uint());\nloop invariant sn == (x - unknown_uint());\nloop invariant sn == (x * unknown_uint());\nloop invariant sn == (x / unknown_uint());\nloop invariant sn == (x % unknown_uint());\nloop invariant sn == (x + unknown_int() + unknown_uint());\nloop invariant sn == (x - unknown_int() - unknown_uint());\nloop invariant sn == (x * unknown_int() * unknown_uint());\nloop invariant sn == (x / unknown_int() / unknown_uint());\nloop invariant sn == (x % unknown_int() % unknown_uint());\nloop invariant sn == (x + unknown_int() * unknown_uint());\nloop invariant sn == (x - unknown_int() * unknown_uint());\nloop invariant sn == (x * unknown_int() + unknown_uint());\nloop invariant sn == (x / unknown_int() + unknown_uint());\nloop invariant sn == (x % unknown_int() + unknown_uint());\nloop invariant sn == (x + unknown_int() / unknown_uint());\nloop invariant sn == (x - unknown_int() / unknown_uint());\nloop invariant sn == (x * unknown_int() % unknown_uint());\nloop invariant sn == (x / unknown_int() % unknown_uint());\nloop invariant sn == (x % unknown_int() % unknown_uint());\nloop invariant sn == (x + unknown_int() % unknown_uint());\nloop invariant sn == (x - unknown_int() % unknown_uint());\nloop invariant sn == (x * unknown_int() / unknown_uint());\nloop invariant sn == (x / unknown_int() / unknown_uint());\nloop invariant sn == (x % unknown_int() / unknown_uint());\nloop invariant sn == (x + unknown_int() / unknown_uint() + unknown_uint());\nloop invariant sn == (x - unknown_int() / unknown_uint() - unknown_uint());\nloop invariant sn == (x * unknown_int() / unknown_uint() * unknown_uint());\nloop invariant sn == (x / unknown_int() / unknown_uint() / unknown_uint());\nloop invariant sn == (x % unknown_int() / unknown_uint() % unknown_uint());\nloop invariant sn == (x + unknown_int() / unknown_uint() * unknown_uint());\nloop invariant sn == (x - unknown_int() / unknown_uint() * unknown_uint());\nloop invariant sn == (x * unknown_int() / unknown_uint() + unknown_uint());\nloop invariant sn == (x / unknown_int() / unknown_uint() + unknown_uint());\nloop invariant sn == (x % unknown_int() / unknown_uint() + unknown_uint());\nloop invariant sn == (x + unknown_int() / unknown_uint() / unknown_uint());\nloop invariant sn == (x - unknown_int() / unknown_uint() / unknown_uint());\nloop invariant sn == (x * unknown_int() / unknown_uint() % unknown_uint());\nloop invariant sn == (x / unknown_int() / unknown_uint() % unknown_uint());\nloop invariant sn == (x % unknown_int() / unknown_uint() % unknown_uint());\nloop invariant sn == (x + unknown_int() / unknown_uint() % unknown_uint());\nloop invariant sn == (x - unknown_int() / unknown_uint() % unknown_uint());\nloop invariant sn == (x * unknown_int() / unknown_uint() / unknown_uint());\nloop invariant sn == (x / unknown_int() / unknown_uint() / unknown_uint());\nloop invariant sn == (x % unknown_int() / unknown_uint() / unknown_uint());\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= sn;\nloop invariant 0 <= x;\nloop invariant sn == x * 1 || sn == 0;\nloop invariant sn == 0 ==> x == 0;\nloop invariant x == 0 ==> sn == 0;\nloop invariant sn >= 0;\nloop invariant x >= 0;\nloop invariant sn <= x;\nloop invariant x <= sn;\nloop invariant x == sn * 1;\nloop invariant sn == x * 1;\nloop invariant x == sn;\nloop invariant sn == x;\nloop invariant x < 2^32;\nloop invariant sn < 2^32;\nloop invariant x >= 0 && x <= 2^32 - 1;\nloop invariant sn >= 0 && sn <= 2^32 - 1;\nloop invariant x == sn * 1 ==> sn >= 0;\nloop invariant sn == x * 1 ==> x >= 0;\nloop invariant sn == 0 ==> x == 0;\nloop invariant x == 0 ==> sn == 0;\nloop invariant sn <= x * 1;\nloop invariant x * 1 <= sn;\nloop invariant sn <= x * 1 ==> sn >= 0;\nloop invariant x * 1 <= sn ==> x >= 0;\nloop invariant sn <= x * 1 ==> x >= 0;\nloop invariant x * 1 <= sn ==> sn >= 0;\nloop invariant sn == 0 ==> x == 0;\nloop invariant x == 0 ==> sn == 0;\nloop invariant sn == x * 1;\nloop invariant x * 1 == sn;\nloop invariant sn == x;\nloop invariant x == sn;\nloop invariant x < 2^32;\nloop invariant sn < 2^32;\nloop invariant x >= 0 && x <= 2^32 - 1;\nloop invariant sn >= 0 && sn <= 2^32 - 1;\nloop invariant x == sn * 1 ==> sn >= 0;\nloop invariant sn == x * 1 ==> x >= 0;\nloop invariant sn == 0 ==> x == 0;\nloop invariant x == 0 ==> sn == 0;\nloop invariant sn <= x * 1;\nloop invariant x * 1 <= sn;\nloop invariant sn <= x * 1 ==> sn >= 0;\nloop invariant x * 1 <= sn ==> x >= 0;\nloop invariant sn <= x * 1 ==> x >= 0;\nloop invariant x * 1 <= sn ==> sn >= 0;\nloop invariant sn == 0 ==> x == 0;\nloop invariant x == 0 ==> sn == 0;\nloop invariant sn == x * 1;\nloop invariant x * 1 == sn;\nloop invariant sn == x;\nloop invariant x == sn;\nloop invariant x < 2^32;\nloop invariant sn < 2^32;\nloop invariant x >= 0 && x <= 2^32 - 1;\nloop invariant sn >= 0 && sn <= 2^32 - 1;\nloop invariant x == sn * 1 ==> sn >= 0;\nloop invariant sn == x * 1 ==> x >= 0;\nloop invariant sn == 0 ==> x == 0;\nloop invariant x == 0 ==> sn == 0;\nloop invariant sn <= x * 1;\nloop invariant x * 1 <= sn;\nloop invariant sn <= x * 1 ==> sn >= 0;\nloop invariant x * 1 <= sn ==> x >= 0;\nloop invariant sn <= x * 1 ==> x >= 0;\nloop invariant x * 1 <= sn ==> sn >= 0;\nloop invariant sn == 0 ==> x == 0;\nloop invariant x == 0 ==> sn == 0;\nloop invariant sn == x * 1;\nloop invariant x * 1 == sn;\nloop invariant sn == x;\nloop invariant x == sn;\nloop invariant x < 2^32;\nloop invariant sn < 2^32;\nloop invariant x >= 0 && x <= 2^32 - 1;\nloop invariant sn >= 0 && sn <= 2^32 - 1;\nloop invariant x == sn * 1 ==> sn >= 0;\nloop invariant sn == x * 1 ==> x >= 0;\nloop invariant sn == 0 ==> x == 0;\nloop invariant x == 0 ==> sn == 0;\nloop invariant sn <= x * 1;\nloop invariant x * 1 <= sn;\nloop invariant sn <= x * 1 ==> sn >= 0;\nloop invariant x * 1 <= sn ==> x >= 0;\nloop invariant sn <= x * 1 ==> x >= 0;\nloop invariant x * 1 <= sn ==> sn >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= sn <= 2^32-1;\nloop invariant 1 <= x <= 2^32-1;\nloop invariant v1 >= -2^31;\nloop invariant v1 <= 2^31-1;\nloop invariant v2 >= -2^31;\nloop invariant v2 <= 2^31-1;\nloop invariant v3 >= -2^31;\nloop invariant v3 <= 2^31-1;\nloop invariant (x == 1) ==> (sn == 0);\nloop invariant (x == 1) ==> (v1 == 0);\nloop invariant (x == 1) ==> (v2 == 0);\nloop invariant (x == 1) ==> (v3 == 0);\nloop invariant (x > 1) ==> (sn >= x);\nloop invariant (x > 1) ==> (v1 >= 0);\nloop invariant (x > 1) ==> (v2 >= 0);\nloop invariant (x > 1) ==> (v3 >= 0);\nloop invariant (x > 1) ==> (v1 <= 2^31-1);\nloop invariant (x > 1) ==> (v2 <= 2^31-1);\nloop invariant (x > 1) ==> (v3 <= 2^31-1);\nloop invariant (x > 1) ==> (v1 == v1);\nloop invariant (x > 1) ==> (v2 == v2);\nloop invariant (x > 1) ==> (v3 == v3);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 2147483647;\nloop invariant 0 <= sn <= 2147483647;\nloop invariant x <= sn;\nloop invariant sn <= x * 1 || sn == 0;\nloop invariant v1 >= INT_MIN && v1 <= INT_MAX;\nloop invariant v2 >= INT_MIN && v2 <= INT_MAX;\nloop invariant v3 >= INT_MIN && v3 <= INT_MAX;\nloop invariant x >= 1 || sn == 0;\nloop invariant sn >= 1 || x == 0;\nloop invariant sn <= sn + 1;\nloop invariant x <= x + 1;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= sn <= 1 + n1;\nloop invariant n1 >= 1;\nloop invariant 0 <= x <= 1 + n1;\nloop invariant v1 >= INT_MIN;\nloop invariant v1 <= INT_MAX;\nloop invariant v2 >= INT_MIN;\nloop invariant v2 <= INT_MAX;\nloop invariant v3 >= INT_MIN;\nloop invariant v3 <= INT_MAX;\nloop invariant 1 <= sn <= 1 + n1;\nloop invariant n1 >= 1;\nloop invariant 0 <= x <= 1 + n1;\nloop invariant v1 >= INT_MIN;\nloop invariant v1 <= INT_MAX;\nloop invariant v2 >= INT_MIN;\nloop invariant v2 <= INT_MAX;\nloop invariant v3 >= INT_MIN;\nloop invariant v3 <= INT_MAX;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= loop1;\nloop invariant 0 <= sn <= n1;\nloop invariant sn == x * 1 || sn == 0;\nloop invariant v1 == 0 || v1 == 1;\nloop invariant v2 == 0 || v2 == 1;\nloop invariant v3 == 0 || v3 == 1;\nloop invariant (v1 && v2 && v3) ==> (0 <= x <= loop1);\nloop invariant (v1 && v2 && v3) ==> (0 <= sn <= n1);\nloop invariant (v1 && v2 && v3) ==> (sn == x * 1 || sn == 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 2^32 - 1;\nloop invariant x <= sn;\nloop invariant sn <= x + 1;\nloop invariant sn <= 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= sn <= 2^31 - 1;\nloop invariant 0 <= loop1 <= 4294967295;\nloop invariant 0 <= n1 <= 4294967295;\nloop invariant 0 <= x <= 4294967295;\nloop invariant (sn == x * 1 || sn == 0);\nloop invariant v1 == unknown_int();\nloop invariant v2 == unknown_int();\nloop invariant v3 == unknown_int();\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= n1;\nloop invariant sn >= 0;\nloop invariant sn <= n1;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant v1 <= 1;\nloop invariant v2 <= 1;\nloop invariant v3 <= 1;\nloop invariant v1 + v2 + v3 <= 3;\nloop invariant v1 + v2 + v3 >= 1;\nloop invariant x <= n1;\nloop invariant x >= 0;\nloop invariant sn >= 0;\nloop invariant sn <= n1;\nloop invariant x <= n1;\nloop invariant x >= 0;\nloop invariant sn >= 0;\nloop invariant sn <= n1;\nloop invariant x <= n1;\nloop invariant x >= 0;\nloop invariant sn >= 0;\nloop invariant sn <= n1;\nloop invariant x <= n1;\nloop invariant x >= 0;\nloop invariant sn >= 0;\nloop invariant sn <= n1;\nloop invariant x <= n1;\nloop invariant x >= 0;\nloop invariant sn >= 0;\nloop invariant sn <= n1;\nloop invariant x <= n1;\nloop invariant x >= 0;\nloop invariant sn >= 0;\nloop invariant sn <= n1;\nloop invariant x <= n1;\nloop invariant x >= 0;\nloop invariant sn >= 0;\nloop invariant sn <= n1;\nloop invariant x <= n1;\nloop invariant x >= 0;\nloop invariant sn >= 0;\nloop invariant sn <= n1;\nloop invariant x <= n1;\nloop invariant x >= 0;\nloop invariant sn >= 0;\nloop invariant sn <= n1;\nloop invariant x <= n1;\nloop invariant x >= 0;\nloop invariant sn >= 0;\nloop invariant sn <= n1;\nloop invariant x <= n1;\nloop invariant x >= 0;\nloop invariant sn >= 0;\nloop invariant sn <= n1;\nloop invariant x <= n1;\nloop invariant x >= 0;\nloop invariant sn >= 0;\nloop invariant sn <= n1;\nloop invariant x <= n1;\nloop invariant x >= 0;\nloop invariant sn >= 0;\nloop invariant sn <= n1;\nloop invariant x <= n1;\nloop invariant x >= 0;\nloop invariant sn >= 0;\nloop invariant sn <= n1;\nloop invariant x <= n1;\nloop invariant x >= 0;\nloop invariant sn >= 0;\nloop invariant sn <= n1;\nloop invariant x <= n1;\nloop invariant x >= 0;\nloop invariant sn >= 0;\nloop invariant sn <= n1;\nloop invariant x <= n1;\nloop invariant x >= 0;\nloop invariant sn >= 0;\nloop invariant sn <= n1;\nloop invariant x <= n1;\nloop invariant x >= 0;\nloop invariant sn >= 0;\nloop invariant sn <= n1;\nloop invariant x <= n1;\nloop invariant x >= 0;\nloop invariant sn >= 0;\nloop invariant sn <= n1;\nloop invariant x <= n1;\nloop invariant x >= 0;\nloop invariant sn >= 0;\nloop invariant sn <= n1;\nloop invariant x <= n1;\nloop invariant x >= 0;\nloop invariant sn >= 0;\nloop invariant sn <= n1;\nloop invariant x <= n1;\nloop invariant x >= 0;\nloop invariant sn >= 0;\nloop invariant sn <= n1;\nloop invariant x <= n1;\nloop invariant x >= 0;\nloop invariant sn >= 0;\nloop invariant sn <= n1;\nloop invariant x <= n1;\nloop invariant x >= 0;\nloop invariant sn >= 0;\nloop invariant sn <= n1;\nloop invariant x <= n1;\nloop invariant x >= 0;\nloop invariant sn >= 0;\nloop invariant sn <= n1;\nloop invariant x <= n1;\nloop invariant x >= 0;\nloop invariant sn >= 0;\nloop invariant sn <= n1;\nloop invariant x <= n1;\nloop invariant x >= 0;\nloop invariant sn >= 0;\nloop invariant sn <= n1;\nloop invariant x <= n1;\nloop invariant x >= 0;\nloop invariant sn >= 0;\nloop invariant sn <= n1;\nloop invariant x <= n1;\nloop invariant x >= 0;\nloop invariant sn >= 0;\nloop invariant sn <= n1;\nloop invariant x <= n1;\nloop invariant x >= 0;\nloop invariant sn >= 0;\nloop invariant sn <= n1;\nloop invariant x <= n1;\nloop invariant x >= 0;\nloop invariant sn >= 0;\nloop invariant sn <= n1;\nloop invariant x <= n1;\nloop invariant x >= 0;\nloop invariant sn >= 0;\nloop invariant sn <= n1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= sn <= 2147483648;\nloop invariant 0 <= loop1 <= 2147483648;\nloop invariant 0 <= n1 <= 2147483648;\nloop invariant 0 <= x <= 4294967295;\nloop invariant v1 == v1;\nloop invariant v2 == v2;\nloop invariant v3 == v3;\nloop invariant sn % 2 == loop1 % 2;\nloop invariant sn % 2 == n1 % 2;\nloop invariant sn % 2 == x % 2;\nloop invariant sn % 2 == v1 % 2;\nloop invariant sn % 2 == v2 % 2;\nloop invariant sn % 2 == v3 % 2;\nloop invariant sn == x + sn / 2;\nloop invariant sn == x + sn / 2 * x;\nloop invariant sn == x + sn / 2 * x * (x + 1);\nloop invariant sn == x + sn / 2 * x * (x + 1) / 2;\nloop invariant sn == x + sn / 2 * x * (x + 1) / 2 * (x + 2);\nloop invariant sn == x + sn / 2 * x * (x + 1) / 2 * (x + 2) / 3;\nloop invariant sn == x + sn / 2 * x * (x + 1) / 2 * (x + 2) / 3 * (x + 3);\nloop invariant sn == x + sn / 2 * x * (x + 1) / 2 * (x + 2) / 3 * (x + 3) / 4;\nloop invariant sn == x + sn / 2 * x * (x + 1) / 2 * (x + 2) / 3 * (x + 3) / 4 * (x + 4);\nloop invariant sn == x + sn / 2 * x * (x + 1) / 2 * (x + 2) / 3 * (x + 3) / 4 * (x + 4) / 5;\nloop invariant sn == x + sn / 2 * x * (x + 1) / 2 * (x + 2) / 3 * (x + 3) / 4 * (x + 4) / 5 * (x + 5);\nloop invariant sn == x + sn / 2 * x * (x + 1) / 2 * (x + 2) / 3 * (x + 3) / 4 * (x + 4) / 5 * (x + 5) / 6;\nloop invariant sn == x + sn / 2 * x * (x + 1) / 2 * (x + 2) / 3 * (x + 3) / 4 * (x + 4) / 5 * (x + 5) / 6 * (x + 6);\nloop invariant sn == x + sn / 2 * x * (x + 1) / 2 * (x + 2) / 3 * (x + 3) / 4 * (x + 4) / 5 * (x + 5) / 6 * (x + 6) / 7;\nloop invariant sn == x + sn / 2 * x * (x + 1) / 2 * (x + 2) / 3 * (x + 3) / 4 * (x + 4) / 5 * (x + 5) / 6 * (x + 6) / 7 * (x + 7);\nloop invariant sn == x + sn / 2 * x * (x + 1) / 2 * (x + 2) / 3 * (x + 3) / 4 * (x + 4) / 5 * (x + 5) / 6 * (x + 6) / 7 * (x + 7) / 8;\n*/\n```",
            "```\n/*@\nloop invariant sn >= 0;\nloop invariant x >= 0;\nloop invariant sn <= x * 1 + 1;\nloop invariant sn >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= sn <= x*1;\nloop invariant sn <= n1;\nloop invariant x <= loop1;\nloop invariant (v1 ==> sn <= sn + 1);\nloop invariant (v2 ==> sn <= sn + 1);\nloop invariant (v3 ==> sn <= sn + 1);\nloop invariant sn <= (x + unknown_uint());\nloop invariant x <= (sn - unknown_uint());\n*/\n```",
            "```\n/*@\nloop invariant x >= 0;\nloop invariant x <= loop1;\nloop invariant n1 <= loop1;\nloop invariant sn >= 0;\nloop invariant sn <= loop1;\nloop invariant sn <= n1;\nloop invariant sn <= n1 * n1;\nloop invariant sn <= n1 * n1 + n1 * 2;\nloop invariant sn <= n1 * n1 + n1 * 2 + n1 * 3;\nloop invariant sn <= n1 * n1 + n1 * 2 + n1 * 3 + n1 * 4;\nloop invariant sn <= n1 * n1 + n1 * 2 + n1 * 3 + n1 * 4 + n1 * 5;\nloop invariant sn <= n1 * n1 + n1 * 2 + n1 * 3 + n1 * 4 + n1 * 5 + n1 * 6;\nloop invariant sn <= n1 * n1 + n1 * 2 + n1 * 3 + n1 * 4 + n1 * 5 + n1 * 6 + n1 * 7;\nloop invariant sn <= n1 * n1 + n1 * 2 + n1 * 3 + n1 * 4 + n1 * 5 + n1 * 6 + n1 * 7 + n1 * 8;\nloop invariant sn <= n1 * n1 + n1 * 2 + n1 * 3 + n1 * 4 + n1 * 5 + n1 * 6 + n1 * 7 + n1 * 8 + n1 * 9;\nloop invariant sn <= n1 * n1 + n1 * 2 + n1 * 3 + n1 * 4 + n1 * 5 + n1 * 6 + n1 * 7 + n1 * 8 + n1 * 9 + n1 * 10;\nloop invariant sn <= n1 * n1 + n1 * 2 + n1 * 3 + n1 * 4 + n1 * 5 + n1 * 6 + n1 * 7 + n1 * 8 + n1 * 9 + n1 * 10 + n1 * 11;\nloop invariant sn <= n1 * n1 + n1 * 2 + n1 * 3 + n1 * 4 + n1 * 5 + n1 * 6 + n1 * 7 + n1 * 8 + n1 * 9 + n1 * 10 + n1 * 11 + n1 * 12;\nloop invariant sn <= n1 * n1 + n1 * 2 + n1 * 3 + n1 * 4 + n1 * 5 + n1 * 6 + n1 * 7 + n1 * 8 + n1 * 9 + n1 * 10 + n1 * 11 + n1 * 12 + n1 * 13;\nloop invariant sn <= n1 * n1 + n1 * 2 + n1 * 3 + n1 * 4 + n1 * 5 + n1 * 6 + n1 * 7 + n1 * 8 + n1 * 9 + n1 * 10 + n1 * 11 + n1 * 12 + n1 * 13 + n1 * 14;\nloop invariant sn <= n1 * n1 + n1 * 2 + n1 * 3 + n1 * 4 + n1 * 5 + n1 * 6 + n1 * 7 + n1 * 8 + n1 * 9 + n1 * 10 + n1 * 11 + n1 * 12 + n1 * 13 + n1 * 14 + n1 * 15;\nloop invariant sn <= n1 * n1 + n1 * 2 + n1 * 3 + n1 * 4 + n1 * 5 + n1 * 6 + n1 * 7 + n1 * 8 + n1 * 9 + n1 * 10 + n1 * 11 + n1 * 12 + n1 * 13 + n1 * 14 + n1 * 15 + n1 * 16;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= sn <= 2^31-1;\nloop invariant 0 <= x <= 2^31-1;\nloop invariant 0 <= v1 <= 2^31-1;\nloop invariant -2^31 <= v2 <= 2^31-1;\nloop invariant -2^31 <= v3 <= 2^31-1;\nloop invariant loop1 <= 2^31-1;\nloop invariant n1 <= 2^31-1;\nloop invariant sn == x * 1 || sn == 0;\nloop invariant x <= loop1;\nloop invariant v1 <= 2^31-1;\nloop invariant -2^31 <= v2 <= 2^31-1;\nloop invariant -2^31 <= v3 <= 2^31-1;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 55,
                "annotations": "```\n/*@\nloop invariant 1 <= sn <= x;\nloop invariant sn == x;\nloop invariant 1 <= x;\nloop invariant x <= loop1;\nloop invariant v1 <= loop1;\nloop invariant v2 <= loop1;\nloop invariant v3 <= loop1;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant sn >= 0;\nloop invariant sn <= loop1;\nloop invariant x >= 0;\nloop invariant sn <= x;\nloop invariant sn >= x;\nloop invariant sn == (x + 1);\nloop invariant sn == (x - 1);\nloop invariant sn == (x * 2);\nloop invariant sn == (x / 2);\nloop invariant sn == (x % 2);\nloop invariant sn == (x + n1);\nloop invariant sn == (x - n1);\nloop invariant sn == (x * n1);\nloop invariant sn == (x / n1);\nloop invariant sn == (x % n1);\nloop invariant sn == (x + loop1);\nloop invariant sn == (x - loop1);\nloop invariant sn == (x * loop1);\nloop invariant sn == (x / loop1);\nloop invariant sn == (x % loop1);\nloop invariant sn == (x + unknown_int());\nloop invariant sn == (x - unknown_int());\nloop invariant sn == (x * unknown_int());\nloop invariant sn == (x / unknown_int());\nloop invariant sn == (x % unknown_int());\nloop invariant sn == (x + unknown_uint());\nloop invariant sn == (x - unknown_uint());\nloop invariant sn == (x * unknown_uint());\nloop invariant sn == (x / unknown_uint());\nloop invariant sn == (x % unknown_uint());\nloop invariant sn == (x + unknown_int() + unknown_uint());\nloop invariant sn == (x - unknown_int() - unknown_uint());\nloop invariant sn == (x * unknown_int() * unknown_uint());\nloop invariant sn == (x / unknown_int() / unknown_uint());\nloop invariant sn == (x % unknown_int() % unknown_uint());\nloop invariant sn == (x + unknown_int() * unknown_uint());\nloop invariant sn == (x - unknown_int() * unknown_uint());\nloop invariant sn == (x * unknown_int() + unknown_uint());\nloop invariant sn == (x / unknown_int() + unknown_uint());\nloop invariant sn == (x % unknown_int() + unknown_uint());\nloop invariant sn == (x + unknown_int() / unknown_uint());\nloop invariant sn == (x - unknown_int() / unknown_uint());\nloop invariant sn == (x * unknown_int() % unknown_uint());\nloop invariant sn == (x / unknown_int() % unknown_uint());\nloop invariant sn == (x % unknown_int() % unknown_uint());\nloop invariant sn == (x + unknown_int() % unknown_uint());\nloop invariant sn == (x - unknown_int() % unknown_uint());\nloop invariant sn == (x * unknown_int() / unknown_uint());\nloop invariant sn == (x / unknown_int() / unknown_uint());\nloop invariant sn == (x % unknown_int() / unknown_uint());\nloop invariant sn == (x + unknown_int() / unknown_uint() + unknown_uint());\nloop invariant sn == (x - unknown_int() / unknown_uint() - unknown_uint());\nloop invariant sn == (x * unknown_int() / unknown_uint() * unknown_uint());\nloop invariant sn == (x / unknown_int() / unknown_uint() / unknown_uint());\nloop invariant sn == (x % unknown_int() / unknown_uint() % unknown_uint());\nloop invariant sn == (x + unknown_int() / unknown_uint() * unknown_uint());\nloop invariant sn == (x - unknown_int() / unknown_uint() * unknown_uint());\nloop invariant sn == (x * unknown_int() / unknown_uint() + unknown_uint());\nloop invariant sn == (x / unknown_int() / unknown_uint() + unknown_uint());\nloop invariant sn == (x % unknown_int() / unknown_uint() + unknown_uint());\nloop invariant sn == (x + unknown_int() / unknown_uint() / unknown_uint());\nloop invariant sn == (x - unknown_int() / unknown_uint() / unknown_uint());\nloop invariant sn == (x * unknown_int() / unknown_uint() % unknown_uint());\nloop invariant sn == (x / unknown_int() / unknown_uint() % unknown_uint());\nloop invariant sn == (x % unknown_int() / unknown_uint() % unknown_uint());\nloop invariant sn == (x + unknown_int() / unknown_uint() % unknown_uint());\nloop invariant sn == (x - unknown_int() / unknown_uint() % unknown_uint());\nloop invariant sn == (x * unknown_int() / unknown_uint() / unknown_uint());\nloop invariant sn == (x / unknown_int() / unknown_uint() / unknown_uint());\nloop invariant sn == (x % unknown_int() / unknown_uint() / unknown_uint());\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n  int v1, v2, v3;\n\n  /*@\n\nloop invariant i2: sn == x;\n\n\n\n\n\n\n\n\nloop invariant i11: sn >= 0;\n\nloop invariant i13: x >= 0;\nloop invariant i14: sn <= x;\nloop invariant i15: sn >= x;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile(1){\n    sn = sn + 1;\n    x++;\n    {;\n//@ assert(sn==x*1 || sn == 0);\n}\n\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n\n  }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n  int v1, v2, v3;\n\n  /*@\n\n*/\nwhile(1){\n    sn = sn + 1;\n    x++;\n    {;\n//@ assert(sn==x*1 || sn == 0);\n}\n\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= sn;\nloop invariant 0 <= x;\nloop invariant sn == x * 1 || sn == 0;\nloop invariant sn == 0 ==> x == 0;\nloop invariant x == 0 ==> sn == 0;\nloop invariant sn >= 0;\nloop invariant x >= 0;\nloop invariant sn <= x;\nloop invariant x <= sn;\nloop invariant x == sn * 1;\nloop invariant sn == x * 1;\nloop invariant x == sn;\nloop invariant sn == x;\nloop invariant x < 2^32;\nloop invariant sn < 2^32;\nloop invariant x >= 0 && x <= 2^32 - 1;\nloop invariant sn >= 0 && sn <= 2^32 - 1;\nloop invariant x == sn * 1 ==> sn >= 0;\nloop invariant sn == x * 1 ==> x >= 0;\nloop invariant sn == 0 ==> x == 0;\nloop invariant x == 0 ==> sn == 0;\nloop invariant sn <= x * 1;\nloop invariant x * 1 <= sn;\nloop invariant sn <= x * 1 ==> sn >= 0;\nloop invariant x * 1 <= sn ==> x >= 0;\nloop invariant sn <= x * 1 ==> x >= 0;\nloop invariant x * 1 <= sn ==> sn >= 0;\nloop invariant sn == 0 ==> x == 0;\nloop invariant x == 0 ==> sn == 0;\nloop invariant sn == x * 1;\nloop invariant x * 1 == sn;\nloop invariant sn == x;\nloop invariant x == sn;\nloop invariant x < 2^32;\nloop invariant sn < 2^32;\nloop invariant x >= 0 && x <= 2^32 - 1;\nloop invariant sn >= 0 && sn <= 2^32 - 1;\nloop invariant x == sn * 1 ==> sn >= 0;\nloop invariant sn == x * 1 ==> x >= 0;\nloop invariant sn == 0 ==> x == 0;\nloop invariant x == 0 ==> sn == 0;\nloop invariant sn <= x * 1;\nloop invariant x * 1 <= sn;\nloop invariant sn <= x * 1 ==> sn >= 0;\nloop invariant x * 1 <= sn ==> x >= 0;\nloop invariant sn <= x * 1 ==> x >= 0;\nloop invariant x * 1 <= sn ==> sn >= 0;\nloop invariant sn == 0 ==> x == 0;\nloop invariant x == 0 ==> sn == 0;\nloop invariant sn == x * 1;\nloop invariant x * 1 == sn;\nloop invariant sn == x;\nloop invariant x == sn;\nloop invariant x < 2^32;\nloop invariant sn < 2^32;\nloop invariant x >= 0 && x <= 2^32 - 1;\nloop invariant sn >= 0 && sn <= 2^32 - 1;\nloop invariant x == sn * 1 ==> sn >= 0;\nloop invariant sn == x * 1 ==> x >= 0;\nloop invariant sn == 0 ==> x == 0;\nloop invariant x == 0 ==> sn == 0;\nloop invariant sn <= x * 1;\nloop invariant x * 1 <= sn;\nloop invariant sn <= x * 1 ==> sn >= 0;\nloop invariant x * 1 <= sn ==> x >= 0;\nloop invariant sn <= x * 1 ==> x >= 0;\nloop invariant x * 1 <= sn ==> sn >= 0;\nloop invariant sn == 0 ==> x == 0;\nloop invariant x == 0 ==> sn == 0;\nloop invariant sn == x * 1;\nloop invariant x * 1 == sn;\nloop invariant sn == x;\nloop invariant x == sn;\nloop invariant x < 2^32;\nloop invariant sn < 2^32;\nloop invariant x >= 0 && x <= 2^32 - 1;\nloop invariant sn >= 0 && sn <= 2^32 - 1;\nloop invariant x == sn * 1 ==> sn >= 0;\nloop invariant sn == x * 1 ==> x >= 0;\nloop invariant sn == 0 ==> x == 0;\nloop invariant x == 0 ==> sn == 0;\nloop invariant sn <= x * 1;\nloop invariant x * 1 <= sn;\nloop invariant sn <= x * 1 ==> sn >= 0;\nloop invariant x * 1 <= sn ==> x >= 0;\nloop invariant sn <= x * 1 ==> x >= 0;\nloop invariant x * 1 <= sn ==> sn >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n  int v1, v2, v3;\n\n  /*@\nloop invariant i1: 0 <= sn;\nloop invariant i2: 0 <= x;\nloop invariant i3: sn == x * 1 || sn == 0;\nloop invariant i4: sn == 0 ==> x == 0;\nloop invariant i5: x == 0 ==> sn == 0;\nloop invariant i6: sn >= 0;\nloop invariant i7: x >= 0;\nloop invariant i8: sn <= x;\nloop invariant i9: x <= sn;\nloop invariant i10: x == sn * 1;\nloop invariant i11: sn == x * 1;\nloop invariant i12: x == sn;\nloop invariant i13: sn == x;\n\n\n\n\nloop invariant i18: x == sn * 1 ==> sn >= 0;\nloop invariant i19: sn == x * 1 ==> x >= 0;\nloop invariant i20: sn <= x * 1;\nloop invariant i21: x * 1 <= sn;\nloop invariant i22: sn <= x * 1 ==> sn >= 0;\nloop invariant i23: x * 1 <= sn ==> x >= 0;\nloop invariant i24: sn <= x * 1 ==> x >= 0;\nloop invariant i25: x * 1 <= sn ==> sn >= 0;\nloop invariant i26: x * 1 == sn;\n*/\nwhile(1){\n    sn = sn + 1;\n    x++;\n    {;\n//@ assert(sn==x*1 || sn == 0);\n}\n\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n\n  }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 14,
                "annotations": "```\n/*@\nloop invariant 1 <= sn <= 2^32-1;\nloop invariant 1 <= x <= 2^32-1;\nloop invariant v1 >= -2^31;\nloop invariant v1 <= 2^31-1;\nloop invariant v2 >= -2^31;\nloop invariant v2 <= 2^31-1;\nloop invariant v3 >= -2^31;\nloop invariant v3 <= 2^31-1;\nloop invariant (x == 1) ==> (sn == 0);\nloop invariant (x == 1) ==> (v1 == 0);\nloop invariant (x == 1) ==> (v2 == 0);\nloop invariant (x == 1) ==> (v3 == 0);\nloop invariant (x > 1) ==> (sn >= x);\nloop invariant (x > 1) ==> (v1 >= 0);\nloop invariant (x > 1) ==> (v2 >= 0);\nloop invariant (x > 1) ==> (v3 >= 0);\nloop invariant (x > 1) ==> (v1 <= 2^31-1);\nloop invariant (x > 1) ==> (v2 <= 2^31-1);\nloop invariant (x > 1) ==> (v3 <= 2^31-1);\nloop invariant (x > 1) ==> (v1 == v1);\nloop invariant (x > 1) ==> (v2 == v2);\nloop invariant (x > 1) ==> (v3 == v3);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n  int v1, v2, v3;\n\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i20: (x > 1) ==> (v1 == v1);\nloop invariant i21: (x > 1) ==> (v2 == v2);\nloop invariant i22: (x > 1) ==> (v3 == v3);\n*/\nwhile(1){\n    sn = sn + 1;\n    x++;\n    {;\n//@ assert(sn==x*1 || sn == 0);\n}\n\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 2147483647;\nloop invariant 0 <= sn <= 2147483647;\nloop invariant x <= sn;\nloop invariant sn <= x * 1 || sn == 0;\nloop invariant v1 >= INT_MIN && v1 <= INT_MAX;\nloop invariant v2 >= INT_MIN && v2 <= INT_MAX;\nloop invariant v3 >= INT_MIN && v3 <= INT_MAX;\nloop invariant x >= 1 || sn == 0;\nloop invariant sn >= 1 || x == 0;\nloop invariant sn <= sn + 1;\nloop invariant x <= x + 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n  int v1, v2, v3;\n\n  /*@\nloop invariant i1: 0 <= x <= 2147483647;\nloop invariant i2: 0 <= sn <= 2147483647;\nloop invariant i3: x <= sn;\nloop invariant i4: sn <= x * 1 || sn == 0;\nloop invariant i5: v1 >= INT_MIN && v1 <= INT_MAX;\nloop invariant i6: v2 >= INT_MIN && v2 <= INT_MAX;\nloop invariant i7: v3 >= INT_MIN && v3 <= INT_MAX;\nloop invariant i8: x >= 1 || sn == 0;\nloop invariant i9: sn >= 1 || x == 0;\nloop invariant i10: sn <= sn + 1;\nloop invariant i11: x <= x + 1;\n*/\nwhile(1){\n    sn = sn + 1;\n    x++;\n    {;\n//@ assert(sn==x*1 || sn == 0);\n}\n\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n\n  }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 1 <= sn <= 1 + n1;\nloop invariant n1 >= 1;\nloop invariant 0 <= x <= 1 + n1;\nloop invariant v1 >= INT_MIN;\nloop invariant v1 <= INT_MAX;\nloop invariant v2 >= INT_MIN;\nloop invariant v2 <= INT_MAX;\nloop invariant v3 >= INT_MIN;\nloop invariant v3 <= INT_MAX;\nloop invariant 1 <= sn <= 1 + n1;\nloop invariant n1 >= 1;\nloop invariant 0 <= x <= 1 + n1;\nloop invariant v1 >= INT_MIN;\nloop invariant v1 <= INT_MAX;\nloop invariant v2 >= INT_MIN;\nloop invariant v2 <= INT_MAX;\nloop invariant v3 >= INT_MIN;\nloop invariant v3 <= INT_MAX;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n  int v1, v2, v3;\n\n  /*@\n\n\n\nloop invariant i4: v1 >= INT_MIN;\nloop invariant i5: v1 <= INT_MAX;\nloop invariant i6: v2 >= INT_MIN;\nloop invariant i7: v2 <= INT_MAX;\nloop invariant i8: v3 >= INT_MIN;\nloop invariant i9: v3 <= INT_MAX;\n*/\nwhile(1){\n    sn = sn + 1;\n    x++;\n    {;\n//@ assert(sn==x*1 || sn == 0);\n}\n\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= loop1;\nloop invariant 0 <= sn <= n1;\nloop invariant sn == x * 1 || sn == 0;\nloop invariant v1 == 0 || v1 == 1;\nloop invariant v2 == 0 || v2 == 1;\nloop invariant v3 == 0 || v3 == 1;\nloop invariant (v1 && v2 && v3) ==> (0 <= x <= loop1);\nloop invariant (v1 && v2 && v3) ==> (0 <= sn <= n1);\nloop invariant (v1 && v2 && v3) ==> (sn == x * 1 || sn == 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n  int v1, v2, v3;\n\n  /*@\n\n\nloop invariant i3: sn == x * 1 || sn == 0;\n\n\n\n\n\nloop invariant i9: (v1 && v2 && v3) ==> (sn == x * 1 || sn == 0);\n*/\nwhile(1){\n    sn = sn + 1;\n    x++;\n    {;\n//@ assert(sn==x*1 || sn == 0);\n}\n\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 2^32 - 1;\nloop invariant x <= sn;\nloop invariant sn <= x + 1;\nloop invariant sn <= 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n  int v1, v2, v3;\n\n  /*@\n\nloop invariant i2: x <= sn;\nloop invariant i3: sn <= x + 1;\n\n*/\nwhile(1){\n    sn = sn + 1;\n    x++;\n    {;\n//@ assert(sn==x*1 || sn == 0);\n}\n\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= sn <= 2^31 - 1;\nloop invariant 0 <= loop1 <= 4294967295;\nloop invariant 0 <= n1 <= 4294967295;\nloop invariant 0 <= x <= 4294967295;\nloop invariant (sn == x * 1 || sn == 0);\nloop invariant v1 == unknown_int();\nloop invariant v2 == unknown_int();\nloop invariant v3 == unknown_int();\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n  int v1, v2, v3;\n\n  /*@\n\nloop invariant i2: 0 <= loop1 <= 4294967295;\nloop invariant i3: 0 <= n1 <= 4294967295;\nloop invariant i4: 0 <= x <= 4294967295;\nloop invariant i5: (sn == x * 1 || sn == 0);\n\n\n\n*/\nwhile(1){\n    sn = sn + 1;\n    x++;\n    {;\n//@ assert(sn==x*1 || sn == 0);\n}\n\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= n1;\nloop invariant sn >= 0;\nloop invariant sn <= n1;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant v1 <= 1;\nloop invariant v2 <= 1;\nloop invariant v3 <= 1;\nloop invariant v1 + v2 + v3 <= 3;\nloop invariant v1 + v2 + v3 >= 1;\nloop invariant x <= n1;\nloop invariant x >= 0;\nloop invariant sn >= 0;\nloop invariant sn <= n1;\nloop invariant x <= n1;\nloop invariant x >= 0;\nloop invariant sn >= 0;\nloop invariant sn <= n1;\nloop invariant x <= n1;\nloop invariant x >= 0;\nloop invariant sn >= 0;\nloop invariant sn <= n1;\nloop invariant x <= n1;\nloop invariant x >= 0;\nloop invariant sn >= 0;\nloop invariant sn <= n1;\nloop invariant x <= n1;\nloop invariant x >= 0;\nloop invariant sn >= 0;\nloop invariant sn <= n1;\nloop invariant x <= n1;\nloop invariant x >= 0;\nloop invariant sn >= 0;\nloop invariant sn <= n1;\nloop invariant x <= n1;\nloop invariant x >= 0;\nloop invariant sn >= 0;\nloop invariant sn <= n1;\nloop invariant x <= n1;\nloop invariant x >= 0;\nloop invariant sn >= 0;\nloop invariant sn <= n1;\nloop invariant x <= n1;\nloop invariant x >= 0;\nloop invariant sn >= 0;\nloop invariant sn <= n1;\nloop invariant x <= n1;\nloop invariant x >= 0;\nloop invariant sn >= 0;\nloop invariant sn <= n1;\nloop invariant x <= n1;\nloop invariant x >= 0;\nloop invariant sn >= 0;\nloop invariant sn <= n1;\nloop invariant x <= n1;\nloop invariant x >= 0;\nloop invariant sn >= 0;\nloop invariant sn <= n1;\nloop invariant x <= n1;\nloop invariant x >= 0;\nloop invariant sn >= 0;\nloop invariant sn <= n1;\nloop invariant x <= n1;\nloop invariant x >= 0;\nloop invariant sn >= 0;\nloop invariant sn <= n1;\nloop invariant x <= n1;\nloop invariant x >= 0;\nloop invariant sn >= 0;\nloop invariant sn <= n1;\nloop invariant x <= n1;\nloop invariant x >= 0;\nloop invariant sn >= 0;\nloop invariant sn <= n1;\nloop invariant x <= n1;\nloop invariant x >= 0;\nloop invariant sn >= 0;\nloop invariant sn <= n1;\nloop invariant x <= n1;\nloop invariant x >= 0;\nloop invariant sn >= 0;\nloop invariant sn <= n1;\nloop invariant x <= n1;\nloop invariant x >= 0;\nloop invariant sn >= 0;\nloop invariant sn <= n1;\nloop invariant x <= n1;\nloop invariant x >= 0;\nloop invariant sn >= 0;\nloop invariant sn <= n1;\nloop invariant x <= n1;\nloop invariant x >= 0;\nloop invariant sn >= 0;\nloop invariant sn <= n1;\nloop invariant x <= n1;\nloop invariant x >= 0;\nloop invariant sn >= 0;\nloop invariant sn <= n1;\nloop invariant x <= n1;\nloop invariant x >= 0;\nloop invariant sn >= 0;\nloop invariant sn <= n1;\nloop invariant x <= n1;\nloop invariant x >= 0;\nloop invariant sn >= 0;\nloop invariant sn <= n1;\nloop invariant x <= n1;\nloop invariant x >= 0;\nloop invariant sn >= 0;\nloop invariant sn <= n1;\nloop invariant x <= n1;\nloop invariant x >= 0;\nloop invariant sn >= 0;\nloop invariant sn <= n1;\nloop invariant x <= n1;\nloop invariant x >= 0;\nloop invariant sn >= 0;\nloop invariant sn <= n1;\nloop invariant x <= n1;\nloop invariant x >= 0;\nloop invariant sn >= 0;\nloop invariant sn <= n1;\nloop invariant x <= n1;\nloop invariant x >= 0;\nloop invariant sn >= 0;\nloop invariant sn <= n1;\nloop invariant x <= n1;\nloop invariant x >= 0;\nloop invariant sn >= 0;\nloop invariant sn <= n1;\nloop invariant x <= n1;\nloop invariant x >= 0;\nloop invariant sn >= 0;\nloop invariant sn <= n1;\nloop invariant x <= n1;\nloop invariant x >= 0;\nloop invariant sn >= 0;\nloop invariant sn <= n1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n  int v1, v2, v3;\n\n  /*@\n\nloop invariant i2: sn >= 0;\n\n\n\n\n\n\n\n\n\n\nloop invariant i13: x >= 0;\n*/\nwhile(1){\n    sn = sn + 1;\n    x++;\n    {;\n//@ assert(sn==x*1 || sn == 0);\n}\n\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 18,
                "annotations": "```\n/*@\nloop invariant 0 <= sn <= 2147483648;\nloop invariant 0 <= loop1 <= 2147483648;\nloop invariant 0 <= n1 <= 2147483648;\nloop invariant 0 <= x <= 4294967295;\nloop invariant v1 == v1;\nloop invariant v2 == v2;\nloop invariant v3 == v3;\nloop invariant sn % 2 == loop1 % 2;\nloop invariant sn % 2 == n1 % 2;\nloop invariant sn % 2 == x % 2;\nloop invariant sn % 2 == v1 % 2;\nloop invariant sn % 2 == v2 % 2;\nloop invariant sn % 2 == v3 % 2;\nloop invariant sn == x + sn / 2;\nloop invariant sn == x + sn / 2 * x;\nloop invariant sn == x + sn / 2 * x * (x + 1);\nloop invariant sn == x + sn / 2 * x * (x + 1) / 2;\nloop invariant sn == x + sn / 2 * x * (x + 1) / 2 * (x + 2);\nloop invariant sn == x + sn / 2 * x * (x + 1) / 2 * (x + 2) / 3;\nloop invariant sn == x + sn / 2 * x * (x + 1) / 2 * (x + 2) / 3 * (x + 3);\nloop invariant sn == x + sn / 2 * x * (x + 1) / 2 * (x + 2) / 3 * (x + 3) / 4;\nloop invariant sn == x + sn / 2 * x * (x + 1) / 2 * (x + 2) / 3 * (x + 3) / 4 * (x + 4);\nloop invariant sn == x + sn / 2 * x * (x + 1) / 2 * (x + 2) / 3 * (x + 3) / 4 * (x + 4) / 5;\nloop invariant sn == x + sn / 2 * x * (x + 1) / 2 * (x + 2) / 3 * (x + 3) / 4 * (x + 4) / 5 * (x + 5);\nloop invariant sn == x + sn / 2 * x * (x + 1) / 2 * (x + 2) / 3 * (x + 3) / 4 * (x + 4) / 5 * (x + 5) / 6;\nloop invariant sn == x + sn / 2 * x * (x + 1) / 2 * (x + 2) / 3 * (x + 3) / 4 * (x + 4) / 5 * (x + 5) / 6 * (x + 6);\nloop invariant sn == x + sn / 2 * x * (x + 1) / 2 * (x + 2) / 3 * (x + 3) / 4 * (x + 4) / 5 * (x + 5) / 6 * (x + 6) / 7;\nloop invariant sn == x + sn / 2 * x * (x + 1) / 2 * (x + 2) / 3 * (x + 3) / 4 * (x + 4) / 5 * (x + 5) / 6 * (x + 6) / 7 * (x + 7);\nloop invariant sn == x + sn / 2 * x * (x + 1) / 2 * (x + 2) / 3 * (x + 3) / 4 * (x + 4) / 5 * (x + 5) / 6 * (x + 6) / 7 * (x + 7) / 8;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n  int v1, v2, v3;\n\n  /*@\nloop invariant i1: 0 <= sn <= 2147483648;\n\n\nloop invariant i4: 0 <= x <= 4294967295;\nloop invariant i5: v1 == v1;\nloop invariant i6: v2 == v2;\nloop invariant i7: v3 == v3;\n\n\nloop invariant i10: sn % 2 == x % 2;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile(1){\n    sn = sn + 1;\n    x++;\n    {;\n//@ assert(sn==x*1 || sn == 0);\n}\n\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant sn >= 0;\nloop invariant x >= 0;\nloop invariant sn <= x * 1 + 1;\nloop invariant sn >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n  int v1, v2, v3;\n\n  /*@\nloop invariant i1: sn >= 0;\nloop invariant i2: x >= 0;\nloop invariant i3: sn <= x * 1 + 1;\n*/\nwhile(1){\n    sn = sn + 1;\n    x++;\n    {;\n//@ assert(sn==x*1 || sn == 0);\n}\n\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= sn <= x*1;\nloop invariant sn <= n1;\nloop invariant x <= loop1;\nloop invariant (v1 ==> sn <= sn + 1);\nloop invariant (v2 ==> sn <= sn + 1);\nloop invariant (v3 ==> sn <= sn + 1);\nloop invariant sn <= (x + unknown_uint());\nloop invariant x <= (sn - unknown_uint());\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n  int v1, v2, v3;\n\n  /*@\nloop invariant i1: 0 <= sn <= x*1;\n\n\nloop invariant i4: (v1 ==> sn <= sn + 1);\nloop invariant i5: (v2 ==> sn <= sn + 1);\nloop invariant i6: (v3 ==> sn <= sn + 1);\n\n\n*/\nwhile(1){\n    sn = sn + 1;\n    x++;\n    {;\n//@ assert(sn==x*1 || sn == 0);\n}\n\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 18,
                "annotations": "```\n/*@\nloop invariant x >= 0;\nloop invariant x <= loop1;\nloop invariant n1 <= loop1;\nloop invariant sn >= 0;\nloop invariant sn <= loop1;\nloop invariant sn <= n1;\nloop invariant sn <= n1 * n1;\nloop invariant sn <= n1 * n1 + n1 * 2;\nloop invariant sn <= n1 * n1 + n1 * 2 + n1 * 3;\nloop invariant sn <= n1 * n1 + n1 * 2 + n1 * 3 + n1 * 4;\nloop invariant sn <= n1 * n1 + n1 * 2 + n1 * 3 + n1 * 4 + n1 * 5;\nloop invariant sn <= n1 * n1 + n1 * 2 + n1 * 3 + n1 * 4 + n1 * 5 + n1 * 6;\nloop invariant sn <= n1 * n1 + n1 * 2 + n1 * 3 + n1 * 4 + n1 * 5 + n1 * 6 + n1 * 7;\nloop invariant sn <= n1 * n1 + n1 * 2 + n1 * 3 + n1 * 4 + n1 * 5 + n1 * 6 + n1 * 7 + n1 * 8;\nloop invariant sn <= n1 * n1 + n1 * 2 + n1 * 3 + n1 * 4 + n1 * 5 + n1 * 6 + n1 * 7 + n1 * 8 + n1 * 9;\nloop invariant sn <= n1 * n1 + n1 * 2 + n1 * 3 + n1 * 4 + n1 * 5 + n1 * 6 + n1 * 7 + n1 * 8 + n1 * 9 + n1 * 10;\nloop invariant sn <= n1 * n1 + n1 * 2 + n1 * 3 + n1 * 4 + n1 * 5 + n1 * 6 + n1 * 7 + n1 * 8 + n1 * 9 + n1 * 10 + n1 * 11;\nloop invariant sn <= n1 * n1 + n1 * 2 + n1 * 3 + n1 * 4 + n1 * 5 + n1 * 6 + n1 * 7 + n1 * 8 + n1 * 9 + n1 * 10 + n1 * 11 + n1 * 12;\nloop invariant sn <= n1 * n1 + n1 * 2 + n1 * 3 + n1 * 4 + n1 * 5 + n1 * 6 + n1 * 7 + n1 * 8 + n1 * 9 + n1 * 10 + n1 * 11 + n1 * 12 + n1 * 13;\nloop invariant sn <= n1 * n1 + n1 * 2 + n1 * 3 + n1 * 4 + n1 * 5 + n1 * 6 + n1 * 7 + n1 * 8 + n1 * 9 + n1 * 10 + n1 * 11 + n1 * 12 + n1 * 13 + n1 * 14;\nloop invariant sn <= n1 * n1 + n1 * 2 + n1 * 3 + n1 * 4 + n1 * 5 + n1 * 6 + n1 * 7 + n1 * 8 + n1 * 9 + n1 * 10 + n1 * 11 + n1 * 12 + n1 * 13 + n1 * 14 + n1 * 15;\nloop invariant sn <= n1 * n1 + n1 * 2 + n1 * 3 + n1 * 4 + n1 * 5 + n1 * 6 + n1 * 7 + n1 * 8 + n1 * 9 + n1 * 10 + n1 * 11 + n1 * 12 + n1 * 13 + n1 * 14 + n1 * 15 + n1 * 16;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n  int v1, v2, v3;\n\n  /*@\nloop invariant i1: x >= 0;\n\n\nloop invariant i4: sn >= 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile(1){\n    sn = sn + 1;\n    x++;\n    {;\n//@ assert(sn==x*1 || sn == 0);\n}\n\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 10,
                "annotations": "```\n/*@\nloop invariant 0 <= sn <= 2^31-1;\nloop invariant 0 <= x <= 2^31-1;\nloop invariant 0 <= v1 <= 2^31-1;\nloop invariant -2^31 <= v2 <= 2^31-1;\nloop invariant -2^31 <= v3 <= 2^31-1;\nloop invariant loop1 <= 2^31-1;\nloop invariant n1 <= 2^31-1;\nloop invariant sn == x * 1 || sn == 0;\nloop invariant x <= loop1;\nloop invariant v1 <= 2^31-1;\nloop invariant -2^31 <= v2 <= 2^31-1;\nloop invariant -2^31 <= v3 <= 2^31-1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n  int v1, v2, v3;\n\n  /*@\n\n\n\n\n\n\n\nloop invariant i8: sn == x * 1 || sn == 0;\n\n\n*/\nwhile(1){\n    sn = sn + 1;\n    x++;\n    {;\n//@ assert(sn==x*1 || sn == 0);\n}\n\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n\n  }\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 48: unexpected token ')'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n  int v1, v2, v3;\n\n  /*@\nloop invariant i1: 1 <= sn <= x;\nloop invariant i2: sn == x;\nloop invariant i3: 1 <= x;\nloop invariant i4: x <= loop1;\nloop invariant i5: v1 <= loop1;\nloop invariant i6: v2 <= loop1;\nloop invariant i7: v3 <= loop1;\nloop invariant i8: v1 >= 0;\nloop invariant i9: v2 >= 0;\nloop invariant i10: v3 >= 0;\nloop invariant i11: sn >= 0;\nloop invariant i12: sn <= loop1;\nloop invariant i13: x >= 0;\nloop invariant i14: sn <= x;\nloop invariant i15: sn >= x;\nloop invariant i16: sn == (x + 1);\nloop invariant i17: sn == (x - 1);\nloop invariant i18: sn == (x * 2);\nloop invariant i19: sn == (x / 2);\nloop invariant i20: sn == (x % 2);\nloop invariant i21: sn == (x + n1);\nloop invariant i22: sn == (x - n1);\nloop invariant i23: sn == (x * n1);\nloop invariant i24: sn == (x / n1);\nloop invariant i25: sn == (x % n1);\nloop invariant i26: sn == (x + loop1);\nloop invariant i27: sn == (x - loop1);\nloop invariant i28: sn == (x * loop1);\nloop invariant i29: sn == (x / loop1);\nloop invariant i30: sn == (x % loop1);\nloop invariant i31: sn == (x + unknown_int());\nloop invariant i32: sn == (x - unknown_int());\nloop invariant i33: sn == (x * unknown_int());\nloop invariant i34: sn == (x / unknown_int());\nloop invariant i35: sn == (x % unknown_int());\nloop invariant i36: sn == (x + unknown_uint());\nloop invariant i37: sn == (x - unknown_uint());\nloop invariant i38: sn == (x * unknown_uint());\nloop invariant i39: sn == (x / unknown_uint());\nloop invariant i40: sn == (x % unknown_uint());\nloop invariant i41: sn == (x + unknown_int() + unknown_uint());\nloop invariant i42: sn == (x - unknown_int() - unknown_uint());\nloop invariant i43: sn == (x * unknown_int() * unknown_uint());\nloop invariant i44: sn == (x / unknown_int() / unknown_uint());\nloop invariant i45: sn == (x % unknown_int() % unknown_uint());\nloop invariant i46: sn == (x + unknown_int() * unknown_uint());\nloop invariant i47: sn == (x - unknown_int() * unknown_uint());\nloop invariant i48: sn == (x * unknown_int() + unknown_uint());\nloop invariant i49: sn == (x / unknown_int() + unknown_uint());\nloop invariant i50: sn == (x % unknown_int() + unknown_uint());\nloop invariant i51: sn == (x + unknown_int() / unknown_uint());\nloop invariant i52: sn == (x - unknown_int() / unknown_uint());\nloop invariant i53: sn == (x * unknown_int() % unknown_uint());\nloop invariant i54: sn == (x / unknown_int() % unknown_uint());\nloop invariant i55: sn == (x + unknown_int() % unknown_uint());\nloop invariant i56: sn == (x - unknown_int() % unknown_uint());\nloop invariant i57: sn == (x * unknown_int() / unknown_uint());\nloop invariant i58: sn == (x % unknown_int() / unknown_uint());\nloop invariant i59: sn == (x + unknown_int() / unknown_uint() + unknown_uint());\nloop invariant i60: sn == (x - unknown_int() / unknown_uint() - unknown_uint());\nloop invariant i61: sn == (x * unknown_int() / unknown_uint() * unknown_uint());\nloop invariant i62: sn == (x / unknown_int() / unknown_uint() / unknown_uint());\nloop invariant i63: sn == (x % unknown_int() / unknown_uint() % unknown_uint());\nloop invariant i64: sn == (x + unknown_int() / unknown_uint() * unknown_uint());\nloop invariant i65: sn == (x - unknown_int() / unknown_uint() * unknown_uint());\nloop invariant i66: sn == (x * unknown_int() / unknown_uint() + unknown_uint());\nloop invariant i67: sn == (x / unknown_int() / unknown_uint() + unknown_uint());\nloop invariant i68: sn == (x % unknown_int() / unknown_uint() + unknown_uint());\nloop invariant i69: sn == (x + unknown_int() / unknown_uint() / unknown_uint());\nloop invariant i70: sn == (x - unknown_int() / unknown_uint() / unknown_uint());\nloop invariant i71: sn == (x * unknown_int() / unknown_uint() % unknown_uint());\nloop invariant i72: sn == (x / unknown_int() / unknown_uint() % unknown_uint());\nloop invariant i73: sn == (x + unknown_int() / unknown_uint() % unknown_uint());\nloop invariant i74: sn == (x - unknown_int() / unknown_uint() % unknown_uint());\nloop invariant i75: sn == (x * unknown_int() / unknown_uint() / unknown_uint());\nloop invariant i76: sn == (x % unknown_int() / unknown_uint() / unknown_uint());\nloop invariant i77: 0 <= sn;\nloop invariant i78: 0 <= x;\nloop invariant i79: sn == x * 1 || sn == 0;\nloop invariant i80: sn == 0 ==> x == 0;\nloop invariant i81: x == 0 ==> sn == 0;\nloop invariant i82: x <= sn;\nloop invariant i83: x == sn * 1;\nloop invariant i84: sn == x * 1;\nloop invariant i85: x == sn;\nloop invariant i86: x < 2^32;\nloop invariant i87: sn < 2^32;\nloop invariant i88: x >= 0 && x <= 2^32 - 1;\nloop invariant i89: sn >= 0 && sn <= 2^32 - 1;\nloop invariant i90: x == sn * 1 ==> sn >= 0;\nloop invariant i91: sn == x * 1 ==> x >= 0;\nloop invariant i92: sn <= x * 1;\nloop invariant i93: x * 1 <= sn;\nloop invariant i94: sn <= x * 1 ==> sn >= 0;\nloop invariant i95: x * 1 <= sn ==> x >= 0;\nloop invariant i96: sn <= x * 1 ==> x >= 0;\nloop invariant i97: x * 1 <= sn ==> sn >= 0;\nloop invariant i98: x * 1 == sn;\nloop invariant i99: 1 <= sn <= 2^32-1;\nloop invariant i100: 1 <= x <= 2^32-1;\nloop invariant i101: v1 >= -2^31;\nloop invariant i102: v1 <= 2^31-1;\nloop invariant i103: v2 >= -2^31;\nloop invariant i104: v2 <= 2^31-1;\nloop invariant i105: v3 >= -2^31;\nloop invariant i106: v3 <= 2^31-1;\nloop invariant i107: (x == 1) ==> (sn == 0);\nloop invariant i108: (x == 1) ==> (v1 == 0);\nloop invariant i109: (x == 1) ==> (v2 == 0);\nloop invariant i110: (x == 1) ==> (v3 == 0);\nloop invariant i111: (x > 1) ==> (sn >= x);\nloop invariant i112: (x > 1) ==> (v1 >= 0);\nloop invariant i113: (x > 1) ==> (v2 >= 0);\nloop invariant i114: (x > 1) ==> (v3 >= 0);\nloop invariant i115: (x > 1) ==> (v1 <= 2^31-1);\nloop invariant i116: (x > 1) ==> (v2 <= 2^31-1);\nloop invariant i117: (x > 1) ==> (v3 <= 2^31-1);\nloop invariant i118: (x > 1) ==> (v1 == v1);\nloop invariant i119: (x > 1) ==> (v2 == v2);\nloop invariant i120: (x > 1) ==> (v3 == v3);\nloop invariant i121: 0 <= x <= 2147483647;\nloop invariant i122: 0 <= sn <= 2147483647;\nloop invariant i123: sn <= x * 1 || sn == 0;\nloop invariant i124: v1 >= INT_MIN && v1 <= INT_MAX;\nloop invariant i125: v2 >= INT_MIN && v2 <= INT_MAX;\nloop invariant i126: v3 >= INT_MIN && v3 <= INT_MAX;\nloop invariant i127: x >= 1 || sn == 0;\nloop invariant i128: sn >= 1 || x == 0;\nloop invariant i129: sn <= sn + 1;\nloop invariant i130: x <= x + 1;\nloop invariant i131: 1 <= sn <= 1 + n1;\nloop invariant i132: n1 >= 1;\nloop invariant i133: 0 <= x <= 1 + n1;\nloop invariant i134: v1 >= INT_MIN;\nloop invariant i135: v1 <= INT_MAX;\nloop invariant i136: v2 >= INT_MIN;\nloop invariant i137: v2 <= INT_MAX;\nloop invariant i138: v3 >= INT_MIN;\nloop invariant i139: v3 <= INT_MAX;\nloop invariant i140: 0 <= x <= loop1;\nloop invariant i141: 0 <= sn <= n1;\nloop invariant i142: v1 == 0 || v1 == 1;\nloop invariant i143: v2 == 0 || v2 == 1;\nloop invariant i144: v3 == 0 || v3 == 1;\nloop invariant i145: (v1 && v2 && v3) ==> (0 <= x <= loop1);\nloop invariant i146: (v1 && v2 && v3) ==> (0 <= sn <= n1);\nloop invariant i147: (v1 && v2 && v3) ==> (sn == x * 1 || sn == 0);\nloop invariant i148: 0 <= x <= 2^32 - 1;\nloop invariant i149: sn <= x + 1;\nloop invariant i150: sn <= 1;\nloop invariant i151: 0 <= sn <= 2^31 - 1;\nloop invariant i152: 0 <= loop1 <= 4294967295;\nloop invariant i153: 0 <= n1 <= 4294967295;\nloop invariant i154: 0 <= x <= 4294967295;\nloop invariant i155: (sn == x * 1 || sn == 0);\nloop invariant i156: v1 == unknown_int();\nloop invariant i157: v2 == unknown_int();\nloop invariant i158: v3 == unknown_int();\nloop invariant i159: 1 <= x <= n1;\nloop invariant i160: sn <= n1;\nloop invariant i161: v1 <= 1;\nloop invariant i162: v2 <= 1;\nloop invariant i163: v3 <= 1;\nloop invariant i164: v1 + v2 + v3 <= 3;\nloop invariant i165: v1 + v2 + v3 >= 1;\nloop invariant i166: x <= n1;\nloop invariant i167: 0 <= sn <= 2147483648;\nloop invariant i168: 0 <= loop1 <= 2147483648;\nloop invariant i169: 0 <= n1 <= 2147483648;\nloop invariant i170: v1 == v1;\nloop invariant i171: v2 == v2;\nloop invariant i172: v3 == v3;\nloop invariant i173: sn % 2 == loop1 % 2;\nloop invariant i174: sn % 2 == n1 % 2;\nloop invariant i175: sn % 2 == x % 2;\nloop invariant i176: sn % 2 == v1 % 2;\nloop invariant i177: sn % 2 == v2 % 2;\nloop invariant i178: sn % 2 == v3 % 2;\nloop invariant i179: sn == x + sn / 2;\nloop invariant i180: sn == x + sn / 2 * x;\nloop invariant i181: sn == x + sn / 2 * x * (x + 1);\nloop invariant i182: sn == x + sn / 2 * x * (x + 1) / 2;\nloop invariant i183: sn == x + sn / 2 * x * (x + 1) / 2 * (x + 2);\nloop invariant i184: sn == x + sn / 2 * x * (x + 1) / 2 * (x + 2) / 3;\nloop invariant i185: sn == x + sn / 2 * x * (x + 1) / 2 * (x + 2) / 3 * (x + 3);\nloop invariant i186: sn == x + sn / 2 * x * (x + 1) / 2 * (x + 2) / 3 * (x + 3) / 4;\nloop invariant i187: sn == x + sn / 2 * x * (x + 1) / 2 * (x + 2) / 3 * (x + 3) / 4 * (x + 4);\nloop invariant i188: sn == x + sn / 2 * x * (x + 1) / 2 * (x + 2) / 3 * (x + 3) / 4 * (x + 4) / 5;\nloop invariant i189: sn == x + sn / 2 * x * (x + 1) / 2 * (x + 2) / 3 * (x + 3) / 4 * (x + 4) / 5 * (x + 5);\nloop invariant i190: sn == x + sn / 2 * x * (x + 1) / 2 * (x + 2) / 3 * (x + 3) / 4 * (x + 4) / 5 * (x + 5) / 6;\nloop invariant i191: sn == x + sn / 2 * x * (x + 1) / 2 * (x + 2) / 3 * (x + 3) / 4 * (x + 4) / 5 * (x + 5) / 6 * (x + 6);\nloop invariant i192: sn == x + sn / 2 * x * (x + 1) / 2 * (x + 2) / 3 * (x + 3) / 4 * (x + 4) / 5 * (x + 5) / 6 * (x + 6) / 7;\nloop invariant i193: sn == x + sn / 2 * x * (x + 1) / 2 * (x + 2) / 3 * (x + 3) / 4 * (x + 4) / 5 * (x + 5) / 6 * (x + 6) / 7 * (x + 7);\nloop invariant i194: sn == x + sn / 2 * x * (x + 1) / 2 * (x + 2) / 3 * (x + 3) / 4 * (x + 4) / 5 * (x + 5) / 6 * (x + 6) / 7 * (x + 7) / 8;\nloop invariant i195: sn <= x * 1 + 1;\nloop invariant i196: 0 <= sn <= x*1;\nloop invariant i197: (v1 ==> sn <= sn + 1);\nloop invariant i198: (v2 ==> sn <= sn + 1);\nloop invariant i199: (v3 ==> sn <= sn + 1);\nloop invariant i200: sn <= (x + unknown_uint());\nloop invariant i201: x <= (sn - unknown_uint());\nloop invariant i202: n1 <= loop1;\nloop invariant i203: sn <= n1 * n1;\nloop invariant i204: sn <= n1 * n1 + n1 * 2;\nloop invariant i205: sn <= n1 * n1 + n1 * 2 + n1 * 3;\nloop invariant i206: sn <= n1 * n1 + n1 * 2 + n1 * 3 + n1 * 4;\nloop invariant i207: sn <= n1 * n1 + n1 * 2 + n1 * 3 + n1 * 4 + n1 * 5;\nloop invariant i208: sn <= n1 * n1 + n1 * 2 + n1 * 3 + n1 * 4 + n1 * 5 + n1 * 6;\nloop invariant i209: sn <= n1 * n1 + n1 * 2 + n1 * 3 + n1 * 4 + n1 * 5 + n1 * 6 + n1 * 7;\nloop invariant i210: sn <= n1 * n1 + n1 * 2 + n1 * 3 + n1 * 4 + n1 * 5 + n1 * 6 + n1 * 7 + n1 * 8;\nloop invariant i211: sn <= n1 * n1 + n1 * 2 + n1 * 3 + n1 * 4 + n1 * 5 + n1 * 6 + n1 * 7 + n1 * 8 + n1 * 9;\nloop invariant i212: sn <= n1 * n1 + n1 * 2 + n1 * 3 + n1 * 4 + n1 * 5 + n1 * 6 + n1 * 7 + n1 * 8 + n1 * 9 + n1 * 10;\nloop invariant i213: sn <= n1 * n1 + n1 * 2 + n1 * 3 + n1 * 4 + n1 * 5 + n1 * 6 + n1 * 7 + n1 * 8 + n1 * 9 + n1 * 10 + n1 * 11;\nloop invariant i214: sn <= n1 * n1 + n1 * 2 + n1 * 3 + n1 * 4 + n1 * 5 + n1 * 6 + n1 * 7 + n1 * 8 + n1 * 9 + n1 * 10 + n1 * 11 + n1 * 12;\nloop invariant i215: sn <= n1 * n1 + n1 * 2 + n1 * 3 + n1 * 4 + n1 * 5 + n1 * 6 + n1 * 7 + n1 * 8 + n1 * 9 + n1 * 10 + n1 * 11 + n1 * 12 + n1 * 13;\nloop invariant i216: sn <= n1 * n1 + n1 * 2 + n1 * 3 + n1 * 4 + n1 * 5 + n1 * 6 + n1 * 7 + n1 * 8 + n1 * 9 + n1 * 10 + n1 * 11 + n1 * 12 + n1 * 13 + n1 * 14;\nloop invariant i217: sn <= n1 * n1 + n1 * 2 + n1 * 3 + n1 * 4 + n1 * 5 + n1 * 6 + n1 * 7 + n1 * 8 + n1 * 9 + n1 * 10 + n1 * 11 + n1 * 12 + n1 * 13 + n1 * 14 + n1 * 15;\nloop invariant i218: sn <= n1 * n1 + n1 * 2 + n1 * 3 + n1 * 4 + n1 * 5 + n1 * 6 + n1 * 7 + n1 * 8 + n1 * 9 + n1 * 10 + n1 * 11 + n1 * 12 + n1 * 13 + n1 * 14 + n1 * 15 + n1 * 16;\nloop invariant i219: 0 <= sn <= 2^31-1;\nloop invariant i220: 0 <= x <= 2^31-1;\nloop invariant i221: 0 <= v1 <= 2^31-1;\nloop invariant i222: -2^31 <= v2 <= 2^31-1;\nloop invariant i223: -2^31 <= v3 <= 2^31-1;\nloop invariant i224: loop1 <= 2^31-1;\nloop invariant i225: n1 <= 2^31-1;\n*/\nwhile(1){\n    sn = sn + 1;\n    x++;\n    {;\n//@ assert(sn==x*1 || sn == 0);\n}\n\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n\n  }\n}",
        "combined_annotation_num_solver_calls": 106,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n  int v1, v2, v3;\n\n  /*@\n\nloop invariant i2: sn == x;\n\n\n\n\n\n\n\n\nloop invariant i11: sn >= 0;\n\nloop invariant i13: x >= 0;\nloop invariant i14: sn <= x;\nloop invariant i15: sn >= x;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i77: 0 <= sn;\nloop invariant i78: 0 <= x;\nloop invariant i79: sn == x * 1 || sn == 0;\nloop invariant i80: sn == 0 ==> x == 0;\nloop invariant i81: x == 0 ==> sn == 0;\nloop invariant i82: x <= sn;\nloop invariant i83: x == sn * 1;\nloop invariant i84: sn == x * 1;\nloop invariant i85: x == sn;\n\n\n\n\nloop invariant i90: x == sn * 1 ==> sn >= 0;\nloop invariant i91: sn == x * 1 ==> x >= 0;\nloop invariant i92: sn <= x * 1;\nloop invariant i93: x * 1 <= sn;\nloop invariant i94: sn <= x * 1 ==> sn >= 0;\nloop invariant i95: x * 1 <= sn ==> x >= 0;\nloop invariant i96: sn <= x * 1 ==> x >= 0;\nloop invariant i97: x * 1 <= sn ==> sn >= 0;\nloop invariant i98: x * 1 == sn;\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i111: (x > 1) ==> (sn >= x);\n\n\n\n\n\n\nloop invariant i118: (x > 1) ==> (v1 == v1);\nloop invariant i119: (x > 1) ==> (v2 == v2);\nloop invariant i120: (x > 1) ==> (v3 == v3);\nloop invariant i121: 0 <= x <= 2147483647;\nloop invariant i122: 0 <= sn <= 2147483647;\nloop invariant i123: sn <= x * 1 || sn == 0;\nloop invariant i124: v1 >= INT_MIN && v1 <= INT_MAX;\nloop invariant i125: v2 >= INT_MIN && v2 <= INT_MAX;\nloop invariant i126: v3 >= INT_MIN && v3 <= INT_MAX;\nloop invariant i127: x >= 1 || sn == 0;\nloop invariant i128: sn >= 1 || x == 0;\nloop invariant i129: sn <= sn + 1;\nloop invariant i130: x <= x + 1;\n\n\n\nloop invariant i134: v1 >= INT_MIN;\nloop invariant i135: v1 <= INT_MAX;\nloop invariant i136: v2 >= INT_MIN;\nloop invariant i137: v2 <= INT_MAX;\nloop invariant i138: v3 >= INT_MIN;\nloop invariant i139: v3 <= INT_MAX;\n\n\n\n\n\n\n\nloop invariant i147: (v1 && v2 && v3) ==> (sn == x * 1 || sn == 0);\n\nloop invariant i149: sn <= x + 1;\n\n\nloop invariant i152: 0 <= loop1 <= 4294967295;\nloop invariant i153: 0 <= n1 <= 4294967295;\nloop invariant i154: 0 <= x <= 4294967295;\nloop invariant i155: (sn == x * 1 || sn == 0);\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i167: 0 <= sn <= 2147483648;\n\n\nloop invariant i170: v1 == v1;\nloop invariant i171: v2 == v2;\nloop invariant i172: v3 == v3;\n\n\nloop invariant i175: sn % 2 == x % 2;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i195: sn <= x * 1 + 1;\nloop invariant i196: 0 <= sn <= x*1;\nloop invariant i197: (v1 ==> sn <= sn + 1);\nloop invariant i198: (v2 ==> sn <= sn + 1);\nloop invariant i199: (v3 ==> sn <= sn + 1);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile(1){\n    sn = sn + 1;\n    x++;\n    {;\n//@ assert(sn==x*1 || sn == 0);\n}\n\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n\n  }\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/split.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c"
        ],
        "skipped": [],
        "total": 92,
        "success_count": 78,
        "failure_count": 14,
        "success_rate": 0.8478260869565217
    }
}