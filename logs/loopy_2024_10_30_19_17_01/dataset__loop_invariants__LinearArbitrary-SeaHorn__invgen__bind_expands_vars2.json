{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main() {\n  \n  int cp1_off, n1, n2, mc_i;\n  n1 = unknown();\n  n2 = unknown();\n  cp1_off = unknown();\n\n  int MAXDATA = unknown();\n  if (MAXDATA > 0 ); else goto END;\n\n  if ((n1 <= MAXDATA * 2)); else goto END;\n\n  if ((cp1_off <= n1)); else goto END;\n\n  if ((n2 <= MAXDATA*2 - n1)); else goto END;\n\n  for (mc_i = 0; mc_i < n2; mc_i++) {\n    \n    {;\n//@ assert(cp1_off+mc_i < MAXDATA * 2);\n}\n\n  }\n\n END:  return 0;\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= mc_i <= n2;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> mc_i < n2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= mc_i <= n2;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> cp1_off + mc_i < n1;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> cp1_off + mc_i < MAXDATA * 2 - n1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= cp1_off <= n1;\nloop invariant 0 <= mc_i <= n2;\nloop invariant 0 <= n1 <= MAXDATA * 2;\nloop invariant 0 <= n2 <= MAXDATA * 2;\nloop invariant 0 <= MAXDATA;\nloop invariant 0 <= cp1_off + mc_i <= MAXDATA * 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= cp1_off <= n1;\nloop invariant 0 <= n2 <= MAXDATA * 2 - n1;\nloop invariant mc_i <= n2;\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= cp1_off <= n1;\nloop invariant 0 <= mc_i <= n2;\nloop invariant mc_i <= n2;\nloop invariant cp1_off+mc_i <= n1+mc_i;\nloop invariant cp1_off+mc_i < n1+mc_i;\nloop invariant cp1_off+mc_i < n1+mc_i;\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= mc_i <= n2;\nloop invariant cp1_off + mc_i < MAXDATA * 2;\nloop invariant MAXDATA > 0;\nloop invariant n1 <= MAXDATA * 2;\nloop invariant cp1_off <= n1;\nloop invariant n2 <= MAXDATA * 2 - n1;\nloop invariant mc_i >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= cp1_off <= n1;\nloop invariant n1 <= MAXDATA * 2;\nloop invariant n2 <= MAXDATA * 2 - n1;\nloop invariant mc_i >= 0;\nloop invariant mc_i <= n2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= mc_i <= n2;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> mc_i <= MAXDATA * 2 - cp1_off;\nloop invariant mc_i <= n2 ==> cp1_off + mc_i < MAXDATA * 2;\nloop invariant mc_i <= n2 ==> mc_i < MAXDATA * 2;\nloop invariant mc_i <= n2 ==> mc_i < MAXDATA * 2 - cp1_off;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= mc_i <= n2;\nloop invariant cp1_off + mc_i < MAXDATA * 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= mc_i <= n2;\nloop invariant cp1_off + mc_i < MAXDATA * 2;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= cp1_off <= MAXDATA * 2;\nloop invariant cp1_off + mc_i <= MAXDATA * 2;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> mc_i < n2;\nloop invariant mc_i < n2 ==> cp1_off + mc_i < MAXDATA * 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= n1 <= MAXDATA * 2;\nloop invariant 0 <= n2 <= MAXDATA*2 - n1;\nloop invariant n1 + n2 <= MAXDATA * 2;\nloop invariant cp1_off >= 0;\nloop invariant cp1_off <= n1 + n2;\nloop invariant mc_i >= 0;\nloop invariant mc_i <= n2;\n*/\n```",
            "```\n/*@\nloop invariant n1 >= cp1_off >= 0;\nloop invariant n2 <= MAXDATA * 2 - n1;\nloop invariant cp1_off + n2 <= MAXDATA * 2;\nloop invariant mc_i >= 0;\nloop invariant mc_i <= n2;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> cp1_off + mc_i < cp1_off + n2;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> cp1_off + mc_i >= cp1_off;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> mc_i <= n2;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> mc_i >= 0;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> cp1_off + mc_i < MAXDATA * 2;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> cp1_off + mc_i >= cp1_off;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> mc_i <= n2;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> mc_i >= 0;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> cp1_off + mc_i < MAXDATA * 2;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> cp1_off + mc_i >= cp1_off;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> mc_i <= n2;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> mc_i >= 0;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> cp1_off + mc_i < MAXDATA * 2;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> cp1_off + mc_i >= cp1_off;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> mc_i <= n2;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> mc_i >= 0;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> cp1_off + mc_i < MAXDATA * 2;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> cp1_off + mc_i >= cp1_off;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> mc_i <= n2;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> mc_i >= 0;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> cp1_off + mc_i < MAXDATA * 2;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> cp1_off + mc_i >= cp1_off;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> mc_i <= n2;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> mc_i >= 0;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> cp1_off + mc_i < MAXDATA * 2;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> cp1_off + mc_i >= cp1_off;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> mc_i <= n2;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> mc_i >= 0;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> cp1_off + mc_i < MAXDATA * 2;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> cp1_off + mc_i >= cp1_off;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> mc_i <= n2;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> mc_i >= 0;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> cp1_off + mc_i < MAXDATA * 2;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> cp1_off + mc_i >= cp1_off;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> mc_i <= n2;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> mc_i >= 0;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> cp1_off + mc_i < MAXDATA * 2;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> cp1_off + mc_i >= cp1_off;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> mc_i <= n2;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= mc_i <= n2;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> mc_i < n2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main() {\n  \n  int cp1_off, n1, n2, mc_i;\n  n1 = unknown();\n  n2 = unknown();\n  cp1_off = unknown();\n\n  int MAXDATA = unknown();\n  if (MAXDATA > 0 ); else goto END;\n\n  if ((n1 <= MAXDATA * 2)); else goto END;\n\n  if ((cp1_off <= n1)); else goto END;\n\n  if ((n2 <= MAXDATA*2 - n1)); else goto END;\n\n  /*@\n\n\n*/\nfor (mc_i = 0; mc_i < n2; mc_i++) {\n    \n    {;\n//@ assert(cp1_off+mc_i < MAXDATA * 2);\n}\n\n  }\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= mc_i <= n2;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> cp1_off + mc_i < n1;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> cp1_off + mc_i < MAXDATA * 2 - n1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main() {\n  \n  int cp1_off, n1, n2, mc_i;\n  n1 = unknown();\n  n2 = unknown();\n  cp1_off = unknown();\n\n  int MAXDATA = unknown();\n  if (MAXDATA > 0 ); else goto END;\n\n  if ((n1 <= MAXDATA * 2)); else goto END;\n\n  if ((cp1_off <= n1)); else goto END;\n\n  if ((n2 <= MAXDATA*2 - n1)); else goto END;\n\n  /*@\n\n\n\n*/\nfor (mc_i = 0; mc_i < n2; mc_i++) {\n    \n    {;\n//@ assert(cp1_off+mc_i < MAXDATA * 2);\n}\n\n  }\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= cp1_off <= n1;\nloop invariant 0 <= mc_i <= n2;\nloop invariant 0 <= n1 <= MAXDATA * 2;\nloop invariant 0 <= n2 <= MAXDATA * 2;\nloop invariant 0 <= MAXDATA;\nloop invariant 0 <= cp1_off + mc_i <= MAXDATA * 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main() {\n  \n  int cp1_off, n1, n2, mc_i;\n  n1 = unknown();\n  n2 = unknown();\n  cp1_off = unknown();\n\n  int MAXDATA = unknown();\n  if (MAXDATA > 0 ); else goto END;\n\n  if ((n1 <= MAXDATA * 2)); else goto END;\n\n  if ((cp1_off <= n1)); else goto END;\n\n  if ((n2 <= MAXDATA*2 - n1)); else goto END;\n\n  /*@\n\n\n\n\nloop invariant i5: 0 <= MAXDATA;\n\n*/\nfor (mc_i = 0; mc_i < n2; mc_i++) {\n    \n    {;\n//@ assert(cp1_off+mc_i < MAXDATA * 2);\n}\n\n  }\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= cp1_off <= n1;\nloop invariant 0 <= n2 <= MAXDATA * 2 - n1;\nloop invariant mc_i <= n2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main() {\n  \n  int cp1_off, n1, n2, mc_i;\n  n1 = unknown();\n  n2 = unknown();\n  cp1_off = unknown();\n\n  int MAXDATA = unknown();\n  if (MAXDATA > 0 ); else goto END;\n\n  if ((n1 <= MAXDATA * 2)); else goto END;\n\n  if ((cp1_off <= n1)); else goto END;\n\n  if ((n2 <= MAXDATA*2 - n1)); else goto END;\n\n  /*@\n\n\n\n*/\nfor (mc_i = 0; mc_i < n2; mc_i++) {\n    \n    {;\n//@ assert(cp1_off+mc_i < MAXDATA * 2);\n}\n\n  }\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main() {\n  \n  int cp1_off, n1, n2, mc_i;\n  n1 = unknown();\n  n2 = unknown();\n  cp1_off = unknown();\n\n  int MAXDATA = unknown();\n  if (MAXDATA > 0 ); else goto END;\n\n  if ((n1 <= MAXDATA * 2)); else goto END;\n\n  if ((cp1_off <= n1)); else goto END;\n\n  if ((n2 <= MAXDATA*2 - n1)); else goto END;\n\n  /*@\n\n*/\nfor (mc_i = 0; mc_i < n2; mc_i++) {\n    \n    {;\n//@ assert(cp1_off+mc_i < MAXDATA * 2);\n}\n\n  }\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= cp1_off <= n1;\nloop invariant 0 <= mc_i <= n2;\nloop invariant mc_i <= n2;\nloop invariant cp1_off+mc_i <= n1+mc_i;\nloop invariant cp1_off+mc_i < n1+mc_i;\nloop invariant cp1_off+mc_i < n1+mc_i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main() {\n  \n  int cp1_off, n1, n2, mc_i;\n  n1 = unknown();\n  n2 = unknown();\n  cp1_off = unknown();\n\n  int MAXDATA = unknown();\n  if (MAXDATA > 0 ); else goto END;\n\n  if ((n1 <= MAXDATA * 2)); else goto END;\n\n  if ((cp1_off <= n1)); else goto END;\n\n  if ((n2 <= MAXDATA*2 - n1)); else goto END;\n\n  /*@\n\n\n\nloop invariant i4: cp1_off+mc_i <= n1+mc_i;\n\n*/\nfor (mc_i = 0; mc_i < n2; mc_i++) {\n    \n    {;\n//@ assert(cp1_off+mc_i < MAXDATA * 2);\n}\n\n  }\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main() {\n  \n  int cp1_off, n1, n2, mc_i;\n  n1 = unknown();\n  n2 = unknown();\n  cp1_off = unknown();\n\n  int MAXDATA = unknown();\n  if (MAXDATA > 0 ); else goto END;\n\n  if ((n1 <= MAXDATA * 2)); else goto END;\n\n  if ((cp1_off <= n1)); else goto END;\n\n  if ((n2 <= MAXDATA*2 - n1)); else goto END;\n\n  /*@\n\n*/\nfor (mc_i = 0; mc_i < n2; mc_i++) {\n    \n    {;\n//@ assert(cp1_off+mc_i < MAXDATA * 2);\n}\n\n  }\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= mc_i <= n2;\nloop invariant cp1_off + mc_i < MAXDATA * 2;\nloop invariant MAXDATA > 0;\nloop invariant n1 <= MAXDATA * 2;\nloop invariant cp1_off <= n1;\nloop invariant n2 <= MAXDATA * 2 - n1;\nloop invariant mc_i >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main() {\n  \n  int cp1_off, n1, n2, mc_i;\n  n1 = unknown();\n  n2 = unknown();\n  cp1_off = unknown();\n\n  int MAXDATA = unknown();\n  if (MAXDATA > 0 ); else goto END;\n\n  if ((n1 <= MAXDATA * 2)); else goto END;\n\n  if ((cp1_off <= n1)); else goto END;\n\n  if ((n2 <= MAXDATA*2 - n1)); else goto END;\n\n  /*@\n\n\nloop invariant i3: MAXDATA > 0;\nloop invariant i4: n1 <= MAXDATA * 2;\nloop invariant i5: cp1_off <= n1;\nloop invariant i6: n2 <= MAXDATA * 2 - n1;\nloop invariant i7: mc_i >= 0;\n*/\nfor (mc_i = 0; mc_i < n2; mc_i++) {\n    \n    {;\n//@ assert(cp1_off+mc_i < MAXDATA * 2);\n}\n\n  }\n\n END:  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= cp1_off <= n1;\nloop invariant n1 <= MAXDATA * 2;\nloop invariant n2 <= MAXDATA * 2 - n1;\nloop invariant mc_i >= 0;\nloop invariant mc_i <= n2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main() {\n  \n  int cp1_off, n1, n2, mc_i;\n  n1 = unknown();\n  n2 = unknown();\n  cp1_off = unknown();\n\n  int MAXDATA = unknown();\n  if (MAXDATA > 0 ); else goto END;\n\n  if ((n1 <= MAXDATA * 2)); else goto END;\n\n  if ((cp1_off <= n1)); else goto END;\n\n  if ((n2 <= MAXDATA*2 - n1)); else goto END;\n\n  /*@\n\nloop invariant i2: n1 <= MAXDATA * 2;\nloop invariant i3: n2 <= MAXDATA * 2 - n1;\nloop invariant i4: mc_i >= 0;\n\n*/\nfor (mc_i = 0; mc_i < n2; mc_i++) {\n    \n    {;\n//@ assert(cp1_off+mc_i < MAXDATA * 2);\n}\n\n  }\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= mc_i <= n2;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> mc_i <= MAXDATA * 2 - cp1_off;\nloop invariant mc_i <= n2 ==> cp1_off + mc_i < MAXDATA * 2;\nloop invariant mc_i <= n2 ==> mc_i < MAXDATA * 2;\nloop invariant mc_i <= n2 ==> mc_i < MAXDATA * 2 - cp1_off;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main() {\n  \n  int cp1_off, n1, n2, mc_i;\n  n1 = unknown();\n  n2 = unknown();\n  cp1_off = unknown();\n\n  int MAXDATA = unknown();\n  if (MAXDATA > 0 ); else goto END;\n\n  if ((n1 <= MAXDATA * 2)); else goto END;\n\n  if ((cp1_off <= n1)); else goto END;\n\n  if ((n2 <= MAXDATA*2 - n1)); else goto END;\n\n  /*@\n\nloop invariant i2: cp1_off + mc_i < MAXDATA * 2 ==> mc_i <= MAXDATA * 2 - cp1_off;\n\n\n\n*/\nfor (mc_i = 0; mc_i < n2; mc_i++) {\n    \n    {;\n//@ assert(cp1_off+mc_i < MAXDATA * 2);\n}\n\n  }\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= mc_i <= n2;\nloop invariant cp1_off + mc_i < MAXDATA * 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main() {\n  \n  int cp1_off, n1, n2, mc_i;\n  n1 = unknown();\n  n2 = unknown();\n  cp1_off = unknown();\n\n  int MAXDATA = unknown();\n  if (MAXDATA > 0 ); else goto END;\n\n  if ((n1 <= MAXDATA * 2)); else goto END;\n\n  if ((cp1_off <= n1)); else goto END;\n\n  if ((n2 <= MAXDATA*2 - n1)); else goto END;\n\n  /*@\n\n\n*/\nfor (mc_i = 0; mc_i < n2; mc_i++) {\n    \n    {;\n//@ assert(cp1_off+mc_i < MAXDATA * 2);\n}\n\n  }\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= mc_i <= n2;\nloop invariant cp1_off + mc_i < MAXDATA * 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main() {\n  \n  int cp1_off, n1, n2, mc_i;\n  n1 = unknown();\n  n2 = unknown();\n  cp1_off = unknown();\n\n  int MAXDATA = unknown();\n  if (MAXDATA > 0 ); else goto END;\n\n  if ((n1 <= MAXDATA * 2)); else goto END;\n\n  if ((cp1_off <= n1)); else goto END;\n\n  if ((n2 <= MAXDATA*2 - n1)); else goto END;\n\n  /*@\n\n\n*/\nfor (mc_i = 0; mc_i < n2; mc_i++) {\n    \n    {;\n//@ assert(cp1_off+mc_i < MAXDATA * 2);\n}\n\n  }\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 1 <= cp1_off <= MAXDATA * 2;\nloop invariant cp1_off + mc_i <= MAXDATA * 2;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> mc_i < n2;\nloop invariant mc_i < n2 ==> cp1_off + mc_i < MAXDATA * 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main() {\n  \n  int cp1_off, n1, n2, mc_i;\n  n1 = unknown();\n  n2 = unknown();\n  cp1_off = unknown();\n\n  int MAXDATA = unknown();\n  if (MAXDATA > 0 ); else goto END;\n\n  if ((n1 <= MAXDATA * 2)); else goto END;\n\n  if ((cp1_off <= n1)); else goto END;\n\n  if ((n2 <= MAXDATA*2 - n1)); else goto END;\n\n  /*@\n\nloop invariant i2: cp1_off + mc_i <= MAXDATA * 2;\n\n\n*/\nfor (mc_i = 0; mc_i < n2; mc_i++) {\n    \n    {;\n//@ assert(cp1_off+mc_i < MAXDATA * 2);\n}\n\n  }\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= n1 <= MAXDATA * 2;\nloop invariant 0 <= n2 <= MAXDATA*2 - n1;\nloop invariant n1 + n2 <= MAXDATA * 2;\nloop invariant cp1_off >= 0;\nloop invariant cp1_off <= n1 + n2;\nloop invariant mc_i >= 0;\nloop invariant mc_i <= n2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main() {\n  \n  int cp1_off, n1, n2, mc_i;\n  n1 = unknown();\n  n2 = unknown();\n  cp1_off = unknown();\n\n  int MAXDATA = unknown();\n  if (MAXDATA > 0 ); else goto END;\n\n  if ((n1 <= MAXDATA * 2)); else goto END;\n\n  if ((cp1_off <= n1)); else goto END;\n\n  if ((n2 <= MAXDATA*2 - n1)); else goto END;\n\n  /*@\n\n\nloop invariant i3: n1 + n2 <= MAXDATA * 2;\n\n\nloop invariant i6: mc_i >= 0;\n\n*/\nfor (mc_i = 0; mc_i < n2; mc_i++) {\n    \n    {;\n//@ assert(cp1_off+mc_i < MAXDATA * 2);\n}\n\n  }\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant n1 >= cp1_off >= 0;\nloop invariant n2 <= MAXDATA * 2 - n1;\nloop invariant cp1_off + n2 <= MAXDATA * 2;\nloop invariant mc_i >= 0;\nloop invariant mc_i <= n2;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> cp1_off + mc_i < cp1_off + n2;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> cp1_off + mc_i >= cp1_off;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> mc_i <= n2;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> mc_i >= 0;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> cp1_off + mc_i < MAXDATA * 2;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> cp1_off + mc_i >= cp1_off;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> mc_i <= n2;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> mc_i >= 0;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> cp1_off + mc_i < MAXDATA * 2;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> cp1_off + mc_i >= cp1_off;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> mc_i <= n2;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> mc_i >= 0;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> cp1_off + mc_i < MAXDATA * 2;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> cp1_off + mc_i >= cp1_off;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> mc_i <= n2;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> mc_i >= 0;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> cp1_off + mc_i < MAXDATA * 2;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> cp1_off + mc_i >= cp1_off;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> mc_i <= n2;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> mc_i >= 0;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> cp1_off + mc_i < MAXDATA * 2;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> cp1_off + mc_i >= cp1_off;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> mc_i <= n2;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> mc_i >= 0;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> cp1_off + mc_i < MAXDATA * 2;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> cp1_off + mc_i >= cp1_off;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> mc_i <= n2;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> mc_i >= 0;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> cp1_off + mc_i < MAXDATA * 2;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> cp1_off + mc_i >= cp1_off;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> mc_i <= n2;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> mc_i >= 0;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> cp1_off + mc_i < MAXDATA * 2;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> cp1_off + mc_i >= cp1_off;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> mc_i <= n2;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> mc_i >= 0;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> cp1_off + mc_i < MAXDATA * 2;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> cp1_off + mc_i >= cp1_off;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> mc_i <= n2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main() {\n  \n  int cp1_off, n1, n2, mc_i;\n  n1 = unknown();\n  n2 = unknown();\n  cp1_off = unknown();\n\n  int MAXDATA = unknown();\n  if (MAXDATA > 0 ); else goto END;\n\n  if ((n1 <= MAXDATA * 2)); else goto END;\n\n  if ((cp1_off <= n1)); else goto END;\n\n  if ((n2 <= MAXDATA*2 - n1)); else goto END;\n\n  /*@\n\nloop invariant i2: n2 <= MAXDATA * 2 - n1;\nloop invariant i3: cp1_off + n2 <= MAXDATA * 2;\nloop invariant i4: mc_i >= 0;\n\n\nloop invariant i7: cp1_off + mc_i < MAXDATA * 2 ==> cp1_off + mc_i >= cp1_off;\n\nloop invariant i9: cp1_off + mc_i < MAXDATA * 2 ==> mc_i >= 0;\nloop invariant i10: cp1_off + mc_i < MAXDATA * 2 ==> cp1_off + mc_i < MAXDATA * 2;\n*/\nfor (mc_i = 0; mc_i < n2; mc_i++) {\n    \n    {;\n//@ assert(cp1_off+mc_i < MAXDATA * 2);\n}\n\n  }\n\n END:  return 0;\n}",
                "checker_output_after_prune": true
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "loop invariant 0 <= mc_i <= n2 is preserved but not established.\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> mc_i < n2 is neither established nor preserved.\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> cp1_off + mc_i < n1 is neither established nor preserved.\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> cp1_off + mc_i < MAXDATA * 2 - n1 is neither established nor preserved.\nloop invariant 0 <= cp1_off <= n1 is preserved but not established.\nloop invariant 0 <= n1 <= MAXDATA * 2 is partially proven to be inductive.\nloop invariant 0 <= n2 <= MAXDATA * 2 is partially proven to be inductive.\nloop invariant 0 <= MAXDATA is partially proven to be inductive.\nloop invariant 0 <= cp1_off + mc_i <= MAXDATA * 2 is partially proven to be inductive.\nloop invariant 0 <= n2 <= MAXDATA * 2 - n1 is partially proven to be inductive.\nloop invariant mc_i <= n2 is partially proven to be inductive.\nloop invariant cp1_off+mc_i <= n1+mc_i is partially proven to be inductive.\nloop invariant cp1_off+mc_i < n1+mc_i is preserved but not established.\nloop invariant cp1_off + mc_i < MAXDATA * 2 is partially proven to be inductive.\nloop invariant MAXDATA > 0 is partially proven to be inductive.\nloop invariant n1 <= MAXDATA * 2 is partially proven to be inductive.\nloop invariant cp1_off <= n1 is partially proven to be inductive.\nloop invariant n2 <= MAXDATA * 2 - n1 is partially proven to be inductive.\nloop invariant mc_i >= 0 is partially proven to be inductive.\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> mc_i <= MAXDATA * 2 - cp1_off is partially proven to be inductive.\nloop invariant mc_i <= n2 ==> cp1_off + mc_i < MAXDATA * 2 is partially proven to be inductive.\nloop invariant mc_i <= n2 ==> mc_i < MAXDATA * 2 is partially proven to be inductive.\nloop invariant mc_i <= n2 ==> mc_i < MAXDATA * 2 - cp1_off is partially proven to be inductive.\nloop invariant 1 <= cp1_off <= MAXDATA * 2 is preserved but not established.\nloop invariant cp1_off + mc_i <= MAXDATA * 2 is partially proven to be inductive.\nloop invariant mc_i < n2 ==> cp1_off + mc_i < MAXDATA * 2 is partially proven to be inductive.\nloop invariant 0 <= n2 <= MAXDATA*2 - n1 is partially proven to be inductive.\nloop invariant n1 + n2 <= MAXDATA * 2 is partially proven to be inductive.\nloop invariant cp1_off >= 0 is partially proven to be inductive.\nloop invariant cp1_off <= n1 + n2 is partially proven to be inductive.\nloop invariant n1 >= cp1_off >= 0 is partially proven to be inductive.\nloop invariant cp1_off + n2 <= MAXDATA * 2 is partially proven to be inductive.\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> cp1_off + mc_i < cp1_off + n2 is partially proven to be inductive.\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> cp1_off + mc_i >= cp1_off is partially proven to be inductive.\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> mc_i <= n2 is partially proven to be inductive.\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> mc_i >= 0 is partially proven to be inductive.\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> cp1_off + mc_i < MAXDATA * 2 is partially proven to be inductive.\nAssertion cp1_off + mc_i < MAXDATA * 2: Partially proven",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main() {\n  \n  int cp1_off, n1, n2, mc_i;\n  n1 = unknown();\n  n2 = unknown();\n  cp1_off = unknown();\n\n  int MAXDATA = unknown();\n  if (MAXDATA > 0 ); else goto END;\n\n  if ((n1 <= MAXDATA * 2)); else goto END;\n\n  if ((cp1_off <= n1)); else goto END;\n\n  if ((n2 <= MAXDATA*2 - n1)); else goto END;\n\n  /*@\nloop invariant i1: 0 <= mc_i <= n2;\nloop invariant i2: cp1_off + mc_i < MAXDATA * 2 ==> mc_i < n2;\nloop invariant i3: cp1_off + mc_i < MAXDATA * 2 ==> cp1_off + mc_i < n1;\nloop invariant i4: cp1_off + mc_i < MAXDATA * 2 ==> cp1_off + mc_i < MAXDATA * 2 - n1;\nloop invariant i5: 0 <= cp1_off <= n1;\nloop invariant i6: 0 <= n1 <= MAXDATA * 2;\nloop invariant i7: 0 <= n2 <= MAXDATA * 2;\nloop invariant i8: 0 <= MAXDATA;\nloop invariant i9: 0 <= cp1_off + mc_i <= MAXDATA * 2;\nloop invariant i10: 0 <= n2 <= MAXDATA * 2 - n1;\nloop invariant i11: mc_i <= n2;\nloop invariant i12: cp1_off+mc_i <= n1+mc_i;\nloop invariant i13: cp1_off+mc_i < n1+mc_i;\nloop invariant i14: cp1_off + mc_i < MAXDATA * 2;\nloop invariant i15: MAXDATA > 0;\nloop invariant i16: n1 <= MAXDATA * 2;\nloop invariant i17: cp1_off <= n1;\nloop invariant i18: n2 <= MAXDATA * 2 - n1;\nloop invariant i19: mc_i >= 0;\nloop invariant i20: cp1_off + mc_i < MAXDATA * 2 ==> mc_i <= MAXDATA * 2 - cp1_off;\nloop invariant i21: mc_i <= n2 ==> cp1_off + mc_i < MAXDATA * 2;\nloop invariant i22: mc_i <= n2 ==> mc_i < MAXDATA * 2;\nloop invariant i23: mc_i <= n2 ==> mc_i < MAXDATA * 2 - cp1_off;\nloop invariant i24: 1 <= cp1_off <= MAXDATA * 2;\nloop invariant i25: cp1_off + mc_i <= MAXDATA * 2;\nloop invariant i26: mc_i < n2 ==> cp1_off + mc_i < MAXDATA * 2;\nloop invariant i27: 0 <= n2 <= MAXDATA*2 - n1;\nloop invariant i28: n1 + n2 <= MAXDATA * 2;\nloop invariant i29: cp1_off >= 0;\nloop invariant i30: cp1_off <= n1 + n2;\nloop invariant i31: n1 >= cp1_off >= 0;\nloop invariant i32: cp1_off + n2 <= MAXDATA * 2;\nloop invariant i33: cp1_off + mc_i < MAXDATA * 2 ==> cp1_off + mc_i < cp1_off + n2;\nloop invariant i34: cp1_off + mc_i < MAXDATA * 2 ==> cp1_off + mc_i >= cp1_off;\nloop invariant i35: cp1_off + mc_i < MAXDATA * 2 ==> mc_i <= n2;\nloop invariant i36: cp1_off + mc_i < MAXDATA * 2 ==> mc_i >= 0;\nloop invariant i37: cp1_off + mc_i < MAXDATA * 2 ==> cp1_off + mc_i < MAXDATA * 2;\n*/\nfor (mc_i = 0; mc_i < n2; mc_i++) {\n    \n    {;\n//@ assert(cp1_off+mc_i < MAXDATA * 2);\n}\n\n  }\n\n END:  return 0;\n}",
        "combined_annotation_num_solver_calls": 7,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main() {\n  \n  int cp1_off, n1, n2, mc_i;\n  n1 = unknown();\n  n2 = unknown();\n  cp1_off = unknown();\n\n  int MAXDATA = unknown();\n  if (MAXDATA > 0 ); else goto END;\n\n  if ((n1 <= MAXDATA * 2)); else goto END;\n\n  if ((cp1_off <= n1)); else goto END;\n\n  if ((n2 <= MAXDATA*2 - n1)); else goto END;\n\n  /*@\n\n\n\n\n\n\n\nloop invariant i8: 0 <= MAXDATA;\n\n\n\nloop invariant i12: cp1_off+mc_i <= n1+mc_i;\n\n\nloop invariant i15: MAXDATA > 0;\nloop invariant i16: n1 <= MAXDATA * 2;\nloop invariant i17: cp1_off <= n1;\nloop invariant i18: n2 <= MAXDATA * 2 - n1;\nloop invariant i19: mc_i >= 0;\nloop invariant i20: cp1_off + mc_i < MAXDATA * 2 ==> mc_i <= MAXDATA * 2 - cp1_off;\n\n\n\n\nloop invariant i25: cp1_off + mc_i <= MAXDATA * 2;\nloop invariant i26: mc_i < n2 ==> cp1_off + mc_i < MAXDATA * 2;\n\nloop invariant i28: n1 + n2 <= MAXDATA * 2;\n\n\n\nloop invariant i32: cp1_off + n2 <= MAXDATA * 2;\n\nloop invariant i34: cp1_off + mc_i < MAXDATA * 2 ==> cp1_off + mc_i >= cp1_off;\n\nloop invariant i36: cp1_off + mc_i < MAXDATA * 2 ==> mc_i >= 0;\nloop invariant i37: cp1_off + mc_i < MAXDATA * 2 ==> cp1_off + mc_i < MAXDATA * 2;\n*/\nfor (mc_i = 0; mc_i < n2; mc_i++) {\n    \n    {;\n//@ assert(cp1_off+mc_i < MAXDATA * 2);\n}\n\n  }\n\n END:  return 0;\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c"
        ],
        "skipped": [],
        "total": 27,
        "success_count": 26,
        "failure_count": 1,
        "success_rate": 0.9629629629629629
    }
}