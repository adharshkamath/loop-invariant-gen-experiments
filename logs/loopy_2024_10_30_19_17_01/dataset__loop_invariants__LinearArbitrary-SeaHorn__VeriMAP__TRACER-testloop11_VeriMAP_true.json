{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nvoid main()\n{\n  int e, s;\n\n  e=0;\n  s=2;\n  while (unknown()) {\n    if (s == 2){\n      if (e ==0) e=1;\n      s = 3;\n    }\n    else if (s == 3){\n      if (e ==1) e=2;\n      s=4;\n    }\n    else if (s == 4){\n      {;\n//@ assert(!( e == 3 ));\n}\n\n      s=5;\n    }\n  }\n  \nreturn;\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= e <= 2;\nloop invariant 2 <= s <= 5;\nloop invariant s == 2 ==> e == 0;\nloop invariant s == 3 ==> e == 1;\nloop invariant s == 4 ==> e == 2;\n*/\n```",
            "```\n/*@\nloop invariant s == 2 ==> e == 0;\nloop invariant s == 3 ==> e == 1;\nloop invariant s == 4 ==> e == 2;\nloop invariant s == 5 ==> e == 3;\nloop invariant e == 0 ==> !unknown();\nloop invariant e == 1 ==> !unknown();\nloop invariant e == 2 ==> !unknown();\nloop invariant e == 3 ==> !unknown();\nloop invariant s == 2 ==> !unknown();\nloop invariant s == 3 ==> !unknown();\nloop invariant s == 4 ==> !unknown();\nloop invariant s == 5 ==> !unknown();\nloop invariant s == 2 ==> !unknown();\nloop invariant s == 3 ==> !unknown();\nloop invariant s == 4 ==> !unknown();\nloop invariant s == 5 ==> !unknown();\nloop invariant s == 2 ==> !unknown();\nloop invariant s == 3 ==> !unknown();\nloop invariant s == 4 ==> !unknown();\nloop invariant s == 5 ==> !unknown();\nloop invariant s == 2 ==> !unknown();\nloop invariant s == 3 ==> !unknown();\nloop invariant s == 4 ==> !unknown();\nloop invariant s == 5 ==> !unknown();\nloop invariant s == 2 ==> !unknown();\nloop invariant s == 3 ==> !unknown();\nloop invariant s == 4 ==> !unknown();\nloop invariant s == 5 ==> !unknown();\nloop invariant s == 2 ==> !unknown();\nloop invariant s == 3 ==> !unknown();\nloop invariant s == 4 ==> !unknown();\nloop invariant s == 5 ==> !unknown();\nloop invariant s == 2 ==> !unknown();\nloop invariant s == 3 ==> !unknown();\nloop invariant s == 4 ==> !unknown();\nloop invariant s == 5 ==> !unknown();\nloop invariant s == 2 ==> !unknown();\nloop invariant s == 3 ==> !unknown();\nloop invariant s == 4 ==> !unknown();\nloop invariant s == 5 ==> !unknown();\nloop invariant s == 5 ==> !unknown();\nloop invariant !unknown() ==> s == 5;\nloop invariant s == 5 ==> !unknown();\nloop invariant !unknown() ==> s == 5;\nloop invariant s == 5 ==> !unknown();\nloop invariant !unknown() ==> s == 5;\nloop invariant s == 5 ==> !unknown();\nloop invariant !unknown() ==> s == 5;\nloop invariant s == 5 ==> !unknown();\nloop invariant !unknown() ==> s == 5;\nloop invariant s == 5 ==> !unknown();\nloop invariant !unknown() ==> s == 5;\nloop invariant s == 5 ==> !unknown();\nloop invariant !unknown() ==> s == 5;\nloop invariant s == 5 ==> !unknown();\nloop invariant !unknown() ==> s == 5;\nloop invariant s == 5 ==> !unknown();\nloop invariant !unknown() ==> s == 5;\nloop invariant s == 5 ==> !unknown();\nloop invariant !unknown() ==> s == 5;\nloop invariant s == 5 ==> !unknown();\nloop invariant !unknown() ==> s == 5;\nloop invariant s == 5 ==> !unknown();\nloop invariant !unknown() ==> s == 5;\nloop invariant s == 5 ==> !unknown();\nloop invariant !unknown() ==> s == 5;\nloop invariant s == 5 ==> !unknown();\nloop invariant !unknown() ==> s == 5;\nloop invariant s == 5 ==> !unknown();\nloop invariant !unknown() ==> s == 5;\nloop invariant s == 5 ==> !unknown();\nloop invariant !unknown() ==> s == 5;\nloop invariant s == 5 ==> !unknown();\nloop invariant !unknown() ==> s == 5;\nloop invariant s == 5 ==> !unknown();\nloop invariant !unknown() ==> s == 5;\nloop invariant s == 5 ==> !unknown();\nloop invariant !unknown() ==> s == 5;\nloop invariant s == 5 ==> !unknown();\nloop invariant !unknown() ==> s == 5;\nloop invariant s == 5 ==> !unknown();\nloop invariant !unknown() ==> s == 5;\nloop invariant s == 5 ==> !unknown();\nloop invariant !unknown() ==> s == 5;\nloop invariant s == 5 ==> !unknown();\nloop invariant !unknown() ==> s == 5;\nloop invariant s == 5 ==> !unknown();\nloop invariant !unknown() ==> s == 5;\nloop invariant s == 5 ==> !unknown();\nloop invariant !unknown() ==> s == 5;\nloop invariant s == 5 ==> !unknown();\nloop invariant !unknown() ==> s == 5;\nloop invariant s == 5 ==> !unknown();\nloop invariant !unknown() ==> s == 5;\nloop invariant s == 5 ==> !unknown();\nloop invariant !unknown() ==> s == 5;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= e <= 3;\nloop invariant 2 <= s <= 5;\nloop invariant e != 3 ==> s != 2;\nloop invariant s != 3 ==> e != 1;\nloop invariant s != 4 ==> e != 2;\nloop invariant s != 5 ==> e != 3;\nloop invariant 0 <= e <= 3;\nloop invariant 2 <= s <= 5;\nloop invariant e != 3 ==> s != 2;\nloop invariant s != 3 ==> e != 1;\nloop invariant s != 4 ==> e != 2;\nloop invariant s != 5 ==> e != 3;\n*/\n```",
            "```\n/*@\nloop invariant 0 ============ s;\nloop invariant 0 ============ e;\nloop invariant 0 ============ s;\nloop invariant 0 ============ e;\nloop invariant 0 ============ s;\nloop invariant 0 ============ e;\nloop invariant 0 ============ s;\nloop invariant 0 ============ e;\nloop invariant 0 ============ s;\nloop invariant 0 ============ e;\nloop invariant 0 ============ s;\nloop invariant 0 ============ e;\nloop invariant 0 ============ s;\nloop invariant 0 ============ e;\nloop invariant 0 ============ s;\nloop invariant 0 ============ e;\nloop invariant 0 ============ s;\nloop invariant 0 ============ e;\nloop invariant 0 ============ s;\nloop invariant 0 ============ e;\nloop invariant 0 ============ s;\nloop invariant 0 ============ e;\nloop invariant 0 ============ s;\nloop invariant 0 ============ e;\nloop invariant 0 ============ s;\nloop invariant 0 ============ e;\nloop invariant 0 ============ s;\nloop invariant 0 ============ e;\nloop invariant 0 ============ s;\nloop invariant 0 ============ e;\nloop invariant 0 ============ s;\nloop invariant 0 ============ e;\nloop invariant 0 ============ s;\nloop invariant 0 ============ e;\nloop invariant 0 ============ s;\nloop invariant 0 ============ e;\nloop invariant 0 ============ s;\nloop invariant 0 ============ e;\nloop invariant 0 ============ s;\nloop invariant 0 ============ e;\nloop invariant 0 ============ s;\nloop invariant 0 ============ e;\nloop invariant 0 ============ s;\nloop invariant 0 ============ e;\nloop invariant 0 ============ s;\nloop invariant 0 ============ e;\nloop invariant 0 ============ s;\nloop invariant 0 ============ e;\nloop invariant 0 ============ s;\nloop invariant 0 ============ e;\nloop invariant 0 ============ s;\nloop invariant 0 ============ e;\nloop invariant 0 ============ s;\nloop invariant 0 ============ e;\nloop invariant 0 ============ s;\nloop invariant 0 ============ e;\nloop invariant 0 ============ s;\nloop invariant 0 ============ e;\nloop invariant 0 ============ s;\nloop invariant 0 ============ e;\nloop invariant 0 ============ s;\nloop invariant 0 ============ e;\nloop invariant 0 ============ s;\nloop invariant 0 ============ e;\nloop invariant 0 ============ s;\nloop invariant 0 ============ e;\nloop invariant 0 ============ s;\nloop invariant 0 ============ e;\nloop invariant 0 ============ s;\nloop invariant 0 ============ e;\nloop invariant 0 ============ s;\nloop invariant 0 ============ e;\nloop invariant 0 ============ s;\nloop invariant 0 ============ e;\nloop invariant 0 ============ s;\nloop invariant 0 ============ e;\nloop invariant 0 ============ s;\nloop invariant 0 ============ e;\nloop invariant 0 ============ s;\nloop invariant 0 ============ e;\nloop invariant 0 ============ s;\nloop invariant 0 ============ e;\nloop invariant 0 ============ s;\nloop invariant 0 ============ e;\nloop invariant 0 ============ s;\nloop invariant 0 ============ e;\nloop invariant 0 ============ s;\nloop invariant 0 ============ e;\nloop invariant 0 ============ s;\nloop invariant 0 ============ e;\nloop invariant 0 ============ s;\nloop invariant 0 ============ e;\nloop invariant 0 ============ s;\nloop invariant 0 ============ e;\nloop invariant 0 ============ s;\nloop invariant 0 ============ e;\nloop invariant 0 ============ s;\nloop invariant 0 ============ e;\nloop invariant 0 ============ s;\nloop invariant 0 ============ e;\nloop invariant 0 ============ s;\nloop invariant 0 ============ e;\nloop invariant 0 ============ s;\nloop invariant 0 ============ e;\nloop invariant 0 ============ s;\nloop invariant 0 ============ e;\nloop invariant 0 ============ s;\nloop invariant 0 ============ e;\nloop invariant 0 ============ s;\nloop invariant 0 ============ e;\nloop invariant 0 ============ s;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= e <= 2;\nloop invariant 2 <= s <= 5;\nloop invariant !(e == 3);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= e <= 2;\nloop invariant s == 2 || s == 3 || s == 4 || s == 5;\nloop invariant e == 0 || e == 1 || e == 2;\nloop invariant s == 2 ==> e == 0;\nloop invariant s == 3 ==> e == 1;\nloop invariant s == 4 ==> e == 2;\nloop invariant s == 5 ==> e == 2;\nloop invariant s == 1 ==> e == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= e <= 3;\nloop invariant 2 <= s <= 5;\nloop invariant !(e == s);\n*/\n```",
            "```\n/*@\nloop invariant 1 <= e <= 3; loop invariant 2 <= s <= 5; loop invariant (s == 2 || s == 3 || (s == 4 && e != 3) || (s == 5 && e != 3)); loop invariant (e != 3) ==> (s == 2 || s == 3 || s == 5); loop invariant (s == 2 || s == 3 || (s == 4 && e != 3) || (s == 5 && e != 3)) ==> (e != 3); loop invariant (e != 3) ==> (1 <= e <= 3); loop invariant (e != 3) ==> (2 <= s <= 5); loop invariant (s == 2 || s == 3 || (s == 4 && e != 3) || (s == 5 && e != 3)) ==> (2 <= s <= 5); loop invariant (2 <= s <= 5) ==> (2 <= e <= 3);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= e <= 2;\nloop invariant 2 <= s <= 5;\nloop invariant (e == 0) ==> (s == 2);\nloop invariant (e == 1) ==> (s == 3);\nloop invariant (e == 2) ==> (s == 4);\nloop invariant (s == 5) ==> (e == 3);\nloop invariant (e == 3) ==> (s == 5);\nloop invariant (e == 3) ==> (s == 5);\n*/\n```",
            "```\n/*@\nloop invariant 1 <= e <= 2;\nloop invariant 2 <= s <= 5;\nloop invariant !(e == 3);\nloop invariant !(s == 1);\nloop invariant !(s == 2);\nloop invariant !(s == 3 && e == 0);\nloop invariant !(s == 4 && e == 0);\nloop invariant !(s == 4 && e == 1);\nloop invariant !(s == 4 && e == 2);\nloop invariant !(s == 5 && e == 0);\nloop invariant !(s == 5 && e == 1);\nloop invariant !(s == 5 && e == 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= e <= 3;\nloop invariant 2 <= s <= 5;\nloop invariant s == 3 ==> e == 1;\nloop invariant s == 4 ==> e == 2;\nloop invariant s == 5 ==> e == 3;\nloop invariant s == 5 ==> !(e == 3);\nloop invariant s == 5 ==> (e == 2 ==> e == 2);\nloop invariant s == 5 ==> (e == 1 ==> e == 1);\nloop invariant s == 5 ==> (e == 0 ==> e == 0);\nloop invariant s == 5 ==> (e == 3 ==> e == 3);\nloop invariant s == 5 ==> (s == 5 ==> s == 5);\nloop invariant s == 5 ==> (s == 4 ==> s == 4);\nloop invariant s == 5 ==> (s == 3 ==> s == 3);\nloop invariant s == 5 ==> (s == 2 ==> s == 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= e <= 2;\nloop invariant 2 <= s <= 5;\nloop invariant (s == 2 && e == 0) || (s == 3 && e == 1) || (s == 4 && e == 2) || (s == 5 && e == 3);\nloop invariant !(s == 4 && e == 3);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= e <= 2;\nloop invariant 2 <= s <= 5;\nloop invariant (s == 2 ==> e == 1);\nloop invariant (s == 3 ==> e == 2);\nloop invariant (s == 4 ==> e == 3);\nloop invariant (s == 5 ==> e == 1);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= e <= 2 && 0 <= s <= 5;\nloop invariant (s == 3 ==> e == 1);\nloop invariant (s == 4 ==> e == 2);\nloop invariant (s == 5 ==> e == 3);\nloop invariant (s != 2 ==> s != 3 ==> s != 4);\nloop invariant (s == 2 ==> s == 3 ==> s == 4 ==> s == 5);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= e <= 2;\nloop invariant 2 <= s <= 5;\nloop invariant (s == 2 ==> e == 0);\nloop invariant (s == 3 ==> e == 1);\nloop invariant (s == 4 ==> e == 2);\nloop invariant (s == 5 ==> e == 3);\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= e <= 2;\nloop invariant 2 <= s <= 5;\nloop invariant s == 2 ==> e == 0;\nloop invariant s == 3 ==> e == 1;\nloop invariant s == 4 ==> e == 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nvoid main()\n{\n  int e, s;\n\n  e=0;\n  s=2;\n  /*@\nloop invariant i1: 0 <= e <= 2;\nloop invariant i2: 2 <= s <= 5;\nloop invariant i3: s == 2 ==> e == 0;\nloop invariant i4: s == 3 ==> e == 1;\nloop invariant i5: s == 4 ==> e == 2;\n*/\nwhile (unknown()) {\n    if (s == 2){\n      if (e ==0) e=1;\n      s = 3;\n    }\n    else if (s == 3){\n      if (e ==1) e=2;\n      s=4;\n    }\n    else if (s == 4){\n      {;\n//@ assert(!( e == 3 ));\n}\n\n      s=5;\n    }\n  }\n  \nreturn;\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 10,
                "annotations": "```\n/*@\nloop invariant s == 2 ==> e == 0;\nloop invariant s == 3 ==> e == 1;\nloop invariant s == 4 ==> e == 2;\nloop invariant s == 5 ==> e == 3;\nloop invariant e == 0 ==> !unknown();\nloop invariant e == 1 ==> !unknown();\nloop invariant e == 2 ==> !unknown();\nloop invariant e == 3 ==> !unknown();\nloop invariant s == 2 ==> !unknown();\nloop invariant s == 3 ==> !unknown();\nloop invariant s == 4 ==> !unknown();\nloop invariant s == 5 ==> !unknown();\nloop invariant s == 2 ==> !unknown();\nloop invariant s == 3 ==> !unknown();\nloop invariant s == 4 ==> !unknown();\nloop invariant s == 5 ==> !unknown();\nloop invariant s == 2 ==> !unknown();\nloop invariant s == 3 ==> !unknown();\nloop invariant s == 4 ==> !unknown();\nloop invariant s == 5 ==> !unknown();\nloop invariant s == 2 ==> !unknown();\nloop invariant s == 3 ==> !unknown();\nloop invariant s == 4 ==> !unknown();\nloop invariant s == 5 ==> !unknown();\nloop invariant s == 2 ==> !unknown();\nloop invariant s == 3 ==> !unknown();\nloop invariant s == 4 ==> !unknown();\nloop invariant s == 5 ==> !unknown();\nloop invariant s == 2 ==> !unknown();\nloop invariant s == 3 ==> !unknown();\nloop invariant s == 4 ==> !unknown();\nloop invariant s == 5 ==> !unknown();\nloop invariant s == 2 ==> !unknown();\nloop invariant s == 3 ==> !unknown();\nloop invariant s == 4 ==> !unknown();\nloop invariant s == 5 ==> !unknown();\nloop invariant s == 2 ==> !unknown();\nloop invariant s == 3 ==> !unknown();\nloop invariant s == 4 ==> !unknown();\nloop invariant s == 5 ==> !unknown();\nloop invariant s == 5 ==> !unknown();\nloop invariant !unknown() ==> s == 5;\nloop invariant s == 5 ==> !unknown();\nloop invariant !unknown() ==> s == 5;\nloop invariant s == 5 ==> !unknown();\nloop invariant !unknown() ==> s == 5;\nloop invariant s == 5 ==> !unknown();\nloop invariant !unknown() ==> s == 5;\nloop invariant s == 5 ==> !unknown();\nloop invariant !unknown() ==> s == 5;\nloop invariant s == 5 ==> !unknown();\nloop invariant !unknown() ==> s == 5;\nloop invariant s == 5 ==> !unknown();\nloop invariant !unknown() ==> s == 5;\nloop invariant s == 5 ==> !unknown();\nloop invariant !unknown() ==> s == 5;\nloop invariant s == 5 ==> !unknown();\nloop invariant !unknown() ==> s == 5;\nloop invariant s == 5 ==> !unknown();\nloop invariant !unknown() ==> s == 5;\nloop invariant s == 5 ==> !unknown();\nloop invariant !unknown() ==> s == 5;\nloop invariant s == 5 ==> !unknown();\nloop invariant !unknown() ==> s == 5;\nloop invariant s == 5 ==> !unknown();\nloop invariant !unknown() ==> s == 5;\nloop invariant s == 5 ==> !unknown();\nloop invariant !unknown() ==> s == 5;\nloop invariant s == 5 ==> !unknown();\nloop invariant !unknown() ==> s == 5;\nloop invariant s == 5 ==> !unknown();\nloop invariant !unknown() ==> s == 5;\nloop invariant s == 5 ==> !unknown();\nloop invariant !unknown() ==> s == 5;\nloop invariant s == 5 ==> !unknown();\nloop invariant !unknown() ==> s == 5;\nloop invariant s == 5 ==> !unknown();\nloop invariant !unknown() ==> s == 5;\nloop invariant s == 5 ==> !unknown();\nloop invariant !unknown() ==> s == 5;\nloop invariant s == 5 ==> !unknown();\nloop invariant !unknown() ==> s == 5;\nloop invariant s == 5 ==> !unknown();\nloop invariant !unknown() ==> s == 5;\nloop invariant s == 5 ==> !unknown();\nloop invariant !unknown() ==> s == 5;\nloop invariant s == 5 ==> !unknown();\nloop invariant !unknown() ==> s == 5;\nloop invariant s == 5 ==> !unknown();\nloop invariant !unknown() ==> s == 5;\nloop invariant s == 5 ==> !unknown();\nloop invariant !unknown() ==> s == 5;\nloop invariant s == 5 ==> !unknown();\nloop invariant !unknown() ==> s == 5;\nloop invariant s == 5 ==> !unknown();\nloop invariant !unknown() ==> s == 5;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nvoid main()\n{\n  int e, s;\n\n  e=0;\n  s=2;\n  /*@\nloop invariant i1: s == 2 ==> e == 0;\nloop invariant i2: s == 3 ==> e == 1;\nloop invariant i3: s == 4 ==> e == 2;\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown()) {\n    if (s == 2){\n      if (e ==0) e=1;\n      s = 3;\n    }\n    else if (s == 3){\n      if (e ==1) e=2;\n      s=4;\n    }\n    else if (s == 4){\n      {;\n//@ assert(!( e == 3 ));\n}\n\n      s=5;\n    }\n  }\n  \nreturn;\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= e <= 3;\nloop invariant 2 <= s <= 5;\nloop invariant e != 3 ==> s != 2;\nloop invariant s != 3 ==> e != 1;\nloop invariant s != 4 ==> e != 2;\nloop invariant s != 5 ==> e != 3;\nloop invariant 0 <= e <= 3;\nloop invariant 2 <= s <= 5;\nloop invariant e != 3 ==> s != 2;\nloop invariant s != 3 ==> e != 1;\nloop invariant s != 4 ==> e != 2;\nloop invariant s != 5 ==> e != 3;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nvoid main()\n{\n  int e, s;\n\n  e=0;\n  s=2;\n  /*@\nloop invariant i1: 0 <= e <= 3;\nloop invariant i2: 2 <= s <= 5;\n\nloop invariant i4: s != 3 ==> e != 1;\n\nloop invariant i6: s != 5 ==> e != 3;\n*/\nwhile (unknown()) {\n    if (s == 2){\n      if (e ==0) e=1;\n      s = 3;\n    }\n    else if (s == 3){\n      if (e ==1) e=2;\n      s=4;\n    }\n    else if (s == 4){\n      {;\n//@ assert(!( e == 3 ));\n}\n\n      s=5;\n    }\n  }\n  \nreturn;\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 ============ s;\nloop invariant 0 ============ e;\nloop invariant 0 ============ s;\nloop invariant 0 ============ e;\nloop invariant 0 ============ s;\nloop invariant 0 ============ e;\nloop invariant 0 ============ s;\nloop invariant 0 ============ e;\nloop invariant 0 ============ s;\nloop invariant 0 ============ e;\nloop invariant 0 ============ s;\nloop invariant 0 ============ e;\nloop invariant 0 ============ s;\nloop invariant 0 ============ e;\nloop invariant 0 ============ s;\nloop invariant 0 ============ e;\nloop invariant 0 ============ s;\nloop invariant 0 ============ e;\nloop invariant 0 ============ s;\nloop invariant 0 ============ e;\nloop invariant 0 ============ s;\nloop invariant 0 ============ e;\nloop invariant 0 ============ s;\nloop invariant 0 ============ e;\nloop invariant 0 ============ s;\nloop invariant 0 ============ e;\nloop invariant 0 ============ s;\nloop invariant 0 ============ e;\nloop invariant 0 ============ s;\nloop invariant 0 ============ e;\nloop invariant 0 ============ s;\nloop invariant 0 ============ e;\nloop invariant 0 ============ s;\nloop invariant 0 ============ e;\nloop invariant 0 ============ s;\nloop invariant 0 ============ e;\nloop invariant 0 ============ s;\nloop invariant 0 ============ e;\nloop invariant 0 ============ s;\nloop invariant 0 ============ e;\nloop invariant 0 ============ s;\nloop invariant 0 ============ e;\nloop invariant 0 ============ s;\nloop invariant 0 ============ e;\nloop invariant 0 ============ s;\nloop invariant 0 ============ e;\nloop invariant 0 ============ s;\nloop invariant 0 ============ e;\nloop invariant 0 ============ s;\nloop invariant 0 ============ e;\nloop invariant 0 ============ s;\nloop invariant 0 ============ e;\nloop invariant 0 ============ s;\nloop invariant 0 ============ e;\nloop invariant 0 ============ s;\nloop invariant 0 ============ e;\nloop invariant 0 ============ s;\nloop invariant 0 ============ e;\nloop invariant 0 ============ s;\nloop invariant 0 ============ e;\nloop invariant 0 ============ s;\nloop invariant 0 ============ e;\nloop invariant 0 ============ s;\nloop invariant 0 ============ e;\nloop invariant 0 ============ s;\nloop invariant 0 ============ e;\nloop invariant 0 ============ s;\nloop invariant 0 ============ e;\nloop invariant 0 ============ s;\nloop invariant 0 ============ e;\nloop invariant 0 ============ s;\nloop invariant 0 ============ e;\nloop invariant 0 ============ s;\nloop invariant 0 ============ e;\nloop invariant 0 ============ s;\nloop invariant 0 ============ e;\nloop invariant 0 ============ s;\nloop invariant 0 ============ e;\nloop invariant 0 ============ s;\nloop invariant 0 ============ e;\nloop invariant 0 ============ s;\nloop invariant 0 ============ e;\nloop invariant 0 ============ s;\nloop invariant 0 ============ e;\nloop invariant 0 ============ s;\nloop invariant 0 ============ e;\nloop invariant 0 ============ s;\nloop invariant 0 ============ e;\nloop invariant 0 ============ s;\nloop invariant 0 ============ e;\nloop invariant 0 ============ s;\nloop invariant 0 ============ e;\nloop invariant 0 ============ s;\nloop invariant 0 ============ e;\nloop invariant 0 ============ s;\nloop invariant 0 ============ e;\nloop invariant 0 ============ s;\nloop invariant 0 ============ e;\nloop invariant 0 ============ s;\nloop invariant 0 ============ e;\nloop invariant 0 ============ s;\nloop invariant 0 ============ e;\nloop invariant 0 ============ s;\nloop invariant 0 ============ e;\nloop invariant 0 ============ s;\nloop invariant 0 ============ e;\nloop invariant 0 ============ s;\nloop invariant 0 ============ e;\nloop invariant 0 ============ s;\nloop invariant 0 ============ e;\nloop invariant 0 ============ s;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nvoid main()\n{\n  int e, s;\n\n  e=0;\n  s=2;\n  /*@\n\n\n*/\nwhile (unknown()) {\n    if (s == 2){\n      if (e ==0) e=1;\n      s = 3;\n    }\n    else if (s == 3){\n      if (e ==1) e=2;\n      s=4;\n    }\n    else if (s == 4){\n      {;\n//@ assert(!( e == 3 ));\n}\n\n      s=5;\n    }\n  }\n  \nreturn;\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= e <= 2;\nloop invariant 2 <= s <= 5;\nloop invariant !(e == 3);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nvoid main()\n{\n  int e, s;\n\n  e=0;\n  s=2;\n  /*@\nloop invariant i1: 0 <= e <= 2;\nloop invariant i2: 2 <= s <= 5;\nloop invariant i3: !(e == 3);\n*/\nwhile (unknown()) {\n    if (s == 2){\n      if (e ==0) e=1;\n      s = 3;\n    }\n    else if (s == 3){\n      if (e ==1) e=2;\n      s=4;\n    }\n    else if (s == 4){\n      {;\n//@ assert(!( e == 3 ));\n}\n\n      s=5;\n    }\n  }\n  \nreturn;\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= e <= 2;\nloop invariant s == 2 || s == 3 || s == 4 || s == 5;\nloop invariant e == 0 || e == 1 || e == 2;\nloop invariant s == 2 ==> e == 0;\nloop invariant s == 3 ==> e == 1;\nloop invariant s == 4 ==> e == 2;\nloop invariant s == 5 ==> e == 2;\nloop invariant s == 1 ==> e == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nvoid main()\n{\n  int e, s;\n\n  e=0;\n  s=2;\n  /*@\nloop invariant i1: 0 <= e <= 2;\nloop invariant i2: s == 2 || s == 3 || s == 4 || s == 5;\nloop invariant i3: e == 0 || e == 1 || e == 2;\nloop invariant i4: s == 2 ==> e == 0;\nloop invariant i5: s == 3 ==> e == 1;\nloop invariant i6: s == 4 ==> e == 2;\nloop invariant i7: s == 5 ==> e == 2;\nloop invariant i8: s == 1 ==> e == 0;\n*/\nwhile (unknown()) {\n    if (s == 2){\n      if (e ==0) e=1;\n      s = 3;\n    }\n    else if (s == 3){\n      if (e ==1) e=2;\n      s=4;\n    }\n    else if (s == 4){\n      {;\n//@ assert(!( e == 3 ));\n}\n\n      s=5;\n    }\n  }\n  \nreturn;\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= e <= 3;\nloop invariant 2 <= s <= 5;\nloop invariant !(e == s);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nvoid main()\n{\n  int e, s;\n\n  e=0;\n  s=2;\n  /*@\nloop invariant i1: 0 <= e <= 3;\nloop invariant i2: 2 <= s <= 5;\n\n*/\nwhile (unknown()) {\n    if (s == 2){\n      if (e ==0) e=1;\n      s = 3;\n    }\n    else if (s == 3){\n      if (e ==1) e=2;\n      s=4;\n    }\n    else if (s == 4){\n      {;\n//@ assert(!( e == 3 ));\n}\n\n      s=5;\n    }\n  }\n  \nreturn;\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 1 <= e <= 3; loop invariant 2 <= s <= 5; loop invariant (s == 2 || s == 3 || (s == 4 && e != 3) || (s == 5 && e != 3)); loop invariant (e != 3) ==> (s == 2 || s == 3 || s == 5); loop invariant (s == 2 || s == 3 || (s == 4 && e != 3) || (s == 5 && e != 3)) ==> (e != 3); loop invariant (e != 3) ==> (1 <= e <= 3); loop invariant (e != 3) ==> (2 <= s <= 5); loop invariant (s == 2 || s == 3 || (s == 4 && e != 3) || (s == 5 && e != 3)) ==> (2 <= s <= 5); loop invariant (2 <= s <= 5) ==> (2 <= e <= 3);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nvoid main()\n{\n  int e, s;\n\n  e=0;\n  s=2;\n  /*@\n\n*/\nwhile (unknown()) {\n    if (s == 2){\n      if (e ==0) e=1;\n      s = 3;\n    }\n    else if (s == 3){\n      if (e ==1) e=2;\n      s=4;\n    }\n    else if (s == 4){\n      {;\n//@ assert(!( e == 3 ));\n}\n\n      s=5;\n    }\n  }\n  \nreturn;\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= e <= 2;\nloop invariant 2 <= s <= 5;\nloop invariant (e == 0) ==> (s == 2);\nloop invariant (e == 1) ==> (s == 3);\nloop invariant (e == 2) ==> (s == 4);\nloop invariant (s == 5) ==> (e == 3);\nloop invariant (e == 3) ==> (s == 5);\nloop invariant (e == 3) ==> (s == 5);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nvoid main()\n{\n  int e, s;\n\n  e=0;\n  s=2;\n  /*@\nloop invariant i1: 0 <= e <= 2;\nloop invariant i2: 2 <= s <= 5;\nloop invariant i3: (e == 0) ==> (s == 2);\nloop invariant i4: (e == 1) ==> (s == 3);\n\n\nloop invariant i7: (e == 3) ==> (s == 5);\n*/\nwhile (unknown()) {\n    if (s == 2){\n      if (e ==0) e=1;\n      s = 3;\n    }\n    else if (s == 3){\n      if (e ==1) e=2;\n      s=4;\n    }\n    else if (s == 4){\n      {;\n//@ assert(!( e == 3 ));\n}\n\n      s=5;\n    }\n  }\n  \nreturn;\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 1 <= e <= 2;\nloop invariant 2 <= s <= 5;\nloop invariant !(e == 3);\nloop invariant !(s == 1);\nloop invariant !(s == 2);\nloop invariant !(s == 3 && e == 0);\nloop invariant !(s == 4 && e == 0);\nloop invariant !(s == 4 && e == 1);\nloop invariant !(s == 4 && e == 2);\nloop invariant !(s == 5 && e == 0);\nloop invariant !(s == 5 && e == 1);\nloop invariant !(s == 5 && e == 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nvoid main()\n{\n  int e, s;\n\n  e=0;\n  s=2;\n  /*@\n\nloop invariant i2: 2 <= s <= 5;\nloop invariant i3: !(e == 3);\nloop invariant i4: !(s == 1);\n\nloop invariant i6: !(s == 3 && e == 0);\nloop invariant i7: !(s == 4 && e == 0);\nloop invariant i8: !(s == 4 && e == 1);\n\nloop invariant i10: !(s == 5 && e == 0);\nloop invariant i11: !(s == 5 && e == 1);\n\n*/\nwhile (unknown()) {\n    if (s == 2){\n      if (e ==0) e=1;\n      s = 3;\n    }\n    else if (s == 3){\n      if (e ==1) e=2;\n      s=4;\n    }\n    else if (s == 4){\n      {;\n//@ assert(!( e == 3 ));\n}\n\n      s=5;\n    }\n  }\n  \nreturn;\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= e <= 3;\nloop invariant 2 <= s <= 5;\nloop invariant s == 3 ==> e == 1;\nloop invariant s == 4 ==> e == 2;\nloop invariant s == 5 ==> e == 3;\nloop invariant s == 5 ==> !(e == 3);\nloop invariant s == 5 ==> (e == 2 ==> e == 2);\nloop invariant s == 5 ==> (e == 1 ==> e == 1);\nloop invariant s == 5 ==> (e == 0 ==> e == 0);\nloop invariant s == 5 ==> (e == 3 ==> e == 3);\nloop invariant s == 5 ==> (s == 5 ==> s == 5);\nloop invariant s == 5 ==> (s == 4 ==> s == 4);\nloop invariant s == 5 ==> (s == 3 ==> s == 3);\nloop invariant s == 5 ==> (s == 2 ==> s == 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nvoid main()\n{\n  int e, s;\n\n  e=0;\n  s=2;\n  /*@\nloop invariant i1: 0 <= e <= 3;\nloop invariant i2: 2 <= s <= 5;\n\n\n\nloop invariant i6: s == 5 ==> !(e == 3);\nloop invariant i7: s == 5 ==> (e == 2 ==> e == 2);\nloop invariant i8: s == 5 ==> (e == 1 ==> e == 1);\nloop invariant i9: s == 5 ==> (e == 0 ==> e == 0);\nloop invariant i10: s == 5 ==> (e == 3 ==> e == 3);\nloop invariant i11: s == 5 ==> (s == 5 ==> s == 5);\nloop invariant i12: s == 5 ==> (s == 4 ==> s == 4);\nloop invariant i13: s == 5 ==> (s == 3 ==> s == 3);\nloop invariant i14: s == 5 ==> (s == 2 ==> s == 2);\n*/\nwhile (unknown()) {\n    if (s == 2){\n      if (e ==0) e=1;\n      s = 3;\n    }\n    else if (s == 3){\n      if (e ==1) e=2;\n      s=4;\n    }\n    else if (s == 4){\n      {;\n//@ assert(!( e == 3 ));\n}\n\n      s=5;\n    }\n  }\n  \nreturn;\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= e <= 2;\nloop invariant 2 <= s <= 5;\nloop invariant (s == 2 && e == 0) || (s == 3 && e == 1) || (s == 4 && e == 2) || (s == 5 && e == 3);\nloop invariant !(s == 4 && e == 3);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nvoid main()\n{\n  int e, s;\n\n  e=0;\n  s=2;\n  /*@\nloop invariant i1: 0 <= e <= 2;\nloop invariant i2: 2 <= s <= 5;\n\nloop invariant i4: !(s == 4 && e == 3);\n*/\nwhile (unknown()) {\n    if (s == 2){\n      if (e ==0) e=1;\n      s = 3;\n    }\n    else if (s == 3){\n      if (e ==1) e=2;\n      s=4;\n    }\n    else if (s == 4){\n      {;\n//@ assert(!( e == 3 ));\n}\n\n      s=5;\n    }\n  }\n  \nreturn;\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= e <= 2;\nloop invariant 2 <= s <= 5;\nloop invariant (s == 2 ==> e == 1);\nloop invariant (s == 3 ==> e == 2);\nloop invariant (s == 4 ==> e == 3);\nloop invariant (s == 5 ==> e == 1);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nvoid main()\n{\n  int e, s;\n\n  e=0;\n  s=2;\n  /*@\nloop invariant i1: 0 <= e <= 2;\nloop invariant i2: 2 <= s <= 5;\n\n\n\n\n*/\nwhile (unknown()) {\n    if (s == 2){\n      if (e ==0) e=1;\n      s = 3;\n    }\n    else if (s == 3){\n      if (e ==1) e=2;\n      s=4;\n    }\n    else if (s == 4){\n      {;\n//@ assert(!( e == 3 ));\n}\n\n      s=5;\n    }\n  }\n  \nreturn;\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= e <= 2 && 0 <= s <= 5;\nloop invariant (s == 3 ==> e == 1);\nloop invariant (s == 4 ==> e == 2);\nloop invariant (s == 5 ==> e == 3);\nloop invariant (s != 2 ==> s != 3 ==> s != 4);\nloop invariant (s == 2 ==> s == 3 ==> s == 4 ==> s == 5);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nvoid main()\n{\n  int e, s;\n\n  e=0;\n  s=2;\n  /*@\nloop invariant i1: 0 <= e <= 2 && 0 <= s <= 5;\n\n\n\n\nloop invariant i6: (s == 2 ==> s == 3 ==> s == 4 ==> s == 5);\n*/\nwhile (unknown()) {\n    if (s == 2){\n      if (e ==0) e=1;\n      s = 3;\n    }\n    else if (s == 3){\n      if (e ==1) e=2;\n      s=4;\n    }\n    else if (s == 4){\n      {;\n//@ assert(!( e == 3 ));\n}\n\n      s=5;\n    }\n  }\n  \nreturn;\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= e <= 2;\nloop invariant 2 <= s <= 5;\nloop invariant (s == 2 ==> e == 0);\nloop invariant (s == 3 ==> e == 1);\nloop invariant (s == 4 ==> e == 2);\nloop invariant (s == 5 ==> e == 3);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nvoid main()\n{\n  int e, s;\n\n  e=0;\n  s=2;\n  /*@\nloop invariant i1: 0 <= e <= 2;\nloop invariant i2: 2 <= s <= 5;\nloop invariant i3: (s == 2 ==> e == 0);\nloop invariant i4: (s == 3 ==> e == 1);\nloop invariant i5: (s == 4 ==> e == 2);\n\n*/\nwhile (unknown()) {\n    if (s == 2){\n      if (e ==0) e=1;\n      s = 3;\n    }\n    else if (s == 3){\n      if (e ==1) e=2;\n      s=4;\n    }\n    else if (s == 4){\n      {;\n//@ assert(!( e == 3 ));\n}\n\n      s=5;\n    }\n  }\n  \nreturn;\n\n}",
                "checker_output_after_prune": true
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 26: unexpected token ')'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nvoid main()\n{\n  int e, s;\n\n  e=0;\n  s=2;\n  /*@\nloop invariant i1: 0 <= e <= 2;\nloop invariant i2: 2 <= s <= 5;\nloop invariant i3: s == 2 ==> e == 0;\nloop invariant i4: s == 3 ==> e == 1;\nloop invariant i5: s == 4 ==> e == 2;\nloop invariant i6: s == 5 ==> e == 3;\nloop invariant i7: e == 0 ==> !unknown();\nloop invariant i8: e == 1 ==> !unknown();\nloop invariant i9: e == 2 ==> !unknown();\nloop invariant i10: e == 3 ==> !unknown();\nloop invariant i11: s == 2 ==> !unknown();\nloop invariant i12: s == 3 ==> !unknown();\nloop invariant i13: s == 4 ==> !unknown();\nloop invariant i14: s == 5 ==> !unknown();\nloop invariant i15: !unknown() ==> s == 5;\nloop invariant i16: 0 <= e <= 3;\nloop invariant i17: e != 3 ==> s != 2;\nloop invariant i18: s != 3 ==> e != 1;\nloop invariant i19: s != 4 ==> e != 2;\nloop invariant i20: s != 5 ==> e != 3;\nloop invariant i21: 0 ============ s;\nloop invariant i22: 0 ============ e;\nloop invariant i23: !(e == 3);\nloop invariant i24: s == 2 || s == 3 || s == 4 || s == 5;\nloop invariant i25: e == 0 || e == 1 || e == 2;\nloop invariant i26: s == 5 ==> e == 2;\nloop invariant i27: s == 1 ==> e == 0;\nloop invariant i28: !(e == s);\nloop invariant i29: 1 <= e <= 3; loop invariant 2 <= s <= 5; loop invariant (s == 2 || s == 3 || (s == 4 && e != 3) || (s == 5 && e != 3)); loop invariant (e != 3) ==> (s == 2 || s == 3 || s == 5); loop invariant (s == 2 || s == 3 || (s == 4 && e != 3) || (s == 5 && e != 3)) ==> (e != 3); loop invariant (e != 3) ==> (1 <= e <= 3); loop invariant (e != 3) ==> (2 <= s <= 5); loop invariant (s == 2 || s == 3 || (s == 4 && e != 3) || (s == 5 && e != 3)) ==> (2 <= s <= 5); loop invariant (2 <= s <= 5) ==> (2 <= e <= 3);\nloop invariant i30: (e == 0) ==> (s == 2);\nloop invariant i31: (e == 1) ==> (s == 3);\nloop invariant i32: (e == 2) ==> (s == 4);\nloop invariant i33: (s == 5) ==> (e == 3);\nloop invariant i34: (e == 3) ==> (s == 5);\nloop invariant i35: 1 <= e <= 2;\nloop invariant i36: !(s == 1);\nloop invariant i37: !(s == 2);\nloop invariant i38: !(s == 3 && e == 0);\nloop invariant i39: !(s == 4 && e == 0);\nloop invariant i40: !(s == 4 && e == 1);\nloop invariant i41: !(s == 4 && e == 2);\nloop invariant i42: !(s == 5 && e == 0);\nloop invariant i43: !(s == 5 && e == 1);\nloop invariant i44: !(s == 5 && e == 2);\nloop invariant i45: s == 5 ==> !(e == 3);\nloop invariant i46: s == 5 ==> (e == 2 ==> e == 2);\nloop invariant i47: s == 5 ==> (e == 1 ==> e == 1);\nloop invariant i48: s == 5 ==> (e == 0 ==> e == 0);\nloop invariant i49: s == 5 ==> (e == 3 ==> e == 3);\nloop invariant i50: s == 5 ==> (s == 5 ==> s == 5);\nloop invariant i51: s == 5 ==> (s == 4 ==> s == 4);\nloop invariant i52: s == 5 ==> (s == 3 ==> s == 3);\nloop invariant i53: s == 5 ==> (s == 2 ==> s == 2);\nloop invariant i54: (s == 2 && e == 0) || (s == 3 && e == 1) || (s == 4 && e == 2) || (s == 5 && e == 3);\nloop invariant i55: !(s == 4 && e == 3);\nloop invariant i56: (s == 2 ==> e == 1);\nloop invariant i57: (s == 3 ==> e == 2);\nloop invariant i58: (s == 4 ==> e == 3);\nloop invariant i59: (s == 5 ==> e == 1);\nloop invariant i60: 0 <= e <= 2 && 0 <= s <= 5;\nloop invariant i61: (s == 3 ==> e == 1);\nloop invariant i62: (s == 4 ==> e == 2);\nloop invariant i63: (s == 5 ==> e == 3);\nloop invariant i64: (s != 2 ==> s != 3 ==> s != 4);\nloop invariant i65: (s == 2 ==> s == 3 ==> s == 4 ==> s == 5);\nloop invariant i66: (s == 2 ==> e == 0);\n*/\nwhile (unknown()) {\n    if (s == 2){\n      if (e ==0) e=1;\n      s = 3;\n    }\n    else if (s == 3){\n      if (e ==1) e=2;\n      s=4;\n    }\n    else if (s == 4){\n      {;\n//@ assert(!( e == 3 ));\n}\n\n      s=5;\n    }\n  }\n  \nreturn;\n\n}",
        "combined_annotation_num_solver_calls": 29,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nvoid main()\n{\n  int e, s;\n\n  e=0;\n  s=2;\n  /*@\nloop invariant i1: 0 <= e <= 2;\nloop invariant i2: 2 <= s <= 5;\nloop invariant i3: s == 2 ==> e == 0;\nloop invariant i4: s == 3 ==> e == 1;\nloop invariant i5: s == 4 ==> e == 2;\n\n\n\n\n\n\n\n\n\n\nloop invariant i16: 0 <= e <= 3;\n\nloop invariant i18: s != 3 ==> e != 1;\n\nloop invariant i20: s != 5 ==> e != 3;\n\n\nloop invariant i23: !(e == 3);\nloop invariant i24: s == 2 || s == 3 || s == 4 || s == 5;\nloop invariant i25: e == 0 || e == 1 || e == 2;\nloop invariant i26: s == 5 ==> e == 2;\nloop invariant i27: s == 1 ==> e == 0;\nloop invariant i28: !(e == s);\n\nloop invariant i30: (e == 0) ==> (s == 2);\nloop invariant i31: (e == 1) ==> (s == 3);\n\n\nloop invariant i34: (e == 3) ==> (s == 5);\n\nloop invariant i36: !(s == 1);\n\nloop invariant i38: !(s == 3 && e == 0);\nloop invariant i39: !(s == 4 && e == 0);\nloop invariant i40: !(s == 4 && e == 1);\n\nloop invariant i42: !(s == 5 && e == 0);\nloop invariant i43: !(s == 5 && e == 1);\n\nloop invariant i45: s == 5 ==> !(e == 3);\nloop invariant i46: s == 5 ==> (e == 2 ==> e == 2);\nloop invariant i47: s == 5 ==> (e == 1 ==> e == 1);\nloop invariant i48: s == 5 ==> (e == 0 ==> e == 0);\nloop invariant i49: s == 5 ==> (e == 3 ==> e == 3);\nloop invariant i50: s == 5 ==> (s == 5 ==> s == 5);\nloop invariant i51: s == 5 ==> (s == 4 ==> s == 4);\nloop invariant i52: s == 5 ==> (s == 3 ==> s == 3);\nloop invariant i53: s == 5 ==> (s == 2 ==> s == 2);\n\nloop invariant i55: !(s == 4 && e == 3);\n\n\n\n\nloop invariant i60: 0 <= e <= 2 && 0 <= s <= 5;\nloop invariant i61: (s == 3 ==> e == 1);\nloop invariant i62: (s == 4 ==> e == 2);\n\n\nloop invariant i65: (s == 2 ==> s == 3 ==> s == 4 ==> s == 5);\nloop invariant i66: (s == 2 ==> e == 0);\n*/\nwhile (unknown()) {\n    if (s == 2){\n      if (e ==0) e=1;\n      s = 3;\n    }\n    else if (s == 3){\n      if (e ==1) e=2;\n      s=4;\n    }\n    else if (s == 4){\n      {;\n//@ assert(!( e == 3 ));\n}\n\n      s=5;\n    }\n  }\n  \nreturn;\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c"
        ],
        "skipped": [],
        "total": 13,
        "success_count": 12,
        "failure_count": 1,
        "success_rate": 0.9230769230769231
    }
}