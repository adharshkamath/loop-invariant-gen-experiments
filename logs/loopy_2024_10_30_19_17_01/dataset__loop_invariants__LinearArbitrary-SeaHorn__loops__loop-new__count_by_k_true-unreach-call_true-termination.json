{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i;\n    int k;\n    k = unknown_int();\n    if (!(0 <= k && k <= 10)) return 0;\n    for (i = 0; i < LARGE_INT*k; i += k) ;\n    {;\n//@ assert(i == LARGE_INT*k);\n}\n\n    return 0;\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= i <= LARGE_INT*k;\nloop invariant i % k == 0;\nloop invariant i / k <= LARGE_INT;\nloop invariant i / k >= 0;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT*k;\nloop invariant i >= i + k;\nloop invariant i <= i + k;\nloop invariant i >= i - k;\nloop invariant i <= i - k;\nloop invariant k >= 0;\nloop invariant k <= 10;\nloop invariant k >= 0;\nloop invariant k <= 10;\nloop invariant k >= 0;\nloop invariant k <= 10;\nloop invariant k >= 0;\nloop invariant k <= 10;\nloop invariant k >= 0;\nloop invariant k <= 10;\nloop invariant k >= 0;\nloop invariant k <= 10;\nloop invariant k >= 0;\nloop invariant k <= 10;\nloop invariant k >= 0;\nloop invariant k <= 10;\nloop invariant k >= 0;\nloop invariant k <= 10;\nloop invariant k >= 0;\nloop invariant k <= 10;\nloop invariant k >= 0;\nloop invariant k <= 10;\nloop invariant k >= 0;\nloop invariant k <= 10;\nloop invariant k >= 0;\nloop invariant k <= 10;\nloop invariant k >= 0;\nloop invariant k <= 10;\nloop invariant k >= 0;\nloop invariant k <= 10;\nloop invariant k >= 0;\nloop invariant k <= 10;\nloop invariant k >= 0;\nloop invariant k <= 10;\nloop invariant k >= 0;\nloop invariant k <= 10;\nloop invariant k >= 0;\nloop invariant k <= 10;\nloop invariant k >= 0;\nloop invariant k <= 10;\nloop invariant k >= 0;\nloop invariant k <= 10;\nloop invariant k >= 0;\nloop invariant k <= 10;\nloop invariant k >= 0;\nloop invariant k <= 10;\nloop invariant k >= 0;\nloop invariant k <= 10;\nloop invariant k >= 0;\nloop invariant k <= 10;\nloop invariant k >= 0;\nloop invariant k <= 10;\nloop invariant k >= 0;\nloop invariant k <= 10;\nloop invariant k >= 0;\nloop invariant k <= 10;\nloop invariant k >= 0;\nloop invariant k <= 10;\nloop invariant k >= 0;\nloop invariant k <= 10;\nloop invariant k >= 0;\nloop invariant k <= 10;\nloop invariant k >= 0;\nloop invariant k <= 10;\nloop invariant k >= 0;\nloop invariant k <= 10;\nloop invariant k >= 0;\nloop invariant k <= 10;\nloop invariant k >= 0;\nloop invariant k <= 10;\nloop invariant k >= 0;\nloop invariant k <= 10;\nloop invariant k >= 0;\nloop invariant k <= 10;\nloop invariant k >= 0;\nloop invariant k <= 10;\nloop invariant k >= 0;\nloop invariant k <= 10;\nloop invariant k >= 0;\nloop invariant k <= 10;\nloop invariant k >= 0;\nloop invariant k <= 10;\nloop invariant k >= 0;\nloop invariant k <= 10;\nloop invariant k >= 0;\nloop invariant k <= 10;\nloop invariant k >= 0;\nloop invariant k <= 10;\nloop invariant k >= 0;\nloop invariant k <= 10;\nloop invariant k >= 0;\nloop invariant k <= 10;\nloop invariant k >= 0;\nloop invariant k <= 10;\nloop invariant k >= 0;\nloop invariant k <= 10;\nloop invariant k >= 0;\nloop invariant k <= 10;\nloop invariant k >= 0;\nloop invariant k <= 10;\nloop invariant k >= 0;\nloop invariant k <= 10;\nloop invariant k >= 0;\nloop invariant k <= 10;\nloop invariant k >= 0;\nloop invariant k <= 10;\nloop invariant k >= 0;\nloop invariant k <= 10;\nloop invariant k >= 0;\nloop invariant k <= 10;\nloop invariant k >= 0;\nloop invariant k <= 10;\nloop invariant k >= 0;\nloop invariant k <= 10;\nloop invariant k >= 0;\nloop invariant k <= 10;\nloop invariant k >= 0;\nloop invariant k <= 10;\nloop invariant k >= 0;\nloop invariant k <= 10;\nloop invariant k >= 0;\nloop invariant k <= 10;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= k <= 10;\nloop invariant 0 <= i <= LARGE_INT*k;\nloop invariant i % k == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= LARGE_INT * k;\nloop invariant k <= LARGE_INT * k;\nloop invariant k * i <= LARGE_INT * k;\nloop invariant i * k <= LARGE_INT * k;\nloop invariant k * i <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= LARGE_INT*k;\nloop invariant k == 0 || LARGE_INT*k == LARGE_INT*k;\nloop invariant k == 0 || i >= 0;\nloop invariant k == 0 || i <= LARGE_INT*k;\nloop invariant k == 0 || i%k == 0;\nloop invariant k == 0 || i == LARGE_INT*k;\nloop invariant k == 0 || i == LARGE_INT*k || i == 0;\nloop invariant k == 0 || k >= 1;\nloop invariant k == 0 || k <= 10;\nloop invariant k == 0 || 0 <= k && k <= 10;\nloop invariant k == 0 || k == unknown_int();\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= LARGE_INT*k;\nloop invariant k >= 0;\nloop invariant k <= 10;\nloop invariant i%k == 0;\nloop invariant i/k <= LARGE_INT;\nloop invariant i/k >= 0;\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= LARGE_INT * k;\nloop invariant i % k == 0;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= LARGE_INT * k;\nloop invariant 0 <= k <= 10;\nloop invariant i % k == 0;\nloop invariant i <= LARGE_INT * k;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= k <= 10;\nloop invariant i >= 0;\nloop invariant i <= LARGE_INT*k;\nloop invariant i%k == 0;\nloop invariant i == LARGE_INT*k ==> k == 10;\nloop invariant i != LARGE_INT*k ==> k != 10;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= LARGE_INT*k;\nloop invariant i < LARGE_INT*k ==> i % k == 0;\nloop invariant i < LARGE_INT*k ==> i/k <= LARGE_INT;\nloop invariant i < LARGE_INT*k ==> i/k >= 0;\nloop invariant i < LARGE_INT*k ==> i/k < LARGE_INT;\nloop invariant i < LARGE_INT*k ==> i/k >= 0;\nloop invariant i < LARGE_INT*k ==> i/k < LARGE_INT;\nloop invariant i < LARGE_INT*k ==> i/k >= 0;\nloop invariant i < LARGE_INT*k ==> i/k < LARGE_INT;\nloop invariant i < LARGE_INT*k ==> i/k >= 0;\nloop invariant i < LARGE_INT*k ==> i/k < LARGE_INT;\nloop invariant i < LARGE_INT*k ==> i/k >= 0;\nloop invariant i < LARGE_INT*k ==> i/k < LARGE_INT;\nloop invariant i < LARGE_INT*k ==> i/k >= 0;\nloop invariant i < LARGE_INT*k ==> i/k < LARGE_INT;\nloop invariant i < LARGE_INT*k ==> i/k >= 0;\nloop invariant i < LARGE_INT*k ==> i/k < LARGE_INT;\nloop invariant i < LARGE_INT*k ==> i/k >= 0;\nloop invariant i < LARGE_INT*k ==> i/k < LARGE_INT;\nloop invariant i < LARGE_INT*k ==> i/k >= 0;\nloop invariant i < LARGE_INT*k ==> i/k < LARGE_INT;\nloop invariant i < LARGE_INT*k ==> i/k >= 0;\nloop invariant i < LARGE_INT*k ==> i/k < LARGE_INT;\nloop invariant i < LARGE_INT*k ==> i/k >= 0;\nloop invariant i < LARGE_INT*k ==> i/k < LARGE_INT;\nloop invariant i < LARGE_INT*k ==> i/k >= 0;\nloop invariant i < LARGE_INT*k ==> i/k < LARGE_INT;\nloop invariant i < LARGE_INT*k ==> i/k >= 0;\nloop invariant i < LARGE_INT*k ==> i/k < LARGE_INT;\nloop invariant i < LARGE_INT*k ==> i/k >= 0;\nloop invariant i < LARGE_INT*k ==> i/k < LARGE_INT;\nloop invariant i < LARGE_INT*k ==> i/k >= 0;\nloop invariant i < LARGE_INT*k ==> i/k < LARGE_INT;\nloop invariant i < LARGE_INT*k ==> i/k >= 0;\nloop invariant i < LARGE_INT*k ==> i/k < LARGE_INT;\nloop invariant i < LARGE_INT*k ==> i/k >= 0;\nloop invariant i < LARGE_INT*k ==> i/k < LARGE_INT;\nloop invariant i < LARGE_INT*k ==> i/k >= 0;\nloop invariant i < LARGE_INT*k ==> i/k < LARGE_INT;\nloop invariant i < LARGE_INT*k ==> i/k >= 0;\nloop invariant i < LARGE_INT*k ==> i/k < LARGE_INT;\nloop invariant i < LARGE_INT*k ==> i/k >= 0;\nloop invariant i < LARGE_INT*k ==> i/k < LARGE_INT;\nloop invariant i < LARGE_INT*k ==> i/k >= 0;\nloop invariant i < LARGE_INT*k ==> i/k < LARGE_INT;\nloop invariant i < LARGE_INT*k ==> i/k >= 0;\nloop invariant i < LARGE_INT*k ==> i/k < LARGE_INT;\nloop invariant i < LARGE_INT*k ==> i/k >= 0;\nloop invariant i < LARGE_INT*k ==> i/k < LARGE_INT;\nloop invariant i < LARGE_INT*k ==> i/k >= 0;\nloop invariant i < LARGE_INT*k ==> i/k < LARGE_INT;\nloop invariant i < LARGE_INT*k ==> i/k >= 0;\nloop invariant i < LARGE_INT*k ==> i/k < LARGE_INT;\nloop invariant i < LARGE_INT*k ==> i/k >= 0;\nloop invariant i < LARGE_INT*k ==> i/k < LARGE_INT;\nloop invariant i < LARGE_INT*k ==> i/k >= 0;\nloop invariant i < LARGE_INT*k ==> i/k < LARGE_INT;\nloop invariant i < LARGE_INT*k ==> i/k >= 0;\nloop invariant i < LARGE_INT*k ==> i/k < LARGE_INT;\nloop invariant i < LARGE_INT*k ==> i/k >= 0;\nloop invariant i < LARGE_INT*k ==> i/k < LARGE_INT;\nloop invariant i < LARGE_INT*k ==> i/k >= 0;\nloop invariant i < LARGE_INT*k ==> i/k < LARGE_INT;\nloop invariant i < LARGE_INT*k ==> i/k >= 0;\nloop invariant i < LARGE_INT*k ==> i/k < LARGE_INT;\nloop invariant i < LARGE_INT*k ==> i/k >= 0;\nloop invariant i < LARGE_INT*k ==> i/k < LARGE_INT;\nloop invariant i < LARGE_INT*k ==> i/k >= 0;\nloop invariant i < LARGE_INT*k ==> i/k < LARGE_INT;\nloop invariant i < LARGE_INT*k ==> i/k >= 0;\nloop invariant i < LARGE_INT*k ==> i/k < LARGE_INT;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i;\nloop invariant i <= LARGE_INT*k;\nloop invariant k >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= k <= 10;\nloop invariant i >= 0;\nloop invariant i <= LARGE_INT*k;\nloop invariant i == 0 ==> k == 0;\nloop invariant i == LARGE_INT*k ==> k >= 0;\nloop invariant 0 <= k <= 10;\nloop invariant i >= 0;\nloop invariant i <= LARGE_INT*k;\nloop invariant i == 0 ==> k == 0;\nloop invariant i == LARGE_INT*k ==> k >= 0;\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= LARGE_INT*k;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= LARGE_INT * k;\nloop invariant i + k <= LARGE_INT * k ==> i == LARGE_INT * k;\nloop invariant (i - k) / k >= 0 ==> i == k;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= LARGE_INT*k;\nloop invariant i % k == 0;\nloop invariant i / k <= LARGE_INT;\nloop invariant i / k >= 0;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT*k;\nloop invariant i >= i + k;\nloop invariant i <= i + k;\nloop invariant i >= i - k;\nloop invariant i <= i - k;\nloop invariant k >= 0;\nloop invariant k <= 10;\nloop invariant k >= 0;\nloop invariant k <= 10;\nloop invariant k >= 0;\nloop invariant k <= 10;\nloop invariant k >= 0;\nloop invariant k <= 10;\nloop invariant k >= 0;\nloop invariant k <= 10;\nloop invariant k >= 0;\nloop invariant k <= 10;\nloop invariant k >= 0;\nloop invariant k <= 10;\nloop invariant k >= 0;\nloop invariant k <= 10;\nloop invariant k >= 0;\nloop invariant k <= 10;\nloop invariant k >= 0;\nloop invariant k <= 10;\nloop invariant k >= 0;\nloop invariant k <= 10;\nloop invariant k >= 0;\nloop invariant k <= 10;\nloop invariant k >= 0;\nloop invariant k <= 10;\nloop invariant k >= 0;\nloop invariant k <= 10;\nloop invariant k >= 0;\nloop invariant k <= 10;\nloop invariant k >= 0;\nloop invariant k <= 10;\nloop invariant k >= 0;\nloop invariant k <= 10;\nloop invariant k >= 0;\nloop invariant k <= 10;\nloop invariant k >= 0;\nloop invariant k <= 10;\nloop invariant k >= 0;\nloop invariant k <= 10;\nloop invariant k >= 0;\nloop invariant k <= 10;\nloop invariant k >= 0;\nloop invariant k <= 10;\nloop invariant k >= 0;\nloop invariant k <= 10;\nloop invariant k >= 0;\nloop invariant k <= 10;\nloop invariant k >= 0;\nloop invariant k <= 10;\nloop invariant k >= 0;\nloop invariant k <= 10;\nloop invariant k >= 0;\nloop invariant k <= 10;\nloop invariant k >= 0;\nloop invariant k <= 10;\nloop invariant k >= 0;\nloop invariant k <= 10;\nloop invariant k >= 0;\nloop invariant k <= 10;\nloop invariant k >= 0;\nloop invariant k <= 10;\nloop invariant k >= 0;\nloop invariant k <= 10;\nloop invariant k >= 0;\nloop invariant k <= 10;\nloop invariant k >= 0;\nloop invariant k <= 10;\nloop invariant k >= 0;\nloop invariant k <= 10;\nloop invariant k >= 0;\nloop invariant k <= 10;\nloop invariant k >= 0;\nloop invariant k <= 10;\nloop invariant k >= 0;\nloop invariant k <= 10;\nloop invariant k >= 0;\nloop invariant k <= 10;\nloop invariant k >= 0;\nloop invariant k <= 10;\nloop invariant k >= 0;\nloop invariant k <= 10;\nloop invariant k >= 0;\nloop invariant k <= 10;\nloop invariant k >= 0;\nloop invariant k <= 10;\nloop invariant k >= 0;\nloop invariant k <= 10;\nloop invariant k >= 0;\nloop invariant k <= 10;\nloop invariant k >= 0;\nloop invariant k <= 10;\nloop invariant k >= 0;\nloop invariant k <= 10;\nloop invariant k >= 0;\nloop invariant k <= 10;\nloop invariant k >= 0;\nloop invariant k <= 10;\nloop invariant k >= 0;\nloop invariant k <= 10;\nloop invariant k >= 0;\nloop invariant k <= 10;\nloop invariant k >= 0;\nloop invariant k <= 10;\nloop invariant k >= 0;\nloop invariant k <= 10;\nloop invariant k >= 0;\nloop invariant k <= 10;\nloop invariant k >= 0;\nloop invariant k <= 10;\nloop invariant k >= 0;\nloop invariant k <= 10;\nloop invariant k >= 0;\nloop invariant k <= 10;\nloop invariant k >= 0;\nloop invariant k <= 10;\nloop invariant k >= 0;\nloop invariant k <= 10;\nloop invariant k >= 0;\nloop invariant k <= 10;\nloop invariant k >= 0;\nloop invariant k <= 10;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i;\n    int k;\n    k = unknown_int();\n    if (!(0 <= k && k <= 10)) return 0;\n    /*@\n\n\n\n\nloop invariant i5: i >= 0;\n\n\nloop invariant i8: i <= i + k;\nloop invariant i9: i >= i - k;\n\nloop invariant i11: k >= 0;\nloop invariant i12: k <= 10;\n*/\nfor (i = 0; i < LARGE_INT*k; i += k) ;\n    {;\n//@ assert(i == LARGE_INT*k);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= k <= 10;\nloop invariant 0 <= i <= LARGE_INT*k;\nloop invariant i % k == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i;\n    int k;\n    k = unknown_int();\n    if (!(0 <= k && k <= 10)) return 0;\n    /*@\nloop invariant i1: 0 <= k <= 10;\n\n\n*/\nfor (i = 0; i < LARGE_INT*k; i += k) ;\n    {;\n//@ assert(i == LARGE_INT*k);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= LARGE_INT * k;\nloop invariant k <= LARGE_INT * k;\nloop invariant k * i <= LARGE_INT * k;\nloop invariant i * k <= LARGE_INT * k;\nloop invariant k * i <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\nloop invariant i * k <= i * k;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i;\n    int k;\n    k = unknown_int();\n    if (!(0 <= k && k <= 10)) return 0;\n    /*@\n\nloop invariant i2: k <= LARGE_INT * k;\n\n\nloop invariant i5: k * i <= i * k;\nloop invariant i6: i * k <= i * k;\n*/\nfor (i = 0; i < LARGE_INT*k; i += k) ;\n    {;\n//@ assert(i == LARGE_INT*k);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= LARGE_INT*k;\nloop invariant k == 0 || LARGE_INT*k == LARGE_INT*k;\nloop invariant k == 0 || i >= 0;\nloop invariant k == 0 || i <= LARGE_INT*k;\nloop invariant k == 0 || i%k == 0;\nloop invariant k == 0 || i == LARGE_INT*k;\nloop invariant k == 0 || i == LARGE_INT*k || i == 0;\nloop invariant k == 0 || k >= 1;\nloop invariant k == 0 || k <= 10;\nloop invariant k == 0 || 0 <= k && k <= 10;\nloop invariant k == 0 || k == unknown_int();\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i;\n    int k;\n    k = unknown_int();\n    if (!(0 <= k && k <= 10)) return 0;\n    /*@\nloop invariant i1: 0 <= i <= LARGE_INT*k;\nloop invariant i2: k == 0 || LARGE_INT*k == LARGE_INT*k;\nloop invariant i3: k == 0 || i >= 0;\nloop invariant i4: k == 0 || i <= LARGE_INT*k;\nloop invariant i5: k == 0 || i%k == 0;\n\n\nloop invariant i8: k == 0 || k >= 1;\nloop invariant i9: k == 0 || k <= 10;\nloop invariant i10: k == 0 || 0 <= k && k <= 10;\n\n*/\nfor (i = 0; i < LARGE_INT*k; i += k) ;\n    {;\n//@ assert(i == LARGE_INT*k);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= LARGE_INT*k;\nloop invariant k >= 0;\nloop invariant k <= 10;\nloop invariant i%k == 0;\nloop invariant i/k <= LARGE_INT;\nloop invariant i/k >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i;\n    int k;\n    k = unknown_int();\n    if (!(0 <= k && k <= 10)) return 0;\n    /*@\n\nloop invariant i2: k >= 0;\nloop invariant i3: k <= 10;\n\n\n\n*/\nfor (i = 0; i < LARGE_INT*k; i += k) ;\n    {;\n//@ assert(i == LARGE_INT*k);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i;\n    int k;\n    k = unknown_int();\n    if (!(0 <= k && k <= 10)) return 0;\n    /*@\n\n*/\nfor (i = 0; i < LARGE_INT*k; i += k) ;\n    {;\n//@ assert(i == LARGE_INT*k);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= LARGE_INT * k;\nloop invariant i % k == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i;\n    int k;\n    k = unknown_int();\n    if (!(0 <= k && k <= 10)) return 0;\n    /*@\n\n\n*/\nfor (i = 0; i < LARGE_INT*k; i += k) ;\n    {;\n//@ assert(i == LARGE_INT*k);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= LARGE_INT * k;\nloop invariant 0 <= k <= 10;\nloop invariant i % k == 0;\nloop invariant i <= LARGE_INT * k;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i;\n    int k;\n    k = unknown_int();\n    if (!(0 <= k && k <= 10)) return 0;\n    /*@\n\nloop invariant i2: 0 <= k <= 10;\n\n\n*/\nfor (i = 0; i < LARGE_INT*k; i += k) ;\n    {;\n//@ assert(i == LARGE_INT*k);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= k <= 10;\nloop invariant i >= 0;\nloop invariant i <= LARGE_INT*k;\nloop invariant i%k == 0;\nloop invariant i == LARGE_INT*k ==> k == 10;\nloop invariant i != LARGE_INT*k ==> k != 10;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i;\n    int k;\n    k = unknown_int();\n    if (!(0 <= k && k <= 10)) return 0;\n    /*@\nloop invariant i1: 0 <= k <= 10;\nloop invariant i2: i >= 0;\n\n\n\n\n*/\nfor (i = 0; i < LARGE_INT*k; i += k) ;\n    {;\n//@ assert(i == LARGE_INT*k);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= LARGE_INT*k;\nloop invariant i < LARGE_INT*k ==> i % k == 0;\nloop invariant i < LARGE_INT*k ==> i/k <= LARGE_INT;\nloop invariant i < LARGE_INT*k ==> i/k >= 0;\nloop invariant i < LARGE_INT*k ==> i/k < LARGE_INT;\nloop invariant i < LARGE_INT*k ==> i/k >= 0;\nloop invariant i < LARGE_INT*k ==> i/k < LARGE_INT;\nloop invariant i < LARGE_INT*k ==> i/k >= 0;\nloop invariant i < LARGE_INT*k ==> i/k < LARGE_INT;\nloop invariant i < LARGE_INT*k ==> i/k >= 0;\nloop invariant i < LARGE_INT*k ==> i/k < LARGE_INT;\nloop invariant i < LARGE_INT*k ==> i/k >= 0;\nloop invariant i < LARGE_INT*k ==> i/k < LARGE_INT;\nloop invariant i < LARGE_INT*k ==> i/k >= 0;\nloop invariant i < LARGE_INT*k ==> i/k < LARGE_INT;\nloop invariant i < LARGE_INT*k ==> i/k >= 0;\nloop invariant i < LARGE_INT*k ==> i/k < LARGE_INT;\nloop invariant i < LARGE_INT*k ==> i/k >= 0;\nloop invariant i < LARGE_INT*k ==> i/k < LARGE_INT;\nloop invariant i < LARGE_INT*k ==> i/k >= 0;\nloop invariant i < LARGE_INT*k ==> i/k < LARGE_INT;\nloop invariant i < LARGE_INT*k ==> i/k >= 0;\nloop invariant i < LARGE_INT*k ==> i/k < LARGE_INT;\nloop invariant i < LARGE_INT*k ==> i/k >= 0;\nloop invariant i < LARGE_INT*k ==> i/k < LARGE_INT;\nloop invariant i < LARGE_INT*k ==> i/k >= 0;\nloop invariant i < LARGE_INT*k ==> i/k < LARGE_INT;\nloop invariant i < LARGE_INT*k ==> i/k >= 0;\nloop invariant i < LARGE_INT*k ==> i/k < LARGE_INT;\nloop invariant i < LARGE_INT*k ==> i/k >= 0;\nloop invariant i < LARGE_INT*k ==> i/k < LARGE_INT;\nloop invariant i < LARGE_INT*k ==> i/k >= 0;\nloop invariant i < LARGE_INT*k ==> i/k < LARGE_INT;\nloop invariant i < LARGE_INT*k ==> i/k >= 0;\nloop invariant i < LARGE_INT*k ==> i/k < LARGE_INT;\nloop invariant i < LARGE_INT*k ==> i/k >= 0;\nloop invariant i < LARGE_INT*k ==> i/k < LARGE_INT;\nloop invariant i < LARGE_INT*k ==> i/k >= 0;\nloop invariant i < LARGE_INT*k ==> i/k < LARGE_INT;\nloop invariant i < LARGE_INT*k ==> i/k >= 0;\nloop invariant i < LARGE_INT*k ==> i/k < LARGE_INT;\nloop invariant i < LARGE_INT*k ==> i/k >= 0;\nloop invariant i < LARGE_INT*k ==> i/k < LARGE_INT;\nloop invariant i < LARGE_INT*k ==> i/k >= 0;\nloop invariant i < LARGE_INT*k ==> i/k < LARGE_INT;\nloop invariant i < LARGE_INT*k ==> i/k >= 0;\nloop invariant i < LARGE_INT*k ==> i/k < LARGE_INT;\nloop invariant i < LARGE_INT*k ==> i/k >= 0;\nloop invariant i < LARGE_INT*k ==> i/k < LARGE_INT;\nloop invariant i < LARGE_INT*k ==> i/k >= 0;\nloop invariant i < LARGE_INT*k ==> i/k < LARGE_INT;\nloop invariant i < LARGE_INT*k ==> i/k >= 0;\nloop invariant i < LARGE_INT*k ==> i/k < LARGE_INT;\nloop invariant i < LARGE_INT*k ==> i/k >= 0;\nloop invariant i < LARGE_INT*k ==> i/k < LARGE_INT;\nloop invariant i < LARGE_INT*k ==> i/k >= 0;\nloop invariant i < LARGE_INT*k ==> i/k < LARGE_INT;\nloop invariant i < LARGE_INT*k ==> i/k >= 0;\nloop invariant i < LARGE_INT*k ==> i/k < LARGE_INT;\nloop invariant i < LARGE_INT*k ==> i/k >= 0;\nloop invariant i < LARGE_INT*k ==> i/k < LARGE_INT;\nloop invariant i < LARGE_INT*k ==> i/k >= 0;\nloop invariant i < LARGE_INT*k ==> i/k < LARGE_INT;\nloop invariant i < LARGE_INT*k ==> i/k >= 0;\nloop invariant i < LARGE_INT*k ==> i/k < LARGE_INT;\nloop invariant i < LARGE_INT*k ==> i/k >= 0;\nloop invariant i < LARGE_INT*k ==> i/k < LARGE_INT;\nloop invariant i < LARGE_INT*k ==> i/k >= 0;\nloop invariant i < LARGE_INT*k ==> i/k < LARGE_INT;\nloop invariant i < LARGE_INT*k ==> i/k >= 0;\nloop invariant i < LARGE_INT*k ==> i/k < LARGE_INT;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i;\n    int k;\n    k = unknown_int();\n    if (!(0 <= k && k <= 10)) return 0;\n    /*@\n\n\nloop invariant i3: i < LARGE_INT*k ==> i/k <= LARGE_INT;\nloop invariant i4: i < LARGE_INT*k ==> i/k >= 0;\nloop invariant i5: i < LARGE_INT*k ==> i/k < LARGE_INT;\n*/\nfor (i = 0; i < LARGE_INT*k; i += k) ;\n    {;\n//@ assert(i == LARGE_INT*k);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i;\nloop invariant i <= LARGE_INT*k;\nloop invariant k >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i;\n    int k;\n    k = unknown_int();\n    if (!(0 <= k && k <= 10)) return 0;\n    /*@\nloop invariant i1: 0 <= i;\n\nloop invariant i3: k >= 0;\n*/\nfor (i = 0; i < LARGE_INT*k; i += k) ;\n    {;\n//@ assert(i == LARGE_INT*k);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= k <= 10;\nloop invariant i >= 0;\nloop invariant i <= LARGE_INT*k;\nloop invariant i == 0 ==> k == 0;\nloop invariant i == LARGE_INT*k ==> k >= 0;\nloop invariant 0 <= k <= 10;\nloop invariant i >= 0;\nloop invariant i <= LARGE_INT*k;\nloop invariant i == 0 ==> k == 0;\nloop invariant i == LARGE_INT*k ==> k >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i;\n    int k;\n    k = unknown_int();\n    if (!(0 <= k && k <= 10)) return 0;\n    /*@\nloop invariant i1: 0 <= k <= 10;\nloop invariant i2: i >= 0;\n\n\nloop invariant i5: i == LARGE_INT*k ==> k >= 0;\n*/\nfor (i = 0; i < LARGE_INT*k; i += k) ;\n    {;\n//@ assert(i == LARGE_INT*k);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i;\n    int k;\n    k = unknown_int();\n    if (!(0 <= k && k <= 10)) return 0;\n    /*@\n\n*/\nfor (i = 0; i < LARGE_INT*k; i += k) ;\n    {;\n//@ assert(i == LARGE_INT*k);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= LARGE_INT*k;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i;\n    int k;\n    k = unknown_int();\n    if (!(0 <= k && k <= 10)) return 0;\n    /*@\n\n*/\nfor (i = 0; i < LARGE_INT*k; i += k) ;\n    {;\n//@ assert(i == LARGE_INT*k);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= LARGE_INT * k;\nloop invariant i + k <= LARGE_INT * k ==> i == LARGE_INT * k;\nloop invariant (i - k) / k >= 0 ==> i == k;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i;\n    int k;\n    k = unknown_int();\n    if (!(0 <= k && k <= 10)) return 0;\n    /*@\n\n\n\n*/\nfor (i = 0; i < LARGE_INT*k; i += k) ;\n    {;\n//@ assert(i == LARGE_INT*k);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 45: unexpected token ')'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i;\n    int k;\n    k = unknown_int();\n    if (!(0 <= k && k <= 10)) return 0;\n    /*@\nloop invariant i1: 0 <= i <= LARGE_INT*k;\nloop invariant i2: i % k == 0;\nloop invariant i3: i / k <= LARGE_INT;\nloop invariant i4: i / k >= 0;\nloop invariant i5: i >= 0;\nloop invariant i6: i < LARGE_INT*k;\nloop invariant i7: i >= i + k;\nloop invariant i8: i <= i + k;\nloop invariant i9: i >= i - k;\nloop invariant i10: i <= i - k;\nloop invariant i11: k >= 0;\nloop invariant i12: k <= 10;\nloop invariant i13: 0 <= k <= 10;\nloop invariant i14: 0 <= i <= LARGE_INT * k;\nloop invariant i15: k <= LARGE_INT * k;\nloop invariant i16: k * i <= LARGE_INT * k;\nloop invariant i17: i * k <= LARGE_INT * k;\nloop invariant i18: k * i <= i * k;\nloop invariant i19: i * k <= i * k;\nloop invariant i20: k == 0 || LARGE_INT*k == LARGE_INT*k;\nloop invariant i21: k == 0 || i >= 0;\nloop invariant i22: k == 0 || i <= LARGE_INT*k;\nloop invariant i23: k == 0 || i%k == 0;\nloop invariant i24: k == 0 || i == LARGE_INT*k;\nloop invariant i25: k == 0 || i == LARGE_INT*k || i == 0;\nloop invariant i26: k == 0 || k >= 1;\nloop invariant i27: k == 0 || k <= 10;\nloop invariant i28: k == 0 || 0 <= k && k <= 10;\nloop invariant i29: k == 0 || k == unknown_int();\nloop invariant i30: i%k == 0;\nloop invariant i31: i/k <= LARGE_INT;\nloop invariant i32: i/k >= 0;\nloop invariant i33: 1 <= i <= LARGE_INT * k;\nloop invariant i34: i <= LARGE_INT * k;\nloop invariant i35: i <= LARGE_INT*k;\nloop invariant i36: i == LARGE_INT*k ==> k == 10;\nloop invariant i37: i != LARGE_INT*k ==> k != 10;\nloop invariant i38: i < LARGE_INT*k ==> i % k == 0;\nloop invariant i39: i < LARGE_INT*k ==> i/k <= LARGE_INT;\nloop invariant i40: i < LARGE_INT*k ==> i/k >= 0;\nloop invariant i41: i < LARGE_INT*k ==> i/k < LARGE_INT;\nloop invariant i42: 0 <= i;\nloop invariant i43: i == 0 ==> k == 0;\nloop invariant i44: i == LARGE_INT*k ==> k >= 0;\nloop invariant i45: i + k <= LARGE_INT * k ==> i == LARGE_INT * k;\nloop invariant i46: (i - k) / k >= 0 ==> i == k;\n*/\nfor (i = 0; i < LARGE_INT*k; i += k) ;\n    {;\n//@ assert(i == LARGE_INT*k);\n}\n\n    return 0;\n}",
        "combined_annotation_num_solver_calls": 11,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i;\n    int k;\n    k = unknown_int();\n    if (!(0 <= k && k <= 10)) return 0;\n    /*@\nloop invariant i1: 0 <= i <= LARGE_INT*k;\n\n\n\nloop invariant i5: i >= 0;\n\n\nloop invariant i8: i <= i + k;\nloop invariant i9: i >= i - k;\n\nloop invariant i11: k >= 0;\nloop invariant i12: k <= 10;\nloop invariant i13: 0 <= k <= 10;\nloop invariant i14: 0 <= i <= LARGE_INT * k;\nloop invariant i15: k <= LARGE_INT * k;\n\n\nloop invariant i18: k * i <= i * k;\nloop invariant i19: i * k <= i * k;\nloop invariant i20: k == 0 || LARGE_INT*k == LARGE_INT*k;\nloop invariant i21: k == 0 || i >= 0;\nloop invariant i22: k == 0 || i <= LARGE_INT*k;\nloop invariant i23: k == 0 || i%k == 0;\n\n\nloop invariant i26: k == 0 || k >= 1;\nloop invariant i27: k == 0 || k <= 10;\nloop invariant i28: k == 0 || 0 <= k && k <= 10;\n\n\n\n\n\nloop invariant i34: i <= LARGE_INT * k;\nloop invariant i35: i <= LARGE_INT*k;\n\n\nloop invariant i38: i < LARGE_INT*k ==> i % k == 0;\nloop invariant i39: i < LARGE_INT*k ==> i/k <= LARGE_INT;\nloop invariant i40: i < LARGE_INT*k ==> i/k >= 0;\nloop invariant i41: i < LARGE_INT*k ==> i/k < LARGE_INT;\nloop invariant i42: 0 <= i;\n\nloop invariant i44: i == LARGE_INT*k ==> k >= 0;\n\n\n*/\nfor (i = 0; i < LARGE_INT*k; i += k) ;\n    {;\n//@ assert(i == LARGE_INT*k);\n}\n\n    return 0;\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/split.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c"
        ],
        "skipped": [],
        "total": 58,
        "success_count": 49,
        "failure_count": 9,
        "success_rate": 0.8448275862068966
    }
}