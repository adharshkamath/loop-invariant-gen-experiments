{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i,j,k;\n    i = 1;\n    j = 1;\n    k = unknown_int();\n    if (!(0 <= k && k <= 1)) return 0;\n    while (i < LARGE_INT) {\n\ti = i + 1;\n\tj = j + k;\n\tk = k - 1;\n\t{;\n//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n}\n\n    }\n    return 0;\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 1 <= i + k && i + k <= 2 && i >= 1;\nloop invariant 0 <= k && k <= 1;\nloop invariant i >= 1;\nloop invariant k >= 0;\nloop invariant k <= 1;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i + k && i + k <= 2;\nloop invariant i >= 1;\nloop invariant k <= 1;\nloop invariant k >= 0;\nloop invariant k == i - 1;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= k + i <= 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 0 <= k <= 1;\nloop invariant 1 <= j <= 1 + k;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant -1 <= k <= 1;\nloop invariant j >= 1;\nloop invariant j <= i + k * (LARGE_INT + 1);\nloop invariant i + k <= -1 || i + k >= 1;\nloop invariant i * (i + 1) / 2 <= j <= i * (i + 1) / 2 + k * (LARGE_INT + 1);\nloop invariant i == 1 || j == i + k * (LARGE_INT + 1);\nloop invariant i == 1 || j == i * (i + 1) / 2;\nloop invariant i == 1 || j == i * (i + 1) / 2 + k * (LARGE_INT + 1);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 1 <= j && j <= i * k;\nloop invariant 0 <= k <= 1;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= LARGE_INT - 1;\nloop invariant 1 <= j <= LARGE_INT;\nloop invariant 0 <= k <= 1;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i + k && i + k <= 2 && i >= 1 && 0 <= k && k <= 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i + k <= LARGE_INT;\nloop invariant 0 <= k <= 1;\nloop invariant 1 <= i <= LARGE_INT;\nloop invariant i >= 1;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\nloop invariant i + k >= 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 0 <= j <= i + k;\nloop invariant 0 <= k <= 1;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\nloop invariant (i < LARGE_INT) ==> (j < i + k);\nloop invariant (i < LARGE_INT) ==> (k <= 1);\nloop invariant (i < LARGE_INT) ==> (j >= 0);\nloop invariant (i < LARGE_INT) ==> (k >= 0);\nloop invariant (i < LARGE_INT) ==> (i + k >= 0);\nloop invariant (i < LARGE_INT) ==> (i + k <= 2);\nloop invariant (i < LARGE_INT) ==> (i >= 1);\nloop invariant (i < LARGE_INT) ==> (j >= 0);\nloop invariant (i < LARGE_INT) ==> (k >= 0);\nloop invariant (i < LARGE_INT) ==> (i + k >= 0);\nloop invariant (i < LARGE_INT) ==> (i + k <= 2);\nloop invariant (i < LARGE_INT) ==> (i >= 1);\nloop invariant (i < LARGE_INT) ==> (j >= 0);\nloop invariant (i < LARGE_INT) ==> (k >= 0);\nloop invariant (i < LARGE_INT) ==> (i + k >= 0);\nloop invariant (i < LARGE_INT) ==> (i + k <= 2);\nloop invariant (i < LARGE_INT) ==> (i >= 1);\nloop invariant (i < LARGE_INT) ==> (j >= 0);\nloop invariant (i < LARGE_INT) ==> (k >= 0);\nloop invariant (i < LARGE_INT) ==> (i + k >= 0);\nloop invariant (i < LARGE_INT) ==> (i + k <= 2);\nloop invariant (i < LARGE_INT) ==> (i >= 1);\nloop invariant (i < LARGE_INT) ==> (j >= 0);\nloop invariant (i < LARGE_INT) ==> (k >= 0);\nloop invariant (i < LARGE_INT) ==> (i + k >= 0);\nloop invariant (i < LARGE_INT) ==> (i + k <= 2);\nloop invariant (i < LARGE_INT) ==> (i >= 1);\nloop invariant (i < LARGE_INT) ==> (j >= 0);\nloop invariant (i < LARGE_INT) ==> (k >= 0);\nloop invariant (i < LARGE_INT) ==> (i + k >= 0);\nloop invariant (i < LARGE_INT) ==> (i + k <= 2);\nloop invariant (i < LARGE_INT) ==> (i >= 1);\nloop invariant (i < LARGE_INT) ==> (j >= 0);\nloop invariant (i < LARGE_INT) ==> (k >= 0);\nloop invariant (i < LARGE_INT) ==> (i + k >= 0);\nloop invariant (i < LARGE_INT) ==> (i + k <= 2);\nloop invariant (i < LARGE_INT) ==> (i >= 1);\nloop invariant (i < LARGE_INT) ==> (j >= 0);\nloop invariant (i < LARGE_INT) ==> (k >= 0);\nloop invariant (i < LARGE_INT) ==> (i + k >= 0);\nloop invariant (i < LARGE_INT) ==> (i + k <= 2);\nloop invariant (i < LARGE_INT) ==> (i >= 1);\nloop invariant (i < LARGE_INT) ==> (j >= 0);\nloop invariant (i < LARGE_INT) ==> (k >= 0);\nloop invariant (i < LARGE_INT) ==> (i + k >= 0);\nloop invariant (i < LARGE_INT) ==> (i + k <= 2);\nloop invariant (i < LARGE_INT) ==> (i >= 1);\nloop invariant (i < LARGE_INT) ==> (j >= 0);\nloop invariant (i < LARGE_INT) ==> (k >= 0);\nloop invariant (i < LARGE_INT) ==> (i + k >= 0);\nloop invariant (i < LARGE_INT) ==> (i + k <= 2);\nloop invariant (i < LARGE_INT) ==> (i >= 1);\nloop invariant (i < LARGE_INT) ==> (j >= 0);\nloop invariant (i < LARGE_INT) ==> (k >= 0);\nloop invariant (i < LARGE_INT) ==> (i + k >= 0);\nloop invariant (i < LARGE_INT) ==> (i + k <= 2);\nloop invariant (i < LARGE_INT) ==> (i >= 1);\nloop invariant (i < LARGE_INT) ==> (j >= 0);\nloop invariant (i < LARGE_INT) ==> (k >= 0);\nloop invariant (i < LARGE_INT) ==> (i + k >= 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 1 <= j <= LARGE_INT;\nloop invariant 0 <= k <= 1;\nloop invariant 1 <= i + k <= 2;\nloop invariant i >= 1;\nloop invariant i + k <= 2;\nloop invariant i >= 1 ==> i + k <= 2;\nloop invariant 1 <= j <= LARGE_INT;\nloop invariant 0 <= i + k <= 2;\nloop invariant i >= 1;\nloop invariant i + k <= 2;\nloop invariant 1 <= j <= LARGE_INT;\nloop invariant 0 <= i + k <= 2;\nloop invariant i >= 1;\nloop invariant i + k <= 2;\nloop invariant 1 <= j <= LARGE_INT;\nloop invariant 0 <= i + k <= 2;\nloop invariant i >= 1;\nloop invariant i + k <= 2;\nloop invariant 1 <= j <= LARGE_INT;\nloop invariant 0 <= i + k <= 2;\nloop invariant i >= 1;\nloop invariant i + k <= 2;\nloop invariant 1 <= j <= LARGE_INT;\nloop invariant 0 <= i + k <= 2;\nloop invariant i >= 1;\nloop invariant i + k <= 2;\nloop invariant 1 <= j <= LARGE_INT;\nloop invariant 0 <= i + k <= 2;\nloop invariant i >= 1;\nloop invariant i + k <= 2;\nloop invariant 1 <= j <= LARGE_INT;\nloop invariant 0 <= i + k <= 2;\nloop invariant i >= 1;\nloop invariant i + k <= 2;\nloop invariant 1 <= j <= LARGE_INT;\nloop invariant 0 <= i + k <= 2;\nloop invariant i >= 1;\nloop invariant i + k <= 2;\nloop invariant 1 <= j <= LARGE_INT;\nloop invariant 0 <= i + k <= 2;\nloop invariant i >= 1;\nloop invariant i + k <= 2;\nloop invariant 1 <= j <= LARGE_INT;\nloop invariant 0 <= i + k <= 2;\nloop invariant i >= 1;\nloop invariant i + k <= 2;\nloop invariant 1 <= j <= LARGE_INT;\nloop invariant 0 <= i + k <= 2;\nloop invariant i >= 1;\nloop invariant i + k <= 2;\nloop invariant 1 <= j <= LARGE_INT;\nloop invariant 0 <= i + k <= 2;\nloop invariant i >= 1;\nloop invariant i + k <= 2;\nloop invariant 1 <= j <= LARGE_INT;\nloop invariant 0 <= i + k <= 2;\nloop invariant i >= 1;\nloop invariant i + k <= 2;\nloop invariant 1 <= j <= LARGE_INT;\nloop invariant 0 <= i + k <= 2;\nloop invariant i >= 1;\nloop invariant i + k <= 2;\nloop invariant 1 <= j <= LARGE_INT;\nloop invariant 0 <= i + k <= 2;\nloop invariant i >= 1;\nloop invariant i + k <= 2;\nloop invariant 1 <= j <= LARGE_INT;\nloop invariant 0 <= i + k <= 2;\nloop invariant i >= 1;\nloop invariant i + k <= 2;\nloop invariant 1 <= j <= LARGE_INT;\nloop invariant 0 <= i + k <= 2;\nloop invariant i >= 1;\nloop invariant i + k <= 2;\nloop invariant 1 <= j <= LARGE_INT;\nloop invariant 0 <= i + k <= 2;\nloop invariant i >= 1;\nloop invariant i + k <= 2;\nloop invariant 1 <= j <= LARGE_INT;\nloop invariant 0 <= i + k <= 2;\nloop invariant i >= 1;\nloop invariant i + k <= 2;\nloop invariant 1 <= j <= LARGE_INT;\nloop invariant 0 <= i + k <= 2;\nloop invariant i >= 1;\nloop invariant i + k <= 2;\nloop invariant 1 <= j <= LARGE_INT;\nloop invariant 0 <= i + k <= 2;\nloop invariant i >= 1;\nloop invariant i + k <= 2;\nloop invariant 1 <= j <= LARGE_INT;\nloop invariant 0 <= i + k <= 2;\nloop invariant i >= 1;\nloop invariant i + k <= 2;\nloop invariant 1 <= j <= LARGE_INT;\nloop invariant 0 <= i + k <= 2;\nloop invariant i >= 1;\nloop invariant i + k <= 2;\nloop invariant 1 <= j <= LARGE_INT;\nloop invariant 0 <= i + k <= 2;\nloop invariant i >= 1;\nloop invariant i + k <= 2;\nloop invariant 1 <= j <= LARGE_INT;\n*/\n```",
            "```\n/*@\nloop invariant i >= 1;\nloop invariant i < LARGE_INT;\nloop invariant 0 <= j;\nloop invariant j <= 2;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant j == (i * k);\nloop invariant k == (1 - i);\nloop invariant i * (1 - i) >= 0;\nloop invariant i * (1 - i) <= 2;\nloop invariant i * (1 - i) == 0;\nloop invariant i * (1 - i) == 2;\nloop invariant i * (1 - i) == 1;\nloop invariant i * (1 - i) == 2 * (1 - i);\nloop invariant i * (1 - i) == 2 * i;\nloop invariant i * (1 - i) == 2 * i - 1;\nloop invariant i * (1 - i) == 2 * i - 2;\nloop invariant i * (1 - i) == 2 * i - 3;\nloop invariant i * (1 - i) == 2 * i - 4;\nloop invariant i * (1 - i) == (1 - i) * (2 * i - 1);\nloop invariant i * (1 - i) == (1 - i) * (2 * i - 2);\nloop invariant i * (1 - i) == (1 - i) * (2 * i - 3);\nloop invariant i * (1 - i) == (1 - i) * (2 * i - 4);\nloop invariant i * (1 - i) == (1 - i) * (2 * i - 5);\nloop invariant i * (1 - i) == (1 - i) * (2 * i - 6);\nloop invariant i * (1 - i) == (1 - i) * (2 * i - 7);\nloop invariant i * (1 - i) == (1 - i) * (2 * i - 8);\nloop invariant i * (1 - i) == (1 - i) * (2 * i - 9);\nloop invariant i * (1 - i) == (1 - i) * (2 * i - 10);\nloop invariant i * (1 - i) == (1 - i) * (2 * i - 11);\nloop invariant i * (1 - i) == (1 - i) * (2 * i - 12);\nloop invariant i * (1 - i) == (1 - i) * (2 * i - 13);\nloop invariant i * (1 - i) == (1 - i) * (2 * i - 14);\nloop invariant i * (1 - i) == (1 - i) * (2 * i - 15);\nloop invariant i * (1 - i) == (1 - i) * (2 * i - 16);\nloop invariant i * (1 - i) == (1 - i) * (2 * i - 17);\nloop invariant i * (1 - i) == (1 - i) * (2 * i - 18);\nloop invariant i * (1 - i) == (1 - i) * (2 * i - 19);\nloop invariant i * (1 - i) == (1 - i) * (2 * i - 20);\nloop invariant i * (1 - i) == (1 - i) * (2 * i - 21);\nloop invariant i * (1 - i) == (1 - i) * (2 * i - 22);\nloop invariant i * (1 - i) == (1 - i) * (2 * i - 23);\nloop invariant i * (1 - i) == (1 - i) * (2 * i - 24);\nloop invariant i * (1 - i) == (1 - i) * (2 * i - 25);\nloop invariant i * (1 - i) == (1 - i) * (2 * i - 26);\nloop invariant i * (1 - i) == (1 - i) * (2 * i - 27);\nloop invariant i * (1 - i) == (1 - i) * (2 * i - 28);\nloop invariant i * (1 - i) == (1 - i) * (2 * i - 29);\nloop invariant i * (1 - i) == (1 - i) * (2 * i - 30);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 1 <= j <= LARGE_INT * k + 1;\nloop invariant 0 <= k <= 1;\nloop invariant i >= 1;\nloop invariant i <= k ==> j == k * (k + 1) / 2;\nloop invariant i > k ==> j >= k * (k + 1) / 2;\nloop invariant i < LARGE_INT ==> j <= k * (k + 1) / 2 + (LARGE_INT - i) * (k + 1) - 1;\nloop invariant i <= k ==> j == (k + 1) * (k + 2) / 2 - 1;\nloop invariant i > k ==> j >= (k + 1) * (k + 2) / 2 - 1;\nloop invariant i < LARGE_INT ==> j <= (k + 1) * (k + 2) / 2 - 1 + (LARGE_INT - i) * (k + 1) - 1;\nloop invariant i <= k ==> j == (k + 1) * (k + 2) / 2 - 1;\nloop invariant i > k ==> j >= (k + 1) * (k + 2) / 2 - 1;\nloop invariant i < LARGE_INT ==> j <= (k + 1) * (k + 2) / 2 - 1 + (LARGE_INT - i) * (k + 1) - 1;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i + k <= 2;\nloop invariant i >= 1;\nloop invariant i < LARGE_INT;\nloop invariant 0 <= k <= 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i + k <= 2; i >= 1; assume(0 <= k && k <= 1);\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 1 <= i + k && i + k <= 2 && i >= 1;\nloop invariant 0 <= k && k <= 1;\nloop invariant i >= 1;\nloop invariant k >= 0;\nloop invariant k <= 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i,j,k;\n    i = 1;\n    j = 1;\n    k = unknown_int();\n    if (!(0 <= k && k <= 1)) return 0;\n    /*@\nloop invariant i1: 1 <= i + k && i + k <= 2 && i >= 1;\n\nloop invariant i3: i >= 1;\n\nloop invariant i5: k <= 1;\n*/\nwhile (i < LARGE_INT) {\n\ti = i + 1;\n\tj = j + k;\n\tk = k - 1;\n\t{;\n//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 1 <= i + k && i + k <= 2;\nloop invariant i >= 1;\nloop invariant k <= 1;\nloop invariant k >= 0;\nloop invariant k == i - 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i,j,k;\n    i = 1;\n    j = 1;\n    k = unknown_int();\n    if (!(0 <= k && k <= 1)) return 0;\n    /*@\nloop invariant i1: 1 <= i + k && i + k <= 2;\nloop invariant i2: i >= 1;\nloop invariant i3: k <= 1;\n\n\n*/\nwhile (i < LARGE_INT) {\n\ti = i + 1;\n\tj = j + k;\n\tk = k - 1;\n\t{;\n//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 1 <= k + i <= 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i,j,k;\n    i = 1;\n    j = 1;\n    k = unknown_int();\n    if (!(0 <= k && k <= 1)) return 0;\n    /*@\nloop invariant i1: 1 <= k + i <= 2;\n*/\nwhile (i < LARGE_INT) {\n\ti = i + 1;\n\tj = j + k;\n\tk = k - 1;\n\t{;\n//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 0 <= k <= 1;\nloop invariant 1 <= j <= 1 + k;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i,j,k;\n    i = 1;\n    j = 1;\n    k = unknown_int();\n    if (!(0 <= k && k <= 1)) return 0;\n    /*@\nloop invariant i1: 0 <= i <= LARGE_INT;\n\n\nloop invariant i4: i + k >= 1;\nloop invariant i5: i + k <= 2;\n*/\nwhile (i < LARGE_INT) {\n\ti = i + 1;\n\tj = j + k;\n\tk = k - 1;\n\t{;\n//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant -1 <= k <= 1;\nloop invariant j >= 1;\nloop invariant j <= i + k * (LARGE_INT + 1);\nloop invariant i + k <= -1 || i + k >= 1;\nloop invariant i * (i + 1) / 2 <= j <= i * (i + 1) / 2 + k * (LARGE_INT + 1);\nloop invariant i == 1 || j == i + k * (LARGE_INT + 1);\nloop invariant i == 1 || j == i * (i + 1) / 2;\nloop invariant i == 1 || j == i * (i + 1) / 2 + k * (LARGE_INT + 1);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i,j,k;\n    i = 1;\n    j = 1;\n    k = unknown_int();\n    if (!(0 <= k && k <= 1)) return 0;\n    /*@\nloop invariant i1: 0 <= i <= LARGE_INT;\n\n\n\nloop invariant i5: i + k <= -1 || i + k >= 1;\n\n\n\n\n*/\nwhile (i < LARGE_INT) {\n\ti = i + 1;\n\tj = j + k;\n\tk = k - 1;\n\t{;\n//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 1 <= j && j <= i * k;\nloop invariant 0 <= k <= 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i,j,k;\n    i = 1;\n    j = 1;\n    k = unknown_int();\n    if (!(0 <= k && k <= 1)) return 0;\n    /*@\nloop invariant i1: 0 <= i <= LARGE_INT;\n\n\n*/\nwhile (i < LARGE_INT) {\n\ti = i + 1;\n\tj = j + k;\n\tk = k - 1;\n\t{;\n//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= LARGE_INT - 1;\nloop invariant 1 <= j <= LARGE_INT;\nloop invariant 0 <= k <= 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i,j,k;\n    i = 1;\n    j = 1;\n    k = unknown_int();\n    if (!(0 <= k && k <= 1)) return 0;\n    /*@\n\n\n\n*/\nwhile (i < LARGE_INT) {\n\ti = i + 1;\n\tj = j + k;\n\tk = k - 1;\n\t{;\n//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 1 <= i + k && i + k <= 2 && i >= 1 && 0 <= k && k <= 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i,j,k;\n    i = 1;\n    j = 1;\n    k = unknown_int();\n    if (!(0 <= k && k <= 1)) return 0;\n    /*@\n\n*/\nwhile (i < LARGE_INT) {\n\ti = i + 1;\n\tj = j + k;\n\tk = k - 1;\n\t{;\n//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i + k <= LARGE_INT;\nloop invariant 0 <= k <= 1;\nloop invariant 1 <= i <= LARGE_INT;\nloop invariant i >= 1;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\nloop invariant i + k >= 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i,j,k;\n    i = 1;\n    j = 1;\n    k = unknown_int();\n    if (!(0 <= k && k <= 1)) return 0;\n    /*@\nloop invariant i1: 0 <= i + k <= LARGE_INT;\n\nloop invariant i3: 1 <= i <= LARGE_INT;\nloop invariant i4: i >= 1;\nloop invariant i5: i + k >= 1;\nloop invariant i6: i + k <= 2;\n*/\nwhile (i < LARGE_INT) {\n\ti = i + 1;\n\tj = j + k;\n\tk = k - 1;\n\t{;\n//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 0 <= j <= i + k;\nloop invariant 0 <= k <= 1;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\nloop invariant (i < LARGE_INT) ==> (j < i + k);\nloop invariant (i < LARGE_INT) ==> (k <= 1);\nloop invariant (i < LARGE_INT) ==> (j >= 0);\nloop invariant (i < LARGE_INT) ==> (k >= 0);\nloop invariant (i < LARGE_INT) ==> (i + k >= 0);\nloop invariant (i < LARGE_INT) ==> (i + k <= 2);\nloop invariant (i < LARGE_INT) ==> (i >= 1);\nloop invariant (i < LARGE_INT) ==> (j >= 0);\nloop invariant (i < LARGE_INT) ==> (k >= 0);\nloop invariant (i < LARGE_INT) ==> (i + k >= 0);\nloop invariant (i < LARGE_INT) ==> (i + k <= 2);\nloop invariant (i < LARGE_INT) ==> (i >= 1);\nloop invariant (i < LARGE_INT) ==> (j >= 0);\nloop invariant (i < LARGE_INT) ==> (k >= 0);\nloop invariant (i < LARGE_INT) ==> (i + k >= 0);\nloop invariant (i < LARGE_INT) ==> (i + k <= 2);\nloop invariant (i < LARGE_INT) ==> (i >= 1);\nloop invariant (i < LARGE_INT) ==> (j >= 0);\nloop invariant (i < LARGE_INT) ==> (k >= 0);\nloop invariant (i < LARGE_INT) ==> (i + k >= 0);\nloop invariant (i < LARGE_INT) ==> (i + k <= 2);\nloop invariant (i < LARGE_INT) ==> (i >= 1);\nloop invariant (i < LARGE_INT) ==> (j >= 0);\nloop invariant (i < LARGE_INT) ==> (k >= 0);\nloop invariant (i < LARGE_INT) ==> (i + k >= 0);\nloop invariant (i < LARGE_INT) ==> (i + k <= 2);\nloop invariant (i < LARGE_INT) ==> (i >= 1);\nloop invariant (i < LARGE_INT) ==> (j >= 0);\nloop invariant (i < LARGE_INT) ==> (k >= 0);\nloop invariant (i < LARGE_INT) ==> (i + k >= 0);\nloop invariant (i < LARGE_INT) ==> (i + k <= 2);\nloop invariant (i < LARGE_INT) ==> (i >= 1);\nloop invariant (i < LARGE_INT) ==> (j >= 0);\nloop invariant (i < LARGE_INT) ==> (k >= 0);\nloop invariant (i < LARGE_INT) ==> (i + k >= 0);\nloop invariant (i < LARGE_INT) ==> (i + k <= 2);\nloop invariant (i < LARGE_INT) ==> (i >= 1);\nloop invariant (i < LARGE_INT) ==> (j >= 0);\nloop invariant (i < LARGE_INT) ==> (k >= 0);\nloop invariant (i < LARGE_INT) ==> (i + k >= 0);\nloop invariant (i < LARGE_INT) ==> (i + k <= 2);\nloop invariant (i < LARGE_INT) ==> (i >= 1);\nloop invariant (i < LARGE_INT) ==> (j >= 0);\nloop invariant (i < LARGE_INT) ==> (k >= 0);\nloop invariant (i < LARGE_INT) ==> (i + k >= 0);\nloop invariant (i < LARGE_INT) ==> (i + k <= 2);\nloop invariant (i < LARGE_INT) ==> (i >= 1);\nloop invariant (i < LARGE_INT) ==> (j >= 0);\nloop invariant (i < LARGE_INT) ==> (k >= 0);\nloop invariant (i < LARGE_INT) ==> (i + k >= 0);\nloop invariant (i < LARGE_INT) ==> (i + k <= 2);\nloop invariant (i < LARGE_INT) ==> (i >= 1);\nloop invariant (i < LARGE_INT) ==> (j >= 0);\nloop invariant (i < LARGE_INT) ==> (k >= 0);\nloop invariant (i < LARGE_INT) ==> (i + k >= 0);\nloop invariant (i < LARGE_INT) ==> (i + k <= 2);\nloop invariant (i < LARGE_INT) ==> (i >= 1);\nloop invariant (i < LARGE_INT) ==> (j >= 0);\nloop invariant (i < LARGE_INT) ==> (k >= 0);\nloop invariant (i < LARGE_INT) ==> (i + k >= 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i,j,k;\n    i = 1;\n    j = 1;\n    k = unknown_int();\n    if (!(0 <= k && k <= 1)) return 0;\n    /*@\nloop invariant i1: 0 <= i <= LARGE_INT;\n\n\nloop invariant i4: i + k <= 2;\nloop invariant i5: i >= 1;\n\nloop invariant i7: (i < LARGE_INT) ==> (k <= 1);\n\n\nloop invariant i10: (i < LARGE_INT) ==> (i + k >= 0);\nloop invariant i11: (i < LARGE_INT) ==> (i + k <= 2);\nloop invariant i12: (i < LARGE_INT) ==> (i >= 1);\n*/\nwhile (i < LARGE_INT) {\n\ti = i + 1;\n\tj = j + k;\n\tk = k - 1;\n\t{;\n//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 1 <= j <= LARGE_INT;\nloop invariant 0 <= k <= 1;\nloop invariant 1 <= i + k <= 2;\nloop invariant i >= 1;\nloop invariant i + k <= 2;\nloop invariant i >= 1 ==> i + k <= 2;\nloop invariant 1 <= j <= LARGE_INT;\nloop invariant 0 <= i + k <= 2;\nloop invariant i >= 1;\nloop invariant i + k <= 2;\nloop invariant 1 <= j <= LARGE_INT;\nloop invariant 0 <= i + k <= 2;\nloop invariant i >= 1;\nloop invariant i + k <= 2;\nloop invariant 1 <= j <= LARGE_INT;\nloop invariant 0 <= i + k <= 2;\nloop invariant i >= 1;\nloop invariant i + k <= 2;\nloop invariant 1 <= j <= LARGE_INT;\nloop invariant 0 <= i + k <= 2;\nloop invariant i >= 1;\nloop invariant i + k <= 2;\nloop invariant 1 <= j <= LARGE_INT;\nloop invariant 0 <= i + k <= 2;\nloop invariant i >= 1;\nloop invariant i + k <= 2;\nloop invariant 1 <= j <= LARGE_INT;\nloop invariant 0 <= i + k <= 2;\nloop invariant i >= 1;\nloop invariant i + k <= 2;\nloop invariant 1 <= j <= LARGE_INT;\nloop invariant 0 <= i + k <= 2;\nloop invariant i >= 1;\nloop invariant i + k <= 2;\nloop invariant 1 <= j <= LARGE_INT;\nloop invariant 0 <= i + k <= 2;\nloop invariant i >= 1;\nloop invariant i + k <= 2;\nloop invariant 1 <= j <= LARGE_INT;\nloop invariant 0 <= i + k <= 2;\nloop invariant i >= 1;\nloop invariant i + k <= 2;\nloop invariant 1 <= j <= LARGE_INT;\nloop invariant 0 <= i + k <= 2;\nloop invariant i >= 1;\nloop invariant i + k <= 2;\nloop invariant 1 <= j <= LARGE_INT;\nloop invariant 0 <= i + k <= 2;\nloop invariant i >= 1;\nloop invariant i + k <= 2;\nloop invariant 1 <= j <= LARGE_INT;\nloop invariant 0 <= i + k <= 2;\nloop invariant i >= 1;\nloop invariant i + k <= 2;\nloop invariant 1 <= j <= LARGE_INT;\nloop invariant 0 <= i + k <= 2;\nloop invariant i >= 1;\nloop invariant i + k <= 2;\nloop invariant 1 <= j <= LARGE_INT;\nloop invariant 0 <= i + k <= 2;\nloop invariant i >= 1;\nloop invariant i + k <= 2;\nloop invariant 1 <= j <= LARGE_INT;\nloop invariant 0 <= i + k <= 2;\nloop invariant i >= 1;\nloop invariant i + k <= 2;\nloop invariant 1 <= j <= LARGE_INT;\nloop invariant 0 <= i + k <= 2;\nloop invariant i >= 1;\nloop invariant i + k <= 2;\nloop invariant 1 <= j <= LARGE_INT;\nloop invariant 0 <= i + k <= 2;\nloop invariant i >= 1;\nloop invariant i + k <= 2;\nloop invariant 1 <= j <= LARGE_INT;\nloop invariant 0 <= i + k <= 2;\nloop invariant i >= 1;\nloop invariant i + k <= 2;\nloop invariant 1 <= j <= LARGE_INT;\nloop invariant 0 <= i + k <= 2;\nloop invariant i >= 1;\nloop invariant i + k <= 2;\nloop invariant 1 <= j <= LARGE_INT;\nloop invariant 0 <= i + k <= 2;\nloop invariant i >= 1;\nloop invariant i + k <= 2;\nloop invariant 1 <= j <= LARGE_INT;\nloop invariant 0 <= i + k <= 2;\nloop invariant i >= 1;\nloop invariant i + k <= 2;\nloop invariant 1 <= j <= LARGE_INT;\nloop invariant 0 <= i + k <= 2;\nloop invariant i >= 1;\nloop invariant i + k <= 2;\nloop invariant 1 <= j <= LARGE_INT;\nloop invariant 0 <= i + k <= 2;\nloop invariant i >= 1;\nloop invariant i + k <= 2;\nloop invariant 1 <= j <= LARGE_INT;\nloop invariant 0 <= i + k <= 2;\nloop invariant i >= 1;\nloop invariant i + k <= 2;\nloop invariant 1 <= j <= LARGE_INT;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i,j,k;\n    i = 1;\n    j = 1;\n    k = unknown_int();\n    if (!(0 <= k && k <= 1)) return 0;\n    /*@\nloop invariant i1: 0 <= i <= LARGE_INT;\n\n\nloop invariant i4: 1 <= i + k <= 2;\nloop invariant i5: i >= 1;\nloop invariant i6: i + k <= 2;\nloop invariant i7: i >= 1 ==> i + k <= 2;\nloop invariant i8: 0 <= i + k <= 2;\n*/\nwhile (i < LARGE_INT) {\n\ti = i + 1;\n\tj = j + k;\n\tk = k - 1;\n\t{;\n//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 42,
                "annotations": "```\n/*@\nloop invariant i >= 1;\nloop invariant i < LARGE_INT;\nloop invariant 0 <= j;\nloop invariant j <= 2;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant j == (i * k);\nloop invariant k == (1 - i);\nloop invariant i * (1 - i) >= 0;\nloop invariant i * (1 - i) <= 2;\nloop invariant i * (1 - i) == 0;\nloop invariant i * (1 - i) == 2;\nloop invariant i * (1 - i) == 1;\nloop invariant i * (1 - i) == 2 * (1 - i);\nloop invariant i * (1 - i) == 2 * i;\nloop invariant i * (1 - i) == 2 * i - 1;\nloop invariant i * (1 - i) == 2 * i - 2;\nloop invariant i * (1 - i) == 2 * i - 3;\nloop invariant i * (1 - i) == 2 * i - 4;\nloop invariant i * (1 - i) == (1 - i) * (2 * i - 1);\nloop invariant i * (1 - i) == (1 - i) * (2 * i - 2);\nloop invariant i * (1 - i) == (1 - i) * (2 * i - 3);\nloop invariant i * (1 - i) == (1 - i) * (2 * i - 4);\nloop invariant i * (1 - i) == (1 - i) * (2 * i - 5);\nloop invariant i * (1 - i) == (1 - i) * (2 * i - 6);\nloop invariant i * (1 - i) == (1 - i) * (2 * i - 7);\nloop invariant i * (1 - i) == (1 - i) * (2 * i - 8);\nloop invariant i * (1 - i) == (1 - i) * (2 * i - 9);\nloop invariant i * (1 - i) == (1 - i) * (2 * i - 10);\nloop invariant i * (1 - i) == (1 - i) * (2 * i - 11);\nloop invariant i * (1 - i) == (1 - i) * (2 * i - 12);\nloop invariant i * (1 - i) == (1 - i) * (2 * i - 13);\nloop invariant i * (1 - i) == (1 - i) * (2 * i - 14);\nloop invariant i * (1 - i) == (1 - i) * (2 * i - 15);\nloop invariant i * (1 - i) == (1 - i) * (2 * i - 16);\nloop invariant i * (1 - i) == (1 - i) * (2 * i - 17);\nloop invariant i * (1 - i) == (1 - i) * (2 * i - 18);\nloop invariant i * (1 - i) == (1 - i) * (2 * i - 19);\nloop invariant i * (1 - i) == (1 - i) * (2 * i - 20);\nloop invariant i * (1 - i) == (1 - i) * (2 * i - 21);\nloop invariant i * (1 - i) == (1 - i) * (2 * i - 22);\nloop invariant i * (1 - i) == (1 - i) * (2 * i - 23);\nloop invariant i * (1 - i) == (1 - i) * (2 * i - 24);\nloop invariant i * (1 - i) == (1 - i) * (2 * i - 25);\nloop invariant i * (1 - i) == (1 - i) * (2 * i - 26);\nloop invariant i * (1 - i) == (1 - i) * (2 * i - 27);\nloop invariant i * (1 - i) == (1 - i) * (2 * i - 28);\nloop invariant i * (1 - i) == (1 - i) * (2 * i - 29);\nloop invariant i * (1 - i) == (1 - i) * (2 * i - 30);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i,j,k;\n    i = 1;\n    j = 1;\n    k = unknown_int();\n    if (!(0 <= k && k <= 1)) return 0;\n    /*@\nloop invariant i1: i >= 1;\n\n\n\n\nloop invariant i6: k <= 1;\nloop invariant i7: i + k >= 1;\nloop invariant i8: i + k <= 2;\n\n\n\nloop invariant i12: i * (1 - i) <= 2;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (i < LARGE_INT) {\n\ti = i + 1;\n\tj = j + k;\n\tk = k - 1;\n\t{;\n//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 1 <= j <= LARGE_INT * k + 1;\nloop invariant 0 <= k <= 1;\nloop invariant i >= 1;\nloop invariant i <= k ==> j == k * (k + 1) / 2;\nloop invariant i > k ==> j >= k * (k + 1) / 2;\nloop invariant i < LARGE_INT ==> j <= k * (k + 1) / 2 + (LARGE_INT - i) * (k + 1) - 1;\nloop invariant i <= k ==> j == (k + 1) * (k + 2) / 2 - 1;\nloop invariant i > k ==> j >= (k + 1) * (k + 2) / 2 - 1;\nloop invariant i < LARGE_INT ==> j <= (k + 1) * (k + 2) / 2 - 1 + (LARGE_INT - i) * (k + 1) - 1;\nloop invariant i <= k ==> j == (k + 1) * (k + 2) / 2 - 1;\nloop invariant i > k ==> j >= (k + 1) * (k + 2) / 2 - 1;\nloop invariant i < LARGE_INT ==> j <= (k + 1) * (k + 2) / 2 - 1 + (LARGE_INT - i) * (k + 1) - 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i,j,k;\n    i = 1;\n    j = 1;\n    k = unknown_int();\n    if (!(0 <= k && k <= 1)) return 0;\n    /*@\nloop invariant i1: 0 <= i <= LARGE_INT;\n\n\nloop invariant i4: i >= 1;\nloop invariant i5: i <= k ==> j == k * (k + 1) / 2;\n\n\n\n\n\n*/\nwhile (i < LARGE_INT) {\n\ti = i + 1;\n\tj = j + k;\n\tk = k - 1;\n\t{;\n//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 1 <= i + k <= 2;\nloop invariant i >= 1;\nloop invariant i < LARGE_INT;\nloop invariant 0 <= k <= 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i,j,k;\n    i = 1;\n    j = 1;\n    k = unknown_int();\n    if (!(0 <= k && k <= 1)) return 0;\n    /*@\nloop invariant i1: 1 <= i + k <= 2;\nloop invariant i2: i >= 1;\n\n\n*/\nwhile (i < LARGE_INT) {\n\ti = i + 1;\n\tj = j + k;\n\tk = k - 1;\n\t{;\n//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i + k <= 2; i >= 1; assume(0 <= k && k <= 1);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i,j,k;\n    i = 1;\n    j = 1;\n    k = unknown_int();\n    if (!(0 <= k && k <= 1)) return 0;\n    /*@\n\n*/\nwhile (i < LARGE_INT) {\n\ti = i + 1;\n\tj = j + k;\n\tk = k - 1;\n\t{;\n//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 109: unexpected token 'i'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i,j,k;\n    i = 1;\n    j = 1;\n    k = unknown_int();\n    if (!(0 <= k && k <= 1)) return 0;\n    /*@\nloop invariant i1: 1 <= i + k && i + k <= 2 && i >= 1;\nloop invariant i2: 0 <= k && k <= 1;\nloop invariant i3: i >= 1;\nloop invariant i4: k >= 0;\nloop invariant i5: k <= 1;\nloop invariant i6: 1 <= i + k && i + k <= 2;\nloop invariant i7: k == i - 1;\nloop invariant i8: 1 <= k + i <= 2;\nloop invariant i9: 0 <= i <= LARGE_INT;\nloop invariant i10: 0 <= k <= 1;\nloop invariant i11: 1 <= j <= 1 + k;\nloop invariant i12: i + k >= 1;\nloop invariant i13: i + k <= 2;\nloop invariant i14: -1 <= k <= 1;\nloop invariant i15: j >= 1;\nloop invariant i16: j <= i + k * (LARGE_INT + 1);\nloop invariant i17: i + k <= -1 || i + k >= 1;\nloop invariant i18: i * (i + 1) / 2 <= j <= i * (i + 1) / 2 + k * (LARGE_INT + 1);\nloop invariant i19: i == 1 || j == i + k * (LARGE_INT + 1);\nloop invariant i20: i == 1 || j == i * (i + 1) / 2;\nloop invariant i21: i == 1 || j == i * (i + 1) / 2 + k * (LARGE_INT + 1);\nloop invariant i22: 1 <= j && j <= i * k;\nloop invariant i23: 1 <= i <= LARGE_INT - 1;\nloop invariant i24: 1 <= j <= LARGE_INT;\nloop invariant i25: 1 <= i + k && i + k <= 2 && i >= 1 && 0 <= k && k <= 1;\nloop invariant i26: 0 <= i + k <= LARGE_INT;\nloop invariant i27: 1 <= i <= LARGE_INT;\nloop invariant i28: 0 <= j <= i + k;\nloop invariant i29: (i < LARGE_INT) ==> (j < i + k);\nloop invariant i30: (i < LARGE_INT) ==> (k <= 1);\nloop invariant i31: (i < LARGE_INT) ==> (j >= 0);\nloop invariant i32: (i < LARGE_INT) ==> (k >= 0);\nloop invariant i33: (i < LARGE_INT) ==> (i + k >= 0);\nloop invariant i34: (i < LARGE_INT) ==> (i + k <= 2);\nloop invariant i35: (i < LARGE_INT) ==> (i >= 1);\nloop invariant i36: 1 <= i + k <= 2;\nloop invariant i37: i >= 1 ==> i + k <= 2;\nloop invariant i38: 0 <= i + k <= 2;\nloop invariant i39: i < LARGE_INT;\nloop invariant i40: 0 <= j;\nloop invariant i41: j <= 2;\nloop invariant i42: j == (i * k);\nloop invariant i43: k == (1 - i);\nloop invariant i44: i * (1 - i) >= 0;\nloop invariant i45: i * (1 - i) <= 2;\nloop invariant i46: i * (1 - i) == 0;\nloop invariant i47: i * (1 - i) == 2;\nloop invariant i48: i * (1 - i) == 1;\nloop invariant i49: i * (1 - i) == 2 * (1 - i);\nloop invariant i50: i * (1 - i) == 2 * i;\nloop invariant i51: i * (1 - i) == 2 * i - 1;\nloop invariant i52: i * (1 - i) == 2 * i - 2;\nloop invariant i53: i * (1 - i) == 2 * i - 3;\nloop invariant i54: i * (1 - i) == 2 * i - 4;\nloop invariant i55: i * (1 - i) == (1 - i) * (2 * i - 1);\nloop invariant i56: i * (1 - i) == (1 - i) * (2 * i - 2);\nloop invariant i57: i * (1 - i) == (1 - i) * (2 * i - 3);\nloop invariant i58: i * (1 - i) == (1 - i) * (2 * i - 4);\nloop invariant i59: i * (1 - i) == (1 - i) * (2 * i - 5);\nloop invariant i60: i * (1 - i) == (1 - i) * (2 * i - 6);\nloop invariant i61: i * (1 - i) == (1 - i) * (2 * i - 7);\nloop invariant i62: i * (1 - i) == (1 - i) * (2 * i - 8);\nloop invariant i63: i * (1 - i) == (1 - i) * (2 * i - 9);\nloop invariant i64: i * (1 - i) == (1 - i) * (2 * i - 10);\nloop invariant i65: i * (1 - i) == (1 - i) * (2 * i - 11);\nloop invariant i66: i * (1 - i) == (1 - i) * (2 * i - 12);\nloop invariant i67: i * (1 - i) == (1 - i) * (2 * i - 13);\nloop invariant i68: i * (1 - i) == (1 - i) * (2 * i - 14);\nloop invariant i69: i * (1 - i) == (1 - i) * (2 * i - 15);\nloop invariant i70: i * (1 - i) == (1 - i) * (2 * i - 16);\nloop invariant i71: i * (1 - i) == (1 - i) * (2 * i - 17);\nloop invariant i72: i * (1 - i) == (1 - i) * (2 * i - 18);\nloop invariant i73: i * (1 - i) == (1 - i) * (2 * i - 19);\nloop invariant i74: i * (1 - i) == (1 - i) * (2 * i - 20);\nloop invariant i75: i * (1 - i) == (1 - i) * (2 * i - 21);\nloop invariant i76: i * (1 - i) == (1 - i) * (2 * i - 22);\nloop invariant i77: i * (1 - i) == (1 - i) * (2 * i - 23);\nloop invariant i78: i * (1 - i) == (1 - i) * (2 * i - 24);\nloop invariant i79: i * (1 - i) == (1 - i) * (2 * i - 25);\nloop invariant i80: i * (1 - i) == (1 - i) * (2 * i - 26);\nloop invariant i81: i * (1 - i) == (1 - i) * (2 * i - 27);\nloop invariant i82: i * (1 - i) == (1 - i) * (2 * i - 28);\nloop invariant i83: i * (1 - i) == (1 - i) * (2 * i - 29);\nloop invariant i84: i * (1 - i) == (1 - i) * (2 * i - 30);\nloop invariant i85: 1 <= j <= LARGE_INT * k + 1;\nloop invariant i86: i <= k ==> j == k * (k + 1) / 2;\nloop invariant i87: i > k ==> j >= k * (k + 1) / 2;\nloop invariant i88: i < LARGE_INT ==> j <= k * (k + 1) / 2 + (LARGE_INT - i) * (k + 1) - 1;\nloop invariant i89: i <= k ==> j == (k + 1) * (k + 2) / 2 - 1;\nloop invariant i90: i > k ==> j >= (k + 1) * (k + 2) / 2 - 1;\nloop invariant i91: i < LARGE_INT ==> j <= (k + 1) * (k + 2) / 2 - 1 + (LARGE_INT - i) * (k + 1) - 1;\nloop invariant i92: 0 <= i + k <= 2; i >= 1; assume(0 <= k && k <= 1);\n*/\nwhile (i < LARGE_INT) {\n\ti = i + 1;\n\tj = j + k;\n\tk = k - 1;\n\t{;\n//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n}\n\n    }\n    return 0;\n}",
        "combined_annotation_num_solver_calls": 59,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i,j,k;\n    i = 1;\n    j = 1;\n    k = unknown_int();\n    if (!(0 <= k && k <= 1)) return 0;\n    /*@\nloop invariant i1: 1 <= i + k && i + k <= 2 && i >= 1;\n\nloop invariant i3: i >= 1;\n\nloop invariant i5: k <= 1;\nloop invariant i6: 1 <= i + k && i + k <= 2;\n\nloop invariant i8: 1 <= k + i <= 2;\nloop invariant i9: 0 <= i <= LARGE_INT;\n\n\nloop invariant i12: i + k >= 1;\nloop invariant i13: i + k <= 2;\n\n\n\nloop invariant i17: i + k <= -1 || i + k >= 1;\n\n\n\n\n\n\n\n\nloop invariant i26: 0 <= i + k <= LARGE_INT;\nloop invariant i27: 1 <= i <= LARGE_INT;\n\n\nloop invariant i30: (i < LARGE_INT) ==> (k <= 1);\n\n\nloop invariant i33: (i < LARGE_INT) ==> (i + k >= 0);\nloop invariant i34: (i < LARGE_INT) ==> (i + k <= 2);\nloop invariant i35: (i < LARGE_INT) ==> (i >= 1);\nloop invariant i36: 1 <= i + k <= 2;\nloop invariant i37: i >= 1 ==> i + k <= 2;\nloop invariant i38: 0 <= i + k <= 2;\n\n\nloop invariant i41: j <= 2;\n\n\n\nloop invariant i45: i * (1 - i) <= 2;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i86: i <= k ==> j == k * (k + 1) / 2;\n\n\n\n\n\n\n*/\nwhile (i < LARGE_INT) {\n\ti = i + 1;\n\tj = j + k;\n\tk = k - 1;\n\t{;\n//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n}\n\n    }\n    return 0;\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/split.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c"
        ],
        "skipped": [],
        "total": 49,
        "success_count": 42,
        "failure_count": 7,
        "success_rate": 0.8571428571428571
    }
}