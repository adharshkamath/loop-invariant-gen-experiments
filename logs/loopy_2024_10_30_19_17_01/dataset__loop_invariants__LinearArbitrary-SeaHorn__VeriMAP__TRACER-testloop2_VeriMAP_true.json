{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(){\n\n  int NONDET;\n  int i,N;\n  int a;\n  int x;\n\n  if (NONDET > 0) x=1; else x=2;\n\n  while (i<N){\n    i=i+1;\n  }\n\n  {;\n//@ assert(!( x >2 ));\n}\n\nreturn;\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= i <= N;\nloop invariant x == 1 || x == 2;\nloop invariant (NONDET > 0 && x == 1) || (NONDET <= 0 && x == 2);\nloop invariant i <= N;\nloop invariant i >= 0;\nloop invariant x <= 2;\nloop invariant x >= 1;\nloop invariant i <= N ==> x == 1 || x == 2;\nloop invariant i <= N ==> (NONDET > 0 && x == 1) || (NONDET <= 0 && x == 2);\nloop invariant i <= N ==> i <= N;\nloop invariant i <= N ==> i >= 0;\nloop invariant i <= N ==> x <= 2;\nloop invariant i <= N ==> x >= 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= N;\nloop invariant 0 <= x <= 2;\nloop invariant x <= 1 ==> 0 <= a <= 0;\nloop invariant x >= 2 ==> 0 <= a <= 0;\nloop invariant x <= 1 ==> a = 0;\nloop invariant x >= 2 ==> a = 0;\nloop invariant N <= 0 ==> i = 0;\nloop invariant N > 0 ==> 0 <= i <= N;\nloop invariant N <= 0 ==> a = 0;\nloop invariant N > 0 ==> 0 <= a <= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= N;\nloop invariant 1 <= x <= 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= N;\nloop invariant x == 1 ==> i == 0;\nloop invariant x == 2 ==> i == 0;\nloop invariant x == 1 ==> i == N ==> i == N;\nloop invariant x == 2 ==> i == N ==> i == N;\nloop invariant x == 1 ==> i < N ==> i < N;\nloop invariant x == 2 ==> i < N ==> i < N;\nloop invariant x == 1 ==> i < N ==> i < N ==> i < N;\nloop invariant x == 2 ==> i < N ==> i < N ==> i < N;\nloop invariant x == 1 ==> i < N ==> i < N ==> i < N ==> i < N;\nloop invariant x == 2 ==> i < N ==> i < N ==> i < N ==> i < N;\nloop invariant x == 1 ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N;\nloop invariant x == 2 ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N;\nloop invariant x == 1 ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N;\nloop invariant x == 2 ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N;\nloop invariant x == 1 ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N;\nloop invariant x == 2 ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N;\nloop invariant x == 1 ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N;\nloop invariant x == 2 ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N;\nloop invariant x == 1 ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N;\nloop invariant x == 2 ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N;\nloop invariant x == 1 ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N;\nloop invariant x == 2 ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N;\nloop invariant x == 1 ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N;\nloop invariant x == 2 ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N;\nloop invariant x == 1 ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N;\nloop invariant x == 2 ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N;\nloop invariant x == 1 ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N;\nloop invariant x == 2 ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= N;\nloop invariant i <= x <= 2;\nloop invariant x <= NONDET;\n*/\n```",
            "```\n/*@\nloop invariant i >= 0;\nloop invariant i <= N;\nloop invariant x == 1 || x == 2;\nloop invariant x < 2 ==> i == N;\nloop invariant x == 2 ==> i < N;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= N;\nloop invariant x >= 1;\nloop invariant x <= 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= N;\nloop invariant x <= 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= N;\nloop invariant 0 <= i <= N;\nloop invariant x <= 2;\nloop invariant x >= 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= N;\nloop invariant x == 1 || x == 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= N;\nloop invariant i == 0 ==> x == 1;\nloop invariant i > 0 ==> x == 2;\nloop invariant i == N;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= N;\nloop invariant (if x == 1 then 1 <= a <= x else 2 <= a <= x);\nloop invariant (if x == 1 then 1 <= a <= x else 2 <= a <= x);\nloop invariant (if x == 1 then 1 <= a <= x else 2 <= a <= x);\nloop invariant (if x == 1 then 1 <= a <= x else 2 <= a <= x);\nloop invariant (if x == 1 then 1 <= a <= x else 2 <= a <= x);\nloop invariant (if x == 1 then 1 <= a <= x else 2 <= a <= x);\nloop invariant (if x == 1 then 1 <= a <= x else 2 <= a <= x);\nloop invariant (if x == 1 then 1 <= a <= x else 2 <= a <= x);\nloop invariant (if x == 1 then 1 <= a <= x else 2 <= a <= x);\nloop invariant (if x == 1 then 1 <= a <= x else 2 <= a <= x);\nloop invariant (if x == 1 then 1 <= a <= x else 2 <= a <= x);\nloop invariant (if x == 1 then 1 <= a <= x else 2 <= a <= x);\nloop invariant (if x == 1 then 1 <= a <= x else 2 <= a <= x);\nloop invariant (if x == 1 then 1 <= a <= x else 2 <= a <= x);\nloop invariant (if x == 1 then 1 <= a <= x else 2 <= a <= x);\nloop invariant (if x == 1 then 1 <= a <= x else 2 <= a <= x);\nloop invariant (if x == 1 then 1 <= a <= x else 2 <= a <= x);\nloop invariant (if x == 1 then 1 <= a <= x else 2 <= a <= x);\nloop invariant (if x == 1 then 1 <= a <= x else 2 <= a <= x);\nloop invariant (if x == 1 then 1 <= a <= x else 2 <= a <= x);\nloop invariant (if x == 1 then 1 <= a <= x else 2 <= a <= x);\nloop invariant (if x == 1 then 1 <= a <= x else 2 <= a <= x);\nloop invariant (if x == 1 then 1 <= a <= x else 2 <= a <= x);\nloop invariant (if x == 1 then 1 <= a <= x else 2 <= a <= x);\nloop invariant (if x == 1 then 1 <= a <= x else 2 <= a <= x);\nloop invariant (if x == 1 then 1 <= a <= x else 2 <= a <= x);\nloop invariant (if x == 1 then 1 <= a <= x else 2 <= a <= x);\nloop invariant (if x == 1 then 1 <= a <= x else 2 <= a <= x);\nloop invariant (if x == 1 then 1 <= a <= x else 2 <= a <= x);\nloop invariant (if x == 1 then 1 <= a <= x else 2 <= a <= x);\nloop invariant (if x == 1 then 1 <= a <= x else 2 <= a <= x);\nloop invariant (if x == 1 then 1 <= a <= x else 2 <= a <= x);\nloop invariant (if x == 1 then 1 <= a <= x else 2 <= a <= x);\nloop invariant (if x == 1 then 1 <= a <= x else 2 <= a <= x);\nloop invariant (if x == 1 then 1 <= a <= x else 2 <= a <= x);\nloop invariant (if x == 1 then 1 <= a <= x else 2 <= a <= x);\nloop invariant (if x == 1 then 1 <= a <= x else 2 <= a <= x);\nloop invariant (if x == 1 then 1 <= a <= x else 2 <= a <= x);\nloop invariant (if x == 1 then 1 <= a <= x else 2 <= a <= x);\nloop invariant (if x == 1 then 1 <= a <= x else 2 <= a <= x);\nloop invariant (if x == 1 then 1 <= a <= x else 2 <= a <= x);\nloop invariant (if x == 1 then 1 <= a <= x else 2 <= a <= x);\nloop invariant (if x == 1 then 1 <= a <= x else 2 <= a <= x);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= N;\nloop invariant x == 1 ==> i == 0;\nloop invariant x == 2 ==> i == N;\nloop invariant x == 1 ==> i != N;\nloop invariant x == 2 ==> i != 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= N;\nloop invariant i >= 0;\nloop invariant i < N;\nloop invariant x == 1 || x == 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= N;\nloop invariant 1 <= x <= 2;\nloop invariant i >= 0;\nloop invariant i <= N;\nloop invariant x == 1 || x == 2;\nloop invariant !(x > 2);\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= N;\nloop invariant x == 1 || x == 2;\nloop invariant (NONDET > 0 && x == 1) || (NONDET <= 0 && x == 2);\nloop invariant i <= N;\nloop invariant i >= 0;\nloop invariant x <= 2;\nloop invariant x >= 1;\nloop invariant i <= N ==> x == 1 || x == 2;\nloop invariant i <= N ==> (NONDET > 0 && x == 1) || (NONDET <= 0 && x == 2);\nloop invariant i <= N ==> i <= N;\nloop invariant i <= N ==> i >= 0;\nloop invariant i <= N ==> x <= 2;\nloop invariant i <= N ==> x >= 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(){\n\n  int NONDET;\n  int i,N;\n  int a;\n  int x;\n\n  if (NONDET > 0) x=1; else x=2;\n\n  /*@\n\nloop invariant i2: x == 1 || x == 2;\nloop invariant i3: (NONDET > 0 && x == 1) || (NONDET <= 0 && x == 2);\n\n\nloop invariant i6: x <= 2;\nloop invariant i7: x >= 1;\nloop invariant i8: i <= N ==> x == 1 || x == 2;\nloop invariant i9: i <= N ==> (NONDET > 0 && x == 1) || (NONDET <= 0 && x == 2);\nloop invariant i10: i <= N ==> i <= N;\n\nloop invariant i12: i <= N ==> x <= 2;\nloop invariant i13: i <= N ==> x >= 1;\n*/\nwhile (i<N){\n    i=i+1;\n  }\n\n  {;\n//@ assert(!( x >2 ));\n}\n\nreturn;\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= N;\nloop invariant 0 <= x <= 2;\nloop invariant x <= 1 ==> 0 <= a <= 0;\nloop invariant x >= 2 ==> 0 <= a <= 0;\nloop invariant x <= 1 ==> a = 0;\nloop invariant x >= 2 ==> a = 0;\nloop invariant N <= 0 ==> i = 0;\nloop invariant N > 0 ==> 0 <= i <= N;\nloop invariant N <= 0 ==> a = 0;\nloop invariant N > 0 ==> 0 <= a <= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(){\n\n  int NONDET;\n  int i,N;\n  int a;\n  int x;\n\n  if (NONDET > 0) x=1; else x=2;\n\n  /*@\n\nloop invariant i2: 0 <= x <= 2;\n\n\n\n\n\n\n\n\n*/\nwhile (i<N){\n    i=i+1;\n  }\n\n  {;\n//@ assert(!( x >2 ));\n}\n\nreturn;\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= N;\nloop invariant 1 <= x <= 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(){\n\n  int NONDET;\n  int i,N;\n  int a;\n  int x;\n\n  if (NONDET > 0) x=1; else x=2;\n\n  /*@\n\nloop invariant i2: 1 <= x <= 2;\n*/\nwhile (i<N){\n    i=i+1;\n  }\n\n  {;\n//@ assert(!( x >2 ));\n}\n\nreturn;\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= N;\nloop invariant x == 1 ==> i == 0;\nloop invariant x == 2 ==> i == 0;\nloop invariant x == 1 ==> i == N ==> i == N;\nloop invariant x == 2 ==> i == N ==> i == N;\nloop invariant x == 1 ==> i < N ==> i < N;\nloop invariant x == 2 ==> i < N ==> i < N;\nloop invariant x == 1 ==> i < N ==> i < N ==> i < N;\nloop invariant x == 2 ==> i < N ==> i < N ==> i < N;\nloop invariant x == 1 ==> i < N ==> i < N ==> i < N ==> i < N;\nloop invariant x == 2 ==> i < N ==> i < N ==> i < N ==> i < N;\nloop invariant x == 1 ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N;\nloop invariant x == 2 ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N;\nloop invariant x == 1 ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N;\nloop invariant x == 2 ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N;\nloop invariant x == 1 ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N;\nloop invariant x == 2 ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N;\nloop invariant x == 1 ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N;\nloop invariant x == 2 ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N;\nloop invariant x == 1 ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N;\nloop invariant x == 2 ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N;\nloop invariant x == 1 ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N;\nloop invariant x == 2 ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N;\nloop invariant x == 1 ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N;\nloop invariant x == 2 ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N;\nloop invariant x == 1 ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N;\nloop invariant x == 2 ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N;\nloop invariant x == 1 ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N;\nloop invariant x == 2 ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(){\n\n  int NONDET;\n  int i,N;\n  int a;\n  int x;\n\n  if (NONDET > 0) x=1; else x=2;\n\n  /*@\n\n\n\nloop invariant i4: x == 1 ==> i == N ==> i == N;\nloop invariant i5: x == 2 ==> i == N ==> i == N;\nloop invariant i6: x == 1 ==> i < N ==> i < N;\nloop invariant i7: x == 2 ==> i < N ==> i < N;\nloop invariant i8: x == 1 ==> i < N ==> i < N ==> i < N;\nloop invariant i9: x == 2 ==> i < N ==> i < N ==> i < N;\nloop invariant i10: x == 1 ==> i < N ==> i < N ==> i < N ==> i < N;\nloop invariant i11: x == 2 ==> i < N ==> i < N ==> i < N ==> i < N;\nloop invariant i12: x == 1 ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N;\nloop invariant i13: x == 2 ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N;\nloop invariant i14: x == 1 ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N;\nloop invariant i15: x == 2 ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N;\nloop invariant i16: x == 1 ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N;\nloop invariant i17: x == 2 ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N;\nloop invariant i18: x == 1 ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N;\nloop invariant i19: x == 2 ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N;\nloop invariant i20: x == 1 ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N;\nloop invariant i21: x == 2 ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N;\nloop invariant i22: x == 1 ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N;\nloop invariant i23: x == 2 ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N;\nloop invariant i24: x == 1 ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N;\nloop invariant i25: x == 2 ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N;\nloop invariant i26: x == 1 ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N;\nloop invariant i27: x == 2 ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N;\nloop invariant i28: x == 1 ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N;\nloop invariant i29: x == 2 ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N;\n*/\nwhile (i<N){\n    i=i+1;\n  }\n\n  {;\n//@ assert(!( x >2 ));\n}\n\nreturn;\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= N;\nloop invariant i <= x <= 2;\nloop invariant x <= NONDET;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(){\n\n  int NONDET;\n  int i,N;\n  int a;\n  int x;\n\n  if (NONDET > 0) x=1; else x=2;\n\n  /*@\n\n\n\n*/\nwhile (i<N){\n    i=i+1;\n  }\n\n  {;\n//@ assert(!( x >2 ));\n}\n\nreturn;\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant i >= 0;\nloop invariant i <= N;\nloop invariant x == 1 || x == 2;\nloop invariant x < 2 ==> i == N;\nloop invariant x == 2 ==> i < N;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(){\n\n  int NONDET;\n  int i,N;\n  int a;\n  int x;\n\n  if (NONDET > 0) x=1; else x=2;\n\n  /*@\n\n\nloop invariant i3: x == 1 || x == 2;\n\n\n*/\nwhile (i<N){\n    i=i+1;\n  }\n\n  {;\n//@ assert(!( x >2 ));\n}\n\nreturn;\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= N;\nloop invariant x >= 1;\nloop invariant x <= 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(){\n\n  int NONDET;\n  int i,N;\n  int a;\n  int x;\n\n  if (NONDET > 0) x=1; else x=2;\n\n  /*@\n\nloop invariant i2: x >= 1;\nloop invariant i3: x <= 2;\n*/\nwhile (i<N){\n    i=i+1;\n  }\n\n  {;\n//@ assert(!( x >2 ));\n}\n\nreturn;\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= N;\nloop invariant x <= 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(){\n\n  int NONDET;\n  int i,N;\n  int a;\n  int x;\n\n  if (NONDET > 0) x=1; else x=2;\n\n  /*@\n\nloop invariant i2: x <= 2;\n*/\nwhile (i<N){\n    i=i+1;\n  }\n\n  {;\n//@ assert(!( x >2 ));\n}\n\nreturn;\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= N;\nloop invariant 0 <= i <= N;\nloop invariant x <= 2;\nloop invariant x >= 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(){\n\n  int NONDET;\n  int i,N;\n  int a;\n  int x;\n\n  if (NONDET > 0) x=1; else x=2;\n\n  /*@\n\nloop invariant i2: x <= 2;\nloop invariant i3: x >= 1;\n*/\nwhile (i<N){\n    i=i+1;\n  }\n\n  {;\n//@ assert(!( x >2 ));\n}\n\nreturn;\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= N;\nloop invariant x == 1 || x == 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(){\n\n  int NONDET;\n  int i,N;\n  int a;\n  int x;\n\n  if (NONDET > 0) x=1; else x=2;\n\n  /*@\n\nloop invariant i2: x == 1 || x == 2;\n*/\nwhile (i<N){\n    i=i+1;\n  }\n\n  {;\n//@ assert(!( x >2 ));\n}\n\nreturn;\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= N;\nloop invariant i == 0 ==> x == 1;\nloop invariant i > 0 ==> x == 2;\nloop invariant i == N;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(){\n\n  int NONDET;\n  int i,N;\n  int a;\n  int x;\n\n  if (NONDET > 0) x=1; else x=2;\n\n  /*@\n\n\n\n\n*/\nwhile (i<N){\n    i=i+1;\n  }\n\n  {;\n//@ assert(!( x >2 ));\n}\n\nreturn;\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= N;\nloop invariant (if x == 1 then 1 <= a <= x else 2 <= a <= x);\nloop invariant (if x == 1 then 1 <= a <= x else 2 <= a <= x);\nloop invariant (if x == 1 then 1 <= a <= x else 2 <= a <= x);\nloop invariant (if x == 1 then 1 <= a <= x else 2 <= a <= x);\nloop invariant (if x == 1 then 1 <= a <= x else 2 <= a <= x);\nloop invariant (if x == 1 then 1 <= a <= x else 2 <= a <= x);\nloop invariant (if x == 1 then 1 <= a <= x else 2 <= a <= x);\nloop invariant (if x == 1 then 1 <= a <= x else 2 <= a <= x);\nloop invariant (if x == 1 then 1 <= a <= x else 2 <= a <= x);\nloop invariant (if x == 1 then 1 <= a <= x else 2 <= a <= x);\nloop invariant (if x == 1 then 1 <= a <= x else 2 <= a <= x);\nloop invariant (if x == 1 then 1 <= a <= x else 2 <= a <= x);\nloop invariant (if x == 1 then 1 <= a <= x else 2 <= a <= x);\nloop invariant (if x == 1 then 1 <= a <= x else 2 <= a <= x);\nloop invariant (if x == 1 then 1 <= a <= x else 2 <= a <= x);\nloop invariant (if x == 1 then 1 <= a <= x else 2 <= a <= x);\nloop invariant (if x == 1 then 1 <= a <= x else 2 <= a <= x);\nloop invariant (if x == 1 then 1 <= a <= x else 2 <= a <= x);\nloop invariant (if x == 1 then 1 <= a <= x else 2 <= a <= x);\nloop invariant (if x == 1 then 1 <= a <= x else 2 <= a <= x);\nloop invariant (if x == 1 then 1 <= a <= x else 2 <= a <= x);\nloop invariant (if x == 1 then 1 <= a <= x else 2 <= a <= x);\nloop invariant (if x == 1 then 1 <= a <= x else 2 <= a <= x);\nloop invariant (if x == 1 then 1 <= a <= x else 2 <= a <= x);\nloop invariant (if x == 1 then 1 <= a <= x else 2 <= a <= x);\nloop invariant (if x == 1 then 1 <= a <= x else 2 <= a <= x);\nloop invariant (if x == 1 then 1 <= a <= x else 2 <= a <= x);\nloop invariant (if x == 1 then 1 <= a <= x else 2 <= a <= x);\nloop invariant (if x == 1 then 1 <= a <= x else 2 <= a <= x);\nloop invariant (if x == 1 then 1 <= a <= x else 2 <= a <= x);\nloop invariant (if x == 1 then 1 <= a <= x else 2 <= a <= x);\nloop invariant (if x == 1 then 1 <= a <= x else 2 <= a <= x);\nloop invariant (if x == 1 then 1 <= a <= x else 2 <= a <= x);\nloop invariant (if x == 1 then 1 <= a <= x else 2 <= a <= x);\nloop invariant (if x == 1 then 1 <= a <= x else 2 <= a <= x);\nloop invariant (if x == 1 then 1 <= a <= x else 2 <= a <= x);\nloop invariant (if x == 1 then 1 <= a <= x else 2 <= a <= x);\nloop invariant (if x == 1 then 1 <= a <= x else 2 <= a <= x);\nloop invariant (if x == 1 then 1 <= a <= x else 2 <= a <= x);\nloop invariant (if x == 1 then 1 <= a <= x else 2 <= a <= x);\nloop invariant (if x == 1 then 1 <= a <= x else 2 <= a <= x);\nloop invariant (if x == 1 then 1 <= a <= x else 2 <= a <= x);\nloop invariant (if x == 1 then 1 <= a <= x else 2 <= a <= x);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(){\n\n  int NONDET;\n  int i,N;\n  int a;\n  int x;\n\n  if (NONDET > 0) x=1; else x=2;\n\n  /*@\n\n\n*/\nwhile (i<N){\n    i=i+1;\n  }\n\n  {;\n//@ assert(!( x >2 ));\n}\n\nreturn;\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= N;\nloop invariant x == 1 ==> i == 0;\nloop invariant x == 2 ==> i == N;\nloop invariant x == 1 ==> i != N;\nloop invariant x == 2 ==> i != 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(){\n\n  int NONDET;\n  int i,N;\n  int a;\n  int x;\n\n  if (NONDET > 0) x=1; else x=2;\n\n  /*@\n\n\n\n\n\n*/\nwhile (i<N){\n    i=i+1;\n  }\n\n  {;\n//@ assert(!( x >2 ));\n}\n\nreturn;\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= N;\nloop invariant i >= 0;\nloop invariant i < N;\nloop invariant x == 1 || x == 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(){\n\n  int NONDET;\n  int i,N;\n  int a;\n  int x;\n\n  if (NONDET > 0) x=1; else x=2;\n\n  /*@\n\n\n\nloop invariant i4: x == 1 || x == 2;\n*/\nwhile (i<N){\n    i=i+1;\n  }\n\n  {;\n//@ assert(!( x >2 ));\n}\n\nreturn;\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= N;\nloop invariant 1 <= x <= 2;\nloop invariant i >= 0;\nloop invariant i <= N;\nloop invariant x == 1 || x == 2;\nloop invariant !(x > 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(){\n\n  int NONDET;\n  int i,N;\n  int a;\n  int x;\n\n  if (NONDET > 0) x=1; else x=2;\n\n  /*@\n\nloop invariant i2: 1 <= x <= 2;\n\n\nloop invariant i5: x == 1 || x == 2;\nloop invariant i6: !(x > 2);\n*/\nwhile (i<N){\n    i=i+1;\n  }\n\n  {;\n//@ assert(!( x >2 ));\n}\n\nreturn;\n\n}",
                "checker_output_after_prune": true
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 34: Assignment operators not allowed in annotations.",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(){\n\n  int NONDET;\n  int i,N;\n  int a;\n  int x;\n\n  if (NONDET > 0) x=1; else x=2;\n\n  /*@\nloop invariant i1: 0 <= i <= N;\nloop invariant i2: x == 1 || x == 2;\nloop invariant i3: (NONDET > 0 && x == 1) || (NONDET <= 0 && x == 2);\nloop invariant i4: i <= N;\nloop invariant i5: i >= 0;\nloop invariant i6: x <= 2;\nloop invariant i7: x >= 1;\nloop invariant i8: i <= N ==> x == 1 || x == 2;\nloop invariant i9: i <= N ==> (NONDET > 0 && x == 1) || (NONDET <= 0 && x == 2);\nloop invariant i10: i <= N ==> i <= N;\nloop invariant i11: i <= N ==> i >= 0;\nloop invariant i12: i <= N ==> x <= 2;\nloop invariant i13: i <= N ==> x >= 1;\nloop invariant i14: 0 <= x <= 2;\nloop invariant i15: x <= 1 ==> 0 <= a <= 0;\nloop invariant i16: x >= 2 ==> 0 <= a <= 0;\nloop invariant i17: x <= 1 ==> a = 0;\nloop invariant i18: x >= 2 ==> a = 0;\nloop invariant i19: N <= 0 ==> i = 0;\nloop invariant i20: N > 0 ==> 0 <= i <= N;\nloop invariant i21: N <= 0 ==> a = 0;\nloop invariant i22: N > 0 ==> 0 <= a <= 0;\nloop invariant i23: 1 <= x <= 2;\nloop invariant i24: x == 1 ==> i == 0;\nloop invariant i25: x == 2 ==> i == 0;\nloop invariant i26: x == 1 ==> i == N ==> i == N;\nloop invariant i27: x == 2 ==> i == N ==> i == N;\nloop invariant i28: x == 1 ==> i < N ==> i < N;\nloop invariant i29: x == 2 ==> i < N ==> i < N;\nloop invariant i30: x == 1 ==> i < N ==> i < N ==> i < N;\nloop invariant i31: x == 2 ==> i < N ==> i < N ==> i < N;\nloop invariant i32: x == 1 ==> i < N ==> i < N ==> i < N ==> i < N;\nloop invariant i33: x == 2 ==> i < N ==> i < N ==> i < N ==> i < N;\nloop invariant i34: x == 1 ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N;\nloop invariant i35: x == 2 ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N;\nloop invariant i36: x == 1 ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N;\nloop invariant i37: x == 2 ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N;\nloop invariant i38: x == 1 ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N;\nloop invariant i39: x == 2 ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N;\nloop invariant i40: x == 1 ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N;\nloop invariant i41: x == 2 ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N;\nloop invariant i42: x == 1 ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N;\nloop invariant i43: x == 2 ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N;\nloop invariant i44: x == 1 ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N;\nloop invariant i45: x == 2 ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N;\nloop invariant i46: x == 1 ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N;\nloop invariant i47: x == 2 ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N;\nloop invariant i48: x == 1 ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N;\nloop invariant i49: x == 2 ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N;\nloop invariant i50: x == 1 ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N;\nloop invariant i51: x == 2 ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N;\nloop invariant i52: i <= x <= 2;\nloop invariant i53: x <= NONDET;\nloop invariant i54: x < 2 ==> i == N;\nloop invariant i55: x == 2 ==> i < N;\nloop invariant i56: i == 0 ==> x == 1;\nloop invariant i57: i > 0 ==> x == 2;\nloop invariant i58: i == N;\nloop invariant i59: (if x == 1 then 1 <= a <= x else 2 <= a <= x);\nloop invariant i60: x == 2 ==> i == N;\nloop invariant i61: x == 1 ==> i != N;\nloop invariant i62: x == 2 ==> i != 0;\nloop invariant i63: i < N;\nloop invariant i64: !(x > 2);\n*/\nwhile (i<N){\n    i=i+1;\n  }\n\n  {;\n//@ assert(!( x >2 ));\n}\n\nreturn;\n\n}",
        "combined_annotation_num_solver_calls": 9,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(){\n\n  int NONDET;\n  int i,N;\n  int a;\n  int x;\n\n  if (NONDET > 0) x=1; else x=2;\n\n  /*@\n\nloop invariant i2: x == 1 || x == 2;\nloop invariant i3: (NONDET > 0 && x == 1) || (NONDET <= 0 && x == 2);\n\n\nloop invariant i6: x <= 2;\nloop invariant i7: x >= 1;\nloop invariant i8: i <= N ==> x == 1 || x == 2;\nloop invariant i9: i <= N ==> (NONDET > 0 && x == 1) || (NONDET <= 0 && x == 2);\nloop invariant i10: i <= N ==> i <= N;\n\nloop invariant i12: i <= N ==> x <= 2;\nloop invariant i13: i <= N ==> x >= 1;\nloop invariant i14: 0 <= x <= 2;\n\n\n\n\n\n\n\n\nloop invariant i23: 1 <= x <= 2;\n\n\nloop invariant i26: x == 1 ==> i == N ==> i == N;\nloop invariant i27: x == 2 ==> i == N ==> i == N;\nloop invariant i28: x == 1 ==> i < N ==> i < N;\nloop invariant i29: x == 2 ==> i < N ==> i < N;\nloop invariant i30: x == 1 ==> i < N ==> i < N ==> i < N;\nloop invariant i31: x == 2 ==> i < N ==> i < N ==> i < N;\nloop invariant i32: x == 1 ==> i < N ==> i < N ==> i < N ==> i < N;\nloop invariant i33: x == 2 ==> i < N ==> i < N ==> i < N ==> i < N;\nloop invariant i34: x == 1 ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N;\nloop invariant i35: x == 2 ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N;\nloop invariant i36: x == 1 ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N;\nloop invariant i37: x == 2 ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N;\nloop invariant i38: x == 1 ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N;\nloop invariant i39: x == 2 ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N;\nloop invariant i40: x == 1 ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N;\nloop invariant i41: x == 2 ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N;\nloop invariant i42: x == 1 ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N;\nloop invariant i43: x == 2 ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N;\nloop invariant i44: x == 1 ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N;\nloop invariant i45: x == 2 ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N;\nloop invariant i46: x == 1 ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N;\nloop invariant i47: x == 2 ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N;\nloop invariant i48: x == 1 ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N;\nloop invariant i49: x == 2 ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N;\nloop invariant i50: x == 1 ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N;\nloop invariant i51: x == 2 ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N ==> i < N;\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i64: !(x > 2);\n*/\nwhile (i<N){\n    i=i+1;\n  }\n\n  {;\n//@ assert(!( x >2 ));\n}\n\nreturn;\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c"
        ],
        "skipped": [],
        "total": 20,
        "success_count": 19,
        "failure_count": 1,
        "success_rate": 0.95
    }
}