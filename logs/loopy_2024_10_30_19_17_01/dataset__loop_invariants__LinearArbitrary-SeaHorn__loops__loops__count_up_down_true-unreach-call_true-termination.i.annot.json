{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main()\n{\n  unsigned int n = unknown_uint();\n  unsigned int  x=n,  y=0;\n  while(x>0)\n  {\n    x--;\n    y++;\n  }\n  {;\n//@ assert(y==n);\n}\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= y <= n;\nloop invariant x = 0;\nloop invariant y = n;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x < y;\nloop invariant y - x = n;\nloop invariant x + y = n;\nloop invariant x >= y - n;\nloop invariant y >= x - n;\nloop invariant x <= y + n;\nloop invariant y <= x + n;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= y - n;\nloop invariant y >= x - n;\nloop invariant x <= y + n;\nloop invariant y <= x + n;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= y - n;\nloop invariant y >= x - n;\nloop invariant x <= y + n;\nloop invariant y <= x + n;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= y - n;\nloop invariant y >= x - n;\nloop invariant x <= y + n;\nloop invariant y <= x + n;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= y - n;\nloop invariant y >= x - n;\nloop invariant x <= y + n;\nloop invariant y <= x + n;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= y - n;\nloop invariant y >= x - n;\nloop invariant x <= y + n;\nloop invariant y <= x + n;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= y - n;\nloop invariant y >= x - n;\nloop invariant x <= y + n;\nloop invariant y <= x + n;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= y - n;\nloop invariant y >= x - n;\nloop invariant x <= y + n;\nloop invariant y <= x + n;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= y - n;\nloop invariant y >= x - n;\nloop invariant x <= y + n;\nloop invariant y <= x + n;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= y - n;\nloop invariant y >= x - n;\nloop invariant x <= y + n;\nloop invariant y <= x + n;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= y - n;\nloop invariant y >= x - n;\nloop invariant x <= y + n;\nloop invariant y <= x + n;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= y - n;\nloop invariant y >= x - n;\nloop invariant x <= y + n;\nloop invariant y <= x + n;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= y - n;\nloop invariant y >= x - n;\nloop invariant x <= y + n;\nloop invariant y <= x + n;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= y - n;\nloop invariant y >= x - n;\nloop invariant x <= y + n;\nloop invariant y <= x + n;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= y - n;\nloop invariant y >= x - n;\nloop invariant x <= y + n;\nloop invariant y <= x + n;\nloop invariant x >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= y <= n;\nloop invariant x == n - y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= n;\nloop invariant x == n - y;\nloop invariant n == x + y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y == x;\nloop invariant y * (y + 1) / 2 == n - x;\nloop invariant n >= 0;\nloop invariant n <= 4294967295;\n*/\n```",
            "```\n/*@\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y >= n - x;\nloop invariant y <= n;\nloop invariant x >= 0;\nloop invariant x < n;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y >= n - x;\nloop invariant x >= 0;\nloop invariant y <= n;\nloop invariant x >= 0;\nloop invariant x < n;\nloop invariant y >= 0;\nloop invariant y >= n - x;\nloop invariant x >= 0;\n*/\n```",
            "```\n/*@\nloop invariant x is always non-negative;\nloop invariant y is always non-negative;\nloop invariant x is always less than or equal to the initial value of n;\nloop invariant y is always less than or equal to the initial value of n;\nloop invariant x is always less than or equal to y;\nloop invariant x is always greater than or equal to the initial value of y;\n*/\n```",
            "```\n/*@\nloop invariant y >= 0;\nloop invariant x + y >= n;\nloop invariant y <= n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= n;\nloop invariant x == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x == n ==> x == 0;\nloop invariant x == n ==> y == n;\nloop invariant y == n;\nloop invariant 0 <= x <= n;\nloop invariant x == n ==> x == 0;\nloop invariant x == n ==> y == n;\nloop invariant y == n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= y <= n;\nloop invariant x + y >= n;\nloop invariant x + y <= 2*n;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n + 1;\nloop invariant x <= y;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant y <= x + 1;\nloop invariant y <= n + 1;\nloop invariant x + y >= x;\nloop invariant x + y >= y;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n + 1;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n + 1;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n + 1;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n + 1;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n + 1;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n + 1;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n + 1;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n + 1;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n + 1;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n + 1;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n + 1;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n + 1;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n + 1;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n + 1;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n + 1;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n + 1;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n + 1;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n + 1;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n + 1;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n + 1;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n + 1;\nloop invariant x + y >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 < x <= n;\nloop invariant y == n - x;\nloop invariant x <= n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant n <= y <= n;\nloop invariant x >= y;\nloop invariant n >= x >= 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= y;\nloop invariant y == n-x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x + y == n;\nloop invariant x == n - y;\nloop invariant x + y + 1 == n;\nloop invariant x + y + 2 == n + 1;\nloop invariant x + y + 3 == n + 2;\nloop invariant x + y + 4 == n + 3;\nloop invariant x + y + 5 == n + 4;\nloop invariant x + y + 6 == n + 5;\nloop invariant x + y + 7 == n + 6;\nloop invariant x + y + 8 == n + 7;\nloop invariant x + y + 9 == n + 8;\nloop invariant x + y + 10 == n + 9;\nloop invariant x + y + 11 == n + 10;\nloop invariant x + y + 12 == n + 11;\nloop invariant x + y + 13 == n + 12;\nloop invariant x + y + 14 == n + 13;\nloop invariant x + y + 15 == n + 14;\nloop invariant x + y + 16 == n + 15;\nloop invariant x + y + 17 == n + 16;\nloop invariant x + y + 18 == n + 17;\nloop invariant x + y + 19 == n + 18;\nloop invariant x + y + 20 == n + 19;\nloop invariant x + y + 21 == n + 20;\nloop invariant x + y + 22 == n + 21;\nloop invariant x + y + 23 == n + 22;\nloop invariant x + y + 24 == n + 23;\nloop invariant x + y + 25 == n + 24;\nloop invariant x + y + 26 == n + 25;\nloop invariant x + y + 27 == n + 26;\nloop invariant x + y + 28 == n + 27;\nloop invariant x + y + 29 == n + 28;\nloop invariant x + y + 30 == n + 29;\nloop invariant x + y + 31 == n + 30;\nloop invariant x + y + 32 == n + 31;\nloop invariant x + y + 33 == n + 32;\nloop invariant x + y + 34 == n + 33;\nloop invariant x + y + 35 == n + 34;\nloop invariant x + y + 36 == n + 35;\nloop invariant x + y + 37 == n + 36;\nloop invariant x + y + 38 == n + 37;\nloop invariant x + y + 39 == n + 38;\nloop invariant x + y + 40 == n + 39;\nloop invariant x + y + 41 == n + 40;\nloop invariant x + y + 42 == n + 41;\nloop invariant x + y + 43 == n + 42;\nloop invariant x + y + 44 == n + 43;\nloop invariant x + y + 45 == n + 44;\nloop invariant x + y + 46 == n + 45;\nloop invariant x + y + 47 == n + 46;\nloop invariant x + y + 48 == n + 47;\nloop invariant x + y + 49 == n + 48;\nloop invariant x + y + 50 == n + 49;\nloop invariant x + y + 51 == n + 50;\nloop invariant x + y + 52 == n + 51;\nloop invariant x + y + 53 == n + 52;\nloop invariant x + y + 54 == n + 53;\nloop invariant x + y + 55 == n + 54;\nloop invariant x + y + 56 == n + 55;\nloop invariant x + y + 57 == n + 56;\nloop invariant x + y + 58 == n + 57;\nloop invariant x + y + 59 == n + 58;\nloop invariant x + y + 60 == n + 59;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= n;\nloop invariant x >= 0;\nloop invariant x + y == n;\nloop invariant x <= n;\nloop invariant y <= n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n; loop invariant 0 <= y <= n; loop invariant x + y == n; loop invariant x >= 0; loop invariant y >= 0; loop invariant x <= n; loop invariant y <= n; loop invariant x == n - y; loop invariant y == n - x;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 10,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= n;\nloop invariant x = 0;\nloop invariant y = n;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x < y;\nloop invariant y - x = n;\nloop invariant x + y = n;\nloop invariant x >= y - n;\nloop invariant y >= x - n;\nloop invariant x <= y + n;\nloop invariant y <= x + n;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= y - n;\nloop invariant y >= x - n;\nloop invariant x <= y + n;\nloop invariant y <= x + n;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= y - n;\nloop invariant y >= x - n;\nloop invariant x <= y + n;\nloop invariant y <= x + n;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= y - n;\nloop invariant y >= x - n;\nloop invariant x <= y + n;\nloop invariant y <= x + n;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= y - n;\nloop invariant y >= x - n;\nloop invariant x <= y + n;\nloop invariant y <= x + n;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= y - n;\nloop invariant y >= x - n;\nloop invariant x <= y + n;\nloop invariant y <= x + n;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= y - n;\nloop invariant y >= x - n;\nloop invariant x <= y + n;\nloop invariant y <= x + n;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= y - n;\nloop invariant y >= x - n;\nloop invariant x <= y + n;\nloop invariant y <= x + n;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= y - n;\nloop invariant y >= x - n;\nloop invariant x <= y + n;\nloop invariant y <= x + n;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= y - n;\nloop invariant y >= x - n;\nloop invariant x <= y + n;\nloop invariant y <= x + n;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= y - n;\nloop invariant y >= x - n;\nloop invariant x <= y + n;\nloop invariant y <= x + n;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= y - n;\nloop invariant y >= x - n;\nloop invariant x <= y + n;\nloop invariant y <= x + n;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= y - n;\nloop invariant y >= x - n;\nloop invariant x <= y + n;\nloop invariant y <= x + n;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= y - n;\nloop invariant y >= x - n;\nloop invariant x <= y + n;\nloop invariant y <= x + n;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= y - n;\nloop invariant y >= x - n;\nloop invariant x <= y + n;\nloop invariant y <= x + n;\nloop invariant x >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main()\n{\n  unsigned int n = unknown_uint();\n  unsigned int  x=n,  y=0;\n  /*@\n\n\n\nloop invariant i4: x >= 0;\nloop invariant i5: y >= 0;\nloop invariant i6: x <= n;\n\n\n\n\n\nloop invariant i12: y >= x - n;\nloop invariant i13: x <= y + n;\n\n*/\nwhile(x>0)\n  {\n    x--;\n    y++;\n  }\n  {;\n//@ assert(y==n);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 1 <= y <= n;\nloop invariant x == n - y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main()\n{\n  unsigned int n = unknown_uint();\n  unsigned int  x=n,  y=0;\n  /*@\n\nloop invariant i2: x == n - y;\n*/\nwhile(x>0)\n  {\n    x--;\n    y++;\n  }\n  {;\n//@ assert(y==n);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= n;\nloop invariant x == n - y;\nloop invariant n == x + y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main()\n{\n  unsigned int n = unknown_uint();\n  unsigned int  x=n,  y=0;\n  /*@\nloop invariant i1: 0 <= y <= n;\nloop invariant i2: x == n - y;\nloop invariant i3: n == x + y;\n*/\nwhile(x>0)\n  {\n    x--;\n    y++;\n  }\n  {;\n//@ assert(y==n);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y == x;\nloop invariant y * (y + 1) / 2 == n - x;\nloop invariant n >= 0;\nloop invariant n <= 4294967295;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main()\n{\n  unsigned int n = unknown_uint();\n  unsigned int  x=n,  y=0;\n  /*@\nloop invariant i1: 0 <= x <= n;\nloop invariant i2: y >= 0;\n\n\n\nloop invariant i6: n >= 0;\nloop invariant i7: n <= 4294967295;\n*/\nwhile(x>0)\n  {\n    x--;\n    y++;\n  }\n  {;\n//@ assert(y==n);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y >= n - x;\nloop invariant y <= n;\nloop invariant x >= 0;\nloop invariant x < n;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y >= n - x;\nloop invariant x >= 0;\nloop invariant y <= n;\nloop invariant x >= 0;\nloop invariant x < n;\nloop invariant y >= 0;\nloop invariant y >= n - x;\nloop invariant x >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main()\n{\n  unsigned int n = unknown_uint();\n  unsigned int  x=n,  y=0;\n  /*@\nloop invariant i1: y >= 0;\nloop invariant i2: x >= 0;\n\n\n\n*/\nwhile(x>0)\n  {\n    x--;\n    y++;\n  }\n  {;\n//@ assert(y==n);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant x is always non-negative;\nloop invariant y is always non-negative;\nloop invariant x is always less than or equal to the initial value of n;\nloop invariant y is always less than or equal to the initial value of n;\nloop invariant x is always less than or equal to y;\nloop invariant x is always greater than or equal to the initial value of y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main()\n{\n  unsigned int n = unknown_uint();\n  unsigned int  x=n,  y=0;\n  /*@\n\n\n\n\n\n\n*/\nwhile(x>0)\n  {\n    x--;\n    y++;\n  }\n  {;\n//@ assert(y==n);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant y >= 0;\nloop invariant x + y >= n;\nloop invariant y <= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main()\n{\n  unsigned int n = unknown_uint();\n  unsigned int  x=n,  y=0;\n  /*@\nloop invariant i1: y >= 0;\n\n\n*/\nwhile(x>0)\n  {\n    x--;\n    y++;\n  }\n  {;\n//@ assert(y==n);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= n;\nloop invariant x == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main()\n{\n  unsigned int n = unknown_uint();\n  unsigned int  x=n,  y=0;\n  /*@\n\n\n*/\nwhile(x>0)\n  {\n    x--;\n    y++;\n  }\n  {;\n//@ assert(y==n);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x == n ==> x == 0;\nloop invariant x == n ==> y == n;\nloop invariant y == n;\nloop invariant 0 <= x <= n;\nloop invariant x == n ==> x == 0;\nloop invariant x == n ==> y == n;\nloop invariant y == n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main()\n{\n  unsigned int n = unknown_uint();\n  unsigned int  x=n,  y=0;\n  /*@\nloop invariant i1: 0 <= x <= n;\n\n\n\n*/\nwhile(x>0)\n  {\n    x--;\n    y++;\n  }\n  {;\n//@ assert(y==n);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= y <= n;\nloop invariant x + y >= n;\nloop invariant x + y <= 2*n;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n + 1;\nloop invariant x <= y;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant y <= x + 1;\nloop invariant y <= n + 1;\nloop invariant x + y >= x;\nloop invariant x + y >= y;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n + 1;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n + 1;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n + 1;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n + 1;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n + 1;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n + 1;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n + 1;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n + 1;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n + 1;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n + 1;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n + 1;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n + 1;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n + 1;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n + 1;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n + 1;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n + 1;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n + 1;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n + 1;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n + 1;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n + 1;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n + 1;\nloop invariant x + y >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main()\n{\n  unsigned int n = unknown_uint();\n  unsigned int  x=n,  y=0;\n  /*@\nloop invariant i1: 0 <= x <= n;\n\n\nloop invariant i4: x + y <= 2*n;\nloop invariant i5: x >= 0;\nloop invariant i6: y >= 0;\nloop invariant i7: x + y >= 0;\nloop invariant i8: x + y <= 2*n + 1;\n\nloop invariant i10: x <= n;\n\n\n\nloop invariant i14: x + y >= x;\nloop invariant i15: x + y >= y;\n*/\nwhile(x>0)\n  {\n    x--;\n    y++;\n  }\n  {;\n//@ assert(y==n);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 < x <= n;\nloop invariant y == n - x;\nloop invariant x <= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main()\n{\n  unsigned int n = unknown_uint();\n  unsigned int  x=n,  y=0;\n  /*@\n\nloop invariant i2: y == n - x;\nloop invariant i3: x <= n;\n*/\nwhile(x>0)\n  {\n    x--;\n    y++;\n  }\n  {;\n//@ assert(y==n);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant n <= y <= n;\nloop invariant x >= y;\nloop invariant n >= x >= 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main()\n{\n  unsigned int n = unknown_uint();\n  unsigned int  x=n,  y=0;\n  /*@\n\n\n\nloop invariant i4: n >= x >= 0;\nloop invariant i5: x >= 0;\nloop invariant i6: y >= 0;\n*/\nwhile(x>0)\n  {\n    x--;\n    y++;\n  }\n  {;\n//@ assert(y==n);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 60,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= y;\nloop invariant y == n-x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x + y == n;\nloop invariant x == n - y;\nloop invariant x + y + 1 == n;\nloop invariant x + y + 2 == n + 1;\nloop invariant x + y + 3 == n + 2;\nloop invariant x + y + 4 == n + 3;\nloop invariant x + y + 5 == n + 4;\nloop invariant x + y + 6 == n + 5;\nloop invariant x + y + 7 == n + 6;\nloop invariant x + y + 8 == n + 7;\nloop invariant x + y + 9 == n + 8;\nloop invariant x + y + 10 == n + 9;\nloop invariant x + y + 11 == n + 10;\nloop invariant x + y + 12 == n + 11;\nloop invariant x + y + 13 == n + 12;\nloop invariant x + y + 14 == n + 13;\nloop invariant x + y + 15 == n + 14;\nloop invariant x + y + 16 == n + 15;\nloop invariant x + y + 17 == n + 16;\nloop invariant x + y + 18 == n + 17;\nloop invariant x + y + 19 == n + 18;\nloop invariant x + y + 20 == n + 19;\nloop invariant x + y + 21 == n + 20;\nloop invariant x + y + 22 == n + 21;\nloop invariant x + y + 23 == n + 22;\nloop invariant x + y + 24 == n + 23;\nloop invariant x + y + 25 == n + 24;\nloop invariant x + y + 26 == n + 25;\nloop invariant x + y + 27 == n + 26;\nloop invariant x + y + 28 == n + 27;\nloop invariant x + y + 29 == n + 28;\nloop invariant x + y + 30 == n + 29;\nloop invariant x + y + 31 == n + 30;\nloop invariant x + y + 32 == n + 31;\nloop invariant x + y + 33 == n + 32;\nloop invariant x + y + 34 == n + 33;\nloop invariant x + y + 35 == n + 34;\nloop invariant x + y + 36 == n + 35;\nloop invariant x + y + 37 == n + 36;\nloop invariant x + y + 38 == n + 37;\nloop invariant x + y + 39 == n + 38;\nloop invariant x + y + 40 == n + 39;\nloop invariant x + y + 41 == n + 40;\nloop invariant x + y + 42 == n + 41;\nloop invariant x + y + 43 == n + 42;\nloop invariant x + y + 44 == n + 43;\nloop invariant x + y + 45 == n + 44;\nloop invariant x + y + 46 == n + 45;\nloop invariant x + y + 47 == n + 46;\nloop invariant x + y + 48 == n + 47;\nloop invariant x + y + 49 == n + 48;\nloop invariant x + y + 50 == n + 49;\nloop invariant x + y + 51 == n + 50;\nloop invariant x + y + 52 == n + 51;\nloop invariant x + y + 53 == n + 52;\nloop invariant x + y + 54 == n + 53;\nloop invariant x + y + 55 == n + 54;\nloop invariant x + y + 56 == n + 55;\nloop invariant x + y + 57 == n + 56;\nloop invariant x + y + 58 == n + 57;\nloop invariant x + y + 59 == n + 58;\nloop invariant x + y + 60 == n + 59;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main()\n{\n  unsigned int n = unknown_uint();\n  unsigned int  x=n,  y=0;\n  /*@\nloop invariant i1: 0 <= x <= n;\nloop invariant i2: 0 <= y;\nloop invariant i3: y == n-x;\nloop invariant i4: x >= 0;\nloop invariant i5: y >= 0;\nloop invariant i6: x + y == n;\nloop invariant i7: x == n - y;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile(x>0)\n  {\n    x--;\n    y++;\n  }\n  {;\n//@ assert(y==n);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= n;\nloop invariant x >= 0;\nloop invariant x + y == n;\nloop invariant x <= n;\nloop invariant y <= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main()\n{\n  unsigned int n = unknown_uint();\n  unsigned int  x=n,  y=0;\n  /*@\nloop invariant i1: 0 <= y <= n;\nloop invariant i2: x >= 0;\nloop invariant i3: x + y == n;\nloop invariant i4: x <= n;\nloop invariant i5: y <= n;\n*/\nwhile(x>0)\n  {\n    x--;\n    y++;\n  }\n  {;\n//@ assert(y==n);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n; loop invariant 0 <= y <= n; loop invariant x + y == n; loop invariant x >= 0; loop invariant y >= 0; loop invariant x <= n; loop invariant y <= n; loop invariant x == n - y; loop invariant y == n - x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main()\n{\n  unsigned int n = unknown_uint();\n  unsigned int  x=n,  y=0;\n  /*@\nloop invariant i1: 0 <= x <= n; loop invariant 0 <= y <= n; loop invariant x + y == n; loop invariant x >= 0; loop invariant y >= 0; loop invariant x <= n; loop invariant y <= n; loop invariant x == n - y; loop invariant y == n - x;\n*/\nwhile(x>0)\n  {\n    x--;\n    y++;\n  }\n  {;\n//@ assert(y==n);\n}\n\n}",
                "checker_output_after_prune": true
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 15: Assignment operators not allowed in annotations.",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main()\n{\n  unsigned int n = unknown_uint();\n  unsigned int  x=n,  y=0;\n  /*@\nloop invariant i1: 0 <= y <= n;\nloop invariant i2: x = 0;\nloop invariant i3: y = n;\nloop invariant i4: x >= 0;\nloop invariant i5: y >= 0;\nloop invariant i6: x <= n;\nloop invariant i7: y <= n;\nloop invariant i8: x < y;\nloop invariant i9: y - x = n;\nloop invariant i10: x + y = n;\nloop invariant i11: x >= y - n;\nloop invariant i12: y >= x - n;\nloop invariant i13: x <= y + n;\nloop invariant i14: y <= x + n;\nloop invariant i15: 1 <= y <= n;\nloop invariant i16: x == n - y;\nloop invariant i17: n == x + y;\nloop invariant i18: 0 <= x <= n;\nloop invariant i19: y == x;\nloop invariant i20: y * (y + 1) / 2 == n - x;\nloop invariant i21: n >= 0;\nloop invariant i22: n <= 4294967295;\nloop invariant i23: y >= n - x;\nloop invariant i24: x < n;\nloop invariant i25: x is always non-negative;\nloop invariant i26: y is always non-negative;\nloop invariant i27: x is always less than or equal to the initial value of n;\nloop invariant i28: y is always less than or equal to the initial value of n;\nloop invariant i29: x is always less than or equal to y;\nloop invariant i30: x is always greater than or equal to the initial value of y;\nloop invariant i31: x + y >= n;\nloop invariant i32: x == 0;\nloop invariant i33: x == n ==> x == 0;\nloop invariant i34: x == n ==> y == n;\nloop invariant i35: y == n;\nloop invariant i36: x + y <= 2*n;\nloop invariant i37: x + y >= 0;\nloop invariant i38: x + y <= 2*n + 1;\nloop invariant i39: x <= y;\nloop invariant i40: y <= x + 1;\nloop invariant i41: y <= n + 1;\nloop invariant i42: x + y >= x;\nloop invariant i43: x + y >= y;\nloop invariant i44: 0 < x <= n;\nloop invariant i45: y == n - x;\nloop invariant i46: 0 <= x <= y;\nloop invariant i47: n <= y <= n;\nloop invariant i48: x >= y;\nloop invariant i49: n >= x >= 0;\nloop invariant i50: 0 <= y;\nloop invariant i51: y == n-x;\nloop invariant i52: x + y == n;\nloop invariant i53: x + y + 1 == n;\nloop invariant i54: x + y + 2 == n + 1;\nloop invariant i55: x + y + 3 == n + 2;\nloop invariant i56: x + y + 4 == n + 3;\nloop invariant i57: x + y + 5 == n + 4;\nloop invariant i58: x + y + 6 == n + 5;\nloop invariant i59: x + y + 7 == n + 6;\nloop invariant i60: x + y + 8 == n + 7;\nloop invariant i61: x + y + 9 == n + 8;\nloop invariant i62: x + y + 10 == n + 9;\nloop invariant i63: x + y + 11 == n + 10;\nloop invariant i64: x + y + 12 == n + 11;\nloop invariant i65: x + y + 13 == n + 12;\nloop invariant i66: x + y + 14 == n + 13;\nloop invariant i67: x + y + 15 == n + 14;\nloop invariant i68: x + y + 16 == n + 15;\nloop invariant i69: x + y + 17 == n + 16;\nloop invariant i70: x + y + 18 == n + 17;\nloop invariant i71: x + y + 19 == n + 18;\nloop invariant i72: x + y + 20 == n + 19;\nloop invariant i73: x + y + 21 == n + 20;\nloop invariant i74: x + y + 22 == n + 21;\nloop invariant i75: x + y + 23 == n + 22;\nloop invariant i76: x + y + 24 == n + 23;\nloop invariant i77: x + y + 25 == n + 24;\nloop invariant i78: x + y + 26 == n + 25;\nloop invariant i79: x + y + 27 == n + 26;\nloop invariant i80: x + y + 28 == n + 27;\nloop invariant i81: x + y + 29 == n + 28;\nloop invariant i82: x + y + 30 == n + 29;\nloop invariant i83: x + y + 31 == n + 30;\nloop invariant i84: x + y + 32 == n + 31;\nloop invariant i85: x + y + 33 == n + 32;\nloop invariant i86: x + y + 34 == n + 33;\nloop invariant i87: x + y + 35 == n + 34;\nloop invariant i88: x + y + 36 == n + 35;\nloop invariant i89: x + y + 37 == n + 36;\nloop invariant i90: x + y + 38 == n + 37;\nloop invariant i91: x + y + 39 == n + 38;\nloop invariant i92: x + y + 40 == n + 39;\nloop invariant i93: x + y + 41 == n + 40;\nloop invariant i94: x + y + 42 == n + 41;\nloop invariant i95: x + y + 43 == n + 42;\nloop invariant i96: x + y + 44 == n + 43;\nloop invariant i97: x + y + 45 == n + 44;\nloop invariant i98: x + y + 46 == n + 45;\nloop invariant i99: x + y + 47 == n + 46;\nloop invariant i100: x + y + 48 == n + 47;\nloop invariant i101: x + y + 49 == n + 48;\nloop invariant i102: x + y + 50 == n + 49;\nloop invariant i103: x + y + 51 == n + 50;\nloop invariant i104: x + y + 52 == n + 51;\nloop invariant i105: x + y + 53 == n + 52;\nloop invariant i106: x + y + 54 == n + 53;\nloop invariant i107: x + y + 55 == n + 54;\nloop invariant i108: x + y + 56 == n + 55;\nloop invariant i109: x + y + 57 == n + 56;\nloop invariant i110: x + y + 58 == n + 57;\nloop invariant i111: x + y + 59 == n + 58;\nloop invariant i112: x + y + 60 == n + 59;\nloop invariant i113: 0 <= x <= n; loop invariant 0 <= y <= n; loop invariant x + y == n; loop invariant x >= 0; loop invariant y >= 0; loop invariant x <= n; loop invariant y <= n; loop invariant x == n - y; loop invariant y == n - x;\n*/\nwhile(x>0)\n  {\n    x--;\n    y++;\n  }\n  {;\n//@ assert(y==n);\n}\n\n}",
        "combined_annotation_num_solver_calls": 77,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main()\n{\n  unsigned int n = unknown_uint();\n  unsigned int  x=n,  y=0;\n  /*@\nloop invariant i1: 0 <= y <= n;\n\n\nloop invariant i4: x >= 0;\nloop invariant i5: y >= 0;\nloop invariant i6: x <= n;\nloop invariant i7: y <= n;\n\n\n\nloop invariant i11: x >= y - n;\nloop invariant i12: y >= x - n;\nloop invariant i13: x <= y + n;\nloop invariant i14: y <= x + n;\n\nloop invariant i16: x == n - y;\nloop invariant i17: n == x + y;\nloop invariant i18: 0 <= x <= n;\n\n\nloop invariant i21: n >= 0;\nloop invariant i22: n <= 4294967295;\nloop invariant i23: y >= n - x;\n\n\n\n\n\n\n\nloop invariant i31: x + y >= n;\n\n\n\n\nloop invariant i36: x + y <= 2*n;\nloop invariant i37: x + y >= 0;\nloop invariant i38: x + y <= 2*n + 1;\n\n\nloop invariant i41: y <= n + 1;\nloop invariant i42: x + y >= x;\nloop invariant i43: x + y >= y;\n\nloop invariant i45: y == n - x;\n\n\n\nloop invariant i49: n >= x >= 0;\nloop invariant i50: 0 <= y;\nloop invariant i51: y == n-x;\nloop invariant i52: x + y == n;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i113: 0 <= x <= n; loop invariant 0 <= y <= n; loop invariant x + y == n; loop invariant x >= 0; loop invariant y >= 0; loop invariant x <= n; loop invariant y <= n; loop invariant x == n - y; loop invariant y == n - x;\n*/\nwhile(x>0)\n  {\n    x--;\n    y++;\n  }\n  {;\n//@ assert(y==n);\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/split.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c"
        ],
        "skipped": [],
        "total": 60,
        "success_count": 50,
        "failure_count": 10,
        "success_rate": 0.8333333333333334
    }
}