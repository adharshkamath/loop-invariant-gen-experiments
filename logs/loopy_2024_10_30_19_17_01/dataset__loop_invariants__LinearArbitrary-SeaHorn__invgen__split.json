{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/split.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int k = 100;\n  int b = 0;\n  int i;\n  int j;\n  int n;\n  i = j = 0;\n  for( n = 0 ; n < 2*k ; n++ ) {\n    \n    if(b) {\n      i++;\n    } else {\n      j++;\n    }\n    b = !b;\n  }\n  {;\n//@ assert(i == j);\n}\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= n <= 2*k;\nloop invariant (n % 2 == 0) ==> i == j;\nloop invariant (n % 2 != 0) ==> i == j;\nloop invariant (n % 2 == 0) ==> i == j;\nloop invariant (n % 2 != 0) ==> i == j;\nloop invariant (n % 2 == 0) ==> i == j;\nloop invariant (n % 2 != 0) ==> i == j;\nloop invariant (n % 2 == 0) ==> i == j;\nloop invariant (n % 2 != 0) ==> i == j;\nloop invariant (n % 2 == 0) ==> i == j;\nloop invariant (n % 2 != 0) ==> i == j;\nloop invariant (n % 2 == 0) ==> i == j;\nloop invariant (n % 2 != 0) ==> i == j;\nloop invariant (n % 2 == 0) ==> i == j;\nloop invariant (n % 2 != 0) ==> i == j;\nloop invariant (n % 2 == 0) ==> i == j;\nloop invariant (n % 2 != 0) ==> i == j;\nloop invariant (n % 2 == 0) ==> i == j;\nloop invariant (n % 2 != 0) ==> i == j;\nloop invariant (n % 2 == 0) ==> i == j;\nloop invariant (n % 2 != 0) ==> i == j;\nloop invariant (n % 2 == 0) ==> i == j;\nloop invariant (n % 2 != 0) ==> i == j;\nloop invariant (n % 2 == 0) ==> i == j;\nloop invariant (n % 2 != 0) ==> i == j;\nloop invariant (n % 2 == 0) ==> i == j;\nloop invariant (n % 2 != 0) ==> i == j;\nloop invariant (n % 2 == 0) ==> i == j;\nloop invariant (n % 2 != 0) ==> i == j;\nloop invariant (n % 2 == 0) ==> i == j;\nloop invariant (n % 2 != 0) ==> i == j;\nloop invariant (n % 2 == 0) ==> i == j;\nloop invariant (n % 2 != 0) ==> i == j;\nloop invariant (n % 2 == 0) ==> i == j;\nloop invariant (n % 2 != 0) ==> i == j;\nloop invariant (n % 2 == 0) ==> i == j;\nloop invariant (n % 2 != 0) ==> i == j;\nloop invariant (n % 2 == 0) ==> i == j;\nloop invariant (n % 2 != 0) ==> i == j;\nloop invariant (n % 2 == 0) ==> i == j;\nloop invariant (n % 2 != 0) ==> i == j;\nloop invariant (n % 2 == 0) ==> i == j;\nloop invariant (n % 2 != 0) ==> i == j;\nloop invariant (n % 2 == 0) ==> i == j;\nloop invariant (n % 2 != 0) ==> i == j;\nloop invariant (n % 2 == 0) ==> i == j;\nloop invariant (n % 2 != 0) ==> i == j;\nloop invariant (n % 2 == 0) ==> i == j;\nloop invariant (n % 2 != 0) ==> i == j;\nloop invariant (n % 2 == 0) ==> i == j;\nloop invariant (n % 2 != 0) ==> i == j;\nloop invariant (n % 2 == 0) ==> i == j;\nloop invariant (n % 2 != 0) ==> i == j;\nloop invariant (n % 2 == 0) ==> i == j;\nloop invariant (n % 2 != 0) ==> i == j;\nloop invariant (n % 2 == 0) ==> i == j;\nloop invariant (n % 2 != 0) ==> i == j;\nloop invariant (n % 2 == 0) ==> i == j;\nloop invariant (n % 2 != 0) ==> i == j;\nloop invariant (n % 2 == 0) ==> i == j;\nloop invariant (n % 2 != 0) ==> i == j;\nloop invariant (n % 2 == 0) ==> i == j;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i + j <= 2*k;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant b == (n % 2 == 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= j <= n;\nloop invariant i + j == n;\nloop invariant i == j ==> b == 1;\nloop invariant i != j ==> b == 0;\nloop invariant i + j == n ==> i + j <= 2*k;\nloop invariant i + j == n ==> i + j >= 0;\nloop invariant i + j == n ==> i >= 0;\nloop invariant i + j == n ==> j >= 0;\nloop invariant i + j == n ==> i <= n;\nloop invariant i + j == n ==> j <= n;\nloop invariant i + j == n ==> i + j == 2*k;\nloop invariant i + j == n ==> i + j == 0;\nloop invariant i + j == n ==> i + j == 2*k;\nloop invariant i + j == n ==> i + j == 0;\nloop invariant i + j == n ==> i + j == 2*k;\nloop invariant i + j == n ==> i + j == 0;\nloop invariant i + j == n ==> i + j == 2*k;\nloop invariant i + j == n ==> i + j == 0;\nloop invariant i + j == n ==> i + j == 2*k;\nloop invariant i + j == n ==> i + j == 0;\nloop invariant i + j == n ==> i + j == 2*k;\nloop invariant i + j == n ==> i + j == 0;\nloop invariant i + j == n ==> i + j == 2*k;\nloop invariant i + j == n ==> i + j == 0;\nloop invariant i + j == n ==> i + j == 2*k;\nloop invariant i + j == n ==> i + j == 0;\nloop invariant i + j == n ==> i + j == 2*k;\nloop invariant i + j == n ==> i + j == 0;\nloop invariant i + j == n ==> i + j == 2*k;\nloop invariant i + j == n ==> i + j == 0;\nloop invariant i + j == n ==> i + j == 2*k;\nloop invariant i + j == n ==> i + j == 0;\nloop invariant i + j == n ==> i + j == 2*k;\nloop invariant i + j == n ==> i + j == 0;\nloop invariant i + j == n ==> i + j == 2*k;\nloop invariant i + j == n ==> i + j == 0;\nloop invariant i + j == n ==> i + j == 2*k;\nloop invariant i + j == n ==> i + j == 0;\nloop invariant i + j == n ==> i + j == 2*k;\nloop invariant i + j == n ==> i + j == 0;\nloop invariant i + j == n ==> i + j == 2*k;\nloop invariant i + j == n ==> i + j == 0;\nloop invariant i + j == n ==> i + j == 2*k;\nloop invariant i + j == n ==> i + j == 0;\nloop invariant i + j == n ==> i + j == 2*k;\nloop invariant i + j == n ==> i + j == 0;\nloop invariant i + j == n ==> i + j == 2*k;\nloop invariant i + j == n ==> i + j == 0;\nloop invariant i + j == n ==> i + j == 2*k;\nloop invariant i + j == n ==> i + j == 0;\nloop invariant i + j == n ==> i + j == 2*k;\nloop invariant i + j == n ==> i + j == 0;\nloop invariant i + j == n ==> i + j == 2*k;\nloop invariant i + j == n ==> i + j == 0;\nloop invariant i + j == n ==> i + j == 2*k;\nloop invariant i + j == n ==> i + j == 0;\nloop invariant i + j == n ==> i + j == 2*k;\nloop invariant i + j == n ==> i + j == 0;\nloop invariant i + j == n ==> i + j == 2*k;\nloop invariant i + j == n ==> i + j == 0;\nloop invariant i + j == n ==> i + j == 2*k;\nloop invariant i + j == n ==> i + j == 0;\nloop invariant i + j == n ==> i + j == 2*k;\nloop invariant i + j == n ==> i + j == 0;\nloop invariant i + j == n ==> i + j == 2*k;\nloop invariant i + j == n ==> i + j == 0;\n*/\n```",
            "```\n/*@\nloop invariant i == n / 2;\nloop invariant j == n / 2;\nloop invariant i + j == n;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant n >= 0;\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= n <= 2*k;\nloop invariant k >= j;\nloop invariant k <= i;\nloop invariant i + j == n;\nloop invariant b + 1 == n % 2;\nloop invariant b == (n % 2 == 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i < k;\nloop invariant 0 <= j < k;\nloop invariant i + j = n;\nloop invariant i + j <= 2*k;\nloop invariant i == j ==> n % 2 == 0;\nloop invariant i != j ==> n % 2 == 1;\nloop invariant i + j == n ==> (i == j);\nloop invariant i + j == n ==> (i != j);\nloop invariant i + j == n ==> (i + j <= 2*k);\nloop invariant i + j == n ==> (i + j >= 2*k);\nloop invariant i + j == n ==> (i + j == 2*k);\nloop invariant i + j == n ==> (i + j == 0);\nloop invariant i + j == n ==> (i + j == 1);\nloop invariant i + j == n ==> (i + j == 2);\nloop invariant i + j == n ==> (i + j == 3);\nloop invariant i + j == n ==> (i + j == 4);\nloop invariant i + j == n ==> (i + j == 5);\nloop invariant i + j == n ==> (i + j == 6);\nloop invariant i + j == n ==> (i + j == 7);\nloop invariant i + j == n ==> (i + j == 8);\nloop invariant i + j == n ==> (i + j == 9);\nloop invariant i + j == n ==> (i + j == 10);\nloop invariant i + j == n ==> (i + j == 11);\nloop invariant i + j == n ==> (i + j == 12);\nloop invariant i + j == n ==> (i + j == 13);\nloop invariant i + j == n ==> (i + j == 14);\nloop invariant i + j == n ==> (i + j == 15);\nloop invariant i + j == n ==> (i + j == 16);\nloop invariant i + j == n ==> (i + j == 17);\nloop invariant i + j == n ==> (i + j == 18);\nloop invariant i + j == n ==> (i + j == 19);\nloop invariant i + j == n ==> (i + j == 20);\nloop invariant i + j == n ==> (i + j == 21);\nloop invariant i + j == n ==> (i + j == 22);\nloop invariant i + j == n ==> (i + j == 23);\nloop invariant i + j == n ==> (i + j == 24);\nloop invariant i + j == n ==> (i + j == 25);\nloop invariant i + j == n ==> (i + j == 26);\nloop invariant i + j == n ==> (i + j == 27);\nloop invariant i + j == n ==> (i + j == 28);\nloop invariant i + j == n ==> (i + j == 29);\nloop invariant i + j == n ==> (i + j == 30);\nloop invariant i + j == n ==> (i + j == 31);\nloop invariant i + j == n ==> (i + j == 32);\nloop invariant i + j == n ==> (i + j == 33);\nloop invariant i + j == n ==> (i + j == 34);\nloop invariant i + j == n ==> (i + j == 35);\nloop invariant i + j == n ==> (i + j == 36);\nloop invariant i + j == n ==> (i + j == 37);\nloop invariant i + j == n ==> (i + j == 38);\nloop invariant i + j == n ==> (i + j == 39);\nloop invariant i + j == n ==> (i + j == 40);\nloop invariant i + j == n ==> (i + j == 41);\nloop invariant i + j == n ==> (i + j == 42);\nloop invariant i + j == n ==> (i + j == 43);\nloop invariant i + j == n ==> (i + j == 44);\nloop invariant i + j == n ==> (i + j == 45);\nloop invariant i + j == n ==> (i + j == 46);\nloop invariant i + j == n ==> (i + j == 47);\nloop invariant i + j == n ==> (i + j == 48);\nloop invariant i + j == n ==> (i + j == 49);\nloop invariant i + j == n ==> (i + j == 50);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= k <= 100;\nloop invariant 0 <= b <= 1;\nloop invariant 0 <= i <= 100;\nloop invariant 0 <= j <= 100;\nloop invariant 0 <= n <= 200;\nloop invariant i + j >= 0;\nloop invariant i + j <= 200;\nloop invariant n % 2 == b;\nloop invariant n == 2 * i + 2 * j;\nloop invariant i == j;\nloop invariant i % 2 == b;\nloop invariant j % 2 == !b;\nloop invariant i + j == k;\nloop invariant i == j == k / 2;\nloop invariant (i % 2 == 0) ==> (i == j);\nloop invariant (i % 2 == 1) ==> (i == j + 1);\nloop invariant (j % 2 == 0) ==> (j == i);\nloop invariant (j % 2 == 1) ==> (j == i + 1);\nloop invariant (n % 2 == 0) ==> (i == j);\nloop invariant (n % 2 == 1) ==> (i == j + 1);\nloop invariant (n % 2 == 0) ==> (j == i);\nloop invariant (n % 2 == 1) ==> (j == i + 1);\nloop invariant (i % 2 == 0) ==> (j % 2 == 0);\nloop invariant (i % 2 == 1) ==> (j % 2 == 1);\nloop invariant (j % 2 == 0) ==> (i % 2 == 0);\nloop invariant (j % 2 == 1) ==> (i % 2 == 1);\nloop invariant (i + j == k) ==> (i == j == k / 2);\nloop invariant (i + j == k) ==> (i % 2 == 0);\nloop invariant (i + j == k) ==> (j % 2 == 0);\nloop invariant (i + j == k) ==> (i == j + 1);\nloop invariant (i + j == k) ==> (j == i + 1);\nloop invariant (i + j == k) ==> (i % 2 == 1);\nloop invariant (i + j == k) ==> (j % 2 == 1);\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= k;\nloop invariant 0 <= j <= k;\nloop invariant i + j == 2 * k;\nloop invariant i == j ==> b;\nloop invariant b ==> i == j;\nloop invariant b == (n % 2) == 0;\nloop invariant !b == (n % 2) == 1;\n*/\n```",
            "```\n/*@\nloop invariant i <= n <= 2*k;\nloop invariant j <= n <= 2*k;\nloop invariant i + j >= n;\nloop invariant i + j <= 2*k;\nloop invariant j - i == n - 2*i;\nloop invariant i - j == 2*k - n - 2*j;\nloop invariant b ==> n % 2 == 0;\nloop invariant !b ==> n % 2 == 1;\nloop invariant i + j == n + 2*k;\nloop invariant i + j == 2*k - n;\nloop invariant b ==> i <= k;\nloop invariant !b ==> i > k;\nloop invariant j <= k;\nloop invariant j > k;\nloop invariant b ==> j == k;\nloop invariant !b ==> j == k;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= k;\nloop invariant 0 <= j <= k;\nloop invariant i + j == n;\nloop invariant n <= 2*k;\nloop invariant i + j + n == 2*k;\nloop invariant i == j;\nloop invariant i + j == k;\nloop invariant i + j + n == 2*k;\nloop invariant i + j + n == 2*k;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= n <= 2 * k;\nloop invariant 0 <= i <= k;\nloop invariant i <= j <= k;\nloop invariant (i + j) == k;\nloop invariant (i == j) ==> (i == j);\nloop invariant (n == 2 * k) ==> (i == j);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= k;\nloop invariant 0 <= j <= k;\nloop invariant i + j == n;\nloop invariant i + j == 2 * k;\nloop invariant b == 1 - (i % 2);\nloop invariant b == 1 - (j % 2);\nloop invariant i <= j + 1;\nloop invariant j <= i + 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= n <= 2*k;\nloop invariant (b ==> i == j);\nloop invariant (b ==> i <= j);\nloop invariant (b ==> i >= j - 1);\nloop invariant (!b ==> i == j);\nloop invariant (!b ==> i <= j);\nloop invariant (!b ==> i >= j - 1);\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= n <= 2*k;\nloop invariant (n % 2 == 0) ==> i == j;\nloop invariant (n % 2 != 0) ==> i == j;\nloop invariant (n % 2 == 0) ==> i == j;\nloop invariant (n % 2 != 0) ==> i == j;\nloop invariant (n % 2 == 0) ==> i == j;\nloop invariant (n % 2 != 0) ==> i == j;\nloop invariant (n % 2 == 0) ==> i == j;\nloop invariant (n % 2 != 0) ==> i == j;\nloop invariant (n % 2 == 0) ==> i == j;\nloop invariant (n % 2 != 0) ==> i == j;\nloop invariant (n % 2 == 0) ==> i == j;\nloop invariant (n % 2 != 0) ==> i == j;\nloop invariant (n % 2 == 0) ==> i == j;\nloop invariant (n % 2 != 0) ==> i == j;\nloop invariant (n % 2 == 0) ==> i == j;\nloop invariant (n % 2 != 0) ==> i == j;\nloop invariant (n % 2 == 0) ==> i == j;\nloop invariant (n % 2 != 0) ==> i == j;\nloop invariant (n % 2 == 0) ==> i == j;\nloop invariant (n % 2 != 0) ==> i == j;\nloop invariant (n % 2 == 0) ==> i == j;\nloop invariant (n % 2 != 0) ==> i == j;\nloop invariant (n % 2 == 0) ==> i == j;\nloop invariant (n % 2 != 0) ==> i == j;\nloop invariant (n % 2 == 0) ==> i == j;\nloop invariant (n % 2 != 0) ==> i == j;\nloop invariant (n % 2 == 0) ==> i == j;\nloop invariant (n % 2 != 0) ==> i == j;\nloop invariant (n % 2 == 0) ==> i == j;\nloop invariant (n % 2 != 0) ==> i == j;\nloop invariant (n % 2 == 0) ==> i == j;\nloop invariant (n % 2 != 0) ==> i == j;\nloop invariant (n % 2 == 0) ==> i == j;\nloop invariant (n % 2 != 0) ==> i == j;\nloop invariant (n % 2 == 0) ==> i == j;\nloop invariant (n % 2 != 0) ==> i == j;\nloop invariant (n % 2 == 0) ==> i == j;\nloop invariant (n % 2 != 0) ==> i == j;\nloop invariant (n % 2 == 0) ==> i == j;\nloop invariant (n % 2 != 0) ==> i == j;\nloop invariant (n % 2 == 0) ==> i == j;\nloop invariant (n % 2 != 0) ==> i == j;\nloop invariant (n % 2 == 0) ==> i == j;\nloop invariant (n % 2 != 0) ==> i == j;\nloop invariant (n % 2 == 0) ==> i == j;\nloop invariant (n % 2 != 0) ==> i == j;\nloop invariant (n % 2 == 0) ==> i == j;\nloop invariant (n % 2 != 0) ==> i == j;\nloop invariant (n % 2 == 0) ==> i == j;\nloop invariant (n % 2 != 0) ==> i == j;\nloop invariant (n % 2 == 0) ==> i == j;\nloop invariant (n % 2 != 0) ==> i == j;\nloop invariant (n % 2 == 0) ==> i == j;\nloop invariant (n % 2 != 0) ==> i == j;\nloop invariant (n % 2 == 0) ==> i == j;\nloop invariant (n % 2 != 0) ==> i == j;\nloop invariant (n % 2 == 0) ==> i == j;\nloop invariant (n % 2 != 0) ==> i == j;\nloop invariant (n % 2 == 0) ==> i == j;\nloop invariant (n % 2 != 0) ==> i == j;\nloop invariant (n % 2 == 0) ==> i == j;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int k = 100;\n  int b = 0;\n  int i;\n  int j;\n  int n;\n  i = j = 0;\n  /*@\nloop invariant i1: 0 <= n <= 2*k;\n\n\n*/\nfor( n = 0 ; n < 2*k ; n++ ) {\n    \n    if(b) {\n      i++;\n    } else {\n      j++;\n    }\n    b = !b;\n  }\n  {;\n//@ assert(i == j);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i + j <= 2*k;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant b == (n % 2 == 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int k = 100;\n  int b = 0;\n  int i;\n  int j;\n  int n;\n  i = j = 0;\n  /*@\n\nloop invariant i2: i >= 0;\nloop invariant i3: j >= 0;\n\n*/\nfor( n = 0 ; n < 2*k ; n++ ) {\n    \n    if(b) {\n      i++;\n    } else {\n      j++;\n    }\n    b = !b;\n  }\n  {;\n//@ assert(i == j);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= j <= n;\nloop invariant i + j == n;\nloop invariant i == j ==> b == 1;\nloop invariant i != j ==> b == 0;\nloop invariant i + j == n ==> i + j <= 2*k;\nloop invariant i + j == n ==> i + j >= 0;\nloop invariant i + j == n ==> i >= 0;\nloop invariant i + j == n ==> j >= 0;\nloop invariant i + j == n ==> i <= n;\nloop invariant i + j == n ==> j <= n;\nloop invariant i + j == n ==> i + j == 2*k;\nloop invariant i + j == n ==> i + j == 0;\nloop invariant i + j == n ==> i + j == 2*k;\nloop invariant i + j == n ==> i + j == 0;\nloop invariant i + j == n ==> i + j == 2*k;\nloop invariant i + j == n ==> i + j == 0;\nloop invariant i + j == n ==> i + j == 2*k;\nloop invariant i + j == n ==> i + j == 0;\nloop invariant i + j == n ==> i + j == 2*k;\nloop invariant i + j == n ==> i + j == 0;\nloop invariant i + j == n ==> i + j == 2*k;\nloop invariant i + j == n ==> i + j == 0;\nloop invariant i + j == n ==> i + j == 2*k;\nloop invariant i + j == n ==> i + j == 0;\nloop invariant i + j == n ==> i + j == 2*k;\nloop invariant i + j == n ==> i + j == 0;\nloop invariant i + j == n ==> i + j == 2*k;\nloop invariant i + j == n ==> i + j == 0;\nloop invariant i + j == n ==> i + j == 2*k;\nloop invariant i + j == n ==> i + j == 0;\nloop invariant i + j == n ==> i + j == 2*k;\nloop invariant i + j == n ==> i + j == 0;\nloop invariant i + j == n ==> i + j == 2*k;\nloop invariant i + j == n ==> i + j == 0;\nloop invariant i + j == n ==> i + j == 2*k;\nloop invariant i + j == n ==> i + j == 0;\nloop invariant i + j == n ==> i + j == 2*k;\nloop invariant i + j == n ==> i + j == 0;\nloop invariant i + j == n ==> i + j == 2*k;\nloop invariant i + j == n ==> i + j == 0;\nloop invariant i + j == n ==> i + j == 2*k;\nloop invariant i + j == n ==> i + j == 0;\nloop invariant i + j == n ==> i + j == 2*k;\nloop invariant i + j == n ==> i + j == 0;\nloop invariant i + j == n ==> i + j == 2*k;\nloop invariant i + j == n ==> i + j == 0;\nloop invariant i + j == n ==> i + j == 2*k;\nloop invariant i + j == n ==> i + j == 0;\nloop invariant i + j == n ==> i + j == 2*k;\nloop invariant i + j == n ==> i + j == 0;\nloop invariant i + j == n ==> i + j == 2*k;\nloop invariant i + j == n ==> i + j == 0;\nloop invariant i + j == n ==> i + j == 2*k;\nloop invariant i + j == n ==> i + j == 0;\nloop invariant i + j == n ==> i + j == 2*k;\nloop invariant i + j == n ==> i + j == 0;\nloop invariant i + j == n ==> i + j == 2*k;\nloop invariant i + j == n ==> i + j == 0;\nloop invariant i + j == n ==> i + j == 2*k;\nloop invariant i + j == n ==> i + j == 0;\nloop invariant i + j == n ==> i + j == 2*k;\nloop invariant i + j == n ==> i + j == 0;\nloop invariant i + j == n ==> i + j == 2*k;\nloop invariant i + j == n ==> i + j == 0;\nloop invariant i + j == n ==> i + j == 2*k;\nloop invariant i + j == n ==> i + j == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int k = 100;\n  int b = 0;\n  int i;\n  int j;\n  int n;\n  i = j = 0;\n  /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= j <= n;\nloop invariant i3: i + j == n;\n\n\nloop invariant i6: i + j == n ==> i + j <= 2*k;\nloop invariant i7: i + j == n ==> i + j >= 0;\nloop invariant i8: i + j == n ==> i >= 0;\nloop invariant i9: i + j == n ==> j >= 0;\nloop invariant i10: i + j == n ==> i <= n;\nloop invariant i11: i + j == n ==> j <= n;\n\n\n*/\nfor( n = 0 ; n < 2*k ; n++ ) {\n    \n    if(b) {\n      i++;\n    } else {\n      j++;\n    }\n    b = !b;\n  }\n  {;\n//@ assert(i == j);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant i == n / 2;\nloop invariant j == n / 2;\nloop invariant i + j == n;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant n >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int k = 100;\n  int b = 0;\n  int i;\n  int j;\n  int n;\n  i = j = 0;\n  /*@\n\n\nloop invariant i3: i + j == n;\nloop invariant i4: i >= 0;\nloop invariant i5: j >= 0;\nloop invariant i6: n >= 0;\n*/\nfor( n = 0 ; n < 2*k ; n++ ) {\n    \n    if(b) {\n      i++;\n    } else {\n      j++;\n    }\n    b = !b;\n  }\n  {;\n//@ assert(i == j);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int k = 100;\n  int b = 0;\n  int i;\n  int j;\n  int n;\n  i = j = 0;\n  /*@\n\n*/\nfor( n = 0 ; n < 2*k ; n++ ) {\n    \n    if(b) {\n      i++;\n    } else {\n      j++;\n    }\n    b = !b;\n  }\n  {;\n//@ assert(i == j);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= n <= 2*k;\nloop invariant k >= j;\nloop invariant k <= i;\nloop invariant i + j == n;\nloop invariant b + 1 == n % 2;\nloop invariant b == (n % 2 == 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int k = 100;\n  int b = 0;\n  int i;\n  int j;\n  int n;\n  i = j = 0;\n  /*@\nloop invariant i1: 0 <= n <= 2*k;\n\n\nloop invariant i4: i + j == n;\n\n\n*/\nfor( n = 0 ; n < 2*k ; n++ ) {\n    \n    if(b) {\n      i++;\n    } else {\n      j++;\n    }\n    b = !b;\n  }\n  {;\n//@ assert(i == j);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 57,
                "annotations": "```\n/*@\nloop invariant 0 <= i < k;\nloop invariant 0 <= j < k;\nloop invariant i + j = n;\nloop invariant i + j <= 2*k;\nloop invariant i == j ==> n % 2 == 0;\nloop invariant i != j ==> n % 2 == 1;\nloop invariant i + j == n ==> (i == j);\nloop invariant i + j == n ==> (i != j);\nloop invariant i + j == n ==> (i + j <= 2*k);\nloop invariant i + j == n ==> (i + j >= 2*k);\nloop invariant i + j == n ==> (i + j == 2*k);\nloop invariant i + j == n ==> (i + j == 0);\nloop invariant i + j == n ==> (i + j == 1);\nloop invariant i + j == n ==> (i + j == 2);\nloop invariant i + j == n ==> (i + j == 3);\nloop invariant i + j == n ==> (i + j == 4);\nloop invariant i + j == n ==> (i + j == 5);\nloop invariant i + j == n ==> (i + j == 6);\nloop invariant i + j == n ==> (i + j == 7);\nloop invariant i + j == n ==> (i + j == 8);\nloop invariant i + j == n ==> (i + j == 9);\nloop invariant i + j == n ==> (i + j == 10);\nloop invariant i + j == n ==> (i + j == 11);\nloop invariant i + j == n ==> (i + j == 12);\nloop invariant i + j == n ==> (i + j == 13);\nloop invariant i + j == n ==> (i + j == 14);\nloop invariant i + j == n ==> (i + j == 15);\nloop invariant i + j == n ==> (i + j == 16);\nloop invariant i + j == n ==> (i + j == 17);\nloop invariant i + j == n ==> (i + j == 18);\nloop invariant i + j == n ==> (i + j == 19);\nloop invariant i + j == n ==> (i + j == 20);\nloop invariant i + j == n ==> (i + j == 21);\nloop invariant i + j == n ==> (i + j == 22);\nloop invariant i + j == n ==> (i + j == 23);\nloop invariant i + j == n ==> (i + j == 24);\nloop invariant i + j == n ==> (i + j == 25);\nloop invariant i + j == n ==> (i + j == 26);\nloop invariant i + j == n ==> (i + j == 27);\nloop invariant i + j == n ==> (i + j == 28);\nloop invariant i + j == n ==> (i + j == 29);\nloop invariant i + j == n ==> (i + j == 30);\nloop invariant i + j == n ==> (i + j == 31);\nloop invariant i + j == n ==> (i + j == 32);\nloop invariant i + j == n ==> (i + j == 33);\nloop invariant i + j == n ==> (i + j == 34);\nloop invariant i + j == n ==> (i + j == 35);\nloop invariant i + j == n ==> (i + j == 36);\nloop invariant i + j == n ==> (i + j == 37);\nloop invariant i + j == n ==> (i + j == 38);\nloop invariant i + j == n ==> (i + j == 39);\nloop invariant i + j == n ==> (i + j == 40);\nloop invariant i + j == n ==> (i + j == 41);\nloop invariant i + j == n ==> (i + j == 42);\nloop invariant i + j == n ==> (i + j == 43);\nloop invariant i + j == n ==> (i + j == 44);\nloop invariant i + j == n ==> (i + j == 45);\nloop invariant i + j == n ==> (i + j == 46);\nloop invariant i + j == n ==> (i + j == 47);\nloop invariant i + j == n ==> (i + j == 48);\nloop invariant i + j == n ==> (i + j == 49);\nloop invariant i + j == n ==> (i + j == 50);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int k = 100;\n  int b = 0;\n  int i;\n  int j;\n  int n;\n  i = j = 0;\n  /*@\n\n\n\n\n\n\n\n\nloop invariant i9: i + j == n ==> (i + j <= 2*k);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nfor( n = 0 ; n < 2*k ; n++ ) {\n    \n    if(b) {\n      i++;\n    } else {\n      j++;\n    }\n    b = !b;\n  }\n  {;\n//@ assert(i == j);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 17,
                "annotations": "```\n/*@\nloop invariant 0 <= k <= 100;\nloop invariant 0 <= b <= 1;\nloop invariant 0 <= i <= 100;\nloop invariant 0 <= j <= 100;\nloop invariant 0 <= n <= 200;\nloop invariant i + j >= 0;\nloop invariant i + j <= 200;\nloop invariant n % 2 == b;\nloop invariant n == 2 * i + 2 * j;\nloop invariant i == j;\nloop invariant i % 2 == b;\nloop invariant j % 2 == !b;\nloop invariant i + j == k;\nloop invariant i == j == k / 2;\nloop invariant (i % 2 == 0) ==> (i == j);\nloop invariant (i % 2 == 1) ==> (i == j + 1);\nloop invariant (j % 2 == 0) ==> (j == i);\nloop invariant (j % 2 == 1) ==> (j == i + 1);\nloop invariant (n % 2 == 0) ==> (i == j);\nloop invariant (n % 2 == 1) ==> (i == j + 1);\nloop invariant (n % 2 == 0) ==> (j == i);\nloop invariant (n % 2 == 1) ==> (j == i + 1);\nloop invariant (i % 2 == 0) ==> (j % 2 == 0);\nloop invariant (i % 2 == 1) ==> (j % 2 == 1);\nloop invariant (j % 2 == 0) ==> (i % 2 == 0);\nloop invariant (j % 2 == 1) ==> (i % 2 == 1);\nloop invariant (i + j == k) ==> (i == j == k / 2);\nloop invariant (i + j == k) ==> (i % 2 == 0);\nloop invariant (i + j == k) ==> (j % 2 == 0);\nloop invariant (i + j == k) ==> (i == j + 1);\nloop invariant (i + j == k) ==> (j == i + 1);\nloop invariant (i + j == k) ==> (i % 2 == 1);\nloop invariant (i + j == k) ==> (j % 2 == 1);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int k = 100;\n  int b = 0;\n  int i;\n  int j;\n  int n;\n  i = j = 0;\n  /*@\nloop invariant i1: 0 <= k <= 100;\nloop invariant i2: 0 <= b <= 1;\n\n\nloop invariant i5: 0 <= n <= 200;\nloop invariant i6: i + j >= 0;\n\nloop invariant i8: n % 2 == b;\n\n\n\n\n\n\n\n\n\n\nloop invariant i19: (n % 2 == 0) ==> (i == j);\n\nloop invariant i21: (n % 2 == 0) ==> (j == i);\nloop invariant i22: (n % 2 == 1) ==> (j == i + 1);\n\n\n\n\n\n\n\n\n\n\n\n*/\nfor( n = 0 ; n < 2*k ; n++ ) {\n    \n    if(b) {\n      i++;\n    } else {\n      j++;\n    }\n    b = !b;\n  }\n  {;\n//@ assert(i == j);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int k = 100;\n  int b = 0;\n  int i;\n  int j;\n  int n;\n  i = j = 0;\n  /*@\n\n*/\nfor( n = 0 ; n < 2*k ; n++ ) {\n    \n    if(b) {\n      i++;\n    } else {\n      j++;\n    }\n    b = !b;\n  }\n  {;\n//@ assert(i == j);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= k;\nloop invariant 0 <= j <= k;\nloop invariant i + j == 2 * k;\nloop invariant i == j ==> b;\nloop invariant b ==> i == j;\nloop invariant b == (n % 2) == 0;\nloop invariant !b == (n % 2) == 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int k = 100;\n  int b = 0;\n  int i;\n  int j;\n  int n;\n  i = j = 0;\n  /*@\n\n\n\n\n\n\n\n*/\nfor( n = 0 ; n < 2*k ; n++ ) {\n    \n    if(b) {\n      i++;\n    } else {\n      j++;\n    }\n    b = !b;\n  }\n  {;\n//@ assert(i == j);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 9,
                "annotations": "```\n/*@\nloop invariant i <= n <= 2*k;\nloop invariant j <= n <= 2*k;\nloop invariant i + j >= n;\nloop invariant i + j <= 2*k;\nloop invariant j - i == n - 2*i;\nloop invariant i - j == 2*k - n - 2*j;\nloop invariant b ==> n % 2 == 0;\nloop invariant !b ==> n % 2 == 1;\nloop invariant i + j == n + 2*k;\nloop invariant i + j == 2*k - n;\nloop invariant b ==> i <= k;\nloop invariant !b ==> i > k;\nloop invariant j <= k;\nloop invariant j > k;\nloop invariant b ==> j == k;\nloop invariant !b ==> j == k;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int k = 100;\n  int b = 0;\n  int i;\n  int j;\n  int n;\n  i = j = 0;\n  /*@\nloop invariant i1: i <= n <= 2*k;\nloop invariant i2: j <= n <= 2*k;\nloop invariant i3: i + j >= n;\nloop invariant i4: i + j <= 2*k;\nloop invariant i5: j - i == n - 2*i;\n\n\n\n\n\n\n\n\n\n\n\n*/\nfor( n = 0 ; n < 2*k ; n++ ) {\n    \n    if(b) {\n      i++;\n    } else {\n      j++;\n    }\n    b = !b;\n  }\n  {;\n//@ assert(i == j);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= k;\nloop invariant 0 <= j <= k;\nloop invariant i + j == n;\nloop invariant n <= 2*k;\nloop invariant i + j + n == 2*k;\nloop invariant i == j;\nloop invariant i + j == k;\nloop invariant i + j + n == 2*k;\nloop invariant i + j + n == 2*k;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int k = 100;\n  int b = 0;\n  int i;\n  int j;\n  int n;\n  i = j = 0;\n  /*@\n\n\nloop invariant i3: i + j == n;\nloop invariant i4: n <= 2*k;\n\n\n\n*/\nfor( n = 0 ; n < 2*k ; n++ ) {\n    \n    if(b) {\n      i++;\n    } else {\n      j++;\n    }\n    b = !b;\n  }\n  {;\n//@ assert(i == j);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= n <= 2 * k;\nloop invariant 0 <= i <= k;\nloop invariant i <= j <= k;\nloop invariant (i + j) == k;\nloop invariant (i == j) ==> (i == j);\nloop invariant (n == 2 * k) ==> (i == j);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int k = 100;\n  int b = 0;\n  int i;\n  int j;\n  int n;\n  i = j = 0;\n  /*@\nloop invariant i1: 0 <= n <= 2 * k;\n\n\n\nloop invariant i5: (i == j) ==> (i == j);\n\n*/\nfor( n = 0 ; n < 2*k ; n++ ) {\n    \n    if(b) {\n      i++;\n    } else {\n      j++;\n    }\n    b = !b;\n  }\n  {;\n//@ assert(i == j);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= k;\nloop invariant 0 <= j <= k;\nloop invariant i + j == n;\nloop invariant i + j == 2 * k;\nloop invariant b == 1 - (i % 2);\nloop invariant b == 1 - (j % 2);\nloop invariant i <= j + 1;\nloop invariant j <= i + 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int k = 100;\n  int b = 0;\n  int i;\n  int j;\n  int n;\n  i = j = 0;\n  /*@\n\n\nloop invariant i3: i + j == n;\n\n\n\n\n\n*/\nfor( n = 0 ; n < 2*k ; n++ ) {\n    \n    if(b) {\n      i++;\n    } else {\n      j++;\n    }\n    b = !b;\n  }\n  {;\n//@ assert(i == j);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= n <= 2*k;\nloop invariant (b ==> i == j);\nloop invariant (b ==> i <= j);\nloop invariant (b ==> i >= j - 1);\nloop invariant (!b ==> i == j);\nloop invariant (!b ==> i <= j);\nloop invariant (!b ==> i >= j - 1);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int k = 100;\n  int b = 0;\n  int i;\n  int j;\n  int n;\n  i = j = 0;\n  /*@\nloop invariant i1: 0 <= n <= 2*k;\n\n\n\n\n\n\n*/\nfor( n = 0 ; n < 2*k ; n++ ) {\n    \n    if(b) {\n      i++;\n    } else {\n      j++;\n    }\n    b = !b;\n  }\n  {;\n//@ assert(i == j);\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 47: Assignment operators not allowed in annotations.",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int k = 100;\n  int b = 0;\n  int i;\n  int j;\n  int n;\n  i = j = 0;\n  /*@\nloop invariant i1: 0 <= n <= 2*k;\nloop invariant i2: (n % 2 == 0) ==> i == j;\nloop invariant i3: (n % 2 != 0) ==> i == j;\nloop invariant i4: 0 <= i + j <= 2*k;\nloop invariant i5: i >= 0;\nloop invariant i6: j >= 0;\nloop invariant i7: b == (n % 2 == 0);\nloop invariant i8: 0 <= i <= n;\nloop invariant i9: 0 <= j <= n;\nloop invariant i10: i + j == n;\nloop invariant i11: i == j ==> b == 1;\nloop invariant i12: i != j ==> b == 0;\nloop invariant i13: i + j == n ==> i + j <= 2*k;\nloop invariant i14: i + j == n ==> i + j >= 0;\nloop invariant i15: i + j == n ==> i >= 0;\nloop invariant i16: i + j == n ==> j >= 0;\nloop invariant i17: i + j == n ==> i <= n;\nloop invariant i18: i + j == n ==> j <= n;\nloop invariant i19: i + j == n ==> i + j == 2*k;\nloop invariant i20: i + j == n ==> i + j == 0;\nloop invariant i21: i == n / 2;\nloop invariant i22: j == n / 2;\nloop invariant i23: n >= 0;\nloop invariant i24: k >= j;\nloop invariant i25: k <= i;\nloop invariant i26: b + 1 == n % 2;\nloop invariant i27: 0 <= i < k;\nloop invariant i28: 0 <= j < k;\nloop invariant i29: i + j = n;\nloop invariant i30: i + j <= 2*k;\nloop invariant i31: i == j ==> n % 2 == 0;\nloop invariant i32: i != j ==> n % 2 == 1;\nloop invariant i33: i + j == n ==> (i == j);\nloop invariant i34: i + j == n ==> (i != j);\nloop invariant i35: i + j == n ==> (i + j <= 2*k);\nloop invariant i36: i + j == n ==> (i + j >= 2*k);\nloop invariant i37: i + j == n ==> (i + j == 2*k);\nloop invariant i38: i + j == n ==> (i + j == 0);\nloop invariant i39: i + j == n ==> (i + j == 1);\nloop invariant i40: i + j == n ==> (i + j == 2);\nloop invariant i41: i + j == n ==> (i + j == 3);\nloop invariant i42: i + j == n ==> (i + j == 4);\nloop invariant i43: i + j == n ==> (i + j == 5);\nloop invariant i44: i + j == n ==> (i + j == 6);\nloop invariant i45: i + j == n ==> (i + j == 7);\nloop invariant i46: i + j == n ==> (i + j == 8);\nloop invariant i47: i + j == n ==> (i + j == 9);\nloop invariant i48: i + j == n ==> (i + j == 10);\nloop invariant i49: i + j == n ==> (i + j == 11);\nloop invariant i50: i + j == n ==> (i + j == 12);\nloop invariant i51: i + j == n ==> (i + j == 13);\nloop invariant i52: i + j == n ==> (i + j == 14);\nloop invariant i53: i + j == n ==> (i + j == 15);\nloop invariant i54: i + j == n ==> (i + j == 16);\nloop invariant i55: i + j == n ==> (i + j == 17);\nloop invariant i56: i + j == n ==> (i + j == 18);\nloop invariant i57: i + j == n ==> (i + j == 19);\nloop invariant i58: i + j == n ==> (i + j == 20);\nloop invariant i59: i + j == n ==> (i + j == 21);\nloop invariant i60: i + j == n ==> (i + j == 22);\nloop invariant i61: i + j == n ==> (i + j == 23);\nloop invariant i62: i + j == n ==> (i + j == 24);\nloop invariant i63: i + j == n ==> (i + j == 25);\nloop invariant i64: i + j == n ==> (i + j == 26);\nloop invariant i65: i + j == n ==> (i + j == 27);\nloop invariant i66: i + j == n ==> (i + j == 28);\nloop invariant i67: i + j == n ==> (i + j == 29);\nloop invariant i68: i + j == n ==> (i + j == 30);\nloop invariant i69: i + j == n ==> (i + j == 31);\nloop invariant i70: i + j == n ==> (i + j == 32);\nloop invariant i71: i + j == n ==> (i + j == 33);\nloop invariant i72: i + j == n ==> (i + j == 34);\nloop invariant i73: i + j == n ==> (i + j == 35);\nloop invariant i74: i + j == n ==> (i + j == 36);\nloop invariant i75: i + j == n ==> (i + j == 37);\nloop invariant i76: i + j == n ==> (i + j == 38);\nloop invariant i77: i + j == n ==> (i + j == 39);\nloop invariant i78: i + j == n ==> (i + j == 40);\nloop invariant i79: i + j == n ==> (i + j == 41);\nloop invariant i80: i + j == n ==> (i + j == 42);\nloop invariant i81: i + j == n ==> (i + j == 43);\nloop invariant i82: i + j == n ==> (i + j == 44);\nloop invariant i83: i + j == n ==> (i + j == 45);\nloop invariant i84: i + j == n ==> (i + j == 46);\nloop invariant i85: i + j == n ==> (i + j == 47);\nloop invariant i86: i + j == n ==> (i + j == 48);\nloop invariant i87: i + j == n ==> (i + j == 49);\nloop invariant i88: i + j == n ==> (i + j == 50);\nloop invariant i89: 0 <= k <= 100;\nloop invariant i90: 0 <= b <= 1;\nloop invariant i91: 0 <= i <= 100;\nloop invariant i92: 0 <= j <= 100;\nloop invariant i93: 0 <= n <= 200;\nloop invariant i94: i + j >= 0;\nloop invariant i95: i + j <= 200;\nloop invariant i96: n % 2 == b;\nloop invariant i97: n == 2 * i + 2 * j;\nloop invariant i98: i == j;\nloop invariant i99: i % 2 == b;\nloop invariant i100: j % 2 == !b;\nloop invariant i101: i + j == k;\nloop invariant i102: i == j == k / 2;\nloop invariant i103: (i % 2 == 0) ==> (i == j);\nloop invariant i104: (i % 2 == 1) ==> (i == j + 1);\nloop invariant i105: (j % 2 == 0) ==> (j == i);\nloop invariant i106: (j % 2 == 1) ==> (j == i + 1);\nloop invariant i107: (n % 2 == 0) ==> (i == j);\nloop invariant i108: (n % 2 == 1) ==> (i == j + 1);\nloop invariant i109: (n % 2 == 0) ==> (j == i);\nloop invariant i110: (n % 2 == 1) ==> (j == i + 1);\nloop invariant i111: (i % 2 == 0) ==> (j % 2 == 0);\nloop invariant i112: (i % 2 == 1) ==> (j % 2 == 1);\nloop invariant i113: (j % 2 == 0) ==> (i % 2 == 0);\nloop invariant i114: (j % 2 == 1) ==> (i % 2 == 1);\nloop invariant i115: (i + j == k) ==> (i == j == k / 2);\nloop invariant i116: (i + j == k) ==> (i % 2 == 0);\nloop invariant i117: (i + j == k) ==> (j % 2 == 0);\nloop invariant i118: (i + j == k) ==> (i == j + 1);\nloop invariant i119: (i + j == k) ==> (j == i + 1);\nloop invariant i120: (i + j == k) ==> (i % 2 == 1);\nloop invariant i121: (i + j == k) ==> (j % 2 == 1);\nloop invariant i122: 0 <= i <= k;\nloop invariant i123: 0 <= j <= k;\nloop invariant i124: i + j == 2 * k;\nloop invariant i125: i == j ==> b;\nloop invariant i126: b ==> i == j;\nloop invariant i127: b == (n % 2) == 0;\nloop invariant i128: !b == (n % 2) == 1;\nloop invariant i129: i <= n <= 2*k;\nloop invariant i130: j <= n <= 2*k;\nloop invariant i131: i + j >= n;\nloop invariant i132: j - i == n - 2*i;\nloop invariant i133: i - j == 2*k - n - 2*j;\nloop invariant i134: b ==> n % 2 == 0;\nloop invariant i135: !b ==> n % 2 == 1;\nloop invariant i136: i + j == n + 2*k;\nloop invariant i137: i + j == 2*k - n;\nloop invariant i138: b ==> i <= k;\nloop invariant i139: !b ==> i > k;\nloop invariant i140: j <= k;\nloop invariant i141: j > k;\nloop invariant i142: b ==> j == k;\nloop invariant i143: !b ==> j == k;\nloop invariant i144: n <= 2*k;\nloop invariant i145: i + j + n == 2*k;\nloop invariant i146: 0 <= n <= 2 * k;\nloop invariant i147: i <= j <= k;\nloop invariant i148: (i + j) == k;\nloop invariant i149: (i == j) ==> (i == j);\nloop invariant i150: (n == 2 * k) ==> (i == j);\nloop invariant i151: b == 1 - (i % 2);\nloop invariant i152: b == 1 - (j % 2);\nloop invariant i153: i <= j + 1;\nloop invariant i154: j <= i + 1;\nloop invariant i155: (b ==> i == j);\nloop invariant i156: (b ==> i <= j);\nloop invariant i157: (b ==> i >= j - 1);\nloop invariant i158: (!b ==> i == j);\nloop invariant i159: (!b ==> i <= j);\nloop invariant i160: (!b ==> i >= j - 1);\n*/\nfor( n = 0 ; n < 2*k ; n++ ) {\n    \n    if(b) {\n      i++;\n    } else {\n      j++;\n    }\n    b = !b;\n  }\n  {;\n//@ assert(i == j);\n}\n\n}",
        "combined_annotation_num_solver_calls": 100,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int k = 100;\n  int b = 0;\n  int i;\n  int j;\n  int n;\n  i = j = 0;\n  /*@\nloop invariant i1: 0 <= n <= 2*k;\nloop invariant i2: (n % 2 == 0) ==> i == j;\n\nloop invariant i4: 0 <= i + j <= 2*k;\nloop invariant i5: i >= 0;\nloop invariant i6: j >= 0;\n\nloop invariant i8: 0 <= i <= n;\nloop invariant i9: 0 <= j <= n;\nloop invariant i10: i + j == n;\n\n\nloop invariant i13: i + j == n ==> i + j <= 2*k;\nloop invariant i14: i + j == n ==> i + j >= 0;\nloop invariant i15: i + j == n ==> i >= 0;\nloop invariant i16: i + j == n ==> j >= 0;\nloop invariant i17: i + j == n ==> i <= n;\nloop invariant i18: i + j == n ==> j <= n;\n\n\nloop invariant i21: i == n / 2;\n\nloop invariant i23: n >= 0;\nloop invariant i24: k >= j;\n\n\n\n\n\nloop invariant i30: i + j <= 2*k;\nloop invariant i31: i == j ==> n % 2 == 0;\nloop invariant i32: i != j ==> n % 2 == 1;\n\n\nloop invariant i35: i + j == n ==> (i + j <= 2*k);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i89: 0 <= k <= 100;\nloop invariant i90: 0 <= b <= 1;\nloop invariant i91: 0 <= i <= 100;\nloop invariant i92: 0 <= j <= 100;\nloop invariant i93: 0 <= n <= 200;\nloop invariant i94: i + j >= 0;\nloop invariant i95: i + j <= 200;\nloop invariant i96: n % 2 == b;\n\n\n\n\n\n\n\n\n\n\nloop invariant i107: (n % 2 == 0) ==> (i == j);\n\nloop invariant i109: (n % 2 == 0) ==> (j == i);\nloop invariant i110: (n % 2 == 1) ==> (j == i + 1);\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i122: 0 <= i <= k;\nloop invariant i123: 0 <= j <= k;\n\n\n\n\n\nloop invariant i129: i <= n <= 2*k;\nloop invariant i130: j <= n <= 2*k;\nloop invariant i131: i + j >= n;\nloop invariant i132: j - i == n - 2*i;\n\n\n\n\n\nloop invariant i138: b ==> i <= k;\n\nloop invariant i140: j <= k;\n\n\n\nloop invariant i144: n <= 2*k;\n\nloop invariant i146: 0 <= n <= 2 * k;\nloop invariant i147: i <= j <= k;\n\nloop invariant i149: (i == j) ==> (i == j);\nloop invariant i150: (n == 2 * k) ==> (i == j);\n\n\nloop invariant i153: i <= j + 1;\nloop invariant i154: j <= i + 1;\n\nloop invariant i156: (b ==> i <= j);\nloop invariant i157: (b ==> i >= j - 1);\nloop invariant i158: (!b ==> i == j);\nloop invariant i159: (!b ==> i <= j);\nloop invariant i160: (!b ==> i >= j - 1);\n*/\nfor( n = 0 ; n < 2*k ; n++ ) {\n    \n    if(b) {\n      i++;\n    } else {\n      j++;\n    }\n    b = !b;\n  }\n  {;\n//@ assert(i == j);\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/split.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c"
        ],
        "skipped": [],
        "total": 38,
        "success_count": 35,
        "failure_count": 3,
        "success_rate": 0.9210526315789473
    }
}