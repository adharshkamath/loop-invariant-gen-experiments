{
    "logs": {
        "file": "../dataset/loop_invariants/accelerating_invariant_generation/invgen/gulwani_cegar2.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint __BLAST_NONDET;\nvoid main() {\n  int x,m,n;\n\n  x = 0;\n  m = 0;\n  while( x < n ) {\n    if(__BLAST_NONDET)\n\tm = x;\n\tx++;\n  }\n  if( n > 0 )\n    {\n      {;\n//@ assert( 0<=m);\n}\n\n      {;\n//@ assert(m<n);\n}\n\n    }\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= m <= n;\nloop invariant (x >= m) ==> (m <= x);\nloop invariant (x >= m) ==> (m <= n);\nloop invariant (x >= m) ==> (x <= n);\nloop invariant (x >= m) ==> (n > 0);\nloop invariant 0 <= x <= n;\nloop invariant 0 <= m <= n;\nloop invariant (x >= m) ==> (m <= x);\nloop invariant (x >= m) ==> (m <= n);\nloop invariant (x >= m) ==> (x <= n);\nloop invariant (x >= m) ==> (n > 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= m <= x;\nloop invariant m <= n;\nloop invariant m >= 0;\nloop invariant x >= 0;\nloop invariant n >= 0;\nloop invariant x < n ==> m < n;\nloop invariant x < n ==> m <= x;\nloop invariant x < n ==> 0 <= m;\nloop invariant x < n ==> 0 <= x;\nloop invariant x < n ==> 0 <= n;\nloop invariant x < n ==> m <= n;\nloop invariant x < n ==> m >= 0;\nloop invariant x < n ==> x >= 0;\nloop invariant x < n ==> n >= 0;\nloop invariant x < n ==> m < n;\nloop invariant x < n ==> m <= x;\nloop invariant x < n ==> 0 <= m;\nloop invariant x < n ==> 0 <= x;\nloop invariant x < n ==> 0 <= n;\nloop invariant x < n ==> m <= n;\nloop invariant x < n ==> m >= 0;\nloop invariant x < n ==> x >= 0;\nloop invariant x < n ==> n >= 0;\nloop invariant x < n ==> m < n;\nloop invariant x < n ==> m <= x;\nloop invariant x < n ==> 0 <= m;\nloop invariant x < n ==> 0 <= x;\nloop invariant x < n ==> 0 <= n;\nloop invariant x < n ==> m <= n;\nloop invariant x < n ==> m >= 0;\nloop invariant x < n ==> x >= 0;\nloop invariant x < n ==> n >= 0;\nloop invariant x < n ==> m < n;\nloop invariant x < n ==> m <= x;\nloop invariant x < n ==> 0 <= m;\nloop invariant x < n ==> 0 <= x;\nloop invariant x < n ==> 0 <= n;\nloop invariant x < n ==> m <= n;\nloop invariant x < n ==> m >= 0;\nloop invariant x < n ==> x >= 0;\nloop invariant x < n ==> n >= 0;\nloop invariant x < n ==> m < n;\nloop invariant x < n ==> m <= x;\nloop invariant x < n ==> 0 <= m;\nloop invariant x < n ==> 0 <= x;\nloop invariant x < n ==> 0 <= n;\nloop invariant x < n ==> m <= n;\nloop invariant x < n ==> m >= 0;\nloop invariant x < n ==> x >= 0;\nloop invariant x < n ==> n >= 0;\nloop invariant x < n ==> m < n;\nloop invariant x < n ==> m <= x;\nloop invariant x < n ==> 0 <= m;\nloop invariant x < n ==> 0 <= x;\nloop invariant x < n ==> 0 <= n;\nloop invariant x < n ==> m <= n;\nloop invariant x < n ==> m >= 0;\nloop invariant x < n ==> x >= 0;\nloop invariant x < n ==> n >= 0;\nloop invariant x < n ==> m < n;\nloop invariant x < n ==> m <= x;\nloop invariant x < n ==> 0 <= m;\nloop invariant x < n ==> 0 <= x;\nloop invariant x < n ==> 0 <= n;\nloop invariant x < n ==> m <= n;\nloop invariant x < n ==> m >= 0;\nloop invariant x < n ==> x >= 0;\nloop invariant x < n ==> n >= 0;\nloop invariant x < n ==> m < n;\nloop invariant x < n ==> m <= x;\nloop invariant x < n ==> 0 <= m;\nloop invariant x < n ==> 0 <= x;\nloop invariant x < n ==> 0 <= n;\nloop invariant x < n ==> m <= n;\nloop invariant x < n ==> m >= 0;\nloop invariant x < n ==> x >= 0;\nloop invariant x < n ==> n >= 0;\nloop invariant x < n ==> m < n;\nloop invariant x < n ==> m <= x;\nloop invariant x < n ==> 0 <= m;\nloop invariant x < n ==> 0 <= x;\nloop invariant x < n ==> 0 <= n;\nloop invariant x < n ==> m <= n;\nloop invariant x < n ==> m >= 0;\nloop invariant x < n ==> x >= 0;\nloop invariant x < n ==> n >= 0;\nloop invariant x < n ==> m < n;\nloop invariant x < n ==> m <= x;\nloop invariant x < n ==> 0 <= m;\nloop invariant x < n ==> 0 <= x;\nloop invariant x < n ==> 0 <= n;\nloop invariant x < n ==> m <= n;\nloop invariant x < n ==> m >= 0;\nloop invariant x < n ==> x >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= m <= n;\nloop invariant x >= m;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= m <= x;\nloop invariant m <= n - x;\nloop invariant n > 0 ==> m < n;\n*/\n```",
            "```\n/*@\nloop invariant x >= 0; loop invariant n >= 0; loop invariant 0 <= m <= n; loop invariant m >= x; loop invariant m <= (n - 1); loop invariant m < x ==> (x == 0) || (x > n); loop invariant m < x ==> (m == x - 1); loop invariant m < x ==> (__BLAST_NONDET == 0); loop invariant m == x ==> (x <= n); loop invariant m == x ==> (__BLAST_NONDET == 1); loop invariant m == x ==> (x == n); loop invariant m == x ==> (x == n + 1); loop invariant m == x ==> (x == n - 1); loop invariant m == x ==> (x == n - 2); loop invariant m == x ==> (x == n - 3); loop invariant m == x ==> (x == n - 4); loop invariant m == x ==> (x == n - 5); loop invariant m == x ==> (x == n - 6); loop invariant m == x ==> (x == n - 7); loop invariant m == x ==> (x == n - 8); loop invariant m == x ==> (x == n - 9); loop invariant m == x ==> (x == n - 10); loop invariant m == x ==> (x == n - 11); loop invariant m == x ==> (x == n - 12); loop invariant m == x ==> (x == n - 13); loop invariant m == x ==> (x == n - 14); loop invariant m == x ==> (x == n - 15); loop invariant m == x ==> (x == n - 16); loop invariant m == x ==> (x == n - 17); loop invariant m == x ==> (x == n - 18); loop invariant m == x ==> (x == n - 19); loop invariant m == x ==> (x == n - 20); loop invariant m == x ==> (x == n - 21); loop invariant m == x ==> (x == n - 22); loop invariant m == x ==> (x == n - 23); loop invariant m == x ==> (x == n - 24); loop invariant m == x ==> (x == n - 25); loop invariant m == x ==> (x == n - 26); loop invariant m == x ==> (x == n - 27); loop invariant m == x ==> (x == n - 28); loop invariant m == x ==> (x == n - 29); loop invariant m == x ==> (x == n - 30); loop invariant m == x ==> (x == n - 31); loop invariant m == x ==> (x == n - 32); loop invariant m == x ==> (x == n - 33); loop invariant m == x ==> (x == n - 34); loop invariant m == x ==> (x == n - 35); loop invariant m == x ==> (x == n - 36); loop invariant m == x ==> (x == n - 37); loop invariant m == x ==> (x == n - 38); loop invariant m == x ==> (x == n - 39); loop invariant m == x ==> (x == n - 40); loop invariant m == x ==> (x == n - 41); loop invariant m == x ==> (x == n - 42); loop invariant m == x ==> (x == n - 43); loop invariant m == x ==> (x == n - 44); loop invariant m == x ==> (x == n - 45); loop invariant m == x ==> (x == n - 46); loop invariant m == x ==> (x == n - 47); loop invariant m == x ==> (x == n - 48); loop invariant m == x ==> (x == n - 49); loop invariant m == x ==> (x == n - 50); loop invariant m == x ==> (x == n - 51); loop invariant m == x ==> (x == n - 52); loop invariant m == x ==> (x == n - 53); loop invariant m == x ==> (x == n - 54); loop invariant m == x ==> (x == n - 55); loop invariant m == x ==> (x == n - 56); loop invariant m == x ==> (x == n - 57); loop invariant m == x ==> (x == n - 58);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= m <= n;\nloop invariant m <= x;\nloop invariant x < n ==> m <= x;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= m;\nloop invariant 0 <= n;\nloop invariant 0 <= m <= n;\nloop invariant !(__BLAST_NONDET ==> m < x);\nloop invariant !(__BLAST_NONDET ==> m >= x);\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant m >= 0;\nloop invariant m <= x;\nloop invariant n >= 0;\nloop invariant x <= n;\nloop invariant !(__BLAST_NONDET ==> m < x);\nloop invariant !(__BLAST_NONDET ==> m >= x);\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant m >= 0;\nloop invariant m <= x;\nloop invariant n >= 0;\nloop invariant x <= n;\nloop invariant !(__BLAST_NONDET ==> m < x);\nloop invariant !(__BLAST_NONDET ==> m >= x);\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant m >= 0;\nloop invariant m <= x;\nloop invariant n >= 0;\nloop invariant x <= n;\nloop invariant !(__BLAST_NONDET ==> m < x);\nloop invariant !(__BLAST_NONDET ==> m >= x);\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant m >= 0;\nloop invariant m <= x;\nloop invariant n >= 0;\nloop invariant x <= n;\nloop invariant !(__BLAST_NONDET ==> m < x);\nloop invariant !(__BLAST_NONDET ==> m >= x);\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant m >= 0;\nloop invariant m <= x;\nloop invariant n >= 0;\nloop invariant x <= n;\nloop invariant !(__BLAST_NONDET ==> m < x);\nloop invariant !(__BLAST_NONDET ==> m >= x);\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant m >= 0;\nloop invariant m <= x;\nloop invariant n >= 0;\nloop invariant x <= n;\nloop invariant !(__BLAST_NONDET ==> m < x);\nloop invariant !(__BLAST_NONDET ==> m >= x);\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant m >= 0;\nloop invariant m <= x;\nloop invariant n >= 0;\nloop invariant x <= n;\nloop invariant !(__BLAST_NONDET ==> m < x);\nloop invariant !(__BLAST_NONDET ==> m >= x);\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant m >= 0;\nloop invariant m <= x;\nloop invariant n >= 0;\nloop invariant x <= n;\nloop invariant !(__BLAST_NONDET ==> m < x);\nloop invariant !(__BLAST_NONDET ==> m >= x);\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant m >= 0;\nloop invariant m <= x;\nloop invariant n >= 0;\nloop invariant x <= n;\nloop invariant !(__BLAST_NONDET ==> m < x);\nloop invariant !(__BLAST_NONDET ==> m >= x);\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant m >= 0;\nloop invariant m <= x;\nloop invariant n >= 0;\nloop invariant x <= n;\nloop invariant !(__BLAST_NONDET ==> m < x);\nloop invariant !(__BLAST_NONDET ==> m >= x);\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant m >= 0;\nloop invariant m <= x;\nloop invariant n >= 0;\nloop invariant x <= n;\nloop invariant !(__BLAST_NONDET ==> m < x);\nloop invariant !(__BLAST_NONDET ==> m >= x);\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant m >= 0;\nloop invariant m <= x;\nloop invariant n >= 0;\nloop invariant x <= n;\nloop invariant !(__BLAST_NONDET ==> m < x);\nloop invariant !(__BLAST_NONDET ==> m >= x);\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant m >= 0;\nloop invariant m <= x;\nloop invariant n >= 0;\nloop invariant x <= n;\nloop invariant !(__BLAST_NONDET ==> m < x);\nloop invariant !(__BLAST_NONDET ==> m >= x);\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant m >= 0;\nloop invariant m <= x;\nloop invariant n >= 0;\nloop invariant x <= n;\nloop invariant !(__BLAST_NONDET ==> m < x);\nloop invariant !(__BLAST_NONDET ==> m >= x);\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant m >= 0;\nloop invariant m <= x;\nloop invariant n >= 0;\nloop invariant x <= n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m >= 0;\nloop invariant m <= x;\nloop invariant m <= n;\nloop invariant n >= 0;\nloop invariant n >= m;\nloop invariant n > 0 ==> x < n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant m >= 0;\nloop invariant m <= n;\nloop invariant n >= 0;\nloop invariant n >= m;\nloop invariant n > 0 ==> x < n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant m >= 0;\nloop invariant m <= n;\nloop invariant n >= 0;\nloop invariant n >= m;\nloop invariant n > 0 ==> x < n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant m >= 0;\nloop invariant m <= n;\nloop invariant n >= 0;\nloop invariant n >= m;\nloop invariant n > 0 ==> x < n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant m >= 0;\nloop invariant m <= n;\nloop invariant n >= 0;\nloop invariant n >= m;\nloop invariant n > 0 ==> x < n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant m >= 0;\nloop invariant m <= n;\nloop invariant n >= 0;\nloop invariant n >= m;\nloop invariant n > 0 ==> x < n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant m >= 0;\nloop invariant m <= n;\nloop invariant n >= 0;\nloop invariant n >= m;\nloop invariant n > 0 ==> x < n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant m >= 0;\nloop invariant m <= n;\nloop invariant n >= 0;\nloop invariant n >= m;\nloop invariant n > 0 ==> x < n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant m >= 0;\nloop invariant m <= n;\nloop invariant n >= 0;\nloop invariant n >= m;\nloop invariant n > 0 ==> x < n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant m >= 0;\nloop invariant m <= n;\nloop invariant n >= 0;\nloop invariant n >= m;\nloop invariant n > 0 ==> x < n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant m >= 0;\nloop invariant m <= n;\nloop invariant n >= 0;\nloop invariant n >= m;\nloop invariant n > 0 ==> x < n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant m >= 0;\nloop invariant m <= n;\nloop invariant n >= 0;\nloop invariant n >= m;\nloop invariant n > 0 ==> x < n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant m >= 0;\nloop invariant m <= n;\nloop invariant n >= 0;\nloop invariant n >= m;\nloop invariant n > 0 ==> x < n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant m >= 0;\nloop invariant m <= n;\nloop invariant n >= 0;\nloop invariant n >= m;\nloop invariant n > 0 ==> x < n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant m >= 0;\nloop invariant m <= n;\nloop invariant n >= 0;\nloop invariant n >= m;\nloop invariant n > 0 ==> x < n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant m >= 0;\nloop invariant m <= n;\nloop invariant n >= 0;\nloop invariant n >= m;\nloop invariant n > 0 ==> x < n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant m >= 0;\nloop invariant m <= n;\nloop invariant n >= 0;\nloop invariant n >= m;\nloop invariant n > 0 ==> x < n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant m >= 0;\nloop invariant m <= n;\nloop invariant n >= 0;\nloop invariant n >= m;\nloop invariant n > 0 ==> x < n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant m >= 0;\nloop invariant m <= n;\nloop invariant n >= 0;\nloop invariant n >= m;\nloop invariant n > 0 ==> x < n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant m >= 0;\nloop invariant m <= n;\nloop invariant n >= 0;\nloop invariant n >= m;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= m <= x;\nloop invariant m < n ==> x == n;\nloop invariant x == 0 ==> m == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m <= x;\nloop invariant m >= 0;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x == n ==> m == n;\nloop invariant m == 0 ==> x == 0;\nloop invariant m == n ==> x == n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= m <= n;\nloop invariant m = x ==> 0 <= x <= n;\nloop invariant n > 0 ==> (x < n ==> x >= 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= m <= x;\nloop invariant m <= n ==> x < n;\nloop invariant m < n ==> x <= n;\nloop invariant x < n ==> m <= x;\nloop invariant x < n ==> m < n;\nloop invariant x < n ==> m <= x < n;\nloop invariant x < n ==> m < x;\nloop invariant x < n ==> m < x < n;\nloop invariant x < n ==> m < n ==> x < n;\nloop invariant x < n ==> m < n ==> x <= n;\nloop invariant x < n ==> m < n ==> x < n ==> m <= x;\nloop invariant x < n ==> m < n ==> x < n ==> m < x;\nloop invariant x < n ==> m < n ==> x < n ==> m < x < n;\nloop invariant x < n ==> m < n ==> x < n ==> m < n ==> x < n;\nloop invariant x < n ==> m < n ==> x < n ==> m < n ==> x <= n;\nloop invariant x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m <= x;\nloop invariant x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < x;\nloop invariant x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < x < n;\nloop invariant x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x < n;\nloop invariant x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x <= n;\nloop invariant x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m <= x;\nloop invariant x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < x;\nloop invariant x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < x < n;\nloop invariant x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x < n;\nloop invariant x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x <= n;\nloop invariant x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m <= x;\nloop invariant x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < x;\nloop invariant x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < x < n;\nloop invariant x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x < n;\nloop invariant x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x <= n;\nloop invariant x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m <= x;\nloop invariant x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < x;\nloop invariant x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < x < n;\nloop invariant x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x < n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m <= n;\nloop invariant m <= x;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x; loop invariant n > 0 ==> (0 <= m <= n); loop invariant n > 0 ==> (m <= x); loop invariant x < n; loop invariant n == 0 ==> (m == 0); loop invariant n == 0 ==> (x == 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= m <= n;\nloop invariant x <= m => m == x;\nloop invariant n > 0 ==> m < n;\nloop invariant 0 <= x <= n;\nloop invariant 0 <= m <= n;\nloop invariant x <= m ==> m == x;\nloop invariant n > 0 ==> m < n;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= m <= n;\nloop invariant (x >= m) ==> (m <= x);\nloop invariant (x >= m) ==> (m <= n);\nloop invariant (x >= m) ==> (x <= n);\nloop invariant (x >= m) ==> (n > 0);\nloop invariant 0 <= x <= n;\nloop invariant 0 <= m <= n;\nloop invariant (x >= m) ==> (m <= x);\nloop invariant (x >= m) ==> (m <= n);\nloop invariant (x >= m) ==> (x <= n);\nloop invariant (x >= m) ==> (n > 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint __BLAST_NONDET;\nvoid main() {\n  int x,m,n;\n\n  x = 0;\n  m = 0;\n  /*@\n\n\nloop invariant i3: (x >= m) ==> (m <= x);\n\n\n\n*/\nwhile( x < n ) {\n    if(__BLAST_NONDET)\n\tm = x;\n\tx++;\n  }\n  if( n > 0 )\n    {\n      {;\n//@ assert( 0<=m);\n}\n\n      {;\n//@ assert(m<n);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= m <= x;\nloop invariant m <= n;\nloop invariant m >= 0;\nloop invariant x >= 0;\nloop invariant n >= 0;\nloop invariant x < n ==> m < n;\nloop invariant x < n ==> m <= x;\nloop invariant x < n ==> 0 <= m;\nloop invariant x < n ==> 0 <= x;\nloop invariant x < n ==> 0 <= n;\nloop invariant x < n ==> m <= n;\nloop invariant x < n ==> m >= 0;\nloop invariant x < n ==> x >= 0;\nloop invariant x < n ==> n >= 0;\nloop invariant x < n ==> m < n;\nloop invariant x < n ==> m <= x;\nloop invariant x < n ==> 0 <= m;\nloop invariant x < n ==> 0 <= x;\nloop invariant x < n ==> 0 <= n;\nloop invariant x < n ==> m <= n;\nloop invariant x < n ==> m >= 0;\nloop invariant x < n ==> x >= 0;\nloop invariant x < n ==> n >= 0;\nloop invariant x < n ==> m < n;\nloop invariant x < n ==> m <= x;\nloop invariant x < n ==> 0 <= m;\nloop invariant x < n ==> 0 <= x;\nloop invariant x < n ==> 0 <= n;\nloop invariant x < n ==> m <= n;\nloop invariant x < n ==> m >= 0;\nloop invariant x < n ==> x >= 0;\nloop invariant x < n ==> n >= 0;\nloop invariant x < n ==> m < n;\nloop invariant x < n ==> m <= x;\nloop invariant x < n ==> 0 <= m;\nloop invariant x < n ==> 0 <= x;\nloop invariant x < n ==> 0 <= n;\nloop invariant x < n ==> m <= n;\nloop invariant x < n ==> m >= 0;\nloop invariant x < n ==> x >= 0;\nloop invariant x < n ==> n >= 0;\nloop invariant x < n ==> m < n;\nloop invariant x < n ==> m <= x;\nloop invariant x < n ==> 0 <= m;\nloop invariant x < n ==> 0 <= x;\nloop invariant x < n ==> 0 <= n;\nloop invariant x < n ==> m <= n;\nloop invariant x < n ==> m >= 0;\nloop invariant x < n ==> x >= 0;\nloop invariant x < n ==> n >= 0;\nloop invariant x < n ==> m < n;\nloop invariant x < n ==> m <= x;\nloop invariant x < n ==> 0 <= m;\nloop invariant x < n ==> 0 <= x;\nloop invariant x < n ==> 0 <= n;\nloop invariant x < n ==> m <= n;\nloop invariant x < n ==> m >= 0;\nloop invariant x < n ==> x >= 0;\nloop invariant x < n ==> n >= 0;\nloop invariant x < n ==> m < n;\nloop invariant x < n ==> m <= x;\nloop invariant x < n ==> 0 <= m;\nloop invariant x < n ==> 0 <= x;\nloop invariant x < n ==> 0 <= n;\nloop invariant x < n ==> m <= n;\nloop invariant x < n ==> m >= 0;\nloop invariant x < n ==> x >= 0;\nloop invariant x < n ==> n >= 0;\nloop invariant x < n ==> m < n;\nloop invariant x < n ==> m <= x;\nloop invariant x < n ==> 0 <= m;\nloop invariant x < n ==> 0 <= x;\nloop invariant x < n ==> 0 <= n;\nloop invariant x < n ==> m <= n;\nloop invariant x < n ==> m >= 0;\nloop invariant x < n ==> x >= 0;\nloop invariant x < n ==> n >= 0;\nloop invariant x < n ==> m < n;\nloop invariant x < n ==> m <= x;\nloop invariant x < n ==> 0 <= m;\nloop invariant x < n ==> 0 <= x;\nloop invariant x < n ==> 0 <= n;\nloop invariant x < n ==> m <= n;\nloop invariant x < n ==> m >= 0;\nloop invariant x < n ==> x >= 0;\nloop invariant x < n ==> n >= 0;\nloop invariant x < n ==> m < n;\nloop invariant x < n ==> m <= x;\nloop invariant x < n ==> 0 <= m;\nloop invariant x < n ==> 0 <= x;\nloop invariant x < n ==> 0 <= n;\nloop invariant x < n ==> m <= n;\nloop invariant x < n ==> m >= 0;\nloop invariant x < n ==> x >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint __BLAST_NONDET;\nvoid main() {\n  int x,m,n;\n\n  x = 0;\n  m = 0;\n  /*@\n\nloop invariant i2: 0 <= m <= x;\n\nloop invariant i4: m >= 0;\nloop invariant i5: x >= 0;\n\nloop invariant i7: x < n ==> m < n;\nloop invariant i8: x < n ==> m <= x;\nloop invariant i9: x < n ==> 0 <= m;\nloop invariant i10: x < n ==> 0 <= x;\nloop invariant i11: x < n ==> 0 <= n;\nloop invariant i12: x < n ==> m <= n;\nloop invariant i13: x < n ==> m >= 0;\nloop invariant i14: x < n ==> x >= 0;\nloop invariant i15: x < n ==> n >= 0;\n*/\nwhile( x < n ) {\n    if(__BLAST_NONDET)\n\tm = x;\n\tx++;\n  }\n  if( n > 0 )\n    {\n      {;\n//@ assert( 0<=m);\n}\n\n      {;\n//@ assert(m<n);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= m <= n;\nloop invariant x >= m;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint __BLAST_NONDET;\nvoid main() {\n  int x,m,n;\n\n  x = 0;\n  m = 0;\n  /*@\n\n\nloop invariant i3: x >= m;\n*/\nwhile( x < n ) {\n    if(__BLAST_NONDET)\n\tm = x;\n\tx++;\n  }\n  if( n > 0 )\n    {\n      {;\n//@ assert( 0<=m);\n}\n\n      {;\n//@ assert(m<n);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= m <= x;\nloop invariant m <= n - x;\nloop invariant n > 0 ==> m < n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint __BLAST_NONDET;\nvoid main() {\n  int x,m,n;\n\n  x = 0;\n  m = 0;\n  /*@\n\nloop invariant i2: 0 <= m <= x;\n\nloop invariant i4: n > 0 ==> m < n;\n*/\nwhile( x < n ) {\n    if(__BLAST_NONDET)\n\tm = x;\n\tx++;\n  }\n  if( n > 0 )\n    {\n      {;\n//@ assert( 0<=m);\n}\n\n      {;\n//@ assert(m<n);\n}\n\n    }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant x >= 0; loop invariant n >= 0; loop invariant 0 <= m <= n; loop invariant m >= x; loop invariant m <= (n - 1); loop invariant m < x ==> (x == 0) || (x > n); loop invariant m < x ==> (m == x - 1); loop invariant m < x ==> (__BLAST_NONDET == 0); loop invariant m == x ==> (x <= n); loop invariant m == x ==> (__BLAST_NONDET == 1); loop invariant m == x ==> (x == n); loop invariant m == x ==> (x == n + 1); loop invariant m == x ==> (x == n - 1); loop invariant m == x ==> (x == n - 2); loop invariant m == x ==> (x == n - 3); loop invariant m == x ==> (x == n - 4); loop invariant m == x ==> (x == n - 5); loop invariant m == x ==> (x == n - 6); loop invariant m == x ==> (x == n - 7); loop invariant m == x ==> (x == n - 8); loop invariant m == x ==> (x == n - 9); loop invariant m == x ==> (x == n - 10); loop invariant m == x ==> (x == n - 11); loop invariant m == x ==> (x == n - 12); loop invariant m == x ==> (x == n - 13); loop invariant m == x ==> (x == n - 14); loop invariant m == x ==> (x == n - 15); loop invariant m == x ==> (x == n - 16); loop invariant m == x ==> (x == n - 17); loop invariant m == x ==> (x == n - 18); loop invariant m == x ==> (x == n - 19); loop invariant m == x ==> (x == n - 20); loop invariant m == x ==> (x == n - 21); loop invariant m == x ==> (x == n - 22); loop invariant m == x ==> (x == n - 23); loop invariant m == x ==> (x == n - 24); loop invariant m == x ==> (x == n - 25); loop invariant m == x ==> (x == n - 26); loop invariant m == x ==> (x == n - 27); loop invariant m == x ==> (x == n - 28); loop invariant m == x ==> (x == n - 29); loop invariant m == x ==> (x == n - 30); loop invariant m == x ==> (x == n - 31); loop invariant m == x ==> (x == n - 32); loop invariant m == x ==> (x == n - 33); loop invariant m == x ==> (x == n - 34); loop invariant m == x ==> (x == n - 35); loop invariant m == x ==> (x == n - 36); loop invariant m == x ==> (x == n - 37); loop invariant m == x ==> (x == n - 38); loop invariant m == x ==> (x == n - 39); loop invariant m == x ==> (x == n - 40); loop invariant m == x ==> (x == n - 41); loop invariant m == x ==> (x == n - 42); loop invariant m == x ==> (x == n - 43); loop invariant m == x ==> (x == n - 44); loop invariant m == x ==> (x == n - 45); loop invariant m == x ==> (x == n - 46); loop invariant m == x ==> (x == n - 47); loop invariant m == x ==> (x == n - 48); loop invariant m == x ==> (x == n - 49); loop invariant m == x ==> (x == n - 50); loop invariant m == x ==> (x == n - 51); loop invariant m == x ==> (x == n - 52); loop invariant m == x ==> (x == n - 53); loop invariant m == x ==> (x == n - 54); loop invariant m == x ==> (x == n - 55); loop invariant m == x ==> (x == n - 56); loop invariant m == x ==> (x == n - 57); loop invariant m == x ==> (x == n - 58);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint __BLAST_NONDET;\nvoid main() {\n  int x,m,n;\n\n  x = 0;\n  m = 0;\n  /*@\nloop invariant i1: x >= 0; loop invariant n >= 0; loop invariant 0 <= m <= n; loop invariant m >= x; loop invariant m <= (n - 1); loop invariant m < x ==> (x == 0) || (x > n); loop invariant m < x ==> (m == x - 1); loop invariant m < x ==> (__BLAST_NONDET == 0); loop invariant m == x ==> (x <= n); loop invariant m == x ==> (__BLAST_NONDET == 1); loop invariant m == x ==> (x == n); loop invariant m == x ==> (x == n + 1); loop invariant m == x ==> (x == n - 1); loop invariant m == x ==> (x == n - 2); loop invariant m == x ==> (x == n - 3); loop invariant m == x ==> (x == n - 4); loop invariant m == x ==> (x == n - 5); loop invariant m == x ==> (x == n - 6); loop invariant m == x ==> (x == n - 7); loop invariant m == x ==> (x == n - 8); loop invariant m == x ==> (x == n - 9); loop invariant m == x ==> (x == n - 10); loop invariant m == x ==> (x == n - 11); loop invariant m == x ==> (x == n - 12); loop invariant m == x ==> (x == n - 13); loop invariant m == x ==> (x == n - 14); loop invariant m == x ==> (x == n - 15); loop invariant m == x ==> (x == n - 16); loop invariant m == x ==> (x == n - 17); loop invariant m == x ==> (x == n - 18); loop invariant m == x ==> (x == n - 19); loop invariant m == x ==> (x == n - 20); loop invariant m == x ==> (x == n - 21); loop invariant m == x ==> (x == n - 22); loop invariant m == x ==> (x == n - 23); loop invariant m == x ==> (x == n - 24); loop invariant m == x ==> (x == n - 25); loop invariant m == x ==> (x == n - 26); loop invariant m == x ==> (x == n - 27); loop invariant m == x ==> (x == n - 28); loop invariant m == x ==> (x == n - 29); loop invariant m == x ==> (x == n - 30); loop invariant m == x ==> (x == n - 31); loop invariant m == x ==> (x == n - 32); loop invariant m == x ==> (x == n - 33); loop invariant m == x ==> (x == n - 34); loop invariant m == x ==> (x == n - 35); loop invariant m == x ==> (x == n - 36); loop invariant m == x ==> (x == n - 37); loop invariant m == x ==> (x == n - 38); loop invariant m == x ==> (x == n - 39); loop invariant m == x ==> (x == n - 40); loop invariant m == x ==> (x == n - 41); loop invariant m == x ==> (x == n - 42); loop invariant m == x ==> (x == n - 43); loop invariant m == x ==> (x == n - 44); loop invariant m == x ==> (x == n - 45); loop invariant m == x ==> (x == n - 46); loop invariant m == x ==> (x == n - 47); loop invariant m == x ==> (x == n - 48); loop invariant m == x ==> (x == n - 49); loop invariant m == x ==> (x == n - 50); loop invariant m == x ==> (x == n - 51); loop invariant m == x ==> (x == n - 52); loop invariant m == x ==> (x == n - 53); loop invariant m == x ==> (x == n - 54); loop invariant m == x ==> (x == n - 55); loop invariant m == x ==> (x == n - 56); loop invariant m == x ==> (x == n - 57); loop invariant m == x ==> (x == n - 58);\n*/\nwhile( x < n ) {\n    if(__BLAST_NONDET)\n\tm = x;\n\tx++;\n  }\n  if( n > 0 )\n    {\n      {;\n//@ assert( 0<=m);\n}\n\n      {;\n//@ assert(m<n);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= m <= n;\nloop invariant m <= x;\nloop invariant x < n ==> m <= x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint __BLAST_NONDET;\nvoid main() {\n  int x,m,n;\n\n  x = 0;\n  m = 0;\n  /*@\n\n\nloop invariant i3: m <= x;\nloop invariant i4: x < n ==> m <= x;\n*/\nwhile( x < n ) {\n    if(__BLAST_NONDET)\n\tm = x;\n\tx++;\n  }\n  if( n > 0 )\n    {\n      {;\n//@ assert( 0<=m);\n}\n\n      {;\n//@ assert(m<n);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= m;\nloop invariant 0 <= n;\nloop invariant 0 <= m <= n;\nloop invariant !(__BLAST_NONDET ==> m < x);\nloop invariant !(__BLAST_NONDET ==> m >= x);\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant m >= 0;\nloop invariant m <= x;\nloop invariant n >= 0;\nloop invariant x <= n;\nloop invariant !(__BLAST_NONDET ==> m < x);\nloop invariant !(__BLAST_NONDET ==> m >= x);\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant m >= 0;\nloop invariant m <= x;\nloop invariant n >= 0;\nloop invariant x <= n;\nloop invariant !(__BLAST_NONDET ==> m < x);\nloop invariant !(__BLAST_NONDET ==> m >= x);\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant m >= 0;\nloop invariant m <= x;\nloop invariant n >= 0;\nloop invariant x <= n;\nloop invariant !(__BLAST_NONDET ==> m < x);\nloop invariant !(__BLAST_NONDET ==> m >= x);\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant m >= 0;\nloop invariant m <= x;\nloop invariant n >= 0;\nloop invariant x <= n;\nloop invariant !(__BLAST_NONDET ==> m < x);\nloop invariant !(__BLAST_NONDET ==> m >= x);\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant m >= 0;\nloop invariant m <= x;\nloop invariant n >= 0;\nloop invariant x <= n;\nloop invariant !(__BLAST_NONDET ==> m < x);\nloop invariant !(__BLAST_NONDET ==> m >= x);\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant m >= 0;\nloop invariant m <= x;\nloop invariant n >= 0;\nloop invariant x <= n;\nloop invariant !(__BLAST_NONDET ==> m < x);\nloop invariant !(__BLAST_NONDET ==> m >= x);\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant m >= 0;\nloop invariant m <= x;\nloop invariant n >= 0;\nloop invariant x <= n;\nloop invariant !(__BLAST_NONDET ==> m < x);\nloop invariant !(__BLAST_NONDET ==> m >= x);\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant m >= 0;\nloop invariant m <= x;\nloop invariant n >= 0;\nloop invariant x <= n;\nloop invariant !(__BLAST_NONDET ==> m < x);\nloop invariant !(__BLAST_NONDET ==> m >= x);\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant m >= 0;\nloop invariant m <= x;\nloop invariant n >= 0;\nloop invariant x <= n;\nloop invariant !(__BLAST_NONDET ==> m < x);\nloop invariant !(__BLAST_NONDET ==> m >= x);\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant m >= 0;\nloop invariant m <= x;\nloop invariant n >= 0;\nloop invariant x <= n;\nloop invariant !(__BLAST_NONDET ==> m < x);\nloop invariant !(__BLAST_NONDET ==> m >= x);\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant m >= 0;\nloop invariant m <= x;\nloop invariant n >= 0;\nloop invariant x <= n;\nloop invariant !(__BLAST_NONDET ==> m < x);\nloop invariant !(__BLAST_NONDET ==> m >= x);\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant m >= 0;\nloop invariant m <= x;\nloop invariant n >= 0;\nloop invariant x <= n;\nloop invariant !(__BLAST_NONDET ==> m < x);\nloop invariant !(__BLAST_NONDET ==> m >= x);\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant m >= 0;\nloop invariant m <= x;\nloop invariant n >= 0;\nloop invariant x <= n;\nloop invariant !(__BLAST_NONDET ==> m < x);\nloop invariant !(__BLAST_NONDET ==> m >= x);\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant m >= 0;\nloop invariant m <= x;\nloop invariant n >= 0;\nloop invariant x <= n;\nloop invariant !(__BLAST_NONDET ==> m < x);\nloop invariant !(__BLAST_NONDET ==> m >= x);\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant m >= 0;\nloop invariant m <= x;\nloop invariant n >= 0;\nloop invariant x <= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint __BLAST_NONDET;\nvoid main() {\n  int x,m,n;\n\n  x = 0;\n  m = 0;\n  /*@\n\n\n\n\n\n\nloop invariant i7: x >= 0;\nloop invariant i8: m >= 0;\nloop invariant i9: m <= x;\n\n*/\nwhile( x < n ) {\n    if(__BLAST_NONDET)\n\tm = x;\n\tx++;\n  }\n  if( n > 0 )\n    {\n      {;\n//@ assert( 0<=m);\n}\n\n      {;\n//@ assert(m<n);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m >= 0;\nloop invariant m <= x;\nloop invariant m <= n;\nloop invariant n >= 0;\nloop invariant n >= m;\nloop invariant n > 0 ==> x < n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant m >= 0;\nloop invariant m <= n;\nloop invariant n >= 0;\nloop invariant n >= m;\nloop invariant n > 0 ==> x < n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant m >= 0;\nloop invariant m <= n;\nloop invariant n >= 0;\nloop invariant n >= m;\nloop invariant n > 0 ==> x < n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant m >= 0;\nloop invariant m <= n;\nloop invariant n >= 0;\nloop invariant n >= m;\nloop invariant n > 0 ==> x < n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant m >= 0;\nloop invariant m <= n;\nloop invariant n >= 0;\nloop invariant n >= m;\nloop invariant n > 0 ==> x < n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant m >= 0;\nloop invariant m <= n;\nloop invariant n >= 0;\nloop invariant n >= m;\nloop invariant n > 0 ==> x < n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant m >= 0;\nloop invariant m <= n;\nloop invariant n >= 0;\nloop invariant n >= m;\nloop invariant n > 0 ==> x < n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant m >= 0;\nloop invariant m <= n;\nloop invariant n >= 0;\nloop invariant n >= m;\nloop invariant n > 0 ==> x < n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant m >= 0;\nloop invariant m <= n;\nloop invariant n >= 0;\nloop invariant n >= m;\nloop invariant n > 0 ==> x < n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant m >= 0;\nloop invariant m <= n;\nloop invariant n >= 0;\nloop invariant n >= m;\nloop invariant n > 0 ==> x < n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant m >= 0;\nloop invariant m <= n;\nloop invariant n >= 0;\nloop invariant n >= m;\nloop invariant n > 0 ==> x < n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant m >= 0;\nloop invariant m <= n;\nloop invariant n >= 0;\nloop invariant n >= m;\nloop invariant n > 0 ==> x < n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant m >= 0;\nloop invariant m <= n;\nloop invariant n >= 0;\nloop invariant n >= m;\nloop invariant n > 0 ==> x < n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant m >= 0;\nloop invariant m <= n;\nloop invariant n >= 0;\nloop invariant n >= m;\nloop invariant n > 0 ==> x < n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant m >= 0;\nloop invariant m <= n;\nloop invariant n >= 0;\nloop invariant n >= m;\nloop invariant n > 0 ==> x < n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant m >= 0;\nloop invariant m <= n;\nloop invariant n >= 0;\nloop invariant n >= m;\nloop invariant n > 0 ==> x < n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant m >= 0;\nloop invariant m <= n;\nloop invariant n >= 0;\nloop invariant n >= m;\nloop invariant n > 0 ==> x < n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant m >= 0;\nloop invariant m <= n;\nloop invariant n >= 0;\nloop invariant n >= m;\nloop invariant n > 0 ==> x < n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant m >= 0;\nloop invariant m <= n;\nloop invariant n >= 0;\nloop invariant n >= m;\nloop invariant n > 0 ==> x < n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant m >= 0;\nloop invariant m <= n;\nloop invariant n >= 0;\nloop invariant n >= m;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint __BLAST_NONDET;\nvoid main() {\n  int x,m,n;\n\n  x = 0;\n  m = 0;\n  /*@\n\nloop invariant i2: m >= 0;\nloop invariant i3: m <= x;\n\n\n\n\nloop invariant i8: x >= 0;\n\n*/\nwhile( x < n ) {\n    if(__BLAST_NONDET)\n\tm = x;\n\tx++;\n  }\n  if( n > 0 )\n    {\n      {;\n//@ assert( 0<=m);\n}\n\n      {;\n//@ assert(m<n);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= m <= x;\nloop invariant m < n ==> x == n;\nloop invariant x == 0 ==> m == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint __BLAST_NONDET;\nvoid main() {\n  int x,m,n;\n\n  x = 0;\n  m = 0;\n  /*@\n\nloop invariant i2: 0 <= m <= x;\n\nloop invariant i4: x == 0 ==> m == 0;\n*/\nwhile( x < n ) {\n    if(__BLAST_NONDET)\n\tm = x;\n\tx++;\n  }\n  if( n > 0 )\n    {\n      {;\n//@ assert( 0<=m);\n}\n\n      {;\n//@ assert(m<n);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m <= x;\nloop invariant m >= 0;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x == n ==> m == n;\nloop invariant m == 0 ==> x == 0;\nloop invariant m == n ==> x == n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint __BLAST_NONDET;\nvoid main() {\n  int x,m,n;\n\n  x = 0;\n  m = 0;\n  /*@\n\nloop invariant i2: m <= x;\nloop invariant i3: m >= 0;\n\n\n\nloop invariant i7: m == n ==> x == n;\n*/\nwhile( x < n ) {\n    if(__BLAST_NONDET)\n\tm = x;\n\tx++;\n  }\n  if( n > 0 )\n    {\n      {;\n//@ assert( 0<=m);\n}\n\n      {;\n//@ assert(m<n);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= m <= n;\nloop invariant m = x ==> 0 <= x <= n;\nloop invariant n > 0 ==> (x < n ==> x >= 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint __BLAST_NONDET;\nvoid main() {\n  int x,m,n;\n\n  x = 0;\n  m = 0;\n  /*@\n\n\nloop invariant i3: n > 0 ==> (x < n ==> x >= 0);\n*/\nwhile( x < n ) {\n    if(__BLAST_NONDET)\n\tm = x;\n\tx++;\n  }\n  if( n > 0 )\n    {\n      {;\n//@ assert( 0<=m);\n}\n\n      {;\n//@ assert(m<n);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 13,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= m <= x;\nloop invariant m <= n ==> x < n;\nloop invariant m < n ==> x <= n;\nloop invariant x < n ==> m <= x;\nloop invariant x < n ==> m < n;\nloop invariant x < n ==> m <= x < n;\nloop invariant x < n ==> m < x;\nloop invariant x < n ==> m < x < n;\nloop invariant x < n ==> m < n ==> x < n;\nloop invariant x < n ==> m < n ==> x <= n;\nloop invariant x < n ==> m < n ==> x < n ==> m <= x;\nloop invariant x < n ==> m < n ==> x < n ==> m < x;\nloop invariant x < n ==> m < n ==> x < n ==> m < x < n;\nloop invariant x < n ==> m < n ==> x < n ==> m < n ==> x < n;\nloop invariant x < n ==> m < n ==> x < n ==> m < n ==> x <= n;\nloop invariant x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m <= x;\nloop invariant x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < x;\nloop invariant x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < x < n;\nloop invariant x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x < n;\nloop invariant x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x <= n;\nloop invariant x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m <= x;\nloop invariant x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < x;\nloop invariant x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < x < n;\nloop invariant x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x < n;\nloop invariant x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x <= n;\nloop invariant x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m <= x;\nloop invariant x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < x;\nloop invariant x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < x < n;\nloop invariant x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x < n;\nloop invariant x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x <= n;\nloop invariant x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m <= x;\nloop invariant x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < x;\nloop invariant x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < x < n;\nloop invariant x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x < n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint __BLAST_NONDET;\nvoid main() {\n  int x,m,n;\n\n  x = 0;\n  m = 0;\n  /*@\n\nloop invariant i2: 0 <= m <= x;\n\nloop invariant i4: m < n ==> x <= n;\nloop invariant i5: x < n ==> m <= x;\nloop invariant i6: x < n ==> m < n;\nloop invariant i7: x < n ==> m <= x < n;\n\n\nloop invariant i10: x < n ==> m < n ==> x < n;\nloop invariant i11: x < n ==> m < n ==> x <= n;\nloop invariant i12: x < n ==> m < n ==> x < n ==> m <= x;\n\n\nloop invariant i15: x < n ==> m < n ==> x < n ==> m < n ==> x < n;\nloop invariant i16: x < n ==> m < n ==> x < n ==> m < n ==> x <= n;\nloop invariant i17: x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m <= x;\n\n\nloop invariant i20: x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x < n;\nloop invariant i21: x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x <= n;\nloop invariant i22: x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m <= x;\n\n\nloop invariant i25: x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x < n;\nloop invariant i26: x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x <= n;\nloop invariant i27: x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m <= x;\n\n\nloop invariant i30: x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x < n;\nloop invariant i31: x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x <= n;\nloop invariant i32: x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m <= x;\n\n\nloop invariant i35: x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x < n;\n*/\nwhile( x < n ) {\n    if(__BLAST_NONDET)\n\tm = x;\n\tx++;\n  }\n  if( n > 0 )\n    {\n      {;\n//@ assert( 0<=m);\n}\n\n      {;\n//@ assert(m<n);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m <= n;\nloop invariant m <= x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint __BLAST_NONDET;\nvoid main() {\n  int x,m,n;\n\n  x = 0;\n  m = 0;\n  /*@\n\n\nloop invariant i3: m <= x;\n*/\nwhile( x < n ) {\n    if(__BLAST_NONDET)\n\tm = x;\n\tx++;\n  }\n  if( n > 0 )\n    {\n      {;\n//@ assert( 0<=m);\n}\n\n      {;\n//@ assert(m<n);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x; loop invariant n > 0 ==> (0 <= m <= n); loop invariant n > 0 ==> (m <= x); loop invariant x < n; loop invariant n == 0 ==> (m == 0); loop invariant n == 0 ==> (x == 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint __BLAST_NONDET;\nvoid main() {\n  int x,m,n;\n\n  x = 0;\n  m = 0;\n  /*@\nloop invariant i1: 0 <= x; loop invariant n > 0 ==> (0 <= m <= n); loop invariant n > 0 ==> (m <= x); loop invariant x < n; loop invariant n == 0 ==> (m == 0); loop invariant n == 0 ==> (x == 0);\n*/\nwhile( x < n ) {\n    if(__BLAST_NONDET)\n\tm = x;\n\tx++;\n  }\n  if( n > 0 )\n    {\n      {;\n//@ assert( 0<=m);\n}\n\n      {;\n//@ assert(m<n);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= m <= n;\nloop invariant x <= m => m == x;\nloop invariant n > 0 ==> m < n;\nloop invariant 0 <= x <= n;\nloop invariant 0 <= m <= n;\nloop invariant x <= m ==> m == x;\nloop invariant n > 0 ==> m < n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint __BLAST_NONDET;\nvoid main() {\n  int x,m,n;\n\n  x = 0;\n  m = 0;\n  /*@\n\n\n\nloop invariant i4: n > 0 ==> m < n;\nloop invariant i5: x <= m ==> m == x;\n*/\nwhile( x < n ) {\n    if(__BLAST_NONDET)\n\tm = x;\n\tx++;\n  }\n  if( n > 0 )\n    {\n      {;\n//@ assert( 0<=m);\n}\n\n      {;\n//@ assert(m<n);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 51: Assignment operators not allowed in annotations.",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint __BLAST_NONDET;\nvoid main() {\n  int x,m,n;\n\n  x = 0;\n  m = 0;\n  /*@\nloop invariant i1: 0 <= x <= n;\nloop invariant i2: 0 <= m <= n;\nloop invariant i3: (x >= m) ==> (m <= x);\nloop invariant i4: (x >= m) ==> (m <= n);\nloop invariant i5: (x >= m) ==> (x <= n);\nloop invariant i6: (x >= m) ==> (n > 0);\nloop invariant i7: 0 <= m <= x;\nloop invariant i8: m <= n;\nloop invariant i9: m >= 0;\nloop invariant i10: x >= 0;\nloop invariant i11: n >= 0;\nloop invariant i12: x < n ==> m < n;\nloop invariant i13: x < n ==> m <= x;\nloop invariant i14: x < n ==> 0 <= m;\nloop invariant i15: x < n ==> 0 <= x;\nloop invariant i16: x < n ==> 0 <= n;\nloop invariant i17: x < n ==> m <= n;\nloop invariant i18: x < n ==> m >= 0;\nloop invariant i19: x < n ==> x >= 0;\nloop invariant i20: x < n ==> n >= 0;\nloop invariant i21: x >= m;\nloop invariant i22: m <= n - x;\nloop invariant i23: n > 0 ==> m < n;\nloop invariant i24: x >= 0; loop invariant n >= 0; loop invariant 0 <= m <= n; loop invariant m >= x; loop invariant m <= (n - 1); loop invariant m < x ==> (x == 0) || (x > n); loop invariant m < x ==> (m == x - 1); loop invariant m < x ==> (__BLAST_NONDET == 0); loop invariant m == x ==> (x <= n); loop invariant m == x ==> (__BLAST_NONDET == 1); loop invariant m == x ==> (x == n); loop invariant m == x ==> (x == n + 1); loop invariant m == x ==> (x == n - 1); loop invariant m == x ==> (x == n - 2); loop invariant m == x ==> (x == n - 3); loop invariant m == x ==> (x == n - 4); loop invariant m == x ==> (x == n - 5); loop invariant m == x ==> (x == n - 6); loop invariant m == x ==> (x == n - 7); loop invariant m == x ==> (x == n - 8); loop invariant m == x ==> (x == n - 9); loop invariant m == x ==> (x == n - 10); loop invariant m == x ==> (x == n - 11); loop invariant m == x ==> (x == n - 12); loop invariant m == x ==> (x == n - 13); loop invariant m == x ==> (x == n - 14); loop invariant m == x ==> (x == n - 15); loop invariant m == x ==> (x == n - 16); loop invariant m == x ==> (x == n - 17); loop invariant m == x ==> (x == n - 18); loop invariant m == x ==> (x == n - 19); loop invariant m == x ==> (x == n - 20); loop invariant m == x ==> (x == n - 21); loop invariant m == x ==> (x == n - 22); loop invariant m == x ==> (x == n - 23); loop invariant m == x ==> (x == n - 24); loop invariant m == x ==> (x == n - 25); loop invariant m == x ==> (x == n - 26); loop invariant m == x ==> (x == n - 27); loop invariant m == x ==> (x == n - 28); loop invariant m == x ==> (x == n - 29); loop invariant m == x ==> (x == n - 30); loop invariant m == x ==> (x == n - 31); loop invariant m == x ==> (x == n - 32); loop invariant m == x ==> (x == n - 33); loop invariant m == x ==> (x == n - 34); loop invariant m == x ==> (x == n - 35); loop invariant m == x ==> (x == n - 36); loop invariant m == x ==> (x == n - 37); loop invariant m == x ==> (x == n - 38); loop invariant m == x ==> (x == n - 39); loop invariant m == x ==> (x == n - 40); loop invariant m == x ==> (x == n - 41); loop invariant m == x ==> (x == n - 42); loop invariant m == x ==> (x == n - 43); loop invariant m == x ==> (x == n - 44); loop invariant m == x ==> (x == n - 45); loop invariant m == x ==> (x == n - 46); loop invariant m == x ==> (x == n - 47); loop invariant m == x ==> (x == n - 48); loop invariant m == x ==> (x == n - 49); loop invariant m == x ==> (x == n - 50); loop invariant m == x ==> (x == n - 51); loop invariant m == x ==> (x == n - 52); loop invariant m == x ==> (x == n - 53); loop invariant m == x ==> (x == n - 54); loop invariant m == x ==> (x == n - 55); loop invariant m == x ==> (x == n - 56); loop invariant m == x ==> (x == n - 57); loop invariant m == x ==> (x == n - 58);\nloop invariant i25: m <= x;\nloop invariant i26: 0 <= x <= m;\nloop invariant i27: 0 <= n;\nloop invariant i28: !(__BLAST_NONDET ==> m < x);\nloop invariant i29: !(__BLAST_NONDET ==> m >= x);\nloop invariant i30: x <= n;\nloop invariant i31: n >= m;\nloop invariant i32: n > 0 ==> x < n;\nloop invariant i33: m < n ==> x == n;\nloop invariant i34: x == 0 ==> m == 0;\nloop invariant i35: x == n ==> m == n;\nloop invariant i36: m == 0 ==> x == 0;\nloop invariant i37: m == n ==> x == n;\nloop invariant i38: m = x ==> 0 <= x <= n;\nloop invariant i39: n > 0 ==> (x < n ==> x >= 0);\nloop invariant i40: m <= n ==> x < n;\nloop invariant i41: m < n ==> x <= n;\nloop invariant i42: x < n ==> m <= x < n;\nloop invariant i43: x < n ==> m < x;\nloop invariant i44: x < n ==> m < x < n;\nloop invariant i45: x < n ==> m < n ==> x < n;\nloop invariant i46: x < n ==> m < n ==> x <= n;\nloop invariant i47: x < n ==> m < n ==> x < n ==> m <= x;\nloop invariant i48: x < n ==> m < n ==> x < n ==> m < x;\nloop invariant i49: x < n ==> m < n ==> x < n ==> m < x < n;\nloop invariant i50: x < n ==> m < n ==> x < n ==> m < n ==> x < n;\nloop invariant i51: x < n ==> m < n ==> x < n ==> m < n ==> x <= n;\nloop invariant i52: x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m <= x;\nloop invariant i53: x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < x;\nloop invariant i54: x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < x < n;\nloop invariant i55: x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x < n;\nloop invariant i56: x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x <= n;\nloop invariant i57: x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m <= x;\nloop invariant i58: x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < x;\nloop invariant i59: x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < x < n;\nloop invariant i60: x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x < n;\nloop invariant i61: x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x <= n;\nloop invariant i62: x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m <= x;\nloop invariant i63: x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < x;\nloop invariant i64: x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < x < n;\nloop invariant i65: x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x < n;\nloop invariant i66: x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x <= n;\nloop invariant i67: x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m <= x;\nloop invariant i68: x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < x;\nloop invariant i69: x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < x < n;\nloop invariant i70: x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x < n;\nloop invariant i71: 0 <= x; loop invariant n > 0 ==> (0 <= m <= n); loop invariant n > 0 ==> (m <= x); loop invariant x < n; loop invariant n == 0 ==> (m == 0); loop invariant n == 0 ==> (x == 0);\nloop invariant i72: x <= m => m == x;\nloop invariant i73: x <= m ==> m == x;\n*/\nwhile( x < n ) {\n    if(__BLAST_NONDET)\n\tm = x;\n\tx++;\n  }\n  if( n > 0 )\n    {\n      {;\n//@ assert( 0<=m);\n}\n\n      {;\n//@ assert(m<n);\n}\n\n    }\n}",
        "combined_annotation_num_solver_calls": 11,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint __BLAST_NONDET;\nvoid main() {\n  int x,m,n;\n\n  x = 0;\n  m = 0;\n  /*@\n\n\nloop invariant i3: (x >= m) ==> (m <= x);\n\n\n\nloop invariant i7: 0 <= m <= x;\n\nloop invariant i9: m >= 0;\nloop invariant i10: x >= 0;\n\nloop invariant i12: x < n ==> m < n;\nloop invariant i13: x < n ==> m <= x;\nloop invariant i14: x < n ==> 0 <= m;\nloop invariant i15: x < n ==> 0 <= x;\nloop invariant i16: x < n ==> 0 <= n;\nloop invariant i17: x < n ==> m <= n;\nloop invariant i18: x < n ==> m >= 0;\nloop invariant i19: x < n ==> x >= 0;\nloop invariant i20: x < n ==> n >= 0;\nloop invariant i21: x >= m;\n\nloop invariant i23: n > 0 ==> m < n;\nloop invariant i24: x >= 0; loop invariant n >= 0; loop invariant 0 <= m <= n; loop invariant m >= x; loop invariant m <= (n - 1); loop invariant m < x ==> (x == 0) || (x > n); loop invariant m < x ==> (m == x - 1); loop invariant m < x ==> (__BLAST_NONDET == 0); loop invariant m == x ==> (x <= n); loop invariant m == x ==> (__BLAST_NONDET == 1); loop invariant m == x ==> (x == n); loop invariant m == x ==> (x == n + 1); loop invariant m == x ==> (x == n - 1); loop invariant m == x ==> (x == n - 2); loop invariant m == x ==> (x == n - 3); loop invariant m == x ==> (x == n - 4); loop invariant m == x ==> (x == n - 5); loop invariant m == x ==> (x == n - 6); loop invariant m == x ==> (x == n - 7); loop invariant m == x ==> (x == n - 8); loop invariant m == x ==> (x == n - 9); loop invariant m == x ==> (x == n - 10); loop invariant m == x ==> (x == n - 11); loop invariant m == x ==> (x == n - 12); loop invariant m == x ==> (x == n - 13); loop invariant m == x ==> (x == n - 14); loop invariant m == x ==> (x == n - 15); loop invariant m == x ==> (x == n - 16); loop invariant m == x ==> (x == n - 17); loop invariant m == x ==> (x == n - 18); loop invariant m == x ==> (x == n - 19); loop invariant m == x ==> (x == n - 20); loop invariant m == x ==> (x == n - 21); loop invariant m == x ==> (x == n - 22); loop invariant m == x ==> (x == n - 23); loop invariant m == x ==> (x == n - 24); loop invariant m == x ==> (x == n - 25); loop invariant m == x ==> (x == n - 26); loop invariant m == x ==> (x == n - 27); loop invariant m == x ==> (x == n - 28); loop invariant m == x ==> (x == n - 29); loop invariant m == x ==> (x == n - 30); loop invariant m == x ==> (x == n - 31); loop invariant m == x ==> (x == n - 32); loop invariant m == x ==> (x == n - 33); loop invariant m == x ==> (x == n - 34); loop invariant m == x ==> (x == n - 35); loop invariant m == x ==> (x == n - 36); loop invariant m == x ==> (x == n - 37); loop invariant m == x ==> (x == n - 38); loop invariant m == x ==> (x == n - 39); loop invariant m == x ==> (x == n - 40); loop invariant m == x ==> (x == n - 41); loop invariant m == x ==> (x == n - 42); loop invariant m == x ==> (x == n - 43); loop invariant m == x ==> (x == n - 44); loop invariant m == x ==> (x == n - 45); loop invariant m == x ==> (x == n - 46); loop invariant m == x ==> (x == n - 47); loop invariant m == x ==> (x == n - 48); loop invariant m == x ==> (x == n - 49); loop invariant m == x ==> (x == n - 50); loop invariant m == x ==> (x == n - 51); loop invariant m == x ==> (x == n - 52); loop invariant m == x ==> (x == n - 53); loop invariant m == x ==> (x == n - 54); loop invariant m == x ==> (x == n - 55); loop invariant m == x ==> (x == n - 56); loop invariant m == x ==> (x == n - 57); loop invariant m == x ==> (x == n - 58);\nloop invariant i25: m <= x;\nloop invariant i26: 0 <= x <= m;\nloop invariant i27: 0 <= n;\nloop invariant i28: !(__BLAST_NONDET ==> m < x);\nloop invariant i29: !(__BLAST_NONDET ==> m >= x);\nloop invariant i30: x <= n;\nloop invariant i31: n >= m;\nloop invariant i32: n > 0 ==> x < n;\nloop invariant i33: m < n ==> x == n;\nloop invariant i34: x == 0 ==> m == 0;\nloop invariant i35: x == n ==> m == n;\nloop invariant i36: m == 0 ==> x == 0;\nloop invariant i37: m == n ==> x == n;\n\nloop invariant i39: n > 0 ==> (x < n ==> x >= 0);\nloop invariant i40: m <= n ==> x < n;\nloop invariant i41: m < n ==> x <= n;\nloop invariant i42: x < n ==> m <= x < n;\nloop invariant i43: x < n ==> m < x;\nloop invariant i44: x < n ==> m < x < n;\nloop invariant i45: x < n ==> m < n ==> x < n;\nloop invariant i46: x < n ==> m < n ==> x <= n;\nloop invariant i47: x < n ==> m < n ==> x < n ==> m <= x;\nloop invariant i48: x < n ==> m < n ==> x < n ==> m < x;\nloop invariant i49: x < n ==> m < n ==> x < n ==> m < x < n;\nloop invariant i50: x < n ==> m < n ==> x < n ==> m < n ==> x < n;\nloop invariant i51: x < n ==> m < n ==> x < n ==> m < n ==> x <= n;\nloop invariant i52: x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m <= x;\nloop invariant i53: x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < x;\nloop invariant i54: x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < x < n;\nloop invariant i55: x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x < n;\nloop invariant i56: x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x <= n;\nloop invariant i57: x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m <= x;\nloop invariant i58: x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < x;\nloop invariant i59: x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < x < n;\nloop invariant i60: x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x < n;\nloop invariant i61: x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x <= n;\nloop invariant i62: x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m <= x;\nloop invariant i63: x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < x;\nloop invariant i64: x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < x < n;\nloop invariant i65: x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x < n;\nloop invariant i66: x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x <= n;\nloop invariant i67: x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m <= x;\nloop invariant i68: x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < x;\nloop invariant i69: x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < x < n;\nloop invariant i70: x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x < n ==> m < n ==> x < n;\nloop invariant i71: 0 <= x; loop invariant n > 0 ==> (0 <= m <= n); loop invariant n > 0 ==> (m <= x); loop invariant x < n; loop invariant n == 0 ==> (m == 0); loop invariant n == 0 ==> (x == 0);\n\nloop invariant i73: x <= m ==> m == x;\n*/\nwhile( x < n ) {\n    if(__BLAST_NONDET)\n\tm = x;\n\tx++;\n  }\n  if( n > 0 )\n    {\n      {;\n//@ assert( 0<=m);\n}\n\n      {;\n//@ assert(m<n);\n}\n\n    }\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/split.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/11.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/15.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/16.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/18.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/23.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/30.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/32.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/37.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/38.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/41.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/43.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/44.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/46.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/popl.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/05.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/07.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/37.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/39.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/gulv_simp.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/substring1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/xy10.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/const_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/multivar_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/phases_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/simple_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/simple_safe2.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/simple_safe3.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/simple_safe4.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/underapprox_safe2.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/barbr.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/barbrprime.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/bk-nat.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/bkley.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/efm.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/ex1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/lifnat.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/lifnatprime.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/lifo.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/seesaw.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/substring1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/swim.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/swim1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/gulwani_cegar2.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/13.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/14.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/19.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/20.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/39.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/cav.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/19.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/gulv.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/pldi082_unbounded.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/underapprox_unsafe1.c"
        ],
        "skipped": [],
        "total": 164,
        "success_count": 138,
        "failure_count": 26,
        "success_rate": 0.8414634146341463
    }
}