{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\n#define a (1)\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n  int v1, v2, v3;\n\n  while(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 1 <= x <= loop1;\nloop invariant 0 <= sn <= x*a;\nloop invariant sn == x*a || sn == 0;\nloop invariant v1 <= unknown_int();\nloop invariant v2 <= unknown_int();\nloop invariant v3 <= unknown_int();\nloop invariant v1 >= unknown_int();\nloop invariant v2 >= unknown_int();\nloop invariant v3 >= unknown_int();\nloop invariant sn == unknown_uint() + unknown_uint();\nloop invariant sn == unknown_uint() + unknown_uint() + unknown_uint();\n*/\n```",
            "```\n/*@\nloop invariant y1 >= 1;\nloop invariant y1 <= (n1 + 1);\nloop invariant sn1 == (x1 * ((x1 + 1) / 2));\nloop invariant sn1 == (x1 * ((x1 + 1) / 2));\nloop invariant sn1 == (x1 * ((x1 + 1) / 2));\nloop invariant sn1 == (x1 * ((x1 + 1) / 2));\nloop invariant sn1 == (x1 * ((x1 + 1) / 2));\nloop invariant sn1 == (x1 * ((x1 + 1) / 2));\nloop invariant sn1 == (x1 * ((x1 + 1) / 2));\nloop invariant sn1 == (x1 * ((x1 + 1) / 2));\nloop invariant sn1 == (x1 * ((x1 + 1) / 2));\nloop invariant sn1 == (x1 * ((x1 + 1) / 2));\nloop invariant sn1 == (x1 * ((x1 + 1) / 2));\nloop invariant sn1 == (x1 * ((x1 + 1) / 2));\nloop invariant sn1 == (x1 * ((x1 + 1) / 2));\nloop invariant sn1 == (x1 * ((x1 + 1) / 2));\nloop invariant sn1 == (x1 * ((x1 + 1) / 2));\nloop invariant sn1 == (x1 * ((x1 + 1) / 2));\nloop invariant sn1 == (x1 * ((x1 + 1) / 2));\nloop invariant sn1 == (x1 * ((x1 + 1) / 2));\nloop invariant sn1 == (x1 * ((x1 + 1) / 2));\nloop invariant sn1 == (x1 * ((x1 + 1) / 2));\nloop invariant sn1 == (x1 * ((x1 + 1) / 2));\nloop invariant sn1 == (x1 * ((x1 + 1) / 2));\nloop invariant sn1 == (x1 * ((x1 + 1) / 2));\nloop invariant sn1 == (x1 * ((x1 + 1) / 2));\nloop invariant sn1 == (x1 * ((x1 + 1) / 2));\nloop invariant sn1 == (x1 * ((x1 + 1) / 2));\nloop invariant sn1 == (x1 * ((x1 + 1) / 2));\nloop invariant sn1 == (x1 * ((x1 + 1) / 2));\nloop invariant sn1 == (x1 * ((x1 + 1) / 2));\nloop invariant sn1 == (x1 * ((x1 + 1) / 2));\nloop invariant sn1 == (x1 * ((x1 + 1) / 2));\nloop invariant sn1 == (x1 * ((x1 + 1) / 2));\nloop invariant sn1 == (x1 * ((x1 + 1) / 2));\nloop invariant sn1 == (x1 * ((x1 + 1) / 2));\nloop invariant sn1 == (x1 * ((x1 + 1) / 2));\nloop invariant sn1 == (x1 * ((x1 + 1) / 2));\nloop invariant sn1 == (x1 * ((x1 + 1) / 2));\nloop invariant sn1 == (x1 * ((x1 + 1) / 2));\nloop invariant sn1 == (x1 * ((x1 + 1) / 2));\nloop invariant sn1 == (x1 * ((x1 + 1) / 2));\nloop invariant sn1 == (x1 * ((x1 + 1) / 2));\nloop invariant sn1 == (x1 * ((x1 + 1) / 2));\nloop invariant sn1 == (x1 * ((x1 + 1) / 2));\nloop invariant sn1 == (x1 * ((x1 + 1) / 2));\nloop invariant sn1 == (x1 * ((x1 + 1) / 2));\nloop invariant sn1 == (x1 * ((x1 + 1) / 2));\nloop invariant sn1 == (x1 * ((x1 + 1) / 2));\nloop invariant sn1 == (x1 * ((x1 + 1) / 2));\nloop invariant sn1 == (x1 * ((x1 + 1) / 2));\n*/\n```",
            "```\n/*@\nloop invariant 0 <= sn <= n1 * a;\nloop invariant 0 <= x <= n1;\nloop invariant v1 = unknown_int() ==> v1 >= INT_MIN && v1 <= INT_MAX;\nloop invariant v2 = unknown_int() ==> v2 >= INT_MIN && v2 <= INT_MAX;\nloop invariant v3 = unknown_int() ==> v3 >= INT_MIN && v3 <= INT_MAX;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= a <= 1;\nloop invariant 0 <= sn <= 1;\nloop invariant 0 <= x <= 1;\nloop invariant 0 <= v1 <= 1;\nloop invariant 0 <= v2 <= 1;\nloop invariant 0 <= v3 <= 1;\nloop invariant sn <= x * a;\nloop invariant sn <= 1;\nloop invariant x <= 1;\n*/\n```",
            "```\n/*@\nloop invariant a == 1;\nloop invariant sn <= x * a;\nloop invariant x <= n1;\nloop invariant loop1 <= n1;\nloop invariant v1 <= INT_MAX;\nloop invariant v2 <= INT_MAX;\nloop invariant v3 <= INT_MAX;\nloop invariant v1 >= INT_MIN;\nloop invariant v2 >= INT_MIN;\nloop invariant v3 >= INT_MIN;\nloop invariant sn == x * 1 || sn == 0;\nloop invariant sn <= x * 1 || sn == 0;\nloop invariant sn == x * 1 || sn == 0;\nloop invariant sn <= x * 1 || sn == 0;\nloop invariant sn == x * 1 || sn == 0;\nloop invariant sn <= x * 1 || sn == 0;\nloop invariant sn == x * 1 || sn == 0;\nloop invariant sn <= x * 1 || sn == 0;\nloop invariant sn == x * 1 || sn == 0;\nloop invariant sn <= x * 1 || sn == 0;\nloop invariant sn == x * 1 || sn == 0;\nloop invariant sn <= x * 1 || sn == 0;\nloop invariant sn == x * 1 || sn == 0;\nloop invariant sn <= x * 1 || sn == 0;\nloop invariant sn == x * 1 || sn == 0;\nloop invariant sn <= x * 1 || sn == 0;\nloop invariant sn == x * 1 || sn == 0;\nloop invariant sn <= x * 1 || sn == 0;\nloop invariant sn == x * 1 || sn == 0;\nloop invariant sn <= x * 1 || sn == 0;\nloop invariant sn == x * 1 || sn == 0;\nloop invariant sn <= x * 1 || sn == 0;\nloop invariant sn == x * 1 || sn == 0;\nloop invariant sn <= x * 1 || sn == 0;\nloop invariant sn == x * 1 || sn == 0;\nloop invariant sn <= x * 1 || sn == 0;\nloop invariant sn == x * 1 || sn == 0;\nloop invariant sn <= x * 1 || sn == 0;\nloop invariant sn == x * 1 || sn == 0;\nloop invariant sn <= x * 1 || sn == 0;\nloop invariant sn == x * 1 || sn == 0;\nloop invariant sn <= x * 1 || sn == 0;\nloop invariant sn == x * 1 || sn == 0;\nloop invariant sn <= x * 1 || sn == 0;\nloop invariant sn == x * 1 || sn == 0;\nloop invariant sn <= x * 1 || sn == 0;\nloop invariant sn == x * 1 || sn == 0;\nloop invariant sn <= x * 1 || sn == 0;\nloop invariant sn == x * 1 || sn == 0;\nloop invariant sn <= x * 1 || sn == 0;\nloop invariant sn == x * 1 || sn == 0;\nloop invariant sn <= x * 1 || sn == 0;\nloop invariant sn == x * 1 || sn == 0;\nloop invariant sn <= x * 1 || sn == 0;\nloop invariant sn == x * 1 || sn == 0;\nloop invariant sn <= x * 1 || sn == 0;\nloop invariant sn == x * 1 || sn == 0;\nloop invariant sn <= x * 1 || sn == 0;\nloop invariant sn == x * 1 || sn == 0;\nloop invariant sn <= x * 1 || sn == 0;\nloop invariant sn == x * 1 || sn == 0;\nloop invariant sn <= x * 1 || sn == 0;\nloop invariant sn == x * 1 || sn == 0;\nloop invariant sn <= x * 1 || sn == 0;\nloop invariant sn == x * 1 || sn == 0;\nloop invariant sn <= x * 1 || sn == 0;\nloop invariant sn == x * 1 || sn == 0;\nloop invariant sn <= x * 1 || sn == 0;\nloop invariant sn == x * 1 || sn == 0;\nloop invariant sn <= x * 1 || sn == 0;\nloop invariant sn == x * 1 || sn == 0;\nloop invariant sn <= x * 1 || sn == 0;\nloop invariant sn == x * 1 || sn == 0;\nloop invariant sn <= x * 1 || sn == 0;\nloop invariant sn == x * 1 || sn == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x;\nloop invariant sn == x * a;\nloop invariant v1 == unknown_int();\nloop invariant v2 == unknown_int();\nloop invariant v3 == unknown_int();\n*/\n```",
            "```\n/*@\nloop invariant 0 <= sn <= n1 * a;\nloop invariant x <= loop1;\nloop invariant v1 <= v2;\nloop invariant v2 <= v3;\nloop invariant v3 <= unknown_int();\nloop invariant v1 <= unknown_int();\nloop invariant v2 <= unknown_int();\nloop invariant v3 <= unknown_int();\nloop invariant v1 <= 0;\nloop invariant v2 <= 0;\nloop invariant v3 <= 0;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant sn <= loop1 * a;\nloop invariant x <= loop1;\nloop invariant v1 <= v2;\nloop invariant v2 <= v3;\nloop invariant v3 <= unknown_int();\nloop invariant v1 <= unknown_int();\nloop invariant v2 <= unknown_int();\nloop invariant v3 <= unknown_int();\nloop invariant v1 <= 0;\nloop invariant v2 <= 0;\nloop invariant v3 <= 0;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant sn <= loop1 * a;\nloop invariant x <= loop1;\nloop invariant v1 <= v2;\nloop invariant v2 <= v3;\nloop invariant v3 <= unknown_int();\nloop invariant v1 <= unknown_int();\nloop invariant v2 <= unknown_int();\nloop invariant v3 <= unknown_int();\nloop invariant v1 <= 0;\nloop invariant v2 <= 0;\nloop invariant v3 <= 0;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant sn <= loop1 * a;\nloop invariant x <= loop1;\nloop invariant v1 <= v2;\nloop invariant v2 <= v3;\nloop invariant v3 <= unknown_int();\nloop invariant v1 <= unknown_int();\nloop invariant v2 <= unknown_int();\nloop invariant v3 <= unknown_int();\nloop invariant v1 <= 0;\nloop invariant v2 <= 0;\nloop invariant v3 <= 0;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant sn <= loop1 * a;\nloop invariant x <= loop1;\nloop invariant v1 <= v2;\nloop invariant v2 <= v3;\nloop invariant v3 <= unknown_int();\nloop invariant v1 <= unknown_int();\nloop invariant v2 <= unknown_int();\nloop invariant v3 <= unknown_int();\nloop invariant v1 <= 0;\nloop invariant v2 <= 0;\nloop invariant v3 <= 0;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant sn <= loop1 * a;\nloop invariant x <= loop1;\nloop invariant v1 <= v2;\nloop invariant v2 <= v3;\nloop invariant v3 <= unknown_int();\nloop invariant v1 <= unknown_int();\nloop invariant v2 <= unknown_int();\nloop invariant v3 <= unknown_int();\nloop invariant v1 <= 0;\nloop invariant v2 <= 0;\nloop invariant v3 <= 0;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant sn <= loop1 * a;\nloop invariant x <= loop1;\nloop invariant v1 <= v2;\nloop invariant v2 <= v3;\nloop invariant v3 <= unknown_int();\nloop invariant v1 <= unknown_int();\nloop invariant v2 <= unknown_int();\nloop invariant v3 <= unknown_int();\nloop invariant v1 <= 0;\nloop invariant v2 <= 0;\nloop invariant v3 <= 0;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant sn <= loop1 * a;\nloop invariant x <= loop1;\nloop invariant v1 <= v2;\nloop invariant v2 <= v3;\nloop invariant v3 <= unknown_int();\nloop invariant v1 <= unknown_int();\nloop invariant v2 <= unknown_int();\nloop invariant v3 <= unknown_int();\nloop invariant v1 <= 0;\nloop invariant v2 <= 0;\nloop invariant v3 <= 0;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant sn <= loop1 * a;\nloop invariant x <= loop1;\nloop invariant v1 <= v2;\nloop invariant v2 <= v3;\nloop invariant v3 <= unknown_int();\nloop invariant v1 <= unknown_int();\nloop invariant v2 <= unknown_int();\nloop invariant v3 <= unknown_int();\nloop invariant v1 <= 0;\nloop invariant v2 <= 0;\nloop invariant v3 <= 0;\nloop invariant v1 >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= sn;\nloop invariant x == sn/a;\nloop invariant sn % a == 0;\nloop invariant sn >= 0;\nloop invariant sn <= a*loop1;\nloop invariant sn <= a*n1;\nloop invariant sn >= a*(loop1-x);\nloop invariant sn >= a*(n1-x);\nloop invariant sn == 0 || sn >= a;\nloop invariant sn == 0 || sn <= a*(loop1-x);\nloop invariant sn == 0 || sn <= a*(n1-x);\nloop invariant sn == 0 || sn >= a*(loop1-a);\nloop invariant sn == 0 || sn >= a*(n1-a);\nloop invariant sn == 0 || sn <= a*(loop1-a);\nloop invariant sn == 0 || sn <= a*(n1-a);\nloop invariant sn == 0 || sn >= a*(loop1-1);\nloop invariant sn == 0 || sn >= a*(n1-1);\nloop invariant sn == 0 || sn <= a*(loop1-1);\nloop invariant sn == 0 || sn <= a*(n1-1);\nloop invariant sn == 0 || sn >= a*(loop1-2);\nloop invariant sn == 0 || sn >= a*(n1-2);\nloop invariant sn == 0 || sn <= a*(loop1-2);\nloop invariant sn == 0 || sn <= a*(n1-2);\nloop invariant sn == 0 || sn >= a*(loop1-3);\nloop invariant sn == 0 || sn >= a*(n1-3);\nloop invariant sn == 0 || sn <= a*(loop1-3);\nloop invariant sn == 0 || sn <= a*(n1-3);\nloop invariant sn == 0 || sn >= a*(loop1-4);\nloop invariant sn == 0 || sn >= a*(n1-4);\nloop invariant sn == 0 || sn <= a*(loop1-4);\nloop invariant sn == 0 || sn <= a*(n1-4);\nloop invariant sn == 0 || sn >= a*(loop1-5);\nloop invariant sn == 0 || sn >= a*(n1-5);\nloop invariant sn == 0 || sn <= a*(loop1-5);\nloop invariant sn == 0 || sn <= a*(n1-5);\nloop invariant sn == 0 || sn >= a*(loop1-6);\nloop invariant sn == 0 || sn >= a*(n1-6);\nloop invariant sn == 0 || sn <= a*(loop1-6);\nloop invariant sn == 0 || sn <= a*(n1-6);\nloop invariant sn == 0 || sn >= a*(loop1-7);\nloop invariant sn == 0 || sn >= a*(n1-7);\nloop invariant sn == 0 || sn <= a*(loop1-7);\nloop invariant sn == 0 || sn <= a*(n1-7);\nloop invariant sn == 0 || sn >= a*(loop1-8);\nloop invariant sn == 0 || sn >= a*(n1-8);\nloop invariant sn == 0 || sn <= a*(loop1-8);\nloop invariant sn == 0 || sn <= a*(n1-8);\nloop invariant sn == 0 || sn >= a*(loop1-9);\nloop invariant sn == 0 || sn >= a*(n1-9);\nloop invariant sn == 0 || sn <= a*(loop1-9);\nloop invariant sn == 0 || sn <= a*(n1-9);\nloop invariant sn == 0 || sn >= a*(loop1-10);\nloop invariant sn == 0 || sn >= a*(n1-10);\nloop invariant sn == 0 || sn <= a*(loop1-10);\nloop invariant sn == 0 || sn <= a*(n1-10);\nloop invariant sn == 0 || sn >= a*(loop1-11);\nloop invariant sn == 0 || sn >= a*(n1-11);\nloop invariant sn == 0 || sn <= a*(loop1-11);\nloop invariant sn == 0 || sn <= a*(n1-11);\nloop invariant sn == 0 || sn >= a*(loop1-12);\nloop invariant sn == 0 || sn >= a*(n1-12);\nloop invariant sn == 0 || sn <= a*(loop1-12);\nloop invariant sn == 0 || sn <= a*(n1-12);\nloop invariant sn == 0 || sn >= a*(loop1-13);\nloop invariant sn == 0 || sn >= a*(n1-13);\nloop invariant sn == 0 || sn <= a*(loop1-13);\n*/\n```",
            "```\n/*@\nloop invariant sn == x*a || sn == 0;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= 2147483647;\nloop invariant sn == x*a;\nloop invariant v1 >= -2147483648 && v1 <= 2147483647;\nloop invariant v2 >= -2147483648 && v2 <= 2147483647;\nloop invariant v3 >= -2147483648 && v3 <= 2147483647;\nloop invariant v1 || v2 || v3;\nloop invariant v1 ==> (sn == x*a && v1 == 0);\nloop invariant v2 ==> (sn == x*a && v2 == 0);\nloop invariant v3 ==> (sn == x*a && v3 == 0);\nloop invariant !v1 && !v2 && !v3 ==> (sn == x*a && v1 == 0 && v2 == 0 && v3 == 0);\nloop invariant !(sn == x*a && v1 == 0 && v2 == 0 && v3 == 0) ==> (v1 || v2 || v3);\nloop invariant !(sn == x*a && v1 == 0 && v2 == 0 && v3 == 0) ==> (v1 ==> (sn == x*a && v1 == 0));\nloop invariant !(sn == x*a && v1 == 0 && v2 == 0 && v3 == 0) ==> (v2 ==> (sn == x*a && v2 == 0));\nloop invariant !(sn == x*a && v1 == 0 && v2 == 0 && v3 == 0) ==> (v3 ==> (sn == x*a && v3 == 0));\n*/\n```",
            "```\n/*@\nloop invariant x == sn / a;\nloop invariant (sn == 0) || (a > 0 && sn == x * a);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= sn <= x*a;\nloop invariant 0 <= x <= loop1;\nloop invariant v1 = unknown_int();\nloop invariant v2 = unknown_int();\nloop invariant v3 = unknown_int();\n*/\n```",
            "```\n/*@\nloop invariant 0 <= loop1 <= n1;\nloop invariant 0 <= x <= loop1;\nloop invariant 0 <= sn <= loop1 * a;\nloop invariant v1 <= v2 <= v3;\nloop invariant v1 <= v2;\nloop invariant v2 <= v3;\nloop invariant v1 <= v3;\n*/\n```",
            "```\n/*@\nloop invariant x >= 0;\nloop invariant sn == (x * a) || sn == 0;\nloop invariant v1 >= INT_MIN;\nloop invariant v1 <= INT_MAX;\nloop invariant v2 >= INT_MIN;\nloop invariant v2 <= INT_MAX;\nloop invariant v3 >= INT_MIN;\nloop invariant v3 <= INT_MAX;\nloop invariant loop1 >= 0;\nloop invariant n1 >= 0;\nloop invariant x <= INT_MAX;\nloop invariant sn <= INT_MAX;\nloop invariant a == 1;\n*/\n```",
            "```\n/*@\n\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 10,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= loop1;\nloop invariant 0 <= sn <= x*a;\nloop invariant sn == x*a || sn == 0;\nloop invariant v1 <= unknown_int();\nloop invariant v2 <= unknown_int();\nloop invariant v3 <= unknown_int();\nloop invariant v1 >= unknown_int();\nloop invariant v2 >= unknown_int();\nloop invariant v3 >= unknown_int();\nloop invariant sn == unknown_uint() + unknown_uint();\nloop invariant sn == unknown_uint() + unknown_uint() + unknown_uint();\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\n#define a (1)\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n  int v1, v2, v3;\n\n  /*@\n\nloop invariant i2: 0 <= sn <= x*a;\nloop invariant i3: sn == x*a || sn == 0;\n\n\n\n\n\n\n\n\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant y1 >= 1;\nloop invariant y1 <= (n1 + 1);\nloop invariant sn1 == (x1 * ((x1 + 1) / 2));\nloop invariant sn1 == (x1 * ((x1 + 1) / 2));\nloop invariant sn1 == (x1 * ((x1 + 1) / 2));\nloop invariant sn1 == (x1 * ((x1 + 1) / 2));\nloop invariant sn1 == (x1 * ((x1 + 1) / 2));\nloop invariant sn1 == (x1 * ((x1 + 1) / 2));\nloop invariant sn1 == (x1 * ((x1 + 1) / 2));\nloop invariant sn1 == (x1 * ((x1 + 1) / 2));\nloop invariant sn1 == (x1 * ((x1 + 1) / 2));\nloop invariant sn1 == (x1 * ((x1 + 1) / 2));\nloop invariant sn1 == (x1 * ((x1 + 1) / 2));\nloop invariant sn1 == (x1 * ((x1 + 1) / 2));\nloop invariant sn1 == (x1 * ((x1 + 1) / 2));\nloop invariant sn1 == (x1 * ((x1 + 1) / 2));\nloop invariant sn1 == (x1 * ((x1 + 1) / 2));\nloop invariant sn1 == (x1 * ((x1 + 1) / 2));\nloop invariant sn1 == (x1 * ((x1 + 1) / 2));\nloop invariant sn1 == (x1 * ((x1 + 1) / 2));\nloop invariant sn1 == (x1 * ((x1 + 1) / 2));\nloop invariant sn1 == (x1 * ((x1 + 1) / 2));\nloop invariant sn1 == (x1 * ((x1 + 1) / 2));\nloop invariant sn1 == (x1 * ((x1 + 1) / 2));\nloop invariant sn1 == (x1 * ((x1 + 1) / 2));\nloop invariant sn1 == (x1 * ((x1 + 1) / 2));\nloop invariant sn1 == (x1 * ((x1 + 1) / 2));\nloop invariant sn1 == (x1 * ((x1 + 1) / 2));\nloop invariant sn1 == (x1 * ((x1 + 1) / 2));\nloop invariant sn1 == (x1 * ((x1 + 1) / 2));\nloop invariant sn1 == (x1 * ((x1 + 1) / 2));\nloop invariant sn1 == (x1 * ((x1 + 1) / 2));\nloop invariant sn1 == (x1 * ((x1 + 1) / 2));\nloop invariant sn1 == (x1 * ((x1 + 1) / 2));\nloop invariant sn1 == (x1 * ((x1 + 1) / 2));\nloop invariant sn1 == (x1 * ((x1 + 1) / 2));\nloop invariant sn1 == (x1 * ((x1 + 1) / 2));\nloop invariant sn1 == (x1 * ((x1 + 1) / 2));\nloop invariant sn1 == (x1 * ((x1 + 1) / 2));\nloop invariant sn1 == (x1 * ((x1 + 1) / 2));\nloop invariant sn1 == (x1 * ((x1 + 1) / 2));\nloop invariant sn1 == (x1 * ((x1 + 1) / 2));\nloop invariant sn1 == (x1 * ((x1 + 1) / 2));\nloop invariant sn1 == (x1 * ((x1 + 1) / 2));\nloop invariant sn1 == (x1 * ((x1 + 1) / 2));\nloop invariant sn1 == (x1 * ((x1 + 1) / 2));\nloop invariant sn1 == (x1 * ((x1 + 1) / 2));\nloop invariant sn1 == (x1 * ((x1 + 1) / 2));\nloop invariant sn1 == (x1 * ((x1 + 1) / 2));\nloop invariant sn1 == (x1 * ((x1 + 1) / 2));\nloop invariant sn1 == (x1 * ((x1 + 1) / 2));\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\n#define a (1)\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n  int v1, v2, v3;\n\n  /*@\n\n\n\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= sn <= n1 * a;\nloop invariant 0 <= x <= n1;\nloop invariant v1 = unknown_int() ==> v1 >= INT_MIN && v1 <= INT_MAX;\nloop invariant v2 = unknown_int() ==> v2 >= INT_MIN && v2 <= INT_MAX;\nloop invariant v3 = unknown_int() ==> v3 >= INT_MIN && v3 <= INT_MAX;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\n#define a (1)\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n  int v1, v2, v3;\n\n  /*@\n\n\n\n\n\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 1 <= a <= 1;\nloop invariant 0 <= sn <= 1;\nloop invariant 0 <= x <= 1;\nloop invariant 0 <= v1 <= 1;\nloop invariant 0 <= v2 <= 1;\nloop invariant 0 <= v3 <= 1;\nloop invariant sn <= x * a;\nloop invariant sn <= 1;\nloop invariant x <= 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\n#define a (1)\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n  int v1, v2, v3;\n\n  /*@\nloop invariant i1: 1 <= a <= 1;\n\n\n\n\n\nloop invariant i7: sn <= x * a;\n\n\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant a == 1;\nloop invariant sn <= x * a;\nloop invariant x <= n1;\nloop invariant loop1 <= n1;\nloop invariant v1 <= INT_MAX;\nloop invariant v2 <= INT_MAX;\nloop invariant v3 <= INT_MAX;\nloop invariant v1 >= INT_MIN;\nloop invariant v2 >= INT_MIN;\nloop invariant v3 >= INT_MIN;\nloop invariant sn == x * 1 || sn == 0;\nloop invariant sn <= x * 1 || sn == 0;\nloop invariant sn == x * 1 || sn == 0;\nloop invariant sn <= x * 1 || sn == 0;\nloop invariant sn == x * 1 || sn == 0;\nloop invariant sn <= x * 1 || sn == 0;\nloop invariant sn == x * 1 || sn == 0;\nloop invariant sn <= x * 1 || sn == 0;\nloop invariant sn == x * 1 || sn == 0;\nloop invariant sn <= x * 1 || sn == 0;\nloop invariant sn == x * 1 || sn == 0;\nloop invariant sn <= x * 1 || sn == 0;\nloop invariant sn == x * 1 || sn == 0;\nloop invariant sn <= x * 1 || sn == 0;\nloop invariant sn == x * 1 || sn == 0;\nloop invariant sn <= x * 1 || sn == 0;\nloop invariant sn == x * 1 || sn == 0;\nloop invariant sn <= x * 1 || sn == 0;\nloop invariant sn == x * 1 || sn == 0;\nloop invariant sn <= x * 1 || sn == 0;\nloop invariant sn == x * 1 || sn == 0;\nloop invariant sn <= x * 1 || sn == 0;\nloop invariant sn == x * 1 || sn == 0;\nloop invariant sn <= x * 1 || sn == 0;\nloop invariant sn == x * 1 || sn == 0;\nloop invariant sn <= x * 1 || sn == 0;\nloop invariant sn == x * 1 || sn == 0;\nloop invariant sn <= x * 1 || sn == 0;\nloop invariant sn == x * 1 || sn == 0;\nloop invariant sn <= x * 1 || sn == 0;\nloop invariant sn == x * 1 || sn == 0;\nloop invariant sn <= x * 1 || sn == 0;\nloop invariant sn == x * 1 || sn == 0;\nloop invariant sn <= x * 1 || sn == 0;\nloop invariant sn == x * 1 || sn == 0;\nloop invariant sn <= x * 1 || sn == 0;\nloop invariant sn == x * 1 || sn == 0;\nloop invariant sn <= x * 1 || sn == 0;\nloop invariant sn == x * 1 || sn == 0;\nloop invariant sn <= x * 1 || sn == 0;\nloop invariant sn == x * 1 || sn == 0;\nloop invariant sn <= x * 1 || sn == 0;\nloop invariant sn == x * 1 || sn == 0;\nloop invariant sn <= x * 1 || sn == 0;\nloop invariant sn == x * 1 || sn == 0;\nloop invariant sn <= x * 1 || sn == 0;\nloop invariant sn == x * 1 || sn == 0;\nloop invariant sn <= x * 1 || sn == 0;\nloop invariant sn == x * 1 || sn == 0;\nloop invariant sn <= x * 1 || sn == 0;\nloop invariant sn == x * 1 || sn == 0;\nloop invariant sn <= x * 1 || sn == 0;\nloop invariant sn == x * 1 || sn == 0;\nloop invariant sn <= x * 1 || sn == 0;\nloop invariant sn == x * 1 || sn == 0;\nloop invariant sn <= x * 1 || sn == 0;\nloop invariant sn == x * 1 || sn == 0;\nloop invariant sn <= x * 1 || sn == 0;\nloop invariant sn == x * 1 || sn == 0;\nloop invariant sn <= x * 1 || sn == 0;\nloop invariant sn == x * 1 || sn == 0;\nloop invariant sn <= x * 1 || sn == 0;\nloop invariant sn == x * 1 || sn == 0;\nloop invariant sn <= x * 1 || sn == 0;\nloop invariant sn == x * 1 || sn == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\n#define a (1)\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n  int v1, v2, v3;\n\n  /*@\nloop invariant i1: a == 1;\nloop invariant i2: sn <= x * a;\n\n\nloop invariant i5: v1 <= INT_MAX;\nloop invariant i6: v2 <= INT_MAX;\nloop invariant i7: v3 <= INT_MAX;\nloop invariant i8: v1 >= INT_MIN;\nloop invariant i9: v2 >= INT_MIN;\nloop invariant i10: v3 >= INT_MIN;\nloop invariant i11: sn == x * 1 || sn == 0;\nloop invariant i12: sn <= x * 1 || sn == 0;\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x;\nloop invariant sn == x * a;\nloop invariant v1 == unknown_int();\nloop invariant v2 == unknown_int();\nloop invariant v3 == unknown_int();\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\n#define a (1)\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n  int v1, v2, v3;\n\n  /*@\nloop invariant i1: 0 <= x;\nloop invariant i2: sn == x * a;\n\n\n\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= sn <= n1 * a;\nloop invariant x <= loop1;\nloop invariant v1 <= v2;\nloop invariant v2 <= v3;\nloop invariant v3 <= unknown_int();\nloop invariant v1 <= unknown_int();\nloop invariant v2 <= unknown_int();\nloop invariant v3 <= unknown_int();\nloop invariant v1 <= 0;\nloop invariant v2 <= 0;\nloop invariant v3 <= 0;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant sn <= loop1 * a;\nloop invariant x <= loop1;\nloop invariant v1 <= v2;\nloop invariant v2 <= v3;\nloop invariant v3 <= unknown_int();\nloop invariant v1 <= unknown_int();\nloop invariant v2 <= unknown_int();\nloop invariant v3 <= unknown_int();\nloop invariant v1 <= 0;\nloop invariant v2 <= 0;\nloop invariant v3 <= 0;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant sn <= loop1 * a;\nloop invariant x <= loop1;\nloop invariant v1 <= v2;\nloop invariant v2 <= v3;\nloop invariant v3 <= unknown_int();\nloop invariant v1 <= unknown_int();\nloop invariant v2 <= unknown_int();\nloop invariant v3 <= unknown_int();\nloop invariant v1 <= 0;\nloop invariant v2 <= 0;\nloop invariant v3 <= 0;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant sn <= loop1 * a;\nloop invariant x <= loop1;\nloop invariant v1 <= v2;\nloop invariant v2 <= v3;\nloop invariant v3 <= unknown_int();\nloop invariant v1 <= unknown_int();\nloop invariant v2 <= unknown_int();\nloop invariant v3 <= unknown_int();\nloop invariant v1 <= 0;\nloop invariant v2 <= 0;\nloop invariant v3 <= 0;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant sn <= loop1 * a;\nloop invariant x <= loop1;\nloop invariant v1 <= v2;\nloop invariant v2 <= v3;\nloop invariant v3 <= unknown_int();\nloop invariant v1 <= unknown_int();\nloop invariant v2 <= unknown_int();\nloop invariant v3 <= unknown_int();\nloop invariant v1 <= 0;\nloop invariant v2 <= 0;\nloop invariant v3 <= 0;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant sn <= loop1 * a;\nloop invariant x <= loop1;\nloop invariant v1 <= v2;\nloop invariant v2 <= v3;\nloop invariant v3 <= unknown_int();\nloop invariant v1 <= unknown_int();\nloop invariant v2 <= unknown_int();\nloop invariant v3 <= unknown_int();\nloop invariant v1 <= 0;\nloop invariant v2 <= 0;\nloop invariant v3 <= 0;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant sn <= loop1 * a;\nloop invariant x <= loop1;\nloop invariant v1 <= v2;\nloop invariant v2 <= v3;\nloop invariant v3 <= unknown_int();\nloop invariant v1 <= unknown_int();\nloop invariant v2 <= unknown_int();\nloop invariant v3 <= unknown_int();\nloop invariant v1 <= 0;\nloop invariant v2 <= 0;\nloop invariant v3 <= 0;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant sn <= loop1 * a;\nloop invariant x <= loop1;\nloop invariant v1 <= v2;\nloop invariant v2 <= v3;\nloop invariant v3 <= unknown_int();\nloop invariant v1 <= unknown_int();\nloop invariant v2 <= unknown_int();\nloop invariant v3 <= unknown_int();\nloop invariant v1 <= 0;\nloop invariant v2 <= 0;\nloop invariant v3 <= 0;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant sn <= loop1 * a;\nloop invariant x <= loop1;\nloop invariant v1 <= v2;\nloop invariant v2 <= v3;\nloop invariant v3 <= unknown_int();\nloop invariant v1 <= unknown_int();\nloop invariant v2 <= unknown_int();\nloop invariant v3 <= unknown_int();\nloop invariant v1 <= 0;\nloop invariant v2 <= 0;\nloop invariant v3 <= 0;\nloop invariant v1 >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\n#define a (1)\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n  int v1, v2, v3;\n\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 15,
                "annotations": "```\n/*@\nloop invariant 0 <= sn;\nloop invariant x == sn/a;\nloop invariant sn % a == 0;\nloop invariant sn >= 0;\nloop invariant sn <= a*loop1;\nloop invariant sn <= a*n1;\nloop invariant sn >= a*(loop1-x);\nloop invariant sn >= a*(n1-x);\nloop invariant sn == 0 || sn >= a;\nloop invariant sn == 0 || sn <= a*(loop1-x);\nloop invariant sn == 0 || sn <= a*(n1-x);\nloop invariant sn == 0 || sn >= a*(loop1-a);\nloop invariant sn == 0 || sn >= a*(n1-a);\nloop invariant sn == 0 || sn <= a*(loop1-a);\nloop invariant sn == 0 || sn <= a*(n1-a);\nloop invariant sn == 0 || sn >= a*(loop1-1);\nloop invariant sn == 0 || sn >= a*(n1-1);\nloop invariant sn == 0 || sn <= a*(loop1-1);\nloop invariant sn == 0 || sn <= a*(n1-1);\nloop invariant sn == 0 || sn >= a*(loop1-2);\nloop invariant sn == 0 || sn >= a*(n1-2);\nloop invariant sn == 0 || sn <= a*(loop1-2);\nloop invariant sn == 0 || sn <= a*(n1-2);\nloop invariant sn == 0 || sn >= a*(loop1-3);\nloop invariant sn == 0 || sn >= a*(n1-3);\nloop invariant sn == 0 || sn <= a*(loop1-3);\nloop invariant sn == 0 || sn <= a*(n1-3);\nloop invariant sn == 0 || sn >= a*(loop1-4);\nloop invariant sn == 0 || sn >= a*(n1-4);\nloop invariant sn == 0 || sn <= a*(loop1-4);\nloop invariant sn == 0 || sn <= a*(n1-4);\nloop invariant sn == 0 || sn >= a*(loop1-5);\nloop invariant sn == 0 || sn >= a*(n1-5);\nloop invariant sn == 0 || sn <= a*(loop1-5);\nloop invariant sn == 0 || sn <= a*(n1-5);\nloop invariant sn == 0 || sn >= a*(loop1-6);\nloop invariant sn == 0 || sn >= a*(n1-6);\nloop invariant sn == 0 || sn <= a*(loop1-6);\nloop invariant sn == 0 || sn <= a*(n1-6);\nloop invariant sn == 0 || sn >= a*(loop1-7);\nloop invariant sn == 0 || sn >= a*(n1-7);\nloop invariant sn == 0 || sn <= a*(loop1-7);\nloop invariant sn == 0 || sn <= a*(n1-7);\nloop invariant sn == 0 || sn >= a*(loop1-8);\nloop invariant sn == 0 || sn >= a*(n1-8);\nloop invariant sn == 0 || sn <= a*(loop1-8);\nloop invariant sn == 0 || sn <= a*(n1-8);\nloop invariant sn == 0 || sn >= a*(loop1-9);\nloop invariant sn == 0 || sn >= a*(n1-9);\nloop invariant sn == 0 || sn <= a*(loop1-9);\nloop invariant sn == 0 || sn <= a*(n1-9);\nloop invariant sn == 0 || sn >= a*(loop1-10);\nloop invariant sn == 0 || sn >= a*(n1-10);\nloop invariant sn == 0 || sn <= a*(loop1-10);\nloop invariant sn == 0 || sn <= a*(n1-10);\nloop invariant sn == 0 || sn >= a*(loop1-11);\nloop invariant sn == 0 || sn >= a*(n1-11);\nloop invariant sn == 0 || sn <= a*(loop1-11);\nloop invariant sn == 0 || sn <= a*(n1-11);\nloop invariant sn == 0 || sn >= a*(loop1-12);\nloop invariant sn == 0 || sn >= a*(n1-12);\nloop invariant sn == 0 || sn <= a*(loop1-12);\nloop invariant sn == 0 || sn <= a*(n1-12);\nloop invariant sn == 0 || sn >= a*(loop1-13);\nloop invariant sn == 0 || sn >= a*(n1-13);\nloop invariant sn == 0 || sn <= a*(loop1-13);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\n#define a (1)\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n  int v1, v2, v3;\n\n  /*@\nloop invariant i1: 0 <= sn;\nloop invariant i2: x == sn/a;\nloop invariant i3: sn % a == 0;\nloop invariant i4: sn >= 0;\n\n\n\n\nloop invariant i9: sn == 0 || sn >= a;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant sn == x*a || sn == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\n#define a (1)\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n  int v1, v2, v3;\n\n  /*@\nloop invariant i1: sn == x*a || sn == 0;\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= 2147483647;\nloop invariant sn == x*a;\nloop invariant v1 >= -2147483648 && v1 <= 2147483647;\nloop invariant v2 >= -2147483648 && v2 <= 2147483647;\nloop invariant v3 >= -2147483648 && v3 <= 2147483647;\nloop invariant v1 || v2 || v3;\nloop invariant v1 ==> (sn == x*a && v1 == 0);\nloop invariant v2 ==> (sn == x*a && v2 == 0);\nloop invariant v3 ==> (sn == x*a && v3 == 0);\nloop invariant !v1 && !v2 && !v3 ==> (sn == x*a && v1 == 0 && v2 == 0 && v3 == 0);\nloop invariant !(sn == x*a && v1 == 0 && v2 == 0 && v3 == 0) ==> (v1 || v2 || v3);\nloop invariant !(sn == x*a && v1 == 0 && v2 == 0 && v3 == 0) ==> (v1 ==> (sn == x*a && v1 == 0));\nloop invariant !(sn == x*a && v1 == 0 && v2 == 0 && v3 == 0) ==> (v2 ==> (sn == x*a && v2 == 0));\nloop invariant !(sn == x*a && v1 == 0 && v2 == 0 && v3 == 0) ==> (v3 ==> (sn == x*a && v3 == 0));\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\n#define a (1)\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n  int v1, v2, v3;\n\n  /*@\n\nloop invariant i2: sn == x*a;\nloop invariant i3: v1 >= -2147483648 && v1 <= 2147483647;\nloop invariant i4: v2 >= -2147483648 && v2 <= 2147483647;\nloop invariant i5: v3 >= -2147483648 && v3 <= 2147483647;\n\n\n\n\nloop invariant i10: !v1 && !v2 && !v3 ==> (sn == x*a && v1 == 0 && v2 == 0 && v3 == 0);\nloop invariant i11: !(sn == x*a && v1 == 0 && v2 == 0 && v3 == 0) ==> (v1 || v2 || v3);\n\n\n\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant x == sn / a;\nloop invariant (sn == 0) || (a > 0 && sn == x * a);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\n#define a (1)\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n  int v1, v2, v3;\n\n  /*@\nloop invariant i1: x == sn / a;\nloop invariant i2: (sn == 0) || (a > 0 && sn == x * a);\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= sn <= x*a;\nloop invariant 0 <= x <= loop1;\nloop invariant v1 = unknown_int();\nloop invariant v2 = unknown_int();\nloop invariant v3 = unknown_int();\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\n#define a (1)\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n  int v1, v2, v3;\n\n  /*@\nloop invariant i1: 0 <= sn <= x*a;\n\n\n\n\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= loop1 <= n1;\nloop invariant 0 <= x <= loop1;\nloop invariant 0 <= sn <= loop1 * a;\nloop invariant v1 <= v2 <= v3;\nloop invariant v1 <= v2;\nloop invariant v2 <= v3;\nloop invariant v1 <= v3;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\n#define a (1)\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n  int v1, v2, v3;\n\n  /*@\n\n\n\n\n\n\n\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant x >= 0;\nloop invariant sn == (x * a) || sn == 0;\nloop invariant v1 >= INT_MIN;\nloop invariant v1 <= INT_MAX;\nloop invariant v2 >= INT_MIN;\nloop invariant v2 <= INT_MAX;\nloop invariant v3 >= INT_MIN;\nloop invariant v3 <= INT_MAX;\nloop invariant loop1 >= 0;\nloop invariant n1 >= 0;\nloop invariant x <= INT_MAX;\nloop invariant sn <= INT_MAX;\nloop invariant a == 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\n#define a (1)\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n  int v1, v2, v3;\n\n  /*@\nloop invariant i1: x >= 0;\nloop invariant i2: sn == (x * a) || sn == 0;\nloop invariant i3: v1 >= INT_MIN;\nloop invariant i4: v1 <= INT_MAX;\nloop invariant i5: v2 >= INT_MIN;\nloop invariant i6: v2 <= INT_MAX;\nloop invariant i7: v3 >= INT_MIN;\nloop invariant i8: v3 <= INT_MAX;\nloop invariant i9: loop1 >= 0;\nloop invariant i10: n1 >= 0;\nloop invariant i11: x <= INT_MAX;\nloop invariant i12: sn <= INT_MAX;\nloop invariant i13: a == 1;\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\n#define a (1)\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n  int v1, v2, v3;\n\n  /*@\n\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 23: unexpected token ')'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\n#define a (1)\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n  int v1, v2, v3;\n\n  /*@\nloop invariant i1: 1 <= x <= loop1;\nloop invariant i2: 0 <= sn <= x*a;\nloop invariant i3: sn == x*a || sn == 0;\nloop invariant i4: v1 <= unknown_int();\nloop invariant i5: v2 <= unknown_int();\nloop invariant i6: v3 <= unknown_int();\nloop invariant i7: v1 >= unknown_int();\nloop invariant i8: v2 >= unknown_int();\nloop invariant i9: v3 >= unknown_int();\nloop invariant i10: sn == unknown_uint() + unknown_uint();\nloop invariant i11: sn == unknown_uint() + unknown_uint() + unknown_uint();\nloop invariant i12: y1 >= 1;\nloop invariant i13: y1 <= (n1 + 1);\nloop invariant i14: sn1 == (x1 * ((x1 + 1) / 2));\nloop invariant i15: 0 <= sn <= n1 * a;\nloop invariant i16: 0 <= x <= n1;\nloop invariant i17: v1 = unknown_int() ==> v1 >= INT_MIN && v1 <= INT_MAX;\nloop invariant i18: v2 = unknown_int() ==> v2 >= INT_MIN && v2 <= INT_MAX;\nloop invariant i19: v3 = unknown_int() ==> v3 >= INT_MIN && v3 <= INT_MAX;\nloop invariant i20: 1 <= a <= 1;\nloop invariant i21: 0 <= sn <= 1;\nloop invariant i22: 0 <= x <= 1;\nloop invariant i23: 0 <= v1 <= 1;\nloop invariant i24: 0 <= v2 <= 1;\nloop invariant i25: 0 <= v3 <= 1;\nloop invariant i26: sn <= x * a;\nloop invariant i27: sn <= 1;\nloop invariant i28: x <= 1;\nloop invariant i29: a == 1;\nloop invariant i30: x <= n1;\nloop invariant i31: loop1 <= n1;\nloop invariant i32: v1 <= INT_MAX;\nloop invariant i33: v2 <= INT_MAX;\nloop invariant i34: v3 <= INT_MAX;\nloop invariant i35: v1 >= INT_MIN;\nloop invariant i36: v2 >= INT_MIN;\nloop invariant i37: v3 >= INT_MIN;\nloop invariant i38: sn == x * 1 || sn == 0;\nloop invariant i39: sn <= x * 1 || sn == 0;\nloop invariant i40: 0 <= x;\nloop invariant i41: sn == x * a;\nloop invariant i42: v1 == unknown_int();\nloop invariant i43: v2 == unknown_int();\nloop invariant i44: v3 == unknown_int();\nloop invariant i45: x <= loop1;\nloop invariant i46: v1 <= v2;\nloop invariant i47: v2 <= v3;\nloop invariant i48: v1 <= 0;\nloop invariant i49: v2 <= 0;\nloop invariant i50: v3 <= 0;\nloop invariant i51: v1 >= 0;\nloop invariant i52: v2 >= 0;\nloop invariant i53: v3 >= 0;\nloop invariant i54: sn <= loop1 * a;\nloop invariant i55: 0 <= sn;\nloop invariant i56: x == sn/a;\nloop invariant i57: sn % a == 0;\nloop invariant i58: sn >= 0;\nloop invariant i59: sn <= a*loop1;\nloop invariant i60: sn <= a*n1;\nloop invariant i61: sn >= a*(loop1-x);\nloop invariant i62: sn >= a*(n1-x);\nloop invariant i63: sn == 0 || sn >= a;\nloop invariant i64: sn == 0 || sn <= a*(loop1-x);\nloop invariant i65: sn == 0 || sn <= a*(n1-x);\nloop invariant i66: sn == 0 || sn >= a*(loop1-a);\nloop invariant i67: sn == 0 || sn >= a*(n1-a);\nloop invariant i68: sn == 0 || sn <= a*(loop1-a);\nloop invariant i69: sn == 0 || sn <= a*(n1-a);\nloop invariant i70: sn == 0 || sn >= a*(loop1-1);\nloop invariant i71: sn == 0 || sn >= a*(n1-1);\nloop invariant i72: sn == 0 || sn <= a*(loop1-1);\nloop invariant i73: sn == 0 || sn <= a*(n1-1);\nloop invariant i74: sn == 0 || sn >= a*(loop1-2);\nloop invariant i75: sn == 0 || sn >= a*(n1-2);\nloop invariant i76: sn == 0 || sn <= a*(loop1-2);\nloop invariant i77: sn == 0 || sn <= a*(n1-2);\nloop invariant i78: sn == 0 || sn >= a*(loop1-3);\nloop invariant i79: sn == 0 || sn >= a*(n1-3);\nloop invariant i80: sn == 0 || sn <= a*(loop1-3);\nloop invariant i81: sn == 0 || sn <= a*(n1-3);\nloop invariant i82: sn == 0 || sn >= a*(loop1-4);\nloop invariant i83: sn == 0 || sn >= a*(n1-4);\nloop invariant i84: sn == 0 || sn <= a*(loop1-4);\nloop invariant i85: sn == 0 || sn <= a*(n1-4);\nloop invariant i86: sn == 0 || sn >= a*(loop1-5);\nloop invariant i87: sn == 0 || sn >= a*(n1-5);\nloop invariant i88: sn == 0 || sn <= a*(loop1-5);\nloop invariant i89: sn == 0 || sn <= a*(n1-5);\nloop invariant i90: sn == 0 || sn >= a*(loop1-6);\nloop invariant i91: sn == 0 || sn >= a*(n1-6);\nloop invariant i92: sn == 0 || sn <= a*(loop1-6);\nloop invariant i93: sn == 0 || sn <= a*(n1-6);\nloop invariant i94: sn == 0 || sn >= a*(loop1-7);\nloop invariant i95: sn == 0 || sn >= a*(n1-7);\nloop invariant i96: sn == 0 || sn <= a*(loop1-7);\nloop invariant i97: sn == 0 || sn <= a*(n1-7);\nloop invariant i98: sn == 0 || sn >= a*(loop1-8);\nloop invariant i99: sn == 0 || sn >= a*(n1-8);\nloop invariant i100: sn == 0 || sn <= a*(loop1-8);\nloop invariant i101: sn == 0 || sn <= a*(n1-8);\nloop invariant i102: sn == 0 || sn >= a*(loop1-9);\nloop invariant i103: sn == 0 || sn >= a*(n1-9);\nloop invariant i104: sn == 0 || sn <= a*(loop1-9);\nloop invariant i105: sn == 0 || sn <= a*(n1-9);\nloop invariant i106: sn == 0 || sn >= a*(loop1-10);\nloop invariant i107: sn == 0 || sn >= a*(n1-10);\nloop invariant i108: sn == 0 || sn <= a*(loop1-10);\nloop invariant i109: sn == 0 || sn <= a*(n1-10);\nloop invariant i110: sn == 0 || sn >= a*(loop1-11);\nloop invariant i111: sn == 0 || sn >= a*(n1-11);\nloop invariant i112: sn == 0 || sn <= a*(loop1-11);\nloop invariant i113: sn == 0 || sn <= a*(n1-11);\nloop invariant i114: sn == 0 || sn >= a*(loop1-12);\nloop invariant i115: sn == 0 || sn >= a*(n1-12);\nloop invariant i116: sn == 0 || sn <= a*(loop1-12);\nloop invariant i117: sn == 0 || sn <= a*(n1-12);\nloop invariant i118: sn == 0 || sn >= a*(loop1-13);\nloop invariant i119: sn == 0 || sn >= a*(n1-13);\nloop invariant i120: sn == 0 || sn <= a*(loop1-13);\nloop invariant i121: 1 <= x <= 2147483647;\nloop invariant i122: sn == x*a;\nloop invariant i123: v1 >= -2147483648 && v1 <= 2147483647;\nloop invariant i124: v2 >= -2147483648 && v2 <= 2147483647;\nloop invariant i125: v3 >= -2147483648 && v3 <= 2147483647;\nloop invariant i126: v1 || v2 || v3;\nloop invariant i127: v1 ==> (sn == x*a && v1 == 0);\nloop invariant i128: v2 ==> (sn == x*a && v2 == 0);\nloop invariant i129: v3 ==> (sn == x*a && v3 == 0);\nloop invariant i130: !v1 && !v2 && !v3 ==> (sn == x*a && v1 == 0 && v2 == 0 && v3 == 0);\nloop invariant i131: !(sn == x*a && v1 == 0 && v2 == 0 && v3 == 0) ==> (v1 || v2 || v3);\nloop invariant i132: !(sn == x*a && v1 == 0 && v2 == 0 && v3 == 0) ==> (v1 ==> (sn == x*a && v1 == 0));\nloop invariant i133: !(sn == x*a && v1 == 0 && v2 == 0 && v3 == 0) ==> (v2 ==> (sn == x*a && v2 == 0));\nloop invariant i134: !(sn == x*a && v1 == 0 && v2 == 0 && v3 == 0) ==> (v3 ==> (sn == x*a && v3 == 0));\nloop invariant i135: x == sn / a;\nloop invariant i136: (sn == 0) || (a > 0 && sn == x * a);\nloop invariant i137: 0 <= x <= loop1;\nloop invariant i138: v1 = unknown_int();\nloop invariant i139: v2 = unknown_int();\nloop invariant i140: v3 = unknown_int();\nloop invariant i141: 0 <= loop1 <= n1;\nloop invariant i142: 0 <= sn <= loop1 * a;\nloop invariant i143: v1 <= v2 <= v3;\nloop invariant i144: v1 <= v3;\nloop invariant i145: x >= 0;\nloop invariant i146: sn == (x * a) || sn == 0;\nloop invariant i147: loop1 >= 0;\nloop invariant i148: n1 >= 0;\nloop invariant i149: x <= INT_MAX;\nloop invariant i150: sn <= INT_MAX;\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n}",
        "combined_annotation_num_solver_calls": 41,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\n#define a (1)\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n  int v1, v2, v3;\n\n  /*@\n\nloop invariant i2: 0 <= sn <= x*a;\nloop invariant i3: sn == x*a || sn == 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i20: 1 <= a <= 1;\n\n\n\n\n\nloop invariant i26: sn <= x * a;\n\n\nloop invariant i29: a == 1;\n\n\nloop invariant i32: v1 <= INT_MAX;\nloop invariant i33: v2 <= INT_MAX;\nloop invariant i34: v3 <= INT_MAX;\nloop invariant i35: v1 >= INT_MIN;\nloop invariant i36: v2 >= INT_MIN;\nloop invariant i37: v3 >= INT_MIN;\nloop invariant i38: sn == x * 1 || sn == 0;\nloop invariant i39: sn <= x * 1 || sn == 0;\nloop invariant i40: 0 <= x;\nloop invariant i41: sn == x * a;\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i55: 0 <= sn;\nloop invariant i56: x == sn/a;\nloop invariant i57: sn % a == 0;\nloop invariant i58: sn >= 0;\n\n\n\n\nloop invariant i63: sn == 0 || sn >= a;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i122: sn == x*a;\nloop invariant i123: v1 >= -2147483648 && v1 <= 2147483647;\nloop invariant i124: v2 >= -2147483648 && v2 <= 2147483647;\nloop invariant i125: v3 >= -2147483648 && v3 <= 2147483647;\n\n\n\n\nloop invariant i130: !v1 && !v2 && !v3 ==> (sn == x*a && v1 == 0 && v2 == 0 && v3 == 0);\nloop invariant i131: !(sn == x*a && v1 == 0 && v2 == 0 && v3 == 0) ==> (v1 || v2 || v3);\n\n\n\nloop invariant i135: x == sn / a;\nloop invariant i136: (sn == 0) || (a > 0 && sn == x * a);\n\n\n\n\n\n\n\n\nloop invariant i145: x >= 0;\nloop invariant i146: sn == (x * a) || sn == 0;\nloop invariant i147: loop1 >= 0;\nloop invariant i148: n1 >= 0;\nloop invariant i149: x <= INT_MAX;\nloop invariant i150: sn <= INT_MAX;\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/split.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c"
        ],
        "skipped": [],
        "total": 90,
        "success_count": 76,
        "failure_count": 14,
        "success_rate": 0.8444444444444444
    }
}