{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int x,y;\n    x = 0;\n    y = 0;\n    while (1) {\n        if (x < 50) {\n            y++;\n        } else {\n            y--;\n        }\n        if (y < 0) break;\n        x++;\n    }\n    {;\n//@ assert(x == 100);\n}\n\n    return 0;\n}",
        "success": false,
        "annotation_blocks": [
            "```\n/*@\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 50;\nloop invariant x >= 100 ==> y == 0;\nloop invariant x < 100 ==> y >= 0 && y <= 100;\nloop invariant x == 50 ==> y == 100;\nloop invariant y == 0 ==> (x < 50) ==> x == 0;\nloop invariant y == 100 ==> (x == 50) ==> x == 50;\nloop invariant y == 100 ==> (x > 50) ==> x == 100;\nloop invariant y == 100 ==> (x == 100) ==> x == 100;\nloop invariant 0 <= x <= 50;\nloop invariant 0 <= y <= (x < 50 ? 100 : 0);\nloop invariant x == 100 ==> y == 0;\nloop invariant x < 100 ==> y >= 0 && y <= 100;\nloop invariant x == 50 ==> y == 100;\nloop invariant y == 0 ==> (x < 50) ==> x == 0;\nloop invariant y == 100 ==> (x == 50) ==> x == 50;\nloop invariant y == 100 ==> (x > 50) ==> x == 100;\nloop invariant y == 100 ==> (x == 100) ==> x == 100;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant 0 <= y <= 1;\nloop invariant x == y + 50;\nloop invariant y == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant 0 <= y <= 50;\nloop invariant x == 50 * (y >= 0) + (100 - 50) * (y < 0);\nloop invariant x + y == 100;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant 0 <= y <= 100;\nloop invariant x + y == 100;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant x + y == 100;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant x + y == 100;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant x + y == 100;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant x + y == 100;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant x + y == 100;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant x + y == 100;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant x + y == 100;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant x + y == 100;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant x + y == 100;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant x + y == 100;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant x + y == 100;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant x + y == 100;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant x + y == 100;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant x + y == 100;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant x + y == 100;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant x + y == 100;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant x + y == 100;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant x + y == 100;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant x + y == 100;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant x + y == 100;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant x + y == 100;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant x + y == 100;\nloop invariant x >= 0;\nloop invariant y >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant 0 <= y <= 100;\nloop invariant (y == x) ==> (y >= 50 ==> y == 50);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant y >= -100;\nloop invariant y < 0 ==> x == 100;\nloop invariant y >= 0 ==> x < 100;\nloop invariant y >= 0 ==> y <= x;\nloop invariant y < 0 ==> y == -x + 100;\nloop invariant x >= 50 ==> y == -1;\nloop invariant x < 50 ==> y >= 0;\nloop invariant x < 50 ==> y <= x;\nloop invariant x >= 50 ==> y == -1;\nloop invariant x >= 50 ==> y <= -1;\nloop invariant x < 50 ==> y >= 0;\nloop invariant x >= 50 ==> y < 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 50;\nloop invariant 0 <= y <= 100;\nloop invariant x + y == 100;\n*/\n```",
            "```\n/*@\nloop invariant x >= 0 && x <= 100 && y >= 0 && y <= 100;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant 0 <= y <= 100;\nloop invariant x == 100 ==> y == 0;\nloop invariant x < 50 ==> y <= 50;\nloop invariant x >= 50 ==> y <= 100;\nloop invariant x == 0 ==> y == 0;\nloop invariant x < 50 ==> y >= 1;\nloop invariant x == 50 ==> y == 1;\nloop invariant x > 50 ==> y >= 2;\nloop invariant x == 100 ==> y == 1;\nloop invariant x < 100 ==> y <= 100;\nloop invariant x >= 100 ==> y == 0;\nloop invariant x < 100 ==> y >= 0;\nloop invariant x >= 100 ==> y >= 1;\nloop invariant x < 100 ==> y <= 99;\nloop invariant x >= 100 ==> y <= 1;\nloop invariant x < 100 ==> y >= 0;\nloop invariant x >= 100 ==> y <= 0;\nloop invariant x < 100 ==> y >= 99;\nloop invariant x >= 100 ==> y >= 0;\nloop invariant x < 100 ==> y <= 98;\nloop invariant x >= 100 ==> y <= 0;\nloop invariant x < 100 ==> y >= 99;\nloop invariant x >= 100 ==> y >= 0;\nloop invariant x < 100 ==> y <= 97;\nloop invariant x >= 100 ==> y <= 0;\nloop invariant x < 100 ==> y >= 99;\nloop invariant x >= 100 ==> y >= 0;\nloop invariant x < 100 ==> y <= 96;\nloop invariant x >= 100 ==> y <= 0;\nloop invariant x < 100 ==> y >= 99;\nloop invariant x >= 100 ==> y >= 0;\nloop invariant x < 100 ==> y <= 95;\nloop invariant x >= 100 ==> y <= 0;\nloop invariant x < 100 ==> y >= 99;\nloop invariant x >= 100 ==> y >= 0;\nloop invariant x < 100 ==> y <= 94;\nloop invariant x >= 100 ==> y <= 0;\nloop invariant x < 100 ==> y >= 99;\nloop invariant x >= 100 ==> y >= 0;\nloop invariant x < 100 ==> y <= 93;\nloop invariant x >= 100 ==> y <= 0;\nloop invariant x < 100 ==> y >= 99;\nloop invariant x >= 100 ==> y >= 0;\nloop invariant x < 100 ==> y <= 92;\nloop invariant x >= 100 ==> y <= 0;\nloop invariant x < 100 ==> y >= 99;\nloop invariant x >= 100 ==> y >= 0;\nloop invariant x < 100 ==> y <= 91;\nloop invariant x >= 100 ==> y <= 0;\nloop invariant x < 100 ==> y >= 99;\nloop invariant x >= 100 ==> y >= 0;\nloop invariant x < 100 ==> y <= 90;\nloop invariant x >= 100 ==> y <= 0;\nloop invariant x < 100 ==> y >= 99;\nloop invariant x >= 100 ==> y >= 0;\nloop invariant x < 100 ==> y <= 89;\nloop invariant x >= 100 ==> y <= 0;\nloop invariant x < 100 ==> y >= 99;\nloop invariant x >= 100 ==> y >= 0;\nloop invariant x < 100 ==> y <= 88;\nloop invariant x >= 100 ==> y <= 0;\nloop invariant x < 100 ==> y >= 99;\nloop invariant x >= 100 ==> y >= 0;\nloop invariant x < 100 ==> y <= 87;\nloop invariant x >= 100 ==> y <= 0;\nloop invariant x < 100 ==> y >= 99;\nloop invariant x >= 100 ==> y >= 0;\nloop invariant x < 100 ==> y <= 86;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant 0 <= y <= x;\nloop invariant x == 100 ==> y == 0;\nloop invariant x < 100 ==> y > 0;\nloop invariant y == 0 ==> x == 100;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant y <= 100;\nloop invariant x >= y;\nloop invariant x + y > 0 ==> x >= 50;\nloop invariant x + y <= 0 ==> x < 50;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant 0 <= y <= 100;\nloop invariant (x < 50) ==> (y <= 50);\nloop invariant (x >= 50) ==> (y >= 50);\nloop invariant (x < 50) ==> (y == x + 1);\nloop invariant (x >= 50) ==> (y == x - 1);\nloop invariant (y >= 0) ==> (x < 100);\nloop invariant (y < 0) ==> (x >= 100);\nloop invariant (y >= 0) ==> (x == 100);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 50;\nloop invariant 0 <= y <= 100;\nloop invariant x <= y ==> x == 50;\nloop invariant x > y ==> x + y >= 50;\nloop invariant x >= y ==> x <= 100;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant 0 <= y <= 100;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x <= (1 + (y - 1) * y / 2);\nloop invariant x == (1 + (y - 1) * y / 2);\nloop invariant x == (1 + (y - 1) * y / 2);\nloop invariant x == (1 + (y - 1) * y / 2);\nloop invariant x == (1 + (y - 1) * y / 2);\nloop invariant x == (1 + (y - 1) * y / 2);\nloop invariant x == (1 + (y - 1) * y / 2);\nloop invariant x == (1 + (y - 1) * y / 2);\nloop invariant x == (1 + (y - 1) * y / 2);\nloop invariant x == (1 + (y - 1) * y / 2);\nloop invariant x == (1 + (y - 1) * y / 2);\nloop invariant x == (1 + (y - 1) * y / 2);\nloop invariant x == (1 + (y - 1) * y / 2);\nloop invariant x == (1 + (y - 1) * y / 2);\nloop invariant x == (1 + (y - 1) * y / 2);\nloop invariant x == (1 + (y - 1) * y / 2);\nloop invariant x == (1 + (y - 1) * y / 2);\nloop invariant x == (1 + (y - 1) * y / 2);\nloop invariant x == (1 + (y - 1) * y / 2);\nloop invariant x == (1 + (y - 1) * y / 2);\nloop invariant x == (1 + (y - 1) * y / 2);\nloop invariant x == (1 + (y - 1) * y / 2);\nloop invariant x == (1 + (y - 1) * y / 2);\nloop invariant x == (1 + (y - 1) * y / 2);\nloop invariant x == (1 + (y - 1) * y / 2);\nloop invariant x == (1 + (y - 1) * y / 2);\nloop invariant x == (1 + (y - 1) * y / 2);\nloop invariant x == (1 + (y - 1) * y / 2);\nloop invariant x == (1 + (y - 1) * y / 2);\nloop invariant x == (1 + (y - 1) * y / 2);\nloop invariant x == (1 + (y - 1) * y / 2);\nloop invariant x == (1 + (y - 1) * y / 2);\nloop invariant x == (1 + (y - 1) * y / 2);\nloop invariant x == (1 + (y - 1) * y / 2);\nloop invariant x == (1 + (y - 1) * y / 2);\nloop invariant x == (1 + (y - 1) * y / 2);\nloop invariant x == (1 + (y - 1) * y / 2);\nloop invariant x == (1 + (y - 1) * y / 2);\nloop invariant x == (1 + (y - 1) * y / 2);\nloop invariant x == (1 + (y - 1) * y / 2);\nloop invariant x == (1 + (y - 1) * y / 2);\nloop invariant x == (1 + (y - 1) * y / 2);\nloop invariant x == (1 + (y - 1) * y / 2);\nloop invariant x == (1 + (y - 1) * y / 2);\nloop invariant x == (1 + (y - 1) * y / 2);\nloop invariant x == (1 + (y - 1) * y / 2);\nloop invariant x == (1 + (y - 1) * y / 2);\nloop invariant x == (1 + (y - 1) * y / 2);\nloop invariant x == (1 + (y - 1) * y / 2);\nloop invariant x == (1 + (y - 1) * y / 2);\n*/\n```",
            "```\n/*@\n\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 50;\nloop invariant x >= 100 ==> y == 0;\nloop invariant x < 100 ==> y >= 0 && y <= 100;\nloop invariant x == 50 ==> y == 100;\nloop invariant y == 0 ==> (x < 50) ==> x == 0;\nloop invariant y == 100 ==> (x == 50) ==> x == 50;\nloop invariant y == 100 ==> (x > 50) ==> x == 100;\nloop invariant y == 100 ==> (x == 100) ==> x == 100;\nloop invariant 0 <= x <= 50;\nloop invariant 0 <= y <= (x < 50 ? 100 : 0);\nloop invariant x == 100 ==> y == 0;\nloop invariant x < 100 ==> y >= 0 && y <= 100;\nloop invariant x == 50 ==> y == 100;\nloop invariant y == 0 ==> (x < 50) ==> x == 0;\nloop invariant y == 100 ==> (x == 50) ==> x == 50;\nloop invariant y == 100 ==> (x > 50) ==> x == 100;\nloop invariant y == 100 ==> (x == 100) ==> x == 100;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int x,y;\n    x = 0;\n    y = 0;\n    /*@\nloop invariant i1: x >= 0;\nloop invariant i2: y >= 0;\n\n\n\n\nloop invariant i7: y == 0 ==> (x < 50) ==> x == 0;\nloop invariant i8: y == 100 ==> (x == 50) ==> x == 50;\n\nloop invariant i10: y == 100 ==> (x == 100) ==> x == 100;\n\n\n\n*/\nwhile (1) {\n        if (x < 50) {\n            y++;\n        } else {\n            y--;\n        }\n        if (y < 0) break;\n        x++;\n    }\n    {;\n//@ assert(x == 100);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant 0 <= y <= 1;\nloop invariant x == y + 50;\nloop invariant y == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int x,y;\n    x = 0;\n    y = 0;\n    /*@\n\n\n\n\n*/\nwhile (1) {\n        if (x < 50) {\n            y++;\n        } else {\n            y--;\n        }\n        if (y < 0) break;\n        x++;\n    }\n    {;\n//@ assert(x == 100);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant 0 <= y <= 50;\nloop invariant x == 50 * (y >= 0) + (100 - 50) * (y < 0);\nloop invariant x + y == 100;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int x,y;\n    x = 0;\n    y = 0;\n    /*@\n\n\n\n\n*/\nwhile (1) {\n        if (x < 50) {\n            y++;\n        } else {\n            y--;\n        }\n        if (y < 0) break;\n        x++;\n    }\n    {;\n//@ assert(x == 100);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant 0 <= y <= 100;\nloop invariant x + y == 100;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant x + y == 100;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant x + y == 100;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant x + y == 100;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant x + y == 100;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant x + y == 100;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant x + y == 100;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant x + y == 100;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant x + y == 100;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant x + y == 100;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant x + y == 100;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant x + y == 100;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant x + y == 100;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant x + y == 100;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant x + y == 100;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant x + y == 100;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant x + y == 100;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant x + y == 100;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant x + y == 100;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant x + y == 100;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant x + y == 100;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant x + y == 100;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant x + y == 100;\nloop invariant x >= 0;\nloop invariant y >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int x,y;\n    x = 0;\n    y = 0;\n    /*@\n\n\n\nloop invariant i4: x >= 0;\nloop invariant i5: y >= 0;\n\n\n*/\nwhile (1) {\n        if (x < 50) {\n            y++;\n        } else {\n            y--;\n        }\n        if (y < 0) break;\n        x++;\n    }\n    {;\n//@ assert(x == 100);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant 0 <= y <= 100;\nloop invariant (y == x) ==> (y >= 50 ==> y == 50);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int x,y;\n    x = 0;\n    y = 0;\n    /*@\n\n\n\n*/\nwhile (1) {\n        if (x < 50) {\n            y++;\n        } else {\n            y--;\n        }\n        if (y < 0) break;\n        x++;\n    }\n    {;\n//@ assert(x == 100);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant y >= -100;\nloop invariant y < 0 ==> x == 100;\nloop invariant y >= 0 ==> x < 100;\nloop invariant y >= 0 ==> y <= x;\nloop invariant y < 0 ==> y == -x + 100;\nloop invariant x >= 50 ==> y == -1;\nloop invariant x < 50 ==> y >= 0;\nloop invariant x < 50 ==> y <= x;\nloop invariant x >= 50 ==> y == -1;\nloop invariant x >= 50 ==> y <= -1;\nloop invariant x < 50 ==> y >= 0;\nloop invariant x >= 50 ==> y < 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int x,y;\n    x = 0;\n    y = 0;\n    /*@\n\nloop invariant i2: y >= -100;\nloop invariant i3: y < 0 ==> x == 100;\n\nloop invariant i5: y >= 0 ==> y <= x;\nloop invariant i6: y < 0 ==> y == -x + 100;\n\nloop invariant i8: x < 50 ==> y >= 0;\nloop invariant i9: x < 50 ==> y <= x;\n\n\n*/\nwhile (1) {\n        if (x < 50) {\n            y++;\n        } else {\n            y--;\n        }\n        if (y < 0) break;\n        x++;\n    }\n    {;\n//@ assert(x == 100);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 50;\nloop invariant 0 <= y <= 100;\nloop invariant x + y == 100;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int x,y;\n    x = 0;\n    y = 0;\n    /*@\n\n\n\n*/\nwhile (1) {\n        if (x < 50) {\n            y++;\n        } else {\n            y--;\n        }\n        if (y < 0) break;\n        x++;\n    }\n    {;\n//@ assert(x == 100);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant x >= 0 && x <= 100 && y >= 0 && y <= 100;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int x,y;\n    x = 0;\n    y = 0;\n    /*@\n\n*/\nwhile (1) {\n        if (x < 50) {\n            y++;\n        } else {\n            y--;\n        }\n        if (y < 0) break;\n        x++;\n    }\n    {;\n//@ assert(x == 100);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 20,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant 0 <= y <= 100;\nloop invariant x == 100 ==> y == 0;\nloop invariant x < 50 ==> y <= 50;\nloop invariant x >= 50 ==> y <= 100;\nloop invariant x == 0 ==> y == 0;\nloop invariant x < 50 ==> y >= 1;\nloop invariant x == 50 ==> y == 1;\nloop invariant x > 50 ==> y >= 2;\nloop invariant x == 100 ==> y == 1;\nloop invariant x < 100 ==> y <= 100;\nloop invariant x >= 100 ==> y == 0;\nloop invariant x < 100 ==> y >= 0;\nloop invariant x >= 100 ==> y >= 1;\nloop invariant x < 100 ==> y <= 99;\nloop invariant x >= 100 ==> y <= 1;\nloop invariant x < 100 ==> y >= 0;\nloop invariant x >= 100 ==> y <= 0;\nloop invariant x < 100 ==> y >= 99;\nloop invariant x >= 100 ==> y >= 0;\nloop invariant x < 100 ==> y <= 98;\nloop invariant x >= 100 ==> y <= 0;\nloop invariant x < 100 ==> y >= 99;\nloop invariant x >= 100 ==> y >= 0;\nloop invariant x < 100 ==> y <= 97;\nloop invariant x >= 100 ==> y <= 0;\nloop invariant x < 100 ==> y >= 99;\nloop invariant x >= 100 ==> y >= 0;\nloop invariant x < 100 ==> y <= 96;\nloop invariant x >= 100 ==> y <= 0;\nloop invariant x < 100 ==> y >= 99;\nloop invariant x >= 100 ==> y >= 0;\nloop invariant x < 100 ==> y <= 95;\nloop invariant x >= 100 ==> y <= 0;\nloop invariant x < 100 ==> y >= 99;\nloop invariant x >= 100 ==> y >= 0;\nloop invariant x < 100 ==> y <= 94;\nloop invariant x >= 100 ==> y <= 0;\nloop invariant x < 100 ==> y >= 99;\nloop invariant x >= 100 ==> y >= 0;\nloop invariant x < 100 ==> y <= 93;\nloop invariant x >= 100 ==> y <= 0;\nloop invariant x < 100 ==> y >= 99;\nloop invariant x >= 100 ==> y >= 0;\nloop invariant x < 100 ==> y <= 92;\nloop invariant x >= 100 ==> y <= 0;\nloop invariant x < 100 ==> y >= 99;\nloop invariant x >= 100 ==> y >= 0;\nloop invariant x < 100 ==> y <= 91;\nloop invariant x >= 100 ==> y <= 0;\nloop invariant x < 100 ==> y >= 99;\nloop invariant x >= 100 ==> y >= 0;\nloop invariant x < 100 ==> y <= 90;\nloop invariant x >= 100 ==> y <= 0;\nloop invariant x < 100 ==> y >= 99;\nloop invariant x >= 100 ==> y >= 0;\nloop invariant x < 100 ==> y <= 89;\nloop invariant x >= 100 ==> y <= 0;\nloop invariant x < 100 ==> y >= 99;\nloop invariant x >= 100 ==> y >= 0;\nloop invariant x < 100 ==> y <= 88;\nloop invariant x >= 100 ==> y <= 0;\nloop invariant x < 100 ==> y >= 99;\nloop invariant x >= 100 ==> y >= 0;\nloop invariant x < 100 ==> y <= 87;\nloop invariant x >= 100 ==> y <= 0;\nloop invariant x < 100 ==> y >= 99;\nloop invariant x >= 100 ==> y >= 0;\nloop invariant x < 100 ==> y <= 86;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int x,y;\n    x = 0;\n    y = 0;\n    /*@\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i13: x < 100 ==> y >= 0;\n\n\n\n\n\nloop invariant i19: x >= 100 ==> y >= 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (1) {\n        if (x < 50) {\n            y++;\n        } else {\n            y--;\n        }\n        if (y < 0) break;\n        x++;\n    }\n    {;\n//@ assert(x == 100);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant 0 <= y <= x;\nloop invariant x == 100 ==> y == 0;\nloop invariant x < 100 ==> y > 0;\nloop invariant y == 0 ==> x == 100;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int x,y;\n    x = 0;\n    y = 0;\n    /*@\n\nloop invariant i2: 0 <= y <= x;\n\n\n\n*/\nwhile (1) {\n        if (x < 50) {\n            y++;\n        } else {\n            y--;\n        }\n        if (y < 0) break;\n        x++;\n    }\n    {;\n//@ assert(x == 100);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant y <= 100;\nloop invariant x >= y;\nloop invariant x + y > 0 ==> x >= 50;\nloop invariant x + y <= 0 ==> x < 50;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int x,y;\n    x = 0;\n    y = 0;\n    /*@\n\nloop invariant i2: y <= 100;\nloop invariant i3: x >= y;\n\nloop invariant i5: x + y <= 0 ==> x < 50;\n*/\nwhile (1) {\n        if (x < 50) {\n            y++;\n        } else {\n            y--;\n        }\n        if (y < 0) break;\n        x++;\n    }\n    {;\n//@ assert(x == 100);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant 0 <= y <= 100;\nloop invariant (x < 50) ==> (y <= 50);\nloop invariant (x >= 50) ==> (y >= 50);\nloop invariant (x < 50) ==> (y == x + 1);\nloop invariant (x >= 50) ==> (y == x - 1);\nloop invariant (y >= 0) ==> (x < 100);\nloop invariant (y < 0) ==> (x >= 100);\nloop invariant (y >= 0) ==> (x == 100);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int x,y;\n    x = 0;\n    y = 0;\n    /*@\n\n\n\n\n\n\n\nloop invariant i8: (y < 0) ==> (x >= 100);\n\n*/\nwhile (1) {\n        if (x < 50) {\n            y++;\n        } else {\n            y--;\n        }\n        if (y < 0) break;\n        x++;\n    }\n    {;\n//@ assert(x == 100);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 50;\nloop invariant 0 <= y <= 100;\nloop invariant x <= y ==> x == 50;\nloop invariant x > y ==> x + y >= 50;\nloop invariant x >= y ==> x <= 100;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int x,y;\n    x = 0;\n    y = 0;\n    /*@\n\n\n\nloop invariant i4: x > y ==> x + y >= 50;\n\n*/\nwhile (1) {\n        if (x < 50) {\n            y++;\n        } else {\n            y--;\n        }\n        if (y < 0) break;\n        x++;\n    }\n    {;\n//@ assert(x == 100);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant 0 <= y <= 100;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x <= (1 + (y - 1) * y / 2);\nloop invariant x == (1 + (y - 1) * y / 2);\nloop invariant x == (1 + (y - 1) * y / 2);\nloop invariant x == (1 + (y - 1) * y / 2);\nloop invariant x == (1 + (y - 1) * y / 2);\nloop invariant x == (1 + (y - 1) * y / 2);\nloop invariant x == (1 + (y - 1) * y / 2);\nloop invariant x == (1 + (y - 1) * y / 2);\nloop invariant x == (1 + (y - 1) * y / 2);\nloop invariant x == (1 + (y - 1) * y / 2);\nloop invariant x == (1 + (y - 1) * y / 2);\nloop invariant x == (1 + (y - 1) * y / 2);\nloop invariant x == (1 + (y - 1) * y / 2);\nloop invariant x == (1 + (y - 1) * y / 2);\nloop invariant x == (1 + (y - 1) * y / 2);\nloop invariant x == (1 + (y - 1) * y / 2);\nloop invariant x == (1 + (y - 1) * y / 2);\nloop invariant x == (1 + (y - 1) * y / 2);\nloop invariant x == (1 + (y - 1) * y / 2);\nloop invariant x == (1 + (y - 1) * y / 2);\nloop invariant x == (1 + (y - 1) * y / 2);\nloop invariant x == (1 + (y - 1) * y / 2);\nloop invariant x == (1 + (y - 1) * y / 2);\nloop invariant x == (1 + (y - 1) * y / 2);\nloop invariant x == (1 + (y - 1) * y / 2);\nloop invariant x == (1 + (y - 1) * y / 2);\nloop invariant x == (1 + (y - 1) * y / 2);\nloop invariant x == (1 + (y - 1) * y / 2);\nloop invariant x == (1 + (y - 1) * y / 2);\nloop invariant x == (1 + (y - 1) * y / 2);\nloop invariant x == (1 + (y - 1) * y / 2);\nloop invariant x == (1 + (y - 1) * y / 2);\nloop invariant x == (1 + (y - 1) * y / 2);\nloop invariant x == (1 + (y - 1) * y / 2);\nloop invariant x == (1 + (y - 1) * y / 2);\nloop invariant x == (1 + (y - 1) * y / 2);\nloop invariant x == (1 + (y - 1) * y / 2);\nloop invariant x == (1 + (y - 1) * y / 2);\nloop invariant x == (1 + (y - 1) * y / 2);\nloop invariant x == (1 + (y - 1) * y / 2);\nloop invariant x == (1 + (y - 1) * y / 2);\nloop invariant x == (1 + (y - 1) * y / 2);\nloop invariant x == (1 + (y - 1) * y / 2);\nloop invariant x == (1 + (y - 1) * y / 2);\nloop invariant x == (1 + (y - 1) * y / 2);\nloop invariant x == (1 + (y - 1) * y / 2);\nloop invariant x == (1 + (y - 1) * y / 2);\nloop invariant x == (1 + (y - 1) * y / 2);\nloop invariant x == (1 + (y - 1) * y / 2);\nloop invariant x == (1 + (y - 1) * y / 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int x,y;\n    x = 0;\n    y = 0;\n    /*@\n\n\n\n\n\n*/\nwhile (1) {\n        if (x < 50) {\n            y++;\n        } else {\n            y--;\n        }\n        if (y < 0) break;\n        x++;\n    }\n    {;\n//@ assert(x == 100);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int x,y;\n    x = 0;\n    y = 0;\n    /*@\n\n*/\nwhile (1) {\n        if (x < 50) {\n            y++;\n        } else {\n            y--;\n        }\n        if (y < 0) break;\n        x++;\n    }\n    {;\n//@ assert(x == 100);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 30: invalid operands to binary *; unexpected ℤ and 𝔹. Ignoring loop annotation",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int x,y;\n    x = 0;\n    y = 0;\n    /*@\nloop invariant i1: x >= 0;\nloop invariant i2: y >= 0;\nloop invariant i3: x <= 50;\nloop invariant i4: x >= 100 ==> y == 0;\nloop invariant i5: x < 100 ==> y >= 0 && y <= 100;\nloop invariant i6: x == 50 ==> y == 100;\nloop invariant i7: y == 0 ==> (x < 50) ==> x == 0;\nloop invariant i8: y == 100 ==> (x == 50) ==> x == 50;\nloop invariant i9: y == 100 ==> (x > 50) ==> x == 100;\nloop invariant i10: y == 100 ==> (x == 100) ==> x == 100;\nloop invariant i11: 0 <= x <= 50;\nloop invariant i12: 0 <= y <= (x < 50 ? 100 : 0);\nloop invariant i13: x == 100 ==> y == 0;\nloop invariant i14: 0 <= x <= 100;\nloop invariant i15: 0 <= y <= 1;\nloop invariant i16: x == y + 50;\nloop invariant i17: y == 0;\nloop invariant i18: 0 <= y <= 50;\nloop invariant i19: x == 50 * (y >= 0) + (100 - 50) * (y < 0);\nloop invariant i20: x + y == 100;\nloop invariant i21: 0 <= y <= 100;\nloop invariant i22: x <= 100;\nloop invariant i23: y <= 100;\nloop invariant i24: (y == x) ==> (y >= 50 ==> y == 50);\nloop invariant i25: y >= -100;\nloop invariant i26: y < 0 ==> x == 100;\nloop invariant i27: y >= 0 ==> x < 100;\nloop invariant i28: y >= 0 ==> y <= x;\nloop invariant i29: y < 0 ==> y == -x + 100;\nloop invariant i30: x >= 50 ==> y == -1;\nloop invariant i31: x < 50 ==> y >= 0;\nloop invariant i32: x < 50 ==> y <= x;\nloop invariant i33: x >= 50 ==> y <= -1;\nloop invariant i34: x >= 50 ==> y < 0;\nloop invariant i35: x >= 0 && x <= 100 && y >= 0 && y <= 100;\nloop invariant i36: x < 50 ==> y <= 50;\nloop invariant i37: x >= 50 ==> y <= 100;\nloop invariant i38: x == 0 ==> y == 0;\nloop invariant i39: x < 50 ==> y >= 1;\nloop invariant i40: x == 50 ==> y == 1;\nloop invariant i41: x > 50 ==> y >= 2;\nloop invariant i42: x == 100 ==> y == 1;\nloop invariant i43: x < 100 ==> y <= 100;\nloop invariant i44: x < 100 ==> y >= 0;\nloop invariant i45: x >= 100 ==> y >= 1;\nloop invariant i46: x < 100 ==> y <= 99;\nloop invariant i47: x >= 100 ==> y <= 1;\nloop invariant i48: x >= 100 ==> y <= 0;\nloop invariant i49: x < 100 ==> y >= 99;\nloop invariant i50: x >= 100 ==> y >= 0;\nloop invariant i51: x < 100 ==> y <= 98;\nloop invariant i52: x < 100 ==> y <= 97;\nloop invariant i53: x < 100 ==> y <= 96;\nloop invariant i54: x < 100 ==> y <= 95;\nloop invariant i55: x < 100 ==> y <= 94;\nloop invariant i56: x < 100 ==> y <= 93;\nloop invariant i57: x < 100 ==> y <= 92;\nloop invariant i58: x < 100 ==> y <= 91;\nloop invariant i59: x < 100 ==> y <= 90;\nloop invariant i60: x < 100 ==> y <= 89;\nloop invariant i61: x < 100 ==> y <= 88;\nloop invariant i62: x < 100 ==> y <= 87;\nloop invariant i63: x < 100 ==> y <= 86;\nloop invariant i64: 0 <= y <= x;\nloop invariant i65: x < 100 ==> y > 0;\nloop invariant i66: y == 0 ==> x == 100;\nloop invariant i67: x >= y;\nloop invariant i68: x + y > 0 ==> x >= 50;\nloop invariant i69: x + y <= 0 ==> x < 50;\nloop invariant i70: (x < 50) ==> (y <= 50);\nloop invariant i71: (x >= 50) ==> (y >= 50);\nloop invariant i72: (x < 50) ==> (y == x + 1);\nloop invariant i73: (x >= 50) ==> (y == x - 1);\nloop invariant i74: (y >= 0) ==> (x < 100);\nloop invariant i75: (y < 0) ==> (x >= 100);\nloop invariant i76: (y >= 0) ==> (x == 100);\nloop invariant i77: x <= y ==> x == 50;\nloop invariant i78: x > y ==> x + y >= 50;\nloop invariant i79: x >= y ==> x <= 100;\nloop invariant i80: x >= (1 + (y - 1) * y / 2);\nloop invariant i81: x <= (1 + (y - 1) * y / 2);\nloop invariant i82: x == (1 + (y - 1) * y / 2);\n*/\nwhile (1) {\n        if (x < 50) {\n            y++;\n        } else {\n            y--;\n        }\n        if (y < 0) break;\n        x++;\n    }\n    {;\n//@ assert(x == 100);\n}\n\n    return 0;\n}",
        "combined_annotation_num_solver_calls": 35,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int x,y;\n    x = 0;\n    y = 0;\n    /*@\nloop invariant i1: x >= 0;\nloop invariant i2: y >= 0;\n\n\nloop invariant i5: x < 100 ==> y >= 0 && y <= 100;\n\nloop invariant i7: y == 0 ==> (x < 50) ==> x == 0;\nloop invariant i8: y == 100 ==> (x == 50) ==> x == 50;\nloop invariant i9: y == 100 ==> (x > 50) ==> x == 100;\nloop invariant i10: y == 100 ==> (x == 100) ==> x == 100;\n\n\n\n\n\n\n\nloop invariant i18: 0 <= y <= 50;\n\n\nloop invariant i21: 0 <= y <= 100;\n\nloop invariant i23: y <= 100;\nloop invariant i24: (y == x) ==> (y >= 50 ==> y == 50);\nloop invariant i25: y >= -100;\nloop invariant i26: y < 0 ==> x == 100;\n\nloop invariant i28: y >= 0 ==> y <= x;\nloop invariant i29: y < 0 ==> y == -x + 100;\n\nloop invariant i31: x < 50 ==> y >= 0;\nloop invariant i32: x < 50 ==> y <= x;\n\n\n\nloop invariant i36: x < 50 ==> y <= 50;\nloop invariant i37: x >= 50 ==> y <= 100;\nloop invariant i38: x == 0 ==> y == 0;\n\n\n\n\nloop invariant i43: x < 100 ==> y <= 100;\nloop invariant i44: x < 100 ==> y >= 0;\n\nloop invariant i46: x < 100 ==> y <= 99;\n\n\n\nloop invariant i50: x >= 100 ==> y >= 0;\nloop invariant i51: x < 100 ==> y <= 98;\nloop invariant i52: x < 100 ==> y <= 97;\nloop invariant i53: x < 100 ==> y <= 96;\nloop invariant i54: x < 100 ==> y <= 95;\nloop invariant i55: x < 100 ==> y <= 94;\nloop invariant i56: x < 100 ==> y <= 93;\nloop invariant i57: x < 100 ==> y <= 92;\nloop invariant i58: x < 100 ==> y <= 91;\nloop invariant i59: x < 100 ==> y <= 90;\nloop invariant i60: x < 100 ==> y <= 89;\nloop invariant i61: x < 100 ==> y <= 88;\nloop invariant i62: x < 100 ==> y <= 87;\nloop invariant i63: x < 100 ==> y <= 86;\nloop invariant i64: 0 <= y <= x;\n\n\nloop invariant i67: x >= y;\n\nloop invariant i69: x + y <= 0 ==> x < 50;\nloop invariant i70: (x < 50) ==> (y <= 50);\n\n\n\n\nloop invariant i75: (y < 0) ==> (x >= 100);\n\n\nloop invariant i78: x > y ==> x + y >= 50;\n\n\n\n\n*/\nwhile (1) {\n        if (x < 50) {\n            y++;\n        } else {\n            y--;\n        }\n        if (y < 0) break;\n        x++;\n    }\n    {;\n//@ assert(x == 100);\n}\n\n    return 0;\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/split.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c"
        ],
        "skipped": [],
        "total": 51,
        "success_count": 42,
        "failure_count": 9,
        "success_rate": 0.8235294117647058
    }
}