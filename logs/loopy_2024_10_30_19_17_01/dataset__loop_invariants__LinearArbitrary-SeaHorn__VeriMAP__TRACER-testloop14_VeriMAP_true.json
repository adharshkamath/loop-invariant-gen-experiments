{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n  int i, x, y;\n  x = unknown_uint();\n  y = unknown_uint();\n  if (y <= 2) {\n    if (x < 0) {\n      x = 0;\n    }\n    i = 0;\n    while (i < 10) {\n      {;\n//@ assert(!( y > 2 ));\n}\n\n      i++;\n    }\n\n    {;\n//@ assert(!( x <= -1 ));\n}\n\n  }\n  return 0;\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant x >= 0;\nloop invariant y >= x;\nloop invariant y <= 2;\nloop invariant x <= 10;\nloop invariant x <= y;\nloop invariant x <= x;\nloop invariant x <= 2;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 9;\nloop invariant x > -1;\nloop invariant y <= 2;\nloop invariant i >= 0;\nloop invariant i <= 9;\nloop invariant y <= 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant x >= 0;\nloop invariant y > 2;\nloop invariant x >= 0;\nloop invariant x >= i;\nloop invariant y > 2;\nloop invariant x >= 0;\nloop invariant x >= i;\nloop invariant y > 2;\nloop invariant x >= 0;\nloop invariant x >= i;\nloop invariant y > 2;\nloop invariant x >= 0;\nloop invariant x >= i;\nloop invariant y > 2;\nloop invariant x >= 0;\nloop invariant x >= i;\nloop invariant y > 2;\nloop invariant x >= 0;\nloop invariant x >= i;\nloop invariant y > 2;\nloop invariant x >= 0;\nloop invariant x >= i;\nloop invariant y > 2;\nloop invariant x >= 0;\nloop invariant x >= i;\nloop invariant y > 2;\nloop invariant x >= 0;\nloop invariant x >= i;\nloop invariant y > 2;\nloop invariant x >= 0;\nloop invariant x >= i;\nloop invariant y > 2;\nloop invariant x >= 0;\nloop invariant x >= i;\nloop invariant y > 2;\nloop invariant x >= 0;\nloop invariant x >= i;\nloop invariant y > 2;\nloop invariant x >= 0;\nloop invariant x >= i;\nloop invariant y > 2;\nloop invariant x >= 0;\nloop invariant x >= i;\nloop invariant y > 2;\nloop invariant x >= 0;\nloop invariant x >= i;\nloop invariant y > 2;\nloop invariant x >= 0;\nloop invariant x >= i;\nloop invariant y > 2;\nloop invariant x >= 0;\nloop invariant x >= i;\nloop invariant y > 2;\nloop invariant x >= 0;\nloop invariant x >= i;\nloop invariant y > 2;\nloop invariant x >= 0;\nloop invariant x >= i;\nloop invariant y > 2;\nloop invariant x >= 0;\nloop invariant x >= i;\nloop invariant y > 2;\nloop invariant x >= 0;\nloop invariant x >= i;\nloop invariant y > 2;\nloop invariant x >= 0;\nloop invariant x >= i;\nloop invariant y > 2;\nloop invariant x >= 0;\nloop invariant x >= i;\nloop invariant y > 2;\nloop invariant x >= 0;\nloop invariant x >= i;\nloop invariant y > 2;\nloop invariant x >= 0;\nloop invariant x >= i;\nloop invariant y > 2;\nloop invariant x >= 0;\nloop invariant x >= i;\nloop invariant y > 2;\nloop invariant x >= 0;\nloop invariant x >= i;\nloop invariant y > 2;\nloop invariant x >= 0;\nloop invariant x >= i;\nloop invariant y > 2;\nloop invariant x >= 0;\nloop invariant x >= i;\nloop invariant y > 2;\nloop invariant x >= 0;\nloop invariant x >= i;\nloop invariant y > 2;\nloop invariant x >= 0;\nloop invariant x >= i;\nloop invariant y > 2;\nloop invariant x >= 0;\nloop invariant x >= i;\nloop invariant y > 2;\nloop invariant x >= 0;\nloop invariant x >= i;\nloop invariant y > 2;\nloop invariant x >= 0;\nloop invariant x >= i;\nloop invariant y > 2;\nloop invariant x >= 0;\nloop invariant x >= i;\nloop invariant y > 2;\nloop invariant x >= 0;\nloop invariant x >= i;\nloop invariant y > 2;\nloop invariant x >= 0;\nloop invariant x >= i;\nloop invariant y > 2;\nloop invariant x >= 0;\nloop invariant x >= i;\nloop invariant y > 2;\nloop invariant x >= 0;\nloop invariant x >= i;\nloop invariant y > 2;\nloop invariant x >= 0;\nloop invariant x >= i;\nloop invariant y > 2;\nloop invariant x >= 0;\nloop invariant x >= i;\nloop invariant y > 2;\nloop invariant x >= 0;\nloop invariant x >= i;\nloop invariant y > 2;\nloop invariant x >= 0;\nloop invariant x >= i;\nloop invariant y > 2;\nloop invariant x >= 0;\nloop invariant x >= i;\nloop invariant y > 2;\nloop invariant x >= 0;\nloop invariant x >= i;\nloop invariant y > 2;\nloop invariant x >= 0;\nloop invariant x >= i;\nloop invariant y > 2;\nloop invariant x >= 0;\nloop invariant x >= i;\nloop invariant y > 2;\nloop invariant x >= 0;\nloop invariant x >= i;\nloop invariant y > 2;\nloop invariant x >= 0;\nloop invariant x >= i;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant x <= (unknown_uint() - 1);\nloop invariant y <= 2;\nloop invariant y <= (unknown_uint() - 1);\nloop invariant y <= (unknown_uint() - 1);\nloop invariant x <= 0;\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant x >= 0;\nloop invariant y <= 2;\nloop invariant x <= (i * (i - 1) / 2);\nloop invariant y <= i;\nloop invariant y <= 2 ==> x <= (i * (i - 1) / 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 2;\nloop invariant 0 <= x;\nloop invariant 0 <= i <= 10;\nloop invariant (y <= 2 ==> x >= 0);\nloop invariant (y <= 2 ==> i >= 0);\nloop invariant (y <= 2 ==> i <= 10);\nloop invariant (y <= 2 ==> x <= (i + x));\nloop invariant (y <= 2 ==> x >= (i + x));\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant x >= 0;\nloop invariant y <= 2;\nloop invariant !(y > 2) ==> x >= 0;\nloop invariant !(y > 2) ==> i <= 10;\nloop invariant !(x <= -1) ==> y <= 2;\nloop invariant !(x <= -1) ==> i >= 10;\nloop invariant !(x <= -1) ==> x >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 9;\nloop invariant x <= y;\nloop invariant x <= (i + 1) * y;\nloop invariant (i < 10) ==> (x <= y);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 2;\nloop invariant x >= 0;\nloop invariant i >= 0;\nloop invariant i <= 10;\nloop invariant x > y;\nloop invariant x <= 10;\nloop invariant y >= 0;\nloop invariant y <= 2;\nloop invariant x >= 0;\nloop invariant x <= 10;\nloop invariant y >= 0;\nloop invariant y <= 2;\nloop invariant x > y;\nloop invariant x <= 10;\n*/\n```",
            "```\n/*@\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y <= 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant x >= 0;\nloop invariant y <= 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 2;\nloop invariant x >= 0;\nloop invariant i >= 0;\nloop invariant i <= 10;\nloop invariant x >= y;\nloop invariant i < 10 ==> (x == ((y + y) * i / 2));\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant 0 <= x <= unknown_uint();\nloop invariant 0 <= y <= unknown_uint();\nloop invariant x >= 0;\nloop invariant y <= 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant x >= 0;\nloop invariant y == 2;\nloop invariant x >= y;\nloop invariant x == (x + y);\nloop invariant i == 0;\nloop invariant x == 0;\nloop invariant i == (i + 1);\nloop invariant x == (x + y);\nloop invariant y == (y + 1);\nloop invariant (y <= 2) ==> (y == 2);\nloop invariant (y <= 2) ==> (y == 2);\nloop invariant (y <= 2) ==> (y == 2);\nloop invariant (y <= 2) ==> (y == 2);\nloop invariant (y <= 2) ==> (y == 2);\nloop invariant (y <= 2) ==> (y == 2);\nloop invariant (y <= 2) ==> (y == 2);\nloop invariant (y <= 2) ==> (y == 2);\nloop invariant (y <= 2) ==> (y == 2);\nloop invariant (y <= 2) ==> (y == 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= unknown_uint();\nloop invariant 0 <= x <= unknown_uint();\nloop invariant i >= 0;\nloop invariant i <= 10;\nloop invariant !(y > 2);\nloop invariant !(x <= -1);\nloop invariant x >= i;\nloop invariant y + 1 >= i;\nloop invariant i * (i + 1) / 2 <= x;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant x >= 0;\nloop invariant y >= x;\nloop invariant y <= 2;\nloop invariant x <= 10;\nloop invariant x <= y;\nloop invariant x <= x;\nloop invariant x <= 2;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\nloop invariant x <= 10;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n  int i, x, y;\n  x = unknown_uint();\n  y = unknown_uint();\n  if (y <= 2) {\n    if (x < 0) {\n      x = 0;\n    }\n    i = 0;\n    /*@\nloop invariant i1: 0 <= i <= 10;\nloop invariant i2: x >= 0;\n\nloop invariant i4: y <= 2;\n\n\nloop invariant i7: x <= x;\n\n*/\nwhile (i < 10) {\n      {;\n//@ assert(!( y > 2 ));\n}\n\n      i++;\n    }\n\n    {;\n//@ assert(!( x <= -1 ));\n}\n\n  }\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 9;\nloop invariant x > -1;\nloop invariant y <= 2;\nloop invariant i >= 0;\nloop invariant i <= 9;\nloop invariant y <= 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n  int i, x, y;\n  x = unknown_uint();\n  y = unknown_uint();\n  if (y <= 2) {\n    if (x < 0) {\n      x = 0;\n    }\n    i = 0;\n    /*@\n\nloop invariant i2: x > -1;\nloop invariant i3: y <= 2;\nloop invariant i4: i >= 0;\n\n*/\nwhile (i < 10) {\n      {;\n//@ assert(!( y > 2 ));\n}\n\n      i++;\n    }\n\n    {;\n//@ assert(!( x <= -1 ));\n}\n\n  }\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant x >= 0;\nloop invariant y > 2;\nloop invariant x >= 0;\nloop invariant x >= i;\nloop invariant y > 2;\nloop invariant x >= 0;\nloop invariant x >= i;\nloop invariant y > 2;\nloop invariant x >= 0;\nloop invariant x >= i;\nloop invariant y > 2;\nloop invariant x >= 0;\nloop invariant x >= i;\nloop invariant y > 2;\nloop invariant x >= 0;\nloop invariant x >= i;\nloop invariant y > 2;\nloop invariant x >= 0;\nloop invariant x >= i;\nloop invariant y > 2;\nloop invariant x >= 0;\nloop invariant x >= i;\nloop invariant y > 2;\nloop invariant x >= 0;\nloop invariant x >= i;\nloop invariant y > 2;\nloop invariant x >= 0;\nloop invariant x >= i;\nloop invariant y > 2;\nloop invariant x >= 0;\nloop invariant x >= i;\nloop invariant y > 2;\nloop invariant x >= 0;\nloop invariant x >= i;\nloop invariant y > 2;\nloop invariant x >= 0;\nloop invariant x >= i;\nloop invariant y > 2;\nloop invariant x >= 0;\nloop invariant x >= i;\nloop invariant y > 2;\nloop invariant x >= 0;\nloop invariant x >= i;\nloop invariant y > 2;\nloop invariant x >= 0;\nloop invariant x >= i;\nloop invariant y > 2;\nloop invariant x >= 0;\nloop invariant x >= i;\nloop invariant y > 2;\nloop invariant x >= 0;\nloop invariant x >= i;\nloop invariant y > 2;\nloop invariant x >= 0;\nloop invariant x >= i;\nloop invariant y > 2;\nloop invariant x >= 0;\nloop invariant x >= i;\nloop invariant y > 2;\nloop invariant x >= 0;\nloop invariant x >= i;\nloop invariant y > 2;\nloop invariant x >= 0;\nloop invariant x >= i;\nloop invariant y > 2;\nloop invariant x >= 0;\nloop invariant x >= i;\nloop invariant y > 2;\nloop invariant x >= 0;\nloop invariant x >= i;\nloop invariant y > 2;\nloop invariant x >= 0;\nloop invariant x >= i;\nloop invariant y > 2;\nloop invariant x >= 0;\nloop invariant x >= i;\nloop invariant y > 2;\nloop invariant x >= 0;\nloop invariant x >= i;\nloop invariant y > 2;\nloop invariant x >= 0;\nloop invariant x >= i;\nloop invariant y > 2;\nloop invariant x >= 0;\nloop invariant x >= i;\nloop invariant y > 2;\nloop invariant x >= 0;\nloop invariant x >= i;\nloop invariant y > 2;\nloop invariant x >= 0;\nloop invariant x >= i;\nloop invariant y > 2;\nloop invariant x >= 0;\nloop invariant x >= i;\nloop invariant y > 2;\nloop invariant x >= 0;\nloop invariant x >= i;\nloop invariant y > 2;\nloop invariant x >= 0;\nloop invariant x >= i;\nloop invariant y > 2;\nloop invariant x >= 0;\nloop invariant x >= i;\nloop invariant y > 2;\nloop invariant x >= 0;\nloop invariant x >= i;\nloop invariant y > 2;\nloop invariant x >= 0;\nloop invariant x >= i;\nloop invariant y > 2;\nloop invariant x >= 0;\nloop invariant x >= i;\nloop invariant y > 2;\nloop invariant x >= 0;\nloop invariant x >= i;\nloop invariant y > 2;\nloop invariant x >= 0;\nloop invariant x >= i;\nloop invariant y > 2;\nloop invariant x >= 0;\nloop invariant x >= i;\nloop invariant y > 2;\nloop invariant x >= 0;\nloop invariant x >= i;\nloop invariant y > 2;\nloop invariant x >= 0;\nloop invariant x >= i;\nloop invariant y > 2;\nloop invariant x >= 0;\nloop invariant x >= i;\nloop invariant y > 2;\nloop invariant x >= 0;\nloop invariant x >= i;\nloop invariant y > 2;\nloop invariant x >= 0;\nloop invariant x >= i;\nloop invariant y > 2;\nloop invariant x >= 0;\nloop invariant x >= i;\nloop invariant y > 2;\nloop invariant x >= 0;\nloop invariant x >= i;\nloop invariant y > 2;\nloop invariant x >= 0;\nloop invariant x >= i;\nloop invariant y > 2;\nloop invariant x >= 0;\nloop invariant x >= i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n  int i, x, y;\n  x = unknown_uint();\n  y = unknown_uint();\n  if (y <= 2) {\n    if (x < 0) {\n      x = 0;\n    }\n    i = 0;\n    /*@\nloop invariant i1: 0 <= i <= 10;\nloop invariant i2: x >= 0;\n\n\n*/\nwhile (i < 10) {\n      {;\n//@ assert(!( y > 2 ));\n}\n\n      i++;\n    }\n\n    {;\n//@ assert(!( x <= -1 ));\n}\n\n  }\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant x <= (unknown_uint() - 1);\nloop invariant y <= 2;\nloop invariant y <= (unknown_uint() - 1);\nloop invariant y <= (unknown_uint() - 1);\nloop invariant x <= 0;\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\nloop invariant x <= (unknown_uint() - 1);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n  int i, x, y;\n  x = unknown_uint();\n  y = unknown_uint();\n  if (y <= 2) {\n    if (x < 0) {\n      x = 0;\n    }\n    i = 0;\n    /*@\nloop invariant i1: 0 <= i <= 10;\n\nloop invariant i3: y <= 2;\n\n\n*/\nwhile (i < 10) {\n      {;\n//@ assert(!( y > 2 ));\n}\n\n      i++;\n    }\n\n    {;\n//@ assert(!( x <= -1 ));\n}\n\n  }\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant x >= 0;\nloop invariant y <= 2;\nloop invariant x <= (i * (i - 1) / 2);\nloop invariant y <= i;\nloop invariant y <= 2 ==> x <= (i * (i - 1) / 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n  int i, x, y;\n  x = unknown_uint();\n  y = unknown_uint();\n  if (y <= 2) {\n    if (x < 0) {\n      x = 0;\n    }\n    i = 0;\n    /*@\nloop invariant i1: 0 <= i <= 10;\nloop invariant i2: x >= 0;\nloop invariant i3: y <= 2;\n\n\n\n*/\nwhile (i < 10) {\n      {;\n//@ assert(!( y > 2 ));\n}\n\n      i++;\n    }\n\n    {;\n//@ assert(!( x <= -1 ));\n}\n\n  }\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 2;\nloop invariant 0 <= x;\nloop invariant 0 <= i <= 10;\nloop invariant (y <= 2 ==> x >= 0);\nloop invariant (y <= 2 ==> i >= 0);\nloop invariant (y <= 2 ==> i <= 10);\nloop invariant (y <= 2 ==> x <= (i + x));\nloop invariant (y <= 2 ==> x >= (i + x));\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n  int i, x, y;\n  x = unknown_uint();\n  y = unknown_uint();\n  if (y <= 2) {\n    if (x < 0) {\n      x = 0;\n    }\n    i = 0;\n    /*@\n\nloop invariant i2: 0 <= x;\nloop invariant i3: 0 <= i <= 10;\nloop invariant i4: (y <= 2 ==> x >= 0);\nloop invariant i5: (y <= 2 ==> i >= 0);\nloop invariant i6: (y <= 2 ==> i <= 10);\nloop invariant i7: (y <= 2 ==> x <= (i + x));\n\n*/\nwhile (i < 10) {\n      {;\n//@ assert(!( y > 2 ));\n}\n\n      i++;\n    }\n\n    {;\n//@ assert(!( x <= -1 ));\n}\n\n  }\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant x >= 0;\nloop invariant y <= 2;\nloop invariant !(y > 2) ==> x >= 0;\nloop invariant !(y > 2) ==> i <= 10;\nloop invariant !(x <= -1) ==> y <= 2;\nloop invariant !(x <= -1) ==> i >= 10;\nloop invariant !(x <= -1) ==> x >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n  int i, x, y;\n  x = unknown_uint();\n  y = unknown_uint();\n  if (y <= 2) {\n    if (x < 0) {\n      x = 0;\n    }\n    i = 0;\n    /*@\nloop invariant i1: 0 <= i <= 10;\nloop invariant i2: x >= 0;\nloop invariant i3: y <= 2;\nloop invariant i4: !(y > 2) ==> x >= 0;\nloop invariant i5: !(y > 2) ==> i <= 10;\nloop invariant i6: !(x <= -1) ==> y <= 2;\n\nloop invariant i8: !(x <= -1) ==> x >= 0;\n*/\nwhile (i < 10) {\n      {;\n//@ assert(!( y > 2 ));\n}\n\n      i++;\n    }\n\n    {;\n//@ assert(!( x <= -1 ));\n}\n\n  }\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 9;\nloop invariant x <= y;\nloop invariant x <= (i + 1) * y;\nloop invariant (i < 10) ==> (x <= y);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n  int i, x, y;\n  x = unknown_uint();\n  y = unknown_uint();\n  if (y <= 2) {\n    if (x < 0) {\n      x = 0;\n    }\n    i = 0;\n    /*@\n\n\n\n\n*/\nwhile (i < 10) {\n      {;\n//@ assert(!( y > 2 ));\n}\n\n      i++;\n    }\n\n    {;\n//@ assert(!( x <= -1 ));\n}\n\n  }\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 2;\nloop invariant x >= 0;\nloop invariant i >= 0;\nloop invariant i <= 10;\nloop invariant x > y;\nloop invariant x <= 10;\nloop invariant y >= 0;\nloop invariant y <= 2;\nloop invariant x >= 0;\nloop invariant x <= 10;\nloop invariant y >= 0;\nloop invariant y <= 2;\nloop invariant x > y;\nloop invariant x <= 10;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n  int i, x, y;\n  x = unknown_uint();\n  y = unknown_uint();\n  if (y <= 2) {\n    if (x < 0) {\n      x = 0;\n    }\n    i = 0;\n    /*@\n\nloop invariant i2: x >= 0;\nloop invariant i3: i >= 0;\nloop invariant i4: i <= 10;\n\n\n\nloop invariant i8: y <= 2;\n*/\nwhile (i < 10) {\n      {;\n//@ assert(!( y > 2 ));\n}\n\n      i++;\n    }\n\n    {;\n//@ assert(!( x <= -1 ));\n}\n\n  }\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y <= 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n  int i, x, y;\n  x = unknown_uint();\n  y = unknown_uint();\n  if (y <= 2) {\n    if (x < 0) {\n      x = 0;\n    }\n    i = 0;\n    /*@\nloop invariant i1: x >= 0;\n\nloop invariant i3: y <= 2;\n*/\nwhile (i < 10) {\n      {;\n//@ assert(!( y > 2 ));\n}\n\n      i++;\n    }\n\n    {;\n//@ assert(!( x <= -1 ));\n}\n\n  }\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant x >= 0;\nloop invariant y <= 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n  int i, x, y;\n  x = unknown_uint();\n  y = unknown_uint();\n  if (y <= 2) {\n    if (x < 0) {\n      x = 0;\n    }\n    i = 0;\n    /*@\nloop invariant i1: 0 <= i <= 10;\nloop invariant i2: x >= 0;\nloop invariant i3: y <= 2;\n*/\nwhile (i < 10) {\n      {;\n//@ assert(!( y > 2 ));\n}\n\n      i++;\n    }\n\n    {;\n//@ assert(!( x <= -1 ));\n}\n\n  }\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 2;\nloop invariant x >= 0;\nloop invariant i >= 0;\nloop invariant i <= 10;\nloop invariant x >= y;\nloop invariant i < 10 ==> (x == ((y + y) * i / 2));\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n  int i, x, y;\n  x = unknown_uint();\n  y = unknown_uint();\n  if (y <= 2) {\n    if (x < 0) {\n      x = 0;\n    }\n    i = 0;\n    /*@\n\nloop invariant i2: x >= 0;\nloop invariant i3: i >= 0;\nloop invariant i4: i <= 10;\n\n\n*/\nwhile (i < 10) {\n      {;\n//@ assert(!( y > 2 ));\n}\n\n      i++;\n    }\n\n    {;\n//@ assert(!( x <= -1 ));\n}\n\n  }\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant 0 <= x <= unknown_uint();\nloop invariant 0 <= y <= unknown_uint();\nloop invariant x >= 0;\nloop invariant y <= 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n  int i, x, y;\n  x = unknown_uint();\n  y = unknown_uint();\n  if (y <= 2) {\n    if (x < 0) {\n      x = 0;\n    }\n    i = 0;\n    /*@\nloop invariant i1: 0 <= i <= 10;\n\n\nloop invariant i4: x >= 0;\nloop invariant i5: y <= 2;\n*/\nwhile (i < 10) {\n      {;\n//@ assert(!( y > 2 ));\n}\n\n      i++;\n    }\n\n    {;\n//@ assert(!( x <= -1 ));\n}\n\n  }\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant x >= 0;\nloop invariant y == 2;\nloop invariant x >= y;\nloop invariant x == (x + y);\nloop invariant i == 0;\nloop invariant x == 0;\nloop invariant i == (i + 1);\nloop invariant x == (x + y);\nloop invariant y == (y + 1);\nloop invariant (y <= 2) ==> (y == 2);\nloop invariant (y <= 2) ==> (y == 2);\nloop invariant (y <= 2) ==> (y == 2);\nloop invariant (y <= 2) ==> (y == 2);\nloop invariant (y <= 2) ==> (y == 2);\nloop invariant (y <= 2) ==> (y == 2);\nloop invariant (y <= 2) ==> (y == 2);\nloop invariant (y <= 2) ==> (y == 2);\nloop invariant (y <= 2) ==> (y == 2);\nloop invariant (y <= 2) ==> (y == 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n  int i, x, y;\n  x = unknown_uint();\n  y = unknown_uint();\n  if (y <= 2) {\n    if (x < 0) {\n      x = 0;\n    }\n    i = 0;\n    /*@\nloop invariant i1: 0 <= i <= 10;\nloop invariant i2: x >= 0;\n\n\n\n\n\n\n\n\n*/\nwhile (i < 10) {\n      {;\n//@ assert(!( y > 2 ));\n}\n\n      i++;\n    }\n\n    {;\n//@ assert(!( x <= -1 ));\n}\n\n  }\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= unknown_uint();\nloop invariant 0 <= x <= unknown_uint();\nloop invariant i >= 0;\nloop invariant i <= 10;\nloop invariant !(y > 2);\nloop invariant !(x <= -1);\nloop invariant x >= i;\nloop invariant y + 1 >= i;\nloop invariant i * (i + 1) / 2 <= x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n  int i, x, y;\n  x = unknown_uint();\n  y = unknown_uint();\n  if (y <= 2) {\n    if (x < 0) {\n      x = 0;\n    }\n    i = 0;\n    /*@\n\n\nloop invariant i3: i >= 0;\nloop invariant i4: i <= 10;\nloop invariant i5: !(y > 2);\nloop invariant i6: !(x <= -1);\n\n\n\n*/\nwhile (i < 10) {\n      {;\n//@ assert(!( y > 2 ));\n}\n\n      i++;\n    }\n\n    {;\n//@ assert(!( x <= -1 ));\n}\n\n  }\n  return 0;\n}",
                "checker_output_after_prune": true
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 35: unexpected token ')'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n  int i, x, y;\n  x = unknown_uint();\n  y = unknown_uint();\n  if (y <= 2) {\n    if (x < 0) {\n      x = 0;\n    }\n    i = 0;\n    /*@\nloop invariant i1: 0 <= i <= 10;\nloop invariant i2: x >= 0;\nloop invariant i3: y >= x;\nloop invariant i4: y <= 2;\nloop invariant i5: x <= 10;\nloop invariant i6: x <= y;\nloop invariant i7: x <= x;\nloop invariant i8: x <= 2;\nloop invariant i9: 0 <= i <= 9;\nloop invariant i10: x > -1;\nloop invariant i11: i >= 0;\nloop invariant i12: i <= 9;\nloop invariant i13: y > 2;\nloop invariant i14: x >= i;\nloop invariant i15: x <= (unknown_uint() - 1);\nloop invariant i16: y <= (unknown_uint() - 1);\nloop invariant i17: x <= 0;\nloop invariant i18: x <= (i * (i - 1) / 2);\nloop invariant i19: y <= i;\nloop invariant i20: y <= 2 ==> x <= (i * (i - 1) / 2);\nloop invariant i21: 0 <= y <= 2;\nloop invariant i22: 0 <= x;\nloop invariant i23: (y <= 2 ==> x >= 0);\nloop invariant i24: (y <= 2 ==> i >= 0);\nloop invariant i25: (y <= 2 ==> i <= 10);\nloop invariant i26: (y <= 2 ==> x <= (i + x));\nloop invariant i27: (y <= 2 ==> x >= (i + x));\nloop invariant i28: !(y > 2) ==> x >= 0;\nloop invariant i29: !(y > 2) ==> i <= 10;\nloop invariant i30: !(x <= -1) ==> y <= 2;\nloop invariant i31: !(x <= -1) ==> i >= 10;\nloop invariant i32: !(x <= -1) ==> x >= 0;\nloop invariant i33: x <= (i + 1) * y;\nloop invariant i34: (i < 10) ==> (x <= y);\nloop invariant i35: i <= 10;\nloop invariant i36: x > y;\nloop invariant i37: y >= 0;\nloop invariant i38: x >= y;\nloop invariant i39: i < 10 ==> (x == ((y + y) * i / 2));\nloop invariant i40: 0 <= x <= unknown_uint();\nloop invariant i41: 0 <= y <= unknown_uint();\nloop invariant i42: y == 2;\nloop invariant i43: x == (x + y);\nloop invariant i44: i == 0;\nloop invariant i45: x == 0;\nloop invariant i46: i == (i + 1);\nloop invariant i47: y == (y + 1);\nloop invariant i48: (y <= 2) ==> (y == 2);\nloop invariant i49: !(y > 2);\nloop invariant i50: !(x <= -1);\nloop invariant i51: y + 1 >= i;\nloop invariant i52: i * (i + 1) / 2 <= x;\n*/\nwhile (i < 10) {\n      {;\n//@ assert(!( y > 2 ));\n}\n\n      i++;\n    }\n\n    {;\n//@ assert(!( x <= -1 ));\n}\n\n  }\n  return 0;\n}",
        "combined_annotation_num_solver_calls": 15,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n  int i, x, y;\n  x = unknown_uint();\n  y = unknown_uint();\n  if (y <= 2) {\n    if (x < 0) {\n      x = 0;\n    }\n    i = 0;\n    /*@\nloop invariant i1: 0 <= i <= 10;\nloop invariant i2: x >= 0;\n\nloop invariant i4: y <= 2;\n\n\nloop invariant i7: x <= x;\n\n\nloop invariant i10: x > -1;\nloop invariant i11: i >= 0;\n\n\n\n\n\n\n\n\n\n\nloop invariant i22: 0 <= x;\nloop invariant i23: (y <= 2 ==> x >= 0);\nloop invariant i24: (y <= 2 ==> i >= 0);\nloop invariant i25: (y <= 2 ==> i <= 10);\nloop invariant i26: (y <= 2 ==> x <= (i + x));\n\nloop invariant i28: !(y > 2) ==> x >= 0;\nloop invariant i29: !(y > 2) ==> i <= 10;\nloop invariant i30: !(x <= -1) ==> y <= 2;\n\nloop invariant i32: !(x <= -1) ==> x >= 0;\n\n\nloop invariant i35: i <= 10;\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i49: !(y > 2);\nloop invariant i50: !(x <= -1);\n\n\n*/\nwhile (i < 10) {\n      {;\n//@ assert(!( y > 2 ));\n}\n\n      i++;\n    }\n\n    {;\n//@ assert(!( x <= -1 ));\n}\n\n  }\n  return 0;\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c"
        ],
        "skipped": [],
        "total": 15,
        "success_count": 14,
        "failure_count": 1,
        "success_rate": 0.9333333333333333
    }
}