{
    "logs": {
        "file": "../dataset/loop_invariants/accelerating_invariant_generation/dagger/bk-nat.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint invalid;\n\tint unowned;\n\tint nonexclusive;\n\tint exclusive;\n\n\tif (! (exclusive==0)) \nreturn 0;\n\n\tif (! (nonexclusive==0)) \nreturn 0;\n\n\tif (! (unowned==0)) \nreturn 0;\n\n\tif (! (invalid>= 1)) \nreturn 0;\n\n\twhile (unknown_int())\n\t{\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (invalid >= 1)) \nreturn 0;\n\n\t\t\tnonexclusive=nonexclusive+exclusive;\n\t\t\texclusive=0;\n\t\t\tinvalid=invalid-1;\n\t\t\tunowned=unowned+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (unknown_int())\n\t\t\t{\n\t\t\t\tif (! (nonexclusive + unowned >=1)) \nreturn 0;\n\n\t\t\t\tinvalid=invalid + unowned + nonexclusive-1;\n\t\t\t\texclusive=exclusive+1;\n\t\t\t\tunowned=0;\n\t\t\t\tnonexclusive=0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (! (invalid >= 1)) \nreturn 0;\n\n\t\t\t\tunowned=0;\n\t\t\t\tnonexclusive=0;\n\t\t\t\texclusive=1;\n\t\t\t\tinvalid=invalid+unowned+exclusive+nonexclusive-1;\n\t\t\t}\n\t\t}\n\t}\n\n\t{;\n//@ assert(exclusive >= 0);\n}\n\n\t{;\n//@ assert(nonexclusive >= 0);\n}\n\n\t{;\n//@ assert(unowned >= 0);\n}\n\n\t{;\n//@ assert(invalid >= 0);\n}\n\n\t{;\n//@ assert(invalid + unowned + exclusive >= 1);\n}\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= invalid <= unknown_int();\nloop invariant 0 <= unowned <= unknown_int();\nloop invariant 0 <= nonexclusive <= unknown_int();\nloop invariant 0 <= exclusive <= unknown_int();\nloop invariant exclusive >= 0 ==> exclusive <= unknown_int();\nloop invariant nonexclusive >= 0 ==> nonexclusive <= unknown_int();\nloop invariant unowned >= 0 ==> unowned <= unknown_int();\nloop invariant invalid >= 0 ==> invalid <= unknown_int();\nloop invariant invalid + unowned + exclusive >= 1 ==> invalid + unowned + exclusive <= unknown_int();\nloop invariant invalid >= 1 ==> invalid <= unknown_int();\nloop invariant unowned >= 0 ==> unowned <= unknown_int();\nloop invariant nonexclusive >= 0 ==> nonexclusive <= unknown_int();\nloop invariant exclusive >= 0 ==> exclusive <= unknown_int();\nloop invariant invalid + unowned + exclusive >= 1 ==> invalid + unowned + exclusive <= unknown_int();\nloop invariant invalid >= 1 ==> invalid <= unknown_int();\nloop invariant unowned >= 0 ==> unowned <= unknown_int();\nloop invariant nonexclusive >= 0 ==> nonexclusive <= unknown_int();\nloop invariant exclusive >= 0 ==> exclusive <= unknown_int();\nloop invariant invalid + unowned + exclusive >= 1 ==> invalid + unowned + exclusive <= unknown_int();\nloop invariant invalid >= 1 ==> invalid <= unknown_int();\nloop invariant unowned >= 0 ==> unowned <= unknown_int();\nloop invariant nonexclusive >= 0 ==> nonexclusive <= unknown_int();\nloop invariant exclusive >= 0 ==> exclusive <= unknown_int();\nloop invariant invalid + unowned + exclusive >= 1 ==> invalid + unowned + exclusive <= unknown_int();\nloop invariant invalid >= 1 ==> invalid <= unknown_int();\nloop invariant unowned >= 0 ==> unowned <= unknown_int();\nloop invariant nonexclusive >= 0 ==> nonexclusive <= unknown_int();\nloop invariant exclusive >= 0 ==> exclusive <= unknown_int();\nloop invariant invalid + unowned + exclusive >= 1 ==> invalid + unowned + exclusive <= unknown_int();\nloop invariant invalid >= 1 ==> invalid <= unknown_int();\nloop invariant unowned >= 0 ==> unowned <= unknown_int();\nloop invariant nonexclusive >= 0 ==> nonexclusive <= unknown_int();\nloop invariant exclusive >= 0 ==> exclusive <= unknown_int();\nloop invariant invalid + unowned + exclusive >= 1 ==> invalid + unowned + exclusive <= unknown_int();\nloop invariant invalid >= 1 ==> invalid <= unknown_int();\nloop invariant unowned >= 0 ==> unowned <= unknown_int();\nloop invariant nonexclusive >= 0 ==> nonexclusive <= unknown_int();\nloop invariant exclusive >= 0 ==> exclusive <= unknown_int();\nloop invariant invalid + unowned + exclusive >= 1 ==> invalid + unowned + exclusive <= unknown_int();\nloop invariant invalid >= 1 ==> invalid <= unknown_int();\nloop invariant unowned >= 0 ==> unowned <= unknown_int();\nloop invariant nonexclusive >= 0 ==> nonexclusive <= unknown_int();\nloop invariant exclusive >= 0 ==> exclusive <= unknown_int();\nloop invariant invalid + unowned + exclusive >= 1 ==> invalid + unowned + exclusive <= unknown_int();\nloop invariant invalid >= 1 ==> invalid <= unknown_int();\nloop invariant unowned >= 0 ==> unowned <= unknown_int();\nloop invariant nonexclusive >= 0 ==> nonexclusive <= unknown_int();\nloop invariant exclusive >= 0 ==> exclusive <= unknown_int();\nloop invariant invalid + unowned + exclusive >= 1 ==> invalid + unowned + exclusive <= unknown_int();\nloop invariant invalid >= 1 ==> invalid <= unknown_int();\nloop invariant unowned >= 0 ==> unowned <= unknown_int();\nloop invariant nonexclusive >= 0 ==> nonexclusive <= unknown_int();\nloop invariant exclusive >= 0 ==> exclusive <= unknown_int();\nloop invariant invalid + unowned + exclusive >= 1 ==> invalid + unowned + exclusive <= unknown_int();\nloop invariant invalid >= 1 ==> invalid <= unknown_int();\nloop invariant unowned >= 0 ==> unowned <= unknown_int();\nloop invariant nonexclusive >= 0 ==> nonexclusive <= unknown_int();\nloop invariant exclusive >= 0 ==> exclusive <= unknown_int();\nloop invariant invalid + unowned + exclusive >= 1 ==> invalid + unowned + exclusive <= unknown_int();\nloop invariant invalid >= 1 ==> invalid <= unknown_int();\nloop invariant unowned >= 0 ==> unowned <= unknown_int();\nloop invariant nonexclusive >= 0 ==> nonexclusive <= unknown_int();\nloop invariant exclusive >= 0 ==> exclusive <= unknown_int();\nloop invariant invalid + unowned + exclusive >= 1 ==> invalid + unowned + exclusive <= unknown_int();\nloop invariant invalid >= 1 ==> invalid <= unknown_int();\nloop invariant unowned >= 0 ==> unowned <= unknown_int();\nloop invariant nonexclusive >= 0 ==> nonexclusive <= unknown_int();\nloop invariant exclusive >= 0 ==> exclusive <= unknown_int();\n*/\n```",
            "```\n/*@\nloop invariant exclusive >= 0;\nloop invariant nonexclusive >= 0;\nloop invariant unowned >= 0;\nloop invariant invalid >= 0;\nloop invariant invalid + unowned + exclusive >= 1;\nloop invariant invalid + unowned + exclusive <= 3;\nloop invariant invalid + unowned + exclusive = 1 ==> invalid = 1;\nloop invariant invalid + unowned + exclusive = 2 ==> exclusive = 1;\nloop invariant invalid + unowned + exclusive = 3 ==> nonexclusive = 1;\nloop invariant invalid + unowned + exclusive = 3 ==> unowned = 1;\nloop invariant invalid + unowned + exclusive = 3 ==> exclusive = 1;\nloop invariant invalid + unowned + exclusive = 3 ==> unowned = 1;\nloop invariant invalid + unowned + exclusive = 3 ==> exclusive = 1;\nloop invariant invalid + unowned + exclusive = 3 ==> unowned = 1;\nloop invariant invalid + unowned + exclusive = 3 ==> exclusive = 1;\nloop invariant invalid + unowned + exclusive = 3 ==> unowned = 1;\nloop invariant invalid + unowned + exclusive = 3 ==> exclusive = 1;\nloop invariant invalid + unowned + exclusive = 3 ==> unowned = 1;\nloop invariant invalid + unowned + exclusive = 3 ==> exclusive = 1;\nloop invariant invalid + unowned + exclusive = 3 ==> unowned = 1;\nloop invariant invalid + unowned + exclusive = 3 ==> exclusive = 1;\nloop invariant invalid + unowned + exclusive = 3 ==> unowned = 1;\nloop invariant invalid + unowned + exclusive = 3 ==> exclusive = 1;\nloop invariant invalid + unowned + exclusive = 3 ==> unowned = 1;\nloop invariant invalid + unowned + exclusive = 3 ==> exclusive = 1;\nloop invariant invalid + unowned + exclusive = 3 ==> unowned = 1;\nloop invariant invalid + unowned + exclusive = 3 ==> exclusive = 1;\nloop invariant invalid + unowned + exclusive = 3 ==> unowned = 1;\nloop invariant invalid + unowned + exclusive = 3 ==> exclusive = 1;\nloop invariant invalid + unowned + exclusive = 3 ==> unowned = 1;\nloop invariant invalid + unowned + exclusive = 3 ==> exclusive = 1;\nloop invariant invalid + unowned + exclusive = 3 ==> unowned = 1;\nloop invariant invalid + unowned + exclusive = 3 ==> exclusive = 1;\nloop invariant invalid + unowned + exclusive = 3 ==> unowned = 1;\nloop invariant invalid + unowned + exclusive = 3 ==> exclusive = 1;\nloop invariant invalid + unowned + exclusive = 3 ==> unowned = 1;\nloop invariant invalid + unowned + exclusive = 3 ==> exclusive = 1;\nloop invariant invalid + unowned + exclusive = 3 ==> unowned = 1;\nloop invariant invalid + unowned + exclusive = 3 ==> exclusive = 1;\nloop invariant invalid + unowned + exclusive = 3 ==> unowned = 1;\nloop invariant invalid + unowned + exclusive = 3 ==> exclusive = 1;\nloop invariant invalid + unowned + exclusive = 3 ==> unowned = 1;\nloop invariant invalid + unowned + exclusive = 3 ==> exclusive = 1;\nloop invariant invalid + unowned + exclusive = 3 ==> unowned = 1;\nloop invariant invalid + unowned + exclusive = 3 ==> exclusive = 1;\nloop invariant invalid + unowned + exclusive = 3 ==> unowned = 1;\nloop invariant invalid + unowned + exclusive = 3 ==> exclusive = 1;\nloop invariant invalid + unowned + exclusive = 3 ==> unowned = 1;\nloop invariant invalid + unowned + exclusive = 3 ==> exclusive = 1;\nloop invariant invalid + unowned + exclusive = 3 ==> unowned = 1;\nloop invariant invalid + unowned + exclusive = 3 ==> exclusive = 1;\nloop invariant invalid + unowned + exclusive = 3 ==> unowned = 1;\nloop invariant invalid + unowned + exclusive = 3 ==> exclusive = 1;\nloop invariant invalid + unowned + exclusive = 3 ==> unowned = 1;\nloop invariant invalid + unowned + exclusive = 3 ==> exclusive = 1;\nloop invariant invalid + unowned + exclusive = 3 ==> unowned = 1;\nloop invariant invalid + unowned + exclusive = 3 ==> exclusive = 1;\nloop invariant invalid + unowned + exclusive = 3 ==> unowned = 1;\nloop invariant invalid + unowned + exclusive = 3 ==> exclusive = 1;\nloop invariant invalid + unowned + exclusive = 3 ==> unowned = 1;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= invalid <= 1;\nloop invariant 0 <= exclusive <= 1;\nloop invariant 0 <= nonexclusive <= 1;\nloop invariant 0 <= unowned <= 1;\nloop invariant invalid + unowned + exclusive + nonexclusive >= 1;\nloop invariant exclusive + nonexclusive + unowned >= 1;\nloop invariant exclusive + nonexclusive <= invalid;\nloop invariant nonexclusive + unowned <= invalid;\nloop invariant exclusive + unowned <= invalid;\nloop invariant exclusive + nonexclusive + unowned == invalid;\nloop invariant exclusive + nonexclusive + unowned <= invalid;\nloop invariant exclusive + nonexclusive + unowned == invalid;\nloop invariant exclusive + nonexclusive <= invalid;\nloop invariant nonexclusive + unowned <= invalid;\nloop invariant exclusive + unowned <= invalid;\nloop invariant exclusive + nonexclusive + unowned == invalid;\nloop invariant exclusive + nonexclusive + unowned <= invalid;\nloop invariant exclusive + nonexclusive + unowned == invalid;\nloop invariant exclusive + nonexclusive <= invalid;\nloop invariant nonexclusive + unowned <= invalid;\nloop invariant exclusive + unowned <= invalid;\nloop invariant exclusive + nonexclusive + unowned == invalid;\nloop invariant exclusive + nonexclusive + unowned <= invalid;\nloop invariant exclusive + nonexclusive + unowned == invalid;\nloop invariant exclusive + nonexclusive <= invalid;\nloop invariant nonexclusive + unowned <= invalid;\nloop invariant exclusive + unowned <= invalid;\nloop invariant exclusive + nonexclusive + unowned == invalid;\nloop invariant exclusive + nonexclusive + unowned <= invalid;\nloop invariant exclusive + nonexclusive + unowned == invalid;\nloop invariant exclusive + nonexclusive <= invalid;\nloop invariant nonexclusive + unowned <= invalid;\nloop invariant exclusive + unowned <= invalid;\nloop invariant exclusive + nonexclusive + unowned == invalid;\nloop invariant exclusive + nonexclusive + unowned <= invalid;\nloop invariant exclusive + nonexclusive + unowned == invalid;\nloop invariant exclusive + nonexclusive <= invalid;\nloop invariant nonexclusive + unowned <= invalid;\nloop invariant exclusive + unowned <= invalid;\nloop invariant exclusive + nonexclusive + unowned == invalid;\nloop invariant exclusive + nonexclusive + unowned <= invalid;\nloop invariant exclusive + nonexclusive + unowned == invalid;\nloop invariant exclusive + nonexclusive <= invalid;\nloop invariant nonexclusive + unowned <= invalid;\nloop invariant exclusive + unowned <= invalid;\nloop invariant exclusive + nonexclusive + unowned == invalid;\nloop invariant exclusive + nonexclusive + unowned <= invalid;\nloop invariant exclusive + nonexclusive + unowned == invalid;\nloop invariant exclusive + nonexclusive <= invalid;\nloop invariant nonexclusive + unowned <= invalid;\nloop invariant exclusive + unowned <= invalid;\nloop invariant exclusive + nonexclusive + unowned == invalid;\nloop invariant exclusive + nonexclusive + unowned <= invalid;\nloop invariant exclusive + nonexclusive + unowned == invalid;\nloop invariant exclusive + nonexclusive <= invalid;\nloop invariant nonexclusive + unowned <= invalid;\nloop invariant exclusive + unowned <= invalid;\nloop invariant exclusive + nonexclusive + unowned == invalid;\nloop invariant exclusive + nonexclusive + unowned <= invalid;\nloop invariant exclusive + nonexclusive + unowned == invalid;\nloop invariant exclusive + nonexclusive <= invalid;\nloop invariant nonexclusive + unowned <= invalid;\nloop invariant exclusive + unowned <= invalid;\nloop invariant exclusive + nonexclusive + unowned == invalid;\nloop invariant exclusive + nonexclusive + unowned <= invalid;\nloop invariant exclusive + nonexclusive + unowned == invalid;\nloop invariant exclusive + nonexclusive <= invalid;\nloop invariant nonexclusive + unowned <= invalid;\nloop invariant exclusive + unowned <= invalid;\nloop invariant exclusive + nonexclusive + unowned == invalid;\nloop invariant exclusive + nonexclusive + unowned <= invalid;\nloop invariant exclusive + nonexclusive + unowned == invalid;\nloop invariant exclusive + nonexclusive <= invalid;\nloop invariant nonexclusive + unowned <= invalid;\nloop invariant exclusive + unowned <= invalid;\nloop invariant exclusive + nonexclusive + unowned == invalid;\nloop invariant exclusive + nonexclusive + unowned <= invalid;\nloop invariant exclusive + nonexclusive + unowned == invalid;\nloop invariant exclusive + nonexclusive <= invalid;\nloop invariant nonexclusive + unowned <= invalid;\nloop invariant exclusive + unowned <= invalid;\nloop invariant exclusive + nonexclusive + unowned == invalid;\nloop invariant exclusive + nonexclusive + unowned <= invalid;\nloop invariant exclusive + nonexclusive + unowned == invalid;\nloop invariant exclusive + nonexclusive <= invalid;\nloop invariant nonexclusive + unowned <= invalid;\nloop invariant exclusive + unowned <= invalid;\nloop invariant exclusive + nonexclusive + unowned == invalid;\nloop invariant exclusive + nonexclusive + unowned <= invalid;\nloop invariant exclusive + nonexclusive + unowned == invalid;\nloop invariant exclusive + nonexclusive <= invalid;\nloop invariant nonexclusive + unowned <= invalid;\nloop invariant exclusive + unowned <= invalid;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= invalid <= 100000;\nloop invariant 0 <= exclusive <= invalid;\nloop invariant 0 <= nonexclusive <= invalid;\nloop invariant 0 <= unowned <= invalid;\nloop invariant invalid + unowned + exclusive >= 1;\nloop invariant exclusive >= 0 ==> invalid + unowned + exclusive >= 2;\nloop invariant nonexclusive >= 0 ==> invalid + unowned + nonexclusive >= 1;\nloop invariant unowned >= 0 ==> invalid + unowned + nonexclusive >= 1;\nloop invariant invalid >= 1 ==> invalid + unowned + exclusive >= 2;\nloop invariant exclusive >= 0 ==> invalid >= 1;\nloop invariant nonexclusive >= 0 ==> invalid >= 1;\nloop invariant unowned >= 0 ==> invalid >= 1;\nloop invariant exclusive >= 0 ==> unowned + nonexclusive >= 0;\nloop invariant nonexclusive >= 0 ==> unowned + exclusive >= 0;\nloop invariant unowned >= 0 ==> nonexclusive + exclusive >= 0;\nloop invariant invalid >= 1 ==> unowned + nonexclusive >= 0;\nloop invariant exclusive >= 0 ==> invalid >= 1;\nloop invariant nonexclusive >= 0 ==> invalid >= 1;\nloop invariant unowned >= 0 ==> invalid >= 1;\nloop invariant exclusive >= 0 ==> invalid + unowned + nonexclusive >= 1;\nloop invariant nonexclusive >= 0 ==> invalid + unowned + exclusive >= 1;\nloop invariant unowned >= 0 ==> invalid + exclusive + nonexclusive >= 1;\nloop invariant invalid >= 1 ==> invalid + unowned + nonexclusive >= 1;\nloop invariant invalid >= 1 ==> invalid + unowned + exclusive >= 2;\nloop invariant exclusive >= 0 ==> invalid + unowned + nonexclusive >= 1;\nloop invariant nonexclusive >= 0 ==> invalid + unowned + exclusive >= 2;\nloop invariant unowned >= 0 ==> invalid + nonexclusive + exclusive >= 2;\nloop invariant invalid >= 1 ==> invalid + unowned + nonexclusive >= 2;\nloop invariant exclusive >= 0 ==> invalid + unowned + nonexclusive >= 1;\nloop invariant nonexclusive >= 0 ==> invalid + unowned + exclusive >= 1;\nloop invariant unowned >= 0 ==> invalid + nonexclusive + exclusive >= 1;\nloop invariant invalid >= 1 ==> invalid + unowned + nonexclusive >= 2;\nloop invariant invalid >= 1 ==> invalid + unowned + exclusive >= 2;\nloop invariant exclusive >= 0 ==> invalid + nonexclusive + unowned >= 1;\nloop invariant nonexclusive >= 0 ==> invalid + unowned + exclusive >= 1;\nloop invariant unowned >= 0 ==> invalid + exclusive + nonexclusive >= 2;\nloop invariant invalid >= 1 ==> invalid + nonexclusive + unowned >= 1;\nloop invariant invalid >= 1 ==> invalid + exclusive + nonexclusive >= 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= invalid;\nloop invariant 0 <= nonexclusive;\nloop invariant 0 <= unowned;\nloop invariant 1 <= exclusive;\nloop invariant 1 <= invalid;\nloop invariant 0 <= nonexclusive;\nloop invariant 1 <= unowned;\nloop invariant 0 <= exclusive;\nloop invariant 0 <= invalid;\nloop invariant 1 <= nonexclusive;\nloop invariant 0 <= unowned;\nloop invariant 1 <= exclusive;\nloop invariant 1 <= invalid;\nloop invariant 0 <= nonexclusive;\nloop invariant 1 <= unowned;\nloop invariant 0 <= exclusive;\nloop invariant 0 <= invalid;\nloop invariant 1 <= nonexclusive;\nloop invariant 0 <= unowned;\nloop invariant 1 <= exclusive;\nloop invariant 1 <= invalid;\nloop invariant 0 <= nonexclusive;\nloop invariant 1 <= unowned;\nloop invariant 0 <= exclusive;\nloop invariant 0 <= invalid;\nloop invariant 1 <= nonexclusive;\nloop invariant 0 <= unowned;\nloop invariant 1 <= exclusive;\nloop invariant 1 <= invalid;\nloop invariant 0 <= nonexclusive;\nloop invariant 1 <= unowned;\nloop invariant 0 <= exclusive;\nloop invariant 0 <= invalid;\nloop invariant 1 <= nonexclusive;\nloop invariant 0 <= unowned;\nloop invariant 1 <= exclusive;\nloop invariant 1 <= invalid;\nloop invariant 0 <= nonexclusive;\nloop invariant 1 <= unowned;\nloop invariant 0 <= exclusive;\nloop invariant 0 <= invalid;\nloop invariant 1 <= nonexclusive;\nloop invariant 0 <= unowned;\nloop invariant 1 <= exclusive;\nloop invariant 1 <= invalid;\nloop invariant 0 <= nonexclusive;\nloop invariant 1 <= unowned;\nloop invariant 0 <= exclusive;\nloop invariant 0 <= invalid;\nloop invariant 1 <= nonexclusive;\nloop invariant 0 <= unowned;\nloop invariant 1 <= exclusive;\nloop invariant 1 <= invalid;\nloop invariant 0 <= nonexclusive;\nloop invariant 1 <= unowned;\nloop invariant 0 <= exclusive;\nloop invariant 0 <= invalid;\nloop invariant 1 <= nonexclusive;\nloop invariant 0 <= unowned;\nloop invariant 1 <= exclusive;\nloop invariant 1 <= invalid;\nloop invariant 0 <= nonexclusive;\nloop invariant 1 <= unowned;\nloop invariant 0 <= exclusive;\nloop invariant 0 <= invalid;\nloop invariant 1 <= nonexclusive;\nloop invariant 0 <= unowned;\nloop invariant 1 <= exclusive;\nloop invariant 1 <= invalid;\nloop invariant 0 <= nonexclusive;\nloop invariant 1 <= unowned;\nloop invariant 0 <= exclusive;\nloop invariant 0 <= invalid;\nloop invariant 1 <= nonexclusive;\nloop invariant 0 <= unowned;\nloop invariant 1 <= exclusive;\nloop invariant 1 <= invalid;\nloop invariant 0 <= nonexclusive;\nloop invariant 1 <= unowned;\nloop invariant 0 <= exclusive;\nloop invariant 0 <= invalid;\nloop invariant 1 <= nonexclusive;\nloop invariant 0 <= unowned;\nloop invariant 1 <= exclusive;\nloop invariant 1 <= invalid;\nloop invariant 0 <= nonexclusive;\nloop invariant 1 <= unowned;\nloop invariant 0 <= exclusive;\nloop invariant 0 <= invalid;\nloop invariant 1 <= nonexclusive;\nloop invariant 0 <= unowned;\nloop invariant 1 <= exclusive;\nloop invariant 1 <= invalid;\nloop invariant 0 <= nonexclusive;\nloop invariant 1 <= unowned;\nloop invariant 0 <= exclusive;\nloop invariant 0 <= invalid;\nloop invariant 1 <= nonexclusive;\nloop invariant 0 <= unowned;\nloop invariant 1 <= exclusive;\nloop invariant 1 <= invalid;\nloop invariant 0 <= nonexclusive;\nloop invariant 1 <= unowned;\nloop invariant 0 <= exclusive;\nloop invariant 0 <= invalid;\nloop invariant 1 <= nonexclusive;\nloop invariant 0 <= unowned;\nloop invariant 1 <= exclusive;\nloop invariant 1 <= invalid;\nloop invariant 0 <= nonexclusive;\nloop invariant 1 <= unowned;\nloop invariant 0 <= exclusive;\nloop invariant 0 <= invalid;\nloop invariant 1 <= nonexclusive;\nloop invariant 0 <= unowned;\nloop invariant 1 <= exclusive;\nloop invariant 1 <= invalid;\nloop invariant 0 <= nonexclusive;\nloop invariant 1 <= unowned;\nloop invariant 0 <= exclusive;\nloop invariant 0 <= invalid;\nloop invariant 1 <= nonexclusive;\nloop invariant 0 <= unowned;\nloop invariant 1 <= exclusive;\nloop invariant 1 <= invalid;\nloop invariant 0 <= nonexclusive;\nloop invariant 1 <= unowned;\nloop invariant 0 <= exclusive;\nloop invariant 0 <= invalid;\nloop invariant 1 <= nonexclusive;\nloop invariant 0 <= unowned;\nloop invariant 1 <= exclusive;\nloop invariant 1 <= invalid;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= invalid <= 1;\nloop invariant invalid <= nonexclusive + unowned;\nloop invariant invalid + unowned + exclusive >= 1;\nloop invariant nonexclusive + unowned >= 0;\nloop invariant exclusive >= 0;\nloop invariant unowned >= 0;\nloop invariant invalid >= 0;\nloop invariant nonexclusive >= 0;\nloop invariant exclusive >= 0;\nloop invariant unowned >= 0;\nloop invariant invalid >= 0;\nloop invariant invalid <= nonexclusive + unowned;\nloop invariant invalid + unowned + exclusive >= 1;\nloop invariant nonexclusive >= 0;\nloop invariant exclusive >= 0;\nloop invariant unowned >= 0;\nloop invariant invalid >= 0;\nloop invariant nonexclusive >= 0;\nloop invariant exclusive >= 0;\nloop invariant unowned >= 0;\nloop invariant invalid >= 0;\nloop invariant invalid <= nonexclusive + unowned;\nloop invariant invalid + unowned + exclusive >= 1;\nloop invariant nonexclusive >= 0;\nloop invariant exclusive >= 0;\nloop invariant unowned >= 0;\nloop invariant invalid >= 0;\nloop invariant nonexclusive >= 0;\nloop invariant exclusive >= 0;\nloop invariant unowned >= 0;\nloop invariant invalid >= 0;\nloop invariant invalid <= nonexclusive + unowned;\nloop invariant invalid + unowned + exclusive >= 1;\nloop invariant nonexclusive >= 0;\nloop invariant exclusive >= 0;\nloop invariant unowned >= 0;\nloop invariant invalid >= 0;\nloop invariant nonexclusive >= 0;\nloop invariant exclusive >= 0;\nloop invariant unowned >= 0;\nloop invariant invalid >= 0;\nloop invariant invalid <= nonexclusive + unowned;\nloop invariant invalid + unowned + exclusive >= 1;\nloop invariant nonexclusive >= 0;\nloop invariant exclusive >= 0;\nloop invariant unowned >= 0;\nloop invariant invalid >= 0;\nloop invariant nonexclusive >= 0;\nloop invariant exclusive >= 0;\nloop invariant unowned >= 0;\nloop invariant invalid >= 0;\nloop invariant invalid <= nonexclusive + unowned;\nloop invariant invalid + unowned + exclusive >= 1;\nloop invariant nonexclusive >= 0;\nloop invariant exclusive >= 0;\nloop invariant unowned >= 0;\nloop invariant invalid >= 0;\nloop invariant nonexclusive >= 0;\nloop invariant exclusive >= 0;\nloop invariant unowned >= 0;\nloop invariant invalid >= 0;\nloop invariant invalid <= nonexclusive + unowned;\nloop invariant invalid + unowned + exclusive >= 1;\nloop invariant nonexclusive >= 0;\nloop invariant exclusive >= 0;\nloop invariant unowned >= 0;\nloop invariant invalid >= 0;\nloop invariant nonexclusive >= 0;\nloop invariant exclusive >= 0;\nloop invariant unowned >= 0;\nloop invariant invalid >= 0;\nloop invariant invalid <= nonexclusive + unowned;\nloop invariant invalid + unowned + exclusive >= 1;\nloop invariant nonexclusive >= 0;\nloop invariant exclusive >= 0;\nloop invariant unowned >= 0;\nloop invariant invalid >= 0;\nloop invariant nonexclusive >= 0;\nloop invariant exclusive >= 0;\nloop invariant unowned >= 0;\nloop invariant invalid >= 0;\nloop invariant invalid <= nonexclusive + unowned;\nloop invariant invalid + unowned + exclusive >= 1;\nloop invariant nonexclusive >= 0;\nloop invariant exclusive >= 0;\nloop invariant unowned >= 0;\nloop invariant invalid >= 0;\nloop invariant nonexclusive >= 0;\nloop invariant exclusive >= 0;\nloop invariant unowned >= 0;\nloop invariant invalid >= 0;\nloop invariant invalid <= nonexclusive + unowned;\nloop invariant invalid + unowned + exclusive >= 1;\nloop invariant nonexclusive >= 0;\nloop invariant exclusive >= 0;\nloop invariant unowned >= 0;\nloop invariant invalid >= 0;\nloop invariant nonexclusive >= 0;\nloop invariant exclusive >= 0;\nloop invariant unowned >= 0;\nloop invariant invalid >= 0;\nloop invariant invalid <= nonexclusive + unowned;\nloop invariant invalid + unowned + exclusive >= 1;\nloop invariant nonexclusive >= 0;\nloop invariant exclusive >= 0;\nloop invariant unowned >= 0;\nloop invariant invalid >= 0;\nloop invariant nonexclusive >= 0;\nloop invariant exclusive >= 0;\nloop invariant unowned >= 0;\nloop invariant invalid >= 0;\nloop invariant invalid <= nonexclusive + unowned;\nloop invariant invalid + unowned + exclusive >= 1;\nloop invariant nonexclusive >= 0;\nloop invariant exclusive >= 0;\nloop invariant unowned >= 0;\nloop invariant invalid >= 0;\nloop invariant nonexclusive >= 0;\nloop invariant exclusive >= 0;\nloop invariant unowned >= 0;\nloop invariant invalid >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= invalid <= 100000;\nloop invariant 0 <= unowned <= 100000;\nloop invariant 0 <= nonexclusive <= 100000;\nloop invariant 0 <= exclusive <= 100000;\nloop invariant invalid + unowned + exclusive >= 1;\nloop invariant invalid + unowned + exclusive <= 100000;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= invalid;\nloop invariant 0 <= exclusive;\nloop invariant 0 <= nonexclusive;\nloop invariant 0 <= unowned;\nloop invariant invalid + unowned + exclusive >= 1;\nloop invariant exclusive <= 1;\nloop invariant nonexclusive <= invalid;\nloop invariant unowned <= invalid;\nloop invariant invalid - exclusive - nonexclusive - unowned <= invalid;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= invalid <= 5;\nloop invariant 0 <= unowned <= 5;\nloop invariant 0 <= nonexclusive <= 5;\nloop invariant 0 <= exclusive <= 1;\nloop invariant invalid + unowned + exclusive >= 1;\nloop invariant exclusive ==> (exclusive + nonexclusive + unowned == 1);\nloop invariant (exclusive ==> (exclusive + nonexclusive + unowned == 1) && (nonexclusive ==> (exclusive + nonexclusive + unowned == 1) && (unowned ==> (exclusive + nonexclusive + unowned == 1) && (exclusive + nonexclusive + unowned >= 1)));\nloop invariant invalid + unowned + exclusive >= 1 ==> (exclusive + nonexclusive + unowned >= 1);\nloop invariant (exclusive + nonexclusive + unowned >= 1 ==> (exclusive + nonexclusive + unowned >= 1) && (exclusive + nonexclusive + unowned >= 1) && (exclusive + nonexclusive + unowned >= 1) && (exclusive + nonexclusive + unowned >= 1));\nloop invariant invalid ==> (invalid >= 1);\nloop invariant (invalid >= 1 ==> (invalid >= 1) && (invalid >= 1) && (invalid >= 1) && (invalid >= 1));\nloop invariant valid ==> (invalid >= 1);\nloop invariant (invalid >= 1 ==> (invalid >= 1) && (invalid >= 1) && (invalid >= 1) && (invalid >= 1));\nloop invariant unowned ==> (unowned >= 0);\nloop invariant (unowned >= 0 ==> (unowned >= 0) && (unowned >= 0) && (unowned >= 0) && (unowned >= 0));\nloop invariant nonexclusive ==> (nonexclusive >= 0);\nloop invariant (nonexclusive >= 0 ==> (nonexclusive >= 0) && (nonexclusive >= 0) && (nonexclusive >= 0) && (nonexclusive >= 0));\nloop invariant exclusive ==> (exclusive >= 0);\nloop invariant (exclusive >= 0 ==> (exclusive >= 0) && (exclusive >= 0) && (exclusive >= 0) && (exclusive >= 0));\nloop invariant invalid + unowned + exclusive >= 1 ==> (invalid + unowned + exclusive >= 1);\nloop invariant (invalid + unowned + exclusive >= 1 ==> (invalid + unowned + exclusive >= 1) && (invalid + unowned + exclusive >= 1) && (invalid + unowned + exclusive >= 1) && (invalid + unowned + exclusive >= 1));\nloop invariant invalid + unowned + exclusive >= 1 ==> (invalid + unowned + exclusive >= 1);\nloop invariant (invalid + unowned + exclusive >= 1 ==> (invalid + unowned + exclusive >= 1) && (invalid + unowned + exclusive >= 1) && (invalid + unowned + exclusive >= 1) && (invalid + unowned + exclusive >= 1));\nloop invariant invalid + unowned + exclusive >= 1 ==> (invalid + unowned + exclusive >= 1);\nloop invariant (invalid + unowned + exclusive >= 1 ==> (invalid + unowned + exclusive >= 1) && (invalid + unowned + exclusive >= 1) && (invalid + unowned + exclusive >= 1) && (invalid + unowned + exclusive >= 1));\nloop invariant invalid + unowned + exclusive >= 1 ==> (invalid + unowned + exclusive >= 1);\nloop invariant (invalid + unowned + exclusive >= 1 ==> (invalid + unowned + exclusive >= 1) && (invalid + unowned + exclusive >= 1) && (invalid + unowned + exclusive >= 1) && (invalid + unowned + exclusive >= 1));\nloop invariant invalid + unowned + exclusive >= 1 ==> (invalid + unowned + exclusive >= 1);\nloop invariant (invalid + unowned + exclusive >= 1 ==> (invalid + unowned + exclusive >= 1) && (invalid + unowned + exclusive >= 1) && (invalid + unowned + exclusive >= 1) && (invalid + unowned + exclusive >= 1));\nloop invariant invalid + unowned + exclusive >= 1 ==> (invalid + unowned + exclusive >= 1);\nloop invariant (invalid + unowned + exclusive >= 1 ==> (invalid + unowned + exclusive >= 1) && (invalid + unowned + exclusive >= 1) && (invalid + unowned + exclusive >= 1) && (invalid + unowned + exclusive >= 1));\nloop invariant invalid + unowned + exclusive >= 1 ==> (invalid + unowned + exclusive >= 1);\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= invalid <= 100000;\nloop invariant 0 <= unowned <= 100000;\nloop invariant 0 <= nonexclusive <= 100000;\nloop invariant 0 <= exclusive <= 100000;\nloop invariant invalid + unowned + exclusive + nonexclusive <= 100000;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= invalid <= 100000;\nloop invariant nonexclusive + unowned + exclusive >= 1;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= invalid <= 100000;\nloop invariant unowned >= 0;\nloop invariant nonexclusive >= 0;\nloop invariant exclusive >= 0;\nloop invariant invalid + unowned + exclusive >= 1;\nloop invariant unowned + nonexclusive >= exclusive;\nloop invariant unowned + nonexclusive >= invalid;\nloop invariant unowned + nonexclusive >= 1;\nloop invariant invalid >= 1;\nloop invariant invalid + unowned + exclusive >= 1;\nloop invariant unowned + nonexclusive >= 1;\nloop invariant exclusive >= 0;\nloop invariant nonexclusive >= 0;\nloop invariant unowned >= 0;\nloop invariant invalid >= 1;\nloop invariant invalid + unowned + exclusive >= 1;\nloop invariant unowned + nonexclusive >= exclusive;\nloop invariant unowned + nonexclusive >= invalid;\nloop invariant unowned + nonexclusive >= 1;\nloop invariant invalid >= 1;\nloop invariant invalid + unowned + exclusive >= 1;\nloop invariant unowned + nonexclusive >= 1;\nloop invariant exclusive >= 0;\nloop invariant nonexclusive >= 0;\nloop invariant unowned >= 0;\nloop invariant invalid >= 1;\nloop invariant invalid + unowned + exclusive >= 1;\nloop invariant unowned + nonexclusive >= exclusive;\nloop invariant unowned + nonexclusive >= invalid;\nloop invariant unowned + nonexclusive >= 1;\nloop invariant invalid >= 1;\nloop invariant invalid + unowned + exclusive >= 1;\nloop invariant unowned + nonexclusive >= 1;\nloop invariant exclusive >= 0;\nloop invariant nonexclusive >= 0;\nloop invariant unowned >= 0;\nloop invariant invalid >= 1;\nloop invariant invalid + unowned + exclusive >= 1;\nloop invariant unowned + nonexclusive >= exclusive;\nloop invariant unowned + nonexclusive >= invalid;\nloop invariant unowned + nonexclusive >= 1;\nloop invariant invalid >= 1;\nloop invariant invalid + unowned + exclusive >= 1;\nloop invariant unowned + nonexclusive >= 1;\nloop invariant exclusive >= 0;\nloop invariant nonexclusive >= 0;\nloop invariant unowned >= 0;\nloop invariant invalid >= 1;\nloop invariant invalid + unowned + exclusive >= 1;\nloop invariant unowned + nonexclusive >= exclusive;\nloop invariant unowned + nonexclusive >= invalid;\nloop invariant unowned + nonexclusive >= 1;\nloop invariant invalid >= 1;\nloop invariant invalid + unowned + exclusive >= 1;\nloop invariant unowned + nonexclusive >= 1;\nloop invariant exclusive >= 0;\nloop invariant nonexclusive >= 0;\nloop invariant unowned >= 0;\nloop invariant invalid >= 1;\nloop invariant invalid + unowned + exclusive >= 1;\nloop invariant unowned + nonexclusive >= exclusive;\nloop invariant unowned + nonexclusive >= invalid;\nloop invariant unowned + nonexclusive >= 1;\nloop invariant invalid >= 1;\nloop invariant invalid + unowned + exclusive >= 1;\nloop invariant unowned + nonexclusive >= 1;\nloop invariant exclusive >= 0;\nloop invariant nonexclusive >= 0;\nloop invariant unowned >= 0;\nloop invariant invalid >= 1;\nloop invariant invalid + unowned + exclusive >= 1;\nloop invariant unowned + nonexclusive >= exclusive;\nloop invariant unowned + nonexclusive >= invalid;\nloop invariant unowned + nonexclusive >= 1;\nloop invariant invalid >= 1;\nloop invariant invalid + unowned + exclusive >= 1;\nloop invariant unowned + nonexclusive >= 1;\nloop invariant exclusive >= 0;\nloop invariant nonexclusive >= 0;\nloop invariant unowned >= 0;\nloop invariant invalid >= 1;\nloop invariant invalid + unowned + exclusive >= 1;\nloop invariant unowned + nonexclusive >= exclusive;\nloop invariant unowned + nonexclusive >= invalid;\nloop invariant unowned + nonexclusive >= 1;\nloop invariant invalid >= 1;\nloop invariant invalid + unowned + exclusive >= 1;\nloop invariant unowned + nonexclusive >= 1;\nloop invariant exclusive >= 0;\nloop invariant nonexclusive >= 0;\nloop invariant unowned >= 0;\nloop invariant invalid >= 1;\nloop invariant invalid + unowned + exclusive >= 1;\nloop invariant unowned + nonexclusive >= exclusive;\nloop invariant unowned + nonexclusive >= invalid;\nloop invariant unowned + nonexclusive >= 1;\nloop invariant invalid >= 1;\nloop invariant invalid + unowned + exclusive >= 1;\nloop invariant unowned + nonexclusive >= 1;\nloop invariant exclusive >= 0;\nloop invariant nonexclusive >= 0;\nloop invariant unowned >= 0;\nloop invariant invalid >= 1;\nloop invariant invalid + unowned + exclusive >= 1;\nloop invariant unowned + nonexclusive >= exclusive;\nloop invariant unowned + nonexclusive >= invalid;\n*/\n```",
            "```\n/*@\n\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint invalid;\n\tint unowned;\n\tint nonexclusive;\n\tint exclusive;\n\n\tif (! (exclusive==0)) \nreturn 0;\n\n\tif (! (nonexclusive==0)) \nreturn 0;\n\n\tif (! (unowned==0)) \nreturn 0;\n\n\tif (! (invalid>= 1)) \nreturn 0;\n\n\t/*@\n\n*/\nwhile (unknown_int())\n\t{\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (invalid >= 1)) \nreturn 0;\n\n\t\t\tnonexclusive=nonexclusive+exclusive;\n\t\t\texclusive=0;\n\t\t\tinvalid=invalid-1;\n\t\t\tunowned=unowned+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (unknown_int())\n\t\t\t{\n\t\t\t\tif (! (nonexclusive + unowned >=1)) \nreturn 0;\n\n\t\t\t\tinvalid=invalid + unowned + nonexclusive-1;\n\t\t\t\texclusive=exclusive+1;\n\t\t\t\tunowned=0;\n\t\t\t\tnonexclusive=0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (! (invalid >= 1)) \nreturn 0;\n\n\t\t\t\tunowned=0;\n\t\t\t\tnonexclusive=0;\n\t\t\t\texclusive=1;\n\t\t\t\tinvalid=invalid+unowned+exclusive+nonexclusive-1;\n\t\t\t}\n\t\t}\n\t}\n\n\t{;\n//@ assert(exclusive >= 0);\n}\n\n\t{;\n//@ assert(nonexclusive >= 0);\n}\n\n\t{;\n//@ assert(unowned >= 0);\n}\n\n\t{;\n//@ assert(invalid >= 0);\n}\n\n\t{;\n//@ assert(invalid + unowned + exclusive >= 1);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 10,
                "annotations": "```\n/*@\nloop invariant 0 <= invalid <= unknown_int();\nloop invariant 0 <= unowned <= unknown_int();\nloop invariant 0 <= nonexclusive <= unknown_int();\nloop invariant 0 <= exclusive <= unknown_int();\nloop invariant exclusive >= 0 ==> exclusive <= unknown_int();\nloop invariant nonexclusive >= 0 ==> nonexclusive <= unknown_int();\nloop invariant unowned >= 0 ==> unowned <= unknown_int();\nloop invariant invalid >= 0 ==> invalid <= unknown_int();\nloop invariant invalid + unowned + exclusive >= 1 ==> invalid + unowned + exclusive <= unknown_int();\nloop invariant invalid >= 1 ==> invalid <= unknown_int();\nloop invariant unowned >= 0 ==> unowned <= unknown_int();\nloop invariant nonexclusive >= 0 ==> nonexclusive <= unknown_int();\nloop invariant exclusive >= 0 ==> exclusive <= unknown_int();\nloop invariant invalid + unowned + exclusive >= 1 ==> invalid + unowned + exclusive <= unknown_int();\nloop invariant invalid >= 1 ==> invalid <= unknown_int();\nloop invariant unowned >= 0 ==> unowned <= unknown_int();\nloop invariant nonexclusive >= 0 ==> nonexclusive <= unknown_int();\nloop invariant exclusive >= 0 ==> exclusive <= unknown_int();\nloop invariant invalid + unowned + exclusive >= 1 ==> invalid + unowned + exclusive <= unknown_int();\nloop invariant invalid >= 1 ==> invalid <= unknown_int();\nloop invariant unowned >= 0 ==> unowned <= unknown_int();\nloop invariant nonexclusive >= 0 ==> nonexclusive <= unknown_int();\nloop invariant exclusive >= 0 ==> exclusive <= unknown_int();\nloop invariant invalid + unowned + exclusive >= 1 ==> invalid + unowned + exclusive <= unknown_int();\nloop invariant invalid >= 1 ==> invalid <= unknown_int();\nloop invariant unowned >= 0 ==> unowned <= unknown_int();\nloop invariant nonexclusive >= 0 ==> nonexclusive <= unknown_int();\nloop invariant exclusive >= 0 ==> exclusive <= unknown_int();\nloop invariant invalid + unowned + exclusive >= 1 ==> invalid + unowned + exclusive <= unknown_int();\nloop invariant invalid >= 1 ==> invalid <= unknown_int();\nloop invariant unowned >= 0 ==> unowned <= unknown_int();\nloop invariant nonexclusive >= 0 ==> nonexclusive <= unknown_int();\nloop invariant exclusive >= 0 ==> exclusive <= unknown_int();\nloop invariant invalid + unowned + exclusive >= 1 ==> invalid + unowned + exclusive <= unknown_int();\nloop invariant invalid >= 1 ==> invalid <= unknown_int();\nloop invariant unowned >= 0 ==> unowned <= unknown_int();\nloop invariant nonexclusive >= 0 ==> nonexclusive <= unknown_int();\nloop invariant exclusive >= 0 ==> exclusive <= unknown_int();\nloop invariant invalid + unowned + exclusive >= 1 ==> invalid + unowned + exclusive <= unknown_int();\nloop invariant invalid >= 1 ==> invalid <= unknown_int();\nloop invariant unowned >= 0 ==> unowned <= unknown_int();\nloop invariant nonexclusive >= 0 ==> nonexclusive <= unknown_int();\nloop invariant exclusive >= 0 ==> exclusive <= unknown_int();\nloop invariant invalid + unowned + exclusive >= 1 ==> invalid + unowned + exclusive <= unknown_int();\nloop invariant invalid >= 1 ==> invalid <= unknown_int();\nloop invariant unowned >= 0 ==> unowned <= unknown_int();\nloop invariant nonexclusive >= 0 ==> nonexclusive <= unknown_int();\nloop invariant exclusive >= 0 ==> exclusive <= unknown_int();\nloop invariant invalid + unowned + exclusive >= 1 ==> invalid + unowned + exclusive <= unknown_int();\nloop invariant invalid >= 1 ==> invalid <= unknown_int();\nloop invariant unowned >= 0 ==> unowned <= unknown_int();\nloop invariant nonexclusive >= 0 ==> nonexclusive <= unknown_int();\nloop invariant exclusive >= 0 ==> exclusive <= unknown_int();\nloop invariant invalid + unowned + exclusive >= 1 ==> invalid + unowned + exclusive <= unknown_int();\nloop invariant invalid >= 1 ==> invalid <= unknown_int();\nloop invariant unowned >= 0 ==> unowned <= unknown_int();\nloop invariant nonexclusive >= 0 ==> nonexclusive <= unknown_int();\nloop invariant exclusive >= 0 ==> exclusive <= unknown_int();\nloop invariant invalid + unowned + exclusive >= 1 ==> invalid + unowned + exclusive <= unknown_int();\nloop invariant invalid >= 1 ==> invalid <= unknown_int();\nloop invariant unowned >= 0 ==> unowned <= unknown_int();\nloop invariant nonexclusive >= 0 ==> nonexclusive <= unknown_int();\nloop invariant exclusive >= 0 ==> exclusive <= unknown_int();\nloop invariant invalid + unowned + exclusive >= 1 ==> invalid + unowned + exclusive <= unknown_int();\nloop invariant invalid >= 1 ==> invalid <= unknown_int();\nloop invariant unowned >= 0 ==> unowned <= unknown_int();\nloop invariant nonexclusive >= 0 ==> nonexclusive <= unknown_int();\nloop invariant exclusive >= 0 ==> exclusive <= unknown_int();\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint invalid;\n\tint unowned;\n\tint nonexclusive;\n\tint exclusive;\n\n\tif (! (exclusive==0)) \nreturn 0;\n\n\tif (! (nonexclusive==0)) \nreturn 0;\n\n\tif (! (unowned==0)) \nreturn 0;\n\n\tif (! (invalid>= 1)) \nreturn 0;\n\n\t/*@\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown_int())\n\t{\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (invalid >= 1)) \nreturn 0;\n\n\t\t\tnonexclusive=nonexclusive+exclusive;\n\t\t\texclusive=0;\n\t\t\tinvalid=invalid-1;\n\t\t\tunowned=unowned+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (unknown_int())\n\t\t\t{\n\t\t\t\tif (! (nonexclusive + unowned >=1)) \nreturn 0;\n\n\t\t\t\tinvalid=invalid + unowned + nonexclusive-1;\n\t\t\t\texclusive=exclusive+1;\n\t\t\t\tunowned=0;\n\t\t\t\tnonexclusive=0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (! (invalid >= 1)) \nreturn 0;\n\n\t\t\t\tunowned=0;\n\t\t\t\tnonexclusive=0;\n\t\t\t\texclusive=1;\n\t\t\t\tinvalid=invalid+unowned+exclusive+nonexclusive-1;\n\t\t\t}\n\t\t}\n\t}\n\n\t{;\n//@ assert(exclusive >= 0);\n}\n\n\t{;\n//@ assert(nonexclusive >= 0);\n}\n\n\t{;\n//@ assert(unowned >= 0);\n}\n\n\t{;\n//@ assert(invalid >= 0);\n}\n\n\t{;\n//@ assert(invalid + unowned + exclusive >= 1);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant exclusive >= 0;\nloop invariant nonexclusive >= 0;\nloop invariant unowned >= 0;\nloop invariant invalid >= 0;\nloop invariant invalid + unowned + exclusive >= 1;\nloop invariant invalid + unowned + exclusive <= 3;\nloop invariant invalid + unowned + exclusive = 1 ==> invalid = 1;\nloop invariant invalid + unowned + exclusive = 2 ==> exclusive = 1;\nloop invariant invalid + unowned + exclusive = 3 ==> nonexclusive = 1;\nloop invariant invalid + unowned + exclusive = 3 ==> unowned = 1;\nloop invariant invalid + unowned + exclusive = 3 ==> exclusive = 1;\nloop invariant invalid + unowned + exclusive = 3 ==> unowned = 1;\nloop invariant invalid + unowned + exclusive = 3 ==> exclusive = 1;\nloop invariant invalid + unowned + exclusive = 3 ==> unowned = 1;\nloop invariant invalid + unowned + exclusive = 3 ==> exclusive = 1;\nloop invariant invalid + unowned + exclusive = 3 ==> unowned = 1;\nloop invariant invalid + unowned + exclusive = 3 ==> exclusive = 1;\nloop invariant invalid + unowned + exclusive = 3 ==> unowned = 1;\nloop invariant invalid + unowned + exclusive = 3 ==> exclusive = 1;\nloop invariant invalid + unowned + exclusive = 3 ==> unowned = 1;\nloop invariant invalid + unowned + exclusive = 3 ==> exclusive = 1;\nloop invariant invalid + unowned + exclusive = 3 ==> unowned = 1;\nloop invariant invalid + unowned + exclusive = 3 ==> exclusive = 1;\nloop invariant invalid + unowned + exclusive = 3 ==> unowned = 1;\nloop invariant invalid + unowned + exclusive = 3 ==> exclusive = 1;\nloop invariant invalid + unowned + exclusive = 3 ==> unowned = 1;\nloop invariant invalid + unowned + exclusive = 3 ==> exclusive = 1;\nloop invariant invalid + unowned + exclusive = 3 ==> unowned = 1;\nloop invariant invalid + unowned + exclusive = 3 ==> exclusive = 1;\nloop invariant invalid + unowned + exclusive = 3 ==> unowned = 1;\nloop invariant invalid + unowned + exclusive = 3 ==> exclusive = 1;\nloop invariant invalid + unowned + exclusive = 3 ==> unowned = 1;\nloop invariant invalid + unowned + exclusive = 3 ==> exclusive = 1;\nloop invariant invalid + unowned + exclusive = 3 ==> unowned = 1;\nloop invariant invalid + unowned + exclusive = 3 ==> exclusive = 1;\nloop invariant invalid + unowned + exclusive = 3 ==> unowned = 1;\nloop invariant invalid + unowned + exclusive = 3 ==> exclusive = 1;\nloop invariant invalid + unowned + exclusive = 3 ==> unowned = 1;\nloop invariant invalid + unowned + exclusive = 3 ==> exclusive = 1;\nloop invariant invalid + unowned + exclusive = 3 ==> unowned = 1;\nloop invariant invalid + unowned + exclusive = 3 ==> exclusive = 1;\nloop invariant invalid + unowned + exclusive = 3 ==> unowned = 1;\nloop invariant invalid + unowned + exclusive = 3 ==> exclusive = 1;\nloop invariant invalid + unowned + exclusive = 3 ==> unowned = 1;\nloop invariant invalid + unowned + exclusive = 3 ==> exclusive = 1;\nloop invariant invalid + unowned + exclusive = 3 ==> unowned = 1;\nloop invariant invalid + unowned + exclusive = 3 ==> exclusive = 1;\nloop invariant invalid + unowned + exclusive = 3 ==> unowned = 1;\nloop invariant invalid + unowned + exclusive = 3 ==> exclusive = 1;\nloop invariant invalid + unowned + exclusive = 3 ==> unowned = 1;\nloop invariant invalid + unowned + exclusive = 3 ==> exclusive = 1;\nloop invariant invalid + unowned + exclusive = 3 ==> unowned = 1;\nloop invariant invalid + unowned + exclusive = 3 ==> exclusive = 1;\nloop invariant invalid + unowned + exclusive = 3 ==> unowned = 1;\nloop invariant invalid + unowned + exclusive = 3 ==> exclusive = 1;\nloop invariant invalid + unowned + exclusive = 3 ==> unowned = 1;\nloop invariant invalid + unowned + exclusive = 3 ==> exclusive = 1;\nloop invariant invalid + unowned + exclusive = 3 ==> unowned = 1;\nloop invariant invalid + unowned + exclusive = 3 ==> exclusive = 1;\nloop invariant invalid + unowned + exclusive = 3 ==> unowned = 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint invalid;\n\tint unowned;\n\tint nonexclusive;\n\tint exclusive;\n\n\tif (! (exclusive==0)) \nreturn 0;\n\n\tif (! (nonexclusive==0)) \nreturn 0;\n\n\tif (! (unowned==0)) \nreturn 0;\n\n\tif (! (invalid>= 1)) \nreturn 0;\n\n\t/*@\nloop invariant i1: exclusive >= 0;\nloop invariant i2: nonexclusive >= 0;\nloop invariant i3: unowned >= 0;\nloop invariant i4: invalid >= 0;\nloop invariant i5: invalid + unowned + exclusive >= 1;\n\n\n\n\n\n\n*/\nwhile (unknown_int())\n\t{\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (invalid >= 1)) \nreturn 0;\n\n\t\t\tnonexclusive=nonexclusive+exclusive;\n\t\t\texclusive=0;\n\t\t\tinvalid=invalid-1;\n\t\t\tunowned=unowned+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (unknown_int())\n\t\t\t{\n\t\t\t\tif (! (nonexclusive + unowned >=1)) \nreturn 0;\n\n\t\t\t\tinvalid=invalid + unowned + nonexclusive-1;\n\t\t\t\texclusive=exclusive+1;\n\t\t\t\tunowned=0;\n\t\t\t\tnonexclusive=0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (! (invalid >= 1)) \nreturn 0;\n\n\t\t\t\tunowned=0;\n\t\t\t\tnonexclusive=0;\n\t\t\t\texclusive=1;\n\t\t\t\tinvalid=invalid+unowned+exclusive+nonexclusive-1;\n\t\t\t}\n\t\t}\n\t}\n\n\t{;\n//@ assert(exclusive >= 0);\n}\n\n\t{;\n//@ assert(nonexclusive >= 0);\n}\n\n\t{;\n//@ assert(unowned >= 0);\n}\n\n\t{;\n//@ assert(invalid >= 0);\n}\n\n\t{;\n//@ assert(invalid + unowned + exclusive >= 1);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 1 <= invalid <= 1;\nloop invariant 0 <= exclusive <= 1;\nloop invariant 0 <= nonexclusive <= 1;\nloop invariant 0 <= unowned <= 1;\nloop invariant invalid + unowned + exclusive + nonexclusive >= 1;\nloop invariant exclusive + nonexclusive + unowned >= 1;\nloop invariant exclusive + nonexclusive <= invalid;\nloop invariant nonexclusive + unowned <= invalid;\nloop invariant exclusive + unowned <= invalid;\nloop invariant exclusive + nonexclusive + unowned == invalid;\nloop invariant exclusive + nonexclusive + unowned <= invalid;\nloop invariant exclusive + nonexclusive + unowned == invalid;\nloop invariant exclusive + nonexclusive <= invalid;\nloop invariant nonexclusive + unowned <= invalid;\nloop invariant exclusive + unowned <= invalid;\nloop invariant exclusive + nonexclusive + unowned == invalid;\nloop invariant exclusive + nonexclusive + unowned <= invalid;\nloop invariant exclusive + nonexclusive + unowned == invalid;\nloop invariant exclusive + nonexclusive <= invalid;\nloop invariant nonexclusive + unowned <= invalid;\nloop invariant exclusive + unowned <= invalid;\nloop invariant exclusive + nonexclusive + unowned == invalid;\nloop invariant exclusive + nonexclusive + unowned <= invalid;\nloop invariant exclusive + nonexclusive + unowned == invalid;\nloop invariant exclusive + nonexclusive <= invalid;\nloop invariant nonexclusive + unowned <= invalid;\nloop invariant exclusive + unowned <= invalid;\nloop invariant exclusive + nonexclusive + unowned == invalid;\nloop invariant exclusive + nonexclusive + unowned <= invalid;\nloop invariant exclusive + nonexclusive + unowned == invalid;\nloop invariant exclusive + nonexclusive <= invalid;\nloop invariant nonexclusive + unowned <= invalid;\nloop invariant exclusive + unowned <= invalid;\nloop invariant exclusive + nonexclusive + unowned == invalid;\nloop invariant exclusive + nonexclusive + unowned <= invalid;\nloop invariant exclusive + nonexclusive + unowned == invalid;\nloop invariant exclusive + nonexclusive <= invalid;\nloop invariant nonexclusive + unowned <= invalid;\nloop invariant exclusive + unowned <= invalid;\nloop invariant exclusive + nonexclusive + unowned == invalid;\nloop invariant exclusive + nonexclusive + unowned <= invalid;\nloop invariant exclusive + nonexclusive + unowned == invalid;\nloop invariant exclusive + nonexclusive <= invalid;\nloop invariant nonexclusive + unowned <= invalid;\nloop invariant exclusive + unowned <= invalid;\nloop invariant exclusive + nonexclusive + unowned == invalid;\nloop invariant exclusive + nonexclusive + unowned <= invalid;\nloop invariant exclusive + nonexclusive + unowned == invalid;\nloop invariant exclusive + nonexclusive <= invalid;\nloop invariant nonexclusive + unowned <= invalid;\nloop invariant exclusive + unowned <= invalid;\nloop invariant exclusive + nonexclusive + unowned == invalid;\nloop invariant exclusive + nonexclusive + unowned <= invalid;\nloop invariant exclusive + nonexclusive + unowned == invalid;\nloop invariant exclusive + nonexclusive <= invalid;\nloop invariant nonexclusive + unowned <= invalid;\nloop invariant exclusive + unowned <= invalid;\nloop invariant exclusive + nonexclusive + unowned == invalid;\nloop invariant exclusive + nonexclusive + unowned <= invalid;\nloop invariant exclusive + nonexclusive + unowned == invalid;\nloop invariant exclusive + nonexclusive <= invalid;\nloop invariant nonexclusive + unowned <= invalid;\nloop invariant exclusive + unowned <= invalid;\nloop invariant exclusive + nonexclusive + unowned == invalid;\nloop invariant exclusive + nonexclusive + unowned <= invalid;\nloop invariant exclusive + nonexclusive + unowned == invalid;\nloop invariant exclusive + nonexclusive <= invalid;\nloop invariant nonexclusive + unowned <= invalid;\nloop invariant exclusive + unowned <= invalid;\nloop invariant exclusive + nonexclusive + unowned == invalid;\nloop invariant exclusive + nonexclusive + unowned <= invalid;\nloop invariant exclusive + nonexclusive + unowned == invalid;\nloop invariant exclusive + nonexclusive <= invalid;\nloop invariant nonexclusive + unowned <= invalid;\nloop invariant exclusive + unowned <= invalid;\nloop invariant exclusive + nonexclusive + unowned == invalid;\nloop invariant exclusive + nonexclusive + unowned <= invalid;\nloop invariant exclusive + nonexclusive + unowned == invalid;\nloop invariant exclusive + nonexclusive <= invalid;\nloop invariant nonexclusive + unowned <= invalid;\nloop invariant exclusive + unowned <= invalid;\nloop invariant exclusive + nonexclusive + unowned == invalid;\nloop invariant exclusive + nonexclusive + unowned <= invalid;\nloop invariant exclusive + nonexclusive + unowned == invalid;\nloop invariant exclusive + nonexclusive <= invalid;\nloop invariant nonexclusive + unowned <= invalid;\nloop invariant exclusive + unowned <= invalid;\nloop invariant exclusive + nonexclusive + unowned == invalid;\nloop invariant exclusive + nonexclusive + unowned <= invalid;\nloop invariant exclusive + nonexclusive + unowned == invalid;\nloop invariant exclusive + nonexclusive <= invalid;\nloop invariant nonexclusive + unowned <= invalid;\nloop invariant exclusive + unowned <= invalid;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint invalid;\n\tint unowned;\n\tint nonexclusive;\n\tint exclusive;\n\n\tif (! (exclusive==0)) \nreturn 0;\n\n\tif (! (nonexclusive==0)) \nreturn 0;\n\n\tif (! (unowned==0)) \nreturn 0;\n\n\tif (! (invalid>= 1)) \nreturn 0;\n\n\t/*@\n\n\n\n\nloop invariant i5: invalid + unowned + exclusive + nonexclusive >= 1;\n\n\n\n\n\n\n*/\nwhile (unknown_int())\n\t{\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (invalid >= 1)) \nreturn 0;\n\n\t\t\tnonexclusive=nonexclusive+exclusive;\n\t\t\texclusive=0;\n\t\t\tinvalid=invalid-1;\n\t\t\tunowned=unowned+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (unknown_int())\n\t\t\t{\n\t\t\t\tif (! (nonexclusive + unowned >=1)) \nreturn 0;\n\n\t\t\t\tinvalid=invalid + unowned + nonexclusive-1;\n\t\t\t\texclusive=exclusive+1;\n\t\t\t\tunowned=0;\n\t\t\t\tnonexclusive=0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (! (invalid >= 1)) \nreturn 0;\n\n\t\t\t\tunowned=0;\n\t\t\t\tnonexclusive=0;\n\t\t\t\texclusive=1;\n\t\t\t\tinvalid=invalid+unowned+exclusive+nonexclusive-1;\n\t\t\t}\n\t\t}\n\t}\n\n\t{;\n//@ assert(exclusive >= 0);\n}\n\n\t{;\n//@ assert(nonexclusive >= 0);\n}\n\n\t{;\n//@ assert(unowned >= 0);\n}\n\n\t{;\n//@ assert(invalid >= 0);\n}\n\n\t{;\n//@ assert(invalid + unowned + exclusive >= 1);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 1 <= invalid <= 100000;\nloop invariant 0 <= exclusive <= invalid;\nloop invariant 0 <= nonexclusive <= invalid;\nloop invariant 0 <= unowned <= invalid;\nloop invariant invalid + unowned + exclusive >= 1;\nloop invariant exclusive >= 0 ==> invalid + unowned + exclusive >= 2;\nloop invariant nonexclusive >= 0 ==> invalid + unowned + nonexclusive >= 1;\nloop invariant unowned >= 0 ==> invalid + unowned + nonexclusive >= 1;\nloop invariant invalid >= 1 ==> invalid + unowned + exclusive >= 2;\nloop invariant exclusive >= 0 ==> invalid >= 1;\nloop invariant nonexclusive >= 0 ==> invalid >= 1;\nloop invariant unowned >= 0 ==> invalid >= 1;\nloop invariant exclusive >= 0 ==> unowned + nonexclusive >= 0;\nloop invariant nonexclusive >= 0 ==> unowned + exclusive >= 0;\nloop invariant unowned >= 0 ==> nonexclusive + exclusive >= 0;\nloop invariant invalid >= 1 ==> unowned + nonexclusive >= 0;\nloop invariant exclusive >= 0 ==> invalid >= 1;\nloop invariant nonexclusive >= 0 ==> invalid >= 1;\nloop invariant unowned >= 0 ==> invalid >= 1;\nloop invariant exclusive >= 0 ==> invalid + unowned + nonexclusive >= 1;\nloop invariant nonexclusive >= 0 ==> invalid + unowned + exclusive >= 1;\nloop invariant unowned >= 0 ==> invalid + exclusive + nonexclusive >= 1;\nloop invariant invalid >= 1 ==> invalid + unowned + nonexclusive >= 1;\nloop invariant invalid >= 1 ==> invalid + unowned + exclusive >= 2;\nloop invariant exclusive >= 0 ==> invalid + unowned + nonexclusive >= 1;\nloop invariant nonexclusive >= 0 ==> invalid + unowned + exclusive >= 2;\nloop invariant unowned >= 0 ==> invalid + nonexclusive + exclusive >= 2;\nloop invariant invalid >= 1 ==> invalid + unowned + nonexclusive >= 2;\nloop invariant exclusive >= 0 ==> invalid + unowned + nonexclusive >= 1;\nloop invariant nonexclusive >= 0 ==> invalid + unowned + exclusive >= 1;\nloop invariant unowned >= 0 ==> invalid + nonexclusive + exclusive >= 1;\nloop invariant invalid >= 1 ==> invalid + unowned + nonexclusive >= 2;\nloop invariant invalid >= 1 ==> invalid + unowned + exclusive >= 2;\nloop invariant exclusive >= 0 ==> invalid + nonexclusive + unowned >= 1;\nloop invariant nonexclusive >= 0 ==> invalid + unowned + exclusive >= 1;\nloop invariant unowned >= 0 ==> invalid + exclusive + nonexclusive >= 2;\nloop invariant invalid >= 1 ==> invalid + nonexclusive + unowned >= 1;\nloop invariant invalid >= 1 ==> invalid + exclusive + nonexclusive >= 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint invalid;\n\tint unowned;\n\tint nonexclusive;\n\tint exclusive;\n\n\tif (! (exclusive==0)) \nreturn 0;\n\n\tif (! (nonexclusive==0)) \nreturn 0;\n\n\tif (! (unowned==0)) \nreturn 0;\n\n\tif (! (invalid>= 1)) \nreturn 0;\n\n\t/*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown_int())\n\t{\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (invalid >= 1)) \nreturn 0;\n\n\t\t\tnonexclusive=nonexclusive+exclusive;\n\t\t\texclusive=0;\n\t\t\tinvalid=invalid-1;\n\t\t\tunowned=unowned+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (unknown_int())\n\t\t\t{\n\t\t\t\tif (! (nonexclusive + unowned >=1)) \nreturn 0;\n\n\t\t\t\tinvalid=invalid + unowned + nonexclusive-1;\n\t\t\t\texclusive=exclusive+1;\n\t\t\t\tunowned=0;\n\t\t\t\tnonexclusive=0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (! (invalid >= 1)) \nreturn 0;\n\n\t\t\t\tunowned=0;\n\t\t\t\tnonexclusive=0;\n\t\t\t\texclusive=1;\n\t\t\t\tinvalid=invalid+unowned+exclusive+nonexclusive-1;\n\t\t\t}\n\t\t}\n\t}\n\n\t{;\n//@ assert(exclusive >= 0);\n}\n\n\t{;\n//@ assert(nonexclusive >= 0);\n}\n\n\t{;\n//@ assert(unowned >= 0);\n}\n\n\t{;\n//@ assert(invalid >= 0);\n}\n\n\t{;\n//@ assert(invalid + unowned + exclusive >= 1);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= invalid;\nloop invariant 0 <= nonexclusive;\nloop invariant 0 <= unowned;\nloop invariant 1 <= exclusive;\nloop invariant 1 <= invalid;\nloop invariant 0 <= nonexclusive;\nloop invariant 1 <= unowned;\nloop invariant 0 <= exclusive;\nloop invariant 0 <= invalid;\nloop invariant 1 <= nonexclusive;\nloop invariant 0 <= unowned;\nloop invariant 1 <= exclusive;\nloop invariant 1 <= invalid;\nloop invariant 0 <= nonexclusive;\nloop invariant 1 <= unowned;\nloop invariant 0 <= exclusive;\nloop invariant 0 <= invalid;\nloop invariant 1 <= nonexclusive;\nloop invariant 0 <= unowned;\nloop invariant 1 <= exclusive;\nloop invariant 1 <= invalid;\nloop invariant 0 <= nonexclusive;\nloop invariant 1 <= unowned;\nloop invariant 0 <= exclusive;\nloop invariant 0 <= invalid;\nloop invariant 1 <= nonexclusive;\nloop invariant 0 <= unowned;\nloop invariant 1 <= exclusive;\nloop invariant 1 <= invalid;\nloop invariant 0 <= nonexclusive;\nloop invariant 1 <= unowned;\nloop invariant 0 <= exclusive;\nloop invariant 0 <= invalid;\nloop invariant 1 <= nonexclusive;\nloop invariant 0 <= unowned;\nloop invariant 1 <= exclusive;\nloop invariant 1 <= invalid;\nloop invariant 0 <= nonexclusive;\nloop invariant 1 <= unowned;\nloop invariant 0 <= exclusive;\nloop invariant 0 <= invalid;\nloop invariant 1 <= nonexclusive;\nloop invariant 0 <= unowned;\nloop invariant 1 <= exclusive;\nloop invariant 1 <= invalid;\nloop invariant 0 <= nonexclusive;\nloop invariant 1 <= unowned;\nloop invariant 0 <= exclusive;\nloop invariant 0 <= invalid;\nloop invariant 1 <= nonexclusive;\nloop invariant 0 <= unowned;\nloop invariant 1 <= exclusive;\nloop invariant 1 <= invalid;\nloop invariant 0 <= nonexclusive;\nloop invariant 1 <= unowned;\nloop invariant 0 <= exclusive;\nloop invariant 0 <= invalid;\nloop invariant 1 <= nonexclusive;\nloop invariant 0 <= unowned;\nloop invariant 1 <= exclusive;\nloop invariant 1 <= invalid;\nloop invariant 0 <= nonexclusive;\nloop invariant 1 <= unowned;\nloop invariant 0 <= exclusive;\nloop invariant 0 <= invalid;\nloop invariant 1 <= nonexclusive;\nloop invariant 0 <= unowned;\nloop invariant 1 <= exclusive;\nloop invariant 1 <= invalid;\nloop invariant 0 <= nonexclusive;\nloop invariant 1 <= unowned;\nloop invariant 0 <= exclusive;\nloop invariant 0 <= invalid;\nloop invariant 1 <= nonexclusive;\nloop invariant 0 <= unowned;\nloop invariant 1 <= exclusive;\nloop invariant 1 <= invalid;\nloop invariant 0 <= nonexclusive;\nloop invariant 1 <= unowned;\nloop invariant 0 <= exclusive;\nloop invariant 0 <= invalid;\nloop invariant 1 <= nonexclusive;\nloop invariant 0 <= unowned;\nloop invariant 1 <= exclusive;\nloop invariant 1 <= invalid;\nloop invariant 0 <= nonexclusive;\nloop invariant 1 <= unowned;\nloop invariant 0 <= exclusive;\nloop invariant 0 <= invalid;\nloop invariant 1 <= nonexclusive;\nloop invariant 0 <= unowned;\nloop invariant 1 <= exclusive;\nloop invariant 1 <= invalid;\nloop invariant 0 <= nonexclusive;\nloop invariant 1 <= unowned;\nloop invariant 0 <= exclusive;\nloop invariant 0 <= invalid;\nloop invariant 1 <= nonexclusive;\nloop invariant 0 <= unowned;\nloop invariant 1 <= exclusive;\nloop invariant 1 <= invalid;\nloop invariant 0 <= nonexclusive;\nloop invariant 1 <= unowned;\nloop invariant 0 <= exclusive;\nloop invariant 0 <= invalid;\nloop invariant 1 <= nonexclusive;\nloop invariant 0 <= unowned;\nloop invariant 1 <= exclusive;\nloop invariant 1 <= invalid;\nloop invariant 0 <= nonexclusive;\nloop invariant 1 <= unowned;\nloop invariant 0 <= exclusive;\nloop invariant 0 <= invalid;\nloop invariant 1 <= nonexclusive;\nloop invariant 0 <= unowned;\nloop invariant 1 <= exclusive;\nloop invariant 1 <= invalid;\nloop invariant 0 <= nonexclusive;\nloop invariant 1 <= unowned;\nloop invariant 0 <= exclusive;\nloop invariant 0 <= invalid;\nloop invariant 1 <= nonexclusive;\nloop invariant 0 <= unowned;\nloop invariant 1 <= exclusive;\nloop invariant 1 <= invalid;\nloop invariant 0 <= nonexclusive;\nloop invariant 1 <= unowned;\nloop invariant 0 <= exclusive;\nloop invariant 0 <= invalid;\nloop invariant 1 <= nonexclusive;\nloop invariant 0 <= unowned;\nloop invariant 1 <= exclusive;\nloop invariant 1 <= invalid;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint invalid;\n\tint unowned;\n\tint nonexclusive;\n\tint exclusive;\n\n\tif (! (exclusive==0)) \nreturn 0;\n\n\tif (! (nonexclusive==0)) \nreturn 0;\n\n\tif (! (unowned==0)) \nreturn 0;\n\n\tif (! (invalid>= 1)) \nreturn 0;\n\n\t/*@\nloop invariant i1: 0 <= invalid;\nloop invariant i2: 0 <= nonexclusive;\nloop invariant i3: 0 <= unowned;\n\n\n\nloop invariant i7: 0 <= exclusive;\n\n*/\nwhile (unknown_int())\n\t{\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (invalid >= 1)) \nreturn 0;\n\n\t\t\tnonexclusive=nonexclusive+exclusive;\n\t\t\texclusive=0;\n\t\t\tinvalid=invalid-1;\n\t\t\tunowned=unowned+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (unknown_int())\n\t\t\t{\n\t\t\t\tif (! (nonexclusive + unowned >=1)) \nreturn 0;\n\n\t\t\t\tinvalid=invalid + unowned + nonexclusive-1;\n\t\t\t\texclusive=exclusive+1;\n\t\t\t\tunowned=0;\n\t\t\t\tnonexclusive=0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (! (invalid >= 1)) \nreturn 0;\n\n\t\t\t\tunowned=0;\n\t\t\t\tnonexclusive=0;\n\t\t\t\texclusive=1;\n\t\t\t\tinvalid=invalid+unowned+exclusive+nonexclusive-1;\n\t\t\t}\n\t\t}\n\t}\n\n\t{;\n//@ assert(exclusive >= 0);\n}\n\n\t{;\n//@ assert(nonexclusive >= 0);\n}\n\n\t{;\n//@ assert(unowned >= 0);\n}\n\n\t{;\n//@ assert(invalid >= 0);\n}\n\n\t{;\n//@ assert(invalid + unowned + exclusive >= 1);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= invalid <= 1;\nloop invariant invalid <= nonexclusive + unowned;\nloop invariant invalid + unowned + exclusive >= 1;\nloop invariant nonexclusive + unowned >= 0;\nloop invariant exclusive >= 0;\nloop invariant unowned >= 0;\nloop invariant invalid >= 0;\nloop invariant nonexclusive >= 0;\nloop invariant exclusive >= 0;\nloop invariant unowned >= 0;\nloop invariant invalid >= 0;\nloop invariant invalid <= nonexclusive + unowned;\nloop invariant invalid + unowned + exclusive >= 1;\nloop invariant nonexclusive >= 0;\nloop invariant exclusive >= 0;\nloop invariant unowned >= 0;\nloop invariant invalid >= 0;\nloop invariant nonexclusive >= 0;\nloop invariant exclusive >= 0;\nloop invariant unowned >= 0;\nloop invariant invalid >= 0;\nloop invariant invalid <= nonexclusive + unowned;\nloop invariant invalid + unowned + exclusive >= 1;\nloop invariant nonexclusive >= 0;\nloop invariant exclusive >= 0;\nloop invariant unowned >= 0;\nloop invariant invalid >= 0;\nloop invariant nonexclusive >= 0;\nloop invariant exclusive >= 0;\nloop invariant unowned >= 0;\nloop invariant invalid >= 0;\nloop invariant invalid <= nonexclusive + unowned;\nloop invariant invalid + unowned + exclusive >= 1;\nloop invariant nonexclusive >= 0;\nloop invariant exclusive >= 0;\nloop invariant unowned >= 0;\nloop invariant invalid >= 0;\nloop invariant nonexclusive >= 0;\nloop invariant exclusive >= 0;\nloop invariant unowned >= 0;\nloop invariant invalid >= 0;\nloop invariant invalid <= nonexclusive + unowned;\nloop invariant invalid + unowned + exclusive >= 1;\nloop invariant nonexclusive >= 0;\nloop invariant exclusive >= 0;\nloop invariant unowned >= 0;\nloop invariant invalid >= 0;\nloop invariant nonexclusive >= 0;\nloop invariant exclusive >= 0;\nloop invariant unowned >= 0;\nloop invariant invalid >= 0;\nloop invariant invalid <= nonexclusive + unowned;\nloop invariant invalid + unowned + exclusive >= 1;\nloop invariant nonexclusive >= 0;\nloop invariant exclusive >= 0;\nloop invariant unowned >= 0;\nloop invariant invalid >= 0;\nloop invariant nonexclusive >= 0;\nloop invariant exclusive >= 0;\nloop invariant unowned >= 0;\nloop invariant invalid >= 0;\nloop invariant invalid <= nonexclusive + unowned;\nloop invariant invalid + unowned + exclusive >= 1;\nloop invariant nonexclusive >= 0;\nloop invariant exclusive >= 0;\nloop invariant unowned >= 0;\nloop invariant invalid >= 0;\nloop invariant nonexclusive >= 0;\nloop invariant exclusive >= 0;\nloop invariant unowned >= 0;\nloop invariant invalid >= 0;\nloop invariant invalid <= nonexclusive + unowned;\nloop invariant invalid + unowned + exclusive >= 1;\nloop invariant nonexclusive >= 0;\nloop invariant exclusive >= 0;\nloop invariant unowned >= 0;\nloop invariant invalid >= 0;\nloop invariant nonexclusive >= 0;\nloop invariant exclusive >= 0;\nloop invariant unowned >= 0;\nloop invariant invalid >= 0;\nloop invariant invalid <= nonexclusive + unowned;\nloop invariant invalid + unowned + exclusive >= 1;\nloop invariant nonexclusive >= 0;\nloop invariant exclusive >= 0;\nloop invariant unowned >= 0;\nloop invariant invalid >= 0;\nloop invariant nonexclusive >= 0;\nloop invariant exclusive >= 0;\nloop invariant unowned >= 0;\nloop invariant invalid >= 0;\nloop invariant invalid <= nonexclusive + unowned;\nloop invariant invalid + unowned + exclusive >= 1;\nloop invariant nonexclusive >= 0;\nloop invariant exclusive >= 0;\nloop invariant unowned >= 0;\nloop invariant invalid >= 0;\nloop invariant nonexclusive >= 0;\nloop invariant exclusive >= 0;\nloop invariant unowned >= 0;\nloop invariant invalid >= 0;\nloop invariant invalid <= nonexclusive + unowned;\nloop invariant invalid + unowned + exclusive >= 1;\nloop invariant nonexclusive >= 0;\nloop invariant exclusive >= 0;\nloop invariant unowned >= 0;\nloop invariant invalid >= 0;\nloop invariant nonexclusive >= 0;\nloop invariant exclusive >= 0;\nloop invariant unowned >= 0;\nloop invariant invalid >= 0;\nloop invariant invalid <= nonexclusive + unowned;\nloop invariant invalid + unowned + exclusive >= 1;\nloop invariant nonexclusive >= 0;\nloop invariant exclusive >= 0;\nloop invariant unowned >= 0;\nloop invariant invalid >= 0;\nloop invariant nonexclusive >= 0;\nloop invariant exclusive >= 0;\nloop invariant unowned >= 0;\nloop invariant invalid >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint invalid;\n\tint unowned;\n\tint nonexclusive;\n\tint exclusive;\n\n\tif (! (exclusive==0)) \nreturn 0;\n\n\tif (! (nonexclusive==0)) \nreturn 0;\n\n\tif (! (unowned==0)) \nreturn 0;\n\n\tif (! (invalid>= 1)) \nreturn 0;\n\n\t/*@\n\n\nloop invariant i3: invalid + unowned + exclusive >= 1;\nloop invariant i4: nonexclusive + unowned >= 0;\nloop invariant i5: exclusive >= 0;\nloop invariant i6: unowned >= 0;\nloop invariant i7: invalid >= 0;\nloop invariant i8: nonexclusive >= 0;\n*/\nwhile (unknown_int())\n\t{\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (invalid >= 1)) \nreturn 0;\n\n\t\t\tnonexclusive=nonexclusive+exclusive;\n\t\t\texclusive=0;\n\t\t\tinvalid=invalid-1;\n\t\t\tunowned=unowned+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (unknown_int())\n\t\t\t{\n\t\t\t\tif (! (nonexclusive + unowned >=1)) \nreturn 0;\n\n\t\t\t\tinvalid=invalid + unowned + nonexclusive-1;\n\t\t\t\texclusive=exclusive+1;\n\t\t\t\tunowned=0;\n\t\t\t\tnonexclusive=0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (! (invalid >= 1)) \nreturn 0;\n\n\t\t\t\tunowned=0;\n\t\t\t\tnonexclusive=0;\n\t\t\t\texclusive=1;\n\t\t\t\tinvalid=invalid+unowned+exclusive+nonexclusive-1;\n\t\t\t}\n\t\t}\n\t}\n\n\t{;\n//@ assert(exclusive >= 0);\n}\n\n\t{;\n//@ assert(nonexclusive >= 0);\n}\n\n\t{;\n//@ assert(unowned >= 0);\n}\n\n\t{;\n//@ assert(invalid >= 0);\n}\n\n\t{;\n//@ assert(invalid + unowned + exclusive >= 1);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= invalid <= 100000;\nloop invariant 0 <= unowned <= 100000;\nloop invariant 0 <= nonexclusive <= 100000;\nloop invariant 0 <= exclusive <= 100000;\nloop invariant invalid + unowned + exclusive >= 1;\nloop invariant invalid + unowned + exclusive <= 100000;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint invalid;\n\tint unowned;\n\tint nonexclusive;\n\tint exclusive;\n\n\tif (! (exclusive==0)) \nreturn 0;\n\n\tif (! (nonexclusive==0)) \nreturn 0;\n\n\tif (! (unowned==0)) \nreturn 0;\n\n\tif (! (invalid>= 1)) \nreturn 0;\n\n\t/*@\n\n\n\n\n\n\n*/\nwhile (unknown_int())\n\t{\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (invalid >= 1)) \nreturn 0;\n\n\t\t\tnonexclusive=nonexclusive+exclusive;\n\t\t\texclusive=0;\n\t\t\tinvalid=invalid-1;\n\t\t\tunowned=unowned+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (unknown_int())\n\t\t\t{\n\t\t\t\tif (! (nonexclusive + unowned >=1)) \nreturn 0;\n\n\t\t\t\tinvalid=invalid + unowned + nonexclusive-1;\n\t\t\t\texclusive=exclusive+1;\n\t\t\t\tunowned=0;\n\t\t\t\tnonexclusive=0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (! (invalid >= 1)) \nreturn 0;\n\n\t\t\t\tunowned=0;\n\t\t\t\tnonexclusive=0;\n\t\t\t\texclusive=1;\n\t\t\t\tinvalid=invalid+unowned+exclusive+nonexclusive-1;\n\t\t\t}\n\t\t}\n\t}\n\n\t{;\n//@ assert(exclusive >= 0);\n}\n\n\t{;\n//@ assert(nonexclusive >= 0);\n}\n\n\t{;\n//@ assert(unowned >= 0);\n}\n\n\t{;\n//@ assert(invalid >= 0);\n}\n\n\t{;\n//@ assert(invalid + unowned + exclusive >= 1);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 1 <= invalid;\nloop invariant 0 <= exclusive;\nloop invariant 0 <= nonexclusive;\nloop invariant 0 <= unowned;\nloop invariant invalid + unowned + exclusive >= 1;\nloop invariant exclusive <= 1;\nloop invariant nonexclusive <= invalid;\nloop invariant unowned <= invalid;\nloop invariant invalid - exclusive - nonexclusive - unowned <= invalid;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint invalid;\n\tint unowned;\n\tint nonexclusive;\n\tint exclusive;\n\n\tif (! (exclusive==0)) \nreturn 0;\n\n\tif (! (nonexclusive==0)) \nreturn 0;\n\n\tif (! (unowned==0)) \nreturn 0;\n\n\tif (! (invalid>= 1)) \nreturn 0;\n\n\t/*@\n\nloop invariant i2: 0 <= exclusive;\nloop invariant i3: 0 <= nonexclusive;\nloop invariant i4: 0 <= unowned;\nloop invariant i5: invalid + unowned + exclusive >= 1;\n\n\n\nloop invariant i9: invalid - exclusive - nonexclusive - unowned <= invalid;\n*/\nwhile (unknown_int())\n\t{\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (invalid >= 1)) \nreturn 0;\n\n\t\t\tnonexclusive=nonexclusive+exclusive;\n\t\t\texclusive=0;\n\t\t\tinvalid=invalid-1;\n\t\t\tunowned=unowned+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (unknown_int())\n\t\t\t{\n\t\t\t\tif (! (nonexclusive + unowned >=1)) \nreturn 0;\n\n\t\t\t\tinvalid=invalid + unowned + nonexclusive-1;\n\t\t\t\texclusive=exclusive+1;\n\t\t\t\tunowned=0;\n\t\t\t\tnonexclusive=0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (! (invalid >= 1)) \nreturn 0;\n\n\t\t\t\tunowned=0;\n\t\t\t\tnonexclusive=0;\n\t\t\t\texclusive=1;\n\t\t\t\tinvalid=invalid+unowned+exclusive+nonexclusive-1;\n\t\t\t}\n\t\t}\n\t}\n\n\t{;\n//@ assert(exclusive >= 0);\n}\n\n\t{;\n//@ assert(nonexclusive >= 0);\n}\n\n\t{;\n//@ assert(unowned >= 0);\n}\n\n\t{;\n//@ assert(invalid >= 0);\n}\n\n\t{;\n//@ assert(invalid + unowned + exclusive >= 1);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= invalid <= 5;\nloop invariant 0 <= unowned <= 5;\nloop invariant 0 <= nonexclusive <= 5;\nloop invariant 0 <= exclusive <= 1;\nloop invariant invalid + unowned + exclusive >= 1;\nloop invariant exclusive ==> (exclusive + nonexclusive + unowned == 1);\nloop invariant (exclusive ==> (exclusive + nonexclusive + unowned == 1) && (nonexclusive ==> (exclusive + nonexclusive + unowned == 1) && (unowned ==> (exclusive + nonexclusive + unowned == 1) && (exclusive + nonexclusive + unowned >= 1)));\nloop invariant invalid + unowned + exclusive >= 1 ==> (exclusive + nonexclusive + unowned >= 1);\nloop invariant (exclusive + nonexclusive + unowned >= 1 ==> (exclusive + nonexclusive + unowned >= 1) && (exclusive + nonexclusive + unowned >= 1) && (exclusive + nonexclusive + unowned >= 1) && (exclusive + nonexclusive + unowned >= 1));\nloop invariant invalid ==> (invalid >= 1);\nloop invariant (invalid >= 1 ==> (invalid >= 1) && (invalid >= 1) && (invalid >= 1) && (invalid >= 1));\nloop invariant valid ==> (invalid >= 1);\nloop invariant (invalid >= 1 ==> (invalid >= 1) && (invalid >= 1) && (invalid >= 1) && (invalid >= 1));\nloop invariant unowned ==> (unowned >= 0);\nloop invariant (unowned >= 0 ==> (unowned >= 0) && (unowned >= 0) && (unowned >= 0) && (unowned >= 0));\nloop invariant nonexclusive ==> (nonexclusive >= 0);\nloop invariant (nonexclusive >= 0 ==> (nonexclusive >= 0) && (nonexclusive >= 0) && (nonexclusive >= 0) && (nonexclusive >= 0));\nloop invariant exclusive ==> (exclusive >= 0);\nloop invariant (exclusive >= 0 ==> (exclusive >= 0) && (exclusive >= 0) && (exclusive >= 0) && (exclusive >= 0));\nloop invariant invalid + unowned + exclusive >= 1 ==> (invalid + unowned + exclusive >= 1);\nloop invariant (invalid + unowned + exclusive >= 1 ==> (invalid + unowned + exclusive >= 1) && (invalid + unowned + exclusive >= 1) && (invalid + unowned + exclusive >= 1) && (invalid + unowned + exclusive >= 1));\nloop invariant invalid + unowned + exclusive >= 1 ==> (invalid + unowned + exclusive >= 1);\nloop invariant (invalid + unowned + exclusive >= 1 ==> (invalid + unowned + exclusive >= 1) && (invalid + unowned + exclusive >= 1) && (invalid + unowned + exclusive >= 1) && (invalid + unowned + exclusive >= 1));\nloop invariant invalid + unowned + exclusive >= 1 ==> (invalid + unowned + exclusive >= 1);\nloop invariant (invalid + unowned + exclusive >= 1 ==> (invalid + unowned + exclusive >= 1) && (invalid + unowned + exclusive >= 1) && (invalid + unowned + exclusive >= 1) && (invalid + unowned + exclusive >= 1));\nloop invariant invalid + unowned + exclusive >= 1 ==> (invalid + unowned + exclusive >= 1);\nloop invariant (invalid + unowned + exclusive >= 1 ==> (invalid + unowned + exclusive >= 1) && (invalid + unowned + exclusive >= 1) && (invalid + unowned + exclusive >= 1) && (invalid + unowned + exclusive >= 1));\nloop invariant invalid + unowned + exclusive >= 1 ==> (invalid + unowned + exclusive >= 1);\nloop invariant (invalid + unowned + exclusive >= 1 ==> (invalid + unowned + exclusive >= 1) && (invalid + unowned + exclusive >= 1) && (invalid + unowned + exclusive >= 1) && (invalid + unowned + exclusive >= 1));\nloop invariant invalid + unowned + exclusive >= 1 ==> (invalid + unowned + exclusive >= 1);\nloop invariant (invalid + unowned + exclusive >= 1 ==> (invalid + unowned + exclusive >= 1) && (invalid + unowned + exclusive >= 1) && (invalid + unowned + exclusive >= 1) && (invalid + unowned + exclusive >= 1));\nloop invariant invalid + unowned + exclusive >= 1 ==> (invalid + unowned + exclusive >= 1);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint invalid;\n\tint unowned;\n\tint nonexclusive;\n\tint exclusive;\n\n\tif (! (exclusive==0)) \nreturn 0;\n\n\tif (! (nonexclusive==0)) \nreturn 0;\n\n\tif (! (unowned==0)) \nreturn 0;\n\n\tif (! (invalid>= 1)) \nreturn 0;\n\n\t/*@\n\n\nloop invariant i3: 0 <= nonexclusive <= 5;\nloop invariant i4: 0 <= exclusive <= 1;\nloop invariant i5: invalid + unowned + exclusive >= 1;\nloop invariant i6: exclusive ==> (exclusive + nonexclusive + unowned == 1);\n\n\nloop invariant i9: (exclusive + nonexclusive + unowned >= 1 ==> (exclusive + nonexclusive + unowned >= 1) && (exclusive + nonexclusive + unowned >= 1) && (exclusive + nonexclusive + unowned >= 1) && (exclusive + nonexclusive + unowned >= 1));\nloop invariant i10: invalid ==> (invalid >= 1);\nloop invariant i11: (invalid >= 1 ==> (invalid >= 1) && (invalid >= 1) && (invalid >= 1) && (invalid >= 1));\n\nloop invariant i13: unowned ==> (unowned >= 0);\nloop invariant i14: (unowned >= 0 ==> (unowned >= 0) && (unowned >= 0) && (unowned >= 0) && (unowned >= 0));\nloop invariant i15: nonexclusive ==> (nonexclusive >= 0);\nloop invariant i16: (nonexclusive >= 0 ==> (nonexclusive >= 0) && (nonexclusive >= 0) && (nonexclusive >= 0) && (nonexclusive >= 0));\nloop invariant i17: exclusive ==> (exclusive >= 0);\nloop invariant i18: (exclusive >= 0 ==> (exclusive >= 0) && (exclusive >= 0) && (exclusive >= 0) && (exclusive >= 0));\nloop invariant i19: invalid + unowned + exclusive >= 1 ==> (invalid + unowned + exclusive >= 1);\nloop invariant i20: (invalid + unowned + exclusive >= 1 ==> (invalid + unowned + exclusive >= 1) && (invalid + unowned + exclusive >= 1) && (invalid + unowned + exclusive >= 1) && (invalid + unowned + exclusive >= 1));\n*/\nwhile (unknown_int())\n\t{\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (invalid >= 1)) \nreturn 0;\n\n\t\t\tnonexclusive=nonexclusive+exclusive;\n\t\t\texclusive=0;\n\t\t\tinvalid=invalid-1;\n\t\t\tunowned=unowned+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (unknown_int())\n\t\t\t{\n\t\t\t\tif (! (nonexclusive + unowned >=1)) \nreturn 0;\n\n\t\t\t\tinvalid=invalid + unowned + nonexclusive-1;\n\t\t\t\texclusive=exclusive+1;\n\t\t\t\tunowned=0;\n\t\t\t\tnonexclusive=0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (! (invalid >= 1)) \nreturn 0;\n\n\t\t\t\tunowned=0;\n\t\t\t\tnonexclusive=0;\n\t\t\t\texclusive=1;\n\t\t\t\tinvalid=invalid+unowned+exclusive+nonexclusive-1;\n\t\t\t}\n\t\t}\n\t}\n\n\t{;\n//@ assert(exclusive >= 0);\n}\n\n\t{;\n//@ assert(nonexclusive >= 0);\n}\n\n\t{;\n//@ assert(unowned >= 0);\n}\n\n\t{;\n//@ assert(invalid >= 0);\n}\n\n\t{;\n//@ assert(invalid + unowned + exclusive >= 1);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint invalid;\n\tint unowned;\n\tint nonexclusive;\n\tint exclusive;\n\n\tif (! (exclusive==0)) \nreturn 0;\n\n\tif (! (nonexclusive==0)) \nreturn 0;\n\n\tif (! (unowned==0)) \nreturn 0;\n\n\tif (! (invalid>= 1)) \nreturn 0;\n\n\t/*@\n\n*/\nwhile (unknown_int())\n\t{\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (invalid >= 1)) \nreturn 0;\n\n\t\t\tnonexclusive=nonexclusive+exclusive;\n\t\t\texclusive=0;\n\t\t\tinvalid=invalid-1;\n\t\t\tunowned=unowned+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (unknown_int())\n\t\t\t{\n\t\t\t\tif (! (nonexclusive + unowned >=1)) \nreturn 0;\n\n\t\t\t\tinvalid=invalid + unowned + nonexclusive-1;\n\t\t\t\texclusive=exclusive+1;\n\t\t\t\tunowned=0;\n\t\t\t\tnonexclusive=0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (! (invalid >= 1)) \nreturn 0;\n\n\t\t\t\tunowned=0;\n\t\t\t\tnonexclusive=0;\n\t\t\t\texclusive=1;\n\t\t\t\tinvalid=invalid+unowned+exclusive+nonexclusive-1;\n\t\t\t}\n\t\t}\n\t}\n\n\t{;\n//@ assert(exclusive >= 0);\n}\n\n\t{;\n//@ assert(nonexclusive >= 0);\n}\n\n\t{;\n//@ assert(unowned >= 0);\n}\n\n\t{;\n//@ assert(invalid >= 0);\n}\n\n\t{;\n//@ assert(invalid + unowned + exclusive >= 1);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= invalid <= 100000;\nloop invariant 0 <= unowned <= 100000;\nloop invariant 0 <= nonexclusive <= 100000;\nloop invariant 0 <= exclusive <= 100000;\nloop invariant invalid + unowned + exclusive + nonexclusive <= 100000;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint invalid;\n\tint unowned;\n\tint nonexclusive;\n\tint exclusive;\n\n\tif (! (exclusive==0)) \nreturn 0;\n\n\tif (! (nonexclusive==0)) \nreturn 0;\n\n\tif (! (unowned==0)) \nreturn 0;\n\n\tif (! (invalid>= 1)) \nreturn 0;\n\n\t/*@\n\n\n\n\n\n*/\nwhile (unknown_int())\n\t{\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (invalid >= 1)) \nreturn 0;\n\n\t\t\tnonexclusive=nonexclusive+exclusive;\n\t\t\texclusive=0;\n\t\t\tinvalid=invalid-1;\n\t\t\tunowned=unowned+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (unknown_int())\n\t\t\t{\n\t\t\t\tif (! (nonexclusive + unowned >=1)) \nreturn 0;\n\n\t\t\t\tinvalid=invalid + unowned + nonexclusive-1;\n\t\t\t\texclusive=exclusive+1;\n\t\t\t\tunowned=0;\n\t\t\t\tnonexclusive=0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (! (invalid >= 1)) \nreturn 0;\n\n\t\t\t\tunowned=0;\n\t\t\t\tnonexclusive=0;\n\t\t\t\texclusive=1;\n\t\t\t\tinvalid=invalid+unowned+exclusive+nonexclusive-1;\n\t\t\t}\n\t\t}\n\t}\n\n\t{;\n//@ assert(exclusive >= 0);\n}\n\n\t{;\n//@ assert(nonexclusive >= 0);\n}\n\n\t{;\n//@ assert(unowned >= 0);\n}\n\n\t{;\n//@ assert(invalid >= 0);\n}\n\n\t{;\n//@ assert(invalid + unowned + exclusive >= 1);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 1 <= invalid <= 100000;\nloop invariant nonexclusive + unowned + exclusive >= 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint invalid;\n\tint unowned;\n\tint nonexclusive;\n\tint exclusive;\n\n\tif (! (exclusive==0)) \nreturn 0;\n\n\tif (! (nonexclusive==0)) \nreturn 0;\n\n\tif (! (unowned==0)) \nreturn 0;\n\n\tif (! (invalid>= 1)) \nreturn 0;\n\n\t/*@\n\n\n*/\nwhile (unknown_int())\n\t{\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (invalid >= 1)) \nreturn 0;\n\n\t\t\tnonexclusive=nonexclusive+exclusive;\n\t\t\texclusive=0;\n\t\t\tinvalid=invalid-1;\n\t\t\tunowned=unowned+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (unknown_int())\n\t\t\t{\n\t\t\t\tif (! (nonexclusive + unowned >=1)) \nreturn 0;\n\n\t\t\t\tinvalid=invalid + unowned + nonexclusive-1;\n\t\t\t\texclusive=exclusive+1;\n\t\t\t\tunowned=0;\n\t\t\t\tnonexclusive=0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (! (invalid >= 1)) \nreturn 0;\n\n\t\t\t\tunowned=0;\n\t\t\t\tnonexclusive=0;\n\t\t\t\texclusive=1;\n\t\t\t\tinvalid=invalid+unowned+exclusive+nonexclusive-1;\n\t\t\t}\n\t\t}\n\t}\n\n\t{;\n//@ assert(exclusive >= 0);\n}\n\n\t{;\n//@ assert(nonexclusive >= 0);\n}\n\n\t{;\n//@ assert(unowned >= 0);\n}\n\n\t{;\n//@ assert(invalid >= 0);\n}\n\n\t{;\n//@ assert(invalid + unowned + exclusive >= 1);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 1 <= invalid <= 100000;\nloop invariant unowned >= 0;\nloop invariant nonexclusive >= 0;\nloop invariant exclusive >= 0;\nloop invariant invalid + unowned + exclusive >= 1;\nloop invariant unowned + nonexclusive >= exclusive;\nloop invariant unowned + nonexclusive >= invalid;\nloop invariant unowned + nonexclusive >= 1;\nloop invariant invalid >= 1;\nloop invariant invalid + unowned + exclusive >= 1;\nloop invariant unowned + nonexclusive >= 1;\nloop invariant exclusive >= 0;\nloop invariant nonexclusive >= 0;\nloop invariant unowned >= 0;\nloop invariant invalid >= 1;\nloop invariant invalid + unowned + exclusive >= 1;\nloop invariant unowned + nonexclusive >= exclusive;\nloop invariant unowned + nonexclusive >= invalid;\nloop invariant unowned + nonexclusive >= 1;\nloop invariant invalid >= 1;\nloop invariant invalid + unowned + exclusive >= 1;\nloop invariant unowned + nonexclusive >= 1;\nloop invariant exclusive >= 0;\nloop invariant nonexclusive >= 0;\nloop invariant unowned >= 0;\nloop invariant invalid >= 1;\nloop invariant invalid + unowned + exclusive >= 1;\nloop invariant unowned + nonexclusive >= exclusive;\nloop invariant unowned + nonexclusive >= invalid;\nloop invariant unowned + nonexclusive >= 1;\nloop invariant invalid >= 1;\nloop invariant invalid + unowned + exclusive >= 1;\nloop invariant unowned + nonexclusive >= 1;\nloop invariant exclusive >= 0;\nloop invariant nonexclusive >= 0;\nloop invariant unowned >= 0;\nloop invariant invalid >= 1;\nloop invariant invalid + unowned + exclusive >= 1;\nloop invariant unowned + nonexclusive >= exclusive;\nloop invariant unowned + nonexclusive >= invalid;\nloop invariant unowned + nonexclusive >= 1;\nloop invariant invalid >= 1;\nloop invariant invalid + unowned + exclusive >= 1;\nloop invariant unowned + nonexclusive >= 1;\nloop invariant exclusive >= 0;\nloop invariant nonexclusive >= 0;\nloop invariant unowned >= 0;\nloop invariant invalid >= 1;\nloop invariant invalid + unowned + exclusive >= 1;\nloop invariant unowned + nonexclusive >= exclusive;\nloop invariant unowned + nonexclusive >= invalid;\nloop invariant unowned + nonexclusive >= 1;\nloop invariant invalid >= 1;\nloop invariant invalid + unowned + exclusive >= 1;\nloop invariant unowned + nonexclusive >= 1;\nloop invariant exclusive >= 0;\nloop invariant nonexclusive >= 0;\nloop invariant unowned >= 0;\nloop invariant invalid >= 1;\nloop invariant invalid + unowned + exclusive >= 1;\nloop invariant unowned + nonexclusive >= exclusive;\nloop invariant unowned + nonexclusive >= invalid;\nloop invariant unowned + nonexclusive >= 1;\nloop invariant invalid >= 1;\nloop invariant invalid + unowned + exclusive >= 1;\nloop invariant unowned + nonexclusive >= 1;\nloop invariant exclusive >= 0;\nloop invariant nonexclusive >= 0;\nloop invariant unowned >= 0;\nloop invariant invalid >= 1;\nloop invariant invalid + unowned + exclusive >= 1;\nloop invariant unowned + nonexclusive >= exclusive;\nloop invariant unowned + nonexclusive >= invalid;\nloop invariant unowned + nonexclusive >= 1;\nloop invariant invalid >= 1;\nloop invariant invalid + unowned + exclusive >= 1;\nloop invariant unowned + nonexclusive >= 1;\nloop invariant exclusive >= 0;\nloop invariant nonexclusive >= 0;\nloop invariant unowned >= 0;\nloop invariant invalid >= 1;\nloop invariant invalid + unowned + exclusive >= 1;\nloop invariant unowned + nonexclusive >= exclusive;\nloop invariant unowned + nonexclusive >= invalid;\nloop invariant unowned + nonexclusive >= 1;\nloop invariant invalid >= 1;\nloop invariant invalid + unowned + exclusive >= 1;\nloop invariant unowned + nonexclusive >= 1;\nloop invariant exclusive >= 0;\nloop invariant nonexclusive >= 0;\nloop invariant unowned >= 0;\nloop invariant invalid >= 1;\nloop invariant invalid + unowned + exclusive >= 1;\nloop invariant unowned + nonexclusive >= exclusive;\nloop invariant unowned + nonexclusive >= invalid;\nloop invariant unowned + nonexclusive >= 1;\nloop invariant invalid >= 1;\nloop invariant invalid + unowned + exclusive >= 1;\nloop invariant unowned + nonexclusive >= 1;\nloop invariant exclusive >= 0;\nloop invariant nonexclusive >= 0;\nloop invariant unowned >= 0;\nloop invariant invalid >= 1;\nloop invariant invalid + unowned + exclusive >= 1;\nloop invariant unowned + nonexclusive >= exclusive;\nloop invariant unowned + nonexclusive >= invalid;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint invalid;\n\tint unowned;\n\tint nonexclusive;\n\tint exclusive;\n\n\tif (! (exclusive==0)) \nreturn 0;\n\n\tif (! (nonexclusive==0)) \nreturn 0;\n\n\tif (! (unowned==0)) \nreturn 0;\n\n\tif (! (invalid>= 1)) \nreturn 0;\n\n\t/*@\n\nloop invariant i2: unowned >= 0;\nloop invariant i3: nonexclusive >= 0;\nloop invariant i4: exclusive >= 0;\nloop invariant i5: invalid + unowned + exclusive >= 1;\n\n\n\n\n*/\nwhile (unknown_int())\n\t{\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (invalid >= 1)) \nreturn 0;\n\n\t\t\tnonexclusive=nonexclusive+exclusive;\n\t\t\texclusive=0;\n\t\t\tinvalid=invalid-1;\n\t\t\tunowned=unowned+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (unknown_int())\n\t\t\t{\n\t\t\t\tif (! (nonexclusive + unowned >=1)) \nreturn 0;\n\n\t\t\t\tinvalid=invalid + unowned + nonexclusive-1;\n\t\t\t\texclusive=exclusive+1;\n\t\t\t\tunowned=0;\n\t\t\t\tnonexclusive=0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (! (invalid >= 1)) \nreturn 0;\n\n\t\t\t\tunowned=0;\n\t\t\t\tnonexclusive=0;\n\t\t\t\texclusive=1;\n\t\t\t\tinvalid=invalid+unowned+exclusive+nonexclusive-1;\n\t\t\t}\n\t\t}\n\t}\n\n\t{;\n//@ assert(exclusive >= 0);\n}\n\n\t{;\n//@ assert(nonexclusive >= 0);\n}\n\n\t{;\n//@ assert(unowned >= 0);\n}\n\n\t{;\n//@ assert(invalid >= 0);\n}\n\n\t{;\n//@ assert(invalid + unowned + exclusive >= 1);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint invalid;\n\tint unowned;\n\tint nonexclusive;\n\tint exclusive;\n\n\tif (! (exclusive==0)) \nreturn 0;\n\n\tif (! (nonexclusive==0)) \nreturn 0;\n\n\tif (! (unowned==0)) \nreturn 0;\n\n\tif (! (invalid>= 1)) \nreturn 0;\n\n\t/*@\n\n*/\nwhile (unknown_int())\n\t{\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (invalid >= 1)) \nreturn 0;\n\n\t\t\tnonexclusive=nonexclusive+exclusive;\n\t\t\texclusive=0;\n\t\t\tinvalid=invalid-1;\n\t\t\tunowned=unowned+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (unknown_int())\n\t\t\t{\n\t\t\t\tif (! (nonexclusive + unowned >=1)) \nreturn 0;\n\n\t\t\t\tinvalid=invalid + unowned + nonexclusive-1;\n\t\t\t\texclusive=exclusive+1;\n\t\t\t\tunowned=0;\n\t\t\t\tnonexclusive=0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (! (invalid >= 1)) \nreturn 0;\n\n\t\t\t\tunowned=0;\n\t\t\t\tnonexclusive=0;\n\t\t\t\texclusive=1;\n\t\t\t\tinvalid=invalid+unowned+exclusive+nonexclusive-1;\n\t\t\t}\n\t\t}\n\t}\n\n\t{;\n//@ assert(exclusive >= 0);\n}\n\n\t{;\n//@ assert(nonexclusive >= 0);\n}\n\n\t{;\n//@ assert(unowned >= 0);\n}\n\n\t{;\n//@ assert(invalid >= 0);\n}\n\n\t{;\n//@ assert(invalid + unowned + exclusive >= 1);\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 31: unexpected token ')'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint invalid;\n\tint unowned;\n\tint nonexclusive;\n\tint exclusive;\n\n\tif (! (exclusive==0)) \nreturn 0;\n\n\tif (! (nonexclusive==0)) \nreturn 0;\n\n\tif (! (unowned==0)) \nreturn 0;\n\n\tif (! (invalid>= 1)) \nreturn 0;\n\n\t/*@\nloop invariant i1: 0 <= invalid <= unknown_int();\nloop invariant i2: 0 <= unowned <= unknown_int();\nloop invariant i3: 0 <= nonexclusive <= unknown_int();\nloop invariant i4: 0 <= exclusive <= unknown_int();\nloop invariant i5: exclusive >= 0 ==> exclusive <= unknown_int();\nloop invariant i6: nonexclusive >= 0 ==> nonexclusive <= unknown_int();\nloop invariant i7: unowned >= 0 ==> unowned <= unknown_int();\nloop invariant i8: invalid >= 0 ==> invalid <= unknown_int();\nloop invariant i9: invalid + unowned + exclusive >= 1 ==> invalid + unowned + exclusive <= unknown_int();\nloop invariant i10: invalid >= 1 ==> invalid <= unknown_int();\nloop invariant i11: exclusive >= 0;\nloop invariant i12: nonexclusive >= 0;\nloop invariant i13: unowned >= 0;\nloop invariant i14: invalid >= 0;\nloop invariant i15: invalid + unowned + exclusive >= 1;\nloop invariant i16: invalid + unowned + exclusive <= 3;\nloop invariant i17: invalid + unowned + exclusive = 1 ==> invalid = 1;\nloop invariant i18: invalid + unowned + exclusive = 2 ==> exclusive = 1;\nloop invariant i19: invalid + unowned + exclusive = 3 ==> nonexclusive = 1;\nloop invariant i20: invalid + unowned + exclusive = 3 ==> unowned = 1;\nloop invariant i21: invalid + unowned + exclusive = 3 ==> exclusive = 1;\nloop invariant i22: 1 <= invalid <= 1;\nloop invariant i23: 0 <= exclusive <= 1;\nloop invariant i24: 0 <= nonexclusive <= 1;\nloop invariant i25: 0 <= unowned <= 1;\nloop invariant i26: invalid + unowned + exclusive + nonexclusive >= 1;\nloop invariant i27: exclusive + nonexclusive + unowned >= 1;\nloop invariant i28: exclusive + nonexclusive <= invalid;\nloop invariant i29: nonexclusive + unowned <= invalid;\nloop invariant i30: exclusive + unowned <= invalid;\nloop invariant i31: exclusive + nonexclusive + unowned == invalid;\nloop invariant i32: exclusive + nonexclusive + unowned <= invalid;\nloop invariant i33: 1 <= invalid <= 100000;\nloop invariant i34: 0 <= exclusive <= invalid;\nloop invariant i35: 0 <= nonexclusive <= invalid;\nloop invariant i36: 0 <= unowned <= invalid;\nloop invariant i37: exclusive >= 0 ==> invalid + unowned + exclusive >= 2;\nloop invariant i38: nonexclusive >= 0 ==> invalid + unowned + nonexclusive >= 1;\nloop invariant i39: unowned >= 0 ==> invalid + unowned + nonexclusive >= 1;\nloop invariant i40: invalid >= 1 ==> invalid + unowned + exclusive >= 2;\nloop invariant i41: exclusive >= 0 ==> invalid >= 1;\nloop invariant i42: nonexclusive >= 0 ==> invalid >= 1;\nloop invariant i43: unowned >= 0 ==> invalid >= 1;\nloop invariant i44: exclusive >= 0 ==> unowned + nonexclusive >= 0;\nloop invariant i45: nonexclusive >= 0 ==> unowned + exclusive >= 0;\nloop invariant i46: unowned >= 0 ==> nonexclusive + exclusive >= 0;\nloop invariant i47: invalid >= 1 ==> unowned + nonexclusive >= 0;\nloop invariant i48: exclusive >= 0 ==> invalid + unowned + nonexclusive >= 1;\nloop invariant i49: nonexclusive >= 0 ==> invalid + unowned + exclusive >= 1;\nloop invariant i50: unowned >= 0 ==> invalid + exclusive + nonexclusive >= 1;\nloop invariant i51: invalid >= 1 ==> invalid + unowned + nonexclusive >= 1;\nloop invariant i52: nonexclusive >= 0 ==> invalid + unowned + exclusive >= 2;\nloop invariant i53: unowned >= 0 ==> invalid + nonexclusive + exclusive >= 2;\nloop invariant i54: invalid >= 1 ==> invalid + unowned + nonexclusive >= 2;\nloop invariant i55: unowned >= 0 ==> invalid + nonexclusive + exclusive >= 1;\nloop invariant i56: exclusive >= 0 ==> invalid + nonexclusive + unowned >= 1;\nloop invariant i57: unowned >= 0 ==> invalid + exclusive + nonexclusive >= 2;\nloop invariant i58: invalid >= 1 ==> invalid + nonexclusive + unowned >= 1;\nloop invariant i59: invalid >= 1 ==> invalid + exclusive + nonexclusive >= 2;\nloop invariant i60: 0 <= invalid;\nloop invariant i61: 0 <= nonexclusive;\nloop invariant i62: 0 <= unowned;\nloop invariant i63: 1 <= exclusive;\nloop invariant i64: 1 <= invalid;\nloop invariant i65: 1 <= unowned;\nloop invariant i66: 0 <= exclusive;\nloop invariant i67: 1 <= nonexclusive;\nloop invariant i68: 0 <= invalid <= 1;\nloop invariant i69: invalid <= nonexclusive + unowned;\nloop invariant i70: nonexclusive + unowned >= 0;\nloop invariant i71: 0 <= invalid <= 100000;\nloop invariant i72: 0 <= unowned <= 100000;\nloop invariant i73: 0 <= nonexclusive <= 100000;\nloop invariant i74: 0 <= exclusive <= 100000;\nloop invariant i75: invalid + unowned + exclusive <= 100000;\nloop invariant i76: exclusive <= 1;\nloop invariant i77: nonexclusive <= invalid;\nloop invariant i78: unowned <= invalid;\nloop invariant i79: invalid - exclusive - nonexclusive - unowned <= invalid;\nloop invariant i80: 0 <= invalid <= 5;\nloop invariant i81: 0 <= unowned <= 5;\nloop invariant i82: 0 <= nonexclusive <= 5;\nloop invariant i83: exclusive ==> (exclusive + nonexclusive + unowned == 1);\nloop invariant i84: (exclusive ==> (exclusive + nonexclusive + unowned == 1) && (nonexclusive ==> (exclusive + nonexclusive + unowned == 1) && (unowned ==> (exclusive + nonexclusive + unowned == 1) && (exclusive + nonexclusive + unowned >= 1)));\nloop invariant i85: invalid + unowned + exclusive >= 1 ==> (exclusive + nonexclusive + unowned >= 1);\nloop invariant i86: (exclusive + nonexclusive + unowned >= 1 ==> (exclusive + nonexclusive + unowned >= 1) && (exclusive + nonexclusive + unowned >= 1) && (exclusive + nonexclusive + unowned >= 1) && (exclusive + nonexclusive + unowned >= 1));\nloop invariant i87: invalid ==> (invalid >= 1);\nloop invariant i88: (invalid >= 1 ==> (invalid >= 1) && (invalid >= 1) && (invalid >= 1) && (invalid >= 1));\nloop invariant i89: valid ==> (invalid >= 1);\nloop invariant i90: unowned ==> (unowned >= 0);\nloop invariant i91: (unowned >= 0 ==> (unowned >= 0) && (unowned >= 0) && (unowned >= 0) && (unowned >= 0));\nloop invariant i92: nonexclusive ==> (nonexclusive >= 0);\nloop invariant i93: (nonexclusive >= 0 ==> (nonexclusive >= 0) && (nonexclusive >= 0) && (nonexclusive >= 0) && (nonexclusive >= 0));\nloop invariant i94: exclusive ==> (exclusive >= 0);\nloop invariant i95: (exclusive >= 0 ==> (exclusive >= 0) && (exclusive >= 0) && (exclusive >= 0) && (exclusive >= 0));\nloop invariant i96: invalid + unowned + exclusive >= 1 ==> (invalid + unowned + exclusive >= 1);\nloop invariant i97: (invalid + unowned + exclusive >= 1 ==> (invalid + unowned + exclusive >= 1) && (invalid + unowned + exclusive >= 1) && (invalid + unowned + exclusive >= 1) && (invalid + unowned + exclusive >= 1));\nloop invariant i98: invalid + unowned + exclusive + nonexclusive <= 100000;\nloop invariant i99: nonexclusive + unowned + exclusive >= 1;\nloop invariant i100: unowned + nonexclusive >= exclusive;\nloop invariant i101: unowned + nonexclusive >= invalid;\nloop invariant i102: unowned + nonexclusive >= 1;\nloop invariant i103: invalid >= 1;\n*/\nwhile (unknown_int())\n\t{\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (invalid >= 1)) \nreturn 0;\n\n\t\t\tnonexclusive=nonexclusive+exclusive;\n\t\t\texclusive=0;\n\t\t\tinvalid=invalid-1;\n\t\t\tunowned=unowned+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (unknown_int())\n\t\t\t{\n\t\t\t\tif (! (nonexclusive + unowned >=1)) \nreturn 0;\n\n\t\t\t\tinvalid=invalid + unowned + nonexclusive-1;\n\t\t\t\texclusive=exclusive+1;\n\t\t\t\tunowned=0;\n\t\t\t\tnonexclusive=0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (! (invalid >= 1)) \nreturn 0;\n\n\t\t\t\tunowned=0;\n\t\t\t\tnonexclusive=0;\n\t\t\t\texclusive=1;\n\t\t\t\tinvalid=invalid+unowned+exclusive+nonexclusive-1;\n\t\t\t}\n\t\t}\n\t}\n\n\t{;\n//@ assert(exclusive >= 0);\n}\n\n\t{;\n//@ assert(nonexclusive >= 0);\n}\n\n\t{;\n//@ assert(unowned >= 0);\n}\n\n\t{;\n//@ assert(invalid >= 0);\n}\n\n\t{;\n//@ assert(invalid + unowned + exclusive >= 1);\n}\n\n}",
        "combined_annotation_num_solver_calls": 43,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint invalid;\n\tint unowned;\n\tint nonexclusive;\n\tint exclusive;\n\n\tif (! (exclusive==0)) \nreturn 0;\n\n\tif (! (nonexclusive==0)) \nreturn 0;\n\n\tif (! (unowned==0)) \nreturn 0;\n\n\tif (! (invalid>= 1)) \nreturn 0;\n\n\t/*@\n\n\n\n\n\n\n\n\n\n\nloop invariant i11: exclusive >= 0;\nloop invariant i12: nonexclusive >= 0;\nloop invariant i13: unowned >= 0;\nloop invariant i14: invalid >= 0;\nloop invariant i15: invalid + unowned + exclusive >= 1;\n\n\n\n\n\n\n\nloop invariant i23: 0 <= exclusive <= 1;\nloop invariant i24: 0 <= nonexclusive <= 1;\n\nloop invariant i26: invalid + unowned + exclusive + nonexclusive >= 1;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i44: exclusive >= 0 ==> unowned + nonexclusive >= 0;\nloop invariant i45: nonexclusive >= 0 ==> unowned + exclusive >= 0;\nloop invariant i46: unowned >= 0 ==> nonexclusive + exclusive >= 0;\nloop invariant i47: invalid >= 1 ==> unowned + nonexclusive >= 0;\n\nloop invariant i49: nonexclusive >= 0 ==> invalid + unowned + exclusive >= 1;\n\nloop invariant i51: invalid >= 1 ==> invalid + unowned + nonexclusive >= 1;\n\n\n\n\n\n\nloop invariant i58: invalid >= 1 ==> invalid + nonexclusive + unowned >= 1;\n\nloop invariant i60: 0 <= invalid;\nloop invariant i61: 0 <= nonexclusive;\nloop invariant i62: 0 <= unowned;\n\n\n\nloop invariant i66: 0 <= exclusive;\n\n\n\nloop invariant i70: nonexclusive + unowned >= 0;\n\n\nloop invariant i73: 0 <= nonexclusive <= 100000;\nloop invariant i74: 0 <= exclusive <= 100000;\n\nloop invariant i76: exclusive <= 1;\n\n\nloop invariant i79: invalid - exclusive - nonexclusive - unowned <= invalid;\n\n\nloop invariant i82: 0 <= nonexclusive <= 5;\nloop invariant i83: exclusive ==> (exclusive + nonexclusive + unowned == 1);\n\n\nloop invariant i86: (exclusive + nonexclusive + unowned >= 1 ==> (exclusive + nonexclusive + unowned >= 1) && (exclusive + nonexclusive + unowned >= 1) && (exclusive + nonexclusive + unowned >= 1) && (exclusive + nonexclusive + unowned >= 1));\nloop invariant i87: invalid ==> (invalid >= 1);\nloop invariant i88: (invalid >= 1 ==> (invalid >= 1) && (invalid >= 1) && (invalid >= 1) && (invalid >= 1));\n\nloop invariant i90: unowned ==> (unowned >= 0);\nloop invariant i91: (unowned >= 0 ==> (unowned >= 0) && (unowned >= 0) && (unowned >= 0) && (unowned >= 0));\nloop invariant i92: nonexclusive ==> (nonexclusive >= 0);\nloop invariant i93: (nonexclusive >= 0 ==> (nonexclusive >= 0) && (nonexclusive >= 0) && (nonexclusive >= 0) && (nonexclusive >= 0));\nloop invariant i94: exclusive ==> (exclusive >= 0);\nloop invariant i95: (exclusive >= 0 ==> (exclusive >= 0) && (exclusive >= 0) && (exclusive >= 0) && (exclusive >= 0));\nloop invariant i96: invalid + unowned + exclusive >= 1 ==> (invalid + unowned + exclusive >= 1);\nloop invariant i97: (invalid + unowned + exclusive >= 1 ==> (invalid + unowned + exclusive >= 1) && (invalid + unowned + exclusive >= 1) && (invalid + unowned + exclusive >= 1) && (invalid + unowned + exclusive >= 1));\n\n\n\n\n\n\n*/\nwhile (unknown_int())\n\t{\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (invalid >= 1)) \nreturn 0;\n\n\t\t\tnonexclusive=nonexclusive+exclusive;\n\t\t\texclusive=0;\n\t\t\tinvalid=invalid-1;\n\t\t\tunowned=unowned+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (unknown_int())\n\t\t\t{\n\t\t\t\tif (! (nonexclusive + unowned >=1)) \nreturn 0;\n\n\t\t\t\tinvalid=invalid + unowned + nonexclusive-1;\n\t\t\t\texclusive=exclusive+1;\n\t\t\t\tunowned=0;\n\t\t\t\tnonexclusive=0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (! (invalid >= 1)) \nreturn 0;\n\n\t\t\t\tunowned=0;\n\t\t\t\tnonexclusive=0;\n\t\t\t\texclusive=1;\n\t\t\t\tinvalid=invalid+unowned+exclusive+nonexclusive-1;\n\t\t\t}\n\t\t}\n\t}\n\n\t{;\n//@ assert(exclusive >= 0);\n}\n\n\t{;\n//@ assert(nonexclusive >= 0);\n}\n\n\t{;\n//@ assert(unowned >= 0);\n}\n\n\t{;\n//@ assert(invalid >= 0);\n}\n\n\t{;\n//@ assert(invalid + unowned + exclusive >= 1);\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/split.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/11.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/15.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/16.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/18.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/23.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/30.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/32.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/37.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/38.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/41.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/43.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/44.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/46.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/popl.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/05.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/07.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/37.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/39.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/gulv_simp.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/substring1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/xy10.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/const_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/multivar_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/phases_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/simple_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/simple_safe2.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/simple_safe3.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/simple_safe4.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/underapprox_safe2.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/barbr.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/barbrprime.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/bk-nat.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/13.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/14.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/19.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/20.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/39.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/cav.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/19.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/gulv.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/pldi082_unbounded.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/underapprox_unsafe1.c"
        ],
        "skipped": [],
        "total": 148,
        "success_count": 122,
        "failure_count": 26,
        "success_rate": 0.8243243243243243
    }
}