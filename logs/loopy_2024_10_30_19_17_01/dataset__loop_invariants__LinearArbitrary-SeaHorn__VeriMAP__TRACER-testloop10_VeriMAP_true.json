{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nvoid main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  while (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new++;\n    }\n  }\n\n  {;\n//@ assert(!( lock==0 ));\n}\n\nreturn;\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 1 <= old <= UINT_MAX;\nloop invariant 0 <= new <= UINT_MAX;\nloop invariant lock == 1 ==> new >= old;\nloop invariant lock == 0 ==> new == old + 1;\nloop invariant lock == 1 ==> new < UINT_MAX;\nloop invariant lock == 0 ==> (new == old + 1) ==> new < UINT_MAX;\nloop invariant lock == 1 ==> old < UINT_MAX;\nloop invariant lock == 0 ==> (new == old + 1) ==> old < UINT_MAX;\nloop invariant lock == 1 ==> old <= new;\nloop invariant lock == 0 ==> (new == old + 1) ==> old <= new;\nloop invariant lock == 1 ==> old == new;\nloop invariant lock == 0 ==> (new == old + 1) ==> old == new;\nloop invariant lock == 1 ==> old == new ==> lock == 1;\nloop invariant lock == 0 ==> (new == old + 1) ==> lock == 1;\nloop invariant lock == 1 ==> lock == 1 ==> new == old;\nloop invariant lock == 0 ==> (new == old + 1) ==> lock == 1;\nloop invariant lock == 1 ==> lock == 1 ==> old == new;\nloop invariant lock == 0 ==> (new == old + 1) ==> old == new;\nloop invariant lock == 1 ==> lock == 1 ==> old <= new;\nloop invariant lock == 0 ==> (new == old + 1) ==> old <= new;\nloop invariant lock == 1 ==> lock == 1 ==> new < UINT_MAX;\nloop invariant lock == 0 ==> (new == old + 1) ==> new < UINT_MAX;\nloop invariant 1 <= old <= UINT_MAX;\nloop invariant 0 <= new <= UINT_MAX;\nloop invariant lock == 1 ==> new >= old;\nloop invariant lock == 0 ==> new == old + 1;\nloop invariant lock == 1 ==> new < UINT_MAX;\nloop invariant lock == 0 ==> (new == old + 1) ==> new < UINT_MAX;\nloop invariant lock == 1 ==> old < UINT_MAX;\nloop invariant lock == 0 ==> (new == old + 1) ==> old < UINT_MAX;\nloop invariant lock == 1 ==> old <= new;\nloop invariant lock == 0 ==> (new == old + 1) ==> old <= new;\nloop invariant lock == 1 ==> old == new;\nloop invariant lock == 0 ==> (new == old + 1) ==> old == new;\nloop invariant lock == 1 ==> old == new ==> lock == 1;\nloop invariant lock == 0 ==> (new == old + 1) ==> lock == 1;\nloop invariant lock == 1 ==> lock == 1 ==> new == old;\nloop invariant lock == 0 ==> (new == old + 1) ==> lock == 1;\nloop invariant lock == 1 ==> lock == 1 ==> old == new;\nloop invariant lock == 0 ==> (new == old + 1) ==> old == new;\nloop invariant lock == 1 ==> lock == 1 ==> old <= new;\nloop invariant lock == 0 ==> (new == old + 1) ==> old <= new;\nloop invariant lock == 1 ==> lock == 1 ==> new < UINT_MAX;\nloop invariant lock == 0 ==> (new == old + 1) ==> new < UINT_MAX;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= old <= 4294967295;\nloop invariant lock == (new == old);\nloop invariant old == (new - 1);\nloop invariant lock == (new == old);\nloop invariant old == (new - 1);\nloop invariant lock == (new == old);\nloop invariant old == (new - 1);\nloop invariant lock == (new == old);\nloop invariant old == (new - 1);\nloop invariant lock == (new == old);\nloop invariant old == (new - 1);\nloop invariant lock == (new == old);\nloop invariant old == (new - 1);\nloop invariant lock == (new == old);\nloop invariant old == (new - 1);\nloop invariant lock == (new == old);\nloop invariant old == (new - 1);\nloop invariant lock == (new == old);\nloop invariant old == (new - 1);\nloop invariant lock == (new == old);\nloop invariant old == (new - 1);\nloop invariant lock == (new == old);\nloop invariant old == (new - 1);\nloop invariant lock == (new == old);\nloop invariant old == (new - 1);\nloop invariant lock == (new == old);\nloop invariant old == (new - 1);\nloop invariant lock == (new == old);\nloop invariant old == (new - 1);\nloop invariant lock == (new == old);\nloop invariant old == (new - 1);\nloop invariant lock == (new == old);\nloop invariant old == (new - 1);\nloop invariant lock == (new == old);\nloop invariant old == (new - 1);\nloop invariant lock == (new == old);\nloop invariant old == (new - 1);\nloop invariant lock == (new == old);\nloop invariant old == (new - 1);\nloop invariant lock == (new == old);\nloop invariant old == (new - 1);\nloop invariant lock == (new == old);\nloop invariant old == (new - 1);\nloop invariant lock == (new == old);\nloop invariant old == (new - 1);\nloop invariant lock == (new == old);\nloop invariant old == (new - 1);\nloop invariant lock == (new == old);\nloop invariant old == (new - 1);\nloop invariant lock == (new == old);\nloop invariant old == (new - 1);\nloop invariant lock == (new == old);\nloop invariant old == (new - 1);\nloop invariant lock == (new == old);\nloop invariant old == (new - 1);\nloop invariant lock == (new == old);\nloop invariant old == (new - 1);\nloop invariant lock == (new == old);\nloop invariant old == (new - 1);\nloop invariant lock == (new == old);\nloop invariant old == (new - 1);\nloop invariant lock == (new == old);\nloop invariant old == (new - 1);\nloop invariant lock == (new == old);\nloop invariant old == (new - 1);\nloop invariant lock == (new == old);\nloop invariant old == (new - 1);\nloop invariant lock == (new == old);\nloop invariant old == (new - 1);\nloop invariant lock == (new == old);\nloop invariant old == (new - 1);\nloop invariant lock == (new == old);\nloop invariant old == (new - 1);\nloop invariant lock == (new == old);\nloop invariant old == (new - 1);\nloop invariant lock == (new == old);\nloop invariant old == (new - 1);\nloop invariant lock == (new == old);\nloop invariant old == (new - 1);\nloop invariant lock == (new == old);\nloop invariant old == (new - 1);\nloop invariant lock == (new == old);\nloop invariant old == (new - 1);\nloop invariant lock == (new == old);\nloop invariant old == (new - 1);\nloop invariant lock == (new == old);\nloop invariant old == (new - 1);\nloop invariant lock == (new == old);\nloop invariant old == (new - 1);\nloop invariant lock == (new == old);\nloop invariant old == (new - 1);\nloop invariant lock == (new == old);\nloop invariant old == (new - 1);\nloop invariant lock == (new == old);\nloop invariant old == (new - 1);\nloop invariant lock == (new == old);\nloop invariant old == (new - 1);\nloop invariant lock == (new == old);\nloop invariant old == (new - 1);\nloop invariant lock == (new == old);\nloop invariant old == (new - 1);\nloop invariant lock == (new == old);\nloop invariant old == (new - 1);\nloop invariant lock == (new == old);\n*/\n```",
            "```\n/*@\nloop invariant 1 <= old <= UINT_MAX;\nloop invariant 0 <= new <= UINT_MAX;\nloop invariant 0 <= lock <= 1;\nloop invariant old <= new;\nloop invariant (lock == 0) ==> (new == old + 1);\nloop invariant (lock == 1) ==> (old == new);\nloop invariant (new != old) ==> (new == old + 1);\nloop invariant (new != old) ==> (lock == 0);\nloop invariant (new == old + 1) ==> (new != old);\nloop invariant (lock == 0) ==> (new == old + 1);\nloop invariant (old == new) ==> (new != old);\nloop invariant (unknown() ==> (old == new));\nloop invariant (new == old + 1) ==> (unknown() ==> (lock == 0));\nloop invariant (unknown() ==> (new == old + 1));\nloop invariant (lock == 0) ==> (unknown() ==> (new == old + 1));\nloop invariant (unknown() ==> (old == new));\nloop invariant (new == old + 1) ==> (unknown() ==> (old == new));\nloop invariant (old == new) ==> (unknown() ==> (new == old + 1));\nloop invariant (lock == 0) ==> (old == new) ==> (unknown() ==> (new == old + 1));\nloop invariant (unknown() ==> (lock == 0));\nloop invariant (new == old + 1) ==> (unknown() ==> (lock == 0));\nloop invariant (lock == 0) ==> (unknown() ==> (new == old + 1));\nloop invariant (new == old + 1) ==> (lock == 0) ==> (unknown() ==> (new == old + 1));\nloop invariant (new == old + 1) ==> (unknown() ==> (lock == 0));\nloop invariant (lock == 0) ==> (new == old + 1) ==> (unknown() ==> (lock == 0));\nloop invariant (lock == 0) ==> (new == old + 1) ==> (unknown() ==> (lock == 0));\nloop invariant (unknown() ==> (lock == 0)) ==> (new == old + 1) ==> (lock == 0);\nloop invariant (unknown() ==> (old == new));\nloop invariant (lock == 0) ==> (unknown() ==> (old == new));\nloop invariant (old == new) ==> (unknown() ==> (lock == 0));\nloop invariant (new == old + 1) ==> (lock == 0) ==> (unknown() ==> (old == new));\nloop invariant (unknown() ==> (new == old + 1));\nloop invariant (lock == 0) ==> (unknown() ==> (new == old + 1));\nloop invariant (new == old + 1) ==> (unknown() ==> (lock == 0));\nloop invariant (lock == 0) ==> (new == old + 1) ==> (unknown() ==> (lock == 0));\nloop invariant (lock == 0) ==> (new == old + 1) ==> (unknown() ==> (lock == 0));\nloop invariant (unknown() ==> (lock == 0)) ==> (new == old + 1) ==> (lock == 0);\nloop invariant (unknown() ==> (old == new));\nloop invariant (lock == 0) ==> (unknown() ==> (old == new));\nloop invariant (old == new) ==> (unknown() ==> (lock == 0));\nloop invariant (new == old + 1) ==> (lock == 0) ==> (unknown() ==> (old == new));\nloop invariant (unknown() ==> (new == old + 1));\nloop invariant (lock == 0) ==> (unknown() ==> (new == old + 1));\nloop invariant (new == old + 1) ==> (unknown() ==> (lock == 0));\nloop invariant (lock == 0) ==> (new == old + 1) ==> (unknown() ==> (lock == 0));\nloop invariant (lock == 0) ==> (new == old + 1) ==> (unknown() ==> (lock == 0));\nloop invariant (unknown() ==> (lock == 0)) ==> (new == old + 1) ==> (lock == 0);\nloop invariant (unknown() ==> (old == new));\nloop invariant (lock == 0) ==> (unknown() ==> (old == new));\nloop invariant (old == new) ==> (unknown() ==> (lock == 0));\nloop invariant (new == old + 1) ==> (lock == 0) ==> (unknown() ==> (old == new));\nloop invariant (unknown() ==> (new == old + 1));\n*/\n```",
            "```\n/*@\nloop invariant 0 <= new <= 2147483647;\nloop invariant 0 <= new <= 4294967295;\nloop invariant new >= old;\nloop invariant old >= 0;\nloop invariant old >= 1;\nloop invariant old >= 2;\nloop invariant old >= 3;\nloop invariant old >= 4;\nloop invariant old >= 5;\nloop invariant old >= 6;\nloop invariant old >= 7;\nloop invariant old >= 8;\nloop invariant old >= 9;\nloop invariant old >= 10;\nloop invariant old >= 11;\nloop invariant old >= 12;\nloop invariant old >= 13;\nloop invariant old >= 14;\nloop invariant old >= 15;\nloop invariant old >= 16;\nloop invariant old >= 17;\nloop invariant old >= 18;\nloop invariant old >= 19;\nloop invariant old >= 20;\nloop invariant old >= 21;\nloop invariant old >= 22;\nloop invariant old >= 23;\nloop invariant old >= 24;\nloop invariant old >= 25;\nloop invariant old >= 26;\nloop invariant old >= 27;\nloop invariant old >= 28;\nloop invariant old >= 29;\nloop invariant old >= 30;\nloop invariant old >= 31;\nloop invariant old >= 32;\nloop invariant old >= 33;\nloop invariant old >= 34;\nloop invariant old >= 35;\nloop invariant old >= 36;\nloop invariant old >= 37;\nloop invariant old >= 38;\nloop invariant old >= 39;\nloop invariant old >= 40;\nloop invariant old >= 41;\nloop invariant old >= 42;\nloop invariant old >= 43;\nloop invariant old >= 44;\nloop invariant old >= 45;\nloop invariant old >= 46;\nloop invariant old >= 47;\nloop invariant old >= 48;\nloop invariant old >= 49;\nloop invariant old >= 50;\nloop invariant old >= 51;\nloop invariant old >= 52;\nloop invariant old >= 53;\nloop invariant old >= 54;\nloop invariant old >= 55;\nloop invariant old >= 56;\nloop invariant old >= 57;\nloop invariant old >= 58;\nloop invariant old >= 59;\nloop invariant old >= 60;\nloop invariant old >= 61;\nloop invariant old >= 62;\nloop invariant old >= 63;\nloop invariant old >= 64;\nloop invariant old >= 65;\nloop invariant old >= 66;\nloop invariant old >= 67;\nloop invariant old >= 68;\nloop invariant old >= 69;\nloop invariant old >= 70;\nloop invariant old >= 71;\nloop invariant old >= 72;\nloop invariant old >= 73;\nloop invariant old >= 74;\nloop invariant old >= 75;\nloop invariant old >= 76;\nloop invariant old >= 77;\nloop invariant old >= 78;\nloop invariant old >= 79;\nloop invariant old >= 80;\nloop invariant old >= 81;\nloop invariant old >= 82;\nloop invariant old >= 83;\nloop invariant old >= 84;\nloop invariant old >= 85;\nloop invariant old >= 86;\nloop invariant old >= 87;\nloop invariant old >= 88;\nloop invariant old >= 89;\nloop invariant old >= 90;\nloop invariant old >= 91;\nloop invariant old >= 92;\nloop invariant old >= 93;\nloop invariant old >= 94;\nloop invariant old >= 95;\nloop invariant old >= 96;\nloop invariant old >= 97;\nloop invariant old >= 98;\nloop invariant old >= 99;\nloop invariant old >= 100;\nloop invariant old >= 101;\nloop invariant old >= 102;\nloop invariant old >= 103;\nloop invariant old >= 104;\nloop invariant old >= 105;\nloop invariant old >= 106;\nloop invariant old >= 107;\nloop invariant old >= 108;\nloop invariant old >= 109;\nloop invariant old >= 110;\nloop invariant old >= 111;\nloop invariant old >= 112;\nloop invariant old >= 113;\nloop invariant old >= 114;\nloop invariant old >= 115;\nloop invariant old >= 116;\nloop invariant old >= 117;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= lock; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= old <= 4294967295;\nloop invariant 1 <= new <= 4294967295;\nloop invariant new == old + 1;\nloop invariant lock == 0 ==> new != old;\nloop invariant lock == 0 ==> old == new;\nloop invariant lock == 1 ==> old <= new;\n*/\n```",
            "```\n/*@\nloop invariant lock == 1 ==> new == old;\nloop invariant lock == 0 ==> old == new;\nloop invariant lock == 0 ==> new <= old + 1;\nloop invariant lock == 0 ==> new >= old;\nloop invariant lock == 0 ==> new >= 0;\nloop invariant lock == 0 ==> old >= 0;\nloop invariant lock == 0 ==> new <= 4294967295;\nloop invariant lock == 0 ==> old <= 4294967295;\nloop invariant lock == 0 ==> new <= old;\nloop invariant lock == 0 ==> new >= old - 1;\nloop invariant lock == 0 ==> old >= new - 1;\nloop invariant lock == 0 ==> new >= old + unknown_uint();\nloop invariant lock == 0 ==> old >= new - unknown_uint();\nloop invariant lock == 0 ==> new <= old + unknown_uint() + 1;\nloop invariant lock == 0 ==> old >= new - unknown_uint() - 1;\nloop invariant lock == 0 ==> new >= old + (unknown_uint() + 1) / 2;\nloop invariant lock == 0 ==> old >= new - (unknown_uint() + 1) / 2;\nloop invariant lock == 0 ==> new <= old + (unknown_uint() + 1) / 2 + 1;\nloop invariant lock == 0 ==> old >= new - (unknown_uint() + 1) / 2 - 1;\nloop invariant lock == 0 ==> new >= old + (unknown_uint() + 1) / 2 + unknown_uint();\nloop invariant lock == 0 ==> old >= new - (unknown_uint() + 1) / 2 - unknown_uint();\nloop invariant lock == 0 ==> new <= old + (unknown_uint() + 1) / 2 + unknown_uint() + 1;\nloop invariant lock == 0 ==> old >= new - (unknown_uint() + 1) / 2 - unknown_uint() - 1;\nloop invariant lock == 0 ==> new >= old + (unknown_uint() + 1) / 2 + unknown_uint() + (unknown_uint() + 1) / 2;\nloop invariant lock == 0 ==> old >= new - (unknown_uint() + 1) / 2 - unknown_uint() - (unknown_uint() + 1) / 2;\nloop invariant lock == 0 ==> new <= old + (unknown_uint() + 1) / 2 + unknown_uint() + (unknown_uint() + 1) / 2 + 1;\nloop invariant lock == 0 ==> old >= new - (unknown_uint() + 1) / 2 - unknown_uint() - (unknown_uint() + 1) / 2 - 1;\nloop invariant lock == 0 ==> new >= old + (unknown_uint() + 1) / 2 + unknown_uint() + (unknown_uint() + 1) / 2 + unknown_uint();\nloop invariant lock == 0 ==> old >= new - (unknown_uint() + 1) / 2 - unknown_uint() - (unknown_uint() + 1) / 2 - unknown_uint();\nloop invariant lock == 0 ==> new <= old + (unknown_uint() + 1) / 2 + unknown_uint() + (unknown_uint() + 1) / 2 + unknown_uint() + 1;\nloop invariant lock == 0 ==> old >= new - (unknown_uint() + 1) / 2 - unknown_uint() - (unknown_uint() + 1) / 2 - unknown_uint() - 1;\nloop invariant lock == 0 ==> new >= old + (unknown_uint() + 1) / 2 + unknown_uint() + (unknown_uint() + 1) / 2 + unknown_uint() + (unknown_uint() + 1) / 2;\nloop invariant lock == 0 ==> old >= new - (unknown_uint() + 1) / 2 - unknown_uint() - (unknown_uint() + 1) / 2 - unknown_uint() - (unknown_uint() + 1) / 2;\nloop invariant lock == 0 ==> new <= old + (unknown_uint() + 1) / 2 + unknown_uint() + (unknown_uint() + 1) / 2 + unknown_uint() + (unknown_uint() + 1) / 2 + 1;\nloop invariant lock == 0 ==> old >= new - (unknown_uint() + 1) / 2 - unknown_uint() - (unknown_uint() + 1) / 2 - unknown_uint() - (unknown_uint() + 1) / 2 - 1;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= new <= 4294967295;\nloop invariant old <= new;\nloop invariant lock == 1 ==> new != old;\nloop invariant lock == 0 ==> new == old;\nloop invariant !(lock==0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= old <= UINT_MAX;\nloop invariant 0 <= new <= UINT_MAX;\nloop invariant lock == 1 ==> old == new;\nloop invariant lock == 0 ==> old < new;\nloop invariant lock == 1 ==> lock == 1;\nloop invariant lock == 0 ==> lock == 0;\nloop invariant old <= new;\nloop invariant lock == 1 ==> new == old + 1;\nloop invariant lock == 0 ==> new == old + 1;\n*/\n```",
            "```\n/*@\nloop invariant lock == 1;\nloop invariant new == old + 1;\nloop invariant old >= 0;\nloop invariant new >= 0;\nloop invariant lock >= 0;\nloop invariant lock <= 1;\nloop invariant new <= old + unknown_uint();\nloop invariant old <= unknown_uint();\n*/\n```",
            "```\n/*@\nloop invariant 0 <= new;\nloop invariant old <= new;\nloop invariant lock == 1 ==> (old + 1 == new);\nloop invariant lock == 0 ==> (old == new);\nloop invariant lock == 0 ==> (new == old);\nloop invariant lock == 0 ==> (old <= new);\nloop invariant lock == 0 ==> (old + 1 <= new);\nloop invariant lock == 0 ==> (old == new - 1);\nloop invariant lock == 0 ==> (lock == 0);\nloop invariant lock == 0 ==> (old <= new);\nloop invariant lock == 0 ==> (lock == 0);\nloop invariant lock == 0 ==> (old <= new);\nloop invariant lock == 0 ==> (lock == 0);\nloop invariant lock == 0 ==> (old <= new);\nloop invariant lock == 0 ==> (lock == 0);\nloop invariant lock == 0 ==> (old <= new);\nloop invariant lock == 0 ==> (lock == 0);\nloop invariant lock == 0 ==> (old <= new);\nloop invariant lock == 0 ==> (lock == 0);\nloop invariant lock == 0 ==> (old <= new);\nloop invariant lock == 0 ==> (lock == 0);\nloop invariant lock == 0 ==> (old <= new);\nloop invariant lock == 0 ==> (lock == 0);\nloop invariant lock == 0 ==> (old <= new);\nloop invariant lock == 0 ==> (lock == 0);\nloop invariant lock == 0 ==> (old <= new);\nloop invariant lock == 0 ==> (lock == 0);\nloop invariant lock == 0 ==> (old <= new);\nloop invariant lock == 0 ==> (lock == 0);\nloop invariant lock == 0 ==> (old <= new);\nloop invariant lock == 0 ==> (lock == 0);\nloop invariant lock == 0 ==> (old <= new);\nloop invariant lock == 0 ==> (lock == 0);\nloop invariant lock == 0 ==> (old <= new);\nloop invariant lock == 0 ==> (lock == 0);\nloop invariant lock == 0 ==> (old <= new);\nloop invariant lock == 0 ==> (lock == 0);\nloop invariant lock == 0 ==> (old <= new);\nloop invariant lock == 0 ==> (lock == 0);\nloop invariant lock == 0 ==> (old <= new);\nloop invariant lock == 0 ==> (lock == 0);\nloop invariant lock == 0 ==> (old <= new);\nloop invariant lock == 0 ==> (lock == 0);\nloop invariant lock == 0 ==> (old <= new);\nloop invariant lock == 0 ==> (lock == 0);\nloop invariant lock == 0 ==> (old <= new);\nloop invariant lock == 0 ==> (lock == 0);\nloop invariant lock == 0 ==> (old <= new);\nloop invariant lock == 0 ==> (lock == 0);\nloop invariant lock == 0 ==> (old <= new);\nloop invariant lock == 0 ==> (lock == 0);\nloop invariant lock == 0 ==> (old <= new);\nloop invariant lock == 0 ==> (lock == 0);\nloop invariant lock == 0 ==> (old <= new);\nloop invariant lock == 0 ==> (lock == 0);\nloop invariant lock == 0 ==> (old <= new);\nloop invariant lock == 0 ==> (lock == 0);\nloop invariant lock == 0 ==> (old <= new);\nloop invariant lock == 0 ==> (lock == 0);\nloop invariant lock == 0 ==> (old <= new);\nloop invariant lock == 0 ==> (lock == 0);\nloop invariant lock == 0 ==> (old <= new);\nloop invariant lock == 0 ==> (lock == 0);\nloop invariant lock == 0 ==> (old <= new);\nloop invariant lock == 0 ==> (lock == 0);\nloop invariant lock == 0 ==> (old <= new);\nloop invariant lock == 0 ==> (lock == 0);\nloop invariant lock == 0 ==> (old <= new);\nloop invariant lock == 0 ==> (lock == 0);\nloop invariant lock == 0 ==> (old <= new);\nloop invariant lock == 0 ==> (lock == 0);\nloop invariant lock == 0 ==> (old <= new);\nloop invariant lock == 0 ==> (lock == 0);\nloop invariant lock == 0 ==> (old <= new);\nloop invariant lock == 0 ==> (lock == 0);\nloop invariant lock == 0 ==> (old <= new);\nloop invariant lock == 0 ==> (lock == 0);\nloop invariant lock == 0 ==> (old <= new);\nloop invariant lock == 0 ==> (lock == 0);\nloop invariant lock == 0 ==> (old <= new);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= new;\nloop invariant old <= new;\nloop invariant 0 <= old;\nloop invariant 0 <= lock;\nloop invariant lock <= 1;\nloop invariant lock == 0 ==> new == old;\nloop invariant lock == 0 ==> new == old + 1;\nloop invariant lock == 0 ==> old == new - 1;\nloop invariant lock == 0 ==> old == new - 1;\nloop invariant lock == 1 ==> new == old;\nloop invariant lock == 1 ==> new == old + 1;\nloop invariant lock == 1 ==> old == new - 1;\nloop invariant lock == 1 ==> old == new - 1;\nloop invariant new == old ==> lock == 0;\nloop invariant new == old ==> lock == 1;\nloop invariant new == old + 1 ==> lock == 0;\nloop invariant new == old + 1 ==> lock == 1;\nloop invariant old == new - 1 ==> lock == 0;\nloop invariant old == new - 1 ==> lock == 1;\nloop invariant new == old ==> lock == 0;\nloop invariant new == old ==> lock == 1;\nloop invariant new == old + 1 ==> lock == 0;\nloop invariant new == old + 1 ==> lock == 1;\nloop invariant old == new - 1 ==> lock == 0;\nloop invariant old == new - 1 ==> lock == 1;\nloop invariant new == old ==> lock == 0;\nloop invariant new == old ==> lock == 1;\nloop invariant new == old + 1 ==> lock == 0;\nloop invariant new == old + 1 ==> lock == 1;\nloop invariant old == new - 1 ==> lock == 0;\nloop invariant old == new - 1 ==> lock == 1;\nloop invariant new == old ==> lock == 0;\nloop invariant new == old ==> lock == 1;\nloop invariant new == old + 1 ==> lock == 0;\nloop invariant new == old + 1 ==> lock == 1;\nloop invariant old == new - 1 ==> lock == 0;\nloop invariant old == new - 1 ==> lock == 1;\nloop invariant new == old ==> lock == 0;\nloop invariant new == old ==> lock == 1;\nloop invariant new == old + 1 ==> lock == 0;\nloop invariant new == old + 1 ==> lock == 1;\nloop invariant old == new - 1 ==> lock == 0;\nloop invariant old == new - 1 ==> lock == 1;\nloop invariant new == old ==> lock == 0;\nloop invariant new == old ==> lock == 1;\nloop invariant new == old + 1 ==> lock == 0;\nloop invariant new == old + 1 ==> lock == 1;\nloop invariant old == new - 1 ==> lock == 0;\nloop invariant old == new - 1 ==> lock == 1;\nloop invariant new == old ==> lock == 0;\nloop invariant new == old ==> lock == 1;\nloop invariant new == old + 1 ==> lock == 0;\nloop invariant new == old + 1 ==> lock == 1;\nloop invariant old == new - 1 ==> lock == 0;\nloop invariant old == new - 1 ==> lock == 1;\nloop invariant new == old ==> lock == 0;\nloop invariant new == old ==> lock == 1;\nloop invariant new == old + 1 ==> lock == 0;\nloop invariant new == old + 1 ==> lock == 1;\nloop invariant old == new - 1 ==> lock == 0;\nloop invariant old == new - 1 ==> lock == 1;\nloop invariant new == old ==> lock == 0;\nloop invariant new == old ==> lock == 1;\nloop invariant new == old + 1 ==> lock == 0;\nloop invariant new == old + 1 ==> lock == 1;\nloop invariant old == new - 1 ==> lock == 0;\nloop invariant old == new - 1 ==> lock == 1;\nloop invariant new == old ==> lock == 0;\nloop invariant new == old ==> lock == 1;\nloop invariant new == old + 1 ==> lock == 0;\nloop invariant new == old + 1 ==> lock == 1;\nloop invariant old == new - 1 ==> lock == 0;\nloop invariant old == new - 1 ==> lock == 1;\nloop invariant new == old ==> lock == 0;\nloop invariant new == old ==> lock == 1;\nloop invariant new == old + 1 ==> lock == 0;\nloop invariant new == old + 1 ==> lock == 1;\nloop invariant old == new - 1 ==> lock == 0;\nloop invariant old == new - 1 ==> lock == 1;\n*/\n```",
            "```\n/*@\nloop invariant lock == 1 ==> old == new;\nloop invariant lock == 0 ==> new == old;\nloop invariant lock == 0 ==> new == old + 1;\nloop invariant lock == 1 ==> old == new - 1;\nloop invariant lock == 1 ==> new >= old + 1;\nloop invariant lock == 0 ==> old <= new <= old + 1;\nloop invariant lock == 1 ==> old <= new <= old + 1;\nloop invariant lock == 0 ==> new >= old + 1;\nloop invariant lock == 1 ==> new <= old + 1;\nloop invariant lock == 0 ==> old >= new;\nloop invariant lock == 1 ==> old >= new;\nloop invariant lock == 1 ==> new == old + 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= old <= 4294967295;\nloop invariant 0 <= new <= 4294967295;\nloop invariant old <= new;\nloop invariant lock == 0 ==> old != new;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= old;\nloop invariant old <= new;\nloop invariant new <= (old + 1);\nloop invariant lock == 1 ==> new == old;\nloop invariant lock == 0 ==> new != old;\nloop invariant new <= (old + 1) ==> lock == 1;\nloop invariant new != old ==> lock == 0;\nloop invariant lock == 0 ==> new != old;\nloop invariant new != old ==> lock == 0;\nloop invariant lock == 1 ==> new == old;\nloop invariant lock == 0 ==> new != old;\nloop invariant lock == 1 ==> new == old;\nloop invariant lock == 0 ==> new != old;\nloop invariant lock == 1 ==> new == old;\nloop invariant lock == 0 ==> new != old;\nloop invariant lock == 1 ==> new == old;\nloop invariant lock == 0 ==> new != old;\nloop invariant lock == 1 ==> new == old;\nloop invariant lock == 0 ==> new != old;\nloop invariant lock == 1 ==> new == old;\nloop invariant lock == 0 ==> new != old;\nloop invariant lock == 1 ==> new == old;\nloop invariant lock == 0 ==> new != old;\nloop invariant lock == 1 ==> new == old;\nloop invariant lock == 0 ==> new != old;\nloop invariant lock == 1 ==> new == old;\nloop invariant lock == 0 ==> new != old;\nloop invariant lock == 1 ==> new == old;\nloop invariant lock == 0 ==> new != old;\nloop invariant lock == 1 ==> new == old;\nloop invariant lock == 0 ==> new != old;\nloop invariant lock == 1 ==> new == old;\nloop invariant lock == 0 ==> new != old;\nloop invariant lock == 1 ==> new == old;\nloop invariant lock == 0 ==> new != old;\nloop invariant lock == 1 ==> new == old;\nloop invariant lock == 0 ==> new != old;\nloop invariant lock == 1 ==> new == old;\nloop invariant lock == 0 ==> new != old;\nloop invariant lock == 1 ==> new == old;\nloop invariant lock == 0 ==> new != old;\nloop invariant lock == 1 ==> new == old;\nloop invariant lock == 0 ==> new != old;\nloop invariant lock == 1 ==> new == old;\nloop invariant lock == 0 ==> new != old;\nloop invariant lock == 1 ==> new == old;\nloop invariant lock == 0 ==> new != old;\nloop invariant lock == 1 ==> new == old;\nloop invariant lock == 0 ==> new != old;\nloop invariant lock == 1 ==> new == old;\nloop invariant lock == 0 ==> new != old;\nloop invariant lock == 1 ==> new == old;\nloop invariant lock == 0 ==> new != old;\nloop invariant lock == 1 ==> new == old;\nloop invariant lock == 0 ==> new != old;\nloop invariant lock == 1 ==> new == old;\nloop invariant lock == 0 ==> new != old;\nloop invariant lock == 1 ==> new == old;\nloop invariant lock == 0 ==> new != old;\nloop invariant lock == 1 ==> new == old;\nloop invariant lock == 0 ==> new != old;\nloop invariant lock == 1 ==> new == old;\nloop invariant lock == 0 ==> new != old;\nloop invariant lock == 1 ==> new == old;\nloop invariant lock == 0 ==> new != old;\nloop invariant lock == 1 ==> new == old;\nloop invariant lock == 0 ==> new != old;\nloop invariant lock == 1 ==> new == old;\nloop invariant lock == 0 ==> new != old;\nloop invariant lock == 1 ==> new == old;\nloop invariant lock == 0 ==> new != old;\nloop invariant lock == 1 ==> new == old;\nloop invariant lock == 0 ==> new != old;\nloop invariant lock == 1 ==> new == old;\nloop invariant lock == 0 ==> new != old;\nloop invariant lock == 1 ==> new == old;\nloop invariant lock == 0 ==> new != old;\nloop invariant lock == 1 ==> new == old;\nloop invariant lock == 0 ==> new != old;\nloop invariant lock == 1 ==> new == old;\nloop invariant lock == 0 ==> new != old;\nloop invariant lock == 1 ==> new == old;\nloop invariant lock == 0 ==> new != old;\nloop invariant lock == 1 ==> new == old;\nloop invariant lock == 0 ==> new != old;\nloop invariant lock == 1 ==> new == old;\nloop invariant lock == 0 ==> new != old;\nloop invariant lock == 1 ==> new == old;\nloop invariant lock == 0 ==> new != old;\nloop invariant lock == 1 ==> new == old;\nloop invariant lock == 0 ==> new != old;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 1 <= old <= UINT_MAX;\nloop invariant 0 <= new <= UINT_MAX;\nloop invariant lock == 1 ==> new >= old;\nloop invariant lock == 0 ==> new == old + 1;\nloop invariant lock == 1 ==> new < UINT_MAX;\nloop invariant lock == 0 ==> (new == old + 1) ==> new < UINT_MAX;\nloop invariant lock == 1 ==> old < UINT_MAX;\nloop invariant lock == 0 ==> (new == old + 1) ==> old < UINT_MAX;\nloop invariant lock == 1 ==> old <= new;\nloop invariant lock == 0 ==> (new == old + 1) ==> old <= new;\nloop invariant lock == 1 ==> old == new;\nloop invariant lock == 0 ==> (new == old + 1) ==> old == new;\nloop invariant lock == 1 ==> old == new ==> lock == 1;\nloop invariant lock == 0 ==> (new == old + 1) ==> lock == 1;\nloop invariant lock == 1 ==> lock == 1 ==> new == old;\nloop invariant lock == 0 ==> (new == old + 1) ==> lock == 1;\nloop invariant lock == 1 ==> lock == 1 ==> old == new;\nloop invariant lock == 0 ==> (new == old + 1) ==> old == new;\nloop invariant lock == 1 ==> lock == 1 ==> old <= new;\nloop invariant lock == 0 ==> (new == old + 1) ==> old <= new;\nloop invariant lock == 1 ==> lock == 1 ==> new < UINT_MAX;\nloop invariant lock == 0 ==> (new == old + 1) ==> new < UINT_MAX;\nloop invariant 1 <= old <= UINT_MAX;\nloop invariant 0 <= new <= UINT_MAX;\nloop invariant lock == 1 ==> new >= old;\nloop invariant lock == 0 ==> new == old + 1;\nloop invariant lock == 1 ==> new < UINT_MAX;\nloop invariant lock == 0 ==> (new == old + 1) ==> new < UINT_MAX;\nloop invariant lock == 1 ==> old < UINT_MAX;\nloop invariant lock == 0 ==> (new == old + 1) ==> old < UINT_MAX;\nloop invariant lock == 1 ==> old <= new;\nloop invariant lock == 0 ==> (new == old + 1) ==> old <= new;\nloop invariant lock == 1 ==> old == new;\nloop invariant lock == 0 ==> (new == old + 1) ==> old == new;\nloop invariant lock == 1 ==> old == new ==> lock == 1;\nloop invariant lock == 0 ==> (new == old + 1) ==> lock == 1;\nloop invariant lock == 1 ==> lock == 1 ==> new == old;\nloop invariant lock == 0 ==> (new == old + 1) ==> lock == 1;\nloop invariant lock == 1 ==> lock == 1 ==> old == new;\nloop invariant lock == 0 ==> (new == old + 1) ==> old == new;\nloop invariant lock == 1 ==> lock == 1 ==> old <= new;\nloop invariant lock == 0 ==> (new == old + 1) ==> old <= new;\nloop invariant lock == 1 ==> lock == 1 ==> new < UINT_MAX;\nloop invariant lock == 0 ==> (new == old + 1) ==> new < UINT_MAX;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nvoid main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  /*@\n\n\nloop invariant i3: lock == 1 ==> new >= old;\nloop invariant i4: lock == 0 ==> new == old + 1;\nloop invariant i5: lock == 1 ==> new < UINT_MAX;\nloop invariant i6: lock == 0 ==> (new == old + 1) ==> new < UINT_MAX;\nloop invariant i7: lock == 1 ==> old < UINT_MAX;\nloop invariant i8: lock == 0 ==> (new == old + 1) ==> old < UINT_MAX;\nloop invariant i9: lock == 1 ==> old <= new;\nloop invariant i10: lock == 0 ==> (new == old + 1) ==> old <= new;\nloop invariant i11: lock == 1 ==> old == new;\n\nloop invariant i13: lock == 1 ==> old == new ==> lock == 1;\n\nloop invariant i15: lock == 1 ==> lock == 1 ==> new == old;\nloop invariant i16: lock == 1 ==> lock == 1 ==> old == new;\nloop invariant i17: lock == 1 ==> lock == 1 ==> old <= new;\nloop invariant i18: lock == 1 ==> lock == 1 ==> new < UINT_MAX;\n*/\nwhile (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new++;\n    }\n  }\n\n  {;\n//@ assert(!( lock==0 ));\n}\n\nreturn;\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= old <= 4294967295;\nloop invariant lock == (new == old);\nloop invariant old == (new - 1);\nloop invariant lock == (new == old);\nloop invariant old == (new - 1);\nloop invariant lock == (new == old);\nloop invariant old == (new - 1);\nloop invariant lock == (new == old);\nloop invariant old == (new - 1);\nloop invariant lock == (new == old);\nloop invariant old == (new - 1);\nloop invariant lock == (new == old);\nloop invariant old == (new - 1);\nloop invariant lock == (new == old);\nloop invariant old == (new - 1);\nloop invariant lock == (new == old);\nloop invariant old == (new - 1);\nloop invariant lock == (new == old);\nloop invariant old == (new - 1);\nloop invariant lock == (new == old);\nloop invariant old == (new - 1);\nloop invariant lock == (new == old);\nloop invariant old == (new - 1);\nloop invariant lock == (new == old);\nloop invariant old == (new - 1);\nloop invariant lock == (new == old);\nloop invariant old == (new - 1);\nloop invariant lock == (new == old);\nloop invariant old == (new - 1);\nloop invariant lock == (new == old);\nloop invariant old == (new - 1);\nloop invariant lock == (new == old);\nloop invariant old == (new - 1);\nloop invariant lock == (new == old);\nloop invariant old == (new - 1);\nloop invariant lock == (new == old);\nloop invariant old == (new - 1);\nloop invariant lock == (new == old);\nloop invariant old == (new - 1);\nloop invariant lock == (new == old);\nloop invariant old == (new - 1);\nloop invariant lock == (new == old);\nloop invariant old == (new - 1);\nloop invariant lock == (new == old);\nloop invariant old == (new - 1);\nloop invariant lock == (new == old);\nloop invariant old == (new - 1);\nloop invariant lock == (new == old);\nloop invariant old == (new - 1);\nloop invariant lock == (new == old);\nloop invariant old == (new - 1);\nloop invariant lock == (new == old);\nloop invariant old == (new - 1);\nloop invariant lock == (new == old);\nloop invariant old == (new - 1);\nloop invariant lock == (new == old);\nloop invariant old == (new - 1);\nloop invariant lock == (new == old);\nloop invariant old == (new - 1);\nloop invariant lock == (new == old);\nloop invariant old == (new - 1);\nloop invariant lock == (new == old);\nloop invariant old == (new - 1);\nloop invariant lock == (new == old);\nloop invariant old == (new - 1);\nloop invariant lock == (new == old);\nloop invariant old == (new - 1);\nloop invariant lock == (new == old);\nloop invariant old == (new - 1);\nloop invariant lock == (new == old);\nloop invariant old == (new - 1);\nloop invariant lock == (new == old);\nloop invariant old == (new - 1);\nloop invariant lock == (new == old);\nloop invariant old == (new - 1);\nloop invariant lock == (new == old);\nloop invariant old == (new - 1);\nloop invariant lock == (new == old);\nloop invariant old == (new - 1);\nloop invariant lock == (new == old);\nloop invariant old == (new - 1);\nloop invariant lock == (new == old);\nloop invariant old == (new - 1);\nloop invariant lock == (new == old);\nloop invariant old == (new - 1);\nloop invariant lock == (new == old);\nloop invariant old == (new - 1);\nloop invariant lock == (new == old);\nloop invariant old == (new - 1);\nloop invariant lock == (new == old);\nloop invariant old == (new - 1);\nloop invariant lock == (new == old);\nloop invariant old == (new - 1);\nloop invariant lock == (new == old);\nloop invariant old == (new - 1);\nloop invariant lock == (new == old);\nloop invariant old == (new - 1);\nloop invariant lock == (new == old);\nloop invariant old == (new - 1);\nloop invariant lock == (new == old);\nloop invariant old == (new - 1);\nloop invariant lock == (new == old);\nloop invariant old == (new - 1);\nloop invariant lock == (new == old);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nvoid main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  /*@\n\nloop invariant i2: lock == (new == old);\n\n*/\nwhile (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new++;\n    }\n  }\n\n  {;\n//@ assert(!( lock==0 ));\n}\n\nreturn;\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 16,
                "annotations": "```\n/*@\nloop invariant 1 <= old <= UINT_MAX;\nloop invariant 0 <= new <= UINT_MAX;\nloop invariant 0 <= lock <= 1;\nloop invariant old <= new;\nloop invariant (lock == 0) ==> (new == old + 1);\nloop invariant (lock == 1) ==> (old == new);\nloop invariant (new != old) ==> (new == old + 1);\nloop invariant (new != old) ==> (lock == 0);\nloop invariant (new == old + 1) ==> (new != old);\nloop invariant (lock == 0) ==> (new == old + 1);\nloop invariant (old == new) ==> (new != old);\nloop invariant (unknown() ==> (old == new));\nloop invariant (new == old + 1) ==> (unknown() ==> (lock == 0));\nloop invariant (unknown() ==> (new == old + 1));\nloop invariant (lock == 0) ==> (unknown() ==> (new == old + 1));\nloop invariant (unknown() ==> (old == new));\nloop invariant (new == old + 1) ==> (unknown() ==> (old == new));\nloop invariant (old == new) ==> (unknown() ==> (new == old + 1));\nloop invariant (lock == 0) ==> (old == new) ==> (unknown() ==> (new == old + 1));\nloop invariant (unknown() ==> (lock == 0));\nloop invariant (new == old + 1) ==> (unknown() ==> (lock == 0));\nloop invariant (lock == 0) ==> (unknown() ==> (new == old + 1));\nloop invariant (new == old + 1) ==> (lock == 0) ==> (unknown() ==> (new == old + 1));\nloop invariant (new == old + 1) ==> (unknown() ==> (lock == 0));\nloop invariant (lock == 0) ==> (new == old + 1) ==> (unknown() ==> (lock == 0));\nloop invariant (lock == 0) ==> (new == old + 1) ==> (unknown() ==> (lock == 0));\nloop invariant (unknown() ==> (lock == 0)) ==> (new == old + 1) ==> (lock == 0);\nloop invariant (unknown() ==> (old == new));\nloop invariant (lock == 0) ==> (unknown() ==> (old == new));\nloop invariant (old == new) ==> (unknown() ==> (lock == 0));\nloop invariant (new == old + 1) ==> (lock == 0) ==> (unknown() ==> (old == new));\nloop invariant (unknown() ==> (new == old + 1));\nloop invariant (lock == 0) ==> (unknown() ==> (new == old + 1));\nloop invariant (new == old + 1) ==> (unknown() ==> (lock == 0));\nloop invariant (lock == 0) ==> (new == old + 1) ==> (unknown() ==> (lock == 0));\nloop invariant (lock == 0) ==> (new == old + 1) ==> (unknown() ==> (lock == 0));\nloop invariant (unknown() ==> (lock == 0)) ==> (new == old + 1) ==> (lock == 0);\nloop invariant (unknown() ==> (old == new));\nloop invariant (lock == 0) ==> (unknown() ==> (old == new));\nloop invariant (old == new) ==> (unknown() ==> (lock == 0));\nloop invariant (new == old + 1) ==> (lock == 0) ==> (unknown() ==> (old == new));\nloop invariant (unknown() ==> (new == old + 1));\nloop invariant (lock == 0) ==> (unknown() ==> (new == old + 1));\nloop invariant (new == old + 1) ==> (unknown() ==> (lock == 0));\nloop invariant (lock == 0) ==> (new == old + 1) ==> (unknown() ==> (lock == 0));\nloop invariant (lock == 0) ==> (new == old + 1) ==> (unknown() ==> (lock == 0));\nloop invariant (unknown() ==> (lock == 0)) ==> (new == old + 1) ==> (lock == 0);\nloop invariant (unknown() ==> (old == new));\nloop invariant (lock == 0) ==> (unknown() ==> (old == new));\nloop invariant (old == new) ==> (unknown() ==> (lock == 0));\nloop invariant (new == old + 1) ==> (lock == 0) ==> (unknown() ==> (old == new));\nloop invariant (unknown() ==> (new == old + 1));\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nvoid main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  /*@\n\n\nloop invariant i3: 0 <= lock <= 1;\nloop invariant i4: old <= new;\nloop invariant i5: (lock == 0) ==> (new == old + 1);\nloop invariant i6: (lock == 1) ==> (old == new);\nloop invariant i7: (new != old) ==> (new == old + 1);\nloop invariant i8: (new != old) ==> (lock == 0);\nloop invariant i9: (new == old + 1) ==> (new != old);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new++;\n    }\n  }\n\n  {;\n//@ assert(!( lock==0 ));\n}\n\nreturn;\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= new <= 2147483647;\nloop invariant 0 <= new <= 4294967295;\nloop invariant new >= old;\nloop invariant old >= 0;\nloop invariant old >= 1;\nloop invariant old >= 2;\nloop invariant old >= 3;\nloop invariant old >= 4;\nloop invariant old >= 5;\nloop invariant old >= 6;\nloop invariant old >= 7;\nloop invariant old >= 8;\nloop invariant old >= 9;\nloop invariant old >= 10;\nloop invariant old >= 11;\nloop invariant old >= 12;\nloop invariant old >= 13;\nloop invariant old >= 14;\nloop invariant old >= 15;\nloop invariant old >= 16;\nloop invariant old >= 17;\nloop invariant old >= 18;\nloop invariant old >= 19;\nloop invariant old >= 20;\nloop invariant old >= 21;\nloop invariant old >= 22;\nloop invariant old >= 23;\nloop invariant old >= 24;\nloop invariant old >= 25;\nloop invariant old >= 26;\nloop invariant old >= 27;\nloop invariant old >= 28;\nloop invariant old >= 29;\nloop invariant old >= 30;\nloop invariant old >= 31;\nloop invariant old >= 32;\nloop invariant old >= 33;\nloop invariant old >= 34;\nloop invariant old >= 35;\nloop invariant old >= 36;\nloop invariant old >= 37;\nloop invariant old >= 38;\nloop invariant old >= 39;\nloop invariant old >= 40;\nloop invariant old >= 41;\nloop invariant old >= 42;\nloop invariant old >= 43;\nloop invariant old >= 44;\nloop invariant old >= 45;\nloop invariant old >= 46;\nloop invariant old >= 47;\nloop invariant old >= 48;\nloop invariant old >= 49;\nloop invariant old >= 50;\nloop invariant old >= 51;\nloop invariant old >= 52;\nloop invariant old >= 53;\nloop invariant old >= 54;\nloop invariant old >= 55;\nloop invariant old >= 56;\nloop invariant old >= 57;\nloop invariant old >= 58;\nloop invariant old >= 59;\nloop invariant old >= 60;\nloop invariant old >= 61;\nloop invariant old >= 62;\nloop invariant old >= 63;\nloop invariant old >= 64;\nloop invariant old >= 65;\nloop invariant old >= 66;\nloop invariant old >= 67;\nloop invariant old >= 68;\nloop invariant old >= 69;\nloop invariant old >= 70;\nloop invariant old >= 71;\nloop invariant old >= 72;\nloop invariant old >= 73;\nloop invariant old >= 74;\nloop invariant old >= 75;\nloop invariant old >= 76;\nloop invariant old >= 77;\nloop invariant old >= 78;\nloop invariant old >= 79;\nloop invariant old >= 80;\nloop invariant old >= 81;\nloop invariant old >= 82;\nloop invariant old >= 83;\nloop invariant old >= 84;\nloop invariant old >= 85;\nloop invariant old >= 86;\nloop invariant old >= 87;\nloop invariant old >= 88;\nloop invariant old >= 89;\nloop invariant old >= 90;\nloop invariant old >= 91;\nloop invariant old >= 92;\nloop invariant old >= 93;\nloop invariant old >= 94;\nloop invariant old >= 95;\nloop invariant old >= 96;\nloop invariant old >= 97;\nloop invariant old >= 98;\nloop invariant old >= 99;\nloop invariant old >= 100;\nloop invariant old >= 101;\nloop invariant old >= 102;\nloop invariant old >= 103;\nloop invariant old >= 104;\nloop invariant old >= 105;\nloop invariant old >= 106;\nloop invariant old >= 107;\nloop invariant old >= 108;\nloop invariant old >= 109;\nloop invariant old >= 110;\nloop invariant old >= 111;\nloop invariant old >= 112;\nloop invariant old >= 113;\nloop invariant old >= 114;\nloop invariant old >= 115;\nloop invariant old >= 116;\nloop invariant old >= 117;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nvoid main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  /*@\n\n\nloop invariant i3: new >= old;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new++;\n    }\n  }\n\n  {;\n//@ assert(!( lock==0 ));\n}\n\nreturn;\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= lock; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nvoid main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  /*@\nloop invariant i1: 0 <= lock; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0;\n*/\nwhile (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new++;\n    }\n  }\n\n  {;\n//@ assert(!( lock==0 ));\n}\n\nreturn;\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= old <= 4294967295;\nloop invariant 1 <= new <= 4294967295;\nloop invariant new == old + 1;\nloop invariant lock == 0 ==> new != old;\nloop invariant lock == 0 ==> old == new;\nloop invariant lock == 1 ==> old <= new;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nvoid main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  /*@\n\n\n\nloop invariant i4: lock == 0 ==> new != old;\n\nloop invariant i6: lock == 1 ==> old <= new;\n*/\nwhile (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new++;\n    }\n  }\n\n  {;\n//@ assert(!( lock==0 ));\n}\n\nreturn;\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 27,
                "annotations": "```\n/*@\nloop invariant lock == 1 ==> new == old;\nloop invariant lock == 0 ==> old == new;\nloop invariant lock == 0 ==> new <= old + 1;\nloop invariant lock == 0 ==> new >= old;\nloop invariant lock == 0 ==> new >= 0;\nloop invariant lock == 0 ==> old >= 0;\nloop invariant lock == 0 ==> new <= 4294967295;\nloop invariant lock == 0 ==> old <= 4294967295;\nloop invariant lock == 0 ==> new <= old;\nloop invariant lock == 0 ==> new >= old - 1;\nloop invariant lock == 0 ==> old >= new - 1;\nloop invariant lock == 0 ==> new >= old + unknown_uint();\nloop invariant lock == 0 ==> old >= new - unknown_uint();\nloop invariant lock == 0 ==> new <= old + unknown_uint() + 1;\nloop invariant lock == 0 ==> old >= new - unknown_uint() - 1;\nloop invariant lock == 0 ==> new >= old + (unknown_uint() + 1) / 2;\nloop invariant lock == 0 ==> old >= new - (unknown_uint() + 1) / 2;\nloop invariant lock == 0 ==> new <= old + (unknown_uint() + 1) / 2 + 1;\nloop invariant lock == 0 ==> old >= new - (unknown_uint() + 1) / 2 - 1;\nloop invariant lock == 0 ==> new >= old + (unknown_uint() + 1) / 2 + unknown_uint();\nloop invariant lock == 0 ==> old >= new - (unknown_uint() + 1) / 2 - unknown_uint();\nloop invariant lock == 0 ==> new <= old + (unknown_uint() + 1) / 2 + unknown_uint() + 1;\nloop invariant lock == 0 ==> old >= new - (unknown_uint() + 1) / 2 - unknown_uint() - 1;\nloop invariant lock == 0 ==> new >= old + (unknown_uint() + 1) / 2 + unknown_uint() + (unknown_uint() + 1) / 2;\nloop invariant lock == 0 ==> old >= new - (unknown_uint() + 1) / 2 - unknown_uint() - (unknown_uint() + 1) / 2;\nloop invariant lock == 0 ==> new <= old + (unknown_uint() + 1) / 2 + unknown_uint() + (unknown_uint() + 1) / 2 + 1;\nloop invariant lock == 0 ==> old >= new - (unknown_uint() + 1) / 2 - unknown_uint() - (unknown_uint() + 1) / 2 - 1;\nloop invariant lock == 0 ==> new >= old + (unknown_uint() + 1) / 2 + unknown_uint() + (unknown_uint() + 1) / 2 + unknown_uint();\nloop invariant lock == 0 ==> old >= new - (unknown_uint() + 1) / 2 - unknown_uint() - (unknown_uint() + 1) / 2 - unknown_uint();\nloop invariant lock == 0 ==> new <= old + (unknown_uint() + 1) / 2 + unknown_uint() + (unknown_uint() + 1) / 2 + unknown_uint() + 1;\nloop invariant lock == 0 ==> old >= new - (unknown_uint() + 1) / 2 - unknown_uint() - (unknown_uint() + 1) / 2 - unknown_uint() - 1;\nloop invariant lock == 0 ==> new >= old + (unknown_uint() + 1) / 2 + unknown_uint() + (unknown_uint() + 1) / 2 + unknown_uint() + (unknown_uint() + 1) / 2;\nloop invariant lock == 0 ==> old >= new - (unknown_uint() + 1) / 2 - unknown_uint() - (unknown_uint() + 1) / 2 - unknown_uint() - (unknown_uint() + 1) / 2;\nloop invariant lock == 0 ==> new <= old + (unknown_uint() + 1) / 2 + unknown_uint() + (unknown_uint() + 1) / 2 + unknown_uint() + (unknown_uint() + 1) / 2 + 1;\nloop invariant lock == 0 ==> old >= new - (unknown_uint() + 1) / 2 - unknown_uint() - (unknown_uint() + 1) / 2 - unknown_uint() - (unknown_uint() + 1) / 2 - 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nvoid main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  /*@\nloop invariant i1: lock == 1 ==> new == old;\n\nloop invariant i3: lock == 0 ==> new <= old + 1;\nloop invariant i4: lock == 0 ==> new >= old;\n\n\nloop invariant i7: lock == 0 ==> new <= 4294967295;\nloop invariant i8: lock == 0 ==> old <= 4294967295;\n\nloop invariant i10: lock == 0 ==> new >= old - 1;\nloop invariant i11: lock == 0 ==> old >= new - 1;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new++;\n    }\n  }\n\n  {;\n//@ assert(!( lock==0 ));\n}\n\nreturn;\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 1 <= new <= 4294967295;\nloop invariant old <= new;\nloop invariant lock == 1 ==> new != old;\nloop invariant lock == 0 ==> new == old;\nloop invariant !(lock==0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nvoid main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  /*@\n\nloop invariant i2: old <= new;\n\n\n\n*/\nwhile (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new++;\n    }\n  }\n\n  {;\n//@ assert(!( lock==0 ));\n}\n\nreturn;\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= old <= UINT_MAX;\nloop invariant 0 <= new <= UINT_MAX;\nloop invariant lock == 1 ==> old == new;\nloop invariant lock == 0 ==> old < new;\nloop invariant lock == 1 ==> lock == 1;\nloop invariant lock == 0 ==> lock == 0;\nloop invariant old <= new;\nloop invariant lock == 1 ==> new == old + 1;\nloop invariant lock == 0 ==> new == old + 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nvoid main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  /*@\n\n\nloop invariant i3: lock == 1 ==> old == new;\nloop invariant i4: lock == 0 ==> old < new;\nloop invariant i5: lock == 1 ==> lock == 1;\nloop invariant i6: lock == 0 ==> lock == 0;\nloop invariant i7: old <= new;\n\nloop invariant i9: lock == 0 ==> new == old + 1;\n*/\nwhile (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new++;\n    }\n  }\n\n  {;\n//@ assert(!( lock==0 ));\n}\n\nreturn;\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant lock == 1;\nloop invariant new == old + 1;\nloop invariant old >= 0;\nloop invariant new >= 0;\nloop invariant lock >= 0;\nloop invariant lock <= 1;\nloop invariant new <= old + unknown_uint();\nloop invariant old <= unknown_uint();\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nvoid main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  /*@\n\n\n\n\nloop invariant i5: lock >= 0;\nloop invariant i6: lock <= 1;\n\n\n*/\nwhile (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new++;\n    }\n  }\n\n  {;\n//@ assert(!( lock==0 ));\n}\n\nreturn;\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= new;\nloop invariant old <= new;\nloop invariant lock == 1 ==> (old + 1 == new);\nloop invariant lock == 0 ==> (old == new);\nloop invariant lock == 0 ==> (new == old);\nloop invariant lock == 0 ==> (old <= new);\nloop invariant lock == 0 ==> (old + 1 <= new);\nloop invariant lock == 0 ==> (old == new - 1);\nloop invariant lock == 0 ==> (lock == 0);\nloop invariant lock == 0 ==> (old <= new);\nloop invariant lock == 0 ==> (lock == 0);\nloop invariant lock == 0 ==> (old <= new);\nloop invariant lock == 0 ==> (lock == 0);\nloop invariant lock == 0 ==> (old <= new);\nloop invariant lock == 0 ==> (lock == 0);\nloop invariant lock == 0 ==> (old <= new);\nloop invariant lock == 0 ==> (lock == 0);\nloop invariant lock == 0 ==> (old <= new);\nloop invariant lock == 0 ==> (lock == 0);\nloop invariant lock == 0 ==> (old <= new);\nloop invariant lock == 0 ==> (lock == 0);\nloop invariant lock == 0 ==> (old <= new);\nloop invariant lock == 0 ==> (lock == 0);\nloop invariant lock == 0 ==> (old <= new);\nloop invariant lock == 0 ==> (lock == 0);\nloop invariant lock == 0 ==> (old <= new);\nloop invariant lock == 0 ==> (lock == 0);\nloop invariant lock == 0 ==> (old <= new);\nloop invariant lock == 0 ==> (lock == 0);\nloop invariant lock == 0 ==> (old <= new);\nloop invariant lock == 0 ==> (lock == 0);\nloop invariant lock == 0 ==> (old <= new);\nloop invariant lock == 0 ==> (lock == 0);\nloop invariant lock == 0 ==> (old <= new);\nloop invariant lock == 0 ==> (lock == 0);\nloop invariant lock == 0 ==> (old <= new);\nloop invariant lock == 0 ==> (lock == 0);\nloop invariant lock == 0 ==> (old <= new);\nloop invariant lock == 0 ==> (lock == 0);\nloop invariant lock == 0 ==> (old <= new);\nloop invariant lock == 0 ==> (lock == 0);\nloop invariant lock == 0 ==> (old <= new);\nloop invariant lock == 0 ==> (lock == 0);\nloop invariant lock == 0 ==> (old <= new);\nloop invariant lock == 0 ==> (lock == 0);\nloop invariant lock == 0 ==> (old <= new);\nloop invariant lock == 0 ==> (lock == 0);\nloop invariant lock == 0 ==> (old <= new);\nloop invariant lock == 0 ==> (lock == 0);\nloop invariant lock == 0 ==> (old <= new);\nloop invariant lock == 0 ==> (lock == 0);\nloop invariant lock == 0 ==> (old <= new);\nloop invariant lock == 0 ==> (lock == 0);\nloop invariant lock == 0 ==> (old <= new);\nloop invariant lock == 0 ==> (lock == 0);\nloop invariant lock == 0 ==> (old <= new);\nloop invariant lock == 0 ==> (lock == 0);\nloop invariant lock == 0 ==> (old <= new);\nloop invariant lock == 0 ==> (lock == 0);\nloop invariant lock == 0 ==> (old <= new);\nloop invariant lock == 0 ==> (lock == 0);\nloop invariant lock == 0 ==> (old <= new);\nloop invariant lock == 0 ==> (lock == 0);\nloop invariant lock == 0 ==> (old <= new);\nloop invariant lock == 0 ==> (lock == 0);\nloop invariant lock == 0 ==> (old <= new);\nloop invariant lock == 0 ==> (lock == 0);\nloop invariant lock == 0 ==> (old <= new);\nloop invariant lock == 0 ==> (lock == 0);\nloop invariant lock == 0 ==> (old <= new);\nloop invariant lock == 0 ==> (lock == 0);\nloop invariant lock == 0 ==> (old <= new);\nloop invariant lock == 0 ==> (lock == 0);\nloop invariant lock == 0 ==> (old <= new);\nloop invariant lock == 0 ==> (lock == 0);\nloop invariant lock == 0 ==> (old <= new);\nloop invariant lock == 0 ==> (lock == 0);\nloop invariant lock == 0 ==> (old <= new);\nloop invariant lock == 0 ==> (lock == 0);\nloop invariant lock == 0 ==> (old <= new);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nvoid main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  /*@\n\nloop invariant i2: old <= new;\n\n\n\nloop invariant i6: lock == 0 ==> (old <= new);\nloop invariant i7: lock == 0 ==> (old + 1 <= new);\nloop invariant i8: lock == 0 ==> (old == new - 1);\nloop invariant i9: lock == 0 ==> (lock == 0);\n*/\nwhile (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new++;\n    }\n  }\n\n  {;\n//@ assert(!( lock==0 ));\n}\n\nreturn;\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= new;\nloop invariant old <= new;\nloop invariant 0 <= old;\nloop invariant 0 <= lock;\nloop invariant lock <= 1;\nloop invariant lock == 0 ==> new == old;\nloop invariant lock == 0 ==> new == old + 1;\nloop invariant lock == 0 ==> old == new - 1;\nloop invariant lock == 0 ==> old == new - 1;\nloop invariant lock == 1 ==> new == old;\nloop invariant lock == 1 ==> new == old + 1;\nloop invariant lock == 1 ==> old == new - 1;\nloop invariant lock == 1 ==> old == new - 1;\nloop invariant new == old ==> lock == 0;\nloop invariant new == old ==> lock == 1;\nloop invariant new == old + 1 ==> lock == 0;\nloop invariant new == old + 1 ==> lock == 1;\nloop invariant old == new - 1 ==> lock == 0;\nloop invariant old == new - 1 ==> lock == 1;\nloop invariant new == old ==> lock == 0;\nloop invariant new == old ==> lock == 1;\nloop invariant new == old + 1 ==> lock == 0;\nloop invariant new == old + 1 ==> lock == 1;\nloop invariant old == new - 1 ==> lock == 0;\nloop invariant old == new - 1 ==> lock == 1;\nloop invariant new == old ==> lock == 0;\nloop invariant new == old ==> lock == 1;\nloop invariant new == old + 1 ==> lock == 0;\nloop invariant new == old + 1 ==> lock == 1;\nloop invariant old == new - 1 ==> lock == 0;\nloop invariant old == new - 1 ==> lock == 1;\nloop invariant new == old ==> lock == 0;\nloop invariant new == old ==> lock == 1;\nloop invariant new == old + 1 ==> lock == 0;\nloop invariant new == old + 1 ==> lock == 1;\nloop invariant old == new - 1 ==> lock == 0;\nloop invariant old == new - 1 ==> lock == 1;\nloop invariant new == old ==> lock == 0;\nloop invariant new == old ==> lock == 1;\nloop invariant new == old + 1 ==> lock == 0;\nloop invariant new == old + 1 ==> lock == 1;\nloop invariant old == new - 1 ==> lock == 0;\nloop invariant old == new - 1 ==> lock == 1;\nloop invariant new == old ==> lock == 0;\nloop invariant new == old ==> lock == 1;\nloop invariant new == old + 1 ==> lock == 0;\nloop invariant new == old + 1 ==> lock == 1;\nloop invariant old == new - 1 ==> lock == 0;\nloop invariant old == new - 1 ==> lock == 1;\nloop invariant new == old ==> lock == 0;\nloop invariant new == old ==> lock == 1;\nloop invariant new == old + 1 ==> lock == 0;\nloop invariant new == old + 1 ==> lock == 1;\nloop invariant old == new - 1 ==> lock == 0;\nloop invariant old == new - 1 ==> lock == 1;\nloop invariant new == old ==> lock == 0;\nloop invariant new == old ==> lock == 1;\nloop invariant new == old + 1 ==> lock == 0;\nloop invariant new == old + 1 ==> lock == 1;\nloop invariant old == new - 1 ==> lock == 0;\nloop invariant old == new - 1 ==> lock == 1;\nloop invariant new == old ==> lock == 0;\nloop invariant new == old ==> lock == 1;\nloop invariant new == old + 1 ==> lock == 0;\nloop invariant new == old + 1 ==> lock == 1;\nloop invariant old == new - 1 ==> lock == 0;\nloop invariant old == new - 1 ==> lock == 1;\nloop invariant new == old ==> lock == 0;\nloop invariant new == old ==> lock == 1;\nloop invariant new == old + 1 ==> lock == 0;\nloop invariant new == old + 1 ==> lock == 1;\nloop invariant old == new - 1 ==> lock == 0;\nloop invariant old == new - 1 ==> lock == 1;\nloop invariant new == old ==> lock == 0;\nloop invariant new == old ==> lock == 1;\nloop invariant new == old + 1 ==> lock == 0;\nloop invariant new == old + 1 ==> lock == 1;\nloop invariant old == new - 1 ==> lock == 0;\nloop invariant old == new - 1 ==> lock == 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nvoid main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  /*@\n\nloop invariant i2: old <= new;\n\nloop invariant i4: 0 <= lock;\nloop invariant i5: lock <= 1;\n\nloop invariant i7: lock == 0 ==> new == old + 1;\nloop invariant i8: lock == 0 ==> old == new - 1;\nloop invariant i9: lock == 1 ==> new == old;\n\n\n\nloop invariant i13: new == old ==> lock == 1;\nloop invariant i14: new == old + 1 ==> lock == 0;\n\nloop invariant i16: old == new - 1 ==> lock == 0;\n\n*/\nwhile (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new++;\n    }\n  }\n\n  {;\n//@ assert(!( lock==0 ));\n}\n\nreturn;\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant lock == 1 ==> old == new;\nloop invariant lock == 0 ==> new == old;\nloop invariant lock == 0 ==> new == old + 1;\nloop invariant lock == 1 ==> old == new - 1;\nloop invariant lock == 1 ==> new >= old + 1;\nloop invariant lock == 0 ==> old <= new <= old + 1;\nloop invariant lock == 1 ==> old <= new <= old + 1;\nloop invariant lock == 0 ==> new >= old + 1;\nloop invariant lock == 1 ==> new <= old + 1;\nloop invariant lock == 0 ==> old >= new;\nloop invariant lock == 1 ==> old >= new;\nloop invariant lock == 1 ==> new == old + 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nvoid main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  /*@\nloop invariant i1: lock == 1 ==> old == new;\n\nloop invariant i3: lock == 0 ==> new == old + 1;\n\n\nloop invariant i6: lock == 0 ==> old <= new <= old + 1;\nloop invariant i7: lock == 1 ==> old <= new <= old + 1;\nloop invariant i8: lock == 0 ==> new >= old + 1;\nloop invariant i9: lock == 1 ==> new <= old + 1;\n\nloop invariant i11: lock == 1 ==> old >= new;\n\n*/\nwhile (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new++;\n    }\n  }\n\n  {;\n//@ assert(!( lock==0 ));\n}\n\nreturn;\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= old <= 4294967295;\nloop invariant 0 <= new <= 4294967295;\nloop invariant old <= new;\nloop invariant lock == 0 ==> old != new;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nvoid main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  /*@\n\n\nloop invariant i3: old <= new;\nloop invariant i4: lock == 0 ==> old != new;\n*/\nwhile (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new++;\n    }\n  }\n\n  {;\n//@ assert(!( lock==0 ));\n}\n\nreturn;\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= old;\nloop invariant old <= new;\nloop invariant new <= (old + 1);\nloop invariant lock == 1 ==> new == old;\nloop invariant lock == 0 ==> new != old;\nloop invariant new <= (old + 1) ==> lock == 1;\nloop invariant new != old ==> lock == 0;\nloop invariant lock == 0 ==> new != old;\nloop invariant new != old ==> lock == 0;\nloop invariant lock == 1 ==> new == old;\nloop invariant lock == 0 ==> new != old;\nloop invariant lock == 1 ==> new == old;\nloop invariant lock == 0 ==> new != old;\nloop invariant lock == 1 ==> new == old;\nloop invariant lock == 0 ==> new != old;\nloop invariant lock == 1 ==> new == old;\nloop invariant lock == 0 ==> new != old;\nloop invariant lock == 1 ==> new == old;\nloop invariant lock == 0 ==> new != old;\nloop invariant lock == 1 ==> new == old;\nloop invariant lock == 0 ==> new != old;\nloop invariant lock == 1 ==> new == old;\nloop invariant lock == 0 ==> new != old;\nloop invariant lock == 1 ==> new == old;\nloop invariant lock == 0 ==> new != old;\nloop invariant lock == 1 ==> new == old;\nloop invariant lock == 0 ==> new != old;\nloop invariant lock == 1 ==> new == old;\nloop invariant lock == 0 ==> new != old;\nloop invariant lock == 1 ==> new == old;\nloop invariant lock == 0 ==> new != old;\nloop invariant lock == 1 ==> new == old;\nloop invariant lock == 0 ==> new != old;\nloop invariant lock == 1 ==> new == old;\nloop invariant lock == 0 ==> new != old;\nloop invariant lock == 1 ==> new == old;\nloop invariant lock == 0 ==> new != old;\nloop invariant lock == 1 ==> new == old;\nloop invariant lock == 0 ==> new != old;\nloop invariant lock == 1 ==> new == old;\nloop invariant lock == 0 ==> new != old;\nloop invariant lock == 1 ==> new == old;\nloop invariant lock == 0 ==> new != old;\nloop invariant lock == 1 ==> new == old;\nloop invariant lock == 0 ==> new != old;\nloop invariant lock == 1 ==> new == old;\nloop invariant lock == 0 ==> new != old;\nloop invariant lock == 1 ==> new == old;\nloop invariant lock == 0 ==> new != old;\nloop invariant lock == 1 ==> new == old;\nloop invariant lock == 0 ==> new != old;\nloop invariant lock == 1 ==> new == old;\nloop invariant lock == 0 ==> new != old;\nloop invariant lock == 1 ==> new == old;\nloop invariant lock == 0 ==> new != old;\nloop invariant lock == 1 ==> new == old;\nloop invariant lock == 0 ==> new != old;\nloop invariant lock == 1 ==> new == old;\nloop invariant lock == 0 ==> new != old;\nloop invariant lock == 1 ==> new == old;\nloop invariant lock == 0 ==> new != old;\nloop invariant lock == 1 ==> new == old;\nloop invariant lock == 0 ==> new != old;\nloop invariant lock == 1 ==> new == old;\nloop invariant lock == 0 ==> new != old;\nloop invariant lock == 1 ==> new == old;\nloop invariant lock == 0 ==> new != old;\nloop invariant lock == 1 ==> new == old;\nloop invariant lock == 0 ==> new != old;\nloop invariant lock == 1 ==> new == old;\nloop invariant lock == 0 ==> new != old;\nloop invariant lock == 1 ==> new == old;\nloop invariant lock == 0 ==> new != old;\nloop invariant lock == 1 ==> new == old;\nloop invariant lock == 0 ==> new != old;\nloop invariant lock == 1 ==> new == old;\nloop invariant lock == 0 ==> new != old;\nloop invariant lock == 1 ==> new == old;\nloop invariant lock == 0 ==> new != old;\nloop invariant lock == 1 ==> new == old;\nloop invariant lock == 0 ==> new != old;\nloop invariant lock == 1 ==> new == old;\nloop invariant lock == 0 ==> new != old;\nloop invariant lock == 1 ==> new == old;\nloop invariant lock == 0 ==> new != old;\nloop invariant lock == 1 ==> new == old;\nloop invariant lock == 0 ==> new != old;\nloop invariant lock == 1 ==> new == old;\nloop invariant lock == 0 ==> new != old;\nloop invariant lock == 1 ==> new == old;\nloop invariant lock == 0 ==> new != old;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nvoid main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  /*@\n\nloop invariant i2: old <= new;\nloop invariant i3: new <= (old + 1);\nloop invariant i4: lock == 1 ==> new == old;\nloop invariant i5: lock == 0 ==> new != old;\n\nloop invariant i7: new != old ==> lock == 0;\n*/\nwhile (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new++;\n    }\n  }\n\n  {;\n//@ assert(!( lock==0 ));\n}\n\nreturn;\n\n}",
                "checker_output_after_prune": true
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 52: unexpected token ')'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nvoid main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  /*@\nloop invariant i1: 1 <= old <= UINT_MAX;\nloop invariant i2: 0 <= new <= UINT_MAX;\nloop invariant i3: lock == 1 ==> new >= old;\nloop invariant i4: lock == 0 ==> new == old + 1;\nloop invariant i5: lock == 1 ==> new < UINT_MAX;\nloop invariant i6: lock == 0 ==> (new == old + 1) ==> new < UINT_MAX;\nloop invariant i7: lock == 1 ==> old < UINT_MAX;\nloop invariant i8: lock == 0 ==> (new == old + 1) ==> old < UINT_MAX;\nloop invariant i9: lock == 1 ==> old <= new;\nloop invariant i10: lock == 0 ==> (new == old + 1) ==> old <= new;\nloop invariant i11: lock == 1 ==> old == new;\nloop invariant i12: lock == 0 ==> (new == old + 1) ==> old == new;\nloop invariant i13: lock == 1 ==> old == new ==> lock == 1;\nloop invariant i14: lock == 0 ==> (new == old + 1) ==> lock == 1;\nloop invariant i15: lock == 1 ==> lock == 1 ==> new == old;\nloop invariant i16: lock == 1 ==> lock == 1 ==> old == new;\nloop invariant i17: lock == 1 ==> lock == 1 ==> old <= new;\nloop invariant i18: lock == 1 ==> lock == 1 ==> new < UINT_MAX;\nloop invariant i19: 0 <= old <= 4294967295;\nloop invariant i20: lock == (new == old);\nloop invariant i21: old == (new - 1);\nloop invariant i22: 0 <= lock <= 1;\nloop invariant i23: old <= new;\nloop invariant i24: (lock == 0) ==> (new == old + 1);\nloop invariant i25: (lock == 1) ==> (old == new);\nloop invariant i26: (new != old) ==> (new == old + 1);\nloop invariant i27: (new != old) ==> (lock == 0);\nloop invariant i28: (new == old + 1) ==> (new != old);\nloop invariant i29: (old == new) ==> (new != old);\nloop invariant i30: (unknown() ==> (old == new));\nloop invariant i31: (new == old + 1) ==> (unknown() ==> (lock == 0));\nloop invariant i32: (unknown() ==> (new == old + 1));\nloop invariant i33: (lock == 0) ==> (unknown() ==> (new == old + 1));\nloop invariant i34: (new == old + 1) ==> (unknown() ==> (old == new));\nloop invariant i35: (old == new) ==> (unknown() ==> (new == old + 1));\nloop invariant i36: (lock == 0) ==> (old == new) ==> (unknown() ==> (new == old + 1));\nloop invariant i37: (unknown() ==> (lock == 0));\nloop invariant i38: (new == old + 1) ==> (lock == 0) ==> (unknown() ==> (new == old + 1));\nloop invariant i39: (lock == 0) ==> (new == old + 1) ==> (unknown() ==> (lock == 0));\nloop invariant i40: (unknown() ==> (lock == 0)) ==> (new == old + 1) ==> (lock == 0);\nloop invariant i41: (lock == 0) ==> (unknown() ==> (old == new));\nloop invariant i42: (old == new) ==> (unknown() ==> (lock == 0));\nloop invariant i43: (new == old + 1) ==> (lock == 0) ==> (unknown() ==> (old == new));\nloop invariant i44: 0 <= new <= 2147483647;\nloop invariant i45: 0 <= new <= 4294967295;\nloop invariant i46: new >= old;\nloop invariant i47: old >= 0;\nloop invariant i48: old >= 1;\nloop invariant i49: old >= 2;\nloop invariant i50: old >= 3;\nloop invariant i51: old >= 4;\nloop invariant i52: old >= 5;\nloop invariant i53: old >= 6;\nloop invariant i54: old >= 7;\nloop invariant i55: old >= 8;\nloop invariant i56: old >= 9;\nloop invariant i57: old >= 10;\nloop invariant i58: old >= 11;\nloop invariant i59: old >= 12;\nloop invariant i60: old >= 13;\nloop invariant i61: old >= 14;\nloop invariant i62: old >= 15;\nloop invariant i63: old >= 16;\nloop invariant i64: old >= 17;\nloop invariant i65: old >= 18;\nloop invariant i66: old >= 19;\nloop invariant i67: old >= 20;\nloop invariant i68: old >= 21;\nloop invariant i69: old >= 22;\nloop invariant i70: old >= 23;\nloop invariant i71: old >= 24;\nloop invariant i72: old >= 25;\nloop invariant i73: old >= 26;\nloop invariant i74: old >= 27;\nloop invariant i75: old >= 28;\nloop invariant i76: old >= 29;\nloop invariant i77: old >= 30;\nloop invariant i78: old >= 31;\nloop invariant i79: old >= 32;\nloop invariant i80: old >= 33;\nloop invariant i81: old >= 34;\nloop invariant i82: old >= 35;\nloop invariant i83: old >= 36;\nloop invariant i84: old >= 37;\nloop invariant i85: old >= 38;\nloop invariant i86: old >= 39;\nloop invariant i87: old >= 40;\nloop invariant i88: old >= 41;\nloop invariant i89: old >= 42;\nloop invariant i90: old >= 43;\nloop invariant i91: old >= 44;\nloop invariant i92: old >= 45;\nloop invariant i93: old >= 46;\nloop invariant i94: old >= 47;\nloop invariant i95: old >= 48;\nloop invariant i96: old >= 49;\nloop invariant i97: old >= 50;\nloop invariant i98: old >= 51;\nloop invariant i99: old >= 52;\nloop invariant i100: old >= 53;\nloop invariant i101: old >= 54;\nloop invariant i102: old >= 55;\nloop invariant i103: old >= 56;\nloop invariant i104: old >= 57;\nloop invariant i105: old >= 58;\nloop invariant i106: old >= 59;\nloop invariant i107: old >= 60;\nloop invariant i108: old >= 61;\nloop invariant i109: old >= 62;\nloop invariant i110: old >= 63;\nloop invariant i111: old >= 64;\nloop invariant i112: old >= 65;\nloop invariant i113: old >= 66;\nloop invariant i114: old >= 67;\nloop invariant i115: old >= 68;\nloop invariant i116: old >= 69;\nloop invariant i117: old >= 70;\nloop invariant i118: old >= 71;\nloop invariant i119: old >= 72;\nloop invariant i120: old >= 73;\nloop invariant i121: old >= 74;\nloop invariant i122: old >= 75;\nloop invariant i123: old >= 76;\nloop invariant i124: old >= 77;\nloop invariant i125: old >= 78;\nloop invariant i126: old >= 79;\nloop invariant i127: old >= 80;\nloop invariant i128: old >= 81;\nloop invariant i129: old >= 82;\nloop invariant i130: old >= 83;\nloop invariant i131: old >= 84;\nloop invariant i132: old >= 85;\nloop invariant i133: old >= 86;\nloop invariant i134: old >= 87;\nloop invariant i135: old >= 88;\nloop invariant i136: old >= 89;\nloop invariant i137: old >= 90;\nloop invariant i138: old >= 91;\nloop invariant i139: old >= 92;\nloop invariant i140: old >= 93;\nloop invariant i141: old >= 94;\nloop invariant i142: old >= 95;\nloop invariant i143: old >= 96;\nloop invariant i144: old >= 97;\nloop invariant i145: old >= 98;\nloop invariant i146: old >= 99;\nloop invariant i147: old >= 100;\nloop invariant i148: old >= 101;\nloop invariant i149: old >= 102;\nloop invariant i150: old >= 103;\nloop invariant i151: old >= 104;\nloop invariant i152: old >= 105;\nloop invariant i153: old >= 106;\nloop invariant i154: old >= 107;\nloop invariant i155: old >= 108;\nloop invariant i156: old >= 109;\nloop invariant i157: old >= 110;\nloop invariant i158: old >= 111;\nloop invariant i159: old >= 112;\nloop invariant i160: old >= 113;\nloop invariant i161: old >= 114;\nloop invariant i162: old >= 115;\nloop invariant i163: old >= 116;\nloop invariant i164: old >= 117;\nloop invariant i165: 0 <= lock; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0;\nloop invariant i166: 1 <= new <= 4294967295;\nloop invariant i167: new == old + 1;\nloop invariant i168: lock == 0 ==> new != old;\nloop invariant i169: lock == 0 ==> old == new;\nloop invariant i170: lock == 1 ==> new == old;\nloop invariant i171: lock == 0 ==> new <= old + 1;\nloop invariant i172: lock == 0 ==> new >= old;\nloop invariant i173: lock == 0 ==> new >= 0;\nloop invariant i174: lock == 0 ==> old >= 0;\nloop invariant i175: lock == 0 ==> new <= 4294967295;\nloop invariant i176: lock == 0 ==> old <= 4294967295;\nloop invariant i177: lock == 0 ==> new <= old;\nloop invariant i178: lock == 0 ==> new >= old - 1;\nloop invariant i179: lock == 0 ==> old >= new - 1;\nloop invariant i180: lock == 0 ==> new >= old + unknown_uint();\nloop invariant i181: lock == 0 ==> old >= new - unknown_uint();\nloop invariant i182: lock == 0 ==> new <= old + unknown_uint() + 1;\nloop invariant i183: lock == 0 ==> old >= new - unknown_uint() - 1;\nloop invariant i184: lock == 0 ==> new >= old + (unknown_uint() + 1) / 2;\nloop invariant i185: lock == 0 ==> old >= new - (unknown_uint() + 1) / 2;\nloop invariant i186: lock == 0 ==> new <= old + (unknown_uint() + 1) / 2 + 1;\nloop invariant i187: lock == 0 ==> old >= new - (unknown_uint() + 1) / 2 - 1;\nloop invariant i188: lock == 0 ==> new >= old + (unknown_uint() + 1) / 2 + unknown_uint();\nloop invariant i189: lock == 0 ==> old >= new - (unknown_uint() + 1) / 2 - unknown_uint();\nloop invariant i190: lock == 0 ==> new <= old + (unknown_uint() + 1) / 2 + unknown_uint() + 1;\nloop invariant i191: lock == 0 ==> old >= new - (unknown_uint() + 1) / 2 - unknown_uint() - 1;\nloop invariant i192: lock == 0 ==> new >= old + (unknown_uint() + 1) / 2 + unknown_uint() + (unknown_uint() + 1) / 2;\nloop invariant i193: lock == 0 ==> old >= new - (unknown_uint() + 1) / 2 - unknown_uint() - (unknown_uint() + 1) / 2;\nloop invariant i194: lock == 0 ==> new <= old + (unknown_uint() + 1) / 2 + unknown_uint() + (unknown_uint() + 1) / 2 + 1;\nloop invariant i195: lock == 0 ==> old >= new - (unknown_uint() + 1) / 2 - unknown_uint() - (unknown_uint() + 1) / 2 - 1;\nloop invariant i196: lock == 0 ==> new >= old + (unknown_uint() + 1) / 2 + unknown_uint() + (unknown_uint() + 1) / 2 + unknown_uint();\nloop invariant i197: lock == 0 ==> old >= new - (unknown_uint() + 1) / 2 - unknown_uint() - (unknown_uint() + 1) / 2 - unknown_uint();\nloop invariant i198: lock == 0 ==> new <= old + (unknown_uint() + 1) / 2 + unknown_uint() + (unknown_uint() + 1) / 2 + unknown_uint() + 1;\nloop invariant i199: lock == 0 ==> old >= new - (unknown_uint() + 1) / 2 - unknown_uint() - (unknown_uint() + 1) / 2 - unknown_uint() - 1;\nloop invariant i200: lock == 0 ==> new >= old + (unknown_uint() + 1) / 2 + unknown_uint() + (unknown_uint() + 1) / 2 + unknown_uint() + (unknown_uint() + 1) / 2;\nloop invariant i201: lock == 0 ==> old >= new - (unknown_uint() + 1) / 2 - unknown_uint() - (unknown_uint() + 1) / 2 - unknown_uint() - (unknown_uint() + 1) / 2;\nloop invariant i202: lock == 0 ==> new <= old + (unknown_uint() + 1) / 2 + unknown_uint() + (unknown_uint() + 1) / 2 + unknown_uint() + (unknown_uint() + 1) / 2 + 1;\nloop invariant i203: lock == 0 ==> old >= new - (unknown_uint() + 1) / 2 - unknown_uint() - (unknown_uint() + 1) / 2 - unknown_uint() - (unknown_uint() + 1) / 2 - 1;\nloop invariant i204: lock == 1 ==> new != old;\nloop invariant i205: lock == 0 ==> new == old;\nloop invariant i206: !(lock==0);\nloop invariant i207: 0 <= old <= UINT_MAX;\nloop invariant i208: lock == 0 ==> old < new;\nloop invariant i209: lock == 1 ==> lock == 1;\nloop invariant i210: lock == 0 ==> lock == 0;\nloop invariant i211: lock == 1 ==> new == old + 1;\nloop invariant i212: lock == 1;\nloop invariant i213: new >= 0;\nloop invariant i214: lock >= 0;\nloop invariant i215: lock <= 1;\nloop invariant i216: new <= old + unknown_uint();\nloop invariant i217: old <= unknown_uint();\nloop invariant i218: 0 <= new;\nloop invariant i219: lock == 1 ==> (old + 1 == new);\nloop invariant i220: lock == 0 ==> (old == new);\nloop invariant i221: lock == 0 ==> (new == old);\nloop invariant i222: lock == 0 ==> (old <= new);\nloop invariant i223: lock == 0 ==> (old + 1 <= new);\nloop invariant i224: lock == 0 ==> (old == new - 1);\nloop invariant i225: lock == 0 ==> (lock == 0);\nloop invariant i226: 0 <= old;\nloop invariant i227: 0 <= lock;\nloop invariant i228: lock == 0 ==> old == new - 1;\nloop invariant i229: lock == 1 ==> old == new - 1;\nloop invariant i230: new == old ==> lock == 0;\nloop invariant i231: new == old ==> lock == 1;\nloop invariant i232: new == old + 1 ==> lock == 0;\nloop invariant i233: new == old + 1 ==> lock == 1;\nloop invariant i234: old == new - 1 ==> lock == 0;\nloop invariant i235: old == new - 1 ==> lock == 1;\nloop invariant i236: lock == 1 ==> new >= old + 1;\nloop invariant i237: lock == 0 ==> old <= new <= old + 1;\nloop invariant i238: lock == 1 ==> old <= new <= old + 1;\nloop invariant i239: lock == 0 ==> new >= old + 1;\nloop invariant i240: lock == 1 ==> new <= old + 1;\nloop invariant i241: lock == 0 ==> old >= new;\nloop invariant i242: lock == 1 ==> old >= new;\nloop invariant i243: lock == 0 ==> old != new;\nloop invariant i244: new <= (old + 1);\nloop invariant i245: new <= (old + 1) ==> lock == 1;\nloop invariant i246: new != old ==> lock == 0;\n*/\nwhile (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new++;\n    }\n  }\n\n  {;\n//@ assert(!( lock==0 ));\n}\n\nreturn;\n\n}",
        "combined_annotation_num_solver_calls": 47,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nvoid main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  /*@\n\n\nloop invariant i3: lock == 1 ==> new >= old;\nloop invariant i4: lock == 0 ==> new == old + 1;\nloop invariant i5: lock == 1 ==> new < UINT_MAX;\nloop invariant i6: lock == 0 ==> (new == old + 1) ==> new < UINT_MAX;\nloop invariant i7: lock == 1 ==> old < UINT_MAX;\nloop invariant i8: lock == 0 ==> (new == old + 1) ==> old < UINT_MAX;\nloop invariant i9: lock == 1 ==> old <= new;\nloop invariant i10: lock == 0 ==> (new == old + 1) ==> old <= new;\nloop invariant i11: lock == 1 ==> old == new;\n\nloop invariant i13: lock == 1 ==> old == new ==> lock == 1;\n\nloop invariant i15: lock == 1 ==> lock == 1 ==> new == old;\nloop invariant i16: lock == 1 ==> lock == 1 ==> old == new;\nloop invariant i17: lock == 1 ==> lock == 1 ==> old <= new;\nloop invariant i18: lock == 1 ==> lock == 1 ==> new < UINT_MAX;\n\nloop invariant i20: lock == (new == old);\nloop invariant i21: old == (new - 1);\nloop invariant i22: 0 <= lock <= 1;\nloop invariant i23: old <= new;\nloop invariant i24: (lock == 0) ==> (new == old + 1);\nloop invariant i25: (lock == 1) ==> (old == new);\nloop invariant i26: (new != old) ==> (new == old + 1);\nloop invariant i27: (new != old) ==> (lock == 0);\nloop invariant i28: (new == old + 1) ==> (new != old);\nloop invariant i29: (old == new) ==> (new != old);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i46: new >= old;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i165: 0 <= lock; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0; loop invariant new >= old; loop invariant lock == (new != old); loop invariant old >= 0;\nloop invariant i166: 1 <= new <= 4294967295;\nloop invariant i167: new == old + 1;\nloop invariant i168: lock == 0 ==> new != old;\nloop invariant i169: lock == 0 ==> old == new;\nloop invariant i170: lock == 1 ==> new == old;\nloop invariant i171: lock == 0 ==> new <= old + 1;\nloop invariant i172: lock == 0 ==> new >= old;\nloop invariant i173: lock == 0 ==> new >= 0;\nloop invariant i174: lock == 0 ==> old >= 0;\nloop invariant i175: lock == 0 ==> new <= 4294967295;\nloop invariant i176: lock == 0 ==> old <= 4294967295;\nloop invariant i177: lock == 0 ==> new <= old;\nloop invariant i178: lock == 0 ==> new >= old - 1;\nloop invariant i179: lock == 0 ==> old >= new - 1;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i204: lock == 1 ==> new != old;\nloop invariant i205: lock == 0 ==> new == old;\nloop invariant i206: !(lock==0);\nloop invariant i207: 0 <= old <= UINT_MAX;\nloop invariant i208: lock == 0 ==> old < new;\nloop invariant i209: lock == 1 ==> lock == 1;\nloop invariant i210: lock == 0 ==> lock == 0;\nloop invariant i211: lock == 1 ==> new == old + 1;\nloop invariant i212: lock == 1;\nloop invariant i213: new >= 0;\nloop invariant i214: lock >= 0;\nloop invariant i215: lock <= 1;\n\n\nloop invariant i218: 0 <= new;\nloop invariant i219: lock == 1 ==> (old + 1 == new);\nloop invariant i220: lock == 0 ==> (old == new);\nloop invariant i221: lock == 0 ==> (new == old);\nloop invariant i222: lock == 0 ==> (old <= new);\nloop invariant i223: lock == 0 ==> (old + 1 <= new);\nloop invariant i224: lock == 0 ==> (old == new - 1);\nloop invariant i225: lock == 0 ==> (lock == 0);\nloop invariant i226: 0 <= old;\nloop invariant i227: 0 <= lock;\nloop invariant i228: lock == 0 ==> old == new - 1;\nloop invariant i229: lock == 1 ==> old == new - 1;\nloop invariant i230: new == old ==> lock == 0;\nloop invariant i231: new == old ==> lock == 1;\nloop invariant i232: new == old + 1 ==> lock == 0;\nloop invariant i233: new == old + 1 ==> lock == 1;\nloop invariant i234: old == new - 1 ==> lock == 0;\nloop invariant i235: old == new - 1 ==> lock == 1;\nloop invariant i236: lock == 1 ==> new >= old + 1;\nloop invariant i237: lock == 0 ==> old <= new <= old + 1;\nloop invariant i238: lock == 1 ==> old <= new <= old + 1;\nloop invariant i239: lock == 0 ==> new >= old + 1;\nloop invariant i240: lock == 1 ==> new <= old + 1;\nloop invariant i241: lock == 0 ==> old >= new;\nloop invariant i242: lock == 1 ==> old >= new;\nloop invariant i243: lock == 0 ==> old != new;\nloop invariant i244: new <= (old + 1);\nloop invariant i245: new <= (old + 1) ==> lock == 1;\nloop invariant i246: new != old ==> lock == 0;\n*/\nwhile (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new++;\n    }\n  }\n\n  {;\n//@ assert(!( lock==0 ));\n}\n\nreturn;\n\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c"
        ],
        "skipped": [],
        "total": 12,
        "success_count": 11,
        "failure_count": 1,
        "success_rate": 0.9166666666666666
    }
}