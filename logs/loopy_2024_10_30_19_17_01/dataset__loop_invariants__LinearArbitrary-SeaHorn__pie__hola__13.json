{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/13.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\nextern int unknown3();\nextern int unknown4();\n\nint main() {\n   int j = 2; \n   int k = 0;\n\n   int flag = unknown2();\n\n   while(unknown1()){ \n     if (flag)\n       j = j + 4;\n     else {\n       j = j + 2;\n       k = k + 1;\n     }\n   }\n   if(k!=0)\n     {;\n//@ assert(j==2*k+2);\n}\n\n   return 0;\n}",
        "success": false,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= j <= 100000;\nloop invariant k >= 0;\nloop invariant j == 2 * k + 2;\nloop invariant ((flag ==> j == j + 4) && (!flag ==> (j == j + 2) && (k == k + 1)));\nloop invariant ((flag ==> j == j + 4) && (!flag ==> (j == j + 2) && (k == k + 1)));\nloop invariant ((flag ==> j == j + 4) && (!flag ==> (j == j + 2) && (k == k + 1)));\nloop invariant ((flag ==> j == j + 4) && (!flag ==> (j == j + 2) && (k == k + 1)));\nloop invariant ((flag ==> j == j + 4) && (!flag ==> (j == j + 2) && (k == k + 1)));\nloop invariant ((flag ==> j == j + 4) && (!flag ==> (j == j + 2) && (k == k + 1)));\nloop invariant ((flag ==> j == j + 4) && (!flag ==> (j == j + 2) && (k == k + 1)));\nloop invariant ((flag ==> j == j + 4) && (!flag ==> (j == j + 2) && (k == k + 1)));\nloop invariant ((flag ==> j == j + 4) && (!flag ==> (j == j + 2) && (k == k + 1)));\nloop invariant ((flag ==> j == j + 4) && (!flag ==> (j == j + 2) && (k == k + 1)));\nloop invariant ((flag ==> j == j + 4) && (!flag ==> (j == j + 2) && (k == k + 1)));\nloop invariant ((flag ==> j == j + 4) && (!flag ==> (j == j + 2) && (k == k + 1)));\nloop invariant ((flag ==> j == j + 4) && (!flag ==> (j == j + 2) && (k == k + 1)));\nloop invariant ((flag ==> j == j + 4) && (!flag ==> (j == j + 2) && (k == k + 1)));\nloop invariant ((flag ==> j == j + 4) && (!flag ==> (j == j + 2) && (k == k + 1)));\nloop invariant ((flag ==> j == j + 4) && (!flag ==> (j == j + 2) && (k == k + 1)));\nloop invariant ((flag ==> j == j + 4) && (!flag ==> (j == j + 2) && (k == k + 1)));\nloop invariant ((flag ==> j == j + 4) && (!flag ==> (j == j + 2) && (k == k + 1)));\nloop invariant ((flag ==> j == j + 4) && (!flag ==> (j == j + 2) && (k == k + 1)));\nloop invariant ((flag ==> j == j + 4) && (!flag ==> (j == j + 2) && (k == k + 1)));\nloop invariant ((flag ==> j == j + 4) && (!flag ==> (j == j + 2) && (k == k + 1)));\nloop invariant ((flag ==> j == j + 4) && (!flag ==> (j == j + 2) && (k == k + 1)));\nloop invariant ((flag ==> j == j + 4) && (!flag ==> (j == j + 2) && (k == k + 1)));\nloop invariant ((flag ==> j == j + 4) && (!flag ==> (j == j + 2) && (k == k + 1)));\nloop invariant ((flag ==> j == j + 4) && (!flag ==> (j == j + 2) && (k == k + 1)));\nloop invariant ((flag ==> j == j + 4) && (!flag ==> (j == j + 2) && (k == k + 1)));\nloop invariant ((flag ==> j == j + 4) && (!flag ==> (j == j + 2) && (k == k + 1)));\nloop invariant ((flag ==> j == j + 4) && (!flag ==> (j == j + 2) && (k == k + 1)));\nloop invariant ((flag ==> j == j + 4) && (!flag ==> (j == j + 2) && (k == k + 1)));\n*/\n```",
            "```\n/*@\nloop invariant 0 <= j <= 2 + k * 4;\nloop invariant k >= 0;\nloop invariant flag == (j == 2);\nloop invariant (j == (k * 4 + 2)) ==> (k >= 0);\nloop invariant (j == (k * 4 + 2)) ==> (j >= 2);\nloop invariant (j == (k * 4 + 2)) ==> (j <= 2 + k * 4);\nloop invariant (j == (k * 4 + 2)) ==> (flag == (j == 2));\nloop invariant (j == (k * 4 + 2)) ==> (flag == (j == 2));\nloop invariant (j == (k * 4 + 2)) ==> (flag == (j == 2));\nloop invariant (j == (k * 4 + 2)) ==> (flag == (j == 2));\nloop invariant (j == (k * 4 + 2)) ==> (flag == (j == 2));\nloop invariant (j == (k * 4 + 2)) ==> (flag == (j == 2));\nloop invariant (j == (k * 4 + 2)) ==> (flag == (j == 2));\nloop invariant (j == (k * 4 + 2)) ==> (flag == (j == 2));\nloop invariant (j == (k * 4 + 2)) ==> (flag == (j == 2));\nloop invariant (j == (k * 4 + 2)) ==> (flag == (j == 2));\nloop invariant (j == (k * 4 + 2)) ==> (flag == (j == 2));\nloop invariant (j == (k * 4 + 2)) ==> (flag == (j == 2));\nloop invariant (j == (k * 4 + 2)) ==> (flag == (j == 2));\nloop invariant (j == (k * 4 + 2)) ==> (flag == (j == 2));\nloop invariant (j == (k * 4 + 2)) ==> (flag == (j == 2));\nloop invariant (j == (k * 4 + 2)) ==> (flag == (j == 2));\nloop invariant (j == (k * 4 + 2)) ==> (flag == (j == 2));\nloop invariant (j == (k * 4 + 2)) ==> (flag == (j == 2));\nloop invariant (j == (k * 4 + 2)) ==> (flag == (j == 2));\nloop invariant (j == (k * 4 + 2)) ==> (flag == (j == 2));\nloop invariant (j == (k * 4 + 2)) ==> (flag == (j == 2));\nloop invariant (j == (k * 4 + 2)) ==> (flag == (j == 2));\nloop invariant (j == (k * 4 + 2)) ==> (flag == (j == 2));\nloop invariant (j == (k * 4 + 2)) ==> (flag == (j == 2));\nloop invariant (j == (k * 4 + 2)) ==> (flag == (j == 2));\nloop invariant (j == (k * 4 + 2)) ==> (flag == (j == 2));\nloop invariant (j == (k * 4 + 2)) ==> (flag == (j == 2));\nloop invariant (j == (k * 4 + 2)) ==> (flag == (j == 2));\nloop invariant (j == (k * 4 + 2)) ==> (flag == (j == 2));\nloop invariant (j == (k * 4 + 2)) ==> (flag == (j == 2));\nloop invariant (j == (k * 4 + 2)) ==> (flag == (j == 2));\nloop invariant (j == (k * 4 + 2)) ==> (flag == (j == 2));\n*/\n```",
            "```\n/*@\nloop invariant 1 <= k <= unknown3();\nloop invariant flag ==> (j >= 2*k + 2);\nloop invariant !flag ==> (j >= 2*k);\nloop invariant j >= 2;\nloop invariant k >= 0;\nloop invariant k <= unknown3();\n*/\n```",
            "```\n/*@\nloop invariant 0 <= j <= 200000;\nloop invariant 0 <= k <= 100000;\nloop invariant j >= 2 * k + 2;\nloop invariant j == 2 * k + 2 ==> flag == 0;\nloop invariant j == 2 * k + 2 ==> unknown1() == 0;\nloop invariant j == 2 * k + 2 ==> unknown1() == 0 && flag == 0 ==> unknown2() == 0;\nloop invariant j == 2 * k + 2 ==> unknown1() == 0 && flag == 0 ==> unknown2() == 0 ==> unknown3() == 0;\nloop invariant j == 2 * k + 2 ==> unknown1() == 0 && flag == 0 ==> unknown2() == 0 ==> unknown3() == 0 ==> unknown4() == 0;\nloop invariant j == 2 * k + 2 ==> unknown1() == 0 && flag == 0 ==> unknown2() == 0 ==> unknown3() == 0 ==> unknown4() == 0 ==> unknown4() == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= j <= 2 * k + 4;\nloop invariant 0 <= k <= unknown1();\nloop invariant k <= j / 2;\nloop invariant j <= 2 * unknown1() + 2;\nloop invariant j >= 2;\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= j;\nloop invariant j == 2*k + 2;\nloop invariant 0 <= k;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= k; loop invariant k <= unknown1(); loop invariant j >= (2 * k) + (4 * unknown2() * (unknown1() - k)); loop invariant j <= (2 * k) + (4 * unknown2() * (unknown1() - k)) + (2 * (unknown1() - k)); loop invariant k <= unknown3(); loop invariant k <= unknown4(); loop invariant j >= (2 * k) + (4 * unknown2() * (unknown1() - k)); loop invariant j <= (2 * k) + (4 * unknown2() * (unknown1() - k)) + (2 * (unknown1() - k)); loop invariant k <= unknown3(); loop invariant k <= unknown4(); loop invariant j >= (2 * k) + (4 * unknown2() * (unknown1() - k)); loop invariant j <= (2 * k) + (4 * unknown2() * (unknown1() - k)) + (2 * (unknown1() - k)); loop invariant k <= unknown3(); loop invariant k <= unknown4(); loop invariant j >= (2 * k) + (4 * unknown2() * (unknown1() - k)); loop invariant j <= (2 * k) + (4 * unknown2() * (unknown1() - k)) + (2 * (unknown1() - k)); loop invariant k <= unknown3(); loop invariant k <= unknown4(); loop invariant j >= (2 * k) + (4 * unknown2() * (unknown1() - k)); loop invariant j <= (2 * k) + (4 * unknown2() * (unknown1() - k)) + (2 * (unknown1() - k)); loop invariant k <= unknown3(); loop invariant k <= unknown4(); loop invariant j >= (2 * k) + (4 * unknown2() * (unknown1() - k)); loop invariant j <= (2 * k) + (4 * unknown2() * (unknown1() - k)) + (2 * (unknown1() - k)); loop invariant k <= unknown3(); loop invariant k <= unknown4(); loop invariant j >= (2 * k) + (4 * unknown2() * (unknown1() - k)); loop invariant j <= (2 * k) + (4 * unknown2() * (unknown1() - k)) + (2 * (unknown1() - k)); loop invariant k <= unknown3(); loop invariant k <= unknown4(); loop invariant j >= (2 * k) + (4 * unknown2() * (unknown1() - k)); loop invariant j <= (2 * k) + (4 * unknown2() * (unknown1() - k)) + (2 * (unknown1() - k)); loop invariant k <= unknown3(); loop invariant k <= unknown4(); loop invariant j >= (2 * k) + (4 * unknown2() * (unknown1() - k)); loop invariant j <= (2 * k) + (4 * unknown2() * (unknown1() - k)) + (2 * (unknown1() - k)); loop invariant k <= unknown3(); loop invariant k <= unknown4(); loop invariant j >= (2 * k) + (4 * unknown2() * (unknown1() - k)); loop invariant j <= (2 * k) + (4 * unknown2() * (unknown1() - k)) + (2 * (unknown1() - k)); loop invariant k <= unknown3(); loop invariant k <= unknown4(); loop invariant j >= (2 * k) + (4 * unknown2() * (unknown1() - k)); loop invariant j <= (2 * k) + (4 * unknown2() * (unknown1() - k)) + (2 * (unknown1() - k)); loop invariant k <= unknown3(); loop invariant k <= unknown4(); loop invariant j >= (2 * k) + (4 * unknown2() * (unknown1() - k)); loop invariant j <= (2 * k) + (4 * unknown2() * (unknown1() - k)) + (2 * (unknown1() - k)); loop invariant k <= unknown3(); loop invariant k <= unknown4(); loop invariant j >= (2 * k) + (4 * unknown2() * (unknown1() - k)); loop invariant j <= (2 * k) + (4 * unknown2() * (unknown1() - k)) + (2 * (unknown1() - k)); loop invariant k <= unknown3(); loop invariant k <= unknown4(); loop invariant j >= (2 * k) + (4 * unknown2() * (unknown1() - k));\n*/\n```",
            "```\n/*@\nloop invariant 0 <= k <= unknown1();\nloop invariant unknown2() ==> j >= 2 + 2 * k;\nloop invariant !unknown2() ==> j >= 2 + 2 * k;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= k <= unknown3();\nloop invariant j >= 2;\nloop invariant k >= 0;\nloop invariant j <= 2*k + 2 ==> (flag == 0);\nloop invariant j <= 2*k + 2 ==> (flag == 1);\nloop invariant 0 <= k <= unknown3();\nloop invariant j >= 2;\nloop invariant k >= 0;\nloop invariant j <= 2*k + 2 ==> (flag == 0);\nloop invariant j <= 2*k + 2 ==> (flag == 1);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= k <= 100000;\nloop invariant j >= 2 * k + 2;\nloop invariant unknown1();\nloop invariant unknown2();\n*/\n```",
            "```\n/*@\nloop invariant 2 <= j <= 6;\nloop invariant 0 <= k <= j/2;\nloop invariant flag ==> (j==2*k+2);\nloop invariant !flag ==> (j==2*k+4);\nloop invariant (unknown1() ==> (2 <= j <= 6));\nloop invariant (unknown1() ==> (0 <= k <= j/2));\nloop invariant (unknown1() ==> (flag ==> (j==2*k+2)));\nloop invariant (unknown1() ==> (!flag ==> (j==2*k+4)));\n*/\n```",
            "```\n/*@\nloop invariant 0 <= k;\nloop invariant j % 2 == 0;\nloop invariant j >= 2 * k + 2;\nloop invariant j <= 2 * k + 2;\nloop invariant flag ==> j % 4 == 2;\nloop invariant !flag ==> j % 2 == 0;\nloop invariant 0 <= j;\nloop invariant 0 <= k;\nloop invariant k <= 100000;\nloop invariant j <= 100000;\nloop invariant k >= 0;\nloop invariant j >= 0;\nloop invariant unknown1() ==> k <= 100000;\nloop invariant unknown1() ==> j <= 100000;\nloop invariant unknown1() ==> j >= 0;\nloop invariant unknown1() ==> k >= 0;\nloop invariant unknown1() ==> 0 <= k;\nloop invariant unknown1() ==> j % 2 == 0;\nloop invariant unknown1() ==> j >= 2 * k + 2;\nloop invariant unknown1() ==> j <= 2 * k + 2;\nloop invariant unknown1() ==> flag ==> j % 4 == 2;\nloop invariant unknown1() ==> !flag ==> j % 2 == 0;\nloop invariant unknown1() ==> 0 <= j;\nloop invariant unknown1() ==> 0 <= k;\nloop invariant unknown1() ==> k <= 100000;\nloop invariant unknown1() ==> j <= 100000;\nloop invariant unknown1() ==> k >= 0;\nloop invariant unknown1() ==> j >= 0;\nloop invariant unknown2() ==> k <= 100000;\nloop invariant unknown2() ==> j <= 100000;\nloop invariant unknown2() ==> j >= 0;\nloop invariant unknown2() ==> k >= 0;\nloop invariant unknown2() ==> 0 <= k;\nloop invariant unknown2() ==> j % 2 == 0;\nloop invariant unknown2() ==> j >= 2 * k + 2;\nloop invariant unknown2() ==> j <= 2 * k + 2;\nloop invariant unknown2() ==> flag ==> j % 4 == 2;\nloop invariant unknown2() ==> !flag ==> j % 2 == 0;\nloop invariant unknown2() ==> 0 <= j;\nloop invariant unknown2() ==> 0 <= k;\nloop invariant unknown2() ==> k <= 100000;\nloop invariant unknown2() ==> j <= 100000;\nloop invariant unknown2() ==> k >= 0;\nloop invariant unknown2() ==> j >= 0;\nloop invariant unknown3() ==> k <= 100000;\nloop invariant unknown3() ==> j <= 100000;\nloop invariant unknown3() ==> j >= 0;\nloop invariant unknown3() ==> k >= 0;\nloop invariant unknown3() ==> 0 <= k;\nloop invariant unknown3() ==> j % 2 == 0;\nloop invariant unknown3() ==> j >= 2 * k + 2;\nloop invariant unknown3() ==> j <= 2 * k + 2;\nloop invariant unknown3() ==> flag ==> j % 4 == 2;\nloop invariant unknown3() ==> !flag ==> j % 2 == 0;\nloop invariant unknown3() ==> 0 <= j;\nloop invariant unknown3() ==> 0 <= k;\nloop invariant unknown3() ==> k <= 100000;\nloop invariant unknown3() ==> j <= 100000;\nloop invariant unknown3() ==> k >= 0;\nloop invariant unknown3() ==> j >= 0;\nloop invariant unknown4() ==> k <= 100000;\nloop invariant unknown4() ==> j <= 100000;\nloop invariant unknown4() ==> j >= 0;\nloop invariant unknown4() ==> k >= 0;\nloop invariant unknown4() ==> 0 <= k;\nloop invariant unknown4() ==> j % 2 == 0;\nloop invariant unknown4() ==> j >= 2 * k + 2;\nloop invariant unknown4() ==> j <= 2 * k + 2;\nloop invariant unknown4() ==> flag ==> j % 4 == 2;\nloop invariant unknown4() ==> !flag ==> j % 2 == 0;\nloop invariant unknown4() ==> 0 <= j;\nloop invariant unknown4() ==> 0 <= k;\nloop invariant unknown4() ==> k <= 100000;\nloop invariant unknown4() ==> j <= 100000;\nloop invariant unknown4() ==> k >= 0;\nloop invariant unknown4() ==> j >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= k;\nloop invariant 0 <= j;\nloop invariant j <= 2*k+2;\nloop invariant k >= 0;\nloop invariant j >= 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= j <= 2 * k + 2;\nloop invariant k >= 0;\nloop invariant j >= 2 * k;\nloop invariant flag ==> j >= 2 * k + 4;\nloop invariant !flag ==> j >= 2 * k + 2;\nloop invariant flag ==> k == 0;\nloop invariant !flag ==> k >= 1;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= j <= 100000;\nloop invariant k >= 0;\nloop invariant j == 2 * k + 2;\nloop invariant ((flag ==> j == j + 4) && (!flag ==> (j == j + 2) && (k == k + 1)));\nloop invariant ((flag ==> j == j + 4) && (!flag ==> (j == j + 2) && (k == k + 1)));\nloop invariant ((flag ==> j == j + 4) && (!flag ==> (j == j + 2) && (k == k + 1)));\nloop invariant ((flag ==> j == j + 4) && (!flag ==> (j == j + 2) && (k == k + 1)));\nloop invariant ((flag ==> j == j + 4) && (!flag ==> (j == j + 2) && (k == k + 1)));\nloop invariant ((flag ==> j == j + 4) && (!flag ==> (j == j + 2) && (k == k + 1)));\nloop invariant ((flag ==> j == j + 4) && (!flag ==> (j == j + 2) && (k == k + 1)));\nloop invariant ((flag ==> j == j + 4) && (!flag ==> (j == j + 2) && (k == k + 1)));\nloop invariant ((flag ==> j == j + 4) && (!flag ==> (j == j + 2) && (k == k + 1)));\nloop invariant ((flag ==> j == j + 4) && (!flag ==> (j == j + 2) && (k == k + 1)));\nloop invariant ((flag ==> j == j + 4) && (!flag ==> (j == j + 2) && (k == k + 1)));\nloop invariant ((flag ==> j == j + 4) && (!flag ==> (j == j + 2) && (k == k + 1)));\nloop invariant ((flag ==> j == j + 4) && (!flag ==> (j == j + 2) && (k == k + 1)));\nloop invariant ((flag ==> j == j + 4) && (!flag ==> (j == j + 2) && (k == k + 1)));\nloop invariant ((flag ==> j == j + 4) && (!flag ==> (j == j + 2) && (k == k + 1)));\nloop invariant ((flag ==> j == j + 4) && (!flag ==> (j == j + 2) && (k == k + 1)));\nloop invariant ((flag ==> j == j + 4) && (!flag ==> (j == j + 2) && (k == k + 1)));\nloop invariant ((flag ==> j == j + 4) && (!flag ==> (j == j + 2) && (k == k + 1)));\nloop invariant ((flag ==> j == j + 4) && (!flag ==> (j == j + 2) && (k == k + 1)));\nloop invariant ((flag ==> j == j + 4) && (!flag ==> (j == j + 2) && (k == k + 1)));\nloop invariant ((flag ==> j == j + 4) && (!flag ==> (j == j + 2) && (k == k + 1)));\nloop invariant ((flag ==> j == j + 4) && (!flag ==> (j == j + 2) && (k == k + 1)));\nloop invariant ((flag ==> j == j + 4) && (!flag ==> (j == j + 2) && (k == k + 1)));\nloop invariant ((flag ==> j == j + 4) && (!flag ==> (j == j + 2) && (k == k + 1)));\nloop invariant ((flag ==> j == j + 4) && (!flag ==> (j == j + 2) && (k == k + 1)));\nloop invariant ((flag ==> j == j + 4) && (!flag ==> (j == j + 2) && (k == k + 1)));\nloop invariant ((flag ==> j == j + 4) && (!flag ==> (j == j + 2) && (k == k + 1)));\nloop invariant ((flag ==> j == j + 4) && (!flag ==> (j == j + 2) && (k == k + 1)));\nloop invariant ((flag ==> j == j + 4) && (!flag ==> (j == j + 2) && (k == k + 1)));\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\nextern int unknown3();\nextern int unknown4();\n\nint main() {\n   int j = 2; \n   int k = 0;\n\n   int flag = unknown2();\n\n   /*@\n\nloop invariant i2: k >= 0;\n\n\n*/\nwhile(unknown1()){ \n     if (flag)\n       j = j + 4;\n     else {\n       j = j + 2;\n       k = k + 1;\n     }\n   }\n   if(k!=0)\n     {;\n//@ assert(j==2*k+2);\n}\n\n   return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= j <= 2 + k * 4;\nloop invariant k >= 0;\nloop invariant flag == (j == 2);\nloop invariant (j == (k * 4 + 2)) ==> (k >= 0);\nloop invariant (j == (k * 4 + 2)) ==> (j >= 2);\nloop invariant (j == (k * 4 + 2)) ==> (j <= 2 + k * 4);\nloop invariant (j == (k * 4 + 2)) ==> (flag == (j == 2));\nloop invariant (j == (k * 4 + 2)) ==> (flag == (j == 2));\nloop invariant (j == (k * 4 + 2)) ==> (flag == (j == 2));\nloop invariant (j == (k * 4 + 2)) ==> (flag == (j == 2));\nloop invariant (j == (k * 4 + 2)) ==> (flag == (j == 2));\nloop invariant (j == (k * 4 + 2)) ==> (flag == (j == 2));\nloop invariant (j == (k * 4 + 2)) ==> (flag == (j == 2));\nloop invariant (j == (k * 4 + 2)) ==> (flag == (j == 2));\nloop invariant (j == (k * 4 + 2)) ==> (flag == (j == 2));\nloop invariant (j == (k * 4 + 2)) ==> (flag == (j == 2));\nloop invariant (j == (k * 4 + 2)) ==> (flag == (j == 2));\nloop invariant (j == (k * 4 + 2)) ==> (flag == (j == 2));\nloop invariant (j == (k * 4 + 2)) ==> (flag == (j == 2));\nloop invariant (j == (k * 4 + 2)) ==> (flag == (j == 2));\nloop invariant (j == (k * 4 + 2)) ==> (flag == (j == 2));\nloop invariant (j == (k * 4 + 2)) ==> (flag == (j == 2));\nloop invariant (j == (k * 4 + 2)) ==> (flag == (j == 2));\nloop invariant (j == (k * 4 + 2)) ==> (flag == (j == 2));\nloop invariant (j == (k * 4 + 2)) ==> (flag == (j == 2));\nloop invariant (j == (k * 4 + 2)) ==> (flag == (j == 2));\nloop invariant (j == (k * 4 + 2)) ==> (flag == (j == 2));\nloop invariant (j == (k * 4 + 2)) ==> (flag == (j == 2));\nloop invariant (j == (k * 4 + 2)) ==> (flag == (j == 2));\nloop invariant (j == (k * 4 + 2)) ==> (flag == (j == 2));\nloop invariant (j == (k * 4 + 2)) ==> (flag == (j == 2));\nloop invariant (j == (k * 4 + 2)) ==> (flag == (j == 2));\nloop invariant (j == (k * 4 + 2)) ==> (flag == (j == 2));\nloop invariant (j == (k * 4 + 2)) ==> (flag == (j == 2));\nloop invariant (j == (k * 4 + 2)) ==> (flag == (j == 2));\nloop invariant (j == (k * 4 + 2)) ==> (flag == (j == 2));\nloop invariant (j == (k * 4 + 2)) ==> (flag == (j == 2));\nloop invariant (j == (k * 4 + 2)) ==> (flag == (j == 2));\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\nextern int unknown3();\nextern int unknown4();\n\nint main() {\n   int j = 2; \n   int k = 0;\n\n   int flag = unknown2();\n\n   /*@\n\nloop invariant i2: k >= 0;\n\nloop invariant i4: (j == (k * 4 + 2)) ==> (k >= 0);\nloop invariant i5: (j == (k * 4 + 2)) ==> (j >= 2);\nloop invariant i6: (j == (k * 4 + 2)) ==> (j <= 2 + k * 4);\n\n*/\nwhile(unknown1()){ \n     if (flag)\n       j = j + 4;\n     else {\n       j = j + 2;\n       k = k + 1;\n     }\n   }\n   if(k!=0)\n     {;\n//@ assert(j==2*k+2);\n}\n\n   return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 1 <= k <= unknown3();\nloop invariant flag ==> (j >= 2*k + 2);\nloop invariant !flag ==> (j >= 2*k);\nloop invariant j >= 2;\nloop invariant k >= 0;\nloop invariant k <= unknown3();\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\nextern int unknown3();\nextern int unknown4();\n\nint main() {\n   int j = 2; \n   int k = 0;\n\n   int flag = unknown2();\n\n   /*@\n\nloop invariant i2: flag ==> (j >= 2*k + 2);\nloop invariant i3: !flag ==> (j >= 2*k);\nloop invariant i4: j >= 2;\nloop invariant i5: k >= 0;\n\n*/\nwhile(unknown1()){ \n     if (flag)\n       j = j + 4;\n     else {\n       j = j + 2;\n       k = k + 1;\n     }\n   }\n   if(k!=0)\n     {;\n//@ assert(j==2*k+2);\n}\n\n   return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 8,
                "annotations": "```\n/*@\nloop invariant 0 <= j <= 200000;\nloop invariant 0 <= k <= 100000;\nloop invariant j >= 2 * k + 2;\nloop invariant j == 2 * k + 2 ==> flag == 0;\nloop invariant j == 2 * k + 2 ==> unknown1() == 0;\nloop invariant j == 2 * k + 2 ==> unknown1() == 0 && flag == 0 ==> unknown2() == 0;\nloop invariant j == 2 * k + 2 ==> unknown1() == 0 && flag == 0 ==> unknown2() == 0 ==> unknown3() == 0;\nloop invariant j == 2 * k + 2 ==> unknown1() == 0 && flag == 0 ==> unknown2() == 0 ==> unknown3() == 0 ==> unknown4() == 0;\nloop invariant j == 2 * k + 2 ==> unknown1() == 0 && flag == 0 ==> unknown2() == 0 ==> unknown3() == 0 ==> unknown4() == 0 ==> unknown4() == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\nextern int unknown3();\nextern int unknown4();\n\nint main() {\n   int j = 2; \n   int k = 0;\n\n   int flag = unknown2();\n\n   /*@\n\n\nloop invariant i3: j >= 2 * k + 2;\n\n\n\n\n\n\n*/\nwhile(unknown1()){ \n     if (flag)\n       j = j + 4;\n     else {\n       j = j + 2;\n       k = k + 1;\n     }\n   }\n   if(k!=0)\n     {;\n//@ assert(j==2*k+2);\n}\n\n   return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= j <= 2 * k + 4;\nloop invariant 0 <= k <= unknown1();\nloop invariant k <= j / 2;\nloop invariant j <= 2 * unknown1() + 2;\nloop invariant j >= 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\nextern int unknown3();\nextern int unknown4();\n\nint main() {\n   int j = 2; \n   int k = 0;\n\n   int flag = unknown2();\n\n   /*@\n\n\nloop invariant i3: k <= j / 2;\n\nloop invariant i5: j >= 2;\n*/\nwhile(unknown1()){ \n     if (flag)\n       j = j + 4;\n     else {\n       j = j + 2;\n       k = k + 1;\n     }\n   }\n   if(k!=0)\n     {;\n//@ assert(j==2*k+2);\n}\n\n   return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\nextern int unknown3();\nextern int unknown4();\n\nint main() {\n   int j = 2; \n   int k = 0;\n\n   int flag = unknown2();\n\n   /*@\n\n*/\nwhile(unknown1()){ \n     if (flag)\n       j = j + 4;\n     else {\n       j = j + 2;\n       k = k + 1;\n     }\n   }\n   if(k!=0)\n     {;\n//@ assert(j==2*k+2);\n}\n\n   return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= j;\nloop invariant j == 2*k + 2;\nloop invariant 0 <= k;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\nextern int unknown3();\nextern int unknown4();\n\nint main() {\n   int j = 2; \n   int k = 0;\n\n   int flag = unknown2();\n\n   /*@\nloop invariant i1: 0 <= j;\n\nloop invariant i3: 0 <= k;\n*/\nwhile(unknown1()){ \n     if (flag)\n       j = j + 4;\n     else {\n       j = j + 2;\n       k = k + 1;\n     }\n   }\n   if(k!=0)\n     {;\n//@ assert(j==2*k+2);\n}\n\n   return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 1 <= k; loop invariant k <= unknown1(); loop invariant j >= (2 * k) + (4 * unknown2() * (unknown1() - k)); loop invariant j <= (2 * k) + (4 * unknown2() * (unknown1() - k)) + (2 * (unknown1() - k)); loop invariant k <= unknown3(); loop invariant k <= unknown4(); loop invariant j >= (2 * k) + (4 * unknown2() * (unknown1() - k)); loop invariant j <= (2 * k) + (4 * unknown2() * (unknown1() - k)) + (2 * (unknown1() - k)); loop invariant k <= unknown3(); loop invariant k <= unknown4(); loop invariant j >= (2 * k) + (4 * unknown2() * (unknown1() - k)); loop invariant j <= (2 * k) + (4 * unknown2() * (unknown1() - k)) + (2 * (unknown1() - k)); loop invariant k <= unknown3(); loop invariant k <= unknown4(); loop invariant j >= (2 * k) + (4 * unknown2() * (unknown1() - k)); loop invariant j <= (2 * k) + (4 * unknown2() * (unknown1() - k)) + (2 * (unknown1() - k)); loop invariant k <= unknown3(); loop invariant k <= unknown4(); loop invariant j >= (2 * k) + (4 * unknown2() * (unknown1() - k)); loop invariant j <= (2 * k) + (4 * unknown2() * (unknown1() - k)) + (2 * (unknown1() - k)); loop invariant k <= unknown3(); loop invariant k <= unknown4(); loop invariant j >= (2 * k) + (4 * unknown2() * (unknown1() - k)); loop invariant j <= (2 * k) + (4 * unknown2() * (unknown1() - k)) + (2 * (unknown1() - k)); loop invariant k <= unknown3(); loop invariant k <= unknown4(); loop invariant j >= (2 * k) + (4 * unknown2() * (unknown1() - k)); loop invariant j <= (2 * k) + (4 * unknown2() * (unknown1() - k)) + (2 * (unknown1() - k)); loop invariant k <= unknown3(); loop invariant k <= unknown4(); loop invariant j >= (2 * k) + (4 * unknown2() * (unknown1() - k)); loop invariant j <= (2 * k) + (4 * unknown2() * (unknown1() - k)) + (2 * (unknown1() - k)); loop invariant k <= unknown3(); loop invariant k <= unknown4(); loop invariant j >= (2 * k) + (4 * unknown2() * (unknown1() - k)); loop invariant j <= (2 * k) + (4 * unknown2() * (unknown1() - k)) + (2 * (unknown1() - k)); loop invariant k <= unknown3(); loop invariant k <= unknown4(); loop invariant j >= (2 * k) + (4 * unknown2() * (unknown1() - k)); loop invariant j <= (2 * k) + (4 * unknown2() * (unknown1() - k)) + (2 * (unknown1() - k)); loop invariant k <= unknown3(); loop invariant k <= unknown4(); loop invariant j >= (2 * k) + (4 * unknown2() * (unknown1() - k)); loop invariant j <= (2 * k) + (4 * unknown2() * (unknown1() - k)) + (2 * (unknown1() - k)); loop invariant k <= unknown3(); loop invariant k <= unknown4(); loop invariant j >= (2 * k) + (4 * unknown2() * (unknown1() - k)); loop invariant j <= (2 * k) + (4 * unknown2() * (unknown1() - k)) + (2 * (unknown1() - k)); loop invariant k <= unknown3(); loop invariant k <= unknown4(); loop invariant j >= (2 * k) + (4 * unknown2() * (unknown1() - k)); loop invariant j <= (2 * k) + (4 * unknown2() * (unknown1() - k)) + (2 * (unknown1() - k)); loop invariant k <= unknown3(); loop invariant k <= unknown4(); loop invariant j >= (2 * k) + (4 * unknown2() * (unknown1() - k));\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\nextern int unknown3();\nextern int unknown4();\n\nint main() {\n   int j = 2; \n   int k = 0;\n\n   int flag = unknown2();\n\n   /*@\n\n*/\nwhile(unknown1()){ \n     if (flag)\n       j = j + 4;\n     else {\n       j = j + 2;\n       k = k + 1;\n     }\n   }\n   if(k!=0)\n     {;\n//@ assert(j==2*k+2);\n}\n\n   return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= k <= unknown1();\nloop invariant unknown2() ==> j >= 2 + 2 * k;\nloop invariant !unknown2() ==> j >= 2 + 2 * k;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\nextern int unknown3();\nextern int unknown4();\n\nint main() {\n   int j = 2; \n   int k = 0;\n\n   int flag = unknown2();\n\n   /*@\n\n\n\n*/\nwhile(unknown1()){ \n     if (flag)\n       j = j + 4;\n     else {\n       j = j + 2;\n       k = k + 1;\n     }\n   }\n   if(k!=0)\n     {;\n//@ assert(j==2*k+2);\n}\n\n   return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= k <= unknown3();\nloop invariant j >= 2;\nloop invariant k >= 0;\nloop invariant j <= 2*k + 2 ==> (flag == 0);\nloop invariant j <= 2*k + 2 ==> (flag == 1);\nloop invariant 0 <= k <= unknown3();\nloop invariant j >= 2;\nloop invariant k >= 0;\nloop invariant j <= 2*k + 2 ==> (flag == 0);\nloop invariant j <= 2*k + 2 ==> (flag == 1);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\nextern int unknown3();\nextern int unknown4();\n\nint main() {\n   int j = 2; \n   int k = 0;\n\n   int flag = unknown2();\n\n   /*@\n\nloop invariant i2: j >= 2;\nloop invariant i3: k >= 0;\n\n\n*/\nwhile(unknown1()){ \n     if (flag)\n       j = j + 4;\n     else {\n       j = j + 2;\n       k = k + 1;\n     }\n   }\n   if(k!=0)\n     {;\n//@ assert(j==2*k+2);\n}\n\n   return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= k <= 100000;\nloop invariant j >= 2 * k + 2;\nloop invariant unknown1();\nloop invariant unknown2();\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\nextern int unknown3();\nextern int unknown4();\n\nint main() {\n   int j = 2; \n   int k = 0;\n\n   int flag = unknown2();\n\n   /*@\n\nloop invariant i2: j >= 2 * k + 2;\n\n\n*/\nwhile(unknown1()){ \n     if (flag)\n       j = j + 4;\n     else {\n       j = j + 2;\n       k = k + 1;\n     }\n   }\n   if(k!=0)\n     {;\n//@ assert(j==2*k+2);\n}\n\n   return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 2 <= j <= 6;\nloop invariant 0 <= k <= j/2;\nloop invariant flag ==> (j==2*k+2);\nloop invariant !flag ==> (j==2*k+4);\nloop invariant (unknown1() ==> (2 <= j <= 6));\nloop invariant (unknown1() ==> (0 <= k <= j/2));\nloop invariant (unknown1() ==> (flag ==> (j==2*k+2)));\nloop invariant (unknown1() ==> (!flag ==> (j==2*k+4)));\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\nextern int unknown3();\nextern int unknown4();\n\nint main() {\n   int j = 2; \n   int k = 0;\n\n   int flag = unknown2();\n\n   /*@\n\n\n\n\n\n\n\n\n*/\nwhile(unknown1()){ \n     if (flag)\n       j = j + 4;\n     else {\n       j = j + 2;\n       k = k + 1;\n     }\n   }\n   if(k!=0)\n     {;\n//@ assert(j==2*k+2);\n}\n\n   return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 47,
                "annotations": "```\n/*@\nloop invariant 0 <= k;\nloop invariant j % 2 == 0;\nloop invariant j >= 2 * k + 2;\nloop invariant j <= 2 * k + 2;\nloop invariant flag ==> j % 4 == 2;\nloop invariant !flag ==> j % 2 == 0;\nloop invariant 0 <= j;\nloop invariant 0 <= k;\nloop invariant k <= 100000;\nloop invariant j <= 100000;\nloop invariant k >= 0;\nloop invariant j >= 0;\nloop invariant unknown1() ==> k <= 100000;\nloop invariant unknown1() ==> j <= 100000;\nloop invariant unknown1() ==> j >= 0;\nloop invariant unknown1() ==> k >= 0;\nloop invariant unknown1() ==> 0 <= k;\nloop invariant unknown1() ==> j % 2 == 0;\nloop invariant unknown1() ==> j >= 2 * k + 2;\nloop invariant unknown1() ==> j <= 2 * k + 2;\nloop invariant unknown1() ==> flag ==> j % 4 == 2;\nloop invariant unknown1() ==> !flag ==> j % 2 == 0;\nloop invariant unknown1() ==> 0 <= j;\nloop invariant unknown1() ==> 0 <= k;\nloop invariant unknown1() ==> k <= 100000;\nloop invariant unknown1() ==> j <= 100000;\nloop invariant unknown1() ==> k >= 0;\nloop invariant unknown1() ==> j >= 0;\nloop invariant unknown2() ==> k <= 100000;\nloop invariant unknown2() ==> j <= 100000;\nloop invariant unknown2() ==> j >= 0;\nloop invariant unknown2() ==> k >= 0;\nloop invariant unknown2() ==> 0 <= k;\nloop invariant unknown2() ==> j % 2 == 0;\nloop invariant unknown2() ==> j >= 2 * k + 2;\nloop invariant unknown2() ==> j <= 2 * k + 2;\nloop invariant unknown2() ==> flag ==> j % 4 == 2;\nloop invariant unknown2() ==> !flag ==> j % 2 == 0;\nloop invariant unknown2() ==> 0 <= j;\nloop invariant unknown2() ==> 0 <= k;\nloop invariant unknown2() ==> k <= 100000;\nloop invariant unknown2() ==> j <= 100000;\nloop invariant unknown2() ==> k >= 0;\nloop invariant unknown2() ==> j >= 0;\nloop invariant unknown3() ==> k <= 100000;\nloop invariant unknown3() ==> j <= 100000;\nloop invariant unknown3() ==> j >= 0;\nloop invariant unknown3() ==> k >= 0;\nloop invariant unknown3() ==> 0 <= k;\nloop invariant unknown3() ==> j % 2 == 0;\nloop invariant unknown3() ==> j >= 2 * k + 2;\nloop invariant unknown3() ==> j <= 2 * k + 2;\nloop invariant unknown3() ==> flag ==> j % 4 == 2;\nloop invariant unknown3() ==> !flag ==> j % 2 == 0;\nloop invariant unknown3() ==> 0 <= j;\nloop invariant unknown3() ==> 0 <= k;\nloop invariant unknown3() ==> k <= 100000;\nloop invariant unknown3() ==> j <= 100000;\nloop invariant unknown3() ==> k >= 0;\nloop invariant unknown3() ==> j >= 0;\nloop invariant unknown4() ==> k <= 100000;\nloop invariant unknown4() ==> j <= 100000;\nloop invariant unknown4() ==> j >= 0;\nloop invariant unknown4() ==> k >= 0;\nloop invariant unknown4() ==> 0 <= k;\nloop invariant unknown4() ==> j % 2 == 0;\nloop invariant unknown4() ==> j >= 2 * k + 2;\nloop invariant unknown4() ==> j <= 2 * k + 2;\nloop invariant unknown4() ==> flag ==> j % 4 == 2;\nloop invariant unknown4() ==> !flag ==> j % 2 == 0;\nloop invariant unknown4() ==> 0 <= j;\nloop invariant unknown4() ==> 0 <= k;\nloop invariant unknown4() ==> k <= 100000;\nloop invariant unknown4() ==> j <= 100000;\nloop invariant unknown4() ==> k >= 0;\nloop invariant unknown4() ==> j >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\nextern int unknown3();\nextern int unknown4();\n\nint main() {\n   int j = 2; \n   int k = 0;\n\n   int flag = unknown2();\n\n   /*@\nloop invariant i1: 0 <= k;\nloop invariant i2: j % 2 == 0;\nloop invariant i3: j >= 2 * k + 2;\n\nloop invariant i5: flag ==> j % 4 == 2;\nloop invariant i6: !flag ==> j % 2 == 0;\nloop invariant i7: 0 <= j;\n\n\nloop invariant i10: k >= 0;\nloop invariant i11: j >= 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile(unknown1()){ \n     if (flag)\n       j = j + 4;\n     else {\n       j = j + 2;\n       k = k + 1;\n     }\n   }\n   if(k!=0)\n     {;\n//@ assert(j==2*k+2);\n}\n\n   return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= k;\nloop invariant 0 <= j;\nloop invariant j <= 2*k+2;\nloop invariant k >= 0;\nloop invariant j >= 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\nextern int unknown3();\nextern int unknown4();\n\nint main() {\n   int j = 2; \n   int k = 0;\n\n   int flag = unknown2();\n\n   /*@\nloop invariant i1: 0 <= k;\nloop invariant i2: 0 <= j;\n\nloop invariant i4: k >= 0;\nloop invariant i5: j >= 2;\n*/\nwhile(unknown1()){ \n     if (flag)\n       j = j + 4;\n     else {\n       j = j + 2;\n       k = k + 1;\n     }\n   }\n   if(k!=0)\n     {;\n//@ assert(j==2*k+2);\n}\n\n   return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= j <= 2 * k + 2;\nloop invariant k >= 0;\nloop invariant j >= 2 * k;\nloop invariant flag ==> j >= 2 * k + 4;\nloop invariant !flag ==> j >= 2 * k + 2;\nloop invariant flag ==> k == 0;\nloop invariant !flag ==> k >= 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\nextern int unknown3();\nextern int unknown4();\n\nint main() {\n   int j = 2; \n   int k = 0;\n\n   int flag = unknown2();\n\n   /*@\n\nloop invariant i2: k >= 0;\nloop invariant i3: j >= 2 * k;\n\nloop invariant i5: !flag ==> j >= 2 * k + 2;\nloop invariant i6: flag ==> k == 0;\n\n*/\nwhile(unknown1()){ \n     if (flag)\n       j = j + 4;\n     else {\n       j = j + 2;\n       k = k + 1;\n     }\n   }\n   if(k!=0)\n     {;\n//@ assert(j==2*k+2);\n}\n\n   return 0;\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 29: unexpected token ')'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\nextern int unknown3();\nextern int unknown4();\n\nint main() {\n   int j = 2; \n   int k = 0;\n\n   int flag = unknown2();\n\n   /*@\nloop invariant i1: 0 <= j <= 100000;\nloop invariant i2: k >= 0;\nloop invariant i3: j == 2 * k + 2;\nloop invariant i4: ((flag ==> j == j + 4) && (!flag ==> (j == j + 2) && (k == k + 1)));\nloop invariant i5: 0 <= j <= 2 + k * 4;\nloop invariant i6: flag == (j == 2);\nloop invariant i7: (j == (k * 4 + 2)) ==> (k >= 0);\nloop invariant i8: (j == (k * 4 + 2)) ==> (j >= 2);\nloop invariant i9: (j == (k * 4 + 2)) ==> (j <= 2 + k * 4);\nloop invariant i10: (j == (k * 4 + 2)) ==> (flag == (j == 2));\nloop invariant i11: 1 <= k <= unknown3();\nloop invariant i12: flag ==> (j >= 2*k + 2);\nloop invariant i13: !flag ==> (j >= 2*k);\nloop invariant i14: j >= 2;\nloop invariant i15: k <= unknown3();\nloop invariant i16: 0 <= j <= 200000;\nloop invariant i17: 0 <= k <= 100000;\nloop invariant i18: j >= 2 * k + 2;\nloop invariant i19: j == 2 * k + 2 ==> flag == 0;\nloop invariant i20: j == 2 * k + 2 ==> unknown1() == 0;\nloop invariant i21: j == 2 * k + 2 ==> unknown1() == 0 && flag == 0 ==> unknown2() == 0;\nloop invariant i22: j == 2 * k + 2 ==> unknown1() == 0 && flag == 0 ==> unknown2() == 0 ==> unknown3() == 0;\nloop invariant i23: j == 2 * k + 2 ==> unknown1() == 0 && flag == 0 ==> unknown2() == 0 ==> unknown3() == 0 ==> unknown4() == 0;\nloop invariant i24: j == 2 * k + 2 ==> unknown1() == 0 && flag == 0 ==> unknown2() == 0 ==> unknown3() == 0 ==> unknown4() == 0 ==> unknown4() == 0;\nloop invariant i25: 0 <= j <= 2 * k + 4;\nloop invariant i26: 0 <= k <= unknown1();\nloop invariant i27: k <= j / 2;\nloop invariant i28: j <= 2 * unknown1() + 2;\nloop invariant i29: 0 <= j;\nloop invariant i30: j == 2*k + 2;\nloop invariant i31: 0 <= k;\nloop invariant i32: 1 <= k; loop invariant k <= unknown1(); loop invariant j >= (2 * k) + (4 * unknown2() * (unknown1() - k)); loop invariant j <= (2 * k) + (4 * unknown2() * (unknown1() - k)) + (2 * (unknown1() - k)); loop invariant k <= unknown3(); loop invariant k <= unknown4(); loop invariant j >= (2 * k) + (4 * unknown2() * (unknown1() - k)); loop invariant j <= (2 * k) + (4 * unknown2() * (unknown1() - k)) + (2 * (unknown1() - k)); loop invariant k <= unknown3(); loop invariant k <= unknown4(); loop invariant j >= (2 * k) + (4 * unknown2() * (unknown1() - k)); loop invariant j <= (2 * k) + (4 * unknown2() * (unknown1() - k)) + (2 * (unknown1() - k)); loop invariant k <= unknown3(); loop invariant k <= unknown4(); loop invariant j >= (2 * k) + (4 * unknown2() * (unknown1() - k)); loop invariant j <= (2 * k) + (4 * unknown2() * (unknown1() - k)) + (2 * (unknown1() - k)); loop invariant k <= unknown3(); loop invariant k <= unknown4(); loop invariant j >= (2 * k) + (4 * unknown2() * (unknown1() - k)); loop invariant j <= (2 * k) + (4 * unknown2() * (unknown1() - k)) + (2 * (unknown1() - k)); loop invariant k <= unknown3(); loop invariant k <= unknown4(); loop invariant j >= (2 * k) + (4 * unknown2() * (unknown1() - k)); loop invariant j <= (2 * k) + (4 * unknown2() * (unknown1() - k)) + (2 * (unknown1() - k)); loop invariant k <= unknown3(); loop invariant k <= unknown4(); loop invariant j >= (2 * k) + (4 * unknown2() * (unknown1() - k)); loop invariant j <= (2 * k) + (4 * unknown2() * (unknown1() - k)) + (2 * (unknown1() - k)); loop invariant k <= unknown3(); loop invariant k <= unknown4(); loop invariant j >= (2 * k) + (4 * unknown2() * (unknown1() - k)); loop invariant j <= (2 * k) + (4 * unknown2() * (unknown1() - k)) + (2 * (unknown1() - k)); loop invariant k <= unknown3(); loop invariant k <= unknown4(); loop invariant j >= (2 * k) + (4 * unknown2() * (unknown1() - k)); loop invariant j <= (2 * k) + (4 * unknown2() * (unknown1() - k)) + (2 * (unknown1() - k)); loop invariant k <= unknown3(); loop invariant k <= unknown4(); loop invariant j >= (2 * k) + (4 * unknown2() * (unknown1() - k)); loop invariant j <= (2 * k) + (4 * unknown2() * (unknown1() - k)) + (2 * (unknown1() - k)); loop invariant k <= unknown3(); loop invariant k <= unknown4(); loop invariant j >= (2 * k) + (4 * unknown2() * (unknown1() - k)); loop invariant j <= (2 * k) + (4 * unknown2() * (unknown1() - k)) + (2 * (unknown1() - k)); loop invariant k <= unknown3(); loop invariant k <= unknown4(); loop invariant j >= (2 * k) + (4 * unknown2() * (unknown1() - k)); loop invariant j <= (2 * k) + (4 * unknown2() * (unknown1() - k)) + (2 * (unknown1() - k)); loop invariant k <= unknown3(); loop invariant k <= unknown4(); loop invariant j >= (2 * k) + (4 * unknown2() * (unknown1() - k)); loop invariant j <= (2 * k) + (4 * unknown2() * (unknown1() - k)) + (2 * (unknown1() - k)); loop invariant k <= unknown3(); loop invariant k <= unknown4(); loop invariant j >= (2 * k) + (4 * unknown2() * (unknown1() - k));\nloop invariant i33: unknown2() ==> j >= 2 + 2 * k;\nloop invariant i34: !unknown2() ==> j >= 2 + 2 * k;\nloop invariant i35: 0 <= k <= unknown3();\nloop invariant i36: j <= 2*k + 2 ==> (flag == 0);\nloop invariant i37: j <= 2*k + 2 ==> (flag == 1);\nloop invariant i38: unknown1();\nloop invariant i39: unknown2();\nloop invariant i40: 2 <= j <= 6;\nloop invariant i41: 0 <= k <= j/2;\nloop invariant i42: flag ==> (j==2*k+2);\nloop invariant i43: !flag ==> (j==2*k+4);\nloop invariant i44: (unknown1() ==> (2 <= j <= 6));\nloop invariant i45: (unknown1() ==> (0 <= k <= j/2));\nloop invariant i46: (unknown1() ==> (flag ==> (j==2*k+2)));\nloop invariant i47: (unknown1() ==> (!flag ==> (j==2*k+4)));\nloop invariant i48: j % 2 == 0;\nloop invariant i49: j <= 2 * k + 2;\nloop invariant i50: flag ==> j % 4 == 2;\nloop invariant i51: !flag ==> j % 2 == 0;\nloop invariant i52: k <= 100000;\nloop invariant i53: j <= 100000;\nloop invariant i54: j >= 0;\nloop invariant i55: unknown1() ==> k <= 100000;\nloop invariant i56: unknown1() ==> j <= 100000;\nloop invariant i57: unknown1() ==> j >= 0;\nloop invariant i58: unknown1() ==> k >= 0;\nloop invariant i59: unknown1() ==> 0 <= k;\nloop invariant i60: unknown1() ==> j % 2 == 0;\nloop invariant i61: unknown1() ==> j >= 2 * k + 2;\nloop invariant i62: unknown1() ==> j <= 2 * k + 2;\nloop invariant i63: unknown1() ==> flag ==> j % 4 == 2;\nloop invariant i64: unknown1() ==> !flag ==> j % 2 == 0;\nloop invariant i65: unknown1() ==> 0 <= j;\nloop invariant i66: unknown2() ==> k <= 100000;\nloop invariant i67: unknown2() ==> j <= 100000;\nloop invariant i68: unknown2() ==> j >= 0;\nloop invariant i69: unknown2() ==> k >= 0;\nloop invariant i70: unknown2() ==> 0 <= k;\nloop invariant i71: unknown2() ==> j % 2 == 0;\nloop invariant i72: unknown2() ==> j >= 2 * k + 2;\nloop invariant i73: unknown2() ==> j <= 2 * k + 2;\nloop invariant i74: unknown2() ==> flag ==> j % 4 == 2;\nloop invariant i75: unknown2() ==> !flag ==> j % 2 == 0;\nloop invariant i76: unknown2() ==> 0 <= j;\nloop invariant i77: unknown3() ==> k <= 100000;\nloop invariant i78: unknown3() ==> j <= 100000;\nloop invariant i79: unknown3() ==> j >= 0;\nloop invariant i80: unknown3() ==> k >= 0;\nloop invariant i81: unknown3() ==> 0 <= k;\nloop invariant i82: unknown3() ==> j % 2 == 0;\nloop invariant i83: unknown3() ==> j >= 2 * k + 2;\nloop invariant i84: unknown3() ==> j <= 2 * k + 2;\nloop invariant i85: unknown3() ==> flag ==> j % 4 == 2;\nloop invariant i86: unknown3() ==> !flag ==> j % 2 == 0;\nloop invariant i87: unknown3() ==> 0 <= j;\nloop invariant i88: unknown4() ==> k <= 100000;\nloop invariant i89: unknown4() ==> j <= 100000;\nloop invariant i90: unknown4() ==> j >= 0;\nloop invariant i91: unknown4() ==> k >= 0;\nloop invariant i92: unknown4() ==> 0 <= k;\nloop invariant i93: unknown4() ==> j % 2 == 0;\nloop invariant i94: unknown4() ==> j >= 2 * k + 2;\nloop invariant i95: unknown4() ==> j <= 2 * k + 2;\nloop invariant i96: unknown4() ==> flag ==> j % 4 == 2;\nloop invariant i97: unknown4() ==> !flag ==> j % 2 == 0;\nloop invariant i98: unknown4() ==> 0 <= j;\nloop invariant i99: j <= 2*k+2;\nloop invariant i100: 0 <= j <= 2 * k + 2;\nloop invariant i101: j >= 2 * k;\nloop invariant i102: flag ==> j >= 2 * k + 4;\nloop invariant i103: !flag ==> j >= 2 * k + 2;\nloop invariant i104: flag ==> k == 0;\nloop invariant i105: !flag ==> k >= 1;\n*/\nwhile(unknown1()){ \n     if (flag)\n       j = j + 4;\n     else {\n       j = j + 2;\n       k = k + 1;\n     }\n   }\n   if(k!=0)\n     {;\n//@ assert(j==2*k+2);\n}\n\n   return 0;\n}",
        "combined_annotation_num_solver_calls": 77,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\nextern int unknown3();\nextern int unknown4();\n\nint main() {\n   int j = 2; \n   int k = 0;\n\n   int flag = unknown2();\n\n   /*@\n\nloop invariant i2: k >= 0;\n\n\n\n\nloop invariant i7: (j == (k * 4 + 2)) ==> (k >= 0);\nloop invariant i8: (j == (k * 4 + 2)) ==> (j >= 2);\nloop invariant i9: (j == (k * 4 + 2)) ==> (j <= 2 + k * 4);\n\n\nloop invariant i12: flag ==> (j >= 2*k + 2);\nloop invariant i13: !flag ==> (j >= 2*k);\nloop invariant i14: j >= 2;\n\n\n\nloop invariant i18: j >= 2 * k + 2;\n\n\n\n\n\n\n\n\nloop invariant i27: k <= j / 2;\n\nloop invariant i29: 0 <= j;\n\nloop invariant i31: 0 <= k;\n\n\n\n\n\n\n\n\n\nloop invariant i41: 0 <= k <= j/2;\n\n\n\n\n\n\nloop invariant i48: j % 2 == 0;\n\nloop invariant i50: flag ==> j % 4 == 2;\nloop invariant i51: !flag ==> j % 2 == 0;\n\n\nloop invariant i54: j >= 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i101: j >= 2 * k;\n\nloop invariant i103: !flag ==> j >= 2 * k + 2;\nloop invariant i104: flag ==> k == 0;\n\n*/\nwhile(unknown1()){ \n     if (flag)\n       j = j + 4;\n     else {\n       j = j + 2;\n       k = k + 1;\n     }\n   }\n   if(k!=0)\n     {;\n//@ assert(j==2*k+2);\n}\n\n   return 0;\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/split.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/11.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/13.c"
        ],
        "skipped": [],
        "total": 108,
        "success_count": 91,
        "failure_count": 17,
        "success_rate": 0.8425925925925926
    }
}