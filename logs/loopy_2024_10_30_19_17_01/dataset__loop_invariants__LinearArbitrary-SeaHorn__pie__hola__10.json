{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/10.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown2();\n\nvoid main() {\n\n\tint w = 1;\n\tint z = 0;\n\tint x= 0;\n\tint y=0;\n\n         while(unknown2()){\n\t    if(w) {\n\t\tx++; \n\t\tw=!w;\n\t    };\n\t    if(!z) {\n\t\ty++; \n\t\tz=!z;\n\t    };\n\t}\n\n\t{;\n//@ assert(x==y);\n}\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= w <= 1;\nloop invariant 0 <= z <= 1;\nloop invariant 0 <= x <= 1;\nloop invariant 0 <= y <= 1;\nloop invariant x == y;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= w <= 2;\nloop invariant 0 <= z <= 1;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant x == y ==> w == 1;\nloop invariant x == y ==> z == 0;\nloop invariant x == y ==> x == y;\nloop invariant x == y ==> x == y;\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= z <= 1;\nloop invariant 0 <= x <= y;\nloop invariant w + z == 1;\nloop invariant w == !z;\nloop invariant x >= y - 1;\nloop invariant y >= x - 1;\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= 100000;\nloop invariant y >= 0;\nloop invariant w >= 0;\nloop invariant z >= 0;\nloop invariant x <= y;\nloop invariant y <= 100000;\nloop invariant w <= 1;\nloop invariant z <= 1;\nloop invariant x - y <= 1;\nloop invariant y - x <= 1;\nloop invariant x - y >= -1;\nloop invariant y - x >= -1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant w >= 0;\nloop invariant z >= 0;\nloop invariant x <= y;\nloop invariant y <= 100000;\nloop invariant w <= 1;\nloop invariant z <= 1;\nloop invariant x - y <= 1;\nloop invariant y - x <= 1;\nloop invariant x - y >= -1;\nloop invariant y - x >= -1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant w >= 0;\nloop invariant z >= 0;\nloop invariant x <= y;\nloop invariant y <= 100000;\nloop invariant w <= 1;\nloop invariant z <= 1;\nloop invariant x - y <= 1;\nloop invariant y - x <= 1;\nloop invariant x - y >= -1;\nloop invariant y - x >= -1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant w >= 0;\nloop invariant z >= 0;\nloop invariant x <= y;\nloop invariant y <= 100000;\nloop invariant w <= 1;\nloop invariant z <= 1;\nloop invariant x - y <= 1;\nloop invariant y - x <= 1;\nloop invariant x - y >= -1;\nloop invariant y - x >= -1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant w >= 0;\nloop invariant z >= 0;\nloop invariant x <= y;\nloop invariant y <= 100000;\nloop invariant w <= 1;\nloop invariant z <= 1;\nloop invariant x - y <= 1;\nloop invariant y - x <= 1;\nloop invariant x - y >= -1;\nloop invariant y - x >= -1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant w >= 0;\nloop invariant z >= 0;\nloop invariant x <= y;\nloop invariant y <= 100000;\nloop invariant w <= 1;\nloop invariant z <= 1;\nloop invariant x - y <= 1;\nloop invariant y - x <= 1;\nloop invariant x - y >= -1;\nloop invariant y - x >= -1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant w >= 0;\nloop invariant z >= 0;\nloop invariant x <= y;\nloop invariant y <= 100000;\nloop invariant w <= 1;\nloop invariant z <= 1;\nloop invariant x - y <= 1;\nloop invariant y - x <= 1;\nloop invariant x - y >= -1;\nloop invariant y - x >= -1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant w >= 0;\nloop invariant z >= 0;\nloop invariant x <= y;\nloop invariant y <= 100000;\nloop invariant w <= 1;\nloop invariant z <= 1;\nloop invariant x - y <= 1;\nloop invariant y - x <= 1;\nloop invariant x - y >= -1;\nloop invariant y - x >= -1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant w >= 0;\nloop invariant z >= 0;\nloop invariant x <= y;\nloop invariant y <= 100000;\nloop invariant w <= 1;\nloop invariant z <= 1;\nloop invariant x - y <= 1;\nloop invariant y - x <= 1;\nloop invariant x - y >= -1;\nloop invariant y - x >= -1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant w >= 0;\nloop invariant z >= 0;\nloop invariant x <= y;\nloop invariant y <= 100000;\nloop invariant w <= 1;\nloop invariant z <= 1;\nloop invariant x - y <= 1;\nloop invariant y - x <= 1;\nloop invariant x - y >= -1;\nloop invariant y - x >= -1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant w >= 0;\nloop invariant z >= 0;\n*/\n```",
            "```\n/*@\nloop invariant y <= z;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant x <= y;\nloop invariant x <= y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= z <= 1;\nloop invariant 0 <= w <= 1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x == y ==> w == !z;\nloop invariant x != y ==> w == z;\nloop invariant x == y ==> z == !w;\nloop invariant x != y ==> z == w;\nloop invariant x == y ==> z == w;\nloop invariant x != y ==> z == !w;\nloop invariant x == y ==> w == z;\nloop invariant x != y ==> w == !z;\nloop invariant x == y ==> z == !w;\nloop invariant x != y ==> w == z;\nloop invariant x == y ==> z == w;\nloop invariant x != y ==> w == !z;\nloop invariant x == y ==> z == !w;\nloop invariant x != y ==> w == z;\nloop invariant x == y ==> z == w;\nloop invariant x != y ==> w == !z;\nloop invariant x == y ==> z == !w;\nloop invariant x != y ==> w == z;\nloop invariant x == y ==> z == w;\nloop invariant x != y ==> w == !z;\nloop invariant x == y ==> z == !w;\nloop invariant x != y ==> w == z;\nloop invariant x == y ==> z == w;\nloop invariant x != y ==> w == !z;\nloop invariant x == y ==> z == !w;\nloop invariant x != y ==> w == z;\nloop invariant x == y ==> z == w;\nloop invariant x != y ==> w == !z;\nloop invariant x == y ==> z == !w;\nloop invariant x != y ==> w == z;\nloop invariant x == y ==> z == w;\nloop invariant x != y ==> w == !z;\nloop invariant x == y ==> z == !w;\nloop invariant x != y ==> w == z;\nloop invariant x == y ==> z == w;\nloop invariant x != y ==> w == !z;\nloop invariant x == y ==> z == !w;\nloop invariant x != y ==> w == z;\nloop invariant x == y ==> z == w;\nloop invariant x != y ==> w == !z;\nloop invariant x == y ==> z == !w;\nloop invariant x != y ==> w == z;\nloop invariant x == y ==> z == w;\nloop invariant x != y ==> w == !z;\nloop invariant x == y ==> z == !w;\nloop invariant x != y ==> w == z;\nloop invariant x == y ==> z == w;\nloop invariant x != y ==> w == !z;\nloop invariant x == y ==> z == !w;\nloop invariant x != y ==> w == z;\nloop invariant x == y ==> z == w;\nloop invariant x != y ==> w == !z;\nloop invariant x == y ==> z == !w;\nloop invariant x != y ==> w == z;\nloop invariant x == y ==> z == w;\nloop invariant x != y ==> w == !z;\nloop invariant x == y ==> z == !w;\nloop invariant x != y ==> w == z;\nloop invariant x == y ==> z == w;\nloop invariant x != y ==> w == !z;\nloop invariant x == y ==> z == !w;\nloop invariant x != y ==> w == z;\nloop invariant x == y ==> z == w;\nloop invariant x != y ==> w == !z;\nloop invariant x == y ==> z == !w;\nloop invariant x != y ==> w == z;\nloop invariant x == y ==> z == w;\nloop invariant x != y ==> w == !z;\nloop invariant x == y ==> z == !w;\nloop invariant x != y ==> w == z;\nloop invariant x == y ==> z == w;\nloop invariant x != y ==> w == !z;\nloop invariant x == y ==> z == !w;\nloop invariant x != y ==> w == z;\nloop invariant x == y ==> z == w;\nloop invariant x != y ==> w == !z;\nloop invariant x == y ==> z == !w;\nloop invariant x != y ==> w == z;\nloop invariant x == y ==> z == w;\nloop invariant x != y ==> w == !z;\nloop invariant x == y ==> z == !w;\nloop invariant x != y ==> w == z;\nloop invariant x == y ==> z == w;\nloop invariant x != y ==> w == !z;\nloop invariant x == y ==> z == !w;\nloop invariant x != y ==> w == z;\nloop invariant x == y ==> z == w;\nloop invariant x != y ==> w == !z;\nloop invariant x == y ==> z == !w;\nloop invariant x != y ==> w == z;\nloop invariant x == y ==> z == w;\nloop invariant x != y ==> w == !z;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= w <= 2;\nloop invariant 0 <= z <= 1;\nloop invariant 0 <= x <= 1;\nloop invariant 0 <= y <= 1;\nloop invariant (if !(unknown2()) ==> x == y);\nloop invariant (if (w == 1) ==> x == y);\nloop invariant (if (w == 0) ==> x == y);\nloop invariant (if (z == 1) ==> x == y);\nloop invariant (if (z == 0) ==> x == y);\nloop invariant (if (unknown2()) ==> x == y);\nloop invariant (if (x == y) ==> x == y);\n*/\n```",
            "```\n/*@\nloop invariant w = !z;\nloop invariant y >= 0;\nloop invariant z ==> y = z + 1;\nloop invariant !z ==> y = 0;\nloop invariant x >= 0;\nloop invariant w ==> x = x + 1;\nloop invariant !w ==> x = 0;\nloop invariant x + y >= 0;\nloop invariant w ==> x + y = x + 1 + y;\nloop invariant !w ==> x + y = x + y;\nloop invariant w ==> x + y = x + 1 + y;\nloop invariant !w ==> x + y = x + y;\nloop invariant x + y >= 0;\nloop invariant w ==> x + y = x + 1 + y;\nloop invariant !w ==> x + y = x + y;\nloop invariant x + y >= 0;\nloop invariant w ==> x + y = x + 1 + y;\nloop invariant !w ==> x + y = x + y;\nloop invariant x + y >= 0;\nloop invariant w ==> x + y = x + 1 + y;\nloop invariant !w ==> x + y = x + y;\nloop invariant x + y >= 0;\nloop invariant w ==> x + y = x + 1 + y;\nloop invariant !w ==> x + y = x + y;\nloop invariant x + y >= 0;\nloop invariant w ==> x + y = x + 1 + y;\nloop invariant !w ==> x + y = x + y;\nloop invariant x + y >= 0;\nloop invariant w ==> x + y = x + 1 + y;\nloop invariant !w ==> x + y = x + y;\nloop invariant x + y >= 0;\nloop invariant w ==> x + y = x + 1 + y;\nloop invariant !w ==> x + y = x + y;\nloop invariant x + y >= 0;\nloop invariant w ==> x + y = x + 1 + y;\nloop invariant !w ==> x + y = x + y;\nloop invariant x + y >= 0;\nloop invariant w ==> x + y = x + 1 + y;\nloop invariant !w ==> x + y = x + y;\nloop invariant x + y >= 0;\nloop invariant w ==> x + y = x + 1 + y;\nloop invariant !w ==> x + y = x + y;\nloop invariant x + y >= 0;\nloop invariant w ==> x + y = x + 1 + y;\nloop invariant !w ==> x + y = x + y;\nloop invariant x + y >= 0;\nloop invariant w ==> x + y = x + 1 + y;\nloop invariant !w ==> x + y = x + y;\nloop invariant x + y >= 0;\nloop invariant w ==> x + y = x + 1 + y;\nloop invariant !w ==> x + y = x + y;\nloop invariant x + y >= 0;\nloop invariant w ==> x + y = x + 1 + y;\nloop invariant !w ==> x + y = x + y;\nloop invariant x + y >= 0;\nloop invariant w ==> x + y = x + 1 + y;\nloop invariant !w ==> x + y = x + y;\nloop invariant x + y >= 0;\nloop invariant w ==> x + y = x + 1 + y;\nloop invariant !w ==> x + y = x + y;\nloop invariant x + y >= 0;\nloop invariant w ==> x + y = x + 1 + y;\nloop invariant !w ==> x + y = x + y;\nloop invariant x + y >= 0;\nloop invariant w ==> x + y = x + 1 + y;\nloop invariant !w ==> x + y = x + y;\nloop invariant x + y >= 0;\nloop invariant w ==> x + y = x + 1 + y;\nloop invariant !w ==> x + y = x + y;\nloop invariant x + y >= 0;\nloop invariant w ==> x + y = x + 1 + y;\nloop invariant !w ==> x + y = x + y;\nloop invariant x + y >= 0;\nloop invariant w ==> x + y = x + 1 + y;\nloop invariant !w ==> x + y = x + y;\nloop invariant x + y >= 0;\nloop invariant w ==> x + y = x + 1 + y;\nloop invariant !w ==> x + y = x + y;\nloop invariant x + y >= 0;\nloop invariant w ==> x + y = x + 1 + y;\nloop invariant !w ==> x + y = x + y;\nloop invariant x + y >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= y <= z;\nloop invariant w + z + x + y == 2;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= w + x + y;\nloop invariant x <= w;\nloop invariant y <= z;\nloop invariant z <= w + x + y;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= w + x + y;\nloop invariant x <= w;\nloop invariant y <= z;\nloop invariant z <= w + x + y;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= w + x + y;\nloop invariant x <= w;\nloop invariant y <= z;\nloop invariant z <= w + x + y;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= w + x + y;\nloop invariant x <= w;\nloop invariant y <= z;\nloop invariant z <= w + x + y;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= w + x + y;\nloop invariant x <= w;\nloop invariant y <= z;\nloop invariant z <= w + x + y;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= w + x + y;\nloop invariant x <= w;\nloop invariant y <= z;\nloop invariant z <= w + x + y;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= w + x + y;\nloop invariant x <= w;\nloop invariant y <= z;\nloop invariant z <= w + x + y;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= w + x + y;\nloop invariant x <= w;\nloop invariant y <= z;\nloop invariant z <= w + x + y;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= w + x + y;\nloop invariant x <= w;\nloop invariant y <= z;\nloop invariant z <= w + x + y;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= w + x + y;\nloop invariant x <= w;\nloop invariant y <= z;\nloop invariant z <= w + x + y;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= w + x + y;\nloop invariant x <= w;\nloop invariant y <= z;\nloop invariant z <= w + x + y;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= w + x + y;\nloop invariant x <= w;\nloop invariant y <= z;\nloop invariant z <= w + x + y;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= w + x + y;\nloop invariant x <= w;\nloop invariant y <= z;\nloop invariant z <= w + x + y;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= w + x + y;\nloop invariant x <= w;\nloop invariant y <= z;\nloop invariant z <= w + x + y;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= w + x + y;\nloop invariant x <= w;\nloop invariant y <= z;\nloop invariant z <= w + x + y;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= w + x + y;\nloop invariant x <= w;\nloop invariant y <= z;\nloop invariant z <= w + x + y;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= w + x + y;\nloop invariant x <= w;\nloop invariant y <= z;\nloop invariant z <= w + x + y;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= w + x + y;\nloop invariant x <= w;\nloop invariant y <= z;\nloop invariant z <= w + x + y;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= w + x + y;\nloop invariant x <= w;\nloop invariant y <= z;\nloop invariant z <= w + x + y;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= w + x + y;\nloop invariant x <= w;\nloop invariant y <= z;\nloop invariant z <= w + x + y;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= w + x + y;\nloop invariant x <= w;\nloop invariant y <= z;\nloop invariant z <= w + x + y;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= w + x + y;\nloop invariant x <= w;\nloop invariant y <= z;\nloop invariant z <= w + x + y;\nloop invariant x <= y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x == y;\nloop invariant w == 0;\nloop invariant z == 1;\nloop invariant x == y;\nloop invariant w == 1;\nloop invariant z == 0;\nloop invariant w == 0;\nloop invariant z == 1;\nloop invariant x == y;\nloop invariant w == 1;\nloop invariant z == 0;\nloop invariant w == 0;\nloop invariant z == 1;\nloop invariant w == 0;\nloop invariant z == 1;\nloop invariant x == y;\nloop invariant w == 1;\nloop invariant z == 0;\nloop invariant w == 0;\nloop invariant z == 1;\nloop invariant w == 0;\nloop invariant z == 1;\nloop invariant x == y;\nloop invariant w == 1;\nloop invariant z == 0;\nloop invariant w == 0;\nloop invariant z == 1;\nloop invariant x == y;\nloop invariant w == 1;\nloop invariant z == 0;\nloop invariant w == 0;\nloop invariant z == 1;\nloop invariant x == y;\nloop invariant w == 1;\nloop invariant z == 0;\nloop invariant w == 0;\nloop invariant z == 1;\nloop invariant w == 0;\nloop invariant z == 1;\nloop invariant x == y;\nloop invariant w == 1;\nloop invariant z == 0;\nloop invariant w == 0;\nloop invariant z == 1;\nloop invariant x == y;\nloop invariant w == 1;\nloop invariant z == 0;\nloop invariant w == 0;\nloop invariant z == 1;\nloop invariant w == 0;\nloop invariant z == 1;\nloop invariant x == y;\nloop invariant w == 1;\nloop invariant z == 0;\nloop invariant w == 0;\nloop invariant z == 1;\nloop invariant x == y;\nloop invariant w == 1;\nloop invariant z == 0;\nloop invariant w == 0;\nloop invariant z == 1;\nloop invariant w == 0;\nloop invariant z == 1;\nloop invariant x == y;\nloop invariant w == 1;\nloop invariant z == 0;\nloop invariant w == 0;\nloop invariant z == 1;\nloop invariant x == y;\nloop invariant w == 1;\nloop invariant z == 0;\nloop invariant w == 0;\nloop invariant z == 1;\nloop invariant w == 0;\nloop invariant z == 1;\nloop invariant x == y;\nloop invariant w == 1;\nloop invariant z == 0;\nloop invariant w == 0;\nloop invariant z == 1;\nloop invariant x == y;\nloop invariant w == 1;\nloop invariant z == 0;\nloop invariant w == 0;\nloop invariant z == 1;\nloop invariant w == 0;\nloop invariant z == 1;\nloop invariant x == y;\nloop invariant w == 1;\nloop invariant z == 0;\nloop invariant w == 0;\nloop invariant z == 1;\nloop invariant x == y;\nloop invariant w == 1;\nloop invariant z == 0;\nloop invariant w == 0;\nloop invariant z == 1;\nloop invariant w == 0;\nloop invariant z == 1;\nloop invariant x == y;\nloop invariant w == 1;\nloop invariant z == 0;\nloop invariant w == 0;\nloop invariant z == 1;\nloop invariant x == y;\nloop invariant w == 1;\nloop invariant z == 0;\nloop invariant w == 0;\nloop invariant z == 1;\nloop invariant w == 0;\nloop invariant z == 1;\nloop invariant x == y;\nloop invariant w == 1;\nloop invariant z == 0;\nloop invariant w == 0;\nloop invariant z == 1;\nloop invariant x == y;\nloop invariant w == 1;\nloop invariant z == 0;\nloop invariant w == 0;\nloop invariant z == 1;\nloop invariant w == 0;\nloop invariant z == 1;\nloop invariant x == y;\nloop invariant w == 1;\nloop invariant z == 0;\nloop invariant w == 0;\nloop invariant z == 1;\nloop invariant x == y;\nloop invariant w == 1;\nloop invariant z == 0;\nloop invariant w == 0;\nloop invariant z == 1;\nloop invariant w == 0;\nloop invariant z == 1;\nloop invariant x == y;\nloop invariant w == 1;\nloop invariant z == 0;\nloop invariant w == 0;\nloop invariant z == 1;\nloop invariant x == y;\nloop invariant w == 1;\n*/\n```",
            "```\n/*@\nloop invariant w => (x >= 0);\nloop invariant !w => (x == 0);\nloop invariant z => (y >= 0);\nloop invariant !z => (y == 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant x == y;\nloop invariant x <= y;\nloop invariant x + y == y;\nloop invariant x == y;\nloop invariant x + y == y;\nloop invariant x == y;\nloop invariant x + y == y;\nloop invariant x == y;\nloop invariant x + y == y;\nloop invariant x == y;\nloop invariant x + y == y;\nloop invariant x == y;\nloop invariant x + y == y;\nloop invariant x == y;\nloop invariant x + y == y;\nloop invariant x == y;\nloop invariant x + y == y;\nloop invariant x == y;\nloop invariant x + y == y;\nloop invariant x == y;\nloop invariant x + y == y;\nloop invariant x == y;\nloop invariant x + y == y;\nloop invariant x == y;\nloop invariant x + y == y;\nloop invariant x == y;\nloop invariant x + y == y;\nloop invariant x == y;\nloop invariant x + y == y;\nloop invariant x == y;\nloop invariant x + y == y;\nloop invariant x == y;\nloop invariant x + y == y;\nloop invariant x == y;\nloop invariant x + y == y;\nloop invariant x == y;\nloop invariant x + y == y;\nloop invariant x == y;\nloop invariant x + y == y;\nloop invariant x == y;\nloop invariant x + y == y;\nloop invariant x == y;\nloop invariant x + y == y;\nloop invariant x == y;\nloop invariant x + y == y;\nloop invariant x == y;\nloop invariant x + y == y;\nloop invariant x == y;\nloop invariant x + y == y;\nloop invariant x == y;\nloop invariant x + y == y;\nloop invariant x == y;\nloop invariant x + y == y;\nloop invariant x == y;\nloop invariant x + y == y;\nloop invariant x == y;\nloop invariant x + y == y;\nloop invariant x == y;\nloop invariant x + y == y;\nloop invariant x == y;\nloop invariant x + y == y;\nloop invariant x == y;\nloop invariant x + y == y;\nloop invariant x == y;\nloop invariant x + y == y;\nloop invariant x == y;\nloop invariant x + y == y;\nloop invariant x == y;\nloop invariant x + y == y;\nloop invariant x == y;\nloop invariant x + y == y;\nloop invariant x == y;\nloop invariant x + y == y;\nloop invariant x == y;\nloop invariant x + y == y;\nloop invariant x == y;\nloop invariant x + y == y;\nloop invariant x == y;\nloop invariant x + y == y;\nloop invariant x == y;\nloop invariant x + y == y;\nloop invariant x == y;\nloop invariant x + y == y;\nloop invariant x == y;\nloop invariant x + y == y;\nloop invariant x == y;\nloop invariant x + y == y;\nloop invariant x == y;\nloop invariant x + y == y;\nloop invariant x == y;\nloop invariant x + y == y;\nloop invariant x == y;\nloop invariant x + y == y;\nloop invariant x == y;\nloop invariant x + y == y;\nloop invariant x == y;\nloop invariant x + y == y;\nloop invariant x == y;\nloop invariant x + y == y;\nloop invariant x == y;\nloop invariant x + y == y;\nloop invariant x == y;\nloop invariant x + y == y;\nloop invariant x == y;\nloop invariant x + y == y;\nloop invariant x == y;\nloop invariant x + y == y;\nloop invariant x == y;\nloop invariant x + y == y;\nloop invariant x == y;\nloop invariant x + y == y;\nloop invariant x == y;\nloop invariant x + y == y;\nloop invariant x == y;\nloop invariant x + y == y;\nloop invariant x == y;\nloop invariant x + y == y;\nloop invariant x == y;\nloop invariant x + y == y;\nloop invariant x == y;\nloop invariant x + y == y;\nloop invariant x == y;\nloop invariant x + y == y;\nloop invariant x == y;\nloop invariant x + y == y;\nloop invariant x == y;\nloop invariant x + y == y;\nloop invariant x == y;\nloop invariant x + y == y;\nloop invariant x == y;\nloop invariant x + y == y;\nloop invariant x == y;\nloop invariant x + y == y;\nloop invariant x == y;\nloop invariant x + y == y;\nloop invariant x == y;\nloop invariant x + y == y;\nloop invariant x == y;\nloop invariant x + y == y;\nloop invariant x == y;\nloop invariant x + y == y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= z <= 1;\nloop invariant 0 <= x <= 1;\nloop invariant x <= y;\nloop invariant z <= y;\nloop invariant y <= 2;\nloop invariant w <= 1;\nloop invariant w == 1 ==> z == 0;\nloop invariant w == 1 ==> x == 0;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= w <= 1;\nloop invariant 0 <= z <= 1;\nloop invariant 0 <= x <= 1;\nloop invariant 0 <= y <= 1;\nloop invariant x == y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown2();\n\nvoid main() {\n\n\tint w = 1;\n\tint z = 0;\n\tint x= 0;\n\tint y=0;\n\n         /*@\nloop invariant i1: 0 <= w <= 1;\nloop invariant i2: 0 <= z <= 1;\n\n\n\n*/\nwhile(unknown2()){\n\t    if(w) {\n\t\tx++; \n\t\tw=!w;\n\t    };\n\t    if(!z) {\n\t\ty++; \n\t\tz=!z;\n\t    };\n\t}\n\n\t{;\n//@ assert(x==y);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 1 <= w <= 2;\nloop invariant 0 <= z <= 1;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant x == y ==> w == 1;\nloop invariant x == y ==> z == 0;\nloop invariant x == y ==> x == y;\nloop invariant x == y ==> x == y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown2();\n\nvoid main() {\n\n\tint w = 1;\n\tint z = 0;\n\tint x= 0;\n\tint y=0;\n\n         /*@\n\nloop invariant i2: 0 <= z <= 1;\nloop invariant i3: 0 <= x;\nloop invariant i4: 0 <= y;\n\n\nloop invariant i7: x == y ==> x == y;\n*/\nwhile(unknown2()){\n\t    if(w) {\n\t\tx++; \n\t\tw=!w;\n\t    };\n\t    if(!z) {\n\t\ty++; \n\t\tz=!z;\n\t    };\n\t}\n\n\t{;\n//@ assert(x==y);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown2();\n\nvoid main() {\n\n\tint w = 1;\n\tint z = 0;\n\tint x= 0;\n\tint y=0;\n\n         /*@\n\n*/\nwhile(unknown2()){\n\t    if(w) {\n\t\tx++; \n\t\tw=!w;\n\t    };\n\t    if(!z) {\n\t\ty++; \n\t\tz=!z;\n\t    };\n\t}\n\n\t{;\n//@ assert(x==y);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= z <= 1;\nloop invariant 0 <= x <= y;\nloop invariant w + z == 1;\nloop invariant w == !z;\nloop invariant x >= y - 1;\nloop invariant y >= x - 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown2();\n\nvoid main() {\n\n\tint w = 1;\n\tint z = 0;\n\tint x= 0;\n\tint y=0;\n\n         /*@\nloop invariant i1: 0 <= z <= 1;\nloop invariant i2: 0 <= x <= y;\nloop invariant i3: w + z == 1;\nloop invariant i4: w == !z;\nloop invariant i5: x >= y - 1;\nloop invariant i6: y >= x - 1;\n*/\nwhile(unknown2()){\n\t    if(w) {\n\t\tx++; \n\t\tw=!w;\n\t    };\n\t    if(!z) {\n\t\ty++; \n\t\tz=!z;\n\t    };\n\t}\n\n\t{;\n//@ assert(x==y);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown2();\n\nvoid main() {\n\n\tint w = 1;\n\tint z = 0;\n\tint x= 0;\n\tint y=0;\n\n         /*@\n\n*/\nwhile(unknown2()){\n\t    if(w) {\n\t\tx++; \n\t\tw=!w;\n\t    };\n\t    if(!z) {\n\t\ty++; \n\t\tz=!z;\n\t    };\n\t}\n\n\t{;\n//@ assert(x==y);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= 100000;\nloop invariant y >= 0;\nloop invariant w >= 0;\nloop invariant z >= 0;\nloop invariant x <= y;\nloop invariant y <= 100000;\nloop invariant w <= 1;\nloop invariant z <= 1;\nloop invariant x - y <= 1;\nloop invariant y - x <= 1;\nloop invariant x - y >= -1;\nloop invariant y - x >= -1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant w >= 0;\nloop invariant z >= 0;\nloop invariant x <= y;\nloop invariant y <= 100000;\nloop invariant w <= 1;\nloop invariant z <= 1;\nloop invariant x - y <= 1;\nloop invariant y - x <= 1;\nloop invariant x - y >= -1;\nloop invariant y - x >= -1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant w >= 0;\nloop invariant z >= 0;\nloop invariant x <= y;\nloop invariant y <= 100000;\nloop invariant w <= 1;\nloop invariant z <= 1;\nloop invariant x - y <= 1;\nloop invariant y - x <= 1;\nloop invariant x - y >= -1;\nloop invariant y - x >= -1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant w >= 0;\nloop invariant z >= 0;\nloop invariant x <= y;\nloop invariant y <= 100000;\nloop invariant w <= 1;\nloop invariant z <= 1;\nloop invariant x - y <= 1;\nloop invariant y - x <= 1;\nloop invariant x - y >= -1;\nloop invariant y - x >= -1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant w >= 0;\nloop invariant z >= 0;\nloop invariant x <= y;\nloop invariant y <= 100000;\nloop invariant w <= 1;\nloop invariant z <= 1;\nloop invariant x - y <= 1;\nloop invariant y - x <= 1;\nloop invariant x - y >= -1;\nloop invariant y - x >= -1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant w >= 0;\nloop invariant z >= 0;\nloop invariant x <= y;\nloop invariant y <= 100000;\nloop invariant w <= 1;\nloop invariant z <= 1;\nloop invariant x - y <= 1;\nloop invariant y - x <= 1;\nloop invariant x - y >= -1;\nloop invariant y - x >= -1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant w >= 0;\nloop invariant z >= 0;\nloop invariant x <= y;\nloop invariant y <= 100000;\nloop invariant w <= 1;\nloop invariant z <= 1;\nloop invariant x - y <= 1;\nloop invariant y - x <= 1;\nloop invariant x - y >= -1;\nloop invariant y - x >= -1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant w >= 0;\nloop invariant z >= 0;\nloop invariant x <= y;\nloop invariant y <= 100000;\nloop invariant w <= 1;\nloop invariant z <= 1;\nloop invariant x - y <= 1;\nloop invariant y - x <= 1;\nloop invariant x - y >= -1;\nloop invariant y - x >= -1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant w >= 0;\nloop invariant z >= 0;\nloop invariant x <= y;\nloop invariant y <= 100000;\nloop invariant w <= 1;\nloop invariant z <= 1;\nloop invariant x - y <= 1;\nloop invariant y - x <= 1;\nloop invariant x - y >= -1;\nloop invariant y - x >= -1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant w >= 0;\nloop invariant z >= 0;\nloop invariant x <= y;\nloop invariant y <= 100000;\nloop invariant w <= 1;\nloop invariant z <= 1;\nloop invariant x - y <= 1;\nloop invariant y - x <= 1;\nloop invariant x - y >= -1;\nloop invariant y - x >= -1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant w >= 0;\nloop invariant z >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown2();\n\nvoid main() {\n\n\tint w = 1;\n\tint z = 0;\n\tint x= 0;\n\tint y=0;\n\n         /*@\n\nloop invariant i2: y >= 0;\nloop invariant i3: w >= 0;\nloop invariant i4: z >= 0;\n\n\nloop invariant i7: w <= 1;\nloop invariant i8: z <= 1;\n\n\n\n\nloop invariant i13: x >= 0;\n*/\nwhile(unknown2()){\n\t    if(w) {\n\t\tx++; \n\t\tw=!w;\n\t    };\n\t    if(!z) {\n\t\ty++; \n\t\tz=!z;\n\t    };\n\t}\n\n\t{;\n//@ assert(x==y);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant y <= z;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant x <= y;\nloop invariant x <= y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown2();\n\nvoid main() {\n\n\tint w = 1;\n\tint z = 0;\n\tint x= 0;\n\tint y=0;\n\n         /*@\nloop invariant i1: y <= z;\n\n*/\nwhile(unknown2()){\n\t    if(w) {\n\t\tx++; \n\t\tw=!w;\n\t    };\n\t    if(!z) {\n\t\ty++; \n\t\tz=!z;\n\t    };\n\t}\n\n\t{;\n//@ assert(x==y);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= z <= 1;\nloop invariant 0 <= w <= 1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x == y ==> w == !z;\nloop invariant x != y ==> w == z;\nloop invariant x == y ==> z == !w;\nloop invariant x != y ==> z == w;\nloop invariant x == y ==> z == w;\nloop invariant x != y ==> z == !w;\nloop invariant x == y ==> w == z;\nloop invariant x != y ==> w == !z;\nloop invariant x == y ==> z == !w;\nloop invariant x != y ==> w == z;\nloop invariant x == y ==> z == w;\nloop invariant x != y ==> w == !z;\nloop invariant x == y ==> z == !w;\nloop invariant x != y ==> w == z;\nloop invariant x == y ==> z == w;\nloop invariant x != y ==> w == !z;\nloop invariant x == y ==> z == !w;\nloop invariant x != y ==> w == z;\nloop invariant x == y ==> z == w;\nloop invariant x != y ==> w == !z;\nloop invariant x == y ==> z == !w;\nloop invariant x != y ==> w == z;\nloop invariant x == y ==> z == w;\nloop invariant x != y ==> w == !z;\nloop invariant x == y ==> z == !w;\nloop invariant x != y ==> w == z;\nloop invariant x == y ==> z == w;\nloop invariant x != y ==> w == !z;\nloop invariant x == y ==> z == !w;\nloop invariant x != y ==> w == z;\nloop invariant x == y ==> z == w;\nloop invariant x != y ==> w == !z;\nloop invariant x == y ==> z == !w;\nloop invariant x != y ==> w == z;\nloop invariant x == y ==> z == w;\nloop invariant x != y ==> w == !z;\nloop invariant x == y ==> z == !w;\nloop invariant x != y ==> w == z;\nloop invariant x == y ==> z == w;\nloop invariant x != y ==> w == !z;\nloop invariant x == y ==> z == !w;\nloop invariant x != y ==> w == z;\nloop invariant x == y ==> z == w;\nloop invariant x != y ==> w == !z;\nloop invariant x == y ==> z == !w;\nloop invariant x != y ==> w == z;\nloop invariant x == y ==> z == w;\nloop invariant x != y ==> w == !z;\nloop invariant x == y ==> z == !w;\nloop invariant x != y ==> w == z;\nloop invariant x == y ==> z == w;\nloop invariant x != y ==> w == !z;\nloop invariant x == y ==> z == !w;\nloop invariant x != y ==> w == z;\nloop invariant x == y ==> z == w;\nloop invariant x != y ==> w == !z;\nloop invariant x == y ==> z == !w;\nloop invariant x != y ==> w == z;\nloop invariant x == y ==> z == w;\nloop invariant x != y ==> w == !z;\nloop invariant x == y ==> z == !w;\nloop invariant x != y ==> w == z;\nloop invariant x == y ==> z == w;\nloop invariant x != y ==> w == !z;\nloop invariant x == y ==> z == !w;\nloop invariant x != y ==> w == z;\nloop invariant x == y ==> z == w;\nloop invariant x != y ==> w == !z;\nloop invariant x == y ==> z == !w;\nloop invariant x != y ==> w == z;\nloop invariant x == y ==> z == w;\nloop invariant x != y ==> w == !z;\nloop invariant x == y ==> z == !w;\nloop invariant x != y ==> w == z;\nloop invariant x == y ==> z == w;\nloop invariant x != y ==> w == !z;\nloop invariant x == y ==> z == !w;\nloop invariant x != y ==> w == z;\nloop invariant x == y ==> z == w;\nloop invariant x != y ==> w == !z;\nloop invariant x == y ==> z == !w;\nloop invariant x != y ==> w == z;\nloop invariant x == y ==> z == w;\nloop invariant x != y ==> w == !z;\nloop invariant x == y ==> z == !w;\nloop invariant x != y ==> w == z;\nloop invariant x == y ==> z == w;\nloop invariant x != y ==> w == !z;\nloop invariant x == y ==> z == !w;\nloop invariant x != y ==> w == z;\nloop invariant x == y ==> z == w;\nloop invariant x != y ==> w == !z;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown2();\n\nvoid main() {\n\n\tint w = 1;\n\tint z = 0;\n\tint x= 0;\n\tint y=0;\n\n         /*@\nloop invariant i1: 0 <= z <= 1;\nloop invariant i2: 0 <= w <= 1;\nloop invariant i3: x >= 0;\nloop invariant i4: y >= 0;\nloop invariant i5: x == y ==> w == !z;\nloop invariant i6: x != y ==> w == z;\nloop invariant i7: x == y ==> z == !w;\nloop invariant i8: x != y ==> z == w;\n\nloop invariant i10: x != y ==> z == !w;\n\nloop invariant i12: x != y ==> w == !z;\n*/\nwhile(unknown2()){\n\t    if(w) {\n\t\tx++; \n\t\tw=!w;\n\t    };\n\t    if(!z) {\n\t\ty++; \n\t\tz=!z;\n\t    };\n\t}\n\n\t{;\n//@ assert(x==y);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 10,
                "annotations": "```\n/*@\nloop invariant 1 <= w <= 2;\nloop invariant 0 <= z <= 1;\nloop invariant 0 <= x <= 1;\nloop invariant 0 <= y <= 1;\nloop invariant (if !(unknown2()) ==> x == y);\nloop invariant (if (w == 1) ==> x == y);\nloop invariant (if (w == 0) ==> x == y);\nloop invariant (if (z == 1) ==> x == y);\nloop invariant (if (z == 0) ==> x == y);\nloop invariant (if (unknown2()) ==> x == y);\nloop invariant (if (x == y) ==> x == y);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown2();\n\nvoid main() {\n\n\tint w = 1;\n\tint z = 0;\n\tint x= 0;\n\tint y=0;\n\n         /*@\n\nloop invariant i2: 0 <= z <= 1;\n\n\n\n\n\n\n\n\n\n*/\nwhile(unknown2()){\n\t    if(w) {\n\t\tx++; \n\t\tw=!w;\n\t    };\n\t    if(!z) {\n\t\ty++; \n\t\tz=!z;\n\t    };\n\t}\n\n\t{;\n//@ assert(x==y);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 8,
                "annotations": "```\n/*@\nloop invariant w = !z;\nloop invariant y >= 0;\nloop invariant z ==> y = z + 1;\nloop invariant !z ==> y = 0;\nloop invariant x >= 0;\nloop invariant w ==> x = x + 1;\nloop invariant !w ==> x = 0;\nloop invariant x + y >= 0;\nloop invariant w ==> x + y = x + 1 + y;\nloop invariant !w ==> x + y = x + y;\nloop invariant w ==> x + y = x + 1 + y;\nloop invariant !w ==> x + y = x + y;\nloop invariant x + y >= 0;\nloop invariant w ==> x + y = x + 1 + y;\nloop invariant !w ==> x + y = x + y;\nloop invariant x + y >= 0;\nloop invariant w ==> x + y = x + 1 + y;\nloop invariant !w ==> x + y = x + y;\nloop invariant x + y >= 0;\nloop invariant w ==> x + y = x + 1 + y;\nloop invariant !w ==> x + y = x + y;\nloop invariant x + y >= 0;\nloop invariant w ==> x + y = x + 1 + y;\nloop invariant !w ==> x + y = x + y;\nloop invariant x + y >= 0;\nloop invariant w ==> x + y = x + 1 + y;\nloop invariant !w ==> x + y = x + y;\nloop invariant x + y >= 0;\nloop invariant w ==> x + y = x + 1 + y;\nloop invariant !w ==> x + y = x + y;\nloop invariant x + y >= 0;\nloop invariant w ==> x + y = x + 1 + y;\nloop invariant !w ==> x + y = x + y;\nloop invariant x + y >= 0;\nloop invariant w ==> x + y = x + 1 + y;\nloop invariant !w ==> x + y = x + y;\nloop invariant x + y >= 0;\nloop invariant w ==> x + y = x + 1 + y;\nloop invariant !w ==> x + y = x + y;\nloop invariant x + y >= 0;\nloop invariant w ==> x + y = x + 1 + y;\nloop invariant !w ==> x + y = x + y;\nloop invariant x + y >= 0;\nloop invariant w ==> x + y = x + 1 + y;\nloop invariant !w ==> x + y = x + y;\nloop invariant x + y >= 0;\nloop invariant w ==> x + y = x + 1 + y;\nloop invariant !w ==> x + y = x + y;\nloop invariant x + y >= 0;\nloop invariant w ==> x + y = x + 1 + y;\nloop invariant !w ==> x + y = x + y;\nloop invariant x + y >= 0;\nloop invariant w ==> x + y = x + 1 + y;\nloop invariant !w ==> x + y = x + y;\nloop invariant x + y >= 0;\nloop invariant w ==> x + y = x + 1 + y;\nloop invariant !w ==> x + y = x + y;\nloop invariant x + y >= 0;\nloop invariant w ==> x + y = x + 1 + y;\nloop invariant !w ==> x + y = x + y;\nloop invariant x + y >= 0;\nloop invariant w ==> x + y = x + 1 + y;\nloop invariant !w ==> x + y = x + y;\nloop invariant x + y >= 0;\nloop invariant w ==> x + y = x + 1 + y;\nloop invariant !w ==> x + y = x + y;\nloop invariant x + y >= 0;\nloop invariant w ==> x + y = x + 1 + y;\nloop invariant !w ==> x + y = x + y;\nloop invariant x + y >= 0;\nloop invariant w ==> x + y = x + 1 + y;\nloop invariant !w ==> x + y = x + y;\nloop invariant x + y >= 0;\nloop invariant w ==> x + y = x + 1 + y;\nloop invariant !w ==> x + y = x + y;\nloop invariant x + y >= 0;\nloop invariant w ==> x + y = x + 1 + y;\nloop invariant !w ==> x + y = x + y;\nloop invariant x + y >= 0;\nloop invariant w ==> x + y = x + 1 + y;\nloop invariant !w ==> x + y = x + y;\nloop invariant x + y >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown2();\n\nvoid main() {\n\n\tint w = 1;\n\tint z = 0;\n\tint x= 0;\n\tint y=0;\n\n         /*@\n\nloop invariant i2: y >= 0;\n\n\nloop invariant i5: x >= 0;\n\n\nloop invariant i8: x + y >= 0;\n\n\n*/\nwhile(unknown2()){\n\t    if(w) {\n\t\tx++; \n\t\tw=!w;\n\t    };\n\t    if(!z) {\n\t\ty++; \n\t\tz=!z;\n\t    };\n\t}\n\n\t{;\n//@ assert(x==y);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= y <= z;\nloop invariant w + z + x + y == 2;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= w + x + y;\nloop invariant x <= w;\nloop invariant y <= z;\nloop invariant z <= w + x + y;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= w + x + y;\nloop invariant x <= w;\nloop invariant y <= z;\nloop invariant z <= w + x + y;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= w + x + y;\nloop invariant x <= w;\nloop invariant y <= z;\nloop invariant z <= w + x + y;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= w + x + y;\nloop invariant x <= w;\nloop invariant y <= z;\nloop invariant z <= w + x + y;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= w + x + y;\nloop invariant x <= w;\nloop invariant y <= z;\nloop invariant z <= w + x + y;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= w + x + y;\nloop invariant x <= w;\nloop invariant y <= z;\nloop invariant z <= w + x + y;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= w + x + y;\nloop invariant x <= w;\nloop invariant y <= z;\nloop invariant z <= w + x + y;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= w + x + y;\nloop invariant x <= w;\nloop invariant y <= z;\nloop invariant z <= w + x + y;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= w + x + y;\nloop invariant x <= w;\nloop invariant y <= z;\nloop invariant z <= w + x + y;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= w + x + y;\nloop invariant x <= w;\nloop invariant y <= z;\nloop invariant z <= w + x + y;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= w + x + y;\nloop invariant x <= w;\nloop invariant y <= z;\nloop invariant z <= w + x + y;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= w + x + y;\nloop invariant x <= w;\nloop invariant y <= z;\nloop invariant z <= w + x + y;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= w + x + y;\nloop invariant x <= w;\nloop invariant y <= z;\nloop invariant z <= w + x + y;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= w + x + y;\nloop invariant x <= w;\nloop invariant y <= z;\nloop invariant z <= w + x + y;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= w + x + y;\nloop invariant x <= w;\nloop invariant y <= z;\nloop invariant z <= w + x + y;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= w + x + y;\nloop invariant x <= w;\nloop invariant y <= z;\nloop invariant z <= w + x + y;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= w + x + y;\nloop invariant x <= w;\nloop invariant y <= z;\nloop invariant z <= w + x + y;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= w + x + y;\nloop invariant x <= w;\nloop invariant y <= z;\nloop invariant z <= w + x + y;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= w + x + y;\nloop invariant x <= w;\nloop invariant y <= z;\nloop invariant z <= w + x + y;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= w + x + y;\nloop invariant x <= w;\nloop invariant y <= z;\nloop invariant z <= w + x + y;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= w + x + y;\nloop invariant x <= w;\nloop invariant y <= z;\nloop invariant z <= w + x + y;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= w + x + y;\nloop invariant x <= w;\nloop invariant y <= z;\nloop invariant z <= w + x + y;\nloop invariant x <= y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown2();\n\nvoid main() {\n\n\tint w = 1;\n\tint z = 0;\n\tint x= 0;\n\tint y=0;\n\n         /*@\n\n\n\nloop invariant i4: y <= z;\n\n\n*/\nwhile(unknown2()){\n\t    if(w) {\n\t\tx++; \n\t\tw=!w;\n\t    };\n\t    if(!z) {\n\t\ty++; \n\t\tz=!z;\n\t    };\n\t}\n\n\t{;\n//@ assert(x==y);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x == y;\nloop invariant w == 0;\nloop invariant z == 1;\nloop invariant x == y;\nloop invariant w == 1;\nloop invariant z == 0;\nloop invariant w == 0;\nloop invariant z == 1;\nloop invariant x == y;\nloop invariant w == 1;\nloop invariant z == 0;\nloop invariant w == 0;\nloop invariant z == 1;\nloop invariant w == 0;\nloop invariant z == 1;\nloop invariant x == y;\nloop invariant w == 1;\nloop invariant z == 0;\nloop invariant w == 0;\nloop invariant z == 1;\nloop invariant w == 0;\nloop invariant z == 1;\nloop invariant x == y;\nloop invariant w == 1;\nloop invariant z == 0;\nloop invariant w == 0;\nloop invariant z == 1;\nloop invariant x == y;\nloop invariant w == 1;\nloop invariant z == 0;\nloop invariant w == 0;\nloop invariant z == 1;\nloop invariant x == y;\nloop invariant w == 1;\nloop invariant z == 0;\nloop invariant w == 0;\nloop invariant z == 1;\nloop invariant w == 0;\nloop invariant z == 1;\nloop invariant x == y;\nloop invariant w == 1;\nloop invariant z == 0;\nloop invariant w == 0;\nloop invariant z == 1;\nloop invariant x == y;\nloop invariant w == 1;\nloop invariant z == 0;\nloop invariant w == 0;\nloop invariant z == 1;\nloop invariant w == 0;\nloop invariant z == 1;\nloop invariant x == y;\nloop invariant w == 1;\nloop invariant z == 0;\nloop invariant w == 0;\nloop invariant z == 1;\nloop invariant x == y;\nloop invariant w == 1;\nloop invariant z == 0;\nloop invariant w == 0;\nloop invariant z == 1;\nloop invariant w == 0;\nloop invariant z == 1;\nloop invariant x == y;\nloop invariant w == 1;\nloop invariant z == 0;\nloop invariant w == 0;\nloop invariant z == 1;\nloop invariant x == y;\nloop invariant w == 1;\nloop invariant z == 0;\nloop invariant w == 0;\nloop invariant z == 1;\nloop invariant w == 0;\nloop invariant z == 1;\nloop invariant x == y;\nloop invariant w == 1;\nloop invariant z == 0;\nloop invariant w == 0;\nloop invariant z == 1;\nloop invariant x == y;\nloop invariant w == 1;\nloop invariant z == 0;\nloop invariant w == 0;\nloop invariant z == 1;\nloop invariant w == 0;\nloop invariant z == 1;\nloop invariant x == y;\nloop invariant w == 1;\nloop invariant z == 0;\nloop invariant w == 0;\nloop invariant z == 1;\nloop invariant x == y;\nloop invariant w == 1;\nloop invariant z == 0;\nloop invariant w == 0;\nloop invariant z == 1;\nloop invariant w == 0;\nloop invariant z == 1;\nloop invariant x == y;\nloop invariant w == 1;\nloop invariant z == 0;\nloop invariant w == 0;\nloop invariant z == 1;\nloop invariant x == y;\nloop invariant w == 1;\nloop invariant z == 0;\nloop invariant w == 0;\nloop invariant z == 1;\nloop invariant w == 0;\nloop invariant z == 1;\nloop invariant x == y;\nloop invariant w == 1;\nloop invariant z == 0;\nloop invariant w == 0;\nloop invariant z == 1;\nloop invariant x == y;\nloop invariant w == 1;\nloop invariant z == 0;\nloop invariant w == 0;\nloop invariant z == 1;\nloop invariant w == 0;\nloop invariant z == 1;\nloop invariant x == y;\nloop invariant w == 1;\nloop invariant z == 0;\nloop invariant w == 0;\nloop invariant z == 1;\nloop invariant x == y;\nloop invariant w == 1;\nloop invariant z == 0;\nloop invariant w == 0;\nloop invariant z == 1;\nloop invariant w == 0;\nloop invariant z == 1;\nloop invariant x == y;\nloop invariant w == 1;\nloop invariant z == 0;\nloop invariant w == 0;\nloop invariant z == 1;\nloop invariant x == y;\nloop invariant w == 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown2();\n\nvoid main() {\n\n\tint w = 1;\n\tint z = 0;\n\tint x= 0;\n\tint y=0;\n\n         /*@\nloop invariant i1: 0 <= x;\nloop invariant i2: 0 <= y;\n\n\n\n\n\n\n*/\nwhile(unknown2()){\n\t    if(w) {\n\t\tx++; \n\t\tw=!w;\n\t    };\n\t    if(!z) {\n\t\ty++; \n\t\tz=!z;\n\t    };\n\t}\n\n\t{;\n//@ assert(x==y);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant w => (x >= 0);\nloop invariant !w => (x == 0);\nloop invariant z => (y >= 0);\nloop invariant !z => (y == 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown2();\n\nvoid main() {\n\n\tint w = 1;\n\tint z = 0;\n\tint x= 0;\n\tint y=0;\n\n         /*@\n\n\n\n\n*/\nwhile(unknown2()){\n\t    if(w) {\n\t\tx++; \n\t\tw=!w;\n\t    };\n\t    if(!z) {\n\t\ty++; \n\t\tz=!z;\n\t    };\n\t}\n\n\t{;\n//@ assert(x==y);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant x == y;\nloop invariant x <= y;\nloop invariant x + y == y;\nloop invariant x == y;\nloop invariant x + y == y;\nloop invariant x == y;\nloop invariant x + y == y;\nloop invariant x == y;\nloop invariant x + y == y;\nloop invariant x == y;\nloop invariant x + y == y;\nloop invariant x == y;\nloop invariant x + y == y;\nloop invariant x == y;\nloop invariant x + y == y;\nloop invariant x == y;\nloop invariant x + y == y;\nloop invariant x == y;\nloop invariant x + y == y;\nloop invariant x == y;\nloop invariant x + y == y;\nloop invariant x == y;\nloop invariant x + y == y;\nloop invariant x == y;\nloop invariant x + y == y;\nloop invariant x == y;\nloop invariant x + y == y;\nloop invariant x == y;\nloop invariant x + y == y;\nloop invariant x == y;\nloop invariant x + y == y;\nloop invariant x == y;\nloop invariant x + y == y;\nloop invariant x == y;\nloop invariant x + y == y;\nloop invariant x == y;\nloop invariant x + y == y;\nloop invariant x == y;\nloop invariant x + y == y;\nloop invariant x == y;\nloop invariant x + y == y;\nloop invariant x == y;\nloop invariant x + y == y;\nloop invariant x == y;\nloop invariant x + y == y;\nloop invariant x == y;\nloop invariant x + y == y;\nloop invariant x == y;\nloop invariant x + y == y;\nloop invariant x == y;\nloop invariant x + y == y;\nloop invariant x == y;\nloop invariant x + y == y;\nloop invariant x == y;\nloop invariant x + y == y;\nloop invariant x == y;\nloop invariant x + y == y;\nloop invariant x == y;\nloop invariant x + y == y;\nloop invariant x == y;\nloop invariant x + y == y;\nloop invariant x == y;\nloop invariant x + y == y;\nloop invariant x == y;\nloop invariant x + y == y;\nloop invariant x == y;\nloop invariant x + y == y;\nloop invariant x == y;\nloop invariant x + y == y;\nloop invariant x == y;\nloop invariant x + y == y;\nloop invariant x == y;\nloop invariant x + y == y;\nloop invariant x == y;\nloop invariant x + y == y;\nloop invariant x == y;\nloop invariant x + y == y;\nloop invariant x == y;\nloop invariant x + y == y;\nloop invariant x == y;\nloop invariant x + y == y;\nloop invariant x == y;\nloop invariant x + y == y;\nloop invariant x == y;\nloop invariant x + y == y;\nloop invariant x == y;\nloop invariant x + y == y;\nloop invariant x == y;\nloop invariant x + y == y;\nloop invariant x == y;\nloop invariant x + y == y;\nloop invariant x == y;\nloop invariant x + y == y;\nloop invariant x == y;\nloop invariant x + y == y;\nloop invariant x == y;\nloop invariant x + y == y;\nloop invariant x == y;\nloop invariant x + y == y;\nloop invariant x == y;\nloop invariant x + y == y;\nloop invariant x == y;\nloop invariant x + y == y;\nloop invariant x == y;\nloop invariant x + y == y;\nloop invariant x == y;\nloop invariant x + y == y;\nloop invariant x == y;\nloop invariant x + y == y;\nloop invariant x == y;\nloop invariant x + y == y;\nloop invariant x == y;\nloop invariant x + y == y;\nloop invariant x == y;\nloop invariant x + y == y;\nloop invariant x == y;\nloop invariant x + y == y;\nloop invariant x == y;\nloop invariant x + y == y;\nloop invariant x == y;\nloop invariant x + y == y;\nloop invariant x == y;\nloop invariant x + y == y;\nloop invariant x == y;\nloop invariant x + y == y;\nloop invariant x == y;\nloop invariant x + y == y;\nloop invariant x == y;\nloop invariant x + y == y;\nloop invariant x == y;\nloop invariant x + y == y;\nloop invariant x == y;\nloop invariant x + y == y;\nloop invariant x == y;\nloop invariant x + y == y;\nloop invariant x == y;\nloop invariant x + y == y;\nloop invariant x == y;\nloop invariant x + y == y;\nloop invariant x == y;\nloop invariant x + y == y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown2();\n\nvoid main() {\n\n\tint w = 1;\n\tint z = 0;\n\tint x= 0;\n\tint y=0;\n\n         /*@\n\n\n\n\n*/\nwhile(unknown2()){\n\t    if(w) {\n\t\tx++; \n\t\tw=!w;\n\t    };\n\t    if(!z) {\n\t\ty++; \n\t\tz=!z;\n\t    };\n\t}\n\n\t{;\n//@ assert(x==y);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= z <= 1;\nloop invariant 0 <= x <= 1;\nloop invariant x <= y;\nloop invariant z <= y;\nloop invariant y <= 2;\nloop invariant w <= 1;\nloop invariant w == 1 ==> z == 0;\nloop invariant w == 1 ==> x == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown2();\n\nvoid main() {\n\n\tint w = 1;\n\tint z = 0;\n\tint x= 0;\n\tint y=0;\n\n         /*@\nloop invariant i1: 0 <= z <= 1;\n\n\nloop invariant i4: z <= y;\n\nloop invariant i6: w <= 1;\nloop invariant i7: w == 1 ==> z == 0;\nloop invariant i8: w == 1 ==> x == 0;\n*/\nwhile(unknown2()){\n\t    if(w) {\n\t\tx++; \n\t\tw=!w;\n\t    };\n\t    if(!z) {\n\t\ty++; \n\t\tz=!z;\n\t    };\n\t}\n\n\t{;\n//@ assert(x==y);\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 55: unexpected token '!'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown2();\n\nvoid main() {\n\n\tint w = 1;\n\tint z = 0;\n\tint x= 0;\n\tint y=0;\n\n         /*@\nloop invariant i1: 0 <= w <= 1;\nloop invariant i2: 0 <= z <= 1;\nloop invariant i3: 0 <= x <= 1;\nloop invariant i4: 0 <= y <= 1;\nloop invariant i5: x == y;\nloop invariant i6: 1 <= w <= 2;\nloop invariant i7: 0 <= x;\nloop invariant i8: 0 <= y;\nloop invariant i9: x == y ==> w == 1;\nloop invariant i10: x == y ==> z == 0;\nloop invariant i11: x == y ==> x == y;\nloop invariant i12: 0 <= x <= y;\nloop invariant i13: w + z == 1;\nloop invariant i14: w == !z;\nloop invariant i15: x >= y - 1;\nloop invariant i16: y >= x - 1;\nloop invariant i17: 1 <= x <= 100000;\nloop invariant i18: y >= 0;\nloop invariant i19: w >= 0;\nloop invariant i20: z >= 0;\nloop invariant i21: x <= y;\nloop invariant i22: y <= 100000;\nloop invariant i23: w <= 1;\nloop invariant i24: z <= 1;\nloop invariant i25: x - y <= 1;\nloop invariant i26: y - x <= 1;\nloop invariant i27: x - y >= -1;\nloop invariant i28: y - x >= -1;\nloop invariant i29: x >= 0;\nloop invariant i30: y <= z;\nloop invariant i31: x == y ==> w == !z;\nloop invariant i32: x != y ==> w == z;\nloop invariant i33: x == y ==> z == !w;\nloop invariant i34: x != y ==> z == w;\nloop invariant i35: x == y ==> z == w;\nloop invariant i36: x != y ==> z == !w;\nloop invariant i37: x == y ==> w == z;\nloop invariant i38: x != y ==> w == !z;\nloop invariant i39: (if !(unknown2()) ==> x == y);\nloop invariant i40: (if (w == 1) ==> x == y);\nloop invariant i41: (if (w == 0) ==> x == y);\nloop invariant i42: (if (z == 1) ==> x == y);\nloop invariant i43: (if (z == 0) ==> x == y);\nloop invariant i44: (if (unknown2()) ==> x == y);\nloop invariant i45: (if (x == y) ==> x == y);\nloop invariant i46: w = !z;\nloop invariant i47: z ==> y = z + 1;\nloop invariant i48: !z ==> y = 0;\nloop invariant i49: w ==> x = x + 1;\nloop invariant i50: !w ==> x = 0;\nloop invariant i51: x + y >= 0;\nloop invariant i52: w ==> x + y = x + 1 + y;\nloop invariant i53: !w ==> x + y = x + y;\nloop invariant i54: 0 <= x <= y <= z;\nloop invariant i55: w + z + x + y == 2;\nloop invariant i56: z <= w + x + y;\nloop invariant i57: x <= w;\nloop invariant i58: w == 0;\nloop invariant i59: z == 1;\nloop invariant i60: w == 1;\nloop invariant i61: z == 0;\nloop invariant i62: w => (x >= 0);\nloop invariant i63: !w => (x == 0);\nloop invariant i64: z => (y >= 0);\nloop invariant i65: !z => (y == 0);\nloop invariant i66: x + y == y;\nloop invariant i67: z <= y;\nloop invariant i68: y <= 2;\nloop invariant i69: w == 1 ==> z == 0;\nloop invariant i70: w == 1 ==> x == 0;\n*/\nwhile(unknown2()){\n\t    if(w) {\n\t\tx++; \n\t\tw=!w;\n\t    };\n\t    if(!z) {\n\t\ty++; \n\t\tz=!z;\n\t    };\n\t}\n\n\t{;\n//@ assert(x==y);\n}\n\n}",
        "combined_annotation_num_solver_calls": 32,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown2();\n\nvoid main() {\n\n\tint w = 1;\n\tint z = 0;\n\tint x= 0;\n\tint y=0;\n\n         /*@\nloop invariant i1: 0 <= w <= 1;\nloop invariant i2: 0 <= z <= 1;\nloop invariant i3: 0 <= x <= 1;\nloop invariant i4: 0 <= y <= 1;\nloop invariant i5: x == y;\n\nloop invariant i7: 0 <= x;\nloop invariant i8: 0 <= y;\n\n\nloop invariant i11: x == y ==> x == y;\nloop invariant i12: 0 <= x <= y;\nloop invariant i13: w + z == 1;\nloop invariant i14: w == !z;\nloop invariant i15: x >= y - 1;\nloop invariant i16: y >= x - 1;\n\nloop invariant i18: y >= 0;\nloop invariant i19: w >= 0;\nloop invariant i20: z >= 0;\nloop invariant i21: x <= y;\nloop invariant i22: y <= 100000;\nloop invariant i23: w <= 1;\nloop invariant i24: z <= 1;\nloop invariant i25: x - y <= 1;\nloop invariant i26: y - x <= 1;\nloop invariant i27: x - y >= -1;\nloop invariant i28: y - x >= -1;\nloop invariant i29: x >= 0;\nloop invariant i30: y <= z;\nloop invariant i31: x == y ==> w == !z;\nloop invariant i32: x != y ==> w == z;\nloop invariant i33: x == y ==> z == !w;\nloop invariant i34: x != y ==> z == w;\n\nloop invariant i36: x != y ==> z == !w;\n\nloop invariant i38: x != y ==> w == !z;\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i51: x + y >= 0;\n\n\nloop invariant i54: 0 <= x <= y <= z;\n\nloop invariant i56: z <= w + x + y;\n\n\n\n\n\n\n\n\n\n\nloop invariant i67: z <= y;\nloop invariant i68: y <= 2;\nloop invariant i69: w == 1 ==> z == 0;\nloop invariant i70: w == 1 ==> x == 0;\n*/\nwhile(unknown2()){\n\t    if(w) {\n\t\tx++; \n\t\tw=!w;\n\t    };\n\t    if(!z) {\n\t\ty++; \n\t\tz=!z;\n\t    };\n\t}\n\n\t{;\n//@ assert(x==y);\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/split.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/10.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/02.c"
        ],
        "skipped": [],
        "total": 106,
        "success_count": 90,
        "failure_count": 16,
        "success_rate": 0.8490566037735849
    }
}