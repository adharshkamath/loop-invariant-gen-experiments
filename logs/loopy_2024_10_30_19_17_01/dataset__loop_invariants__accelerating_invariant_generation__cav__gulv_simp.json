{
    "logs": {
        "file": "../dataset/loop_invariants/accelerating_invariant_generation/cav/gulv_simp.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet(){\n  int x;\n  return x;\n}\n\nint main(){\nint x = 0, y = 0;\nwhile (unknown_int()) {\n   if (unknown_int())\n     {x = x+1; y = y+100;}\n   else if (unknown_int()){\n     if (x >= 4)\n       {x = x+1; y = y+1;}\n   }\n \n   x = x; \n}\nif (x >= 4 && y <= 2)\n  goto ERROR;\n\nreturn 0;\n\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant y == 100 * x;\nloop invariant unknown_int() ==> (y <= 200);\nloop invariant 0 <= x <= 4;\nloop invariant y == 100 * x;\nloop invariant !unknown_int() ==> (x >= 4 && y <= 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 2;\nloop invariant x >= 4;\nloop invariant x >= y;\nloop invariant x >= 4 ==> y <= 2;\nloop invariant y <= 2 ==> x >= 4;\nloop invariant x >= 4 ==> y >= 0;\nloop invariant y >= 0 ==> x >= 4;\nloop invariant y <= 2 ==> y >= 0;\nloop invariant y >= 0 ==> y <= 2;\nloop invariant x >= 4 ==> y <= 2 ==> y >= 0;\nloop invariant y <= 2 ==> y >= 0 ==> x >= 4;\nloop invariant x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4;\nloop invariant y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2;\nloop invariant x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2;\nloop invariant y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0;\nloop invariant x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0;\nloop invariant y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4;\nloop invariant x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4;\nloop invariant y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2;\nloop invariant x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2;\nloop invariant y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0;\nloop invariant x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0;\nloop invariant y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4;\nloop invariant x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4;\nloop invariant y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2;\nloop invariant x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2;\nloop invariant y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0;\nloop invariant x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0;\nloop invariant y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4;\nloop invariant x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4;\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2) ==> x >= 4;\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2) ==> x >= 4 ==> y <= 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= 4;\nloop invariant y <= 2;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x >= y;\nloop invariant x >= y + 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 2;\nloop invariant x >= 4;\nloop invariant y <= 2 ==> x >= 4;\nloop invariant x >= 4 ==> y <= 2;\nloop invariant x == 5 && y == 2;\nloop invariant x == 6 && y == 2;\nloop invariant x == 7 && y == 2;\nloop invariant x == 8 && y == 2;\nloop invariant x == 9 && y == 2;\nloop invariant x == 10 && y == 2;\nloop invariant x == 11 && y == 2;\nloop invariant x == 12 && y == 2;\nloop invariant x == 13 && y == 2;\nloop invariant x == 14 && y == 2;\nloop invariant x == 15 && y == 2;\nloop invariant x == 16 && y == 2;\nloop invariant x == 17 && y == 2;\nloop invariant x == 18 && y == 2;\nloop invariant x == 19 && y == 2;\nloop invariant x == 20 && y == 2;\nloop invariant x == 21 && y == 2;\nloop invariant x == 22 && y == 2;\nloop invariant x == 23 && y == 2;\nloop invariant x == 24 && y == 2;\nloop invariant x == 25 && y == 2;\nloop invariant x == 26 && y == 2;\nloop invariant x == 27 && y == 2;\nloop invariant x == 28 && y == 2;\nloop invariant x == 29 && y == 2;\nloop invariant x == 30 && y == 2;\nloop invariant x == 31 && y == 2;\nloop invariant x == 32 && y == 2;\nloop invariant x == 33 && y == 2;\nloop invariant x == 34 && y == 2;\nloop invariant x == 35 && y == 2;\nloop invariant x == 36 && y == 2;\nloop invariant x == 37 && y == 2;\nloop invariant x == 38 && y == 2;\nloop invariant x == 39 && y == 2;\nloop invariant x == 40 && y == 2;\nloop invariant x == 41 && y == 2;\nloop invariant x == 42 && y == 2;\nloop invariant x == 43 && y == 2;\nloop invariant x == 44 && y == 2;\nloop invariant x == 45 && y == 2;\nloop invariant x == 46 && y == 2;\nloop invariant x == 47 && y == 2;\nloop invariant x == 48 && y == 2;\nloop invariant x == 49 && y == 2;\nloop invariant x == 50 && y == 2;\nloop invariant x == 51 && y == 2;\nloop invariant x == 52 && y == 2;\nloop invariant x == 53 && y == 2;\nloop invariant x == 54 && y == 2;\nloop invariant x == 55 && y == 2;\nloop invariant x == 56 && y == 2;\nloop invariant x == 57 && y == 2;\nloop invariant x == 58 && y == 2;\nloop invariant x == 59 && y == 2;\nloop invariant x == 60 && y == 2;\nloop invariant x == 61 && y == 2;\nloop invariant x == 62 && y == 2;\nloop invariant x == 63 && y == 2;\nloop invariant x == 64 && y == 2;\nloop invariant x == 65 && y == 2;\nloop invariant x == 66 && y == 2;\nloop invariant x == 67 && y == 2;\nloop invariant x == 68 && y == 2;\nloop invariant x == 69 && y == 2;\nloop invariant x == 70 && y == 2;\nloop invariant x == 71 && y == 2;\nloop invariant x == 72 && y == 2;\nloop invariant x == 73 && y == 2;\nloop invariant x == 74 && y == 2;\nloop invariant x == 75 && y == 2;\nloop invariant x == 76 && y == 2;\nloop invariant x == 77 && y == 2;\nloop invariant x == 78 && y == 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x <= (y * (y + 1) / 2);\nloop invariant y == 0 ==> x == 0;\nloop invariant y > 0 ==> x >= 1;\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x <= (y * (y + 1) / 2);\nloop invariant y == 0 ==> x == 0;\nloop invariant y > 0 ==> x >= 1;\n*/\n```",
            "```\n/*@\nloop invariant ( x >= 0 ) && ( y >= 0 );\nloop invariant ( x <= 4 ) ==> ( y <= 2 );\nloop invariant ( x >= 4 ) ==> ( y >= 1 );\nloop invariant ( x == 4 ) ==> ( y == 1 );\nloop invariant ( x == 0 ) ==> ( y == 0 );\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant x <= y;\nloop invariant y <= 100 * x;\nloop invariant x <= 100;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 2;\nloop invariant x >= y;\nloop invariant x <= x;\nloop invariant y <= y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
            "```\n/*@\nloop invariant x <= x1;\nloop invariant y <= y1;\nloop invariant x1 <= x2;\nloop invariant y1 <= y2;\nloop invariant x1 + y1 <= x2 + y2;\nloop invariant x1 + y1 <= x2 + y2;\nloop invariant x1 + y1 <= x2 + y2;\nloop invariant x1 + y1 <= x2 + y2;\nloop invariant x1 + y1 <= x2 + y2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 1000000;\nloop invariant 0 <= y <= 1000000;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 1000000;\nloop invariant y <= 1000000;\nloop invariant x >= 4;\nloop invariant y >= 2;\nloop invariant x >= 4;\nloop invariant y >= 2;\nloop invariant x >= 4;\nloop invariant y >= 2;\nloop invariant x >= 4;\nloop invariant y >= 2;\nloop invariant x >= 4;\nloop invariant y >= 2;\nloop invariant x >= 4;\nloop invariant y >= 2;\nloop invariant x >= 4;\nloop invariant y >= 2;\nloop invariant x >= 4;\nloop invariant y >= 2;\nloop invariant x >= 4;\nloop invariant y >= 2;\nloop invariant x >= 4;\nloop invariant y >= 2;\nloop invariant x >= 4;\nloop invariant y >= 2;\nloop invariant x >= 4;\nloop invariant y >= 2;\nloop invariant x >= 4;\nloop invariant y >= 2;\nloop invariant x >= 4;\nloop invariant y >= 2;\nloop invariant x >= 4;\nloop invariant y >= 2;\nloop invariant x >= 4;\nloop invariant y >= 2;\nloop invariant x >= 4;\nloop invariant y >= 2;\nloop invariant x >= 4;\nloop invariant y >= 2;\nloop invariant x >= 4;\nloop invariant y >= 2;\nloop invariant x >= 4;\nloop invariant y >= 2;\nloop invariant x >= 4;\nloop invariant y >= 2;\nloop invariant x >= 4;\nloop invariant y >= 2;\nloop invariant x >= 4;\nloop invariant y >= 2;\nloop invariant x >= 4;\nloop invariant y >= 2;\nloop invariant x >= 4;\nloop invariant y >= 2;\nloop invariant x >= 4;\nloop invariant y >= 2;\nloop invariant x >= 4;\nloop invariant y >= 2;\nloop invariant x >= 4;\nloop invariant y >= 2;\nloop invariant x >= 4;\nloop invariant y >= 2;\nloop invariant x >= 4;\nloop invariant y >= 2;\nloop invariant x >= 4;\nloop invariant y >= 2;\nloop invariant x >= 4;\nloop invariant y >= 2;\nloop invariant x >= 4;\nloop invariant y >= 2;\nloop invariant x >= 4;\nloop invariant y >= 2;\nloop invariant x >= 4;\nloop invariant y >= 2;\nloop invariant x >= 4;\nloop invariant y >= 2;\nloop invariant x >= 4;\nloop invariant y >= 2;\nloop invariant x >= 4;\nloop invariant y >= 2;\nloop invariant x >= 4;\nloop invariant y >= 2;\nloop invariant x >= 4;\nloop invariant y >= 2;\nloop invariant x >= 4;\nloop invariant y >= 2;\nloop invariant x >= 4;\nloop invariant y >= 2;\nloop invariant x >= 4;\nloop invariant y >= 2;\nloop invariant x >= 4;\nloop invariant y >= 2;\nloop invariant x >= 4;\nloop invariant y >= 2;\nloop invariant x >= 4;\nloop invariant y >= 2;\nloop invariant x >= 4;\nloop invariant y >= 2;\nloop invariant x >= 4;\nloop invariant y >= 2;\nloop invariant x >= 4;\nloop invariant y >= 2;\nloop invariant x >= 4;\nloop invariant y >= 2;\nloop invariant x >= 4;\nloop invariant y >= 2;\nloop invariant x >= 4;\nloop invariant y >= 2;\nloop invariant x >= 4;\nloop invariant y >= 2;\nloop invariant x >= 4;\nloop invariant y >= 2;\nloop invariant x >= 4;\nloop invariant y >= 2;\nloop invariant x >= 4;\nloop invariant y >= 2;\nloop invariant x >= 4;\nloop invariant y >= 2;\nloop invariant x >= 4;\nloop invariant y >= 2;\nloop invariant x >= 4;\nloop invariant y >= 2;\nloop invariant x >= 4;\nloop invariant y >= 2;\nloop invariant x >= 4;\nloop invariant y >= 2;\nloop invariant x >= 4;\nloop invariant y >= 2;\nloop invariant x >= 4;\nloop invariant y >= 2;\nloop invariant x >= 4;\nloop invariant y >= 2;\nloop invariant x >= 4;\nloop invariant y >= 2;\nloop invariant x >= 4;\nloop invariant y >= 2;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= 100;\nloop invariant y >= 0;\nloop invariant y < 100;\nloop invariant x >= y;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant y == 100 * x;\nloop invariant unknown_int() ==> (y <= 200);\nloop invariant 0 <= x <= 4;\nloop invariant y == 100 * x;\nloop invariant !unknown_int() ==> (x >= 4 && y <= 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet(){\n  int x;\n  return x;\n}\n\nint main(){\nint x = 0, y = 0;\n/*@\n\n\n\n\n*/\nwhile (unknown_int()) {\n   if (unknown_int())\n     {x = x+1; y = y+100;}\n   else if (unknown_int()){\n     if (x >= 4)\n       {x = x+1; y = y+1;}\n   }\n \n   x = x; \n}\nif (x >= 4 && y <= 2)\n  goto ERROR;\n\nreturn 0;\n\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 8,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 2;\nloop invariant x >= 4;\nloop invariant x >= y;\nloop invariant x >= 4 ==> y <= 2;\nloop invariant y <= 2 ==> x >= 4;\nloop invariant x >= 4 ==> y >= 0;\nloop invariant y >= 0 ==> x >= 4;\nloop invariant y <= 2 ==> y >= 0;\nloop invariant y >= 0 ==> y <= 2;\nloop invariant x >= 4 ==> y <= 2 ==> y >= 0;\nloop invariant y <= 2 ==> y >= 0 ==> x >= 4;\nloop invariant x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4;\nloop invariant y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2;\nloop invariant x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2;\nloop invariant y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0;\nloop invariant x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0;\nloop invariant y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4;\nloop invariant x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4;\nloop invariant y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2;\nloop invariant x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2;\nloop invariant y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0;\nloop invariant x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0;\nloop invariant y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4;\nloop invariant x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4;\nloop invariant y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2;\nloop invariant x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2;\nloop invariant y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0;\nloop invariant x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0;\nloop invariant y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4;\nloop invariant x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet(){\n  int x;\n  return x;\n}\n\nint main(){\nint x = 0, y = 0;\n/*@\n\n\n\n\n\nloop invariant i6: x >= 4 ==> y >= 0;\n\nloop invariant i8: y <= 2 ==> y >= 0;\n\nloop invariant i10: x >= 4 ==> y <= 2 ==> y >= 0;\n\nloop invariant i12: x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4;\nloop invariant i13: y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2;\nloop invariant i14: x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2;\nloop invariant i15: y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0;\nloop invariant i16: x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0;\nloop invariant i17: y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4;\nloop invariant i18: x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4;\nloop invariant i19: y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2;\nloop invariant i20: x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2;\nloop invariant i21: y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0;\nloop invariant i22: x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0;\nloop invariant i23: y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4;\nloop invariant i24: x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4;\nloop invariant i25: y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2;\nloop invariant i26: x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2;\nloop invariant i27: y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0;\nloop invariant i28: x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0;\nloop invariant i29: y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4;\nloop invariant i30: x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4;\n*/\nwhile (unknown_int()) {\n   if (unknown_int())\n     {x = x+1; y = y+100;}\n   else if (unknown_int()){\n     if (x >= 4)\n       {x = x+1; y = y+1;}\n   }\n \n   x = x; \n}\nif (x >= 4 && y <= 2)\n  goto ERROR;\n\nreturn 0;\n\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet(){\n  int x;\n  return x;\n}\n\nint main(){\nint x = 0, y = 0;\n/*@\n\n*/\nwhile (unknown_int()) {\n   if (unknown_int())\n     {x = x+1; y = y+100;}\n   else if (unknown_int()){\n     if (x >= 4)\n       {x = x+1; y = y+1;}\n   }\n \n   x = x; \n}\nif (x >= 4 && y <= 2)\n  goto ERROR;\n\nreturn 0;\n\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2) ==> x >= 4;\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2) ==> x >= 4 ==> y <= 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet(){\n  int x;\n  return x;\n}\n\nint main(){\nint x = 0, y = 0;\n/*@\n\n\n\n\n*/\nwhile (unknown_int()) {\n   if (unknown_int())\n     {x = x+1; y = y+100;}\n   else if (unknown_int()){\n     if (x >= 4)\n       {x = x+1; y = y+1;}\n   }\n \n   x = x; \n}\nif (x >= 4 && y <= 2)\n  goto ERROR;\n\nreturn 0;\n\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= 4;\nloop invariant y <= 2;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x >= y;\nloop invariant x >= y + 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet(){\n  int x;\n  return x;\n}\n\nint main(){\nint x = 0, y = 0;\n/*@\n\n\n\n\nloop invariant i5: x >= 0;\nloop invariant i6: y >= 0;\n\n\n*/\nwhile (unknown_int()) {\n   if (unknown_int())\n     {x = x+1; y = y+100;}\n   else if (unknown_int()){\n     if (x >= 4)\n       {x = x+1; y = y+1;}\n   }\n \n   x = x; \n}\nif (x >= 4 && y <= 2)\n  goto ERROR;\n\nreturn 0;\n\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 78,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 2;\nloop invariant x >= 4;\nloop invariant y <= 2 ==> x >= 4;\nloop invariant x >= 4 ==> y <= 2;\nloop invariant x == 5 && y == 2;\nloop invariant x == 6 && y == 2;\nloop invariant x == 7 && y == 2;\nloop invariant x == 8 && y == 2;\nloop invariant x == 9 && y == 2;\nloop invariant x == 10 && y == 2;\nloop invariant x == 11 && y == 2;\nloop invariant x == 12 && y == 2;\nloop invariant x == 13 && y == 2;\nloop invariant x == 14 && y == 2;\nloop invariant x == 15 && y == 2;\nloop invariant x == 16 && y == 2;\nloop invariant x == 17 && y == 2;\nloop invariant x == 18 && y == 2;\nloop invariant x == 19 && y == 2;\nloop invariant x == 20 && y == 2;\nloop invariant x == 21 && y == 2;\nloop invariant x == 22 && y == 2;\nloop invariant x == 23 && y == 2;\nloop invariant x == 24 && y == 2;\nloop invariant x == 25 && y == 2;\nloop invariant x == 26 && y == 2;\nloop invariant x == 27 && y == 2;\nloop invariant x == 28 && y == 2;\nloop invariant x == 29 && y == 2;\nloop invariant x == 30 && y == 2;\nloop invariant x == 31 && y == 2;\nloop invariant x == 32 && y == 2;\nloop invariant x == 33 && y == 2;\nloop invariant x == 34 && y == 2;\nloop invariant x == 35 && y == 2;\nloop invariant x == 36 && y == 2;\nloop invariant x == 37 && y == 2;\nloop invariant x == 38 && y == 2;\nloop invariant x == 39 && y == 2;\nloop invariant x == 40 && y == 2;\nloop invariant x == 41 && y == 2;\nloop invariant x == 42 && y == 2;\nloop invariant x == 43 && y == 2;\nloop invariant x == 44 && y == 2;\nloop invariant x == 45 && y == 2;\nloop invariant x == 46 && y == 2;\nloop invariant x == 47 && y == 2;\nloop invariant x == 48 && y == 2;\nloop invariant x == 49 && y == 2;\nloop invariant x == 50 && y == 2;\nloop invariant x == 51 && y == 2;\nloop invariant x == 52 && y == 2;\nloop invariant x == 53 && y == 2;\nloop invariant x == 54 && y == 2;\nloop invariant x == 55 && y == 2;\nloop invariant x == 56 && y == 2;\nloop invariant x == 57 && y == 2;\nloop invariant x == 58 && y == 2;\nloop invariant x == 59 && y == 2;\nloop invariant x == 60 && y == 2;\nloop invariant x == 61 && y == 2;\nloop invariant x == 62 && y == 2;\nloop invariant x == 63 && y == 2;\nloop invariant x == 64 && y == 2;\nloop invariant x == 65 && y == 2;\nloop invariant x == 66 && y == 2;\nloop invariant x == 67 && y == 2;\nloop invariant x == 68 && y == 2;\nloop invariant x == 69 && y == 2;\nloop invariant x == 70 && y == 2;\nloop invariant x == 71 && y == 2;\nloop invariant x == 72 && y == 2;\nloop invariant x == 73 && y == 2;\nloop invariant x == 74 && y == 2;\nloop invariant x == 75 && y == 2;\nloop invariant x == 76 && y == 2;\nloop invariant x == 77 && y == 2;\nloop invariant x == 78 && y == 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet(){\n  int x;\n  return x;\n}\n\nint main(){\nint x = 0, y = 0;\n/*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown_int()) {\n   if (unknown_int())\n     {x = x+1; y = y+100;}\n   else if (unknown_int()){\n     if (x >= 4)\n       {x = x+1; y = y+1;}\n   }\n \n   x = x; \n}\nif (x >= 4 && y <= 2)\n  goto ERROR;\n\nreturn 0;\n\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x <= (y * (y + 1) / 2);\nloop invariant y == 0 ==> x == 0;\nloop invariant y > 0 ==> x >= 1;\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x <= (y * (y + 1) / 2);\nloop invariant y == 0 ==> x == 0;\nloop invariant y > 0 ==> x >= 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet(){\n  int x;\n  return x;\n}\n\nint main(){\nint x = 0, y = 0;\n/*@\n\n\n\n\n\n*/\nwhile (unknown_int()) {\n   if (unknown_int())\n     {x = x+1; y = y+100;}\n   else if (unknown_int()){\n     if (x >= 4)\n       {x = x+1; y = y+1;}\n   }\n \n   x = x; \n}\nif (x >= 4 && y <= 2)\n  goto ERROR;\n\nreturn 0;\n\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant ( x >= 0 ) && ( y >= 0 );\nloop invariant ( x <= 4 ) ==> ( y <= 2 );\nloop invariant ( x >= 4 ) ==> ( y >= 1 );\nloop invariant ( x == 4 ) ==> ( y == 1 );\nloop invariant ( x == 0 ) ==> ( y == 0 );\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet(){\n  int x;\n  return x;\n}\n\nint main(){\nint x = 0, y = 0;\n/*@\nloop invariant i1: ( x >= 0 ) && ( y >= 0 );\n\nloop invariant i3: ( x >= 4 ) ==> ( y >= 1 );\n\nloop invariant i5: ( x == 0 ) ==> ( y == 0 );\n*/\nwhile (unknown_int()) {\n   if (unknown_int())\n     {x = x+1; y = y+100;}\n   else if (unknown_int()){\n     if (x >= 4)\n       {x = x+1; y = y+1;}\n   }\n \n   x = x; \n}\nif (x >= 4 && y <= 2)\n  goto ERROR;\n\nreturn 0;\n\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet(){\n  int x;\n  return x;\n}\n\nint main(){\nint x = 0, y = 0;\n/*@\n\n*/\nwhile (unknown_int()) {\n   if (unknown_int())\n     {x = x+1; y = y+100;}\n   else if (unknown_int()){\n     if (x >= 4)\n       {x = x+1; y = y+1;}\n   }\n \n   x = x; \n}\nif (x >= 4 && y <= 2)\n  goto ERROR;\n\nreturn 0;\n\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant x <= y;\nloop invariant y <= 100 * x;\nloop invariant x <= 100;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet(){\n  int x;\n  return x;\n}\n\nint main(){\nint x = 0, y = 0;\n/*@\nloop invariant i1: 0 <= x;\nloop invariant i2: 0 <= y;\nloop invariant i3: x <= y;\nloop invariant i4: y <= 100 * x;\n\n*/\nwhile (unknown_int()) {\n   if (unknown_int())\n     {x = x+1; y = y+100;}\n   else if (unknown_int()){\n     if (x >= 4)\n       {x = x+1; y = y+1;}\n   }\n \n   x = x; \n}\nif (x >= 4 && y <= 2)\n  goto ERROR;\n\nreturn 0;\n\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 2;\nloop invariant x >= y;\nloop invariant x <= x;\nloop invariant y <= y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet(){\n  int x;\n  return x;\n}\n\nint main(){\nint x = 0, y = 0;\n/*@\n\n\n\nloop invariant i4: x <= x;\nloop invariant i5: y <= y;\n*/\nwhile (unknown_int()) {\n   if (unknown_int())\n     {x = x+1; y = y+100;}\n   else if (unknown_int()){\n     if (x >= 4)\n       {x = x+1; y = y+1;}\n   }\n \n   x = x; \n}\nif (x >= 4 && y <= 2)\n  goto ERROR;\n\nreturn 0;\n\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet(){\n  int x;\n  return x;\n}\n\nint main(){\nint x = 0, y = 0;\n/*@\n\n\n*/\nwhile (unknown_int()) {\n   if (unknown_int())\n     {x = x+1; y = y+100;}\n   else if (unknown_int()){\n     if (x >= 4)\n       {x = x+1; y = y+1;}\n   }\n \n   x = x; \n}\nif (x >= 4 && y <= 2)\n  goto ERROR;\n\nreturn 0;\n\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant x <= x1;\nloop invariant y <= y1;\nloop invariant x1 <= x2;\nloop invariant y1 <= y2;\nloop invariant x1 + y1 <= x2 + y2;\nloop invariant x1 + y1 <= x2 + y2;\nloop invariant x1 + y1 <= x2 + y2;\nloop invariant x1 + y1 <= x2 + y2;\nloop invariant x1 + y1 <= x2 + y2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet(){\n  int x;\n  return x;\n}\n\nint main(){\nint x = 0, y = 0;\n/*@\n\n\n\n\n\n*/\nwhile (unknown_int()) {\n   if (unknown_int())\n     {x = x+1; y = y+100;}\n   else if (unknown_int()){\n     if (x >= 4)\n       {x = x+1; y = y+1;}\n   }\n \n   x = x; \n}\nif (x >= 4 && y <= 2)\n  goto ERROR;\n\nreturn 0;\n\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 1000000;\nloop invariant 0 <= y <= 1000000;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 1000000;\nloop invariant y <= 1000000;\nloop invariant x >= 4;\nloop invariant y >= 2;\nloop invariant x >= 4;\nloop invariant y >= 2;\nloop invariant x >= 4;\nloop invariant y >= 2;\nloop invariant x >= 4;\nloop invariant y >= 2;\nloop invariant x >= 4;\nloop invariant y >= 2;\nloop invariant x >= 4;\nloop invariant y >= 2;\nloop invariant x >= 4;\nloop invariant y >= 2;\nloop invariant x >= 4;\nloop invariant y >= 2;\nloop invariant x >= 4;\nloop invariant y >= 2;\nloop invariant x >= 4;\nloop invariant y >= 2;\nloop invariant x >= 4;\nloop invariant y >= 2;\nloop invariant x >= 4;\nloop invariant y >= 2;\nloop invariant x >= 4;\nloop invariant y >= 2;\nloop invariant x >= 4;\nloop invariant y >= 2;\nloop invariant x >= 4;\nloop invariant y >= 2;\nloop invariant x >= 4;\nloop invariant y >= 2;\nloop invariant x >= 4;\nloop invariant y >= 2;\nloop invariant x >= 4;\nloop invariant y >= 2;\nloop invariant x >= 4;\nloop invariant y >= 2;\nloop invariant x >= 4;\nloop invariant y >= 2;\nloop invariant x >= 4;\nloop invariant y >= 2;\nloop invariant x >= 4;\nloop invariant y >= 2;\nloop invariant x >= 4;\nloop invariant y >= 2;\nloop invariant x >= 4;\nloop invariant y >= 2;\nloop invariant x >= 4;\nloop invariant y >= 2;\nloop invariant x >= 4;\nloop invariant y >= 2;\nloop invariant x >= 4;\nloop invariant y >= 2;\nloop invariant x >= 4;\nloop invariant y >= 2;\nloop invariant x >= 4;\nloop invariant y >= 2;\nloop invariant x >= 4;\nloop invariant y >= 2;\nloop invariant x >= 4;\nloop invariant y >= 2;\nloop invariant x >= 4;\nloop invariant y >= 2;\nloop invariant x >= 4;\nloop invariant y >= 2;\nloop invariant x >= 4;\nloop invariant y >= 2;\nloop invariant x >= 4;\nloop invariant y >= 2;\nloop invariant x >= 4;\nloop invariant y >= 2;\nloop invariant x >= 4;\nloop invariant y >= 2;\nloop invariant x >= 4;\nloop invariant y >= 2;\nloop invariant x >= 4;\nloop invariant y >= 2;\nloop invariant x >= 4;\nloop invariant y >= 2;\nloop invariant x >= 4;\nloop invariant y >= 2;\nloop invariant x >= 4;\nloop invariant y >= 2;\nloop invariant x >= 4;\nloop invariant y >= 2;\nloop invariant x >= 4;\nloop invariant y >= 2;\nloop invariant x >= 4;\nloop invariant y >= 2;\nloop invariant x >= 4;\nloop invariant y >= 2;\nloop invariant x >= 4;\nloop invariant y >= 2;\nloop invariant x >= 4;\nloop invariant y >= 2;\nloop invariant x >= 4;\nloop invariant y >= 2;\nloop invariant x >= 4;\nloop invariant y >= 2;\nloop invariant x >= 4;\nloop invariant y >= 2;\nloop invariant x >= 4;\nloop invariant y >= 2;\nloop invariant x >= 4;\nloop invariant y >= 2;\nloop invariant x >= 4;\nloop invariant y >= 2;\nloop invariant x >= 4;\nloop invariant y >= 2;\nloop invariant x >= 4;\nloop invariant y >= 2;\nloop invariant x >= 4;\nloop invariant y >= 2;\nloop invariant x >= 4;\nloop invariant y >= 2;\nloop invariant x >= 4;\nloop invariant y >= 2;\nloop invariant x >= 4;\nloop invariant y >= 2;\nloop invariant x >= 4;\nloop invariant y >= 2;\nloop invariant x >= 4;\nloop invariant y >= 2;\nloop invariant x >= 4;\nloop invariant y >= 2;\nloop invariant x >= 4;\nloop invariant y >= 2;\nloop invariant x >= 4;\nloop invariant y >= 2;\nloop invariant x >= 4;\nloop invariant y >= 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet(){\n  int x;\n  return x;\n}\n\nint main(){\nint x = 0, y = 0;\n/*@\n\n\nloop invariant i3: x >= 0;\nloop invariant i4: y >= 0;\n\n\n\n\n*/\nwhile (unknown_int()) {\n   if (unknown_int())\n     {x = x+1; y = y+100;}\n   else if (unknown_int()){\n     if (x >= 4)\n       {x = x+1; y = y+1;}\n   }\n \n   x = x; \n}\nif (x >= 4 && y <= 2)\n  goto ERROR;\n\nreturn 0;\n\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= 100;\nloop invariant y >= 0;\nloop invariant y < 100;\nloop invariant x >= y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet(){\n  int x;\n  return x;\n}\n\nint main(){\nint x = 0, y = 0;\n/*@\n\nloop invariant i2: y >= 0;\n\n\n*/\nwhile (unknown_int()) {\n   if (unknown_int())\n     {x = x+1; y = y+100;}\n   else if (unknown_int()){\n     if (x >= 4)\n       {x = x+1; y = y+1;}\n   }\n \n   x = x; \n}\nif (x >= 4 && y <= 2)\n  goto ERROR;\n\nreturn 0;\n\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 19: unexpected token ')'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet(){\n  int x;\n  return x;\n}\n\nint main(){\nint x = 0, y = 0;\n/*@\nloop invariant i1: 0 <= x <= 4;\nloop invariant i2: y == 100 * x;\nloop invariant i3: unknown_int() ==> (y <= 200);\nloop invariant i4: !unknown_int() ==> (x >= 4 && y <= 2);\nloop invariant i5: 0 <= y <= 2;\nloop invariant i6: x >= 4;\nloop invariant i7: x >= y;\nloop invariant i8: x >= 4 ==> y <= 2;\nloop invariant i9: y <= 2 ==> x >= 4;\nloop invariant i10: x >= 4 ==> y >= 0;\nloop invariant i11: y >= 0 ==> x >= 4;\nloop invariant i12: y <= 2 ==> y >= 0;\nloop invariant i13: y >= 0 ==> y <= 2;\nloop invariant i14: x >= 4 ==> y <= 2 ==> y >= 0;\nloop invariant i15: y <= 2 ==> y >= 0 ==> x >= 4;\nloop invariant i16: x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4;\nloop invariant i17: y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2;\nloop invariant i18: x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2;\nloop invariant i19: y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0;\nloop invariant i20: x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0;\nloop invariant i21: y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4;\nloop invariant i22: x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4;\nloop invariant i23: y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2;\nloop invariant i24: x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2;\nloop invariant i25: y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0;\nloop invariant i26: x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0;\nloop invariant i27: y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4;\nloop invariant i28: x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4;\nloop invariant i29: y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2;\nloop invariant i30: x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2;\nloop invariant i31: y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0;\nloop invariant i32: x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0;\nloop invariant i33: y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4;\nloop invariant i34: x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4;\nloop invariant i35: 0 <= y <= 100000;\nloop invariant i36: x >= (1 + (y - 1) * y / 2);\nloop invariant i37: x >= (1 + (y - 1) * y / 2) ==> x >= 4;\nloop invariant i38: x >= (1 + (y - 1) * y / 2) ==> x >= 4 ==> y <= 2;\nloop invariant i39: y <= 2;\nloop invariant i40: x >= 0;\nloop invariant i41: y >= 0;\nloop invariant i42: x >= y + 1;\nloop invariant i43: x == 5 && y == 2;\nloop invariant i44: x == 6 && y == 2;\nloop invariant i45: x == 7 && y == 2;\nloop invariant i46: x == 8 && y == 2;\nloop invariant i47: x == 9 && y == 2;\nloop invariant i48: x == 10 && y == 2;\nloop invariant i49: x == 11 && y == 2;\nloop invariant i50: x == 12 && y == 2;\nloop invariant i51: x == 13 && y == 2;\nloop invariant i52: x == 14 && y == 2;\nloop invariant i53: x == 15 && y == 2;\nloop invariant i54: x == 16 && y == 2;\nloop invariant i55: x == 17 && y == 2;\nloop invariant i56: x == 18 && y == 2;\nloop invariant i57: x == 19 && y == 2;\nloop invariant i58: x == 20 && y == 2;\nloop invariant i59: x == 21 && y == 2;\nloop invariant i60: x == 22 && y == 2;\nloop invariant i61: x == 23 && y == 2;\nloop invariant i62: x == 24 && y == 2;\nloop invariant i63: x == 25 && y == 2;\nloop invariant i64: x == 26 && y == 2;\nloop invariant i65: x == 27 && y == 2;\nloop invariant i66: x == 28 && y == 2;\nloop invariant i67: x == 29 && y == 2;\nloop invariant i68: x == 30 && y == 2;\nloop invariant i69: x == 31 && y == 2;\nloop invariant i70: x == 32 && y == 2;\nloop invariant i71: x == 33 && y == 2;\nloop invariant i72: x == 34 && y == 2;\nloop invariant i73: x == 35 && y == 2;\nloop invariant i74: x == 36 && y == 2;\nloop invariant i75: x == 37 && y == 2;\nloop invariant i76: x == 38 && y == 2;\nloop invariant i77: x == 39 && y == 2;\nloop invariant i78: x == 40 && y == 2;\nloop invariant i79: x == 41 && y == 2;\nloop invariant i80: x == 42 && y == 2;\nloop invariant i81: x == 43 && y == 2;\nloop invariant i82: x == 44 && y == 2;\nloop invariant i83: x == 45 && y == 2;\nloop invariant i84: x == 46 && y == 2;\nloop invariant i85: x == 47 && y == 2;\nloop invariant i86: x == 48 && y == 2;\nloop invariant i87: x == 49 && y == 2;\nloop invariant i88: x == 50 && y == 2;\nloop invariant i89: x == 51 && y == 2;\nloop invariant i90: x == 52 && y == 2;\nloop invariant i91: x == 53 && y == 2;\nloop invariant i92: x == 54 && y == 2;\nloop invariant i93: x == 55 && y == 2;\nloop invariant i94: x == 56 && y == 2;\nloop invariant i95: x == 57 && y == 2;\nloop invariant i96: x == 58 && y == 2;\nloop invariant i97: x == 59 && y == 2;\nloop invariant i98: x == 60 && y == 2;\nloop invariant i99: x == 61 && y == 2;\nloop invariant i100: x == 62 && y == 2;\nloop invariant i101: x == 63 && y == 2;\nloop invariant i102: x == 64 && y == 2;\nloop invariant i103: x == 65 && y == 2;\nloop invariant i104: x == 66 && y == 2;\nloop invariant i105: x == 67 && y == 2;\nloop invariant i106: x == 68 && y == 2;\nloop invariant i107: x == 69 && y == 2;\nloop invariant i108: x == 70 && y == 2;\nloop invariant i109: x == 71 && y == 2;\nloop invariant i110: x == 72 && y == 2;\nloop invariant i111: x == 73 && y == 2;\nloop invariant i112: x == 74 && y == 2;\nloop invariant i113: x == 75 && y == 2;\nloop invariant i114: x == 76 && y == 2;\nloop invariant i115: x == 77 && y == 2;\nloop invariant i116: x == 78 && y == 2;\nloop invariant i117: x <= (y * (y + 1) / 2);\nloop invariant i118: y == 0 ==> x == 0;\nloop invariant i119: y > 0 ==> x >= 1;\nloop invariant i120: ( x >= 0 ) && ( y >= 0 );\nloop invariant i121: ( x <= 4 ) ==> ( y <= 2 );\nloop invariant i122: ( x >= 4 ) ==> ( y >= 1 );\nloop invariant i123: ( x == 4 ) ==> ( y == 1 );\nloop invariant i124: ( x == 0 ) ==> ( y == 0 );\nloop invariant i125: 0 <= x;\nloop invariant i126: 0 <= y;\nloop invariant i127: x <= y;\nloop invariant i128: y <= 100 * x;\nloop invariant i129: x <= 100;\nloop invariant i130: x <= x;\nloop invariant i131: y <= y;\nloop invariant i132: x <= x1;\nloop invariant i133: y <= y1;\nloop invariant i134: x1 <= x2;\nloop invariant i135: y1 <= y2;\nloop invariant i136: x1 + y1 <= x2 + y2;\nloop invariant i137: 0 <= x <= 1000000;\nloop invariant i138: 0 <= y <= 1000000;\nloop invariant i139: x <= 1000000;\nloop invariant i140: y <= 1000000;\nloop invariant i141: y >= 2;\nloop invariant i142: 1 <= x <= 100;\nloop invariant i143: y < 100;\n*/\nwhile (unknown_int()) {\n   if (unknown_int())\n     {x = x+1; y = y+100;}\n   else if (unknown_int()){\n     if (x >= 4)\n       {x = x+1; y = y+1;}\n   }\n \n   x = x; \n}\nif (x >= 4 && y <= 2)\n  goto ERROR;\n\nreturn 0;\n\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
        "combined_annotation_num_solver_calls": 103,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet(){\n  int x;\n  return x;\n}\n\nint main(){\nint x = 0, y = 0;\n/*@\n\n\n\n\n\n\n\n\n\nloop invariant i10: x >= 4 ==> y >= 0;\n\nloop invariant i12: y <= 2 ==> y >= 0;\n\nloop invariant i14: x >= 4 ==> y <= 2 ==> y >= 0;\n\nloop invariant i16: x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4;\nloop invariant i17: y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2;\nloop invariant i18: x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2;\nloop invariant i19: y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0;\nloop invariant i20: x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0;\nloop invariant i21: y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4;\nloop invariant i22: x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4;\nloop invariant i23: y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2;\nloop invariant i24: x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2;\nloop invariant i25: y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0;\nloop invariant i26: x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0;\nloop invariant i27: y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4;\nloop invariant i28: x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4;\nloop invariant i29: y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2;\nloop invariant i30: x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2;\nloop invariant i31: y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0;\nloop invariant i32: x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0;\nloop invariant i33: y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4;\nloop invariant i34: x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4 ==> y <= 2 ==> y >= 0 ==> x >= 4;\n\n\nloop invariant i37: x >= (1 + (y - 1) * y / 2) ==> x >= 4;\nloop invariant i38: x >= (1 + (y - 1) * y / 2) ==> x >= 4 ==> y <= 2;\n\nloop invariant i40: x >= 0;\nloop invariant i41: y >= 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i117: x <= (y * (y + 1) / 2);\nloop invariant i118: y == 0 ==> x == 0;\nloop invariant i119: y > 0 ==> x >= 1;\nloop invariant i120: ( x >= 0 ) && ( y >= 0 );\n\nloop invariant i122: ( x >= 4 ) ==> ( y >= 1 );\n\nloop invariant i124: ( x == 0 ) ==> ( y == 0 );\nloop invariant i125: 0 <= x;\nloop invariant i126: 0 <= y;\nloop invariant i127: x <= y;\nloop invariant i128: y <= 100 * x;\n\nloop invariant i130: x <= x;\nloop invariant i131: y <= y;\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown_int()) {\n   if (unknown_int())\n     {x = x+1; y = y+100;}\n   else if (unknown_int()){\n     if (x >= 4)\n       {x = x+1; y = y+1;}\n   }\n \n   x = x; \n}\nif (x >= 4 && y <= 2)\n  goto ERROR;\n\nreturn 0;\n\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/split.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/11.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/15.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/16.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/18.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/23.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/30.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/32.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/37.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/38.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/41.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/43.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/44.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/46.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/popl.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/05.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/07.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/37.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/39.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/gulv_simp.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/13.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/14.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/19.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/20.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/39.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/cav.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/19.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/gulv.c"
        ],
        "skipped": [],
        "total": 133,
        "success_count": 109,
        "failure_count": 24,
        "success_rate": 0.8195488721804511
    }
}