{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/05.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main()\n{\n\tint flag = unknown1();\n\tint x = 0;\n\tint y = 0;\n\n\tint j = 0;\n\tint i = 0;\n\n\twhile(unknown2())\n\t{\n\t  x++;\n\t  y++;\n\t  i+=x;\n\t  j+=y;\n\t  if(flag)  j+=1;\n\t} \n\t{;\n//@ assert(j>=i);\n}\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= x <= 1 && 0 <= y <= 1 && 0 <= i <= 1 && 0 <= j <= 1;\nloop invariant 0 <= x <= 1 && 0 <= y <= 1 && 0 <= i <= 1 && 0 <= j <= 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= unknown2();\nloop invariant 0 <= y <= unknown2();\nloop invariant 0 <= i <= unknown2() * (unknown2() + 1) / 2;\nloop invariant 0 <= j <= unknown2() * (unknown2() + 1) / 2;\nloop invariant x <= y;\nloop invariant i <= j;\nloop invariant 0 <= x <= unknown2();\nloop invariant 0 <= y <= unknown2();\nloop invariant 0 <= i <= unknown2() * (unknown2() + 1) / 2;\nloop invariant 0 <= j <= unknown2() * (unknown2() + 1) / 2;\nloop invariant x <= y;\nloop invariant i <= j;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= i;\nloop invariant 0 <= j;\nloop invariant i == x*(x+1)/2;\nloop invariant j == y*(y+1)/2 + flag;\nloop invariant i <= j;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= i;\nloop invariant 0 <= j;\nloop invariant j>=i ==> flag ==> x == y;\nloop invariant j>=i ==> !flag ==> x > y;\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant x >= y;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant j >= i;\nloop invariant j >= i + x;\nloop invariant j >= i + y;\nloop invariant j >= i + x + y;\nloop invariant j >= i + x + y + 1;\nloop invariant j >= i + x + y + 1 + y;\nloop invariant j >= i + x + y + 1 + y + x;\nloop invariant j >= i + x + y + 1 + y + x + y;\nloop invariant j >= i + x + y + 1 + y + x + y + x;\nloop invariant j >= i + x + y + 1 + y + x + y + x + y;\nloop invariant j >= i + x + y + 1 + y + x + y + x + y + x;\nloop invariant j >= i + x + y + 1 + y + x + y + x + y + x + y;\nloop invariant j >= i + x + y + 1 + y + x + y + x + y + x + y + x;\nloop invariant j >= i + x + y + 1 + y + x + y + x + y + x + y + x + y;\nloop invariant j >= i + x + y + 1 + y + x + y + x + y + x + y + x + y + x;\nloop invariant j >= i + x + y + 1 + y + x + y + x + y + x + y + x + y + x + y;\nloop invariant j >= i + x + y + 1 + y + x + y + x + y + x + y + x + y + x + y + x;\nloop invariant j >= i + x + y + 1 + y + x + y + x + y + x + y + x + y + x + y + x + y;\nloop invariant j >= i + x + y + 1 + y + x + y + x + y + x + y + x + y + x + y + x + y + x;\nloop invariant j >= i + x + y + 1 + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y;\nloop invariant j >= i + x + y + 1 + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x;\nloop invariant j >= i + x + y + 1 + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y;\nloop invariant j >= i + x + y + 1 + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x;\nloop invariant j >= i + x + y + 1 + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y;\nloop invariant j >= i + x + y + 1 + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x;\nloop invariant j >= i + x + y + 1 + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y;\nloop invariant j >= i + x + y + 1 + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x;\nloop invariant j >= i + x + y + 1 + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y;\nloop invariant j >= i + x + y + 1 + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= i;\nloop invariant 0 <= j;\nloop invariant x <= y;\nloop invariant i <= j;\nloop invariant i <= (x * (x + 1) / 2);\nloop invariant j <= (y * (y + 1) / 2);\nloop invariant x + y == i + j;\nloop invariant x + y == (j - i) / (x - y);\nloop invariant i + j == (x * (x + 1) / 2) + (y * (y + 1) / 2);\nloop invariant i + j == (x * (x + 1) / 2) + (y * (y + 1) / 2) + flag * (x + y);\nloop invariant i + j == (x * (x + 1) / 2) + (y * (y + 1) / 2) + flag * (x + y) == (j - i) / (x - y);\nloop invariant i + j == (x * (x + 1) / 2) + (y * (y + 1) / 2) + flag * (x + y) == (j - i) / (x - y) == (x * (x + 1) / 2) + (y * (y + 1) / 2) + flag * (x + y);\nloop invariant i + j == (x * (x + 1) / 2) + (y * (y + 1) / 2) + flag * (x + y) == (j - i) / (x - y) == (x * (x + 1) / 2) + (y * (y + 1) / 2) + flag * (x + y) == (x * (x + 1) / 2) + (y * (y + 1) / 2) + flag * (x + y);\nloop invariant i + j == (x * (x + 1) / 2) + (y * (y + 1) / 2) + flag * (x + y) == (j - i) / (x - y) == (x * (x + 1) / 2) + (y * (y + 1) / 2) + flag * (x + y) == (x * (x + 1) / 2) + (y * (y + 1) / 2) + flag * (x + y) == (x * (x + 1) / 2) + (y * (y + 1) / 2) + flag * (x + y);\nloop invariant i + j == (x * (x + 1) / 2) + (y * (y + 1) / 2) + flag * (x + y) == (j - i) / (x - y) == (x * (x + 1) / 2) + (y * (y + 1) / 2) + flag * (x + y) == (x * (x + 1) / 2) + (y * (y + 1) / 2) + flag * (x + y) == (x * (x + 1) / 2) + (y * (y + 1) / 2) + flag * (x + y) == (x * (x + 1) / 2) + (y * (y + 1) / 2) + flag * (x + y);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y;\nloop invariant 0 <= i;\nloop invariant 0 <= j;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant i <= j;\nloop invariant i <= x * x / 2;\nloop invariant j <= y * (y + 1) / 2;\nloop invariant i <= j;\nloop invariant j <= y * (y + 1) / 2;\nloop invariant i <= j;\nloop invariant i <= x * x / 2;\nloop invariant j <= y * (y + 1) / 2;\nloop invariant i <= j;\nloop invariant j <= y * (y + 1) / 2;\nloop invariant i <= j;\nloop invariant i <= x * x / 2;\nloop invariant j <= y * (y + 1) / 2;\nloop invariant i <= j;\nloop invariant j <= y * (y + 1) / 2;\nloop invariant i <= j;\nloop invariant i <= x * x / 2;\nloop invariant j <= y * (y + 1) / 2;\nloop invariant i <= j;\nloop invariant j <= y * (y + 1) / 2;\nloop invariant i <= j;\nloop invariant i <= x * x / 2;\nloop invariant j <= y * (y + 1) / 2;\nloop invariant i <= j;\nloop invariant j <= y * (y + 1) / 2;\nloop invariant i <= j;\nloop invariant i <= x * x / 2;\nloop invariant j <= y * (y + 1) / 2;\nloop invariant i <= j;\nloop invariant j <= y * (y + 1) / 2;\nloop invariant i <= j;\nloop invariant i <= x * x / 2;\nloop invariant j <= y * (y + 1) / 2;\nloop invariant i <= j;\nloop invariant j <= y * (y + 1) / 2;\nloop invariant i <= j;\nloop invariant i <= x * x / 2;\nloop invariant j <= y * (y + 1) / 2;\nloop invariant i <= j;\nloop invariant j <= y * (y + 1) / 2;\nloop invariant i <= j;\nloop invariant i <= x * x / 2;\nloop invariant j <= y * (y + 1) / 2;\nloop invariant i <= j;\nloop invariant j <= y * (y + 1) / 2;\nloop invariant i <= j;\nloop invariant i <= x * x / 2;\nloop invariant j <= y * (y + 1) / 2;\nloop invariant i <= j;\nloop invariant j <= y * (y + 1) / 2;\nloop invariant i <= j;\nloop invariant i <= x * x / 2;\nloop invariant j <= y * (y + 1) / 2;\nloop invariant i <= j;\nloop invariant j <= y * (y + 1) / 2;\nloop invariant i <= j;\nloop invariant i <= x * x / 2;\nloop invariant j <= y * (y + 1) / 2;\nloop invariant i <= j;\nloop invariant j <= y * (y + 1) / 2;\nloop invariant i <= j;\nloop invariant i <= x * x / 2;\nloop invariant j <= y * (y + 1) / 2;\nloop invariant i <= j;\nloop invariant j <= y * (y + 1) / 2;\nloop invariant i <= j;\nloop invariant i <= x * x / 2;\nloop invariant j <= y * (y + 1) / 2;\nloop invariant i <= j;\nloop invariant j <= y * (y + 1) / 2;\nloop invariant i <= j;\nloop invariant i <= x * x / 2;\nloop invariant j <= y * (y + 1) / 2;\nloop invariant i <= j;\nloop invariant j <= y * (y + 1) / 2;\nloop invariant i <= j;\nloop invariant i <= x * x / 2;\nloop invariant j <= y * (y + 1) / 2;\nloop invariant i <= j;\nloop invariant j <= y * (y + 1) / 2;\nloop invariant i <= j;\nloop invariant i <= x * x / 2;\nloop invariant j <= y * (y + 1) / 2;\nloop invariant i <= j;\nloop invariant j <= y * (y + 1) / 2;\nloop invariant i <= j;\nloop invariant i <= x * x / 2;\n*/\n```",
            "```\n/*@\nloop invariant x >= 0; loop invariant y >= 0; loop invariant i >= x; loop invariant j >= y; loop invariant j >= i; loop invariant flag ==> j >= i + 1; loop invariant !flag ==> j >= i;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= x' + 1;\nloop invariant 0 <= y <= y' + 1;\nloop invariant i <= i' + x;\nloop invariant j <= j' + y;\nloop invariant j' + y' + 1 >= i' + x';\nloop invariant i' + x' >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= unknown2();\nloop invariant 0 <= y <= unknown2();\nloop invariant 0 <= i <= (unknown2() * unknown2() / 2 + unknown2() * unknown2() / 2);\nloop invariant 0 <= j <= (unknown2() * unknown2() / 2 + unknown2() * unknown2() / 2 + unknown1() * unknown2() + unknown1() * unknown2());\nloop invariant i = (x * (x + 1) / 2);\nloop invariant j = (y * (y + 1) / 2 + x * (x + 1) / 2 + unknown1() * unknown2());\nloop invariant x = (i * 2 / unknown2() - i / unknown2());\nloop invariant y = (j * 2 / unknown2() - j / unknown2());\nloop invariant j >= i ==> (j = (y * (y + 1) / 2 + x * (x + 1) / 2 + unknown1() * unknown2()));\nloop invariant j >= i ==> (y >= x);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant i <= j;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= j <= 1;\nloop invariant 0 <= i <= 1;\nloop invariant j >= i;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant i == j;\nloop invariant x == y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= j;\nloop invariant x > 0;\nloop invariant y > 0;\nloop invariant i >= (j - y);\nloop invariant j >= (i + y);\n*/\n```",
            "```\n/*@\nloop invariant y >= x;\nloop invariant j >= i;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant j >= 0;\nloop invariant i >= 0;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 1 && 0 <= y <= 1 && 0 <= i <= 1 && 0 <= j <= 1;\nloop invariant 0 <= x <= 1 && 0 <= y <= 1 && 0 <= i <= 1 && 0 <= j <= 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main()\n{\n\tint flag = unknown1();\n\tint x = 0;\n\tint y = 0;\n\n\tint j = 0;\n\tint i = 0;\n\n\t/*@\n\n*/\nwhile(unknown2())\n\t{\n\t  x++;\n\t  y++;\n\t  i+=x;\n\t  j+=y;\n\t  if(flag)  j+=1;\n\t} \n\t{;\n//@ assert(j>=i);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= unknown2();\nloop invariant 0 <= y <= unknown2();\nloop invariant 0 <= i <= unknown2() * (unknown2() + 1) / 2;\nloop invariant 0 <= j <= unknown2() * (unknown2() + 1) / 2;\nloop invariant x <= y;\nloop invariant i <= j;\nloop invariant 0 <= x <= unknown2();\nloop invariant 0 <= y <= unknown2();\nloop invariant 0 <= i <= unknown2() * (unknown2() + 1) / 2;\nloop invariant 0 <= j <= unknown2() * (unknown2() + 1) / 2;\nloop invariant x <= y;\nloop invariant i <= j;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main()\n{\n\tint flag = unknown1();\n\tint x = 0;\n\tint y = 0;\n\n\tint j = 0;\n\tint i = 0;\n\n\t/*@\n\n\n\n\nloop invariant i5: x <= y;\nloop invariant i6: i <= j;\n*/\nwhile(unknown2())\n\t{\n\t  x++;\n\t  y++;\n\t  i+=x;\n\t  j+=y;\n\t  if(flag)  j+=1;\n\t} \n\t{;\n//@ assert(j>=i);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= i;\nloop invariant 0 <= j;\nloop invariant i == x*(x+1)/2;\nloop invariant j == y*(y+1)/2 + flag;\nloop invariant i <= j;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main()\n{\n\tint flag = unknown1();\n\tint x = 0;\n\tint y = 0;\n\n\tint j = 0;\n\tint i = 0;\n\n\t/*@\nloop invariant i1: 0 <= x;\nloop invariant i2: 0 <= y;\nloop invariant i3: 0 <= i;\nloop invariant i4: 0 <= j;\nloop invariant i5: i == x*(x+1)/2;\n\n\n*/\nwhile(unknown2())\n\t{\n\t  x++;\n\t  y++;\n\t  i+=x;\n\t  j+=y;\n\t  if(flag)  j+=1;\n\t} \n\t{;\n//@ assert(j>=i);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= i;\nloop invariant 0 <= j;\nloop invariant j>=i ==> flag ==> x == y;\nloop invariant j>=i ==> !flag ==> x > y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main()\n{\n\tint flag = unknown1();\n\tint x = 0;\n\tint y = 0;\n\n\tint j = 0;\n\tint i = 0;\n\n\t/*@\nloop invariant i1: 0 <= x;\nloop invariant i2: 0 <= y;\nloop invariant i3: 0 <= i;\nloop invariant i4: 0 <= j;\n\n\n*/\nwhile(unknown2())\n\t{\n\t  x++;\n\t  y++;\n\t  i+=x;\n\t  j+=y;\n\t  if(flag)  j+=1;\n\t} \n\t{;\n//@ assert(j>=i);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main()\n{\n\tint flag = unknown1();\n\tint x = 0;\n\tint y = 0;\n\n\tint j = 0;\n\tint i = 0;\n\n\t/*@\n\n*/\nwhile(unknown2())\n\t{\n\t  x++;\n\t  y++;\n\t  i+=x;\n\t  j+=y;\n\t  if(flag)  j+=1;\n\t} \n\t{;\n//@ assert(j>=i);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 28,
                "annotations": "```\n/*@\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant x >= y;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant j >= i;\nloop invariant j >= i + x;\nloop invariant j >= i + y;\nloop invariant j >= i + x + y;\nloop invariant j >= i + x + y + 1;\nloop invariant j >= i + x + y + 1 + y;\nloop invariant j >= i + x + y + 1 + y + x;\nloop invariant j >= i + x + y + 1 + y + x + y;\nloop invariant j >= i + x + y + 1 + y + x + y + x;\nloop invariant j >= i + x + y + 1 + y + x + y + x + y;\nloop invariant j >= i + x + y + 1 + y + x + y + x + y + x;\nloop invariant j >= i + x + y + 1 + y + x + y + x + y + x + y;\nloop invariant j >= i + x + y + 1 + y + x + y + x + y + x + y + x;\nloop invariant j >= i + x + y + 1 + y + x + y + x + y + x + y + x + y;\nloop invariant j >= i + x + y + 1 + y + x + y + x + y + x + y + x + y + x;\nloop invariant j >= i + x + y + 1 + y + x + y + x + y + x + y + x + y + x + y;\nloop invariant j >= i + x + y + 1 + y + x + y + x + y + x + y + x + y + x + y + x;\nloop invariant j >= i + x + y + 1 + y + x + y + x + y + x + y + x + y + x + y + x + y;\nloop invariant j >= i + x + y + 1 + y + x + y + x + y + x + y + x + y + x + y + x + y + x;\nloop invariant j >= i + x + y + 1 + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y;\nloop invariant j >= i + x + y + 1 + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x;\nloop invariant j >= i + x + y + 1 + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y;\nloop invariant j >= i + x + y + 1 + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x;\nloop invariant j >= i + x + y + 1 + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y;\nloop invariant j >= i + x + y + 1 + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x;\nloop invariant j >= i + x + y + 1 + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y;\nloop invariant j >= i + x + y + 1 + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x;\nloop invariant j >= i + x + y + 1 + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y;\nloop invariant j >= i + x + y + 1 + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main()\n{\n\tint flag = unknown1();\n\tint x = 0;\n\tint y = 0;\n\n\tint j = 0;\n\tint i = 0;\n\n\t/*@\nloop invariant i1: 0 <= x;\nloop invariant i2: 0 <= y;\nloop invariant i3: x >= y;\nloop invariant i4: i >= 0;\nloop invariant i5: j >= 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile(unknown2())\n\t{\n\t  x++;\n\t  y++;\n\t  i+=x;\n\t  j+=y;\n\t  if(flag)  j+=1;\n\t} \n\t{;\n//@ assert(j>=i);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= i;\nloop invariant 0 <= j;\nloop invariant x <= y;\nloop invariant i <= j;\nloop invariant i <= (x * (x + 1) / 2);\nloop invariant j <= (y * (y + 1) / 2);\nloop invariant x + y == i + j;\nloop invariant x + y == (j - i) / (x - y);\nloop invariant i + j == (x * (x + 1) / 2) + (y * (y + 1) / 2);\nloop invariant i + j == (x * (x + 1) / 2) + (y * (y + 1) / 2) + flag * (x + y);\nloop invariant i + j == (x * (x + 1) / 2) + (y * (y + 1) / 2) + flag * (x + y) == (j - i) / (x - y);\nloop invariant i + j == (x * (x + 1) / 2) + (y * (y + 1) / 2) + flag * (x + y) == (j - i) / (x - y) == (x * (x + 1) / 2) + (y * (y + 1) / 2) + flag * (x + y);\nloop invariant i + j == (x * (x + 1) / 2) + (y * (y + 1) / 2) + flag * (x + y) == (j - i) / (x - y) == (x * (x + 1) / 2) + (y * (y + 1) / 2) + flag * (x + y) == (x * (x + 1) / 2) + (y * (y + 1) / 2) + flag * (x + y);\nloop invariant i + j == (x * (x + 1) / 2) + (y * (y + 1) / 2) + flag * (x + y) == (j - i) / (x - y) == (x * (x + 1) / 2) + (y * (y + 1) / 2) + flag * (x + y) == (x * (x + 1) / 2) + (y * (y + 1) / 2) + flag * (x + y) == (x * (x + 1) / 2) + (y * (y + 1) / 2) + flag * (x + y);\nloop invariant i + j == (x * (x + 1) / 2) + (y * (y + 1) / 2) + flag * (x + y) == (j - i) / (x - y) == (x * (x + 1) / 2) + (y * (y + 1) / 2) + flag * (x + y) == (x * (x + 1) / 2) + (y * (y + 1) / 2) + flag * (x + y) == (x * (x + 1) / 2) + (y * (y + 1) / 2) + flag * (x + y) == (x * (x + 1) / 2) + (y * (y + 1) / 2) + flag * (x + y);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main()\n{\n\tint flag = unknown1();\n\tint x = 0;\n\tint y = 0;\n\n\tint j = 0;\n\tint i = 0;\n\n\t/*@\nloop invariant i1: 0 <= x;\nloop invariant i2: 0 <= y;\nloop invariant i3: 0 <= i;\nloop invariant i4: 0 <= j;\nloop invariant i5: x <= y;\nloop invariant i6: i <= j;\nloop invariant i7: i <= (x * (x + 1) / 2);\n\n\n\n\n\n\n\n\n\n\n*/\nwhile(unknown2())\n\t{\n\t  x++;\n\t  y++;\n\t  i+=x;\n\t  j+=y;\n\t  if(flag)  j+=1;\n\t} \n\t{;\n//@ assert(j>=i);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y;\nloop invariant 0 <= i;\nloop invariant 0 <= j;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant i <= j;\nloop invariant i <= x * x / 2;\nloop invariant j <= y * (y + 1) / 2;\nloop invariant i <= j;\nloop invariant j <= y * (y + 1) / 2;\nloop invariant i <= j;\nloop invariant i <= x * x / 2;\nloop invariant j <= y * (y + 1) / 2;\nloop invariant i <= j;\nloop invariant j <= y * (y + 1) / 2;\nloop invariant i <= j;\nloop invariant i <= x * x / 2;\nloop invariant j <= y * (y + 1) / 2;\nloop invariant i <= j;\nloop invariant j <= y * (y + 1) / 2;\nloop invariant i <= j;\nloop invariant i <= x * x / 2;\nloop invariant j <= y * (y + 1) / 2;\nloop invariant i <= j;\nloop invariant j <= y * (y + 1) / 2;\nloop invariant i <= j;\nloop invariant i <= x * x / 2;\nloop invariant j <= y * (y + 1) / 2;\nloop invariant i <= j;\nloop invariant j <= y * (y + 1) / 2;\nloop invariant i <= j;\nloop invariant i <= x * x / 2;\nloop invariant j <= y * (y + 1) / 2;\nloop invariant i <= j;\nloop invariant j <= y * (y + 1) / 2;\nloop invariant i <= j;\nloop invariant i <= x * x / 2;\nloop invariant j <= y * (y + 1) / 2;\nloop invariant i <= j;\nloop invariant j <= y * (y + 1) / 2;\nloop invariant i <= j;\nloop invariant i <= x * x / 2;\nloop invariant j <= y * (y + 1) / 2;\nloop invariant i <= j;\nloop invariant j <= y * (y + 1) / 2;\nloop invariant i <= j;\nloop invariant i <= x * x / 2;\nloop invariant j <= y * (y + 1) / 2;\nloop invariant i <= j;\nloop invariant j <= y * (y + 1) / 2;\nloop invariant i <= j;\nloop invariant i <= x * x / 2;\nloop invariant j <= y * (y + 1) / 2;\nloop invariant i <= j;\nloop invariant j <= y * (y + 1) / 2;\nloop invariant i <= j;\nloop invariant i <= x * x / 2;\nloop invariant j <= y * (y + 1) / 2;\nloop invariant i <= j;\nloop invariant j <= y * (y + 1) / 2;\nloop invariant i <= j;\nloop invariant i <= x * x / 2;\nloop invariant j <= y * (y + 1) / 2;\nloop invariant i <= j;\nloop invariant j <= y * (y + 1) / 2;\nloop invariant i <= j;\nloop invariant i <= x * x / 2;\nloop invariant j <= y * (y + 1) / 2;\nloop invariant i <= j;\nloop invariant j <= y * (y + 1) / 2;\nloop invariant i <= j;\nloop invariant i <= x * x / 2;\nloop invariant j <= y * (y + 1) / 2;\nloop invariant i <= j;\nloop invariant j <= y * (y + 1) / 2;\nloop invariant i <= j;\nloop invariant i <= x * x / 2;\nloop invariant j <= y * (y + 1) / 2;\nloop invariant i <= j;\nloop invariant j <= y * (y + 1) / 2;\nloop invariant i <= j;\nloop invariant i <= x * x / 2;\nloop invariant j <= y * (y + 1) / 2;\nloop invariant i <= j;\nloop invariant j <= y * (y + 1) / 2;\nloop invariant i <= j;\nloop invariant i <= x * x / 2;\nloop invariant j <= y * (y + 1) / 2;\nloop invariant i <= j;\nloop invariant j <= y * (y + 1) / 2;\nloop invariant i <= j;\nloop invariant i <= x * x / 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main()\n{\n\tint flag = unknown1();\n\tint x = 0;\n\tint y = 0;\n\n\tint j = 0;\n\tint i = 0;\n\n\t/*@\nloop invariant i1: 0 <= y;\nloop invariant i2: 0 <= i;\nloop invariant i3: 0 <= j;\nloop invariant i4: x >= 0;\nloop invariant i5: y >= 0;\n\n\n\n*/\nwhile(unknown2())\n\t{\n\t  x++;\n\t  y++;\n\t  i+=x;\n\t  j+=y;\n\t  if(flag)  j+=1;\n\t} \n\t{;\n//@ assert(j>=i);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant x >= 0; loop invariant y >= 0; loop invariant i >= x; loop invariant j >= y; loop invariant j >= i; loop invariant flag ==> j >= i + 1; loop invariant !flag ==> j >= i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main()\n{\n\tint flag = unknown1();\n\tint x = 0;\n\tint y = 0;\n\n\tint j = 0;\n\tint i = 0;\n\n\t/*@\nloop invariant i1: x >= 0; loop invariant y >= 0; loop invariant i >= x; loop invariant j >= y; loop invariant j >= i; loop invariant flag ==> j >= i + 1; loop invariant !flag ==> j >= i;\n*/\nwhile(unknown2())\n\t{\n\t  x++;\n\t  y++;\n\t  i+=x;\n\t  j+=y;\n\t  if(flag)  j+=1;\n\t} \n\t{;\n//@ assert(j>=i);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= x' + 1;\nloop invariant 0 <= y <= y' + 1;\nloop invariant i <= i' + x;\nloop invariant j <= j' + y;\nloop invariant j' + y' + 1 >= i' + x';\nloop invariant i' + x' >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main()\n{\n\tint flag = unknown1();\n\tint x = 0;\n\tint y = 0;\n\n\tint j = 0;\n\tint i = 0;\n\n\t/*@\n\nloop invariant i2: 0 <= y <= y' + 1;\nloop invariant i3: i <= i' + x;\nloop invariant i4: j <= j' + y;\nloop invariant i5: j' + y' + 1 >= i' + x';\nloop invariant i6: i' + x' >= 0;\n*/\nwhile(unknown2())\n\t{\n\t  x++;\n\t  y++;\n\t  i+=x;\n\t  j+=y;\n\t  if(flag)  j+=1;\n\t} \n\t{;\n//@ assert(j>=i);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 10,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= unknown2();\nloop invariant 0 <= y <= unknown2();\nloop invariant 0 <= i <= (unknown2() * unknown2() / 2 + unknown2() * unknown2() / 2);\nloop invariant 0 <= j <= (unknown2() * unknown2() / 2 + unknown2() * unknown2() / 2 + unknown1() * unknown2() + unknown1() * unknown2());\nloop invariant i = (x * (x + 1) / 2);\nloop invariant j = (y * (y + 1) / 2 + x * (x + 1) / 2 + unknown1() * unknown2());\nloop invariant x = (i * 2 / unknown2() - i / unknown2());\nloop invariant y = (j * 2 / unknown2() - j / unknown2());\nloop invariant j >= i ==> (j = (y * (y + 1) / 2 + x * (x + 1) / 2 + unknown1() * unknown2()));\nloop invariant j >= i ==> (y >= x);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main()\n{\n\tint flag = unknown1();\n\tint x = 0;\n\tint y = 0;\n\n\tint j = 0;\n\tint i = 0;\n\n\t/*@\n\n\n\n\n\n\n\n\n\nloop invariant i10: j >= i ==> (y >= x);\n*/\nwhile(unknown2())\n\t{\n\t  x++;\n\t  y++;\n\t  i+=x;\n\t  j+=y;\n\t  if(flag)  j+=1;\n\t} \n\t{;\n//@ assert(j>=i);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant i <= j;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main()\n{\n\tint flag = unknown1();\n\tint x = 0;\n\tint y = 0;\n\n\tint j = 0;\n\tint i = 0;\n\n\t/*@\nloop invariant i1: 0 <= x <= y;\nloop invariant i2: i <= j;\n*/\nwhile(unknown2())\n\t{\n\t  x++;\n\t  y++;\n\t  i+=x;\n\t  j+=y;\n\t  if(flag)  j+=1;\n\t} \n\t{;\n//@ assert(j>=i);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= j <= 1;\nloop invariant 0 <= i <= 1;\nloop invariant j >= i;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant i == j;\nloop invariant x == y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main()\n{\n\tint flag = unknown1();\n\tint x = 0;\n\tint y = 0;\n\n\tint j = 0;\n\tint i = 0;\n\n\t/*@\n\n\nloop invariant i3: j >= i;\nloop invariant i4: x >= 0;\nloop invariant i5: y >= 0;\n\nloop invariant i7: x == y;\n*/\nwhile(unknown2())\n\t{\n\t  x++;\n\t  y++;\n\t  i+=x;\n\t  j+=y;\n\t  if(flag)  j+=1;\n\t} \n\t{;\n//@ assert(j>=i);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= j;\nloop invariant x > 0;\nloop invariant y > 0;\nloop invariant i >= (j - y);\nloop invariant j >= (i + y);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main()\n{\n\tint flag = unknown1();\n\tint x = 0;\n\tint y = 0;\n\n\tint j = 0;\n\tint i = 0;\n\n\t/*@\n\n\n\n\n\n*/\nwhile(unknown2())\n\t{\n\t  x++;\n\t  y++;\n\t  i+=x;\n\t  j+=y;\n\t  if(flag)  j+=1;\n\t} \n\t{;\n//@ assert(j>=i);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant y >= x;\nloop invariant j >= i;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant j >= 0;\nloop invariant i >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main()\n{\n\tint flag = unknown1();\n\tint x = 0;\n\tint y = 0;\n\n\tint j = 0;\n\tint i = 0;\n\n\t/*@\nloop invariant i1: y >= x;\nloop invariant i2: j >= i;\nloop invariant i3: x >= 0;\nloop invariant i4: y >= 0;\nloop invariant i5: j >= 0;\nloop invariant i6: i >= 0;\n*/\nwhile(unknown2())\n\t{\n\t  x++;\n\t  y++;\n\t  i+=x;\n\t  j+=y;\n\t  if(flag)  j+=1;\n\t} \n\t{;\n//@ assert(j>=i);\n}\n\n}",
                "checker_output_after_prune": true
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 21: unexpected token ')'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main()\n{\n\tint flag = unknown1();\n\tint x = 0;\n\tint y = 0;\n\n\tint j = 0;\n\tint i = 0;\n\n\t/*@\nloop invariant i1: 0 <= x <= 1 && 0 <= y <= 1 && 0 <= i <= 1 && 0 <= j <= 1;\nloop invariant i2: 0 <= x <= unknown2();\nloop invariant i3: 0 <= y <= unknown2();\nloop invariant i4: 0 <= i <= unknown2() * (unknown2() + 1) / 2;\nloop invariant i5: 0 <= j <= unknown2() * (unknown2() + 1) / 2;\nloop invariant i6: x <= y;\nloop invariant i7: i <= j;\nloop invariant i8: 0 <= x;\nloop invariant i9: 0 <= y;\nloop invariant i10: 0 <= i;\nloop invariant i11: 0 <= j;\nloop invariant i12: i == x*(x+1)/2;\nloop invariant i13: j == y*(y+1)/2 + flag;\nloop invariant i14: j>=i ==> flag ==> x == y;\nloop invariant i15: j>=i ==> !flag ==> x > y;\nloop invariant i16: x >= y;\nloop invariant i17: i >= 0;\nloop invariant i18: j >= 0;\nloop invariant i19: j >= i;\nloop invariant i20: j >= i + x;\nloop invariant i21: j >= i + y;\nloop invariant i22: j >= i + x + y;\nloop invariant i23: j >= i + x + y + 1;\nloop invariant i24: j >= i + x + y + 1 + y;\nloop invariant i25: j >= i + x + y + 1 + y + x;\nloop invariant i26: j >= i + x + y + 1 + y + x + y;\nloop invariant i27: j >= i + x + y + 1 + y + x + y + x;\nloop invariant i28: j >= i + x + y + 1 + y + x + y + x + y;\nloop invariant i29: j >= i + x + y + 1 + y + x + y + x + y + x;\nloop invariant i30: j >= i + x + y + 1 + y + x + y + x + y + x + y;\nloop invariant i31: j >= i + x + y + 1 + y + x + y + x + y + x + y + x;\nloop invariant i32: j >= i + x + y + 1 + y + x + y + x + y + x + y + x + y;\nloop invariant i33: j >= i + x + y + 1 + y + x + y + x + y + x + y + x + y + x;\nloop invariant i34: j >= i + x + y + 1 + y + x + y + x + y + x + y + x + y + x + y;\nloop invariant i35: j >= i + x + y + 1 + y + x + y + x + y + x + y + x + y + x + y + x;\nloop invariant i36: j >= i + x + y + 1 + y + x + y + x + y + x + y + x + y + x + y + x + y;\nloop invariant i37: j >= i + x + y + 1 + y + x + y + x + y + x + y + x + y + x + y + x + y + x;\nloop invariant i38: j >= i + x + y + 1 + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y;\nloop invariant i39: j >= i + x + y + 1 + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x;\nloop invariant i40: j >= i + x + y + 1 + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y;\nloop invariant i41: j >= i + x + y + 1 + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x;\nloop invariant i42: j >= i + x + y + 1 + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y;\nloop invariant i43: j >= i + x + y + 1 + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x;\nloop invariant i44: j >= i + x + y + 1 + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y;\nloop invariant i45: j >= i + x + y + 1 + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x;\nloop invariant i46: j >= i + x + y + 1 + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y;\nloop invariant i47: j >= i + x + y + 1 + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x;\nloop invariant i48: i <= (x * (x + 1) / 2);\nloop invariant i49: j <= (y * (y + 1) / 2);\nloop invariant i50: x + y == i + j;\nloop invariant i51: x + y == (j - i) / (x - y);\nloop invariant i52: i + j == (x * (x + 1) / 2) + (y * (y + 1) / 2);\nloop invariant i53: i + j == (x * (x + 1) / 2) + (y * (y + 1) / 2) + flag * (x + y);\nloop invariant i54: i + j == (x * (x + 1) / 2) + (y * (y + 1) / 2) + flag * (x + y) == (j - i) / (x - y);\nloop invariant i55: i + j == (x * (x + 1) / 2) + (y * (y + 1) / 2) + flag * (x + y) == (j - i) / (x - y) == (x * (x + 1) / 2) + (y * (y + 1) / 2) + flag * (x + y);\nloop invariant i56: i + j == (x * (x + 1) / 2) + (y * (y + 1) / 2) + flag * (x + y) == (j - i) / (x - y) == (x * (x + 1) / 2) + (y * (y + 1) / 2) + flag * (x + y) == (x * (x + 1) / 2) + (y * (y + 1) / 2) + flag * (x + y);\nloop invariant i57: i + j == (x * (x + 1) / 2) + (y * (y + 1) / 2) + flag * (x + y) == (j - i) / (x - y) == (x * (x + 1) / 2) + (y * (y + 1) / 2) + flag * (x + y) == (x * (x + 1) / 2) + (y * (y + 1) / 2) + flag * (x + y) == (x * (x + 1) / 2) + (y * (y + 1) / 2) + flag * (x + y);\nloop invariant i58: i + j == (x * (x + 1) / 2) + (y * (y + 1) / 2) + flag * (x + y) == (j - i) / (x - y) == (x * (x + 1) / 2) + (y * (y + 1) / 2) + flag * (x + y) == (x * (x + 1) / 2) + (y * (y + 1) / 2) + flag * (x + y) == (x * (x + 1) / 2) + (y * (y + 1) / 2) + flag * (x + y) == (x * (x + 1) / 2) + (y * (y + 1) / 2) + flag * (x + y);\nloop invariant i59: x >= 0;\nloop invariant i60: y >= 0;\nloop invariant i61: i <= x * x / 2;\nloop invariant i62: j <= y * (y + 1) / 2;\nloop invariant i63: x >= 0; loop invariant y >= 0; loop invariant i >= x; loop invariant j >= y; loop invariant j >= i; loop invariant flag ==> j >= i + 1; loop invariant !flag ==> j >= i;\nloop invariant i64: 0 <= x <= x' + 1;\nloop invariant i65: 0 <= y <= y' + 1;\nloop invariant i66: i <= i' + x;\nloop invariant i67: j <= j' + y;\nloop invariant i68: j' + y' + 1 >= i' + x';\nloop invariant i69: i' + x' >= 0;\nloop invariant i70: 0 <= i <= (unknown2() * unknown2() / 2 + unknown2() * unknown2() / 2);\nloop invariant i71: 0 <= j <= (unknown2() * unknown2() / 2 + unknown2() * unknown2() / 2 + unknown1() * unknown2() + unknown1() * unknown2());\nloop invariant i72: i = (x * (x + 1) / 2);\nloop invariant i73: j = (y * (y + 1) / 2 + x * (x + 1) / 2 + unknown1() * unknown2());\nloop invariant i74: x = (i * 2 / unknown2() - i / unknown2());\nloop invariant i75: y = (j * 2 / unknown2() - j / unknown2());\nloop invariant i76: j >= i ==> (j = (y * (y + 1) / 2 + x * (x + 1) / 2 + unknown1() * unknown2()));\nloop invariant i77: j >= i ==> (y >= x);\nloop invariant i78: 0 <= x <= y;\nloop invariant i79: 0 <= j <= 1;\nloop invariant i80: 0 <= i <= 1;\nloop invariant i81: i == j;\nloop invariant i82: x == y;\nloop invariant i83: 0 <= i <= j;\nloop invariant i84: x > 0;\nloop invariant i85: y > 0;\nloop invariant i86: i >= (j - y);\nloop invariant i87: j >= (i + y);\nloop invariant i88: y >= x;\n*/\nwhile(unknown2())\n\t{\n\t  x++;\n\t  y++;\n\t  i+=x;\n\t  j+=y;\n\t  if(flag)  j+=1;\n\t} \n\t{;\n//@ assert(j>=i);\n}\n\n}",
        "combined_annotation_num_solver_calls": 7,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main()\n{\n\tint flag = unknown1();\n\tint x = 0;\n\tint y = 0;\n\n\tint j = 0;\n\tint i = 0;\n\n\t/*@\nloop invariant i1: 0 <= x <= 1 && 0 <= y <= 1 && 0 <= i <= 1 && 0 <= j <= 1;\n\n\n\n\nloop invariant i6: x <= y;\nloop invariant i7: i <= j;\nloop invariant i8: 0 <= x;\nloop invariant i9: 0 <= y;\nloop invariant i10: 0 <= i;\nloop invariant i11: 0 <= j;\nloop invariant i12: i == x*(x+1)/2;\nloop invariant i13: j == y*(y+1)/2 + flag;\nloop invariant i14: j>=i ==> flag ==> x == y;\nloop invariant i15: j>=i ==> !flag ==> x > y;\nloop invariant i16: x >= y;\nloop invariant i17: i >= 0;\nloop invariant i18: j >= 0;\nloop invariant i19: j >= i;\nloop invariant i20: j >= i + x;\nloop invariant i21: j >= i + y;\nloop invariant i22: j >= i + x + y;\nloop invariant i23: j >= i + x + y + 1;\nloop invariant i24: j >= i + x + y + 1 + y;\nloop invariant i25: j >= i + x + y + 1 + y + x;\nloop invariant i26: j >= i + x + y + 1 + y + x + y;\nloop invariant i27: j >= i + x + y + 1 + y + x + y + x;\nloop invariant i28: j >= i + x + y + 1 + y + x + y + x + y;\nloop invariant i29: j >= i + x + y + 1 + y + x + y + x + y + x;\nloop invariant i30: j >= i + x + y + 1 + y + x + y + x + y + x + y;\nloop invariant i31: j >= i + x + y + 1 + y + x + y + x + y + x + y + x;\nloop invariant i32: j >= i + x + y + 1 + y + x + y + x + y + x + y + x + y;\nloop invariant i33: j >= i + x + y + 1 + y + x + y + x + y + x + y + x + y + x;\nloop invariant i34: j >= i + x + y + 1 + y + x + y + x + y + x + y + x + y + x + y;\nloop invariant i35: j >= i + x + y + 1 + y + x + y + x + y + x + y + x + y + x + y + x;\nloop invariant i36: j >= i + x + y + 1 + y + x + y + x + y + x + y + x + y + x + y + x + y;\nloop invariant i37: j >= i + x + y + 1 + y + x + y + x + y + x + y + x + y + x + y + x + y + x;\nloop invariant i38: j >= i + x + y + 1 + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y;\nloop invariant i39: j >= i + x + y + 1 + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x;\nloop invariant i40: j >= i + x + y + 1 + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y;\nloop invariant i41: j >= i + x + y + 1 + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x;\nloop invariant i42: j >= i + x + y + 1 + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y;\nloop invariant i43: j >= i + x + y + 1 + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x;\nloop invariant i44: j >= i + x + y + 1 + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y;\nloop invariant i45: j >= i + x + y + 1 + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x;\nloop invariant i46: j >= i + x + y + 1 + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y;\nloop invariant i47: j >= i + x + y + 1 + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x;\nloop invariant i48: i <= (x * (x + 1) / 2);\nloop invariant i49: j <= (y * (y + 1) / 2);\nloop invariant i50: x + y == i + j;\nloop invariant i51: x + y == (j - i) / (x - y);\nloop invariant i52: i + j == (x * (x + 1) / 2) + (y * (y + 1) / 2);\nloop invariant i53: i + j == (x * (x + 1) / 2) + (y * (y + 1) / 2) + flag * (x + y);\nloop invariant i54: i + j == (x * (x + 1) / 2) + (y * (y + 1) / 2) + flag * (x + y) == (j - i) / (x - y);\nloop invariant i55: i + j == (x * (x + 1) / 2) + (y * (y + 1) / 2) + flag * (x + y) == (j - i) / (x - y) == (x * (x + 1) / 2) + (y * (y + 1) / 2) + flag * (x + y);\nloop invariant i56: i + j == (x * (x + 1) / 2) + (y * (y + 1) / 2) + flag * (x + y) == (j - i) / (x - y) == (x * (x + 1) / 2) + (y * (y + 1) / 2) + flag * (x + y) == (x * (x + 1) / 2) + (y * (y + 1) / 2) + flag * (x + y);\nloop invariant i57: i + j == (x * (x + 1) / 2) + (y * (y + 1) / 2) + flag * (x + y) == (j - i) / (x - y) == (x * (x + 1) / 2) + (y * (y + 1) / 2) + flag * (x + y) == (x * (x + 1) / 2) + (y * (y + 1) / 2) + flag * (x + y) == (x * (x + 1) / 2) + (y * (y + 1) / 2) + flag * (x + y);\nloop invariant i58: i + j == (x * (x + 1) / 2) + (y * (y + 1) / 2) + flag * (x + y) == (j - i) / (x - y) == (x * (x + 1) / 2) + (y * (y + 1) / 2) + flag * (x + y) == (x * (x + 1) / 2) + (y * (y + 1) / 2) + flag * (x + y) == (x * (x + 1) / 2) + (y * (y + 1) / 2) + flag * (x + y) == (x * (x + 1) / 2) + (y * (y + 1) / 2) + flag * (x + y);\nloop invariant i59: x >= 0;\nloop invariant i60: y >= 0;\nloop invariant i61: i <= x * x / 2;\nloop invariant i62: j <= y * (y + 1) / 2;\nloop invariant i63: x >= 0; loop invariant y >= 0; loop invariant i >= x; loop invariant j >= y; loop invariant j >= i; loop invariant flag ==> j >= i + 1; loop invariant !flag ==> j >= i;\n\nloop invariant i65: 0 <= y <= y' + 1;\nloop invariant i66: i <= i' + x;\nloop invariant i67: j <= j' + y;\nloop invariant i68: j' + y' + 1 >= i' + x';\nloop invariant i69: i' + x' >= 0;\nloop invariant i70: 0 <= i <= (unknown2() * unknown2() / 2 + unknown2() * unknown2() / 2);\nloop invariant i71: 0 <= j <= (unknown2() * unknown2() / 2 + unknown2() * unknown2() / 2 + unknown1() * unknown2() + unknown1() * unknown2());\nloop invariant i72: i = (x * (x + 1) / 2);\nloop invariant i73: j = (y * (y + 1) / 2 + x * (x + 1) / 2 + unknown1() * unknown2());\nloop invariant i74: x = (i * 2 / unknown2() - i / unknown2());\nloop invariant i75: y = (j * 2 / unknown2() - j / unknown2());\nloop invariant i76: j >= i ==> (j = (y * (y + 1) / 2 + x * (x + 1) / 2 + unknown1() * unknown2()));\nloop invariant i77: j >= i ==> (y >= x);\nloop invariant i78: 0 <= x <= y;\nloop invariant i79: 0 <= j <= 1;\nloop invariant i80: 0 <= i <= 1;\nloop invariant i81: i == j;\nloop invariant i82: x == y;\nloop invariant i83: 0 <= i <= j;\nloop invariant i84: x > 0;\nloop invariant i85: y > 0;\nloop invariant i86: i >= (j - y);\nloop invariant i87: j >= (i + y);\nloop invariant i88: y >= x;\n*/\nwhile(unknown2())\n\t{\n\t  x++;\n\t  y++;\n\t  i+=x;\n\t  j+=y;\n\t  if(flag)  j+=1;\n\t} \n\t{;\n//@ assert(j>=i);\n}\n\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/split.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/05.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/02.c"
        ],
        "skipped": [],
        "total": 103,
        "success_count": 87,
        "failure_count": 16,
        "success_rate": 0.8446601941747572
    }
}