{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/37.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main() {\n  int x= 0;\n  int m=0;\n  int n = unknown1();\n  while(x<n) {\n     if(unknown2()) {\n\tm = x;\n     }\n     x= x+1;\n  }\n  if(n>0) {;\n//@ assert(0<=m && m<n);\n}\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= m <= n;\nloop invariant m <= x;\nloop invariant m <= n;\nloop invariant n <= n;\nloop invariant x <= x;\nloop invariant m <= m;\nloop invariant 0 <= m;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant m <= n;\nloop invariant n <= n;\nloop invariant x <= x;\nloop invariant m <= m;\nloop invariant 0 <= m;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant m <= n;\nloop invariant n <= n;\nloop invariant x <= x;\nloop invariant m <= m;\nloop invariant 0 <= m;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant m <= n;\nloop invariant n <= n;\nloop invariant x <= x;\nloop invariant m <= m;\nloop invariant 0 <= m;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant m <= n;\nloop invariant n <= n;\nloop invariant x <= x;\nloop invariant m <= m;\nloop invariant 0 <= m;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant m <= n;\nloop invariant n <= n;\nloop invariant x <= x;\nloop invariant m <= m;\nloop invariant 0 <= m;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant m <= n;\nloop invariant n <= n;\nloop invariant x <= x;\nloop invariant m <= m;\nloop invariant 0 <= m;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant m <= n;\nloop invariant n <= n;\nloop invariant x <= x;\nloop invariant m <= m;\nloop invariant 0 <= m;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant m <= n;\nloop invariant n <= n;\nloop invariant x <= x;\nloop invariant m <= m;\nloop invariant 0 <= m;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant m <= n;\nloop invariant n <= n;\nloop invariant x <= x;\nloop invariant m <= m;\nloop invariant 0 <= m;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant m <= n;\nloop invariant n <= n;\nloop invariant x <= x;\nloop invariant m <= m;\nloop invariant 0 <= m;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant m <= n;\nloop invariant n <= n;\nloop invariant x <= x;\nloop invariant m <= m;\nloop invariant 0 <= m;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant m <= n;\nloop invariant n <= n;\nloop invariant x <= x;\nloop invariant m <= m;\nloop invariant 0 <= m;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant m <= n;\nloop invariant n <= n;\nloop invariant x <= x;\nloop invariant m <= m;\nloop invariant 0 <= m;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant m <= n;\nloop invariant n <= n;\nloop invariant x <= x;\nloop invariant m <= m;\nloop invariant 0 <= m;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant m <= n;\nloop invariant n <= n;\nloop invariant x <= x;\nloop invariant m <= m;\nloop invariant 0 <= m;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant m <= n;\nloop invariant n <= n;\nloop invariant x <= x;\nloop invariant m <= m;\nloop invariant 0 <= m;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant m <= n;\nloop invariant n <= n;\nloop invariant x <= x;\nloop invariant m <= m;\nloop invariant 0 <= m;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant m <= n;\nloop invariant n <= n;\nloop invariant x <= x;\nloop invariant m <= m;\nloop invariant 0 <= m;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant m <= n;\nloop invariant n <= n;\nloop invariant x <= x;\nloop invariant m <= m;\nloop invariant 0 <= m;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant m <= n;\nloop invariant n <= n;\nloop invariant x <= x;\nloop invariant m <= m;\nloop invariant 0 <= m;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant m <= n;\nloop invariant n <= n;\nloop invariant x <= x;\nloop invariant m <= m;\nloop invariant 0 <= m;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant m <= n;\nloop invariant n <= n;\nloop invariant x <= x;\nloop invariant m <= m;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m >= 0;\nloop invariant m < n;\nloop invariant m >= 0 ==> m < x;\nloop invariant m < x ==> m <= n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n ==> m < n;\nloop invariant m < x ==> m < n ==> m < n ==> m < n;\nloop invariant m < x ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant m < x ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant m < x ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant m < x ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant m < x ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant m < x ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant m < x ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant m < x ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant m < x ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant m < x ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant m < x ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant m < x ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant m < x ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant m < x ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant m < x ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant m < x ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= m <= n;\nloop invariant m == x-1 ==> x >= m && x <= n;\nloop invariant x < n ==> m <= x;\nloop invariant x == n ==> m == x-1;\nloop invariant 0 <= m <= n;\nloop invariant m == x-1 ==> x >= m && x <= n;\nloop invariant x < n ==> m <= x;\nloop invariant x == n ==> m == x-1;\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= m <= n;\nloop invariant m < n ==> 0 <= x <= n;\nloop invariant m < n ==> 0 <= m <= n;\nloop invariant m < n ==> x > m;\nloop invariant m < n ==> m <= x;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m >= 0;\nloop invariant m < n;\nloop invariant m <= x;\nloop invariant m <= n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m >= 0;\nloop invariant m <= x;\nloop invariant m < n;\n*/\n```",
            "```\n/*@\nloop invariant m <= x <= n;\nloop invariant 0 <= m <= n;\nloop invariant if n > 0 then m >= 0 else m = 0;\nloop invariant if n > 0 then x <= n else x = n;\nloop invariant if unknown2() then m = x else m = m;\nloop invariant if n > 0 then 0 <= m < n else 0 <= m <= n;\nloop invariant if n > 0 then unknown2() ==> m = x else m = m;\nloop invariant if n > 0 then 0 <= x <= n else x = n;\nloop invariant if x < n then unknown2() ==> m = x else m = m;\nloop invariant if n > 0 then 0 <= m <= x <= n else 0 <= m <= n;\nloop invariant if 0 <= x < n then unknown2() ==> m = x else m = m;\nloop invariant if 0 <= x < n then unknown2() ==> m = x else m = m;\nloop invariant if 0 <= x < n then unknown2() ==> m = x else m = m;\nloop invariant if 0 <= x < n then unknown2() ==> m = x else m = m;\nloop invariant if 0 <= x < n then unknown2() ==> m = x else m = m;\nloop invariant if 0 <= x < n then unknown2() ==> m = x else m = m;\nloop invariant if 0 <= x < n then unknown2() ==> m = x else m = m;\nloop invariant if 0 <= x < n then unknown2() ==> m = x else m = m;\nloop invariant if 0 <= x < n then unknown2() ==> m = x else m = m;\nloop invariant if 0 <= x < n then unknown2() ==> m = x else m = m;\nloop invariant if 0 <= x < n then unknown2() ==> m = x else m = m;\nloop invariant if 0 <= x < n then unknown2() ==> m = x else m = m;\nloop invariant if 0 <= x < n then unknown2() ==> m = x else m = m;\nloop invariant if 0 <= x < n then unknown2() ==> m = x else m = m;\nloop invariant if 0 <= x < n then unknown2() ==> m = x else m = m;\nloop invariant if 0 <= x < n then unknown2() ==> m = x else m = m;\nloop invariant if 0 <= x < n then unknown2() ==> m = x else m = m;\nloop invariant if 0 <= x < n then unknown2() ==> m = x else m = m;\nloop invariant if 0 <= x < n then unknown2() ==> m = x else m = m;\nloop invariant if 0 <= x < n then unknown2() ==> m = x else m = m;\nloop invariant if 0 <= x < n then unknown2() ==> m = x else m = m;\nloop invariant if 0 <= x < n then unknown2() ==> m = x else m = m;\nloop invariant if 0 <= x < n then unknown2() ==> m = x else m = m;\nloop invariant if 0 <= x < n then unknown2() ==> m = x else m = m;\nloop invariant if 0 <= x < n then unknown2() ==> m = x else m = m;\nloop invariant if 0 <= x < n then unknown2() ==> m = x else m = m;\nloop invariant if 0 <= x < n then unknown2() ==> m = x else m = m;\nloop invariant if 0 <= x < n then unknown2() ==> m = x else m = m;\nloop invariant if 0 <= x < n then unknown2() ==> m = x else m = m;\nloop invariant if 0 <= x < n then unknown2() ==> m = x else m = m;\nloop invariant if 0 <= x < n then unknown2() ==> m = x else m = m;\nloop invariant if 0 <= x < n then unknown2() ==> m = x else m = m;\nloop invariant if 0 <= x < n then unknown2() ==> m = x else m = m;\nloop invariant if 0 <= x < n then unknown2() ==> m = x else m = m;\nloop invariant if 0 <= x < n then unknown2() ==> m = x else m = m;\nloop invariant if 0 <= x < n then unknown2() ==> m = x else m = m;\nloop invariant if 0 <= x < n then unknown2() ==> m = x else m = m;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m >= 0;\nloop invariant m <= x;\nloop invariant m <= n;\nloop invariant (x < n) ==> (m < n);\nloop invariant (x < n) ==> (m >= 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= m <= n;\nloop invariant (m == x ==> unknown2());\nloop invariant (m < x ==> unknown2());\nloop invariant (m < x ==> unknown2());\nloop invariant (m < x ==> unknown2());\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= m <= n;\nloop invariant if (unknown2()) then (m == x) else (m <= x);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m <= x;\nloop invariant m >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= m <= n;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= n;\nloop invariant m <= x;\nloop invariant 0 <= m < n;\nloop invariant 0 <= n <= 10000;\nloop invariant n <= x;\nloop invariant n > 0 ==> 0 <= m < n;\nloop invariant n <= x;\nloop invariant 0 <= m;\nloop invariant 0 <= x;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant m <= x;\nloop invariant m >= 0;\nloop invariant x <= n;\nloop invariant 0 <= m;\nloop invariant 0 <= x;\nloop invariant x <= n;\nloop invariant m <= x;\nloop invariant m >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant 0 <= m;\nloop invariant m <= x;\nloop invariant m >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant 0 <= m;\nloop invariant m <= x;\nloop invariant m >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant 0 <= m;\nloop invariant m <= x;\nloop invariant m >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant 0 <= m;\nloop invariant m <= x;\nloop invariant m >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant 0 <= m;\nloop invariant m <= x;\nloop invariant m >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant 0 <= m;\nloop invariant m <= x;\nloop invariant m >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant 0 <= m;\nloop invariant m <= x;\nloop invariant m >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant 0 <= m;\nloop invariant m <= x;\nloop invariant m >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant 0 <= m;\nloop invariant m <= x;\nloop invariant m >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant 0 <= m;\nloop invariant m <= x;\nloop invariant m >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant 0 <= m;\nloop invariant m <= x;\nloop invariant m >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant 0 <= m;\nloop invariant m <= x;\nloop invariant m >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant 0 <= m;\nloop invariant m <= x;\nloop invariant m >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant 0 <= m;\nloop invariant m <= x;\nloop invariant m >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant 0 <= m;\nloop invariant m <= x;\nloop invariant m >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant 0 <= m;\nloop invariant m <= x;\nloop invariant m >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant 0 <= m;\nloop invariant m <= x;\nloop invariant m >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant 0 <= m;\nloop invariant m <= x;\nloop invariant m >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant 0 <= m;\nloop invariant m <= x;\nloop invariant m >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant 0 <= m;\nloop invariant m <= x;\nloop invariant m >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant 0 <= m;\nloop invariant m <= x;\nloop invariant m >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant 0 <= m;\nloop invariant m <= x;\nloop invariant m >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant 0 <= m;\nloop invariant m <= x;\nloop invariant m >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant 0 <= m;\nloop invariant m <= x;\nloop invariant m >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant 0 <= m;\nloop invariant m <= x;\nloop invariant m >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant 0 <= m;\nloop invariant m <= x;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= m <= n;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= m <= n;\nloop invariant m <= x;\nloop invariant m <= n;\nloop invariant n <= n;\nloop invariant x <= x;\nloop invariant m <= m;\nloop invariant 0 <= m;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant m <= n;\nloop invariant n <= n;\nloop invariant x <= x;\nloop invariant m <= m;\nloop invariant 0 <= m;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant m <= n;\nloop invariant n <= n;\nloop invariant x <= x;\nloop invariant m <= m;\nloop invariant 0 <= m;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant m <= n;\nloop invariant n <= n;\nloop invariant x <= x;\nloop invariant m <= m;\nloop invariant 0 <= m;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant m <= n;\nloop invariant n <= n;\nloop invariant x <= x;\nloop invariant m <= m;\nloop invariant 0 <= m;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant m <= n;\nloop invariant n <= n;\nloop invariant x <= x;\nloop invariant m <= m;\nloop invariant 0 <= m;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant m <= n;\nloop invariant n <= n;\nloop invariant x <= x;\nloop invariant m <= m;\nloop invariant 0 <= m;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant m <= n;\nloop invariant n <= n;\nloop invariant x <= x;\nloop invariant m <= m;\nloop invariant 0 <= m;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant m <= n;\nloop invariant n <= n;\nloop invariant x <= x;\nloop invariant m <= m;\nloop invariant 0 <= m;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant m <= n;\nloop invariant n <= n;\nloop invariant x <= x;\nloop invariant m <= m;\nloop invariant 0 <= m;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant m <= n;\nloop invariant n <= n;\nloop invariant x <= x;\nloop invariant m <= m;\nloop invariant 0 <= m;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant m <= n;\nloop invariant n <= n;\nloop invariant x <= x;\nloop invariant m <= m;\nloop invariant 0 <= m;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant m <= n;\nloop invariant n <= n;\nloop invariant x <= x;\nloop invariant m <= m;\nloop invariant 0 <= m;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant m <= n;\nloop invariant n <= n;\nloop invariant x <= x;\nloop invariant m <= m;\nloop invariant 0 <= m;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant m <= n;\nloop invariant n <= n;\nloop invariant x <= x;\nloop invariant m <= m;\nloop invariant 0 <= m;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant m <= n;\nloop invariant n <= n;\nloop invariant x <= x;\nloop invariant m <= m;\nloop invariant 0 <= m;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant m <= n;\nloop invariant n <= n;\nloop invariant x <= x;\nloop invariant m <= m;\nloop invariant 0 <= m;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant m <= n;\nloop invariant n <= n;\nloop invariant x <= x;\nloop invariant m <= m;\nloop invariant 0 <= m;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant m <= n;\nloop invariant n <= n;\nloop invariant x <= x;\nloop invariant m <= m;\nloop invariant 0 <= m;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant m <= n;\nloop invariant n <= n;\nloop invariant x <= x;\nloop invariant m <= m;\nloop invariant 0 <= m;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant m <= n;\nloop invariant n <= n;\nloop invariant x <= x;\nloop invariant m <= m;\nloop invariant 0 <= m;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant m <= n;\nloop invariant n <= n;\nloop invariant x <= x;\nloop invariant m <= m;\nloop invariant 0 <= m;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant m <= n;\nloop invariant n <= n;\nloop invariant x <= x;\nloop invariant m <= m;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main() {\n  int x= 0;\n  int m=0;\n  int n = unknown1();\n  /*@\n\n\nloop invariant i3: m <= x;\n\nloop invariant i5: n <= n;\nloop invariant i6: x <= x;\nloop invariant i7: m <= m;\nloop invariant i8: 0 <= m;\n*/\nwhile(x<n) {\n     if(unknown2()) {\n\tm = x;\n     }\n     x= x+1;\n  }\n  if(n>0) {;\n//@ assert(0<=m && m<n);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m >= 0;\nloop invariant m < n;\nloop invariant m >= 0 ==> m < x;\nloop invariant m < x ==> m <= n;\nloop invariant m < x ==> m < n;\nloop invariant m < x ==> m < n ==> m < n;\nloop invariant m < x ==> m < n ==> m < n ==> m < n;\nloop invariant m < x ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant m < x ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant m < x ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant m < x ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant m < x ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant m < x ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant m < x ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant m < x ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant m < x ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant m < x ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant m < x ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant m < x ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant m < x ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant m < x ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant m < x ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant m < x ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main() {\n  int x= 0;\n  int m=0;\n  int n = unknown1();\n  /*@\n\n\n\n\nloop invariant i5: m < x ==> m <= n;\nloop invariant i6: m < x ==> m < n;\nloop invariant i7: m < x ==> m < n ==> m < n;\nloop invariant i8: m < x ==> m < n ==> m < n ==> m < n;\nloop invariant i9: m < x ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant i10: m < x ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant i11: m < x ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant i12: m < x ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant i13: m < x ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant i14: m < x ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant i15: m < x ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant i16: m < x ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant i17: m < x ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant i18: m < x ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant i19: m < x ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant i20: m < x ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant i21: m < x ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant i22: m < x ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant i23: m < x ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant i24: m < x ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\n*/\nwhile(x<n) {\n     if(unknown2()) {\n\tm = x;\n     }\n     x= x+1;\n  }\n  if(n>0) {;\n//@ assert(0<=m && m<n);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= m <= n;\nloop invariant m == x-1 ==> x >= m && x <= n;\nloop invariant x < n ==> m <= x;\nloop invariant x == n ==> m == x-1;\nloop invariant 0 <= m <= n;\nloop invariant m == x-1 ==> x >= m && x <= n;\nloop invariant x < n ==> m <= x;\nloop invariant x == n ==> m == x-1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main() {\n  int x= 0;\n  int m=0;\n  int n = unknown1();\n  /*@\n\nloop invariant i2: m == x-1 ==> x >= m && x <= n;\nloop invariant i3: x < n ==> m <= x;\n\n*/\nwhile(x<n) {\n     if(unknown2()) {\n\tm = x;\n     }\n     x= x+1;\n  }\n  if(n>0) {;\n//@ assert(0<=m && m<n);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main() {\n  int x= 0;\n  int m=0;\n  int n = unknown1();\n  /*@\n\n*/\nwhile(x<n) {\n     if(unknown2()) {\n\tm = x;\n     }\n     x= x+1;\n  }\n  if(n>0) {;\n//@ assert(0<=m && m<n);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= m <= n;\nloop invariant m < n ==> 0 <= x <= n;\nloop invariant m < n ==> 0 <= m <= n;\nloop invariant m < n ==> x > m;\nloop invariant m < n ==> m <= x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main() {\n  int x= 0;\n  int m=0;\n  int n = unknown1();\n  /*@\n\n\n\n\n\nloop invariant i6: m < n ==> m <= x;\n*/\nwhile(x<n) {\n     if(unknown2()) {\n\tm = x;\n     }\n     x= x+1;\n  }\n  if(n>0) {;\n//@ assert(0<=m && m<n);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m >= 0;\nloop invariant m < n;\nloop invariant m <= x;\nloop invariant m <= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main() {\n  int x= 0;\n  int m=0;\n  int n = unknown1();\n  /*@\n\nloop invariant i2: m >= 0;\n\nloop invariant i4: m <= x;\n\n*/\nwhile(x<n) {\n     if(unknown2()) {\n\tm = x;\n     }\n     x= x+1;\n  }\n  if(n>0) {;\n//@ assert(0<=m && m<n);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m >= 0;\nloop invariant m <= x;\nloop invariant m < n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main() {\n  int x= 0;\n  int m=0;\n  int n = unknown1();\n  /*@\n\nloop invariant i2: m >= 0;\nloop invariant i3: m <= x;\n\n*/\nwhile(x<n) {\n     if(unknown2()) {\n\tm = x;\n     }\n     x= x+1;\n  }\n  if(n>0) {;\n//@ assert(0<=m && m<n);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 11,
                "annotations": "```\n/*@\nloop invariant m <= x <= n;\nloop invariant 0 <= m <= n;\nloop invariant if n > 0 then m >= 0 else m = 0;\nloop invariant if n > 0 then x <= n else x = n;\nloop invariant if unknown2() then m = x else m = m;\nloop invariant if n > 0 then 0 <= m < n else 0 <= m <= n;\nloop invariant if n > 0 then unknown2() ==> m = x else m = m;\nloop invariant if n > 0 then 0 <= x <= n else x = n;\nloop invariant if x < n then unknown2() ==> m = x else m = m;\nloop invariant if n > 0 then 0 <= m <= x <= n else 0 <= m <= n;\nloop invariant if 0 <= x < n then unknown2() ==> m = x else m = m;\nloop invariant if 0 <= x < n then unknown2() ==> m = x else m = m;\nloop invariant if 0 <= x < n then unknown2() ==> m = x else m = m;\nloop invariant if 0 <= x < n then unknown2() ==> m = x else m = m;\nloop invariant if 0 <= x < n then unknown2() ==> m = x else m = m;\nloop invariant if 0 <= x < n then unknown2() ==> m = x else m = m;\nloop invariant if 0 <= x < n then unknown2() ==> m = x else m = m;\nloop invariant if 0 <= x < n then unknown2() ==> m = x else m = m;\nloop invariant if 0 <= x < n then unknown2() ==> m = x else m = m;\nloop invariant if 0 <= x < n then unknown2() ==> m = x else m = m;\nloop invariant if 0 <= x < n then unknown2() ==> m = x else m = m;\nloop invariant if 0 <= x < n then unknown2() ==> m = x else m = m;\nloop invariant if 0 <= x < n then unknown2() ==> m = x else m = m;\nloop invariant if 0 <= x < n then unknown2() ==> m = x else m = m;\nloop invariant if 0 <= x < n then unknown2() ==> m = x else m = m;\nloop invariant if 0 <= x < n then unknown2() ==> m = x else m = m;\nloop invariant if 0 <= x < n then unknown2() ==> m = x else m = m;\nloop invariant if 0 <= x < n then unknown2() ==> m = x else m = m;\nloop invariant if 0 <= x < n then unknown2() ==> m = x else m = m;\nloop invariant if 0 <= x < n then unknown2() ==> m = x else m = m;\nloop invariant if 0 <= x < n then unknown2() ==> m = x else m = m;\nloop invariant if 0 <= x < n then unknown2() ==> m = x else m = m;\nloop invariant if 0 <= x < n then unknown2() ==> m = x else m = m;\nloop invariant if 0 <= x < n then unknown2() ==> m = x else m = m;\nloop invariant if 0 <= x < n then unknown2() ==> m = x else m = m;\nloop invariant if 0 <= x < n then unknown2() ==> m = x else m = m;\nloop invariant if 0 <= x < n then unknown2() ==> m = x else m = m;\nloop invariant if 0 <= x < n then unknown2() ==> m = x else m = m;\nloop invariant if 0 <= x < n then unknown2() ==> m = x else m = m;\nloop invariant if 0 <= x < n then unknown2() ==> m = x else m = m;\nloop invariant if 0 <= x < n then unknown2() ==> m = x else m = m;\nloop invariant if 0 <= x < n then unknown2() ==> m = x else m = m;\nloop invariant if 0 <= x < n then unknown2() ==> m = x else m = m;\nloop invariant if 0 <= x < n then unknown2() ==> m = x else m = m;\nloop invariant if 0 <= x < n then unknown2() ==> m = x else m = m;\nloop invariant if 0 <= x < n then unknown2() ==> m = x else m = m;\nloop invariant if 0 <= x < n then unknown2() ==> m = x else m = m;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main() {\n  int x= 0;\n  int m=0;\n  int n = unknown1();\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile(x<n) {\n     if(unknown2()) {\n\tm = x;\n     }\n     x= x+1;\n  }\n  if(n>0) {;\n//@ assert(0<=m && m<n);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m >= 0;\nloop invariant m <= x;\nloop invariant m <= n;\nloop invariant (x < n) ==> (m < n);\nloop invariant (x < n) ==> (m >= 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main() {\n  int x= 0;\n  int m=0;\n  int n = unknown1();\n  /*@\n\nloop invariant i2: m >= 0;\nloop invariant i3: m <= x;\n\nloop invariant i5: (x < n) ==> (m < n);\nloop invariant i6: (x < n) ==> (m >= 0);\n*/\nwhile(x<n) {\n     if(unknown2()) {\n\tm = x;\n     }\n     x= x+1;\n  }\n  if(n>0) {;\n//@ assert(0<=m && m<n);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= m <= n;\nloop invariant (m == x ==> unknown2());\nloop invariant (m < x ==> unknown2());\nloop invariant (m < x ==> unknown2());\nloop invariant (m < x ==> unknown2());\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main() {\n  int x= 0;\n  int m=0;\n  int n = unknown1();\n  /*@\n\n\n\n\n*/\nwhile(x<n) {\n     if(unknown2()) {\n\tm = x;\n     }\n     x= x+1;\n  }\n  if(n>0) {;\n//@ assert(0<=m && m<n);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= m <= n;\nloop invariant if (unknown2()) then (m == x) else (m <= x);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main() {\n  int x= 0;\n  int m=0;\n  int n = unknown1();\n  /*@\n\n\n\n*/\nwhile(x<n) {\n     if(unknown2()) {\n\tm = x;\n     }\n     x= x+1;\n  }\n  if(n>0) {;\n//@ assert(0<=m && m<n);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m <= x;\nloop invariant m >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main() {\n  int x= 0;\n  int m=0;\n  int n = unknown1();\n  /*@\n\nloop invariant i2: m <= x;\nloop invariant i3: m >= 0;\n*/\nwhile(x<n) {\n     if(unknown2()) {\n\tm = x;\n     }\n     x= x+1;\n  }\n  if(n>0) {;\n//@ assert(0<=m && m<n);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= m <= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main() {\n  int x= 0;\n  int m=0;\n  int n = unknown1();\n  /*@\n\n\n*/\nwhile(x<n) {\n     if(unknown2()) {\n\tm = x;\n     }\n     x= x+1;\n  }\n  if(n>0) {;\n//@ assert(0<=m && m<n);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= n;\nloop invariant m <= x;\nloop invariant 0 <= m < n;\nloop invariant 0 <= n <= 10000;\nloop invariant n <= x;\nloop invariant n > 0 ==> 0 <= m < n;\nloop invariant n <= x;\nloop invariant 0 <= m;\nloop invariant 0 <= x;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant m <= x;\nloop invariant m >= 0;\nloop invariant x <= n;\nloop invariant 0 <= m;\nloop invariant 0 <= x;\nloop invariant x <= n;\nloop invariant m <= x;\nloop invariant m >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant 0 <= m;\nloop invariant m <= x;\nloop invariant m >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant 0 <= m;\nloop invariant m <= x;\nloop invariant m >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant 0 <= m;\nloop invariant m <= x;\nloop invariant m >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant 0 <= m;\nloop invariant m <= x;\nloop invariant m >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant 0 <= m;\nloop invariant m <= x;\nloop invariant m >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant 0 <= m;\nloop invariant m <= x;\nloop invariant m >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant 0 <= m;\nloop invariant m <= x;\nloop invariant m >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant 0 <= m;\nloop invariant m <= x;\nloop invariant m >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant 0 <= m;\nloop invariant m <= x;\nloop invariant m >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant 0 <= m;\nloop invariant m <= x;\nloop invariant m >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant 0 <= m;\nloop invariant m <= x;\nloop invariant m >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant 0 <= m;\nloop invariant m <= x;\nloop invariant m >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant 0 <= m;\nloop invariant m <= x;\nloop invariant m >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant 0 <= m;\nloop invariant m <= x;\nloop invariant m >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant 0 <= m;\nloop invariant m <= x;\nloop invariant m >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant 0 <= m;\nloop invariant m <= x;\nloop invariant m >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant 0 <= m;\nloop invariant m <= x;\nloop invariant m >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant 0 <= m;\nloop invariant m <= x;\nloop invariant m >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant 0 <= m;\nloop invariant m <= x;\nloop invariant m >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant 0 <= m;\nloop invariant m <= x;\nloop invariant m >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant 0 <= m;\nloop invariant m <= x;\nloop invariant m >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant 0 <= m;\nloop invariant m <= x;\nloop invariant m >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant 0 <= m;\nloop invariant m <= x;\nloop invariant m >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant 0 <= m;\nloop invariant m <= x;\nloop invariant m >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant 0 <= m;\nloop invariant m <= x;\nloop invariant m >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant 0 <= m;\nloop invariant m <= x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main() {\n  int x= 0;\n  int m=0;\n  int n = unknown1();\n  /*@\n\nloop invariant i2: m <= x;\n\n\n\nloop invariant i6: n > 0 ==> 0 <= m < n;\nloop invariant i7: 0 <= m;\nloop invariant i8: 0 <= x;\n\nloop invariant i10: x >= 0;\nloop invariant i11: m >= 0;\n*/\nwhile(x<n) {\n     if(unknown2()) {\n\tm = x;\n     }\n     x= x+1;\n  }\n  if(n>0) {;\n//@ assert(0<=m && m<n);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= m <= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main() {\n  int x= 0;\n  int m=0;\n  int n = unknown1();\n  /*@\n\n\n*/\nwhile(x<n) {\n     if(unknown2()) {\n\tm = x;\n     }\n     x= x+1;\n  }\n  if(n>0) {;\n//@ assert(0<=m && m<n);\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 54: unexpected token 'n'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main() {\n  int x= 0;\n  int m=0;\n  int n = unknown1();\n  /*@\nloop invariant i1: 0 <= x <= n;\nloop invariant i2: 0 <= m <= n;\nloop invariant i3: m <= x;\nloop invariant i4: m <= n;\nloop invariant i5: n <= n;\nloop invariant i6: x <= x;\nloop invariant i7: m <= m;\nloop invariant i8: 0 <= m;\nloop invariant i9: m >= 0;\nloop invariant i10: m < n;\nloop invariant i11: m >= 0 ==> m < x;\nloop invariant i12: m < x ==> m <= n;\nloop invariant i13: m < x ==> m < n;\nloop invariant i14: m < x ==> m < n ==> m < n;\nloop invariant i15: m < x ==> m < n ==> m < n ==> m < n;\nloop invariant i16: m < x ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant i17: m < x ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant i18: m < x ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant i19: m < x ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant i20: m < x ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant i21: m < x ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant i22: m < x ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant i23: m < x ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant i24: m < x ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant i25: m < x ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant i26: m < x ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant i27: m < x ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant i28: m < x ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant i29: m < x ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant i30: m < x ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant i31: m < x ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant i32: m == x-1 ==> x >= m && x <= n;\nloop invariant i33: x < n ==> m <= x;\nloop invariant i34: x == n ==> m == x-1;\nloop invariant i35: m < n ==> 0 <= x <= n;\nloop invariant i36: m < n ==> 0 <= m <= n;\nloop invariant i37: m < n ==> x > m;\nloop invariant i38: m < n ==> m <= x;\nloop invariant i39: m <= x <= n;\nloop invariant i40: if n > 0 then m >= 0 else m = 0;\nloop invariant i41: if n > 0 then x <= n else x = n;\nloop invariant i42: if unknown2() then m = x else m = m;\nloop invariant i43: if n > 0 then 0 <= m < n else 0 <= m <= n;\nloop invariant i44: if n > 0 then unknown2() ==> m = x else m = m;\nloop invariant i45: if n > 0 then 0 <= x <= n else x = n;\nloop invariant i46: if x < n then unknown2() ==> m = x else m = m;\nloop invariant i47: if n > 0 then 0 <= m <= x <= n else 0 <= m <= n;\nloop invariant i48: if 0 <= x < n then unknown2() ==> m = x else m = m;\nloop invariant i49: (x < n) ==> (m < n);\nloop invariant i50: (x < n) ==> (m >= 0);\nloop invariant i51: (m == x ==> unknown2());\nloop invariant i52: (m < x ==> unknown2());\nloop invariant i53: if (unknown2()) then (m == x) else (m <= x);\nloop invariant i54: 1 <= x <= n;\nloop invariant i55: 0 <= m < n;\nloop invariant i56: 0 <= n <= 10000;\nloop invariant i57: n <= x;\nloop invariant i58: n > 0 ==> 0 <= m < n;\nloop invariant i59: 0 <= x;\nloop invariant i60: x <= n;\nloop invariant i61: x >= 0;\n*/\nwhile(x<n) {\n     if(unknown2()) {\n\tm = x;\n     }\n     x= x+1;\n  }\n  if(n>0) {;\n//@ assert(0<=m && m<n);\n}\n\n}",
        "combined_annotation_num_solver_calls": 18,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main() {\n  int x= 0;\n  int m=0;\n  int n = unknown1();\n  /*@\n\n\nloop invariant i3: m <= x;\n\nloop invariant i5: n <= n;\nloop invariant i6: x <= x;\nloop invariant i7: m <= m;\nloop invariant i8: 0 <= m;\nloop invariant i9: m >= 0;\n\n\nloop invariant i12: m < x ==> m <= n;\nloop invariant i13: m < x ==> m < n;\nloop invariant i14: m < x ==> m < n ==> m < n;\nloop invariant i15: m < x ==> m < n ==> m < n ==> m < n;\nloop invariant i16: m < x ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant i17: m < x ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant i18: m < x ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant i19: m < x ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant i20: m < x ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant i21: m < x ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant i22: m < x ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant i23: m < x ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant i24: m < x ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant i25: m < x ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant i26: m < x ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant i27: m < x ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant i28: m < x ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant i29: m < x ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant i30: m < x ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant i31: m < x ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant i32: m == x-1 ==> x >= m && x <= n;\nloop invariant i33: x < n ==> m <= x;\n\nloop invariant i35: m < n ==> 0 <= x <= n;\nloop invariant i36: m < n ==> 0 <= m <= n;\n\nloop invariant i38: m < n ==> m <= x;\n\n\n\n\n\n\n\n\n\n\nloop invariant i49: (x < n) ==> (m < n);\nloop invariant i50: (x < n) ==> (m >= 0);\n\n\n\n\n\n\n\nloop invariant i58: n > 0 ==> 0 <= m < n;\nloop invariant i59: 0 <= x;\n\nloop invariant i61: x >= 0;\n*/\nwhile(x<n) {\n     if(unknown2()) {\n\tm = x;\n     }\n     x= x+1;\n  }\n  if(n>0) {;\n//@ assert(0<=m && m<n);\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/split.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/11.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/15.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/16.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/18.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/23.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/30.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/32.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/37.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/13.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/14.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/19.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/20.c"
        ],
        "skipped": [],
        "total": 118,
        "success_count": 98,
        "failure_count": 20,
        "success_rate": 0.8305084745762712
    }
}