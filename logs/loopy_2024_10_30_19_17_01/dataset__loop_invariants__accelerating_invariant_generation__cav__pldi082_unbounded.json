{
    "logs": {
        "file": "../dataset/loop_invariants/accelerating_invariant_generation/cav/pldi082_unbounded.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n\n  int x = 0;\n  int y = 0;\n  int N;\n\n  if(N < 0)\n    return 1;\n\n  while (1){\n     if (x <= N)\n        y++;\n     else if(x >= N+1)\n       y--;\n     else return 1;\n\n     if ( y < 0)\n       break;\n     x++;\n  }\n\n  if(N >= 0)\n    if(y == -1)\n      if (x >= 2 * N + 3)\n        goto ERROR;\n\n  return 1;\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
        "success": false,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= x <= N + 2;\nloop invariant y == 0;\nloop invariant x >= N + 1 || y == -1;\nloop invariant x >= N + 1 || y == -1;\nloop invariant y >= -1;\nloop invariant x <= 2 * N + 1;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= N + 2;\nloop invariant -1 <= y <= 1;\nloop invariant 0 <= N;\nloop invariant x <= 2 * N + 3;\nloop invariant y == -1 ==> x >= 2 * N + 3;\nloop invariant x >= N ==> y == -1;\nloop invariant y <= 0 ==> x >= N + 1;\nloop invariant y >= 0 ==> x <= N;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 1;\nloop invariant x >= 0;\nloop invariant (x <= N ==> y <= N);\nloop invariant (x >= N+1 ==> y >= -1);\nloop invariant (x == N ==> y == 0);\nloop invariant (x == N+1 ==> y == -1);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 2 * N + 3;\nloop invariant 0 <= y <= -1;\nloop invariant N >= -1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= N + 2 * N + 2;\nloop invariant 0 <= y <= N + 1;\nloop invariant (if N >= 0 then y <= -1 ==> x >= 2 * N + 3 else \\top);\nloop invariant (if N >= 0 then y <= -1 ==> x <= 2 * N + 2 else \\top);\nloop invariant (if N >= 0 then y >= 0 ==> x <= N else \\top);\nloop invariant (if N >= 0 then y >= 0 ==> x >= 0 else \\top);\nloop invariant (if N >= 0 then y >= 0 ==> x <= 2 * N + 2 else \\top);\nloop invariant (if N >= 0 then y >= 0 ==> x >= 0 else \\top);\nloop invariant (if N >= 0 then y == -1 ==> x <= 2 * N + 2 else \\top);\nloop invariant (if N >= 0 then y == -1 ==> x >= 0 else \\top);\nloop invariant (if N < 0 then y <= -1 ==> x <= 2 * N + 2 else \\top);\nloop invariant (if N < 0 then y <= -1 ==> x >= 0 else \\top);\nloop invariant (if N < 0 then y >= 0 ==> x <= N else \\top);\nloop invariant (if N < 0 then y >= 0 ==> x >= 0 else \\top);\nloop invariant (if N < 0 then y >= 0 ==> x <= 2 * N + 2 else \\top);\nloop invariant (if N < 0 then y >= 0 ==> x >= 0 else \\top);\nloop invariant (if N < 0 then y == -1 ==> x <= 2 * N + 2 else \\top);\nloop invariant (if N < 0 then y == -1 ==> x >= 0 else \\top);\nloop invariant (if N < 0 then \\bot ==> x <= 2 * N + 2 else \\top);\nloop invariant (if N < 0 then \\bot ==> x >= 0 else \\top);\nloop invariant (if N < 0 then \\bot ==> y <= -1 else \\top);\nloop invariant (if N < 0 then \\bot ==> y >= 0 else \\top);\nloop invariant (if N < 0 then \\bot ==> y == -1 else \\top);\nloop invariant (if N < 0 then \\bot ==> y <= -1 else \\top);\nloop invariant (if N < 0 then \\bot ==> y >= 0 else \\top);\nloop invariant (if N < 0 then \\bot ==> y == -1 else \\top);\nloop invariant (if N < 0 then \\bot ==> x <= 2 * N + 2 else \\top);\nloop invariant (if N < 0 then \\bot ==> x >= 0 else \\top);\nloop invariant (if N < 0 then \\bot ==> y <= -1 else \\top);\nloop invariant (if N < 0 then \\bot ==> y >= 0 else \\top);\nloop invariant (if N < 0 then \\bot ==> y == -1 else \\top);\nloop invariant (if N < 0 then \\bot ==> x <= 2 * N + 2 else \\top);\nloop invariant (if N < 0 then \\bot ==> x >= 0 else \\top);\nloop invariant (if N < 0 then \\bot ==> y <= -1 else \\top);\nloop invariant (if N < 0 then \\bot ==> y >= 0 else \\top);\nloop invariant (if N < 0 then \\bot ==> y == -1 else \\top);\nloop invariant (if N < 0 then \\bot ==> x <= 2 * N + 2 else \\top);\nloop invariant (if N < 0 then \\bot ==> x >= 0 else \\top);\nloop invariant (if N < 0 then \\bot ==> y <= -1 else \\top);\nloop invariant (if N < 0 then \\bot ==> y >= 0 else \\top);\nloop invariant (if N < 0 then \\bot ==> y == -1 else \\top);\nloop invariant (if N < 0 then \\bot ==> x <= 2 * N + 2 else \\top);\nloop invariant (if N < 0 then \\bot ==> x >= 0 else \\top);\nloop invariant (if N < 0 then \\bot ==> y <= -1 else \\top);\nloop invariant (if N < 0 then \\bot ==> y >= 0 else \\top);\nloop invariant (if N < 0 then \\bot ==> y == -1 else \\top);\n*/\n```",
            "```\n/*@\nloop invariant x <= N;\nloop invariant y >= 0;\nloop invariant y <= 100000;\nloop invariant (x - y) >= 0;\nloop invariant (x - y) <= N + 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 1;\nloop invariant x <= N + 2;\nloop invariant N >= 0 ==> (y == -1 ==> x >= 2 * N + 3);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 2 * N + 2;\nloop invariant 0 <= y <= 2 * N + 1;\nloop invariant x + 1 <= 2 * N + 3;\nloop invariant y <= x - 1 ==> x >= 2 * N + 3;\nloop invariant y <= -1 ==> x >= 2 * N + 3;\nloop invariant y >= -1 ==> x < 2 * N + 3;\nloop invariant y >= 0 ==> x <= 2 * N + 2;\nloop invariant y == 0 ==> x <= 2 * N + 2;\nloop invariant y == -1 ==> x >= 2 * N + 3;\nloop invariant y >= -1 ==> x <= 2 * N + 2;\nloop invariant y >= 0 ==> x >= 2 * N + 3;\nloop invariant y == 0 ==> x >= 2 * N + 3;\nloop invariant y == -1 ==> x < 2 * N + 3;\nloop invariant y >= -1 ==> x >= 2 * N + 3;\nloop invariant y >= 0 ==> x <= 2 * N + 2;\nloop invariant y == 0 ==> x <= 2 * N + 2;\nloop invariant y == -1 ==> x >= 2 * N + 3;\nloop invariant y == 0 ==> x >= 2 * N + 3;\nloop invariant y == -1 ==> x < 2 * N + 3;\nloop invariant y == 0 ==> x >= 2 * N + 3;\nloop invariant y == -1 ==> x < 2 * N + 3;\nloop invariant y >= -1 ==> x >= 2 * N + 3;\nloop invariant y >= 0 ==> x <= 2 * N + 2;\nloop invariant y == 0 ==> x <= 2 * N + 2;\nloop invariant y == -1 ==> x >= 2 * N + 3;\nloop invariant y == 0 ==> x >= 2 * N + 3;\nloop invariant y == -1 ==> x < 2 * N + 3;\nloop invariant y == 0 ==> x >= 2 * N + 3;\nloop invariant y == -1 ==> x < 2 * N + 3;\nloop invariant y >= -1 ==> x >= 2 * N + 3;\nloop invariant y >= 0 ==> x <= 2 * N + 2;\nloop invariant y == 0 ==> x <= 2 * N + 2;\nloop invariant y == -1 ==> x >= 2 * N + 3;\nloop invariant y == 0 ==> x >= 2 * N + 3;\nloop invariant y == -1 ==> x < 2 * N + 3;\nloop invariant y == 0 ==> x >= 2 * N + 3;\nloop invariant y == -1 ==> x < 2 * N + 3;\nloop invariant y >= -1 ==> x >= 2 * N + 3;\nloop invariant y >= 0 ==> x <= 2 * N + 2;\nloop invariant y == 0 ==> x <= 2 * N + 2;\nloop invariant y == -1 ==> x >= 2 * N + 3;\nloop invariant y == 0 ==> x >= 2 * N + 3;\nloop invariant y == -1 ==> x < 2 * N + 3;\nloop invariant y == 0 ==> x >= 2 * N + 3;\nloop invariant y == -1 ==> x < 2 * N + 3;\nloop invariant y >= -1 ==> x >= 2 * N + 3;\nloop invariant y >= 0 ==> x <= 2 * N + 2;\nloop invariant y == 0 ==> x <= 2 * N + 2;\nloop invariant y == -1 ==> x >= 2 * N + 3;\nloop invariant y == 0 ==> x >= 2 * N + 3;\nloop invariant y == -1 ==> x < 2 * N + 3;\nloop invariant y == 0 ==> x >= 2 * N + 3;\nloop invariant y == -1 ==> x < 2 * N + 3;\nloop invariant y >= -1 ==> x >= 2 * N + 3;\nloop invariant y >= 0 ==> x <= 2 * N + 2;\nloop invariant y == 0 ==> x <= 2 * N + 2;\nloop invariant y == -1 ==> x >= 2 * N + 3;\nloop invariant y == 0 ==> x >= 2 * N + 3;\nloop invariant y == -1 ==> x < 2 * N + 3;\n*/\n```",
            "```\n/*@\nloop invariant ( 0 <= y && y <= 2 * N + 3 );\nloop invariant ( x >= 0 );\nloop invariant ( x <= 2 * N + 2 );\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= -1; loop invariant x >= 2 * N + 3;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 2 * N + 3;\nloop invariant -1 <= y <= 2 * N + 3 - x;\nloop invariant x <= N ==> y == x - N;\nloop invariant x >= N + 1 ==> y == -2 * N - x;\nloop invariant x == N + 1 ==> y == -1;\nloop invariant x <= N ==> y == x - N;\nloop invariant x >= N + 1 ==> y == -2 * N - x;\nloop invariant x == N + 1 ==> y == -1;\nloop invariant x <= N ==> y == x - N;\nloop invariant x >= N + 1 ==> y == -2 * N - x;\nloop invariant x == N + 1 ==> y == -1;\nloop invariant x <= N ==> y == x - N;\nloop invariant x >= N + 1 ==> y == -2 * N - x;\nloop invariant x == N + 1 ==> y == -1;\nloop invariant x <= N ==> y == x - N;\nloop invariant x >= N + 1 ==> y == -2 * N - x;\nloop invariant x == N + 1 ==> y == -1;\nloop invariant x <= N ==> y == x - N;\nloop invariant x >= N + 1 ==> y == -2 * N - x;\nloop invariant x == N + 1 ==> y == -1;\nloop invariant x <= N ==> y == x - N;\nloop invariant x >= N + 1 ==> y == -2 * N - x;\nloop invariant x == N + 1 ==> y == -1;\nloop invariant x <= N ==> y == x - N;\nloop invariant x >= N + 1 ==> y == -2 * N - x;\nloop invariant x == N + 1 ==> y == -1;\nloop invariant x <= N ==> y == x - N;\nloop invariant x >= N + 1 ==> y == -2 * N - x;\nloop invariant x == N + 1 ==> y == -1;\nloop invariant x <= N ==> y == x - N;\nloop invariant x >= N + 1 ==> y == -2 * N - x;\nloop invariant x == N + 1 ==> y == -1;\nloop invariant x <= N ==> y == x - N;\nloop invariant x >= N + 1 ==> y == -2 * N - x;\nloop invariant x == N + 1 ==> y == -1;\nloop invariant x <= N ==> y == x - N;\nloop invariant x >= N + 1 ==> y == -2 * N - x;\nloop invariant x == N + 1 ==> y == -1;\nloop invariant x <= N ==> y == x - N;\nloop invariant x >= N + 1 ==> y == -2 * N - x;\nloop invariant x == N + 1 ==> y == -1;\nloop invariant x <= N ==> y == x - N;\nloop invariant x >= N + 1 ==> y == -2 * N - x;\nloop invariant x == N + 1 ==> y == -1;\nloop invariant x <= N ==> y == x - N;\nloop invariant x >= N + 1 ==> y == -2 * N - x;\nloop invariant x == N + 1 ==> y == -1;\nloop invariant x <= N ==> y == x - N;\nloop invariant x >= N + 1 ==> y == -2 * N - x;\nloop invariant x == N + 1 ==> y == -1;\nloop invariant x <= N ==> y == x - N;\nloop invariant x >= N + 1 ==> y == -2 * N - x;\nloop invariant x == N + 1 ==> y == -1;\nloop invariant x <= N ==> y == x - N;\nloop invariant x >= N + 1 ==> y == -2 * N - x;\nloop invariant x == N + 1 ==> y == -1;\nloop invariant x <= N ==> y == x - N;\nloop invariant x >= N + 1 ==> y == -2 * N - x;\nloop invariant x == N + 1 ==> y == -1;\nloop invariant x <= N ==> y == x - N;\nloop invariant x >= N + 1 ==> y == -2 * N - x;\nloop invariant x == N + 1 ==> y == -1;\nloop invariant x <= N ==> y == x - N;\nloop invariant x >= N + 1 ==> y == -2 * N - x;\nloop invariant x == N + 1 ==> y == -1;\nloop invariant x <= N ==> y == x - N;\nloop invariant x >= N + 1 ==> y == -2 * N - x;\nloop invariant x == N + 1 ==> y == -1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant 0 <= y <= 100000;\nloop invariant x = 0;\nloop invariant N >= 0;\nloop invariant y < 0;\nloop invariant 0 <= y <= 100000;\nloop invariant x = 0;\nloop invariant N >= 0;\nloop invariant y < 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= N + 2;\nloop invariant 0 <= y <= 1;\nloop invariant N >= 0 ==> (x >= 2 * N + 3 ==> y == -1);\nloop invariant N < 0 ==> (x >= 2 * N + 3 ==> y == 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= N + 2;\nloop invariant 0 <= y <= N + 1;\nloop invariant x >= N + 1 ==> y == -1;\nloop invariant x >= N + 1 ==> y <= -1;\nloop invariant x < N + 1 ==> y <= N;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= N + 2;\nloop invariant y == 0;\nloop invariant x >= N + 1 || y == -1;\nloop invariant x >= N + 1 || y == -1;\nloop invariant y >= -1;\nloop invariant x <= 2 * N + 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n\n  int x = 0;\n  int y = 0;\n  int N;\n\n  if(N < 0)\n    return 1;\n\n  /*@\n\n\n\nloop invariant i4: y >= -1;\n\n*/\nwhile (1){\n     if (x <= N)\n        y++;\n     else if(x >= N+1)\n       y--;\n     else return 1;\n\n     if ( y < 0)\n       break;\n     x++;\n  }\n\n  if(N >= 0)\n    if(y == -1)\n      if (x >= 2 * N + 3)\n        goto ERROR;\n\n  return 1;\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= N + 2;\nloop invariant -1 <= y <= 1;\nloop invariant 0 <= N;\nloop invariant x <= 2 * N + 3;\nloop invariant y == -1 ==> x >= 2 * N + 3;\nloop invariant x >= N ==> y == -1;\nloop invariant y <= 0 ==> x >= N + 1;\nloop invariant y >= 0 ==> x <= N;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n\n  int x = 0;\n  int y = 0;\n  int N;\n\n  if(N < 0)\n    return 1;\n\n  /*@\n\n\nloop invariant i3: 0 <= N;\n\nloop invariant i5: y == -1 ==> x >= 2 * N + 3;\n\n\n\n*/\nwhile (1){\n     if (x <= N)\n        y++;\n     else if(x >= N+1)\n       y--;\n     else return 1;\n\n     if ( y < 0)\n       break;\n     x++;\n  }\n\n  if(N >= 0)\n    if(y == -1)\n      if (x >= 2 * N + 3)\n        goto ERROR;\n\n  return 1;\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 1;\nloop invariant x >= 0;\nloop invariant (x <= N ==> y <= N);\nloop invariant (x >= N+1 ==> y >= -1);\nloop invariant (x == N ==> y == 0);\nloop invariant (x == N+1 ==> y == -1);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n\n  int x = 0;\n  int y = 0;\n  int N;\n\n  if(N < 0)\n    return 1;\n\n  /*@\n\nloop invariant i2: x >= 0;\n\nloop invariant i4: (x >= N+1 ==> y >= -1);\n\n\n*/\nwhile (1){\n     if (x <= N)\n        y++;\n     else if(x >= N+1)\n       y--;\n     else return 1;\n\n     if ( y < 0)\n       break;\n     x++;\n  }\n\n  if(N >= 0)\n    if(y == -1)\n      if (x >= 2 * N + 3)\n        goto ERROR;\n\n  return 1;\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 2 * N + 3;\nloop invariant 0 <= y <= -1;\nloop invariant N >= -1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n\n  int x = 0;\n  int y = 0;\n  int N;\n\n  if(N < 0)\n    return 1;\n\n  /*@\n\n\nloop invariant i3: N >= -1;\n*/\nwhile (1){\n     if (x <= N)\n        y++;\n     else if(x >= N+1)\n       y--;\n     else return 1;\n\n     if ( y < 0)\n       break;\n     x++;\n  }\n\n  if(N >= 0)\n    if(y == -1)\n      if (x >= 2 * N + 3)\n        goto ERROR;\n\n  return 1;\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 20,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= N + 2 * N + 2;\nloop invariant 0 <= y <= N + 1;\nloop invariant (if N >= 0 then y <= -1 ==> x >= 2 * N + 3 else \\top);\nloop invariant (if N >= 0 then y <= -1 ==> x <= 2 * N + 2 else \\top);\nloop invariant (if N >= 0 then y >= 0 ==> x <= N else \\top);\nloop invariant (if N >= 0 then y >= 0 ==> x >= 0 else \\top);\nloop invariant (if N >= 0 then y >= 0 ==> x <= 2 * N + 2 else \\top);\nloop invariant (if N >= 0 then y >= 0 ==> x >= 0 else \\top);\nloop invariant (if N >= 0 then y == -1 ==> x <= 2 * N + 2 else \\top);\nloop invariant (if N >= 0 then y == -1 ==> x >= 0 else \\top);\nloop invariant (if N < 0 then y <= -1 ==> x <= 2 * N + 2 else \\top);\nloop invariant (if N < 0 then y <= -1 ==> x >= 0 else \\top);\nloop invariant (if N < 0 then y >= 0 ==> x <= N else \\top);\nloop invariant (if N < 0 then y >= 0 ==> x >= 0 else \\top);\nloop invariant (if N < 0 then y >= 0 ==> x <= 2 * N + 2 else \\top);\nloop invariant (if N < 0 then y >= 0 ==> x >= 0 else \\top);\nloop invariant (if N < 0 then y == -1 ==> x <= 2 * N + 2 else \\top);\nloop invariant (if N < 0 then y == -1 ==> x >= 0 else \\top);\nloop invariant (if N < 0 then \\bot ==> x <= 2 * N + 2 else \\top);\nloop invariant (if N < 0 then \\bot ==> x >= 0 else \\top);\nloop invariant (if N < 0 then \\bot ==> y <= -1 else \\top);\nloop invariant (if N < 0 then \\bot ==> y >= 0 else \\top);\nloop invariant (if N < 0 then \\bot ==> y == -1 else \\top);\nloop invariant (if N < 0 then \\bot ==> y <= -1 else \\top);\nloop invariant (if N < 0 then \\bot ==> y >= 0 else \\top);\nloop invariant (if N < 0 then \\bot ==> y == -1 else \\top);\nloop invariant (if N < 0 then \\bot ==> x <= 2 * N + 2 else \\top);\nloop invariant (if N < 0 then \\bot ==> x >= 0 else \\top);\nloop invariant (if N < 0 then \\bot ==> y <= -1 else \\top);\nloop invariant (if N < 0 then \\bot ==> y >= 0 else \\top);\nloop invariant (if N < 0 then \\bot ==> y == -1 else \\top);\nloop invariant (if N < 0 then \\bot ==> x <= 2 * N + 2 else \\top);\nloop invariant (if N < 0 then \\bot ==> x >= 0 else \\top);\nloop invariant (if N < 0 then \\bot ==> y <= -1 else \\top);\nloop invariant (if N < 0 then \\bot ==> y >= 0 else \\top);\nloop invariant (if N < 0 then \\bot ==> y == -1 else \\top);\nloop invariant (if N < 0 then \\bot ==> x <= 2 * N + 2 else \\top);\nloop invariant (if N < 0 then \\bot ==> x >= 0 else \\top);\nloop invariant (if N < 0 then \\bot ==> y <= -1 else \\top);\nloop invariant (if N < 0 then \\bot ==> y >= 0 else \\top);\nloop invariant (if N < 0 then \\bot ==> y == -1 else \\top);\nloop invariant (if N < 0 then \\bot ==> x <= 2 * N + 2 else \\top);\nloop invariant (if N < 0 then \\bot ==> x >= 0 else \\top);\nloop invariant (if N < 0 then \\bot ==> y <= -1 else \\top);\nloop invariant (if N < 0 then \\bot ==> y >= 0 else \\top);\nloop invariant (if N < 0 then \\bot ==> y == -1 else \\top);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n\n  int x = 0;\n  int y = 0;\n  int N;\n\n  if(N < 0)\n    return 1;\n\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (1){\n     if (x <= N)\n        y++;\n     else if(x >= N+1)\n       y--;\n     else return 1;\n\n     if ( y < 0)\n       break;\n     x++;\n  }\n\n  if(N >= 0)\n    if(y == -1)\n      if (x >= 2 * N + 3)\n        goto ERROR;\n\n  return 1;\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant x <= N;\nloop invariant y >= 0;\nloop invariant y <= 100000;\nloop invariant (x - y) >= 0;\nloop invariant (x - y) <= N + 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n\n  int x = 0;\n  int y = 0;\n  int N;\n\n  if(N < 0)\n    return 1;\n\n  /*@\n\nloop invariant i2: y >= 0;\n\nloop invariant i4: (x - y) >= 0;\n\n*/\nwhile (1){\n     if (x <= N)\n        y++;\n     else if(x >= N+1)\n       y--;\n     else return 1;\n\n     if ( y < 0)\n       break;\n     x++;\n  }\n\n  if(N >= 0)\n    if(y == -1)\n      if (x >= 2 * N + 3)\n        goto ERROR;\n\n  return 1;\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 1;\nloop invariant x <= N + 2;\nloop invariant N >= 0 ==> (y == -1 ==> x >= 2 * N + 3);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n\n  int x = 0;\n  int y = 0;\n  int N;\n\n  if(N < 0)\n    return 1;\n\n  /*@\n\n\nloop invariant i3: N >= 0 ==> (y == -1 ==> x >= 2 * N + 3);\n*/\nwhile (1){\n     if (x <= N)\n        y++;\n     else if(x >= N+1)\n       y--;\n     else return 1;\n\n     if ( y < 0)\n       break;\n     x++;\n  }\n\n  if(N >= 0)\n    if(y == -1)\n      if (x >= 2 * N + 3)\n        goto ERROR;\n\n  return 1;\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 10,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 2 * N + 2;\nloop invariant 0 <= y <= 2 * N + 1;\nloop invariant x + 1 <= 2 * N + 3;\nloop invariant y <= x - 1 ==> x >= 2 * N + 3;\nloop invariant y <= -1 ==> x >= 2 * N + 3;\nloop invariant y >= -1 ==> x < 2 * N + 3;\nloop invariant y >= 0 ==> x <= 2 * N + 2;\nloop invariant y == 0 ==> x <= 2 * N + 2;\nloop invariant y == -1 ==> x >= 2 * N + 3;\nloop invariant y >= -1 ==> x <= 2 * N + 2;\nloop invariant y >= 0 ==> x >= 2 * N + 3;\nloop invariant y == 0 ==> x >= 2 * N + 3;\nloop invariant y == -1 ==> x < 2 * N + 3;\nloop invariant y >= -1 ==> x >= 2 * N + 3;\nloop invariant y >= 0 ==> x <= 2 * N + 2;\nloop invariant y == 0 ==> x <= 2 * N + 2;\nloop invariant y == -1 ==> x >= 2 * N + 3;\nloop invariant y == 0 ==> x >= 2 * N + 3;\nloop invariant y == -1 ==> x < 2 * N + 3;\nloop invariant y == 0 ==> x >= 2 * N + 3;\nloop invariant y == -1 ==> x < 2 * N + 3;\nloop invariant y >= -1 ==> x >= 2 * N + 3;\nloop invariant y >= 0 ==> x <= 2 * N + 2;\nloop invariant y == 0 ==> x <= 2 * N + 2;\nloop invariant y == -1 ==> x >= 2 * N + 3;\nloop invariant y == 0 ==> x >= 2 * N + 3;\nloop invariant y == -1 ==> x < 2 * N + 3;\nloop invariant y == 0 ==> x >= 2 * N + 3;\nloop invariant y == -1 ==> x < 2 * N + 3;\nloop invariant y >= -1 ==> x >= 2 * N + 3;\nloop invariant y >= 0 ==> x <= 2 * N + 2;\nloop invariant y == 0 ==> x <= 2 * N + 2;\nloop invariant y == -1 ==> x >= 2 * N + 3;\nloop invariant y == 0 ==> x >= 2 * N + 3;\nloop invariant y == -1 ==> x < 2 * N + 3;\nloop invariant y == 0 ==> x >= 2 * N + 3;\nloop invariant y == -1 ==> x < 2 * N + 3;\nloop invariant y >= -1 ==> x >= 2 * N + 3;\nloop invariant y >= 0 ==> x <= 2 * N + 2;\nloop invariant y == 0 ==> x <= 2 * N + 2;\nloop invariant y == -1 ==> x >= 2 * N + 3;\nloop invariant y == 0 ==> x >= 2 * N + 3;\nloop invariant y == -1 ==> x < 2 * N + 3;\nloop invariant y == 0 ==> x >= 2 * N + 3;\nloop invariant y == -1 ==> x < 2 * N + 3;\nloop invariant y >= -1 ==> x >= 2 * N + 3;\nloop invariant y >= 0 ==> x <= 2 * N + 2;\nloop invariant y == 0 ==> x <= 2 * N + 2;\nloop invariant y == -1 ==> x >= 2 * N + 3;\nloop invariant y == 0 ==> x >= 2 * N + 3;\nloop invariant y == -1 ==> x < 2 * N + 3;\nloop invariant y == 0 ==> x >= 2 * N + 3;\nloop invariant y == -1 ==> x < 2 * N + 3;\nloop invariant y >= -1 ==> x >= 2 * N + 3;\nloop invariant y >= 0 ==> x <= 2 * N + 2;\nloop invariant y == 0 ==> x <= 2 * N + 2;\nloop invariant y == -1 ==> x >= 2 * N + 3;\nloop invariant y == 0 ==> x >= 2 * N + 3;\nloop invariant y == -1 ==> x < 2 * N + 3;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n\n  int x = 0;\n  int y = 0;\n  int N;\n\n  if(N < 0)\n    return 1;\n\n  /*@\n\n\n\n\nloop invariant i5: y <= -1 ==> x >= 2 * N + 3;\n\n\n\nloop invariant i9: y == -1 ==> x >= 2 * N + 3;\n\n\n\nloop invariant i13: y == -1 ==> x < 2 * N + 3;\n\n*/\nwhile (1){\n     if (x <= N)\n        y++;\n     else if(x >= N+1)\n       y--;\n     else return 1;\n\n     if ( y < 0)\n       break;\n     x++;\n  }\n\n  if(N >= 0)\n    if(y == -1)\n      if (x >= 2 * N + 3)\n        goto ERROR;\n\n  return 1;\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant ( 0 <= y && y <= 2 * N + 3 );\nloop invariant ( x >= 0 );\nloop invariant ( x <= 2 * N + 2 );\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n\n  int x = 0;\n  int y = 0;\n  int N;\n\n  if(N < 0)\n    return 1;\n\n  /*@\n\nloop invariant i2: ( x >= 0 );\n\n*/\nwhile (1){\n     if (x <= N)\n        y++;\n     else if(x >= N+1)\n       y--;\n     else return 1;\n\n     if ( y < 0)\n       break;\n     x++;\n  }\n\n  if(N >= 0)\n    if(y == -1)\n      if (x >= 2 * N + 3)\n        goto ERROR;\n\n  return 1;\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= -1; loop invariant x >= 2 * N + 3;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n\n  int x = 0;\n  int y = 0;\n  int N;\n\n  if(N < 0)\n    return 1;\n\n  /*@\n\n*/\nwhile (1){\n     if (x <= N)\n        y++;\n     else if(x >= N+1)\n       y--;\n     else return 1;\n\n     if ( y < 0)\n       break;\n     x++;\n  }\n\n  if(N >= 0)\n    if(y == -1)\n      if (x >= 2 * N + 3)\n        goto ERROR;\n\n  return 1;\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 2 * N + 3;\nloop invariant -1 <= y <= 2 * N + 3 - x;\nloop invariant x <= N ==> y == x - N;\nloop invariant x >= N + 1 ==> y == -2 * N - x;\nloop invariant x == N + 1 ==> y == -1;\nloop invariant x <= N ==> y == x - N;\nloop invariant x >= N + 1 ==> y == -2 * N - x;\nloop invariant x == N + 1 ==> y == -1;\nloop invariant x <= N ==> y == x - N;\nloop invariant x >= N + 1 ==> y == -2 * N - x;\nloop invariant x == N + 1 ==> y == -1;\nloop invariant x <= N ==> y == x - N;\nloop invariant x >= N + 1 ==> y == -2 * N - x;\nloop invariant x == N + 1 ==> y == -1;\nloop invariant x <= N ==> y == x - N;\nloop invariant x >= N + 1 ==> y == -2 * N - x;\nloop invariant x == N + 1 ==> y == -1;\nloop invariant x <= N ==> y == x - N;\nloop invariant x >= N + 1 ==> y == -2 * N - x;\nloop invariant x == N + 1 ==> y == -1;\nloop invariant x <= N ==> y == x - N;\nloop invariant x >= N + 1 ==> y == -2 * N - x;\nloop invariant x == N + 1 ==> y == -1;\nloop invariant x <= N ==> y == x - N;\nloop invariant x >= N + 1 ==> y == -2 * N - x;\nloop invariant x == N + 1 ==> y == -1;\nloop invariant x <= N ==> y == x - N;\nloop invariant x >= N + 1 ==> y == -2 * N - x;\nloop invariant x == N + 1 ==> y == -1;\nloop invariant x <= N ==> y == x - N;\nloop invariant x >= N + 1 ==> y == -2 * N - x;\nloop invariant x == N + 1 ==> y == -1;\nloop invariant x <= N ==> y == x - N;\nloop invariant x >= N + 1 ==> y == -2 * N - x;\nloop invariant x == N + 1 ==> y == -1;\nloop invariant x <= N ==> y == x - N;\nloop invariant x >= N + 1 ==> y == -2 * N - x;\nloop invariant x == N + 1 ==> y == -1;\nloop invariant x <= N ==> y == x - N;\nloop invariant x >= N + 1 ==> y == -2 * N - x;\nloop invariant x == N + 1 ==> y == -1;\nloop invariant x <= N ==> y == x - N;\nloop invariant x >= N + 1 ==> y == -2 * N - x;\nloop invariant x == N + 1 ==> y == -1;\nloop invariant x <= N ==> y == x - N;\nloop invariant x >= N + 1 ==> y == -2 * N - x;\nloop invariant x == N + 1 ==> y == -1;\nloop invariant x <= N ==> y == x - N;\nloop invariant x >= N + 1 ==> y == -2 * N - x;\nloop invariant x == N + 1 ==> y == -1;\nloop invariant x <= N ==> y == x - N;\nloop invariant x >= N + 1 ==> y == -2 * N - x;\nloop invariant x == N + 1 ==> y == -1;\nloop invariant x <= N ==> y == x - N;\nloop invariant x >= N + 1 ==> y == -2 * N - x;\nloop invariant x == N + 1 ==> y == -1;\nloop invariant x <= N ==> y == x - N;\nloop invariant x >= N + 1 ==> y == -2 * N - x;\nloop invariant x == N + 1 ==> y == -1;\nloop invariant x <= N ==> y == x - N;\nloop invariant x >= N + 1 ==> y == -2 * N - x;\nloop invariant x == N + 1 ==> y == -1;\nloop invariant x <= N ==> y == x - N;\nloop invariant x >= N + 1 ==> y == -2 * N - x;\nloop invariant x == N + 1 ==> y == -1;\nloop invariant x <= N ==> y == x - N;\nloop invariant x >= N + 1 ==> y == -2 * N - x;\nloop invariant x == N + 1 ==> y == -1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n\n  int x = 0;\n  int y = 0;\n  int N;\n\n  if(N < 0)\n    return 1;\n\n  /*@\n\n\n\n\n\n*/\nwhile (1){\n     if (x <= N)\n        y++;\n     else if(x >= N+1)\n       y--;\n     else return 1;\n\n     if ( y < 0)\n       break;\n     x++;\n  }\n\n  if(N >= 0)\n    if(y == -1)\n      if (x >= 2 * N + 3)\n        goto ERROR;\n\n  return 1;\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant 0 <= y <= 100000;\nloop invariant x = 0;\nloop invariant N >= 0;\nloop invariant y < 0;\nloop invariant 0 <= y <= 100000;\nloop invariant x = 0;\nloop invariant N >= 0;\nloop invariant y < 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n\n  int x = 0;\n  int y = 0;\n  int N;\n\n  if(N < 0)\n    return 1;\n\n  /*@\n\n\n\nloop invariant i4: N >= 0;\n\n*/\nwhile (1){\n     if (x <= N)\n        y++;\n     else if(x >= N+1)\n       y--;\n     else return 1;\n\n     if ( y < 0)\n       break;\n     x++;\n  }\n\n  if(N >= 0)\n    if(y == -1)\n      if (x >= 2 * N + 3)\n        goto ERROR;\n\n  return 1;\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= N + 2;\nloop invariant 0 <= y <= 1;\nloop invariant N >= 0 ==> (x >= 2 * N + 3 ==> y == -1);\nloop invariant N < 0 ==> (x >= 2 * N + 3 ==> y == 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n\n  int x = 0;\n  int y = 0;\n  int N;\n\n  if(N < 0)\n    return 1;\n\n  /*@\n\n\n\n\n*/\nwhile (1){\n     if (x <= N)\n        y++;\n     else if(x >= N+1)\n       y--;\n     else return 1;\n\n     if ( y < 0)\n       break;\n     x++;\n  }\n\n  if(N >= 0)\n    if(y == -1)\n      if (x >= 2 * N + 3)\n        goto ERROR;\n\n  return 1;\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n\n  int x = 0;\n  int y = 0;\n  int N;\n\n  if(N < 0)\n    return 1;\n\n  /*@\n\n\n*/\nwhile (1){\n     if (x <= N)\n        y++;\n     else if(x >= N+1)\n       y--;\n     else return 1;\n\n     if ( y < 0)\n       break;\n     x++;\n  }\n\n  if(N >= 0)\n    if(y == -1)\n      if (x >= 2 * N + 3)\n        goto ERROR;\n\n  return 1;\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= N + 2;\nloop invariant 0 <= y <= N + 1;\nloop invariant x >= N + 1 ==> y == -1;\nloop invariant x >= N + 1 ==> y <= -1;\nloop invariant x < N + 1 ==> y <= N;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n\n  int x = 0;\n  int y = 0;\n  int N;\n\n  if(N < 0)\n    return 1;\n\n  /*@\n\n\n\n\n\n*/\nwhile (1){\n     if (x <= N)\n        y++;\n     else if(x >= N+1)\n       y--;\n     else return 1;\n\n     if ( y < 0)\n       break;\n     x++;\n  }\n\n  if(N >= 0)\n    if(y == -1)\n      if (x >= 2 * N + 3)\n        goto ERROR;\n\n  return 1;\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 41: unexpected token 'N'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n\n  int x = 0;\n  int y = 0;\n  int N;\n\n  if(N < 0)\n    return 1;\n\n  /*@\nloop invariant i1: 0 <= x <= N + 2;\nloop invariant i2: y == 0;\nloop invariant i3: x >= N + 1 || y == -1;\nloop invariant i4: y >= -1;\nloop invariant i5: x <= 2 * N + 1;\nloop invariant i6: 1 <= x <= N + 2;\nloop invariant i7: -1 <= y <= 1;\nloop invariant i8: 0 <= N;\nloop invariant i9: x <= 2 * N + 3;\nloop invariant i10: y == -1 ==> x >= 2 * N + 3;\nloop invariant i11: x >= N ==> y == -1;\nloop invariant i12: y <= 0 ==> x >= N + 1;\nloop invariant i13: y >= 0 ==> x <= N;\nloop invariant i14: 0 <= y <= 1;\nloop invariant i15: x >= 0;\nloop invariant i16: (x <= N ==> y <= N);\nloop invariant i17: (x >= N+1 ==> y >= -1);\nloop invariant i18: (x == N ==> y == 0);\nloop invariant i19: (x == N+1 ==> y == -1);\nloop invariant i20: 0 <= x <= 2 * N + 3;\nloop invariant i21: 0 <= y <= -1;\nloop invariant i22: N >= -1;\nloop invariant i23: 0 <= x <= N + 2 * N + 2;\nloop invariant i24: 0 <= y <= N + 1;\nloop invariant i25: (if N >= 0 then y <= -1 ==> x >= 2 * N + 3 else \\top);\nloop invariant i26: (if N >= 0 then y <= -1 ==> x <= 2 * N + 2 else \\top);\nloop invariant i27: (if N >= 0 then y >= 0 ==> x <= N else \\top);\nloop invariant i28: (if N >= 0 then y >= 0 ==> x >= 0 else \\top);\nloop invariant i29: (if N >= 0 then y >= 0 ==> x <= 2 * N + 2 else \\top);\nloop invariant i30: (if N >= 0 then y == -1 ==> x <= 2 * N + 2 else \\top);\nloop invariant i31: (if N >= 0 then y == -1 ==> x >= 0 else \\top);\nloop invariant i32: (if N < 0 then y <= -1 ==> x <= 2 * N + 2 else \\top);\nloop invariant i33: (if N < 0 then y <= -1 ==> x >= 0 else \\top);\nloop invariant i34: (if N < 0 then y >= 0 ==> x <= N else \\top);\nloop invariant i35: (if N < 0 then y >= 0 ==> x >= 0 else \\top);\nloop invariant i36: (if N < 0 then y >= 0 ==> x <= 2 * N + 2 else \\top);\nloop invariant i37: (if N < 0 then y == -1 ==> x <= 2 * N + 2 else \\top);\nloop invariant i38: (if N < 0 then y == -1 ==> x >= 0 else \\top);\nloop invariant i39: (if N < 0 then \\bot ==> x <= 2 * N + 2 else \\top);\nloop invariant i40: (if N < 0 then \\bot ==> x >= 0 else \\top);\nloop invariant i41: (if N < 0 then \\bot ==> y <= -1 else \\top);\nloop invariant i42: (if N < 0 then \\bot ==> y >= 0 else \\top);\nloop invariant i43: (if N < 0 then \\bot ==> y == -1 else \\top);\nloop invariant i44: x <= N;\nloop invariant i45: y >= 0;\nloop invariant i46: y <= 100000;\nloop invariant i47: (x - y) >= 0;\nloop invariant i48: (x - y) <= N + 1;\nloop invariant i49: x <= N + 2;\nloop invariant i50: N >= 0 ==> (y == -1 ==> x >= 2 * N + 3);\nloop invariant i51: 0 <= x <= 2 * N + 2;\nloop invariant i52: 0 <= y <= 2 * N + 1;\nloop invariant i53: x + 1 <= 2 * N + 3;\nloop invariant i54: y <= x - 1 ==> x >= 2 * N + 3;\nloop invariant i55: y <= -1 ==> x >= 2 * N + 3;\nloop invariant i56: y >= -1 ==> x < 2 * N + 3;\nloop invariant i57: y >= 0 ==> x <= 2 * N + 2;\nloop invariant i58: y == 0 ==> x <= 2 * N + 2;\nloop invariant i59: y >= -1 ==> x <= 2 * N + 2;\nloop invariant i60: y >= 0 ==> x >= 2 * N + 3;\nloop invariant i61: y == 0 ==> x >= 2 * N + 3;\nloop invariant i62: y == -1 ==> x < 2 * N + 3;\nloop invariant i63: y >= -1 ==> x >= 2 * N + 3;\nloop invariant i64: ( 0 <= y && y <= 2 * N + 3 );\nloop invariant i65: ( x >= 0 );\nloop invariant i66: ( x <= 2 * N + 2 );\nloop invariant i67: 0 <= y <= -1; loop invariant x >= 2 * N + 3;\nloop invariant i68: -1 <= y <= 2 * N + 3 - x;\nloop invariant i69: x <= N ==> y == x - N;\nloop invariant i70: x >= N + 1 ==> y == -2 * N - x;\nloop invariant i71: x == N + 1 ==> y == -1;\nloop invariant i72: 0 <= y <= 100000;\nloop invariant i73: x >= (1 + (y - 1) * y / 2);\nloop invariant i74: x = 0;\nloop invariant i75: N >= 0;\nloop invariant i76: y < 0;\nloop invariant i77: N >= 0 ==> (x >= 2 * N + 3 ==> y == -1);\nloop invariant i78: N < 0 ==> (x >= 2 * N + 3 ==> y == 0);\nloop invariant i79: x >= N + 1 ==> y == -1;\nloop invariant i80: x >= N + 1 ==> y <= -1;\nloop invariant i81: x < N + 1 ==> y <= N;\n*/\nwhile (1){\n     if (x <= N)\n        y++;\n     else if(x >= N+1)\n       y--;\n     else return 1;\n\n     if ( y < 0)\n       break;\n     x++;\n  }\n\n  if(N >= 0)\n    if(y == -1)\n      if (x >= 2 * N + 3)\n        goto ERROR;\n\n  return 1;\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
        "combined_annotation_num_solver_calls": 51,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n\n  int x = 0;\n  int y = 0;\n  int N;\n\n  if(N < 0)\n    return 1;\n\n  /*@\n\n\n\nloop invariant i4: y >= -1;\n\n\n\nloop invariant i8: 0 <= N;\nloop invariant i9: x <= 2 * N + 3;\nloop invariant i10: y == -1 ==> x >= 2 * N + 3;\n\n\n\n\nloop invariant i15: x >= 0;\nloop invariant i16: (x <= N ==> y <= N);\nloop invariant i17: (x >= N+1 ==> y >= -1);\n\n\nloop invariant i20: 0 <= x <= 2 * N + 3;\n\nloop invariant i22: N >= -1;\n\nloop invariant i24: 0 <= y <= N + 1;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i45: y >= 0;\n\nloop invariant i47: (x - y) >= 0;\n\n\nloop invariant i50: N >= 0 ==> (y == -1 ==> x >= 2 * N + 3);\n\nloop invariant i52: 0 <= y <= 2 * N + 1;\n\n\nloop invariant i55: y <= -1 ==> x >= 2 * N + 3;\n\n\n\n\n\n\nloop invariant i62: y == -1 ==> x < 2 * N + 3;\n\nloop invariant i64: ( 0 <= y && y <= 2 * N + 3 );\nloop invariant i65: ( x >= 0 );\n\n\nloop invariant i68: -1 <= y <= 2 * N + 3 - x;\n\n\n\n\n\n\nloop invariant i75: N >= 0;\n\n\nloop invariant i78: N < 0 ==> (x >= 2 * N + 3 ==> y == 0);\n\n\nloop invariant i81: x < N + 1 ==> y <= N;\n*/\nwhile (1){\n     if (x <= N)\n        y++;\n     else if(x >= N+1)\n       y--;\n     else return 1;\n\n     if ( y < 0)\n       break;\n     x++;\n  }\n\n  if(N >= 0)\n    if(y == -1)\n      if (x >= 2 * N + 3)\n        goto ERROR;\n\n  return 1;\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/split.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/11.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/15.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/16.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/18.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/23.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/30.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/32.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/37.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/38.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/41.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/43.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/44.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/46.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/popl.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/05.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/07.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/37.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/39.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/gulv_simp.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/13.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/14.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/19.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/20.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/39.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/cav.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/19.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/gulv.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/pldi082_unbounded.c"
        ],
        "skipped": [],
        "total": 134,
        "success_count": 109,
        "failure_count": 25,
        "success_rate": 0.8134328358208955
    }
}