{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/32.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int k = 100;\n  int b = 0;\n  int i = unknown();\n  int j = unknown();\n  int n;\n  i = j = 0;\n  for( n = 0 ; n < 2*k ; n++ ) {\n    if((int )b == 1) {\n      i++;\n      b = 0;\n    } else if ((int )b == 0) {\n      j++;\n      b = 1;\n    } \n    \n  }\n  {;\n//@ assert(i == j);\n}\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= i <= 100;\nloop invariant 0 <= j <= 100;\nloop invariant i == j + 1;\nloop invariant b == 1;\nloop invariant n == 200;\nloop invariant i + j == 100;\nloop invariant i + j == 100;\nloop invariant i + j == 100;\nloop invariant i + j == 100;\nloop invariant i + j == 100;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 100;\nloop invariant 0 <= j <= 100;\nloop invariant i + j == k;\nloop invariant i + j == n / 2;\nloop invariant i + j == n;\nloop invariant i + j == n + k;\nloop invariant i + j == n - k;\nloop invariant i + j == n * k;\nloop invariant i + j == n / k;\nloop invariant i + j == n % k;\nloop invariant i + j == n | k;\nloop invariant i + j == n & k;\nloop invariant i + j == n ^ k;\nloop invariant i + j == n << k;\nloop invariant i + j == n >> k;\nloop invariant i + j == n + k;\nloop invariant i + j == n - k;\nloop invariant i + j == n * k;\nloop invariant i + j == n / k;\nloop invariant i + j == n % k;\nloop invariant i + j == n | k;\nloop invariant i + j == n & k;\nloop invariant i + j == n ^ k;\nloop invariant i + j == n << k;\nloop invariant i + j == n >> k;\nloop invariant i + j == n + k;\nloop invariant i + j == n - k;\nloop invariant i + j == n * k;\nloop invariant i + j == n / k;\nloop invariant i + j == n % k;\nloop invariant i + j == n | k;\nloop invariant i + j == n & k;\nloop invariant i + j == n ^ k;\nloop invariant i + j == n << k;\nloop invariant i + j == n >> k;\nloop invariant i + j == n + k;\nloop invariant i + j == n - k;\nloop invariant i + j == n * k;\nloop invariant i + j == n / k;\nloop invariant i + j == n % k;\nloop invariant i + j == n | k;\nloop invariant i + j == n & k;\nloop invariant i + j == n ^ k;\nloop invariant i + j == n << k;\nloop invariant i + j == n >> k;\nloop invariant i + j == n + k;\nloop invariant i + j == n - k;\nloop invariant i + j == n * k;\nloop invariant i + j == n / k;\nloop invariant i + j == n % k;\nloop invariant i + j == n | k;\nloop invariant i + j == n & k;\nloop invariant i + j == n ^ k;\nloop invariant i + j == n << k;\nloop invariant i + j == n >> k;\nloop invariant i + j == n + k;\nloop invariant i + j == n - k;\nloop invariant i + j == n * k;\nloop invariant i + j == n / k;\nloop invariant i + j == n % k;\nloop invariant i + j == n | k;\nloop invariant i + j == n & k;\nloop invariant i + j == n ^ k;\nloop invariant i + j == n << k;\nloop invariant i + j == n >> k;\nloop invariant i + j == n + k;\nloop invariant i + j == n - k;\nloop invariant i + j == n * k;\nloop invariant i + j == n / k;\nloop invariant i + j == n % k;\nloop invariant i + j == n | k;\nloop invariant i + j == n & k;\nloop invariant i + j == n ^ k;\nloop invariant i + j == n << k;\nloop invariant i + j == n >> k;\nloop invariant i + j == n + k;\nloop invariant i + j == n - k;\nloop invariant i + j == n * k;\nloop invariant i + j == n / k;\nloop invariant i + j == n % k;\nloop invariant i + j == n | k;\nloop invariant i + j == n & k;\nloop invariant i + j == n ^ k;\nloop invariant i + j == n << k;\nloop invariant i + j == n >> k;\nloop invariant i + j == n + k;\nloop invariant i + j == n - k;\nloop invariant i + j == n * k;\nloop invariant i + j == n / k;\nloop invariant i + j == n % k;\nloop invariant i + j == n | k;\nloop invariant i + j == n & k;\nloop invariant i + j == n ^ k;\nloop invariant i + j == n << k;\nloop invariant i + j == n >> k;\nloop invariant i + j == n + k;\nloop invariant i + j == n - k;\nloop invariant i + j == n * k;\nloop invariant i + j == n / k;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= j <= k;\nloop invariant 0 <= i <= k;\nloop invariant i + j <= 2 * k;\nloop invariant i + j == 2 * k ==> i == j;\nloop invariant i + j < 2 * k ==> i != j;\nloop invariant (j < k ==> i <= j) && (j >= k ==> i >= j);\nloop invariant (i < k ==> j <= i) && (i >= k ==> j >= i);\nloop invariant (j < k ==> i < 2 * k) && (j >= k ==> i < k);\nloop invariant (i < k ==> j < k) && (i >= k ==> j < 2 * k);\nloop invariant (j < k ==> i > 0) && (j >= k ==> i > k);\nloop invariant (i < k ==> j > 0) && (i >= k ==> j > k);\nloop invariant (j < k ==> i < k) && (j >= k ==> i < 2 * k);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= k;\nloop invariant 0 <= j <= k;\nloop invariant i + j == k;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant i + j == k;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 100;\nloop invariant 0 <= j <= 100;\nloop invariant i + j <= k * 2;\nloop invariant i + j >= 0;\nloop invariant i + j == k;\nloop invariant (int)b == 1 ==> i >= j;\nloop invariant (int)b == 0 ==> i <= j;\nloop invariant i + j == k ==> (int)b == 1;\nloop invariant i + j == k ==> (int)b == 0;\nloop invariant 0 <= i <= 100;\nloop invariant 0 <= j <= 100;\nloop invariant i + j <= k * 2;\nloop invariant i + j >= 0;\nloop invariant i + j == k;\nloop invariant (int)b == 1 ==> i >= j;\nloop invariant (int)b == 0 ==> i <= j;\nloop invariant i + j == k ==> (int)b == 1;\nloop invariant i + j == k ==> (int)b == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= k;\nloop invariant 0 <= j <= k;\nloop invariant i + j == n;\nloop invariant i <= j;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant n <= 2 * k;\nloop invariant n >= 0;\nloop invariant b == ((n % 2) == 0);\nloop invariant i == (n / 2);\nloop invariant j == (n / 2);\nloop invariant i == j;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant i + j == n;\nloop invariant i <= j;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant n <= 2 * k;\nloop invariant n >= 0;\nloop invariant b == ((n % 2) == 0);\nloop invariant i == (n / 2);\nloop invariant j == (n / 2);\nloop invariant i == j;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant i + j == n;\nloop invariant i <= j;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant n <= 2 * k;\nloop invariant n >= 0;\nloop invariant b == ((n % 2) == 0);\nloop invariant i == (n / 2);\nloop invariant j == (n / 2);\nloop invariant i == j;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant i + j == n;\nloop invariant i <= j;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant n <= 2 * k;\nloop invariant n >= 0;\nloop invariant b == ((n % 2) == 0);\nloop invariant i == (n / 2);\nloop invariant j == (n / 2);\nloop invariant i == j;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant i + j == n;\nloop invariant i <= j;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant n <= 2 * k;\nloop invariant n >= 0;\nloop invariant b == ((n % 2) == 0);\nloop invariant i == (n / 2);\nloop invariant j == (n / 2);\nloop invariant i == j;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant i + j == n;\nloop invariant i <= j;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant n <= 2 * k;\nloop invariant n >= 0;\nloop invariant b == ((n % 2) == 0);\nloop invariant i == (n / 2);\nloop invariant j == (n / 2);\nloop invariant i == j;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant i + j == n;\nloop invariant i <= j;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant n <= 2 * k;\nloop invariant n >= 0;\nloop invariant b == ((n % 2) == 0);\nloop invariant i == (n / 2);\nloop invariant j == (n / 2);\nloop invariant i == j;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant i + j == n;\nloop invariant i <= j;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant n <= 2 * k;\nloop invariant n >= 0;\nloop invariant b == ((n % 2) == 0);\nloop invariant i == (n / 2);\nloop invariant j == (n / 2);\nloop invariant i == j;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant i + j == n;\nloop invariant i <= j;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant n <= 2 * k;\nloop invariant n >= 0;\nloop invariant b == ((n % 2) == 0);\nloop invariant i == (n / 2);\nloop invariant j == (n / 2);\nloop invariant i == j;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant i + j == n;\nloop invariant i <= j;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant n <= 2 * k;\nloop invariant n >= 0;\nloop invariant b == ((n % 2) == 0);\nloop invariant i == (n / 2);\nloop invariant j == (n / 2);\nloop invariant i == j;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant i + j == n;\nloop invariant i <= j;\nloop invariant i >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= n <= 2k;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant b <= 1;\nloop invariant b >= 0;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant n >= 0;\nloop invariant n <= 2k;\nloop invariant n == 2k ==> i == j;\nloop invariant n == 2k ==> i <= k;\nloop invariant n == 2k ==> j <= k;\nloop invariant n == 2k ==> b <= 1;\nloop invariant n == 2k ==> b >= 0;\nloop invariant n == 2k ==> i >= 0;\nloop invariant n == 2k ==> j >= 0;\nloop invariant n == 2k ==> n >= 0;\nloop invariant n == 2k ==> n <= 2k;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i + j <= k;\nloop invariant 0 <= i <= k;\nloop invariant 0 <= j <= k;\nloop invariant i + j == n;\nloop invariant i <= k - j;\nloop invariant j <= k - i;\nloop invariant i + j <= n;\nloop invariant i + j >= n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= k;\nloop invariant 1 <= j <= k;\nloop invariant i + j <= 2 * k;\nloop invariant i >= j;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i == j ==> b == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= k;\nloop invariant 0 <= j <= k;\nloop invariant i + j <= 2 * k;\nloop invariant (i == j) ==> (n % 2 == 0);\nloop invariant (i == j) ==> (n < 2 * k);\nloop invariant (i == j) ==> (i >= 0);\nloop invariant (i == j) ==> (j >= 0);\nloop invariant (i == j) ==> (n >= 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= n <= 2 * k;\nloop invariant i == n / 2;\nloop invariant j == n / 2;\nloop invariant b == ((n % 2) == 0 ? 1 : 0);\nloop invariant i + j == n;\nloop invariant (n % 2) == 0 ==> b == 1;\nloop invariant (n % 2) == 1 ==> b == 0;\nloop invariant (n % 2) == 0 ==> i >= j;\nloop invariant (n % 2) == 1 ==> i <= j;\nloop invariant (n % 2) == 0 ==> i + j == n;\nloop invariant (n % 2) == 1 ==> i + j == n;\nloop invariant (n % 2) == 0 ==> j <= i;\nloop invariant (n % 2) == 1 ==> j >= i;\nloop invariant (n % 2) == 0 ==> i + j == n;\nloop invariant (n % 2) == 1 ==> i + j == n;\nloop invariant (n % 2) == 0 ==> j <= i;\nloop invariant (n % 2) == 1 ==> j >= i;\nloop invariant (n % 2) == 0 ==> i + j == n;\nloop invariant (n % 2) == 1 ==> i + j == n;\nloop invariant (n % 2) == 0 ==> j <= i;\nloop invariant (n % 2) == 1 ==> j >= i;\nloop invariant (n % 2) == 0 ==> i + j == n;\nloop invariant (n % 2) == 1 ==> i + j == n;\nloop invariant (n % 2) == 0 ==> j <= i;\nloop invariant (n % 2) == 1 ==> j >= i;\nloop invariant (n % 2) == 0 ==> i + j == n;\nloop invariant (n % 2) == 1 ==> i + j == n;\nloop invariant (n % 2) == 0 ==> j <= i;\nloop invariant (n % 2) == 1 ==> j >= i;\nloop invariant (n % 2) == 0 ==> i + j == n;\nloop invariant (n % 2) == 1 ==> i + j == n;\nloop invariant (n % 2) == 0 ==> j <= i;\nloop invariant (n % 2) == 1 ==> j >= i;\nloop invariant (n % 2) == 0 ==> i + j == n;\nloop invariant (n % 2) == 1 ==> i + j == n;\nloop invariant (n % 2) == 0 ==> j <= i;\nloop invariant (n % 2) == 1 ==> j >= i;\nloop invariant (n % 2) == 0 ==> i + j == n;\nloop invariant (n % 2) == 1 ==> i + j == n;\nloop invariant (n % 2) == 0 ==> j <= i;\nloop invariant (n % 2) == 1 ==> j >= i;\nloop invariant (n % 2) == 0 ==> i + j == n;\nloop invariant (n % 2) == 1 ==> i + j == n;\nloop invariant (n % 2) == 0 ==> j <= i;\nloop invariant (n % 2) == 1 ==> j >= i;\nloop invariant (n % 2) == 0 ==> i + j == n;\nloop invariant (n % 2) == 1 ==> i + j == n;\nloop invariant (n % 2) == 0 ==> j <= i;\nloop invariant (n % 2) == 1 ==> j >= i;\nloop invariant (n % 2) == 0 ==> i + j == n;\nloop invariant (n % 2) == 1 ==> i + j == n;\nloop invariant (n % 2) == 0 ==> j <= i;\nloop invariant (n % 2) == 1 ==> j >= i;\nloop invariant (n % 2) == 0 ==> i + j == n;\nloop invariant (n % 2) == 1 ==> i + j == n;\nloop invariant (n % 2) == 0 ==> j <= i;\nloop invariant (n % 2) == 1 ==> j >= i;\nloop invariant (n % 2) == 0 ==> i + j == n;\nloop invariant (n % 2) == 1 ==> i + j == n;\nloop invariant (n % 2) == 0 ==> j <= i;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 100;\nloop invariant 0 <= j <= 100;\nloop invariant i + j = k;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 100;\nloop invariant 0 <= j <= 100;\nloop invariant i + j = n / 2;\nloop invariant i * j = n / 2;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i + j <= 100;\nloop invariant i * j <= 100;\nloop invariant i + j >= 0;\nloop invariant i * j >= 0;\nloop invariant i + j == n / 2 ==> i == j;\nloop invariant i * j == n / 2 ==> i == j;\nloop invariant i + j != n / 2 ==> i != j;\nloop invariant i * j != n / 2 ==> i != j;\nloop invariant i + j >= 0 ==> i >= 0;\nloop invariant i + j >= 0 ==> j >= 0;\nloop invariant i + j <= 100 ==> i <= 100;\nloop invariant i + j <= 100 ==> j <= 100;\nloop invariant i * j >= 0 ==> i >= 0;\nloop invariant i * j >= 0 ==> j >= 0;\nloop invariant i * j <= 100 ==> i <= 100;\nloop invariant i * j <= 100 ==> j <= 100;\nloop invariant i >= 0 ==> i >= 0;\nloop invariant i >= 0 ==> i >= 0;\nloop invariant i <= 100 ==> i <= 100;\nloop invariant i <= 100 ==> i <= 100;\nloop invariant j >= 0 ==> j >= 0;\nloop invariant j >= 0 ==> j >= 0;\nloop invariant j <= 100 ==> j <= 100;\nloop invariant j <= 100 ==> j <= 100;\nloop invariant i + j >= 0 ==> i + j >= 0;\nloop invariant i + j >= 0 ==> i + j >= 0;\nloop invariant i + j <= 100 ==> i + j <= 100;\nloop invariant i + j <= 100 ==> i + j <= 100;\nloop invariant i * j >= 0 ==> i * j >= 0;\nloop invariant i * j >= 0 ==> i * j >= 0;\nloop invariant i * j <= 100 ==> i * j <= 100;\nloop invariant i * j <= 100 ==> i * j <= 100;\nloop invariant i >= 0 ==> i >= 0;\nloop invariant i >= 0 ==> i >= 0;\nloop invariant i <= 100 ==> i <= 100;\nloop invariant i <= 100 ==> i <= 100;\nloop invariant j >= 0 ==> j >= 0;\nloop invariant j >= 0 ==> j >= 0;\nloop invariant j <= 100 ==> j <= 100;\nloop invariant j <= 100 ==> j <= 100;\nloop invariant i + j >= 0 ==> i + j >= 0;\nloop invariant i + j >= 0 ==> i + j >= 0;\nloop invariant i + j <= 100 ==> i + j <= 100;\nloop invariant i + j <= 100 ==> i + j <= 100;\nloop invariant i * j >= 0 ==> i * j >= 0;\nloop invariant i * j >= 0 ==> i * j >= 0;\nloop invariant i * j <= 100 ==> i * j <= 100;\nloop invariant i * j <= 100 ==> i * j <= 100;\nloop invariant i >= 0 ==> i >= 0;\nloop invariant i >= 0 ==> i >= 0;\nloop invariant i <= 100 ==> i <= 100;\nloop invariant i <= 100 ==> i <= 100;\nloop invariant j >= 0 ==> j >= 0;\nloop invariant j >= 0 ==> j >= 0;\nloop invariant j <= 100 ==> j <= 100;\nloop invariant j <= 100 ==> j <= 100;\nloop invariant i + j >= 0 ==> i + j >= 0;\nloop invariant i + j >= 0 ==> i + j >= 0;\nloop invariant i + j <= 100 ==> i + j <= 100;\nloop invariant i + j <= 100 ==> i + j <= 100;\nloop invariant i * j >= 0 ==> i * j >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= n <= 2*k;\nloop invariant 0 <= i <= k;\nloop invariant 0 <= j <= k;\nloop invariant (n % 2 == 0 && i == j) ==> (b == 0);\nloop invariant (n % 2 != 0 && i == j) ==> (b == 1);\nloop invariant (n % 2 == 0 && i != j) ==> (b == 1);\nloop invariant (n % 2 != 0 && i != j) ==> (b == 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= b <= 1;\nloop invariant 0 <= i <= k;\nloop invariant 0 <= j <= k;\nloop invariant i + j <= n <= 2*k;\nloop invariant b == ((n % 2) == 1);\nloop invariant i == (n / 2);\nloop invariant j == (n / 2);\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 100;\nloop invariant 0 <= j <= 100;\nloop invariant i == j + 1;\nloop invariant b == 1;\nloop invariant n == 200;\nloop invariant i + j == 100;\nloop invariant i + j == 100;\nloop invariant i + j == 100;\nloop invariant i + j == 100;\nloop invariant i + j == 100;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int k = 100;\n  int b = 0;\n  int i = unknown();\n  int j = unknown();\n  int n;\n  i = j = 0;\n  /*@\n\n\n\n\n\n\n*/\nfor( n = 0 ; n < 2*k ; n++ ) {\n    if((int )b == 1) {\n      i++;\n      b = 0;\n    } else if ((int )b == 0) {\n      j++;\n      b = 1;\n    } \n    \n  }\n  {;\n//@ assert(i == j);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 9,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 100;\nloop invariant 0 <= j <= 100;\nloop invariant i + j == k;\nloop invariant i + j == n / 2;\nloop invariant i + j == n;\nloop invariant i + j == n + k;\nloop invariant i + j == n - k;\nloop invariant i + j == n * k;\nloop invariant i + j == n / k;\nloop invariant i + j == n % k;\nloop invariant i + j == n | k;\nloop invariant i + j == n & k;\nloop invariant i + j == n ^ k;\nloop invariant i + j == n << k;\nloop invariant i + j == n >> k;\nloop invariant i + j == n + k;\nloop invariant i + j == n - k;\nloop invariant i + j == n * k;\nloop invariant i + j == n / k;\nloop invariant i + j == n % k;\nloop invariant i + j == n | k;\nloop invariant i + j == n & k;\nloop invariant i + j == n ^ k;\nloop invariant i + j == n << k;\nloop invariant i + j == n >> k;\nloop invariant i + j == n + k;\nloop invariant i + j == n - k;\nloop invariant i + j == n * k;\nloop invariant i + j == n / k;\nloop invariant i + j == n % k;\nloop invariant i + j == n | k;\nloop invariant i + j == n & k;\nloop invariant i + j == n ^ k;\nloop invariant i + j == n << k;\nloop invariant i + j == n >> k;\nloop invariant i + j == n + k;\nloop invariant i + j == n - k;\nloop invariant i + j == n * k;\nloop invariant i + j == n / k;\nloop invariant i + j == n % k;\nloop invariant i + j == n | k;\nloop invariant i + j == n & k;\nloop invariant i + j == n ^ k;\nloop invariant i + j == n << k;\nloop invariant i + j == n >> k;\nloop invariant i + j == n + k;\nloop invariant i + j == n - k;\nloop invariant i + j == n * k;\nloop invariant i + j == n / k;\nloop invariant i + j == n % k;\nloop invariant i + j == n | k;\nloop invariant i + j == n & k;\nloop invariant i + j == n ^ k;\nloop invariant i + j == n << k;\nloop invariant i + j == n >> k;\nloop invariant i + j == n + k;\nloop invariant i + j == n - k;\nloop invariant i + j == n * k;\nloop invariant i + j == n / k;\nloop invariant i + j == n % k;\nloop invariant i + j == n | k;\nloop invariant i + j == n & k;\nloop invariant i + j == n ^ k;\nloop invariant i + j == n << k;\nloop invariant i + j == n >> k;\nloop invariant i + j == n + k;\nloop invariant i + j == n - k;\nloop invariant i + j == n * k;\nloop invariant i + j == n / k;\nloop invariant i + j == n % k;\nloop invariant i + j == n | k;\nloop invariant i + j == n & k;\nloop invariant i + j == n ^ k;\nloop invariant i + j == n << k;\nloop invariant i + j == n >> k;\nloop invariant i + j == n + k;\nloop invariant i + j == n - k;\nloop invariant i + j == n * k;\nloop invariant i + j == n / k;\nloop invariant i + j == n % k;\nloop invariant i + j == n | k;\nloop invariant i + j == n & k;\nloop invariant i + j == n ^ k;\nloop invariant i + j == n << k;\nloop invariant i + j == n >> k;\nloop invariant i + j == n + k;\nloop invariant i + j == n - k;\nloop invariant i + j == n * k;\nloop invariant i + j == n / k;\nloop invariant i + j == n % k;\nloop invariant i + j == n | k;\nloop invariant i + j == n & k;\nloop invariant i + j == n ^ k;\nloop invariant i + j == n << k;\nloop invariant i + j == n >> k;\nloop invariant i + j == n + k;\nloop invariant i + j == n - k;\nloop invariant i + j == n * k;\nloop invariant i + j == n / k;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int k = 100;\n  int b = 0;\n  int i = unknown();\n  int j = unknown();\n  int n;\n  i = j = 0;\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nfor( n = 0 ; n < 2*k ; n++ ) {\n    if((int )b == 1) {\n      i++;\n      b = 0;\n    } else if ((int )b == 0) {\n      j++;\n      b = 1;\n    } \n    \n  }\n  {;\n//@ assert(i == j);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant 0 <= j <= k;\nloop invariant 0 <= i <= k;\nloop invariant i + j <= 2 * k;\nloop invariant i + j == 2 * k ==> i == j;\nloop invariant i + j < 2 * k ==> i != j;\nloop invariant (j < k ==> i <= j) && (j >= k ==> i >= j);\nloop invariant (i < k ==> j <= i) && (i >= k ==> j >= i);\nloop invariant (j < k ==> i < 2 * k) && (j >= k ==> i < k);\nloop invariant (i < k ==> j < k) && (i >= k ==> j < 2 * k);\nloop invariant (j < k ==> i > 0) && (j >= k ==> i > k);\nloop invariant (i < k ==> j > 0) && (i >= k ==> j > k);\nloop invariant (j < k ==> i < k) && (j >= k ==> i < 2 * k);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int k = 100;\n  int b = 0;\n  int i = unknown();\n  int j = unknown();\n  int n;\n  i = j = 0;\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nfor( n = 0 ; n < 2*k ; n++ ) {\n    if((int )b == 1) {\n      i++;\n      b = 0;\n    } else if ((int )b == 0) {\n      j++;\n      b = 1;\n    } \n    \n  }\n  {;\n//@ assert(i == j);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= k;\nloop invariant 0 <= j <= k;\nloop invariant i + j == k;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant i + j == k;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int k = 100;\n  int b = 0;\n  int i = unknown();\n  int j = unknown();\n  int n;\n  i = j = 0;\n  /*@\n\n\n\nloop invariant i4: i >= 0;\nloop invariant i5: j >= 0;\n\n\n*/\nfor( n = 0 ; n < 2*k ; n++ ) {\n    if((int )b == 1) {\n      i++;\n      b = 0;\n    } else if ((int )b == 0) {\n      j++;\n      b = 1;\n    } \n    \n  }\n  {;\n//@ assert(i == j);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 100;\nloop invariant 0 <= j <= 100;\nloop invariant i + j <= k * 2;\nloop invariant i + j >= 0;\nloop invariant i + j == k;\nloop invariant (int)b == 1 ==> i >= j;\nloop invariant (int)b == 0 ==> i <= j;\nloop invariant i + j == k ==> (int)b == 1;\nloop invariant i + j == k ==> (int)b == 0;\nloop invariant 0 <= i <= 100;\nloop invariant 0 <= j <= 100;\nloop invariant i + j <= k * 2;\nloop invariant i + j >= 0;\nloop invariant i + j == k;\nloop invariant (int)b == 1 ==> i >= j;\nloop invariant (int)b == 0 ==> i <= j;\nloop invariant i + j == k ==> (int)b == 1;\nloop invariant i + j == k ==> (int)b == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int k = 100;\n  int b = 0;\n  int i = unknown();\n  int j = unknown();\n  int n;\n  i = j = 0;\n  /*@\n\n\n\nloop invariant i4: i + j >= 0;\n\n\n\n\n\n*/\nfor( n = 0 ; n < 2*k ; n++ ) {\n    if((int )b == 1) {\n      i++;\n      b = 0;\n    } else if ((int )b == 0) {\n      j++;\n      b = 1;\n    } \n    \n  }\n  {;\n//@ assert(i == j);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= k;\nloop invariant 0 <= j <= k;\nloop invariant i + j == n;\nloop invariant i <= j;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant n <= 2 * k;\nloop invariant n >= 0;\nloop invariant b == ((n % 2) == 0);\nloop invariant i == (n / 2);\nloop invariant j == (n / 2);\nloop invariant i == j;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant i + j == n;\nloop invariant i <= j;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant n <= 2 * k;\nloop invariant n >= 0;\nloop invariant b == ((n % 2) == 0);\nloop invariant i == (n / 2);\nloop invariant j == (n / 2);\nloop invariant i == j;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant i + j == n;\nloop invariant i <= j;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant n <= 2 * k;\nloop invariant n >= 0;\nloop invariant b == ((n % 2) == 0);\nloop invariant i == (n / 2);\nloop invariant j == (n / 2);\nloop invariant i == j;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant i + j == n;\nloop invariant i <= j;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant n <= 2 * k;\nloop invariant n >= 0;\nloop invariant b == ((n % 2) == 0);\nloop invariant i == (n / 2);\nloop invariant j == (n / 2);\nloop invariant i == j;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant i + j == n;\nloop invariant i <= j;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant n <= 2 * k;\nloop invariant n >= 0;\nloop invariant b == ((n % 2) == 0);\nloop invariant i == (n / 2);\nloop invariant j == (n / 2);\nloop invariant i == j;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant i + j == n;\nloop invariant i <= j;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant n <= 2 * k;\nloop invariant n >= 0;\nloop invariant b == ((n % 2) == 0);\nloop invariant i == (n / 2);\nloop invariant j == (n / 2);\nloop invariant i == j;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant i + j == n;\nloop invariant i <= j;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant n <= 2 * k;\nloop invariant n >= 0;\nloop invariant b == ((n % 2) == 0);\nloop invariant i == (n / 2);\nloop invariant j == (n / 2);\nloop invariant i == j;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant i + j == n;\nloop invariant i <= j;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant n <= 2 * k;\nloop invariant n >= 0;\nloop invariant b == ((n % 2) == 0);\nloop invariant i == (n / 2);\nloop invariant j == (n / 2);\nloop invariant i == j;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant i + j == n;\nloop invariant i <= j;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant n <= 2 * k;\nloop invariant n >= 0;\nloop invariant b == ((n % 2) == 0);\nloop invariant i == (n / 2);\nloop invariant j == (n / 2);\nloop invariant i == j;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant i + j == n;\nloop invariant i <= j;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant n <= 2 * k;\nloop invariant n >= 0;\nloop invariant b == ((n % 2) == 0);\nloop invariant i == (n / 2);\nloop invariant j == (n / 2);\nloop invariant i == j;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant i + j == n;\nloop invariant i <= j;\nloop invariant i >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int k = 100;\n  int b = 0;\n  int i = unknown();\n  int j = unknown();\n  int n;\n  i = j = 0;\n  /*@\n\n\n\n\nloop invariant i5: i >= 0;\nloop invariant i6: j >= 0;\nloop invariant i7: n <= 2 * k;\nloop invariant i8: n >= 0;\n\n\n\n\n\n\n*/\nfor( n = 0 ; n < 2*k ; n++ ) {\n    if((int )b == 1) {\n      i++;\n      b = 0;\n    } else if ((int )b == 0) {\n      j++;\n      b = 1;\n    } \n    \n  }\n  {;\n//@ assert(i == j);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 14,
                "annotations": "```\n/*@\nloop invariant 0 <= n <= 2k;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant b <= 1;\nloop invariant b >= 0;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant n >= 0;\nloop invariant n <= 2k;\nloop invariant n == 2k ==> i == j;\nloop invariant n == 2k ==> i <= k;\nloop invariant n == 2k ==> j <= k;\nloop invariant n == 2k ==> b <= 1;\nloop invariant n == 2k ==> b >= 0;\nloop invariant n == 2k ==> i >= 0;\nloop invariant n == 2k ==> j >= 0;\nloop invariant n == 2k ==> n >= 0;\nloop invariant n == 2k ==> n <= 2k;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int k = 100;\n  int b = 0;\n  int i = unknown();\n  int j = unknown();\n  int n;\n  i = j = 0;\n  /*@\n\n\n\n\nloop invariant i5: b <= 1;\nloop invariant i6: b >= 0;\nloop invariant i7: i >= 0;\nloop invariant i8: j >= 0;\nloop invariant i9: n >= 0;\n\n\n\n\n\n\n\n\n\n\n*/\nfor( n = 0 ; n < 2*k ; n++ ) {\n    if((int )b == 1) {\n      i++;\n      b = 0;\n    } else if ((int )b == 0) {\n      j++;\n      b = 1;\n    } \n    \n  }\n  {;\n//@ assert(i == j);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i + j <= k;\nloop invariant 0 <= i <= k;\nloop invariant 0 <= j <= k;\nloop invariant i + j == n;\nloop invariant i <= k - j;\nloop invariant j <= k - i;\nloop invariant i + j <= n;\nloop invariant i + j >= n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int k = 100;\n  int b = 0;\n  int i = unknown();\n  int j = unknown();\n  int n;\n  i = j = 0;\n  /*@\n\n\n\n\n\n\nloop invariant i7: i + j <= n;\n\n*/\nfor( n = 0 ; n < 2*k ; n++ ) {\n    if((int )b == 1) {\n      i++;\n      b = 0;\n    } else if ((int )b == 0) {\n      j++;\n      b = 1;\n    } \n    \n  }\n  {;\n//@ assert(i == j);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= k;\nloop invariant 1 <= j <= k;\nloop invariant i + j <= 2 * k;\nloop invariant i >= j;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i == j ==> b == 0;\nloop invariant i != j ==> b == 1;\nloop invariant i == j ==> b == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int k = 100;\n  int b = 0;\n  int i = unknown();\n  int j = unknown();\n  int n;\n  i = j = 0;\n  /*@\n\n\n\n\n\n\n*/\nfor( n = 0 ; n < 2*k ; n++ ) {\n    if((int )b == 1) {\n      i++;\n      b = 0;\n    } else if ((int )b == 0) {\n      j++;\n      b = 1;\n    } \n    \n  }\n  {;\n//@ assert(i == j);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= k;\nloop invariant 0 <= j <= k;\nloop invariant i + j <= 2 * k;\nloop invariant (i == j) ==> (n % 2 == 0);\nloop invariant (i == j) ==> (n < 2 * k);\nloop invariant (i == j) ==> (i >= 0);\nloop invariant (i == j) ==> (j >= 0);\nloop invariant (i == j) ==> (n >= 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int k = 100;\n  int b = 0;\n  int i = unknown();\n  int j = unknown();\n  int n;\n  i = j = 0;\n  /*@\n\n\n\n\n\n\n\n\n*/\nfor( n = 0 ; n < 2*k ; n++ ) {\n    if((int )b == 1) {\n      i++;\n      b = 0;\n    } else if ((int )b == 0) {\n      j++;\n      b = 1;\n    } \n    \n  }\n  {;\n//@ assert(i == j);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= n <= 2 * k;\nloop invariant i == n / 2;\nloop invariant j == n / 2;\nloop invariant b == ((n % 2) == 0 ? 1 : 0);\nloop invariant i + j == n;\nloop invariant (n % 2) == 0 ==> b == 1;\nloop invariant (n % 2) == 1 ==> b == 0;\nloop invariant (n % 2) == 0 ==> i >= j;\nloop invariant (n % 2) == 1 ==> i <= j;\nloop invariant (n % 2) == 0 ==> i + j == n;\nloop invariant (n % 2) == 1 ==> i + j == n;\nloop invariant (n % 2) == 0 ==> j <= i;\nloop invariant (n % 2) == 1 ==> j >= i;\nloop invariant (n % 2) == 0 ==> i + j == n;\nloop invariant (n % 2) == 1 ==> i + j == n;\nloop invariant (n % 2) == 0 ==> j <= i;\nloop invariant (n % 2) == 1 ==> j >= i;\nloop invariant (n % 2) == 0 ==> i + j == n;\nloop invariant (n % 2) == 1 ==> i + j == n;\nloop invariant (n % 2) == 0 ==> j <= i;\nloop invariant (n % 2) == 1 ==> j >= i;\nloop invariant (n % 2) == 0 ==> i + j == n;\nloop invariant (n % 2) == 1 ==> i + j == n;\nloop invariant (n % 2) == 0 ==> j <= i;\nloop invariant (n % 2) == 1 ==> j >= i;\nloop invariant (n % 2) == 0 ==> i + j == n;\nloop invariant (n % 2) == 1 ==> i + j == n;\nloop invariant (n % 2) == 0 ==> j <= i;\nloop invariant (n % 2) == 1 ==> j >= i;\nloop invariant (n % 2) == 0 ==> i + j == n;\nloop invariant (n % 2) == 1 ==> i + j == n;\nloop invariant (n % 2) == 0 ==> j <= i;\nloop invariant (n % 2) == 1 ==> j >= i;\nloop invariant (n % 2) == 0 ==> i + j == n;\nloop invariant (n % 2) == 1 ==> i + j == n;\nloop invariant (n % 2) == 0 ==> j <= i;\nloop invariant (n % 2) == 1 ==> j >= i;\nloop invariant (n % 2) == 0 ==> i + j == n;\nloop invariant (n % 2) == 1 ==> i + j == n;\nloop invariant (n % 2) == 0 ==> j <= i;\nloop invariant (n % 2) == 1 ==> j >= i;\nloop invariant (n % 2) == 0 ==> i + j == n;\nloop invariant (n % 2) == 1 ==> i + j == n;\nloop invariant (n % 2) == 0 ==> j <= i;\nloop invariant (n % 2) == 1 ==> j >= i;\nloop invariant (n % 2) == 0 ==> i + j == n;\nloop invariant (n % 2) == 1 ==> i + j == n;\nloop invariant (n % 2) == 0 ==> j <= i;\nloop invariant (n % 2) == 1 ==> j >= i;\nloop invariant (n % 2) == 0 ==> i + j == n;\nloop invariant (n % 2) == 1 ==> i + j == n;\nloop invariant (n % 2) == 0 ==> j <= i;\nloop invariant (n % 2) == 1 ==> j >= i;\nloop invariant (n % 2) == 0 ==> i + j == n;\nloop invariant (n % 2) == 1 ==> i + j == n;\nloop invariant (n % 2) == 0 ==> j <= i;\nloop invariant (n % 2) == 1 ==> j >= i;\nloop invariant (n % 2) == 0 ==> i + j == n;\nloop invariant (n % 2) == 1 ==> i + j == n;\nloop invariant (n % 2) == 0 ==> j <= i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int k = 100;\n  int b = 0;\n  int i = unknown();\n  int j = unknown();\n  int n;\n  i = j = 0;\n  /*@\nloop invariant i1: 0 <= n <= 2 * k;\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nfor( n = 0 ; n < 2*k ; n++ ) {\n    if((int )b == 1) {\n      i++;\n      b = 0;\n    } else if ((int )b == 0) {\n      j++;\n      b = 1;\n    } \n    \n  }\n  {;\n//@ assert(i == j);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 100;\nloop invariant 0 <= j <= 100;\nloop invariant i + j = k;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int k = 100;\n  int b = 0;\n  int i = unknown();\n  int j = unknown();\n  int n;\n  i = j = 0;\n  /*@\n\n\n\n*/\nfor( n = 0 ; n < 2*k ; n++ ) {\n    if((int )b == 1) {\n      i++;\n      b = 0;\n    } else if ((int )b == 0) {\n      j++;\n      b = 1;\n    } \n    \n  }\n  {;\n//@ assert(i == j);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 100;\nloop invariant 0 <= j <= 100;\nloop invariant i + j = n / 2;\nloop invariant i * j = n / 2;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i + j <= 100;\nloop invariant i * j <= 100;\nloop invariant i + j >= 0;\nloop invariant i * j >= 0;\nloop invariant i + j == n / 2 ==> i == j;\nloop invariant i * j == n / 2 ==> i == j;\nloop invariant i + j != n / 2 ==> i != j;\nloop invariant i * j != n / 2 ==> i != j;\nloop invariant i + j >= 0 ==> i >= 0;\nloop invariant i + j >= 0 ==> j >= 0;\nloop invariant i + j <= 100 ==> i <= 100;\nloop invariant i + j <= 100 ==> j <= 100;\nloop invariant i * j >= 0 ==> i >= 0;\nloop invariant i * j >= 0 ==> j >= 0;\nloop invariant i * j <= 100 ==> i <= 100;\nloop invariant i * j <= 100 ==> j <= 100;\nloop invariant i >= 0 ==> i >= 0;\nloop invariant i >= 0 ==> i >= 0;\nloop invariant i <= 100 ==> i <= 100;\nloop invariant i <= 100 ==> i <= 100;\nloop invariant j >= 0 ==> j >= 0;\nloop invariant j >= 0 ==> j >= 0;\nloop invariant j <= 100 ==> j <= 100;\nloop invariant j <= 100 ==> j <= 100;\nloop invariant i + j >= 0 ==> i + j >= 0;\nloop invariant i + j >= 0 ==> i + j >= 0;\nloop invariant i + j <= 100 ==> i + j <= 100;\nloop invariant i + j <= 100 ==> i + j <= 100;\nloop invariant i * j >= 0 ==> i * j >= 0;\nloop invariant i * j >= 0 ==> i * j >= 0;\nloop invariant i * j <= 100 ==> i * j <= 100;\nloop invariant i * j <= 100 ==> i * j <= 100;\nloop invariant i >= 0 ==> i >= 0;\nloop invariant i >= 0 ==> i >= 0;\nloop invariant i <= 100 ==> i <= 100;\nloop invariant i <= 100 ==> i <= 100;\nloop invariant j >= 0 ==> j >= 0;\nloop invariant j >= 0 ==> j >= 0;\nloop invariant j <= 100 ==> j <= 100;\nloop invariant j <= 100 ==> j <= 100;\nloop invariant i + j >= 0 ==> i + j >= 0;\nloop invariant i + j >= 0 ==> i + j >= 0;\nloop invariant i + j <= 100 ==> i + j <= 100;\nloop invariant i + j <= 100 ==> i + j <= 100;\nloop invariant i * j >= 0 ==> i * j >= 0;\nloop invariant i * j >= 0 ==> i * j >= 0;\nloop invariant i * j <= 100 ==> i * j <= 100;\nloop invariant i * j <= 100 ==> i * j <= 100;\nloop invariant i >= 0 ==> i >= 0;\nloop invariant i >= 0 ==> i >= 0;\nloop invariant i <= 100 ==> i <= 100;\nloop invariant i <= 100 ==> i <= 100;\nloop invariant j >= 0 ==> j >= 0;\nloop invariant j >= 0 ==> j >= 0;\nloop invariant j <= 100 ==> j <= 100;\nloop invariant j <= 100 ==> j <= 100;\nloop invariant i + j >= 0 ==> i + j >= 0;\nloop invariant i + j >= 0 ==> i + j >= 0;\nloop invariant i + j <= 100 ==> i + j <= 100;\nloop invariant i + j <= 100 ==> i + j <= 100;\nloop invariant i * j >= 0 ==> i * j >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int k = 100;\n  int b = 0;\n  int i = unknown();\n  int j = unknown();\n  int n;\n  i = j = 0;\n  /*@\n\n\n\n\n\n\n\n\nloop invariant i9: i + j >= 0;\nloop invariant i10: i * j >= 0;\n\n\n\n\nloop invariant i15: i + j >= 0 ==> i >= 0;\nloop invariant i16: i + j >= 0 ==> j >= 0;\nloop invariant i17: i + j <= 100 ==> i <= 100;\nloop invariant i18: i + j <= 100 ==> j <= 100;\nloop invariant i19: i * j >= 0 ==> i >= 0;\nloop invariant i20: i * j >= 0 ==> j >= 0;\n\n\nloop invariant i23: i >= 0 ==> i >= 0;\nloop invariant i24: i <= 100 ==> i <= 100;\nloop invariant i25: j >= 0 ==> j >= 0;\nloop invariant i26: j <= 100 ==> j <= 100;\nloop invariant i27: i + j >= 0 ==> i + j >= 0;\nloop invariant i28: i + j <= 100 ==> i + j <= 100;\nloop invariant i29: i * j >= 0 ==> i * j >= 0;\nloop invariant i30: i * j <= 100 ==> i * j <= 100;\n*/\nfor( n = 0 ; n < 2*k ; n++ ) {\n    if((int )b == 1) {\n      i++;\n      b = 0;\n    } else if ((int )b == 0) {\n      j++;\n      b = 1;\n    } \n    \n  }\n  {;\n//@ assert(i == j);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= n <= 2*k;\nloop invariant 0 <= i <= k;\nloop invariant 0 <= j <= k;\nloop invariant (n % 2 == 0 && i == j) ==> (b == 0);\nloop invariant (n % 2 != 0 && i == j) ==> (b == 1);\nloop invariant (n % 2 == 0 && i != j) ==> (b == 1);\nloop invariant (n % 2 != 0 && i != j) ==> (b == 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int k = 100;\n  int b = 0;\n  int i = unknown();\n  int j = unknown();\n  int n;\n  i = j = 0;\n  /*@\nloop invariant i1: 0 <= n <= 2*k;\n\n\n\n\n\n\n*/\nfor( n = 0 ; n < 2*k ; n++ ) {\n    if((int )b == 1) {\n      i++;\n      b = 0;\n    } else if ((int )b == 0) {\n      j++;\n      b = 1;\n    } \n    \n  }\n  {;\n//@ assert(i == j);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= b <= 1;\nloop invariant 0 <= i <= k;\nloop invariant 0 <= j <= k;\nloop invariant i + j <= n <= 2*k;\nloop invariant b == ((n % 2) == 1);\nloop invariant i == (n / 2);\nloop invariant j == (n / 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int k = 100;\n  int b = 0;\n  int i = unknown();\n  int j = unknown();\n  int n;\n  i = j = 0;\n  /*@\nloop invariant i1: 0 <= b <= 1;\nloop invariant i2: 0 <= i <= k;\nloop invariant i3: 0 <= j <= k;\nloop invariant i4: i + j <= n <= 2*k;\nloop invariant i5: b == ((n % 2) == 1);\nloop invariant i6: i == (n / 2);\n\n*/\nfor( n = 0 ; n < 2*k ; n++ ) {\n    if((int )b == 1) {\n      i++;\n      b = 0;\n    } else if ((int )b == 0) {\n      j++;\n      b = 1;\n    } \n    \n  }\n  {;\n//@ assert(i == j);\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 67: unexpected token 'k'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int k = 100;\n  int b = 0;\n  int i = unknown();\n  int j = unknown();\n  int n;\n  i = j = 0;\n  /*@\nloop invariant i1: 0 <= i <= 100;\nloop invariant i2: 0 <= j <= 100;\nloop invariant i3: i == j + 1;\nloop invariant i4: b == 1;\nloop invariant i5: n == 200;\nloop invariant i6: i + j == 100;\nloop invariant i7: i + j == k;\nloop invariant i8: i + j == n / 2;\nloop invariant i9: i + j == n;\nloop invariant i10: i + j == n + k;\nloop invariant i11: i + j == n - k;\nloop invariant i12: i + j == n * k;\nloop invariant i13: i + j == n / k;\nloop invariant i14: i + j == n % k;\nloop invariant i15: i + j == n | k;\nloop invariant i16: i + j == n & k;\nloop invariant i17: i + j == n ^ k;\nloop invariant i18: i + j == n << k;\nloop invariant i19: i + j == n >> k;\nloop invariant i20: 0 <= j <= k;\nloop invariant i21: 0 <= i <= k;\nloop invariant i22: i + j <= 2 * k;\nloop invariant i23: i + j == 2 * k ==> i == j;\nloop invariant i24: i + j < 2 * k ==> i != j;\nloop invariant i25: (j < k ==> i <= j) && (j >= k ==> i >= j);\nloop invariant i26: (i < k ==> j <= i) && (i >= k ==> j >= i);\nloop invariant i27: (j < k ==> i < 2 * k) && (j >= k ==> i < k);\nloop invariant i28: (i < k ==> j < k) && (i >= k ==> j < 2 * k);\nloop invariant i29: (j < k ==> i > 0) && (j >= k ==> i > k);\nloop invariant i30: (i < k ==> j > 0) && (i >= k ==> j > k);\nloop invariant i31: (j < k ==> i < k) && (j >= k ==> i < 2 * k);\nloop invariant i32: i >= 0;\nloop invariant i33: j >= 0;\nloop invariant i34: i <= k;\nloop invariant i35: j <= k;\nloop invariant i36: i + j <= k * 2;\nloop invariant i37: i + j >= 0;\nloop invariant i38: (int)b == 1 ==> i >= j;\nloop invariant i39: (int)b == 0 ==> i <= j;\nloop invariant i40: i + j == k ==> (int)b == 1;\nloop invariant i41: i + j == k ==> (int)b == 0;\nloop invariant i42: i <= j;\nloop invariant i43: n <= 2 * k;\nloop invariant i44: n >= 0;\nloop invariant i45: b == ((n % 2) == 0);\nloop invariant i46: i == (n / 2);\nloop invariant i47: j == (n / 2);\nloop invariant i48: i == j;\nloop invariant i49: 0 <= n <= 2k;\nloop invariant i50: b <= 1;\nloop invariant i51: b >= 0;\nloop invariant i52: n <= 2k;\nloop invariant i53: n == 2k ==> i == j;\nloop invariant i54: n == 2k ==> i <= k;\nloop invariant i55: n == 2k ==> j <= k;\nloop invariant i56: n == 2k ==> b <= 1;\nloop invariant i57: n == 2k ==> b >= 0;\nloop invariant i58: n == 2k ==> i >= 0;\nloop invariant i59: n == 2k ==> j >= 0;\nloop invariant i60: n == 2k ==> n >= 0;\nloop invariant i61: n == 2k ==> n <= 2k;\nloop invariant i62: 0 <= i + j <= k;\nloop invariant i63: i <= k - j;\nloop invariant i64: j <= k - i;\nloop invariant i65: i + j <= n;\nloop invariant i66: i + j >= n;\nloop invariant i67: 1 <= i <= k;\nloop invariant i68: 1 <= j <= k;\nloop invariant i69: i >= j;\nloop invariant i70: i == j ==> b == 0;\nloop invariant i71: i != j ==> b == 1;\nloop invariant i72: (i == j) ==> (n % 2 == 0);\nloop invariant i73: (i == j) ==> (n < 2 * k);\nloop invariant i74: (i == j) ==> (i >= 0);\nloop invariant i75: (i == j) ==> (j >= 0);\nloop invariant i76: (i == j) ==> (n >= 0);\nloop invariant i77: 0 <= n <= 2 * k;\nloop invariant i78: i == n / 2;\nloop invariant i79: j == n / 2;\nloop invariant i80: b == ((n % 2) == 0 ? 1 : 0);\nloop invariant i81: (n % 2) == 0 ==> b == 1;\nloop invariant i82: (n % 2) == 1 ==> b == 0;\nloop invariant i83: (n % 2) == 0 ==> i >= j;\nloop invariant i84: (n % 2) == 1 ==> i <= j;\nloop invariant i85: (n % 2) == 0 ==> i + j == n;\nloop invariant i86: (n % 2) == 1 ==> i + j == n;\nloop invariant i87: (n % 2) == 0 ==> j <= i;\nloop invariant i88: (n % 2) == 1 ==> j >= i;\nloop invariant i89: i + j = k;\nloop invariant i90: i + j = n / 2;\nloop invariant i91: i * j = n / 2;\nloop invariant i92: j >= i;\nloop invariant i93: i + j <= 100;\nloop invariant i94: i * j <= 100;\nloop invariant i95: i * j >= 0;\nloop invariant i96: i + j == n / 2 ==> i == j;\nloop invariant i97: i * j == n / 2 ==> i == j;\nloop invariant i98: i + j != n / 2 ==> i != j;\nloop invariant i99: i * j != n / 2 ==> i != j;\nloop invariant i100: i + j >= 0 ==> i >= 0;\nloop invariant i101: i + j >= 0 ==> j >= 0;\nloop invariant i102: i + j <= 100 ==> i <= 100;\nloop invariant i103: i + j <= 100 ==> j <= 100;\nloop invariant i104: i * j >= 0 ==> i >= 0;\nloop invariant i105: i * j >= 0 ==> j >= 0;\nloop invariant i106: i * j <= 100 ==> i <= 100;\nloop invariant i107: i * j <= 100 ==> j <= 100;\nloop invariant i108: i >= 0 ==> i >= 0;\nloop invariant i109: i <= 100 ==> i <= 100;\nloop invariant i110: j >= 0 ==> j >= 0;\nloop invariant i111: j <= 100 ==> j <= 100;\nloop invariant i112: i + j >= 0 ==> i + j >= 0;\nloop invariant i113: i + j <= 100 ==> i + j <= 100;\nloop invariant i114: i * j >= 0 ==> i * j >= 0;\nloop invariant i115: i * j <= 100 ==> i * j <= 100;\nloop invariant i116: 0 <= n <= 2*k;\nloop invariant i117: (n % 2 == 0 && i == j) ==> (b == 0);\nloop invariant i118: (n % 2 != 0 && i == j) ==> (b == 1);\nloop invariant i119: (n % 2 == 0 && i != j) ==> (b == 1);\nloop invariant i120: (n % 2 != 0 && i != j) ==> (b == 0);\nloop invariant i121: 0 <= b <= 1;\nloop invariant i122: i + j <= n <= 2*k;\nloop invariant i123: b == ((n % 2) == 1);\n*/\nfor( n = 0 ; n < 2*k ; n++ ) {\n    if((int )b == 1) {\n      i++;\n      b = 0;\n    } else if ((int )b == 0) {\n      j++;\n      b = 1;\n    } \n    \n  }\n  {;\n//@ assert(i == j);\n}\n\n}",
        "combined_annotation_num_solver_calls": 51,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int k = 100;\n  int b = 0;\n  int i = unknown();\n  int j = unknown();\n  int n;\n  i = j = 0;\n  /*@\n\n\n\n\n\n\n\n\nloop invariant i9: i + j == n;\n\n\n\n\n\n\n\n\n\n\nloop invariant i20: 0 <= j <= k;\nloop invariant i21: 0 <= i <= k;\nloop invariant i22: i + j <= 2 * k;\nloop invariant i23: i + j == 2 * k ==> i == j;\n\n\n\n\n\n\n\nloop invariant i31: (j < k ==> i < k) && (j >= k ==> i < 2 * k);\nloop invariant i32: i >= 0;\nloop invariant i33: j >= 0;\nloop invariant i34: i <= k;\nloop invariant i35: j <= k;\nloop invariant i36: i + j <= k * 2;\nloop invariant i37: i + j >= 0;\n\nloop invariant i39: (int)b == 0 ==> i <= j;\n\n\nloop invariant i42: i <= j;\nloop invariant i43: n <= 2 * k;\nloop invariant i44: n >= 0;\n\nloop invariant i46: i == (n / 2);\n\n\n\nloop invariant i50: b <= 1;\nloop invariant i51: b >= 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i65: i + j <= n;\nloop invariant i66: i + j >= n;\n\n\n\nloop invariant i70: i == j ==> b == 0;\nloop invariant i71: i != j ==> b == 1;\nloop invariant i72: (i == j) ==> (n % 2 == 0);\n\nloop invariant i74: (i == j) ==> (i >= 0);\nloop invariant i75: (i == j) ==> (j >= 0);\nloop invariant i76: (i == j) ==> (n >= 0);\nloop invariant i77: 0 <= n <= 2 * k;\nloop invariant i78: i == n / 2;\n\n\n\n\nloop invariant i83: (n % 2) == 0 ==> i >= j;\nloop invariant i84: (n % 2) == 1 ==> i <= j;\nloop invariant i85: (n % 2) == 0 ==> i + j == n;\nloop invariant i86: (n % 2) == 1 ==> i + j == n;\nloop invariant i87: (n % 2) == 0 ==> j <= i;\nloop invariant i88: (n % 2) == 1 ==> j >= i;\n\n\n\nloop invariant i92: j >= i;\n\n\nloop invariant i95: i * j >= 0;\nloop invariant i96: i + j == n / 2 ==> i == j;\n\n\n\nloop invariant i100: i + j >= 0 ==> i >= 0;\nloop invariant i101: i + j >= 0 ==> j >= 0;\nloop invariant i102: i + j <= 100 ==> i <= 100;\nloop invariant i103: i + j <= 100 ==> j <= 100;\nloop invariant i104: i * j >= 0 ==> i >= 0;\nloop invariant i105: i * j >= 0 ==> j >= 0;\nloop invariant i106: i * j <= 100 ==> i <= 100;\nloop invariant i107: i * j <= 100 ==> j <= 100;\nloop invariant i108: i >= 0 ==> i >= 0;\nloop invariant i109: i <= 100 ==> i <= 100;\nloop invariant i110: j >= 0 ==> j >= 0;\nloop invariant i111: j <= 100 ==> j <= 100;\nloop invariant i112: i + j >= 0 ==> i + j >= 0;\nloop invariant i113: i + j <= 100 ==> i + j <= 100;\nloop invariant i114: i * j >= 0 ==> i * j >= 0;\nloop invariant i115: i * j <= 100 ==> i * j <= 100;\nloop invariant i116: 0 <= n <= 2*k;\nloop invariant i117: (n % 2 == 0 && i == j) ==> (b == 0);\nloop invariant i118: (n % 2 != 0 && i == j) ==> (b == 1);\nloop invariant i119: (n % 2 == 0 && i != j) ==> (b == 1);\n\nloop invariant i121: 0 <= b <= 1;\nloop invariant i122: i + j <= n <= 2*k;\nloop invariant i123: b == ((n % 2) == 1);\n*/\nfor( n = 0 ; n < 2*k ; n++ ) {\n    if((int )b == 1) {\n      i++;\n      b = 0;\n    } else if ((int )b == 0) {\n      j++;\n      b = 1;\n    } \n    \n  }\n  {;\n//@ assert(i == j);\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/split.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/11.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/15.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/16.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/18.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/23.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/30.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/32.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/13.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/14.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/19.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/20.c"
        ],
        "skipped": [],
        "total": 117,
        "success_count": 97,
        "failure_count": 20,
        "success_rate": 0.8290598290598291
    }
}