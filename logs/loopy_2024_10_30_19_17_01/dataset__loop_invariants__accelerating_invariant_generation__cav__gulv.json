{
    "logs": {
        "file": "../dataset/loop_invariants/accelerating_invariant_generation/cav/gulv.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet();\n\nint main(){\n  int x = 0, y = 0, w = 0, z = 0;\nwhile (unknown_int()) {\n   if (unknown_int())\n     {x = x+1; y = y+100;}\n   else if (unknown_int()){\n     if (x >= 4)\n       {x = x+1; y = y+1;}\n   }\n else if (y > 10*w && z >= 100*x)\n     {y = -y;}\n   w = w+1; z = z+10;\n  x = x; \n \n}\nif (x >= 4 && y <= 2)\n  goto ERROR;\n\nreturn 0;\n\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
        "success": false,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= y <= 100000; loop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 100000;\nloop invariant 0 <= y <= 100000;\nloop invariant 0 <= w <= 100000;\nloop invariant 0 <= z <= 100000;\nloop invariant x <= y + 100;\nloop invariant x <= w + 10;\nloop invariant y <= z + 100;\nloop invariant w <= z / 10;\nloop invariant w <= x / 10;\nloop invariant x <= 4;\nloop invariant y >= 2;\nloop invariant x <= 4 ==> y <= 2;\nloop invariant x >= 4 ==> y <= 2;\nloop invariant x <= 4 ==> y <= 2 ==> z <= 100*x;\nloop invariant x >= 4 ==> y <= 2 ==> z <= 100*x;\nloop invariant x <= 4 ==> y <= 2 ==> z <= 100*x ==> x <= y + 100;\nloop invariant x >= 4 ==> y <= 2 ==> z <= 100*x ==> x <= y + 100;\nloop invariant x <= 4 ==> y <= 2 ==> z <= 100*x ==> x <= y + 100 ==> x <= w + 10;\nloop invariant x >= 4 ==> y <= 2 ==> z <= 100*x ==> x <= y + 100 ==> x <= w + 10;\nloop invariant x <= 4 ==> y <= 2 ==> z <= 100*x ==> x <= y + 100 ==> x <= w + 10 ==> y <= z + 100;\nloop invariant x >= 4 ==> y <= 2 ==> z <= 100*x ==> x <= y + 100 ==> x <= w + 10 ==> y <= z + 100;\nloop invariant x <= 4 ==> y <= 2 ==> z <= 100*x ==> x <= y + 100 ==> x <= w + 10 ==> y <= z + 100 ==> w <= z / 10;\nloop invariant x >= 4 ==> y <= 2 ==> z <= 100*x ==> x <= y + 100 ==> x <= w + 10 ==> y <= z + 100 ==> w <= z / 10;\nloop invariant x <= 4 ==> y <= 2 ==> z <= 100*x ==> x <= y + 100 ==> x <= w + 10 ==> y <= z + 100 ==> w <= z / 10 ==> w <= x / 10;\nloop invariant x >= 4 ==> y <= 2 ==> z <= 100*x ==> x <= y + 100 ==> x <= w + 10 ==> y <= z + 100 ==> w <= z / 10 ==> w <= x / 10;\nloop invariant x <= 4 ==> y <= 2 ==> z <= 100*x ==> x <= y + 100 ==> x <= w + 10 ==> y <= z + 100 ==> w <= z / 10 ==> w <= x / 10 ==> x <= y + 100;\nloop invariant x >= 4 ==> y <= 2 ==> z <= 100*x ==> x <= y + 100 ==> x <= w + 10 ==> y <= z + 100 ==> w <= z / 10 ==> w <= x / 10 ==> x <= y + 100;\nloop invariant x <= 4 ==> y <= 2 ==> z <= 100*x ==> x <= y + 100 ==> x <= w + 10 ==> y <= z + 100 ==> w <= z / 10 ==> w <= x / 10 ==> x <= y + 100 ==> x <= w + 10;\nloop invariant x >= 4 ==> y <= 2 ==> z <= 100*x ==> x <= y + 100 ==> x <= w + 10 ==> y <= z + 100 ==> w <= z / 10 ==> w <= x / 10 ==> x <= y + 100 ==> x <= w + 10;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= 4;\nloop invariant 0 <= y <= 2;\nloop invariant 0 <= w <= 1;\nloop invariant 0 <= z <= 100;\nloop invariant x <= 100000;\nloop invariant y <= 100000;\nloop invariant w <= 100000;\nloop invariant z <= 100000;\nloop invariant x+y+z+w <= 200000;\nloop invariant x >= 4 ==> x = 4;\nloop invariant y >= 2 ==> y = 2;\nloop invariant w >= 1 ==> w = 1;\nloop invariant z >= 100*x ==> z = 100*x;\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= w <= 100;\nloop invariant 0 <= z <= 10000;\nloop invariant 0 <= x <= 4;\nloop invariant y <= 200;\nloop invariant x <= y;\nloop invariant y <= 200 * x;\nloop invariant y >= -200 * w;\nloop invariant x <= 4 * w;\nloop invariant x <= y/100;\nloop invariant y >= 10 * x;\nloop invariant x <= z/100;\nloop invariant z >= 10 * x;\nloop invariant x <= 4 * w;\nloop invariant x <= y;\nloop invariant y <= 10000;\nloop invariant x <= 4;\nloop invariant x <= y;\nloop invariant y <= 200;\nloop invariant x <= z/100;\nloop invariant z >= 10 * x;\nloop invariant x <= 4 * w;\nloop invariant x <= y;\nloop invariant y <= 10000;\nloop invariant x <= 4;\nloop invariant x <= y;\nloop invariant y <= 200;\nloop invariant x <= z/100;\nloop invariant z >= 10 * x;\nloop invariant x <= 4 * w;\nloop invariant x <= y;\nloop invariant y <= 10000;\nloop invariant x <= 4;\nloop invariant x <= y;\nloop invariant y <= 200;\nloop invariant x <= z/100;\nloop invariant z >= 10 * x;\nloop invariant x <= 4 * w;\nloop invariant x <= y;\nloop invariant y <= 10000;\nloop invariant x <= 4;\nloop invariant x <= y;\nloop invariant y <= 200;\nloop invariant x <= z/100;\nloop invariant z >= 10 * x;\nloop invariant x <= 4 * w;\nloop invariant x <= y;\nloop invariant y <= 10000;\nloop invariant x <= 4;\nloop invariant x <= y;\nloop invariant y <= 200;\nloop invariant x <= z/100;\nloop invariant z >= 10 * x;\nloop invariant x <= 4 * w;\nloop invariant x <= y;\nloop invariant y <= 10000;\nloop invariant x <= 4;\nloop invariant x <= y;\nloop invariant y <= 200;\nloop invariant x <= z/100;\nloop invariant z >= 10 * x;\nloop invariant x <= 4 * w;\nloop invariant x <= y;\nloop invariant y <= 10000;\nloop invariant x <= 4;\nloop invariant x <= y;\nloop invariant y <= 200;\nloop invariant x <= z/100;\nloop invariant z >= 10 * x;\nloop invariant x <= 4 * w;\nloop invariant x <= y;\nloop invariant y <= 10000;\nloop invariant x <= 4;\nloop invariant x <= y;\nloop invariant y <= 200;\nloop invariant x <= z/100;\nloop invariant z >= 10 * x;\nloop invariant x <= 4 * w;\nloop invariant x <= y;\nloop invariant y <= 10000;\nloop invariant x <= 4;\nloop invariant x <= y;\nloop invariant y <= 200;\nloop invariant x <= z/100;\nloop invariant z >= 10 * x;\nloop invariant x <= 4 * w;\nloop invariant x <= y;\nloop invariant y <= 10000;\nloop invariant x <= 4;\nloop invariant x <= y;\nloop invariant y <= 200;\nloop invariant x <= z/100;\nloop invariant z >= 10 * x;\nloop invariant x <= 4 * w;\nloop invariant x <= y;\nloop invariant y <= 10000;\nloop invariant x <= 4;\nloop invariant x <= y;\nloop invariant y <= 200;\nloop invariant x <= z/100;\nloop invariant z >= 10 * x;\nloop invariant x <= 4 * w;\nloop invariant x <= y;\nloop invariant y <= 10000;\nloop invariant x <= 4;\nloop invariant x <= y;\nloop invariant y <= 200;\nloop invariant x <= z/100;\nloop invariant z >= 10 * x;\nloop invariant x <= 4 * w;\nloop invariant x <= y;\nloop invariant y <= 10000;\nloop invariant x <= 4;\nloop invariant x <= y;\nloop invariant y <= 200;\nloop invariant x <= z/100;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 100000;\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant y >= (1 + (x - 1) * x / 2);\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant y >= (1 + (x - 1) * x / 2);\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant y >= (1 + (x - 1) * x / 2);\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant y >= (1 + (x - 1) * x / 2);\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant y >= (1 + (x - 1) * x / 2);\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant y >= (1 + (x - 1) * x / 2);\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant y >= (1 + (x - 1) * x / 2);\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant y >= (1 + (x - 1) * x / 2);\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant y >= (1 + (x - 1) * x / 2);\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant y >= (1 + (x - 1) * x / 2);\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant y >= (1 + (x - 1) * x / 2);\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant y >= (1 + (x - 1) * x / 2);\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant y >= (1 + (x - 1) * x / 2);\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant y >= (1 + (x - 1) * x / 2);\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant y >= (1 + (x - 1) * x / 2);\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant y >= (1 + (x - 1) * x / 2);\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant y >= (1 + (x - 1) * x / 2);\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant y >= (1 + (x - 1) * x / 2);\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant y >= (1 + (x - 1) * x / 2);\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant y >= (1 + (x - 1) * x / 2);\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant y >= (1 + (x - 1) * x / 2);\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant y >= (1 + (x - 1) * x / 2);\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant y >= (1 + (x - 1) * x / 2);\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant y >= (1 + (x - 1) * x / 2);\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant y >= (1 + (x - 1) * x / 2);\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 4; loop invariant 0 <= y <= 2; loop invariant 0 <= w <= 10; loop invariant 0 <= z <= 100; loop invariant x >= 4 ==> y <= 2; loop invariant y > 10*w ==> y <= 2; loop invariant z >= 100*x ==> y <= 2; loop invariant x <= 4 ==> y >= 0; loop invariant y <= 2 ==> x >= 0; loop invariant w <= 10 ==> y >= 0; loop invariant z <= 100 ==> x >= 0; loop invariant x <= 4 ==> y >= 0; loop invariant y <= 2 ==> x >= 0; loop invariant w <= 10 ==> y >= 0; loop invariant z <= 100 ==> x >= 0; loop invariant x <= 4 ==> y >= 0; loop invariant y <= 2 ==> x >= 0; loop invariant w <= 10 ==> y >= 0; loop invariant z <= 100 ==> x >= 0; loop invariant x <= 4 ==> y >= 0; loop invariant y <= 2 ==> x >= 0; loop invariant w <= 10 ==> y >= 0; loop invariant z <= 100 ==> x >= 0; loop invariant x <= 4 ==> y >= 0; loop invariant y <= 2 ==> x >= 0; loop invariant w <= 10 ==> y >= 0; loop invariant z <= 100 ==> x >= 0; loop invariant x <= 4 ==> y >= 0; loop invariant y <= 2 ==> x >= 0; loop invariant w <= 10 ==> y >= 0; loop invariant z <= 100 ==> x >= 0; loop invariant x <= 4 ==> y >= 0; loop invariant y <= 2 ==> x >= 0; loop invariant w <= 10 ==> y >= 0; loop invariant z <= 100 ==> x >= 0; loop invariant x <= 4 ==> y >= 0; loop invariant y <= 2 ==> x >= 0; loop invariant w <= 10 ==> y >= 0; loop invariant z <= 100 ==> x >= 0; loop invariant x <= 4 ==> y >= 0; loop invariant y <= 2 ==> x >= 0; loop invariant w <= 10 ==> y >= 0; loop invariant z <= 100 ==> x >= 0; loop invariant x <= 4 ==> y >= 0; loop invariant y <= 2 ==> x >= 0; loop invariant w <= 10 ==> y >= 0; loop invariant z <= 100 ==> x >= 0; loop invariant x <= 4 ==> y >= 0; loop invariant y <= 2 ==> x >= 0; loop invariant w <= 10 ==> y >= 0; loop invariant z <= 100 ==> x >= 0; loop invariant x <= 4 ==> y >= 0; loop invariant y <= 2 ==> x >= 0; loop invariant w <= 10 ==> y >= 0; loop invariant z <= 100 ==> x >= 0; loop invariant x <= 4 ==> y >= 0; loop invariant y <= 2 ==> x >= 0; loop invariant w <= 10 ==> y >= 0; loop invariant z <= 100 ==> x >= 0; loop invariant x <= 4 ==> y >= 0; loop invariant y <= 2 ==> x >= 0; loop invariant w <= 10 ==> y >= 0; loop invariant z <= 100 ==> x >= 0; loop invariant x <= 4 ==> y >= 0; loop invariant y <= 2 ==> x >= 0; loop invariant w <= 10 ==> y >= 0; loop invariant z <= 100 ==> x >= 0; loop invariant x <= 4 ==> y >= 0; loop invariant y <= 2 ==> x >= 0; loop invariant w <= 10 ==> y >= 0; loop invariant z <= 100 ==> x >= 0; loop invariant x <= 4 ==> y >= 0; loop invariant y <= 2 ==> x >= 0; loop invariant w <= 10 ==> y >= 0; loop invariant z <= 100 ==> x >= 0; loop invariant x <= 4 ==> y >= 0; loop invariant y <= 2 ==> x >= 0; loop invariant w <= 10 ==> y >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant 0 <= w;\nloop invariant z >= 10 * w;\nloop invariant x >= 4;\nloop invariant (x >= 4 && y <= 2) ==> (x >= 4 && y <= 2);\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= w;\nloop invariant 0 <= z;\nloop invariant 0 <= x <= 5;\nloop invariant 0 <= y <= 2;\nloop invariant 0 <= w <= 100000;\nloop invariant 0 <= z <= 1000000;\nloop invariant (x >= 4 && y <= 2) ==> (x >= 4 && y <= 2);\nloop invariant (x >= 4 && y <= 2) ==> (x >= 4 && y <= 2);\nloop invariant (x >= 4 && y <= 2) ==> (x >= 4 && y <= 2);\nloop invariant (x >= 4 && y <= 2) ==> (x >= 4 && y <= 2);\nloop invariant (x >= 4 && y <= 2) ==> (x >= 4 && y <= 2);\nloop invariant (x >= 4 && y <= 2) ==> (x >= 4 && y <= 2);\nloop invariant (x >= 4 && y <= 2) ==> (x >= 4 && y <= 2);\nloop invariant (x >= 4 && y <= 2) ==> (x >= 4 && y <= 2);\nloop invariant (x >= 4 && y <= 2) ==> (x >= 4 && y <= 2);\nloop invariant (x >= 4 && y <= 2) ==> (x >= 4 && y <= 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 100000;\nloop invariant 0 <= y <= 100000;\nloop invariant w <= 100000;\nloop invariant z <= 100000;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant w >= 0;\nloop invariant z >= 0;\nloop invariant x >= y;\nloop invariant x >= (w + z);\nloop invariant x >= (w * z);\nloop invariant x >= (w * w);\nloop invariant x >= (z * z);\nloop invariant x >= (w * z - y);\nloop invariant x >= (w * w - y);\nloop invariant x >= (z * z - y);\nloop invariant y >= (w * z - x);\nloop invariant y >= (w * w - x);\nloop invariant y >= (z * z - x);\nloop invariant x >= (w * z - y - w);\nloop invariant x >= (w * w - y - w);\nloop invariant x >= (z * z - y - w);\nloop invariant x >= (w * z - y - z);\nloop invariant x >= (w * w - y - z);\nloop invariant x >= (z * z - y - z);\nloop invariant x >= (w * z - y - w - z);\nloop invariant x >= (w * w - y - w - z);\nloop invariant x >= (z * z - y - w - z);\nloop invariant x >= (w * z - y - w - z - w);\nloop invariant x >= (w * w - y - w - z - w);\nloop invariant x >= (z * z - y - w - z - w);\nloop invariant x >= (w * z - y - w - z - z);\nloop invariant x >= (w * w - y - w - z - z);\nloop invariant x >= (z * z - y - w - z - z);\nloop invariant x >= (w * z - y - w - z - w - z);\nloop invariant x >= (w * w - y - w - z - w - z);\nloop invariant x >= (z * z - y - w - z - w - z);\nloop invariant x >= (w * z - y - w - z - w - z - w);\nloop invariant x >= (w * w - y - w - z - w - z - w);\nloop invariant x >= (z * z - y - w - z - w - z - w);\nloop invariant x >= (w * z - y - w - z - w - z - z);\nloop invariant x >= (w * w - y - w - z - w - z - z);\nloop invariant x >= (z * z - y - w - z - w - z - z);\nloop invariant x >= (w * z - y - w - z - w - z - w - z);\nloop invariant x >= (w * w - y - w - z - w - z - w - z);\nloop invariant x >= (z * z - y - w - z - w - z - w - z);\nloop invariant x >= (w * z - y - w - z - w - z - w - z - w);\nloop invariant x >= (w * w - y - w - z - w - z - w - z - w);\nloop invariant x >= (z * z - y - w - z - w - z - w - z - w);\nloop invariant x >= (w * z - y - w - z - w - z - w - z - z);\nloop invariant x >= (w * w - y - w - z - w - z - w - z - z);\nloop invariant x >= (z * z - y - w - z - w - z - w - z - z);\nloop invariant x >= (w * z - y - w - z - w - z - w - z - w - z);\nloop invariant x >= (w * w - y - w - z - w - z - w - z - w - z);\nloop invariant x >= (z * z - y - w - z - w - z - w - z - w - z);\nloop invariant x >= (w * z - y - w - z - w - z - w - z - w - z - w);\nloop invariant x >= (w * w - y - w - z - w - z - w - z - w - z - w);\nloop invariant x >= (z * z - y - w - z - w - z - w - z - w - z - w);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= unknown_int();\nloop invariant 0 <= y <= unknown_int();\nloop invariant 0 <= w <= unknown_int();\nloop invariant 0 <= z <= unknown_int();\nloop invariant x >= 4 ==> y <= 10*w;\nloop invariant x >= 4 ==> z >= 100*x;\nloop invariant x < 4 ==> y <= 2;\nloop invariant x < 4 ==> z <= 100*x;\nloop invariant x < 4 ==> w <= unknown_int();\nloop invariant x < 4 ==> z <= unknown_int();\nloop invariant x < 4 ==> y <= unknown_int();\nloop invariant x < 4 ==> z <= unknown_int();\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant w == y / 100;\nloop invariant z >= 1000;\nloop invariant x >= 4 ==> w >= 4;\nloop invariant x < 4 ==> w < 4;\nloop invariant x >= 4 ==> y <= 2;\nloop invariant x < 4 ==> y > 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 2;\nloop invariant 0 <= w <= 5;\nloop invariant 0 <= z <= 50;\nloop invariant x >= 4 ==> y <= 2;\nloop invariant y > 10*w ==> x >= 1 && z >= 100*x;\nloop invariant z >= 100*x ==> y <= 2;\nloop invariant unknown_int() ==> x >= 4 ==> y <= 2;\nloop invariant unknown_int() ==> y > 10*w ==> x >= 1 && z >= 100*x;\nloop invariant unknown_int() ==> z >= 100*x ==> y <= 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 2;\nloop invariant 0 <= w;\nloop invariant 0 <= z;\nloop invariant x <= y;\nloop invariant x >= 4 ==> y >= 2;\nloop invariant x >= 4 ==> y <= 2;\nloop invariant x >= 4 ==> y == 2;\nloop invariant x >= 4 ==> w >= 2;\nloop invariant x >= 4 ==> z >= 200;\nloop invariant x >= 4 ==> z <= 204;\nloop invariant y <= 2 ==> x <= 2;\nloop invariant y <= 2 ==> w >= 2;\nloop invariant y <= 2 ==> z >= 200;\nloop invariant y <= 2 ==> z <= 204;\nloop invariant z >= 100*x;\nloop invariant (w>= 2 && z >= 200) ==> y == -y;\nloop invariant (w>= 2 && z >= 200) ==> y == -2;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000; loop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet();\n\nint main(){\n  int x = 0, y = 0, w = 0, z = 0;\n/*@\nloop invariant i1: 0 <= y <= 100000; loop invariant x >= (1 + (y - 1) * y / 2);\n*/\nwhile (unknown_int()) {\n   if (unknown_int())\n     {x = x+1; y = y+100;}\n   else if (unknown_int()){\n     if (x >= 4)\n       {x = x+1; y = y+1;}\n   }\n else if (y > 10*w && z >= 100*x)\n     {y = -y;}\n   w = w+1; z = z+10;\n  x = x; \n \n}\nif (x >= 4 && y <= 2)\n  goto ERROR;\n\nreturn 0;\n\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 100000;\nloop invariant 0 <= y <= 100000;\nloop invariant 0 <= w <= 100000;\nloop invariant 0 <= z <= 100000;\nloop invariant x <= y + 100;\nloop invariant x <= w + 10;\nloop invariant y <= z + 100;\nloop invariant w <= z / 10;\nloop invariant w <= x / 10;\nloop invariant x <= 4;\nloop invariant y >= 2;\nloop invariant x <= 4 ==> y <= 2;\nloop invariant x >= 4 ==> y <= 2;\nloop invariant x <= 4 ==> y <= 2 ==> z <= 100*x;\nloop invariant x >= 4 ==> y <= 2 ==> z <= 100*x;\nloop invariant x <= 4 ==> y <= 2 ==> z <= 100*x ==> x <= y + 100;\nloop invariant x >= 4 ==> y <= 2 ==> z <= 100*x ==> x <= y + 100;\nloop invariant x <= 4 ==> y <= 2 ==> z <= 100*x ==> x <= y + 100 ==> x <= w + 10;\nloop invariant x >= 4 ==> y <= 2 ==> z <= 100*x ==> x <= y + 100 ==> x <= w + 10;\nloop invariant x <= 4 ==> y <= 2 ==> z <= 100*x ==> x <= y + 100 ==> x <= w + 10 ==> y <= z + 100;\nloop invariant x >= 4 ==> y <= 2 ==> z <= 100*x ==> x <= y + 100 ==> x <= w + 10 ==> y <= z + 100;\nloop invariant x <= 4 ==> y <= 2 ==> z <= 100*x ==> x <= y + 100 ==> x <= w + 10 ==> y <= z + 100 ==> w <= z / 10;\nloop invariant x >= 4 ==> y <= 2 ==> z <= 100*x ==> x <= y + 100 ==> x <= w + 10 ==> y <= z + 100 ==> w <= z / 10;\nloop invariant x <= 4 ==> y <= 2 ==> z <= 100*x ==> x <= y + 100 ==> x <= w + 10 ==> y <= z + 100 ==> w <= z / 10 ==> w <= x / 10;\nloop invariant x >= 4 ==> y <= 2 ==> z <= 100*x ==> x <= y + 100 ==> x <= w + 10 ==> y <= z + 100 ==> w <= z / 10 ==> w <= x / 10;\nloop invariant x <= 4 ==> y <= 2 ==> z <= 100*x ==> x <= y + 100 ==> x <= w + 10 ==> y <= z + 100 ==> w <= z / 10 ==> w <= x / 10 ==> x <= y + 100;\nloop invariant x >= 4 ==> y <= 2 ==> z <= 100*x ==> x <= y + 100 ==> x <= w + 10 ==> y <= z + 100 ==> w <= z / 10 ==> w <= x / 10 ==> x <= y + 100;\nloop invariant x <= 4 ==> y <= 2 ==> z <= 100*x ==> x <= y + 100 ==> x <= w + 10 ==> y <= z + 100 ==> w <= z / 10 ==> w <= x / 10 ==> x <= y + 100 ==> x <= w + 10;\nloop invariant x >= 4 ==> y <= 2 ==> z <= 100*x ==> x <= y + 100 ==> x <= w + 10 ==> y <= z + 100 ==> w <= z / 10 ==> w <= x / 10 ==> x <= y + 100 ==> x <= w + 10;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet();\n\nint main(){\n  int x = 0, y = 0, w = 0, z = 0;\n/*@\n\n\n\n\n\nloop invariant i6: x <= w + 10;\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i18: x <= 4 ==> y <= 2 ==> z <= 100*x ==> x <= y + 100 ==> x <= w + 10;\nloop invariant i19: x >= 4 ==> y <= 2 ==> z <= 100*x ==> x <= y + 100 ==> x <= w + 10;\n\n\n\n\n\n\nloop invariant i26: x <= 4 ==> y <= 2 ==> z <= 100*x ==> x <= y + 100 ==> x <= w + 10 ==> y <= z + 100 ==> w <= z / 10 ==> w <= x / 10 ==> x <= y + 100;\nloop invariant i27: x >= 4 ==> y <= 2 ==> z <= 100*x ==> x <= y + 100 ==> x <= w + 10 ==> y <= z + 100 ==> w <= z / 10 ==> w <= x / 10 ==> x <= y + 100;\nloop invariant i28: x <= 4 ==> y <= 2 ==> z <= 100*x ==> x <= y + 100 ==> x <= w + 10 ==> y <= z + 100 ==> w <= z / 10 ==> w <= x / 10 ==> x <= y + 100 ==> x <= w + 10;\nloop invariant i29: x >= 4 ==> y <= 2 ==> z <= 100*x ==> x <= y + 100 ==> x <= w + 10 ==> y <= z + 100 ==> w <= z / 10 ==> w <= x / 10 ==> x <= y + 100 ==> x <= w + 10;\n*/\nwhile (unknown_int()) {\n   if (unknown_int())\n     {x = x+1; y = y+100;}\n   else if (unknown_int()){\n     if (x >= 4)\n       {x = x+1; y = y+1;}\n   }\n else if (y > 10*w && z >= 100*x)\n     {y = -y;}\n   w = w+1; z = z+10;\n  x = x; \n \n}\nif (x >= 4 && y <= 2)\n  goto ERROR;\n\nreturn 0;\n\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= 4;\nloop invariant 0 <= y <= 2;\nloop invariant 0 <= w <= 1;\nloop invariant 0 <= z <= 100;\nloop invariant x <= 100000;\nloop invariant y <= 100000;\nloop invariant w <= 100000;\nloop invariant z <= 100000;\nloop invariant x+y+z+w <= 200000;\nloop invariant x >= 4 ==> x = 4;\nloop invariant y >= 2 ==> y = 2;\nloop invariant w >= 1 ==> w = 1;\nloop invariant z >= 100*x ==> z = 100*x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet();\n\nint main(){\n  int x = 0, y = 0, w = 0, z = 0;\n/*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown_int()) {\n   if (unknown_int())\n     {x = x+1; y = y+100;}\n   else if (unknown_int()){\n     if (x >= 4)\n       {x = x+1; y = y+1;}\n   }\n else if (y > 10*w && z >= 100*x)\n     {y = -y;}\n   w = w+1; z = z+10;\n  x = x; \n \n}\nif (x >= 4 && y <= 2)\n  goto ERROR;\n\nreturn 0;\n\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet();\n\nint main(){\n  int x = 0, y = 0, w = 0, z = 0;\n/*@\n\n*/\nwhile (unknown_int()) {\n   if (unknown_int())\n     {x = x+1; y = y+100;}\n   else if (unknown_int()){\n     if (x >= 4)\n       {x = x+1; y = y+1;}\n   }\n else if (y > 10*w && z >= 100*x)\n     {y = -y;}\n   w = w+1; z = z+10;\n  x = x; \n \n}\nif (x >= 4 && y <= 2)\n  goto ERROR;\n\nreturn 0;\n\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= w <= 100;\nloop invariant 0 <= z <= 10000;\nloop invariant 0 <= x <= 4;\nloop invariant y <= 200;\nloop invariant x <= y;\nloop invariant y <= 200 * x;\nloop invariant y >= -200 * w;\nloop invariant x <= 4 * w;\nloop invariant x <= y/100;\nloop invariant y >= 10 * x;\nloop invariant x <= z/100;\nloop invariant z >= 10 * x;\nloop invariant x <= 4 * w;\nloop invariant x <= y;\nloop invariant y <= 10000;\nloop invariant x <= 4;\nloop invariant x <= y;\nloop invariant y <= 200;\nloop invariant x <= z/100;\nloop invariant z >= 10 * x;\nloop invariant x <= 4 * w;\nloop invariant x <= y;\nloop invariant y <= 10000;\nloop invariant x <= 4;\nloop invariant x <= y;\nloop invariant y <= 200;\nloop invariant x <= z/100;\nloop invariant z >= 10 * x;\nloop invariant x <= 4 * w;\nloop invariant x <= y;\nloop invariant y <= 10000;\nloop invariant x <= 4;\nloop invariant x <= y;\nloop invariant y <= 200;\nloop invariant x <= z/100;\nloop invariant z >= 10 * x;\nloop invariant x <= 4 * w;\nloop invariant x <= y;\nloop invariant y <= 10000;\nloop invariant x <= 4;\nloop invariant x <= y;\nloop invariant y <= 200;\nloop invariant x <= z/100;\nloop invariant z >= 10 * x;\nloop invariant x <= 4 * w;\nloop invariant x <= y;\nloop invariant y <= 10000;\nloop invariant x <= 4;\nloop invariant x <= y;\nloop invariant y <= 200;\nloop invariant x <= z/100;\nloop invariant z >= 10 * x;\nloop invariant x <= 4 * w;\nloop invariant x <= y;\nloop invariant y <= 10000;\nloop invariant x <= 4;\nloop invariant x <= y;\nloop invariant y <= 200;\nloop invariant x <= z/100;\nloop invariant z >= 10 * x;\nloop invariant x <= 4 * w;\nloop invariant x <= y;\nloop invariant y <= 10000;\nloop invariant x <= 4;\nloop invariant x <= y;\nloop invariant y <= 200;\nloop invariant x <= z/100;\nloop invariant z >= 10 * x;\nloop invariant x <= 4 * w;\nloop invariant x <= y;\nloop invariant y <= 10000;\nloop invariant x <= 4;\nloop invariant x <= y;\nloop invariant y <= 200;\nloop invariant x <= z/100;\nloop invariant z >= 10 * x;\nloop invariant x <= 4 * w;\nloop invariant x <= y;\nloop invariant y <= 10000;\nloop invariant x <= 4;\nloop invariant x <= y;\nloop invariant y <= 200;\nloop invariant x <= z/100;\nloop invariant z >= 10 * x;\nloop invariant x <= 4 * w;\nloop invariant x <= y;\nloop invariant y <= 10000;\nloop invariant x <= 4;\nloop invariant x <= y;\nloop invariant y <= 200;\nloop invariant x <= z/100;\nloop invariant z >= 10 * x;\nloop invariant x <= 4 * w;\nloop invariant x <= y;\nloop invariant y <= 10000;\nloop invariant x <= 4;\nloop invariant x <= y;\nloop invariant y <= 200;\nloop invariant x <= z/100;\nloop invariant z >= 10 * x;\nloop invariant x <= 4 * w;\nloop invariant x <= y;\nloop invariant y <= 10000;\nloop invariant x <= 4;\nloop invariant x <= y;\nloop invariant y <= 200;\nloop invariant x <= z/100;\nloop invariant z >= 10 * x;\nloop invariant x <= 4 * w;\nloop invariant x <= y;\nloop invariant y <= 10000;\nloop invariant x <= 4;\nloop invariant x <= y;\nloop invariant y <= 200;\nloop invariant x <= z/100;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet();\n\nint main(){\n  int x = 0, y = 0, w = 0, z = 0;\n/*@\n\n\n\n\n\nloop invariant i6: y <= 200 * x;\n\nloop invariant i8: x <= 4 * w;\n\n\n\nloop invariant i12: z >= 10 * x;\n\n\n*/\nwhile (unknown_int()) {\n   if (unknown_int())\n     {x = x+1; y = y+100;}\n   else if (unknown_int()){\n     if (x >= 4)\n       {x = x+1; y = y+1;}\n   }\n else if (y > 10*w && z >= 100*x)\n     {y = -y;}\n   w = w+1; z = z+10;\n  x = x; \n \n}\nif (x >= 4 && y <= 2)\n  goto ERROR;\n\nreturn 0;\n\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 100000;\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant y >= (1 + (x - 1) * x / 2);\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant y >= (1 + (x - 1) * x / 2);\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant y >= (1 + (x - 1) * x / 2);\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant y >= (1 + (x - 1) * x / 2);\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant y >= (1 + (x - 1) * x / 2);\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant y >= (1 + (x - 1) * x / 2);\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant y >= (1 + (x - 1) * x / 2);\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant y >= (1 + (x - 1) * x / 2);\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant y >= (1 + (x - 1) * x / 2);\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant y >= (1 + (x - 1) * x / 2);\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant y >= (1 + (x - 1) * x / 2);\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant y >= (1 + (x - 1) * x / 2);\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant y >= (1 + (x - 1) * x / 2);\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant y >= (1 + (x - 1) * x / 2);\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant y >= (1 + (x - 1) * x / 2);\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant y >= (1 + (x - 1) * x / 2);\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant y >= (1 + (x - 1) * x / 2);\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant y >= (1 + (x - 1) * x / 2);\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant y >= (1 + (x - 1) * x / 2);\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant y >= (1 + (x - 1) * x / 2);\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant y >= (1 + (x - 1) * x / 2);\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant y >= (1 + (x - 1) * x / 2);\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant y >= (1 + (x - 1) * x / 2);\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant y >= (1 + (x - 1) * x / 2);\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant y >= (1 + (x - 1) * x / 2);\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet();\n\nint main(){\n  int x = 0, y = 0, w = 0, z = 0;\n/*@\n\n\n\n\n*/\nwhile (unknown_int()) {\n   if (unknown_int())\n     {x = x+1; y = y+100;}\n   else if (unknown_int()){\n     if (x >= 4)\n       {x = x+1; y = y+1;}\n   }\n else if (y > 10*w && z >= 100*x)\n     {y = -y;}\n   w = w+1; z = z+10;\n  x = x; \n \n}\nif (x >= 4 && y <= 2)\n  goto ERROR;\n\nreturn 0;\n\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 4; loop invariant 0 <= y <= 2; loop invariant 0 <= w <= 10; loop invariant 0 <= z <= 100; loop invariant x >= 4 ==> y <= 2; loop invariant y > 10*w ==> y <= 2; loop invariant z >= 100*x ==> y <= 2; loop invariant x <= 4 ==> y >= 0; loop invariant y <= 2 ==> x >= 0; loop invariant w <= 10 ==> y >= 0; loop invariant z <= 100 ==> x >= 0; loop invariant x <= 4 ==> y >= 0; loop invariant y <= 2 ==> x >= 0; loop invariant w <= 10 ==> y >= 0; loop invariant z <= 100 ==> x >= 0; loop invariant x <= 4 ==> y >= 0; loop invariant y <= 2 ==> x >= 0; loop invariant w <= 10 ==> y >= 0; loop invariant z <= 100 ==> x >= 0; loop invariant x <= 4 ==> y >= 0; loop invariant y <= 2 ==> x >= 0; loop invariant w <= 10 ==> y >= 0; loop invariant z <= 100 ==> x >= 0; loop invariant x <= 4 ==> y >= 0; loop invariant y <= 2 ==> x >= 0; loop invariant w <= 10 ==> y >= 0; loop invariant z <= 100 ==> x >= 0; loop invariant x <= 4 ==> y >= 0; loop invariant y <= 2 ==> x >= 0; loop invariant w <= 10 ==> y >= 0; loop invariant z <= 100 ==> x >= 0; loop invariant x <= 4 ==> y >= 0; loop invariant y <= 2 ==> x >= 0; loop invariant w <= 10 ==> y >= 0; loop invariant z <= 100 ==> x >= 0; loop invariant x <= 4 ==> y >= 0; loop invariant y <= 2 ==> x >= 0; loop invariant w <= 10 ==> y >= 0; loop invariant z <= 100 ==> x >= 0; loop invariant x <= 4 ==> y >= 0; loop invariant y <= 2 ==> x >= 0; loop invariant w <= 10 ==> y >= 0; loop invariant z <= 100 ==> x >= 0; loop invariant x <= 4 ==> y >= 0; loop invariant y <= 2 ==> x >= 0; loop invariant w <= 10 ==> y >= 0; loop invariant z <= 100 ==> x >= 0; loop invariant x <= 4 ==> y >= 0; loop invariant y <= 2 ==> x >= 0; loop invariant w <= 10 ==> y >= 0; loop invariant z <= 100 ==> x >= 0; loop invariant x <= 4 ==> y >= 0; loop invariant y <= 2 ==> x >= 0; loop invariant w <= 10 ==> y >= 0; loop invariant z <= 100 ==> x >= 0; loop invariant x <= 4 ==> y >= 0; loop invariant y <= 2 ==> x >= 0; loop invariant w <= 10 ==> y >= 0; loop invariant z <= 100 ==> x >= 0; loop invariant x <= 4 ==> y >= 0; loop invariant y <= 2 ==> x >= 0; loop invariant w <= 10 ==> y >= 0; loop invariant z <= 100 ==> x >= 0; loop invariant x <= 4 ==> y >= 0; loop invariant y <= 2 ==> x >= 0; loop invariant w <= 10 ==> y >= 0; loop invariant z <= 100 ==> x >= 0; loop invariant x <= 4 ==> y >= 0; loop invariant y <= 2 ==> x >= 0; loop invariant w <= 10 ==> y >= 0; loop invariant z <= 100 ==> x >= 0; loop invariant x <= 4 ==> y >= 0; loop invariant y <= 2 ==> x >= 0; loop invariant w <= 10 ==> y >= 0; loop invariant z <= 100 ==> x >= 0; loop invariant x <= 4 ==> y >= 0; loop invariant y <= 2 ==> x >= 0; loop invariant w <= 10 ==> y >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet();\n\nint main(){\n  int x = 0, y = 0, w = 0, z = 0;\n/*@\n\n*/\nwhile (unknown_int()) {\n   if (unknown_int())\n     {x = x+1; y = y+100;}\n   else if (unknown_int()){\n     if (x >= 4)\n       {x = x+1; y = y+1;}\n   }\n else if (y > 10*w && z >= 100*x)\n     {y = -y;}\n   w = w+1; z = z+10;\n  x = x; \n \n}\nif (x >= 4 && y <= 2)\n  goto ERROR;\n\nreturn 0;\n\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant 0 <= w;\nloop invariant z >= 10 * w;\nloop invariant x >= 4;\nloop invariant (x >= 4 && y <= 2) ==> (x >= 4 && y <= 2);\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= w;\nloop invariant 0 <= z;\nloop invariant 0 <= x <= 5;\nloop invariant 0 <= y <= 2;\nloop invariant 0 <= w <= 100000;\nloop invariant 0 <= z <= 1000000;\nloop invariant (x >= 4 && y <= 2) ==> (x >= 4 && y <= 2);\nloop invariant (x >= 4 && y <= 2) ==> (x >= 4 && y <= 2);\nloop invariant (x >= 4 && y <= 2) ==> (x >= 4 && y <= 2);\nloop invariant (x >= 4 && y <= 2) ==> (x >= 4 && y <= 2);\nloop invariant (x >= 4 && y <= 2) ==> (x >= 4 && y <= 2);\nloop invariant (x >= 4 && y <= 2) ==> (x >= 4 && y <= 2);\nloop invariant (x >= 4 && y <= 2) ==> (x >= 4 && y <= 2);\nloop invariant (x >= 4 && y <= 2) ==> (x >= 4 && y <= 2);\nloop invariant (x >= 4 && y <= 2) ==> (x >= 4 && y <= 2);\nloop invariant (x >= 4 && y <= 2) ==> (x >= 4 && y <= 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet();\n\nint main(){\n  int x = 0, y = 0, w = 0, z = 0;\n/*@\n\n\nloop invariant i3: 0 <= w;\nloop invariant i4: z >= 10 * w;\n\nloop invariant i6: (x >= 4 && y <= 2) ==> (x >= 4 && y <= 2);\nloop invariant i7: 0 <= x;\n\nloop invariant i9: 0 <= z;\n\n\n\n\n*/\nwhile (unknown_int()) {\n   if (unknown_int())\n     {x = x+1; y = y+100;}\n   else if (unknown_int()){\n     if (x >= 4)\n       {x = x+1; y = y+1;}\n   }\n else if (y > 10*w && z >= 100*x)\n     {y = -y;}\n   w = w+1; z = z+10;\n  x = x; \n \n}\nif (x >= 4 && y <= 2)\n  goto ERROR;\n\nreturn 0;\n\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 15,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 100000;\nloop invariant 0 <= y <= 100000;\nloop invariant w <= 100000;\nloop invariant z <= 100000;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant w >= 0;\nloop invariant z >= 0;\nloop invariant x >= y;\nloop invariant x >= (w + z);\nloop invariant x >= (w * z);\nloop invariant x >= (w * w);\nloop invariant x >= (z * z);\nloop invariant x >= (w * z - y);\nloop invariant x >= (w * w - y);\nloop invariant x >= (z * z - y);\nloop invariant y >= (w * z - x);\nloop invariant y >= (w * w - x);\nloop invariant y >= (z * z - x);\nloop invariant x >= (w * z - y - w);\nloop invariant x >= (w * w - y - w);\nloop invariant x >= (z * z - y - w);\nloop invariant x >= (w * z - y - z);\nloop invariant x >= (w * w - y - z);\nloop invariant x >= (z * z - y - z);\nloop invariant x >= (w * z - y - w - z);\nloop invariant x >= (w * w - y - w - z);\nloop invariant x >= (z * z - y - w - z);\nloop invariant x >= (w * z - y - w - z - w);\nloop invariant x >= (w * w - y - w - z - w);\nloop invariant x >= (z * z - y - w - z - w);\nloop invariant x >= (w * z - y - w - z - z);\nloop invariant x >= (w * w - y - w - z - z);\nloop invariant x >= (z * z - y - w - z - z);\nloop invariant x >= (w * z - y - w - z - w - z);\nloop invariant x >= (w * w - y - w - z - w - z);\nloop invariant x >= (z * z - y - w - z - w - z);\nloop invariant x >= (w * z - y - w - z - w - z - w);\nloop invariant x >= (w * w - y - w - z - w - z - w);\nloop invariant x >= (z * z - y - w - z - w - z - w);\nloop invariant x >= (w * z - y - w - z - w - z - z);\nloop invariant x >= (w * w - y - w - z - w - z - z);\nloop invariant x >= (z * z - y - w - z - w - z - z);\nloop invariant x >= (w * z - y - w - z - w - z - w - z);\nloop invariant x >= (w * w - y - w - z - w - z - w - z);\nloop invariant x >= (z * z - y - w - z - w - z - w - z);\nloop invariant x >= (w * z - y - w - z - w - z - w - z - w);\nloop invariant x >= (w * w - y - w - z - w - z - w - z - w);\nloop invariant x >= (z * z - y - w - z - w - z - w - z - w);\nloop invariant x >= (w * z - y - w - z - w - z - w - z - z);\nloop invariant x >= (w * w - y - w - z - w - z - w - z - z);\nloop invariant x >= (z * z - y - w - z - w - z - w - z - z);\nloop invariant x >= (w * z - y - w - z - w - z - w - z - w - z);\nloop invariant x >= (w * w - y - w - z - w - z - w - z - w - z);\nloop invariant x >= (z * z - y - w - z - w - z - w - z - w - z);\nloop invariant x >= (w * z - y - w - z - w - z - w - z - w - z - w);\nloop invariant x >= (w * w - y - w - z - w - z - w - z - w - z - w);\nloop invariant x >= (z * z - y - w - z - w - z - w - z - w - z - w);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet();\n\nint main(){\n  int x = 0, y = 0, w = 0, z = 0;\n/*@\n\n\n\n\nloop invariant i5: x >= 0;\n\nloop invariant i7: w >= 0;\nloop invariant i8: z >= 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown_int()) {\n   if (unknown_int())\n     {x = x+1; y = y+100;}\n   else if (unknown_int()){\n     if (x >= 4)\n       {x = x+1; y = y+1;}\n   }\n else if (y > 10*w && z >= 100*x)\n     {y = -y;}\n   w = w+1; z = z+10;\n  x = x; \n \n}\nif (x >= 4 && y <= 2)\n  goto ERROR;\n\nreturn 0;\n\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet();\n\nint main(){\n  int x = 0, y = 0, w = 0, z = 0;\n/*@\n\n\n*/\nwhile (unknown_int()) {\n   if (unknown_int())\n     {x = x+1; y = y+100;}\n   else if (unknown_int()){\n     if (x >= 4)\n       {x = x+1; y = y+1;}\n   }\n else if (y > 10*w && z >= 100*x)\n     {y = -y;}\n   w = w+1; z = z+10;\n  x = x; \n \n}\nif (x >= 4 && y <= 2)\n  goto ERROR;\n\nreturn 0;\n\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet();\n\nint main(){\n  int x = 0, y = 0, w = 0, z = 0;\n/*@\n\n*/\nwhile (unknown_int()) {\n   if (unknown_int())\n     {x = x+1; y = y+100;}\n   else if (unknown_int()){\n     if (x >= 4)\n       {x = x+1; y = y+1;}\n   }\n else if (y > 10*w && z >= 100*x)\n     {y = -y;}\n   w = w+1; z = z+10;\n  x = x; \n \n}\nif (x >= 4 && y <= 2)\n  goto ERROR;\n\nreturn 0;\n\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 8,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= unknown_int();\nloop invariant 0 <= y <= unknown_int();\nloop invariant 0 <= w <= unknown_int();\nloop invariant 0 <= z <= unknown_int();\nloop invariant x >= 4 ==> y <= 10*w;\nloop invariant x >= 4 ==> z >= 100*x;\nloop invariant x < 4 ==> y <= 2;\nloop invariant x < 4 ==> z <= 100*x;\nloop invariant x < 4 ==> w <= unknown_int();\nloop invariant x < 4 ==> z <= unknown_int();\nloop invariant x < 4 ==> y <= unknown_int();\nloop invariant x < 4 ==> z <= unknown_int();\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet();\n\nint main(){\n  int x = 0, y = 0, w = 0, z = 0;\n/*@\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown_int()) {\n   if (unknown_int())\n     {x = x+1; y = y+100;}\n   else if (unknown_int()){\n     if (x >= 4)\n       {x = x+1; y = y+1;}\n   }\n else if (y > 10*w && z >= 100*x)\n     {y = -y;}\n   w = w+1; z = z+10;\n  x = x; \n \n}\nif (x >= 4 && y <= 2)\n  goto ERROR;\n\nreturn 0;\n\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant w == y / 100;\nloop invariant z >= 1000;\nloop invariant x >= 4 ==> w >= 4;\nloop invariant x < 4 ==> w < 4;\nloop invariant x >= 4 ==> y <= 2;\nloop invariant x < 4 ==> y > 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet();\n\nint main(){\n  int x = 0, y = 0, w = 0, z = 0;\n/*@\n\n\n\n\n\n\n\n\n*/\nwhile (unknown_int()) {\n   if (unknown_int())\n     {x = x+1; y = y+100;}\n   else if (unknown_int()){\n     if (x >= 4)\n       {x = x+1; y = y+1;}\n   }\n else if (y > 10*w && z >= 100*x)\n     {y = -y;}\n   w = w+1; z = z+10;\n  x = x; \n \n}\nif (x >= 4 && y <= 2)\n  goto ERROR;\n\nreturn 0;\n\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 2;\nloop invariant 0 <= w <= 5;\nloop invariant 0 <= z <= 50;\nloop invariant x >= 4 ==> y <= 2;\nloop invariant y > 10*w ==> x >= 1 && z >= 100*x;\nloop invariant z >= 100*x ==> y <= 2;\nloop invariant unknown_int() ==> x >= 4 ==> y <= 2;\nloop invariant unknown_int() ==> y > 10*w ==> x >= 1 && z >= 100*x;\nloop invariant unknown_int() ==> z >= 100*x ==> y <= 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet();\n\nint main(){\n  int x = 0, y = 0, w = 0, z = 0;\n/*@\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown_int()) {\n   if (unknown_int())\n     {x = x+1; y = y+100;}\n   else if (unknown_int()){\n     if (x >= 4)\n       {x = x+1; y = y+1;}\n   }\n else if (y > 10*w && z >= 100*x)\n     {y = -y;}\n   w = w+1; z = z+10;\n  x = x; \n \n}\nif (x >= 4 && y <= 2)\n  goto ERROR;\n\nreturn 0;\n\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 2;\nloop invariant 0 <= w;\nloop invariant 0 <= z;\nloop invariant x <= y;\nloop invariant x >= 4 ==> y >= 2;\nloop invariant x >= 4 ==> y <= 2;\nloop invariant x >= 4 ==> y == 2;\nloop invariant x >= 4 ==> w >= 2;\nloop invariant x >= 4 ==> z >= 200;\nloop invariant x >= 4 ==> z <= 204;\nloop invariant y <= 2 ==> x <= 2;\nloop invariant y <= 2 ==> w >= 2;\nloop invariant y <= 2 ==> z >= 200;\nloop invariant y <= 2 ==> z <= 204;\nloop invariant z >= 100*x;\nloop invariant (w>= 2 && z >= 200) ==> y == -y;\nloop invariant (w>= 2 && z >= 200) ==> y == -2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet();\n\nint main(){\n  int x = 0, y = 0, w = 0, z = 0;\n/*@\n\n\nloop invariant i3: 0 <= w;\nloop invariant i4: 0 <= z;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown_int()) {\n   if (unknown_int())\n     {x = x+1; y = y+100;}\n   else if (unknown_int()){\n     if (x >= 4)\n       {x = x+1; y = y+1;}\n   }\n else if (y > 10*w && z >= 100*x)\n     {y = -y;}\n   w = w+1; z = z+10;\n  x = x; \n \n}\nif (x >= 4 && y <= 2)\n  goto ERROR;\n\nreturn 0;\n\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 53: Assignment operators not allowed in annotations.",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet();\n\nint main(){\n  int x = 0, y = 0, w = 0, z = 0;\n/*@\nloop invariant i1: 0 <= y <= 100000; loop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant i2: 0 <= x <= 100000;\nloop invariant i3: 0 <= y <= 100000;\nloop invariant i4: 0 <= w <= 100000;\nloop invariant i5: 0 <= z <= 100000;\nloop invariant i6: x <= y + 100;\nloop invariant i7: x <= w + 10;\nloop invariant i8: y <= z + 100;\nloop invariant i9: w <= z / 10;\nloop invariant i10: w <= x / 10;\nloop invariant i11: x <= 4;\nloop invariant i12: y >= 2;\nloop invariant i13: x <= 4 ==> y <= 2;\nloop invariant i14: x >= 4 ==> y <= 2;\nloop invariant i15: x <= 4 ==> y <= 2 ==> z <= 100*x;\nloop invariant i16: x >= 4 ==> y <= 2 ==> z <= 100*x;\nloop invariant i17: x <= 4 ==> y <= 2 ==> z <= 100*x ==> x <= y + 100;\nloop invariant i18: x >= 4 ==> y <= 2 ==> z <= 100*x ==> x <= y + 100;\nloop invariant i19: x <= 4 ==> y <= 2 ==> z <= 100*x ==> x <= y + 100 ==> x <= w + 10;\nloop invariant i20: x >= 4 ==> y <= 2 ==> z <= 100*x ==> x <= y + 100 ==> x <= w + 10;\nloop invariant i21: x <= 4 ==> y <= 2 ==> z <= 100*x ==> x <= y + 100 ==> x <= w + 10 ==> y <= z + 100;\nloop invariant i22: x >= 4 ==> y <= 2 ==> z <= 100*x ==> x <= y + 100 ==> x <= w + 10 ==> y <= z + 100;\nloop invariant i23: x <= 4 ==> y <= 2 ==> z <= 100*x ==> x <= y + 100 ==> x <= w + 10 ==> y <= z + 100 ==> w <= z / 10;\nloop invariant i24: x >= 4 ==> y <= 2 ==> z <= 100*x ==> x <= y + 100 ==> x <= w + 10 ==> y <= z + 100 ==> w <= z / 10;\nloop invariant i25: x <= 4 ==> y <= 2 ==> z <= 100*x ==> x <= y + 100 ==> x <= w + 10 ==> y <= z + 100 ==> w <= z / 10 ==> w <= x / 10;\nloop invariant i26: x >= 4 ==> y <= 2 ==> z <= 100*x ==> x <= y + 100 ==> x <= w + 10 ==> y <= z + 100 ==> w <= z / 10 ==> w <= x / 10;\nloop invariant i27: x <= 4 ==> y <= 2 ==> z <= 100*x ==> x <= y + 100 ==> x <= w + 10 ==> y <= z + 100 ==> w <= z / 10 ==> w <= x / 10 ==> x <= y + 100;\nloop invariant i28: x >= 4 ==> y <= 2 ==> z <= 100*x ==> x <= y + 100 ==> x <= w + 10 ==> y <= z + 100 ==> w <= z / 10 ==> w <= x / 10 ==> x <= y + 100;\nloop invariant i29: x <= 4 ==> y <= 2 ==> z <= 100*x ==> x <= y + 100 ==> x <= w + 10 ==> y <= z + 100 ==> w <= z / 10 ==> w <= x / 10 ==> x <= y + 100 ==> x <= w + 10;\nloop invariant i30: x >= 4 ==> y <= 2 ==> z <= 100*x ==> x <= y + 100 ==> x <= w + 10 ==> y <= z + 100 ==> w <= z / 10 ==> w <= x / 10 ==> x <= y + 100 ==> x <= w + 10;\nloop invariant i31: 1 <= x <= 4;\nloop invariant i32: 0 <= y <= 2;\nloop invariant i33: 0 <= w <= 1;\nloop invariant i34: 0 <= z <= 100;\nloop invariant i35: x <= 100000;\nloop invariant i36: y <= 100000;\nloop invariant i37: w <= 100000;\nloop invariant i38: z <= 100000;\nloop invariant i39: x+y+z+w <= 200000;\nloop invariant i40: x >= 4 ==> x = 4;\nloop invariant i41: y >= 2 ==> y = 2;\nloop invariant i42: w >= 1 ==> w = 1;\nloop invariant i43: z >= 100*x ==> z = 100*x;\nloop invariant i44: 0 <= w <= 100;\nloop invariant i45: 0 <= z <= 10000;\nloop invariant i46: 0 <= x <= 4;\nloop invariant i47: y <= 200;\nloop invariant i48: x <= y;\nloop invariant i49: y <= 200 * x;\nloop invariant i50: y >= -200 * w;\nloop invariant i51: x <= 4 * w;\nloop invariant i52: x <= y/100;\nloop invariant i53: y >= 10 * x;\nloop invariant i54: x <= z/100;\nloop invariant i55: z >= 10 * x;\nloop invariant i56: y <= 10000;\nloop invariant i57: x >= (1 + (y - 1) * y / 2);\nloop invariant i58: y >= (1 + (x - 1) * x / 2);\nloop invariant i59: 0 <= x <= 4; loop invariant 0 <= y <= 2; loop invariant 0 <= w <= 10; loop invariant 0 <= z <= 100; loop invariant x >= 4 ==> y <= 2; loop invariant y > 10*w ==> y <= 2; loop invariant z >= 100*x ==> y <= 2; loop invariant x <= 4 ==> y >= 0; loop invariant y <= 2 ==> x >= 0; loop invariant w <= 10 ==> y >= 0; loop invariant z <= 100 ==> x >= 0; loop invariant x <= 4 ==> y >= 0; loop invariant y <= 2 ==> x >= 0; loop invariant w <= 10 ==> y >= 0; loop invariant z <= 100 ==> x >= 0; loop invariant x <= 4 ==> y >= 0; loop invariant y <= 2 ==> x >= 0; loop invariant w <= 10 ==> y >= 0; loop invariant z <= 100 ==> x >= 0; loop invariant x <= 4 ==> y >= 0; loop invariant y <= 2 ==> x >= 0; loop invariant w <= 10 ==> y >= 0; loop invariant z <= 100 ==> x >= 0; loop invariant x <= 4 ==> y >= 0; loop invariant y <= 2 ==> x >= 0; loop invariant w <= 10 ==> y >= 0; loop invariant z <= 100 ==> x >= 0; loop invariant x <= 4 ==> y >= 0; loop invariant y <= 2 ==> x >= 0; loop invariant w <= 10 ==> y >= 0; loop invariant z <= 100 ==> x >= 0; loop invariant x <= 4 ==> y >= 0; loop invariant y <= 2 ==> x >= 0; loop invariant w <= 10 ==> y >= 0; loop invariant z <= 100 ==> x >= 0; loop invariant x <= 4 ==> y >= 0; loop invariant y <= 2 ==> x >= 0; loop invariant w <= 10 ==> y >= 0; loop invariant z <= 100 ==> x >= 0; loop invariant x <= 4 ==> y >= 0; loop invariant y <= 2 ==> x >= 0; loop invariant w <= 10 ==> y >= 0; loop invariant z <= 100 ==> x >= 0; loop invariant x <= 4 ==> y >= 0; loop invariant y <= 2 ==> x >= 0; loop invariant w <= 10 ==> y >= 0; loop invariant z <= 100 ==> x >= 0; loop invariant x <= 4 ==> y >= 0; loop invariant y <= 2 ==> x >= 0; loop invariant w <= 10 ==> y >= 0; loop invariant z <= 100 ==> x >= 0; loop invariant x <= 4 ==> y >= 0; loop invariant y <= 2 ==> x >= 0; loop invariant w <= 10 ==> y >= 0; loop invariant z <= 100 ==> x >= 0; loop invariant x <= 4 ==> y >= 0; loop invariant y <= 2 ==> x >= 0; loop invariant w <= 10 ==> y >= 0; loop invariant z <= 100 ==> x >= 0; loop invariant x <= 4 ==> y >= 0; loop invariant y <= 2 ==> x >= 0; loop invariant w <= 10 ==> y >= 0; loop invariant z <= 100 ==> x >= 0; loop invariant x <= 4 ==> y >= 0; loop invariant y <= 2 ==> x >= 0; loop invariant w <= 10 ==> y >= 0; loop invariant z <= 100 ==> x >= 0; loop invariant x <= 4 ==> y >= 0; loop invariant y <= 2 ==> x >= 0; loop invariant w <= 10 ==> y >= 0; loop invariant z <= 100 ==> x >= 0; loop invariant x <= 4 ==> y >= 0; loop invariant y <= 2 ==> x >= 0; loop invariant w <= 10 ==> y >= 0; loop invariant z <= 100 ==> x >= 0; loop invariant x <= 4 ==> y >= 0; loop invariant y <= 2 ==> x >= 0; loop invariant w <= 10 ==> y >= 0;\nloop invariant i60: 0 <= w;\nloop invariant i61: z >= 10 * w;\nloop invariant i62: x >= 4;\nloop invariant i63: (x >= 4 && y <= 2) ==> (x >= 4 && y <= 2);\nloop invariant i64: 0 <= x;\nloop invariant i65: 0 <= y;\nloop invariant i66: 0 <= z;\nloop invariant i67: 0 <= x <= 5;\nloop invariant i68: 0 <= z <= 1000000;\nloop invariant i69: x >= 0;\nloop invariant i70: y >= 0;\nloop invariant i71: w >= 0;\nloop invariant i72: z >= 0;\nloop invariant i73: x >= y;\nloop invariant i74: x >= (w + z);\nloop invariant i75: x >= (w * z);\nloop invariant i76: x >= (w * w);\nloop invariant i77: x >= (z * z);\nloop invariant i78: x >= (w * z - y);\nloop invariant i79: x >= (w * w - y);\nloop invariant i80: x >= (z * z - y);\nloop invariant i81: y >= (w * z - x);\nloop invariant i82: y >= (w * w - x);\nloop invariant i83: y >= (z * z - x);\nloop invariant i84: x >= (w * z - y - w);\nloop invariant i85: x >= (w * w - y - w);\nloop invariant i86: x >= (z * z - y - w);\nloop invariant i87: x >= (w * z - y - z);\nloop invariant i88: x >= (w * w - y - z);\nloop invariant i89: x >= (z * z - y - z);\nloop invariant i90: x >= (w * z - y - w - z);\nloop invariant i91: x >= (w * w - y - w - z);\nloop invariant i92: x >= (z * z - y - w - z);\nloop invariant i93: x >= (w * z - y - w - z - w);\nloop invariant i94: x >= (w * w - y - w - z - w);\nloop invariant i95: x >= (z * z - y - w - z - w);\nloop invariant i96: x >= (w * z - y - w - z - z);\nloop invariant i97: x >= (w * w - y - w - z - z);\nloop invariant i98: x >= (z * z - y - w - z - z);\nloop invariant i99: x >= (w * z - y - w - z - w - z);\nloop invariant i100: x >= (w * w - y - w - z - w - z);\nloop invariant i101: x >= (z * z - y - w - z - w - z);\nloop invariant i102: x >= (w * z - y - w - z - w - z - w);\nloop invariant i103: x >= (w * w - y - w - z - w - z - w);\nloop invariant i104: x >= (z * z - y - w - z - w - z - w);\nloop invariant i105: x >= (w * z - y - w - z - w - z - z);\nloop invariant i106: x >= (w * w - y - w - z - w - z - z);\nloop invariant i107: x >= (z * z - y - w - z - w - z - z);\nloop invariant i108: x >= (w * z - y - w - z - w - z - w - z);\nloop invariant i109: x >= (w * w - y - w - z - w - z - w - z);\nloop invariant i110: x >= (z * z - y - w - z - w - z - w - z);\nloop invariant i111: x >= (w * z - y - w - z - w - z - w - z - w);\nloop invariant i112: x >= (w * w - y - w - z - w - z - w - z - w);\nloop invariant i113: x >= (z * z - y - w - z - w - z - w - z - w);\nloop invariant i114: x >= (w * z - y - w - z - w - z - w - z - z);\nloop invariant i115: x >= (w * w - y - w - z - w - z - w - z - z);\nloop invariant i116: x >= (z * z - y - w - z - w - z - w - z - z);\nloop invariant i117: x >= (w * z - y - w - z - w - z - w - z - w - z);\nloop invariant i118: x >= (w * w - y - w - z - w - z - w - z - w - z);\nloop invariant i119: x >= (z * z - y - w - z - w - z - w - z - w - z);\nloop invariant i120: x >= (w * z - y - w - z - w - z - w - z - w - z - w);\nloop invariant i121: x >= (w * w - y - w - z - w - z - w - z - w - z - w);\nloop invariant i122: x >= (z * z - y - w - z - w - z - w - z - w - z - w);\nloop invariant i123: 0 <= x <= unknown_int();\nloop invariant i124: 0 <= y <= unknown_int();\nloop invariant i125: 0 <= w <= unknown_int();\nloop invariant i126: 0 <= z <= unknown_int();\nloop invariant i127: x >= 4 ==> y <= 10*w;\nloop invariant i128: x >= 4 ==> z >= 100*x;\nloop invariant i129: x < 4 ==> y <= 2;\nloop invariant i130: x < 4 ==> z <= 100*x;\nloop invariant i131: x < 4 ==> w <= unknown_int();\nloop invariant i132: x < 4 ==> z <= unknown_int();\nloop invariant i133: x < 4 ==> y <= unknown_int();\nloop invariant i134: w == y / 100;\nloop invariant i135: z >= 1000;\nloop invariant i136: x >= 4 ==> w >= 4;\nloop invariant i137: x < 4 ==> w < 4;\nloop invariant i138: x < 4 ==> y > 2;\nloop invariant i139: 0 <= w <= 5;\nloop invariant i140: 0 <= z <= 50;\nloop invariant i141: y > 10*w ==> x >= 1 && z >= 100*x;\nloop invariant i142: z >= 100*x ==> y <= 2;\nloop invariant i143: unknown_int() ==> x >= 4 ==> y <= 2;\nloop invariant i144: unknown_int() ==> y > 10*w ==> x >= 1 && z >= 100*x;\nloop invariant i145: unknown_int() ==> z >= 100*x ==> y <= 2;\nloop invariant i146: x >= 4 ==> y >= 2;\nloop invariant i147: x >= 4 ==> y == 2;\nloop invariant i148: x >= 4 ==> w >= 2;\nloop invariant i149: x >= 4 ==> z >= 200;\nloop invariant i150: x >= 4 ==> z <= 204;\nloop invariant i151: y <= 2 ==> x <= 2;\nloop invariant i152: y <= 2 ==> w >= 2;\nloop invariant i153: y <= 2 ==> z >= 200;\nloop invariant i154: y <= 2 ==> z <= 204;\nloop invariant i155: z >= 100*x;\nloop invariant i156: (w>= 2 && z >= 200) ==> y == -y;\nloop invariant i157: (w>= 2 && z >= 200) ==> y == -2;\n*/\nwhile (unknown_int()) {\n   if (unknown_int())\n     {x = x+1; y = y+100;}\n   else if (unknown_int()){\n     if (x >= 4)\n       {x = x+1; y = y+1;}\n   }\n else if (y > 10*w && z >= 100*x)\n     {y = -y;}\n   w = w+1; z = z+10;\n  x = x; \n \n}\nif (x >= 4 && y <= 2)\n  goto ERROR;\n\nreturn 0;\n\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
        "combined_annotation_num_solver_calls": 16,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet();\n\nint main(){\n  int x = 0, y = 0, w = 0, z = 0;\n/*@\nloop invariant i1: 0 <= y <= 100000; loop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant i2: 0 <= x <= 100000;\nloop invariant i3: 0 <= y <= 100000;\nloop invariant i4: 0 <= w <= 100000;\nloop invariant i5: 0 <= z <= 100000;\nloop invariant i6: x <= y + 100;\nloop invariant i7: x <= w + 10;\nloop invariant i8: y <= z + 100;\nloop invariant i9: w <= z / 10;\nloop invariant i10: w <= x / 10;\nloop invariant i11: x <= 4;\nloop invariant i12: y >= 2;\nloop invariant i13: x <= 4 ==> y <= 2;\nloop invariant i14: x >= 4 ==> y <= 2;\nloop invariant i15: x <= 4 ==> y <= 2 ==> z <= 100*x;\nloop invariant i16: x >= 4 ==> y <= 2 ==> z <= 100*x;\nloop invariant i17: x <= 4 ==> y <= 2 ==> z <= 100*x ==> x <= y + 100;\nloop invariant i18: x >= 4 ==> y <= 2 ==> z <= 100*x ==> x <= y + 100;\nloop invariant i19: x <= 4 ==> y <= 2 ==> z <= 100*x ==> x <= y + 100 ==> x <= w + 10;\nloop invariant i20: x >= 4 ==> y <= 2 ==> z <= 100*x ==> x <= y + 100 ==> x <= w + 10;\nloop invariant i21: x <= 4 ==> y <= 2 ==> z <= 100*x ==> x <= y + 100 ==> x <= w + 10 ==> y <= z + 100;\nloop invariant i22: x >= 4 ==> y <= 2 ==> z <= 100*x ==> x <= y + 100 ==> x <= w + 10 ==> y <= z + 100;\nloop invariant i23: x <= 4 ==> y <= 2 ==> z <= 100*x ==> x <= y + 100 ==> x <= w + 10 ==> y <= z + 100 ==> w <= z / 10;\nloop invariant i24: x >= 4 ==> y <= 2 ==> z <= 100*x ==> x <= y + 100 ==> x <= w + 10 ==> y <= z + 100 ==> w <= z / 10;\nloop invariant i25: x <= 4 ==> y <= 2 ==> z <= 100*x ==> x <= y + 100 ==> x <= w + 10 ==> y <= z + 100 ==> w <= z / 10 ==> w <= x / 10;\nloop invariant i26: x >= 4 ==> y <= 2 ==> z <= 100*x ==> x <= y + 100 ==> x <= w + 10 ==> y <= z + 100 ==> w <= z / 10 ==> w <= x / 10;\nloop invariant i27: x <= 4 ==> y <= 2 ==> z <= 100*x ==> x <= y + 100 ==> x <= w + 10 ==> y <= z + 100 ==> w <= z / 10 ==> w <= x / 10 ==> x <= y + 100;\nloop invariant i28: x >= 4 ==> y <= 2 ==> z <= 100*x ==> x <= y + 100 ==> x <= w + 10 ==> y <= z + 100 ==> w <= z / 10 ==> w <= x / 10 ==> x <= y + 100;\nloop invariant i29: x <= 4 ==> y <= 2 ==> z <= 100*x ==> x <= y + 100 ==> x <= w + 10 ==> y <= z + 100 ==> w <= z / 10 ==> w <= x / 10 ==> x <= y + 100 ==> x <= w + 10;\nloop invariant i30: x >= 4 ==> y <= 2 ==> z <= 100*x ==> x <= y + 100 ==> x <= w + 10 ==> y <= z + 100 ==> w <= z / 10 ==> w <= x / 10 ==> x <= y + 100 ==> x <= w + 10;\nloop invariant i31: 1 <= x <= 4;\nloop invariant i32: 0 <= y <= 2;\nloop invariant i33: 0 <= w <= 1;\nloop invariant i34: 0 <= z <= 100;\nloop invariant i35: x <= 100000;\nloop invariant i36: y <= 100000;\nloop invariant i37: w <= 100000;\nloop invariant i38: z <= 100000;\nloop invariant i39: x+y+z+w <= 200000;\n\n\n\n\nloop invariant i44: 0 <= w <= 100;\nloop invariant i45: 0 <= z <= 10000;\nloop invariant i46: 0 <= x <= 4;\nloop invariant i47: y <= 200;\nloop invariant i48: x <= y;\nloop invariant i49: y <= 200 * x;\nloop invariant i50: y >= -200 * w;\nloop invariant i51: x <= 4 * w;\nloop invariant i52: x <= y/100;\nloop invariant i53: y >= 10 * x;\nloop invariant i54: x <= z/100;\nloop invariant i55: z >= 10 * x;\nloop invariant i56: y <= 10000;\nloop invariant i57: x >= (1 + (y - 1) * y / 2);\nloop invariant i58: y >= (1 + (x - 1) * x / 2);\nloop invariant i59: 0 <= x <= 4; loop invariant 0 <= y <= 2; loop invariant 0 <= w <= 10; loop invariant 0 <= z <= 100; loop invariant x >= 4 ==> y <= 2; loop invariant y > 10*w ==> y <= 2; loop invariant z >= 100*x ==> y <= 2; loop invariant x <= 4 ==> y >= 0; loop invariant y <= 2 ==> x >= 0; loop invariant w <= 10 ==> y >= 0; loop invariant z <= 100 ==> x >= 0; loop invariant x <= 4 ==> y >= 0; loop invariant y <= 2 ==> x >= 0; loop invariant w <= 10 ==> y >= 0; loop invariant z <= 100 ==> x >= 0; loop invariant x <= 4 ==> y >= 0; loop invariant y <= 2 ==> x >= 0; loop invariant w <= 10 ==> y >= 0; loop invariant z <= 100 ==> x >= 0; loop invariant x <= 4 ==> y >= 0; loop invariant y <= 2 ==> x >= 0; loop invariant w <= 10 ==> y >= 0; loop invariant z <= 100 ==> x >= 0; loop invariant x <= 4 ==> y >= 0; loop invariant y <= 2 ==> x >= 0; loop invariant w <= 10 ==> y >= 0; loop invariant z <= 100 ==> x >= 0; loop invariant x <= 4 ==> y >= 0; loop invariant y <= 2 ==> x >= 0; loop invariant w <= 10 ==> y >= 0; loop invariant z <= 100 ==> x >= 0; loop invariant x <= 4 ==> y >= 0; loop invariant y <= 2 ==> x >= 0; loop invariant w <= 10 ==> y >= 0; loop invariant z <= 100 ==> x >= 0; loop invariant x <= 4 ==> y >= 0; loop invariant y <= 2 ==> x >= 0; loop invariant w <= 10 ==> y >= 0; loop invariant z <= 100 ==> x >= 0; loop invariant x <= 4 ==> y >= 0; loop invariant y <= 2 ==> x >= 0; loop invariant w <= 10 ==> y >= 0; loop invariant z <= 100 ==> x >= 0; loop invariant x <= 4 ==> y >= 0; loop invariant y <= 2 ==> x >= 0; loop invariant w <= 10 ==> y >= 0; loop invariant z <= 100 ==> x >= 0; loop invariant x <= 4 ==> y >= 0; loop invariant y <= 2 ==> x >= 0; loop invariant w <= 10 ==> y >= 0; loop invariant z <= 100 ==> x >= 0; loop invariant x <= 4 ==> y >= 0; loop invariant y <= 2 ==> x >= 0; loop invariant w <= 10 ==> y >= 0; loop invariant z <= 100 ==> x >= 0; loop invariant x <= 4 ==> y >= 0; loop invariant y <= 2 ==> x >= 0; loop invariant w <= 10 ==> y >= 0; loop invariant z <= 100 ==> x >= 0; loop invariant x <= 4 ==> y >= 0; loop invariant y <= 2 ==> x >= 0; loop invariant w <= 10 ==> y >= 0; loop invariant z <= 100 ==> x >= 0; loop invariant x <= 4 ==> y >= 0; loop invariant y <= 2 ==> x >= 0; loop invariant w <= 10 ==> y >= 0; loop invariant z <= 100 ==> x >= 0; loop invariant x <= 4 ==> y >= 0; loop invariant y <= 2 ==> x >= 0; loop invariant w <= 10 ==> y >= 0; loop invariant z <= 100 ==> x >= 0; loop invariant x <= 4 ==> y >= 0; loop invariant y <= 2 ==> x >= 0; loop invariant w <= 10 ==> y >= 0; loop invariant z <= 100 ==> x >= 0; loop invariant x <= 4 ==> y >= 0; loop invariant y <= 2 ==> x >= 0; loop invariant w <= 10 ==> y >= 0;\nloop invariant i60: 0 <= w;\nloop invariant i61: z >= 10 * w;\nloop invariant i62: x >= 4;\nloop invariant i63: (x >= 4 && y <= 2) ==> (x >= 4 && y <= 2);\nloop invariant i64: 0 <= x;\nloop invariant i65: 0 <= y;\nloop invariant i66: 0 <= z;\nloop invariant i67: 0 <= x <= 5;\nloop invariant i68: 0 <= z <= 1000000;\nloop invariant i69: x >= 0;\nloop invariant i70: y >= 0;\nloop invariant i71: w >= 0;\nloop invariant i72: z >= 0;\nloop invariant i73: x >= y;\nloop invariant i74: x >= (w + z);\nloop invariant i75: x >= (w * z);\nloop invariant i76: x >= (w * w);\nloop invariant i77: x >= (z * z);\nloop invariant i78: x >= (w * z - y);\nloop invariant i79: x >= (w * w - y);\nloop invariant i80: x >= (z * z - y);\nloop invariant i81: y >= (w * z - x);\nloop invariant i82: y >= (w * w - x);\nloop invariant i83: y >= (z * z - x);\nloop invariant i84: x >= (w * z - y - w);\nloop invariant i85: x >= (w * w - y - w);\nloop invariant i86: x >= (z * z - y - w);\nloop invariant i87: x >= (w * z - y - z);\nloop invariant i88: x >= (w * w - y - z);\nloop invariant i89: x >= (z * z - y - z);\nloop invariant i90: x >= (w * z - y - w - z);\nloop invariant i91: x >= (w * w - y - w - z);\nloop invariant i92: x >= (z * z - y - w - z);\nloop invariant i93: x >= (w * z - y - w - z - w);\nloop invariant i94: x >= (w * w - y - w - z - w);\nloop invariant i95: x >= (z * z - y - w - z - w);\nloop invariant i96: x >= (w * z - y - w - z - z);\nloop invariant i97: x >= (w * w - y - w - z - z);\nloop invariant i98: x >= (z * z - y - w - z - z);\nloop invariant i99: x >= (w * z - y - w - z - w - z);\nloop invariant i100: x >= (w * w - y - w - z - w - z);\nloop invariant i101: x >= (z * z - y - w - z - w - z);\nloop invariant i102: x >= (w * z - y - w - z - w - z - w);\nloop invariant i103: x >= (w * w - y - w - z - w - z - w);\nloop invariant i104: x >= (z * z - y - w - z - w - z - w);\nloop invariant i105: x >= (w * z - y - w - z - w - z - z);\nloop invariant i106: x >= (w * w - y - w - z - w - z - z);\nloop invariant i107: x >= (z * z - y - w - z - w - z - z);\nloop invariant i108: x >= (w * z - y - w - z - w - z - w - z);\nloop invariant i109: x >= (w * w - y - w - z - w - z - w - z);\nloop invariant i110: x >= (z * z - y - w - z - w - z - w - z);\nloop invariant i111: x >= (w * z - y - w - z - w - z - w - z - w);\nloop invariant i112: x >= (w * w - y - w - z - w - z - w - z - w);\nloop invariant i113: x >= (z * z - y - w - z - w - z - w - z - w);\nloop invariant i114: x >= (w * z - y - w - z - w - z - w - z - z);\nloop invariant i115: x >= (w * w - y - w - z - w - z - w - z - z);\nloop invariant i116: x >= (z * z - y - w - z - w - z - w - z - z);\nloop invariant i117: x >= (w * z - y - w - z - w - z - w - z - w - z);\nloop invariant i118: x >= (w * w - y - w - z - w - z - w - z - w - z);\nloop invariant i119: x >= (z * z - y - w - z - w - z - w - z - w - z);\nloop invariant i120: x >= (w * z - y - w - z - w - z - w - z - w - z - w);\nloop invariant i121: x >= (w * w - y - w - z - w - z - w - z - w - z - w);\nloop invariant i122: x >= (z * z - y - w - z - w - z - w - z - w - z - w);\n\n\n\n\nloop invariant i127: x >= 4 ==> y <= 10*w;\nloop invariant i128: x >= 4 ==> z >= 100*x;\nloop invariant i129: x < 4 ==> y <= 2;\nloop invariant i130: x < 4 ==> z <= 100*x;\n\n\n\nloop invariant i134: w == y / 100;\nloop invariant i135: z >= 1000;\nloop invariant i136: x >= 4 ==> w >= 4;\nloop invariant i137: x < 4 ==> w < 4;\nloop invariant i138: x < 4 ==> y > 2;\nloop invariant i139: 0 <= w <= 5;\nloop invariant i140: 0 <= z <= 50;\nloop invariant i141: y > 10*w ==> x >= 1 && z >= 100*x;\nloop invariant i142: z >= 100*x ==> y <= 2;\n\n\n\nloop invariant i146: x >= 4 ==> y >= 2;\nloop invariant i147: x >= 4 ==> y == 2;\nloop invariant i148: x >= 4 ==> w >= 2;\nloop invariant i149: x >= 4 ==> z >= 200;\nloop invariant i150: x >= 4 ==> z <= 204;\nloop invariant i151: y <= 2 ==> x <= 2;\nloop invariant i152: y <= 2 ==> w >= 2;\nloop invariant i153: y <= 2 ==> z >= 200;\nloop invariant i154: y <= 2 ==> z <= 204;\nloop invariant i155: z >= 100*x;\nloop invariant i156: (w>= 2 && z >= 200) ==> y == -y;\nloop invariant i157: (w>= 2 && z >= 200) ==> y == -2;\n*/\nwhile (unknown_int()) {\n   if (unknown_int())\n     {x = x+1; y = y+100;}\n   else if (unknown_int()){\n     if (x >= 4)\n       {x = x+1; y = y+1;}\n   }\n else if (y > 10*w && z >= 100*x)\n     {y = -y;}\n   w = w+1; z = z+10;\n  x = x; \n \n}\nif (x >= 4 && y <= 2)\n  goto ERROR;\n\nreturn 0;\n\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/split.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/11.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/15.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/16.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/18.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/23.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/30.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/32.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/37.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/38.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/41.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/43.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/44.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/46.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/popl.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/05.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/07.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/37.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/39.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/13.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/14.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/19.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/20.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/39.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/cav.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/19.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/gulv.c"
        ],
        "skipped": [],
        "total": 132,
        "success_count": 108,
        "failure_count": 24,
        "success_rate": 0.8181818181818182
    }
}