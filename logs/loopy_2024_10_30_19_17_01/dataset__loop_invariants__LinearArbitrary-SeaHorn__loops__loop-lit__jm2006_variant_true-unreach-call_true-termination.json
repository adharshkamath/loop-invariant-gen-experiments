{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n\n    if (!(i >= 0 && i <= LARGE_INT)) return 0;\n    if (!(j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    int z = 0;\n    while(x != 0) {\n        x --;\n        y -= 2;\n        z ++;\n    }\n    if (i == j) {\n        {;\n//@ assert(y == -z);\n}\n\n    }\n    return 0;\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= j <= LARGE_INT;\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant i >= j;\nloop invariant x + y == z;\nloop invariant x != 0 ==> x >= 0;\nloop invariant y != 0 ==> y >= 0;\nloop invariant x != 0 ==> x <= LARGE_INT;\nloop invariant y != 0 ==> y <= LARGE_INT;\nloop invariant x != 0 ==> i - x == j - y;\nloop invariant x != 0 ==> i == j + z;\nloop invariant x != 0 ==> y == j - z;\nloop invariant x != 0 ==> x + y == z;\nloop invariant x != 0 ==> x + (j - z) == z;\nloop invariant x != 0 ==> x + j - z == z;\nloop invariant x != 0 ==> x + j == 2 * z;\nloop invariant x != 0 ==> x == 2 * z - j;\nloop invariant x != 0 ==> x == 2 * (z - j / 2);\nloop invariant x != 0 ==> x == 2 * z - j;\nloop invariant x != 0 ==> x == 2 * z - j;\nloop invariant x != 0 ==> x == 2 * z - j;\nloop invariant x != 0 ==> x == 2 * z - j;\nloop invariant x != 0 ==> x == 2 * z - j;\nloop invariant x != 0 ==> x == 2 * z - j;\nloop invariant x != 0 ==> x == 2 * z - j;\nloop invariant x != 0 ==> x == 2 * z - j;\nloop invariant x != 0 ==> x == 2 * z - j;\nloop invariant x != 0 ==> x == 2 * z - j;\nloop invariant x != 0 ==> x == 2 * z - j;\nloop invariant x != 0 ==> x == 2 * z - j;\nloop invariant x != 0 ==> x == 2 * z - j;\nloop invariant x != 0 ==> x == 2 * z - j;\nloop invariant x != 0 ==> x == 2 * z - j;\nloop invariant x != 0 ==> x == 2 * z - j;\nloop invariant x != 0 ==> x == 2 * z - j;\nloop invariant x != 0 ==> x == 2 * z - j;\nloop invariant x != 0 ==> x == 2 * z - j;\nloop invariant x != 0 ==> x == 2 * z - j;\nloop invariant x != 0 ==> x == 2 * z - j;\nloop invariant x != 0 ==> x == 2 * z - j;\nloop invariant x != 0 ==> x == 2 * z - j;\nloop invariant x != 0 ==> x == 2 * z - j;\nloop invariant x != 0 ==> x == 2 * z - j;\nloop invariant x != 0 ==> x == 2 * z - j;\nloop invariant x != 0 ==> x == 2 * z - j;\nloop invariant x != 0 ==> x == 2 * z - j;\nloop invariant x != 0 ==> x == 2 * z - j;\nloop invariant x != 0 ==> x == 2 * z - j;\nloop invariant x != 0 ==> x == 2 * z - j;\nloop invariant x != 0 ==> x == 2 * z - j;\nloop invariant x != 0 ==> x == 2 * z - j;\nloop invariant x != 0 ==> x == 2 * z - j;\nloop invariant x != 0 ==> x == 2 * z - j;\nloop invariant x != 0 ==> x == 2 * z - j;\nloop invariant x != 0 ==> x == 2 * z - j;\nloop invariant x != 0 ==> x == 2 * z - j;\nloop invariant x != 0 ==> x == 2 * z - j;\nloop invariant x != 0 ==> x == 2 * z - j;\nloop invariant x != 0 ==> x == 2 * z - j;\nloop invariant x != 0 ==> x == 2 * z - j;\nloop invariant x != 0 ==> x == 2 * z - j;\nloop invariant x != 0 ==> x == 2 * z - j;\nloop invariant x != 0 ==> x == 2 * z - j;\nloop invariant x != 0 ==> x == 2 * z - j;\nloop invariant x != 0 ==> x == 2 * z - j;\nloop invariant x != 0 ==> x == 2 * z - j;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= LARGE_INT;\nloop invariant 0 <= y;\nloop invariant 0 <= z;\nloop invariant y == 2 * z + j;\nloop invariant x == i;\nloop invariant i >= 0;\nloop invariant i <= LARGE_INT;\nloop invariant j >= 0;\nloop invariant i >= j;\nloop invariant j >= -z;\nloop invariant z >= 0;\nloop invariant i != 0 ==> x != 0;\nloop invariant i != 0 ==> y != -z;\nloop invariant i != 0 ==> z != i;\nloop invariant i != 0 ==> j != -z;\nloop invariant i != 0 ==> y != -z + 2;\nloop invariant i != 0 ==> x != i - 1;\nloop invariant i != 0 ==> z != i - 1;\nloop invariant i != 0 ==> y != -z + 2;\nloop invariant i != 0 ==> x != i - 1;\nloop invariant i != 0 ==> z != i - 1;\nloop invariant i != 0 ==> y != -z + 2;\nloop invariant i != 0 ==> x != i - 1;\nloop invariant i != 0 ==> z != i - 1;\nloop invariant i != 0 ==> y != -z + 2;\nloop invariant i != 0 ==> x != i - 1;\nloop invariant i != 0 ==> z != i - 1;\nloop invariant i != 0 ==> y != -z + 2;\nloop invariant i != 0 ==> x != i - 1;\nloop invariant i != 0 ==> z != i - 1;\nloop invariant i != 0 ==> y != -z + 2;\nloop invariant i != 0 ==> x != i - 1;\nloop invariant i != 0 ==> z != i - 1;\nloop invariant i != 0 ==> y != -z + 2;\nloop invariant i != 0 ==> x != i - 1;\nloop invariant i != 0 ==> z != i - 1;\nloop invariant i != 0 ==> y != -z + 2;\nloop invariant i != 0 ==> x != i - 1;\nloop invariant i != 0 ==> z != i - 1;\nloop invariant i != 0 ==> y != -z + 2;\nloop invariant i != 0 ==> x != i - 1;\nloop invariant i != 0 ==> z != i - 1;\nloop invariant i != 0 ==> y != -z + 2;\nloop invariant i != 0 ==> x != i - 1;\nloop invariant i != 0 ==> z != i - 1;\nloop invariant i != 0 ==> y != -z + 2;\nloop invariant i != 0 ==> x != i - 1;\nloop invariant i != 0 ==> z != i - 1;\nloop invariant i != 0 ==> y != -z + 2;\nloop invariant i != 0 ==> x != i - 1;\nloop invariant i != 0 ==> z != i - 1;\nloop invariant i != 0 ==> y != -z + 2;\nloop invariant i != 0 ==> x != i - 1;\nloop invariant i != 0 ==> z != i - 1;\nloop invariant i != 0 ==> y != -z + 2;\nloop invariant i != 0 ==> x != i - 1;\nloop invariant i != 0 ==> z != i - 1;\nloop invariant i != 0 ==> y != -z + 2;\nloop invariant i != 0 ==> x != i - 1;\nloop invariant i != 0 ==> z != i - 1;\nloop invariant i != 0 ==> y != -z + 2;\nloop invariant i != 0 ==> x != i - 1;\nloop invariant i != 0 ==> z != i - 1;\nloop invariant i != 0 ==> y != -z + 2;\nloop invariant i != 0 ==> x != i - 1;\nloop invariant i != 0 ==> z != i - 1;\nloop invariant i != 0 ==> y != -z + 2;\nloop invariant i != 0 ==> x != i - 1;\nloop invariant i != 0 ==> z != i - 1;\nloop invariant i != 0 ==> y != -z + 2;\nloop invariant i != 0 ==> x != i - 1;\nloop invariant i != 0 ==> z != i - 1;\nloop invariant i != 0 ==> y != -z + 2;\nloop invariant i != 0 ==> x != i - 1;\nloop invariant i != 0 ==> z != i - 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= i;\nloop invariant 0 <= y <= j;\nloop invariant 0 <= z <= (j - i);\nloop invariant x >= (i - z);\nloop invariant y >= (j - 2 * z);\nloop invariant x * y == (i * j - 2 * i * z + z * y);\nloop invariant x + y == i + j - 2 * z;\nloop invariant x - y == z;\nloop invariant x * y == (i * j - 2 * i * z + z * y);\nloop invariant x + y == i + j - 2 * z;\nloop invariant x - y == z;\nloop invariant x * y == (i * j - 2 * i * z + z * y);\nloop invariant x + y == i + j - 2 * z;\nloop invariant x - y == z;\nloop invariant x * y == (i * j - 2 * i * z + z * y);\nloop invariant x + y == i + j - 2 * z;\nloop invariant x - y == z;\nloop invariant x * y == (i * j - 2 * i * z + z * y);\nloop invariant x + y == i + j - 2 * z;\nloop invariant x - y == z;\nloop invariant x * y == (i * j - 2 * i * z + z * y);\nloop invariant x + y == i + j - 2 * z;\nloop invariant x - y == z;\nloop invariant x * y == (i * j - 2 * i * z + z * y);\nloop invariant x + y == i + j - 2 * z;\nloop invariant x - y == z;\nloop invariant x * y == (i * j - 2 * i * z + z * y);\nloop invariant x + y == i + j - 2 * z;\nloop invariant x - y == z;\nloop invariant x * y == (i * j - 2 * i * z + z * y);\nloop invariant x + y == i + j - 2 * z;\nloop invariant x - y == z;\nloop invariant x * y == (i * j - 2 * i * z + z * y);\nloop invariant x + y == i + j - 2 * z;\nloop invariant x - y == z;\nloop invariant x * y == (i * j - 2 * i * z + z * y);\nloop invariant x + y == i + j - 2 * z;\nloop invariant x - y == z;\nloop invariant x * y == (i * j - 2 * i * z + z * y);\nloop invariant x + y == i + j - 2 * z;\nloop invariant x - y == z;\nloop invariant x * y == (i * j - 2 * i * z + z * y);\nloop invariant x + y == i + j - 2 * z;\nloop invariant x - y == z;\nloop invariant x * y == (i * j - 2 * i * z + z * y);\nloop invariant x + y == i + j - 2 * z;\nloop invariant x - y == z;\nloop invariant x * y == (i * j - 2 * i * z + z * y);\nloop invariant x + y == i + j - 2 * z;\nloop invariant x - y == z;\nloop invariant x * y == (i * j - 2 * i * z + z * y);\nloop invariant x + y == i + j - 2 * z;\nloop invariant x - y == z;\nloop invariant x * y == (i * j - 2 * i * z + z * y);\nloop invariant x + y == i + j - 2 * z;\nloop invariant x - y == z;\nloop invariant x * y == (i * j - 2 * i * z + z * y);\nloop invariant x + y == i + j - 2 * z;\nloop invariant x - y == z;\nloop invariant x * y == (i * j - 2 * i * z + z * y);\nloop invariant x + y == i + j - 2 * z;\nloop invariant x - y == z;\nloop invariant x * y == (i * j - 2 * i * z + z * y);\nloop invariant x + y == i + j - 2 * z;\nloop invariant x - y == z;\nloop invariant x * y == (i * j - 2 * i * z + z * y);\nloop invariant x + y == i + j - 2 * z;\nloop invariant x - y == z;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= i;\nloop invariant z == j - y;\nloop invariant x == i - j + y;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i <= LARGE_INT;\nloop invariant y >= 0;\nloop invariant y <= i;\nloop invariant z == j - y;\nloop invariant x == i - j + y;\nloop invariant i >= j;\nloop invariant x >= j;\nloop invariant x <= i;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i <= LARGE_INT;\nloop invariant y >= 0;\nloop invariant y <= i;\nloop invariant z == j - y;\nloop invariant x == i - j + y;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i <= LARGE_INT;\nloop invariant y >= 0;\nloop invariant y <= i;\nloop invariant z == j - y;\nloop invariant x == i - j + y;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i <= LARGE_INT;\nloop invariant y >= 0;\nloop invariant y <= i;\nloop invariant z == j - y;\nloop invariant x == i - j + y;\nloop invariant i >= j;\nloop invariant x >= j;\nloop invariant x <= i;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i <= LARGE_INT;\nloop invariant y >= 0;\nloop invariant y <= i;\nloop invariant z == j - y;\nloop invariant x == i - j + y;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i <= LARGE_INT;\nloop invariant y >= 0;\nloop invariant y <= i;\nloop invariant z == j - y;\nloop invariant x == i - j + y;\nloop invariant i >= j;\nloop invariant x >= j;\nloop invariant x <= i;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i <= LARGE_INT;\nloop invariant y >= 0;\nloop invariant y <= i;\nloop invariant z == j - y;\nloop invariant x == i - j + y;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i <= LARGE_INT;\nloop invariant y >= 0;\nloop invariant y <= i;\nloop invariant z == j - y;\nloop invariant x == i - j + y;\nloop invariant i >= j;\nloop invariant x >= j;\nloop invariant x <= i;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i <= LARGE_INT;\nloop invariant y >= 0;\nloop invariant y <= i;\nloop invariant z == j - y;\nloop invariant x == i - j + y;\nloop invariant i >= j;\nloop invariant x >= j;\nloop invariant x <= i;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i <= LARGE_INT;\nloop invariant y >= 0;\nloop invariant y <= i;\nloop invariant z == j - y;\nloop invariant x == i - j + y;\nloop invariant i >= j;\nloop invariant x >= j;\nloop invariant x <= i;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i <= LARGE_INT;\nloop invariant y >= 0;\nloop invariant y <= i;\nloop invariant z == j - y;\nloop invariant x == i - j + y;\nloop invariant i >= j;\nloop invariant x >= j;\nloop invariant x <= i;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i <= LARGE_INT;\nloop invariant y >= 0;\nloop invariant y <= i;\nloop invariant z == j - y;\nloop invariant x == i - j + y;\nloop invariant i >= j;\nloop invariant x >= j;\nloop invariant x <= i;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i <= LARGE_INT;\nloop invariant y >= 0;\nloop invariant y <= i;\nloop invariant z == j - y;\nloop invariant x == i - j + y;\nloop invariant i >= j;\nloop invariant x >= j;\nloop invariant x <= i;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i <= LARGE_INT;\nloop invariant y >= 0;\nloop invariant y <= i;\nloop invariant z == j - y;\nloop invariant x == i - j + y;\nloop invariant i >= j;\nloop invariant x >= j;\nloop invariant x <= i;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i <= LARGE_INT;\nloop invariant y >= 0;\nloop invariant y <= i;\nloop invariant z == j - y;\nloop invariant x == i - j + y;\nloop invariant i >= j;\nloop invariant x >= j;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant i >= 0 && i <= LARGE_INT;\nloop invariant j >= 0;\nloop invariant z >= 0;\nloop invariant z <= i;\nloop invariant y >= -z;\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant i >= 0 && i <= LARGE_INT;\nloop invariant j >= 0;\nloop invariant z >= 0;\nloop invariant z <= i;\nloop invariant y >= -z;\nloop invariant (i == j ==> y == -z);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y ==> x >= (j + y);\nloop invariant z == (i - x);\nloop invariant 0 <= x ==> (x - 1) <= i;\nloop invariant 0 <= x ==> 0 <= y;\nloop invariant 0 <= x ==> 0 <= z;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 0 <= j;\nloop invariant 0 <= z <= LARGE_INT;\nloop invariant i - j <= z * 2;\nloop invariant 0 <= x <= i;\nloop invariant 0 <= y <= j - z * 2;\nloop invariant i - x == z;\nloop invariant j - y == z;\nloop invariant i - x == z ==> y == -z;\nloop invariant i - x == z ==> j == y + z;\nloop invariant i - x == z ==> i == y + z;\nloop invariant i - x == z ==> 0 <= y + z <= LARGE_INT;\nloop invariant i - x == z ==> 0 <= y + z == j;\nloop invariant i - x == z ==> i == j;\nloop invariant i - x == z ==> i - j == 0;\nloop invariant i - x == z ==> y == -z ==> i == j;\nloop invariant i - x == z ==> y == -z ==> j == i;\nloop invariant i - x == z ==> y == -z ==> 0 <= i <= LARGE_INT;\nloop invariant i - x == z ==> y == -z ==> 0 <= j;\nloop invariant i - x == z ==> y == -z ==> 0 <= z <= LARGE_INT;\nloop invariant i - x == z ==> y == -z ==> i - j <= z * 2;\nloop invariant i - x == z ==> y == -z ==> 0 <= x <= i;\nloop invariant i - x == z ==> y == -z ==> 0 <= y <= j - z * 2;\nloop invariant i - x == z ==> y == -z ==> i - x == z;\nloop invariant i - x == z ==> y == -z ==> j - y == z;\nloop invariant i - x == z ==> y == -z ==> i - x == z ==> y == -z;\nloop invariant i - x == z ==> y == -z ==> i - x == z ==> j == y + z;\nloop invariant i - x == z ==> y == -z ==> i - x == z ==> i == y + z;\nloop invariant i - x == z ==> y == -z ==> i - x == z ==> 0 <= y + z <= LARGE_INT;\nloop invariant i - x == z ==> y == -z ==> i - x == z ==> 0 <= y + z == j;\nloop invariant i - x == z ==> y == -z ==> i - x == z ==> i == j;\nloop invariant i - x == z ==> y == -z ==> i - x == z ==> i - j == 0;\nloop invariant i - x == z ==> y == -z ==> i - x == z ==> y == -z ==> i == j;\nloop invariant i - x == z ==> y == -z ==> i - x == z ==> y == -z ==> j == i;\nloop invariant i - x == z ==> y == -z ==> i - x == z ==> y == -z ==> 0 <= i <= LARGE_INT;\nloop invariant i - x == z ==> y == -z ==> i - x == z ==> y == -z ==> 0 <= j;\nloop invariant i - x == z ==> y == -z ==> i - x == z ==> y == -z ==> 0 <= z <= LARGE_INT;\nloop invariant i - x == z ==> y == -z ==> i - x == z ==> y == -z ==> i - j <= z * 2;\nloop invariant i - x == z ==> y == -z ==> i - x == z ==> y == -z ==> 0 <= x <= i;\nloop invariant i - x == z ==> y == -z ==> i - x == z ==> y == -z ==> 0 <= y <= j - z * 2;\nloop invariant i - x == z ==> y == -z ==> i - x == z ==> y == -z ==> i - x == z;\nloop invariant i - x == z ==> y == -z ==> i - x == z ==> y == -z ==> j - y == z;\nloop invariant i - x == z ==> y == -z ==> i - x == z ==> y == -z ==> i - x == z ==> y == -z;\nloop invariant i - x == z ==> y == -z ==> i - x == z ==> y == -z ==> i - x == z ==> j == y + z;\nloop invariant i - x == z ==> y == -z ==> i - x == z ==> y == -z ==> i - x == z ==> i == y + z;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant j >= 0;\nloop invariant x == i - j;\nloop invariant y == j;\nloop invariant z == 0;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= LARGE_INT;\nloop invariant 0 <= j;\nloop invariant 0 <= x <= i;\nloop invariant 0 <= y <= j;\nloop invariant z = i - x;\nloop invariant y = j - 2 * z;\nloop invariant if i == j, then y == -z;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= i;\nloop invariant 0 <= y <= j;\nloop invariant 0 <= z <= i;\nloop invariant x + y >= j;\nloop invariant x + y <= j + z * 2;\nloop invariant i - x <= z;\nloop invariant i - x >= z;\nloop invariant i - x >= i - j;\nloop invariant i - x <= i - j;\nloop invariant i - x >= -i + j;\nloop invariant i - x <= -i + j;\nloop invariant i - x >= -i;\nloop invariant i - x <= -i;\nloop invariant i - x >= i;\nloop invariant i - x <= i;\nloop invariant i - x >= 0;\nloop invariant i - x <= 0;\nloop invariant i - x >= -i;\nloop invariant i - x <= -i;\nloop invariant i - x >= -i - z;\nloop invariant i - x <= -i - z;\nloop invariant i - x >= -i + z;\nloop invariant i - x <= -i + z;\nloop invariant i - x >= -i + j - z;\nloop invariant i - x <= -i + j - z;\nloop invariant i - x >= -i - z + j;\nloop invariant i - x <= -i - z + j;\nloop invariant i - x >= -i + z + j;\nloop invariant i - x <= -i + z + j;\nloop invariant i - x >= -i + j - z + z;\nloop invariant i - x <= -i + j - z + z;\nloop invariant i - x >= -i - z + j + z;\nloop invariant i - x <= -i - z + j + z;\nloop invariant i - x >= -i + z + j - z;\nloop invariant i - x <= -i + z + j - z;\nloop invariant i - x >= -i + j - z + z - z;\nloop invariant i - x <= -i + j - z + z - z;\nloop invariant i - x >= -i - z + j + z - z;\nloop invariant i - x <= -i - z + j + z - z;\nloop invariant i - x >= -i + z + j - z + z - z;\nloop invariant i - x <= -i + z + j - z + z - z;\nloop invariant i - x >= -i + j - z + z - z + z;\nloop invariant i - x <= -i + j - z + z - z + z;\nloop invariant i - x >= -i - z + j + z - z + z;\nloop invariant i - x <= -i - z + j + z - z + z;\nloop invariant i - x >= -i + z + j - z + z - z + z;\nloop invariant i - x <= -i + z + j - z + z - z + z;\nloop invariant i - x >= -i + j - z + z - z + z - z;\nloop invariant i - x <= -i + j - z + z - z + z - z;\nloop invariant i - x >= -i - z + j + z - z + z - z;\nloop invariant i - x <= -i - z + j + z - z + z - z;\nloop invariant i - x >= -i + z + j - z + z - z + z - z;\nloop invariant i - x <= -i + z + j - z + z - z + z - z;\nloop invariant i - x >= -i + j - z + z - z + z - z + z;\nloop invariant i - x <= -i + j - z + z - z + z - z + z;\nloop invariant i - x >= -i - z + j + z - z + z - z + z;\nloop invariant i - x <= -i - z + j + z - z + z - z + z;\nloop invariant i - x >= -i + z + j - z + z - z + z - z + z;\nloop invariant i - x <= -i + z + j - z + z - z + z - z + z;\nloop invariant i - x >= -i + j - z + z - z + z - z + z - z;\nloop invariant i - x <= -i + j - z + z - z + z - z + z - z;\nloop invariant i - x >= -i - z + j + z - z + z - z + z - z;\nloop invariant i - x <= -i - z + j + z - z + z - z + z - z;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= j;\nloop invariant x >= 0;\nloop invariant x >= y;\nloop invariant y >= 0;\nloop invariant x < j;\nloop invariant y < j;\nloop invariant 0 <= y <= j;\nloop invariant x >= 0;\nloop invariant x >= y;\nloop invariant y >= 0;\nloop invariant x < j;\nloop invariant y < j;\nloop invariant i >= 0;\nloop invariant i <= LARGE_INT;\nloop invariant j >= 0;\nloop invariant (i != j ==> 0 <= y <= j);\nloop invariant (i != j ==> x >= 0);\nloop invariant (i != j ==> x >= y);\nloop invariant (i != j ==> y >= 0);\nloop invariant (i != j ==> x < j);\nloop invariant (i != j ==> y < j);\nloop invariant (i != j ==> i >= 0);\nloop invariant (i != j ==> i <= LARGE_INT);\nloop invariant (i != j ==> j >= 0);\n*/\n```",
            "```\n/*@\nloop invariant y + z = j;\nloop invariant 0 <= x <= i;\nloop invariant z <= j;\nloop invariant z >= 0;\nloop invariant (i == j ==> y == -z);\nloop invariant (i != j ==> y != -z);\nloop invariant (i == j ==> x == 0);\nloop invariant (i != j ==> x != 0);\nloop invariant (i == j ==> z == i);\nloop invariant (i != j ==> z != i);\nloop invariant (i == j ==> x == i);\nloop invariant (i != j ==> x != i);\nloop invariant (i == j ==> y == -i);\nloop invariant (i != j ==> y != -i);\nloop invariant (x == 0 ==> x == 0);\nloop invariant (x != 0 ==> x != 0);\nloop invariant (y == -z ==> y == -z);\nloop invariant (y != -z ==> y != -z);\nloop invariant (x == 0 ==> y == -z);\nloop invariant (x != 0 ==> y != -z);\nloop invariant (x == 0 ==> z == i);\nloop invariant (x != 0 ==> z != i);\nloop invariant (x == 0 ==> x == i);\nloop invariant (x != 0 ==> x != i);\nloop invariant (x == 0 ==> y == -i);\nloop invariant (x != 0 ==> y != -i);\nloop invariant (x == 0 ==> x == 0);\nloop invariant (x != 0 ==> x != 0);\nloop invariant (y == -z ==> y == -z);\nloop invariant (y != -z ==> y != -z);\nloop invariant (x == 0 ==> x == 0);\nloop invariant (x != 0 ==> x != 0);\nloop invariant (y == -z ==> y == -z);\nloop invariant (y != -z ==> y != -z);\nloop invariant (x == 0 ==> y == -z);\nloop invariant (x != 0 ==> y != -z);\nloop invariant (x == 0 ==> z == i);\nloop invariant (x != 0 ==> z != i);\nloop invariant (x == 0 ==> x == i);\nloop invariant (x != 0 ==> x != i);\nloop invariant (x == 0 ==> y == -i);\nloop invariant (x != 0 ==> y != -i);\nloop invariant (x == 0 ==> x == 0);\nloop invariant (x != 0 ==> x != 0);\nloop invariant (y == -z ==> y == -z);\nloop invariant (y != -z ==> y != -z);\nloop invariant (x == 0 ==> y == -z);\nloop invariant (x != 0 ==> y != -z);\nloop invariant (x == 0 ==> z == i);\nloop invariant (x != 0 ==> z != i);\nloop invariant (x == 0 ==> x == i);\nloop invariant (x != 0 ==> x != i);\nloop invariant (x == 0 ==> y == -i);\nloop invariant (x != 0 ==> y != -i);\nloop invariant (x == 0 ==> x == 0);\nloop invariant (x != 0 ==> x != 0);\nloop invariant (y == -z ==> y == -z);\nloop invariant (y != -z ==> y != -z);\nloop invariant (x == 0 ==> y == -z);\nloop invariant (x != 0 ==> y != -z);\nloop invariant (x == 0 ==> z == i);\nloop invariant (x != 0 ==> z != i);\nloop invariant (x == 0 ==> x == i);\nloop invariant (x != 0 ==> x != i);\nloop invariant (x == 0 ==> y == -i);\nloop invariant (x != 0 ==> y != -i);\nloop invariant (x == 0 ==> x == 0);\nloop invariant (x != 0 ==> x != 0);\nloop invariant (y == -z ==> y == -z);\nloop invariant (y != -z ==> y != -z);\nloop invariant (x == 0 ==> y == -z);\nloop invariant (x != 0 ==> y != -z);\nloop invariant (x == 0 ==> z == i);\nloop invariant (x != 0 ==> z != i);\nloop invariant (x == 0 ==> x == i);\nloop invariant (x != 0 ==> x != i);\nloop invariant (x == 0 ==> y == -i);\nloop invariant (x != 0 ==> y != -i);\nloop invariant (x == 0 ==> x == 0);\nloop invariant (x != 0 ==> x != 0);\nloop invariant (y == -z ==> y == -z);\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= i;\nloop invariant 0 <= y <= j;\nloop invariant 0 <= z <= i;\nloop invariant x >= (i - z);\nloop invariant y >= (j - (2 * z));\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant z <= i;\nloop invariant x == 0 ==> y == -z;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= i;\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 0 <= j <= LARGE_INT;\nloop invariant x >= 0;\nloop invariant z >= 0;\nloop invariant y >= -LARGE_INT;\nloop invariant y <= j - z * 2;\nloop invariant x - y >= i - j + z;\nloop invariant y == i - x - z * 2;\nloop invariant z >= j - y;\nloop invariant y == i - x - z * 2;\nloop invariant z == j - y;\n*/\n```",
            "```\n/*@\nloop invariant i >= 0 and i <= LARGE_INT;\nloop invariant j >= 0;\nloop invariant x >= 0;\nloop invariant y >= -LARGE_INT;\nloop invariant z >= 0;\nloop invariant x == i and y == j - 2*z and z >= (i - j + 1)/2;\nloop invariant (i == j ==> y == -z);\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 8,
                "annotations": "```\n/*@\nloop invariant 0 <= j <= LARGE_INT;\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant i >= j;\nloop invariant x + y == z;\nloop invariant x != 0 ==> x >= 0;\nloop invariant y != 0 ==> y >= 0;\nloop invariant x != 0 ==> x <= LARGE_INT;\nloop invariant y != 0 ==> y <= LARGE_INT;\nloop invariant x != 0 ==> i - x == j - y;\nloop invariant x != 0 ==> i == j + z;\nloop invariant x != 0 ==> y == j - z;\nloop invariant x != 0 ==> x + y == z;\nloop invariant x != 0 ==> x + (j - z) == z;\nloop invariant x != 0 ==> x + j - z == z;\nloop invariant x != 0 ==> x + j == 2 * z;\nloop invariant x != 0 ==> x == 2 * z - j;\nloop invariant x != 0 ==> x == 2 * (z - j / 2);\nloop invariant x != 0 ==> x == 2 * z - j;\nloop invariant x != 0 ==> x == 2 * z - j;\nloop invariant x != 0 ==> x == 2 * z - j;\nloop invariant x != 0 ==> x == 2 * z - j;\nloop invariant x != 0 ==> x == 2 * z - j;\nloop invariant x != 0 ==> x == 2 * z - j;\nloop invariant x != 0 ==> x == 2 * z - j;\nloop invariant x != 0 ==> x == 2 * z - j;\nloop invariant x != 0 ==> x == 2 * z - j;\nloop invariant x != 0 ==> x == 2 * z - j;\nloop invariant x != 0 ==> x == 2 * z - j;\nloop invariant x != 0 ==> x == 2 * z - j;\nloop invariant x != 0 ==> x == 2 * z - j;\nloop invariant x != 0 ==> x == 2 * z - j;\nloop invariant x != 0 ==> x == 2 * z - j;\nloop invariant x != 0 ==> x == 2 * z - j;\nloop invariant x != 0 ==> x == 2 * z - j;\nloop invariant x != 0 ==> x == 2 * z - j;\nloop invariant x != 0 ==> x == 2 * z - j;\nloop invariant x != 0 ==> x == 2 * z - j;\nloop invariant x != 0 ==> x == 2 * z - j;\nloop invariant x != 0 ==> x == 2 * z - j;\nloop invariant x != 0 ==> x == 2 * z - j;\nloop invariant x != 0 ==> x == 2 * z - j;\nloop invariant x != 0 ==> x == 2 * z - j;\nloop invariant x != 0 ==> x == 2 * z - j;\nloop invariant x != 0 ==> x == 2 * z - j;\nloop invariant x != 0 ==> x == 2 * z - j;\nloop invariant x != 0 ==> x == 2 * z - j;\nloop invariant x != 0 ==> x == 2 * z - j;\nloop invariant x != 0 ==> x == 2 * z - j;\nloop invariant x != 0 ==> x == 2 * z - j;\nloop invariant x != 0 ==> x == 2 * z - j;\nloop invariant x != 0 ==> x == 2 * z - j;\nloop invariant x != 0 ==> x == 2 * z - j;\nloop invariant x != 0 ==> x == 2 * z - j;\nloop invariant x != 0 ==> x == 2 * z - j;\nloop invariant x != 0 ==> x == 2 * z - j;\nloop invariant x != 0 ==> x == 2 * z - j;\nloop invariant x != 0 ==> x == 2 * z - j;\nloop invariant x != 0 ==> x == 2 * z - j;\nloop invariant x != 0 ==> x == 2 * z - j;\nloop invariant x != 0 ==> x == 2 * z - j;\nloop invariant x != 0 ==> x == 2 * z - j;\nloop invariant x != 0 ==> x == 2 * z - j;\nloop invariant x != 0 ==> x == 2 * z - j;\nloop invariant x != 0 ==> x == 2 * z - j;\nloop invariant x != 0 ==> x == 2 * z - j;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n\n    if (!(i >= 0 && i <= LARGE_INT)) return 0;\n    if (!(j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    int z = 0;\n    /*@\n\nloop invariant i2: 0 <= i <= LARGE_INT;\n\n\nloop invariant i5: x != 0 ==> x >= 0;\n\nloop invariant i7: x != 0 ==> x <= LARGE_INT;\n\n\n\n\n\n\n\n\n\n\n*/\nwhile(x != 0) {\n        x --;\n        y -= 2;\n        z ++;\n    }\n    if (i == j) {\n        {;\n//@ assert(y == -z);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= LARGE_INT;\nloop invariant 0 <= y;\nloop invariant 0 <= z;\nloop invariant y == 2 * z + j;\nloop invariant x == i;\nloop invariant i >= 0;\nloop invariant i <= LARGE_INT;\nloop invariant j >= 0;\nloop invariant i >= j;\nloop invariant j >= -z;\nloop invariant z >= 0;\nloop invariant i != 0 ==> x != 0;\nloop invariant i != 0 ==> y != -z;\nloop invariant i != 0 ==> z != i;\nloop invariant i != 0 ==> j != -z;\nloop invariant i != 0 ==> y != -z + 2;\nloop invariant i != 0 ==> x != i - 1;\nloop invariant i != 0 ==> z != i - 1;\nloop invariant i != 0 ==> y != -z + 2;\nloop invariant i != 0 ==> x != i - 1;\nloop invariant i != 0 ==> z != i - 1;\nloop invariant i != 0 ==> y != -z + 2;\nloop invariant i != 0 ==> x != i - 1;\nloop invariant i != 0 ==> z != i - 1;\nloop invariant i != 0 ==> y != -z + 2;\nloop invariant i != 0 ==> x != i - 1;\nloop invariant i != 0 ==> z != i - 1;\nloop invariant i != 0 ==> y != -z + 2;\nloop invariant i != 0 ==> x != i - 1;\nloop invariant i != 0 ==> z != i - 1;\nloop invariant i != 0 ==> y != -z + 2;\nloop invariant i != 0 ==> x != i - 1;\nloop invariant i != 0 ==> z != i - 1;\nloop invariant i != 0 ==> y != -z + 2;\nloop invariant i != 0 ==> x != i - 1;\nloop invariant i != 0 ==> z != i - 1;\nloop invariant i != 0 ==> y != -z + 2;\nloop invariant i != 0 ==> x != i - 1;\nloop invariant i != 0 ==> z != i - 1;\nloop invariant i != 0 ==> y != -z + 2;\nloop invariant i != 0 ==> x != i - 1;\nloop invariant i != 0 ==> z != i - 1;\nloop invariant i != 0 ==> y != -z + 2;\nloop invariant i != 0 ==> x != i - 1;\nloop invariant i != 0 ==> z != i - 1;\nloop invariant i != 0 ==> y != -z + 2;\nloop invariant i != 0 ==> x != i - 1;\nloop invariant i != 0 ==> z != i - 1;\nloop invariant i != 0 ==> y != -z + 2;\nloop invariant i != 0 ==> x != i - 1;\nloop invariant i != 0 ==> z != i - 1;\nloop invariant i != 0 ==> y != -z + 2;\nloop invariant i != 0 ==> x != i - 1;\nloop invariant i != 0 ==> z != i - 1;\nloop invariant i != 0 ==> y != -z + 2;\nloop invariant i != 0 ==> x != i - 1;\nloop invariant i != 0 ==> z != i - 1;\nloop invariant i != 0 ==> y != -z + 2;\nloop invariant i != 0 ==> x != i - 1;\nloop invariant i != 0 ==> z != i - 1;\nloop invariant i != 0 ==> y != -z + 2;\nloop invariant i != 0 ==> x != i - 1;\nloop invariant i != 0 ==> z != i - 1;\nloop invariant i != 0 ==> y != -z + 2;\nloop invariant i != 0 ==> x != i - 1;\nloop invariant i != 0 ==> z != i - 1;\nloop invariant i != 0 ==> y != -z + 2;\nloop invariant i != 0 ==> x != i - 1;\nloop invariant i != 0 ==> z != i - 1;\nloop invariant i != 0 ==> y != -z + 2;\nloop invariant i != 0 ==> x != i - 1;\nloop invariant i != 0 ==> z != i - 1;\nloop invariant i != 0 ==> y != -z + 2;\nloop invariant i != 0 ==> x != i - 1;\nloop invariant i != 0 ==> z != i - 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n\n    if (!(i >= 0 && i <= LARGE_INT)) return 0;\n    if (!(j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    int z = 0;\n    /*@\nloop invariant i1: 0 <= x <= LARGE_INT;\n\nloop invariant i3: 0 <= z;\n\n\nloop invariant i6: i >= 0;\nloop invariant i7: i <= LARGE_INT;\nloop invariant i8: j >= 0;\n\nloop invariant i10: j >= -z;\nloop invariant i11: z >= 0;\n\n\n\n\n\n\n\n*/\nwhile(x != 0) {\n        x --;\n        y -= 2;\n        z ++;\n    }\n    if (i == j) {\n        {;\n//@ assert(y == -z);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= i;\nloop invariant 0 <= y <= j;\nloop invariant 0 <= z <= (j - i);\nloop invariant x >= (i - z);\nloop invariant y >= (j - 2 * z);\nloop invariant x * y == (i * j - 2 * i * z + z * y);\nloop invariant x + y == i + j - 2 * z;\nloop invariant x - y == z;\nloop invariant x * y == (i * j - 2 * i * z + z * y);\nloop invariant x + y == i + j - 2 * z;\nloop invariant x - y == z;\nloop invariant x * y == (i * j - 2 * i * z + z * y);\nloop invariant x + y == i + j - 2 * z;\nloop invariant x - y == z;\nloop invariant x * y == (i * j - 2 * i * z + z * y);\nloop invariant x + y == i + j - 2 * z;\nloop invariant x - y == z;\nloop invariant x * y == (i * j - 2 * i * z + z * y);\nloop invariant x + y == i + j - 2 * z;\nloop invariant x - y == z;\nloop invariant x * y == (i * j - 2 * i * z + z * y);\nloop invariant x + y == i + j - 2 * z;\nloop invariant x - y == z;\nloop invariant x * y == (i * j - 2 * i * z + z * y);\nloop invariant x + y == i + j - 2 * z;\nloop invariant x - y == z;\nloop invariant x * y == (i * j - 2 * i * z + z * y);\nloop invariant x + y == i + j - 2 * z;\nloop invariant x - y == z;\nloop invariant x * y == (i * j - 2 * i * z + z * y);\nloop invariant x + y == i + j - 2 * z;\nloop invariant x - y == z;\nloop invariant x * y == (i * j - 2 * i * z + z * y);\nloop invariant x + y == i + j - 2 * z;\nloop invariant x - y == z;\nloop invariant x * y == (i * j - 2 * i * z + z * y);\nloop invariant x + y == i + j - 2 * z;\nloop invariant x - y == z;\nloop invariant x * y == (i * j - 2 * i * z + z * y);\nloop invariant x + y == i + j - 2 * z;\nloop invariant x - y == z;\nloop invariant x * y == (i * j - 2 * i * z + z * y);\nloop invariant x + y == i + j - 2 * z;\nloop invariant x - y == z;\nloop invariant x * y == (i * j - 2 * i * z + z * y);\nloop invariant x + y == i + j - 2 * z;\nloop invariant x - y == z;\nloop invariant x * y == (i * j - 2 * i * z + z * y);\nloop invariant x + y == i + j - 2 * z;\nloop invariant x - y == z;\nloop invariant x * y == (i * j - 2 * i * z + z * y);\nloop invariant x + y == i + j - 2 * z;\nloop invariant x - y == z;\nloop invariant x * y == (i * j - 2 * i * z + z * y);\nloop invariant x + y == i + j - 2 * z;\nloop invariant x - y == z;\nloop invariant x * y == (i * j - 2 * i * z + z * y);\nloop invariant x + y == i + j - 2 * z;\nloop invariant x - y == z;\nloop invariant x * y == (i * j - 2 * i * z + z * y);\nloop invariant x + y == i + j - 2 * z;\nloop invariant x - y == z;\nloop invariant x * y == (i * j - 2 * i * z + z * y);\nloop invariant x + y == i + j - 2 * z;\nloop invariant x - y == z;\nloop invariant x * y == (i * j - 2 * i * z + z * y);\nloop invariant x + y == i + j - 2 * z;\nloop invariant x - y == z;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n\n    if (!(i >= 0 && i <= LARGE_INT)) return 0;\n    if (!(j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    int z = 0;\n    /*@\nloop invariant i1: 0 <= x <= i;\n\n\nloop invariant i4: x >= (i - z);\nloop invariant i5: y >= (j - 2 * z);\n\n\n\n*/\nwhile(x != 0) {\n        x --;\n        y -= 2;\n        z ++;\n    }\n    if (i == j) {\n        {;\n//@ assert(y == -z);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= i;\nloop invariant z == j - y;\nloop invariant x == i - j + y;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i <= LARGE_INT;\nloop invariant y >= 0;\nloop invariant y <= i;\nloop invariant z == j - y;\nloop invariant x == i - j + y;\nloop invariant i >= j;\nloop invariant x >= j;\nloop invariant x <= i;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i <= LARGE_INT;\nloop invariant y >= 0;\nloop invariant y <= i;\nloop invariant z == j - y;\nloop invariant x == i - j + y;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i <= LARGE_INT;\nloop invariant y >= 0;\nloop invariant y <= i;\nloop invariant z == j - y;\nloop invariant x == i - j + y;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i <= LARGE_INT;\nloop invariant y >= 0;\nloop invariant y <= i;\nloop invariant z == j - y;\nloop invariant x == i - j + y;\nloop invariant i >= j;\nloop invariant x >= j;\nloop invariant x <= i;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i <= LARGE_INT;\nloop invariant y >= 0;\nloop invariant y <= i;\nloop invariant z == j - y;\nloop invariant x == i - j + y;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i <= LARGE_INT;\nloop invariant y >= 0;\nloop invariant y <= i;\nloop invariant z == j - y;\nloop invariant x == i - j + y;\nloop invariant i >= j;\nloop invariant x >= j;\nloop invariant x <= i;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i <= LARGE_INT;\nloop invariant y >= 0;\nloop invariant y <= i;\nloop invariant z == j - y;\nloop invariant x == i - j + y;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i <= LARGE_INT;\nloop invariant y >= 0;\nloop invariant y <= i;\nloop invariant z == j - y;\nloop invariant x == i - j + y;\nloop invariant i >= j;\nloop invariant x >= j;\nloop invariant x <= i;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i <= LARGE_INT;\nloop invariant y >= 0;\nloop invariant y <= i;\nloop invariant z == j - y;\nloop invariant x == i - j + y;\nloop invariant i >= j;\nloop invariant x >= j;\nloop invariant x <= i;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i <= LARGE_INT;\nloop invariant y >= 0;\nloop invariant y <= i;\nloop invariant z == j - y;\nloop invariant x == i - j + y;\nloop invariant i >= j;\nloop invariant x >= j;\nloop invariant x <= i;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i <= LARGE_INT;\nloop invariant y >= 0;\nloop invariant y <= i;\nloop invariant z == j - y;\nloop invariant x == i - j + y;\nloop invariant i >= j;\nloop invariant x >= j;\nloop invariant x <= i;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i <= LARGE_INT;\nloop invariant y >= 0;\nloop invariant y <= i;\nloop invariant z == j - y;\nloop invariant x == i - j + y;\nloop invariant i >= j;\nloop invariant x >= j;\nloop invariant x <= i;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i <= LARGE_INT;\nloop invariant y >= 0;\nloop invariant y <= i;\nloop invariant z == j - y;\nloop invariant x == i - j + y;\nloop invariant i >= j;\nloop invariant x >= j;\nloop invariant x <= i;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i <= LARGE_INT;\nloop invariant y >= 0;\nloop invariant y <= i;\nloop invariant z == j - y;\nloop invariant x == i - j + y;\nloop invariant i >= j;\nloop invariant x >= j;\nloop invariant x <= i;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i <= LARGE_INT;\nloop invariant y >= 0;\nloop invariant y <= i;\nloop invariant z == j - y;\nloop invariant x == i - j + y;\nloop invariant i >= j;\nloop invariant x >= j;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n\n    if (!(i >= 0 && i <= LARGE_INT)) return 0;\n    if (!(j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    int z = 0;\n    /*@\n\n\n\nloop invariant i4: i >= 0;\nloop invariant i5: j >= 0;\nloop invariant i6: i <= LARGE_INT;\n\n\n\n\nloop invariant i11: x <= i;\n*/\nwhile(x != 0) {\n        x --;\n        y -= 2;\n        z ++;\n    }\n    if (i == j) {\n        {;\n//@ assert(y == -z);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant i >= 0 && i <= LARGE_INT;\nloop invariant j >= 0;\nloop invariant z >= 0;\nloop invariant z <= i;\nloop invariant y >= -z;\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant i >= 0 && i <= LARGE_INT;\nloop invariant j >= 0;\nloop invariant z >= 0;\nloop invariant z <= i;\nloop invariant y >= -z;\nloop invariant (i == j ==> y == -z);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n\n    if (!(i >= 0 && i <= LARGE_INT)) return 0;\n    if (!(j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    int z = 0;\n    /*@\n\n\nloop invariant i3: i >= 0 && i <= LARGE_INT;\nloop invariant i4: j >= 0;\nloop invariant i5: z >= 0;\n\n\n\n*/\nwhile(x != 0) {\n        x --;\n        y -= 2;\n        z ++;\n    }\n    if (i == j) {\n        {;\n//@ assert(y == -z);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y ==> x >= (j + y);\nloop invariant z == (i - x);\nloop invariant 0 <= x ==> (x - 1) <= i;\nloop invariant 0 <= x ==> 0 <= y;\nloop invariant 0 <= x ==> 0 <= z;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n\n    if (!(i >= 0 && i <= LARGE_INT)) return 0;\n    if (!(j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    int z = 0;\n    /*@\n\nloop invariant i2: z == (i - x);\nloop invariant i3: 0 <= x ==> (x - 1) <= i;\n\nloop invariant i5: 0 <= x ==> 0 <= z;\n*/\nwhile(x != 0) {\n        x --;\n        y -= 2;\n        z ++;\n    }\n    if (i == j) {\n        {;\n//@ assert(y == -z);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 13,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 0 <= j;\nloop invariant 0 <= z <= LARGE_INT;\nloop invariant i - j <= z * 2;\nloop invariant 0 <= x <= i;\nloop invariant 0 <= y <= j - z * 2;\nloop invariant i - x == z;\nloop invariant j - y == z;\nloop invariant i - x == z ==> y == -z;\nloop invariant i - x == z ==> j == y + z;\nloop invariant i - x == z ==> i == y + z;\nloop invariant i - x == z ==> 0 <= y + z <= LARGE_INT;\nloop invariant i - x == z ==> 0 <= y + z == j;\nloop invariant i - x == z ==> i == j;\nloop invariant i - x == z ==> i - j == 0;\nloop invariant i - x == z ==> y == -z ==> i == j;\nloop invariant i - x == z ==> y == -z ==> j == i;\nloop invariant i - x == z ==> y == -z ==> 0 <= i <= LARGE_INT;\nloop invariant i - x == z ==> y == -z ==> 0 <= j;\nloop invariant i - x == z ==> y == -z ==> 0 <= z <= LARGE_INT;\nloop invariant i - x == z ==> y == -z ==> i - j <= z * 2;\nloop invariant i - x == z ==> y == -z ==> 0 <= x <= i;\nloop invariant i - x == z ==> y == -z ==> 0 <= y <= j - z * 2;\nloop invariant i - x == z ==> y == -z ==> i - x == z;\nloop invariant i - x == z ==> y == -z ==> j - y == z;\nloop invariant i - x == z ==> y == -z ==> i - x == z ==> y == -z;\nloop invariant i - x == z ==> y == -z ==> i - x == z ==> j == y + z;\nloop invariant i - x == z ==> y == -z ==> i - x == z ==> i == y + z;\nloop invariant i - x == z ==> y == -z ==> i - x == z ==> 0 <= y + z <= LARGE_INT;\nloop invariant i - x == z ==> y == -z ==> i - x == z ==> 0 <= y + z == j;\nloop invariant i - x == z ==> y == -z ==> i - x == z ==> i == j;\nloop invariant i - x == z ==> y == -z ==> i - x == z ==> i - j == 0;\nloop invariant i - x == z ==> y == -z ==> i - x == z ==> y == -z ==> i == j;\nloop invariant i - x == z ==> y == -z ==> i - x == z ==> y == -z ==> j == i;\nloop invariant i - x == z ==> y == -z ==> i - x == z ==> y == -z ==> 0 <= i <= LARGE_INT;\nloop invariant i - x == z ==> y == -z ==> i - x == z ==> y == -z ==> 0 <= j;\nloop invariant i - x == z ==> y == -z ==> i - x == z ==> y == -z ==> 0 <= z <= LARGE_INT;\nloop invariant i - x == z ==> y == -z ==> i - x == z ==> y == -z ==> i - j <= z * 2;\nloop invariant i - x == z ==> y == -z ==> i - x == z ==> y == -z ==> 0 <= x <= i;\nloop invariant i - x == z ==> y == -z ==> i - x == z ==> y == -z ==> 0 <= y <= j - z * 2;\nloop invariant i - x == z ==> y == -z ==> i - x == z ==> y == -z ==> i - x == z;\nloop invariant i - x == z ==> y == -z ==> i - x == z ==> y == -z ==> j - y == z;\nloop invariant i - x == z ==> y == -z ==> i - x == z ==> y == -z ==> i - x == z ==> y == -z;\nloop invariant i - x == z ==> y == -z ==> i - x == z ==> y == -z ==> i - x == z ==> j == y + z;\nloop invariant i - x == z ==> y == -z ==> i - x == z ==> y == -z ==> i - x == z ==> i == y + z;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n\n    if (!(i >= 0 && i <= LARGE_INT)) return 0;\n    if (!(j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    int z = 0;\n    /*@\nloop invariant i1: 0 <= i <= LARGE_INT;\nloop invariant i2: 0 <= j;\nloop invariant i3: 0 <= z <= LARGE_INT;\n\nloop invariant i5: 0 <= x <= i;\n\nloop invariant i7: i - x == z;\n\n\n\n\n\n\n\n\n\n\nloop invariant i18: i - x == z ==> y == -z ==> 0 <= i <= LARGE_INT;\nloop invariant i19: i - x == z ==> y == -z ==> 0 <= j;\nloop invariant i20: i - x == z ==> y == -z ==> 0 <= z <= LARGE_INT;\n\nloop invariant i22: i - x == z ==> y == -z ==> 0 <= x <= i;\n\nloop invariant i24: i - x == z ==> y == -z ==> i - x == z;\n\nloop invariant i26: i - x == z ==> y == -z ==> i - x == z ==> y == -z;\n\n\nloop invariant i29: i - x == z ==> y == -z ==> i - x == z ==> 0 <= y + z <= LARGE_INT;\n\n\n\n\n\nloop invariant i35: i - x == z ==> y == -z ==> i - x == z ==> y == -z ==> 0 <= i <= LARGE_INT;\nloop invariant i36: i - x == z ==> y == -z ==> i - x == z ==> y == -z ==> 0 <= j;\nloop invariant i37: i - x == z ==> y == -z ==> i - x == z ==> y == -z ==> 0 <= z <= LARGE_INT;\n\nloop invariant i39: i - x == z ==> y == -z ==> i - x == z ==> y == -z ==> 0 <= x <= i;\n\nloop invariant i41: i - x == z ==> y == -z ==> i - x == z ==> y == -z ==> i - x == z;\n\nloop invariant i43: i - x == z ==> y == -z ==> i - x == z ==> y == -z ==> i - x == z ==> y == -z;\n\n\n*/\nwhile(x != 0) {\n        x --;\n        y -= 2;\n        z ++;\n    }\n    if (i == j) {\n        {;\n//@ assert(y == -z);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant j >= 0;\nloop invariant x == i - j;\nloop invariant y == j;\nloop invariant z == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n\n    if (!(i >= 0 && i <= LARGE_INT)) return 0;\n    if (!(j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    int z = 0;\n    /*@\nloop invariant i1: 0 <= i <= LARGE_INT;\nloop invariant i2: j >= 0;\n\n\n\n*/\nwhile(x != 0) {\n        x --;\n        y -= 2;\n        z ++;\n    }\n    if (i == j) {\n        {;\n//@ assert(y == -z);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= LARGE_INT;\nloop invariant 0 <= j;\nloop invariant 0 <= x <= i;\nloop invariant 0 <= y <= j;\nloop invariant z = i - x;\nloop invariant y = j - 2 * z;\nloop invariant if i == j, then y == -z;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n\n    if (!(i >= 0 && i <= LARGE_INT)) return 0;\n    if (!(j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    int z = 0;\n    /*@\n\nloop invariant i2: 0 <= j;\nloop invariant i3: 0 <= x <= i;\n\n\n\n\n*/\nwhile(x != 0) {\n        x --;\n        y -= 2;\n        z ++;\n    }\n    if (i == j) {\n        {;\n//@ assert(y == -z);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 23,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= i;\nloop invariant 0 <= y <= j;\nloop invariant 0 <= z <= i;\nloop invariant x + y >= j;\nloop invariant x + y <= j + z * 2;\nloop invariant i - x <= z;\nloop invariant i - x >= z;\nloop invariant i - x >= i - j;\nloop invariant i - x <= i - j;\nloop invariant i - x >= -i + j;\nloop invariant i - x <= -i + j;\nloop invariant i - x >= -i;\nloop invariant i - x <= -i;\nloop invariant i - x >= i;\nloop invariant i - x <= i;\nloop invariant i - x >= 0;\nloop invariant i - x <= 0;\nloop invariant i - x >= -i;\nloop invariant i - x <= -i;\nloop invariant i - x >= -i - z;\nloop invariant i - x <= -i - z;\nloop invariant i - x >= -i + z;\nloop invariant i - x <= -i + z;\nloop invariant i - x >= -i + j - z;\nloop invariant i - x <= -i + j - z;\nloop invariant i - x >= -i - z + j;\nloop invariant i - x <= -i - z + j;\nloop invariant i - x >= -i + z + j;\nloop invariant i - x <= -i + z + j;\nloop invariant i - x >= -i + j - z + z;\nloop invariant i - x <= -i + j - z + z;\nloop invariant i - x >= -i - z + j + z;\nloop invariant i - x <= -i - z + j + z;\nloop invariant i - x >= -i + z + j - z;\nloop invariant i - x <= -i + z + j - z;\nloop invariant i - x >= -i + j - z + z - z;\nloop invariant i - x <= -i + j - z + z - z;\nloop invariant i - x >= -i - z + j + z - z;\nloop invariant i - x <= -i - z + j + z - z;\nloop invariant i - x >= -i + z + j - z + z - z;\nloop invariant i - x <= -i + z + j - z + z - z;\nloop invariant i - x >= -i + j - z + z - z + z;\nloop invariant i - x <= -i + j - z + z - z + z;\nloop invariant i - x >= -i - z + j + z - z + z;\nloop invariant i - x <= -i - z + j + z - z + z;\nloop invariant i - x >= -i + z + j - z + z - z + z;\nloop invariant i - x <= -i + z + j - z + z - z + z;\nloop invariant i - x >= -i + j - z + z - z + z - z;\nloop invariant i - x <= -i + j - z + z - z + z - z;\nloop invariant i - x >= -i - z + j + z - z + z - z;\nloop invariant i - x <= -i - z + j + z - z + z - z;\nloop invariant i - x >= -i + z + j - z + z - z + z - z;\nloop invariant i - x <= -i + z + j - z + z - z + z - z;\nloop invariant i - x >= -i + j - z + z - z + z - z + z;\nloop invariant i - x <= -i + j - z + z - z + z - z + z;\nloop invariant i - x >= -i - z + j + z - z + z - z + z;\nloop invariant i - x <= -i - z + j + z - z + z - z + z;\nloop invariant i - x >= -i + z + j - z + z - z + z - z + z;\nloop invariant i - x <= -i + z + j - z + z - z + z - z + z;\nloop invariant i - x >= -i + j - z + z - z + z - z + z - z;\nloop invariant i - x <= -i + j - z + z - z + z - z + z - z;\nloop invariant i - x >= -i - z + j + z - z + z - z + z - z;\nloop invariant i - x <= -i - z + j + z - z + z - z + z - z;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n\n    if (!(i >= 0 && i <= LARGE_INT)) return 0;\n    if (!(j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    int z = 0;\n    /*@\nloop invariant i1: 0 <= x <= i;\n\nloop invariant i3: 0 <= z <= i;\n\n\nloop invariant i6: i - x <= z;\nloop invariant i7: i - x >= z;\n\n\n\n\nloop invariant i12: i - x >= -i;\n\n\nloop invariant i15: i - x <= i;\nloop invariant i16: i - x >= 0;\n\nloop invariant i18: i - x >= -i - z;\n\nloop invariant i20: i - x >= -i + z;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile(x != 0) {\n        x --;\n        y -= 2;\n        z ++;\n    }\n    if (i == j) {\n        {;\n//@ assert(y == -z);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= j;\nloop invariant x >= 0;\nloop invariant x >= y;\nloop invariant y >= 0;\nloop invariant x < j;\nloop invariant y < j;\nloop invariant 0 <= y <= j;\nloop invariant x >= 0;\nloop invariant x >= y;\nloop invariant y >= 0;\nloop invariant x < j;\nloop invariant y < j;\nloop invariant i >= 0;\nloop invariant i <= LARGE_INT;\nloop invariant j >= 0;\nloop invariant (i != j ==> 0 <= y <= j);\nloop invariant (i != j ==> x >= 0);\nloop invariant (i != j ==> x >= y);\nloop invariant (i != j ==> y >= 0);\nloop invariant (i != j ==> x < j);\nloop invariant (i != j ==> y < j);\nloop invariant (i != j ==> i >= 0);\nloop invariant (i != j ==> i <= LARGE_INT);\nloop invariant (i != j ==> j >= 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n\n    if (!(i >= 0 && i <= LARGE_INT)) return 0;\n    if (!(j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    int z = 0;\n    /*@\n\nloop invariant i2: x >= 0;\n\n\n\n\nloop invariant i7: i >= 0;\nloop invariant i8: i <= LARGE_INT;\nloop invariant i9: j >= 0;\n\nloop invariant i11: (i != j ==> x >= 0);\n\n\n\n\nloop invariant i16: (i != j ==> i >= 0);\nloop invariant i17: (i != j ==> i <= LARGE_INT);\nloop invariant i18: (i != j ==> j >= 0);\n*/\nwhile(x != 0) {\n        x --;\n        y -= 2;\n        z ++;\n    }\n    if (i == j) {\n        {;\n//@ assert(y == -z);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant y + z = j;\nloop invariant 0 <= x <= i;\nloop invariant z <= j;\nloop invariant z >= 0;\nloop invariant (i == j ==> y == -z);\nloop invariant (i != j ==> y != -z);\nloop invariant (i == j ==> x == 0);\nloop invariant (i != j ==> x != 0);\nloop invariant (i == j ==> z == i);\nloop invariant (i != j ==> z != i);\nloop invariant (i == j ==> x == i);\nloop invariant (i != j ==> x != i);\nloop invariant (i == j ==> y == -i);\nloop invariant (i != j ==> y != -i);\nloop invariant (x == 0 ==> x == 0);\nloop invariant (x != 0 ==> x != 0);\nloop invariant (y == -z ==> y == -z);\nloop invariant (y != -z ==> y != -z);\nloop invariant (x == 0 ==> y == -z);\nloop invariant (x != 0 ==> y != -z);\nloop invariant (x == 0 ==> z == i);\nloop invariant (x != 0 ==> z != i);\nloop invariant (x == 0 ==> x == i);\nloop invariant (x != 0 ==> x != i);\nloop invariant (x == 0 ==> y == -i);\nloop invariant (x != 0 ==> y != -i);\nloop invariant (x == 0 ==> x == 0);\nloop invariant (x != 0 ==> x != 0);\nloop invariant (y == -z ==> y == -z);\nloop invariant (y != -z ==> y != -z);\nloop invariant (x == 0 ==> x == 0);\nloop invariant (x != 0 ==> x != 0);\nloop invariant (y == -z ==> y == -z);\nloop invariant (y != -z ==> y != -z);\nloop invariant (x == 0 ==> y == -z);\nloop invariant (x != 0 ==> y != -z);\nloop invariant (x == 0 ==> z == i);\nloop invariant (x != 0 ==> z != i);\nloop invariant (x == 0 ==> x == i);\nloop invariant (x != 0 ==> x != i);\nloop invariant (x == 0 ==> y == -i);\nloop invariant (x != 0 ==> y != -i);\nloop invariant (x == 0 ==> x == 0);\nloop invariant (x != 0 ==> x != 0);\nloop invariant (y == -z ==> y == -z);\nloop invariant (y != -z ==> y != -z);\nloop invariant (x == 0 ==> y == -z);\nloop invariant (x != 0 ==> y != -z);\nloop invariant (x == 0 ==> z == i);\nloop invariant (x != 0 ==> z != i);\nloop invariant (x == 0 ==> x == i);\nloop invariant (x != 0 ==> x != i);\nloop invariant (x == 0 ==> y == -i);\nloop invariant (x != 0 ==> y != -i);\nloop invariant (x == 0 ==> x == 0);\nloop invariant (x != 0 ==> x != 0);\nloop invariant (y == -z ==> y == -z);\nloop invariant (y != -z ==> y != -z);\nloop invariant (x == 0 ==> y == -z);\nloop invariant (x != 0 ==> y != -z);\nloop invariant (x == 0 ==> z == i);\nloop invariant (x != 0 ==> z != i);\nloop invariant (x == 0 ==> x == i);\nloop invariant (x != 0 ==> x != i);\nloop invariant (x == 0 ==> y == -i);\nloop invariant (x != 0 ==> y != -i);\nloop invariant (x == 0 ==> x == 0);\nloop invariant (x != 0 ==> x != 0);\nloop invariant (y == -z ==> y == -z);\nloop invariant (y != -z ==> y != -z);\nloop invariant (x == 0 ==> y == -z);\nloop invariant (x != 0 ==> y != -z);\nloop invariant (x == 0 ==> z == i);\nloop invariant (x != 0 ==> z != i);\nloop invariant (x == 0 ==> x == i);\nloop invariant (x != 0 ==> x != i);\nloop invariant (x == 0 ==> y == -i);\nloop invariant (x != 0 ==> y != -i);\nloop invariant (x == 0 ==> x == 0);\nloop invariant (x != 0 ==> x != 0);\nloop invariant (y == -z ==> y == -z);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n\n    if (!(i >= 0 && i <= LARGE_INT)) return 0;\n    if (!(j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    int z = 0;\n    /*@\n\nloop invariant i2: 0 <= x <= i;\n\nloop invariant i4: z >= 0;\n\n\n\n\n\n\n\n\n\n\nloop invariant i15: (x == 0 ==> x == 0);\nloop invariant i16: (x != 0 ==> x != 0);\nloop invariant i17: (y == -z ==> y == -z);\nloop invariant i18: (y != -z ==> y != -z);\n\n\n\n\n\n\n\n\n*/\nwhile(x != 0) {\n        x --;\n        y -= 2;\n        z ++;\n    }\n    if (i == j) {\n        {;\n//@ assert(y == -z);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= i;\nloop invariant 0 <= y <= j;\nloop invariant 0 <= z <= i;\nloop invariant x >= (i - z);\nloop invariant y >= (j - (2 * z));\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant z <= i;\nloop invariant x == 0 ==> y == -z;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n\n    if (!(i >= 0 && i <= LARGE_INT)) return 0;\n    if (!(j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    int z = 0;\n    /*@\n\n\n\nloop invariant i4: x >= (i - z);\nloop invariant i5: y >= (j - (2 * z));\nloop invariant i6: x >= 0;\n\nloop invariant i8: z >= 0;\nloop invariant i9: x <= i;\nloop invariant i10: y <= j;\n\n\n*/\nwhile(x != 0) {\n        x --;\n        y -= 2;\n        z ++;\n    }\n    if (i == j) {\n        {;\n//@ assert(y == -z);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= i;\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 0 <= j <= LARGE_INT;\nloop invariant x >= 0;\nloop invariant z >= 0;\nloop invariant y >= -LARGE_INT;\nloop invariant y <= j - z * 2;\nloop invariant x - y >= i - j + z;\nloop invariant y == i - x - z * 2;\nloop invariant z >= j - y;\nloop invariant y == i - x - z * 2;\nloop invariant z == j - y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n\n    if (!(i >= 0 && i <= LARGE_INT)) return 0;\n    if (!(j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    int z = 0;\n    /*@\nloop invariant i1: 0 <= x <= i;\nloop invariant i2: 0 <= i <= LARGE_INT;\n\nloop invariant i4: x >= 0;\nloop invariant i5: z >= 0;\n\nloop invariant i7: y <= j - z * 2;\nloop invariant i8: x - y >= i - j + z;\n\n\n\n*/\nwhile(x != 0) {\n        x --;\n        y -= 2;\n        z ++;\n    }\n    if (i == j) {\n        {;\n//@ assert(y == -z);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant i >= 0 and i <= LARGE_INT;\nloop invariant j >= 0;\nloop invariant x >= 0;\nloop invariant y >= -LARGE_INT;\nloop invariant z >= 0;\nloop invariant x == i and y == j - 2*z and z >= (i - j + 1)/2;\nloop invariant (i == j ==> y == -z);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n\n    if (!(i >= 0 && i <= LARGE_INT)) return 0;\n    if (!(j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    int z = 0;\n    /*@\n\nloop invariant i2: j >= 0;\nloop invariant i3: x >= 0;\n\nloop invariant i5: z >= 0;\n\n\n*/\nwhile(x != 0) {\n        x --;\n        y -= 2;\n        z ++;\n    }\n    if (i == j) {\n        {;\n//@ assert(y == -z);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 129: Assignment operators not allowed in annotations.",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n\n    if (!(i >= 0 && i <= LARGE_INT)) return 0;\n    if (!(j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    int z = 0;\n    /*@\nloop invariant i1: 0 <= j <= LARGE_INT;\nloop invariant i2: 0 <= i <= LARGE_INT;\nloop invariant i3: i >= j;\nloop invariant i4: x + y == z;\nloop invariant i5: x != 0 ==> x >= 0;\nloop invariant i6: y != 0 ==> y >= 0;\nloop invariant i7: x != 0 ==> x <= LARGE_INT;\nloop invariant i8: y != 0 ==> y <= LARGE_INT;\nloop invariant i9: x != 0 ==> i - x == j - y;\nloop invariant i10: x != 0 ==> i == j + z;\nloop invariant i11: x != 0 ==> y == j - z;\nloop invariant i12: x != 0 ==> x + y == z;\nloop invariant i13: x != 0 ==> x + (j - z) == z;\nloop invariant i14: x != 0 ==> x + j - z == z;\nloop invariant i15: x != 0 ==> x + j == 2 * z;\nloop invariant i16: x != 0 ==> x == 2 * z - j;\nloop invariant i17: x != 0 ==> x == 2 * (z - j / 2);\nloop invariant i18: 0 <= x <= LARGE_INT;\nloop invariant i19: 0 <= y;\nloop invariant i20: 0 <= z;\nloop invariant i21: y == 2 * z + j;\nloop invariant i22: x == i;\nloop invariant i23: i >= 0;\nloop invariant i24: i <= LARGE_INT;\nloop invariant i25: j >= 0;\nloop invariant i26: j >= -z;\nloop invariant i27: z >= 0;\nloop invariant i28: i != 0 ==> x != 0;\nloop invariant i29: i != 0 ==> y != -z;\nloop invariant i30: i != 0 ==> z != i;\nloop invariant i31: i != 0 ==> j != -z;\nloop invariant i32: i != 0 ==> y != -z + 2;\nloop invariant i33: i != 0 ==> x != i - 1;\nloop invariant i34: i != 0 ==> z != i - 1;\nloop invariant i35: 0 <= x <= i;\nloop invariant i36: 0 <= y <= j;\nloop invariant i37: 0 <= z <= (j - i);\nloop invariant i38: x >= (i - z);\nloop invariant i39: y >= (j - 2 * z);\nloop invariant i40: x * y == (i * j - 2 * i * z + z * y);\nloop invariant i41: x + y == i + j - 2 * z;\nloop invariant i42: x - y == z;\nloop invariant i43: 0 <= y <= i;\nloop invariant i44: z == j - y;\nloop invariant i45: x == i - j + y;\nloop invariant i46: y >= 0;\nloop invariant i47: y <= i;\nloop invariant i48: x >= j;\nloop invariant i49: x <= i;\nloop invariant i50: 0 <= y <= 100000;\nloop invariant i51: x >= (1 + (y - 1) * y / 2);\nloop invariant i52: i >= 0 && i <= LARGE_INT;\nloop invariant i53: z <= i;\nloop invariant i54: y >= -z;\nloop invariant i55: (i == j ==> y == -z);\nloop invariant i56: 0 <= y ==> x >= (j + y);\nloop invariant i57: z == (i - x);\nloop invariant i58: 0 <= x ==> (x - 1) <= i;\nloop invariant i59: 0 <= x ==> 0 <= y;\nloop invariant i60: 0 <= x ==> 0 <= z;\nloop invariant i61: 0 <= j;\nloop invariant i62: 0 <= z <= LARGE_INT;\nloop invariant i63: i - j <= z * 2;\nloop invariant i64: 0 <= y <= j - z * 2;\nloop invariant i65: i - x == z;\nloop invariant i66: j - y == z;\nloop invariant i67: i - x == z ==> y == -z;\nloop invariant i68: i - x == z ==> j == y + z;\nloop invariant i69: i - x == z ==> i == y + z;\nloop invariant i70: i - x == z ==> 0 <= y + z <= LARGE_INT;\nloop invariant i71: i - x == z ==> 0 <= y + z == j;\nloop invariant i72: i - x == z ==> i == j;\nloop invariant i73: i - x == z ==> i - j == 0;\nloop invariant i74: i - x == z ==> y == -z ==> i == j;\nloop invariant i75: i - x == z ==> y == -z ==> j == i;\nloop invariant i76: i - x == z ==> y == -z ==> 0 <= i <= LARGE_INT;\nloop invariant i77: i - x == z ==> y == -z ==> 0 <= j;\nloop invariant i78: i - x == z ==> y == -z ==> 0 <= z <= LARGE_INT;\nloop invariant i79: i - x == z ==> y == -z ==> i - j <= z * 2;\nloop invariant i80: i - x == z ==> y == -z ==> 0 <= x <= i;\nloop invariant i81: i - x == z ==> y == -z ==> 0 <= y <= j - z * 2;\nloop invariant i82: i - x == z ==> y == -z ==> i - x == z;\nloop invariant i83: i - x == z ==> y == -z ==> j - y == z;\nloop invariant i84: i - x == z ==> y == -z ==> i - x == z ==> y == -z;\nloop invariant i85: i - x == z ==> y == -z ==> i - x == z ==> j == y + z;\nloop invariant i86: i - x == z ==> y == -z ==> i - x == z ==> i == y + z;\nloop invariant i87: i - x == z ==> y == -z ==> i - x == z ==> 0 <= y + z <= LARGE_INT;\nloop invariant i88: i - x == z ==> y == -z ==> i - x == z ==> 0 <= y + z == j;\nloop invariant i89: i - x == z ==> y == -z ==> i - x == z ==> i == j;\nloop invariant i90: i - x == z ==> y == -z ==> i - x == z ==> i - j == 0;\nloop invariant i91: i - x == z ==> y == -z ==> i - x == z ==> y == -z ==> i == j;\nloop invariant i92: i - x == z ==> y == -z ==> i - x == z ==> y == -z ==> j == i;\nloop invariant i93: i - x == z ==> y == -z ==> i - x == z ==> y == -z ==> 0 <= i <= LARGE_INT;\nloop invariant i94: i - x == z ==> y == -z ==> i - x == z ==> y == -z ==> 0 <= j;\nloop invariant i95: i - x == z ==> y == -z ==> i - x == z ==> y == -z ==> 0 <= z <= LARGE_INT;\nloop invariant i96: i - x == z ==> y == -z ==> i - x == z ==> y == -z ==> i - j <= z * 2;\nloop invariant i97: i - x == z ==> y == -z ==> i - x == z ==> y == -z ==> 0 <= x <= i;\nloop invariant i98: i - x == z ==> y == -z ==> i - x == z ==> y == -z ==> 0 <= y <= j - z * 2;\nloop invariant i99: i - x == z ==> y == -z ==> i - x == z ==> y == -z ==> i - x == z;\nloop invariant i100: i - x == z ==> y == -z ==> i - x == z ==> y == -z ==> j - y == z;\nloop invariant i101: i - x == z ==> y == -z ==> i - x == z ==> y == -z ==> i - x == z ==> y == -z;\nloop invariant i102: i - x == z ==> y == -z ==> i - x == z ==> y == -z ==> i - x == z ==> j == y + z;\nloop invariant i103: i - x == z ==> y == -z ==> i - x == z ==> y == -z ==> i - x == z ==> i == y + z;\nloop invariant i104: x == i - j;\nloop invariant i105: y == j;\nloop invariant i106: z == 0;\nloop invariant i107: 1 <= i <= LARGE_INT;\nloop invariant i108: z = i - x;\nloop invariant i109: y = j - 2 * z;\nloop invariant i110: if i == j, then y == -z;\nloop invariant i111: 0 <= z <= i;\nloop invariant i112: x + y >= j;\nloop invariant i113: x + y <= j + z * 2;\nloop invariant i114: i - x <= z;\nloop invariant i115: i - x >= z;\nloop invariant i116: i - x >= i - j;\nloop invariant i117: i - x <= i - j;\nloop invariant i118: i - x >= -i + j;\nloop invariant i119: i - x <= -i + j;\nloop invariant i120: i - x >= -i;\nloop invariant i121: i - x <= -i;\nloop invariant i122: i - x >= i;\nloop invariant i123: i - x <= i;\nloop invariant i124: i - x >= 0;\nloop invariant i125: i - x <= 0;\nloop invariant i126: i - x >= -i - z;\nloop invariant i127: i - x <= -i - z;\nloop invariant i128: i - x >= -i + z;\nloop invariant i129: i - x <= -i + z;\nloop invariant i130: i - x >= -i + j - z;\nloop invariant i131: i - x <= -i + j - z;\nloop invariant i132: i - x >= -i - z + j;\nloop invariant i133: i - x <= -i - z + j;\nloop invariant i134: i - x >= -i + z + j;\nloop invariant i135: i - x <= -i + z + j;\nloop invariant i136: i - x >= -i + j - z + z;\nloop invariant i137: i - x <= -i + j - z + z;\nloop invariant i138: i - x >= -i - z + j + z;\nloop invariant i139: i - x <= -i - z + j + z;\nloop invariant i140: i - x >= -i + z + j - z;\nloop invariant i141: i - x <= -i + z + j - z;\nloop invariant i142: i - x >= -i + j - z + z - z;\nloop invariant i143: i - x <= -i + j - z + z - z;\nloop invariant i144: i - x >= -i - z + j + z - z;\nloop invariant i145: i - x <= -i - z + j + z - z;\nloop invariant i146: i - x >= -i + z + j - z + z - z;\nloop invariant i147: i - x <= -i + z + j - z + z - z;\nloop invariant i148: i - x >= -i + j - z + z - z + z;\nloop invariant i149: i - x <= -i + j - z + z - z + z;\nloop invariant i150: i - x >= -i - z + j + z - z + z;\nloop invariant i151: i - x <= -i - z + j + z - z + z;\nloop invariant i152: i - x >= -i + z + j - z + z - z + z;\nloop invariant i153: i - x <= -i + z + j - z + z - z + z;\nloop invariant i154: i - x >= -i + j - z + z - z + z - z;\nloop invariant i155: i - x <= -i + j - z + z - z + z - z;\nloop invariant i156: i - x >= -i - z + j + z - z + z - z;\nloop invariant i157: i - x <= -i - z + j + z - z + z - z;\nloop invariant i158: i - x >= -i + z + j - z + z - z + z - z;\nloop invariant i159: i - x <= -i + z + j - z + z - z + z - z;\nloop invariant i160: i - x >= -i + j - z + z - z + z - z + z;\nloop invariant i161: i - x <= -i + j - z + z - z + z - z + z;\nloop invariant i162: i - x >= -i - z + j + z - z + z - z + z;\nloop invariant i163: i - x <= -i - z + j + z - z + z - z + z;\nloop invariant i164: i - x >= -i + z + j - z + z - z + z - z + z;\nloop invariant i165: i - x <= -i + z + j - z + z - z + z - z + z;\nloop invariant i166: i - x >= -i + j - z + z - z + z - z + z - z;\nloop invariant i167: i - x <= -i + j - z + z - z + z - z + z - z;\nloop invariant i168: i - x >= -i - z + j + z - z + z - z + z - z;\nloop invariant i169: i - x <= -i - z + j + z - z + z - z + z - z;\nloop invariant i170: x >= 0;\nloop invariant i171: x >= y;\nloop invariant i172: x < j;\nloop invariant i173: y < j;\nloop invariant i174: (i != j ==> 0 <= y <= j);\nloop invariant i175: (i != j ==> x >= 0);\nloop invariant i176: (i != j ==> x >= y);\nloop invariant i177: (i != j ==> y >= 0);\nloop invariant i178: (i != j ==> x < j);\nloop invariant i179: (i != j ==> y < j);\nloop invariant i180: (i != j ==> i >= 0);\nloop invariant i181: (i != j ==> i <= LARGE_INT);\nloop invariant i182: (i != j ==> j >= 0);\nloop invariant i183: y + z = j;\nloop invariant i184: z <= j;\nloop invariant i185: (i != j ==> y != -z);\nloop invariant i186: (i == j ==> x == 0);\nloop invariant i187: (i != j ==> x != 0);\nloop invariant i188: (i == j ==> z == i);\nloop invariant i189: (i != j ==> z != i);\nloop invariant i190: (i == j ==> x == i);\nloop invariant i191: (i != j ==> x != i);\nloop invariant i192: (i == j ==> y == -i);\nloop invariant i193: (i != j ==> y != -i);\nloop invariant i194: (x == 0 ==> x == 0);\nloop invariant i195: (x != 0 ==> x != 0);\nloop invariant i196: (y == -z ==> y == -z);\nloop invariant i197: (y != -z ==> y != -z);\nloop invariant i198: (x == 0 ==> y == -z);\nloop invariant i199: (x != 0 ==> y != -z);\nloop invariant i200: (x == 0 ==> z == i);\nloop invariant i201: (x != 0 ==> z != i);\nloop invariant i202: (x == 0 ==> x == i);\nloop invariant i203: (x != 0 ==> x != i);\nloop invariant i204: (x == 0 ==> y == -i);\nloop invariant i205: (x != 0 ==> y != -i);\nloop invariant i206: 1 <= x <= i;\nloop invariant i207: y >= (j - (2 * z));\nloop invariant i208: y <= j;\nloop invariant i209: x == 0 ==> y == -z;\nloop invariant i210: y >= -LARGE_INT;\nloop invariant i211: y <= j - z * 2;\nloop invariant i212: x - y >= i - j + z;\nloop invariant i213: y == i - x - z * 2;\nloop invariant i214: z >= j - y;\nloop invariant i215: i >= 0 and i <= LARGE_INT;\nloop invariant i216: x == i and y == j - 2*z and z >= (i - j + 1)/2;\n*/\nwhile(x != 0) {\n        x --;\n        y -= 2;\n        z ++;\n    }\n    if (i == j) {\n        {;\n//@ assert(y == -z);\n}\n\n    }\n    return 0;\n}",
        "combined_annotation_num_solver_calls": 48,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n\n    if (!(i >= 0 && i <= LARGE_INT)) return 0;\n    if (!(j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    int z = 0;\n    /*@\n\nloop invariant i2: 0 <= i <= LARGE_INT;\n\n\nloop invariant i5: x != 0 ==> x >= 0;\n\nloop invariant i7: x != 0 ==> x <= LARGE_INT;\n\n\n\n\n\n\n\n\n\n\nloop invariant i18: 0 <= x <= LARGE_INT;\n\nloop invariant i20: 0 <= z;\n\n\nloop invariant i23: i >= 0;\nloop invariant i24: i <= LARGE_INT;\nloop invariant i25: j >= 0;\nloop invariant i26: j >= -z;\nloop invariant i27: z >= 0;\n\n\n\n\n\n\n\nloop invariant i35: 0 <= x <= i;\n\n\nloop invariant i38: x >= (i - z);\nloop invariant i39: y >= (j - 2 * z);\n\n\n\n\n\n\n\n\n\nloop invariant i49: x <= i;\n\n\nloop invariant i52: i >= 0 && i <= LARGE_INT;\nloop invariant i53: z <= i;\n\n\n\nloop invariant i57: z == (i - x);\nloop invariant i58: 0 <= x ==> (x - 1) <= i;\n\nloop invariant i60: 0 <= x ==> 0 <= z;\nloop invariant i61: 0 <= j;\nloop invariant i62: 0 <= z <= LARGE_INT;\n\n\nloop invariant i65: i - x == z;\n\n\n\n\n\n\n\n\n\n\nloop invariant i76: i - x == z ==> y == -z ==> 0 <= i <= LARGE_INT;\nloop invariant i77: i - x == z ==> y == -z ==> 0 <= j;\nloop invariant i78: i - x == z ==> y == -z ==> 0 <= z <= LARGE_INT;\n\nloop invariant i80: i - x == z ==> y == -z ==> 0 <= x <= i;\n\nloop invariant i82: i - x == z ==> y == -z ==> i - x == z;\n\nloop invariant i84: i - x == z ==> y == -z ==> i - x == z ==> y == -z;\n\n\nloop invariant i87: i - x == z ==> y == -z ==> i - x == z ==> 0 <= y + z <= LARGE_INT;\n\n\n\n\n\nloop invariant i93: i - x == z ==> y == -z ==> i - x == z ==> y == -z ==> 0 <= i <= LARGE_INT;\nloop invariant i94: i - x == z ==> y == -z ==> i - x == z ==> y == -z ==> 0 <= j;\nloop invariant i95: i - x == z ==> y == -z ==> i - x == z ==> y == -z ==> 0 <= z <= LARGE_INT;\n\nloop invariant i97: i - x == z ==> y == -z ==> i - x == z ==> y == -z ==> 0 <= x <= i;\n\nloop invariant i99: i - x == z ==> y == -z ==> i - x == z ==> y == -z ==> i - x == z;\n\nloop invariant i101: i - x == z ==> y == -z ==> i - x == z ==> y == -z ==> i - x == z ==> y == -z;\n\n\n\n\n\n\n\n\n\nloop invariant i111: 0 <= z <= i;\n\n\nloop invariant i114: i - x <= z;\nloop invariant i115: i - x >= z;\n\n\n\n\nloop invariant i120: i - x >= -i;\n\n\nloop invariant i123: i - x <= i;\nloop invariant i124: i - x >= 0;\n\nloop invariant i126: i - x >= -i - z;\n\nloop invariant i128: i - x >= -i + z;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i170: x >= 0;\n\n\n\n\nloop invariant i175: (i != j ==> x >= 0);\n\n\n\n\nloop invariant i180: (i != j ==> i >= 0);\nloop invariant i181: (i != j ==> i <= LARGE_INT);\nloop invariant i182: (i != j ==> j >= 0);\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i194: (x == 0 ==> x == 0);\nloop invariant i195: (x != 0 ==> x != 0);\nloop invariant i196: (y == -z ==> y == -z);\nloop invariant i197: (y != -z ==> y != -z);\n\n\nloop invariant i200: (x == 0 ==> z == i);\nloop invariant i201: (x != 0 ==> z != i);\n\n\n\n\n\nloop invariant i207: y >= (j - (2 * z));\nloop invariant i208: y <= j;\n\n\nloop invariant i211: y <= j - z * 2;\nloop invariant i212: x - y >= i - j + z;\n\n\n\n\n*/\nwhile(x != 0) {\n        x --;\n        y -= 2;\n        z ++;\n    }\n    if (i == j) {\n        {;\n//@ assert(y == -z);\n}\n\n    }\n    return 0;\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/split.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c"
        ],
        "skipped": [],
        "total": 54,
        "success_count": 45,
        "failure_count": 9,
        "success_rate": 0.8333333333333334
    }
}