{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n\n\tint x, y;\n\tx = 0;\n\ty = 0;\n\n\twhile(y >= 0) {\n\n\t\ty = y + x;\n\t\n\t}\n\n\t{;\n//@ assert(0 == 1);\n}\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= y <= INT_MAX;\nloop invariant x >= 0;\nloop invariant y >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y;\nloop invariant x >= y;\nloop invariant y >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant y >= 0;\nloop invariant y >= x;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant y >= 0;\nloop invariant y >= x;\nloop invariant y >= 0 ==> y >= x;\nloop invariant 0 <= x ==> y >= x;\nloop invariant 0 <= y ==> y >= x;\nloop invariant x <= y;\nloop invariant y >= x ==> x <= y;\nloop invariant x <= y ==> x <= y;\nloop invariant x <= y ==> x <= y ==> x <= y;\nloop invariant x <= y ==> x <= y ==> x <= y ==> x <= y;\nloop invariant x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y;\nloop invariant x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y;\nloop invariant x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y;\nloop invariant x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y;\nloop invariant x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y;\nloop invariant x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y;\nloop invariant x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y;\nloop invariant x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y;\nloop invariant x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y;\nloop invariant x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y;\nloop invariant x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y;\nloop invariant x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y;\nloop invariant x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y;\nloop invariant x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y;\nloop invariant x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y;\nloop invariant x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y; loop invariant y >= x; loop invariant y <= x + (x+1)*x/2; loop invariant y >= -(x+1)*x/2; loop invariant y >= -0; loop invariant y <= 0; loop invariant y >= x + (x+1)*x/2; loop invariant y <= x + (x+1)*x/2; loop invariant y >= -0; loop invariant y <= 0; loop invariant y >= -(x+1)*x/2; loop invariant y <= -(x+1)*x/2; loop invariant y >= -0; loop invariant y <= 0; loop invariant y >= x + (x+1)*x/2; loop invariant y <= x + (x+1)*x/2; loop invariant y >= -0; loop invariant y <= 0; loop invariant y >= -(x+1)*x/2; loop invariant y <= -(x+1)*x/2; loop invariant y >= -0; loop invariant y <= 0; loop invariant y >= x + (x+1)*x/2; loop invariant y <= x + (x+1)*x/2; loop invariant y >= -0; loop invariant y <= 0; loop invariant y >= -(x+1)*x/2; loop invariant y <= -(x+1)*x/2; loop invariant y >= -0; loop invariant y <= 0; loop invariant y >= x + (x+1)*x/2; loop invariant y <= x + (x+1)*x/2; loop invariant y >= -0; loop invariant y <= 0; loop invariant y >= -(x+1)*x/2; loop invariant y <= -(x+1)*x/2; loop invariant y >= -0; loop invariant y <= 0; loop invariant y >= x + (x+1)*x/2; loop invariant y <= x + (x+1)*x/2; loop invariant y >= -0; loop invariant y <= 0; loop invariant y >= -(x+1)*x/2; loop invariant y <= -(x+1)*x/2; loop invariant y >= -0; loop invariant y <= 0; loop invariant y >= x + (x+1)*x/2; loop invariant y <= x + (x+1)*x/2; loop invariant y >= -0; loop invariant y <= 0; loop invariant y >= -(x+1)*x/2; loop invariant y <= -(x+1)*x/2; loop invariant y >= -0; loop invariant y <= 0; loop invariant y >= x + (x+1)*x/2; loop invariant y <= x + (x+1)*x/2; loop invariant y >= -0; loop invariant y <= 0; loop invariant y >= -(x+1)*x/2; loop invariant y <= -(x+1)*x/2; loop invariant y >= -0; loop invariant y <= 0; loop invariant y >= x + (x+1)*x/2; loop invariant y <= x + (x+1)*x/2; loop invariant y >= -0; loop invariant y <= 0; loop invariant y >= -(x+1)*x/2; loop invariant y <= -(x+1)*x/2; loop invariant y >= -0; loop invariant y <= 0; loop invariant y >= x + (x+1)*x/2; loop invariant y <= x + (x+1)*x/2; loop invariant y >= -0; loop invariant y <= 0; loop invariant y >= -(x+1)*x/2; loop invariant y <= -(x+1)*x/2; loop invariant y >= -0; loop invariant y <= 0; loop invariant y >= x + (x+1)*x/2; loop invariant y <= x + (x+1)*x/2; loop invariant y >= -0; loop invariant y <= 0; loop invariant y >= -(x+1)*x/2; loop invariant y <= -(x+1)*x/2; loop invariant y >= -0; loop invariant y <= 0; loop invariant y >= x + (x+1)*x/2; loop invariant y <= x + (x+1)*x/2; loop invariant y >= -0; loop invariant y <= 0; loop invariant y >= -(x+1)*x/2; loop invariant y <= -(x+1)*x/2; loop invariant y >= -0; loop invariant y <= 0; loop invariant y >= x + (x+1)*x/2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
            "```\n/*@\nloop invariant 1 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant y >= 0;\nloop invariant x >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant 0 <= y && y <= 0;\nloop invariant x >= 0;\nloop invariant 0 <= y && y <= y + x;\nloop invariant x >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= y;\nloop invariant y <= 0;\nloop invariant x >= 0;\nloop invariant y >= x;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant y >= 0;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= INT_MAX;\nloop invariant x >= 0;\nloop invariant y >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n\n\tint x, y;\n\tx = 0;\n\ty = 0;\n\n\t/*@\nloop invariant i1: 0 <= y <= INT_MAX;\nloop invariant i2: x >= 0;\nloop invariant i3: y >= 0;\n*/\nwhile(y >= 0) {\n\n\t\ty = y + x;\n\t\n\t}\n\n\t{;\n//@ assert(0 == 1);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= y;\nloop invariant x >= y;\nloop invariant y >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n\n\tint x, y;\n\tx = 0;\n\ty = 0;\n\n\t/*@\n\n\n\n*/\nwhile(y >= 0) {\n\n\t\ty = y + x;\n\t\n\t}\n\n\t{;\n//@ assert(0 == 1);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n\n\tint x, y;\n\tx = 0;\n\ty = 0;\n\n\t/*@\n\n\n*/\nwhile(y >= 0) {\n\n\t\ty = y + x;\n\t\n\t}\n\n\t{;\n//@ assert(0 == 1);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant y >= 0;\nloop invariant y >= x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n\n\tint x, y;\n\tx = 0;\n\ty = 0;\n\n\t/*@\n\n\n\nloop invariant i4: y >= x;\n*/\nwhile(y >= 0) {\n\n\t\ty = y + x;\n\t\n\t}\n\n\t{;\n//@ assert(0 == 1);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant y >= 0;\nloop invariant y >= x;\nloop invariant y >= 0 ==> y >= x;\nloop invariant 0 <= x ==> y >= x;\nloop invariant 0 <= y ==> y >= x;\nloop invariant x <= y;\nloop invariant y >= x ==> x <= y;\nloop invariant x <= y ==> x <= y;\nloop invariant x <= y ==> x <= y ==> x <= y;\nloop invariant x <= y ==> x <= y ==> x <= y ==> x <= y;\nloop invariant x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y;\nloop invariant x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y;\nloop invariant x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y;\nloop invariant x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y;\nloop invariant x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y;\nloop invariant x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y;\nloop invariant x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y;\nloop invariant x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y;\nloop invariant x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y;\nloop invariant x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y;\nloop invariant x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y;\nloop invariant x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y;\nloop invariant x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y;\nloop invariant x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y;\nloop invariant x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y;\nloop invariant x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n\n\tint x, y;\n\tx = 0;\n\ty = 0;\n\n\t/*@\nloop invariant i1: 0 <= x;\nloop invariant i2: 0 <= y;\nloop invariant i3: y >= 0;\nloop invariant i4: y >= x;\nloop invariant i5: y >= 0 ==> y >= x;\nloop invariant i6: 0 <= x ==> y >= x;\nloop invariant i7: 0 <= y ==> y >= x;\nloop invariant i8: x <= y;\nloop invariant i9: y >= x ==> x <= y;\nloop invariant i10: x <= y ==> x <= y;\nloop invariant i11: x <= y ==> x <= y ==> x <= y;\nloop invariant i12: x <= y ==> x <= y ==> x <= y ==> x <= y;\nloop invariant i13: x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y;\nloop invariant i14: x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y;\nloop invariant i15: x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y;\nloop invariant i16: x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y;\nloop invariant i17: x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y;\nloop invariant i18: x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y;\nloop invariant i19: x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y;\nloop invariant i20: x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y;\nloop invariant i21: x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y;\nloop invariant i22: x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y;\nloop invariant i23: x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y;\nloop invariant i24: x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y;\nloop invariant i25: x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y;\nloop invariant i26: x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y;\nloop invariant i27: x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y;\nloop invariant i28: x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y;\n*/\nwhile(y >= 0) {\n\n\t\ty = y + x;\n\t\n\t}\n\n\t{;\n//@ assert(0 == 1);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n\n\tint x, y;\n\tx = 0;\n\ty = 0;\n\n\t/*@\n\n\n*/\nwhile(y >= 0) {\n\n\t\ty = y + x;\n\t\n\t}\n\n\t{;\n//@ assert(0 == 1);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n\n\tint x, y;\n\tx = 0;\n\ty = 0;\n\n\t/*@\n\n\n*/\nwhile(y >= 0) {\n\n\t\ty = y + x;\n\t\n\t}\n\n\t{;\n//@ assert(0 == 1);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= y; loop invariant y >= x; loop invariant y <= x + (x+1)*x/2; loop invariant y >= -(x+1)*x/2; loop invariant y >= -0; loop invariant y <= 0; loop invariant y >= x + (x+1)*x/2; loop invariant y <= x + (x+1)*x/2; loop invariant y >= -0; loop invariant y <= 0; loop invariant y >= -(x+1)*x/2; loop invariant y <= -(x+1)*x/2; loop invariant y >= -0; loop invariant y <= 0; loop invariant y >= x + (x+1)*x/2; loop invariant y <= x + (x+1)*x/2; loop invariant y >= -0; loop invariant y <= 0; loop invariant y >= -(x+1)*x/2; loop invariant y <= -(x+1)*x/2; loop invariant y >= -0; loop invariant y <= 0; loop invariant y >= x + (x+1)*x/2; loop invariant y <= x + (x+1)*x/2; loop invariant y >= -0; loop invariant y <= 0; loop invariant y >= -(x+1)*x/2; loop invariant y <= -(x+1)*x/2; loop invariant y >= -0; loop invariant y <= 0; loop invariant y >= x + (x+1)*x/2; loop invariant y <= x + (x+1)*x/2; loop invariant y >= -0; loop invariant y <= 0; loop invariant y >= -(x+1)*x/2; loop invariant y <= -(x+1)*x/2; loop invariant y >= -0; loop invariant y <= 0; loop invariant y >= x + (x+1)*x/2; loop invariant y <= x + (x+1)*x/2; loop invariant y >= -0; loop invariant y <= 0; loop invariant y >= -(x+1)*x/2; loop invariant y <= -(x+1)*x/2; loop invariant y >= -0; loop invariant y <= 0; loop invariant y >= x + (x+1)*x/2; loop invariant y <= x + (x+1)*x/2; loop invariant y >= -0; loop invariant y <= 0; loop invariant y >= -(x+1)*x/2; loop invariant y <= -(x+1)*x/2; loop invariant y >= -0; loop invariant y <= 0; loop invariant y >= x + (x+1)*x/2; loop invariant y <= x + (x+1)*x/2; loop invariant y >= -0; loop invariant y <= 0; loop invariant y >= -(x+1)*x/2; loop invariant y <= -(x+1)*x/2; loop invariant y >= -0; loop invariant y <= 0; loop invariant y >= x + (x+1)*x/2; loop invariant y <= x + (x+1)*x/2; loop invariant y >= -0; loop invariant y <= 0; loop invariant y >= -(x+1)*x/2; loop invariant y <= -(x+1)*x/2; loop invariant y >= -0; loop invariant y <= 0; loop invariant y >= x + (x+1)*x/2; loop invariant y <= x + (x+1)*x/2; loop invariant y >= -0; loop invariant y <= 0; loop invariant y >= -(x+1)*x/2; loop invariant y <= -(x+1)*x/2; loop invariant y >= -0; loop invariant y <= 0; loop invariant y >= x + (x+1)*x/2; loop invariant y <= x + (x+1)*x/2; loop invariant y >= -0; loop invariant y <= 0; loop invariant y >= -(x+1)*x/2; loop invariant y <= -(x+1)*x/2; loop invariant y >= -0; loop invariant y <= 0; loop invariant y >= x + (x+1)*x/2; loop invariant y <= x + (x+1)*x/2; loop invariant y >= -0; loop invariant y <= 0; loop invariant y >= -(x+1)*x/2; loop invariant y <= -(x+1)*x/2; loop invariant y >= -0; loop invariant y <= 0; loop invariant y >= x + (x+1)*x/2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n\n\tint x, y;\n\tx = 0;\n\ty = 0;\n\n\t/*@\nloop invariant i1: 0 <= y; loop invariant y >= x; loop invariant y <= x + (x+1)*x/2; loop invariant y >= -(x+1)*x/2; loop invariant y >= -0; loop invariant y <= 0; loop invariant y >= x + (x+1)*x/2; loop invariant y <= x + (x+1)*x/2; loop invariant y >= -0; loop invariant y <= 0; loop invariant y >= -(x+1)*x/2; loop invariant y <= -(x+1)*x/2; loop invariant y >= -0; loop invariant y <= 0; loop invariant y >= x + (x+1)*x/2; loop invariant y <= x + (x+1)*x/2; loop invariant y >= -0; loop invariant y <= 0; loop invariant y >= -(x+1)*x/2; loop invariant y <= -(x+1)*x/2; loop invariant y >= -0; loop invariant y <= 0; loop invariant y >= x + (x+1)*x/2; loop invariant y <= x + (x+1)*x/2; loop invariant y >= -0; loop invariant y <= 0; loop invariant y >= -(x+1)*x/2; loop invariant y <= -(x+1)*x/2; loop invariant y >= -0; loop invariant y <= 0; loop invariant y >= x + (x+1)*x/2; loop invariant y <= x + (x+1)*x/2; loop invariant y >= -0; loop invariant y <= 0; loop invariant y >= -(x+1)*x/2; loop invariant y <= -(x+1)*x/2; loop invariant y >= -0; loop invariant y <= 0; loop invariant y >= x + (x+1)*x/2; loop invariant y <= x + (x+1)*x/2; loop invariant y >= -0; loop invariant y <= 0; loop invariant y >= -(x+1)*x/2; loop invariant y <= -(x+1)*x/2; loop invariant y >= -0; loop invariant y <= 0; loop invariant y >= x + (x+1)*x/2; loop invariant y <= x + (x+1)*x/2; loop invariant y >= -0; loop invariant y <= 0; loop invariant y >= -(x+1)*x/2; loop invariant y <= -(x+1)*x/2; loop invariant y >= -0; loop invariant y <= 0; loop invariant y >= x + (x+1)*x/2; loop invariant y <= x + (x+1)*x/2; loop invariant y >= -0; loop invariant y <= 0; loop invariant y >= -(x+1)*x/2; loop invariant y <= -(x+1)*x/2; loop invariant y >= -0; loop invariant y <= 0; loop invariant y >= x + (x+1)*x/2; loop invariant y <= x + (x+1)*x/2; loop invariant y >= -0; loop invariant y <= 0; loop invariant y >= -(x+1)*x/2; loop invariant y <= -(x+1)*x/2; loop invariant y >= -0; loop invariant y <= 0; loop invariant y >= x + (x+1)*x/2; loop invariant y <= x + (x+1)*x/2; loop invariant y >= -0; loop invariant y <= 0; loop invariant y >= -(x+1)*x/2; loop invariant y <= -(x+1)*x/2; loop invariant y >= -0; loop invariant y <= 0; loop invariant y >= x + (x+1)*x/2; loop invariant y <= x + (x+1)*x/2; loop invariant y >= -0; loop invariant y <= 0; loop invariant y >= -(x+1)*x/2; loop invariant y <= -(x+1)*x/2; loop invariant y >= -0; loop invariant y <= 0; loop invariant y >= x + (x+1)*x/2; loop invariant y <= x + (x+1)*x/2; loop invariant y >= -0; loop invariant y <= 0; loop invariant y >= -(x+1)*x/2; loop invariant y <= -(x+1)*x/2; loop invariant y >= -0; loop invariant y <= 0; loop invariant y >= x + (x+1)*x/2;\n*/\nwhile(y >= 0) {\n\n\t\ty = y + x;\n\t\n\t}\n\n\t{;\n//@ assert(0 == 1);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n\n\tint x, y;\n\tx = 0;\n\ty = 0;\n\n\t/*@\n\n\n*/\nwhile(y >= 0) {\n\n\t\ty = y + x;\n\t\n\t}\n\n\t{;\n//@ assert(0 == 1);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n\n\tint x, y;\n\tx = 0;\n\ty = 0;\n\n\t/*@\n\n\n*/\nwhile(y >= 0) {\n\n\t\ty = y + x;\n\t\n\t}\n\n\t{;\n//@ assert(0 == 1);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 1 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant y >= 0;\nloop invariant x >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n\n\tint x, y;\n\tx = 0;\n\ty = 0;\n\n\t/*@\n\n\nloop invariant i3: y >= 0;\nloop invariant i4: x >= 0;\n*/\nwhile(y >= 0) {\n\n\t\ty = y + x;\n\t\n\t}\n\n\t{;\n//@ assert(0 == 1);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant 0 <= y && y <= 0;\nloop invariant x >= 0;\nloop invariant 0 <= y && y <= y + x;\nloop invariant x >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n\n\tint x, y;\n\tx = 0;\n\ty = 0;\n\n\t/*@\n\n\n\nloop invariant i4: x >= 0;\nloop invariant i5: 0 <= y && y <= y + x;\n*/\nwhile(y >= 0) {\n\n\t\ty = y + x;\n\t\n\t}\n\n\t{;\n//@ assert(0 == 1);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n\n\tint x, y;\n\tx = 0;\n\ty = 0;\n\n\t/*@\nloop invariant i1: 0 <= y;\nloop invariant i2: x >= 0;\nloop invariant i3: y >= 0;\n*/\nwhile(y >= 0) {\n\n\t\ty = y + x;\n\t\n\t}\n\n\t{;\n//@ assert(0 == 1);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= y;\nloop invariant y <= 0;\nloop invariant x >= 0;\nloop invariant y >= x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n\n\tint x, y;\n\tx = 0;\n\ty = 0;\n\n\t/*@\n\nloop invariant i2: y <= 0;\nloop invariant i3: x >= 0;\nloop invariant i4: y >= x;\n*/\nwhile(y >= 0) {\n\n\t\ty = y + x;\n\t\n\t}\n\n\t{;\n//@ assert(0 == 1);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant y >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n\n\tint x, y;\n\tx = 0;\n\ty = 0;\n\n\t/*@\nloop invariant i1: 0 <= x <= y;\nloop invariant i2: y >= 0;\n*/\nwhile(y >= 0) {\n\n\t\ty = y + x;\n\t\n\t}\n\n\t{;\n//@ assert(0 == 1);\n}\n\n}",
                "checker_output_after_prune": true
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "loop invariant 0 <= y <= INT_MAX is partially proven to be inductive.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant y >= 0 is partially proven to be inductive.\nloop invariant 0 <= y is partially proven to be inductive.\nloop invariant x >= y is partially proven to be inductive.\nloop invariant 0 <= y <= 100000 is partially proven to be inductive.\nloop invariant x >= (1 + (y - 1) * y / 2) is preserved but not established.\nloop invariant y >= x is partially proven to be inductive.\nloop invariant 0 <= x is partially proven to be inductive.\nloop invariant y >= 0 ==> y >= x is partially proven to be inductive.\nloop invariant 0 <= x ==> y >= x is partially proven to be inductive.\nloop invariant 0 <= y ==> y >= x is partially proven to be inductive.\nloop invariant x <= y is partially proven to be inductive.\nloop invariant y >= x ==> x <= y is partially proven to be inductive.\nloop invariant x <= y ==> x <= y is partially proven to be inductive.\nloop invariant x <= y ==> x <= y ==> x <= y is partially proven to be inductive.\nloop invariant x <= y ==> x <= y ==> x <= y ==> x <= y is partially proven to be inductive.\nloop invariant x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y is partially proven to be inductive.\nloop invariant x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y is partially proven to be inductive.\nloop invariant x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y is partially proven to be inductive.\nloop invariant x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y is partially proven to be inductive.\nloop invariant x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y is partially proven to be inductive.\nloop invariant x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y is partially proven to be inductive.\nloop invariant x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y is partially proven to be inductive.\nloop invariant x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y is partially proven to be inductive.\nloop invariant x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y is partially proven to be inductive.\nloop invariant x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y is partially proven to be inductive.\nloop invariant x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y is partially proven to be inductive.\nloop invariant x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y is partially proven to be inductive.\nloop invariant x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y is partially proven to be inductive.\nloop invariant x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y is partially proven to be inductive.\nloop invariant x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y is partially proven to be inductive.\nloop invariant x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y is partially proven to be inductive.\nloop invariant 0 <= y; loop invariant y >= x; loop invariant y <= x + (x+1)*x/2; loop invariant y >= -(x+1)*x/2; loop invariant y >= -0; loop invariant y <= 0; loop invariant y >= x + (x+1)*x/2; loop invariant y <= x + (x+1)*x/2; loop invariant y >= -0; loop invariant y <= 0; loop invariant y >= -(x+1)*x/2; loop invariant y <= -(x+1)*x/2; loop invariant y >= -0; loop invariant y <= 0; loop invariant y >= x + (x+1)*x/2; loop invariant y <= x + (x+1)*x/2; loop invariant y >= -0; loop invariant y <= 0; loop invariant y >= -(x+1)*x/2; loop invariant y <= -(x+1)*x/2; loop invariant y >= -0; loop invariant y <= 0; loop invariant y >= x + (x+1)*x/2; loop invariant y <= x + (x+1)*x/2; loop invariant y >= -0; loop invariant y <= 0; loop invariant y >= -(x+1)*x/2; loop invariant y <= -(x+1)*x/2; loop invariant y >= -0; loop invariant y <= 0; loop invariant y >= x + (x+1)*x/2; loop invariant y <= x + (x+1)*x/2; loop invariant y >= -0; loop invariant y <= 0; loop invariant y >= -(x+1)*x/2; loop invariant y <= -(x+1)*x/2; loop invariant y >= -0; loop invariant y <= 0; loop invariant y >= x + (x+1)*x/2; loop invariant y <= x + (x+1)*x/2; loop invariant y >= -0; loop invariant y <= 0; loop invariant y >= -(x+1)*x/2; loop invariant y <= -(x+1)*x/2; loop invariant y >= -0; loop invariant y <= 0; loop invariant y >= x + (x+1)*x/2; loop invariant y <= x + (x+1)*x/2; loop invariant y >= -0; loop invariant y <= 0; loop invariant y >= -(x+1)*x/2; loop invariant y <= -(x+1)*x/2; loop invariant y >= -0; loop invariant y <= 0; loop invariant y >= x + (x+1)*x/2; loop invariant y <= x + (x+1)*x/2; loop invariant y >= -0; loop invariant y <= 0; loop invariant y >= -(x+1)*x/2; loop invariant y <= -(x+1)*x/2; loop invariant y >= -0; loop invariant y <= 0; loop invariant y >= x + (x+1)*x/2; loop invariant y <= x + (x+1)*x/2; loop invariant y >= -0; loop invariant y <= 0; loop invariant y >= -(x+1)*x/2; loop invariant y <= -(x+1)*x/2; loop invariant y >= -0; loop invariant y <= 0; loop invariant y >= x + (x+1)*x/2; loop invariant y <= x + (x+1)*x/2; loop invariant y >= -0; loop invariant y <= 0; loop invariant y >= -(x+1)*x/2; loop invariant y <= -(x+1)*x/2; loop invariant y >= -0; loop invariant y <= 0; loop invariant y >= x + (x+1)*x/2; loop invariant y <= x + (x+1)*x/2; loop invariant y >= -0; loop invariant y <= 0; loop invariant y >= -(x+1)*x/2; loop invariant y <= -(x+1)*x/2; loop invariant y >= -0; loop invariant y <= 0; loop invariant y >= x + (x+1)*x/2; loop invariant y <= x + (x+1)*x/2; loop invariant y >= -0; loop invariant y <= 0; loop invariant y >= -(x+1)*x/2; loop invariant y <= -(x+1)*x/2; loop invariant y >= -0; loop invariant y <= 0; loop invariant y >= x + (x+1)*x/2 is partially proven to be inductive.\nloop invariant 1 <= y <= 100000 is partially proven to be inductive.\nloop invariant 0 <= y && y <= 0 is partially proven to be inductive.\nloop invariant 0 <= y && y <= y + x is partially proven to be inductive.\nloop invariant 1 <= x <= y is partially proven to be inductive.\nloop invariant y <= 0 is partially proven to be inductive.\nloop invariant 0 <= x <= y is partially proven to be inductive.\nAssertion 0 == 1: Partially proven",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n\n\tint x, y;\n\tx = 0;\n\ty = 0;\n\n\t/*@\nloop invariant i1: 0 <= y <= INT_MAX;\nloop invariant i2: x >= 0;\nloop invariant i3: y >= 0;\nloop invariant i4: 0 <= y;\nloop invariant i5: x >= y;\nloop invariant i6: 0 <= y <= 100000;\nloop invariant i7: x >= (1 + (y - 1) * y / 2);\nloop invariant i8: y >= x;\nloop invariant i9: 0 <= x;\nloop invariant i10: y >= 0 ==> y >= x;\nloop invariant i11: 0 <= x ==> y >= x;\nloop invariant i12: 0 <= y ==> y >= x;\nloop invariant i13: x <= y;\nloop invariant i14: y >= x ==> x <= y;\nloop invariant i15: x <= y ==> x <= y;\nloop invariant i16: x <= y ==> x <= y ==> x <= y;\nloop invariant i17: x <= y ==> x <= y ==> x <= y ==> x <= y;\nloop invariant i18: x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y;\nloop invariant i19: x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y;\nloop invariant i20: x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y;\nloop invariant i21: x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y;\nloop invariant i22: x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y;\nloop invariant i23: x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y;\nloop invariant i24: x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y;\nloop invariant i25: x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y;\nloop invariant i26: x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y;\nloop invariant i27: x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y;\nloop invariant i28: x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y;\nloop invariant i29: x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y;\nloop invariant i30: x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y;\nloop invariant i31: x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y;\nloop invariant i32: x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y;\nloop invariant i33: x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y;\nloop invariant i34: 0 <= y; loop invariant y >= x; loop invariant y <= x + (x+1)*x/2; loop invariant y >= -(x+1)*x/2; loop invariant y >= -0; loop invariant y <= 0; loop invariant y >= x + (x+1)*x/2; loop invariant y <= x + (x+1)*x/2; loop invariant y >= -0; loop invariant y <= 0; loop invariant y >= -(x+1)*x/2; loop invariant y <= -(x+1)*x/2; loop invariant y >= -0; loop invariant y <= 0; loop invariant y >= x + (x+1)*x/2; loop invariant y <= x + (x+1)*x/2; loop invariant y >= -0; loop invariant y <= 0; loop invariant y >= -(x+1)*x/2; loop invariant y <= -(x+1)*x/2; loop invariant y >= -0; loop invariant y <= 0; loop invariant y >= x + (x+1)*x/2; loop invariant y <= x + (x+1)*x/2; loop invariant y >= -0; loop invariant y <= 0; loop invariant y >= -(x+1)*x/2; loop invariant y <= -(x+1)*x/2; loop invariant y >= -0; loop invariant y <= 0; loop invariant y >= x + (x+1)*x/2; loop invariant y <= x + (x+1)*x/2; loop invariant y >= -0; loop invariant y <= 0; loop invariant y >= -(x+1)*x/2; loop invariant y <= -(x+1)*x/2; loop invariant y >= -0; loop invariant y <= 0; loop invariant y >= x + (x+1)*x/2; loop invariant y <= x + (x+1)*x/2; loop invariant y >= -0; loop invariant y <= 0; loop invariant y >= -(x+1)*x/2; loop invariant y <= -(x+1)*x/2; loop invariant y >= -0; loop invariant y <= 0; loop invariant y >= x + (x+1)*x/2; loop invariant y <= x + (x+1)*x/2; loop invariant y >= -0; loop invariant y <= 0; loop invariant y >= -(x+1)*x/2; loop invariant y <= -(x+1)*x/2; loop invariant y >= -0; loop invariant y <= 0; loop invariant y >= x + (x+1)*x/2; loop invariant y <= x + (x+1)*x/2; loop invariant y >= -0; loop invariant y <= 0; loop invariant y >= -(x+1)*x/2; loop invariant y <= -(x+1)*x/2; loop invariant y >= -0; loop invariant y <= 0; loop invariant y >= x + (x+1)*x/2; loop invariant y <= x + (x+1)*x/2; loop invariant y >= -0; loop invariant y <= 0; loop invariant y >= -(x+1)*x/2; loop invariant y <= -(x+1)*x/2; loop invariant y >= -0; loop invariant y <= 0; loop invariant y >= x + (x+1)*x/2; loop invariant y <= x + (x+1)*x/2; loop invariant y >= -0; loop invariant y <= 0; loop invariant y >= -(x+1)*x/2; loop invariant y <= -(x+1)*x/2; loop invariant y >= -0; loop invariant y <= 0; loop invariant y >= x + (x+1)*x/2; loop invariant y <= x + (x+1)*x/2; loop invariant y >= -0; loop invariant y <= 0; loop invariant y >= -(x+1)*x/2; loop invariant y <= -(x+1)*x/2; loop invariant y >= -0; loop invariant y <= 0; loop invariant y >= x + (x+1)*x/2; loop invariant y <= x + (x+1)*x/2; loop invariant y >= -0; loop invariant y <= 0; loop invariant y >= -(x+1)*x/2; loop invariant y <= -(x+1)*x/2; loop invariant y >= -0; loop invariant y <= 0; loop invariant y >= x + (x+1)*x/2;\nloop invariant i35: 1 <= y <= 100000;\nloop invariant i36: 0 <= y && y <= 0;\nloop invariant i37: 0 <= y && y <= y + x;\nloop invariant i38: 1 <= x <= y;\nloop invariant i39: y <= 0;\nloop invariant i40: 0 <= x <= y;\n*/\nwhile(y >= 0) {\n\n\t\ty = y + x;\n\t\n\t}\n\n\t{;\n//@ assert(0 == 1);\n}\n\n}",
        "combined_annotation_num_solver_calls": 4,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n\n\tint x, y;\n\tx = 0;\n\ty = 0;\n\n\t/*@\nloop invariant i1: 0 <= y <= INT_MAX;\nloop invariant i2: x >= 0;\nloop invariant i3: y >= 0;\nloop invariant i4: 0 <= y;\nloop invariant i5: x >= y;\nloop invariant i6: 0 <= y <= 100000;\n\nloop invariant i8: y >= x;\nloop invariant i9: 0 <= x;\nloop invariant i10: y >= 0 ==> y >= x;\nloop invariant i11: 0 <= x ==> y >= x;\nloop invariant i12: 0 <= y ==> y >= x;\nloop invariant i13: x <= y;\nloop invariant i14: y >= x ==> x <= y;\nloop invariant i15: x <= y ==> x <= y;\nloop invariant i16: x <= y ==> x <= y ==> x <= y;\nloop invariant i17: x <= y ==> x <= y ==> x <= y ==> x <= y;\nloop invariant i18: x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y;\nloop invariant i19: x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y;\nloop invariant i20: x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y;\nloop invariant i21: x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y;\nloop invariant i22: x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y;\nloop invariant i23: x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y;\nloop invariant i24: x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y;\nloop invariant i25: x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y;\nloop invariant i26: x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y;\nloop invariant i27: x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y;\nloop invariant i28: x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y;\nloop invariant i29: x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y;\nloop invariant i30: x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y;\nloop invariant i31: x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y;\nloop invariant i32: x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y;\nloop invariant i33: x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y ==> x <= y;\nloop invariant i34: 0 <= y; loop invariant y >= x; loop invariant y <= x + (x+1)*x/2; loop invariant y >= -(x+1)*x/2; loop invariant y >= -0; loop invariant y <= 0; loop invariant y >= x + (x+1)*x/2; loop invariant y <= x + (x+1)*x/2; loop invariant y >= -0; loop invariant y <= 0; loop invariant y >= -(x+1)*x/2; loop invariant y <= -(x+1)*x/2; loop invariant y >= -0; loop invariant y <= 0; loop invariant y >= x + (x+1)*x/2; loop invariant y <= x + (x+1)*x/2; loop invariant y >= -0; loop invariant y <= 0; loop invariant y >= -(x+1)*x/2; loop invariant y <= -(x+1)*x/2; loop invariant y >= -0; loop invariant y <= 0; loop invariant y >= x + (x+1)*x/2; loop invariant y <= x + (x+1)*x/2; loop invariant y >= -0; loop invariant y <= 0; loop invariant y >= -(x+1)*x/2; loop invariant y <= -(x+1)*x/2; loop invariant y >= -0; loop invariant y <= 0; loop invariant y >= x + (x+1)*x/2; loop invariant y <= x + (x+1)*x/2; loop invariant y >= -0; loop invariant y <= 0; loop invariant y >= -(x+1)*x/2; loop invariant y <= -(x+1)*x/2; loop invariant y >= -0; loop invariant y <= 0; loop invariant y >= x + (x+1)*x/2; loop invariant y <= x + (x+1)*x/2; loop invariant y >= -0; loop invariant y <= 0; loop invariant y >= -(x+1)*x/2; loop invariant y <= -(x+1)*x/2; loop invariant y >= -0; loop invariant y <= 0; loop invariant y >= x + (x+1)*x/2; loop invariant y <= x + (x+1)*x/2; loop invariant y >= -0; loop invariant y <= 0; loop invariant y >= -(x+1)*x/2; loop invariant y <= -(x+1)*x/2; loop invariant y >= -0; loop invariant y <= 0; loop invariant y >= x + (x+1)*x/2; loop invariant y <= x + (x+1)*x/2; loop invariant y >= -0; loop invariant y <= 0; loop invariant y >= -(x+1)*x/2; loop invariant y <= -(x+1)*x/2; loop invariant y >= -0; loop invariant y <= 0; loop invariant y >= x + (x+1)*x/2; loop invariant y <= x + (x+1)*x/2; loop invariant y >= -0; loop invariant y <= 0; loop invariant y >= -(x+1)*x/2; loop invariant y <= -(x+1)*x/2; loop invariant y >= -0; loop invariant y <= 0; loop invariant y >= x + (x+1)*x/2; loop invariant y <= x + (x+1)*x/2; loop invariant y >= -0; loop invariant y <= 0; loop invariant y >= -(x+1)*x/2; loop invariant y <= -(x+1)*x/2; loop invariant y >= -0; loop invariant y <= 0; loop invariant y >= x + (x+1)*x/2; loop invariant y <= x + (x+1)*x/2; loop invariant y >= -0; loop invariant y <= 0; loop invariant y >= -(x+1)*x/2; loop invariant y <= -(x+1)*x/2; loop invariant y >= -0; loop invariant y <= 0; loop invariant y >= x + (x+1)*x/2; loop invariant y <= x + (x+1)*x/2; loop invariant y >= -0; loop invariant y <= 0; loop invariant y >= -(x+1)*x/2; loop invariant y <= -(x+1)*x/2; loop invariant y >= -0; loop invariant y <= 0; loop invariant y >= x + (x+1)*x/2;\n\nloop invariant i36: 0 <= y && y <= 0;\nloop invariant i37: 0 <= y && y <= y + x;\n\nloop invariant i39: y <= 0;\nloop invariant i40: 0 <= x <= y;\n*/\nwhile(y >= 0) {\n\n\t\ty = y + x;\n\t\n\t}\n\n\t{;\n//@ assert(0 == 1);\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/split.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c"
        ],
        "skipped": [],
        "total": 79,
        "success_count": 68,
        "failure_count": 11,
        "success_rate": 0.8607594936708861
    }
}