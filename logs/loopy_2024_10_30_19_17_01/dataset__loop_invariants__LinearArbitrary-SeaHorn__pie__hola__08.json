{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/08.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\nextern int unknown3();\n\nvoid main() {\n int x = 0, y = 0;\n while(unknown1()){\n   if(unknown2()){ \n      x++; \n      y+=100; \n   }\n   else if (unknown3()){ \n      if (x >= 4) { \n          x++; \n          y++; \n      } \n      if (x < 0){\n          y = -y;\n      }\n   }\n  \n }\n {;\n//@ assert(x < 4 || y > 2);\n}\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 200;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x < 4 || y > 2;\nloop invariant x >= y;\n*/\n```",
            "```\n/*@\nloop invariant ( x >= 0 && x <= 4 );\nloop invariant ( y >= 0 );\nloop invariant ( unknown1() ==> x < 4 || y > 2 );\nloop invariant ( unknown2() ==> x >= 0 && y >= 0 );\nloop invariant ( unknown3() ==> x >= 0 && y >= 0 );\n*/\n```",
            "```\n/*@\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y >= 100 * x;\nloop invariant x <= 3;\nloop invariant x < 3 ==> y > 2;\nloop invariant y <= y + 100;\nloop invariant y <= 100 * x + 100;\nloop invariant y >= 100 * x;\nloop invariant x >= 0;\nloop invariant x <= 3;\nloop invariant y >= 100 * x;\nloop invariant y <= 100 * x + 100;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y >= 100 * x;\nloop invariant x <= 3;\nloop invariant x < 3 ==> y > 2;\nloop invariant y <= y + 100;\nloop invariant y <= 100 * x + 100;\nloop invariant y >= 100 * x;\nloop invariant x >= 0;\nloop invariant x <= 3;\nloop invariant y >= 100 * x;\nloop invariant y <= 100 * x + 100;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y >= 100 * x;\nloop invariant x <= 3;\nloop invariant x < 3 ==> y > 2;\nloop invariant y <= y + 100;\nloop invariant y <= 100 * x + 100;\nloop invariant y >= 100 * x;\nloop invariant x >= 0;\nloop invariant x <= 3;\nloop invariant y >= 100 * x;\nloop invariant y <= 100 * x + 100;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y >= 100 * x;\nloop invariant x <= 3;\nloop invariant x < 3 ==> y > 2;\nloop invariant y <= y + 100;\nloop invariant y <= 100 * x + 100;\nloop invariant y >= 100 * x;\nloop invariant x >= 0;\nloop invariant x <= 3;\nloop invariant y >= 100 * x;\nloop invariant y <= 100 * x + 100;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y >= 100 * x;\nloop invariant x <= 3;\nloop invariant x < 3 ==> y > 2;\nloop invariant y <= y + 100;\nloop invariant y <= 100 * x + 100;\nloop invariant y >= 100 * x;\nloop invariant x >= 0;\nloop invariant x <= 3;\nloop invariant y >= 100 * x;\nloop invariant y <= 100 * x + 100;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y >= 100 * x;\nloop invariant x <= 3;\nloop invariant x < 3 ==> y > 2;\nloop invariant y <= y + 100;\nloop invariant y <= 100 * x + 100;\nloop invariant y >= 100 * x;\nloop invariant x >= 0;\nloop invariant x <= 3;\nloop invariant y >= 100 * x;\nloop invariant y <= 100 * x + 100;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y >= 100 * x;\nloop invariant x <= 3;\nloop invariant x < 3 ==> y > 2;\nloop invariant y <= y + 100;\nloop invariant y <= 100 * x + 100;\nloop invariant y >= 100 * x;\nloop invariant x >= 0;\nloop invariant x <= 3;\nloop invariant y >= 100 * x;\nloop invariant y <= 100 * x + 100;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y >= 100 * x;\nloop invariant x <= 3;\nloop invariant x < 3 ==> y > 2;\nloop invariant y <= y + 100;\nloop invariant y <= 100 * x + 100;\nloop invariant y >= 100 * x;\nloop invariant x >= 0;\nloop invariant x <= 3;\nloop invariant y >= 100 * x;\nloop invariant y <= 100 * x + 100;\nloop invariant y >= 0;\nloop invariant x >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 200;\nloop invariant x < 4 ==> y > 2;\nloop invariant x >= 4 ==> y <= 2;\nloop invariant x < 0 ==> y >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 3;\nloop invariant 0 <= y <= 300;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\n*/\n```",
            "```\n/*@\nloop invariant x <= 4;\nloop invariant y > 100;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y < 400;\nloop invariant y % 100 == 0;\nloop invariant x < 1 + y / 100;\nloop invariant y >= 100 * x / 4;\nloop invariant x * 100 <= y;\nloop invariant x < 4 || y > 2;\nloop invariant x == 0 || y > 2;\nloop invariant x == 0 || y >= 0;\nloop invariant x == 0 || y > 100;\nloop invariant x == 0 || y < 400;\nloop invariant x == 0 || y % 100 == 0;\nloop invariant x == 0 || x <= 4;\nloop invariant x == 0 || y >= 100;\nloop invariant x == 0 || y < 400;\nloop invariant x == 0 || y % 100 == 0;\nloop invariant x == 0 || x <= 4;\nloop invariant x == 0 || y >= 100;\nloop invariant x == 0 || y < 400;\nloop invariant x == 0 || y % 100 == 0;\nloop invariant x == 0 || x <= 4;\nloop invariant x == 0 || y >= 100;\nloop invariant x == 0 || y < 400;\nloop invariant x == 0 || y % 100 == 0;\nloop invariant x == 0 || x <= 4;\nloop invariant x == 0 || y >= 100;\nloop invariant x == 0 || y < 400;\nloop invariant x == 0 || y % 100 == 0;\nloop invariant x == 0 || x <= 4;\nloop invariant x == 0 || y >= 100;\nloop invariant x == 0 || y < 400;\nloop invariant x == 0 || y % 100 == 0;\nloop invariant x == 0 || x <= 4;\nloop invariant x == 0 || y >= 100;\nloop invariant x == 0 || y < 400;\nloop invariant x == 0 || y % 100 == 0;\nloop invariant x == 0 || x <= 4;\nloop invariant x == 0 || y >= 100;\nloop invariant x == 0 || y < 400;\nloop invariant x == 0 || y % 100 == 0;\nloop invariant x == 0 || x <= 4;\nloop invariant x == 0 || y >= 100;\nloop invariant x == 0 || y < 400;\nloop invariant x == 0 || y % 100 == 0;\nloop invariant x == 0 || x <= 4;\nloop invariant x == 0 || y >= 100;\nloop invariant x == 0 || y < 400;\nloop invariant x == 0 || y % 100 == 0;\nloop invariant x == 0 || x <= 4;\nloop invariant x == 0 || y >= 100;\nloop invariant x == 0 || y < 400;\nloop invariant x == 0 || y % 100 == 0;\nloop invariant x == 0 || x <= 4;\nloop invariant x == 0 || y >= 100;\nloop invariant x == 0 || y < 400;\nloop invariant x == 0 || y % 100 == 0;\nloop invariant x == 0 || x <= 4;\nloop invariant x == 0 || y >= 100;\nloop invariant x == 0 || y < 400;\nloop invariant x == 0 || y % 100 == 0;\nloop invariant x == 0 || x <= 4;\nloop invariant x == 0 || y >= 100;\nloop invariant x == 0 || y < 400;\nloop invariant x == 0 || y % 100 == 0;\nloop invariant x == 0 || x <= 4;\nloop invariant x == 0 || y >= 100;\nloop invariant x == 0 || y < 400;\nloop invariant x == 0 || y % 100 == 0;\nloop invariant x == 0 || x <= 4;\nloop invariant x == 0 || y >= 100;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 200;\nloop invariant x == 0 ==> y == 0;\nloop invariant x == 1 ==> 100 <= y <= 200;\nloop invariant x == 2 ==> 200 <= y <= 300;\nloop invariant x == 3 ==> 300 <= y <= 400;\nloop invariant x == 4 ==> 400 <= y <= 500;\nloop invariant x > 4 ==> 500 <= y <= 100000;\nloop invariant y > 100000 ==> x == 0;\nloop invariant x == 0 ==> y == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 200000;\nloop invariant x >= y / 100;\nloop invariant (y % 100 == 0);\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= 4;\nloop invariant -y <= y <= y;\nloop invariant y >= -y;\nloop invariant x >= 0;\nloop invariant y >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= 4;\nloop invariant x >= 4 ==> y > 2;\nloop invariant x < 0 ==> y < 0;\nloop invariant x < 4 ==> y >= 0;\nloop invariant x >= 0 ==> y >= 100 * (x - 1);\nloop invariant x >= 4 ==> y >= 100 * (x - 1) + 100;\nloop invariant x < 0 ==> y >= -100 * x;\nloop invariant x >= 0 ==> y >= -100 * x;\nloop invariant x < 4 ==> y <= 100 * (x - 1) + 100;\nloop invariant x >= 4 ==> y <= 100 * (x - 1) + 100;\nloop invariant x < 4 ==> y <= 100 * (x - 1) + 100;\nloop invariant x >= 4 ==> y <= 100 * (x - 1) + 100;\nloop invariant x < 4 ==> y <= 100 * (x - 1) + 100;\nloop invariant x >= 4 ==> y <= 100 * (x - 1) + 100;\nloop invariant x < 4 ==> y <= 100 * (x - 1) + 100;\nloop invariant x >= 4 ==> y <= 100 * (x - 1) + 100;\nloop invariant x < 4 ==> y <= 100 * (x - 1) + 100;\nloop invariant x >= 4 ==> y <= 100 * (x - 1) + 100;\nloop invariant x < 4 ==> y <= 100 * (x - 1) + 100;\nloop invariant x >= 4 ==> y <= 100 * (x - 1) + 100;\nloop invariant x < 4 ==> y <= 100 * (x - 1) + 100;\nloop invariant x >= 4 ==> y <= 100 * (x - 1) + 100;\nloop invariant x < 4 ==> y <= 100 * (x - 1) + 100;\nloop invariant x >= 4 ==> y <= 100 * (x - 1) + 100;\nloop invariant x < 4 ==> y <= 100 * (x - 1) + 100;\nloop invariant x >= 4 ==> y <= 100 * (x - 1) + 100;\nloop invariant x < 4 ==> y <= 100 * (x - 1) + 100;\nloop invariant x >= 4 ==> y <= 100 * (x - 1) + 100;\nloop invariant x < 4 ==> y <= 100 * (x - 1) + 100;\nloop invariant x >= 4 ==> y <= 100 * (x - 1) + 100;\nloop invariant x < 4 ==> y <= 100 * (x - 1) + 100;\nloop invariant x >= 4 ==> y <= 100 * (x - 1) + 100;\nloop invariant x < 4 ==> y <= 100 * (x - 1) + 100;\nloop invariant x >= 4 ==> y <= 100 * (x - 1) + 100;\nloop invariant x < 4 ==> y <= 100 * (x - 1) + 100;\nloop invariant x >= 4 ==> y <= 100 * (x - 1) + 100;\nloop invariant x < 4 ==> y <= 100 * (x - 1) + 100;\nloop invariant x >= 4 ==> y <= 100 * (x - 1) + 100;\nloop invariant x < 4 ==> y <= 100 * (x - 1) + 100;\nloop invariant x >= 4 ==> y <= 100 * (x - 1) + 100;\nloop invariant x < 4 ==> y <= 100 * (x - 1) + 100;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant (unknown2() ==> (y % 100 == 0));\nloop invariant (unknown3() ==> (y % 100 != 0));\nloop invariant ((unknown1() && unknown2()) ==> (x == (y / 100)));\nloop invariant ((unknown1() && unknown3() && x >= 4) ==> (x == (y / 100 + 1)));\nloop invariant ((unknown1() && unknown3() && x < 0) ==> (y == -y));\nloop invariant ((unknown1() && unknown3() && x >= 0) ==> (y == -y));\nloop invariant ((unknown1() && unknown2() && x < 4) ==> (y == (x * 100)));\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= 4;\nloop invariant 0 <= y <= 2;\nloop invariant y <= x * 100;\nloop invariant x <= 4 || y < 0;\nloop invariant y == x * 100 || y <= -x * 100;\nloop invariant y == x * 100 && x >= 4 || y == -x * 100 && x < 0;\nloop invariant x < 4 ==> x <= 4 && y <= 2;\nloop invariant y > 2 ==> y > 2 && x < 4;\nloop invariant x == 4 && y == 2;\nloop invariant x == 4 && y == -2;\nloop invariant x == 0 && y == 0;\nloop invariant x == 1 && y == 100;\nloop invariant x == 2 && y == 200;\nloop invariant x == 3 && y == 300;\nloop invariant x == 4 && y == 400;\nloop invariant x == 0 && y == -0;\nloop invariant x == 1 && y == -100;\nloop invariant x == 2 && y == -200;\nloop invariant x == 3 && y == -300;\nloop invariant x == 4 && y == -400;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 100000;\nloop invariant x < 4 ==> y > 2;\nloop invariant x >= 4 ==> y > 2;\nloop invariant x < 0 ==> y < 0;\nloop invariant x >= 0 ==> y > 0;\nloop invariant x < 0 ==> y = -y;\nloop invariant x >= 0 ==> y = y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x < 4;\nloop invariant 0 <= y;\nloop invariant y <= 400;\nloop invariant y > 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 2; assume(y >= 0 && y <= 2);\nloop invariant 0 <= x < 4; assume(x >= 0 && x < 4);\nloop invariant x >= (4 - (2 - y) * (y - 1) / 2); assume(x >= (4 - (2 - y) * (y - 1) / 2));\nloop invariant 0 <= y <= 2;\nloop invariant 0 <= x < 4;\nloop invariant x >= (4 - (2 - y) * (y - 1) / 2);\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 200;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x < 4 || y > 2;\nloop invariant x >= y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\nextern int unknown3();\n\nvoid main() {\n int x = 0, y = 0;\n /*@\n\n\nloop invariant i3: x >= 0;\nloop invariant i4: y >= 0;\nloop invariant i5: x < 4 || y > 2;\n\n*/\nwhile(unknown1()){\n   if(unknown2()){ \n      x++; \n      y+=100; \n   }\n   else if (unknown3()){ \n      if (x >= 4) { \n          x++; \n          y++; \n      } \n      if (x < 0){\n          y = -y;\n      }\n   }\n  \n }\n {;\n//@ assert(x < 4 || y > 2);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant ( x >= 0 && x <= 4 );\nloop invariant ( y >= 0 );\nloop invariant ( unknown1() ==> x < 4 || y > 2 );\nloop invariant ( unknown2() ==> x >= 0 && y >= 0 );\nloop invariant ( unknown3() ==> x >= 0 && y >= 0 );\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\nextern int unknown3();\n\nvoid main() {\n int x = 0, y = 0;\n /*@\n\n\n\n\n\n*/\nwhile(unknown1()){\n   if(unknown2()){ \n      x++; \n      y+=100; \n   }\n   else if (unknown3()){ \n      if (x >= 4) { \n          x++; \n          y++; \n      } \n      if (x < 0){\n          y = -y;\n      }\n   }\n  \n }\n {;\n//@ assert(x < 4 || y > 2);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y >= 100 * x;\nloop invariant x <= 3;\nloop invariant x < 3 ==> y > 2;\nloop invariant y <= y + 100;\nloop invariant y <= 100 * x + 100;\nloop invariant y >= 100 * x;\nloop invariant x >= 0;\nloop invariant x <= 3;\nloop invariant y >= 100 * x;\nloop invariant y <= 100 * x + 100;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y >= 100 * x;\nloop invariant x <= 3;\nloop invariant x < 3 ==> y > 2;\nloop invariant y <= y + 100;\nloop invariant y <= 100 * x + 100;\nloop invariant y >= 100 * x;\nloop invariant x >= 0;\nloop invariant x <= 3;\nloop invariant y >= 100 * x;\nloop invariant y <= 100 * x + 100;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y >= 100 * x;\nloop invariant x <= 3;\nloop invariant x < 3 ==> y > 2;\nloop invariant y <= y + 100;\nloop invariant y <= 100 * x + 100;\nloop invariant y >= 100 * x;\nloop invariant x >= 0;\nloop invariant x <= 3;\nloop invariant y >= 100 * x;\nloop invariant y <= 100 * x + 100;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y >= 100 * x;\nloop invariant x <= 3;\nloop invariant x < 3 ==> y > 2;\nloop invariant y <= y + 100;\nloop invariant y <= 100 * x + 100;\nloop invariant y >= 100 * x;\nloop invariant x >= 0;\nloop invariant x <= 3;\nloop invariant y >= 100 * x;\nloop invariant y <= 100 * x + 100;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y >= 100 * x;\nloop invariant x <= 3;\nloop invariant x < 3 ==> y > 2;\nloop invariant y <= y + 100;\nloop invariant y <= 100 * x + 100;\nloop invariant y >= 100 * x;\nloop invariant x >= 0;\nloop invariant x <= 3;\nloop invariant y >= 100 * x;\nloop invariant y <= 100 * x + 100;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y >= 100 * x;\nloop invariant x <= 3;\nloop invariant x < 3 ==> y > 2;\nloop invariant y <= y + 100;\nloop invariant y <= 100 * x + 100;\nloop invariant y >= 100 * x;\nloop invariant x >= 0;\nloop invariant x <= 3;\nloop invariant y >= 100 * x;\nloop invariant y <= 100 * x + 100;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y >= 100 * x;\nloop invariant x <= 3;\nloop invariant x < 3 ==> y > 2;\nloop invariant y <= y + 100;\nloop invariant y <= 100 * x + 100;\nloop invariant y >= 100 * x;\nloop invariant x >= 0;\nloop invariant x <= 3;\nloop invariant y >= 100 * x;\nloop invariant y <= 100 * x + 100;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y >= 100 * x;\nloop invariant x <= 3;\nloop invariant x < 3 ==> y > 2;\nloop invariant y <= y + 100;\nloop invariant y <= 100 * x + 100;\nloop invariant y >= 100 * x;\nloop invariant x >= 0;\nloop invariant x <= 3;\nloop invariant y >= 100 * x;\nloop invariant y <= 100 * x + 100;\nloop invariant y >= 0;\nloop invariant x >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\nextern int unknown3();\n\nvoid main() {\n int x = 0, y = 0;\n /*@\nloop invariant i1: y >= 0;\nloop invariant i2: x >= 0;\n\n\n\nloop invariant i6: y <= y + 100;\nloop invariant i7: y <= 100 * x + 100;\n*/\nwhile(unknown1()){\n   if(unknown2()){ \n      x++; \n      y+=100; \n   }\n   else if (unknown3()){ \n      if (x >= 4) { \n          x++; \n          y++; \n      } \n      if (x < 0){\n          y = -y;\n      }\n   }\n  \n }\n {;\n//@ assert(x < 4 || y > 2);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 200;\nloop invariant x < 4 ==> y > 2;\nloop invariant x >= 4 ==> y <= 2;\nloop invariant x < 0 ==> y >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\nextern int unknown3();\n\nvoid main() {\n int x = 0, y = 0;\n /*@\n\n\n\n\n\n*/\nwhile(unknown1()){\n   if(unknown2()){ \n      x++; \n      y+=100; \n   }\n   else if (unknown3()){ \n      if (x >= 4) { \n          x++; \n          y++; \n      } \n      if (x < 0){\n          y = -y;\n      }\n   }\n  \n }\n {;\n//@ assert(x < 4 || y > 2);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 3;\nloop invariant 0 <= y <= 300;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\nloop invariant x => y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\nextern int unknown3();\n\nvoid main() {\n int x = 0, y = 0;\n /*@\n\n\n\n*/\nwhile(unknown1()){\n   if(unknown2()){ \n      x++; \n      y+=100; \n   }\n   else if (unknown3()){ \n      if (x >= 4) { \n          x++; \n          y++; \n      } \n      if (x < 0){\n          y = -y;\n      }\n   }\n  \n }\n {;\n//@ assert(x < 4 || y > 2);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 8,
                "annotations": "```\n/*@\nloop invariant x <= 4;\nloop invariant y > 100;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y < 400;\nloop invariant y % 100 == 0;\nloop invariant x < 1 + y / 100;\nloop invariant y >= 100 * x / 4;\nloop invariant x * 100 <= y;\nloop invariant x < 4 || y > 2;\nloop invariant x == 0 || y > 2;\nloop invariant x == 0 || y >= 0;\nloop invariant x == 0 || y > 100;\nloop invariant x == 0 || y < 400;\nloop invariant x == 0 || y % 100 == 0;\nloop invariant x == 0 || x <= 4;\nloop invariant x == 0 || y >= 100;\nloop invariant x == 0 || y < 400;\nloop invariant x == 0 || y % 100 == 0;\nloop invariant x == 0 || x <= 4;\nloop invariant x == 0 || y >= 100;\nloop invariant x == 0 || y < 400;\nloop invariant x == 0 || y % 100 == 0;\nloop invariant x == 0 || x <= 4;\nloop invariant x == 0 || y >= 100;\nloop invariant x == 0 || y < 400;\nloop invariant x == 0 || y % 100 == 0;\nloop invariant x == 0 || x <= 4;\nloop invariant x == 0 || y >= 100;\nloop invariant x == 0 || y < 400;\nloop invariant x == 0 || y % 100 == 0;\nloop invariant x == 0 || x <= 4;\nloop invariant x == 0 || y >= 100;\nloop invariant x == 0 || y < 400;\nloop invariant x == 0 || y % 100 == 0;\nloop invariant x == 0 || x <= 4;\nloop invariant x == 0 || y >= 100;\nloop invariant x == 0 || y < 400;\nloop invariant x == 0 || y % 100 == 0;\nloop invariant x == 0 || x <= 4;\nloop invariant x == 0 || y >= 100;\nloop invariant x == 0 || y < 400;\nloop invariant x == 0 || y % 100 == 0;\nloop invariant x == 0 || x <= 4;\nloop invariant x == 0 || y >= 100;\nloop invariant x == 0 || y < 400;\nloop invariant x == 0 || y % 100 == 0;\nloop invariant x == 0 || x <= 4;\nloop invariant x == 0 || y >= 100;\nloop invariant x == 0 || y < 400;\nloop invariant x == 0 || y % 100 == 0;\nloop invariant x == 0 || x <= 4;\nloop invariant x == 0 || y >= 100;\nloop invariant x == 0 || y < 400;\nloop invariant x == 0 || y % 100 == 0;\nloop invariant x == 0 || x <= 4;\nloop invariant x == 0 || y >= 100;\nloop invariant x == 0 || y < 400;\nloop invariant x == 0 || y % 100 == 0;\nloop invariant x == 0 || x <= 4;\nloop invariant x == 0 || y >= 100;\nloop invariant x == 0 || y < 400;\nloop invariant x == 0 || y % 100 == 0;\nloop invariant x == 0 || x <= 4;\nloop invariant x == 0 || y >= 100;\nloop invariant x == 0 || y < 400;\nloop invariant x == 0 || y % 100 == 0;\nloop invariant x == 0 || x <= 4;\nloop invariant x == 0 || y >= 100;\nloop invariant x == 0 || y < 400;\nloop invariant x == 0 || y % 100 == 0;\nloop invariant x == 0 || x <= 4;\nloop invariant x == 0 || y >= 100;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\nextern int unknown3();\n\nvoid main() {\n int x = 0, y = 0;\n /*@\n\n\nloop invariant i3: x >= 0;\nloop invariant i4: y >= 0;\n\n\n\n\n\nloop invariant i10: x < 4 || y > 2;\nloop invariant i11: x == 0 || y > 2;\nloop invariant i12: x == 0 || y >= 0;\n\n\n\n\nloop invariant i17: x == 0 || y >= 100;\n*/\nwhile(unknown1()){\n   if(unknown2()){ \n      x++; \n      y+=100; \n   }\n   else if (unknown3()){ \n      if (x >= 4) { \n          x++; \n          y++; \n      } \n      if (x < 0){\n          y = -y;\n      }\n   }\n  \n }\n {;\n//@ assert(x < 4 || y > 2);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 200;\nloop invariant x == 0 ==> y == 0;\nloop invariant x == 1 ==> 100 <= y <= 200;\nloop invariant x == 2 ==> 200 <= y <= 300;\nloop invariant x == 3 ==> 300 <= y <= 400;\nloop invariant x == 4 ==> 400 <= y <= 500;\nloop invariant x > 4 ==> 500 <= y <= 100000;\nloop invariant y > 100000 ==> x == 0;\nloop invariant x == 0 ==> y == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\nextern int unknown3();\n\nvoid main() {\n int x = 0, y = 0;\n /*@\n\n\n\n\n\n\n\n\n\n*/\nwhile(unknown1()){\n   if(unknown2()){ \n      x++; \n      y+=100; \n   }\n   else if (unknown3()){ \n      if (x >= 4) { \n          x++; \n          y++; \n      } \n      if (x < 0){\n          y = -y;\n      }\n   }\n  \n }\n {;\n//@ assert(x < 4 || y > 2);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 200000;\nloop invariant x >= y / 100;\nloop invariant (y % 100 == 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\nextern int unknown3();\n\nvoid main() {\n int x = 0, y = 0;\n /*@\n\n\n\n\n*/\nwhile(unknown1()){\n   if(unknown2()){ \n      x++; \n      y+=100; \n   }\n   else if (unknown3()){ \n      if (x >= 4) { \n          x++; \n          y++; \n      } \n      if (x < 0){\n          y = -y;\n      }\n   }\n  \n }\n {;\n//@ assert(x < 4 || y > 2);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= 4;\nloop invariant -y <= y <= y;\nloop invariant y >= -y;\nloop invariant x >= 0;\nloop invariant y >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\nextern int unknown3();\n\nvoid main() {\n int x = 0, y = 0;\n /*@\n\nloop invariant i2: -y <= y <= y;\nloop invariant i3: y >= -y;\nloop invariant i4: x >= 0;\nloop invariant i5: y >= 0;\n*/\nwhile(unknown1()){\n   if(unknown2()){ \n      x++; \n      y+=100; \n   }\n   else if (unknown3()){ \n      if (x >= 4) { \n          x++; \n          y++; \n      } \n      if (x < 0){\n          y = -y;\n      }\n   }\n  \n }\n {;\n//@ assert(x < 4 || y > 2);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= 4;\nloop invariant x >= 4 ==> y > 2;\nloop invariant x < 0 ==> y < 0;\nloop invariant x < 4 ==> y >= 0;\nloop invariant x >= 0 ==> y >= 100 * (x - 1);\nloop invariant x >= 4 ==> y >= 100 * (x - 1) + 100;\nloop invariant x < 0 ==> y >= -100 * x;\nloop invariant x >= 0 ==> y >= -100 * x;\nloop invariant x < 4 ==> y <= 100 * (x - 1) + 100;\nloop invariant x >= 4 ==> y <= 100 * (x - 1) + 100;\nloop invariant x < 4 ==> y <= 100 * (x - 1) + 100;\nloop invariant x >= 4 ==> y <= 100 * (x - 1) + 100;\nloop invariant x < 4 ==> y <= 100 * (x - 1) + 100;\nloop invariant x >= 4 ==> y <= 100 * (x - 1) + 100;\nloop invariant x < 4 ==> y <= 100 * (x - 1) + 100;\nloop invariant x >= 4 ==> y <= 100 * (x - 1) + 100;\nloop invariant x < 4 ==> y <= 100 * (x - 1) + 100;\nloop invariant x >= 4 ==> y <= 100 * (x - 1) + 100;\nloop invariant x < 4 ==> y <= 100 * (x - 1) + 100;\nloop invariant x >= 4 ==> y <= 100 * (x - 1) + 100;\nloop invariant x < 4 ==> y <= 100 * (x - 1) + 100;\nloop invariant x >= 4 ==> y <= 100 * (x - 1) + 100;\nloop invariant x < 4 ==> y <= 100 * (x - 1) + 100;\nloop invariant x >= 4 ==> y <= 100 * (x - 1) + 100;\nloop invariant x < 4 ==> y <= 100 * (x - 1) + 100;\nloop invariant x >= 4 ==> y <= 100 * (x - 1) + 100;\nloop invariant x < 4 ==> y <= 100 * (x - 1) + 100;\nloop invariant x >= 4 ==> y <= 100 * (x - 1) + 100;\nloop invariant x < 4 ==> y <= 100 * (x - 1) + 100;\nloop invariant x >= 4 ==> y <= 100 * (x - 1) + 100;\nloop invariant x < 4 ==> y <= 100 * (x - 1) + 100;\nloop invariant x >= 4 ==> y <= 100 * (x - 1) + 100;\nloop invariant x < 4 ==> y <= 100 * (x - 1) + 100;\nloop invariant x >= 4 ==> y <= 100 * (x - 1) + 100;\nloop invariant x < 4 ==> y <= 100 * (x - 1) + 100;\nloop invariant x >= 4 ==> y <= 100 * (x - 1) + 100;\nloop invariant x < 4 ==> y <= 100 * (x - 1) + 100;\nloop invariant x >= 4 ==> y <= 100 * (x - 1) + 100;\nloop invariant x < 4 ==> y <= 100 * (x - 1) + 100;\nloop invariant x >= 4 ==> y <= 100 * (x - 1) + 100;\nloop invariant x < 4 ==> y <= 100 * (x - 1) + 100;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\nextern int unknown3();\n\nvoid main() {\n int x = 0, y = 0;\n /*@\n\nloop invariant i2: x >= 4 ==> y > 2;\nloop invariant i3: x < 0 ==> y < 0;\nloop invariant i4: x < 4 ==> y >= 0;\n\n\nloop invariant i7: x < 0 ==> y >= -100 * x;\nloop invariant i8: x >= 0 ==> y >= -100 * x;\nloop invariant i9: x < 4 ==> y <= 100 * (x - 1) + 100;\nloop invariant i10: x >= 4 ==> y <= 100 * (x - 1) + 100;\n*/\nwhile(unknown1()){\n   if(unknown2()){ \n      x++; \n      y+=100; \n   }\n   else if (unknown3()){ \n      if (x >= 4) { \n          x++; \n          y++; \n      } \n      if (x < 0){\n          y = -y;\n      }\n   }\n  \n }\n {;\n//@ assert(x < 4 || y > 2);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 9,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant (unknown2() ==> (y % 100 == 0));\nloop invariant (unknown3() ==> (y % 100 != 0));\nloop invariant ((unknown1() && unknown2()) ==> (x == (y / 100)));\nloop invariant ((unknown1() && unknown3() && x >= 4) ==> (x == (y / 100 + 1)));\nloop invariant ((unknown1() && unknown3() && x < 0) ==> (y == -y));\nloop invariant ((unknown1() && unknown3() && x >= 0) ==> (y == -y));\nloop invariant ((unknown1() && unknown2() && x < 4) ==> (y == (x * 100)));\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\nextern int unknown3();\n\nvoid main() {\n int x = 0, y = 0;\n /*@\n\n\n\n\n\n\n\n\n\n*/\nwhile(unknown1()){\n   if(unknown2()){ \n      x++; \n      y+=100; \n   }\n   else if (unknown3()){ \n      if (x >= 4) { \n          x++; \n          y++; \n      } \n      if (x < 0){\n          y = -y;\n      }\n   }\n  \n }\n {;\n//@ assert(x < 4 || y > 2);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 18,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= 4;\nloop invariant 0 <= y <= 2;\nloop invariant y <= x * 100;\nloop invariant x <= 4 || y < 0;\nloop invariant y == x * 100 || y <= -x * 100;\nloop invariant y == x * 100 && x >= 4 || y == -x * 100 && x < 0;\nloop invariant x < 4 ==> x <= 4 && y <= 2;\nloop invariant y > 2 ==> y > 2 && x < 4;\nloop invariant x == 4 && y == 2;\nloop invariant x == 4 && y == -2;\nloop invariant x == 0 && y == 0;\nloop invariant x == 1 && y == 100;\nloop invariant x == 2 && y == 200;\nloop invariant x == 3 && y == 300;\nloop invariant x == 4 && y == 400;\nloop invariant x == 0 && y == -0;\nloop invariant x == 1 && y == -100;\nloop invariant x == 2 && y == -200;\nloop invariant x == 3 && y == -300;\nloop invariant x == 4 && y == -400;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\nextern int unknown3();\n\nvoid main() {\n int x = 0, y = 0;\n /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile(unknown1()){\n   if(unknown2()){ \n      x++; \n      y+=100; \n   }\n   else if (unknown3()){ \n      if (x >= 4) { \n          x++; \n          y++; \n      } \n      if (x < 0){\n          y = -y;\n      }\n   }\n  \n }\n {;\n//@ assert(x < 4 || y > 2);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 100000;\nloop invariant x < 4 ==> y > 2;\nloop invariant x >= 4 ==> y > 2;\nloop invariant x < 0 ==> y < 0;\nloop invariant x >= 0 ==> y > 0;\nloop invariant x < 0 ==> y = -y;\nloop invariant x >= 0 ==> y = y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\nextern int unknown3();\n\nvoid main() {\n int x = 0, y = 0;\n /*@\n\n\n\n\n\n\n\n\n*/\nwhile(unknown1()){\n   if(unknown2()){ \n      x++; \n      y+=100; \n   }\n   else if (unknown3()){ \n      if (x >= 4) { \n          x++; \n          y++; \n      } \n      if (x < 0){\n          y = -y;\n      }\n   }\n  \n }\n {;\n//@ assert(x < 4 || y > 2);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x < 4;\nloop invariant 0 <= y;\nloop invariant y <= 400;\nloop invariant y > 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\nextern int unknown3();\n\nvoid main() {\n int x = 0, y = 0;\n /*@\n\n\n\n\n*/\nwhile(unknown1()){\n   if(unknown2()){ \n      x++; \n      y+=100; \n   }\n   else if (unknown3()){ \n      if (x >= 4) { \n          x++; \n          y++; \n      } \n      if (x < 0){\n          y = -y;\n      }\n   }\n  \n }\n {;\n//@ assert(x < 4 || y > 2);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 2; assume(y >= 0 && y <= 2);\nloop invariant 0 <= x < 4; assume(x >= 0 && x < 4);\nloop invariant x >= (4 - (2 - y) * (y - 1) / 2); assume(x >= (4 - (2 - y) * (y - 1) / 2));\nloop invariant 0 <= y <= 2;\nloop invariant 0 <= x < 4;\nloop invariant x >= (4 - (2 - y) * (y - 1) / 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\nextern int unknown3();\n\nvoid main() {\n int x = 0, y = 0;\n /*@\n\n\n\n\n\n\n*/\nwhile(unknown1()){\n   if(unknown2()){ \n      x++; \n      y+=100; \n   }\n   else if (unknown3()){ \n      if (x >= 4) { \n          x++; \n          y++; \n      } \n      if (x < 0){\n          y = -y;\n      }\n   }\n  \n }\n {;\n//@ assert(x < 4 || y > 2);\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 22: unexpected token ')'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\nextern int unknown3();\n\nvoid main() {\n int x = 0, y = 0;\n /*@\nloop invariant i1: 0 <= x <= 4;\nloop invariant i2: 0 <= y <= 200;\nloop invariant i3: x >= 0;\nloop invariant i4: y >= 0;\nloop invariant i5: x < 4 || y > 2;\nloop invariant i6: x >= y;\nloop invariant i7: ( x >= 0 && x <= 4 );\nloop invariant i8: ( y >= 0 );\nloop invariant i9: ( unknown1() ==> x < 4 || y > 2 );\nloop invariant i10: ( unknown2() ==> x >= 0 && y >= 0 );\nloop invariant i11: ( unknown3() ==> x >= 0 && y >= 0 );\nloop invariant i12: y >= 100 * x;\nloop invariant i13: x <= 3;\nloop invariant i14: x < 3 ==> y > 2;\nloop invariant i15: y <= y + 100;\nloop invariant i16: y <= 100 * x + 100;\nloop invariant i17: x < 4 ==> y > 2;\nloop invariant i18: x >= 4 ==> y <= 2;\nloop invariant i19: x < 0 ==> y >= 0;\nloop invariant i20: 0 <= x <= 3;\nloop invariant i21: 0 <= y <= 300;\nloop invariant i22: x => y;\nloop invariant i23: x <= 4;\nloop invariant i24: y > 100;\nloop invariant i25: y < 400;\nloop invariant i26: y % 100 == 0;\nloop invariant i27: x < 1 + y / 100;\nloop invariant i28: y >= 100 * x / 4;\nloop invariant i29: x * 100 <= y;\nloop invariant i30: x == 0 || y > 2;\nloop invariant i31: x == 0 || y >= 0;\nloop invariant i32: x == 0 || y > 100;\nloop invariant i33: x == 0 || y < 400;\nloop invariant i34: x == 0 || y % 100 == 0;\nloop invariant i35: x == 0 || x <= 4;\nloop invariant i36: x == 0 || y >= 100;\nloop invariant i37: x == 0 ==> y == 0;\nloop invariant i38: x == 1 ==> 100 <= y <= 200;\nloop invariant i39: x == 2 ==> 200 <= y <= 300;\nloop invariant i40: x == 3 ==> 300 <= y <= 400;\nloop invariant i41: x == 4 ==> 400 <= y <= 500;\nloop invariant i42: x > 4 ==> 500 <= y <= 100000;\nloop invariant i43: y > 100000 ==> x == 0;\nloop invariant i44: 0 <= y <= 200000;\nloop invariant i45: x >= y / 100;\nloop invariant i46: (y % 100 == 0);\nloop invariant i47: 1 <= x <= 4;\nloop invariant i48: -y <= y <= y;\nloop invariant i49: y >= -y;\nloop invariant i50: x >= 4 ==> y > 2;\nloop invariant i51: x < 0 ==> y < 0;\nloop invariant i52: x < 4 ==> y >= 0;\nloop invariant i53: x >= 0 ==> y >= 100 * (x - 1);\nloop invariant i54: x >= 4 ==> y >= 100 * (x - 1) + 100;\nloop invariant i55: x < 0 ==> y >= -100 * x;\nloop invariant i56: x >= 0 ==> y >= -100 * x;\nloop invariant i57: x < 4 ==> y <= 100 * (x - 1) + 100;\nloop invariant i58: x >= 4 ==> y <= 100 * (x - 1) + 100;\nloop invariant i59: 0 <= y <= 100000;\nloop invariant i60: x >= (1 + (y - 1) * y / 2);\nloop invariant i61: (unknown2() ==> (y % 100 == 0));\nloop invariant i62: (unknown3() ==> (y % 100 != 0));\nloop invariant i63: ((unknown1() && unknown2()) ==> (x == (y / 100)));\nloop invariant i64: ((unknown1() && unknown3() && x >= 4) ==> (x == (y / 100 + 1)));\nloop invariant i65: ((unknown1() && unknown3() && x < 0) ==> (y == -y));\nloop invariant i66: ((unknown1() && unknown3() && x >= 0) ==> (y == -y));\nloop invariant i67: ((unknown1() && unknown2() && x < 4) ==> (y == (x * 100)));\nloop invariant i68: 0 <= y <= 2;\nloop invariant i69: y <= x * 100;\nloop invariant i70: x <= 4 || y < 0;\nloop invariant i71: y == x * 100 || y <= -x * 100;\nloop invariant i72: y == x * 100 && x >= 4 || y == -x * 100 && x < 0;\nloop invariant i73: x < 4 ==> x <= 4 && y <= 2;\nloop invariant i74: y > 2 ==> y > 2 && x < 4;\nloop invariant i75: x == 4 && y == 2;\nloop invariant i76: x == 4 && y == -2;\nloop invariant i77: x == 0 && y == 0;\nloop invariant i78: x == 1 && y == 100;\nloop invariant i79: x == 2 && y == 200;\nloop invariant i80: x == 3 && y == 300;\nloop invariant i81: x == 4 && y == 400;\nloop invariant i82: x == 0 && y == -0;\nloop invariant i83: x == 1 && y == -100;\nloop invariant i84: x == 2 && y == -200;\nloop invariant i85: x == 3 && y == -300;\nloop invariant i86: x == 4 && y == -400;\nloop invariant i87: x >= 0 ==> y > 0;\nloop invariant i88: x < 0 ==> y = -y;\nloop invariant i89: x >= 0 ==> y = y;\nloop invariant i90: 0 <= x < 4;\nloop invariant i91: 0 <= y;\nloop invariant i92: y <= 400;\nloop invariant i93: y > 2;\nloop invariant i94: 0 <= y <= 2; assume(y >= 0 && y <= 2);\nloop invariant i95: 0 <= x < 4; assume(x >= 0 && x < 4);\nloop invariant i96: x >= (4 - (2 - y) * (y - 1) / 2); assume(x >= (4 - (2 - y) * (y - 1) / 2));\nloop invariant i97: x >= (4 - (2 - y) * (y - 1) / 2);\n*/\nwhile(unknown1()){\n   if(unknown2()){ \n      x++; \n      y+=100; \n   }\n   else if (unknown3()){ \n      if (x >= 4) { \n          x++; \n          y++; \n      } \n      if (x < 0){\n          y = -y;\n      }\n   }\n  \n }\n {;\n//@ assert(x < 4 || y > 2);\n}\n\n}",
        "combined_annotation_num_solver_calls": 63,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\nextern int unknown3();\n\nvoid main() {\n int x = 0, y = 0;\n /*@\n\n\nloop invariant i3: x >= 0;\nloop invariant i4: y >= 0;\nloop invariant i5: x < 4 || y > 2;\n\n\nloop invariant i8: ( y >= 0 );\n\n\n\n\n\n\nloop invariant i15: y <= y + 100;\nloop invariant i16: y <= 100 * x + 100;\n\n\nloop invariant i19: x < 0 ==> y >= 0;\n\n\n\n\n\n\n\n\n\n\nloop invariant i30: x == 0 || y > 2;\nloop invariant i31: x == 0 || y >= 0;\n\n\n\n\nloop invariant i36: x == 0 || y >= 100;\nloop invariant i37: x == 0 ==> y == 0;\nloop invariant i38: x == 1 ==> 100 <= y <= 200;\nloop invariant i39: x == 2 ==> 200 <= y <= 300;\nloop invariant i40: x == 3 ==> 300 <= y <= 400;\nloop invariant i41: x == 4 ==> 400 <= y <= 500;\n\n\n\nloop invariant i45: x >= y / 100;\n\n\nloop invariant i48: -y <= y <= y;\nloop invariant i49: y >= -y;\nloop invariant i50: x >= 4 ==> y > 2;\nloop invariant i51: x < 0 ==> y < 0;\nloop invariant i52: x < 4 ==> y >= 0;\n\n\nloop invariant i55: x < 0 ==> y >= -100 * x;\nloop invariant i56: x >= 0 ==> y >= -100 * x;\nloop invariant i57: x < 4 ==> y <= 100 * (x - 1) + 100;\nloop invariant i58: x >= 4 ==> y <= 100 * (x - 1) + 100;\n\n\n\n\n\n\n\n\n\n\nloop invariant i69: y <= x * 100;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i91: 0 <= y;\n\n\n\n\n\n\n*/\nwhile(unknown1()){\n   if(unknown2()){ \n      x++; \n      y+=100; \n   }\n   else if (unknown3()){ \n      if (x >= 4) { \n          x++; \n          y++; \n      } \n      if (x < 0){\n          y = -y;\n      }\n   }\n  \n }\n {;\n//@ assert(x < 4 || y > 2);\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/split.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/08.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/02.c"
        ],
        "skipped": [],
        "total": 105,
        "success_count": 89,
        "failure_count": 16,
        "success_rate": 0.8476190476190476
    }
}