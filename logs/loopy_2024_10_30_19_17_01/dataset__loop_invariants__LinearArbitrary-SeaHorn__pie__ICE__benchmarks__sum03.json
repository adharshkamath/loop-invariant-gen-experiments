{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#define a (1)\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  while(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n  }\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant x >= 0;\nloop invariant sn == x * a;\nloop invariant x <= loop1 + 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= loop1;\nloop invariant sn >= 0;\nloop invariant sn <= loop1 * a;\nloop invariant sn == x * a;\nloop invariant x >= 0;\nloop invariant x <= loop1;\nloop invariant sn <= loop1 * a ==> sn == x * a;\nloop invariant x <= loop1 ==> sn == x * a;\nloop invariant x <= loop1 ==> sn <= loop1 * a;\nloop invariant x <= loop1 ==> x * a <= loop1 * a;\nloop invariant x <= loop1 ==> sn <= x * a;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= 2^31 - 1;\nloop invariant sn == x * a or sn == 0;\nloop invariant sn == x * a implies (x > 0);\nloop invariant sn == 0 implies (x == 0);\nloop invariant sn == x * a implies (sn >= 0);\nloop invariant sn == 0 implies (sn == 0);\nloop invariant sn == x * a implies (sn <= 2^31 - 1);\nloop invariant sn == 0 implies (sn <= 2^31 - 1);\nloop invariant sn == x * a implies (sn >= x * a);\nloop invariant sn == 0 implies (sn <= x * a);\nloop invariant sn == x * a implies (sn is integer);\nloop invariant sn == 0 implies (sn is integer);\nloop invariant sn == x * a implies (x is integer);\nloop invariant sn == 0 implies (x is integer);\nloop invariant sn == x * a implies (a is integer);\nloop invariant sn == 0 implies (a is integer);\n*/\n```",
            "```\n/*@\nloop invariant x >= 0;\nloop invariant sn == x * a;\nloop invariant sn >= 0;\nloop invariant sn <= x * a;\nloop invariant x >= 0;\nloop invariant x <= n1;\nloop invariant sn >= 0;\nloop invariant sn <= x * a;\nloop invariant sn >= x * a;\nloop invariant sn == 0;\n*/\n```",
            "```\n/*@\nloop invariant sn >= x*a; loop invariant x <= loop1; loop invariant sn <= x*a; loop invariant x >= 0; loop invariant x <= loop1; loop invariant sn <= x*a; loop invariant sn >= x*a; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= sn <= n1; loop invariant x >= 0; loop invariant x <= loop1; loop invariant sn <= x*a;\n*/\n```",
            "```\n/*@\nloop invariant sn == x*a || sn == 0;\nloop invariant 0 <= sn <= x*a;\nloop invariant 0 <= x <= loop1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= loop1 <= 1;\nloop invariant 0 <= n1 <= 1;\nloop invariant loop1 == 0 || n1 == 0;\nloop invariant n1 == 0 || loop1 == 1;\nloop invariant loop1 == 1 || n1 == 1;\n*/\n```",
            "```\n/*@\nloop invariant x >= 0;\nloop invariant sn >= 0;\nloop invariant sn <= x * a;\nloop invariant sn == x * a;\nloop invariant x == sn / a;\nloop invariant sn == 0 ==> x == 0;\nloop invariant x == 0 ==> sn == 0;\nloop invariant a == 1;\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 1;\nloop invariant sn == x*a;\nloop invariant sn == 0 ==> x == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= sn;\nloop invariant sn <= x*a;\nloop invariant x >= 0;\nloop invariant x <= 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= loop1;\nloop invariant 0 <= sn <= x*a;\nloop invariant sn >= 0;\nloop invariant sn <= x*a;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n1;\nloop invariant sn == x*a || (x == 0 && sn == 0);\nloop invariant sn == x*a ==> x == sn / a;\nloop invariant x == sn / a ==> sn == x*a;\nloop invariant x == sn / a && x <= n1 ==> sn == x*a;\nloop invariant sn == x*a && x <= n1 ==> x == sn / a;\nloop invariant sn == x*a && 0 <= x <= n1 ==> x == sn / a;\nloop invariant x == sn / a && 0 <= x <= n1 ==> sn == x*a;\nloop invariant sn == x*a && x == sn / a ==> 0 <= x <= n1;\nloop invariant x == sn / a && sn == x*a ==> 0 <= x <= n1;\nloop invariant sn == x*a && sn == x*a ==> 0 <= x <= n1;\nloop invariant sn == x*a && sn == x*a ==> 0 <= x <= n1;\nloop invariant x == sn / a && sn == x*a ==> 0 <= x <= n1;\nloop invariant sn == x*a && x == sn / a ==> 0 <= x <= n1;\nloop invariant sn == x*a && x == sn / a ==> 0 <= x <= n1;\nloop invariant sn == x*a && 0 <= x <= n1 ==> 0 <= x <= n1;\nloop invariant x == sn / a && sn == x*a ==> 0 <= x <= n1;\nloop invariant sn == x*a && sn == x*a ==> 0 <= x <= n1;\nloop invariant sn == x*a && sn == x*a ==> 0 <= x <= n1;\nloop invariant sn == x*a && 0 <= x <= n1 ==> 0 <= x <= n1;\nloop invariant x == sn / a && sn == x*a ==> 0 <= x <= n1;\nloop invariant sn == x*a && sn == x*a ==> 0 <= x <= n1;\nloop invariant sn == x*a && sn == x*a ==> 0 <= x <= n1;\nloop invariant sn == x*a && 0 <= x <= n1 ==> 0 <= x <= n1;\nloop invariant x == sn / a && sn == x*a ==> 0 <= x <= n1;\nloop invariant sn == x*a && sn == x*a ==> 0 <= x <= n1;\nloop invariant sn == x*a && sn == x*a ==> 0 <= x <= n1;\nloop invariant sn == x*a && 0 <= x <= n1 ==> 0 <= x <= n1;\nloop invariant x == sn / a && sn == x*a ==> 0 <= x <= n1;\nloop invariant sn == x*a && sn == x*a ==> 0 <= x <= n1;\nloop invariant sn == x*a && sn == x*a ==> 0 <= x <= n1;\nloop invariant sn == x*a && 0 <= x <= n1 ==> 0 <= x <= n1;\nloop invariant x == sn / a && sn == x*a ==> 0 <= x <= n1;\nloop invariant sn == x*a && sn == x*a ==> 0 <= x <= n1;\nloop invariant sn == x*a && sn == x*a ==> 0 <= x <= n1;\nloop invariant sn == x*a && 0 <= x <= n1 ==> 0 <= x <= n1;\nloop invariant x == sn / a && sn == x*a ==> 0 <= x <= n1;\nloop invariant sn == x*a && sn == x*a ==> 0 <= x <= n1;\nloop invariant sn == x*a && sn == x*a ==> 0 <= x <= n1;\nloop invariant sn == x*a && 0 <= x <= n1 ==> 0 <= x <= n1;\nloop invariant x == sn / a && sn == x*a ==> 0 <= x <= n1;\nloop invariant sn == x*a && sn == x*a ==> 0 <= x <= n1;\nloop invariant sn == x*a && sn == x*a ==> 0 <= x <= n1;\nloop invariant sn == x*a && 0 <= x <= n1 ==> 0 <= x <= n1;\nloop invariant x == sn / a && sn == x*a ==> 0 <= x <= n1;\nloop invariant sn == x*a && sn == x*a ==> 0 <= x <= n1;\nloop invariant sn == x*a && sn == x*a ==> 0 <= x <= n1;\nloop invariant sn == x*a && 0 <= x <= n1 ==> 0 <= x <= n1;\nloop invariant x == sn / a && sn == x*a ==> 0 <= x <= n1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= sn;\nloop invariant sn <= x * a;\nloop invariant x <= loop1;\nloop invariant n1 <= loop1;\nloop invariant a == 1;\nloop invariant x >= 0;\nloop invariant sn >= 0;\nloop invariant sn <= loop1 * a;\nloop invariant x <= n1 + 1;\nloop invariant sn <= (n1 + 1) * a;\nloop invariant x <= n1 + 1;\nloop invariant sn <= (n1 + 1) * a;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant x >= 0;\nloop invariant sn == x * a;\nloop invariant x <= loop1 + 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#define a (1)\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  /*@\nloop invariant i1: x >= 0;\nloop invariant i2: sn == x * a;\n\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n  }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= loop1;\nloop invariant sn >= 0;\nloop invariant sn <= loop1 * a;\nloop invariant sn == x * a;\nloop invariant x >= 0;\nloop invariant x <= loop1;\nloop invariant sn <= loop1 * a ==> sn == x * a;\nloop invariant x <= loop1 ==> sn == x * a;\nloop invariant x <= loop1 ==> sn <= loop1 * a;\nloop invariant x <= loop1 ==> x * a <= loop1 * a;\nloop invariant x <= loop1 ==> sn <= x * a;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#define a (1)\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  /*@\n\nloop invariant i2: sn >= 0;\n\nloop invariant i4: sn == x * a;\nloop invariant i5: x >= 0;\n\nloop invariant i7: sn <= loop1 * a ==> sn == x * a;\nloop invariant i8: x <= loop1 ==> sn == x * a;\nloop invariant i9: x <= loop1 ==> sn <= loop1 * a;\nloop invariant i10: x <= loop1 ==> x * a <= loop1 * a;\nloop invariant i11: x <= loop1 ==> sn <= x * a;\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n  }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 16,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= 2^31 - 1;\nloop invariant sn == x * a or sn == 0;\nloop invariant sn == x * a implies (x > 0);\nloop invariant sn == 0 implies (x == 0);\nloop invariant sn == x * a implies (sn >= 0);\nloop invariant sn == 0 implies (sn == 0);\nloop invariant sn == x * a implies (sn <= 2^31 - 1);\nloop invariant sn == 0 implies (sn <= 2^31 - 1);\nloop invariant sn == x * a implies (sn >= x * a);\nloop invariant sn == 0 implies (sn <= x * a);\nloop invariant sn == x * a implies (sn is integer);\nloop invariant sn == 0 implies (sn is integer);\nloop invariant sn == x * a implies (x is integer);\nloop invariant sn == 0 implies (x is integer);\nloop invariant sn == x * a implies (a is integer);\nloop invariant sn == 0 implies (a is integer);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#define a (1)\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant x >= 0;\nloop invariant sn == x * a;\nloop invariant sn >= 0;\nloop invariant sn <= x * a;\nloop invariant x >= 0;\nloop invariant x <= n1;\nloop invariant sn >= 0;\nloop invariant sn <= x * a;\nloop invariant sn >= x * a;\nloop invariant sn == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#define a (1)\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  /*@\nloop invariant i1: x >= 0;\nloop invariant i2: sn == x * a;\nloop invariant i3: sn >= 0;\nloop invariant i4: sn <= x * a;\n\nloop invariant i6: sn >= x * a;\n\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n  }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant sn >= x*a; loop invariant x <= loop1; loop invariant sn <= x*a; loop invariant x >= 0; loop invariant x <= loop1; loop invariant sn <= x*a; loop invariant sn >= x*a; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#define a (1)\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  /*@\nloop invariant i1: sn >= x*a; loop invariant x <= loop1; loop invariant sn <= x*a; loop invariant x >= 0; loop invariant x <= loop1; loop invariant sn <= x*a; loop invariant sn >= x*a; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a;\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= sn <= n1; loop invariant x >= 0; loop invariant x <= loop1; loop invariant sn <= x*a;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#define a (1)\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  /*@\n\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant sn == x*a || sn == 0;\nloop invariant 0 <= sn <= x*a;\nloop invariant 0 <= x <= loop1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#define a (1)\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  /*@\nloop invariant i1: sn == x*a || sn == 0;\nloop invariant i2: 0 <= sn <= x*a;\n\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= loop1 <= 1;\nloop invariant 0 <= n1 <= 1;\nloop invariant loop1 == 0 || n1 == 0;\nloop invariant n1 == 0 || loop1 == 1;\nloop invariant loop1 == 1 || n1 == 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#define a (1)\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  /*@\n\n\n\n\n\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant x >= 0;\nloop invariant sn >= 0;\nloop invariant sn <= x * a;\nloop invariant sn == x * a;\nloop invariant x == sn / a;\nloop invariant sn == 0 ==> x == 0;\nloop invariant x == 0 ==> sn == 0;\nloop invariant a == 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#define a (1)\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  /*@\nloop invariant i1: x >= 0;\nloop invariant i2: sn >= 0;\nloop invariant i3: sn <= x * a;\nloop invariant i4: sn == x * a;\nloop invariant i5: x == sn / a;\nloop invariant i6: sn == 0 ==> x == 0;\nloop invariant i7: x == 0 ==> sn == 0;\nloop invariant i8: a == 1;\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n  }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#define a (1)\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  /*@\n\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 1;\nloop invariant sn == x*a;\nloop invariant sn == 0 ==> x == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#define a (1)\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  /*@\n\nloop invariant i2: sn == x*a;\nloop invariant i3: sn == 0 ==> x == 0;\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n  }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= sn;\nloop invariant sn <= x*a;\nloop invariant x >= 0;\nloop invariant x <= 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#define a (1)\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  /*@\nloop invariant i1: 0 <= sn;\nloop invariant i2: sn <= x*a;\nloop invariant i3: x >= 0;\n\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= loop1;\nloop invariant 0 <= sn <= x*a;\nloop invariant sn >= 0;\nloop invariant sn <= x*a;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#define a (1)\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  /*@\n\nloop invariant i2: 0 <= sn <= x*a;\nloop invariant i3: sn >= 0;\nloop invariant i4: sn <= x*a;\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n1;\nloop invariant sn == x*a || (x == 0 && sn == 0);\nloop invariant sn == x*a ==> x == sn / a;\nloop invariant x == sn / a ==> sn == x*a;\nloop invariant x == sn / a && x <= n1 ==> sn == x*a;\nloop invariant sn == x*a && x <= n1 ==> x == sn / a;\nloop invariant sn == x*a && 0 <= x <= n1 ==> x == sn / a;\nloop invariant x == sn / a && 0 <= x <= n1 ==> sn == x*a;\nloop invariant sn == x*a && x == sn / a ==> 0 <= x <= n1;\nloop invariant x == sn / a && sn == x*a ==> 0 <= x <= n1;\nloop invariant sn == x*a && sn == x*a ==> 0 <= x <= n1;\nloop invariant sn == x*a && sn == x*a ==> 0 <= x <= n1;\nloop invariant x == sn / a && sn == x*a ==> 0 <= x <= n1;\nloop invariant sn == x*a && x == sn / a ==> 0 <= x <= n1;\nloop invariant sn == x*a && x == sn / a ==> 0 <= x <= n1;\nloop invariant sn == x*a && 0 <= x <= n1 ==> 0 <= x <= n1;\nloop invariant x == sn / a && sn == x*a ==> 0 <= x <= n1;\nloop invariant sn == x*a && sn == x*a ==> 0 <= x <= n1;\nloop invariant sn == x*a && sn == x*a ==> 0 <= x <= n1;\nloop invariant sn == x*a && 0 <= x <= n1 ==> 0 <= x <= n1;\nloop invariant x == sn / a && sn == x*a ==> 0 <= x <= n1;\nloop invariant sn == x*a && sn == x*a ==> 0 <= x <= n1;\nloop invariant sn == x*a && sn == x*a ==> 0 <= x <= n1;\nloop invariant sn == x*a && 0 <= x <= n1 ==> 0 <= x <= n1;\nloop invariant x == sn / a && sn == x*a ==> 0 <= x <= n1;\nloop invariant sn == x*a && sn == x*a ==> 0 <= x <= n1;\nloop invariant sn == x*a && sn == x*a ==> 0 <= x <= n1;\nloop invariant sn == x*a && 0 <= x <= n1 ==> 0 <= x <= n1;\nloop invariant x == sn / a && sn == x*a ==> 0 <= x <= n1;\nloop invariant sn == x*a && sn == x*a ==> 0 <= x <= n1;\nloop invariant sn == x*a && sn == x*a ==> 0 <= x <= n1;\nloop invariant sn == x*a && 0 <= x <= n1 ==> 0 <= x <= n1;\nloop invariant x == sn / a && sn == x*a ==> 0 <= x <= n1;\nloop invariant sn == x*a && sn == x*a ==> 0 <= x <= n1;\nloop invariant sn == x*a && sn == x*a ==> 0 <= x <= n1;\nloop invariant sn == x*a && 0 <= x <= n1 ==> 0 <= x <= n1;\nloop invariant x == sn / a && sn == x*a ==> 0 <= x <= n1;\nloop invariant sn == x*a && sn == x*a ==> 0 <= x <= n1;\nloop invariant sn == x*a && sn == x*a ==> 0 <= x <= n1;\nloop invariant sn == x*a && 0 <= x <= n1 ==> 0 <= x <= n1;\nloop invariant x == sn / a && sn == x*a ==> 0 <= x <= n1;\nloop invariant sn == x*a && sn == x*a ==> 0 <= x <= n1;\nloop invariant sn == x*a && sn == x*a ==> 0 <= x <= n1;\nloop invariant sn == x*a && 0 <= x <= n1 ==> 0 <= x <= n1;\nloop invariant x == sn / a && sn == x*a ==> 0 <= x <= n1;\nloop invariant sn == x*a && sn == x*a ==> 0 <= x <= n1;\nloop invariant sn == x*a && sn == x*a ==> 0 <= x <= n1;\nloop invariant sn == x*a && 0 <= x <= n1 ==> 0 <= x <= n1;\nloop invariant x == sn / a && sn == x*a ==> 0 <= x <= n1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#define a (1)\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  /*@\n\nloop invariant i2: sn == x*a || (x == 0 && sn == 0);\nloop invariant i3: sn == x*a ==> x == sn / a;\nloop invariant i4: x == sn / a ==> sn == x*a;\nloop invariant i5: x == sn / a && x <= n1 ==> sn == x*a;\nloop invariant i6: sn == x*a && x <= n1 ==> x == sn / a;\nloop invariant i7: sn == x*a && 0 <= x <= n1 ==> x == sn / a;\nloop invariant i8: x == sn / a && 0 <= x <= n1 ==> sn == x*a;\n\n\n\nloop invariant i12: sn == x*a && 0 <= x <= n1 ==> 0 <= x <= n1;\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n  }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= sn;\nloop invariant sn <= x * a;\nloop invariant x <= loop1;\nloop invariant n1 <= loop1;\nloop invariant a == 1;\nloop invariant x >= 0;\nloop invariant sn >= 0;\nloop invariant sn <= loop1 * a;\nloop invariant x <= n1 + 1;\nloop invariant sn <= (n1 + 1) * a;\nloop invariant x <= n1 + 1;\nloop invariant sn <= (n1 + 1) * a;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#define a (1)\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  /*@\nloop invariant i1: 0 <= sn;\nloop invariant i2: sn <= x * a;\n\n\nloop invariant i5: a == 1;\nloop invariant i6: x >= 0;\nloop invariant i7: sn >= 0;\n\n\n\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n  }\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 30: unexpected token 'or'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#define a (1)\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  /*@\nloop invariant i1: x >= 0;\nloop invariant i2: sn == x * a;\nloop invariant i3: x <= loop1 + 1;\nloop invariant i4: 0 <= x <= loop1;\nloop invariant i5: sn >= 0;\nloop invariant i6: sn <= loop1 * a;\nloop invariant i7: x <= loop1;\nloop invariant i8: sn <= loop1 * a ==> sn == x * a;\nloop invariant i9: x <= loop1 ==> sn == x * a;\nloop invariant i10: x <= loop1 ==> sn <= loop1 * a;\nloop invariant i11: x <= loop1 ==> x * a <= loop1 * a;\nloop invariant i12: x <= loop1 ==> sn <= x * a;\nloop invariant i13: 1 <= x <= 2^31 - 1;\nloop invariant i14: sn == x * a or sn == 0;\nloop invariant i15: sn == x * a implies (x > 0);\nloop invariant i16: sn == 0 implies (x == 0);\nloop invariant i17: sn == x * a implies (sn >= 0);\nloop invariant i18: sn == 0 implies (sn == 0);\nloop invariant i19: sn == x * a implies (sn <= 2^31 - 1);\nloop invariant i20: sn == 0 implies (sn <= 2^31 - 1);\nloop invariant i21: sn == x * a implies (sn >= x * a);\nloop invariant i22: sn == 0 implies (sn <= x * a);\nloop invariant i23: sn == x * a implies (sn is integer);\nloop invariant i24: sn == 0 implies (sn is integer);\nloop invariant i25: sn == x * a implies (x is integer);\nloop invariant i26: sn == 0 implies (x is integer);\nloop invariant i27: sn == x * a implies (a is integer);\nloop invariant i28: sn == 0 implies (a is integer);\nloop invariant i29: sn <= x * a;\nloop invariant i30: x <= n1;\nloop invariant i31: sn >= x * a;\nloop invariant i32: sn == 0;\nloop invariant i33: sn >= x*a; loop invariant x <= loop1; loop invariant sn <= x*a; loop invariant x >= 0; loop invariant x <= loop1; loop invariant sn <= x*a; loop invariant sn >= x*a; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a;\nloop invariant i34: 0 <= sn <= n1; loop invariant x >= 0; loop invariant x <= loop1; loop invariant sn <= x*a;\nloop invariant i35: sn == x*a || sn == 0;\nloop invariant i36: 0 <= sn <= x*a;\nloop invariant i37: 0 <= loop1 <= 1;\nloop invariant i38: 0 <= n1 <= 1;\nloop invariant i39: loop1 == 0 || n1 == 0;\nloop invariant i40: n1 == 0 || loop1 == 1;\nloop invariant i41: loop1 == 1 || n1 == 1;\nloop invariant i42: x == sn / a;\nloop invariant i43: sn == 0 ==> x == 0;\nloop invariant i44: x == 0 ==> sn == 0;\nloop invariant i45: a == 1;\nloop invariant i46: 0 <= x <= 1;\nloop invariant i47: sn == x*a;\nloop invariant i48: 0 <= sn;\nloop invariant i49: sn <= x*a;\nloop invariant i50: x <= 1;\nloop invariant i51: 0 <= x <= n1;\nloop invariant i52: sn == x*a || (x == 0 && sn == 0);\nloop invariant i53: sn == x*a ==> x == sn / a;\nloop invariant i54: x == sn / a ==> sn == x*a;\nloop invariant i55: x == sn / a && x <= n1 ==> sn == x*a;\nloop invariant i56: sn == x*a && x <= n1 ==> x == sn / a;\nloop invariant i57: sn == x*a && 0 <= x <= n1 ==> x == sn / a;\nloop invariant i58: x == sn / a && 0 <= x <= n1 ==> sn == x*a;\nloop invariant i59: sn == x*a && x == sn / a ==> 0 <= x <= n1;\nloop invariant i60: x == sn / a && sn == x*a ==> 0 <= x <= n1;\nloop invariant i61: sn == x*a && sn == x*a ==> 0 <= x <= n1;\nloop invariant i62: sn == x*a && 0 <= x <= n1 ==> 0 <= x <= n1;\nloop invariant i63: n1 <= loop1;\nloop invariant i64: x <= n1 + 1;\nloop invariant i65: sn <= (n1 + 1) * a;\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n  }\n}",
        "combined_annotation_num_solver_calls": 27,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#define a (1)\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  /*@\nloop invariant i1: x >= 0;\nloop invariant i2: sn == x * a;\nloop invariant i3: x <= loop1 + 1;\n\nloop invariant i5: sn >= 0;\n\n\nloop invariant i8: sn <= loop1 * a ==> sn == x * a;\nloop invariant i9: x <= loop1 ==> sn == x * a;\nloop invariant i10: x <= loop1 ==> sn <= loop1 * a;\nloop invariant i11: x <= loop1 ==> x * a <= loop1 * a;\nloop invariant i12: x <= loop1 ==> sn <= x * a;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i29: sn <= x * a;\n\nloop invariant i31: sn >= x * a;\n\nloop invariant i33: sn >= x*a; loop invariant x <= loop1; loop invariant sn <= x*a; loop invariant x >= 0; loop invariant x <= loop1; loop invariant sn <= x*a; loop invariant sn >= x*a; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a; loop invariant sn >= sn; loop invariant sn <= sn + a;\n\nloop invariant i35: sn == x*a || sn == 0;\nloop invariant i36: 0 <= sn <= x*a;\n\n\n\n\n\nloop invariant i42: x == sn / a;\nloop invariant i43: sn == 0 ==> x == 0;\nloop invariant i44: x == 0 ==> sn == 0;\nloop invariant i45: a == 1;\n\nloop invariant i47: sn == x*a;\nloop invariant i48: 0 <= sn;\nloop invariant i49: sn <= x*a;\n\n\nloop invariant i52: sn == x*a || (x == 0 && sn == 0);\nloop invariant i53: sn == x*a ==> x == sn / a;\nloop invariant i54: x == sn / a ==> sn == x*a;\nloop invariant i55: x == sn / a && x <= n1 ==> sn == x*a;\nloop invariant i56: sn == x*a && x <= n1 ==> x == sn / a;\nloop invariant i57: sn == x*a && 0 <= x <= n1 ==> x == sn / a;\nloop invariant i58: x == sn / a && 0 <= x <= n1 ==> sn == x*a;\n\n\n\nloop invariant i62: sn == x*a && 0 <= x <= n1 ==> 0 <= x <= n1;\n\n\n\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n  }\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/split.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c"
        ],
        "skipped": [],
        "total": 89,
        "success_count": 75,
        "failure_count": 14,
        "success_rate": 0.8426966292134831
    }
}